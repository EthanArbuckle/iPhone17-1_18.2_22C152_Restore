uint64_t WGSL::constantDistance@<X0>(const WGSL::Type *a1@<X0>, int **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t result;
  const WGSL::Type *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned char v19[16];
  int v20;
  uint64_t v21;
  unsigned char v22[16];
  int v23;
  unsigned char v24[8];
  void v25[2];
  unsigned int v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E4F143B8];
  WGSL::constantMinus(0, a2, (uint64_t)v24);
  if (v27)
  {
    if (v27 != 1)
    {
      v16 = (const WGSL::Type *)std::__throw_bad_variant_access[abi:sn180100]();
      return WGSL::constantDot(v16, v17);
    }
    v5 = v25[0];
    if (v25[0]) {
      *(_DWORD *)v25[0] += 2;
    }
    *(void *)(a3 + 8) = v5;
    v6 = 1;
    *(_DWORD *)(a3 + 32) = 1;
    return ((uint64_t (*)(unsigned char *, void *))off_1ECABED68[v6])(v19, v25);
  }
  v19[0] = 0;
  v20 = -1;
  v7 = v26;
  if (v26 == -1)
  {
    v22[0] = 0;
    v23 = -1;
  }
  else
  {
    ((void (*)(unsigned char *, unsigned char *, void *))off_1ECABECB8[v26])(v22, v19, v25);
    v20 = v7;
    v22[0] = 0;
    v23 = -1;
    ((void (*)(uint64_t *, unsigned char *, unsigned char *))off_1ECABEE88[v7])(&v21, v22, v19);
    v23 = v7;
  }
  v8 = WTF::fastMalloc((WTF *)0x20);
  v9 = (WTF *)v8;
  *(void *)(v8 + 8) = 0;
  *(_DWORD *)v8 = 1;
  *(void *)(v8 + 16) = 0;
  *(void *)(v8 + 24) = 0;
  v18 = v8;
  if (v23 == -1)
  {
    *(_DWORD *)(v8 + 24) = -1;
  }
  else
  {
    v21 = v8 + 8;
    ((void (*)(uint64_t *))off_1ECABEEE0[v23])(&v21);
  }
  WGSL::constantLength(a1, &v18, a3);
  v11 = *(unsigned int *)v9;
  if (v11)
  {
    v12 = 24 * v11;
    v13 = (_DWORD *)((char *)v9 + 24);
    do
    {
      v10 = v13 - 4;
      v14 = *v13;
      if (v14 != -1) {
        ((void (*)(uint64_t *, _DWORD *))off_1ECABEC60[v14])(&v21, v10);
      }
      *v13 = -1;
      v13 += 6;
      v12 -= 24;
    }
    while (v12);
  }
  result = WTF::fastFree(v9, v10);
  if (v23 != -1) {
    result = ((uint64_t (*)(uint64_t *, unsigned char *))off_1ECABEC60[v23])(&v21, v22);
  }
  if (v20 != -1) {
    result = ((uint64_t (*)(unsigned char *, unsigned char *))off_1ECABEC60[v20])(v22, v19);
  }
  v6 = v27;
  if (v27 != -1) {
    return ((uint64_t (*)(unsigned char *, void *))off_1ECABED68[v6])(v19, v25);
  }
  return result;
}

uint64_t WGSL::constantDot@<X0>(const WGSL::Type *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  WGSL::constantMultiply(&v39);
  if (v42)
  {
    if (v42 == 1)
    {
      uint64_t v4 = v40[0];
      if (v40[0]) {
        *(_DWORD *)v40[0] += 2;
      }
      *(void *)(a2 + 8) = v4;
      int v5 = 1;
      *(_DWORD *)(a2 + 32) = 1;
      return ((uint64_t (*)(void *, void *))off_1ECABED68[v5])(v31, v40);
    }
LABEL_65:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  LOBYTE(v28[0]) = 0;
  int v29 = -1;
  int v6 = v41;
  if (v41 != -1)
  {
    ((void (*)(void *, void *, void *))off_1ECABECB8[v41])(v31, v28, v40);
    int v29 = v6;
  }
  uint64_t result = WGSL::zeroValue((WGSL *)v26, a1);
  if (v29 != 8) {
    goto LABEL_65;
  }
  if (v28[0]) {
    uint64_t v8 = v28[0] + 8;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v28[0])
  {
    uint64_t v9 = v28[0] + 8 + 24 * *(unsigned int *)v28[0];
    if (v8 != v9) {
      goto LABEL_16;
    }
    goto LABEL_54;
  }
  uint64_t v9 = 0;
  if (v8)
  {
    do
    {
LABEL_16:
      LOBYTE(v31[0]) = 0;
      int v32 = -1;
      int v10 = v27;
      if (v27 != -1)
      {
        ((void (*)(uint64_t *, void *, unsigned char *))off_1ECABEE88[v27])(&v30, v31, v26);
        int v32 = v10;
      }
      v33[0] = 0;
      unsigned int v34 = -1;
      uint64_t v11 = *(unsigned int *)(v8 + 16);
      if (v11 != -1)
      {
        ((void (*)(uint64_t *, unsigned char *, uint64_t))off_1ECABEE88[v11])(&v30, v33, v8);
        unsigned int v34 = v11;
      }
      uint64_t v12 = WTF::fastMalloc((WTF *)0x38);
      v13 = (unsigned int *)v12;
      *(_OWORD *)(v12 + 8) = 0u;
      *(_DWORD *)uint64_t v12 = 2;
      *(_OWORD *)(v12 + 24) = 0u;
      *(_OWORD *)(v12 + 40) = 0u;
      v25 = (unsigned int *)v12;
      if (v32 == -1)
      {
        *(_DWORD *)(v12 + 24) = -1;
        v15 = (unsigned int *)(v12 + 32);
        uint64_t v16 = v34;
        if (v34 == -1)
        {
          uint64_t v14 = 0;
LABEL_28:
          ((void (*)(uint64_t *, unsigned int *))off_1ECABEC60[v14])(&v30, v15);
          v13[12] = -1;
LABEL_29:
          WGSL::constantAdd((uint64_t)a1, &v25, (uint64_t)v35);
          uint64_t v18 = *v13;
          if (!v18) {
            goto LABEL_36;
          }
          goto LABEL_32;
        }
      }
      else
      {
        uint64_t v30 = v12 + 8;
        ((void (*)(uint64_t *))off_1ECABEEE0[v32])(&v30);
        if (*v13 < 2)
        {
          __break(0xC471u);
          JUMPOUT(0x182688098);
        }
        uint64_t v14 = v13[12];
        v15 = v13 + 8;
        uint64_t v16 = v34;
        if (v14 == -1)
        {
          if (v34 == 0xFFFFFFFFLL) {
            goto LABEL_29;
          }
        }
        else if (v34 == 0xFFFFFFFFLL)
        {
          goto LABEL_28;
        }
      }
      uint64_t v30 = (uint64_t)v15;
      ((void (*)(uint64_t *))off_1ECABEEE0[v16])(&v30);
      WGSL::constantAdd((uint64_t)a1, &v25, (uint64_t)v35);
      uint64_t v18 = *v13;
      if (!v18) {
        goto LABEL_36;
      }
LABEL_32:
      uint64_t v19 = 24 * v18;
      v20 = v13 + 6;
      do
      {
        v17 = v20 - 4;
        uint64_t v21 = *v20;
        if (v21 != -1) {
          ((void (*)(uint64_t *, _DWORD *))off_1ECABEC60[v21])(&v30, v17);
        }
        _DWORD *v20 = -1;
        v20 += 6;
        v19 -= 24;
      }
      while (v19);
LABEL_36:
      uint64_t result = WTF::fastFree((WTF *)v13, v17);
      if (v34 != -1) {
        uint64_t result = ((uint64_t (*)(uint64_t *, unsigned char *))off_1ECABEC60[v34])(&v30, v33);
      }
      unsigned int v34 = -1;
      if (v32 != -1) {
        uint64_t result = ((uint64_t (*)(uint64_t *, void *))off_1ECABEC60[v32])(&v30, v31);
      }
      int v22 = v38;
      if (v38)
      {
        if (v38 != 1) {
          goto LABEL_65;
        }
        uint64_t v23 = v36[0];
        if (v36[0]) {
          *(_DWORD *)v36[0] += 2;
        }
        *(void *)(a2 + 8) = v23;
        *(_DWORD *)(a2 + 32) = 1;
      }
      else
      {
        if (v27 == -1)
        {
          if (v37 == -1) {
            goto LABEL_50;
          }
        }
        else if (v37 == -1)
        {
          uint64_t result = ((uint64_t (*)(void *, unsigned char *))off_1ECABEC60[v27])(v31, v26);
          int v27 = -1;
          goto LABEL_50;
        }
        v31[0] = v26;
        uint64_t result = ((uint64_t (*)(void *, unsigned char *, void *))off_1ECABEF38[v37])(v31, v26, v36);
      }
LABEL_50:
      if (v38 != -1) {
        uint64_t result = ((uint64_t (*)(void *, void *))off_1ECABED68[v38])(v31, v36);
      }
      if (v22) {
        goto LABEL_57;
      }
      v8 += 24;
    }
    while (v8 != v9);
  }
LABEL_54:
  *(unsigned char *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = -1;
  int v24 = v27;
  if (v27 != -1)
  {
    uint64_t result = ((uint64_t (*)(void *))off_1ECABEE88[v27])(v31);
    *(_DWORD *)(a2 + 24) = v24;
  }
  *(_DWORD *)(a2 + 32) = 0;
LABEL_57:
  if (v27 != -1) {
    uint64_t result = ((uint64_t (*)(void *, unsigned char *))off_1ECABEC60[v27])(v31, v26);
  }
  if (v29 != -1) {
    uint64_t result = ((uint64_t (*)(void *, void *))off_1ECABEC60[v29])(v31, v28);
  }
  int v5 = v42;
  if (v42 != -1) {
    return ((uint64_t (*)(void *, void *))off_1ECABED68[v5])(v31, v40);
  }
  return result;
}

void WGSL::constantDot4U8Packed(unsigned int **a1@<X1>, _DWORD *a2@<X8>)
{
  v2 = *a1;
  unsigned int v3 = **a1;
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x182688148);
  }
  if (v2[6] != 4) {
    goto LABEL_8;
  }
  if (v3 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x182688168);
  }
  if (v2[12] == 4)
  {
    unsigned int v4 = v2[2];
    a2[2] = v2[8] * v4
          + HIBYTE(v2[8]) * HIBYTE(v4)
          + BYTE1(v2[8]) * BYTE1(v4)
          + BYTE2(v2[8]) * BYTE2(v4);
    a2[6] = 4;
    a2[8] = 0;
  }
  else
  {
LABEL_8:
    uint64_t v5 = std::__throw_bad_variant_access[abi:sn180100]();
    WGSL::constantDot4I8Packed(v5);
  }
}

void WGSL::constantDot4I8Packed(unsigned int **a1@<X1>, _DWORD *a2@<X8>)
{
  v2 = *a1;
  unsigned int v3 = **a1;
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x182688214);
  }
  if (v2[6] != 4) {
    goto LABEL_8;
  }
  if (v3 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x182688234);
  }
  if (v2[12] == 4)
  {
    int v4 = v2[2];
    a2[2] = ((int)v2[8] >> 24) * (v4 >> 24)
          + ((__int16)v2[8] >> 8) * ((__int16)v4 >> 8)
          + (char)v2[8] * (char)v4
          + ((int)(v2[8] << 8) >> 24) * (v4 << 8 >> 24);
    a2[6] = 3;
    a2[8] = 0;
  }
  else
  {
LABEL_8:
    uint64_t v5 = std::__throw_bad_variant_access[abi:sn180100]();
    WGSL::constantExp(v5);
  }
}

__int16 WGSL::constantExp@<H0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x182688714);
  }
  LOBYTE(v50[0]) = 0;
  unsigned int v51 = -1;
  uint64_t v4 = v3[6];
  if (v4 == -1) {
    goto LABEL_60;
  }
  uint64_t v5 = (long double *)(v3 + 2);
  int v6 = off_1ECABEE88[v4];
  ((void (*)(long double **, void *, _DWORD *))v6)(&v45, v50, v3 + 2);
  unsigned int v51 = v4;
  LOBYTE(v45) = 0;
  int v47 = -1;
  ((void (*)(long double *, long double **, void *))v6)(__x, &v45, v50);
  unsigned int v7 = 0;
  int v47 = v4;
  if (v4 == 8)
  {
    if (v45) {
      unsigned int v7 = *(_DWORD *)v45;
    }
    else {
      unsigned int v7 = 0;
    }
  }
  ((void (*)(long double *, long double **))off_1ECABEC60[v4])(__x, &v45);
  if (!v7)
  {
    int v37 = v3[6];
    switch(v37)
    {
      case 2:
        _D0 = exp(*v5);
        *(long double *)(a2 + 8) = _D0;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v36 = v51;
        if (v51 != -1) {
          goto LABEL_44;
        }
        return LOWORD(_D0);
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0; float }
        *(float *)&_D0 = expf(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v36 = v51;
        if (v51 != -1) {
          goto LABEL_44;
        }
        return LOWORD(_D0);
      case 0:
        *(float *)&_D0 = expf(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(_D0);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v36 = v51;
        if (v51 != -1) {
          goto LABEL_44;
        }
        return LOWORD(_D0);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x182688774);
  }
  uint64_t v41 = a2;
  uint64_t v8 = 24 * v7;
  uint64_t v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *uint64_t v9 = v7;
  uint64_t v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  unint64_t v12 = 0;
  LODWORD(__x[0]) = 0;
  unsigned int v43 = 0;
  do
  {
    if (v51 == 8)
    {
      if (v12 >= *(unsigned int *)v50[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1826886F4);
      }
      uint64_t v11 = v50[0] + v10 * 4 - 16;
      uint64_t v13 = *(unsigned int *)(v50[0] + v10 * 4);
      uint64_t v14 = v43;
      if (v43 == -1)
      {
        if (v13 == -1) {
          goto LABEL_22;
        }
      }
      else if (v13 == -1)
      {
        goto LABEL_58;
      }
      v45 = __x;
      ((void (*)(long double **, long double *, uint64_t))off_1ECABEEE0[v13])(&v45, __x, v11);
    }
    else
    {
      uint64_t v14 = v43;
      if (v43 == -1)
      {
        if (v51 == -1) {
          goto LABEL_59;
        }
      }
      else if (v51 == -1)
      {
LABEL_58:
        ((void (*)(long double **, long double *, uint64_t))off_1ECABEC60[v14])(&v45, __x, v11);
        unsigned int v43 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x182688754);
      }
      v45 = __x;
      ((void (*)(long double **, long double *, void *))off_1ECABEEE0[v51])(&v45, __x, v50);
    }
LABEL_22:
    uint64_t v15 = v43;
    if (v43)
    {
      if (v43 == 1)
      {
        _H0 = LOWORD(__x[0]);
        __asm { FCVT            S0, H0; float }
        _S0 = expf(_S0);
        __asm { FCVT            H0, S0 }
        LOWORD(v46) = LOWORD(_S0);
      }
      else
      {
        if (v43 != 2) {
          goto LABEL_59;
        }
        long double v46 = exp(__x[0]);
      }
    }
    else
    {
      LODWORD(v46) = expf(*(float *)__x);
    }
    int v48 = v15;
    int v49 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1826886D4);
    }
    uint64_t v44 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1ECABEF38[v15])(&v44);
    if (v49 != -1) {
      ((void (*)(uint64_t *, long double *))off_1ECABED68[v49])(&v44, &v46);
    }
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  uint64_t v23 = *v9;
  int v24 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v23 + 8));
  v26 = v24;
  *int v24 = v23;
  if (v23)
  {
    int v27 = v24 + 6;
    uint64_t v28 = 24 * v23;
    int v29 = v9 + 6;
    do
    {
      *((unsigned char *)v27 - 16) = 0;
      v25 = v27 - 4;
      *int v27 = -1;
      uint64_t v30 = *v29;
      if (v30 != -1)
      {
        ((void (*)(long double **, _DWORD *, unsigned int *))off_1ECABEE88[v30])(&v45, v25, v29 - 4);
        *int v27 = v30;
      }
      v27 += 6;
      v29 += 6;
      v28 -= 24;
    }
    while (v28);
  }
  *(void *)(v41 + 8) = v26;
  *(_DWORD *)(v41 + 24) = 8;
  *(_DWORD *)(v41 + 32) = 0;
  if (v43 != -1) {
    ((void (*)(long double **, long double *))off_1ECABEC60[v43])(&v45, __x);
  }
  uint64_t v31 = *v9;
  if (v31)
  {
    uint64_t v32 = 24 * v31;
    v33 = v9 + 6;
    do
    {
      v25 = v33 - 4;
      uint64_t v34 = *v33;
      if (v34 != -1) {
        ((void (*)(long double **, _DWORD *))off_1ECABEC60[v34])(&v45, v25);
      }
      _DWORD *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  WTF::fastFree((WTF *)v9, v25);
  uint64_t v36 = v51;
  if (v51 != -1) {
LABEL_44:
  }
    ((void (*)(long double **, void *))off_1ECABEC60[v36])(&v45, v50);
  return LOWORD(_D0);
}

__int16 WGSL::constantExp2@<H0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x182688C54);
  }
  LOBYTE(v50[0]) = 0;
  unsigned int v51 = -1;
  uint64_t v4 = v3[6];
  if (v4 == -1) {
    goto LABEL_60;
  }
  uint64_t v5 = (long double *)(v3 + 2);
  int v6 = off_1ECABEE88[v4];
  ((void (*)(long double **, void *, _DWORD *))v6)(&v45, v50, v3 + 2);
  unsigned int v51 = v4;
  LOBYTE(v45) = 0;
  int v47 = -1;
  ((void (*)(long double *, long double **, void *))v6)(__x, &v45, v50);
  unsigned int v7 = 0;
  int v47 = v4;
  if (v4 == 8)
  {
    if (v45) {
      unsigned int v7 = *(_DWORD *)v45;
    }
    else {
      unsigned int v7 = 0;
    }
  }
  ((void (*)(long double *, long double **))off_1ECABEC60[v4])(__x, &v45);
  if (!v7)
  {
    int v37 = v3[6];
    switch(v37)
    {
      case 2:
        _D0 = exp2(*v5);
        *(long double *)(a2 + 8) = _D0;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v36 = v51;
        if (v51 != -1) {
          goto LABEL_44;
        }
        return LOWORD(_D0);
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0; float }
        *(float *)&_D0 = exp2f(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v36 = v51;
        if (v51 != -1) {
          goto LABEL_44;
        }
        return LOWORD(_D0);
      case 0:
        *(float *)&_D0 = exp2f(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(_D0);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v36 = v51;
        if (v51 != -1) {
          goto LABEL_44;
        }
        return LOWORD(_D0);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x182688CB4);
  }
  uint64_t v41 = a2;
  uint64_t v8 = 24 * v7;
  uint64_t v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *uint64_t v9 = v7;
  uint64_t v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  unint64_t v12 = 0;
  LODWORD(__x[0]) = 0;
  unsigned int v43 = 0;
  do
  {
    if (v51 == 8)
    {
      if (v12 >= *(unsigned int *)v50[0])
      {
        __break(0xC471u);
        JUMPOUT(0x182688C34);
      }
      uint64_t v11 = v50[0] + v10 * 4 - 16;
      uint64_t v13 = *(unsigned int *)(v50[0] + v10 * 4);
      uint64_t v14 = v43;
      if (v43 == -1)
      {
        if (v13 == -1) {
          goto LABEL_22;
        }
      }
      else if (v13 == -1)
      {
        goto LABEL_58;
      }
      v45 = __x;
      ((void (*)(long double **, long double *, uint64_t))off_1ECABEEE0[v13])(&v45, __x, v11);
    }
    else
    {
      uint64_t v14 = v43;
      if (v43 == -1)
      {
        if (v51 == -1) {
          goto LABEL_59;
        }
      }
      else if (v51 == -1)
      {
LABEL_58:
        ((void (*)(long double **, long double *, uint64_t))off_1ECABEC60[v14])(&v45, __x, v11);
        unsigned int v43 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x182688C94);
      }
      v45 = __x;
      ((void (*)(long double **, long double *, void *))off_1ECABEEE0[v51])(&v45, __x, v50);
    }
LABEL_22:
    uint64_t v15 = v43;
    if (v43)
    {
      if (v43 == 1)
      {
        _H0 = LOWORD(__x[0]);
        __asm { FCVT            S0, H0; float }
        _S0 = exp2f(_S0);
        __asm { FCVT            H0, S0 }
        LOWORD(v46) = LOWORD(_S0);
      }
      else
      {
        if (v43 != 2) {
          goto LABEL_59;
        }
        long double v46 = exp2(__x[0]);
      }
    }
    else
    {
      LODWORD(v46) = exp2f(*(float *)__x);
    }
    int v48 = v15;
    int v49 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x182688C14);
    }
    uint64_t v44 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1ECABEF38[v15])(&v44);
    if (v49 != -1) {
      ((void (*)(uint64_t *, long double *))off_1ECABED68[v49])(&v44, &v46);
    }
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  uint64_t v23 = *v9;
  int v24 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v23 + 8));
  v26 = v24;
  *int v24 = v23;
  if (v23)
  {
    int v27 = v24 + 6;
    uint64_t v28 = 24 * v23;
    int v29 = v9 + 6;
    do
    {
      *((unsigned char *)v27 - 16) = 0;
      v25 = v27 - 4;
      *int v27 = -1;
      uint64_t v30 = *v29;
      if (v30 != -1)
      {
        ((void (*)(long double **, _DWORD *, unsigned int *))off_1ECABEE88[v30])(&v45, v25, v29 - 4);
        *int v27 = v30;
      }
      v27 += 6;
      v29 += 6;
      v28 -= 24;
    }
    while (v28);
  }
  *(void *)(v41 + 8) = v26;
  *(_DWORD *)(v41 + 24) = 8;
  *(_DWORD *)(v41 + 32) = 0;
  if (v43 != -1) {
    ((void (*)(long double **, long double *))off_1ECABEC60[v43])(&v45, __x);
  }
  uint64_t v31 = *v9;
  if (v31)
  {
    uint64_t v32 = 24 * v31;
    v33 = v9 + 6;
    do
    {
      v25 = v33 - 4;
      uint64_t v34 = *v33;
      if (v34 != -1) {
        ((void (*)(long double **, _DWORD *))off_1ECABEC60[v34])(&v45, v25);
      }
      _DWORD *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  WTF::fastFree((WTF *)v9, v25);
  uint64_t v36 = v51;
  if (v51 != -1) {
LABEL_44:
  }
    ((void (*)(long double **, void *))off_1ECABEC60[v36])(&v45, v50);
  return LOWORD(_D0);
}

uint64_t WGSL::constantExtractBits@<X0>(unsigned int **a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  v2 = *a1;
  unsigned int v3 = **a1;
  if (v3 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x182689384);
  }
  if (v2[12] != 4) {
    goto LABEL_100;
  }
  if (v3 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1826893A4);
  }
  if (v2[18] != 4)
  {
LABEL_100:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_101;
  }
  unsigned int v4 = v2[8];
  unsigned int v5 = v2[14];
  LOBYTE(v61[0]) = 0;
  int v62 = -1;
  uint64_t v6 = v2[6];
  if (v6 == -1)
  {
LABEL_101:
    __break(0xC471u);
    JUMPOUT(0x182689408);
  }
  unsigned int v7 = v2 + 2;
  uint64_t v8 = off_1ECABEE88[v6];
  ((void (*)(unsigned int **, void *, unsigned int *))v8)(&v56, v61, v2 + 2);
  int v62 = v6;
  LOBYTE(v56) = 0;
  int v58 = -1;
  ((void (*)(_DWORD *, unsigned int **, void *))v8)(v53, &v56, v61);
  unsigned int v9 = 0;
  int v58 = v6;
  if (v6 == 8)
  {
    if (v56) {
      unsigned int v9 = *v56;
    }
    else {
      unsigned int v9 = 0;
    }
  }
  ((void (*)(_DWORD *, unsigned int **))off_1ECABEC60[v6])(v53, &v56);
  if (!v9)
  {
    uint64_t v37 = v2[6];
    if (v37 == 4)
    {
      unsigned int v38 = *v7;
      if (v4 >= 0x20) {
        int v48 = 32;
      }
      else {
        int v48 = v4;
      }
      unsigned int v40 = 32 - v48;
      if (32 - v48 >= v5) {
        unsigned int v40 = v5;
      }
      BOOL v42 = v40 == 32;
      unsigned int v41 = (v38 & (~(-1 << v40) << v48)) >> v48;
      goto LABEL_85;
    }
    if (v37 == 3)
    {
      unsigned int v38 = *v7;
      if (v4 >= 0x20) {
        int v39 = 32;
      }
      else {
        int v39 = v4;
      }
      unsigned int v40 = 32 - v39;
      if (32 - v39 >= v5) {
        unsigned int v40 = v5;
      }
      unsigned int v41 = ((int)((v38 & (~(-1 << v40) << v39)) >> v39 >> (v40 - 1) << 31) >> 31) & ~((~(-1 << v40) << v39) >> v39) | ((v38 & (~(-1 << v40) << v39)) >> v39);
      BOOL v42 = v40 == 32;
LABEL_85:
      if (!v42) {
        unsigned int v38 = v41;
      }
      if (!v40) {
        unsigned int v38 = 0;
      }
      LODWORD(v56) = v38;
      int v58 = v37;
      *(unsigned char *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 24) = -1;
      uint64_t result = ((uint64_t (*)(_DWORD *, uint64_t, unsigned int **))off_1ECABECB8[v37])(v53, a2 + 8, &v56);
      *(_DWORD *)(a2 + 24) = v37;
      *(_DWORD *)(a2 + 32) = 0;
      if (v58 != -1) {
        uint64_t result = ((uint64_t (*)(_DWORD *, unsigned int **))off_1ECABEC60[v58])(v53, &v56);
      }
      goto LABEL_91;
    }
    goto LABEL_101;
  }
  uint64_t v10 = v9;
  uint64_t v11 = 24 * v9;
  unint64_t v12 = (unsigned int *)WTF::fastMalloc((WTF *)(v11 + 8));
  *unint64_t v12 = v9;
  uint64_t v13 = v12 + 2;
  uint64_t v14 = 6;
  bzero(v12 + 2, 24 * ((v11 - 24) / 0x18uLL) + 24);
  unint64_t v16 = 0;
  v53[0] = 0;
  unsigned int v54 = 0;
  if (v4 >= 0x20) {
    int v17 = 32;
  }
  else {
    int v17 = v4;
  }
  if (32 - v17 >= v5) {
    int v18 = v5;
  }
  else {
    int v18 = 32 - v17;
  }
  unsigned int v49 = ~(-1 << v18) << v17;
  do
  {
    if (v62 == 8)
    {
      if (v16 >= *(unsigned int *)v61[0])
      {
        __break(0xC471u);
        JUMPOUT(0x182689364);
      }
      uint64_t v15 = v61[0] + v14 * 4 - 16;
      uint64_t v19 = *(unsigned int *)(v61[0] + v14 * 4);
      uint64_t v20 = v54;
      if (v54 == -1)
      {
        if (v19 == -1) {
          goto LABEL_30;
        }
      }
      else if (v19 == -1)
      {
        goto LABEL_98;
      }
      v56 = v53;
      ((void (*)(unsigned int **, _DWORD *, uint64_t))off_1ECABEEE0[v19])(&v56, v53, v15);
    }
    else
    {
      uint64_t v20 = v54;
      if (v54 == -1)
      {
        if (v62 == -1) {
          goto LABEL_99;
        }
      }
      else if (v62 == -1)
      {
LABEL_98:
        ((void (*)(unsigned int **, _DWORD *, uint64_t))off_1ECABEC60[v20])(&v56, v53, v15);
        unsigned int v54 = -1;
LABEL_99:
        __break(0xC471u);
        JUMPOUT(0x1826893E4);
      }
      v56 = v53;
      ((void (*)(unsigned int **, _DWORD *, void *))off_1ECABEEE0[v62])(&v56, v53, v61);
    }
LABEL_30:
    unsigned int v21 = v54;
    if (v54 == 3)
    {
      unsigned int v22 = v18;
      if (v18)
      {
        unsigned int v22 = v53[0];
        if (v18 != 32)
        {
          unsigned int v23 = (v53[0] & v49) >> v17;
          int v24 = ~(v49 >> v17);
          if ((v23 & (1 << (v18 - 1))) == 0) {
            int v24 = 0;
          }
          unsigned int v22 = v24 | v23;
        }
      }
    }
    else
    {
      if (v54 != 4) {
        goto LABEL_99;
      }
      unsigned int v22 = v18;
      if (v18)
      {
        unsigned int v22 = v53[0];
        if (v18 != 32) {
          unsigned int v22 = (v53[0] & v49) >> v17;
        }
      }
    }
    LODWORD(v51[0]) = v22;
    unsigned int v52 = v54;
    LOBYTE(v57) = 0;
    int v59 = -1;
    ((void (*)(char *, _DWORD **, void *))off_1ECABECB8[v54])(&v55, &v57, v51);
    int v59 = v21;
    unsigned int v60 = 0;
    if (v52 == -1 || (((void (*)(char *, void *))off_1ECABEC60[v52])(&v55, v51), !v60))
    {
      if (v16 >= *v12)
      {
        __break(0xC471u);
        JUMPOUT(0x182689344);
      }
      uint64_t v29 = v12[v14];
      if (v29 == -1)
      {
        if (v59 == -1) {
          goto LABEL_53;
        }
      }
      else if (v59 == -1)
      {
        ((void (*)(void *, unsigned int *))off_1ECABEC60[v29])(v51, v13);
        v12[v14] = -1;
        goto LABEL_53;
      }
      v51[0] = v13;
      ((void (*)(void *, unsigned int *, _DWORD **))off_1ECABEF38[v59])(v51, v13, &v57);
LABEL_53:
      char v27 = 1;
      uint64_t v28 = v60;
      if (v60 == -1) {
        goto LABEL_55;
      }
LABEL_54:
      ((void (*)(void *, _DWORD **))off_1ECABED68[v28])(v51, &v57);
      goto LABEL_55;
    }
    if (v60 != 1) {
      goto LABEL_100;
    }
    v26 = v57;
    if (v57) {
      *v57 += 2;
    }
    char v27 = 0;
    *(void *)(a2 + 8) = v26;
    *(_DWORD *)(a2 + 32) = 1;
    uint64_t v28 = v60;
    if (v60 != -1) {
      goto LABEL_54;
    }
LABEL_55:
    if ((v27 & 1) == 0) {
      goto LABEL_71;
    }
    ++v16;
    v13 += 6;
    v14 += 6;
  }
  while (v10 != v16);
  uint64_t v30 = *v12;
  uint64_t v31 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v30 + 8));
  uint64_t v32 = v31;
  *uint64_t v31 = v30;
  if (v30)
  {
    v33 = v31 + 6;
    uint64_t v34 = 24 * v30;
    v35 = v12 + 6;
    do
    {
      *((unsigned char *)v33 - 16) = 0;
      v25 = v33 - 4;
      _DWORD *v33 = -1;
      uint64_t v36 = *v35;
      if (v36 != -1)
      {
        ((void (*)(unsigned int **, _DWORD *, unsigned int *))off_1ECABEE88[v36])(&v56, v25, v35 - 4);
        _DWORD *v33 = v36;
      }
      v33 += 6;
      v35 += 6;
      v34 -= 24;
    }
    while (v34);
  }
  *(void *)(a2 + 8) = v32;
  *(_DWORD *)(a2 + 24) = 8;
  *(_DWORD *)(a2 + 32) = 0;
LABEL_71:
  if (v54 != -1) {
    ((void (*)(unsigned int **, _DWORD *))off_1ECABEC60[v54])(&v56, v53);
  }
  uint64_t v43 = *v12;
  if (v43)
  {
    uint64_t v44 = 24 * v43;
    v45 = v12 + 6;
    do
    {
      v25 = v45 - 4;
      uint64_t v46 = *v45;
      if (v46 != -1) {
        ((void (*)(unsigned int **, _DWORD *))off_1ECABEC60[v46])(&v56, v25);
      }
      _DWORD *v45 = -1;
      v45 += 6;
      v44 -= 24;
    }
    while (v44);
  }
  uint64_t result = WTF::fastFree((WTF *)v12, v25);
LABEL_91:
  if (v62 != -1) {
    return ((uint64_t (*)(unsigned int **, void *))off_1ECABEC60[v62])(&v56, v61);
  }
  return result;
}

uint64_t WGSL::constantFaceForward@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *a2;
  unsigned int v5 = **a2;
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x182689B2CLL);
  }
  if (v5 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x182689B4CLL);
  }
  if (v5 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x182689B6CLL);
  }
  if (*(_DWORD *)(a1 + 48) != 1) {
    goto LABEL_92;
  }
  unsigned int v7 = *(const WGSL::Type **)a1;
  v56[0] = 0;
  int v57 = -1;
  uint64_t v8 = v4[12];
  if (v8 != -1)
  {
    ((void (*)(uint64_t *, unsigned char *, unsigned int *))off_1ECABEE88[v8])(&v60, v56, v4 + 8);
    int v57 = v8;
  }
  v58[0] = 0;
  int v59 = -1;
  uint64_t v9 = v4[18];
  if (v9 != -1)
  {
    ((void (*)(uint64_t *, unsigned char *, unsigned int *))off_1ECABEE88[v9])(&v60, v58, v4 + 14);
    int v59 = v9;
  }
  uint64_t v10 = WTF::fastMalloc((WTF *)0x38);
  uint64_t v11 = (unsigned int *)v10;
  *(_DWORD *)uint64_t v10 = 2;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  uint64_t v52 = v10;
  if (v57 == -1)
  {
    *(_DWORD *)(v10 + 24) = -1;
    uint64_t v13 = (unsigned int *)(v10 + 32);
    int v14 = v59;
    if (v59 == -1)
    {
      unsigned int v12 = 0;
LABEL_16:
      ((void (*)(uint64_t *, unsigned int *))off_1ECABEC60[v12])(&v60, v13);
      v11[12] = -1;
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v60 = v10 + 8;
    ((void (*)(uint64_t *))off_1ECABEEE0[v57])(&v60);
    if (*v11 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x182689B8CLL);
    }
    unsigned int v12 = v11[12];
    uint64_t v13 = v11 + 8;
    int v14 = v59;
    if (v12 == -1)
    {
      if (v59 == -1) {
        goto LABEL_19;
      }
    }
    else if (v59 == -1)
    {
      goto LABEL_16;
    }
  }
  uint64_t v60 = (uint64_t)v13;
  ((void (*)(uint64_t *))off_1ECABEEE0[v14])(&v60);
LABEL_19:
  WGSL::constantDot(v7, (uint64_t)&v60);
  uint64_t v16 = *v11;
  if (v16)
  {
    uint64_t v17 = 24 * v16;
    int v18 = v11 + 6;
    do
    {
      uint64_t v15 = v18 - 4;
      uint64_t v19 = *v18;
      if (v19 != -1) {
        ((void (*)(unsigned char *, _DWORD *))off_1ECABEC60[v19])(v47, v15);
      }
      *int v18 = -1;
      v18 += 6;
      v17 -= 24;
    }
    while (v17);
  }
  WTF::fastFree((WTF *)v11, v15);
  if (v59 != -1) {
    ((void (*)(unsigned char *, unsigned char *))off_1ECABEC60[v59])(v47, v58);
  }
  int v59 = -1;
  if (v57 != -1) {
    ((void (*)(unsigned char *, unsigned char *))off_1ECABEC60[v57])(v47, v56);
  }
  if (v63)
  {
    if (v63 == 1)
    {
      uint64_t v20 = v61[0];
      if (v61[0]) {
        *(_DWORD *)v61[0] += 2;
      }
      *(void *)(a3 + 8) = v20;
      int v21 = 1;
      *(_DWORD *)(a3 + 32) = 1;
      return ((uint64_t (*)(unsigned char *, void *))off_1ECABED68[v21])(v56, v61);
    }
LABEL_92:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v47[0] = 0;
  int v48 = -1;
  uint64_t v22 = v62;
  if (v62 == -1)
  {
    v56[0] = 0;
    int v57 = -1;
  }
  else
  {
    ((void (*)(unsigned char *, unsigned char *, void *))off_1ECABECB8[v62])(v56, v47, v61);
    int v48 = v22;
    v56[0] = 0;
    int v57 = -1;
    ((void (*)(void *, unsigned char *, unsigned char *))off_1ECABEE88[v22])(v50, v56, v47);
    int v57 = v22;
  }
  WGSL::zeroValue((WGSL *)v58, v7);
  uint64_t v23 = WTF::fastMalloc((WTF *)0x38);
  int v24 = (unsigned int *)v23;
  *(_OWORD *)(v23 + 8) = 0u;
  *(_DWORD *)uint64_t v23 = 2;
  *(_OWORD *)(v23 + 24) = 0u;
  *(_OWORD *)(v23 + 40) = 0u;
  unsigned int v49 = (int *)v23;
  if (v57 == -1)
  {
    *(_DWORD *)(v23 + 24) = -1;
    v26 = (unsigned int *)(v23 + 32);
    int v27 = v59;
    if (v59 == -1)
    {
      unsigned int v25 = 0;
LABEL_43:
      ((void (*)(void *, unsigned int *))off_1ECABEC60[v25])(v50, v26);
      v24[12] = -1;
      goto LABEL_46;
    }
  }
  else
  {
    v50[0] = v23 + 8;
    ((void (*)(void *))off_1ECABEEE0[v57])(v50);
    if (*v24 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x182689BACLL);
    }
    unsigned int v25 = v24[12];
    v26 = v24 + 8;
    int v27 = v59;
    if (v25 == -1)
    {
      if (v59 == -1) {
        goto LABEL_46;
      }
    }
    else if (v59 == -1)
    {
      goto LABEL_43;
    }
  }
  v50[0] = v26;
  ((void (*)(void *))off_1ECABEEE0[v27])(v50);
LABEL_46:
  WGSL::constantLt(&v49, (uint64_t)&v52);
  uint64_t v29 = *v24;
  if (v29)
  {
    uint64_t v30 = 24 * v29;
    uint64_t v31 = v24 + 6;
    do
    {
      uint64_t v28 = v31 - 4;
      uint64_t v32 = *v31;
      if (v32 != -1) {
        ((void (*)(void *, _DWORD *))off_1ECABEC60[v32])(v50, v28);
      }
      *uint64_t v31 = -1;
      v31 += 6;
      v30 -= 24;
    }
    while (v30);
  }
  WTF::fastFree((WTF *)v24, v28);
  if (v59 != -1) {
    ((void (*)(void *, unsigned char *))off_1ECABEC60[v59])(v50, v58);
  }
  int v59 = -1;
  if (v57 != -1) {
    ((void (*)(void *, unsigned char *))off_1ECABEC60[v57])(v50, v56);
  }
  if (v55)
  {
    if (v55 != 1) {
      goto LABEL_92;
    }
    uint64_t v33 = v53[0];
    if (v53[0]) {
      *(_DWORD *)v53[0] += 2;
    }
    *(void *)(a3 + 8) = v33;
    int v34 = 1;
    *(_DWORD *)(a3 + 32) = 1;
    goto LABEL_81;
  }
  v56[0] = 0;
  int v57 = -1;
  int v35 = v54;
  if (v54 == -1) {
    goto LABEL_92;
  }
  uint64_t result = ((uint64_t (*)(void *, unsigned char *, void *))off_1ECABECB8[v54])(v50, v56, v53);
  int v57 = v35;
  if (v35 != 6) {
    goto LABEL_92;
  }
  if (v56[0])
  {
    *(unsigned char *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 24) = -1;
    uint64_t v37 = v4[6];
    if (v37 != -1)
    {
      uint64_t result = ((uint64_t (*)(void *))off_1ECABEE88[v37])(v50);
      *(_DWORD *)(a3 + 24) = v37;
    }
    *(_DWORD *)(a3 + 32) = 0;
    goto LABEL_78;
  }
  LOBYTE(v50[0]) = 0;
  int v51 = -1;
  uint64_t v38 = v4[6];
  if (v38 != -1)
  {
    ((void (*)(int **, void *, unsigned int *))off_1ECABEE88[v38])(&v49, v50, v4 + 2);
    int v51 = v38;
  }
  uint64_t v39 = WTF::fastMalloc((WTF *)0x20);
  unsigned int v40 = (WTF *)v39;
  *(void *)(v39 + 8) = 0;
  *(_DWORD *)uint64_t v39 = 1;
  *(void *)(v39 + 16) = 0;
  *(void *)(v39 + 24) = 0;
  uint64_t v46 = (int *)v39;
  if (v51 == -1)
  {
    *(_DWORD *)(v39 + 24) = -1;
    WGSL::constantMinus(a1, &v46, a3);
    uint64_t v42 = *(unsigned int *)v40;
    if (!v42) {
      goto LABEL_76;
    }
LABEL_72:
    uint64_t v43 = 24 * v42;
    uint64_t v44 = (_DWORD *)((char *)v40 + 24);
    do
    {
      unsigned int v41 = v44 - 4;
      uint64_t v45 = *v44;
      if (v45 != -1) {
        ((void (*)(int **, _DWORD *))off_1ECABEC60[v45])(&v49, v41);
      }
      *uint64_t v44 = -1;
      v44 += 6;
      v43 -= 24;
    }
    while (v43);
    goto LABEL_76;
  }
  unsigned int v49 = (int *)(v39 + 8);
  ((void (*)(int **))off_1ECABEEE0[v51])(&v49);
  WGSL::constantMinus(a1, &v46, a3);
  uint64_t v42 = *(unsigned int *)v40;
  if (v42) {
    goto LABEL_72;
  }
LABEL_76:
  uint64_t result = WTF::fastFree(v40, v41);
  if (v51 != -1) {
    uint64_t result = ((uint64_t (*)(int **, void *))off_1ECABEC60[v51])(&v49, v50);
  }
LABEL_78:
  if (v57 != -1) {
    uint64_t result = ((uint64_t (*)(void *, unsigned char *))off_1ECABEC60[v57])(v50, v56);
  }
  int v34 = v55;
  if (v55 != -1) {
LABEL_81:
  }
    uint64_t result = ((uint64_t (*)(unsigned char *, void *))off_1ECABED68[v34])(v56, v53);
  if (v48 != -1) {
    uint64_t result = ((uint64_t (*)(unsigned char *, unsigned char *))off_1ECABEC60[v48])(v56, v47);
  }
  int v21 = v63;
  if (v63 != -1) {
    return ((uint64_t (*)(unsigned char *, void *))off_1ECABED68[v21])(v56, v61);
  }
  return result;
}

uint64_t WGSL::constantFirstLeadingBit@<X0>(void *a1@<X1>, _DWORD *a2@<X8>)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18268A080);
  }
  LOBYTE(v50[0]) = 0;
  unsigned int v51 = -1;
  uint64_t v4 = v3[6];
  if (v4 == -1) {
    goto LABEL_68;
  }
  unsigned int v5 = off_1ECABEE88[v4];
  ((void (*)(unsigned int **, void *, _DWORD *))v5)(&v45, v50, v3 + 2);
  unsigned int v51 = v4;
  LOBYTE(v45) = 0;
  int v47 = -1;
  ((void (*)(unsigned int *, unsigned int **, void *))v5)(v42, &v45, v50);
  unsigned int v6 = 0;
  int v47 = v4;
  if (v4 == 8)
  {
    if (v45) {
      unsigned int v6 = *v45;
    }
    else {
      unsigned int v6 = 0;
    }
  }
  uint64_t result = ((uint64_t (*)(unsigned int *, unsigned int **))off_1ECABEC60[v4])(v42, &v45);
  if (!v6)
  {
    int v33 = v3[6];
    signed int v34 = v3[2];
    if (v33 == 4)
    {
      unsigned int v40 = 31 - __clz(v34);
      if (v34) {
        int v39 = v40;
      }
      else {
        int v39 = -1;
      }
      goto LABEL_61;
    }
    if (v33 == 3)
    {
      unsigned int v35 = v34 + 1;
      unsigned int v36 = __clz(~v34);
      unsigned int v37 = __clz(v34);
      if (v34 >= 0) {
        unsigned int v38 = v37;
      }
      else {
        unsigned int v38 = v36;
      }
      int v39 = 31 - v38;
      if (v35 < 2) {
        int v39 = -1;
      }
LABEL_61:
      a2[2] = v39;
      a2[6] = v33;
      a2[8] = 0;
      uint64_t v32 = v51;
      if (v51 != -1) {
        return ((uint64_t (*)(unsigned int **, void *))off_1ECABEC60[v32])(&v45, v50);
      }
      return result;
    }
LABEL_68:
    __break(0xC471u);
    JUMPOUT(0x18268A0E0);
  }
  unsigned int v41 = a2;
  uint64_t v8 = 24 * v6;
  uint64_t v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *uint64_t v9 = v6;
  uint64_t v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  unint64_t v12 = 0;
  v42[0] = 0;
  unsigned int v43 = 0;
  do
  {
    if (v51 == 8)
    {
      if (v12 >= *(unsigned int *)v50[0])
      {
        __break(0xC471u);
        JUMPOUT(0x18268A060);
      }
      uint64_t v11 = v50[0] + v10 * 4 - 16;
      uint64_t v13 = *(unsigned int *)(v50[0] + v10 * 4);
      uint64_t v14 = v43;
      if (v43 == -1)
      {
        if (v13 == -1) {
          goto LABEL_22;
        }
      }
      else if (v13 == -1)
      {
        goto LABEL_66;
      }
      uint64_t v45 = v42;
      ((void (*)(unsigned int **, unsigned int *, uint64_t))off_1ECABEEE0[v13])(&v45, v42, v11);
    }
    else
    {
      uint64_t v14 = v43;
      if (v43 == -1)
      {
        if (v51 == -1) {
          goto LABEL_67;
        }
      }
      else if (v51 == -1)
      {
LABEL_66:
        ((void (*)(unsigned int **, unsigned int *, uint64_t))off_1ECABEC60[v14])(&v45, v42, v11);
        unsigned int v43 = -1;
LABEL_67:
        __break(0xC471u);
        JUMPOUT(0x18268A0C0);
      }
      uint64_t v45 = v42;
      ((void (*)(unsigned int **, unsigned int *, void *))off_1ECABEEE0[v51])(&v45, v42, v50);
    }
LABEL_22:
    if (v43 == 3)
    {
      unsigned int v17 = __clz(~v42[0]);
      unsigned int v18 = __clz(v42[0]);
      if ((v42[0] & 0x80000000) == 0) {
        unsigned int v19 = v18;
      }
      else {
        unsigned int v19 = v17;
      }
      int v16 = 31 - v19;
      if (v42[0] + 1 < 2) {
        int v16 = -1;
      }
    }
    else
    {
      if (v43 != 4) {
        goto LABEL_67;
      }
      unsigned int v15 = 31 - __clz(v42[0]);
      if (v42[0]) {
        int v16 = v15;
      }
      else {
        int v16 = -1;
      }
    }
    int v46 = v16;
    unsigned int v48 = v43;
    int v49 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x18268A040);
    }
    uint64_t v44 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1ECABEF38[v43])(&v44);
    if (v49 != -1) {
      ((void (*)(uint64_t *, int *))off_1ECABED68[v49])(&v44, &v46);
    }
    ++v12;
    v10 += 6;
  }
  while (v6 != v12);
  uint64_t v20 = *v9;
  int v21 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v20 + 8));
  uint64_t v23 = v21;
  *int v21 = v20;
  if (v20)
  {
    int v24 = v21 + 6;
    uint64_t v25 = 24 * v20;
    v26 = v9 + 6;
    do
    {
      *((unsigned char *)v24 - 16) = 0;
      uint64_t v22 = v24 - 4;
      *int v24 = -1;
      uint64_t v27 = *v26;
      if (v27 != -1)
      {
        ((void (*)(unsigned int **, _DWORD *, unsigned int *))off_1ECABEE88[v27])(&v45, v22, v26 - 4);
        *int v24 = v27;
      }
      v24 += 6;
      v26 += 6;
      v25 -= 24;
    }
    while (v25);
  }
  *((void *)v41 + 1) = v23;
  v41[6] = 8;
  v41[8] = 0;
  if (v43 != -1) {
    ((void (*)(unsigned int **, unsigned int *))off_1ECABEC60[v43])(&v45, v42);
  }
  uint64_t v28 = *v9;
  if (v28)
  {
    uint64_t v29 = 24 * v28;
    uint64_t v30 = v9 + 6;
    do
    {
      uint64_t v22 = v30 - 4;
      uint64_t v31 = *v30;
      if (v31 != -1) {
        ((void (*)(unsigned int **, _DWORD *))off_1ECABEC60[v31])(&v45, v22);
      }
      *uint64_t v30 = -1;
      v30 += 6;
      v29 -= 24;
    }
    while (v29);
  }
  uint64_t result = WTF::fastFree((WTF *)v9, v22);
  uint64_t v32 = v51;
  if (v51 != -1) {
    return ((uint64_t (*)(unsigned int **, void *))off_1ECABEC60[v32])(&v45, v50);
  }
  return result;
}

uint64_t WGSL::constantFirstTrailingBit@<X0>(void *a1@<X1>, _DWORD *a2@<X8>)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18268A554);
  }
  LOBYTE(v42[0]) = 0;
  unsigned int v43 = -1;
  uint64_t v4 = v3[6];
  if (v4 == -1) {
    goto LABEL_54;
  }
  unsigned int v5 = off_1ECABEE88[v4];
  ((void (*)(unsigned int **, void *, _DWORD *))v5)(&v37, v42, v3 + 2);
  unsigned int v43 = v4;
  LOBYTE(v37) = 0;
  int v39 = -1;
  ((void (*)(unsigned int *, unsigned int **, void *))v5)(v34, &v37, v42);
  unsigned int v6 = 0;
  int v39 = v4;
  if (v4 == 8)
  {
    if (v37) {
      unsigned int v6 = *v37;
    }
    else {
      unsigned int v6 = 0;
    }
  }
  uint64_t result = ((uint64_t (*)(unsigned int *, unsigned int **))off_1ECABEC60[v4])(v34, &v37);
  if (!v6)
  {
    int v30 = v3[6];
    if ((v30 - 3) < 2)
    {
      unsigned int v31 = v3[2];
      unsigned int v32 = __clz(__rbit32(v31));
      if (v31) {
        int v33 = v32;
      }
      else {
        int v33 = -1;
      }
      a2[2] = v33;
      a2[6] = v30;
      a2[8] = 0;
      uint64_t v29 = v43;
      if (v43 != -1) {
        return ((uint64_t (*)(unsigned int **, void *))off_1ECABEC60[v29])(&v37, v42);
      }
      return result;
    }
LABEL_54:
    __break(0xC471u);
    JUMPOUT(0x18268A594);
  }
  uint64_t v8 = 24 * v6;
  uint64_t v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *uint64_t v9 = v6;
  uint64_t v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  unint64_t v12 = 0;
  v34[0] = 0;
  unsigned int v35 = 0;
  do
  {
    if (v43 == 8)
    {
      if (v12 >= *(unsigned int *)v42[0])
      {
        __break(0xC471u);
        JUMPOUT(0x18268A534);
      }
      uint64_t v11 = v42[0] + v10 * 4 - 16;
      uint64_t v13 = *(unsigned int *)(v42[0] + v10 * 4);
      uint64_t v14 = v35;
      if (v35 == -1)
      {
        if (v13 == -1) {
          goto LABEL_22;
        }
      }
      else if (v13 == -1)
      {
        goto LABEL_17;
      }
      unsigned int v37 = v34;
      ((void (*)(unsigned int **, unsigned int *, uint64_t))off_1ECABEEE0[v13])(&v37, v34, v11);
    }
    else
    {
      uint64_t v14 = v35;
      if (v35 == -1)
      {
        if (v43 == -1) {
          goto LABEL_22;
        }
      }
      else if (v43 == -1)
      {
LABEL_17:
        ((void (*)(unsigned int **, unsigned int *, uint64_t))off_1ECABEC60[v14])(&v37, v34, v11);
        unsigned int v35 = -1;
        goto LABEL_22;
      }
      unsigned int v37 = v34;
      ((void (*)(unsigned int **, unsigned int *, void *))off_1ECABEEE0[v43])(&v37, v34, v42);
    }
LABEL_22:
    if (v35 - 3 > 1)
    {
      __break(0xC471u);
      JUMPOUT(0x18268A574);
    }
    unsigned int v15 = __clz(__rbit32(v34[0]));
    if (v34[0]) {
      int v16 = v15;
    }
    else {
      int v16 = -1;
    }
    int v38 = v16;
    unsigned int v40 = v35;
    int v41 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x18268A514);
    }
    uint64_t v36 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1ECABEF38[v35])(&v36);
    if (v41 != -1) {
      ((void (*)(uint64_t *, int *))off_1ECABED68[v41])(&v36, &v38);
    }
    ++v12;
    v10 += 6;
  }
  while (v6 != v12);
  uint64_t v17 = *v9;
  unsigned int v18 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v17 + 8));
  uint64_t v20 = v18;
  *unsigned int v18 = v17;
  if (v17)
  {
    int v21 = v18 + 6;
    uint64_t v22 = 24 * v17;
    uint64_t v23 = v9 + 6;
    do
    {
      *((unsigned char *)v21 - 16) = 0;
      unsigned int v19 = v21 - 4;
      *int v21 = -1;
      uint64_t v24 = *v23;
      if (v24 != -1)
      {
        ((void (*)(unsigned int **, _DWORD *, unsigned int *))off_1ECABEE88[v24])(&v37, v19, v23 - 4);
        *int v21 = v24;
      }
      v21 += 6;
      v23 += 6;
      v22 -= 24;
    }
    while (v22);
  }
  *((void *)a2 + 1) = v20;
  a2[6] = 8;
  a2[8] = 0;
  if (v35 != -1) {
    ((void (*)(unsigned int **, unsigned int *))off_1ECABEC60[v35])(&v37, v34);
  }
  uint64_t v25 = *v9;
  if (v25)
  {
    uint64_t v26 = 24 * v25;
    uint64_t v27 = v9 + 6;
    do
    {
      unsigned int v19 = v27 - 4;
      uint64_t v28 = *v27;
      if (v28 != -1) {
        ((void (*)(unsigned int **, _DWORD *))off_1ECABEC60[v28])(&v37, v19);
      }
      *uint64_t v27 = -1;
      v27 += 6;
      v26 -= 24;
    }
    while (v26);
  }
  uint64_t result = WTF::fastFree((WTF *)v9, v19);
  uint64_t v29 = v43;
  if (v43 != -1) {
    return ((uint64_t (*)(unsigned int **, void *))off_1ECABEC60[v29])(&v37, v42);
  }
  return result;
}

__int16 WGSL::constantFloor@<H0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18268AA54);
  }
  LOBYTE(v40[0]) = 0;
  unsigned int v41 = -1;
  uint64_t v4 = v3[6];
  if (v4 == -1) {
    goto LABEL_60;
  }
  unsigned int v5 = (double *)(v3 + 2);
  unsigned int v6 = off_1ECABEE88[v4];
  ((void (*)(double **, void *, _DWORD *))v6)(&v35, v40, v3 + 2);
  unsigned int v41 = v4;
  LOBYTE(v35) = 0;
  int v37 = -1;
  ((void (*)(double *, double **, void *))v6)(v32, &v35, v40);
  unsigned int v7 = 0;
  int v37 = v4;
  if (v4 == 8)
  {
    if (v35) {
      unsigned int v7 = *(_DWORD *)v35;
    }
    else {
      unsigned int v7 = 0;
    }
  }
  ((void (*)(double *, double **))off_1ECABEC60[v4])(v32, &v35);
  if (!v7)
  {
    int v29 = v3[6];
    switch(v29)
    {
      case 2:
        double v27 = floor(*v5);
        *(double *)(a2 + 8) = v27;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v28 = v41;
        if (v41 != -1) {
          goto LABEL_44;
        }
        return LOWORD(v27);
      case 1:
        *(short float *)&double v27 = floorl(*(short float *)v5);
        *(_WORD *)(a2 + 8) = LOWORD(v27);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v28 = v41;
        if (v41 != -1) {
          goto LABEL_44;
        }
        return LOWORD(v27);
      case 0:
        *(float *)&double v27 = floorf(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(v27);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v28 = v41;
        if (v41 != -1) {
          goto LABEL_44;
        }
        return LOWORD(v27);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x18268AAB4);
  }
  uint64_t v31 = a2;
  uint64_t v8 = 24 * v7;
  uint64_t v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *uint64_t v9 = v7;
  uint64_t v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  unint64_t v12 = 0;
  LODWORD(v32[0]) = 0;
  unsigned int v33 = 0;
  do
  {
    if (v41 == 8)
    {
      if (v12 >= *(unsigned int *)v40[0])
      {
        __break(0xC471u);
        JUMPOUT(0x18268AA34);
      }
      uint64_t v11 = v40[0] + v10 * 4 - 16;
      uint64_t v13 = *(unsigned int *)(v40[0] + v10 * 4);
      uint64_t v14 = v33;
      if (v33 == -1)
      {
        if (v13 == -1) {
          goto LABEL_22;
        }
      }
      else if (v13 == -1)
      {
        goto LABEL_58;
      }
      unsigned int v35 = v32;
      ((void (*)(double **, double *, uint64_t))off_1ECABEEE0[v13])(&v35, v32, v11);
    }
    else
    {
      uint64_t v14 = v33;
      if (v33 == -1)
      {
        if (v41 == -1) {
          goto LABEL_59;
        }
      }
      else if (v41 == -1)
      {
LABEL_58:
        ((void (*)(double **, double *, uint64_t))off_1ECABEC60[v14])(&v35, v32, v11);
        unsigned int v33 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x18268AA94);
      }
      unsigned int v35 = v32;
      ((void (*)(double **, double *, void *))off_1ECABEEE0[v41])(&v35, v32, v40);
    }
LABEL_22:
    if (v33)
    {
      if (v33 == 1)
      {
        LOWORD(v36) = floorl(*(short float *)v32);
      }
      else
      {
        if (v33 != 2) {
          goto LABEL_59;
        }
        double v36 = floor(v32[0]);
      }
    }
    else
    {
      LODWORD(v36) = floorf(*(float *)v32);
    }
    unsigned int v38 = v33;
    int v39 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x18268AA14);
    }
    uint64_t v34 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1ECABEF38[v33])(&v34);
    if (v39 != -1) {
      ((void (*)(uint64_t *, double *))off_1ECABED68[v39])(&v34, &v36);
    }
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  uint64_t v15 = *v9;
  int v16 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v15 + 8));
  unsigned int v18 = v16;
  *int v16 = v15;
  if (v15)
  {
    unsigned int v19 = v16 + 6;
    uint64_t v20 = 24 * v15;
    int v21 = v9 + 6;
    do
    {
      *((unsigned char *)v19 - 16) = 0;
      uint64_t v17 = v19 - 4;
      *unsigned int v19 = -1;
      uint64_t v22 = *v21;
      if (v22 != -1)
      {
        ((void (*)(double **, _DWORD *, unsigned int *))off_1ECABEE88[v22])(&v35, v17, v21 - 4);
        *unsigned int v19 = v22;
      }
      v19 += 6;
      v21 += 6;
      v20 -= 24;
    }
    while (v20);
  }
  *(void *)(v31 + 8) = v18;
  *(_DWORD *)(v31 + 24) = 8;
  *(_DWORD *)(v31 + 32) = 0;
  if (v33 != -1) {
    ((void (*)(double **, double *))off_1ECABEC60[v33])(&v35, v32);
  }
  uint64_t v23 = *v9;
  if (v23)
  {
    uint64_t v24 = 24 * v23;
    uint64_t v25 = v9 + 6;
    do
    {
      uint64_t v17 = v25 - 4;
      uint64_t v26 = *v25;
      if (v26 != -1) {
        ((void (*)(double **, _DWORD *))off_1ECABEC60[v26])(&v35, v17);
      }
      _DWORD *v25 = -1;
      v25 += 6;
      v24 -= 24;
    }
    while (v24);
  }
  WTF::fastFree((WTF *)v9, v17);
  uint64_t v28 = v41;
  if (v41 != -1) {
LABEL_44:
  }
    ((void (*)(double **, void *))off_1ECABEC60[v28])(&v35, v40);
  return LOWORD(v27);
}

uint64_t WGSL::constantFma@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  unsigned int v5 = **a2;
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x18268B010);
  }
  v42[0] = 0;
  int v43 = -1;
  uint64_t v8 = v4[6];
  if (v8 != -1)
  {
    ((void (*)(uint64_t *, unsigned char *, unsigned int *))off_1ECABEE88[v8])(&v46, v42, v4 + 2);
    int v43 = v8;
    uint64_t v4 = *a2;
    unsigned int v5 = **a2;
  }
  if (v5 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x18268B030);
  }
  uint64_t v37 = a3;
  v44[0] = 0;
  int v45 = -1;
  uint64_t v9 = v4[12];
  if (v9 != -1)
  {
    ((void (*)(uint64_t *, unsigned char *, unsigned int *))off_1ECABEE88[v9])(&v46, v44, v4 + 8);
    int v45 = v9;
  }
  uint64_t v10 = WTF::fastMalloc((WTF *)0x38);
  uint64_t v11 = (unsigned int *)v10;
  *(_DWORD *)uint64_t v10 = 2;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  v39[0] = (int *)v10;
  if (v43 == -1)
  {
    *(_DWORD *)(v10 + 24) = -1;
    uint64_t v13 = (unsigned int *)(v10 + 32);
    int v14 = v45;
    if (v45 == -1)
    {
      unsigned int v12 = 0;
LABEL_14:
      ((void (*)(uint64_t *, unsigned int *))off_1ECABEC60[v12])(&v46, v13);
      v11[12] = -1;
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v46 = v10 + 8;
    ((void (*)(uint64_t *))off_1ECABEEE0[v43])(&v46);
    if (*v11 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x18268B050);
    }
    unsigned int v12 = v11[12];
    uint64_t v13 = v11 + 8;
    int v14 = v45;
    if (v12 == -1)
    {
      if (v45 == -1) {
        goto LABEL_17;
      }
    }
    else if (v45 == -1)
    {
      goto LABEL_14;
    }
  }
  uint64_t v46 = (uint64_t)v13;
  ((void (*)(uint64_t *))off_1ECABEEE0[v14])(&v46);
LABEL_17:
  WGSL::constantMultiply(a1, v39, (uint64_t)&v46);
  uint64_t v16 = *v11;
  if (v16)
  {
    uint64_t v17 = 24 * v16;
    unsigned int v18 = v11 + 6;
    do
    {
      uint64_t v15 = v18 - 4;
      uint64_t v19 = *v18;
      if (v19 != -1) {
        ((void (*)(uint64_t *, _DWORD *))off_1ECABEC60[v19])(&v41, v15);
      }
      *unsigned int v18 = -1;
      v18 += 6;
      v17 -= 24;
    }
    while (v17);
  }
  WTF::fastFree((WTF *)v11, v15);
  if (v45 != -1) {
    ((void (*)(uint64_t *, unsigned char *))off_1ECABEC60[v45])(&v41, v44);
  }
  int v45 = -1;
  if (v43 != -1) {
    ((void (*)(uint64_t *, unsigned char *))off_1ECABEC60[v43])(&v41, v42);
  }
  if (v49)
  {
    if (v49 != 1)
    {
      uint64_t v36 = std::__throw_bad_variant_access[abi:sn180100]();
      return WGSL::constantFract(v36);
    }
    uint64_t v20 = v47[0];
    if (v47[0]) {
      *(_DWORD *)v47[0] += 2;
    }
    *(void *)(v37 + 8) = v20;
    int v21 = 1;
    *(_DWORD *)(v37 + 32) = 1;
    return ((uint64_t (*)(unsigned char *, void *))off_1ECABED68[v21])(v42, v47);
  }
  LOBYTE(v39[0]) = 0;
  int v40 = -1;
  uint64_t v22 = v48;
  if (v48 != -1)
  {
    ((void (*)(unsigned char *, int **, void *))off_1ECABECB8[v48])(v42, v39, v47);
    int v40 = v22;
    v42[0] = 0;
    int v43 = -1;
    ((void (*)(uint64_t *, unsigned char *, int **))off_1ECABEE88[v22])(&v41, v42, v39);
    int v43 = v22;
    uint64_t v23 = *a2;
    if (**a2 > 2) {
      goto LABEL_33;
    }
LABEL_41:
    __break(0xC471u);
    JUMPOUT(0x18268AE8CLL);
  }
  v42[0] = 0;
  int v43 = -1;
  uint64_t v23 = *a2;
  if (**a2 <= 2) {
    goto LABEL_41;
  }
LABEL_33:
  v44[0] = 0;
  int v45 = -1;
  uint64_t v24 = v23[18];
  if (v24 != -1)
  {
    ((void (*)(uint64_t *, unsigned char *, unsigned int *))off_1ECABEE88[v24])(&v41, v44, v23 + 14);
    int v45 = v24;
  }
  uint64_t v25 = WTF::fastMalloc((WTF *)0x38);
  uint64_t v26 = (unsigned int *)v25;
  *(_OWORD *)(v25 + 8) = 0u;
  *(_DWORD *)uint64_t v25 = 2;
  *(_OWORD *)(v25 + 24) = 0u;
  *(_OWORD *)(v25 + 40) = 0u;
  unsigned int v38 = (unsigned int *)v25;
  if (v43 == -1)
  {
    *(_DWORD *)(v25 + 24) = -1;
    uint64_t v28 = (unsigned int *)(v25 + 32);
    int v29 = v45;
    if (v45 == -1)
    {
      unsigned int v27 = 0;
LABEL_44:
      ((void (*)(uint64_t *, unsigned int *))off_1ECABEC60[v27])(&v41, v28);
      v26[12] = -1;
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v41 = v25 + 8;
    ((void (*)(uint64_t *))off_1ECABEEE0[v43])(&v41);
    if (*v26 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x18268B070);
    }
    unsigned int v27 = v26[12];
    uint64_t v28 = v26 + 8;
    int v29 = v45;
    if (v27 == -1)
    {
      if (v45 == -1) {
        goto LABEL_47;
      }
    }
    else if (v45 == -1)
    {
      goto LABEL_44;
    }
  }
  uint64_t v41 = (uint64_t)v28;
  ((void (*)(uint64_t *))off_1ECABEEE0[v29])(&v41);
LABEL_47:
  WGSL::constantAdd(a1, &v38, v37);
  uint64_t v31 = *v26;
  if (v31)
  {
    uint64_t v32 = 24 * v31;
    unsigned int v33 = v26 + 6;
    do
    {
      int v30 = v33 - 4;
      uint64_t v34 = *v33;
      if (v34 != -1) {
        ((void (*)(uint64_t *, _DWORD *))off_1ECABEC60[v34])(&v41, v30);
      }
      _DWORD *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  uint64_t result = WTF::fastFree((WTF *)v26, v30);
  if (v45 != -1) {
    uint64_t result = ((uint64_t (*)(uint64_t *, unsigned char *))off_1ECABEC60[v45])(&v41, v44);
  }
  int v45 = -1;
  if (v43 != -1) {
    uint64_t result = ((uint64_t (*)(uint64_t *, unsigned char *))off_1ECABEC60[v43])(&v41, v42);
  }
  if (v40 != -1) {
    uint64_t result = ((uint64_t (*)(unsigned char *, int **))off_1ECABEC60[v40])(v42, v39);
  }
  int v21 = v49;
  if (v49 != -1) {
    return ((uint64_t (*)(unsigned char *, void *))off_1ECABED68[v21])(v42, v47);
  }
  return result;
}

uint64_t WGSL::constantFract@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (_DWORD *)*a2;
  if (!*(_DWORD *)*a2)
  {
    __break(0xC471u);
    JUMPOUT(0x18268B4C4);
  }
  unsigned int v6 = v4 + 2;
  v36[0] = 0;
  int v37 = -1;
  uint64_t v7 = v4[6];
  if (v7 != -1)
  {
    ((void (*)(uint64_t *, unsigned char *, _DWORD *))off_1ECABEE88[v7])(&v40, v36, v4 + 2);
    int v37 = v7;
  }
  uint64_t v8 = WTF::fastMalloc((WTF *)0x20);
  uint64_t v9 = (WTF *)v8;
  *(void *)(v8 + 8) = 0;
  *(_DWORD *)uint64_t v8 = 1;
  *(void *)(v8 + 16) = 0;
  *(void *)(v8 + 24) = 0;
  v33[0] = v8;
  if (v37 == -1)
  {
    *(_DWORD *)(v8 + 24) = -1;
  }
  else
  {
    uint64_t v40 = v8 + 8;
    ((void (*)(uint64_t *))off_1ECABEEE0[v37])(&v40);
  }
  v11.n128_u64[0] = WGSL::constantFloor(v33, (uint64_t)&v40);
  uint64_t v12 = *(unsigned int *)v9;
  if (v12)
  {
    uint64_t v13 = 24 * v12;
    int v14 = (_DWORD *)((char *)v9 + 24);
    do
    {
      uint64_t v10 = v14 - 4;
      uint64_t v15 = *v14;
      if (v15 != -1) {
        ((void (*)(uint64_t *, _DWORD *, __n128))off_1ECABEC60[v15])(&v35, v10, v11);
      }
      *int v14 = -1;
      v14 += 6;
      v13 -= 24;
    }
    while (v13);
  }
  WTF::fastFree(v9, v10);
  if (v37 != -1) {
    ((void (*)(uint64_t *, unsigned char *))off_1ECABEC60[v37])(&v35, v36);
  }
  if (v43)
  {
    if (v43 != 1)
    {
      uint64_t v31 = std::__throw_bad_variant_access[abi:sn180100]();
      return WGSL::constantFrexp(v31);
    }
    uint64_t v16 = v41[0];
    if (v41[0]) {
      *(_DWORD *)v41[0] += 2;
    }
    *(void *)(a3 + 8) = v16;
    int v17 = 1;
    *(_DWORD *)(a3 + 32) = 1;
    return ((uint64_t (*)(unsigned char *, void *))off_1ECABED68[v17])(v36, v41);
  }
  LOBYTE(v33[0]) = 0;
  int v34 = -1;
  int v18 = v42;
  if (v42 != -1)
  {
    ((void (*)(unsigned char *, void *, void *))off_1ECABECB8[v42])(v36, v33, v41);
    int v34 = v18;
  }
  v36[0] = 0;
  int v37 = -1;
  uint64_t v19 = v4[6];
  if (v19 != -1)
  {
    ((void (*)(uint64_t *, unsigned char *, _DWORD *))off_1ECABEE88[v19])(&v35, v36, v6);
    int v37 = v19;
    int v18 = v34;
  }
  v38[0] = 0;
  int v39 = -1;
  if (v18 != -1)
  {
    ((void (*)(uint64_t *, unsigned char *, void *))off_1ECABEE88[v18])(&v35, v38, v33);
    int v39 = v18;
  }
  uint64_t v20 = WTF::fastMalloc((WTF *)0x38);
  int v21 = (unsigned int *)v20;
  *(_OWORD *)(v20 + 8) = 0u;
  *(_DWORD *)uint64_t v20 = 2;
  *(_OWORD *)(v20 + 24) = 0u;
  *(_OWORD *)(v20 + 40) = 0u;
  uint64_t v32 = (int *)v20;
  if (v37 == -1)
  {
    *(_DWORD *)(v20 + 24) = -1;
    uint64_t v23 = (unsigned int *)(v20 + 32);
    int v24 = v39;
    if (v39 == -1)
    {
      unsigned int v22 = 0;
LABEL_32:
      ((void (*)(uint64_t *, unsigned int *))off_1ECABEC60[v22])(&v35, v23);
      v21[12] = -1;
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v35 = v20 + 8;
    ((void (*)(uint64_t *))off_1ECABEEE0[v37])(&v35);
    if (*v21 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x18268B4E4);
    }
    unsigned int v22 = v21[12];
    uint64_t v23 = v21 + 8;
    int v24 = v39;
    if (v22 == -1)
    {
      if (v39 == -1) {
        goto LABEL_35;
      }
    }
    else if (v39 == -1)
    {
      goto LABEL_32;
    }
  }
  uint64_t v35 = (uint64_t)v23;
  ((void (*)(uint64_t *))off_1ECABEEE0[v24])(&v35);
LABEL_35:
  WGSL::constantMinus(a1, &v32, a3);
  uint64_t v26 = *v21;
  if (v26)
  {
    uint64_t v27 = 24 * v26;
    uint64_t v28 = v21 + 6;
    do
    {
      uint64_t v25 = v28 - 4;
      uint64_t v29 = *v28;
      if (v29 != -1) {
        ((void (*)(uint64_t *, _DWORD *))off_1ECABEC60[v29])(&v35, v25);
      }
      *uint64_t v28 = -1;
      v28 += 6;
      v27 -= 24;
    }
    while (v27);
  }
  uint64_t result = WTF::fastFree((WTF *)v21, v25);
  if (v39 != -1) {
    uint64_t result = ((uint64_t (*)(uint64_t *, unsigned char *))off_1ECABEC60[v39])(&v35, v38);
  }
  int v39 = -1;
  if (v37 != -1) {
    uint64_t result = ((uint64_t (*)(uint64_t *, unsigned char *))off_1ECABEC60[v37])(&v35, v36);
  }
  if (v34 != -1) {
    uint64_t result = ((uint64_t (*)(unsigned char *, void *))off_1ECABEC60[v34])(v36, v33);
  }
  int v17 = v43;
  if (v43 != -1) {
    return ((uint64_t (*)(unsigned char *, void *))off_1ECABED68[v17])(v36, v41);
  }
  return result;
}

WTF::StringImpl *WGSL::constantFrexp@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18268BBF8);
  }
  uint64_t v4 = v3 + 2;
  uint64_t v5 = v3[6];
  if (v5 != 8)
  {
    LOBYTE(v61) = 0;
    int v63 = -1;
    if (v5 != -1)
    {
      ((void (*)(float *, long double *, void *))off_1ECABEE88[v5])(__e, &v61, v4);
      int v63 = v5;
      switch(v5)
      {
        case 2:
          LODWORD(__x[0]) = 0;
          *(void *)__e = frexp(v61, (int *)__x);
          int v55 = 2;
          v56[0] = SLODWORD(__x[0]);
          int v38 = 5;
LABEL_52:
          unsigned int v57 = v38;
          ((void (*)(uint64_t *, long double *))off_1ECABEC60[v5])(__x, &v61);
          goto LABEL_53;
        case 1:
          _H0 = LOWORD(v61);
          __asm { FCVT            S0, H0; float }
          _S0 = frexpf(_S0, &v53);
          int v27 = v53;
          __asm { FCVT            H0, S0 }
          LOWORD(__e[0]) = LOWORD(_S0);
          int v55 = 1;
          goto LABEL_51;
        case 0:
          float v26 = frexpf(*(float *)&v61, &v52);
          int v27 = v52;
          __e[0] = v26;
          int v55 = 0;
LABEL_51:
          LODWORD(v56[0]) = v27;
          int v38 = 3;
          goto LABEL_52;
      }
    }
    __break(0xC471u);
LABEL_82:
    JUMPOUT(0x18268BB98);
  }
  if (!*v4 || (uint64_t v6 = *(unsigned int *)*v4, !v6))
  {
    uint64_t v60 = 0;
    _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJN4WGSL13ConstantValueES4_EEC2B8sn180100IJLm0ELm1EEJS4_S4_EJEJEJRNS3_14ConstantVectorES8_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSA_IJDpT2_EEEDpOT3_((uint64_t)__e, 0, &v60);
    goto LABEL_53;
  }
  uint64_t v49 = a2;
  uint64_t v7 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v6 + 8));
  *uint64_t v7 = v6;
  bzero(v7 + 2, 24 * ((24 * v6 - 24) / 0x18uLL) + 24);
  uint64_t v8 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v6 + 8));
  *uint64_t v8 = v6;
  bzero(v8 + 2, 24 * ((24 * v6 - 24) / 0x18uLL) + 24);
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v60 = v8;
  do
  {
    if (v10 >= *(unsigned int *)*v4)
    {
      __break(0xC471u);
      goto LABEL_82;
    }
    uint64_t v11 = *v4 + v9 * 4;
    LOBYTE(__x[0]) = 0;
    int v59 = -1;
    uint64_t v12 = *(unsigned int *)(v11 + 24);
    if (v12 == -1) {
      goto LABEL_80;
    }
    ((void (*)(float *, uint64_t *, uint64_t))off_1ECABEE88[v12])(__e, __x, v11 + 8);
    int v59 = v12;
    if (v12 == 2)
    {
      __e[0] = 0.0;
      long double v61 = frexp(*(long double *)__x, (int *)__e);
      int v63 = 2;
      uint64_t v64 = SLODWORD(__e[0]);
      int v15 = 5;
    }
    else
    {
      if (v12 == 1)
      {
        _H0 = __x[0];
        __asm { FCVT            S0, H0; float }
        _S0 = frexpf(_S0, &v51);
        int v14 = v51;
        __asm { FCVT            H0, S0 }
        LOWORD(v61) = LOWORD(_S0);
        int v63 = 1;
      }
      else
      {
        if (v12)
        {
LABEL_80:
          __break(0xC471u);
          JUMPOUT(0x18268BC18);
        }
        float v13 = frexpf(*(float *)__x, &v50);
        int v14 = v50;
        *(float *)&long double v61 = v13;
        int v63 = 0;
      }
      LODWORD(v64) = v14;
      int v15 = 3;
    }
    v66[0] = v15;
    ((void (*)(float *, uint64_t *))off_1ECABEC60[v12])(__e, __x);
    int v59 = -1;
    if (v10 >= *v7)
    {
      __break(0xC471u);
      JUMPOUT(0x18268BBB8);
    }
    uint64_t v23 = v7[v9 + 6];
    if (v23 == -1)
    {
      if (v63 == -1) {
        goto LABEL_22;
      }
    }
    else if (v63 == -1)
    {
      ((void (*)(float *, unsigned int *))off_1ECABEC60[v23])(__e, &v7[v9 + 2]);
      v7[v9 + 6] = -1;
      goto LABEL_22;
    }
    *(void *)__e = &v7[v9 + 2];
    ((void (*)(float *))off_1ECABEEE0[v63])(__e);
LABEL_22:
    if (v10 >= *v8)
    {
      __break(0xC471u);
      JUMPOUT(0x18268BBD8);
    }
    uint64_t v24 = v8[v9 + 6];
    if (v24 == -1)
    {
      if (v66[0] == -1) {
        goto LABEL_30;
      }
LABEL_28:
      *(void *)__e = &v8[v9 + 2];
      ((void (*)(float *))off_1ECABEEE0[v66[0]])(__e);
      uint64_t v25 = v66[0];
      if (v66[0] == -1) {
        goto LABEL_30;
      }
LABEL_29:
      ((void (*)(float *, uint64_t *))off_1ECABEC60[v25])(__e, &v64);
      goto LABEL_30;
    }
    if (v66[0] != -1) {
      goto LABEL_28;
    }
    ((void (*)(float *, unsigned int *))off_1ECABEC60[v24])(__e, &v8[v9 + 2]);
    v8[v9 + 6] = -1;
    uint64_t v25 = v66[0];
    if (v66[0] != -1) {
      goto LABEL_29;
    }
LABEL_30:
    v66[0] = -1;
    if (v63 != -1) {
      ((void (*)(float *, long double *))off_1ECABEC60[v63])(__e, &v61);
    }
    ++v10;
    v9 += 6;
  }
  while (6 * v6 != v9);
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJN4WGSL13ConstantValueES4_EEC2B8sn180100IJLm0ELm1EEJS4_S4_EJEJEJRNS3_14ConstantVectorES8_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSA_IJDpT2_EEEDpOT3_((uint64_t)__e, v7, &v60);
  uint64_t v29 = *v8;
  a2 = v49;
  if (v29)
  {
    uint64_t v30 = 24 * v29;
    uint64_t v31 = v8 + 6;
    do
    {
      uint64_t v28 = v31 - 4;
      uint64_t v32 = *v31;
      if (v32 != -1) {
        ((void (*)(long double *, _DWORD *))off_1ECABEC60[v32])(&v61, v28);
      }
      *uint64_t v31 = -1;
      v31 += 6;
      v30 -= 24;
    }
    while (v30);
  }
  WTF::fastFree((WTF *)v8, v28);
  uint64_t v34 = *v7;
  if (v34)
  {
    uint64_t v35 = 24 * v34;
    uint64_t v36 = v7 + 6;
    do
    {
      unsigned int v33 = v36 - 4;
      uint64_t v37 = *v36;
      if (v37 != -1) {
        ((void (*)(long double *, _DWORD *))off_1ECABEC60[v37])(&v61, v33);
      }
      *uint64_t v36 = -1;
      v36 += 6;
      v35 -= 24;
    }
    while (v35);
  }
  WTF::fastFree((WTF *)v7, v33);
LABEL_53:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v62[0] = 0;
  LODWORD(v64) = -1;
  int v42 = v55;
  if (v55 != -1)
  {
    ((void (*)(uint64_t *, unsigned char *, float *))off_1ECABEE88[v55])(__x, v62, __e);
    LODWORD(v64) = v42;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v65 = __x[0];
  LOBYTE(v66[0]) = 0;
  int v67 = -1;
  unsigned int v43 = v57;
  if (v57 != -1)
  {
    ((void (*)(uint64_t *, _DWORD *, void *))off_1ECABEE88[v57])(__x, v66, v56);
    int v67 = v43;
  }
  WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::HashMap(__x, (WTF::StringImpl **)&v61, 2);
  uint64_t v44 = __x[0];
  __x[0] = 0;
  *(void *)(a2 + 8) = v44;
  *(_DWORD *)(a2 + 24) = 10;
  *(_DWORD *)(a2 + 32) = 0;
  if (v67 != -1) {
    ((void (*)(unsigned int **, _DWORD *))off_1ECABEC60[v67])(&v60, v66);
  }
  int v67 = -1;
  int v45 = (_DWORD *)v65;
  uint64_t v65 = 0;
  if (!v45)
  {
LABEL_62:
    uint64_t v46 = v64;
    if (v64 == -1) {
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  if (*v45 != 2)
  {
    *v45 -= 2;
    goto LABEL_62;
  }
  WTF::StringImpl::destroy();
  uint64_t v46 = v64;
  if (v64 != -1) {
LABEL_63:
  }
    ((void (*)(unsigned int **, unsigned char *))off_1ECABEC60[v46])(&v60, v62);
LABEL_64:
  LODWORD(v64) = -1;
  uint64_t result = *(WTF::StringImpl **)&v61;
  long double v61 = 0.0;
  if (!result) {
    goto LABEL_67;
  }
  if (*(_DWORD *)result == 2)
  {
    uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy();
    uint64_t v48 = v57;
    if (v57 != -1) {
      goto LABEL_68;
    }
  }
  else
  {
    *(_DWORD *)result -= 2;
LABEL_67:
    uint64_t v48 = v57;
    if (v57 != -1) {
LABEL_68:
    }
      uint64_t result = (WTF::StringImpl *)((uint64_t (*)(long double *, void *))off_1ECABEC60[v48])(&v61, v56);
  }
  unsigned int v57 = -1;
  if (v55 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(long double *, float *))off_1ECABEC60[v55])(&v61, __e);
  }
  return result;
}

uint64_t WGSL::constantInsertBits@<X0>(unsigned int **a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  v2 = *a1;
  unsigned int v3 = **a1;
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x18268C9A8);
  }
  if (v3 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x18268C9C8);
  }
  if (v3 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x18268C9E8);
  }
  if (v3 == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x18268CA08);
  }
  LOBYTE(v75[0]) = 0;
  unsigned int v76 = -1;
  uint64_t v4 = v2[6];
  if (v4 != -1)
  {
    ((void (*)(void *, void *, unsigned int *))off_1ECABEE88[v4])(v53, v75, v2 + 2);
    unsigned int v76 = v4;
  }
  LOBYTE(v77[0]) = 0;
  unsigned int v78 = -1;
  uint64_t v5 = v2[12];
  if (v5 != -1)
  {
    ((void (*)(void *, void *, unsigned int *))off_1ECABEE88[v5])(v53, v77, v2 + 8);
    unsigned int v78 = v5;
  }
  LOBYTE(v79[0]) = 0;
  unsigned int v80 = -1;
  uint64_t v6 = v2[18];
  if (v6 != -1)
  {
    ((void (*)(void *, void *, unsigned int *))off_1ECABEE88[v6])(v53, v79, v2 + 14);
    unsigned int v80 = v6;
  }
  LOBYTE(v81[0]) = 0;
  unsigned int v82 = -1;
  uint64_t v7 = v2[24];
  if (v7 != -1)
  {
    ((void (*)(void *, void *, unsigned int *))off_1ECABEE88[v7])(v53, v81, v2 + 20);
    unsigned int v82 = v7;
  }
  LOBYTE(v53[0]) = 0;
  unsigned int v54 = -1;
  uint64_t v8 = v76;
  uint64_t v9 = off_1ECABEC60;
  if (v76 != -1)
  {
    ((void (*)(_DWORD **, void *, void *))off_1ECABEE88[v76])(&v70, v53, v75);
    unsigned int v54 = v8;
    if (v8 == 8) {
      goto LABEL_24;
    }
    ((void (*)(_DWORD **, void *))off_1ECABEC60[v8])(&v70, v53);
  }
  LOBYTE(v53[0]) = 0;
  unsigned int v54 = -1;
  uint64_t v8 = v78;
  if (v78 != -1)
  {
    ((void (*)(_DWORD **, void *, void *))off_1ECABEE88[v78])(&v70, v53, v77);
    unsigned int v54 = v8;
    if (v8 == 8) {
      goto LABEL_24;
    }
    ((void (*)(_DWORD **, void *))off_1ECABEC60[v8])(&v70, v53);
  }
  LOBYTE(v53[0]) = 0;
  unsigned int v54 = -1;
  uint64_t v8 = v80;
  if (v80 != -1)
  {
    ((void (*)(_DWORD **, void *, void *))off_1ECABEE88[v80])(&v70, v53, v79);
    unsigned int v54 = v8;
    if (v8 == 8) {
      goto LABEL_24;
    }
    ((void (*)(_DWORD **, void *))off_1ECABEC60[v8])(&v70, v53);
  }
  LOBYTE(v53[0]) = 0;
  unsigned int v54 = -1;
  uint64_t v8 = v82;
  if (v82 == -1) {
    goto LABEL_116;
  }
  ((void (*)(_DWORD **, void *, void *))off_1ECABEE88[v82])(&v70, v53, v81);
  unsigned int v54 = v8;
  if (v8 != 8) {
    goto LABEL_115;
  }
LABEL_24:
  if (!v53[0])
  {
LABEL_115:
    ((void (*)(_DWORD **, void *))off_1ECABEC60[v8])(&v70, v53);
LABEL_116:
    LOBYTE(v70) = 0;
    int v72 = -1;
    uint64_t v35 = v2[6];
    if (v35 != -1)
    {
      ((void (*)(void *, _DWORD **, unsigned int *))off_1ECABEE88[v35])(v53, &v70, v2 + 2);
      int v72 = v35;
    }
    LOBYTE(v67[0]) = 0;
    unsigned int v68 = -1;
    uint64_t v36 = v2[12];
    if (v36 != -1)
    {
      ((void (*)(void *, void *, unsigned int *))off_1ECABEE88[v36])(v53, v67, v2 + 8);
      unsigned int v68 = v36;
    }
    LOBYTE(v65[0]) = 0;
    unsigned int v66 = -1;
    uint64_t v37 = v2[18];
    if (v37 != -1)
    {
      ((void (*)(void *, unsigned int *, unsigned int *))off_1ECABEE88[v37])(v53, v65, v2 + 14);
      unsigned int v66 = v37;
    }
    LOBYTE(v63[0]) = 0;
    unsigned int v64 = -1;
    uint64_t v38 = v2[24];
    if (v38 != -1)
    {
      ((void (*)(void *, unsigned int *, unsigned int *))off_1ECABEE88[v38])(v53, v63, v2 + 20);
      unsigned int v64 = v38;
      LODWORD(v37) = v66;
    }
    uint64_t result = WGSL::constantInsertBits(WGSL::Type const*,WTF::FixedVector<WGSL::ConstantValue> const&)::$_0::operator()<WGSL::ConstantValue,WGSL::ConstantValue,WGSL::ConstantValue,WGSL::ConstantValue>((uint64_t)v53, &v70, v67, v65[0], v37, v63[0], v38);
    *(unsigned char *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 24) = -1;
    unsigned int v40 = v54;
    if (v54 == -1)
    {
      *(_DWORD *)(a2 + 32) = 0;
      unsigned int v54 = -1;
      uint64_t v42 = v64;
      if (v64 != -1) {
LABEL_128:
      }
        uint64_t result = ((uint64_t (*)(unsigned int *, unsigned int *))off_1ECABEC60[v42])(v61, v63);
    }
    else
    {
      uint64_t result = ((uint64_t (*)(unsigned int *))off_1ECABECB8[v54])(v61);
      *(_DWORD *)(a2 + 24) = v40;
      uint64_t v41 = v54;
      *(_DWORD *)(a2 + 32) = 0;
      if (v41 != -1) {
        uint64_t result = ((uint64_t (*)(unsigned int *, void *))off_1ECABEC60[v41])(v61, v53);
      }
      unsigned int v54 = -1;
      uint64_t v42 = v64;
      if (v64 != -1) {
        goto LABEL_128;
      }
    }
    unsigned int v64 = -1;
    if (v66 != -1) {
      uint64_t result = ((uint64_t (*)(unsigned int *, unsigned int *))off_1ECABEC60[v66])(v61, v65);
    }
    unsigned int v66 = -1;
    if (v68 != -1) {
      uint64_t result = ((uint64_t (*)(unsigned int *, void *))off_1ECABEC60[v68])(v61, v67);
    }
    unsigned int v68 = -1;
    if (v72 != -1) {
      uint64_t result = ((uint64_t (*)(unsigned int *, _DWORD **))off_1ECABEC60[v72])(v61, &v70);
    }
    int v72 = -1;
    uint64_t v43 = v82;
    if (v82 != -1) {
      goto LABEL_152;
    }
    goto LABEL_153;
  }
  unsigned int v10 = *(_DWORD *)v53[0];
  ((void (*)(_DWORD **, void *))off_1ECABEC60[v8])(&v70, v53);
  if (!v10) {
    goto LABEL_116;
  }
  uint64_t v49 = 24 * v10;
  int v50 = (WTF *)WTF::fastMalloc((WTF *)(v49 + 8));
  *(_DWORD *)int v50 = v10;
  bzero((char *)v50 + 8, 24 * ((v49 - 24) / 0x18uLL) + 24);
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  LODWORD(v53[0]) = 0;
  unsigned int v54 = 0;
  v55[0] = 0;
  unsigned int v56 = 0;
  v57[0] = 0;
  unsigned int v58 = 0;
  v59[0] = 0;
  unsigned int v60 = 0;
  do
  {
    if (v76 == 8)
    {
      if (v12 >= *(unsigned int *)v75[0]) {
        goto LABEL_162;
      }
      uint64_t v13 = *(unsigned int *)(v75[0] + v11 + 24);
      if (v54 == -1)
      {
        if (v13 == -1) {
          goto LABEL_39;
        }
      }
      else if (v13 == -1)
      {
        goto LABEL_34;
      }
      v70 = v53;
      ((void (*)(_DWORD **, void *, uint64_t))off_1ECABEEE0[v13])(&v70, v53, v75[0] + v11 + 8);
    }
    else
    {
      if (v54 == -1)
      {
        if (v76 == -1) {
          goto LABEL_39;
        }
      }
      else if (v76 == -1)
      {
LABEL_34:
        ((void (*)(_DWORD **, void *))v9[v54])(&v70, v53);
        unsigned int v54 = -1;
        goto LABEL_39;
      }
      v70 = v53;
      ((void (*)(_DWORD **, void *, void *))off_1ECABEEE0[v76])(&v70, v53, v75);
    }
LABEL_39:
    if (v78 == 8)
    {
      if (v12 >= *(unsigned int *)v77[0]) {
        goto LABEL_162;
      }
      uint64_t v14 = *(unsigned int *)(v77[0] + v11 + 24);
      if (v56 == -1)
      {
        if (v14 == -1) {
          goto LABEL_51;
        }
      }
      else if (v14 == -1)
      {
        goto LABEL_46;
      }
      v70 = v55;
      ((void (*)(_DWORD **, _DWORD *, uint64_t))off_1ECABEEE0[v14])(&v70, v55, v77[0] + v11 + 8);
    }
    else
    {
      if (v56 == -1)
      {
        if (v78 == -1) {
          goto LABEL_51;
        }
      }
      else if (v78 == -1)
      {
LABEL_46:
        ((void (*)(_DWORD **, _DWORD *))v9[v56])(&v70, v55);
        unsigned int v56 = -1;
        goto LABEL_51;
      }
      v70 = v55;
      ((void (*)(_DWORD **, _DWORD *, void *))off_1ECABEEE0[v78])(&v70, v55, v77);
    }
LABEL_51:
    if (v80 == 8)
    {
      if (v12 >= *(unsigned int *)v79[0]) {
        goto LABEL_162;
      }
      uint64_t v15 = *(unsigned int *)(v79[0] + v11 + 24);
      if (v58 == -1)
      {
        if (v15 == -1) {
          goto LABEL_63;
        }
      }
      else if (v15 == -1)
      {
        goto LABEL_58;
      }
      v70 = v57;
      ((void (*)(_DWORD **, _DWORD *, uint64_t))off_1ECABEEE0[v15])(&v70, v57, v79[0] + v11 + 8);
    }
    else
    {
      if (v58 == -1)
      {
        if (v80 == -1) {
          goto LABEL_63;
        }
      }
      else if (v80 == -1)
      {
LABEL_58:
        ((void (*)(_DWORD **, _DWORD *))v9[v58])(&v70, v57);
        unsigned int v58 = -1;
        goto LABEL_63;
      }
      v70 = v57;
      ((void (*)(_DWORD **, _DWORD *, void *))off_1ECABEEE0[v80])(&v70, v57, v79);
    }
LABEL_63:
    if (v82 == 8)
    {
      if (v12 >= *(unsigned int *)v81[0])
      {
LABEL_162:
        __break(0xC471u);
        JUMPOUT(0x18268C968);
      }
      uint64_t v16 = *(unsigned int *)(v81[0] + v11 + 24);
      if (v60 == -1)
      {
        if (v16 == -1) {
          goto LABEL_75;
        }
      }
      else if (v16 == -1)
      {
        goto LABEL_70;
      }
      v70 = v59;
      ((void (*)(_DWORD **, _DWORD *, uint64_t))off_1ECABEEE0[v16])(&v70, v59, v81[0] + v11 + 8);
    }
    else
    {
      if (v60 == -1)
      {
        if (v82 == -1) {
          goto LABEL_75;
        }
      }
      else if (v82 == -1)
      {
LABEL_70:
        ((void (*)(_DWORD **, _DWORD *))v9[v60])(&v70, v59);
        unsigned int v60 = -1;
        goto LABEL_75;
      }
      v70 = v59;
      ((void (*)(_DWORD **, _DWORD *, void *))off_1ECABEEE0[v82])(&v70, v59, v81);
    }
LABEL_75:
    LOBYTE(v67[0]) = 0;
    unsigned int v68 = -1;
    unsigned int v17 = v54;
    if (v54 != -1)
    {
      ((void (*)(unsigned int *, void *, void *))off_1ECABEE88[v54])(v65, v67, v53);
      unsigned int v68 = v17;
    }
    int v18 = v9;
    LOBYTE(v65[0]) = 0;
    unsigned int v66 = -1;
    unsigned int v19 = v56;
    if (v56 != -1)
    {
      ((void (*)(unsigned int *, unsigned int *, _DWORD *))off_1ECABEE88[v56])(v63, v65, v55);
      unsigned int v66 = v19;
    }
    LOBYTE(v63[0]) = 0;
    unsigned int v64 = -1;
    int v20 = v58;
    if (v58 != -1)
    {
      ((void (*)(unsigned int *, unsigned int *, _DWORD *))off_1ECABEE88[v58])(v61, v63, v57);
      unsigned int v64 = v20;
    }
    LOBYTE(v61[0]) = 0;
    unsigned int v62 = -1;
    int v21 = v60;
    if (v60 != -1)
    {
      ((void (*)(char *, unsigned int *, _DWORD *))off_1ECABEE88[v60])(&v69, v61, v59);
      unsigned int v62 = v21;
      int v20 = v64;
    }
    WGSL::constantInsertBits(WGSL::Type const*,WTF::FixedVector<WGSL::ConstantValue> const&)::$_0::operator()<WGSL::ConstantValue,WGSL::ConstantValue,WGSL::ConstantValue,WGSL::ConstantValue>((uint64_t)v51, v67, v65, v63[0], v20, v61[0], v21);
    uint64_t v9 = v18;
    if (v62 != -1) {
      ((void (*)(char *, unsigned int *))v18[v62])(&v69, v61);
    }
    unsigned int v62 = -1;
    if (v64 != -1) {
      ((void (*)(char *, unsigned int *))v18[v64])(&v69, v63);
    }
    unsigned int v64 = -1;
    if (v66 != -1) {
      ((void (*)(char *, unsigned int *))v18[v66])(&v69, v65);
    }
    unsigned int v66 = -1;
    if (v68 != -1) {
      ((void (*)(char *, void *))v18[v68])(&v69, v67);
    }
    LOBYTE(v71) = 0;
    int v73 = -1;
    int v22 = v52;
    if (v52 == -1)
    {
      unsigned int v74 = 0;
LABEL_100:
      if (v12 >= *(unsigned int *)v50)
      {
        __break(0xC471u);
        JUMPOUT(0x18268C988);
      }
      uint64_t v23 = (_DWORD *)((char *)v50 + v11 + 8);
      uint64_t v27 = *(unsigned int *)((char *)v50 + v11 + 24);
      if (v27 == -1)
      {
        if (v73 == -1) {
          goto LABEL_106;
        }
      }
      else if (v73 == -1)
      {
        ((void (*)(void *, _DWORD *))v18[v27])(v67, v23);
        *(_DWORD *)((char *)v50 + v11 + 24) = -1;
        goto LABEL_106;
      }
      v67[0] = (char *)v50 + v11 + 8;
      ((void (*)(void *))off_1ECABEF38[v73])(v67);
LABEL_106:
      char v25 = 1;
      uint64_t v26 = v74;
      if (v74 == -1) {
        goto LABEL_108;
      }
LABEL_107:
      ((void (*)(void *, _DWORD **))off_1ECABED68[v26])(v67, &v71);
      goto LABEL_108;
    }
    ((void (*)(void *, _DWORD **, unsigned char *))off_1ECABECB8[v52])(v67, &v71, v51);
    int v73 = v22;
    unsigned int v74 = 0;
    if (v52 == -1) {
      goto LABEL_100;
    }
    ((void (*)(void *, unsigned char *))v18[v52])(v67, v51);
    if (!v74) {
      goto LABEL_100;
    }
    if (v74 != 1) {
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    uint64_t v24 = v71;
    if (v71) {
      *v71 += 2;
    }
    char v25 = 0;
    *(void *)(a2 + 8) = v24;
    *(_DWORD *)(a2 + 32) = 1;
    uint64_t v26 = v74;
    if (v74 != -1) {
      goto LABEL_107;
    }
LABEL_108:
    if ((v25 & 1) == 0) {
      goto LABEL_138;
    }
    ++v12;
    v11 += 24;
  }
  while (v49 != v11);
  uint64_t v28 = *(unsigned int *)v50;
  uint64_t v29 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v28 + 8));
  uint64_t v30 = v29;
  *uint64_t v29 = v28;
  if (v28)
  {
    uint64_t v31 = v29 + 6;
    uint64_t v32 = 24 * v28;
    unsigned int v33 = (unsigned int *)((char *)v50 + 24);
    do
    {
      *((unsigned char *)v31 - 16) = 0;
      uint64_t v23 = v31 - 4;
      *uint64_t v31 = -1;
      uint64_t v34 = *v33;
      if (v34 != -1)
      {
        ((void (*)(_DWORD **, _DWORD *, unsigned int *))off_1ECABEE88[v34])(&v70, v23, v33 - 4);
        *uint64_t v31 = v34;
      }
      v31 += 6;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  *(void *)(a2 + 8) = v30;
  *(_DWORD *)(a2 + 24) = 8;
  *(_DWORD *)(a2 + 32) = 0;
  uint64_t v9 = v18;
LABEL_138:
  if (v60 != -1) {
    ((void (*)(_DWORD **, _DWORD *))v9[v60])(&v70, v59);
  }
  unsigned int v60 = -1;
  if (v58 != -1) {
    ((void (*)(_DWORD **, _DWORD *))v9[v58])(&v70, v57);
  }
  unsigned int v58 = -1;
  if (v56 != -1) {
    ((void (*)(_DWORD **, _DWORD *))v9[v56])(&v70, v55);
  }
  unsigned int v56 = -1;
  if (v54 != -1) {
    ((void (*)(_DWORD **, void *))v9[v54])(&v70, v53);
  }
  uint64_t v44 = *(unsigned int *)v50;
  if (v44)
  {
    uint64_t v45 = 24 * v44;
    uint64_t v46 = (_DWORD *)((char *)v50 + 24);
    do
    {
      uint64_t v23 = v46 - 4;
      uint64_t v47 = *v46;
      if (v47 != -1) {
        ((void (*)(void *, _DWORD *))v9[v47])(v53, v23);
      }
      *uint64_t v46 = -1;
      v46 += 6;
      v45 -= 24;
    }
    while (v45);
  }
  uint64_t result = WTF::fastFree(v50, v23);
  uint64_t v43 = v82;
  if (v82 != -1) {
LABEL_152:
  }
    uint64_t result = ((uint64_t (*)(void *, void *))v9[v43])(v53, v81);
LABEL_153:
  unsigned int v82 = -1;
  if (v80 != -1) {
    uint64_t result = ((uint64_t (*)(void *, void *))v9[v80])(v53, v79);
  }
  unsigned int v80 = -1;
  if (v78 != -1) {
    uint64_t result = ((uint64_t (*)(void *, void *))v9[v78])(v53, v77);
  }
  unsigned int v78 = -1;
  if (v76 != -1) {
    return ((uint64_t (*)(void *, void *))v9[v76])(v53, v75);
  }
  return result;
}

uint64_t WGSL::constantInverseSqrt@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18268CF18);
  }
  LOBYTE(v49[0]) = 0;
  unsigned int v50 = -1;
  uint64_t v4 = v3[6];
  if (v4 == -1) {
    goto LABEL_60;
  }
  uint64_t v5 = (double *)(v3 + 2);
  uint64_t v6 = off_1ECABEE88[v4];
  ((void (*)(double **, void *, _DWORD *))v6)(&v44, v49, v3 + 2);
  unsigned int v50 = v4;
  LOBYTE(v44) = 0;
  int v46 = -1;
  ((void (*)(double *, double **, void *))v6)(v41, &v44, v49);
  unsigned int v7 = 0;
  int v46 = v4;
  if (v4 == 8)
  {
    if (v44) {
      unsigned int v7 = *(_DWORD *)v44;
    }
    else {
      unsigned int v7 = 0;
    }
  }
  uint64_t result = ((uint64_t (*)(double *, double **))off_1ECABEC60[v4])(v41, &v44);
  if (!v7)
  {
    int v36 = v3[6];
    switch(v36)
    {
      case 2:
        *(double *)(a2 + 8) = 1.0 / sqrt(*v5);
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v35 = v50;
        if (v50 != -1) {
          return ((uint64_t (*)(double **, void *))off_1ECABEC60[v35])(&v44, v49);
        }
        return result;
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0 }
        _D0 = 1.0 / sqrtf(_S0);
        __asm { FCVT            H0, D0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v35 = v50;
        if (v50 != -1) {
          return ((uint64_t (*)(double **, void *))off_1ECABEC60[v35])(&v44, v49);
        }
        return result;
      case 0:
        *(float *)(a2 + 8) = 1.0 / sqrtf(*(float *)v5);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v35 = v50;
        if (v50 != -1) {
          return ((uint64_t (*)(void, void))off_1ECABEC60[v35])(&v44, v49);
        }
        return result;
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x18268CF78);
  }
  uint64_t v40 = a2;
  uint64_t v9 = 24 * v7;
  unsigned int v10 = (unsigned int *)WTF::fastMalloc((WTF *)(v9 + 8));
  *unsigned int v10 = v7;
  uint64_t v11 = 6;
  bzero(v10 + 2, 24 * ((v9 - 24) / 0x18uLL) + 24);
  unint64_t v13 = 0;
  LODWORD(v41[0]) = 0;
  unsigned int v42 = 0;
  do
  {
    if (v50 == 8)
    {
      if (v13 >= *(unsigned int *)v49[0])
      {
        __break(0xC471u);
        JUMPOUT(0x18268CEF8);
      }
      uint64_t v12 = v49[0] + v11 * 4 - 16;
      uint64_t v14 = *(unsigned int *)(v49[0] + v11 * 4);
      uint64_t v15 = v42;
      if (v42 == -1)
      {
        if (v14 == -1) {
          goto LABEL_22;
        }
      }
      else if (v14 == -1)
      {
        goto LABEL_58;
      }
      uint64_t v44 = v41;
      ((void (*)(double **, double *, uint64_t))off_1ECABEEE0[v14])(&v44, v41, v12);
    }
    else
    {
      uint64_t v15 = v42;
      if (v42 == -1)
      {
        if (v50 == -1) {
          goto LABEL_59;
        }
      }
      else if (v50 == -1)
      {
LABEL_58:
        ((void (*)(double **, double *, uint64_t))off_1ECABEC60[v15])(&v44, v41, v12);
        unsigned int v42 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x18268CF58);
      }
      uint64_t v44 = v41;
      ((void (*)(double **, double *, void *))off_1ECABEEE0[v50])(&v44, v41, v49);
    }
LABEL_22:
    if (v42)
    {
      if (v42 == 1)
      {
        _H0 = LOWORD(v41[0]);
        __asm { FCVT            S0, H0 }
        _D0 = 1.0 / sqrtf(_S0);
        __asm { FCVT            H0, D0 }
        LOWORD(v45) = LOWORD(_D0);
      }
      else
      {
        if (v42 != 2) {
          goto LABEL_59;
        }
        double v45 = 1.0 / sqrt(v41[0]);
      }
    }
    else
    {
      *(float *)&double v45 = 1.0 / sqrtf(*(float *)v41);
    }
    unsigned int v47 = v42;
    int v48 = 0;
    if (v13 >= *v10)
    {
      __break(0xC471u);
      JUMPOUT(0x18268CED8);
    }
    uint64_t v43 = (uint64_t)&v10[v11 - 4];
    ((void (*)(uint64_t *))off_1ECABEF38[v42])(&v43);
    if (v48 != -1) {
      ((void (*)(uint64_t *, double *))off_1ECABED68[v48])(&v43, &v45);
    }
    ++v13;
    v11 += 6;
  }
  while (v7 != v13);
  uint64_t v23 = *v10;
  uint64_t v24 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v23 + 8));
  uint64_t v26 = v24;
  *uint64_t v24 = v23;
  if (v23)
  {
    uint64_t v27 = v24 + 6;
    uint64_t v28 = 24 * v23;
    uint64_t v29 = v10 + 6;
    do
    {
      *((unsigned char *)v27 - 16) = 0;
      char v25 = v27 - 4;
      *uint64_t v27 = -1;
      uint64_t v30 = *v29;
      if (v30 != -1)
      {
        ((void (*)(double **, _DWORD *, unsigned int *))off_1ECABEE88[v30])(&v44, v25, v29 - 4);
        *uint64_t v27 = v30;
      }
      v27 += 6;
      v29 += 6;
      v28 -= 24;
    }
    while (v28);
  }
  *(void *)(v40 + 8) = v26;
  *(_DWORD *)(v40 + 24) = 8;
  *(_DWORD *)(v40 + 32) = 0;
  if (v42 != -1) {
    ((void (*)(double **, double *))off_1ECABEC60[v42])(&v44, v41);
  }
  uint64_t v31 = *v10;
  if (v31)
  {
    uint64_t v32 = 24 * v31;
    unsigned int v33 = v10 + 6;
    do
    {
      char v25 = v33 - 4;
      uint64_t v34 = *v33;
      if (v34 != -1) {
        ((void (*)(double **, _DWORD *))off_1ECABEC60[v34])(&v44, v25);
      }
      _DWORD *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  uint64_t result = WTF::fastFree((WTF *)v10, v25);
  uint64_t v35 = v50;
  if (v50 != -1) {
    return ((uint64_t (*)(void, void))off_1ECABEC60[v35])(&v44, v49);
  }
  return result;
}

void WGSL::constantLdexp(int **a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *a1;
  int v4 = **a1;
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x18268D998);
  }
  if (v4 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x18268D9B8);
  }
  uint64_t v5 = (long double *)(v3 + 2);
  LOBYTE(v64[0]) = 0;
  int v65 = -1;
  uint64_t v6 = v3[6];
  if (v6 != -1)
  {
    ((void (*)(long double *, void *, int *))off_1ECABEE88[v6])(__x, v64, v3 + 2);
    int v65 = v6;
  }
  unsigned int v7 = (uint64_t *)(v3 + 8);
  LOBYTE(v66[0]) = 0;
  int v67 = -1;
  uint64_t v8 = v3[12];
  if (v8 != -1)
  {
    ((void (*)(long double *, void *, int *))off_1ECABEE88[v8])(__x, v66, v3 + 8);
    int v67 = v8;
    LODWORD(v6) = v65;
  }
  LOBYTE(__x[0]) = 0;
  unsigned int v56 = -1;
  if (v6 != -1)
  {
    uint64_t v9 = v6;
    ((void (*)(int **, long double *, void *))off_1ECABEE88[v6])(&v60, __x, v64);
    unsigned int v56 = v6;
    if (v6 == 8)
    {
      if (!*(void *)&__x[0])
      {
        ((void (*)(int **, long double *))off_1ECABEC60[v6])(&v60, __x);
        goto LABEL_17;
      }
      unsigned int v10 = **(_DWORD **)&__x[0];
      ((void (*)(int **, long double *))off_1ECABEC60[v9])(&v60, __x);
      if (!v10)
      {
LABEL_17:
        int v11 = v3[6];
        int v12 = v3[12];
        if (v11 == 2)
        {
          if (v12 == 5)
          {
            uint64_t v13 = *v7;
            if (*v7 <= -1023)
            {
              *(void *)(a2 + 8) = 0;
LABEL_99:
              int v50 = 2;
LABEL_117:
              *(_DWORD *)(a2 + 24) = v50;
              goto LABEL_118;
            }
            if (v13 < 1025)
            {
              *(long double *)(a2 + 8) = ldexp(*v5, v13);
              goto LABEL_99;
            }
            WTF::tryFastCompactMalloc((WTF *)0x39);
            long double v47 = __x[0];
            if (!*(void *)&__x[0])
            {
              __break(0xC471u);
              JUMPOUT(0x18268DA10);
            }
            **(void **)&__x[0] = 0x2500000002;
            qmemcpy((void *)(*(void *)&v47 + 20), "e2 must be less than or equal to 1024", 37);
            *(void *)(*(void *)&v47 + 8) = *(void *)&v47 + 20;
            *(_DWORD *)(*(void *)&v47 + 16) = 4;
LABEL_106:
            *(long double *)(a2 + 8) = v47;
            *(_DWORD *)(a2 + 32) = 1;
            goto LABEL_119;
          }
        }
        else if (v12 == 3)
        {
          int v46 = *(_DWORD *)v7;
          if (v11 == 1)
          {
            if (v46 > -15)
            {
              if (v46 >= 17)
              {
                WTF::tryFastCompactMalloc((WTF *)0x37);
                long double v47 = __x[0];
                if (!*(void *)&__x[0])
                {
LABEL_136:
                  __break(0xC471u);
                  JUMPOUT(0x18268D958);
                }
                **(void **)&__x[0] = 0x2300000002;
                qmemcpy((void *)(*(void *)&v47 + 20), "e2 must be less than or equal to 16", 35);
                *(void *)(*(void *)&v47 + 8) = *(void *)&v47 + 20;
                *(_DWORD *)(*(void *)&v47 + 16) = 4;
                goto LABEL_106;
              }
              _H0 = *(_WORD *)v5;
              __asm { FCVT            S0, H0; float }
              _S0 = ldexpf(_S0, v46);
              __asm { FCVT            H0, S0 }
            }
            else
            {
              _H0 = 0;
            }
            *(_WORD *)(a2 + 8) = _H0;
            int v50 = 1;
            goto LABEL_117;
          }
          if (v11)
          {
            __break(0xC471u);
            JUMPOUT(0x18268DA00);
          }
          if (v46 > -127)
          {
            if (v46 >= 129)
            {
              WTF::tryFastCompactMalloc((WTF *)0x38);
              long double v47 = __x[0];
              if (!*(void *)&__x[0])
              {
                __break(0xC471u);
                JUMPOUT(0x18268DA28);
              }
              **(void **)&__x[0] = 0x2400000002;
              qmemcpy((void *)(*(void *)&v47 + 20), "e2 must be less than or equal to 128", 36);
              *(void *)(*(void *)&v47 + 8) = *(void *)&v47 + 20;
              *(_DWORD *)(*(void *)&v47 + 16) = 4;
              goto LABEL_106;
            }
            *(float *)(a2 + 8) = ldexpf(*(float *)v5, v46);
          }
          else
          {
            *(_DWORD *)(a2 + 8) = 0;
          }
          *(_DWORD *)(a2 + 24) = 0;
LABEL_118:
          *(_DWORD *)(a2 + 32) = 0;
          goto LABEL_119;
        }
LABEL_128:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_129:
        __break(0xC471u);
        JUMPOUT(0x18268D9DCLL);
      }
      goto LABEL_22;
    }
    ((void (*)(int **, long double *))off_1ECABEC60[v6])(&v60, __x);
    LODWORD(v8) = v67;
  }
  LOBYTE(__x[0]) = 0;
  unsigned int v56 = -1;
  if (v8 == -1) {
    goto LABEL_17;
  }
  ((void (*)(int **, long double *, void *))off_1ECABEE88[v8])(&v60, __x, v66);
  unsigned int v56 = v8;
  if (v8 != 8 || !*(void *)&__x[0])
  {
    ((void (*)(int **, long double *))off_1ECABEC60[v8])(&v60, __x);
    goto LABEL_17;
  }
  unsigned int v10 = **(_DWORD **)&__x[0];
  ((void (*)(int **, long double *))off_1ECABECA0[0])(&v60, __x);
  if (!v10) {
    goto LABEL_17;
  }
LABEL_22:
  uint64_t v54 = a2;
  uint64_t v14 = 24 * v10;
  uint64_t v15 = (unsigned int *)WTF::fastMalloc((WTF *)(v14 + 8));
  unsigned int *v15 = v10;
  uint64_t v16 = 24;
  bzero(v15 + 2, 24 * ((v14 - 24) / 0x18uLL) + 24);
  unint64_t v18 = 0;
  LODWORD(__x[0]) = 0;
  unsigned int v56 = 0;
  __e[0] = 0;
  unsigned int v58 = 0;
  while (1)
  {
    if (v65 == 8)
    {
      if (v18 >= *(unsigned int *)v64[0]) {
        goto LABEL_136;
      }
      uint64_t v17 = v64[0] + v16 - 16;
      uint64_t v19 = *(unsigned int *)(v64[0] + v16);
      uint64_t v20 = v56;
      if (v56 == -1)
      {
        if (v19 == -1) {
          goto LABEL_36;
        }
      }
      else if (v19 == -1)
      {
        goto LABEL_31;
      }
      unsigned int v60 = (int *)__x;
      ((void (*)(int **, long double *, uint64_t))off_1ECABEEE0[v19])(&v60, __x, v17);
    }
    else
    {
      uint64_t v20 = v56;
      if (v56 == -1)
      {
        if (v65 == -1) {
          goto LABEL_36;
        }
      }
      else if (v65 == -1)
      {
LABEL_31:
        ((void (*)(int **, long double *, uint64_t))off_1ECABEC60[v20])(&v60, __x, v17);
        unsigned int v56 = -1;
        goto LABEL_36;
      }
      unsigned int v60 = (int *)__x;
      ((void (*)(int **, long double *, void *))off_1ECABEEE0[v65])(&v60, __x, v64);
    }
LABEL_36:
    if (v67 == 8)
    {
      if (v18 >= *(unsigned int *)v66[0]) {
        goto LABEL_136;
      }
      uint64_t v17 = v66[0] + v16 - 16;
      uint64_t v21 = *(unsigned int *)(v66[0] + v16);
      uint64_t v22 = v58;
      if (v58 == -1)
      {
        if (v21 == -1) {
          goto LABEL_48;
        }
      }
      else if (v21 == -1)
      {
        goto LABEL_43;
      }
      unsigned int v60 = __e;
      ((void (*)(int **, int *, uint64_t))off_1ECABEEE0[v21])(&v60, __e, v17);
    }
    else
    {
      uint64_t v22 = v58;
      if (v58 == -1)
      {
        if (v67 == -1) {
          goto LABEL_48;
        }
      }
      else if (v67 == -1)
      {
LABEL_43:
        ((void (*)(int **, int *, uint64_t))off_1ECABEC60[v22])(&v60, __e, v17);
        unsigned int v58 = -1;
        goto LABEL_48;
      }
      unsigned int v60 = __e;
      ((void (*)(int **, int *, void *))off_1ECABEEE0[v67])(&v60, __e, v66);
    }
LABEL_48:
    if (v56 != 2) {
      break;
    }
    if (v58 != 5) {
      goto LABEL_128;
    }
    if (*(uint64_t *)__e > -1023)
    {
      if (*(uint64_t *)__e >= 1025)
      {
        WTF::tryFastCompactMalloc((WTF *)0x39);
        uint64_t v49 = v59;
        if (!v59)
        {
          __break(0xC471u);
          JUMPOUT(0x18268DA08);
        }
        *(void *)int v59 = 0x2500000002;
        qmemcpy(v49 + 5, "e2 must be less than or equal to 1024", 37);
        *((void *)v49 + 1) = v49 + 5;
        v49[4] = 4;
        goto LABEL_111;
      }
      v61[0] = ldexp(__x[0], __e[0]);
      uint64_t v24 = 2;
      goto LABEL_66;
    }
    v61[0] = 0.0;
    int v23 = 2;
    uint64_t v24 = 2;
LABEL_67:
    int v62 = v23;
    int v63 = 0;
    if (v18 >= *v15)
    {
      __break(0xC471u);
      JUMPOUT(0x18268D978);
    }
    int v59 = &v15[(unint64_t)v16 / 4 - 4];
    ((void (*)(unsigned int **))off_1ECABEF38[v24])(&v59);
    if (v63 != -1) {
      ((void (*)(unsigned int **, long double *))off_1ECABED68[v63])(&v59, v61);
    }
    ++v18;
    v16 += 24;
    if (v10 == v18)
    {
      uint64_t v33 = *v15;
      uint64_t v34 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v33 + 8));
      int v36 = v34;
      *uint64_t v34 = v33;
      if (v33)
      {
        uint64_t v37 = v34 + 6;
        uint64_t v38 = 24 * v33;
        int v39 = v15 + 6;
        do
        {
          *((unsigned char *)v37 - 16) = 0;
          uint64_t v35 = v37 - 4;
          *uint64_t v37 = -1;
          uint64_t v40 = *v39;
          if (v40 != -1)
          {
            ((void (*)(int **, _DWORD *, unsigned int *))off_1ECABEE88[v40])(&v60, v35, v39 - 4);
            *uint64_t v37 = v40;
          }
          v37 += 6;
          v39 += 6;
          v38 -= 24;
        }
        while (v38);
      }
      *(void *)(v54 + 8) = v36;
      *(_DWORD *)(v54 + 24) = 8;
      *(_DWORD *)(v54 + 32) = 0;
      uint64_t v41 = v58;
      if (v58 != -1) {
        goto LABEL_76;
      }
      goto LABEL_77;
    }
  }
  if (v58 != 3) {
    goto LABEL_128;
  }
  if (v56 != 1)
  {
    if (v56) {
      goto LABEL_129;
    }
    if (__e[0] > -127)
    {
      if (__e[0] >= 129)
      {
        WTF::tryFastCompactMalloc((WTF *)0x38);
        uint64_t v49 = v59;
        if (!v59)
        {
          __break(0xC471u);
          JUMPOUT(0x18268DA18);
        }
        *(void *)int v59 = 0x2400000002;
        qmemcpy(v49 + 5, "e2 must be less than or equal to 128", 36);
        *((void *)v49 + 1) = v49 + 5;
        v49[4] = 4;
        goto LABEL_111;
      }
      float v25 = ldexpf(*(float *)__x, __e[0]);
      int v23 = 0;
      uint64_t v24 = 0;
      *(float *)long double v61 = v25;
    }
    else
    {
      int v23 = 0;
      uint64_t v24 = 0;
      LODWORD(v61[0]) = 0;
    }
    goto LABEL_67;
  }
  if (__e[0] <= -15)
  {
    LOWORD(v61[0]) = 0;
    goto LABEL_65;
  }
  if (__e[0] < 17)
  {
    _H0 = LOWORD(__x[0]);
    __asm { FCVT            S0, H0; float }
    _S0 = ldexpf(_S0, __e[0]);
    __asm { FCVT            H0, S0 }
    LOWORD(v61[0]) = LOWORD(_S0);
LABEL_65:
    uint64_t v24 = 1;
LABEL_66:
    int v23 = v24;
    goto LABEL_67;
  }
  WTF::tryFastCompactMalloc((WTF *)0x37);
  uint64_t v49 = v59;
  if (!v59)
  {
    __break(0xC471u);
    JUMPOUT(0x18268DA20);
  }
  *(void *)int v59 = 0x2300000002;
  qmemcpy(v49 + 5, "e2 must be less than or equal to 16", 35);
  *((void *)v49 + 1) = v49 + 5;
  v49[4] = 4;
LABEL_111:
  *(void *)(v54 + 8) = v49;
  *(_DWORD *)(v54 + 32) = 1;
  *uint64_t v49 = 2;
  uint64_t v41 = v58;
  if (v58 != -1) {
LABEL_76:
  }
    ((void (*)(int **, int *))off_1ECABEC60[v41])(&v60, __e);
LABEL_77:
  unsigned int v58 = -1;
  if (v56 != -1) {
    ((void (*)(int **, long double *))off_1ECABEC60[v56])(&v60, __x);
  }
  uint64_t v42 = *v15;
  if (v42)
  {
    uint64_t v43 = 24 * v42;
    uint64_t v44 = v15 + 6;
    do
    {
      uint64_t v35 = v44 - 4;
      uint64_t v45 = *v44;
      if (v45 != -1) {
        ((void (*)(long double *, _DWORD *))off_1ECABEC60[v45])(__x, v35);
      }
      *uint64_t v44 = -1;
      v44 += 6;
      v43 -= 24;
    }
    while (v43);
  }
  WTF::fastFree((WTF *)v15, v35);
LABEL_119:
  if (v67 != -1) {
    ((void (*)(long double *, void *))off_1ECABEC60[v67])(__x, v66);
  }
  int v67 = -1;
  if (v65 != -1) {
    ((void (*)(long double *, void *))off_1ECABEC60[v65])(__x, v64);
  }
}

uint64_t WGSL::constantLength@<X0>(const WGSL::Type *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  int v4 = (_DWORD *)*a2;
  if (!*(_DWORD *)*a2)
  {
    __break(0xC471u);
    JUMPOUT(0x18268E264);
  }
  if (v4[6] != 8)
  {
    return WGSL::constantAbs(a2, a3);
  }
  WGSL::zeroValue((WGSL *)v50, a1);
  if (v4[6] != 8) {
LABEL_105:
  }
    std::__throw_bad_variant_access[abi:sn180100]();
  uint64_t v6 = (unsigned int *)*((void *)v4 + 1);
  if (v6) {
    unsigned int v7 = v6 + 2;
  }
  else {
    unsigned int v7 = 0;
  }
  if (!v6)
  {
    uint64_t v8 = 0;
    if (!v7) {
      goto LABEL_87;
    }
    while (1)
    {
LABEL_14:
      LOBYTE(v57[0]) = 0;
      int v58 = -1;
      uint64_t v10 = v7[4];
      if (v10 != -1)
      {
        ((void (*)(uint64_t *, void *, unsigned int *))off_1ECABEE88[v10])(&v53, v57, v7);
        int v58 = v10;
      }
      v59[0] = 0;
      unsigned int v60 = -1;
      uint64_t v11 = v7[4];
      if (v11 != -1)
      {
        ((void (*)(uint64_t *, unsigned char *, unsigned int *))off_1ECABEE88[v11])(&v53, v59, v7);
        unsigned int v60 = v11;
      }
      uint64_t v12 = WTF::fastMalloc((WTF *)0x38);
      uint64_t v13 = (unsigned int *)v12;
      *(_OWORD *)(v12 + 8) = 0u;
      *(_DWORD *)uint64_t v12 = 2;
      *(_OWORD *)(v12 + 24) = 0u;
      *(_OWORD *)(v12 + 40) = 0u;
      v48[0] = (int *)v12;
      if (v58 == -1)
      {
        *(_DWORD *)(v12 + 24) = -1;
        uint64_t v15 = (unsigned int *)(v12 + 32);
        uint64_t v16 = v60;
        if (v60 == -1)
        {
          uint64_t v14 = 0;
LABEL_26:
          ((void (*)(uint64_t *, unsigned int *))off_1ECABEC60[v14])(&v53, v15);
          v13[12] = -1;
LABEL_27:
          WGSL::constantMultiply((uint64_t)a1, v48, (uint64_t)&v61);
          uint64_t v18 = *v13;
          if (!v18) {
            goto LABEL_34;
          }
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v53 = v12 + 8;
        ((void (*)(uint64_t *))off_1ECABEEE0[v58])(&v53);
        if (*v13 < 2)
        {
          __break(0xC471u);
          JUMPOUT(0x18268E224);
        }
        uint64_t v14 = v13[12];
        uint64_t v15 = v13 + 8;
        uint64_t v16 = v60;
        if (v14 == -1)
        {
          if (v60 == 0xFFFFFFFFLL) {
            goto LABEL_27;
          }
        }
        else if (v60 == 0xFFFFFFFFLL)
        {
          goto LABEL_26;
        }
      }
      uint64_t v53 = (uint64_t)v15;
      ((void (*)(uint64_t *))off_1ECABEEE0[v16])(&v53);
      WGSL::constantMultiply((uint64_t)a1, v48, (uint64_t)&v61);
      uint64_t v18 = *v13;
      if (!v18) {
        goto LABEL_34;
      }
LABEL_30:
      uint64_t v19 = 24 * v18;
      uint64_t v20 = v13 + 6;
      do
      {
        uint64_t v17 = v20 - 4;
        uint64_t v21 = *v20;
        if (v21 != -1) {
          ((void (*)(uint64_t *, _DWORD *))off_1ECABEC60[v21])(&v53, v17);
        }
        _DWORD *v20 = -1;
        v20 += 6;
        v19 -= 24;
      }
      while (v19);
LABEL_34:
      WTF::fastFree((WTF *)v13, v17);
      if (v60 != -1) {
        ((void (*)(uint64_t *, unsigned char *))off_1ECABEC60[v60])(&v53, v59);
      }
      unsigned int v60 = -1;
      if (v58 != -1) {
        ((void (*)(uint64_t *, void *))off_1ECABEC60[v58])(&v53, v57);
      }
      if (!v64)
      {
        LOBYTE(v48[0]) = 0;
        unsigned int v49 = -1;
        uint64_t v25 = v63;
        if (v63 != -1)
        {
          ((void (*)(void *, int **, void *))off_1ECABECB8[v63])(v57, v48, v62);
          unsigned int v49 = v25;
        }
        LOBYTE(v57[0]) = 0;
        int v58 = -1;
        int v26 = v51;
        if (v51 != -1)
        {
          ((void (*)(uint64_t *, void *, unsigned char *))off_1ECABEE88[v51])(&v52, v57, v50);
          int v58 = v26;
          uint64_t v25 = v49;
        }
        v59[0] = 0;
        unsigned int v60 = -1;
        if (v25 != 0xFFFFFFFFLL)
        {
          ((void (*)(uint64_t *, unsigned char *, int **))off_1ECABEE88[v25])(&v52, v59, v48);
          unsigned int v60 = v25;
        }
        uint64_t v27 = WTF::fastMalloc((WTF *)0x38);
        uint64_t v28 = (unsigned int *)v27;
        *(_OWORD *)(v27 + 8) = 0u;
        *(_DWORD *)uint64_t v27 = 2;
        *(_OWORD *)(v27 + 24) = 0u;
        *(_OWORD *)(v27 + 40) = 0u;
        long double v47 = (unsigned int *)v27;
        if (v58 == -1)
        {
          *(_DWORD *)(v27 + 24) = -1;
          uint64_t v30 = (unsigned int *)(v27 + 32);
          uint64_t v31 = v60;
          if (v60 != -1) {
            goto LABEL_60;
          }
          uint64_t v29 = 0;
        }
        else
        {
          uint64_t v52 = v27 + 8;
          ((void (*)(uint64_t *))off_1ECABEEE0[v58])(&v52);
          if (*v28 < 2)
          {
            __break(0xC471u);
            JUMPOUT(0x18268E244);
          }
          uint64_t v29 = v28[12];
          uint64_t v30 = v28 + 8;
          uint64_t v31 = v60;
          if (v29 == -1)
          {
            if (v60 != 0xFFFFFFFFLL)
            {
LABEL_60:
              uint64_t v52 = (uint64_t)v30;
              ((void (*)(uint64_t *))off_1ECABEEE0[v31])(&v52);
              WGSL::constantAdd((uint64_t)a1, &v47, (uint64_t)&v53);
              uint64_t v33 = *v28;
              if (v33) {
                goto LABEL_61;
              }
              goto LABEL_65;
            }
LABEL_58:
            WGSL::constantAdd((uint64_t)a1, &v47, (uint64_t)&v53);
            uint64_t v33 = *v28;
            if (v33)
            {
LABEL_61:
              uint64_t v34 = 24 * v33;
              uint64_t v35 = v28 + 6;
              do
              {
                uint64_t v32 = v35 - 4;
                uint64_t v36 = *v35;
                if (v36 != -1) {
                  ((void (*)(uint64_t *, _DWORD *))off_1ECABEC60[v36])(&v52, v32);
                }
                _DWORD *v35 = -1;
                v35 += 6;
                v34 -= 24;
              }
              while (v34);
            }
LABEL_65:
            uint64_t result = WTF::fastFree((WTF *)v28, v32);
            if (v60 != -1) {
              uint64_t result = ((uint64_t (*)(uint64_t *, unsigned char *))off_1ECABEC60[v60])(&v52, v59);
            }
            unsigned int v60 = -1;
            if (v58 != -1) {
              uint64_t result = ((uint64_t (*)(uint64_t *, void *))off_1ECABEC60[v58])(&v52, v57);
            }
            int v23 = v56;
            if (v56)
            {
              if (v56 != 1) {
                goto LABEL_105;
              }
              uint64_t v37 = v54[0];
              if (v54[0]) {
                *(_DWORD *)v54[0] += 2;
              }
              *(void *)(a3 + 8) = v37;
              *(_DWORD *)(a3 + 32) = 1;
            }
            else
            {
              if (v51 == -1)
              {
                if (v55 == -1) {
                  goto LABEL_79;
                }
              }
              else if (v55 == -1)
              {
                uint64_t result = ((uint64_t (*)(void *, unsigned char *))off_1ECABEC60[v51])(v57, v50);
                int v51 = -1;
                goto LABEL_79;
              }
              v57[0] = v50;
              uint64_t result = ((uint64_t (*)(void *, unsigned char *, void *))off_1ECABEF38[v55])(v57, v50, v54);
            }
LABEL_79:
            if (v56 != -1) {
              uint64_t result = ((uint64_t (*)(void *, void *))off_1ECABED68[v56])(v57, v54);
            }
            if (v49 != -1) {
              uint64_t result = ((uint64_t (*)(void *, int **))off_1ECABEC60[v49])(v57, v48);
            }
            uint64_t v24 = v64;
            if (v64 == -1) {
              goto LABEL_85;
            }
            goto LABEL_84;
          }
          if (v60 != 0xFFFFFFFFLL) {
            goto LABEL_60;
          }
        }
        ((void (*)(uint64_t *, unsigned int *))off_1ECABEC60[v29])(&v52, v30);
        v28[12] = -1;
        goto LABEL_58;
      }
      if (v64 != 1) {
        goto LABEL_105;
      }
      uint64_t v22 = v62[0];
      if (v62[0]) {
        *(_DWORD *)v62[0] += 2;
      }
      *(void *)(a3 + 8) = v22;
      int v23 = 1;
      *(_DWORD *)(a3 + 32) = 1;
      uint64_t v24 = 1;
LABEL_84:
      uint64_t result = ((uint64_t (*)(void *, void *))off_1ECABED68[v24])(v57, v62);
LABEL_85:
      if (v23) {
        goto LABEL_99;
      }
      v7 += 6;
      if (v7 == (unsigned int *)v8) {
        goto LABEL_87;
      }
    }
  }
  uint64_t v8 = (uint64_t)&v6[6 * *v6 + 2];
  if (v7 != (unsigned int *)v8) {
    goto LABEL_14;
  }
LABEL_87:
  LOBYTE(v57[0]) = 0;
  int v58 = -1;
  int v38 = v51;
  if (v51 != -1)
  {
    ((void (*)(uint64_t *, void *, unsigned char *))off_1ECABEE88[v51])(&v61, v57, v50);
    int v58 = v38;
  }
  uint64_t v39 = WTF::fastMalloc((WTF *)0x20);
  uint64_t v40 = (WTF *)v39;
  *(void *)(v39 + 8) = 0;
  *(_DWORD *)uint64_t v39 = 1;
  *(void *)(v39 + 16) = 0;
  *(void *)(v39 + 24) = 0;
  uint64_t v53 = v39;
  if (v58 == -1)
  {
    *(_DWORD *)(v39 + 24) = -1;
    v42.n128_u64[0] = WGSL::constantSqrt(&v53, a3);
    uint64_t v43 = *(unsigned int *)v40;
    if (!v43) {
      goto LABEL_97;
    }
  }
  else
  {
    uint64_t v61 = v39 + 8;
    ((void (*)(uint64_t *))off_1ECABEEE0[v58])(&v61);
    v42.n128_u64[0] = WGSL::constantSqrt(&v53, a3);
    uint64_t v43 = *(unsigned int *)v40;
    if (!v43) {
      goto LABEL_97;
    }
  }
  uint64_t v44 = 24 * v43;
  uint64_t v45 = (_DWORD *)((char *)v40 + 24);
  do
  {
    uint64_t v41 = v45 - 4;
    uint64_t v46 = *v45;
    if (v46 != -1) {
      ((void (*)(uint64_t *, _DWORD *, __n128))off_1ECABEC60[v46])(&v61, v41, v42);
    }
    _DWORD *v45 = -1;
    v45 += 6;
    v44 -= 24;
  }
  while (v44);
LABEL_97:
  uint64_t result = WTF::fastFree(v40, v41);
  if (v58 != -1) {
    uint64_t result = ((uint64_t (*)(uint64_t *, void *))off_1ECABEC60[v58])(&v61, v57);
  }
LABEL_99:
  if (v51 != -1) {
    return ((uint64_t (*)(void *, unsigned char *))off_1ECABEC60[v51])(v57, v50);
  }
  return result;
}

__int16 WGSL::constantLog@<H0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18268E748);
  }
  LOBYTE(v50[0]) = 0;
  unsigned int v51 = -1;
  uint64_t v4 = v3[6];
  if (v4 == -1) {
    goto LABEL_60;
  }
  uint64_t v5 = (long double *)(v3 + 2);
  uint64_t v6 = off_1ECABEE88[v4];
  ((void (*)(long double **, void *, _DWORD *))v6)(&v45, v50, v3 + 2);
  unsigned int v51 = v4;
  LOBYTE(v45) = 0;
  int v47 = -1;
  ((void (*)(long double *, long double **, void *))v6)(__x, &v45, v50);
  unsigned int v7 = 0;
  int v47 = v4;
  if (v4 == 8)
  {
    if (v45) {
      unsigned int v7 = *(_DWORD *)v45;
    }
    else {
      unsigned int v7 = 0;
    }
  }
  ((void (*)(long double *, long double **))off_1ECABEC60[v4])(__x, &v45);
  if (!v7)
  {
    int v37 = v3[6];
    switch(v37)
    {
      case 2:
        _D0 = log(*v5);
        *(long double *)(a2 + 8) = _D0;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v36 = v51;
        if (v51 != -1) {
          goto LABEL_44;
        }
        return LOWORD(_D0);
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0; float }
        *(float *)&_D0 = logf(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v36 = v51;
        if (v51 != -1) {
          goto LABEL_44;
        }
        return LOWORD(_D0);
      case 0:
        *(float *)&_D0 = logf(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(_D0);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v36 = v51;
        if (v51 != -1) {
          goto LABEL_44;
        }
        return LOWORD(_D0);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x18268E7A8);
  }
  uint64_t v41 = a2;
  uint64_t v8 = 24 * v7;
  uint64_t v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *uint64_t v9 = v7;
  uint64_t v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  unint64_t v12 = 0;
  LODWORD(__x[0]) = 0;
  unsigned int v43 = 0;
  do
  {
    if (v51 == 8)
    {
      if (v12 >= *(unsigned int *)v50[0])
      {
        __break(0xC471u);
        JUMPOUT(0x18268E728);
      }
      uint64_t v11 = v50[0] + v10 * 4 - 16;
      uint64_t v13 = *(unsigned int *)(v50[0] + v10 * 4);
      uint64_t v14 = v43;
      if (v43 == -1)
      {
        if (v13 == -1) {
          goto LABEL_22;
        }
      }
      else if (v13 == -1)
      {
        goto LABEL_58;
      }
      uint64_t v45 = __x;
      ((void (*)(long double **, long double *, uint64_t))off_1ECABEEE0[v13])(&v45, __x, v11);
    }
    else
    {
      uint64_t v14 = v43;
      if (v43 == -1)
      {
        if (v51 == -1) {
          goto LABEL_59;
        }
      }
      else if (v51 == -1)
      {
LABEL_58:
        ((void (*)(long double **, long double *, uint64_t))off_1ECABEC60[v14])(&v45, __x, v11);
        unsigned int v43 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x18268E788);
      }
      uint64_t v45 = __x;
      ((void (*)(long double **, long double *, void *))off_1ECABEEE0[v51])(&v45, __x, v50);
    }
LABEL_22:
    uint64_t v15 = v43;
    if (v43)
    {
      if (v43 == 1)
      {
        _H0 = LOWORD(__x[0]);
        __asm { FCVT            S0, H0; float }
        _S0 = logf(_S0);
        __asm { FCVT            H0, S0 }
        LOWORD(v46) = LOWORD(_S0);
      }
      else
      {
        if (v43 != 2) {
          goto LABEL_59;
        }
        long double v46 = log(__x[0]);
      }
    }
    else
    {
      LODWORD(v46) = logf(*(float *)__x);
    }
    int v48 = v15;
    int v49 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x18268E708);
    }
    uint64_t v44 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1ECABEF38[v15])(&v44);
    if (v49 != -1) {
      ((void (*)(uint64_t *, long double *))off_1ECABED68[v49])(&v44, &v46);
    }
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  uint64_t v23 = *v9;
  uint64_t v24 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v23 + 8));
  int v26 = v24;
  *uint64_t v24 = v23;
  if (v23)
  {
    uint64_t v27 = v24 + 6;
    uint64_t v28 = 24 * v23;
    uint64_t v29 = v9 + 6;
    do
    {
      *((unsigned char *)v27 - 16) = 0;
      uint64_t v25 = v27 - 4;
      *uint64_t v27 = -1;
      uint64_t v30 = *v29;
      if (v30 != -1)
      {
        ((void (*)(long double **, _DWORD *, unsigned int *))off_1ECABEE88[v30])(&v45, v25, v29 - 4);
        *uint64_t v27 = v30;
      }
      v27 += 6;
      v29 += 6;
      v28 -= 24;
    }
    while (v28);
  }
  *(void *)(v41 + 8) = v26;
  *(_DWORD *)(v41 + 24) = 8;
  *(_DWORD *)(v41 + 32) = 0;
  if (v43 != -1) {
    ((void (*)(long double **, long double *))off_1ECABEC60[v43])(&v45, __x);
  }
  uint64_t v31 = *v9;
  if (v31)
  {
    uint64_t v32 = 24 * v31;
    uint64_t v33 = v9 + 6;
    do
    {
      uint64_t v25 = v33 - 4;
      uint64_t v34 = *v33;
      if (v34 != -1) {
        ((void (*)(long double **, _DWORD *))off_1ECABEC60[v34])(&v45, v25);
      }
      _DWORD *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  WTF::fastFree((WTF *)v9, v25);
  uint64_t v36 = v51;
  if (v51 != -1) {
LABEL_44:
  }
    ((void (*)(long double **, void *))off_1ECABEC60[v36])(&v45, v50);
  return LOWORD(_D0);
}

__int16 WGSL::constantLog2@<H0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18268EC88);
  }
  LOBYTE(v50[0]) = 0;
  unsigned int v51 = -1;
  uint64_t v4 = v3[6];
  if (v4 == -1) {
    goto LABEL_60;
  }
  uint64_t v5 = (long double *)(v3 + 2);
  uint64_t v6 = off_1ECABEE88[v4];
  ((void (*)(long double **, void *, _DWORD *))v6)(&v45, v50, v3 + 2);
  unsigned int v51 = v4;
  LOBYTE(v45) = 0;
  int v47 = -1;
  ((void (*)(long double *, long double **, void *))v6)(__x, &v45, v50);
  unsigned int v7 = 0;
  int v47 = v4;
  if (v4 == 8)
  {
    if (v45) {
      unsigned int v7 = *(_DWORD *)v45;
    }
    else {
      unsigned int v7 = 0;
    }
  }
  ((void (*)(long double *, long double **))off_1ECABEC60[v4])(__x, &v45);
  if (!v7)
  {
    int v37 = v3[6];
    switch(v37)
    {
      case 2:
        _D0 = log2(*v5);
        *(long double *)(a2 + 8) = _D0;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v36 = v51;
        if (v51 != -1) {
          goto LABEL_44;
        }
        return LOWORD(_D0);
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0; float }
        *(float *)&_D0 = log2f(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v36 = v51;
        if (v51 != -1) {
          goto LABEL_44;
        }
        return LOWORD(_D0);
      case 0:
        *(float *)&_D0 = log2f(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(_D0);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v36 = v51;
        if (v51 != -1) {
          goto LABEL_44;
        }
        return LOWORD(_D0);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x18268ECE8);
  }
  uint64_t v41 = a2;
  uint64_t v8 = 24 * v7;
  uint64_t v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *uint64_t v9 = v7;
  uint64_t v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  unint64_t v12 = 0;
  LODWORD(__x[0]) = 0;
  unsigned int v43 = 0;
  do
  {
    if (v51 == 8)
    {
      if (v12 >= *(unsigned int *)v50[0])
      {
        __break(0xC471u);
        JUMPOUT(0x18268EC68);
      }
      uint64_t v11 = v50[0] + v10 * 4 - 16;
      uint64_t v13 = *(unsigned int *)(v50[0] + v10 * 4);
      uint64_t v14 = v43;
      if (v43 == -1)
      {
        if (v13 == -1) {
          goto LABEL_22;
        }
      }
      else if (v13 == -1)
      {
        goto LABEL_58;
      }
      uint64_t v45 = __x;
      ((void (*)(long double **, long double *, uint64_t))off_1ECABEEE0[v13])(&v45, __x, v11);
    }
    else
    {
      uint64_t v14 = v43;
      if (v43 == -1)
      {
        if (v51 == -1) {
          goto LABEL_59;
        }
      }
      else if (v51 == -1)
      {
LABEL_58:
        ((void (*)(long double **, long double *, uint64_t))off_1ECABEC60[v14])(&v45, __x, v11);
        unsigned int v43 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x18268ECC8);
      }
      uint64_t v45 = __x;
      ((void (*)(long double **, long double *, void *))off_1ECABEEE0[v51])(&v45, __x, v50);
    }
LABEL_22:
    uint64_t v15 = v43;
    if (v43)
    {
      if (v43 == 1)
      {
        _H0 = LOWORD(__x[0]);
        __asm { FCVT            S0, H0; float }
        _S0 = log2f(_S0);
        __asm { FCVT            H0, S0 }
        LOWORD(v46) = LOWORD(_S0);
      }
      else
      {
        if (v43 != 2) {
          goto LABEL_59;
        }
        long double v46 = log2(__x[0]);
      }
    }
    else
    {
      LODWORD(v46) = log2f(*(float *)__x);
    }
    int v48 = v15;
    int v49 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x18268EC48);
    }
    uint64_t v44 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1ECABEF38[v15])(&v44);
    if (v49 != -1) {
      ((void (*)(uint64_t *, long double *))off_1ECABED68[v49])(&v44, &v46);
    }
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  uint64_t v23 = *v9;
  uint64_t v24 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v23 + 8));
  int v26 = v24;
  *uint64_t v24 = v23;
  if (v23)
  {
    uint64_t v27 = v24 + 6;
    uint64_t v28 = 24 * v23;
    uint64_t v29 = v9 + 6;
    do
    {
      *((unsigned char *)v27 - 16) = 0;
      uint64_t v25 = v27 - 4;
      *uint64_t v27 = -1;
      uint64_t v30 = *v29;
      if (v30 != -1)
      {
        ((void (*)(long double **, _DWORD *, unsigned int *))off_1ECABEE88[v30])(&v45, v25, v29 - 4);
        *uint64_t v27 = v30;
      }
      v27 += 6;
      v29 += 6;
      v28 -= 24;
    }
    while (v28);
  }
  *(void *)(v41 + 8) = v26;
  *(_DWORD *)(v41 + 24) = 8;
  *(_DWORD *)(v41 + 32) = 0;
  if (v43 != -1) {
    ((void (*)(long double **, long double *))off_1ECABEC60[v43])(&v45, __x);
  }
  uint64_t v31 = *v9;
  if (v31)
  {
    uint64_t v32 = 24 * v31;
    uint64_t v33 = v9 + 6;
    do
    {
      uint64_t v25 = v33 - 4;
      uint64_t v34 = *v33;
      if (v34 != -1) {
        ((void (*)(long double **, _DWORD *))off_1ECABEC60[v34])(&v45, v25);
      }
      _DWORD *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  WTF::fastFree((WTF *)v9, v25);
  uint64_t v36 = v51;
  if (v51 != -1) {
LABEL_44:
  }
    ((void (*)(long double **, void *))off_1ECABEC60[v36])(&v45, v50);
  return LOWORD(_D0);
}

void WGSL::constantMax(int **a1@<X1>, float *a2@<X8>)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *a1;
  int v4 = **a1;
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x18268F58CLL);
  }
  if (v4 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x18268F5ACLL);
  }
  uint64_t v5 = (float *)(v3 + 2);
  LOBYTE(v55[0]) = 0;
  int v56 = -1;
  uint64_t v6 = v3[6];
  if (v6 != -1)
  {
    ((void (*)(double *, void *, int *))off_1ECABEE88[v6])(v46, v55, v3 + 2);
    int v56 = v6;
  }
  unsigned int v7 = (float *)(v3 + 8);
  LOBYTE(v57[0]) = 0;
  unsigned int v58 = -1;
  uint64_t v8 = v3[12];
  if (v8 != -1)
  {
    ((void (*)(double *, void *, int *))off_1ECABEE88[v8])(v46, v57, v3 + 8);
    unsigned int v58 = v8;
    LODWORD(v6) = v56;
  }
  LOBYTE(v46[0]) = 0;
  unsigned int v47 = -1;
  if (v6 == -1)
  {
LABEL_12:
    LOBYTE(v46[0]) = 0;
    unsigned int v47 = -1;
    if (v8 == -1) {
      goto LABEL_93;
    }
    ((void (*)(double **, double *, void *))off_1ECABEE88[v8])(&v51, v46, v57);
    unsigned int v47 = v8;
    if (v8 == 8 && *(void *)&v46[0]) {
      unsigned int v10 = **(_DWORD **)&v46[0];
    }
    else {
      unsigned int v10 = 0;
    }
    ((void (*)(double **, double *))off_1ECABEC60[v8])(&v51, v46);
    if (!v10) {
      goto LABEL_93;
    }
    goto LABEL_18;
  }
  uint64_t v9 = v6;
  ((void (*)(double **, double *, void *))off_1ECABEE88[v6])(&v51, v46, v55);
  unsigned int v47 = v6;
  if (v6 != 8)
  {
    ((void (*)(double **, double *))off_1ECABEC60[v6])(&v51, v46);
    LODWORD(v8) = v58;
    goto LABEL_12;
  }
  if (*(void *)&v46[0]) {
    unsigned int v10 = **(_DWORD **)&v46[0];
  }
  else {
    unsigned int v10 = 0;
  }
  ((void (*)(double **, double *))off_1ECABEC60[v9])(&v51, v46);
  if (!v10)
  {
LABEL_93:
    switch(v3[6])
    {
      case 0:
        if (v3[12]) {
          goto LABEL_128;
        }
        float v39 = *v5;
        if (*v7 > *v5) {
          float v39 = *v7;
        }
        a2[2] = v39;
        a2[6] = 0.0;
        a2[8] = 0.0;
        uint64_t v38 = v58;
        if (v58 == -1) {
          goto LABEL_88;
        }
        goto LABEL_87;
      case 1:
        if (v3[12] != 1) {
          goto LABEL_128;
        }
        __int16 v40 = *(_WORD *)v5;
        if (*(short float *)v7 > *(short float *)v5) {
          __int16 v40 = *(_WORD *)v7;
        }
        *((_WORD *)a2 + 4) = v40;
        *((_DWORD *)a2 + 6) = 1;
        a2[8] = 0.0;
        uint64_t v38 = v58;
        if (v58 == -1) {
          goto LABEL_88;
        }
        goto LABEL_87;
      case 2:
        if (v3[12] != 2) {
          goto LABEL_128;
        }
        uint64_t v41 = *(void *)v5;
        if (*(double *)v7 > *(double *)v5) {
          uint64_t v41 = *(void *)v7;
        }
        *((void *)a2 + 1) = v41;
        *((_DWORD *)a2 + 6) = 2;
        a2[8] = 0.0;
        uint64_t v38 = v58;
        if (v58 == -1) {
          goto LABEL_88;
        }
        goto LABEL_87;
      case 3:
        if (v3[12] != 3) {
          goto LABEL_128;
        }
        float v42 = *v5;
        if (*(_DWORD *)v7 > *(_DWORD *)v5) {
          float v42 = *v7;
        }
        a2[2] = v42;
        *((_DWORD *)a2 + 6) = 3;
        a2[8] = 0.0;
        uint64_t v38 = v58;
        if (v58 == -1) {
          goto LABEL_88;
        }
        goto LABEL_87;
      case 4:
        if (v3[12] != 4) {
          goto LABEL_128;
        }
        float v43 = *v5;
        if (*(_DWORD *)v7 > *(_DWORD *)v5) {
          float v43 = *v7;
        }
        a2[2] = v43;
        *((_DWORD *)a2 + 6) = 4;
        a2[8] = 0.0;
        uint64_t v38 = v58;
        if (v58 == -1) {
          goto LABEL_88;
        }
        goto LABEL_87;
      case 5:
        if (v3[12] != 5) {
          goto LABEL_128;
        }
        uint64_t v44 = *(void *)v5;
        if (*(void *)v7 > *(void *)v5) {
          uint64_t v44 = *(void *)v7;
        }
        *((void *)a2 + 1) = v44;
        *((_DWORD *)a2 + 6) = 5;
        a2[8] = 0.0;
        uint64_t v38 = v58;
        if (v58 == -1) {
          goto LABEL_88;
        }
        goto LABEL_87;
      default:
        __break(0xC471u);
        JUMPOUT(0x18268F5F4);
    }
  }
LABEL_18:
  uint64_t v45 = a2;
  uint64_t v11 = 24 * v10;
  unint64_t v12 = (unsigned int *)WTF::fastMalloc((WTF *)(v11 + 8));
  *unint64_t v12 = v10;
  uint64_t v13 = 24;
  bzero(v12 + 2, 24 * ((v11 - 24) / 0x18uLL) + 24);
  unint64_t v15 = 0;
  LODWORD(v46[0]) = 0;
  unsigned int v47 = 0;
  LODWORD(v48[0]) = 0;
  unsigned int v49 = 0;
  while (2)
  {
    if (v56 == 8)
    {
      if (v15 >= *(unsigned int *)v55[0]) {
        goto LABEL_124;
      }
      uint64_t v14 = v55[0] + v13 - 16;
      uint64_t v16 = *(unsigned int *)(v55[0] + v13);
      uint64_t v17 = v47;
      if (v47 == -1)
      {
        if (v16 == -1) {
          goto LABEL_32;
        }
      }
      else if (v16 == -1)
      {
        goto LABEL_27;
      }
      unsigned int v51 = v46;
      ((void (*)(double **, double *, uint64_t))off_1ECABEEE0[v16])(&v51, v46, v14);
    }
    else
    {
      uint64_t v17 = v47;
      if (v47 == -1)
      {
        if (v56 == -1) {
          goto LABEL_32;
        }
      }
      else if (v56 == -1)
      {
LABEL_27:
        ((void (*)(double **, double *, uint64_t))off_1ECABEC60[v17])(&v51, v46, v14);
        unsigned int v47 = -1;
        goto LABEL_32;
      }
      unsigned int v51 = v46;
      ((void (*)(double **, double *, void *))off_1ECABEEE0[v56])(&v51, v46, v55);
    }
LABEL_32:
    if (v58 == 8)
    {
      if (v15 < *(unsigned int *)v57[0])
      {
        uint64_t v14 = v57[0] + v13 - 16;
        uint64_t v18 = *(unsigned int *)(v57[0] + v13);
        uint64_t v19 = v49;
        if (v49 == -1)
        {
          if (v18 == -1) {
            goto LABEL_44;
          }
        }
        else if (v18 == -1)
        {
          goto LABEL_39;
        }
        unsigned int v51 = v48;
        ((void (*)(double **, double *, uint64_t))off_1ECABEEE0[v18])(&v51, v48, v14);
        goto LABEL_44;
      }
LABEL_124:
      __break(0xC471u);
      JUMPOUT(0x18268F54CLL);
    }
    uint64_t v19 = v49;
    if (v49 == -1)
    {
      if (v58 == -1) {
        goto LABEL_44;
      }
LABEL_41:
      unsigned int v51 = v48;
      ((void (*)(double **, double *, void *))off_1ECABEEE0[v58])(&v51, v48, v57);
      goto LABEL_44;
    }
    if (v58 != -1) {
      goto LABEL_41;
    }
LABEL_39:
    ((void (*)(double **, double *, uint64_t))off_1ECABEC60[v19])(&v51, v48, v14);
    unsigned int v49 = -1;
LABEL_44:
    switch(v47)
    {
      case 0u:
        if (v49) {
          goto LABEL_128;
        }
        float v20 = *(float *)v46;
        if (*(float *)v48 > *(float *)v46) {
          float v20 = *(float *)v48;
        }
        *(float *)uint64_t v52 = v20;
        goto LABEL_69;
      case 1u:
        if (v49 != 1) {
          goto LABEL_128;
        }
        short float v24 = *(short float *)v46;
        if (*(short float *)v48 > *(short float *)v46) {
          short float v24 = *(short float *)v48;
        }
        *(short float *)uint64_t v52 = v24;
        goto LABEL_69;
      case 2u:
        if (v49 != 2) {
          goto LABEL_128;
        }
        double v21 = v46[0];
        if (v48[0] > v46[0]) {
          double v21 = v48[0];
        }
        v52[0] = v21;
        goto LABEL_69;
      case 3u:
        if (v49 != 3) {
          goto LABEL_128;
        }
        int v22 = LODWORD(v46[0]);
        if (SLODWORD(v48[0]) > SLODWORD(v46[0])) {
          int v22 = LODWORD(v48[0]);
        }
        LODWORD(v52[0]) = v22;
        goto LABEL_69;
      case 4u:
        if (v49 != 4) {
          goto LABEL_128;
        }
        int v23 = LODWORD(v46[0]);
        if (LODWORD(v48[0]) > LODWORD(v46[0])) {
          int v23 = LODWORD(v48[0]);
        }
        LODWORD(v52[0]) = v23;
        goto LABEL_69;
      case 5u:
        if (v49 != 5)
        {
LABEL_128:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_129:
          __break(0xC471u);
          JUMPOUT(0x18268F5D0);
        }
        double v25 = v46[0];
        if (*(uint64_t *)&v48[0] > *(uint64_t *)&v46[0]) {
          double v25 = v48[0];
        }
        v52[0] = v25;
LABEL_69:
        unsigned int v53 = v47;
        int v54 = 0;
        if (v15 >= *v12)
        {
          __break(0xC471u);
          JUMPOUT(0x18268F56CLL);
        }
        uint64_t v50 = (uint64_t)&v12[(unint64_t)v13 / 4 - 4];
        ((void (*)(uint64_t *))off_1ECABEF38[v47])(&v50);
        if (v54 != -1) {
          ((void (*)(uint64_t *, double *))off_1ECABED68[v54])(&v50, v52);
        }
        ++v15;
        v13 += 24;
        if (v10 != v15) {
          continue;
        }
        uint64_t v26 = *v12;
        uint64_t v27 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v26 + 8));
        uint64_t v29 = v27;
        *uint64_t v27 = v26;
        if (v26)
        {
          uint64_t v30 = v27 + 6;
          uint64_t v31 = 24 * v26;
          uint64_t v32 = v12 + 6;
          do
          {
            *((unsigned char *)v30 - 16) = 0;
            uint64_t v28 = v30 - 4;
            *uint64_t v30 = -1;
            uint64_t v33 = *v32;
            if (v33 != -1)
            {
              ((void (*)(double **, _DWORD *, unsigned int *))off_1ECABEE88[v33])(&v51, v28, v32 - 4);
              *uint64_t v30 = v33;
            }
            v30 += 6;
            v32 += 6;
            v31 -= 24;
          }
          while (v31);
        }
        *((void *)v45 + 1) = v29;
        *((_DWORD *)v45 + 6) = 8;
        v45[8] = 0.0;
        if (v49 != -1) {
          ((void (*)(double **, double *))off_1ECABEC60[v49])(&v51, v48);
        }
        unsigned int v49 = -1;
        if (v47 != -1) {
          ((void (*)(double **, double *))off_1ECABEC60[v47])(&v51, v46);
        }
        uint64_t v34 = *v12;
        if (v34)
        {
          uint64_t v35 = 24 * v34;
          uint64_t v36 = v12 + 6;
          do
          {
            uint64_t v28 = v36 - 4;
            uint64_t v37 = *v36;
            if (v37 != -1) {
              ((void (*)(double *, _DWORD *))off_1ECABEC60[v37])(v46, v28);
            }
            *uint64_t v36 = -1;
            v36 += 6;
            v35 -= 24;
          }
          while (v35);
        }
        WTF::fastFree((WTF *)v12, v28);
        uint64_t v38 = v58;
        if (v58 != -1) {
LABEL_87:
        }
          ((void (*)(double *, void *))off_1ECABEC60[v38])(v46, v57);
LABEL_88:
        unsigned int v58 = -1;
        if (v56 != -1) {
          ((void (*)(double *, void *))off_1ECABEC60[v56])(v46, v55);
        }
        return;
      default:
        goto LABEL_129;
    }
  }
}

void WGSL::constantMin(int **a1@<X1>, float *a2@<X8>)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *a1;
  int v4 = **a1;
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x18268FEC4);
  }
  if (v4 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x18268FEE4);
  }
  uint64_t v5 = (float *)(v3 + 2);
  LOBYTE(v55[0]) = 0;
  int v56 = -1;
  uint64_t v6 = v3[6];
  if (v6 != -1)
  {
    ((void (*)(double *, void *, int *))off_1ECABEE88[v6])(v46, v55, v3 + 2);
    int v56 = v6;
  }
  unsigned int v7 = (float *)(v3 + 8);
  LOBYTE(v57[0]) = 0;
  unsigned int v58 = -1;
  uint64_t v8 = v3[12];
  if (v8 != -1)
  {
    ((void (*)(double *, void *, int *))off_1ECABEE88[v8])(v46, v57, v3 + 8);
    unsigned int v58 = v8;
    LODWORD(v6) = v56;
  }
  LOBYTE(v46[0]) = 0;
  unsigned int v47 = -1;
  if (v6 == -1)
  {
LABEL_12:
    LOBYTE(v46[0]) = 0;
    unsigned int v47 = -1;
    if (v8 == -1) {
      goto LABEL_93;
    }
    ((void (*)(double **, double *, void *))off_1ECABEE88[v8])(&v51, v46, v57);
    unsigned int v47 = v8;
    if (v8 == 8 && *(void *)&v46[0]) {
      unsigned int v10 = **(_DWORD **)&v46[0];
    }
    else {
      unsigned int v10 = 0;
    }
    ((void (*)(double **, double *))off_1ECABEC60[v8])(&v51, v46);
    if (!v10) {
      goto LABEL_93;
    }
    goto LABEL_18;
  }
  uint64_t v9 = v6;
  ((void (*)(double **, double *, void *))off_1ECABEE88[v6])(&v51, v46, v55);
  unsigned int v47 = v6;
  if (v6 != 8)
  {
    ((void (*)(double **, double *))off_1ECABEC60[v6])(&v51, v46);
    LODWORD(v8) = v58;
    goto LABEL_12;
  }
  if (*(void *)&v46[0]) {
    unsigned int v10 = **(_DWORD **)&v46[0];
  }
  else {
    unsigned int v10 = 0;
  }
  ((void (*)(double **, double *))off_1ECABEC60[v9])(&v51, v46);
  if (!v10)
  {
LABEL_93:
    switch(v3[6])
    {
      case 0:
        if (v3[12]) {
          goto LABEL_128;
        }
        float v39 = *v5;
        if (*v7 < *v5) {
          float v39 = *v7;
        }
        a2[2] = v39;
        a2[6] = 0.0;
        a2[8] = 0.0;
        uint64_t v38 = v58;
        if (v58 == -1) {
          goto LABEL_88;
        }
        goto LABEL_87;
      case 1:
        if (v3[12] != 1) {
          goto LABEL_128;
        }
        __int16 v40 = *(_WORD *)v5;
        if (*(short float *)v7 < *(short float *)v5) {
          __int16 v40 = *(_WORD *)v7;
        }
        *((_WORD *)a2 + 4) = v40;
        *((_DWORD *)a2 + 6) = 1;
        a2[8] = 0.0;
        uint64_t v38 = v58;
        if (v58 == -1) {
          goto LABEL_88;
        }
        goto LABEL_87;
      case 2:
        if (v3[12] != 2) {
          goto LABEL_128;
        }
        uint64_t v41 = *(void *)v5;
        if (*(double *)v7 < *(double *)v5) {
          uint64_t v41 = *(void *)v7;
        }
        *((void *)a2 + 1) = v41;
        *((_DWORD *)a2 + 6) = 2;
        a2[8] = 0.0;
        uint64_t v38 = v58;
        if (v58 == -1) {
          goto LABEL_88;
        }
        goto LABEL_87;
      case 3:
        if (v3[12] != 3) {
          goto LABEL_128;
        }
        float v42 = *v5;
        if (*(_DWORD *)v7 < *(_DWORD *)v5) {
          float v42 = *v7;
        }
        a2[2] = v42;
        *((_DWORD *)a2 + 6) = 3;
        a2[8] = 0.0;
        uint64_t v38 = v58;
        if (v58 == -1) {
          goto LABEL_88;
        }
        goto LABEL_87;
      case 4:
        if (v3[12] != 4) {
          goto LABEL_128;
        }
        float v43 = *v5;
        if (*(_DWORD *)v7 < *(_DWORD *)v5) {
          float v43 = *v7;
        }
        a2[2] = v43;
        *((_DWORD *)a2 + 6) = 4;
        a2[8] = 0.0;
        uint64_t v38 = v58;
        if (v58 == -1) {
          goto LABEL_88;
        }
        goto LABEL_87;
      case 5:
        if (v3[12] != 5) {
          goto LABEL_128;
        }
        uint64_t v44 = *(void *)v5;
        if (*(void *)v7 < *(void *)v5) {
          uint64_t v44 = *(void *)v7;
        }
        *((void *)a2 + 1) = v44;
        *((_DWORD *)a2 + 6) = 5;
        a2[8] = 0.0;
        uint64_t v38 = v58;
        if (v58 == -1) {
          goto LABEL_88;
        }
        goto LABEL_87;
      default:
        __break(0xC471u);
        JUMPOUT(0x18268FF2CLL);
    }
  }
LABEL_18:
  uint64_t v45 = a2;
  uint64_t v11 = 24 * v10;
  unint64_t v12 = (unsigned int *)WTF::fastMalloc((WTF *)(v11 + 8));
  *unint64_t v12 = v10;
  uint64_t v13 = 24;
  bzero(v12 + 2, 24 * ((v11 - 24) / 0x18uLL) + 24);
  unint64_t v15 = 0;
  LODWORD(v46[0]) = 0;
  unsigned int v47 = 0;
  LODWORD(v48[0]) = 0;
  unsigned int v49 = 0;
  while (2)
  {
    if (v56 == 8)
    {
      if (v15 >= *(unsigned int *)v55[0]) {
        goto LABEL_124;
      }
      uint64_t v14 = v55[0] + v13 - 16;
      uint64_t v16 = *(unsigned int *)(v55[0] + v13);
      uint64_t v17 = v47;
      if (v47 == -1)
      {
        if (v16 == -1) {
          goto LABEL_32;
        }
      }
      else if (v16 == -1)
      {
        goto LABEL_27;
      }
      unsigned int v51 = v46;
      ((void (*)(double **, double *, uint64_t))off_1ECABEEE0[v16])(&v51, v46, v14);
    }
    else
    {
      uint64_t v17 = v47;
      if (v47 == -1)
      {
        if (v56 == -1) {
          goto LABEL_32;
        }
      }
      else if (v56 == -1)
      {
LABEL_27:
        ((void (*)(double **, double *, uint64_t))off_1ECABEC60[v17])(&v51, v46, v14);
        unsigned int v47 = -1;
        goto LABEL_32;
      }
      unsigned int v51 = v46;
      ((void (*)(double **, double *, void *))off_1ECABEEE0[v56])(&v51, v46, v55);
    }
LABEL_32:
    if (v58 == 8)
    {
      if (v15 < *(unsigned int *)v57[0])
      {
        uint64_t v14 = v57[0] + v13 - 16;
        uint64_t v18 = *(unsigned int *)(v57[0] + v13);
        uint64_t v19 = v49;
        if (v49 == -1)
        {
          if (v18 == -1) {
            goto LABEL_44;
          }
        }
        else if (v18 == -1)
        {
          goto LABEL_39;
        }
        unsigned int v51 = v48;
        ((void (*)(double **, double *, uint64_t))off_1ECABEEE0[v18])(&v51, v48, v14);
        goto LABEL_44;
      }
LABEL_124:
      __break(0xC471u);
      JUMPOUT(0x18268FE84);
    }
    uint64_t v19 = v49;
    if (v49 == -1)
    {
      if (v58 == -1) {
        goto LABEL_44;
      }
LABEL_41:
      unsigned int v51 = v48;
      ((void (*)(double **, double *, void *))off_1ECABEEE0[v58])(&v51, v48, v57);
      goto LABEL_44;
    }
    if (v58 != -1) {
      goto LABEL_41;
    }
LABEL_39:
    ((void (*)(double **, double *, uint64_t))off_1ECABEC60[v19])(&v51, v48, v14);
    unsigned int v49 = -1;
LABEL_44:
    switch(v47)
    {
      case 0u:
        if (v49) {
          goto LABEL_128;
        }
        float v20 = *(float *)v46;
        if (*(float *)v48 < *(float *)v46) {
          float v20 = *(float *)v48;
        }
        *(float *)uint64_t v52 = v20;
        goto LABEL_69;
      case 1u:
        if (v49 != 1) {
          goto LABEL_128;
        }
        short float v24 = *(short float *)v46;
        if (*(short float *)v48 < *(short float *)v46) {
          short float v24 = *(short float *)v48;
        }
        *(short float *)uint64_t v52 = v24;
        goto LABEL_69;
      case 2u:
        if (v49 != 2) {
          goto LABEL_128;
        }
        double v21 = v46[0];
        if (v48[0] < v46[0]) {
          double v21 = v48[0];
        }
        v52[0] = v21;
        goto LABEL_69;
      case 3u:
        if (v49 != 3) {
          goto LABEL_128;
        }
        int v22 = LODWORD(v46[0]);
        if (SLODWORD(v48[0]) < SLODWORD(v46[0])) {
          int v22 = LODWORD(v48[0]);
        }
        LODWORD(v52[0]) = v22;
        goto LABEL_69;
      case 4u:
        if (v49 != 4) {
          goto LABEL_128;
        }
        int v23 = LODWORD(v46[0]);
        if (LODWORD(v48[0]) < LODWORD(v46[0])) {
          int v23 = LODWORD(v48[0]);
        }
        LODWORD(v52[0]) = v23;
        goto LABEL_69;
      case 5u:
        if (v49 != 5)
        {
LABEL_128:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_129:
          __break(0xC471u);
          JUMPOUT(0x18268FF08);
        }
        double v25 = v46[0];
        if (*(uint64_t *)&v48[0] < *(uint64_t *)&v46[0]) {
          double v25 = v48[0];
        }
        v52[0] = v25;
LABEL_69:
        unsigned int v53 = v47;
        int v54 = 0;
        if (v15 >= *v12)
        {
          __break(0xC471u);
          JUMPOUT(0x18268FEA4);
        }
        uint64_t v50 = (uint64_t)&v12[(unint64_t)v13 / 4 - 4];
        ((void (*)(uint64_t *))off_1ECABEF38[v47])(&v50);
        if (v54 != -1) {
          ((void (*)(uint64_t *, double *))off_1ECABED68[v54])(&v50, v52);
        }
        ++v15;
        v13 += 24;
        if (v10 != v15) {
          continue;
        }
        uint64_t v26 = *v12;
        uint64_t v27 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v26 + 8));
        uint64_t v29 = v27;
        *uint64_t v27 = v26;
        if (v26)
        {
          uint64_t v30 = v27 + 6;
          uint64_t v31 = 24 * v26;
          uint64_t v32 = v12 + 6;
          do
          {
            *((unsigned char *)v30 - 16) = 0;
            uint64_t v28 = v30 - 4;
            *uint64_t v30 = -1;
            uint64_t v33 = *v32;
            if (v33 != -1)
            {
              ((void (*)(double **, _DWORD *, unsigned int *))off_1ECABEE88[v33])(&v51, v28, v32 - 4);
              *uint64_t v30 = v33;
            }
            v30 += 6;
            v32 += 6;
            v31 -= 24;
          }
          while (v31);
        }
        *((void *)v45 + 1) = v29;
        *((_DWORD *)v45 + 6) = 8;
        v45[8] = 0.0;
        if (v49 != -1) {
          ((void (*)(double **, double *))off_1ECABEC60[v49])(&v51, v48);
        }
        unsigned int v49 = -1;
        if (v47 != -1) {
          ((void (*)(double **, double *))off_1ECABEC60[v47])(&v51, v46);
        }
        uint64_t v34 = *v12;
        if (v34)
        {
          uint64_t v35 = 24 * v34;
          uint64_t v36 = v12 + 6;
          do
          {
            uint64_t v28 = v36 - 4;
            uint64_t v37 = *v36;
            if (v37 != -1) {
              ((void (*)(double *, _DWORD *))off_1ECABEC60[v37])(v46, v28);
            }
            *uint64_t v36 = -1;
            v36 += 6;
            v35 -= 24;
          }
          while (v35);
        }
        WTF::fastFree((WTF *)v12, v28);
        uint64_t v38 = v58;
        if (v58 != -1) {
LABEL_87:
        }
          ((void (*)(double *, void *))off_1ECABEC60[v38])(v46, v57);
LABEL_88:
        unsigned int v58 = -1;
        if (v56 != -1) {
          ((void (*)(double *, void *))off_1ECABEC60[v56])(v46, v55);
        }
        return;
      default:
        goto LABEL_129;
    }
  }
}

void WGSL::constantMix(unsigned int **a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  v2 = (float *)*a1;
  unsigned int v3 = **a1;
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x182690AB8);
  }
  if (v3 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x182690AD8);
  }
  if (v3 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x182690AF8);
  }
  LOBYTE(v65[0]) = 0;
  unsigned int v66 = -1;
  uint64_t v4 = *((unsigned int *)v2 + 6);
  if (v4 != -1)
  {
    ((void (*)(double *, void *, float *))off_1ECABEE88[v4])(v54, v65, v2 + 2);
    unsigned int v66 = v4;
  }
  uint64_t v5 = v2 + 8;
  LOBYTE(v67[0]) = 0;
  unsigned int v68 = -1;
  uint64_t v6 = *((unsigned int *)v2 + 12);
  if (v6 != -1)
  {
    ((void (*)(double *, void *, float *))off_1ECABEE88[v6])(v54, v67, v2 + 8);
    unsigned int v68 = v6;
  }
  unsigned int v7 = v2 + 14;
  LOBYTE(v69[0]) = 0;
  unsigned int v70 = -1;
  uint64_t v8 = *((unsigned int *)v2 + 18);
  if (v8 != -1)
  {
    ((void (*)(double *, void *, float *))off_1ECABEE88[v8])(v54, v69, v2 + 14);
    unsigned int v70 = v8;
  }
  LOBYTE(v54[0]) = 0;
  unsigned int v55 = -1;
  uint64_t v9 = v66;
  if (v66 != -1)
  {
    ((void (*)(double **, double *, void *))off_1ECABEE88[v66])(&v61, v54, v65);
    unsigned int v55 = v9;
    if (v9 == 8) {
      goto LABEL_18;
    }
    ((void (*)(double **, double *))off_1ECABEC60[v9])(&v61, v54);
  }
  LOBYTE(v54[0]) = 0;
  unsigned int v55 = -1;
  uint64_t v9 = v68;
  if (v68 == -1) {
    goto LABEL_16;
  }
  ((void (*)(double **, double *, void *))off_1ECABEE88[v68])(&v61, v54, v67);
  unsigned int v55 = v9;
  if (v9 != 8)
  {
    ((void (*)(double **, double *))off_1ECABEC60[v9])(&v61, v54);
LABEL_16:
    LOBYTE(v54[0]) = 0;
    unsigned int v55 = -1;
    uint64_t v9 = v70;
    if (v70 == -1) {
      goto LABEL_108;
    }
    ((void (*)(double **, double *, void *))off_1ECABEE88[v70])(&v61, v54, v69);
    unsigned int v55 = v9;
    if (v9 != 8) {
      goto LABEL_20;
    }
  }
LABEL_18:
  if (*(void *)&v54[0])
  {
    unsigned int v10 = **(_DWORD **)&v54[0];
    goto LABEL_21;
  }
LABEL_20:
  unsigned int v10 = 0;
LABEL_21:
  ((void (*)(double **, double *))off_1ECABEC60[v9])(&v61, v54);
  if (v10)
  {
    uint64_t v11 = 24 * v10;
    unint64_t v12 = (unsigned int *)WTF::fastMalloc((WTF *)(v11 + 8));
    *unint64_t v12 = v10;
    uint64_t v13 = 24;
    bzero(v12 + 2, 24 * ((v11 - 24) / 0x18uLL) + 24);
    unint64_t v15 = 0;
    LODWORD(v54[0]) = 0;
    unsigned int v55 = 0;
    LODWORD(v56[0]) = 0;
    unsigned int v57 = 0;
    LODWORD(v58[0]) = 0;
    unsigned int v59 = 0;
    while (2)
    {
      if (v66 == 8)
      {
        if (v15 >= *(unsigned int *)v65[0]) {
          goto LABEL_133;
        }
        uint64_t v14 = v65[0] + v13 - 16;
        uint64_t v16 = *(unsigned int *)(v65[0] + v13);
        uint64_t v17 = v55;
        if (v55 == -1)
        {
          if (v16 == -1) {
            goto LABEL_36;
          }
        }
        else if (v16 == -1)
        {
          goto LABEL_31;
        }
        uint64_t v61 = v54;
        ((void (*)(double **, double *, uint64_t))off_1ECABEEE0[v16])(&v61, v54, v14);
      }
      else
      {
        uint64_t v17 = v55;
        if (v55 == -1)
        {
          if (v66 == -1) {
            goto LABEL_36;
          }
        }
        else if (v66 == -1)
        {
LABEL_31:
          ((void (*)(double **, double *, uint64_t))off_1ECABEC60[v17])(&v61, v54, v14);
          unsigned int v55 = -1;
          goto LABEL_36;
        }
        uint64_t v61 = v54;
        ((void (*)(double **, double *, void *))off_1ECABEEE0[v66])(&v61, v54, v65);
      }
LABEL_36:
      if (v68 == 8)
      {
        if (v15 >= *(unsigned int *)v67[0]) {
          goto LABEL_133;
        }
        uint64_t v14 = v67[0] + v13 - 16;
        uint64_t v18 = *(unsigned int *)(v67[0] + v13);
        uint64_t v19 = v57;
        if (v57 == -1)
        {
          if (v18 == -1) {
            goto LABEL_48;
          }
        }
        else if (v18 == -1)
        {
          goto LABEL_43;
        }
        uint64_t v61 = v56;
        ((void (*)(double **, double *, uint64_t))off_1ECABEEE0[v18])(&v61, v56, v14);
        goto LABEL_48;
      }
      uint64_t v19 = v57;
      if (v57 == -1)
      {
        if (v68 == -1) {
          goto LABEL_48;
        }
      }
      else if (v68 == -1)
      {
LABEL_43:
        ((void (*)(double **, double *, uint64_t))off_1ECABEC60[v19])(&v61, v56, v14);
        unsigned int v57 = -1;
LABEL_48:
        if (v70 != 8)
        {
          uint64_t v21 = v59;
          if (v59 == -1)
          {
            if (v70 == -1) {
              goto LABEL_60;
            }
          }
          else if (v70 == -1)
          {
LABEL_55:
            ((void (*)(double **, double *, uint64_t))off_1ECABEC60[v21])(&v61, v58, v14);
            unsigned int v59 = -1;
LABEL_60:
            switch(v55)
            {
              case 0u:
                if (v57 || v59) {
                  goto LABEL_138;
                }
                *(float *)int v62 = (float)(*(float *)v56 * *(float *)v58)
                              + (float)(*(float *)v54 * (float)(1.0 - *(float *)v58));
                unsigned int v63 = v55;
                int v64 = 0;
                if (v15 >= *v12) {
                  goto LABEL_134;
                }
                goto LABEL_83;
              case 1u:
                if (v57 != 1 || v59 != 1) {
                  goto LABEL_138;
                }
                _H0 = LOWORD(v54[0]);
                _H1 = LOWORD(v56[0]);
                _H2 = LOWORD(v58[0]);
                __asm
                {
                  FCVT            S0, H0
                  FCVT            S2, H2
                  FCVT            S1, H1
                }
                _S0 = (float)(_S1 * _S2) + (float)(_S0 * (float)(1.0 - _S2));
                __asm { FCVT            H0, S0 }
                LOWORD(v62[0]) = LOWORD(_S0);
                unsigned int v63 = v55;
                int v64 = 0;
                if (v15 >= *v12) {
                  goto LABEL_134;
                }
                goto LABEL_83;
              case 2u:
                if (v57 != 2 || v59 != 2) {
                  goto LABEL_138;
                }
                v62[0] = v56[0] * v58[0] + v54[0] * (1.0 - v58[0]);
                unsigned int v63 = v55;
                int v64 = 0;
                if (v15 >= *v12) {
                  goto LABEL_134;
                }
                goto LABEL_83;
              case 3u:
                if (v57 != 3 || v59 != 3) {
                  goto LABEL_138;
                }
                goto LABEL_78;
              case 4u:
                if (v57 != 4 || v59 != 4) {
                  goto LABEL_138;
                }
LABEL_78:
                LODWORD(v62[0]) = LODWORD(v54[0])
                                - LODWORD(v54[0]) * LODWORD(v58[0])
                                + LODWORD(v58[0]) * LODWORD(v56[0]);
                unsigned int v63 = v55;
                int v64 = 0;
                if (v15 >= *v12) {
                  goto LABEL_134;
                }
                goto LABEL_83;
              case 5u:
                if (v57 != 5 || v59 != 5) {
                  goto LABEL_138;
                }
                *(void *)&v62[0] = *(void *)&v54[0]
                                   - *(void *)&v54[0] * *(void *)&v58[0]
                                   + *(void *)&v58[0] * *(void *)&v56[0];
                unsigned int v63 = v55;
                int v64 = 0;
                if (v15 >= *v12)
                {
LABEL_134:
                  __break(0xC471u);
                  JUMPOUT(0x182690A98);
                }
LABEL_83:
                uint64_t v60 = (uint64_t)&v12[(unint64_t)v13 / 4 - 4];
                ((void (*)(uint64_t *))off_1ECABEF38[v55])(&v60);
                if (v64 != -1) {
                  ((void (*)(uint64_t *, double *))off_1ECABED68[v64])(&v60, v62);
                }
                ++v15;
                v13 += 24;
                if (v10 != v15) {
                  continue;
                }
                uint64_t v33 = *v12;
                uint64_t v34 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v33 + 8));
                uint64_t v36 = v34;
                *uint64_t v34 = v33;
                if (v33)
                {
                  uint64_t v37 = v34 + 6;
                  uint64_t v38 = 24 * v33;
                  float v39 = v12 + 6;
                  do
                  {
                    *((unsigned char *)v37 - 16) = 0;
                    uint64_t v35 = v37 - 4;
                    *uint64_t v37 = -1;
                    uint64_t v40 = *v39;
                    if (v40 != -1)
                    {
                      ((void (*)(double **, _DWORD *, unsigned int *))off_1ECABEE88[v40])(&v61, v35, v39 - 4);
                      *uint64_t v37 = v40;
                    }
                    v37 += 6;
                    v39 += 6;
                    v38 -= 24;
                  }
                  while (v38);
                }
                *(void *)(a2 + 8) = v36;
                *(_DWORD *)(a2 + 24) = 8;
                *(_DWORD *)(a2 + 32) = 0;
                if (v59 != -1) {
                  ((void (*)(double **, double *))off_1ECABEC60[v59])(&v61, v58);
                }
                unsigned int v59 = -1;
                if (v57 != -1) {
                  ((void (*)(double **, double *))off_1ECABEC60[v57])(&v61, v56);
                }
                unsigned int v57 = -1;
                if (v55 != -1) {
                  ((void (*)(double **, double *))off_1ECABEC60[v55])(&v61, v54);
                }
                uint64_t v41 = *v12;
                if (v41)
                {
                  uint64_t v42 = 24 * v41;
                  float v43 = v12 + 6;
                  do
                  {
                    uint64_t v35 = v43 - 4;
                    uint64_t v44 = *v43;
                    if (v44 != -1) {
                      ((void (*)(double *, _DWORD *))off_1ECABEC60[v44])(v54, v35);
                    }
                    *float v43 = -1;
                    v43 += 6;
                    v42 -= 24;
                  }
                  while (v42);
                }
                WTF::fastFree((WTF *)v12, v35);
                uint64_t v45 = v70;
                if (v70 != -1) {
                  goto LABEL_102;
                }
                goto LABEL_103;
              default:
                goto LABEL_139;
            }
          }
          uint64_t v61 = v58;
          ((void (*)(double **, double *, void *))off_1ECABEEE0[v70])(&v61, v58, v69);
          goto LABEL_60;
        }
        if (v15 < *(unsigned int *)v69[0])
        {
          uint64_t v14 = v69[0] + v13 - 16;
          uint64_t v20 = *(unsigned int *)(v69[0] + v13);
          uint64_t v21 = v59;
          if (v59 == -1)
          {
            if (v20 == -1) {
              goto LABEL_60;
            }
          }
          else if (v20 == -1)
          {
            goto LABEL_55;
          }
          uint64_t v61 = v58;
          ((void (*)(double **, double *, uint64_t))off_1ECABEEE0[v20])(&v61, v58, v14);
          goto LABEL_60;
        }
LABEL_133:
        __break(0xC471u);
        JUMPOUT(0x182690A78);
      }
      break;
    }
    uint64_t v61 = v56;
    ((void (*)(double **, double *, void *))off_1ECABEEE0[v68])(&v61, v56, v67);
    goto LABEL_48;
  }
LABEL_108:
  switch(*((_DWORD *)v2 + 6))
  {
    case 0:
      if (*((_DWORD *)v2 + 12) || *((_DWORD *)v2 + 18)) {
        goto LABEL_138;
      }
      *(float *)(a2 + 8) = (float)(*v5 * *v7) + (float)(v2[2] * (float)(1.0 - *v7));
      *(_DWORD *)(a2 + 24) = 0;
      *(_DWORD *)(a2 + 32) = 0;
      uint64_t v45 = v70;
      if (v70 == -1) {
        goto LABEL_103;
      }
      goto LABEL_102;
    case 1:
      if (*((_DWORD *)v2 + 12) != 1 || *((_DWORD *)v2 + 18) != 1) {
        goto LABEL_138;
      }
      _H0 = *((_WORD *)v2 + 4);
      _H1 = *(_WORD *)v5;
      _H2 = *(_WORD *)v7;
      __asm
      {
        FCVT            S0, H0
        FCVT            S2, H2
        FCVT            S1, H1
      }
      _S0 = (float)(_S1 * _S2) + (float)(_S0 * (float)(1.0 - _S2));
      __asm { FCVT            H0, S0 }
      *(_WORD *)(a2 + 8) = LOWORD(_S0);
      *(_DWORD *)(a2 + 24) = 1;
      *(_DWORD *)(a2 + 32) = 0;
      uint64_t v45 = v70;
      if (v70 == -1) {
        goto LABEL_103;
      }
      goto LABEL_102;
    case 2:
      if (*((_DWORD *)v2 + 12) != 2 || *((_DWORD *)v2 + 18) != 2) {
        goto LABEL_138;
      }
      *(double *)(a2 + 8) = *(double *)v5 * *(double *)v7 + *((double *)v2 + 1) * (1.0 - *(double *)v7);
      *(_DWORD *)(a2 + 24) = 2;
      *(_DWORD *)(a2 + 32) = 0;
      uint64_t v45 = v70;
      if (v70 == -1) {
        goto LABEL_103;
      }
      goto LABEL_102;
    case 3:
      if (*((_DWORD *)v2 + 12) != 3 || *((_DWORD *)v2 + 18) != 3) {
        goto LABEL_138;
      }
      *(_DWORD *)(a2 + 8) = *((_DWORD *)v2 + 2) - *((_DWORD *)v2 + 2) * *(_DWORD *)v7 + *(_DWORD *)v7 * *(_DWORD *)v5;
      *(_DWORD *)(a2 + 24) = 3;
      *(_DWORD *)(a2 + 32) = 0;
      uint64_t v45 = v70;
      if (v70 == -1) {
        goto LABEL_103;
      }
      goto LABEL_102;
    case 4:
      if (*((_DWORD *)v2 + 12) != 4 || *((_DWORD *)v2 + 18) != 4) {
        goto LABEL_138;
      }
      *(_DWORD *)(a2 + 8) = *((_DWORD *)v2 + 2) - *((_DWORD *)v2 + 2) * *(_DWORD *)v7 + *(_DWORD *)v7 * *(_DWORD *)v5;
      *(_DWORD *)(a2 + 24) = 4;
      *(_DWORD *)(a2 + 32) = 0;
      uint64_t v45 = v70;
      if (v70 == -1) {
        goto LABEL_103;
      }
      goto LABEL_102;
    case 5:
      if (*((_DWORD *)v2 + 12) != 5 || *((_DWORD *)v2 + 18) != 5)
      {
LABEL_138:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_139:
        __break(0xC471u);
        JUMPOUT(0x182690B1CLL);
      }
      *(void *)(a2 + 8) = *((void *)v2 + 1) - *((void *)v2 + 1) * *(void *)v7 + *(void *)v7 * *(void *)v5;
      *(_DWORD *)(a2 + 24) = 5;
      *(_DWORD *)(a2 + 32) = 0;
      uint64_t v45 = v70;
      if (v70 == -1) {
        goto LABEL_103;
      }
LABEL_102:
      ((void (*)(double *, void *))off_1ECABEC60[v45])(v54, v69);
LABEL_103:
      unsigned int v70 = -1;
      if (v68 != -1) {
        ((void (*)(double *, void *))off_1ECABEC60[v68])(v54, v67);
      }
      unsigned int v68 = -1;
      if (v66 != -1) {
        ((void (*)(double *, void *))off_1ECABEC60[v66])(v54, v65);
      }
      return;
    default:
      __break(0xC471u);
      JUMPOUT(0x182690B40);
  }
}

WTF::StringImpl *WGSL::constantModf@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x182691294);
  }
  uint64_t v4 = v3 + 2;
  uint64_t v5 = v3[6];
  if (v5 != 8)
  {
    LOBYTE(v55) = 0;
    int v57 = -1;
    if (v5 == -1) {
      goto LABEL_81;
    }
    ((void (*)(long double *, long double *, void *))off_1ECABEE88[v5])(__y, &v55, v4);
    int v57 = v5;
    switch(v5)
    {
      case 2:
        __x[0] = 0;
        __y[0] = modf(v55, (long double *)__x);
        int v35 = 2;
        int v49 = 2;
        v50[0] = __x[0];
        break;
      case 1:
        _H0 = LOWORD(v55);
        LODWORD(__x[0]) = 0;
        __asm { FCVT            S0, H0; float }
        _S0 = modff(_S0, (float *)__x);
        __asm { FCVT            H0, S0 }
        _S1 = __x[0];
        __asm { FCVT            H1, S1 }
        LOWORD(__y[0]) = LOWORD(_S0);
        int v35 = 1;
        int v49 = 1;
        LOWORD(v50[0]) = _S1;
        break;
      case 0:
        LODWORD(__x[0]) = 0;
        LODWORD(__y[0]) = modff(*(float *)&v55, (float *)__x);
        int v49 = 0;
        LODWORD(v50[0]) = __x[0];
        unsigned int v51 = 0;
LABEL_52:
        ((void (*)(uint64_t *, long double *))off_1ECABEC60[v5])(__x, &v55);
        goto LABEL_53;
      default:
LABEL_81:
        __break(0xC471u);
        JUMPOUT(0x182691234);
    }
    unsigned int v51 = v35;
    goto LABEL_52;
  }
  if (!*v4 || (uint64_t v6 = *(unsigned int *)*v4, !v6))
  {
    int v54 = 0;
    _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJN4WGSL13ConstantValueES4_EEC2B8sn180100IJLm0ELm1EEJS4_S4_EJEJEJRNS3_14ConstantVectorES8_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSA_IJDpT2_EEEDpOT3_((uint64_t)__y, 0, &v54);
    goto LABEL_53;
  }
  uint64_t v47 = a2;
  unsigned int v7 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v6 + 8));
  *unsigned int v7 = v6;
  bzero(v7 + 2, 24 * ((24 * v6 - 24) / 0x18uLL) + 24);
  uint64_t v8 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v6 + 8));
  *uint64_t v8 = v6;
  bzero(v8 + 2, 24 * ((24 * v6 - 24) / 0x18uLL) + 24);
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  int v54 = v8;
  do
  {
    if (v10 >= *(unsigned int *)*v4) {
      goto LABEL_81;
    }
    uint64_t v11 = *v4 + v9 * 4;
    LOBYTE(__x[0]) = 0;
    int v53 = -1;
    uint64_t v12 = *(unsigned int *)(v11 + 24);
    if (v12 == -1) {
      goto LABEL_80;
    }
    ((void (*)(long double *, uint64_t *, uint64_t))off_1ECABEE88[v12])(__y, __x, v11 + 8);
    int v53 = v12;
    if (v12 == 2)
    {
      __y[0] = 0.0;
      long double v55 = modf(*(long double *)__x, __y);
      int v13 = 2;
      int v57 = 2;
      long double v58 = __y[0];
LABEL_15:
      v60[0] = v13;
      goto LABEL_16;
    }
    if (v12 == 1)
    {
      _H0 = __x[0];
      LODWORD(__y[0]) = 0;
      __asm { FCVT            S0, H0; float }
      _S0 = modff(_S0, (float *)__y);
      __asm { FCVT            H0, S0 }
      _S1 = LODWORD(__y[0]);
      __asm { FCVT            H1, S1 }
      LOWORD(v55) = LOWORD(_S0);
      int v13 = 1;
      int v57 = 1;
      LOWORD(v58) = _S1;
      goto LABEL_15;
    }
    if (v12)
    {
LABEL_80:
      __break(0xC471u);
      JUMPOUT(0x1826912B4);
    }
    LODWORD(__y[0]) = 0;
    LODWORD(v55) = modff(*(float *)__x, (float *)__y);
    int v57 = 0;
    LODWORD(v58) = LODWORD(__y[0]);
    v60[0] = 0;
LABEL_16:
    ((void (*)(long double *, uint64_t *))off_1ECABEC60[v12])(__y, __x);
    int v53 = -1;
    if (v10 >= *v7)
    {
      __break(0xC471u);
      JUMPOUT(0x182691254);
    }
    uint64_t v22 = v7[v9 + 6];
    if (v22 == -1)
    {
      if (v57 == -1) {
        goto LABEL_22;
      }
    }
    else if (v57 == -1)
    {
      ((void (*)(long double *, unsigned int *))off_1ECABEC60[v22])(__y, &v7[v9 + 2]);
      v7[v9 + 6] = -1;
      goto LABEL_22;
    }
    *(void *)&__y[0] = &v7[v9 + 2];
    ((void (*)(long double *))off_1ECABEEE0[v57])(__y);
LABEL_22:
    if (v10 >= *v8)
    {
      __break(0xC471u);
      JUMPOUT(0x182691274);
    }
    uint64_t v23 = v8[v9 + 6];
    if (v23 == -1)
    {
      if (v60[0] == -1) {
        goto LABEL_30;
      }
LABEL_28:
      *(void *)&__y[0] = &v8[v9 + 2];
      ((void (*)(long double *))off_1ECABEEE0[v60[0]])(__y);
      uint64_t v24 = v60[0];
      if (v60[0] == -1) {
        goto LABEL_30;
      }
LABEL_29:
      ((void (*)(long double *, long double *))off_1ECABEC60[v24])(__y, &v58);
      goto LABEL_30;
    }
    if (v60[0] != -1) {
      goto LABEL_28;
    }
    ((void (*)(long double *, unsigned int *))off_1ECABEC60[v23])(__y, &v8[v9 + 2]);
    v8[v9 + 6] = -1;
    uint64_t v24 = v60[0];
    if (v60[0] != -1) {
      goto LABEL_29;
    }
LABEL_30:
    v60[0] = -1;
    if (v57 != -1) {
      ((void (*)(long double *, long double *))off_1ECABEC60[v57])(__y, &v55);
    }
    ++v10;
    v9 += 6;
  }
  while (6 * v6 != v9);
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJN4WGSL13ConstantValueES4_EEC2B8sn180100IJLm0ELm1EEJS4_S4_EJEJEJRNS3_14ConstantVectorES8_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSA_IJDpT2_EEEDpOT3_((uint64_t)__y, v7, &v54);
  uint64_t v26 = *v8;
  a2 = v47;
  if (v26)
  {
    uint64_t v27 = 24 * v26;
    uint64_t v28 = v8 + 6;
    do
    {
      double v25 = v28 - 4;
      uint64_t v29 = *v28;
      if (v29 != -1) {
        ((void (*)(long double *, _DWORD *))off_1ECABEC60[v29])(&v55, v25);
      }
      *uint64_t v28 = -1;
      v28 += 6;
      v27 -= 24;
    }
    while (v27);
  }
  WTF::fastFree((WTF *)v8, v25);
  uint64_t v31 = *v7;
  if (v31)
  {
    uint64_t v32 = 24 * v31;
    uint64_t v33 = v7 + 6;
    do
    {
      uint64_t v30 = v33 - 4;
      uint64_t v34 = *v33;
      if (v34 != -1) {
        ((void (*)(long double *, _DWORD *))off_1ECABEC60[v34])(&v55, v30);
      }
      _DWORD *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  WTF::fastFree((WTF *)v7, v30);
LABEL_53:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v56[0] = 0;
  LODWORD(v58) = -1;
  int v40 = v49;
  if (v49 != -1)
  {
    ((void (*)(uint64_t *, unsigned char *, long double *))off_1ECABEE88[v49])(__x, v56, __y);
    LODWORD(v58) = v40;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v59 = __x[0];
  LOBYTE(v60[0]) = 0;
  int v61 = -1;
  unsigned int v41 = v51;
  if (v51 != -1)
  {
    ((void (*)(uint64_t *, _DWORD *, void *))off_1ECABEE88[v51])(__x, v60, v50);
    int v61 = v41;
  }
  WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::HashMap(__x, (WTF::StringImpl **)&v55, 2);
  uint64_t v42 = __x[0];
  __x[0] = 0;
  *(void *)(a2 + 8) = v42;
  *(_DWORD *)(a2 + 24) = 10;
  *(_DWORD *)(a2 + 32) = 0;
  if (v61 != -1) {
    ((void (*)(unsigned int **, _DWORD *))off_1ECABEC60[v61])(&v54, v60);
  }
  int v61 = -1;
  float v43 = (_DWORD *)v59;
  uint64_t v59 = 0;
  if (!v43)
  {
LABEL_62:
    uint64_t v44 = LODWORD(v58);
    if (LODWORD(v58) == -1) {
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  if (*v43 != 2)
  {
    *v43 -= 2;
    goto LABEL_62;
  }
  WTF::StringImpl::destroy();
  uint64_t v44 = LODWORD(v58);
  if (LODWORD(v58) != -1) {
LABEL_63:
  }
    ((void (*)(unsigned int **, unsigned char *))off_1ECABEC60[v44])(&v54, v56);
LABEL_64:
  LODWORD(v58) = -1;
  uint64_t result = *(WTF::StringImpl **)&v55;
  long double v55 = 0.0;
  if (!result) {
    goto LABEL_67;
  }
  if (*(_DWORD *)result == 2)
  {
    uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy();
    uint64_t v46 = v51;
    if (v51 != -1) {
      goto LABEL_68;
    }
  }
  else
  {
    *(_DWORD *)result -= 2;
LABEL_67:
    uint64_t v46 = v51;
    if (v51 != -1) {
LABEL_68:
    }
      uint64_t result = (WTF::StringImpl *)((uint64_t (*)(long double *, void *))off_1ECABEC60[v46])(&v55, v50);
  }
  unsigned int v51 = -1;
  if (v49 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(long double *, long double *))off_1ECABEC60[v49])(&v55, __y);
  }
  return result;
}

uint64_t WGSL::constantNormalize@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 48) != 1) {
    goto LABEL_40;
  }
  uint64_t v4 = (_DWORD *)*a2;
  if (!*(_DWORD *)*a2)
  {
    __break(0xC471u);
    JUMPOUT(0x18269160CLL);
  }
  WGSL::constantLength(*(const WGSL::Type **)a1, a2, (uint64_t)v28);
  if (v31)
  {
    if (v31 == 1)
    {
      uint64_t v5 = v29[0];
      if (v29[0]) {
        *(_DWORD *)v29[0] += 2;
      }
      *(void *)(a3 + 8) = v5;
      int v6 = 1;
      *(_DWORD *)(a3 + 32) = 1;
      return ((uint64_t (*)(unsigned char *, void *))off_1ECABED68[v6])(v24, v29);
    }
LABEL_40:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v21[0] = 0;
  int v22 = -1;
  int v7 = v30;
  if (v30 != -1)
  {
    ((void (*)(unsigned char *, unsigned char *, void *))off_1ECABECB8[v30])(v24, v21, v29);
    int v22 = v7;
  }
  v24[0] = 0;
  int v25 = -1;
  uint64_t v8 = v4[6];
  if (v8 != -1)
  {
    ((void (*)(uint64_t *, unsigned char *, _DWORD *))off_1ECABEE88[v8])(&v23, v24, v4 + 2);
    int v25 = v8;
    int v7 = v22;
  }
  v26[0] = 0;
  int v27 = -1;
  if (v7 != -1)
  {
    ((void (*)(uint64_t *, unsigned char *, unsigned char *))off_1ECABEE88[v7])(&v23, v26, v21);
    int v27 = v7;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)0x38);
  unint64_t v10 = (unsigned int *)v9;
  *(_DWORD *)uint64_t v9 = 2;
  *(_OWORD *)(v9 + 8) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  uint64_t v20 = (int *)v9;
  if (v25 == -1)
  {
    *(_DWORD *)(v9 + 24) = -1;
    uint64_t v12 = (unsigned int *)(v9 + 32);
    int v13 = v27;
    if (v27 == -1)
    {
      unsigned int v11 = 0;
LABEL_21:
      ((void (*)(uint64_t *, unsigned int *))off_1ECABEC60[v11])(&v23, v12);
      v10[12] = -1;
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v23 = v9 + 8;
    ((void (*)(uint64_t *))off_1ECABEEE0[v25])(&v23);
    if (*v10 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x18269162CLL);
    }
    unsigned int v11 = v10[12];
    uint64_t v12 = v10 + 8;
    int v13 = v27;
    if (v11 == -1)
    {
      if (v27 == -1) {
        goto LABEL_24;
      }
    }
    else if (v27 == -1)
    {
      goto LABEL_21;
    }
  }
  uint64_t v23 = (uint64_t)v12;
  ((void (*)(uint64_t *))off_1ECABEEE0[v13])(&v23);
LABEL_24:
  WGSL::constantDivide(&v20, a3);
  uint64_t v15 = *v10;
  if (v15)
  {
    uint64_t v16 = 24 * v15;
    uint64_t v17 = v10 + 6;
    do
    {
      uint64_t v14 = v17 - 4;
      uint64_t v18 = *v17;
      if (v18 != -1) {
        ((void (*)(uint64_t *, _DWORD *))off_1ECABEC60[v18])(&v23, v14);
      }
      _DWORD *v17 = -1;
      v17 += 6;
      v16 -= 24;
    }
    while (v16);
  }
  uint64_t result = WTF::fastFree((WTF *)v10, v14);
  if (v27 != -1) {
    uint64_t result = ((uint64_t (*)(uint64_t *, unsigned char *))off_1ECABEC60[v27])(&v23, v26);
  }
  int v27 = -1;
  if (v25 != -1) {
    uint64_t result = ((uint64_t (*)(uint64_t *, unsigned char *))off_1ECABEC60[v25])(&v23, v24);
  }
  if (v22 != -1) {
    uint64_t result = ((uint64_t (*)(unsigned char *, unsigned char *))off_1ECABEC60[v22])(v24, v21);
  }
  int v6 = v31;
  if (v31 != -1) {
    return ((uint64_t (*)(unsigned char *, void *))off_1ECABED68[v6])(v24, v29);
  }
  return result;
}

void WGSL::constantPow(int **a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *a1;
  int v4 = **a1;
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x182691D90);
  }
  if (v4 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x182691DB0);
  }
  uint64_t v5 = (long double *)(v3 + 2);
  LOBYTE(v59[0]) = 0;
  int v60 = -1;
  uint64_t v6 = v3[6];
  if (v6 != -1)
  {
    ((void (*)(long double *, void *, int *))off_1ECABEE88[v6])(__x, v59, v3 + 2);
    int v60 = v6;
  }
  int v7 = (long double *)(v3 + 8);
  LOBYTE(v61[0]) = 0;
  unsigned int v62 = -1;
  uint64_t v8 = v3[12];
  if (v8 != -1)
  {
    ((void (*)(long double *, void *, int *))off_1ECABEE88[v8])(__x, v61, v3 + 8);
    unsigned int v62 = v8;
    LODWORD(v6) = v60;
  }
  LOBYTE(__x[0]) = 0;
  unsigned int v51 = -1;
  if (v6 == -1)
  {
LABEL_12:
    LOBYTE(__x[0]) = 0;
    unsigned int v51 = -1;
    if (v8 == -1
      || ((((void (*)(long double **, long double *, void *))off_1ECABEE88[v8])(&v55, __x, v61), v51 = v8, v8 != 8)|| !*(void *)&__x[0]? (unsigned int v10 = 0): (unsigned int v10 = **(_DWORD **)&__x[0]), ((void (*)(long double **, long double *))off_1ECABEC60[v8])(&v55, __x), !v10))
    {
LABEL_74:
      int v43 = v3[6];
      if (v43 == 2)
      {
        if (v3[12] == 2)
        {
          *(long double *)(a2 + 8) = pow(*v5, *v7);
          *(_DWORD *)(a2 + 24) = 2;
          *(_DWORD *)(a2 + 32) = 0;
          uint64_t v42 = v62;
          if (v62 == -1) {
            goto LABEL_86;
          }
LABEL_85:
          ((void (*)(long double *, void *))off_1ECABEC60[v42])(__x, v61);
          goto LABEL_86;
        }
      }
      else if (v43 == 1)
      {
        if (v3[12] == 1)
        {
          _H0 = *(_WORD *)v5;
          _H1 = *(_WORD *)v7;
          __asm
          {
            FCVT            S0, H0; float
            FCVT            S1, H1; float
          }
          _S0 = powf(_S0, _S1);
          __asm { FCVT            H0, S0 }
          *(_WORD *)(a2 + 8) = LOWORD(_S0);
          *(_DWORD *)(a2 + 24) = 1;
          *(_DWORD *)(a2 + 32) = 0;
          uint64_t v42 = v62;
          if (v62 == -1) {
            goto LABEL_86;
          }
          goto LABEL_85;
        }
      }
      else
      {
        if (v43)
        {
LABEL_95:
          __break(0xC471u);
          JUMPOUT(0x182691D50);
        }
        if (!v3[12])
        {
          *(float *)(a2 + 8) = powf(*(float *)v5, *(float *)v7);
          *(_DWORD *)(a2 + 24) = 0;
          *(_DWORD *)(a2 + 32) = 0;
          uint64_t v42 = v62;
          if (v62 == -1) {
            goto LABEL_86;
          }
          goto LABEL_85;
        }
      }
LABEL_93:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_94:
      __break(0xC471u);
      JUMPOUT(0x182691DD4);
    }
    goto LABEL_18;
  }
  uint64_t v9 = v6;
  ((void (*)(long double **, long double *, void *))off_1ECABEE88[v6])(&v55, __x, v59);
  unsigned int v51 = v6;
  if (v6 != 8)
  {
    ((void (*)(long double **, long double *))off_1ECABEC60[v6])(&v55, __x);
    LODWORD(v8) = v62;
    goto LABEL_12;
  }
  if (*(void *)&__x[0]) {
    unsigned int v10 = **(_DWORD **)&__x[0];
  }
  else {
    unsigned int v10 = 0;
  }
  ((void (*)(long double **, long double *))off_1ECABEC60[v9])(&v55, __x);
  if (!v10) {
    goto LABEL_74;
  }
LABEL_18:
  uint64_t v49 = a2;
  uint64_t v11 = 24 * v10;
  uint64_t v12 = (unsigned int *)WTF::fastMalloc((WTF *)(v11 + 8));
  *uint64_t v12 = v10;
  uint64_t v13 = 24;
  bzero(v12 + 2, 24 * ((v11 - 24) / 0x18uLL) + 24);
  unint64_t v15 = 0;
  LODWORD(__x[0]) = 0;
  unsigned int v51 = 0;
  LODWORD(__y[0]) = 0;
  unsigned int v53 = 0;
  do
  {
    if (v60 == 8)
    {
      if (v15 >= *(unsigned int *)v59[0]) {
        goto LABEL_95;
      }
      uint64_t v14 = v59[0] + v13 - 16;
      uint64_t v16 = *(unsigned int *)(v59[0] + v13);
      uint64_t v17 = v51;
      if (v51 == -1)
      {
        if (v16 == -1) {
          goto LABEL_32;
        }
      }
      else if (v16 == -1)
      {
        goto LABEL_27;
      }
      long double v55 = __x;
      ((void (*)(long double **, long double *, uint64_t))off_1ECABEEE0[v16])(&v55, __x, v14);
    }
    else
    {
      uint64_t v17 = v51;
      if (v51 == -1)
      {
        if (v60 == -1) {
          goto LABEL_32;
        }
      }
      else if (v60 == -1)
      {
LABEL_27:
        ((void (*)(long double **, long double *, uint64_t))off_1ECABEC60[v17])(&v55, __x, v14);
        unsigned int v51 = -1;
        goto LABEL_32;
      }
      long double v55 = __x;
      ((void (*)(long double **, long double *, void *))off_1ECABEEE0[v60])(&v55, __x, v59);
    }
LABEL_32:
    if (v62 == 8)
    {
      if (v15 >= *(unsigned int *)v61[0]) {
        goto LABEL_95;
      }
      uint64_t v14 = v61[0] + v13 - 16;
      uint64_t v18 = *(unsigned int *)(v61[0] + v13);
      uint64_t v19 = v53;
      if (v53 == -1)
      {
        if (v18 == -1) {
          goto LABEL_44;
        }
      }
      else if (v18 == -1)
      {
        goto LABEL_39;
      }
      long double v55 = __y;
      ((void (*)(long double **, long double *, uint64_t))off_1ECABEEE0[v18])(&v55, __y, v14);
    }
    else
    {
      uint64_t v19 = v53;
      if (v53 == -1)
      {
        if (v62 == -1) {
          goto LABEL_44;
        }
      }
      else if (v62 == -1)
      {
LABEL_39:
        ((void (*)(long double **, long double *, uint64_t))off_1ECABEC60[v19])(&v55, __y, v14);
        unsigned int v53 = -1;
        goto LABEL_44;
      }
      long double v55 = __y;
      ((void (*)(long double **, long double *, void *))off_1ECABEEE0[v62])(&v55, __y, v61);
    }
LABEL_44:
    uint64_t v20 = v51;
    if (v51)
    {
      if (v51 == 1)
      {
        if (v53 != 1) {
          goto LABEL_93;
        }
        _H0 = LOWORD(__x[0]);
        _H1 = LOWORD(__y[0]);
        __asm
        {
          FCVT            S0, H0; float
          FCVT            S1, H1; float
        }
        _S0 = powf(_S0, _S1);
        __asm { FCVT            H0, S0 }
        LOWORD(v56[0]) = LOWORD(_S0);
      }
      else
      {
        if (v51 != 2) {
          goto LABEL_94;
        }
        if (v53 != 2) {
          goto LABEL_93;
        }
        v56[0] = pow(__x[0], __y[0]);
      }
    }
    else
    {
      if (v53) {
        goto LABEL_93;
      }
      LODWORD(v56[0]) = powf(*(float *)__x, *(float *)__y);
    }
    int v57 = v20;
    int v58 = 0;
    if (v15 >= *v12)
    {
      __break(0xC471u);
      JUMPOUT(0x182691D70);
    }
    uint64_t v54 = (uint64_t)&v12[(unint64_t)v13 / 4 - 4];
    ((void (*)(uint64_t *))off_1ECABEF38[v20])(&v54);
    if (v58 != -1) {
      ((void (*)(uint64_t *, long double *))off_1ECABED68[v58])(&v54, v56);
    }
    ++v15;
    v13 += 24;
  }
  while (v10 != v15);
  uint64_t v30 = *v12;
  int v31 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v30 + 8));
  uint64_t v33 = v31;
  *int v31 = v30;
  if (v30)
  {
    uint64_t v34 = v31 + 6;
    uint64_t v35 = 24 * v30;
    uint64_t v36 = v12 + 6;
    do
    {
      *((unsigned char *)v34 - 16) = 0;
      uint64_t v32 = v34 - 4;
      *uint64_t v34 = -1;
      uint64_t v37 = *v36;
      if (v37 != -1)
      {
        ((void (*)(long double **, _DWORD *, unsigned int *))off_1ECABEE88[v37])(&v55, v32, v36 - 4);
        *uint64_t v34 = v37;
      }
      v34 += 6;
      v36 += 6;
      v35 -= 24;
    }
    while (v35);
  }
  *(void *)(v49 + 8) = v33;
  *(_DWORD *)(v49 + 24) = 8;
  *(_DWORD *)(v49 + 32) = 0;
  if (v53 != -1) {
    ((void (*)(long double **, long double *))off_1ECABEC60[v53])(&v55, __y);
  }
  unsigned int v53 = -1;
  if (v51 != -1) {
    ((void (*)(long double **, long double *))off_1ECABEC60[v51])(&v55, __x);
  }
  uint64_t v38 = *v12;
  if (v38)
  {
    uint64_t v39 = 24 * v38;
    int v40 = v12 + 6;
    do
    {
      uint64_t v32 = v40 - 4;
      uint64_t v41 = *v40;
      if (v41 != -1) {
        ((void (*)(long double *, _DWORD *))off_1ECABEC60[v41])(__x, v32);
      }
      *int v40 = -1;
      v40 += 6;
      v39 -= 24;
    }
    while (v39);
  }
  WTF::fastFree((WTF *)v12, v32);
  uint64_t v42 = v62;
  if (v62 != -1) {
    goto LABEL_85;
  }
LABEL_86:
  unsigned int v62 = -1;
  if (v60 != -1) {
    ((void (*)(long double *, void *))off_1ECABEC60[v60])(__x, v59);
  }
}

uint64_t WGSL::constantQuantizeToF16@<X0>(float **a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x182692514);
  }
  LOBYTE(v64[0]) = 0;
  int v65 = -1;
  uint64_t v4 = *((unsigned int *)v3 + 6);
  if (v4 == -1) {
    goto LABEL_109;
  }
  uint64_t v5 = off_1ECABEE88[v4];
  ((void (*)(uint64_t **, void *, float *))v5)(&v66, v64, v3 + 2);
  int v65 = v4;
  LOBYTE(v66) = 0;
  int v68 = -1;
  ((void (*)(uint64_t *, uint64_t **, void *))v5)(&v60, &v66, v64);
  unsigned int v6 = 0;
  int v68 = v4;
  if (v4 == 8)
  {
    if (v66) {
      unsigned int v6 = *(_DWORD *)v66;
    }
    else {
      unsigned int v6 = 0;
    }
  }
  int v7 = (WTF::String *)((uint64_t (*)(uint64_t *, uint64_t **))off_1ECABEC60[v4])(&v60, &v66);
  if (!v6)
  {
    if (!*((_DWORD *)v3 + 6))
    {
      _S0 = v3[2];
      if (_S0 <= 65504.0 && _S0 >= -65504.0)
      {
        int v50 = 0;
        __asm
        {
          FCVT            H0, S0
          FCVT            S0, H0
        }
        LODWORD(v67) = _S0;
        int v69 = 0;
        int v70 = 0;
LABEL_98:
        *(unsigned char *)(a2 + 8) = 0;
        uint64_t v55 = a2 + 8;
        *(_DWORD *)(v55 + 24) = -1;
        uint64_t result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t *))off_1ECABED78[v50])(&v60, v55, &v67);
        *(_DWORD *)(v55 + 24) = v50;
        if (v70 != -1) {
          uint64_t result = ((uint64_t (*)(uint64_t *, uint64_t *))off_1ECABED68[v70])(&v60, &v67);
        }
        goto LABEL_100;
      }
      WTF::String::number(v56, v7, _S0);
      if (v56[0])
      {
        int v43 = *(_DWORD *)(v56[0] + 4);
        if (v43 < 0) {
          goto LABEL_112;
        }
        _VF = __OFADD__(v43, 31);
        int v44 = v43 + 31;
        if (_VF) {
          goto LABEL_112;
        }
      }
      else
      {
        int v44 = 31;
        if (v42) {
          goto LABEL_112;
        }
      }
      if (!__OFADD__(v44, 6))
      {
        BOOL v53 = !v56[0] || (*(unsigned char *)(v56[0] + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v44 + 6), v53, (int8x16_t *)"value ", 6u, v56[0], (int8x16_t *)" cannot be represented as 'f16'", 0x1Fu, &v60);
        if (v60)
        {
          uint64_t v67 = v60;
          int v70 = 1;
          uint64_t v60 = 0;
          uint64_t v54 = (_DWORD *)v56[0];
          v56[0] = 0;
          if (v54)
          {
            if (*v54 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v54 -= 2;
            }
          }
          int v50 = 1;
          goto LABEL_98;
        }
LABEL_113:
        __break(0xC471u);
        JUMPOUT(0x1826924D4);
      }
LABEL_112:
      uint64_t v60 = 0;
      goto LABEL_113;
    }
LABEL_109:
    __break(0xC471u);
    JUMPOUT(0x182692578);
  }
  uint64_t v8 = v6;
  uint64_t v9 = 24 * v6;
  unsigned int v10 = (unsigned int *)WTF::fastMalloc((WTF *)(v9 + 8));
  *unsigned int v10 = v6;
  uint64_t v11 = (uint64_t *)(v10 + 2);
  uint64_t v12 = 6;
  bzero(v10 + 2, 24 * ((v9 - 24) / 0x18uLL) + 24);
  unint64_t v15 = 0;
  LODWORD(v56[0]) = 0;
  unsigned int v57 = 0;
  do
  {
    if (v65 == 8)
    {
      if (v15 >= *(unsigned int *)v64[0]) {
        goto LABEL_113;
      }
      uint64_t v14 = v64[0] + v12 * 4 - 16;
      uint64_t v16 = *(unsigned int *)(v64[0] + v12 * 4);
      uint64_t v17 = v57;
      if (v57 == -1)
      {
        if (v16 == -1) {
          goto LABEL_21;
        }
      }
      else if (v16 == -1)
      {
        goto LABEL_107;
      }
      unsigned int v66 = v56;
      uint64_t v13 = (WTF::String *)((uint64_t (*)(uint64_t **, uint64_t *, uint64_t))off_1ECABEEE0[v16])(&v66, v56, v14);
    }
    else
    {
      uint64_t v17 = v57;
      if (v57 == -1)
      {
        if (v65 == -1) {
          goto LABEL_108;
        }
      }
      else if (v65 == -1)
      {
        goto LABEL_107;
      }
      unsigned int v66 = v56;
      uint64_t v13 = (WTF::String *)((uint64_t (*)(uint64_t **, uint64_t *, void *))off_1ECABEEE0[v65])(&v66, v56, v64);
    }
LABEL_21:
    if (v57) {
      goto LABEL_108;
    }
    _S0 = v56[0];
    if (*(float *)v56 > 65504.0 || *(float *)v56 < -65504.0)
    {
      WTF::String::number(&v58, v13, *(float *)v56);
      if (v58)
      {
        int v21 = *(_DWORD *)(v58 + 4);
        if (v21 < 0 || (_VF = __OFADD__(v21, 31), int v22 = v21 + 31, _VF))
        {
LABEL_110:
          uint64_t v59 = 0;
LABEL_111:
          __break(0xC471u);
          JUMPOUT(0x182692588);
        }
      }
      else
      {
        int v22 = 31;
        if (_VF) {
          goto LABEL_110;
        }
      }
      if (__OFADD__(v22, 6)) {
        goto LABEL_110;
      }
      BOOL v28 = !v58 || (*(unsigned char *)(v58 + 16) & 4) != 0;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v22 + 6), v28, (int8x16_t *)"value ", 6u, v58, (int8x16_t *)" cannot be represented as 'f16'", 0x1Fu, &v59);
      if (!v59) {
        goto LABEL_111;
      }
      uint64_t v67 = v59;
      int v70 = 1;
      uint64_t v29 = (_DWORD *)v58;
      uint64_t v58 = 0;
      uint64_t v59 = 0;
      if (v29)
      {
        if (*v29 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v29 -= 2;
        }
      }
      uint64_t v23 = 1;
    }
    else
    {
      uint64_t v23 = 0;
      __asm
      {
        FCVT            H0, S0
        FCVT            S0, H0
      }
      LODWORD(v67) = _S0;
      int v69 = 0;
      int v70 = 0;
    }
    LOBYTE(v61[0]) = 0;
    unsigned int v63 = -1;
    uint64_t v13 = (WTF::String *)((uint64_t (*)(uint64_t *, void *, uint64_t *))off_1ECABED78[v23])(&v59, v61, &v67);
    unsigned int v63 = v23;
    if (v70 != -1)
    {
      uint64_t v13 = (WTF::String *)((uint64_t (*)(uint64_t *, uint64_t *))off_1ECABED68[v70])(&v59, &v67);
      uint64_t v23 = v63;
    }
    if (v23)
    {
      if (v23 != 1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_107:
        ((void (*)(uint64_t **, uint64_t *, uint64_t))off_1ECABEC60[v17])(&v66, v56, v14);
        unsigned int v57 = -1;
LABEL_108:
        __break(0xC471u);
        JUMPOUT(0x182692558);
      }
      uint64_t v31 = v61[0];
      if (v61[0]) {
        *(_DWORD *)v61[0] += 2;
      }
      *(void *)(a2 + 8) = v31;
      *(_DWORD *)(a2 + 32) = 1;
    }
    else
    {
      if (v15 >= *v10)
      {
        __break(0xC471u);
        JUMPOUT(0x1826924F4);
      }
      uint64_t v32 = v10[v12];
      if (v32 == -1)
      {
        if (v62 == -1) {
          goto LABEL_57;
        }
      }
      else if (v62 == -1)
      {
        uint64_t v13 = (WTF::String *)((uint64_t (*)(uint64_t **, uint64_t *))off_1ECABEC60[v32])(&v66, v11);
        v10[v12] = -1;
        goto LABEL_57;
      }
      unsigned int v66 = v11;
      uint64_t v13 = (WTF::String *)((uint64_t (*)(uint64_t **, uint64_t *, void *))off_1ECABEF38[v62])(&v66, v11, v61);
    }
LABEL_57:
    if (v63 != -1) {
      uint64_t v13 = (WTF::String *)((uint64_t (*)(uint64_t **, void *))off_1ECABED68[v63])(&v66, v61);
    }
    if (v23) {
      goto LABEL_78;
    }
    ++v15;
    v11 += 3;
    v12 += 6;
  }
  while (v8 != v15);
  uint64_t v33 = *v10;
  uint64_t v34 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v33 + 8));
  uint64_t v35 = v34;
  *uint64_t v34 = v33;
  if (v33)
  {
    uint64_t v36 = v34 + 6;
    uint64_t v37 = 24 * v33;
    uint64_t v38 = v10 + 6;
    do
    {
      *((unsigned char *)v36 - 16) = 0;
      uint64_t v30 = v36 - 4;
      *uint64_t v36 = -1;
      uint64_t v39 = *v38;
      if (v39 != -1)
      {
        ((void (*)(uint64_t **, _DWORD *, unsigned int *))off_1ECABEE88[v39])(&v66, v30, v38 - 4);
        *uint64_t v36 = v39;
      }
      v36 += 6;
      v38 += 6;
      v37 -= 24;
    }
    while (v37);
  }
  *(void *)(a2 + 8) = v35;
  *(_DWORD *)(a2 + 24) = 8;
  *(_DWORD *)(a2 + 32) = 0;
LABEL_78:
  if (v57 != -1) {
    ((void (*)(uint64_t **, uint64_t *))off_1ECABEC60[v57])(&v66, v56);
  }
  uint64_t v45 = *v10;
  if (v45)
  {
    uint64_t v46 = 24 * v45;
    uint64_t v47 = v10 + 6;
    do
    {
      uint64_t v30 = v47 - 4;
      uint64_t v48 = *v47;
      if (v48 != -1) {
        ((void (*)(uint64_t **, _DWORD *))off_1ECABEC60[v48])(&v66, v30);
      }
      *uint64_t v47 = -1;
      v47 += 6;
      v46 -= 24;
    }
    while (v46);
  }
  uint64_t result = WTF::fastFree((WTF *)v10, v30);
LABEL_100:
  if (v65 != -1) {
    return ((uint64_t (*)(uint64_t **, void *))off_1ECABEC60[v65])(&v66, v64);
  }
  return result;
}

uint64_t WGSL::constantRadians@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x182692AA0);
  }
  LOBYTE(v51[0]) = 0;
  unsigned int v52 = -1;
  uint64_t v4 = v3[6];
  if (v4 == -1) {
    goto LABEL_60;
  }
  uint64_t v5 = (double *)(v3 + 2);
  unsigned int v6 = off_1ECABEE88[v4];
  ((void (*)(double **, void *, _DWORD *))v6)(&v46, v51, v3 + 2);
  unsigned int v52 = v4;
  LOBYTE(v46) = 0;
  int v48 = -1;
  ((void (*)(double *, double **, void *))v6)(v43, &v46, v51);
  unsigned int v7 = 0;
  int v48 = v4;
  if (v4 == 8)
  {
    if (v46) {
      unsigned int v7 = *(_DWORD *)v46;
    }
    else {
      unsigned int v7 = 0;
    }
  }
  uint64_t result = ((uint64_t (*)(double *, double **))off_1ECABEC60[v4])(v43, &v46);
  if (!v7)
  {
    int v37 = v3[6];
    switch(v37)
    {
      case 2:
        *(double *)(a2 + 8) = *v5 * 0.0174532925;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v36 = v52;
        if (v52 != -1) {
          return ((uint64_t (*)(double **, void *))off_1ECABEC60[v36])(&v46, v51);
        }
        return result;
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            D0, H0 }
        _D0 = _D0 * 0.0174532925;
        __asm { FCVT            H0, D0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v36 = v52;
        if (v52 != -1) {
          return ((uint64_t (*)(double **, void *))off_1ECABEC60[v36])(&v46, v51);
        }
        return result;
      case 0:
        float v38 = *(float *)v5 * 0.0174532925;
        *(float *)(a2 + 8) = v38;
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v36 = v52;
        if (v52 != -1) {
          return ((uint64_t (*)(void, void))off_1ECABEC60[v36])(&v46, v51);
        }
        return result;
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x182692B00);
  }
  uint64_t v42 = a2;
  uint64_t v9 = 24 * v7;
  unsigned int v10 = (unsigned int *)WTF::fastMalloc((WTF *)(v9 + 8));
  *unsigned int v10 = v7;
  uint64_t v11 = 6;
  bzero(v10 + 2, 24 * ((v9 - 24) / 0x18uLL) + 24);
  unint64_t v13 = 0;
  LODWORD(v43[0]) = 0;
  unsigned int v44 = 0;
  do
  {
    if (v52 == 8)
    {
      if (v13 >= *(unsigned int *)v51[0])
      {
        __break(0xC471u);
        JUMPOUT(0x182692A80);
      }
      uint64_t v12 = v51[0] + v11 * 4 - 16;
      uint64_t v14 = *(unsigned int *)(v51[0] + v11 * 4);
      uint64_t v15 = v44;
      if (v44 == -1)
      {
        if (v14 == -1) {
          goto LABEL_22;
        }
      }
      else if (v14 == -1)
      {
        goto LABEL_58;
      }
      uint64_t v46 = v43;
      ((void (*)(double **, double *, uint64_t))off_1ECABEEE0[v14])(&v46, v43, v12);
    }
    else
    {
      uint64_t v15 = v44;
      if (v44 == -1)
      {
        if (v52 == -1) {
          goto LABEL_59;
        }
      }
      else if (v52 == -1)
      {
LABEL_58:
        ((void (*)(double **, double *, uint64_t))off_1ECABEC60[v15])(&v46, v43, v12);
        unsigned int v44 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x182692AE0);
      }
      uint64_t v46 = v43;
      ((void (*)(double **, double *, void *))off_1ECABEEE0[v52])(&v46, v43, v51);
    }
LABEL_22:
    if (v44)
    {
      if (v44 == 1)
      {
        _H0 = LOWORD(v43[0]);
        __asm { FCVT            D0, H0 }
        _D0 = _D0 * 0.0174532925;
        __asm { FCVT            H0, D0 }
        LOWORD(v47) = LOWORD(_D0);
      }
      else
      {
        if (v44 != 2) {
          goto LABEL_59;
        }
        double v47 = v43[0] * 0.0174532925;
      }
    }
    else
    {
      float v16 = *(float *)v43 * 0.0174532925;
      *(float *)&double v47 = v16;
    }
    unsigned int v49 = v44;
    int v50 = 0;
    if (v13 >= *v10)
    {
      __break(0xC471u);
      JUMPOUT(0x182692A60);
    }
    uint64_t v45 = (uint64_t)&v10[v11 - 4];
    ((void (*)(uint64_t *))off_1ECABEF38[v44])(&v45);
    if (v50 != -1) {
      ((void (*)(uint64_t *, double *))off_1ECABED68[v50])(&v45, &v47);
    }
    ++v13;
    v11 += 6;
  }
  while (v7 != v13);
  uint64_t v24 = *v10;
  int v25 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v24 + 8));
  int v27 = v25;
  _DWORD *v25 = v24;
  if (v24)
  {
    BOOL v28 = v25 + 6;
    uint64_t v29 = 24 * v24;
    uint64_t v30 = v10 + 6;
    do
    {
      *((unsigned char *)v28 - 16) = 0;
      uint64_t v26 = v28 - 4;
      *BOOL v28 = -1;
      uint64_t v31 = *v30;
      if (v31 != -1)
      {
        ((void (*)(double **, _DWORD *, unsigned int *))off_1ECABEE88[v31])(&v46, v26, v30 - 4);
        *BOOL v28 = v31;
      }
      v28 += 6;
      v30 += 6;
      v29 -= 24;
    }
    while (v29);
  }
  *(void *)(v42 + 8) = v27;
  *(_DWORD *)(v42 + 24) = 8;
  *(_DWORD *)(v42 + 32) = 0;
  if (v44 != -1) {
    ((void (*)(double **, double *))off_1ECABEC60[v44])(&v46, v43);
  }
  uint64_t v32 = *v10;
  if (v32)
  {
    uint64_t v33 = 24 * v32;
    uint64_t v34 = v10 + 6;
    do
    {
      uint64_t v26 = v34 - 4;
      uint64_t v35 = *v34;
      if (v35 != -1) {
        ((void (*)(double **, _DWORD *))off_1ECABEC60[v35])(&v46, v26);
      }
      *uint64_t v34 = -1;
      v34 += 6;
      v33 -= 24;
    }
    while (v33);
  }
  uint64_t result = WTF::fastFree((WTF *)v10, v26);
  uint64_t v36 = v52;
  if (v52 != -1) {
    return ((uint64_t (*)(void, void))off_1ECABEC60[v36])(&v46, v51);
  }
  return result;
}

uint64_t WGSL::constantReflect@<X0>(_DWORD *a1@<X0>, int **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v191 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  int v5 = **a2;
  if (!v5)
  {
LABEL_361:
    __break(0xC471u);
    JUMPOUT(0x182694890);
  }
  if (v5 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1826948B0);
  }
  if (a1[12] != 1) {
    goto LABEL_360;
  }
  unsigned int v7 = *(const WGSL::Type **)a1;
  if (*(_DWORD *)(*(void *)a1 + 48)) {
    goto LABEL_360;
  }
  int v8 = *(unsigned __int8 *)v7;
  v166 = v4 + 2;
  if (v8 == 3)
  {
    LOBYTE(v183[0]) = 0;
    int v184 = -1;
    uint64_t v16 = v4[12];
    if (v16 != -1)
    {
      ((void (*)(uint64_t *, void *, int *))off_1ECABEE88[v16])(&v187, v183, v4 + 8);
      int v184 = v16;
    }
    v185[0] = 0;
    int v186 = -1;
    uint64_t v17 = v4[6];
    if (v17 != -1)
    {
      ((void (*)(uint64_t *, unsigned char *, int *))off_1ECABEE88[v17])(&v187, v185, v4 + 2);
      int v186 = v17;
    }
    uint64_t v18 = WTF::fastMalloc((WTF *)0x38);
    uint64_t v19 = (unsigned int *)v18;
    *(_OWORD *)(v18 + 8) = 0u;
    *(_DWORD *)uint64_t v18 = 2;
    *(_OWORD *)(v18 + 24) = 0u;
    *(_OWORD *)(v18 + 40) = 0u;
    uint64_t v179 = v18;
    if (v184 == -1)
    {
      *(_DWORD *)(v18 + 24) = -1;
      int v21 = (unsigned int *)(v18 + 32);
      int v22 = v186;
      if (v186 == -1)
      {
        unsigned int v20 = 0;
LABEL_40:
        ((void (*)(uint64_t *, unsigned int *))off_1ECABEC60[v20])(&v187, v21);
        v19[12] = -1;
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v187 = v18 + 8;
      ((void (*)(uint64_t *))off_1ECABEEE0[v184])(&v187);
      if (*v19 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1826948F0);
      }
      unsigned int v20 = v19[12];
      int v21 = v19 + 8;
      int v22 = v186;
      if (v20 == -1)
      {
        if (v186 == -1) {
          goto LABEL_64;
        }
      }
      else if (v186 == -1)
      {
        goto LABEL_40;
      }
    }
    uint64_t v187 = (uint64_t)v21;
    ((void (*)(uint64_t *))off_1ECABEEE0[v22])(&v187);
LABEL_64:
    WGSL::constantDot(v7, (uint64_t)&v187);
    uint64_t v39 = *v19;
    if (v39)
    {
      uint64_t v40 = 24 * v39;
      uint64_t v41 = v19 + 6;
      do
      {
        float v38 = v41 - 4;
        uint64_t v42 = *v41;
        if (v42 != -1) {
          ((void (*)(uint64_t *, _DWORD *))off_1ECABEC60[v42])(&v175, v38);
        }
        *uint64_t v41 = -1;
        v41 += 6;
        v40 -= 24;
      }
      while (v40);
    }
    WTF::fastFree((WTF *)v19, v38);
    if (v186 != -1) {
      ((void (*)(uint64_t *, unsigned char *))off_1ECABEC60[v186])(&v175, v185);
    }
    int v186 = -1;
    if (v184 != -1) {
      ((void (*)(uint64_t *, void *))off_1ECABEC60[v184])(&v175, v183);
    }
    int v43 = v190;
    if (v190) {
      goto LABEL_88;
    }
    v172[0] = 0;
    int v173 = -1;
    uint64_t v44 = v189;
    if (v189 == -1)
    {
      v183[0] = 0x4000000000000000;
      int v184 = 2;
      v185[0] = 0;
      int v186 = -1;
    }
    else
    {
      ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v189])(v183, v172, v188);
      int v173 = v44;
      v183[0] = 0x4000000000000000;
      int v184 = 2;
      v185[0] = 0;
      int v186 = -1;
      ((void (*)(uint64_t *, unsigned char *, unsigned char *))off_1ECABEE88[v44])(&v175, v185, v172);
      int v186 = v44;
    }
    uint64_t v59 = WTF::fastMalloc((WTF *)0x38);
    uint64_t v60 = (unsigned int *)v59;
    *(_OWORD *)(v59 + 8) = 0u;
    *(_DWORD *)uint64_t v59 = 2;
    *(_OWORD *)(v59 + 24) = 0u;
    *(_OWORD *)(v59 + 40) = 0u;
    v170[0] = (int *)v59;
    if (v184 == -1)
    {
      *(_DWORD *)(v59 + 24) = -1;
      int v62 = (unsigned int *)(v59 + 32);
      int v63 = v186;
      if (v186 == -1)
      {
        unsigned int v61 = 0;
LABEL_116:
        ((void (*)(uint64_t *, unsigned int *))off_1ECABEC60[v61])(&v175, v62);
        v60[12] = -1;
        goto LABEL_126;
      }
    }
    else
    {
      uint64_t v175 = v59 + 8;
      ((void (*)(uint64_t *))off_1ECABEEE0[v184])(&v175);
      if (*v60 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x182694950);
      }
      unsigned int v61 = v60[12];
      int v62 = v60 + 8;
      int v63 = v186;
      if (v61 == -1)
      {
        if (v186 == -1) {
          goto LABEL_126;
        }
      }
      else if (v186 == -1)
      {
        goto LABEL_116;
      }
    }
    uint64_t v175 = (uint64_t)v62;
    ((void (*)(uint64_t *))off_1ECABEEE0[v63])(&v175);
LABEL_126:
    WGSL::constantMultiply((uint64_t)a1, v170, (uint64_t)&v179);
    uint64_t v72 = *v60;
    if (v72)
    {
      uint64_t v73 = 24 * v72;
      unsigned int v74 = v60 + 6;
      do
      {
        uint64_t v71 = v74 - 4;
        uint64_t v75 = *v74;
        if (v75 != -1) {
          ((void (*)(uint64_t *, _DWORD *))off_1ECABEC60[v75])(&v175, v71);
        }
        *unsigned int v74 = -1;
        v74 += 6;
        v73 -= 24;
      }
      while (v73);
    }
    WTF::fastFree((WTF *)v60, v71);
    if (v186 != -1) {
      ((void (*)(uint64_t *, unsigned char *))off_1ECABEC60[v186])(&v175, v185);
    }
    int v186 = -1;
    if (v184 != -1) {
      ((void (*)(uint64_t *, void *))off_1ECABEC60[v184])(&v175, v183);
    }
    int v76 = v182;
    if (v182) {
      goto LABEL_150;
    }
    LOBYTE(v170[0]) = 0;
    int v171 = -1;
    uint64_t v77 = v181;
    if (v181 == -1)
    {
      LOBYTE(v183[0]) = 0;
      int v184 = -1;
    }
    else
    {
      ((void (*)(void *, int **, void *))off_1ECABECB8[v181])(v183, v170, v180);
      int v171 = v77;
      LOBYTE(v183[0]) = 0;
      int v184 = -1;
      ((void (*)(void *, void *, int **))off_1ECABEE88[v77])(v168, v183, v170);
      int v184 = v77;
    }
    v185[0] = 0;
    int v186 = -1;
    uint64_t v86 = v4[12];
    if (v86 != -1)
    {
      ((void (*)(void *, unsigned char *, int *))off_1ECABEE88[v86])(v168, v185, v4 + 8);
      int v186 = v86;
    }
    uint64_t v87 = WTF::fastMalloc((WTF *)0x38);
    v88 = (unsigned int *)v87;
    *(_OWORD *)(v87 + 8) = 0u;
    *(_DWORD *)uint64_t v87 = 2;
    *(_OWORD *)(v87 + 24) = 0u;
    *(_OWORD *)(v87 + 40) = 0u;
    v174 = (int *)v87;
    if (v184 == -1)
    {
      *(_DWORD *)(v87 + 24) = -1;
      v90 = (unsigned int *)(v87 + 32);
      int v91 = v186;
      if (v186 == -1)
      {
        unsigned int v89 = 0;
LABEL_174:
        ((void (*)(void *, unsigned int *))off_1ECABEC60[v89])(v168, v90);
        v88[12] = -1;
        goto LABEL_208;
      }
    }
    else
    {
      v168[0] = v87 + 8;
      ((void (*)(void *))off_1ECABEEE0[v184])(v168);
      if (*v88 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x182694990);
      }
      unsigned int v89 = v88[12];
      v90 = v88 + 8;
      int v91 = v186;
      if (v89 == -1)
      {
        if (v186 == -1) {
          goto LABEL_208;
        }
      }
      else if (v186 == -1)
      {
        goto LABEL_174;
      }
    }
    v168[0] = v90;
    ((void (*)(void *))off_1ECABEEE0[v91])(v168);
LABEL_208:
    WGSL::constantMultiply((uint64_t)a1, &v174, (uint64_t)&v175);
    uint64_t v112 = *v88;
    if (v112)
    {
      uint64_t v113 = 24 * v112;
      v114 = v88 + 6;
      do
      {
        v111 = v114 - 4;
        uint64_t v115 = *v114;
        if (v115 != -1) {
          ((void (*)(void *, _DWORD *))off_1ECABEC60[v115])(v168, v111);
        }
        _DWORD *v114 = -1;
        v114 += 6;
        v113 -= 24;
      }
      while (v113);
    }
    WTF::fastFree((WTF *)v88, v111);
    if (v186 != -1) {
      ((void (*)(void *, unsigned char *))off_1ECABEC60[v186])(v168, v185);
    }
    int v186 = -1;
    if (v184 != -1) {
      ((void (*)(void *, void *))off_1ECABEC60[v184])(v168, v183);
    }
    int v116 = v178;
    if (v178) {
      goto LABEL_241;
    }
    LOBYTE(v168[0]) = 0;
    int v169 = -1;
    int v117 = v177;
    if (v177 != -1)
    {
      ((void (*)(void *, void *, void *))off_1ECABECB8[v177])(v183, v168, v176);
      int v169 = v117;
    }
    LOBYTE(v183[0]) = 0;
    int v184 = -1;
    uint64_t v118 = v4[6];
    if (v118 != -1)
    {
      ((void (*)(int **, void *, _DWORD *))off_1ECABEE88[v118])(&v174, v183, v166);
      int v184 = v118;
      int v117 = v169;
    }
    v185[0] = 0;
    int v186 = -1;
    if (v117 != -1)
    {
      ((void (*)(int **, unsigned char *, void *))off_1ECABEE88[v117])(&v174, v185, v168);
      int v186 = v117;
    }
    uint64_t v119 = WTF::fastMalloc((WTF *)0x38);
    v120 = (unsigned int *)v119;
    *(_OWORD *)(v119 + 8) = 0u;
    *(_DWORD *)uint64_t v119 = 2;
    *(_OWORD *)(v119 + 24) = 0u;
    *(_OWORD *)(v119 + 40) = 0u;
    v167 = (int *)v119;
    if (v184 == -1)
    {
      *(_DWORD *)(v119 + 24) = -1;
      v122 = (int *)(v119 + 32);
      int v123 = v186;
      if (v186 == -1)
      {
        unsigned int v121 = 0;
LABEL_285:
        ((void (*)(int **, int *))off_1ECABEC60[v121])(&v174, v122);
        v120[12] = -1;
        goto LABEL_294;
      }
    }
    else
    {
      v174 = (int *)(v119 + 8);
      ((void (*)(int **))off_1ECABEEE0[v184])(&v174);
      if (*v120 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1826949F0);
      }
      unsigned int v121 = v120[12];
      v122 = (int *)(v120 + 8);
      int v123 = v186;
      if (v121 == -1)
      {
        if (v186 == -1) {
          goto LABEL_294;
        }
      }
      else if (v186 == -1)
      {
        goto LABEL_285;
      }
    }
    v174 = v122;
    ((void (*)(int **))off_1ECABEEE0[v123])(&v174);
LABEL_294:
    WGSL::constantMinus((uint64_t)a1, &v167, a3);
    uint64_t v152 = *v120;
    if (v152)
    {
      uint64_t v153 = 24 * v152;
      v154 = v120 + 6;
      do
      {
        v151 = v154 - 4;
        uint64_t v155 = *v154;
        if (v155 != -1) {
          ((void (*)(int **, _DWORD *))off_1ECABEC60[v155])(&v174, v151);
        }
        _DWORD *v154 = -1;
        v154 += 6;
        v153 -= 24;
      }
      while (v153);
    }
LABEL_306:
    uint64_t result = WTF::fastFree((WTF *)v120, v151);
    if (v186 != -1) {
      uint64_t result = ((uint64_t (*)(int **, unsigned char *))off_1ECABEC60[v186])(&v174, v185);
    }
    int v186 = -1;
    if (v184 != -1) {
      uint64_t result = ((uint64_t (*)(int **, void *))off_1ECABEC60[v184])(&v174, v183);
    }
    if (v169 != -1) {
      uint64_t result = ((uint64_t (*)(void *, void *))off_1ECABEC60[v169])(v183, v168);
    }
    int v130 = v178;
    if (v178 == -1)
    {
LABEL_314:
      if (v171 != -1) {
        uint64_t result = ((uint64_t (*)(void *, int **))off_1ECABEC60[v171])(v183, v170);
      }
      int v84 = v182;
      if (v182 == -1)
      {
LABEL_318:
        if (v173 != -1) {
          uint64_t result = ((uint64_t (*)(void *, unsigned char *))off_1ECABEC60[v173])(v183, v172);
        }
        int v51 = v190;
        if (v190 == -1) {
          return result;
        }
        return ((uint64_t (*)(void *, void *))off_1ECABED68[v51])(v183, v188);
      }
LABEL_317:
      uint64_t result = ((uint64_t (*)(void *, void *))off_1ECABED68[v84])(v183, v180);
      goto LABEL_318;
    }
LABEL_313:
    uint64_t result = ((uint64_t (*)(void *, void *))off_1ECABED68[v130])(v183, v176);
    goto LABEL_314;
  }
  if (v8 == 4)
  {
    LOBYTE(v183[0]) = 0;
    int v184 = -1;
    uint64_t v23 = v4[12];
    if (v23 != -1)
    {
      ((void (*)(uint64_t *, void *, int *))off_1ECABEE88[v23])(&v187, v183, v4 + 8);
      int v184 = v23;
    }
    v185[0] = 0;
    int v186 = -1;
    uint64_t v24 = v4[6];
    if (v24 != -1)
    {
      ((void (*)(uint64_t *, unsigned char *, int *))off_1ECABEE88[v24])(&v187, v185, v4 + 2);
      int v186 = v24;
    }
    uint64_t v25 = WTF::fastMalloc((WTF *)0x38);
    uint64_t v26 = (unsigned int *)v25;
    *(_OWORD *)(v25 + 8) = 0u;
    *(_DWORD *)uint64_t v25 = 2;
    *(_OWORD *)(v25 + 24) = 0u;
    *(_OWORD *)(v25 + 40) = 0u;
    uint64_t v179 = v25;
    if (v184 == -1)
    {
      *(_DWORD *)(v25 + 24) = -1;
      BOOL v28 = (unsigned int *)(v25 + 32);
      int v29 = v186;
      if (v186 == -1)
      {
        unsigned int v27 = 0;
LABEL_43:
        ((void (*)(uint64_t *, unsigned int *))off_1ECABEC60[v27])(&v187, v28);
        v26[12] = -1;
        goto LABEL_78;
      }
    }
    else
    {
      uint64_t v187 = v25 + 8;
      ((void (*)(uint64_t *))off_1ECABEEE0[v184])(&v187);
      if (*v26 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x182694910);
      }
      unsigned int v27 = v26[12];
      BOOL v28 = v26 + 8;
      int v29 = v186;
      if (v27 == -1)
      {
        if (v186 == -1) {
          goto LABEL_78;
        }
      }
      else if (v186 == -1)
      {
        goto LABEL_43;
      }
    }
    uint64_t v187 = (uint64_t)v28;
    ((void (*)(uint64_t *))off_1ECABEEE0[v29])(&v187);
LABEL_78:
    WGSL::constantDot(v7, (uint64_t)&v187);
    uint64_t v46 = *v26;
    if (v46)
    {
      uint64_t v47 = 24 * v46;
      int v48 = v26 + 6;
      do
      {
        uint64_t v45 = v48 - 4;
        uint64_t v49 = *v48;
        if (v49 != -1) {
          ((void (*)(uint64_t *, _DWORD *))off_1ECABEC60[v49])(&v175, v45);
        }
        *int v48 = -1;
        v48 += 6;
        v47 -= 24;
      }
      while (v47);
    }
    WTF::fastFree((WTF *)v26, v45);
    if (v186 != -1) {
      ((void (*)(uint64_t *, unsigned char *))off_1ECABEC60[v186])(&v175, v185);
    }
    int v186 = -1;
    if (v184 != -1) {
      ((void (*)(uint64_t *, void *))off_1ECABEC60[v184])(&v175, v183);
    }
    int v43 = v190;
    if (v190)
    {
LABEL_88:
      if (v43 != 1) {
        goto LABEL_360;
      }
      uint64_t v50 = v188[0];
      if (v188[0]) {
        *(_DWORD *)v188[0] += 2;
      }
      *(void *)(a3 + 8) = v50;
      int v51 = 1;
      *(_DWORD *)(a3 + 32) = 1;
      return ((uint64_t (*)(void *, void *))off_1ECABED68[v51])(v183, v188);
    }
    v172[0] = 0;
    int v173 = -1;
    uint64_t v52 = v189;
    if (v189 == -1)
    {
      LOWORD(v183[0]) = COERCE_UNSIGNED_INT(2.0);
      int v184 = 1;
      v185[0] = 0;
      int v186 = -1;
    }
    else
    {
      ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v189])(v183, v172, v188);
      int v173 = v52;
      LOWORD(v183[0]) = COERCE_UNSIGNED_INT(2.0);
      int v184 = 1;
      v185[0] = 0;
      int v186 = -1;
      ((void (*)(uint64_t *, unsigned char *, unsigned char *))off_1ECABEE88[v52])(&v175, v185, v172);
      int v186 = v52;
    }
    uint64_t v64 = WTF::fastMalloc((WTF *)0x38);
    int v65 = (unsigned int *)v64;
    *(_OWORD *)(v64 + 8) = 0u;
    *(_DWORD *)uint64_t v64 = 2;
    *(_OWORD *)(v64 + 24) = 0u;
    *(_OWORD *)(v64 + 40) = 0u;
    v170[0] = (int *)v64;
    if (v184 == -1)
    {
      *(_DWORD *)(v64 + 24) = -1;
      uint64_t v67 = (unsigned int *)(v64 + 32);
      int v68 = v186;
      if (v186 == -1)
      {
        unsigned int v66 = 0;
LABEL_119:
        ((void (*)(uint64_t *, unsigned int *))off_1ECABEC60[v66])(&v175, v67);
        v65[12] = -1;
        goto LABEL_140;
      }
    }
    else
    {
      uint64_t v175 = v64 + 8;
      ((void (*)(uint64_t *))off_1ECABEEE0[v184])(&v175);
      if (*v65 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x182694970);
      }
      unsigned int v66 = v65[12];
      uint64_t v67 = v65 + 8;
      int v68 = v186;
      if (v66 == -1)
      {
        if (v186 == -1) {
          goto LABEL_140;
        }
      }
      else if (v186 == -1)
      {
        goto LABEL_119;
      }
    }
    uint64_t v175 = (uint64_t)v67;
    ((void (*)(uint64_t *))off_1ECABEEE0[v68])(&v175);
LABEL_140:
    WGSL::constantMultiply((uint64_t)a1, v170, (uint64_t)&v179);
    uint64_t v79 = *v65;
    if (v79)
    {
      uint64_t v80 = 24 * v79;
      v81 = v65 + 6;
      do
      {
        unsigned int v78 = v81 - 4;
        uint64_t v82 = *v81;
        if (v82 != -1) {
          ((void (*)(uint64_t *, _DWORD *))off_1ECABEC60[v82])(&v175, v78);
        }
        _DWORD *v81 = -1;
        v81 += 6;
        v80 -= 24;
      }
      while (v80);
    }
    WTF::fastFree((WTF *)v65, v78);
    if (v186 != -1) {
      ((void (*)(uint64_t *, unsigned char *))off_1ECABEC60[v186])(&v175, v185);
    }
    int v186 = -1;
    if (v184 != -1) {
      ((void (*)(uint64_t *, void *))off_1ECABEC60[v184])(&v175, v183);
    }
    int v76 = v182;
    if (v182)
    {
LABEL_150:
      if (v76 != 1) {
        goto LABEL_360;
      }
      uint64_t v83 = v180[0];
      if (v180[0]) {
        *(_DWORD *)v180[0] += 2;
      }
      *(void *)(a3 + 8) = v83;
      int v84 = 1;
      *(_DWORD *)(a3 + 32) = 1;
      goto LABEL_317;
    }
    LOBYTE(v170[0]) = 0;
    int v171 = -1;
    uint64_t v85 = v181;
    if (v181 == -1)
    {
      LOBYTE(v183[0]) = 0;
      int v184 = -1;
    }
    else
    {
      ((void (*)(void *, int **, void *))off_1ECABECB8[v181])(v183, v170, v180);
      int v171 = v85;
      LOBYTE(v183[0]) = 0;
      int v184 = -1;
      ((void (*)(void *, void *, int **))off_1ECABEE88[v85])(v168, v183, v170);
      int v184 = v85;
    }
    v185[0] = 0;
    int v186 = -1;
    uint64_t v92 = v4[12];
    if (v92 != -1)
    {
      ((void (*)(void *, unsigned char *, int *))off_1ECABEE88[v92])(v168, v185, v4 + 8);
      int v186 = v92;
    }
    uint64_t v93 = WTF::fastMalloc((WTF *)0x38);
    v94 = (unsigned int *)v93;
    *(_OWORD *)(v93 + 8) = 0u;
    *(_DWORD *)uint64_t v93 = 2;
    *(_OWORD *)(v93 + 24) = 0u;
    *(_OWORD *)(v93 + 40) = 0u;
    v174 = (int *)v93;
    if (v184 == -1)
    {
      *(_DWORD *)(v93 + 24) = -1;
      v96 = (unsigned int *)(v93 + 32);
      int v97 = v186;
      if (v186 == -1)
      {
        unsigned int v95 = 0;
LABEL_177:
        ((void (*)(void *, unsigned int *))off_1ECABEC60[v95])(v168, v96);
        v94[12] = -1;
        goto LABEL_231;
      }
    }
    else
    {
      v168[0] = v93 + 8;
      ((void (*)(void *))off_1ECABEEE0[v184])(v168);
      if (*v94 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1826949B0);
      }
      unsigned int v95 = v94[12];
      v96 = v94 + 8;
      int v97 = v186;
      if (v95 == -1)
      {
        if (v186 == -1) {
          goto LABEL_231;
        }
      }
      else if (v186 == -1)
      {
        goto LABEL_177;
      }
    }
    v168[0] = v96;
    ((void (*)(void *))off_1ECABEEE0[v97])(v168);
LABEL_231:
    WGSL::constantMultiply((uint64_t)a1, &v174, (uint64_t)&v175);
    uint64_t v125 = *v94;
    if (v125)
    {
      uint64_t v126 = 24 * v125;
      v127 = v94 + 6;
      do
      {
        v124 = v127 - 4;
        uint64_t v128 = *v127;
        if (v128 != -1) {
          ((void (*)(void *, _DWORD *))off_1ECABEC60[v128])(v168, v124);
        }
        _DWORD *v127 = -1;
        v127 += 6;
        v126 -= 24;
      }
      while (v126);
    }
    WTF::fastFree((WTF *)v94, v124);
    if (v186 != -1) {
      ((void (*)(void *, unsigned char *))off_1ECABEC60[v186])(v168, v185);
    }
    int v186 = -1;
    if (v184 != -1) {
      ((void (*)(void *, void *))off_1ECABEC60[v184])(v168, v183);
    }
    int v116 = v178;
    if (v178)
    {
LABEL_241:
      if (v116 != 1) {
        goto LABEL_360;
      }
      uint64_t v129 = v176[0];
      if (v176[0]) {
        *(_DWORD *)v176[0] += 2;
      }
      *(void *)(a3 + 8) = v129;
      int v130 = 1;
      *(_DWORD *)(a3 + 32) = 1;
      goto LABEL_313;
    }
    LOBYTE(v168[0]) = 0;
    int v169 = -1;
    int v131 = v177;
    if (v177 != -1)
    {
      ((void (*)(void *, void *, void *))off_1ECABECB8[v177])(v183, v168, v176);
      int v169 = v131;
    }
    LOBYTE(v183[0]) = 0;
    int v184 = -1;
    uint64_t v132 = v4[6];
    if (v132 != -1)
    {
      ((void (*)(int **, void *, _DWORD *))off_1ECABEE88[v132])(&v174, v183, v166);
      int v184 = v132;
      int v131 = v169;
    }
    v185[0] = 0;
    int v186 = -1;
    if (v131 != -1)
    {
      ((void (*)(int **, unsigned char *, void *))off_1ECABEE88[v131])(&v174, v185, v168);
      int v186 = v131;
    }
    uint64_t v133 = WTF::fastMalloc((WTF *)0x38);
    v120 = (unsigned int *)v133;
    *(_OWORD *)(v133 + 8) = 0u;
    *(_DWORD *)uint64_t v133 = 2;
    *(_OWORD *)(v133 + 24) = 0u;
    *(_OWORD *)(v133 + 40) = 0u;
    v167 = (int *)v133;
    if (v184 == -1)
    {
      *(_DWORD *)(v133 + 24) = -1;
      v135 = (int *)(v133 + 32);
      int v136 = v186;
      if (v186 == -1)
      {
        unsigned int v134 = 0;
LABEL_288:
        ((void (*)(int **, int *))off_1ECABEC60[v134])(&v174, v135);
        v120[12] = -1;
        goto LABEL_301;
      }
    }
    else
    {
      v174 = (int *)(v133 + 8);
      ((void (*)(int **))off_1ECABEEE0[v184])(&v174);
      if (*v120 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x182694A10);
      }
      unsigned int v134 = v120[12];
      v135 = (int *)(v120 + 8);
      int v136 = v186;
      if (v134 == -1)
      {
        if (v186 == -1) {
          goto LABEL_301;
        }
      }
      else if (v186 == -1)
      {
        goto LABEL_288;
      }
    }
    v174 = v135;
    ((void (*)(int **))off_1ECABEEE0[v136])(&v174);
LABEL_301:
    WGSL::constantMinus((uint64_t)a1, &v167, a3);
    uint64_t v156 = *v120;
    if (v156)
    {
      uint64_t v157 = 24 * v156;
      v158 = v120 + 6;
      do
      {
        v151 = v158 - 4;
        uint64_t v159 = *v158;
        if (v159 != -1) {
          ((void (*)(int **, _DWORD *))off_1ECABEC60[v159])(&v174, v151);
        }
        _DWORD *v158 = -1;
        v158 += 6;
        v157 -= 24;
      }
      while (v157);
    }
    goto LABEL_306;
  }
  if (v8 != 5) {
    goto LABEL_361;
  }
  LOBYTE(v183[0]) = 0;
  int v184 = -1;
  uint64_t v9 = v4[12];
  if (v9 != -1)
  {
    ((void (*)(uint64_t *, void *, int *))off_1ECABEE88[v9])(&v187, v183, v4 + 8);
    int v184 = v9;
  }
  v185[0] = 0;
  int v186 = -1;
  uint64_t v10 = v4[6];
  if (v10 != -1)
  {
    ((void (*)(uint64_t *, unsigned char *, int *))off_1ECABEE88[v10])(&v187, v185, v4 + 2);
    int v186 = v10;
  }
  uint64_t v11 = WTF::fastMalloc((WTF *)0x38);
  uint64_t v12 = (unsigned int *)v11;
  *(_DWORD *)uint64_t v11 = 2;
  *(_OWORD *)(v11 + 8) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  uint64_t v179 = v11;
  if (v184 == -1)
  {
    *(_DWORD *)(v11 + 24) = -1;
    uint64_t v14 = (unsigned int *)(v11 + 32);
    int v15 = v186;
    if (v186 == -1)
    {
      unsigned int v13 = 0;
LABEL_37:
      ((void (*)(uint64_t *, unsigned int *))off_1ECABEC60[v13])(&v187, v14);
      v12[12] = -1;
      goto LABEL_46;
    }
  }
  else
  {
    uint64_t v187 = v11 + 8;
    ((void (*)(uint64_t *))off_1ECABEEE0[v184])(&v187);
    if (*v12 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1826948D0);
    }
    unsigned int v13 = v12[12];
    uint64_t v14 = v12 + 8;
    int v15 = v186;
    if (v13 == -1)
    {
      if (v186 == -1) {
        goto LABEL_46;
      }
    }
    else if (v186 == -1)
    {
      goto LABEL_37;
    }
  }
  uint64_t v187 = (uint64_t)v14;
  ((void (*)(uint64_t *))off_1ECABEEE0[v15])(&v187);
LABEL_46:
  WGSL::constantDot(v7, (uint64_t)&v187);
  uint64_t v31 = *v12;
  if (v31)
  {
    uint64_t v32 = 24 * v31;
    uint64_t v33 = v12 + 6;
    do
    {
      uint64_t v30 = v33 - 4;
      uint64_t v34 = *v33;
      if (v34 != -1) {
        ((void (*)(uint64_t *, _DWORD *))off_1ECABEC60[v34])(&v175, v30);
      }
      _DWORD *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  WTF::fastFree((WTF *)v12, v30);
  if (v186 != -1) {
    ((void (*)(uint64_t *, unsigned char *))off_1ECABEC60[v186])(&v175, v185);
  }
  int v186 = -1;
  if (v184 != -1) {
    ((void (*)(uint64_t *, void *))off_1ECABEC60[v184])(&v175, v183);
  }
  if (v190)
  {
    if (v190 == 1)
    {
      uint64_t v35 = v188[0];
      if (v188[0]) {
        *(_DWORD *)v188[0] += 2;
      }
      *(void *)(a3 + 8) = v35;
      int v36 = 1;
      *(_DWORD *)(a3 + 32) = 1;
      return ((uint64_t (*)(void *, void *))off_1ECABED68[v36])(v183, v188);
    }
LABEL_360:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v172[0] = 0;
  int v173 = -1;
  uint64_t v37 = v189;
  if (v189 == -1)
  {
    LODWORD(v183[0]) = 0x40000000;
    int v184 = 0;
    v185[0] = 0;
    int v186 = -1;
  }
  else
  {
    ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v189])(v183, v172, v188);
    int v173 = v37;
    LODWORD(v183[0]) = 0x40000000;
    int v184 = 0;
    v185[0] = 0;
    int v186 = -1;
    ((void (*)(uint64_t *, unsigned char *, unsigned char *))off_1ECABEE88[v37])(&v175, v185, v172);
    int v186 = v37;
  }
  uint64_t v53 = WTF::fastMalloc((WTF *)0x38);
  uint64_t v54 = (unsigned int *)v53;
  *(_OWORD *)(v53 + 8) = 0u;
  *(_DWORD *)uint64_t v53 = 2;
  *(_OWORD *)(v53 + 24) = 0u;
  *(_OWORD *)(v53 + 40) = 0u;
  v170[0] = (int *)v53;
  if (v184 == -1)
  {
    uint64_t v58 = a3;
    *(_DWORD *)(v53 + 24) = -1;
    int v56 = (unsigned int *)(v53 + 32);
    int v57 = v186;
    if (v186 == -1)
    {
      unsigned int v55 = 0;
      goto LABEL_179;
    }
    goto LABEL_121;
  }
  uint64_t v175 = v53 + 8;
  ((void (*)(uint64_t *))off_1ECABEEE0[v184])(&v175);
  if (*v54 < 2)
  {
    __break(0xC471u);
    JUMPOUT(0x182694930);
  }
  unsigned int v55 = v54[12];
  int v56 = v54 + 8;
  int v57 = v186;
  uint64_t v58 = a3;
  if (v55 == -1)
  {
    if (v186 == -1) {
      goto LABEL_122;
    }
    goto LABEL_121;
  }
  if (v186 != -1)
  {
LABEL_121:
    uint64_t v175 = (uint64_t)v56;
    ((void (*)(uint64_t *))off_1ECABEEE0[v57])(&v175);
LABEL_122:
    WGSL::constantMultiply((uint64_t)a1, v170, (uint64_t)&v179);
    uint64_t v70 = *v54;
    if (!v70) {
      goto LABEL_184;
    }
    goto LABEL_180;
  }
LABEL_179:
  ((void (*)(uint64_t *, unsigned int *))off_1ECABEC60[v55])(&v175, v56);
  v54[12] = -1;
  WGSL::constantMultiply((uint64_t)a1, v170, (uint64_t)&v179);
  uint64_t v70 = *v54;
  if (!v70) {
    goto LABEL_184;
  }
LABEL_180:
  uint64_t v98 = 24 * v70;
  v99 = v54 + 6;
  do
  {
    int v69 = v99 - 4;
    uint64_t v100 = *v99;
    if (v100 != -1) {
      ((void (*)(uint64_t *, _DWORD *))off_1ECABEC60[v100])(&v175, v69);
    }
    _DWORD *v99 = -1;
    v99 += 6;
    v98 -= 24;
  }
  while (v98);
LABEL_184:
  WTF::fastFree((WTF *)v54, v69);
  if (v186 != -1) {
    ((void (*)(uint64_t *, unsigned char *))off_1ECABEC60[v186])(&v175, v185);
  }
  int v186 = -1;
  if (v184 != -1) {
    ((void (*)(uint64_t *, void *))off_1ECABEC60[v184])(&v175, v183);
  }
  uint64_t v101 = v58;
  if (v182)
  {
    if (v182 != 1) {
      goto LABEL_360;
    }
    uint64_t v102 = v180[0];
    if (v180[0]) {
      *(_DWORD *)v180[0] += 2;
    }
    *(void *)(v58 + 8) = v102;
    int v103 = 1;
    *(_DWORD *)(v58 + 32) = 1;
    goto LABEL_340;
  }
  LOBYTE(v170[0]) = 0;
  int v171 = -1;
  uint64_t v104 = v181;
  if (v181 == -1)
  {
    LOBYTE(v183[0]) = 0;
    int v184 = -1;
  }
  else
  {
    ((void (*)(void *, int **, void *))off_1ECABECB8[v181])(v183, v170, v180);
    int v171 = v104;
    LOBYTE(v183[0]) = 0;
    int v184 = -1;
    ((void (*)(void *, void *, int **))off_1ECABEE88[v104])(v168, v183, v170);
    int v184 = v104;
  }
  v185[0] = 0;
  int v186 = -1;
  uint64_t v105 = v4[12];
  if (v105 != -1)
  {
    ((void (*)(void *, unsigned char *, int *))off_1ECABEE88[v105])(v168, v185, v4 + 8);
    int v186 = v105;
  }
  uint64_t v106 = WTF::fastMalloc((WTF *)0x38);
  v107 = (unsigned int *)v106;
  *(_OWORD *)(v106 + 8) = 0u;
  *(_DWORD *)uint64_t v106 = 2;
  *(_OWORD *)(v106 + 24) = 0u;
  *(_OWORD *)(v106 + 40) = 0u;
  v174 = (int *)v106;
  if (v184 == -1)
  {
    *(_DWORD *)(v106 + 24) = -1;
    v109 = (unsigned int *)(v106 + 32);
    int v110 = v186;
    if (v186 == -1)
    {
      unsigned int v108 = 0;
LABEL_205:
      ((void (*)(void *, unsigned int *))off_1ECABEC60[v108])(v168, v109);
      v107[12] = -1;
      goto LABEL_258;
    }
  }
  else
  {
    v168[0] = v106 + 8;
    ((void (*)(void *))off_1ECABEEE0[v184])(v168);
    if (*v107 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1826949D0);
    }
    unsigned int v108 = v107[12];
    v109 = v107 + 8;
    int v110 = v186;
    if (v108 == -1)
    {
      if (v186 == -1) {
        goto LABEL_258;
      }
    }
    else if (v186 == -1)
    {
      goto LABEL_205;
    }
  }
  v168[0] = v109;
  ((void (*)(void *))off_1ECABEEE0[v110])(v168);
LABEL_258:
  WGSL::constantMultiply((uint64_t)a1, &v174, (uint64_t)&v175);
  uint64_t v138 = *v107;
  if (v138)
  {
    uint64_t v139 = 24 * v138;
    v140 = v107 + 6;
    do
    {
      v137 = v140 - 4;
      uint64_t v141 = *v140;
      if (v141 != -1) {
        ((void (*)(void *, _DWORD *))off_1ECABEC60[v141])(v168, v137);
      }
      _DWORD *v140 = -1;
      v140 += 6;
      v139 -= 24;
    }
    while (v139);
  }
  WTF::fastFree((WTF *)v107, v137);
  if (v186 != -1) {
    ((void (*)(void *, unsigned char *))off_1ECABEC60[v186])(v168, v185);
  }
  int v186 = -1;
  if (v184 != -1) {
    ((void (*)(void *, void *))off_1ECABEC60[v184])(v168, v183);
  }
  if (v178)
  {
    if (v178 != 1) {
      goto LABEL_360;
    }
    uint64_t v142 = v176[0];
    if (v176[0]) {
      *(_DWORD *)v176[0] += 2;
    }
    *(void *)(v101 + 8) = v142;
    int v143 = 1;
    *(_DWORD *)(v101 + 32) = 1;
    goto LABEL_336;
  }
  LOBYTE(v168[0]) = 0;
  int v169 = -1;
  int v144 = v177;
  if (v177 != -1)
  {
    ((void (*)(void *, void *, void *))off_1ECABECB8[v177])(v183, v168, v176);
    int v169 = v144;
  }
  LOBYTE(v183[0]) = 0;
  int v184 = -1;
  uint64_t v145 = v4[6];
  if (v145 != -1)
  {
    ((void (*)(int **, void *, _DWORD *))off_1ECABEE88[v145])(&v174, v183, v166);
    int v184 = v145;
    int v144 = v169;
  }
  v185[0] = 0;
  int v186 = -1;
  if (v144 != -1)
  {
    ((void (*)(int **, unsigned char *, void *))off_1ECABEE88[v144])(&v174, v185, v168);
    int v186 = v144;
  }
  uint64_t v146 = WTF::fastMalloc((WTF *)0x38);
  v147 = (unsigned int *)v146;
  *(_OWORD *)(v146 + 8) = 0u;
  *(_DWORD *)uint64_t v146 = 2;
  *(_OWORD *)(v146 + 24) = 0u;
  *(_OWORD *)(v146 + 40) = 0u;
  v167 = (int *)v146;
  if (v184 == -1)
  {
    *(_DWORD *)(v146 + 24) = -1;
    v149 = (int *)(v146 + 32);
    int v150 = v186;
    if (v186 == -1)
    {
      unsigned int v148 = 0;
LABEL_291:
      ((void (*)(int **, int *))off_1ECABEC60[v148])(&v174, v149);
      v147[12] = -1;
      goto LABEL_324;
    }
  }
  else
  {
    v174 = (int *)(v146 + 8);
    ((void (*)(int **))off_1ECABEEE0[v184])(&v174);
    if (*v147 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x182694A30);
    }
    unsigned int v148 = v147[12];
    v149 = (int *)(v147 + 8);
    int v150 = v186;
    if (v148 == -1)
    {
      if (v186 == -1) {
        goto LABEL_324;
      }
    }
    else if (v186 == -1)
    {
      goto LABEL_291;
    }
  }
  v174 = v149;
  ((void (*)(int **))off_1ECABEEE0[v150])(&v174);
LABEL_324:
  WGSL::constantMinus((uint64_t)a1, &v167, v101);
  uint64_t v162 = *v147;
  if (v162)
  {
    uint64_t v163 = 24 * v162;
    v164 = v147 + 6;
    do
    {
      v161 = v164 - 4;
      uint64_t v165 = *v164;
      if (v165 != -1) {
        ((void (*)(int **, _DWORD *))off_1ECABEC60[v165])(&v174, v161);
      }
      _DWORD *v164 = -1;
      v164 += 6;
      v163 -= 24;
    }
    while (v163);
  }
  uint64_t result = WTF::fastFree((WTF *)v147, v161);
  if (v186 != -1) {
    uint64_t result = ((uint64_t (*)(int **, unsigned char *))off_1ECABEC60[v186])(&v174, v185);
  }
  int v186 = -1;
  if (v184 != -1) {
    uint64_t result = ((uint64_t (*)(int **, void *))off_1ECABEC60[v184])(&v174, v183);
  }
  if (v169 != -1) {
    uint64_t result = ((uint64_t (*)(void *, void *))off_1ECABEC60[v169])(v183, v168);
  }
  int v143 = v178;
  if (v178 != -1) {
LABEL_336:
  }
    uint64_t result = ((uint64_t (*)(void *, void *))off_1ECABED68[v143])(v183, v176);
  if (v171 != -1) {
    uint64_t result = ((uint64_t (*)(void *, int **))off_1ECABEC60[v171])(v183, v170);
  }
  int v103 = v182;
  if (v182 != -1) {
LABEL_340:
  }
    uint64_t result = ((uint64_t (*)(void *, void *))off_1ECABED68[v103])(v183, v180);
  if (v173 != -1) {
    uint64_t result = ((uint64_t (*)(void *, unsigned char *))off_1ECABEC60[v173])(v183, v172);
  }
  int v36 = v190;
  if (v190 != -1) {
    return ((uint64_t (*)(void *, void *))off_1ECABED68[v36])(v183, v188);
  }
  return result;
}

void WGSL::constantRefract(const WGSL::Type *a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v414 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *a2;
  unsigned int v4 = **a2;
  if (!v4)
  {
LABEL_825:
    __break(0xC471u);
    JUMPOUT(0x182697D44);
  }
  if (v4 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x182697D64);
  }
  if (v4 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x182697D84);
  }
  unsigned int v6 = v3[18];
  v334 = v3 + 2;
  v333 = v3 + 8;
  if (v6 == 2)
  {
    if (*((_DWORD *)a1 + 12) != 1) {
      goto LABEL_824;
    }
    uint64_t v16 = *((void *)v3 + 7);
    uint64_t v17 = *(const WGSL::Type **)a1;
    LOBYTE(v406[0]) = 0;
    unsigned int v407 = -1;
    uint64_t v18 = v3[12];
    if (v18 != -1)
    {
      ((void (*)(uint64_t *, void *, unsigned int *))off_1ECABEE88[v18])(&v410, v406, v3 + 8);
      unsigned int v407 = v18;
    }
    LOBYTE(v408[0]) = 0;
    int v409 = -1;
    uint64_t v19 = v3[6];
    if (v19 != -1)
    {
      ((void (*)(uint64_t *, void *, unsigned int *))off_1ECABEE88[v19])(&v410, v408, v3 + 2);
      int v409 = v19;
    }
    uint64_t v20 = WTF::fastMalloc((WTF *)0x38);
    int v21 = (unsigned int *)v20;
    *(_OWORD *)(v20 + 8) = 0u;
    *(_DWORD *)uint64_t v20 = 2;
    *(_OWORD *)(v20 + 24) = 0u;
    *(_OWORD *)(v20 + 40) = 0u;
    uint64_t v402 = v20;
    if (v407 == -1)
    {
      *(_DWORD *)(v20 + 24) = -1;
      uint64_t v23 = (unsigned int *)(v20 + 32);
      int v24 = v409;
      if (v409 == -1)
      {
        unsigned int v22 = 0;
LABEL_42:
        ((void (*)(uint64_t *, unsigned int *))off_1ECABEC60[v22])(&v410, v23);
        v21[12] = -1;
        goto LABEL_66;
      }
    }
    else
    {
      uint64_t v410 = v20 + 8;
      ((void (*)(uint64_t *))off_1ECABEEE0[v407])(&v410);
      if (*v21 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x18269822CLL);
      }
      unsigned int v22 = v21[12];
      uint64_t v23 = v21 + 8;
      int v24 = v409;
      if (v22 == -1)
      {
        if (v409 == -1) {
          goto LABEL_66;
        }
      }
      else if (v409 == -1)
      {
        goto LABEL_42;
      }
    }
    uint64_t v410 = (uint64_t)v23;
    ((void (*)(uint64_t *))off_1ECABEEE0[v24])(&v410);
LABEL_66:
    WGSL::constantDot(v17, (uint64_t)&v410);
    uint64_t v43 = *v21;
    if (v43)
    {
      uint64_t v44 = 24 * v43;
      uint64_t v45 = v21 + 6;
      do
      {
        uint64_t v42 = v45 - 4;
        uint64_t v46 = *v45;
        if (v46 != -1) {
          ((void (*)(uint64_t *, _DWORD *))off_1ECABEC60[v46])(&v398, v42);
        }
        _DWORD *v45 = -1;
        v45 += 6;
        v44 -= 24;
      }
      while (v44);
    }
    WTF::fastFree((WTF *)v21, v42);
    if (v409 != -1) {
      ((void (*)(uint64_t *, void *))off_1ECABEC60[v409])(&v398, v408);
    }
    int v409 = -1;
    if (v407 != -1) {
      ((void (*)(uint64_t *, void *))off_1ECABEC60[v407])(&v398, v406);
    }
    int v47 = v413;
    if (v413)
    {
LABEL_90:
      if (v47 == 1)
      {
        uint64_t v54 = v411[0];
        if (v411[0]) {
          *(_DWORD *)v411[0] += 2;
        }
        *(void *)(a3 + 8) = v54;
        int v40 = 1;
        *(_DWORD *)(a3 + 32) = 1;
        goto LABEL_813;
      }
      goto LABEL_824;
    }
    v359[0] = 0;
    int v360 = -1;
    uint64_t v48 = v412;
    if (v412 == -1)
    {
      LOBYTE(v406[0]) = 0;
      unsigned int v407 = -1;
    }
    else
    {
      ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v412])(v406, v359, v411);
      int v360 = v48;
      LOBYTE(v406[0]) = 0;
      unsigned int v407 = -1;
      ((void (*)(uint64_t *, void *, unsigned char *))off_1ECABEE88[v48])(&v398, v406, v359);
      unsigned int v407 = v48;
    }
    v408[0] = 0x4000000000000000;
    int v409 = 2;
    uint64_t v61 = WTF::fastMalloc((WTF *)0x38);
    int v62 = (unsigned int *)v61;
    *(_OWORD *)(v61 + 8) = 0u;
    *(_DWORD *)uint64_t v61 = 2;
    *(_OWORD *)(v61 + 24) = 0u;
    *(_OWORD *)(v61 + 40) = 0u;
    v394 = (int *)v61;
    if (v407 == -1)
    {
      *(_DWORD *)(v61 + 24) = -1;
      uint64_t v64 = (unsigned int *)(v61 + 32);
      int v65 = v409;
      if (v409 == -1)
      {
        unsigned int v63 = 0;
LABEL_119:
        ((void (*)(uint64_t *, unsigned int *))off_1ECABEC60[v63])(&v398, v64);
        v62[12] = -1;
        goto LABEL_143;
      }
    }
    else
    {
      uint64_t v398 = v61 + 8;
      ((void (*)(uint64_t *))off_1ECABEEE0[v407])(&v398);
      if (*v62 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x182698630);
      }
      unsigned int v63 = v62[12];
      uint64_t v64 = v62 + 8;
      int v65 = v409;
      if (v63 == -1)
      {
        if (v409 == -1) {
          goto LABEL_143;
        }
      }
      else if (v409 == -1)
      {
        goto LABEL_119;
      }
    }
    uint64_t v398 = (uint64_t)v64;
    ((void (*)(uint64_t *))off_1ECABEEE0[v65])(&v398);
LABEL_143:
    WGSL::constantPow(&v394, (uint64_t)&v402);
    uint64_t v80 = *v62;
    if (v80)
    {
      uint64_t v81 = 24 * v80;
      uint64_t v82 = v62 + 6;
      do
      {
        uint64_t v79 = v82 - 4;
        uint64_t v83 = *v82;
        if (v83 != -1) {
          ((void (*)(uint64_t *, _DWORD *))off_1ECABEC60[v83])(&v398, v79);
        }
        *uint64_t v82 = -1;
        v82 += 6;
        v81 -= 24;
      }
      while (v81);
    }
    WTF::fastFree((WTF *)v62, v79);
    if (v409 != -1) {
      ((void (*)(uint64_t *, void *))off_1ECABEC60[v409])(&v398, v408);
    }
    int v409 = -1;
    if (v407 != -1) {
      ((void (*)(uint64_t *, void *))off_1ECABEC60[v407])(&v398, v406);
    }
    int v84 = v405;
    if (v405) {
      goto LABEL_167;
    }
    v357[0] = 0;
    int v358 = -1;
    uint64_t v85 = v404;
    if (v404 == -1)
    {
      v406[0] = 0x3FF0000000000000;
      unsigned int v407 = 2;
      LOBYTE(v408[0]) = 0;
      int v409 = -1;
    }
    else
    {
      ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v404])(v406, v357, v403);
      int v358 = v85;
      v406[0] = 0x3FF0000000000000;
      unsigned int v407 = 2;
      LOBYTE(v408[0]) = 0;
      int v409 = -1;
      ((void (*)(int **, void *, unsigned char *))off_1ECABEE88[v85])(&v394, v408, v357);
      int v409 = v85;
    }
    uint64_t v99 = WTF::fastMalloc((WTF *)0x38);
    uint64_t v100 = (unsigned int *)v99;
    *(_OWORD *)(v99 + 8) = 0u;
    *(_DWORD *)uint64_t v99 = 2;
    *(_OWORD *)(v99 + 24) = 0u;
    *(_OWORD *)(v99 + 40) = 0u;
    v390 = (int *)v99;
    if (v407 == -1)
    {
      *(_DWORD *)(v99 + 24) = -1;
      uint64_t v102 = (int *)(v99 + 32);
      int v103 = v409;
      if (v409 == -1)
      {
        unsigned int v101 = 0;
LABEL_196:
        ((void (*)(int **, int *))off_1ECABEC60[v101])(&v394, v102);
        v100[12] = -1;
        goto LABEL_225;
      }
    }
    else
    {
      v394 = (int *)(v99 + 8);
      ((void (*)(int **))off_1ECABEEE0[v407])(&v394);
      if (*v100 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x182698C84);
      }
      unsigned int v101 = v100[12];
      uint64_t v102 = (int *)(v100 + 8);
      int v103 = v409;
      if (v101 == -1)
      {
        if (v409 == -1) {
          goto LABEL_225;
        }
      }
      else if (v409 == -1)
      {
        goto LABEL_196;
      }
    }
    v394 = v102;
    ((void (*)(int **))off_1ECABEEE0[v103])(&v394);
LABEL_225:
    WGSL::constantMinus((uint64_t)v17, &v390, (uint64_t)&v398);
    uint64_t v123 = *v100;
    if (v123)
    {
      uint64_t v124 = 24 * v123;
      uint64_t v125 = v100 + 6;
      do
      {
        v122 = v125 - 4;
        uint64_t v126 = *v125;
        if (v126 != -1) {
          ((void (*)(int **, _DWORD *))off_1ECABEC60[v126])(&v394, v122);
        }
        *uint64_t v125 = -1;
        v125 += 6;
        v124 -= 24;
      }
      while (v124);
    }
    WTF::fastFree((WTF *)v100, v122);
    if (v409 != -1) {
      ((void (*)(int **, void *))off_1ECABEC60[v409])(&v394, v408);
    }
    int v409 = -1;
    if (v407 != -1) {
      ((void (*)(int **, void *))off_1ECABEC60[v407])(&v394, v406);
    }
    int v127 = v401;
    if (v401) {
      goto LABEL_254;
    }
    v355[0] = 0;
    int v356 = -1;
    int v128 = v400;
    if (v400 != -1)
    {
      ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v400])(v406, v355, v399);
      int v356 = v128;
    }
    v406[0] = v16;
    unsigned int v407 = 2;
    v408[0] = 0x4000000000000000;
    int v409 = 2;
    uint64_t v129 = WTF::fastMalloc((WTF *)0x38);
    int v130 = (unsigned int *)v129;
    *(_OWORD *)(v129 + 8) = 0u;
    *(_DWORD *)uint64_t v129 = 2;
    *(_OWORD *)(v129 + 24) = 0u;
    *(_OWORD *)(v129 + 40) = 0u;
    v390 = (int *)v129;
    if (v407 == -1)
    {
      *(_DWORD *)(v129 + 24) = -1;
      uint64_t v132 = (int *)(v129 + 32);
      int v133 = v409;
      if (v409 == -1)
      {
        unsigned int v131 = 0;
LABEL_270:
        ((void (*)(int **, int *))off_1ECABEC60[v131])(&v394, v132);
        v130[12] = -1;
        goto LABEL_294;
      }
    }
    else
    {
      v394 = (int *)(v129 + 8);
      ((void (*)(int **))off_1ECABEEE0[v407])(&v394);
      if (*v130 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x182699110);
      }
      unsigned int v131 = v130[12];
      uint64_t v132 = (int *)(v130 + 8);
      int v133 = v409;
      if (v131 == -1)
      {
        if (v409 == -1) {
          goto LABEL_294;
        }
      }
      else if (v409 == -1)
      {
        goto LABEL_270;
      }
    }
    v394 = v132;
    ((void (*)(int **))off_1ECABEEE0[v133])(&v394);
LABEL_294:
    WGSL::constantPow(&v390, (uint64_t)&v394);
    uint64_t v156 = *v130;
    if (v156)
    {
      uint64_t v157 = 24 * v156;
      v158 = v130 + 6;
      do
      {
        uint64_t v155 = v158 - 4;
        uint64_t v159 = *v158;
        if (v159 != -1) {
          ((void (*)(uint64_t *, _DWORD *))off_1ECABEC60[v159])(&v386, v155);
        }
        _DWORD *v158 = -1;
        v158 += 6;
        v157 -= 24;
      }
      while (v157);
    }
    WTF::fastFree((WTF *)v130, v155);
    if (v409 != -1) {
      ((void (*)(uint64_t *, void *))off_1ECABEC60[v409])(&v386, v408);
    }
    int v409 = -1;
    if (v407 != -1) {
      ((void (*)(uint64_t *, void *))off_1ECABEC60[v407])(&v386, v406);
    }
    int v160 = v397;
    if (v397) {
      goto LABEL_318;
    }
    v353[0] = 0;
    int v354 = -1;
    uint64_t v161 = v396;
    if (v396 == -1)
    {
      LOBYTE(v406[0]) = 0;
      unsigned int v407 = -1;
    }
    else
    {
      ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v396])(v406, v353, v395);
      int v354 = v161;
      LOBYTE(v406[0]) = 0;
      unsigned int v407 = -1;
      ((void (*)(uint64_t *, void *, unsigned char *))off_1ECABEE88[v161])(&v386, v406, v353);
      unsigned int v407 = v161;
    }
    LOBYTE(v408[0]) = 0;
    int v409 = -1;
    int v176 = v356;
    if (v356 != -1)
    {
      ((void (*)(uint64_t *, void *, unsigned char *))off_1ECABEE88[v356])(&v386, v408, v355);
      int v409 = v176;
    }
    uint64_t v177 = WTF::fastMalloc((WTF *)0x38);
    int v178 = (unsigned int *)v177;
    *(_OWORD *)(v177 + 8) = 0u;
    *(_DWORD *)uint64_t v177 = 2;
    *(_OWORD *)(v177 + 24) = 0u;
    *(_OWORD *)(v177 + 40) = 0u;
    v382 = (int *)v177;
    if (v407 == -1)
    {
      *(_DWORD *)(v177 + 24) = -1;
      v180 = (unsigned int *)(v177 + 32);
      int v181 = v409;
      if (v409 == -1)
      {
        unsigned int v179 = 0;
LABEL_353:
        ((void (*)(uint64_t *, unsigned int *))off_1ECABEC60[v179])(&v386, v180);
        v178[12] = -1;
        goto LABEL_377;
      }
    }
    else
    {
      uint64_t v386 = v177 + 8;
      ((void (*)(uint64_t *))off_1ECABEEE0[v407])(&v386);
      if (*v178 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x182699170);
      }
      unsigned int v179 = v178[12];
      v180 = v178 + 8;
      int v181 = v409;
      if (v179 == -1)
      {
        if (v409 == -1) {
          goto LABEL_377;
        }
      }
      else if (v409 == -1)
      {
        goto LABEL_353;
      }
    }
    uint64_t v386 = (uint64_t)v180;
    ((void (*)(uint64_t *))off_1ECABEEE0[v181])(&v386);
LABEL_377:
    WGSL::constantMultiply((uint64_t)v17, &v382, (uint64_t)&v390);
    uint64_t v197 = *v178;
    if (v197)
    {
      uint64_t v198 = 24 * v197;
      v199 = v178 + 6;
      do
      {
        v196 = v199 - 4;
        uint64_t v200 = *v199;
        if (v200 != -1) {
          ((void (*)(uint64_t *, _DWORD *))off_1ECABEC60[v200])(&v386, v196);
        }
        _DWORD *v199 = -1;
        v199 += 6;
        v198 -= 24;
      }
      while (v198);
    }
    WTF::fastFree((WTF *)v178, v196);
    if (v409 != -1) {
      ((void (*)(uint64_t *, void *))off_1ECABEC60[v409])(&v386, v408);
    }
    int v409 = -1;
    if (v407 != -1) {
      ((void (*)(uint64_t *, void *))off_1ECABEC60[v407])(&v386, v406);
    }
    int v201 = v393;
    if (v393) {
      goto LABEL_401;
    }
    v351[0] = 0;
    int v352 = -1;
    uint64_t v202 = v392;
    if (v392 == -1)
    {
      v406[0] = 0x3FF0000000000000;
      unsigned int v407 = 2;
      LOBYTE(v408[0]) = 0;
      int v409 = -1;
    }
    else
    {
      ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v392])(v406, v351, v391);
      int v352 = v202;
      v406[0] = 0x3FF0000000000000;
      unsigned int v407 = 2;
      LOBYTE(v408[0]) = 0;
      int v409 = -1;
      ((void (*)(int **, void *, unsigned char *))off_1ECABEE88[v202])(&v382, v408, v351);
      int v409 = v202;
    }
    uint64_t v216 = WTF::fastMalloc((WTF *)0x38);
    v217 = (unsigned int *)v216;
    *(_OWORD *)(v216 + 8) = 0u;
    *(_DWORD *)uint64_t v216 = 2;
    *(_OWORD *)(v216 + 24) = 0u;
    *(_OWORD *)(v216 + 40) = 0u;
    v378 = (int *)v216;
    if (v407 == -1)
    {
      *(_DWORD *)(v216 + 24) = -1;
      v219 = (int *)(v216 + 32);
      int v220 = v409;
      if (v409 == -1)
      {
        unsigned int v218 = 0;
LABEL_430:
        ((void (*)(int **, int *))off_1ECABEC60[v218])(&v382, v219);
        v217[12] = -1;
LABEL_454:
        WGSL::constantMinus((uint64_t)v17, &v378, (uint64_t)&v386);
        uint64_t v235 = *v217;
        if (v235)
        {
          uint64_t v236 = 24 * v235;
          v237 = v217 + 6;
          do
          {
            v234 = v237 - 4;
            uint64_t v238 = *v237;
            if (v238 != -1) {
              ((void (*)(int **, _DWORD *))off_1ECABEC60[v238])(&v382, v234);
            }
            _DWORD *v237 = -1;
            v237 += 6;
            v236 -= 24;
          }
          while (v236);
        }
        WTF::fastFree((WTF *)v217, v234);
        if (v409 != -1) {
          ((void (*)(int **, void *))off_1ECABEC60[v409])(&v382, v408);
        }
        int v409 = -1;
        if (v407 != -1) {
          ((void (*)(int **, void *))off_1ECABEC60[v407])(&v382, v406);
        }
        int v239 = v389;
        if (v389) {
          goto LABEL_478;
        }
        v349[0] = 0;
        int v350 = -1;
        uint64_t v240 = v388;
        if (v388 == -1)
        {
          LOBYTE(v406[0]) = 0;
          unsigned int v407 = -1;
        }
        else
        {
          ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v388])(v406, v349, v387);
          int v350 = v240;
          LOBYTE(v406[0]) = 0;
          unsigned int v407 = -1;
          ((void (*)(int **, void *, unsigned char *))off_1ECABEE88[v240])(&v374, v406, v349);
          unsigned int v407 = v240;
        }
        v408[0] = 0;
        int v409 = 2;
        WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v378, (uint64_t)v406, 2);
        WGSL::constantLt(&v378, (uint64_t)&v382);
        WGSL::ConstantArray::~ConstantArray((WTF **)&v378, v255);
        if (v409 != -1) {
          ((void (*)(int **, void *))off_1ECABEC60[v409])(&v374, v408);
        }
        int v409 = -1;
        if (v407 != -1) {
          ((void (*)(int **, void *))off_1ECABEC60[v407])(&v374, v406);
        }
        int v256 = v385;
        if (v385)
        {
LABEL_543:
          if (v256 != 1) {
            goto LABEL_824;
          }
          uint64_t v272 = v383[0];
          if (v383[0]) {
            *(_DWORD *)v383[0] += 2;
          }
          *(void *)(a3 + 8) = v272;
          int v273 = 1;
          *(_DWORD *)(a3 + 32) = 1;
          goto LABEL_728;
        }
        v347[0] = 0;
        int v348 = -1;
        int v257 = v384;
        if (v384 == -1) {
          goto LABEL_824;
        }
        ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v384])(v406, v347, v383);
        int v348 = v257;
        if (v257 != 6) {
          goto LABEL_824;
        }
        if (v347[0]) {
          goto LABEL_550;
        }
        v406[0] = v16;
        unsigned int v407 = 2;
        LOBYTE(v408[0]) = 0;
        int v409 = -1;
        int v258 = v360;
        if (v360 != -1)
        {
          ((void (*)(int **, void *, unsigned char *))off_1ECABEE88[v360])(&v378, v408, v359);
          int v409 = v258;
        }
        WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v374, (uint64_t)v406, 2);
        WGSL::constantMultiply((uint64_t)v17, &v374, (uint64_t)&v378);
        WGSL::ConstantArray::~ConstantArray((WTF **)&v374, v259);
        if (v409 != -1) {
          ((void (*)(WTF **, void *))off_1ECABEC60[v409])(&v370, v408);
        }
        int v409 = -1;
        if (v407 != -1) {
          ((void (*)(WTF **, void *))off_1ECABEC60[v407])(&v370, v406);
        }
        int v260 = v381;
        if (v381)
        {
LABEL_572:
          if (v260 != 1) {
            goto LABEL_824;
          }
          uint64_t v283 = v379[0];
          if (v379[0]) {
            *(_DWORD *)v379[0] += 2;
          }
          *(void *)(a3 + 8) = v283;
          int v284 = 1;
          *(_DWORD *)(a3 + 32) = 1;
          goto LABEL_724;
        }
        v345[0] = 0;
        int v346 = -1;
        int v261 = v380;
        if (v380 != -1)
        {
          ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v380])(v406, v345, v379);
          int v346 = v261;
        }
        LOBYTE(v406[0]) = 0;
        unsigned int v407 = -1;
        unsigned int v262 = v350;
        if (v350 != -1)
        {
          ((void (*)(int **, void *, unsigned char *))off_1ECABEE88[v350])(&v374, v406, v349);
          unsigned int v407 = v262;
        }
        WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v370, (uint64_t)v406, 1);
        WGSL::constantSqrt(&v370, (uint64_t)&v374);
        WGSL::ConstantArray::~ConstantArray(&v370, v263);
        if (v407 != -1) {
          ((void (*)(unsigned int **, void *))off_1ECABEC60[v407])(&v366, v406);
        }
        int v264 = v377;
        if (v377) {
          goto LABEL_598;
        }
        v343[0] = 0;
        int v344 = -1;
        int v265 = v376;
        if (v376 != -1)
        {
          ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v376])(v406, v343, v375);
          int v344 = v265;
        }
        LOBYTE(v406[0]) = 0;
        unsigned int v407 = -1;
        unsigned int v266 = v346;
        if (v346 != -1)
        {
          ((void (*)(WTF **, void *, unsigned char *))off_1ECABEE88[v346])(&v370, v406, v345);
          unsigned int v407 = v266;
          int v265 = v344;
        }
        LOBYTE(v408[0]) = 0;
        int v409 = -1;
        if (v265 != -1)
        {
          ((void (*)(WTF **, void *, unsigned char *))off_1ECABEE88[v265])(&v370, v408, v343);
          int v409 = v265;
        }
        WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v366, (uint64_t)v406, 2);
        WGSL::constantAdd((uint64_t)v17, &v366, (uint64_t)&v370);
        WGSL::ConstantArray::~ConstantArray((WTF **)&v366, v267);
        if (v409 != -1) {
          ((void (*)(int **, void *))off_1ECABEC60[v409])(&v362, v408);
        }
        int v409 = -1;
        if (v407 != -1) {
          ((void (*)(int **, void *))off_1ECABEC60[v407])(&v362, v406);
        }
        int v268 = v373;
        if (v373)
        {
LABEL_628:
          if (v268 != 1) {
            goto LABEL_824;
          }
          uint64_t v303 = v371[0];
          if (v371[0]) {
            *(_DWORD *)v371[0] += 2;
          }
          *(void *)(a3 + 8) = v303;
          int v304 = 1;
          *(_DWORD *)(a3 + 32) = 1;
          goto LABEL_716;
        }
        v341[0] = 0;
        int v342 = -1;
        int v269 = v372;
        if (v372 != -1)
        {
          ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v372])(v406, v341, v371);
          int v342 = v269;
        }
        v406[0] = v16;
        int v270 = 2;
LABEL_651:
        unsigned int v407 = v270;
        LOBYTE(v408[0]) = 0;
        int v409 = -1;
        uint64_t v311 = v3[6];
        if (v311 != -1)
        {
          ((void (*)(unsigned int **, void *, _DWORD *))off_1ECABEE88[v311])(&v366, v408, v334);
          int v409 = v311;
        }
        WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v362, (uint64_t)v406, 2);
        WGSL::constantMultiply((uint64_t)a1, &v362, (uint64_t)&v366);
        WGSL::ConstantArray::~ConstantArray((WTF **)&v362, v312);
        if (v409 != -1) {
          ((void (*)(unsigned char *, void *))off_1ECABEC60[v409])(v339, v408);
        }
        int v409 = -1;
        if (v407 != -1) {
          ((void (*)(unsigned char *, void *))off_1ECABEC60[v407])(v339, v406);
        }
        if (v369)
        {
          if (v369 != 1) {
            goto LABEL_824;
          }
          uint64_t v313 = v367[0];
          if (v367[0]) {
            *(_DWORD *)v367[0] += 2;
          }
          *(void *)(a3 + 8) = v313;
          int v314 = 1;
          *(_DWORD *)(a3 + 32) = 1;
          goto LABEL_712;
        }
        v339[0] = 0;
        int v340 = -1;
        int v315 = v368;
        if (v368 != -1)
        {
          ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v368])(v406, v339, v367);
          int v340 = v315;
        }
        LOBYTE(v406[0]) = 0;
        unsigned int v407 = -1;
        unsigned int v316 = v342;
        if (v342 != -1)
        {
          ((void (*)(int **, void *, unsigned char *))off_1ECABEE88[v342])(&v362, v406, v341);
          unsigned int v407 = v316;
        }
        LOBYTE(v408[0]) = 0;
        int v409 = -1;
        uint64_t v317 = v3[12];
        if (v317 != -1)
        {
          ((void (*)(int **, void *, _DWORD *))off_1ECABEE88[v317])(&v362, v408, v333);
          int v409 = v317;
        }
        WTF::FixedVector<WGSL::ConstantValue>::FixedVector(v337, (uint64_t)v406, 2);
        WGSL::constantMultiply((uint64_t)a1, v337, (uint64_t)&v362);
        WGSL::ConstantArray::~ConstantArray((WTF **)v337, v318);
        if (v409 != -1) {
          ((void (*)(int **, void *))off_1ECABEC60[v409])(&v336, v408);
        }
        int v409 = -1;
        if (v407 != -1) {
          ((void (*)(int **, void *))off_1ECABEC60[v407])(&v336, v406);
        }
        if (v365)
        {
          if (v365 != 1) {
            goto LABEL_824;
          }
          uint64_t v319 = v363[0];
          if (v363[0]) {
            *(_DWORD *)v363[0] += 2;
          }
          *(void *)(a3 + 8) = v319;
          int v320 = 1;
          *(_DWORD *)(a3 + 32) = 1;
        }
        else
        {
          LOBYTE(v337[0]) = 0;
          int v338 = -1;
          int v327 = v364;
          if (v364 != -1)
          {
            ((void (*)(void *, int **, void *))off_1ECABECB8[v364])(v406, v337, v363);
            int v338 = v327;
          }
          LOBYTE(v406[0]) = 0;
          unsigned int v407 = -1;
          unsigned int v328 = v340;
          if (v340 != -1)
          {
            ((void (*)(int **, void *, unsigned char *))off_1ECABEE88[v340])(&v336, v406, v339);
            unsigned int v407 = v328;
            int v327 = v338;
          }
          LOBYTE(v408[0]) = 0;
          int v409 = -1;
          if (v327 != -1)
          {
            ((void (*)(int **, void *, int **))off_1ECABEE88[v327])(&v336, v408, v337);
            int v409 = v327;
          }
          WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v336, (uint64_t)v406, 2);
          WGSL::constantMinus((uint64_t)a1, &v336, a3);
          WGSL::ConstantArray::~ConstantArray((WTF **)&v336, v329);
          if (v409 != -1) {
            ((void (*)(char *, void *))off_1ECABEC60[v409])(&v361, v408);
          }
          int v409 = -1;
          if (v407 != -1) {
            ((void (*)(char *, void *))off_1ECABEC60[v407])(&v361, v406);
          }
          if (v338 != -1) {
            ((void (*)(void *, int **))off_1ECABEC60[v338])(v406, v337);
          }
          int v320 = v365;
          if (v365 == -1)
          {
LABEL_709:
            if (v340 != -1) {
              ((void (*)(void *, unsigned char *))off_1ECABEC60[v340])(v406, v339);
            }
            int v314 = v369;
            if (v369 == -1)
            {
LABEL_713:
              if (v342 != -1) {
                ((void (*)(void *, unsigned char *))off_1ECABEC60[v342])(v406, v341);
              }
              int v304 = v373;
              if (v373 == -1)
              {
LABEL_717:
                if (v344 != -1) {
                  ((void (*)(void *, unsigned char *))off_1ECABEC60[v344])(v406, v343);
                }
                int v294 = v377;
                if (v377 == -1)
                {
LABEL_721:
                  if (v346 != -1) {
                    ((void (*)(void *, unsigned char *))off_1ECABEC60[v346])(v406, v345);
                  }
                  int v284 = v381;
                  if (v381 == -1)
                  {
LABEL_725:
                    if (v348 != -1) {
                      ((void (*)(void *, unsigned char *))off_1ECABEC60[v348])(v406, v347);
                    }
                    int v273 = v385;
                    if (v385 == -1)
                    {
LABEL_729:
                      if (v350 != -1) {
                        ((void (*)(void *, unsigned char *))off_1ECABEC60[v350])(v406, v349);
                      }
                      int v247 = v389;
                      if (v389 == -1)
                      {
LABEL_733:
                        if (v352 != -1) {
                          ((void (*)(void *, unsigned char *))off_1ECABEC60[v352])(v406, v351);
                        }
                        int v209 = v393;
                        if (v393 == -1)
                        {
LABEL_737:
                          if (v354 != -1) {
                            ((void (*)(void *, unsigned char *))off_1ECABEC60[v354])(v406, v353);
                          }
                          int v168 = v397;
                          if (v397 == -1)
                          {
LABEL_741:
                            if (v356 != -1) {
                              ((void (*)(void *, unsigned char *))off_1ECABEC60[v356])(v406, v355);
                            }
                            int v140 = v401;
                            if (v401 == -1)
                            {
LABEL_745:
                              if (v358 != -1) {
                                ((void (*)(void *, unsigned char *))off_1ECABEC60[v358])(v406, v357);
                              }
                              int v92 = v405;
                              if (v405 == -1)
                              {
LABEL_749:
                                if (v360 != -1) {
                                  ((void (*)(void *, unsigned char *))off_1ECABEC60[v360])(v406, v359);
                                }
                                int v40 = v413;
                                if (v413 != -1) {
                                  goto LABEL_813;
                                }
                                return;
                              }
LABEL_748:
                              ((void (*)(void *, void *))off_1ECABED68[v92])(v406, v403);
                              goto LABEL_749;
                            }
LABEL_744:
                            ((void (*)(void *, void *))off_1ECABED68[v140])(v406, v399);
                            goto LABEL_745;
                          }
LABEL_740:
                          ((void (*)(void *, void *))off_1ECABED68[v168])(v406, v395);
                          goto LABEL_741;
                        }
LABEL_736:
                        ((void (*)(void *, void *))off_1ECABED68[v209])(v406, v391);
                        goto LABEL_737;
                      }
LABEL_732:
                      ((void (*)(void *, void *))off_1ECABED68[v247])(v406, v387);
                      goto LABEL_733;
                    }
LABEL_728:
                    ((void (*)(void *, void *))off_1ECABED68[v273])(v406, v383);
                    goto LABEL_729;
                  }
LABEL_724:
                  ((void (*)(void *, void *))off_1ECABED68[v284])(v406, v379);
                  goto LABEL_725;
                }
LABEL_720:
                ((void (*)(void *, void *))off_1ECABED68[v294])(v406, v375);
                goto LABEL_721;
              }
LABEL_716:
              ((void (*)(void *, void *))off_1ECABED68[v304])(v406, v371);
              goto LABEL_717;
            }
LABEL_712:
            ((void (*)(void *, void *))off_1ECABED68[v314])(v406, v367);
            goto LABEL_713;
          }
        }
        ((void (*)(void *, void *))off_1ECABED68[v320])(v406, v363);
        goto LABEL_709;
      }
    }
    else
    {
      v382 = (int *)(v216 + 8);
      ((void (*)(int **))off_1ECABEEE0[v407])(&v382);
      if (*v217 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1826991D0);
      }
      unsigned int v218 = v217[12];
      v219 = (int *)(v217 + 8);
      int v220 = v409;
      if (v218 == -1)
      {
        if (v409 == -1) {
          goto LABEL_454;
        }
      }
      else if (v409 == -1)
      {
        goto LABEL_430;
      }
    }
    v382 = v219;
    ((void (*)(int **))off_1ECABEEE0[v220])(&v382);
    goto LABEL_454;
  }
  if (v6 == 1)
  {
    if (*((_DWORD *)a1 + 12) != 1) {
      goto LABEL_824;
    }
    __int16 v25 = *((_WORD *)v3 + 28);
    uint64_t v26 = *(const WGSL::Type **)a1;
    LOBYTE(v406[0]) = 0;
    unsigned int v407 = -1;
    uint64_t v27 = v3[12];
    if (v27 != -1)
    {
      ((void (*)(uint64_t *, void *, unsigned int *))off_1ECABEE88[v27])(&v410, v406, v3 + 8);
      unsigned int v407 = v27;
    }
    LOBYTE(v408[0]) = 0;
    int v409 = -1;
    uint64_t v28 = v3[6];
    if (v28 != -1)
    {
      ((void (*)(uint64_t *, void *, unsigned int *))off_1ECABEE88[v28])(&v410, v408, v3 + 2);
      int v409 = v28;
    }
    uint64_t v29 = WTF::fastMalloc((WTF *)0x38);
    uint64_t v30 = (unsigned int *)v29;
    *(_OWORD *)(v29 + 8) = 0u;
    *(_DWORD *)uint64_t v29 = 2;
    *(_OWORD *)(v29 + 24) = 0u;
    *(_OWORD *)(v29 + 40) = 0u;
    uint64_t v402 = v29;
    if (v407 == -1)
    {
      *(_DWORD *)(v29 + 24) = -1;
      uint64_t v32 = (unsigned int *)(v29 + 32);
      int v33 = v409;
      if (v409 == -1)
      {
        unsigned int v31 = 0;
LABEL_45:
        ((void (*)(uint64_t *, unsigned int *))off_1ECABEC60[v31])(&v410, v32);
        v30[12] = -1;
        goto LABEL_80;
      }
    }
    else
    {
      uint64_t v410 = v29 + 8;
      ((void (*)(uint64_t *))off_1ECABEEE0[v407])(&v410);
      if (*v30 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x18269824CLL);
      }
      unsigned int v31 = v30[12];
      uint64_t v32 = v30 + 8;
      int v33 = v409;
      if (v31 == -1)
      {
        if (v409 == -1) {
          goto LABEL_80;
        }
      }
      else if (v409 == -1)
      {
        goto LABEL_45;
      }
    }
    uint64_t v410 = (uint64_t)v32;
    ((void (*)(uint64_t *))off_1ECABEEE0[v33])(&v410);
LABEL_80:
    WGSL::constantDot(v26, (uint64_t)&v410);
    uint64_t v50 = *v30;
    if (v50)
    {
      uint64_t v51 = 24 * v50;
      uint64_t v52 = v30 + 6;
      do
      {
        uint64_t v49 = v52 - 4;
        uint64_t v53 = *v52;
        if (v53 != -1) {
          ((void (*)(uint64_t *, _DWORD *))off_1ECABEC60[v53])(&v398, v49);
        }
        *uint64_t v52 = -1;
        v52 += 6;
        v51 -= 24;
      }
      while (v51);
    }
    WTF::fastFree((WTF *)v30, v49);
    if (v409 != -1) {
      ((void (*)(uint64_t *, void *))off_1ECABEC60[v409])(&v398, v408);
    }
    int v409 = -1;
    if (v407 != -1) {
      ((void (*)(uint64_t *, void *))off_1ECABEC60[v407])(&v398, v406);
    }
    int v47 = v413;
    if (v413) {
      goto LABEL_90;
    }
    v359[0] = 0;
    int v360 = -1;
    uint64_t v55 = v412;
    if (v412 == -1)
    {
      LOBYTE(v406[0]) = 0;
      unsigned int v407 = -1;
    }
    else
    {
      ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v412])(v406, v359, v411);
      int v360 = v55;
      LOBYTE(v406[0]) = 0;
      unsigned int v407 = -1;
      ((void (*)(uint64_t *, void *, unsigned char *))off_1ECABEE88[v55])(&v398, v406, v359);
      unsigned int v407 = v55;
    }
    LOWORD(v408[0]) = COERCE_UNSIGNED_INT(2.0);
    int v409 = 1;
    uint64_t v66 = WTF::fastMalloc((WTF *)0x38);
    uint64_t v67 = (unsigned int *)v66;
    *(_OWORD *)(v66 + 8) = 0u;
    *(_DWORD *)uint64_t v66 = 2;
    *(_OWORD *)(v66 + 24) = 0u;
    *(_OWORD *)(v66 + 40) = 0u;
    v394 = (int *)v66;
    if (v407 == -1)
    {
      *(_DWORD *)(v66 + 24) = -1;
      int v69 = (unsigned int *)(v66 + 32);
      int v70 = v409;
      if (v409 == -1)
      {
        unsigned int v68 = 0;
LABEL_122:
        ((void (*)(uint64_t *, unsigned int *))off_1ECABEC60[v68])(&v398, v69);
        v67[12] = -1;
        goto LABEL_157;
      }
    }
    else
    {
      uint64_t v398 = v66 + 8;
      ((void (*)(uint64_t *))off_1ECABEEE0[v407])(&v398);
      if (*v67 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x182698650);
      }
      unsigned int v68 = v67[12];
      int v69 = v67 + 8;
      int v70 = v409;
      if (v68 == -1)
      {
        if (v409 == -1) {
          goto LABEL_157;
        }
      }
      else if (v409 == -1)
      {
        goto LABEL_122;
      }
    }
    uint64_t v398 = (uint64_t)v69;
    ((void (*)(uint64_t *))off_1ECABEEE0[v70])(&v398);
LABEL_157:
    WGSL::constantPow(&v394, (uint64_t)&v402);
    uint64_t v87 = *v67;
    if (v87)
    {
      uint64_t v88 = 24 * v87;
      unsigned int v89 = v67 + 6;
      do
      {
        uint64_t v86 = v89 - 4;
        uint64_t v90 = *v89;
        if (v90 != -1) {
          ((void (*)(uint64_t *, _DWORD *))off_1ECABEC60[v90])(&v398, v86);
        }
        *unsigned int v89 = -1;
        v89 += 6;
        v88 -= 24;
      }
      while (v88);
    }
    WTF::fastFree((WTF *)v67, v86);
    if (v409 != -1) {
      ((void (*)(uint64_t *, void *))off_1ECABEC60[v409])(&v398, v408);
    }
    int v409 = -1;
    if (v407 != -1) {
      ((void (*)(uint64_t *, void *))off_1ECABEC60[v407])(&v398, v406);
    }
    int v84 = v405;
    if (v405)
    {
LABEL_167:
      if (v84 != 1) {
        goto LABEL_824;
      }
      uint64_t v91 = v403[0];
      if (v403[0]) {
        *(_DWORD *)v403[0] += 2;
      }
      *(void *)(a3 + 8) = v91;
      int v92 = 1;
      *(_DWORD *)(a3 + 32) = 1;
      goto LABEL_748;
    }
    v357[0] = 0;
    int v358 = -1;
    uint64_t v93 = v404;
    if (v404 == -1)
    {
      LOWORD(v406[0]) = COERCE_UNSIGNED_INT(1.0);
      unsigned int v407 = 1;
      LOBYTE(v408[0]) = 0;
      int v409 = -1;
    }
    else
    {
      ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v404])(v406, v357, v403);
      int v358 = v93;
      LOWORD(v406[0]) = COERCE_UNSIGNED_INT(1.0);
      unsigned int v407 = 1;
      LOBYTE(v408[0]) = 0;
      int v409 = -1;
      ((void (*)(int **, void *, unsigned char *))off_1ECABEE88[v93])(&v394, v408, v357);
      int v409 = v93;
    }
    uint64_t v104 = WTF::fastMalloc((WTF *)0x38);
    uint64_t v105 = (unsigned int *)v104;
    *(_OWORD *)(v104 + 8) = 0u;
    *(_DWORD *)uint64_t v104 = 2;
    *(_OWORD *)(v104 + 24) = 0u;
    *(_OWORD *)(v104 + 40) = 0u;
    v390 = (int *)v104;
    if (v407 == -1)
    {
      *(_DWORD *)(v104 + 24) = -1;
      v107 = (int *)(v104 + 32);
      int v108 = v409;
      if (v409 == -1)
      {
        unsigned int v106 = 0;
LABEL_199:
        ((void (*)(int **, int *))off_1ECABEC60[v106])(&v394, v107);
        v105[12] = -1;
        goto LABEL_244;
      }
    }
    else
    {
      v394 = (int *)(v104 + 8);
      ((void (*)(int **))off_1ECABEEE0[v407])(&v394);
      if (*v105 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x182698CA4);
      }
      unsigned int v106 = v105[12];
      v107 = (int *)(v105 + 8);
      int v108 = v409;
      if (v106 == -1)
      {
        if (v409 == -1) {
          goto LABEL_244;
        }
      }
      else if (v409 == -1)
      {
        goto LABEL_199;
      }
    }
    v394 = v107;
    ((void (*)(int **))off_1ECABEEE0[v108])(&v394);
LABEL_244:
    WGSL::constantMinus((uint64_t)v26, &v390, (uint64_t)&v398);
    uint64_t v135 = *v105;
    if (v135)
    {
      uint64_t v136 = 24 * v135;
      v137 = v105 + 6;
      do
      {
        unsigned int v134 = v137 - 4;
        uint64_t v138 = *v137;
        if (v138 != -1) {
          ((void (*)(int **, _DWORD *))off_1ECABEC60[v138])(&v394, v134);
        }
        _DWORD *v137 = -1;
        v137 += 6;
        v136 -= 24;
      }
      while (v136);
    }
    WTF::fastFree((WTF *)v105, v134);
    if (v409 != -1) {
      ((void (*)(int **, void *))off_1ECABEC60[v409])(&v394, v408);
    }
    int v409 = -1;
    if (v407 != -1) {
      ((void (*)(int **, void *))off_1ECABEC60[v407])(&v394, v406);
    }
    int v127 = v401;
    if (v401)
    {
LABEL_254:
      if (v127 != 1) {
        goto LABEL_824;
      }
      uint64_t v139 = v399[0];
      if (v399[0]) {
        *(_DWORD *)v399[0] += 2;
      }
      *(void *)(a3 + 8) = v139;
      int v140 = 1;
      *(_DWORD *)(a3 + 32) = 1;
      goto LABEL_744;
    }
    v355[0] = 0;
    int v356 = -1;
    int v141 = v400;
    if (v400 != -1)
    {
      ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v400])(v406, v355, v399);
      int v356 = v141;
    }
    LOWORD(v406[0]) = v25;
    unsigned int v407 = 1;
    LOWORD(v408[0]) = COERCE_UNSIGNED_INT(2.0);
    int v409 = 1;
    uint64_t v142 = WTF::fastMalloc((WTF *)0x38);
    int v143 = (unsigned int *)v142;
    *(_OWORD *)(v142 + 8) = 0u;
    *(_DWORD *)uint64_t v142 = 2;
    *(_OWORD *)(v142 + 24) = 0u;
    *(_OWORD *)(v142 + 40) = 0u;
    v390 = (int *)v142;
    if (v407 == -1)
    {
      *(_DWORD *)(v142 + 24) = -1;
      uint64_t v145 = (int *)(v142 + 32);
      int v146 = v409;
      if (v409 == -1)
      {
        unsigned int v144 = 0;
LABEL_273:
        ((void (*)(int **, int *))off_1ECABEC60[v144])(&v394, v145);
        v143[12] = -1;
        goto LABEL_308;
      }
    }
    else
    {
      v394 = (int *)(v142 + 8);
      ((void (*)(int **))off_1ECABEEE0[v407])(&v394);
      if (*v143 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x182699130);
      }
      unsigned int v144 = v143[12];
      uint64_t v145 = (int *)(v143 + 8);
      int v146 = v409;
      if (v144 == -1)
      {
        if (v409 == -1) {
          goto LABEL_308;
        }
      }
      else if (v409 == -1)
      {
        goto LABEL_273;
      }
    }
    v394 = v145;
    ((void (*)(int **))off_1ECABEEE0[v146])(&v394);
LABEL_308:
    WGSL::constantPow(&v390, (uint64_t)&v394);
    uint64_t v163 = *v143;
    if (v163)
    {
      uint64_t v164 = 24 * v163;
      uint64_t v165 = v143 + 6;
      do
      {
        uint64_t v162 = v165 - 4;
        uint64_t v166 = *v165;
        if (v166 != -1) {
          ((void (*)(uint64_t *, _DWORD *))off_1ECABEC60[v166])(&v386, v162);
        }
        *uint64_t v165 = -1;
        v165 += 6;
        v164 -= 24;
      }
      while (v164);
    }
    WTF::fastFree((WTF *)v143, v162);
    if (v409 != -1) {
      ((void (*)(uint64_t *, void *))off_1ECABEC60[v409])(&v386, v408);
    }
    int v409 = -1;
    if (v407 != -1) {
      ((void (*)(uint64_t *, void *))off_1ECABEC60[v407])(&v386, v406);
    }
    int v160 = v397;
    if (v397)
    {
LABEL_318:
      if (v160 != 1) {
        goto LABEL_824;
      }
      uint64_t v167 = v395[0];
      if (v395[0]) {
        *(_DWORD *)v395[0] += 2;
      }
      *(void *)(a3 + 8) = v167;
      int v168 = 1;
      *(_DWORD *)(a3 + 32) = 1;
      goto LABEL_740;
    }
    v353[0] = 0;
    int v354 = -1;
    uint64_t v169 = v396;
    if (v396 == -1)
    {
      LOBYTE(v406[0]) = 0;
      unsigned int v407 = -1;
    }
    else
    {
      ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v396])(v406, v353, v395);
      int v354 = v169;
      LOBYTE(v406[0]) = 0;
      unsigned int v407 = -1;
      ((void (*)(uint64_t *, void *, unsigned char *))off_1ECABEE88[v169])(&v386, v406, v353);
      unsigned int v407 = v169;
    }
    LOBYTE(v408[0]) = 0;
    int v409 = -1;
    int v182 = v356;
    if (v356 != -1)
    {
      ((void (*)(uint64_t *, void *, unsigned char *))off_1ECABEE88[v356])(&v386, v408, v355);
      int v409 = v182;
    }
    uint64_t v183 = WTF::fastMalloc((WTF *)0x38);
    int v184 = (unsigned int *)v183;
    *(_OWORD *)(v183 + 8) = 0u;
    *(_DWORD *)uint64_t v183 = 2;
    *(_OWORD *)(v183 + 24) = 0u;
    *(_OWORD *)(v183 + 40) = 0u;
    v382 = (int *)v183;
    if (v407 == -1)
    {
      *(_DWORD *)(v183 + 24) = -1;
      int v186 = (unsigned int *)(v183 + 32);
      int v187 = v409;
      if (v409 == -1)
      {
        unsigned int v185 = 0;
LABEL_356:
        ((void (*)(uint64_t *, unsigned int *))off_1ECABEC60[v185])(&v386, v186);
        v184[12] = -1;
        goto LABEL_391;
      }
    }
    else
    {
      uint64_t v386 = v183 + 8;
      ((void (*)(uint64_t *))off_1ECABEEE0[v407])(&v386);
      if (*v184 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x182699190);
      }
      unsigned int v185 = v184[12];
      int v186 = v184 + 8;
      int v187 = v409;
      if (v185 == -1)
      {
        if (v409 == -1) {
          goto LABEL_391;
        }
      }
      else if (v409 == -1)
      {
        goto LABEL_356;
      }
    }
    uint64_t v386 = (uint64_t)v186;
    ((void (*)(uint64_t *))off_1ECABEEE0[v187])(&v386);
LABEL_391:
    WGSL::constantMultiply((uint64_t)v26, &v382, (uint64_t)&v390);
    uint64_t v204 = *v184;
    if (v204)
    {
      uint64_t v205 = 24 * v204;
      v206 = v184 + 6;
      do
      {
        v203 = v206 - 4;
        uint64_t v207 = *v206;
        if (v207 != -1) {
          ((void (*)(uint64_t *, _DWORD *))off_1ECABEC60[v207])(&v386, v203);
        }
        _DWORD *v206 = -1;
        v206 += 6;
        v205 -= 24;
      }
      while (v205);
    }
    WTF::fastFree((WTF *)v184, v203);
    if (v409 != -1) {
      ((void (*)(uint64_t *, void *))off_1ECABEC60[v409])(&v386, v408);
    }
    int v409 = -1;
    if (v407 != -1) {
      ((void (*)(uint64_t *, void *))off_1ECABEC60[v407])(&v386, v406);
    }
    int v201 = v393;
    if (v393)
    {
LABEL_401:
      if (v201 != 1) {
        goto LABEL_824;
      }
      uint64_t v208 = v391[0];
      if (v391[0]) {
        *(_DWORD *)v391[0] += 2;
      }
      *(void *)(a3 + 8) = v208;
      int v209 = 1;
      *(_DWORD *)(a3 + 32) = 1;
      goto LABEL_736;
    }
    v351[0] = 0;
    int v352 = -1;
    uint64_t v210 = v392;
    if (v392 == -1)
    {
      LOWORD(v406[0]) = COERCE_UNSIGNED_INT(1.0);
      unsigned int v407 = 1;
      LOBYTE(v408[0]) = 0;
      int v409 = -1;
    }
    else
    {
      ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v392])(v406, v351, v391);
      int v352 = v210;
      LOWORD(v406[0]) = COERCE_UNSIGNED_INT(1.0);
      unsigned int v407 = 1;
      LOBYTE(v408[0]) = 0;
      int v409 = -1;
      ((void (*)(int **, void *, unsigned char *))off_1ECABEE88[v210])(&v382, v408, v351);
      int v409 = v210;
    }
    uint64_t v221 = WTF::fastMalloc((WTF *)0x38);
    v222 = (unsigned int *)v221;
    *(_OWORD *)(v221 + 8) = 0u;
    *(_DWORD *)uint64_t v221 = 2;
    *(_OWORD *)(v221 + 24) = 0u;
    *(_OWORD *)(v221 + 40) = 0u;
    v378 = (int *)v221;
    if (v407 == -1)
    {
      *(_DWORD *)(v221 + 24) = -1;
      v224 = (int *)(v221 + 32);
      int v225 = v409;
      if (v409 == -1)
      {
        unsigned int v223 = 0;
LABEL_433:
        ((void (*)(int **, int *))off_1ECABEC60[v223])(&v382, v224);
        v222[12] = -1;
LABEL_468:
        WGSL::constantMinus((uint64_t)v26, &v378, (uint64_t)&v386);
        uint64_t v242 = *v222;
        if (v242)
        {
          uint64_t v243 = 24 * v242;
          v244 = v222 + 6;
          do
          {
            v241 = v244 - 4;
            uint64_t v245 = *v244;
            if (v245 != -1) {
              ((void (*)(int **, _DWORD *))off_1ECABEC60[v245])(&v382, v241);
            }
            _DWORD *v244 = -1;
            v244 += 6;
            v243 -= 24;
          }
          while (v243);
        }
        WTF::fastFree((WTF *)v222, v241);
        if (v409 != -1) {
          ((void (*)(int **, void *))off_1ECABEC60[v409])(&v382, v408);
        }
        int v409 = -1;
        if (v407 != -1) {
          ((void (*)(int **, void *))off_1ECABEC60[v407])(&v382, v406);
        }
        int v239 = v389;
        if (v389)
        {
LABEL_478:
          if (v239 != 1) {
            goto LABEL_824;
          }
          uint64_t v246 = v387[0];
          if (v387[0]) {
            *(_DWORD *)v387[0] += 2;
          }
          *(void *)(a3 + 8) = v246;
          int v247 = 1;
          *(_DWORD *)(a3 + 32) = 1;
          goto LABEL_732;
        }
        v349[0] = 0;
        int v350 = -1;
        uint64_t v248 = v388;
        if (v388 == -1)
        {
          LOBYTE(v406[0]) = 0;
          unsigned int v407 = -1;
        }
        else
        {
          ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v388])(v406, v349, v387);
          int v350 = v248;
          LOBYTE(v406[0]) = 0;
          unsigned int v407 = -1;
          ((void (*)(int **, void *, unsigned char *))off_1ECABEE88[v248])(&v374, v406, v349);
          unsigned int v407 = v248;
        }
        LOWORD(v408[0]) = 0;
        int v409 = 1;
        WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v378, (uint64_t)v406, 2);
        WGSL::constantLt(&v378, (uint64_t)&v382);
        WGSL::ConstantArray::~ConstantArray((WTF **)&v378, v271);
        if (v409 != -1) {
          ((void (*)(int **, void *))off_1ECABEC60[v409])(&v374, v408);
        }
        int v409 = -1;
        if (v407 != -1) {
          ((void (*)(int **, void *))off_1ECABEC60[v407])(&v374, v406);
        }
        int v256 = v385;
        if (v385) {
          goto LABEL_543;
        }
        v347[0] = 0;
        int v348 = -1;
        int v274 = v384;
        if (v384 == -1) {
          goto LABEL_824;
        }
        ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v384])(v406, v347, v383);
        int v348 = v274;
        if (v274 != 6) {
          goto LABEL_824;
        }
        if (v347[0])
        {
LABEL_550:
          WGSL::zeroValue((WGSL *)v406, a1);
          *(unsigned char *)(a3 + 8) = 0;
          *(_DWORD *)(a3 + 24) = -1;
          unsigned int v275 = v407;
          if (v407 == -1)
          {
            *(_DWORD *)(a3 + 32) = 0;
          }
          else
          {
            ((void (*)(int **))off_1ECABECB8[v407])(&v378);
            *(_DWORD *)(a3 + 24) = v275;
            uint64_t v276 = v407;
            *(_DWORD *)(a3 + 32) = 0;
            if (v276 != -1) {
              ((void (*)(int **, void *))off_1ECABEC60[v276])(&v378, v406);
            }
          }
          goto LABEL_725;
        }
        LOWORD(v406[0]) = v25;
        unsigned int v407 = 1;
        LOBYTE(v408[0]) = 0;
        int v409 = -1;
        int v281 = v360;
        if (v360 != -1)
        {
          ((void (*)(int **, void *, unsigned char *))off_1ECABEE88[v360])(&v378, v408, v359);
          int v409 = v281;
        }
        WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v374, (uint64_t)v406, 2);
        WGSL::constantMultiply((uint64_t)v26, &v374, (uint64_t)&v378);
        WGSL::ConstantArray::~ConstantArray((WTF **)&v374, v282);
        if (v409 != -1) {
          ((void (*)(WTF **, void *))off_1ECABEC60[v409])(&v370, v408);
        }
        int v409 = -1;
        if (v407 != -1) {
          ((void (*)(WTF **, void *))off_1ECABEC60[v407])(&v370, v406);
        }
        int v260 = v381;
        if (v381) {
          goto LABEL_572;
        }
        v345[0] = 0;
        int v346 = -1;
        int v290 = v380;
        if (v380 != -1)
        {
          ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v380])(v406, v345, v379);
          int v346 = v290;
        }
        LOBYTE(v406[0]) = 0;
        unsigned int v407 = -1;
        unsigned int v291 = v350;
        if (v350 != -1)
        {
          ((void (*)(int **, void *, unsigned char *))off_1ECABEE88[v350])(&v374, v406, v349);
          unsigned int v407 = v291;
        }
        WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v370, (uint64_t)v406, 1);
        WGSL::constantSqrt(&v370, (uint64_t)&v374);
        WGSL::ConstantArray::~ConstantArray(&v370, v292);
        if (v407 != -1) {
          ((void (*)(unsigned int **, void *))off_1ECABEC60[v407])(&v366, v406);
        }
        int v264 = v377;
        if (v377)
        {
LABEL_598:
          if (v264 != 1) {
            goto LABEL_824;
          }
          uint64_t v293 = v375[0];
          if (v375[0]) {
            *(_DWORD *)v375[0] += 2;
          }
          *(void *)(a3 + 8) = v293;
          int v294 = 1;
          *(_DWORD *)(a3 + 32) = 1;
          goto LABEL_720;
        }
        v343[0] = 0;
        int v344 = -1;
        int v300 = v376;
        if (v376 != -1)
        {
          ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v376])(v406, v343, v375);
          int v344 = v300;
        }
        LOBYTE(v406[0]) = 0;
        unsigned int v407 = -1;
        unsigned int v301 = v346;
        if (v346 != -1)
        {
          ((void (*)(WTF **, void *, unsigned char *))off_1ECABEE88[v346])(&v370, v406, v345);
          unsigned int v407 = v301;
          int v300 = v344;
        }
        LOBYTE(v408[0]) = 0;
        int v409 = -1;
        if (v300 != -1)
        {
          ((void (*)(WTF **, void *, unsigned char *))off_1ECABEE88[v300])(&v370, v408, v343);
          int v409 = v300;
        }
        WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v366, (uint64_t)v406, 2);
        WGSL::constantAdd((uint64_t)v26, &v366, (uint64_t)&v370);
        WGSL::ConstantArray::~ConstantArray((WTF **)&v366, v302);
        if (v409 != -1) {
          ((void (*)(int **, void *))off_1ECABEC60[v409])(&v362, v408);
        }
        int v409 = -1;
        if (v407 != -1) {
          ((void (*)(int **, void *))off_1ECABEC60[v407])(&v362, v406);
        }
        int v268 = v373;
        if (v373) {
          goto LABEL_628;
        }
        v341[0] = 0;
        int v342 = -1;
        int v310 = v372;
        if (v372 != -1)
        {
          ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v372])(v406, v341, v371);
          int v342 = v310;
        }
        LOWORD(v406[0]) = v25;
        int v270 = 1;
        goto LABEL_651;
      }
    }
    else
    {
      v382 = (int *)(v221 + 8);
      ((void (*)(int **))off_1ECABEEE0[v407])(&v382);
      if (*v222 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1826991F0);
      }
      unsigned int v223 = v222[12];
      v224 = (int *)(v222 + 8);
      int v225 = v409;
      if (v223 == -1)
      {
        if (v409 == -1) {
          goto LABEL_468;
        }
      }
      else if (v409 == -1)
      {
        goto LABEL_433;
      }
    }
    v382 = v224;
    ((void (*)(int **))off_1ECABEEE0[v225])(&v382);
    goto LABEL_468;
  }
  if (v6) {
    goto LABEL_825;
  }
  if (*((_DWORD *)a1 + 12) != 1) {
    goto LABEL_824;
  }
  unsigned int v7 = v3[14];
  int v8 = *(const WGSL::Type **)a1;
  LOBYTE(v406[0]) = 0;
  unsigned int v407 = -1;
  uint64_t v9 = v3[12];
  if (v9 != -1)
  {
    ((void (*)(uint64_t *, void *, unsigned int *))off_1ECABEE88[v9])(&v410, v406, v3 + 8);
    unsigned int v407 = v9;
  }
  LOBYTE(v408[0]) = 0;
  int v409 = -1;
  uint64_t v10 = v3[6];
  if (v10 != -1)
  {
    ((void (*)(uint64_t *, void *, unsigned int *))off_1ECABEE88[v10])(&v410, v408, v3 + 2);
    int v409 = v10;
  }
  uint64_t v11 = WTF::fastMalloc((WTF *)0x38);
  uint64_t v12 = (unsigned int *)v11;
  *(_DWORD *)uint64_t v11 = 2;
  *(_OWORD *)(v11 + 8) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  uint64_t v402 = v11;
  if (v407 == -1)
  {
    *(_DWORD *)(v11 + 24) = -1;
    uint64_t v14 = (unsigned int *)(v11 + 32);
    int v15 = v409;
    if (v409 == -1)
    {
      unsigned int v13 = 0;
LABEL_39:
      ((void (*)(uint64_t *, unsigned int *))off_1ECABEC60[v13])(&v410, v14);
      v12[12] = -1;
      goto LABEL_48;
    }
  }
  else
  {
    uint64_t v410 = v11 + 8;
    ((void (*)(uint64_t *))off_1ECABEEE0[v407])(&v410);
    if (*v12 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x18269820CLL);
    }
    unsigned int v13 = v12[12];
    uint64_t v14 = v12 + 8;
    int v15 = v409;
    if (v13 == -1)
    {
      if (v409 == -1) {
        goto LABEL_48;
      }
    }
    else if (v409 == -1)
    {
      goto LABEL_39;
    }
  }
  uint64_t v410 = (uint64_t)v14;
  ((void (*)(uint64_t *))off_1ECABEEE0[v15])(&v410);
LABEL_48:
  WGSL::constantDot(v8, (uint64_t)&v410);
  uint64_t v35 = *v12;
  if (v35)
  {
    uint64_t v36 = 24 * v35;
    uint64_t v37 = v12 + 6;
    do
    {
      uint64_t v34 = v37 - 4;
      uint64_t v38 = *v37;
      if (v38 != -1) {
        ((void (*)(uint64_t *, _DWORD *))off_1ECABEC60[v38])(&v398, v34);
      }
      *uint64_t v37 = -1;
      v37 += 6;
      v36 -= 24;
    }
    while (v36);
  }
  WTF::fastFree((WTF *)v12, v34);
  if (v409 != -1) {
    ((void (*)(uint64_t *, void *))off_1ECABEC60[v409])(&v398, v408);
  }
  int v409 = -1;
  if (v407 != -1) {
    ((void (*)(uint64_t *, void *))off_1ECABEC60[v407])(&v398, v406);
  }
  if (v413)
  {
    if (v413 == 1)
    {
      uint64_t v39 = v411[0];
      if (v411[0]) {
        *(_DWORD *)v411[0] += 2;
      }
      *(void *)(a3 + 8) = v39;
      int v40 = 1;
      *(_DWORD *)(a3 + 32) = 1;
LABEL_813:
      ((void (*)(void *, void *))off_1ECABED68[v40])(v406, v411);
      return;
    }
LABEL_824:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v359[0] = 0;
  int v360 = -1;
  uint64_t v41 = v412;
  if (v412 == -1)
  {
    LOBYTE(v406[0]) = 0;
    unsigned int v407 = -1;
  }
  else
  {
    ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v412])(v406, v359, v411);
    int v360 = v41;
    LOBYTE(v406[0]) = 0;
    unsigned int v407 = -1;
    ((void (*)(uint64_t *, void *, unsigned char *))off_1ECABEE88[v41])(&v398, v406, v359);
    unsigned int v407 = v41;
  }
  LODWORD(v408[0]) = 0x40000000;
  int v409 = 0;
  uint64_t v56 = WTF::fastMalloc((WTF *)0x38);
  int v57 = (unsigned int *)v56;
  *(_OWORD *)(v56 + 8) = 0u;
  *(_DWORD *)uint64_t v56 = 2;
  *(_OWORD *)(v56 + 24) = 0u;
  *(_OWORD *)(v56 + 40) = 0u;
  v394 = (int *)v56;
  if (v407 == -1)
  {
    *(_DWORD *)(v56 + 24) = -1;
    uint64_t v59 = (unsigned int *)(v56 + 32);
    int v60 = v409;
    if (v409 == -1)
    {
      unsigned int v58 = 0;
LABEL_116:
      ((void (*)(uint64_t *, unsigned int *))off_1ECABEC60[v58])(&v398, v59);
      v57[12] = -1;
      goto LABEL_125;
    }
  }
  else
  {
    uint64_t v398 = v56 + 8;
    ((void (*)(uint64_t *))off_1ECABEEE0[v407])(&v398);
    if (*v57 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x182698610);
    }
    unsigned int v58 = v57[12];
    uint64_t v59 = v57 + 8;
    int v60 = v409;
    if (v58 == -1)
    {
      if (v409 == -1) {
        goto LABEL_125;
      }
    }
    else if (v409 == -1)
    {
      goto LABEL_116;
    }
  }
  uint64_t v398 = (uint64_t)v59;
  ((void (*)(uint64_t *))off_1ECABEEE0[v60])(&v398);
LABEL_125:
  WGSL::constantPow(&v394, (uint64_t)&v402);
  uint64_t v72 = *v57;
  if (v72)
  {
    uint64_t v73 = 24 * v72;
    unsigned int v74 = v57 + 6;
    do
    {
      uint64_t v71 = v74 - 4;
      uint64_t v75 = *v74;
      if (v75 != -1) {
        ((void (*)(uint64_t *, _DWORD *))off_1ECABEC60[v75])(&v398, v71);
      }
      *unsigned int v74 = -1;
      v74 += 6;
      v73 -= 24;
    }
    while (v73);
  }
  WTF::fastFree((WTF *)v57, v71);
  if (v409 != -1) {
    ((void (*)(uint64_t *, void *))off_1ECABEC60[v409])(&v398, v408);
  }
  int v409 = -1;
  if (v407 != -1) {
    ((void (*)(uint64_t *, void *))off_1ECABEC60[v407])(&v398, v406);
  }
  if (v405)
  {
    if (v405 != 1) {
      goto LABEL_824;
    }
    uint64_t v76 = v403[0];
    if (v403[0]) {
      *(_DWORD *)v403[0] += 2;
    }
    *(void *)(a3 + 8) = v76;
    int v77 = 1;
    *(_DWORD *)(a3 + 32) = 1;
    goto LABEL_809;
  }
  v357[0] = 0;
  int v358 = -1;
  uint64_t v78 = v404;
  if (v404 == -1)
  {
    LODWORD(v406[0]) = 1065353216;
    unsigned int v407 = 0;
    LOBYTE(v408[0]) = 0;
    int v409 = -1;
  }
  else
  {
    ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v404])(v406, v357, v403);
    int v358 = v78;
    LODWORD(v406[0]) = 1065353216;
    unsigned int v407 = 0;
    LOBYTE(v408[0]) = 0;
    int v409 = -1;
    ((void (*)(int **, void *, unsigned char *))off_1ECABEE88[v78])(&v394, v408, v357);
    int v409 = v78;
  }
  uint64_t v94 = WTF::fastMalloc((WTF *)0x38);
  unsigned int v95 = (unsigned int *)v94;
  *(_OWORD *)(v94 + 8) = 0u;
  *(_DWORD *)uint64_t v94 = 2;
  *(_OWORD *)(v94 + 24) = 0u;
  *(_OWORD *)(v94 + 40) = 0u;
  v390 = (int *)v94;
  if (v407 == -1)
  {
    *(_DWORD *)(v94 + 24) = -1;
    int v97 = (int *)(v94 + 32);
    int v98 = v409;
    if (v409 == -1)
    {
      unsigned int v96 = 0;
LABEL_193:
      ((void (*)(int **, int *))off_1ECABEC60[v96])(&v394, v97);
      v95[12] = -1;
      goto LABEL_202;
    }
  }
  else
  {
    v394 = (int *)(v94 + 8);
    ((void (*)(int **))off_1ECABEEE0[v407])(&v394);
    if (*v95 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x182698C64);
    }
    unsigned int v96 = v95[12];
    int v97 = (int *)(v95 + 8);
    int v98 = v409;
    if (v96 == -1)
    {
      if (v409 == -1) {
        goto LABEL_202;
      }
    }
    else if (v409 == -1)
    {
      goto LABEL_193;
    }
  }
  v394 = v97;
  ((void (*)(int **))off_1ECABEEE0[v98])(&v394);
LABEL_202:
  WGSL::constantMinus((uint64_t)v8, &v390, (uint64_t)&v398);
  uint64_t v110 = *v95;
  if (v110)
  {
    uint64_t v111 = 24 * v110;
    uint64_t v112 = v95 + 6;
    do
    {
      v109 = v112 - 4;
      uint64_t v113 = *v112;
      if (v113 != -1) {
        ((void (*)(int **, _DWORD *))off_1ECABEC60[v113])(&v394, v109);
      }
      *uint64_t v112 = -1;
      v112 += 6;
      v111 -= 24;
    }
    while (v111);
  }
  WTF::fastFree((WTF *)v95, v109);
  if (v409 != -1) {
    ((void (*)(int **, void *))off_1ECABEC60[v409])(&v394, v408);
  }
  int v409 = -1;
  if (v407 != -1) {
    ((void (*)(int **, void *))off_1ECABEC60[v407])(&v394, v406);
  }
  if (v401)
  {
    if (v401 != 1) {
      goto LABEL_824;
    }
    uint64_t v114 = v399[0];
    if (v399[0]) {
      *(_DWORD *)v399[0] += 2;
    }
    *(void *)(a3 + 8) = v114;
    int v115 = 1;
    *(_DWORD *)(a3 + 32) = 1;
    goto LABEL_805;
  }
  v355[0] = 0;
  int v356 = -1;
  int v116 = v400;
  if (v400 != -1)
  {
    ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v400])(v406, v355, v399);
    int v356 = v116;
  }
  LODWORD(v406[0]) = v7;
  unsigned int v407 = 0;
  LODWORD(v408[0]) = 0x40000000;
  int v409 = 0;
  uint64_t v117 = WTF::fastMalloc((WTF *)0x38);
  uint64_t v118 = (unsigned int *)v117;
  *(_OWORD *)(v117 + 8) = 0u;
  *(_DWORD *)uint64_t v117 = 2;
  *(_OWORD *)(v117 + 24) = 0u;
  *(_OWORD *)(v117 + 40) = 0u;
  v390 = (int *)v117;
  if (v407 == -1)
  {
    *(_DWORD *)(v117 + 24) = -1;
    v120 = (int *)(v117 + 32);
    int v121 = v409;
    if (v409 == -1)
    {
      unsigned int v119 = 0;
LABEL_267:
      ((void (*)(int **, int *))off_1ECABEC60[v119])(&v394, v120);
      v118[12] = -1;
      goto LABEL_276;
    }
  }
  else
  {
    v394 = (int *)(v117 + 8);
    ((void (*)(int **))off_1ECABEEE0[v407])(&v394);
    if (*v118 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1826990F0);
    }
    unsigned int v119 = v118[12];
    v120 = (int *)(v118 + 8);
    int v121 = v409;
    if (v119 == -1)
    {
      if (v409 == -1) {
        goto LABEL_276;
      }
    }
    else if (v409 == -1)
    {
      goto LABEL_267;
    }
  }
  v394 = v120;
  ((void (*)(int **))off_1ECABEEE0[v121])(&v394);
LABEL_276:
  WGSL::constantPow(&v390, (uint64_t)&v394);
  uint64_t v148 = *v118;
  if (v148)
  {
    uint64_t v149 = 24 * v148;
    int v150 = v118 + 6;
    do
    {
      v147 = v150 - 4;
      uint64_t v151 = *v150;
      if (v151 != -1) {
        ((void (*)(uint64_t *, _DWORD *))off_1ECABEC60[v151])(&v386, v147);
      }
      *int v150 = -1;
      v150 += 6;
      v149 -= 24;
    }
    while (v149);
  }
  WTF::fastFree((WTF *)v118, v147);
  if (v409 != -1) {
    ((void (*)(uint64_t *, void *))off_1ECABEC60[v409])(&v386, v408);
  }
  int v409 = -1;
  if (v407 != -1) {
    ((void (*)(uint64_t *, void *))off_1ECABEC60[v407])(&v386, v406);
  }
  if (v397)
  {
    if (v397 != 1) {
      goto LABEL_824;
    }
    uint64_t v152 = v395[0];
    if (v395[0]) {
      *(_DWORD *)v395[0] += 2;
    }
    *(void *)(a3 + 8) = v152;
    int v153 = 1;
    *(_DWORD *)(a3 + 32) = 1;
    goto LABEL_801;
  }
  v353[0] = 0;
  int v354 = -1;
  uint64_t v154 = v396;
  if (v396 == -1)
  {
    LOBYTE(v406[0]) = 0;
    unsigned int v407 = -1;
  }
  else
  {
    ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v396])(v406, v353, v395);
    int v354 = v154;
    LOBYTE(v406[0]) = 0;
    unsigned int v407 = -1;
    ((void (*)(uint64_t *, void *, unsigned char *))off_1ECABEE88[v154])(&v386, v406, v353);
    unsigned int v407 = v154;
  }
  LOBYTE(v408[0]) = 0;
  int v409 = -1;
  int v170 = v356;
  if (v356 != -1)
  {
    ((void (*)(uint64_t *, void *, unsigned char *))off_1ECABEE88[v356])(&v386, v408, v355);
    int v409 = v170;
  }
  uint64_t v171 = WTF::fastMalloc((WTF *)0x38);
  v172 = (unsigned int *)v171;
  *(_OWORD *)(v171 + 8) = 0u;
  *(_DWORD *)uint64_t v171 = 2;
  *(_OWORD *)(v171 + 24) = 0u;
  *(_OWORD *)(v171 + 40) = 0u;
  v382 = (int *)v171;
  if (v407 == -1)
  {
    *(_DWORD *)(v171 + 24) = -1;
    v174 = (unsigned int *)(v171 + 32);
    int v175 = v409;
    if (v409 == -1)
    {
      unsigned int v173 = 0;
LABEL_350:
      ((void (*)(uint64_t *, unsigned int *))off_1ECABEC60[v173])(&v386, v174);
      v172[12] = -1;
      goto LABEL_359;
    }
  }
  else
  {
    uint64_t v386 = v171 + 8;
    ((void (*)(uint64_t *))off_1ECABEEE0[v407])(&v386);
    if (*v172 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x182699150);
    }
    unsigned int v173 = v172[12];
    v174 = v172 + 8;
    int v175 = v409;
    if (v173 == -1)
    {
      if (v409 == -1) {
        goto LABEL_359;
      }
    }
    else if (v409 == -1)
    {
      goto LABEL_350;
    }
  }
  uint64_t v386 = (uint64_t)v174;
  ((void (*)(uint64_t *))off_1ECABEEE0[v175])(&v386);
LABEL_359:
  WGSL::constantMultiply((uint64_t)v8, &v382, (uint64_t)&v390);
  uint64_t v189 = *v172;
  if (v189)
  {
    uint64_t v190 = 24 * v189;
    uint64_t v191 = v172 + 6;
    do
    {
      v188 = v191 - 4;
      uint64_t v192 = *v191;
      if (v192 != -1) {
        ((void (*)(uint64_t *, _DWORD *))off_1ECABEC60[v192])(&v386, v188);
      }
      *uint64_t v191 = -1;
      v191 += 6;
      v190 -= 24;
    }
    while (v190);
  }
  WTF::fastFree((WTF *)v172, v188);
  if (v409 != -1) {
    ((void (*)(uint64_t *, void *))off_1ECABEC60[v409])(&v386, v408);
  }
  int v409 = -1;
  if (v407 != -1) {
    ((void (*)(uint64_t *, void *))off_1ECABEC60[v407])(&v386, v406);
  }
  if (v393)
  {
    if (v393 != 1) {
      goto LABEL_824;
    }
    uint64_t v193 = v391[0];
    if (v391[0]) {
      *(_DWORD *)v391[0] += 2;
    }
    *(void *)(a3 + 8) = v193;
    int v194 = 1;
    *(_DWORD *)(a3 + 32) = 1;
    goto LABEL_797;
  }
  v351[0] = 0;
  int v352 = -1;
  uint64_t v195 = v392;
  if (v392 == -1)
  {
    LODWORD(v406[0]) = 1065353216;
    unsigned int v407 = 0;
    LOBYTE(v408[0]) = 0;
    int v409 = -1;
  }
  else
  {
    ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v392])(v406, v351, v391);
    int v352 = v195;
    LODWORD(v406[0]) = 1065353216;
    unsigned int v407 = 0;
    LOBYTE(v408[0]) = 0;
    int v409 = -1;
    ((void (*)(int **, void *, unsigned char *))off_1ECABEE88[v195])(&v382, v408, v351);
    int v409 = v195;
  }
  uint64_t v211 = WTF::fastMalloc((WTF *)0x38);
  v212 = (unsigned int *)v211;
  *(_OWORD *)(v211 + 8) = 0u;
  *(_DWORD *)uint64_t v211 = 2;
  *(_OWORD *)(v211 + 24) = 0u;
  *(_OWORD *)(v211 + 40) = 0u;
  v378 = (int *)v211;
  if (v407 == -1)
  {
    *(_DWORD *)(v211 + 24) = -1;
    v214 = (int *)(v211 + 32);
    int v215 = v409;
    if (v409 == -1)
    {
      unsigned int v213 = 0;
LABEL_427:
      ((void (*)(int **, int *))off_1ECABEC60[v213])(&v382, v214);
      v212[12] = -1;
      goto LABEL_436;
    }
  }
  else
  {
    v382 = (int *)(v211 + 8);
    ((void (*)(int **))off_1ECABEEE0[v407])(&v382);
    if (*v212 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1826991B0);
    }
    unsigned int v213 = v212[12];
    v214 = (int *)(v212 + 8);
    int v215 = v409;
    if (v213 == -1)
    {
      if (v409 == -1) {
        goto LABEL_436;
      }
    }
    else if (v409 == -1)
    {
      goto LABEL_427;
    }
  }
  v382 = v214;
  ((void (*)(int **))off_1ECABEEE0[v215])(&v382);
LABEL_436:
  WGSL::constantMinus((uint64_t)v8, &v378, (uint64_t)&v386);
  uint64_t v227 = *v212;
  if (v227)
  {
    uint64_t v228 = 24 * v227;
    v229 = v212 + 6;
    do
    {
      v226 = v229 - 4;
      uint64_t v230 = *v229;
      if (v230 != -1) {
        ((void (*)(int **, _DWORD *))off_1ECABEC60[v230])(&v382, v226);
      }
      _DWORD *v229 = -1;
      v229 += 6;
      v228 -= 24;
    }
    while (v228);
  }
  WTF::fastFree((WTF *)v212, v226);
  if (v409 != -1) {
    ((void (*)(int **, void *))off_1ECABEC60[v409])(&v382, v408);
  }
  int v409 = -1;
  if (v407 != -1) {
    ((void (*)(int **, void *))off_1ECABEC60[v407])(&v382, v406);
  }
  if (v389)
  {
    if (v389 != 1) {
      goto LABEL_824;
    }
    uint64_t v231 = v387[0];
    if (v387[0]) {
      *(_DWORD *)v387[0] += 2;
    }
    *(void *)(a3 + 8) = v231;
    int v232 = 1;
    *(_DWORD *)(a3 + 32) = 1;
    goto LABEL_793;
  }
  v349[0] = 0;
  int v350 = -1;
  uint64_t v233 = v388;
  if (v388 == -1)
  {
    LOBYTE(v406[0]) = 0;
    unsigned int v407 = -1;
  }
  else
  {
    ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v388])(v406, v349, v387);
    int v350 = v233;
    LOBYTE(v406[0]) = 0;
    unsigned int v407 = -1;
    ((void (*)(int **, void *, unsigned char *))off_1ECABEE88[v233])(&v374, v406, v349);
    unsigned int v407 = v233;
  }
  LODWORD(v408[0]) = 0;
  int v409 = 0;
  WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v378, (uint64_t)v406, 2);
  WGSL::constantLt(&v378, (uint64_t)&v382);
  WGSL::ConstantArray::~ConstantArray((WTF **)&v378, v249);
  if (v409 != -1) {
    ((void (*)(int **, void *))off_1ECABEC60[v409])(&v374, v408);
  }
  int v409 = -1;
  if (v407 != -1) {
    ((void (*)(int **, void *))off_1ECABEC60[v407])(&v374, v406);
  }
  if (v385)
  {
    if (v385 != 1) {
      goto LABEL_824;
    }
    uint64_t v250 = v383[0];
    if (v383[0]) {
      *(_DWORD *)v383[0] += 2;
    }
    *(void *)(a3 + 8) = v250;
    int v251 = 1;
    *(_DWORD *)(a3 + 32) = 1;
    goto LABEL_789;
  }
  v347[0] = 0;
  int v348 = -1;
  int v252 = v384;
  if (v384 == -1) {
    goto LABEL_824;
  }
  ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v384])(v406, v347, v383);
  int v348 = v252;
  if (v252 != 6) {
    goto LABEL_824;
  }
  if (v347[0])
  {
    WGSL::zeroValue((WGSL *)v406, a1);
    *(unsigned char *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 24) = -1;
    unsigned int v253 = v407;
    if (v407 == -1)
    {
      *(_DWORD *)(a3 + 32) = 0;
    }
    else
    {
      ((void (*)(int **))off_1ECABECB8[v407])(&v378);
      *(_DWORD *)(a3 + 24) = v253;
      uint64_t v254 = v407;
      *(_DWORD *)(a3 + 32) = 0;
      if (v254 != -1) {
        ((void (*)(int **, void *))off_1ECABEC60[v254])(&v378, v406);
      }
    }
    goto LABEL_786;
  }
  LODWORD(v406[0]) = v7;
  unsigned int v407 = 0;
  LOBYTE(v408[0]) = 0;
  int v409 = -1;
  int v277 = v360;
  if (v360 != -1)
  {
    ((void (*)(int **, void *, unsigned char *))off_1ECABEE88[v360])(&v378, v408, v359);
    int v409 = v277;
  }
  WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v374, (uint64_t)v406, 2);
  WGSL::constantMultiply((uint64_t)v8, &v374, (uint64_t)&v378);
  WGSL::ConstantArray::~ConstantArray((WTF **)&v374, v278);
  if (v409 != -1) {
    ((void (*)(WTF **, void *))off_1ECABEC60[v409])(&v370, v408);
  }
  int v409 = -1;
  if (v407 != -1) {
    ((void (*)(WTF **, void *))off_1ECABEC60[v407])(&v370, v406);
  }
  if (v381)
  {
    if (v381 != 1) {
      goto LABEL_824;
    }
    uint64_t v279 = v379[0];
    if (v379[0]) {
      *(_DWORD *)v379[0] += 2;
    }
    *(void *)(a3 + 8) = v279;
    int v280 = 1;
    *(_DWORD *)(a3 + 32) = 1;
    goto LABEL_785;
  }
  v345[0] = 0;
  int v346 = -1;
  int v285 = v380;
  if (v380 != -1)
  {
    ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v380])(v406, v345, v379);
    int v346 = v285;
  }
  LOBYTE(v406[0]) = 0;
  unsigned int v407 = -1;
  unsigned int v286 = v350;
  if (v350 != -1)
  {
    ((void (*)(int **, void *, unsigned char *))off_1ECABEE88[v350])(&v374, v406, v349);
    unsigned int v407 = v286;
  }
  WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v370, (uint64_t)v406, 1);
  WGSL::constantSqrt(&v370, (uint64_t)&v374);
  WGSL::ConstantArray::~ConstantArray(&v370, v287);
  if (v407 != -1) {
    ((void (*)(unsigned int **, void *))off_1ECABEC60[v407])(&v366, v406);
  }
  if (v377)
  {
    if (v377 != 1) {
      goto LABEL_824;
    }
    uint64_t v288 = v375[0];
    if (v375[0]) {
      *(_DWORD *)v375[0] += 2;
    }
    *(void *)(a3 + 8) = v288;
    int v289 = 1;
    *(_DWORD *)(a3 + 32) = 1;
    goto LABEL_781;
  }
  v343[0] = 0;
  int v344 = -1;
  int v295 = v376;
  if (v376 != -1)
  {
    ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v376])(v406, v343, v375);
    int v344 = v295;
  }
  LOBYTE(v406[0]) = 0;
  unsigned int v407 = -1;
  unsigned int v296 = v346;
  if (v346 != -1)
  {
    ((void (*)(WTF **, void *, unsigned char *))off_1ECABEE88[v346])(&v370, v406, v345);
    unsigned int v407 = v296;
    int v295 = v344;
  }
  LOBYTE(v408[0]) = 0;
  int v409 = -1;
  if (v295 != -1)
  {
    ((void (*)(WTF **, void *, unsigned char *))off_1ECABEE88[v295])(&v370, v408, v343);
    int v409 = v295;
  }
  WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v366, (uint64_t)v406, 2);
  WGSL::constantAdd((uint64_t)v8, &v366, (uint64_t)&v370);
  WGSL::ConstantArray::~ConstantArray((WTF **)&v366, v297);
  if (v409 != -1) {
    ((void (*)(int **, void *))off_1ECABEC60[v409])(&v362, v408);
  }
  int v409 = -1;
  if (v407 != -1) {
    ((void (*)(int **, void *))off_1ECABEC60[v407])(&v362, v406);
  }
  if (v373)
  {
    if (v373 != 1) {
      goto LABEL_824;
    }
    uint64_t v298 = v371[0];
    if (v371[0]) {
      *(_DWORD *)v371[0] += 2;
    }
    *(void *)(a3 + 8) = v298;
    int v299 = 1;
    *(_DWORD *)(a3 + 32) = 1;
    goto LABEL_777;
  }
  v341[0] = 0;
  int v342 = -1;
  int v305 = v372;
  if (v372 != -1)
  {
    ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v372])(v406, v341, v371);
    int v342 = v305;
  }
  LODWORD(v406[0]) = v7;
  unsigned int v407 = 0;
  LOBYTE(v408[0]) = 0;
  int v409 = -1;
  uint64_t v306 = v3[6];
  if (v306 != -1)
  {
    ((void (*)(unsigned int **, void *, _DWORD *))off_1ECABEE88[v306])(&v366, v408, v334);
    int v409 = v306;
  }
  WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v362, (uint64_t)v406, 2);
  WGSL::constantMultiply((uint64_t)a1, &v362, (uint64_t)&v366);
  WGSL::ConstantArray::~ConstantArray((WTF **)&v362, v307);
  if (v409 != -1) {
    ((void (*)(unsigned char *, void *))off_1ECABEC60[v409])(v339, v408);
  }
  int v409 = -1;
  if (v407 != -1) {
    ((void (*)(unsigned char *, void *))off_1ECABEC60[v407])(v339, v406);
  }
  if (v369)
  {
    if (v369 != 1) {
      goto LABEL_824;
    }
    uint64_t v308 = v367[0];
    if (v367[0]) {
      *(_DWORD *)v367[0] += 2;
    }
    *(void *)(a3 + 8) = v308;
    int v309 = 1;
    *(_DWORD *)(a3 + 32) = 1;
    goto LABEL_773;
  }
  v339[0] = 0;
  int v340 = -1;
  int v321 = v368;
  if (v368 != -1)
  {
    ((void (*)(void *, unsigned char *, void *))off_1ECABECB8[v368])(v406, v339, v367);
    int v340 = v321;
  }
  LOBYTE(v406[0]) = 0;
  unsigned int v407 = -1;
  unsigned int v322 = v342;
  if (v342 != -1)
  {
    ((void (*)(int **, void *, unsigned char *))off_1ECABEE88[v342])(&v362, v406, v341);
    unsigned int v407 = v322;
  }
  LOBYTE(v408[0]) = 0;
  int v409 = -1;
  uint64_t v323 = v3[12];
  if (v323 != -1)
  {
    ((void (*)(int **, void *, _DWORD *))off_1ECABEE88[v323])(&v362, v408, v333);
    int v409 = v323;
  }
  WTF::FixedVector<WGSL::ConstantValue>::FixedVector(v337, (uint64_t)v406, 2);
  WGSL::constantMultiply((uint64_t)a1, v337, (uint64_t)&v362);
  WGSL::ConstantArray::~ConstantArray((WTF **)v337, v324);
  if (v409 != -1) {
    ((void (*)(int **, void *))off_1ECABEC60[v409])(&v336, v408);
  }
  int v409 = -1;
  if (v407 != -1) {
    ((void (*)(int **, void *))off_1ECABEC60[v407])(&v336, v406);
  }
  if (v365)
  {
    if (v365 != 1) {
      goto LABEL_824;
    }
    uint64_t v325 = v363[0];
    if (v363[0]) {
      *(_DWORD *)v363[0] += 2;
    }
    *(void *)(a3 + 8) = v325;
    int v326 = 1;
    *(_DWORD *)(a3 + 32) = 1;
    goto LABEL_769;
  }
  LOBYTE(v337[0]) = 0;
  int v338 = -1;
  int v330 = v364;
  if (v364 != -1)
  {
    ((void (*)(void *, int **, void *))off_1ECABECB8[v364])(v406, v337, v363);
    int v338 = v330;
  }
  LOBYTE(v406[0]) = 0;
  unsigned int v407 = -1;
  unsigned int v331 = v340;
  if (v340 != -1)
  {
    ((void (*)(int **, void *, unsigned char *))off_1ECABEE88[v340])(&v336, v406, v339);
    unsigned int v407 = v331;
    int v330 = v338;
  }
  LOBYTE(v408[0]) = 0;
  int v409 = -1;
  if (v330 != -1)
  {
    ((void (*)(int **, void *, int **))off_1ECABEE88[v330])(&v336, v408, v337);
    int v409 = v330;
  }
  WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v336, (uint64_t)v406, 2);
  WGSL::constantMinus((uint64_t)a1, &v336, a3);
  WGSL::ConstantArray::~ConstantArray((WTF **)&v336, v332);
  if (v409 != -1) {
    ((void (*)(char *, void *))off_1ECABEC60[v409])(&v361, v408);
  }
  int v409 = -1;
  if (v407 != -1) {
    ((void (*)(char *, void *))off_1ECABEC60[v407])(&v361, v406);
  }
  if (v338 != -1) {
    ((void (*)(void *, int **))off_1ECABEC60[v338])(v406, v337);
  }
  int v326 = v365;
  if (v365 != -1) {
LABEL_769:
  }
    ((void (*)(void *, void *))off_1ECABED68[v326])(v406, v363);
  if (v340 != -1) {
    ((void (*)(void *, unsigned char *))off_1ECABEC60[v340])(v406, v339);
  }
  int v309 = v369;
  if (v369 != -1) {
LABEL_773:
  }
    ((void (*)(void *, void *))off_1ECABED68[v309])(v406, v367);
  if (v342 != -1) {
    ((void (*)(void *, unsigned char *))off_1ECABEC60[v342])(v406, v341);
  }
  int v299 = v373;
  if (v373 != -1) {
LABEL_777:
  }
    ((void (*)(void *, void *))off_1ECABED68[v299])(v406, v371);
  if (v344 != -1) {
    ((void (*)(void *, unsigned char *))off_1ECABEC60[v344])(v406, v343);
  }
  int v289 = v377;
  if (v377 != -1) {
LABEL_781:
  }
    ((void (*)(void *, void *))off_1ECABED68[v289])(v406, v375);
  if (v346 != -1) {
    ((void (*)(void *, unsigned char *))off_1ECABEC60[v346])(v406, v345);
  }
  int v280 = v381;
  if (v381 != -1) {
LABEL_785:
  }
    ((void (*)(void *, void *))off_1ECABED68[v280])(v406, v379);
LABEL_786:
  if (v348 != -1) {
    ((void (*)(void *, unsigned char *))off_1ECABEC60[v348])(v406, v347);
  }
  int v251 = v385;
  if (v385 != -1) {
LABEL_789:
  }
    ((void (*)(void *, void *))off_1ECABED68[v251])(v406, v383);
  if (v350 != -1) {
    ((void (*)(void *, unsigned char *))off_1ECABEC60[v350])(v406, v349);
  }
  int v232 = v389;
  if (v389 != -1) {
LABEL_793:
  }
    ((void (*)(void *, void *))off_1ECABED68[v232])(v406, v387);
  if (v352 != -1) {
    ((void (*)(void *, unsigned char *))off_1ECABEC60[v352])(v406, v351);
  }
  int v194 = v393;
  if (v393 != -1) {
LABEL_797:
  }
    ((void (*)(void *, void *))off_1ECABED68[v194])(v406, v391);
  if (v354 != -1) {
    ((void (*)(void *, unsigned char *))off_1ECABEC60[v354])(v406, v353);
  }
  int v153 = v397;
  if (v397 != -1) {
LABEL_801:
  }
    ((void (*)(void *, void *))off_1ECABED68[v153])(v406, v395);
  if (v356 != -1) {
    ((void (*)(void *, unsigned char *))off_1ECABEC60[v356])(v406, v355);
  }
  int v115 = v401;
  if (v401 != -1) {
LABEL_805:
  }
    ((void (*)(void *, void *))off_1ECABED68[v115])(v406, v399);
  if (v358 != -1) {
    ((void (*)(void *, unsigned char *))off_1ECABEC60[v358])(v406, v357);
  }
  int v77 = v405;
  if (v405 != -1) {
LABEL_809:
  }
    ((void (*)(void *, void *))off_1ECABED68[v77])(v406, v403);
  if (v360 != -1) {
    ((void (*)(void *, unsigned char *))off_1ECABEC60[v360])(v406, v359);
  }
  int v40 = v413;
  if (v413 != -1) {
    goto LABEL_813;
  }
}

uint64_t WGSL::constantReverseBits@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x182699AD0);
  }
  LOBYTE(v42[0]) = 0;
  unsigned int v43 = -1;
  uint64_t v4 = v3[6];
  if (v4 == -1) {
    goto LABEL_59;
  }
  int v5 = v3 + 2;
  unsigned int v6 = off_1ECABEE88[v4];
  ((void (*)(unint64_t **, void *, _DWORD *))v6)(&v37, v42, v3 + 2);
  unsigned int v43 = v4;
  LOBYTE(v37) = 0;
  int v39 = -1;
  ((void (*)(unint64_t *, unint64_t **, void *))v6)(v34, &v37, v42);
  unsigned int v7 = 0;
  int v39 = v4;
  if (v4 == 8)
  {
    if (v37) {
      unsigned int v7 = *(_DWORD *)v37;
    }
    else {
      unsigned int v7 = 0;
    }
  }
  uint64_t result = ((uint64_t (*)(unint64_t *, unint64_t **))off_1ECABEC60[v4])(v34, &v37);
  if (!v7)
  {
    int v31 = v3[6];
    switch(v31)
    {
      case 5:
        unint64_t v32 = (*(void *)v5 >> 29) & 2 | (*(void *)v5 >> 31) & 1 | (*(void *)v5 >> 27) & 4 | (*(void *)v5 >> 25) & 8 | (*(void *)v5 >> 23) & 0x10 | (*(void *)v5 >> 21) & 0x20 | (*(void *)v5 >> 19) & 0x40 | (*(void *)v5 >> 17) & 0x80 | (*(void *)v5 >> 15) & 0x100 | (*(void *)v5 >> 13) & 0x200 | (*(void *)v5 >> 11) & 0x400 | (*(void *)v5 >> 9) & 0x800 | (*(void *)v5 >> 7) & 0x1000 | (*(void *)v5 >> 5) & 0x2000 | (*(void *)v5 >> 3) & 0x4000 | (*(void *)v5 >> 1) & 0x8000 | (2 * *(void *)v5) & 0x10000 | (unint64_t)((8 * *(void *)v5) & 0x20000) | (32 * *(void *)v5) & 0x40000 | (*(void *)v5 << 7) & 0x80000 | (*(void *)v5 << 9) & 0x100000 | (*(void *)v5 << 11) & 0x200000;
        *(void *)(a2 + 8) = v32 | (*(void *)v5 << 13) & 0x400000 | (unint64_t)((*(void *)v5 << 15) & 0x800000) | (*(void *)v5 << 17) & 0x1000000 | (*(void *)v5 << 19) & 0x2000000 | (*(void *)v5 << 21) & 0x4000000 | (*(void *)v5 << 23) & 0x8000000 | (*(void *)v5 << 25) & 0x10000000 | (*(void *)v5 << 27) & 0x20000000 | (unint64_t)((*(void *)v5 << 29) & 0x40000000) | (int)(*(void *)v5 << 31);
        *(_DWORD *)(a2 + 24) = 5;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v30 = v43;
        if (v43 != -1) {
          return ((uint64_t (*)(unint64_t **, void *))off_1ECABEC60[v30])(&v37, v42);
        }
        return result;
      case 4:
        *(_DWORD *)(a2 + 8) = __rbit32(*v5);
        *(_DWORD *)(a2 + 24) = 4;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v30 = v43;
        if (v43 != -1) {
          return ((uint64_t (*)(unint64_t **, void *))off_1ECABEC60[v30])(&v37, v42);
        }
        return result;
      case 3:
        *(_DWORD *)(a2 + 8) = __rbit32(*v5);
        *(_DWORD *)(a2 + 24) = 3;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v30 = v43;
        if (v43 != -1) {
          return ((uint64_t (*)(void, void))off_1ECABEC60[v30])(&v37, v42);
        }
        return result;
    }
LABEL_59:
    __break(0xC471u);
    JUMPOUT(0x182699B30);
  }
  uint64_t v33 = a2;
  uint64_t v9 = 24 * v7;
  uint64_t v10 = (unsigned int *)WTF::fastMalloc((WTF *)(v9 + 8));
  *uint64_t v10 = v7;
  uint64_t v11 = 6;
  bzero(v10 + 2, 24 * ((v9 - 24) / 0x18uLL) + 24);
  unint64_t v13 = 0;
  LODWORD(v34[0]) = 0;
  unsigned int v35 = 0;
  do
  {
    if (v43 == 8)
    {
      if (v13 >= *(unsigned int *)v42[0])
      {
        __break(0xC471u);
        JUMPOUT(0x182699AB0);
      }
      uint64_t v12 = v42[0] + v11 * 4 - 16;
      uint64_t v14 = *(unsigned int *)(v42[0] + v11 * 4);
      uint64_t v15 = v35;
      if (v35 != -1)
      {
        if (v14 == -1) {
          goto LABEL_57;
        }
LABEL_21:
        uint64_t v37 = v34;
        ((void (*)(unint64_t **, unint64_t *, uint64_t))off_1ECABEEE0[v14])(&v37, v34, v12);
        goto LABEL_22;
      }
      if (v14 != -1) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v15 = v35;
      if (v35 == -1)
      {
        if (v43 == -1) {
          goto LABEL_58;
        }
      }
      else if (v43 == -1)
      {
LABEL_57:
        ((void (*)(unint64_t **, unint64_t *, uint64_t))off_1ECABEC60[v15])(&v37, v34, v12);
        unsigned int v35 = -1;
LABEL_58:
        __break(0xC471u);
        JUMPOUT(0x182699B10);
      }
      uint64_t v37 = v34;
      ((void (*)(unint64_t **, unint64_t *, void *))off_1ECABEEE0[v43])(&v37, v34, v42);
    }
LABEL_22:
    if (v35 == 3 || v35 == 4)
    {
      LODWORD(v38) = __rbit32(v34[0]);
    }
    else
    {
      if (v35 != 5) {
        goto LABEL_58;
      }
      uint64x2_t v16 = (uint64x2_t)vdupq_n_s64(v34[0]);
      int8x16_t v17 = vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_1826CF7F0), (int8x16_t)xmmword_1826CF820), vandq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_1826CF800), (int8x16_t)xmmword_1826CF810)), vorrq_s8(vandq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_1826CF7D0), (int8x16_t)xmmword_1826CF840), vandq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_1826CF7E0), (int8x16_t)xmmword_1826CF830))), vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_1826CF7B0), (int8x16_t)xmmword_1826CF860), vandq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_1826CF7C0), (int8x16_t)xmmword_1826CF850)), vorrq_s8(vandq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_1826CF790), (int8x16_t)xmmword_1826CF880), vandq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_1826CF7A0), (int8x16_t)xmmword_1826CF870)))), vorrq_s8(vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_1826CF8B0), (int8x16_t)xmmword_1826CF8E0),
                    vandq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_1826CF8C0), (int8x16_t)xmmword_1826CF8D0)),
                  vorrq_s8(vandq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_1826CF890), (int8x16_t)xmmword_1826CF900), vandq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_1826CF8A0), (int8x16_t)xmmword_1826CF8F0))), vorrq_s8(vandq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_1826CF910), (int8x16_t)xmmword_1826CF940), vandq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_1826CF920), (int8x16_t)xmmword_1826CF930))));
      unint64_t v38 = *(unint64_t *)&vorr_s8(*(int8x8_t *)v17.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)) | (LODWORD(v34[0]) << 25) & 0x10000000 | (LODWORD(v34[0]) << 29) & 0x40000000 | (((v34[0] >> 2) & 1) << 29) | (int)(LODWORD(v34[0]) << 31);
    }
    unsigned int v40 = v35;
    int v41 = 0;
    if (v13 >= *v10)
    {
      __break(0xC471u);
      JUMPOUT(0x182699A90);
    }
    uint64_t v36 = (uint64_t)&v10[v11 - 4];
    ((void (*)(uint64_t *))off_1ECABEF38[v35])(&v36);
    if (v41 != -1) {
      ((void (*)(uint64_t *, unint64_t *))off_1ECABED68[v41])(&v36, &v38);
    }
    ++v13;
    v11 += 6;
  }
  while (v7 != v13);
  uint64_t v18 = *v10;
  uint64_t v19 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v18 + 8));
  int v21 = v19;
  *uint64_t v19 = v18;
  if (v18)
  {
    unsigned int v22 = v19 + 6;
    uint64_t v23 = 24 * v18;
    int v24 = v10 + 6;
    do
    {
      *((unsigned char *)v22 - 16) = 0;
      uint64_t v20 = v22 - 4;
      *unsigned int v22 = -1;
      uint64_t v25 = *v24;
      if (v25 != -1)
      {
        ((void (*)(unint64_t **, _DWORD *, unsigned int *))off_1ECABEE88[v25])(&v37, v20, v24 - 4);
        *unsigned int v22 = v25;
      }
      v22 += 6;
      v24 += 6;
      v23 -= 24;
    }
    while (v23);
  }
  *(void *)(v33 + 8) = v21;
  *(_DWORD *)(v33 + 24) = 8;
  *(_DWORD *)(v33 + 32) = 0;
  if (v35 != -1) {
    ((void (*)(unint64_t **, unint64_t *))off_1ECABEC60[v35])(&v37, v34);
  }
  uint64_t v26 = *v10;
  if (v26)
  {
    uint64_t v27 = 24 * v26;
    uint64_t v28 = v10 + 6;
    do
    {
      uint64_t v20 = v28 - 4;
      uint64_t v29 = *v28;
      if (v29 != -1) {
        ((void (*)(unint64_t **, _DWORD *))off_1ECABEC60[v29])(&v37, v20);
      }
      *uint64_t v28 = -1;
      v28 += 6;
      v27 -= 24;
    }
    while (v27);
  }
  uint64_t result = WTF::fastFree((WTF *)v10, v20);
  uint64_t v30 = v43;
  if (v43 != -1) {
    return ((uint64_t (*)(void, void))off_1ECABEC60[v30])(&v37, v42);
  }
  return result;
}

__int16 WGSL::constantRound@<H0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x182699FF0);
  }
  LOBYTE(v40[0]) = 0;
  unsigned int v41 = -1;
  uint64_t v4 = v3[6];
  if (v4 == -1) {
    goto LABEL_60;
  }
  int v5 = (double *)(v3 + 2);
  unsigned int v6 = off_1ECABEE88[v4];
  ((void (*)(double **, void *, _DWORD *))v6)(&v35, v40, v3 + 2);
  unsigned int v41 = v4;
  LOBYTE(v35) = 0;
  int v37 = -1;
  ((void (*)(double *, double **, void *))v6)(v32, &v35, v40);
  unsigned int v7 = 0;
  int v37 = v4;
  if (v4 == 8)
  {
    if (v35) {
      unsigned int v7 = *(_DWORD *)v35;
    }
    else {
      unsigned int v7 = 0;
    }
  }
  ((void (*)(double *, double **))off_1ECABEC60[v4])(v32, &v35);
  if (!v7)
  {
    int v29 = v3[6];
    switch(v29)
    {
      case 2:
        double v27 = rint(*v5);
        *(double *)(a2 + 8) = v27;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v28 = v41;
        if (v41 != -1) {
          goto LABEL_44;
        }
        return LOWORD(v27);
      case 1:
        *(short float *)&double v27 = rintl(*(short float *)v5);
        *(_WORD *)(a2 + 8) = LOWORD(v27);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v28 = v41;
        if (v41 != -1) {
          goto LABEL_44;
        }
        return LOWORD(v27);
      case 0:
        *(float *)&double v27 = rintf(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(v27);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v28 = v41;
        if (v41 != -1) {
          goto LABEL_44;
        }
        return LOWORD(v27);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x18269A050);
  }
  uint64_t v31 = a2;
  uint64_t v8 = 24 * v7;
  uint64_t v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *uint64_t v9 = v7;
  uint64_t v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  unint64_t v12 = 0;
  LODWORD(v32[0]) = 0;
  unsigned int v33 = 0;
  do
  {
    if (v41 == 8)
    {
      if (v12 >= *(unsigned int *)v40[0])
      {
        __break(0xC471u);
        JUMPOUT(0x182699FD0);
      }
      uint64_t v11 = v40[0] + v10 * 4 - 16;
      uint64_t v13 = *(unsigned int *)(v40[0] + v10 * 4);
      uint64_t v14 = v33;
      if (v33 == -1)
      {
        if (v13 == -1) {
          goto LABEL_22;
        }
      }
      else if (v13 == -1)
      {
        goto LABEL_58;
      }
      unsigned int v35 = v32;
      ((void (*)(double **, double *, uint64_t))off_1ECABEEE0[v13])(&v35, v32, v11);
    }
    else
    {
      uint64_t v14 = v33;
      if (v33 == -1)
      {
        if (v41 == -1) {
          goto LABEL_59;
        }
      }
      else if (v41 == -1)
      {
LABEL_58:
        ((void (*)(double **, double *, uint64_t))off_1ECABEC60[v14])(&v35, v32, v11);
        unsigned int v33 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x18269A030);
      }
      unsigned int v35 = v32;
      ((void (*)(double **, double *, void *))off_1ECABEEE0[v41])(&v35, v32, v40);
    }
LABEL_22:
    if (v33)
    {
      if (v33 == 1)
      {
        LOWORD(v36) = rintl(*(short float *)v32);
      }
      else
      {
        if (v33 != 2) {
          goto LABEL_59;
        }
        double v36 = rint(v32[0]);
      }
    }
    else
    {
      LODWORD(v36) = rintf(*(float *)v32);
    }
    unsigned int v38 = v33;
    int v39 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x182699FB0);
    }
    uint64_t v34 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1ECABEF38[v33])(&v34);
    if (v39 != -1) {
      ((void (*)(uint64_t *, double *))off_1ECABED68[v39])(&v34, &v36);
    }
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  uint64_t v15 = *v9;
  uint64x2_t v16 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v15 + 8));
  uint64_t v18 = v16;
  *uint64x2_t v16 = v15;
  if (v15)
  {
    uint64_t v19 = v16 + 6;
    uint64_t v20 = 24 * v15;
    int v21 = v9 + 6;
    do
    {
      *((unsigned char *)v19 - 16) = 0;
      int8x16_t v17 = v19 - 4;
      *uint64_t v19 = -1;
      uint64_t v22 = *v21;
      if (v22 != -1)
      {
        ((void (*)(double **, _DWORD *, unsigned int *))off_1ECABEE88[v22])(&v35, v17, v21 - 4);
        *uint64_t v19 = v22;
      }
      v19 += 6;
      v21 += 6;
      v20 -= 24;
    }
    while (v20);
  }
  *(void *)(v31 + 8) = v18;
  *(_DWORD *)(v31 + 24) = 8;
  *(_DWORD *)(v31 + 32) = 0;
  if (v33 != -1) {
    ((void (*)(double **, double *))off_1ECABEC60[v33])(&v35, v32);
  }
  uint64_t v23 = *v9;
  if (v23)
  {
    uint64_t v24 = 24 * v23;
    uint64_t v25 = v9 + 6;
    do
    {
      int8x16_t v17 = v25 - 4;
      uint64_t v26 = *v25;
      if (v26 != -1) {
        ((void (*)(double **, _DWORD *))off_1ECABEC60[v26])(&v35, v17);
      }
      _DWORD *v25 = -1;
      v25 += 6;
      v24 -= 24;
    }
    while (v24);
  }
  WTF::fastFree((WTF *)v9, v17);
  uint64_t v28 = v41;
  if (v41 != -1) {
LABEL_44:
  }
    ((void (*)(double **, void *))off_1ECABEC60[v28])(&v35, v40);
  return LOWORD(v27);
}

uint64_t WGSL::constantSaturate@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18269A5A0);
  }
  LOBYTE(v49[0]) = 0;
  unsigned int v50 = -1;
  uint64_t v4 = v3[6];
  if (v4 == -1) {
    goto LABEL_84;
  }
  int v5 = (double *)(v3 + 2);
  unsigned int v6 = off_1ECABEE88[v4];
  ((void (*)(double **, void *, _DWORD *))v6)(&v44, v49, v3 + 2);
  unsigned int v50 = v4;
  LOBYTE(v44) = 0;
  int v46 = -1;
  ((void (*)(double *, double **, void *))v6)(v41, &v44, v49);
  unsigned int v7 = 0;
  int v46 = v4;
  if (v4 == 8)
  {
    if (v44) {
      unsigned int v7 = *(_DWORD *)v44;
    }
    else {
      unsigned int v7 = 0;
    }
  }
  uint64_t result = ((uint64_t (*)(double *, double **))off_1ECABEC60[v4])(v41, &v44);
  if (!v7)
  {
    int v36 = v3[6];
    switch(v36)
    {
      case 2:
        double v38 = *v5;
        if (*v5 < 0.0) {
          double v38 = 0.0;
        }
        if (v38 > 1.0) {
          double v38 = 1.0;
        }
        *(double *)(a2 + 8) = v38;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v35 = v50;
        if (v50 == -1) {
          return result;
        }
        break;
      case 1:
        __asm { FCMP            H0, #0 }
        if (_NF) {
          _H0 = COERCE_SHORT_FLOAT(0);
        }
        if (_H0 > COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0))) {
          LOWORD(_H0) = COERCE_UNSIGNED_INT(1.0);
        }
        *(short float *)(a2 + 8) = _H0;
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v35 = v50;
        if (v50 == -1) {
          return result;
        }
        break;
      case 0:
        float v37 = *(float *)v5;
        if (*(float *)v5 < 0.0) {
          float v37 = 0.0;
        }
        if (v37 > 1.0) {
          float v37 = 1.0;
        }
        *(float *)(a2 + 8) = v37;
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v35 = v50;
        if (v50 == -1) {
          return result;
        }
        return ((uint64_t (*)(double **, void *))off_1ECABEC60[v35])(&v44, v49);
      default:
LABEL_84:
        __break(0xC471u);
        JUMPOUT(0x18269A600);
    }
    return ((uint64_t (*)(double **, void *))off_1ECABEC60[v35])(&v44, v49);
  }
  uint64_t v40 = a2;
  uint64_t v9 = 24 * v7;
  uint64_t v10 = (unsigned int *)WTF::fastMalloc((WTF *)(v9 + 8));
  *uint64_t v10 = v7;
  uint64_t v11 = 6;
  bzero(v10 + 2, 24 * ((v9 - 24) / 0x18uLL) + 24);
  unint64_t v13 = 0;
  LODWORD(v41[0]) = 0;
  unsigned int v42 = 0;
  do
  {
    if (v50 == 8)
    {
      if (v13 >= *(unsigned int *)v49[0])
      {
        __break(0xC471u);
        JUMPOUT(0x18269A580);
      }
      uint64_t v12 = v49[0] + v11 * 4 - 16;
      uint64_t v14 = *(unsigned int *)(v49[0] + v11 * 4);
      uint64_t v15 = v42;
      if (v42 == -1)
      {
        if (v14 == -1) {
          goto LABEL_22;
        }
      }
      else if (v14 == -1)
      {
        goto LABEL_82;
      }
      uint64_t v44 = v41;
      ((void (*)(double **, double *, uint64_t))off_1ECABEEE0[v14])(&v44, v41, v12);
    }
    else
    {
      uint64_t v15 = v42;
      if (v42 == -1)
      {
        if (v50 == -1) {
          goto LABEL_83;
        }
      }
      else if (v50 == -1)
      {
LABEL_82:
        ((void (*)(double **, double *, uint64_t))off_1ECABEC60[v15])(&v44, v41, v12);
        unsigned int v42 = -1;
LABEL_83:
        __break(0xC471u);
        JUMPOUT(0x18269A5E0);
      }
      uint64_t v44 = v41;
      ((void (*)(double **, double *, void *))off_1ECABEEE0[v50])(&v44, v41, v49);
    }
LABEL_22:
    if (v42)
    {
      if (v42 == 1)
      {
        __asm { FCMP            H0, #0 }
        if (_NF) {
          _H0 = COERCE_SHORT_FLOAT(0);
        }
        if (_H0 > COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0))) {
          LOWORD(_H0) = COERCE_UNSIGNED_INT(1.0);
        }
        *(short float *)&double v45 = _H0;
      }
      else
      {
        if (v42 != 2) {
          goto LABEL_83;
        }
        double v16 = v41[0];
        if (v41[0] < 0.0) {
          double v16 = 0.0;
        }
        if (v16 > 1.0) {
          double v16 = 1.0;
        }
        double v45 = v16;
      }
    }
    else
    {
      float v17 = *(float *)v41;
      if (*(float *)v41 < 0.0) {
        float v17 = 0.0;
      }
      if (v17 > 1.0) {
        float v17 = 1.0;
      }
      *(float *)&double v45 = v17;
    }
    unsigned int v47 = v42;
    int v48 = 0;
    if (v13 >= *v10)
    {
      __break(0xC471u);
      JUMPOUT(0x18269A560);
    }
    uint64_t v43 = (uint64_t)&v10[v11 - 4];
    ((void (*)(uint64_t *))off_1ECABEF38[v42])(&v43);
    if (v48 != -1) {
      ((void (*)(uint64_t *, double *))off_1ECABED68[v48])(&v43, &v45);
    }
    ++v13;
    v11 += 6;
  }
  while (v7 != v13);
  uint64_t v23 = *v10;
  uint64_t v24 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v23 + 8));
  uint64_t v26 = v24;
  *uint64_t v24 = v23;
  if (v23)
  {
    double v27 = v24 + 6;
    uint64_t v28 = 24 * v23;
    int v29 = v10 + 6;
    do
    {
      *((unsigned char *)v27 - 16) = 0;
      uint64_t v25 = v27 - 4;
      *double v27 = -1;
      uint64_t v30 = *v29;
      if (v30 != -1)
      {
        ((void (*)(double **, _DWORD *, unsigned int *))off_1ECABEE88[v30])(&v44, v25, v29 - 4);
        *double v27 = v30;
      }
      v27 += 6;
      v29 += 6;
      v28 -= 24;
    }
    while (v28);
  }
  *(void *)(v40 + 8) = v26;
  *(_DWORD *)(v40 + 24) = 8;
  *(_DWORD *)(v40 + 32) = 0;
  if (v42 != -1) {
    ((void (*)(double **, double *))off_1ECABEC60[v42])(&v44, v41);
  }
  uint64_t v31 = *v10;
  if (v31)
  {
    uint64_t v32 = 24 * v31;
    unsigned int v33 = v10 + 6;
    do
    {
      uint64_t v25 = v33 - 4;
      uint64_t v34 = *v33;
      if (v34 != -1) {
        ((void (*)(double **, _DWORD *))off_1ECABEC60[v34])(&v44, v25);
      }
      _DWORD *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  uint64_t result = WTF::fastFree((WTF *)v10, v25);
  uint64_t v35 = v50;
  if (v50 != -1) {
    return ((uint64_t (*)(void, void))off_1ECABEC60[v35])(&v44, v49);
  }
  return result;
}

uint64_t WGSL::constantSign@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18269ACA8);
  }
  LOBYTE(v57[0]) = 0;
  unsigned int v58 = -1;
  uint64_t v4 = v3[6];
  if (v4 != -1)
  {
    int v5 = (float *)(v3 + 2);
    unsigned int v6 = off_1ECABEE88[v4];
    ((void (*)(double **, void *, _DWORD *))v6)(&v52, v57, v3 + 2);
    unsigned int v58 = v4;
    LOBYTE(v52) = 0;
    int v54 = -1;
    ((void (*)(double *, double **, void *))v6)(v49, &v52, v57);
    unsigned int v7 = 0;
    int v54 = v4;
    if (v4 == 8)
    {
      if (v52) {
        unsigned int v7 = *(_DWORD *)v52;
      }
      else {
        unsigned int v7 = 0;
      }
    }
    uint64_t result = ((uint64_t (*)(double *, double **))off_1ECABEC60[v4])(v49, &v52);
    if (v7)
    {
      uint64_t v48 = a2;
      uint64_t v9 = 24 * v7;
      uint64_t v10 = (unsigned int *)WTF::fastMalloc((WTF *)(v9 + 8));
      *uint64_t v10 = v7;
      uint64_t v11 = 6;
      bzero(v10 + 2, 24 * ((v9 - 24) / 0x18uLL) + 24);
      unint64_t v13 = 0;
      LODWORD(v49[0]) = 0;
      unsigned int v50 = 0;
      while (2)
      {
        if (v58 == 8)
        {
          if (v13 >= *(unsigned int *)v57[0])
          {
            __break(0xC471u);
            JUMPOUT(0x18269AC88);
          }
          uint64_t v12 = v57[0] + v11 * 4 - 16;
          uint64_t v14 = *(unsigned int *)(v57[0] + v11 * 4);
          uint64_t v15 = v50;
          if (v50 != -1)
          {
            if (v14 == -1)
            {
LABEL_104:
              ((void (*)(double **, double *, uint64_t))off_1ECABEC60[v15])(&v52, v49, v12);
              unsigned int v50 = -1;
              goto LABEL_105;
            }
            goto LABEL_21;
          }
          if (v14 != -1)
          {
LABEL_21:
            uint64_t v52 = v49;
            ((void (*)(double **, double *, uint64_t))off_1ECABEEE0[v14])(&v52, v49, v12);
          }
        }
        else
        {
          uint64_t v15 = v50;
          if (v50 == -1)
          {
            if (v58 == -1)
            {
LABEL_105:
              __break(0xC471u);
              JUMPOUT(0x18269ACE8);
            }
          }
          else if (v58 == -1)
          {
            goto LABEL_104;
          }
          uint64_t v52 = v49;
          ((void (*)(double **, double *, void *))off_1ECABEEE0[v58])(&v52, v49, v57);
        }
        switch(v50)
        {
          case 0u:
            float v16 = 0.0;
            if (*(float *)v49 < 0.0) {
              float v16 = -1.0;
            }
            if (*(float *)v49 > 0.0) {
              float v16 = 1.0;
            }
            *(float *)&double v53 = v16;
            unsigned int v55 = v50;
            int v56 = 0;
            if (v13 >= *v10) {
              goto LABEL_101;
            }
            goto LABEL_53;
          case 1u:
            __asm { FCMP            H0, #0 }
            if (_NF) {
              LOWORD(v22) = COERCE_UNSIGNED_INT(-1.0);
            }
            else {
              short float v22 = COERCE_SHORT_FLOAT(0);
            }
            if (!(_NF ^ _VF | _ZF)) {
              LOWORD(v22) = COERCE_UNSIGNED_INT(1.0);
            }
            *(short float *)&double v53 = v22;
            unsigned int v55 = v50;
            int v56 = 0;
            if (v13 >= *v10) {
              goto LABEL_101;
            }
            goto LABEL_53;
          case 2u:
            if (v49[0] >= 0.0) {
              double v23 = 0.0;
            }
            else {
              double v23 = -1.0;
            }
            if (v49[0] > 0.0) {
              double v23 = 1.0;
            }
            double v53 = v23;
            unsigned int v55 = v50;
            int v56 = 0;
            if (v13 >= *v10) {
              goto LABEL_101;
            }
            goto LABEL_53;
          case 3u:
            if (SLODWORD(v49[0]) >= 1) {
              int v24 = 1;
            }
            else {
              int v24 = SLODWORD(v49[0]) >> 31;
            }
            goto LABEL_47;
          case 4u:
            int v24 = LODWORD(v49[0]) != 0;
LABEL_47:
            LODWORD(v53) = v24;
            unsigned int v55 = v50;
            int v56 = 0;
            if (v13 >= *v10) {
              goto LABEL_101;
            }
            goto LABEL_53;
          case 5u:
            if (*(uint64_t *)&v49[0] >= 1) {
              uint64_t v25 = 1;
            }
            else {
              uint64_t v25 = *(uint64_t *)&v49[0] >> 63;
            }
            double v53 = *(double *)&v25;
            unsigned int v55 = v50;
            int v56 = 0;
            if (v13 >= *v10)
            {
LABEL_101:
              __break(0xC471u);
              JUMPOUT(0x18269AC68);
            }
LABEL_53:
            uint64_t v51 = (uint64_t)&v10[v11 - 4];
            ((void (*)(uint64_t *))off_1ECABEF38[v50])(&v51);
            if (v56 != -1) {
              ((void (*)(uint64_t *, double *))off_1ECABED68[v56])(&v51, &v53);
            }
            ++v13;
            v11 += 6;
            if (v7 != v13) {
              continue;
            }
            uint64_t v26 = *v10;
            double v27 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v26 + 8));
            int v29 = v27;
            *double v27 = v26;
            if (v26)
            {
              uint64_t v30 = v27 + 6;
              uint64_t v31 = 24 * v26;
              uint64_t v32 = v10 + 6;
              do
              {
                *((unsigned char *)v30 - 16) = 0;
                uint64_t v28 = v30 - 4;
                *uint64_t v30 = -1;
                uint64_t v33 = *v32;
                if (v33 != -1)
                {
                  ((void (*)(double **, _DWORD *, unsigned int *))off_1ECABEE88[v33])(&v52, v28, v32 - 4);
                  *uint64_t v30 = v33;
                }
                v30 += 6;
                v32 += 6;
                v31 -= 24;
              }
              while (v31);
            }
            *(void *)(v48 + 8) = v29;
            *(_DWORD *)(v48 + 24) = 8;
            *(_DWORD *)(v48 + 32) = 0;
            if (v50 != -1) {
              ((void (*)(double **, double *))off_1ECABEC60[v50])(&v52, v49);
            }
            uint64_t v34 = *v10;
            if (v34)
            {
              uint64_t v35 = 24 * v34;
              int v36 = v10 + 6;
              do
              {
                uint64_t v28 = v36 - 4;
                uint64_t v37 = *v36;
                if (v37 != -1) {
                  ((void (*)(double **, _DWORD *))off_1ECABEC60[v37])(&v52, v28);
                }
                *int v36 = -1;
                v36 += 6;
                v35 -= 24;
              }
              while (v35);
            }
            uint64_t result = WTF::fastFree((WTF *)v10, v28);
            uint64_t v38 = v58;
            if (v58 != -1) {
              return ((uint64_t (*)(double **, void *))off_1ECABEC60[v38])(&v52, v57);
            }
            return result;
          default:
            goto LABEL_105;
        }
      }
    }
    switch(v3[6])
    {
      case 0:
        float v39 = 0.0;
        if (*v5 < 0.0) {
          float v39 = -1.0;
        }
        if (*v5 > 0.0) {
          float v39 = 1.0;
        }
        *(float *)(a2 + 8) = v39;
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v38 = v58;
        if (v58 == -1) {
          return result;
        }
        return ((uint64_t (*)(double **, void *))off_1ECABEC60[v38])(&v52, v57);
      case 1:
        __asm { FCMP            H0, #0 }
        __int16 v44 = 0;
        if (_NF) {
          __int16 v44 = COERCE_UNSIGNED_INT(-1.0);
        }
        if (!(_NF ^ _VF | _ZF)) {
          __int16 v44 = COERCE_UNSIGNED_INT(1.0);
        }
        *(_WORD *)(a2 + 8) = v44;
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v38 = v58;
        if (v58 == -1) {
          return result;
        }
        return ((uint64_t (*)(void, void))off_1ECABEC60[v38])(&v52, v57);
      case 2:
        double v45 = 0.0;
        if (*(double *)v5 < 0.0) {
          double v45 = -1.0;
        }
        if (*(double *)v5 > 0.0) {
          double v45 = 1.0;
        }
        *(double *)(a2 + 8) = v45;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v38 = v58;
        if (v58 == -1) {
          return result;
        }
        return ((uint64_t (*)(void, void))off_1ECABEC60[v38])(&v52, v57);
      case 3:
        if (*(int *)v5 >= 1) {
          int v46 = 1;
        }
        else {
          int v46 = *(int *)v5 >> 31;
        }
        *(_DWORD *)(a2 + 8) = v46;
        *(_DWORD *)(a2 + 24) = 3;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v38 = v58;
        if (v58 == -1) {
          return result;
        }
        return ((uint64_t (*)(void, void))off_1ECABEC60[v38])(&v52, v57);
      case 4:
        *(_DWORD *)(a2 + 8) = *(_DWORD *)v5 != 0;
        *(_DWORD *)(a2 + 24) = 4;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v38 = v58;
        if (v58 == -1) {
          return result;
        }
        return ((uint64_t (*)(void, void))off_1ECABEC60[v38])(&v52, v57);
      case 5:
        if (*(uint64_t *)v5 >= 1) {
          uint64_t v47 = 1;
        }
        else {
          uint64_t v47 = *(uint64_t *)v5 >> 63;
        }
        *(void *)(a2 + 8) = v47;
        *(_DWORD *)(a2 + 24) = 5;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v38 = v58;
        if (v58 == -1) {
          return result;
        }
        return ((uint64_t (*)(void, void))off_1ECABEC60[v38])(&v52, v57);
      default:
        break;
    }
  }
  __break(0xC471u);
  JUMPOUT(0x18269AD0CLL);
}

void WGSL::constantSmoothstep(unsigned int **a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  v2 = *a1;
  unsigned int v3 = **a1;
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x18269B76CLL);
  }
  if (v3 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x18269B78CLL);
  }
  if (v3 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x18269B7ACLL);
  }
  LOBYTE(v77[0]) = 0;
  unsigned int v78 = -1;
  uint64_t v4 = v2[6];
  if (v4 != -1)
  {
    ((void (*)(double *, void *, unsigned int *))off_1ECABEE88[v4])(v66, v77, v2 + 2);
    unsigned int v78 = v4;
  }
  int v5 = (double *)(v2 + 8);
  LOBYTE(v79[0]) = 0;
  unsigned int v80 = -1;
  uint64_t v6 = v2[12];
  if (v6 != -1)
  {
    ((void (*)(double *, void *, unsigned int *))off_1ECABEE88[v6])(v66, v79, v2 + 8);
    unsigned int v80 = v6;
  }
  unsigned int v7 = (double *)(v2 + 14);
  LOBYTE(v81[0]) = 0;
  unsigned int v82 = -1;
  uint64_t v8 = v2[18];
  if (v8 != -1)
  {
    ((void (*)(double *, void *, unsigned int *))off_1ECABEE88[v8])(v66, v81, v2 + 14);
    unsigned int v82 = v8;
  }
  LOBYTE(v66[0]) = 0;
  int v67 = -1;
  uint64_t v9 = v78;
  if (v78 != -1)
  {
    ((void (*)(double **, double *, void *))off_1ECABEE88[v78])(&v73, v66, v77);
    int v67 = v9;
    if (v9 == 8) {
      goto LABEL_18;
    }
    ((void (*)(double **, double *))off_1ECABEC60[v9])(&v73, v66);
  }
  LOBYTE(v66[0]) = 0;
  int v67 = -1;
  uint64_t v9 = v80;
  if (v80 == -1) {
    goto LABEL_16;
  }
  ((void (*)(double **, double *, void *))off_1ECABEE88[v80])(&v73, v66, v79);
  int v67 = v9;
  if (v9 != 8)
  {
    ((void (*)(double **, double *))off_1ECABEC60[v9])(&v73, v66);
LABEL_16:
    LOBYTE(v66[0]) = 0;
    int v67 = -1;
    uint64_t v9 = v82;
    if (v82 == -1) {
      goto LABEL_113;
    }
    ((void (*)(double **, double *, void *))off_1ECABEE88[v82])(&v73, v66, v81);
    int v67 = v9;
    if (v9 != 8) {
      goto LABEL_20;
    }
  }
LABEL_18:
  if (*(void *)&v66[0])
  {
    unsigned int v10 = **(_DWORD **)&v66[0];
    goto LABEL_21;
  }
LABEL_20:
  unsigned int v10 = 0;
LABEL_21:
  ((void (*)(double **, double *))off_1ECABEC60[v9])(&v73, v66);
  if (!v10)
  {
LABEL_113:
    unsigned int v52 = v2[6];
    if (v52 == 2)
    {
      if (v2[12] == 2 && v2[18] == 2)
      {
        double v56 = (*v7 - *((double *)v2 + 1)) / (*v5 - *((double *)v2 + 1));
        if (v56 < 0.0) {
          double v56 = 0.0;
        }
        if (v56 > 1.0) {
          double v56 = 1.0;
        }
        double v57 = v56 * v56;
        double v58 = v56 * -2.0 + 3.0;
LABEL_134:
        *(double *)(a2 + 8) = v58 * v57;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v51 = v82;
        if (v82 != -1) {
          goto LABEL_107;
        }
        goto LABEL_108;
      }
    }
    else if (v52 == 1)
    {
      if (v2[12] == 1 && v2[18] == 1)
      {
        _H0 = *((_WORD *)v2 + 4);
        _H1 = *(_WORD *)v5;
        _H2 = *(_WORD *)v7;
        __asm
        {
          FCVT            S2, H2
          FCVT            S0, H0
        }
        float v55 = _S2 - _S0;
        __asm { FCVT            S1, H1 }
        goto LABEL_129;
      }
    }
    else
    {
      if (v52)
      {
LABEL_143:
        __break(0xC471u);
        JUMPOUT(0x18269B72CLL);
      }
      if (!v2[12] && !v2[18])
      {
        _S0 = *((float *)v2 + 2);
        _S1 = *(float *)v5;
        float v55 = *(float *)v7 - _S0;
LABEL_129:
        float v63 = v55 / (float)(_S1 - _S0);
        if (v63 < 0.0) {
          float v63 = 0.0;
        }
        float v64 = 1.0;
        if (v63 <= 1.0) {
          float v64 = v63;
        }
        double v58 = (float)(v64 * v64);
        double v57 = v64 * -2.0 + 3.0;
        goto LABEL_134;
      }
    }
LABEL_141:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_142:
    __break(0xC471u);
    JUMPOUT(0x18269B7D0);
  }
  uint64_t v11 = 24 * v10;
  uint64_t v12 = (unsigned int *)WTF::fastMalloc((WTF *)(v11 + 8));
  *uint64_t v12 = v10;
  bzero(v12 + 2, 24 * ((v11 - 24) / 0x18uLL) + 24);
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  LODWORD(v66[0]) = 0;
  int v67 = 0;
  LODWORD(v68[0]) = 0;
  int v69 = 0;
  LODWORD(v70[0]) = 0;
  int v71 = 0;
  do
  {
    if (v78 == 8)
    {
      if (v14 >= *(unsigned int *)v77[0]) {
        goto LABEL_143;
      }
      uint64_t v16 = *(unsigned int *)(v77[0] + v13 + 24);
      if (v67 == -1)
      {
        if (v16 == -1) {
          goto LABEL_38;
        }
      }
      else if (v16 == -1)
      {
        goto LABEL_33;
      }
      uint64_t v73 = v66;
      ((void (*)(double **, double *, unint64_t))off_1ECABEEE0[v16])(&v73, v66, v77[0] + v13 + 8);
    }
    else
    {
      if (v67 == -1)
      {
        if (v78 == -1) {
          goto LABEL_38;
        }
      }
      else if (v78 == -1)
      {
LABEL_33:
        ((void (*)(double **, double *))off_1ECABEC60[v67])(&v73, v66);
        int v67 = -1;
        goto LABEL_38;
      }
      uint64_t v73 = v66;
      ((void (*)(double **, double *, void *))off_1ECABEEE0[v78])(&v73, v66, v77);
    }
LABEL_38:
    if (v80 == 8)
    {
      if (v14 >= *(unsigned int *)v79[0]) {
        goto LABEL_143;
      }
      uint64_t v17 = *(unsigned int *)(v79[0] + v13 + 24);
      if (v69 == -1)
      {
        if (v17 == -1) {
          goto LABEL_50;
        }
      }
      else if (v17 == -1)
      {
        goto LABEL_45;
      }
      uint64_t v73 = v68;
      ((void (*)(double **, double *, unint64_t))off_1ECABEEE0[v17])(&v73, v68, v79[0] + v13 + 8);
    }
    else
    {
      if (v69 == -1)
      {
        if (v80 == -1) {
          goto LABEL_50;
        }
      }
      else if (v80 == -1)
      {
LABEL_45:
        ((void (*)(double **, double *))off_1ECABEC60[v69])(&v73, v68);
        int v69 = -1;
        goto LABEL_50;
      }
      uint64_t v73 = v68;
      ((void (*)(double **, double *, void *))off_1ECABEEE0[v80])(&v73, v68, v79);
    }
LABEL_50:
    if (v82 == 8)
    {
      if (v14 >= *(unsigned int *)v81[0]) {
        goto LABEL_143;
      }
      uint64_t v18 = *(unsigned int *)(v81[0] + v13 + 24);
      if (v71 == -1)
      {
        if (v18 == -1) {
          goto LABEL_62;
        }
      }
      else if (v18 == -1)
      {
        goto LABEL_57;
      }
      uint64_t v73 = v70;
      ((void (*)(double **, double *, unint64_t))off_1ECABEEE0[v18])(&v73, v70, v81[0] + v13 + 8);
    }
    else
    {
      if (v71 == -1)
      {
        if (v82 == -1) {
          goto LABEL_62;
        }
      }
      else if (v82 == -1)
      {
LABEL_57:
        ((void (*)(double **, double *))off_1ECABEC60[v71])(&v73, v70);
        int v71 = -1;
        goto LABEL_62;
      }
      uint64_t v73 = v70;
      ((void (*)(double **, double *, void *))off_1ECABEEE0[v82])(&v73, v70, v81);
    }
LABEL_62:
    if (!v67)
    {
      if (v69 || v71) {
        goto LABEL_141;
      }
      _S0 = *(float *)v66;
      _S1 = *(float *)v68;
      float v24 = *(float *)v70 - *(float *)v66;
      goto LABEL_78;
    }
    if (v67 == 1)
    {
      if (v69 != 1 || v71 != 1) {
        goto LABEL_141;
      }
      _H0 = LOWORD(v66[0]);
      _H1 = LOWORD(v68[0]);
      _H2 = LOWORD(v70[0]);
      __asm
      {
        FCVT            S2, H2
        FCVT            S0, H0
      }
      float v24 = _S2 - _S0;
      __asm { FCVT            S1, H1 }
LABEL_78:
      float v33 = v24 / (float)(_S1 - _S0);
      if (v33 < 0.0) {
        float v33 = 0.0;
      }
      if (v33 <= 1.0) {
        float v34 = v33;
      }
      else {
        float v34 = 1.0;
      }
      double v21 = (float)(v34 * v34);
      double v20 = v34 * -2.0 + 3.0;
      goto LABEL_84;
    }
    if (v67 != 2) {
      goto LABEL_142;
    }
    if (v69 != 2 || v71 != 2) {
      goto LABEL_141;
    }
    double v19 = (v70[0] - v66[0]) / (v68[0] - v66[0]);
    if (v19 < 0.0) {
      double v19 = 0.0;
    }
    if (v19 > 1.0) {
      double v19 = 1.0;
    }
    double v20 = v19 * v19;
    double v21 = v19 * -2.0 + 3.0;
LABEL_84:
    double v35 = v21 * v20;
    v74[0] = v35;
    int v75 = 2;
    unsigned int v76 = 0;
    if (v14 >= *v12)
    {
      __break(0xC471u);
      JUMPOUT(0x18269B74CLL);
    }
    int v36 = &v12[v13 / 4];
    uint64_t v37 = (double *)&v12[v13 / 4 + 2];
    uint64_t v38 = v12[v13 / 4 + 6];
    if (v38 == 2)
    {
      uint64_t v15 = 0;
      *uint64_t v37 = v35;
      goto LABEL_24;
    }
    if (v38 == -1)
    {
      uint64_t v15 = 0;
      *((double *)v36 + 1) = v35;
      v36[6] = 2;
LABEL_24:
      ((void (*)(char *, double *))off_1ECABED68[v15])(&v72, v74);
      goto LABEL_25;
    }
    ((void (*)(char *, double *))off_1ECABEC60[v38])(&v72, v37);
    uint64_t v15 = v76;
    *((double *)v36 + 1) = v74[0];
    v36[6] = 2;
    if (v15 != -1) {
      goto LABEL_24;
    }
LABEL_25:
    ++v14;
    v13 += 24;
  }
  while (v11 != v13);
  uint64_t v39 = *v12;
  uint64_t v40 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v39 + 8));
  unsigned int v42 = v40;
  *uint64_t v40 = v39;
  if (v39)
  {
    uint64_t v43 = v40 + 6;
    uint64_t v44 = 24 * v39;
    double v45 = v12 + 6;
    do
    {
      *((unsigned char *)v43 - 16) = 0;
      unsigned int v41 = v43 - 4;
      *uint64_t v43 = -1;
      uint64_t v46 = *v45;
      if (v46 != -1)
      {
        ((void (*)(double **, _DWORD *, unsigned int *))off_1ECABEE88[v46])(&v73, v41, v45 - 4);
        *uint64_t v43 = v46;
      }
      v43 += 6;
      v45 += 6;
      v44 -= 24;
    }
    while (v44);
  }
  *(void *)(a2 + 8) = v42;
  *(_DWORD *)(a2 + 24) = 8;
  *(_DWORD *)(a2 + 32) = 0;
  if (v71 != -1) {
    ((void (*)(double **, double *))off_1ECABEC60[v71])(&v73, v70);
  }
  int v71 = -1;
  if (v69 != -1) {
    ((void (*)(double **, double *))off_1ECABEC60[v69])(&v73, v68);
  }
  int v69 = -1;
  if (v67 != -1) {
    ((void (*)(double **, double *))off_1ECABEC60[v67])(&v73, v66);
  }
  uint64_t v47 = *v12;
  if (v47)
  {
    uint64_t v48 = 24 * v47;
    uint64_t v49 = v12 + 6;
    do
    {
      unsigned int v41 = v49 - 4;
      uint64_t v50 = *v49;
      if (v50 != -1) {
        ((void (*)(double *, _DWORD *))off_1ECABEC60[v50])(v66, v41);
      }
      *uint64_t v49 = -1;
      v49 += 6;
      v48 -= 24;
    }
    while (v48);
  }
  WTF::fastFree((WTF *)v12, v41);
  uint64_t v51 = v82;
  if (v82 != -1) {
LABEL_107:
  }
    ((void (*)(double *, void *))off_1ECABEC60[v51])(v66, v81);
LABEL_108:
  unsigned int v82 = -1;
  if (v80 != -1) {
    ((void (*)(double *, void *))off_1ECABEC60[v80])(v66, v79);
  }
  unsigned int v80 = -1;
  if (v78 != -1) {
    ((void (*)(double *, void *))off_1ECABEC60[v78])(v66, v77);
  }
}

__int16 WGSL::constantSqrt@<H0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18269BCC0);
  }
  LOBYTE(v49[0]) = 0;
  unsigned int v50 = -1;
  uint64_t v4 = v3[6];
  if (v4 == -1) {
    goto LABEL_60;
  }
  int v5 = (double *)(v3 + 2);
  uint64_t v6 = off_1ECABEE88[v4];
  ((void (*)(double **, void *, _DWORD *))v6)(&v44, v49, v3 + 2);
  unsigned int v50 = v4;
  LOBYTE(v44) = 0;
  int v46 = -1;
  ((void (*)(double *, double **, void *))v6)(v41, &v44, v49);
  unsigned int v7 = 0;
  int v46 = v4;
  if (v4 == 8)
  {
    if (v44) {
      unsigned int v7 = *(_DWORD *)v44;
    }
    else {
      unsigned int v7 = 0;
    }
  }
  ((void (*)(double *, double **))off_1ECABEC60[v4])(v41, &v44);
  if (!v7)
  {
    int v36 = v3[6];
    switch(v36)
    {
      case 2:
        _D0 = sqrt(*v5);
        *(double *)(a2 + 8) = _D0;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v35 = v50;
        if (v50 != -1) {
          goto LABEL_44;
        }
        return LOWORD(_D0);
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0 }
        *(float *)&_D0 = sqrtf(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v35 = v50;
        if (v50 != -1) {
          goto LABEL_44;
        }
        return LOWORD(_D0);
      case 0:
        *(float *)&_D0 = sqrtf(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(_D0);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v35 = v50;
        if (v50 != -1) {
          goto LABEL_44;
        }
        return LOWORD(_D0);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x18269BD20);
  }
  uint64_t v40 = a2;
  uint64_t v8 = 24 * v7;
  uint64_t v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *uint64_t v9 = v7;
  uint64_t v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  unint64_t v12 = 0;
  LODWORD(v41[0]) = 0;
  unsigned int v42 = 0;
  do
  {
    if (v50 == 8)
    {
      if (v12 >= *(unsigned int *)v49[0])
      {
        __break(0xC471u);
        JUMPOUT(0x18269BCA0);
      }
      uint64_t v11 = v49[0] + v10 * 4 - 16;
      uint64_t v13 = *(unsigned int *)(v49[0] + v10 * 4);
      uint64_t v14 = v42;
      if (v42 == -1)
      {
        if (v13 == -1) {
          goto LABEL_22;
        }
      }
      else if (v13 == -1)
      {
        goto LABEL_58;
      }
      uint64_t v44 = v41;
      ((void (*)(double **, double *, uint64_t))off_1ECABEEE0[v13])(&v44, v41, v11);
    }
    else
    {
      uint64_t v14 = v42;
      if (v42 == -1)
      {
        if (v50 == -1) {
          goto LABEL_59;
        }
      }
      else if (v50 == -1)
      {
LABEL_58:
        ((void (*)(double **, double *, uint64_t))off_1ECABEC60[v14])(&v44, v41, v11);
        unsigned int v42 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x18269BD00);
      }
      uint64_t v44 = v41;
      ((void (*)(double **, double *, void *))off_1ECABEEE0[v50])(&v44, v41, v49);
    }
LABEL_22:
    if (v42)
    {
      if (v42 == 1)
      {
        _H0 = LOWORD(v41[0]);
        __asm { FCVT            S0, H0 }
        _S0 = sqrtf(_S0);
        __asm { FCVT            H0, S0 }
        LOWORD(v45) = LOWORD(_S0);
      }
      else
      {
        if (v42 != 2) {
          goto LABEL_59;
        }
        double v45 = sqrt(v41[0]);
      }
    }
    else
    {
      LODWORD(v45) = sqrtf(*(float *)v41);
    }
    unsigned int v47 = v42;
    int v48 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x18269BC80);
    }
    uint64_t v43 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1ECABEF38[v42])(&v43);
    if (v48 != -1) {
      ((void (*)(uint64_t *, double *))off_1ECABED68[v48])(&v43, &v45);
    }
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  uint64_t v22 = *v9;
  double v23 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v22 + 8));
  uint64_t v25 = v23;
  *double v23 = v22;
  if (v22)
  {
    uint64_t v26 = v23 + 6;
    uint64_t v27 = 24 * v22;
    uint64_t v28 = v9 + 6;
    do
    {
      *((unsigned char *)v26 - 16) = 0;
      float v24 = v26 - 4;
      _DWORD *v26 = -1;
      uint64_t v29 = *v28;
      if (v29 != -1)
      {
        ((void (*)(double **, _DWORD *, unsigned int *))off_1ECABEE88[v29])(&v44, v24, v28 - 4);
        _DWORD *v26 = v29;
      }
      v26 += 6;
      v28 += 6;
      v27 -= 24;
    }
    while (v27);
  }
  *(void *)(v40 + 8) = v25;
  *(_DWORD *)(v40 + 24) = 8;
  *(_DWORD *)(v40 + 32) = 0;
  if (v42 != -1) {
    ((void (*)(double **, double *))off_1ECABEC60[v42])(&v44, v41);
  }
  uint64_t v30 = *v9;
  if (v30)
  {
    uint64_t v31 = 24 * v30;
    uint64_t v32 = v9 + 6;
    do
    {
      float v24 = v32 - 4;
      uint64_t v33 = *v32;
      if (v33 != -1) {
        ((void (*)(double **, _DWORD *))off_1ECABEC60[v33])(&v44, v24);
      }
      *uint64_t v32 = -1;
      v32 += 6;
      v31 -= 24;
    }
    while (v31);
  }
  WTF::fastFree((WTF *)v9, v24);
  uint64_t v35 = v50;
  if (v50 != -1) {
LABEL_44:
  }
    ((void (*)(double **, void *))off_1ECABEC60[v35])(&v44, v49);
  return LOWORD(_D0);
}

void WGSL::constantStep(int **a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *a1;
  int v4 = **a1;
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x18269C4B8);
  }
  if (v4 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x18269C4D8);
  }
  int v5 = (double *)(v3 + 2);
  LOBYTE(v51[0]) = 0;
  int v52 = -1;
  uint64_t v6 = v3[6];
  if (v6 != -1)
  {
    ((void (*)(double *, void *, int *))off_1ECABEE88[v6])(v42, v51, v3 + 2);
    int v52 = v6;
  }
  unsigned int v7 = (double *)(v3 + 8);
  LOBYTE(v53[0]) = 0;
  unsigned int v54 = -1;
  uint64_t v8 = v3[12];
  if (v8 != -1)
  {
    ((void (*)(double *, void *, int *))off_1ECABEE88[v8])(v42, v53, v3 + 8);
    unsigned int v54 = v8;
    LODWORD(v6) = v52;
  }
  LOBYTE(v42[0]) = 0;
  int v43 = -1;
  if (v6 == -1)
  {
LABEL_12:
    LOBYTE(v42[0]) = 0;
    int v43 = -1;
    if (v8 == -1
      || ((((void (*)(double **, double *, void *))off_1ECABEE88[v8])(&v47, v42, v53),
           int v43 = v8,
           v8 != 8)
       || !*(void *)&v42[0]
        ? (unsigned int v10 = 0)
        : (unsigned int v10 = **(_DWORD **)&v42[0]),
          ((void (*)(double **, double *))off_1ECABEC60[v8])(&v47, v42),
          !v10))
    {
LABEL_85:
      int v37 = v3[6];
      if (v37 == 2)
      {
        if (v3[12] != 2) {
          goto LABEL_108;
        }
        BOOL v38 = *v5 > *v7;
      }
      else
      {
        if (v37 != 1)
        {
          if (v37)
          {
LABEL_110:
            __break(0xC471u);
            JUMPOUT(0x18269C478);
          }
          if (!v3[12])
          {
            BOOL v38 = *(float *)v5 > *(float *)v7;
            goto LABEL_94;
          }
LABEL_108:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_109:
          __break(0xC471u);
          JUMPOUT(0x18269C4FCLL);
        }
        if (v3[12] != 1) {
          goto LABEL_108;
        }
        BOOL v38 = *(short float *)v5 > *(short float *)v7;
      }
LABEL_94:
      int v39 = !v38;
      double v40 = 0.0;
      if (v39) {
        double v40 = 1.0;
      }
      *(double *)(a2 + 8) = v40;
      *(_DWORD *)(a2 + 24) = 2;
      *(_DWORD *)(a2 + 32) = 0;
      uint64_t v36 = v54;
      if (v54 == -1) {
        goto LABEL_101;
      }
LABEL_100:
      ((void (*)(double *, void *))off_1ECABEC60[v36])(v42, v53);
      goto LABEL_101;
    }
    goto LABEL_18;
  }
  uint64_t v9 = v6;
  ((void (*)(double **, double *, void *))off_1ECABEE88[v6])(&v47, v42, v51);
  int v43 = v6;
  if (v6 != 8)
  {
    ((void (*)(double **, double *))off_1ECABEC60[v6])(&v47, v42);
    LODWORD(v8) = v54;
    goto LABEL_12;
  }
  if (*(void *)&v42[0]) {
    unsigned int v10 = **(_DWORD **)&v42[0];
  }
  else {
    unsigned int v10 = 0;
  }
  ((void (*)(double **, double *))off_1ECABEC60[v9])(&v47, v42);
  if (!v10) {
    goto LABEL_85;
  }
LABEL_18:
  uint64_t v41 = a2;
  uint64_t v11 = 24 * v10;
  unint64_t v12 = (unsigned int *)WTF::fastMalloc((WTF *)(v11 + 8));
  *unint64_t v12 = v10;
  bzero(v12 + 2, 24 * ((v11 - 24) / 0x18uLL) + 24);
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  LODWORD(v42[0]) = 0;
  int v43 = 0;
  LODWORD(v44[0]) = 0;
  int v45 = 0;
  do
  {
    if (v52 == 8)
    {
      if (v14 >= *(unsigned int *)v51[0]) {
        goto LABEL_110;
      }
      uint64_t v16 = *(unsigned int *)(v51[0] + v13 + 24);
      if (v43 == -1)
      {
        if (v16 == -1) {
          goto LABEL_34;
        }
      }
      else if (v16 == -1)
      {
        goto LABEL_29;
      }
      unsigned int v47 = v42;
      ((void (*)(double **, double *, unint64_t))off_1ECABEEE0[v16])(&v47, v42, v51[0] + v13 + 8);
    }
    else
    {
      if (v43 == -1)
      {
        if (v52 == -1) {
          goto LABEL_34;
        }
      }
      else if (v52 == -1)
      {
LABEL_29:
        ((void (*)(double **, double *))off_1ECABEC60[v43])(&v47, v42);
        int v43 = -1;
        goto LABEL_34;
      }
      unsigned int v47 = v42;
      ((void (*)(double **, double *, void *))off_1ECABEEE0[v52])(&v47, v42, v51);
    }
LABEL_34:
    if (v54 == 8)
    {
      if (v14 >= *(unsigned int *)v53[0]) {
        goto LABEL_110;
      }
      uint64_t v17 = *(unsigned int *)(v53[0] + v13 + 24);
      if (v45 == -1)
      {
        if (v17 == -1) {
          goto LABEL_46;
        }
      }
      else if (v17 == -1)
      {
        goto LABEL_41;
      }
      unsigned int v47 = v44;
      ((void (*)(double **, double *, unint64_t))off_1ECABEEE0[v17])(&v47, v44, v53[0] + v13 + 8);
    }
    else
    {
      if (v45 == -1)
      {
        if (v54 == -1) {
          goto LABEL_46;
        }
      }
      else if (v54 == -1)
      {
LABEL_41:
        ((void (*)(double **, double *))off_1ECABEC60[v45])(&v47, v44);
        int v45 = -1;
        goto LABEL_46;
      }
      unsigned int v47 = v44;
      ((void (*)(double **, double *, void *))off_1ECABEEE0[v54])(&v47, v44, v53);
    }
LABEL_46:
    if (v43)
    {
      if (v43 == 1)
      {
        if (v45 != 1) {
          goto LABEL_108;
        }
        BOOL v18 = *(short float *)v42 > *(short float *)v44;
      }
      else
      {
        if (v43 != 2) {
          goto LABEL_109;
        }
        if (v45 != 2) {
          goto LABEL_108;
        }
        BOOL v18 = v42[0] > v44[0];
      }
    }
    else
    {
      if (v45) {
        goto LABEL_108;
      }
      BOOL v18 = *(float *)v42 > *(float *)v44;
    }
    if (!v18) {
      double v20 = 1.0;
    }
    else {
      double v20 = 0.0;
    }
    v48[0] = v20;
    int v49 = 2;
    unsigned int v50 = 0;
    if (v14 >= *v12)
    {
      __break(0xC471u);
      JUMPOUT(0x18269C498);
    }
    double v21 = &v12[v13 / 4];
    uint64_t v22 = (double *)&v12[v13 / 4 + 2];
    uint64_t v23 = v12[v13 / 4 + 6];
    if (v23 == 2)
    {
      uint64_t v15 = 0;
      *uint64_t v22 = v20;
LABEL_20:
      ((void (*)(char *, double *))off_1ECABED68[v15])(&v46, v48);
      goto LABEL_21;
    }
    if (v23 == -1)
    {
      uint64_t v15 = 0;
      *((double *)v21 + 1) = v20;
      v21[6] = 2;
      goto LABEL_20;
    }
    ((void (*)(char *, double *))off_1ECABEC60[v23])(&v46, v22);
    uint64_t v15 = v50;
    *((double *)v21 + 1) = v48[0];
    v21[6] = 2;
    if (v15 != -1) {
      goto LABEL_20;
    }
LABEL_21:
    ++v14;
    v13 += 24;
  }
  while (v11 != v13);
  uint64_t v24 = *v12;
  uint64_t v25 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v24 + 8));
  uint64_t v27 = v25;
  _DWORD *v25 = v24;
  if (v24)
  {
    uint64_t v28 = v25 + 6;
    uint64_t v29 = 24 * v24;
    uint64_t v30 = v12 + 6;
    do
    {
      *((unsigned char *)v28 - 16) = 0;
      uint64_t v26 = v28 - 4;
      *uint64_t v28 = -1;
      uint64_t v31 = *v30;
      if (v31 != -1)
      {
        ((void (*)(double **, _DWORD *, unsigned int *))off_1ECABEE88[v31])(&v47, v26, v30 - 4);
        *uint64_t v28 = v31;
      }
      v28 += 6;
      v30 += 6;
      v29 -= 24;
    }
    while (v29);
  }
  *(void *)(v41 + 8) = v27;
  *(_DWORD *)(v41 + 24) = 8;
  *(_DWORD *)(v41 + 32) = 0;
  if (v45 != -1) {
    ((void (*)(double **, double *))off_1ECABEC60[v45])(&v47, v44);
  }
  int v45 = -1;
  if (v43 != -1) {
    ((void (*)(double **, double *))off_1ECABEC60[v43])(&v47, v42);
  }
  uint64_t v32 = *v12;
  if (v32)
  {
    uint64_t v33 = 24 * v32;
    float v34 = v12 + 6;
    do
    {
      uint64_t v26 = v34 - 4;
      uint64_t v35 = *v34;
      if (v35 != -1) {
        ((void (*)(double *, _DWORD *))off_1ECABEC60[v35])(v42, v26);
      }
      *float v34 = -1;
      v34 += 6;
      v33 -= 24;
    }
    while (v33);
  }
  WTF::fastFree((WTF *)v12, v26);
  uint64_t v36 = v54;
  if (v54 != -1) {
    goto LABEL_100;
  }
LABEL_101:
  unsigned int v54 = -1;
  if (v52 != -1) {
    ((void (*)(double *, void *))off_1ECABEC60[v52])(v42, v51);
  }
}

void WGSL::constantTranspose(void *a1@<X1>, uint64_t a2@<X8>)
{
  v2 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18269C854);
  }
  if (v2[6] == 9)
  {
    uint64_t v3 = v2[2];
    uint64_t v4 = v2[3];
    unsigned int v5 = v4 * v3;
    if (v4 * v3)
    {
      uint64_t v6 = v2[2];
      unsigned int v7 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v5 + 8));
      *unsigned int v7 = v5;
      bzero(v7 + 2, 24 * ((24 * (unint64_t)v5 - 24) / 0x18) + 24);
      uint64_t v3 = v6;
      uint64_t v32 = v4 | (v6 << 32);
      if (v4) {
        BOOL v8 = v6 == 0;
      }
      else {
        BOOL v8 = 1;
      }
      if (!v8)
      {
LABEL_25:
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        uint64_t v34 = v3;
        while (1)
        {
          unint64_t v24 = v22;
          uint64_t v25 = &v7[6 * v22 + 6];
          unsigned int v26 = v23;
          unsigned int v35 = v22;
          uint64_t v27 = v3;
          do
          {
            while (1)
            {
              uint64_t v28 = (unsigned int *)*((void *)v2 + 2);
              if (*v28 <= v26)
              {
                __break(0xC471u);
                JUMPOUT(0x18269C814);
              }
              if (v24 >= *v7)
              {
                __break(0xC471u);
                JUMPOUT(0x18269C834);
              }
              uint64_t v29 = *v25;
              uint64_t v30 = v28[6 * v26 + 6];
              if (v29 != -1) {
                break;
              }
              if (v30 != -1) {
                goto LABEL_29;
              }
LABEL_30:
              v25 += 6;
              ++v24;
              v26 += v4;
              if (!--v27) {
                goto LABEL_26;
              }
            }
            if (v30 != -1)
            {
LABEL_29:
              BOOL v38 = v25 - 4;
              ((void (*)(unsigned int **))off_1ECABEEE0[v30])(&v38);
              goto LABEL_30;
            }
            ((void (*)(char *, unsigned int *))off_1ECABEC60[v29])(&v39, v25 - 4);
            unsigned int *v25 = -1;
            v25 += 6;
            ++v24;
            v26 += v4;
            --v27;
          }
          while (v27);
LABEL_26:
          ++v23;
          uint64_t v3 = v34;
          unsigned int v22 = v35 + v34;
          if (v23 == v4) {
            goto LABEL_10;
          }
        }
      }
    }
    else
    {
      unsigned int v7 = 0;
      uint64_t v32 = v4 | (v3 << 32);
      if (v4) {
        BOOL v21 = v3 == 0;
      }
      else {
        BOOL v21 = 1;
      }
      if (!v21) {
        goto LABEL_25;
      }
    }
    if (v7)
    {
LABEL_10:
      uint64_t v9 = *v7;
      unsigned int v10 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v9 + 8));
      unint64_t v12 = v10;
      *unsigned int v10 = v9;
      if (v9)
      {
        unint64_t v13 = v10 + 6;
        uint64_t v14 = 24 * v9;
        uint64_t v15 = v7 + 6;
        do
        {
          *((unsigned char *)v13 - 16) = 0;
          uint64_t v11 = v13 - 4;
          _DWORD *v13 = -1;
          uint64_t v16 = *v15;
          if (v16 != -1)
          {
            ((void (*)(char *, _DWORD *, unsigned int *))off_1ECABEE88[v16])(&v36, v11, v15 - 4);
            _DWORD *v13 = v16;
          }
          v13 += 6;
          v15 += 6;
          v14 -= 24;
        }
        while (v14);
      }
      *(void *)(a2 + 8) = v32;
      *(void *)(a2 + 16) = v12;
      *(_DWORD *)(a2 + 24) = 9;
      *(_DWORD *)(a2 + 32) = 0;
      uint64_t v17 = *v7;
      if (v17)
      {
        uint64_t v18 = 24 * v17;
        double v19 = v7 + 6;
        do
        {
          uint64_t v11 = v19 - 4;
          uint64_t v20 = *v19;
          if (v20 != -1) {
            ((void (*)(char *, _DWORD *))off_1ECABEC60[v20])(&v37, v11);
          }
          *double v19 = -1;
          v19 += 6;
          v18 -= 24;
        }
        while (v18);
      }
      WTF::fastFree((WTF *)v7, v11);
    }
    else
    {
      *(void *)(a2 + 8) = v32;
      *(void *)(a2 + 16) = 0;
      *(_DWORD *)(a2 + 24) = 9;
      *(_DWORD *)(a2 + 32) = 0;
    }
  }
  else
  {
    uint64_t v31 = std::__throw_bad_variant_access[abi:sn180100]();
    WGSL::constantTrunc(v31);
  }
}

__int16 WGSL::constantTrunc@<H0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18269CD14);
  }
  LOBYTE(v40[0]) = 0;
  unsigned int v41 = -1;
  uint64_t v4 = v3[6];
  if (v4 == -1) {
    goto LABEL_60;
  }
  unsigned int v5 = (double *)(v3 + 2);
  uint64_t v6 = off_1ECABEE88[v4];
  ((void (*)(double **, void *, _DWORD *))v6)(&v35, v40, v3 + 2);
  unsigned int v41 = v4;
  LOBYTE(v35) = 0;
  int v37 = -1;
  ((void (*)(double *, double **, void *))v6)(v32, &v35, v40);
  unsigned int v7 = 0;
  int v37 = v4;
  if (v4 == 8)
  {
    if (v35) {
      unsigned int v7 = *(_DWORD *)v35;
    }
    else {
      unsigned int v7 = 0;
    }
  }
  ((void (*)(double *, double **))off_1ECABEC60[v4])(v32, &v35);
  if (!v7)
  {
    int v29 = v3[6];
    switch(v29)
    {
      case 2:
        double v27 = trunc(*v5);
        *(double *)(a2 + 8) = v27;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v28 = v41;
        if (v41 != -1) {
          goto LABEL_44;
        }
        return LOWORD(v27);
      case 1:
        *(short float *)&double v27 = truncl(*(short float *)v5);
        *(_WORD *)(a2 + 8) = LOWORD(v27);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v28 = v41;
        if (v41 != -1) {
          goto LABEL_44;
        }
        return LOWORD(v27);
      case 0:
        *(float *)&double v27 = truncf(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(v27);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        uint64_t v28 = v41;
        if (v41 != -1) {
          goto LABEL_44;
        }
        return LOWORD(v27);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x18269CD74);
  }
  uint64_t v31 = a2;
  uint64_t v8 = 24 * v7;
  uint64_t v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *uint64_t v9 = v7;
  uint64_t v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  unint64_t v12 = 0;
  LODWORD(v32[0]) = 0;
  unsigned int v33 = 0;
  do
  {
    if (v41 == 8)
    {
      if (v12 >= *(unsigned int *)v40[0])
      {
        __break(0xC471u);
        JUMPOUT(0x18269CCF4);
      }
      uint64_t v11 = v40[0] + v10 * 4 - 16;
      uint64_t v13 = *(unsigned int *)(v40[0] + v10 * 4);
      uint64_t v14 = v33;
      if (v33 == -1)
      {
        if (v13 == -1) {
          goto LABEL_22;
        }
      }
      else if (v13 == -1)
      {
        goto LABEL_58;
      }
      unsigned int v35 = v32;
      ((void (*)(double **, double *, uint64_t))off_1ECABEEE0[v13])(&v35, v32, v11);
    }
    else
    {
      uint64_t v14 = v33;
      if (v33 == -1)
      {
        if (v41 == -1) {
          goto LABEL_59;
        }
      }
      else if (v41 == -1)
      {
LABEL_58:
        ((void (*)(double **, double *, uint64_t))off_1ECABEC60[v14])(&v35, v32, v11);
        unsigned int v33 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x18269CD54);
      }
      unsigned int v35 = v32;
      ((void (*)(double **, double *, void *))off_1ECABEEE0[v41])(&v35, v32, v40);
    }
LABEL_22:
    if (v33)
    {
      if (v33 == 1)
      {
        LOWORD(v36) = truncl(*(short float *)v32);
      }
      else
      {
        if (v33 != 2) {
          goto LABEL_59;
        }
        double v36 = trunc(v32[0]);
      }
    }
    else
    {
      LODWORD(v36) = truncf(*(float *)v32);
    }
    unsigned int v38 = v33;
    int v39 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x18269CCD4);
    }
    uint64_t v34 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1ECABEF38[v33])(&v34);
    if (v39 != -1) {
      ((void (*)(uint64_t *, double *))off_1ECABED68[v39])(&v34, &v36);
    }
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  uint64_t v15 = *v9;
  uint64_t v16 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v15 + 8));
  uint64_t v18 = v16;
  *uint64_t v16 = v15;
  if (v15)
  {
    double v19 = v16 + 6;
    uint64_t v20 = 24 * v15;
    BOOL v21 = v9 + 6;
    do
    {
      *((unsigned char *)v19 - 16) = 0;
      uint64_t v17 = v19 - 4;
      *double v19 = -1;
      uint64_t v22 = *v21;
      if (v22 != -1)
      {
        ((void (*)(double **, _DWORD *, unsigned int *))off_1ECABEE88[v22])(&v35, v17, v21 - 4);
        *double v19 = v22;
      }
      v19 += 6;
      v21 += 6;
      v20 -= 24;
    }
    while (v20);
  }
  *(void *)(v31 + 8) = v18;
  *(_DWORD *)(v31 + 24) = 8;
  *(_DWORD *)(v31 + 32) = 0;
  if (v33 != -1) {
    ((void (*)(double **, double *))off_1ECABEC60[v33])(&v35, v32);
  }
  uint64_t v23 = *v9;
  if (v23)
  {
    uint64_t v24 = 24 * v23;
    uint64_t v25 = v9 + 6;
    do
    {
      uint64_t v17 = v25 - 4;
      uint64_t v26 = *v25;
      if (v26 != -1) {
        ((void (*)(double **, _DWORD *))off_1ECABEC60[v26])(&v35, v17);
      }
      _DWORD *v25 = -1;
      v25 += 6;
      v24 -= 24;
    }
    while (v24);
  }
  WTF::fastFree((WTF *)v9, v17);
  uint64_t v28 = v41;
  if (v41 != -1) {
LABEL_44:
  }
    ((void (*)(double **, void *))off_1ECABEC60[v28])(&v35, v40);
  return LOWORD(v27);
}

void WGSL::constantPack4x8snorm(void *a1@<X1>, _DWORD *a2@<X8>)
{
  v2 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18269CEE0);
  }
  if (v2[6] != 8) {
    goto LABEL_26;
  }
  uint64_t v3 = (float *)*((void *)v2 + 1);
  float v4 = *v3;
  if (!*(_DWORD *)v3) {
    goto LABEL_24;
  }
  if (*((_DWORD *)v3 + 6))
  {
LABEL_26:
    uint64_t v16 = std::__throw_bad_variant_access[abi:sn180100]();
    WGSL::constantPack4x8unorm(v16);
    return;
  }
  if (LODWORD(v4) == 1)
  {
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x18269CEC0);
  }
  if (*((_DWORD *)v3 + 12)) {
    goto LABEL_26;
  }
  if (LODWORD(v4) == 2) {
    goto LABEL_24;
  }
  if (*((_DWORD *)v3 + 18)) {
    goto LABEL_26;
  }
  if (LODWORD(v4) == 3) {
    goto LABEL_24;
  }
  if (*((_DWORD *)v3 + 24)) {
    goto LABEL_26;
  }
  float v5 = fmaxf(v3[14], -1.0);
  if (v5 >= 1.0) {
    float v6 = 127.0;
  }
  else {
    float v6 = v5 * 127.0;
  }
  unsigned __int8 v7 = vcvtmd_s64_f64(v6 + 0.5);
  float v8 = fmaxf(v3[8], -1.0);
  if (v8 >= 1.0) {
    float v9 = 127.0;
  }
  else {
    float v9 = v8 * 127.0;
  }
  unsigned __int8 v10 = vcvtmd_s64_f64(v9 + 0.5);
  float v11 = fmaxf(v3[2], -1.0);
  if (v11 >= 1.0) {
    float v12 = 127.0;
  }
  else {
    float v12 = v11 * 127.0;
  }
  unsigned __int8 v13 = vcvtmd_s64_f64(v12 + 0.5);
  float v14 = fmaxf(v3[20], -1.0);
  if (v14 >= 1.0) {
    float v15 = 127.0;
  }
  else {
    float v15 = v14 * 127.0;
  }
  a2[2] = (v7 << 16) | (vcvtmd_s64_f64(v15 + 0.5) << 24) | (v10 << 8) | v13;
  a2[6] = 4;
  a2[8] = 0;
}

void WGSL::constantPack4x8unorm(void *a1@<X1>, _DWORD *a2@<X8>)
{
  v2 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18269D048);
  }
  if (v2[6] != 8) {
    goto LABEL_26;
  }
  uint64_t v3 = (float *)*((void *)v2 + 1);
  float v4 = *v3;
  if (!*(_DWORD *)v3) {
    goto LABEL_24;
  }
  if (*((_DWORD *)v3 + 6))
  {
LABEL_26:
    uint64_t v16 = std::__throw_bad_variant_access[abi:sn180100]();
    WGSL::constantPack4xI8(v16);
    return;
  }
  if (LODWORD(v4) == 1)
  {
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x18269D028);
  }
  if (*((_DWORD *)v3 + 12)) {
    goto LABEL_26;
  }
  if (LODWORD(v4) == 2) {
    goto LABEL_24;
  }
  if (*((_DWORD *)v3 + 18)) {
    goto LABEL_26;
  }
  if (LODWORD(v4) == 3) {
    goto LABEL_24;
  }
  if (*((_DWORD *)v3 + 24)) {
    goto LABEL_26;
  }
  float v5 = fmaxf(v3[14], 0.0);
  if (v5 >= 1.0) {
    float v6 = 255.0;
  }
  else {
    float v6 = v5 * 255.0;
  }
  unsigned int v7 = vcvtmd_s64_f64(v6 + 0.5);
  float v8 = fmaxf(v3[8], 0.0);
  if (v8 >= 1.0) {
    float v9 = 255.0;
  }
  else {
    float v9 = v8 * 255.0;
  }
  unsigned int v10 = vcvtmd_s64_f64(v9 + 0.5);
  float v11 = fmaxf(v3[2], 0.0);
  if (v11 >= 1.0) {
    float v12 = 255.0;
  }
  else {
    float v12 = v11 * 255.0;
  }
  unsigned int v13 = vcvtmd_s64_f64(v12 + 0.5);
  float v14 = fmaxf(v3[20], 0.0);
  if (v14 >= 1.0) {
    float v15 = 255.0;
  }
  else {
    float v15 = v14 * 255.0;
  }
  a2[2] = (v7 << 16) | (vcvtmd_s64_f64(v15 + 0.5) << 24) | (v10 << 8) | v13;
  a2[6] = 4;
  a2[8] = 0;
}

void WGSL::constantPack4xI8(void *a1@<X1>, _DWORD *a2@<X8>)
{
  v2 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18269D13CLL);
  }
  if (v2[6] != 8) {
    goto LABEL_14;
  }
  uint64_t v3 = (int *)*((void *)v2 + 1);
  int v4 = *v3;
  if (!*v3) {
    goto LABEL_12;
  }
  if (v3[6] != 3) {
    goto LABEL_14;
  }
  if (v4 == 1) {
    goto LABEL_12;
  }
  if (v3[12] != 3) {
    goto LABEL_14;
  }
  if (v4 == 2) {
    goto LABEL_12;
  }
  if (v3[18] != 3) {
    goto LABEL_14;
  }
  if (v4 == 3)
  {
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x18269D11CLL);
  }
  if (v3[24] == 3)
  {
    a2[2] = (v3[14] << 16) | (v3[20] << 24) | (v3[8] << 8) | *((unsigned __int8 *)v3
                                                                                               + 8);
    a2[6] = 4;
    a2[8] = 0;
    return;
  }
LABEL_14:
  uint64_t v5 = std::__throw_bad_variant_access[abi:sn180100]();
  WGSL::constantPack4xU8(v5);
}

void WGSL::constantPack4xU8(void *a1@<X1>, _DWORD *a2@<X8>)
{
  v2 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18269D230);
  }
  if (v2[6] != 8) {
    goto LABEL_14;
  }
  uint64_t v3 = (int *)*((void *)v2 + 1);
  int v4 = *v3;
  if (!*v3) {
    goto LABEL_12;
  }
  if (v3[6] != 4) {
    goto LABEL_14;
  }
  if (v4 == 1) {
    goto LABEL_12;
  }
  if (v3[12] != 4) {
    goto LABEL_14;
  }
  if (v4 == 2) {
    goto LABEL_12;
  }
  if (v3[18] != 4) {
    goto LABEL_14;
  }
  if (v4 == 3)
  {
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x18269D210);
  }
  if (v3[24] == 4)
  {
    a2[2] = (v3[14] << 16) | (v3[20] << 24) | (v3[8] << 8) | *((unsigned __int8 *)v3
                                                                                               + 8);
    a2[6] = 4;
    a2[8] = 0;
    return;
  }
LABEL_14:
  uint64_t v5 = std::__throw_bad_variant_access[abi:sn180100]();
  WGSL::constantPack4xI8Clamp(v5);
}

void WGSL::constantPack4xI8Clamp(void *a1@<X1>, _DWORD *a2@<X8>)
{
  v2 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18269D36CLL);
  }
  if (v2[6] != 8) {
    goto LABEL_30;
  }
  uint64_t v3 = (int *)*((void *)v2 + 1);
  int v4 = *v3;
  if (!*v3) {
    goto LABEL_28;
  }
  if (v3[6] != 3)
  {
LABEL_30:
    uint64_t v9 = std::__throw_bad_variant_access[abi:sn180100]();
    WGSL::constantPack4xU8Clamp(v9);
    return;
  }
  if (v4 == 1)
  {
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x18269D34CLL);
  }
  if (v3[12] != 3) {
    goto LABEL_30;
  }
  if (v4 == 2) {
    goto LABEL_28;
  }
  if (v3[18] != 3) {
    goto LABEL_30;
  }
  if (v4 == 3) {
    goto LABEL_28;
  }
  if (v3[24] != 3) {
    goto LABEL_30;
  }
  int v5 = v3[2];
  int v6 = v3[8];
  int v7 = v3[14];
  if (v7 <= -128) {
    int v7 = -128;
  }
  if (v7 >= 127) {
    LOBYTE(v7) = 127;
  }
  if (v6 <= -128) {
    int v6 = -128;
  }
  if (v6 >= 127) {
    LOBYTE(v6) = 127;
  }
  if (v5 <= -128) {
    int v5 = -128;
  }
  if (v5 >= 127) {
    LOBYTE(v5) = 127;
  }
  int v8 = v3[20];
  if (v8 <= -128) {
    int v8 = -128;
  }
  if (v8 >= 127) {
    int v8 = 127;
  }
  a2[2] = (v7 << 16) | (v8 << 24) | (v6 << 8) | v5;
  a2[6] = 4;
  a2[8] = 0;
}

void WGSL::constantPack4xU8Clamp(void *a1@<X1>, _DWORD *a2@<X8>)
{
  v2 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18269D484);
  }
  if (v2[6] != 8) {
    goto LABEL_22;
  }
  uint64_t v3 = (int *)*((void *)v2 + 1);
  int v4 = *v3;
  if (!*v3) {
    goto LABEL_20;
  }
  if (v3[6] != 4)
  {
LABEL_22:
    uint64_t v9 = std::__throw_bad_variant_access[abi:sn180100]();
    WGSL::constantPack2x16snorm(v9);
    return;
  }
  if (v4 == 1)
  {
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x18269D464);
  }
  if (v3[12] != 4) {
    goto LABEL_22;
  }
  if (v4 == 2) {
    goto LABEL_20;
  }
  if (v3[18] != 4) {
    goto LABEL_22;
  }
  if (v4 == 3) {
    goto LABEL_20;
  }
  if (v3[24] != 4) {
    goto LABEL_22;
  }
  unsigned int v5 = v3[2];
  unsigned int v6 = v3[8];
  unsigned int v7 = v3[14];
  if (v7 >= 0xFF) {
    unsigned int v7 = 255;
  }
  if (v6 >= 0xFF) {
    unsigned int v6 = 255;
  }
  if (v5 >= 0xFF) {
    unsigned int v5 = 255;
  }
  unsigned int v8 = v3[20];
  if (v8 >= 0xFF) {
    unsigned int v8 = 255;
  }
  a2[2] = (v8 << 24) | (v7 << 16) | (v6 << 8) | v5;
  a2[6] = 4;
  a2[8] = 0;
}

void WGSL::constantPack2x16snorm(void *a1@<X1>, _DWORD *a2@<X8>)
{
  v2 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18269D584);
  }
  if (v2[6] != 8) {
    goto LABEL_16;
  }
  uint64_t v3 = *((void *)v2 + 1);
  if (!*(_DWORD *)v3) {
    goto LABEL_14;
  }
  if (*(_DWORD *)(v3 + 24))
  {
LABEL_16:
    uint64_t v9 = std::__throw_bad_variant_access[abi:sn180100]();
    WGSL::constantPack2x16unorm(v9);
    return;
  }
  if (*(_DWORD *)v3 == 1)
  {
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x18269D564);
  }
  if (*(_DWORD *)(v3 + 48)) {
    goto LABEL_16;
  }
  float v4 = fmaxf(*(float *)(v3 + 8), -1.0);
  if (v4 >= 1.0) {
    float v5 = 32767.0;
  }
  else {
    float v5 = v4 * 32767.0;
  }
  unsigned __int16 v6 = vcvtmd_s64_f64(v5 + 0.5);
  float v7 = fmaxf(*(float *)(v3 + 32), -1.0);
  if (v7 >= 1.0) {
    float v8 = 32767.0;
  }
  else {
    float v8 = v7 * 32767.0;
  }
  a2[2] = v6 | ((unsigned __int16)vcvtmd_s64_f64(v8 + 0.5) << 16);
  a2[6] = 4;
  a2[8] = 0;
}

void WGSL::constantPack2x16unorm(void *a1@<X1>, _DWORD *a2@<X8>)
{
  v2 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18269D684);
  }
  if (v2[6] != 8) {
    goto LABEL_16;
  }
  uint64_t v3 = *((void *)v2 + 1);
  if (!*(_DWORD *)v3) {
    goto LABEL_14;
  }
  if (*(_DWORD *)(v3 + 24))
  {
LABEL_16:
    uint64_t v9 = std::__throw_bad_variant_access[abi:sn180100]();
    WGSL::constantPack2x16float(v9);
    return;
  }
  if (*(_DWORD *)v3 == 1)
  {
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x18269D664);
  }
  if (*(_DWORD *)(v3 + 48)) {
    goto LABEL_16;
  }
  float v4 = fmaxf(*(float *)(v3 + 8), 0.0);
  if (v4 >= 1.0) {
    float v5 = 65535.0;
  }
  else {
    float v5 = v4 * 65535.0;
  }
  unsigned int v6 = vcvtmd_s64_f64(v5 + 0.5);
  float v7 = fmaxf(*(float *)(v3 + 32), 0.0);
  if (v7 >= 1.0) {
    float v8 = 65535.0;
  }
  else {
    float v8 = v7 * 65535.0;
  }
  a2[2] = v6 | (vcvtmd_s64_f64(v8 + 0.5) << 16);
  a2[6] = 4;
  a2[8] = 0;
}

void WGSL::constantPack2x16float(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18269D8D4);
  }
  if (v3[6] != 8) {
    goto LABEL_28;
  }
  uint64_t v4 = *((void *)v3 + 1);
  if (!*(_DWORD *)v4) {
    goto LABEL_29;
  }
  if (*(_DWORD *)(v4 + 24)) {
    goto LABEL_28;
  }
  _S0 = *(float *)(v4 + 8);
  if (_S0 > 65504.0 || _S0 < -65504.0) {
    goto LABEL_16;
  }
  if (*(_DWORD *)v4 == 1) {
    goto LABEL_29;
  }
  if (*(_DWORD *)(v4 + 48)) {
LABEL_28:
  }
    std::__throw_bad_variant_access[abi:sn180100]();
  _S1 = *(float *)(v4 + 32);
  if (_S1 <= 65504.0 && _S1 >= -65504.0)
  {
    int v13 = 0;
    __asm
    {
      FCVT            H0, S0
      FCVT            H1, S1
    }
    *(_WORD *)(a2 + 8) = _H0;
    *(_WORD *)(a2 + 10) = _H1;
    *(_DWORD *)(a2 + 24) = 4;
    goto LABEL_25;
  }
LABEL_16:
  int v9 = WTF::numberToStringAndSize();
  HIDWORD(v26) = v9;
  if (v9 < 0
    || __OFADD__(v9, 31)
    || (uint64_t v10 = (v9 + 37), __OFADD__(v9 + 31, 6))
    || (WTF::tryFastCompactMalloc((WTF *)(v10 + 20)), (uint64_t v11 = *(void *)&__src[0]) == 0))
  {
LABEL_29:
    __break(0xC471u);
    JUMPOUT(0x18269D8B4);
  }
  **(_DWORD **)&__src[0] = 2;
  *(_DWORD *)(v11 + 4) = v10;
  *(void *)(v11 + 8) = v11 + 20;
  *(_WORD *)(v11 + 24) = 8293;
  *(_DWORD *)(v11 + 16) = 4;
  *(_DWORD *)(v11 + 20) = 1970037110;
  float v12 = (unsigned char *)(v11 + 26);
  __src[4] = v23;
  __src[5] = v24;
  __src[6] = v25;
  long long v28 = v26;
  __src[0] = v19;
  __src[1] = v20;
  __src[2] = v21;
  __src[3] = v22;
  if (HIDWORD(v26))
  {
    if (HIDWORD(v26) == 1) {
      *float v12 = __src[0];
    }
    else {
      memcpy((void *)(v11 + 26), __src, HIDWORD(v28));
    }
  }
  qmemcpy(&v12[HIDWORD(v26)], " cannot be represented as 'f16'", 31);
  *(void *)(a2 + 8) = v11;
  int v13 = 1;
LABEL_25:
  *(_DWORD *)(a2 + 32) = v13;
}

uint64_t WGSL::constantUnpack4x8snorm@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18269DB4CLL);
  }
  if (v3[6] == 4)
  {
    int v4 = v3[2];
    int v5 = (char)v4;
    int v6 = (__int16)v4 >> 8;
    int v7 = v4 << 8 >> 24;
    int v8 = v4 >> 24;
    uint64_t v9 = WTF::fastMalloc((WTF *)0x68);
    uint64_t v10 = (unsigned int *)v9;
    *(_DWORD *)uint64_t v9 = 4;
    float v11 = (float)v5 / 127.0;
    if (v11 < -1.0) {
      float v11 = -1.0;
    }
    *(float *)(v9 + 8) = v11;
    uint64_t v12 = v9 + 8;
    *(_OWORD *)(v9 + 28) = 0u;
    *(_OWORD *)(v9 + 44) = 0u;
    *(_OWORD *)(v9 + 76) = 0u;
    *(_OWORD *)(v9 + 12) = 0u;
    *(_OWORD *)(v9 + 60) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    float v13 = (float)v6 / 127.0;
    if (v13 < -1.0) {
      float v13 = -1.0;
    }
    *(float *)(v9 + 32) = v13;
    float v14 = (float)v7 / 127.0;
    if (v14 < -1.0) {
      float v14 = -1.0;
    }
    *(float *)(v9 + 56) = v14;
    float v15 = (float)v8 / 127.0;
    if (v15 < -1.0) {
      float v15 = -1.0;
    }
    *(float *)(v9 + 80) = v15;
    uint64_t v16 = WTF::fastMalloc((WTF *)0x68);
    *(_DWORD *)uint64_t v16 = 4;
    *(unsigned char *)(v16 + 8) = 0;
    *(_DWORD *)(v16 + 24) = -1;
    uint64_t v17 = v10[6];
    if (v17 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1ECABEE88[v17])(&v28, v16 + 8, v12);
      *(_DWORD *)(v16 + 24) = v17;
    }
    *(unsigned char *)(v16 + 32) = 0;
    *(_DWORD *)(v16 + 48) = -1;
    uint64_t v18 = v10[12];
    if (v18 != -1)
    {
      ((void (*)(char *))off_1ECABEE88[v18])(&v28);
      *(_DWORD *)(v16 + 48) = v18;
    }
    *(unsigned char *)(v16 + 56) = 0;
    *(_DWORD *)(v16 + 72) = -1;
    uint64_t v19 = v10[18];
    if (v19 != -1)
    {
      ((void (*)(char *))off_1ECABEE88[v19])(&v28);
      *(_DWORD *)(v16 + 72) = v19;
    }
    *(unsigned char *)(v16 + 80) = 0;
    long long v20 = (_DWORD *)(v16 + 80);
    *(_DWORD *)(v16 + 96) = -1;
    uint64_t v21 = v10[24];
    if (v21 != -1)
    {
      ((void (*)(char *))off_1ECABEE88[v21])(&v28);
      *(_DWORD *)(v16 + 96) = v21;
    }
    *(void *)(a2 + 8) = v16;
    *(_DWORD *)(a2 + 24) = 8;
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v22 = *v10;
    if (v22)
    {
      uint64_t v23 = 24 * v22;
      long long v24 = v10 + 6;
      do
      {
        long long v20 = v24 - 4;
        uint64_t v25 = *v24;
        if (v25 != -1) {
          ((void (*)(char *, _DWORD *))off_1ECABEC60[v25])(&v29, v20);
        }
        *long long v24 = -1;
        v24 += 6;
        v23 -= 24;
      }
      while (v23);
    }
    return WTF::fastFree((WTF *)v10, v20);
  }
  else
  {
    uint64_t v27 = std::__throw_bad_variant_access[abi:sn180100]();
    return WGSL::constantUnpack4x8unorm(v27);
  }
}

uint64_t WGSL::constantUnpack4x8unorm@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18269DD94);
  }
  if (v3[6] == 4)
  {
    unsigned int v4 = v3[2];
    unsigned int v5 = BYTE1(v4);
    unsigned int v6 = v4;
    unsigned int v7 = BYTE2(v4);
    unsigned int v8 = HIBYTE(v4);
    uint64_t v9 = (unsigned int *)WTF::fastMalloc((WTF *)0x68);
    *uint64_t v9 = 4;
    *((float *)v9 + 2) = (float)v6 / 255.0;
    *(_OWORD *)(v9 + 7) = 0u;
    *(_OWORD *)(v9 + 11) = 0u;
    *(_OWORD *)(v9 + 19) = 0u;
    *(_OWORD *)(v9 + 3) = 0u;
    *(_OWORD *)(v9 + 15) = 0u;
    *(_OWORD *)(v9 + 22) = 0u;
    *((float *)v9 + 8) = (float)v5 / 255.0;
    *((float *)v9 + 14) = (float)v7 / 255.0;
    *((float *)v9 + 20) = (float)v8 / 255.0;
    uint64_t v10 = WTF::fastMalloc((WTF *)0x68);
    *(_DWORD *)uint64_t v10 = 4;
    *(unsigned char *)(v10 + 8) = 0;
    *(_DWORD *)(v10 + 24) = -1;
    uint64_t v11 = v9[6];
    if (v11 != -1)
    {
      ((void (*)(char *, uint64_t, unsigned int *))off_1ECABEE88[v11])(&v22, v10 + 8, v9 + 2);
      *(_DWORD *)(v10 + 24) = v11;
    }
    *(unsigned char *)(v10 + 32) = 0;
    *(_DWORD *)(v10 + 48) = -1;
    uint64_t v12 = v9[12];
    if (v12 != -1)
    {
      ((void (*)(char *))off_1ECABEE88[v12])(&v22);
      *(_DWORD *)(v10 + 48) = v12;
    }
    *(unsigned char *)(v10 + 56) = 0;
    *(_DWORD *)(v10 + 72) = -1;
    uint64_t v13 = v9[18];
    if (v13 != -1)
    {
      ((void (*)(char *))off_1ECABEE88[v13])(&v22);
      *(_DWORD *)(v10 + 72) = v13;
    }
    *(unsigned char *)(v10 + 80) = 0;
    float v14 = (_DWORD *)(v10 + 80);
    *(_DWORD *)(v10 + 96) = -1;
    uint64_t v15 = v9[24];
    if (v15 != -1)
    {
      ((void (*)(char *))off_1ECABEE88[v15])(&v22);
      *(_DWORD *)(v10 + 96) = v15;
    }
    *(void *)(a2 + 8) = v10;
    *(_DWORD *)(a2 + 24) = 8;
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v16 = *v9;
    if (v16)
    {
      uint64_t v17 = 24 * v16;
      uint64_t v18 = v9 + 6;
      do
      {
        float v14 = v18 - 4;
        uint64_t v19 = *v18;
        if (v19 != -1) {
          ((void (*)(char *, _DWORD *))off_1ECABEC60[v19])(&v23, v14);
        }
        *uint64_t v18 = -1;
        v18 += 6;
        v17 -= 24;
      }
      while (v17);
    }
    return WTF::fastFree((WTF *)v9, v14);
  }
  else
  {
    uint64_t v21 = std::__throw_bad_variant_access[abi:sn180100]();
    return WGSL::constantUnpack4xI8(v21);
  }
}

uint64_t WGSL::constantUnpack4xI8@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18269DFC8);
  }
  if (v3[6] == 4)
  {
    int v4 = v3[2];
    unsigned int v5 = (unsigned int *)WTF::fastMalloc((WTF *)0x68);
    *unsigned int v5 = 4;
    v5[2] = (char)v4;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    *(_OWORD *)(v5 + 11) = 0u;
    *(_OWORD *)(v5 + 15) = 0u;
    *(_OWORD *)(v5 + 19) = 0u;
    *(_OWORD *)(v5 + 22) = 0u;
    v5[8] = (__int16)v4 >> 8;
    v5[6] = 3;
    v5[12] = 3;
    v5[14] = v4 << 8 >> 24;
    v5[18] = 3;
    v5[20] = v4 >> 24;
    v5[24] = 3;
    uint64_t v6 = WTF::fastMalloc((WTF *)0x68);
    *(_DWORD *)uint64_t v6 = 4;
    *(unsigned char *)(v6 + 8) = 0;
    *(_DWORD *)(v6 + 24) = -1;
    uint64_t v7 = v5[6];
    if (v7 != -1)
    {
      ((void (*)(char *, uint64_t, unsigned int *))off_1ECABEE88[v7])(&v18, v6 + 8, v5 + 2);
      *(_DWORD *)(v6 + 24) = v7;
    }
    *(unsigned char *)(v6 + 32) = 0;
    *(_DWORD *)(v6 + 48) = -1;
    uint64_t v8 = v5[12];
    if (v8 != -1)
    {
      ((void (*)(char *))off_1ECABEE88[v8])(&v18);
      *(_DWORD *)(v6 + 48) = v8;
    }
    *(unsigned char *)(v6 + 56) = 0;
    *(_DWORD *)(v6 + 72) = -1;
    uint64_t v9 = v5[18];
    if (v9 != -1)
    {
      ((void (*)(char *))off_1ECABEE88[v9])(&v18);
      *(_DWORD *)(v6 + 72) = v9;
    }
    *(unsigned char *)(v6 + 80) = 0;
    uint64_t v10 = (_DWORD *)(v6 + 80);
    *(_DWORD *)(v6 + 96) = -1;
    uint64_t v11 = v5[24];
    if (v11 != -1)
    {
      ((void (*)(char *))off_1ECABEE88[v11])(&v18);
      *(_DWORD *)(v6 + 96) = v11;
    }
    *(void *)(a2 + 8) = v6;
    *(_DWORD *)(a2 + 24) = 8;
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v12 = *v5;
    if (v12)
    {
      uint64_t v13 = 24 * v12;
      float v14 = v5 + 6;
      do
      {
        uint64_t v10 = v14 - 4;
        uint64_t v15 = *v14;
        if (v15 != -1) {
          ((void (*)(char *, _DWORD *))off_1ECABEC60[v15])(&v19, v10);
        }
        *float v14 = -1;
        v14 += 6;
        v13 -= 24;
      }
      while (v13);
    }
    return WTF::fastFree((WTF *)v5, v10);
  }
  else
  {
    uint64_t v17 = std::__throw_bad_variant_access[abi:sn180100]();
    return WGSL::constantUnpack4xU8(v17);
  }
}

uint64_t WGSL::constantUnpack4xU8@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18269E1F8);
  }
  if (v3[6] == 4)
  {
    unsigned int v4 = v3[2];
    unsigned int v5 = (unsigned int *)WTF::fastMalloc((WTF *)0x68);
    *unsigned int v5 = 4;
    v5[2] = v4;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    *(_OWORD *)(v5 + 11) = 0u;
    *(_OWORD *)(v5 + 15) = 0u;
    *(_OWORD *)(v5 + 19) = 0u;
    *(_OWORD *)(v5 + 22) = 0u;
    v5[6] = 4;
    v5[8] = BYTE1(v4);
    v5[14] = BYTE2(v4);
    v5[12] = 4;
    v5[18] = 4;
    v5[20] = HIBYTE(v4);
    v5[24] = 4;
    uint64_t v6 = WTF::fastMalloc((WTF *)0x68);
    *(_DWORD *)uint64_t v6 = 4;
    *(unsigned char *)(v6 + 8) = 0;
    *(_DWORD *)(v6 + 24) = -1;
    uint64_t v7 = v5[6];
    if (v7 != -1)
    {
      ((void (*)(char *, uint64_t, unsigned int *))off_1ECABEE88[v7])(&v18, v6 + 8, v5 + 2);
      *(_DWORD *)(v6 + 24) = v7;
    }
    *(unsigned char *)(v6 + 32) = 0;
    *(_DWORD *)(v6 + 48) = -1;
    uint64_t v8 = v5[12];
    if (v8 != -1)
    {
      ((void (*)(char *))off_1ECABEE88[v8])(&v18);
      *(_DWORD *)(v6 + 48) = v8;
    }
    *(unsigned char *)(v6 + 56) = 0;
    *(_DWORD *)(v6 + 72) = -1;
    uint64_t v9 = v5[18];
    if (v9 != -1)
    {
      ((void (*)(char *))off_1ECABEE88[v9])(&v18);
      *(_DWORD *)(v6 + 72) = v9;
    }
    *(unsigned char *)(v6 + 80) = 0;
    uint64_t v10 = (_DWORD *)(v6 + 80);
    *(_DWORD *)(v6 + 96) = -1;
    uint64_t v11 = v5[24];
    if (v11 != -1)
    {
      ((void (*)(char *))off_1ECABEE88[v11])(&v18);
      *(_DWORD *)(v6 + 96) = v11;
    }
    *(void *)(a2 + 8) = v6;
    *(_DWORD *)(a2 + 24) = 8;
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v12 = *v5;
    if (v12)
    {
      uint64_t v13 = 24 * v12;
      float v14 = v5 + 6;
      do
      {
        uint64_t v10 = v14 - 4;
        uint64_t v15 = *v14;
        if (v15 != -1) {
          ((void (*)(char *, _DWORD *))off_1ECABEC60[v15])(&v19, v10);
        }
        *float v14 = -1;
        v14 += 6;
        v13 -= 24;
      }
      while (v13);
    }
    return WTF::fastFree((WTF *)v5, v10);
  }
  else
  {
    uint64_t v17 = std::__throw_bad_variant_access[abi:sn180100]();
    return WGSL::constantUnpack2x16snorm(v17);
  }
}

uint64_t WGSL::constantUnpack2x16snorm@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18269E3C0);
  }
  if (v3[6] == 4)
  {
    int v4 = v3[2];
    int v5 = (__int16)v4;
    int v6 = v4 >> 16;
    uint64_t v7 = WTF::fastMalloc((WTF *)0x38);
    uint64_t v8 = (unsigned int *)v7;
    *(_DWORD *)uint64_t v7 = 2;
    float v9 = (float)v5 / 32767.0;
    if (v9 < -1.0) {
      float v9 = -1.0;
    }
    *(float *)(v7 + 8) = v9;
    uint64_t v10 = v7 + 8;
    *(_OWORD *)(v7 + 28) = 0u;
    *(_OWORD *)(v7 + 12) = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
    float v11 = (float)v6 / 32767.0;
    if (v11 < -1.0) {
      float v11 = -1.0;
    }
    *(float *)(v7 + 32) = v11;
    uint64_t v12 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)uint64_t v12 = 2;
    *(unsigned char *)(v12 + 8) = 0;
    *(_DWORD *)(v12 + 24) = -1;
    uint64_t v13 = v8[6];
    if (v13 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1ECABEE88[v13])(&v22, v12 + 8, v10);
      *(_DWORD *)(v12 + 24) = v13;
    }
    *(unsigned char *)(v12 + 32) = 0;
    float v14 = (_DWORD *)(v12 + 32);
    *(_DWORD *)(v12 + 48) = -1;
    uint64_t v15 = v8[12];
    if (v15 != -1)
    {
      ((void (*)(char *))off_1ECABEE88[v15])(&v22);
      *(_DWORD *)(v12 + 48) = v15;
    }
    *(void *)(a2 + 8) = v12;
    *(_DWORD *)(a2 + 24) = 8;
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v16 = *v8;
    if (v16)
    {
      uint64_t v17 = 24 * v16;
      char v18 = v8 + 6;
      do
      {
        float v14 = v18 - 4;
        uint64_t v19 = *v18;
        if (v19 != -1) {
          ((void (*)(char *, _DWORD *))off_1ECABEC60[v19])(&v23, v14);
        }
        *char v18 = -1;
        v18 += 6;
        v17 -= 24;
      }
      while (v17);
    }
    return WTF::fastFree((WTF *)v8, v14);
  }
  else
  {
    uint64_t v21 = std::__throw_bad_variant_access[abi:sn180100]();
    return WGSL::constantUnpack2x16unorm(v21);
  }
}

uint64_t WGSL::constantUnpack2x16unorm@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18269E574);
  }
  if (v3[6] == 4)
  {
    unsigned int v4 = v3[2];
    unsigned int v5 = (unsigned __int16)v4;
    unsigned int v6 = HIWORD(v4);
    uint64_t v7 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
    *uint64_t v7 = 2;
    *((float *)v7 + 2) = (float)v5 / 65535.0;
    *(_OWORD *)(v7 + 7) = 0u;
    *(_OWORD *)(v7 + 3) = 0u;
    *(_OWORD *)(v7 + 10) = 0u;
    *((float *)v7 + 8) = (float)v6 / 65535.0;
    uint64_t v8 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)uint64_t v8 = 2;
    *(unsigned char *)(v8 + 8) = 0;
    *(_DWORD *)(v8 + 24) = -1;
    uint64_t v9 = v7[6];
    if (v9 != -1)
    {
      ((void (*)(char *, uint64_t, unsigned int *))off_1ECABEE88[v9])(&v18, v8 + 8, v7 + 2);
      *(_DWORD *)(v8 + 24) = v9;
    }
    *(unsigned char *)(v8 + 32) = 0;
    uint64_t v10 = (_DWORD *)(v8 + 32);
    *(_DWORD *)(v8 + 48) = -1;
    uint64_t v11 = v7[12];
    if (v11 != -1)
    {
      ((void (*)(char *))off_1ECABEE88[v11])(&v18);
      *(_DWORD *)(v8 + 48) = v11;
    }
    *(void *)(a2 + 8) = v8;
    *(_DWORD *)(a2 + 24) = 8;
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v12 = *v7;
    if (v12)
    {
      uint64_t v13 = 24 * v12;
      float v14 = v7 + 6;
      do
      {
        uint64_t v10 = v14 - 4;
        uint64_t v15 = *v14;
        if (v15 != -1) {
          ((void (*)(char *, _DWORD *))off_1ECABEC60[v15])(&v19, v10);
        }
        *float v14 = -1;
        v14 += 6;
        v13 -= 24;
      }
      while (v13);
    }
    return WTF::fastFree((WTF *)v7, v10);
  }
  else
  {
    uint64_t v17 = std::__throw_bad_variant_access[abi:sn180100]();
    return WGSL::constantUnpack2x16float(v17);
  }
}

uint64_t WGSL::constantUnpack2x16float@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x18269E720);
  }
  if (v3[6] == 4)
  {
    _S8 = v3[2];
    _S9 = HIWORD(_S8);
    unsigned int v6 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
    *unsigned int v6 = 2;
    __asm { FCVT            S0, H8 }
    v6[2] = _S0;
    *(_OWORD *)(v6 + 7) = 0u;
    *(_OWORD *)(v6 + 3) = 0u;
    *(_OWORD *)(v6 + 10) = 0u;
    __asm { FCVT            S0, H9 }
    v6[8] = _S0;
    uint64_t v13 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)uint64_t v13 = 2;
    *(unsigned char *)(v13 + 8) = 0;
    *(_DWORD *)(v13 + 24) = -1;
    uint64_t v14 = v6[6];
    if (v14 != -1)
    {
      ((void (*)(char *, uint64_t, unsigned int *))off_1ECABEE88[v14])(&v23, v13 + 8, v6 + 2);
      *(_DWORD *)(v13 + 24) = v14;
    }
    *(unsigned char *)(v13 + 32) = 0;
    uint64_t v15 = (_DWORD *)(v13 + 32);
    *(_DWORD *)(v13 + 48) = -1;
    uint64_t v16 = v6[12];
    if (v16 != -1)
    {
      ((void (*)(char *))off_1ECABEE88[v16])(&v23);
      *(_DWORD *)(v13 + 48) = v16;
    }
    *(void *)(a2 + 8) = v13;
    *(_DWORD *)(a2 + 24) = 8;
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v17 = *v6;
    if (v17)
    {
      uint64_t v18 = 24 * v17;
      char v19 = v6 + 6;
      do
      {
        uint64_t v15 = v19 - 4;
        uint64_t v20 = *v19;
        if (v20 != -1) {
          ((void (*)(char *, _DWORD *))off_1ECABEC60[v20])(&v24, v15);
        }
        *char v19 = -1;
        v19 += 6;
        v18 -= 24;
      }
      while (v18);
    }
    return WTF::fastFree((WTF *)v6, v15);
  }
  else
  {
    char v22 = (WGSL::TypeChecker *)std::__throw_bad_variant_access[abi:sn180100]();
    return WGSL::TypeChecker::check(v22);
  }
}

void WGSL::TypeChecker::check(WGSL::TypeChecker *this)
{
}

WTF *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, uint64_t **a2)
{
  v2 = (WGSL::AST::Structure *)a2;
  uint64_t v4 = *((unsigned int *)a2 + 17);
  if (v4)
  {
    unsigned int v5 = a2[7];
    uint64_t v6 = 8 * v4;
    do
    {
      uint64_t v7 = *v5++;
      WGSL::AST::Visitor::visit(this, v7);
      v6 -= 8;
    }
    while (v6);
  }
  int v43 = 0;
  if (!*((_DWORD *)v2 + 21)) {
LABEL_47:
  }
    WGSL::TypeStore::allocateType<WGSL::Types::Struct,WGSL::AST::Structure &,WTF::HashMap<WTF::String,WGSL::Type const*,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits> &>();
  unint64_t v8 = 0;
  uint64_t v42 = (unsigned int *)v2;
LABEL_9:
  uint64_t v10 = *(void *)(*((void *)v2 + 9) + 8 * v8);
  uint64_t v11 = *(unsigned int *)(v10 + 100);
  if (v11)
  {
    uint64_t v12 = *(uint64_t **)(v10 + 88);
    uint64_t v13 = 8 * v11;
    do
    {
      uint64_t v14 = *v12++;
      WGSL::AST::Visitor::visit(this, v14);
      v13 -= 8;
    }
    while (v13);
  }
  uint64_t v15 = *(void *)(v10 + 104);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 16))(v15) != 22)
  {
    WGSL::AST::Visitor::visit(this, v15);
    uint64_t v17 = (WTF *)*((void *)this + 11);
    int v18 = *((_DWORD *)v17 + 12);
    if (v18 != 13) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t v17 = (WTF *)WGSL::TypeChecker::lookupType(this, (const WGSL::AST::Identifier *)(v15 + 64), v16);
  *((void *)this + 11) = v17;
  int v18 = *((_DWORD *)v17 + 12);
  if (v18 == 13)
  {
LABEL_16:
    *(void *)&long long v44 = "' requires template arguments";
    *((void *)&v44 + 1) = 30;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 0, (_OWORD *)(v15 + 8), (int8x16_t *)"type '", 7, (uint64_t)v17, &v44);
    uint64_t v17 = *(WTF **)(*((void *)this + 14) + 24);
    int v18 = *((_DWORD *)v17 + 12);
  }
LABEL_17:
  *(void *)(v15 + 24) = v17;
  *((void *)this + 11) = 0;
  if (v18 == 14) {
    goto LABEL_58;
  }
  if (((uint64_t (*)(WTF *))WGSL::Type::hasCreationFixedFootprint)(v17))
  {
LABEL_19:
    uint64_t v20 = (uint64_t)v43;
    if (v43
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::AST::Function *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::AST::Function *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::AST::Function *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v43, 8u), (uint64_t v20 = (uint64_t)v43) != 0))
    {
      int v21 = *(_DWORD *)(v20 - 8);
      char v22 = *(WTF::StringImpl **)(v10 + 48);
      unsigned int v23 = *((_DWORD *)v22 + 4);
      if (v23 >= 0x100)
      {
LABEL_22:
        unsigned int v24 = v23 >> 8;
LABEL_25:
        uint64_t v25 = 0;
        for (int i = 1; ; ++i)
        {
          unsigned int v27 = v24 & v21;
          char v28 = (WTF **)(v20 + 16 * (v24 & v21));
          char v29 = *v28;
          if (*v28 == (WTF *)-1)
          {
            uint64_t v25 = (WTF **)(v20 + 16 * v27);
          }
          else
          {
            if (!v29)
            {
              if (v25)
              {
                _DWORD *v25 = 0;
                v25[1] = 0;
                --*(_DWORD *)(v20 - 16);
                char v28 = v25;
              }
              uint64_t v30 = *(WTF **)(v10 + 48);
              if (v30) {
                *(_DWORD *)v30 += 2;
              }
              *char v28 = v30;
              v28[1] = v17;
              uint64_t v31 = (uint64_t)v43;
              if (v43)
              {
                int v32 = *((_DWORD *)v43 - 4);
                int v33 = *((_DWORD *)v43 - 3) + 1;
                *((_DWORD *)v43 - 3) = v33;
                uint64_t v34 = (v32 + v33);
                unint64_t v35 = *(unsigned int *)(v31 - 4);
                if (v35 <= 0x400) {
                  goto LABEL_38;
                }
LABEL_42:
                if (v35 > 2 * v34) {
                  goto LABEL_8;
                }
LABEL_6:
                unsigned int v9 = v35 << (6 * v33 >= (2 * v35));
                goto LABEL_7;
              }
              int v33 = 1;
              MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
              uint64_t v34 = (MEMORY[0xFFFFFFFFFFFFFFF0] + 1);
              unint64_t v35 = MEMORY[0xFFFFFFFFFFFFFFFC];
              if (MEMORY[0xFFFFFFFFFFFFFFFC] > 0x400u) {
                goto LABEL_42;
              }
LABEL_38:
              if (3 * v35 <= 4 * v34)
              {
                if (v35) {
                  goto LABEL_6;
                }
                unsigned int v9 = 8;
LABEL_7:
                WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::AST::Function *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::AST::Function *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::AST::Function *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v43, v9);
              }
LABEL_8:
              ++v8;
              v2 = (WGSL::AST::Structure *)v42;
              if (v8 >= v42[21]) {
                goto LABEL_47;
              }
              goto LABEL_9;
            }
            if (WTF::equal(v29, *(const WTF::StringImpl **)(v10 + 48), v19)) {
              goto LABEL_8;
            }
          }
          unsigned int v24 = i + v27;
        }
      }
    }
    else
    {
      int v21 = 0;
      char v22 = *(WTF::StringImpl **)(v10 + 48);
      unsigned int v23 = *((_DWORD *)v22 + 4);
      if (v23 >= 0x100) {
        goto LABEL_22;
      }
    }
    unsigned int v24 = WTF::StringImpl::hashSlowCase(v22);
    goto LABEL_25;
  }
  if (WGSL::Type::containsRuntimeArray(v17))
  {
    if (*((unsigned int *)v2 + 21) - 1 == v8) {
      goto LABEL_19;
    }
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (long long *)(v10 + 8), "runtime arrays may only appear as the last member of a struct", 62);
  }
  else
  {
    *(void *)&long long v44 = "' cannot be used as a struct member because it does not have creation-fixed footprint";
    *((void *)&v44 + 1) = 86;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 0, (_OWORD *)(v10 + 8), (int8x16_t *)"type '", 7, (uint64_t)v17, &v44);
  }
LABEL_58:
  uint64_t result = WGSL::TypeChecker::introduceType(this, (WGSL::AST::Structure *)((char *)v2 + 24), *(const WGSL::Type **)(*((void *)this + 14) + 24));
  uint64_t v41 = (uint64_t)v43;
  if (v43)
  {
    uint64_t v36 = *((unsigned int *)v43 - 1);
    if (v36)
    {
      int v37 = v43;
      do
      {
        unsigned int v38 = *v37;
        if (*v37 != (_DWORD *)-1)
        {
          *int v37 = 0;
          if (v38)
          {
            if (*v38 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v38 -= 2;
            }
          }
        }
        v37 += 2;
        --v36;
      }
      while (v36);
    }
    return (WTF *)WTF::fastFree((WTF *)(v41 - 16), v39);
  }
  return result;
}

void WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>(uint64_t a1, int a2, _OWORD *a3, int8x16_t *a4, uint64_t a5, uint64_t a6, _OWORD *a7)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  v24[0] = 0;
  unsigned int v25 = -1;
  uint64_t v13 = *(unsigned int *)(a6 + 48);
  if (v13 != -1)
  {
    ((void (*)(unsigned char *, unsigned __int8 *, uint64_t))off_1ECABEE00[v13])(v22, v24, a6);
    unsigned int v25 = v13;
  }
  *(_OWORD *)char v22 = *a7;
  WTF::tryMakeString<WTF::ASCIILiteral,WGSL::Type,WTF::ASCIILiteral>(&v21, a4, a5, v24, (uint64_t)v22);
  if (!v21)
  {
    __break(0xC471u);
    return;
  }
  *(void *)char v22 = v21;
  *(_OWORD *)&v22[8] = *a3;
  uint64_t v14 = *(unsigned int *)(a1 + 132);
  if (v14 != *(_DWORD *)(a1 + 128))
  {
    uint64_t v20 = *(void *)(a1 + 120) + 24 * v14;
    *(void *)uint64_t v20 = v21;
    *(_OWORD *)(v20 + 8) = *(_OWORD *)&v22[8];
    ++*(_DWORD *)(a1 + 132);
    *(void *)char v22 = 0;
LABEL_10:
    uint64_t v19 = v25;
    if (v25 == -1) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  unint64_t v15 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v14 + 1, (unint64_t)v22);
  uint64_t v16 = *(void *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  uint64_t v17 = *(void *)v15;
  *(void *)unint64_t v15 = 0;
  *(void *)uint64_t v16 = v17;
  *(_OWORD *)(v16 + 8) = *(_OWORD *)(v15 + 8);
  int v18 = *(_DWORD **)v22;
  ++*(_DWORD *)(a1 + 132);
  *(void *)char v22 = 0;
  if (!v18) {
    goto LABEL_10;
  }
  if (*v18 != 2)
  {
    *v18 -= 2;
    uint64_t v19 = v25;
    if (v25 == -1) {
      goto LABEL_12;
    }
LABEL_11:
    ((void (*)(char *, unsigned __int8 *))off_1ECABED88[v19])(&v23, v24);
    goto LABEL_12;
  }
  WTF::StringImpl::destroy();
  uint64_t v19 = v25;
  if (v25 != -1) {
    goto LABEL_11;
  }
LABEL_12:
  if (a2) {
    *(void *)(a1 + 88) = *(void *)(*(void *)(a1 + 112) + 24);
  }
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(_DWORD *result, int a2, long long *a3, unsigned char *a4, uint64_t a5)
{
  if (a5) {
    size_t v5 = a5 - 1;
  }
  else {
    size_t v5 = 0;
  }
  if (v5 >> 31) {
    goto LABEL_22;
  }
  unint64_t v8 = result;
  if (!v5)
  {
    uint64_t v10 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    uint64_t v16 = v10;
    long long v17 = *a3;
    uint64_t v11 = result[33];
    if (v11 == result[32]) {
      goto LABEL_11;
    }
    goto LABEL_16;
  }
  WTF::tryFastCompactMalloc((WTF *)(v5 + 20));
  uint64_t v10 = v16;
  if (!v16)
  {
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x18269F190);
  }
  uint64_t result = v16 + 5;
  *uint64_t v16 = 2;
  v10[1] = v5;
  *((void *)v10 + 1) = v10 + 5;
  v10[4] = 4;
  if (v5 != 1)
  {
    uint64_t result = memcpy(result, a4, v5);
    uint64_t v16 = v10;
    long long v17 = *a3;
    uint64_t v11 = v8[33];
    if (v11 == v8[32]) {
      goto LABEL_11;
    }
LABEL_16:
    uint64_t v15 = *((void *)v8 + 15) + 24 * v11;
    *(void *)uint64_t v15 = v10;
    *(_OWORD *)(v15 + 8) = v17;
    ++v8[33];
LABEL_17:
    if (!a2) {
      return result;
    }
    goto LABEL_18;
  }
  *(unsigned char *)uint64_t result = *a4;
  uint64_t v16 = v10;
  long long v17 = *a3;
  uint64_t v11 = v8[33];
  if (v11 != v8[32]) {
    goto LABEL_16;
  }
LABEL_11:
  unint64_t v12 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v8 + 30), v11 + 1, (unint64_t)&v16);
  uint64_t v13 = *((void *)v8 + 15) + 24 * v8[33];
  uint64_t v14 = *(void *)v12;
  *(void *)unint64_t v12 = 0;
  *(void *)uint64_t v13 = v14;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)(v12 + 8);
  uint64_t result = v16;
  ++v8[33];
  uint64_t v16 = 0;
  if (!result) {
    goto LABEL_17;
  }
  if (*result != 2)
  {
    *result -= 2;
    if (!a2) {
      return result;
    }
    goto LABEL_18;
  }
  uint64_t result = (_DWORD *)WTF::StringImpl::destroy();
  if (a2) {
LABEL_18:
  }
    *((void *)v8 + 11) = *(void *)(*((void *)v8 + 14) + 24);
  return result;
}

void WGSL::TypeChecker::visit(WGSL::Type **this, uint64_t **a2, __n128 a3)
{
  uint64_t v3 = (WGSL::AST::Variable *)a2;
  uint64_t v222 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((unsigned int *)a2 + 25);
  if (v5)
  {
    uint64_t v6 = a2[11];
    uint64_t v7 = 8 * v5;
    do
    {
      uint64_t v8 = *v6++;
      WGSL::AST::Visitor::visit(this, v8);
      v7 -= 8;
    }
    while (v7);
  }
  int v184 = (WGSL::TypeChecker *)this;
  unsigned int v185 = v3;
  unsigned int v9 = *((unsigned __int8 *)v3 + 128);
  if (v9 == 2) {
    char v10 = 2;
  }
  else {
    char v10 = 3;
  }
  if (*((unsigned char *)v3 + 128)) {
    char v11 = v10;
  }
  else {
    char v11 = 1;
  }
  uint64_t v12 = *((void *)v3 + 14);
  if (!v12)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *((void *)v3 + 15);
    if (v15) {
      goto LABEL_20;
    }
LABEL_15:
    uint64_t v16 = 0;
    if (v9 > 3) {
      goto LABEL_75;
    }
    goto LABEL_54;
  }
  if ((*(unsigned int (**)(void))(*(void *)v12 + 16))(*((void *)v3 + 14)) != 22)
  {
    WGSL::AST::Visitor::visit(this, v12);
    uint64_t v14 = this[11];
    if (*((_DWORD *)v14 + 12) != 13) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v14 = (WGSL::Type *)WGSL::TypeChecker::lookupType((WGSL::TypeChecker *)this, (const WGSL::AST::Identifier *)(v12 + 64), v13);
  this[11] = v14;
  if (*((_DWORD *)v14 + 12) == 13)
  {
LABEL_18:
    unsigned int v218 = "' requires template arguments";
    *(void *)&long long v219 = 30;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 0, (_OWORD *)(v12 + 8), (int8x16_t *)"type '", 7, (uint64_t)v14, &v218);
    uint64_t v14 = (WGSL::Type *)*((void *)this[14] + 3);
  }
LABEL_19:
  *(void *)(v12 + 24) = v14;
  this[11] = 0;
  unsigned int v9 = *((unsigned __int8 *)v3 + 128);
  uint64_t v15 = *((void *)v3 + 15);
  if (!v15) {
    goto LABEL_15;
  }
LABEL_20:
  char v17 = v11;
  if (v9 == 3)
  {
    if (this[12]) {
      char v17 = v11;
    }
    else {
      char v17 = 2;
    }
  }
  __int16 v18 = *((_WORD *)this + 52);
  *((unsigned char *)this + 105) = 0;
  *((unsigned char *)this + 104) = v17;
  WGSL::AST::Visitor::visit(this, v15);
  uint64_t v20 = this[11];
  *(void *)(v15 + 24) = v20;
  this[11] = 0;
  *((_WORD *)this + 52) = v18;
  uint64_t v16 = *((void *)v3 + 15);
  if (*(unsigned char *)(v16 + 56)) {
    uint64_t v15 = v16 + 32;
  }
  else {
    uint64_t v15 = 0;
  }
  if (v20 && *((_DWORD *)v20 + 12) == 10)
  {
    uint64_t v20 = (WGSL::Type *)*((void *)v20 + 1);
    *(void *)(v16 + 24) = v20;
  }
  if (!v14)
  {
    uint64_t v31 = this[14];
    if (v20 == *((WGSL::Type **)v31 + 6))
    {
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (long long *)((char *)v3 + 8), "cannot initialize variable with expression of type 'void'", 58);
      uint64_t v31 = this[14];
      uint64_t v20 = (WGSL::Type *)*((void *)v31 + 3);
      if (*((unsigned char *)v3 + 128))
      {
LABEL_50:
        int v32 = WGSL::concretize(v20, v31, v19);
        if (v32)
        {
          uint64_t v14 = v32;
          goto LABEL_52;
        }
        v214[0] = 0;
        int v215 = -1;
        uint64_t v62 = *((unsigned int *)v20 + 12);
        if (v62 != -1)
        {
          ((void (*)(char **, unsigned char *, WGSL::Type *))off_1ECABEE00[v62])(&v218, v214, v20);
          int v215 = v62;
        }
        unint64_t v63 = *((char *)v3 + 128);
        if (v63 > 2)
        {
          int v65 = "var";
          size_t v66 = 3;
        }
        else
        {
          unint64_t v64 = v63;
          int v65 = off_1E521DFB0[v64];
          size_t v66 = *(void *)((char *)&unk_1826CF990 + v64 * 8);
        }
        uint64_t v67 = (uint64_t)v184;
        unsigned int v68 = v185;
        LOBYTE(v216[0]) = 0;
        unsigned int v217 = -1;
        if (v62 != -1)
        {
          ((void (*)(char **, _OWORD *, unsigned char *))off_1ECABEE00[v62])(&v218, v216, v214);
          unsigned int v217 = v62;
        }
        WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v218);
        WGSL::Type::dump((unsigned __int8 *)v216, (uint64_t)&v218);
        WTF::StringPrintStream::toString((uint64_t *)&v186, (WTF::StringPrintStream *)&v218);
        WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v218);
        int v69 = (char *)v186;
        if (v186)
        {
          int v70 = *((_DWORD *)v186 + 1);
          if (v70 < 0) {
            goto LABEL_158;
          }
        }
        else
        {
          int v70 = 0;
        }
        BOOL v77 = __OFADD__(v70, v66 + 36);
        int v78 = v70 + v66 + 36;
        if (!v77)
        {
          uint64_t v79 = (v78 + 1);
          if (!__OFADD__(v78, 1))
          {
            if (v186)
            {
              int v98 = *((_DWORD *)v186 + 4);
              *(_DWORD *)v186 += 2;
              if ((v98 & 4) == 0)
              {
                if (v79 > 0x7FFFFFEF)
                {
                  unsigned int v80 = 0;
                  goto LABEL_334;
                }
                WTF::tryFastCompactMalloc((WTF *)(2 * v79 + 20));
                unsigned int v80 = v218;
                if (!v218) {
                  goto LABEL_334;
                }
                *(_DWORD *)unsigned int v218 = 2;
                *((_DWORD *)v80 + 1) = v79;
                *((_WORD *)v80 + 10) = 39;
                *((void *)v80 + 1) = v80 + 20;
                *((_DWORD *)v80 + 4) = 0;
                int v115 = v80 + 22;
                uint64_t v116 = *((unsigned int *)v69 + 1);
                *(_DWORD *)v69 += 4;
                uint64_t v117 = (int8x16_t *)*((void *)v69 + 1);
                if ((v69[16] & 4) == 0)
                {
                  if (v116)
                  {
                    if (v116 == 1) {
                      *int v115 = v117->i16[0];
                    }
                    else {
                      memcpy(v80 + 22, v117, 2 * v116);
                    }
                  }
LABEL_327:
                  uint64_t v146 = *((unsigned int *)v69 + 1);
                  v147 = &v115[v146];
                  *(_OWORD *)v147 = xmmword_1826CF950;
                  *((_OWORD *)v147 + 1) = xmmword_1826CF960;
                  *((_OWORD *)v147 + 2) = xmmword_1826CF970;
                  *((_OWORD *)v147 + 3) = xmmword_1826CF980;
                  *((_DWORD *)v147 + 16) = 2097249;
                  v147[34] = 39;
                  uint64_t v148 = v146 * 2 + 92;
                  uint64_t v149 = 2 * v66;
                  do
                  {
                    __int16 v150 = *(unsigned __int8 *)v65++;
                    *(_WORD *)&v80[v148] = v150;
                    v148 += 2;
                    v149 -= 2;
                  }
                  while (v149);
                  v147[v66 + 35] = 39;
                  int v151 = *(_DWORD *)v69 - 2;
                  if (*(_DWORD *)v69 == 2)
                  {
                    WTF::StringImpl::destroy();
                    int v151 = *(_DWORD *)v69;
                  }
                  else
                  {
                    *(_DWORD *)int v69 = v151;
                  }
                  int v138 = v151 - 2;
                  if (!v138)
                  {
LABEL_333:
                    WTF::StringImpl::destroy();
                    goto LABEL_334;
                  }
LABEL_311:
                  *(_DWORD *)int v69 = v138;
                  goto LABEL_334;
                }
                uint64_t v125 = &v115[v116];
                if (v116 < 0x40)
                {
                  unint64_t v126 = (unint64_t)(v80 + 22);
                }
                else
                {
                  unint64_t v126 = (unint64_t)&v115[v116 & 0xFFFFFFC0];
                  long long v127 = 0uLL;
                  int v128 = v80 + 22;
                  do
                  {
                    v223.val[0] = *v117;
                    int8x16_t v129 = v117[1];
                    v224.val[0] = v117[2];
                    int8x16_t v130 = v117[3];
                    v117 += 4;
                    int8x16_t v131 = v130;
                    v224.val[1] = 0uLL;
                    v225.val[0] = v129;
                    v223.val[1] = 0uLL;
                    uint64_t v132 = v128;
                    vst2q_s8(v132, v223);
                    v132 += 32;
                    v225.val[1] = 0uLL;
                    vst2q_s8(v132, v225);
                    int v133 = v128 + 64;
                    vst2q_s8(v133, v224);
                    unsigned int v134 = v128 + 96;
                    vst2q_s8(v134, *(int8x16x2_t *)(&v127 - 1));
                    v128 += 128;
                  }
                  while (v128 != (char *)v126);
                }
                if ((_WORD *)v126 == v125) {
                  goto LABEL_327;
                }
                unint64_t v139 = (unint64_t)&v80[2 * v116 - v126 + 20];
                if (v139 < 0xE
                  || (v126 < (unint64_t)v117->u64 + (v139 >> 1) + 1
                    ? (BOOL v140 = (unint64_t)v117 >= (v139 & 0xFFFFFFFFFFFFFFFELL) + v126 + 2)
                    : (BOOL v140 = 1),
                      !v140))
                {
                  int v143 = (_WORD *)v126;
                  unsigned int v144 = v117;
                  goto LABEL_323;
                }
                uint64_t v141 = (v139 >> 1) + 1;
                if (v139 >= 0x3E)
                {
                  unint64_t v142 = v141 & 0xFFFFFFFFFFFFFFE0;
                  uint64_t v171 = (uint8x8_t *)&v117[1];
                  v172 = (uint16x8_t *)(v126 + 32);
                  unint64_t v173 = v141 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    uint8x16_t v174 = *(uint8x16_t *)v171[-2].i8;
                    uint16x8_t v175 = vmovl_u8(*v171);
                    uint16x8_t v176 = vmovl_high_u8(*(uint8x16_t *)v171->i8);
                    v172[-2] = vmovl_u8(*(uint8x8_t *)v174.i8);
                    v172[-1] = vmovl_high_u8(v174);
                    uint16x8_t *v172 = v175;
                    v172[1] = v176;
                    v172 += 4;
                    v171 += 4;
                    v173 -= 32;
                  }
                  while (v173);
                  if (v141 == v142) {
                    goto LABEL_327;
                  }
                  if ((v141 & 0x18) == 0)
                  {
                    unsigned int v144 = (int8x16_t *)((char *)v117 + v142);
                    int v143 = (_WORD *)(v126 + 2 * v142);
                    goto LABEL_323;
                  }
                }
                else
                {
                  unint64_t v142 = 0;
                }
                int v143 = (_WORD *)(v126 + 2 * (v141 & 0xFFFFFFFFFFFFFFF8));
                unsigned int v144 = (int8x16_t *)((char *)v117 + (v141 & 0xFFFFFFFFFFFFFFF8));
                uint64_t v177 = (uint8x8_t *)&v117->i8[v142];
                int v178 = (uint16x8_t *)(v126 + 2 * v142);
                unint64_t v179 = v142 - (v141 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint8x8_t v180 = *v177++;
                  *v178++ = vmovl_u8(v180);
                  v179 += 8;
                }
                while (v179);
                if (v141 == (v141 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_327;
                }
                do
                {
LABEL_323:
                  __int16 v145 = v144->u8[0];
                  unsigned int v144 = (int8x16_t *)((char *)v144 + 1);
                  *v143++ = v145;
                }
                while (v143 != v125);
                goto LABEL_327;
              }
            }
            if ((v79 & 0x80000000) != 0 || (WTF::tryFastCompactMalloc((WTF *)(v79 + 20)), (unsigned int v80 = v218) == 0))
            {
              unsigned int v80 = 0;
              if (!v69)
              {
LABEL_338:
                uint64_t v81 = v186;
                int v186 = 0;
                if (!v81) {
                  goto LABEL_342;
                }
LABEL_339:
                if (*(_DWORD *)v81 == 2) {
                  WTF::StringImpl::destroy();
                }
                else {
                  *(_DWORD *)v81 -= 2;
                }
LABEL_342:
                if (!v80)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1826A0C24);
                }
                unsigned int v218 = v80;
                long long v219 = *(_OWORD *)((char *)v68 + 8);
                uint64_t v152 = *(unsigned int *)(v67 + 132);
                if (v152 == *(_DWORD *)(v67 + 128))
                {
                  unint64_t v153 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v67 + 120, v152 + 1, (unint64_t)&v218);
                  uint64_t v154 = *(void *)(v67 + 120) + 24 * *(unsigned int *)(v67 + 132);
                  uint64_t v155 = *(void *)v153;
                  *(void *)unint64_t v153 = 0;
                  *(void *)uint64_t v154 = v155;
                  *(_OWORD *)(v154 + 8) = *(_OWORD *)(v153 + 8);
                  uint64_t v156 = v218;
                  ++*(_DWORD *)(v67 + 132);
                  unsigned int v218 = 0;
                  if (v156)
                  {
                    if (*(_DWORD *)v156 == 2)
                    {
                      WTF::StringImpl::destroy();
                      uint64_t v157 = v217;
                      if (v217 == -1)
                      {
LABEL_351:
                        uint64_t v159 = *(void *)(*(void *)(v67 + 112) + 24);
                        LOBYTE(v218) = 0;
                        LOBYTE(v220) = 0;
                        WGSL::TypeChecker::introduceValue(v67, (uint64_t)v68 + 24, v159, 3, (uint64_t)&v218);
                        if ((_BYTE)v220 && DWORD2(v219) != -1) {
                          ((void (*)(_OWORD *, char **))off_1ECABEC60[DWORD2(v219)])(v216, &v218);
                        }
                        if (v215 != -1) {
                          ((void (*)(char **, unsigned char *))off_1ECABED88[v215])(&v218, v214);
                        }
                        return;
                      }
                    }
                    else
                    {
                      *(_DWORD *)v156 -= 2;
                      uint64_t v157 = v217;
                      if (v217 == -1) {
                        goto LABEL_351;
                      }
                    }
LABEL_350:
                    ((void (*)(const char **, _OWORD *))off_1ECABED88[v157])(&v186, v216);
                    goto LABEL_351;
                  }
                }
                else
                {
                  uint64_t v158 = *(void *)(v67 + 120) + 24 * v152;
                  *(void *)uint64_t v158 = v80;
                  *(_OWORD *)(v158 + 8) = v219;
                  ++*(_DWORD *)(v67 + 132);
                  unsigned int v218 = 0;
                }
                uint64_t v157 = v217;
                if (v217 == -1) {
                  goto LABEL_351;
                }
                goto LABEL_350;
              }
LABEL_334:
              if (*(_DWORD *)v69 != 2)
              {
                *(_DWORD *)v69 -= 2;
                uint64_t v81 = v186;
                int v186 = 0;
                if (!v81) {
                  goto LABEL_342;
                }
                goto LABEL_339;
              }
              WTF::StringImpl::destroy();
              goto LABEL_338;
            }
            *(_DWORD *)unsigned int v218 = 2;
            *((_DWORD *)v80 + 1) = v79;
            *((void *)v80 + 1) = v80 + 20;
            *((_DWORD *)v80 + 4) = 4;
            if (!v69)
            {
              qmemcpy(v80 + 20, "'' cannot be used as the type of a '", 36);
              memcpy(v80 + 56, v65, v66);
              v80[v66 + 56] = 39;
              uint64_t v81 = v186;
              int v186 = 0;
              if (!v81) {
                goto LABEL_342;
              }
              goto LABEL_339;
            }
            *(_DWORD *)v69 += 2;
            v80[20] = 39;
            uint64_t v99 = v80 + 21;
            size_t v100 = *((unsigned int *)v69 + 1);
            *(_DWORD *)v69 += 2;
            unsigned int v101 = (int8x16_t *)*((void *)v69 + 1);
            if ((v69[16] & 4) != 0)
            {
              if (v100)
              {
                if (v100 == 1) {
                  unsigned char *v99 = v101->i8[0];
                }
                else {
                  memcpy(v80 + 21, v101, v100);
                }
              }
            }
            else
            {
              uint64_t v102 = &v99[v100];
              if (v100 < 0x10)
              {
                unint64_t v103 = (unint64_t)(v80 + 21);
              }
              else
              {
                unint64_t v103 = (unint64_t)&v99[v100 & 0xFFFFFFF0];
                uint64_t v104 = (unsigned long long *)(v80 + 21);
                do
                {
                  unsigned long long v105 = (unsigned __int128)vld2q_s8(v101->i8);
                  v101 += 2;
                  *v104++ = v105;
                }
                while (v104 != (unsigned long long *)v103);
              }
              if ((unsigned char *)v103 != v102)
              {
                uint64_t v118 = &v80[v100];
                unint64_t v119 = (unint64_t)&v80[v100 - v103 + 21];
                if (v119 < 8
                  || (v103 < (unint64_t)&v101[2].u64[1] + 2 * (void)v118 + -2 * v103 + 2
                    ? (BOOL v120 = v101 >= (int8x16_t *)(v118 + 21))
                    : (BOOL v120 = 1),
                      !v120))
                {
                  v122 = (unsigned char *)v103;
                  uint64_t v123 = v101;
                  goto LABEL_300;
                }
                if (v119 >= 0x20)
                {
                  unint64_t v121 = v119 & 0xFFFFFFFFFFFFFFE0;
                  int v160 = v101 + 2;
                  uint64_t v161 = (int8x16_t *)(v103 + 16);
                  unint64_t v162 = v119 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    int8x16_t v164 = v160[-2];
                    int8x16_t v163 = v160[-1];
                    int8x16_t v166 = *v160;
                    int8x16_t v165 = v160[1];
                    v160 += 4;
                    v161[-1] = vuzp1q_s8(v164, v163);
                    int8x16_t *v161 = vuzp1q_s8(v166, v165);
                    v161 += 2;
                    v162 -= 32;
                  }
                  while (v162);
                  if (v119 == v121) {
                    goto LABEL_307;
                  }
                  if ((v119 & 0x18) == 0)
                  {
                    uint64_t v123 = (int8x16_t *)((char *)v101 + 2 * v121);
                    v122 = (unsigned char *)(v103 + v121);
                    do
                    {
LABEL_300:
                      char v124 = v123->i8[0];
                      uint64_t v123 = (int8x16_t *)((char *)v123 + 2);
                      *v122++ = v124;
                    }
                    while (v122 != v102);
                    goto LABEL_307;
                  }
                }
                else
                {
                  unint64_t v121 = 0;
                }
                v122 = (unsigned char *)(v103 + (v119 & 0xFFFFFFFFFFFFFFF8));
                uint64_t v123 = (int8x16_t *)((char *)v101 + 2 * (v119 & 0xFFFFFFFFFFFFFFF8));
                uint64_t v167 = (int16x8_t *)((char *)v101 + 2 * v121);
                int v168 = (int8x8_t *)(v103 + v121);
                unint64_t v169 = v121 - (v119 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  int16x8_t v170 = *v167++;
                  *v168++ = vmovn_s16(v170);
                  v169 += 8;
                }
                while (v169);
                if (v119 == (v119 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_307;
                }
                goto LABEL_300;
              }
            }
LABEL_307:
            uint64_t v135 = &v99[*((unsigned int *)v69 + 1)];
            qmemcpy(v135, "' cannot be used as the type of a '", 35);
            uint64_t v136 = v135 + 35;
            memcpy(v135 + 35, v65, v66);
            v136[v66] = 39;
            int v137 = *(_DWORD *)v69 - 2;
            if (*(_DWORD *)v69 == 2)
            {
              WTF::StringImpl::destroy();
              int v137 = *(_DWORD *)v69;
            }
            else
            {
              *(_DWORD *)int v69 = v137;
            }
            int v138 = v137 - 2;
            if (!v138) {
              goto LABEL_333;
            }
            goto LABEL_311;
          }
        }
LABEL_158:
        unsigned int v80 = 0;
        uint64_t v81 = v186;
        int v186 = 0;
        if (!v81) {
          goto LABEL_342;
        }
        goto LABEL_339;
      }
    }
    else if (*((unsigned char *)v3 + 128))
    {
      goto LABEL_50;
    }
    uint64_t v16 = *((void *)v3 + 15);
    uint64_t v14 = v20;
LABEL_73:
    if (!v16)
    {
      __break(0xC471u);
      JUMPOUT(0x1826A07E4);
    }
    if ((WGSL::Type::isConstructible(v14) & 1) == 0)
    {
      v206[0] = 0;
      int v207 = -1;
      uint64_t v52 = *((unsigned int *)v14 + 12);
      if (v52 != -1)
      {
        ((void (*)(char **, unsigned char *, WGSL::Type *))off_1ECABEE00[v52])(&v218, v206, v14);
        int v207 = v52;
        this = (WGSL::Type **)v184;
        uint64_t v3 = v185;
      }
      *(void *)&v216[0] = "' cannot be used as the type of a 'const'";
      *((void *)&v216[0] + 1) = 42;
      WGSL::TypeChecker::typeError<char &,WGSL::Type &,WTF::ASCIILiteral &>((uint64_t)this, (WGSL::AST::Variable *)((char *)v3 + 8), 39, (uint64_t)v206, v216);
      uint64_t v53 = *((void *)this[14] + 3);
      LOBYTE(v218) = 0;
      LOBYTE(v220) = 0;
      WGSL::TypeChecker::introduceValue((uint64_t)this, (uint64_t)v3 + 24, v53, 3, (uint64_t)&v218);
      if ((_BYTE)v220 && DWORD2(v219) != -1) {
        ((void (*)(const char **, char **))off_1ECABEC60[DWORD2(v219)])(&v186, &v218);
      }
      if (v207 != -1) {
        ((void (*)(char **, unsigned char *))off_1ECABED88[v207])(&v218, v206);
      }
      return;
    }
LABEL_75:
    if (v15 && *((WGSL::Type **)this[14] + 3) != v14) {
      WGSL::TypeChecker::convertValue((uint64_t)this, (long long *)((char *)v3 + 8), v14, v15, a3);
    }
    int v38 = *((unsigned __int8 *)v3 + 128);
    if (*((unsigned char *)v3 + 128))
    {
      *((void *)v3 + 18) = v14;
      if (v38 == 3)
      {
        unsigned int v39 = *((unsigned __int16 *)v3 + 76);
        if (v39 <= 0xFF || (unsigned int v40 = *((unsigned __int16 *)v3 + 77), v40 <= 0xFF))
        {
LABEL_381:
          __break(1u);
        }
        else
        {
          uint64_t v41 = this[14];
          char v191 = *((_WORD *)v3 + 76);
          uint64_t v190 = (const char *)v14;
          char v189 = v40;
          char v188 = 0;
          unsigned int v218 = (char *)((unsigned __int16)(v39 << 8) | ((unint64_t)v40 << 16) | 6);
          *(void *)&long long v219 = v14;
          uint64_t v42 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)v41 + 2, (unsigned __int8 *)&v218);
          int v43 = (unsigned __int8 *)*((void *)v41 + 2);
          if (v43) {
            v43 += 24 * *((unsigned int *)v43 - 1);
          }
          if (v43 == v42 || (long long v44 = (unsigned __int8 *)*((void *)v42 + 2)) == 0) {
            WGSL::TypeStore::allocateType<WGSL::Types::Reference,WGSL::AddressSpace &,WGSL::AccessMode &,WGSL::Type const*&,BOOL &>();
          }
          int v45 = (void *)*((void *)v3 + 14);
          if (!v45)
          {
            char v46 = (void *)((char *)this[10] + 312);
            v216[0] = 0uLL;
            WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v218);
            WGSL::Type::dump(v44, (uint64_t)&v218);
            WTF::StringPrintStream::toString((uint64_t *)&v186, (WTF::StringPrintStream *)&v218);
            WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v218);
            unsigned int v218 = (char *)off_1ECABC030;
            long long v219 = 0uLL;
            unsigned int v47 = v186;
            int v186 = 0;
            int v220 = v47;
            int v45 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v46, v216, (uint64_t)&v218);
            int v48 = v220;
            unsigned int v218 = (char *)off_1ECABC030;
            int v220 = 0;
            if (v48)
            {
              if (*(_DWORD *)v48 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *(_DWORD *)v48 -= 2;
              }
            }
            unsigned int v82 = v186;
            int v186 = 0;
            if (v82)
            {
              if (*(_DWORD *)v82 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *(_DWORD *)v82 -= 2;
              }
            }
          }
          uint64_t v83 = this[10];
          uint64_t v84 = *((void *)v83 + 39);
          if ((unint64_t)(*((void *)v83 + 40) - v84) <= 0x47)
          {
            WGSL::AST::Builder::allocateArena((WGSL::Type *)((char *)v83 + 312));
            uint64_t v84 = *((void *)v83 + 39);
          }
          *(_OWORD *)(v84 + 8) = *(_OWORD *)(v45 + 1);
          *(void *)(v84 + 24) = 0;
          *(unsigned char *)(v84 + 32) = 0;
          *(unsigned char *)(v84 + 56) = 0;
          *(void *)uint64_t v84 = off_1ECABD250;
          *(void *)(v84 + 64) = v45;
          *((void *)v83 + 39) += 72;
          unint64_t v85 = *((unsigned int *)v83 + 89);
          if (v85 != *((_DWORD *)v83 + 88))
          {
            int v92 = (void *)(*((void *)v83 + 43) + 8 * v85);
LABEL_181:
            *int v92 = v84;
            *((_DWORD *)v83 + 89) = v85 + 1;
            *(void *)(v84 + 24) = v44;
            *((void *)v3 + 17) = v84;
            goto LABEL_182;
          }
          unint64_t v86 = v85 + (v85 >> 2);
          if (v86 >= 0x10) {
            unint64_t v87 = v86 + 1;
          }
          else {
            unint64_t v87 = 16;
          }
          if (v87 <= v85 + 1) {
            unint64_t v88 = v85 + 1;
          }
          else {
            unint64_t v88 = v87;
          }
          if (!(v88 >> 29))
          {
            unsigned int v89 = (void *)*((void *)v83 + 43);
            uint64_t v90 = (void *)WTF::fastMalloc((WTF *)(8 * v88));
            *((_DWORD *)v83 + 88) = v88;
            *((void *)v83 + 43) = v90;
            memcpy(v90, v89, 8 * v85);
            if (v89)
            {
              if (*((void **)v83 + 43) == v89)
              {
                *((void *)v83 + 43) = 0;
                *((_DWORD *)v83 + 88) = 0;
              }
              WTF::fastFree((WTF *)v89, v91);
            }
            unint64_t v85 = *((unsigned int *)v83 + 89);
            int v92 = (void *)(*((void *)v83 + 43) + 8 * v85);
            goto LABEL_181;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x1826A0C1CLL);
      }
    }
    else
    {
      int v49 = (WGSL::Type *)*((void *)this[14] + 3);
      *((void *)v3 + 18) = v14;
      if (v14 != v49)
      {
        uint64_t v50 = (uint64_t)v3 + 24;
        if (v15)
        {
          v181[0] = 0;
          char v183 = 0;
          if (*(unsigned char *)(v15 + 24))
          {
            int v182 = -1;
            uint64_t v51 = *(unsigned int *)(v15 + 16);
            if (v51 != -1)
            {
              ((void (*)(char **, unsigned char *, uint64_t))off_1ECABEE88[v51])(&v218, v181, v15);
              int v182 = v51;
            }
            char v183 = 1;
          }
          goto LABEL_184;
        }
LABEL_183:
        v181[0] = 0;
        char v183 = 0;
LABEL_184:
        WGSL::TypeChecker::introduceValue((uint64_t)this, v50, (uint64_t)v14, v11, (uint64_t)v181);
        if (v183 && v182 != -1) {
          ((void (*)(char **, unsigned char *))off_1ECABEC60[v182])(&v218, v181);
        }
        return;
      }
    }
    long long v44 = (unsigned __int8 *)v14;
LABEL_182:
    uint64_t v50 = (uint64_t)v3 + 24;
    uint64_t v14 = (WGSL::Type *)v44;
    goto LABEL_183;
  }
  if (v14 == v20) {
    goto LABEL_53;
  }
  uint64_t v21 = (WGSL::Type *)*((void *)this[14] + 3);
  if (v21 == v14 || v21 == v20) {
    goto LABEL_53;
  }
  if (WGSL::conversionRank(v20, v14, v19) == -1)
  {
    v212[0] = 0;
    int v213 = -1;
    uint64_t v22 = *((unsigned int *)v14 + 12);
    if (v22 != -1)
    {
      ((void (*)(char **, unsigned char *, WGSL::Type *))off_1ECABEE00[v22])(&v218, v212, v14);
      int v213 = v22;
    }
    v210[0] = 0;
    int v211 = -1;
    uint64_t v23 = *((unsigned int *)v20 + 12);
    if (v23 != -1)
    {
      ((void (*)(char **, unsigned char *, WGSL::Type *))off_1ECABEE00[v23])(&v218, v210, v20);
      int v211 = v23;
      LODWORD(v22) = v213;
    }
    uint64_t v24 = (uint64_t)v184;
    unsigned int v25 = v185;
    LOBYTE(v218) = 0;
    int v221 = -1;
    if (v22 != -1)
    {
      ((void (*)(_OWORD *, char **, unsigned char *))off_1ECABEE00[v22])(v216, &v218, v212);
      int v221 = v22;
      LODWORD(v23) = v211;
    }
    LOBYTE(v216[0]) = 0;
    unsigned int v217 = -1;
    if (v23 != -1)
    {
      ((void (*)(const char **, _OWORD *, unsigned char *))off_1ECABEE00[v23])(&v186, v216, v210);
      unsigned int v217 = v23;
    }
    int v186 = "' with value of type '";
    *(void *)&long long v187 = 23;
    char v191 = 39;
    WTF::tryMakeString<WTF::ASCIILiteral,WGSL::Type,WTF::ASCIILiteral,WGSL::Type,char>((uint64_t *)&v190, (int8x16_t *)"cannot initialize var of type '", 32, (unsigned __int8 *)&v218, (uint64_t)&v186, (unsigned __int8 *)v216, &v191);
    if (!v190)
    {
      __break(0xC471u);
      JUMPOUT(0x1826A0C2CLL);
    }
    int v186 = v190;
    long long v187 = *(_OWORD *)((char *)v185 + 8);
    uint64_t v26 = *((unsigned int *)v184 + 33);
    if (v26 == *((_DWORD *)v184 + 32))
    {
      unint64_t v27 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v184 + 120, v26 + 1, (unint64_t)&v186);
      uint64_t v28 = *((void *)v184 + 15) + 24 * *((unsigned int *)v184 + 33);
      uint64_t v29 = *(void *)v27;
      *(void *)unint64_t v27 = 0;
      *(void *)uint64_t v28 = v29;
      *(_OWORD *)(v28 + 8) = *(_OWORD *)(v27 + 8);
      uint64_t v30 = v186;
      ++*(_DWORD *)(v24 + 132);
      int v186 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *(_DWORD *)v30 -= 2;
        }
      }
    }
    else
    {
      uint64_t v74 = *((void *)v184 + 15) + 24 * v26;
      *(void *)uint64_t v74 = v190;
      *(_OWORD *)(v74 + 8) = v187;
      ++*(_DWORD *)(v24 + 132);
      int v186 = 0;
    }
    if (v217 != -1) {
      ((void (*)(char *, _OWORD *))off_1ECABED88[v217])(&v191, v216);
    }
    unsigned int v217 = -1;
    if (v221 != -1) {
      ((void (*)(char *, char **))off_1ECABED88[v221])(&v191, &v218);
    }
    uint64_t v94 = *(void *)(*(void *)(v24 + 112) + 24);
    LOBYTE(v218) = 0;
    LOBYTE(v220) = 0;
    WGSL::TypeChecker::introduceValue(v24, (uint64_t)v25 + 24, v94, 3, (uint64_t)&v218);
    if ((_BYTE)v220 && DWORD2(v219) != -1) {
      ((void (*)(_OWORD *, char **))off_1ECABEC60[DWORD2(v219)])(v216, &v218);
    }
    if (v211 != -1) {
      ((void (*)(char **, unsigned char *))off_1ECABED88[v211])(&v218, v210);
    }
    int v211 = -1;
    if (v213 != -1) {
      ((void (*)(char **, unsigned char *))off_1ECABED88[v213])(&v218, v212);
    }
    return;
  }
LABEL_52:
  uint64_t v16 = *((void *)v3 + 15);
LABEL_53:
  *(void *)(v16 + 24) = v14;
  unsigned int v9 = *((unsigned __int8 *)v3 + 128);
LABEL_54:
  switch(v9)
  {
    case 0u:
      goto LABEL_73;
    case 1u:
      if (!this[12])
      {
        double v58 = (long long *)((char *)v3 + 8);
        uint64_t v59 = "module-scope 'let' is invalid, use 'const'";
        int v60 = (WGSL::TypeChecker *)this;
        uint64_t v61 = 43;
        goto LABEL_200;
      }
      if ((WGSL::Type::isConstructible(v14) & 1) != 0 || *((_DWORD *)v14 + 12) == 11)
      {
        if (!*((void *)v3 + 15))
        {
          __break(0xC471u);
          JUMPOUT(0x18269F5CCLL);
        }
        goto LABEL_75;
      }
      v208[0] = 0;
      int v209 = -1;
      uint64_t v72 = *((unsigned int *)v14 + 12);
      if (v72 != -1)
      {
        ((void (*)(char **, unsigned char *, WGSL::Type *))off_1ECABEE00[v72])(&v218, v208, v14);
        int v209 = v72;
        this = (WGSL::Type **)v184;
        uint64_t v3 = v185;
      }
      *(void *)&v216[0] = "' cannot be used as the type of a 'let'";
      *((void *)&v216[0] + 1) = 40;
      WGSL::TypeChecker::typeError<char &,WGSL::Type &,WTF::ASCIILiteral &>((uint64_t)this, (WGSL::AST::Variable *)((char *)v3 + 8), 39, (uint64_t)v208, v216);
      uint64_t v73 = *((void *)this[14] + 3);
      LOBYTE(v218) = 0;
      LOBYTE(v220) = 0;
      WGSL::TypeChecker::introduceValue((uint64_t)this, (uint64_t)v3 + 24, v73, 3, (uint64_t)&v218);
      if ((_BYTE)v220 && DWORD2(v219) != -1) {
        ((void (*)(const char **, char **))off_1ECABEC60[DWORD2(v219)])(&v186, &v218);
      }
      if (v209 != -1) {
        ((void (*)(char **, unsigned char *))off_1ECABED88[v209])(&v218, v208);
      }
      return;
    case 2u:
      if (this[12])
      {
        __break(0xC471u);
        JUMPOUT(0x1826A0A94);
      }
      if (!v14) {
        goto LABEL_110;
      }
      int v33 = v14;
      while (1)
      {
        int v34 = *((_DWORD *)v33 + 12);
        if (v34 != 10) {
          break;
        }
        int v33 = (WGSL::Type *)*((void *)v33 + 1);
        if (!v33) {
          goto LABEL_110;
        }
      }
      if (!v34)
      {
        unsigned int v54 = *(unsigned __int8 *)v33;
        if (v54 < 6 || v54 == 7) {
          goto LABEL_75;
        }
      }
LABEL_110:
      v204[0] = 0;
      int v205 = -1;
      uint64_t v56 = *((unsigned int *)v14 + 12);
      if (v56 != -1)
      {
        ((void (*)(char **, unsigned char *, WGSL::Type *))off_1ECABEE00[v56])(&v218, v204, v14);
        int v205 = v56;
        this = (WGSL::Type **)v184;
        uint64_t v3 = v185;
      }
      *(void *)&v216[0] = "' cannot be used as the type of an 'override'";
      *((void *)&v216[0] + 1) = 46;
      WGSL::TypeChecker::typeError<char &,WGSL::Type &,WTF::ASCIILiteral &>((uint64_t)this, (WGSL::AST::Variable *)((char *)v3 + 8), 39, (uint64_t)v204, v216);
      uint64_t v57 = *((void *)this[14] + 3);
      LOBYTE(v218) = 0;
      LOBYTE(v220) = 0;
      WGSL::TypeChecker::introduceValue((uint64_t)this, (uint64_t)v3 + 24, v57, 3, (uint64_t)&v218);
      if ((_BYTE)v220 && DWORD2(v219) != -1) {
        ((void (*)(const char **, char **))off_1ECABEC60[DWORD2(v219)])(&v186, &v218);
      }
      if (v205 != -1) {
        ((void (*)(char **, unsigned char *))off_1ECABED88[v205])(&v218, v204);
      }
      return;
    case 3u:
      uint64_t v35 = *((void *)v3 + 13);
      if (!v35)
      {
        if (this[12])
        {
          *((_DWORD *)v3 + 38) = 16843008;
LABEL_119:
          if (WGSL::Type::isConstructible(v14))
          {
            if (!this[12])
            {
              WGSL::TypeChecker::visit(WGSL::AST::Variable &)::$_0::operator()<WTF::ASCIILiteral>((uint64_t *)&v184, "module-scope 'var' must not use address space 'function'", 57);
              return;
            }
LABEL_261:
            if (v14)
            {
              uint64_t v111 = v14;
              while (1)
              {
                while (1)
                {
                  int v112 = *((_DWORD *)v111 + 12);
                  if (v112 != 4) {
                    break;
                  }
                  uint64_t v113 = *(void *)v111;
                  uint64_t v114 = *(unsigned int *)(*(void *)v111 + 84);
                  if (!v114)
                  {
                    __break(0xC471u);
                    goto LABEL_381;
                  }
                  uint64_t v111 = *(WGSL::Type **)(*(void *)(*(void *)(*(void *)(v113 + 72) + 8 * v114 - 8) + 104) + 24);
                  if (!v111) {
                    goto LABEL_75;
                  }
                }
                if (v112 != 10) {
                  break;
                }
                uint64_t v111 = (WGSL::Type *)*((void *)v111 + 1);
                if (!v111) {
                  goto LABEL_75;
                }
              }
              if (v112 == 3 && *((_DWORD *)v111 + 4) == 2)
              {
                WGSL::TypeChecker::visit(WGSL::AST::Variable &)::$_0::operator()<WTF::ASCIILiteral>((uint64_t *)&v184, "array with an 'override' element count can only be used as the store type of a 'var<workgroup>'", 96);
                return;
              }
            }
            goto LABEL_75;
          }
          v194[0] = 0;
          int v195 = -1;
          uint64_t v71 = *((unsigned int *)v14 + 12);
          if (v71 != -1)
          {
            ((void (*)(char **, unsigned char *, WGSL::Type *))off_1ECABEE00[v71])(&v218, v194, v14);
            int v195 = v71;
          }
          WGSL::TypeChecker::visit(WGSL::AST::Variable &)::$_0::operator()<WTF::ASCIILiteral,WGSL::Type,WTF::ASCIILiteral>((uint64_t *)&v184, (uint64_t)v194, "' cannot be used in address space <function> because it's not constructible", 76);
          if (v195 != -1) {
            ((void (*)(char **, unsigned char *))off_1ECABED88[v195])(&v218, v194);
          }
          return;
        }
        *((_DWORD *)v3 + 38) = 16777473;
LABEL_146:
        if (v14)
        {
          int v75 = *((_DWORD *)v14 + 12);
          if (v75) {
            unsigned int v76 = 0;
          }
          else {
            unsigned int v76 = v14;
          }
          if ((v75 - 7) >= 3 && (!v76 || *(unsigned __int8 *)v76 - 8 >= 3)) {
            goto LABEL_153;
          }
        }
        else if ((MEMORY[0x30] - 7) >= 3)
        {
LABEL_153:
          WGSL::TypeChecker::visit(WGSL::AST::Variable &)::$_0::operator()<WTF::ASCIILiteral>((uint64_t *)&v184, "module-scope 'var' declarations that are not of texture or sampler types must provide an address space", 103);
          return;
        }
        unsigned int v36 = 1;
LABEL_198:
        if (this[12]) {
          goto LABEL_199;
        }
        goto LABEL_253;
      }
      unsigned int v36 = *(unsigned __int8 *)(v35 + 24);
      int v37 = *(unsigned __int8 *)(v35 + 25);
      *((_WORD *)v3 + 76) = v36 | 0x100;
      *((_WORD *)v3 + 77) = v37 | 0x100;
      switch(v36)
      {
        case 0u:
          goto LABEL_119;
        case 1u:
          goto LABEL_146;
        case 2u:
          if (WGSL::Type::isConstructible(v14))
          {
            unsigned int v36 = 2;
            if (!this[12]) {
              goto LABEL_253;
            }
LABEL_199:
            double v58 = (long long *)((char *)v3 + 8);
            uint64_t v59 = "function-scope 'var' declaration must use 'function' address space";
            int v60 = (WGSL::TypeChecker *)this;
            uint64_t v61 = 67;
LABEL_200:
            WGSL::TypeChecker::typeError<WTF::ASCIILiteral &>(v60, v58, v59, v61);
            goto LABEL_201;
          }
          v192[0] = 0;
          int v193 = -1;
          uint64_t v96 = *((unsigned int *)v14 + 12);
          if (v96 != -1)
          {
            ((void (*)(char **, unsigned char *, WGSL::Type *))off_1ECABEE00[v96])(&v218, v192, v14);
            int v193 = v96;
          }
          WGSL::TypeChecker::visit(WGSL::AST::Variable &)::$_0::operator()<WTF::ASCIILiteral,WGSL::Type,WTF::ASCIILiteral>((uint64_t *)&v184, (uint64_t)v192, "' cannot be used in address space <private> because it's not constructible", 75);
          if (v193 != -1) {
            ((void (*)(char **, unsigned char *))off_1ECABED88[v193])(&v218, v192);
          }
          return;
        case 3u:
          if (v37 == 2)
          {
            WGSL::TypeChecker::visit(WGSL::AST::Variable &)::$_0::operator()<WTF::ASCIILiteral>((uint64_t *)&v184, "access mode 'write' is not valid for the <storage> address space", 65);
            return;
          }
          if (((uint64_t (*)(WGSL::Type *))WGSL::Type::isHostShareable)(v14))
          {
            if (!v37 && *((_DWORD *)v14 + 12) == 12)
            {
              WGSL::TypeChecker::visit(WGSL::AST::Variable &)::$_0::operator()<WTF::ASCIILiteral>((uint64_t *)&v184, "atomic variables in <storage> address space must have read_write access mode", 77);
              return;
            }
            unsigned int v36 = 3;
            if (this[12]) {
              goto LABEL_199;
            }
LABEL_253:
            if (v36 <= 5 && ((1 << v36) & 0x3A) != 0)
            {
              if (*((void *)v3 + 15))
              {
                switch(v36)
                {
                  case 1u:
                    v109 = "handle";
                    uint64_t v110 = 7;
                    break;
                  case 2u:
                    v109 = "private";
                    uint64_t v110 = 8;
                    break;
                  case 3u:
                    v109 = "storage";
                    uint64_t v110 = 8;
                    break;
                  case 4u:
                    v109 = "uniform";
                    uint64_t v110 = 8;
                    break;
                  case 5u:
                    v109 = "workgroup";
                    uint64_t v110 = 10;
                    break;
                  default:
                    v109 = "function";
                    uint64_t v110 = 9;
                    break;
                }
                WGSL::TypeChecker::typeError<WTF::ASCIILiteral &,WTF::ASCIILiteral &,WTF::ASCIILiteral &>((uint64_t)this, (long long *)((char *)v3 + 8), "variables in the address space '", 33, (uint64_t)v109, v110, (uint64_t)"' cannot have an initializer", 29);
LABEL_201:
                uint64_t v93 = *((void *)this[14] + 3);
                LOBYTE(v218) = 0;
                LOBYTE(v220) = 0;
                WGSL::TypeChecker::introduceValue((uint64_t)this, (uint64_t)v3 + 24, v93, 3, (uint64_t)&v218);
                if ((_BYTE)v220 && DWORD2(v219) != -1) {
                  ((void (*)(_OWORD *, char **))off_1ECABEC60[DWORD2(v219)])(v216, &v218);
                }
                return;
              }
              if (v36 == 5) {
                goto LABEL_75;
              }
            }
            goto LABEL_261;
          }
          v202[0] = 0;
          int v203 = -1;
          uint64_t v107 = *((unsigned int *)v14 + 12);
          if (v107 != -1)
          {
            ((void (*)(char **, unsigned char *, WGSL::Type *))off_1ECABEE00[v107])(&v218, v202, v14);
            int v203 = v107;
          }
          WGSL::TypeChecker::visit(WGSL::AST::Variable &)::$_0::operator()<WTF::ASCIILiteral,WGSL::Type,WTF::ASCIILiteral>((uint64_t *)&v184, (uint64_t)v202, "' cannot be used in address space <storage> because it's not host-shareable", 76);
          if (v203 != -1) {
            ((void (*)(char **, unsigned char *))off_1ECABED88[v203])(&v218, v202);
          }
          break;
        case 4u:
          if (((uint64_t (*)(WGSL::Type *))WGSL::Type::isHostShareable)(v14))
          {
            if (WGSL::Type::isConstructible(v14))
            {
              unsigned int v36 = 4;
              if (this[12]) {
                goto LABEL_199;
              }
              goto LABEL_253;
            }
            v198[0] = 0;
            int v199 = -1;
            uint64_t v106 = *((unsigned int *)v14 + 12);
            if (v106 != -1)
            {
              ((void (*)(char **, unsigned char *, WGSL::Type *))off_1ECABEE00[v106])(&v218, v198, v14);
              int v199 = v106;
            }
            WGSL::TypeChecker::visit(WGSL::AST::Variable &)::$_0::operator()<WTF::ASCIILiteral,WGSL::Type,WTF::ASCIILiteral>((uint64_t *)&v184, (uint64_t)v198, "' cannot be used in address space <uniform> because it's not constructible", 75);
            if (v199 != -1) {
              ((void (*)(char **, unsigned char *))off_1ECABED88[v199])(&v218, v198);
            }
          }
          else
          {
            v200[0] = 0;
            int v201 = -1;
            uint64_t v95 = *((unsigned int *)v14 + 12);
            if (v95 != -1)
            {
              ((void (*)(char **, unsigned char *, WGSL::Type *))off_1ECABEE00[v95])(&v218, v200, v14);
              int v201 = v95;
            }
            WGSL::TypeChecker::visit(WGSL::AST::Variable &)::$_0::operator()<WTF::ASCIILiteral,WGSL::Type,WTF::ASCIILiteral>((uint64_t *)&v184, (uint64_t)v200, "' cannot be used in address space <uniform> because it's not host-shareable", 76);
            if (v201 != -1) {
              ((void (*)(char **, unsigned char *))off_1ECABED88[v201])(&v218, v200);
            }
          }
          return;
        case 5u:
          if (((uint64_t (*)(WGSL::Type *))WGSL::Type::hasFixedFootprint)(v14))
          {
            unsigned int v36 = 5;
            if (this[12]) {
              goto LABEL_199;
            }
            goto LABEL_253;
          }
          v196[0] = 0;
          int v197 = -1;
          uint64_t v97 = *((unsigned int *)v14 + 12);
          if (v97 != -1)
          {
            ((void (*)(char **, unsigned char *, WGSL::Type *))off_1ECABEE00[v97])(&v218, v196, v14);
            int v197 = v97;
          }
          WGSL::TypeChecker::visit(WGSL::AST::Variable &)::$_0::operator()<WTF::ASCIILiteral,WGSL::Type,WTF::ASCIILiteral>((uint64_t *)&v184, (uint64_t)v196, "' cannot be used in address space <workgroup> because it doesn't have fixed footprint", 86);
          if (v197 != -1) {
            ((void (*)(char **, unsigned char *))off_1ECABED88[v197])(&v218, v196);
          }
          return;
        default:
          goto LABEL_198;
      }
      return;
    default:
      goto LABEL_75;
  }
}

WTF *WGSL::TypeChecker::visit(WGSL::AST::Variable &)::$_0::operator()<WTF::ASCIILiteral>(uint64_t *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  WGSL::TypeChecker::typeError<WTF::ASCIILiteral &>((_DWORD *)*a1, (long long *)(a1[1] + 8), a2, a3);
  uint64_t v5 = a1[1] + 24;
  uint64_t v6 = *(void *)(*(void *)(v4 + 112) + 24);
  v8[0] = 0;
  char v10 = 0;
  uint64_t result = WGSL::TypeChecker::introduceValue(v4, v5, v6, 3, (uint64_t)v8);
  if (v10)
  {
    if (v9 != -1) {
      return (WTF *)((uint64_t (*)(char *, unsigned char *))off_1ECABEC60[v9])(&v11, v8);
    }
  }
  return result;
}

void WGSL::TypeChecker::visit(WGSL::AST::Variable &)::$_0::operator()<WTF::ASCIILiteral,WGSL::Type,WTF::ASCIILiteral>(uint64_t *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  v26[0] = 0;
  unsigned int v27 = -1;
  uint64_t v9 = *(unsigned int *)(a2 + 48);
  if (v9 != -1)
  {
    ((void (*)(_DWORD **, unsigned __int8 *, uint64_t))off_1ECABEE00[v9])(&v23, v26, a2);
    unsigned int v27 = v9;
  }
  uint64_t v23 = a3;
  *(void *)&long long v24 = a4;
  WTF::tryMakeString<WTF::ASCIILiteral,WGSL::Type,WTF::ASCIILiteral>(&v22, (int8x16_t *)"type '", 7, v26, (uint64_t)&v23);
  if (!v22)
  {
    __break(0xC471u);
    return;
  }
  uint64_t v23 = v22;
  long long v24 = *(_OWORD *)(v8 + 8);
  uint64_t v10 = *(unsigned int *)(v7 + 132);
  if (v10 != *(_DWORD *)(v7 + 128))
  {
    uint64_t v16 = *(void *)(v7 + 120) + 24 * v10;
    *(void *)uint64_t v16 = v22;
    *(_OWORD *)(v16 + 8) = v24;
    ++*(_DWORD *)(v7 + 132);
    uint64_t v23 = 0;
LABEL_10:
    uint64_t v15 = v27;
    if (v27 == -1) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  unint64_t v11 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 120, v10 + 1, (unint64_t)&v23);
  uint64_t v12 = *(void *)(v7 + 120) + 24 * *(unsigned int *)(v7 + 132);
  uint64_t v13 = *(void *)v11;
  *(void *)unint64_t v11 = 0;
  *(void *)uint64_t v12 = v13;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)(v11 + 8);
  uint64_t v14 = v23;
  ++*(_DWORD *)(v7 + 132);
  uint64_t v23 = 0;
  if (!v14) {
    goto LABEL_10;
  }
  if (*v14 != 2)
  {
    *v14 -= 2;
    uint64_t v15 = v27;
    if (v27 == -1) {
      goto LABEL_12;
    }
LABEL_11:
    ((void (*)(char *, unsigned __int8 *))off_1ECABED88[v15])(&v25, v26);
    goto LABEL_12;
  }
  WTF::StringImpl::destroy();
  uint64_t v15 = v27;
  if (v27 != -1) {
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v17 = a1[1] + 24;
  uint64_t v18 = *(void *)(*(void *)(v7 + 112) + 24);
  v19[0] = 0;
  char v21 = 0;
  WGSL::TypeChecker::introduceValue(v7, v17, v18, 3, (uint64_t)v19);
  if (v21)
  {
    if (v20 != -1) {
      ((void (*)(unsigned __int8 *, unsigned char *))off_1ECABEC60[v20])(v26, v19);
    }
  }
}

uint64_t WGSL::TypeChecker::convertValue(uint64_t a1, long long *a2, const WTF::StringImpl *a3, uint64_t a4, __n128 a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a4 + 24)) {
    return 1;
  }
  if (*(const WTF::StringImpl **)(*(void *)(a1 + 112) + 24) == a3)
  {
    uint64_t v10 = *(unsigned int *)(a4 + 16);
    if (v10 != -1) {
      ((void (*)(unsigned char *, uint64_t))off_1ECABEC60[v10])(v16, a4);
    }
    uint64_t result = 0;
    *(_DWORD *)(a4 + 16) = -1;
    *(unsigned char *)(a4 + 24) = 0;
  }
  else
  {
    if (WGSL::TypeChecker::convertValueImpl(a3, (unsigned int **)a4, a3, a5)) {
      return 1;
    }
    uint64_t result = WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)v16);
    if (*(unsigned char *)(a4 + 24))
    {
      ((void (*)(uint64_t, unsigned char *))WGSL::ConstantValue::dump)(a4, v16);
      WTF::StringPrintStream::toString((uint64_t *)&v15, (WTF::StringPrintStream *)v16);
      v14[0] = " cannot be represented as '";
      v14[1] = 28;
      char v13 = 39;
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WGSL::Type const&,char>(a1, a2, (int8x16_t *)"value ", 7, (uint64_t *)&v15, (uint64_t)v14, (uint64_t)a3, &v13);
      unint64_t v11 = v15;
      uint64_t v15 = 0;
      if (v11)
      {
        if (*v11 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v11 -= 2;
        }
      }
      if (*(unsigned char *)(a4 + 24))
      {
        uint64_t v12 = *(unsigned int *)(a4 + 16);
        if (v12 != -1) {
          ((void (*)(void *, uint64_t))off_1ECABEC60[v12])(v14, a4);
        }
        *(_DWORD *)(a4 + 16) = -1;
        *(unsigned char *)(a4 + 24) = 0;
      }
      WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)v16);
      return 0;
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

WTF *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::TypeAlias *a2)
{
  uint64_t v4 = *((void *)a2 + 7);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 16))(v4) == 22)
  {
    uint64_t v6 = WGSL::TypeChecker::lookupType(this, (const WGSL::AST::Identifier *)(v4 + 64), v5);
    *((void *)this + 11) = v6;
    if (*((_DWORD *)v6 + 12) != 13) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  WGSL::AST::Visitor::visit(this, v4);
  uint64_t v6 = (void *)*((void *)this + 11);
  if (*((_DWORD *)v6 + 12) == 13)
  {
LABEL_5:
    *(void *)&long long v9 = "' requires template arguments";
    *((void *)&v9 + 1) = 30;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 0, (_OWORD *)(v4 + 8), (int8x16_t *)"type '", 7, (uint64_t)v6, &v9);
    uint64_t v6 = *(void **)(*((void *)this + 14) + 24);
  }
LABEL_6:
  *(void *)(v4 + 24) = v6;
  *((void *)this + 11) = 0;
  LOBYTE(v9) = 1;
  *((void *)&v9 + 1) = v6;
  char v10 = 3;
  v11[0] = 0;
  char v13 = 0;
  uint64_t result = WTF::HashMap<WTF::String,WGSL::Binding,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Binding>,WTF::HashTableTraits>::add<WGSL::Binding const&>((uint64_t)v14, (uint64_t *)(*((void *)this + 5) + 8), (const WTF::StringImpl **)a2 + 6, &v9);
  int v8 = v14[16];
  if (v13 && v12 != -1) {
    uint64_t result = (WTF *)((uint64_t (*)(unsigned char *, unsigned char *))off_1ECABEC60[v12])(v14, v11);
  }
  if (!v8)
  {
    LOBYTE(v9) = 39;
    return (WTF *)WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::AST::Identifier const&,char>((uint64_t)this, (long long *)a2 + 2, (int8x16_t *)"redeclaration of '", 19, (uint64_t)a2 + 24, (char *)&v9);
  }
  return result;
}

_DWORD *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::ConstAssert *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  __int16 v5 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 1;
  uint64_t result = (_DWORD *)WGSL::AST::Visitor::visit(this, v4);
  int v8 = (WGSL *)*((void *)this + 11);
  *(void *)(v4 + 24) = v8;
  *((void *)this + 11) = 0;
  *((_WORD *)this + 52) = v5;
  uint64_t v9 = *((void *)this + 14);
  char v10 = *(const WGSL::Type **)(v9 + 56);
  if (v10 != v8)
  {
    unint64_t v11 = *(WGSL **)(v9 + 24);
    if (v11 != v10 && v11 != v8)
    {
      uint64_t result = (_DWORD *)WGSL::conversionRank(v8, v10, v7);
      if (result == -1)
      {
        uint64_t v16 = (long long *)(*((void *)a2 + 3) + 8);
        v24[0] = 39;
        return WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)this, 0, v16, "const assertion condition must be a BOOL, got '", 48, (uint64_t)v8, v24);
      }
      uint64_t v9 = *((void *)this + 14);
    }
  }
  if (*(WGSL **)(v9 + 24) != v8)
  {
    uint64_t v13 = *((void *)a2 + 3);
    v24[0] = 0;
    char v26 = 0;
    if (!*(unsigned char *)(v13 + 56)) {
      return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (long long *)(v13 + 8), "const assertion requires a const-expression", 44);
    }
    int v25 = -1;
    uint64_t v14 = *(unsigned int *)(v13 + 48);
    if (v14 == -1)
    {
      char v26 = 1;
    }
    else
    {
      ((void (*)(char *, char *, uint64_t))off_1ECABEE88[v14])(&v27, v24, v13 + 32);
      int v25 = v14;
      char v26 = 1;
      if (v14 == 6)
      {
        if (v24[0])
        {
          int v15 = 6;
          return (_DWORD *)((uint64_t (*)(char *, char *))off_1ECABEC60[v15])(&v27, v24);
        }
        uint64_t result = WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (long long *)((char *)a2 + 8), "const assertion failed", 23);
        if (v26)
        {
          int v15 = v25;
          if (v25 != -1) {
            return (_DWORD *)((uint64_t (*)(char *, char *))off_1ECABEC60[v15])(&v27, v24);
          }
        }
        return result;
      }
    }
    uint64_t v17 = std::__throw_bad_variant_access[abi:sn180100]();
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,char>(v17, v18, v19, v20, v21, v22, v23);
  }
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,char>(uint64_t a1, int a2, long long *a3, _DWORD *a4, uint64_t a5, uint64_t a6, char *a7)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  v27[0] = 0;
  int v28 = -1;
  uint64_t v13 = *(unsigned int *)(a6 + 48);
  if (v13 != -1)
  {
    ((void (*)(_DWORD **, unsigned __int8 *, uint64_t))off_1ECABEE00[v13])(&v24, v27, a6);
    int v28 = v13;
  }
  char v14 = *a7;
  long long v24 = a4;
  *(void *)&long long v25 = a5;
  char v26 = v14;
  uint64_t result = (_DWORD *)WTF::tryMakeString<WTF::ASCIILiteral,WGSL::Type,char>((uint64_t)&v24, v27, &v26, &v23);
  uint64_t v16 = v23;
  if (!v23)
  {
    __break(0xC471u);
    return result;
  }
  uint64_t v23 = 0;
  long long v24 = v16;
  long long v25 = *a3;
  uint64_t v17 = *(unsigned int *)(a1 + 132);
  if (v17 == *(_DWORD *)(a1 + 128))
  {
    unint64_t v18 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v17 + 1, (unint64_t)&v24);
    uint64_t v19 = *(void *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
    uint64_t v20 = *(void *)v18;
    *(void *)unint64_t v18 = 0;
    *(void *)uint64_t v19 = v20;
    *(_OWORD *)(v19 + 8) = *(_OWORD *)(v18 + 8);
    uint64_t v21 = v24;
    ++*(_DWORD *)(a1 + 132);
    long long v24 = 0;
    if (v21)
    {
      if (*v21 == 2)
      {
        WTF::StringImpl::destroy();
        uint64_t result = v23;
        uint64_t v23 = 0;
        if (!result) {
          goto LABEL_14;
        }
      }
      else
      {
        *v21 -= 2;
        uint64_t result = v23;
        uint64_t v23 = 0;
        if (!result) {
          goto LABEL_14;
        }
      }
LABEL_11:
      if (*result == 2) {
        uint64_t result = (_DWORD *)WTF::StringImpl::destroy();
      }
      else {
        *result -= 2;
      }
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 120) + 24 * v17;
    *(void *)uint64_t v22 = v16;
    *(_OWORD *)(v22 + 8) = v25;
    ++*(_DWORD *)(a1 + 132);
    long long v24 = 0;
  }
  uint64_t result = v23;
  uint64_t v23 = 0;
  if (result) {
    goto LABEL_11;
  }
LABEL_14:
  if (v28 != -1) {
    uint64_t result = (_DWORD *)((uint64_t (*)(char *, unsigned __int8 *))off_1ECABED88[v28])(&v26, v27);
  }
  if (a2) {
    *(void *)(a1 + 88) = *(void *)(*(void *)(a1 + 112) + 24);
  }
  return result;
}

void WGSL::TypeChecker::visit(WGSL::Type **this, WGSL::AST::Function *a2)
{
  uint64_t v4 = *((unsigned int *)a2 + 21);
  if (v4)
  {
    __int16 v5 = (void *)*((void *)a2 + 9);
    uint64_t v6 = 8 * v4;
    do
    {
      while (1)
      {
        uint64_t v7 = *v5;
        if ((*(unsigned int (**)(void))(*(void *)*v5 + 16))(*v5) == 11) {
          break;
        }
        (*((void (**)(WGSL::Type **, uint64_t))*this + 11))(this, v7);
        ++v5;
        v6 -= 8;
        if (!v6) {
          goto LABEL_6;
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
LABEL_6:
    int v32 = 0;
    uint64_t v33 = 0;
    uint64_t v8 = *((unsigned int *)a2 + 17);
    if (!v8) {
      goto LABEL_30;
    }
  }
  else
  {
    int v32 = 0;
    uint64_t v33 = 0;
    uint64_t v8 = *((unsigned int *)a2 + 17);
    if (!v8) {
      goto LABEL_30;
    }
  }
  if (v8 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x1826A1D78);
  }
  uint64_t v9 = (WTF *)WTF::fastMalloc((WTF *)(8 * v8));
  LODWORD(v33) = v8;
  int v32 = v9;
  uint64_t v10 = *((unsigned int *)a2 + 17);
  if (v10)
  {
    unsigned int v11 = 0;
    int v12 = (uint64_t *)*((void *)a2 + 7);
    uint64_t v13 = &v12[v10];
    while (1)
    {
      uint64_t v16 = *v12;
      uint64_t v17 = *(unsigned int *)(*v12 + 84);
      if (v17)
      {
        unint64_t v18 = *(uint64_t **)(v16 + 72);
        uint64_t v19 = 8 * v17;
        do
        {
          uint64_t v20 = *v18++;
          WGSL::AST::Visitor::visit(this, v20);
          v19 -= 8;
        }
        while (v19);
      }
      uint64_t v35 = 0;
      uint64_t v21 = *(void *)(v16 + 64);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v21 + 16))(v21) == 22) {
        break;
      }
      WGSL::AST::Visitor::visit(this, v21);
      uint64_t v23 = this[11];
      if (*((_DWORD *)v23 + 12) == 13) {
        goto LABEL_18;
      }
LABEL_19:
      *(void *)(v21 + 24) = v23;
      this[11] = 0;
      uint64_t v35 = v23;
      if (WGSL::Type::isConstructible(v23)) {
        goto LABEL_24;
      }
      int v24 = *((_DWORD *)v35 + 12);
      if (v24 == 11) {
        goto LABEL_24;
      }
      if (v24)
      {
        if ((v24 - 7) < 3) {
          goto LABEL_24;
        }
LABEL_23:
        WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (long long *)(v16 + 8), "type of function parameter must be constructible or a pointer, sampler or texture", 82);
        uint64_t v35 = (WGSL::Type *)*((void *)this[14] + 3);
        goto LABEL_24;
      }
      if (*(unsigned __int8 *)v35 - 8 >= 3) {
        goto LABEL_23;
      }
LABEL_24:
      if (v11 == v33)
      {
        char v14 = (void *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v32, v11 + 1, (unint64_t)&v35);
        int v15 = HIDWORD(v33);
        uint64_t v9 = v32;
        *((void *)v32 + HIDWORD(v33)) = *v14;
        unsigned int v11 = v15 + 1;
        HIDWORD(v33) = v11;
        if (++v12 == v13) {
          goto LABEL_30;
        }
      }
      else
      {
        *((void *)v9 + v11++) = v35;
        HIDWORD(v33) = v11;
        if (++v12 == v13) {
          goto LABEL_30;
        }
      }
    }
    uint64_t v23 = (WGSL::Type *)WGSL::TypeChecker::lookupType((WGSL::TypeChecker *)this, (const WGSL::AST::Identifier *)(v21 + 64), v22);
    this[11] = v23;
    if (*((_DWORD *)v23 + 12) != 13) {
      goto LABEL_19;
    }
LABEL_18:
    *(void *)&long long v34 = "' requires template arguments";
    *((void *)&v34 + 1) = 30;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 0, (_OWORD *)(v21 + 8), (int8x16_t *)"type '", 7, (uint64_t)v23, &v34);
    uint64_t v23 = (WGSL::Type *)*((void *)this[14] + 3);
    goto LABEL_19;
  }
LABEL_30:
  uint64_t v25 = *((unsigned int *)a2 + 25);
  if (v25)
  {
    char v26 = (uint64_t *)*((void *)a2 + 11);
    uint64_t v27 = 8 * v25;
    do
    {
      uint64_t v28 = *v26++;
      WGSL::AST::Visitor::visit(this, v28);
      v27 -= 8;
    }
    while (v27);
  }
  uint64_t v29 = *((void *)a2 + 13);
  if (!v29)
  {
    this[12] = (WGSL::Type *)*((void *)this[14] + 6);
    goto LABEL_42;
  }
  if ((*(unsigned int (**)(void))(*(void *)v29 + 16))(*((void *)a2 + 13)) == 22)
  {
    uint64_t v31 = (WGSL::Type *)WGSL::TypeChecker::lookupType((WGSL::TypeChecker *)this, (const WGSL::AST::Identifier *)(v29 + 64), v30);
    this[11] = v31;
    if (*((_DWORD *)v31 + 12) != 13)
    {
LABEL_40:
      *(void *)(v29 + 24) = v31;
      this[11] = 0;
      this[12] = v31;
      if ((WGSL::Type::isConstructible(v31) & 1) == 0)
      {
        this[12] = (WGSL::Type *)*((void *)this[14] + 3);
        WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (long long *)(*((void *)a2 + 13) + 8), "function return type must be a constructible type", 50);
      }
LABEL_42:
      operator new();
    }
  }
  else
  {
    WGSL::AST::Visitor::visit(this, v29);
    uint64_t v31 = this[11];
    if (*((_DWORD *)v31 + 12) != 13) {
      goto LABEL_40;
    }
  }
  *(void *)&long long v34 = "' requires template arguments";
  *((void *)&v34 + 1) = 30;
  WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 0, (_OWORD *)(v29 + 8), (int8x16_t *)"type '", 7, (uint64_t)v31, &v34);
  uint64_t v31 = (WGSL::Type *)*((void *)this[14] + 3);
  goto LABEL_40;
}

_DWORD *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::AlignAttribute *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  __int16 v5 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 1;
  WGSL::AST::Visitor::visit(this, v4);
  uint64_t v7 = (unsigned __int8 *)*((void *)this + 11);
  *(void *)(v4 + 24) = v7;
  *((void *)this + 11) = 0;
  *((_WORD *)this + 52) = v5;
  if (!v7) {
    goto LABEL_12;
  }
  while (1)
  {
    int v8 = *((_DWORD *)v7 + 12);
    if (v8 != 10) {
      break;
    }
    uint64_t v7 = (unsigned __int8 *)*((void *)v7 + 1);
    if (!v7) {
      goto LABEL_12;
    }
  }
  if (v8 || *v7 - 1 >= 2 && (*v7 || (uint64_t v7 = *(unsigned __int8 **)(*((void *)this + 14) + 64)) == 0))
  {
LABEL_12:
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (long long *)((char *)a2 + 8), "@align must be an i32 or u32 value", 35);
  }
  else
  {
    return (_DWORD *)WGSL::TypeChecker::convertValue((uint64_t)this, (long long *)(v4 + 8), (const WTF::StringImpl *)v7, v4 + 32, v6);
  }
}

_DWORD *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::BindingAttribute *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  __int16 v5 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 1;
  WGSL::AST::Visitor::visit(this, v4);
  uint64_t v7 = (unsigned __int8 *)*((void *)this + 11);
  *(void *)(v4 + 24) = v7;
  *((void *)this + 11) = 0;
  *((_WORD *)this + 52) = v5;
  if (!v7) {
    goto LABEL_12;
  }
  while (1)
  {
    int v8 = *((_DWORD *)v7 + 12);
    if (v8 != 10) {
      break;
    }
    uint64_t v7 = (unsigned __int8 *)*((void *)v7 + 1);
    if (!v7) {
      goto LABEL_12;
    }
  }
  if (v8 || *v7 - 1 >= 2 && (*v7 || (uint64_t v7 = *(unsigned __int8 **)(*((void *)this + 14) + 64)) == 0))
  {
LABEL_12:
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (long long *)((char *)a2 + 8), "@binding must be an i32 or u32 value", 37);
  }
  else
  {
    return (_DWORD *)WGSL::TypeChecker::convertValue((uint64_t)this, (long long *)(v4 + 8), (const WTF::StringImpl *)v7, v4 + 32, v6);
  }
}

_DWORD *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::GroupAttribute *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  __int16 v5 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 1;
  WGSL::AST::Visitor::visit(this, v4);
  uint64_t v7 = (unsigned __int8 *)*((void *)this + 11);
  *(void *)(v4 + 24) = v7;
  *((void *)this + 11) = 0;
  *((_WORD *)this + 52) = v5;
  if (!v7) {
    goto LABEL_12;
  }
  while (1)
  {
    int v8 = *((_DWORD *)v7 + 12);
    if (v8 != 10) {
      break;
    }
    uint64_t v7 = (unsigned __int8 *)*((void *)v7 + 1);
    if (!v7) {
      goto LABEL_12;
    }
  }
  if (v8 || *v7 - 1 >= 2 && (*v7 || (uint64_t v7 = *(unsigned __int8 **)(*((void *)this + 14) + 64)) == 0))
  {
LABEL_12:
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (long long *)((char *)a2 + 8), "@group must be an i32 or u32 value", 35);
  }
  else
  {
    return (_DWORD *)WGSL::TypeChecker::convertValue((uint64_t)this, (long long *)(v4 + 8), (const WTF::StringImpl *)v7, v4 + 32, v6);
  }
}

_DWORD *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::IdAttribute *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  __int16 v5 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 1;
  WGSL::AST::Visitor::visit(this, v4);
  uint64_t v7 = (unsigned __int8 *)*((void *)this + 11);
  *(void *)(v4 + 24) = v7;
  *((void *)this + 11) = 0;
  *((_WORD *)this + 52) = v5;
  if (!v7) {
    goto LABEL_12;
  }
  while (1)
  {
    int v8 = *((_DWORD *)v7 + 12);
    if (v8 != 10) {
      break;
    }
    uint64_t v7 = (unsigned __int8 *)*((void *)v7 + 1);
    if (!v7) {
      goto LABEL_12;
    }
  }
  if (v8 || *v7 - 1 >= 2 && (*v7 || (uint64_t v7 = *(unsigned __int8 **)(*((void *)this + 14) + 64)) == 0))
  {
LABEL_12:
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (long long *)((char *)a2 + 8), "@id must be an i32 or u32 value", 32);
  }
  else
  {
    return (_DWORD *)WGSL::TypeChecker::convertValue((uint64_t)this, (long long *)(v4 + 8), (const WTF::StringImpl *)v7, v4 + 32, v6);
  }
}

_DWORD *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::LocationAttribute *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  __int16 v5 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 1;
  WGSL::AST::Visitor::visit(this, v4);
  uint64_t v7 = (unsigned __int8 *)*((void *)this + 11);
  *(void *)(v4 + 24) = v7;
  *((void *)this + 11) = 0;
  *((_WORD *)this + 52) = v5;
  if (!v7) {
    goto LABEL_12;
  }
  while (1)
  {
    int v8 = *((_DWORD *)v7 + 12);
    if (v8 != 10) {
      break;
    }
    uint64_t v7 = (unsigned __int8 *)*((void *)v7 + 1);
    if (!v7) {
      goto LABEL_12;
    }
  }
  if (v8 || *v7 - 1 >= 2 && (*v7 || (uint64_t v7 = *(unsigned __int8 **)(*((void *)this + 14) + 64)) == 0))
  {
LABEL_12:
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (long long *)((char *)a2 + 8), "@location must be an i32 or u32 value", 38);
  }
  else
  {
    return (_DWORD *)WGSL::TypeChecker::convertValue((uint64_t)this, (long long *)(v4 + 8), (const WTF::StringImpl *)v7, v4 + 32, v6);
  }
}

_DWORD *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::SizeAttribute *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  __int16 v5 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 1;
  WGSL::AST::Visitor::visit(this, v4);
  uint64_t v7 = (unsigned __int8 *)*((void *)this + 11);
  *(void *)(v4 + 24) = v7;
  *((void *)this + 11) = 0;
  *((_WORD *)this + 52) = v5;
  if (!v7) {
    goto LABEL_12;
  }
  while (1)
  {
    int v8 = *((_DWORD *)v7 + 12);
    if (v8 != 10) {
      break;
    }
    uint64_t v7 = (unsigned __int8 *)*((void *)v7 + 1);
    if (!v7) {
      goto LABEL_12;
    }
  }
  if (v8 || *v7 - 1 >= 2 && (*v7 || (uint64_t v7 = *(unsigned __int8 **)(*((void *)this + 14) + 64)) == 0))
  {
LABEL_12:
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (long long *)((char *)a2 + 8), "@size must be an i32 or u32 value", 34);
  }
  else
  {
    return (_DWORD *)WGSL::TypeChecker::convertValue((uint64_t)this, (long long *)(v4 + 8), (const WTF::StringImpl *)v7, v4 + 32, v6);
  }
}

_DWORD *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::WorkgroupSizeAttribute *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  char v5 = *((unsigned char *)this + 105);
  char v6 = *((unsigned char *)this + 104);
  *((_WORD *)this + 52) = 2;
  uint64_t result = (_DWORD *)WGSL::AST::Visitor::visit(this, v4);
  uint64_t v9 = (WGSL *)*((void *)this + 11);
  *(void *)(v4 + 24) = v9;
  *((void *)this + 11) = 0;
  *((unsigned char *)this + 104) = v6;
  *((unsigned char *)this + 105) = v5;
  if (!v9) {
    goto LABEL_14;
  }
  uint64_t v10 = v9;
  while (1)
  {
    int v11 = *((_DWORD *)v10 + 12);
    if (v11 != 10) {
      break;
    }
    uint64_t v10 = (WGSL *)*((void *)v10 + 1);
    if (!v10) {
      goto LABEL_14;
    }
  }
  if (v11 || *(unsigned __int8 *)v10 >= 3u)
  {
LABEL_14:
    uint64_t v16 = "@workgroup_size x dimension must be an i32 or u32 value";
LABEL_15:
    uint64_t v17 = (long long *)((char *)a2 + 8);
    unint64_t v18 = this;
    uint64_t v19 = 56;
LABEL_16:
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(v18, 0, v17, v16, v19);
  }
  int v12 = (WGSL *)*((void *)a2 + 4);
  if (!v12)
  {
    uint64_t v13 = 0;
    goto LABEL_20;
  }
  *((_WORD *)this + 52) = 2;
  uint64_t result = (_DWORD *)WGSL::AST::Visitor::visit(this, (uint64_t)v12);
  uint64_t v13 = (WGSL *)*((void *)this + 11);
  *((void *)v12 + 3) = v13;
  *((void *)this + 11) = 0;
  *((unsigned char *)this + 104) = v6;
  *((unsigned char *)this + 105) = v5;
  if (!v13) {
    goto LABEL_63;
  }
  char v14 = v13;
  while (1)
  {
    int v15 = *((_DWORD *)v14 + 12);
    if (v15 != 10) {
      break;
    }
    char v14 = (WGSL *)*((void *)v14 + 1);
    if (!v14) {
      goto LABEL_63;
    }
  }
  if (v15 || *(unsigned __int8 *)v14 >= 3u)
  {
LABEL_63:
    uint64_t v16 = "@workgroup_size y dimension must be an i32 or u32 value";
    goto LABEL_15;
  }
  uint64_t v33 = *((void *)a2 + 5);
  if (v33)
  {
    *((_WORD *)this + 52) = 2;
    uint64_t result = (_DWORD *)WGSL::AST::Visitor::visit(this, v33);
    int v12 = (WGSL *)*((void *)this + 11);
    *(void *)(v33 + 24) = v12;
    *((void *)this + 11) = 0;
    *((unsigned char *)this + 104) = v6;
    *((unsigned char *)this + 105) = v5;
    if (!v12) {
      goto LABEL_68;
    }
    long long v34 = v12;
    while (1)
    {
      int v35 = *((_DWORD *)v34 + 12);
      if (v35 != 10) {
        break;
      }
      long long v34 = (WGSL *)*((void *)v34 + 1);
      if (!v34) {
        goto LABEL_68;
      }
    }
    if (v35 || *(unsigned __int8 *)v34 >= 3u)
    {
LABEL_68:
      uint64_t v16 = "@workgroup_size z dimension must be an i32 or u32 value";
      goto LABEL_15;
    }
  }
  else
  {
    int v12 = 0;
  }
LABEL_20:
  uint64_t v20 = *((void *)this + 14);
  uint64_t v21 = *(const WGSL::Type **)(v20 + 64);
  if (v9 != v21)
  {
    uint64_t v22 = *(WGSL **)(v20 + 24);
    if (v22 != v21 && v22 != v9)
    {
      uint64_t result = (_DWORD *)WGSL::conversionRank(v9, v21, v8);
      if (result == -1) {
        goto LABEL_71;
      }
    }
  }
  if (v13
    && v13 != v21
    && ((int v24 = *(WGSL **)(*((void *)this + 14) + 24), v24 != v21) ? (v25 = v24 == v13) : (v25 = 1),
        !v25 && (uint64_t result = (_DWORD *)WGSL::conversionRank(v13, v21, v8), result == -1))
    || v12
    && v12 != v21
    && ((v26 = *(const WGSL::Type **)(*((void *)this + 14) + 24), v26 != v21) ? (BOOL v27 = v26 == v12) : (BOOL v27 = 1),
        !v27 && (uint64_t result = (_DWORD *)WGSL::conversionRank(v12, v21, v8), result == -1)))
  {
LABEL_71:
    uint64_t v28 = *((void *)this + 14);
    uint64_t v29 = *(const WGSL::Type **)(v28 + 72);
    if (v9 != v29)
    {
      uint64_t v30 = *(const WGSL::Type **)(v28 + 24);
      if (v30 != v29 && v30 != v9)
      {
        uint64_t result = (_DWORD *)WGSL::conversionRank(v9, v29, v8);
        if (result == -1) {
          goto LABEL_64;
        }
      }
    }
    if (v13
      && v13 != v29
      && (uint64_t v31 = *(const WGSL::Type **)(*((void *)this + 14) + 24), v31 != v29)
      && v31 != v13
      && (uint64_t result = (_DWORD *)WGSL::conversionRank(v13, v29, v8), result == -1)
      || v12
      && v12 != v29
      && (int v32 = *(const WGSL::Type **)(*((void *)this + 14) + 24), v32 != v29)
      && v32 != v12
      && (uint64_t result = (_DWORD *)WGSL::conversionRank(v12, v29, v8), result == -1))
    {
LABEL_64:
      uint64_t v16 = "@workgroup_size arguments must be of the same type, either i32 or u32";
      uint64_t v17 = (long long *)((char *)a2 + 8);
      unint64_t v18 = this;
      uint64_t v19 = 70;
      goto LABEL_16;
    }
  }
  return result;
}

_DWORD *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::AssignmentStatement *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  __int16 v5 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 3;
  WGSL::AST::Visitor::visit(this, v4);
  uint64_t v6 = *((void *)this + 11);
  *(void *)(v4 + 24) = v6;
  *((void *)this + 11) = 0;
  uint64_t v7 = *((void *)a2 + 4);
  *((_WORD *)this + 52) = 3;
  uint64_t result = (_DWORD *)WGSL::AST::Visitor::visit(this, v7);
  int v11 = (WGSL *)*((void *)this + 11);
  *(void *)(v7 + 24) = v11;
  *((void *)this + 11) = 0;
  *((_WORD *)this + 52) = v5;
  int v12 = *(WGSL **)(*((void *)this + 14) + 24);
  if (v12 == (WGSL *)v6) {
    return result;
  }
  if (!v6 || *(_DWORD *)(v6 + 48) != 10)
  {
    uint64_t v16 = (long long *)((char *)a2 + 8);
    LOBYTE(v22) = 39;
    uint64_t v17 = "cannot assign to a value of type '";
    unint64_t v18 = this;
    uint64_t v19 = 35;
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)v18, 0, v16, v17, v19, v6, (char *)&v22);
  }
  if (!*(unsigned char *)(v6 + 1))
  {
    uint64_t v16 = (long long *)((char *)a2 + 8);
    LOBYTE(v22) = 39;
    uint64_t v17 = "cannot store into a read-only type '";
    unint64_t v18 = this;
    uint64_t v19 = 37;
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)v18, 0, v16, v17, v19, v6, (char *)&v22);
  }
  uint64_t v13 = *(const WGSL::Type **)(v6 + 8);
  if (v13 == v11) {
    goto LABEL_12;
  }
  if (v12 == v11 || v12 == v13)
  {
    int v11 = *(WGSL **)(v6 + 8);
LABEL_12:
    uint64_t v15 = *((void *)a2 + 4);
    *(void *)(v15 + 24) = v11;
    if (!*(unsigned char *)(v15 + 56)) {
      return result;
    }
    goto LABEL_13;
  }
  uint64_t result = (_DWORD *)WGSL::conversionRank(v11, v13, v9);
  uint64_t v20 = *(void *)(v6 + 8);
  if (result == -1)
  {
    *(void *)&long long v22 = "' to '";
    *((void *)&v22 + 1) = 7;
    char v21 = 39;
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)this, 0, (WGSL::AST::AssignmentStatement *)((char *)a2 + 8), (int8x16_t *)"cannot assign value of type '", 30, (uint64_t)v11, &v22, v20, &v21);
  }
  int v11 = *(WGSL **)(v6 + 8);
  uint64_t v15 = *((void *)a2 + 4);
  *(void *)(v15 + 24) = v20;
  if (*(unsigned char *)(v15 + 56))
  {
LABEL_13:
    return (_DWORD *)WGSL::TypeChecker::convertValue((uint64_t)this, (long long *)(v15 + 8), v11, v15 + 32, v10);
  }
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral,WGSL::Type const&,char>(uint64_t a1, int a2, _OWORD *a3, int8x16_t *a4, uint64_t a5, uint64_t a6, long long *a7, uint64_t a8, char *a9)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  v33[0] = 0;
  int v34 = -1;
  uint64_t v15 = *(unsigned int *)(a6 + 48);
  if (v15 != -1)
  {
    ((void (*)(unsigned char *, unsigned __int8 *, uint64_t))off_1ECABEE00[v15])(v29, v33, a6);
    int v34 = v15;
  }
  long long v16 = *a7;
  v31[0] = 0;
  unsigned int v32 = -1;
  uint64_t v17 = *(unsigned int *)(a8 + 48);
  if (v17 != -1)
  {
    long long v26 = v16;
    ((void (*)(unsigned char *, unsigned __int8 *, uint64_t))off_1ECABEE00[v17])(v29, v31, a8);
    long long v16 = v26;
    unsigned int v32 = v17;
  }
  char v18 = *a9;
  *(_OWORD *)uint64_t v29 = v16;
  char v30 = v18;
  uint64_t result = WTF::tryMakeString<WTF::ASCIILiteral,WGSL::Type,WTF::ASCIILiteral,WGSL::Type,char>(&v28, a4, a5, v33, (uint64_t)v29, v31, &v30);
  if (!v28)
  {
    __break(0xC471u);
    return result;
  }
  *(void *)uint64_t v29 = v28;
  *(_OWORD *)&v29[8] = *a3;
  uint64_t v20 = *(unsigned int *)(a1 + 132);
  if (v20 == *(_DWORD *)(a1 + 128))
  {
    unint64_t v21 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v20 + 1, (unint64_t)v29);
    uint64_t v22 = *(void *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
    uint64_t v23 = *(void *)v21;
    *(void *)unint64_t v21 = 0;
    *(void *)uint64_t v22 = v23;
    *(_OWORD *)(v22 + 8) = *(_OWORD *)(v21 + 8);
    uint64_t result = *(_DWORD **)v29;
    ++*(_DWORD *)(a1 + 132);
    *(void *)uint64_t v29 = 0;
    if (result)
    {
      if (*result == 2)
      {
        uint64_t result = (_DWORD *)WTF::StringImpl::destroy();
        uint64_t v24 = v32;
        if (v32 == -1) {
          goto LABEL_14;
        }
      }
      else
      {
        *result -= 2;
        uint64_t v24 = v32;
        if (v32 == -1) {
          goto LABEL_14;
        }
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v25 = *(void *)(a1 + 120) + 24 * v20;
    *(void *)uint64_t v25 = v28;
    *(_OWORD *)(v25 + 8) = *(_OWORD *)&v29[8];
    ++*(_DWORD *)(a1 + 132);
    *(void *)uint64_t v29 = 0;
  }
  uint64_t v24 = v32;
  if (v32 != -1) {
LABEL_13:
  }
    uint64_t result = (_DWORD *)((uint64_t (*)(char *, unsigned __int8 *))off_1ECABED88[v24])(&v30, v31);
LABEL_14:
  unsigned int v32 = -1;
  if (v34 != -1) {
    uint64_t result = (_DWORD *)((uint64_t (*)(char *, unsigned __int8 *))off_1ECABED88[v34])(&v30, v33);
  }
  if (a2) {
    *(void *)(a1 + 88) = *(void *)(*(void *)(a1 + 112) + 24);
  }
  return result;
}

uint64_t WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::CallStatement *a2)
{
  uint64_t v3 = *((void *)a2 + 3);
  __int16 v4 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 259;
  uint64_t result = WGSL::AST::Visitor::visit(this, v3);
  *(void *)(v3 + 24) = *((void *)this + 11);
  *((void *)this + 11) = 0;
  *((_WORD *)this + 52) = v4;
  return result;
}

WTF *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::CompoundAssignmentStatement *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  __int16 v5 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 3;
  WGSL::AST::Visitor::visit(this, v4);
  uint64_t v6 = *((void *)this + 11);
  *(void *)(v4 + 24) = v6;
  *((void *)this + 11) = 0;
  *((_WORD *)this + 52) = v5;
  if (v6 && *(_DWORD *)(v6 + 48) == 10)
  {
    uint64_t result = WGSL::TypeChecker::binaryExpression((unint64_t)this, (long long *)((char *)a2 + 8), 0, *((unsigned __int8 *)a2 + 40), *((void *)a2 + 3), *((void *)a2 + 4));
    *((void *)this + 11) = 0;
  }
  else
  {
    char v8 = 39;
    return (WTF *)WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)this, 0, (long long *)((char *)a2 + 8), "cannot assign to a value of type '", 35, v6, &v8);
  }
  return result;
}

WTF *WGSL::TypeChecker::binaryExpression(unint64_t a1, long long *a2, const WTF::StringImpl *a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  void (*v48)(const char **__return_ptr, const WTF::StringImpl *, const char **);
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  unsigned __int8 **v54;
  uint64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59;
  unsigned __int8 *v60;
  uint64_t v61;
  unsigned __int8 **v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  _DWORD *v66;
  _DWORD *v67;
  __n128 v68;
  int v69;
  unsigned int v70;
  BOOL v71;
  const char *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  uint64_t v77;
  WTF *v78;
  WTF *v79;
  WTF *result;
  int v81;
  const char *v82;
  unsigned __int8 *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  int v95;
  long long *v96;
  _DWORD *v97;
  uint64_t v98;
  uint64_t v99;
  _DWORD *v100;
  uint64_t v101;
  long long *v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  WTF *v109;
  _DWORD *v110;
  uint64_t v111;
  uint64_t v112;
  _DWORD *v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  BOOL v118;
  int v119;
  WTF *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  const char *v125;
  uint64_t v126;
  long long *v127;
  const WTF::StringImpl *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned char v132[16];
  int v133;
  WTF *v134;
  const WTF::StringImpl *v135;
  int v136;
  char v137;
  WTF *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _DWORD *v142;
  int v143;
  uint64_t v144;
  WTF *v145;
  uint64_t v146;
  int v147;
  WTF *v148;
  uint64_t v149;
  int v150;
  char v151;
  uint64_t v152[2];
  int v153;
  const char *v154;
  void v155[2];
  unsigned int v156;
  int v157;
  const char *v158;
  long long v159;
  int v160;
  int v161;
  int v162;
  uint64_t v163;

  unsigned int v8 = a4;
  uint64_t v9 = a2;
  int8x16_t v163 = *MEMORY[0x1E4F143B8];
  int v11 = (&off_1E521DE40)[2 * a4 + 1];
  if (v11)
  {
    a2 = (long long *)(v11 - 1);
    if (v11 == (char *)1)
    {
      int v12 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      int v12 = (WTF::StringImpl *)v158;
    }
  }
  else
  {
    int v12 = 0;
  }
  int v138 = (WTF *)&v140;
  int8x16_t v129 = a5;
  BOOL v140 = a5;
  uint64_t v141 = a6;
  unint64_t v139 = 0x200000002;
  __int16 v145 = 0;
  uint64_t v146 = 0;
  uint64_t v13 = *(void *)(a1 + 152);
  if (!v13) {
    goto LABEL_105;
  }
  int v14 = *(_DWORD *)(v13 - 8);
  unsigned int v15 = *((_DWORD *)v12 + 4);
  int8x16_t v130 = a6;
  unsigned int v16 = v8;
  if (v15 < 0x100) {
    unsigned int v17 = WTF::StringImpl::hashSlowCase(v12);
  }
  else {
    unsigned int v17 = v15 >> 8;
  }
  for (i = 0; ; unsigned int v17 = i + v19)
  {
    int v19 = v17 & v14;
    uint64_t v20 = v13 + 48 * (v17 & v14);
    unint64_t v21 = *(WTF **)v20;
    if (*(void *)v20 != -1)
    {
      if (!v21)
      {
        unsigned int v8 = v16;
        goto LABEL_103;
      }
      if (WTF::equal(v21, v12, a3)) {
        break;
      }
    }
    ++i;
  }
  uint64_t v22 = *(void *)(a1 + 152);
  unsigned int v8 = v16;
  if (v22 && v20 == v22 + 48 * *(unsigned int *)(v22 - 4)) {
    goto LABEL_103;
  }
  uint64_t v148 = 0;
  uint64_t v149 = 0;
  if (HIDWORD(v139) >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x1826A3F44);
  }
  uint64_t v23 = (WTF *)WTF::fastMalloc((WTF *)(8 * HIDWORD(v139)));
  LODWORD(v149) = HIDWORD(v139);
  uint64_t v148 = v23;
  unint64_t v24 = 0;
  do
  {
    while (1)
    {
      uint64_t v158 = 0;
      uint64_t v27 = *((void *)v138 + v24);
      __int16 v28 = *(_WORD *)(a1 + 104);
      *(unsigned char *)(a1 + 105) = 0;
      WGSL::AST::Visitor::visit((unsigned char *)a1, v27);
      uint64_t v29 = *(const char **)(a1 + 88);
      *(void *)(v27 + 24) = v29;
      *(void *)(a1 + 88) = 0;
      *(_WORD *)(a1 + 104) = v28;
      uint64_t v158 = v29;
      if (*(const char **)(*(void *)(a1 + 112) + 24) == v29)
      {
        *(void *)(a1 + 88) = v29;
        goto LABEL_101;
      }
      int v30 = HIDWORD(v149);
      if (HIDWORD(v149) != v149) {
        break;
      }
      uint64_t v25 = (void *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v148, HIDWORD(v149) + 1, (unint64_t)&v158);
      int v26 = HIDWORD(v149);
      *((void *)v148 + HIDWORD(v149)) = *v25;
      HIDWORD(v149) = v26 + 1;
      if (++v24 >= HIDWORD(v139)) {
        goto LABEL_25;
      }
    }
    *((void *)v148 + HIDWORD(v149)) = v29;
    HIDWORD(v149) = v30 + 1;
    ++v24;
  }
  while (v24 < HIDWORD(v139));
LABEL_25:
  WGSL::resolveOverloads(*(void *)(a1 + 112), (uint64_t *)(v20 + 32), (uint64_t)&v148, (uint64_t)&v145, (uint64_t)&v134);
  if (!(_BYTE)v136)
  {
    int v49 = WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v158);
    uint64_t v50 = HIDWORD(v149);
    if (HIDWORD(v149))
    {
      uint64_t v51 = v148;
      uint64_t v52 = *(unsigned __int8 **)v148;
      uint64_t v53 = (*((uint64_t (**)(uint64_t))v158 + 4))(v49);
      WGSL::Type::dump(v52, v53);
      (*((void (**)(const char **))v158 + 5))(&v158);
      if (v50 != 1)
      {
        unsigned int v54 = (unsigned __int8 **)((char *)v51 + 8);
        uint64_t v55 = 8 * v50 - 8;
        do
        {
          uint64_t v56 = *v54++;
          (*((void (**)(const char **))v158 + 4))(&v158);
          WTF::printInternal();
          (*((void (**)(const char **))v158 + 5))(&v158);
          uint64_t v57 = (*((uint64_t (**)(const char **))v158 + 4))(&v158);
          WGSL::Type::dump(v56, v57);
          (*((void (**)(const char **))v158 + 5))(&v158);
          v55 -= 8;
        }
        while (v55);
      }
    }
    WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v154);
    if (HIDWORD(v146))
    {
      (*((void (**)(const char **))v154 + 4))(&v154);
      WTF::printInternal();
      (*((void (**)(const char **))v154 + 5))(&v154);
      double v58 = HIDWORD(v146);
      if (HIDWORD(v146))
      {
        uint64_t v59 = v145;
        int v60 = *(unsigned __int8 **)v145;
        uint64_t v61 = (*((uint64_t (**)(const char **))v154 + 4))(&v154);
        WGSL::Type::dump(v60, v61);
        (*((void (**)(const char **))v154 + 5))(&v154);
        if (v58 != 1)
        {
          uint64_t v62 = (unsigned __int8 **)((char *)v59 + 8);
          unint64_t v63 = 8 * v58 - 8;
          do
          {
            unint64_t v64 = *v62++;
            (*((void (**)(const char **))v154 + 4))(&v154);
            WTF::printInternal();
            (*((void (**)(const char **))v154 + 5))(&v154);
            int v65 = (*((uint64_t (**)(const char **))v154 + 4))(&v154);
            WGSL::Type::dump(v64, v65);
            (*((void (**)(const char **))v154 + 5))(&v154);
            v63 -= 8;
          }
          while (v63);
        }
      }
      (*((void (**)(const char **))v154 + 4))(&v154);
      WTF::printInternal();
      (*((void (**)(const char **))v154 + 5))(&v154);
    }
    WTF::StringPrintStream::toString(v152, (WTF::StringPrintStream *)&v154);
    LOBYTE(v144) = 40;
    WTF::StringPrintStream::toString((uint64_t *)&v142, (WTF::StringPrintStream *)&v158);
    int v151 = 41;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral&,char,WTF::String const&,WTF::String,char,WTF::String,char>(a1, v9, (int8x16_t *)"no matching overload for ", 26, (int8x16_t *)"operator", 9, 32, (uint64_t)v12, v152, (char *)&v144, (uint64_t *)&v142, &v151);
    size_t v66 = v142;
    unint64_t v142 = 0;
    if (v66)
    {
      if (*v66 == 2)
      {
        WTF::StringImpl::destroy();
        uint64_t v67 = (_DWORD *)v152[0];
        v152[0] = 0;
        if (!v67)
        {
LABEL_83:
          WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v154);
          WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v158);
          goto LABEL_101;
        }
LABEL_80:
        if (*v67 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v67 -= 2;
        }
        goto LABEL_83;
      }
      *v66 -= 2;
    }
    uint64_t v67 = (_DWORD *)v152[0];
    v152[0] = 0;
    if (!v67) {
      goto LABEL_83;
    }
    goto LABEL_80;
  }
  if (*(unsigned char *)(a1 + 105) && *(unsigned char *)(v20 + 9))
  {
    LOBYTE(v158) = 39;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::String const&,char>(a1, v9, (int8x16_t *)"ignoring return value of builtin '", 35, (uint64_t)v12, (char *)&v158);
  }
  uint64_t v31 = HIDWORD(v139);
  uint64_t v32 = (uint64_t)a3;
  if (HIDWORD(v139))
  {
    uint64_t v33 = (uint64_t *)((char *)v134 + 8);
    uint64_t v34 = *(unsigned int *)v134;
    uint64_t v35 = v138;
    do
    {
      if (!v34)
      {
        __break(0xC471u);
LABEL_209:
        __break(1u);
        goto LABEL_210;
      }
      uint64_t v37 = *v33++;
      uint64_t v36 = v37;
      uint64_t v38 = *(void *)v35;
      uint64_t v35 = (WTF *)((char *)v35 + 8);
      *(void *)(v38 + 24) = v36;
      --v34;
      --v31;
    }
    while (v31);
  }
  int v128 = v135;
  *(void *)(a1 + 88) = v135;
  if (a3 && (*(unsigned int (**)(const WTF::StringImpl *))(*(void *)a3 + 16))(a3) == 20)
  {
    *((unsigned char *)a3 + 88) = *(unsigned char *)(v20 + 8) == 1;
    *((unsigned char *)a3 + 89) = *(unsigned char *)(v20 + 24);
  }
  uint64_t v39 = HIDWORD(v139);
  if (!HIDWORD(v139))
  {
    uint64_t v154 = 0;
    int v48 = *(void (**)(const char **__return_ptr, const WTF::StringImpl *, const char **))(v20 + 16);
    if (v48) {
      goto LABEL_70;
    }
    unsigned int v40 = 0;
    uint64_t v73 = *(unsigned __int8 *)(a1 + 104);
    uint64_t v71 = v73 == 2;
    if (v73 <= 2) {
      goto LABEL_75;
    }
    goto LABEL_88;
  }
  long long v127 = v9;
  unsigned int v40 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * HIDWORD(v139) + 8));
  *unsigned int v40 = v39;
  bzero(v40 + 2, 24 * ((24 * v39 - 24) / 0x18uLL) + 24);
  unint64_t v42 = 0;
  uint64_t v154 = (const char *)v40;
  int v43 = v40 + 6;
  char v44 = 1;
  do
  {
    if (v42 >= HIDWORD(v139)) {
      goto LABEL_225;
    }
    uint64_t v45 = *((void *)v138 + v42);
    if (!*(unsigned char *)(v45 + 56)
      || !WGSL::TypeChecker::convertValue(a1, (long long *)(v45 + 8), *(const WTF::StringImpl **)(v45 + 24), v45 + 32, v41))
    {
      char v44 = 0;
      goto LABEL_39;
    }
    if (!*(unsigned char *)(v45 + 56)) {
      goto LABEL_209;
    }
    if (v42 >= *v40)
    {
      __break(0xC471u);
      goto LABEL_228;
    }
    a2 = (long long *)(v43 - 4);
    uint64_t v46 = *v43;
    uint64_t v47 = *(unsigned int *)(v45 + 48);
    if (v46 == -1)
    {
      if (v47 == -1) {
        goto LABEL_39;
      }
    }
    else if (v47 == -1)
    {
      ((void (*)(const char **, long long *))off_1ECABEC60[v46])(&v158, a2);
      *int v43 = -1;
      goto LABEL_39;
    }
    uint64_t v158 = (const char *)(v43 - 4);
    ((void (*)(const char **))off_1ECABEEE0[v47])(&v158);
LABEL_39:
    ++v42;
    v43 += 6;
  }
  while (v39 != v42);
  int v48 = *(void (**)(const char **__return_ptr, const WTF::StringImpl *, const char **))(v20 + 16);
  if (!v48)
  {
    uint64_t v9 = v127;
    int v70 = *(unsigned __int8 *)(a1 + 104);
    uint64_t v71 = v70 == 2;
    if (v70 <= 2)
    {
LABEL_75:
      if (v71) {
        uint64_t v72 = "override";
      }
      else {
        uint64_t v72 = "constant";
      }
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(a1, 0, v9, "cannot call function from ", 27, (uint64_t)v72, 9, (uint64_t)" context", 9);
      unsigned int v8 = v16;
      goto LABEL_92;
    }
LABEL_88:
    unsigned int v8 = v16;
    goto LABEL_92;
  }
  uint64_t v9 = v127;
  uint64_t v32 = (uint64_t)a3;
  if ((v44 & 1) == 0)
  {
    uint64_t v154 = 0;
    unsigned int v8 = v16;
    goto LABEL_93;
  }
LABEL_70:
  v48(&v158, v128, &v154);
  if (v161)
  {
    if (v161 == 1)
    {
      WGSL::TypeChecker::typeError<WTF::String &>(a1, v9, v159);
      unsigned int v8 = v16;
      int v69 = v161;
      if (v161 == -1) {
        goto LABEL_91;
      }
      goto LABEL_90;
    }
LABEL_224:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_225:
    __break(0xC471u);
    JUMPOUT(0x1826A3F3CLL);
  }
  if (!v32)
  {
    int v69 = 0;
    unsigned int v8 = v16;
    goto LABEL_90;
  }
  WGSL::TypeChecker::setConstantValue<WGSL::AST::CallExpression>(a1, v32, v128, (uint64_t)&v159, v68);
  unsigned int v8 = v16;
  int v69 = v161;
  if (v161 != -1) {
LABEL_90:
  }
    ((void (*)(uint64_t *, long long *))off_1ECABED68[v69])(v152, &v159);
LABEL_91:
  unsigned int v40 = (unsigned int *)v154;
LABEL_92:
  uint64_t v154 = 0;
  if (v40)
  {
LABEL_93:
    uint64_t v74 = *v40;
    if (v74)
    {
      int v75 = 24 * v74;
      unsigned int v76 = v40 + 6;
      do
      {
        a2 = (long long *)(v76 - 4);
        BOOL v77 = *v76;
        if (v77 != -1) {
          ((void (*)(const char **, long long *))off_1ECABEC60[v77])(&v158, a2);
        }
        *unsigned int v76 = -1;
        v76 += 6;
        v75 -= 24;
      }
      while (v75);
    }
    WTF::fastFree((WTF *)v40, a2);
    if ((_BYTE)v136) {
      goto LABEL_99;
    }
  }
  else
  {
LABEL_99:
    if (v134) {
      WTF::fastFree(v134, a2);
    }
  }
LABEL_101:
  int v78 = v148;
  if (v148)
  {
    uint64_t v148 = 0;
    LODWORD(v149) = 0;
    WTF::fastFree(v78, a2);
  }
LABEL_103:
  uint64_t v79 = v145;
  a6 = v130;
  if (v145)
  {
    __int16 v145 = 0;
    LODWORD(v146) = 0;
    WTF::fastFree(v79, a2);
  }
LABEL_105:
  uint64_t result = v138;
  if (&v140 != (uint64_t *)v138 && v138)
  {
    int v138 = 0;
    LODWORD(v139) = 0;
    uint64_t result = (WTF *)WTF::fastFree(result, a2);
  }
  if (v12)
  {
    if (*(_DWORD *)v12 != 2)
    {
      *(_DWORD *)v12 -= 2;
      goto LABEL_111;
    }
    uint64_t result = (WTF *)WTF::StringImpl::destroy();
    if (v8 != 3)
    {
LABEL_115:
      if (v8 == 4)
      {
        uint64_t v81 = 6;
        unsigned int v82 = "modulo";
        uint64_t v83 = *(unsigned __int8 **)(a6 + 24);
        if (v83) {
          goto LABEL_117;
        }
      }
      return result;
    }
  }
  else
  {
LABEL_111:
    if (v8 != 3) {
      goto LABEL_115;
    }
  }
  uint64_t v81 = 8;
  unsigned int v82 = "division";
  uint64_t v83 = *(unsigned __int8 **)(a6 + 24);
  if (!v83) {
    return result;
  }
LABEL_117:
  if (*((_DWORD *)v83 + 12) != 1 || (uint64_t v83 = *(unsigned __int8 **)v83) != 0)
  {
    while (1)
    {
      uint64_t v84 = *((_DWORD *)v83 + 12);
      if (v84 != 10) {
        break;
      }
      uint64_t v83 = (unsigned __int8 *)*((void *)v83 + 1);
      if (!v83) {
        return result;
      }
    }
    if (!v84 && *v83 <= 2u)
    {
      unint64_t v85 = *(void *)(a1 + 80);
      if (v8 != 3)
      {
        *(unsigned char *)(v85 + 15) = 1;
        LOBYTE(v138) = 0;
        LOBYTE(v141) = 0;
        unint64_t v86 = v129;
        if (!*(unsigned char *)(v129 + 56)) {
          goto LABEL_132;
        }
LABEL_126:
        LODWORD(v140) = -1;
        unint64_t v87 = *(unsigned int *)(v86 + 48);
        if (v87 != -1)
        {
          uint64_t result = (WTF *)((uint64_t (*)(const char **, WTF **, uint64_t))off_1ECABEE88[v87])(&v158, &v138, v86 + 32);
          LODWORD(v140) = v87;
        }
        LOBYTE(v141) = 1;
        LOBYTE(v134) = 0;
        int v137 = 0;
        if (*(unsigned char *)(a6 + 56))
        {
          uint64_t v136 = -1;
          unint64_t v88 = *(_DWORD *)(a6 + 48);
          if (v88 != -1)
          {
LABEL_134:
            ((void (*)(const char **, WTF **, uint64_t))off_1ECABEE88[v88])(&v158, &v134, a6 + 32);
            uint64_t v136 = v88;
            int v137 = 1;
            if (!(_BYTE)v141)
            {
              v132[0] = 0;
              int v133 = -1;
              ((void (*)(const char **, unsigned char *, WTF **))off_1ECABEE88[v88])(&v158, v132, &v134);
              int v133 = v88;
              goto LABEL_137;
            }
            goto LABEL_217;
          }
        }
LABEL_218:
        if ((_BYTE)v141)
        {
          if (v140 != -1) {
            return (WTF *)((uint64_t (*)(const char **, WTF **))off_1ECABEC60[v140])(&v158, &v138);
          }
        }
        return result;
      }
      *(unsigned char *)(v85 + 14) = 1;
      LOBYTE(v138) = 0;
      LOBYTE(v141) = 0;
      unint64_t v86 = v129;
      if (*(unsigned char *)(v129 + 56)) {
        goto LABEL_126;
      }
LABEL_132:
      LOBYTE(v134) = 0;
      int v137 = 0;
      if (!*(unsigned char *)(a6 + 56)) {
        return result;
      }
      uint64_t v136 = -1;
      unint64_t v88 = *(_DWORD *)(a6 + 48);
      if (v88 != -1) {
        goto LABEL_134;
      }
      int v137 = 1;
      v132[0] = 0;
      int v133 = -1;
LABEL_137:
      WGSL::zeroValue((WGSL *)&v148, *(const WGSL::Type **)(a6 + 24));
      LOBYTE(v158) = 0;
      DWORD2(v159) = -1;
      unsigned int v89 = v133;
      if (v133 != -1)
      {
        ((void (*)(const char **, const char **, unsigned char *))off_1ECABEE88[v133])(&v154, &v158, v132);
        DWORD2(v159) = v89;
      }
      LOBYTE(v160) = 0;
      unint64_t v162 = -1;
      uint64_t v90 = v150;
      if (v150 != -1)
      {
        ((void (*)(const char **, int *, WTF **))off_1ECABEE88[v150])(&v154, &v160, &v148);
        unint64_t v162 = v90;
      }
      uint64_t v91 = WTF::fastMalloc((WTF *)0x38);
      int v92 = (unsigned int *)v91;
      *(_OWORD *)(v91 + 8) = 0u;
      *(_DWORD *)uint64_t v91 = 2;
      *(_OWORD *)(v91 + 24) = 0u;
      *(_OWORD *)(v91 + 40) = 0u;
      __int16 v145 = (WTF *)v91;
      if (DWORD2(v159) == -1)
      {
        uint64_t v96 = v9;
        *(_DWORD *)(v91 + 24) = -1;
        uint64_t v94 = (unsigned int *)(v91 + 32);
        uint64_t v95 = v162;
        if (v162 == -1)
        {
          uint64_t v93 = 0;
          goto LABEL_148;
        }
        goto LABEL_150;
      }
      uint64_t v154 = (const char *)(v91 + 8);
      ((void (*)(const char **))off_1ECABEEE0[DWORD2(v159)])(&v154);
      if (*v92 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1826A3F2CLL);
      }
      uint64_t v93 = v92[12];
      uint64_t v94 = v92 + 8;
      uint64_t v95 = v162;
      uint64_t v96 = v9;
      if (v93 == -1)
      {
        if (v162 != -1) {
          goto LABEL_150;
        }
      }
      else
      {
        if (v162 == -1)
        {
LABEL_148:
          ((void (*)(const char **, unsigned int *))off_1ECABEC60[v93])(&v154, v94);
          v92[12] = -1;
          goto LABEL_151;
        }
LABEL_150:
        uint64_t v154 = (const char *)v94;
        ((void (*)(const char **))off_1ECABEEE0[v95])(&v154);
      }
LABEL_151:
      WGSL::constantEqual((int **)&v145, (uint64_t)&v154);
      int v98 = *v92;
      if (v98)
      {
        uint64_t v99 = 24 * v98;
        size_t v100 = v92 + 6;
        do
        {
          uint64_t v97 = v100 - 4;
          unsigned int v101 = *v100;
          if (v101 != -1) {
            ((void (*)(uint64_t *, _DWORD *))off_1ECABEC60[v101])(v152, v97);
          }
          *size_t v100 = -1;
          v100 += 6;
          v99 -= 24;
        }
        while (v99);
      }
      WTF::fastFree((WTF *)v92, v97);
      if (v162 != -1) {
        ((void (*)(uint64_t *, int *))off_1ECABEC60[v162])(v152, &v160);
      }
      unint64_t v162 = -1;
      uint64_t v102 = v96;
      if (DWORD2(v159) != -1) {
        ((void (*)(uint64_t *, const char **))off_1ECABEC60[DWORD2(v159)])(v152, &v158);
      }
      if (v157)
      {
        if (v157 != 1) {
          goto LABEL_224;
        }
        unint64_t v103 = v155[0];
        if (v155[0]) {
          *(_DWORD *)v155[0] += 2;
        }
        unint64_t v142 = (_DWORD *)v103;
        uint64_t v104 = 1;
        int v143 = 1;
        unsigned long long v105 = v103;
        uint64_t v106 = 1;
LABEL_190:
        ((void (*)(const char **, void *))off_1ECABED68[v106])(&v158, v155);
LABEL_191:
        if (v150 != -1) {
          ((void (*)(const char **, WTF **))off_1ECABEC60[v150])(&v158, &v148);
        }
        if (v105) {
          uint64_t v118 = v104 == 0;
        }
        else {
          uint64_t v118 = 0;
        }
        unint64_t v119 = v118;
        uint64_t result = (WTF *)((uint64_t (*)(const char **, _DWORD **))off_1ECABEE78[v104])(&v158, &v142);
        if (v133 != -1) {
          uint64_t result = (WTF *)((uint64_t (*)(const char **, unsigned char *))off_1ECABEC60[v133])(&v158, v132);
        }
        int v133 = -1;
        if (v119)
        {
          uint64_t v158 = "invalid ";
          LODWORD(v159) = 8;
          uint64_t v154 = v82;
          LODWORD(v155[0]) = v81;
          uint64_t v148 = (WTF *)" by zero";
          LODWORD(v149) = 8;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v158, (uint64_t)&v154, (uint64_t)&v148, &v145);
          BOOL v120 = v145;
          if (!v145)
          {
            __break(0xC471u);
LABEL_228:
            JUMPOUT(0x1826A3F0CLL);
          }
          __int16 v145 = 0;
          uint64_t v158 = (const char *)v120;
          uint64_t v159 = *v102;
          unint64_t v121 = *(unsigned int *)(a1 + 132);
          if (v121 != *(_DWORD *)(a1 + 128))
          {
            unint64_t v126 = *(void *)(a1 + 120) + 24 * v121;
            *(void *)unint64_t v126 = v120;
            *(_OWORD *)(v126 + 8) = v159;
            ++*(_DWORD *)(a1 + 132);
            uint64_t v158 = 0;
            goto LABEL_211;
          }
          v122 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v121 + 1, (unint64_t)&v158);
          uint64_t v123 = *(void *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
          char v124 = *(void *)v122;
          *(void *)v122 = 0;
          *(void *)uint64_t v123 = v124;
          *(_OWORD *)(v123 + 8) = *(_OWORD *)(v122 + 8);
          uint64_t v125 = v158;
          ++*(_DWORD *)(a1 + 132);
          uint64_t v158 = 0;
          if (v125)
          {
            if (*(_DWORD *)v125 != 2)
            {
              *(_DWORD *)v125 -= 2;
              goto LABEL_211;
            }
LABEL_210:
            WTF::StringImpl::destroy();
          }
LABEL_211:
          uint64_t result = v145;
          __int16 v145 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              uint64_t result = (WTF *)WTF::StringImpl::destroy();
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
        }
        if (v137)
        {
          unint64_t v88 = v136;
          if (v136 != -1) {
LABEL_217:
          }
            uint64_t result = (WTF *)((uint64_t (*)(const char **, WTF **))off_1ECABEC60[v88])(&v158, &v134);
        }
        goto LABEL_218;
      }
      LOBYTE(v145) = 0;
      v147 = -1;
      uint64_t v107 = v156;
      if (v156 == -1)
      {
        LOBYTE(v152[0]) = 0;
        unint64_t v153 = -1;
      }
      else
      {
        ((void (*)(const char **, WTF **, void *))off_1ECABECB8[v156])(&v158, &v145, v155);
        v147 = v107;
        LOBYTE(v152[0]) = 0;
        unint64_t v153 = -1;
        ((void (*)(_DWORD **, uint64_t *, WTF **))off_1ECABEE88[v107])(&v142, v152, &v145);
        unint64_t v153 = v107;
      }
      int v108 = WTF::fastMalloc((WTF *)0x20);
      v109 = (WTF *)v108;
      *(void *)(v108 + 8) = 0;
      *(_DWORD *)int v108 = 1;
      *(void *)(v108 + 16) = 0;
      *(void *)(v108 + 24) = 0;
      unsigned int v144 = v108;
      if (v153 == -1)
      {
        *(_DWORD *)(v108 + 24) = -1;
      }
      else
      {
        unint64_t v142 = (_DWORD *)(v108 + 8);
        ((void (*)(_DWORD **))off_1ECABEEE0[v153])(&v142);
      }
      WGSL::constantAny(&v144, (uint64_t)&v158);
      uint64_t v111 = *(unsigned int *)v109;
      if (v111)
      {
        int v112 = 24 * v111;
        uint64_t v113 = (_DWORD *)((char *)v109 + 24);
        do
        {
          uint64_t v110 = v113 - 4;
          uint64_t v114 = *v113;
          if (v114 != -1) {
            ((void (*)(_DWORD **, _DWORD *))off_1ECABEC60[v114])(&v142, v110);
          }
          *uint64_t v113 = -1;
          v113 += 6;
          v112 -= 24;
        }
        while (v112);
      }
      WTF::fastFree(v109, v110);
      if (v153 != -1) {
        ((void (*)(_DWORD **, uint64_t *))off_1ECABEC60[v153])(&v142, v152);
      }
      uint64_t v104 = v161;
      uint64_t v102 = v96;
      if (v161)
      {
        if (v161 != 1) {
          goto LABEL_224;
        }
        int v115 = v159;
        if ((void)v159) {
          *(_DWORD *)v159 += 2;
        }
        unint64_t v142 = (_DWORD *)v115;
        uint64_t v116 = 1;
        int v143 = 1;
        unsigned long long v105 = v115;
LABEL_186:
        ((void (*)(uint64_t *, long long *))off_1ECABED68[v116])(v152, &v159);
      }
      else
      {
        LOBYTE(v152[0]) = 0;
        unint64_t v153 = -1;
        uint64_t v117 = v160;
        if (v160 == -1) {
          goto LABEL_224;
        }
        ((void (*)(_DWORD **, uint64_t *, long long *))off_1ECABECB8[v160])(&v142, v152, &v159);
        unint64_t v153 = v117;
        if (v117 != 6) {
          goto LABEL_224;
        }
        unsigned long long v105 = LOBYTE(v152[0]);
        LOBYTE(v142) = v152[0];
        int v143 = 0;
        uint64_t v116 = v161;
        if (v161 != -1) {
          goto LABEL_186;
        }
      }
      if (v147 != -1) {
        ((void (*)(const char **, WTF **))off_1ECABEC60[v147])(&v158, &v145);
      }
      uint64_t v106 = v157;
      if (v157 != -1) {
        goto LABEL_190;
      }
      goto LABEL_191;
    }
  }
  return result;
}

void WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::DecrementIncrementStatement *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  __int16 v5 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 3;
  WGSL::AST::Visitor::visit(this, v4);
  uint64_t v7 = *((void *)this + 11);
  *(void *)(v4 + 24) = v7;
  *((void *)this + 11) = 0;
  *((_WORD *)this + 52) = v5;
  uint64_t v8 = *((void *)this + 14);
  uint64_t v9 = *(const WGSL::Type **)(v8 + 24);
  if (v9 == (const WGSL::Type *)v7) {
    return;
  }
  if (!v7 || *(_DWORD *)(v7 + 48) != 10)
  {
    int v14 = (long long *)((char *)a2 + 8);
    char v29 = 39;
    unsigned int v15 = "cannot modify a value of type '";
    unsigned int v16 = &v29;
    unsigned int v17 = this;
    uint64_t v18 = 32;
LABEL_15:
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)v17, 0, v14, v15, v18, v7, v16);
    return;
  }
  if (!*(unsigned char *)(v7 + 1))
  {
    int v14 = (long long *)((char *)a2 + 8);
    char v28 = 39;
    unsigned int v15 = "cannot modify read-only type '";
    unsigned int v16 = &v28;
    unsigned int v17 = this;
    uint64_t v18 = 31;
    goto LABEL_15;
  }
  __n128 v10 = *(const WGSL::Type **)(v8 + 64);
  int v11 = *(WGSL **)(v7 + 8);
  if (v10 != v11 && v9 != v10 && v9 != v11)
  {
    int v19 = WGSL::conversionRank(v11, v10, v6);
    if (v19 == -1)
    {
      uint64_t v21 = *((void *)this + 14);
      uint64_t v22 = *(const WGSL::Type **)(v21 + 72);
      uint64_t v23 = *(WGSL **)(v7 + 8);
      if (v22 != v23)
      {
        unint64_t v24 = *(const WGSL::Type **)(v21 + 24);
        if (v24 != v22 && v24 != v23 && WGSL::conversionRank(v23, v22, v20) == -1)
        {
          if (*((unsigned char *)a2 + 32) == 1)
          {
            uint64_t v25 = (int8x16_t *)"increment";
          }
          else
          {
            if (*((unsigned char *)a2 + 32))
            {
              uint64_t v26 = 0;
              uint64_t v25 = 0;
              goto LABEL_28;
            }
            uint64_t v25 = (int8x16_t *)"decrement";
          }
          uint64_t v26 = 10;
LABEL_28:
          uint64_t v27 = *(void *)(v7 + 8);
          WGSL::TypeChecker::typeError<WTF::ASCIILiteral &,WTF::ASCIILiteral,WGSL::Type const&>((uint64_t)this, (WGSL::AST::DecrementIncrementStatement *)((char *)a2 + 8), v25, v26, (int8x16_t *)" can only be applied to integers, found ", 41, v27);
        }
      }
    }
  }
}

void WGSL::TypeChecker::typeError<WTF::ASCIILiteral &,WTF::ASCIILiteral,WGSL::Type const&>(uint64_t a1, _OWORD *a2, int8x16_t *a3, uint64_t a4, int8x16_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v160 = *MEMORY[0x1E4F143B8];
  v156[0] = 0;
  unsigned int v157 = -1;
  uint64_t v13 = *(unsigned int *)(a7 + 48);
  if (v13 != -1)
  {
    ((void (*)(_DWORD **, unsigned __int8 *, uint64_t))off_1ECABEE00[v13])(&v158, v156, a7);
    unsigned int v157 = v13;
  }
  if (a4) {
    size_t v14 = a4 - 1;
  }
  else {
    size_t v14 = 0;
  }
  if (v14 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826A4C00);
  }
  if (a6) {
    size_t v15 = a6 - 1;
  }
  else {
    size_t v15 = 0;
  }
  if (v15 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826A4C20);
  }
  WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v158);
  WGSL::Type::dump(v156, (uint64_t)&v158);
  WTF::StringPrintStream::toString((uint64_t *)&v155, (WTF::StringPrintStream *)&v158);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v158);
  unsigned int v16 = v155;
  if (v155)
  {
    int v17 = v155[1];
    if (((v17 | v15) & 0x80000000) != 0) {
      goto LABEL_17;
    }
  }
  else
  {
    int v17 = 0;
    if ((v15 & 0x80000000) != 0)
    {
LABEL_17:
      uint64_t v20 = 0;
      goto LABEL_133;
    }
  }
  BOOL v18 = __OFADD__(v15, v17);
  int v19 = v15 + v17;
  if (v18) {
    goto LABEL_17;
  }
  uint64_t v21 = a4;
  uint64_t v22 = a2;
  uint64_t v23 = (v14 + v19);
  if (__OFADD__(v14, v19))
  {
    uint64_t v20 = 0;
    a2 = v22;
    goto LABEL_133;
  }
  if (v155)
  {
    int v24 = v155[4];
    *v155 += 2;
    if ((v24 & 4) == 0)
    {
      if (!v23)
      {
        uint64_t v20 = (_DWORD *)MEMORY[0x1E4F30960];
        *MEMORY[0x1E4F30960] += 2;
        a2 = v22;
        int v25 = *v16 - 2;
        if (*v16 == 2) {
          goto LABEL_131;
        }
        goto LABEL_39;
      }
      if (v23 > 0x7FFFFFEF)
      {
        uint64_t v20 = 0;
        a2 = v22;
        int v25 = *v16 - 2;
        if (*v16 == 2) {
          goto LABEL_131;
        }
        goto LABEL_39;
      }
      WTF::tryFastCompactMalloc((WTF *)(2 * v23 + 20));
      uint64_t v20 = v158;
      if (!v158)
      {
        a2 = v22;
        int v25 = *v16 - 2;
        if (*v16 == 2) {
          goto LABEL_131;
        }
        goto LABEL_39;
      }
      unint64_t v28 = (unint64_t)(v158 + 5);
      _DWORD *v158 = 2;
      v20[1] = v23;
      *((void *)v20 + 1) = v20 + 5;
      v20[4] = 0;
      *v16 += 2;
      unint64_t v29 = (unint64_t)v20 + 2 * v14 + 20;
      if ((v14 & 0xFFFFFFC0) != 0)
      {
        unint64_t v30 = v28 + 2 * (v14 & 0xFFFFFFC0);
        long long v31 = 0uLL;
        do
        {
          v161.val[0] = *a3;
          int8x16_t v32 = a3[1];
          v164.val[0] = a3[2];
          int8x16_t v33 = a3[3];
          a3 += 4;
          int8x16_t v34 = v33;
          v164.val[1] = 0uLL;
          v167.val[0] = v32;
          v161.val[1] = 0uLL;
          uint64_t v35 = (char *)v28;
          vst2q_s8(v35, v161);
          v35 += 32;
          v167.val[1] = 0uLL;
          vst2q_s8(v35, v167);
          uint64_t v36 = (char *)(v28 + 64);
          vst2q_s8(v36, v164);
          uint64_t v37 = (char *)(v28 + 96);
          vst2q_s8(v37, *(int8x16x2_t *)(&v31 - 1));
          v28 += 128;
        }
        while (v28 != v30);
        unint64_t v28 = v30;
      }
      a2 = v22;
      if (v28 != v29)
      {
        unint64_t v38 = (unint64_t)v20 + 2 * v21 - v28;
        uint64_t v39 = -2;
        if (v21) {
          uint64_t v40 = -2;
        }
        else {
          uint64_t v40 = 0;
        }
        unint64_t v41 = v38 + v40 + 18;
        if (v41 < 0xE) {
          goto LABEL_56;
        }
        if (!v21) {
          uint64_t v39 = 0;
        }
        unint64_t v42 = v38 + v39 + 18;
        if (v28 < (unint64_t)a3->u64 + (v42 >> 1) + 1
          && (unint64_t)a3 < (v42 & 0xFFFFFFFFFFFFFFFELL) + v28 + 2)
        {
LABEL_56:
          int v43 = (_WORD *)v28;
          char v44 = a3;
          goto LABEL_57;
        }
        uint64_t v107 = (v41 >> 1) + 1;
        if (v41 >= 0x3E)
        {
          unint64_t v108 = v107 & 0xFFFFFFFFFFFFFFE0;
          char v124 = (uint8x8_t *)&a3[1];
          uint64_t v125 = (uint16x8_t *)(v28 + 32);
          unint64_t v126 = v107 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            uint8x16_t v127 = *(uint8x16_t *)v124[-2].i8;
            uint16x8_t v128 = vmovl_u8(*v124);
            uint16x8_t v129 = vmovl_high_u8(*(uint8x16_t *)v124->i8);
            v125[-2] = vmovl_u8(*(uint8x8_t *)v127.i8);
            v125[-1] = vmovl_high_u8(v127);
            *uint64_t v125 = v128;
            v125[1] = v129;
            v125 += 4;
            v124 += 4;
            v126 -= 32;
          }
          while (v126);
          if (v107 == v108) {
            goto LABEL_58;
          }
          if ((v107 & 0x18) == 0)
          {
            char v44 = (int8x16_t *)((char *)a3 + v108);
            int v43 = (_WORD *)(v28 + 2 * v108);
            do
            {
LABEL_57:
              __int16 v45 = v44->u8[0];
              char v44 = (int8x16_t *)((char *)v44 + 1);
              *v43++ = v45;
            }
            while (v43 != (_WORD *)v29);
            goto LABEL_58;
          }
        }
        else
        {
          unint64_t v108 = 0;
        }
        int v43 = (_WORD *)(v28 + 2 * (v107 & 0xFFFFFFFFFFFFFFF8));
        char v44 = (int8x16_t *)((char *)a3 + (v107 & 0xFFFFFFFFFFFFFFF8));
        int8x16_t v130 = (uint8x8_t *)&a3->i8[v108];
        int8x16_t v131 = (uint16x8_t *)(v28 + 2 * v108);
        unint64_t v132 = v108 - (v107 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint8x8_t v133 = *v130++;
          *v131++ = vmovl_u8(v133);
          v132 += 8;
        }
        while (v132);
        if (v107 != (v107 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_57;
        }
      }
LABEL_58:
      *v16 += 2;
      uint64_t v46 = (uint16x8_t *)(v29 + 2 * v15);
      if ((v15 & 0xFFFFFFC0) != 0)
      {
        unint64_t v47 = v29 + 2 * (v15 & 0xFFFFFFC0);
        long long v48 = 0uLL;
        do
        {
          v162.val[0] = *a5;
          int8x16_t v49 = a5[1];
          v165.val[0] = a5[2];
          int8x16_t v50 = a5[3];
          a5 += 4;
          int8x16_t v51 = v50;
          v165.val[1] = 0uLL;
          v168.val[0] = v49;
          v162.val[1] = 0uLL;
          uint64_t v52 = (char *)v29;
          vst2q_s8(v52, v162);
          v52 += 32;
          v168.val[1] = 0uLL;
          vst2q_s8(v52, v168);
          uint64_t v53 = (char *)(v29 + 64);
          vst2q_s8(v53, v165);
          unsigned int v54 = (char *)(v29 + 96);
          vst2q_s8(v54, *(int8x16x2_t *)(&v48 - 1));
          v29 += 128;
        }
        while (v29 != v47);
        unint64_t v29 = v47;
      }
      if ((uint16x8_t *)v29 != v46)
      {
        unint64_t v55 = (unint64_t)v20 + 2 * v15 + 2 * v21 - v29;
        uint64_t v56 = -2;
        if (v21) {
          uint64_t v57 = -2;
        }
        else {
          uint64_t v57 = 0;
        }
        unint64_t v58 = v55 + v57 + 18;
        if (v58 < 0xE) {
          goto LABEL_71;
        }
        if (!v21) {
          uint64_t v56 = 0;
        }
        unint64_t v59 = v55 + v56 + 18;
        if (v29 < (unint64_t)a5->u64 + (v59 >> 1) + 1
          && (unint64_t)a5 < (v59 & 0xFFFFFFFFFFFFFFFELL) + v29 + 2)
        {
LABEL_71:
          int v60 = (uint16x8_t *)v29;
          uint64_t v61 = a5;
          goto LABEL_72;
        }
        uint64_t v109 = (v58 >> 1) + 1;
        if (v58 >= 0x3E)
        {
          unint64_t v110 = v109 & 0xFFFFFFFFFFFFFFE0;
          unsigned int v134 = (uint8x8_t *)&a5[1];
          uint64_t v135 = (uint16x8_t *)(v29 + 32);
          unint64_t v136 = v109 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            uint8x16_t v137 = *(uint8x16_t *)v134[-2].i8;
            uint16x8_t v138 = vmovl_u8(*v134);
            uint16x8_t v139 = vmovl_high_u8(*(uint8x16_t *)v134->i8);
            v135[-2] = vmovl_u8(*(uint8x8_t *)v137.i8);
            v135[-1] = vmovl_high_u8(v137);
            uint16x8_t *v135 = v138;
            v135[1] = v139;
            v135 += 4;
            v134 += 4;
            v136 -= 32;
          }
          while (v136);
          if (v109 == v110) {
            goto LABEL_73;
          }
          if ((v109 & 0x18) == 0)
          {
            uint64_t v61 = (int8x16_t *)((char *)a5 + v110);
            int v60 = (uint16x8_t *)(v29 + 2 * v110);
            do
            {
LABEL_72:
              __int16 v62 = v61->u8[0];
              uint64_t v61 = (int8x16_t *)((char *)v61 + 1);
              v60->i16[0] = v62;
              int v60 = (uint16x8_t *)((char *)v60 + 2);
            }
            while (v60 != v46);
            goto LABEL_73;
          }
        }
        else
        {
          unint64_t v110 = 0;
        }
        int v60 = (uint16x8_t *)(v29 + 2 * (v109 & 0xFFFFFFFFFFFFFFF8));
        uint64_t v61 = (int8x16_t *)((char *)a5 + (v109 & 0xFFFFFFFFFFFFFFF8));
        BOOL v140 = (uint8x8_t *)&a5->i8[v110];
        uint64_t v141 = (uint16x8_t *)(v29 + 2 * v110);
        unint64_t v142 = v110 - (v109 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint8x8_t v143 = *v140++;
          *v141++ = vmovl_u8(v143);
          v142 += 8;
        }
        while (v142);
        if (v109 != (v109 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_72;
        }
      }
LABEL_73:
      uint64_t v63 = v16[1];
      *v16 += 2;
      unint64_t v64 = (int8x16_t *)*((void *)v16 + 1);
      if ((v16[4] & 4) == 0)
      {
        if (v63)
        {
          if (v63 == 1) {
            v46->i16[0] = v64->i16[0];
          }
          else {
            memcpy(v46, v64, 2 * v63);
          }
        }
        goto LABEL_156;
      }
      uint64_t v79 = (uint16x8_t *)((char *)v46 + 2 * v63);
      if (v63 >= 0x40)
      {
        unsigned int v80 = (uint16x8_t *)((char *)v46 + 2 * (v63 & 0xFFFFFFC0));
        long long v81 = 0uLL;
        do
        {
          v163.val[0] = *v64;
          int8x16_t v82 = v64[1];
          v166.val[0] = v64[2];
          int8x16_t v83 = v64[3];
          v64 += 4;
          int8x16_t v84 = v83;
          v166.val[1] = 0uLL;
          v169.val[0] = v82;
          v163.val[1] = 0uLL;
          unint64_t v85 = (char *)v46;
          vst2q_s8(v85, v163);
          v85 += 32;
          v169.val[1] = 0uLL;
          vst2q_s8(v85, v169);
          i8 = v46[4].i8;
          vst2q_s8(i8, v166);
          unint64_t v87 = v46[6].i8;
          vst2q_s8(v87, *(int8x16x2_t *)(&v81 - 1));
          v46 += 8;
        }
        while (v46 != v80);
        uint64_t v46 = v80;
      }
      if (v46 == v79) {
        goto LABEL_156;
      }
      int64_t v88 = (char *)v20 + 2 * v63 + 2 * v21 + 2 * v15 - (char *)v46;
      uint64_t v89 = -2;
      if (v21) {
        uint64_t v90 = -2;
      }
      else {
        uint64_t v90 = 0;
      }
      unint64_t v91 = v88 + v90 + 18;
      if (v91 < 0xE) {
        goto LABEL_120;
      }
      if (!v21) {
        uint64_t v89 = 0;
      }
      unint64_t v92 = v88 + v89 + 18;
      if (v46 < (uint16x8_t *)&v64->i8[(v92 >> 1) + 1]
        && v64 < (int8x16_t *)((char *)&v46->i16[1] + (v92 & 0xFFFFFFFFFFFFFFFELL)))
      {
LABEL_120:
        uint64_t v93 = v46;
        uint64_t v94 = v64;
        goto LABEL_121;
      }
      uint64_t v122 = (v91 >> 1) + 1;
      if (v91 >= 0x3E)
      {
        unint64_t v123 = v122 & 0xFFFFFFFFFFFFFFE0;
        unsigned int v144 = (uint8x8_t *)&v64[1];
        __int16 v145 = v46 + 2;
        unint64_t v146 = v122 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          uint8x16_t v147 = *(uint8x16_t *)v144[-2].i8;
          uint16x8_t v148 = vmovl_u8(*v144);
          uint16x8_t v149 = vmovl_high_u8(*(uint8x16_t *)v144->i8);
          v145[-2] = vmovl_u8(*(uint8x8_t *)v147.i8);
          v145[-1] = vmovl_high_u8(v147);
          *__int16 v145 = v148;
          v145[1] = v149;
          v145 += 4;
          v144 += 4;
          v146 -= 32;
        }
        while (v146);
        if (v122 == v123) {
          goto LABEL_156;
        }
        if ((v122 & 0x18) == 0)
        {
          uint64_t v94 = (int8x16_t *)((char *)v64 + v123);
          uint64_t v93 = (uint16x8_t *)((char *)v46 + 2 * v123);
          do
          {
LABEL_121:
            __int16 v95 = v94->u8[0];
            uint64_t v94 = (int8x16_t *)((char *)v94 + 1);
            v93->i16[0] = v95;
            uint64_t v93 = (uint16x8_t *)((char *)v93 + 2);
          }
          while (v93 != v79);
LABEL_156:
          int v96 = *v16 - 2;
          if (*v16 == 2)
          {
            WTF::StringImpl::destroy();
            int v96 = *v16;
          }
          else
          {
            *unsigned int v16 = v96;
          }
          goto LABEL_128;
        }
      }
      else
      {
        unint64_t v123 = 0;
      }
      uint64_t v93 = (uint16x8_t *)((char *)v46 + 2 * (v122 & 0xFFFFFFFFFFFFFFF8));
      uint64_t v94 = (int8x16_t *)((char *)v64 + (v122 & 0xFFFFFFFFFFFFFFF8));
      __int16 v150 = (uint8x8_t *)&v64->i8[v123];
      int v151 = (uint16x8_t *)((char *)v46 + 2 * v123);
      unint64_t v152 = v123 - (v122 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint8x8_t v153 = *v150++;
        *v151++ = vmovl_u8(v153);
        v152 += 8;
      }
      while (v152);
      if (v122 == (v122 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_156;
      }
      goto LABEL_121;
    }
  }
  if (v23)
  {
    if ((v23 & 0x80000000) == 0)
    {
      WTF::tryFastCompactMalloc((WTF *)(v23 + 20));
      uint64_t v26 = v158;
      if (v158)
      {
        uint64_t v27 = v158 + 5;
        _DWORD *v158 = 2;
        v26[1] = v23;
        *((void *)v26 + 1) = v26 + 5;
        uint64_t v154 = v26;
        v26[4] = 4;
        if (v16) {
          *v16 += 2;
        }
        a2 = v22;
        if (v14)
        {
          if (v14 == 1)
          {
            *uint64_t v27 = a3->i8[0];
          }
          else
          {
            int v65 = v26 + 5;
            memcpy(v26 + 5, a3, v14);
            uint64_t v27 = v65;
          }
        }
        if (v16) {
          *v16 += 2;
        }
        size_t v66 = &v27[v14];
        if (v15)
        {
          if (v15 == 1) {
            *size_t v66 = a5->i8[0];
          }
          else {
            memcpy(&v27[v14], a5, v15);
          }
        }
        if (!v16)
        {
          uint64_t v20 = v154;
          goto LABEL_132;
        }
        uint64_t v67 = (int8x16_t *)&v66[v15];
        size_t v68 = v16[1];
        *v16 += 2;
        int v69 = (int8x16_t *)*((void *)v16 + 1);
        if ((v16[4] & 4) != 0)
        {
          if (v68)
          {
            if (v68 == 1) {
              v67->i8[0] = v69->i8[0];
            }
            else {
              memcpy(v67, v69, v68);
            }
          }
          goto LABEL_124;
        }
        int v70 = (int8x16_t *)((char *)v67 + v68);
        if (v68 >= 0x10)
        {
          uint64_t v71 = (int8x16_t *)((char *)v67 + (v68 & 0xFFFFFFF0));
          do
          {
            unsigned long long v72 = (unsigned __int128)vld2q_s8(v69->i8);
            v69 += 2;
            *v67++ = (int8x16_t)v72;
          }
          while (v67 != v71);
          uint64_t v67 = v71;
        }
        if (v67 != v70)
        {
          size_t v73 = (size_t)v154 + v68 + a6 + v21;
          unint64_t v74 = v73 - (void)v67 - (a6 != 0) - (v21 != 0) + 20;
          if (v74 < 8) {
            goto LABEL_99;
          }
          if (v21) {
            int v75 = (int8x16_t *)&v67->i8[1];
          }
          else {
            int v75 = v67;
          }
          if (a6) {
            int v75 = (int8x16_t *)((char *)v75 + 1);
          }
          if (v67 < (int8x16_t *)((char *)&v69[2].u64[1] + 2 * v73 + -2 * (void)v75)
            && v69 < (int8x16_t *)((char *)v67[1].i64 + v73 - (void)v75 + 4))
          {
LABEL_99:
            unsigned int v76 = v67;
            BOOL v77 = v69;
            goto LABEL_100;
          }
          if (v74 >= 0x20)
          {
            unint64_t v106 = v74 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v111 = v69 + 2;
            int v112 = v67 + 1;
            unint64_t v113 = v74 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              int8x16_t v115 = v111[-2];
              int8x16_t v114 = v111[-1];
              int8x16_t v117 = *v111;
              int8x16_t v116 = v111[1];
              v111 += 4;
              v112[-1] = vuzp1q_s8(v115, v114);
              *int v112 = vuzp1q_s8(v117, v116);
              v112 += 2;
              v113 -= 32;
            }
            while (v113);
            if (v74 == v106) {
              goto LABEL_124;
            }
            if ((v74 & 0x18) == 0)
            {
              BOOL v77 = (int8x16_t *)((char *)v69 + 2 * v106);
              unsigned int v76 = (int8x16_t *)((char *)v67 + v106);
              do
              {
LABEL_100:
                __int8 v78 = v77->i8[0];
                BOOL v77 = (int8x16_t *)((char *)v77 + 2);
                v76->i8[0] = v78;
                unsigned int v76 = (int8x16_t *)((char *)v76 + 1);
              }
              while (v76 != v70);
              goto LABEL_124;
            }
          }
          else
          {
            unint64_t v106 = 0;
          }
          unsigned int v76 = (int8x16_t *)((char *)v67 + (v74 & 0xFFFFFFFFFFFFFFF8));
          BOOL v77 = (int8x16_t *)((char *)v69 + 2 * (v74 & 0xFFFFFFFFFFFFFFF8));
          uint64_t v118 = (int16x8_t *)((char *)v69 + 2 * v106);
          unint64_t v119 = (int8x8_t *)&v67->i8[v106];
          unint64_t v120 = v106 - (v74 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            int16x8_t v121 = *v118++;
            *v119++ = vmovn_s16(v121);
            v120 += 8;
          }
          while (v120);
          if (v74 != (v74 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_100;
          }
        }
LABEL_124:
        int v96 = *v16 - 2;
        if (*v16 == 2)
        {
          WTF::StringImpl::destroy();
          int v96 = *v16;
        }
        else
        {
          *unsigned int v16 = v96;
        }
        uint64_t v20 = v154;
LABEL_128:
        int v97 = v96 - 2;
        if (v97)
        {
          *unsigned int v16 = v97;
          int v98 = v97 - 2;
          if (v98) {
            goto LABEL_130;
          }
        }
        else
        {
          WTF::StringImpl::destroy();
          int v98 = *v16 - 2;
          if (*v16 != 2)
          {
LABEL_130:
            *unsigned int v16 = v98;
            int v25 = v98 - 2;
            if (!v25) {
              goto LABEL_131;
            }
            goto LABEL_39;
          }
        }
        WTF::StringImpl::destroy();
        int v25 = *v16 - 2;
        if (*v16 == 2) {
          goto LABEL_131;
        }
        goto LABEL_39;
      }
    }
    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v20 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
  }
  a2 = v22;
  if (v16)
  {
    int v25 = *v16 - 2;
    if (*v16 == 2)
    {
LABEL_131:
      WTF::StringImpl::destroy();
      goto LABEL_132;
    }
LABEL_39:
    *unsigned int v16 = v25;
  }
LABEL_132:
  unsigned int v16 = v155;
LABEL_133:
  uint64_t v155 = 0;
  if (!v16) {
    goto LABEL_136;
  }
  if (*v16 != 2)
  {
    *v16 -= 2;
LABEL_136:
    if (v20) {
      goto LABEL_137;
    }
LABEL_147:
    __break(0xC471u);
    JUMPOUT(0x1826A4924);
  }
  WTF::StringImpl::destroy();
  if (!v20) {
    goto LABEL_147;
  }
LABEL_137:
  uint64_t v158 = v20;
  long long v159 = *a2;
  uint64_t v99 = *(unsigned int *)(a1 + 132);
  if (v99 != *(_DWORD *)(a1 + 128))
  {
    uint64_t v105 = *(void *)(a1 + 120) + 24 * v99;
    *(void *)uint64_t v105 = v20;
    *(_OWORD *)(v105 + 8) = v159;
    ++*(_DWORD *)(a1 + 132);
    uint64_t v158 = 0;
LABEL_143:
    uint64_t v104 = v157;
    if (v157 == -1) {
      return;
    }
    goto LABEL_144;
  }
  unint64_t v100 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v99 + 1, (unint64_t)&v158);
  uint64_t v101 = *(void *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  uint64_t v102 = *(void *)v100;
  *(void *)unint64_t v100 = 0;
  *(void *)uint64_t v101 = v102;
  *(_OWORD *)(v101 + 8) = *(_OWORD *)(v100 + 8);
  unint64_t v103 = v158;
  ++*(_DWORD *)(a1 + 132);
  uint64_t v158 = 0;
  if (!v103) {
    goto LABEL_143;
  }
  if (*v103 != 2)
  {
    *v103 -= 2;
    uint64_t v104 = v157;
    if (v157 == -1) {
      return;
    }
    goto LABEL_144;
  }
  WTF::StringImpl::destroy();
  uint64_t v104 = v157;
  if (v157 != -1) {
LABEL_144:
  }
    ((void (*)(int **, unsigned __int8 *))off_1ECABED88[v104])(&v155, v156);
}

uint64_t WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::IfStatement *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  __int16 v5 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 3;
  WGSL::AST::Visitor::visit(this, v4);
  uint64_t v7 = (const WGSL::Type *)*((void *)this + 11);
  *(void *)(v4 + 24) = v7;
  *((void *)this + 11) = 0;
  *((_WORD *)this + 52) = v5;
  uint64_t v8 = *((void *)this + 14);
  uint64_t v9 = *(WGSL **)(v8 + 56);
  if (v7 != v9)
  {
    __n128 v10 = *(WGSL **)(v8 + 24);
    BOOL v11 = v10 == v7 || v10 == v9;
    if (!v11 && WGSL::conversionRank(v9, v7, v6) == -1)
    {
      int v12 = (_OWORD *)(*((void *)a2 + 3) + 8);
      *(void *)&long long v15 = "'";
      *((void *)&v15 + 1) = 2;
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 0, v12, (int8x16_t *)"expected 'BOOL', found '", 25, (uint64_t)v7, &v15);
    }
  }
  uint64_t result = (*(uint64_t (**)(WGSL::TypeChecker *, void))(*(void *)this + 400))(this, *((void *)a2 + 4));
  if (*((void *)a2 + 5))
  {
    size_t v14 = *(uint64_t (**)(WGSL::TypeChecker *))(*(void *)this + 360);
    return v14(this);
  }
  return result;
}

uint64_t WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::PhonyAssignmentStatement *a2)
{
  uint64_t v3 = *((void *)a2 + 3);
  __int16 v4 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 3;
  uint64_t result = WGSL::AST::Visitor::visit(this, v3);
  *(void *)(v3 + 24) = *((void *)this + 11);
  *((void *)this + 11) = 0;
  *((_WORD *)this + 52) = v4;
  return result;
}

_DWORD *WGSL::TypeChecker::visit(_DWORD *this, WGSL::AST::ReturnStatement *a2, const WGSL::Type *a3, __n128 a4)
{
  uint64_t v5 = (uint64_t)this;
  uint64_t v6 = *((void *)a2 + 3);
  if (v6)
  {
    __int16 v7 = *((_WORD *)this + 52);
    *((_WORD *)this + 52) = 3;
    this = (_DWORD *)WGSL::AST::Visitor::visit(this, v6);
    uint64_t v8 = *(WGSL **)(v5 + 88);
    *(void *)(v6 + 24) = v8;
    *(void *)(v5 + 88) = 0;
    *(_WORD *)(v5 + 104) = v7;
    uint64_t v9 = *(const WGSL::Type **)(v5 + 96);
    if (v9 == v8) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v8 = *(WGSL **)(*((void *)this + 14) + 48);
    uint64_t v9 = (const WGSL::Type *)*((void *)this + 12);
    if (v9 == v8) {
      goto LABEL_10;
    }
  }
  __n128 v10 = *(WGSL **)(*(void *)(v5 + 112) + 24);
  if (v10 != v9 && v10 != v8)
  {
    this = (_DWORD *)WGSL::conversionRank(v8, v9, a3);
    if (this == -1)
    {
      *(void *)&long long v15 = "', expected '";
      *((void *)&v15 + 1) = 14;
      uint64_t v13 = *(void *)(v5 + 96);
      char v14 = 39;
      return WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral,WGSL::Type const&,char>(v5, 0, (WGSL::AST::ReturnStatement *)((char *)a2 + 8), (int8x16_t *)"return statement type does not match its function return type, returned '", 74, (uint64_t)v8, &v15, v13, &v14);
    }
  }
LABEL_10:
  if (v6)
  {
    int v12 = *(const WTF::StringImpl **)(v5 + 96);
    *(void *)(v6 + 24) = v12;
    if (*(unsigned char *)(v6 + 56))
    {
      return (_DWORD *)WGSL::TypeChecker::convertValue(v5, (long long *)(v6 + 8), v12, v6 + 32, a4);
    }
  }
  return this;
}

void WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::ForStatement *a2)
{
}

void WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&>(uint64_t a1, long long *a2, int8x16_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  v114[0] = 0;
  unsigned int v115 = -1;
  uint64_t v9 = *(unsigned int *)(a5 + 48);
  if (v9 != -1)
  {
    ((void (*)(_DWORD **, unsigned __int8 *, uint64_t))off_1ECABEE00[v9])(&v116, v114, a5);
    unsigned int v115 = v9;
  }
  if (a4) {
    size_t v10 = a4 - 1;
  }
  else {
    size_t v10 = 0;
  }
  if (v10 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826A59ACLL);
  }
  WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v116);
  WGSL::Type::dump(v114, (uint64_t)&v116);
  WTF::StringPrintStream::toString((uint64_t *)&v113, (WTF::StringPrintStream *)&v116);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v116);
  BOOL v11 = v113;
  if (v113)
  {
    int v12 = v113[1];
    if (((v12 | v10) & 0x80000000) != 0) {
      goto LABEL_13;
    }
  }
  else
  {
    int v12 = 0;
    if ((v10 & 0x80000000) != 0)
    {
LABEL_13:
      char v14 = 0;
      goto LABEL_131;
    }
  }
  uint64_t v13 = (v10 + v12);
  if (__OFADD__(v10, v12)) {
    goto LABEL_13;
  }
  if (!v113 || (int v15 = v113[4], *v113 += 2, (v15 & 4) != 0))
  {
    if (v13)
    {
      if ((v13 & 0x80000000) != 0)
      {
        char v14 = 0;
        if (!v11) {
          goto LABEL_130;
        }
        goto LABEL_128;
      }
      WTF::tryFastCompactMalloc((WTF *)(v13 + 20));
      char v14 = v116;
      if (v116)
      {
        int v17 = v116 + 5;
        *int8x16_t v116 = 2;
        v14[1] = v13;
        *((void *)v14 + 1) = v14 + 5;
        v14[4] = 4;
        if (v11) {
          *v11 += 2;
        }
        if (v10)
        {
          if (v10 == 1) {
            unsigned char *v17 = a3->i8[0];
          }
          else {
            memcpy(v14 + 5, a3, v10);
          }
        }
        if (!v11) {
          goto LABEL_130;
        }
        unint64_t v38 = (int8x16_t *)&v17[v10];
        size_t v39 = v11[1];
        *v11 += 2;
        uint64_t v40 = (int8x16_t *)*((void *)v11 + 1);
        if ((v11[4] & 4) != 0)
        {
          if (v39)
          {
            if (v39 == 1) {
              v38->i8[0] = v40->i8[0];
            }
            else {
              memcpy(v38, v40, v39);
            }
          }
          goto LABEL_125;
        }
        unint64_t v41 = (int8x16_t *)((char *)v38 + v39);
        if (v39 >= 0x10)
        {
          unint64_t v42 = (int8x16_t *)((char *)v38 + (v39 & 0xFFFFFFF0));
          do
          {
            unsigned long long v43 = (unsigned __int128)vld2q_s8(v40->i8);
            v40 += 2;
            *v38++ = (int8x16_t)v43;
          }
          while (v38 != v42);
          unint64_t v38 = v42;
        }
        if (v38 == v41) {
          goto LABEL_125;
        }
        size_t v44 = (size_t)v14 + a4 + v39;
        unint64_t v45 = v44 - (void)v38 - (a4 != 0) + 20;
        if (v45 < 8
          || (!a4 ? (uint64_t v46 = v38) : (uint64_t v46 = (int8x16_t *)&v38->i8[1]),
              v38 < (int8x16_t *)((char *)&v40[2].u64[1] + 2 * v44 + -2 * (void)v46)
            ? (BOOL v47 = (unint64_t)v40 >= v44 - (a4 != 0) + 20)
            : (BOOL v47 = 1),
              !v47))
        {
          int8x16_t v49 = v38;
          int8x16_t v50 = v40;
          goto LABEL_78;
        }
        if (v45 >= 0x20)
        {
          unint64_t v48 = v45 & 0xFFFFFFFFFFFFFFE0;
          uint64_t v71 = v40 + 2;
          unsigned long long v72 = v38 + 1;
          unint64_t v73 = v45 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            int8x16_t v75 = v71[-2];
            int8x16_t v74 = v71[-1];
            int8x16_t v77 = *v71;
            int8x16_t v76 = v71[1];
            v71 += 4;
            v72[-1] = vuzp1q_s8(v75, v74);
            *unsigned long long v72 = vuzp1q_s8(v77, v76);
            v72 += 2;
            v73 -= 32;
          }
          while (v73);
          if (v45 == v48) {
            goto LABEL_125;
          }
          if ((v45 & 0x18) == 0)
          {
            int8x16_t v50 = (int8x16_t *)((char *)v40 + 2 * v48);
            int8x16_t v49 = (int8x16_t *)((char *)v38 + v48);
            goto LABEL_78;
          }
        }
        else
        {
          unint64_t v48 = 0;
        }
        int8x16_t v49 = (int8x16_t *)((char *)v38 + (v45 & 0xFFFFFFFFFFFFFFF8));
        int8x16_t v50 = (int8x16_t *)((char *)v40 + 2 * (v45 & 0xFFFFFFFFFFFFFFF8));
        __int8 v78 = (int16x8_t *)((char *)v40 + 2 * v48);
        uint64_t v79 = (int8x8_t *)&v38->i8[v48];
        unint64_t v80 = v48 - (v45 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          int16x8_t v81 = *v78++;
          *v79++ = vmovn_s16(v81);
          v80 += 8;
        }
        while (v80);
        if (v45 == (v45 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_125;
        }
        do
        {
LABEL_78:
          __int8 v51 = v50->i8[0];
          int8x16_t v50 = (int8x16_t *)((char *)v50 + 2);
          v49->i8[0] = v51;
          int8x16_t v49 = (int8x16_t *)((char *)v49 + 1);
        }
        while (v49 != v41);
        goto LABEL_125;
      }
    }
    else
    {
      char v14 = (_DWORD *)MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    if (!v11) {
      goto LABEL_130;
    }
LABEL_128:
    int v16 = *v11 - 2;
    if (*v11 != 2) {
      goto LABEL_129;
    }
    goto LABEL_34;
  }
  if (v13)
  {
    if (v13 > 0x7FFFFFEF)
    {
      char v14 = 0;
      int v16 = *v11 - 2;
      if (*v11 == 2) {
        goto LABEL_34;
      }
LABEL_129:
      *BOOL v11 = v16;
      goto LABEL_130;
    }
    WTF::tryFastCompactMalloc((WTF *)(2 * v13 + 20));
    char v14 = v116;
    if (!v116) {
      goto LABEL_128;
    }
    unint64_t v18 = (unint64_t)(v116 + 5);
    *int8x16_t v116 = 2;
    v14[1] = v13;
    *((void *)v14 + 1) = v14 + 5;
    v14[4] = 0;
    *v11 += 2;
    int v19 = (uint16x8_t *)((char *)v14 + 2 * v10 + 20);
    if ((v10 & 0xFFFFFFC0) != 0)
    {
      unint64_t v20 = v18 + 2 * (v10 & 0xFFFFFFC0);
      long long v21 = 0uLL;
      do
      {
        v119.val[0] = *a3;
        int8x16_t v22 = a3[1];
        v121.val[0] = a3[2];
        int8x16_t v23 = a3[3];
        a3 += 4;
        int8x16_t v24 = v23;
        v121.val[1] = 0uLL;
        v123.val[0] = v22;
        v119.val[1] = 0uLL;
        int v25 = (char *)v18;
        vst2q_s8(v25, v119);
        v25 += 32;
        v123.val[1] = 0uLL;
        vst2q_s8(v25, v123);
        uint64_t v26 = (char *)(v18 + 64);
        vst2q_s8(v26, v121);
        uint64_t v27 = (char *)(v18 + 96);
        vst2q_s8(v27, *(int8x16x2_t *)(&v21 - 1));
        v18 += 128;
      }
      while (v18 != v20);
      unint64_t v18 = v20;
    }
    if ((uint16x8_t *)v18 != v19)
    {
      unint64_t v28 = (unint64_t)v14 + 2 * a4 - v18;
      uint64_t v29 = -2;
      if (a4) {
        uint64_t v30 = -2;
      }
      else {
        uint64_t v30 = 0;
      }
      unint64_t v31 = v28 + v30 + 18;
      if (v31 < 0xE) {
        goto LABEL_49;
      }
      if (!a4) {
        uint64_t v29 = 0;
      }
      unint64_t v32 = v28 + v29 + 18;
      if (v18 < (unint64_t)a3->u64 + (v32 >> 1) + 1
        && (unint64_t)a3 < (v32 & 0xFFFFFFFFFFFFFFFELL) + v18 + 2)
      {
LABEL_49:
        int8x16_t v33 = (uint16x8_t *)v18;
        int8x16_t v34 = a3;
        goto LABEL_50;
      }
      uint64_t v69 = (v31 >> 1) + 1;
      if (v31 >= 0x3E)
      {
        unint64_t v70 = v69 & 0xFFFFFFFFFFFFFFE0;
        int8x16_t v84 = (uint8x8_t *)&a3[1];
        unint64_t v85 = (uint16x8_t *)(v18 + 32);
        unint64_t v86 = v69 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          uint8x16_t v87 = *(uint8x16_t *)v84[-2].i8;
          uint16x8_t v88 = vmovl_u8(*v84);
          uint16x8_t v89 = vmovl_high_u8(*(uint8x16_t *)v84->i8);
          v85[-2] = vmovl_u8(*(uint8x8_t *)v87.i8);
          v85[-1] = vmovl_high_u8(v87);
          *unint64_t v85 = v88;
          v85[1] = v89;
          v85 += 4;
          v84 += 4;
          v86 -= 32;
        }
        while (v86);
        if (v69 == v70) {
          goto LABEL_51;
        }
        if ((v69 & 0x18) == 0)
        {
          int8x16_t v34 = (int8x16_t *)((char *)a3 + v70);
          int8x16_t v33 = (uint16x8_t *)(v18 + 2 * v70);
          do
          {
LABEL_50:
            __int16 v35 = v34->u8[0];
            int8x16_t v34 = (int8x16_t *)((char *)v34 + 1);
            v33->i16[0] = v35;
            int8x16_t v33 = (uint16x8_t *)((char *)v33 + 2);
          }
          while (v33 != v19);
          goto LABEL_51;
        }
      }
      else
      {
        unint64_t v70 = 0;
      }
      int8x16_t v33 = (uint16x8_t *)(v18 + 2 * (v69 & 0xFFFFFFFFFFFFFFF8));
      int8x16_t v34 = (int8x16_t *)((char *)a3 + (v69 & 0xFFFFFFFFFFFFFFF8));
      uint64_t v90 = (uint8x8_t *)&a3->i8[v70];
      unint64_t v91 = (uint16x8_t *)(v18 + 2 * v70);
      unint64_t v92 = v70 - (v69 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint8x8_t v93 = *v90++;
        *v91++ = vmovl_u8(v93);
        v92 += 8;
      }
      while (v92);
      if (v69 != (v69 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_50;
      }
    }
LABEL_51:
    uint64_t v36 = v11[1];
    *v11 += 2;
    uint64_t v37 = (int8x16_t *)*((void *)v11 + 1);
    if ((v11[4] & 4) == 0)
    {
      if (v36)
      {
        if (v36 == 1) {
          v19->i16[0] = v37->i16[0];
        }
        else {
          memcpy(v19, v37, 2 * v36);
        }
      }
      goto LABEL_125;
    }
    uint64_t v52 = (uint16x8_t *)((char *)v19 + 2 * v36);
    if (v36 >= 0x40)
    {
      uint64_t v53 = (uint16x8_t *)((char *)v19 + 2 * (v36 & 0xFFFFFFC0));
      long long v54 = 0uLL;
      do
      {
        v120.val[0] = *v37;
        int8x16_t v55 = v37[1];
        v122.val[0] = v37[2];
        int8x16_t v56 = v37[3];
        v37 += 4;
        int8x16_t v57 = v56;
        v122.val[1] = 0uLL;
        v124.val[0] = v55;
        v120.val[1] = 0uLL;
        unint64_t v58 = (char *)v19;
        vst2q_s8(v58, v120);
        v58 += 32;
        v124.val[1] = 0uLL;
        vst2q_s8(v58, v124);
        i8 = v19[4].i8;
        vst2q_s8(i8, v122);
        int v60 = v19[6].i8;
        vst2q_s8(v60, *(int8x16x2_t *)(&v54 - 1));
        v19 += 8;
      }
      while (v19 != v53);
      int v19 = v53;
    }
    if (v19 != v52)
    {
      uint64_t v61 = (char *)v14 + 2 * v36 + 2 * a4 - (char *)v19;
      uint64_t v62 = -2;
      if (a4) {
        uint64_t v63 = -2;
      }
      else {
        uint64_t v63 = 0;
      }
      unint64_t v64 = v61 + v63 + 18;
      if (v64 < 0xE) {
        goto LABEL_93;
      }
      if (!a4) {
        uint64_t v62 = 0;
      }
      unint64_t v65 = v61 + v62 + 18;
      if (v19 < (uint16x8_t *)&v37->i8[(v65 >> 1) + 1]
        && v37 < (int8x16_t *)((char *)&v19->i16[1] + (v65 & 0xFFFFFFFFFFFFFFFELL)))
      {
LABEL_93:
        size_t v66 = v19;
        uint64_t v67 = v37;
        goto LABEL_94;
      }
      uint64_t v82 = (v64 >> 1) + 1;
      if (v64 >= 0x3E)
      {
        unint64_t v83 = v82 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v94 = (uint8x8_t *)&v37[1];
        __int16 v95 = v19 + 2;
        unint64_t v96 = v82 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          uint8x16_t v97 = *(uint8x16_t *)v94[-2].i8;
          uint16x8_t v98 = vmovl_u8(*v94);
          uint16x8_t v99 = vmovl_high_u8(*(uint8x16_t *)v94->i8);
          v95[-2] = vmovl_u8(*(uint8x8_t *)v97.i8);
          v95[-1] = vmovl_high_u8(v97);
          *__int16 v95 = v98;
          v95[1] = v99;
          v95 += 4;
          v94 += 4;
          v96 -= 32;
        }
        while (v96);
        if (v82 == v83) {
          goto LABEL_125;
        }
        if ((v82 & 0x18) == 0)
        {
          uint64_t v67 = (int8x16_t *)((char *)v37 + v83);
          size_t v66 = (uint16x8_t *)((char *)v19 + 2 * v83);
          goto LABEL_94;
        }
      }
      else
      {
        unint64_t v83 = 0;
      }
      size_t v66 = (uint16x8_t *)((char *)v19 + 2 * (v82 & 0xFFFFFFFFFFFFFFF8));
      uint64_t v67 = (int8x16_t *)((char *)v37 + (v82 & 0xFFFFFFFFFFFFFFF8));
      unint64_t v100 = (uint8x8_t *)&v37->i8[v83];
      uint64_t v101 = (uint16x8_t *)((char *)v19 + 2 * v83);
      unint64_t v102 = v83 - (v82 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint8x8_t v103 = *v100++;
        *v101++ = vmovl_u8(v103);
        v102 += 8;
      }
      while (v102);
      if (v82 == (v82 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_125;
      }
      do
      {
LABEL_94:
        __int16 v68 = v67->u8[0];
        uint64_t v67 = (int8x16_t *)((char *)v67 + 1);
        v66->i16[0] = v68;
        size_t v66 = (uint16x8_t *)((char *)v66 + 2);
      }
      while (v66 != v52);
    }
LABEL_125:
    int v104 = *v11 - 2;
    if (*v11 == 2)
    {
      WTF::StringImpl::destroy();
      int v105 = *v11 - 2;
      if (*v11 != 2) {
        goto LABEL_127;
      }
    }
    else
    {
      *BOOL v11 = v104;
      int v105 = v104 - 2;
      if (v105)
      {
LABEL_127:
        *BOOL v11 = v105;
        goto LABEL_128;
      }
    }
    WTF::StringImpl::destroy();
    int v16 = *v11 - 2;
    if (*v11 == 2) {
      goto LABEL_34;
    }
    goto LABEL_129;
  }
  char v14 = (_DWORD *)MEMORY[0x1E4F30960];
  *MEMORY[0x1E4F30960] += 2;
  int v16 = *v11 - 2;
  if (*v11 != 2) {
    goto LABEL_129;
  }
LABEL_34:
  WTF::StringImpl::destroy();
LABEL_130:
  BOOL v11 = v113;
LABEL_131:
  unint64_t v113 = 0;
  if (!v11) {
    goto LABEL_134;
  }
  if (*v11 != 2)
  {
    *v11 -= 2;
LABEL_134:
    if (v14) {
      goto LABEL_135;
    }
LABEL_145:
    __break(0xC471u);
    JUMPOUT(0x1826A5940);
  }
  WTF::StringImpl::destroy();
  if (!v14) {
    goto LABEL_145;
  }
LABEL_135:
  int8x16_t v116 = v14;
  long long v117 = *a2;
  uint64_t v106 = *(unsigned int *)(a1 + 132);
  if (v106 != *(_DWORD *)(a1 + 128))
  {
    uint64_t v112 = *(void *)(a1 + 120) + 24 * v106;
    *(void *)uint64_t v112 = v14;
    *(_OWORD *)(v112 + 8) = v117;
    ++*(_DWORD *)(a1 + 132);
    int8x16_t v116 = 0;
LABEL_141:
    uint64_t v111 = v115;
    if (v115 == -1) {
      return;
    }
    goto LABEL_142;
  }
  unint64_t v107 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v106 + 1, (unint64_t)&v116);
  uint64_t v108 = *(void *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  uint64_t v109 = *(void *)v107;
  *(void *)unint64_t v107 = 0;
  *(void *)uint64_t v108 = v109;
  *(_OWORD *)(v108 + 8) = *(_OWORD *)(v107 + 8);
  unint64_t v110 = v116;
  ++*(_DWORD *)(a1 + 132);
  int8x16_t v116 = 0;
  if (!v110) {
    goto LABEL_141;
  }
  if (*v110 != 2)
  {
    *v110 -= 2;
    uint64_t v111 = v115;
    if (v115 == -1) {
      return;
    }
    goto LABEL_142;
  }
  WTF::StringImpl::destroy();
  uint64_t v111 = v115;
  if (v115 != -1) {
LABEL_142:
  }
    ((void (*)(int **, unsigned __int8 *))off_1ECABED88[v111])(&v113, v114);
}

void WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::LoopStatement *a2)
{
}

uint64_t WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::WhileStatement *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  __int16 v5 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 3;
  WGSL::AST::Visitor::visit(this, v4);
  __int16 v7 = (WGSL *)*((void *)this + 11);
  *(void *)(v4 + 24) = v7;
  *((void *)this + 11) = 0;
  *((_WORD *)this + 52) = v5;
  uint64_t v8 = *((void *)this + 14);
  uint64_t v9 = *(const WGSL::Type **)(v8 + 56);
  if (v9 != v7)
  {
    size_t v10 = *(WGSL **)(v8 + 24);
    BOOL v11 = v10 == v9 || v10 == v7;
    if (!v11 && WGSL::conversionRank(v7, v9, v6) == -1) {
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&>((uint64_t)this, (long long *)(*((void *)a2 + 3) + 8), (int8x16_t *)"while condition must be BOOL, got ", 35, (uint64_t)v7);
    }
  }
  uint64_t v12 = *((void *)a2 + 4);
  uint64_t v13 = *(uint64_t (**)(WGSL::TypeChecker *, uint64_t))(*(void *)this + 400);
  return v13(this, v12);
}

uint64_t WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::SwitchStatement *a2)
{
  uint64_t v4 = *((void *)a2 + 4);
  __int16 v5 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 3;
  WGSL::AST::Visitor::visit(this, v4);
  uint64_t v6 = (unsigned __int8 *)*((void *)this + 11);
  *(void *)(v4 + 24) = v6;
  *((void *)this + 11) = 0;
  *((_WORD *)this + 52) = v5;
  int v17 = v6;
  if (!v6) {
    goto LABEL_7;
  }
  while (1)
  {
    int v7 = *((_DWORD *)v6 + 12);
    if (v7 != 10) {
      break;
    }
    uint64_t v6 = (unsigned __int8 *)*((void *)v6 + 1);
    if (!v6) {
      goto LABEL_7;
    }
  }
  if (v7 || *v6 >= 3u)
  {
LABEL_7:
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (long long *)(*((void *)a2 + 4) + 8), "switch selector must be of type i32 or u32", 43);
    int v17 = *(unsigned __int8 **)(*((void *)this + 14) + 24);
  }
  v16[0] = this;
  v16[1] = &v17;
  uint64_t v8 = *((unsigned int *)a2 + 13);
  if (v8)
  {
    uint64_t v9 = (uint64_t *)*((void *)a2 + 5);
    uint64_t v10 = 8 * v8;
    do
    {
      uint64_t v11 = *v9++;
      WGSL::AST::Visitor::visit(this, v11);
      v10 -= 8;
    }
    while (v10);
  }
  uint64_t result = WGSL::TypeChecker::visit(WGSL::AST::SwitchStatement &)::$_0::operator()((uint64_t)v16, (uint64_t)a2 + 72);
  uint64_t v13 = *((unsigned int *)a2 + 17);
  if (v13)
  {
    uint64_t v14 = *((void *)a2 + 7);
    uint64_t v15 = 24 * v13;
    do
    {
      uint64_t result = WGSL::TypeChecker::visit(WGSL::AST::SwitchStatement &)::$_0::operator()((uint64_t)v16, v14);
      v14 += 24;
      v15 -= 24;
    }
    while (v15);
  }
  return result;
}

uint64_t WGSL::TypeChecker::visit(WGSL::AST::SwitchStatement &)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(unsigned int *)(a2 + 12);
  if (v4)
  {
    uint64_t v6 = 8 * v4;
    int v7 = *(uint64_t **)a2;
    do
    {
      uint64_t v8 = *v7;
      __int16 v9 = *(_WORD *)(v3 + 104);
      *(_WORD *)(v3 + 104) = 3;
      WGSL::AST::Visitor::visit((unsigned char *)v3, v8);
      uint64_t v11 = *(const WGSL::Type **)(v3 + 88);
      *(void *)(v8 + 24) = v11;
      *(void *)(v3 + 88) = 0;
      *(_WORD *)(v3 + 104) = v9;
      uint64_t v12 = **(const WGSL::Type ***)(a1 + 8);
      if (v12 != v11)
      {
        uint64_t v13 = *(const WGSL::Type **)(*(void *)(v3 + 112) + 24);
        BOOL v14 = v13 == v12 || v13 == v11;
        if (!v14 && WGSL::conversionRank(v11, v12, v10) == -1)
        {
          int v16 = *(WGSL ***)(a1 + 8);
          int v17 = *v16;
          if (v11 == *v16
            || ((unint64_t v18 = *(WGSL **)(*(void *)(v3 + 112) + 24), v18 != v11) ? (v19 = v18 == v17) : (v19 = 1),
                v19 || (v20 = WGSL::conversionRank(v17, v11, v15), int v16 = *(WGSL ***)(a1 + 8), v20 != -1)))
          {
            *int v16 = v11;
          }
          else
          {
            uint64_t v21 = (uint64_t)*v16;
            *(void *)&long long v26 = "' and case selector has type '";
            *((void *)&v26 + 1) = 31;
            char v25 = 39;
            WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral,WGSL::Type const&,char>(v3, 0, (_OWORD *)(v8 + 8), (int8x16_t *)"the case selector values must have the same type as the selector expression: the selector expression has type '", 112, v21, &v26, (uint64_t)v11, &v25);
          }
        }
      }
      ++v7;
      v6 -= 8;
    }
    while (v6);
  }
  uint64_t v22 = *(void *)(a2 + 16);
  int8x16_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 400);
  return v23(v3, v22);
}

uint64_t WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::FieldAccessExpression *a2)
{
  v10[0] = this;
  v10[1] = a2;
  uint64_t v3 = *((void *)a2 + 8);
  __int16 v4 = *((_WORD *)this + 52);
  *((unsigned char *)this + 105) = 0;
  WGSL::AST::Visitor::visit(this, v3);
  __int16 v5 = (unsigned __int8 *)*((void *)this + 11);
  *(void *)(v3 + 24) = v5;
  *((void *)this + 11) = 0;
  *((_WORD *)this + 52) = v4;
  if (!v5)
  {
LABEL_9:
    uint64_t result = ((uint64_t (*)(void *, unsigned __int8 *, void, void))WGSL::TypeChecker::visit(WGSL::AST::FieldAccessExpression &)::$_1::operator())(v10, v5, 0, 0);
    if (result) {
      *((void *)this + 11) = result;
    }
    return result;
  }
  int v6 = *((_DWORD *)v5 + 12);
  if (v6 != 11)
  {
    if (v6 == 10)
    {
      char v12 = 1;
      unsigned __int8 v11 = 0;
      uint64_t result = ((uint64_t (*)(void *, void, char *, unsigned __int8 *))WGSL::TypeChecker::visit(WGSL::AST::FieldAccessExpression &)::$_1::operator())(v10, *((void *)v5 + 1), &v12, &v11);
      if (result)
      {
        uint64_t v8 = result;
        if (v12)
        {
          uint64_t result = WGSL::TypeStore::referenceType(*((void *)this + 14), *v5, result, v5[1], v11);
          uint64_t v8 = result;
        }
        *((void *)this + 11) = v8;
      }
      return result;
    }
    goto LABEL_9;
  }
  char v12 = 1;
  unsigned __int8 v11 = 0;
  uint64_t result = ((uint64_t (*)(void *, void, char *, unsigned __int8 *))WGSL::TypeChecker::visit(WGSL::AST::FieldAccessExpression &)::$_1::operator())(v10, *((void *)v5 + 1), &v12, &v11);
  if (result)
  {
    uint64_t v9 = result;
    if (v12)
    {
      uint64_t result = WGSL::TypeStore::referenceType(*((void *)this + 14), *v5, result, v5[1], v11);
      uint64_t v9 = result;
    }
    *((void *)this + 11) = v9;
  }
  return result;
}

_DWORD *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::IndexAccessExpression *a2)
{
  v25[0] = a2;
  v25[1] = this;
  v24[0] = (uint64_t)this;
  v24[1] = (uint64_t)v25;
  v24[2] = (uint64_t)a2;
  uint64_t v4 = *((void *)a2 + 8);
  char v5 = *((unsigned char *)this + 104);
  char v6 = *((unsigned char *)this + 105);
  *((unsigned char *)this + 105) = 0;
  WGSL::AST::Visitor::visit(this, v4);
  int v7 = (unsigned __int8 *)*((void *)this + 11);
  *(void *)(v4 + 24) = v7;
  *((void *)this + 11) = 0;
  uint64_t v8 = *((void *)a2 + 9);
  *((unsigned char *)this + 105) = 0;
  *((unsigned char *)this + 104) = v5;
  WGSL::AST::Visitor::visit(this, v8);
  uint64_t v10 = (WGSL *)*((void *)this + 11);
  *(void *)(v8 + 24) = v10;
  *((void *)this + 11) = 0;
  *((unsigned char *)this + 104) = v5;
  *((unsigned char *)this + 105) = v6;
  uint64_t v11 = *((void *)this + 14);
  char v12 = *(const WGSL::Type **)(v11 + 64);
  if (v12 != v10)
  {
    uint64_t v13 = *(const WGSL::Type **)(v11 + 24);
    if (v13 != v12 && v13 != v10 && WGSL::conversionRank(v10, v12, v9) == -1)
    {
      uint64_t v17 = *((void *)this + 14);
      unint64_t v18 = *(const WGSL::Type **)(v17 + 72);
      if (v18 != v10)
      {
        BOOL v19 = *(const WGSL::Type **)(v17 + 24);
        if (v19 != v18 && v19 != v10 && WGSL::conversionRank(v10, v18, v14) == -1)
        {
          uint64_t v21 = *((void *)this + 14);
          uint64_t v22 = *(const WGSL::Type **)(v21 + 32);
          if (v22 != v10)
          {
            int8x16_t v23 = *(const WGSL::Type **)(v21 + 24);
            if (v23 != v22 && v23 != v10 && WGSL::conversionRank(v10, v22, v20) == -1)
            {
              unsigned __int8 v26 = 39;
              return WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)this, 1, (long long *)((char *)a2 + 8), "index must be of type 'i32' or 'u32', found: '", 47, (uint64_t)v10, (char *)&v26);
            }
          }
        }
      }
    }
  }
  if (v7 && ((int v15 = *((_DWORD *)v7 + 12), v15 == 11) || v15 == 10))
  {
    unsigned __int8 v26 = 0;
    uint64_t result = WGSL::TypeChecker::visit(WGSL::AST::IndexAccessExpression &)::$_2::operator()(v24, *((void *)v7 + 1), (WGSL::TypeStore *)&v26);
    if (!result) {
      return result;
    }
    uint64_t result = (_DWORD *)WGSL::TypeStore::referenceType(*((void *)this + 14), *v7, (uint64_t)result, v7[1], v26);
  }
  else
  {
    uint64_t result = WGSL::TypeChecker::visit(WGSL::AST::IndexAccessExpression &)::$_2::operator()(v24, (uint64_t)v7, 0);
    if (!result) {
      return result;
    }
  }
  *((void *)this + 11) = result;
  return result;
}

WGSL *WGSL::TypeChecker::visit(WGSL::AST::IndexAccessExpression &)::$_2::operator()(uint64_t *a1, uint64_t a2, WGSL::TypeStore *a3)
{
  uint64_t v3 = (WGSL *)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 112);
  if (*(void *)(v5 + 24) != a2)
  {
    if (!a2) {
      goto LABEL_151;
    }
    int v7 = *(_DWORD *)(a2 + 48);
    if (v7 != 1)
    {
      if (v7 != 2)
      {
        if (v7 != 3) {
          goto LABEL_151;
        }
        int v8 = *(_DWORD *)(a2 + 16);
        if (v8 == 1)
        {
          int v9 = *(_DWORD *)(a2 + 8);
          unsigned int v10 = v9 & 0xFFFFFF00;
        }
        else
        {
          LOBYTE(v9) = 0;
          unsigned int v10 = 0;
        }
        uint64_t v11 = *(WGSL **)a2;
        unint64_t v28 = (void *)a1[1];
        uint64_t v29 = *v28;
        uint64_t v30 = (_DWORD *)v28[1];
        uint64_t v31 = *(void *)(*v28 + 64);
        LOBYTE(v68[0]) = 0;
        char v70 = 0;
        if (*(unsigned char *)(v31 + 56))
        {
          int v69 = -1;
          uint64_t v32 = *(unsigned int *)(v31 + 48);
          if (v32 != -1)
          {
            ((void (*)(unint64_t *, void *, uint64_t))off_1ECABEE88[v32])(&v65, v68, v31 + 32);
            int v69 = v32;
            uint64_t v29 = *v28;
          }
          char v70 = 1;
        }
        uint64_t v33 = *(void *)(v29 + 72);
        LOBYTE(v65) = 0;
        char v67 = 0;
        if (!*(unsigned char *)(v33 + 56)) {
          goto LABEL_145;
        }
        int v66 = -1;
        uint64_t v34 = *(unsigned int *)(v33 + 48);
        if (v34 != -1)
        {
          ((void (*)(unsigned int **, unint64_t *, uint64_t))off_1ECABEE88[v34])(v63, &v65, v33 + 32);
          int v66 = v34;
        }
        char v67 = 1;
        if (v8 == 1)
        {
          unsigned int v35 = v10 | v9;
          if (v35)
          {
LABEL_49:
            switch(v34)
            {
              case 5:
                unint64_t v36 = v65;
                break;
              case 4:
                unint64_t v36 = v65;
                break;
              case 3:
                unint64_t v36 = (int)v65;
                break;
              default:
                goto LABEL_158;
            }
            if ((v36 & 0x8000000000000000) != 0 || v36 >= v35)
            {
              WGSL::TypeChecker::typeError<WTF::ASCIILiteral,long long &,WTF::ASCIILiteral,unsigned int,char>(v30, (long long *)(*v28 + 8), "index ", 7, v36, " is out of bounds [0..", 23, v35 - 1, 93);
            }
            else if (v70)
            {
              if (v69 == 7)
              {
                uint64_t v44 = *v28;
                WGSL::ConstantArray::operator[]((uint64_t)v68, v36, (uint64_t)v63);
                uint64_t v45 = v44 + 32;
                if (!*(unsigned char *)(v44 + 56))
                {
                  *(unsigned char *)(v44 + 32) = 0;
                  *(_DWORD *)(v44 + 48) = -1;
                  int v57 = v64;
                  if (v64 != -1)
                  {
                    ((void (*)(unsigned int **, uint64_t, unsigned int **))off_1ECABEE88[v64])(&v71, v45, v63);
                    *(_DWORD *)(v44 + 48) = v57;
                  }
                  *(unsigned char *)(v44 + 56) = 1;
                  goto LABEL_125;
                }
                uint64_t v46 = *(unsigned int *)(v44 + 48);
                if (v46 == -1)
                {
                  if (v64 == -1)
                  {
LABEL_127:
                    int v64 = -1;
                    goto LABEL_128;
                  }
                }
                else if (v64 == -1)
                {
                  ((void (*)(unsigned int **, uint64_t))off_1ECABEC60[v46])(&v71, v45);
                  *(_DWORD *)(v44 + 48) = -1;
                  goto LABEL_125;
                }
                uint64_t v71 = (unsigned int *)(v44 + 32);
                ((void (*)(unsigned int **))off_1ECABEEE0[v64])(&v71);
LABEL_125:
                if (v64 != -1) {
                  ((void (*)(unsigned int **, unsigned int **))off_1ECABEC60[v64])(&v71, v63);
                }
                goto LABEL_127;
              }
              goto LABEL_155;
            }
LABEL_128:
            if (!v67) {
              goto LABEL_145;
            }
            LODWORD(v34) = v66;
            goto LABEL_130;
          }
        }
        if (!v70)
        {
LABEL_130:
          if (v34 != -1) {
            ((void (*)(unsigned int **, unint64_t *))off_1ECABEC60[v34])(&v71, &v65);
          }
          goto LABEL_145;
        }
        if (v69 == 7)
        {
          if (v68[0])
          {
            unsigned int v35 = *(_DWORD *)v68[0];
            if (*(_DWORD *)v68[0]) {
              goto LABEL_49;
            }
          }
          goto LABEL_130;
        }
LABEL_155:
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_156;
      }
      uint64_t v21 = *(unsigned int **)a2;
      unsigned __int8 v72 = *(unsigned char *)(a2 + 9);
      uint64_t v71 = v21;
      v68[0] = ((unint64_t)v72 << 8) | 1;
      v68[1] = v21;
      uint64_t v22 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v5 + 16), (unsigned __int8 *)v68);
      int8x16_t v23 = *(unsigned __int8 **)(v5 + 16);
      if (v23) {
        v23 += 24 * *((unsigned int *)v23 - 1);
      }
      if (v23 == v22 || (uint64_t v11 = (WGSL *)*((void *)v22 + 2)) == 0) {
        WGSL::TypeStore::allocateType<WGSL::Types::Vector,WGSL::Type const*&,unsigned char &>();
      }
      char v12 = (void *)a1[1];
      unsigned int v13 = *((unsigned __int8 *)v3 + 8);
      uint64_t v24 = *v12;
      int v15 = (_DWORD *)v12[1];
      uint64_t v25 = *(void *)(*v12 + 64);
      LOBYTE(v68[0]) = 0;
      char v70 = 0;
      if (*(unsigned char *)(v25 + 56))
      {
        int v69 = -1;
        uint64_t v26 = *(unsigned int *)(v25 + 48);
        if (v26 != -1)
        {
          ((void (*)(unint64_t *, void *, uint64_t))off_1ECABEE88[v26])(&v65, v68, v25 + 32);
          int v69 = v26;
          uint64_t v24 = *v12;
        }
        char v70 = 1;
      }
      uint64_t v27 = *(void *)(v24 + 72);
      LOBYTE(v65) = 0;
      char v67 = 0;
      if (*(unsigned char *)(v27 + 56))
      {
        int v66 = -1;
        uint64_t v19 = *(unsigned int *)(v27 + 48);
        if (v19 != -1)
        {
          ((void (*)(unsigned int **, unint64_t *, uint64_t))off_1ECABEE88[v19])(v63, &v65, v27 + 32);
          int v66 = v19;
        }
        char v67 = 1;
        if (!v13)
        {
          if (!v70) {
            goto LABEL_143;
          }
          if (v69 != 9) {
            goto LABEL_155;
          }
          unsigned int v13 = v68[0];
          if (!LODWORD(v68[0])) {
            goto LABEL_143;
          }
        }
        switch(v19)
        {
          case 5:
            unint64_t v20 = v65;
            break;
          case 4:
            unint64_t v20 = v65;
            break;
          case 3:
            unint64_t v20 = (int)v65;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x1826A7B0CLL);
        }
        if ((v20 & 0x8000000000000000) == 0 && v20 < v13)
        {
          if (v70)
          {
            if (v69 != 9) {
              goto LABEL_155;
            }
            uint64_t v37 = *v12;
            WGSL::ConstantMatrix::operator[]((uint64_t)v68, v20, &v71);
            unint64_t v38 = v71;
            v63[0] = v71;
            int v64 = 8;
            if (*(unsigned char *)(v37 + 56))
            {
              uint64_t v39 = v37 + 32;
              int v40 = *(_DWORD *)(v37 + 48);
              if (v40 == 8)
              {
                WTF::FixedVector<WGSL::ConstantValue>::operator=((WTF **)(v37 + 32), v63);
              }
              else
              {
                if (v71)
                {
                  uint64_t v52 = *v71;
                  uint64_t v61 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v52 + 8));
                  *uint64_t v61 = v52;
                  if (v52)
                  {
                    uint64_t v53 = v61 + 6;
                    uint64_t v54 = 24 * v52;
                    int8x16_t v55 = v38 + 6;
                    do
                    {
                      *((unsigned char *)v53 - 16) = 0;
                      *uint64_t v53 = -1;
                      a3 = (WGSL::TypeStore *)(v55 - 4);
                      uint64_t v56 = *v55;
                      if (v56 != -1)
                      {
                        ((void (*)(unsigned __int8 *, _DWORD *, WGSL::TypeStore *))off_1ECABEE88[v56])(&v72, v53 - 4, a3);
                        *uint64_t v53 = v56;
                      }
                      v53 += 6;
                      v55 += 6;
                      v54 -= 24;
                    }
                    while (v54);
                  }
                  unint64_t v58 = v61;
                  int v40 = *(_DWORD *)(v37 + 48);
                  uint64_t v39 = v37 + 32;
                }
                else
                {
                  unint64_t v58 = 0;
                }
                if (v40 != -1) {
                  ((void (*)(unsigned __int8 *, uint64_t))off_1ECABEC60[v40])(&v72, v39);
                }
                *(void *)(v37 + 32) = v58;
                *(_DWORD *)(v37 + 48) = 8;
              }
            }
            else
            {
              *(unsigned char *)(v37 + 32) = 0;
              *(_DWORD *)(v37 + 48) = -1;
              if (v38)
              {
                uint64_t v47 = *v38;
                unint64_t v48 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v47 + 8));
                *unint64_t v48 = v47;
                if (v47)
                {
                  uint64_t v62 = v37;
                  uint64_t v49 = 0;
                  do
                  {
                    LOBYTE(v48[v49 + 2]) = 0;
                    v48[v49 + 6] = -1;
                    uint64_t v50 = v38[v49 + 6];
                    if (v50 != -1)
                    {
                      ((void (*)(unsigned __int8 *, _DWORD *, unsigned int *))off_1ECABEE88[v50])(&v72, &v48[v49 + 2], &v38[v49 + 2]);
                      v48[v49 + 6] = v50;
                    }
                    v49 += 6;
                  }
                  while (6 * v47 != v49);
                  uint64_t v37 = v62;
                }
              }
              else
              {
                unint64_t v48 = 0;
              }
              *(void *)(v37 + 32) = v48;
              *(_DWORD *)(v37 + 48) = 8;
              *(unsigned char *)(v37 + 56) = 1;
            }
            if (v64 != -1) {
              ((void (*)(unsigned __int8 *, unsigned int **))off_1ECABEC60[v64])(&v72, v63);
            }
            goto LABEL_141;
          }
LABEL_87:
          if (!v67) {
            goto LABEL_145;
          }
LABEL_142:
          LODWORD(v19) = v66;
LABEL_143:
          if (v19 != -1) {
            ((void (*)(unsigned int **, unint64_t *))off_1ECABEC60[v19])(&v71, &v65);
          }
          goto LABEL_145;
        }
LABEL_86:
        WGSL::TypeChecker::typeError<WTF::ASCIILiteral,long long &,WTF::ASCIILiteral,unsigned int,char>(v15, (long long *)(*v12 + 8), "index ", 7, v20, " is out of bounds [0..", 23, v13 - 1, 93);
        goto LABEL_87;
      }
LABEL_145:
      if (v70 && v69 != -1) {
        ((void (*)(unint64_t *, void *))off_1ECABEC60[v69])(&v65, v68);
      }
      if (v11)
      {
        if (*(unsigned char *)(*(void *)(a1[2] + 72) + 56)) {
          return v11;
        }
        uint64_t v3 = WGSL::concretize(v11, *(const WGSL::Type **)(v4 + 112), a3);
        if (v3) {
          return v3;
        }
LABEL_158:
        __break(0xC471u);
        JUMPOUT(0x1826A7AC8);
      }
LABEL_151:
      unint64_t v59 = (long long *)(a1[2] + 8);
      LOBYTE(v68[0]) = 39;
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,char>(v4, 1, v59, "cannot index type '", 20, (uint64_t)v3, (char *)v68);
      return 0;
    }
    if (a3) {
      *(unsigned char *)a3 = 1;
    }
    uint64_t v11 = *(WGSL **)a2;
    char v12 = (void *)a1[1];
    unsigned int v13 = *(unsigned __int8 *)(a2 + 8);
    uint64_t v14 = *v12;
    int v15 = (_DWORD *)v12[1];
    uint64_t v16 = *(void *)(*v12 + 64);
    LOBYTE(v68[0]) = 0;
    char v70 = 0;
    if (*(unsigned char *)(v16 + 56))
    {
      int v69 = -1;
      uint64_t v17 = *(unsigned int *)(v16 + 48);
      if (v17 != -1)
      {
        ((void (*)(unint64_t *, void *, uint64_t))off_1ECABEE88[v17])(&v65, v68, v16 + 32);
        int v69 = v17;
        uint64_t v14 = *v12;
      }
      char v70 = 1;
    }
    uint64_t v18 = *(void *)(v14 + 72);
    LOBYTE(v65) = 0;
    char v67 = 0;
    if (!*(unsigned char *)(v18 + 56)) {
      goto LABEL_145;
    }
    int v66 = -1;
    uint64_t v19 = *(unsigned int *)(v18 + 48);
    if (v19 != -1)
    {
      ((void (*)(unsigned int **, unint64_t *, uint64_t))off_1ECABEE88[v19])(v63, &v65, v18 + 32);
      int v66 = v19;
    }
    char v67 = 1;
    if (!v13)
    {
      if (!v70) {
        goto LABEL_143;
      }
      if (v69 != 8) {
        goto LABEL_155;
      }
      if (!v68[0]) {
        goto LABEL_143;
      }
      unsigned int v13 = *(_DWORD *)v68[0];
      if (!*(_DWORD *)v68[0]) {
        goto LABEL_143;
      }
    }
    switch(v19)
    {
      case 5:
        unint64_t v20 = v65;
        break;
      case 4:
        unint64_t v20 = v65;
        break;
      case 3:
        unint64_t v20 = (int)v65;
        break;
      default:
LABEL_156:
        __break(0xC471u);
        JUMPOUT(0x1826A7AECLL);
    }
    if ((v20 & 0x8000000000000000) != 0 || v20 >= v13) {
      goto LABEL_86;
    }
    if (!v70) {
      goto LABEL_87;
    }
    if (v69 != 8) {
      goto LABEL_155;
    }
    uint64_t v41 = *v12;
    WGSL::ConstantArray::operator[]((uint64_t)v68, v20, (uint64_t)v63);
    uint64_t v42 = v41 + 32;
    if (!*(unsigned char *)(v41 + 56))
    {
      *(unsigned char *)(v41 + 32) = 0;
      *(_DWORD *)(v41 + 48) = -1;
      int v51 = v64;
      if (v64 != -1)
      {
        ((void (*)(unsigned int **, uint64_t, unsigned int **))off_1ECABEE88[v64])(&v71, v42, v63);
        *(_DWORD *)(v41 + 48) = v51;
      }
      *(unsigned char *)(v41 + 56) = 1;
      goto LABEL_120;
    }
    uint64_t v43 = *(unsigned int *)(v41 + 48);
    if (v43 == -1)
    {
      if (v64 == -1) {
        goto LABEL_141;
      }
    }
    else if (v64 == -1)
    {
      ((void (*)(unsigned int **, uint64_t))off_1ECABEC60[v43])(&v71, v42);
      *(_DWORD *)(v41 + 48) = -1;
      goto LABEL_120;
    }
    uint64_t v71 = (unsigned int *)(v41 + 32);
    ((void (*)(unsigned int **))off_1ECABEEE0[v64])(&v71);
LABEL_120:
    if (v64 != -1) {
      ((void (*)(unsigned int **, unsigned int **))off_1ECABEC60[v64])(&v71, v63);
    }
LABEL_141:
    int v64 = -1;
    if (!v67) {
      goto LABEL_145;
    }
    goto LABEL_142;
  }
  return v3;
}

WTF *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::BinaryExpression *a2)
{
  return WGSL::TypeChecker::binaryExpression((unint64_t)this, (long long *)((char *)a2 + 8), a2, *((unsigned __int8 *)a2 + 80), *((void *)a2 + 8), *((void *)a2 + 9));
}

uint64_t WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::IdentifierExpression *a2, const WTF::StringImpl *a3)
{
  uint64_t v5 = (char *)a2 + 64;
  char v6 = (void *)*((void *)this + 5);
  do
  {
    uint64_t v7 = v6[1];
    if (v7)
    {
      unsigned int v8 = *(_DWORD *)(v7 - 8);
      int v9 = (WTF::StringImpl *)*((void *)a2 + 11);
      unsigned int v10 = *((_DWORD *)v9 + 4);
      int v11 = v10 < 0x100 ? WTF::StringImpl::hashSlowCase(v9) : v10 >> 8;
      for (i = 0; ; int v11 = i + v13)
      {
        uint64_t v13 = v11 & v8;
        uint64_t v14 = *(WTF **)(v7 + (v13 << 6));
        if (v14 != (WTF *)-1)
        {
          if (!v14) {
            goto LABEL_2;
          }
          uint64_t result = WTF::equal(v14, *((const WTF::StringImpl **)a2 + 11), a3);
          if (result) {
            break;
          }
        }
        ++i;
      }
      uint64_t v17 = v7 + (v13 << 6);
      uint64_t v18 = v6[1];
      if (!v18 || v17 != v18 + ((unint64_t)*(unsigned int *)(v18 - 4) << 6))
      {
        int v19 = *(unsigned __int8 *)(v17 + 8);
        if (*(unsigned char *)(v17 + 8))
        {
          if (v19 == 2)
          {
            uint64_t v41 = (int8x16_t *)"function";
            uint64_t v42 = 9;
          }
          else if (v19 == 1)
          {
            uint64_t v41 = (int8x16_t *)"type";
            uint64_t v42 = 5;
          }
          else
          {
            uint64_t v41 = (int8x16_t *)"value";
            uint64_t v42 = 6;
          }
          return (uint64_t)WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WGSL::AST::Identifier &,WTF::ASCIILiteral>((uint64_t)this, (long long *)((char *)a2 + 8), (int8x16_t *)"cannot use ", 12, v41, v42, " '", 3, (uint64_t)v5, "' as value", 11);
        }
        unsigned int v20 = *(unsigned __int8 *)(v17 + 24);
        unsigned int v21 = *((unsigned __int8 *)this + 104);
        if (v20 > v21)
        {
          if (v20 == 3)
          {
            uint64_t v43 = "runtime";
            uint64_t v44 = 8;
          }
          else
          {
            if (v20 == 2) {
              uint64_t v43 = "override";
            }
            else {
              uint64_t v43 = "constant";
            }
            uint64_t v44 = 9;
          }
          if (v21 == 3)
          {
            uint64_t v45 = "runtime";
            uint64_t v46 = 8;
          }
          else
          {
            if (v21 == 2) {
              uint64_t v45 = "override";
            }
            else {
              uint64_t v45 = "constant";
            }
            uint64_t v46 = 9;
          }
          return (uint64_t)WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(this, (long long *)((char *)a2 + 8), "cannot use ", 12, v43, v44, " value in ", 11, v45, v46, " expression", 12);
        }
        uint64_t v22 = *(const WTF::StringImpl **)(v17 + 16);
        *((void *)this + 11) = v22;
        if (!*(unsigned char *)(v17 + 56)) {
          return result;
        }
        LOBYTE(v47) = 0;
        DWORD2(v48) = -1;
        uint64_t v23 = *(unsigned int *)(v17 + 48);
        if (v23 == -1)
        {
          uint64_t v25 = (char *)a2 + 56;
          uint64_t v26 = (char *)a2 + 32;
          if (*((unsigned char *)a2 + 56))
          {
            uint64_t v40 = *((unsigned int *)a2 + 12);
            if (v40 == -1)
            {
LABEL_56:
              DWORD2(v48) = -1;
              return WGSL::TypeChecker::convertValue((uint64_t)this, (long long *)((char *)a2 + 8), v22, (uint64_t)v26, v16);
            }
            ((void (*)(char **, char *))off_1ECABEC60[v40])(&v51, (char *)a2 + 32);
            *((_DWORD *)a2 + 12) = -1;
LABEL_54:
            if (DWORD2(v48) != -1) {
              v16.n128_f64[0] = ((double (*)(char **, void (***)(WGSL::AST::Identifier *__hidden)))off_1ECABEC60[DWORD2(v48)])(&v51, &v47);
            }
            goto LABEL_56;
          }
          *((unsigned char *)a2 + 32) = 0;
          *((_DWORD *)a2 + 12) = -1;
        }
        else
        {
          uint64_t v24 = off_1ECABEE88[v23];
          ((void (*)(char **, void (***)(WGSL::AST::Identifier *__hidden), uint64_t))v24)(&v51, &v47, v17 + 32);
          DWORD2(v48) = v23;
          uint64_t v25 = (char *)a2 + 56;
          uint64_t v26 = (char *)a2 + 32;
          if (*((unsigned char *)a2 + 56))
          {
            int v51 = (char *)a2 + 32;
            ((void (*)(char **, char *, void (***)(WGSL::AST::Identifier *__hidden)))off_1ECABEEE0[v23])(&v51, (char *)a2 + 32, &v47);
            goto LABEL_54;
          }
          *((unsigned char *)a2 + 32) = 0;
          *((_DWORD *)a2 + 12) = -1;
          ((void (*)(char **, char *, void (***)(WGSL::AST::Identifier *__hidden)))v24)(&v51, (char *)a2 + 32, &v47);
          *((_DWORD *)a2 + 12) = v23;
        }
        unsigned char *v25 = 1;
        goto LABEL_54;
      }
    }
LABEL_2:
    char v6 = (void *)*v6;
  }
  while (v6);
  long long v48 = *(_OWORD *)((char *)a2 + 72);
  uint64_t v47 = off_1ECABC030;
  uint64_t v27 = *((void *)a2 + 11);
  if (!v27)
  {
    uint64_t v49 = 0;
    int v30 = 1;
    goto LABEL_25;
  }
  *(_DWORD *)v27 += 2;
  uint64_t v49 = v27;
  int v28 = *(_DWORD *)(v27 + 4);
  if (v28 < 0) {
    goto LABEL_59;
  }
  BOOL v29 = __OFADD__(v28, 1);
  int v30 = v28 + 1;
  if (v29) {
    goto LABEL_59;
  }
LABEL_25:
  if (__OFADD__(v30, 23))
  {
LABEL_59:
    uint64_t v50 = 0;
    goto LABEL_60;
  }
  BOOL v31 = !v27 || (*(unsigned char *)(v27 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<char,void>>((v30 + 23), v31, (int8x16_t *)"unresolved identifier '", 0x17u, v27, 39, &v50);
  uint64_t v32 = v50;
  if (!v50)
  {
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1826A7F4CLL);
  }
  uint64_t v50 = 0;
  int v51 = v32;
  long long v52 = *(_OWORD *)((char *)a2 + 8);
  uint64_t v33 = *((unsigned int *)this + 33);
  if (v33 != *((_DWORD *)this + 32))
  {
    uint64_t v39 = *((void *)this + 15) + 24 * v33;
    *(void *)uint64_t v39 = v32;
    *(_OWORD *)(v39 + 8) = v52;
    ++*((_DWORD *)this + 33);
    int v51 = 0;
LABEL_37:
    unint64_t v38 = v50;
    uint64_t v50 = 0;
    if (!v38) {
      goto LABEL_41;
    }
    goto LABEL_38;
  }
  unint64_t v34 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 120, v33 + 1, (unint64_t)&v51);
  uint64_t v35 = *((void *)this + 15) + 24 * *((unsigned int *)this + 33);
  uint64_t v36 = *(void *)v34;
  *(void *)unint64_t v34 = 0;
  *(void *)uint64_t v35 = v36;
  *(_OWORD *)(v35 + 8) = *(_OWORD *)(v34 + 8);
  uint64_t v37 = v51;
  ++*((_DWORD *)this + 33);
  int v51 = 0;
  if (!v37) {
    goto LABEL_37;
  }
  if (*v37 == 2)
  {
    WTF::StringImpl::destroy();
    unint64_t v38 = v50;
    uint64_t v50 = 0;
    if (v38) {
      goto LABEL_38;
    }
  }
  else
  {
    *v37 -= 2;
    unint64_t v38 = v50;
    uint64_t v50 = 0;
    if (!v38) {
      goto LABEL_41;
    }
LABEL_38:
    if (*(_DWORD *)v38 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *(_DWORD *)v38 -= 2;
    }
  }
LABEL_41:
  uint64_t result = v49;
  uint64_t v47 = off_1ECABC030;
  uint64_t v49 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = WTF::StringImpl::destroy();
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  *((void *)this + 11) = *(void *)(*((void *)this + 14) + 24);
  return result;
}

WTF *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::CallExpression *a2)
{
  void (*v129)(char **__return_ptr, const WTF::StringImpl *, WTF **);
  WTF *v130;
  uint64_t v131;
  uint64_t v132;
  WTF *v133;
  unsigned __int8 *v134;
  uint64_t v135;
  unsigned __int8 **v136;
  uint64_t v137;
  unsigned __int8 *v138;
  uint64_t v139;
  uint64_t v140;
  WTF *v141;
  WGSL *v142;
  uint64_t v143;
  unsigned __int8 **v144;
  uint64_t v145;
  unsigned __int8 *v146;
  uint64_t v147;
  _DWORD *v148;
  unint64_t j;
  uint64_t v150;
  const WGSL::Type *v151;
  __int16 v152;
  const WGSL::Type *v153;
  __n128 v154;
  WGSL *v155;
  WGSL *v156;
  BOOL v157;
  int v158;
  __n128 v159;
  int v160;
  void *v161;
  void *v162;
  int v163;
  unsigned __int8 v164;
  unsigned __int8 v165;
  unsigned __int8 v166;
  unsigned int v167;
  int v168;
  unsigned __int8 v169;
  unsigned int v170;
  int v171;
  BOOL v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  unsigned __int8 v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  uint64_t v180;
  unsigned char *v181;
  unsigned int v182;
  WTF *v183;
  WTF *v184;
  _DWORD *v185;
  uint64_t *v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  WTF::StringImpl **v191;
  uint64_t v192;
  int v193;
  unsigned int v194;
  uint64_t v195;
  unsigned int v196;
  const WTF::StringImpl *v197;
  int k;
  uint64_t v199;
  WTF *v200;
  __int16 v201;
  __n128 v202;
  WGSL *v203;
  WGSL *v204;
  BOOL v205;
  WTF *v206;
  int v207;
  WTF::StringImpl *v208;
  unsigned int v209;
  unsigned int v210;
  WTF::StringImpl **v211;
  int v212;
  uint64_t v213;
  WTF::StringImpl **v214;
  WTF *v215;
  char *v216;
  uint64_t v217;
  _DWORD *v218;
  unsigned int v219;
  uint64_t v220;
  int v221;
  int v222;
  uint64_t v223;
  unint64_t v224;
  unsigned int v225;
  uint64_t v226;
  const WGSL::Type *v227;
  const WGSL::Type *v228;
  int v229;
  unsigned int v230;
  const char *v231;
  uint64_t v232;
  uint64_t v233;
  _DWORD *v234;
  uint64_t v235;
  WTF *v236;
  char v237;
  unint64_t v238;
  uint64_t v239;
  char v240;
  WGSL::TypeStore *v241;
  const WGSL::Type *v242;
  const WGSL::Type *v243;
  WGSL *v244;
  int v245;
  int v246;
  WGSL *v247;
  WGSL *v248;
  WGSL *v249;
  int v250;
  WGSL *v251;
  int v252;
  int v253;
  int v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  unint64_t v261;
  char *v262;
  uint64_t v263;
  const WTF::StringImpl *v264;
  WTF *v265;
  void *v266;
  const WGSL::Type *v267;
  __n128 v268;
  WTF *v269;
  uint64_t v270;
  WTF *v271;
  _DWORD *v272;
  uint64_t v273;
  WTF *v274;
  const WGSL::Type *v275;
  int v276;
  uint64_t *v277;
  uint64_t v278;
  uint64_t v279;
  __int16 v280;
  const WGSL::Type *v281;
  WGSL *v282;
  WGSL *v283;
  BOOL v284;
  const WGSL::Type *v285;
  const WTF::StringImpl *v286;
  uint64_t v287;
  char *v288;
  _DWORD *v289;
  __n128 v290;
  unint64_t v291;
  char v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  _DWORD *v296;
  __n128 v297;
  uint64_t v298;
  uint64_t v299;
  _DWORD *v300;
  uint64_t v301;
  unsigned int v302;
  BOOL v303;
  WGSL *v305;
  int v306;
  int v307;
  unsigned int v308;
  WGSL *v310;
  WGSL *v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  WTF *v316;
  _DWORD *v317;
  uint64_t v318;
  uint64_t v319;
  _DWORD *v320;
  uint64_t v321;
  __n128 v322;
  WTF *result;
  const char *v324;
  char *v325;
  uint64_t v326;
  uint64_t *v327;
  uint64_t v328;
  WTF::String *v329;
  char *v330;
  WTF *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  _DWORD *v335;
  _DWORD *v336;
  uint64_t v337;
  _DWORD *v338;
  int v339;
  long long *v340;
  WTF *v341;
  WTF *v342;
  uint64_t v343;
  unint64_t v344;
  WGSL::Type *v345;
  WGSL::Type *v346;
  int v347;
  long long *v348;
  char v349;
  int v350;
  char v351;
  unint64_t v352;
  const WTF::StringImpl *v353;
  WTF *v355;
  uint64_t v356;
  char v357;
  _DWORD *v358;
  char v359;
  _DWORD *v360;
  WTF *v361;
  const WTF::StringImpl *v362;
  char v363;
  WTF *v364;
  uint64_t v365;
  WTF *v366[2];
  int v367;
  char *v368;
  long long v369;
  char v370;
  int v371;
  uint64_t v372;

  int v372 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)a2 + 8);
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
  v355 = 0;
  int v356 = 0;
  int v350 = v5;
  v347 = v6;
  if (v4 == 22)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 16))(v3) != 22)
    {
      __break(0xC471u);
      JUMPOUT(0x1826AAA7CLL);
    }
    goto LABEL_3;
  }
  if (v6 == 59)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v9 = (uint64_t)v368;
    goto LABEL_7;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 16))(v3) != 60)
  {
    __break(0xC471u);
    JUMPOUT(0x1826AAB24);
  }
  uint64_t v36 = *(unsigned int *)(v3 + 108);
  if (v36)
  {
    uint64_t v37 = *(uint64_t **)(v3 + 96);
    uint64_t v38 = 8 * v36;
    while (1)
    {
      uint64_t v41 = *v37;
      if ((*(unsigned int (**)(uint64_t))(*(void *)*v37 + 16))(*v37) == 22) {
        break;
      }
      WGSL::AST::Visitor::visit(this, v41);
      uint64_t v43 = (void *)*((void *)this + 11);
      if (*((_DWORD *)v43 + 12) == 13) {
        goto LABEL_60;
      }
LABEL_61:
      *(void *)(v41 + 24) = v43;
      *((void *)this + 11) = 0;
      int v368 = (char *)v43;
      int v44 = HIDWORD(v356);
      if (HIDWORD(v356) == v356)
      {
        uint64_t v39 = (void *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v355, HIDWORD(v356) + 1, (unint64_t)&v368);
        int v40 = HIDWORD(v356);
        *((void *)v355 + HIDWORD(v356)) = *v39;
        HIDWORD(v356) = v40 + 1;
        ++v37;
        v38 -= 8;
        if (!v38) {
          goto LABEL_3;
        }
      }
      else
      {
        *((void *)v355 + HIDWORD(v356)) = v43;
        HIDWORD(v356) = v44 + 1;
        ++v37;
        v38 -= 8;
        if (!v38) {
          goto LABEL_3;
        }
      }
    }
    uint64_t v43 = WGSL::TypeChecker::lookupType(this, (const WGSL::AST::Identifier *)(v41 + 64), v42);
    *((void *)this + 11) = v43;
    if (*((_DWORD *)v43 + 12) != 13) {
      goto LABEL_61;
    }
LABEL_60:
    int v368 = "' requires template arguments";
    *(void *)&int v369 = 30;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 0, (_OWORD *)(v41 + 8), (int8x16_t *)"type '", 7, (uint64_t)v43, &v368);
    uint64_t v43 = *(void **)(*((void *)this + 14) + 24);
    goto LABEL_61;
  }
LABEL_3:
  uint64_t v9 = *(void *)(v3 + 88);
  if (v9) {
    *(_DWORD *)v9 += 2;
  }
LABEL_7:
  unsigned int v10 = (void *)*((void *)this + 5);
  while (2)
  {
    uint64_t v11 = v10[1];
    if (!v11) {
      goto LABEL_9;
    }
    int v12 = *(_DWORD *)(v11 - 8);
    unsigned int v13 = *(_DWORD *)(v9 + 16);
    if (v13 < 0x100) {
      unsigned int v14 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v9);
    }
    else {
      unsigned int v14 = v13 >> 8;
    }
    for (i = 0; ; unsigned int v14 = i + v16)
    {
      uint64_t v16 = v14 & v12;
      uint64_t v17 = *(WTF **)(v11 + (v16 << 6));
      if (v17 == (WTF *)-1) {
        goto LABEL_15;
      }
      if (!v17) {
        break;
      }
      if (WTF::equal(v17, (const WTF::StringImpl *)v9, v8))
      {
        uint64_t v18 = v11 + (v16 << 6);
        uint64_t v19 = v10[1];
        if (v19)
        {
          uint64_t v20 = *(unsigned int *)(v19 - 4);
          goto LABEL_8;
        }
        goto LABEL_32;
      }
LABEL_15:
      ++i;
    }
    uint64_t v19 = v10[1];
    if (!v19) {
      goto LABEL_9;
    }
    uint64_t v20 = *(unsigned int *)(v19 - 4);
    uint64_t v18 = v19 + (v20 << 6);
LABEL_8:
    if (v18 == v19 + (v20 << 6))
    {
LABEL_9:
      unsigned int v10 = (void *)*v10;
      if (!v10)
      {
        unsigned int v21 = a2;
        goto LABEL_24;
      }
      continue;
    }
    break;
  }
LABEL_32:
  v345 = *(WGSL::Type **)(v18 + 16);
  *(void *)(v3 + 24) = v345;
  int v25 = *(unsigned __int8 *)(v18 + 8);
  if (v25 == 2)
  {
    if (*((_DWORD *)v345 + 12) != 6) {
      goto LABEL_679;
    }
    unsigned int v45 = *((unsigned __int8 *)this + 104);
    if (v45 <= 2)
    {
      if (v45 == 2) {
        v324 = "override";
      }
      else {
        v324 = "constant";
      }
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>((uint64_t)this, 1, (long long *)((char *)a2 + 8), "cannot call function from ", 27, (uint64_t)v324, 9, (uint64_t)" context", 9);
      goto LABEL_592;
    }
    unint64_t v46 = *((unsigned int *)a2 + 21);
    unint64_t v47 = *((unsigned int *)v345 + 3);
    BOOL v48 = __OFSUB__(v46, v47);
    if (v46 != v47)
    {
      if (v46 >= v47) {
        uint64_t v325 = "many";
      }
      else {
        uint64_t v325 = "few";
      }
      if (v46 < v47) {
        int v326 = 4;
      }
      else {
        int v326 = 5;
      }
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral&,WTF::ASCIILiteral,unsigned long &,WTF::ASCIILiteral,unsigned long &>(this, (WGSL::AST::CallExpression *)((char *)a2 + 8), "funtion call has too ", 22, v325, v326, " arguments: expected ", 22, v47, ", found ", 9, v46);
      goto LABEL_592;
    }
    if (!*((unsigned char *)this + 105) || !*((unsigned char *)v345 + 24)) {
      goto LABEL_198;
    }
    if (v9)
    {
      int v49 = *(_DWORD *)(v9 + 4);
      *(_DWORD *)v9 += 2;
      if (v49 < 0) {
        goto LABEL_629;
      }
      BOOL v48 = __OFADD__(v49, 26);
      int v50 = v49 + 26;
      if (v48) {
        goto LABEL_629;
      }
    }
    else
    {
      int v50 = 26;
      if (v48) {
        goto LABEL_629;
      }
    }
    if (!__OFADD__(v50, 35))
    {
      BOOL v51 = !v9 || (*(unsigned char *)(v9 + 16) & 4) != 0;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v50 + 35), v51, (int8x16_t *)"ignoring return value of function '", 0x23u, v9, (int8x16_t *)"' annotated with @must_use", 0x1Au, v366);
      int8x16_t v114 = v366[0];
      if (v366[0])
      {
        v366[0] = 0;
        int v368 = (char *)v114;
        int v369 = *(_OWORD *)((char *)a2 + 8);
        uint64_t v115 = *((unsigned int *)this + 33);
        if (v115 == *((_DWORD *)this + 32))
        {
          unint64_t v116 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 120, v115 + 1, (unint64_t)&v368);
          uint64_t v117 = *((void *)this + 15) + 24 * *((unsigned int *)this + 33);
          uint64_t v118 = *(void *)v116;
          *(void *)unint64_t v116 = 0;
          *(void *)uint64_t v117 = v118;
          *(_OWORD *)(v117 + 8) = *(_OWORD *)(v116 + 8);
          int8x16x2_t v119 = v368;
          ++*((_DWORD *)this + 33);
          int v368 = 0;
          if (v119)
          {
            if (*(_DWORD *)v119 == 2)
            {
              WTF::StringImpl::destroy();
              int8x16x2_t v120 = v366[0];
              v366[0] = 0;
              if (!v120) {
                goto LABEL_195;
              }
            }
            else
            {
              *(_DWORD *)v119 -= 2;
              int8x16x2_t v120 = v366[0];
              v366[0] = 0;
              if (!v120) {
                goto LABEL_195;
              }
            }
LABEL_175:
            if (*(_DWORD *)v120 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *(_DWORD *)v120 -= 2;
            }
LABEL_195:
            if (v9)
            {
              if (*(_DWORD *)v9 == 2)
              {
                WTF::StringImpl::destroy();
                if (!v46) {
                  goto LABEL_212;
                }
LABEL_199:
                for (j = 0; j != v46; ++j)
                {
                  if (j >= *((unsigned int *)a2 + 21))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1826AB050);
                  }
                  if (j >= *((unsigned int *)v345 + 3))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1826AB058);
                  }
                  __int16 v150 = *(void *)(*((void *)a2 + 9) + 8 * j);
                  int v151 = *(const WGSL::Type **)(*(void *)v345 + 8 * j);
                  unint64_t v152 = *((_WORD *)this + 52);
                  *((unsigned char *)this + 105) = 0;
                  WGSL::AST::Visitor::visit(this, v150);
                  uint64_t v155 = (WGSL *)*((void *)this + 11);
                  *(void *)(v150 + 24) = v155;
                  *((void *)this + 11) = 0;
                  *((_WORD *)this + 52) = v152;
                  if (v151 != v155)
                  {
                    uint64_t v156 = *(WGSL **)(*((void *)this + 14) + 24);
                    unsigned int v157 = v156 == v151 || v156 == v155;
                    if (!v157 && WGSL::conversionRank(v155, v151, v153) == -1)
                    {
                      int v368 = "', found '";
                      *(void *)&int v369 = 11;
                      LOBYTE(v366[0]) = 39;
                      WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)this, 1, (_OWORD *)(v150 + 8), (int8x16_t *)"type in function call does not match parameter type: expected '", 64, (uint64_t)v151, (long long *)&v368, (uint64_t)v155, (char *)v366);
                      goto LABEL_592;
                    }
                  }
                  *(void *)(v150 + 24) = v151;
                  if (*(unsigned char *)(v150 + 56)) {
                    WGSL::TypeChecker::convertValue((uint64_t)this, (long long *)(v150 + 8), v151, v150 + 32, v154);
                  }
                }
LABEL_212:
                *((void *)this + 11) = *((void *)v345 + 2);
                goto LABEL_592;
              }
              *(_DWORD *)v9 -= 2;
            }
LABEL_198:
            if (!v46) {
              goto LABEL_212;
            }
            goto LABEL_199;
          }
        }
        else
        {
          uint64_t v128 = *((void *)this + 15) + 24 * v115;
          *(void *)uint64_t v128 = v114;
          *(_OWORD *)(v128 + 8) = v369;
          ++*((_DWORD *)this + 33);
          int v368 = 0;
        }
        int8x16x2_t v120 = v366[0];
        v366[0] = 0;
        if (!v120) {
          goto LABEL_195;
        }
        goto LABEL_175;
      }
LABEL_630:
      __break(0xC471u);
      JUMPOUT(0x1826AAC48);
    }
LABEL_629:
    v366[0] = 0;
    goto LABEL_630;
  }
  if (v25 != 1)
  {
    LOBYTE(v368) = 39;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)this, 1, (long long *)(v3 + 8), "cannot call value of type '", 28, (uint64_t)v345, (char *)&v368);
    goto LABEL_592;
  }
  *((unsigned char *)a2 + 88) = 1;
  int v26 = *((_DWORD *)v345 + 12);
  if (v26 == 1)
  {
    int v121 = HIDWORD(v356);
    if (HIDWORD(v356) == v356)
    {
      int8x16x2_t v122 = v345;
      int8x16x2_t v123 = (void *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v355, HIDWORD(v356) + 1, (unint64_t)v345);
      int v121 = HIDWORD(v356);
      int8x16x2_t v124 = (void *)((char *)v355 + 8 * HIDWORD(v356));
    }
    else
    {
      int8x16x2_t v124 = (void *)((char *)v355 + 8 * HIDWORD(v356));
      int8x16x2_t v122 = v345;
      int8x16x2_t v123 = v345;
    }
    void *v124 = *v123;
    HIDWORD(v356) = v121 + 1;
    uint64_t v158 = *((unsigned __int8 *)v122 + 8);
    switch(v158)
    {
      case 4:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v125 = v368;
        if (!v9) {
          goto LABEL_232;
        }
        break;
      case 3:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v125 = v368;
        if (!v9) {
          goto LABEL_232;
        }
        break;
      case 2:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v125 = v368;
        if (!v9) {
          goto LABEL_232;
        }
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1826AB048);
    }
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy();
      unint64_t v126 = *(void *)(v18 + 16);
      int v127 = *(_DWORD *)(v126 + 48);
      if (v127 == 2) {
        goto LABEL_233;
      }
LABEL_270:
      uint64_t v9 = (uint64_t)v125;
      unsigned int v21 = a2;
      if (!v127) {
        goto LABEL_271;
      }
      goto LABEL_24;
    }
    *(_DWORD *)v9 -= 2;
LABEL_232:
    unint64_t v126 = *(void *)(v18 + 16);
    int v127 = *(_DWORD *)(v126 + 48);
    if (v127 == 2) {
      goto LABEL_233;
    }
    goto LABEL_270;
  }
  if (v26 == 4)
  {
    if ((WGSL::Type::isConstructible(v345) & 1) == 0)
    {
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 1, (long long *)((char *)a2 + 8), "struct is not constructible", 28);
      goto LABEL_592;
    }
    if (*((unsigned char *)this + 105))
    {
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 1, (long long *)((char *)a2 + 8), "value constructor evaluated but not used", 41);
      goto LABEL_592;
    }
    unint64_t v28 = *((unsigned int *)a2 + 21);
    uint64_t v29 = *((void *)v345 + 1);
    if (v29) {
      LODWORD(v29) = *(_DWORD *)(v29 - 12);
    }
    if (v28 && v28 != v29)
    {
      if (v28 >= v29) {
        int v30 = "many";
      }
      else {
        int v30 = "few";
      }
      if (v28 < v29) {
        uint64_t v31 = 4;
      }
      else {
        uint64_t v31 = 5;
      }
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral&,WTF::ASCIILiteral,unsigned int &,WTF::ASCIILiteral,unsigned long &>((uint64_t)this, (long long *)((char *)a2 + 8), "struct initializer has too ", 28, v30, v31, " inputs: expected ", 19, v29, ", found ", 9, v28);
      goto LABEL_592;
    }
    v366[0] = 0;
    if (!v28)
    {
      v267 = *(const WGSL::Type **)(v18 + 16);
      WGSL::zeroValue((WGSL *)&v368, v267);
      WGSL::TypeChecker::setConstantValue<WGSL::AST::CallExpression>((uint64_t)this, (uint64_t)a2, v267, (uint64_t)&v368, v268);
      if (DWORD2(v369) != -1) {
        ((void (*)(WTF **, char **))off_1ECABEC60[DWORD2(v369)])(&v361, &v368);
      }
      goto LABEL_468;
    }
    char v188 = 0;
    v349 = 1;
    int v352 = v28;
LABEL_294:
    if (v188 >= *((unsigned int *)a2 + 21))
    {
      __break(0xC471u);
      JUMPOUT(0x1826AB098);
    }
    if (v188 < *(unsigned int *)(*(void *)v345 + 84))
    {
      char v189 = *((void *)a2 + 9);
      uint64_t v190 = *(void *)(v189 + 8 * v188);
      char v191 = (WTF::StringImpl **)(*(void *)(*(void *)(*(void *)v345 + 72) + 8 * v188) + 48);
      uint64_t v192 = *((void *)v345 + 1);
      if (!v192)
      {
        int v197 = 0;
        goto LABEL_309;
      }
      int v193 = *(_DWORD *)(v192 - 8);
      int v194 = *((_DWORD *)*v191 + 4);
      int v195 = *(void *)(v189 + 8 * v188);
      if (v194 < 0x100) {
        v196 = WTF::StringImpl::hashSlowCase(*v191);
      }
      else {
        v196 = v194 >> 8;
      }
      for (k = 0; ; v196 = k + v199)
      {
        int v199 = v196 & v193;
        uint64_t v200 = *(WTF **)(v192 + 16 * v199);
        if (v200 != (WTF *)-1)
        {
          if (!v200)
          {
            int v197 = 0;
LABEL_308:
            uint64_t v190 = v195;
            unint64_t v28 = v352;
LABEL_309:
            int v201 = *((_WORD *)this + 52);
            *((unsigned char *)this + 105) = 0;
            WGSL::AST::Visitor::visit(this, v190);
            int v203 = (WGSL *)*((void *)this + 11);
            *(void *)(v190 + 24) = v203;
            *((void *)this + 11) = 0;
            *((_WORD *)this + 52) = v201;
            if (v197 == v203
              || ((uint64_t v204 = *(WGSL **)(*((void *)this + 14) + 24), v204 != v197) ? (v205 = v204 == v203) : (v205 = 1),
                  v205 || WGSL::conversionRank(v203, v197, v27) != -1))
            {
              *(void *)(v190 + 24) = v197;
              if (!*(unsigned char *)(v190 + 56)
                || !WGSL::TypeChecker::convertValue((uint64_t)this, (long long *)(v190 + 8), v197, v190 + 32, v202))
              {
                v349 = 0;
                goto LABEL_293;
              }
              if (!*(unsigned char *)(v190 + 56)) {
                goto LABEL_691;
              }
              int v368 = (char *)(v190 + 32);
              v206 = v366[0];
              if (v366[0]
                || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)v366, 8u, 0), (v206 = v366[0]) != 0))
              {
                int v207 = *((_DWORD *)v206 - 2);
                uint64_t v208 = *v191;
                int v209 = *((_DWORD *)*v191 + 4);
                v343 = v190;
                int v344 = v188;
                if (v209 >= 0x100) {
                  goto LABEL_321;
                }
LABEL_323:
                uint64_t v210 = WTF::StringImpl::hashSlowCase(v208);
              }
              else
              {
                int v207 = 0;
                uint64_t v208 = *v191;
                int v209 = *((_DWORD *)*v191 + 4);
                v343 = v190;
                int v344 = v188;
                if (v209 < 0x100) {
                  goto LABEL_323;
                }
LABEL_321:
                uint64_t v210 = v209 >> 8;
              }
              int v211 = 0;
              v212 = 1;
              while (2)
              {
                int v213 = v210 & v207;
                v214 = (WTF::StringImpl **)((char *)v206 + 32 * v213);
                int v215 = *v214;
                if (*v214 == (WTF::StringImpl *)-1)
                {
                  int v211 = (WTF::StringImpl **)((char *)v206 + 32 * v213);
LABEL_326:
                  uint64_t v210 = v212 + v213;
                  ++v212;
                  continue;
                }
                break;
              }
              if (!v215)
              {
                if (v211)
                {
                  *(_OWORD *)int v211 = 0u;
                  *((_OWORD *)v211 + 1) = 0u;
                  --*((_DWORD *)v366[0] - 4);
                  v214 = v211;
                }
                WTF::HashMapTranslator<WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String const&,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::inlineAdd<WTF::String const&,WGSL::ConstantValue&>(WTF::String const&,WGSL::ConstantValue&)::{lambda(void)#1}>((uint64_t)v214, (_DWORD **)v191, (uint64_t *)&v368);
                unint64_t v28 = v352;
                if (v366[0]) {
                  int v221 = *((_DWORD *)v366[0] - 3) + 1;
                }
                else {
                  int v221 = 1;
                }
                char v188 = v344;
                *((_DWORD *)v366[0] - 3) = v221;
                if (v366[0]) {
                  uint64_t v222 = *((_DWORD *)v366[0] - 3);
                }
                else {
                  uint64_t v222 = 0;
                }
                int8x16x2_t v223 = (*((_DWORD *)v366[0] - 4) + v222);
                int8x16x2_t v224 = *((unsigned int *)v366[0] - 1);
                if (v224 > 0x400)
                {
                  if (v224 > 2 * v223) {
                    goto LABEL_293;
                  }
                }
                else
                {
                  if (3 * v224 > 4 * v223) {
                    goto LABEL_293;
                  }
                  if (!v224)
                  {
                    int8x16x2_t v225 = 8;
LABEL_347:
                    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)v366, v225, v214);
                    goto LABEL_293;
                  }
                }
                int8x16x2_t v225 = v224 << (6 * *((_DWORD *)v366[0] - 3) >= (2 * v224));
                goto LABEL_347;
              }
              if (!WTF::equal(v215, *v191, v27)) {
                goto LABEL_326;
              }
              uint64_t v216 = (char *)v206 + 32 * v213;
              long long v219 = *((_DWORD *)v216 + 6);
              unsigned int v218 = v216 + 24;
              unsigned int v217 = v219;
              uint64_t v7 = v218 - 4;
              int v220 = *(unsigned int *)(v343 + 48);
              if (v219 == -1)
              {
                unint64_t v28 = v352;
                char v188 = v344;
                if (v220 != -1) {
                  goto LABEL_349;
                }
              }
              else
              {
                unint64_t v28 = v352;
                char v188 = v344;
                if (v220 == -1)
                {
                  ((void (*)(char **, _DWORD *))off_1ECABEC60[v217])(&v368, v7);
                  *unsigned int v218 = -1;
                  goto LABEL_293;
                }
LABEL_349:
                int v368 = (char *)(v218 - 4);
                ((void (*)(char **))off_1ECABEEE0[v220])(&v368);
              }
LABEL_293:
              if (++v188 != v28) {
                goto LABEL_294;
              }
              if (v349)
              {
                int v264 = *(const WTF::StringImpl **)(v18 + 16);
                int v265 = v366[0];
                v366[0] = 0;
                char v361 = 0;
                int v368 = (char *)v265;
                DWORD2(v369) = 10;
                WGSL::TypeChecker::setConstantValue<WGSL::AST::CallExpression>((uint64_t)this, (uint64_t)a2, v264, (uint64_t)&v368, v202);
                if (DWORD2(v369) != -1) {
                  ((void (*)(WTF **, char **))off_1ECABEC60[DWORD2(v369)])(&v364, &v368);
                }
                DWORD2(v369) = -1;
                WGSL::ConstantStruct::~ConstantStruct((WGSL::ConstantStruct *)&v361, v266);
              }
LABEL_468:
              *((void *)this + 11) = *(void *)(v18 + 16);
              int v269 = v366[0];
              if (!v366[0]) {
                goto LABEL_592;
              }
            }
            else
            {
              int v368 = "', found '";
              *(void *)&int v369 = 11;
              LOBYTE(v361) = 39;
              WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)this, 1, (_OWORD *)(v190 + 8), (int8x16_t *)"type in struct initializer does not match struct member type: expected '", 73, (uint64_t)v197, (long long *)&v368, (uint64_t)v203, (char *)&v361);
              int v269 = v366[0];
              if (!v366[0]) {
                goto LABEL_592;
              }
            }
            int v270 = *((unsigned int *)v269 - 1);
            if (v270)
            {
              v271 = v269;
              do
              {
                uint64_t v272 = *(_DWORD **)v271;
                if (*(void *)v271 != -1)
                {
                  int v273 = *((unsigned int *)v271 + 6);
                  if (v273 != -1)
                  {
                    ((void (*)(char **, char *))off_1ECABEC60[v273])(&v368, (char *)v271 + 8);
                    uint64_t v272 = *(_DWORD **)v271;
                  }
                  *((_DWORD *)v271 + 6) = -1;
                  *(void *)v271 = 0;
                  if (v272)
                  {
                    if (*v272 == 2) {
                      WTF::StringImpl::destroy();
                    }
                    else {
                      *v272 -= 2;
                    }
                  }
                }
                v271 = (WTF *)((char *)v271 + 32);
                --v270;
              }
              while (v270);
            }
            int v274 = (WTF *)((char *)v269 - 16);
            goto LABEL_533;
          }
          if (WTF::equal(v200, *v191, v27))
          {
            int v197 = *(const WTF::StringImpl **)(v192 + 16 * v199 + 8);
            goto LABEL_308;
          }
        }
        ++k;
      }
    }
    __break(0xC471u);
LABEL_691:
    __break(1u);
LABEL_692:
    __break(0xC471u);
    JUMPOUT(0x1826AB0A8);
  }
  uint64_t v125 = (char *)v9;
  unint64_t v126 = *(void *)(v18 + 16);
  int v127 = *(_DWORD *)(v126 + 48);
  if (v127 != 2) {
    goto LABEL_270;
  }
LABEL_233:
  uint64_t v160 = HIDWORD(v356);
  if (HIDWORD(v356) == v356)
  {
    int8x16x2_t v161 = (void *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v355, HIDWORD(v356) + 1, v126);
    uint64_t v160 = HIDWORD(v356);
    int8x16x2_t v162 = (void *)((char *)v355 + 8 * HIDWORD(v356));
  }
  else
  {
    int8x16x2_t v162 = (void *)((char *)v355 + 8 * HIDWORD(v356));
    int8x16x2_t v161 = (void *)v126;
  }
  int8x16x2_t v163 = 0;
  *int8x16x2_t v162 = *v161;
  HIDWORD(v356) = v160 + 1;
  int8x16x2_t v164 = *(unsigned char *)(v126 + 8);
  int8x16x2_t v165 = *(unsigned char *)(v126 + 9);
  int8x16x2_t v166 = v164;
  do
  {
    ++v163;
    int8x16x2_t v167 = v166;
    v166 /= 0xAu;
  }
  while (v167 > 9);
  int8x16x2_t v168 = 0;
  int8x16x2_t v169 = *(unsigned char *)(v126 + 9);
  do
  {
    ++v168;
    int16x8_t v170 = v169;
    v169 /= 0xAu;
  }
  while (v170 > 9);
  if (v168 < 0) {
    goto LABEL_688;
  }
  BOOL v48 = __OFADD__(v168, 1);
  uint64_t v171 = v168 + 1;
  v172 = v48;
  if (v163 < 0) {
    goto LABEL_688;
  }
  if (v172) {
    goto LABEL_688;
  }
  BOOL v48 = __OFADD__(v163, v171);
  unint64_t v173 = v163 + v171;
  if (v48) {
    goto LABEL_688;
  }
  uint8x16_t v174 = (v173 + 3);
  if (__OFADD__(v173, 3)) {
    goto LABEL_688;
  }
  if (v173 == -3)
  {
    uint64_t v9 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_262;
  }
  if ((v174 & 0x80000000) != 0 || (WTF::tryFastCompactMalloc((WTF *)(v174 + 20)), (uint64_t v9 = (uint64_t)v368) == 0))
  {
LABEL_688:
    __break(0xC471u);
    JUMPOUT(0x1826AB090);
  }
  uint16x8_t v175 = 0;
  *(_DWORD *)int v368 = 2;
  *(_DWORD *)(v9 + 4) = v174;
  *(_WORD *)(v9 + 20) = 24941;
  *(void *)(v9 + 8) = v9 + 20;
  *(_DWORD *)(v9 + 16) = 4;
  *(unsigned char *)(v9 + 22) = 116;
  uint16x8_t v176 = v164;
  do
  {
    uint64_t v177 = v176;
    *((unsigned char *)&v368 + v175-- + 3) = (v176 % 0xAu) | 0x30;
    v176 /= 0xAu;
  }
  while (v177 > 9);
  if (v175 + 5 <= 4) {
    memcpy((void *)(v9 + 23), (char *)&v368 + v175 + 4, -v175);
  }
  int v178 = 0;
  do
  {
    ++v178;
    unint64_t v179 = v164;
    v164 /= 0xAu;
  }
  while (v179 > 9);
  uint8x8_t v180 = 0;
  int v181 = (unsigned char *)(v9 + 23 + v178);
  *int v181 = 120;
  do
  {
    int v182 = v165;
    *((unsigned char *)&v368 + v180-- + 3) = (v165 % 0xAu) | 0x30;
    v165 /= 0xAu;
  }
  while (v182 > 9);
  if (v180 + 5 <= 4) {
    memcpy(v181 + 1, (char *)&v368 + v180 + 4, -v180);
  }
LABEL_262:
  if (v125)
  {
    if (*(_DWORD *)v125 != 2)
    {
      *(_DWORD *)v125 -= 2;
      goto LABEL_265;
    }
    WTF::StringImpl::destroy();
    unint64_t v126 = *(void *)(v18 + 16);
    unsigned int v21 = a2;
    if (!*(_DWORD *)(v126 + 48))
    {
LABEL_271:
      WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v368);
      WGSL::Type::dump((unsigned __int8 *)v126, (uint64_t)&v368);
      WTF::StringPrintStream::toString((uint64_t *)v366, (WTF::StringPrintStream *)&v368);
      WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v368);
      char v183 = v366[0];
      v366[0] = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
        {
          WTF::StringImpl::destroy();
          int v184 = v366[0];
          v366[0] = 0;
          if (v184)
          {
            if (*(_DWORD *)v184 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *(_DWORD *)v184 -= 2;
            }
          }
        }
        else
        {
          *(_DWORD *)v9 -= 2;
        }
      }
      uint64_t v9 = (uint64_t)v183;
    }
  }
  else
  {
LABEL_265:
    unint64_t v126 = *(void *)(v18 + 16);
    unsigned int v21 = a2;
    if (!*(_DWORD *)(v126 + 48)) {
      goto LABEL_271;
    }
  }
LABEL_24:
  if (v4 != 22 && v350 != 60)
  {
    if (v347 != 59)
    {
      __break(0xC471u);
      JUMPOUT(0x1826AAB04);
    }
    uint64_t v22 = *(void *)(v3 + 64);
    if (v22)
    {
      if (!*(void *)(v3 + 72))
      {
        WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 1, (long long *)((char *)v21 + 8), "cannot construct a runtime-sized array", 39);
        goto LABEL_592;
      }
      if ((*(unsigned int (**)(void))(*(void *)v22 + 16))(*(void *)(v3 + 64)) == 22)
      {
        uint64_t v24 = (WGSL::Type *)WGSL::TypeChecker::lookupType(this, (const WGSL::AST::Identifier *)(v22 + 64), v23);
        *((void *)this + 11) = v24;
        if (*((_DWORD *)v24 + 12) != 13) {
          goto LABEL_143;
        }
LABEL_142:
        int v368 = "' requires template arguments";
        *(void *)&int v369 = 30;
        WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 0, (_OWORD *)(v22 + 8), (int8x16_t *)"type '", 7, (uint64_t)v24, &v368);
        uint64_t v24 = *(WGSL::Type **)(*((void *)this + 14) + 24);
      }
      else
      {
        WGSL::AST::Visitor::visit(this, v22);
        uint64_t v24 = (WGSL::Type *)*((void *)this + 11);
        if (*((_DWORD *)v24 + 12) == 13) {
          goto LABEL_142;
        }
      }
LABEL_143:
      *(void *)(v22 + 24) = v24;
      *((void *)this + 11) = 0;
      uint64_t v94 = *(void *)(v3 + 72);
      __int16 v95 = *((_WORD *)this + 52);
      *((unsigned char *)this + 105) = 0;
      WGSL::AST::Visitor::visit(this, v94);
      uint8x16_t v97 = (WGSL *)*((void *)this + 11);
      *(void *)(v94 + 24) = v97;
      *((void *)this + 11) = 0;
      *((_WORD *)this + 52) = v95;
      uint64_t v98 = *((void *)this + 14);
      uint16x8_t v99 = *(const WGSL::Type **)(v98 + 24);
      if (v99 != v24 && v99 != v97)
      {
        unint64_t v100 = *(const WGSL::Type **)(v98 + 64);
        if (v100 != v97 && v99 != v100 && WGSL::conversionRank(v97, v100, v96) == -1)
        {
          v226 = *((void *)this + 14);
          uint64_t v227 = *(const WGSL::Type **)(v226 + 72);
          if (v227 != v97)
          {
            uint64_t v228 = *(const WGSL::Type **)(v226 + 24);
            if (v228 != v227 && v228 != v97 && WGSL::conversionRank(v97, v227, v101) == -1)
            {
              LOBYTE(v368) = 39;
              WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)this, 1, (long long *)(v3 + 8), "array count must be an i32 or u32 value, found '", 49, (uint64_t)v97, (char *)&v368);
              goto LABEL_592;
            }
          }
        }
        if ((WGSL::Type::isConstructible(v24) & 1) == 0)
        {
          int v368 = "' cannot be used as an element type of an array";
          *(void *)&int v369 = 48;
          WGSL::TypeChecker::typeError<char,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 1, (_OWORD *)(v3 + 8), 39, (uint64_t)v24, &v368);
          goto LABEL_592;
        }
        uint64_t v102 = *(void *)(v3 + 72);
        LOBYTE(v368) = 0;
        v370 = 0;
        if (*(unsigned char *)(v102 + 56))
        {
          DWORD2(v369) = -1;
          uint64_t v103 = *(unsigned int *)(v102 + 48);
          if (v103 == -1) {
            goto LABEL_680;
          }
          ((void (*)(WTF **, char **, uint64_t))off_1ECABEE88[v103])(v366, &v368, v102 + 32);
          DWORD2(v369) = v103;
          v370 = 1;
          switch(v103)
          {
            case 5:
              unint64_t v104 = (unint64_t)v368;
              break;
            case 4:
              unint64_t v104 = v368;
              break;
            case 3:
              unint64_t v104 = (int)v368;
              break;
            default:
              goto LABEL_681;
          }
          if ((uint64_t)v104 <= 0)
          {
            WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 1, (long long *)((char *)v21 + 8), "array count must be greater than 0", 35);
            LODWORD(v104) = 0;
            v229 = 0;
            if (!v370) {
              goto LABEL_504;
            }
            goto LABEL_502;
          }
          if (v104 >= 0x10000)
          {
            WGSL::TypeChecker::typeError<WTF::ASCIILiteral,long long &,WTF::ASCIILiteral>((uint64_t)this, (long long *)((char *)v21 + 8), "array count (", 14, v104, ") must be less than 65536", 26);
            LODWORD(v104) = 0;
            v229 = 0;
            if (!v370) {
              goto LABEL_504;
            }
            goto LABEL_502;
          }
          int v261 = *((unsigned int *)v21 + 21);
          if (v261 && v261 != v104)
          {
            if (v104 <= v261) {
              unsigned int v262 = "many";
            }
            else {
              unsigned int v262 = "few";
            }
            if (v104 > v261) {
              v263 = 4;
            }
            else {
              v263 = 5;
            }
            WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral&,WTF::ASCIILiteral,unsigned int &,WTF::ASCIILiteral,unsigned long &>((uint64_t)this, (long long *)((char *)v21 + 8), "array constructor has too ", 27, v262, v263, " elements: expected ", 21, v104, ", found ", 9, *((unsigned int *)v21 + 21));
            v229 = 0;
            if (!v370) {
              goto LABEL_504;
            }
            goto LABEL_502;
          }
          if (v261)
          {
            int v277 = (uint64_t *)*((void *)v21 + 9);
            v278 = 8 * v261;
            while (1)
            {
              uint64_t v279 = *v277;
              int v280 = *((_WORD *)this + 52);
              *((unsigned char *)this + 105) = 0;
              WGSL::AST::Visitor::visit(this, v279);
              v282 = (WGSL *)*((void *)this + 11);
              *(void *)(v279 + 24) = v282;
              *((void *)this + 11) = 0;
              *((_WORD *)this + 52) = v280;
              if (v24 != v282)
              {
                uint64_t v283 = *(WGSL **)(*((void *)this + 14) + 24);
                int v284 = v283 == v24 || v283 == v282;
                if (!v284 && WGSL::conversionRank(v282, v24, v281) == -1) {
                  break;
                }
              }
              *(void *)(v279 + 24) = v24;
              ++v277;
              v278 -= 8;
              if (!v278) {
                goto LABEL_501;
              }
            }
            v366[0] = (WTF *)"' cannot be used to construct an array of '";
            v366[1] = (WTF *)44;
            LOBYTE(v361) = 39;
            WGSL::TypeChecker::typeError<char,WGSL::Type const&,WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)this, (long long *)(v279 + 8), 39, (uint64_t)v282, (uint64_t)v366, (uint64_t)v24, (char *)&v361);
            v229 = 0;
            if (!v370) {
              goto LABEL_504;
            }
            goto LABEL_502;
          }
LABEL_501:
          v229 = 1;
          if (v370)
          {
LABEL_502:
            if (DWORD2(v369) != -1) {
              ((void (*)(WTF **, char **))off_1ECABEC60[DWORD2(v369)])(v366, &v368);
            }
          }
        }
        else
        {
          WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 1, (long long *)((char *)v21 + 8), "array must have constant size in order to be constructed", 57);
          LODWORD(v104) = 0;
          v229 = 0;
          if (v370) {
            goto LABEL_502;
          }
        }
LABEL_504:
        if (!v229) {
          goto LABEL_592;
        }
        uint64_t v52 = v104;
LABEL_506:
        *((unsigned char *)v21 + 88) = 1;
        int v285 = (const WGSL::Type *)WGSL::TypeStore::arrayType(*((void *)this + 14), (uint64_t)v24, v52, 1);
        unsigned int v286 = v285;
        *((void *)this + 11) = v285;
        v287 = *((unsigned int *)v21 + 21);
        if (!v287)
        {
          WGSL::zeroValue((WGSL *)&v368, v285);
          WGSL::TypeChecker::setConstantValue<WGSL::AST::CallExpression>((uint64_t)this, (uint64_t)v21, v286, (uint64_t)&v368, v297);
          if (DWORD2(v369) != -1) {
            ((void (*)(WTF **, char **))off_1ECABEC60[DWORD2(v369)])(v366, &v368);
          }
          goto LABEL_592;
        }
        v353 = v285;
        uint64_t v288 = (char *)WTF::fastMalloc((WTF *)(24 * v287 + 8));
        *(_DWORD *)uint64_t v288 = v287;
        int v289 = v288 + 24;
        bzero(v288 + 8, 24 * ((24 * v287 - 24) / 0x18uLL) + 24);
        unsigned int v291 = 0;
        v292 = 1;
        while (2)
        {
          if (v291 >= *((unsigned int *)a2 + 21))
          {
            __break(0xC471u);
            JUMPOUT(0x1826AB060);
          }
          uint64_t v293 = *(void *)(*((void *)a2 + 9) + 8 * v291);
          if (!*(unsigned char *)(v293 + 56)
            || !WGSL::TypeChecker::convertValue((uint64_t)this, (long long *)(v293 + 8), *(const WTF::StringImpl **)(v293 + 24), v293 + 32, v290))
          {
            v292 = 0;
            goto LABEL_509;
          }
          if (!*(unsigned char *)(v293 + 56)) {
            goto LABEL_691;
          }
          if (v291 >= *(unsigned int *)v288)
          {
            __break(0xC471u);
            JUMPOUT(0x1826AAA9CLL);
          }
          uint64_t v7 = v289 - 4;
          int v294 = *v289;
          int v295 = *(unsigned int *)(v293 + 48);
          if (v294 == -1)
          {
            if (v295 != -1) {
              goto LABEL_519;
            }
          }
          else
          {
            if (v295 == -1)
            {
              ((void (*)(char **, _DWORD *))off_1ECABEC60[v294])(&v368, v7);
              *int v289 = -1;
              goto LABEL_509;
            }
LABEL_519:
            int v368 = (char *)(v289 - 4);
            ((void (*)(char **))off_1ECABEEE0[v295])(&v368);
          }
LABEL_509:
          ++v291;
          v289 += 6;
          if (v287 == v291)
          {
            if (v292)
            {
              if (v287 >= 0x800)
              {
                WTF::String::number((WTF::String *)0x7FF);
                int v368 = " elements";
                *(void *)&int v369 = 10;
                WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)this, (long long *)((char *)a2 + 8), (int8x16_t *)"constant array cannot have more than ", 38, (uint64_t *)v366, (uint64_t)&v368);
                unsigned int v331 = v366[0];
                v366[0] = 0;
                if (v331)
                {
                  if (*(_DWORD *)v331 == 2) {
                    WTF::StringImpl::destroy();
                  }
                  else {
                    *(_DWORD *)v331 -= 2;
                  }
                }
              }
              v366[0] = 0;
              int v368 = v288;
              DWORD2(v369) = 7;
              WGSL::TypeChecker::setConstantValue<WGSL::AST::CallExpression>((uint64_t)this, (uint64_t)a2, v353, (uint64_t)&v368, v290);
              if (DWORD2(v369) != -1) {
                ((void (*)(WTF **, char **))off_1ECABEC60[DWORD2(v369)])(&v361, &v368);
              }
              DWORD2(v369) = -1;
              WGSL::ConstantArray::~ConstantArray(v366, v296);
              goto LABEL_592;
            }
            uint64_t v298 = *(unsigned int *)v288;
            if (v298)
            {
              int v299 = 24 * v298;
              int v300 = v288 + 24;
              do
              {
                uint64_t v7 = v300 - 4;
                unsigned int v301 = *v300;
                if (v301 != -1) {
                  ((void (*)(char **, _DWORD *))off_1ECABEC60[v301])(&v368, v7);
                }
                *int v300 = -1;
                v300 += 6;
                v299 -= 24;
              }
              while (v299);
            }
            int v274 = (WTF *)v288;
LABEL_533:
            WTF::fastFree(v274, v7);
            goto LABEL_592;
          }
          continue;
        }
      }
LABEL_419:
      *((void *)this + 11) = v99;
      goto LABEL_592;
    }
    uint64_t v52 = *((unsigned int *)v21 + 21);
    if (!v52)
    {
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 1, (long long *)((char *)v21 + 8), "cannot infer array element type from constructor", 49);
      goto LABEL_592;
    }
    uint64_t v24 = 0;
    uint64_t v53 = (uint64_t *)*((void *)v21 + 9);
    uint64_t v54 = 8 * v52;
    while (2)
    {
      uint64_t v55 = *v53;
      __int16 v56 = *((_WORD *)this + 52);
      *((unsigned char *)this + 105) = 0;
      WGSL::AST::Visitor::visit(this, v55);
      uint64_t v58 = *((void *)this + 11);
      *(void *)(v55 + 24) = v58;
      *((void *)this + 11) = 0;
      *((_WORD *)this + 52) = v56;
      if (v58 && *(_DWORD *)(v58 + 48) == 10) {
        uint64_t v58 = *(void *)(v58 + 8);
      }
      unsigned int v21 = a2;
      if (v24)
      {
        if (v24 == (WGSL::Type *)v58) {
          goto LABEL_81;
        }
        unint64_t v59 = *(WGSL::Type **)(*((void *)this + 14) + 24);
        BOOL v60 = v59 == v24 || v59 == (WGSL::Type *)v58;
        if (v60 || WGSL::conversionRank((WGSL *)v58, v24, v57) != -1) {
          goto LABEL_81;
        }
        uint64_t v62 = *(WGSL::Type **)(*((void *)this + 14) + 24);
        if (v62 != (WGSL::Type *)v58 && v62 != v24)
        {
          int v64 = WGSL::conversionRank(v24, (const WGSL::Type *)v58, v61);
          uint64_t v24 = (WGSL::Type *)v58;
          if (v64 == -1)
          {
            WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 1, (long long *)(v55 + 8), "cannot infer common array element type from constructor arguments", 66);
            goto LABEL_592;
          }
LABEL_81:
          ++v53;
          v54 -= 8;
          if (!v54)
          {
            uint64_t v105 = *((unsigned int *)a2 + 21);
            if (!v105) {
              goto LABEL_506;
            }
            uint64_t v106 = *((void *)a2 + 9);
            uint64_t v107 = (v105 - 1) & 0x1FFFFFFFFFFFFFFFLL;
            if (v107)
            {
              uint64_t v108 = v107 + 1;
              uint64_t v109 = (v107 + 1) & 0x3FFFFFFFFFFFFFFELL;
              unint64_t v110 = (uint64_t *)(v106 + 8 * v109);
              uint64_t v111 = (uint64_t *)(v106 + 8);
              uint64_t v112 = v109;
              do
              {
                uint64_t v113 = *v111;
                *(void *)(*(v111 - 1) + 24) = v24;
                *(void *)(v113 + 24) = v24;
                v111 += 2;
                v112 -= 2;
              }
              while (v112);
              if (v108 == v109) {
                goto LABEL_506;
              }
            }
            else
            {
              unint64_t v110 = (uint64_t *)*((void *)a2 + 9);
            }
            int v186 = (uint64_t *)(v106 + 8 * v105);
            do
            {
              long long v187 = *v110++;
              *(void *)(v187 + 24) = v24;
            }
            while (v110 != v186);
            goto LABEL_506;
          }
          continue;
        }
      }
      else if ((WGSL::Type::isConstructible((WGSL::Type *)v58) & 1) == 0)
      {
        int v368 = "' cannot be used as an element type of an array";
        *(void *)&int v369 = 48;
        WGSL::TypeChecker::typeError<char,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 1, (_OWORD *)(v3 + 8), 39, v58, &v368);
        goto LABEL_592;
      }
      break;
    }
    uint64_t v24 = (WGSL::Type *)v58;
    goto LABEL_81;
  }
  int v348 = (long long *)((char *)v21 + 8);
  uint64_t v32 = *((void *)this + 19);
  if (!v32) {
    goto LABEL_382;
  }
  unsigned int v33 = *(_DWORD *)(v32 - 8);
  unsigned int v34 = *(_DWORD *)(v9 + 16);
  int v35 = v34 < 0x100 ? WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v9) : v34 >> 8;
  for (m = 0; ; int v35 = m + v66)
  {
    int v66 = v35 & v33;
    uint64_t v67 = v32 + 48 * (v35 & v33);
    __int16 v68 = *(WTF **)v67;
    if (*(void *)v67 != -1)
    {
      if (!v68) {
        goto LABEL_382;
      }
      if (WTF::equal(v68, (const WTF::StringImpl *)v9, v8)) {
        break;
      }
    }
    ++m;
  }
  uint64_t v69 = *((void *)this + 19);
  if (v69)
  {
    if (v67 == v69 + 48 * *(unsigned int *)(v69 - 4))
    {
LABEL_382:
      if (MEMORY[0x18530AEB0](v9, "bitcast", 7))
      {
        uint64_t v238 = *((unsigned int *)v21 + 21);
        if (v238 != 1)
        {
          WGSL::TypeChecker::typeError<WTF::ASCIILiteral,unsigned long>((uint64_t)this, v348, "bitcast expects a single argument, found ", 42, v238);
          goto LABEL_592;
        }
        if (HIDWORD(v356) != 1)
        {
          WGSL::TypeChecker::typeError<WTF::ASCIILiteral,unsigned long>((uint64_t)this, v348, "bitcast expects a single template argument, found ", 51, HIDWORD(v356));
          goto LABEL_592;
        }
        if (*((unsigned char *)this + 105))
        {
          WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 1, v348, "cannot discard the result of bitcast", 37);
          goto LABEL_592;
        }
        int v239 = **((void **)v21 + 9);
        uint64_t v240 = *((unsigned char *)this + 104);
        *((unsigned char *)this + 105) = 0;
        WGSL::AST::Visitor::visit(this, v239);
        uint64_t v242 = (const WGSL::Type *)*((void *)this + 11);
        *(void *)(v239 + 24) = v242;
        *((void *)this + 11) = 0;
        *((unsigned char *)this + 104) = v240;
        *((unsigned char *)this + 105) = 0;
        if (!HIDWORD(v356))
        {
          __break(0xC471u);
          JUMPOUT(0x1826AB0B0);
        }
        uint64_t v243 = (const WGSL::Type *)*((void *)this + 14);
        uint16x8_t v99 = (const WGSL::Type *)*((void *)v243 + 3);
        if (v99 == v242) {
          goto LABEL_419;
        }
        v244 = *(WGSL **)v355;
        if (v99 == *(const WGSL::Type **)v355) {
          goto LABEL_419;
        }
        if (v242 && *((_DWORD *)v242 + 12) == 10) {
          uint64_t v242 = (const WGSL::Type *)*((void *)v242 + 1);
        }
        if (v244 && *((_DWORD *)v244 + 12) == 1)
        {
          if (v242 && *((_DWORD *)v242 + 12) == 1)
          {
            uint64_t v245 = *((unsigned __int8 *)v242 + 8);
            uint64_t v246 = *((unsigned __int8 *)v244 + 8);
            if (v245 == v246)
            {
              int v247 = *(WGSL **)v242;
              uint64_t v248 = *(WGSL **)v244;
              if (WGSL::satisfies(*(WGSL **)v242, (const WGSL::Type *)0x2C))
              {
                if (WGSL::satisfies(v248, (const WGSL::Type *)0x2C)) {
                  goto LABEL_572;
                }
              }
              v249 = (WGSL *)*((void *)v243 + 11);
              if (v249 == v247 && v249 == v248) {
                goto LABEL_572;
              }
            }
            if (v245 == 2)
            {
              uint64_t v250 = WGSL::satisfies(*(WGSL **)v242, (const WGSL::Type *)0x2C);
              if (v246 == 4)
              {
                if (v250)
                {
                  int v251 = *(WGSL **)v244;
                  goto LABEL_554;
                }
              }
            }
            if (v246 == 2)
            {
              v307 = WGSL::satisfies(*(WGSL **)v244, (const WGSL::Type *)0x2C);
              if (v245 == 4)
              {
                if (v307)
                {
                  int v251 = *(WGSL **)v242;
LABEL_554:
                  if (v251 == *((WGSL **)v243 + 11))
                  {
LABEL_572:
                    *(void *)(*((void *)a2 + 8) + 24) = v244;
                    if (*(unsigned char *)(v239 + 56))
                    {
                      LOBYTE(v366[0]) = 0;
                      v367 = -1;
                      int v314 = *(unsigned int *)(v239 + 48);
                      if (v314 != -1)
                      {
                        ((void (*)(char **, WTF **, uint64_t))off_1ECABEE88[v314])(&v368, v366, v239 + 32);
                        v367 = v314;
                      }
                      int v315 = (char *)WTF::fastMalloc((WTF *)0x20);
                      unsigned int v316 = (WTF *)v315;
                      *((void *)v315 + 1) = 0;
                      *(_DWORD *)int v315 = 1;
                      *((void *)v315 + 2) = 0;
                      *((void *)v315 + 3) = 0;
                      char v361 = (WTF *)v315;
                      if (v367 == -1)
                      {
                        *((_DWORD *)v315 + 6) = -1;
                      }
                      else
                      {
                        int v368 = v315 + 8;
                        ((void (*)(char **))off_1ECABEEE0[v367])(&v368);
                      }
                      WGSL::constantBitcast(&v368, (uint64_t)v244, &v361);
                      v318 = *(unsigned int *)v316;
                      if (v318)
                      {
                        uint64_t v319 = 24 * v318;
                        int v320 = (_DWORD *)((char *)v316 + 24);
                        do
                        {
                          uint64_t v317 = v320 - 4;
                          int v321 = *v320;
                          if (v321 != -1) {
                            ((void (*)(WTF **, _DWORD *))off_1ECABEC60[v321])(&v364, v317);
                          }
                          *int v320 = -1;
                          v320 += 6;
                          v319 -= 24;
                        }
                        while (v319);
                      }
                      WTF::fastFree(v316, v317);
                      if (v367 != -1) {
                        ((void (*)(WTF **, WTF **))off_1ECABEC60[v367])(&v364, v366);
                      }
                      if (v371)
                      {
                        if (v371 != 1) {
                          goto LABEL_679;
                        }
                        WGSL::TypeChecker::typeError<WTF::String &>((unint64_t)this, v348, v369);
                      }
                      else
                      {
                        WGSL::TypeChecker::setConstantValue<WGSL::AST::CallExpression>((uint64_t)this, (uint64_t)a2, v244, (uint64_t)&v369, v322);
                      }
                      if (v371 != -1) {
                        ((void (*)(WTF **, long long *))off_1ECABED68[v371])(v366, &v369);
                      }
                    }
                    *((void *)this + 11) = v244;
                    goto LABEL_592;
                  }
                }
              }
            }
          }
          else if (*((unsigned char *)v244 + 8) == 2 {
                 && *((void *)v243 + 11) == *(void *)v244
          }
                 && (WGSL::satisfies(v242, (const WGSL::Type *)0x2C) & 1) != 0)
          {
            goto LABEL_572;
          }
        }
        else
        {
          if (v242)
          {
            if (*((_DWORD *)v242 + 12) == 1)
            {
              if (*((unsigned char *)v242 + 8) == 2
                && *((void *)v243 + 11) == *(void *)v242
                && WGSL::satisfies(*(WGSL **)v355, (const WGSL::Type *)0x2C))
              {
                goto LABEL_572;
              }
              goto LABEL_568;
            }
            unsigned int v275 = v242;
            while (1)
            {
              uint64_t v276 = *((_DWORD *)v275 + 12);
              if (v276 != 10) {
                break;
              }
              unsigned int v275 = (const WGSL::Type *)*((void *)v275 + 1);
              if (!v275) {
                goto LABEL_564;
              }
            }
            if (!v276)
            {
              v302 = *(unsigned __int8 *)v275;
              uint64_t v303 = v302 < 4 || v302 == 5;
              if (v303 && v244 != 0)
              {
                int v305 = *(WGSL **)v355;
                while (1)
                {
                  uint64_t v306 = *((_DWORD *)v305 + 12);
                  if (v306 != 10) {
                    break;
                  }
                  int v305 = (WGSL *)*((void *)v305 + 1);
                  if (!v305) {
                    goto LABEL_564;
                  }
                }
                if (!v306)
                {
                  uint64_t v308 = *(unsigned __int8 *)v305;
                  if (v308 < 4 || v308 == 5) {
                    goto LABEL_572;
                  }
                }
              }
            }
          }
LABEL_564:
          int v310 = (WGSL *)*((void *)v243 + 11);
          if (v310 == v242 && v310 == v244) {
            goto LABEL_572;
          }
        }
LABEL_568:
        v312 = WGSL::concretize(v242, v243, v241);
        if (v312) {
          uint64_t v313 = (uint64_t)v312;
        }
        else {
          uint64_t v313 = (uint64_t)v242;
        }
        int v368 = "' to '";
        *(void *)&int v369 = 7;
        LOBYTE(v366[0]) = 39;
        WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)this, 1, v348, (int8x16_t *)"cannot bitcast from '", 22, v313, (long long *)&v368, (uint64_t)v244, (char *)v366);
        goto LABEL_592;
      }
      if (v9)
      {
        int v252 = *(_DWORD *)(v9 + 4);
        *(_DWORD *)v9 += 2;
        if ((v252 & 0x80000000) == 0)
        {
          BOOL v48 = __OFADD__(v252, 1);
          unsigned int v253 = v252 + 1;
          if (!v48) {
            goto LABEL_408;
          }
        }
        goto LABEL_624;
      }
      unsigned int v253 = 1;
      if (v237) {
        goto LABEL_624;
      }
LABEL_408:
      if (__OFADD__(v253, 24)
        || (!v9 || (*(unsigned char *)(v9 + 16) & 4) != 0 ? (uint64_t v254 = 1) : (uint64_t v254 = 0),
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)v366, v253 + 24, v254, (int8x16_t *)"unresolved call target '", 0x18u, v9, 39), !v366[0]))
      {
LABEL_624:
        __break(0xC471u);
        JUMPOUT(0x1826AAC08);
      }
      int v368 = (char *)v366[0];
      int v369 = *(_OWORD *)(v3 + 8);
      v255 = *((unsigned int *)this + 33);
      if (v255 == *((_DWORD *)this + 32))
      {
        int v256 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 120, v255 + 1, (unint64_t)&v368);
        int v257 = *((void *)this + 15) + 24 * *((unsigned int *)this + 33);
        int v258 = *(void *)v256;
        *(void *)int v256 = 0;
        *(void *)int v257 = v258;
        *(_OWORD *)(v257 + 8) = *(_OWORD *)(v256 + 8);
        v259 = v368;
        ++*((_DWORD *)this + 33);
        int v368 = 0;
        if (v259)
        {
          if (*(_DWORD *)v259 == 2)
          {
            WTF::StringImpl::destroy();
            if (!v9) {
              goto LABEL_426;
            }
          }
          else
          {
            *(_DWORD *)v259 -= 2;
            if (!v9) {
              goto LABEL_426;
            }
          }
          goto LABEL_423;
        }
      }
      else
      {
        int v260 = *((void *)this + 15) + 24 * v255;
        *(WTF **)int v260 = v366[0];
        *(_OWORD *)(v260 + 8) = v369;
        ++*((_DWORD *)this + 33);
        int v368 = 0;
      }
      if (!v9)
      {
LABEL_426:
        *((void *)this + 11) = *(void *)(*((void *)this + 14) + 24);
        goto LABEL_592;
      }
LABEL_423:
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
      goto LABEL_426;
    }
  }
  int v364 = 0;
  int v365 = 0;
  uint64_t v70 = *((unsigned int *)v21 + 21);
  if (v70)
  {
    if (v70 >> 29) {
      goto LABEL_692;
    }
    uint64_t v71 = (WTF *)WTF::fastMalloc((WTF *)(8 * v70));
    LODWORD(v365) = v70;
    int v364 = v71;
    if (*((_DWORD *)v21 + 21))
    {
      unint64_t v72 = 0;
      do
      {
        while (1)
        {
          int v368 = 0;
          uint64_t v75 = *(void *)(*((void *)v21 + 9) + 8 * v72);
          __int16 v76 = *((_WORD *)this + 52);
          *((unsigned char *)this + 105) = 0;
          WGSL::AST::Visitor::visit(this, v75);
          int8x16_t v77 = (const WTF::StringImpl *)*((void *)this + 11);
          *(void *)(v75 + 24) = v77;
          *((void *)this + 11) = 0;
          *((_WORD *)this + 52) = v76;
          int v368 = (char *)v77;
          if (*(const WTF::StringImpl **)(*((void *)this + 14) + 24) == v77)
          {
            *((void *)this + 11) = v77;
            goto LABEL_376;
          }
          int v78 = HIDWORD(v365);
          if (HIDWORD(v365) != v365) {
            break;
          }
          unint64_t v73 = (void *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v364, HIDWORD(v365) + 1, (unint64_t)&v368);
          int v74 = HIDWORD(v365);
          *((void *)v364 + HIDWORD(v365)) = *v73;
          HIDWORD(v365) = v74 + 1;
          if (++v72 >= *((unsigned int *)v21 + 21)) {
            goto LABEL_116;
          }
        }
        *((void *)v364 + HIDWORD(v365)) = v77;
        HIDWORD(v365) = v78 + 1;
        ++v72;
      }
      while (v72 < *((unsigned int *)v21 + 21));
    }
  }
LABEL_116:
  WGSL::resolveOverloads(*((void *)this + 14), (uint64_t *)(v67 + 32), (uint64_t)&v364, (uint64_t)&v355, (uint64_t)&v361);
  if (!v363)
  {
    int8x16_t v131 = WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v368);
    unint64_t v132 = HIDWORD(v365);
    if (HIDWORD(v365))
    {
      uint8x8_t v133 = v364;
      unsigned int v134 = *(unsigned __int8 **)v364;
      uint64_t v135 = (*((uint64_t (**)(uint64_t))v368 + 4))(v131);
      WGSL::Type::dump(v134, v135);
      (*((void (**)(char **))v368 + 5))(&v368);
      if (v132 != 1)
      {
        unint64_t v136 = (unsigned __int8 **)((char *)v133 + 8);
        uint8x16_t v137 = 8 * v132 - 8;
        do
        {
          uint16x8_t v138 = *v136++;
          (*((void (**)(char **))v368 + 4))(&v368);
          WTF::printInternal();
          (*((void (**)(char **))v368 + 5))(&v368);
          uint16x8_t v139 = (*((uint64_t (**)(char **))v368 + 4))(&v368);
          WGSL::Type::dump(v138, v139);
          (*((void (**)(char **))v368 + 5))(&v368);
          v137 -= 8;
        }
        while (v137);
      }
    }
    WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)v366);
    if (HIDWORD(v356))
    {
      (*((void (**)(WTF **))v366[0] + 4))(v366);
      WTF::printInternal();
      (*((void (**)(WTF **))v366[0] + 5))(v366);
      BOOL v140 = HIDWORD(v356);
      if (HIDWORD(v356))
      {
        uint64_t v141 = v355;
        unint64_t v142 = *(WGSL **)v355;
        uint8x8_t v143 = (*((uint64_t (**)(WTF **))v366[0] + 4))(v366);
        WGSL::Type::dump((unsigned __int8 *)v142, v143);
        (*((void (**)(WTF **))v366[0] + 5))(v366);
        if (v140 != 1)
        {
          unsigned int v144 = (unsigned __int8 **)((char *)v141 + 8);
          __int16 v145 = 8 * v140 - 8;
          do
          {
            unint64_t v146 = *v144++;
            (*((void (**)(WTF **))v366[0] + 4))(v366);
            WTF::printInternal();
            (*((void (**)(WTF **))v366[0] + 5))(v366);
            uint8x16_t v147 = (*((uint64_t (**)(WTF **))v366[0] + 4))(v366);
            WGSL::Type::dump(v146, v147);
            (*((void (**)(WTF **))v366[0] + 5))(v366);
            v145 -= 8;
          }
          while (v145);
        }
      }
      (*((void (**)(WTF **))v366[0] + 4))(v366);
      WTF::printInternal();
      (*((void (**)(WTF **))v366[0] + 5))(v366);
    }
    WTF::StringPrintStream::toString((uint64_t *)&v360, (WTF::StringPrintStream *)v366);
    v359 = 40;
    WTF::StringPrintStream::toString((uint64_t *)&v358, (WTF::StringPrintStream *)&v368);
    v357 = 41;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral&,char,WTF::String const&,WTF::String,char,WTF::String,char>((uint64_t)this, v348, (int8x16_t *)"no matching overload for ", 26, (int8x16_t *)"initializer", 12, 32, v9, (uint64_t *)&v360, &v359, (uint64_t *)&v358, &v357);
    uint16x8_t v148 = v358;
    int v358 = 0;
    if (v148)
    {
      if (*v148 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v148 -= 2;
      }
    }
    unsigned int v185 = v360;
    int v360 = 0;
    if (v185)
    {
      if (*v185 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v185 -= 2;
      }
    }
    int8x16_t v77 = *(const WTF::StringImpl **)(*((void *)this + 14) + 24);
    WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)v366);
    WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v368);
    goto LABEL_376;
  }
  if (*((unsigned char *)this + 105) && *(unsigned char *)(v67 + 9))
  {
    LOBYTE(v368) = 39;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::String const&,char>((uint64_t)this, v348, (int8x16_t *)"ignoring return value of builtin '", 35, v9, (char *)&v368);
  }
  uint64_t v79 = *((unsigned int *)v21 + 21);
  if (v79)
  {
    unint64_t v80 = (uint64_t *)((char *)v361 + 8);
    uint64_t v81 = *(unsigned int *)v361;
    uint64_t v82 = (uint64_t *)*((void *)v21 + 9);
    while (v81)
    {
      uint64_t v84 = *v80++;
      uint64_t v83 = v84;
      uint64_t v85 = *v82++;
      *(void *)(v85 + 24) = v83;
      --v81;
      if (!--v79) {
        goto LABEL_124;
      }
    }
    goto LABEL_695;
  }
LABEL_124:
  int8x16_t v77 = v362;
  *((void *)this + 11) = v362;
  if ((*(unsigned int (**)(WGSL::AST::CallExpression *))(*(void *)v21 + 16))(v21) == 20)
  {
    *((unsigned char *)v21 + 88) = *(unsigned char *)(v67 + 8) == 1;
    *((unsigned char *)v21 + 89) = *(unsigned char *)(v67 + 24);
  }
  uint64_t v86 = *((unsigned int *)v21 + 21);
  if (!v86)
  {
    v366[0] = 0;
    uint16x8_t v129 = *(void (**)(char **__return_ptr, const WTF::StringImpl *, WTF **))(v67 + 16);
    unsigned int v21 = a2;
    if (v129) {
      goto LABEL_223;
    }
    int8x16_t v130 = 0;
    goto LABEL_362;
  }
  uint64_t v87 = WTF::fastMalloc((WTF *)(24 * v86 + 8));
  *(_DWORD *)uint64_t v87 = v86;
  bzero((void *)(v87 + 8), 24 * ((24 * v86 - 24) / 0x18uLL) + 24);
  unint64_t v89 = 0;
  v366[0] = (WTF *)v87;
  int v346 = (WGSL::Type *)v87;
  uint64_t v90 = (_DWORD *)(v87 + 24);
  v351 = 1;
  do
  {
    if (v89 >= *((unsigned int *)a2 + 21))
    {
      __break(0xC471u);
      JUMPOUT(0x1826AB088);
    }
    uint64_t v91 = *(void *)(*((void *)a2 + 9) + 8 * v89);
    if (!*(unsigned char *)(v91 + 56)
      || !WGSL::TypeChecker::convertValue((uint64_t)this, (long long *)(v91 + 8), *(const WTF::StringImpl **)(v91 + 24), v91 + 32, v88))
    {
      v351 = 0;
      goto LABEL_129;
    }
    if (!*(unsigned char *)(v91 + 56)) {
      goto LABEL_691;
    }
    if (v89 >= *(unsigned int *)v346)
    {
      __break(0xC471u);
      JUMPOUT(0x1826AAABCLL);
    }
    uint64_t v7 = v90 - 4;
    uint64_t v92 = *v90;
    uint64_t v93 = *(unsigned int *)(v91 + 48);
    if (v92 == -1)
    {
      if (v93 == -1) {
        goto LABEL_129;
      }
    }
    else if (v93 == -1)
    {
      ((void (*)(char **, _DWORD *))off_1ECABEC60[v92])(&v368, v7);
      _DWORD *v90 = -1;
      goto LABEL_129;
    }
    int v368 = (char *)(v90 - 4);
    ((void (*)(char **))off_1ECABEEE0[v93])(&v368);
LABEL_129:
    ++v89;
    v90 += 6;
  }
  while (v86 != v89);
  uint16x8_t v129 = *(void (**)(char **__return_ptr, const WTF::StringImpl *, WTF **))(v67 + 16);
  if (!v129)
  {
    unsigned int v21 = a2;
    int8x16_t v130 = v346;
LABEL_362:
    uint64_t v230 = *((unsigned __int8 *)this + 104);
    if (v230 <= 2)
    {
      if (v230 == 2) {
        uint64_t v231 = "override";
      }
      else {
        uint64_t v231 = "constant";
      }
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>((uint64_t)this, 0, v348, "cannot call function from ", 27, (uint64_t)v231, 9, (uint64_t)" context", 9);
      int8x16_t v77 = *(const WTF::StringImpl **)(*((void *)this + 14) + 24);
    }
    goto LABEL_367;
  }
  unsigned int v21 = a2;
  int8x16_t v130 = v346;
  if ((v351 & 1) == 0)
  {
    v366[0] = 0;
    goto LABEL_368;
  }
LABEL_223:
  v129(&v368, v77, v366);
  if (v371)
  {
    if (v371 == 1)
    {
      WGSL::TypeChecker::typeError<WTF::String &>((unint64_t)this, v348, v369);
      goto LABEL_351;
    }
LABEL_679:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_680:
    v370 = 1;
LABEL_681:
    __break(0xC471u);
    JUMPOUT(0x1826AB028);
  }
  WGSL::TypeChecker::setConstantValue<WGSL::AST::CallExpression>((uint64_t)this, (uint64_t)v21, v77, (uint64_t)&v369, v159);
LABEL_351:
  if (v371 != -1) {
    ((void (*)(_DWORD **, long long *))off_1ECABED68[v371])(&v360, &v369);
  }
  int8x16_t v130 = v366[0];
LABEL_367:
  v366[0] = 0;
  if (v130)
  {
LABEL_368:
    int v232 = *(unsigned int *)v130;
    if (v232)
    {
      uint64_t v233 = 24 * v232;
      v234 = (_DWORD *)((char *)v130 + 24);
      do
      {
        uint64_t v7 = v234 - 4;
        uint64_t v235 = *v234;
        if (v235 != -1) {
          ((void (*)(char **, _DWORD *))off_1ECABEC60[v235])(&v368, v7);
        }
        _DWORD *v234 = -1;
        v234 += 6;
        v233 -= 24;
      }
      while (v233);
    }
    WTF::fastFree(v130, v7);
    if (v363) {
      goto LABEL_374;
    }
  }
  else
  {
LABEL_374:
    if (v361) {
      WTF::fastFree(v361, v7);
    }
  }
LABEL_376:
  uint64_t v236 = v364;
  if (v364)
  {
    int v364 = 0;
    LODWORD(v365) = 0;
    WTF::fastFree(v236, v7);
  }
  if (!v77) {
    goto LABEL_382;
  }
  *(void *)(v3 + 24) = v77;
  if (*(const WTF::StringImpl **)(*((void *)this + 14) + 24) == v77) {
    goto LABEL_592;
  }
  if (MEMORY[0x18530AEB0](v9, "workgroupUniformLoad", 20))
  {
    *(unsigned char *)(*((void *)this + 10) + 13) = 1;
    goto LABEL_592;
  }
  if (MEMORY[0x18530AEB0](v9, "frexp", 5))
  {
    *(unsigned char *)(*((void *)this + 10) + 16) = 1;
    goto LABEL_592;
  }
  if (MEMORY[0x18530AEB0](v9, "modf", 4))
  {
    *(unsigned char *)(*((void *)this + 10) + 17) = 1;
    goto LABEL_592;
  }
  if (MEMORY[0x18530AEB0](v9, "atomicCompareExchangeWeak", 25))
  {
    *(unsigned char *)(*((void *)this + 10) + 18) = 1;
    goto LABEL_592;
  }
  if (MEMORY[0x18530AEB0](v9, "dot", 3))
  {
    *(unsigned char *)(*((void *)this + 10) + 20) = 1;
    goto LABEL_592;
  }
  if (MEMORY[0x18530AEB0](v9, "firstLeadingBit", 15))
  {
    *(unsigned char *)(*((void *)this + 10) + 21) = 1;
    goto LABEL_592;
  }
  if (MEMORY[0x18530AEB0](v9, "firstTrailingBit", 16))
  {
    *(unsigned char *)(*((void *)this + 10) + 22) = 1;
    goto LABEL_592;
  }
  if (MEMORY[0x18530AEB0](v9, "sign", 4))
  {
    *(unsigned char *)(*((void *)this + 10) + 23) = 1;
    goto LABEL_592;
  }
  if (MEMORY[0x18530AEB0](v9, "dot4I8Packed", 12))
  {
    *(unsigned char *)(*((void *)this + 10) + 27) = 1;
    goto LABEL_592;
  }
  if (MEMORY[0x18530AEB0](v9, "dot4U8Packed", 12))
  {
    *(unsigned char *)(*((void *)this + 10) + 28) = 1;
    goto LABEL_592;
  }
  if (MEMORY[0x18530AEB0](v9, "extractBits", 11))
  {
    *(unsigned char *)(*((void *)this + 10) + 29) = 1;
    goto LABEL_592;
  }
  if ((MEMORY[0x18530AEB0](v9, "textureGather", 13) & 1) == 0
    && (MEMORY[0x18530AEB0](v9, "textureGatherCompare", 20) & 1) == 0
    && (MEMORY[0x18530AEB0](v9, "textureSample", 13) & 1) == 0
    && (MEMORY[0x18530AEB0](v9, "textureSampleBias", 17) & 1) == 0
    && (MEMORY[0x18530AEB0](v9, "textureSampleCompare", 20) & 1) == 0
    && (MEMORY[0x18530AEB0](v9, "textureSampleCompareLevel", 25) & 1) == 0
    && (MEMORY[0x18530AEB0](v9, "textureSampleGrad", 17) & 1) == 0
    && !MEMORY[0x18530AEB0](v9, "textureSampleLevel", 18))
  {
    goto LABEL_592;
  }
  if (!MEMORY[0x18530AEB0](v9, "textureGather", 13)) {
    goto LABEL_655;
  }
  if (!*((_DWORD *)a2 + 21))
  {
LABEL_695:
    __break(0xC471u);
    JUMPOUT(0x1826AA7ACLL);
  }
  int v327 = (uint64_t *)*((void *)a2 + 9);
  unsigned int v328 = *v327;
  if (WGSL::satisfies(*(WGSL **)(*v327 + 24), (const WGSL::Type *)0xC))
  {
    if (*(unsigned char *)(v328 + 56))
    {
      v329 = (WTF::String *)WGSL::ConstantValue::integerValue((WGSL::ConstantValue *)(v328 + 32));
      if ((unint64_t)v329 >= 4)
      {
        WTF::String::number(v329);
        WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::String>((uint64_t)this, (long long *)(v328 + 8), (int8x16_t *)"the component argument must be at least 0 and at most 3. component is ", 71, (uint64_t *)&v368);
        int v330 = v368;
        int v368 = 0;
        if (v330)
        {
          if (*(_DWORD *)v330 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *(_DWORD *)v330 -= 2;
          }
        }
      }
    }
    else
    {
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (long long *)(v328 + 8), "the component argument must be a const-expression", 50);
    }
  }
LABEL_655:
  v332 = *((unsigned int *)a2 + 21);
  if (!v332)
  {
    __break(0xC471u);
    JUMPOUT(0x1826AB0B8);
  }
  v333 = *(void *)(*((void *)a2 + 9) + 8 * v332 - 8);
  v334 = *(void *)(v333 + 24);
  if (v334
    && *(_DWORD *)(v334 + 48) == 1
    && *(unsigned char *)(v334 + 8) == 2
    && *(void *)v334 == *(void *)(*((void *)this + 14) + 64))
  {
    if (!*(unsigned char *)(v333 + 56))
    {
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (long long *)(v333 + 8), "the offset argument must be a const-expression", 47);
      goto LABEL_592;
    }
    if (*(_DWORD *)(v333 + 48) != 8) {
      goto LABEL_679;
    }
    v335 = *(_DWORD **)(v333 + 32);
    v336 = v335 + 2;
    if (!*v335) {
      goto LABEL_686;
    }
    if (v335[6] != 3) {
      goto LABEL_679;
    }
    if ((*v336 - 8) <= 0xFFFFFFEF)
    {
      v337 = 0;
      goto LABEL_671;
    }
    if (*v335 == 1)
    {
LABEL_686:
      __break(0xC471u);
      JUMPOUT(0x1826AB080);
    }
    if (v335[12] != 3) {
      goto LABEL_679;
    }
    v339 = v335[8];
    int v338 = v335 + 8;
    if ((v339 - 8) >= 0xFFFFFFF0) {
      goto LABEL_592;
    }
    v337 = 1;
    v336 = v338;
LABEL_671:
    int v340 = (long long *)(v333 + 8);
    WTF::String::number((WTF::String *)v337);
    int v368 = " is ";
    *(void *)&int v369 = 5;
    WTF::String::number((WTF::String *)*v336);
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t)this, v340, (unint64_t)"each component of the offset argument must be at least -8 and at most 7. offset component ", 91, (uint64_t *)v366, (long long *)&v368, (uint64_t *)&v361);
    v341 = v361;
    char v361 = 0;
    if (v341)
    {
      if (*(_DWORD *)v341 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *(_DWORD *)v341 -= 2;
      }
    }
    int v342 = v366[0];
    v366[0] = 0;
    if (v342)
    {
      if (*(_DWORD *)v342 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *(_DWORD *)v342 -= 2;
      }
    }
  }
LABEL_592:
  if (!v9)
  {
LABEL_595:
    uint64_t result = v355;
    if (!v355) {
      return result;
    }
    goto LABEL_596;
  }
  if (*(_DWORD *)v9 != 2)
  {
    *(_DWORD *)v9 -= 2;
    goto LABEL_595;
  }
  WTF::StringImpl::destroy();
  uint64_t result = v355;
  if (v355)
  {
LABEL_596:
    v355 = 0;
    LODWORD(v356) = 0;
    return (WTF *)WTF::fastFree(result, v7);
  }
  return result;
}

uint64_t WGSL::TypeChecker::setConstantValue<WGSL::AST::CallExpression>(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, __n128 a5)
{
  v14[0] = 0;
  int v15 = -1;
  uint64_t v8 = *(unsigned int *)(a4 + 16);
  if (v8 != -1)
  {
    uint64_t v9 = off_1ECABEE88[v8];
    ((void (*)(uint64_t *, unsigned char *, uint64_t))v9)(&v16, v14, a4);
    int v15 = v8;
    unsigned int v10 = (unsigned char *)(a2 + 56);
    uint64_t v11 = a2 + 32;
    if (*(unsigned char *)(a2 + 56))
    {
      uint64_t v16 = a2 + 32;
      ((void (*)(uint64_t *, uint64_t, unsigned char *))off_1ECABEEE0[v8])(&v16, a2 + 32, v14);
      goto LABEL_10;
    }
    *(unsigned char *)(a2 + 32) = 0;
    *(_DWORD *)(a2 + 48) = -1;
    ((void (*)(uint64_t *, uint64_t, unsigned char *))v9)(&v16, a2 + 32, v14);
    *(_DWORD *)(a2 + 48) = v8;
    goto LABEL_9;
  }
  unsigned int v10 = (unsigned char *)(a2 + 56);
  uint64_t v11 = a2 + 32;
  if (!*(unsigned char *)(a2 + 56))
  {
    *(unsigned char *)(a2 + 32) = 0;
    *(_DWORD *)(a2 + 48) = -1;
LABEL_9:
    *unsigned int v10 = 1;
    goto LABEL_10;
  }
  uint64_t v12 = *(unsigned int *)(a2 + 48);
  if (v12 == -1) {
    goto LABEL_12;
  }
  ((void (*)(uint64_t *, uint64_t))off_1ECABEC60[v12])(&v16, a2 + 32);
  *(_DWORD *)(a2 + 48) = -1;
LABEL_10:
  if (v15 != -1) {
    a5.n128_f64[0] = ((double (*)(uint64_t *, unsigned char *))off_1ECABEC60[v15])(&v16, v14);
  }
LABEL_12:
  int v15 = -1;
  return WGSL::TypeChecker::convertValue(a1, (long long *)(a2 + 8), a3, v11, a5);
}

void WGSL::ConstantStruct::~ConstantStruct(WGSL::ConstantStruct *this, void *a2)
{
  uint64_t v2 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v3 = *(unsigned int *)(v2 - 4);
    if (v3)
    {
      uint64_t v4 = *(void *)this;
      do
      {
        int v5 = *(_DWORD **)v4;
        if (*(void *)v4 != -1)
        {
          uint64_t v6 = *(unsigned int *)(v4 + 24);
          if (v6 != -1)
          {
            ((void (*)(char *, uint64_t))off_1ECABEC60[v6])(&v7, v4 + 8);
            int v5 = *(_DWORD **)v4;
          }
          *(_DWORD *)(v4 + 24) = -1;
          *(void *)uint64_t v4 = 0;
          if (v5)
          {
            if (*v5 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v5 -= 2;
            }
          }
        }
        v4 += 32;
        --v3;
      }
      while (v3);
    }
    WTF::fastFree((WTF *)(v2 - 16), a2);
  }
}

uint64_t WGSL::ConstantValue::integerValue(WGSL::ConstantValue *this)
{
  if (this)
  {
    int v1 = *((_DWORD *)this + 4);
    switch(v1)
    {
      case 5:
        return *(void *)this;
      case 4:
        return *(unsigned int *)this;
      case 3:
        return *(int *)this;
    }
  }
  uint64_t result = 151;
  __break(0xC471u);
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::String>(uint64_t a1, long long *a2, int8x16_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = *a5;
  *a5 = 0;
  if (a4) {
    unint64_t v6 = a4 - 1;
  }
  else {
    unint64_t v6 = 0;
  }
  if (v6 >> 31)
  {
    __break(0xC471u);
    goto LABEL_34;
  }
  if (v5)
  {
    int v9 = *(_DWORD *)(v5 + 4);
    if (((v9 | v6) & 0x80000000) != 0) {
      goto LABEL_32;
    }
  }
  else
  {
    int v9 = 0;
    if ((v6 & 0x80000000) != 0)
    {
LABEL_32:
      uint64_t v19 = 0;
      goto LABEL_33;
    }
  }
  unint64_t v10 = (v6 + v9);
  if (__OFADD__(v6, v9)) {
    goto LABEL_32;
  }
  if (v5)
  {
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v10, (*(unsigned __int8 *)(v5 + 16) >> 2) & 1, a3, v6, v5, &v19);
    uint64_t v11 = v19;
    if (!v19) {
      goto LABEL_33;
    }
  }
  else
  {
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v10, 1, a3, v6, 0, &v19);
    uint64_t v11 = v19;
    if (!v19)
    {
LABEL_33:
      __break(0xC471u);
LABEL_34:
      JUMPOUT(0x1826AC030);
    }
  }
  uint64_t v19 = 0;
  uint64_t v20 = v11;
  long long v21 = *a2;
  uint64_t v12 = *(unsigned int *)(a1 + 132);
  if (v12 != *(_DWORD *)(a1 + 128))
  {
    uint64_t v18 = *(void *)(a1 + 120) + 24 * v12;
    *(void *)uint64_t v18 = v11;
    *(_OWORD *)(v18 + 8) = v21;
    ++*(_DWORD *)(a1 + 132);
    uint64_t v20 = 0;
LABEL_20:
    uint64_t result = v19;
    uint64_t v19 = 0;
    if (!result) {
      goto LABEL_24;
    }
    goto LABEL_21;
  }
  unint64_t v13 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v12 + 1, (unint64_t)&v20);
  uint64_t v14 = *(void *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  uint64_t v15 = *(void *)v13;
  *(void *)unint64_t v13 = 0;
  *(void *)uint64_t v14 = v15;
  *(_OWORD *)(v14 + 8) = *(_OWORD *)(v13 + 8);
  uint64_t v16 = v20;
  ++*(_DWORD *)(a1 + 132);
  uint64_t v20 = 0;
  if (!v16) {
    goto LABEL_20;
  }
  if (*v16 == 2)
  {
    WTF::StringImpl::destroy();
    uint64_t result = v19;
    uint64_t v19 = 0;
    if (!result) {
      goto LABEL_24;
    }
  }
  else
  {
    *v16 -= 2;
    uint64_t result = v19;
    uint64_t v19 = 0;
    if (!result) {
      goto LABEL_24;
    }
  }
LABEL_21:
  if (*result == 2) {
    uint64_t result = (_DWORD *)WTF::StringImpl::destroy();
  }
  else {
    *result -= 2;
  }
LABEL_24:
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return result;
}

unint64_t *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(uint64_t a1, long long *a2, unint64_t a3, uint64_t a4, uint64_t *a5, long long *a6, uint64_t *a7)
{
  uint64_t v9 = *a5;
  *a5 = 0;
  long long v21 = (_DWORD *)*a7;
  uint64_t v22 = (unint64_t *)v9;
  uint64_t v24 = (_DWORD *)a3;
  *(void *)&long long v25 = a4;
  long long v10 = *a6;
  *a7 = 0;
  long long v26 = v10;
  uint64_t result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v24, (uint64_t *)&v22, (uint64_t)&v26, (uint64_t *)&v21, &v23);
  unint64_t v12 = (unint64_t)v23;
  if (!v23)
  {
    __break(0xC471u);
    return result;
  }
  uint64_t v23 = 0;
  uint64_t v24 = (_DWORD *)v12;
  long long v25 = *a2;
  uint64_t v13 = *(unsigned int *)(a1 + 132);
  if (v13 != *(_DWORD *)(a1 + 128))
  {
    uint64_t v19 = *(void *)(a1 + 120) + 24 * v13;
    *(void *)uint64_t v19 = v12;
    *(_OWORD *)(v19 + 8) = v25;
    ++*(_DWORD *)(a1 + 132);
    uint64_t v24 = 0;
LABEL_8:
    uint64_t v18 = v23;
    uint64_t v23 = 0;
    if (!v18) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  unint64_t v14 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v13 + 1, (unint64_t)&v24);
  uint64_t v15 = *(void *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  uint64_t v16 = *(void *)v14;
  *(void *)unint64_t v14 = 0;
  *(void *)uint64_t v15 = v16;
  *(_OWORD *)(v15 + 8) = *(_OWORD *)(v14 + 8);
  uint64_t v17 = v24;
  ++*(_DWORD *)(a1 + 132);
  uint64_t v24 = 0;
  if (!v17) {
    goto LABEL_8;
  }
  if (*v17 == 2)
  {
    WTF::StringImpl::destroy();
    uint64_t v18 = v23;
    uint64_t v23 = 0;
    if (!v18) {
      goto LABEL_12;
    }
  }
  else
  {
    *v17 -= 2;
    uint64_t v18 = v23;
    uint64_t v23 = 0;
    if (!v18) {
      goto LABEL_12;
    }
  }
LABEL_9:
  if (*v18 == 2) {
    WTF::StringImpl::destroy();
  }
  else {
    *v18 -= 2;
  }
LABEL_12:
  uint64_t v20 = v21;
  long long v21 = 0;
  if (v20)
  {
    if (*v20 == 2)
    {
      WTF::StringImpl::destroy();
      uint64_t result = v22;
      uint64_t v22 = 0;
      if (!result) {
        return result;
      }
      goto LABEL_18;
    }
    *v20 -= 2;
  }
  uint64_t result = v22;
  uint64_t v22 = 0;
  if (!result) {
    return result;
  }
LABEL_18:
  if (*(_DWORD *)result == 2) {
    return (unint64_t *)WTF::StringImpl::destroy();
  }
  *(_DWORD *)result -= 2;
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>(uint64_t a1, long long *a2, int8x16_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6 = *a5;
  *a5 = 0;
  if (a4) {
    unint64_t v7 = a4 - 1;
  }
  else {
    unint64_t v7 = 0;
  }
  if (v7 >> 31)
  {
    __break(0xC471u);
    goto LABEL_41;
  }
  uint64_t v8 = *(void *)(a6 + 8);
  BOOL v9 = v8 != 0;
  unint64_t v10 = v8 - 1;
  if (v9) {
    unint64_t v11 = v10;
  }
  else {
    unint64_t v11 = 0;
  }
  if (v11 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826AC420);
  }
  if (v6)
  {
    int v14 = *(_DWORD *)(v6 + 4);
    if (((v14 | v11) & 0x80000000) != 0) {
      goto LABEL_39;
    }
  }
  else
  {
    int v14 = 0;
    if ((v11 & 0x80000000) != 0)
    {
LABEL_39:
      uint64_t v27 = 0;
LABEL_40:
      __break(0xC471u);
LABEL_41:
      JUMPOUT(0x1826AC400);
    }
  }
  BOOL v15 = __OFADD__(v14, v11);
  int v16 = v14 + v11;
  if (v15 || __OFADD__(v7, v16)) {
    goto LABEL_39;
  }
  uint64_t v17 = *(int8x16_t **)a6;
  BOOL v18 = !v6 || (*(unsigned char *)(v6 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v7 + v16), v18, a3, v7, v6, v17, v11, &v27);
  uint64_t v19 = v27;
  if (!v27) {
    goto LABEL_40;
  }
  uint64_t v27 = 0;
  unint64_t v28 = v19;
  long long v29 = *a2;
  uint64_t v20 = *(unsigned int *)(a1 + 132);
  if (v20 != *(_DWORD *)(a1 + 128))
  {
    uint64_t v26 = *(void *)(a1 + 120) + 24 * v20;
    *(void *)uint64_t v26 = v19;
    *(_OWORD *)(v26 + 8) = v29;
    ++*(_DWORD *)(a1 + 132);
    unint64_t v28 = 0;
LABEL_26:
    uint64_t result = v27;
    uint64_t v27 = 0;
    if (!result) {
      goto LABEL_30;
    }
    goto LABEL_27;
  }
  unint64_t v21 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v20 + 1, (unint64_t)&v28);
  uint64_t v22 = *(void *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  uint64_t v23 = *(void *)v21;
  *(void *)unint64_t v21 = 0;
  *(void *)uint64_t v22 = v23;
  *(_OWORD *)(v22 + 8) = *(_OWORD *)(v21 + 8);
  uint64_t v24 = v28;
  ++*(_DWORD *)(a1 + 132);
  unint64_t v28 = 0;
  if (!v24) {
    goto LABEL_26;
  }
  if (*v24 == 2)
  {
    WTF::StringImpl::destroy();
    uint64_t result = v27;
    uint64_t v27 = 0;
    if (!result) {
      goto LABEL_30;
    }
  }
  else
  {
    *v24 -= 2;
    uint64_t result = v27;
    uint64_t v27 = 0;
    if (!result) {
      goto LABEL_30;
    }
  }
LABEL_27:
  if (*result == 2) {
    uint64_t result = (_DWORD *)WTF::StringImpl::destroy();
  }
  else {
    *result -= 2;
  }
LABEL_30:
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return result;
}

void WGSL::ConstantArray::~ConstantArray(WTF **this, _DWORD *a2)
{
  uint64_t v2 = *this;
  *this = 0;
  if (v2)
  {
    uint64_t v3 = *(unsigned int *)v2;
    if (v3)
    {
      uint64_t v4 = 24 * v3;
      uint64_t v5 = (_DWORD *)((char *)v2 + 24);
      do
      {
        a2 = v5 - 4;
        uint64_t v6 = *v5;
        if (v6 != -1) {
          ((void (*)(char *, _DWORD *))off_1ECABEC60[v6])(&v7, a2);
        }
        *uint64_t v5 = -1;
        v5 += 6;
        v4 -= 24;
      }
      while (v4);
    }
    WTF::fastFree(v2, a2);
  }
}

_DWORD *WGSL::constantBitcast(_DWORD *result, uint64_t a2, void *a3)
{
  uint64_t v182 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (_DWORD *)*a3;
  if (!*(_DWORD *)*a3)
  {
    __break(0xC471u);
    JUMPOUT(0x1826AD94CLL);
  }
  uint64_t v5 = result;
  uint64_t v6 = (float *)(v3 + 2);
  if (!a2 || *(_DWORD *)(a2 + 48) != 1)
  {
    uint64_t v14 = v3[6];
    switch(v14)
    {
      case 2:
        double v20 = *(double *)v6;
        WGSL::convertFloat<float,double>(double)::max = 2139095039;
        WGSL::convertFloat<float,double>(double)::lowest = -8388609;
        if (v20 <= 3.40282347e38 && v20 >= -3.40282347e38)
        {
          float v31 = v20;
          *(float *)uint16x8_t v148 = v31;
          int v149 = 0;
          uint64_t result = (_DWORD *)WGSL::convertValue<WGSL::BitwiseCast>(&__src, a2, (uint64_t)v148);
          *((unsigned char *)v5 + 8) = 0;
          v5[6] = -1;
          int v32 = v175;
          if (v175 == -1)
          {
            v5[8] = 0;
          }
          else
          {
            uint64_t result = (_DWORD *)((uint64_t (*)(long long *))off_1ECABECB8[v175])(&v166);
            v5[6] = v32;
            uint64_t v33 = v175;
            v5[8] = 0;
            if (v33 != -1) {
              uint64_t result = (_DWORD *)((uint64_t (*)(long long *, long long *))off_1ECABEC60[v33])(&v166, &__src);
            }
          }
          LODWORD(v175) = -1;
          if (v149 != -1) {
            return (_DWORD *)((uint64_t (*)(long long *, _DWORD *))off_1ECABEC60[v149])(&v166, v148);
          }
          return result;
        }
        int v22 = WTF::numberToStringAndSize();
        HIDWORD(v165) = v22;
        if (v22 < 0) {
          goto LABEL_276;
        }
        if (__OFADD__(v22, 31)) {
          goto LABEL_276;
        }
        uint64_t v23 = (v22 + 37);
        if (__OFADD__(v22 + 31, 6)) {
          goto LABEL_276;
        }
        long long v170 = v162;
        long long v171 = v163;
        long long v172 = v164;
        long long v173 = v165;
        long long v166 = *(_OWORD *)v158;
        long long v167 = v159;
        long long v168 = v160;
        long long v169 = v161;
        uint64_t result = (_DWORD *)WTF::tryFastCompactMalloc((WTF *)(v23 + 20));
        uint64_t v24 = __src;
        if (!(void)__src)
        {
LABEL_276:
          __break(0xC471u);
          JUMPOUT(0x1826ADAFCLL);
        }
        *(_DWORD *)long long __src = 2;
        *(_DWORD *)(v24 + 4) = v23;
        *(void *)(v24 + 8) = v24 + 20;
        *(_WORD *)(v24 + 24) = 8293;
        *(_DWORD *)(v24 + 16) = 4;
        *(_DWORD *)(v24 + 20) = 1970037110;
        long long v25 = (unsigned char *)(v24 + 26);
        long long v178 = v170;
        long long v179 = v171;
        long long v180 = v172;
        long long v181 = v173;
        long long __src = v166;
        long long v175 = v167;
        long long v176 = v168;
        long long v177 = v169;
        uint64_t v26 = HIDWORD(v173);
        if (HIDWORD(v173))
        {
          if (HIDWORD(v173) == 1) {
            unsigned char *v25 = __src;
          }
          else {
            uint64_t result = memcpy((void *)(v24 + 26), &__src, HIDWORD(v181));
          }
        }
        qmemcpy(&v25[v26], " cannot be represented as 'f32'", 31);
        *((void *)v5 + 1) = v24;
        break;
      case 5:
        if (*(_DWORD *)(a2 + 48))
        {
LABEL_275:
          std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_276;
        }
        double v19 = *(double *)v6;
        if (*(unsigned char *)a2 == 2)
        {
          if (!HIDWORD(*(void *)&v19))
          {
            result[2] = LODWORD(v19);
            result[6] = 4;
            result[8] = 0;
            return result;
          }
          if ((*(void *)&v19 & 0x8000000000000000) != 0)
          {
            unint64_t v113 = -*(void *)&v19;
            int v43 = 1;
            do
            {
              ++v43;
              BOOL v114 = v113 >= 0xA;
              v113 /= 0xAuLL;
            }
            while (v114);
          }
          else
          {
            int v43 = 0;
            double v44 = *(double *)v6;
            do
            {
              ++v43;
              BOOL v45 = *(void *)&v44 > 9uLL;
              *(void *)&v44 /= 0xAuLL;
            }
            while (v45);
          }
          if (v43 < 0) {
            goto LABEL_277;
          }
          BOOL v115 = __OFADD__(v43, 31);
          int v116 = v43 + 31;
          if (v115) {
            goto LABEL_277;
          }
          if (__OFADD__(v116, 6)) {
            goto LABEL_277;
          }
          uint64_t result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&__src, v116 + 6, "value ", 6u, *(unint64_t *)&v19, " cannot be represented as 'u32'", 0x1Fu);
          uint64_t v117 = __src;
          if (!(void)__src) {
            goto LABEL_277;
          }
        }
        else
        {
          if (*(void *)&v19 == SLODWORD(v19))
          {
            v150[0] = *(void *)v6;
            int v151 = 3;
            uint64_t result = (_DWORD *)WGSL::convertValue<WGSL::BitwiseCast>(&__src, a2, (uint64_t)v150);
            *((unsigned char *)v5 + 8) = 0;
            v5[6] = -1;
            int v34 = v175;
            if (v175 == -1)
            {
              v5[8] = 0;
            }
            else
            {
              uint64_t result = (_DWORD *)((uint64_t (*)(long long *))off_1ECABECB8[v175])(&v166);
              v5[6] = v34;
              uint64_t v35 = v175;
              v5[8] = 0;
              if (v35 != -1) {
                uint64_t result = (_DWORD *)((uint64_t (*)(long long *, long long *))off_1ECABEC60[v35])(&v166, &__src);
              }
            }
            LODWORD(v175) = -1;
            if (v151 != -1) {
              return (_DWORD *)((uint64_t (*)(long long *, _DWORD *))off_1ECABEC60[v151])(&v166, v150);
            }
            return result;
          }
          if ((*(void *)&v19 & 0x8000000000000000) != 0)
          {
            unint64_t v118 = -*(void *)&v19;
            int v46 = 1;
            do
            {
              ++v46;
              BOOL v114 = v118 >= 0xA;
              v118 /= 0xAuLL;
            }
            while (v114);
          }
          else
          {
            int v46 = 0;
            double v47 = *(double *)v6;
            do
            {
              ++v46;
              BOOL v45 = *(void *)&v47 > 9uLL;
              *(void *)&v47 /= 0xAuLL;
            }
            while (v45);
          }
          if (v46 < 0
            || (BOOL v115 = __OFADD__(v46, 31), v119 = v46 + 31, v115)
            || __OFADD__(v119, 6)
            || (uint64_t result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&__src, v119 + 6, "value ", 6u, *(unint64_t *)&v19, " cannot be represented as 'i32'", 0x1Fu), (v117 = __src) == 0))
          {
LABEL_277:
            __break(0xC471u);
            JUMPOUT(0x1826AD56CLL);
          }
        }
        *((void *)v5 + 1) = v117;
        break;
      case 8:
        double v15 = *(double *)v6;
        unsigned int v16 = **(_DWORD **)v6;
        if (!v16)
        {
          __break(0xC471u);
          JUMPOUT(0x1826AD96CLL);
        }
        if (*(_DWORD *)(*(void *)&v15 + 24) == 1)
        {
          if (v16 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1826AD98CLL);
          }
          if (*(_DWORD *)(*(void *)&v15 + 48) == 1)
          {
            LODWORD(__src) = *(unsigned __int16 *)(*(void *)&v15 + 8) | (*(unsigned __int16 *)(*(void *)&v15 + 32) << 16);
            LODWORD(v175) = 4;
            uint64_t result = (_DWORD *)WGSL::convertValue<WGSL::BitwiseCast>(&v166, a2, (uint64_t)&__src);
            if (v175 != -1) {
              uint64_t result = (_DWORD *)((uint64_t (*)(WTF **, long long *))off_1ECABEC60[v175])(v158, &__src);
            }
            *((unsigned char *)v5 + 8) = 0;
            v5[6] = -1;
            int v17 = v167;
            if (v167 == -1)
            {
              v5[8] = 0;
            }
            else
            {
              uint64_t result = (_DWORD *)((uint64_t (*)(long long *))off_1ECABECB8[v167])(&__src);
              v5[6] = v17;
              uint64_t v18 = v167;
              v5[8] = 0;
              if (v18 != -1) {
                return (_DWORD *)((uint64_t (*)(long long *, long long *))off_1ECABEC60[v18])(&__src, &v166);
              }
            }
            return result;
          }
        }
        goto LABEL_275;
      default:
        v146[0] = 0;
        unsigned int v147 = -1;
        if (v14 != -1)
        {
          ((void (*)(long long *, unsigned char *, float *))off_1ECABEE88[v14])(&__src, v146, v6);
          unsigned int v147 = v14;
        }
        uint64_t result = (_DWORD *)WGSL::convertValue<WGSL::BitwiseCast>(&__src, a2, (uint64_t)v146);
        *((unsigned char *)v5 + 8) = 0;
        v5[6] = -1;
        int v27 = v175;
        if (v175 == -1)
        {
          v5[8] = 0;
          LODWORD(v175) = -1;
          uint64_t v29 = v147;
          if (v147 == -1) {
            return result;
          }
        }
        else
        {
          uint64_t result = (_DWORD *)((uint64_t (*)(long long *))off_1ECABECB8[v175])(&v166);
          v5[6] = v27;
          uint64_t v28 = v175;
          v5[8] = 0;
          if (v28 != -1) {
            uint64_t result = (_DWORD *)((uint64_t (*)(long long *, long long *))off_1ECABEC60[v28])(&v166, &__src);
          }
          LODWORD(v175) = -1;
          uint64_t v29 = v147;
          if (v147 == -1) {
            return result;
          }
        }
        return (_DWORD *)((uint64_t (*)(long long *, unsigned char *))off_1ECABEC60[v29])(&v166, v146);
    }
    v5[8] = 1;
    return result;
  }
  uint64_t v7 = *(unsigned __int8 *)(a2 + 8);
  if (v3[6] != 8)
  {
    if (v7 != 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1826AD9ACLL);
    }
    int v30 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
    *int v30 = 2;
    *(_OWORD *)(v30 + 2) = 0u;
    *(_OWORD *)(v30 + 6) = 0u;
    *(_OWORD *)(v30 + 10) = 0u;
    *(void *)&long long __src = v30;
    WGSL::constantBitcast(WGSL::Type const*,WTF::FixedVector<WGSL::ConstantValue> const&)::$_1::operator()((WTF::String *)&v152, (unsigned int **)&__src, v6, 0);
    if (v153 && v152)
    {
      if (*v152 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v152 -= 2;
      }
    }
    uint64_t v48 = *v30;
    int v49 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v48 + 8));
    BOOL v51 = v49;
    *int v49 = v48;
    if (v48)
    {
      uint64_t v52 = v49 + 6;
      uint64_t v53 = 24 * v48;
      uint64_t v54 = v30 + 6;
      do
      {
        *((unsigned char *)v52 - 16) = 0;
        int v50 = v52 - 4;
        *uint64_t v52 = -1;
        uint64_t v55 = *v54;
        if (v55 != -1)
        {
          ((void (*)(long long *, _DWORD *, unsigned int *))off_1ECABEE88[v55])(&v166, v50, v54 - 4);
          *uint64_t v52 = v55;
        }
        v52 += 6;
        v54 += 6;
        v53 -= 24;
      }
      while (v53);
    }
    *((void *)v5 + 1) = v51;
    v5[6] = 8;
    v5[8] = 0;
    uint64_t v56 = *v30;
    if (v56)
    {
      uint64_t v57 = 24 * v56;
      uint64_t v58 = v30 + 6;
      do
      {
        int v50 = v58 - 4;
        uint64_t v59 = *v58;
        if (v59 != -1) {
          ((void (*)(long long *, _DWORD *))off_1ECABEC60[v59])(&v166, v50);
        }
        *uint64_t v58 = -1;
        v58 += 6;
        v57 -= 24;
      }
      while (v57);
    }
    return (_DWORD *)WTF::fastFree((WTF *)v30, v50);
  }
  uint64_t v8 = *(float **)v6;
  if (!*(void *)v6)
  {
    if (!*(unsigned char *)(a2 + 8))
    {
      uint64_t v36 = 0;
      v158[0] = 0;
      LODWORD(v159) = 8;
      uint64_t v37 = *(void *)a2;
      goto LABEL_222;
    }
    goto LABEL_65;
  }
  uint64_t v9 = *(unsigned int *)v8;
  if (v9 != v7)
  {
    if (!*(unsigned char *)(a2 + 8))
    {
      uint64_t v38 = 0;
      v158[0] = 0;
      goto LABEL_162;
    }
LABEL_65:
    uint64_t v38 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v7 + 8));
    *uint64_t v38 = v7;
    bzero(v38 + 2, 24 * v7 - ((unsigned __int16)(24 * v7 - 24 - 24 * (((24 * (_WORD)v7 - 24) & 0xFFF8u) / 0x18)) & 0xFFF8));
    int v39 = *(unsigned __int8 *)(a2 + 8);
    v158[0] = (WTF *)v38;
    uint64_t v8 = *(float **)v6;
    if (v39 == 4)
    {
      if (!*(_DWORD *)v8)
      {
        __break(0xC471u);
        JUMPOUT(0x1826ADACCLL);
      }
      WGSL::constantBitcast(WGSL::Type const*,WTF::FixedVector<WGSL::ConstantValue> const&)::$_1::operator()((WTF::String *)&__src, (unsigned int **)v158, v8 + 2, 0);
      if (BYTE8(__src))
      {
        uint64_t v41 = (int *)__src;
        if ((void)__src) {
          goto LABEL_69;
        }
        goto LABEL_219;
      }
      if (**(_DWORD **)v6 <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1826ADAECLL);
      }
      WGSL::constantBitcast(WGSL::Type const*,WTF::FixedVector<WGSL::ConstantValue> const&)::$_1::operator()((WTF::String *)&__src, (unsigned int **)v158, (float *)(*(void *)v6 + 32), 2u);
      if (BYTE8(__src))
      {
        uint64_t v41 = (int *)__src;
        if ((void)__src)
        {
LABEL_69:
          int v42 = *v41;
          *v41 += 2;
          *((void *)v5 + 1) = v41;
          v5[8] = 1;
          if (v42) {
            *uint64_t v41 = v42;
          }
          else {
            WTF::StringImpl::destroy();
          }
          goto LABEL_242;
        }
LABEL_219:
        *((void *)v5 + 1) = 0;
        v5[8] = 1;
LABEL_242:
        v158[0] = 0;
        goto LABEL_243;
      }
      uint64_t v106 = (WTF *)v38;
LABEL_190:
      uint64_t v108 = *v38;
      uint64_t result = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v108 + 8));
      uint64_t v109 = result;
      *uint64_t result = v108;
      if (v108)
      {
        unint64_t v110 = 0;
        uint64_t v111 = 24 * v108;
        do
        {
          LOBYTE(v109[v110 / 4 + 2]) = 0;
          int v40 = &v109[v110 / 4 + 2];
          v109[v110 / 4 + 6] = -1;
          uint64_t v112 = v38[v110 / 4 + 6];
          if (v112 != -1)
          {
            uint64_t result = (_DWORD *)((uint64_t (*)(long long *, _DWORD *, unsigned int *))off_1ECABEE88[v112])(&__src, v40, &v38[v110 / 4 + 2]);
            v109[v110 / 4 + 6] = v112;
          }
          v110 += 24;
        }
        while (v111 != v110);
        uint64_t v38 = (unsigned int *)v158[0];
        *((void *)v5 + 1) = v109;
        v5[6] = 8;
        v5[8] = 0;
        v158[0] = 0;
        if (!v38) {
          return result;
        }
      }
      else
      {
        *((void *)v5 + 1) = result;
        v5[6] = 8;
        v5[8] = 0;
        v158[0] = 0;
        uint64_t v38 = (unsigned int *)v106;
      }
LABEL_243:
      uint64_t v135 = *v38;
      if (v135)
      {
        uint64_t v136 = 24 * v135;
        uint8x16_t v137 = v38 + 6;
        do
        {
          int v40 = v137 - 4;
          uint64_t v138 = *v137;
          if (v138 != -1) {
            ((void (*)(long long *, _DWORD *))off_1ECABEC60[v138])(&__src, v40);
          }
          _DWORD *v137 = -1;
          v137 += 6;
          v136 -= 24;
        }
        while (v136);
      }
      return (_DWORD *)WTF::fastFree((WTF *)v38, v40);
    }
    *(float *)&uint64_t v9 = *v8;
LABEL_162:
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1826ADA0CLL);
    }
    if (*((_DWORD *)v8 + 6) == 1)
    {
      if (v9 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1826ADA2CLL);
      }
      if (*((_DWORD *)v8 + 12) == 1)
      {
        uint64_t v101 = *(void *)a2;
        LODWORD(__src) = *((unsigned __int16 *)v8 + 4) | (*((unsigned __int16 *)v8 + 16) << 16);
        LODWORD(v175) = 4;
        WGSL::convertValue<WGSL::BitwiseCast>(&v166, v101, (uint64_t)&__src);
        if (v175 != -1) {
          ((void (*)(_DWORD *, long long *))off_1ECABEC60[v175])(v154, &__src);
        }
        if (!*v38)
        {
          __break(0xC471u);
          JUMPOUT(0x1826ADA4CLL);
        }
        uint64_t v102 = v38[6];
        if (v102 == -1)
        {
          if (v167 == -1) {
            goto LABEL_176;
          }
        }
        else if (v167 == -1)
        {
          ((void (*)(long long *, unsigned int *))off_1ECABEC60[v102])(&__src, v38 + 2);
          v38[6] = -1;
          goto LABEL_174;
        }
        *(void *)&long long __src = v38 + 2;
        ((void (*)(long long *))off_1ECABEF38[v167])(&__src);
LABEL_174:
        if (v167 != -1) {
          ((void (*)(long long *, long long *))off_1ECABEC60[v167])(&__src, &v166);
        }
LABEL_176:
        double v103 = *(double *)v6;
        unsigned int v104 = **(_DWORD **)v6;
        if (v104 <= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1826ADA6CLL);
        }
        if (*(_DWORD *)(*(void *)&v103 + 72) == 1)
        {
          if (v104 <= 3)
          {
            __break(0xC471u);
            JUMPOUT(0x1826ADA8CLL);
          }
          if (*(_DWORD *)(*(void *)&v103 + 96) == 1)
          {
            uint64_t v105 = *(void *)a2;
            LODWORD(__src) = *(unsigned __int16 *)(*(void *)&v103 + 56) | (*(unsigned __int16 *)(*(void *)&v103 + 80) << 16);
            LODWORD(v175) = 4;
            WGSL::convertValue<WGSL::BitwiseCast>(&v166, v105, (uint64_t)&__src);
            if (v175 != -1) {
              ((void (*)(_DWORD *, long long *))off_1ECABEC60[v175])(v154, &__src);
            }
            uint64_t v106 = v158[0];
            if (*(_DWORD *)v158[0] <= 1u)
            {
              __break(0xC471u);
              JUMPOUT(0x1826ADAACLL);
            }
            uint64_t v107 = *((unsigned int *)v158[0] + 12);
            if (v107 == -1)
            {
              if (v167 == -1) {
                goto LABEL_190;
              }
            }
            else if (v167 == -1)
            {
              ((void (*)(long long *, char *))off_1ECABEC60[v107])(&__src, (char *)v158[0] + 32);
              *((_DWORD *)v106 + 12) = -1;
              goto LABEL_188;
            }
            *(void *)&long long __src = (char *)v158[0] + 32;
            ((void (*)(long long *))off_1ECABEF38[v167])(&__src);
LABEL_188:
            if (v167 != -1) {
              ((void (*)(long long *, long long *))off_1ECABEC60[v167])(&__src, &v166);
            }
            goto LABEL_190;
          }
        }
        goto LABEL_275;
      }
    }
    goto LABEL_275;
  }
  __int16 v145 = result;
  unint64_t v10 = (WTF *)WTF::fastMalloc((WTF *)(24 * v9 + 8));
  *(_DWORD *)unint64_t v10 = v9;
  if (v9)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 24 * v9;
    do
    {
      *((unsigned char *)v10 + v11 + 8) = 0;
      *(_DWORD *)((char *)v10 + v11 + 24) = -1;
      uint64_t v13 = LODWORD(v8[v11 / 4 + 6]);
      if (v13 != -1)
      {
        ((void (*)(long long *, char *, float *))off_1ECABEE88[v13])(&__src, (char *)v10 + v11 + 8, &v8[v11 / 4 + 2]);
        *(_DWORD *)((char *)v10 + v11 + 24) = v13;
      }
      v11 += 24;
    }
    while (v12 != v11);
    LODWORD(v9) = *(_DWORD *)v10;
  }
  v158[0] = v10;
  LODWORD(v159) = 8;
  uint64_t v61 = (WTF *)WTF::fastMalloc((WTF *)(24 * v9 + 8));
  *(_DWORD *)uint64_t v61 = v9;
  if (!v9) {
    goto LABEL_106;
  }
  uint64_t v62 = 0;
  uint64_t v63 = 24 * v9;
  do
  {
    *((unsigned char *)v61 + v62 + 8) = 0;
    BOOL v60 = (char *)v61 + v62 + 8;
    *(_DWORD *)((char *)v61 + v62 + 24) = -1;
    uint64_t v64 = *(unsigned int *)((char *)v10 + v62 + 24);
    if (v64 != -1)
    {
      ((void (*)(long long *, char *, char *))off_1ECABEE88[v64])(&__src, v60, (char *)v10 + v62 + 8);
      *(_DWORD *)((char *)v61 + v62 + 24) = v64;
    }
    v62 += 24;
  }
  while (v63 != v62);
  uint64_t v65 = *(unsigned int *)v61;
  if (!v65)
  {
LABEL_106:
    WTF::fastFree(v61, v60);
    uint64_t v69 = *(unsigned int **)v6;
    uint64_t v37 = *(void *)a2;
    if (*(void *)v6)
    {
      uint64_t v70 = *v69;
      uint64_t v36 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v70 + 8));
      *uint64_t v36 = v70;
      if (v70)
      {
        unint64_t v71 = 0;
        uint64_t v72 = 24 * v70;
        do
        {
          LOBYTE(v36[v71 / 4 + 2]) = 0;
          v36[v71 / 4 + 6] = -1;
          uint64_t v73 = v69[v71 / 4 + 6];
          if (v73 != -1)
          {
            ((void (*)(_DWORD *, _DWORD *, unsigned int *))off_1ECABEE88[v73])(v154, &v36[v71 / 4 + 2], &v69[v71 / 4 + 2]);
            v36[v71 / 4 + 6] = v73;
          }
          v71 += 24;
        }
        while (v72 != v71);
      }
    }
    else
    {
      uint64_t v36 = 0;
    }
    uint64_t v5 = v145;
LABEL_222:
    *(void *)&long long __src = v36;
    LODWORD(v175) = 8;
    int8x16x2_t v120 = (void *)WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)int8x16x2_t v120 = 1;
    v120[1] = 0;
    v120[2] = 0;
    v120[3] = 0;
    *(void *)&long long v166 = v120;
    if (v36)
    {
      uint64_t v121 = *v36;
      int8x16x2_t v122 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v121 + 8));
      int8x16x2_t v123 = v122;
      _DWORD *v122 = v121;
      if (v121)
      {
        int8x16x2_t v124 = v122 + 6;
        uint64_t v125 = 24 * v121;
        unint64_t v126 = v36 + 6;
        do
        {
          *((unsigned char *)v124 - 16) = 0;
          _DWORD *v124 = -1;
          uint64_t v127 = *v126;
          if (v127 != -1)
          {
            ((void (*)(_DWORD *, _DWORD *, unsigned int *))off_1ECABEE88[v127])(v154, v124 - 4, v126 - 4);
            _DWORD *v124 = v127;
          }
          v124 += 6;
          v126 += 6;
          v125 -= 24;
        }
        while (v125);
      }
      int v128 = *((_DWORD *)v120 + 6);
      if (v128 == -1)
      {
LABEL_232:
        v120[1] = v123;
        *((_DWORD *)v120 + 6) = 8;
        WGSL::constantBitcast(v5, v37, &v166);
        uint64_t v130 = *(unsigned int *)v120;
        if (v130)
        {
          uint64_t v131 = 24 * v130;
          unint64_t v132 = v120 + 3;
          do
          {
            uint16x8_t v129 = v132 - 4;
            uint64_t v133 = *v132;
            if (v133 != -1) {
              ((void (*)(_DWORD *, _DWORD *))off_1ECABEC60[v133])(v154, v129);
            }
            *unint64_t v132 = -1;
            v132 += 6;
            v131 -= 24;
          }
          while (v131);
        }
        uint64_t result = (_DWORD *)WTF::fastFree((WTF *)v120, v129);
        if (v175 != -1) {
          uint64_t result = (_DWORD *)((uint64_t (*)(_DWORD *, long long *))off_1ECABEC60[v175])(v154, &__src);
        }
        uint64_t v134 = v159;
        if (v159 != -1) {
          return (_DWORD *)((uint64_t (*)(long long *, WTF **))off_1ECABEC60[v134])(&__src, v158);
        }
        return result;
      }
    }
    else
    {
      int8x16x2_t v123 = 0;
      int v128 = 0;
    }
    ((void (*)(_DWORD *, void *))off_1ECABEC60[v128])(v154, v120 + 1);
    goto LABEL_232;
  }
  uint64_t v66 = 0;
  do
  {
    uint64_t v67 = (char *)v61 + v66;
    uint64_t v68 = *(unsigned int *)((char *)v61 + v66 + 24);
    if (v68 != -1) {
      ((void (*)(long long *, char *))off_1ECABEC60[v68])(&__src, v67 + 8);
    }
    *((_DWORD *)v67 + 6) = -1;
    v66 += 24;
  }
  while (24 * v65 != v66);
  WTF::fastFree(v61, v60);
  int v74 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v65 + 8));
  *int v74 = v65;
  uint64_t v75 = v74;
  unsigned int v144 = v74 + 2;
  bzero(v74 + 2, 24 * ((24 * v65 - 24) / 0x18uLL) + 24);
  unint64_t v76 = 0;
  v154[0] = 0;
  int v155 = 0;
  do
  {
    if (v159 == 8)
    {
      if (v76 >= *(unsigned int *)v158[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1826AD9CCLL);
      }
      int8x16_t v77 = (char *)v158[0] + 24 * v76;
      uint64_t v78 = *((unsigned int *)v77 + 6);
      if (v155 != -1)
      {
        if (v78 == -1) {
          goto LABEL_122;
        }
LABEL_127:
        *(void *)&long long __src = v154;
        ((void (*)(long long *, _DWORD *, char *))off_1ECABEEE0[v78])(&__src, v154, v77 + 8);
        goto LABEL_128;
      }
      if (v78 != -1) {
        goto LABEL_127;
      }
    }
    else
    {
      if (v155 == -1)
      {
        if (v159 == -1) {
          goto LABEL_125;
        }
      }
      else if (v159 == -1)
      {
LABEL_122:
        ((void (*)(long long *, _DWORD *))off_1ECABEC60[v155])(&__src, v154);
        int v155 = -1;
LABEL_125:
        uint64_t v79 = *(void *)a2;
        LOBYTE(v166) = 0;
        int v80 = -1;
        goto LABEL_130;
      }
      *(void *)&long long __src = v154;
      ((void (*)(long long *, _DWORD *, WTF **))off_1ECABEEE0[v159])(&__src, v154, v158);
    }
LABEL_128:
    int v80 = v155;
    uint64_t v79 = *(void *)a2;
    LOBYTE(v166) = 0;
    LODWORD(v167) = -1;
    if (v155 == -1) {
      goto LABEL_131;
    }
    ((void (*)(uint64_t *, long long *, _DWORD *))off_1ECABEE88[v155])(&v157, &v166, v154);
LABEL_130:
    LODWORD(v167) = v80;
LABEL_131:
    uint64_t v81 = WTF::fastMalloc((WTF *)0x20);
    uint64_t v82 = (WTF *)v81;
    *(void *)(v81 + 8) = 0;
    *(_DWORD *)uint64_t v81 = 1;
    *(void *)(v81 + 16) = 0;
    *(void *)(v81 + 24) = 0;
    uint64_t v156 = v81;
    if (v167 == -1)
    {
      *(_DWORD *)(v81 + 24) = -1;
      WGSL::constantBitcast(&__src, v79, &v156);
      uint64_t v84 = *(unsigned int *)v82;
      if (!v84) {
        goto LABEL_139;
      }
    }
    else
    {
      uint64_t v157 = v81 + 8;
      ((void (*)(uint64_t *))off_1ECABEEE0[v167])(&v157);
      WGSL::constantBitcast(&__src, v79, &v156);
      uint64_t v84 = *(unsigned int *)v82;
      if (!v84) {
        goto LABEL_139;
      }
    }
    uint64_t v85 = 24 * v84;
    uint64_t v86 = (_DWORD *)((char *)v82 + 24);
    do
    {
      uint64_t v83 = v86 - 4;
      uint64_t v87 = *v86;
      if (v87 != -1) {
        ((void (*)(uint64_t *, _DWORD *))off_1ECABEC60[v87])(&v157, v83);
      }
      *uint64_t v86 = -1;
      v86 += 6;
      v85 -= 24;
    }
    while (v85);
LABEL_139:
    WTF::fastFree(v82, v83);
    if (v167 != -1) {
      ((void (*)(uint64_t *, long long *))off_1ECABEC60[v167])(&v157, &v166);
    }
    int v89 = v176;
    if (v176)
    {
      if (v176 != 1) {
        goto LABEL_275;
      }
      uint64_t v90 = *((void *)&__src + 1);
      if (*((void *)&__src + 1)) {
        **((_DWORD **)&__src + 1) += 2;
      }
      *((void *)v145 + 1) = v90;
      v145[8] = 1;
    }
    else
    {
      if (v76 >= *v75)
      {
        __break(0xC471u);
        JUMPOUT(0x1826AD9ECLL);
      }
      uint64_t v91 = &v144[6 * v76];
      uint64_t v92 = v91[4];
      if (v92 == -1)
      {
        if (DWORD2(v175) == -1) {
          goto LABEL_152;
        }
      }
      else if (DWORD2(v175) == -1)
      {
        ((void (*)(long long *, _DWORD *))off_1ECABEC60[v92])(&v166, &v144[6 * v76]);
        v91[4] = -1;
        goto LABEL_152;
      }
      *(void *)&long long v166 = &v144[6 * v76];
      ((void (*)(long long *, void, char *))off_1ECABEF38[DWORD2(v175)])(&v166, v166, (char *)&__src + 8);
    }
LABEL_152:
    if (v176 != -1) {
      ((void (*)(long long *, char *))off_1ECABED68[v176])(&v166, (char *)&__src + 8);
    }
    if (v89) {
      goto LABEL_250;
    }
    ++v76;
  }
  while (v76 != v65);
  uint64_t v93 = v75;
  uint64_t v94 = *v75;
  __int16 v95 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v94 + 8));
  unint64_t v96 = v95;
  *__int16 v95 = v94;
  if (v94)
  {
    uint8x16_t v97 = v95 + 6;
    uint64_t v98 = 24 * v94;
    uint16x8_t v99 = v75 + 6;
    do
    {
      *((unsigned char *)v97 - 16) = 0;
      *uint8x16_t v97 = -1;
      uint64_t v100 = *v99;
      if (v100 != -1)
      {
        ((void (*)(long long *, _DWORD *, unsigned int *))off_1ECABEE88[v100])(&__src, v97 - 4, v99 - 4);
        *uint8x16_t v97 = v100;
      }
      v97 += 6;
      v99 += 6;
      v98 -= 24;
    }
    while (v98);
  }
  LODWORD(v175) = 8;
  *(void *)&long long __src = 0;
  *((void *)v145 + 1) = v96;
  v145[6] = 8;
  v145[8] = 0;
  _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJfDhdijxbS9_SA_SB_SC_EEEEEEDcSG_DpT0_((uint64_t)&v166, (WTF **)&__src);
  uint64_t v75 = v93;
LABEL_250:
  if (v155 != -1) {
    ((void (*)(long long *, _DWORD *))off_1ECABEC60[v155])(&__src, v154);
  }
  uint16x8_t v139 = (WTF *)v75;
  uint64_t v140 = *v75;
  if (v140)
  {
    uint64_t v141 = 24 * v140;
    unint64_t v142 = (_DWORD *)((char *)v139 + 24);
    do
    {
      __n128 v88 = v142 - 4;
      uint64_t v143 = *v142;
      if (v143 != -1) {
        ((void (*)(long long *, _DWORD *))off_1ECABEC60[v143])(&__src, v88);
      }
      *unint64_t v142 = -1;
      v142 += 6;
      v141 -= 24;
    }
    while (v141);
  }
  uint64_t result = (_DWORD *)WTF::fastFree(v139, v88);
  uint64_t v134 = v159;
  if (v159 != -1) {
    return (_DWORD *)((uint64_t (*)(long long *, WTF **))off_1ECABEC60[v134])(&__src, v158);
  }
  return result;
}

unint64_t WGSL::TypeChecker::typeError<WTF::String &>(unint64_t result, long long *a2, uint64_t a3)
{
  unint64_t v5 = result;
  if (!a3) {
    goto LABEL_27;
  }
  uint64_t v6 = *(unsigned int *)(a3 + 4);
  *(_DWORD *)a3 += 2;
  if ((v6 & 0x80000000) != 0) {
    goto LABEL_83;
  }
  if ((*(unsigned char *)(a3 + 16) & 4) != 0)
  {
    if (!v6) {
      goto LABEL_27;
    }
    uint64_t result = WTF::tryFastCompactMalloc((WTF *)(v6 + 20));
    uint64_t v7 = v63;
    if (v63)
    {
      uint64_t result = (unint64_t)(v63 + 5);
      *uint64_t v63 = 2;
      v7[1] = v6;
      *((void *)v7 + 1) = v7 + 5;
      v7[4] = 4;
      unint64_t v8 = *(void *)(a3 + 8);
      size_t v10 = *(unsigned int *)(a3 + 4);
      if ((*(unsigned char *)(a3 + 16) & 4) != 0)
      {
        if (!v10) {
          goto LABEL_52;
        }
        if (v10 == 1)
        {
          *(unsigned char *)uint64_t result = *(unsigned char *)v8;
          goto LABEL_52;
        }
        goto LABEL_51;
      }
      unint64_t v11 = (unsigned char *)(result + v10);
      if (v10 >= 0x10)
      {
        unint64_t v12 = result + (v10 & 0xFFFFFFF0);
        do
        {
          unsigned long long v13 = (unsigned __int128)vld2q_s8((const char *)v8);
          v8 += 32;
          *(_OWORD *)uint64_t result = v13;
          result += 16;
        }
        while (result != v12);
        uint64_t result = v12;
      }
      if ((unsigned char *)result == v11) {
        goto LABEL_52;
      }
      size_t v14 = (size_t)v7 + v10;
      unint64_t v15 = (unint64_t)v7 + v10 - result + 20;
      if (v15 < 8 || (result < v8 - 2 * result + 2 * v14 + 40 ? (BOOL v16 = v8 >= v14 + 20) : (BOOL v16 = 1), !v16))
      {
        float v31 = (unsigned char *)result;
        int v32 = (char *)v8;
        goto LABEL_45;
      }
      if (v15 >= 0x20)
      {
        unint64_t v17 = v15 & 0xFFFFFFFFFFFFFFE0;
        int v42 = (int8x16_t *)(v8 + 32);
        int v43 = (int8x16_t *)(result + 16);
        unint64_t v44 = v15 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          int8x16_t v46 = v42[-2];
          int8x16_t v45 = v42[-1];
          int8x16_t v48 = *v42;
          int8x16_t v47 = v42[1];
          v42 += 4;
          v43[-1] = vuzp1q_s8(v46, v45);
          *int v43 = vuzp1q_s8(v48, v47);
          v43 += 2;
          v44 -= 32;
        }
        while (v44);
        if (v15 == v17) {
          goto LABEL_52;
        }
        if ((v15 & 0x18) == 0)
        {
          int v32 = (char *)(v8 + 2 * v17);
          float v31 = (unsigned char *)(result + v17);
          goto LABEL_45;
        }
      }
      else
      {
        unint64_t v17 = 0;
      }
      float v31 = (unsigned char *)(result + (v15 & 0xFFFFFFFFFFFFFFF8));
      int v32 = (char *)(v8 + 2 * (v15 & 0xFFFFFFFFFFFFFFF8));
      int v49 = (int16x8_t *)(v8 + 2 * v17);
      int v50 = (int8x8_t *)(result + v17);
      unint64_t v51 = v17 - (v15 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        int16x8_t v52 = *v49++;
        *v50++ = vmovn_s16(v52);
        v51 += 8;
      }
      while (v51);
      if (v15 == (v15 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_52;
      }
      do
      {
LABEL_45:
        char v33 = *v32;
        v32 += 2;
        *v31++ = v33;
      }
      while (v31 != v11);
      goto LABEL_52;
    }
LABEL_83:
    __break(0xC471u);
    return result;
  }
  if (!v6)
  {
LABEL_27:
    uint64_t v7 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_52;
  }
  if (v6 > 0x7FFFFFEF) {
    goto LABEL_83;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * v6 + 20));
  uint64_t v7 = v63;
  if (!v63) {
    goto LABEL_83;
  }
  uint64_t result = (unint64_t)(v63 + 5);
  *uint64_t v63 = 2;
  v7[1] = v6;
  *((void *)v7 + 1) = v7 + 5;
  v7[4] = 0;
  unint64_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = *(unsigned int *)(a3 + 4);
  if ((*(unsigned char *)(a3 + 16) & 4) == 0)
  {
    if (!v9) {
      goto LABEL_52;
    }
    if (v9 == 1)
    {
      *(_WORD *)uint64_t result = *(_WORD *)v8;
      goto LABEL_52;
    }
    size_t v10 = 2 * v9;
LABEL_51:
    uint64_t result = (unint64_t)memcpy((void *)result, (const void *)v8, v10);
    goto LABEL_52;
  }
  uint64_t v18 = (_WORD *)(result + 2 * v9);
  if (v9 >= 0x40)
  {
    unint64_t v19 = result + 2 * (v9 & 0xFFFFFFC0);
    long long v20 = 0uLL;
    do
    {
      v65.val[0] = *(int8x16_t *)v8;
      int8x16_t v21 = *(int8x16_t *)(v8 + 16);
      v66.val[0] = *(int8x16_t *)(v8 + 32);
      long long v22 = *(_OWORD *)(v8 + 48);
      v8 += 64;
      long long v23 = v22;
      v66.val[1] = 0uLL;
      v67.val[0] = v21;
      v65.val[1] = 0uLL;
      uint64_t v24 = (char *)result;
      vst2q_s8(v24, v65);
      v24 += 32;
      v67.val[1] = 0uLL;
      vst2q_s8(v24, v67);
      long long v25 = (char *)(result + 64);
      vst2q_s8(v25, v66);
      uint64_t v26 = (char *)(result + 96);
      vst2q_s8(v26, *(int8x16x2_t *)(&v20 - 1));
      result += 128;
    }
    while (result != v19);
    uint64_t result = v19;
  }
  if ((_WORD *)result != v18)
  {
    unint64_t v27 = (unint64_t)v7 + 2 * v9 - result + 18;
    if (v27 < 0xE
      || (result < v8 + (v27 >> 1) + 1 ? (BOOL v28 = v8 >= (v27 & 0xFFFFFFFFFFFFFFFELL) + result + 2) : (BOOL v28 = 1), !v28))
    {
      int v34 = (_WORD *)result;
      uint64_t v35 = (unsigned __int8 *)v8;
      goto LABEL_48;
    }
    uint64_t v29 = (v27 >> 1) + 1;
    if (v27 >= 0x3E)
    {
      unint64_t v30 = v29 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v53 = (uint8x8_t *)(v8 + 16);
      uint64_t v54 = (uint16x8_t *)(result + 32);
      unint64_t v55 = v29 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v56 = *(uint8x16_t *)v53[-2].i8;
        uint16x8_t v57 = vmovl_u8(*v53);
        uint16x8_t v58 = vmovl_high_u8(*(uint8x16_t *)v53->i8);
        v54[-2] = vmovl_u8(*(uint8x8_t *)v56.i8);
        v54[-1] = vmovl_high_u8(v56);
        *uint64_t v54 = v57;
        v54[1] = v58;
        v54 += 4;
        v53 += 4;
        v55 -= 32;
      }
      while (v55);
      if (v29 == v30) {
        goto LABEL_52;
      }
      if ((v29 & 0x18) == 0)
      {
        uint64_t v35 = (unsigned __int8 *)(v8 + v30);
        int v34 = (_WORD *)(result + 2 * v30);
        do
        {
LABEL_48:
          __int16 v36 = *v35++;
          *v34++ = v36;
        }
        while (v34 != v18);
        goto LABEL_52;
      }
    }
    else
    {
      unint64_t v30 = 0;
    }
    int v34 = (_WORD *)(result + 2 * (v29 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v35 = (unsigned __int8 *)(v8 + (v29 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v59 = (uint8x8_t *)(v8 + v30);
    BOOL v60 = (uint16x8_t *)(result + 2 * v30);
    unint64_t v61 = v30 - (v29 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v62 = *v59++;
      *v60++ = vmovl_u8(v62);
      v61 += 8;
    }
    while (v61);
    if (v29 != (v29 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_48;
    }
  }
LABEL_52:
  uint64_t v63 = v7;
  long long v64 = *a2;
  uint64_t v37 = *(unsigned int *)(v5 + 132);
  if (v37 != *(_DWORD *)(v5 + 128))
  {
    uint64_t v41 = *(void *)(v5 + 120) + 24 * v37;
    *(void *)uint64_t v41 = v7;
    *(_OWORD *)(v41 + 8) = v64;
    ++*(_DWORD *)(v5 + 132);
    uint64_t v63 = 0;
LABEL_58:
    if (!a3) {
      return result;
    }
    goto LABEL_59;
  }
  unint64_t v38 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5 + 120, v37 + 1, (unint64_t)&v63);
  uint64_t v39 = *(void *)(v5 + 120) + 24 * *(unsigned int *)(v5 + 132);
  uint64_t v40 = *(void *)v38;
  *(void *)unint64_t v38 = 0;
  *(void *)uint64_t v39 = v40;
  *(_OWORD *)(v39 + 8) = *(_OWORD *)(v38 + 8);
  uint64_t result = (unint64_t)v63;
  ++*(_DWORD *)(v5 + 132);
  uint64_t v63 = 0;
  if (!result) {
    goto LABEL_58;
  }
  if (*(_DWORD *)result == 2)
  {
    uint64_t result = WTF::StringImpl::destroy();
    if (!a3) {
      return result;
    }
  }
  else
  {
    *(_DWORD *)result -= 2;
    if (!a3) {
      return result;
    }
  }
LABEL_59:
  if (*(_DWORD *)a3 == 2) {
    return WTF::StringImpl::destroy();
  }
  *(_DWORD *)a3 -= 2;
  return result;
}

_DWORD *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::UnaryExpression *a2)
{
  void (*v59)(unint64_t *__return_ptr, const WTF::StringImpl *, void (***)(unsigned int **));
  long long *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  unsigned __int8 *v64;
  uint64_t v65;
  unsigned __int8 **v66;
  uint64_t v67;
  unsigned __int8 *v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  unsigned __int8 *v72;
  uint64_t v73;
  unsigned __int8 **v74;
  uint64_t v75;
  unsigned __int8 *v76;
  uint64_t v77;
  _DWORD *v78;
  __n128 v79;
  _DWORD *v80;
  unsigned int v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  uint64_t v86;
  WTF *v87;
  WTF *v88;
  WTF *v89;
  const WTF::StringImpl *v90;
  WTF *v91;
  uint64_t v92;
  WTF *v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  char v97;
  _DWORD *v98;
  char v99;
  _DWORD *v100;
  WTF *v101;
  const WTF::StringImpl *v102;
  char v103;
  WTF *v104;
  uint64_t v105;
  void (**v106)(unsigned int **);
  unint64_t v107;
  uint64_t v108[3];
  int v109;
  uint64_t v110;
  uint64_t vars8;

  unint64_t v110 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)a2 + 72) == 2)
  {
    uint64_t v12 = *((void *)a2 + 8);
    __int16 v13 = *((_WORD *)this + 52);
    *((_WORD *)this + 52) = 3;
    WGSL::AST::Visitor::visit(this, v12);
    uint64_t v14 = *((void *)this + 11);
    *(void *)(v12 + 24) = v14;
    *((void *)this + 11) = 0;
    *((_WORD *)this + 52) = v13;
    if (v14 && *(_DWORD *)(v14 + 48) == 11)
    {
      uint64_t v15 = *((void *)this + 14);
      BOOL v16 = *(WTF **)(v14 + 8);
      uint64_t v17 = *(unsigned __int8 *)(v14 + 1);
      LOBYTE(v104) = *(unsigned char *)v14;
      uint64_t v93 = v16;
      LOBYTE(v91) = v17;
      LOBYTE(v100) = 0;
      uint64_t v107 = (v17 << 16) | ((unint64_t)v104 << 8) | 6;
      v108[0] = (uint64_t)v16;
      uint64_t result = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v15 + 16), (unsigned __int8 *)&v107);
      unint64_t v19 = *(_DWORD **)(v15 + 16);
      if (v19) {
        v19 += 6 * *(v19 - 1);
      }
      if (v19 == result || (uint64_t v20 = *((void *)result + 2)) == 0) {
        WGSL::TypeStore::allocateType<WGSL::Types::Reference,WGSL::AddressSpace &,WGSL::AccessMode &,WGSL::Type const*&,BOOL &>();
      }
      *((void *)this + 11) = v20;
    }
    else
    {
      LOBYTE(v107) = 39;
      return WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)this, 1, (long long *)((char *)a2 + 8), "cannot dereference expression of type '", 40, v14, (char *)&v107);
    }
    return result;
  }
  if (*((unsigned char *)a2 + 72))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v23 = *((void *)a2 + 8);
    uint64_t v92 = 0;
    uint64_t v93 = (WTF *)&v95;
    __int16 v95 = v23;
    uint64_t v94 = 0x100000001;
    uint64_t v91 = 0;
    uint64_t v24 = *((void *)this + 19);
    if (!v24) {
      goto LABEL_117;
    }
    long long v25 = (long long *)((char *)a2 + 8);
    int v26 = *(_DWORD *)(v24 - 8);
    unsigned int v27 = *((_DWORD *)v96 + 4);
    if (v27 < 0x100) {
      unsigned int v28 = WTF::StringImpl::hashSlowCase(v96);
    }
    else {
      unsigned int v28 = v27 >> 8;
    }
    for (i = 0; ; unsigned int v28 = i + v30)
    {
      int v30 = v28 & v26;
      uint64_t v31 = v24 + 48 * (v28 & v26);
      int v32 = *(WTF **)v31;
      if (*(void *)v31 != -1)
      {
        if (!v32) {
          goto LABEL_115;
        }
        if (WTF::equal(v32, v96, v22)) {
          break;
        }
      }
      ++i;
    }
    uint64_t v33 = *((void *)this + 19);
    if (v33 && v31 == v33 + 48 * *(unsigned int *)(v33 - 4)) {
      goto LABEL_115;
    }
    unsigned int v104 = 0;
    uint64_t v105 = 0;
    if (HIDWORD(v94) >> 29)
    {
      __break(0xC471u);
      goto LABEL_131;
    }
    int v34 = (WTF *)WTF::fastMalloc((WTF *)(8 * HIDWORD(v94)));
    LODWORD(v105) = HIDWORD(v94);
    unsigned int v104 = v34;
    unint64_t v35 = 0;
    do
    {
      while (1)
      {
        uint64_t v107 = 0;
        uint64_t v38 = *((void *)v93 + v35);
        __int16 v39 = *((_WORD *)this + 52);
        *((unsigned char *)this + 105) = 0;
        WGSL::AST::Visitor::visit(this, v38);
        unint64_t v40 = *((void *)this + 11);
        *(void *)(v38 + 24) = v40;
        *((void *)this + 11) = 0;
        *((_WORD *)this + 52) = v39;
        uint64_t v107 = v40;
        if (*(void *)(*((void *)this + 14) + 24) == v40)
        {
          *((void *)this + 11) = v40;
          goto LABEL_113;
        }
        int v41 = HIDWORD(v105);
        if (HIDWORD(v105) != v105) {
          break;
        }
        __int16 v36 = (void *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v104, HIDWORD(v105) + 1, (unint64_t)&v107);
        int v37 = HIDWORD(v105);
        *((void *)v104 + HIDWORD(v105)) = *v36;
        HIDWORD(v105) = v37 + 1;
        if (++v35 >= HIDWORD(v94)) {
          goto LABEL_39;
        }
      }
      *((void *)v104 + HIDWORD(v105)) = v40;
      HIDWORD(v105) = v41 + 1;
      ++v35;
    }
    while (v35 < HIDWORD(v94));
LABEL_39:
    WGSL::resolveOverloads(*((void *)this + 14), (uint64_t *)(v31 + 32), (uint64_t)&v104, (uint64_t)&v91, (uint64_t)&v101);
    if (!v103)
    {
      unint64_t v61 = WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v107);
      uint8x8_t v62 = HIDWORD(v105);
      if (HIDWORD(v105))
      {
        uint64_t v63 = v104;
        long long v64 = *(unsigned __int8 **)v104;
        int8x16x2_t v65 = (*(uint64_t (**)(uint64_t))(v107 + 32))(v61);
        WGSL::Type::dump(v64, v65);
        (*(void (**)(unint64_t *))(v107 + 40))(&v107);
        if (v62 != 1)
        {
          int8x16x2_t v66 = (unsigned __int8 **)((char *)v63 + 8);
          int8x16x2_t v67 = 8 * v62 - 8;
          do
          {
            uint64_t v68 = *v66++;
            (*(void (**)(unint64_t *))(v107 + 32))(&v107);
            WTF::printInternal();
            (*(void (**)(unint64_t *))(v107 + 40))(&v107);
            uint64_t v69 = (*(uint64_t (**)(unint64_t *))(v107 + 32))(&v107);
            WGSL::Type::dump(v68, v69);
            (*(void (**)(unint64_t *))(v107 + 40))(&v107);
            v67 -= 8;
          }
          while (v67);
        }
      }
      WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v106);
      if (HIDWORD(v92))
      {
        v106[4]((unsigned int **)&v106);
        WTF::printInternal();
        v106[5]((unsigned int **)&v106);
        uint64_t v70 = HIDWORD(v92);
        if (HIDWORD(v92))
        {
          unint64_t v71 = v91;
          uint64_t v72 = *(unsigned __int8 **)v91;
          uint64_t v73 = ((uint64_t (*)(unsigned int **))v106[4])((unsigned int **)&v106);
          WGSL::Type::dump(v72, v73);
          v106[5]((unsigned int **)&v106);
          if (v70 != 1)
          {
            int v74 = (unsigned __int8 **)((char *)v71 + 8);
            uint64_t v75 = 8 * v70 - 8;
            do
            {
              unint64_t v76 = *v74++;
              v106[4]((unsigned int **)&v106);
              WTF::printInternal();
              v106[5]((unsigned int **)&v106);
              int8x16_t v77 = ((uint64_t (*)(unsigned int **))v106[4])((unsigned int **)&v106);
              WGSL::Type::dump(v76, v77);
              v106[5]((unsigned int **)&v106);
              v75 -= 8;
            }
            while (v75);
          }
        }
        v106[4]((unsigned int **)&v106);
        WTF::printInternal();
        v106[5]((unsigned int **)&v106);
      }
      WTF::StringPrintStream::toString((uint64_t *)&v100, (WTF::StringPrintStream *)&v106);
      uint16x8_t v99 = 40;
      WTF::StringPrintStream::toString((uint64_t *)&v98, (WTF::StringPrintStream *)&v107);
      uint8x16_t v97 = 41;
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral&,char,WTF::String const&,WTF::String,char,WTF::String,char>((uint64_t)this, v25, (int8x16_t *)"no matching overload for ", 26, (int8x16_t *)"operator", 9, 32, (uint64_t)v96, (uint64_t *)&v100, &v99, (uint64_t *)&v98, &v97);
      uint64_t v78 = v98;
      uint64_t v98 = 0;
      if (v78)
      {
        if (*v78 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v78 -= 2;
        }
      }
      int v80 = v100;
      uint64_t v100 = 0;
      if (v80)
      {
        if (*v80 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v80 -= 2;
        }
      }
      WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v106);
      WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v107);
      goto LABEL_113;
    }
    if (*((unsigned char *)this + 105) && *(unsigned char *)(v31 + 9))
    {
      LOBYTE(v107) = 39;
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::String const&,char>((uint64_t)this, (long long *)((char *)a2 + 8), (int8x16_t *)"ignoring return value of builtin '", 35, (uint64_t)v96, (char *)&v107);
    }
    uint64_t v42 = HIDWORD(v94);
    if (HIDWORD(v94))
    {
      int v43 = (uint64_t *)((char *)v101 + 8);
      uint64_t v44 = *(unsigned int *)v101;
      int8x16_t v45 = v93;
      while (v44)
      {
        uint64_t v47 = *v43++;
        uint64_t v46 = v47;
        uint64_t v48 = *(void *)v45;
        int8x16_t v45 = (WTF *)((char *)v45 + 8);
        *(void *)(v48 + 24) = v46;
        --v44;
        if (!--v42) {
          goto LABEL_47;
        }
      }
      __break(0xC471u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(0xC471u);
LABEL_131:
      JUMPOUT(0x1826AECE4);
    }
LABEL_47:
    int v49 = v102;
    *((void *)this + 11) = v102;
    if ((*(unsigned int (**)(WGSL::AST::UnaryExpression *))(*(void *)a2 + 16))(a2) == 20)
    {
      *((unsigned char *)a2 + 88) = *(unsigned char *)(v31 + 8) == 1;
      *((unsigned char *)a2 + 89) = *(unsigned char *)(v31 + 24);
    }
    uint64_t v90 = v49;
    uint64_t v50 = HIDWORD(v94);
    if (!HIDWORD(v94))
    {
      uint64_t v106 = 0;
      uint64_t v59 = *(void (**)(unint64_t *__return_ptr, const WTF::StringImpl *, void (***)(unsigned int **)))(v31 + 16);
      BOOL v60 = (long long *)((char *)a2 + 8);
      if (v59) {
        goto LABEL_83;
      }
      unint64_t v51 = 0;
      goto LABEL_99;
    }
    unint64_t v51 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * HIDWORD(v94) + 8));
    *unint64_t v51 = v50;
    bzero(v51 + 2, 24 * ((24 * v50 - 24) / 0x18uLL) + 24);
    unint64_t v53 = 0;
    uint64_t v106 = (void (**)(unsigned int **))v51;
    uint64_t v54 = v51 + 6;
    char v55 = 1;
    while (1)
    {
      if (v53 >= HIDWORD(v94)) {
        goto LABEL_129;
      }
      uint64_t v56 = *((void *)v93 + v53);
      if (*(unsigned char *)(v56 + 56)
        && WGSL::TypeChecker::convertValue((uint64_t)this, (long long *)(v56 + 8), *(const WTF::StringImpl **)(v56 + 24), v56 + 32, v52))
      {
        if (!*(unsigned char *)(v56 + 56)) {
          goto LABEL_126;
        }
        if (v53 >= *v51) {
          goto LABEL_127;
        }
        int8x16_t v21 = v54 - 4;
        uint64_t v57 = *v54;
        uint64_t v58 = *(unsigned int *)(v56 + 48);
        if (v57 == -1)
        {
          if (v58 != -1)
          {
LABEL_62:
            uint64_t v107 = (unint64_t)(v54 - 4);
            ((void (*)(unint64_t *))off_1ECABEEE0[v58])(&v107);
          }
        }
        else
        {
          if (v58 != -1) {
            goto LABEL_62;
          }
          ((void (*)(unint64_t *, _DWORD *))off_1ECABEC60[v57])(&v107, v21);
          *uint64_t v54 = -1;
        }
      }
      else
      {
        char v55 = 0;
      }
      ++v53;
      v54 += 6;
      if (v50 == v53)
      {
        uint64_t v59 = *(void (**)(unint64_t *__return_ptr, const WTF::StringImpl *, void (***)(unsigned int **)))(v31 + 16);
        if (v59)
        {
          BOOL v60 = (long long *)((char *)a2 + 8);
          if ((v55 & 1) == 0)
          {
            uint64_t v106 = 0;
            goto LABEL_105;
          }
LABEL_83:
          v59(&v107, v90, &v106);
          if (v109)
          {
            if (v109 != 1)
            {
              std::__throw_bad_variant_access[abi:sn180100]();
LABEL_129:
              __break(0xC471u);
              JUMPOUT(0x1826AECF0);
            }
            WGSL::TypeChecker::typeError<WTF::String &>((unint64_t)this, v60, v108[0]);
          }
          else
          {
            WGSL::TypeChecker::setConstantValue<WGSL::AST::CallExpression>((uint64_t)this, (uint64_t)a2, v90, (uint64_t)v108, v79);
          }
          if (v109 != -1) {
            ((void (*)(_DWORD **, uint64_t *))off_1ECABED68[v109])(&v100, v108);
          }
          unint64_t v51 = (unsigned int *)v106;
LABEL_104:
          uint64_t v106 = 0;
          if (v51)
          {
LABEL_105:
            uint64_t v83 = *v51;
            if (v83)
            {
              uint64_t v84 = 24 * v83;
              uint64_t v85 = v51 + 6;
              do
              {
                int8x16_t v21 = v85 - 4;
                uint64_t v86 = *v85;
                if (v86 != -1) {
                  ((void (*)(unint64_t *, _DWORD *))off_1ECABEC60[v86])(&v107, v21);
                }
                *uint64_t v85 = -1;
                v85 += 6;
                v84 -= 24;
              }
              while (v84);
            }
            WTF::fastFree((WTF *)v51, v21);
            if (v103) {
              goto LABEL_111;
            }
          }
          else
          {
LABEL_111:
            if (v101) {
              WTF::fastFree(v101, v21);
            }
          }
LABEL_113:
          uint64_t v87 = v104;
          if (v104)
          {
            unsigned int v104 = 0;
            LODWORD(v105) = 0;
            WTF::fastFree(v87, v21);
          }
LABEL_115:
          __n128 v88 = v91;
          if (v91)
          {
            uint64_t v91 = 0;
            LODWORD(v92) = 0;
            WTF::fastFree(v88, v21);
          }
LABEL_117:
          int v89 = v93;
          if (&v95 != (uint64_t *)v93 && v93)
          {
            uint64_t v93 = 0;
            LODWORD(v94) = 0;
            WTF::fastFree(v89, v21);
          }
          uint64_t result = v96;
          unint64_t v96 = 0;
          if (result)
          {
            if (*result == 2) {
              return (_DWORD *)WTF::StringImpl::destroy();
            }
            else {
              *result -= 2;
            }
          }
          return result;
        }
        BOOL v60 = (long long *)((char *)a2 + 8);
LABEL_99:
        uint64_t v81 = *((unsigned __int8 *)this + 104);
        if (v81 <= 2)
        {
          if (v81 == 2) {
            uint64_t v82 = "override";
          }
          else {
            uint64_t v82 = "constant";
          }
          WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>((uint64_t)this, 0, v60, "cannot call function from ", 27, (uint64_t)v82, 9, (uint64_t)" context", 9);
        }
        goto LABEL_104;
      }
    }
  }
  uint64_t v4 = *((void *)a2 + 8);
  __int16 v5 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 3;
  WGSL::AST::Visitor::visit(this, v4);
  uint64_t v6 = (unsigned __int8 *)*((void *)this + 11);
  *(void *)(v4 + 24) = v6;
  *((void *)this + 11) = 0;
  *((_WORD *)this + 52) = v5;
  if (v6 && *((_DWORD *)v6 + 12) == 10)
  {
    unsigned int v7 = *v6;
    if (v7 == 1)
    {
      unint64_t v8 = "cannot take the address of expression in handle address space";
      uint64_t v9 = (long long *)((char *)a2 + 8);
      size_t v10 = this;
      uint64_t v11 = 62;
    }
    else
    {
      if (!v6[16])
      {
        uint64_t result = (_DWORD *)WGSL::TypeStore::pointerType(*((void *)this + 14), v7, *((void *)v6 + 1), v6[1]);
        *((void *)this + 11) = result;
        return result;
      }
      unint64_t v8 = "cannot take the address of a vector component";
      uint64_t v9 = (long long *)((char *)a2 + 8);
      size_t v10 = this;
      uint64_t v11 = 46;
    }
  }
  else
  {
    unint64_t v8 = "cannot take address of expression";
    uint64_t v9 = (long long *)((char *)a2 + 8);
    size_t v10 = this;
    uint64_t v11 = 34;
  }
  return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(v10, 1, v9, v8, v11);
}

uint64_t WGSL::TypeChecker::visit(uint64_t this, WGSL::AST::BoolLiteral *a2)
{
  *(void *)(this + 88) = *(void *)(*(void *)(this + 112) + 56);
  char v3 = *((unsigned char *)a2 + 64);
  if (*((unsigned char *)a2 + 56))
  {
    uint64_t v4 = *((unsigned int *)a2 + 12);
    if (v4 != -1)
    {
      __int16 v5 = (char *)a2 + 32;
      if (v4 == 6)
      {
        *__int16 v5 = v3;
        return this;
      }
      this = ((uint64_t (*)(char *, unsigned char *))off_1ECABEC60[v4])(&v6, v5);
    }
    *((unsigned char *)a2 + 32) = v3;
    *((_DWORD *)a2 + 12) = 6;
  }
  else
  {
    *((unsigned char *)a2 + 32) = v3;
    *((_DWORD *)a2 + 12) = 6;
    *((unsigned char *)a2 + 56) = 1;
  }
  return this;
}

uint64_t WGSL::TypeChecker::visit(uint64_t this, WGSL::AST::Signed32Literal *a2)
{
  *(void *)(this + 88) = *(void *)(*(void *)(this + 112) + 64);
  int v3 = *((_DWORD *)a2 + 16);
  if (*((unsigned char *)a2 + 56))
  {
    uint64_t v4 = *((unsigned int *)a2 + 12);
    if (v4 != -1)
    {
      __int16 v5 = (_DWORD *)((char *)a2 + 32);
      if (v4 == 3)
      {
        *__int16 v5 = v3;
        return this;
      }
      this = ((uint64_t (*)(char *, _DWORD *))off_1ECABEC60[v4])(&v6, v5);
    }
    *((_DWORD *)a2 + 8) = v3;
    *((_DWORD *)a2 + 12) = 3;
  }
  else
  {
    *((_DWORD *)a2 + 8) = v3;
    *((_DWORD *)a2 + 12) = 3;
    *((unsigned char *)a2 + 56) = 1;
  }
  return this;
}

uint64_t WGSL::TypeChecker::visit(uint64_t this, WGSL::AST::Float32Literal *a2)
{
  *(void *)(this + 88) = *(void *)(*(void *)(this + 112) + 80);
  int v3 = *((_DWORD *)a2 + 16);
  if (*((unsigned char *)a2 + 56))
  {
    uint64_t v4 = *((unsigned int *)a2 + 12);
    if (v4 != -1)
    {
      __int16 v5 = (_DWORD *)((char *)a2 + 32);
      if (!v4)
      {
        *__int16 v5 = v3;
        return this;
      }
      this = ((uint64_t (*)(char *, _DWORD *))off_1ECABEC60[v4])(&v6, v5);
    }
    *((_DWORD *)a2 + 8) = v3;
    *((_DWORD *)a2 + 12) = 0;
  }
  else
  {
    *((_DWORD *)a2 + 8) = v3;
    *((_DWORD *)a2 + 12) = 0;
    *((unsigned char *)a2 + 56) = 1;
  }
  return this;
}

uint64_t WGSL::TypeChecker::visit(uint64_t this, WGSL::AST::Float16Literal *a2)
{
  *(void *)(this + 88) = *(void *)(*(void *)(this + 112) + 88);
  __int16 v3 = *((_WORD *)a2 + 32);
  if (*((unsigned char *)a2 + 56))
  {
    uint64_t v4 = *((unsigned int *)a2 + 12);
    if (v4 != -1)
    {
      __int16 v5 = (_WORD *)((char *)a2 + 32);
      if (v4 == 1)
      {
        *__int16 v5 = v3;
        return this;
      }
      this = ((uint64_t (*)(char *, _WORD *))off_1ECABEC60[v4])(&v6, v5);
    }
    *((_WORD *)a2 + 16) = v3;
    *((_DWORD *)a2 + 12) = 1;
  }
  else
  {
    *((_WORD *)a2 + 16) = v3;
    *((_DWORD *)a2 + 12) = 1;
    *((unsigned char *)a2 + 56) = 1;
  }
  return this;
}

uint64_t WGSL::TypeChecker::visit(uint64_t this, WGSL::AST::Unsigned32Literal *a2)
{
  *(void *)(this + 88) = *(void *)(*(void *)(this + 112) + 72);
  int v3 = *((_DWORD *)a2 + 16);
  if (*((unsigned char *)a2 + 56))
  {
    uint64_t v4 = *((unsigned int *)a2 + 12);
    if (v4 != -1)
    {
      __int16 v5 = (_DWORD *)((char *)a2 + 32);
      if (v4 == 4)
      {
        *__int16 v5 = v3;
        return this;
      }
      this = ((uint64_t (*)(char *, _DWORD *))off_1ECABEC60[v4])(&v6, v5);
    }
    *((_DWORD *)a2 + 8) = v3;
    *((_DWORD *)a2 + 12) = 4;
  }
  else
  {
    *((_DWORD *)a2 + 8) = v3;
    *((_DWORD *)a2 + 12) = 4;
    *((unsigned char *)a2 + 56) = 1;
  }
  return this;
}

uint64_t WGSL::TypeChecker::visit(uint64_t this, WGSL::AST::AbstractIntegerLiteral *a2)
{
  *(void *)(this + 88) = *(void *)(*(void *)(this + 112) + 32);
  uint64_t v3 = *((void *)a2 + 8);
  if (*((unsigned char *)a2 + 56))
  {
    uint64_t v4 = *((unsigned int *)a2 + 12);
    if (v4 != -1)
    {
      __int16 v5 = (void *)((char *)a2 + 32);
      if (v4 == 5)
      {
        *__int16 v5 = v3;
        return this;
      }
      this = ((uint64_t (*)(char *, void *))off_1ECABEC60[v4])(&v6, v5);
    }
    *((void *)a2 + 4) = v3;
    *((_DWORD *)a2 + 12) = 5;
  }
  else
  {
    *((void *)a2 + 4) = v3;
    *((_DWORD *)a2 + 12) = 5;
    *((unsigned char *)a2 + 56) = 1;
  }
  return this;
}

uint64_t WGSL::TypeChecker::visit(uint64_t this, WGSL::AST::AbstractFloatLiteral *a2)
{
  *(void *)(this + 88) = *(void *)(*(void *)(this + 112) + 40);
  uint64_t v3 = *((void *)a2 + 8);
  if (*((unsigned char *)a2 + 56))
  {
    uint64_t v4 = *((unsigned int *)a2 + 12);
    if (v4 != -1)
    {
      __int16 v5 = (void *)((char *)a2 + 32);
      if (v4 == 2)
      {
        *__int16 v5 = v3;
        return this;
      }
      this = ((uint64_t (*)(char *, void *))off_1ECABEC60[v4])(&v6, v5);
    }
    *((void *)a2 + 4) = v3;
    *((_DWORD *)a2 + 12) = 2;
  }
  else
  {
    *((void *)a2 + 4) = v3;
    *((_DWORD *)a2 + 12) = 2;
    *((unsigned char *)a2 + 56) = 1;
  }
  return this;
}

void WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::ArrayTypeExpression *a2)
{
  uint64_t v4 = *((void *)a2 + 8);
  if (!v4)
  {
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 1, (long long *)((char *)a2 + 8), "'array' requires at least 1 template argument", 46);
    return;
  }
  if ((*(unsigned int (**)(void))(*(void *)v4 + 16))(*((void *)a2 + 8)) == 22)
  {
    char v6 = (WGSL::Type *)WGSL::TypeChecker::lookupType(this, (const WGSL::AST::Identifier *)(v4 + 64), v5);
    *((void *)this + 11) = v6;
    if (*((_DWORD *)v6 + 12) != 13) {
      goto LABEL_4;
    }
LABEL_24:
    *(void *)&long long v63 = "' requires template arguments";
    *((void *)&v63 + 1) = 30;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 0, (_OWORD *)(v4 + 8), (int8x16_t *)"type '", 7, (uint64_t)v6, &v63);
    char v6 = *(WGSL::Type **)(*((void *)this + 14) + 24);
    unsigned int v7 = (WGSL::Type **)((char *)this + 88);
    *(void *)(v4 + 24) = v6;
    goto LABEL_25;
  }
  WGSL::AST::Visitor::visit(this, v4);
  char v6 = (WGSL::Type *)*((void *)this + 11);
  if (*((_DWORD *)v6 + 12) == 13) {
    goto LABEL_24;
  }
LABEL_4:
  *((void *)this + 11) = 0;
  unsigned int v7 = (WGSL::Type **)((char *)this + 88);
  unint64_t v8 = *(WGSL::Type **)(*((void *)this + 14) + 24);
  *(void *)(v4 + 24) = v6;
  if (v8 == v6)
  {
LABEL_25:
    *unsigned int v7 = v6;
    return;
  }
  if ((WGSL::Type::hasCreationFixedFootprint(v6) & 1) == 0)
  {
    *(void *)&long long v63 = "' cannot be used as an element type of an array";
    *((void *)&v63 + 1) = 48;
    WGSL::TypeChecker::typeError<char,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 1, (WGSL::AST::ArrayTypeExpression *)((char *)a2 + 8), 39, (uint64_t)v6, &v63);
    return;
  }
  uint64_t v9 = *((void *)a2 + 9);
  if (!v9)
  {
    uint64_t v20 = 0;
LABEL_96:
    *((void *)this + 11) = WGSL::TypeStore::arrayType(*((void *)this + 14), (uint64_t)v6, v4, v20);
    return;
  }
  __int16 v10 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 2;
  WGSL::AST::Visitor::visit(this, v9);
  uint64_t v4 = *((void *)this + 11);
  *(void *)(v9 + 24) = v4;
  *((void *)this + 11) = 0;
  *((_WORD *)this + 52) = v10;
  uint64_t v12 = *((void *)this + 14);
  __int16 v13 = *(const WGSL::Type **)(v12 + 64);
  if (v13 != (const WGSL::Type *)v4)
  {
    uint64_t v14 = *(const WGSL::Type **)(v12 + 24);
    if (v14 != v13 && v14 != (const WGSL::Type *)v4 && WGSL::conversionRank((WGSL *)v4, v13, v11) == -1)
    {
      uint64_t v40 = *((void *)this + 14);
      __int16 v13 = *(const WGSL::Type **)(v40 + 72);
      if (v13 != (const WGSL::Type *)v4)
      {
        int v41 = *(const WGSL::Type **)(v40 + 24);
        if (v41 != v13
          && v41 != (const WGSL::Type *)v4
          && WGSL::conversionRank((WGSL *)v4, v13, v11) == -1)
        {
          LOBYTE(v63) = 39;
          WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)this, 1, (long long *)((char *)a2 + 8), "array count must be an i32 or u32 value, found '", 49, v4, (char *)&v63);
          return;
        }
      }
    }
  }
  uint64_t v15 = *((void *)a2 + 9);
  LOBYTE(v63) = 0;
  char v65 = 0;
  if (!*(unsigned char *)(v15 + 56))
  {
    int8x16_t v21 = (uint64_t *)(*((void *)this + 10) + 424);
    uint64_t v22 = *v21;
    if (*v21
      || (WTF::HashTable<WGSL::AST::Expression const*,WTF::KeyValuePair<WGSL::AST::Expression const*,WTF::Vector<WTF::Function<std::optional<WTF::String> ()(WGSL::ConstantValue const&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Expression const*,WTF::Vector<WTF::Function<std::optional<WTF::String> ()(WGSL::ConstantValue const&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WGSL::AST::Expression const*>,WTF::HashMap<WGSL::AST::Expression const*,WTF::Vector<WTF::Function<std::optional<WTF::String> ()(WGSL::ConstantValue const&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WGSL::AST::Expression const*>,WTF::HashTraits<WGSL::AST::Expression const*>,WTF::HashTraits<WTF::Vector<WTF::Function<std::optional<WTF::String> ()(WGSL::ConstantValue const&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Expression const*>>::rehash((uint64_t *)(*((void *)this + 10) + 424), 8u, 0), (uint64_t v22 = *v21) != 0))
    {
      int v23 = *(_DWORD *)(v22 - 8);
    }
    else
    {
      int v23 = 0;
    }
    unint64_t v24 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
    unint64_t v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
    unint64_t v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
    unsigned int v27 = v23 & ((v26 >> 31) ^ v26);
    unsigned int v28 = (uint64_t *)(v22 + 24 * v27);
    uint64_t v29 = *v28;
    if (*v28)
    {
      int v30 = 0;
      int v31 = 1;
      while (v29 != v15)
      {
        if (v29 == -1) {
          int v30 = v28;
        }
        unsigned int v27 = (v27 + v31) & v23;
        unsigned int v28 = (uint64_t *)(v22 + 24 * v27);
        uint64_t v29 = *v28;
        ++v31;
        if (!*v28)
        {
          if (v30)
          {
            *int v30 = 0;
            v30[1] = 0;
            v30[2] = 0;
            --*(_DWORD *)(*v21 - 16);
            unsigned int v28 = v30;
          }
          goto LABEL_40;
        }
      }
LABEL_71:
      unint64_t v48 = *((unsigned int *)v28 + 5);
      if (v48 == *((_DWORD *)v28 + 4))
      {
        unint64_t v49 = v48 + (v48 >> 2);
        if (v49 >= 0x10) {
          unint64_t v50 = v49 + 1;
        }
        else {
          unint64_t v50 = 16;
        }
        if (v50 <= v48 + 1) {
          unint64_t v51 = v48 + 1;
        }
        else {
          unint64_t v51 = v50;
        }
        if (v51 >> 29)
        {
          __break(0xC471u);
LABEL_101:
          JUMPOUT(0x1826AF8CCLL);
        }
        __n128 v52 = (WTF *)v28[1];
        uint64_t v54 = (WTF *)WTF::fastMalloc((WTF *)(8 * v51));
        *((_DWORD *)v28 + 4) = v51;
        v28[1] = (uint64_t)v54;
        if (v48)
        {
          uint64_t v55 = 8 * v48;
          uint64_t v56 = v52;
          do
          {
            uint64_t v57 = *(void *)v56;
            *(void *)uint64_t v56 = 0;
            *(void *)uint64_t v54 = v57;
            uint64_t v58 = *(void *)v56;
            *(void *)uint64_t v56 = 0;
            if (v58) {
              (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
            }
            uint64_t v54 = (WTF *)((char *)v54 + 8);
            uint64_t v56 = (WTF *)((char *)v56 + 8);
            v55 -= 8;
          }
          while (v55);
          uint64_t v54 = (WTF *)v28[1];
        }
        if (v52)
        {
          if (v54 == v52)
          {
            v28[1] = 0;
            *((_DWORD *)v28 + 4) = 0;
          }
          WTF::fastFree(v52, v53);
          uint64_t v54 = (WTF *)v28[1];
        }
        uint64_t v61 = *((unsigned int *)v28 + 5);
        uint8x8_t v62 = (void *)WTF::fastMalloc((WTF *)0x10);
        *uint8x8_t v62 = &unk_1ECABF108;
        *((void *)v54 + v61) = v62;
      }
      else
      {
        uint64_t v59 = v28[1];
        BOOL v60 = (void *)WTF::fastMalloc((WTF *)0x10);
        *BOOL v60 = &unk_1ECABF108;
        *(void *)(v59 + 8 * v48) = v60;
      }
      ++*((_DWORD *)v28 + 5);
      uint64_t v4 = *((void *)a2 + 9);
      int v42 = 1;
      uint64_t v20 = 2;
      goto LABEL_92;
    }
LABEL_40:
    *unsigned int v28 = v15;
    int v32 = (WTF **)(v28 + 1);
    uint64_t v33 = *((unsigned int *)v28 + 5);
    if (v33)
    {
      int v34 = *v32;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *(void *)v34;
        *(void *)int v34 = 0;
        if (v36) {
          (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        }
        int v34 = (WTF *)((char *)v34 + 8);
        v35 -= 8;
      }
      while (v35);
    }
    int v37 = *v32;
    if (*v32)
    {
      v28[1] = 0;
      *((_DWORD *)v28 + 4) = 0;
      WTF::fastFree(v37, v13);
    }
    *int v32 = 0;
    void v28[2] = 0;
    uint64_t v38 = *v21;
    if (*v21) {
      int v39 = *(_DWORD *)(v38 - 12) + 1;
    }
    else {
      int v39 = 1;
    }
    *(_DWORD *)(v38 - 12) = v39;
    uint64_t v43 = *v21;
    if (*v21) {
      int v44 = *(_DWORD *)(v43 - 12);
    }
    else {
      int v44 = 0;
    }
    uint64_t v45 = (*(_DWORD *)(v43 - 16) + v44);
    unint64_t v46 = *(unsigned int *)(v43 - 4);
    if (v46 > 0x400)
    {
      if (v46 > 2 * v45) {
        goto LABEL_71;
      }
    }
    else
    {
      if (3 * v46 > 4 * v45) {
        goto LABEL_71;
      }
      if (!v46)
      {
        unsigned int v47 = 8;
LABEL_70:
        unsigned int v28 = WTF::HashTable<WGSL::AST::Expression const*,WTF::KeyValuePair<WGSL::AST::Expression const*,WTF::Vector<WTF::Function<std::optional<WTF::String> ()(WGSL::ConstantValue const&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Expression const*,WTF::Vector<WTF::Function<std::optional<WTF::String> ()(WGSL::ConstantValue const&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WGSL::AST::Expression const*>,WTF::HashMap<WGSL::AST::Expression const*,WTF::Vector<WTF::Function<std::optional<WTF::String> ()(WGSL::ConstantValue const&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WGSL::AST::Expression const*>,WTF::HashTraits<WGSL::AST::Expression const*>,WTF::HashTraits<WTF::Vector<WTF::Function<std::optional<WTF::String> ()(WGSL::ConstantValue const&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Expression const*>>::rehash(v21, v47, v28);
        goto LABEL_71;
      }
    }
    unsigned int v47 = v46 << (6 * *(_DWORD *)(v43 - 12) >= (2 * v46));
    goto LABEL_70;
  }
  int v64 = -1;
  uint64_t v16 = *(unsigned int *)(v15 + 48);
  if (v16 != -1)
  {
    ((void (*)(char *, long long *, uint64_t))off_1ECABEE88[v16])(&v66, &v63, v15 + 32);
    int v64 = v16;
    uint64_t v15 = *((void *)a2 + 9);
  }
  char v65 = 1;
  uint64_t v17 = WGSL::concretize((WGSL *)v4, *((const WGSL::Type **)this + 14), v11);
  if (!WGSL::TypeChecker::convertValue((uint64_t)this, (long long *)(v15 + 8), v17, (uint64_t)&v63, v18))
  {
    LODWORD(v19) = 0;
LABEL_58:
    uint64_t v4 = v19;
    uint64_t v20 = 1;
    int v42 = 1;
    goto LABEL_92;
  }
  if (!v65)
  {
    __break(1u);
LABEL_99:
    __break(0xC471u);
    goto LABEL_101;
  }
  if (v64 == 5)
  {
    uint64_t v19 = v63;
    goto LABEL_57;
  }
  if (v64 == 4)
  {
    uint64_t v19 = v63;
    goto LABEL_57;
  }
  if (v64 != 3) {
    goto LABEL_99;
  }
  uint64_t v19 = (int)v63;
LABEL_57:
  if (v19 > 0) {
    goto LABEL_58;
  }
  WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 1, (long long *)((char *)a2 + 8), "array count must be greater than 0", 35);
  uint64_t v20 = 0;
  int v42 = 0;
LABEL_92:
  if (v65)
  {
    if (v64 != -1) {
      ((void (*)(char *, long long *))off_1ECABEC60[v64])(&v66, &v63);
    }
  }
  if (v42) {
    goto LABEL_96;
  }
}

void *WGSL::TypeChecker::lookupType(WGSL::TypeChecker *this, const WGSL::AST::Identifier *a2, const WTF::StringImpl *a3)
{
  __int16 v5 = (void *)*((void *)this + 5);
  while (1)
  {
    uint64_t v6 = v5[1];
    if (v6) {
      break;
    }
LABEL_3:
    __int16 v5 = (void *)*v5;
    if (!v5)
    {
      LOBYTE(v30) = 39;
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::AST::Identifier const&,char>((uint64_t)this, (long long *)((char *)a2 + 8), (int8x16_t *)"unresolved type '", 18, (uint64_t)a2, (char *)&v30);
      goto LABEL_39;
    }
  }
  int v7 = *(_DWORD *)(v6 - 8);
  unint64_t v8 = (WTF::StringImpl *)*((void *)a2 + 3);
  unsigned int v9 = *((_DWORD *)v8 + 4);
  if (v9 < 0x100) {
    unsigned int v10 = WTF::StringImpl::hashSlowCase(v8);
  }
  else {
    unsigned int v10 = v9 >> 8;
  }
  for (i = 0; ; unsigned int v10 = i + v12)
  {
    uint64_t v12 = v10 & v7;
    __int16 v13 = *(WTF **)(v6 + (v12 << 6));
    if (v13 != (WTF *)-1)
    {
      if (!v13)
      {
        uint64_t v15 = v5[1];
        if (!v15) {
          goto LABEL_3;
        }
        uint64_t v16 = *(unsigned int *)(v15 - 4);
        uint64_t v14 = v15 + (v16 << 6);
        goto LABEL_2;
      }
      if (WTF::equal(v13, *((const WTF::StringImpl **)a2 + 3), a3)) {
        break;
      }
    }
    ++i;
  }
  uint64_t v14 = v6 + (v12 << 6);
  uint64_t v15 = v5[1];
  if (!v15) {
    goto LABEL_18;
  }
  uint64_t v16 = *(unsigned int *)(v15 - 4);
LABEL_2:
  if (v14 == v15 + (v16 << 6)) {
    goto LABEL_3;
  }
LABEL_18:
  int v17 = *(unsigned __int8 *)(v14 + 8);
  if (v17 == 1)
  {
    uint64_t v18 = v14 + 16;
    return *(void **)v18;
  }
  if (v17 == 2) {
    uint64_t v19 = (int8x16_t *)"function";
  }
  else {
    uint64_t v19 = (int8x16_t *)"value";
  }
  if (v17 == 2) {
    uint64_t v20 = 9;
  }
  else {
    uint64_t v20 = 6;
  }
  long long v31 = *(_OWORD *)((char *)a2 + 8);
  int v30 = off_1ECABC030;
  int8x16_t v21 = (_DWORD *)*((void *)a2 + 3);
  if (v21) {
    *v21 += 2;
  }
  int v32 = v21;
  uint64_t result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WGSL::AST::Identifier,WTF::ASCIILiteral>(&v33, (int8x16_t *)"cannot use ", 12, v19, v20, " '", 3, (uint64_t)v21, "' as type", 10);
  if (v33)
  {
    int v34 = v33;
    long long v35 = *(_OWORD *)((char *)a2 + 8);
    uint64_t v23 = *((unsigned int *)this + 33);
    if (v23 == *((_DWORD *)this + 32))
    {
      unint64_t v24 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 120, v23 + 1, (unint64_t)&v34);
      uint64_t v25 = *((void *)this + 15) + 24 * *((unsigned int *)this + 33);
      uint64_t v26 = *(void *)v24;
      *(void *)unint64_t v24 = 0;
      *(void *)uint64_t v25 = v26;
      *(_OWORD *)(v25 + 8) = *(_OWORD *)(v24 + 8);
      unsigned int v27 = v34;
      ++*((_DWORD *)this + 33);
      int v34 = 0;
      if (v27)
      {
        if (*v27 == 2)
        {
          WTF::StringImpl::destroy();
          unsigned int v28 = v32;
          int v30 = off_1ECABC030;
          int v32 = 0;
          if (!v28) {
            goto LABEL_39;
          }
        }
        else
        {
          *v27 -= 2;
          unsigned int v28 = v32;
          int v30 = off_1ECABC030;
          int v32 = 0;
          if (!v28) {
            goto LABEL_39;
          }
        }
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v29 = *((void *)this + 15) + 24 * v23;
      *(void *)uint64_t v29 = v33;
      *(_OWORD *)(v29 + 8) = v35;
      ++*((_DWORD *)this + 33);
      int v34 = 0;
    }
    unsigned int v28 = v32;
    int v30 = off_1ECABC030;
    int v32 = 0;
    if (!v28)
    {
LABEL_39:
      uint64_t v18 = *((void *)this + 14) + 24;
      return *(void **)v18;
    }
LABEL_36:
    if (*v28 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v28 -= 2;
    }
    goto LABEL_39;
  }
  __break(0xC471u);
  return result;
}

uint64_t WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::AST::Identifier const&,char>(uint64_t a1, long long *a2, int8x16_t *a3, uint64_t a4, uint64_t a5, char *a6)
{
  uint64_t v8 = *(void *)(a5 + 24);
  if (a4) {
    unint64_t v9 = a4 - 1;
  }
  else {
    unint64_t v9 = 0;
  }
  if (!v8)
  {
    unint64_t v24 = 0;
    if (!(v9 >> 31))
    {
      char v11 = *a6;
      int v13 = 1;
      goto LABEL_8;
    }
LABEL_35:
    __break(0xC471u);
LABEL_36:
    JUMPOUT(0x1826AFDBCLL);
  }
  *(_DWORD *)v8 += 2;
  unint64_t v24 = (_DWORD *)v8;
  if (v9 >> 31) {
    goto LABEL_35;
  }
  int v10 = *(_DWORD *)(v8 + 4);
  if (v10 < 0) {
    goto LABEL_33;
  }
  char v11 = *a6;
  BOOL v12 = __OFADD__(v10, 1);
  int v13 = v10 + 1;
  if (v12) {
    goto LABEL_33;
  }
LABEL_8:
  if (__OFADD__(v9, v13))
  {
LABEL_33:
    uint64_t v25 = 0;
LABEL_34:
    __break(0xC471u);
    goto LABEL_36;
  }
  BOOL v14 = !v8 || (*(unsigned char *)(v8 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<char,void>>((v9 + v13), v14, a3, v9, v8, v11, &v25);
  uint64_t v15 = v25;
  if (!v25) {
    goto LABEL_34;
  }
  uint64_t v25 = 0;
  uint64_t v26 = v15;
  long long v27 = *a2;
  uint64_t v16 = *(unsigned int *)(a1 + 132);
  if (v16 != *(_DWORD *)(a1 + 128))
  {
    uint64_t v22 = *(void *)(a1 + 120) + 24 * v16;
    *(void *)uint64_t v22 = v15;
    *(_OWORD *)(v22 + 8) = v27;
    ++*(_DWORD *)(a1 + 132);
    uint64_t v26 = 0;
LABEL_20:
    int8x16_t v21 = v25;
    uint64_t v25 = 0;
    if (!v21) {
      goto LABEL_24;
    }
    goto LABEL_21;
  }
  unint64_t v17 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v16 + 1, (unint64_t)&v26);
  uint64_t v18 = *(void *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  uint64_t v19 = *(void *)v17;
  *(void *)unint64_t v17 = 0;
  *(void *)uint64_t v18 = v19;
  *(_OWORD *)(v18 + 8) = *(_OWORD *)(v17 + 8);
  uint64_t v20 = v26;
  ++*(_DWORD *)(a1 + 132);
  uint64_t v26 = 0;
  if (!v20) {
    goto LABEL_20;
  }
  if (*v20 == 2)
  {
    WTF::StringImpl::destroy();
    int8x16_t v21 = v25;
    uint64_t v25 = 0;
    if (!v21) {
      goto LABEL_24;
    }
  }
  else
  {
    *v20 -= 2;
    int8x16_t v21 = v25;
    uint64_t v25 = 0;
    if (!v21) {
      goto LABEL_24;
    }
  }
LABEL_21:
  if (*v21 == 2) {
    WTF::StringImpl::destroy();
  }
  else {
    *v21 -= 2;
  }
LABEL_24:
  uint64_t result = (uint64_t)v24;
  if (v24)
  {
    if (*v24 == 2) {
      return WTF::StringImpl::destroy();
    }
    else {
      *v24 -= 2;
    }
  }
  return result;
}

void WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::ElaboratedTypeExpression *a2, const WTF::StringImpl *a3)
{
  __int16 v5 = WGSL::TypeChecker::lookupType(this, (WGSL::AST::ElaboratedTypeExpression *)((char *)a2 + 64), a3);
  if (*(void **)(*((void *)this + 14) + 24) == v5)
  {
    *((void *)this + 11) = v5;
  }
  else if (v5 && *((_DWORD *)v5 + 12) == 13)
  {
    uint64_t v6 = v5[5];
    if (!v6)
    {
      int v7 = (WGSL::TypeChecker *)std::__throw_bad_function_call[abi:sn180100]();
      WGSL::TypeChecker::visit(v7, v8);
    }
    *((void *)this + 11) = (*(uint64_t (**)(uint64_t, WGSL::AST::ElaboratedTypeExpression *))(*(void *)v6 + 48))(v6, a2);
  }
  else
  {
    *(void *)&long long v9 = "' does not take template arguments";
    *((void *)&v9 + 1) = 35;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 1, (WGSL::AST::ElaboratedTypeExpression *)((char *)a2 + 8), (int8x16_t *)"type '", 7, (uint64_t)v5, &v9);
  }
}

void WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::ReferenceTypeExpression *a2)
{
}

void WGSL::TypeChecker::visit()
{
}

uint64_t WGSL::TypeChecker::vectorFieldAccess(WGSL::Types::Vector const&,WGSL::AST::FieldAccessExpression &)::$_2::operator()(uint64_t result, _DWORD *a2, int a3)
{
  uint64_t v3 = result;
  switch(a3)
  {
    case 'a':
    case 'w':
      if (*a2 <= 3u)
      {
        __break(0xC471u);
        JUMPOUT(0x1826B0220);
      }
      *(unsigned char *)uint64_t result = 0;
      *(_DWORD *)(result + 16) = -1;
      uint64_t v4 = a2[24];
      if (v4 == -1) {
        return result;
      }
      uint64_t result = ((uint64_t (*)(char *, uint64_t, _DWORD *))off_1ECABEE88[v4])(&v8, result, a2 + 20);
      break;
    case 'b':
    case 'z':
      if (*a2 <= 2u)
      {
        __break(0xC471u);
        JUMPOUT(0x1826B0280);
      }
      *(unsigned char *)uint64_t result = 0;
      *(_DWORD *)(result + 16) = -1;
      uint64_t v4 = a2[18];
      if (v4 == -1) {
        return result;
      }
      uint64_t result = ((uint64_t (*)(char *, uint64_t, _DWORD *))off_1ECABEE88[v4])(&v7, result, a2 + 14);
      break;
    case 'g':
    case 'y':
      if (*a2 <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1826B0240);
      }
      *(unsigned char *)uint64_t result = 0;
      *(_DWORD *)(result + 16) = -1;
      uint64_t v4 = a2[12];
      if (v4 == -1) {
        return result;
      }
      uint64_t result = ((uint64_t (*)(char *, uint64_t, _DWORD *))off_1ECABEE88[v4])(&v6, result, a2 + 8);
      break;
    case 'r':
    case 'x':
      if (!*a2)
      {
        __break(0xC471u);
        JUMPOUT(0x1826B0260);
      }
      *(unsigned char *)uint64_t result = 0;
      *(_DWORD *)(result + 16) = -1;
      uint64_t v4 = a2[6];
      if (v4 == -1) {
        return result;
      }
      uint64_t result = ((uint64_t (*)(char *, uint64_t, _DWORD *))off_1ECABEE88[v4])(&v5, result, a2 + 2);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1826B02A0);
  }
  *(_DWORD *)(v3 + 16) = v4;
  return result;
}

uint64_t WGSL::TypeChecker::analyze(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = 0;
  while (2)
  {
    switch((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2))
    {
      case '&':
      case '(':
      case ')':
      case '+':
      case '-':
      case '.':
      case '2':
      case '4':
      case '6':
        goto LABEL_145;
      case '\'':
        uint64_t v35 = *(unsigned int *)(a1 + 148);
        if (v35)
        {
          if (*(_DWORD *)(*(void *)(a1 + 136) + 16 * v35 - 8) != 4)
          {
            int v43 = 2;
            return v43 | v4;
          }
          uint64_t v36 = (long long *)(a2 + 8);
          uint64_t v38 = (_DWORD *)a1;
          uint64_t v39 = 81;
        }
        else
        {
          uint64_t v36 = (long long *)(a2 + 8);
          int v37 = "break statement must be in a loop or switch case";
          uint64_t v38 = (_DWORD *)a1;
          uint64_t v39 = 49;
        }
        WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(v38, 0, v36, v37, v39);
        int v43 = 2;
        return v43 | v4;
      case '*':
        uint64_t v40 = *(unsigned int *)(a2 + 52);
        if (!v40) {
          goto LABEL_145;
        }
        int v41 = *(uint64_t **)(a2 + 40);
        uint64_t v42 = 8 * v40;
        int v43 = 8;
        do
        {
          uint64_t v44 = *v41++;
          int v45 = WGSL::TypeChecker::analyze(a1, v44) | v43 & 0xFFFFFFF7;
          if ((v43 & 8) != 0) {
            int v43 = v45;
          }
          v42 -= 8;
        }
        while (v42);
        return v43 | v4;
      case ',':
        char v46 = 0;
        LODWORD(v47) = *(_DWORD *)(a1 + 148);
        int v48 = v47;
        while (2)
        {
          unsigned int v49 = v48 - 1;
          if (v48 - 1 >= 0)
          {
            if (v47 <= v49)
            {
              __break(0xC471u);
              JUMPOUT(0x1826B0D08);
            }
            unint64_t v50 = (_DWORD *)(*(void *)(a1 + 136) + 16 * v49);
            int v51 = v50[2];
            switch(v51)
            {
              case 0:
LABEL_59:
                --v48;
                if (v51) {
                  goto LABEL_143;
                }
                continue;
              case 1:
                if (*(unsigned char *)(*(void *)v50 + 96))
                {
                  *(unsigned char *)(*(void *)v50 + 104) = 1;
                  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2) != 44)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1826B0CDCLL);
                  }
                  *(unsigned char *)(a2 + 24) = 1;
                  unint64_t v47 = *(unsigned int *)(a1 + 148);
                  if (v48 < v47)
                  {
                    uint64_t v52 = *(void *)(a1 + 136);
                    unint64_t v53 = (_DWORD *)(v52 + 16 * v48);
                    if (v53[2]) {
                      goto LABEL_219;
                    }
                    *(unsigned char *)(*(void *)v53 + 24) = 1;
                    unint64_t v54 = v48 + 1;
                    if (v54 < v47)
                    {
                      uint64_t v55 = (_DWORD *)(v52 + 16 * v48 + 24);
                      while (!*v55)
                      {
                        char v46 = 1;
                        *(unsigned char *)(*((void *)v55 - 1) + 25) = 1;
                        ++v54;
                        v55 += 4;
                        if (v54 >= v47) {
                          goto LABEL_59;
                        }
                      }
LABEL_219:
                      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_220:
                      __break(0xC471u);
                      JUMPOUT(0x1826B0D00);
                    }
                  }
                }
                break;
              case 4:
                WGSL::TypeChecker::typeError<WTF::ASCIILiteral>((_DWORD *)a1, 0, (long long *)(a2 + 8), "continuing blocks must not contain a continue statement", 56);
                int v43 = 4;
                return v43 | v4;
            }
LABEL_202:
            int v43 = 4;
            return v43 | v4;
          }
          break;
        }
LABEL_143:
        if (v46) {
          goto LABEL_202;
        }
        WGSL::TypeChecker::typeError<WTF::ASCIILiteral>((_DWORD *)a1, 0, (long long *)(a2 + 8), "continue statement must be in a loop", 37);
LABEL_145:
        int v43 = 8;
        return v43 | v4;
      case '/':
        if (*(void *)(a2 + 32)) {
          int v12 = 10;
        }
        else {
          int v12 = 0;
        }
        unint64_t v13 = *(unsigned int *)(a1 + 148);
        if (v13 == *(_DWORD *)(a1 + 144))
        {
          unint64_t v14 = v13 + (v13 >> 2);
          if (v14 >= 0x10) {
            unint64_t v15 = v14 + 1;
          }
          else {
            unint64_t v15 = 16;
          }
          if (v15 <= v13 + 1) {
            unint64_t v16 = v13 + 1;
          }
          else {
            unint64_t v16 = v15;
          }
          if (v16 >> 28)
          {
            __break(0xC471u);
            JUMPOUT(0x1826B0D38);
          }
          unint64_t v17 = *(WTF **)(a1 + 136);
          uint64_t v18 = (WTF *)WTF::fastMalloc((WTF *)(16 * v16));
          *(_DWORD *)(a1 + 144) = v16;
          *(void *)(a1 + 136) = v18;
          if (v13)
          {
            uint64_t v20 = 16 * v13;
            int8x16_t v21 = v17;
            do
            {
              long long v22 = *(_OWORD *)v21;
              int8x16_t v21 = (WTF *)((char *)v21 + 16);
              *(_OWORD *)uint64_t v18 = v22;
              uint64_t v18 = (WTF *)((char *)v18 + 16);
              v20 -= 16;
            }
            while (v20);
            uint64_t v18 = *(WTF **)(a1 + 136);
          }
          if (v17)
          {
            if (v18 == v17)
            {
              *(void *)(a1 + 136) = 0;
              *(_DWORD *)(a1 + 144) = 0;
            }
            WTF::fastFree(v17, v19);
            uint64_t v18 = *(WTF **)(a1 + 136);
          }
          unint64_t v13 = *(unsigned int *)(a1 + 148);
          uint64_t v23 = (uint64_t)v18 + 16 * v13;
        }
        else
        {
          uint64_t v23 = *(void *)(a1 + 136) + 16 * v13;
        }
        *(void *)uint64_t v23 = a2;
        *(_DWORD *)(v23 + 8) = 2;
        int v81 = v13 + 1;
        *(_DWORD *)(a1 + 148) = v13 + 1;
        uint64_t v82 = *(void *)(a2 + 48);
        uint64_t v83 = *(unsigned int *)(v82 + 52);
        if (v83)
        {
          uint64_t v84 = *(uint64_t **)(v82 + 40);
          uint64_t v85 = 8 * v83;
          int v86 = 8;
          do
          {
            uint64_t v87 = *v84++;
            int v88 = WGSL::TypeChecker::analyze(a1, v87) | v86 & 0xFFFFFFF7;
            if ((v86 & 8) != 0) {
              int v86 = v88;
            }
            v85 -= 8;
          }
          while (v85);
          int v81 = *(_DWORD *)(a1 + 148);
        }
        else
        {
          int v86 = 8;
        }
        if (!v81)
        {
          __break(0xC471u);
          JUMPOUT(0x1826B0D10);
        }
        int v112 = v86 | v12;
        *(_DWORD *)(a1 + 148) = v81 - 1;
        if (((v86 | v12) & 2) != 0)
        {
          unsigned int v113 = v86 & 0xFFFFFFF1;
          goto LABEL_214;
        }
        if ((v112 & 0xF3) != 0)
        {
          int v43 = v112 & 0xFFFFFFF3;
          return v43 | v4;
        }
        unsigned int v144 = (long long *)(a2 + 8);
        __int16 v145 = "for-loop does not exit";
        unint64_t v146 = (_DWORD *)a1;
        uint64_t v147 = 23;
        goto LABEL_217;
      case '0':
        uint64_t v5 = *(void *)(a2 + 32);
        uint64_t v6 = *(unsigned int *)(v5 + 52);
        if (v6)
        {
          char v7 = *(uint64_t **)(v5 + 40);
          uint64_t v8 = 8 * v6;
          int v9 = 8;
          do
          {
            uint64_t v10 = *v7++;
            int v11 = WGSL::TypeChecker::analyze(a1, v10) | v9 & 0xFFFFFFF7;
            if ((v9 & 8) != 0) {
              int v9 = v11;
            }
            v8 -= 8;
          }
          while (v8);
          a2 = *(void *)(a2 + 40);
          if (!a2)
          {
LABEL_112:
            int v43 = v9 | 8;
            return v43 | v4;
          }
        }
        else
        {
          int v9 = 8;
          a2 = *(void *)(a2 + 40);
          if (!a2) {
            goto LABEL_112;
          }
        }
        v4 |= v9;
        continue;
      case '1':
        unint64_t v70 = *(unsigned int *)(a1 + 148);
        if (v70 == *(_DWORD *)(a1 + 144))
        {
          unint64_t v71 = v70 + (v70 >> 2);
          if (v71 >= 0x10) {
            unint64_t v72 = v71 + 1;
          }
          else {
            unint64_t v72 = 16;
          }
          if (v72 <= v70 + 1) {
            unint64_t v73 = v70 + 1;
          }
          else {
            unint64_t v73 = v72;
          }
          if (v73 >> 28)
          {
            __break(0xC471u);
            JUMPOUT(0x1826B0D50);
          }
          int v74 = *(WTF **)(a1 + 136);
          uint64_t v75 = (WTF *)WTF::fastMalloc((WTF *)(16 * v73));
          *(_DWORD *)(a1 + 144) = v73;
          *(void *)(a1 + 136) = v75;
          if (v70)
          {
            uint64_t v77 = 16 * v70;
            uint64_t v78 = v74;
            do
            {
              long long v79 = *(_OWORD *)v78;
              uint64_t v78 = (WTF *)((char *)v78 + 16);
              *(_OWORD *)uint64_t v75 = v79;
              uint64_t v75 = (WTF *)((char *)v75 + 16);
              v77 -= 16;
            }
            while (v77);
            uint64_t v75 = *(WTF **)(a1 + 136);
          }
          if (v74)
          {
            if (v75 == v74)
            {
              *(void *)(a1 + 136) = 0;
              *(_DWORD *)(a1 + 144) = 0;
            }
            WTF::fastFree(v74, v76);
            uint64_t v75 = *(WTF **)(a1 + 136);
          }
          unint64_t v70 = *(unsigned int *)(a1 + 148);
          uint64_t v80 = (uint64_t)v75 + 16 * v70;
        }
        else
        {
          uint64_t v80 = *(void *)(a1 + 136) + 16 * v70;
        }
        *(void *)uint64_t v80 = a2;
        *(_DWORD *)(v80 + 8) = 1;
        unsigned int v104 = v70 + 1;
        *(_DWORD *)(a1 + 148) = v70 + 1;
        uint64_t v105 = *(unsigned int *)(a2 + 52);
        if (!v105)
        {
          int v108 = 8;
          if (!*(unsigned char *)(a2 + 96)) {
            goto LABEL_209;
          }
LABEL_173:
          uint64_t v124 = a2 + 56;
          if (v104 == *(_DWORD *)(a1 + 144))
          {
            unint64_t v125 = v104 + ((unint64_t)v104 >> 2);
            if (v125 >= 0x10) {
              unint64_t v126 = v125 + 1;
            }
            else {
              unint64_t v126 = 16;
            }
            if (v126 <= (unint64_t)v104 + 1) {
              unint64_t v127 = v104 + 1;
            }
            else {
              unint64_t v127 = v126;
            }
            if (v127 >> 28)
            {
              __break(0xC471u);
              goto LABEL_232;
            }
            int v128 = *(WTF **)(a1 + 136);
            uint16x8_t v129 = (WTF *)WTF::fastMalloc((WTF *)(16 * v127));
            *(_DWORD *)(a1 + 144) = v127;
            *(void *)(a1 + 136) = v129;
            if (v104)
            {
              uint64_t v131 = 16 * v104;
              unint64_t v132 = v128;
              do
              {
                long long v133 = *(_OWORD *)v132;
                unint64_t v132 = (WTF *)((char *)v132 + 16);
                *(_OWORD *)uint16x8_t v129 = v133;
                uint16x8_t v129 = (WTF *)((char *)v129 + 16);
                v131 -= 16;
              }
              while (v131);
              uint16x8_t v129 = *(WTF **)(a1 + 136);
            }
            if (v128)
            {
              if (v129 == v128)
              {
                *(void *)(a1 + 136) = 0;
                *(_DWORD *)(a1 + 144) = 0;
              }
              WTF::fastFree(v128, v130);
              uint16x8_t v129 = *(WTF **)(a1 + 136);
            }
            uint64_t v134 = *(unsigned int *)(a1 + 148);
            uint64_t v135 = (_OWORD *)((char *)v129 + 16 * v134);
            *(void *)uint64_t v135 = v124;
            *((_DWORD *)v135 + 2) = 4;
            LODWORD(v135) = *(unsigned __int8 *)(a2 + 96);
            unsigned int v136 = v134 + 1;
            *(_DWORD *)(a1 + 148) = v136;
            if (!v135)
            {
LABEL_232:
              __break(1u);
              JUMPOUT(0x1826B0D5CLL);
            }
          }
          else
          {
            uint64_t v137 = *(void *)(a1 + 136) + 16 * v104;
            *(void *)uint64_t v137 = v124;
            *(_DWORD *)(v137 + 8) = 4;
            unsigned int v136 = v104 + 1;
            *(_DWORD *)(a1 + 148) = v104 + 1;
          }
          uint64_t v138 = *(unsigned int *)(a2 + 68);
          if (v138)
          {
            uint16x8_t v139 = *(uint64_t **)(a2 + 56);
            uint64_t v140 = 8 * v138;
            int v141 = 8;
            do
            {
              uint64_t v142 = *v139++;
              int v143 = WGSL::TypeChecker::analyze(a1, v142) | v141 & 0xFFFFFFF7;
              if ((v141 & 8) != 0) {
                int v141 = v143;
              }
              v140 -= 8;
            }
            while (v140);
            unsigned int v136 = *(_DWORD *)(a1 + 148);
          }
          else
          {
            int v141 = 8;
          }
          if (!v136)
          {
            __break(0xC471u);
            JUMPOUT(0x1826B0D30);
          }
          unsigned int v104 = v136 - 1;
          *(_DWORD *)(a1 + 148) = v136 - 1;
          if (*(unsigned char *)(a2 + 96))
          {
            if (*(void *)(a2 + 88)) {
              v108 |= v141 | 6;
            }
            else {
              v108 |= v141;
            }
            goto LABEL_209;
          }
          goto LABEL_232;
        }
        uint64_t v106 = *(uint64_t **)(a2 + 40);
        uint64_t v107 = 8 * v105;
        int v108 = 8;
        do
        {
          uint64_t v109 = *v106++;
          int v110 = WGSL::TypeChecker::analyze(a1, v109) | v108 & 0xFFFFFFF7;
          if ((v108 & 8) != 0) {
            int v108 = v110;
          }
          v107 -= 8;
        }
        while (v107);
        unsigned int v104 = *(_DWORD *)(a1 + 148);
        if (*(unsigned char *)(a2 + 96)) {
          goto LABEL_173;
        }
LABEL_209:
        if (!v104)
        {
          __break(0xC471u);
          JUMPOUT(0x1826B0D28);
        }
        *(_DWORD *)(a1 + 148) = v104 - 1;
        if ((v108 & 2) != 0)
        {
          unsigned int v113 = v108 & 0xFFFFFFF1;
LABEL_214:
          int v43 = v113 | 8;
        }
        else if ((v108 & 0xF3) != 0)
        {
          int v43 = v108 & 0xFFFFFFF3;
        }
        else
        {
          unsigned int v144 = (long long *)(a2 + 8);
          __int16 v145 = "loop does not exit";
          unint64_t v146 = (_DWORD *)a1;
          uint64_t v147 = 19;
LABEL_217:
          WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(v146, 0, v144, v145, v147);
          int v43 = 0;
        }
        return v43 | v4;
      case '3':
        uint64_t v67 = *(unsigned int *)(a1 + 148);
        if (v67)
        {
          uint64_t v68 = (int *)(*(void *)(a1 + 136) + 8);
          int v43 = 1;
          while (1)
          {
            int v69 = *v68;
            v68 += 4;
            if (v69 == 4) {
              break;
            }
            if (!--v67) {
              return v43 | v4;
            }
          }
          WGSL::TypeChecker::typeError<WTF::ASCIILiteral>((_DWORD *)a1, 0, (long long *)(a2 + 8), "continuing blocks must not contain a return statement", 54);
          int v43 = 1;
        }
        else
        {
          int v43 = 1;
        }
        return v43 | v4;
      case '5':
        unint64_t v56 = *(unsigned int *)(a1 + 148);
        if (v56 == *(_DWORD *)(a1 + 144))
        {
          unint64_t v57 = v56 + (v56 >> 2);
          if (v57 >= 0x10) {
            unint64_t v58 = v57 + 1;
          }
          else {
            unint64_t v58 = 16;
          }
          if (v58 <= v56 + 1) {
            unint64_t v59 = v56 + 1;
          }
          else {
            unint64_t v59 = v58;
          }
          if (v59 >> 28)
          {
            __break(0xC471u);
            JUMPOUT(0x1826B0D48);
          }
          BOOL v60 = *(WTF **)(a1 + 136);
          uint64_t v61 = (WTF *)WTF::fastMalloc((WTF *)(16 * v59));
          *(_DWORD *)(a1 + 144) = v59;
          *(void *)(a1 + 136) = v61;
          if (v56)
          {
            uint64_t v63 = 16 * v56;
            int v64 = v60;
            do
            {
              long long v65 = *(_OWORD *)v64;
              int v64 = (WTF *)((char *)v64 + 16);
              *(_OWORD *)uint64_t v61 = v65;
              uint64_t v61 = (WTF *)((char *)v61 + 16);
              v63 -= 16;
            }
            while (v63);
            uint64_t v61 = *(WTF **)(a1 + 136);
          }
          if (v60)
          {
            if (v61 == v60)
            {
              *(void *)(a1 + 136) = 0;
              *(_DWORD *)(a1 + 144) = 0;
            }
            WTF::fastFree(v60, v62);
            uint64_t v61 = *(WTF **)(a1 + 136);
          }
          unint64_t v56 = *(unsigned int *)(a1 + 148);
          uint64_t v66 = (uint64_t)v61 + 16 * v56;
        }
        else
        {
          uint64_t v66 = *(void *)(a1 + 136) + 16 * v56;
        }
        *(void *)uint64_t v66 = a2;
        *(_DWORD *)(v66 + 8) = 0;
        *(_DWORD *)(a1 + 148) = v56 + 1;
        uint64_t v97 = *(void *)(a2 + 88);
        uint64_t v98 = *(unsigned int *)(v97 + 52);
        if (v98)
        {
          uint16x8_t v99 = *(uint64_t **)(v97 + 40);
          uint64_t v100 = 8 * v98;
          int v43 = 8;
          do
          {
            uint64_t v101 = *v99++;
            int v102 = WGSL::TypeChecker::analyze(a1, v101) | v43 & 0xFFFFFFF7;
            if ((v43 & 8) != 0) {
              int v43 = v102;
            }
            v100 -= 8;
          }
          while (v100);
          unsigned int v103 = *(_DWORD *)(a2 + 68);
          if (!v103)
          {
LABEL_168:
            int v123 = *(_DWORD *)(a1 + 148);
            if (!v123)
            {
              __break(0xC471u);
              JUMPOUT(0x1826B0D20);
            }
            *(_DWORD *)(a1 + 148) = v123 - 1;
            if ((v43 & 2) != 0) {
              int v43 = v43 & 0xFFFFFFF5 | 8;
            }
            return v43 | v4;
          }
        }
        else
        {
          int v43 = 8;
          unsigned int v103 = *(_DWORD *)(a2 + 68);
          if (!v103) {
            goto LABEL_168;
          }
        }
        uint64_t v114 = *(void *)(a2 + 56);
        uint64_t v115 = v114 + 24 * v103;
        do
        {
          uint64_t v117 = *(void *)(v114 + 16);
          uint64_t v118 = *(unsigned int *)(v117 + 52);
          if (v118)
          {
            int v119 = *(uint64_t **)(v117 + 40);
            uint64_t v120 = 8 * v118;
            int v116 = 8;
            do
            {
              uint64_t v121 = *v119++;
              int v122 = WGSL::TypeChecker::analyze(a1, v121) | v116 & 0xFFFFFFF7;
              if ((v116 & 8) != 0) {
                int v116 = v122;
              }
              v120 -= 8;
            }
            while (v120);
          }
          else
          {
            int v116 = 8;
          }
          v43 |= v116;
          v114 += 24;
        }
        while (v114 != v115);
        goto LABEL_168;
      case '7':
        unint64_t v24 = *(unsigned int *)(a1 + 148);
        if (v24 == *(_DWORD *)(a1 + 144))
        {
          unint64_t v25 = v24 + (v24 >> 2);
          if (v25 >= 0x10) {
            unint64_t v26 = v25 + 1;
          }
          else {
            unint64_t v26 = 16;
          }
          if (v26 <= v24 + 1) {
            unint64_t v27 = v24 + 1;
          }
          else {
            unint64_t v27 = v26;
          }
          if (v27 >> 28)
          {
            __break(0xC471u);
            JUMPOUT(0x1826B0D40);
          }
          unsigned int v28 = *(WTF **)(a1 + 136);
          uint64_t v29 = (WTF *)WTF::fastMalloc((WTF *)(16 * v27));
          *(_DWORD *)(a1 + 144) = v27;
          *(void *)(a1 + 136) = v29;
          if (v24)
          {
            uint64_t v31 = 16 * v24;
            int v32 = v28;
            do
            {
              long long v33 = *(_OWORD *)v32;
              int v32 = (WTF *)((char *)v32 + 16);
              *(_OWORD *)uint64_t v29 = v33;
              uint64_t v29 = (WTF *)((char *)v29 + 16);
              v31 -= 16;
            }
            while (v31);
            uint64_t v29 = *(WTF **)(a1 + 136);
          }
          if (v28)
          {
            if (v29 == v28)
            {
              *(void *)(a1 + 136) = 0;
              *(_DWORD *)(a1 + 144) = 0;
            }
            WTF::fastFree(v28, v30);
            uint64_t v29 = *(WTF **)(a1 + 136);
          }
          unint64_t v24 = *(unsigned int *)(a1 + 148);
          uint64_t v34 = (uint64_t)v29 + 16 * v24;
        }
        else
        {
          uint64_t v34 = *(void *)(a1 + 136) + 16 * v24;
        }
        *(void *)uint64_t v34 = a2;
        *(_DWORD *)(v34 + 8) = 3;
        int v89 = v24 + 1;
        *(_DWORD *)(a1 + 148) = v24 + 1;
        uint64_t v90 = *(void *)(a2 + 32);
        uint64_t v91 = *(unsigned int *)(v90 + 52);
        if (v91)
        {
          uint64_t v92 = *(uint64_t **)(v90 + 40);
          uint64_t v93 = 8 * v91;
          int v94 = 8;
          do
          {
            uint64_t v95 = *v92++;
            int v96 = WGSL::TypeChecker::analyze(a1, v95) | v94 & 0xFFFFFFF7;
            if ((v94 & 8) != 0) {
              int v94 = v96;
            }
            v93 -= 8;
          }
          while (v93);
          int v89 = *(_DWORD *)(a1 + 148);
          int v43 = v94 & 0xFFFFFFF1 | 8;
        }
        else
        {
          int v43 = 8;
        }
        if (!v89)
        {
          __break(0xC471u);
          JUMPOUT(0x1826B0D18);
        }
        *(_DWORD *)(a1 + 148) = v89 - 1;
        return v43 | v4;
      default:
        goto LABEL_220;
    }
  }
}

uint64_t WGSL::TypeChecker::convertValueImpl(void *a1, unsigned int **a2, const WTF::StringImpl *a3, __n128 a4)
{
  int v4 = *((_DWORD *)a1 + 12);
  if (v4 == -1) {
    uint64_t v5 = -1;
  }
  else {
    uint64_t v5 = *((unsigned int *)a1 + 12);
  }
  switch(v5)
  {
    case 1:
      if (v4 != 1 || *((_DWORD *)a2 + 4) != 8) {
        goto LABEL_203;
      }
      int v9 = *a2;
      if (*a2) {
        uint64_t v10 = (uint64_t)(*a2 + 2);
      }
      else {
        uint64_t v10 = 0;
      }
      if (v9)
      {
        uint64_t v11 = (uint64_t)&(*a2)[6 * *v9 + 2];
        if (v10 == v11) {
          return 1;
        }
      }
      else
      {
        uint64_t v11 = 0;
        if (!v10) {
          return 1;
        }
      }
      do
      {
        uint64_t result = WGSL::TypeChecker::convertValueImpl(*a1, v10);
        v10 += 24;
        if (result) {
          _ZF = v10 == v11;
        }
        else {
          _ZF = 1;
        }
      }
      while (!_ZF);
      return result;
    case 2:
      if (v4 != 2 || *((_DWORD *)a2 + 4) != 9) {
        goto LABEL_203;
      }
      int v12 = a2[1];
      if (v12) {
        unint64_t v13 = v12 + 2;
      }
      else {
        unint64_t v13 = 0;
      }
      if (v12)
      {
        uint64_t v14 = (uint64_t)&v12[6 * *v12 + 2];
        if (v13 == (unsigned int *)v14) {
          return 1;
        }
      }
      else
      {
        uint64_t v14 = 0;
        if (!v13) {
          return 1;
        }
      }
      do
      {
        uint64_t result = WGSL::TypeChecker::convertValueImpl(*a1, v13);
        v13 += 6;
        if (result) {
          BOOL v29 = v13 == (unsigned int *)v14;
        }
        else {
          BOOL v29 = 1;
        }
      }
      while (!v29);
      return result;
    case 3:
      if (v4 != 3 || *((_DWORD *)a2 + 4) != 7) {
        goto LABEL_203;
      }
      unint64_t v15 = *a2;
      if (*a2) {
        uint64_t v16 = (uint64_t)(*a2 + 2);
      }
      else {
        uint64_t v16 = 0;
      }
      if (v15)
      {
        uint64_t v17 = (uint64_t)&(*a2)[6 * *v15 + 2];
        if (v16 == v17) {
          return 1;
        }
      }
      else
      {
        uint64_t v17 = 0;
        if (!v16) {
          return 1;
        }
      }
      do
      {
        uint64_t result = WGSL::TypeChecker::convertValueImpl(*a1, v16);
        v16 += 24;
        if (result) {
          BOOL v30 = v16 == v17;
        }
        else {
          BOOL v30 = 1;
        }
      }
      while (!v30);
      return result;
    case 4:
      if (v4 != 4 || *((_DWORD *)a2 + 4) != 10) {
        goto LABEL_203;
      }
      uint64_t v18 = a1[1];
      if (v18)
      {
        uint64_t v19 = *(unsigned int *)(v18 - 4);
        uint64_t v20 = v18 + 16 * v19;
        if (!*(_DWORD *)(v18 - 12))
        {
          uint64_t v21 = v18 + 16 * v19;
          uint64_t v20 = v21;
LABEL_75:
          uint64_t v31 = v18 + 16 * *(unsigned int *)(v18 - 4);
          if (v31 != v21) {
            goto LABEL_85;
          }
          return 1;
        }
        uint64_t v21 = a1[1];
        if (v19)
        {
          uint64_t v22 = 16 * v19;
          uint64_t v21 = a1[1];
          do
          {
            if ((unint64_t)(*(void *)v21 + 1) > 1) {
              goto LABEL_74;
            }
            v21 += 16;
            v22 -= 16;
          }
          while (v22);
          uint64_t v21 = v20;
          goto LABEL_75;
        }
      }
      else
      {
        uint64_t v21 = 0;
        uint64_t v20 = 0;
      }
LABEL_74:
      if (v18) {
        goto LABEL_75;
      }
      uint64_t v31 = 0;
      if (!v21) {
        return 1;
      }
LABEL_85:
      uint64_t v33 = (uint64_t)*a2;
      if (!*a2)
      {
LABEL_184:
        __break(0xC471u);
        JUMPOUT(0x1826B1690);
      }
      int v34 = *(_DWORD *)(v33 - 8);
      unsigned int v35 = *(_DWORD *)(*(void *)v21 + 16);
      if (v35 < 0x100) {
        unsigned int v36 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v21);
      }
      else {
        unsigned int v36 = v35 >> 8;
      }
      for (i = 0; ; unsigned int v36 = i + v38)
      {
        uint64_t v38 = v36 & v34;
        uint64_t v39 = *(WTF **)(v33 + 32 * v38);
        if (v39 != (WTF *)-1)
        {
          if (!v39)
          {
            uint64_t v41 = (uint64_t)*a2;
            if (!*a2) {
              goto LABEL_184;
            }
            uint64_t v42 = *(unsigned int *)(v41 - 4);
            uint64_t v40 = v41 + 32 * v42;
LABEL_98:
            if (v40 == v41 + 32 * v42) {
              goto LABEL_184;
            }
LABEL_99:
            uint64_t result = WGSL::TypeChecker::convertValueImpl(*(void *)(v21 + 8), v40 + 8);
            if (!result) {
              return result;
            }
            uint64_t v43 = v21 + 16;
            uint64_t v21 = v20;
            if (v43 != v20)
            {
              uint64_t v21 = v43;
              while ((unint64_t)(*(void *)v21 + 1) <= 1)
              {
                v21 += 16;
                if (v21 == v20)
                {
                  uint64_t v21 = v20;
                  break;
                }
              }
            }
            if (v21 == v31) {
              return result;
            }
            goto LABEL_85;
          }
          if (WTF::equal(v39, *(const WTF::StringImpl **)v21, a3))
          {
            uint64_t v40 = v33 + 32 * v38;
            uint64_t v41 = (uint64_t)*a2;
            if (*a2)
            {
              uint64_t v42 = *(unsigned int *)(v41 - 4);
              goto LABEL_98;
            }
            goto LABEL_99;
          }
        }
        ++i;
      }
    case 5:
      if (v4 != 5 || *((_DWORD *)a2 + 4) != 10) {
        goto LABEL_203;
      }
      uint64_t v23 = (uint64_t)*a2;
      if (*a2)
      {
        uint64_t v24 = *(unsigned int *)(v23 - 4);
        unint64_t v25 = (void *)(v23 + 32 * v24);
        if (!*(_DWORD *)(v23 - 12))
        {
          unint64_t v26 = (void *)(v23 + 32 * v24);
          unint64_t v25 = v26;
          if (v23) {
            goto LABEL_79;
          }
LABEL_106:
          int v32 = 0;
          if (!v26) {
            return 1;
          }
LABEL_107:
          uint64_t v44 = WGSL::Types::PrimitiveStruct::keys[*((unsigned __int8 *)a1 + 8)];
          while (1)
          {
            uint64_t v45 = *v26;
            if (*v26)
            {
              char v46 = *(unsigned __int8 **)(v45 + 8);
              unint64_t v47 = *(unsigned int *)(v45 + 4) | ((unint64_t)((*(_DWORD *)(v45 + 16) >> 2) & 1) << 32);
              BOOL v48 = WTF::operator==(v46, v47, *(unsigned __int8 **)v44, *((void *)v44 + 1));
              unsigned int v49 = v44;
              if (v48) {
                goto LABEL_114;
              }
            }
            else
            {
              char v46 = 0;
              unint64_t v47 = 0x100000000;
              BOOL v50 = WTF::operator==(0, 0x100000000, *(unsigned __int8 **)v44, *((void *)v44 + 1));
              unsigned int v49 = v44;
              if (v50) {
                goto LABEL_114;
              }
            }
            BOOL v51 = WTF::operator==(v46, v47, *((unsigned __int8 **)v44 + 3), *((void *)v44 + 4));
            unsigned int v49 = v44 + 24;
            if (!v51)
            {
              __break(0xC471u);
              JUMPOUT(0x1826B1650);
            }
LABEL_114:
            uint64_t v52 = *((unsigned int *)v49 + 4);
            unint64_t v53 = (_DWORD *)a1[2];
            if (*v53 <= v52)
            {
              __break(0xC471u);
              JUMPOUT(0x1826B1670);
            }
            uint64_t result = WGSL::TypeChecker::convertValueImpl(*(void *)&v53[2 * v52 + 2], v26 + 1);
            if (result)
            {
              unint64_t v54 = v26 + 4;
              unint64_t v26 = v25;
              if (v54 != v25)
              {
                unint64_t v26 = v54;
                while ((unint64_t)(*v26 + 1) <= 1)
                {
                  v26 += 4;
                  if (v26 == v25)
                  {
                    unint64_t v26 = v25;
                    break;
                  }
                }
              }
              if (v26 != v32) {
                continue;
              }
            }
            return result;
          }
        }
        unint64_t v26 = *a2;
        if (v24)
        {
          uint64_t v27 = 32 * v24;
          unint64_t v26 = *a2;
          do
          {
            if ((unint64_t)(*v26 + 1) > 1) {
              goto LABEL_78;
            }
            v26 += 4;
            v27 -= 32;
          }
          while (v27);
          unint64_t v26 = v25;
          if (!v23) {
            goto LABEL_106;
          }
LABEL_79:
          int v32 = (void *)(v23 + 32 * *(unsigned int *)(v23 - 4));
          if (v32 == v26) {
            return 1;
          }
          goto LABEL_107;
        }
      }
      else
      {
        unint64_t v26 = 0;
        unint64_t v25 = 0;
      }
LABEL_78:
      if (v23) {
        goto LABEL_79;
      }
      goto LABEL_106;
    case 6:
      if (v4 == 6)
      {
        __break(0xC471u);
        JUMPOUT(0x1826B16B8);
      }
      goto LABEL_203;
    case 7:
      if (v4 == 7)
      {
        __break(0xC471u);
        JUMPOUT(0x1826B16E0);
      }
      goto LABEL_203;
    case 8:
      if (v4 == 8)
      {
        __break(0xC471u);
        JUMPOUT(0x1826B1708);
      }
      goto LABEL_203;
    case 9:
      if (v4 == 9)
      {
        __break(0xC471u);
        JUMPOUT(0x1826B1730);
      }
      goto LABEL_203;
    case 10:
      if (v4 == 10)
      {
        __break(0xC471u);
        JUMPOUT(0x1826B1758);
      }
      goto LABEL_203;
    case 11:
      if (v4 == 11)
      {
        __break(0xC471u);
        JUMPOUT(0x1826B1780);
      }
      goto LABEL_203;
    case 12:
      if (v4 == 12)
      {
        __break(0xC471u);
        JUMPOUT(0x1826B17A8);
      }
      goto LABEL_203;
    case 13:
      if (v4 == 13)
      {
        __break(0xC471u);
        JUMPOUT(0x1826B17D0);
      }
      goto LABEL_203;
    case 14:
      if (v4 == 14)
      {
        __break(0xC471u);
        JUMPOUT(0x1826B17F8);
      }
      goto LABEL_203;
    default:
      if (v4)
      {
LABEL_203:
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_204;
      }
      break;
  }
  uint64_t result = 0;
  switch(*(unsigned char *)a1)
  {
    case 0:
      if (*((_DWORD *)a2 + 4) != 5)
      {
        __break(0xC471u);
        JUMPOUT(0x1826B0E58);
      }
      return 1;
    case 1:
      int v55 = *((_DWORD *)a2 + 4);
      if (v55 == 3) {
        return 1;
      }
      if (v55 != 5 || *a2 != (unsigned int *)(int)*a2) {
        return 0;
      }
      *(_DWORD *)a2 = *a2;
      int v56 = 3;
      goto LABEL_140;
    case 2:
      int v57 = *((_DWORD *)a2 + 4);
      if (v57 == 4) {
        return 1;
      }
      if (v57 != 5 || (unint64_t)*a2 >> 32) {
        return 0;
      }
      *(_DWORD *)a2 = *a2;
      int v56 = 4;
      goto LABEL_140;
    case 3:
      int v60 = *((_DWORD *)a2 + 4);
      if (v60 != 2)
      {
        if (v60 == 5)
        {
          double v61 = (double)(uint64_t)*a2;
          WGSL::convertFloat<double,double>(double)::max = 0x7FEFFFFFFFFFFFFFLL;
          WGSL::convertFloat<double,double>(double)::lowest = 0xFFEFFFFFFFFFFFFFLL;
          *(double *)a2 = v61;
          int v56 = 2;
LABEL_140:
          *((_DWORD *)a2 + 4) = v56;
          return 1;
        }
LABEL_204:
        __break(0xC471u);
        JUMPOUT(0x1826B181CLL);
      }
      double v65 = *(double *)a2;
      WGSL::convertFloat<double,double>(double)::max = 0x7FEFFFFFFFFFFFFFLL;
      WGSL::convertFloat<double,double>(double)::lowest = 0xFFEFFFFFFFFFFFFFLL;
      BOOL v66 = v65 <= 1.79769313e308;
      if (v65 < -1.79769313e308) {
        return 0;
      }
      return v66;
    case 4:
      uint64_t v62 = *((unsigned int *)a2 + 4);
      if (v62 != 1)
      {
        if (v62 == 5)
        {
          uint64_t v70 = (uint64_t)*a2;
          WGSL::convertFloat<half,double>(double)::max = 31743;
          WGSL::convertFloat<half,double>(double)::lowest = -1025;
          if ((unint64_t)(v70 - 65505) < 0xFFFFFFFFFFFE003FLL) {
            return 0;
          }
          _D0 = (double)v70;
          goto LABEL_177;
        }
        if (v62 == 2)
        {
          _D0 = *(double *)a2;
          WGSL::convertFloat<half,double>(double)::max = 31743;
          WGSL::convertFloat<half,double>(double)::lowest = -1025;
          if (_D0 <= 65504.0 && _D0 >= -65504.0)
          {
LABEL_177:
            __asm { FCVT            H8, D0 }
            ((void (*)(_DWORD *, unsigned int **))off_1ECABEC60[v62])(v76, a2);
            *(_WORD *)a2 = _H8;
            uint64_t result = 1;
            *((_DWORD *)a2 + 4) = 1;
            return result;
          }
        }
        return 0;
      }
      uint64_t result = 0;
      a4.n128_u16[0] = *(_WORD *)a2;
      _VF = *(short float *)a2 < COERCE_SHORT_FLOAT(-1025) || *(short float *)a4.n128_u16 > COERCE_SHORT_FLOAT(31743);
      unsigned __int32 v73 = a4.n128_u32[0] | 0x10000;
      if (_VF) {
        unsigned __int32 v73 = 0;
      }
      if (v73 >= 0x10000)
      {
        *(_WORD *)a2 = v73;
        return 1;
      }
      return result;
    case 5:
      uint64_t v58 = *((unsigned int *)a2 + 4);
      if (v58 == 5)
      {
        double v67 = (double)(uint64_t)*a2;
        WGSL::convertFloat<float,double>(double)::max = 2139095039;
        WGSL::convertFloat<float,double>(double)::lowest = -8388609;
        float v68 = v67;
        *(float *)unint64_t v76 = v68;
        int v77 = 0;
      }
      else
      {
        if (v58 == 2)
        {
          a4.n128_u64[0] = (unint64_t)*a2;
          WGSL::convertFloat<float,double>(double)::max = 2139095039;
          WGSL::convertFloat<float,double>(double)::lowest = -8388609;
          BOOL v59 = a4.n128_f64[0] > 3.40282347e38;
          if (a4.n128_f64[0] < -3.40282347e38) {
            BOOL v59 = 1;
          }
          a4.n128_f32[0] = a4.n128_f64[0];
        }
        else
        {
          if (v58) {
            return 0;
          }
          a4.n128_u32[0] = *(_DWORD *)a2;
          BOOL v59 = *(float *)a2 > 3.4028e38;
          if (*(float *)a2 < -3.4028e38) {
            BOOL v59 = 1;
          }
        }
        if (v59) {
          unint64_t v69 = 0;
        }
        else {
          unint64_t v69 = a4.n128_u32[0] | 0x100000000;
        }
        if (!HIDWORD(v69)) {
          return 0;
        }
        v76[0] = v69;
        int v77 = 0;
        if (!v58)
        {
          *(_DWORD *)a2 = v69;
LABEL_179:
          ((void (*)(char *, _DWORD *, __n128))off_1ECABEC60[v58])(&v78, v76, a4);
          return 1;
        }
        float v68 = *(float *)&v69;
      }
      ((void (*)(char *, unsigned int **))off_1ECABEC60[v58])(&v78, a2);
      *(float *)a2 = v68;
      *((_DWORD *)a2 + 4) = 0;
      LODWORD(v58) = v77;
      if (v77 == -1) {
        return 1;
      }
      goto LABEL_179;
    case 7:
      if (*((_DWORD *)a2 + 4) != 6)
      {
        __break(0xC471u);
        JUMPOUT(0x1826B1378);
      }
      return 1;
    default:
      return result;
  }
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WGSL::Type const&,char>(uint64_t a1, long long *a2, int8x16_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, char *a8)
{
  uint64_t v237 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = *a5;
  *a5 = 0;
  uint64_t v14 = *(int8x16_t **)a6;
  uint64_t v15 = *(void *)(a6 + 8);
  v233[0] = 0;
  unsigned int v234 = -1;
  uint64_t v16 = *(unsigned int *)(a7 + 48);
  if (v16 != -1)
  {
    ((void (*)(_DWORD **, unsigned __int8 *, uint64_t))off_1ECABEE00[v16])(&v235, v233, a7);
    unsigned int v234 = v16;
  }
  if (a4) {
    size_t v17 = a4 - 1;
  }
  else {
    size_t v17 = 0;
  }
  if (v17 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826B23B8);
  }
  uint64_t v230 = v15;
  if (v15) {
    size_t v18 = v15 - 1;
  }
  else {
    size_t v18 = 0;
  }
  if (v18 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826B23D8);
  }
  __int16 v19 = *a8;
  WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v235);
  WGSL::Type::dump(v233, (uint64_t)&v235);
  WTF::StringPrintStream::toString((uint64_t *)&v232, (WTF::StringPrintStream *)&v235);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v235);
  uint64_t v20 = v232;
  if (!v13)
  {
    int v21 = 0;
    uint64_t v231 = a2;
    if (v232) {
      goto LABEL_13;
    }
LABEL_18:
    uint64_t v23 = 0;
    int v25 = 1;
    goto LABEL_19;
  }
  int v21 = *(_DWORD *)(v13 + 4);
  uint64_t v231 = a2;
  if (!v232) {
    goto LABEL_18;
  }
LABEL_13:
  int v22 = v232[1];
  if (v22 < 0) {
    goto LABEL_27;
  }
  uint64_t v23 = 0;
  BOOL v24 = __OFADD__(v22, 1);
  int v25 = v22 + 1;
  if (v24) {
    goto LABEL_298;
  }
LABEL_19:
  BOOL v24 = __OFADD__(v18, v25);
  int v26 = v18 + v25;
  char v27 = v24;
  if (v21 < 0 || (v27 & 1) != 0) {
    goto LABEL_298;
  }
  BOOL v24 = __OFADD__(v21, v26);
  int v28 = v21 + v26;
  if (v24 || (v229 = v19, uint64_t v29 = (v17 + v28), __OFADD__(v17, v28)))
  {
LABEL_27:
    uint64_t v23 = 0;
    uint64_t result = v232;
    int v232 = 0;
    if (!result) {
      goto LABEL_301;
    }
    goto LABEL_299;
  }
  if (!v13 || (*(unsigned char *)(v13 + 16) & 4) != 0)
  {
    if (v232)
    {
      int v32 = v232[4];
      *v232 += 2;
      if ((v32 & 4) == 0)
      {
        uint64_t v31 = v13;
        if (v29)
        {
          if (v29 <= 0x7FFFFFEF) {
            goto LABEL_39;
          }
          goto LABEL_72;
        }
        goto LABEL_292;
      }
    }
    if (!v29) {
      goto LABEL_292;
    }
    if ((v29 & 0x80000000) != 0)
    {
LABEL_72:
      uint64_t v23 = 0;
      if (v20) {
        goto LABEL_294;
      }
LABEL_298:
      uint64_t result = v232;
      int v232 = 0;
      if (!result) {
        goto LABEL_301;
      }
      goto LABEL_299;
    }
    WTF::tryFastCompactMalloc((WTF *)(v29 + 20));
    uint64_t v23 = v235;
    if (!v235) {
      goto LABEL_293;
    }
    unint64_t v54 = v235 + 5;
    *uint64_t v235 = 2;
    v23[1] = v29;
    *((void *)v23 + 1) = v23 + 5;
    v23[4] = 4;
    if (v20) {
      *v20 += 2;
    }
    if (v17)
    {
      if (v17 == 1)
      {
        *unint64_t v54 = a3->i8[0];
      }
      else
      {
        memcpy(v23 + 5, a3, v17);
        unint64_t v54 = v23 + 5;
      }
    }
    if (v20) {
      *v20 += 2;
    }
    int v55 = (unsigned long long *)&v54[v17];
    if (!v13)
    {
      uint64_t v62 = 0;
      goto LABEL_124;
    }
    int v56 = *(int8x16_t **)(v13 + 8);
    size_t v57 = *(unsigned int *)(v13 + 4);
    if ((*(unsigned char *)(v13 + 16) & 4) != 0)
    {
      if (v57)
      {
        if (v57 == 1) {
          *(unsigned char *)int v55 = v56->i8[0];
        }
        else {
          memcpy(&v54[v17], v56, v57);
        }
      }
      goto LABEL_123;
    }
    uint64_t v58 = (char *)v55 + v57;
    if (v57 < 0x10)
    {
      unint64_t v59 = (unint64_t)&v54[v17];
    }
    else
    {
      unint64_t v59 = (unint64_t)v55 + (v57 & 0xFFFFFFF0);
      int v60 = v55;
      do
      {
        unsigned long long v61 = (unsigned __int128)vld2q_s8(v56->i8);
        v56 += 2;
        *v60++ = v61;
      }
      while (v60 != (unsigned long long *)v59);
    }
    if ((unsigned char *)v59 == v58)
    {
LABEL_123:
      uint64_t v62 = *(unsigned int *)(v13 + 4);
LABEL_124:
      if (v20) {
        *v20 += 2;
      }
      uint64_t v91 = (char *)v55 + v62;
      if (v18)
      {
        if (v18 == 1) {
          *uint64_t v91 = v14->i8[0];
        }
        else {
          memcpy(v91, v14, v18);
        }
      }
      uint64_t v92 = &v91[v18];
      if (!v20)
      {
        *uint64_t v92 = v229;
        uint64_t result = v232;
        int v232 = 0;
        if (!result) {
          goto LABEL_301;
        }
        goto LABEL_299;
      }
      size_t v93 = v20[1];
      *v20 += 2;
      int v94 = (int8x16_t *)*((void *)v20 + 1);
      if ((v20[4] & 4) != 0)
      {
        if (v93)
        {
          if (v93 == 1) {
            *uint64_t v92 = v94->i8[0];
          }
          else {
            memcpy(&v91[v18], v94, v93);
          }
        }
        goto LABEL_153;
      }
      uint64_t v95 = &v92[v93];
      if (v93 < 0x10)
      {
        unint64_t v96 = (unint64_t)&v91[v18];
      }
      else
      {
        unint64_t v96 = (unint64_t)&v92[v93 & 0xFFFFFFF0];
        uint64_t v97 = (unsigned long long *)&v91[v18];
        do
        {
          unsigned long long v98 = (unsigned __int128)vld2q_s8(v94->i8);
          v94 += 2;
          *v97++ = v98;
        }
        while (v97 != (unsigned long long *)v96);
      }
      if ((unsigned char *)v96 == v95)
      {
LABEL_153:
        v92[v20[1]] = v229;
LABEL_211:
        int v149 = *v20 - 2;
        if (*v20 == 2)
        {
          WTF::StringImpl::destroy();
          int v149 = *v20;
        }
        else
        {
          int *v20 = v149;
        }
        int v150 = v149 - 2;
        if (v150)
        {
          int *v20 = v150;
        }
        else
        {
          WTF::StringImpl::destroy();
          int v150 = *v20;
        }
        int v151 = v150 - 2;
        if (v151)
        {
          int *v20 = v151;
        }
        else
        {
          WTF::StringImpl::destroy();
          int v151 = *v20;
        }
        int v152 = v151 - 2;
        if (v152) {
          int *v20 = v152;
        }
        else {
          WTF::StringImpl::destroy();
        }
        goto LABEL_294;
      }
      size_t v99 = (size_t)v23 + a4 + v62 + v230 + v93;
      unint64_t v100 = v99 - v96 - (v230 != 0) - (a4 != 0) + 20;
      if (v100 < 8) {
        goto LABEL_149;
      }
      if (a4) {
        unint64_t v101 = v96 + 1;
      }
      else {
        unint64_t v101 = v96;
      }
      if (v230) {
        ++v101;
      }
      if (v96 < (unint64_t)&v94[2].u64[1] + 2 * v99 + -2 * v101 && (unint64_t)v94 < v99 - v101 + v96 + 20)
      {
LABEL_149:
        int v102 = (unsigned char *)v96;
        unsigned int v103 = v94;
        goto LABEL_150;
      }
      if (v100 >= 0x20)
      {
        unint64_t v155 = v100 & 0xFFFFFFFFFFFFFFE0;
        long long v180 = v94 + 2;
        long long v181 = (int8x16_t *)(v96 + 16);
        unint64_t v182 = v100 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          int8x16_t v184 = v180[-2];
          int8x16_t v183 = v180[-1];
          int8x16_t v186 = *v180;
          int8x16_t v185 = v180[1];
          v180 += 4;
          v181[-1] = vuzp1q_s8(v184, v183);
          *long long v181 = vuzp1q_s8(v186, v185);
          v181 += 2;
          v182 -= 32;
        }
        while (v182);
        if (v100 == v155) {
          goto LABEL_153;
        }
        if ((v100 & 0x18) == 0)
        {
          unsigned int v103 = (int8x16_t *)((char *)v94 + 2 * v155);
          int v102 = (unsigned char *)(v96 + v155);
          do
          {
LABEL_150:
            char v104 = v103->i8[0];
            unsigned int v103 = (int8x16_t *)((char *)v103 + 2);
            *v102++ = v104;
          }
          while (v102 != v95);
          goto LABEL_153;
        }
      }
      else
      {
        unint64_t v155 = 0;
      }
      int v102 = (unsigned char *)(v96 + (v100 & 0xFFFFFFFFFFFFFFF8));
      unsigned int v103 = (int8x16_t *)((char *)v94 + 2 * (v100 & 0xFFFFFFFFFFFFFFF8));
      long long v187 = (int16x8_t *)((char *)v94 + 2 * v155);
      char v188 = (int8x8_t *)(v96 + v155);
      unint64_t v189 = v155 - (v100 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        int16x8_t v190 = *v187++;
        *v188++ = vmovn_s16(v190);
        v189 += 8;
      }
      while (v189);
      if (v100 == (v100 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_153;
      }
      goto LABEL_150;
    }
    size_t v73 = (size_t)v23 + a4 + v57;
    unint64_t v74 = v73 - v59 - (a4 != 0) + 20;
    if (v74 < 8
      || (!a4 ? (unint64_t v75 = v59) : (unint64_t v75 = v59 + 1),
          v59 < (unint64_t)&v56[2].u64[1] + 2 * v73 + -2 * v75
        ? (BOOL v76 = (unint64_t)v56 >= v73 - (a4 != 0) + 20)
        : (BOOL v76 = 1),
          !v76))
    {
      char v78 = (unsigned char *)v59;
      long long v79 = v56;
      goto LABEL_105;
    }
    if (v74 >= 0x20)
    {
      unint64_t v77 = v74 & 0xFFFFFFFFFFFFFFE0;
      int v201 = v56 + 2;
      uint64_t v202 = (int8x16_t *)(v59 + 16);
      unint64_t v203 = v74 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v205 = v201[-2];
        int8x16_t v204 = v201[-1];
        int8x16_t v207 = *v201;
        int8x16_t v206 = v201[1];
        v201 += 4;
        v202[-1] = vuzp1q_s8(v205, v204);
        *uint64_t v202 = vuzp1q_s8(v207, v206);
        v202 += 2;
        v203 -= 32;
      }
      while (v203);
      if (v74 == v77) {
        goto LABEL_123;
      }
      if ((v74 & 0x18) == 0)
      {
        long long v79 = (int8x16_t *)((char *)v56 + 2 * v77);
        char v78 = (unsigned char *)(v59 + v77);
        do
        {
LABEL_105:
          char v80 = v79->i8[0];
          long long v79 = (int8x16_t *)((char *)v79 + 2);
          *v78++ = v80;
        }
        while (v78 != v58);
        goto LABEL_123;
      }
    }
    else
    {
      unint64_t v77 = 0;
    }
    char v78 = (unsigned char *)(v59 + (v74 & 0xFFFFFFFFFFFFFFF8));
    long long v79 = (int8x16_t *)((char *)v56 + 2 * (v74 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v208 = (int16x8_t *)((char *)v56 + 2 * v77);
    int v209 = (int8x8_t *)(v59 + v77);
    unint64_t v210 = v77 - (v74 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int16x8_t v211 = *v208++;
      *v209++ = vmovn_s16(v211);
      v210 += 8;
    }
    while (v210);
    if (v74 == (v74 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_123;
    }
    goto LABEL_105;
  }
  if (v232)
  {
    *v232 += 2;
    if (v29) {
      goto LABEL_33;
    }
LABEL_292:
    uint64_t v23 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_293;
  }
  if (!v29) {
    goto LABEL_292;
  }
LABEL_33:
  uint64_t v31 = 1;
  if (v29 > 0x7FFFFFEF) {
    goto LABEL_72;
  }
LABEL_39:
  uint64_t v228 = v31;
  WTF::tryFastCompactMalloc((WTF *)(2 * v29 + 20));
  uint64_t v23 = v235;
  if (v235)
  {
    unint64_t v33 = (unint64_t)(v235 + 5);
    *uint64_t v235 = 2;
    v23[1] = v29;
    *((void *)v23 + 1) = v23 + 5;
    v23[4] = 0;
    if (v20) {
      *v20 += 2;
    }
    int v34 = (_WORD *)(v33 + 2 * v17);
    if ((v17 & 0xFFFFFFC0) != 0)
    {
      unint64_t v35 = v33 + 2 * (v17 & 0xFFFFFFC0);
      long long v36 = 0uLL;
      do
      {
        v238.val[0] = *a3;
        int8x16_t v37 = a3[1];
        v242.val[0] = a3[2];
        int8x16_t v38 = a3[3];
        a3 += 4;
        int8x16_t v39 = v38;
        v242.val[1] = 0uLL;
        v246.val[0] = v37;
        v238.val[1] = 0uLL;
        uint64_t v40 = (char *)v33;
        vst2q_s8(v40, v238);
        v40 += 32;
        v246.val[1] = 0uLL;
        vst2q_s8(v40, v246);
        uint64_t v41 = (char *)(v33 + 64);
        vst2q_s8(v41, v242);
        uint64_t v42 = (char *)(v33 + 96);
        vst2q_s8(v42, *(int8x16x2_t *)(&v36 - 1));
        v33 += 128;
      }
      while (v33 != v35);
      unint64_t v33 = v35;
    }
    if ((_WORD *)v33 != v34)
    {
      unint64_t v43 = (unint64_t)v23 + 2 * a4 - v33;
      uint64_t v44 = -2;
      if (a4) {
        uint64_t v45 = -2;
      }
      else {
        uint64_t v45 = 0;
      }
      unint64_t v46 = v43 + v45 + 18;
      if (v46 < 0xE) {
        goto LABEL_55;
      }
      if (!a4) {
        uint64_t v44 = 0;
      }
      unint64_t v47 = v43 + v44 + 18;
      if (v33 < (unint64_t)a3->u64 + (v47 >> 1) + 1
        && (unint64_t)a3 < (v47 & 0xFFFFFFFFFFFFFFFELL) + v33 + 2)
      {
LABEL_55:
        BOOL v48 = (_WORD *)v33;
        unsigned int v49 = a3;
        goto LABEL_56;
      }
      uint64_t v81 = (v46 >> 1) + 1;
      if (v46 >= 0x3E)
      {
        unint64_t v82 = v81 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v156 = (uint8x8_t *)&a3[1];
        uint64_t v157 = (uint16x8_t *)(v33 + 32);
        unint64_t v158 = v81 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          uint8x16_t v159 = *(uint8x16_t *)v156[-2].i8;
          uint16x8_t v160 = vmovl_u8(*v156);
          uint16x8_t v161 = vmovl_high_u8(*(uint8x16_t *)v156->i8);
          v157[-2] = vmovl_u8(*(uint8x8_t *)v159.i8);
          v157[-1] = vmovl_high_u8(v159);
          *uint64_t v157 = v160;
          v157[1] = v161;
          v157 += 4;
          v156 += 4;
          v158 -= 32;
        }
        while (v158);
        if (v81 == v82) {
          goto LABEL_57;
        }
        if ((v81 & 0x18) == 0)
        {
          unsigned int v49 = (int8x16_t *)((char *)a3 + v82);
          BOOL v48 = (_WORD *)(v33 + 2 * v82);
          do
          {
LABEL_56:
            __int16 v50 = v49->u8[0];
            unsigned int v49 = (int8x16_t *)((char *)v49 + 1);
            *v48++ = v50;
          }
          while (v48 != v34);
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v82 = 0;
      }
      BOOL v48 = (_WORD *)(v33 + 2 * (v81 & 0xFFFFFFFFFFFFFFF8));
      unsigned int v49 = (int8x16_t *)((char *)a3 + (v81 & 0xFFFFFFFFFFFFFFF8));
      long long v162 = (uint8x8_t *)&a3->i8[v82];
      long long v163 = (uint16x8_t *)(v33 + 2 * v82);
      unint64_t v164 = v82 - (v81 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint8x8_t v165 = *v162++;
        *v163++ = vmovl_u8(v165);
        v164 += 8;
      }
      while (v164);
      if (v81 != (v81 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_56;
      }
    }
LABEL_57:
    if (v20) {
      *v20 += 2;
    }
    uint64_t v51 = v228;
    if (!v228)
    {
LABEL_156:
      unint64_t v106 = (unint64_t)&v34[v51];
      if (v20) {
        *v20 += 2;
      }
      uint64_t v107 = (_WORD *)(v106 + 2 * v18);
      if ((v18 & 0xFFFFFFC0) != 0)
      {
        unint64_t v108 = v106 + 2 * (v18 & 0xFFFFFFC0);
        long long v109 = 0uLL;
        uint64_t v110 = v230;
        do
        {
          v240.val[0] = *v14;
          int8x16_t v111 = v14[1];
          v244.val[0] = v14[2];
          int8x16_t v112 = v14[3];
          v14 += 4;
          int8x16_t v113 = v112;
          v244.val[1] = 0uLL;
          v248.val[0] = v111;
          v240.val[1] = 0uLL;
          uint64_t v114 = (char *)v106;
          vst2q_s8(v114, v240);
          v114 += 32;
          v248.val[1] = 0uLL;
          vst2q_s8(v114, v248);
          uint64_t v115 = (char *)(v106 + 64);
          vst2q_s8(v115, v244);
          int v116 = (char *)(v106 + 96);
          vst2q_s8(v116, *(int8x16x2_t *)(&v109 - 1));
          v106 += 128;
        }
        while (v106 != v108);
        unint64_t v106 = v108;
      }
      else
      {
        uint64_t v110 = v230;
      }
      if ((_WORD *)v106 != v107)
      {
        unint64_t v117 = (unint64_t)v23 + 2 * v51 + 2 * v110 + 2 * a4 - v106;
        uint64_t v118 = -2;
        if (a4) {
          uint64_t v119 = -2;
        }
        else {
          uint64_t v119 = 0;
        }
        if (v110) {
          uint64_t v120 = -2;
        }
        else {
          uint64_t v120 = 0;
        }
        unint64_t v121 = v117 + v119 + v120 + 18;
        if (v121 < 0xE) {
          goto LABEL_178;
        }
        if (a4) {
          uint64_t v122 = -2;
        }
        else {
          uint64_t v122 = 0;
        }
        if (!v110) {
          uint64_t v118 = 0;
        }
        unint64_t v123 = v117 + v122 + v118 + 18;
        if (v106 < (unint64_t)v14->u64 + (v123 >> 1) + 1
          && (unint64_t)v14 < (v123 & 0xFFFFFFFFFFFFFFFELL) + v106 + 2)
        {
LABEL_178:
          uint64_t v124 = (_WORD *)v106;
          unint64_t v125 = v14;
          goto LABEL_179;
        }
        uint64_t v153 = (v121 >> 1) + 1;
        if (v121 >= 0x3E)
        {
          unint64_t v154 = v153 & 0xFFFFFFFFFFFFFFE0;
          long long v166 = (uint8x8_t *)&v14[1];
          long long v167 = (uint16x8_t *)(v106 + 32);
          unint64_t v168 = v153 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            uint8x16_t v169 = *(uint8x16_t *)v166[-2].i8;
            uint16x8_t v170 = vmovl_u8(*v166);
            uint16x8_t v171 = vmovl_high_u8(*(uint8x16_t *)v166->i8);
            v167[-2] = vmovl_u8(*(uint8x8_t *)v169.i8);
            v167[-1] = vmovl_high_u8(v169);
            uint16x8_t *v167 = v170;
            v167[1] = v171;
            v167 += 4;
            v166 += 4;
            v168 -= 32;
          }
          while (v168);
          if (v153 == v154) {
            goto LABEL_180;
          }
          if ((v153 & 0x18) == 0)
          {
            unint64_t v125 = (int8x16_t *)((char *)v14 + v154);
            uint64_t v124 = (_WORD *)(v106 + 2 * v154);
            do
            {
LABEL_179:
              __int16 v126 = v125->u8[0];
              unint64_t v125 = (int8x16_t *)((char *)v125 + 1);
              *v124++ = v126;
            }
            while (v124 != v107);
            goto LABEL_180;
          }
        }
        else
        {
          unint64_t v154 = 0;
        }
        uint64_t v124 = (_WORD *)(v106 + 2 * (v153 & 0xFFFFFFFFFFFFFFF8));
        unint64_t v125 = (int8x16_t *)((char *)v14 + (v153 & 0xFFFFFFFFFFFFFFF8));
        long long v172 = (uint8x8_t *)&v14->i8[v154];
        long long v173 = (uint16x8_t *)(v106 + 2 * v154);
        unint64_t v174 = v154 - (v153 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint8x8_t v175 = *v172++;
          *v173++ = vmovl_u8(v175);
          v174 += 8;
        }
        while (v174);
        if (v153 != (v153 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_179;
        }
      }
LABEL_180:
      if (!v20)
      {
        _WORD *v107 = v229;
        uint64_t result = v232;
        int v232 = 0;
        if (!result) {
          goto LABEL_301;
        }
        goto LABEL_299;
      }
      uint64_t v127 = v20[1];
      *v20 += 2;
      int v128 = (int8x16_t *)*((void *)v20 + 1);
      if ((v20[4] & 4) == 0)
      {
        if (!v127)
        {
LABEL_210:
          v107[v127] = v229;
          goto LABEL_211;
        }
        if (v127 == 1)
        {
          _WORD *v107 = v128->i16[0];
          LODWORD(v127) = 1;
          goto LABEL_210;
        }
        memcpy(v107, v128, 2 * v127);
LABEL_209:
        LODWORD(v127) = v20[1];
        goto LABEL_210;
      }
      uint16x8_t v129 = &v107[v127];
      if (v127 < 0x40)
      {
        unint64_t v130 = (unint64_t)v107;
      }
      else
      {
        unint64_t v130 = (unint64_t)&v107[v127 & 0xFFFFFFC0];
        long long v131 = 0uLL;
        unint64_t v132 = (char *)v107;
        do
        {
          v241.val[0] = *v128;
          int8x16_t v133 = v128[1];
          v245.val[0] = v128[2];
          int8x16_t v134 = v128[3];
          v128 += 4;
          int8x16_t v135 = v134;
          v245.val[1] = 0uLL;
          v249.val[0] = v133;
          v241.val[1] = 0uLL;
          unsigned int v136 = v132;
          vst2q_s8(v136, v241);
          v136 += 32;
          v249.val[1] = 0uLL;
          vst2q_s8(v136, v249);
          uint64_t v137 = v132 + 64;
          vst2q_s8(v137, v245);
          uint64_t v138 = v132 + 96;
          vst2q_s8(v138, *(int8x16x2_t *)(&v131 - 1));
          v132 += 128;
        }
        while (v132 != (char *)v130);
      }
      if ((_WORD *)v130 == v129) {
        goto LABEL_209;
      }
      unint64_t v139 = (unint64_t)v23 + 2 * v51 + 2 * v110 + 2 * a4 + 2 * v127 - v130;
      uint64_t v140 = -2;
      if (a4) {
        uint64_t v141 = -2;
      }
      else {
        uint64_t v141 = 0;
      }
      if (v110) {
        uint64_t v142 = -2;
      }
      else {
        uint64_t v142 = 0;
      }
      unint64_t v143 = v139 + v141 + v142 + 18;
      if (v143 < 0xE) {
        goto LABEL_205;
      }
      if (a4) {
        uint64_t v144 = -2;
      }
      else {
        uint64_t v144 = 0;
      }
      if (!v110) {
        uint64_t v140 = 0;
      }
      unint64_t v145 = v139 + v144 + v140 + 18;
      if (v130 < (unint64_t)v128->u64 + (v145 >> 1) + 1
        && (unint64_t)v128 < (v145 & 0xFFFFFFFFFFFFFFFELL) + v130 + 2)
      {
LABEL_205:
        unint64_t v146 = (_WORD *)v130;
        uint64_t v147 = v128;
        goto LABEL_206;
      }
      uint64_t v176 = (v143 >> 1) + 1;
      if (v143 >= 0x3E)
      {
        unint64_t v177 = v176 & 0xFFFFFFFFFFFFFFE0;
        char v191 = (uint8x8_t *)&v128[1];
        uint64_t v192 = (uint16x8_t *)(v130 + 32);
        unint64_t v193 = v176 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          uint8x16_t v194 = *(uint8x16_t *)v191[-2].i8;
          uint16x8_t v195 = vmovl_u8(*v191);
          uint16x8_t v196 = vmovl_high_u8(*(uint8x16_t *)v191->i8);
          v192[-2] = vmovl_u8(*(uint8x8_t *)v194.i8);
          v192[-1] = vmovl_high_u8(v194);
          *uint64_t v192 = v195;
          v192[1] = v196;
          v192 += 4;
          v191 += 4;
          v193 -= 32;
        }
        while (v193);
        if (v176 == v177) {
          goto LABEL_209;
        }
        if ((v176 & 0x18) == 0)
        {
          uint64_t v147 = (int8x16_t *)((char *)v128 + v177);
          unint64_t v146 = (_WORD *)(v130 + 2 * v177);
          do
          {
LABEL_206:
            __int16 v148 = v147->u8[0];
            uint64_t v147 = (int8x16_t *)((char *)v147 + 1);
            *v146++ = v148;
          }
          while (v146 != v129);
          goto LABEL_209;
        }
      }
      else
      {
        unint64_t v177 = 0;
      }
      unint64_t v146 = (_WORD *)(v130 + 2 * (v176 & 0xFFFFFFFFFFFFFFF8));
      uint64_t v147 = (int8x16_t *)((char *)v128 + (v176 & 0xFFFFFFFFFFFFFFF8));
      int v197 = (uint8x8_t *)&v128->i8[v177];
      uint64_t v198 = (uint16x8_t *)(v130 + 2 * v177);
      unint64_t v199 = v177 - (v176 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint8x8_t v200 = *v197++;
        *v198++ = vmovl_u8(v200);
        v199 += 8;
      }
      while (v199);
      if (v176 == (v176 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_209;
      }
      goto LABEL_206;
    }
    uint64_t v52 = *(int8x16_t **)(v13 + 8);
    uint64_t v53 = *(unsigned int *)(v13 + 4);
    if ((*(unsigned char *)(v13 + 16) & 4) == 0)
    {
      if (v53)
      {
        if (v53 == 1)
        {
          *int v34 = v52->i16[0];
        }
        else
        {
          uint64_t v105 = v34;
          memcpy(v34, v52, 2 * v53);
          int v34 = v105;
        }
      }
      goto LABEL_155;
    }
    uint64_t v63 = &v34[v53];
    if (v53 < 0x40)
    {
      unint64_t v64 = (unint64_t)v34;
    }
    else
    {
      unint64_t v64 = (unint64_t)&v34[v53 & 0xFFFFFFC0];
      long long v65 = 0uLL;
      BOOL v66 = (char *)v34;
      do
      {
        v239.val[0] = *v52;
        int8x16_t v67 = v52[1];
        v243.val[0] = v52[2];
        int8x16_t v68 = v52[3];
        v52 += 4;
        int8x16_t v69 = v68;
        v243.val[1] = 0uLL;
        v247.val[0] = v67;
        v239.val[1] = 0uLL;
        uint64_t v70 = v66;
        vst2q_s8(v70, v239);
        v70 += 32;
        v247.val[1] = 0uLL;
        vst2q_s8(v70, v247);
        unint64_t v71 = v66 + 64;
        vst2q_s8(v71, v243);
        unint64_t v72 = v66 + 96;
        vst2q_s8(v72, *(int8x16x2_t *)(&v65 - 1));
        v66 += 128;
      }
      while (v66 != (char *)v64);
    }
    if ((_WORD *)v64 == v63)
    {
LABEL_155:
      uint64_t v51 = *(unsigned int *)(v13 + 4);
      goto LABEL_156;
    }
    unint64_t v83 = (unint64_t)v23 + 2 * v53 + 2 * a4 - v64;
    uint64_t v84 = -2;
    if (a4) {
      uint64_t v85 = -2;
    }
    else {
      uint64_t v85 = 0;
    }
    unint64_t v86 = v83 + v85 + 18;
    if (v86 < 0xE) {
      goto LABEL_119;
    }
    if (!a4) {
      uint64_t v84 = 0;
    }
    unint64_t v87 = v83 + v84 + 18;
    if (v64 < (unint64_t)v52->u64 + (v87 >> 1) + 1
      && (unint64_t)v52 < (v87 & 0xFFFFFFFFFFFFFFFELL) + v64 + 2)
    {
LABEL_119:
      int v88 = (_WORD *)v64;
      int v89 = v52;
      goto LABEL_120;
    }
    uint64_t v178 = (v86 >> 1) + 1;
    if (v86 >= 0x3E)
    {
      unint64_t v179 = v178 & 0xFFFFFFFFFFFFFFE0;
      v212 = (uint8x8_t *)&v52[1];
      int v213 = (uint16x8_t *)(v64 + 32);
      unint64_t v214 = v178 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v215 = *(uint8x16_t *)v212[-2].i8;
        uint16x8_t v216 = vmovl_u8(*v212);
        uint16x8_t v217 = vmovl_high_u8(*(uint8x16_t *)v212->i8);
        v213[-2] = vmovl_u8(*(uint8x8_t *)v215.i8);
        v213[-1] = vmovl_high_u8(v215);
        *int v213 = v216;
        v213[1] = v217;
        v213 += 4;
        v212 += 4;
        v214 -= 32;
      }
      while (v214);
      if (v178 == v179) {
        goto LABEL_155;
      }
      if ((v178 & 0x18) == 0)
      {
        int v89 = (int8x16_t *)((char *)v52 + v179);
        int v88 = (_WORD *)(v64 + 2 * v179);
        do
        {
LABEL_120:
          __int16 v90 = v89->u8[0];
          int v89 = (int8x16_t *)((char *)v89 + 1);
          *v88++ = v90;
        }
        while (v88 != v63);
        goto LABEL_155;
      }
    }
    else
    {
      unint64_t v179 = 0;
    }
    int v88 = (_WORD *)(v64 + 2 * (v178 & 0xFFFFFFFFFFFFFFF8));
    int v89 = (int8x16_t *)((char *)v52 + (v178 & 0xFFFFFFFFFFFFFFF8));
    unsigned int v218 = (uint8x8_t *)&v52->i8[v179];
    long long v219 = (uint16x8_t *)(v64 + 2 * v179);
    unint64_t v220 = v179 - (v178 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v221 = *v218++;
      *v219++ = vmovl_u8(v221);
      v220 += 8;
    }
    while (v220);
    if (v178 == (v178 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_155;
    }
    goto LABEL_120;
  }
LABEL_293:
  if (!v20) {
    goto LABEL_298;
  }
LABEL_294:
  if (*v20 == 2)
  {
    WTF::StringImpl::destroy();
    goto LABEL_298;
  }
  *v20 -= 2;
  uint64_t result = v232;
  int v232 = 0;
  if (!result)
  {
LABEL_301:
    if (v23) {
      goto LABEL_302;
    }
LABEL_315:
    __break(0xC471u);
    JUMPOUT(0x1826B27F0);
  }
LABEL_299:
  if (*result != 2)
  {
    *result -= 2;
    goto LABEL_301;
  }
  uint64_t result = (_DWORD *)WTF::StringImpl::destroy();
  if (!v23) {
    goto LABEL_315;
  }
LABEL_302:
  uint64_t v235 = v23;
  long long v236 = *v231;
  uint64_t v222 = *(unsigned int *)(a1 + 132);
  if (v222 != *(_DWORD *)(a1 + 128))
  {
    uint64_t v227 = *(void *)(a1 + 120) + 24 * v222;
    *(void *)uint64_t v227 = v23;
    *(_OWORD *)(v227 + 8) = v236;
    ++*(_DWORD *)(a1 + 132);
    uint64_t v235 = 0;
LABEL_308:
    uint64_t v226 = v234;
    if (v234 == -1) {
      goto LABEL_310;
    }
    goto LABEL_309;
  }
  unint64_t v223 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v222 + 1, (unint64_t)&v235);
  uint64_t v224 = *(void *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  uint64_t v225 = *(void *)v223;
  *(void *)unint64_t v223 = 0;
  *(void *)uint64_t v224 = v225;
  *(_OWORD *)(v224 + 8) = *(_OWORD *)(v223 + 8);
  uint64_t result = v235;
  ++*(_DWORD *)(a1 + 132);
  uint64_t v235 = 0;
  if (!result) {
    goto LABEL_308;
  }
  if (*result != 2)
  {
    *result -= 2;
    uint64_t v226 = v234;
    if (v234 == -1) {
      goto LABEL_310;
    }
LABEL_309:
    uint64_t result = (_DWORD *)((uint64_t (*)(int **, unsigned __int8 *))off_1ECABED88[v226])(&v232, v233);
    goto LABEL_310;
  }
  uint64_t result = (_DWORD *)WTF::StringImpl::destroy();
  uint64_t v226 = v234;
  if (v234 != -1) {
    goto LABEL_309;
  }
LABEL_310:
  unsigned int v234 = -1;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  return result;
}

void WGSL::typeCheck(WGSL *this, WGSL::ShaderModule *a2)
{
  WGSL::TypeChecker::TypeChecker((WGSL::TypeChecker *)v2, this);
  WGSL::TypeChecker::check((WGSL::TypeChecker *)v2);
}

void WGSL::TypeChecker::~TypeChecker(WGSL::TypeChecker *this, void *a2)
{
  *(void *)this = &unk_1ECABEA28;
  uint64_t v3 = *((void *)this + 19);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::OverloadedDeclaration>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::OverloadedDeclaration>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::OverloadedDeclaration,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::OverloadedDeclaration>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  int v4 = (WTF *)*((void *)this + 17);
  if (v4)
  {
    *((void *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v4, a2);
  }
  uint64_t v5 = *((unsigned int *)this + 33);
  if (v5)
  {
    uint64_t v6 = (_DWORD **)*((void *)this + 15);
    uint64_t v7 = 24 * v5;
    do
    {
      uint64_t v8 = *v6;
      *uint64_t v6 = 0;
      if (v8)
      {
        if (*v8 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v8 -= 2;
        }
      }
      v6 += 3;
      v7 -= 24;
    }
    while (v7);
  }
  int v9 = (WTF *)*((void *)this + 15);
  if (v9)
  {
    *((void *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v9, a2);
  }
  WGSL::AST::ScopedVisitor<WGSL::Binding>::~ScopedVisitor((uint64_t)this, a2);
}

{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;
  WTF *v9;
  uint64_t vars8;

  *(void *)this = &unk_1ECABEA28;
  uint64_t v3 = *((void *)this + 19);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::OverloadedDeclaration>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::OverloadedDeclaration>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::OverloadedDeclaration,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::OverloadedDeclaration>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  int v4 = (WTF *)*((void *)this + 17);
  if (v4)
  {
    *((void *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v4, a2);
  }
  uint64_t v5 = *((unsigned int *)this + 33);
  if (v5)
  {
    uint64_t v6 = (_DWORD **)*((void *)this + 15);
    uint64_t v7 = 24 * v5;
    do
    {
      uint64_t v8 = *v6;
      *uint64_t v6 = 0;
      if (v8)
      {
        if (*v8 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v8 -= 2;
        }
      }
      v6 += 3;
      v7 -= 24;
    }
    while (v7);
  }
  int v9 = (WTF *)*((void *)this + 15);
  if (v9)
  {
    *((void *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v9, a2);
  }
  WGSL::AST::ScopedVisitor<WGSL::Binding>::~ScopedVisitor((uint64_t)this, a2);
  JUMPOUT(0x18530AFF0);
}

uint64_t WGSL::TypeChecker::accessMode(WGSL::TypeChecker *this, WGSL::AST::Expression *a2)
{
  __int16 v4 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 3;
  WGSL::AST::Visitor::visit(this, (uint64_t)a2);
  uint64_t v6 = (const WGSL::Type *)*((void *)this + 11);
  *((void *)a2 + 3) = v6;
  *((void *)this + 11) = 0;
  *((_WORD *)this + 52) = v4;
  uint64_t v7 = *((void *)this + 14);
  uint64_t v8 = *(WGSL **)(v7 + 24);
  if (v8 == v6) {
    return 0;
  }
  int v9 = *(WGSL **)(v7 + 120);
  BOOL v10 = v6 == v9 || v8 == v9;
  if (!v10 && WGSL::conversionRank(v9, v6, v5) == -1)
  {
    *(void *)&long long v12 = "' as access mode";
    *((void *)&v12 + 1) = 17;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 0, (WGSL::AST::Expression *)((char *)a2 + 8), (int8x16_t *)"cannot use '", 13, (uint64_t)v6, &v12);
    return 0;
  }
  if ((*(unsigned int (**)(WGSL::AST::Expression *))(*(void *)a2 + 16))(a2) == 22) {
    return *(unsigned __int8 *)WGSL::parseAccessMode((uint64_t *)a2 + 11) | 0x100u;
  }
  uint64_t result = 96;
  __break(0xC471u);
  return result;
}

void WGSL::AST::ScopedVisitor<WGSL::Binding>::visit()
{
}

uint64_t WGSL::AST::ScopedVisitor<WGSL::Binding>::~ScopedVisitor(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 64);
  *(void *)uint64_t v2 = *(void *)(result + 72);
  uint64_t v3 = *(unsigned int *)(v2 + 20);
  if (v3)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3 - 1;
    uint64_t v6 = *(void *)(v2 + 8);
    uint64_t v7 = *(void *)(v6 + 8 * v5);
    *(void *)(v6 + 8 * v5) = 0;
    if (v7) {
      std::default_delete<WGSL::ContextProvider<WGSL::Binding>::Context>::operator()[abi:sn180100](v7, a2);
    }
    *(_DWORD *)(v2 + 20) = v5;
    uint64_t v8 = *(unsigned int *)(v4 + 60);
    if (v8)
    {
      int v9 = *(uint64_t **)(v4 + 48);
      uint64_t v10 = 8 * v8;
      do
      {
        uint64_t v11 = *v9;
        *int v9 = 0;
        if (v11) {
          std::default_delete<WGSL::ContextProvider<WGSL::Binding>::Context>::operator()[abi:sn180100](v11, a2);
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
    long long v12 = *(WTF **)(v4 + 48);
    if (v12)
    {
      *(void *)(v4 + 48) = 0;
      *(_DWORD *)(v4 + 56) = 0;
      WTF::fastFree(v12, a2);
    }
    *(void *)uint64_t v4 = &unk_1ECABB740;
    if (!*(unsigned char *)(v4 + 32)) {
      return v4;
    }
    uint64_t v13 = *(_DWORD **)(v4 + 8);
    *(void *)(v4 + 8) = 0;
    if (!v13) {
      return v4;
    }
    if (*v13 != 2)
    {
      *v13 -= 2;
      return v4;
    }
    WTF::StringImpl::destroy();
    return v4;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t std::default_delete<WGSL::ContextProvider<WGSL::Binding>::Context>::operator()[abi:sn180100](uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = v3 + 32;
      do
      {
        uint64_t v6 = *(_DWORD **)(v5 - 32);
        if (v6 != (_DWORD *)-1)
        {
          if (*(unsigned char *)(v5 + 24))
          {
            uint64_t v7 = *(unsigned int *)(v5 + 16);
            if (v7 != -1)
            {
              ((void (*)(char *, uint64_t))off_1ECABEC60[v7])(&v9, v5);
              uint64_t v6 = *(_DWORD **)(v5 - 32);
            }
            *(_DWORD *)(v5 + 16) = -1;
          }
          *(void *)(v5 - 32) = 0;
          if (v6)
          {
            if (*v6 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v6 -= 2;
            }
          }
        }
        v5 += 64;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return MEMORY[0x18530AFF0](a1, 0x72C404B2EE363);
}

unint64_t WTF::Vector<std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void **)a1;
  if (*(void *)a1 <= a3)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      unint64_t v7 = *(unsigned int *)(a1 + 8);
      unint64_t v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10) {
        unint64_t v9 = v8 + 1;
      }
      else {
        unint64_t v9 = 16;
      }
      if (v9 <= a2) {
        unint64_t v10 = a2;
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10 <= v7)
      {
        uint64_t v20 = *(void **)a1;
        return (unint64_t)v20 + 8 * ((uint64_t)(a3 - (void)v5) >> 3);
      }
      if (v10 < 3)
      {
        uint64_t v11 = (void *)(a1 + 16);
        *(void *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 2;
        goto LABEL_31;
      }
      if (!(v10 >> 29))
      {
        uint64_t v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(void *)a1 = v11;
LABEL_31:
        memcpy(v11, v5, 8 * v6);
        uint64_t v20 = *(void **)a1;
        if ((void *)(a1 + 16) != v5 && v5)
        {
          if (v20 == v5)
          {
            *(void *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v21);
          uint64_t v20 = *(void **)a1;
        }
        return (unint64_t)v20 + 8 * ((uint64_t)(a3 - (void)v5) >> 3);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x1826B3154);
    }
  }
  unint64_t v12 = *(unsigned int *)(a1 + 8);
  unint64_t v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10) {
    unint64_t v14 = v13 + 1;
  }
  else {
    unint64_t v14 = 16;
  }
  if (v14 <= a2) {
    unint64_t v15 = a2;
  }
  else {
    unint64_t v15 = v14;
  }
  if (v15 <= v12) {
    return a3;
  }
  uint64_t v16 = *(unsigned int *)(a1 + 12);
  if (v15 < 3)
  {
    *(void *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 2;
    memcpy((void *)(a1 + 16), v5, 8 * v16);
    if ((void *)(a1 + 16) == v5) {
      return a3;
    }
  }
  else
  {
    if (v15 >> 29) {
      goto LABEL_37;
    }
    size_t v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
    *(_DWORD *)(a1 + 8) = v15;
    *(void *)a1 = v17;
    memcpy(v17, v5, 8 * v16);
    if ((void *)(a1 + 16) == v5) {
      return a3;
    }
  }
  if (!v5) {
    return a3;
  }
  if (*(void **)a1 == v5)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
  WTF::fastFree((WTF *)v5, v18);
  return a3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL14AbstractVectorENS8_14AbstractMatrixENS8_15AbstractTextureENS8_22AbstractTextureStorageENS8_21AbstractChannelFormatENS8_17AbstractReferenceENS8_15AbstractPointerENS8_13AbstractArrayENS8_14AbstractAtomicENS8_12TypeVariableEPKNS8_4TypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  if (v2)
  {
    uint64_t v3 = *(unsigned int *)(v2 + 24);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))off_1ECABED10[v3])(&v5, v2);
    }
    *(_DWORD *)(v2 + 24) = -1;
    return MEMORY[0x18530AFF0](v2, 0x1062C40D964B916);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL14AbstractVectorENS8_14AbstractMatrixENS8_15AbstractTextureENS8_22AbstractTextureStorageENS8_21AbstractChannelFormatENS8_17AbstractReferenceENS8_15AbstractPointerENS8_13AbstractArrayENS8_14AbstractAtomicENS8_12TypeVariableEPKNS8_4TypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  if (v2)
  {
    uint64_t v3 = *(unsigned int *)(v2 + 24);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))off_1ECABED10[v3])(&v5, v2);
    }
    *(_DWORD *)(v2 + 24) = -1;
    return MEMORY[0x18530AFF0](v2, 0x1062C40D964B916);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL14AbstractVectorENS8_14AbstractMatrixENS8_15AbstractTextureENS8_22AbstractTextureStorageENS8_21AbstractChannelFormatENS8_17AbstractReferenceENS8_15AbstractPointerENS8_13AbstractArrayENS8_14AbstractAtomicENS8_12TypeVariableEPKNS8_4TypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  if (v2)
  {
    uint64_t v3 = *(unsigned int *)(v2 + 24);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))off_1ECABED10[v3])(&v5, v2);
    }
    *(_DWORD *)(v2 + 24) = -1;
    return MEMORY[0x18530AFF0](v2, 0x1062C40D964B916);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL14AbstractVectorENS8_14AbstractMatrixENS8_15AbstractTextureENS8_22AbstractTextureStorageENS8_21AbstractChannelFormatENS8_17AbstractReferenceENS8_15AbstractPointerENS8_13AbstractArrayENS8_14AbstractAtomicENS8_12TypeVariableEPKNS8_4TypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  if (v2)
  {
    uint64_t v3 = *(unsigned int *)(v2 + 24);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))off_1ECABED10[v3])(&v5, v2);
    }
    *(_DWORD *)(v2 + 24) = -1;
    return MEMORY[0x18530AFF0](v2, 0x1062C40D964B916);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL14AbstractVectorENS8_14AbstractMatrixENS8_15AbstractTextureENS8_22AbstractTextureStorageENS8_21AbstractChannelFormatENS8_17AbstractReferenceENS8_15AbstractPointerENS8_13AbstractArrayENS8_14AbstractAtomicENS8_12TypeVariableEPKNS8_4TypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  if (v2)
  {
    uint64_t v3 = *(unsigned int *)(v2 + 24);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))off_1ECABED10[v3])(&v5, v2);
    }
    *(_DWORD *)(v2 + 24) = -1;
    return MEMORY[0x18530AFF0](v2, 0x1062C40D964B916);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL14AbstractVectorENS8_14AbstractMatrixENS8_15AbstractTextureENS8_22AbstractTextureStorageENS8_21AbstractChannelFormatENS8_17AbstractReferenceENS8_15AbstractPointerENS8_13AbstractArrayENS8_14AbstractAtomicENS8_12TypeVariableEPKNS8_4TypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    uint64_t v3 = *(unsigned int *)(v2 + 24);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))off_1ECABED10[v3])(&v5, v2);
    }
    *(_DWORD *)(v2 + 24) = -1;
    return MEMORY[0x18530AFF0](v2, 0x1062C40D964B916);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL14AbstractVectorENS8_14AbstractMatrixENS8_15AbstractTextureENS8_22AbstractTextureStorageENS8_21AbstractChannelFormatENS8_17AbstractReferenceENS8_15AbstractPointerENS8_13AbstractArrayENS8_14AbstractAtomicENS8_12TypeVariableEPKNS8_4TypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    uint64_t v3 = *(unsigned int *)(v2 + 24);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))off_1ECABED10[v3])(&v5, v2);
    }
    *(_DWORD *)(v2 + 24) = -1;
    return MEMORY[0x18530AFF0](v2, 0x1062C40D964B916);
  }
  return result;
}

void WGSL::OverloadCandidate::~OverloadCandidate(WGSL::OverloadCandidate *this, void *a2)
{
  uint64_t v3 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 + 24);
    if (v4 != -1) {
      ((void (*)(char *, uint64_t))off_1ECABED10[v4])(&v16, v3);
    }
    *(_DWORD *)(v3 + 24) = -1;
    MEMORY[0x18530AFF0](v3, 0x1062C40D964B916);
  }
  uint64_t v5 = *((unsigned int *)this + 15);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)*((void *)this + 6);
    uint64_t v7 = 8 * v5;
    do
    {
      uint64_t v8 = *v6;
      *uint64_t v6 = 0;
      if (v8)
      {
        uint64_t v9 = *(unsigned int *)(v8 + 24);
        if (v9 != -1) {
          ((void (*)(char *, uint64_t))off_1ECABED10[v9])(&v17, v8);
        }
        *(_DWORD *)(v8 + 24) = -1;
        MEMORY[0x18530AFF0](v8, 0x1062C40D964B916);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  unint64_t v10 = (WTF *)*((void *)this + 6);
  if ((WGSL::OverloadCandidate *)((char *)this + 64) != v10 && v10 != 0)
  {
    *((void *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v10, a2);
    unint64_t v12 = (WGSL::OverloadCandidate *)*((void *)this + 3);
    if ((WGSL::OverloadCandidate *)((char *)this + 40) != v12 && v12 != 0) {
      goto LABEL_28;
    }
LABEL_22:
    unint64_t v14 = *(WTF **)this;
    if ((WGSL::OverloadCandidate *)((char *)this + 16) == *(WGSL::OverloadCandidate **)this) {
      return;
    }
    goto LABEL_29;
  }
  unint64_t v12 = (WGSL::OverloadCandidate *)*((void *)this + 3);
  if ((WGSL::OverloadCandidate *)((char *)this + 40) == v12 || v12 == 0) {
    goto LABEL_22;
  }
LABEL_28:
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  WTF::fastFree(v12, a2);
  unint64_t v14 = *(WTF **)this;
  if ((WGSL::OverloadCandidate *)((char *)this + 16) == *(WGSL::OverloadCandidate **)this) {
    return;
  }
LABEL_29:
  if (v14)
  {
    *(void *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v14, a2);
  }
}

unint64_t WTF::Vector<WGSL::ValueVariable,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1 > a2 || (uint64_t v5 = *(unsigned int *)(a1 + 12), (unint64_t)v4 + 4 * v5 <= a2))
  {
    unint64_t v13 = *(unsigned int *)(a1 + 8);
    unint64_t v14 = v13 + (v13 >> 2);
    uint64_t v15 = 2;
    if (v14 > 2) {
      uint64_t v15 = v13 + (v13 >> 2);
    }
    if (v14 >= 0x10) {
      unint64_t v16 = v15 + 1;
    }
    else {
      unint64_t v16 = 16;
    }
    if (v16 > v13)
    {
      if (v16 >> 30) {
        goto LABEL_30;
      }
      uint64_t v17 = *(unsigned int *)(a1 + 12);
      size_t v18 = (void *)WTF::fastMalloc((WTF *)(4 * v16));
      *(_DWORD *)(a1 + 8) = v16;
      *(void *)a1 = v18;
      memcpy(v18, v4, 4 * v17);
      if ((void *)(a1 + 16) != v4 && v4)
      {
        if (*(void **)a1 == v4)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v4, v19);
      }
    }
    return a2;
  }
  unint64_t v6 = *(unsigned int *)(a1 + 8);
  unint64_t v7 = v6 + (v6 >> 2);
  uint64_t v8 = 2;
  if (v7 > 2) {
    uint64_t v8 = v6 + (v6 >> 2);
  }
  if (v7 >= 0x10) {
    unint64_t v9 = v8 + 1;
  }
  else {
    unint64_t v9 = 16;
  }
  if (v9 > v6)
  {
    if (!(v9 >> 30))
    {
      unint64_t v10 = (void *)WTF::fastMalloc((WTF *)(4 * v9));
      *(_DWORD *)(a1 + 8) = v9;
      *(void *)a1 = v10;
      memcpy(v10, v4, 4 * v5);
      unint64_t v12 = *(void **)a1;
      if ((void *)(a1 + 16) != v4 && v4)
      {
        if (v12 == v4)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v4, v11);
        unint64_t v12 = *(void **)a1;
      }
      return (unint64_t)v12 + 4 * ((uint64_t)(a2 - (void)v4) >> 2);
    }
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x1826B3798);
  }
  unint64_t v12 = *(void **)a1;
  return (unint64_t)v12 + 4 * ((uint64_t)(a2 - (void)v4) >> 2);
}

char *WTF::Vector<WGSL::TypeVariable,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v5 = *(WTF **)a1;
  if (*(void *)a1 > a3
    || (uint64_t v6 = *(unsigned int *)(a1 + 12), v7 = (WTF *)((char *)v5 + 8 * v6), (unint64_t)v7 <= a3))
  {
    unint64_t v14 = *(unsigned int *)(a1 + 8);
    unint64_t v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10) {
      unint64_t v16 = v15 + 1;
    }
    else {
      unint64_t v16 = 16;
    }
    if (v16 <= (unint64_t)a2) {
      unint64_t v17 = (unint64_t)a2;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17 <= v14) {
      return (char *)a3;
    }
    uint64_t v18 = *(unsigned int *)(a1 + 12);
    if (v17 < 2)
    {
      uint64_t v19 = a1 + 16;
      *(void *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
      if (!v18) {
        goto LABEL_35;
      }
    }
    else
    {
      if (v17 >> 29) {
        goto LABEL_55;
      }
      uint64_t v19 = WTF::fastMalloc((WTF *)(8 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(void *)a1 = v19;
      if (!v18) {
        goto LABEL_35;
      }
    }
    unint64_t v20 = (v18 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v20 < 3 || (unint64_t)(v19 - (void)v5) < 0x20)
    {
      uint64_t v23 = (void *)v19;
      BOOL v24 = v5;
    }
    else
    {
      unint64_t v21 = v20 + 1;
      uint64_t v22 = (v20 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      uint64_t v23 = (void *)(v19 + 8 * v22);
      BOOL v24 = (WTF *)((char *)v5 + 8 * v22);
      int v25 = (long long *)((char *)v5 + 16);
      int v26 = (_OWORD *)(v19 + 16);
      uint64_t v27 = v22;
      do
      {
        long long v28 = *v25;
        *(v26 - 1) = *(v25 - 1);
        _OWORD *v26 = v28;
        v25 += 2;
        v26 += 2;
        v27 -= 4;
      }
      while (v27);
      if (v21 == v22)
      {
LABEL_35:
        if ((WTF *)(a1 + 16) != v5 && v5)
        {
          if (*(WTF **)a1 == v5)
          {
            *(void *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, a2);
        }
        return (char *)a3;
      }
    }
    do
    {
      uint64_t v30 = *(void *)v24;
      BOOL v24 = (WTF *)((char *)v24 + 8);
      *v23++ = v30;
    }
    while (v24 != (WTF *)((char *)v5 + 8 * v18));
    goto LABEL_35;
  }
  unint64_t v8 = *(unsigned int *)(a1 + 8);
  unint64_t v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10) {
    unint64_t v10 = v9 + 1;
  }
  else {
    unint64_t v10 = 16;
  }
  if (v10 <= (unint64_t)a2) {
    unint64_t v11 = (unint64_t)a2;
  }
  else {
    unint64_t v11 = v10;
  }
  if (v11 > v8)
  {
    if (v11 < 2)
    {
      uint64_t v12 = a1 + 16;
      *(void *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
      unint64_t v13 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v13 < 3) {
        goto LABEL_47;
      }
      goto LABEL_42;
    }
    if (!(v11 >> 29))
    {
      uint64_t v12 = WTF::fastMalloc((WTF *)(8 * v11));
      *(_DWORD *)(a1 + 8) = v11;
      *(void *)a1 = v12;
      unint64_t v13 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v13 < 3) {
        goto LABEL_47;
      }
LABEL_42:
      if ((unint64_t)(v12 - (void)v5) >= 0x20)
      {
        unint64_t v32 = v13 + 1;
        uint64_t v33 = (v13 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        int v34 = (void *)(v12 + 8 * v33);
        unint64_t v35 = (WTF *)((char *)v5 + 8 * v33);
        long long v36 = (long long *)((char *)v5 + 16);
        int8x16_t v37 = (_OWORD *)(v12 + 16);
        uint64_t v38 = v33;
        do
        {
          long long v39 = *v36;
          *(v37 - 1) = *(v36 - 1);
          *int8x16_t v37 = v39;
          v36 += 2;
          v37 += 2;
          v38 -= 4;
        }
        while (v38);
        if (v32 == v33)
        {
LABEL_49:
          uint64_t v29 = *(WTF **)a1;
          if ((WTF *)(a1 + 16) != v5 && v5)
          {
            if (v29 == v5)
            {
              *(void *)a1 = 0;
              *(_DWORD *)(a1 + 8) = 0;
            }
            WTF::fastFree(v5, a2);
            uint64_t v29 = *(WTF **)a1;
          }
          return (char *)v29 + 8 * ((uint64_t)(a3 - (void)v5) >> 3);
        }
        do
        {
LABEL_48:
          uint64_t v40 = *(void *)v35;
          unint64_t v35 = (WTF *)((char *)v35 + 8);
          *v34++ = v40;
        }
        while (v35 != v7);
        goto LABEL_49;
      }
LABEL_47:
      int v34 = (void *)v12;
      unint64_t v35 = v5;
      goto LABEL_48;
    }
LABEL_55:
    __break(0xC471u);
    JUMPOUT(0x1826B3A44);
  }
  uint64_t v29 = *(WTF **)a1;
  return (char *)v29 + 8 * ((uint64_t)(a3 - (void)v5) >> 3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL13ConstantValueEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 16);
  if (v3 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1ECABEC60[v3])(&v5, a2);
  }
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL13ConstantValueEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, _DWORD **a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *result -= 2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL13ConstantValueEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a2 = 0;
  *(_DWORD *)(a2 + 16) = -1;
  uint64_t v3 = *(unsigned int *)(a3 + 16);
  if (v3 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *))off_1ECABECB8[v3])(&v6);
    *(_DWORD *)(a2 + 16) = v3;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL13ConstantValueEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WGSL::constantBitwiseShiftLeft(WGSL::Type const*,WTF::FixedVector<WGSL::ConstantValue> const&)::$_0::operator()<WGSL::ConstantValue,WGSL::ConstantValue>(uint64_t result, unsigned int *a2, unsigned int a3, int a4)
{
  if (a4 != 4)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_28;
  }
  uint64_t v4 = result;
  unsigned int v5 = a2[4];
  if (v5 == 5)
  {
    if (a3 >= 0x40)
    {
      uint64_t result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)&v13, "shift left value must be less than the bit width of the shifted value, which is ", 81, 0x40uLL);
      uint64_t v6 = v13;
      if (!v13)
      {
        __break(0xC471u);
        JUMPOUT(0x1826B3BF8);
      }
      goto LABEL_25;
    }
    uint64_t v8 = -1 << -(uint64_t)(a3 + 1);
    uint64_t v9 = *(void *)a2 & v8;
    if (v9) {
      BOOL v10 = v9 == v8;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10)
    {
      *(void *)(result + 8) = *(void *)a2 << a3;
      *(_DWORD *)(result + 24) = 5;
      *(_DWORD *)(result + 32) = 0;
      return result;
    }
    goto LABEL_24;
  }
  if (v5 == 4)
  {
    if (a3 >= 0x20)
    {
      uint64_t result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)&v13, "shift left value must be less than the bit width of the shifted value, which is ", 81, 0x20uLL);
      uint64_t v6 = v13;
      if (!v13)
      {
        __break(0xC471u);
        JUMPOUT(0x1826B3BC8);
      }
      goto LABEL_25;
    }
    unint64_t v7 = *a2;
    if (!(v7 >> (32 - a3)))
    {
      *(_DWORD *)(result + 8) = v7 << a3;
      *(_DWORD *)(result + 24) = 4;
      *(_DWORD *)(result + 32) = 0;
      return result;
    }
LABEL_24:
    uint64_t result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v6 = v13;
LABEL_25:
    *(void *)(v4 + 8) = v6;
    *(_DWORD *)(v4 + 32) = 1;
    return result;
  }
  if (v5 != 3)
  {
LABEL_28:
    __break(0xC471u);
LABEL_29:
    JUMPOUT(0x1826B3B98);
  }
  if (a3 >= 0x20)
  {
    uint64_t result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)&v13, "shift left value must be less than the bit width of the shifted value, which is ", 81, 0x20uLL);
    uint64_t v6 = v13;
    if (!v13)
    {
      __break(0xC471u);
      goto LABEL_29;
    }
    goto LABEL_25;
  }
  uint64_t v11 = (int)*a2;
  uint64_t v12 = -1 << (31 - a3);
  if ((v12 & v11) != 0 && (v12 & v11) != v12) {
    goto LABEL_24;
  }
  *(_DWORD *)(result + 8) = v11 << a3;
  *(_DWORD *)(result + 24) = 3;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>(uint64_t result, unsigned char *a2, uint64_t a3, unint64_t a4)
{
  v15[4] = *MEMORY[0x1E4F143B8];
  if (a3) {
    unint64_t v4 = a3 - 1;
  }
  else {
    unint64_t v4 = 0;
  }
  unint64_t v5 = v4 >> 31;
  if (v4 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826B3ED8);
  }
  unint64_t v6 = a4;
  uint64_t v8 = (void *)result;
  unint64_t v9 = a4;
  do
  {
    LODWORD(v5) = v5 + 1;
    BOOL v10 = v9 > 9;
    v9 /= 0xAuLL;
  }
  while (v10);
  if (((v5 | v4) & 0x80000000) != 0) {
    goto LABEL_10;
  }
  uint64_t v11 = (v4 + v5);
  if (__OFADD__(v4, v5)) {
    goto LABEL_10;
  }
  if (!v11)
  {
    uint64_t v12 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_23;
  }
  if ((v11 & 0x80000000) != 0)
  {
LABEL_10:
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t result = WTF::tryFastCompactMalloc((WTF *)(v11 + 20));
    uint64_t v12 = v15[0];
    if (v15[0])
    {
      uint64_t v13 = (unsigned char *)(v15[0] + 20);
      *(_DWORD *)v15[0] = 2;
      *(_DWORD *)(v12 + 4) = v11;
      *(void *)(v12 + 8) = v12 + 20;
      *(_DWORD *)(v12 + 16) = 4;
      if (v4)
      {
        if (v4 == 1) {
          unsigned char *v13 = *a2;
        }
        else {
          uint64_t result = (uint64_t)memcpy((void *)(v12 + 20), a2, v4);
        }
      }
      uint64_t v14 = 0;
      do
      {
        *((unsigned char *)&v15[3] + v14--) = (v6 % 0xA) | 0x30;
        BOOL v10 = v6 > 9;
        v6 /= 0xAuLL;
      }
      while (v10);
      if (v14 + 26 <= 25) {
        uint64_t result = (uint64_t)memcpy(&v13[v4], (char *)&v15[3] + v14 + 1, -v14);
      }
    }
  }
LABEL_23:
  *uint64_t v8 = v12;
  return result;
}

uint64_t WGSL::constantBitwiseShiftRight(WGSL::Type const*,WTF::FixedVector<WGSL::ConstantValue> const&)::$_0::operator()<WGSL::ConstantValue,WGSL::ConstantValue>(uint64_t result, uint64_t a2, unsigned int a3, int a4)
{
  if (a4 != 4)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_18;
  }
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(a2 + 16);
  if (v5 == 5)
  {
    if (a3 >= 0x40)
    {
      uint64_t result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)&v7, "shift right value must be less than the bit width of the shifted value, which is ", 82, 0x40uLL);
      uint64_t v6 = v7;
      if (!v7)
      {
LABEL_19:
        __break(0xC471u);
        JUMPOUT(0x1826B3F48);
      }
      goto LABEL_13;
    }
    *(void *)(result + 8) = *(uint64_t *)a2 >> a3;
    *(_DWORD *)(result + 24) = 5;
    *(_DWORD *)(result + 32) = 0;
    return result;
  }
  if (v5 != 4)
  {
    if (v5 == 3)
    {
      if (a3 >= 0x20)
      {
        uint64_t result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)&v7, "shift right value must be less than the bit width of the shifted value, which is ", 82, 0x20uLL);
        uint64_t v6 = v7;
        if (!v7) {
          goto LABEL_19;
        }
        goto LABEL_13;
      }
      *(_DWORD *)(result + 8) = *(int *)a2 >> a3;
      *(_DWORD *)(result + 24) = 3;
      *(_DWORD *)(result + 32) = 0;
      return result;
    }
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1826B4058);
  }
  if (a3 >= 0x20)
  {
    uint64_t result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)&v7, "shift right value must be less than the bit width of the shifted value, which is ", 82, 0x20uLL);
    uint64_t v6 = v7;
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1826B3F78);
    }
LABEL_13:
    *(void *)(v4 + 8) = v6;
    *(_DWORD *)(v4 + 32) = 1;
    return result;
  }
  *(_DWORD *)(result + 8) = *(_DWORD *)a2 >> a3;
  *(_DWORD *)(result + 24) = 4;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

char *WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *result, unsigned int a2, unsigned char *a3, unsigned int a4, unint64_t a5, char *a6, unsigned int a7)
{
  uint64_t v7 = result;
  v27[4] = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    uint64_t v14 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_32;
  }
  if ((a2 & 0x80000000) != 0)
  {
    uint64_t v14 = 0;
    goto LABEL_32;
  }
  uint64_t result = (char *)WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
  uint64_t v14 = v27[0];
  if (v27[0])
  {
    unint64_t v15 = (unsigned char *)(v27[0] + 20);
    *(_DWORD *)v27[0] = 2;
    *(_DWORD *)(v14 + 4) = a2;
    *(void *)(v14 + 8) = v14 + 20;
    *(_DWORD *)(v14 + 16) = 4;
    if (a4)
    {
      if (a4 != 1)
      {
        uint64_t result = (char *)memcpy((void *)(v14 + 20), a3, a4);
        unint64_t v16 = &v15[a4];
        uint64_t v17 = 0;
        if ((a5 & 0x8000000000000000) == 0) {
          goto LABEL_8;
        }
        goto LABEL_15;
      }
      unsigned char *v15 = *a3;
    }
    unint64_t v16 = &v15[a4];
    uint64_t v17 = 0;
    if ((a5 & 0x8000000000000000) == 0)
    {
LABEL_8:
      unint64_t v18 = a5;
      do
      {
        *((unsigned char *)&v27[3] + v17--) = (v18 % 0xA) | 0x30;
        BOOL v19 = v18 > 9;
        v18 /= 0xAuLL;
      }
      while (v19);
      if (v17 + 26 <= 25)
      {
        unint64_t v20 = (char *)&v27[3] + v17 + 1;
        size_t v21 = -v17;
LABEL_21:
        uint64_t result = (char *)memcpy(v16, v20, v21);
        goto LABEL_22;
      }
      goto LABEL_22;
    }
LABEL_15:
    unint64_t v22 = -(uint64_t)a5;
    do
    {
      *((unsigned char *)&v27[3] + v17--) = (v22 % 0xA) | 0x30;
      BOOL v19 = v22 > 9;
      v22 /= 0xAuLL;
    }
    while (v19);
    uint64_t v23 = v17 + 24;
    unint64_t v20 = (char *)&v27[3] + v17;
    unsigned char *v20 = 45;
    if (v17 + 26 <= 26)
    {
      if (v23 <= 24) {
        uint64_t v23 = 24;
      }
      size_t v21 = v23 - v17 - 23;
      goto LABEL_21;
    }
LABEL_22:
    if ((a5 & 0x8000000000000000) != 0)
    {
      unint64_t v25 = -(uint64_t)a5;
      unsigned int v24 = 1;
      do
      {
        ++v24;
        BOOL v26 = v25 >= 0xA;
        v25 /= 0xAuLL;
      }
      while (v26);
    }
    else
    {
      unsigned int v24 = 0;
      do
      {
        ++v24;
        BOOL v19 = a5 > 9;
        a5 /= 0xAuLL;
      }
      while (v19);
    }
    if (a7)
    {
      uint64_t result = &v16[v24];
      if (a7 == 1) {
        *uint64_t result = *a6;
      }
      else {
        uint64_t result = (char *)memcpy(result, a6, a7);
      }
    }
  }
LABEL_32:
  *(void *)uint64_t v7 = v14;
  return result;
}

void WGSL::constantVector(WGSL *a1, const WGSL::Type *a2, void *a3, unsigned int a4)
{
  uint64_t v8 = a4;
  uint64_t v9 = 24 * a4;
  int v60 = (WTF *)WTF::fastMalloc((WTF *)(v9 + 8));
  *(_DWORD *)int v60 = a4;
  BOOL v10 = (char *)v60 + 8;
  bzero((char *)v60 + 8, 24 * ((v9 - 24) / 0x18uLL) + 24);
  uint64_t v11 = (_DWORD *)*a3;
  if (!*a3)
  {
LABEL_4:
    WGSL::zeroValue(a1, a2);
    uint64_t v14 = *(unsigned int *)v60;
    if (v14) {
      goto LABEL_48;
    }
    goto LABEL_52;
  }
  int v12 = *v11;
  if (*v11 == 1)
  {
    if (*((_DWORD *)a2 + 12) != 1)
    {
      uint64_t v54 = std::__throw_bad_variant_access[abi:sn180100]();
      WGSL::convertValue<WGSL::StaticCast>(v54, v55, v56);
      return;
    }
    uint64_t v15 = *(void *)a2;
    size_t v57 = a1;
    if (v11[6] == 8)
    {
      unint64_t v16 = (unsigned int *)*((void *)v11 + 1);
      if (v16) {
        uint64_t v17 = v16 + 2;
      }
      else {
        uint64_t v17 = 0;
      }
      if (v16)
      {
        uint64_t v18 = (uint64_t)&v16[6 * *v16 + 2];
        if (v17 == (unsigned int *)v18) {
          goto LABEL_86;
        }
      }
      else
      {
        uint64_t v18 = 0;
        if (!v17)
        {
LABEL_86:
          *(void *)size_t v57 = v60;
          *((_DWORD *)v57 + 4) = 8;
          return;
        }
      }
      unsigned int v48 = 0;
      while (1)
      {
        LOBYTE(v67[0]) = 0;
        unsigned int v68 = -1;
        uint64_t v49 = v17[4];
        if (v49 == -1)
        {
          v63[0] = 0;
        }
        else
        {
          __int16 v50 = off_1ECABEE88[v49];
          ((void (*)(void *, void *, unsigned int *))v50)(v65, v67, v17);
          unsigned int v68 = v49;
          v63[0] = 0;
          int v64 = -1;
          ((void (*)(char **, unsigned char *, void *))v50)(&v69, v63, v67);
        }
        int v64 = v49;
        WGSL::convertValue<WGSL::StaticCast>((uint64_t)v65, v15, (uint64_t)v63);
        if (*(_DWORD *)v60 <= v48)
        {
          __break(0xC471u);
          JUMPOUT(0x1826B49F8);
        }
        uint64_t v51 = &v10[24 * v48];
        uint64_t v52 = *((unsigned int *)v51 + 4);
        if (v52 == -1)
        {
          if (v66 == -1) {
            goto LABEL_82;
          }
        }
        else if (v66 == -1)
        {
          ((void (*)(char **, char *))off_1ECABEC60[v52])(&v69, &v10[24 * v48]);
          *((_DWORD *)v51 + 4) = -1;
          uint64_t v53 = v66;
          if (v66 == -1) {
            goto LABEL_82;
          }
LABEL_81:
          ((void (*)(char **, void *))off_1ECABEC60[v53])(&v69, v65);
          goto LABEL_82;
        }
        int8x16_t v69 = &v10[24 * v48];
        ((void (*)(char **, char *, void *))off_1ECABEF38[v66])(&v69, v69, v65);
        uint64_t v53 = v66;
        if (v66 != -1) {
          goto LABEL_81;
        }
LABEL_82:
        unsigned int v66 = -1;
        if (v64 != -1) {
          ((void (*)(char **, unsigned char *))off_1ECABEC60[v64])(&v69, v63);
        }
        int v64 = -1;
        if (v68 != -1) {
          ((void (*)(void *, void *))off_1ECABEC60[v68])(v65, v67);
        }
        v17 += 6;
        ++v48;
        if (v17 == (unsigned int *)v18) {
          goto LABEL_86;
        }
      }
    }
    unint64_t v42 = 0;
    unint64_t v43 = (_DWORD *)((char *)v60 + 24);
    while (1)
    {
      uint64_t v44 = (_DWORD *)*a3;
      if (!*(_DWORD *)*a3)
      {
        __break(0xC471u);
        JUMPOUT(0x1826B4998);
      }
      v61[0] = 0;
      int v62 = -1;
      uint64_t v45 = v44[6];
      if (v45 != -1)
      {
        ((void (*)(void *, unsigned char *, _DWORD *))off_1ECABEE88[v45])(v67, v61, v44 + 2);
        int v62 = v45;
      }
      WGSL::convertValue<WGSL::StaticCast>((uint64_t)v67, v15, (uint64_t)v61);
      if (v42 >= *(unsigned int *)v60)
      {
        __break(0xC471u);
        JUMPOUT(0x1826B49B8);
      }
      uint64_t v46 = *v43;
      if (v46 == -1)
      {
        if (v68 == -1) {
          goto LABEL_66;
        }
      }
      else if (v68 == -1)
      {
        ((void (*)(void *, _DWORD *))off_1ECABEC60[v46])(v65, v43 - 4);
        *unint64_t v43 = -1;
        uint64_t v47 = v68;
        if (v68 == -1) {
          goto LABEL_66;
        }
LABEL_65:
        ((void (*)(void *, void *))off_1ECABEC60[v47])(v65, v67);
        goto LABEL_66;
      }
      v65[0] = v43 - 4;
      ((void (*)(void *))off_1ECABEF38[v68])(v65);
      uint64_t v47 = v68;
      if (v68 != -1) {
        goto LABEL_65;
      }
LABEL_66:
      unsigned int v68 = -1;
      if (v62 != -1) {
        ((void (*)(void *, unsigned char *))off_1ECABEC60[v62])(v65, v61);
      }
      int v62 = -1;
      ++v42;
      v43 += 6;
      if (v8 == v42) {
        goto LABEL_86;
      }
    }
  }
  if (!v12) {
    goto LABEL_4;
  }
  uint64_t v19 = 0;
  unint64_t v20 = (unsigned int **)(v11 + 2);
  uint64_t v58 = a1;
  uint64_t v59 = (uint64_t)&v11[6 * v12 + 2];
  do
  {
    uint64_t v21 = *((unsigned int *)v20 + 4);
    if (v21 == 8)
    {
      unint64_t v22 = *v20;
      if (*v20) {
        uint64_t v23 = (uint64_t)(*v20 + 2);
      }
      else {
        uint64_t v23 = 0;
      }
      if (v22) {
        uint64_t v24 = (uint64_t)&(*v20)[6 * *v22 + 2];
      }
      else {
        uint64_t v24 = 0;
      }
      for (uint64_t i = v19; ; uint64_t i = (i + 1))
      {
        if (v23 == v24) {
          goto LABEL_17;
        }
        LOBYTE(v67[0]) = 0;
        unsigned int v68 = -1;
        uint64_t v28 = *(unsigned int *)(v23 + 16);
        if (v28 != -1)
        {
          ((void (*)(void *, void *, uint64_t))off_1ECABEE88[v28])(v65, v67, v23);
          unsigned int v68 = v28;
        }
        if (*(_DWORD *)v60 <= i)
        {
          __break(0xC471u);
          JUMPOUT(0x1826B4978);
        }
        uint64_t v29 = &v10[24 * i];
        uint64_t v30 = *((unsigned int *)v29 + 4);
        if (v30 == -1) {
          break;
        }
        if (v28 != -1) {
          goto LABEL_40;
        }
        ((void (*)(void *, char *))off_1ECABEC60[v30])(v65, &v10[24 * i]);
        *((_DWORD *)v29 + 4) = -1;
        uint64_t v31 = v68;
        if (v68 != -1) {
          goto LABEL_41;
        }
LABEL_30:
        v23 += 24;
      }
      if (v28 == -1) {
        goto LABEL_30;
      }
LABEL_40:
      v65[0] = &v10[24 * i];
      ((void (*)(void *, void, void *))off_1ECABEEE0[v28])(v65, v65[0], v67);
      uint64_t v31 = v68;
      if (v68 == -1) {
        goto LABEL_30;
      }
LABEL_41:
      ((void (*)(void *, void *))off_1ECABEC60[v31])(v65, v67);
      goto LABEL_30;
    }
    if (*(_DWORD *)v60 <= v19)
    {
      __break(0xC471u);
      JUMPOUT(0x1826B49D8);
    }
    uint64_t i = (v19 + 1);
    BOOL v26 = &v10[24 * v19];
    uint64_t v27 = *((unsigned int *)v26 + 4);
    if (v27 == -1)
    {
      if (v21 == -1) {
        goto LABEL_17;
      }
LABEL_16:
      v67[0] = v26;
      ((void (*)(void *, char *, unsigned int **))off_1ECABEEE0[v21])(v67, v26, v20);
      goto LABEL_17;
    }
    if (v21 != -1) {
      goto LABEL_16;
    }
    ((void (*)(void *, char *))off_1ECABEC60[v27])(v67, v26);
    *((_DWORD *)v26 + 4) = -1;
LABEL_17:
    v20 += 3;
    uint64_t v19 = i;
  }
  while (v20 != (unsigned int **)v59);
  uint64_t v32 = *(unsigned int *)v60;
  uint64_t v33 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v32 + 8));
  int v34 = v33;
  _DWORD *v33 = v32;
  if (v32)
  {
    unint64_t v35 = v33 + 6;
    uint64_t v36 = 24 * v32;
    int8x16_t v37 = (unsigned int *)((char *)v60 + 24);
    do
    {
      *((unsigned char *)v35 - 16) = 0;
      uint64_t v13 = v35 - 4;
      _DWORD *v35 = -1;
      uint64_t v38 = *v37;
      if (v38 != -1)
      {
        ((void (*)(void *, _DWORD *, unsigned int *))off_1ECABEE88[v38])(v67, v13, v37 - 4);
        _DWORD *v35 = v38;
      }
      v35 += 6;
      v37 += 6;
      v36 -= 24;
    }
    while (v36);
  }
  *(void *)uint64_t v58 = v34;
  *((_DWORD *)v58 + 4) = 8;
  uint64_t v14 = *(unsigned int *)v60;
  if (v14)
  {
LABEL_48:
    uint64_t v39 = 24 * v14;
    uint64_t v40 = (_DWORD *)((char *)v60 + 24);
    do
    {
      uint64_t v13 = v40 - 4;
      uint64_t v41 = *v40;
      if (v41 != -1) {
        ((void (*)(void *, _DWORD *))off_1ECABEC60[v41])(v67, v13);
      }
      *uint64_t v40 = -1;
      v40 += 6;
      v39 -= 24;
    }
    while (v39);
  }
LABEL_52:
  WTF::fastFree(v60, v13);
}

uint64_t WGSL::convertValue<WGSL::StaticCast>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a2 + 48))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  else
  {
    switch(*(unsigned char *)a2)
    {
      case 0:
        LOBYTE(v41[0]) = 0;
        int v42 = -1;
        uint64_t v4 = *(unsigned int *)(a3 + 16);
        if (v4 != -1)
        {
          ((void (*)(char *, double *))off_1ECABEE88[v4])(&v43, v41);
          int v42 = v4;
          switch((int)v4)
          {
            case 0:
              uint64_t v5 = (uint64_t)*(float *)v41;
              goto LABEL_30;
            case 1:
              uint64_t v5 = (uint64_t)*(short float *)v41;
              goto LABEL_30;
            case 2:
              uint64_t v5 = (uint64_t)v41[0];
              goto LABEL_30;
            case 3:
              uint64_t v5 = SLODWORD(v41[0]);
              goto LABEL_30;
            case 4:
              uint64_t v5 = LODWORD(v41[0]);
              goto LABEL_30;
            case 5:
              uint64_t v5 = *(void *)&v41[0];
              goto LABEL_30;
            case 6:
              uint64_t v5 = LOBYTE(v41[0]);
LABEL_30:
              *(void *)a1 = v5;
              *(_DWORD *)(a1 + 16) = 5;
              return ((uint64_t (*)(char *, double *))off_1ECABEC60[v4])(&v43, v41);
            default:
              goto LABEL_76;
          }
        }
        break;
      case 1:
        LOBYTE(v39[0]) = 0;
        int v40 = -1;
        uint64_t v6 = *(unsigned int *)(a3 + 16);
        if (v6 != -1)
        {
          ((void (*)(char *, double *))off_1ECABEE88[v6])(&v43, v39);
          int v40 = v6;
          switch((int)v6)
          {
            case 0:
              int v7 = (int)*(float *)v39;
              goto LABEL_35;
            case 1:
              int v7 = (int)*(short float *)v39;
              goto LABEL_35;
            case 2:
              int v7 = (int)v39[0];
              goto LABEL_35;
            case 3:
            case 4:
            case 5:
              int v7 = LODWORD(v39[0]);
              goto LABEL_35;
            case 6:
              int v7 = LOBYTE(v39[0]);
LABEL_35:
              *(_DWORD *)a1 = v7;
              *(_DWORD *)(a1 + 16) = 3;
              return ((uint64_t (*)(char *, double *))off_1ECABEC60[v6])(&v43, v39);
            default:
              break;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x1826B5084);
      case 2:
        LOBYTE(v37[0]) = 0;
        int v38 = -1;
        uint64_t v8 = *(unsigned int *)(a3 + 16);
        if (v8 != -1)
        {
          ((void (*)(char *, double *))off_1ECABEE88[v8])(&v43, v37);
          int v38 = v8;
          switch((int)v8)
          {
            case 0:
              unsigned int v9 = *(float *)v37;
              goto LABEL_40;
            case 1:
              unsigned int v9 = *(short float *)v37;
              goto LABEL_40;
            case 2:
              unsigned int v9 = v37[0];
              goto LABEL_40;
            case 3:
            case 4:
            case 5:
              unsigned int v9 = LODWORD(v37[0]);
              goto LABEL_40;
            case 6:
              unsigned int v9 = LOBYTE(v37[0]);
LABEL_40:
              *(_DWORD *)a1 = v9;
              *(_DWORD *)(a1 + 16) = 4;
              return ((uint64_t (*)(char *, double *))off_1ECABEC60[v8])(&v43, v37);
            default:
              break;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x1826B50A4);
      case 3:
        LOBYTE(v35[0]) = 0;
        int v36 = -1;
        uint64_t v10 = *(unsigned int *)(a3 + 16);
        if (v10 != -1)
        {
          ((void (*)(char *, void *))off_1ECABEE88[v10])(&v43, v35);
          int v36 = v10;
          switch((int)v10)
          {
            case 0:
              _D0 = *(float *)v35;
              goto LABEL_48;
            case 1:
              _H0 = v35[0];
              __asm { FCVT            D0, H0 }
              goto LABEL_48;
            case 2:
              _D0 = *(double *)v35;
              goto LABEL_48;
            case 3:
              _D0 = (double)SLODWORD(v35[0]);
              goto LABEL_48;
            case 4:
              LODWORD(v11) = v35[0];
              _D0 = (double)v11;
              goto LABEL_48;
            case 5:
              _D0 = (double)v35[0];
              goto LABEL_48;
            case 6:
              _D0 = 0.0;
              if (LOBYTE(v35[0])) {
                _D0 = 1.0;
              }
LABEL_48:
              *(double *)a1 = _D0;
              *(_DWORD *)(a1 + 16) = 2;
              return ((uint64_t (*)(char *, void *))off_1ECABEC60[v10])(&v43, v35);
            default:
              break;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x1826B50C4);
      case 4:
        LOBYTE(v31[0]) = 0;
        int v32 = -1;
        uint64_t v13 = *(unsigned int *)(a3 + 16);
        if (v13 != -1)
        {
          ((void (*)(char *, unsigned int *))off_1ECABEE88[v13])(&v43, v31);
          int v32 = v13;
          switch((int)v13)
          {
            case 0:
              _S0 = *(float *)v31;
              goto LABEL_54;
            case 1:
              _H0 = v31[0];
              goto LABEL_57;
            case 2:
              _D0 = *(void *)v31;
              __asm { FCVT            H0, D0 }
              goto LABEL_57;
            case 3:
              _S0 = (float)(int)v31[0];
              goto LABEL_54;
            case 4:
              _S0 = (float)v31[0];
              goto LABEL_54;
            case 5:
              _S0 = (float)*(uint64_t *)v31;
LABEL_54:
              __asm { FCVT            H0, S0 }
              goto LABEL_57;
            case 6:
              _H0 = 0;
              if (LOBYTE(v31[0])) {
                _H0 = COERCE_UNSIGNED_INT(1.0);
              }
LABEL_57:
              *(_WORD *)a1 = _H0;
              *(_DWORD *)(a1 + 16) = 1;
              return ((uint64_t (*)(char *, unsigned int *))off_1ECABEC60[v13])(&v43, v31);
            default:
              break;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x1826B50E4);
      case 5:
        LOBYTE(v33[0]) = 0;
        int v34 = -1;
        uint64_t v15 = *(unsigned int *)(a3 + 16);
        if (v15 != -1)
        {
          ((void (*)(char *, double *))off_1ECABEE88[v15])(&v43, v33);
          int v34 = v15;
          switch((int)v15)
          {
            case 0:
              _S0 = *(float *)v33;
              goto LABEL_65;
            case 1:
              _H0 = LOWORD(v33[0]);
              __asm { FCVT            S0, H0 }
              goto LABEL_65;
            case 2:
              _S0 = v33[0];
              goto LABEL_65;
            case 3:
              _S0 = (float)SLODWORD(v33[0]);
              goto LABEL_65;
            case 4:
              _S0 = (float)LODWORD(v33[0]);
              goto LABEL_65;
            case 5:
              _S0 = (float)*(uint64_t *)&v33[0];
              goto LABEL_65;
            case 6:
              _S0 = 0.0;
              if (LOBYTE(v33[0])) {
                _S0 = 1.0;
              }
LABEL_65:
              *(float *)a1 = _S0;
              *(_DWORD *)(a1 + 16) = 0;
              return ((uint64_t (*)(char *, double *))off_1ECABEC60[v15])(&v43, v33);
            default:
              break;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x1826B5104);
      case 7:
        LOBYTE(v29[0]) = 0;
        int v30 = -1;
        uint64_t v17 = *(unsigned int *)(a3 + 16);
        if (v17 != -1)
        {
          ((void (*)(char *, double *))off_1ECABEE88[v17])(&v43, v29);
          int v30 = v17;
          switch((int)v17)
          {
            case 0:
              _Q0.n128_u32[0] = LODWORD(v29[0]);
              _ZF = *(float *)v29 == 0.0;
              goto LABEL_70;
            case 1:
              __asm { FCMP            H0, #0 }
              goto LABEL_70;
            case 2:
              _Q0.n128_f64[0] = v29[0];
              _ZF = v29[0] == 0.0;
              goto LABEL_70;
            case 3:
            case 4:
              _ZF = LODWORD(v29[0]) == 0;
              goto LABEL_70;
            case 5:
              _ZF = *(void *)&v29[0] == 0;
LABEL_70:
              char v28 = !_ZF;
              goto LABEL_73;
            case 6:
              char v28 = LOBYTE(v29[0]);
LABEL_73:
              *(unsigned char *)a1 = v28;
              *(_DWORD *)(a1 + 16) = 6;
              return ((uint64_t (*)(char *, double *, __n128))off_1ECABEC60[v17])(&v43, v29, _Q0);
            default:
              break;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x1826B5124);
      default:
        __break(0xC471u);
        JUMPOUT(0x1826B5144);
    }
  }
LABEL_76:
  __break(0xC471u);
  JUMPOUT(0x1826B5064);
}

void WGSL::constantMatrix(void *a1, uint64_t a2, unsigned int **a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5 = *a3;
  if (!*a3) {
    goto LABEL_4;
  }
  uint64_t v6 = *v5;
  if (v6 != 1)
  {
    if (!v6)
    {
LABEL_4:
      JUMPOUT(0x1826AB2F4);
    }
    uint64_t v15 = (unsigned int *)(a5 * a4);
    if (v6 == v15)
    {
      uint64_t v46 = a5 << 32;
      unint64_t v16 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v6 + 8));
      uint64_t v17 = 0;
      *unint64_t v16 = v6;
      do
      {
        LOBYTE(v16[v17 + 2]) = 0;
        v16[v17 + 6] = -1;
        uint64_t v18 = v5[v17 + 6];
        if (v18 != -1)
        {
          ((void (*)(void *, _DWORD *, unsigned int *))off_1ECABEE88[v18])(v50, &v16[v17 + 2], &v5[v17 + 2]);
          v16[v17 + 6] = v18;
        }
        v17 += 6;
      }
      while (6 * v6 != v17);
      int v32 = *a3;
      if (*a3) {
        int v32 = (unsigned int *)*v32;
      }
      if (v32 != v15)
      {
        __break(0xC471u);
        JUMPOUT(0x1826B5738);
      }
      uint64_t v33 = a1;
      *a1 = v46 | a4;
      a1[1] = v16;
      goto LABEL_61;
    }
    if (v6 != a4)
    {
      __break(0xC471u);
      JUMPOUT(0x1826B5718);
    }
    uint64_t v19 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * (void)v15 + 8));
    *uint64_t v19 = v15;
    unint64_t v20 = v19 + 2;
    bzero(v19 + 2, 24 * ((24 * (uint64_t)v15 - 24) / 0x18uLL) + 24);
    uint64_t v21 = *a3;
    if (*a3)
    {
      unsigned int v24 = *v21;
      uint64_t v23 = (unsigned int **)(v21 + 2);
      unsigned int v22 = v24;
      if (v24)
      {
        unsigned int v25 = 0;
        uint64_t v47 = &v23[3 * v22];
        do
        {
          if (*((_DWORD *)v23 + 4) != 8) {
            goto LABEL_66;
          }
          BOOL v26 = *v23;
          if (*v23) {
            uint64_t v27 = (uint64_t)(*v23 + 2);
          }
          else {
            uint64_t v27 = 0;
          }
          if (v26) {
            uint64_t v28 = (uint64_t)&(*v23)[6 * *v26 + 2];
          }
          else {
            uint64_t v28 = 0;
          }
          while (v27 != v28)
          {
            if (*v19 <= v25)
            {
              __break(0xC471u);
              JUMPOUT(0x1826B56D8);
            }
            uint64_t v29 = &v20[6 * v25];
            uint64_t v30 = v29[4];
            uint64_t v31 = *(unsigned int *)(v27 + 16);
            if (v30 == -1)
            {
              if (v31 == -1) {
                goto LABEL_34;
              }
LABEL_33:
              v50[0] = &v20[6 * v25];
              ((void (*)(void *, void, uint64_t))off_1ECABEEE0[v31])(v50, v50[0], v27);
              goto LABEL_34;
            }
            if (v31 != -1) {
              goto LABEL_33;
            }
            ((void (*)(void *, _DWORD *))off_1ECABEC60[v30])(v50, &v20[6 * v25]);
            v29[4] = -1;
LABEL_34:
            v27 += 24;
            ++v25;
          }
          v23 += 3;
        }
        while (v23 != v47);
      }
    }
    uint64_t v33 = a1;
    *a1 = a4 | (unint64_t)(a5 << 32);
    a1[1] = v19;
LABEL_61:
    *((_DWORD *)v33 + 4) = 9;
    return;
  }
  if (*(_DWORD *)(a2 + 48) == 2 && v5[6] == 9)
  {
    uint64_t v7 = *(void *)a2;
    unsigned int v8 = a5 * a4;
    unsigned int v9 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * a5 * a4 + 8));
    *unsigned int v9 = v8;
    uint64_t v10 = v9 + 2;
    bzero(v9 + 2, 24 * ((24 * (unint64_t)v8 - 24) / 0x18) + 24);
    unint64_t v11 = (unsigned int *)*((void *)v5 + 2);
    if (v11) {
      int v12 = v11 + 2;
    }
    else {
      int v12 = 0;
    }
    if (v11)
    {
      uint64_t v13 = (uint64_t)&v11[6 * *v11 + 2];
      if (v12 == (unsigned int *)v13) {
        goto LABEL_60;
      }
    }
    else
    {
      uint64_t v13 = 0;
      if (!v12)
      {
LABEL_60:
        uint64_t v33 = a1;
        *a1 = a4 | (unint64_t)(a5 << 32);
        a1[1] = v9;
        goto LABEL_61;
      }
    }
    unsigned int v34 = 0;
    while (1)
    {
      v48[0] = 0;
      int v49 = -1;
      uint64_t v35 = v12[4];
      if (v35 != -1)
      {
        ((void (*)(void *, unsigned char *, unsigned int *))off_1ECABEE88[v35])(v50, v48, v12);
        int v49 = v35;
      }
      WGSL::convertValue<WGSL::StaticCast>((uint64_t)v50, v7, (uint64_t)v48);
      if (*v9 <= v34)
      {
        __break(0xC471u);
        JUMPOUT(0x1826B56F8);
      }
      int v36 = &v10[6 * v34];
      uint64_t v37 = v36[4];
      if (v37 == -1)
      {
        if (v51 == -1) {
          goto LABEL_58;
        }
      }
      else if (v51 == -1)
      {
        ((void (*)(_DWORD **, _DWORD *))off_1ECABEC60[v37])(&v52, &v10[6 * v34]);
        v36[4] = -1;
        uint64_t v38 = v51;
        if (v51 == -1) {
          goto LABEL_58;
        }
LABEL_57:
        ((void (*)(_DWORD **, void *))off_1ECABEC60[v38])(&v52, v50);
        goto LABEL_58;
      }
      uint64_t v52 = &v10[6 * v34];
      ((void (*)(_DWORD **, _DWORD *, void *))off_1ECABEF38[v51])(&v52, v52, v50);
      uint64_t v38 = v51;
      if (v51 != -1) {
        goto LABEL_57;
      }
LABEL_58:
      unsigned int v51 = -1;
      if (v49 != -1) {
        ((void (*)(_DWORD **, unsigned char *))off_1ECABEC60[v49])(&v52, v48);
      }
      int v49 = -1;
      v12 += 6;
      ++v34;
      if (v12 == (unsigned int *)v13) {
        goto LABEL_60;
      }
    }
  }
LABEL_66:
  uint64_t v39 = std::__throw_bad_variant_access[abi:sn180100]();
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJN4WGSL13ConstantValueES4_EEC2B8sn180100IJLm0ELm1EEJS4_S4_EJEJEJRNS3_14ConstantVectorES8_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSA_IJDpT2_EEEDpOT3_(v39);
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJN4WGSL13ConstantValueES4_EEC2B8sn180100IJLm0ELm1EEJS4_S4_EJEJEJRNS3_14ConstantVectorES8_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSA_IJDpT2_EEEDpOT3_(uint64_t a1, unsigned int *a2, unsigned int **a3)
{
  if (a2)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v6 + 8));
    *uint64_t v7 = v6;
    if (v6)
    {
      unint64_t v8 = 0;
      uint64_t v9 = 24 * v6;
      do
      {
        LOBYTE(v7[v8 / 4 + 2]) = 0;
        v7[v8 / 4 + 6] = -1;
        uint64_t v10 = a2[v8 / 4 + 6];
        if (v10 != -1)
        {
          ((void (*)(char *, _DWORD *, unsigned int *))off_1ECABEE88[v10])(&v18, &v7[v8 / 4 + 2], &a2[v8 / 4 + 2]);
          v7[v8 / 4 + 6] = v10;
        }
        v8 += 24;
      }
      while (v9 != v8);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 16) = 8;
  unint64_t v11 = *a3;
  if (*a3)
  {
    uint64_t v12 = *v11;
    uint64_t v13 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v12 + 8));
    _DWORD *v13 = v12;
    if (v12)
    {
      unint64_t v14 = 0;
      uint64_t v15 = 24 * v12;
      do
      {
        LOBYTE(v13[v14 / 4 + 2]) = 0;
        v13[v14 / 4 + 6] = -1;
        uint64_t v16 = v11[v14 / 4 + 6];
        if (v16 != -1)
        {
          ((void (*)(char *, _DWORD *, unsigned int *))off_1ECABEE88[v16])(&v19, &v13[v14 / 4 + 2], &v11[v14 / 4 + 2]);
          v13[v14 / 4 + 6] = v16;
        }
        v14 += 24;
      }
      while (v15 != v14);
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  *(void *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 40) = 8;
  return a1;
}

uint64_t *WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::HashMap(uint64_t *a1, WTF::StringImpl **a2, uint64_t a3)
{
  *a1 = 0;
  unsigned int v6 = (a3 - 1) | ((a3 - 1) >> 1) | (((a3 - 1) | ((a3 - 1) >> 1)) >> 2);
  unsigned int v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
  unint64_t v8 = (v7 | HIWORD(v7)) + 1;
  if (v8 > 0x400)
  {
    if (v8 > 2 * (unint64_t)a3) {
      goto LABEL_8;
    }
    goto LABEL_5;
  }
  if (3 * v8 <= 4 * (unint64_t)a3)
  {
LABEL_5:
    LODWORD(v8) = 2 * v8;
    if (v8 <= 0x400) {
      goto LABEL_6;
    }
LABEL_8:
    if ((double)v8 * 0.416666667 > (double)a3) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_6:
  if ((double)v8 * 0.604166667 <= (double)a3) {
LABEL_9:
  }
    LODWORD(v8) = 2 * v8;
LABEL_10:
  if (v8 <= 8) {
    unsigned int v9 = 8;
  }
  else {
    unsigned int v9 = v8;
  }
  uint64_t v10 = WTF::fastMalloc((WTF *)((32 * v9) | 0x10));
  bzero((void *)(v10 + 16), 32 * v9);
  *a1 = v10 + 16;
  *(_DWORD *)(v10 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = 0;
  if (a3)
  {
    unint64_t v11 = &a2[4 * a3];
    do
    {
      WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::add<WGSL::ConstantValue const&>(a1, a2, (const WTF::StringImpl *)(a2 + 1), (uint64_t)v13);
      a2 += 4;
    }
    while (a2 != v11);
  }
  return a1;
}

uint64_t WGSL::constantInsertBits(WGSL::Type const*,WTF::FixedVector<WGSL::ConstantValue> const&)::$_0::operator()<WGSL::ConstantValue,WGSL::ConstantValue,WGSL::ConstantValue,WGSL::ConstantValue>(uint64_t result, _DWORD *a2, _DWORD *a3, unsigned int a4, int a5, unsigned int a6, int a7)
{
  if (a5 != 4 || (a4 >= 0x20 ? (int v7 = 32) : (int v7 = a4), a7 != 4))
  {
LABEL_23:
    uint64_t v13 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::tryMakeString<WTF::ASCIILiteral,WGSL::Type,WTF::ASCIILiteral,WGSL::Type,char>(v13);
  }
  uint64_t v8 = result;
  unsigned int v9 = 32 - v7;
  if (32 - v7 >= a6) {
    unsigned int v9 = a6;
  }
  if (v9 != 32)
  {
    if (!v9)
    {
      *(unsigned char *)uint64_t result = 0;
      *(_DWORD *)(result + 16) = -1;
      uint64_t v10 = a2[4];
      if (v10 != -1)
      {
        uint64_t result = ((uint64_t (*)(char *, uint64_t, _DWORD *))off_1ECABECB8[v10])(&v14, result, a2);
        *(_DWORD *)(v8 + 16) = v10;
      }
      return result;
    }
    if (a2)
    {
      int v12 = a2[4];
      if (v12 == 3)
      {
        if (a3[4] == 3)
        {
          *(_DWORD *)uint64_t result = ((*a3 & ~(-1 << v9)) << v7) | *a2 & ~(~(-1 << v9) << v7);
          *(_DWORD *)(result + 16) = 3;
          return result;
        }
        goto LABEL_23;
      }
    }
    else
    {
      int v12 = MEMORY[0x10];
    }
    if (v12 == 4 && a3[4] == 4)
    {
      *(_DWORD *)uint64_t result = ((*a3 & ~(-1 << v9)) << v7) | *a2 & ~(~(-1 << v9) << v7);
      *(_DWORD *)(result + 16) = 4;
      return result;
    }
    goto LABEL_23;
  }
  *(unsigned char *)uint64_t result = 0;
  *(_DWORD *)(result + 16) = -1;
  uint64_t v11 = a3[4];
  if (v11 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1ECABECB8[v11])(&v15, result);
    *(_DWORD *)(v8 + 16) = v11;
  }
  return result;
}

_DWORD *WTF::tryMakeString<WTF::ASCIILiteral,WGSL::Type,WTF::ASCIILiteral,WGSL::Type,char>(uint64_t *a1, int8x16_t *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, unsigned __int8 *a6, char *a7)
{
  v73[20] = *MEMORY[0x1E4F143B8];
  if (a3) {
    size_t v7 = a3 - 1;
  }
  else {
    size_t v7 = 0;
  }
  if (v7 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826B6190);
  }
  WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)v73);
  WGSL::Type::dump(a4, (uint64_t)v73);
  WTF::StringPrintStream::toString(&v71, (WTF::StringPrintStream *)v73);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)v73);
  uint64_t v15 = *(void *)(a5 + 8);
  BOOL v16 = v15 != 0;
  unint64_t v17 = v15 - 1;
  if (v16) {
    unint64_t v18 = v17;
  }
  else {
    unint64_t v18 = 0;
  }
  if (v18 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826B61B0);
  }
  char v19 = *(__int8 **)a5;
  WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)v73);
  WGSL::Type::dump(a6, (uint64_t)v73);
  WTF::StringPrintStream::toString(&v70, (WTF::StringPrintStream *)v73);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)v73);
  unsigned int v22 = (int *)v70;
  uint64_t v21 = (_DWORD *)v71;
  if (v71)
  {
    int v23 = *(_DWORD *)(v71 + 4);
    char v24 = *a7;
    if (v70)
    {
LABEL_11:
      int v25 = *(_DWORD *)(v70 + 4);
      if ((v25 & 0x80000000) == 0)
      {
        BOOL v20 = __OFADD__(v25, 1);
        int v26 = v25 + 1;
        if (!v20) {
          goto LABEL_17;
        }
      }
LABEL_25:
      *a1 = 0;
      goto LABEL_26;
    }
  }
  else
  {
    int v23 = 0;
    char v24 = *a7;
    if (v70) {
      goto LABEL_11;
    }
  }
  int v26 = 1;
  if (v20) {
    goto LABEL_25;
  }
LABEL_17:
  BOOL v20 = __OFADD__(v18, v26);
  int v27 = v18 + v26;
  char v28 = v20;
  if (v23 < 0) {
    goto LABEL_25;
  }
  if (v28) {
    goto LABEL_25;
  }
  BOOL v20 = __OFADD__(v23, v27);
  int v29 = v23 + v27;
  if (v20) {
    goto LABEL_25;
  }
  uint64_t v30 = (v7 + v29);
  if (__OFADD__(v7, v29)) {
    goto LABEL_25;
  }
  if (v71 && (*(unsigned char *)(v71 + 16) & 4) == 0)
  {
    BOOL v33 = 0;
LABEL_44:
    *(_DWORD *)v71 += 2;
    goto LABEL_45;
  }
  BOOL v33 = !v70 || (*(unsigned char *)(v70 + 16) & 4) != 0;
  if (v71) {
    goto LABEL_44;
  }
LABEL_45:
  if (v22) {
    *v22 += 2;
  }
  if (v33)
  {
    if (v30)
    {
      if ((v30 & 0x80000000) == 0)
      {
        WTF::tryFastCompactMalloc((WTF *)(v30 + 20));
        uint64_t v34 = v73[0];
        if (v73[0])
        {
          uint64_t v35 = (unsigned char *)(v73[0] + 20);
          *(_DWORD *)v73[0] = 2;
          *(_DWORD *)(v34 + 4) = v30;
          *(void *)(v34 + 8) = v34 + 20;
          *(_DWORD *)(v34 + 16) = 4;
          uint64_t v36 = v34;
          if (v21) {
            *v21 += 2;
          }
          if (v22) {
            *v22 += 2;
          }
          if (v7)
          {
            if (v7 == 1) {
              unsigned char *v35 = a2->i8[0];
            }
            else {
              memcpy((void *)(v34 + 20), a2, v7);
            }
          }
          uint64_t v56 = (int8x16_t *)&v35[v7];
          if (v21) {
            *v21 += 2;
          }
          v73[0] = (uint64_t)v21;
          if (v22)
          {
            *v22 += 2;
            unint64_t v72 = v22;
            WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<char,void>>(v56, v73, v19, v18, (uint64_t *)&v72, v24);
            if (*v22 == 2)
            {
              WTF::StringImpl::destroy();
              if (!v21) {
                goto LABEL_99;
              }
            }
            else
            {
              *v22 -= 2;
              if (!v21) {
                goto LABEL_99;
              }
            }
          }
          else
          {
            unint64_t v72 = 0;
            WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<char,void>>(v56, v73, v19, v18, (uint64_t *)&v72, v24);
            if (!v21) {
              goto LABEL_99;
            }
          }
          if (*v21 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v21 -= 2;
          }
LABEL_99:
          if (!v22) {
            goto LABEL_109;
          }
          int v57 = *v22 - 2;
          if (*v22 == 2)
          {
            WTF::StringImpl::destroy();
            goto LABEL_109;
          }
          goto LABEL_108;
        }
      }
LABEL_86:
      uint64_t v36 = 0;
      goto LABEL_113;
    }
LABEL_87:
    uint64_t v36 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_113;
  }
  if (!v30) {
    goto LABEL_87;
  }
  if (v30 > 0x7FFFFFEF) {
    goto LABEL_86;
  }
  WTF::tryFastCompactMalloc((WTF *)(2 * v30 + 20));
  uint64_t v37 = v73[0];
  if (!v73[0]) {
    goto LABEL_86;
  }
  unint64_t v38 = v73[0] + 20;
  *(_DWORD *)v73[0] = 2;
  *(_DWORD *)(v37 + 4) = v30;
  *(void *)(v37 + 8) = v37 + 20;
  *(_DWORD *)(v37 + 16) = 0;
  uint64_t v36 = v37;
  if (v21) {
    *v21 += 2;
  }
  if (v22) {
    *v22 += 2;
  }
  uint64_t v39 = (uint16x8_t *)(v38 + 2 * v7);
  if ((v7 & 0xFFFFFFC0) != 0)
  {
    unint64_t v40 = v38 + 2 * (v7 & 0xFFFFFFC0);
    long long v41 = 0uLL;
    do
    {
      v74.val[0] = *a2;
      int8x16_t v42 = a2[1];
      v75.val[0] = a2[2];
      int8x16_t v43 = a2[3];
      a2 += 4;
      int8x16_t v44 = v43;
      v75.val[1] = 0uLL;
      v76.val[0] = v42;
      v74.val[1] = 0uLL;
      uint64_t v45 = (char *)v38;
      vst2q_s8(v45, v74);
      v45 += 32;
      v76.val[1] = 0uLL;
      vst2q_s8(v45, v76);
      uint64_t v46 = (char *)(v38 + 64);
      vst2q_s8(v46, v75);
      uint64_t v47 = (char *)(v38 + 96);
      vst2q_s8(v47, *(int8x16x2_t *)(&v41 - 1));
      v38 += 128;
    }
    while (v38 != v40);
    unint64_t v38 = v40;
  }
  if ((uint16x8_t *)v38 != v39)
  {
    unint64_t v48 = v36 + 2 * a3 - v38;
    uint64_t v49 = -2;
    if (a3) {
      uint64_t v50 = -2;
    }
    else {
      uint64_t v50 = 0;
    }
    unint64_t v51 = v48 + v50 + 18;
    if (v51 < 0xE) {
      goto LABEL_78;
    }
    if (!a3) {
      uint64_t v49 = 0;
    }
    unint64_t v52 = v48 + v49 + 18;
    if (v38 < (unint64_t)a2->u64 + (v52 >> 1) + 1
      && (unint64_t)a2 < (v52 & 0xFFFFFFFFFFFFFFFELL) + v38 + 2)
    {
LABEL_78:
      uint64_t v53 = (uint16x8_t *)v38;
      uint64_t v54 = a2;
      goto LABEL_79;
    }
    uint64_t v58 = (v51 >> 1) + 1;
    if (v51 >= 0x3E)
    {
      unint64_t v59 = v58 & 0xFFFFFFFFFFFFFFE0;
      int v60 = (uint8x8_t *)&a2[1];
      unsigned long long v61 = (uint16x8_t *)(v38 + 32);
      unint64_t v62 = v58 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v63 = *(uint8x16_t *)v60[-2].i8;
        uint16x8_t v64 = vmovl_u8(*v60);
        uint16x8_t v65 = vmovl_high_u8(*(uint8x16_t *)v60->i8);
        v61[-2] = vmovl_u8(*(uint8x8_t *)v63.i8);
        v61[-1] = vmovl_high_u8(v63);
        *unsigned long long v61 = v64;
        v61[1] = v65;
        v61 += 4;
        v60 += 4;
        v62 -= 32;
      }
      while (v62);
      if (v58 == v59) {
        goto LABEL_80;
      }
      if ((v58 & 0x18) == 0)
      {
        uint64_t v54 = (int8x16_t *)((char *)a2 + v59);
        uint64_t v53 = (uint16x8_t *)(v38 + 2 * v59);
        do
        {
LABEL_79:
          __int16 v55 = v54->u8[0];
          uint64_t v54 = (int8x16_t *)((char *)v54 + 1);
          v53->i16[0] = v55;
          uint64_t v53 = (uint16x8_t *)((char *)v53 + 2);
        }
        while (v53 != v39);
        goto LABEL_80;
      }
    }
    else
    {
      unint64_t v59 = 0;
    }
    uint64_t v53 = (uint16x8_t *)(v38 + 2 * (v58 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v54 = (int8x16_t *)((char *)a2 + (v58 & 0xFFFFFFFFFFFFFFF8));
    unsigned int v66 = (uint8x8_t *)&a2->i8[v59];
    int8x16_t v67 = (uint16x8_t *)(v38 + 2 * v59);
    unint64_t v68 = v59 - (v58 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v69 = *v66++;
      *v67++ = vmovl_u8(v69);
      v68 += 8;
    }
    while (v68);
    if (v58 != (v58 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_79;
    }
  }
LABEL_80:
  if (v21) {
    *v21 += 2;
  }
  v73[0] = (uint64_t)v21;
  if (v22)
  {
    *v22 += 2;
    unint64_t v72 = v22;
    WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<char,void>>(v39, v73, (unint64_t)v19, v18, (uint64_t *)&v72, v24);
    if (*v22 == 2)
    {
      WTF::StringImpl::destroy();
      if (!v21) {
        goto LABEL_106;
      }
    }
    else
    {
      *v22 -= 2;
      if (!v21) {
        goto LABEL_106;
      }
    }
  }
  else
  {
    unint64_t v72 = 0;
    WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<char,void>>(v39, v73, (unint64_t)v19, v18, (uint64_t *)&v72, v24);
    if (!v21) {
      goto LABEL_106;
    }
  }
  if (*v21 == 2) {
    WTF::StringImpl::destroy();
  }
  else {
    *v21 -= 2;
  }
LABEL_106:
  if (!v22) {
    goto LABEL_109;
  }
  int v57 = *v22 - 2;
  if (*v22 != 2)
  {
LABEL_108:
    *unsigned int v22 = v57;
LABEL_109:
    if (v21) {
      goto LABEL_110;
    }
    goto LABEL_113;
  }
  WTF::StringImpl::destroy();
  if (v21)
  {
LABEL_110:
    if (*v21 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v21 -= 2;
    }
  }
LABEL_113:
  *a1 = v36;
  if (v22)
  {
    if (*v22 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v22 -= 2;
    }
  }
  if (v21)
  {
    if (*v21 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v21 -= 2;
    }
  }
LABEL_26:
  uint64_t v31 = (_DWORD *)v70;
  uint64_t v70 = 0;
  if (v31)
  {
    if (*v31 == 2)
    {
      WTF::StringImpl::destroy();
      uint64_t result = (_DWORD *)v71;
      uint64_t v71 = 0;
      if (!result) {
        return result;
      }
      goto LABEL_32;
    }
    *v31 -= 2;
  }
  uint64_t result = (_DWORD *)v71;
  uint64_t v71 = 0;
  if (!result) {
    return result;
  }
LABEL_32:
  if (*result == 2) {
    return (_DWORD *)WTF::StringImpl::destroy();
  }
  *result -= 2;
  return result;
}

int8x16_t *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<char,void>>(int8x16_t *__dst, uint64_t *a2, __int8 *__src, unsigned int a4, uint64_t *a5, char a6)
{
  uint64_t v10 = __dst;
  uint64_t v11 = *a2;
  if (!*a2)
  {
LABEL_27:
    uint64_t v25 = 0;
    uint64_t v26 = *a5;
    if (!v26) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  uint64_t v13 = *(const char **)(v11 + 8);
  size_t v14 = *(unsigned int *)(v11 + 4);
  if ((*(unsigned char *)(v11 + 16) & 4) == 0)
  {
    uint64_t v15 = (int8x16_t *)((char *)__dst + v14);
    if (v14 < 0x10)
    {
      BOOL v16 = __dst;
      if (__dst == v15) {
        goto LABEL_24;
      }
    }
    else
    {
      BOOL v16 = (int8x16_t *)((char *)__dst + (v14 & 0xFFFFFFF0));
      unint64_t v17 = (unsigned long long *)__dst;
      do
      {
        unsigned long long v18 = (unsigned __int128)vld2q_s8(v13);
        v13 += 32;
        *v17++ = v18;
      }
      while (v17 != (unsigned long long *)v16);
      if (v16 == v15) {
        goto LABEL_24;
      }
    }
    unint64_t v19 = &__dst->i8[v14] - (__int8 *)v16;
    if (v19 < 8 || (v16 < (int8x16_t *)&v13[2 * v19] ? (BOOL v20 = v13 >= &__dst->i8[v14]) : (BOOL v20 = 1), !v20))
    {
      unsigned int v22 = v16;
      int v23 = v13;
      goto LABEL_21;
    }
    if (v19 >= 0x20)
    {
      unint64_t v21 = v19 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v56 = (int8x16_t *)(v13 + 32);
      int v57 = v16 + 1;
      unint64_t v58 = v19 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v60 = v56[-2];
        int8x16_t v59 = v56[-1];
        int8x16_t v62 = *v56;
        int8x16_t v61 = v56[1];
        v56 += 4;
        v57[-1] = vuzp1q_s8(v60, v59);
        int8x16_t *v57 = vuzp1q_s8(v62, v61);
        v57 += 2;
        v58 -= 32;
      }
      while (v58);
      if (v19 == v21) {
        goto LABEL_24;
      }
      if ((v19 & 0x18) == 0)
      {
        int v23 = &v13[2 * v21];
        unsigned int v22 = (int8x16_t *)((char *)v16 + v21);
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v21 = 0;
    }
    unsigned int v22 = (int8x16_t *)((char *)v16 + (v19 & 0xFFFFFFFFFFFFFFF8));
    int v23 = &v13[2 * (v19 & 0xFFFFFFFFFFFFFFF8)];
    uint8x16_t v63 = (int16x8_t *)&v13[2 * v21];
    uint16x8_t v64 = (int8x8_t *)&v16->i8[v21];
    unint64_t v65 = v21 - (v19 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int16x8_t v66 = *v63++;
      *v64++ = vmovn_s16(v66);
      v65 += 8;
    }
    while (v65);
    if (v19 == (v19 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_24;
    }
    do
    {
LABEL_21:
      char v24 = *v23;
      v23 += 2;
      v22->i8[0] = v24;
      unsigned int v22 = (int8x16_t *)((char *)v22 + 1);
    }
    while (v22 != v15);
    goto LABEL_24;
  }
  if (v14)
  {
    if (v14 == 1) {
      __dst->i8[0] = *v13;
    }
    else {
      __dst = (int8x16_t *)memcpy(__dst, v13, v14);
    }
  }
LABEL_24:
  if (!*a2) {
    goto LABEL_27;
  }
  uint64_t v25 = *(unsigned int *)(*a2 + 4);
  uint64_t v26 = *a5;
  if (v26) {
LABEL_28:
  }
    *(_DWORD *)v26 += 2;
LABEL_29:
  int v27 = &v10->i8[v25];
  if (a4)
  {
    if (a4 == 1) {
      *int v27 = *__src;
    }
    else {
      __dst = (int8x16_t *)memcpy(&v10->i8[v25], __src, a4);
    }
  }
  uint64_t v28 = a4;
  int v29 = &v27[a4];
  if (!v26)
  {
    *int v29 = a6;
    return __dst;
  }
  size_t v30 = *(unsigned int *)(v26 + 4);
  *(_DWORD *)v26 += 2;
  uint64_t v31 = *(int8x16_t **)(v26 + 8);
  if ((*(unsigned char *)(v26 + 16) & 4) != 0)
  {
    if (v30)
    {
      if (v30 == 1) {
        *int v29 = v31->i8[0];
      }
      else {
        __dst = (int8x16_t *)memcpy(v29, v31, v30);
      }
    }
    goto LABEL_56;
  }
  int v32 = &v29[v30];
  if (v30 >= 0x10)
  {
    unint64_t v33 = (unint64_t)&v29[v30 & 0xFFFFFFF0];
    uint64_t v34 = (unsigned long long *)v29;
    do
    {
      unsigned long long v35 = (unsigned __int128)vld2q_s8(v31->i8);
      v31 += 2;
      *v34++ = v35;
    }
    while (v34 != (unsigned long long *)v33);
    if ((__int8 *)v33 == v32) {
      goto LABEL_56;
    }
LABEL_44:
    uint64_t v36 = (int8x16_t *)((char *)v10 + v25 + v30 + v28);
    unint64_t v37 = (unint64_t)v36 - v33;
    if ((unint64_t)v36 - v33 < 8
      || (v33 < (unint64_t)v31 + 2 * v37 ? (BOOL v38 = v31 >= v36) : (BOOL v38 = 1), !v38))
    {
      unint64_t v40 = (__int8 *)v33;
      long long v41 = v31;
      goto LABEL_53;
    }
    if (v37 >= 0x20)
    {
      unint64_t v39 = v37 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v45 = v31 + 2;
      uint64_t v46 = (int8x16_t *)(v33 + 16);
      unint64_t v47 = v37 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v49 = v45[-2];
        int8x16_t v48 = v45[-1];
        int8x16_t v51 = *v45;
        int8x16_t v50 = v45[1];
        v45 += 4;
        v46[-1] = vuzp1q_s8(v49, v48);
        *uint64_t v46 = vuzp1q_s8(v51, v50);
        v46 += 2;
        v47 -= 32;
      }
      while (v47);
      if (v37 == v39) {
        goto LABEL_56;
      }
      if ((v37 & 0x18) == 0)
      {
        long long v41 = (int8x16_t *)((char *)v31 + 2 * v39);
        unint64_t v40 = (__int8 *)(v33 + v39);
        do
        {
LABEL_53:
          char v42 = v41->i8[0];
          long long v41 = (int8x16_t *)((char *)v41 + 2);
          *v40++ = v42;
        }
        while (v40 != v32);
        goto LABEL_56;
      }
    }
    else
    {
      unint64_t v39 = 0;
    }
    unint64_t v40 = (__int8 *)(v33 + (v37 & 0xFFFFFFFFFFFFFFF8));
    long long v41 = (int8x16_t *)((char *)v31 + 2 * (v37 & 0xFFFFFFFFFFFFFFF8));
    unint64_t v52 = (int16x8_t *)((char *)v31 + 2 * v39);
    uint64_t v53 = (int8x8_t *)(v33 + v39);
    unint64_t v54 = v39 - (v37 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int16x8_t v55 = *v52++;
      *v53++ = vmovn_s16(v55);
      v54 += 8;
    }
    while (v54);
    if (v37 == (v37 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_56;
    }
    goto LABEL_53;
  }
  unint64_t v33 = (unint64_t)v29;
  if (v29 != v32) {
    goto LABEL_44;
  }
LABEL_56:
  v29[*(unsigned int *)(v26 + 4)] = a6;
  int v43 = *(_DWORD *)v26 - 2;
  if (*(_DWORD *)v26 == 2)
  {
    __dst = (int8x16_t *)WTF::StringImpl::destroy();
    int v44 = *(_DWORD *)v26 - 2;
    if (*(_DWORD *)v26 != 2) {
      goto LABEL_58;
    }
  }
  else
  {
    *(_DWORD *)uint64_t v26 = v43;
    int v44 = v43 - 2;
    if (v44)
    {
LABEL_58:
      *(_DWORD *)uint64_t v26 = v44;
      return __dst;
    }
  }
  return (int8x16_t *)WTF::StringImpl::destroy();
}

uint16x8_t *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<char,void>>(uint16x8_t *__dst, uint64_t *a2, unint64_t a3, unsigned int a4, uint64_t *a5, char a6)
{
  uint64_t v10 = __dst;
  uint64_t v11 = *a2;
  if (!*a2) {
    goto LABEL_26;
  }
  uint64_t v13 = *(_OWORD **)(v11 + 8);
  uint64_t v14 = *(unsigned int *)(v11 + 4);
  if ((*(unsigned char *)(v11 + 16) & 4) == 0)
  {
    if (v14)
    {
      if (v14 == 1) {
        __dst->i16[0] = *(_WORD *)v13;
      }
      else {
        __dst = (uint16x8_t *)memcpy(__dst, v13, 2 * v14);
      }
    }
    goto LABEL_24;
  }
  uint64_t v15 = (uint16x8_t *)((char *)__dst + 2 * v14);
  if (v14 < 0x40)
  {
    BOOL v16 = __dst;
    if (__dst == v15) {
      goto LABEL_24;
    }
LABEL_12:
    unint64_t v25 = (char *)__dst + 2 * v14 - (char *)v16 - 2;
    if (v25 < 0xE
      || (v16 < (uint16x8_t *)((char *)v13 + (v25 >> 1) + 1)
        ? (BOOL v26 = v13 >= (_OWORD *)((char *)&v16->i16[1] + (v25 & 0xFFFFFFFFFFFFFFFELL)))
        : (BOOL v26 = 1),
          !v26))
    {
      int v29 = v16;
      size_t v30 = (unsigned __int8 *)v13;
      goto LABEL_21;
    }
    uint64_t v27 = (v25 >> 1) + 1;
    if (v25 >= 0x3E)
    {
      unint64_t v28 = v27 & 0xFFFFFFFFFFFFFFE0;
      __int16 v90 = (uint8x8_t *)(v13 + 1);
      uint64_t v91 = v16 + 2;
      unint64_t v92 = v27 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v93 = *(uint8x16_t *)v90[-2].i8;
        uint16x8_t v94 = vmovl_u8(*v90);
        uint16x8_t v95 = vmovl_high_u8(*(uint8x16_t *)v90->i8);
        v91[-2] = vmovl_u8(*(uint8x8_t *)v93.i8);
        v91[-1] = vmovl_high_u8(v93);
        *uint64_t v91 = v94;
        v91[1] = v95;
        v91 += 4;
        v90 += 4;
        v92 -= 32;
      }
      while (v92);
      if (v27 == v28) {
        goto LABEL_24;
      }
      if ((v27 & 0x18) == 0)
      {
        size_t v30 = (unsigned __int8 *)v13 + v28;
        int v29 = (uint16x8_t *)((char *)v16 + 2 * v28);
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v28 = 0;
    }
    int v29 = (uint16x8_t *)((char *)v16 + 2 * (v27 & 0xFFFFFFFFFFFFFFF8));
    size_t v30 = (unsigned __int8 *)v13 + (v27 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v96 = (uint8x8_t *)((char *)v13 + v28);
    uint64_t v97 = (uint16x8_t *)((char *)v16 + 2 * v28);
    unint64_t v98 = v28 - (v27 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v99 = *v96++;
      *v97++ = vmovl_u8(v99);
      v98 += 8;
    }
    while (v98);
    if (v27 == (v27 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_24;
    }
    do
    {
LABEL_21:
      __int16 v31 = *v30++;
      v29->i16[0] = v31;
      int v29 = (uint16x8_t *)((char *)v29 + 2);
    }
    while (v29 != v15);
    goto LABEL_24;
  }
  BOOL v16 = (uint16x8_t *)((char *)__dst + 2 * (v14 & 0xFFFFFFC0));
  long long v17 = 0uLL;
  unsigned long long v18 = (char *)__dst;
  do
  {
    v101.val[0] = (int8x16_t)*v13;
    int8x16_t v19 = *((int8x16_t *)v13 + 1);
    v104.val[0] = (int8x16_t)v13[2];
    long long v20 = v13[3];
    v13 += 4;
    long long v21 = v20;
    v104.val[1] = 0uLL;
    v107.val[0] = v19;
    v101.val[1] = 0uLL;
    unsigned int v22 = v18;
    vst2q_s8(v22, v101);
    v22 += 32;
    v107.val[1] = 0uLL;
    vst2q_s8(v22, v107);
    int v23 = v18 + 64;
    vst2q_s8(v23, v104);
    char v24 = v18 + 96;
    vst2q_s8(v24, *(int8x16x2_t *)(&v17 - 1));
    v18 += 128;
  }
  while (v18 != (char *)v16);
  if (v16 != v15) {
    goto LABEL_12;
  }
LABEL_24:
  uint64_t v11 = *a2;
  if (*a2) {
    uint64_t v11 = *(unsigned int *)(v11 + 4);
  }
LABEL_26:
  unint64_t v32 = (unint64_t)v10 + 2 * v11;
  uint64_t v33 = *a5;
  if (v33) {
    *(_DWORD *)v33 += 2;
  }
  uint64_t v34 = (char *)(v32 + 2 * a4);
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    unint64_t v35 = v32 + 2 * (a4 & 0xFFFFFFC0);
    long long v36 = 0uLL;
    do
    {
      v102.val[0] = *(int8x16_t *)a3;
      int8x16_t v37 = *(int8x16_t *)(a3 + 16);
      v105.val[0] = *(int8x16_t *)(a3 + 32);
      long long v38 = *(_OWORD *)(a3 + 48);
      a3 += 64;
      long long v39 = v38;
      v105.val[1] = 0uLL;
      v108.val[0] = v37;
      v102.val[1] = 0uLL;
      unint64_t v40 = (char *)v32;
      vst2q_s8(v40, v102);
      v40 += 32;
      v108.val[1] = 0uLL;
      vst2q_s8(v40, v108);
      long long v41 = (char *)(v32 + 64);
      vst2q_s8(v41, v105);
      char v42 = (char *)(v32 + 96);
      vst2q_s8(v42, *(int8x16x2_t *)(&v36 - 1));
      v32 += 128;
    }
    while (v32 != v35);
    unint64_t v32 = v35;
  }
  if ((char *)v32 != v34)
  {
    unint64_t v43 = (unint64_t)v10->u64 + 2 * v11 + 2 * a4 - v32 - 2;
    if (v43 < 0xE || v32 < a3 + (v43 >> 1) + 1 && a3 < (v43 & 0xFFFFFFFFFFFFFFFELL) + v32 + 2)
    {
      int v44 = (char *)v32;
      uint64_t v45 = (unsigned __int8 *)a3;
      goto LABEL_37;
    }
    uint64_t v68 = (v43 >> 1) + 1;
    if (v43 >= 0x3E)
    {
      unint64_t v69 = v68 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v70 = (uint8x8_t *)(a3 + 16);
      uint64_t v71 = (uint16x8_t *)(v32 + 32);
      unint64_t v72 = v68 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v73 = *(uint8x16_t *)v70[-2].i8;
        uint16x8_t v74 = vmovl_u8(*v70);
        uint16x8_t v75 = vmovl_high_u8(*(uint8x16_t *)v70->i8);
        v71[-2] = vmovl_u8(*(uint8x8_t *)v73.i8);
        v71[-1] = vmovl_high_u8(v73);
        uint16x8_t *v71 = v74;
        v71[1] = v75;
        v71 += 4;
        v70 += 4;
        v72 -= 32;
      }
      while (v72);
      if (v68 == v69) {
        goto LABEL_38;
      }
      if ((v68 & 0x18) == 0)
      {
        uint64_t v45 = (unsigned __int8 *)(a3 + v69);
        int v44 = (char *)(v32 + 2 * v69);
        do
        {
LABEL_37:
          __int16 v46 = *v45++;
          *(_WORD *)int v44 = v46;
          v44 += 2;
        }
        while (v44 != v34);
        goto LABEL_38;
      }
    }
    else
    {
      unint64_t v69 = 0;
    }
    int v44 = (char *)(v32 + 2 * (v68 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v45 = (unsigned __int8 *)(a3 + (v68 & 0xFFFFFFFFFFFFFFF8));
    int8x16x2_t v76 = (uint8x8_t *)(a3 + v69);
    unint64_t v77 = (uint16x8_t *)(v32 + 2 * v69);
    unint64_t v78 = v69 - (v68 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v79 = *v76++;
      *v77++ = vmovl_u8(v79);
      v78 += 8;
    }
    while (v78);
    if (v68 != (v68 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_37;
    }
  }
LABEL_38:
  if (!v33)
  {
    *(_WORD *)uint64_t v34 = a6;
    return __dst;
  }
  uint64_t v47 = *(unsigned int *)(v33 + 4);
  *(_DWORD *)v33 += 2;
  int8x16_t v48 = *(int8x16_t **)(v33 + 8);
  if ((*(unsigned char *)(v33 + 16) & 4) != 0)
  {
    int8x16_t v51 = &v34[2 * v47];
    if (v47 < 0x40)
    {
      unint64_t v52 = (unint64_t)v34;
      if (v34 == v51) {
        goto LABEL_64;
      }
    }
    else
    {
      unint64_t v52 = (unint64_t)&v34[2 * (v47 & 0xFFFFFFC0)];
      long long v53 = 0uLL;
      unint64_t v54 = v34;
      do
      {
        v103.val[0] = *v48;
        int8x16_t v55 = v48[1];
        v106.val[0] = v48[2];
        int8x16_t v56 = v48[3];
        v48 += 4;
        int8x16_t v57 = v56;
        v106.val[1] = 0uLL;
        v109.val[0] = v55;
        v103.val[1] = 0uLL;
        unint64_t v58 = v54;
        vst2q_s8(v58, v103);
        v58 += 32;
        v109.val[1] = 0uLL;
        vst2q_s8(v58, v109);
        int8x16_t v59 = v54 + 64;
        vst2q_s8(v59, v106);
        int8x16_t v60 = v54 + 96;
        vst2q_s8(v60, *(int8x16x2_t *)(&v53 - 1));
        v54 += 128;
      }
      while (v54 != (char *)v52);
      if ((char *)v52 == v51) {
        goto LABEL_64;
      }
    }
    unint64_t v61 = (unint64_t)v10->u64 + 2 * v11 + 2 * v47 + 2 * a4 - v52 - 2;
    if (v61 < 0xE
      || (v52 < (unint64_t)v48->u64 + (v61 >> 1) + 1
        ? (BOOL v62 = (unint64_t)v48 >= (v61 & 0xFFFFFFFFFFFFFFFELL) + v52 + 2)
        : (BOOL v62 = 1),
          !v62))
    {
      unint64_t v65 = (char *)v52;
      int16x8_t v66 = v48;
      goto LABEL_61;
    }
    uint64_t v63 = (v61 >> 1) + 1;
    if (v61 >= 0x3E)
    {
      unint64_t v64 = v63 & 0xFFFFFFFFFFFFFFE0;
      char v80 = (uint8x8_t *)&v48[1];
      uint64_t v81 = (uint16x8_t *)(v52 + 32);
      unint64_t v82 = v63 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v83 = *(uint8x16_t *)v80[-2].i8;
        uint16x8_t v84 = vmovl_u8(*v80);
        uint16x8_t v85 = vmovl_high_u8(*(uint8x16_t *)v80->i8);
        v81[-2] = vmovl_u8(*(uint8x8_t *)v83.i8);
        v81[-1] = vmovl_high_u8(v83);
        uint16x8_t *v81 = v84;
        v81[1] = v85;
        v81 += 4;
        v80 += 4;
        v82 -= 32;
      }
      while (v82);
      if (v63 == v64) {
        goto LABEL_64;
      }
      if ((v63 & 0x18) == 0)
      {
        int16x8_t v66 = (int8x16_t *)((char *)v48 + v64);
        unint64_t v65 = (char *)(v52 + 2 * v64);
        goto LABEL_61;
      }
    }
    else
    {
      unint64_t v64 = 0;
    }
    unint64_t v65 = (char *)(v52 + 2 * (v63 & 0xFFFFFFFFFFFFFFF8));
    int16x8_t v66 = (int8x16_t *)((char *)v48 + (v63 & 0xFFFFFFFFFFFFFFF8));
    unint64_t v86 = (uint8x8_t *)&v48->i8[v64];
    unint64_t v87 = (uint16x8_t *)(v52 + 2 * v64);
    unint64_t v88 = v64 - (v63 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v89 = *v86++;
      *v87++ = vmovl_u8(v89);
      v88 += 8;
    }
    while (v88);
    if (v63 == (v63 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_64;
    }
    do
    {
LABEL_61:
      __int16 v67 = v66->u8[0];
      int16x8_t v66 = (int8x16_t *)((char *)v66 + 1);
      *(_WORD *)unint64_t v65 = v67;
      v65 += 2;
    }
    while (v65 != v51);
    goto LABEL_64;
  }
  if (!v47) {
    goto LABEL_43;
  }
  if (v47 == 1)
  {
    *(_WORD *)uint64_t v34 = v48->i16[0];
    LODWORD(v47) = 1;
LABEL_43:
    *(_WORD *)&v34[2 * v47] = a6;
    int v49 = *(_DWORD *)v33 - 2;
    if (*(_DWORD *)v33 != 2) {
      goto LABEL_44;
    }
    goto LABEL_65;
  }
  __dst = (uint16x8_t *)memcpy(v34, v48, 2 * v47);
LABEL_64:
  *(_WORD *)&v34[2 * *(unsigned int *)(v33 + 4)] = a6;
  int v49 = *(_DWORD *)v33 - 2;
  if (*(_DWORD *)v33 != 2)
  {
LABEL_44:
    *(_DWORD *)uint64_t v33 = v49;
    int v50 = v49 - 2;
    if (v50)
    {
LABEL_45:
      *(_DWORD *)uint64_t v33 = v50;
      return __dst;
    }
    goto LABEL_66;
  }
LABEL_65:
  __dst = (uint16x8_t *)WTF::StringImpl::destroy();
  int v50 = *(_DWORD *)v33 - 2;
  if (*(_DWORD *)v33 != 2) {
    goto LABEL_45;
  }
LABEL_66:
  return (uint16x8_t *)WTF::StringImpl::destroy();
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral &>(_DWORD *result, long long *a2, unsigned char *a3, uint64_t a4)
{
  if (a4) {
    size_t v4 = a4 - 1;
  }
  else {
    size_t v4 = 0;
  }
  if (v4 >> 31) {
    goto LABEL_18;
  }
  unsigned int v6 = result;
  if (!v4)
  {
    uint64_t v8 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    uint64_t v14 = v8;
    long long v15 = *a2;
    uint64_t v9 = result[33];
    if (v9 == result[32]) {
      goto LABEL_11;
    }
    goto LABEL_16;
  }
  WTF::tryFastCompactMalloc((WTF *)(v4 + 20));
  uint64_t v8 = v14;
  if (!v14)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1826B6DD0);
  }
  uint64_t result = v14 + 5;
  *uint64_t v14 = 2;
  v8[1] = v4;
  *((void *)v8 + 1) = v8 + 5;
  v8[4] = 4;
  if (v4 != 1)
  {
    uint64_t result = memcpy(result, a3, v4);
    uint64_t v14 = v8;
    long long v15 = *a2;
    uint64_t v9 = v6[33];
    if (v9 == v6[32]) {
      goto LABEL_11;
    }
LABEL_16:
    uint64_t v13 = *((void *)v6 + 15) + 24 * v9;
    *(void *)uint64_t v13 = v8;
    *(_OWORD *)(v13 + 8) = v15;
    ++v6[33];
    return result;
  }
  *(unsigned char *)uint64_t result = *a3;
  uint64_t v14 = v8;
  long long v15 = *a2;
  uint64_t v9 = v6[33];
  if (v9 != v6[32]) {
    goto LABEL_16;
  }
LABEL_11:
  unint64_t v10 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v6 + 30), v9 + 1, (unint64_t)&v14);
  uint64_t v11 = *((void *)v6 + 15) + 24 * v6[33];
  uint64_t v12 = *(void *)v10;
  *(void *)unint64_t v10 = 0;
  *(void *)uint64_t v11 = v12;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(v10 + 8);
  uint64_t result = v14;
  ++v6[33];
  uint64_t v14 = 0;
  if (result)
  {
    if (*result == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *result -= 2;
    }
  }
  return result;
}

void WGSL::TypeChecker::typeError<char &,WGSL::Type &,WTF::ASCIILiteral &>(uint64_t a1, _OWORD *a2, char a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  v20[0] = 0;
  unsigned int v21 = -1;
  uint64_t v9 = *(unsigned int *)(a4 + 48);
  if (v9 != -1)
  {
    ((void (*)(unsigned char *, unsigned __int8 *, uint64_t))off_1ECABEE00[v9])(v18, v20, a4);
    unsigned int v21 = v9;
  }
  *(_OWORD *)unsigned long long v18 = *a5;
  WTF::tryMakeString<char,WGSL::Type,WTF::ASCIILiteral>(&v17, a3, v20, (uint64_t)v18);
  if (!v17)
  {
    __break(0xC471u);
    return;
  }
  *(void *)unsigned long long v18 = v17;
  *(_OWORD *)&v18[8] = *a2;
  uint64_t v10 = *(unsigned int *)(a1 + 132);
  if (v10 != *(_DWORD *)(a1 + 128))
  {
    uint64_t v16 = *(void *)(a1 + 120) + 24 * v10;
    *(void *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 8) = *(_OWORD *)&v18[8];
    ++*(_DWORD *)(a1 + 132);
    *(void *)unsigned long long v18 = 0;
LABEL_10:
    uint64_t v15 = v21;
    if (v21 == -1) {
      return;
    }
    goto LABEL_11;
  }
  unint64_t v11 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v10 + 1, (unint64_t)v18);
  uint64_t v12 = *(void *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  uint64_t v13 = *(void *)v11;
  *(void *)unint64_t v11 = 0;
  *(void *)uint64_t v12 = v13;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)(v11 + 8);
  uint64_t v14 = *(_DWORD **)v18;
  ++*(_DWORD *)(a1 + 132);
  *(void *)unsigned long long v18 = 0;
  if (!v14) {
    goto LABEL_10;
  }
  if (*v14 != 2)
  {
    *v14 -= 2;
    uint64_t v15 = v21;
    if (v21 == -1) {
      return;
    }
    goto LABEL_11;
  }
  WTF::StringImpl::destroy();
  uint64_t v15 = v21;
  if (v21 != -1) {
LABEL_11:
  }
    ((void (*)(char *, unsigned __int8 *))off_1ECABED88[v15])(&v19, v20);
}

void WTF::tryMakeString<char,WGSL::Type,WTF::ASCIILiteral>(void *a1, char a2, unsigned __int8 *a3, uint64_t a4)
{
  v108[20] = *MEMORY[0x1E4F143B8];
  WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)v108);
  WGSL::Type::dump(a3, (uint64_t)v108);
  WTF::StringPrintStream::toString((uint64_t *)&v107, (WTF::StringPrintStream *)v108);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)v108);
  uint64_t v8 = *(void *)(a4 + 8);
  BOOL v28 = v8 != 0;
  unint64_t v9 = v8 - 1;
  if (v28) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = 0;
  }
  if (v10 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826B76D0);
  }
  unint64_t v11 = v107;
  if (v107)
  {
    int v12 = v107[1];
    if (((v12 | v10) & 0x80000000) != 0) {
      goto LABEL_12;
    }
  }
  else
  {
    int v12 = 0;
    if ((v10 & 0x80000000) != 0) {
      goto LABEL_12;
    }
  }
  BOOL v13 = __OFADD__(v12, v10);
  int v14 = v12 + v10;
  if (!v13)
  {
    uint64_t v15 = (v14 + 1);
    if (!__OFADD__(v14, 1))
    {
      uint64_t v16 = *(int8x16_t **)a4;
      if (v107)
      {
        int v17 = v107[4];
        *v107 += 2;
        if ((v17 & 4) == 0)
        {
          if (!v15)
          {
            uint64_t v31 = MEMORY[0x1E4F30960];
            *MEMORY[0x1E4F30960] += 2;
            *a1 = v31;
            int v18 = *v11 - 2;
            if (*v11 == 2) {
              goto LABEL_72;
            }
            goto LABEL_42;
          }
          if (v15 > 0x7FFFFFEF)
          {
            *a1 = 0;
            int v18 = *v11 - 2;
            if (*v11 == 2) {
              goto LABEL_72;
            }
LABEL_42:
            *unint64_t v11 = v18;
            unint64_t v11 = v107;
            int8x16x2_t v107 = 0;
            if (!v11) {
              return;
            }
            goto LABEL_74;
          }
          WTF::tryFastCompactMalloc((WTF *)(2 * v15 + 20));
          uint64_t v19 = v108[0];
          if (!v108[0]) {
            goto LABEL_71;
          }
          *(_DWORD *)v108[0] = 2;
          *(_DWORD *)(v19 + 4) = v15;
          *(_WORD *)(v19 + 20) = a2;
          *(void *)(v19 + 8) = v19 + 20;
          *(_DWORD *)(v19 + 16) = 0;
          unint64_t v32 = (_WORD *)(v19 + 22);
          uint64_t v33 = v11[1];
          *v11 += 4;
          uint64_t v34 = (int8x16_t *)*((void *)v11 + 1);
          if ((v11[4] & 4) == 0)
          {
            if (v33)
            {
              if (v33 == 1) {
                *unint64_t v32 = v34->i16[0];
              }
              else {
                memcpy((void *)(v19 + 22), v34, 2 * v33);
              }
            }
LABEL_95:
            uint64_t v59 = v11[1];
            unint64_t v60 = (unint64_t)&v32[v59];
            unint64_t v61 = (_WORD *)(v60 + 2 * v10);
            if ((v10 & 0xFFFFFFC0) != 0)
            {
              unint64_t v62 = v60 + 2 * (v10 & 0xFFFFFFC0);
              long long v63 = 0uLL;
              do
              {
                v110.val[0] = *v16;
                int8x16_t v64 = v16[1];
                v112.val[0] = v16[2];
                int8x16_t v65 = v16[3];
                v16 += 4;
                int8x16_t v66 = v65;
                v112.val[1] = 0uLL;
                v114.val[0] = v64;
                v110.val[1] = 0uLL;
                __int16 v67 = (char *)v60;
                vst2q_s8(v67, v110);
                v67 += 32;
                v114.val[1] = 0uLL;
                vst2q_s8(v67, v114);
                uint64_t v68 = (char *)(v60 + 64);
                vst2q_s8(v68, v112);
                unint64_t v69 = (char *)(v60 + 96);
                vst2q_s8(v69, *(int8x16x2_t *)(&v63 - 1));
                v60 += 128;
              }
              while (v60 != v62);
              unint64_t v60 = v62;
            }
            if ((_WORD *)v60 != v61)
            {
              unint64_t v70 = v19 + 2 * (v10 + v59) - v60 + 20;
              if (v70 < 0xE
                || v60 < (unint64_t)v16->u64 + (v70 >> 1) + 1
                && (unint64_t)v16 < (v70 & 0xFFFFFFFFFFFFFFFELL) + v60 + 2)
              {
                uint64_t v71 = (_WORD *)v60;
                unint64_t v72 = v16;
                goto LABEL_104;
              }
              uint64_t v74 = (v70 >> 1) + 1;
              if (v70 >= 0x3E)
              {
                unint64_t v75 = v74 & 0xFFFFFFFFFFFFFFE0;
                unint64_t v87 = (uint8x8_t *)&v16[1];
                unint64_t v88 = (uint16x8_t *)(v60 + 32);
                unint64_t v89 = v74 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  uint8x16_t v90 = *(uint8x16_t *)v87[-2].i8;
                  uint16x8_t v91 = vmovl_u8(*v87);
                  uint16x8_t v92 = vmovl_high_u8(*(uint8x16_t *)v87->i8);
                  v88[-2] = vmovl_u8(*(uint8x8_t *)v90.i8);
                  v88[-1] = vmovl_high_u8(v90);
                  uint16x8_t *v88 = v91;
                  v88[1] = v92;
                  v88 += 4;
                  v87 += 4;
                  v89 -= 32;
                }
                while (v89);
                if (v74 == v75) {
                  goto LABEL_68;
                }
                if ((v74 & 0x18) == 0)
                {
                  unint64_t v72 = (int8x16_t *)((char *)v16 + v75);
                  uint64_t v71 = (_WORD *)(v60 + 2 * v75);
                  do
                  {
LABEL_104:
                    __int16 v73 = v72->u8[0];
                    unint64_t v72 = (int8x16_t *)((char *)v72 + 1);
                    *v71++ = v73;
                  }
                  while (v71 != v61);
                  goto LABEL_68;
                }
              }
              else
              {
                unint64_t v75 = 0;
              }
              uint64_t v71 = (_WORD *)(v60 + 2 * (v74 & 0xFFFFFFFFFFFFFFF8));
              unint64_t v72 = (int8x16_t *)((char *)v16 + (v74 & 0xFFFFFFFFFFFFFFF8));
              uint8x16_t v93 = (uint8x8_t *)&v16->i8[v75];
              uint16x8_t v94 = (uint16x8_t *)(v60 + 2 * v75);
              unint64_t v95 = v75 - (v74 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint8x8_t v96 = *v93++;
                *v94++ = vmovl_u8(v96);
                v95 += 8;
              }
              while (v95);
              if (v74 != (v74 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_104;
              }
            }
LABEL_68:
            int v50 = *v11 - 2;
            if (*v11 == 2)
            {
              WTF::StringImpl::destroy();
              int v51 = *v11 - 2;
              if (*v11 != 2) {
                goto LABEL_70;
              }
            }
            else
            {
              *unint64_t v11 = v50;
              int v51 = v50 - 2;
              if (v51)
              {
LABEL_70:
                *unint64_t v11 = v51;
LABEL_71:
                *a1 = v19;
                int v18 = *v11 - 2;
                if (*v11 != 2) {
                  goto LABEL_42;
                }
                goto LABEL_72;
              }
            }
            WTF::StringImpl::destroy();
            *a1 = v19;
            int v18 = *v11 - 2;
            if (*v11 == 2) {
              goto LABEL_72;
            }
            goto LABEL_42;
          }
          long long v39 = &v32[v33];
          if (v33 < 0x40)
          {
            unint64_t v40 = v19 + 22;
          }
          else
          {
            unint64_t v40 = (unint64_t)&v32[v33 & 0xFFFFFFC0];
            long long v41 = 0uLL;
            char v42 = (char *)(v19 + 22);
            do
            {
              v109.val[0] = *v34;
              int8x16_t v43 = v34[1];
              v111.val[0] = v34[2];
              int8x16_t v44 = v34[3];
              v34 += 4;
              int8x16_t v45 = v44;
              v111.val[1] = 0uLL;
              v113.val[0] = v43;
              v109.val[1] = 0uLL;
              __int16 v46 = v42;
              vst2q_s8(v46, v109);
              v46 += 32;
              v113.val[1] = 0uLL;
              vst2q_s8(v46, v113);
              uint64_t v47 = v42 + 64;
              vst2q_s8(v47, v111);
              int8x16_t v48 = v42 + 96;
              vst2q_s8(v48, *(int8x16x2_t *)(&v41 - 1));
              v42 += 128;
            }
            while (v42 != (char *)v40);
          }
          if ((_WORD *)v40 == v39) {
            goto LABEL_95;
          }
          unint64_t v52 = v19 + 2 * v33 - v40 + 20;
          if (v52 < 0xE
            || (v40 < (unint64_t)v34->u64 + (v52 >> 1) + 1
              ? (BOOL v53 = (unint64_t)v34 >= (v52 & 0xFFFFFFFFFFFFFFFELL) + v40 + 2)
              : (BOOL v53 = 1),
                !v53))
          {
            int8x16_t v56 = (_WORD *)v40;
            int8x16_t v57 = v34;
            goto LABEL_92;
          }
          uint64_t v54 = (v52 >> 1) + 1;
          if (v52 >= 0x3E)
          {
            unint64_t v55 = v54 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v97 = (uint8x8_t *)&v34[1];
            unint64_t v98 = (uint16x8_t *)(v40 + 32);
            unint64_t v99 = v54 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              uint8x16_t v100 = *(uint8x16_t *)v97[-2].i8;
              uint16x8_t v101 = vmovl_u8(*v97);
              uint16x8_t v102 = vmovl_high_u8(*(uint8x16_t *)v97->i8);
              v98[-2] = vmovl_u8(*(uint8x8_t *)v100.i8);
              v98[-1] = vmovl_high_u8(v100);
              *unint64_t v98 = v101;
              v98[1] = v102;
              v98 += 4;
              v97 += 4;
              v99 -= 32;
            }
            while (v99);
            if (v54 == v55) {
              goto LABEL_95;
            }
            if ((v54 & 0x18) == 0)
            {
              int8x16_t v57 = (int8x16_t *)((char *)v34 + v55);
              int8x16_t v56 = (_WORD *)(v40 + 2 * v55);
              goto LABEL_92;
            }
          }
          else
          {
            unint64_t v55 = 0;
          }
          int8x16_t v56 = (_WORD *)(v40 + 2 * (v54 & 0xFFFFFFFFFFFFFFF8));
          int8x16_t v57 = (int8x16_t *)((char *)v34 + (v54 & 0xFFFFFFFFFFFFFFF8));
          int8x16x2_t v103 = (uint8x8_t *)&v34->i8[v55];
          int8x16x2_t v104 = (uint16x8_t *)(v40 + 2 * v55);
          unint64_t v105 = v55 - (v54 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint8x8_t v106 = *v103++;
            *v104++ = vmovl_u8(v106);
            v105 += 8;
          }
          while (v105);
          if (v54 == (v54 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_95;
          }
          do
          {
LABEL_92:
            __int16 v58 = v57->u8[0];
            int8x16_t v57 = (int8x16_t *)((char *)v57 + 1);
            *v56++ = v58;
          }
          while (v56 != v39);
          goto LABEL_95;
        }
      }
      if (v15)
      {
        if ((v15 & 0x80000000) == 0)
        {
          WTF::tryFastCompactMalloc((WTF *)(v15 + 20));
          uint64_t v19 = v108[0];
          if (v108[0])
          {
            *(_DWORD *)v108[0] = 2;
            *(_DWORD *)(v19 + 4) = v15;
            *(void *)(v19 + 8) = v19 + 20;
            *(_DWORD *)(v19 + 16) = 4;
            if (!v11)
            {
              uint64_t v35 = 0;
              *(unsigned char *)(v19 + 20) = a2;
              if (!v10) {
                goto LABEL_67;
              }
              goto LABEL_64;
            }
            *v11 += 2;
            *(unsigned char *)(v19 + 20) = a2;
            unint64_t v20 = v19 + 21;
            size_t v21 = v11[1];
            *v11 += 2;
            uint64_t v22 = (int8x16_t *)*((void *)v11 + 1);
            if ((v11[4] & 4) != 0)
            {
              if (v21)
              {
                if (v21 == 1)
                {
                  *(unsigned char *)unint64_t v20 = v22->i8[0];
                  uint64_t v35 = v11[1];
                  if (!v10) {
                    goto LABEL_67;
                  }
                  goto LABEL_64;
                }
                memcpy((void *)v20, v22, v21);
              }
            }
            else
            {
              int v23 = (unsigned char *)(v20 + v21);
              if (v21 >= 0x10)
              {
                unint64_t v24 = v20 + (v21 & 0xFFFFFFF0);
                do
                {
                  unsigned long long v25 = (unsigned __int128)vld2q_s8(v22->i8);
                  v22 += 2;
                  *(_OWORD *)unint64_t v20 = v25;
                  v20 += 16;
                }
                while (v20 != v24);
                unint64_t v20 = v24;
              }
              if ((unsigned char *)v20 != v23)
              {
                size_t v26 = v19 + v21;
                unint64_t v27 = v19 + v21 - v20 + 21;
                if (v27 < 8
                  || (v20 < (unint64_t)&v22[2].u64[1] + 2 * v26 + -2 * v20 + 2
                    ? (BOOL v28 = (unint64_t)v22 >= v26 + 21)
                    : (BOOL v28 = 1),
                      !v28))
                {
                  long long v36 = (unsigned char *)v20;
                  int8x16_t v37 = v22;
                  goto LABEL_56;
                }
                if (v27 >= 0x20)
                {
                  unint64_t v29 = v27 & 0xFFFFFFFFFFFFFFE0;
                  int8x16x2_t v76 = v22 + 2;
                  unint64_t v77 = (int8x16_t *)(v20 + 16);
                  unint64_t v78 = v27 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    int8x16_t v80 = v76[-2];
                    int8x16_t v79 = v76[-1];
                    int8x16_t v82 = *v76;
                    int8x16_t v81 = v76[1];
                    v76 += 4;
                    v77[-1] = vuzp1q_s8(v80, v79);
                    *unint64_t v77 = vuzp1q_s8(v82, v81);
                    v77 += 2;
                    v78 -= 32;
                  }
                  while (v78);
                  if (v27 == v29) {
                    goto LABEL_63;
                  }
                  if ((v27 & 0x18) == 0)
                  {
                    int8x16_t v37 = (int8x16_t *)((char *)v22 + 2 * v29);
                    long long v36 = (unsigned char *)(v20 + v29);
                    do
                    {
LABEL_56:
                      char v38 = v37->i8[0];
                      int8x16_t v37 = (int8x16_t *)((char *)v37 + 2);
                      *v36++ = v38;
                    }
                    while (v36 != v23);
                    goto LABEL_63;
                  }
                }
                else
                {
                  unint64_t v29 = 0;
                }
                long long v36 = (unsigned char *)(v20 + (v27 & 0xFFFFFFFFFFFFFFF8));
                int8x16_t v37 = (int8x16_t *)((char *)v22 + 2 * (v27 & 0xFFFFFFFFFFFFFFF8));
                uint8x16_t v83 = (int16x8_t *)((char *)v22 + 2 * v29);
                uint16x8_t v84 = (int8x8_t *)(v20 + v29);
                unint64_t v85 = v29 - (v27 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  int16x8_t v86 = *v83++;
                  *v84++ = vmovn_s16(v86);
                  v85 += 8;
                }
                while (v85);
                if (v27 != (v27 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_56;
                }
              }
            }
LABEL_63:
            uint64_t v35 = v11[1];
            if (!v10) {
              goto LABEL_67;
            }
LABEL_64:
            int v49 = (unsigned char *)(v19 + v35 + 21);
            if (v10 == 1) {
              *int v49 = v16->i8[0];
            }
            else {
              memcpy(v49, v16, v10);
            }
LABEL_67:
            if (!v11)
            {
              *a1 = v19;
              unint64_t v11 = v107;
              int8x16x2_t v107 = 0;
              if (!v11) {
                return;
              }
              goto LABEL_74;
            }
            goto LABEL_68;
          }
        }
        uint64_t v30 = 0;
      }
      else
      {
        uint64_t v30 = MEMORY[0x1E4F30960];
        *MEMORY[0x1E4F30960] += 2;
      }
      *a1 = v30;
      if (!v11) {
        goto LABEL_73;
      }
      int v18 = *v11 - 2;
      if (*v11 != 2) {
        goto LABEL_42;
      }
LABEL_72:
      WTF::StringImpl::destroy();
LABEL_73:
      unint64_t v11 = v107;
      int8x16x2_t v107 = 0;
      if (!v11) {
        return;
      }
      goto LABEL_74;
    }
  }
LABEL_12:
  *a1 = 0;
  int8x16x2_t v107 = 0;
  if (!v11) {
    return;
  }
LABEL_74:
  if (*v11 == 2) {
    WTF::StringImpl::destroy();
  }
  else {
    *v11 -= 2;
  }
}

void WTF::tryMakeString<WTF::ASCIILiteral,WGSL::Type,WTF::ASCIILiteral>(void *a1, int8x16_t *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  v150[20] = *MEMORY[0x1E4F143B8];
  if (a3) {
    size_t v5 = a3 - 1;
  }
  else {
    size_t v5 = 0;
  }
  if (v5 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826B8074);
  }
  WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)v150);
  WGSL::Type::dump(a4, (uint64_t)v150);
  WTF::StringPrintStream::toString((uint64_t *)&v149, (WTF::StringPrintStream *)v150);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)v150);
  uint64_t v11 = *(void *)(a5 + 8);
  BOOL v57 = v11 != 0;
  unint64_t v12 = v11 - 1;
  if (v57) {
    unint64_t v13 = v12;
  }
  else {
    unint64_t v13 = 0;
  }
  if (v13 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826B8094);
  }
  int v14 = v149;
  if (v149)
  {
    int v15 = v149[1];
    if (((v15 | v13) & 0x80000000) != 0) {
      goto LABEL_16;
    }
  }
  else
  {
    int v15 = 0;
    if ((v13 & 0x80000000) != 0) {
      goto LABEL_16;
    }
  }
  BOOL v16 = __OFADD__(v15, v13);
  int v17 = v15 + v13;
  if (!v16)
  {
    uint64_t v18 = (v5 + v17);
    if (!__OFADD__(v5, v17))
    {
      uint64_t v19 = *(int8x16_t **)a5;
      if (v149)
      {
        int v20 = v149[4];
        *v149 += 2;
        if ((v20 & 4) == 0)
        {
          if (!v18)
          {
            uint64_t v25 = MEMORY[0x1E4F30960];
            *MEMORY[0x1E4F30960] += 2;
            *a1 = v25;
            int v21 = *v14 - 2;
            if (*v14 == 2) {
              goto LABEL_101;
            }
            goto LABEL_36;
          }
          if (v18 > 0x7FFFFFEF)
          {
            *a1 = 0;
            int v21 = *v14 - 2;
            if (*v14 == 2) {
              goto LABEL_101;
            }
LABEL_36:
            *int v14 = v21;
            int v14 = v149;
            int v149 = 0;
            if (!v14) {
              return;
            }
            goto LABEL_103;
          }
          WTF::tryFastCompactMalloc((WTF *)(2 * v18 + 20));
          uint64_t v22 = v150[0];
          if (!v150[0]) {
            goto LABEL_100;
          }
          unint64_t v26 = v150[0] + 20;
          *(_DWORD *)v150[0] = 2;
          *(_DWORD *)(v22 + 4) = v18;
          *(void *)(v22 + 8) = v22 + 20;
          *(_DWORD *)(v22 + 16) = 0;
          *v14 += 2;
          unint64_t v27 = (_WORD *)(v22 + 20 + 2 * v5);
          if ((v5 & 0xFFFFFFC0) != 0)
          {
            unint64_t v28 = v26 + 2 * (v5 & 0xFFFFFFC0);
            long long v29 = 0uLL;
            do
            {
              v151.val[0] = *a2;
              int8x16_t v30 = a2[1];
              v154.val[0] = a2[2];
              int8x16_t v31 = a2[3];
              a2 += 4;
              int8x16_t v32 = v31;
              v154.val[1] = 0uLL;
              v157.val[0] = v30;
              v151.val[1] = 0uLL;
              uint64_t v33 = (char *)v26;
              vst2q_s8(v33, v151);
              v33 += 32;
              v157.val[1] = 0uLL;
              vst2q_s8(v33, v157);
              uint64_t v34 = (char *)(v26 + 64);
              vst2q_s8(v34, v154);
              uint64_t v35 = (char *)(v26 + 96);
              vst2q_s8(v35, *(int8x16x2_t *)(&v29 - 1));
              v26 += 128;
            }
            while (v26 != v28);
            unint64_t v26 = v28;
          }
          if ((_WORD *)v26 != v27)
          {
            unint64_t v36 = v22 + 2 * a3 - v26;
            uint64_t v37 = -2;
            if (a3) {
              uint64_t v38 = -2;
            }
            else {
              uint64_t v38 = 0;
            }
            unint64_t v39 = v36 + v38 + 18;
            if (v39 < 0xE) {
              goto LABEL_54;
            }
            if (!a3) {
              uint64_t v37 = 0;
            }
            unint64_t v40 = v36 + v37 + 18;
            if (v26 < (unint64_t)a2->u64 + (v40 >> 1) + 1
              && (unint64_t)a2 < (v40 & 0xFFFFFFFFFFFFFFFELL) + v26 + 2)
            {
LABEL_54:
              long long v41 = (_WORD *)v26;
              char v42 = a2;
              goto LABEL_55;
            }
            uint64_t v102 = (v39 >> 1) + 1;
            if (v39 >= 0x3E)
            {
              unint64_t v103 = v102 & 0xFFFFFFFFFFFFFFE0;
              uint64_t v119 = (uint8x8_t *)&a2[1];
              uint64_t v120 = (uint16x8_t *)(v26 + 32);
              unint64_t v121 = v102 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                uint8x16_t v122 = *(uint8x16_t *)v119[-2].i8;
                uint16x8_t v123 = vmovl_u8(*v119);
                uint16x8_t v124 = vmovl_high_u8(*(uint8x16_t *)v119->i8);
                v120[-2] = vmovl_u8(*(uint8x8_t *)v122.i8);
                v120[-1] = vmovl_high_u8(v122);
                uint16x8_t *v120 = v123;
                v120[1] = v124;
                v120 += 4;
                v119 += 4;
                v121 -= 32;
              }
              while (v121);
              if (v102 == v103) {
                goto LABEL_56;
              }
              if ((v102 & 0x18) == 0)
              {
                char v42 = (int8x16_t *)((char *)a2 + v103);
                long long v41 = (_WORD *)(v26 + 2 * v103);
                do
                {
LABEL_55:
                  __int16 v43 = v42->u8[0];
                  char v42 = (int8x16_t *)((char *)v42 + 1);
                  *v41++ = v43;
                }
                while (v41 != v27);
                goto LABEL_56;
              }
            }
            else
            {
              unint64_t v103 = 0;
            }
            long long v41 = (_WORD *)(v26 + 2 * (v102 & 0xFFFFFFFFFFFFFFF8));
            char v42 = (int8x16_t *)((char *)a2 + (v102 & 0xFFFFFFFFFFFFFFF8));
            unint64_t v125 = (uint8x8_t *)&a2->i8[v103];
            __int16 v126 = (uint16x8_t *)(v26 + 2 * v103);
            unint64_t v127 = v103 - (v102 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint8x8_t v128 = *v125++;
              *v126++ = vmovl_u8(v128);
              v127 += 8;
            }
            while (v127);
            if (v102 != (v102 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_55;
            }
          }
LABEL_56:
          uint64_t v44 = v14[1];
          *v14 += 2;
          int8x16_t v45 = (int8x16_t *)*((void *)v14 + 1);
          if ((v14[4] & 4) == 0)
          {
            if (v44)
            {
              if (v44 == 1) {
                *unint64_t v27 = v45->i16[0];
              }
              else {
                memcpy((void *)(v22 + 20 + 2 * v5), v45, 2 * v44);
              }
            }
LABEL_124:
            uint64_t v83 = v14[1];
            unint64_t v84 = (unint64_t)&v27[v83];
            unint64_t v85 = (_WORD *)(v84 + 2 * v13);
            if ((v13 & 0xFFFFFFC0) != 0)
            {
              unint64_t v86 = v84 + 2 * (v13 & 0xFFFFFFC0);
              long long v87 = 0uLL;
              do
              {
                v153.val[0] = *v19;
                int8x16_t v88 = v19[1];
                v156.val[0] = v19[2];
                int8x16_t v89 = v19[3];
                v19 += 4;
                int8x16_t v90 = v89;
                v156.val[1] = 0uLL;
                v159.val[0] = v88;
                v153.val[1] = 0uLL;
                uint16x8_t v91 = (char *)v84;
                vst2q_s8(v91, v153);
                v91 += 32;
                v159.val[1] = 0uLL;
                vst2q_s8(v91, v159);
                uint16x8_t v92 = (char *)(v84 + 64);
                vst2q_s8(v92, v156);
                uint8x16_t v93 = (char *)(v84 + 96);
                vst2q_s8(v93, *(int8x16x2_t *)(&v87 - 1));
                v84 += 128;
              }
              while (v84 != v86);
              unint64_t v84 = v86;
            }
            if ((_WORD *)v84 != v85)
            {
              unint64_t v94 = v22 + 2 * (v83 + a3 + v13) - v84;
              uint64_t v95 = -2;
              if (a3) {
                uint64_t v96 = -2;
              }
              else {
                uint64_t v96 = 0;
              }
              unint64_t v97 = v94 + v96 + 18;
              if (v97 < 0xE) {
                goto LABEL_137;
              }
              if (!a3) {
                uint64_t v95 = 0;
              }
              unint64_t v98 = v94 + v95 + 18;
              if (v84 < (unint64_t)v19->u64 + (v98 >> 1) + 1
                && (unint64_t)v19 < (v98 & 0xFFFFFFFFFFFFFFFELL) + v84 + 2)
              {
LABEL_137:
                unint64_t v99 = (_WORD *)v84;
                uint8x16_t v100 = v19;
                goto LABEL_138;
              }
              uint64_t v104 = (v97 >> 1) + 1;
              if (v97 >= 0x3E)
              {
                unint64_t v105 = v104 & 0xFFFFFFFFFFFFFFE0;
                uint16x8_t v129 = (uint8x8_t *)&v19[1];
                unint64_t v130 = (uint16x8_t *)(v84 + 32);
                unint64_t v131 = v104 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  uint8x16_t v132 = *(uint8x16_t *)v129[-2].i8;
                  uint16x8_t v133 = vmovl_u8(*v129);
                  uint16x8_t v134 = vmovl_high_u8(*(uint8x16_t *)v129->i8);
                  v130[-2] = vmovl_u8(*(uint8x8_t *)v132.i8);
                  v130[-1] = vmovl_high_u8(v132);
                  *unint64_t v130 = v133;
                  v130[1] = v134;
                  v130 += 4;
                  v129 += 4;
                  v131 -= 32;
                }
                while (v131);
                if (v104 == v105) {
                  goto LABEL_97;
                }
                if ((v104 & 0x18) == 0)
                {
                  uint8x16_t v100 = (int8x16_t *)((char *)v19 + v105);
                  unint64_t v99 = (_WORD *)(v84 + 2 * v105);
                  do
                  {
LABEL_138:
                    __int16 v101 = v100->u8[0];
                    uint8x16_t v100 = (int8x16_t *)((char *)v100 + 1);
                    *v99++ = v101;
                  }
                  while (v99 != v85);
                  goto LABEL_97;
                }
              }
              else
              {
                unint64_t v105 = 0;
              }
              unint64_t v99 = (_WORD *)(v84 + 2 * (v104 & 0xFFFFFFFFFFFFFFF8));
              uint8x16_t v100 = (int8x16_t *)((char *)v19 + (v104 & 0xFFFFFFFFFFFFFFF8));
              int8x16_t v135 = (uint8x8_t *)&v19->i8[v105];
              unsigned int v136 = (uint16x8_t *)(v84 + 2 * v105);
              unint64_t v137 = v105 - (v104 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint8x8_t v138 = *v135++;
                *v136++ = vmovl_u8(v138);
                v137 += 8;
              }
              while (v137);
              if (v104 != (v104 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_138;
              }
            }
LABEL_97:
            int v73 = *v14 - 2;
            if (*v14 == 2)
            {
              WTF::StringImpl::destroy();
              int v74 = *v14 - 2;
              if (*v14 != 2) {
                goto LABEL_99;
              }
            }
            else
            {
              *int v14 = v73;
              int v74 = v73 - 2;
              if (v74)
              {
LABEL_99:
                *int v14 = v74;
LABEL_100:
                *a1 = v22;
                int v21 = *v14 - 2;
                if (*v14 != 2) {
                  goto LABEL_36;
                }
                goto LABEL_101;
              }
            }
            WTF::StringImpl::destroy();
            *a1 = v22;
            int v21 = *v14 - 2;
            if (*v14 == 2) {
              goto LABEL_101;
            }
            goto LABEL_36;
          }
          unint64_t v62 = &v27[v44];
          if (v44 < 0x40)
          {
            unint64_t v63 = v22 + 20 + 2 * v5;
          }
          else
          {
            unint64_t v63 = (unint64_t)&v27[v44 & 0xFFFFFFC0];
            long long v64 = 0uLL;
            uint64_t v65 = v22 + 20 + 2 * v5;
            do
            {
              v152.val[0] = *v45;
              int8x16_t v66 = v45[1];
              v155.val[0] = v45[2];
              int8x16_t v67 = v45[3];
              v45 += 4;
              int8x16_t v68 = v67;
              v155.val[1] = 0uLL;
              v158.val[0] = v66;
              v152.val[1] = 0uLL;
              unint64_t v69 = (char *)v65;
              vst2q_s8(v69, v152);
              v69 += 32;
              v158.val[1] = 0uLL;
              vst2q_s8(v69, v158);
              unint64_t v70 = (char *)(v65 + 64);
              vst2q_s8(v70, v155);
              uint64_t v71 = (char *)(v65 + 96);
              vst2q_s8(v71, *(int8x16x2_t *)(&v64 - 1));
              v65 += 128;
            }
            while (v65 != v63);
          }
          if ((_WORD *)v63 == v62) {
            goto LABEL_124;
          }
          unint64_t v75 = v22 + 2 * (v44 + a3) - v63;
          uint64_t v76 = -2;
          if (a3) {
            uint64_t v77 = -2;
          }
          else {
            uint64_t v77 = 0;
          }
          unint64_t v78 = v75 + v77 + 18;
          if (v78 < 0xE) {
            goto LABEL_120;
          }
          if (!a3) {
            uint64_t v76 = 0;
          }
          unint64_t v79 = v75 + v76 + 18;
          if (v63 < (unint64_t)v45->u64 + (v79 >> 1) + 1
            && (unint64_t)v45 < (v79 & 0xFFFFFFFFFFFFFFFELL) + v63 + 2)
          {
LABEL_120:
            int8x16_t v80 = (_WORD *)v63;
            int8x16_t v81 = v45;
            goto LABEL_121;
          }
          uint64_t v117 = (v78 >> 1) + 1;
          if (v78 >= 0x3E)
          {
            unint64_t v118 = v117 & 0xFFFFFFFFFFFFFFE0;
            unint64_t v139 = (uint8x8_t *)&v45[1];
            uint64_t v140 = (uint16x8_t *)(v63 + 32);
            unint64_t v141 = v117 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              uint8x16_t v142 = *(uint8x16_t *)v139[-2].i8;
              uint16x8_t v143 = vmovl_u8(*v139);
              uint16x8_t v144 = vmovl_high_u8(*(uint8x16_t *)v139->i8);
              v140[-2] = vmovl_u8(*(uint8x8_t *)v142.i8);
              v140[-1] = vmovl_high_u8(v142);
              uint16x8_t *v140 = v143;
              v140[1] = v144;
              v140 += 4;
              v139 += 4;
              v141 -= 32;
            }
            while (v141);
            if (v117 == v118) {
              goto LABEL_124;
            }
            if ((v117 & 0x18) == 0)
            {
              int8x16_t v81 = (int8x16_t *)((char *)v45 + v118);
              int8x16_t v80 = (_WORD *)(v63 + 2 * v118);
              goto LABEL_121;
            }
          }
          else
          {
            unint64_t v118 = 0;
          }
          int8x16_t v80 = (_WORD *)(v63 + 2 * (v117 & 0xFFFFFFFFFFFFFFF8));
          int8x16_t v81 = (int8x16_t *)((char *)v45 + (v117 & 0xFFFFFFFFFFFFFFF8));
          unint64_t v145 = (uint8x8_t *)&v45->i8[v118];
          unint64_t v146 = (uint16x8_t *)(v63 + 2 * v118);
          unint64_t v147 = v118 - (v117 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint8x8_t v148 = *v145++;
            *v146++ = vmovl_u8(v148);
            v147 += 8;
          }
          while (v147);
          if (v117 == (v117 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_124;
          }
          do
          {
LABEL_121:
            __int16 v82 = v81->u8[0];
            int8x16_t v81 = (int8x16_t *)((char *)v81 + 1);
            *v80++ = v82;
          }
          while (v80 != v62);
          goto LABEL_124;
        }
      }
      if (v18)
      {
        if ((v18 & 0x80000000) == 0)
        {
          WTF::tryFastCompactMalloc((WTF *)(v18 + 20));
          uint64_t v22 = v150[0];
          if (v150[0])
          {
            int v23 = (unsigned char *)(v150[0] + 20);
            *(_DWORD *)v150[0] = 2;
            *(_DWORD *)(v22 + 4) = v18;
            *(void *)(v22 + 8) = v22 + 20;
            *(_DWORD *)(v22 + 16) = 4;
            if (v14) {
              *v14 += 2;
            }
            if (v5)
            {
              if (v5 == 1) {
                *int v23 = a2->i8[0];
              }
              else {
                memcpy((void *)(v22 + 20), a2, v5);
              }
            }
            __int16 v46 = &v23[v5];
            if (!v14)
            {
              uint64_t v53 = 0;
              if (!v13) {
                goto LABEL_96;
              }
              goto LABEL_93;
            }
            size_t v47 = v14[1];
            *v14 += 2;
            int8x16_t v48 = (int8x16_t *)*((void *)v14 + 1);
            if ((v14[4] & 4) != 0)
            {
              if (v47)
              {
                if (v47 == 1)
                {
                  *__int16 v46 = v48->i8[0];
                  uint64_t v53 = v14[1];
                  if (!v13) {
                    goto LABEL_96;
                  }
                  goto LABEL_93;
                }
                memcpy(v46, v48, v47);
              }
            }
            else
            {
              int v49 = &v46[v47];
              if (v47 < 0x10)
              {
                unint64_t v50 = (unint64_t)v46;
              }
              else
              {
                unint64_t v50 = (unint64_t)&v46[v47 & 0xFFFFFFF0];
                int v51 = (unsigned long long *)v46;
                do
                {
                  unsigned long long v52 = (unsigned __int128)vld2q_s8(v48->i8);
                  v48 += 2;
                  *v51++ = v52;
                }
                while (v51 != (unsigned long long *)v50);
              }
              if ((unsigned char *)v50 != v49)
              {
                size_t v54 = v22 + a3 + v47;
                unint64_t v55 = v54 - v50 - (a3 != 0) + 20;
                if (v55 < 8
                  || (!a3 ? (unint64_t v56 = v50) : (unint64_t v56 = v50 + 1),
                      v50 < (unint64_t)&v48[2].u64[1] + 2 * v54 + -2 * v56
                    ? (BOOL v57 = (unint64_t)v48 >= v54 - (a3 != 0) + 20)
                    : (BOOL v57 = 1),
                      !v57))
                {
                  uint64_t v59 = (unsigned char *)v50;
                  unint64_t v60 = v48;
                  goto LABEL_85;
                }
                if (v55 >= 0x20)
                {
                  unint64_t v58 = v55 & 0xFFFFFFFFFFFFFFE0;
                  uint8x8_t v106 = v48 + 2;
                  int8x16x2_t v107 = (int8x16_t *)(v50 + 16);
                  unint64_t v108 = v55 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    int8x16_t v110 = v106[-2];
                    int8x16_t v109 = v106[-1];
                    int8x16_t v112 = *v106;
                    int8x16_t v111 = v106[1];
                    v106 += 4;
                    v107[-1] = vuzp1q_s8(v110, v109);
                    int8x16_t *v107 = vuzp1q_s8(v112, v111);
                    v107 += 2;
                    v108 -= 32;
                  }
                  while (v108);
                  if (v55 == v58) {
                    goto LABEL_92;
                  }
                  if ((v55 & 0x18) == 0)
                  {
                    unint64_t v60 = (int8x16_t *)((char *)v48 + 2 * v58);
                    uint64_t v59 = (unsigned char *)(v50 + v58);
                    do
                    {
LABEL_85:
                      char v61 = v60->i8[0];
                      unint64_t v60 = (int8x16_t *)((char *)v60 + 2);
                      *v59++ = v61;
                    }
                    while (v59 != v49);
                    goto LABEL_92;
                  }
                }
                else
                {
                  unint64_t v58 = 0;
                }
                uint64_t v59 = (unsigned char *)(v50 + (v55 & 0xFFFFFFFFFFFFFFF8));
                unint64_t v60 = (int8x16_t *)((char *)v48 + 2 * (v55 & 0xFFFFFFFFFFFFFFF8));
                int8x16x2_t v113 = (int16x8_t *)((char *)v48 + 2 * v58);
                int8x16x2_t v114 = (int8x8_t *)(v50 + v58);
                unint64_t v115 = v58 - (v55 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  int16x8_t v116 = *v113++;
                  *v114++ = vmovn_s16(v116);
                  v115 += 8;
                }
                while (v115);
                if (v55 != (v55 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_85;
                }
              }
            }
LABEL_92:
            uint64_t v53 = v14[1];
            if (!v13) {
              goto LABEL_96;
            }
LABEL_93:
            unint64_t v72 = &v46[v53];
            if (v13 == 1) {
              *unint64_t v72 = v19->i8[0];
            }
            else {
              memcpy(v72, v19, v13);
            }
LABEL_96:
            if (!v14)
            {
              *a1 = v22;
              int v14 = v149;
              int v149 = 0;
              if (!v14) {
                return;
              }
              goto LABEL_103;
            }
            goto LABEL_97;
          }
        }
        uint64_t v24 = 0;
      }
      else
      {
        uint64_t v24 = MEMORY[0x1E4F30960];
        *MEMORY[0x1E4F30960] += 2;
      }
      *a1 = v24;
      if (!v14) {
        goto LABEL_102;
      }
      int v21 = *v14 - 2;
      if (*v14 != 2) {
        goto LABEL_36;
      }
LABEL_101:
      WTF::StringImpl::destroy();
LABEL_102:
      int v14 = v149;
      int v149 = 0;
      if (!v14) {
        return;
      }
      goto LABEL_103;
    }
  }
LABEL_16:
  *a1 = 0;
  int v149 = 0;
  if (!v14) {
    return;
  }
LABEL_103:
  if (*v14 == 2) {
    WTF::StringImpl::destroy();
  }
  else {
    *v14 -= 2;
  }
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral &,WTF::ASCIILiteral &,WTF::ASCIILiteral &>(uint64_t a1, long long *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = a4 - 1;
  if (!a4) {
    unint64_t v8 = 0;
  }
  uint64_t v22 = a3;
  if (v8 >> 31)
  {
    __break(0xC471u);
    goto LABEL_28;
  }
  LODWORD(v23) = v8;
  unint64_t v9 = a6 - 1;
  if (!a6) {
    unint64_t v9 = 0;
  }
  uint64_t v26 = a5;
  if (v9 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826B82BCLL);
  }
  int v27 = v9;
  unint64_t v10 = a8 - 1;
  if (!a8) {
    unint64_t v10 = 0;
  }
  uint64_t v24 = a7;
  if (v10 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826B82DCLL);
  }
  int v25 = v10;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v22, (uint64_t)&v26, (uint64_t)&v24, &v21);
  unint64_t v13 = v21;
  if (!v21)
  {
    __break(0xC471u);
LABEL_28:
    JUMPOUT(0x1826B829CLL);
  }
  int v21 = 0;
  uint64_t v22 = v13;
  long long v23 = *a2;
  uint64_t v14 = *(unsigned int *)(a1 + 132);
  if (v14 != *(_DWORD *)(a1 + 128))
  {
    uint64_t v20 = *(void *)(a1 + 120) + 24 * v14;
    *(void *)uint64_t v20 = v13;
    *(_OWORD *)(v20 + 8) = v23;
    ++*(_DWORD *)(a1 + 132);
    uint64_t v22 = 0;
LABEL_17:
    uint64_t result = v21;
    int v21 = 0;
    if (!result) {
      return result;
    }
    goto LABEL_18;
  }
  unint64_t v15 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v14 + 1, (unint64_t)&v22);
  uint64_t v16 = *(void *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  uint64_t v17 = *(void *)v15;
  *(void *)unint64_t v15 = 0;
  *(void *)uint64_t v16 = v17;
  *(_OWORD *)(v16 + 8) = *(_OWORD *)(v15 + 8);
  uint64_t v18 = v22;
  ++*(_DWORD *)(a1 + 132);
  uint64_t v22 = 0;
  if (!v18) {
    goto LABEL_17;
  }
  if (*v18 == 2)
  {
    WTF::StringImpl::destroy();
    uint64_t result = v21;
    int v21 = 0;
    if (!result) {
      return result;
    }
  }
  else
  {
    *v18 -= 2;
    uint64_t result = v21;
    int v21 = 0;
    if (!result) {
      return result;
    }
  }
LABEL_18:
  if (*result == 2) {
    return (_DWORD *)WTF::StringImpl::destroy();
  }
  *result -= 2;
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral,WGSL::AST::Identifier &,char>(uint64_t a1, _OWORD *a2, int8x16_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8)
{
  uint64_t v243 = *MEMORY[0x1E4F143B8];
  v239[0] = 0;
  int v240 = -1;
  uint64_t v15 = *(unsigned int *)(a5 + 48);
  if (v15 != -1)
  {
    ((void (*)(_DWORD **, unsigned __int8 *, uint64_t))off_1ECABEE00[v15])(&v241, v239, a5);
    int v240 = v15;
  }
  uint64_t v16 = *(void *)(a6 + 8);
  long long __src = *(unsigned char **)a6;
  uint64_t v17 = *(_DWORD **)(a7 + 24);
  if (v17) {
    *v17 += 2;
  }
  uint64_t v237 = v17;
  if (a4) {
    size_t v18 = a4 - 1;
  }
  else {
    size_t v18 = 0;
  }
  if (v18 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826B8F98);
  }
  uint64_t v19 = a4;
  __int16 v20 = *a8;
  WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v241);
  WGSL::Type::dump(v239, (uint64_t)&v241);
  WTF::StringPrintStream::toString(&v238, (WTF::StringPrintStream *)&v241);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v241);
  if (v16) {
    size_t v21 = v16 - 1;
  }
  else {
    size_t v21 = 0;
  }
  if (v21 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826B8FB8);
  }
  uint64_t v22 = v238;
  if (v238)
  {
    int v23 = *(_DWORD *)(v238 + 4);
    if (v237)
    {
LABEL_15:
      int v24 = v237[1];
      if (v24 < 0) {
        goto LABEL_28;
      }
      BOOL v25 = __OFADD__(v24, 1);
      int v26 = v24 + 1;
      if (v25) {
        goto LABEL_28;
      }
      goto LABEL_21;
    }
  }
  else
  {
    int v23 = 0;
    if (v237) {
      goto LABEL_15;
    }
  }
  int v26 = 1;
  if (__OFSUB__(v16, 1)) {
    goto LABEL_28;
  }
LABEL_21:
  __int16 v235 = v20;
  int v27 = 0;
  BOOL v25 = __OFADD__(v21, v26);
  int v28 = v21 + v26;
  char v29 = v25;
  if ((v23 & 0x80000000) == 0 && (v29 & 1) == 0)
  {
    BOOL v25 = __OFADD__(v23, v28);
    int v30 = v23 + v28;
    if (!v25)
    {
      unsigned int v234 = a2;
      uint64_t v39 = (v18 + v30);
      if (__OFADD__(v18, v30))
      {
        int v27 = 0;
        a2 = v234;
        goto LABEL_29;
      }
      if (v238 && (*(unsigned char *)(v238 + 16) & 4) == 0) {
        goto LABEL_58;
      }
      if (v237 && (v237[4] & 4) == 0)
      {
        if (!v238)
        {
          if (v39)
          {
            uint64_t v40 = 1;
            if (v39 <= 0x7FFFFFEF)
            {
LABEL_60:
              uint64_t v233 = v40;
              WTF::tryFastCompactMalloc((WTF *)(2 * (v18 + v30) + 20));
              int v27 = v241;
              if (v241)
              {
                unint64_t v41 = (unint64_t)(v241 + 5);
                _DWORD *v241 = 2;
                v27[1] = v39;
                *((void *)v27 + 1) = v27 + 5;
                v27[4] = 0;
                if (v22) {
                  *(_DWORD *)v22 += 2;
                }
                char v42 = (_WORD *)(v41 + 2 * v18);
                a2 = v234;
                uint64_t v43 = v16;
                if ((v18 & 0xFFFFFFC0) != 0)
                {
                  unint64_t v44 = v41 + 2 * (v18 & 0xFFFFFFC0);
                  long long v45 = 0uLL;
                  uint64_t v46 = v19;
                  do
                  {
                    v244.val[0] = *a3;
                    int8x16_t v47 = a3[1];
                    v248.val[0] = a3[2];
                    int8x16_t v48 = a3[3];
                    a3 += 4;
                    int8x16_t v49 = v48;
                    v248.val[1] = 0uLL;
                    v252.val[0] = v47;
                    v244.val[1] = 0uLL;
                    unint64_t v50 = (char *)v41;
                    vst2q_s8(v50, v244);
                    v50 += 32;
                    v252.val[1] = 0uLL;
                    vst2q_s8(v50, v252);
                    int v51 = (char *)(v41 + 64);
                    vst2q_s8(v51, v248);
                    unsigned long long v52 = (char *)(v41 + 96);
                    vst2q_s8(v52, *(int8x16x2_t *)(&v45 - 1));
                    v41 += 128;
                  }
                  while (v41 != v44);
                  unint64_t v41 = v44;
                }
                else
                {
                  uint64_t v46 = v19;
                }
                unint64_t v54 = (unint64_t)__src;
                if ((_WORD *)v41 != v42)
                {
                  unint64_t v55 = (unint64_t)v27 + 2 * v46 - v41;
                  uint64_t v56 = -2;
                  if (v46) {
                    uint64_t v57 = -2;
                  }
                  else {
                    uint64_t v57 = 0;
                  }
                  unint64_t v58 = v55 + v57 + 18;
                  if (v58 < 0xE) {
                    goto LABEL_86;
                  }
                  if (!v46) {
                    uint64_t v56 = 0;
                  }
                  unint64_t v59 = v55 + v56 + 18;
                  if (v41 < (unint64_t)a3->u64 + (v59 >> 1) + 1
                    && (unint64_t)a3 < (v59 & 0xFFFFFFFFFFFFFFFELL) + v41 + 2)
                  {
LABEL_86:
                    unint64_t v60 = (_WORD *)v41;
                    char v61 = a3;
                    goto LABEL_87;
                  }
                  uint64_t v150 = (v58 >> 1) + 1;
                  if (v58 >= 0x3E)
                  {
                    unint64_t v151 = v150 & 0xFFFFFFFFFFFFFFE0;
                    long long v166 = (uint8x8_t *)&a3[1];
                    long long v167 = (uint16x8_t *)(v41 + 32);
                    unint64_t v168 = v150 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      uint8x16_t v169 = *(uint8x16_t *)v166[-2].i8;
                      uint16x8_t v170 = vmovl_u8(*v166);
                      uint16x8_t v171 = vmovl_high_u8(*(uint8x16_t *)v166->i8);
                      v167[-2] = vmovl_u8(*(uint8x8_t *)v169.i8);
                      v167[-1] = vmovl_high_u8(v169);
                      uint16x8_t *v167 = v170;
                      v167[1] = v171;
                      v167 += 4;
                      v166 += 4;
                      v168 -= 32;
                    }
                    while (v168);
                    if (v150 == v151) {
                      goto LABEL_88;
                    }
                    if ((v150 & 0x18) == 0)
                    {
                      char v61 = (int8x16_t *)((char *)a3 + v151);
                      unint64_t v60 = (_WORD *)(v41 + 2 * v151);
                      do
                      {
LABEL_87:
                        __int16 v62 = v61->u8[0];
                        char v61 = (int8x16_t *)((char *)v61 + 1);
                        *v60++ = v62;
                      }
                      while (v60 != v42);
                      goto LABEL_88;
                    }
                  }
                  else
                  {
                    unint64_t v151 = 0;
                  }
                  unint64_t v60 = (_WORD *)(v41 + 2 * (v150 & 0xFFFFFFFFFFFFFFF8));
                  char v61 = (int8x16_t *)((char *)a3 + (v150 & 0xFFFFFFFFFFFFFFF8));
                  long long v172 = (uint8x8_t *)&a3->i8[v151];
                  long long v173 = (uint16x8_t *)(v41 + 2 * v151);
                  unint64_t v174 = v151 - (v150 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    uint8x8_t v175 = *v172++;
                    *v173++ = vmovl_u8(v175);
                    v174 += 8;
                  }
                  while (v174);
                  if (v150 != (v150 & 0xFFFFFFFFFFFFFFF8)) {
                    goto LABEL_87;
                  }
                }
LABEL_88:
                if (!v22)
                {
                  uint64_t v65 = 0;
                  unint64_t v66 = (unint64_t)v42;
                  int8x16_t v67 = &v42[v21];
                  uint64_t v68 = v21 & 0xFFFFFFC0;
                  if ((v21 & 0xFFFFFFC0) == 0) {
                    goto LABEL_171;
                  }
                  goto LABEL_168;
                }
                uint64_t v63 = *(unsigned int *)(v22 + 4);
                *(_DWORD *)v22 += 2;
                long long v64 = *(int8x16_t **)(v22 + 8);
                if ((*(unsigned char *)(v22 + 16) & 4) == 0)
                {
                  if (v63)
                  {
                    if (v63 == 1)
                    {
                      *char v42 = v64->i16[0];
                      uint64_t v65 = *(unsigned int *)(v22 + 4);
                      unint64_t v66 = (unint64_t)&v42[v65];
                      int8x16_t v67 = (_WORD *)(v66 + 2 * v21);
                      uint64_t v68 = v21 & 0xFFFFFFC0;
                      if ((v21 & 0xFFFFFFC0) == 0) {
                        goto LABEL_171;
                      }
                      goto LABEL_168;
                    }
                    unint64_t v118 = v42;
                    memcpy(v42, v64, 2 * v63);
                    char v42 = v118;
                    uint64_t v43 = v16;
                  }
LABEL_167:
                  uint64_t v65 = *(unsigned int *)(v22 + 4);
                  unint64_t v66 = (unint64_t)&v42[v65];
                  int8x16_t v67 = (_WORD *)(v66 + 2 * v21);
                  uint64_t v68 = v21 & 0xFFFFFFC0;
                  if ((v21 & 0xFFFFFFC0) == 0) {
                    goto LABEL_171;
                  }
LABEL_168:
                  unint64_t v119 = v66 + 2 * v68;
                  long long v120 = 0uLL;
                  do
                  {
                    v246.val[0] = *(int8x16_t *)v54;
                    int8x16_t v121 = *(int8x16_t *)(v54 + 16);
                    v250.val[0] = *(int8x16_t *)(v54 + 32);
                    long long v122 = *(_OWORD *)(v54 + 48);
                    v54 += 64;
                    long long v123 = v122;
                    v250.val[1] = 0uLL;
                    v254.val[0] = v121;
                    v246.val[1] = 0uLL;
                    uint16x8_t v124 = (char *)v66;
                    vst2q_s8(v124, v246);
                    v124 += 32;
                    v254.val[1] = 0uLL;
                    vst2q_s8(v124, v254);
                    unint64_t v125 = (char *)(v66 + 64);
                    vst2q_s8(v125, v250);
                    __int16 v126 = (char *)(v66 + 96);
                    vst2q_s8(v126, *(int8x16x2_t *)(&v120 - 1));
                    v66 += 128;
                  }
                  while (v66 != v119);
                  unint64_t v66 = v119;
LABEL_171:
                  if ((_WORD *)v66 == v67) {
                    goto LABEL_188;
                  }
                  unint64_t v127 = (unint64_t)v27 + 2 * v65 + 2 * v43 + 2 * v46 - v66;
                  uint64_t v128 = -2;
                  if (v46) {
                    uint64_t v129 = -2;
                  }
                  else {
                    uint64_t v129 = 0;
                  }
                  if (v43) {
                    uint64_t v130 = -2;
                  }
                  else {
                    uint64_t v130 = 0;
                  }
                  unint64_t v131 = v127 + v129 + v130 + 18;
                  if (v131 < 0xE) {
                    goto LABEL_186;
                  }
                  if (v46) {
                    uint64_t v132 = -2;
                  }
                  else {
                    uint64_t v132 = 0;
                  }
                  if (!v43) {
                    uint64_t v128 = 0;
                  }
                  unint64_t v133 = v127 + v132 + v128 + 18;
                  if (v66 < v54 + (v133 >> 1) + 1 && v54 < (v133 & 0xFFFFFFFFFFFFFFFELL) + v66 + 2)
                  {
LABEL_186:
                    uint16x8_t v134 = (_WORD *)v66;
                    int8x16_t v135 = (unsigned __int8 *)v54;
                    goto LABEL_187;
                  }
                  uint64_t v152 = (v131 >> 1) + 1;
                  if (v131 >= 0x3E)
                  {
                    unint64_t v153 = v152 & 0xFFFFFFFFFFFFFFE0;
                    uint64_t v176 = (uint8x8_t *)(v54 + 16);
                    unint64_t v177 = (uint16x8_t *)(v66 + 32);
                    unint64_t v178 = v152 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      uint8x16_t v179 = *(uint8x16_t *)v176[-2].i8;
                      uint16x8_t v180 = vmovl_u8(*v176);
                      uint16x8_t v181 = vmovl_high_u8(*(uint8x16_t *)v176->i8);
                      v177[-2] = vmovl_u8(*(uint8x8_t *)v179.i8);
                      v177[-1] = vmovl_high_u8(v179);
                      *unint64_t v177 = v180;
                      v177[1] = v181;
                      v177 += 4;
                      v176 += 4;
                      v178 -= 32;
                    }
                    while (v178);
                    if (v152 == v153) {
                      goto LABEL_188;
                    }
                    if ((v152 & 0x18) == 0)
                    {
                      int8x16_t v135 = (unsigned __int8 *)(v54 + v153);
                      uint16x8_t v134 = (_WORD *)(v66 + 2 * v153);
                      do
                      {
LABEL_187:
                        __int16 v136 = *v135++;
                        *v134++ = v136;
                      }
                      while (v134 != v67);
                      goto LABEL_188;
                    }
                  }
                  else
                  {
                    unint64_t v153 = 0;
                  }
                  uint16x8_t v134 = (_WORD *)(v66 + 2 * (v152 & 0xFFFFFFFFFFFFFFF8));
                  int8x16_t v135 = (unsigned __int8 *)(v54 + (v152 & 0xFFFFFFFFFFFFFFF8));
                  unint64_t v182 = (uint8x8_t *)(v54 + v153);
                  int8x16_t v183 = (uint16x8_t *)(v66 + 2 * v153);
                  unint64_t v184 = v153 - (v152 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    uint8x8_t v185 = *v182++;
                    *v183++ = vmovl_u8(v185);
                    v184 += 8;
                  }
                  while (v184);
                  if (v152 != (v152 & 0xFFFFFFFFFFFFFFF8)) {
                    goto LABEL_187;
                  }
LABEL_188:
                  if (!v233)
                  {
                    uint64_t v139 = 0;
                    goto LABEL_227;
                  }
                  unint64_t v137 = (int8x16_t *)*((void *)v237 + 1);
                  uint64_t v138 = v237[1];
                  if ((v237[4] & 4) == 0)
                  {
                    if (v138)
                    {
                      if (v138 == 1) {
                        *int8x16_t v67 = v137->i16[0];
                      }
                      else {
                        memcpy(v67, v137, 2 * v138);
                      }
                    }
                    goto LABEL_226;
                  }
                  uint64_t v140 = &v67[v138];
                  if (v138 < 0x40)
                  {
                    unint64_t v141 = (unint64_t)v67;
                  }
                  else
                  {
                    unint64_t v141 = (unint64_t)&v67[v138 & 0xFFFFFFC0];
                    long long v142 = 0uLL;
                    uint16x8_t v143 = (char *)v67;
                    do
                    {
                      v247.val[0] = *v137;
                      int8x16_t v144 = v137[1];
                      v251.val[0] = v137[2];
                      int8x16_t v145 = v137[3];
                      v137 += 4;
                      int8x16_t v146 = v145;
                      v251.val[1] = 0uLL;
                      v255.val[0] = v144;
                      v247.val[1] = 0uLL;
                      unint64_t v147 = v143;
                      vst2q_s8(v147, v247);
                      v147 += 32;
                      v255.val[1] = 0uLL;
                      vst2q_s8(v147, v255);
                      uint8x8_t v148 = v143 + 64;
                      vst2q_s8(v148, v251);
                      int v149 = v143 + 96;
                      vst2q_s8(v149, *(int8x16x2_t *)(&v142 - 1));
                      v143 += 128;
                    }
                    while (v143 != (char *)v141);
                  }
                  if ((_WORD *)v141 == v140)
                  {
LABEL_226:
                    uint64_t v139 = v237[1];
LABEL_227:
                    v67[v139] = v235;
                    if (!v22) {
                      goto LABEL_29;
                    }
LABEL_228:
                    int v164 = *(_DWORD *)v22 - 2;
                    if (*(_DWORD *)v22 == 2)
                    {
                      WTF::StringImpl::destroy();
                      int v164 = *(_DWORD *)v22;
                    }
                    else
                    {
                      *(_DWORD *)uint64_t v22 = v164;
                    }
                    int v165 = v164 - 2;
                    if (v165) {
                      *(_DWORD *)uint64_t v22 = v165;
                    }
                    else {
                      WTF::StringImpl::destroy();
                    }
LABEL_307:
                    if (*(_DWORD *)v22 == 2) {
                      WTF::StringImpl::destroy();
                    }
                    else {
                      *(_DWORD *)v22 -= 2;
                    }
                    goto LABEL_29;
                  }
                  unint64_t v154 = (unint64_t)v27 + 2 * v65 + 2 * v43 + 2 * v46 + 2 * v138 - v141;
                  uint64_t v155 = -2;
                  if (v46) {
                    uint64_t v156 = -2;
                  }
                  else {
                    uint64_t v156 = 0;
                  }
                  if (v43) {
                    uint64_t v157 = -2;
                  }
                  else {
                    uint64_t v157 = 0;
                  }
                  unint64_t v158 = v154 + v156 + v157 + 18;
                  if (v158 < 0xE) {
                    goto LABEL_218;
                  }
                  if (v46) {
                    uint64_t v159 = -2;
                  }
                  else {
                    uint64_t v159 = 0;
                  }
                  if (!v43) {
                    uint64_t v155 = 0;
                  }
                  unint64_t v160 = v154 + v159 + v155 + 18;
                  if (v141 < (unint64_t)v137->u64 + (v160 >> 1) + 1
                    && (unint64_t)v137 < (v160 & 0xFFFFFFFFFFFFFFFELL) + v141 + 2)
                  {
LABEL_218:
                    uint16x8_t v161 = (_WORD *)v141;
                    long long v162 = v137;
                    goto LABEL_219;
                  }
                  uint64_t v189 = (v158 >> 1) + 1;
                  if (v158 >= 0x3E)
                  {
                    unint64_t v190 = v189 & 0xFFFFFFFFFFFFFFE0;
                    unint64_t v223 = (uint8x8_t *)&v137[1];
                    uint64_t v224 = (uint16x8_t *)(v141 + 32);
                    unint64_t v225 = v189 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      uint8x16_t v226 = *(uint8x16_t *)v223[-2].i8;
                      uint16x8_t v227 = vmovl_u8(*v223);
                      uint16x8_t v228 = vmovl_high_u8(*(uint8x16_t *)v223->i8);
                      v224[-2] = vmovl_u8(*(uint8x8_t *)v226.i8);
                      v224[-1] = vmovl_high_u8(v226);
                      uint16x8_t *v224 = v227;
                      v224[1] = v228;
                      v224 += 4;
                      v223 += 4;
                      v225 -= 32;
                    }
                    while (v225);
                    if (v189 == v190) {
                      goto LABEL_226;
                    }
                    if ((v189 & 0x18) == 0)
                    {
                      long long v162 = (int8x16_t *)((char *)v137 + v190);
                      uint16x8_t v161 = (_WORD *)(v141 + 2 * v190);
                      do
                      {
LABEL_219:
                        __int16 v163 = v162->u8[0];
                        long long v162 = (int8x16_t *)((char *)v162 + 1);
                        *v161++ = v163;
                      }
                      while (v161 != v140);
                      goto LABEL_226;
                    }
                  }
                  else
                  {
                    unint64_t v190 = 0;
                  }
                  uint16x8_t v161 = (_WORD *)(v141 + 2 * (v189 & 0xFFFFFFFFFFFFFFF8));
                  long long v162 = (int8x16_t *)((char *)v137 + (v189 & 0xFFFFFFFFFFFFFFF8));
                  __int16 v229 = (uint8x8_t *)&v137->i8[v190];
                  uint64_t v230 = (uint16x8_t *)(v141 + 2 * v190);
                  unint64_t v231 = v190 - (v189 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    uint8x8_t v232 = *v229++;
                    *v230++ = vmovl_u8(v232);
                    v231 += 8;
                  }
                  while (v231);
                  if (v189 == (v189 & 0xFFFFFFFFFFFFFFF8)) {
                    goto LABEL_226;
                  }
                  goto LABEL_219;
                }
                unint64_t v69 = &v42[v63];
                if (v63 < 0x40)
                {
                  unint64_t v70 = (unint64_t)v42;
                }
                else
                {
                  unint64_t v70 = (unint64_t)&v42[v63 & 0xFFFFFFC0];
                  long long v71 = 0uLL;
                  unint64_t v72 = (char *)v42;
                  do
                  {
                    v245.val[0] = *v64;
                    int8x16_t v73 = v64[1];
                    v249.val[0] = v64[2];
                    int8x16_t v74 = v64[3];
                    v64 += 4;
                    int8x16_t v75 = v74;
                    v249.val[1] = 0uLL;
                    v253.val[0] = v73;
                    v245.val[1] = 0uLL;
                    uint64_t v76 = v72;
                    vst2q_s8(v76, v245);
                    v76 += 32;
                    v253.val[1] = 0uLL;
                    vst2q_s8(v76, v253);
                    uint64_t v77 = v72 + 64;
                    vst2q_s8(v77, v249);
                    unint64_t v78 = v72 + 96;
                    vst2q_s8(v78, *(int8x16x2_t *)(&v71 - 1));
                    v72 += 128;
                  }
                  while (v72 != (char *)v70);
                }
                if ((_WORD *)v70 == v69) {
                  goto LABEL_167;
                }
                unint64_t v96 = (unint64_t)v27 + 2 * v63 + 2 * v46 - v70;
                uint64_t v97 = -2;
                if (v46) {
                  uint64_t v98 = -2;
                }
                else {
                  uint64_t v98 = 0;
                }
                unint64_t v99 = v96 + v98 + 18;
                if (v99 < 0xE) {
                  goto LABEL_135;
                }
                if (!v46) {
                  uint64_t v97 = 0;
                }
                unint64_t v100 = v96 + v97 + 18;
                if (v70 < (unint64_t)v64->u64 + (v100 >> 1) + 1
                  && (unint64_t)v64 < (v100 & 0xFFFFFFFFFFFFFFFELL) + v70 + 2)
                {
LABEL_135:
                  __int16 v101 = (_WORD *)v70;
                  uint64_t v102 = v64;
                  goto LABEL_136;
                }
                uint64_t v186 = (v99 >> 1) + 1;
                if (v99 >= 0x3E)
                {
                  unint64_t v187 = v186 & 0xFFFFFFFFFFFFFFE0;
                  uint64_t v202 = (uint8x8_t *)&v64[1];
                  unint64_t v203 = (uint16x8_t *)(v70 + 32);
                  unint64_t v204 = v186 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    uint8x16_t v205 = *(uint8x16_t *)v202[-2].i8;
                    uint16x8_t v206 = vmovl_u8(*v202);
                    uint16x8_t v207 = vmovl_high_u8(*(uint8x16_t *)v202->i8);
                    v203[-2] = vmovl_u8(*(uint8x8_t *)v205.i8);
                    v203[-1] = vmovl_high_u8(v205);
                    uint16x8_t *v203 = v206;
                    v203[1] = v207;
                    v203 += 4;
                    v202 += 4;
                    v204 -= 32;
                  }
                  while (v204);
                  if (v186 == v187) {
                    goto LABEL_167;
                  }
                  if ((v186 & 0x18) == 0)
                  {
                    uint64_t v102 = (int8x16_t *)((char *)v64 + v187);
                    __int16 v101 = (_WORD *)(v70 + 2 * v187);
                    goto LABEL_136;
                  }
                }
                else
                {
                  unint64_t v187 = 0;
                }
                __int16 v101 = (_WORD *)(v70 + 2 * (v186 & 0xFFFFFFFFFFFFFFF8));
                uint64_t v102 = (int8x16_t *)((char *)v64 + (v186 & 0xFFFFFFFFFFFFFFF8));
                uint64_t v208 = (uint8x8_t *)&v64->i8[v187];
                int v209 = (uint16x8_t *)(v70 + 2 * v187);
                unint64_t v210 = v187 - (v186 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint8x8_t v211 = *v208++;
                  *v209++ = vmovl_u8(v211);
                  v210 += 8;
                }
                while (v210);
                if (v186 == (v186 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_167;
                }
                do
                {
LABEL_136:
                  __int16 v103 = v102->u8[0];
                  uint64_t v102 = (int8x16_t *)((char *)v102 + 1);
                  *v101++ = v103;
                }
                while (v101 != v69);
                goto LABEL_167;
              }
LABEL_306:
              a2 = v234;
              if (!v22) {
                goto LABEL_29;
              }
              goto LABEL_307;
            }
LABEL_304:
            int v27 = 0;
            goto LABEL_306;
          }
LABEL_305:
          int v27 = (_DWORD *)MEMORY[0x1E4F30960];
          *MEMORY[0x1E4F30960] += 2;
          goto LABEL_306;
        }
LABEL_58:
        *(_DWORD *)v238 += 2;
        uint64_t v40 = (uint64_t)v237;
        if (v39)
        {
          if (v39 <= 0x7FFFFFEF) {
            goto LABEL_60;
          }
          goto LABEL_304;
        }
        goto LABEL_305;
      }
      if (v238)
      {
        *(_DWORD *)v238 += 2;
        if (!v39) {
          goto LABEL_305;
        }
      }
      else if (!v39)
      {
        goto LABEL_305;
      }
      if ((v39 & 0x80000000) != 0) {
        goto LABEL_304;
      }
      WTF::tryFastCompactMalloc((WTF *)(v39 + 20));
      int v27 = v241;
      if (!v241) {
        goto LABEL_306;
      }
      uint64_t v53 = v241 + 5;
      _DWORD *v241 = 2;
      v27[1] = v39;
      *((void *)v27 + 1) = v27 + 5;
      v27[4] = 4;
      if (v22) {
        *(_DWORD *)v22 += 2;
      }
      if (v18)
      {
        if (v18 == 1)
        {
          *uint64_t v53 = a3->i8[0];
        }
        else
        {
          memcpy(v27 + 5, a3, v18);
          uint64_t v53 = v27 + 5;
        }
      }
      unint64_t v79 = (unsigned long long *)&v53[v18];
      if (!v22)
      {
        uint64_t v86 = 0;
        char v87 = v235;
        if (!v21) {
          goto LABEL_143;
        }
        goto LABEL_140;
      }
      size_t v80 = *(unsigned int *)(v22 + 4);
      *(_DWORD *)v22 += 2;
      int8x16_t v81 = *(int8x16_t **)(v22 + 8);
      if ((*(unsigned char *)(v22 + 16) & 4) != 0)
      {
        if (v80)
        {
          if (v80 == 1)
          {
            *(unsigned char *)unint64_t v79 = v81->i8[0];
            uint64_t v86 = *(unsigned int *)(v22 + 4);
            char v87 = v235;
            unint64_t v79 = (unsigned long long *)((char *)v79 + v86);
            if (!v21) {
              goto LABEL_143;
            }
            goto LABEL_140;
          }
          memcpy(&v53[v18], v81, v80);
        }
      }
      else
      {
        __int16 v82 = (char *)v79 + v80;
        if (v80 < 0x10)
        {
          unint64_t v83 = (unint64_t)&v53[v18];
        }
        else
        {
          unint64_t v83 = (unint64_t)v79 + (v80 & 0xFFFFFFF0);
          unint64_t v84 = v79;
          do
          {
            unsigned long long v85 = (unsigned __int128)vld2q_s8(v81->i8);
            v81 += 2;
            *v84++ = v85;
          }
          while (v84 != (unsigned long long *)v83);
        }
        if ((unsigned char *)v83 != v82)
        {
          size_t v88 = (size_t)v27 + v19 + v80;
          unint64_t v89 = v88 - v83 - (v19 != 0) + 20;
          if (v89 < 8
            || (!v19 ? (unint64_t v90 = v83) : (unint64_t v90 = v83 + 1),
                v83 < (unint64_t)&v81[2].u64[1] + 2 * v88 + -2 * v90
              ? (BOOL v91 = (unint64_t)v81 >= v88 - (v19 != 0) + 20)
              : (BOOL v91 = 1),
                !v91))
          {
            uint8x16_t v93 = (unsigned char *)v83;
            unint64_t v94 = v81;
            goto LABEL_123;
          }
          if (v89 >= 0x20)
          {
            unint64_t v92 = v89 & 0xFFFFFFFFFFFFFFE0;
            char v191 = v81 + 2;
            uint64_t v192 = (int8x16_t *)(v83 + 16);
            unint64_t v193 = v89 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              int8x16_t v195 = v191[-2];
              int8x16_t v194 = v191[-1];
              int8x16_t v197 = *v191;
              int8x16_t v196 = v191[1];
              v191 += 4;
              v192[-1] = vuzp1q_s8(v195, v194);
              *uint64_t v192 = vuzp1q_s8(v197, v196);
              v192 += 2;
              v193 -= 32;
            }
            while (v193);
            if (v89 == v92) {
              goto LABEL_139;
            }
            if ((v89 & 0x18) == 0)
            {
              unint64_t v94 = (int8x16_t *)((char *)v81 + 2 * v92);
              uint8x16_t v93 = (unsigned char *)(v83 + v92);
              do
              {
LABEL_123:
                char v95 = v94->i8[0];
                unint64_t v94 = (int8x16_t *)((char *)v94 + 2);
                *v93++ = v95;
              }
              while (v93 != v82);
              goto LABEL_139;
            }
          }
          else
          {
            unint64_t v92 = 0;
          }
          uint8x16_t v93 = (unsigned char *)(v83 + (v89 & 0xFFFFFFFFFFFFFFF8));
          unint64_t v94 = (int8x16_t *)((char *)v81 + 2 * (v89 & 0xFFFFFFFFFFFFFFF8));
          uint64_t v198 = (int16x8_t *)((char *)v81 + 2 * v92);
          unint64_t v199 = (int8x8_t *)(v83 + v92);
          unint64_t v200 = v92 - (v89 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            int16x8_t v201 = *v198++;
            *v199++ = vmovn_s16(v201);
            v200 += 8;
          }
          while (v200);
          if (v89 != (v89 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_123;
          }
        }
      }
LABEL_139:
      uint64_t v86 = *(unsigned int *)(v22 + 4);
      char v87 = v235;
      unint64_t v79 = (unsigned long long *)((char *)v79 + v86);
      if (!v21) {
        goto LABEL_143;
      }
LABEL_140:
      if (v21 == 1) {
        *(unsigned char *)unint64_t v79 = *__src;
      }
      else {
        memcpy(v79, __src, v21);
      }
LABEL_143:
      uint64_t v104 = (char *)v79 + v21;
      if (!v237)
      {
        uint64_t v111 = 0;
        goto LABEL_223;
      }
      unint64_t v105 = (int8x16_t *)*((void *)v237 + 1);
      size_t v106 = v237[1];
      if ((v237[4] & 4) != 0)
      {
        if (v106)
        {
          if (v106 == 1) {
            *uint64_t v104 = v105->i8[0];
          }
          else {
            memcpy(v104, v105, v106);
          }
        }
        goto LABEL_222;
      }
      int8x16x2_t v107 = &v104[v106];
      if (v106 < 0x10)
      {
        unint64_t v108 = (unint64_t)v104;
      }
      else
      {
        unint64_t v108 = (unint64_t)&v104[v106 & 0xFFFFFFF0];
        int8x16_t v109 = (unsigned long long *)v104;
        do
        {
          unsigned long long v110 = (unsigned __int128)vld2q_s8(v105->i8);
          v105 += 2;
          *v109++ = v110;
        }
        while (v109 != (unsigned long long *)v108);
      }
      if ((unsigned char *)v108 == v107)
      {
LABEL_222:
        uint64_t v111 = v237[1];
LABEL_223:
        v104[v111] = v87;
        a2 = v234;
        if (!v22) {
          goto LABEL_29;
        }
        goto LABEL_228;
      }
      size_t v112 = (size_t)v27 + v19 + v86 + v16 + v106;
      unint64_t v113 = v112 - v108 - (v16 != 0) - (v19 != 0) + 20;
      if (v113 < 8) {
        goto LABEL_163;
      }
      if (v19) {
        unint64_t v114 = v108 + 1;
      }
      else {
        unint64_t v114 = v108;
      }
      if (v16) {
        ++v114;
      }
      if (v108 < (unint64_t)&v105[2].u64[1] + 2 * v112 + -2 * v114
        && (unint64_t)v105 < v112 - v114 + v108 + 20)
      {
LABEL_163:
        unint64_t v115 = (unsigned char *)v108;
        int16x8_t v116 = v105;
        goto LABEL_164;
      }
      if (v113 >= 0x20)
      {
        unint64_t v188 = v113 & 0xFFFFFFFFFFFFFFE0;
        v212 = v105 + 2;
        int v213 = (int8x16_t *)(v108 + 16);
        unint64_t v214 = v113 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          int8x16_t v216 = v212[-2];
          int8x16_t v215 = v212[-1];
          int8x16_t v218 = *v212;
          int8x16_t v217 = v212[1];
          v212 += 4;
          v213[-1] = vuzp1q_s8(v216, v215);
          *int v213 = vuzp1q_s8(v218, v217);
          v213 += 2;
          v214 -= 32;
        }
        while (v214);
        if (v113 == v188) {
          goto LABEL_222;
        }
        if ((v113 & 0x18) == 0)
        {
          int16x8_t v116 = (int8x16_t *)((char *)v105 + 2 * v188);
          unint64_t v115 = (unsigned char *)(v108 + v188);
          do
          {
LABEL_164:
            char v117 = v116->i8[0];
            int16x8_t v116 = (int8x16_t *)((char *)v116 + 2);
            *v115++ = v117;
          }
          while (v115 != v107);
          goto LABEL_222;
        }
      }
      else
      {
        unint64_t v188 = 0;
      }
      unint64_t v115 = (unsigned char *)(v108 + (v113 & 0xFFFFFFFFFFFFFFF8));
      int16x8_t v116 = (int8x16_t *)((char *)v105 + 2 * (v113 & 0xFFFFFFFFFFFFFFF8));
      long long v219 = (int16x8_t *)((char *)v105 + 2 * v188);
      unint64_t v220 = (int8x8_t *)(v108 + v188);
      unint64_t v221 = v188 - (v113 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        int16x8_t v222 = *v219++;
        *v220++ = vmovn_s16(v222);
        v221 += 8;
      }
      while (v221);
      if (v113 == (v113 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_222;
      }
      goto LABEL_164;
    }
LABEL_28:
    int v27 = 0;
  }
LABEL_29:
  int8x16_t v31 = (_DWORD *)v238;
  uint64_t v238 = 0;
  if (!v31) {
    goto LABEL_32;
  }
  if (*v31 != 2)
  {
    *v31 -= 2;
LABEL_32:
    if (v27) {
      goto LABEL_33;
    }
LABEL_43:
    __break(0xC471u);
    JUMPOUT(0x1826B8578);
  }
  WTF::StringImpl::destroy();
  if (!v27) {
    goto LABEL_43;
  }
LABEL_33:
  int8x16x2_t v241 = v27;
  long long v242 = *a2;
  uint64_t v32 = *(unsigned int *)(a1 + 132);
  if (v32 != *(_DWORD *)(a1 + 128))
  {
    uint64_t v38 = *(void *)(a1 + 120) + 24 * v32;
    *(void *)uint64_t v38 = v27;
    *(_OWORD *)(v38 + 8) = v242;
    ++*(_DWORD *)(a1 + 132);
    int8x16x2_t v241 = 0;
LABEL_39:
    uint64_t result = v237;
    if (!v237) {
      goto LABEL_45;
    }
    goto LABEL_40;
  }
  unint64_t v33 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v32 + 1, (unint64_t)&v241);
  uint64_t v34 = *(void *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  uint64_t v35 = *(void *)v33;
  *(void *)unint64_t v33 = 0;
  *(void *)uint64_t v34 = v35;
  *(_OWORD *)(v34 + 8) = *(_OWORD *)(v33 + 8);
  unint64_t v36 = v241;
  ++*(_DWORD *)(a1 + 132);
  int8x16x2_t v241 = 0;
  if (!v36) {
    goto LABEL_39;
  }
  if (*v36 == 2)
  {
    WTF::StringImpl::destroy();
    uint64_t result = v237;
    if (!v237) {
      goto LABEL_45;
    }
  }
  else
  {
    *v36 -= 2;
    uint64_t result = v237;
    if (!v237) {
      goto LABEL_45;
    }
  }
LABEL_40:
  if (*result == 2) {
    uint64_t result = (_DWORD *)WTF::StringImpl::destroy();
  }
  else {
    *result -= 2;
  }
LABEL_45:
  if (v240 != -1) {
    uint64_t result = (_DWORD *)((uint64_t (*)(uint64_t *, unsigned __int8 *))off_1ECABED88[v240])(&v238, v239);
  }
  *(void *)(a1 + 88) = *(void *)(*(void *)(a1 + 112) + 24);
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,long long &,WTF::ASCIILiteral,unsigned int,char>(_DWORD *result, long long *a2, unsigned char *a3, uint64_t a4, unint64_t a5, char *a6, uint64_t a7, unsigned int a8, char a9)
{
  if (a4) {
    unint64_t v9 = a4 - 1;
  }
  else {
    unint64_t v9 = 0;
  }
  if (v9 >> 31) {
    goto LABEL_47;
  }
  if (a7) {
    unint64_t v10 = a7 - 1;
  }
  else {
    unint64_t v10 = 0;
  }
  if (v10 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826B955CLL);
  }
  uint64_t v15 = result;
  uint64_t v40 = (uint64_t)(result + 30);
  if ((a5 & 0x8000000000000000) != 0)
  {
    unint64_t v19 = -(uint64_t)a5;
    int v16 = 1;
    do
    {
      ++v16;
      BOOL v20 = v19 >= 0xA;
      v19 /= 0xAuLL;
    }
    while (v20);
  }
  else
  {
    int v16 = 0;
    unint64_t v17 = a5;
    do
    {
      ++v16;
      BOOL v18 = v17 > 9;
      v17 /= 0xAuLL;
    }
    while (v18);
  }
  int v21 = 0;
  unsigned int v22 = a8;
  do
  {
    ++v21;
    BOOL v18 = v22 > 9;
    v22 /= 0xAu;
  }
  while (v18);
  if (v21 < 0) {
    goto LABEL_47;
  }
  BOOL v23 = __OFADD__(v21, 1);
  int v24 = v21 + 1;
  BOOL v25 = v23;
  if ((v10 & 0x80000000) != 0 || v25) {
    goto LABEL_47;
  }
  BOOL v23 = __OFADD__(v10, v24);
  int v26 = v10 + v24;
  BOOL v27 = v23;
  if (v16 < 0 || v27) {
    goto LABEL_47;
  }
  BOOL v23 = __OFADD__(v16, v26);
  int v28 = v16 + v26;
  BOOL v29 = v23;
  if ((v9 & 0x80000000) != 0) {
    goto LABEL_47;
  }
  if (v29) {
    goto LABEL_47;
  }
  uint64_t v30 = (v9 + v28);
  if (__OFADD__(v9, v28)) {
    goto LABEL_47;
  }
  if (v30)
  {
    if ((v30 & 0x80000000) == 0)
    {
      WTF::tryFastCompactMalloc((WTF *)(v30 + 20));
      uint64_t v32 = a6;
      unint64_t v33 = v41;
      if (v41)
      {
        uint64_t v34 = v41 + 5;
        *unint64_t v41 = 2;
        v33[1] = v30;
        *((void *)v33 + 1) = v33 + 5;
        v33[4] = 4;
        uint64_t result = WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<char,void>>(v34, a3, v9, a5, v32, v10, a8, a9);
        unint64_t v41 = v33;
        long long v42 = *a2;
        uint64_t v35 = v15[33];
        if (v35 == v15[32]) {
          goto LABEL_38;
        }
LABEL_42:
        uint64_t v39 = *((void *)v15 + 15) + 24 * v35;
        *(void *)uint64_t v39 = v33;
        *(_OWORD *)(v39 + 8) = v42;
        ++v15[33];
        return result;
      }
    }
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x1826B953CLL);
  }
  unint64_t v33 = (_DWORD *)MEMORY[0x1E4F30960];
  *MEMORY[0x1E4F30960] += 2;
  unint64_t v41 = v33;
  long long v42 = *a2;
  uint64_t v35 = result[33];
  if (v35 != result[32]) {
    goto LABEL_42;
  }
LABEL_38:
  unint64_t v36 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v40, v35 + 1, (unint64_t)&v41);
  uint64_t v37 = *((void *)v15 + 15) + 24 * v15[33];
  uint64_t v38 = *(void *)v36;
  *(void *)unint64_t v36 = 0;
  *(void *)uint64_t v37 = v38;
  *(_OWORD *)(v37 + 8) = *(_OWORD *)(v36 + 8);
  uint64_t result = v41;
  ++v15[33];
  unint64_t v41 = 0;
  if (result)
  {
    if (*result == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *result -= 2;
    }
  }
  return result;
}

unsigned char *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<char,void>>(unsigned char *__dst, unsigned char *a2, unsigned int a3, unint64_t a4, char *__src, unsigned int a6, unsigned int a7, char a8)
{
  unint64_t v12 = a4;
  uint64_t v14 = __dst;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
LABEL_4:
    uint64_t v15 = &__dst[a3];
    uint64_t v16 = 0;
    if ((a4 & 0x8000000000000000) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    unint64_t v21 = -(uint64_t)v12;
    do
    {
      v31[v16-- + 24] = (v21 % 0xA) | 0x30;
      BOOL v18 = v21 > 9;
      v21 /= 0xAuLL;
    }
    while (v18);
    uint64_t v22 = v16 + 24;
    unint64_t v19 = &v31[v16 + 24];
    *unint64_t v19 = 45;
    if (v16 + 26 > 26) {
      goto LABEL_17;
    }
    if (v22 <= 24) {
      uint64_t v22 = 24;
    }
    size_t v20 = v22 - v16 - 23;
    goto LABEL_16;
  }
  if (a3 == 1)
  {
    *__dst = *a2;
    goto LABEL_4;
  }
  __dst = memcpy(__dst, a2, a3);
  uint64_t v15 = &v14[a3];
  uint64_t v16 = 0;
  if ((v12 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  unint64_t v17 = v12;
  do
  {
    v31[v16-- + 24] = (v17 % 0xA) | 0x30;
    BOOL v18 = v17 > 9;
    v17 /= 0xAuLL;
  }
  while (v18);
  if (v16 + 26 > 25) {
    goto LABEL_17;
  }
  unint64_t v19 = &v31[v16 + 25];
  size_t v20 = -v16;
LABEL_16:
  __dst = memcpy(v15, v19, v20);
LABEL_17:
  if ((v12 & 0x8000000000000000) != 0)
  {
    unint64_t v24 = -(uint64_t)v12;
    unsigned int v23 = 1;
    do
    {
      ++v23;
      BOOL v25 = v24 >= 0xA;
      v24 /= 0xAuLL;
    }
    while (v25);
  }
  else
  {
    unsigned int v23 = 0;
    do
    {
      ++v23;
      BOOL v18 = v12 > 9;
      v12 /= 0xAuLL;
    }
    while (v18);
  }
  int v26 = &v15[v23];
  if (a6)
  {
    if (a6 == 1) {
      char *v26 = *__src;
    }
    else {
      __dst = memcpy(&v15[v23], __src, a6);
    }
  }
  uint64_t v27 = 0;
  unsigned int v28 = a7;
  do
  {
    v31[v27-- + 12] = (v28 % 0xA) | 0x30;
    BOOL v18 = v28 > 9;
    v28 /= 0xAu;
  }
  while (v18);
  BOOL v29 = &v26[a6];
  if (v27 + 14 <= 13) {
    __dst = memcpy(v29, &v31[v27 + 13], -v27);
  }
  int v30 = 0;
  do
  {
    ++v30;
    BOOL v18 = a7 > 9;
    a7 /= 0xAu;
  }
  while (v18);
  v29[v30] = a8;
  return __dst;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJbN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJbS9_EEEEEEDcSD_DpT0_(uint64_t a1, _DWORD **a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *result -= 2;
    }
  }
  return result;
}

WTF::String *WGSL::constantBitcast(WGSL::Type const*,WTF::FixedVector<WGSL::ConstantValue> const&)::$_1::operator()(WTF::String *result, unsigned int **a2, float *a3, unsigned int a4)
{
  unsigned int v6 = result;
  switch(*((_DWORD *)a3 + 4))
  {
    case 0:
    case 3:
    case 4:
      float v7 = *a3;
      goto LABEL_3;
    case 2:
      double v16 = *(double *)a3;
      WGSL::convertFloat<float,double>(double)::max = 2139095039;
      WGSL::convertFloat<float,double>(double)::lowest = -8388609;
      if (v16 <= 3.40282347e38 && v16 >= -3.40282347e38)
      {
        float v24 = v16;
        float v7 = v24;
LABEL_3:
        unint64_t v8 = *a2;
        unsigned int v9 = **a2;
        if (v9 <= a4)
        {
          __break(0xC471u);
          JUMPOUT(0x1826B9B70);
        }
        unint64_t v10 = &v8[6 * a4];
        uint64_t v11 = v10 + 2;
        uint64_t v12 = v10[6];
        if (v12 != -1)
        {
          if (v12 == 1)
          {
            *(_WORD *)uint64_t v11 = LOWORD(v7);
            goto LABEL_9;
          }
          uint64_t result = (WTF::String *)((uint64_t (*)(uint64_t *, _DWORD *))off_1ECABEC60[v12])(&v30, v11);
          unint64_t v8 = *a2;
          unsigned int v9 = **a2;
        }
        *(_WORD *)uint64_t v11 = LOWORD(v7);
        v11[4] = 1;
LABEL_9:
        if (v9 <= a4 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1826B9B90);
        }
        unint64_t v13 = &v8[6 * a4 + 6];
        uint64_t v14 = v13 + 2;
        uint64_t v15 = v13[6];
        if (v15 != -1)
        {
          if (v15 == 1)
          {
            *(_WORD *)uint64_t v14 = HIWORD(v7);
LABEL_15:
            *(unsigned char *)unsigned int v6 = 0;
            *((unsigned char *)v6 + 8) = 0;
            return result;
          }
          uint64_t result = (WTF::String *)((uint64_t (*)(uint64_t *, _DWORD *))off_1ECABEC60[v15])(&v30, v14);
        }
        *(_WORD *)uint64_t v14 = HIWORD(v7);
        v14[4] = 1;
        goto LABEL_15;
      }
      WTF::String::number(&v28, result, v16);
      if (v28)
      {
        int v19 = *(_DWORD *)(v28 + 4);
        if (v19 < 0) {
          goto LABEL_60;
        }
        BOOL v21 = __OFADD__(v19, 31);
        int v20 = v19 + 31;
        if (v21) {
          goto LABEL_60;
        }
      }
      else
      {
        int v20 = 31;
        if (v18) {
          goto LABEL_60;
        }
      }
      if (!__OFADD__(v20, 6))
      {
        BOOL v27 = !v28 || (*(unsigned char *)(v28 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v20 + 6), v27, (int8x16_t *)"value ", 6u, v28, (int8x16_t *)" cannot be represented as 'f32'", 0x1Fu, &v30);
        if (v30)
        {
          *(void *)unsigned int v6 = v30;
          *((unsigned char *)v6 + 8) = 1;
          uint64_t v30 = 0;
          uint64_t result = (WTF::String *)v28;
          uint64_t v28 = 0;
          if (result)
          {
            int v26 = *(_DWORD *)result - 2;
            if (*(_DWORD *)result == 2) {
              return (WTF::String *)WTF::StringImpl::destroy();
            }
            goto LABEL_44;
          }
          return result;
        }
LABEL_61:
        __break(0xC471u);
        JUMPOUT(0x1826B9BC8);
      }
LABEL_60:
      uint64_t v30 = 0;
      goto LABEL_61;
    case 5:
      uint64_t result = *(WTF::String **)a3;
      if ((int)*(void *)a3 == *(void *)a3)
      {
        LODWORD(v7) = *(void *)a3;
        goto LABEL_3;
      }
      WTF::String::number(result);
      if (v29)
      {
        int v22 = *(_DWORD *)(v29 + 4);
        if (v22 < 0) {
          goto LABEL_58;
        }
        BOOL v21 = __OFADD__(v22, 31);
        int v23 = v22 + 31;
        if (v21) {
          goto LABEL_58;
        }
      }
      else
      {
        int v23 = 31;
        if (v21)
        {
LABEL_58:
          uint64_t v30 = 0;
          goto LABEL_59;
        }
      }
      if (__OFADD__(v23, 6)) {
        goto LABEL_58;
      }
      BOOL v25 = !v29 || (*(unsigned char *)(v29 + 16) & 4) != 0;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v23 + 6), v25, (int8x16_t *)"value ", 6u, v29, (int8x16_t *)" cannot be represented as 'i32'", 0x1Fu, &v30);
      if (!v30)
      {
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1826B9BBCLL);
      }
      *(void *)unsigned int v6 = v30;
      *((unsigned char *)v6 + 8) = 1;
      uint64_t result = (WTF::String *)v29;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      if (result)
      {
        int v26 = *(_DWORD *)result - 2;
        if (*(_DWORD *)result == 2) {
          return (WTF::String *)WTF::StringImpl::destroy();
        }
LABEL_44:
        *(_DWORD *)uint64_t result = v26;
      }
      return result;
    default:
      __break(0xC471u);
      JUMPOUT(0x1826B9BB0);
  }
}

uint64_t WGSL::convertValue<WGSL::BitwiseCast>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a2 + 48))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x1826B9E1CLL);
  }
  switch(*(unsigned char *)a2)
  {
    case 0:
      v27[0] = 0;
      int v28 = -1;
      uint64_t v12 = *(unsigned int *)(a3 + 16);
      if (v12 != -1)
      {
        ((void (*)(char *, unsigned char *))off_1ECABEE88[v12])(&v29, v27);
        int v28 = v12;
      }
      __break(0xC471u);
      JUMPOUT(0x1826B9ED0);
    case 1:
      LOBYTE(v25[0]) = 0;
      int v26 = -1;
      uint64_t v4 = *(unsigned int *)(a3 + 16);
      if (v4 == -1
        || ((((void (*)(char *, _DWORD *))off_1ECABEE88[v4])(&v29, v25), int v26 = v4,
                                                                                    (v4 - 3) >= 2)
          ? (BOOL v5 = v4 == 0)
          : (BOOL v5 = 1),
            !v5))
      {
        __break(0xC471u);
        JUMPOUT(0x1826B9E3CLL);
      }
      *a1 = v25[0];
      a1[4] = 3;
      return ((uint64_t (*)(char *, _DWORD *))off_1ECABEC60[v4])(&v29, v25);
    case 2:
      LOBYTE(v23[0]) = 0;
      int v24 = -1;
      uint64_t v8 = *(unsigned int *)(a3 + 16);
      if (v8 == -1
        || ((((void (*)(char *, _DWORD *))off_1ECABEE88[v8])(&v29, v23), int v24 = v8,
                                                                                    (v8 - 3) >= 2)
          ? (BOOL v9 = v8 == 0)
          : (BOOL v9 = 1),
            !v9))
      {
        __break(0xC471u);
        JUMPOUT(0x1826B9E5CLL);
      }
      *a1 = v23[0];
      a1[4] = 4;
      return ((uint64_t (*)(char *, _DWORD *))off_1ECABEC60[v8])(&v29, v23);
    case 3:
      v21[0] = 0;
      int v22 = -1;
      uint64_t v13 = *(unsigned int *)(a3 + 16);
      if (v13 != -1)
      {
        ((void (*)(char *, unsigned char *))off_1ECABEE88[v13])(&v29, v21);
        int v22 = v13;
      }
      __break(0xC471u);
      JUMPOUT(0x1826B9F24);
    case 4:
      LOBYTE(v17[0]) = 0;
      int v18 = -1;
      uint64_t v7 = *(unsigned int *)(a3 + 16);
      if (v7 == -1) {
        goto LABEL_28;
      }
      uint64_t result = ((uint64_t (*)(char *, _WORD *))off_1ECABEE88[v7])(&v29, v17);
      int v18 = v7;
      if (v7 != 1) {
        goto LABEL_28;
      }
      *(_WORD *)a1 = v17[0];
      a1[4] = 1;
      return result;
    case 5:
      LOBYTE(v19[0]) = 0;
      int v20 = -1;
      uint64_t v10 = *(unsigned int *)(a3 + 16);
      if (v10 == -1
        || ((((void (*)(char *, _DWORD *))off_1ECABEE88[v10])(&v29, v19),
             int v20 = v10,
             (v10 - 3) >= 2)
          ? (BOOL v11 = v10 == 0)
          : (BOOL v11 = 1),
            !v11))
      {
        __break(0xC471u);
        JUMPOUT(0x1826B9E7CLL);
      }
      *a1 = v19[0];
      a1[4] = 0;
      return ((uint64_t (*)(char *, _DWORD *))off_1ECABEC60[v10])(&v29, v19);
    case 7:
      v15[0] = 0;
      int v16 = -1;
      uint64_t v14 = *(unsigned int *)(a3 + 16);
      if (v14 != -1)
      {
        ((void (*)(char *, unsigned char *))off_1ECABEE88[v14])(&v29, v15);
        int v16 = v14;
      }
      __break(0xC471u);
      JUMPOUT(0x1826B9F98);
    default:
      __break(0xC471u);
      JUMPOUT(0x1826B9F44);
  }
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::OverloadedDeclaration>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::OverloadedDeclaration>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::OverloadedDeclaration,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::OverloadedDeclaration>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  uint64_t v27 = *(unsigned int *)(a1 - 4);
  if (v27)
  {
    for (uint64_t i = 0; i != v27; ++i)
    {
      uint64_t v4 = (_DWORD **)(v2 + 48 * i);
      if (*v4 != (_DWORD *)-1)
      {
        uint64_t v5 = v2 + 48 * i;
        unsigned int v6 = (WTF **)(v5 + 32);
        unsigned int v7 = *(_DWORD *)(v5 + 44);
        if (v7)
        {
          uint64_t v8 = *v6;
          uint64_t v9 = (uint64_t)*v6 + 88 * v7;
          do
          {
            uint64_t v10 = *((void *)v8 + 10);
            *((void *)v8 + 10) = 0;
            if (v10)
            {
              uint64_t v11 = *(unsigned int *)(v10 + 24);
              if (v11 != -1) {
                ((void (*)(char *, uint64_t))off_1ECABED10[v11])(&v28, v10);
              }
              *(_DWORD *)(v10 + 24) = -1;
              MEMORY[0x18530AFF0](v10, 0x1062C40D964B916);
            }
            uint64_t v12 = *((unsigned int *)v8 + 15);
            if (v12)
            {
              uint64_t v13 = (uint64_t *)*((void *)v8 + 6);
              uint64_t v14 = 8 * v12;
              do
              {
                uint64_t v15 = *v13;
                uint64_t *v13 = 0;
                if (v15)
                {
                  uint64_t v16 = *(unsigned int *)(v15 + 24);
                  if (v16 != -1) {
                    ((void (*)(char *, uint64_t))off_1ECABED10[v16])(&v29, v15);
                  }
                  *(_DWORD *)(v15 + 24) = -1;
                  MEMORY[0x18530AFF0](v15, 0x1062C40D964B916);
                }
                ++v13;
                v14 -= 8;
              }
              while (v14);
            }
            unint64_t v17 = (WTF *)*((void *)v8 + 6);
            if ((WTF *)((char *)v8 + 64) == v17 || v17 == 0)
            {
              int v19 = (WTF *)*((void *)v8 + 3);
              if ((WTF *)((char *)v8 + 40) == v19 || v19 == 0)
              {
LABEL_30:
                BOOL v21 = *(WTF **)v8;
                if ((WTF *)((char *)v8 + 16) != *(WTF **)v8) {
                  goto LABEL_37;
                }
                goto LABEL_8;
              }
            }
            else
            {
              *((void *)v8 + 6) = 0;
              *((_DWORD *)v8 + 14) = 0;
              WTF::fastFree(v17, a2);
              int v19 = (WTF *)*((void *)v8 + 3);
              if ((WTF *)((char *)v8 + 40) == v19 || v19 == 0) {
                goto LABEL_30;
              }
            }
            *((void *)v8 + 3) = 0;
            *((_DWORD *)v8 + 8) = 0;
            WTF::fastFree(v19, a2);
            BOOL v21 = *(WTF **)v8;
            if ((WTF *)((char *)v8 + 16) != *(WTF **)v8)
            {
LABEL_37:
              if (v21)
              {
                *(void *)uint64_t v8 = 0;
                *((_DWORD *)v8 + 2) = 0;
                WTF::fastFree(v21, a2);
              }
            }
LABEL_8:
            uint64_t v8 = (WTF *)((char *)v8 + 88);
          }
          while (v8 != (WTF *)v9);
        }
        int v23 = *v6;
        uint64_t v2 = a1;
        if (*v6)
        {
          *unsigned int v6 = 0;
          *(_DWORD *)(a1 + 48 * i + 40) = 0;
          WTF::fastFree(v23, a2);
        }
        int v24 = *v4;
        *uint64_t v4 = 0;
        if (v24)
        {
          if (*v24 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v24 -= 2;
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(v2 - 16), a2);
}

uint64_t WTF::FixedVector<WGSL::ConstantValue>::FixedVector(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v6 = 24 * a3;
    unsigned int v7 = (_DWORD *)WTF::fastMalloc((WTF *)(v6 + 8));
    uint64_t v8 = v7;
    *unsigned int v7 = a3;
    if (a3) {
      bzero(v7 + 2, 24 * ((v6 - 24) / 0x18uLL) + 24);
    }
    unint64_t v9 = 0;
    *a1 = v8;
    uint64_t v10 = 24 * a3;
    int v11 = -1;
    while (1)
    {
      while (1)
      {
        uint64_t v12 = (_DWORD *)*a1;
        if (*(_DWORD *)*a1 <= ++v11)
        {
          uint64_t result = 146;
          __break(0xC471u);
          return result;
        }
        uint64_t v13 = &v12[v9 / 4];
        uint64_t v14 = (uint64_t)&v12[v9 / 4 + 2];
        uint64_t v15 = v12[v9 / 4 + 6];
        uint64_t v16 = *(unsigned int *)(a2 + v9 + 16);
        if (v15 != -1) {
          break;
        }
        if (v16 != -1) {
          goto LABEL_6;
        }
LABEL_7:
        v9 += 24;
        if (v10 == v9) {
          return (uint64_t)a1;
        }
      }
      if (v16 != -1)
      {
LABEL_6:
        uint64_t v18 = v14;
        ((void (*)(uint64_t *))off_1ECABEEE0[v16])(&v18);
        goto LABEL_7;
      }
      ((void (*)(char *, uint64_t))off_1ECABEC60[v15])(&v19, v14);
      v13[6] = -1;
      v9 += 24;
      if (v10 == v9) {
        return (uint64_t)a1;
      }
    }
  }
  *a1 = 0;
  return (uint64_t)a1;
}

void std::__function::__func<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_0,std::allocator<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_0>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>::~__func()
{
}

void *std::__function::__func<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_0,std::allocator<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_0>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1ECABEFA0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_0,std::allocator<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_0>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECABEFA0;
  a2[1] = v2;
  return result;
}

WGSL::Type *std::__function::__func<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_0,std::allocator<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_0>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned int v4 = *(_DWORD *)(a2 + 108);
  if (v4 <= 1)
  {
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(*(_DWORD **)(a1 + 8), 0, (long long *)(a2 + 8), "'ptr' requires at least 2 template argument", 44);
    return *(WGSL::Type **)(*(void *)(v3 + 112) + 24);
  }
  if (v4 >= 4)
  {
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(*(_DWORD **)(a1 + 8), 0, (long long *)(a2 + 8), "'ptr' requires at most 3 template argument", 43);
    return *(WGSL::Type **)(*(void *)(v3 + 112) + 24);
  }
  uint64_t v5 = **(void **)(a2 + 96);
  __int16 v6 = *(_WORD *)(v3 + 104);
  *(_WORD *)(v3 + 104) = 3;
  WGSL::AST::Visitor::visit((unsigned char *)v3, v5);
  uint64_t v8 = *(const WGSL::Type **)(v3 + 88);
  *(void *)(v5 + 24) = v8;
  *(void *)(v3 + 88) = 0;
  *(_WORD *)(v3 + 104) = v6;
  uint64_t v9 = *(void *)(v3 + 112);
  uint64_t v10 = *(WGSL **)(v9 + 24);
  if (v10 == v8) {
    return *(WGSL::Type **)(*(void *)(v3 + 112) + 24);
  }
  int v11 = *(WGSL **)(v9 + 136);
  BOOL v12 = v8 == v11 || v10 == v11;
  if (!v12 && WGSL::conversionRank(v11, v8, v7) == -1)
  {
    *(void *)&long long v33 = "' as address space";
    *((void *)&v33 + 1) = 19;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>(v3, 0, (_OWORD *)(v5 + 8), (int8x16_t *)"cannot use '", 13, (uint64_t)v8, &v33);
    return *(WGSL::Type **)(*(void *)(v3 + 112) + 24);
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5) != 22) {
    goto LABEL_59;
  }
  uint64_t v13 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WGSL::AddressSpace> [6]>::tryGet<WTF::String>((unsigned __int8 ***)WGSL::parseAddressSpace(WTF::String const&)::__map, (uint64_t *)(v5 + 88));
  if (*(_DWORD *)(a2 + 108) <= 1u)
  {
    __break(0xC471u);
    JUMPOUT(0x1826BA880);
  }
  uint64_t v14 = *(unsigned __int8 *)v13;
  uint64_t v15 = *(void *)(*(void *)(a2 + 96) + 8);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 16))(v15) == 22)
  {
    unint64_t v17 = (WGSL::Type *)WGSL::TypeChecker::lookupType((WGSL::TypeChecker *)v3, (const WGSL::AST::Identifier *)(v15 + 64), v16);
    *(void *)(v3 + 88) = v17;
    if (*((_DWORD *)v17 + 12) != 13) {
      goto LABEL_15;
    }
LABEL_31:
    *(void *)&long long v33 = "' requires template arguments";
    *((void *)&v33 + 1) = 30;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>(v3, 0, (_OWORD *)(v15 + 8), (int8x16_t *)"type '", 7, (uint64_t)v17, &v33);
    unint64_t v17 = *(WGSL::Type **)(*(void *)(v3 + 112) + 24);
    *(void *)(v15 + 24) = v17;
    *(void *)(v3 + 88) = 0;
    return v17;
  }
  WGSL::AST::Visitor::visit((unsigned char *)v3, v15);
  unint64_t v17 = *(WGSL::Type **)(v3 + 88);
  if (*((_DWORD *)v17 + 12) == 13) {
    goto LABEL_31;
  }
LABEL_15:
  uint64_t v18 = *(WGSL::Type **)(*(void *)(v3 + 112) + 24);
  *(void *)(v15 + 24) = v17;
  *(void *)(v3 + 88) = 0;
  if (v18 == v17) {
    return v17;
  }
  if ((WGSL::Type::isStorable(v17) & 1) == 0)
  {
    BOOL v21 = (_OWORD *)(a2 + 8);
    int v22 = "' cannot be used as the store type of a pointer";
    uint64_t v23 = 48;
    goto LABEL_23;
  }
  char v19 = v17;
  if (*((_DWORD *)v17 + 12) == 12)
  {
    BOOL v20 = v14 == 3 || v14 == 5;
    char v19 = v17;
    if (!v20)
    {
      BOOL v21 = (_OWORD *)(a2 + 8);
      int v22 = "' atomic variables must have <storage> or <workgroup> address space";
      uint64_t v23 = 68;
LABEL_23:
      *(void *)&long long v33 = v22;
      *((void *)&v33 + 1) = v23;
      WGSL::TypeChecker::typeError<char,WGSL::Type const&,WTF::ASCIILiteral>(v3, 0, v21, 39, (uint64_t)v17, &v33);
      return *(WGSL::Type **)(*(void *)(v3 + 112) + 24);
    }
  }
  while (1)
  {
    while (1)
    {
      int v26 = *((_DWORD *)v19 + 12);
      if (v26 != 4) {
        break;
      }
      uint64_t v24 = *(void *)v19;
      uint64_t v25 = *(unsigned int *)(*(void *)v19 + 84);
      if (!v25)
      {
        __break(0xC471u);
        JUMPOUT(0x1826BA878);
      }
      char v19 = *(WGSL::Type **)(*(void *)(*(void *)(*(void *)(v24 + 72) + 8 * v25 - 8) + 104) + 24);
      if (!v19) {
        goto LABEL_36;
      }
    }
    if (v26 != 10) {
      break;
    }
    char v19 = (WGSL::Type *)*((void *)v19 + 1);
    if (!v19) {
      goto LABEL_36;
    }
  }
  if (v26 == 3 && v14 != 3 && !*((_DWORD *)v19 + 4))
  {
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral>((_DWORD *)v3, 0, (long long *)(a2 + 8), "runtime-sized arrays can only be used in the <storage> address space", 69);
    return *(WGSL::Type **)(*(void *)(v3 + 112) + 24);
  }
LABEL_36:
  if (v4 >= 3)
  {
    unsigned int v27 = *(_DWORD *)(a2 + 108);
    if (v14 != 3)
    {
      if (v27 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1826BA888);
      }
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral>((_DWORD *)v3, 0, (long long *)(*(void *)(*(void *)(a2 + 96) + 16) + 8), "only pointers in <storage> address space may specify an access mode", 68);
      return *(WGSL::Type **)(*(void *)(v3 + 112) + 24);
    }
    if (v27 > 2)
    {
      unsigned __int16 v28 = WGSL::TypeChecker::accessMode((WGSL::TypeChecker *)v3, *(WGSL::AST::Expression **)(*(void *)(a2 + 96) + 16));
      if (v28 <= 0xFFu) {
        return *(WGSL::Type **)(*(void *)(v3 + 112) + 24);
      }
      goto LABEL_43;
    }
LABEL_59:
    __break(0xC471u);
    JUMPOUT(0x1826BA83CLL);
  }
  if (v14 <= 5) {
    LOBYTE(v28) = 0x10000010001uLL >> (8 * v14);
  }
  else {
    LOBYTE(v28) = 0;
  }
LABEL_43:
  uint64_t v29 = *(void *)(v3 + 112);
  *(void *)&long long v33 = (v14 << 8) & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)v28 << 16) | 7;
  *((void *)&v33 + 1) = v17;
  uint64_t v30 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v29 + 16), (unsigned __int8 *)&v33);
  int8x16_t v31 = *(unsigned __int8 **)(v29 + 16);
  if (v31) {
    v31 += 24 * *((unsigned int *)v31 - 1);
  }
  if (v31 == v30 || !*((void *)v30 + 2)) {
    WGSL::TypeStore::allocateType<WGSL::Types::Pointer,WGSL::AddressSpace &,WGSL::AccessMode &,WGSL::Type const*&>();
  }
  return (WGSL::Type *)*((void *)v30 + 2);
}

void WGSL::TypeChecker::typeError<char,WGSL::Type const&,WTF::ASCIILiteral>(uint64_t a1, int a2, _OWORD *a3, char a4, uint64_t a5, _OWORD *a6)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  v22[0] = 0;
  unsigned int v23 = -1;
  uint64_t v11 = *(unsigned int *)(a5 + 48);
  if (v11 != -1)
  {
    ((void (*)(unsigned char *, unsigned __int8 *, uint64_t))off_1ECABEE00[v11])(v20, v22, a5);
    unsigned int v23 = v11;
  }
  *(_OWORD *)BOOL v20 = *a6;
  WTF::tryMakeString<char,WGSL::Type,WTF::ASCIILiteral>(&v19, a4, v22, (uint64_t)v20);
  if (!v19)
  {
    __break(0xC471u);
    return;
  }
  *(void *)BOOL v20 = v19;
  *(_OWORD *)&v20[8] = *a3;
  uint64_t v12 = *(unsigned int *)(a1 + 132);
  if (v12 != *(_DWORD *)(a1 + 128))
  {
    uint64_t v18 = *(void *)(a1 + 120) + 24 * v12;
    *(void *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 8) = *(_OWORD *)&v20[8];
    ++*(_DWORD *)(a1 + 132);
    *(void *)BOOL v20 = 0;
LABEL_10:
    uint64_t v17 = v23;
    if (v23 == -1) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  unint64_t v13 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v12 + 1, (unint64_t)v20);
  uint64_t v14 = *(void *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  uint64_t v15 = *(void *)v13;
  *(void *)unint64_t v13 = 0;
  *(void *)uint64_t v14 = v15;
  *(_OWORD *)(v14 + 8) = *(_OWORD *)(v13 + 8);
  uint64_t v16 = *(_DWORD **)v20;
  ++*(_DWORD *)(a1 + 132);
  *(void *)BOOL v20 = 0;
  if (!v16) {
    goto LABEL_10;
  }
  if (*v16 != 2)
  {
    *v16 -= 2;
    uint64_t v17 = v23;
    if (v23 == -1) {
      goto LABEL_12;
    }
LABEL_11:
    ((void (*)(char *, unsigned __int8 *))off_1ECABED88[v17])(&v21, v22);
    goto LABEL_12;
  }
  WTF::StringImpl::destroy();
  uint64_t v17 = v23;
  if (v23 != -1) {
    goto LABEL_11;
  }
LABEL_12:
  if (a2) {
    *(void *)(a1 + 88) = *(void *)(*(void *)(a1 + 112) + 24);
  }
}

void std::__function::__func<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_1,std::allocator<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_1>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>::~__func()
{
}

void *std::__function::__func<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_1,std::allocator<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_1>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1ECABEFE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_1,std::allocator<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_1>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECABEFE8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_1,std::allocator<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_1>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(WGSL::TypeChecker **)(a1 + 8);
  if (*(_DWORD *)(a2 + 108) != 1)
  {
    uint64_t v11 = (long long *)(a2 + 8);
    uint64_t v12 = "'atomic' requires 1 template arguments";
    unint64_t v13 = *(WGSL::TypeChecker **)(a1 + 8);
    uint64_t v14 = 39;
    goto LABEL_10;
  }
  uint64_t v4 = **(void **)(a2 + 96);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 16))(v4) == 22)
  {
    uint64_t result = (uint64_t)WGSL::TypeChecker::lookupType(v3, (const WGSL::AST::Identifier *)(v4 + 64), v5);
    uint64_t v7 = result;
    *((void *)v3 + 11) = result;
    if (*(_DWORD *)(result + 48) != 13) {
      goto LABEL_4;
    }
LABEL_13:
    *(void *)&long long v18 = "' requires template arguments";
    *((void *)&v18 + 1) = 30;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)v3, 0, (_OWORD *)(v4 + 8), (int8x16_t *)"type '", 7, v7, &v18);
    uint64_t v15 = *(void *)(*((void *)v3 + 14) + 24);
    *(void *)(v4 + 24) = v15;
    *((void *)v3 + 11) = 0;
    return v15;
  }
  uint64_t result = WGSL::AST::Visitor::visit(v3, v4);
  uint64_t v7 = *((void *)v3 + 11);
  if (*(_DWORD *)(v7 + 48) == 13) {
    goto LABEL_13;
  }
LABEL_4:
  uint64_t v8 = (void *)*((void *)v3 + 14);
  uint64_t v9 = v8[3];
  *(void *)(v4 + 24) = v7;
  *((void *)v3 + 11) = 0;
  if (v9 == v7) {
    return v7;
  }
  uint64_t v10 = v8[8];
  if (v7 == v10 || v7 == v8[9])
  {
    BOOL v16 = v7 == v10;
    uint64_t v17 = 24;
    if (v16) {
      uint64_t v17 = 23;
    }
    return v8[v17];
  }
  else
  {
    if (*(_DWORD *)(a2 + 108))
    {
      uint64_t v11 = (long long *)(**(void **)(a2 + 96) + 8);
      uint64_t v12 = "atomic only supports i32 or u32 types";
      unint64_t v13 = v3;
      uint64_t v14 = 38;
LABEL_10:
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(v13, 0, v11, v12, v14);
      return *(void *)(*((void *)v3 + 14) + 24);
    }
    __break(0xC471u);
  }
  return result;
}

void std::__function::__func<void WGSL::TypeChecker::allocateSimpleConstructor<WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_2,int>(WTF::ASCIILiteral,WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_2 const&,int &&)::{lambda(WGSL::AST::ElaboratedTypeExpression &)#1},std::allocator<WGSL::AST::ElaboratedTypeExpression &>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression)>::~__func()
{
}

__n128 std::__function::__func<void WGSL::TypeChecker::allocateSimpleConstructor<WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_2,int>(WTF::ASCIILiteral,WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_2 const&,int &&)::{lambda(WGSL::AST::ElaboratedTypeExpression &)#1},std::allocator<WGSL::AST::ElaboratedTypeExpression &>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1ECABF030;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<void WGSL::TypeChecker::allocateSimpleConstructor<WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_2,int>(WTF::ASCIILiteral,WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_2 const&,int &&)::{lambda(WGSL::AST::ElaboratedTypeExpression &)#1},std::allocator<WGSL::AST::ElaboratedTypeExpression &>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1ECABF030;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<void WGSL::TypeChecker::allocateSimpleConstructor<WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_2,int>(WTF::ASCIILiteral,WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_2 const&,int &&)::{lambda(WGSL::AST::ElaboratedTypeExpression &)#1},std::allocator<WGSL::AST::ElaboratedTypeExpression &>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression)>::operator()(uint64_t a1, uint64_t a2)
{
  long long v3 = *(WGSL::TypeChecker **)(a1 + 8);
  if (*(_DWORD *)(a2 + 108) != 1)
  {
    WGSL::TypeChecker::typeError<char,WGSL::AST::Identifier &,WTF::ASCIILiteral>(*(void *)(a1 + 8), (long long *)(a2 + 8), 39, a2 + 64, (int8x16_t *)"' requires 1 template argument", 31);
    return *(void *)(*((void *)v3 + 14) + 24);
  }
  uint64_t v5 = **(void **)(a2 + 96);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5) == 22)
  {
    uint64_t v7 = WGSL::TypeChecker::lookupType(v3, (const WGSL::AST::Identifier *)(v5 + 64), v6);
    *((void *)v3 + 11) = v7;
    if (*((_DWORD *)v7 + 12) != 13) {
      goto LABEL_4;
    }
LABEL_11:
    *(void *)&long long v20 = "' requires template arguments";
    *((void *)&v20 + 1) = 30;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)v3, 0, (_OWORD *)(v5 + 8), (int8x16_t *)"type '", 7, (uint64_t)v7, &v20);
    uint64_t v7 = *(void **)(*((void *)v3 + 14) + 24);
    *(void *)(v5 + 24) = v7;
    *((void *)v3 + 11) = 0;
    return (uint64_t)v7;
  }
  WGSL::AST::Visitor::visit(v3, v5);
  uint64_t v7 = (void *)*((void *)v3 + 11);
  if (*((_DWORD *)v7 + 12) == 13) {
    goto LABEL_11;
  }
LABEL_4:
  uint64_t v8 = *((void *)v3 + 14);
  uint64_t v9 = *(void **)(v8 + 24);
  *(void *)(v5 + 24) = v7;
  *((void *)v3 + 11) = 0;
  if (v9 == v7) {
    return (uint64_t)v7;
  }
  uint64_t v10 = (unsigned __int8 *)v7;
  while (1)
  {
    int v11 = *((_DWORD *)v10 + 12);
    if (v11 != 10) {
      break;
    }
    uint64_t v10 = (unsigned __int8 *)*((void *)v10 + 1);
    if (!v10) {
      goto LABEL_21;
    }
  }
  if (v11 || ((v13 = *v10, v13 >= 6) ? (BOOL v14 = v13 == 7) : (BOOL v14 = 1), !v14))
  {
LABEL_21:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    BYTE8(v20) = 1;
    WGSL::TypeChecker::typeError<WTF::String &>((unint64_t)v3, (long long *)(a2 + 8), v20);
    uint64_t v7 = *(void **)(*((void *)v3 + 14) + 24);
    long long v18 = (_DWORD *)v20;
    *(void *)&long long v20 = 0;
    if (v18)
    {
      if (*v18 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v18 -= 2;
      }
    }
    return (uint64_t)v7;
  }
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, void *))(a1 + 16);
  uint64_t v16 = *(void *)(a1 + 24);
  uint64_t v17 = (void *)(v8 + (v16 >> 1));
  if (v16) {
    uint64_t v15 = *(uint64_t (**)(void *, uint64_t, void *))(*v17 + v15);
  }
  uint64_t v19 = *(unsigned __int8 *)(a1 + 40);
  return v15(v17, v19, v7);
}

_DWORD *WGSL::TypeChecker::typeError<char,WGSL::AST::Identifier &,WTF::ASCIILiteral>(uint64_t a1, long long *a2, char a3, uint64_t a4, int8x16_t *a5, uint64_t a6)
{
  uint64_t v10 = *(void *)(a4 + 24);
  if (v10)
  {
    *(_DWORD *)v10 += 2;
    unint64_t v108 = (_DWORD *)v10;
    if (a6) {
      unint64_t v11 = a6 - 1;
    }
    else {
      unint64_t v11 = 0;
    }
    if (v11 >> 31) {
      goto LABEL_126;
    }
    LODWORD(v12) = *(_DWORD *)(v10 + 4);
  }
  else
  {
    unint64_t v108 = 0;
    if (a6) {
      unint64_t v11 = a6 - 1;
    }
    else {
      unint64_t v11 = 0;
    }
    unint64_t v12 = v11 >> 31;
    if (v11 >> 31) {
      goto LABEL_126;
    }
  }
  if (((v12 | v11) & 0x80000000) != 0) {
    goto LABEL_126;
  }
  BOOL v13 = __OFADD__(v12, v11);
  int v14 = v12 + v11;
  if (v13) {
    goto LABEL_126;
  }
  uint64_t v15 = (v14 + 1);
  if (__OFADD__(v14, 1)) {
    goto LABEL_126;
  }
  if (!v10 || (*(unsigned char *)(v10 + 16) & 4) != 0)
  {
    if (v14 == -1) {
      goto LABEL_29;
    }
    if ((v15 & 0x80000000) == 0)
    {
      WTF::tryFastCompactMalloc((WTF *)(v15 + 20));
      uint64_t v16 = v109;
      if (v109)
      {
        _DWORD *v109 = 2;
        v16[1] = v15;
        *((unsigned char *)v16 + 20) = a3;
        *((void *)v16 + 1) = v16 + 5;
        v16[4] = 4;
        long long v20 = (char *)v16 + 21;
        if (!v10)
        {
          uint64_t v27 = 0;
          if (!v11) {
            goto LABEL_80;
          }
          goto LABEL_66;
        }
        char v21 = *(int8x16_t **)(v10 + 8);
        size_t v22 = *(unsigned int *)(v10 + 4);
        if ((*(unsigned char *)(v10 + 16) & 4) != 0)
        {
          if (v22)
          {
            if (v22 == 1) {
              unsigned char *v20 = v21->i8[0];
            }
            else {
              memcpy((char *)v16 + 21, v21, v22);
            }
          }
LABEL_65:
          uint64_t v27 = *(unsigned int *)(v10 + 4);
          if (!v11) {
            goto LABEL_80;
          }
LABEL_66:
          unsigned long long v52 = &v20[v27];
          if (v11 == 1) {
            *unsigned long long v52 = a5->i8[0];
          }
          else {
            memcpy(v52, a5, v11);
          }
          goto LABEL_80;
        }
        unsigned int v23 = &v20[v22];
        if (v22 < 0x10)
        {
          unint64_t v24 = (unint64_t)v16 + 21;
          if (v20 == v23) {
            goto LABEL_65;
          }
        }
        else
        {
          unint64_t v24 = (unint64_t)&v20[v22 & 0xFFFFFFF0];
          uint64_t v25 = (unsigned long long *)((char *)v16 + 21);
          do
          {
            unsigned long long v26 = (unsigned __int128)vld2q_s8(v21->i8);
            v21 += 2;
            *v25++ = v26;
          }
          while (v25 != (unsigned long long *)v24);
          if ((unsigned char *)v24 == v23) {
            goto LABEL_65;
          }
        }
        size_t v38 = (size_t)v16 + v22;
        unint64_t v39 = (unint64_t)v16 + v22 - v24 + 21;
        if (v39 < 8
          || (v24 < (unint64_t)&v21[2].u64[1] + 2 * v38 + -2 * v24 + 2
            ? (BOOL v40 = (unint64_t)v21 >= v38 + 21)
            : (BOOL v40 = 1),
              !v40))
        {
          long long v42 = (unsigned char *)v24;
          uint64_t v43 = v21;
          goto LABEL_49;
        }
        if (v39 >= 0x20)
        {
          unint64_t v41 = v39 & 0xFFFFFFFFFFFFFFE0;
          char v87 = v21 + 2;
          size_t v88 = (int8x16_t *)(v24 + 16);
          unint64_t v89 = v39 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            int8x16_t v91 = v87[-2];
            int8x16_t v90 = v87[-1];
            int8x16_t v93 = *v87;
            int8x16_t v92 = v87[1];
            v87 += 4;
            v88[-1] = vuzp1q_s8(v91, v90);
            int8x16_t *v88 = vuzp1q_s8(v93, v92);
            v88 += 2;
            v89 -= 32;
          }
          while (v89);
          if (v39 == v41) {
            goto LABEL_65;
          }
          if ((v39 & 0x18) == 0)
          {
            uint64_t v43 = (int8x16_t *)((char *)v21 + 2 * v41);
            long long v42 = (unsigned char *)(v24 + v41);
            goto LABEL_49;
          }
        }
        else
        {
          unint64_t v41 = 0;
        }
        long long v42 = (unsigned char *)(v24 + (v39 & 0xFFFFFFFFFFFFFFF8));
        uint64_t v43 = (int8x16_t *)((char *)v21 + 2 * (v39 & 0xFFFFFFFFFFFFFFF8));
        unint64_t v94 = (int16x8_t *)((char *)v21 + 2 * v41);
        char v95 = (int8x8_t *)(v24 + v41);
        unint64_t v96 = v41 - (v39 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          int16x8_t v97 = *v94++;
          *v95++ = vmovn_s16(v97);
          v96 += 8;
        }
        while (v96);
        if (v39 == (v39 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_65;
        }
        do
        {
LABEL_49:
          char v44 = v43->i8[0];
          uint64_t v43 = (int8x16_t *)((char *)v43 + 2);
          *v42++ = v44;
        }
        while (v42 != v23);
        goto LABEL_65;
      }
    }
LABEL_126:
    __break(0xC471u);
    JUMPOUT(0x1826BB6B8);
  }
  if (v14 == -1)
  {
LABEL_29:
    uint64_t v16 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_80;
  }
  if (v15 > 0x7FFFFFEF) {
    goto LABEL_126;
  }
  WTF::tryFastCompactMalloc((WTF *)(2 * v15 + 20));
  uint64_t v16 = v109;
  if (!v109) {
    goto LABEL_126;
  }
  _DWORD *v109 = 2;
  v16[1] = v15;
  *((_WORD *)v16 + 10) = a3;
  *((void *)v16 + 1) = v16 + 5;
  v16[4] = 0;
  uint64_t v17 = (_WORD *)v16 + 11;
  long long v18 = *(int8x16_t **)(v10 + 8);
  uint64_t v19 = *(unsigned int *)(v10 + 4);
  if ((*(unsigned char *)(v10 + 16) & 4) != 0)
  {
    unsigned __int16 v28 = &v17[v19];
    if (v19 < 0x40)
    {
      unint64_t v29 = (unint64_t)v16 + 22;
    }
    else
    {
      unint64_t v29 = (unint64_t)&v17[v19 & 0xFFFFFFC0];
      long long v30 = 0uLL;
      int8x16_t v31 = (char *)v16 + 22;
      do
      {
        v111.val[0] = *v18;
        int8x16_t v32 = v18[1];
        v113.val[0] = v18[2];
        int8x16_t v33 = v18[3];
        v18 += 4;
        int8x16_t v34 = v33;
        v113.val[1] = 0uLL;
        v115.val[0] = v32;
        v111.val[1] = 0uLL;
        uint64_t v35 = v31;
        vst2q_s8(v35, v111);
        v35 += 32;
        v115.val[1] = 0uLL;
        vst2q_s8(v35, v115);
        unint64_t v36 = v31 + 64;
        vst2q_s8(v36, v113);
        uint64_t v37 = v31 + 96;
        vst2q_s8(v37, *(int8x16x2_t *)(&v30 - 1));
        v31 += 128;
      }
      while (v31 != (char *)v29);
    }
    if ((_WORD *)v29 == v28) {
      goto LABEL_70;
    }
    unint64_t v45 = (unint64_t)v16 + 2 * v19 - v29 + 20;
    if (v45 < 0xE
      || (v29 < (unint64_t)v18->u64 + (v45 >> 1) + 1
        ? (BOOL v46 = (unint64_t)v18 >= (v45 & 0xFFFFFFFFFFFFFFFELL) + v29 + 2)
        : (BOOL v46 = 1),
          !v46))
    {
      int8x16_t v49 = (_WORD *)v29;
      unint64_t v50 = v18;
      goto LABEL_62;
    }
    uint64_t v47 = (v45 >> 1) + 1;
    if (v45 >= 0x3E)
    {
      unint64_t v48 = v47 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v98 = (uint8x8_t *)&v18[1];
      unint64_t v99 = (uint16x8_t *)(v29 + 32);
      unint64_t v100 = v47 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v101 = *(uint8x16_t *)v98[-2].i8;
        uint16x8_t v102 = vmovl_u8(*v98);
        uint16x8_t v103 = vmovl_high_u8(*(uint8x16_t *)v98->i8);
        v99[-2] = vmovl_u8(*(uint8x8_t *)v101.i8);
        v99[-1] = vmovl_high_u8(v101);
        uint16x8_t *v99 = v102;
        v99[1] = v103;
        v99 += 4;
        v98 += 4;
        v100 -= 32;
      }
      while (v100);
      if (v47 == v48) {
        goto LABEL_70;
      }
      if ((v47 & 0x18) == 0)
      {
        unint64_t v50 = (int8x16_t *)((char *)v18 + v48);
        int8x16_t v49 = (_WORD *)(v29 + 2 * v48);
        goto LABEL_62;
      }
    }
    else
    {
      unint64_t v48 = 0;
    }
    int8x16_t v49 = (_WORD *)(v29 + 2 * (v47 & 0xFFFFFFFFFFFFFFF8));
    unint64_t v50 = (int8x16_t *)((char *)v18 + (v47 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v104 = (uint8x8_t *)&v18->i8[v48];
    unint64_t v105 = (uint16x8_t *)(v29 + 2 * v48);
    unint64_t v106 = v48 - (v47 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v107 = *v104++;
      *v105++ = vmovl_u8(v107);
      v106 += 8;
    }
    while (v106);
    if (v47 == (v47 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_70;
    }
    do
    {
LABEL_62:
      __int16 v51 = v50->u8[0];
      unint64_t v50 = (int8x16_t *)((char *)v50 + 1);
      *v49++ = v51;
    }
    while (v49 != v28);
    goto LABEL_70;
  }
  if (v19)
  {
    if (v19 == 1) {
      _WORD *v17 = v18->i16[0];
    }
    else {
      memcpy((char *)v16 + 22, v18, 2 * v19);
    }
  }
LABEL_70:
  uint64_t v53 = *(unsigned int *)(v10 + 4);
  unint64_t v54 = (unint64_t)&v17[v53];
  unint64_t v55 = (_WORD *)(v54 + 2 * v11);
  if ((v11 & 0xFFFFFFC0) != 0)
  {
    unint64_t v56 = v54 + 2 * (v11 & 0xFFFFFFC0);
    long long v57 = 0uLL;
    do
    {
      v112.val[0] = *a5;
      int8x16_t v58 = a5[1];
      v114.val[0] = a5[2];
      int8x16_t v59 = a5[3];
      a5 += 4;
      int8x16_t v60 = v59;
      v114.val[1] = 0uLL;
      v116.val[0] = v58;
      v112.val[1] = 0uLL;
      char v61 = (char *)v54;
      vst2q_s8(v61, v112);
      v61 += 32;
      v116.val[1] = 0uLL;
      vst2q_s8(v61, v116);
      __int16 v62 = (char *)(v54 + 64);
      vst2q_s8(v62, v114);
      uint64_t v63 = (char *)(v54 + 96);
      vst2q_s8(v63, *(int8x16x2_t *)(&v57 - 1));
      v54 += 128;
    }
    while (v54 != v56);
    unint64_t v54 = v56;
  }
  if ((_WORD *)v54 != v55)
  {
    unint64_t v64 = (unint64_t)v16 + 2 * v11 + 2 * v53 - v54 + 20;
    if (v64 < 0xE
      || v54 < (unint64_t)a5->u64 + (v64 >> 1) + 1
      && (unint64_t)a5 < (v64 & 0xFFFFFFFFFFFFFFFELL) + v54 + 2)
    {
      uint64_t v65 = (_WORD *)v54;
      unint64_t v66 = a5;
      goto LABEL_79;
    }
    uint64_t v75 = (v64 >> 1) + 1;
    if (v64 >= 0x3E)
    {
      unint64_t v76 = v75 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v77 = (uint8x8_t *)&a5[1];
      unint64_t v78 = (uint16x8_t *)(v54 + 32);
      unint64_t v79 = v75 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v80 = *(uint8x16_t *)v77[-2].i8;
        uint16x8_t v81 = vmovl_u8(*v77);
        uint16x8_t v82 = vmovl_high_u8(*(uint8x16_t *)v77->i8);
        v78[-2] = vmovl_u8(*(uint8x8_t *)v80.i8);
        v78[-1] = vmovl_high_u8(v80);
        *unint64_t v78 = v81;
        v78[1] = v82;
        v78 += 4;
        v77 += 4;
        v79 -= 32;
      }
      while (v79);
      if (v75 == v76) {
        goto LABEL_80;
      }
      if ((v75 & 0x18) == 0)
      {
        unint64_t v66 = (int8x16_t *)((char *)a5 + v76);
        uint64_t v65 = (_WORD *)(v54 + 2 * v76);
        do
        {
LABEL_79:
          __int16 v67 = v66->u8[0];
          unint64_t v66 = (int8x16_t *)((char *)v66 + 1);
          *v65++ = v67;
        }
        while (v65 != v55);
        goto LABEL_80;
      }
    }
    else
    {
      unint64_t v76 = 0;
    }
    uint64_t v65 = (_WORD *)(v54 + 2 * (v75 & 0xFFFFFFFFFFFFFFF8));
    unint64_t v66 = (int8x16_t *)((char *)a5 + (v75 & 0xFFFFFFFFFFFFFFF8));
    unint64_t v83 = (uint8x8_t *)&a5->i8[v76];
    unint64_t v84 = (uint16x8_t *)(v54 + 2 * v76);
    unint64_t v85 = v76 - (v75 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v86 = *v83++;
      *v84++ = vmovl_u8(v86);
      v85 += 8;
    }
    while (v85);
    if (v75 != (v75 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_79;
    }
  }
LABEL_80:
  int8x16_t v109 = v16;
  long long v110 = *a2;
  uint64_t v68 = *(unsigned int *)(a1 + 132);
  if (v68 != *(_DWORD *)(a1 + 128))
  {
    uint64_t v74 = *(void *)(a1 + 120) + 24 * v68;
    *(void *)uint64_t v74 = v16;
    *(_OWORD *)(v74 + 8) = v110;
    ++*(_DWORD *)(a1 + 132);
    int8x16_t v109 = 0;
LABEL_86:
    __n128 result = v108;
    if (!v108) {
      return result;
    }
    goto LABEL_87;
  }
  unint64_t v69 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v68 + 1, (unint64_t)&v109);
  uint64_t v70 = *(void *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  uint64_t v71 = *(void *)v69;
  *(void *)unint64_t v69 = 0;
  *(void *)uint64_t v70 = v71;
  *(_OWORD *)(v70 + 8) = *(_OWORD *)(v69 + 8);
  unint64_t v72 = v109;
  ++*(_DWORD *)(a1 + 132);
  int8x16_t v109 = 0;
  if (!v72) {
    goto LABEL_86;
  }
  if (*v72 == 2)
  {
    WTF::StringImpl::destroy();
    __n128 result = v108;
    if (!v108) {
      return result;
    }
  }
  else
  {
    *v72 -= 2;
    __n128 result = v108;
    if (!v108) {
      return result;
    }
  }
LABEL_87:
  if (*result == 2) {
    return (_DWORD *)WTF::StringImpl::destroy();
  }
  *result -= 2;
  return result;
}

void std::__function::__func<void WGSL::TypeChecker::allocateSimpleConstructor<WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_3,int,int>(WTF::ASCIILiteral,WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_3 const&,int,int &&)::{lambda(WGSL::AST::ElaboratedTypeExpression &)#1},std::allocator<WGSL::AST::ElaboratedTypeExpression &>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression)>::~__func()
{
}

__n128 std::__function::__func<void WGSL::TypeChecker::allocateSimpleConstructor<WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_3,int,int>(WTF::ASCIILiteral,WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_3 const&,int,int &&)::{lambda(WGSL::AST::ElaboratedTypeExpression &)#1},std::allocator<WGSL::AST::ElaboratedTypeExpression &>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1ECABF078;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<void WGSL::TypeChecker::allocateSimpleConstructor<WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_3,int,int>(WTF::ASCIILiteral,WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_3 const&,int,int &&)::{lambda(WGSL::AST::ElaboratedTypeExpression &)#1},std::allocator<WGSL::AST::ElaboratedTypeExpression &>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1ECABF078;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<void WGSL::TypeChecker::allocateSimpleConstructor<WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_3,int,int>(WTF::ASCIILiteral,WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_3 const&,int,int &&)::{lambda(WGSL::AST::ElaboratedTypeExpression &)#1},std::allocator<WGSL::AST::ElaboratedTypeExpression &>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression)>::operator()(uint64_t a1, uint64_t a2)
{
  long long v3 = *(WGSL::TypeChecker **)(a1 + 8);
  if (*(_DWORD *)(a2 + 108) != 1)
  {
    WGSL::TypeChecker::typeError<char,WGSL::AST::Identifier &,WTF::ASCIILiteral>(*(void *)(a1 + 8), (long long *)(a2 + 8), 39, a2 + 64, (int8x16_t *)"' requires 1 template argument", 31);
    return *(void *)(*((void *)v3 + 14) + 24);
  }
  uint64_t v5 = **(void **)(a2 + 96);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5) == 22)
  {
    uint64_t v7 = WGSL::TypeChecker::lookupType(v3, (const WGSL::AST::Identifier *)(v5 + 64), v6);
    *((void *)v3 + 11) = v7;
    if (*((_DWORD *)v7 + 12) != 13) {
      goto LABEL_4;
    }
LABEL_11:
    *(void *)&long long v23 = "' requires template arguments";
    *((void *)&v23 + 1) = 30;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)v3, 0, (_OWORD *)(v5 + 8), (int8x16_t *)"type '", 7, (uint64_t)v7, &v23);
    uint64_t v7 = *(void **)(*((void *)v3 + 14) + 24);
    *(void *)(v5 + 24) = v7;
    *((void *)v3 + 11) = 0;
    return (uint64_t)v7;
  }
  WGSL::AST::Visitor::visit(v3, v5);
  uint64_t v7 = (void *)*((void *)v3 + 11);
  if (*((_DWORD *)v7 + 12) == 13) {
    goto LABEL_11;
  }
LABEL_4:
  uint64_t v8 = *((void *)v3 + 14);
  uint64_t v9 = *(void **)(v8 + 24);
  *(void *)(v5 + 24) = v7;
  *((void *)v3 + 11) = 0;
  if (v9 == v7) {
    return (uint64_t)v7;
  }
  uint64_t v10 = (unsigned __int8 *)v7;
  while (1)
  {
    int v11 = *((_DWORD *)v10 + 12);
    if (v11 != 10) {
      break;
    }
    uint64_t v10 = (unsigned __int8 *)*((void *)v10 + 1);
    if (!v10) {
      goto LABEL_20;
    }
  }
  if (v11 || ((v13 = *v10, BOOL v14 = v13 > 5, v15 = (1 << v13) & 0x39, !v14) ? (v16 = v15 == 0) : (v16 = 1), v16))
  {
LABEL_20:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    BYTE8(v23) = 1;
    WGSL::TypeChecker::typeError<WTF::String &>((unint64_t)v3, (long long *)(a2 + 8), v23);
    uint64_t v7 = *(void **)(*((void *)v3 + 14) + 24);
    long long v20 = (_DWORD *)v23;
    *(void *)&long long v23 = 0;
    if (v20)
    {
      if (*v20 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v20 -= 2;
      }
    }
    return (uint64_t)v7;
  }
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t, void *))(a1 + 16);
  uint64_t v18 = *(void *)(a1 + 24);
  uint64_t v19 = (void *)(v8 + (v18 >> 1));
  if (v18) {
    uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t, void *))(*v19 + v17);
  }
  uint64_t v21 = *(unsigned __int8 *)(a1 + 40);
  uint64_t v22 = *(unsigned __int8 *)(a1 + 44);
  return v17(v19, v21, v22, v7);
}

void std::__function::__func<void WGSL::TypeChecker::allocateSimpleConstructor<WGSL::Type const* (WGSL::TypeStore::*)(WGSL::Types::Texture::Kind,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_4,WGSL::Types::Texture::Kind>(WTF::ASCIILiteral,WGSL::Type const* (WGSL::TypeStore::*)(WGSL::Types::Texture::Kind,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_4 const&,WGSL::Types::Texture::Kind &&)::{lambda(WGSL::AST::ElaboratedTypeExpression &)#1},std::allocator<WGSL::AST::ElaboratedTypeExpression &>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression)>::~__func()
{
}

__n128 std::__function::__func<void WGSL::TypeChecker::allocateSimpleConstructor<WGSL::Type const* (WGSL::TypeStore::*)(WGSL::Types::Texture::Kind,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_4,WGSL::Types::Texture::Kind>(WTF::ASCIILiteral,WGSL::Type const* (WGSL::TypeStore::*)(WGSL::Types::Texture::Kind,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_4 const&,WGSL::Types::Texture::Kind &&)::{lambda(WGSL::AST::ElaboratedTypeExpression &)#1},std::allocator<WGSL::AST::ElaboratedTypeExpression &>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1ECABF0C0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<void WGSL::TypeChecker::allocateSimpleConstructor<WGSL::Type const* (WGSL::TypeStore::*)(WGSL::Types::Texture::Kind,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_4,WGSL::Types::Texture::Kind>(WTF::ASCIILiteral,WGSL::Type const* (WGSL::TypeStore::*)(WGSL::Types::Texture::Kind,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_4 const&,WGSL::Types::Texture::Kind &&)::{lambda(WGSL::AST::ElaboratedTypeExpression &)#1},std::allocator<WGSL::AST::ElaboratedTypeExpression &>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1ECABF0C0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<void WGSL::TypeChecker::allocateSimpleConstructor<WGSL::Type const* (WGSL::TypeStore::*)(WGSL::Types::Texture::Kind,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_4,WGSL::Types::Texture::Kind>(WTF::ASCIILiteral,WGSL::Type const* (WGSL::TypeStore::*)(WGSL::Types::Texture::Kind,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_4 const&,WGSL::Types::Texture::Kind &&)::{lambda(WGSL::AST::ElaboratedTypeExpression &)#1},std::allocator<WGSL::AST::ElaboratedTypeExpression &>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression)>::operator()(uint64_t a1, uint64_t a2)
{
  long long v3 = *(WGSL::TypeChecker **)(a1 + 8);
  if (*(_DWORD *)(a2 + 108) != 1)
  {
    WGSL::TypeChecker::typeError<char,WGSL::AST::Identifier &,WTF::ASCIILiteral>(*(void *)(a1 + 8), (long long *)(a2 + 8), 39, a2 + 64, (int8x16_t *)"' requires 1 template argument", 31);
    return *(void *)(*((void *)v3 + 14) + 24);
  }
  uint64_t v5 = **(void **)(a2 + 96);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5) == 22)
  {
    uint64_t v7 = WGSL::TypeChecker::lookupType(v3, (const WGSL::AST::Identifier *)(v5 + 64), v6);
    *((void *)v3 + 11) = v7;
    if (*((_DWORD *)v7 + 12) != 13) {
      goto LABEL_4;
    }
LABEL_11:
    *(void *)&long long v20 = "' requires template arguments";
    *((void *)&v20 + 1) = 30;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)v3, 0, (_OWORD *)(v5 + 8), (int8x16_t *)"type '", 7, (uint64_t)v7, &v20);
    uint64_t v7 = *(void **)(*((void *)v3 + 14) + 24);
    *(void *)(v5 + 24) = v7;
    *((void *)v3 + 11) = 0;
    return (uint64_t)v7;
  }
  WGSL::AST::Visitor::visit(v3, v5);
  uint64_t v7 = (void *)*((void *)v3 + 11);
  if (*((_DWORD *)v7 + 12) == 13) {
    goto LABEL_11;
  }
LABEL_4:
  uint64_t v8 = *((void *)v3 + 14);
  uint64_t v9 = *(void **)(v8 + 24);
  *(void *)(v5 + 24) = v7;
  *((void *)v3 + 11) = 0;
  if (v9 == v7) {
    return (uint64_t)v7;
  }
  uint64_t v10 = (unsigned __int8 *)v7;
  while (1)
  {
    int v11 = *((_DWORD *)v10 + 12);
    if (v11 != 10) {
      break;
    }
    uint64_t v10 = (unsigned __int8 *)*((void *)v10 + 1);
    if (!v10) {
      goto LABEL_21;
    }
  }
  if (v11 || ((v13 = *v10, v13 >= 4) ? (BOOL v14 = v13 == 5) : (BOOL v14 = 1), !v14))
  {
LABEL_21:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    BYTE8(v20) = 1;
    WGSL::TypeChecker::typeError<WTF::String &>((unint64_t)v3, (long long *)(a2 + 8), v20);
    uint64_t v7 = *(void **)(*((void *)v3 + 14) + 24);
    uint64_t v18 = (_DWORD *)v20;
    *(void *)&long long v20 = 0;
    if (v18)
    {
      if (*v18 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v18 -= 2;
      }
    }
    return (uint64_t)v7;
  }
  int v15 = *(uint64_t (**)(void *, uint64_t, void *))(a1 + 16);
  uint64_t v16 = *(void *)(a1 + 24);
  uint64_t v17 = (void *)(v8 + (v16 >> 1));
  if (v16) {
    int v15 = *(uint64_t (**)(void *, uint64_t, void *))(*v17 + v15);
  }
  uint64_t v19 = *(unsigned __int8 *)(a1 + 40);
  return v15(v17, v19, v7);
}

void *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::OverloadedDeclaration>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::OverloadedDeclaration>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::OverloadedDeclaration,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::OverloadedDeclaration>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, _DWORD **a3)
{
  uint64_t v4 = *a1;
  uint64_t v94 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 48 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    int8x16_t v90 = 0;
    uint64_t v93 = v5;
    uint64_t v12 = v94;
    while (1)
    {
      BOOL v14 = *(WTF::StringImpl **)(v12 + 48 * v11);
      if (v14 == (WTF::StringImpl *)-1) {
        goto LABEL_12;
      }
      char v95 = (_DWORD **)(v12 + 48 * v11);
      if (v14) {
        break;
      }
      uint64_t v15 = v11;
      uint64_t v16 = v12 + 48 * v11;
      uint64_t v17 = (WTF **)(v16 + 32);
      unsigned int v18 = *(_DWORD *)(v16 + 44);
      if (v18)
      {
        uint64_t v19 = *v17;
        uint64_t v20 = (uint64_t)*v17 + 88 * v18;
        do
        {
          uint64_t v21 = *((void *)v19 + 10);
          *((void *)v19 + 10) = 0;
          if (v21)
          {
            uint64_t v22 = *(unsigned int *)(v21 + 24);
            if (v22 != -1) {
              ((void (*)(char *, uint64_t))off_1ECABED10[v22])(&v96, v21);
            }
            *(_DWORD *)(v21 + 24) = -1;
            MEMORY[0x18530AFF0](v21, 0x1062C40D964B916);
          }
          uint64_t v23 = *((unsigned int *)v19 + 15);
          if (v23)
          {
            unint64_t v24 = (uint64_t *)*((void *)v19 + 6);
            uint64_t v25 = 8 * v23;
            do
            {
              uint64_t v26 = *v24;
              *unint64_t v24 = 0;
              if (v26)
              {
                uint64_t v27 = *(unsigned int *)(v26 + 24);
                if (v27 != -1) {
                  ((void (*)(char *, uint64_t))off_1ECABED10[v27])(&v97, v26);
                }
                *(_DWORD *)(v26 + 24) = -1;
                MEMORY[0x18530AFF0](v26, 0x1062C40D964B916);
              }
              ++v24;
              v25 -= 8;
            }
            while (v25);
          }
          unsigned __int16 v28 = (WTF *)*((void *)v19 + 6);
          if ((WTF *)((char *)v19 + 64) == v28 || v28 == 0)
          {
            long long v30 = (WTF *)*((void *)v19 + 3);
            if ((WTF *)((char *)v19 + 40) == v30 || v30 == 0)
            {
LABEL_39:
              int8x16_t v32 = *(WTF **)v19;
              if ((WTF *)((char *)v19 + 16) != *(WTF **)v19) {
                goto LABEL_46;
              }
              goto LABEL_17;
            }
          }
          else
          {
            *((void *)v19 + 6) = 0;
            *((_DWORD *)v19 + 14) = 0;
            WTF::fastFree(v28, v8);
            long long v30 = (WTF *)*((void *)v19 + 3);
            if ((WTF *)((char *)v19 + 40) == v30 || v30 == 0) {
              goto LABEL_39;
            }
          }
          *((void *)v19 + 3) = 0;
          *((_DWORD *)v19 + 8) = 0;
          WTF::fastFree(v30, v8);
          int8x16_t v32 = *(WTF **)v19;
          if ((WTF *)((char *)v19 + 16) != *(WTF **)v19)
          {
LABEL_46:
            if (v32)
            {
              *(void *)uint64_t v19 = 0;
              *((_DWORD *)v19 + 2) = 0;
              WTF::fastFree(v32, v8);
            }
          }
LABEL_17:
          uint64_t v19 = (WTF *)((char *)v19 + 88);
        }
        while (v19 != (WTF *)v20);
      }
      size_t v38 = *v17;
      uint64_t v12 = v94;
      uint64_t v11 = v15;
      if (*v17)
      {
        void *v17 = 0;
        *(_DWORD *)(v94 + 48 * v15 + 40) = 0;
        WTF::fastFree(v38, v8);
      }
      unint64_t v39 = *v95;
      *char v95 = 0;
      if (v39)
      {
        if (*v39 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v39 -= 2;
        }
      }
LABEL_12:
      if (++v11 == v93) {
        goto LABEL_139;
      }
    }
    uint64_t v92 = v11;
    uint64_t v34 = *a1;
    if (*a1)
    {
      unsigned int v35 = *(_DWORD *)(v34 - 8);
      unsigned int v36 = *((_DWORD *)v14 + 4);
      if (v36 >= 0x100) {
        goto LABEL_50;
      }
LABEL_57:
      int v37 = WTF::StringImpl::hashSlowCase(v14);
    }
    else
    {
      unsigned int v35 = 0;
      unsigned int v36 = *((_DWORD *)v14 + 4);
      if (v36 < 0x100) {
        goto LABEL_57;
      }
LABEL_50:
      int v37 = v36 >> 8;
    }
    int v40 = 0;
    do
    {
      unsigned int v41 = v37 & v35;
      long long v42 = (void *)(v34 + 48 * (v37 & v35));
      int v37 = ++v40 + (v37 & v35);
    }
    while (*v42);
    uint64_t v43 = v34 + 48 * v41;
    unint64_t v89 = (_DWORD *)(v43 + 44);
    int8x16_t v91 = (WTF **)(v43 + 32);
    if (*(_DWORD *)(v43 + 44))
    {
      char v44 = *v91;
      uint64_t v45 = (uint64_t)*v91 + 88 * *(unsigned int *)(v43 + 44);
      do
      {
        uint64_t v46 = *((void *)v44 + 10);
        *((void *)v44 + 10) = 0;
        if (v46)
        {
          uint64_t v47 = *(unsigned int *)(v46 + 24);
          if (v47 != -1) {
            ((void (*)(char *, uint64_t))off_1ECABED10[v47])(&v100, v46);
          }
          *(_DWORD *)(v46 + 24) = -1;
          MEMORY[0x18530AFF0](v46, 0x1062C40D964B916);
        }
        uint64_t v48 = *((unsigned int *)v44 + 15);
        if (v48)
        {
          int8x16_t v49 = (uint64_t *)*((void *)v44 + 6);
          uint64_t v50 = 8 * v48;
          do
          {
            uint64_t v51 = *v49;
            *int8x16_t v49 = 0;
            if (v51)
            {
              uint64_t v52 = *(unsigned int *)(v51 + 24);
              if (v52 != -1) {
                ((void (*)(char *, uint64_t))off_1ECABED10[v52])(&v101, v51);
              }
              *(_DWORD *)(v51 + 24) = -1;
              MEMORY[0x18530AFF0](v51, 0x1062C40D964B916);
            }
            ++v49;
            v50 -= 8;
          }
          while (v50);
        }
        uint64_t v53 = (WTF *)*((void *)v44 + 6);
        if ((WTF *)((char *)v44 + 64) == v53 || v53 == 0)
        {
          unint64_t v55 = (WTF *)*((void *)v44 + 3);
          if ((WTF *)((char *)v44 + 40) == v55 || v55 == 0)
          {
LABEL_84:
            long long v57 = *(WTF **)v44;
            if ((WTF *)((char *)v44 + 16) != *(WTF **)v44) {
              goto LABEL_91;
            }
            goto LABEL_62;
          }
        }
        else
        {
          *((void *)v44 + 6) = 0;
          *((_DWORD *)v44 + 14) = 0;
          WTF::fastFree(v53, v8);
          unint64_t v55 = (WTF *)*((void *)v44 + 3);
          if ((WTF *)((char *)v44 + 40) == v55 || v55 == 0) {
            goto LABEL_84;
          }
        }
        *((void *)v44 + 3) = 0;
        *((_DWORD *)v44 + 8) = 0;
        WTF::fastFree(v55, v8);
        long long v57 = *(WTF **)v44;
        if ((WTF *)((char *)v44 + 16) != *(WTF **)v44)
        {
LABEL_91:
          if (v57)
          {
            *(void *)char v44 = 0;
            *((_DWORD *)v44 + 2) = 0;
            WTF::fastFree(v57, v8);
          }
        }
LABEL_62:
        char v44 = (WTF *)((char *)v44 + 88);
      }
      while (v44 != (WTF *)v45);
    }
    int8x16_t v59 = *v91;
    if (*v91)
    {
      *int8x16_t v91 = 0;
      *(_DWORD *)(v34 + 48 * v41 + 40) = 0;
      WTF::fastFree(v59, v8);
    }
    int8x16_t v60 = (_DWORD *)*v42;
    *long long v42 = 0;
    if (v60)
    {
      if (*v60 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v60 -= 2;
      }
    }
    char v61 = *v95;
    *char v95 = 0;
    *long long v42 = v61;
    uint64_t v62 = v34 + 48 * v41;
    uint64_t v63 = v94 + 48 * v92;
    long long v64 = *(_OWORD *)(v63 + 8);
    *(unsigned char *)(v62 + 24) = *(unsigned char *)(v63 + 24);
    *(_OWORD *)(v62 + 8) = v64;
    *int8x16_t v91 = 0;
    v91[1] = 0;
    unint64_t v66 = *(WTF **)(v63 + 32);
    uint64_t v65 = v63 + 32;
    *(void *)uint64_t v65 = 0;
    *int8x16_t v91 = v66;
    int v67 = *(_DWORD *)(v65 + 8);
    *(_DWORD *)(v65 + 8) = 0;
    *(_DWORD *)(v62 + 40) = v67;
    LODWORD(v62) = *(_DWORD *)(v65 + 12);
    *(_DWORD *)(v65 + 12) = 0;
    *unint64_t v89 = v62;
    unsigned int v68 = *(_DWORD *)(v65 + 12);
    if (!v68)
    {
LABEL_133:
      unint64_t v84 = *(WTF **)v65;
      if (*(void *)v65)
      {
        *(void *)uint64_t v65 = 0;
        *(_DWORD *)(v65 + 8) = 0;
        WTF::fastFree(v84, v8);
      }
      unint64_t v85 = *v95;
      *char v95 = 0;
      uint64_t v11 = v92;
      if (v85)
      {
        if (*v85 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v85 -= 2;
        }
      }
      unsigned int v13 = v90;
      if (v95 == a3) {
        unsigned int v13 = v42;
      }
      int8x16_t v90 = v13;
      uint64_t v12 = v94;
      goto LABEL_12;
    }
    unint64_t v69 = *(WTF **)v65;
    uint64_t v70 = *(void *)v65 + 88 * v68;
    while (1)
    {
      uint64_t v71 = *((void *)v69 + 10);
      *((void *)v69 + 10) = 0;
      if (v71)
      {
        uint64_t v72 = *(unsigned int *)(v71 + 24);
        if (v72 != -1) {
          ((void (*)(char *, uint64_t))off_1ECABED10[v72])(&v98, v71);
        }
        *(_DWORD *)(v71 + 24) = -1;
        MEMORY[0x18530AFF0](v71, 0x1062C40D964B916);
      }
      uint64_t v73 = *((unsigned int *)v69 + 15);
      if (v73)
      {
        uint64_t v74 = (uint64_t *)*((void *)v69 + 6);
        uint64_t v75 = 8 * v73;
        do
        {
          uint64_t v76 = *v74;
          *uint64_t v74 = 0;
          if (v76)
          {
            uint64_t v77 = *(unsigned int *)(v76 + 24);
            if (v77 != -1) {
              ((void (*)(char *, uint64_t))off_1ECABED10[v77])(&v99, v76);
            }
            *(_DWORD *)(v76 + 24) = -1;
            MEMORY[0x18530AFF0](v76, 0x1062C40D964B916);
          }
          ++v74;
          v75 -= 8;
        }
        while (v75);
      }
      unint64_t v78 = (WTF *)*((void *)v69 + 6);
      if ((WTF *)((char *)v69 + 64) == v78 || v78 == 0)
      {
        uint8x16_t v80 = (WTF *)*((void *)v69 + 3);
        if ((WTF *)((char *)v69 + 40) == v80 || v80 == 0)
        {
LABEL_124:
          uint16x8_t v82 = *(WTF **)v69;
          if ((WTF *)((char *)v69 + 16) != *(WTF **)v69) {
            goto LABEL_131;
          }
          goto LABEL_102;
        }
      }
      else
      {
        *((void *)v69 + 6) = 0;
        *((_DWORD *)v69 + 14) = 0;
        WTF::fastFree(v78, v8);
        uint8x16_t v80 = (WTF *)*((void *)v69 + 3);
        if ((WTF *)((char *)v69 + 40) == v80 || v80 == 0) {
          goto LABEL_124;
        }
      }
      *((void *)v69 + 3) = 0;
      *((_DWORD *)v69 + 8) = 0;
      WTF::fastFree(v80, v8);
      uint16x8_t v82 = *(WTF **)v69;
      if ((WTF *)((char *)v69 + 16) != *(WTF **)v69)
      {
LABEL_131:
        if (v82)
        {
          *(void *)unint64_t v69 = 0;
          *((_DWORD *)v69 + 2) = 0;
          WTF::fastFree(v82, v8);
        }
      }
LABEL_102:
      unint64_t v69 = (WTF *)((char *)v69 + 88);
      if (v69 == (WTF *)v70) {
        goto LABEL_133;
      }
    }
  }
  int8x16_t v90 = 0;
  __n128 result = 0;
  uint64_t v12 = v94;
  if (v94)
  {
LABEL_139:
    WTF::fastFree((WTF *)(v12 - 16), v8);
    return v90;
  }
  return result;
}

void *WTF::Vector<WGSL::OverloadCandidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WGSL::OverloadCandidate>(uint64_t a1, unint64_t a2)
{
  long long v3 = WTF::Vector<WGSL::OverloadCandidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = v3;
  unsigned int v5 = *(_DWORD *)(a1 + 12);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)a1 + 88 * v5;
  uint64_t v8 = (void *)(v7 + 16);
  *(void *)uint64_t v7 = v7 + 16;
  *(void *)(v7 + 8) = 1;
  uint64_t v9 = *(uint64_t **)v3;
  uint64_t v10 = *(uint64_t **)v3;
  if (*(char **)v3 == v3 + 16)
  {
    uint64_t v12 = *((unsigned int *)v3 + 3);
    if (v12)
    {
      unint64_t v13 = (v12 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v13 < 9) {
        goto LABEL_9;
      }
      if (v6 + 88 * (unint64_t)v5 - (unint64_t)v9 + 16 < 0x20) {
        goto LABEL_9;
      }
      unint64_t v14 = v13 + 1;
      uint64_t v15 = v14 & 0x3FFFFFFFFFFFFFFCLL;
      uint64_t v8 = (void *)((char *)v8 + v15 * 8);
      uint64_t v10 = &v9[v15];
      uint64_t v16 = (long long *)(v9 + 2);
      uint64_t v17 = (_OWORD *)(88 * v5 + v6 + 32);
      uint64_t v18 = v14 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v19 = *v16;
        *(v17 - 1) = *(v16 - 1);
        _OWORD *v17 = v19;
        v16 += 2;
        v17 += 2;
        v18 -= 4;
      }
      while (v18);
      if (v14 != (v14 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_9:
        uint64_t v20 = &v9[v12];
        do
        {
          uint64_t v21 = *v10++;
          *v8++ = v21;
        }
        while (v10 != v20);
      }
    }
  }
  else
  {
    *(void *)long long v3 = v3 + 16;
    *(void *)uint64_t v7 = v10;
    int v11 = *((_DWORD *)v3 + 2);
    *((_DWORD *)v3 + 2) = 1;
    *(_DWORD *)(v7 + 8) = v11;
  }
  int v22 = *((_DWORD *)v3 + 3);
  *((_DWORD *)v3 + 3) = 0;
  *(_DWORD *)(v7 + 12) = v22;
  uint64_t v23 = v6 + 88 * v5;
  unint64_t v24 = (void *)(v23 + 40);
  *(void *)(v23 + 24) = v23 + 40;
  uint64_t v25 = (char **)(v23 + 24);
  v25[1] = (char *)2;
  uint64_t v26 = v25 + 1;
  uint64_t v27 = (_DWORD *)v25 + 3;
  unsigned __int16 v28 = (char *)*((void *)v4 + 3);
  if (v28 == v4 + 40)
  {
    memcpy(v24, v28, 4 * *((unsigned int *)v4 + 9));
  }
  else
  {
    *((void *)v4 + 3) = v4 + 40;
    unsigned long long *v25 = v28;
    int v29 = *((_DWORD *)v4 + 8);
    *((_DWORD *)v4 + 8) = 2;
    _DWORD *v26 = v29;
  }
  int v30 = *((_DWORD *)v4 + 9);
  *((_DWORD *)v4 + 9) = 0;
  *uint64_t v27 = v30;
  uint64_t v31 = v6 + 88 * v5;
  __n128 result = (void *)(v31 + 64);
  *(void *)(v31 + 48) = v31 + 64;
  int8x16_t v33 = (char **)(v31 + 48);
  v33[1] = (char *)2;
  uint64_t v34 = v33 + 1;
  unsigned int v35 = (char *)*((void *)v4 + 6);
  if (v35 == v4 + 64)
  {
    __n128 result = memcpy(result, v35, 8 * *((unsigned int *)v4 + 15));
  }
  else
  {
    *((void *)v4 + 6) = v4 + 64;
    _DWORD *v33 = v35;
    int v36 = *((_DWORD *)v4 + 14);
    *((_DWORD *)v4 + 14) = 2;
    *uint64_t v34 = v36;
  }
  uint64_t v37 = v6 + 88 * v5;
  int v38 = *((_DWORD *)v4 + 15);
  *((_DWORD *)v4 + 15) = 0;
  *(_DWORD *)(v37 + 60) = v38;
  uint64_t v39 = *((void *)v4 + 10);
  *((void *)v4 + 10) = 0;
  *(void *)(v37 + 80) = v39;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

char *WTF::Vector<WGSL::OverloadCandidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unsigned int v5 = *(WGSL::OverloadCandidate **)a1;
  if (*(void *)a1 > a3
    || (uint64_t v6 = (WGSL::OverloadCandidate *)((char *)v5 + 88 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    unint64_t v14 = *(unsigned int *)(a1 + 8);
    unint64_t v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10) {
      unint64_t v16 = v15 + 1;
    }
    else {
      unint64_t v16 = 16;
    }
    if (v16 <= a2) {
      unint64_t v16 = a2;
    }
    if (v16 > v14)
    {
      if (v16 >= 0x2E8BA2F)
      {
        __break(0xC471u);
        JUMPOUT(0x1826BC794);
      }
      uint64_t v17 = (WGSL::OverloadCandidate *)((char *)v5 + 88 * *(unsigned int *)(a1 + 12));
      int v18 = 88 * v16;
      uint64_t v19 = WTF::fastMalloc((WTF *)(88 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF8) / 0x58;
      *(void *)a1 = v19;
      WTF::VectorMover<false,WGSL::OverloadCandidate>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WGSL::OverloadCandidate **)a1 == v5)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
    return (char *)a3;
  }
  else
  {
    unint64_t v7 = *(unsigned int *)(a1 + 8);
    unint64_t v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10) {
      unint64_t v9 = v8 + 1;
    }
    else {
      unint64_t v9 = 16;
    }
    if (v9 <= a2) {
      unint64_t v9 = a2;
    }
    if (v9 <= v7)
    {
      unint64_t v13 = *(WGSL::OverloadCandidate **)a1;
    }
    else
    {
      if (v9 >= 0x2E8BA2F)
      {
        __break(0xC471u);
        JUMPOUT(0x1826BC79CLL);
      }
      int v10 = 88 * v9;
      uint64_t v11 = WTF::fastMalloc((WTF *)(88 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x58;
      *(void *)a1 = v11;
      WTF::VectorMover<false,WGSL::OverloadCandidate>::move(v5, v6, v11);
      unint64_t v13 = *(WGSL::OverloadCandidate **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        unint64_t v13 = *(WGSL::OverloadCandidate **)a1;
      }
    }
    return (char *)v13 + 8 * ((uint64_t)(a3 - (void)v5) >> 3);
  }
}

void WTF::VectorMover<false,WGSL::OverloadCandidate>::move(WGSL::OverloadCandidate *this, WGSL::OverloadCandidate *a2, uint64_t a3)
{
  if (this != a2)
  {
    uint64_t v3 = a3;
    unsigned int v5 = this;
    uint64_t v6 = 0;
    uint64_t v7 = a3 + 16;
    while (1)
    {
      uint64_t v11 = (void *)(v3 + 16);
      *(void *)uint64_t v3 = v3 + 16;
      *(void *)(v3 + 8) = 1;
      uint64_t v12 = *(uint64_t **)v5;
      if (*(WGSL::OverloadCandidate **)v5 != (WGSL::OverloadCandidate *)((char *)v5 + 16))
      {
        *(void *)unsigned int v5 = (char *)v5 + 16;
        *(void *)uint64_t v3 = v12;
        int v13 = *((_DWORD *)v5 + 2);
        *((_DWORD *)v5 + 2) = 1;
        *(_DWORD *)(v3 + 8) = v13;
        goto LABEL_17;
      }
      uint64_t v14 = *((unsigned int *)v5 + 3);
      if (!v14) {
        goto LABEL_17;
      }
      unint64_t v15 = (v14 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v15 < 3) {
        break;
      }
      unint64_t v16 = *(uint64_t **)v5;
      if ((unint64_t)(v7 + 88 * v6 - (void)v12) < 0x20) {
        goto LABEL_15;
      }
      uint64_t v17 = 0;
      unint64_t v18 = v15 + 1;
      uint64_t v19 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      uint64_t v11 = (void *)((char *)v11 + v19 * 8);
      unint64_t v16 = &v12[v19];
      uint64_t v20 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v21 = v3 + v17 * 8;
        long long v22 = *(_OWORD *)&v12[v17 + 2];
        *(_OWORD *)(v21 + 16) = *(_OWORD *)&v12[v17];
        *(_OWORD *)(v21 + 32) = v22;
        v17 += 4;
        v20 -= 4;
      }
      while (v20);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_15;
      }
LABEL_17:
      int v25 = *((_DWORD *)v5 + 3);
      *((_DWORD *)v5 + 3) = 0;
      *(_DWORD *)(v3 + 12) = v25;
      *(void *)(v3 + 24) = v3 + 40;
      *(void *)(v3 + 32) = 2;
      uint64_t v26 = (char *)*((void *)v5 + 3);
      if (v26 == (char *)v5 + 40)
      {
        memcpy((void *)(v3 + 40), v26, 4 * *((unsigned int *)v5 + 9));
      }
      else
      {
        *((void *)v5 + 3) = (char *)v5 + 40;
        *(void *)(v3 + 24) = v26;
        int v27 = *((_DWORD *)v5 + 8);
        *((_DWORD *)v5 + 8) = 2;
        *(_DWORD *)(v3 + 32) = v27;
      }
      int v28 = *((_DWORD *)v5 + 9);
      *((_DWORD *)v5 + 9) = 0;
      *(_DWORD *)(v3 + 36) = v28;
      *(void *)(v3 + 48) = v3 + 64;
      *(void *)(v3 + 56) = 2;
      int v29 = (char *)*((void *)v5 + 6);
      if (v29 == (char *)v5 + 64)
      {
        memcpy((void *)(v3 + 64), v29, 8 * *((unsigned int *)v5 + 15));
      }
      else
      {
        *((void *)v5 + 6) = (char *)v5 + 64;
        *(void *)(v3 + 48) = v29;
        int v8 = *((_DWORD *)v5 + 14);
        *((_DWORD *)v5 + 14) = 2;
        *(_DWORD *)(v3 + 56) = v8;
      }
      int v9 = *((_DWORD *)v5 + 15);
      *((_DWORD *)v5 + 15) = 0;
      *(_DWORD *)(v3 + 60) = v9;
      uint64_t v10 = *((void *)v5 + 10);
      *((void *)v5 + 10) = 0;
      *(void *)(v3 + 80) = v10;
      WGSL::OverloadCandidate::~OverloadCandidate(v5, v29);
      v3 += 88;
      unsigned int v5 = (WGSL::OverloadCandidate *)((char *)v5 + 88);
      ++v6;
      if (v5 == a2) {
        return;
      }
    }
    unint64_t v16 = *(uint64_t **)v5;
LABEL_15:
    uint64_t v23 = &v12[v14];
    do
    {
      uint64_t v24 = *v16++;
      *v11++ = v24;
    }
    while (v16 != v23);
    goto LABEL_17;
  }
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::String const&,char>(uint64_t a1, long long *a2, int8x16_t *a3, uint64_t a4, uint64_t a5, char *a6)
{
  if (a4) {
    unint64_t v10 = a4 - 1;
  }
  else {
    unint64_t v10 = 0;
  }
  if (!a5)
  {
    unint64_t v11 = v10 >> 31;
    if (!(v10 >> 31)) {
      goto LABEL_7;
    }
LABEL_28:
    __break(0xC471u);
    goto LABEL_30;
  }
  *(_DWORD *)a5 += 2;
  if (v10 >> 31) {
    goto LABEL_28;
  }
  LODWORD(v11) = *(_DWORD *)(a5 + 4);
  if ((v11 & 0x80000000) != 0)
  {
LABEL_29:
    __break(0xC471u);
LABEL_30:
    JUMPOUT(0x1826BCB54);
  }
LABEL_7:
  BOOL v12 = __OFADD__(v11, 1);
  int v13 = v11 + 1;
  if (v12 || __OFADD__(v10, v13)) {
    goto LABEL_29;
  }
  BOOL v14 = !a5 || (*(unsigned char *)(a5 + 16) & 4) != 0;
  __n128 result = (_DWORD *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v21, (int)v10 + v13, v14, a3, v10, a5, *a6);
  if (!v21) {
    goto LABEL_29;
  }
  long long v22 = v21;
  long long v23 = *a2;
  uint64_t v16 = *(unsigned int *)(a1 + 132);
  if (v16 != *(_DWORD *)(a1 + 128))
  {
    uint64_t v20 = *(void *)(a1 + 120) + 24 * v16;
    *(void *)uint64_t v20 = v21;
    *(_OWORD *)(v20 + 8) = v23;
    ++*(_DWORD *)(a1 + 132);
    long long v22 = 0;
LABEL_20:
    if (!a5) {
      return result;
    }
    goto LABEL_21;
  }
  unint64_t v17 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v16 + 1, (unint64_t)&v22);
  uint64_t v18 = *(void *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  uint64_t v19 = *(void *)v17;
  *(void *)unint64_t v17 = 0;
  *(void *)uint64_t v18 = v19;
  *(_OWORD *)(v18 + 8) = *(_OWORD *)(v17 + 8);
  __n128 result = v22;
  ++*(_DWORD *)(a1 + 132);
  long long v22 = 0;
  if (!result) {
    goto LABEL_20;
  }
  if (*result == 2)
  {
    __n128 result = (_DWORD *)WTF::StringImpl::destroy();
    if (!a5) {
      return result;
    }
  }
  else
  {
    *result -= 2;
    if (!a5) {
      return result;
    }
  }
LABEL_21:
  if (*(_DWORD *)a5 == 2) {
    return (_DWORD *)WTF::StringImpl::destroy();
  }
  *(_DWORD *)a5 -= 2;
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(uint64_t a1, int a2, long long *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9 = a5 - 1;
  if (!a5) {
    unint64_t v9 = 0;
  }
  uint64_t v24 = a4;
  if (v9 >> 31)
  {
    __break(0xC471u);
    goto LABEL_30;
  }
  LODWORD(v25) = v9;
  unint64_t v10 = a7 - 1;
  if (!a7) {
    unint64_t v10 = 0;
  }
  uint64_t v28 = a6;
  if (v10 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826BCD38);
  }
  int v29 = v10;
  unint64_t v11 = a9 - 1;
  if (!a9) {
    unint64_t v11 = 0;
  }
  uint64_t v26 = a8;
  if (v11 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826BCD58);
  }
  int v27 = v11;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v24, (uint64_t)&v28, (uint64_t)&v26, &v23);
  unint64_t v15 = v23;
  if (!v23)
  {
    __break(0xC471u);
LABEL_30:
    JUMPOUT(0x1826BCD18);
  }
  long long v23 = 0;
  uint64_t v24 = v15;
  long long v25 = *a3;
  uint64_t v16 = *(unsigned int *)(a1 + 132);
  if (v16 != *(_DWORD *)(a1 + 128))
  {
    uint64_t v22 = *(void *)(a1 + 120) + 24 * v16;
    *(void *)uint64_t v22 = v15;
    *(_OWORD *)(v22 + 8) = v25;
    ++*(_DWORD *)(a1 + 132);
    uint64_t v24 = 0;
LABEL_17:
    __n128 result = v23;
    long long v23 = 0;
    if (!result) {
      goto LABEL_21;
    }
    goto LABEL_18;
  }
  unint64_t v17 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v16 + 1, (unint64_t)&v24);
  uint64_t v18 = *(void *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  uint64_t v19 = *(void *)v17;
  *(void *)unint64_t v17 = 0;
  *(void *)uint64_t v18 = v19;
  *(_OWORD *)(v18 + 8) = *(_OWORD *)(v17 + 8);
  uint64_t v20 = v24;
  ++*(_DWORD *)(a1 + 132);
  uint64_t v24 = 0;
  if (!v20) {
    goto LABEL_17;
  }
  if (*v20 != 2)
  {
    *v20 -= 2;
    __n128 result = v23;
    long long v23 = 0;
    if (!result) {
      goto LABEL_21;
    }
LABEL_18:
    if (*result == 2) {
      __n128 result = (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *result -= 2;
    }
    goto LABEL_21;
  }
  WTF::StringImpl::destroy();
  __n128 result = v23;
  long long v23 = 0;
  if (result) {
    goto LABEL_18;
  }
LABEL_21:
  if (a2) {
    *(void *)(a1 + 88) = *(void *)(*(void *)(a1 + 112) + 24);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(uint64_t result, unsigned int a2, int a3, int8x16_t *a4, unsigned int a5, uint64_t a6, char a7)
{
  BOOL v12 = (void *)result;
  if (!a3)
  {
    if (!a2) {
      goto LABEL_17;
    }
    if (a2 > 0x7FFFFFEF) {
      goto LABEL_16;
    }
    __n128 result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20));
    uint64_t v13 = v97;
    if (!v97) {
      goto LABEL_75;
    }
    unint64_t v23 = v97 + 20;
    *(_DWORD *)uint64_t v97 = 2;
    *(_DWORD *)(v97 + 4) = a2;
    *(void *)(v97 + 8) = v97 + 20;
    *(_DWORD *)(v97 + 16) = 0;
    uint64_t v24 = (_WORD *)(v97 + 20 + 2 * a5);
    if ((a5 & 0xFFFFFFC0) != 0)
    {
      unint64_t v25 = v23 + 2 * (a5 & 0xFFFFFFC0);
      long long v26 = 0uLL;
      do
      {
        v98.val[0] = *a4;
        int8x16_t v27 = a4[1];
        v100.val[0] = a4[2];
        int8x16_t v28 = a4[3];
        a4 += 4;
        int8x16_t v29 = v28;
        v100.val[1] = 0uLL;
        v102.val[0] = v27;
        v98.val[1] = 0uLL;
        int v30 = (char *)v23;
        vst2q_s8(v30, v98);
        v30 += 32;
        v102.val[1] = 0uLL;
        vst2q_s8(v30, v102);
        uint64_t v31 = (char *)(v23 + 64);
        vst2q_s8(v31, v100);
        int8x16_t v32 = (char *)(v23 + 96);
        vst2q_s8(v32, *(int8x16x2_t *)(&v26 - 1));
        v23 += 128;
      }
      while (v23 != v25);
      unint64_t v23 = v25;
    }
    if ((_WORD *)v23 != v24)
    {
      unint64_t v33 = v97 + 2 * a5 - v23 + 18;
      if (v33 < 0xE
        || (v23 < (unint64_t)a4->u64 + (v33 >> 1) + 1
          ? (BOOL v34 = (unint64_t)a4 >= (v33 & 0xFFFFFFFFFFFFFFFELL) + v23 + 2)
          : (BOOL v34 = 1),
            !v34))
      {
        uint64_t v37 = (_WORD *)v23;
        int v38 = a4;
        goto LABEL_33;
      }
      uint64_t v35 = (v33 >> 1) + 1;
      if (v33 >= 0x3E)
      {
        unint64_t v36 = v35 & 0xFFFFFFFFFFFFFFE0;
        long long v64 = (uint8x8_t *)&a4[1];
        uint64_t v65 = (uint16x8_t *)(v23 + 32);
        unint64_t v66 = v35 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          uint8x16_t v67 = *(uint8x16_t *)v64[-2].i8;
          uint16x8_t v68 = vmovl_u8(*v64);
          uint16x8_t v69 = vmovl_high_u8(*(uint8x16_t *)v64->i8);
          v65[-2] = vmovl_u8(*(uint8x8_t *)v67.i8);
          v65[-1] = vmovl_high_u8(v67);
          *uint64_t v65 = v68;
          v65[1] = v69;
          v65 += 4;
          v64 += 4;
          v66 -= 32;
        }
        while (v66);
        if (v35 == v36) {
          goto LABEL_34;
        }
        if ((v35 & 0x18) == 0)
        {
          int v38 = (int8x16_t *)((char *)a4 + v36);
          uint64_t v37 = (_WORD *)(v23 + 2 * v36);
          do
          {
LABEL_33:
            __int16 v39 = v38->u8[0];
            int v38 = (int8x16_t *)((char *)v38 + 1);
            *v37++ = v39;
          }
          while (v37 != v24);
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v36 = 0;
      }
      uint64_t v37 = (_WORD *)(v23 + 2 * (v35 & 0xFFFFFFFFFFFFFFF8));
      int v38 = (int8x16_t *)((char *)a4 + (v35 & 0xFFFFFFFFFFFFFFF8));
      uint64_t v70 = (uint8x8_t *)&a4->i8[v36];
      uint64_t v71 = (uint16x8_t *)(v23 + 2 * v36);
      unint64_t v72 = v36 - (v35 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint8x8_t v73 = *v70++;
        *v71++ = vmovl_u8(v73);
        v72 += 8;
      }
      while (v72);
      if (v35 != (v35 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_33;
      }
    }
LABEL_34:
    if (!a6)
    {
      uint64_t v42 = 0;
LABEL_74:
      v24[v42] = a7;
      goto LABEL_75;
    }
    int v40 = *(int8x16_t **)(a6 + 8);
    uint64_t v41 = *(unsigned int *)(a6 + 4);
    if ((*(unsigned char *)(a6 + 16) & 4) == 0)
    {
      if (v41)
      {
        if (v41 == 1) {
          *uint64_t v24 = v40->i16[0];
        }
        else {
          __n128 result = (uint64_t)memcpy((void *)(v97 + 20 + 2 * a5), v40, 2 * v41);
        }
      }
      goto LABEL_73;
    }
    uint64_t v43 = &v24[v41];
    if (v41 < 0x40)
    {
      unint64_t v44 = v97 + 20 + 2 * a5;
    }
    else
    {
      unint64_t v44 = (unint64_t)&v24[v41 & 0xFFFFFFC0];
      long long v45 = 0uLL;
      uint64_t v46 = v97 + 20 + 2 * a5;
      do
      {
        v99.val[0] = *v40;
        int8x16_t v47 = v40[1];
        v101.val[0] = v40[2];
        int8x16_t v48 = v40[3];
        v40 += 4;
        int8x16_t v49 = v48;
        v101.val[1] = 0uLL;
        v103.val[0] = v47;
        v99.val[1] = 0uLL;
        uint64_t v50 = (char *)v46;
        vst2q_s8(v50, v99);
        v50 += 32;
        v103.val[1] = 0uLL;
        vst2q_s8(v50, v103);
        uint64_t v51 = (char *)(v46 + 64);
        vst2q_s8(v51, v101);
        uint64_t v52 = (char *)(v46 + 96);
        vst2q_s8(v52, *(int8x16x2_t *)(&v45 - 1));
        v46 += 128;
      }
      while (v46 != v44);
    }
    if ((_WORD *)v44 == v43)
    {
LABEL_73:
      uint64_t v42 = *(unsigned int *)(a6 + 4);
      goto LABEL_74;
    }
    unint64_t v60 = v97 + 2 * (a5 + v41) - v44 + 18;
    if (v60 < 0xE
      || v44 < (unint64_t)v40->u64 + (v60 >> 1) + 1
      && (unint64_t)v40 < (v60 & 0xFFFFFFFFFFFFFFFELL) + v44 + 2)
    {
      char v61 = (_WORD *)v44;
      uint64_t v62 = v40;
      goto LABEL_68;
    }
    uint64_t v74 = (v60 >> 1) + 1;
    if (v60 >= 0x3E)
    {
      unint64_t v75 = v74 & 0xFFFFFFFFFFFFFFE0;
      char v87 = (uint8x8_t *)&v40[1];
      size_t v88 = (uint16x8_t *)(v44 + 32);
      unint64_t v89 = v74 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v90 = *(uint8x16_t *)v87[-2].i8;
        uint16x8_t v91 = vmovl_u8(*v87);
        uint16x8_t v92 = vmovl_high_u8(*(uint8x16_t *)v87->i8);
        v88[-2] = vmovl_u8(*(uint8x8_t *)v90.i8);
        v88[-1] = vmovl_high_u8(v90);
        uint16x8_t *v88 = v91;
        v88[1] = v92;
        v88 += 4;
        v87 += 4;
        v89 -= 32;
      }
      while (v89);
      if (v74 == v75) {
        goto LABEL_73;
      }
      if ((v74 & 0x18) == 0)
      {
        uint64_t v62 = (int8x16_t *)((char *)v40 + v75);
        char v61 = (_WORD *)(v44 + 2 * v75);
        do
        {
LABEL_68:
          __int16 v63 = v62->u8[0];
          uint64_t v62 = (int8x16_t *)((char *)v62 + 1);
          *v61++ = v63;
        }
        while (v61 != v43);
        goto LABEL_73;
      }
    }
    else
    {
      unint64_t v75 = 0;
    }
    char v61 = (_WORD *)(v44 + 2 * (v74 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v62 = (int8x16_t *)((char *)v40 + (v74 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v93 = (uint8x8_t *)&v40->i8[v75];
    uint64_t v94 = (uint16x8_t *)(v44 + 2 * v75);
    unint64_t v95 = v75 - (v74 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v96 = *v93++;
      *v94++ = vmovl_u8(v96);
      v95 += 8;
    }
    while (v95);
    if (v74 == (v74 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_73;
    }
    goto LABEL_68;
  }
  if (!a2)
  {
LABEL_17:
    uint64_t v13 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_75;
  }
  if ((a2 & 0x80000000) != 0)
  {
LABEL_16:
    uint64_t v13 = 0;
    goto LABEL_75;
  }
  __n128 result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
  uint64_t v13 = v97;
  if (v97)
  {
    BOOL v14 = (unsigned char *)(v97 + 20);
    *(_DWORD *)uint64_t v97 = 2;
    *(_DWORD *)(v97 + 4) = a2;
    *(void *)(v97 + 8) = v97 + 20;
    *(_DWORD *)(v97 + 16) = 4;
    if (a5)
    {
      if (a5 != 1)
      {
        __n128 result = (uint64_t)memcpy((void *)(v97 + 20), a4, a5);
        uint64_t v15 = a5;
        uint64_t v16 = &v14[a5];
        if (a6)
        {
LABEL_9:
          unint64_t v17 = *(int8x16_t **)(a6 + 8);
          size_t v18 = *(unsigned int *)(a6 + 4);
          if ((*(unsigned char *)(a6 + 16) & 4) != 0)
          {
            if (v18)
            {
              if (v18 == 1) {
                *uint64_t v16 = v17->i8[0];
              }
              else {
                __n128 result = (uint64_t)memcpy(v16, v17, v18);
              }
            }
            goto LABEL_71;
          }
          uint64_t v19 = &v16[v18];
          if (v18 < 0x10)
          {
            unint64_t v20 = (unint64_t)v16;
          }
          else
          {
            unint64_t v20 = (unint64_t)&v16[v18 & 0xFFFFFFF0];
            uint64_t v21 = (unsigned long long *)v16;
            do
            {
              unsigned long long v22 = (unsigned __int128)vld2q_s8(v17->i8);
              v17 += 2;
              *v21++ = v22;
            }
            while (v21 != (unsigned long long *)v20);
          }
          if ((unsigned char *)v20 == v19)
          {
LABEL_71:
            v16[*(unsigned int *)(a6 + 4)] = a7;
            goto LABEL_75;
          }
          size_t v53 = v97 + v18 + v15;
          unint64_t v54 = v53 - v20 + 20;
          if (v54 < 8
            || (v20 < (unint64_t)&v17[2].u64[1] + 2 * v53 + -2 * v20
              ? (BOOL v55 = (unint64_t)v17 >= v53 + 20)
              : (BOOL v55 = 1),
                !v55))
          {
            long long v57 = (unsigned char *)v20;
            int8x16_t v58 = v17;
            goto LABEL_60;
          }
          if (v54 >= 0x20)
          {
            unint64_t v56 = v54 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v76 = v17 + 2;
            uint64_t v77 = (int8x16_t *)(v20 + 16);
            unint64_t v78 = v54 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              int8x16_t v80 = v76[-2];
              int8x16_t v79 = v76[-1];
              int8x16_t v82 = *v76;
              int8x16_t v81 = v76[1];
              v76 += 4;
              v77[-1] = vuzp1q_s8(v80, v79);
              *uint64_t v77 = vuzp1q_s8(v82, v81);
              v77 += 2;
              v78 -= 32;
            }
            while (v78);
            if (v54 == v56) {
              goto LABEL_71;
            }
            if ((v54 & 0x18) == 0)
            {
              int8x16_t v58 = (int8x16_t *)((char *)v17 + 2 * v56);
              long long v57 = (unsigned char *)(v20 + v56);
              do
              {
LABEL_60:
                char v59 = v58->i8[0];
                int8x16_t v58 = (int8x16_t *)((char *)v58 + 2);
                *v57++ = v59;
              }
              while (v57 != v19);
              goto LABEL_71;
            }
          }
          else
          {
            unint64_t v56 = 0;
          }
          long long v57 = (unsigned char *)(v20 + (v54 & 0xFFFFFFFFFFFFFFF8));
          int8x16_t v58 = (int8x16_t *)((char *)v17 + 2 * (v54 & 0xFFFFFFFFFFFFFFF8));
          unint64_t v83 = (int16x8_t *)((char *)v17 + 2 * v56);
          unint64_t v84 = (int8x8_t *)(v20 + v56);
          unint64_t v85 = v56 - (v54 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            int16x8_t v86 = *v83++;
            *v84++ = vmovn_s16(v86);
            v85 += 8;
          }
          while (v85);
          if (v54 == (v54 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_71;
          }
          goto LABEL_60;
        }
        goto LABEL_40;
      }
      *BOOL v14 = a4->i8[0];
    }
    uint64_t v15 = a5;
    uint64_t v16 = &v14[a5];
    if (a6) {
      goto LABEL_9;
    }
LABEL_40:
    *uint64_t v16 = a7;
  }
LABEL_75:
  *BOOL v12 = v13;
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral&,char,WTF::String const&,WTF::String,char,WTF::String,char>(uint64_t a1, long long *a2, int8x16_t *a3, uint64_t a4, int8x16_t *a5, uint64_t a6, char a7, uint64_t a8, uint64_t *a9, char *a10, uint64_t *a11, char *a12)
{
  if (a8) {
    *(_DWORD *)a8 += 2;
  }
  uint64_t v17 = *a9;
  *a9 = 0;
  char v18 = *a10;
  uint64_t v19 = *a11;
  *a11 = 0;
  if (a4) {
    unint64_t v20 = a4 - 1;
  }
  else {
    unint64_t v20 = 0;
  }
  if (v20 >> 31)
  {
    __break(0xC471u);
    goto LABEL_68;
  }
  unint64_t v21 = a6 - 1;
  if (!a6) {
    unint64_t v21 = 0;
  }
  if (v21 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826BD5E4);
  }
  if (a8)
  {
    int v22 = *(_DWORD *)(a8 + 4);
    if (v17) {
      goto LABEL_12;
    }
LABEL_18:
    int v23 = 0;
    char v24 = *a12;
    if (v19) {
      goto LABEL_13;
    }
LABEL_19:
    int v27 = 1;
    if (!__OFSUB__(a6, 1)) {
      goto LABEL_20;
    }
LABEL_67:
    __break(0xC471u);
LABEL_68:
    JUMPOUT(0x1826BD5C4);
  }
  int v22 = 0;
  if (!v17) {
    goto LABEL_18;
  }
LABEL_12:
  int v23 = *(_DWORD *)(v17 + 4);
  char v24 = *a12;
  if (!v19) {
    goto LABEL_19;
  }
LABEL_13:
  int v25 = *(_DWORD *)(v19 + 4);
  if (v25 < 0) {
    goto LABEL_67;
  }
  BOOL v26 = __OFADD__(v25, 1);
  int v27 = v25 + 1;
  if (v26) {
    goto LABEL_67;
  }
LABEL_20:
  BOOL v26 = __OFADD__(v27, 1);
  int v28 = v27 + 1;
  char v29 = v26;
  if (v23 < 0 || (v29 & 1) != 0) {
    goto LABEL_67;
  }
  BOOL v26 = __OFADD__(v23, v28);
  int v30 = v23 + v28;
  BOOL v31 = v26;
  if (v22 < 0) {
    goto LABEL_67;
  }
  if (v31) {
    goto LABEL_67;
  }
  BOOL v26 = __OFADD__(v22, v30);
  int v32 = v22 + v30;
  if (v26) {
    goto LABEL_67;
  }
  BOOL v26 = __OFADD__(v32, 1);
  int v33 = v32 + 1;
  if (v26) {
    goto LABEL_67;
  }
  BOOL v26 = __OFADD__(v21, v33);
  int v34 = v21 + v33;
  if (v26 || __OFADD__(v20, v34)) {
    goto LABEL_67;
  }
  BOOL v35 = (!a8 || (*(unsigned char *)(a8 + 16) & 4) != 0)
     && (!v17 || (*(unsigned char *)(v17 + 16) & 4) != 0)
     && (!v19 || (*(unsigned char *)(v19 + 16) & 4) != 0);
  __n128 result = (_DWORD *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v42, (int)v20 + v34, v35, a3, v20, a5, v21, a7, a8, v17, v18, v19, v24);
  if (!v42) {
    goto LABEL_67;
  }
  long long v43 = *a2;
  uint64_t v37 = *(unsigned int *)(a1 + 132);
  if (v37 != *(_DWORD *)(a1 + 128))
  {
    uint64_t v41 = *(void *)(a1 + 120) + 24 * v37;
    *(void *)uint64_t v41 = v42;
    *(_OWORD *)(v41 + 8) = v43;
    ++*(_DWORD *)(a1 + 132);
    uint64_t v42 = 0;
LABEL_49:
    if (!v19) {
      goto LABEL_53;
    }
    goto LABEL_50;
  }
  unint64_t v38 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v37 + 1, (unint64_t)&v42);
  uint64_t v39 = *(void *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  uint64_t v40 = *(void *)v38;
  *(void *)unint64_t v38 = 0;
  *(void *)uint64_t v39 = v40;
  *(_OWORD *)(v39 + 8) = *(_OWORD *)(v38 + 8);
  __n128 result = v42;
  ++*(_DWORD *)(a1 + 132);
  uint64_t v42 = 0;
  if (!result) {
    goto LABEL_49;
  }
  if (*result == 2)
  {
    __n128 result = (_DWORD *)WTF::StringImpl::destroy();
    if (!v19) {
      goto LABEL_53;
    }
  }
  else
  {
    *result -= 2;
    if (!v19) {
      goto LABEL_53;
    }
  }
LABEL_50:
  if (*(_DWORD *)v19 == 2) {
    __n128 result = (_DWORD *)WTF::StringImpl::destroy();
  }
  else {
    *(_DWORD *)v19 -= 2;
  }
LABEL_53:
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      __n128 result = (_DWORD *)WTF::StringImpl::destroy();
      if (!a8) {
        goto LABEL_62;
      }
      goto LABEL_59;
    }
    *(_DWORD *)v17 -= 2;
  }
  if (!a8) {
    goto LABEL_62;
  }
LABEL_59:
  if (*(_DWORD *)a8 == 2) {
    __n128 result = (_DWORD *)WTF::StringImpl::destroy();
  }
  else {
    *(_DWORD *)a8 -= 2;
  }
LABEL_62:
  *(void *)(a1 + 88) = *(void *)(*(void *)(a1 + 112) + 24);
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(uint64_t result, unsigned int a2, int a3, int8x16_t *a4, int a5, int8x16_t *a6, int a7, char a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  LODWORD(v13) = a7;
  LODWORD(v15) = a5;
  char v18 = (void *)result;
  if (!a3)
  {
    if (!a2) {
      goto LABEL_18;
    }
    if (a2 > 0x7FFFFFEF) {
      goto LABEL_17;
    }
    __n128 result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20));
    uint64_t v20 = v261;
    if (!v261) {
      goto LABEL_194;
    }
    unint64_t v34 = v261 + 20;
    *(_DWORD *)uint64_t v261 = 2;
    *(_DWORD *)(v261 + 4) = a2;
    *(void *)(v261 + 8) = v261 + 20;
    *(_DWORD *)(v261 + 16) = 0;
    unint64_t v35 = v261 + 20 + 2 * v15;
    if ((v15 & 0xFFFFFFC0) != 0)
    {
      unint64_t v36 = v34 + 2 * (v15 & 0xFFFFFFC0);
      long long v37 = 0uLL;
      uint64_t v39 = a10;
      uint64_t v38 = a12;
      __n128 result = a9;
      do
      {
        v262.val[0] = *a4;
        int8x16_t v40 = a4[1];
        v267.val[0] = a4[2];
        int8x16_t v41 = a4[3];
        a4 += 4;
        int8x16_t v42 = v41;
        v267.val[1] = 0uLL;
        v272.val[0] = v40;
        v262.val[1] = 0uLL;
        long long v43 = (char *)v34;
        vst2q_s8(v43, v262);
        v43 += 32;
        v272.val[1] = 0uLL;
        vst2q_s8(v43, v272);
        unint64_t v44 = (char *)(v34 + 64);
        vst2q_s8(v44, v267);
        long long v45 = (char *)(v34 + 96);
        vst2q_s8(v45, *(int8x16x2_t *)(&v37 - 1));
        v34 += 128;
      }
      while (v34 != v36);
      unint64_t v34 = v36;
      uint64_t v15 = v15;
      if (v36 == v35)
      {
LABEL_47:
        int8x16_t v58 = (_WORD *)(v35 + 2 * v13);
        if ((v13 & 0xFFFFFFC0) != 0)
        {
          unint64_t v59 = v35 + 2 * (v13 & 0xFFFFFFC0);
          long long v60 = 0uLL;
          do
          {
            v263.val[0] = *a6;
            int8x16_t v61 = a6[1];
            v268.val[0] = a6[2];
            int8x16_t v62 = a6[3];
            a6 += 4;
            int8x16_t v63 = v62;
            v268.val[1] = 0uLL;
            v273.val[0] = v61;
            v263.val[1] = 0uLL;
            long long v64 = (char *)v35;
            vst2q_s8(v64, v263);
            v64 += 32;
            v273.val[1] = 0uLL;
            vst2q_s8(v64, v273);
            uint64_t v65 = (char *)(v35 + 64);
            vst2q_s8(v65, v268);
            unint64_t v66 = (char *)(v35 + 96);
            vst2q_s8(v66, *(int8x16x2_t *)(&v60 - 1));
            v35 += 128;
          }
          while (v35 != v59);
          unint64_t v35 = v59;
        }
        if ((_WORD *)v35 != v58)
        {
          unint64_t v67 = v261 + 2 * (v15 + v13) - v35 + 18;
          if (v67 < 0xE
            || v35 < (unint64_t)a6->u64 + (v67 >> 1) + 1
            && (unint64_t)a6 < (v67 & 0xFFFFFFFFFFFFFFFELL) + v35 + 2)
          {
            uint16x8_t v68 = (_WORD *)v35;
            uint16x8_t v69 = a6;
            goto LABEL_56;
          }
          uint64_t v97 = (v67 >> 1) + 1;
          if (v67 >= 0x3E)
          {
            unint64_t v98 = v97 & 0xFFFFFFFFFFFFFFE0;
            unint64_t v187 = (uint8x8_t *)&a6[1];
            unint64_t v188 = (uint16x8_t *)(v35 + 32);
            unint64_t v189 = v97 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              uint8x16_t v190 = *(uint8x16_t *)v187[-2].i8;
              uint16x8_t v191 = vmovl_u8(*v187);
              uint16x8_t v192 = vmovl_high_u8(*(uint8x16_t *)v187->i8);
              v188[-2] = vmovl_u8(*(uint8x8_t *)v190.i8);
              v188[-1] = vmovl_high_u8(v190);
              uint16x8_t *v188 = v191;
              v188[1] = v192;
              v188 += 4;
              v187 += 4;
              v189 -= 32;
            }
            while (v189);
            if (v97 == v98) {
              goto LABEL_57;
            }
            if ((v97 & 0x18) == 0)
            {
              uint16x8_t v69 = (int8x16_t *)((char *)a6 + v98);
              uint16x8_t v68 = (_WORD *)(v35 + 2 * v98);
              do
              {
LABEL_56:
                __int16 v70 = v69->u8[0];
                uint16x8_t v69 = (int8x16_t *)((char *)v69 + 1);
                *v68++ = v70;
              }
              while (v68 != v58);
              goto LABEL_57;
            }
          }
          else
          {
            unint64_t v98 = 0;
          }
          uint16x8_t v68 = (_WORD *)(v35 + 2 * (v97 & 0xFFFFFFFFFFFFFFF8));
          uint16x8_t v69 = (int8x16_t *)((char *)a6 + (v97 & 0xFFFFFFFFFFFFFFF8));
          unint64_t v193 = (uint8x8_t *)&a6->i8[v98];
          int8x16_t v194 = (uint16x8_t *)(v35 + 2 * v98);
          unint64_t v195 = v98 - (v97 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint8x8_t v196 = *v193++;
            *v194++ = vmovl_u8(v196);
            v195 += 8;
          }
          while (v195);
          if (v97 != (v97 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_56;
          }
        }
LABEL_57:
        *int8x16_t v58 = a8;
        uint64_t v71 = v58 + 1;
        if (!result)
        {
          char v74 = a11;
          uint64_t v75 = 0;
          uint64_t v76 = v71;
          if (v39) {
            goto LABEL_147;
          }
          goto LABEL_63;
        }
        unint64_t v72 = *(int8x16_t **)(result + 8);
        uint64_t v73 = *(unsigned int *)(result + 4);
        if ((*(unsigned char *)(result + 16) & 4) == 0)
        {
          if (v73)
          {
            if (v73 == 1)
            {
              _WORD *v71 = v72->i16[0];
            }
            else
            {
              memcpy(v71, v72, 2 * v73);
              uint64_t v20 = v261;
              __n128 result = a9;
              uint64_t v39 = a10;
              uint64_t v38 = a12;
            }
          }
LABEL_146:
          char v74 = a11;
          uint64_t v75 = *(unsigned int *)(result + 4);
          uint64_t v76 = &v71[v75];
          if (v39)
          {
LABEL_147:
            __int16 v136 = *(int8x16_t **)(v39 + 8);
            uint64_t v137 = *(unsigned int *)(v39 + 4);
            if ((*(unsigned char *)(v39 + 16) & 4) == 0)
            {
              if (v137)
              {
                if (v137 == 1)
                {
                  *uint64_t v76 = v136->i16[0];
                }
                else
                {
                  uint64_t v155 = v20;
                  __n128 result = (uint64_t)memcpy(v76, v136, 2 * v137);
                  uint64_t v20 = v155;
                  uint64_t v39 = a10;
                  uint64_t v38 = a12;
                }
              }
LABEL_169:
              uint64_t v77 = *(unsigned int *)(v39 + 4);
              uint64_t v156 = &v76[v77];
              *uint64_t v156 = v74;
              unint64_t v78 = v156 + 1;
              if (v38)
              {
LABEL_170:
                uint64_t v157 = *(int8x16_t **)(v38 + 8);
                uint64_t v158 = *(unsigned int *)(v38 + 4);
                if ((*(unsigned char *)(v38 + 16) & 4) == 0)
                {
                  if (v158)
                  {
                    if (v158 == 1)
                    {
                      *unint64_t v78 = v157->i16[0];
                    }
                    else
                    {
                      uint64_t v176 = v20;
                      __n128 result = (uint64_t)memcpy(v78, v157, 2 * v158);
                      uint64_t v20 = v176;
                      uint64_t v38 = a12;
                    }
                  }
                  goto LABEL_192;
                }
                uint64_t v159 = &v78[v158];
                if (v158 < 0x40)
                {
                  unint64_t v160 = (unint64_t)v78;
                }
                else
                {
                  unint64_t v160 = (unint64_t)&v78[v158 & 0xFFFFFFC0];
                  long long v161 = 0uLL;
                  long long v162 = (char *)v78;
                  do
                  {
                    v266.val[0] = *v157;
                    int8x16_t v163 = v157[1];
                    v271.val[0] = v157[2];
                    int8x16_t v164 = v157[3];
                    v157 += 4;
                    int8x16_t v165 = v164;
                    v271.val[1] = 0uLL;
                    v276.val[0] = v163;
                    v266.val[1] = 0uLL;
                    long long v166 = v162;
                    vst2q_s8(v166, v266);
                    v166 += 32;
                    v276.val[1] = 0uLL;
                    vst2q_s8(v166, v276);
                    long long v167 = v162 + 64;
                    vst2q_s8(v167, v271);
                    unint64_t v168 = v162 + 96;
                    vst2q_s8(v168, *(int8x16x2_t *)(&v161 - 1));
                    v162 += 128;
                  }
                  while (v162 != (char *)v160);
                }
                if ((_WORD *)v160 == v159)
                {
LABEL_192:
                  uint64_t v79 = *(unsigned int *)(v38 + 4);
                  goto LABEL_193;
                }
                unint64_t v169 = v20 + 2 * (v75 + v77 + v158 + v15 + v13) - v160 + 22;
                if (v169 < 0xE
                  || (v160 < (unint64_t)v157->u64 + (v169 >> 1) + 1
                    ? (BOOL v170 = (unint64_t)v157 >= (v169 & 0xFFFFFFFFFFFFFFFELL) + v160 + 2)
                    : (BOOL v170 = 1),
                      !v170))
                {
                  long long v173 = (_WORD *)v160;
                  unint64_t v174 = v157;
                  goto LABEL_189;
                }
                uint64_t v171 = (v169 >> 1) + 1;
                if (v169 >= 0x3E)
                {
                  unint64_t v172 = v171 & 0xFFFFFFFFFFFFFFE0;
                  int8x16x2_t v250 = (uint8x8_t *)&v157[1];
                  int8x16x2_t v251 = (uint16x8_t *)(v160 + 32);
                  unint64_t v252 = v171 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    uint8x16_t v253 = *(uint8x16_t *)v250[-2].i8;
                    uint16x8_t v254 = vmovl_u8(*v250);
                    uint16x8_t v255 = vmovl_high_u8(*(uint8x16_t *)v250->i8);
                    v251[-2] = vmovl_u8(*(uint8x8_t *)v253.i8);
                    v251[-1] = vmovl_high_u8(v253);
                    *int8x16x2_t v251 = v254;
                    v251[1] = v255;
                    v251 += 4;
                    v250 += 4;
                    v252 -= 32;
                  }
                  while (v252);
                  if (v171 == v172) {
                    goto LABEL_192;
                  }
                  if ((v171 & 0x18) == 0)
                  {
                    unint64_t v174 = (int8x16_t *)((char *)v157 + v172);
                    long long v173 = (_WORD *)(v160 + 2 * v172);
                    do
                    {
LABEL_189:
                      __int16 v175 = v174->u8[0];
                      unint64_t v174 = (int8x16_t *)((char *)v174 + 1);
                      *v173++ = v175;
                    }
                    while (v173 != v159);
                    goto LABEL_192;
                  }
                }
                else
                {
                  unint64_t v172 = 0;
                }
                long long v173 = (_WORD *)(v160 + 2 * (v171 & 0xFFFFFFFFFFFFFFF8));
                unint64_t v174 = (int8x16_t *)((char *)v157 + (v171 & 0xFFFFFFFFFFFFFFF8));
                int v256 = (uint8x8_t *)&v157->i8[v172];
                int v257 = (uint16x8_t *)(v160 + 2 * v172);
                unint64_t v258 = v172 - (v171 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint8x8_t v259 = *v256++;
                  *v257++ = vmovl_u8(v259);
                  v258 += 8;
                }
                while (v258);
                if (v171 == (v171 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_192;
                }
                goto LABEL_189;
              }
LABEL_64:
              uint64_t v79 = 0;
LABEL_193:
              v78[v79] = a13;
              goto LABEL_194;
            }
            uint64_t v138 = &v76[v137];
            if (v137 < 0x40)
            {
              unint64_t v139 = (unint64_t)v76;
            }
            else
            {
              unint64_t v139 = (unint64_t)&v76[v137 & 0xFFFFFFC0];
              long long v140 = 0uLL;
              unint64_t v141 = (char *)v76;
              do
              {
                v265.val[0] = *v136;
                int8x16_t v142 = v136[1];
                v270.val[0] = v136[2];
                int8x16_t v143 = v136[3];
                v136 += 4;
                int8x16_t v144 = v143;
                v270.val[1] = 0uLL;
                v275.val[0] = v142;
                v265.val[1] = 0uLL;
                int8x16_t v145 = v141;
                vst2q_s8(v145, v265);
                v145 += 32;
                v275.val[1] = 0uLL;
                vst2q_s8(v145, v275);
                int8x16_t v146 = v141 + 64;
                vst2q_s8(v146, v270);
                unint64_t v147 = v141 + 96;
                vst2q_s8(v147, *(int8x16x2_t *)(&v140 - 1));
                v141 += 128;
              }
              while (v141 != (char *)v139);
            }
            if ((_WORD *)v139 == v138) {
              goto LABEL_169;
            }
            unint64_t v148 = v20 + 2 * (v75 + v137 + v15 + v13) - v139 + 20;
            if (v148 < 0xE
              || (v139 < (unint64_t)v136->u64 + (v148 >> 1) + 1
                ? (BOOL v149 = (unint64_t)v136 >= (v148 & 0xFFFFFFFFFFFFFFFELL) + v139 + 2)
                : (BOOL v149 = 1),
                  !v149))
            {
              uint64_t v152 = (_WORD *)v139;
              unint64_t v153 = v136;
              goto LABEL_166;
            }
            uint64_t v150 = (v148 >> 1) + 1;
            if (v148 >= 0x3E)
            {
              unint64_t v151 = v150 & 0xFFFFFFFFFFFFFFE0;
              int v240 = (uint8x8_t *)&v136[1];
              int8x16x2_t v241 = (uint16x8_t *)(v139 + 32);
              unint64_t v242 = v150 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                uint8x16_t v243 = *(uint8x16_t *)v240[-2].i8;
                uint16x8_t v244 = vmovl_u8(*v240);
                uint16x8_t v245 = vmovl_high_u8(*(uint8x16_t *)v240->i8);
                v241[-2] = vmovl_u8(*(uint8x8_t *)v243.i8);
                v241[-1] = vmovl_high_u8(v243);
                uint16x8_t *v241 = v244;
                v241[1] = v245;
                v241 += 4;
                v240 += 4;
                v242 -= 32;
              }
              while (v242);
              if (v150 == v151) {
                goto LABEL_169;
              }
              if ((v150 & 0x18) == 0)
              {
                unint64_t v153 = (int8x16_t *)((char *)v136 + v151);
                uint64_t v152 = (_WORD *)(v139 + 2 * v151);
                goto LABEL_166;
              }
            }
            else
            {
              unint64_t v151 = 0;
            }
            uint64_t v152 = (_WORD *)(v139 + 2 * (v150 & 0xFFFFFFFFFFFFFFF8));
            unint64_t v153 = (int8x16_t *)((char *)v136 + (v150 & 0xFFFFFFFFFFFFFFF8));
            int8x16x2_t v246 = (uint8x8_t *)&v136->i8[v151];
            int8x16x2_t v247 = (uint16x8_t *)(v139 + 2 * v151);
            unint64_t v248 = v151 - (v150 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint8x8_t v249 = *v246++;
              *v247++ = vmovl_u8(v249);
              v248 += 8;
            }
            while (v248);
            if (v150 == (v150 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_169;
            }
            do
            {
LABEL_166:
              __int16 v154 = v153->u8[0];
              unint64_t v153 = (int8x16_t *)((char *)v153 + 1);
              *v152++ = v154;
            }
            while (v152 != v138);
            goto LABEL_169;
          }
LABEL_63:
          uint64_t v77 = 0;
          *uint64_t v76 = v74;
          unint64_t v78 = v76 + 1;
          if (v38) {
            goto LABEL_170;
          }
          goto LABEL_64;
        }
        int8x16_t v80 = &v71[v73];
        if (v73 < 0x40)
        {
          unint64_t v81 = (unint64_t)v71;
        }
        else
        {
          unint64_t v81 = (unint64_t)&v71[v73 & 0xFFFFFFC0];
          long long v82 = 0uLL;
          unint64_t v83 = (char *)v71;
          do
          {
            v264.val[0] = *v72;
            int8x16_t v84 = v72[1];
            v269.val[0] = v72[2];
            int8x16_t v85 = v72[3];
            v72 += 4;
            int8x16_t v86 = v85;
            v269.val[1] = 0uLL;
            v274.val[0] = v84;
            v264.val[1] = 0uLL;
            char v87 = v83;
            vst2q_s8(v87, v264);
            v87 += 32;
            v274.val[1] = 0uLL;
            vst2q_s8(v87, v274);
            size_t v88 = v83 + 64;
            vst2q_s8(v88, v269);
            unint64_t v89 = v83 + 96;
            vst2q_s8(v89, *(int8x16x2_t *)(&v82 - 1));
            v83 += 128;
          }
          while (v83 != (char *)v81);
        }
        if ((_WORD *)v81 == v80) {
          goto LABEL_146;
        }
        unint64_t v99 = v261 + 2 * (v15 + v73 + v13) - v81 + 20;
        if (v99 < 0xE
          || (v81 < (unint64_t)v72->u64 + (v99 >> 1) + 1
            ? (BOOL v100 = (unint64_t)v72 >= (v99 & 0xFFFFFFFFFFFFFFFELL) + v81 + 2)
            : (BOOL v100 = 1),
              !v100))
        {
          int8x16x2_t v103 = (_WORD *)v81;
          uint64_t v104 = v72;
          goto LABEL_95;
        }
        uint64_t v101 = (v99 >> 1) + 1;
        if (v99 >= 0x3E)
        {
          unint64_t v102 = v101 & 0xFFFFFFFFFFFFFFE0;
          uint64_t v230 = (uint8x8_t *)&v72[1];
          unint64_t v231 = (uint16x8_t *)(v81 + 32);
          unint64_t v232 = v101 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            uint8x16_t v233 = *(uint8x16_t *)v230[-2].i8;
            uint16x8_t v234 = vmovl_u8(*v230);
            uint16x8_t v235 = vmovl_high_u8(*(uint8x16_t *)v230->i8);
            v231[-2] = vmovl_u8(*(uint8x8_t *)v233.i8);
            v231[-1] = vmovl_high_u8(v233);
            *unint64_t v231 = v234;
            v231[1] = v235;
            v231 += 4;
            v230 += 4;
            v232 -= 32;
          }
          while (v232);
          if (v101 == v102) {
            goto LABEL_146;
          }
          if ((v101 & 0x18) == 0)
          {
            uint64_t v104 = (int8x16_t *)((char *)v72 + v102);
            int8x16x2_t v103 = (_WORD *)(v81 + 2 * v102);
            goto LABEL_95;
          }
        }
        else
        {
          unint64_t v102 = 0;
        }
        int8x16x2_t v103 = (_WORD *)(v81 + 2 * (v101 & 0xFFFFFFFFFFFFFFF8));
        uint64_t v104 = (int8x16_t *)((char *)v72 + (v101 & 0xFFFFFFFFFFFFFFF8));
        long long v236 = (uint8x8_t *)&v72->i8[v102];
        uint64_t v237 = (uint16x8_t *)(v81 + 2 * v102);
        unint64_t v238 = v102 - (v101 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint8x8_t v239 = *v236++;
          *v237++ = vmovl_u8(v239);
          v238 += 8;
        }
        while (v238);
        if (v101 == (v101 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_146;
        }
        do
        {
LABEL_95:
          __int16 v105 = v104->u8[0];
          uint64_t v104 = (int8x16_t *)((char *)v104 + 1);
          *v103++ = v105;
        }
        while (v103 != v80);
        goto LABEL_146;
      }
    }
    else
    {
      uint64_t v39 = a10;
      uint64_t v38 = a12;
      __n128 result = a9;
      uint64_t v15 = v15;
      if (v34 == v35) {
        goto LABEL_47;
      }
    }
    unint64_t v51 = v261 + 2 * v15 - v34 + 18;
    if (v51 < 0xE
      || (v34 < (unint64_t)a4->u64 + (v51 >> 1) + 1
        ? (BOOL v52 = (unint64_t)a4 >= (v51 & 0xFFFFFFFFFFFFFFFELL) + v34 + 2)
        : (BOOL v52 = 1),
          !v52))
    {
      BOOL v55 = (_WORD *)v34;
      unint64_t v56 = a4;
      goto LABEL_46;
    }
    uint64_t v53 = (v51 >> 1) + 1;
    if (v51 >= 0x3E)
    {
      unint64_t v54 = v53 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v177 = (uint8x8_t *)&a4[1];
      unint64_t v178 = (uint16x8_t *)(v34 + 32);
      unint64_t v179 = v53 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v180 = *(uint8x16_t *)v177[-2].i8;
        uint16x8_t v181 = vmovl_u8(*v177);
        uint16x8_t v182 = vmovl_high_u8(*(uint8x16_t *)v177->i8);
        v178[-2] = vmovl_u8(*(uint8x8_t *)v180.i8);
        v178[-1] = vmovl_high_u8(v180);
        *unint64_t v178 = v181;
        v178[1] = v182;
        v178 += 4;
        v177 += 4;
        v179 -= 32;
      }
      while (v179);
      if (v53 == v54) {
        goto LABEL_47;
      }
      if ((v53 & 0x18) == 0)
      {
        unint64_t v56 = (int8x16_t *)((char *)a4 + v54);
        BOOL v55 = (_WORD *)(v34 + 2 * v54);
        goto LABEL_46;
      }
    }
    else
    {
      unint64_t v54 = 0;
    }
    BOOL v55 = (_WORD *)(v34 + 2 * (v53 & 0xFFFFFFFFFFFFFFF8));
    unint64_t v56 = (int8x16_t *)((char *)a4 + (v53 & 0xFFFFFFFFFFFFFFF8));
    int8x16_t v183 = (uint8x8_t *)&a4->i8[v54];
    unint64_t v184 = (uint16x8_t *)(v34 + 2 * v54);
    unint64_t v185 = v54 - (v53 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v186 = *v183++;
      *v184++ = vmovl_u8(v186);
      v185 += 8;
    }
    while (v185);
    if (v53 == (v53 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_47;
    }
    do
    {
LABEL_46:
      __int16 v57 = v56->u8[0];
      unint64_t v56 = (int8x16_t *)((char *)v56 + 1);
      *v55++ = v57;
    }
    while (v55 != (_WORD *)v35);
    goto LABEL_47;
  }
  if (!a2)
  {
LABEL_18:
    uint64_t v20 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_194;
  }
  if ((a2 & 0x80000000) != 0)
  {
LABEL_17:
    uint64_t v20 = 0;
    goto LABEL_194;
  }
  __n128 result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
  uint64_t v20 = v261;
  if (v261)
  {
    unint64_t v21 = v18;
    int v22 = (unsigned char *)(v261 + 20);
    *(_DWORD *)uint64_t v261 = 2;
    *(_DWORD *)(v261 + 4) = a2;
    *(void *)(v261 + 8) = v261 + 20;
    *(_DWORD *)(v261 + 16) = 4;
    uint64_t v24 = a10;
    uint64_t v23 = a12;
    __n128 result = a9;
    if (v15)
    {
      if (v15 != 1)
      {
        memcpy((void *)(v261 + 20), a4, v15);
        uint64_t v20 = v261;
        __n128 result = a9;
        uint64_t v24 = a10;
        uint64_t v23 = a12;
        uint64_t v15 = v15;
        int v25 = &v22[v15];
        char v18 = v21;
        char v26 = a13;
        if (!v13)
        {
LABEL_9:
          uint64_t v13 = v13;
          v25[v13] = a8;
          int v27 = &v25[v13 + 1];
          if (result) {
            goto LABEL_10;
          }
LABEL_30:
          uint64_t v47 = 0;
          int8x16_t v48 = v27;
          if (v24) {
            goto LABEL_99;
          }
          goto LABEL_31;
        }
LABEL_26:
        if (v13 == 1)
        {
          unsigned char *v25 = a6->i8[0];
          uint64_t v13 = 1;
          v25[1] = a8;
          int v27 = v25 + 2;
          if (!result) {
            goto LABEL_30;
          }
        }
        else
        {
          uint64_t v46 = v20;
          memcpy(v25, a6, v13);
          uint64_t v20 = v46;
          __n128 result = a9;
          uint64_t v24 = a10;
          uint64_t v23 = a12;
          uint64_t v13 = v13;
          v25[v13] = a8;
          int v27 = &v25[v13 + 1];
          if (!a9) {
            goto LABEL_30;
          }
        }
LABEL_10:
        int v28 = *(int8x16_t **)(result + 8);
        size_t v29 = *(unsigned int *)(result + 4);
        if ((*(unsigned char *)(result + 16) & 4) != 0)
        {
          if (v29)
          {
            if (v29 == 1)
            {
              *int v27 = v28->i8[0];
            }
            else
            {
              uint64_t v106 = v20;
              memcpy(v27, v28, v29);
              uint64_t v20 = v106;
              __n128 result = a9;
              uint64_t v24 = a10;
              uint64_t v23 = a12;
            }
          }
        }
        else
        {
          int v30 = &v27[v29];
          if (v29 < 0x10)
          {
            unint64_t v31 = (unint64_t)v27;
          }
          else
          {
            unint64_t v31 = (unint64_t)&v27[v29 & 0xFFFFFFF0];
            int v32 = (unsigned long long *)v27;
            do
            {
              unsigned long long v33 = (unsigned __int128)vld2q_s8(v28->i8);
              v28 += 2;
              *v32++ = v33;
            }
            while (v32 != (unsigned long long *)v31);
          }
          if ((unsigned char *)v31 != v30)
          {
            size_t v90 = v20 + v29 + v15 + v13;
            unint64_t v91 = v90 - v31 + 21;
            if (v91 < 8
              || (v31 < (unint64_t)&v28[2].u64[1] + 2 * v90 + -2 * v31 + 2
                ? (BOOL v92 = (unint64_t)v28 >= v20 + v29 + v13 + v15 + 21)
                : (BOOL v92 = 1),
                  !v92))
            {
              uint64_t v94 = (unsigned char *)v31;
              unint64_t v95 = v28;
              goto LABEL_80;
            }
            if (v91 >= 0x20)
            {
              unint64_t v93 = v91 & 0xFFFFFFFFFFFFFFE0;
              int8x16_t v197 = v28 + 2;
              uint64_t v198 = (int8x16_t *)(v31 + 16);
              unint64_t v199 = v91 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                int8x16_t v201 = v197[-2];
                int8x16_t v200 = v197[-1];
                int8x16_t v203 = *v197;
                int8x16_t v202 = v197[1];
                v197 += 4;
                v198[-1] = vuzp1q_s8(v201, v200);
                *uint64_t v198 = vuzp1q_s8(v203, v202);
                v198 += 2;
                v199 -= 32;
              }
              while (v199);
              if (v91 == v93) {
                goto LABEL_98;
              }
              if ((v91 & 0x18) == 0)
              {
                unint64_t v95 = (int8x16_t *)((char *)v28 + 2 * v93);
                uint64_t v94 = (unsigned char *)(v31 + v93);
                do
                {
LABEL_80:
                  char v96 = v95->i8[0];
                  unint64_t v95 = (int8x16_t *)((char *)v95 + 2);
                  *v94++ = v96;
                }
                while (v94 != v30);
                goto LABEL_98;
              }
            }
            else
            {
              unint64_t v93 = 0;
            }
            uint64_t v94 = (unsigned char *)(v31 + (v91 & 0xFFFFFFFFFFFFFFF8));
            unint64_t v95 = (int8x16_t *)((char *)v28 + 2 * (v91 & 0xFFFFFFFFFFFFFFF8));
            unint64_t v204 = (int16x8_t *)((char *)v28 + 2 * v93);
            uint8x16_t v205 = (int8x8_t *)(v31 + v93);
            unint64_t v206 = v93 - (v91 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              int16x8_t v207 = *v204++;
              *v205++ = vmovn_s16(v207);
              v206 += 8;
            }
            while (v206);
            if (v91 != (v91 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_80;
            }
          }
        }
LABEL_98:
        uint64_t v47 = *(unsigned int *)(result + 4);
        int8x16_t v48 = &v27[v47];
        if (v24)
        {
LABEL_99:
          uint8x8_t v107 = *(int8x16_t **)(v24 + 8);
          size_t v108 = *(unsigned int *)(v24 + 4);
          if ((*(unsigned char *)(v24 + 16) & 4) != 0)
          {
            if (v108)
            {
              if (v108 == 1)
              {
                *int8x16_t v48 = v107->i8[0];
              }
              else
              {
                uint64_t v120 = v20;
                __n128 result = (uint64_t)memcpy(v48, v107, v108);
                uint64_t v20 = v120;
                uint64_t v24 = a10;
                uint64_t v23 = a12;
              }
            }
          }
          else
          {
            int8x16_t v109 = &v48[v108];
            if (v108 < 0x10)
            {
              unint64_t v110 = (unint64_t)v48;
            }
            else
            {
              unint64_t v110 = (unint64_t)&v48[v108 & 0xFFFFFFF0];
              int8x16x2_t v111 = (unsigned long long *)v48;
              do
              {
                unsigned long long v112 = (unsigned __int128)vld2q_s8(v107->i8);
                v107 += 2;
                *v111++ = v112;
              }
              while (v111 != (unsigned long long *)v110);
            }
            if ((unsigned char *)v110 != v109)
            {
              unint64_t v113 = v47 + v20 + v108 + v15 + v13 - v110 + 21;
              if (v113 < 8
                || ((size_t v114 = v47 + v20 + v108,
                     v110 < (unint64_t)&v107[2].u64[1] + 2 * v114 + 2 * v15 + 2 * v13 + -2 * v110 + 2)
                  ? (BOOL v115 = (unint64_t)v107 >= v114 + v13 + v15 + 21)
                  : (BOOL v115 = 1),
                    !v115))
              {
                char v117 = (unsigned char *)v110;
                unint64_t v118 = v107;
                goto LABEL_118;
              }
              if (v113 >= 0x20)
              {
                unint64_t v116 = v113 & 0xFFFFFFFFFFFFFFE0;
                uint64_t v208 = v107 + 2;
                int v209 = (int8x16_t *)(v110 + 16);
                unint64_t v210 = v113 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  int8x16_t v212 = v208[-2];
                  int8x16_t v211 = v208[-1];
                  int8x16_t v214 = *v208;
                  int8x16_t v213 = v208[1];
                  v208 += 4;
                  v209[-1] = vuzp1q_s8(v212, v211);
                  *int v209 = vuzp1q_s8(v214, v213);
                  v209 += 2;
                  v210 -= 32;
                }
                while (v210);
                if (v113 == v116) {
                  goto LABEL_121;
                }
                if ((v113 & 0x18) == 0)
                {
                  unint64_t v118 = (int8x16_t *)((char *)v107 + 2 * v116);
                  char v117 = (unsigned char *)(v110 + v116);
                  do
                  {
LABEL_118:
                    char v119 = v118->i8[0];
                    unint64_t v118 = (int8x16_t *)((char *)v118 + 2);
                    *v117++ = v119;
                  }
                  while (v117 != v109);
                  goto LABEL_121;
                }
              }
              else
              {
                unint64_t v116 = 0;
              }
              char v117 = (unsigned char *)(v110 + (v113 & 0xFFFFFFFFFFFFFFF8));
              unint64_t v118 = (int8x16_t *)((char *)v107 + 2 * (v113 & 0xFFFFFFFFFFFFFFF8));
              int8x16_t v215 = (int16x8_t *)((char *)v107 + 2 * v116);
              int8x16_t v216 = (int8x8_t *)(v110 + v116);
              unint64_t v217 = v116 - (v113 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                int16x8_t v218 = *v215++;
                *v216++ = vmovn_s16(v218);
                v217 += 8;
              }
              while (v217);
              if (v113 != (v113 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_118;
              }
            }
          }
LABEL_121:
          uint64_t v49 = *(unsigned int *)(v24 + 4);
          int8x16_t v121 = &v48[v49];
          *int8x16_t v121 = a11;
          uint64_t v50 = v121 + 1;
          if (v23)
          {
LABEL_122:
            long long v122 = *(int8x16_t **)(v23 + 8);
            size_t v123 = *(unsigned int *)(v23 + 4);
            if ((*(unsigned char *)(v23 + 16) & 4) != 0)
            {
              if (v123)
              {
                if (v123 == 1)
                {
                  *uint64_t v50 = v122->i8[0];
                }
                else
                {
                  uint64_t v135 = v20;
                  __n128 result = (uint64_t)memcpy(v50, v122, v123);
                  uint64_t v20 = v135;
                  uint64_t v23 = a12;
                }
              }
              goto LABEL_144;
            }
            uint16x8_t v124 = &v50[v123];
            if (v123 < 0x10)
            {
              unint64_t v125 = (unint64_t)v50;
            }
            else
            {
              unint64_t v125 = (unint64_t)&v50[v123 & 0xFFFFFFF0];
              __int16 v126 = (unsigned long long *)v50;
              do
              {
                unsigned long long v127 = (unsigned __int128)vld2q_s8(v122->i8);
                v122 += 2;
                *v126++ = v127;
              }
              while (v126 != (unsigned long long *)v125);
            }
            if ((unsigned char *)v125 == v124)
            {
LABEL_144:
              v50[*(unsigned int *)(v23 + 4)] = v26;
              goto LABEL_194;
            }
            unint64_t v128 = v47 + v49 + v20 + v123 + v15 + v13 - v125 + 22;
            if (v128 < 8
              || ((size_t v129 = v49 + v47 + v20 + v123,
                   v125 < (unint64_t)&v122[2].u64[1] + 2 * v129 + 2 * v15 + 2 * v13 + -2 * v125 + 4)
                ? (BOOL v130 = (unint64_t)v122 >= v129 + v13 + v15 + 22)
                : (BOOL v130 = 1),
                  !v130))
            {
              uint64_t v132 = (unsigned char *)v125;
              unint64_t v133 = v122;
              goto LABEL_141;
            }
            if (v128 >= 0x20)
            {
              unint64_t v131 = v128 & 0xFFFFFFFFFFFFFFE0;
              long long v219 = v122 + 2;
              unint64_t v220 = (int8x16_t *)(v125 + 16);
              unint64_t v221 = v128 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                int8x16_t v223 = v219[-2];
                int8x16_t v222 = v219[-1];
                int8x16_t v225 = *v219;
                int8x16_t v224 = v219[1];
                v219 += 4;
                v220[-1] = vuzp1q_s8(v223, v222);
                *unint64_t v220 = vuzp1q_s8(v225, v224);
                v220 += 2;
                v221 -= 32;
              }
              while (v221);
              if (v128 == v131) {
                goto LABEL_144;
              }
              if ((v128 & 0x18) == 0)
              {
                unint64_t v133 = (int8x16_t *)((char *)v122 + 2 * v131);
                uint64_t v132 = (unsigned char *)(v125 + v131);
                do
                {
LABEL_141:
                  char v134 = v133->i8[0];
                  unint64_t v133 = (int8x16_t *)((char *)v133 + 2);
                  *v132++ = v134;
                }
                while (v132 != v124);
                goto LABEL_144;
              }
            }
            else
            {
              unint64_t v131 = 0;
            }
            uint64_t v132 = (unsigned char *)(v125 + (v128 & 0xFFFFFFFFFFFFFFF8));
            unint64_t v133 = (int8x16_t *)((char *)v122 + 2 * (v128 & 0xFFFFFFFFFFFFFFF8));
            uint8x16_t v226 = (int16x8_t *)((char *)v122 + 2 * v131);
            uint16x8_t v227 = (int8x8_t *)(v125 + v131);
            unint64_t v228 = v131 - (v128 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              int16x8_t v229 = *v226++;
              *v227++ = vmovn_s16(v229);
              v228 += 8;
            }
            while (v228);
            if (v128 == (v128 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_144;
            }
            goto LABEL_141;
          }
          goto LABEL_32;
        }
LABEL_31:
        uint64_t v49 = 0;
        *int8x16_t v48 = a11;
        uint64_t v50 = v48 + 1;
        if (v23) {
          goto LABEL_122;
        }
LABEL_32:
        *uint64_t v50 = v26;
        goto LABEL_194;
      }
      *int v22 = a4->i8[0];
    }
    uint64_t v15 = v15;
    int v25 = &v22[v15];
    char v18 = v21;
    char v26 = a13;
    if (!v13) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_194:
  *char v18 = v20;
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WGSL::AST::Identifier &,WTF::ASCIILiteral>(uint64_t a1, long long *a2, int8x16_t *a3, uint64_t a4, int8x16_t *a5, uint64_t a6, unsigned char *a7, uint64_t a8, uint64_t a9, unsigned char *a10, uint64_t a11)
{
  BOOL v14 = *(_DWORD **)(a9 + 24);
  if (v14) {
    *v14 += 2;
  }
  int v22 = v14;
  __n128 result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WGSL::AST::Identifier,WTF::ASCIILiteral>(&v23, a3, a4, a5, a6, a7, a8, (uint64_t)v14, a10, a11);
  if (v23)
  {
    uint64_t v24 = v23;
    long long v25 = *a2;
    uint64_t v16 = *(unsigned int *)(a1 + 132);
    if (v16 == *(_DWORD *)(a1 + 128))
    {
      unint64_t v17 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v16 + 1, (unint64_t)&v24);
      uint64_t v18 = *(void *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
      uint64_t v19 = *(void *)v17;
      *(void *)unint64_t v17 = 0;
      *(void *)uint64_t v18 = v19;
      *(_OWORD *)(v18 + 8) = *(_OWORD *)(v17 + 8);
      uint64_t v20 = v24;
      ++*(_DWORD *)(a1 + 132);
      uint64_t v24 = 0;
      if (v20)
      {
        if (*v20 == 2)
        {
          WTF::StringImpl::destroy();
          __n128 result = v22;
          if (!v22) {
            goto LABEL_14;
          }
        }
        else
        {
          *v20 -= 2;
          __n128 result = v22;
          if (!v22) {
            goto LABEL_14;
          }
        }
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v21 = *(void *)(a1 + 120) + 24 * v16;
      *(void *)uint64_t v21 = v23;
      *(_OWORD *)(v21 + 8) = v25;
      ++*(_DWORD *)(a1 + 132);
      uint64_t v24 = 0;
    }
    __n128 result = v22;
    if (!v22)
    {
LABEL_14:
      *(void *)(a1 + 88) = *(void *)(*(void *)(a1 + 112) + 24);
      return result;
    }
LABEL_11:
    if (*result == 2) {
      __n128 result = (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *result -= 2;
    }
    goto LABEL_14;
  }
  __break(0xC471u);
  return result;
}

void *WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WGSL::AST::Identifier,WTF::ASCIILiteral>(void *result, int8x16_t *a2, uint64_t a3, int8x16_t *a4, uint64_t a5, unsigned char *a6, uint64_t a7, uint64_t a8, unsigned char *a9, uint64_t a10)
{
  if (a3) {
    size_t v10 = a3 - 1;
  }
  else {
    size_t v10 = 0;
  }
  if (v10 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826BEF88);
  }
  if (a5) {
    size_t v12 = a5 - 1;
  }
  else {
    size_t v12 = 0;
  }
  if (v12 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826BEFA8);
  }
  if (a7) {
    size_t v14 = a7 - 1;
  }
  else {
    size_t v14 = 0;
  }
  if (v14 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826BEFC8);
  }
  if (a10) {
    unint64_t v15 = a10 - 1;
  }
  else {
    unint64_t v15 = 0;
  }
  if (v15 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826BEFE8);
  }
  if (a8)
  {
    int v19 = *(_DWORD *)(a8 + 4);
    if (((v19 | v15) & 0x80000000) != 0) {
      goto LABEL_26;
    }
  }
  else
  {
    int v19 = 0;
    if ((v15 & 0x80000000) != 0)
    {
LABEL_26:
      uint64_t v25 = 0;
      goto LABEL_27;
    }
  }
  BOOL v20 = __OFADD__(v19, v15);
  int v21 = v19 + v15;
  if (v20) {
    goto LABEL_26;
  }
  BOOL v20 = __OFADD__(v14, v21);
  int v22 = v14 + v21;
  if (v20) {
    goto LABEL_26;
  }
  BOOL v20 = __OFADD__(v12, v22);
  int v23 = v12 + v22;
  if (v20) {
    goto LABEL_26;
  }
  uint64_t v24 = (v10 + v23);
  if (__OFADD__(v10, v23)) {
    goto LABEL_26;
  }
  if (!a8 || (*(unsigned char *)(a8 + 16) & 4) != 0)
  {
    if (!v24) {
      goto LABEL_43;
    }
    if ((v24 & 0x80000000) != 0) {
      goto LABEL_26;
    }
    unint64_t v217 = result;
    WTF::tryFastCompactMalloc((WTF *)(v24 + 20));
    uint64_t v25 = v219;
    if (!v219)
    {
LABEL_139:
      __n128 result = v217;
      goto LABEL_27;
    }
    int8x16_t v41 = (unsigned char *)(v219 + 20);
    *(_DWORD *)uint64_t v219 = 2;
    *(_DWORD *)(v219 + 4) = v24;
    *(void *)(v219 + 8) = v219 + 20;
    *(_DWORD *)(v219 + 16) = 4;
    int8x16_t v42 = a6;
    if (v10)
    {
      if (v10 == 1)
      {
        *int8x16_t v41 = a2->i8[0];
      }
      else
      {
        memcpy((void *)(v219 + 20), a2, v10);
        int8x16_t v41 = (unsigned char *)(v219 + 20);
        int8x16_t v42 = a6;
        uint64_t v25 = v219;
      }
    }
    long long v43 = &v41[v10];
    if (v12)
    {
      if (v12 == 1)
      {
        *long long v43 = a4->i8[0];
      }
      else
      {
        memcpy(v43, a4, v12);
        int8x16_t v42 = a6;
        uint64_t v25 = v219;
      }
    }
    unint64_t v44 = &v43[v12];
    if (v14)
    {
      if (v14 == 1)
      {
        *unint64_t v44 = *v42;
      }
      else
      {
        memcpy(v44, v42, v14);
        uint64_t v25 = v219;
      }
    }
    long long v45 = &v44[v14];
    if (!a8)
    {
      uint64_t v52 = 0;
      goto LABEL_136;
    }
    uint64_t v46 = *(int8x16_t **)(a8 + 8);
    size_t v47 = *(unsigned int *)(a8 + 4);
    if ((*(unsigned char *)(a8 + 16) & 4) != 0)
    {
      if (v47)
      {
        if (v47 == 1)
        {
          unsigned char *v45 = v46->i8[0];
        }
        else
        {
          memcpy(&v44[v14], v46, v47);
          uint64_t v25 = v219;
        }
      }
      goto LABEL_135;
    }
    int8x16_t v48 = &v45[v47];
    if (v47 < 0x10)
    {
      unint64_t v49 = (unint64_t)&v44[v14];
    }
    else
    {
      unint64_t v49 = (unint64_t)&v45[v47 & 0xFFFFFFF0];
      uint64_t v50 = (unsigned long long *)&v44[v14];
      do
      {
        unsigned long long v51 = (unsigned __int128)vld2q_s8(v46->i8);
        v46 += 2;
        *v50++ = v51;
      }
      while (v50 != (unsigned long long *)v49);
    }
    if ((unsigned char *)v49 == v48)
    {
LABEL_135:
      uint64_t v52 = *(unsigned int *)(a8 + 4);
LABEL_136:
      if (v15)
      {
        size_t v114 = &v45[v52];
        if (v15 != 1)
        {
          memcpy(v114, a9, v15);
          uint64_t v25 = v219;
          __n128 result = v217;
          goto LABEL_27;
        }
        unsigned char *v114 = *a9;
      }
      goto LABEL_139;
    }
    size_t v53 = a7 + a5 + a3 + v25 + v47;
    unint64_t v54 = v53 - v49 - (a7 != 0) - (a5 != 0) - (a3 != 0) + 20;
    if (v54 < 8) {
      goto LABEL_81;
    }
    if (a3) {
      unint64_t v55 = v49 + 1;
    }
    else {
      unint64_t v55 = v49;
    }
    if (a5) {
      ++v55;
    }
    if (a7)
    {
      ++v55;
      unint64_t v56 = v49 + 1;
    }
    else
    {
      unint64_t v56 = v49;
    }
    if (a5) {
      ++v56;
    }
    if (a3) {
      ++v56;
    }
    if (v49 < (unint64_t)&v46[2].u64[1] + 2 * v53 + -2 * v56 && (unint64_t)v46 < v53 - v55 + v49 + 20)
    {
LABEL_81:
      __int16 v57 = (unsigned char *)v49;
      int8x16_t v58 = v46;
      goto LABEL_82;
    }
    if (v54 >= 0x20)
    {
      unint64_t v151 = v54 & 0xFFFFFFFFFFFFFFE0;
      int8x16_t v194 = v46 + 2;
      unint64_t v195 = (int8x16_t *)(v49 + 16);
      unint64_t v196 = v54 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v198 = v194[-2];
        int8x16_t v197 = v194[-1];
        int8x16_t v200 = *v194;
        int8x16_t v199 = v194[1];
        v194 += 4;
        v195[-1] = vuzp1q_s8(v198, v197);
        *unint64_t v195 = vuzp1q_s8(v200, v199);
        v195 += 2;
        v196 -= 32;
      }
      while (v196);
      if (v54 == v151) {
        goto LABEL_135;
      }
      if ((v54 & 0x18) == 0)
      {
        int8x16_t v58 = (int8x16_t *)((char *)v46 + 2 * v151);
        __int16 v57 = (unsigned char *)(v49 + v151);
        do
        {
LABEL_82:
          char v59 = v58->i8[0];
          int8x16_t v58 = (int8x16_t *)((char *)v58 + 2);
          *v57++ = v59;
        }
        while (v57 != v48);
        goto LABEL_135;
      }
    }
    else
    {
      unint64_t v151 = 0;
    }
    __int16 v57 = (unsigned char *)(v49 + (v54 & 0xFFFFFFFFFFFFFFF8));
    int8x16_t v58 = (int8x16_t *)((char *)v46 + 2 * (v54 & 0xFFFFFFFFFFFFFFF8));
    int8x16_t v201 = (int16x8_t *)((char *)v46 + 2 * v151);
    int8x16_t v202 = (int8x8_t *)(v49 + v151);
    unint64_t v203 = v151 - (v54 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int16x8_t v204 = *v201++;
      *v202++ = vmovn_s16(v204);
      v203 += 8;
    }
    while (v203);
    if (v54 == (v54 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_135;
    }
    goto LABEL_82;
  }
  if (!v24)
  {
LABEL_43:
    uint64_t v25 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_27;
  }
  if (v24 > 0x7FFFFFEF) {
    goto LABEL_26;
  }
  int v27 = result;
  WTF::tryFastCompactMalloc((WTF *)(2 * v24 + 20));
  uint64_t v25 = v219;
  if (!v219)
  {
    __n128 result = v27;
    goto LABEL_27;
  }
  unint64_t v28 = v219 + 20;
  *(_DWORD *)uint64_t v219 = 2;
  *(_DWORD *)(v219 + 4) = v24;
  *(void *)(v219 + 8) = v219 + 20;
  *(_DWORD *)(v219 + 16) = 0;
  unint64_t v29 = v219 + 20 + 2 * v10;
  __n128 result = v27;
  if ((v10 & 0xFFFFFFC0) != 0)
  {
    unint64_t v30 = v28 + 2 * (v10 & 0xFFFFFFC0);
    long long v31 = 0uLL;
    unint64_t v32 = (unint64_t)a9;
    uint64_t v33 = a3;
    unint64_t v34 = (unint64_t)a6;
    do
    {
      v220.val[0] = *a2;
      int8x16_t v35 = a2[1];
      v225.val[0] = a2[2];
      int8x16_t v36 = a2[3];
      a2 += 4;
      int8x16_t v37 = v36;
      v225.val[1] = 0uLL;
      v230.val[0] = v35;
      v220.val[1] = 0uLL;
      uint64_t v38 = (char *)v28;
      vst2q_s8(v38, v220);
      v38 += 32;
      v230.val[1] = 0uLL;
      vst2q_s8(v38, v230);
      uint64_t v39 = (char *)(v28 + 64);
      vst2q_s8(v39, v225);
      int8x16_t v40 = (char *)(v28 + 96);
      vst2q_s8(v40, *(int8x16x2_t *)(&v31 - 1));
      v28 += 128;
    }
    while (v28 != v30);
    unint64_t v28 = v30;
  }
  else
  {
    unint64_t v32 = (unint64_t)a9;
    uint64_t v33 = a3;
    unint64_t v34 = (unint64_t)a6;
  }
  if (v28 != v29)
  {
    unint64_t v60 = v219 + 2 * v33 - v28;
    uint64_t v61 = -2;
    if (v33) {
      uint64_t v62 = -2;
    }
    else {
      uint64_t v62 = 0;
    }
    unint64_t v63 = v60 + v62 + 18;
    if (v63 < 0xE) {
      goto LABEL_94;
    }
    if (!v33) {
      uint64_t v61 = 0;
    }
    unint64_t v64 = v60 + v61 + 18;
    if (v28 < (unint64_t)a2->u64 + (v64 >> 1) + 1
      && (unint64_t)a2 < (v64 & 0xFFFFFFFFFFFFFFFELL) + v28 + 2)
    {
LABEL_94:
      uint64_t v65 = (_WORD *)v28;
      unint64_t v66 = a2;
      goto LABEL_95;
    }
    uint64_t v145 = (v63 >> 1) + 1;
    if (v63 >= 0x3E)
    {
      unint64_t v146 = v145 & 0xFFFFFFFFFFFFFFE0;
      int8x16_t v164 = (uint8x8_t *)&a2[1];
      int8x16_t v165 = (uint16x8_t *)(v28 + 32);
      unint64_t v166 = v145 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v167 = *(uint8x16_t *)v164[-2].i8;
        uint16x8_t v168 = vmovl_u8(*v164);
        uint16x8_t v169 = vmovl_high_u8(*(uint8x16_t *)v164->i8);
        v165[-2] = vmovl_u8(*(uint8x8_t *)v167.i8);
        v165[-1] = vmovl_high_u8(v167);
        *int8x16_t v165 = v168;
        v165[1] = v169;
        v165 += 4;
        v164 += 4;
        v166 -= 32;
      }
      while (v166);
      if (v145 == v146) {
        goto LABEL_96;
      }
      if ((v145 & 0x18) == 0)
      {
        unint64_t v66 = (int8x16_t *)((char *)a2 + v146);
        uint64_t v65 = (_WORD *)(v28 + 2 * v146);
        do
        {
LABEL_95:
          __int16 v67 = v66->u8[0];
          unint64_t v66 = (int8x16_t *)((char *)v66 + 1);
          *v65++ = v67;
        }
        while (v65 != (_WORD *)v29);
        goto LABEL_96;
      }
    }
    else
    {
      unint64_t v146 = 0;
    }
    uint64_t v65 = (_WORD *)(v28 + 2 * (v145 & 0xFFFFFFFFFFFFFFF8));
    unint64_t v66 = (int8x16_t *)((char *)a2 + (v145 & 0xFFFFFFFFFFFFFFF8));
    BOOL v170 = (uint8x8_t *)&a2->i8[v146];
    uint64_t v171 = (uint16x8_t *)(v28 + 2 * v146);
    unint64_t v172 = v146 - (v145 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v173 = *v170++;
      *v171++ = vmovl_u8(v173);
      v172 += 8;
    }
    while (v172);
    if (v145 != (v145 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_95;
    }
  }
LABEL_96:
  unint64_t v68 = v29 + 2 * v12;
  if ((v12 & 0xFFFFFFC0) != 0)
  {
    unint64_t v69 = v29 + 2 * (v12 & 0xFFFFFFC0);
    long long v70 = 0uLL;
    do
    {
      v221.val[0] = *a4;
      int8x16_t v71 = a4[1];
      v226.val[0] = a4[2];
      int8x16_t v72 = a4[3];
      a4 += 4;
      int8x16_t v73 = v72;
      v226.val[1] = 0uLL;
      v231.val[0] = v71;
      v221.val[1] = 0uLL;
      char v74 = (char *)v29;
      vst2q_s8(v74, v221);
      v74 += 32;
      v231.val[1] = 0uLL;
      vst2q_s8(v74, v231);
      uint64_t v75 = (char *)(v29 + 64);
      vst2q_s8(v75, v226);
      uint64_t v76 = (char *)(v29 + 96);
      vst2q_s8(v76, *(int8x16x2_t *)(&v70 - 1));
      v29 += 128;
    }
    while (v29 != v69);
    unint64_t v29 = v69;
  }
  if (v29 != v68)
  {
    unint64_t v77 = v219 + 2 * (v12 + v33) - v29;
    uint64_t v78 = -2;
    if (v33) {
      uint64_t v79 = -2;
    }
    else {
      uint64_t v79 = 0;
    }
    unint64_t v80 = v77 + v79 + 18;
    if (v80 < 0xE) {
      goto LABEL_109;
    }
    if (!v33) {
      uint64_t v78 = 0;
    }
    unint64_t v81 = v77 + v78 + 18;
    if (v29 < (unint64_t)a4->u64 + (v81 >> 1) + 1
      && (unint64_t)a4 < (v81 & 0xFFFFFFFFFFFFFFFELL) + v29 + 2)
    {
LABEL_109:
      long long v82 = (_WORD *)v29;
      unint64_t v83 = a4;
      goto LABEL_110;
    }
    uint64_t v147 = (v80 >> 1) + 1;
    if (v80 >= 0x3E)
    {
      unint64_t v148 = v147 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v174 = (uint8x8_t *)&a4[1];
      __int16 v175 = (uint16x8_t *)(v29 + 32);
      unint64_t v176 = v147 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v177 = *(uint8x16_t *)v174[-2].i8;
        uint16x8_t v178 = vmovl_u8(*v174);
        uint16x8_t v179 = vmovl_high_u8(*(uint8x16_t *)v174->i8);
        v175[-2] = vmovl_u8(*(uint8x8_t *)v177.i8);
        v175[-1] = vmovl_high_u8(v177);
        *__int16 v175 = v178;
        v175[1] = v179;
        v175 += 4;
        v174 += 4;
        v176 -= 32;
      }
      while (v176);
      if (v147 == v148) {
        goto LABEL_111;
      }
      if ((v147 & 0x18) == 0)
      {
        unint64_t v83 = (int8x16_t *)((char *)a4 + v148);
        long long v82 = (_WORD *)(v29 + 2 * v148);
        do
        {
LABEL_110:
          __int16 v84 = v83->u8[0];
          unint64_t v83 = (int8x16_t *)((char *)v83 + 1);
          *v82++ = v84;
        }
        while (v82 != (_WORD *)v68);
        goto LABEL_111;
      }
    }
    else
    {
      unint64_t v148 = 0;
    }
    long long v82 = (_WORD *)(v29 + 2 * (v147 & 0xFFFFFFFFFFFFFFF8));
    unint64_t v83 = (int8x16_t *)((char *)a4 + (v147 & 0xFFFFFFFFFFFFFFF8));
    uint8x16_t v180 = (uint8x8_t *)&a4->i8[v148];
    uint16x8_t v181 = (uint16x8_t *)(v29 + 2 * v148);
    unint64_t v182 = v148 - (v147 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v183 = *v180++;
      *v181++ = vmovl_u8(v183);
      v182 += 8;
    }
    while (v182);
    if (v147 != (v147 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_110;
    }
  }
LABEL_111:
  int8x16_t v85 = (char *)(v68 + 2 * v14);
  if ((v14 & 0xFFFFFFC0) != 0)
  {
    unint64_t v86 = v68 + 2 * (v14 & 0xFFFFFFC0);
    long long v87 = 0uLL;
    do
    {
      v222.val[0] = *(int8x16_t *)v34;
      int8x16_t v88 = *(int8x16_t *)(v34 + 16);
      v227.val[0] = *(int8x16_t *)(v34 + 32);
      long long v89 = *(_OWORD *)(v34 + 48);
      v34 += 64;
      long long v90 = v89;
      v227.val[1] = 0uLL;
      v232.val[0] = v88;
      v222.val[1] = 0uLL;
      unint64_t v91 = (char *)v68;
      vst2q_s8(v91, v222);
      v91 += 32;
      v232.val[1] = 0uLL;
      vst2q_s8(v91, v232);
      BOOL v92 = (char *)(v68 + 64);
      vst2q_s8(v92, v227);
      unint64_t v93 = (char *)(v68 + 96);
      vst2q_s8(v93, *(int8x16x2_t *)(&v87 - 1));
      v68 += 128;
    }
    while (v68 != v86);
    unint64_t v68 = v86;
  }
  if ((char *)v68 != v85)
  {
    unint64_t v94 = v219 + 2 * (v12 + v33 + v14) - v68;
    uint64_t v95 = -2;
    if (v33) {
      uint64_t v96 = -2;
    }
    else {
      uint64_t v96 = 0;
    }
    unint64_t v97 = v94 + v96 + 18;
    if (v97 < 0xE) {
      goto LABEL_124;
    }
    if (!v33) {
      uint64_t v95 = 0;
    }
    unint64_t v98 = v94 + v95 + 18;
    if (v68 < v34 + (v98 >> 1) + 1 && v34 < (v98 & 0xFFFFFFFFFFFFFFFELL) + v68 + 2)
    {
LABEL_124:
      unint64_t v99 = (char *)v68;
      BOOL v100 = (unsigned __int8 *)v34;
      goto LABEL_125;
    }
    uint64_t v149 = (v97 >> 1) + 1;
    if (v97 >= 0x3E)
    {
      unint64_t v150 = v149 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v184 = (uint8x8_t *)(v34 + 16);
      unint64_t v185 = (uint16x8_t *)(v68 + 32);
      unint64_t v186 = v149 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v187 = *(uint8x16_t *)v184[-2].i8;
        uint16x8_t v188 = vmovl_u8(*v184);
        uint16x8_t v189 = vmovl_high_u8(*(uint8x16_t *)v184->i8);
        v185[-2] = vmovl_u8(*(uint8x8_t *)v187.i8);
        v185[-1] = vmovl_high_u8(v187);
        *unint64_t v185 = v188;
        v185[1] = v189;
        v185 += 4;
        v184 += 4;
        v186 -= 32;
      }
      while (v186);
      if (v149 == v150) {
        goto LABEL_126;
      }
      if ((v149 & 0x18) == 0)
      {
        BOOL v100 = (unsigned __int8 *)(v34 + v150);
        unint64_t v99 = (char *)(v68 + 2 * v150);
        do
        {
LABEL_125:
          __int16 v101 = *v100++;
          *(_WORD *)unint64_t v99 = v101;
          v99 += 2;
        }
        while (v99 != v85);
        goto LABEL_126;
      }
    }
    else
    {
      unint64_t v150 = 0;
    }
    unint64_t v99 = (char *)(v68 + 2 * (v149 & 0xFFFFFFFFFFFFFFF8));
    BOOL v100 = (unsigned __int8 *)(v34 + (v149 & 0xFFFFFFFFFFFFFFF8));
    uint8x16_t v190 = (uint8x8_t *)(v34 + v150);
    uint16x8_t v191 = (uint16x8_t *)(v68 + 2 * v150);
    unint64_t v192 = v150 - (v149 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v193 = *v190++;
      *v191++ = vmovl_u8(v193);
      v192 += 8;
    }
    while (v192);
    if (v149 != (v149 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_125;
    }
  }
LABEL_126:
  unint64_t v102 = *(int8x16_t **)(a8 + 8);
  uint64_t v103 = *(unsigned int *)(a8 + 4);
  if ((*(unsigned char *)(a8 + 16) & 4) != 0)
  {
    uint64_t v104 = &v85[2 * v103];
    if (v103 < 0x40)
    {
      unint64_t v105 = (unint64_t)v85;
    }
    else
    {
      unint64_t v105 = (unint64_t)&v85[2 * (v103 & 0xFFFFFFC0)];
      long long v106 = 0uLL;
      uint8x8_t v107 = v85;
      do
      {
        v223.val[0] = *v102;
        int8x16_t v108 = v102[1];
        v228.val[0] = v102[2];
        int8x16_t v109 = v102[3];
        v102 += 4;
        int8x16_t v110 = v109;
        v228.val[1] = 0uLL;
        v233.val[0] = v108;
        v223.val[1] = 0uLL;
        int8x16x2_t v111 = v107;
        vst2q_s8(v111, v223);
        v111 += 32;
        v233.val[1] = 0uLL;
        vst2q_s8(v111, v233);
        unsigned long long v112 = v107 + 64;
        vst2q_s8(v112, v228);
        unint64_t v113 = v107 + 96;
        vst2q_s8(v113, *(int8x16x2_t *)(&v106 - 1));
        v107 += 128;
      }
      while (v107 != (char *)v105);
    }
    if ((char *)v105 == v104) {
      goto LABEL_155;
    }
    unint64_t v115 = v219 + 2 * (v103 + v33 + v12 + v14) - v105;
    uint64_t v116 = -2;
    if (v33) {
      uint64_t v117 = -2;
    }
    else {
      uint64_t v117 = 0;
    }
    unint64_t v118 = v115 + v117 + 18;
    if (v118 < 0xE) {
      goto LABEL_151;
    }
    if (!v33) {
      uint64_t v116 = 0;
    }
    unint64_t v119 = v115 + v116 + 18;
    if (v105 < (unint64_t)v102->u64 + (v119 >> 1) + 1
      && (unint64_t)v102 < (v119 & 0xFFFFFFFFFFFFFFFELL) + v105 + 2)
    {
LABEL_151:
      uint64_t v120 = (char *)v105;
      int8x16_t v121 = v102;
      goto LABEL_152;
    }
    uint64_t v152 = (v118 >> 1) + 1;
    if (v118 >= 0x3E)
    {
      unint64_t v153 = v152 & 0xFFFFFFFFFFFFFFE0;
      uint8x16_t v205 = (uint8x8_t *)&v102[1];
      unint64_t v206 = (uint16x8_t *)(v105 + 32);
      unint64_t v207 = v152 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v208 = *(uint8x16_t *)v205[-2].i8;
        uint16x8_t v209 = vmovl_u8(*v205);
        uint16x8_t v210 = vmovl_high_u8(*(uint8x16_t *)v205->i8);
        v206[-2] = vmovl_u8(*(uint8x8_t *)v208.i8);
        v206[-1] = vmovl_high_u8(v208);
        uint16x8_t *v206 = v209;
        v206[1] = v210;
        v206 += 4;
        v205 += 4;
        v207 -= 32;
      }
      while (v207);
      if (v152 == v153) {
        goto LABEL_155;
      }
      if ((v152 & 0x18) == 0)
      {
        int8x16_t v121 = (int8x16_t *)((char *)v102 + v153);
        uint64_t v120 = (char *)(v105 + 2 * v153);
        goto LABEL_152;
      }
    }
    else
    {
      unint64_t v153 = 0;
    }
    uint64_t v120 = (char *)(v105 + 2 * (v152 & 0xFFFFFFFFFFFFFFF8));
    int8x16_t v121 = (int8x16_t *)((char *)v102 + (v152 & 0xFFFFFFFFFFFFFFF8));
    int8x16_t v211 = (uint8x8_t *)&v102->i8[v153];
    int8x16_t v212 = (uint16x8_t *)(v105 + 2 * v153);
    unint64_t v213 = v153 - (v152 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v214 = *v211++;
      *v212++ = vmovl_u8(v214);
      v213 += 8;
    }
    while (v213);
    if (v152 == (v152 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_155;
    }
    do
    {
LABEL_152:
      __int16 v122 = v121->u8[0];
      int8x16_t v121 = (int8x16_t *)((char *)v121 + 1);
      *(_WORD *)uint64_t v120 = v122;
      v120 += 2;
    }
    while (v120 != v104);
    goto LABEL_155;
  }
  if (v103)
  {
    if (v103 == 1)
    {
      *(_WORD *)int8x16_t v85 = v102->i16[0];
    }
    else
    {
      memcpy(v85, v102, 2 * v103);
      uint64_t v33 = a3;
      unint64_t v32 = (unint64_t)a9;
      uint64_t v25 = v219;
      __n128 result = v27;
    }
  }
LABEL_155:
  uint64_t v123 = *(unsigned int *)(a8 + 4);
  unint64_t v124 = (unint64_t)&v85[2 * v123];
  unint64_t v125 = (_WORD *)(v124 + 2 * v15);
  if ((v15 & 0xFFFFFFC0) != 0)
  {
    unint64_t v126 = v124 + 2 * (v15 & 0xFFFFFFC0);
    long long v127 = 0uLL;
    do
    {
      v224.val[0] = *(int8x16_t *)v32;
      int8x16_t v128 = *(int8x16_t *)(v32 + 16);
      v229.val[0] = *(int8x16_t *)(v32 + 32);
      long long v129 = *(_OWORD *)(v32 + 48);
      v32 += 64;
      long long v130 = v129;
      v229.val[1] = 0uLL;
      v234.val[0] = v128;
      v224.val[1] = 0uLL;
      unint64_t v131 = (char *)v124;
      vst2q_s8(v131, v224);
      v131 += 32;
      v234.val[1] = 0uLL;
      vst2q_s8(v131, v234);
      uint64_t v132 = (char *)(v124 + 64);
      vst2q_s8(v132, v229);
      unint64_t v133 = (char *)(v124 + 96);
      vst2q_s8(v133, *(int8x16x2_t *)(&v127 - 1));
      v124 += 128;
    }
    while (v124 != v126);
    unint64_t v124 = v126;
  }
  if ((_WORD *)v124 != v125)
  {
    unint64_t v134 = v25 + 2 * (v123 + v33 + v12 + v14 + (unint64_t)v15) - v124;
    uint64_t v135 = -2;
    if (v33) {
      uint64_t v136 = -2;
    }
    else {
      uint64_t v136 = 0;
    }
    unint64_t v137 = v134 + v136 + 18;
    if (v137 < 0xE) {
      goto LABEL_173;
    }
    if (!v33) {
      uint64_t v135 = 0;
    }
    unint64_t v138 = v134 + v135 + 18;
    if (v124 < v32 + (v138 >> 1) + 1 && v32 < (v138 & 0xFFFFFFFFFFFFFFFELL) + v124 + 2)
    {
LABEL_173:
      int8x16_t v142 = (_WORD *)v124;
      int8x16_t v143 = (unsigned __int8 *)v32;
      goto LABEL_174;
    }
    uint64_t v140 = (v137 >> 1) + 1;
    if (v137 >= 0x3E)
    {
      unint64_t v141 = v140 & 0xFFFFFFFFFFFFFFE0;
      __int16 v154 = (uint8x8_t *)(v32 + 16);
      uint64_t v155 = (uint16x8_t *)(v124 + 32);
      unint64_t v156 = v140 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v157 = *(uint8x16_t *)v154[-2].i8;
        uint16x8_t v158 = vmovl_u8(*v154);
        uint16x8_t v159 = vmovl_high_u8(*(uint8x16_t *)v154->i8);
        v155[-2] = vmovl_u8(*(uint8x8_t *)v157.i8);
        v155[-1] = vmovl_high_u8(v157);
        *uint64_t v155 = v158;
        v155[1] = v159;
        v155 += 4;
        v154 += 4;
        v156 -= 32;
      }
      while (v156);
      if (v140 == v141) {
        goto LABEL_27;
      }
      if ((v140 & 0x18) == 0)
      {
        int8x16_t v143 = (unsigned __int8 *)(v32 + v141);
        int8x16_t v142 = (_WORD *)(v124 + 2 * v141);
        do
        {
LABEL_174:
          __int16 v144 = *v143++;
          *v142++ = v144;
        }
        while (v142 != v125);
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v141 = 0;
    }
    int8x16_t v142 = (_WORD *)(v124 + 2 * (v140 & 0xFFFFFFFFFFFFFFF8));
    int8x16_t v143 = (unsigned __int8 *)(v32 + (v140 & 0xFFFFFFFFFFFFFFF8));
    unint64_t v160 = (uint8x8_t *)(v32 + v141);
    long long v161 = (uint16x8_t *)(v124 + 2 * v141);
    unint64_t v162 = v141 - (v140 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v163 = *v160++;
      *v161++ = vmovl_u8(v163);
      v162 += 8;
    }
    while (v162);
    if (v140 != (v140 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_174;
    }
  }
LABEL_27:
  *__n128 result = v25;
  return result;
}

unsigned char *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(unsigned char *result, long long *a2, unsigned char *a3, uint64_t a4, unsigned char *a5, uint64_t a6, unsigned char *a7, uint64_t a8, unsigned char *a9, uint64_t a10, unsigned char *a11, uint64_t a12)
{
  if (a4) {
    size_t v12 = a4 - 1;
  }
  else {
    size_t v12 = 0;
  }
  if (v12 >> 31) {
    goto LABEL_65;
  }
  if (a6) {
    size_t v13 = a6 - 1;
  }
  else {
    size_t v13 = 0;
  }
  if (v13 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826BF660);
  }
  if (a8) {
    size_t v14 = a8 - 1;
  }
  else {
    size_t v14 = 0;
  }
  if (v14 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826BF680);
  }
  if (a10) {
    size_t v15 = a10 - 1;
  }
  else {
    size_t v15 = 0;
  }
  if (v15 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826BF6A0);
  }
  if (a12) {
    size_t v16 = a12 - 1;
  }
  else {
    size_t v16 = 0;
  }
  if (v16 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826BF6C0);
  }
  int v17 = v15 + v16;
  if (__OFADD__(v15, v16)) {
    goto LABEL_65;
  }
  BOOL v18 = __OFADD__(v14, v17);
  int v19 = v14 + v17;
  if (v18) {
    goto LABEL_65;
  }
  BOOL v18 = __OFADD__(v13, v19);
  int v20 = v13 + v19;
  if (v18) {
    goto LABEL_65;
  }
  uint64_t v21 = (v12 + v20);
  if (__OFADD__(v12, v20)) {
    goto LABEL_65;
  }
  int v23 = result;
  if (!v21)
  {
    int v27 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    uint64_t v39 = v27;
    long long v40 = *a2;
    uint64_t v30 = *((unsigned int *)result + 33);
    if (v30 == *((_DWORD *)result + 32)) {
      goto LABEL_55;
    }
LABEL_34:
    uint64_t v31 = v23[15] + 24 * v30;
    *(void *)uint64_t v31 = v27;
    *(_OWORD *)(v31 + 8) = v40;
    ++*((_DWORD *)v23 + 33);
    goto LABEL_59;
  }
  if ((v21 & 0x80000000) != 0
    || (__n128 result = (unsigned char *)WTF::tryFastCompactMalloc((WTF *)(v21 + 20)), v26 = a3, (v27 = v39) == 0))
  {
LABEL_65:
    __break(0xC471u);
    JUMPOUT(0x1826BF640);
  }
  int8x16_t v37 = a2;
  unint64_t v28 = v39 + 5;
  *uint64_t v39 = 2;
  v27[1] = v21;
  *((void *)v27 + 1) = v27 + 5;
  v27[4] = 4;
  if (v12)
  {
    if (v12 != 1)
    {
      __n128 result = memcpy(v27 + 5, v26, v12);
      unint64_t v29 = &v28[v12];
      if (!v13) {
        goto LABEL_38;
      }
      goto LABEL_36;
    }
    *unint64_t v28 = *v26;
  }
  unint64_t v29 = &v28[v12];
  if (!v13)
  {
LABEL_38:
    unint64_t v32 = &v29[v13];
    if (!v14) {
      goto LABEL_43;
    }
    goto LABEL_41;
  }
LABEL_36:
  if (v13 == 1)
  {
    *unint64_t v29 = *a5;
    goto LABEL_38;
  }
  __n128 result = memcpy(v29, a5, v13);
  unint64_t v32 = &v29[v13];
  if (!v14) {
    goto LABEL_43;
  }
LABEL_41:
  if (v14 != 1)
  {
    __n128 result = memcpy(v32, a7, v14);
    uint64_t v33 = &v32[v14];
    if (!v15) {
      goto LABEL_48;
    }
    goto LABEL_46;
  }
  *unint64_t v32 = *a7;
LABEL_43:
  uint64_t v33 = &v32[v14];
  if (!v15)
  {
LABEL_48:
    if (!v16) {
      goto LABEL_54;
    }
    goto LABEL_51;
  }
LABEL_46:
  if (v15 == 1)
  {
    unsigned char *v33 = *a9;
    goto LABEL_48;
  }
  __n128 result = memcpy(v33, a9, v15);
  if (!v16) {
    goto LABEL_54;
  }
LABEL_51:
  __n128 result = &v33[v15];
  if (v16 == 1) {
    *__n128 result = *a11;
  }
  else {
    __n128 result = memcpy(result, a11, v16);
  }
LABEL_54:
  uint64_t v39 = v27;
  long long v40 = *v37;
  uint64_t v30 = *((unsigned int *)v23 + 33);
  if (v30 != *((_DWORD *)v23 + 32)) {
    goto LABEL_34;
  }
LABEL_55:
  unint64_t v34 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v23 + 15), v30 + 1, (unint64_t)&v39);
  uint64_t v35 = v23[15] + 24 * *((unsigned int *)v23 + 33);
  uint64_t v36 = *(void *)v34;
  *(void *)unint64_t v34 = 0;
  *(void *)uint64_t v35 = v36;
  *(_OWORD *)(v35 + 8) = *(_OWORD *)(v34 + 8);
  __n128 result = v39;
  ++*((_DWORD *)v23 + 33);
  uint64_t v39 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      __n128 result = (unsigned char *)WTF::StringImpl::destroy();
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
LABEL_59:
  v23[11] = *(void *)(v23[14] + 24);
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral&,WTF::ASCIILiteral,unsigned int &,WTF::ASCIILiteral,unsigned long &>(uint64_t a1, long long *a2, unsigned char *a3, uint64_t a4, unsigned char *a5, uint64_t a6, unsigned char *a7, uint64_t a8, unsigned int a9, unsigned char *a10, uint64_t a11, unint64_t a12)
{
  __n128 result = (_DWORD *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>((uint64_t)&v20, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  if (v20)
  {
    uint64_t v21 = v20;
    long long v22 = *a2;
    uint64_t v15 = *(unsigned int *)(a1 + 132);
    if (v15 == *(_DWORD *)(a1 + 128))
    {
      unint64_t v16 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v15 + 1, (unint64_t)&v21);
      uint64_t v17 = *(void *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
      uint64_t v18 = *(void *)v16;
      *(void *)unint64_t v16 = 0;
      *(void *)uint64_t v17 = v18;
      *(_OWORD *)(v17 + 8) = *(_OWORD *)(v16 + 8);
      __n128 result = v21;
      ++*(_DWORD *)(a1 + 132);
      uint64_t v21 = 0;
      if (result)
      {
        if (*result == 2) {
          __n128 result = (_DWORD *)WTF::StringImpl::destroy();
        }
        else {
          *result -= 2;
        }
      }
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 120) + 24 * v15;
      *(void *)uint64_t v19 = v20;
      *(_OWORD *)(v19 + 8) = v22;
      ++*(_DWORD *)(a1 + 132);
    }
    *(void *)(a1 + 88) = *(void *)(*(void *)(a1 + 112) + 24);
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(uint64_t result, unsigned char *a2, uint64_t a3, unsigned char *a4, uint64_t a5, unsigned char *a6, uint64_t a7, unsigned int a8, unsigned char *a9, uint64_t a10, unint64_t a11)
{
  v45[4] = *MEMORY[0x1E4F143B8];
  if (a3) {
    unint64_t v11 = a3 - 1;
  }
  else {
    unint64_t v11 = 0;
  }
  if (v11 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826BFB6CLL);
  }
  if (a5) {
    unint64_t v12 = a5 - 1;
  }
  else {
    unint64_t v12 = 0;
  }
  if (v12 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826BFB8CLL);
  }
  if (a7) {
    unint64_t v13 = a7 - 1;
  }
  else {
    unint64_t v13 = 0;
  }
  if (v13 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826BFBACLL);
  }
  if (a10) {
    unint64_t v14 = a10 - 1;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v14 >> 31;
  if (v14 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826BFBCCLL);
  }
  unsigned int v16 = a8;
  uint64_t v19 = (void *)result;
  unint64_t v20 = a11;
  unsigned int v21 = a8;
  do
  {
    LODWORD(v15) = v15 + 1;
    BOOL v22 = v21 > 9;
    v21 /= 0xAu;
  }
  while (v22);
  int v23 = 0;
  unint64_t v24 = a11;
  do
  {
    ++v23;
    BOOL v22 = v24 > 9;
    v24 /= 0xAuLL;
  }
  while (v22);
  uint64_t v25 = 0;
  if (((v23 | v14) & 0x80000000) == 0)
  {
    BOOL v26 = __OFADD__(v14, v23);
    int v27 = v14 + v23;
    BOOL v28 = v26;
    if ((v15 & 0x80000000) == 0 && !v28)
    {
      BOOL v26 = __OFADD__(v15, v27);
      int v29 = v15 + v27;
      if (v26) {
        goto LABEL_32;
      }
      BOOL v26 = __OFADD__(v13, v29);
      int v30 = v13 + v29;
      if (v26) {
        goto LABEL_32;
      }
      BOOL v26 = __OFADD__(v12, v30);
      int v31 = v12 + v30;
      if (v26) {
        goto LABEL_32;
      }
      BOOL v26 = __OFADD__(v11, v31);
      uint64_t v32 = (v11 + v31);
      if (v26) {
        goto LABEL_32;
      }
      if (!v32)
      {
        uint64_t v25 = MEMORY[0x1E4F30960];
        *MEMORY[0x1E4F30960] += 2;
        goto LABEL_33;
      }
      if ((v32 & 0x80000000) != 0)
      {
LABEL_32:
        uint64_t v25 = 0;
      }
      else
      {
        int v43 = v32;
        __n128 result = WTF::tryFastCompactMalloc((WTF *)(v32 + 20));
        uint64_t v25 = v45[0];
        if (v45[0])
        {
          uint64_t v33 = (unsigned char *)(v45[0] + 20);
          unint64_t v34 = a6;
          *(_DWORD *)v45[0] = 2;
          *(_DWORD *)(v25 + 4) = v43;
          *(void *)(v25 + 8) = v25 + 20;
          *(_DWORD *)(v25 + 16) = 4;
          if (v11)
          {
            if (v11 == 1)
            {
              unsigned char *v33 = *a2;
            }
            else
            {
              __n128 result = (uint64_t)memcpy((void *)(v25 + 20), a2, v11);
              uint64_t v33 = (unsigned char *)(v25 + 20);
              unint64_t v34 = a6;
            }
          }
          uint64_t v35 = &v33[v11];
          if (v12)
          {
            if (v12 == 1)
            {
              unsigned char *v35 = *a4;
            }
            else
            {
              __n128 result = (uint64_t)memcpy(&v33[v11], a4, v12);
              unint64_t v34 = a6;
            }
          }
          uint64_t v36 = &v35[v12];
          if (v13)
          {
            if (v13 == 1) {
              *uint64_t v36 = *v34;
            }
            else {
              __n128 result = (uint64_t)memcpy(v36, v34, v13);
            }
          }
          uint64_t v37 = 0;
          unsigned int v38 = v16;
          do
          {
            *((unsigned char *)&v45[1] + v37-- + 4) = (v38 % 0xA) | 0x30;
            BOOL v22 = v38 > 9;
            v38 /= 0xAu;
          }
          while (v22);
          uint64_t v39 = &v36[v13];
          if (v37 + 14 <= 13) {
            __n128 result = (uint64_t)memcpy(&v36[v13], (char *)&v45[1] + v37 + 5, -v37);
          }
          int v40 = 0;
          do
          {
            ++v40;
            BOOL v22 = v16 > 9;
            v16 /= 0xAu;
          }
          while (v22);
          int8x16_t v41 = &v39[v40];
          if (v14)
          {
            if (v14 == 1) {
              *int8x16_t v41 = *a9;
            }
            else {
              __n128 result = (uint64_t)memcpy(&v39[v40], a9, v14);
            }
          }
          uint64_t v42 = 0;
          do
          {
            *((unsigned char *)&v45[3] + v42--) = (v20 % 0xA) | 0x30;
            BOOL v22 = v20 > 9;
            v20 /= 0xAuLL;
          }
          while (v22);
          if (v42 + 26 <= 25) {
            __n128 result = (uint64_t)memcpy(&v41[v14], (char *)&v45[3] + v42 + 1, -v42);
          }
        }
      }
    }
  }
LABEL_33:
  *uint64_t v19 = v25;
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral&,WTF::ASCIILiteral,unsigned long &,WTF::ASCIILiteral,unsigned long &>(_DWORD *result, _OWORD *a2, unsigned char *a3, uint64_t a4, unsigned char *a5, uint64_t a6, unsigned char *a7, uint64_t a8, unint64_t a9, unsigned char *a10, uint64_t a11, unint64_t a12)
{
  v62[1] = *MEMORY[0x1E4F143B8];
  if (a4) {
    unint64_t v12 = a4 - 1;
  }
  else {
    unint64_t v12 = 0;
  }
  if (v12 >> 31) {
    goto LABEL_74;
  }
  if (a6) {
    unint64_t v13 = a6 - 1;
  }
  else {
    unint64_t v13 = 0;
  }
  if (v13 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826C0060);
  }
  if (a8) {
    unint64_t v14 = a8 - 1;
  }
  else {
    unint64_t v14 = 0;
  }
  if (v14 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826C0080);
  }
  if (a11) {
    unint64_t v15 = a11 - 1;
  }
  else {
    unint64_t v15 = 0;
  }
  unint64_t v16 = v15 >> 31;
  if (v15 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826C00A0);
  }
  uint64_t v18 = result;
  unint64_t v19 = a12;
  unint64_t v20 = a9;
  uint64_t v21 = (uint64_t)(result + 30);
  unint64_t v22 = a9;
  do
  {
    LODWORD(v16) = v16 + 1;
    BOOL v23 = v22 > 9;
    v22 /= 0xAuLL;
  }
  while (v23);
  int v24 = 0;
  unint64_t v25 = a12;
  do
  {
    ++v24;
    BOOL v23 = v25 > 9;
    v25 /= 0xAuLL;
  }
  while (v23);
  if (((v24 | v15) & 0x80000000) != 0) {
    goto LABEL_74;
  }
  BOOL v26 = __OFADD__(v15, v24);
  int v27 = v15 + v24;
  BOOL v28 = v26;
  if ((v16 & 0x80000000) != 0) {
    goto LABEL_74;
  }
  if (v28) {
    goto LABEL_74;
  }
  BOOL v26 = __OFADD__(v16, v27);
  int v29 = v16 + v27;
  if (v26) {
    goto LABEL_74;
  }
  BOOL v26 = __OFADD__(v14, v29);
  int v30 = v14 + v29;
  if (v26) {
    goto LABEL_74;
  }
  BOOL v26 = __OFADD__(v13, v30);
  int v31 = v13 + v30;
  if (v26) {
    goto LABEL_74;
  }
  uint64_t v32 = (v12 + v31);
  if (__OFADD__(v12, v31)) {
    goto LABEL_74;
  }
  if (!v32)
  {
    uint64_t v37 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_63;
  }
  if ((v32 & 0x80000000) != 0
    || (unsigned int v58 = v14,
        unsigned int v59 = v15,
        __n128 result = (_DWORD *)WTF::tryFastCompactMalloc((WTF *)(v32 + 20)),
        unint64_t v34 = a3,
        unsigned int v36 = v58,
        unsigned int v35 = v59,
        (uint64_t v37 = v60) == 0))
  {
LABEL_74:
    __break(0xC471u);
    JUMPOUT(0x1826C0040);
  }
  uint64_t v38 = v21;
  uint64_t v39 = a2;
  int v40 = v60 + 5;
  *unint64_t v60 = 2;
  v37[1] = v32;
  *((void *)v37 + 1) = v37 + 5;
  v37[4] = 4;
  if (!v12)
  {
LABEL_37:
    int8x16_t v41 = &v40[v12];
    a2 = v39;
    uint64_t v21 = v38;
    uint64_t v42 = a10;
    if (!v13) {
      goto LABEL_43;
    }
    goto LABEL_41;
  }
  if (v12 == 1)
  {
    *int v40 = *v34;
    goto LABEL_37;
  }
  __n128 result = memcpy(v37 + 5, v34, v12);
  unsigned int v36 = v58;
  unsigned int v35 = v59;
  int8x16_t v41 = &v40[v12];
  a2 = v39;
  uint64_t v21 = v38;
  uint64_t v42 = a10;
  if (!v13) {
    goto LABEL_43;
  }
LABEL_41:
  if (v13 != 1)
  {
    __n128 result = memcpy(v41, a5, v13);
    unsigned int v36 = v58;
    unsigned int v35 = v59;
    size_t v43 = v59;
    unint64_t v44 = &v41[v13];
    if (!v58) {
      goto LABEL_49;
    }
LABEL_46:
    if (v36 == 1)
    {
      *unint64_t v44 = *a7;
    }
    else
    {
      __n128 result = memcpy(v44, a7, v36);
      unsigned int v36 = v58;
      unsigned int v35 = v59;
    }
    goto LABEL_49;
  }
  *int8x16_t v41 = *a5;
LABEL_43:
  size_t v43 = v35;
  unint64_t v44 = &v41[v13];
  if (v36) {
    goto LABEL_46;
  }
LABEL_49:
  uint64_t v45 = 0;
  unint64_t v46 = a9;
  do
  {
    *((unsigned char *)v62 + v45--) = (v46 % 0xA) | 0x30;
    BOOL v23 = v46 > 9;
    v46 /= 0xAuLL;
  }
  while (v23);
  size_t v47 = &v44[v36];
  if (v45 + 26 <= 25)
  {
    __n128 result = memcpy(&v44[v36], (char *)v62 + v45 + 1, -v45);
    unsigned int v35 = v59;
  }
  int v48 = 0;
  do
  {
    ++v48;
    BOOL v23 = v20 > 9;
    v20 /= 0xAuLL;
  }
  while (v23);
  unint64_t v49 = &v47[v48];
  if (v35)
  {
    if (v35 == 1) {
      *unint64_t v49 = *v42;
    }
    else {
      __n128 result = memcpy(v49, v42, v43);
    }
  }
  uint64_t v50 = 0;
  do
  {
    *((unsigned char *)v62 + v50--) = (v19 % 0xA) | 0x30;
    BOOL v23 = v19 > 9;
    v19 /= 0xAuLL;
  }
  while (v23);
  if (v50 + 26 <= 25) {
    __n128 result = memcpy(&v49[v43], (char *)v62 + v50 + 1, -v50);
  }
LABEL_63:
  unint64_t v60 = v37;
  long long v61 = *a2;
  uint64_t v51 = v18[33];
  if (v51 == v18[32])
  {
    unint64_t v52 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v51 + 1, (unint64_t)&v60);
    uint64_t v53 = *((void *)v18 + 15) + 24 * v18[33];
    uint64_t v54 = *(void *)v52;
    *(void *)unint64_t v52 = 0;
    *(void *)uint64_t v53 = v54;
    *(_OWORD *)(v53 + 8) = *(_OWORD *)(v52 + 8);
    __n128 result = v60;
    ++v18[33];
    unint64_t v60 = 0;
    if (result)
    {
      if (*result == 2) {
        __n128 result = (_DWORD *)WTF::StringImpl::destroy();
      }
      else {
        *result -= 2;
      }
    }
  }
  else
  {
    uint64_t v55 = *((void *)v18 + 15) + 24 * v51;
    *(void *)uint64_t v55 = v37;
    *(_OWORD *)(v55 + 8) = v61;
    ++v18[33];
  }
  *((void *)v18 + 11) = *(void *)(*((void *)v18 + 14) + 24);
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,long long &,WTF::ASCIILiteral>(uint64_t a1, long long *a2, unsigned char *a3, uint64_t a4, unint64_t a5, char *a6, uint64_t a7)
{
  if (a4) {
    unint64_t v7 = a4 - 1;
  }
  else {
    unint64_t v7 = 0;
  }
  if (v7 >> 31)
  {
    __break(0xC471u);
    goto LABEL_29;
  }
  if (a7) {
    unint64_t v8 = a7 - 1;
  }
  else {
    unint64_t v8 = 0;
  }
  if (v8 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826C026CLL);
  }
  if ((a5 & 0x8000000000000000) != 0)
  {
    unint64_t v14 = -(uint64_t)a5;
    int v11 = 1;
    do
    {
      ++v11;
      BOOL v15 = v14 >= 0xA;
      v14 /= 0xAuLL;
    }
    while (v15);
  }
  else
  {
    int v11 = 0;
    unint64_t v12 = a5;
    do
    {
      ++v11;
      BOOL v13 = v12 > 9;
      v12 /= 0xAuLL;
    }
    while (v13);
  }
  if (((v11 | v8) & 0x80000000) != 0
    || (BOOL v16 = __OFADD__(v11, v8), v17 = v11 + v8, v16)
    || __OFADD__(v7, v17)
    || (__n128 result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&v24, (int)v7 + v17, a3, v7, a5, a6, v8), !v24))
  {
    __break(0xC471u);
LABEL_29:
    JUMPOUT(0x1826C024CLL);
  }
  unint64_t v25 = v24;
  long long v26 = *a2;
  uint64_t v19 = *(unsigned int *)(a1 + 132);
  if (v19 == *(_DWORD *)(a1 + 128))
  {
    unint64_t v20 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v19 + 1, (unint64_t)&v25);
    uint64_t v21 = *(void *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
    uint64_t v22 = *(void *)v20;
    *(void *)unint64_t v20 = 0;
    *(void *)uint64_t v21 = v22;
    *(_OWORD *)(v21 + 8) = *(_OWORD *)(v20 + 8);
    __n128 result = v25;
    ++*(_DWORD *)(a1 + 132);
    unint64_t v25 = 0;
    if (result)
    {
      if (*result == 2) {
        __n128 result = (_DWORD *)WTF::StringImpl::destroy();
      }
      else {
        *result -= 2;
      }
    }
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 120) + 24 * v19;
    *(void *)uint64_t v23 = v24;
    *(_OWORD *)(v23 + 8) = v26;
    ++*(_DWORD *)(a1 + 132);
  }
  *(void *)(a1 + 88) = *(void *)(*(void *)(a1 + 112) + 24);
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<char,WGSL::Type const&,WTF::ASCIILiteral,WGSL::Type const&,char>(uint64_t a1, long long *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  v47[0] = 0;
  int v48 = -1;
  uint64_t v13 = *(unsigned int *)(a4 + 48);
  if (v13 != -1)
  {
    ((void (*)(_DWORD **, unsigned __int8 *, uint64_t))off_1ECABEE00[v13])(&v49, v47, a4);
    int v48 = v13;
  }
  unint64_t v14 = *(__int8 **)a5;
  uint64_t v15 = *(void *)(a5 + 8);
  v45[0] = 0;
  unsigned int v46 = -1;
  uint64_t v16 = *(unsigned int *)(a6 + 48);
  if (v16 != -1)
  {
    ((void (*)(_DWORD **, unsigned __int8 *, uint64_t))off_1ECABEE00[v16])(&v49, v45, a6);
    unsigned int v46 = v16;
  }
  char v17 = *a7;
  WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v49);
  WGSL::Type::dump(v47, (uint64_t)&v49);
  WTF::StringPrintStream::toString(&v43, (WTF::StringPrintStream *)&v49);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v49);
  if (v15) {
    unint64_t v18 = v15 - 1;
  }
  else {
    unint64_t v18 = 0;
  }
  if (v18 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1826C08C4);
  }
  WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v49);
  WGSL::Type::dump(v45, (uint64_t)&v49);
  WTF::StringPrintStream::toString(&v42, (WTF::StringPrintStream *)&v49);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v49);
  unint64_t v20 = (int *)v42;
  uint64_t v19 = (_DWORD *)v43;
  if (v43)
  {
    int v21 = *(_DWORD *)(v43 + 4);
    if (v42) {
      goto LABEL_11;
    }
LABEL_16:
    uint64_t v23 = 0;
    int v25 = 1;
LABEL_17:
    BOOL v24 = __OFADD__(v18, v25);
    int v26 = v18 + v25;
    char v27 = v24;
    if ((v21 & 0x80000000) == 0 && (v27 & 1) == 0)
    {
      BOOL v24 = __OFADD__(v21, v26);
      int v28 = v21 + v26;
      if (!v24)
      {
        uint64_t v29 = (v28 + 1);
        if (!__OFADD__(v28, 1))
        {
          if (!v43 || (*(unsigned char *)(v43 + 16) & 4) != 0)
          {
            BOOL v31 = !v42 || (*(unsigned char *)(v42 + 16) & 4) != 0;
            if (!v43)
            {
LABEL_36:
              if (v20) {
                *v20 += 2;
              }
              if (v31)
              {
                if (v29)
                {
                  if ((v29 & 0x80000000) == 0)
                  {
                    WTF::tryFastCompactMalloc((WTF *)(v29 + 20));
                    uint64_t v23 = v49;
                    if (!v49) {
                      goto LABEL_85;
                    }
                    *unint64_t v49 = 2;
                    v23[1] = v29;
                    *((void *)v23 + 1) = v23 + 5;
                    _DWORD v23[4] = 4;
                    if (v19) {
                      *v19 += 2;
                    }
                    if (v20) {
                      *v20 += 2;
                    }
                    *((unsigned char *)v23 + 20) = a3;
                    uint64_t v32 = (int8x16_t *)((char *)v23 + 21);
                    if (v19) {
                      *v19 += 2;
                    }
                    unint64_t v49 = v19;
                    if (v20)
                    {
                      *v20 += 2;
                      unint64_t v44 = v20;
                      WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<char,void>>(v32, (uint64_t *)&v49, v14, v18, (uint64_t *)&v44, v17);
                      if (*v20 == 2)
                      {
                        WTF::StringImpl::destroy();
                        if (!v19) {
                          goto LABEL_71;
                        }
                      }
                      else
                      {
                        *v20 -= 2;
                        if (!v19) {
                          goto LABEL_71;
                        }
                      }
                    }
                    else
                    {
                      unint64_t v44 = 0;
                      WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<char,void>>(v32, (uint64_t *)&v49, v14, v18, (uint64_t *)&v44, v17);
                      if (!v19) {
                        goto LABEL_71;
                      }
                    }
                    if (*v19 == 2) {
                      WTF::StringImpl::destroy();
                    }
                    else {
                      *v19 -= 2;
                    }
LABEL_71:
                    if (!v20) {
                      goto LABEL_81;
                    }
                    int v34 = *v20 - 2;
                    if (*v20 == 2)
                    {
                      WTF::StringImpl::destroy();
                      goto LABEL_81;
                    }
                    goto LABEL_80;
                  }
LABEL_54:
                  uint64_t v23 = 0;
                  goto LABEL_85;
                }
LABEL_55:
                uint64_t v23 = (_DWORD *)MEMORY[0x1E4F30960];
                *MEMORY[0x1E4F30960] += 2;
                goto LABEL_85;
              }
              if (!v29) {
                goto LABEL_55;
              }
              if (v29 > 0x7FFFFFEF) {
                goto LABEL_54;
              }
              WTF::tryFastCompactMalloc((WTF *)(2 * v29 + 20));
              uint64_t v23 = v49;
              if (!v49) {
                goto LABEL_85;
              }
              *unint64_t v49 = 2;
              v23[1] = v29;
              *((void *)v23 + 1) = v23 + 5;
              _DWORD v23[4] = 0;
              if (v19) {
                *v19 += 2;
              }
              if (v20) {
                *v20 += 2;
              }
              *((_WORD *)v23 + 10) = a3;
              uint64_t v33 = (uint16x8_t *)((char *)v23 + 22);
              if (v19) {
                *v19 += 2;
              }
              unint64_t v49 = v19;
              if (v20)
              {
                *v20 += 2;
                unint64_t v44 = v20;
                WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<char,void>>(v33, (uint64_t *)&v49, (unint64_t)v14, v18, (uint64_t *)&v44, v17);
                if (*v20 == 2)
                {
                  WTF::StringImpl::destroy();
                  if (!v19)
                  {
LABEL_78:
                    if (!v20) {
                      goto LABEL_81;
                    }
                    int v34 = *v20 - 2;
                    if (*v20 == 2)
                    {
                      WTF::StringImpl::destroy();
                      if (!v19) {
                        goto LABEL_85;
                      }
                      goto LABEL_82;
                    }
LABEL_80:
                    int *v20 = v34;
LABEL_81:
                    if (!v19) {
                      goto LABEL_85;
                    }
LABEL_82:
                    if (*v19 == 2) {
                      WTF::StringImpl::destroy();
                    }
                    else {
                      *v19 -= 2;
                    }
LABEL_85:
                    if (v20)
                    {
                      if (*v20 == 2) {
                        WTF::StringImpl::destroy();
                      }
                      else {
                        *v20 -= 2;
                      }
                    }
                    if (v19)
                    {
                      if (*v19 != 2)
                      {
                        *v19 -= 2;
                        int v30 = (_DWORD *)v42;
                        uint64_t v42 = 0;
                        if (!v30) {
                          goto LABEL_97;
                        }
                        goto LABEL_95;
                      }
                      WTF::StringImpl::destroy();
                    }
                    goto LABEL_94;
                  }
                }
                else
                {
                  *v20 -= 2;
                  if (!v19) {
                    goto LABEL_78;
                  }
                }
              }
              else
              {
                unint64_t v44 = 0;
                WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<char,void>>(v33, (uint64_t *)&v49, (unint64_t)v14, v18, (uint64_t *)&v44, v17);
                if (!v19) {
                  goto LABEL_78;
                }
              }
              if (*v19 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *v19 -= 2;
              }
              goto LABEL_78;
            }
          }
          else
          {
            BOOL v31 = 0;
          }
          *(_DWORD *)v43 += 2;
          goto LABEL_36;
        }
      }
LABEL_25:
      uint64_t v23 = 0;
      int v30 = (_DWORD *)v42;
      uint64_t v42 = 0;
      if (!v30) {
        goto LABEL_97;
      }
      goto LABEL_95;
    }
    goto LABEL_94;
  }
  int v21 = 0;
  if (!v42) {
    goto LABEL_16;
  }
LABEL_11:
  int v22 = *(_DWORD *)(v42 + 4);
  if (v22 < 0) {
    goto LABEL_25;
  }
  uint64_t v23 = 0;
  BOOL v24 = __OFADD__(v22, 1);
  int v25 = v22 + 1;
  if (!v24) {
    goto LABEL_17;
  }
LABEL_94:
  int v30 = (_DWORD *)v42;
  uint64_t v42 = 0;
  if (!v30) {
    goto LABEL_97;
  }
LABEL_95:
  if (*v30 == 2)
  {
    WTF::StringImpl::destroy();
    __n128 result = (_DWORD *)v43;
    uint64_t v43 = 0;
    if (!result) {
      goto LABEL_102;
    }
    goto LABEL_100;
  }
  *v30 -= 2;
LABEL_97:
  __n128 result = (_DWORD *)v43;
  uint64_t v43 = 0;
  if (!result)
  {
LABEL_102:
    if (v23) {
      goto LABEL_103;
    }
LABEL_115:
    __break(0xC471u);
    JUMPOUT(0x1826C0878);
  }
LABEL_100:
  if (*result != 2)
  {
    *result -= 2;
    goto LABEL_102;
  }
  __n128 result = (_DWORD *)WTF::StringImpl::destroy();
  if (!v23) {
    goto LABEL_115;
  }
LABEL_103:
  unint64_t v49 = v23;
  long long v50 = *a2;
  uint64_t v36 = *(unsigned int *)(a1 + 132);
  if (v36 != *(_DWORD *)(a1 + 128))
  {
    uint64_t v41 = *(void *)(a1 + 120) + 24 * v36;
    *(void *)uint64_t v41 = v23;
    *(_OWORD *)(v41 + 8) = v50;
    ++*(_DWORD *)(a1 + 132);
    unint64_t v49 = 0;
LABEL_109:
    uint64_t v40 = v46;
    if (v46 == -1) {
      goto LABEL_111;
    }
    goto LABEL_110;
  }
  unint64_t v37 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v36 + 1, (unint64_t)&v49);
  uint64_t v38 = *(void *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  uint64_t v39 = *(void *)v37;
  *(void *)unint64_t v37 = 0;
  *(void *)uint64_t v38 = v39;
  *(_OWORD *)(v38 + 8) = *(_OWORD *)(v37 + 8);
  __n128 result = v49;
  ++*(_DWORD *)(a1 + 132);
  unint64_t v49 = 0;
  if (!result) {
    goto LABEL_109;
  }
  if (*result != 2)
  {
    *result -= 2;
    uint64_t v40 = v46;
    if (v46 == -1) {
      goto LABEL_111;
    }
LABEL_110:
    __n128 result = (_DWORD *)((uint64_t (*)(int **, unsigned __int8 *))off_1ECABED88[v40])(&v44, v45);
    goto LABEL_111;
  }
  __n128 result = (_DWORD *)WTF::StringImpl::destroy();
  uint64_t v40 = v46;
  if (v46 != -1) {
    goto LABEL_110;
  }
LABEL_111:
  unsigned int v46 = -1;
  if (v48 != -1) {
    __n128 result = (_DWORD *)((uint64_t (*)(int **, unsigned __int8 *))off_1ECABED88[v48])(&v44, v47);
  }
  *(void *)(a1 + 88) = *(void *)(*(void *)(a1 + 112) + 24);
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,unsigned long>(uint64_t a1, long long *a2, unsigned char *a3, uint64_t a4, unint64_t a5)
{
  __n128 result = (_DWORD *)WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)&v13, a3, a4, a5);
  if (v13)
  {
    unint64_t v14 = v13;
    long long v15 = *a2;
    uint64_t v8 = *(unsigned int *)(a1 + 132);
    if (v8 == *(_DWORD *)(a1 + 128))
    {
      unint64_t v9 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v8 + 1, (unint64_t)&v14);
      uint64_t v10 = *(void *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
      uint64_t v11 = *(void *)v9;
      *(void *)unint64_t v9 = 0;
      *(void *)uint64_t v10 = v11;
      *(_OWORD *)(v10 + 8) = *(_OWORD *)(v9 + 8);
      __n128 result = v14;
      ++*(_DWORD *)(a1 + 132);
      unint64_t v14 = 0;
      if (result)
      {
        if (*result == 2) {
          __n128 result = (_DWORD *)WTF::StringImpl::destroy();
        }
        else {
          *result -= 2;
        }
      }
    }
    else
    {
      uint64_t v12 = *(void *)(a1 + 120) + 24 * v8;
      *(void *)uint64_t v12 = v13;
      *(_OWORD *)(v12 + 8) = v15;
      ++*(_DWORD *)(a1 + 132);
    }
    *(void *)(a1 + 88) = *(void *)(*(void *)(a1 + 112) + 24);
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t *WTF::HashTable<WGSL::AST::Expression const*,WTF::KeyValuePair<WGSL::AST::Expression const*,WTF::Vector<WTF::Function<std::optional<WTF::String> ()(WGSL::ConstantValue const&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Expression const*,WTF::Vector<WTF::Function<std::optional<WTF::String> ()(WGSL::ConstantValue const&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WGSL::AST::Expression const*>,WTF::HashMap<WGSL::AST::Expression const*,WTF::Vector<WTF::Function<std::optional<WTF::String> ()(WGSL::ConstantValue const&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WGSL::AST::Expression const*>,WTF::HashTraits<WGSL::AST::Expression const*>,WTF::HashTraits<WTF::Vector<WTF::Function<std::optional<WTF::String> ()(WGSL::ConstantValue const&)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Expression const*>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = v5;
    uint64_t v51 = v5;
    uint64_t v52 = v4;
    do
    {
      uint64_t v12 = (uint64_t *)(v4 + 24 * v9);
      uint64_t v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          uint64_t v20 = *a1;
          uint64_t v55 = v10;
          if (*a1) {
            int v21 = *(_DWORD *)(v20 - 8);
          }
          else {
            int v21 = 0;
          }
          unint64_t v23 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          unint64_t v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
          unint64_t v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
          unsigned int v26 = v21 & ((v25 >> 31) ^ v25);
          int v27 = 1;
          do
          {
            unsigned int v28 = v26;
            uint64_t v29 = (uint64_t *)(v20 + 24 * v26);
            unsigned int v26 = (v26 + v27++) & v21;
          }
          while (*v29);
          unsigned int v30 = v28;
          uint64_t v31 = v20 + 24 * v28;
          unsigned int v34 = *(_DWORD *)(v31 + 20);
          uint64_t v33 = (_DWORD *)(v31 + 20);
          uint64_t v32 = v34;
          unsigned int v35 = (WTF **)(v33 - 3);
          if (v34)
          {
            uint64_t v36 = *v35;
            uint64_t v37 = 8 * v32;
            do
            {
              uint64_t v38 = *(void *)v36;
              *(void *)uint64_t v36 = 0;
              if (v38) {
                (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
              }
              uint64_t v36 = (WTF *)((char *)v36 + 8);
              v37 -= 8;
            }
            while (v37);
          }
          uint64_t v39 = *v35;
          if (*v35)
          {
            unsigned char *v35 = 0;
            *(_DWORD *)(v20 + 24 * v30 + 16) = 0;
            WTF::fastFree(v39, v8);
          }
          *uint64_t v29 = *v12;
          uint64_t v4 = v52;
          uint64_t v40 = v52 + 24 * v9;
          unsigned char *v35 = 0;
          *(void *)(v33 - 1) = 0;
          uint64_t v42 = *(WTF **)(v40 + 8);
          uint64_t v41 = v40 + 8;
          *(void *)uint64_t v41 = 0;
          unsigned char *v35 = v42;
          int v43 = *(_DWORD *)(v41 + 8);
          *(_DWORD *)(v41 + 8) = 0;
          *(_DWORD *)(v20 + 24 * v30 + 16) = v43;
          int v44 = *(_DWORD *)(v41 + 12);
          *(_DWORD *)(v41 + 12) = 0;
          _DWORD *v33 = v44;
          uint64_t v45 = *(unsigned int *)(v41 + 12);
          if (v45)
          {
            unsigned int v46 = *(uint64_t **)v41;
            uint64_t v47 = 8 * v45;
            do
            {
              uint64_t v48 = *v46;
              *unsigned int v46 = 0;
              if (v48) {
                (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
              }
              ++v46;
              v47 -= 8;
            }
            while (v47);
          }
          unint64_t v49 = *(WTF **)v41;
          if (*(void *)v41)
          {
            *(void *)uint64_t v41 = 0;
            *(_DWORD *)(v41 + 8) = 0;
            WTF::fastFree(v49, v8);
          }
          uint64_t v10 = v55;
          if (v12 == a3) {
            uint64_t v10 = v29;
          }
          uint64_t v11 = v51;
        }
        else
        {
          uint64_t v14 = v4 + 24 * v9;
          long long v15 = (WTF **)(v14 + 8);
          uint64_t v16 = *(unsigned int *)(v14 + 20);
          if (v16)
          {
            char v17 = *v15;
            uint64_t v18 = 8 * v16;
            do
            {
              uint64_t v19 = *(void *)v17;
              *(void *)char v17 = 0;
              if (v19) {
                (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
              }
              char v17 = (WTF *)((char *)v17 + 8);
              v18 -= 8;
            }
            while (v18);
          }
          int v22 = *v15;
          if (*v15)
          {
            _DWORD *v15 = 0;
            *(_DWORD *)(v4 + 24 * v9 + 16) = 0;
            WTF::fastFree(v22, v8);
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    uint64_t v10 = 0;
    __n128 result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t WTF::Detail::CallableWrapper<WGSL::TypeChecker::visit(WGSL::AST::ArrayTypeExpression &)::$_0,std::optional<WTF::String>,WGSL::ConstantValue const&>::call@<X0>(uint64_t *a1@<X1>, unsigned char *a2@<X8>)
{
  int v3 = *((_DWORD *)a1 + 4);
  switch(v3)
  {
    case 5:
      if (*a1 > 0) {
        goto LABEL_7;
      }
LABEL_9:
      uint64_t result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      a2[8] = 1;
      return result;
    case 4:
      if (*(_DWORD *)a1) {
        goto LABEL_7;
      }
      goto LABEL_9;
    case 3:
      if (*(int *)a1 <= 0) {
        goto LABEL_9;
      }
LABEL_7:
      *a2 = 0;
      a2[8] = 0;
      return result;
  }
  uint64_t result = 151;
  __break(0xC471u);
  return result;
}

WTF *WTF::HashMap<WTF::String,WGSL::Binding,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Binding>,WTF::HashTableTraits>::add<WGSL::Binding const&>(uint64_t a1, uint64_t *a2, const WTF::StringImpl **a3, long long *a4)
{
  uint64_t v8 = *a2;
  if (!*a2)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Binding>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Binding>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Binding,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Binding>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0);
    uint64_t v8 = *a2;
    if (!*a2)
    {
      int v9 = 0;
      uint64_t v10 = *a3;
      unsigned int v11 = *((_DWORD *)*a3 + 4);
      if (v11 >= 0x100) {
        goto LABEL_4;
      }
LABEL_6:
      unsigned int v12 = WTF::StringImpl::hashSlowCase(v10);
      goto LABEL_7;
    }
  }
  int v9 = *(_DWORD *)(v8 - 8);
  uint64_t v10 = *a3;
  unsigned int v11 = *((_DWORD *)*a3 + 4);
  if (v11 < 0x100) {
    goto LABEL_6;
  }
LABEL_4:
  unsigned int v12 = v11 >> 8;
LABEL_7:
  uint64_t v13 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v15 = v12 & v9;
    uint64_t v16 = (WTF *)(v8 + (v15 << 6));
    uint64_t result = *(WTF **)v16;
    if (*(void *)v16 == -1)
    {
      uint64_t v13 = (WTF *)(v8 + (v15 << 6));
      goto LABEL_9;
    }
    if (!result)
    {
      if (v13)
      {
        uint64_t result = 0;
        *((_OWORD *)v13 + 2) = 0u;
        *((_OWORD *)v13 + 3) = 0u;
        *(_OWORD *)uint64_t v13 = 0u;
        *((_OWORD *)v13 + 1) = 0u;
        --*(_DWORD *)(*a2 - 16);
        uint64_t v16 = v13;
      }
      uint64_t v20 = *a3;
      if (*a3) {
        *(_DWORD *)v20 += 2;
      }
      *(void *)uint64_t v16 = v20;
      long long v30 = *a4;
      char v31 = *((unsigned char *)a4 + 16);
      v32[0] = 0;
      char v34 = 0;
      int v21 = *((unsigned __int8 *)a4 + 48);
      if (*((unsigned char *)a4 + 48))
      {
        int v33 = -1;
        uint64_t v8 = *((unsigned int *)a4 + 10);
        if (v8 != -1)
        {
          uint64_t result = (WTF *)((uint64_t (*)(char **, unsigned char *, char *))off_1ECABEE88[v8])(&v35, v32, (char *)a4 + 24);
          int v33 = v8;
        }
        int v21 = 1;
        char v34 = 1;
      }
      *((unsigned char *)v16 + 24) = v31;
      *(_OWORD *)((char *)v16 + 8) = v30;
      int v22 = (char *)v16 + 32;
      if (*((unsigned __int8 *)v16 + 56) != v21)
      {
        if (*((unsigned char *)v16 + 56))
        {
          uint64_t v24 = *((unsigned int *)v16 + 12);
          if (v24 != -1) {
            uint64_t result = (WTF *)((uint64_t (*)(char **, char *))off_1ECABEC60[v24])(&v35, v22);
          }
          *((_DWORD *)v16 + 12) = -1;
          *((unsigned char *)v16 + 56) = 0;
        }
        else
        {
          *((unsigned char *)v16 + 32) = 0;
          *((_DWORD *)v16 + 12) = -1;
          if (v8 != -1)
          {
            uint64_t result = (WTF *)((uint64_t (*)(char **, char *, unsigned char *))off_1ECABECB8[v8])(&v35, v22, v32);
            *((_DWORD *)v16 + 12) = v8;
          }
          *((unsigned char *)v16 + 56) = 1;
        }
        goto LABEL_39;
      }
      if (!*((unsigned char *)v16 + 56)) {
        goto LABEL_42;
      }
      uint64_t v23 = *((unsigned int *)v16 + 12);
      if (v23 == -1)
      {
        if (v8 == -1) {
          goto LABEL_39;
        }
      }
      else if (v8 == -1)
      {
        uint64_t result = (WTF *)((uint64_t (*)(char **, char *))off_1ECABEC60[v23])(&v35, v22);
        *((_DWORD *)v16 + 12) = -1;
LABEL_39:
        if (v34 && v33 != -1) {
          uint64_t result = (WTF *)((uint64_t (*)(char **, unsigned char *))off_1ECABEC60[v33])(&v35, v32);
        }
LABEL_42:
        if (*a2)
        {
          ++*(_DWORD *)(*a2 - 12);
          uint64_t v27 = *a2;
          if (*a2) {
            goto LABEL_44;
          }
        }
        else
        {
          MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
          uint64_t v27 = *a2;
          if (*a2)
          {
LABEL_44:
            uint64_t v28 = (*(_DWORD *)(v27 - 16) + *(_DWORD *)(v27 - 12));
            unint64_t v29 = *(unsigned int *)(v27 - 4);
            if (v29 <= 0x400) {
              goto LABEL_45;
            }
            goto LABEL_51;
          }
        }
        uint64_t v28 = *(unsigned int *)(v27 - 16);
        unint64_t v29 = *(unsigned int *)(v27 - 4);
        if (v29 <= 0x400)
        {
LABEL_45:
          if (3 * v29 > 4 * v28)
          {
LABEL_54:
            uint64_t v26 = v27 + (v29 << 6);
            char v25 = 1;
            goto LABEL_55;
          }
          if (!v29)
          {
            uint64_t result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Binding>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Binding>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Binding,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Binding>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, (WTF::StringImpl **)v16);
            uint64_t v16 = result;
            uint64_t v27 = *a2;
            if (!*a2)
            {
LABEL_48:
              unint64_t v29 = 0;
              goto LABEL_54;
            }
LABEL_53:
            unint64_t v29 = *(unsigned int *)(v27 - 4);
            goto LABEL_54;
          }
LABEL_52:
          uint64_t result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Binding>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Binding>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Binding,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Binding>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v29 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v29)), (WTF::StringImpl **)v16);
          uint64_t v16 = result;
          uint64_t v27 = *a2;
          if (!*a2) {
            goto LABEL_48;
          }
          goto LABEL_53;
        }
LABEL_51:
        if (v29 > 2 * v28) {
          goto LABEL_54;
        }
        goto LABEL_52;
      }
      unsigned int v35 = (char *)v16 + 32;
      uint64_t result = (WTF *)((uint64_t (*)(char **))off_1ECABEF38[v8])(&v35);
      goto LABEL_39;
    }
    uint64_t result = (WTF *)WTF::equal(result, *a3, (const WTF::StringImpl *)a3);
    if (result) {
      break;
    }
LABEL_9:
    unsigned int v12 = i + v15;
  }
  uint64_t v18 = *a2;
  if (*a2) {
    uint64_t v19 = *(unsigned int *)(v18 - 4);
  }
  else {
    uint64_t v19 = 0;
  }
  char v25 = 0;
  uint64_t v26 = v18 + (v19 << 6);
LABEL_55:
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v26;
  *(unsigned char *)(a1 + 16) = v25;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Binding>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Binding>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Binding,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Binding>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(((unint64_t)a2 << 6) | 0x10));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), (unint64_t)a2 << 6);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v5;
    uint64_t v44 = v5;
    while (1)
    {
      uint64_t v14 = (WTF::StringImpl **)(v4 + (v11 << 6));
      uint64_t v15 = *v14;
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (v15)
        {
          uint64_t v19 = *a1;
          if (*a1)
          {
            int v20 = *(_DWORD *)(v19 - 8);
            unsigned int v21 = *((_DWORD *)v15 + 4);
            if (v21 >= 0x100) {
              goto LABEL_23;
            }
LABEL_26:
            unsigned int v22 = WTF::StringImpl::hashSlowCase(v15);
          }
          else
          {
            int v20 = 0;
            unsigned int v21 = *((_DWORD *)v15 + 4);
            if (v21 < 0x100) {
              goto LABEL_26;
            }
LABEL_23:
            unsigned int v22 = v21 >> 8;
          }
          int v23 = 0;
          do
          {
            uint64_t v24 = v22 & v20;
            unsigned int v22 = ++v23 + v24;
          }
          while (*(void *)(v19 + (v24 << 6)));
          uint64_t v25 = v19 + (v24 << 6);
          uint64_t v26 = (unsigned char *)(v25 + 56);
          uint64_t v47 = v12;
          if (*(unsigned char *)(v25 + 56))
          {
            uint64_t v28 = (_DWORD *)(v25 + 48);
            uint64_t v27 = *(unsigned int *)(v25 + 48);
            if (v27 == -1)
            {
              *uint64_t v28 = -1;
              *(void *)uint64_t v25 = 0;
            }
            else
            {
              ((void (*)(char *, uint64_t))off_1ECABEC60[v27])(&v50, v25 + 32);
              unint64_t v29 = *(_DWORD **)v25;
              *uint64_t v28 = -1;
              *(void *)uint64_t v25 = 0;
              if (v29)
              {
                if (*v29 == 2) {
                  WTF::StringImpl::destroy();
                }
                else {
                  *v29 -= 2;
                }
              }
            }
          }
          else
          {
            *(void *)uint64_t v25 = 0;
          }
          long long v30 = *v14;
          *uint64_t v14 = 0;
          *(void *)uint64_t v25 = v30;
          uint64_t v31 = v19 + (v24 << 6);
          uint64_t v32 = v4 + (v11 << 6);
          long long v33 = *(_OWORD *)(v32 + 8);
          *(unsigned char *)(v31 + 24) = *(unsigned char *)(v32 + 24);
          *(_OWORD *)(v31 + 8) = v33;
          *(unsigned char *)(v25 + 32) = 0;
          unsigned char *v26 = 0;
          char v34 = (unsigned char *)(v32 + 56);
          if (*(unsigned char *)(v32 + 56))
          {
            uint64_t v35 = v4;
            uint64_t v36 = (unsigned char *)(v32 + 32);
            *(_DWORD *)(v31 + 48) = -1;
            uint64_t v37 = (_DWORD *)(v31 + 48);
            unsigned int v40 = *(_DWORD *)(v32 + 48);
            uint64_t v39 = (_DWORD *)(v32 + 48);
            uint64_t v38 = v40;
            if (v40 != -1)
            {
              ((void (*)(char *, uint64_t, unsigned char *))off_1ECABECB8[v38])(&v51, v25 + 32, v34 - 24);
              uint64_t v36 = v34 - 24;
              *uint64_t v37 = v38;
            }
            unsigned char *v26 = 1;
            uint64_t v4 = v35;
            if (*v34)
            {
              uint64_t v41 = *v39;
              if (v41 != -1) {
                ((void (*)(char *, unsigned char *))off_1ECABEC60[v41])(&v49, v36);
              }
              *uint64_t v39 = -1;
            }
          }
          uint64_t v42 = *v14;
          *uint64_t v14 = 0;
          uint64_t v12 = v47;
          uint64_t v13 = v44;
          if (v42)
          {
            if (*(_DWORD *)v42 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *(_DWORD *)v42 -= 2;
            }
          }
          if (v14 == a3) {
            uint64_t v12 = v25;
          }
          goto LABEL_11;
        }
        uint64_t v16 = v4 + (v11 << 6);
        if (*(unsigned char *)(v16 + 56))
        {
          uint64_t v18 = (_DWORD *)(v16 + 48);
          uint64_t v17 = *(unsigned int *)(v16 + 48);
          if (v17 != -1)
          {
            ((void (*)(char *, uint64_t))off_1ECABEC60[v17])(&v48, v16 + 32);
            uint64_t v15 = *v14;
          }
          *uint64_t v18 = -1;
        }
        *uint64_t v14 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *(_DWORD *)v15 -= 2;
          }
        }
      }
LABEL_11:
      if (++v11 == v13) {
        goto LABEL_48;
      }
    }
  }
  uint64_t v12 = 0;
  uint64_t result = 0;
  if (v4)
  {
LABEL_48:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v12;
  }
  return result;
}

void std::__function::__func<WGSL::TypeChecker::allocateTextureStorageConstructor(WTF::ASCIILiteral,WGSL::Types::TextureStorage::Kind)::$_0,std::allocator<WGSL::TypeChecker::allocateTextureStorageConstructor(WTF::ASCIILiteral,WGSL::Types::TextureStorage::Kind)::$_0>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>::~__func()
{
}

__n128 std::__function::__func<WGSL::TypeChecker::allocateTextureStorageConstructor(WTF::ASCIILiteral,WGSL::Types::TextureStorage::Kind)::$_0,std::allocator<WGSL::TypeChecker::allocateTextureStorageConstructor(WTF::ASCIILiteral,WGSL::Types::TextureStorage::Kind)::$_0>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1ECABF130;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<WGSL::TypeChecker::allocateTextureStorageConstructor(WTF::ASCIILiteral,WGSL::Types::TextureStorage::Kind)::$_0,std::allocator<WGSL::TypeChecker::allocateTextureStorageConstructor(WTF::ASCIILiteral,WGSL::Types::TextureStorage::Kind)::$_0>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1ECABF130;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<WGSL::TypeChecker::allocateTextureStorageConstructor(WTF::ASCIILiteral,WGSL::Types::TextureStorage::Kind)::$_0,std::allocator<WGSL::TypeChecker::allocateTextureStorageConstructor(WTF::ASCIILiteral,WGSL::Types::TextureStorage::Kind)::$_0>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(_DWORD *)(a2 + 108) != 2)
  {
    WGSL::TypeChecker::typeError<char,WGSL::AST::Identifier &,WTF::ASCIILiteral>(*(void *)(a1 + 8), (long long *)(a2 + 8), 39, a2 + 64, (int8x16_t *)"' requires 2 template argument", 31);
    return *(void *)(*(void *)(v3 + 112) + 24);
  }
  uint64_t v5 = **(void **)(a2 + 96);
  __int16 v6 = *(_WORD *)(v3 + 104);
  *(_WORD *)(v3 + 104) = 3;
  WGSL::AST::Visitor::visit((unsigned char *)v3, v5);
  uint64_t v8 = *(const WGSL::Type **)(v3 + 88);
  *(void *)(v5 + 24) = v8;
  *(void *)(v3 + 88) = 0;
  *(_WORD *)(v3 + 104) = v6;
  uint64_t v9 = *(void *)(v3 + 112);
  uint64_t v10 = *(WGSL **)(v9 + 24);
  if (v10 == v8) {
    return *(void *)(*(void *)(v3 + 112) + 24);
  }
  uint64_t v11 = *(WGSL **)(v9 + 128);
  BOOL v12 = v8 == v11 || v10 == v11;
  if (!v12 && WGSL::conversionRank(v11, v8, v7) == -1)
  {
    *(void *)&long long v21 = "' as texel format";
    *((void *)&v21 + 1) = 18;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>(v3, 0, (_OWORD *)(v5 + 8), (int8x16_t *)"cannot use '", 13, (uint64_t)v8, &v21);
    return *(void *)(*(void *)(v3 + 112) + 24);
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5) != 22)
  {
    __break(0xC471u);
    JUMPOUT(0x1826C17A8);
  }
  uint64_t v13 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WGSL::TexelFormat> [17]>::tryGet<WTF::String>((unsigned __int8 ***)WGSL::parseTexelFormat(WTF::String const&)::__map, (uint64_t *)(v5 + 88));
  if (*(_DWORD *)(a2 + 108) <= 1u)
  {
    __break(0xC471u);
    JUMPOUT(0x1826C17B0);
  }
  uint64_t v14 = *(unsigned __int8 *)v13;
  unsigned __int16 v15 = WGSL::TypeChecker::accessMode((WGSL::TypeChecker *)v3, *(WGSL::AST::Expression **)(*(void *)(a2 + 96) + 8));
  if (v15 <= 0xFFu) {
    return *(void *)(*(void *)(v3 + 112) + 24);
  }
  uint64_t v16 = *(void *)(v3 + 112);
  *(void *)&long long v21 = (v14 << 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 16) << 8) | ((unint64_t)v15 << 32) | 5;
  *((void *)&v21 + 1) = 0;
  uint64_t v17 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v16 + 16), (unsigned __int8 *)&v21);
  uint64_t v18 = *(unsigned __int8 **)(v16 + 16);
  if (v18) {
    v18 += 24 * *((unsigned int *)v18 - 1);
  }
  if (v18 == v17 || (uint64_t v19 = *((void *)v17 + 2)) == 0) {
    WGSL::TypeStore::allocateType<WGSL::Types::TextureStorage,WGSL::Types::TextureStorage::Kind &,WGSL::TexelFormat &,WGSL::AccessMode &>();
  }
  return v19;
}

uint64_t WGSL::conversionRank(WGSL *this, const WGSL::Type *a2, const WGSL::Type *a3)
{
  if (this == a2) {
    return 0;
  }
  uint64_t v3 = a2;
  uint64_t v4 = this;
  while (1)
  {
LABEL_3:
    if (!v4)
    {
      while (1)
      {
        BOOL v5 = v3 == 0;
        if (!v3 || *((_DWORD *)v3 + 12) != 10) {
          break;
        }
        if (*((unsigned char *)v3 + 1) == 2) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v3 = (const WGSL::Type *)*((void *)v3 + 1);
        if (!v3) {
          return 0;
        }
      }
      goto LABEL_12;
    }
    if (*((_DWORD *)v4 + 12) != 10) {
      break;
    }
    if (*((unsigned char *)v4 + 1) == 2) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v4 = (WGSL *)*((void *)v4 + 1);
    if (v4 == v3) {
      return 0;
    }
  }
  while (1)
  {
    BOOL v5 = v3 == 0;
    if (!v3 || *((_DWORD *)v3 + 12) != 10) {
      break;
    }
    if (*((unsigned char *)v3 + 1) == 2) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v3 = (const WGSL::Type *)*((void *)v3 + 1);
    if (v4 == v3) {
      return 0;
    }
  }
LABEL_12:
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  int v6 = *((_DWORD *)v4 + 12);
  switch(v6)
  {
    case 0:
      if (v5 || *((_DWORD *)v3 + 12)) {
        return 0xFFFFFFFFLL;
      }
      int v17 = *(unsigned __int8 *)v3 | (*(unsigned __int8 *)v4 << 8);
      switch(v17)
      {
        case 1:
          uint64_t result = 3;
          break;
        case 2:
          uint64_t result = 4;
          break;
        case 3:
          uint64_t result = 5;
          break;
        case 4:
          uint64_t result = 7;
          break;
        case 5:
          uint64_t result = 6;
          break;
        default:
          if (v17 == 773)
          {
            uint64_t result = 1;
          }
          else
          {
            if (v17 != 772) {
              return 0xFFFFFFFFLL;
            }
            uint64_t result = 2;
          }
          break;
      }
      return result;
    case 1:
      if (v5 || *((_DWORD *)v3 + 12) != 1 || *((unsigned __int8 *)v4 + 8) != *((unsigned __int8 *)v3 + 8)) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v3 = *(const WGSL::Type **)v3;
      uint64_t v4 = *(WGSL **)v4;
      if (v4 == v3) {
        return 0;
      }
      goto LABEL_3;
    case 2:
      if (v5
        || *((_DWORD *)v3 + 12) != 2
        || *((unsigned __int8 *)v4 + 8) != *((unsigned __int8 *)v3 + 8)
        || *((unsigned __int8 *)v4 + 9) != *((unsigned __int8 *)v3 + 9))
      {
        return 0xFFFFFFFFLL;
      }
      uint64_t v3 = *(const WGSL::Type **)v3;
      uint64_t v4 = *(WGSL **)v4;
      if (v4 == v3) {
        return 0;
      }
      goto LABEL_3;
    case 3:
      if (v5 || *((_DWORD *)v3 + 12) != 3) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v10 = *((unsigned int *)v4 + 4);
      int v11 = *((_DWORD *)v3 + 4);
      BOOL v13 = v11 == v10 && v11 != -1;
      if (v10 != -1 && v13)
      {
        uint64_t v19 = &v18;
        if (((uint64_t (*)(char **, char *, char *))off_1ECABF168[v10])(&v19, (char *)v4 + 8, (char *)v3 + 8))return 0xFFFFFFFFLL; {
        goto LABEL_56;
        }
      }
      BOOL v14 = v11 == -1;
      if (v10 == -1) {
        BOOL v15 = v14;
      }
      else {
        BOOL v15 = v13;
      }
      if (v15)
      {
LABEL_56:
        uint64_t v3 = *(const WGSL::Type **)v3;
        uint64_t v4 = *(WGSL **)v4;
        if (v4 == v3) {
          return 0;
        }
        goto LABEL_3;
      }
      return 0xFFFFFFFFLL;
    default:
      if (v6 != 5) {
        BOOL v5 = 1;
      }
      if (v5) {
        return 0xFFFFFFFFLL;
      }
      if (*((_DWORD *)v3 + 12) != 5) {
        return 0xFFFFFFFFLL;
      }
      int v7 = *((unsigned __int8 *)v4 + 8);
      if (v7 != *((unsigned __int8 *)v3 + 8)) {
        return 0xFFFFFFFFLL;
      }
      if (v7 == 1)
      {
        uint64_t v8 = *((void *)v4 + 2);
        if (!*(_DWORD *)v8)
        {
          __break(0xC471u);
          JUMPOUT(0x1826C1C60);
        }
        uint64_t v9 = *((void *)v3 + 2);
        if (!*(_DWORD *)v9)
        {
          __break(0xC471u);
          JUMPOUT(0x1826C1C80);
        }
      }
      else
      {
        if (*((unsigned char *)v4 + 8)) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v8 = *((void *)v4 + 2);
        if (!*(_DWORD *)v8)
        {
          __break(0xC471u);
          JUMPOUT(0x1826C1C20);
        }
        uint64_t v9 = *((void *)v3 + 2);
        if (!*(_DWORD *)v9)
        {
          __break(0xC471u);
          JUMPOUT(0x1826C1C40);
        }
      }
      uint64_t v3 = *(const WGSL::Type **)(v9 + 8);
      uint64_t v4 = *(WGSL **)(v8 + 8);
      if (v4 == v3) {
        return 0;
      }
      goto LABEL_3;
  }
}

void WGSL::Type::toString(WGSL::Type *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)v4);
  WGSL::Type::dump((unsigned __int8 *)this, (uint64_t)v4);
  WTF::StringPrintStream::toString(a2, (WTF::StringPrintStream *)v4);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)v4);
}

uint64_t WGSL::Type::packing(WGSL::Type *this)
{
  if (!this) {
    return 2;
  }
  while (1)
  {
    int v1 = *((_DWORD *)this + 12);
    if (v1 != 10) {
      break;
    }
    this = (WGSL::Type *)*((void *)this + 1);
    if (!this) {
      return 2;
    }
  }
  if (v1 == 1)
  {
    if (*((unsigned char *)this + 8) == 3) {
      return 17;
    }
    return 2;
  }
  if (v1 != 3)
  {
    if (v1 == 4 && *(unsigned char *)(*(void *)this + 88) == 6) {
      return 5;
    }
    return 2;
  }
  unsigned int v3 = WGSL::Type::packing(*(WGSL::Type **)this);
  return (8 * (v3 & 1)) | v3;
}

uint64_t WGSL::Type::isConstructible(WGSL::Type *this)
{
  int v1 = *((_DWORD *)this + 12);
  if (v1 == -1) {
    uint64_t v2 = -1;
  }
  else {
    uint64_t v2 = *((unsigned int *)this + 12);
  }
  if (v2 == 3)
  {
    while (1)
    {
      if (v1 != 3)
      {
LABEL_49:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_50:
        __break(1u);
        JUMPOUT(0x1826C273CLL);
      }
      if (*((_DWORD *)this + 4) != 1) {
        return 0;
      }
      this = *(WGSL::Type **)this;
      int v1 = *((_DWORD *)this + 12);
      if (v1 == -1) {
        uint64_t v2 = -1;
      }
      else {
        uint64_t v2 = *((unsigned int *)this + 12);
      }
      if (v2 != 3) {
        goto LABEL_11;
      }
    }
  }
  else
  {
LABEL_11:
    switch(v2)
    {
      case 1:
        if (v1 != 1) {
          goto LABEL_49;
        }
        goto LABEL_48;
      case 2:
        if (v1 != 2) {
          goto LABEL_49;
        }
        goto LABEL_48;
      case 3:
        goto LABEL_50;
      case 4:
        if (v1 != 4) {
          goto LABEL_49;
        }
        uint64_t v7 = *(unsigned int *)(*(void *)this + 84);
        if (v7)
        {
          uint64_t v8 = *(uint64_t **)(*(void *)this + 72);
          uint64_t v9 = 8 * v7 - 8;
          do
          {
            uint64_t v10 = *v8++;
            uint64_t result = WGSL::Type::isConstructible(*(WGSL::Type **)(*(void *)(v10 + 104) + 24));
            if (result) {
              BOOL v11 = v9 == 0;
            }
            else {
              BOOL v11 = 1;
            }
            v9 -= 8;
          }
          while (!v11);
        }
        else
        {
LABEL_48:
          uint64_t result = 1;
        }
        break;
      case 5:
        if (v1 != 5) {
          goto LABEL_49;
        }
        goto LABEL_48;
      case 6:
        if (v1 != 6) {
          goto LABEL_49;
        }
        return 0;
      case 7:
        if (v1 != 7) {
          goto LABEL_49;
        }
        return 0;
      case 8:
        if (v1 != 8) {
          goto LABEL_49;
        }
        return 0;
      case 9:
        if (v1 != 9) {
          goto LABEL_49;
        }
        return 0;
      case 10:
        if (v1 != 10) {
          goto LABEL_49;
        }
        return 0;
      case 11:
        if (v1 == 11) {
          return 0;
        }
        goto LABEL_49;
      case 12:
        if (v1 != 12) {
          goto LABEL_49;
        }
        return 0;
      case 13:
        if (v1 != 13) {
          goto LABEL_49;
        }
        return 0;
      case 14:
        if (v1 == 14) {
          goto LABEL_48;
        }
        goto LABEL_49;
      default:
        if (v1) {
          goto LABEL_49;
        }
        unsigned int v3 = *(unsigned __int8 *)this;
        BOOL v4 = v3 >= 0xE;
        unsigned int v5 = (0xBFu >> v3) & 1;
        if (v4) {
          uint64_t result = 1;
        }
        else {
          uint64_t result = v5;
        }
        break;
    }
  }
  return result;
}

_DWORD *WGSL::Type::containsRuntimeArray(_DWORD *this)
{
  if (this)
  {
    while (1)
    {
      while (1)
      {
        int v2 = this[12];
        if (v2 != 4) {
          break;
        }
        uint64_t v1 = *(unsigned int *)(*(void *)this + 84);
        if (!v1)
        {
          __break(0xC471u);
          return this;
        }
        this = *(_DWORD **)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 8 * v1 - 8) + 104) + 24);
        if (!this) {
          return this;
        }
      }
      if (v2 != 10) {
        break;
      }
      this = (_DWORD *)*((void *)this + 1);
      if (!this) {
        return this;
      }
    }
    if (v2 == 3) {
      return (_DWORD *)(this[4] == 0);
    }
    else {
      return 0;
    }
  }
  return this;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::not_equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,unsigned int,WGSL::AST::Expression *> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,unsigned int,WGSL::AST::Expression *> const>()
{
  return 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::not_equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,unsigned int,WGSL::AST::Expression *> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,unsigned int,WGSL::AST::Expression *> const>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return *a2 != *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::not_equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,unsigned int,WGSL::AST::Expression *> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,unsigned int,WGSL::AST::Expression *> const>(uint64_t a1, void *a2, void *a3)
{
  return *a2 != *a3;
}

uint64_t WTF::PrintStream::print<char [17]>(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  WTF::printInternal();
  int v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 40);
  return v2(a1);
}

uint64_t WTF::PrintStream::print<char [13]>(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  WTF::printInternal();
  int v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 40);
  return v2(a1);
}

uint64_t WTF::PrintStream::print<char [19]>(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  WTF::printInternal();
  int v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 40);
  return v2(a1);
}

uint64_t WTF::PrintStream::print<char [24]>(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  WTF::printInternal();
  int v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 40);
  return v2(a1);
}

void WGSL::TypeStore::TypeStore(WGSL::TypeStore *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  operator new();
}

void WGSL::TypeStore::allocateType<WGSL::Types::Primitive,WGSL::Types::Primitive::Kind>()
{
}

void WGSL::TypeStore::allocateType<WGSL::Types::TextureDepth,WGSL::Types::TextureDepth::Kind>()
{
}

void WGSL::TypeStore::allocateType<WGSL::Types::Atomic,WGSL::Type const*&>()
{
}

void WGSL::TypeStore::allocateType<WGSL::Types::Struct,WGSL::AST::Structure &,WTF::HashMap<WTF::String,WGSL::Type const*,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits> &>()
{
}

uint64_t WGSL::TypeStore::arrayType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&long long v9 = a3;
  *((void *)&v9 + 1) = a4;
  uint64_t v8 = a2;
  if (a4 == 2) {
    WGSL::TypeStore::allocateType<WGSL::Types::Array,WGSL::Type const*&,std::variant<std::monostate,unsigned int,WGSL::AST::Expression *> &>();
  }
  uint64_t v6 = a2;
  long long v7 = v9;
  uint64_t v5 = WGSL::TypeCache::find<WGSL::ArrayKey>((uint64_t *)(a1 + 16), &v6);
  if (!v5) {
    WGSL::TypeStore::allocateType<WGSL::Types::Array,WGSL::Type const*&,std::variant<std::monostate,unsigned int,WGSL::AST::Expression *> &>();
  }
  return v5;
}

void WGSL::TypeStore::allocateType<WGSL::Types::Array,WGSL::Type const*&,std::variant<std::monostate,unsigned int,WGSL::AST::Expression *> &>()
{
}

uint64_t WGSL::TypeCache::find<WGSL::ArrayKey>(uint64_t *a1, uint64_t *a2)
{
  int v2 = *((_DWORD *)a2 + 4);
  if (v2 == -1) {
    uint64_t v3 = -1;
  }
  else {
    uint64_t v3 = *((unsigned int *)a2 + 4);
  }
  if (!v3)
  {
    if (!v2)
    {
      unint64_t v4 = 3;
      uint64_t v5 = *a2;
      uint64_t v27 = 3;
      uint64_t v28 = v5;
      uint64_t v6 = *a1;
      if (!*a1) {
        return 0;
      }
      goto LABEL_11;
    }
    goto LABEL_42;
  }
  if (v3 != 1)
  {
    if (v2 == 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1826C3C0CLL);
    }
    goto LABEL_42;
  }
  if (v2 != 1)
  {
LABEL_42:
    uint64_t v24 = (WGSL::TypeStore *)std::__throw_bad_variant_access[abi:sn180100]();
    return WGSL::TypeStore::vectorType(v24, v25, v26);
  }
  unint64_t v4 = ((unint64_t)*((unsigned int *)a2 + 2) << 32) | 3;
  uint64_t v5 = *a2;
  uint64_t v27 = v4;
  uint64_t v28 = v5;
  uint64_t v6 = *a1;
  if (!*a1) {
    return 0;
  }
LABEL_11:
  int v7 = v4;
  int v8 = BYTE1(v4);
  int v9 = WORD1(v4);
  unsigned int v10 = *(_DWORD *)(v6 - 8);
  unint64_t v11 = HIDWORD(v4);
  int v12 = WTF::TupleHash<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>::hash<0ul>((unsigned __int8 *)&v27);
  for (i = 0; ; int v12 = i + (v12 & v10))
  {
    BOOL v14 = (unsigned __int8 *)(v6 + 24 * (v12 & v10));
    int v15 = v14[1];
    int v16 = *((unsigned __int16 *)v14 + 1);
    BOOL v17 = *v14 == v7 && v15 == v8;
    if (v17 && v16 == v9 && *((_DWORD *)v14 + 1) == v11 && *((void *)v14 + 1) == v5) {
      break;
    }
    if (*v14) {
      BOOL v20 = 0;
    }
    else {
      BOOL v20 = v15 == 0;
    }
    BOOL v22 = v20 && v16 == 0 && *((_DWORD *)v14 + 1) == 0;
    if (v22 && !*((void *)v14 + 1)) {
      return 0;
    }
    ++i;
  }
  if ((unsigned __int8 *)(v6 + 24 * *(unsigned int *)(v6 - 4)) == v14) {
    return 0;
  }
  return *((void *)v14 + 2);
}

uint64_t WGSL::TypeStore::vectorType(WGSL::TypeStore *this, unsigned int a2, const WGSL::Type *a3)
{
  uint64_t v4 = *((void *)this + 2);
  v19[0] = ((unint64_t)a2 << 8) | 1;
  v19[1] = a3;
  if (!v4) {
    goto LABEL_31;
  }
  unsigned int v6 = *(_DWORD *)(v4 - 8);
  int v7 = WTF::TupleHash<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>::hash<0ul>((unsigned __int8 *)v19);
  for (i = 0; ; int v7 = ++i + (v7 & v6))
  {
    uint64_t v9 = v4 + 24 * (v7 & v6);
    int v10 = *(unsigned __int8 *)(v9 + 1);
    int v11 = *(unsigned __int16 *)(v9 + 2);
    BOOL v12 = *(unsigned char *)v9 == 1 && v10 == a2;
    if (v12 && v11 == 0 && !*(_DWORD *)(v9 + 4) && *(void *)(v9 + 8) == (void)a3) {
      break;
    }
    if (*(unsigned char *)v9) {
      BOOL v15 = 0;
    }
    else {
      BOOL v15 = v10 == 0;
    }
    BOOL v17 = v15 && v11 == 0 && *(_DWORD *)(v9 + 4) == 0;
    if (v17 && !*(void *)(v9 + 8)) {
      goto LABEL_31;
    }
  }
  if (v4 + 24 * *(unsigned int *)(v4 - 4) == v9 || !*(void *)(v9 + 16)) {
LABEL_31:
  }
    WGSL::TypeStore::allocateType<WGSL::Types::Vector,WGSL::Type const*&,unsigned char &>();
  return *(void *)(v9 + 16);
}

void WGSL::TypeStore::allocateType<WGSL::Types::Vector,WGSL::Type const*&,unsigned char &>()
{
}

uint64_t WGSL::TypeStore::matrixType(WGSL::TypeStore *this, unsigned int a2, unsigned int a3, const WGSL::Type *a4)
{
  uint64_t v6 = *((void *)this + 2);
  v21[0] = ((unint64_t)a2 << 8) | ((unint64_t)a3 << 16) | 2;
  v21[1] = a4;
  if (!v6) {
    goto LABEL_31;
  }
  unsigned int v8 = *(_DWORD *)(v6 - 8);
  int v9 = WTF::TupleHash<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>::hash<0ul>((unsigned __int8 *)v21);
  for (i = 0; ; int v9 = ++i + (v9 & v8))
  {
    uint64_t v11 = v6 + 24 * (v9 & v8);
    int v12 = *(unsigned __int8 *)(v11 + 1);
    int v13 = *(unsigned __int16 *)(v11 + 2);
    BOOL v14 = *(unsigned char *)v11 == 2 && v12 == a2;
    if (v14 && v13 == a3 && !*(_DWORD *)(v11 + 4) && *(void *)(v11 + 8) == (void)a4) {
      break;
    }
    if (*(unsigned char *)v11) {
      BOOL v17 = 0;
    }
    else {
      BOOL v17 = v12 == 0;
    }
    BOOL v19 = v17 && v13 == 0 && *(_DWORD *)(v11 + 4) == 0;
    if (v19 && !*(void *)(v11 + 8)) {
      goto LABEL_31;
    }
  }
  if (v6 + 24 * *(unsigned int *)(v6 - 4) == v11 || !*(void *)(v11 + 16)) {
LABEL_31:
  }
    WGSL::TypeStore::allocateType<WGSL::Types::Matrix,WGSL::Type const*&,unsigned char &,unsigned char &>();
  return *(void *)(v11 + 16);
}

void WGSL::TypeStore::allocateType<WGSL::Types::Matrix,WGSL::Type const*&,unsigned char &,unsigned char &>()
{
}

uint64_t WGSL::TypeStore::textureType(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  v19[0] = ((unint64_t)a2 << 8) | 4;
  v19[1] = a3;
  if (!v4) {
    goto LABEL_31;
  }
  unsigned int v6 = *(_DWORD *)(v4 - 8);
  int v7 = WTF::TupleHash<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>::hash<0ul>((unsigned __int8 *)v19);
  for (i = 0; ; int v7 = ++i + (v7 & v6))
  {
    uint64_t v9 = v4 + 24 * (v7 & v6);
    int v10 = *(unsigned __int8 *)(v9 + 1);
    int v11 = *(unsigned __int16 *)(v9 + 2);
    BOOL v12 = *(unsigned char *)v9 == 4 && v10 == a2;
    if (v12 && v11 == 0 && !*(_DWORD *)(v9 + 4) && *(void *)(v9 + 8) == a3) {
      break;
    }
    if (*(unsigned char *)v9) {
      BOOL v15 = 0;
    }
    else {
      BOOL v15 = v10 == 0;
    }
    BOOL v17 = v15 && v11 == 0 && *(_DWORD *)(v9 + 4) == 0;
    if (v17 && !*(void *)(v9 + 8)) {
      goto LABEL_31;
    }
  }
  if (v4 + 24 * *(unsigned int *)(v4 - 4) == v9 || !*(void *)(v9 + 16)) {
LABEL_31:
  }
    WGSL::TypeStore::allocateType<WGSL::Types::Texture,WGSL::Type const*&,WGSL::Types::Texture::Kind &>();
  return *(void *)(v9 + 16);
}

void WGSL::TypeStore::allocateType<WGSL::Types::Texture,WGSL::Type const*&,WGSL::Types::Texture::Kind &>()
{
}

void WGSL::TypeStore::allocateType<WGSL::Types::TextureStorage,WGSL::Types::TextureStorage::Kind &,WGSL::TexelFormat &,WGSL::AccessMode &>()
{
}

void WGSL::TypeStore::allocateType<WGSL::Types::Function,WTF::Vector<WGSL::Type const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WGSL::Type const*&,BOOL &>()
{
}

void WGSL::TypeStore::allocateType<WGSL::Types::Reference,WGSL::AddressSpace &,WGSL::AccessMode &,WGSL::Type const*&,BOOL &>()
{
}

uint64_t WGSL::TypeStore::modfResultType(WGSL::TypeStore *this, const WGSL::Type *a2, const WGSL::Type *a3)
{
  uint64_t v5 = *((void *)this + 2);
  uint64_t v19 = 264;
  uint64_t v20 = (uint64_t)a2;
  if (!v5)
  {
LABEL_31:
    uint64_t v17 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)uint64_t v17 = 2;
    *(void *)(v17 + 8) = a2;
    *(void *)(v17 + 16) = a3;
    uint64_t v19 = (uint64_t)"__modf_result";
    uint64_t v20 = 14;
    WGSL::TypeStore::allocateType<WGSL::Types::PrimitiveStruct,WTF::ASCIILiteral,WGSL::Types::PrimitiveStruct::Kind const&,WTF::FixedVector<WGSL::Type const*> &>();
  }
  unsigned int v6 = *(_DWORD *)(v5 - 8);
  int v7 = WTF::TupleHash<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>::hash<0ul>((unsigned __int8 *)&v19);
  for (i = 0; ; int v7 = i + (v7 & v6))
  {
    uint64_t v9 = v5 + 24 * (v7 & v6);
    int v10 = *(unsigned __int8 *)(v9 + 1);
    int v11 = *(unsigned __int16 *)(v9 + 2);
    if (*(unsigned char *)v9 == 8 && v10 == 1) {
      break;
    }
LABEL_16:
    if (*(unsigned char *)v9) {
      BOOL v14 = 0;
    }
    else {
      BOOL v14 = v10 == 0;
    }
    BOOL v16 = v14 && v11 == 0 && *(_DWORD *)(v9 + 4) == 0;
    if (v16 && !*(void *)(v9 + 8)) {
      goto LABEL_31;
    }
    ++i;
  }
  if (*(_WORD *)(v9 + 2))
  {
LABEL_15:
    int v10 = 1;
    goto LABEL_16;
  }
  if (*(_DWORD *)(v9 + 4)) {
    BOOL v13 = 0;
  }
  else {
    BOOL v13 = *(void *)(v9 + 8) == (void)a2;
  }
  if (!v13)
  {
    int v11 = 0;
    goto LABEL_15;
  }
  if (v5 + 24 * *(unsigned int *)(v5 - 4) == v9 || !*(void *)(v9 + 16)) {
    goto LABEL_31;
  }
  return *(void *)(v9 + 16);
}

uint64_t WGSL::TypeStore::atomicCompareExchangeResultType(WGSL::TypeStore *this, const WGSL::Type *a2)
{
  if (*((const WGSL::Type **)this + 8) == a2)
  {
    uint64_t v4 = *((void *)this + 25);
    if (!v4)
    {
      uint64_t v6 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)uint64_t v6 = 2;
      *(void *)(v6 + 8) = a2;
      *(void *)(v6 + 16) = *((void *)this + 7);
      WGSL::TypeStore::allocateType<WGSL::Types::PrimitiveStruct,WTF::ASCIILiteral,WGSL::Types::PrimitiveStruct::Kind const&,WTF::FixedVector<WGSL::Type const*> &>();
    }
  }
  else
  {
    uint64_t v4 = *((void *)this + 26);
    if (!v4)
    {
      uint64_t v7 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)uint64_t v7 = 2;
      *(void *)(v7 + 8) = a2;
      *(void *)(v7 + 16) = *((void *)this + 7);
      WGSL::TypeStore::allocateType<WGSL::Types::PrimitiveStruct,WTF::ASCIILiteral,WGSL::Types::PrimitiveStruct::Kind const&,WTF::FixedVector<WGSL::Type const*> &>();
    }
  }
  return v4;
}

unsigned __int8 *WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(v2 - 8);
  int v5 = WTF::TupleHash<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>::hash<0ul>(a2);
  for (i = 0; ; int v5 = i + v7)
  {
    int v7 = v5 & v4;
    uint64_t result = (unsigned __int8 *)(v2 + 24 * (v5 & v4));
    int v9 = result[1];
    int v10 = *((unsigned __int16 *)result + 1);
    if (*result == *a2 && v9 == a2[1])
    {
      int v9 = a2[1];
      if (v10 == *((unsigned __int16 *)a2 + 1))
      {
        BOOL v12 = *((_DWORD *)result + 1) == *((_DWORD *)a2 + 1) && *((void *)result + 1) == *((void *)a2 + 1);
        int v10 = *((unsigned __int16 *)a2 + 1);
        int v9 = a2[1];
        if (v12) {
          break;
        }
      }
    }
    if (*result) {
      BOOL v13 = 0;
    }
    else {
      BOOL v13 = v9 == 0;
    }
    BOOL v15 = v13 && v10 == 0 && *((_DWORD *)result + 1) == 0;
    if (v15 && !*((void *)result + 1)) {
      return (unsigned __int8 *)(v2 + 24 * *(unsigned int *)(v2 - 4));
    }
    ++i;
  }
  return result;
}

uint64_t WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::rehash(a1, 8u, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = WTF::TupleHash<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>::hash<0ul>(a2);
  int v11 = 0;
  int v12 = *a2;
  for (int i = 1; ; ++i)
  {
    unsigned int v14 = v10 & v9;
    BOOL v15 = (unsigned __int8 *)(v8 + 24 * (v10 & v9));
    int v16 = *v15;
    int v17 = v15[1];
    int v18 = *((unsigned __int16 *)v15 + 1);
    uint64_t result = *((unsigned int *)v15 + 1);
    BOOL v20 = !*v15 && v17 == 0;
    BOOL v21 = v20 && v18 == 0;
    BOOL v22 = v21 && result == 0;
    if (v22 && !*((void *)v15 + 1)) {
      break;
    }
    if (v16 == v12
      && v17 == a2[1]
      && v18 == *((unsigned __int16 *)a2 + 1)
      && result == *((_DWORD *)a2 + 1)
      && *((void *)v15 + 1) == *((void *)a2 + 1))
    {
      char v26 = 0;
      uint64_t v27 = v8 + 24 * *(unsigned int *)(v8 - 4);
      goto LABEL_49;
    }
    if (v16 == 255) {
      int v11 = (unsigned __int8 *)(v8 + 24 * v14);
    }
    unsigned int v10 = i + v14;
  }
  if (v11)
  {
    *(void *)int v11 = 0;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = 0;
    --*(_DWORD *)(*a1 - 16);
    LOBYTE(v12) = *a2;
    BOOL v15 = v11;
  }
  unsigned __int8 *v15 = v12;
  v15[1] = a2[1];
  *((_WORD *)v15 + 1) = *((_WORD *)a2 + 1);
  *((_DWORD *)v15 + 1) = *((_DWORD *)a2 + 1);
  uint64_t v28 = *a3;
  *((void *)v15 + 1) = *((void *)a2 + 1);
  *((void *)v15 + 2) = v28;
  if (*a1)
  {
    ++*(_DWORD *)(*a1 - 12);
    uint64_t v29 = *a1;
    if (*a1) {
      goto LABEL_38;
    }
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    uint64_t v29 = *a1;
    if (*a1)
    {
LABEL_38:
      uint64_t v30 = (*(_DWORD *)(v29 - 16) + *(_DWORD *)(v29 - 12));
      unint64_t v31 = *(unsigned int *)(v29 - 4);
      if (v31 <= 0x400) {
        goto LABEL_39;
      }
LABEL_45:
      if (v31 > 2 * v30) {
        goto LABEL_48;
      }
      goto LABEL_46;
    }
  }
  uint64_t v30 = *(unsigned int *)(v29 - 16);
  unint64_t v31 = *(unsigned int *)(v29 - 4);
  if (v31 > 0x400) {
    goto LABEL_45;
  }
LABEL_39:
  if (3 * v31 <= 4 * v30)
  {
    if (!v31)
    {
      uint64_t result = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::rehash(a1, 8u, v15);
      BOOL v15 = (unsigned __int8 *)result;
      uint64_t v29 = *a1;
      if (!*a1)
      {
LABEL_42:
        LODWORD(v31) = 0;
        goto LABEL_48;
      }
LABEL_47:
      LODWORD(v31) = *(_DWORD *)(v29 - 4);
      goto LABEL_48;
    }
LABEL_46:
    uint64_t result = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::rehash(a1, v31 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v31)), v15);
    BOOL v15 = (unsigned __int8 *)result;
    uint64_t v29 = *a1;
    if (!*a1) {
      goto LABEL_42;
    }
    goto LABEL_47;
  }
LABEL_48:
  uint64_t v27 = v29 + 24 * v31;
  char v26 = 1;
LABEL_49:
  *(void *)a4 = v15;
  *(void *)(a4 + 8) = v27;
  *(unsigned char *)(a4 + 16) = v26;
  return result;
}

uint64_t WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      BOOL v13 = (unsigned __int8 *)(v6 + 24 * v11);
      if (*v13 != 255)
      {
        BOOL v14 = !*v13 && v13[1] == 0;
        BOOL v15 = v14 && *((_WORD *)v13 + 1) == 0;
        BOOL v16 = v15 && *((_DWORD *)v13 + 1) == 0;
        if (!v16 || *((void *)v13 + 1))
        {
          uint64_t v17 = *a1;
          if (*a1) {
            unsigned int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            unsigned int v18 = 0;
          }
          int v19 = WTF::TupleHash<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>::hash<0ul>((unsigned __int8 *)(v6 + 24 * v11));
          for (i = 0; ; int v19 = i + v21)
          {
            unsigned int v21 = v19 & v18;
            uint64_t v22 = v17 + 24 * (v19 & v18);
            BOOL v23 = !*(unsigned char *)v22 && *(unsigned char *)(v22 + 1) == 0;
            BOOL v24 = v23 && *(_WORD *)(v22 + 2) == 0;
            BOOL v25 = v24 && *(_DWORD *)(v22 + 4) == 0;
            if (v25 && !*(void *)(v22 + 8)) {
              break;
            }
            ++i;
          }
          long long v26 = *(_OWORD *)v13;
          *(void *)(v22 + 16) = *((void *)v13 + 2);
          *(_OWORD *)uint64_t v22 = v26;
          if (v13 == a3) {
            uint64_t v12 = v17 + 24 * v21;
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

unsigned char *WGSL::VisibilityValidator::visit(WGSL::VisibilityValidator *this, Function *a2)
{
  uint64_t result = WGSL::AST::Visitor::visit(this, a2);
  uint64_t v5 = *((void *)this + 5);
  if (!*(unsigned char *)(v5 + 392))
  {
    __break(1u);
    return result;
  }
  uint64_t v6 = *(void *)(v5 + 384);
  int v7 = *(_DWORD *)(v6 - 8);
  unint64_t v8 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
  unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  unsigned int v11 = v7 & ((v10 >> 31) ^ v10);
  uint64_t v12 = v6 + 24 * v11;
  BOOL v13 = *(WGSL::AST::Function **)v12;
  if (*(Function **)v12 == a2)
  {
LABEL_6:
    uint64_t v15 = *(unsigned int *)(v12 + 20);
    if (!v15) {
      return result;
    }
    goto LABEL_9;
  }
  int v14 = 1;
  while (v13)
  {
    unsigned int v11 = (v11 + v14) & v7;
    uint64_t v12 = v6 + 24 * v11;
    BOOL v13 = *(WGSL::AST::Function **)v12;
    ++v14;
    if (*(Function **)v12 == a2) {
      goto LABEL_6;
    }
  }
  uint64_t v12 = v6 + 24 * *(unsigned int *)(v6 - 4);
  uint64_t v15 = *(unsigned int *)(v12 + 20);
  if (v15)
  {
LABEL_9:
    BOOL v16 = *(uint64_t **)(v12 + 8);
    uint64_t v17 = 24 * v15;
    do
    {
      uint64_t v18 = *v16;
      v16 += 3;
      uint64_t result = (unsigned char *)(*(uint64_t (**)(WGSL::VisibilityValidator *, uint64_t))(*(void *)this + 48))(this, v18);
      v17 -= 24;
    }
    while (v17);
  }
  return result;
}

unsigned char *WGSL::VisibilityValidator::visit(unsigned char *this, WGSL::AST::CallExpression *a2)
{
  uint64_t v3 = this;
  if (!this[32]) {
    this = (unsigned char *)(*(uint64_t (**)(unsigned char *, void))(*(void *)this + 208))(this, *((void *)a2 + 8));
  }
  uint64_t v4 = *((unsigned int *)a2 + 21);
  if (v4 && !v3[32])
  {
    BOOL v16 = (void *)*((void *)a2 + 9);
    uint64_t v17 = 8 * v4 - 8;
LABEL_22:
    this = (unsigned char *)(*(uint64_t (**)(unsigned char *, void))(*(void *)v3 + 208))(v3, *v16);
    while (v17)
    {
      ++v16;
      v17 -= 8;
      if (!v3[32]) {
        goto LABEL_22;
      }
    }
  }
  int v5 = v3[64];
  if ((*((unsigned char *)a2 + 89) & v5) == 0)
  {
    uint64_t v6 = "compute";
    if (v5 == 2)
    {
      uint64_t v6 = "fragment";
      int v7 = 8;
    }
    else
    {
      int v7 = 7;
    }
    BOOL v8 = v5 == 1;
    if (v5 == 1) {
      unint64_t v9 = "vertex";
    }
    else {
      unint64_t v9 = v6;
    }
    if (v8) {
      int v7 = 6;
    }
    BOOL v20 = "built-in cannot be used by ";
    LODWORD(v21) = 27;
    BOOL v24 = v9;
    int v25 = v7;
    uint64_t v22 = " pipeline stage";
    int v23 = 15;
    this = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v20, (uint64_t)&v24, (uint64_t)&v22, &v19);
    unint64_t v10 = v19;
    if (!v19)
    {
      __break(0xC471u);
      return this;
    }
    int v19 = 0;
    BOOL v20 = v10;
    long long v21 = *(_OWORD *)((char *)a2 + 8);
    uint64_t v11 = *((unsigned int *)v3 + 15);
    if (v11 == *((_DWORD *)v3 + 14))
    {
      unint64_t v12 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v3 + 48), v11 + 1, (unint64_t)&v20);
      uint64_t v13 = *((void *)v3 + 6) + 24 * *((unsigned int *)v3 + 15);
      uint64_t v14 = *(void *)v12;
      *(void *)unint64_t v12 = 0;
      *(void *)uint64_t v13 = v14;
      *(_OWORD *)(v13 + 8) = *(_OWORD *)(v12 + 8);
      uint64_t v15 = v20;
      ++*((_DWORD *)v3 + 15);
      BOOL v20 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
        {
          WTF::StringImpl::destroy();
          this = v19;
          int v19 = 0;
          if (!this) {
            return this;
          }
        }
        else
        {
          *(_DWORD *)v15 -= 2;
          this = v19;
          int v19 = 0;
          if (!this) {
            return this;
          }
        }
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v18 = *((void *)v3 + 6) + 24 * v11;
      *(void *)uint64_t v18 = v10;
      *(_OWORD *)(v18 + 8) = v21;
      ++*((_DWORD *)v3 + 15);
      BOOL v20 = 0;
    }
    this = v19;
    int v19 = 0;
    if (!this) {
      return this;
    }
LABEL_28:
    if (*(_DWORD *)this == 2) {
      return (unsigned char *)WTF::StringImpl::destroy();
    }
    else {
      *(_DWORD *)this -= 2;
    }
  }
  return this;
}

WTF *WGSL::validateVisibility@<X0>(WTF *this@<X0>, uint64_t a2@<X8>)
{
  LOBYTE(v11) = 0;
  char v12 = 0;
  unint64_t v10 = (void (**)(void **, void))&unk_1ECABF190;
  uint64_t v13 = this;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  if (*((unsigned char *)this + 392))
  {
    uint64_t v4 = *((unsigned int *)this + 93);
    if (v4)
    {
      uint64_t v5 = 24 * v4;
      uint64_t v6 = (unsigned char *)(*((void *)this + 45) + 8);
      do
      {
        char v16 = *v6;
        v10[6]((void **)&v10, *((void *)v6 - 1));
        v6 += 24;
        v5 -= 24;
      }
      while (v5);
      int v8 = HIDWORD(v15);
      this = v14;
      if (HIDWORD(v15))
      {
        int v9 = v15;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        *(void *)a2 = this;
        *(_DWORD *)(a2 + 8) = v9;
        *(_DWORD *)(a2 + 12) = v8;
        *(void *)(a2 + 16) = 0;
        *(void *)(a2 + 24) = 0;
        *(unsigned char *)(a2 + 32) = 1;
      }
      else
      {
        *(unsigned char *)a2 = 0;
        *(unsigned char *)(a2 + 32) = 0;
        unint64_t v10 = (void (**)(void **, void))&unk_1ECABF190;
        if (this)
        {
          uint64_t v14 = 0;
          LODWORD(v15) = 0;
          this = (WTF *)WTF::fastFree(this, v7);
        }
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 32) = 0;
    }
    unint64_t v10 = (void (**)(void **, void))&unk_1ECABB740;
    if (v12)
    {
      this = v11;
      uint64_t v11 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2) {
          return (WTF *)WTF::StringImpl::destroy();
        }
        else {
          *(_DWORD *)this -= 2;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  return this;
}

void WGSL::VisibilityValidator::~VisibilityValidator(WGSL::VisibilityValidator *this, void *a2)
{
  *(void *)this = &unk_1ECABF190;
  uint64_t v3 = *((unsigned int *)this + 15);
  if (v3)
  {
    uint64_t v4 = (_DWORD **)*((void *)this + 6);
    uint64_t v5 = 24 * v3;
    do
    {
      uint64_t v6 = *v4;
      *uint64_t v4 = 0;
      if (v6)
      {
        if (*v6 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v6 -= 2;
        }
      }
      v4 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  int v7 = (WTF *)*((void *)this + 6);
  if (v7)
  {
    *((void *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v7, a2);
  }
  *(void *)this = &unk_1ECABB740;
  if (*((unsigned char *)this + 32))
  {
    int v8 = (_DWORD *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v8)
    {
      if (*v8 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v8 -= 2;
      }
    }
  }
}

{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t vars8;

  *(void *)this = &unk_1ECABF190;
  uint64_t v3 = *((unsigned int *)this + 15);
  if (v3)
  {
    uint64_t v4 = (_DWORD **)*((void *)this + 6);
    uint64_t v5 = 24 * v3;
    do
    {
      uint64_t v6 = *v4;
      *uint64_t v4 = 0;
      if (v6)
      {
        if (*v6 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v6 -= 2;
        }
      }
      v4 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  int v7 = (WTF *)*((void *)this + 6);
  if (v7)
  {
    *((void *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v7, a2);
  }
  *(void *)this = &unk_1ECABB740;
  if (*((unsigned char *)this + 32))
  {
    int v8 = (_DWORD *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v8)
    {
      if (*v8 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v8 -= 2;
      }
    }
  }
  JUMPOUT(0x18530AFF0);
}

void WGSL::staticCheck(_DWORD **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = WTF::fastMalloc((WTF *)0x1B0);
  uint64_t v6 = v5;
  int v7 = *a1;
  if (*a1) {
    *v7 += 2;
  }
  *(void *)uint64_t v5 = v7;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = 0;
  *(_WORD *)(v5 + 32) = 0;
  *(_OWORD *)(v5 + 40) = *(_OWORD *)a3;
  *(void *)(v5 + 56) = 0;
  uint64_t v8 = *(void *)(a3 + 16);
  if (!v8) {
    goto LABEL_30;
  }
  uint64_t v9 = *(unsigned int *)(v8 - 12);
  if (!v9) {
    goto LABEL_30;
  }
  unsigned int v10 = (v9 - 1) | ((v9 - 1) >> 1) | (((v9 - 1) | ((v9 - 1) >> 1)) >> 2);
  unsigned int v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
  unint64_t v12 = (v11 | HIWORD(v11)) + 1;
  if (v12 > 0x400)
  {
    if (v12 > 2 * v9) {
      goto LABEL_12;
    }
  }
  else if (3 * v12 > 4 * v9)
  {
LABEL_10:
    if ((double)v12 * 0.604166667 > (double)v9) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  LODWORD(v12) = 2 * v12;
  if (v12 <= 0x400) {
    goto LABEL_10;
  }
LABEL_12:
  if ((double)v12 * 0.416666667 > (double)v9)
  {
LABEL_14:
    if (v12 <= 8) {
      unsigned int v13 = 8;
    }
    else {
      unsigned int v13 = v12;
    }
    uint64_t v14 = WTF::fastZeroedMalloc((WTF *)(8 * v13 + 16));
    *(void *)(v6 + 56) = v14 + 16;
    *(_DWORD *)(v14 + 12) = v13;
    *(_DWORD *)(*(void *)(v6 + 56) - 8) = v13 - 1;
    *(_DWORD *)(*(void *)(v6 + 56) - 12) = v9;
    *(_DWORD *)(*(void *)(v6 + 56) - 16) = 0;
    uint64_t v15 = *(WTF::StringImpl ***)(a3 + 16);
    if (v15)
    {
      uint64_t v16 = *((unsigned int *)v15 - 1);
      uint64_t v17 = &v15[v16];
      if (!*((_DWORD *)v15 - 3))
      {
        uint64_t v18 = &v15[v16];
        uint64_t v17 = v18;
LABEL_26:
        BOOL v20 = &v15[*((unsigned int *)v15 - 1)];
        if (v20 != v18) {
          goto LABEL_32;
        }
LABEL_30:
        *(_OWORD *)(v6 + 64) = 0u;
        *(_OWORD *)(v6 + 80) = 0u;
        WGSL::TypeStore::TypeStore((WGSL::TypeStore *)(v6 + 96));
      }
      uint64_t v18 = v15;
      if (v16)
      {
        uint64_t v19 = 8 * v16;
        uint64_t v18 = v15;
        do
        {
          if ((unint64_t)*v18 + 1 > 1) {
            goto LABEL_25;
          }
          ++v18;
          v19 -= 8;
        }
        while (v19);
        uint64_t v18 = v17;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v18 = 0;
      uint64_t v17 = 0;
    }
LABEL_25:
    if (v15) {
      goto LABEL_26;
    }
    BOOL v20 = 0;
    if (!v18) {
      goto LABEL_30;
    }
    while (1)
    {
LABEL_32:
      uint64_t v21 = *(void *)(v6 + 56);
      if (v21)
      {
        int v22 = *(_DWORD *)(v21 - 8);
        int v23 = *v18;
        unsigned int v24 = *((_DWORD *)*v18 + 4);
        if (v24 >= 0x100) {
          goto LABEL_34;
        }
      }
      else
      {
        int v22 = 0;
        int v23 = *v18;
        unsigned int v24 = *((_DWORD *)*v18 + 4);
        if (v24 >= 0x100)
        {
LABEL_34:
          unsigned int v25 = v24 >> 8;
          goto LABEL_37;
        }
      }
      unsigned int v25 = WTF::StringImpl::hashSlowCase(v23);
LABEL_37:
      int v26 = 0;
      do
      {
        uint64_t v27 = v25 & v22;
        unsigned int v25 = ++v26 + v27;
      }
      while (*(void *)(v21 + 8 * v27));
      uint64_t v28 = *v18;
      if (*v18) {
        *(_DWORD *)v28 += 2;
      }
      *(void *)(v21 + 8 * v27) = v28;
      uint64_t v29 = v18 + 1;
      uint64_t v18 = v17;
      if (v29 != v17)
      {
        uint64_t v18 = v29;
        do
        {
          if ((unint64_t)*v18 + 1 > 1) {
            goto LABEL_31;
          }
          ++v18;
        }
        while (v18 != v17);
        uint64_t v18 = v17;
      }
LABEL_31:
      if (v18 == v20) {
        goto LABEL_30;
      }
    }
  }
LABEL_13:
  LODWORD(v12) = 2 * v12;
  goto LABEL_14;
}

void WGSL::prepare(WGSL *this, const WTF::StringImpl **a2, const WTF::String *a3, WGSL::PipelineLayout *a4)
{
  uint64_t v6 = 0;
  int v7 = a3;
  WTF::HashMap<WTF::String,WGSL::PipelineLayout *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::PipelineLayout *>,WTF::HashTableTraits>::add<WGSL::PipelineLayout *&>(&v6, a2, (const WTF::StringImpl *)&v7, (uint64_t)v10);
  v10[0] = 0;
  unsigned int v11 = this;
  uint64_t v12 = WGSL::AST::Builder::saveCurrentState((WGSL *)((char *)this + 312));
  unsigned int v13 = v5;
  v9[0] = 0;
  v9[1] = 0;
  v8[0] = v9;
  v8[1] = this;
  v8[2] = &v6;
  v8[3] = v10;
  WGSL::prepareImpl(WGSL::ShaderModule &,WTF::HashMap<WTF::String,WGSL::PipelineLayout *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::PipelineLayout *>,WTF::HashTableTraits> const&)::{lambda(void)#1}::operator()((uint64_t)v8, v5);
}

WTF *WTF::HashMap<WTF::String,WGSL::PipelineLayout *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::PipelineLayout *>,WTF::HashTableTraits>::add<WGSL::PipelineLayout *&>@<X0>(uint64_t *a1@<X0>, const WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (!*a1)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::AST::Variable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::AST::Variable *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::AST::Variable *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, 0);
    uint64_t v8 = *a1;
    if (!*a1)
    {
      int v9 = 0;
      unsigned int v10 = *a2;
      unsigned int v11 = *((_DWORD *)*a2 + 4);
      if (v11 >= 0x100) {
        goto LABEL_4;
      }
LABEL_6:
      unsigned int v12 = WTF::StringImpl::hashSlowCase(v10);
      goto LABEL_7;
    }
  }
  int v9 = *(_DWORD *)(v8 - 8);
  unsigned int v10 = *a2;
  unsigned int v11 = *((_DWORD *)*a2 + 4);
  if (v11 < 0x100) {
    goto LABEL_6;
  }
LABEL_4:
  unsigned int v12 = v11 >> 8;
LABEL_7:
  unsigned int v13 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v15 = v12 & v9;
    uint64_t v16 = (WTF *)(v8 + 16 * (v12 & v9));
    uint64_t result = *(WTF **)v16;
    if (*(void *)v16 == -1)
    {
      unsigned int v13 = (WTF *)(v8 + 16 * v15);
      goto LABEL_9;
    }
    if (!result)
    {
      if (v13)
      {
        uint64_t result = 0;
        *(void *)unsigned int v13 = 0;
        *((void *)v13 + 1) = 0;
        --*(_DWORD *)(*a1 - 16);
        uint64_t v16 = v13;
      }
      BOOL v20 = *a2;
      if (*a2) {
        *(_DWORD *)v20 += 2;
      }
      *(void *)uint64_t v16 = v20;
      *((void *)v16 + 1) = *(void *)a3;
      if (*a1)
      {
        ++*(_DWORD *)(*a1 - 12);
        uint64_t v21 = *a1;
        if (*a1) {
          goto LABEL_21;
        }
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        uint64_t v21 = *a1;
        if (*a1)
        {
LABEL_21:
          uint64_t v22 = (*(_DWORD *)(v21 - 16) + *(_DWORD *)(v21 - 12));
          unint64_t v23 = *(unsigned int *)(v21 - 4);
          if (v23 <= 0x400) {
            goto LABEL_22;
          }
          goto LABEL_30;
        }
      }
      uint64_t v22 = *(unsigned int *)(v21 - 16);
      unint64_t v23 = *(unsigned int *)(v21 - 4);
      if (v23 <= 0x400)
      {
LABEL_22:
        if (3 * v23 > 4 * v22)
        {
LABEL_33:
          uint64_t v25 = v21 + 16 * v23;
          char v24 = 1;
          goto LABEL_34;
        }
        if (!v23)
        {
          uint64_t result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::AST::Variable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::AST::Variable *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::AST::Variable *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, (WTF::StringImpl **)v16);
          uint64_t v16 = result;
          uint64_t v21 = *a1;
          if (!*a1)
          {
LABEL_25:
            unint64_t v23 = 0;
            goto LABEL_33;
          }
LABEL_32:
          unint64_t v23 = *(unsigned int *)(v21 - 4);
          goto LABEL_33;
        }
LABEL_31:
        uint64_t result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::AST::Variable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::AST::Variable *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::AST::Variable *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v23 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v23)), (WTF::StringImpl **)v16);
        uint64_t v16 = result;
        uint64_t v21 = *a1;
        if (!*a1) {
          goto LABEL_25;
        }
        goto LABEL_32;
      }
LABEL_30:
      if (v23 > 2 * v22) {
        goto LABEL_33;
      }
      goto LABEL_31;
    }
    uint64_t result = (WTF *)WTF::equal(result, *a2, a3);
    if (result) {
      break;
    }
LABEL_9:
    unsigned int v12 = i + v15;
  }
  uint64_t v18 = *a1;
  if (*a1) {
    uint64_t v19 = *(unsigned int *)(v18 - 4);
  }
  else {
    uint64_t v19 = 0;
  }
  char v24 = 0;
  uint64_t v25 = v18 + 16 * v19;
LABEL_34:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v25;
  *(unsigned char *)(a4 + 16) = v24;
  return result;
}

uint64_t std::__variant_detail::__alt<1ul,WGSL::FailedCheck>::__alt[abi:sn180100]<WGSL::FailedCheck&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *((unsigned int *)a2 + 3);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v4;
  if (v4)
  {
    if (v4 >= 0xAAAAAAB) {
      goto LABEL_16;
    }
    int v5 = 24 * v4;
    uint64_t v6 = WTF::fastMalloc((WTF *)(24 * v4));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(void *)a1 = v6;
    unsigned int v7 = *((_DWORD *)a2 + 3);
    if (v7)
    {
      uint64_t v8 = *a2;
      uint64_t v9 = *a2 + 24 * v7;
      do
      {
        unsigned int v10 = *(_DWORD **)v8;
        if (*(void *)v8) {
          *v10 += 2;
        }
        *(void *)uint64_t v6 = v10;
        *(_OWORD *)(v6 + 8) = *(_OWORD *)(v8 + 8);
        v8 += 24;
        v6 += 24;
      }
      while (v8 != v9);
    }
  }
  uint64_t v11 = *((unsigned int *)a2 + 7);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = v11;
  if (!v11) {
    return a1;
  }
  if (v11 >= 0xAAAAAAB)
  {
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x1826C5F68);
  }
  int v12 = 24 * v11;
  uint64_t v13 = WTF::fastMalloc((WTF *)(24 * v11));
  *(_DWORD *)(a1 + 24) = (v12 & 0xFFFFFFF8) / 0x18;
  *(void *)(a1 + 16) = v13;
  unsigned int v14 = *((_DWORD *)a2 + 7);
  if (v14)
  {
    uint64_t v15 = a2[2];
    uint64_t v16 = v15 + 24 * v14;
    do
    {
      uint64_t v17 = *(_DWORD **)v15;
      if (*(void *)v15) {
        *v17 += 2;
      }
      *(void *)uint64_t v13 = v17;
      *(_OWORD *)(v13 + 8) = *(_OWORD *)(v15 + 8);
      v15 += 24;
      v13 += 24;
    }
    while (v15 != v16);
  }
  return a1;
}

void WGSL::ShaderModule::~ShaderModule(WGSL::ShaderModule *this, void *a2)
{
  uint64_t v3 = *((void *)this + 53);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)(v3 + 24 * i) != -1)
        {
          uint64_t v6 = v3 + 24 * i;
          unsigned int v7 = (WTF **)(v6 + 8);
          uint64_t v8 = *(unsigned int *)(v6 + 20);
          if (v8)
          {
            uint64_t v9 = *v7;
            uint64_t v10 = 8 * v8;
            do
            {
              uint64_t v11 = *(void *)v9;
              *(void *)uint64_t v9 = 0;
              if (v11) {
                (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
              }
              uint64_t v9 = (WTF *)((char *)v9 + 8);
              v10 -= 8;
            }
            while (v10);
          }
          int v12 = *v7;
          if (*v7)
          {
            *unsigned int v7 = 0;
            *(_DWORD *)(v3 + 24 * i + 16) = 0;
            WTF::fastFree(v12, a2);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v13 = *((void *)this + 52);
  if (v13) {
    WTF::fastFree((WTF *)(v13 - 16), a2);
  }
  uint64_t v14 = *((unsigned int *)this + 103);
  uint64_t v15 = (WTF *)*((void *)this + 50);
  if (v14)
  {
    uint64_t v16 = 32 * v14;
    uint64_t v17 = *((void *)this + 50);
    do
    {
      uint64_t v18 = (WTF *)*((void *)v15 + 3);
      if (v15 == v18)
      {
        (*(void (**)(WTF *))(*(void *)v15 + 32))(v15);
      }
      else if (v18)
      {
        (*(void (**)(WTF *))(*(void *)v18 + 40))(v18);
      }
      uint64_t v15 = (WTF *)((char *)v15 + 32);
      v17 += 32;
      v16 -= 32;
    }
    while (v16);
    uint64_t v15 = (WTF *)*((void *)this + 50);
  }
  if (v15)
  {
    *((void *)this + 50) = 0;
    *((_DWORD *)this + 102) = 0;
    WTF::fastFree(v15, a2);
  }
  if (*((unsigned char *)this + 392)) {
    WGSL::CallGraph::~CallGraph((WGSL::ShaderModule *)((char *)this + 360), a2);
  }
  WGSL::AST::Builder::~Builder((WGSL::ShaderModule *)((char *)this + 312), a2);
  uint64_t v20 = *((void *)this + 14);
  if (v20) {
    WTF::fastFree((WTF *)(v20 - 16), v19);
  }
  uint64_t v21 = *((unsigned int *)this + 27);
  if (v21)
  {
    uint64_t v22 = (uint64_t *)*((void *)this + 12);
    uint64_t v23 = 8 * v21;
    do
    {
      uint64_t v24 = *v22;
      *uint64_t v22 = 0;
      if (v24)
      {
        uint64_t v25 = *(unsigned int *)(v24 + 48);
        if (v25 != -1) {
          ((void (*)(char *, uint64_t))off_1ECABF3C8[v25])(&v34, v24);
        }
        *(_DWORD *)(v24 + 48) = -1;
        MEMORY[0x18530AFF0](v24, 0x10F2C40D7D86127);
      }
      ++v22;
      v23 -= 8;
    }
    while (v23);
  }
  int v26 = (WTF *)*((void *)this + 12);
  if (v26)
  {
    *((void *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v26, v19);
  }
  uint64_t v27 = (WTF *)*((void *)this + 10);
  if (v27)
  {
    *((void *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v27, v19);
  }
  uint64_t v28 = (WTF *)*((void *)this + 8);
  if (v28)
  {
    *((void *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v28, v19);
  }
  uint64_t v29 = *((void *)this + 7);
  if (v29)
  {
    uint64_t v30 = *(unsigned int *)(v29 - 4);
    if (v30)
    {
      unint64_t v31 = (_DWORD **)*((void *)this + 7);
      do
      {
        uint64_t v32 = *v31;
        if (*v31 != (_DWORD *)-1)
        {
          *unint64_t v31 = 0;
          if (v32)
          {
            if (*v32 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v32 -= 2;
            }
          }
        }
        ++v31;
        --v30;
      }
      while (v30);
    }
    WTF::fastFree((WTF *)(v29 - 16), v19);
  }
  long long v33 = *(_DWORD **)this;
  *(void *)this = 0;
  if (v33)
  {
    if (*v33 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v33 -= 2;
    }
  }
}

void WGSL::prepareImpl(WGSL::ShaderModule &,WTF::HashMap<WTF::String,WGSL::PipelineLayout *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::PipelineLayout *>,WTF::HashTableTraits> const&)::{lambda(void)#1}::operator()(uint64_t a1, WGSL::ShaderModule *a2)
{
  uint64_t v2 = 0;
  WGSL::mangleNames(*(WGSL **)(a1 + 8), a2);
}

unsigned __int8 **WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WGSL::AddressSpace> [6]>::tryGet<WTF::String>(unsigned __int8 ***a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v4 = *(unsigned __int8 **)(v3 + 8);
    unint64_t v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
    uint64_t v6 = *a1;
    if (WTF::operator==(v4, v5, **a1, (uint64_t)(*a1)[1]))
    {
LABEL_3:
      unsigned int v7 = v6;
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0x100000000;
    uint64_t v6 = *a1;
    if (WTF::operator==(0, 0x100000000, **a1, (uint64_t)(*a1)[1])) {
      goto LABEL_3;
    }
  }
  unsigned int v7 = v6 + 3;
  if (!WTF::operator==(v4, v5, v6[3], (uint64_t)v6[4]))
  {
    unsigned int v7 = v6 + 6;
    if (!WTF::operator==(v4, v5, v6[6], (uint64_t)v6[7]))
    {
      unsigned int v7 = v6 + 9;
      if (!WTF::operator==(v4, v5, v6[9], (uint64_t)v6[10]))
      {
        unsigned int v7 = v6 + 12;
        if (!WTF::operator==(v4, v5, v6[12], (uint64_t)v6[13]))
        {
          unsigned int v7 = v6 + 18;
          uint64_t v8 = v6[15];
          uint64_t v9 = (uint64_t)v6[16];
          uint64_t v10 = v6 + 15;
          if (WTF::operator==(v4, v5, v8, v9)) {
            unsigned int v7 = v10;
          }
        }
      }
    }
  }
LABEL_11:
  if (v7 == *a1 + 18) {
    return 0;
  }
  else {
    return v7 + 2;
  }
}

void *WGSL::parseAccessMode(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    return 0;
  }
  int v2 = *(_DWORD *)(v1 + 16);
  uint64_t v3 = *(const char **)(v1 + 8);
  int v4 = *(_DWORD *)(v1 + 4);
  if (v3 != "read" && v4 == 4)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 != 114 || *(_WORD *)(v3 + 1) != 24933 || *((_WORD *)v3 + 1) != 25697) {
        return 0;
      }
    }
    else
    {
      if (*(_WORD *)v3 != 114) {
        return 0;
      }
      int v9 = *(_DWORD *)(v3 + 2);
      int v10 = *((_DWORD *)v3 + 1);
      if (v9 != 6357093 || v10 != 6553697) {
        return 0;
      }
    }
    return &unk_1E521E128;
  }
  if (v3 == "read" && v4 == 4) {
    return &unk_1E521E128;
  }
  if (v3 != "read_write" && v4 == 10)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 != 114 || *(void *)(v3 + 1) != 0x746972775F646165 || *(void *)(v3 + 2) != 0x65746972775F6461) {
        return 0;
      }
    }
    else
    {
      if (*(_WORD *)v3 != 114) {
        return 0;
      }
      uint16x8_t v13 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 2), (int16x8_t)xmmword_1826CF9B0);
      v13.i16[0] = vminvq_u16(v13);
      if (!v13.i32[0]) {
        return 0;
      }
      uint16x8_t v14 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 4), (int16x8_t)xmmword_1826CF9C0);
      v14.i16[0] = vminvq_u16(v14);
      if (!v14.i32[0]) {
        return 0;
      }
    }
    return &unk_1E521E140;
  }
  if (v3 == "read_write" && v4 == 10) {
    return &unk_1E521E140;
  }
  if (v3 == "write" || v4 != 5)
  {
    if (v4 != 5 || v3 != "write") {
      return 0;
    }
    return &unk_1E521E158;
  }
  if ((v2 & 4) != 0)
  {
    if (*v3 != 119 || *(_WORD *)(v3 + 1) != 26994 || *(_WORD *)(v3 + 3) != 25972) {
      return 0;
    }
    return &unk_1E521E158;
  }
  if (*(_WORD *)v3 == 119 && *(void *)(v3 + 2) == 0x65007400690072) {
    return &unk_1E521E158;
  }
  return 0;
}

unsigned __int8 **WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WGSL::TexelFormat> [17]>::tryGet<WTF::String>(unsigned __int8 ***a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    int v4 = *(unsigned __int8 **)(v3 + 8);
    unint64_t v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
    uint64_t v6 = *a1;
    if (WTF::operator==(v4, v5, **a1, (uint64_t)(*a1)[1]))
    {
LABEL_3:
      unsigned int v7 = v6;
      goto LABEL_27;
    }
  }
  else
  {
    int v4 = 0;
    unint64_t v5 = 0x100000000;
    uint64_t v6 = *a1;
    if (WTF::operator==(0, 0x100000000, **a1, (uint64_t)(*a1)[1])) {
      goto LABEL_3;
    }
  }
  unsigned int v7 = v6 + 3;
  if (!WTF::operator==(v4, v5, v6[3], (uint64_t)v6[4]))
  {
    unsigned int v7 = v6 + 6;
    if (!WTF::operator==(v4, v5, v6[6], (uint64_t)v6[7]))
    {
      unsigned int v7 = v6 + 9;
      if (!WTF::operator==(v4, v5, v6[9], (uint64_t)v6[10]))
      {
        unsigned int v7 = v6 + 12;
        if (!WTF::operator==(v4, v5, v6[12], (uint64_t)v6[13]))
        {
          unsigned int v7 = v6 + 15;
          if (!WTF::operator==(v4, v5, v6[15], (uint64_t)v6[16]))
          {
            unsigned int v7 = v6 + 18;
            if (!WTF::operator==(v4, v5, v6[18], (uint64_t)v6[19]))
            {
              unsigned int v7 = v6 + 21;
              if (!WTF::operator==(v4, v5, v6[21], (uint64_t)v6[22]))
              {
                unsigned int v7 = v6 + 24;
                if (!WTF::operator==(v4, v5, v6[24], (uint64_t)v6[25]))
                {
                  unsigned int v7 = v6 + 27;
                  if (!WTF::operator==(v4, v5, v6[27], (uint64_t)v6[28]))
                  {
                    unsigned int v7 = v6 + 30;
                    if (!WTF::operator==(v4, v5, v6[30], (uint64_t)v6[31]))
                    {
                      if (WTF::operator==(v4, v5, v6[33], (uint64_t)v6[34]))
                      {
                        unsigned int v7 = v6 + 33;
                      }
                      else if (WTF::operator==(v4, v5, v6[36], (uint64_t)v6[37]))
                      {
                        unsigned int v7 = v6 + 36;
                      }
                      else if (WTF::operator==(v4, v5, v6[39], (uint64_t)v6[40]))
                      {
                        unsigned int v7 = v6 + 39;
                      }
                      else if (WTF::operator==(v4, v5, v6[42], (uint64_t)v6[43]))
                      {
                        unsigned int v7 = v6 + 42;
                      }
                      else if (WTF::operator==(v4, v5, v6[45], (uint64_t)v6[46]))
                      {
                        unsigned int v7 = v6 + 45;
                      }
                      else
                      {
                        unsigned int v7 = v6 + 51;
                        if (WTF::operator==(v4, v5, v6[48], (uint64_t)v6[49])) {
                          unsigned int v7 = v6 + 48;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_27:
  if (v7 == *a1 + 51) {
    return 0;
  }
  else {
    return v7 + 2;
  }
}

void *WGSL::parseInterpolationType(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    return 0;
  }
  int v2 = *(_DWORD *)(v1 + 16);
  uint64_t v3 = *(const char **)(v1 + 8);
  int v4 = *(_DWORD *)(v1 + 4);
  if (v3 != "flat" && v4 == 4)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 != 102 || *(_WORD *)(v3 + 1) != 24940 || *((_WORD *)v3 + 1) != 29793) {
        return 0;
      }
    }
    else
    {
      if (*(_WORD *)v3 != 102) {
        return 0;
      }
      int v11 = *(_DWORD *)(v3 + 2);
      int v12 = *((_DWORD *)v3 + 1);
      if (v11 != 6357100 || v12 != 7602273) {
        return 0;
      }
    }
    return &unk_1E521E310;
  }
  if (v3 == "flat" && v4 == 4) {
    return &unk_1E521E310;
  }
  if (v3 != "linear" && v4 == 6)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 != 108 || *(_DWORD *)(v3 + 1) != 1634037353 || *(_DWORD *)(v3 + 2) != 1918985582) {
        return 0;
      }
    }
    else
    {
      if (*(_WORD *)v3 != 108) {
        return 0;
      }
      uint64_t v15 = *(void *)(v3 + 2);
      uint64_t v16 = *(void *)(v3 + 4);
      if (v15 != 0x610065006E0069 || v16 != 0x7200610065006ELL) {
        return 0;
      }
    }
    return &unk_1E521E328;
  }
  if (v3 == "linear" && v4 == 6) {
    return &unk_1E521E328;
  }
  if (v3 == "perspective" || v4 != 11)
  {
    if (v4 != 11 || v3 != "perspective") {
      return 0;
    }
    return &unk_1E521E340;
  }
  if ((v2 & 4) != 0)
  {
    if (*v3 != 112 || *(void *)(v3 + 1) != 0x6974636570737265 || *(void *)(v3 + 3) != 0x6576697463657073) {
      return 0;
    }
    return &unk_1E521E340;
  }
  if (*(_WORD *)v3 == 112)
  {
    uint16x8_t v9 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 2), (int16x8_t)xmmword_1826CF9D0);
    v9.i16[0] = vminvq_u16(v9);
    if (v9.i32[0])
    {
      uint16x8_t v10 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 6), (int16x8_t)xmmword_1826CF9E0);
      v10.i16[0] = vminvq_u16(v10);
      if (v10.i32[0]) {
        return &unk_1E521E340;
      }
    }
  }
  return 0;
}

void *WGSL::parseSeverityControl(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    return 0;
  }
  int v2 = *(_DWORD *)(v1 + 16);
  uint64_t v3 = *(const char **)(v1 + 8);
  int v4 = *(_DWORD *)(v1 + 4);
  if (v3 != "error" && v4 == 5)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 != 101 || *(_WORD *)(v3 + 1) != 29298 || *(_WORD *)(v3 + 3) != 29295) {
        return 0;
      }
    }
    else if (*(_WORD *)v3 != 101 || *(void *)(v3 + 2) != 0x72006F00720072)
    {
      return 0;
    }
    return &unk_1E521E3A0;
  }
  if (v3 == "error" && v4 == 5) {
    return &unk_1E521E3A0;
  }
  if (v3 != "info" && v4 == 4)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 != 105 || *(_WORD *)(v3 + 1) != 26222 || *((_WORD *)v3 + 1) != 28518) {
        return 0;
      }
    }
    else
    {
      if (*(_WORD *)v3 != 105) {
        return 0;
      }
      int v10 = *(_DWORD *)(v3 + 2);
      int v11 = *((_DWORD *)v3 + 1);
      if (v10 != 6684782 || v11 != 7274598) {
        return 0;
      }
    }
    return &unk_1E521E3B8;
  }
  if (v3 == "info" && v4 == 4) {
    return &unk_1E521E3B8;
  }
  if (v3 != "off" && v4 == 3)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 == 111 && *(_WORD *)(v3 + 1) == 26214) {
        return &unk_1E521E3D0;
      }
    }
    else if (*(_WORD *)v3 == 111 && *(_DWORD *)(v3 + 2) == 6684774)
    {
      return &unk_1E521E3D0;
    }
    return 0;
  }
  if (v3 == "off" && v4 == 3) {
    return &unk_1E521E3D0;
  }
  if (v3 == "warning" || v4 != 7)
  {
    if (v4 != 7 || v3 != "warning") {
      return 0;
    }
    return &unk_1E521E3E8;
  }
  if ((v2 & 4) == 0)
  {
    if (*(_WORD *)v3 != 119) {
      return 0;
    }
    if (*(void *)(v3 + 6) != 0x67006E0069006ELL || *(void *)(v3 + 2) != 0x69006E00720061) {
      return 0;
    }
    return &unk_1E521E3E8;
  }
  if (*v3 == 119 && *(_DWORD *)(v3 + 1) == 1768845921 && *(_DWORD *)(v3 + 3) == 1735289198) {
    return &unk_1E521E3E8;
  }
  return 0;
}

unsigned __int8 **WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WGSL::Builtin> [12]>::tryGet<WTF::String>(unsigned __int8 ***a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    int v4 = *(unsigned __int8 **)(v3 + 8);
    unint64_t v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
    uint64_t v6 = *a1;
    if (WTF::operator==(v4, v5, **a1, (uint64_t)(*a1)[1]))
    {
LABEL_3:
      unsigned int v7 = v6;
      goto LABEL_17;
    }
  }
  else
  {
    int v4 = 0;
    unint64_t v5 = 0x100000000;
    uint64_t v6 = *a1;
    if (WTF::operator==(0, 0x100000000, **a1, (uint64_t)(*a1)[1])) {
      goto LABEL_3;
    }
  }
  unsigned int v7 = v6 + 3;
  if (!WTF::operator==(v4, v5, v6[3], (uint64_t)v6[4]))
  {
    unsigned int v7 = v6 + 6;
    if (!WTF::operator==(v4, v5, v6[6], (uint64_t)v6[7]))
    {
      unsigned int v7 = v6 + 9;
      if (!WTF::operator==(v4, v5, v6[9], (uint64_t)v6[10]))
      {
        unsigned int v7 = v6 + 12;
        if (!WTF::operator==(v4, v5, v6[12], (uint64_t)v6[13]))
        {
          unsigned int v7 = v6 + 15;
          if (!WTF::operator==(v4, v5, v6[15], (uint64_t)v6[16]))
          {
            unsigned int v7 = v6 + 18;
            if (!WTF::operator==(v4, v5, v6[18], (uint64_t)v6[19]))
            {
              unsigned int v7 = v6 + 21;
              if (!WTF::operator==(v4, v5, v6[21], (uint64_t)v6[22]))
              {
                unsigned int v7 = v6 + 24;
                if (!WTF::operator==(v4, v5, v6[24], (uint64_t)v6[25]))
                {
                  unsigned int v7 = v6 + 27;
                  if (!WTF::operator==(v4, v5, v6[27], (uint64_t)v6[28]))
                  {
                    unsigned int v7 = v6 + 30;
                    if (!WTF::operator==(v4, v5, v6[30], (uint64_t)v6[31]))
                    {
                      unsigned int v7 = v6 + 36;
                      if (WTF::operator==(v4, v5, v6[33], (uint64_t)v6[34])) {
                        unsigned int v7 = v6 + 33;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_17:
  if (v7 == *a1 + 36) {
    return 0;
  }
  else {
    return v7 + 2;
  }
}

void *WGSL::parseLanguageFeature(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    return 0;
  }
  int v2 = *(_DWORD *)(v1 + 16);
  uint64_t v3 = *(const char **)(v1 + 8);
  int v4 = *(_DWORD *)(v1 + 4);
  if (v3 != "packed_4x8_integer_dot_product" && v4 == 30)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 != 112) {
        return 0;
      }
      uint8x16_t v21 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v3 + 14), (int8x16_t)xmmword_1826CFA00), vceqq_s8(*(int8x16_t *)(v3 + 1), (int8x16_t)xmmword_1826CF9F0));
      v21.i8[0] = vminvq_u8(v21);
      if (!v21.i32[0]) {
        return 0;
      }
    }
    else
    {
      if (*(_WORD *)v3 != 112) {
        return 0;
      }
      uint16x8_t v15 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 2), (int16x8_t)xmmword_1826CFA10);
      v15.i16[0] = vminvq_u16(v15);
      if (!v15.i32[0]) {
        return 0;
      }
      uint16x8_t v16 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 12), (int16x8_t)xmmword_1826CFA20);
      v16.i16[0] = vminvq_u16(v16);
      if (!v16.i32[0]
        || (uint16x8_t v17 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 28), (int16x8_t)xmmword_1826CFA30),
            v17.i16[0] = vminvq_u16(v17),
            !v17.i32[0])
        || (uint16x8_t v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 44), (int16x8_t)xmmword_1826CFA40),
            v18.i16[0] = vminvq_u16(v18),
            !v18.i32[0]))
      {
        BOOL v19 = 0;
        BOOL v20 = v3 == "unrestricted_pointer_parameters";
        goto LABEL_35;
      }
    }
    return &unk_1E521E540;
  }
  if (v3 == "packed_4x8_integer_dot_product" && v4 == 30) {
    return &unk_1E521E540;
  }
  if (v3 != "pointer_composite_access" && v4 == 24)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 != 112) {
        return 0;
      }
      uint8x16_t v25 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v3 + 8), (int8x16_t)xmmword_1826CFA60), vceqq_s8(*(int8x16_t *)(v3 + 1), (int8x16_t)xmmword_1826CFA50));
      v25.i8[0] = vminvq_u8(v25);
      if (!v25.i32[0]) {
        return 0;
      }
    }
    else
    {
      if (*(_WORD *)v3 != 112) {
        return 0;
      }
      uint16x8_t v22 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 2), (int16x8_t)xmmword_1826CFA70);
      v22.i16[0] = vminvq_u16(v22);
      if (!v22.i32[0]) {
        return 0;
      }
      uint16x8_t v23 = (uint16x8_t)vceqq_s16(*((int16x8_t *)v3 + 1), (int16x8_t)xmmword_1826CFA80);
      v23.i16[0] = vminvq_u16(v23);
      if (!v23.i32[0]) {
        return 0;
      }
      uint16x8_t v24 = (uint16x8_t)vceqq_s16(*((int16x8_t *)v3 + 2), (int16x8_t)xmmword_1826CFA90);
      v24.i16[0] = vminvq_u16(v24);
      if (!v24.i32[0]) {
        return 0;
      }
    }
    return &unk_1E521E558;
  }
  if (v3 == "pointer_composite_access" && v4 == 24) {
    return &unk_1E521E558;
  }
  if (v3 == "readonly_and_readwrite_storage_textures" || v4 != 39)
  {
    if (v3 == "readonly_and_readwrite_storage_textures" && v4 == 39) {
      return &unk_1E521E570;
    }
    BOOL v19 = v4 == 31;
    BOOL v20 = v3 == "unrestricted_pointer_parameters";
    if (v3 != "unrestricted_pointer_parameters" && v4 == 31)
    {
      if ((v2 & 4) != 0)
      {
        if (*v3 != 117
          || !vminvq_u8((uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v3 + 15), (int8x16_t)xmmword_1826CFB30), vceqq_s8(*(int8x16_t *)(v3 + 1), (int8x16_t)xmmword_1826CFB20))))
        {
          return 0;
        }
      }
      else
      {
        if (*(_WORD *)v3 != 117) {
          return 0;
        }
        uint16x8_t v29 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 2), (int16x8_t)xmmword_1826CFB40);
        v29.i16[0] = vminvq_u16(v29);
        if (!v29.i32[0]) {
          return 0;
        }
        uint16x8_t v30 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 14), (int16x8_t)xmmword_1826CFB50);
        v30.i16[0] = vminvq_u16(v30);
        if (!v30.i32[0]) {
          return 0;
        }
        uint16x8_t v31 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 30), (int16x8_t)xmmword_1826CFB60);
        v31.i16[0] = vminvq_u16(v31);
        if (!v31.i32[0]) {
          return 0;
        }
        uint16x8_t v32 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 46), (int16x8_t)xmmword_1826CFB70);
        v32.i16[0] = vminvq_u16(v32);
        if (!v32.i32[0]) {
          return 0;
        }
      }
      return &unk_1E521E588;
    }
LABEL_35:
    if (!v20 || !v19) {
      return 0;
    }
    return &unk_1E521E588;
  }
  if ((v2 & 4) != 0)
  {
    if (*v3 == 114)
    {
      uint8x16_t v26 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(v3 + 1), (int8x16_t)xmmword_1826CFAA0);
      v26.i8[0] = vminvq_u8(v26);
      if (v26.i32[0])
      {
        uint8x16_t v27 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(v3 + 7), (int8x16_t)xmmword_1826CFAB0);
        v27.i8[0] = vminvq_u8(v27);
        if (v27.i32[0])
        {
          uint8x16_t v28 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(v3 + 23), (int8x16_t)xmmword_1826CFAC0);
          v28.i8[0] = vminvq_u8(v28);
          if (v28.i32[0]) {
            return &unk_1E521E570;
          }
        }
      }
    }
  }
  else if (*(_WORD *)v3 == 114)
  {
    uint16x8_t v9 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 2), (int16x8_t)xmmword_1826CFAD0);
    v9.i16[0] = vminvq_u16(v9);
    if (v9.i32[0])
    {
      uint16x8_t v10 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 14), (int16x8_t)xmmword_1826CFAE0);
      v10.i16[0] = vminvq_u16(v10);
      if (v10.i32[0])
      {
        uint16x8_t v11 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 30), (int16x8_t)xmmword_1826CFAF0);
        v11.i16[0] = vminvq_u16(v11);
        if (v11.i32[0])
        {
          uint16x8_t v12 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 46), (int16x8_t)xmmword_1826CFB00);
          v12.i16[0] = vminvq_u16(v12);
          if (v12.i32[0])
          {
            uint16x8_t v13 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 62), (int16x8_t)xmmword_1826CFB10);
            v13.i16[0] = vminvq_u16(v13);
            if (v13.i32[0]) {
              return &unk_1E521E570;
            }
          }
        }
      }
    }
  }
  return 0;
}

void *WGSL::ShaderModule::validateOverrides@<X0>(void *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = result[53];
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    uint64_t v7 = v5 + 24 * v6;
    if (*(_DWORD *)(v5 - 12))
    {
      uint64_t v8 = result[53];
      if (v6)
      {
        uint64_t v9 = 24 * v6;
        uint64_t v8 = result[53];
        while ((unint64_t)(*(void *)v8 + 1) <= 1)
        {
          v8 += 24;
          v9 -= 24;
          if (!v9)
          {
            uint64_t v8 = v7;
            break;
          }
        }
      }
    }
    else
    {
      uint64_t v8 = v5 + 24 * v6;
      uint64_t v7 = v8;
    }
    uint64_t v10 = v5 + 24 * *(unsigned int *)(v5 - 4);
    while (v8 != v10)
    {
      uint64_t result = (void *)WGSL::evaluate(*(void *)v8, a2, (uint64_t)v21);
      if (v23)
      {
        uint64_t v12 = *(unsigned int *)(v8 + 20);
        if (v12)
        {
          uint64_t v13 = *(void *)(v8 + 8);
          uint64_t v14 = 8 * v12;
          while (1)
          {
            if (!v23)
            {
              __break(1u);
              return (void *)CFEqual(result, v11);
            }
            uint64_t result = (*(void *(**)(_DWORD **__return_ptr))(**(void **)v13 + 16))(&v19);
            if (v20) {
              break;
            }
            v13 += 8;
            v14 -= 8;
            if (!v14) {
              goto LABEL_20;
            }
          }
          uint64_t v17 = *(void *)(*(void *)v8 + 8);
          uint64_t v16 = *(void *)(*(void *)v8 + 16);
          uint64_t result = v19;
          if (!v19)
          {
            *(void *)a3 = 0;
            *(void *)(a3 + 8) = v17;
            *(void *)(a3 + 16) = v16;
            *(unsigned char *)(a3 + 24) = 1;
            int v15 = 0;
            if (v23) {
              goto LABEL_29;
            }
            goto LABEL_31;
          }
          *v19 += 2;
          *(void *)a3 = result;
          *(void *)(a3 + 8) = v17;
          *(void *)(a3 + 16) = v16;
          *(unsigned char *)(a3 + 24) = 1;
          BOOL v19 = 0;
          if (*(_DWORD *)result != 2)
          {
            *(_DWORD *)result -= 2;
            int v15 = 0;
            if (v23) {
              goto LABEL_29;
            }
            goto LABEL_31;
          }
          uint64_t result = (void *)WTF::StringImpl::destroy();
          int v15 = 0;
          if (!v23) {
            goto LABEL_31;
          }
LABEL_29:
          if (v22 != -1) {
            uint64_t result = (void *)((uint64_t (*)(_DWORD **, unsigned char *))*(&off_1ECABF5A0 + v22))(&v19, v21);
          }
          goto LABEL_31;
        }
LABEL_20:
        int v15 = 1;
        if (v23) {
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t result = (void *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        int v15 = 0;
        *(_OWORD *)(a3 + 8) = *(_OWORD *)(*(void *)v8 + 8);
        *(unsigned char *)(a3 + 24) = 1;
        if (v23) {
          goto LABEL_29;
        }
      }
LABEL_31:
      if (!v15) {
        return result;
      }
      uint64_t v18 = v8 + 24;
      uint64_t v8 = v7;
      if (v18 != v7)
      {
        uint64_t v8 = v18;
        while ((unint64_t)(*(void *)v8 + 1) <= 1)
        {
          v8 += 24;
          if (v8 == v7)
          {
            uint64_t v8 = v7;
            break;
          }
        }
      }
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 24) = 0;
  return result;
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9B60](name);
}

CGDataProviderRef CGDataProviderCreateWithData(void *info, const void *data, size_t size, CGDataProviderReleaseDataCallback releaseData)
{
  return (CGDataProviderRef)MEMORY[0x1F40DA310](info, data, size, releaseData);
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1F40DA868](width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, *(void *)&bitmapInfo, provider);
}

CFTypeRef CVBufferCopyAttachment(CVBufferRef buffer, CFStringRef key, CVAttachmentMode *attachmentMode)
{
  return (CFTypeRef)MEMORY[0x1F40DFB48](buffer, key, attachmentMode);
}

CVReturn CVMetalTextureCacheCreate(CFAllocatorRef allocator, CFDictionaryRef cacheAttributes, id metalDevice, CFDictionaryRef textureAttributes, CVMetalTextureCacheRef *cacheOut)
{
  return MEMORY[0x1F40DFC78](allocator, cacheAttributes, metalDevice, textureAttributes, cacheOut);
}

CVReturn CVMetalTextureCacheCreateTextureFromImage(CFAllocatorRef allocator, CVMetalTextureCacheRef textureCache, CVImageBufferRef sourceImage, CFDictionaryRef textureAttributes, MTLPixelFormat pixelFormat, size_t width, size_t height, size_t planeIndex, CVMetalTextureRef *textureOut)
{
  return MEMORY[0x1F40DFC80](allocator, textureCache, sourceImage, textureAttributes, pixelFormat, width, height, planeIndex);
}

void CVMetalTextureGetCleanTexCoords(CVMetalTextureRef image, float *lowerLeft, float *lowerRight, float *upperRight, float *upperLeft)
{
}

id CVMetalTextureGetTexture(CVMetalTextureRef image)
{
  return (id)MEMORY[0x1F40DFC98](image);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x1F40DFD30](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1F40DFD48](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1F40DFD70](pixelBuffer, planeIndex);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x1F40DFD78](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD80](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD88](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1F40DFDA0](pixelBuffer, planeIndex);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x1F40DFDB8](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x1F40DFE48](pixelBuffer, unlockFlags);
}

uint64_t IOSurfaceSetOwnershipIdentity()
{
  return MEMORY[0x1F40E95D0]();
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x1F40EDE00]();
}

uint64_t WTFLogAlways()
{
  return MEMORY[0x1F40E9EE8]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t WTF::StringImpl::createWithoutCopyingNonEmpty()
{
  return MEMORY[0x1F40EAC58]();
}

{
  return MEMORY[0x1F40EAC60]();
}

uint64_t WTF::StringImpl::destroy()
{
  return MEMORY[0x1F40EACA8]();
}

uint64_t WTF::StringImpl::endsWith()
{
  return MEMORY[0x1F40EACD0]();
}

uint64_t WTF::StringImpl::substring(WTF::StringImpl *this)
{
  return MEMORY[0x1F40EACD8](this);
}

uint64_t WTF::StringImpl::operator NSString *()
{
  return MEMORY[0x1F40EACE0]();
}

uint64_t WTF::fastMalloc(WTF *this)
{
  return MEMORY[0x1F40EADC0](this);
}

uint64_t WTF::parseDouble()
{
  return MEMORY[0x1F40EAF68]();
}

{
  return MEMORY[0x1F40EAF70]();
}

uint64_t WTF::MachSendRight::MachSendRight()
{
  return MEMORY[0x1F40EAFD8]();
}

{
  return MEMORY[0x1F40EAFE0]();
}

void WTF::MachSendRight::~MachSendRight(WTF::MachSendRight *this)
{
}

uint64_t WTF::MonotonicTime::now(WTF::MonotonicTime *this)
{
  return MEMORY[0x1F40EB000](this);
}

uint64_t WTF::StringBuilder::shrinkToFit(WTF::StringBuilder *this)
{
  return MEMORY[0x1F40EB008](this);
}

uint64_t WTF::StringBuilder::extendBufferForAppendingLChar(WTF::StringBuilder *this)
{
  return MEMORY[0x1F40EB020](this);
}

uint64_t WTF::StringBuilder::extendBufferForAppendingWithUpconvert(WTF::StringBuilder *this)
{
  return MEMORY[0x1F40EB028](this);
}

uint64_t WTF::StringBuilder::append()
{
  return MEMORY[0x1F40EB030]();
}

{
  return MEMORY[0x1F40EB038]();
}

uint64_t WTF::printInternal()
{
  return MEMORY[0x1F40EB090]();
}

{
  return MEMORY[0x1F40EB098]();
}

{
  return MEMORY[0x1F40EB0A0]();
}

{
  return MEMORY[0x1F40EB0A8]();
}

{
  return MEMORY[0x1F40EB0B0]();
}

{
  return MEMORY[0x1F40EB0B8]();
}

{
  return MEMORY[0x1F40EB0C0]();
}

{
  return MEMORY[0x1F40EB0C8]();
}

{
  return MEMORY[0x1F40EB0D0]();
}

uint64_t WTF::tryFastMalloc(WTF *this)
{
  return MEMORY[0x1F40EB0E0](this);
}

uint64_t WTF::BinarySemaphore::signal(WTF::BinarySemaphore *this)
{
  return MEMORY[0x1F40EB3C0](this);
}

uint64_t WTF::BinarySemaphore::waitUntil()
{
  return MEMORY[0x1F40EB3C8]();
}

uint64_t WTF::codePointCompare()
{
  return MEMORY[0x1F40EB410]();
}

uint64_t WTF::fastZeroedMalloc(WTF *this)
{
  return MEMORY[0x1F40EB420](this);
}

uint64_t WTF::StringPrintStream::toString(WTF::StringPrintStream *this)
{
  return MEMORY[0x1F40EB458](this);
}

uint64_t WTF::StringPrintStream::StringPrintStream(WTF::StringPrintStream *this)
{
  return MEMORY[0x1F40EB468](this);
}

void WTF::StringPrintStream::~StringPrintStream(WTF::StringPrintStream *this)
{
}

uint64_t WTF::fastCompactMalloc(WTF *this)
{
  return MEMORY[0x1F40EB4B0](this);
}

uint64_t WTF::tryFastCompactMalloc(WTF *this)
{
  return MEMORY[0x1F40EB620](this);
}

uint64_t WTF::numberToStringAndSize()
{
  return MEMORY[0x1F40EB670]();
}

{
  return MEMORY[0x1F40EB678]();
}

uint64_t WTF::numberToStringWithTrailingPoint()
{
  return MEMORY[0x1F40EB838]();
}

uint64_t WTF::Lock::unlockSlow(WTF::Lock *this)
{
  return MEMORY[0x1F40EB978](this);
}

uint64_t WTF::Lock::lockSlow(WTF::Lock *this)
{
  return MEMORY[0x1F40EB980](this);
}

uint64_t WTF::equal()
{
  return MEMORY[0x1F40EBA08]();
}

uint64_t WTF::equal(WTF *this, const WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  return MEMORY[0x1F40EBA18](this, a2, a3);
}

{
  return MEMORY[0x1F40EBA20](this, a2, a3);
}

uint64_t WTF::String::number(WTF::String *this, double a2)
{
  return MEMORY[0x1F40EBA68](this, a2);
}

uint64_t WTF::String::number(WTF::String *this, float a2)
{
  return MEMORY[0x1F40EBA70](this, a2);
}

uint64_t WTF::String::number(WTF::String *this)
{
  return MEMORY[0x1F40EBA78](this);
}

{
  return MEMORY[0x1F40EBA80](this);
}

{
  return MEMORY[0x1F40EBA90](this);
}

{
  return MEMORY[0x1F40EBA98](this);
}

uint64_t WTF::String::fromUTF8()
{
  return MEMORY[0x1F40EBAA8]();
}

uint64_t WTF::String::String(WTF::String *this, const __CFString *a2)
{
  return MEMORY[0x1F40EBAD0](this, a2);
}

uint64_t WTF::dataFile(WTF *this)
{
  return MEMORY[0x1F40EBC98](this);
}

uint64_t WTF::fastFree(WTF *this, void *a2)
{
  return MEMORY[0x1F40EBCA8](this, a2);
}

uint64_t WTF::StringImpl::hashSlowCase(WTF::StringImpl *this)
{
  return MEMORY[0x1F40EC820](this);
}

uint64_t WTF::ASCIILiteral::dump()
{
  return MEMORY[0x1F40EC908]();
}

uint64_t WTF::StringBuilder::reifyString(WTF::StringBuilder *this)
{
  return MEMORY[0x1F40EC920](this);
}

uint64_t WTF::String::utf8()
{
  return MEMORY[0x1F40ECAD8]();
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

long double acos(long double __x)
{
  MEMORY[0x1F40CA330](__x);
  return result;
}

float acosf(float a1)
{
  MEMORY[0x1F40CA340](a1);
  return result;
}

long double acosh(long double __x)
{
  MEMORY[0x1F40CA348](__x);
  return result;
}

float acoshf(float a1)
{
  MEMORY[0x1F40CA350](a1);
  return result;
}

long double asin(long double __x)
{
  MEMORY[0x1F40CA3D0](__x);
  return result;
}

float asinf(float a1)
{
  MEMORY[0x1F40CA3D8](a1);
  return result;
}

long double asinh(long double __x)
{
  MEMORY[0x1F40CA3E0](__x);
  return result;
}

float asinhf(float a1)
{
  MEMORY[0x1F40CA3E8](a1);
  return result;
}

long double atan(long double __x)
{
  MEMORY[0x1F40CA450](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x1F40CA460](__y, __x);
  return result;
}

float atan2f(float a1, float a2)
{
  MEMORY[0x1F40CA468](a1, a2);
  return result;
}

float atanf(float a1)
{
  MEMORY[0x1F40CA470](a1);
  return result;
}

long double atanh(long double __x)
{
  MEMORY[0x1F40CA478](__x);
  return result;
}

float atanhf(float a1)
{
  MEMORY[0x1F40CA480](a1);
  return result;
}

void bzero(void *a1, size_t a2)
{
}

long double cos(long double __x)
{
  MEMORY[0x1F40CB8A8](__x);
  return result;
}

float cosf(float a1)
{
  MEMORY[0x1F40CB8B0](a1);
  return result;
}

long double cosh(long double __x)
{
  MEMORY[0x1F40CB8B8](__x);
  return result;
}

float coshf(float a1)
{
  MEMORY[0x1F40CB8C0](a1);
  return result;
}

long double exp(long double __x)
{
  MEMORY[0x1F40CBFE0](__x);
  return result;
}

long double exp2(long double __x)
{
  MEMORY[0x1F40CBFE8](__x);
  return result;
}

float exp2f(float a1)
{
  MEMORY[0x1F40CBFF0](a1);
  return result;
}

float expf(float a1)
{
  MEMORY[0x1F40CBFF8](a1);
  return result;
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x1F40CC1A0](__x, __y);
  return result;
}

float fmodf(float a1, float a2)
{
  MEMORY[0x1F40CC1A8](a1, a2);
  return result;
}

long double frexp(long double __x, int *__e)
{
  MEMORY[0x1F40CC248](__e, __x);
  return result;
}

float frexpf(float a1, int *a2)
{
  MEMORY[0x1F40CC250](a2, a1);
  return result;
}

long double ldexp(long double __x, int __e)
{
  MEMORY[0x1F40CC800](*(void *)&__e, __x);
  return result;
}

float ldexpf(float a1, int a2)
{
  MEMORY[0x1F40CC808](*(void *)&a2, a1);
  return result;
}

long double log(long double __x)
{
  MEMORY[0x1F40CC878](__x);
  return result;
}

long double log2(long double __x)
{
  MEMORY[0x1F40CC8A8](__x);
  return result;
}

float log2f(float a1)
{
  MEMORY[0x1F40CC8B0](a1);
  return result;
}

float logf(float a1)
{
  MEMORY[0x1F40CC8C0](a1);
  return result;
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

long double modf(long double __x, long double *__y)
{
  MEMORY[0x1F40CCE48](__y, __x);
  return result;
}

float modff(float a1, float *a2)
{
  MEMORY[0x1F40CCE50](a2, a1);
  return result;
}

float nextafterf(float a1, float a2)
{
  MEMORY[0x1F40CD000](a1, a2);
  return result;
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1F40CD040](*(void *)&token, state64);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1F40CD060](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181A40](a1);
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x1F40CD818](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  MEMORY[0x1F40CD828](a1, a2);
  return result;
}

long double sin(long double __x)
{
  MEMORY[0x1F40CE058](__x);
  return result;
}

float sinf(float a1)
{
  MEMORY[0x1F40CE060](a1);
  return result;
}

long double sinh(long double __x)
{
  MEMORY[0x1F40CE068](__x);
  return result;
}

float sinhf(float a1)
{
  MEMORY[0x1F40CE070](a1);
  return result;
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

double strtod(const char *a1, char **a2)
{
  MEMORY[0x1F40CE260](a1, a2);
  return result;
}

long double tan(long double __x)
{
  MEMORY[0x1F40CE420](__x);
  return result;
}

float tanf(float a1)
{
  MEMORY[0x1F40CE428](a1);
  return result;
}

long double tanh(long double __x)
{
  MEMORY[0x1F40CE430](__x);
  return result;
}

float tanhf(float a1)
{
  MEMORY[0x1F40CE438](a1);
  return result;
}

int8_t u_charType(UChar32 c)
{
  return MEMORY[0x1F417F718](*(void *)&c);
}

UBool u_stringHasBinaryProperty(const UChar *s, int32_t length, UProperty which)
{
  return MEMORY[0x1F417F888](s, *(void *)&length, *(void *)&which);
}