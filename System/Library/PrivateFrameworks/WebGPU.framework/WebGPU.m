void WGSL::TypeStore::allocateType<WGSL::Types::TypeConstructor,WTF::ASCIILiteral &,std::function<WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>>()
{
  uint64_t v0;

  v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

uint64_t WGSL::TypeStore::pointerType(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6 = *(void *)(a1 + 16);
  v21[0] = ((unint64_t)a2 << 8) | ((unint64_t)a4 << 16) | 7;
  v21[1] = a3;
  if (!v6) {
    goto LABEL_31;
  }
  unsigned int v8 = *(_DWORD *)(v6 - 8);
  int v9 = WTF::TupleHash<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>::hash<0ul>((unsigned __int8 *)v21);
  for (i = 0; ; int v9 = ++i + (v9 & v8))
  {
    uint64_t v11 = v6 + 24 * (v9 & v8);
    int v12 = *(unsigned __int8 *)(v11 + 1);
    int v13 = *(unsigned __int16 *)(v11 + 2);
    BOOL v14 = *(unsigned char *)v11 == 7 && v12 == a2;
    if (v14 && v13 == a4 && !*(_DWORD *)(v11 + 4) && *(void *)(v11 + 8) == a3) {
      break;
    }
    if (*(unsigned char *)v11) {
      BOOL v17 = 0;
    }
    else {
      BOOL v17 = v12 == 0;
    }
    BOOL v19 = v17 && v13 == 0 && *(_DWORD *)(v11 + 4) == 0;
    if (v19 && !*(void *)(v11 + 8)) {
      goto LABEL_31;
    }
  }
  if (v6 + 24 * *(unsigned int *)(v6 - 4) == v11 || !*(void *)(v11 + 16)) {
LABEL_31:
  }
    WGSL::TypeStore::allocateType<WGSL::Types::Pointer,WGSL::AddressSpace &,WGSL::AccessMode &,WGSL::Type const*&>();
  return *(void *)(v11 + 16);
}

void WGSL::TypeStore::allocateType<WGSL::Types::Pointer,WGSL::AddressSpace &,WGSL::AccessMode &,WGSL::Type const*&>()
{
}

uint64_t WGSL::TypeStore::referenceType(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = 0x100000000;
  if (!a5) {
    unint64_t v8 = 0;
  }
  v24[0] = ((unint64_t)a4 << 16) | ((unint64_t)a2 << 8) | v8 | 6;
  v24[1] = a3;
  if (!v7) {
    goto LABEL_33;
  }
  unint64_t v10 = HIDWORD(v8);
  unsigned int v11 = *(_DWORD *)(v7 - 8);
  int v12 = WTF::TupleHash<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>::hash<0ul>((unsigned __int8 *)v24);
  for (int i = 0; ; v12 = ++i + (v12 & v11))
  {
    uint64_t v14 = v7 + 24 * (v12 & v11);
    int v15 = *(unsigned __int8 *)(v14 + 1);
    int v16 = *(unsigned __int16 *)(v14 + 2);
    BOOL v17 = *(unsigned char *)v14 == 6 && v15 == a2;
    if (v17 && v16 == a4 && *(_DWORD *)(v14 + 4) == v10 && *(void *)(v14 + 8) == a3) {
      break;
    }
    if (*(unsigned char *)v14) {
      BOOL v20 = 0;
    }
    else {
      BOOL v20 = v15 == 0;
    }
    BOOL v22 = v20 && v16 == 0 && *(_DWORD *)(v14 + 4) == 0;
    if (v22 && !*(void *)(v14 + 8)) {
      goto LABEL_33;
    }
  }
  if (v7 + 24 * *(unsigned int *)(v7 - 4) == v14 || !*(void *)(v14 + 16)) {
LABEL_33:
  }
    WGSL::TypeStore::allocateType<WGSL::Types::Reference,WGSL::AddressSpace &,WGSL::AccessMode &,WGSL::Type const*&,BOOL &>();
  return *(void *)(v14 + 16);
}

uint64_t WGSL::evaluate@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result;
  uint64_t v5 = result + 32;
  LOBYTE(v29[0]) = 0;
  unsigned __int8 v31 = 0;
  if (!*(unsigned char *)(result + 56))
  {
    result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    if (result != 22)
    {
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 24) = 0;
      return result;
    }
    uint64_t v12 = *a2;
    if (v12)
    {
      int v13 = *(_DWORD *)(v12 - 8);
      uint64_t v14 = *(WTF::StringImpl **)(v3 + 88);
      unsigned int v15 = *((_DWORD *)v14 + 4);
      if (v15 < 0x100) {
        unsigned int v16 = WTF::StringImpl::hashSlowCase(v14);
      }
      else {
        unsigned int v16 = v15 >> 8;
      }
      for (int i = 0; ; v16 = i + v18)
      {
        uint64_t v18 = v16 & v13;
        BOOL v19 = *(WTF **)(v12 + 32 * v18);
        if (v19 != (WTF *)-1)
        {
          if (!v19) {
            goto LABEL_20;
          }
          result = WTF::equal(v19, *(const WTF::StringImpl **)(v3 + 88), v11);
          if (result) {
            break;
          }
        }
        ++i;
      }
      uint64_t v20 = v12 + 32 * v18;
      LOBYTE(v29[0]) = 0;
      int v21 = -1;
      unsigned int v30 = -1;
      uint64_t v22 = *(unsigned int *)(v20 + 24);
      if (v22 == -1)
      {
        v27[0] = 0;
        unsigned int v28 = -1;
        if (*(unsigned char *)(v3 + 56))
        {
LABEL_22:
          uint64_t v24 = *(unsigned int *)(v3 + 48);
          if (v24 == -1)
          {
            if (v21 == -1) {
              goto LABEL_31;
            }
          }
          else if (v21 == -1)
          {
            result = ((uint64_t (*)(uint64_t *, uint64_t))off_1ECABF440[v24])(&v32, v5);
            *(_DWORD *)(v3 + 48) = -1;
            uint64_t v25 = v28;
            if (v28 == -1) {
              goto LABEL_31;
            }
LABEL_30:
            result = ((uint64_t (*)(uint64_t *, unsigned char *))off_1ECABF440[v25])(&v32, v27);
            goto LABEL_31;
          }
          uint64_t v32 = v5;
          result = ((uint64_t (*)(uint64_t *, uint64_t, unsigned char *))off_1ECABF498[v21])(&v32, v5, v27);
          uint64_t v25 = v28;
          if (v28 == -1) {
            goto LABEL_31;
          }
          goto LABEL_30;
        }
        *(unsigned char *)(v3 + 32) = 0;
        *(_DWORD *)(v3 + 48) = -1;
        *(unsigned char *)(v3 + 56) = 1;
        uint64_t v25 = v28;
        if (v28 != -1) {
          goto LABEL_30;
        }
LABEL_31:
        unsigned int v28 = -1;
        *(unsigned char *)a3 = 0;
        *(_DWORD *)(a3 + 16) = -1;
        unsigned int v26 = v30;
        if (v30 != -1)
        {
          result = ((uint64_t (*)(uint64_t *, uint64_t, _DWORD *))*(&off_1ECABF548 + v30))(&v32, a3, v29);
          *(_DWORD *)(a3 + 16) = v26;
          uint64_t v9 = v30;
          *(unsigned char *)(a3 + 24) = 1;
          if (v9 == -1) {
            return result;
          }
          return ((uint64_t (*)(uint64_t *, _DWORD *))off_1ECABF440[v9])(&v32, v29);
        }
LABEL_34:
        *(unsigned char *)(a3 + 24) = 1;
        return result;
      }
      v23 = (float (*)(uint64_t, _DWORD *, float *))*(&off_1ECABF4F0 + v22);
      v23((uint64_t)&v32, v29, (float *)(v20 + 8));
      unsigned int v30 = v22;
      int v21 = v22;
    }
    else
    {
LABEL_20:
      int v21 = 0;
      v29[0] = 0;
      unsigned int v30 = 0;
      v23 = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_;
    }
    v27[0] = 0;
    unsigned int v28 = -1;
    result = ((uint64_t (*)(uint64_t *, unsigned char *, _DWORD *))v23)(&v32, v27, v29);
    unsigned int v28 = v21;
    if (*(unsigned char *)(v3 + 56)) {
      goto LABEL_22;
    }
    *(unsigned char *)(v3 + 32) = 0;
    *(_DWORD *)(v3 + 48) = -1;
    result = ((uint64_t (*)(uint64_t *, uint64_t, unsigned char *))v23)(&v32, v5, v27);
    *(_DWORD *)(v3 + 48) = v21;
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v25 = v28;
    if (v28 != -1) {
      goto LABEL_30;
    }
    goto LABEL_31;
  }
  unsigned int v30 = -1;
  uint64_t v6 = *(unsigned int *)(result + 48);
  if (v6 == -1)
  {
    *(unsigned char *)a3 = 0;
    *(_DWORD *)(a3 + 16) = -1;
    goto LABEL_34;
  }
  uint64_t v7 = (void (*)(uint64_t *, _DWORD *, uint64_t))*(&off_1ECABF4F0 + v6);
  v7(&v32, v29, v5);
  unsigned int v30 = v6;
  unsigned __int8 v31 = 1;
  *(unsigned char *)a3 = 0;
  *(_DWORD *)(a3 + 16) = -1;
  result = ((uint64_t (*)(uint64_t *, uint64_t, _DWORD *))v7)(&v32, a3, v29);
  *(_DWORD *)(a3 + 16) = v6;
  int v8 = v31;
  *(unsigned char *)(a3 + 24) = 1;
  if (v8)
  {
    uint64_t v9 = v30;
    if (v30 != -1) {
      return ((uint64_t (*)(uint64_t *, _DWORD *))off_1ECABF440[v9])(&v32, v29);
    }
  }
  return result;
}

unsigned __int8 *WGSL::Type::dump(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  int v4 = *((_DWORD *)result + 12);
  if (v4 == -1) {
    uint64_t v5 = -1;
  }
  else {
    uint64_t v5 = *((unsigned int *)result + 12);
  }
  uint64_t v7 = result;
  switch(v5)
  {
    case 1:
      if (v4 != 1) {
        goto LABEL_62;
      }
      uint64_t v8 = *(void *)result;
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
      WTF::printInternal();
      goto LABEL_12;
    case 2:
      if (v4 != 2) {
        goto LABEL_62;
      }
      uint64_t v8 = *(void *)result;
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
      WTF::printInternal();
      WTF::printInternal();
      WTF::printInternal();
LABEL_12:
      WTF::printInternal();
      WTF::printInternal();
      WGSL::Type::dump(v8, v9);
      goto LABEL_114;
    case 3:
      if (v4 != 3) {
        goto LABEL_62;
      }
      uint64_t v2 = *(void *)result;
      uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
      WTF::printInternal();
      WGSL::Type::dump(v2, v3);
      (*(void (**)(uint64_t))(*(void *)a2 + 40))(a2);
      int v10 = *((_DWORD *)v7 + 4);
      if (v10 == -1) {
        uint64_t v11 = -1;
      }
      else {
        uint64_t v11 = *((unsigned int *)v7 + 4);
      }
      if (v11 == 2)
      {
        if (v10 == 2)
        {
          uint64_t v31 = *((void *)v7 + 1);
          (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
          WTF::printInternal();
          (*(void (**)(uint64_t))(*(void *)a2 + 40))(a2);
          v42.i8[8] = 0;
          char v43 = 0;
          v42.i64[0] = (uint64_t)&unk_1ECABB4F8;
          WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)v44);
          v45 = 0;
          WGSL::AST::Visitor::visit(&v42, v31);
          WTF::StringPrintStream::toString((uint64_t *)&v41, (WTF::StringPrintStream *)v44);
          (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
          WTF::printInternal();
          (*(void (**)(uint64_t))(*(void *)a2 + 40))(a2);
          uint64_t v32 = v41;
          v41 = 0;
          if (v32)
          {
            if (*v32 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v32 -= 2;
            }
          }
          v38 = v45;
          v45 = 0;
          if (v38)
          {
            if (*v38 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v38 -= 2;
            }
          }
          WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)v44);
          v42.i64[0] = (uint64_t)&unk_1ECABB740;
          if (v43)
          {
            v39 = (_DWORD *)v42.i64[1];
            v42.i64[1] = 0;
            if (v39)
            {
              if (*v39 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *v39 -= 2;
              }
            }
          }
          goto LABEL_77;
        }
      }
      else if (v11 == 1)
      {
        if (v10 == 1)
        {
          (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
          WTF::printInternal();
          WTF::printInternal();
          goto LABEL_76;
        }
      }
      else if (!v10)
      {
        goto LABEL_77;
      }
LABEL_62:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_63:
      int64x2_t v25 = vdupq_n_s64(9uLL);
      unsigned int v26 = "function";
LABEL_68:
      v25.i64[0] = (uint64_t)v26;
      int64x2_t v42 = v25;
      (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
      WTF::ASCIILiteral::dump();
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
      WTF::printInternal();
      WGSL::Type::dump(v3, v2);
      WTF::printInternal();
      int v33 = v7[1];
      if (v33 == 2)
      {
LABEL_112:
        int64x2_t v34 = vdupq_n_s64(6uLL);
        v35 = "write";
      }
      else
      {
LABEL_69:
        if (v33 == 1)
        {
          int64x2_t v34 = vdupq_n_s64(0xBuLL);
          v35 = "read_write";
        }
        else
        {
          int64x2_t v34 = vdupq_n_s64(5uLL);
          v35 = "read";
        }
      }
      v34.i64[0] = (uint64_t)v35;
      int64x2_t v42 = v34;
      (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
      WTF::ASCIILiteral::dump();
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
      goto LABEL_114;
    case 4:
      if (v4 != 4) {
        goto LABEL_62;
      }
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
      (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
      WTF::printInternal();
      (*(void (**)(uint64_t))(*(void *)v12 + 40))(v12);
      goto LABEL_115;
    case 5:
      if (v4 != 5) {
        goto LABEL_62;
      }
      (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
      WTF::printInternal();
      WTF::printInternal();
      (*(void (**)(uint64_t))(*(void *)a2 + 40))(a2);
      int v13 = v7[8];
      if (v13 == 2)
      {
        uint64_t v14 = *((void *)v7 + 2);
        if (!*(_DWORD *)v14)
        {
          __break(0xC471u);
          JUMPOUT(0x1824C86CCLL);
        }
      }
      else if (v13 == 1)
      {
        uint64_t v14 = *((void *)v7 + 2);
        if (!*(_DWORD *)v14)
        {
          __break(0xC471u);
          JUMPOUT(0x1824C8B54);
        }
      }
      else
      {
        if (v7[8]) {
          goto LABEL_77;
        }
        uint64_t v14 = *((void *)v7 + 2);
        if (!*(_DWORD *)v14)
        {
          __break(0xC471u);
          JUMPOUT(0x1824C7E7CLL);
        }
      }
      uint64_t v36 = *(void *)(v14 + 8);
      uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
      WGSL::Type::dump(v36, v37);
LABEL_76:
      (*(void (**)(uint64_t))(*(void *)a2 + 40))(a2);
LABEL_77:
      (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
LABEL_114:
      WTF::printInternal();
LABEL_115:
      v40 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 40);
      return (unsigned __int8 *)v40(a2);
    case 6:
      if (v4 != 6) {
        goto LABEL_62;
      }
      (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
      WTF::printInternal();
      (*(void (**)(uint64_t))(*(void *)a2 + 40))(a2);
      uint64_t v15 = *((unsigned int *)v7 + 3);
      if (v15)
      {
        unsigned int v16 = *(void **)v7;
        uint64_t v17 = **(void **)v7;
        uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
        WGSL::Type::dump(v17, v18);
        (*(void (**)(uint64_t))(*(void *)a2 + 40))(a2);
        if (v15 != 1)
        {
          BOOL v19 = v16 + 1;
          uint64_t v20 = 8 * v15 - 8;
          do
          {
            uint64_t v21 = *v19++;
            (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
            WTF::printInternal();
            (*(void (**)(uint64_t))(*(void *)a2 + 40))(a2);
            uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
            WGSL::Type::dump(v21, v22);
            (*(void (**)(uint64_t))(*(void *)a2 + 40))(a2);
            v20 -= 8;
          }
          while (v20);
        }
      }
      uint64_t v23 = *((void *)v7 + 2);
      uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
      WTF::printInternal();
      WGSL::Type::dump(v23, v24);
      goto LABEL_115;
    case 7:
      if (v4 != 7) {
        goto LABEL_62;
      }
      switch(result[8])
      {
        case 1u:
        case 2u:
        case 4u:
          WTF::PrintStream::print<char [11]>(a2);
          break;
        case 3u:
          WTF::PrintStream::print<char [17]>(a2);
          break;
        case 5u:
          WTF::PrintStream::print<char [13]>(a2);
          break;
        case 6u:
          WTF::PrintStream::print<char [19]>(a2);
          break;
        case 7u:
          WTF::PrintStream::print<char [24]>(a2);
          break;
        default:
          break;
      }
      v27 = *(void **)v7;
      uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
      goto LABEL_84;
    case 8:
      if (v4 != 8) {
        goto LABEL_62;
      }
      if ((*result - 1) < 4u)
      {
        (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
        WTF::printInternal();
        (*(void (**)(uint64_t))(*(void *)a2 + 40))(a2);
      }
      uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
      WTF::printInternal();
      switch(v7[1])
      {
        case 1u:
          int64x2_t v29 = vdupq_n_s64(9uLL);
          unsigned int v30 = "r32float";
          break;
        case 2u:
          int64x2_t v29 = vdupq_n_s64(8uLL);
          unsigned int v30 = "r32sint";
          break;
        case 3u:
          int64x2_t v29 = vdupq_n_s64(8uLL);
          unsigned int v30 = "r32uint";
          break;
        case 4u:
          int64x2_t v29 = vdupq_n_s64(0xAuLL);
          unsigned int v30 = "rg32float";
          break;
        case 5u:
          int64x2_t v29 = vdupq_n_s64(9uLL);
          unsigned int v30 = "rg32sint";
          break;
        case 6u:
          int64x2_t v29 = vdupq_n_s64(9uLL);
          unsigned int v30 = "rg32uint";
          break;
        case 7u:
          int64x2_t v29 = vdupq_n_s64(0xCuLL);
          unsigned int v30 = "rgba16float";
          break;
        case 8u:
          int64x2_t v29 = vdupq_n_s64(0xBuLL);
          unsigned int v30 = "rgba16sint";
          break;
        case 9u:
          int64x2_t v29 = vdupq_n_s64(0xBuLL);
          unsigned int v30 = "rgba16uint";
          break;
        case 0xAu:
          int64x2_t v29 = vdupq_n_s64(0xCuLL);
          unsigned int v30 = "rgba32float";
          break;
        case 0xBu:
          int64x2_t v29 = vdupq_n_s64(0xBuLL);
          unsigned int v30 = "rgba32sint";
          break;
        case 0xCu:
          int64x2_t v29 = vdupq_n_s64(0xBuLL);
          unsigned int v30 = "rgba32uint";
          break;
        case 0xDu:
          int64x2_t v29 = vdupq_n_s64(0xAuLL);
          unsigned int v30 = "rgba8sint";
          break;
        case 0xEu:
          int64x2_t v29 = vdupq_n_s64(0xBuLL);
          unsigned int v30 = "rgba8snorm";
          break;
        case 0xFu:
          int64x2_t v29 = vdupq_n_s64(0xAuLL);
          unsigned int v30 = "rgba8uint";
          break;
        case 0x10u:
          int64x2_t v29 = vdupq_n_s64(0xBuLL);
          unsigned int v30 = "rgba8unorm";
          break;
        default:
          int64x2_t v29 = vdupq_n_s64(0xBuLL);
          unsigned int v30 = "bgra8unorm";
          break;
      }
      v29.i64[0] = (uint64_t)v30;
      int64x2_t v42 = v29;
      (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
      WTF::ASCIILiteral::dump();
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
      WTF::printInternal();
      int v33 = v7[2];
      if (v33 == 2) {
        goto LABEL_112;
      }
      goto LABEL_69;
    case 9:
      if (v4 != 9) {
        goto LABEL_62;
      }
      if (*result - 1 <= 4) {
        goto LABEL_53;
      }
      return result;
    case 10:
      if (v4 == 10)
      {
        uint64_t v3 = *((void *)result + 1);
        uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
        WTF::printInternal();
        switch(*v7)
        {
          case 1u:
            goto LABEL_47;
          case 2u:
            goto LABEL_64;
          case 3u:
            goto LABEL_65;
          case 4u:
            goto LABEL_66;
          case 5u:
            goto LABEL_67;
          default:
            goto LABEL_63;
        }
      }
      goto LABEL_62;
    case 11:
      if (v4 != 11) {
        goto LABEL_62;
      }
      uint64_t v3 = *((void *)result + 1);
      uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
      WTF::printInternal();
      switch(*v7)
      {
        case 1u:
LABEL_47:
          int64x2_t v25 = vdupq_n_s64(7uLL);
          unsigned int v26 = "handle";
          break;
        case 2u:
LABEL_64:
          int64x2_t v25 = vdupq_n_s64(8uLL);
          unsigned int v26 = "private";
          break;
        case 3u:
LABEL_65:
          int64x2_t v25 = vdupq_n_s64(8uLL);
          unsigned int v26 = "storage";
          break;
        case 4u:
LABEL_66:
          int64x2_t v25 = vdupq_n_s64(8uLL);
          unsigned int v26 = "uniform";
          break;
        case 5u:
LABEL_67:
          int64x2_t v25 = vdupq_n_s64(0xAuLL);
          unsigned int v26 = "workgroup";
          break;
        default:
          goto LABEL_63;
      }
      goto LABEL_68;
    case 12:
      if (v4 != 12) {
        goto LABEL_62;
      }
      v27 = *(void **)result;
      uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
LABEL_84:
      WTF::printInternal();
      WGSL::Type::dump(v27, v28);
      goto LABEL_114;
    case 13:
      if (v4 != 13) {
        goto LABEL_62;
      }
      (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
      WTF::ASCIILiteral::dump();
      goto LABEL_115;
    case 14:
      if (v4 == 14) {
        goto LABEL_53;
      }
      goto LABEL_62;
    default:
      if (v4) {
        goto LABEL_62;
      }
      if ((unint64_t)(char)*result > 0xD) {
        return result;
      }
LABEL_53:
      (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
      goto LABEL_114;
  }
}

uint64_t std::__throw_bad_variant_access[abi:sn180100]()
{
  std::__libcpp_verbose_abort("bad_variant_access was thrown in -fno-exceptions mode");
  return WGSL::Type::isStorable(v0);
}

uint64_t WGSL::Type::isStorable(WGSL::Type *this)
{
  while (2)
  {
    int v1 = *((_DWORD *)this + 12);
    if (v1 == -1) {
      uint64_t v2 = -1;
    }
    else {
      uint64_t v2 = *((unsigned int *)this + 12);
    }
    switch(v2)
    {
      case 1:
        if (v1 != 1) {
          goto LABEL_45;
        }
        goto LABEL_3;
      case 2:
        if (v1 != 2) {
          goto LABEL_45;
        }
        goto LABEL_3;
      case 3:
        if (v1 != 3) {
          goto LABEL_45;
        }
LABEL_3:
        this = *(WGSL::Type **)this;
        continue;
      case 4:
        if (v1 != 4) {
          goto LABEL_45;
        }
        uint64_t v7 = *(unsigned int *)(*(void *)this + 84);
        if (v7)
        {
          uint64_t v8 = *(uint64_t **)(*(void *)this + 72);
          uint64_t v9 = 8 * v7 - 8;
          do
          {
            uint64_t v10 = *v8++;
            uint64_t result = WGSL::Type::isStorable(*(WGSL::Type **)(*(void *)(v10 + 104) + 24));
            if (result) {
              BOOL v11 = v9 == 0;
            }
            else {
              BOOL v11 = 1;
            }
            v9 -= 8;
          }
          while (!v11);
        }
        else
        {
LABEL_44:
          uint64_t result = 1;
        }
        break;
      case 5:
        if (v1 != 5) {
          goto LABEL_45;
        }
        uint64_t result = 0;
        break;
      case 6:
        if (v1 != 6) {
          goto LABEL_45;
        }
        uint64_t result = 0;
        break;
      case 7:
        if (v1 != 7) {
          goto LABEL_45;
        }
        uint64_t result = 0;
        break;
      case 8:
        if (v1 != 8) {
          goto LABEL_45;
        }
        goto LABEL_44;
      case 9:
        if (v1 != 9) {
          goto LABEL_45;
        }
        goto LABEL_44;
      case 10:
        if (v1 != 10) {
          goto LABEL_45;
        }
        uint64_t result = 0;
        break;
      case 11:
        if (v1 != 11) {
          goto LABEL_45;
        }
        uint64_t result = 0;
        break;
      case 12:
        if (v1 != 12) {
          goto LABEL_45;
        }
        goto LABEL_44;
      case 13:
        if (v1 != 13) {
          goto LABEL_45;
        }
        uint64_t result = 0;
        break;
      case 14:
        if (v1 == 14) {
          goto LABEL_44;
        }
        goto LABEL_45;
      default:
        if (v1)
        {
LABEL_45:
          uint64_t v12 = (WGSL::TypeStore *)std::__throw_bad_variant_access[abi:sn180100]();
          uint64_t result = WGSL::TypeStore::frexpResultType(v12, v13, v14);
        }
        else
        {
          unsigned int v3 = *(unsigned __int8 *)this;
          BOOL v4 = v3 >= 0xE;
          unsigned int v5 = (0x7B6u >> v3) & 1;
          if (v4) {
            uint64_t result = 1;
          }
          else {
            uint64_t result = v5;
          }
        }
        break;
    }
    return result;
  }
}

uint64_t WGSL::TypeStore::frexpResultType(WGSL::TypeStore *this, const WGSL::Type *a2, const WGSL::Type *a3)
{
  uint64_t v5 = *((void *)this + 2);
  uint64_t v19 = 8;
  uint64_t v20 = (uint64_t)a2;
  if (!v5)
  {
LABEL_31:
    uint64_t v17 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)uint64_t v17 = 2;
    *(void *)(v17 + 8) = a2;
    *(void *)(v17 + 16) = a3;
    uint64_t v19 = (uint64_t)"__frexp_result";
    uint64_t v20 = 15;
    WGSL::TypeStore::allocateType<WGSL::Types::PrimitiveStruct,WTF::ASCIILiteral,WGSL::Types::PrimitiveStruct::Kind const&,WTF::FixedVector<WGSL::Type const*> &>();
  }
  unsigned int v6 = *(_DWORD *)(v5 - 8);
  int v7 = WTF::TupleHash<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>::hash<0ul>((unsigned __int8 *)&v19);
  for (int i = 0; ; v7 = i + (v7 & v6))
  {
    uint64_t v9 = v5 + 24 * (v7 & v6);
    int v10 = *(unsigned __int8 *)(v9 + 1);
    int v11 = *(unsigned __int16 *)(v9 + 2);
    if (*(unsigned char *)v9 == 8 && v10 == 0) {
      break;
    }
LABEL_16:
    if (*(unsigned char *)v9) {
      BOOL v14 = 0;
    }
    else {
      BOOL v14 = v10 == 0;
    }
    BOOL v16 = v14 && v11 == 0 && *(_DWORD *)(v9 + 4) == 0;
    if (v16 && !*(void *)(v9 + 8)) {
      goto LABEL_31;
    }
    ++i;
  }
  if (*(_WORD *)(v9 + 2))
  {
LABEL_15:
    int v10 = 0;
    goto LABEL_16;
  }
  if (*(_DWORD *)(v9 + 4)) {
    BOOL v13 = 0;
  }
  else {
    BOOL v13 = *(void *)(v9 + 8) == (void)a2;
  }
  if (!v13)
  {
    int v11 = 0;
    goto LABEL_15;
  }
  if (v5 + 24 * *(unsigned int *)(v5 - 4) == v9 || !*(void *)(v9 + 16)) {
    goto LABEL_31;
  }
  return *(void *)(v9 + 16);
}

void WGSL::TypeStore::allocateType<WGSL::Types::PrimitiveStruct,WTF::ASCIILiteral,WGSL::Types::PrimitiveStruct::Kind const&,WTF::FixedVector<WGSL::Type const*> &>()
{
}

void *WGSL::parseInterpolationSampling(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    return 0;
  }
  unint64_t v2 = *(unsigned int *)(v1 + 16);
  unsigned int v3 = *(const char **)(v1 + 8);
  int v4 = *(_DWORD *)(v1 + 4);
  uint64_t v5 = (v2 >> 2) & 1;
  uint64_t v6 = v5 << 32;
  BOOL v7 = v4 != 6;
  if (v3 != "center" && v4 == 6)
  {
    if (v5)
    {
      if (*v3 != 99 || *(_DWORD *)(v3 + 1) != 1702129253 || *(_DWORD *)(v3 + 2) != 1919251566)
      {
        BOOL v7 = 0;
LABEL_9:
        int v8 = 8;
        uint64_t v6 = 0x100000000;
        goto LABEL_10;
      }
      return &unk_1E521E358;
    }
    if (*(_WORD *)v3 == 99 && *(void *)(v3 + 2) == 0x650074006E0065 && *(void *)(v3 + 4) == 0x7200650074006ELL) {
      return &unk_1E521E358;
    }
    BOOL v7 = 0;
LABEL_32:
    int v8 = 8;
    if (v3 == "sample") {
      goto LABEL_41;
    }
LABEL_33:
    if (v7) {
      goto LABEL_41;
    }
    if (!v8) {
      return &unk_1E521E388;
    }
    if (!v6)
    {
      if (*(_WORD *)v3 != 115) {
        return 0;
      }
      if (*(void *)(v3 + 4) != 0x65006C0070006DLL || *(void *)(v3 + 2) != 0x6C0070006D0061) {
        return 0;
      }
      return &unk_1E521E388;
    }
    if (*v3 == 115 && *(_DWORD *)(v3 + 1) == 1819307361 && *(_DWORD *)(v3 + 2) == 1701605485) {
      return &unk_1E521E388;
    }
    return 0;
  }
  if (v3 == "center" && v4 == 6) {
    return &unk_1E521E358;
  }
  if (v3 == "centroid" || v4 != 8)
  {
    BOOL v11 = v3 == "centroid" && v4 == 8;
    int v8 = v4;
    if (v11) {
      return &unk_1E521E370;
    }
LABEL_10:
    if (v3 == "sample")
    {
LABEL_41:
      if (v4 != 6 || v3 != "sample") {
        return 0;
      }
      return &unk_1E521E388;
    }
    goto LABEL_33;
  }
  if (v5)
  {
    if (*v3 == 99 && *(_DWORD *)(v3 + 1) == 1920233061 && *((_DWORD *)v3 + 1) == 1684631410) {
      return &unk_1E521E370;
    }
    goto LABEL_9;
  }
  if (*(_WORD *)v3 != 99) {
    goto LABEL_32;
  }
  if (*(void *)(v3 + 2) != 0x720074006E0065 || *((void *)v3 + 1) != 0x640069006F0072) {
    goto LABEL_32;
  }
  return &unk_1E521E370;
}

unint64_t WTF::TupleHash<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>::hash<0ul>(unsigned __int8 *a1)
{
  unsigned int v1 = ~(*a1 << 15) + *a1;
  unsigned int v2 = (9 * (v1 ^ (v1 >> 10))) ^ ((9 * (v1 ^ (v1 >> 10))) >> 6);
  unsigned int v3 = ~(a1[1] << 15) + a1[1];
  unsigned int v4 = (9 * (v3 ^ (v3 >> 10))) ^ ((9 * (v3 ^ (v3 >> 10))) >> 6);
  unsigned int v5 = ~(*((unsigned __int16 *)a1 + 1) << 15) + *((unsigned __int16 *)a1 + 1);
  unsigned int v6 = (9 * (v5 ^ (v5 >> 10))) ^ ((9 * (v5 ^ (v5 >> 10))) >> 6);
  unsigned int v7 = *((_DWORD *)a1 + 1) + ~(*((_DWORD *)a1 + 1) << 15);
  unsigned int v8 = (9 * (v7 ^ (v7 >> 10))) ^ ((9 * (v7 ^ (v7 >> 10))) >> 6);
  unsigned int v9 = (v8 + ~(v8 << 11)) ^ ((v8 + ~(v8 << 11)) >> 16);
  unint64_t v10 = *((void *)a1 + 1) + ~(*((void *)a1 + 1) << 32);
  unint64_t v11 = (v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13);
  unint64_t v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
  return (0xD7862706ELL
        * (unint64_t)(277951225 * ((v2 + ~(v2 << 11)) ^ ((v2 + ~(v2 << 11)) >> 16))
                           + 95187966
                           * ((0xD7862706ELL
                                           * (unint64_t)(277951225
                                                              * ((v4 + ~(v4 << 11)) ^ ((v4 + ~(v4 << 11)) >> 16))
                                                              + 95187966
                                                              * ((0xD7862706ELL
                                                                              * (unint64_t)(277951225
                                                                                                 * ((v6 + ~(v6 << 11)) ^ ((v6 + ~(v6 << 11)) >> 16))
                                                                                                 + 95187966
                                                                                                 * ((0xD7862706ELL * (unint64_t)(277951225 * v9 + 95187966 * (((v12 + ~(v12 << 27)) >> 31) ^ (v12 + ~(v12 << 27))))) >> 4))) >> 4))) >> 4))) >> 4;
}

uint64_t WTF::PrintStream::print<char [11]>(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  WTF::printInternal();
  unsigned int v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 40);
  return v2(a1);
}

uint64_t WebGPU::Adapter::Adapter(uint64_t a1, void *a2, uint64_t a3, char a4, uint64_t a5)
{
  id v9 = a2;
  *(_DWORD *)a1 = 1;
  id v10 = v9;
  *(void *)(a1 + 8) = v10;
  uint64_t v11 = *(void *)(a3 + 8);
  if (!v11)
  {
    uint64_t v13 = 0;
    goto LABEL_8;
  }
  char v12 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v11, (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
  if (v12) {
    MEMORY[0x18530AEA0](v11);
  }
  if (*(void *)(v11 + 24))
  {
    ++*(void *)(v11 + 16);
    uint64_t v13 = v11;
    int v14 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v11, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
    if (v14 != 1) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v13 = 0;
    int v15 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v11, (unsigned __int8 *)&v15, 0, memory_order_release, memory_order_relaxed);
    if (v15 != 1) {
LABEL_9:
    }
      WTF::Lock::unlockSlow((WTF::Lock *)v11);
  }
LABEL_8:
  *(void *)(a1 + 16) = v13;
  *(void *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a5;
  long long v16 = *(_OWORD *)(a5 + 16);
  long long v17 = *(_OWORD *)(a5 + 32);
  long long v18 = *(_OWORD *)(a5 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(a1 + 96) = v18;
  *(_OWORD *)(a1 + 48) = v16;
  *(_OWORD *)(a1 + 64) = v17;
  long long v19 = *(_OWORD *)(a5 + 80);
  long long v20 = *(_OWORD *)(a5 + 96);
  long long v21 = *(_OWORD *)(a5 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a5 + 112);
  *(_OWORD *)(a1 + 160) = v21;
  *(_OWORD *)(a1 + 112) = v19;
  *(_OWORD *)(a1 + 128) = v20;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  uint64_t v22 = *(void *)(a5 + 144);
  *(void *)(a5 + 144) = 0;
  *(void *)(a1 + 176) = v22;
  LODWORD(v22) = *(_DWORD *)(a5 + 152);
  *(_DWORD *)(a5 + 152) = 0;
  *(_DWORD *)(a1 + 184) = v22;
  LODWORD(v22) = *(_DWORD *)(a5 + 156);
  *(_DWORD *)(a5 + 156) = 0;
  *(_DWORD *)(a1 + 188) = v22;
  uint64_t v23 = *(void *)(a5 + 160);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a5 + 168);
  *(void *)(a1 + 192) = v23;
  long long v24 = *(_OWORD *)(a5 + 176);
  *(void *)(a5 + 176) = 0;
  *(void *)(a5 + 184) = 0;
  *(_OWORD *)(a1 + 208) = v24;
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a5 + 192);
  *(unsigned char *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 233) = a4;

  return a1;
}

void sub_1824C965C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebGPU::Adapter::~Adapter(id *this)
{
  unsigned int v3 = (WTF *)this[22];
  if (v3)
  {
    this[22] = 0;
    *((_DWORD *)this + 46) = 0;
    WTF::fastFree(v3, v2);
  }
  unsigned int v4 = (atomic_uchar *)this[2];
  this[2] = 0;
  if (v4)
  {
    char v5 = 0;
    atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
    if (v5)
    {
      MEMORY[0x18530AEA0](v4);
      uint64_t v8 = *((void *)v4 + 2) - 1;
      *((void *)v4 + 2) = v8;
      if (v8)
      {
LABEL_6:
        int v7 = 1;
        atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
        if (v7 != 1) {
          WTF::Lock::unlockSlow((WTF::Lock *)v4);
        }
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v6 = *((void *)v4 + 2) - 1;
      *((void *)v4 + 2) = v6;
      if (v6) {
        goto LABEL_6;
      }
    }
    uint64_t v9 = *((void *)v4 + 1);
    int v10 = 1;
    atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
    if (v10 == 1)
    {
      if (v9) {
        goto LABEL_12;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v4);
      if (v9) {
        goto LABEL_12;
      }
    }
    WTF::fastFree((WTF *)v4, v2);
  }
LABEL_12:
}

void WebGPU::HardwareCapabilities::~HardwareCapabilities(id *this)
{
  unsigned int v3 = (WTF *)this[18];
  if (v3)
  {
    this[18] = 0;
    *((_DWORD *)this + 38) = 0;
    WTF::fastFree(v3, v2);
  }
}

uint64_t WTF::CompletionHandler<void ()(WGPURequestDeviceStatus,WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>> &&,WTF::String &&)>::operator()(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v3 + 16))(v3, 1, a2, a3);
  unsigned int v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
  return v4(v3);
}

void sub_1824C9834(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WebGPU::Device *WebGPU::Device::createInvalid(WebGPU::Device *this, WebGPU::Adapter *a2)
{
  unsigned int v4 = (WebGPU::Device *)WTF::fastMalloc((WTF *)0x1D8);
  uint64_t result = WebGPU::Device::Device(v4, a2);
  *(void *)this = v4;
  return result;
}

void sub_1824C98AC(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

_DWORD *wgpuAdapterReference(_DWORD *result)
{
  return result;
}

id *wgpuAdapterRelease(id *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebGPU::Adapter::~Adapter(result);
    return (id *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t wgpuAdapterEnumerateFeatures(uint64_t a1, void *__dst)
{
  if (__dst)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 188);
    if (v3) {
      memmove(__dst, *(const void **)(a1 + 176), 4 * v3);
    }
  }
  return *(unsigned int *)(a1 + 188);
}

uint64_t wgpuAdapterGetLimits(_OWORD *a1, uint64_t a2)
{
  if (*(void *)a2) {
    return 0;
  }
  *(_OWORD *)(a2 + 8) = a1[2];
  long long v3 = a1[3];
  long long v4 = a1[4];
  long long v5 = a1[5];
  *(_OWORD *)(a2 + 72) = a1[6];
  *(_OWORD *)(a2 + 56) = v5;
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  long long v6 = a1[7];
  long long v7 = a1[8];
  long long v8 = a1[9];
  *(_OWORD *)(a2 + 136) = a1[10];
  *(_OWORD *)(a2 + 120) = v8;
  *(_OWORD *)(a2 + 104) = v7;
  *(_OWORD *)(a2 + 88) = v6;
  return 1;
}

uint64_t wgpuAdapterGetProperties(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 32) = 0;
  id v4 = [*(id *)(a1 + 8) name];
  *(void *)(a2 + 40) = [v4 UTF8String];

  *(void *)(a2 + 48) = "";
  uint64_t result = [*(id *)(a1 + 8) hasUnifiedMemory];
  *(_DWORD *)(a2 + 56) = result;
  *(_DWORD *)(a2 + 60) = 5;
  return result;
}

void sub_1824C9A1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t wgpuAdapterHasFeature(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 188);
  if (!v2) {
    return 0;
  }
  long long v3 = *(int **)(a1 + 176);
  while (1)
  {
    int v4 = *v3++;
    if (v4 == a2) {
      break;
    }
    if (!--v2) {
      return 0;
    }
  }
  return 1;
}

uint64_t wgpuAdapterRequestDevice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = WTF::fastMalloc((WTF *)0x18);
  uint64_t v9 = result;
  *(void *)uint64_t result = &unk_1ECABAA88;
  *(void *)(result + 8) = a3;
  *(void *)(result + 16) = a4;
  uint64_t v120 = result;
  if (*(void *)a2) {
    goto LABEL_2;
  }
  if (*(unsigned char *)(a1 + 232))
  {
    int v15 = (WebGPU::Device *)WTF::fastMalloc((WTF *)0x1D8);
    WebGPU::Device::Device(v15, (WebGPU::Adapter *)a1);
    v139 = (atomic_uchar *volatile *)v15;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v138 = *(_DWORD **)&v122[0];
    uint64_t v120 = 0;
    (*(void (**)(uint64_t, uint64_t, atomic_uchar *volatile **, _DWORD **))(*(void *)v9 + 16))(v9, 1, &v139, &v138);
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    long long v17 = v138;
    v138 = 0;
    if (v17)
    {
      if (*v17 == 2)
      {
        WTF::StringImpl::destroy();
        long long v18 = v139;
        v139 = 0;
        if (!v18) {
          goto LABEL_34;
        }
LABEL_26:
        char v29 = 0;
        atomic_uchar *volatile v30 = *v18;
        atomic_compare_exchange_strong_explicit(*v18, (unsigned __int8 *)&v29, 1u, memory_order_acquire, memory_order_acquire);
        if (v29)
        {
          MEMORY[0x18530AEA0](v30);
          uint64_t v106 = *((void *)v30 + 1);
          int v32 = 1;
          uint64_t v33 = v106 - 1;
          *((void *)v30 + 1) = v106 - 1;
          if (v106 != 1)
          {
LABEL_28:
            int64x2_t v34 = 0;
            BOOL v35 = 1;
            atomic_compare_exchange_strong_explicit(v30, (unsigned __int8 *)&v32, 0, memory_order_release, memory_order_relaxed);
            if (v32 == 1) {
              goto LABEL_29;
            }
            goto LABEL_114;
          }
        }
        else
        {
          uint64_t v31 = *((void *)v30 + 1);
          int v32 = 1;
          uint64_t v33 = v31 - 1;
          *((void *)v30 + 1) = v31 - 1;
          if (v31 != 1) {
            goto LABEL_28;
          }
        }
        uint64_t v107 = *((void *)v30 + 2);
        int64x2_t v34 = (WebGPU::Device *)*((void *)v30 + 3);
        *((void *)v30 + 3) = 0;
        BOOL v35 = v107 != 0;
        atomic_compare_exchange_strong_explicit(v30, (unsigned __int8 *)&v32, 0, memory_order_release, memory_order_relaxed);
        if (v32 == 1)
        {
LABEL_29:
          if (!v33)
          {
LABEL_30:
            if (v34)
            {
              WebGPU::Device::~Device(v34, v16);
              WTF::fastFree(v36, v37);
            }
            if (!v35) {
              WTF::fastFree((WTF *)v30, v16);
            }
          }
LABEL_34:
          v38 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;

          goto LABEL_35;
        }
LABEL_114:
        WTF::Lock::unlockSlow((WTF::Lock *)v30);
        if (!v33) {
          goto LABEL_30;
        }
        goto LABEL_34;
      }
      *v17 -= 2;
    }
    long long v18 = v139;
    v139 = 0;
    if (!v18) {
      goto LABEL_34;
    }
    goto LABEL_26;
  }
  uint64_t v28 = *(void *)(a2 + 32);
  if (!v28)
  {
    long long v39 = xmmword_1826CE870;
    long long v40 = xmmword_1826CE880;
    long long v41 = xmmword_1826CE890;
    long long v42 = xmmword_1826CE8A0;
    uint64_t v43 = 0xC00000004;
    long long v44 = xmmword_1826CE8B0;
    long long v45 = xmmword_1826CE8C0;
    long long v46 = xmmword_1826CE8D0;
    long long v47 = xmmword_1826CE8E0;
    uint64_t v48 = 0x10000000;
    unint64_t v49 = *(void *)(a2 + 16);
    if (!v49)
    {
LABEL_84:
      v52 = 0;
LABEL_85:
      v122[0] = v46;
      v122[1] = v45;
      v122[2] = v44;
      uint64_t v123 = v43;
      long long v124 = v47;
      long long v125 = v42;
      uint64_t v126 = v48;
      long long v127 = v41;
      long long v128 = v40;
      long long v129 = v39;
      v130 = v52;
      int v131 = v49;
      int v132 = v49;
      uint64_t v133 = *(void *)(a1 + 192);
      char v134 = *(unsigned char *)(a1 + 200);
      id v135 = *(id *)(a1 + 208);
      id v136 = *(id *)(a1 + 216);
      char v137 = *(unsigned char *)(a1 + 224);
      if (*(void *)(a2 + 8)) {
        strlen(*(const char **)(a2 + 8));
      }
      WTF::String::fromUTF8();
      *(unsigned char *)(a1 + 232) = 1;
      WebGPU::Device::create(*(void **)(a1 + 8), (uint64_t)&v139, (uint64_t)v122, (WebGPU::Adapter *)a1, (uint64_t *)&v138);
      uint64_t v120 = 0;
      v121 = 0;
      (*(void (**)(uint64_t, void, _DWORD **, _DWORD **))(*(void *)v9 + 16))(v9, 0, &v138, &v121);
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      v90 = v121;
      v121 = 0;
      if (v90)
      {
        if (*v90 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v90 -= 2;
        }
      }
      v91 = (atomic_uchar *volatile *)v138;
      v138 = 0;
      if (!v91) {
        goto LABEL_100;
      }
      char v92 = 0;
      atomic_uchar *volatile v93 = *v91;
      atomic_compare_exchange_strong_explicit(*v91, (unsigned __int8 *)&v92, 1u, memory_order_acquire, memory_order_acquire);
      if (v92)
      {
        MEMORY[0x18530AEA0](v93);
        uint64_t v108 = *((void *)v93 + 1);
        int v95 = 1;
        uint64_t v96 = v108 - 1;
        *((void *)v93 + 1) = v108 - 1;
        if (v108 != 1)
        {
LABEL_94:
          v97 = 0;
          BOOL v98 = 1;
          atomic_compare_exchange_strong_explicit(v93, (unsigned __int8 *)&v95, 0, memory_order_release, memory_order_relaxed);
          if (v95 == 1) {
            goto LABEL_95;
          }
          goto LABEL_118;
        }
      }
      else
      {
        uint64_t v94 = *((void *)v93 + 1);
        int v95 = 1;
        uint64_t v96 = v94 - 1;
        *((void *)v93 + 1) = v94 - 1;
        if (v94 != 1) {
          goto LABEL_94;
        }
      }
      uint64_t v109 = *((void *)v93 + 2);
      v97 = (WebGPU::Device *)*((void *)v93 + 3);
      *((void *)v93 + 3) = 0;
      BOOL v98 = v109 != 0;
      atomic_compare_exchange_strong_explicit(v93, (unsigned __int8 *)&v95, 0, memory_order_release, memory_order_relaxed);
      if (v95 == 1)
      {
LABEL_95:
        if (!v96)
        {
LABEL_96:
          if (v97)
          {
            WebGPU::Device::~Device(v97, v89);
            WTF::fastFree(v99, v100);
          }
          if (!v98) {
            WTF::fastFree((WTF *)v93, v89);
          }
        }
LABEL_100:
        v101 = v139;
        v139 = 0;
        if (v101)
        {
          if (*(_DWORD *)v101 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *(_DWORD *)v101 -= 2;
          }
        }

        v103 = v130;
        if (v130)
        {
          v130 = 0;
          int v131 = 0;
          WTF::fastFree(v103, v102);
        }
        goto LABEL_35;
      }
LABEL_118:
      WTF::Lock::unlockSlow((WTF::Lock *)v93);
      if (!v96) {
        goto LABEL_96;
      }
      goto LABEL_100;
    }
LABEL_39:
    long long v112 = v47;
    long long v113 = v46;
    long long v114 = v45;
    long long v115 = v44;
    long long v116 = v42;
    long long v117 = v41;
    long long v118 = v40;
    long long v119 = v39;
    if (v49 >> 30)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v50 = *(void *)(a2 + 24);
    uint64_t v51 = WTF::fastMalloc((WTF *)(4 * v49));
    v52 = (WTF *)v51;
    unint64_t v53 = (v49 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v53 < 7)
    {
      v54 = (_DWORD *)v51;
      v55 = (int *)v50;
      long long v42 = v116;
      long long v41 = v117;
      long long v45 = v114;
      long long v44 = v115;
      long long v47 = v112;
      long long v46 = v113;
    }
    else
    {
      v54 = (_DWORD *)v51;
      v55 = (int *)v50;
      long long v42 = v116;
      long long v41 = v117;
      long long v45 = v114;
      long long v44 = v115;
      long long v47 = v112;
      long long v46 = v113;
      if ((unint64_t)(v51 - v50) >= 0x20)
      {
        unint64_t v56 = v53 + 1;
        uint64_t v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
        v54 = (_DWORD *)(v51 + v57);
        v55 = (int *)(v50 + v57);
        v58 = (long long *)(v50 + 16);
        v59 = (_OWORD *)(v51 + 16);
        uint64_t v60 = v56 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v61 = *v58;
          *(v59 - 1) = *(v58 - 1);
          _OWORD *v59 = v61;
          v58 += 2;
          v59 += 2;
          v60 -= 8;
        }
        while (v60);
        if (v56 == (v56 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_57:
          long long v40 = v118;
          long long v39 = v119;
          if (!v49) {
            goto LABEL_85;
          }
          uint64_t v66 = *(unsigned int *)(a1 + 188);
          if (v66)
          {
            v67 = (int *)v51;
            while (1)
            {
              int v68 = *v67;
              v69 = *(_DWORD **)(a1 + 176);
              unint64_t v70 = *(unsigned int *)(a1 + 188);
              do
              {
                unint64_t v71 = v70 >> 1;
                v72 = &v69[v70 >> 1];
                int v74 = *v72;
                v73 = v72 + 1;
                v70 += ~(v70 >> 1);
                if (v74 < v68) {
                  v69 = v73;
                }
                else {
                  unint64_t v70 = v71;
                }
              }
              while (v70);
              if (v69 == (_DWORD *)(*(void *)(a1 + 176) + 4 * v66) || v68 < *v69) {
                break;
              }
              if (++v67 == (int *)(v51 + 4 * v49)) {
                goto LABEL_85;
              }
            }
          }
          v75 = (WebGPU::Device *)WTF::fastMalloc((WTF *)0x1D8);
          WebGPU::Device::Device(v75, (WebGPU::Adapter *)a1);
          v139 = (atomic_uchar *volatile *)v75;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v138 = *(_DWORD **)&v122[0];
          uint64_t v120 = 0;
          (*(void (**)(uint64_t, uint64_t, atomic_uchar *volatile **, _DWORD **))(*(void *)v9 + 16))(v9, 1, &v139, &v138);
          (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
          v77 = v138;
          v138 = 0;
          if (v77)
          {
            if (*v77 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v77 -= 2;
            }
          }
          v78 = v139;
          v139 = 0;
          if (!v78) {
            goto LABEL_82;
          }
          char v79 = 0;
          atomic_uchar *volatile v80 = *v78;
          atomic_compare_exchange_strong_explicit(*v78, (unsigned __int8 *)&v79, 1u, memory_order_acquire, memory_order_acquire);
          if (v79)
          {
            MEMORY[0x18530AEA0](v80);
            uint64_t v110 = *((void *)v80 + 1);
            int v82 = 1;
            uint64_t v83 = v110 - 1;
            *((void *)v80 + 1) = v110 - 1;
            if (v110 != 1)
            {
LABEL_76:
              v84 = 0;
              BOOL v85 = 1;
              atomic_compare_exchange_strong_explicit(v80, (unsigned __int8 *)&v82, 0, memory_order_release, memory_order_relaxed);
              if (v82 == 1) {
                goto LABEL_77;
              }
              goto LABEL_122;
            }
          }
          else
          {
            uint64_t v81 = *((void *)v80 + 1);
            int v82 = 1;
            uint64_t v83 = v81 - 1;
            *((void *)v80 + 1) = v81 - 1;
            if (v81 != 1) {
              goto LABEL_76;
            }
          }
          uint64_t v111 = *((void *)v80 + 2);
          v84 = (WebGPU::Device *)*((void *)v80 + 3);
          *((void *)v80 + 3) = 0;
          BOOL v85 = v111 != 0;
          atomic_compare_exchange_strong_explicit(v80, (unsigned __int8 *)&v82, 0, memory_order_release, memory_order_relaxed);
          if (v82 == 1)
          {
LABEL_77:
            if (!v83)
            {
LABEL_78:
              if (v84)
              {
                WebGPU::Device::~Device(v84, v76);
                WTF::fastFree(v86, v87);
              }
              if (!v85) {
                WTF::fastFree((WTF *)v80, v76);
              }
            }
LABEL_82:
            WTF::fastFree(v52, v76);
            goto LABEL_35;
          }
LABEL_122:
          WTF::Lock::unlockSlow((WTF::Lock *)v80);
          if (!v83) {
            goto LABEL_78;
          }
          goto LABEL_82;
        }
      }
    }
    do
    {
      int v65 = *v55++;
      *v54++ = v65;
    }
    while (v55 != (int *)(v50 + 4 * v49));
    goto LABEL_57;
  }
  if (*(void *)v28)
  {
LABEL_2:
    int v10 = (WebGPU::Device *)WTF::fastMalloc((WTF *)0x1D8);
    WebGPU::Device::Device(v10, (WebGPU::Adapter *)a1);
    v139 = (atomic_uchar *volatile *)v10;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v138 = *(_DWORD **)&v122[0];
    uint64_t v120 = 0;
    (*(void (**)(uint64_t, uint64_t, atomic_uchar *volatile **, _DWORD **))(*(void *)v9 + 16))(v9, 1, &v139, &v138);
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    char v12 = v138;
    v138 = 0;
    if (!v12) {
      goto LABEL_5;
    }
    int v13 = *v12 - 2;
    if (*v12 == 2)
    {
      WTF::StringImpl::destroy();
      int v14 = v139;
      v139 = 0;
      if (!v14) {
        goto LABEL_35;
      }
LABEL_14:
      char v19 = 0;
      atomic_uchar *volatile v20 = *v14;
      atomic_compare_exchange_strong_explicit(*v14, (unsigned __int8 *)&v19, 1u, memory_order_acquire, memory_order_acquire);
      if (v19)
      {
        MEMORY[0x18530AEA0](v20);
        uint64_t v104 = *((void *)v20 + 1);
        int v22 = 1;
        uint64_t v23 = v104 - 1;
        *((void *)v20 + 1) = v104 - 1;
        if (v104 != 1)
        {
LABEL_16:
          long long v24 = 0;
          BOOL v25 = 1;
          atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
          if (v22 == 1) {
            goto LABEL_17;
          }
          goto LABEL_110;
        }
      }
      else
      {
        uint64_t v21 = *((void *)v20 + 1);
        int v22 = 1;
        uint64_t v23 = v21 - 1;
        *((void *)v20 + 1) = v21 - 1;
        if (v21 != 1) {
          goto LABEL_16;
        }
      }
      uint64_t v105 = *((void *)v20 + 2);
      long long v24 = (WebGPU::Device *)*((void *)v20 + 3);
      *((void *)v20 + 3) = 0;
      BOOL v25 = v105 != 0;
      atomic_compare_exchange_strong_explicit(v20, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
      if (v22 == 1)
      {
LABEL_17:
        if (v23) {
          goto LABEL_35;
        }
        goto LABEL_18;
      }
LABEL_110:
      WTF::Lock::unlockSlow((WTF::Lock *)v20);
      if (v23) {
        goto LABEL_35;
      }
LABEL_18:
      if (v24)
      {
        WebGPU::Device::~Device(v24, v11);
        WTF::fastFree(v26, v27);
      }
      if (!v25) {
        WTF::fastFree((WTF *)v20, v11);
      }
      goto LABEL_35;
    }
    goto LABEL_4;
  }
  if ((*(_DWORD *)(v28 + 80) & (*(_DWORD *)(v28 + 80) - 1)) == 0
    && (*(_DWORD *)(v28 + 84) & (*(_DWORD *)(v28 + 84) - 1)) == 0)
  {
    uint64_t result = WebGPU::anyLimitIsBetterThan(v28 + 8, a1 + 32);
    if (result)
    {
      WebGPU::Device::createInvalid((WebGPU::Device *)&v139, (WebGPU::Adapter *)a1);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v138 = *(_DWORD **)&v122[0];
      WTF::CompletionHandler<void ()(WGPURequestDeviceStatus,WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>> &&,WTF::String &&)>::operator()(&v120, (uint64_t)&v139, (uint64_t)&v138);
      v63 = v138;
      v138 = 0;
      if (v63)
      {
        if (*v63 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v63 -= 2;
        }
      }
      WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref(&v139, v62);
      goto LABEL_35;
    }
    uint64_t v88 = *(void *)(a2 + 32);
    long long v46 = *(_OWORD *)(v88 + 8);
    long long v45 = *(_OWORD *)(v88 + 24);
    long long v44 = *(_OWORD *)(v88 + 40);
    uint64_t v43 = *(void *)(v88 + 56);
    long long v47 = *(_OWORD *)(v88 + 64);
    long long v42 = *(_OWORD *)(v88 + 80);
    uint64_t v48 = *(void *)(v88 + 96);
    long long v41 = *(_OWORD *)(v88 + 104);
    long long v40 = *(_OWORD *)(v88 + 120);
    long long v39 = *(_OWORD *)(v88 + 136);
    unint64_t v49 = *(void *)(a2 + 16);
    if (!v49) {
      goto LABEL_84;
    }
    goto LABEL_39;
  }
  v64 = (WebGPU::Device *)WTF::fastMalloc((WTF *)0x1D8);
  WebGPU::Device::Device(v64, (WebGPU::Adapter *)a1);
  v139 = (atomic_uchar *volatile *)v64;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v138 = *(_DWORD **)&v122[0];
  uint64_t v120 = 0;
  (*(void (**)(uint64_t, uint64_t, atomic_uchar *volatile **, _DWORD **))(*(void *)v9 + 16))(v9, 1, &v139, &v138);
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  char v12 = v138;
  v138 = 0;
  if (v12)
  {
    int v13 = *v12 - 2;
    if (*v12 != 2)
    {
LABEL_4:
      *char v12 = v13;
      goto LABEL_5;
    }
    WTF::StringImpl::destroy();
  }
LABEL_5:
  int v14 = v139;
  v139 = 0;
  if (v14) {
    goto LABEL_14;
  }
LABEL_35:
  uint64_t result = v120;
  if (v120) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v120 + 8))(v120);
  }
  return result;
}

void sub_1824CA550(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  v27 = *(_DWORD **)(v25 - 96);
  *(void *)(v25 - 96) = 0;
  if (v27)
  {
    if (*v27 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v27 -= 2;
    }
  }
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)(v25 - 88), a2);
  if (a25) {
    (*(void (**)(uint64_t))(*(void *)a25 + 8))(a25);
  }
  _Unwind_Resume(a1);
}

uint64_t wgpuAdapterXRCompatible(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 233);
}

atomic_uchar *volatile **WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref(atomic_uchar *volatile **a1, void *a2)
{
  long long v3 = *a1;
  *a1 = 0;
  if (!v3) {
    return a1;
  }
  char v4 = 0;
  atomic_uchar *volatile v5 = *v3;
  atomic_compare_exchange_strong_explicit(*v3, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4)
  {
    MEMORY[0x18530AEA0](v5);
    uint64_t v12 = *((void *)v5 + 1);
    int v7 = 1;
    uint64_t v8 = v12 - 1;
    *((void *)v5 + 1) = v12 - 1;
    if (v12 != 1)
    {
LABEL_4:
      uint64_t v9 = 0;
      BOOL v10 = 1;
      atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
      if (v7 == 1) {
        goto LABEL_5;
      }
LABEL_9:
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
      if (v8) {
        return a1;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v6 = *((void *)v5 + 1);
    int v7 = 1;
    uint64_t v8 = v6 - 1;
    *((void *)v5 + 1) = v6 - 1;
    if (v6 != 1) {
      goto LABEL_4;
    }
  }
  uint64_t v13 = *((void *)v5 + 2);
  uint64_t v9 = (WebGPU::Device *)*((void *)v5 + 3);
  *((void *)v5 + 3) = 0;
  BOOL v10 = v13 != 0;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1) {
    goto LABEL_9;
  }
LABEL_5:
  if (v8) {
    return a1;
  }
LABEL_10:
  if (v9)
  {
    WebGPU::Device::~Device(v9, a2);
    WTF::fastFree(v14, v15);
  }
  if (v10) {
    return a1;
  }
  WTF::fastFree((WTF *)v5, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<wgpuAdapterRequestDevice::$_0,void,WGPURequestDeviceStatus,WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>> &&,WTF::String &&>::call(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  atomic_uchar *volatile v5 = *(void (**)(uint64_t, uint64_t, char *, void))(a1 + 8);
  uint64_t v6 = *a3;
  *a3 = 0;
  WTF::String::utf8();
  if (v10) {
    int v7 = (char *)v10 + 16;
  }
  else {
    int v7 = 0;
  }
  v5(a2, v6, v7, *(void *)(a1 + 16));
  uint64_t result = (uint64_t)v10;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1) {
      return WTF::fastFree(v10, v8);
    }
    else {
      --*(_DWORD *)v10;
    }
  }
  return result;
}

void sub_1824CA958(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 != 1)
    {
      --*(_DWORD *)a10;
      _Unwind_Resume(exception_object);
    }
    WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebGPU::Device::createExternalTextureFromPixelBuffer(uint64_t a1, uint64_t a2, __CVBuffer *a3)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  LOBYTE(v96) = 0;
  unsigned __int8 v97 = 0;
  unsigned __int8 v6 = [*(id *)(a2 + 8) supportsFamily:1004];
  if (!CVPixelBufferGetIOSurface(a3))
  {
    size_t PlaneCount = CVPixelBufferGetPlaneCount(a3);
    if (PlaneCount <= 1) {
      unint64_t v15 = 1;
    }
    else {
      unint64_t v15 = PlaneCount;
    }
    if (v15 >= 3) {
      goto LABEL_15;
    }
    unint64_t v16 = PlaneCount;
    if (CVPixelBufferLockBaseAddress(a3, 1uLL)) {
      goto LABEL_15;
    }
    int WidthOfPlane = CVPixelBufferGetWidthOfPlane(a3, 0);
    int HeightOfPlane = CVPixelBufferGetHeightOfPlane(a3, 0);
    uint64_t v60 = objc_opt_new();
    [v60 setUsage:1];
    [v60 setTextureType:2];
    objc_msgSend(v60, "setWidth:");
    objc_msgSend(v60, "setHeight:");
    objc_msgSend(v60, "setPixelFormat:", WebGPU::metalPixelFormat(a3, 0, (uint64_t)&v96, v6));
    int v81 = v97;
    if (v97)
    {
      uint64_t v78 = v96;
      objc_msgSend(v60, "setSwizzle:");
    }
    [v60 setMipmapLevelCount:1];
    [v60 setSampleCount:1];
    if ([*(id *)(a2 + 8) hasUnifiedMemory]) {
      uint64_t v61 = 0;
    }
    else {
      uint64_t v61 = 2;
    }
    [v60 setStorageMode:v61];
    id v62 = (id)[*(id *)(a2 + 8) newTextureWithDescriptor:v60];
    if (v62)
    {
      BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a3, 0);
      uint64_t v90 = 0;
      uint64_t v91 = 0;
      uint64_t v92 = 0;
      uint64_t v93 = WidthOfPlane;
      uint64_t v94 = HeightOfPlane;
      uint64_t v95 = 1;
      objc_msgSend(v62, "replaceRegion:mipmapLevel:withBytes:bytesPerRow:", &v90, 0, BaseAddressOfPlane, (int)CVPixelBufferGetBytesPerRowOfPlane(a3, 0));

      if (v16 < 2)
      {
        v64 = 0;
LABEL_51:
        CVPixelBufferUnlockBaseAddress(a3, 1uLL);
        if (v16 < 2)
        {
          uint64_t v77 = ___ZNK6WebGPU6Device36createExternalTextureFromPixelBufferEP10__CVBuffer14WGPUColorSpace_block_invoke(v62, v81 != 0);

          long long v86 = xmmword_1826CE900;
          long long v84 = xmmword_1826CE910;
          long long v79 = 0u;
          long long v82 = xmmword_1826CE920;
          v64 = (void *)v77;
        }
        else
        {
          *(double *)&long long v72 = WebGPU::colorSpaceConversionMatrixForPixelBuffer(a3, v71);
          HIDWORD(v72) = 0;
          HIDWORD(v73) = 0;
          long long v82 = v72;
          long long v84 = v73;
          HIDWORD(v74) = 0;
          long long v86 = v74;
          HIDWORD(v75) = 0;
          long long v79 = v75;
        }
        id v62 = v62;
        *(void *)a1 = v62;
        id v76 = v64;
        *(void *)(a1 + 8) = v76;
        *(void *)(a1 + 16) = 1065353216;
        *(void *)(a1 + 24) = 0x3F80000000000000;
        *(void *)(a1 + 32) = 0;
        *(_OWORD *)(a1 + 48) = v82;
        *(_OWORD *)(a1 + 64) = v84;
        *(_OWORD *)(a1 + 80) = v86;
        *(_OWORD *)(a1 + 96) = v79;
        goto LABEL_56;
      }
      int v65 = CVPixelBufferGetWidthOfPlane(a3, 1uLL);
      int v66 = CVPixelBufferGetHeightOfPlane(a3, 1uLL);
      uint64_t v60 = objc_opt_new();
      [v60 setUsage:1];
      [v60 setTextureType:2];
      objc_msgSend(v60, "setWidth:");
      uint64_t v67 = v66;
      [v60 setHeight:v66];
      objc_msgSend(v60, "setPixelFormat:", WebGPU::metalPixelFormat(a3, 1, (uint64_t)&v96, v6));
      int v81 = v97;
      if (v97) {
        [v60 setSwizzle:v78 & 0xFFFFFFFF00000000 | v96];
      }
      [v60 setMipmapLevelCount:1];
      [v60 setSampleCount:1];
      if ([*(id *)(a2 + 8) hasUnifiedMemory]) {
        uint64_t v68 = 0;
      }
      else {
        uint64_t v68 = 2;
      }
      [v60 setStorageMode:v68];
      v64 = (void *)[*(id *)(a2 + 8) newTextureWithDescriptor:v60];
      if (v64)
      {
        v69 = CVPixelBufferGetBaseAddressOfPlane(a3, 1uLL);
        int BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a3, 1uLL);
        uint64_t v90 = 0;
        uint64_t v91 = 0;
        uint64_t v92 = 0;
        uint64_t v93 = v65;
        uint64_t v94 = v67;
        uint64_t v95 = 1;
        [v64 replaceRegion:&v90 mipmapLevel:0 withBytes:v69 bytesPerRow:BytesPerRowOfPlane];

        goto LABEL_51;
      }
    }
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(void *)(a1 + 32) = 0;

    id v76 = 0;
LABEL_56:

    return;
  }
  WebGPU::Device::webProcessID(a2, v7, &image);
  if (BYTE4(image))
  {
    if (!image || (IOSurfaceSetOwnershipIdentity(), BYTE4(image))) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&image);
    }
  }
  CFTypeRef cf = 0;
  CVMetalTextureRef image = 0;
  if (CVPixelBufferGetPlaneCount(a3) <= 1)
  {
    uint64_t v8 = *(__CVMetalTextureCache **)(a2 + 464);
    MTLPixelFormat v9 = WebGPU::metalPixelFormat(a3, 0, (uint64_t)&v96, v6);
    size_t v10 = CVPixelBufferGetWidthOfPlane(a3, 0);
    size_t v11 = CVPixelBufferGetHeightOfPlane(a3, 0);
    CVReturn v12 = CVMetalTextureCacheCreateTextureFromImage(0, v8, a3, 0, v9, v10, v11, 0, &image);
    CVReturn TextureFromImage = -6680;
    if (v12) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
  MTLPixelFormat v17 = WebGPU::metalPixelFormat(a3, 0, (uint64_t)&v96, v6);
  if (v17)
  {
    long long v18 = *(__CVMetalTextureCache **)(a2 + 464);
    size_t v19 = CVPixelBufferGetWidthOfPlane(a3, 0);
    size_t v20 = CVPixelBufferGetHeightOfPlane(a3, 0);
    CVReturn v21 = CVMetalTextureCacheCreateTextureFromImage(0, v18, a3, 0, v17, v19, v20, 0, &image);
  }
  else
  {
    CVReturn v21 = -6680;
  }
  MTLPixelFormat v22 = WebGPU::metalPixelFormat(a3, 1, (uint64_t)&v96, v6);
  if (v22 == MTLPixelFormatInvalid)
  {
    CVReturn TextureFromImage = -6680;
    if (!v21) {
      goto LABEL_21;
    }
LABEL_8:
    if (cf) {
      CFRelease(cf);
    }
LABEL_15:
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(void *)(a1 + 32) = 0;
    return;
  }
  uint64_t v23 = *(__CVMetalTextureCache **)(a2 + 464);
  size_t v24 = CVPixelBufferGetWidthOfPlane(a3, 1uLL);
  size_t v25 = CVPixelBufferGetHeightOfPlane(a3, 1uLL);
  CVReturn TextureFromImage = CVMetalTextureCacheCreateTextureFromImage(0, v23, a3, 0, v22, v24, v25, 1uLL, (CVMetalTextureRef *)&cf);
  if (v21) {
    goto LABEL_8;
  }
LABEL_21:
  CVMetalTextureGetTexture(image);
  id v26 = (id)objc_claimAutoreleasedReturnValue();
  WebGPU::Device::setOwnerWithIdentity(a2, v26);
  CVMetalTextureGetCleanTexCoords(image, lowerLeft, lowerRight, upperRight, upperLeft);
  uint64_t v27 = (uint64_t)v26;
  int v80 = v97;
  if (v97)
  {
    uint64_t v28 = [v26 pixelFormat];
    uint64_t v29 = [v26 textureType];
    uint64_t v30 = [v26 mipmapLevelCount];
    uint64_t v31 = [v26 arrayLength];
    uint64_t v32 = objc_msgSend(v26, "newTextureViewWithPixelFormat:textureType:levels:slices:swizzle:", v28, v29, 0, v30, 0, v31, v96);

    uint64_t v27 = v32;
  }
  if (TextureFromImage)
  {
    uint64_t v33 = 0;
  }
  else
  {
    uint64_t v33 = CVMetalTextureGetTexture((CVMetalTextureRef)cf);
    WebGPU::Device::setOwnerWithIdentity(a2, v33);
  }
  uint64_t v34 = *(void *)(a2 + 16);
  CFTypeRef v36 = cf;
  CVMetalTextureRef v35 = image;
  uint64_t v37 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v37 = &unk_1ECABAAC8;
  v37[1] = v35;
  v37[2] = v36;
  v87 = v37;
  WebGPU::Queue::onSubmittedWorkDone(v34, (uint64_t *)&v87);
  uint64_t v39 = (uint64_t)v87;
  v87 = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  float32x2_t v83 = (float32x2_t)__PAIR64__(LODWORD(lowerRight[1]), LODWORD(upperRight[0]));
  float32x2_t v85 = (float32x2_t)__PAIR64__(LODWORD(upperLeft[1]), LODWORD(lowerLeft[0]));
  if (v33)
  {
    *(double *)&long long v40 = WebGPU::colorSpaceConversionMatrixForPixelBuffer(a3, v38);
  }
  else
  {
    id v44 = v26;
    uint64_t v45 = [v44 pixelFormat];
    uint64_t v46 = [v44 textureType];
    uint64_t v47 = [v44 mipmapLevelCount];
    uint64_t v48 = [v44 arrayLength];
    uint64_t v49 = 1284;
    if (!v80) {
      uint64_t v49 = 1027;
    }
    uint64_t v33 = objc_msgSend(v44, "newTextureViewWithPixelFormat:textureType:levels:slices:swizzle:", v45, v46, 0, v47, 0, v48, v49);

    long long v42 = xmmword_1826CE900;
    long long v41 = xmmword_1826CE910;
    long long v40 = xmmword_1826CE920;
    long long v43 = 0uLL;
  }
  __asm { FMOV            V5.2S, #1.0 }
  float32x2_t v55 = vdiv_f32(_D5, vsub_f32(v83, v85));
  uint64_t v56 = v55.u32[0];
  float32x2_t v57 = vmul_f32(v85, vneg_f32(v55));
  v55.i32[0] = 0;
  *(void *)a1 = v27;
  *(void *)(a1 + 8) = v33;
  *(void *)(a1 + 16) = v56;
  *(float32x2_t *)(a1 + 24) = v55;
  *(float32x2_t *)(a1 + 32) = v57;
  *(_OWORD *)(a1 + 48) = v40;
  *(_OWORD *)(a1 + 64) = v41;
  *(_OWORD *)(a1 + 80) = v42;
  *(_OWORD *)(a1 + 96) = v43;
}

void sub_1824CB2A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ___ZNK6WebGPU6Device36createExternalTextureFromPixelBufferEP10__CVBuffer14WGPUColorSpace_block_invoke(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 pixelFormat];
  uint64_t v5 = [v3 textureType];
  uint64_t v6 = [v3 mipmapLevelCount];
  uint64_t v7 = [v3 arrayLength];
  uint64_t v8 = 1027;
  if (a2) {
    uint64_t v8 = 1284;
  }
  MTLPixelFormat v9 = objc_msgSend(v3, "newTextureViewWithPixelFormat:textureType:levels:slices:swizzle:", v4, v5, 0, v6, 0, v7, v8);

  return v9;
}

void sub_1824CB458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebGPU::metalPixelFormat(__CVBuffer *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType > 1380410944)
  {
    if (PixelFormatType > 1919379251)
    {
      if (PixelFormatType > 1999908972)
      {
        if (PixelFormatType <= 2019963955)
        {
          if (PixelFormatType > 2016687155)
          {
            if (PixelFormatType == 2016687156 || PixelFormatType == 2019963440) {
              goto LABEL_126;
            }
            int v10 = 2019963442;
          }
          else
          {
            if (PixelFormatType == 1999908973) {
              return 0;
            }
            if (PixelFormatType == 2016686640) {
              goto LABEL_126;
            }
            int v10 = 2016686642;
          }
          goto LABEL_125;
        }
        if (PixelFormatType > 2033463855)
        {
          if (PixelFormatType == 2033463856 || PixelFormatType == 2037741158) {
            goto LABEL_126;
          }
          int v10 = 2037741171;
          goto LABEL_125;
        }
        if (PixelFormatType == 2019963956) {
          goto LABEL_126;
        }
        if (PixelFormatType == 2033463352) {
          return 80;
        }
        int v9 = 2033463606;
      }
      else
      {
        if (PixelFormatType <= 1983000885)
        {
          if (PixelFormatType > 1937126451)
          {
            if (PixelFormatType == 1937126452) {
              return 0;
            }
            if (PixelFormatType == 1982882104) {
              goto LABEL_126;
            }
            int v10 = 1983000880;
            goto LABEL_125;
          }
          if (PixelFormatType != 1919379252) {
            return 0;
          }
          return 80;
        }
        if (PixelFormatType > 1983131951)
        {
          if (PixelFormatType == 1983131952) {
            goto LABEL_126;
          }
          if (PixelFormatType == 1999843442) {
            return 90;
          }
          return 0;
        }
        if (PixelFormatType == 1983000886 || PixelFormatType == 1983066168) {
          goto LABEL_126;
        }
        int v9 = 1983131704;
      }
LABEL_116:
      if (PixelFormatType != v9) {
        return 0;
      }
      return 80;
    }
    if (PixelFormatType <= 1717855599)
    {
      if (PixelFormatType <= 1647589489)
      {
        if (PixelFormatType <= 1630697080)
        {
          if (PixelFormatType == 1380410945) {
            return 125;
          }
          if (PixelFormatType == 1380411457) {
            return 115;
          }
          return 0;
        }
        if (PixelFormatType == 1630697081) {
          goto LABEL_126;
        }
        if (PixelFormatType == 1647392359) {
          return 25;
        }
        if (PixelFormatType != 1647522401) {
          return 0;
        }
        return 55;
      }
      if (PixelFormatType > 1651519797)
      {
        if (PixelFormatType != 1651519798 && PixelFormatType != 1651521076)
        {
          int v10 = 1714696752;
          goto LABEL_125;
        }
        return 80;
      }
      if (PixelFormatType == 1647589490) {
        return 80;
      }
      if (PixelFormatType != 1647719521)
      {
        int v9 = 1650943796;
        goto LABEL_116;
      }
      if (!*(unsigned char *)(a3 + 4)) {
        *(unsigned char *)(a3 + 4) = 1;
      }
      *(_DWORD *)a3 = 3;
    }
    else
    {
      if (PixelFormatType <= 1815162993)
      {
        if (PixelFormatType > 1735549491)
        {
          if (PixelFormatType == 1735549492) {
            return 80;
          }
          if (PixelFormatType == 1751410032) {
            return 250;
          }
          int v9 = 1751411059;
        }
        else
        {
          if (PixelFormatType == 1717855600) {
            return 252;
          }
          if (PixelFormatType == 1717856627) {
            return 80;
          }
          int v9 = 1734505012;
        }
        goto LABEL_116;
      }
      if (PixelFormatType > 1882468913)
      {
        if (PixelFormatType == 1882468914)
        {
          if (((a2 == 0) & a4) != 0) {
            return 509;
          }
          else {
            return 0;
          }
        }
        if (PixelFormatType == 1882469428)
        {
          if (((a2 == 0) & a4) != 0) {
            return 510;
          }
          else {
            return 0;
          }
        }
        int v9 = 1916022840;
        goto LABEL_116;
      }
      if (PixelFormatType == 1815162994)
      {
        if (!*(unsigned char *)(a3 + 4)) {
          *(unsigned char *)(a3 + 4) = 1;
        }
        *(_DWORD *)a3 = 3;
        return 90;
      }
      if (PixelFormatType != 1815491698)
      {
        if (PixelFormatType == 1882468912)
        {
          if (((a2 == 0) & a4) != 0) {
            return 508;
          }
          else {
            return 0;
          }
        }
        return 0;
      }
    }
    return 110;
  }
  if (PixelFormatType <= 843264101)
  {
    if (PixelFormatType <= 641230383)
    {
      int v11 = PixelFormatType - 1;
      uint64_t result = 1;
      switch(v11)
      {
        case 0:
        case 1:
        case 3:
        case 7:
        case 32:
        case 33:
        case 35:
        case 39:
          return result;
        case 15:
          return 43;
        case 23:
          return 70;
        case 31:
          if (!*(unsigned char *)(a3 + 4)) {
            *(unsigned char *)(a3 + 4) = 1;
          }
          *(_DWORD *)a3 = 3;
          uint64_t result = 70;
          break;
        default:
          return 0;
      }
      return result;
    }
    if (PixelFormatType > 758674991)
    {
      if (PixelFormatType > 762869297)
      {
        if (PixelFormatType == 762869298) {
          goto LABEL_126;
        }
        if (PixelFormatType != 842285639)
        {
          if (PixelFormatType == 843264056) {
            return 30;
          }
          return 0;
        }
      }
      else
      {
        if (PixelFormatType == 758674992) {
          goto LABEL_126;
        }
        if (PixelFormatType != 759318337)
        {
          int v10 = 762869296;
          goto LABEL_125;
        }
      }
    }
    else
    {
      if (PixelFormatType > 645428783)
      {
        if (PixelFormatType == 645428784 || PixelFormatType == 645428786) {
          goto LABEL_126;
        }
        int v10 = 758670896;
        goto LABEL_125;
      }
      if (PixelFormatType == 641230384 || PixelFormatType == 641234480) {
        goto LABEL_126;
      }
      if (PixelFormatType != 641877825) {
        return 0;
      }
    }
    return 80;
  }
  if (PixelFormatType > 1110783540)
  {
    if (PixelFormatType > 1278226737)
    {
      if (PixelFormatType <= 1278555700)
      {
        if (PixelFormatType == 1278226738) {
          return 0;
        }
        if (PixelFormatType == 1278226742) {
          return 20;
        }
        if (PixelFormatType != 1278555445) {
          return 0;
        }
        return 43;
      }
      if (PixelFormatType != 1278555701)
      {
        if (PixelFormatType == 1378955371) {
          return 94;
        }
        if (PixelFormatType == 1380401729) {
          return 70;
        }
        return 0;
      }
      return 40;
    }
    if (PixelFormatType <= 1278226533)
    {
      if (PixelFormatType != 1110783541)
      {
        if (PixelFormatType != 1111970369)
        {
          if (PixelFormatType == 1278226488) {
            return 10;
          }
          return 0;
        }
        return 80;
      }
      return 40;
    }
    if (PixelFormatType != 1278226534)
    {
      if (PixelFormatType != 1278226536) {
        return 0;
      }
      return 25;
    }
    return 55;
  }
  if (PixelFormatType > 875704933)
  {
    if (PixelFormatType <= 875836533)
    {
      if (PixelFormatType == 875704934 || PixelFormatType == 875704950) {
        goto LABEL_126;
      }
      int v10 = 875836518;
      goto LABEL_125;
    }
    if (PixelFormatType == 875836534) {
      goto LABEL_126;
    }
    if (PixelFormatType != 892679473)
    {
      if (PixelFormatType == 1094862674)
      {
        if (!*(unsigned char *)(a3 + 4)) {
          *(unsigned char *)(a3 + 4) = 1;
        }
        *(_DWORD *)a3 = 3;
        return 80;
      }
      return 0;
    }
    return 43;
  }
  if (PixelFormatType > 846624120)
  {
    if (PixelFormatType == 846624121 || PixelFormatType == 875704422) {
      goto LABEL_126;
    }
    int v10 = 875704438;
LABEL_125:
    if (PixelFormatType == v10)
    {
LABEL_126:
      if (a2) {
        return 30;
      }
      else {
        return 10;
      }
    }
    return 0;
  }
  if (PixelFormatType == 843264102) {
    return 105;
  }
  if (PixelFormatType != 843264104)
  {
    if (PixelFormatType == 843264310) {
      return 60;
    }
    return 0;
  }
  return 65;
}

double WebGPU::colorSpaceConversionMatrixForPixelBuffer(WebGPU *this, __CVBuffer *a2)
{
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  char v4 = 0;
  if (PixelFormatType > 2019963439)
  {
    if (PixelFormatType > 2019963955)
    {
      if (PixelFormatType == 2037741158 || PixelFormatType == 2019963956) {
        goto LABEL_15;
      }
    }
    else if (PixelFormatType == 2019963440 || PixelFormatType == 2019963442)
    {
      goto LABEL_15;
    }
  }
  else
  {
    if (PixelFormatType <= 1714696751)
    {
      if (PixelFormatType != 641230384 && PixelFormatType != 875704422) {
        goto LABEL_16;
      }
LABEL_15:
      char v4 = 1;
      goto LABEL_16;
    }
    if (PixelFormatType == 1714696752 || PixelFormatType == 1815162994) {
      goto LABEL_15;
    }
  }
LABEL_16:
  CFTypeRef v5 = CVBufferCopyAttachment(this, (CFStringRef)*MEMORY[0x1E4F24C18], 0);
  if (!v5) {
    goto LABEL_19;
  }
  uint64_t v6 = v5;
  if (!CFEqual(v5, (CFTypeRef)*MEMORY[0x1E4F24C48]))
  {
    if (CFEqual(v6, (CFTypeRef)*MEMORY[0x1E4F24C40]))
    {
      CFRelease(v6);
      if (v4)
      {
        __asm { FMOV            V0.4S, #1.0 }
        return *(double *)&_Q0;
      }
    }
    else
    {
      if (!CFEqual(v6, (CFTypeRef)*MEMORY[0x1E4F24C30])) {
        goto LABEL_18;
      }
      CFRelease(v6);
      if (v4)
      {
        __asm { FMOV            V0.4S, #1.0 }
        return *(double *)&_Q0;
      }
    }
LABEL_28:
    *(void *)&_Q0 = vdupq_n_s32(0x3F95A027u).u64[0];
    return *(double *)&_Q0;
  }
LABEL_18:
  CFRelease(v6);
LABEL_19:
  if ((v4 & 1) == 0) {
    goto LABEL_28;
  }
  __asm { FMOV            V0.4S, #1.0 }
  return *(double *)&_Q0;
}

void sub_1824CC14C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebGPU::Device::createBindGroup(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v420 = *MEMORY[0x1E4F143B8];
  if (*a2 || (uint64_t v7 = a2[2]) == 0 || !*(void *)(a1 + 8))
  {
    uint64_t v5 = WTF::fastMalloc((WTF *)0xB0);
    WebGPU::BindGroup::BindGroup(v5, (atomic_uchar *volatile *)a1);
LABEL_3:
    *a3 = v5;
    return;
  }
  if (!*(unsigned char *)(v7 + 72)) {
    goto LABEL_12;
  }
  if (!*(unsigned char *)(v7 + 120))
  {
    uint64_t v8 = *(void *)(v7 + 48);
    if (v8) {
      LODWORD(v8) = *(_DWORD *)(v8 - 12);
    }
    if (a2[3] != v8) {
      goto LABEL_12;
    }
  }
  if (*(void *)(v7 + 104) != a1)
  {
LABEL_12:
    int v9 = [NSString stringWithFormat:@"GPUDevice.createBindGroup: %@", @"invalid BindGroupLayout createBindGroup"];
    MEMORY[0x18530AF50](v408, v9);
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = 32 * *(unsigned int *)(a1 + 44);
    uint64_t v12 = v10 + v11;
    while (v11)
    {
      int v13 = *(_DWORD *)(v12 - 8);
      v12 -= 32;
      v11 -= 32;
      if (!v13)
      {
        uint64_t v14 = v10 + v11;
        if (!*(unsigned char *)(v14 + 16))
        {
          unint64_t v15 = v408[0];
          v408[0] = 0;
          *(_DWORD *)uint64_t v14 = 1;
          *(void *)(v14 + 8) = v15;
          *(unsigned char *)(v14 + 16) = 1;
        }
        goto LABEL_20;
      }
    }
    uint64_t v16 = *(void *)(a1 + 24);
    if (v16)
    {
      (*(void (**)(uint64_t, uint64_t, WTF **))(*(void *)v16 + 16))(v16, 1, v408);
      uint64_t v17 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = 0;
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
    }
LABEL_20:
    long long v18 = v408[0];
    v408[0] = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }

    uint64_t v5 = WTF::fastMalloc((WTF *)0xB0);
    WebGPU::BindGroup::BindGroup(v5, (atomic_uchar *volatile *)a1);
    goto LABEL_3;
  }
  uint64_t v19 = a2[2];
  id v20 = *(id *)(v7 + 24);
  id v21 = *(id *)(v7 + 32);
  id v22 = *(id *)(v7 + 40);
  id v403 = v20;
  id v404 = v21;
  id v405 = v22;
  v401[0] = xmmword_1826CEA80;
  v401[1] = unk_1826CEA90;
  v401[2] = xmmword_1826CEAA0;
  v401[3] = unk_1826CEAB0;
  uint64_t v402 = 0x7FFFFFFFFFFFFFFFLL;
  id v398 = 0;
  v399 = 0;
  v400 = 0;
  v395 = 0;
  v396 = 0;
  v397 = 0;
  uint64_t v376 = v19;
  unint64_t v23 = [*(id *)(v19 + 24) encodedLength];
  if (v23)
  {
    WebGPU::Device::safeCreateBuffer((WebGPU::Device *)a1, v23, MTLStorageModeShared, MTLCPUCacheModeDefaultCache, MTLHazardTrackingModeDefault);
    id v24 = (id)objc_claimAutoreleasedReturnValue();
    id v398 = v24;
  }
  else
  {
    id v24 = 0;
    id v398 = 0;
  }

  [v20 setArgumentBuffer:v24 offset:0];
  WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::HashTable((uint64_t *)v408, (void *)(v19 + 184));
  v395 = v408[0];
  unint64_t v25 = [*(id *)(v19 + 32) encodedLength];
  if (v25)
  {
    WebGPU::Device::safeCreateBuffer((WebGPU::Device *)a1, v25, MTLStorageModeShared, MTLCPUCacheModeDefaultCache, MTLHazardTrackingModeDefault);
    id v26 = (id)objc_claimAutoreleasedReturnValue();
    v399 = v26;
  }
  else
  {
    id v26 = 0;
    v399 = 0;
  }

  [v21 setArgumentBuffer:v399 offset:0];
  WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::HashTable((uint64_t *)v408, (void *)(v19 + 192));
  v396 = v408[0];
  unint64_t v27 = [*(id *)(v19 + 40) encodedLength];
  if (v27)
  {
    WebGPU::Device::safeCreateBuffer((WebGPU::Device *)a1, v27, MTLStorageModeShared, MTLCPUCacheModeDefaultCache, MTLHazardTrackingModeDefault);
    id v28 = (id)objc_claimAutoreleasedReturnValue();
    v400 = v28;
  }
  else
  {
    id v28 = 0;
    v400 = 0;
  }

  [v22 setArgumentBuffer:v400 offset:0];
  uint64_t v29 = (atomic_uchar *volatile *)a1;
  WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::HashTable((uint64_t *)v408, (void *)(v19 + 200));
  v397 = v408[0];
  unint64_t v30 = a2[3];
  uint64_t v31 = a2[4];
  __n128 v32 = 0uLL;
  *(_OWORD *)v418 = 0u;
  *(_OWORD *)v419 = 0u;
  *(_OWORD *)v416 = 0u;
  *(_OWORD *)v417 = 0u;
  *(_OWORD *)v414 = 0u;
  *(_OWORD *)v415 = 0u;
  *(_OWORD *)v412 = 0u;
  *(_OWORD *)v413 = 0u;
  *(_OWORD *)v410 = 0u;
  *(_OWORD *)v411 = 0u;
  *(_OWORD *)v408 = 0u;
  *(_OWORD *)v409 = 0u;
  memset(v407, 0, sizeof(v407));
  if (v30)
  {
    if (v30 >= 0x4924925)
    {
      __break(0xC471u);
LABEL_597:
      JUMPOUT(0x1824CEE7CLL);
    }
    uint64_t v33 = WTF::fastMalloc((WTF *)(56 * v30));
    uint64_t v34 = (WTF *)v33;
    uint64_t v35 = 0;
    do
    {
      uint64_t v36 = v33 + v35;
      __n128 v32 = *(__n128 *)(v31 + v35);
      long long v37 = *(_OWORD *)(v31 + v35 + 16);
      long long v38 = *(_OWORD *)(v31 + v35 + 32);
      *(void *)(v36 + 48) = *(void *)(v31 + v35 + 48);
      *(_OWORD *)(v36 + 16) = v37;
      *(_OWORD *)(v36 + 32) = v38;
      *(__n128 *)uint64_t v36 = v32;
      v35 += 56;
    }
    while (56 * v30 != v35);
  }
  else
  {
    uint64_t v34 = 0;
  }
  unint64_t v39 = 126 - 2 * __clz(v30);
  if (v30) {
    uint64_t v40 = v39;
  }
  else {
    uint64_t v40 = 0;
  }
  *(double *)&long long v42 = std::__introsort<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroup(WGPUBindGroupDescriptor const&)::$_0 &,WGPUBindGroupEntry *,false>((unint64_t)v34, (unint64_t)v34 + 56 * v30, v40, 1, v32);
  v393 = 0;
  uint64_t v394 = 0;
  v392 = 0;
  long long v43 = a3;
  if (!*((_DWORD *)a2 + 6))
  {
LABEL_328:
    if (v395 && *((_DWORD *)v395 - 3) || v396 && *((_DWORD *)v396 - 3) || v397 && *((_DWORD *)v397 - 3))
    {
LABEL_334:
      uint64_t v208 = WTF::fastMalloc((WTF *)0xB0);
      WebGPU::BindGroup::BindGroup(v208, v29);
      *long long v43 = v208;
      goto LABEL_469;
    }
    v346 = v34;
    uint64_t v210 = 0;
    long long v380 = 0uLL;
LABEL_337:
    uint64_t v211 = 0;
    uint64_t v373 = v210;
    unsigned int v212 = dword_1826CEA50[v210];
    while (v212 == 3)
    {
      v216 = &v408[2 * v211];
      unsigned int v214 = *((_DWORD *)v216 + 39);
      if (v214)
      {
        v213 = v216 + 18;
        v215 = &v407[v211 + 9];
        uint64_t v70 = 3;
LABEL_350:
        v217 = *v213;
        unsigned int v218 = *((_DWORD *)v213 + 2);
        *v213 = 0;
        v213[1] = 0;
        v384[0] = v217;
        v384[1] = (WTF *)__PAIR64__(v214, v218);
        v385[0] = *(WTF **)v215;
        v219 = (WTF *)*((void *)v215 + 1);
        *(void *)v215 = 0;
        *((void *)v215 + 1) = 0;
        v385[1] = v219;
        *(void *)&long long v386 = v211 + 1;
        *((void *)&v386 + 1) = v70;
        if (HIDWORD(v380) == DWORD2(v380))
        {
          v220 = WTF::Vector<WebGPU::BindableResources,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v380, HIDWORD(v380) + 1, (unint64_t)v384);
          uint64_t v221 = v380 + 48 * HIDWORD(v380);
          *(void *)uint64_t v221 = 0;
          *(void *)(v221 + 8) = 0;
          uint64_t v222 = *(void *)v220;
          *(void *)v220 = 0;
          *(void *)uint64_t v221 = v222;
          LODWORD(v222) = *((_DWORD *)v220 + 2);
          *((_DWORD *)v220 + 2) = 0;
          *(_DWORD *)(v221 + 8) = v222;
          LODWORD(v222) = *((_DWORD *)v220 + 3);
          *((_DWORD *)v220 + 3) = 0;
          *(_DWORD *)(v221 + 12) = v222;
          *(void *)(v221 + 16) = 0;
          *(void *)(v221 + 24) = 0;
          uint64_t v223 = *((void *)v220 + 2);
          *((void *)v220 + 2) = 0;
          *(void *)(v221 + 16) = v223;
          LODWORD(v223) = *((_DWORD *)v220 + 6);
          *((_DWORD *)v220 + 6) = 0;
          *(_DWORD *)(v221 + 24) = v223;
          LODWORD(v223) = *((_DWORD *)v220 + 7);
          *((_DWORD *)v220 + 7) = 0;
          *(_DWORD *)(v221 + 28) = v223;
          long long v224 = *((_OWORD *)v220 + 2);
        }
        else
        {
          uint64_t v221 = v380 + 48 * HIDWORD(v380);
          *(void *)uint64_t v221 = 0;
          *(void *)(v221 + 8) = 0;
          v225 = v384[0];
          v384[0] = 0;
          *(void *)uint64_t v221 = v225;
          LODWORD(v225) = v384[1];
          LODWORD(v384[1]) = 0;
          *(_DWORD *)(v221 + 8) = v225;
          LODWORD(v225) = HIDWORD(v384[1]);
          HIDWORD(v384[1]) = 0;
          *(_DWORD *)(v221 + 12) = v225;
          *(void *)(v221 + 16) = 0;
          *(void *)(v221 + 24) = 0;
          v226 = v385[0];
          v385[0] = 0;
          *(void *)(v221 + 16) = v226;
          LODWORD(v226) = v385[1];
          LODWORD(v385[1]) = 0;
          *(_DWORD *)(v221 + 24) = v226;
          LODWORD(v226) = HIDWORD(v385[1]);
          HIDWORD(v385[1]) = 0;
          *(_DWORD *)(v221 + 28) = v226;
          long long v224 = v386;
        }
        *(_OWORD *)(v221 + 32) = v224;
        ++HIDWORD(v380);
        v227 = v385[0];
        if (HIDWORD(v385[1]))
        {
          uint64_t v228 = 40 * HIDWORD(v385[1]);
          v229 = (char *)v385[0] + 8;
          do
          {
            uint64_t v230 = *((unsigned int *)v229 + 2);
            if (v230 != -1) {
              ((void (*)(WebGPU::Sampler **, char *))off_1ECABAAA0[v230])(&v391, v229);
            }
            *((_DWORD *)v229 + 2) = -1;
            v229 += 40;
            v228 -= 40;
          }
          while (v228);
          v227 = v385[0];
        }
        if (v227)
        {
          v385[0] = 0;
          LODWORD(v385[1]) = 0;
          WTF::fastFree(v227, v41);
        }
        if (HIDWORD(v384[1]))
        {
          v231 = (id *)v384[0];
          uint64_t v232 = 8 * HIDWORD(v384[1]);
          do
          {

            v232 -= 8;
          }
          while (v232);
        }
        v233 = v384[0];
        if (v384[0])
        {
          v384[0] = 0;
          LODWORD(v384[1]) = 0;
          WTF::fastFree(v233, v41);
        }
      }
LABEL_338:
      if (++v211 == 3)
      {
        uint64_t v210 = v373 + 1;
        if (v373 == 3)
        {
          id v238 = *(id *)(v376 + 24);
          v239 = [v238 label];
          id v240 = v398;
          [v398 setLabel:v239];

          id v241 = *(id *)(v376 + 32);
          v242 = [v241 label];
          [v399 setLabel:v242];

          id v243 = *(id *)(v376 + 40);
          v244 = [v243 label];
          [v400 setLabel:v244];

          WebGPU::BindGroup::create(a3, v240, v399, v400, (uint64_t *)&v380, (_DWORD *)v376, (uint64_t *)&v393, (uint64_t *)&v392, (uint64_t)v401, (atomic_uchar *volatile *)a1);
          WTF::Vector<WebGPU::BindableResources,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v380, v245);
          goto LABEL_468;
        }
        goto LABEL_337;
      }
    }
    if (v212 == 1) {
      uint64_t v70 = 2;
    }
    else {
      uint64_t v70 = 1;
    }
    if (v212 == 2) {
      uint64_t v70 = 0;
    }
    v213 = &v408[6 * v70] + 2 * v211;
    unsigned int v214 = *((_DWORD *)v213 + 3);
    if (!v214) {
      goto LABEL_338;
    }
    v215 = &v407[3 * v70 + v211];
    if (v212 >= 3) {
      goto LABEL_422;
    }
    *((void *)v401 + 3 * v212) = HIDWORD(v380);
    goto LABEL_350;
  }
  uint64_t v44 = 0;
  v346 = v34;
  uint64_t v344 = *((unsigned int *)a2 + 6);
LABEL_45:
  uint64_t v45 = a2[4];
  uint64_t v46 = (uint64_t *)(v45 + 56 * v44);
  uint64_t v47 = *v46;
  if (*v46)
  {
    if (*(_DWORD *)(v47 + 8) != -140055559)
    {
      v246 = [NSString stringWithFormat:@"GPUDevice.createBindGroup: %@", *(double *)&v42, @"Unknown chain object in WGPUBindGroupEntry"];
      MEMORY[0x18530AF50](v384, v246);
      WebGPU::Device::generateAValidationError((uint64_t)v29, (uint64_t *)v384);
      v266 = v384[0];
      v384[0] = 0;
      if (v266)
      {
        if (*(_DWORD *)v266 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *(_DWORD *)v266 -= 2;
        }
      }
      goto LABEL_447;
    }
    if (*(void *)v47)
    {
      v246 = [NSString stringWithFormat:@"GPUDevice.createBindGroup: %@", *(double *)&v42, @"Unknown chain object in WGPUBindGroupEntry"];
      MEMORY[0x18530AF50](v384, v246);
      WebGPU::Device::generateAValidationError((uint64_t)v29, (uint64_t *)v384);
      v267 = v384[0];
      v384[0] = 0;
      if (v267)
      {
        if (*(_DWORD *)v267 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *(_DWORD *)v267 -= 2;
        }
      }
      goto LABEL_447;
    }
    uint64_t v48 = *(void *)(v47 + 16);
  }
  else
  {
    uint64_t v48 = 0;
  }
  uint64_t v49 = v46[2];
  int v50 = v48 != 0;
  if (v49) {
    ++v50;
  }
  uint64_t v51 = v46[6];
  uint64_t v371 = v51;
  uint64_t v374 = v46[5];
  if (v374) {
    int v52 = v50 + 1;
  }
  else {
    int v52 = v50;
  }
  if (v51) {
    ++v52;
  }
  if (v52 != 1) {
    goto LABEL_334;
  }
  uint64_t v345 = v44;
  uint64_t v53 = v45 + 56 * v44;
  unsigned int v55 = *(_DWORD *)(v53 + 8);
  v54 = (unsigned int *)(v53 + 8);
  unsigned int v56 = 9 * ((v55 + ~(v55 << 15)) ^ ((v55 + ~(v55 << 15)) >> 10));
  unsigned int v368 = ((v56 ^ (v56 >> 6)) + ~((v56 ^ (v56 >> 6)) << 11)) ^ (((v56 ^ (v56 >> 6)) + ~((v56 ^ (v56 >> 6)) << 11)) >> 16);
  uint64_t v378 = v55;
  unint64_t v366 = ~((unint64_t)v55 << 32);
  v367 = v54;
  if (v49)
  {
    uint64_t v57 = 0;
    char v360 = 0;
    char v58 = 0;
    v359 = (WTF *)(v54 + 4);
    v349 = (WTF **)(v54 + 6);
    v351 = v54 + 2;
    while (1)
    {
      uint64_t v59 = dword_1826CEA50[v57];
      uint64_t v60 = WebGPU::BindGroupLayout::argumentBufferIndexForEntryIndex(v376, v378, dword_1826CEA50[v57]);
      if (v60 != 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v61 = *(void *)(v376 + 16);
        if (!v61) {
          goto LABEL_590;
        }
        int v363 = v59;
        uint64_t v62 = v378 | ((uint64_t)(int)v59 << 32);
        unsigned int v63 = *(_DWORD *)(v61 - 8);
        unint64_t v64 = ((v62 + v366) ^ ((v62 + v366) >> 22)) + ~(((v62 + v366) ^ ((v62 + v366) >> 22)) << 13);
        unint64_t v65 = (9 * (v64 ^ (v64 >> 8))) ^ ((9 * (v64 ^ (v64 >> 8))) >> 15);
        uint64_t v66 = v63 & (((v65 + ~(v65 << 27)) >> 31) ^ (v65 + ~(v65 << 27)));
        uint64_t v67 = *(void *)(v61 + 16 * v66);
        if (v67 != v62)
        {
          int v68 = 1;
          while (v67 != -1)
          {
            uint64_t v66 = (v66 + v68) & v63;
            uint64_t v67 = *(void *)(v61 + 16 * v66);
            ++v68;
            if (v67 == v62) {
              goto LABEL_71;
            }
          }
          uint64_t v66 = *(unsigned int *)(v61 - 4);
        }
LABEL_71:
        if (v66 == *(_DWORD *)(v61 - 4)) {
          goto LABEL_590;
        }
        uint64_t v69 = *(void *)(v61 + 16 * v66 + 8);
        uint64_t v70 = *(void *)(v376 + 48);
        if (v59 == 3)
        {
          long long v72 = (atomic_uchar *volatile *)a1;
          int v71 = v378;
          if (!v70) {
            goto LABEL_591;
          }
          int v73 = 0;
          uint64_t v74 = 0;
          uint64_t v75 = 0;
        }
        else
        {
          long long v72 = (atomic_uchar *volatile *)a1;
          int v71 = v378;
          if (!v70) {
            goto LABEL_591;
          }
          int v76 = *(_DWORD *)(v70 - 8);
          unsigned int v77 = v76 & v368;
          uint64_t v78 = (int *)(v70 + 136 * (v76 & v368));
          int v79 = *v78;
          if (*v78 != v378)
          {
            int v80 = 1;
            while (v79 != -1)
            {
              unsigned int v77 = (v77 + v80) & v76;
              uint64_t v78 = (int *)(v70 + 136 * v77);
              int v79 = *v78;
              ++v80;
              if (*v78 == v378) {
                goto LABEL_82;
              }
            }
            uint64_t v78 = (int *)(v70 + 136 * *(unsigned int *)(v70 - 4));
          }
LABEL_82:
          if (v78 == (int *)(v70 + 136 * *(unsigned int *)(v70 - 4)))
          {
            uint64_t v75 = 0;
            int v73 = 0;
            uint64_t v74 = 0;
          }
          else
          {
            if (v59 >= 3) {
              goto LABEL_422;
            }
            uint64_t v81 = *(void *)&v78[2 * v59 + 20];
            uint64_t v75 = v81 & 0xFF00000000;
            int v73 = v81;
            uint64_t v74 = v81;
          }
        }
        int v82 = *(_DWORD *)(v70 - 8);
        unsigned int v83 = v82 & v368;
        uint64_t v84 = v70 + 136 * (v82 & v368);
        int v85 = *(_DWORD *)v84;
        if (*(_DWORD *)v84 != v71)
        {
          int v86 = 1;
          while (v85 != -1)
          {
            unsigned int v83 = (v83 + v86) & v82;
            uint64_t v84 = v70 + 136 * v83;
            int v85 = *(_DWORD *)v84;
            ++v86;
            if (*(_DWORD *)v84 == v71) {
              goto LABEL_92;
            }
          }
          uint64_t v84 = v70 + 136 * *(unsigned int *)(v70 - 4);
        }
LABEL_92:
        if (v84 == v70 + 136 * *(unsigned int *)(v70 - 4))
        {
LABEL_591:
          __break(0xC471u);
          JUMPOUT(0x1824CEE9CLL);
        }
        if (*(_DWORD *)(v84 + 48))
        {
          v246 = [NSString stringWithFormat:@"GPUDevice.createBindGroup: %@", @"Expected buffer but it was not present in the bind group layout"];
          MEMORY[0x18530AF50](v384, v246);
          WebGPU::Device::generateAValidationError((uint64_t)v72, (uint64_t *)v384);
          v247 = v384[0];
          v384[0] = 0;
          if (v247)
          {
            if (*(_DWORD *)v247 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *(_DWORD *)v247 -= 2;
            }
          }
          goto LABEL_447;
        }
        uint64_t v353 = v75;
        uint64_t v348 = v74;
        BOOL v358 = v69 == 2;
        uint64_t v87 = *(void *)v351;
        id v375 = *(id *)(*(void *)v351 + 16);
        *(void *)&long long v380 = v375;
        if (*(unsigned char *)(v87 + 52) == 4) {
          v372 = 0;
        }
        else {
          v372 = *(WTF **)v359;
        }
        if ([v375 length] <= (unint64_t)v372) {
          uint64_t v88 = 0;
        }
        else {
          uint64_t v88 = (WTF *)([v375 length] - (void)v372);
        }
        v89 = *v349;
        if (*v349 == (WTF *)-1) {
          v89 = v88;
        }
        v369 = v89;
        if (!((*(_DWORD *)(v84 + 28) == 0) | v360 & 1))
        {
          LODWORD(v384[0]) = *(_DWORD *)(v84 + 24);
          v384[1] = v89;
          v385[0] = v88;
          LODWORD(v385[1]) = v378;
          int v90 = HIDWORD(v394);
          if (HIDWORD(v394) == v394)
          {
            uint64_t v91 = (_OWORD *)WTF::Vector<WebGPU::BindGroup::BufferAndType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v393, HIDWORD(v394) + 1, (unint64_t)v384);
            int v90 = HIDWORD(v394);
            uint64_t v92 = (_OWORD *)((char *)v393 + 32 * HIDWORD(v394));
            long long v42 = v91[1];
            *uint64_t v92 = *v91;
          }
          else
          {
            uint64_t v92 = (_OWORD *)((char *)v393 + 32 * HIDWORD(v394));
            long long v42 = *(_OWORD *)v385;
            *uint64_t v92 = *(_OWORD *)v384;
          }
          v92[1] = v42;
          HIDWORD(v394) = v90 + 1;
          char v360 = 1;
        }
        uint64_t v356 = v69;
        int v347 = v73;
        if (*(unsigned char *)(v87 + 52) == 4)
        {
          if (*(atomic_uchar *volatile **)(v87 + 280) != v72) {
            goto LABEL_400;
          }
          uint64_t v93 = (int *)(v84 + 24);
        }
        else
        {
          if (!*(void *)(v87 + 16) || *(atomic_uchar *volatile **)(v87 + 280) != v72)
          {
            v250 = [NSString stringWithFormat:@"GPUDevice.createBindGroup: %@", @"Buffer is invalid or created from a different device"];
            MEMORY[0x18530AF50](v384, v250);
            WebGPU::Device::generateAValidationError((uint64_t)v72, (uint64_t *)v384);
            v251 = v384[0];
            v384[0] = 0;
            if (v251)
            {
              if (*(_DWORD *)v251 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *(_DWORD *)v251 -= 2;
              }
            }

            long long v72 = (atomic_uchar *volatile *)a1;
LABEL_400:
            uint64_t v263 = WTF::fastMalloc((WTF *)0xB0);
            WebGPU::BindGroup::BindGroup(v263, v72);
            *a3 = v263;
            goto LABEL_467;
          }
          uint64_t v93 = (int *)(v84 + 24);
          int v94 = *(_DWORD *)(v84 + 24);
          unint64_t v95 = *(void *)v359;
          if (v95 >= [v375 length])
          {
            v259 = NSString;
            v235 = objc_msgSend(NSString, "stringWithFormat:", @"Unexpected entry.offset(%llu) >= buffer length(%lu)", *(void *)v359, objc_msgSend(v375, "length"));
            v236 = [v259 stringWithFormat:@"GPUDevice.createBindGroup: %@", v235];
            MEMORY[0x18530AF50](v384, v236);
            WebGPU::Device::generateAValidationError(a1, (uint64_t *)v384);
            v260 = v384[0];
            v384[0] = 0;
            if (v260)
            {
              if (*(_DWORD *)v260 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *(_DWORD *)v260 -= 2;
              }
            }
LABEL_466:

            WebGPU::BindGroup::createInvalid((WebGPU::BindGroup *)a3, (atomic_uchar *volatile *)a1);
LABEL_467:

            goto LABEL_468;
          }
          uint64_t v96 = *v93;
          uint64_t v97 = *(unsigned int *)(v87 + 48);
          uint64_t v98 = a1;
          if ((v96 - 2) >= 2)
          {
            if (v96 != 1 || (v97 & 0x40) == 0)
            {
LABEL_379:
              v252 = NSString;
              v235 = [NSString stringWithFormat:@"Unexpected type(%u), buffer.usage(%u)", v96, v97];
              v236 = [v252 stringWithFormat:@"GPUDevice.createBindGroup: %@", v235];
              MEMORY[0x18530AF50](v384, v236);
              WebGPU::Device::generateAValidationError(a1, (uint64_t *)v384);
              v253 = v384[0];
              v384[0] = 0;
              if (v253)
              {
                if (*(_DWORD *)v253 == 2) {
                  WTF::StringImpl::destroy();
                }
                else {
                  *(_DWORD *)v253 -= 2;
                }
              }
              goto LABEL_466;
            }
          }
          else if ((v97 & 0x80) == 0)
          {
            goto LABEL_379;
          }
          if (v94 == 1)
          {
            v99 = *(WTF **)v359;
            if (*(void *)v359 % (unint64_t)*(unsigned int *)(a1 + 160))
            {
              unint64_t v102 = *(unsigned int *)(a1 + 164);
LABEL_431:
              v275 = NSString;
              v235 = objc_msgSend(NSString, "stringWithFormat:", @"Buffer offset(%llu) is not a multiple of the device buffer alignment(%u)", v99, v102);
              v236 = [v275 stringWithFormat:@"GPUDevice.createBindGroup: %@", v235];
              MEMORY[0x18530AF50](v384, v236);
              WebGPU::Device::generateAValidationError(a1, (uint64_t *)v384);
              v276 = v384[0];
              v384[0] = 0;
              if (v276)
              {
                if (*(_DWORD *)v276 == 2) {
                  WTF::StringImpl::destroy();
                }
                else {
                  *(_DWORD *)v276 -= 2;
                }
              }
              goto LABEL_466;
            }
            unint64_t v100 = *(void *)(a1 + 144);
            v101 = v369;
            if ((unint64_t)v369 > v100) {
              goto LABEL_401;
            }
          }
          else
          {
            v101 = v369;
            if ((v94 & 0xFFFFFFFE) == 2)
            {
              v99 = *(WTF **)v359;
              unint64_t v102 = *(unsigned int *)(a1 + 164);
              if (*(void *)v359 % v102) {
                goto LABEL_431;
              }
              unint64_t v100 = *(void *)(a1 + 152);
              v101 = v369;
              if ((unint64_t)v369 > v100)
              {
LABEL_401:
                v264 = NSString;
                v235 = objc_msgSend(NSString, "stringWithFormat:", @"Buffer size(%llu) is larger than the device limits(%llu)", v369, v100);
                v236 = [v264 stringWithFormat:@"GPUDevice.createBindGroup: %@", v235];
                MEMORY[0x18530AF50](v384, v236);
                WebGPU::Device::generateAValidationError(a1, (uint64_t *)v384);
                v265 = v384[0];
                v384[0] = 0;
                if (v265)
                {
                  if (*(_DWORD *)v265 == 2) {
                    WTF::StringImpl::destroy();
                  }
                  else {
                    *(_DWORD *)v265 -= 2;
                  }
                }
                goto LABEL_466;
              }
              if ((v369 & 3) != 0)
              {
                v277 = NSString;
                v235 = objc_msgSend(NSString, "stringWithFormat:", @"Storage buffer size(%llu) is not multiple of 4", v369);
                v236 = [v277 stringWithFormat:@"GPUDevice.createBindGroup: %@", v235];
                MEMORY[0x18530AF50](v384, v236);
                WebGPU::Device::generateAValidationError(a1, (uint64_t *)v384);
                v278 = v384[0];
                v384[0] = 0;
                if (v278)
                {
                  if (*(_DWORD *)v278 == 2) {
                    WTF::StringImpl::destroy();
                  }
                  else {
                    *(_DWORD *)v278 -= 2;
                  }
                }
                goto LABEL_466;
              }
            }
          }
          if (!v101
            || (uint64_t v98 = a1, (WTF *)((char *)v372 + (void)v369) > (WTF *)[v375 length])
            || (unint64_t v103 = *(void *)(v84 + 32)) != 0 && v103 > (unint64_t)v369)
          {
            v234 = NSString;
            v235 = objc_msgSend(NSString, "stringWithFormat:", @"entrySize == 0 or entrySize(%llu) + entryOffset(%llu) > buffer size(%lu) or layoutBinding->minBindingSize(%llu) > entrySize(%llu)", v369, v372, objc_msgSend(v375, "length"), *(void *)(v84 + 32), v369);
            v236 = [v234 stringWithFormat:@"GPUDevice.createBindGroup: %@", v235];
            MEMORY[0x18530AF50](v384, v236);
            WebGPU::Device::generateAValidationError(v98, (uint64_t *)v384);
            v237 = v384[0];
            v384[0] = 0;
            if (v237)
            {
              if (*(_DWORD *)v237 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *(_DWORD *)v237 -= 2;
              }
            }
            goto LABEL_466;
          }
        }
        if (v59 != 3 && [v375 length])
        {
          uint64_t v70 = (int)v59;
          if (v59 > 2) {
            goto LABEL_422;
          }
          WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>::remove((uint64_t *)&v395 + v59, v60);
          uint64_t v104 = *(&v403 + v59);
          [v104 setBuffer:v375 offset:v372 atIndex:v60];
          if (v353)
          {
            WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>::remove((uint64_t *)&v395 + v59, v347);
            unsigned int v105 = [v375 length];
            uint64_t v106 = (unsigned int *)[v104 constantDataAtIndex:v348];
            if (v105 >= v369) {
              unsigned int v107 = v369;
            }
            else {
              unsigned int v107 = v105;
            }
            *uint64_t v106 = v107;
          }
        }
        if (v375)
        {
          if ((v59 - 1) > 2) {
            uint64_t v108 = 1;
          }
          else {
            uint64_t v108 = qword_1826CEAC8[(int)v59 - 1];
          }
          if (v356 == 1) {
            uint64_t v109 = 2;
          }
          else {
            uint64_t v109 = v358;
          }
          uint64_t v110 = &v408[6 * v108] + 2 * v109;
          uint64_t v111 = *((unsigned int *)v110 + 3);
          if (v111 == *((_DWORD *)v110 + 2))
          {
            WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,objc_object  {objcproto9MTLBuffer}* {__strong}&>(v110, (id *)&v380);
          }
          else
          {
            long long v112 = *v110;
            *((void *)v112 + v111) = v375;
            ++*((_DWORD *)v110 + 3);
          }
          if ((v363 - 1) > 2) {
            uint64_t v113 = 1;
          }
          else {
            uint64_t v113 = qword_1826CEAC8[v363 - 1];
          }
          int v114 = 0;
          int v115 = *v93;
          if (*v93 > 2)
          {
            long long v116 = v369;
            if (v115 == 3)
            {
              int v114 = 8;
            }
            else if (v115 == 0x7FFFFFFF)
            {
              __break(0xC471u);
              JUMPOUT(0x1824CEEFCLL);
            }
          }
          else
          {
            long long v116 = v369;
            if (v115 == 1)
            {
              int v114 = 2;
            }
            else if (v115 == 2)
            {
              int v114 = 4;
            }
          }
          v384[0] = (WTF *)__PAIR64__(*v367, v114);
          ++*(_DWORD *)v87;
          v384[1] = (WTF *)v87;
          LODWORD(v385[0]) = 0;
          v385[1] = v372;
          *(void *)&long long v386 = v116;
          long long v117 = &v407[3 * v113 + v109];
          unsigned int v118 = *((_DWORD *)v117 + 3);
          if (v118 == *((_DWORD *)v117 + 2))
          {
            __n128 v119 = WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebGPU::BindGroupEntryUsageData>((uint64_t)v117, (unint64_t)v384);
          }
          else
          {
            WebGPU::BindGroupEntryUsageData::BindGroupEntryUsageData(*(void *)v117 + 40 * v118, (uint64_t)v384);
            ++*((_DWORD *)v117 + 3);
          }
          if (LODWORD(v385[0]) != -1) {
            ((void (*)(WebGPU::Sampler **, WTF **, __n128))off_1ECABAAA0[LODWORD(v385[0])])(&v391, &v384[1], v119);
          }
        }
        char v58 = 1;
        v54 = v367;
      }
      if (++v57 == 4) {
        goto LABEL_325;
      }
    }
  }
  uint64_t v357 = v48;
  uint64_t v120 = 0;
  char v58 = 0;
  v354 = (WebGPU::TextureView **)(v54 + 10);
  v370 = (WebGPU::Sampler **)(v54 + 8);
  while (1)
  {
    uint64_t v121 = dword_1826CEA50[v120];
    uint64_t v122 = WebGPU::BindGroupLayout::argumentBufferIndexForEntryIndex(v376, v378, dword_1826CEA50[v120]);
    if (v122 != 0x7FFFFFFFFFFFFFFFLL) {
      break;
    }
LABEL_167:
    if (++v120 == 4)
    {
LABEL_325:
      if ((v58 & 1) == 0 && !*(unsigned char *)(v376 + 120))
      {
        v284 = NSString;
        v256 = objc_msgSend(NSString, "stringWithFormat:", @"Binding %d was not contained in the bind group", *v54);
        v257 = [v284 stringWithFormat:@"GPUDevice.createBindGroup: %@", v256];
        MEMORY[0x18530AF50](v384, v257);
        WebGPU::Device::generateAValidationError(a1, (uint64_t *)v384);
        v285 = v384[0];
        v384[0] = 0;
        if (v285)
        {
          if (*(_DWORD *)v285 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *(_DWORD *)v285 -= 2;
          }
        }
LABEL_419:

        uint64_t v34 = v346;
        WebGPU::BindGroup::createInvalid((WebGPU::BindGroup *)a3, (atomic_uchar *volatile *)a1);
        goto LABEL_469;
      }
      uint64_t v44 = v345 + 1;
      uint64_t v34 = v346;
      long long v43 = a3;
      uint64_t v29 = (atomic_uchar *volatile *)a1;
      if (v345 + 1 == v344) {
        goto LABEL_328;
      }
      goto LABEL_45;
    }
  }
  uint64_t v123 = *(void *)(v376 + 16);
  if (!v123) {
    goto LABEL_590;
  }
  uint64_t v124 = v378 | ((uint64_t)(int)v121 << 32);
  unsigned int v125 = *(_DWORD *)(v123 - 8);
  unint64_t v126 = ((v124 + v366) ^ ((v124 + v366) >> 22)) + ~(((v124 + v366) ^ ((v124 + v366) >> 22)) << 13);
  unint64_t v127 = (9 * (v126 ^ (v126 >> 8))) ^ ((9 * (v126 ^ (v126 >> 8))) >> 15);
  uint64_t v128 = v125 & (((v127 + ~(v127 << 27)) >> 31) ^ (v127 + ~(v127 << 27)));
  uint64_t v129 = *(void *)(v123 + 16 * v128);
  if (v129 != v124)
  {
    int v130 = 1;
    while (v129 != -1)
    {
      uint64_t v128 = (v128 + v130) & v125;
      uint64_t v129 = *(void *)(v123 + 16 * v128);
      ++v130;
      if (v129 == v124) {
        goto LABEL_176;
      }
    }
    uint64_t v128 = *(unsigned int *)(v123 - 4);
  }
LABEL_176:
  if (v128 == *(_DWORD *)(v123 - 4))
  {
LABEL_590:
    __break(0xC471u);
    goto LABEL_597;
  }
  uint64_t v70 = *(void *)(v123 + 16 * v128 + 8);
  uint64_t v131 = a1;
  if (v121 == 3) {
    goto LABEL_187;
  }
  uint64_t v132 = *(void *)(v376 + 48);
  if (!v132) {
    goto LABEL_187;
  }
  int v133 = *(_DWORD *)(v132 - 8);
  unsigned int v134 = v133 & v368;
  id v135 = (int *)(v132 + 136 * (v133 & v368));
  int v136 = *v135;
  if (*v135 != v378)
  {
    int v137 = 1;
    while (v136 != -1)
    {
      unsigned int v134 = (v134 + v137) & v133;
      id v135 = (int *)(v132 + 136 * v134);
      int v136 = *v135;
      ++v137;
      if (*v135 == v378) {
        goto LABEL_185;
      }
    }
    id v135 = (int *)(v132 + 136 * *(unsigned int *)(v132 - 4));
  }
LABEL_185:
  if (v121 < 3 || v135 == (int *)(v132 + 136 * *(unsigned int *)(v132 - 4)))
  {
LABEL_187:
    uint64_t v138 = 1;
    if (v70 == 2) {
      uint64_t v138 = 2;
    }
    if (v70 == 1) {
      uint64_t v138 = 3;
    }
    if (v374)
    {
      uint64_t v139 = *(void *)(v376 + 48);
      if (!v139) {
        goto LABEL_592;
      }
      int v140 = *(_DWORD *)(v139 - 8);
      unsigned int v141 = v140 & v368;
      v142 = (int *)(v139 + 136 * (v140 & v368));
      int v143 = *v142;
      if (*v142 != v378)
      {
        int v144 = 1;
        while (v143 != -1)
        {
          unsigned int v141 = (v141 + v144) & v140;
          v142 = (int *)(v139 + 136 * v141);
          int v143 = *v142;
          ++v144;
          if (*v142 == v378) {
            goto LABEL_206;
          }
        }
        v142 = (int *)(v139 + 136 * *(unsigned int *)(v139 - 4));
      }
LABEL_206:
      if (v142 == (int *)(v139 + 136 * *(unsigned int *)(v139 - 4)))
      {
LABEL_592:
        __break(0xC471u);
        JUMPOUT(0x1824CEEBCLL);
      }
      if (v142[12] == 1)
      {
        v151 = *v370;
        if (*((void *)*v370 + 1) && *((void *)v151 + 9) == a1)
        {
          uint64_t v152 = v142[6];
          if (!WebGPU::validateSamplerType(v142[6], *v370))
          {
            v255 = NSString;
            v256 = objc_msgSend(NSString, "stringWithFormat:", @"Expected sampler type(%u) has wrong comparison or filtering modes", v152);
            v257 = [v255 stringWithFormat:@"GPUDevice.createBindGroup: %@", v256];
            MEMORY[0x18530AF50](v384, v257);
            WebGPU::Device::generateAValidationError(a1, (uint64_t *)v384);
            v258 = v384[0];
            v384[0] = 0;
            if (v258)
            {
              if (*(_DWORD *)v258 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *(_DWORD *)v258 -= 2;
              }
            }
            goto LABEL_419;
          }
          v153 = WebGPU::Sampler::samplerState(v151);
          if (v121 != 3)
          {
            if (v121 >= 3) {
              goto LABEL_422;
            }
            WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>::remove((uint64_t *)&v395 + v121, v122);
            [*(&v403 + v121) setSamplerState:v153 atIndex:v122];
            ++*(_DWORD *)v151;
            v391 = v151;
            long long v380 = 0uLL;
            uint64_t v381 = 0;
            WTF::HashMap<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>,WTF::DefaultHash<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>,WTF::HashTableTraits>::add<WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>((WebGPU::Sampler *)v384, (uint64_t *)&v392, &v391, &v380);
            v154 = (char *)v384[0] + 8 * v121;
            if (!v154[12]) {
              v154[12] = 1;
            }
            *((_DWORD *)v154 + 2) = v122;
            if (v391) {
              WTF::RefCounted<WebGPU::Sampler>::deref(v391);
            }
          }

          goto LABEL_166;
        }
        v248 = [NSString stringWithFormat:@"GPUDevice.createBindGroup: %@", @"Underlying sampler is not valid or created from a different device"];
        MEMORY[0x18530AF50](v384, v248);
        WebGPU::Device::generateAValidationError(a1, (uint64_t *)v384);
        v249 = v384[0];
        v384[0] = 0;
        if (v249)
        {
          if (*(_DWORD *)v249 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *(_DWORD *)v249 -= 2;
          }
        }

        uint64_t v34 = v346;
        uint64_t v261 = WTF::fastMalloc((WTF *)0xB0);
        WebGPU::BindGroup::BindGroup(v261, (atomic_uchar *volatile *)a1);
        v262 = a3;
LABEL_448:
        uint64_t *v262 = v261;
        goto LABEL_469;
      }
      v246 = [NSString stringWithFormat:@"GPUDevice.createBindGroup: %@", @"Expected sampler but it was not present in the bind group layout"];
      MEMORY[0x18530AF50](v384, v246);
      WebGPU::Device::generateAValidationError(a1, (uint64_t *)v384);
      v254 = v384[0];
      v384[0] = 0;
      if (v254)
      {
        if (*(_DWORD *)v254 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *(_DWORD *)v254 -= 2;
        }
      }
LABEL_447:

      uint64_t v261 = WTF::fastMalloc((WTF *)0xB0);
      uint64_t v34 = v346;
      WebGPU::BindGroup::BindGroup(v261, (atomic_uchar *volatile *)a1);
      v262 = a3;
      goto LABEL_448;
    }
    uint64_t v364 = v138;
    if (v371)
    {
      uint64_t v145 = *(void *)(v376 + 48);
      if (!v145) {
        goto LABEL_593;
      }
      int v146 = *(_DWORD *)(v145 - 8);
      unsigned int v147 = v146 & v368;
      v148 = (int *)(v145 + 136 * (v146 & v368));
      int v149 = *v148;
      if (*v148 != v378)
      {
        int v150 = 1;
        while (v149 != -1)
        {
          unsigned int v147 = (v147 + v150) & v146;
          v148 = (int *)(v145 + 136 * v147);
          int v149 = *v148;
          ++v150;
          if (*v148 == v378) {
            goto LABEL_225;
          }
        }
        v148 = (int *)(v145 + 136 * *(unsigned int *)(v145 - 4));
      }
LABEL_225:
      if (v148 == (int *)(v145 + 136 * *(unsigned int *)(v145 - 4)))
      {
LABEL_593:
        __break(0xC471u);
        JUMPOUT(0x1824CEEDCLL);
      }
      int v161 = v148[12];
      if (v161 == 2) {
        uint64_t v162 = (uint64_t)(v148 + 4);
      }
      else {
        uint64_t v162 = 0;
      }
      unsigned int v361 = v148[12];
      if (v161 == 3) {
        uint64_t v163 = (uint64_t)(v148 + 4);
      }
      else {
        uint64_t v163 = 0;
      }
      if ((v161 - 2) >= 3)
      {
        v246 = [NSString stringWithFormat:@"GPUDevice.createBindGroup: %@", @"Expected texture or storage texture but it was not present in the bind group layout"];
        MEMORY[0x18530AF50](v384, v246);
        WebGPU::Device::generateAValidationError(a1, (uint64_t *)v384);
        v268 = v384[0];
        v384[0] = 0;
        if (v268)
        {
          if (*(_DWORD *)v268 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *(_DWORD *)v268 -= 2;
          }
        }
        goto LABEL_447;
      }
      v164 = *v354;
      WebGPU::Queue::clearTextureViewIfNeeded(*(WebGPU::Queue **)(a1 + 16), *v354);
      WebGPU::TextureView::texture(v164);
      v359 = (WTF *)objc_claimAutoreleasedReturnValue();
      *(void *)&long long v380 = v359;
      uint64_t v165 = *((void *)v164 + 12);
      uint64_t v70 = *(unsigned __int8 *)(v165 + 104);
      if (*(unsigned char *)(v165 + 104))
      {
LABEL_234:
        v166 = v359;
        if (v121 != 3)
        {
          if (v121 >= 3) {
            goto LABEL_422;
          }
          WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>::remove((uint64_t *)&v395 + v121, v122);
          [*(&v403 + v121) setTexture:v359 atIndex:v122];
        }
        if (v359)
        {
          if ((v121 - 1) > 2) {
            uint64_t v167 = 1;
          }
          else {
            uint64_t v167 = qword_1826CEAC8[(int)v121 - 1];
          }
          v173 = &v408[6 * v167 - 2] + 2 * v364;
          uint64_t v174 = *((unsigned int *)v173 + 3);
          if (v174 == *((_DWORD *)v173 + 2))
          {
            WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,objc_object  {objcproto9MTLBuffer}* {__strong}&>(v173, (id *)&v380);
          }
          else
          {
            v175 = *v173;
            *((void *)v175 + v174) = v359;
            v166 = v359;
            ++*((_DWORD *)v173 + 3);
          }
          if ((v121 - 1) > 2) {
            uint64_t v176 = 1;
          }
          else {
            uint64_t v176 = qword_1826CEAC8[(int)v121 - 1];
          }
          int v177 = 64;
          if (v361 == 3) {
            int v177 = WebGPU::usageForStorageTexture(v148[6]);
          }
          v178 = &v407[3 * v176 - 1 + v364];
          v384[0] = (WTF *)__PAIR64__(*v367, v177);
          ++*(_DWORD *)v164;
          v384[1] = v164;
          LODWORD(v385[0]) = 1;
          v385[1] = 0;
          *(void *)&long long v386 = 0;
          unsigned int v179 = *((_DWORD *)v178 + 3);
          if (v179 == *((_DWORD *)v178 + 2))
          {
            __n128 v180 = WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebGPU::BindGroupEntryUsageData>((uint64_t)v178, (unint64_t)v384);
          }
          else
          {
            WebGPU::BindGroupEntryUsageData::BindGroupEntryUsageData(*(void *)v178 + 40 * v179, (uint64_t)v384);
            ++*((_DWORD *)v178 + 3);
          }
          if (LODWORD(v385[0]) != -1) {
            ((void (*)(WebGPU::Sampler **, WTF **, __n128))off_1ECABAAA0[LODWORD(v385[0])])(&v391, &v384[1], v180);
          }
        }
LABEL_166:
        char v58 = 1;
        v54 = v367;
        goto LABEL_167;
      }
      v168 = (void *)*((void *)v164 + 2);
      if (v168)
      {
        if (*((void *)v164 + 11) == a1)
        {
          uint64_t v70 = *(unsigned int *)(v165 + 52);
          if (v361 == 2 && (v70 & 4) == 0 || v361 == 3 && (v70 & 8) == 0) {
            goto LABEL_423;
          }
          if (v361 == 2)
          {
            uint64_t v169 = *(unsigned int *)(v165 + 40);
            int v170 = v148[8] ? 4 : 1;
            if (v170 != v169)
            {
              v335 = NSString;
              v270 = objc_msgSend(NSString, "stringWithFormat:", @"Bind group entry multisampled(%d) state does not match underlying texture sample count(%d)", v148[8], v169);
              v271 = [v335 stringWithFormat:@"GPUDevice.createBindGroup: %@", v270];
              MEMORY[0x18530AF50](v384, v271);
              WebGPU::Device::generateAValidationError(a1, (uint64_t *)v384);
              v336 = v384[0];
              v384[0] = 0;
              if (v336)
              {
                if (*(_DWORD *)v336 == 2) {
                  WTF::StringImpl::destroy();
                }
                else {
                  *(_DWORD *)v336 -= 2;
                }
              }
              goto LABEL_462;
            }
          }
          if (*(unsigned char *)(v376 + 120)) {
            goto LABEL_254;
          }
          if (WebGPU::validateTextureSampleType(v162, *((_DWORD *)v164 + 10), *((_DWORD *)v164 + 16), *(int **)(a1 + 232), *(_DWORD *)(a1 + 244)))
          {
            v168 = (void *)*((void *)v164 + 2);
            uint64_t v165 = *((void *)v164 + 12);
LABEL_254:
            if (WebGPU::validateTextureViewDimension<WGPUTextureBindingLayout>(v162, v168, v165)
              && WebGPU::validateTextureViewDimension<WGPUStorageTextureBindingLayout>(v163, *((void **)v164 + 2), *((void *)v164 + 12)))
            {
              uint64_t v70 = v361;
              if (v361 == 3)
              {
                if (v148[7] == *((_DWORD *)v164 + 10))
                {
                  v171 = WebGPU::TextureView::texture(v164);
                  BOOL v172 = [v171 mipmapLevelCount] == 1;

                  if (!v172)
                  {
                    v338 = NSString;
                    v339 = WebGPU::TextureView::texture(v164);
                    v340 = objc_msgSend(v338, "stringWithFormat:", @"Storage textures must have a single mip level(%lu)", objc_msgSend(v339, "mipmapLevelCount"));
                    v341 = [v338 stringWithFormat:@"GPUDevice.createBindGroup: %@", v340];
                    MEMORY[0x18530AF50](v384, v341);
                    WebGPU::Device::generateAValidationError(a1, (uint64_t *)v384);
                    v342 = v384[0];
                    v384[0] = 0;
                    if (v342)
                    {
                      if (*(_DWORD *)v342 == 2) {
                        WTF::StringImpl::destroy();
                      }
                      else {
                        *(_DWORD *)v342 -= 2;
                      }
                    }

                    goto LABEL_589;
                  }
                  goto LABEL_234;
                }
                v273 = [NSString stringWithFormat:@"GPUDevice.createBindGroup: %@", @"Bind group storage texture entry format does not match TextureView format"];
                MEMORY[0x18530AF50](v384, v273);
                WebGPU::Device::generateAValidationError(a1, (uint64_t *)v384);
                v337 = v384[0];
                v384[0] = 0;
                if (v337)
                {
                  if (*(_DWORD *)v337 == 2) {
                    WTF::StringImpl::destroy();
                  }
                  else {
                    *(_DWORD *)v337 -= 2;
                  }
                }
              }
              else
              {
                if (v361 != 2 || !WebGPU::is32bppFloatFormat(v359)) {
                  goto LABEL_234;
                }
                uint64_t v70 = v148[6];
                if ((v70 - 1) > 1) {
                  goto LABEL_455;
                }
                if (v70 != 1) {
                  goto LABEL_234;
                }
                uint64_t v70 = *(unsigned int *)(a1 + 244);
                if (v70)
                {
                  v181 = *(int **)(a1 + 232);
                  do
                  {
                    int v182 = *v181++;
                    if (v182 == 11) {
                      goto LABEL_234;
                    }
                  }
                  while (--v70);
                }
LABEL_455:
                v273 = [NSString stringWithFormat:@"GPUDevice.createBindGroup: %@", @"Can not create bind group with filterable 32bpp floating point texture as float32-filterable feature is not enabled"];
                MEMORY[0x18530AF50](v384, v273);
                WebGPU::Device::generateAValidationError(a1, (uint64_t *)v384);
                v283 = v384[0];
                v384[0] = 0;
                if (v283)
                {
                  if (*(_DWORD *)v283 == 2) {
                    WTF::StringImpl::destroy();
                  }
                  else {
                    *(_DWORD *)v283 -= 2;
                  }
                }
              }
            }
            else
            {
              v273 = [NSString stringWithFormat:@"GPUDevice.createBindGroup: %@", @"Bind group entry viewDimension does not match TextureView viewDimension"];
              MEMORY[0x18530AF50](v384, v273);
              WebGPU::Device::generateAValidationError(a1, (uint64_t *)v384);
              v274 = v384[0];
              v384[0] = 0;
              if (v274)
              {
                if (*(_DWORD *)v274 == 2) {
                  WTF::StringImpl::destroy();
                }
                else {
                  *(_DWORD *)v274 -= 2;
                }
              }
            }
          }
          else
          {
            v273 = [NSString stringWithFormat:@"GPUDevice.createBindGroup: %@", @"Bind group entry sampleType does not match TextureView sampleType"];
            MEMORY[0x18530AF50](v384, v273);
            WebGPU::Device::generateAValidationError(a1, (uint64_t *)v384);
            v343 = v384[0];
            v384[0] = 0;
            if (v343)
            {
              if (*(_DWORD *)v343 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *(_DWORD *)v343 -= 2;
              }
            }
          }
        }
        else
        {
          v273 = [NSString stringWithFormat:@"GPUDevice.createBindGroup: %@", @"Underlying texture was created from a different device"];
          MEMORY[0x18530AF50](v384, v273);
          WebGPU::Device::generateAValidationError(a1, (uint64_t *)v384);
          v282 = v384[0];
          v384[0] = 0;
          if (v282)
          {
            if (*(_DWORD *)v282 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *(_DWORD *)v282 -= 2;
            }
          }
        }
      }
      else
      {
        v273 = [NSString stringWithFormat:@"GPUDevice.createBindGroup: %@", @"Underlying texture is not valid"];
        MEMORY[0x18530AF50](v384, v273);
        WebGPU::Device::generateAValidationError(a1, (uint64_t *)v384);
        v281 = v384[0];
        v384[0] = 0;
        if (v281)
        {
          if (*(_DWORD *)v281 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *(_DWORD *)v281 -= 2;
          }
        }
      }

      goto LABEL_589;
    }
    if (v357)
    {
      uint64_t v155 = *(void *)(v376 + 48);
      if (!v155) {
        goto LABEL_595;
      }
      int v156 = *(_DWORD *)(v155 - 8);
      unsigned int v157 = v156 & v368;
      v158 = (int *)(v155 + 136 * (v156 & v368));
      int v159 = *v158;
      if (*v158 != v378)
      {
        int v160 = 1;
        while (v159 != -1)
        {
          unsigned int v157 = (v157 + v160) & v156;
          v158 = (int *)(v155 + 136 * v157);
          int v159 = *v158;
          ++v160;
          if (*v158 == v378) {
            goto LABEL_286;
          }
        }
        v158 = (int *)(v155 + 136 * *(unsigned int *)(v155 - 4));
      }
LABEL_286:
      if (v158 == (int *)(v155 + 136 * *(unsigned int *)(v155 - 4)))
      {
LABEL_595:
        __break(0xC471u);
        JUMPOUT(0x1824CEF1CLL);
      }
      if (v158[12] != 4)
      {
        v279 = [NSString stringWithFormat:@"GPUDevice.createBindGroup: %@", @"Expected external texture but it was not present in the bind group layout"];
        MEMORY[0x18530AF50](v384, v279);
        WebGPU::Device::generateAValidationError(a1, (uint64_t *)v384);
        v280 = v384[0];
        v384[0] = 0;
        if (v280)
        {
          if (*(_DWORD *)v280 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *(_DWORD *)v280 -= 2;
          }
        }

        uint64_t v34 = v346;
        WebGPU::BindGroup::createInvalid((WebGPU::BindGroup *)a3, (atomic_uchar *volatile *)a1);
        goto LABEL_469;
      }
      WebGPU::Device::createExternalTextureFromPixelBuffer((uint64_t)v384, a1, *(__CVBuffer **)(v357 + 16));
      v359 = v384[0];
      if (v384[0])
      {
        v183 = v384[0];
      }
      else
      {
        v183 = (WTF *)*(id *)(a1 + 296);

        uint64_t v131 = a1;
      }
      v391 = v183;
      if (v121 == 1)
      {
        unsigned int v184 = 2;
        goto LABEL_299;
      }
      if (v121 == 3)
      {
        unsigned int v352 = 1;
        unsigned int v184 = 3;
      }
      else
      {
        if (v121 == 2)
        {
          unsigned int v184 = 0;
        }
        else
        {
          if (v121 >= 3) {
            goto LABEL_422;
          }
          unsigned int v184 = 1;
        }
LABEL_299:
        unsigned int v352 = 0;
        v185 = (char *)v401 + 24 * v121;
        *((void *)v185 + 1) = *((unsigned int *)&v408[6 * v184 - 1] + 4 * v364 + 1);
        *((void *)v185 + 2) = v122;
      }
      v362 = v183;
      if (v183)
      {
        uint64_t v186 = v364 - 1;
        v187 = &v408[6 * v184 - 2] + 2 * v364;
        uint64_t v188 = *((unsigned int *)v187 + 3);
        if (v188 == *((_DWORD *)v187 + 2))
        {
          WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,objc_object  {objcproto9MTLBuffer}* {__strong}&>(&v408[6 * v184 - 2] + 2 * v364, (id *)&v391);
        }
        else
        {
          v189 = *v187;
          *((void *)v189 + v188) = v362;
          uint64_t v131 = a1;
          ++*((_DWORD *)v187 + 3);
        }
        unsigned int v190 = *v367;
        LODWORD(v380) = 64;
        DWORD1(v380) = v190;
        ++*(_DWORD *)v357;
        *((void *)&v380 + 1) = v357;
        LODWORD(v381) = 2;
        uint64_t v382 = 0;
        uint64_t v383 = 0;
        v191 = &v407[3 * v184 + v186];
        unsigned int v192 = *((_DWORD *)v191 + 3);
        if (v192 == *((_DWORD *)v191 + 2))
        {
          __n128 v193 = WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebGPU::BindGroupEntryUsageData>((uint64_t)&v407[3 * v184 + v186], (unint64_t)&v380);
        }
        else
        {
          WebGPU::BindGroupEntryUsageData::BindGroupEntryUsageData(*(void *)v191 + 40 * v192, (uint64_t)&v380);
          ++*((_DWORD *)v191 + 3);
        }
        if (v381 != -1) {
          ((void (*)(WTF **, char *, __n128))off_1ECABAAA0[v381])(&v379, (char *)&v380 + 8, v193);
        }
      }
      v350 = v384[1];
      if (v384[1])
      {
        v194 = v384[1];
        v379 = v194;
LABEL_312:
        uint64_t v195 = v364 - 1;
        v196 = &v408[6 * v184 - 2] + 2 * v364;
        uint64_t v197 = *((unsigned int *)v196 + 3);
        if (v197 == *((_DWORD *)v196 + 2))
        {
          WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,objc_object  {objcproto9MTLBuffer}* {__strong}&>(&v408[6 * v184 - 2] + 2 * v364, (id *)&v379);
        }
        else
        {
          unsigned int v365 = v184;
          v198 = *v196;
          *((void *)v198 + v197) = v194;
          unsigned int v184 = v365;
          ++*((_DWORD *)v196 + 3);
        }
        unsigned int v199 = *v367;
        LODWORD(v380) = 64;
        DWORD1(v380) = v199;
        ++*(_DWORD *)v357;
        *((void *)&v380 + 1) = v357;
        LODWORD(v381) = 2;
        uint64_t v382 = 0;
        uint64_t v383 = 0;
        v200 = &v407[3 * v184 + v195];
        unsigned int v201 = *((_DWORD *)v200 + 3);
        if (v201 == *((_DWORD *)v200 + 2))
        {
          __n128 v202 = WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebGPU::BindGroupEntryUsageData>((uint64_t)v200, (unint64_t)&v380);
          unsigned int v203 = v121;
        }
        else
        {
          WebGPU::BindGroupEntryUsageData::BindGroupEntryUsageData(*(void *)v200 + 40 * v201, (uint64_t)&v380);
          unsigned int v203 = v121;
          ++*((_DWORD *)v200 + 3);
        }
        if (v381 != -1) {
          ((void (*)(char *, char *, __n128))off_1ECABAAA0[v381])(&v406, (char *)&v380 + 8, v202);
        }
      }
      else
      {
        v379 = (WTF *)*(id *)(v131 + 296);
        v194 = v379;

        if (v194) {
          goto LABEL_312;
        }
        unsigned int v203 = v121;
      }
      uint64_t v70 = v352;
      if ((v352 & 1) == 0)
      {
        if (v203 >= 3) {
          goto LABEL_422;
        }
        WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>::remove((uint64_t *)&v395 + v121, v122);
        v204 = *(&v403 + v121);
        [v204 setTexture:v362 atIndex:v122];
        WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>::remove((uint64_t *)&v395 + v121, v122 + 1);
        [v204 setTexture:v194 atIndex:v122 + 1];
        WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>::remove((uint64_t *)&v395 + v121, v122 + 2);
        v205 = *(&v403 + v121);
        uint64_t v206 = [v205 constantDataAtIndex:v122 + 2];
        *(_OWORD *)uint64_t v206 = *(_OWORD *)v385;
        *(void *)(v206 + 16) = v386;
        WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>::remove((uint64_t *)&v395 + v121, v122 + 3);
        v207 = (_OWORD *)[v205 constantDataAtIndex:v122 + 3];
        _OWORD *v207 = v387;
        v207[1] = v388;
        v207[2] = v389;
        v207[3] = v390;
        v194 = v379;
      }

      goto LABEL_166;
    }
    char v58 = 1;
    goto LABEL_167;
  }
LABEL_422:
  __break(1u);
LABEL_423:
  v269 = NSString;
  v270 = objc_msgSend(NSString, "stringWithFormat:", @"Storage texture usage(%u) did not have storage usage or storage texture entry did not have storage binding", v70);
  v271 = [v269 stringWithFormat:@"GPUDevice.createBindGroup: %@", v270];
  MEMORY[0x18530AF50](v384, v271);
  WebGPU::Device::generateAValidationError(a1, (uint64_t *)v384);
  v272 = v384[0];
  v384[0] = 0;
  if (v272)
  {
    if (*(_DWORD *)v272 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *(_DWORD *)v272 -= 2;
    }
  }
LABEL_462:

LABEL_589:
  WebGPU::BindGroup::createInvalid((WebGPU::BindGroup *)a3, (atomic_uchar *volatile *)a1);

LABEL_468:
  uint64_t v34 = v346;
LABEL_469:
  uint64_t v286 = (uint64_t)v392;
  if (v392)
  {
    uint64_t v287 = *((unsigned int *)v392 - 1);
    if (v287)
    {
      v288 = v392;
      do
      {
        v291 = *v288;
        if (*v288 != (WebGPU::Sampler *)-1)
        {
          *v288 = 0;
          if (v291)
          {
            if (*(_DWORD *)v291 == 1)
            {
              WebGPU::Sampler::~Sampler(v291);
              WTF::fastFree(v289, v290);
            }
            else
            {
              --*(_DWORD *)v291;
            }
          }
        }
        v288 += 4;
        --v287;
      }
      while (v287);
    }
    WTF::fastFree((WTF *)(v286 - 16), v209);
  }
  v292 = v408;
  if (v393) {
    WTF::fastFree(v393, v209);
  }
  if (v34) {
    WTF::fastFree(v34, v209);
  }
  do
  {
    v294 = v292 - 2;
    v293 = *(v292 - 2);
    uint64_t v295 = *((unsigned int *)v292 - 1);
    if (v295)
    {
      uint64_t v296 = 40 * v295;
      v297 = (char *)v293 + 8;
      do
      {
        uint64_t v298 = *((unsigned int *)v297 + 2);
        if (v298 != -1) {
          ((void (*)(WTF **, char *))off_1ECABAAA0[v298])(v384, v297);
        }
        *((_DWORD *)v297 + 2) = -1;
        v297 += 40;
        v296 -= 40;
      }
      while (v296);
      v293 = *v294;
    }
    if (v293)
    {
      *(v292 - 2) = 0;
      *((_DWORD *)v292 - 2) = 0;
      WTF::fastFree(v293, v209);
    }
    v292 -= 2;
  }
  while (v294 != (WTF **)v407);
  if (HIDWORD(v419[1]))
  {
    v299 = (id *)v419[0];
    uint64_t v300 = 8 * HIDWORD(v419[1]);
    do
    {

      v300 -= 8;
    }
    while (v300);
  }
  v301 = v419[0];
  if (v419[0])
  {
    v419[0] = 0;
    LODWORD(v419[1]) = 0;
    WTF::fastFree(v301, v209);
  }
  if (HIDWORD(v418[1]))
  {
    v302 = (id *)v418[0];
    uint64_t v303 = 8 * HIDWORD(v418[1]);
    do
    {

      v303 -= 8;
    }
    while (v303);
  }
  v304 = v418[0];
  if (v418[0])
  {
    v418[0] = 0;
    LODWORD(v418[1]) = 0;
    WTF::fastFree(v304, v209);
  }
  if (HIDWORD(v417[1]))
  {
    v305 = (id *)v417[0];
    uint64_t v306 = 8 * HIDWORD(v417[1]);
    do
    {

      v306 -= 8;
    }
    while (v306);
  }
  v307 = v417[0];
  if (v417[0])
  {
    v417[0] = 0;
    LODWORD(v417[1]) = 0;
    WTF::fastFree(v307, v209);
  }
  if (HIDWORD(v416[1]))
  {
    v308 = (id *)v416[0];
    uint64_t v309 = 8 * HIDWORD(v416[1]);
    do
    {

      v309 -= 8;
    }
    while (v309);
  }
  v310 = v416[0];
  if (v416[0])
  {
    v416[0] = 0;
    LODWORD(v416[1]) = 0;
    WTF::fastFree(v310, v209);
  }
  if (HIDWORD(v415[1]))
  {
    v311 = (id *)v415[0];
    uint64_t v312 = 8 * HIDWORD(v415[1]);
    do
    {

      v312 -= 8;
    }
    while (v312);
  }
  v313 = v415[0];
  if (v415[0])
  {
    v415[0] = 0;
    LODWORD(v415[1]) = 0;
    WTF::fastFree(v313, v209);
  }
  if (HIDWORD(v414[1]))
  {
    v314 = (id *)v414[0];
    uint64_t v315 = 8 * HIDWORD(v414[1]);
    do
    {

      v315 -= 8;
    }
    while (v315);
  }
  v316 = v414[0];
  if (v414[0])
  {
    v414[0] = 0;
    LODWORD(v414[1]) = 0;
    WTF::fastFree(v316, v209);
  }
  if (HIDWORD(v413[1]))
  {
    v317 = (id *)v413[0];
    uint64_t v318 = 8 * HIDWORD(v413[1]);
    do
    {

      v318 -= 8;
    }
    while (v318);
  }
  v319 = v413[0];
  if (v413[0])
  {
    v413[0] = 0;
    LODWORD(v413[1]) = 0;
    WTF::fastFree(v319, v209);
  }
  if (HIDWORD(v412[1]))
  {
    v320 = (id *)v412[0];
    uint64_t v321 = 8 * HIDWORD(v412[1]);
    do
    {

      v321 -= 8;
    }
    while (v321);
  }
  v322 = v412[0];
  if (v412[0])
  {
    v412[0] = 0;
    LODWORD(v412[1]) = 0;
    WTF::fastFree(v322, v209);
  }
  if (HIDWORD(v411[1]))
  {
    v323 = (id *)v411[0];
    uint64_t v324 = 8 * HIDWORD(v411[1]);
    do
    {

      v324 -= 8;
    }
    while (v324);
  }
  v325 = v411[0];
  if (v411[0])
  {
    v411[0] = 0;
    LODWORD(v411[1]) = 0;
    WTF::fastFree(v325, v209);
  }
  if (HIDWORD(v410[1]))
  {
    v326 = (id *)v410[0];
    uint64_t v327 = 8 * HIDWORD(v410[1]);
    do
    {

      v327 -= 8;
    }
    while (v327);
  }
  v328 = v410[0];
  if (v410[0])
  {
    v410[0] = 0;
    LODWORD(v410[1]) = 0;
    WTF::fastFree(v328, v209);
  }
  if (HIDWORD(v409[1]))
  {
    v329 = (id *)v409[0];
    uint64_t v330 = 8 * HIDWORD(v409[1]);
    do
    {

      v330 -= 8;
    }
    while (v330);
  }
  v331 = v409[0];
  if (v409[0])
  {
    v409[0] = 0;
    LODWORD(v409[1]) = 0;
    WTF::fastFree(v331, v209);
  }
  if (HIDWORD(v408[1]))
  {
    v332 = (id *)v408[0];
    uint64_t v333 = 8 * HIDWORD(v408[1]);
    do
    {

      v333 -= 8;
    }
    while (v333);
  }
  v334 = v408[0];
  if (v408[0])
  {
    v408[0] = 0;
    LODWORD(v408[1]) = 0;
    WTF::fastFree(v334, v209);
  }
  if (v397) {
    WTF::fastFree((WTF *)((char *)v397 - 16), v209);
  }
  if (v396) {
    WTF::fastFree((WTF *)((char *)v396 - 16), v209);
  }
  if (v395) {
    WTF::fastFree((WTF *)((char *)v395 - 16), v209);
  }
}

void sub_1824CEF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,_DWORD *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a49)
  {
    if (*a49 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *a49 -= 2;
    }
  }

  WTF::HashMap<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>,WTF::DefaultHash<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>,WTF::HashTableTraits>::~HashMap(&a64, v72);
  if (a65) {
    WTF::fastFree(a65, v73);
  }
  if (a22) {
    WTF::fastFree(a22, v73);
  }
  WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x320], v73);
  WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x310], v74);
  WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x300], v75);
  WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x2F0], v76);
  WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x2E0], v77);
  WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x2D0], v78);
  WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x2C0], v79);
  WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x2B0], v80);
  WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x2A0], v81);
  WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x290], v82);
  WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x280], v83);
  WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x270], v84);
  WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x3E0], v85);
  WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x3D0], v86);
  WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x3C0], v87);
  WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x3B0], v88);
  WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x3A0], v89);
  WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x390], v90);
  WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x380], v91);
  WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x370], v92);
  WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x360], v93);
  WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x350], v94);
  WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x340], v95);
  WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x330], v96);
  WTF::EnumeratedArray<WebGPU::ShaderStage,WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,(WebGPU::ShaderStage)2>::~EnumeratedArray(&a67, v97);
  WTF::EnumeratedArray<WebGPU::ShaderStage,objc_object  {objcproto9MTLBuffer}* {__strong},(WebGPU::ShaderStage)2>::~EnumeratedArray(&a70);
  WTF::EnumeratedArray<WebGPU::ShaderStage,objc_object  {objcproto9MTLBuffer}* {__strong},(WebGPU::ShaderStage)2>::~EnumeratedArray((id *)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_1824CF93C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebGPU::BindGroup::createInvalid(WebGPU::BindGroup *this, atomic_uchar *volatile *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0xB0);
  uint64_t result = WebGPU::BindGroup::BindGroup(v4, a2);
  *(void *)this = v4;
  return result;
}

void sub_1824CF9A0(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(void ***)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4++;

      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  uint64_t v4 = *(WTF **)a1;
  if (v3)
  {
    uint64_t v5 = 40 * v3;
    uint64_t v6 = (char *)v4 + 8;
    do
    {
      uint64_t v7 = *((unsigned int *)v6 + 2);
      if (v7 != -1) {
        ((void (*)(char *, char *))off_1ECABAAA0[v7])(&v9, v6);
      }
      *((_DWORD *)v6 + 2) = -1;
      v6 += 40;
      v5 -= 40;
    }
    while (v5);
    uint64_t v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t *WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>::remove(uint64_t *result, int a2)
{
  uint64_t v2 = *result;
  if (*result)
  {
    uint64_t v3 = result;
    unsigned int v4 = *(_DWORD *)(v2 - 8);
    unsigned int v5 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    uint64_t v6 = v4 & (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16));
    int v7 = *(_DWORD *)(v2 + 4 * v6);
    if (v7 == a2)
    {
LABEL_6:
      if (v6 == *(_DWORD *)(v2 - 4)) {
        return result;
      }
      *(_DWORD *)(v2 + 4 * v6) = -2;
      ++*(_DWORD *)(*result - 16);
      if (*result)
      {
        --*(_DWORD *)(*result - 12);
        uint64_t v9 = *result;
        if (!*result) {
          return result;
        }
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
        uint64_t v9 = *result;
        if (!*result) {
          return result;
        }
      }
      int v10 = *(_DWORD *)(v9 - 12);
      unint64_t v11 = *(unsigned int *)(v9 - 4);
      if (6 * v10 < v11 && v11 >= 9)
      {
        uint64_t v13 = WTF::fastMalloc((WTF *)(4 * (v11 >> 1) + 16));
        memset((void *)(v13 + 16), 255, 4 * (v11 >> 1));
        uint64_t v15 = 0;
        *uint64_t v3 = v13 + 16;
        *(_DWORD *)(v13 + 12) = v11 >> 1;
        *(_DWORD *)(*v3 - 8) = (v11 >> 1) - 1;
        *(_DWORD *)(*v3 - 16) = 0;
        *(_DWORD *)(*v3 - 12) = v10;
        do
        {
          unsigned int v16 = *(_DWORD *)(v9 + 4 * v15);
          if (v16 <= 0xFFFFFFFD)
          {
            uint64_t v17 = *v3;
            if (*v3) {
              int v18 = *(_DWORD *)(v17 - 8);
            }
            else {
              int v18 = 0;
            }
            int v19 = 0;
            unsigned int v20 = 9 * ((v16 + ~(v16 << 15)) ^ ((v16 + ~(v16 << 15)) >> 10));
            unsigned int v21 = ((v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11)) ^ (((v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11)) >> 16);
            do
            {
              uint64_t v22 = v21 & v18;
              unsigned int v21 = ++v19 + v22;
            }
            while (*(_DWORD *)(v17 + 4 * v22) != -1);
            *(_DWORD *)(v17 + 4 * v22) = v16;
          }
          ++v15;
        }
        while (v15 != v11);
        return (uint64_t *)WTF::fastFree((WTF *)(v9 - 16), v14);
      }
    }
    else
    {
      int v8 = 1;
      while (v7 != -1)
      {
        uint64_t v6 = (v6 + v8) & v4;
        int v7 = *(_DWORD *)(v2 + 4 * v6);
        ++v8;
        if (v7 == a2) {
          goto LABEL_6;
        }
      }
    }
  }
  return result;
}

BOOL WebGPU::validateSamplerType(int a1, _DWORD *a2)
{
  switch(a1)
  {
    case 3:
      return a2[16] != 0;
    case 2:
      if (!a2[16] && a2[12] != 1 && a2[11] != 1) {
        return a2[13] != 1;
      }
      break;
    case 1:
      return a2[16] == 0;
  }
  return 0;
}

WebGPU::Sampler *WTF::HashMap<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>,WTF::DefaultHash<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>,WTF::HashTableTraits>::add<WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>(WebGPU::Sampler *result, uint64_t *a2, void *a3, long long *a4)
{
  int v7 = result;
  uint64_t v8 = *a2;
  if (*a2
    || (result = (WebGPU::Sampler *)WTF::HashTable<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::KeyValuePair<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>>,WTF::DefaultHash<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashMap<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>,WTF::DefaultHash<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>>::rehash(a2, 8u, 0), (uint64_t v8 = *a2) != 0))
  {
    char v9 = 0;
    unsigned int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    unsigned int v10 = 0;
    char v9 = 1;
  }
  unint64_t v11 = (WebGPU::Sampler *)*a3;
  unint64_t v12 = ~(*a3 << 32) + *a3;
  unint64_t v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  unint64_t v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  uint64_t v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~(v14 << 27)));
  unsigned int v16 = (WebGPU::Sampler *)(v8 + 32 * v15);
  uint64_t v17 = *(WebGPU::Sampler **)v16;
  if (!*(void *)v16)
  {
LABEL_12:
    *a3 = 0;
    uint64_t result = *(WebGPU::Sampler **)v16;
    *(void *)unsigned int v16 = v11;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebGPU::Sampler::~Sampler(result);
        uint64_t result = (WebGPU::Sampler *)WTF::fastFree(v26, v27);
        long long v28 = *a4;
        *((void *)v16 + 3) = *((void *)a4 + 2);
        *(_OWORD *)((char *)v16 + 8) = v28;
        uint64_t v21 = *a2;
        if (*a2)
        {
LABEL_16:
          ++*(_DWORD *)(v21 - 12);
          uint64_t v22 = *a2;
          if (*a2) {
            goto LABEL_17;
          }
          goto LABEL_26;
        }
LABEL_25:
        *(_DWORD *)(v21 - 12) = 1;
        uint64_t v22 = *a2;
        if (*a2)
        {
LABEL_17:
          uint64_t v23 = (*(_DWORD *)(v22 - 16) + *(_DWORD *)(v22 - 12));
          unint64_t v24 = *(unsigned int *)(v22 - 4);
          if (v24 <= 0x400) {
            goto LABEL_18;
          }
          goto LABEL_27;
        }
LABEL_26:
        uint64_t v23 = *(unsigned int *)(v22 - 16);
        unint64_t v24 = *(unsigned int *)(v22 - 4);
        if (v24 <= 0x400)
        {
LABEL_18:
          if (3 * v24 > 4 * v23)
          {
LABEL_30:
            uint64_t v29 = v22 + 32 * v24;
            char v30 = 1;
            goto LABEL_33;
          }
          if (!v24)
          {
            uint64_t result = (WebGPU::Sampler *)WTF::HashTable<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::KeyValuePair<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>>,WTF::DefaultHash<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashMap<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>,WTF::DefaultHash<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>>::rehash(a2, 8u, (WebGPU::Sampler **)v16);
            unsigned int v16 = result;
            uint64_t v22 = *a2;
            if (!*a2)
            {
LABEL_21:
              unint64_t v24 = 0;
              goto LABEL_30;
            }
LABEL_29:
            unint64_t v24 = *(unsigned int *)(v22 - 4);
            goto LABEL_30;
          }
LABEL_28:
          uint64_t result = (WebGPU::Sampler *)WTF::HashTable<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::KeyValuePair<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>>,WTF::DefaultHash<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashMap<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>,WTF::DefaultHash<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>>::rehash(a2, v24 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v24)), (WebGPU::Sampler **)v16);
          unsigned int v16 = result;
          uint64_t v22 = *a2;
          if (!*a2) {
            goto LABEL_21;
          }
          goto LABEL_29;
        }
LABEL_27:
        if (v24 > 2 * v23) {
          goto LABEL_30;
        }
        goto LABEL_28;
      }
      --*(_DWORD *)result;
    }
    long long v20 = *a4;
    *((void *)v16 + 3) = *((void *)a4 + 2);
    *(_OWORD *)((char *)v16 + 8) = v20;
    uint64_t v21 = *a2;
    if (*a2) {
      goto LABEL_16;
    }
    goto LABEL_25;
  }
  int v18 = 0;
  int v19 = 1;
  while (v17 != v11)
  {
    if (v17 == (WebGPU::Sampler *)-1) {
      int v18 = v16;
    }
    uint64_t v15 = (v15 + v19) & v10;
    unsigned int v16 = (WebGPU::Sampler *)(v8 + 32 * v15);
    uint64_t v17 = *(WebGPU::Sampler **)v16;
    ++v19;
    if (!*(void *)v16)
    {
      if (v18)
      {
        *(_OWORD *)int v18 = 0u;
        *((_OWORD *)v18 + 1) = 0u;
        --*(_DWORD *)(*a2 - 16);
        unint64_t v11 = (WebGPU::Sampler *)*a3;
        unsigned int v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if (v9) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = *(unsigned int *)(v8 - 4);
  }
  char v30 = 0;
  uint64_t v29 = v8 + 32 * v25;
LABEL_33:
  *(void *)int v7 = v16;
  *((void *)v7 + 1) = v29;
  *((unsigned char *)v7 + 16) = v30;
  return result;
}

uint64_t WebGPU::validateTextureSampleType(uint64_t a1, int a2, int a3, int *a4, unsigned int a5)
{
  if (!a1) {
    return 1;
  }
  int v5 = *(_DWORD *)(a1 + 8) - 1;
  if (v5 > 4) {
    return 0;
  }
  int v6 = dword_1826CEAE0[v5];
  int v7 = 3;
  switch(a2)
  {
    case 0:
      return 0;
    case 1:
    case 2:
    case 7:
    case 8:
    case 9:
    case 17:
    case 18:
    case 19:
    case 20:
    case 23:
    case 24:
    case 26:
    case 27:
    case 28:
    case 34:
      return (v7 & v6) != 0;
    case 3:
    case 5:
    case 10:
    case 13:
    case 15:
    case 21:
    case 25:
    case 30:
    case 32:
    case 36:
    case 38:
      return (v6 & 0x10) != 0;
    case 4:
    case 6:
    case 11:
    case 14:
    case 16:
    case 22:
    case 31:
    case 33:
    case 37:
      return (v6 & 8) != 0;
    case 12:
      if (!a5) {
        return (v6 & 2) != 0;
      }
      uint64_t v9 = a5;
      while (1)
      {
        int v10 = *a4++;
        if (v10 == 11) {
          break;
        }
        int v7 = 2;
        if (!--v9) {
          return (v7 & v6) != 0;
        }
      }
      return (v6 & 3) != 0;
    case 29:
      if (!a5) {
        return (v6 & 2) != 0;
      }
      uint64_t v11 = a5;
      do
      {
        int v12 = *a4++;
        if (v12 == 11) {
          return (v6 & 3) != 0;
        }
        int v7 = 2;
        --v11;
      }
      while (v11);
      return (v7 & v6) != 0;
    case 35:
      if (!a5) {
        return (v6 & 2) != 0;
      }
      uint64_t v13 = a5;
      do
      {
        int v14 = *a4++;
        if (v14 == 11) {
          return (v6 & 3) != 0;
        }
        int v7 = 2;
        --v13;
      }
      while (v13);
      return (v7 & v6) != 0;
    case 39:
    case 40:
    case 42:
      goto LABEL_32;
    case 41:
    case 43:
      if (a3 > 1)
      {
        if (a3 == 0x7FFFFFFF)
        {
          __break(0xC471u);
          JUMPOUT(0x1824D0118);
        }
LABEL_32:
        int v7 = 6;
        return (v7 & v6) != 0;
      }
      if (a3)
      {
        if (a3 == 1) {
          return (v6 & 0x10) != 0;
        }
        goto LABEL_32;
      }
      uint64_t result = (v6 & 0x16) != 0;
      break;
    default:
      if (a2 != 0x7FFFFFFF) {
        return (v7 & v6) != 0;
      }
      return 0;
  }
  return result;
}

BOOL WebGPU::validateTextureViewDimension<WGPUTextureBindingLayout>(uint64_t a1, void *a2, uint64_t a3)
{
  if (!a1) {
    return 1;
  }
  if (*(unsigned char *)(a3 + 104)) {
    a2 = *(void **)(a3 + 16);
  }
  int v3 = *(_DWORD *)(a1 + 12);
  id v4 = a2;
  uint64_t v5 = [v4 textureType];

  switch(v3)
  {
    case 1:
      BOOL result = v5 == 0;
      break;
    case 2:
      BOOL result = v5 == 2 || v5 == 4;
      break;
    case 3:
      BOOL result = v5 == 3 || v5 == 8;
      break;
    case 4:
      BOOL result = v5 == 5;
      break;
    case 5:
      BOOL result = v5 == 6;
      break;
    case 6:
      BOOL result = v5 == 7;
      break;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

void sub_1824D02F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL WebGPU::validateTextureViewDimension<WGPUStorageTextureBindingLayout>(uint64_t a1, void *a2, uint64_t a3)
{
  if (!a1) {
    return 1;
  }
  if (*(unsigned char *)(a3 + 104)) {
    a2 = *(void **)(a3 + 16);
  }
  int v3 = *(_DWORD *)(a1 + 16);
  id v4 = a2;
  uint64_t v5 = [v4 textureType];

  switch(v3)
  {
    case 1:
      BOOL result = v5 == 0;
      break;
    case 2:
      BOOL result = v5 == 2 || v5 == 4;
      break;
    case 3:
      BOOL result = v5 == 3 || v5 == 8;
      break;
    case 4:
      BOOL result = v5 == 5;
      break;
    case 5:
      BOOL result = v5 == 6;
      break;
    case 6:
      BOOL result = v5 == 7;
      break;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

void sub_1824D0444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebGPU::is32bppFloatFormat(void *a1)
{
  id v1 = a1;
  if ([v1 pixelFormat] == 55 || objc_msgSend(v1, "pixelFormat") == 105)
  {

    return 1;
  }
  else
  {
    BOOL v3 = [v1 pixelFormat] == 125;

    return v3;
  }
}

void sub_1824D04F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebGPU::usageForStorageTexture(uint64_t result)
{
  switch((int)result)
  {
    case 0:
      return result;
    case 1:
      BOOL result = 128;
      break;
    case 2:
      BOOL result = 256;
      break;
    case 3:
      BOOL result = 512;
      break;
    default:
      if (result == 0x7FFFFFFF)
      {
        __break(0xC471u);
        JUMPOUT(0x1824D0570);
      }
      __break(0xC471u);
      JUMPOUT(0x1824D0590);
  }
  return result;
}

void WebGPU::BindableResources::~BindableResources(WebGPU::BindableResources *this, void *a2)
{
  uint64_t v3 = *((unsigned int *)this + 7);
  id v4 = (WTF *)*((void *)this + 2);
  if (v3)
  {
    uint64_t v5 = 40 * v3;
    int v6 = (char *)v4 + 8;
    do
    {
      uint64_t v7 = *((unsigned int *)v6 + 2);
      if (v7 != -1) {
        ((void (*)(char *, char *))off_1ECABAAA0[v7])(&v13, v6);
      }
      *((_DWORD *)v6 + 2) = -1;
      v6 += 40;
      v5 -= 40;
    }
    while (v5);
    id v4 = (WTF *)*((void *)this + 2);
  }
  if (v4)
  {
    *((void *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
  uint64_t v8 = *((unsigned int *)this + 3);
  if (v8)
  {
    uint64_t v9 = *(void ***)this;
    uint64_t v10 = 8 * v8;
    do
    {
      uint64_t v11 = *v9++;

      v10 -= 8;
    }
    while (v10);
  }
  int v12 = *(WTF **)this;
  if (*(void *)this)
  {
    *(void *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v12, a2);
  }
}

void WebGPU::BindGroup::create(uint64_t *a1, void *a2, void *a3, void *a4, uint64_t *a5, _DWORD *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, atomic_uchar *volatile *a10)
{
  id v15 = a2;
  id v34 = a3;
  id v33 = a4;
  uint64_t v16 = WTF::fastMalloc((WTF *)0xB0);
  id v17 = v15;
  id v18 = v34;
  id v19 = v33;
  int v20 = 1;
  *(_DWORD *)uint64_t v16 = 1;
  *(void *)(v16 + 8) = 0;
  id v37 = v17;
  *(void *)(v16 + 16) = v37;
  id v21 = v18;
  *(void *)(v16 + 24) = v21;
  id v22 = v19;
  char v23 = 0;
  *(void *)(v16 + 32) = v22;
  atomic_uchar *volatile v24 = *a10;
  atomic_compare_exchange_strong_explicit(*a10, (unsigned __int8 *)&v23, 1u, memory_order_acquire, memory_order_acquire);
  if (v23) {
    MEMORY[0x18530AEA0](v24);
  }
  ++*((void *)v24 + 1);
  atomic_compare_exchange_strong_explicit(v24, (unsigned __int8 *)&v20, 0, memory_order_release, memory_order_relaxed);
  if (v20 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
  }
  *(void *)(v16 + 48) = 0;
  *(void *)(v16 + 40) = a10;
  *(void *)(v16 + 56) = 0;
  uint64_t v25 = *a5;
  *a5 = 0;
  *(void *)(v16 + 48) = v25;
  LODWORD(v25) = *((_DWORD *)a5 + 2);
  *((_DWORD *)a5 + 2) = 0;
  *(_DWORD *)(v16 + 56) = v25;
  LODWORD(v25) = *((_DWORD *)a5 + 3);
  *((_DWORD *)a5 + 3) = 0;
  *(_DWORD *)(v16 + 60) = v25;
  ++*a6;
  *(void *)(v16 + 64) = a6;
  *(void *)(v16 + 72) = 0;
  *(void *)(v16 + 80) = 0;
  uint64_t v26 = *a7;
  *a7 = 0;
  *(void *)(v16 + 72) = v26;
  LODWORD(v26) = *((_DWORD *)a7 + 2);
  *((_DWORD *)a7 + 2) = 0;
  *(_DWORD *)(v16 + 80) = v26;
  unint64_t v27 = *((unsigned int *)a7 + 3);
  *((_DWORD *)a7 + 3) = 0;
  *(void *)(v16 + 96) = 0;
  *(_DWORD *)(v16 + 84) = v27;
  *(void *)(v16 + 88) = 0;
  uint64_t v28 = *a8;
  *a8 = 0;
  *(void *)(v16 + 96) = v28;
  *(_OWORD *)(v16 + 104) = *(_OWORD *)a9;
  long long v29 = *(_OWORD *)(a9 + 16);
  long long v30 = *(_OWORD *)(a9 + 32);
  long long v31 = *(_OWORD *)(a9 + 48);
  *(void *)(v16 + 168) = *(void *)(a9 + 64);
  *(_OWORD *)(v16 + 152) = v31;
  *(_OWORD *)(v16 + 136) = v30;
  *(_OWORD *)(v16 + 120) = v29;
  unint64_t v39 = 0;
  if (v27)
  {
    unint64_t v32 = 0;
    while (v32 < *(unsigned int *)(v16 + 84))
    {
      WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned long &>((uint64_t *)(v16 + 88), (int *)(*(void *)(v16 + 72) + 32 * v32 + 24), (uint64_t *)&v39, (uint64_t)v38);
      unint64_t v32 = v39 + 1;
      unint64_t v39 = v32;
      if (v32 >= v27) {
        goto LABEL_9;
      }
    }
    __break(0xC471u);
  }
  else
  {
LABEL_9:

    *a1 = v16;
  }
}

void sub_1824D08E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, id a16)
{
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(a10, v20);
  WTF::fastFree((WTF *)v16, v21);

  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebGPU::BindableResources,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebGPU::BindableResources>::destruct(*(WTF **)a1, (WTF *)(*(void *)a1 + 48 * v3));
  }
  id v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WebGPU::Sampler ***WTF::HashMap<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>,WTF::DefaultHash<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>,WTF::HashTableTraits>::~HashMap(WebGPU::Sampler ***a1, void *a2)
{
  unsigned int v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = *((unsigned int *)v3 - 1);
    if (v4)
    {
      uint64_t v5 = *a1;
      do
      {
        uint64_t v8 = *v5;
        if (*v5 != (WebGPU::Sampler *)-1)
        {
          *uint64_t v5 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 1)
            {
              WebGPU::Sampler::~Sampler(v8);
              WTF::fastFree(v6, v7);
            }
            else
            {
              --*(_DWORD *)v8;
            }
          }
        }
        v5 += 4;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  return a1;
}

void *WTF::EnumeratedArray<WebGPU::ShaderStage,WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,(WebGPU::ShaderStage)2>::~EnumeratedArray(void *a1, void *a2)
{
  uint64_t v3 = a1[2];
  if (v3) {
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v4 = a1[1];
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  if (*a1) {
    WTF::fastFree((WTF *)(*a1 - 16), a2);
  }
  return a1;
}

id *WTF::EnumeratedArray<WebGPU::ShaderStage,objc_object  {objcproto9MTLBuffer}* {__strong},(WebGPU::ShaderStage)2>::~EnumeratedArray(id *a1)
{
  return a1;
}

uint64_t *WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned long &>@<X0>(uint64_t *result@<X0>, int *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(result, 8u, 0), (uint64_t v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  int v11 = *a2;
  unsigned int v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  unsigned int v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  unsigned int v14 = (v13 ^ HIWORD(v13)) & v10;
  id v15 = (uint64_t *)(v8 + 8 * v14);
  int v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15 == -1)
  {
LABEL_12:
    uint64_t v19 = *a3;
    *(_DWORD *)id v15 = v11;
    *((_DWORD *)v15 + 1) = v19;
    if (*v6)
    {
      ++*(_DWORD *)(*v6 - 12);
      uint64_t v20 = *v6;
      if (*v6) {
        goto LABEL_14;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      uint64_t v20 = *v6;
      if (*v6)
      {
LABEL_14:
        uint64_t v21 = (*(_DWORD *)(v20 - 16) + *(_DWORD *)(v20 - 12));
        unint64_t v22 = *(unsigned int *)(v20 - 4);
        if (v22 <= 0x400) {
          goto LABEL_15;
        }
        goto LABEL_23;
      }
    }
    uint64_t v21 = *(unsigned int *)(v20 - 16);
    unint64_t v22 = *(unsigned int *)(v20 - 4);
    if (v22 <= 0x400)
    {
LABEL_15:
      if (3 * v22 > 4 * v21)
      {
LABEL_26:
        *(void *)a4 = v15;
        *(void *)(a4 + 8) = v20 + 8 * v22;
        *(unsigned char *)(a4 + 16) = 1;
        return result;
      }
      if (!v22)
      {
        BOOL result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v6, 8u, v15);
        id v15 = result;
        uint64_t v20 = *v6;
        if (!*v6)
        {
LABEL_18:
          unint64_t v22 = 0;
          goto LABEL_26;
        }
LABEL_25:
        unint64_t v22 = *(unsigned int *)(v20 - 4);
        goto LABEL_26;
      }
LABEL_24:
      BOOL result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v6, v22 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v22)), v15);
      id v15 = result;
      uint64_t v20 = *v6;
      if (!*v6) {
        goto LABEL_18;
      }
      goto LABEL_25;
    }
LABEL_23:
    if (v22 > 2 * v21) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  id v17 = 0;
  int v18 = 1;
  while (v16 != v11)
  {
    if (v16 == -2) {
      id v17 = v15;
    }
    unsigned int v14 = (v14 + v18) & v10;
    id v15 = (uint64_t *)(v8 + 8 * v14);
    int v16 = *(_DWORD *)v15;
    ++v18;
    if (*(_DWORD *)v15 == -1)
    {
      if (v17)
      {
        *id v17 = 0xFFFFFFFFLL;
        --*(_DWORD *)(*v6 - 16);
        int v11 = *a2;
        id v15 = v17;
      }
      goto LABEL_12;
    }
  }
  if (v9) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = *(unsigned int *)(v8 - 4);
  }
  *(void *)a4 = v15;
  *(void *)(a4 + 8) = v8 + 8 * v23;
  *(unsigned char *)(a4 + 16) = 0;
  return result;
}

void *WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(void *result, void *a2)
{
  uint64_t v2 = result;
  if (*result)
  {
    *(void *)(*result + 8) = 0;
    uint64_t v3 = (unsigned int *)*result;
    *uint64_t v2 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
      return v2;
    }
    else
    {
      return v2;
    }
  }
  else
  {
    *BOOL result = 0;
  }
  return result;
}

uint64_t WebGPU::BindGroup::BindGroup(uint64_t a1, atomic_uchar *volatile *a2)
{
  char v4 = 0;
  int v5 = 1;
  *(_DWORD *)a1 = 1;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  atomic_uchar *volatile v6 = *a2;
  atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x18530AEA0](v6);
  }
  ++*((void *)v6 + 1);
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  *(void *)(a1 + 40) = a2;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 96) = 0;
  memset_pattern16((void *)(a1 + 104), &unk_1826CEA60, 0x48uLL);
  return a1;
}

void sub_1824D0E50(_Unwind_Exception *a1)
{
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v2, v4);
  _Unwind_Resume(a1);
}

void WebGPU::BindGroup::~BindGroup(WebGPU::BindGroup *this, void *a2)
{
  uint64_t v3 = *((void *)this + 12);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      int v5 = (WebGPU::Sampler **)*((void *)this + 12);
      do
      {
        uint64_t v8 = *v5;
        if (*v5 != (WebGPU::Sampler *)-1)
        {
          *int v5 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 1)
            {
              WebGPU::Sampler::~Sampler(v8);
              WTF::fastFree(v6, v7);
            }
            else
            {
              --*(_DWORD *)v8;
            }
          }
        }
        v5 += 4;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v9 = *((void *)this + 11);
  if (v9) {
    WTF::fastFree((WTF *)(v9 - 16), a2);
  }
  int v10 = (WTF *)*((void *)this + 9);
  if (v10)
  {
    *((void *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v10, a2);
  }
  int v11 = (WebGPU::BindGroupLayout *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (!v11)
  {
LABEL_18:
    unsigned int v12 = *((_DWORD *)this + 15);
    if (!v12) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (*(_DWORD *)v11 != 1)
  {
    --*(_DWORD *)v11;
    goto LABEL_18;
  }
  WebGPU::BindGroupLayout::~BindGroupLayout(v11, a2);
  WTF::fastFree(v17, v18);
  unsigned int v12 = *((_DWORD *)this + 15);
  if (v12) {
LABEL_19:
  }
    WTF::VectorDestructor<true,WebGPU::BindableResources>::destruct(*((WTF **)this + 6), (WTF *)(*((void *)this + 6) + 48 * v12));
LABEL_20:
  unsigned int v13 = (WTF *)*((void *)this + 6);
  if (v13)
  {
    *((void *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v13, a2);
  }
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)this + 5, a2);

  uint64_t v15 = *((void *)this + 1);
  if (v15)
  {
    *(void *)(v15 + 8) = 0;
    int v16 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v16)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, v14);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

id WebGPU::BindGroup::usageName(int *a1)
{
  int v2 = *a1;
  if (*a1)
  {
    uint64_t v6 = [&stru_1ECABF938 stringByAppendingString:@"Input "];
    int v2 = *a1;
    uint64_t v3 = (__CFString *)v6;
    if ((*a1 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v3 = &stru_1ECABF938;
    if ((v2 & 2) == 0) {
      goto LABEL_3;
    }
  }
  uint64_t v7 = [(__CFString *)v3 stringByAppendingString:@"Constant "];

  int v2 = *a1;
  uint64_t v3 = (__CFString *)v7;
  if ((*a1 & 4) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v8 = [(__CFString *)v3 stringByAppendingString:@"Storage "];

  int v2 = *a1;
  uint64_t v3 = (__CFString *)v8;
  if ((*a1 & 8) == 0)
  {
LABEL_5:
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v9 = [(__CFString *)v3 stringByAppendingString:@"StorageRead "];

  int v2 = *a1;
  uint64_t v3 = (__CFString *)v9;
  if ((*a1 & 0x10) == 0)
  {
LABEL_6:
    if ((v2 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v10 = [(__CFString *)v3 stringByAppendingString:@"Attachment "];

  int v2 = *a1;
  uint64_t v3 = (__CFString *)v10;
  if ((*a1 & 0x20) == 0)
  {
LABEL_7:
    if ((v2 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v11 = [(__CFString *)v3 stringByAppendingString:@"AttachmentRead "];

  int v2 = *a1;
  uint64_t v3 = (__CFString *)v11;
  if ((*a1 & 0x40) == 0)
  {
LABEL_8:
    if ((v2 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v12 = [(__CFString *)v3 stringByAppendingString:@"ConstantTexture "];

  int v2 = *a1;
  uint64_t v3 = (__CFString *)v12;
  if ((*a1 & 0x80) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v13 = [(__CFString *)v3 stringByAppendingString:@"StorageTextureWriteOnly "];

  int v2 = *a1;
  uint64_t v3 = (__CFString *)v13;
  if ((*a1 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v14 = [(__CFString *)v3 stringByAppendingString:@"StorageTextureRead "];

  uint64_t v3 = (__CFString *)v14;
  if ((*a1 & 0x200) == 0)
  {
LABEL_11:
    uint64_t v4 = v3;
    return v4;
  }
LABEL_23:
  uint64_t v15 = [(__CFString *)v3 stringByAppendingString:@"StorageTextureReadWrite "];

  uint64_t v4 = (void *)v15;
  return v4;
}

void sub_1824D121C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebGPU::BindGroup::makeEntryMapKey(unsigned int a1, uint64_t a2, unsigned int a3)
{
  if (a3) {
    return (a2 << 32) | (2 * a1) | (a3 - 1);
  }
  uint64_t result = 1333;
  __break(0xC471u);
  return result;
}

void WebGPU::BindGroup::rebindSamplersIfNeeded(WebGPU::BindGroup *this)
{
  uint64_t v2 = *((void *)this + 12);
  if (v2)
  {
    uint64_t v3 = *(unsigned int *)(v2 - 4);
    uint64_t v4 = v2 + 32 * v3;
    if (!*(_DWORD *)(v2 - 12))
    {
      uint64_t v5 = v2 + 32 * v3;
      uint64_t v4 = v5;
      goto LABEL_10;
    }
    uint64_t v5 = *((void *)this + 12);
    if (v3)
    {
      uint64_t v6 = 32 * v3;
      uint64_t v5 = *((void *)this + 12);
      do
      {
        if ((unint64_t)(*(void *)v5 + 1) > 1) {
          goto LABEL_9;
        }
        v5 += 32;
        v6 -= 32;
      }
      while (v6);
      uint64_t v5 = v4;
LABEL_10:
      uint64_t v7 = v2 + 32 * *(unsigned int *)(v2 - 4);
      if (v7 == v5) {
        return;
      }
      while (1)
      {
LABEL_16:
        uint64_t v8 = *(id **)v5;
        if (*(void *)v5 && (id WeakRetained = objc_loadWeakRetained(v8 + 10), WeakRetained, !WeakRetained))
        {
          WTFLogAlways();
          uint64_t v11 = WebGPU::Sampler::samplerState((WebGPU::Sampler *)v8);
          if (*(unsigned char *)(v5 + 12))
          {
            id v12 = *(id *)(*((void *)this + 8) + 24);
            id v13 = *((id *)this + 2);
            [v12 setArgumentBuffer:v13 offset:0];

            id v14 = *(id *)(*((void *)this + 8) + 24);
            if (!*(unsigned char *)(v5 + 12)) {
              goto LABEL_35;
            }
            uint64_t v15 = v14;
            [v14 setSamplerState:v11 atIndex:*(unsigned int *)(v5 + 8)];
          }
          if (*(unsigned char *)(v5 + 20))
          {
            id v16 = *(id *)(*((void *)this + 8) + 32);
            id v17 = *((id *)this + 3);
            [v16 setArgumentBuffer:v17 offset:0];

            id v18 = *(id *)(*((void *)this + 8) + 32);
            if (!*(unsigned char *)(v5 + 20)) {
              goto LABEL_35;
            }
            uint64_t v19 = v18;
            [v18 setSamplerState:v11 atIndex:*(unsigned int *)(v5 + 16)];
          }
          if (*(unsigned char *)(v5 + 28))
          {
            id v20 = *(id *)(*((void *)this + 8) + 40);
            id v21 = *((id *)this + 4);
            [v20 setArgumentBuffer:v21 offset:0];

            id v22 = *(id *)(*((void *)this + 8) + 40);
            if (!*(unsigned char *)(v5 + 28))
            {
LABEL_35:
              __break(1u);
              return;
            }
            uint64_t v23 = v22;
            [v22 setSamplerState:v11 atIndex:*(unsigned int *)(v5 + 24)];
          }
          uint64_t v10 = v5 + 32;
          uint64_t v5 = v4;
          if (v10 != v4)
          {
LABEL_19:
            uint64_t v5 = v10;
            while ((unint64_t)(*(void *)v5 + 1) <= 1)
            {
              v5 += 32;
              if (v5 == v4)
              {
                uint64_t v5 = v4;
                break;
              }
            }
          }
        }
        else
        {
          uint64_t v10 = v5 + 32;
          uint64_t v5 = v4;
          if (v10 != v4) {
            goto LABEL_19;
          }
        }
        if (v5 == v7) {
          return;
        }
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
LABEL_9:
  if (v2) {
    goto LABEL_10;
  }
  uint64_t v7 = 0;
  if (v5) {
    goto LABEL_16;
  }
}

void sub_1824D14F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824D1544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_DWORD *wgpuBindGroupReference(_DWORD *result)
{
  return result;
}

WebGPU::BindGroup *wgpuBindGroupRelease(WebGPU::BindGroup *result, void *a2)
{
  if (*(_DWORD *)result == 1)
  {
    WebGPU::BindGroup::~BindGroup(result, a2);
    return (WebGPU::BindGroup *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_DWORD *wgpuBindGroupSetLabel(id *a1, char *__s)
{
  if (__s) {
    strlen(__s);
  }
  WTF::String::fromUTF8();
  if (v7)
  {
    *v7 += 2;
    uint64_t v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else
  {
    uint64_t v3 = &stru_1ECABF938;
  }
  [a1[2] setLabel:v3];

  if (v7) {
    uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v4 = &stru_1ECABF938;
  }
  [a1[3] setLabel:v4];

  if (v7) {
    uint64_t v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v5 = &stru_1ECABF938;
  }
  [a1[4] setLabel:v5];

  if (!v7)
  {
LABEL_14:
    uint64_t result = v7;
    if (!v7) {
      return result;
    }
    goto LABEL_17;
  }
  if (*v7 != 2)
  {
    *v7 -= 2;
    goto LABEL_14;
  }
  WTF::StringImpl::destroy();
  uint64_t result = v7;
LABEL_17:
  if (*result == 2) {
    return (_DWORD *)WTF::StringImpl::destroy();
  }
  *result -= 2;
  return result;
}

void sub_1824D16FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  if (v10)
  {
    if (*v10 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v10 -= 2;
    }
  }
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void wgpuBindGroupUpdateExternalTextures(uint64_t a1, uint64_t a2)
{
  WebGPU::Device::createExternalTextureFromPixelBuffer((uint64_t)&v53, *(void *)(a1 + 40), *(__CVBuffer **)(a2 + 16));
  id v52 = v53;
  if (v53)
  {
    id v3 = v53;
    uint64_t v4 = v54;
    uint64_t v5 = v54;
    if (v54) {
      goto LABEL_3;
    }
LABEL_6:
    id v6 = *(id *)(*(void *)(a1 + 40) + 296);
    if (!v3) {
      goto LABEL_37;
    }
LABEL_7:
    if (!v6) {
      goto LABEL_37;
    }
    id v51 = *(id *)(a1 + 16);
    id v50 = *(id *)(a1 + 24);
    id v49 = *(id *)(a1 + 32);
    id v48 = *(id *)(*(void *)(a1 + 64) + 24);
    id v7 = *(id *)(*(void *)(a1 + 64) + 32);
    id v8 = *(id *)(*(void *)(a1 + 64) + 40);
    uint64_t v9 = *(void *)(a1 + 120);
    if (v9 == 0x7FFFFFFFFFFFFFFFLL
      || (unint64_t v10 = *(void *)(a1 + 104), v10 >= *(unsigned int *)(a1 + 60))
      || ((unint64_t v11 = *(void *)(a1 + 112),
           uint64_t v12 = *(void *)(a1 + 48) + 48 * v10,
           unint64_t v13 = *(unsigned int *)(v12 + 12),
           unint64_t v14 = v11 + 1,
           v11 < v13)
        ? (BOOL v15 = v14 >= v13)
        : (BOOL v15 = 1),
          v15))
    {
      uint64_t v16 = *(void *)(a1 + 144);
      if (v16 == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_27;
      }
    }
    else
    {
      objc_storeStrong((id *)(*(void *)v12 + 8 * v11), v3);
      if (v10 >= *(unsigned int *)(a1 + 60)) {
        goto LABEL_40;
      }
      uint64_t v29 = *(void *)(a1 + 48) + 48 * v10;
      if (v14 >= *(unsigned int *)(v29 + 12)) {
        goto LABEL_40;
      }
      objc_storeStrong((id *)(*(void *)v29 + 8 * v14), v6);
      id v30 = v48;
      [v30 setArgumentBuffer:v51 offset:0];
      [v30 setTexture:v3 atIndex:v9];
      [v30 setTexture:v6 atIndex:v9 + 1];
      uint64_t v31 = [v30 constantDataAtIndex:v9 + 2];
      *(_OWORD *)uint64_t v31 = v55;
      *(void *)(v31 + 16) = v56;
      unint64_t v32 = (_OWORD *)[v30 constantDataAtIndex:v9 + 3];
      long long v33 = v58;
      *unint64_t v32 = v57;
      v32[1] = v33;
      long long v34 = v60;
      v32[2] = v59;
      v32[3] = v34;

      uint64_t v16 = *(void *)(a1 + 144);
      if (v16 == 0x7FFFFFFFFFFFFFFFLL)
      {
LABEL_27:
        uint64_t v35 = *(void *)(a1 + 168);
        if (v35 == 0x7FFFFFFFFFFFFFFFLL) {
          goto LABEL_36;
        }
        unint64_t v36 = *(void *)(a1 + 152);
        if (v36 >= *(unsigned int *)(a1 + 60)) {
          goto LABEL_36;
        }
        unint64_t v37 = *(void *)(a1 + 160);
        uint64_t v38 = *(void *)(a1 + 48) + 48 * v36;
        unint64_t v39 = *(unsigned int *)(v38 + 12);
        unint64_t v40 = v37 + 1;
        if (v37 >= v39 || v40 >= v39) {
          goto LABEL_36;
        }
        objc_storeStrong((id *)(*(void *)v38 + 8 * v37), v3);
        if (v36 < *(unsigned int *)(a1 + 60))
        {
          uint64_t v42 = *(void *)(a1 + 48) + 48 * v36;
          if (v40 < *(unsigned int *)(v42 + 12))
          {
            objc_storeStrong((id *)(*(void *)v42 + 8 * v40), v6);
            id v43 = v8;
            [v43 setArgumentBuffer:v49 offset:0];
            [v43 setTexture:v3 atIndex:v35];
            [v43 setTexture:v6 atIndex:v35 + 1];
            uint64_t v44 = [v43 constantDataAtIndex:v35 + 2];
            *(_OWORD *)uint64_t v44 = v55;
            *(void *)(v44 + 16) = v56;
            uint64_t v45 = (_OWORD *)[v43 constantDataAtIndex:v35 + 3];
            long long v46 = v58;
            _OWORD *v45 = v57;
            v45[1] = v46;
            long long v47 = v60;
            v45[2] = v59;
            v45[3] = v47;

LABEL_36:
            goto LABEL_37;
          }
        }
LABEL_40:
        __break(0xC471u);
        JUMPOUT(0x1824D1BFCLL);
      }
    }
    unint64_t v17 = *(void *)(a1 + 128);
    if (v17 < *(unsigned int *)(a1 + 60))
    {
      unint64_t v18 = *(void *)(a1 + 136);
      uint64_t v19 = *(void *)(a1 + 48) + 48 * v17;
      unint64_t v20 = *(unsigned int *)(v19 + 12);
      unint64_t v21 = v18 + 1;
      if (v18 < v20 && v21 < v20)
      {
        objc_storeStrong((id *)(*(void *)v19 + 8 * v18), v3);
        if (v17 >= *(unsigned int *)(a1 + 60)) {
          goto LABEL_40;
        }
        uint64_t v23 = *(void *)(a1 + 48) + 48 * v17;
        if (v21 >= *(unsigned int *)(v23 + 12)) {
          goto LABEL_40;
        }
        objc_storeStrong((id *)(*(void *)v23 + 8 * v21), v6);
        id v24 = v7;
        [v24 setArgumentBuffer:v50 offset:0];
        [v24 setTexture:v3 atIndex:v16];
        [v24 setTexture:v6 atIndex:v16 + 1];
        uint64_t v25 = [v24 constantDataAtIndex:v16 + 2];
        *(_OWORD *)uint64_t v25 = v55;
        *(void *)(v25 + 16) = v56;
        uint64_t v26 = (_OWORD *)[v24 constantDataAtIndex:v16 + 3];
        long long v27 = v58;
        *uint64_t v26 = v57;
        v26[1] = v27;
        long long v28 = v60;
        v26[2] = v59;
        v26[3] = v28;
      }
    }
    goto LABEL_27;
  }
  id v3 = *(id *)(*(void *)(a1 + 40) + 296);
  uint64_t v4 = v54;
  uint64_t v5 = v54;
  if (!v54) {
    goto LABEL_6;
  }
LABEL_3:
  id v6 = v5;
  if (v3) {
    goto LABEL_7;
  }
LABEL_37:
}

void sub_1824D1C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, id a16)
{
  _Unwind_Resume(a1);
}

uint64_t *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::HashTable(uint64_t *a1, void *a2)
{
  *a1 = 0;
  if (!*a2) {
    return a1;
  }
  uint64_t v3 = *(unsigned int *)(*a2 - 12);
  if (!v3) {
    return a1;
  }
  unsigned int v5 = (v3 - 1) | ((v3 - 1) >> 1) | (((v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  unsigned int v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  unint64_t v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  if (3 * v7 <= 4 * v3)
  {
LABEL_7:
    LODWORD(v7) = 2 * v7;
    if (v7 <= 0x400) {
      goto LABEL_8;
    }
LABEL_10:
    if ((double)v7 * 0.416666667 > (double)v3) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_8:
  if ((double)v7 * 0.604166667 <= (double)v3) {
LABEL_11:
  }
    LODWORD(v7) = 2 * v7;
LABEL_12:
  if (v7 <= 8) {
    unsigned int v8 = 8;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(4 * v8 + 16));
  memset((void *)(v9 + 16), 255, 4 * v8);
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  unint64_t v10 = (_DWORD *)*a2;
  if (!*a2)
  {
    unint64_t v13 = 0;
    uint64_t v12 = 0;
    goto LABEL_24;
  }
  uint64_t v11 = *(v10 - 1);
  uint64_t v12 = &v10[v11];
  if (*(v10 - 3))
  {
    unint64_t v13 = (_DWORD *)*a2;
    if (v11)
    {
      uint64_t v14 = 4 * v11;
      unint64_t v13 = (_DWORD *)*a2;
      while (*v13 >= 0xFFFFFFFE)
      {
        ++v13;
        v14 -= 4;
        if (!v14)
        {
          unint64_t v13 = v12;
          if (v10) {
            goto LABEL_25;
          }
          goto LABEL_26;
        }
      }
    }
LABEL_24:
    if (!v10) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  unint64_t v13 = &v10[v11];
  uint64_t v12 = v13;
  if (v10) {
LABEL_25:
  }
    v10 += *(v10 - 1);
LABEL_26:
  while (v13 != v10)
  {
    uint64_t v15 = *a1;
    if (*a1) {
      int v16 = *(_DWORD *)(v15 - 8);
    }
    else {
      int v16 = 0;
    }
    int v17 = 0;
    int v18 = *v13;
    unsigned int v19 = 9 * ((v18 + ~(v18 << 15)) ^ ((v18 + ~(v18 << 15)) >> 10));
    unsigned int v20 = ((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) >> 16);
    do
    {
      uint64_t v21 = v20 & v16;
      unsigned int v20 = ++v17 + v21;
    }
    while (*(_DWORD *)(v15 + 4 * v21) != -1);
    *(_DWORD *)(v15 + 4 * v21) = v18;
    id v22 = v13 + 1;
    unint64_t v13 = v12;
    if (v22 != v12)
    {
      unint64_t v13 = v22;
      while (*v13 >= 0xFFFFFFFE)
      {
        if (++v13 == v12)
        {
          unint64_t v13 = v12;
          break;
        }
      }
    }
  }
  return a1;
}

double std::__introsort<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroup(WGPUBindGroupDescriptor const&)::$_0 &,WGPUBindGroupEntry *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 a5)
{
  while (2)
  {
    unint64_t v11 = a2 - 56;
    uint64_t v12 = (long long *)(a2 - 112);
    unint64_t v13 = (long long *)(a2 - 168);
    for (unint64_t i = a1; ; *(__n128 *)(i - 44) = v262)
    {
LABEL_2:
      a1 = i;
      uint64_t v15 = a2 - i;
      uint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2 - i) >> 3);
      if (v6 || !v5)
      {
        switch(v16)
        {
          case 0:
          case 1:
            return a5.n128_f64[0];
          case 2:
            if (*(_DWORD *)(a2 - 48) < *(_DWORD *)(i + 8))
            {
              uint64_t v370 = *(void *)(i + 48);
              long long v317 = *(_OWORD *)(i + 16);
              long long v346 = *(_OWORD *)(i + 32);
              __n128 v286 = *(__n128 *)i;
              a5 = *(__n128 *)(a2 - 56);
              long long v163 = *(_OWORD *)(a2 - 40);
              long long v164 = *(_OWORD *)(a2 - 24);
              *(void *)(i + 48) = *(void *)(a2 - 8);
              *(_OWORD *)(i + 16) = v163;
              *(_OWORD *)(i + 32) = v164;
              *(__n128 *)unint64_t i = a5;
              a5.n128_u64[0] = v286.n128_u64[0];
              *(void *)(a2 - 8) = v370;
              *(_OWORD *)(a2 - 24) = v346;
              *(_OWORD *)(a2 - 40) = v317;
              *(__n128 *)(a2 - 56) = v286;
            }
            return a5.n128_f64[0];
          case 3:
            unint64_t v73 = i + 56;
            unsigned int v165 = *(_DWORD *)(i + 64);
            unsigned int v166 = *(_DWORD *)(a2 - 48);
            if (v165 >= *(_DWORD *)(i + 8))
            {
              if (v166 < v165)
              {
                a5 = *(__n128 *)v73;
                long long v323 = *(_OWORD *)(i + 72);
                long long v238 = *(_OWORD *)(i + 88);
                uint64_t v239 = *(void *)(i + 104);
                uint64_t v240 = *(void *)(a2 - 8);
                long long v242 = *(_OWORD *)(a2 - 40);
                long long v241 = *(_OWORD *)(a2 - 24);
                *(_OWORD *)unint64_t v73 = *(_OWORD *)v11;
                *(_OWORD *)(i + 72) = v242;
                *(_OWORD *)(i + 88) = v241;
                *(void *)(i + 104) = v240;
                *(_OWORD *)(a2 - 40) = v323;
                *(_OWORD *)(a2 - 24) = v238;
                *(void *)(a2 - 8) = v239;
                *(__n128 *)unint64_t v11 = a5;
                if (*(_DWORD *)(i + 64) < *(_DWORD *)(i + 8))
                {
                  uint64_t v373 = *(void *)(i + 48);
                  long long v324 = *(_OWORD *)(i + 16);
                  long long v349 = *(_OWORD *)(i + 32);
                  __n128 v291 = *(__n128 *)i;
                  long long v243 = *(_OWORD *)(i + 72);
                  *(_OWORD *)unint64_t i = *(_OWORD *)v73;
                  *(_OWORD *)(i + 16) = v243;
                  *(_OWORD *)(i + 32) = *(_OWORD *)(i + 88);
                  *(void *)(i + 48) = *(void *)(i + 104);
                  a5.n128_u64[0] = v291.n128_u64[0];
                  *(void *)(i + 104) = v373;
                  *(_OWORD *)(i + 72) = v324;
                  *(_OWORD *)(i + 88) = v349;
                  *(__n128 *)unint64_t v73 = v291;
                }
              }
              return a5.n128_f64[0];
            }
            if (v166 >= v165) {
              goto LABEL_186;
            }
            uint64_t v371 = *(void *)(i + 48);
            long long v318 = *(_OWORD *)(i + 16);
            long long v347 = *(_OWORD *)(i + 32);
            __n128 v287 = *(__n128 *)i;
            long long v167 = *(_OWORD *)v11;
            long long v168 = *(_OWORD *)(a2 - 40);
            long long v169 = *(_OWORD *)(a2 - 24);
            *(void *)(i + 48) = *(void *)(a2 - 8);
            *(_OWORD *)(i + 16) = v168;
            *(_OWORD *)(i + 32) = v169;
            *(_OWORD *)unint64_t i = v167;
LABEL_116:
            a5 = v287;
            long long v170 = v318;
            *(void *)(v11 + 48) = v371;
            *(_OWORD *)(v11 + 32) = v347;
            break;
          case 4:
            a5.n128_u64[0] = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroup(WGPUBindGroupDescriptor const&)::$_0 &,WGPUBindGroupEntry *>((long long *)i, (long long *)(i + 56), (long long *)(i + 112), (long long *)(a2 - 56), a5).n128_u64[0];
            return a5.n128_f64[0];
          case 5:
            unint64_t v11 = i + 56;
            v171 = (__n128 *)(i + 112);
            BOOL v172 = (__n128 *)(i + 168);
            a5.n128_u64[0] = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroup(WGPUBindGroupDescriptor const&)::$_0 &,WGPUBindGroupEntry *>((long long *)i, (long long *)(i + 56), (long long *)(i + 112), (long long *)(i + 168), a5).n128_u64[0];
            if (*(_DWORD *)(a2 - 48) >= *(_DWORD *)(i + 176)) {
              return a5.n128_f64[0];
            }
            a5 = *v172;
            long long v319 = *(_OWORD *)(i + 184);
            long long v173 = *(_OWORD *)(i + 200);
            uint64_t v174 = *(void *)(i + 216);
            uint64_t v175 = *(void *)(a2 - 8);
            long long v176 = *(_OWORD *)(a2 - 24);
            long long v177 = *(_OWORD *)(a2 - 40);
            *BOOL v172 = *(__n128 *)(a2 - 56);
            *(_OWORD *)(i + 184) = v177;
            *(_OWORD *)(i + 200) = v176;
            *(void *)(i + 216) = v175;
            *(_OWORD *)(a2 - 40) = v319;
            *(_OWORD *)(a2 - 24) = v173;
            *(void *)(a2 - 8) = v174;
            *(__n128 *)(a2 - 56) = a5;
            if (*(_DWORD *)(i + 176) >= *(_DWORD *)(i + 120)) {
              return a5.n128_f64[0];
            }
            uint64_t v178 = *(void *)(i + 160);
            long long v179 = *(_OWORD *)(i + 128);
            a5 = *(__n128 *)(i + 144);
            __n128 v180 = *v171;
            long long v181 = *(_OWORD *)(i + 184);
            __n128 *v171 = *v172;
            *(_OWORD *)(i + 128) = v181;
            *(_OWORD *)(i + 144) = *(_OWORD *)(i + 200);
            *(void *)(i + 160) = *(void *)(i + 216);
            *BOOL v172 = v180;
            *(_OWORD *)(i + 184) = v179;
            *(__n128 *)(i + 200) = a5;
            *(void *)(i + 216) = v178;
            if (*(_DWORD *)(i + 120) >= *(_DWORD *)(i + 64)) {
              return a5.n128_f64[0];
            }
            uint64_t v182 = *(void *)(i + 104);
            long long v183 = *(_OWORD *)(i + 72);
            a5 = *(__n128 *)(i + 88);
            __n128 v184 = *(__n128 *)v11;
            long long v185 = *(_OWORD *)(i + 128);
            *(__n128 *)unint64_t v11 = *v171;
            *(_OWORD *)(i + 72) = v185;
            *(_OWORD *)(i + 88) = *(_OWORD *)(i + 144);
            *(void *)(i + 104) = *(void *)(i + 160);
            __n128 *v171 = v184;
            *(_OWORD *)(i + 128) = v183;
            *(__n128 *)(i + 144) = a5;
            *(void *)(i + 160) = v182;
            if (*(_DWORD *)(i + 64) >= *(_DWORD *)(i + 8)) {
              return a5.n128_f64[0];
            }
            uint64_t v371 = *(void *)(i + 48);
            long long v318 = *(_OWORD *)(i + 16);
            long long v347 = *(_OWORD *)(i + 32);
            __n128 v287 = *(__n128 *)i;
            long long v186 = *(_OWORD *)(i + 72);
            *(_OWORD *)unint64_t i = *(_OWORD *)v11;
            *(_OWORD *)(i + 16) = v186;
            *(_OWORD *)(i + 32) = *(_OWORD *)(i + 88);
            *(void *)(i + 48) = *(void *)(i + 104);
            goto LABEL_116;
          default:
            JUMPOUT(0);
        }
LABEL_188:
        *(__n128 *)unint64_t v11 = a5;
        *(_OWORD *)(v11 + 16) = v170;
        return a5.n128_f64[0];
      }
      if (v15 <= 1343)
      {
        unint64_t v73 = i + 56;
        BOOL v188 = i == a2 || v73 == a2;
        if (a4)
        {
          if (!v188)
          {
            uint64_t v189 = 0;
            unsigned int v190 = (void *)i;
            do
            {
              unsigned int v192 = (void *)v73;
              unsigned int v193 = *((_DWORD *)v190 + 16);
              if (v193 < *((_DWORD *)v190 + 2))
              {
                uint64_t v194 = *v192;
                long long v288 = *(_OWORD *)((char *)v190 + 68);
                *(_OWORD *)v320 = *(_OWORD *)((char *)v190 + 84);
                *(_OWORD *)&v320[12] = *((_OWORD *)v190 + 6);
                uint64_t v195 = v189;
                do
                {
                  uint64_t v196 = i + v195;
                  long long v197 = *(_OWORD *)(i + v195 + 16);
                  *(_OWORD *)(v196 + 56) = *(_OWORD *)(i + v195);
                  *(_OWORD *)(v196 + 72) = v197;
                  *(_OWORD *)(v196 + 88) = *(_OWORD *)(i + v195 + 32);
                  *(void *)(v196 + 104) = *(void *)(i + v195 + 48);
                  if (!v195)
                  {
                    uint64_t v191 = i;
                    goto LABEL_135;
                  }
                  v195 -= 56;
                }
                while (v193 < *(_DWORD *)(v196 - 48));
                uint64_t v191 = i + v195 + 56;
LABEL_135:
                *(void *)uint64_t v191 = v194;
                *(_DWORD *)(v191 + 8) = v193;
                a5.n128_u64[0] = v288;
                *(_OWORD *)(v191 + 40) = *(_OWORD *)&v320[12];
                *(_OWORD *)(v191 + 28) = *(_OWORD *)v320;
                *(_OWORD *)(v191 + 12) = v288;
              }
              unint64_t v73 = (unint64_t)(v192 + 7);
              v189 += 56;
              unsigned int v190 = v192;
            }
            while (v192 + 7 != (void *)a2);
          }
        }
        else if (!v188)
        {
          uint64_t v244 = -2;
          uint64_t v245 = 1;
          unint64_t v246 = i;
          do
          {
            unsigned int v247 = *(_DWORD *)(v246 + 64);
            if (v247 < *(_DWORD *)(v246 + 8))
            {
              uint64_t v248 = *(void *)v73;
              long long v292 = *(_OWORD *)(v246 + 68);
              *(_OWORD *)v325 = *(_OWORD *)(v246 + 84);
              *(_OWORD *)&v325[12] = *(_OWORD *)(v246 + 96);
              uint64_t v249 = v244;
              unint64_t v250 = v73;
              do
              {
                long long v251 = *(_OWORD *)(v250 - 40);
                *(_OWORD *)unint64_t v250 = *(_OWORD *)(v250 - 56);
                *(_OWORD *)(v250 + 16) = v251;
                *(_OWORD *)(v250 + 32) = *(_OWORD *)(v250 - 24);
                *(void *)(v250 + 48) = *(void *)(v250 - 8);
                BOOL v5 = __CFADD__(v249++, 1);
                if (v5) {
                  goto LABEL_185;
                }
                unint64_t v252 = v250 - 56;
                unsigned int v253 = *(_DWORD *)(v250 - 104);
                v250 -= 56;
              }
              while (v247 < v253);
              *(void *)unint64_t v252 = v248;
              *(_DWORD *)(v252 + 8) = v247;
              a5.n128_u64[0] = v292;
              *(_OWORD *)(v252 + 40) = *(_OWORD *)&v325[12];
              *(_OWORD *)(v252 + 28) = *(_OWORD *)v325;
              *(_OWORD *)(v252 + 12) = v292;
            }
            unint64_t v246 = i + 56 * v245++;
            v73 += 56;
            --v244;
          }
          while (v73 != a2);
        }
        return a5.n128_f64[0];
      }
      if (!a3)
      {
        if (i != a2)
        {
          int64_t v198 = (unint64_t)(v16 - 2) >> 1;
          int64_t v199 = v198;
          do
          {
            if (v198 >= v199)
            {
              uint64_t v201 = (2 * v199) | 1;
              unint64_t v202 = i + 56 * v201;
              if (2 * v199 + 2 < v16)
              {
                unsigned int v203 = *(_DWORD *)(v202 + 8);
                unsigned int v204 = *(_DWORD *)(v202 + 64);
                v202 += 56 * (v203 < v204);
                if (v203 < v204) {
                  uint64_t v201 = 2 * v199 + 2;
                }
              }
              unint64_t v205 = i + 56 * v199;
              unsigned int v206 = *(_DWORD *)(v205 + 8);
              if (*(_DWORD *)(v202 + 8) >= v206)
              {
                uint64_t v207 = *(void *)v205;
                *(_OWORD *)&v321[12] = *(_OWORD *)(v205 + 40);
                long long v289 = *(_OWORD *)(v205 + 12);
                *(_OWORD *)uint64_t v321 = *(_OWORD *)(v205 + 28);
                do
                {
                  unint64_t v208 = v205;
                  unint64_t v205 = v202;
                  long long v209 = *(_OWORD *)v202;
                  long long v210 = *(_OWORD *)(v202 + 16);
                  long long v211 = *(_OWORD *)(v202 + 32);
                  *(void *)(v208 + 48) = *(void *)(v202 + 48);
                  *(_OWORD *)(v208 + 16) = v210;
                  *(_OWORD *)(v208 + 32) = v211;
                  *(_OWORD *)unint64_t v208 = v209;
                  if (v198 < v201) {
                    break;
                  }
                  uint64_t v212 = (2 * v201) | 1;
                  unint64_t v202 = i + 56 * v212;
                  uint64_t v213 = 2 * v201 + 2;
                  if (v213 < v16)
                  {
                    unsigned int v214 = *(_DWORD *)(v202 + 8);
                    unsigned int v215 = *(_DWORD *)(v202 + 64);
                    v202 += 56 * (v214 < v215);
                    if (v214 < v215) {
                      uint64_t v212 = v213;
                    }
                  }
                  uint64_t v201 = v212;
                }
                while (*(_DWORD *)(v202 + 8) >= v206);
                *(void *)unint64_t v205 = v207;
                *(_DWORD *)(v205 + 8) = v206;
                *(_OWORD *)(v205 + 40) = *(_OWORD *)&v321[12];
                *(_OWORD *)(v205 + 28) = *(_OWORD *)v321;
                *(_OWORD *)(v205 + 12) = v289;
              }
            }
            BOOL v200 = v199-- <= 0;
          }
          while (!v200);
          int64_t v216 = v15 / 0x38uLL;
          do
          {
            uint64_t v217 = 0;
            uint64_t v372 = *(void *)(i + 48);
            long long v322 = *(_OWORD *)(i + 16);
            long long v348 = *(_OWORD *)(i + 32);
            long long v290 = *(_OWORD *)i;
            unint64_t v218 = i;
            do
            {
              uint64_t v222 = v218 + 56 * v217 + 56;
              uint64_t v223 = (2 * v217) | 1;
              uint64_t v224 = 2 * v217 + 2;
              if (v224 < v216)
              {
                unsigned int v225 = *(_DWORD *)(v222 + 8);
                unsigned int v226 = *(_DWORD *)(v222 + 64);
                v222 += 56 * (v225 < v226);
                if (v225 < v226) {
                  uint64_t v223 = v224;
                }
              }
              __n128 v219 = *(__n128 *)v222;
              long long v220 = *(_OWORD *)(v222 + 16);
              long long v221 = *(_OWORD *)(v222 + 32);
              *(void *)(v218 + 48) = *(void *)(v222 + 48);
              *(_OWORD *)(v218 + 16) = v220;
              *(_OWORD *)(v218 + 32) = v221;
              *(__n128 *)unint64_t v218 = v219;
              unint64_t v218 = v222;
              uint64_t v217 = v223;
            }
            while (v223 <= (uint64_t)((unint64_t)(v216 - 2) >> 1));
            a2 -= 56;
            if (v222 == a2)
            {
              a5.n128_u64[0] = v290;
              *(void *)(v222 + 48) = v372;
              *(_OWORD *)(v222 + 16) = v322;
              *(_OWORD *)(v222 + 32) = v348;
              *(_OWORD *)uint64_t v222 = v290;
            }
            else
            {
              a5 = *(__n128 *)a2;
              long long v227 = *(_OWORD *)(a2 + 16);
              long long v228 = *(_OWORD *)(a2 + 32);
              *(void *)(v222 + 48) = *(void *)(a2 + 48);
              *(_OWORD *)(v222 + 16) = v227;
              *(_OWORD *)(v222 + 32) = v228;
              *(__n128 *)uint64_t v222 = a5;
              a5.n128_u64[0] = v290;
              *(void *)(a2 + 48) = v372;
              *(_OWORD *)(a2 + 16) = v322;
              *(_OWORD *)(a2 + 32) = v348;
              *(_OWORD *)a2 = v290;
              uint64_t v229 = v222 - i + 56;
              if (v229 >= 57)
              {
                unint64_t v230 = (v229 / 0x38uLL - 2) >> 1;
                uint64_t v231 = i + 56 * v230;
                unsigned int v232 = *(_DWORD *)(v222 + 8);
                if (*(_DWORD *)(v231 + 8) < v232)
                {
                  uint64_t v233 = *(void *)v222;
                  *(_OWORD *)&v266[12] = *(_OWORD *)(v222 + 40);
                  long long v263 = *(_OWORD *)(v222 + 12);
                  *(_OWORD *)v266 = *(_OWORD *)(v222 + 28);
                  do
                  {
                    uint64_t v234 = v222;
                    uint64_t v222 = v231;
                    long long v235 = *(_OWORD *)v231;
                    long long v236 = *(_OWORD *)(v231 + 16);
                    long long v237 = *(_OWORD *)(v231 + 32);
                    *(void *)(v234 + 48) = *(void *)(v231 + 48);
                    *(_OWORD *)(v234 + 16) = v236;
                    *(_OWORD *)(v234 + 32) = v237;
                    *(_OWORD *)uint64_t v234 = v235;
                    if (!v230) {
                      break;
                    }
                    unint64_t v230 = (v230 - 1) >> 1;
                    uint64_t v231 = i + 56 * v230;
                  }
                  while (*(_DWORD *)(v231 + 8) < v232);
                  *(void *)uint64_t v222 = v233;
                  *(_DWORD *)(v222 + 8) = v232;
                  a5.n128_u64[0] = v263;
                  *(_OWORD *)(v222 + 40) = *(_OWORD *)&v266[12];
                  *(_OWORD *)(v222 + 28) = *(_OWORD *)v266;
                  *(_OWORD *)(v222 + 12) = v263;
                }
              }
            }
            BOOL v200 = v216-- <= 2;
          }
          while (!v200);
        }
        return a5.n128_f64[0];
      }
      unint64_t v17 = (unint64_t)v16 >> 1;
      unint64_t v18 = i + 56 * ((unint64_t)v16 >> 1);
      unsigned int v19 = *(_DWORD *)(a2 - 48);
      if ((unint64_t)v15 >= 0x1C01) {
        break;
      }
      unsigned int v24 = *(_DWORD *)(i + 8);
      if (v24 >= *(_DWORD *)(v18 + 8))
      {
        if (v19 < v24)
        {
          uint64_t v355 = *(void *)(i + 48);
          long long v298 = *(_OWORD *)(i + 16);
          long long v331 = *(_OWORD *)(i + 32);
          long long v271 = *(_OWORD *)i;
          __n128 v34 = *(__n128 *)v11;
          long long v35 = *(_OWORD *)(a2 - 40);
          long long v36 = *(_OWORD *)(a2 - 24);
          *(void *)(i + 48) = *(void *)(a2 - 8);
          *(_OWORD *)(i + 16) = v35;
          *(_OWORD *)(i + 32) = v36;
          *(__n128 *)unint64_t i = v34;
          *(void *)(a2 - 8) = v355;
          *(_OWORD *)(a2 - 40) = v298;
          *(_OWORD *)(a2 - 24) = v331;
          *(_OWORD *)unint64_t v11 = v271;
          if (*(_DWORD *)(i + 8) < *(_DWORD *)(v18 + 8))
          {
            uint64_t v356 = *(void *)(v18 + 48);
            long long v299 = *(_OWORD *)(v18 + 16);
            long long v332 = *(_OWORD *)(v18 + 32);
            long long v272 = *(_OWORD *)v18;
            long long v37 = *(_OWORD *)i;
            long long v38 = *(_OWORD *)(i + 16);
            long long v39 = *(_OWORD *)(i + 32);
            *(void *)(v18 + 48) = *(void *)(i + 48);
            *(_OWORD *)(v18 + 16) = v38;
            *(_OWORD *)(v18 + 32) = v39;
            *(_OWORD *)unint64_t v18 = v37;
            *(void *)(i + 48) = v356;
            *(_OWORD *)(i + 16) = v299;
            *(_OWORD *)(i + 32) = v332;
            *(_OWORD *)unint64_t i = v272;
            --a3;
            if (a4) {
              goto LABEL_33;
            }
            goto LABEL_56;
          }
        }
      }
      else
      {
        if (v19 >= v24)
        {
          uint64_t v359 = *(void *)(v18 + 48);
          long long v303 = *(_OWORD *)(v18 + 16);
          long long v335 = *(_OWORD *)(v18 + 32);
          long long v275 = *(_OWORD *)v18;
          long long v67 = *(_OWORD *)i;
          long long v68 = *(_OWORD *)(i + 16);
          long long v69 = *(_OWORD *)(i + 32);
          *(void *)(v18 + 48) = *(void *)(i + 48);
          *(_OWORD *)(v18 + 16) = v68;
          *(_OWORD *)(v18 + 32) = v69;
          *(_OWORD *)unint64_t v18 = v67;
          *(void *)(i + 48) = v359;
          *(_OWORD *)(i + 16) = v303;
          *(_OWORD *)(i + 32) = v335;
          *(_OWORD *)unint64_t i = v275;
          if (*(_DWORD *)(a2 - 48) >= *(_DWORD *)(i + 8)) {
            goto LABEL_32;
          }
          uint64_t v352 = *(void *)(i + 48);
          long long v295 = *(_OWORD *)(i + 16);
          long long v328 = *(_OWORD *)(i + 32);
          long long v268 = *(_OWORD *)i;
          __n128 v70 = *(__n128 *)v11;
          long long v71 = *(_OWORD *)(a2 - 40);
          long long v72 = *(_OWORD *)(a2 - 24);
          *(void *)(i + 48) = *(void *)(a2 - 8);
          *(_OWORD *)(i + 16) = v71;
          *(_OWORD *)(i + 32) = v72;
          *(__n128 *)unint64_t i = v70;
        }
        else
        {
          uint64_t v352 = *(void *)(v18 + 48);
          long long v295 = *(_OWORD *)(v18 + 16);
          long long v328 = *(_OWORD *)(v18 + 32);
          long long v268 = *(_OWORD *)v18;
          __n128 v25 = *(__n128 *)v11;
          long long v26 = *(_OWORD *)(a2 - 40);
          long long v27 = *(_OWORD *)(a2 - 24);
          *(void *)(v18 + 48) = *(void *)(a2 - 8);
          *(_OWORD *)(v18 + 16) = v26;
          *(_OWORD *)(v18 + 32) = v27;
          *(__n128 *)unint64_t v18 = v25;
        }
        *(void *)(a2 - 8) = v352;
        *(_OWORD *)(a2 - 40) = v295;
        *(_OWORD *)(a2 - 24) = v328;
        *(_OWORD *)unint64_t v11 = v268;
      }
LABEL_32:
      --a3;
      if (a4) {
        goto LABEL_33;
      }
LABEL_56:
      unint64_t v73 = *(unsigned int *)(i + 8);
      if (*(_DWORD *)(i - 48) < v73) {
        goto LABEL_57;
      }
      uint64_t v145 = *(void *)i;
      *(_OWORD *)&v265[12] = *(_OWORD *)(i + 40);
      __n128 v262 = *(__n128 *)(i + 12);
      *(_OWORD *)v265 = *(_OWORD *)(i + 28);
      if (v73 >= *(_DWORD *)(a2 - 48))
      {
        unint64_t v148 = i + 56;
        do
        {
          unint64_t i = v148;
          if (v148 >= a2) {
            break;
          }
          unsigned int v149 = *(_DWORD *)(v148 + 8);
          v148 += 56;
        }
        while (v73 >= v149);
      }
      else
      {
        unint64_t v146 = i + 56;
        do
        {
          if (v146 == a2) {
            goto LABEL_185;
          }
          unsigned int v147 = *(_DWORD *)(v146 + 8);
          v146 += 56;
        }
        while (v73 >= v147);
        unint64_t i = v146 - 56;
      }
      unint64_t v150 = a2;
      if (i < a2)
      {
        unint64_t v151 = a2;
        do
        {
          if (v151 == a1) {
            goto LABEL_185;
          }
          unint64_t v150 = v151 - 56;
          unsigned int v152 = *(_DWORD *)(v151 - 48);
          v151 -= 56;
        }
        while (v73 < v152);
      }
      if (i < v150)
      {
        do
        {
          uint64_t v369 = *(void *)(i + 48);
          long long v316 = *(_OWORD *)(i + 16);
          long long v345 = *(_OWORD *)(i + 32);
          long long v285 = *(_OWORD *)i;
          long long v153 = *(_OWORD *)v150;
          long long v154 = *(_OWORD *)(v150 + 16);
          long long v155 = *(_OWORD *)(v150 + 32);
          *(void *)(i + 48) = *(void *)(v150 + 48);
          *(_OWORD *)(i + 16) = v154;
          *(_OWORD *)(i + 32) = v155;
          *(_OWORD *)unint64_t i = v153;
          *(void *)(v150 + 48) = v369;
          *(_OWORD *)(v150 + 16) = v316;
          *(_OWORD *)(v150 + 32) = v345;
          *(_OWORD *)unint64_t v150 = v285;
          unint64_t v156 = i + 56;
          do
          {
            if (v156 == a2) {
              goto LABEL_185;
            }
            unsigned int v157 = *(_DWORD *)(v156 + 8);
            v156 += 56;
          }
          while (v73 >= v157);
          unint64_t i = v156 - 56;
          do
          {
            if (v150 == a1) {
              goto LABEL_185;
            }
            unint64_t v158 = v150 - 56;
            unsigned int v159 = *(_DWORD *)(v150 - 48);
            v150 -= 56;
          }
          while (v73 < v159);
          unint64_t v150 = v158;
        }
        while (i < v158);
      }
      BOOL v5 = i - 56 >= a1;
      BOOL v6 = i - 56 == a1;
      if (i - 56 != a1)
      {
        long long v160 = *(_OWORD *)(i - 56);
        long long v161 = *(_OWORD *)(i - 40);
        long long v162 = *(_OWORD *)(i - 24);
        *(void *)(a1 + 48) = *(void *)(i - 8);
        *(_OWORD *)(a1 + 16) = v161;
        *(_OWORD *)(a1 + 32) = v162;
        *(_OWORD *)a1 = v160;
      }
      a4 = 0;
      *(void *)(i - 56) = v145;
      *(_DWORD *)(i - 48) = v73;
      a5 = v262;
      *(_OWORD *)(i - 16) = *(_OWORD *)&v265[12];
      *(_OWORD *)(i - 28) = *(_OWORD *)v265;
    }
    unsigned int v20 = *(_DWORD *)(v18 + 8);
    if (v20 >= *(_DWORD *)(i + 8))
    {
      if (v19 < v20)
      {
        uint64_t v353 = *(void *)(v18 + 48);
        long long v296 = *(_OWORD *)(v18 + 16);
        long long v329 = *(_OWORD *)(v18 + 32);
        long long v269 = *(_OWORD *)v18;
        __n128 v28 = *(__n128 *)v11;
        long long v29 = *(_OWORD *)(a2 - 40);
        long long v30 = *(_OWORD *)(a2 - 24);
        *(void *)(v18 + 48) = *(void *)(a2 - 8);
        *(_OWORD *)(v18 + 16) = v29;
        *(_OWORD *)(v18 + 32) = v30;
        *(__n128 *)unint64_t v18 = v28;
        *(void *)(a2 - 8) = v353;
        *(_OWORD *)(a2 - 40) = v296;
        *(_OWORD *)(a2 - 24) = v329;
        *(_OWORD *)unint64_t v11 = v269;
        if (*(_DWORD *)(v18 + 8) < *(_DWORD *)(i + 8))
        {
          uint64_t v354 = *(void *)(i + 48);
          long long v297 = *(_OWORD *)(i + 16);
          long long v330 = *(_OWORD *)(i + 32);
          long long v270 = *(_OWORD *)i;
          long long v31 = *(_OWORD *)v18;
          long long v32 = *(_OWORD *)(v18 + 16);
          long long v33 = *(_OWORD *)(v18 + 32);
          *(void *)(i + 48) = *(void *)(v18 + 48);
          *(_OWORD *)(i + 16) = v32;
          *(_OWORD *)(i + 32) = v33;
          *(_OWORD *)unint64_t i = v31;
          *(void *)(v18 + 48) = v354;
          *(_OWORD *)(v18 + 16) = v297;
          *(_OWORD *)(v18 + 32) = v330;
          *(_OWORD *)unint64_t v18 = v270;
        }
      }
    }
    else
    {
      if (v19 < v20)
      {
        uint64_t v351 = *(void *)(i + 48);
        long long v294 = *(_OWORD *)(i + 16);
        long long v327 = *(_OWORD *)(i + 32);
        long long v267 = *(_OWORD *)i;
        __n128 v21 = *(__n128 *)v11;
        long long v22 = *(_OWORD *)(a2 - 40);
        long long v23 = *(_OWORD *)(a2 - 24);
        *(void *)(i + 48) = *(void *)(a2 - 8);
        *(_OWORD *)(i + 16) = v22;
        *(_OWORD *)(i + 32) = v23;
        *(__n128 *)unint64_t i = v21;
        goto LABEL_22;
      }
      uint64_t v357 = *(void *)(i + 48);
      long long v300 = *(_OWORD *)(i + 16);
      long long v333 = *(_OWORD *)(i + 32);
      long long v273 = *(_OWORD *)i;
      long long v40 = *(_OWORD *)v18;
      long long v41 = *(_OWORD *)(v18 + 16);
      long long v42 = *(_OWORD *)(v18 + 32);
      *(void *)(i + 48) = *(void *)(v18 + 48);
      *(_OWORD *)(i + 16) = v41;
      *(_OWORD *)(i + 32) = v42;
      *(_OWORD *)unint64_t i = v40;
      *(void *)(v18 + 48) = v357;
      *(_OWORD *)(v18 + 16) = v300;
      *(_OWORD *)(v18 + 32) = v333;
      *(_OWORD *)unint64_t v18 = v273;
      if (*(_DWORD *)(a2 - 48) < *(_DWORD *)(v18 + 8))
      {
        uint64_t v351 = *(void *)(v18 + 48);
        long long v294 = *(_OWORD *)(v18 + 16);
        long long v327 = *(_OWORD *)(v18 + 32);
        long long v267 = *(_OWORD *)v18;
        __n128 v43 = *(__n128 *)v11;
        long long v44 = *(_OWORD *)(a2 - 40);
        long long v45 = *(_OWORD *)(a2 - 24);
        *(void *)(v18 + 48) = *(void *)(a2 - 8);
        *(_OWORD *)(v18 + 16) = v44;
        *(_OWORD *)(v18 + 32) = v45;
        *(__n128 *)unint64_t v18 = v43;
LABEL_22:
        *(void *)(a2 - 8) = v351;
        *(_OWORD *)(a2 - 40) = v294;
        *(_OWORD *)(a2 - 24) = v327;
        *(_OWORD *)unint64_t v11 = v267;
      }
    }
    long long v46 = (long long *)(i + 56);
    unint64_t v47 = i + 56 * v17;
    unint64_t v48 = v47 - 56;
    unsigned int v49 = *(_DWORD *)(v47 - 48);
    unsigned int v50 = *(_DWORD *)(a2 - 104);
    if (v49 >= *(_DWORD *)(i + 64))
    {
      if (v50 < v49)
      {
        uint64_t v358 = *(void *)(v48 + 48);
        long long v301 = *(_OWORD *)(v48 + 16);
        long long v334 = *(_OWORD *)(v48 + 32);
        long long v274 = *(_OWORD *)v48;
        long long v58 = *v12;
        long long v59 = *(_OWORD *)(a2 - 96);
        long long v60 = *(_OWORD *)(a2 - 80);
        *(void *)(v48 + 48) = *(void *)(a2 - 64);
        *(_OWORD *)(v48 + 16) = v59;
        *(_OWORD *)(v48 + 32) = v60;
        *(_OWORD *)unint64_t v48 = v58;
        *(void *)(a2 - 64) = v358;
        *(_OWORD *)(a2 - 96) = v301;
        *(_OWORD *)(a2 - 80) = v334;
        *uint64_t v12 = v274;
        if (*(_DWORD *)(v48 + 8) < *(_DWORD *)(i + 64))
        {
          long long v61 = *v46;
          long long v302 = *(_OWORD *)(i + 72);
          long long v62 = *(_OWORD *)(i + 88);
          uint64_t v63 = *(void *)(i + 104);
          uint64_t v64 = *(void *)(v48 + 48);
          long long v66 = *(_OWORD *)(v48 + 16);
          long long v65 = *(_OWORD *)(v48 + 32);
          *long long v46 = *(_OWORD *)v48;
          *(_OWORD *)(i + 72) = v66;
          *(_OWORD *)(i + 88) = v65;
          *(void *)(i + 104) = v64;
          *(_OWORD *)(v48 + 16) = v302;
          *(_OWORD *)(v48 + 32) = v62;
          *(void *)(v48 + 48) = v63;
          *(_OWORD *)unint64_t v48 = v61;
        }
      }
    }
    else
    {
      if (v50 < v49)
      {
        long long v51 = *v46;
        long long v52 = *(_OWORD *)(i + 72);
        long long v53 = *(_OWORD *)(i + 88);
        uint64_t v54 = *(void *)(i + 104);
        uint64_t v55 = *(void *)(a2 - 64);
        long long v57 = *(_OWORD *)(a2 - 96);
        long long v56 = *(_OWORD *)(a2 - 80);
        *long long v46 = *v12;
        *(_OWORD *)(i + 72) = v57;
        *(_OWORD *)(i + 88) = v56;
        *(void *)(i + 104) = v55;
        *(_OWORD *)(a2 - 80) = v53;
        *(void *)(a2 - 64) = v54;
        goto LABEL_36;
      }
      long long v74 = *v46;
      long long v304 = *(_OWORD *)(i + 72);
      long long v75 = *(_OWORD *)(i + 88);
      uint64_t v76 = *(void *)(i + 104);
      uint64_t v77 = *(void *)(v48 + 48);
      long long v79 = *(_OWORD *)(v48 + 16);
      long long v78 = *(_OWORD *)(v48 + 32);
      *long long v46 = *(_OWORD *)v48;
      *(_OWORD *)(i + 72) = v79;
      *(_OWORD *)(i + 88) = v78;
      *(void *)(i + 104) = v77;
      *(_OWORD *)(v48 + 16) = v304;
      *(_OWORD *)(v48 + 32) = v75;
      *(void *)(v48 + 48) = v76;
      *(_OWORD *)unint64_t v48 = v74;
      if (*(_DWORD *)(a2 - 104) < *(_DWORD *)(v48 + 8))
      {
        uint64_t v360 = *(void *)(v48 + 48);
        long long v305 = *(_OWORD *)(v48 + 16);
        long long v336 = *(_OWORD *)(v48 + 32);
        long long v276 = *(_OWORD *)v48;
        long long v80 = *v12;
        long long v81 = *(_OWORD *)(a2 - 96);
        long long v82 = *(_OWORD *)(a2 - 80);
        *(void *)(v48 + 48) = *(void *)(a2 - 64);
        *(_OWORD *)(v48 + 16) = v81;
        *(_OWORD *)(v48 + 32) = v82;
        *(_OWORD *)unint64_t v48 = v80;
        long long v51 = v276;
        long long v52 = v305;
        *(void *)(a2 - 64) = v360;
        *(_OWORD *)(a2 - 80) = v336;
LABEL_36:
        *uint64_t v12 = v51;
        *(_OWORD *)(a2 - 96) = v52;
      }
    }
    unsigned int v83 = (long long *)(i + 112);
    unint64_t v84 = i + 56 * v17;
    unint64_t v85 = v84 + 56;
    unsigned int v86 = *(_DWORD *)(v84 + 64);
    unsigned int v87 = *(_DWORD *)(a2 - 160);
    if (v86 >= *(_DWORD *)(i + 120))
    {
      if (v87 < v86)
      {
        uint64_t v361 = *(void *)(v85 + 48);
        long long v306 = *(_OWORD *)(v85 + 16);
        long long v337 = *(_OWORD *)(v85 + 32);
        long long v277 = *(_OWORD *)v85;
        long long v95 = *v13;
        long long v96 = *(_OWORD *)(a2 - 152);
        long long v97 = *(_OWORD *)(a2 - 136);
        *(void *)(v85 + 48) = *(void *)(a2 - 120);
        *(_OWORD *)(v85 + 16) = v96;
        *(_OWORD *)(v85 + 32) = v97;
        *(_OWORD *)unint64_t v85 = v95;
        *(void *)(a2 - 120) = v361;
        *(_OWORD *)(a2 - 152) = v306;
        *(_OWORD *)(a2 - 136) = v337;
        *unint64_t v13 = v277;
        if (*(_DWORD *)(v85 + 8) < *(_DWORD *)(i + 120))
        {
          long long v98 = *v83;
          long long v307 = *(_OWORD *)(i + 128);
          long long v99 = *(_OWORD *)(i + 144);
          uint64_t v100 = *(void *)(i + 160);
          uint64_t v101 = *(void *)(v85 + 48);
          long long v103 = *(_OWORD *)(v85 + 16);
          long long v102 = *(_OWORD *)(v85 + 32);
          *unsigned int v83 = *(_OWORD *)v85;
          *(_OWORD *)(i + 128) = v103;
          *(_OWORD *)(i + 144) = v102;
          *(void *)(i + 160) = v101;
          *(_OWORD *)(v85 + 16) = v307;
          *(_OWORD *)(v85 + 32) = v99;
          *(void *)(v85 + 48) = v100;
          *(_OWORD *)unint64_t v85 = v98;
        }
      }
    }
    else
    {
      if (v87 < v86)
      {
        long long v88 = *v83;
        long long v89 = *(_OWORD *)(i + 128);
        long long v90 = *(_OWORD *)(i + 144);
        uint64_t v91 = *(void *)(i + 160);
        uint64_t v92 = *(void *)(a2 - 120);
        long long v94 = *(_OWORD *)(a2 - 152);
        long long v93 = *(_OWORD *)(a2 - 136);
        *unsigned int v83 = *v13;
        *(_OWORD *)(i + 128) = v94;
        *(_OWORD *)(i + 144) = v93;
        *(void *)(i + 160) = v92;
        *(_OWORD *)(a2 - 136) = v90;
        *(void *)(a2 - 120) = v91;
        goto LABEL_45;
      }
      long long v104 = *v83;
      long long v308 = *(_OWORD *)(i + 128);
      long long v105 = *(_OWORD *)(i + 144);
      uint64_t v106 = *(void *)(i + 160);
      uint64_t v107 = *(void *)(v85 + 48);
      long long v109 = *(_OWORD *)(v85 + 16);
      long long v108 = *(_OWORD *)(v85 + 32);
      *unsigned int v83 = *(_OWORD *)v85;
      *(_OWORD *)(i + 128) = v109;
      *(_OWORD *)(i + 144) = v108;
      *(void *)(i + 160) = v107;
      *(_OWORD *)(v85 + 16) = v308;
      *(_OWORD *)(v85 + 32) = v105;
      *(void *)(v85 + 48) = v106;
      *(_OWORD *)unint64_t v85 = v104;
      if (*(_DWORD *)(a2 - 160) < *(_DWORD *)(v85 + 8))
      {
        uint64_t v362 = *(void *)(v85 + 48);
        long long v309 = *(_OWORD *)(v85 + 16);
        long long v338 = *(_OWORD *)(v85 + 32);
        long long v278 = *(_OWORD *)v85;
        long long v110 = *v13;
        long long v111 = *(_OWORD *)(a2 - 152);
        long long v112 = *(_OWORD *)(a2 - 136);
        *(void *)(v85 + 48) = *(void *)(a2 - 120);
        *(_OWORD *)(v85 + 16) = v111;
        *(_OWORD *)(v85 + 32) = v112;
        *(_OWORD *)unint64_t v85 = v110;
        long long v88 = v278;
        long long v89 = v309;
        *(void *)(a2 - 120) = v362;
        *(_OWORD *)(a2 - 136) = v338;
LABEL_45:
        *unint64_t v13 = v88;
        *(_OWORD *)(a2 - 152) = v89;
      }
    }
    unsigned int v113 = *(_DWORD *)(v18 + 8);
    unsigned int v114 = *(_DWORD *)(v85 + 8);
    if (v113 >= *(_DWORD *)(v48 + 8))
    {
      if (v114 < v113)
      {
        uint64_t v364 = *(void *)(v18 + 48);
        long long v311 = *(_OWORD *)(v18 + 16);
        long long v340 = *(_OWORD *)(v18 + 32);
        long long v280 = *(_OWORD *)v18;
        long long v116 = *(_OWORD *)(v85 + 16);
        *(_OWORD *)unint64_t v18 = *(_OWORD *)v85;
        *(_OWORD *)(v18 + 16) = v116;
        *(_OWORD *)(v18 + 32) = *(_OWORD *)(v85 + 32);
        *(void *)(v18 + 48) = *(void *)(v85 + 48);
        *(_OWORD *)(v85 + 16) = v311;
        *(_OWORD *)(v85 + 32) = v340;
        *(void *)(v85 + 48) = v364;
        *(_OWORD *)unint64_t v85 = v280;
        if (*(_DWORD *)(v18 + 8) < *(_DWORD *)(v48 + 8))
        {
          uint64_t v365 = *(void *)(v48 + 48);
          long long v312 = *(_OWORD *)(v48 + 16);
          long long v341 = *(_OWORD *)(v48 + 32);
          long long v281 = *(_OWORD *)v48;
          long long v117 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)unint64_t v48 = *(_OWORD *)v18;
          *(_OWORD *)(v48 + 16) = v117;
          *(_OWORD *)(v48 + 32) = *(_OWORD *)(v18 + 32);
          *(void *)(v48 + 48) = *(void *)(v18 + 48);
          *(_OWORD *)(v18 + 16) = v312;
          *(_OWORD *)(v18 + 32) = v341;
          *(void *)(v18 + 48) = v365;
          *(_OWORD *)unint64_t v18 = v281;
        }
      }
    }
    else
    {
      if (v114 < v113)
      {
        uint64_t v363 = *(void *)(v48 + 48);
        long long v310 = *(_OWORD *)(v48 + 16);
        long long v339 = *(_OWORD *)(v48 + 32);
        long long v279 = *(_OWORD *)v48;
        long long v115 = *(_OWORD *)(v85 + 16);
        *(_OWORD *)unint64_t v48 = *(_OWORD *)v85;
        *(_OWORD *)(v48 + 16) = v115;
        *(_OWORD *)(v48 + 32) = *(_OWORD *)(v85 + 32);
        *(void *)(v48 + 48) = *(void *)(v85 + 48);
        goto LABEL_54;
      }
      uint64_t v366 = *(void *)(v48 + 48);
      long long v313 = *(_OWORD *)(v48 + 16);
      long long v342 = *(_OWORD *)(v48 + 32);
      long long v282 = *(_OWORD *)v48;
      long long v118 = *(_OWORD *)(v18 + 16);
      *(_OWORD *)unint64_t v48 = *(_OWORD *)v18;
      *(_OWORD *)(v48 + 16) = v118;
      *(_OWORD *)(v48 + 32) = *(_OWORD *)(v18 + 32);
      *(void *)(v48 + 48) = *(void *)(v18 + 48);
      *(_OWORD *)(v18 + 16) = v313;
      *(_OWORD *)(v18 + 32) = v342;
      *(void *)(v18 + 48) = v366;
      *(_OWORD *)unint64_t v18 = v282;
      if (*(_DWORD *)(v85 + 8) < *(_DWORD *)(v18 + 8))
      {
        uint64_t v363 = *(void *)(v18 + 48);
        long long v310 = *(_OWORD *)(v18 + 16);
        long long v339 = *(_OWORD *)(v18 + 32);
        long long v279 = *(_OWORD *)v18;
        long long v119 = *(_OWORD *)(v85 + 16);
        *(_OWORD *)unint64_t v18 = *(_OWORD *)v85;
        *(_OWORD *)(v18 + 16) = v119;
        *(_OWORD *)(v18 + 32) = *(_OWORD *)(v85 + 32);
        *(void *)(v18 + 48) = *(void *)(v85 + 48);
LABEL_54:
        *(_OWORD *)(v85 + 16) = v310;
        *(_OWORD *)(v85 + 32) = v339;
        *(void *)(v85 + 48) = v363;
        *(_OWORD *)unint64_t v85 = v279;
      }
    }
    uint64_t v367 = *(void *)(i + 48);
    long long v314 = *(_OWORD *)(i + 16);
    long long v343 = *(_OWORD *)(i + 32);
    long long v283 = *(_OWORD *)i;
    long long v120 = *(_OWORD *)v18;
    long long v121 = *(_OWORD *)(v18 + 16);
    long long v122 = *(_OWORD *)(v18 + 32);
    *(void *)(i + 48) = *(void *)(v18 + 48);
    *(_OWORD *)(i + 16) = v121;
    *(_OWORD *)(i + 32) = v122;
    *(_OWORD *)unint64_t i = v120;
    *(void *)(v18 + 48) = v367;
    *(_OWORD *)(v18 + 16) = v314;
    *(_OWORD *)(v18 + 32) = v343;
    *(_OWORD *)unint64_t v18 = v283;
    --a3;
    if ((a4 & 1) == 0) {
      goto LABEL_56;
    }
LABEL_33:
    unint64_t v73 = *(unsigned int *)(i + 8);
LABEL_57:
    uint64_t v123 = 0;
    uint64_t v124 = *(void *)i;
    *(_OWORD *)&v264[12] = *(_OWORD *)(i + 40);
    __n128 v261 = *(__n128 *)(i + 12);
    *(_OWORD *)v264 = *(_OWORD *)(i + 28);
    do
    {
      if (i + v123 + 56 == a2) {
        goto LABEL_185;
      }
      unsigned int v125 = *(_DWORD *)(i + v123 + 64);
      v123 += 56;
    }
    while (v125 < v73);
    unint64_t v126 = i + v123;
    unint64_t v127 = a2;
    if (v123 == 56)
    {
      unint64_t v130 = a2;
      do
      {
        if (v126 >= v130)
        {
          unint64_t v128 = v130;
          unint64_t i = v126;
          goto LABEL_78;
        }
        unint64_t v128 = v130 - 56;
        unsigned int v131 = *(_DWORD *)(v130 - 48);
        v130 -= 56;
      }
      while (v131 >= v73);
LABEL_67:
      unint64_t i = v126;
      if (v126 < v128)
      {
        unint64_t v132 = v128;
LABEL_69:
        uint64_t v368 = *(void *)(i + 48);
        long long v315 = *(_OWORD *)(i + 16);
        long long v344 = *(_OWORD *)(i + 32);
        long long v284 = *(_OWORD *)i;
        long long v133 = *(_OWORD *)v132;
        long long v134 = *(_OWORD *)(v132 + 16);
        long long v135 = *(_OWORD *)(v132 + 32);
        *(void *)(i + 48) = *(void *)(v132 + 48);
        *(_OWORD *)(i + 16) = v134;
        *(_OWORD *)(i + 32) = v135;
        *(_OWORD *)unint64_t i = v133;
        *(void *)(v132 + 48) = v368;
        *(_OWORD *)(v132 + 16) = v315;
        *(_OWORD *)(v132 + 32) = v344;
        *(_OWORD *)unint64_t v132 = v284;
        unint64_t v136 = i + 56;
        while (v136 != a2)
        {
          unsigned int v137 = *(_DWORD *)(v136 + 8);
          v136 += 56;
          if (v137 >= v73)
          {
            unint64_t i = v136 - 56;
            while (v132 != a1)
            {
              unint64_t v138 = v132 - 56;
              unsigned int v139 = *(_DWORD *)(v132 - 48);
              v132 -= 56;
              if (v139 < v73)
              {
                unint64_t v132 = v138;
                if (i < v138) {
                  goto LABEL_69;
                }
                goto LABEL_78;
              }
            }
            goto LABEL_185;
          }
        }
        goto LABEL_185;
      }
LABEL_78:
      if (i - 56 != a1)
      {
        long long v140 = *(_OWORD *)(i - 56);
        long long v141 = *(_OWORD *)(i - 40);
        long long v142 = *(_OWORD *)(i - 24);
        *(void *)(a1 + 48) = *(void *)(i - 8);
        *(_OWORD *)(a1 + 16) = v141;
        *(_OWORD *)(a1 + 32) = v142;
        *(_OWORD *)a1 = v140;
      }
      *(void *)(i - 56) = v124;
      *(_DWORD *)(i - 48) = v73;
      *(_OWORD *)(i - 16) = *(_OWORD *)&v264[12];
      *(_OWORD *)(i - 28) = *(_OWORD *)v264;
      *(__n128 *)(i - 44) = v261;
      if (v126 >= v128)
      {
        BOOL v143 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroup(WGPUBindGroupDescriptor const&)::$_0 &,WGPUBindGroupEntry *>(a1, i - 56, v261);
        if (std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroup(WGPUBindGroupDescriptor const&)::$_0 &,WGPUBindGroupEntry *>(i, a2, v144))
        {
          a2 = i - 56;
          if (v143) {
            return a5.n128_f64[0];
          }
          continue;
        }
        if (v143) {
          goto LABEL_2;
        }
      }
      std::__introsort<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroup(WGPUBindGroupDescriptor const&)::$_0 &,WGPUBindGroupEntry *,false>(a1, i - 56, a3, a4 & 1);
      a4 = 0;
      goto LABEL_2;
    }
    break;
  }
  while (v127 != i)
  {
    unint64_t v128 = v127 - 56;
    unsigned int v129 = *(_DWORD *)(v127 - 48);
    v127 -= 56;
    if (v129 < v73) {
      goto LABEL_67;
    }
  }
LABEL_185:
  __break(1u);
LABEL_186:
  uint64_t v374 = *(void *)(a1 + 48);
  long long v326 = *(_OWORD *)(a1 + 16);
  long long v350 = *(_OWORD *)(a1 + 32);
  long long v293 = *(_OWORD *)a1;
  long long v254 = *(_OWORD *)(v73 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v73;
  *(_OWORD *)(a1 + 16) = v254;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v73 + 32);
  *(void *)(a1 + 48) = *(void *)(v73 + 48);
  a5.n128_u64[0] = v293;
  *(void *)(v73 + 48) = v374;
  *(_OWORD *)(v73 + 16) = v326;
  *(_OWORD *)(v73 + 32) = v350;
  *(_OWORD *)unint64_t v73 = v293;
  if (*(_DWORD *)(a2 - 48) < *(_DWORD *)(a1 + 64))
  {
    a5 = *(__n128 *)v73;
    long long v170 = *(_OWORD *)(v73 + 16);
    long long v255 = *(_OWORD *)(v73 + 32);
    uint64_t v256 = *(void *)(v73 + 48);
    uint64_t v257 = *(void *)(a2 - 8);
    long long v259 = *(_OWORD *)(a2 - 40);
    long long v258 = *(_OWORD *)(a2 - 24);
    *(_OWORD *)unint64_t v73 = *(_OWORD *)v11;
    *(_OWORD *)(v73 + 16) = v259;
    *(_OWORD *)(v73 + 32) = v258;
    *(void *)(v73 + 48) = v257;
    *(_OWORD *)(a2 - 24) = v255;
    *(void *)(a2 - 8) = v256;
    goto LABEL_188;
  }
  return a5.n128_f64[0];
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroup(WGPUBindGroupDescriptor const&)::$_0 &,WGPUBindGroupEntry *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 48) < *(_DWORD *)(a1 + 8))
      {
        uint64_t v7 = *(void *)(a1 + 48);
        long long v9 = *(_OWORD *)(a1 + 16);
        long long v8 = *(_OWORD *)(a1 + 32);
        long long v10 = *(_OWORD *)a1;
        long long v11 = *(_OWORD *)(a2 - 40);
        long long v12 = *(_OWORD *)(a2 - 24);
        long long v13 = *(_OWORD *)(a2 - 56);
        *(void *)(a1 + 48) = *(void *)(a2 - 8);
        *(_OWORD *)(a1 + 16) = v11;
        *(_OWORD *)(a1 + 32) = v12;
        *(_OWORD *)a1 = v13;
        *(_OWORD *)(a2 - 56) = v10;
        *(_OWORD *)(a2 - 40) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(void *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      unsigned int v24 = (long long *)(a1 + 56);
      __n128 v25 = (long long *)(a2 - 56);
      unsigned int v26 = *(_DWORD *)(a1 + 64);
      unsigned int v27 = *(_DWORD *)(a2 - 48);
      if (v26 >= *(_DWORD *)(a1 + 8))
      {
        if (v27 < v26)
        {
          uint64_t v70 = *(void *)(a1 + 104);
          long long v72 = *(_OWORD *)(a1 + 72);
          long long v71 = *(_OWORD *)(a1 + 88);
          long long v73 = *v24;
          long long v75 = *(_OWORD *)(a2 - 40);
          long long v74 = *(_OWORD *)(a2 - 24);
          long long v76 = *v25;
          *(void *)(a1 + 104) = *(void *)(a2 - 8);
          *(_OWORD *)(a1 + 72) = v75;
          *(_OWORD *)(a1 + 88) = v74;
          *unsigned int v24 = v76;
          *__n128 v25 = v73;
          *(_OWORD *)(a2 - 40) = v72;
          *(_OWORD *)(a2 - 24) = v71;
          *(void *)(a2 - 8) = v70;
          if (*(_DWORD *)(a1 + 64) < *(_DWORD *)(a1 + 8))
          {
            uint64_t v77 = *(void *)(a1 + 48);
            long long v79 = *(_OWORD *)(a1 + 16);
            long long v78 = *(_OWORD *)(a1 + 32);
            long long v80 = *(_OWORD *)a1;
            long long v81 = *(_OWORD *)(a1 + 72);
            *(_OWORD *)a1 = *v24;
            *(_OWORD *)(a1 + 16) = v81;
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
            *(void *)(a1 + 48) = *(void *)(a1 + 104);
            *unsigned int v24 = v80;
            *(_OWORD *)(a1 + 72) = v79;
            *(_OWORD *)(a1 + 88) = v78;
            *(void *)(a1 + 104) = v77;
          }
        }
      }
      else if (v27 >= v26)
      {
        uint64_t v101 = *(void *)(a1 + 48);
        long long v103 = *(_OWORD *)(a1 + 16);
        long long v102 = *(_OWORD *)(a1 + 32);
        long long v104 = *(_OWORD *)a1;
        long long v105 = *(_OWORD *)(a1 + 72);
        *(_OWORD *)a1 = *v24;
        *(_OWORD *)(a1 + 16) = v105;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
        *(void *)(a1 + 48) = *(void *)(a1 + 104);
        *unsigned int v24 = v104;
        *(_OWORD *)(a1 + 72) = v103;
        *(_OWORD *)(a1 + 88) = v102;
        *(void *)(a1 + 104) = v101;
        if (*(_DWORD *)(a2 - 48) < *(_DWORD *)(a1 + 64))
        {
          uint64_t v106 = *(void *)(a1 + 104);
          long long v108 = *(_OWORD *)(a1 + 72);
          long long v107 = *(_OWORD *)(a1 + 88);
          long long v109 = *v24;
          long long v111 = *(_OWORD *)(a2 - 40);
          long long v110 = *(_OWORD *)(a2 - 24);
          long long v112 = *v25;
          *(void *)(a1 + 104) = *(void *)(a2 - 8);
          *(_OWORD *)(a1 + 72) = v111;
          *(_OWORD *)(a1 + 88) = v110;
          *unsigned int v24 = v112;
          *__n128 v25 = v109;
          *(_OWORD *)(a2 - 40) = v108;
          *(_OWORD *)(a2 - 24) = v107;
          *(void *)(a2 - 8) = v106;
        }
      }
      else
      {
        uint64_t v28 = *(void *)(a1 + 48);
        long long v30 = *(_OWORD *)(a1 + 16);
        long long v29 = *(_OWORD *)(a1 + 32);
        long long v31 = *(_OWORD *)a1;
        long long v33 = *(_OWORD *)(a2 - 40);
        long long v32 = *(_OWORD *)(a2 - 24);
        long long v34 = *v25;
        *(void *)(a1 + 48) = *(void *)(a2 - 8);
        *(_OWORD *)(a1 + 16) = v33;
        *(_OWORD *)(a1 + 32) = v32;
        *(_OWORD *)a1 = v34;
        *__n128 v25 = v31;
        *(_OWORD *)(a2 - 40) = v30;
        *(_OWORD *)(a2 - 24) = v29;
        *(void *)(a2 - 8) = v28;
      }
      return result;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroup(WGPUBindGroupDescriptor const&)::$_0 &,WGPUBindGroupEntry *>((long long *)a1, (long long *)(a1 + 56), (long long *)(a1 + 112), (long long *)(a2 - 56), a3);
      return 1;
    case 5:
      long long v35 = (long long *)(a1 + 56);
      long long v36 = (long long *)(a1 + 112);
      long long v37 = (long long *)(a1 + 168);
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroup(WGPUBindGroupDescriptor const&)::$_0 &,WGPUBindGroupEntry *>((long long *)a1, (long long *)(a1 + 56), (long long *)(a1 + 112), (long long *)(a1 + 168), a3);
      if (*(_DWORD *)(a2 - 48) >= *(_DWORD *)(a1 + 176)) {
        return 1;
      }
      uint64_t v38 = *(void *)(a1 + 216);
      long long v40 = *(_OWORD *)(a1 + 184);
      long long v39 = *(_OWORD *)(a1 + 200);
      long long v41 = *v37;
      long long v42 = *(_OWORD *)(a2 - 40);
      long long v43 = *(_OWORD *)(a2 - 24);
      long long v44 = *(_OWORD *)(a2 - 56);
      *(void *)(a1 + 216) = *(void *)(a2 - 8);
      *(_OWORD *)(a1 + 184) = v42;
      *(_OWORD *)(a1 + 200) = v43;
      *long long v37 = v44;
      *(_OWORD *)(a2 - 56) = v41;
      *(_OWORD *)(a2 - 40) = v40;
      *(_OWORD *)(a2 - 24) = v39;
      *(void *)(a2 - 8) = v38;
      if (*(_DWORD *)(a1 + 176) >= *(_DWORD *)(a1 + 120)) {
        return 1;
      }
      uint64_t v45 = *(void *)(a1 + 160);
      long long v47 = *(_OWORD *)(a1 + 128);
      long long v46 = *(_OWORD *)(a1 + 144);
      long long v48 = *v36;
      long long v49 = *(_OWORD *)(a1 + 184);
      *long long v36 = *v37;
      *(_OWORD *)(a1 + 128) = v49;
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a1 + 200);
      *(void *)(a1 + 160) = *(void *)(a1 + 216);
      *long long v37 = v48;
      *(_OWORD *)(a1 + 184) = v47;
      *(_OWORD *)(a1 + 200) = v46;
      *(void *)(a1 + 216) = v45;
      if (*(_DWORD *)(a1 + 120) >= *(_DWORD *)(a1 + 64)) {
        return 1;
      }
      uint64_t v50 = *(void *)(a1 + 104);
      long long v52 = *(_OWORD *)(a1 + 72);
      long long v51 = *(_OWORD *)(a1 + 88);
      long long v53 = *v35;
      long long v54 = *(_OWORD *)(a1 + 128);
      long long *v35 = *v36;
      *(_OWORD *)(a1 + 72) = v54;
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 144);
      *(void *)(a1 + 104) = *(void *)(a1 + 160);
      *long long v36 = v53;
      *(_OWORD *)(a1 + 128) = v52;
      *(_OWORD *)(a1 + 144) = v51;
      *(void *)(a1 + 160) = v50;
      if (*(_DWORD *)(a1 + 64) >= *(_DWORD *)(a1 + 8)) {
        return 1;
      }
      uint64_t v55 = *(void *)(a1 + 48);
      long long v57 = *(_OWORD *)(a1 + 16);
      long long v56 = *(_OWORD *)(a1 + 32);
      long long v58 = *(_OWORD *)a1;
      long long v59 = *(_OWORD *)(a1 + 72);
      *(_OWORD *)a1 = *v35;
      *(_OWORD *)(a1 + 16) = v59;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
      *(void *)(a1 + 48) = *(void *)(a1 + 104);
      long long *v35 = v58;
      *(_OWORD *)(a1 + 72) = v57;
      *(_OWORD *)(a1 + 88) = v56;
      BOOL result = 1;
      *(void *)(a1 + 104) = v55;
      return result;
    default:
      uint64_t v14 = a1 + 112;
      uint64_t v15 = (long long *)(a1 + 56);
      unsigned int v16 = *(_DWORD *)(a1 + 64);
      unsigned int v17 = *(_DWORD *)(a1 + 8);
      unsigned int v18 = *(_DWORD *)(a1 + 120);
      if (v16 >= v17)
      {
        if (v18 < v16)
        {
          uint64_t v60 = *(void *)(a1 + 104);
          long long v62 = *(_OWORD *)(a1 + 72);
          long long v61 = *(_OWORD *)(a1 + 88);
          long long v63 = *v15;
          long long v64 = *(_OWORD *)(a1 + 128);
          *uint64_t v15 = *(_OWORD *)v14;
          *(_OWORD *)(a1 + 72) = v64;
          *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 144);
          *(void *)(a1 + 104) = *(void *)(a1 + 160);
          *(_OWORD *)uint64_t v14 = v63;
          *(_OWORD *)(a1 + 128) = v62;
          *(_OWORD *)(a1 + 144) = v61;
          *(void *)(a1 + 160) = v60;
          if (*(_DWORD *)(a1 + 64) < v17)
          {
            uint64_t v65 = *(void *)(a1 + 48);
            long long v67 = *(_OWORD *)(a1 + 16);
            long long v66 = *(_OWORD *)(a1 + 32);
            long long v68 = *(_OWORD *)a1;
            long long v69 = *(_OWORD *)(a1 + 72);
            *(_OWORD *)a1 = *v15;
            *(_OWORD *)(a1 + 16) = v69;
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
            *(void *)(a1 + 48) = *(void *)(a1 + 104);
            *uint64_t v15 = v68;
            *(_OWORD *)(a1 + 72) = v67;
            *(_OWORD *)(a1 + 88) = v66;
            *(void *)(a1 + 104) = v65;
          }
        }
      }
      else if (v18 >= v16)
      {
        uint64_t v82 = *(void *)(a1 + 48);
        long long v84 = *(_OWORD *)(a1 + 16);
        long long v83 = *(_OWORD *)(a1 + 32);
        long long v85 = *(_OWORD *)a1;
        long long v86 = *(_OWORD *)(a1 + 72);
        *(_OWORD *)a1 = *v15;
        *(_OWORD *)(a1 + 16) = v86;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
        *(void *)(a1 + 48) = *(void *)(a1 + 104);
        *uint64_t v15 = v85;
        *(_OWORD *)(a1 + 72) = v84;
        *(_OWORD *)(a1 + 88) = v83;
        *(void *)(a1 + 104) = v82;
        if (v18 < *(_DWORD *)(a1 + 64))
        {
          uint64_t v87 = *(void *)(a1 + 104);
          long long v89 = *(_OWORD *)(a1 + 72);
          long long v88 = *(_OWORD *)(a1 + 88);
          long long v90 = *v15;
          long long v91 = *(_OWORD *)(a1 + 128);
          *uint64_t v15 = *(_OWORD *)v14;
          *(_OWORD *)(a1 + 72) = v91;
          *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 144);
          *(void *)(a1 + 104) = *(void *)(a1 + 160);
          *(_OWORD *)uint64_t v14 = v90;
          *(_OWORD *)(a1 + 128) = v89;
          *(_OWORD *)(a1 + 144) = v88;
          *(void *)(a1 + 160) = v87;
        }
      }
      else
      {
        uint64_t v19 = *(void *)(a1 + 48);
        long long v21 = *(_OWORD *)(a1 + 16);
        long long v20 = *(_OWORD *)(a1 + 32);
        long long v22 = *(_OWORD *)a1;
        long long v23 = *(_OWORD *)(a1 + 128);
        *(_OWORD *)a1 = *(_OWORD *)v14;
        *(_OWORD *)(a1 + 16) = v23;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 144);
        *(void *)(a1 + 48) = *(void *)(a1 + 160);
        *(_OWORD *)uint64_t v14 = v22;
        *(_OWORD *)(a1 + 128) = v21;
        *(_OWORD *)(a1 + 144) = v20;
        *(void *)(a1 + 160) = v19;
      }
      uint64_t v92 = a1 + 168;
      if (a1 + 168 == a2) {
        return 1;
      }
      uint64_t v93 = 0;
      int v94 = 0;
      break;
  }
  while (1)
  {
    unsigned int v96 = *(_DWORD *)(v92 + 8);
    if (v96 < *(_DWORD *)(v14 + 8))
    {
      uint64_t v97 = *(void *)v92;
      long long v113 = *(_OWORD *)(v92 + 12);
      *(_OWORD *)unsigned int v114 = *(_OWORD *)(v92 + 28);
      *(_OWORD *)&v114[12] = *(_OWORD *)(v92 + 40);
      uint64_t v98 = v93;
      do
      {
        uint64_t v99 = a1 + v98;
        long long v100 = *(_OWORD *)(a1 + v98 + 128);
        *(_OWORD *)(v99 + 168) = *(_OWORD *)(a1 + v98 + 112);
        *(_OWORD *)(v99 + 184) = v100;
        *(_OWORD *)(v99 + 200) = *(_OWORD *)(a1 + v98 + 144);
        *(void *)(v99 + 216) = *(void *)(a1 + v98 + 160);
        if (v98 == -112)
        {
          uint64_t v95 = a1;
          goto LABEL_27;
        }
        v98 -= 56;
      }
      while (v96 < *(_DWORD *)(v99 + 64));
      uint64_t v95 = a1 + v98 + 168;
LABEL_27:
      *(void *)uint64_t v95 = v97;
      *(_DWORD *)(v95 + 8) = v96;
      *(_OWORD *)(v95 + 12) = v113;
      *(_OWORD *)(v95 + 28) = *(_OWORD *)v114;
      *(_OWORD *)(v95 + 40) = *(_OWORD *)&v114[12];
      if (++v94 == 8) {
        return v92 + 56 == a2;
      }
    }
    uint64_t v14 = v92;
    v93 += 56;
    v92 += 56;
    if (v92 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroup(WGPUBindGroupDescriptor const&)::$_0 &,WGPUBindGroupEntry *>(long long *a1, long long *a2, long long *a3, long long *a4, __n128 result)
{
  unsigned int v5 = *((_DWORD *)a2 + 2);
  unsigned int v6 = *((_DWORD *)a3 + 2);
  if (v5 >= *((_DWORD *)a1 + 2))
  {
    if (v6 < v5)
    {
      uint64_t v13 = *((void *)a2 + 6);
      long long v14 = a2[1];
      BOOL result = (__n128)a2[2];
      long long v15 = *a2;
      long long v17 = a3[1];
      long long v16 = a3[2];
      long long v18 = *a3;
      *((void *)a2 + 6) = *((void *)a3 + 6);
      a2[1] = v17;
      a2[2] = v16;
      *a2 = v18;
      *a3 = v15;
      a3[1] = v14;
      a3[2] = (__int128)result;
      *((void *)a3 + 6) = v13;
      if (*((_DWORD *)a2 + 2) < *((_DWORD *)a1 + 2))
      {
        uint64_t v19 = *((void *)a1 + 6);
        long long v20 = a1[1];
        BOOL result = (__n128)a1[2];
        long long v21 = *a1;
        long long v23 = a2[1];
        long long v22 = a2[2];
        long long v24 = *a2;
        *((void *)a1 + 6) = *((void *)a2 + 6);
        a1[1] = v23;
        a1[2] = v22;
        *a1 = v24;
        *a2 = v21;
        a2[1] = v20;
        a2[2] = (__int128)result;
        *((void *)a2 + 6) = v19;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      uint64_t v7 = *((void *)a1 + 6);
      long long v8 = a1[1];
      BOOL result = (__n128)a1[2];
      long long v9 = *a1;
      long long v11 = a3[1];
      long long v10 = a3[2];
      long long v12 = *a3;
      *((void *)a1 + 6) = *((void *)a3 + 6);
      a1[1] = v11;
      a1[2] = v10;
      *a1 = v12;
LABEL_9:
      *a3 = v9;
      a3[1] = v8;
      a3[2] = (__int128)result;
      *((void *)a3 + 6) = v7;
      goto LABEL_10;
    }
    uint64_t v25 = *((void *)a1 + 6);
    long long v26 = a1[1];
    BOOL result = (__n128)a1[2];
    long long v27 = *a1;
    long long v29 = a2[1];
    long long v28 = a2[2];
    long long v30 = *a2;
    *((void *)a1 + 6) = *((void *)a2 + 6);
    a1[1] = v29;
    a1[2] = v28;
    *a1 = v30;
    *a2 = v27;
    a2[1] = v26;
    a2[2] = (__int128)result;
    *((void *)a2 + 6) = v25;
    if (*((_DWORD *)a3 + 2) < *((_DWORD *)a2 + 2))
    {
      uint64_t v7 = *((void *)a2 + 6);
      long long v8 = a2[1];
      BOOL result = (__n128)a2[2];
      long long v9 = *a2;
      long long v32 = a3[1];
      long long v31 = a3[2];
      long long v33 = *a3;
      *((void *)a2 + 6) = *((void *)a3 + 6);
      a2[1] = v32;
      a2[2] = v31;
      *a2 = v33;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*((_DWORD *)a4 + 2) < *((_DWORD *)a3 + 2))
  {
    uint64_t v34 = *((void *)a3 + 6);
    long long v35 = a3[1];
    BOOL result = (__n128)a3[2];
    long long v36 = *a3;
    long long v38 = a4[1];
    long long v37 = a4[2];
    long long v39 = *a4;
    *((void *)a3 + 6) = *((void *)a4 + 6);
    a3[1] = v38;
    a3[2] = v37;
    *a3 = v39;
    *a4 = v36;
    a4[1] = v35;
    a4[2] = (__int128)result;
    *((void *)a4 + 6) = v34;
    if (*((_DWORD *)a3 + 2) < *((_DWORD *)a2 + 2))
    {
      uint64_t v40 = *((void *)a2 + 6);
      long long v41 = a2[1];
      BOOL result = (__n128)a2[2];
      long long v42 = *a2;
      long long v44 = a3[1];
      long long v43 = a3[2];
      long long v45 = *a3;
      *((void *)a2 + 6) = *((void *)a3 + 6);
      a2[1] = v44;
      a2[2] = v43;
      *a2 = v45;
      *a3 = v42;
      a3[1] = v41;
      a3[2] = (__int128)result;
      *((void *)a3 + 6) = v40;
      if (*((_DWORD *)a2 + 2) < *((_DWORD *)a1 + 2))
      {
        uint64_t v46 = *((void *)a1 + 6);
        long long v47 = a1[1];
        BOOL result = (__n128)a1[2];
        long long v48 = *a1;
        long long v50 = a2[1];
        long long v49 = a2[2];
        long long v51 = *a2;
        *((void *)a1 + 6) = *((void *)a2 + 6);
        a1[1] = v50;
        a1[2] = v49;
        *a1 = v51;
        *a2 = v48;
        a2[1] = v47;
        a2[2] = (__int128)result;
        *((void *)a2 + 6) = v46;
      }
    }
  }
  return result;
}

WebGPU::Buffer *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN6WebGPU6BufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IKNSA_11TextureViewENSC_ISI_EENSE_ISI_EEEENS9_IKNSA_15ExternalTextureENSC_ISN_EENSE_ISN_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSG_SL_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, WebGPU::Buffer **a2)
{
  BOOL result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebGPU::Buffer::~Buffer(result, a2);
      return (WebGPU::Buffer *)WTF::fastFree(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WebGPU::TextureView *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN6WebGPU6BufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IKNSA_11TextureViewENSC_ISI_EENSE_ISI_EEEENS9_IKNSA_15ExternalTextureENSC_ISN_EENSE_ISN_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSG_SL_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, WebGPU::TextureView **a2)
{
  BOOL result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebGPU::TextureView::~TextureView(result, a2);
      return (WebGPU::TextureView *)WTF::fastFree(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WebGPU::ExternalTexture *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN6WebGPU6BufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IKNSA_11TextureViewENSC_ISI_EENSE_ISI_EEEENS9_IKNSA_15ExternalTextureENSC_ISN_EENSE_ISN_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSG_SL_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, WebGPU::ExternalTexture **a2)
{
  BOOL result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebGPU::ExternalTexture::~ExternalTexture(result, a2);
      return (WebGPU::ExternalTexture *)WTF::fastFree(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebGPU::Device::createExternalTextureFromPixelBuffer(__CVBuffer *,WGPUColorSpace)::$_0,void,WGPUQueueWorkDoneStatus>::call(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
  }
}

unint64_t WTF::Vector<WebGPU::BindGroup::BufferAndType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unsigned int v5 = *(void **)a1;
  if (*(void *)a1 > a3 || (uint64_t v6 = *(unsigned int *)(a1 + 12), (unint64_t)v5 + 32 * v6 <= a3))
  {
    unint64_t v14 = *(unsigned int *)(a1 + 8);
    unint64_t v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10) {
      unint64_t v16 = v15 + 1;
    }
    else {
      unint64_t v16 = 16;
    }
    if (v16 <= a2) {
      unint64_t v17 = a2;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17 > v14)
    {
      if (v17 >> 27) {
        goto LABEL_30;
      }
      uint64_t v18 = *(unsigned int *)(a1 + 12);
      uint64_t v19 = (void *)WTF::fastMalloc((WTF *)(32 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(void *)a1 = v19;
      memcpy(v19, v5, 32 * v18);
      if (v5)
      {
        if (*(void **)a1 == v5)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v20);
      }
    }
    return a3;
  }
  unint64_t v7 = *(unsigned int *)(a1 + 8);
  unint64_t v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10) {
    unint64_t v9 = v8 + 1;
  }
  else {
    unint64_t v9 = 16;
  }
  if (v9 <= a2) {
    unint64_t v10 = a2;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 > v7)
  {
    if (!(v10 >> 27))
    {
      long long v11 = (void *)WTF::fastMalloc((WTF *)(32 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(void *)a1 = v11;
      memcpy(v11, v5, 32 * v6);
      uint64_t v13 = *(void **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v12);
        uint64_t v13 = *(void **)a1;
      }
      return (unint64_t)v13 + 32 * ((uint64_t)(a3 - (void)v5) >> 5);
    }
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x1824D3E18);
  }
  uint64_t v13 = *(void **)a1;
  return (unint64_t)v13 + 32 * ((uint64_t)(a3 - (void)v5) >> 5);
}

WTF **WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,objc_object  {objcproto9MTLBuffer}* {__strong}&>(WTF **result, id *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *((unsigned int *)result + 2);
  uint64_t v5 = *((unsigned int *)result + 3);
  unint64_t v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10) {
    unint64_t v7 = v6 + 1;
  }
  else {
    unint64_t v7 = 16;
  }
  if (v7 <= v5 + 1) {
    unint64_t v8 = v5 + 1;
  }
  else {
    unint64_t v8 = v7;
  }
  unint64_t v9 = *result;
  if (v8 <= v4)
  {
LABEL_18:
    uint64_t v16 = *((unsigned int *)v3 + 3);
    BOOL result = (WTF **)*a2;
    *((void *)v9 + v16) = result;
    ++*((_DWORD *)v3 + 3);
    return result;
  }
  if (!(v8 >> 29))
  {
    long long v11 = (WTF *)WTF::fastMalloc((WTF *)(8 * v8));
    *((_DWORD *)v3 + 2) = v8;
    *uint64_t v3 = v11;
    if (v5)
    {
      uint64_t v12 = 8 * v5;
      uint64_t v13 = (void **)v9;
      do
      {
        unint64_t v14 = *v13;
        *uint64_t v13 = 0;
        *(void *)long long v11 = v14;
        long long v11 = (WTF *)((char *)v11 + 8);
        unint64_t v15 = *v13++;

        v12 -= 8;
      }
      while (v12);
      long long v11 = *v3;
    }
    if (v9)
    {
      if (v11 == v9)
      {
        *uint64_t v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      WTF::fastFree(v9, v10);
      unint64_t v9 = *v3;
    }
    else
    {
      unint64_t v9 = v11;
    }
    goto LABEL_18;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebGPU::BindGroupEntryUsageData::BindGroupEntryUsageData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = -1;
  uint64_t v4 = *(unsigned int *)(a2 + 16);
  if (v4 != -1)
  {
    ((void (*)(unsigned char *, uint64_t, uint64_t))off_1ECABAAE0[v4])(v6, a1 + 8, a2 + 8);
    *(_DWORD *)(a1 + 16) = v4;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

void sub_1824D3F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v16 = *(unsigned int *)(v13 + 16);
  if (v16 != -1) {
    ((void (*)(char *, uint64_t))off_1ECABAAA0[v16])(&a13, v14);
  }
  *(_DWORD *)(v13 + 16) = -1;
  _Unwind_Resume(exception_object);
}

__n128 WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebGPU::BindGroupEntryUsageData>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  unint64_t v4 = v3;
  unsigned int v5 = *(_DWORD *)(a1 + 12);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)a1 + 40 * v5;
  *(void *)uint64_t v7 = *(void *)v3;
  *(unsigned char *)(v7 + 8) = 0;
  uint64_t v8 = v7 + 8;
  *(_DWORD *)(v7 + 16) = -1;
  unint64_t v9 = (_DWORD *)(v7 + 16);
  uint64_t v10 = *(unsigned int *)(v3 + 16);
  if (v10 != -1)
  {
    ((void (*)(unsigned char *, uint64_t, unint64_t))off_1ECABAAE0[v10])(v12, v8, v3 + 8);
    *unint64_t v9 = v10;
  }
  __n128 result = *(__n128 *)(v4 + 24);
  *(__n128 *)(v6 + 40 * v5 + 24) = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

void sub_1824D409C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v16 = *v14;
  if (v16 != -1) {
    ((void (*)(char *, uint64_t))off_1ECABAAA0[v16])(&a13, v13);
  }
  *uint64_t v14 = -1;
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN6WebGPU6BufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IKNSA_11TextureViewENSC_ISI_EENSE_ISI_EEEENS9_IKNSA_15ExternalTextureENSC_ISN_EENSE_ISN_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRSY_OT0_E_JRNS0_6__baseILSV_1EJSG_SL_SQ_EEEOS16_EEEDcSY_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN6WebGPU6BufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IKNSA_11TextureViewENSC_ISI_EENSE_ISI_EEEENS9_IKNSA_15ExternalTextureENSC_ISN_EENSE_ISN_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRSY_OT0_E_JRNS0_6__baseILSV_1EJSG_SL_SQ_EEEOS16_EEEDcSY_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN6WebGPU6BufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IKNSA_11TextureViewENSC_ISI_EENSE_ISI_EEEENS9_IKNSA_15ExternalTextureENSC_ISN_EENSE_ISN_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRSY_OT0_E_JRNS0_6__baseILSV_1EJSG_SL_SQ_EEEOS16_EEEDcSY_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

unint64_t WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
}

uint64_t WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  if (a2 < 0x6666667)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(WTF **)result;
    unsigned int v4 = *(_DWORD *)(result + 12);
    int v5 = 40 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(void *)uint64_t v2 = v6;
    if (v4)
    {
      uint64_t v8 = v6;
      uint64_t v9 = 0;
      unint64_t v10 = (char *)v3 + 40 * v4;
      do
      {
        uint64_t v11 = v8 + v9;
        uint64_t v12 = (char *)v3 + v9;
        *(void *)uint64_t v11 = *(void *)((char *)v3 + v9);
        *(unsigned char *)(v8 + v9 + 8) = 0;
        unint64_t v7 = (void *)(v8 + v9 + 8);
        *(_DWORD *)(v11 + 16) = -1;
        uint64_t v13 = *(unsigned int *)((char *)v3 + v9 + 16);
        if (v13 != -1)
        {
          ((void (*)(char *, void *, char *))off_1ECABAAE0[v13])(v15, v7, v12 + 8);
          *(_DWORD *)(v11 + 16) = v13;
        }
        *(_OWORD *)(v11 + 24) = *(_OWORD *)(v12 + 24);
        uint64_t v14 = *((unsigned int *)v12 + 4);
        if (v14 != -1) {
          ((void (*)(char *, char *))off_1ECABAAA0[v14])(&v16, (char *)v3 + v9 + 8);
        }
        *((_DWORD *)v12 + 4) = -1;
        v9 += 40;
      }
      while (v12 + 40 != v10);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void sub_1824D431C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  uint64_t v15 = v12 + v13;
  uint64_t v16 = *(unsigned int *)(v12 + v13 + 16);
  if (v16 != -1) {
    ((void (*)(char *, uint64_t))off_1ECABAAA0[v16])(&a12, v15 + 8);
  }
  *(_DWORD *)(v15 + 16) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::KeyValuePair<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>>,WTF::DefaultHash<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashMap<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>,WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>,WTF::DefaultHash<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>,WTF::HashTraits<WTF::EnumeratedArray<WebGPU::ShaderStage,std::optional<unsigned int>,(WebGPU::ShaderStage)2>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebGPU::Sampler,WTF::RawPtrTraits<WebGPU::Sampler>,WTF::DefaultRefDerefTraits<WebGPU::Sampler>>>>::rehash(uint64_t *a1, unsigned int a2, WebGPU::Sampler **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 32 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = (WebGPU::Sampler **)(v6 + 32 * v13);
      uint64_t v16 = *v15;
      if (*v15 != (WebGPU::Sampler *)-1)
      {
        if (v16)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = ((unint64_t)v16 + ~((void)v16 << 32)) ^ (((unint64_t)v16 + ~((void)v16 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 32 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          uint64_t v26 = v17 + 32 * v24;
          *(void *)uint64_t v26 = 0;
          long long v27 = *v15;
          *uint64_t v15 = 0;
          *(void *)uint64_t v26 = v27;
          uint64_t v28 = v6 + 32 * v13;
          long long v29 = *(_OWORD *)(v28 + 8);
          *(void *)(v26 + 24) = *(void *)(v28 + 24);
          *(_OWORD *)(v26 + 8) = v29;
          long long v30 = *v15;
          *uint64_t v15 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 1)
            {
              WebGPU::Sampler::~Sampler(v30);
              WTF::fastFree(v31, v32);
            }
            else
            {
              --*(_DWORD *)v30;
            }
          }
          if (v15 == a3) {
            uint64_t v14 = v26;
          }
        }
        else
        {
          *uint64_t v15 = 0;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

WebGPU::Sampler *WTF::RefCounted<WebGPU::Sampler>::deref(WebGPU::Sampler *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebGPU::Sampler::~Sampler(result);
    return (WebGPU::Sampler *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

WTF *WTF::VectorDestructor<true,WebGPU::BindableResources>::destruct(WTF *result, WTF *a2)
{
  if (result != a2)
  {
    uint64_t v16 = v2;
    uint64_t v17 = v3;
    int v5 = result;
    do
    {
      uint64_t v6 = *((unsigned int *)v5 + 7);
      int v7 = (WTF *)*((void *)v5 + 2);
      if (v6)
      {
        uint64_t v8 = 40 * v6;
        uint64_t v9 = (char *)v7 + 8;
        do
        {
          uint64_t v10 = *((unsigned int *)v9 + 2);
          if (v10 != -1) {
            ((void (*)(char *, char *))off_1ECABAAA0[v10])(&v15, v9);
          }
          *((_DWORD *)v9 + 2) = -1;
          v9 += 40;
          v8 -= 40;
        }
        while (v8);
        int v7 = (WTF *)*((void *)v5 + 2);
      }
      if (v7)
      {
        *((void *)v5 + 2) = 0;
        *((_DWORD *)v5 + 6) = 0;
        WTF::fastFree(v7, a2);
      }
      uint64_t v11 = *((unsigned int *)v5 + 3);
      if (v11)
      {
        uint64_t v12 = *(void ***)v5;
        uint64_t v13 = 8 * v11;
        do
        {
          uint64_t v14 = *v12++;

          v13 -= 8;
        }
        while (v13);
      }
      uint64_t result = *(WTF **)v5;
      if (*(void *)v5)
      {
        *(void *)int v5 = 0;
        *((_DWORD *)v5 + 2) = 0;
        uint64_t result = (WTF *)WTF::fastFree(result, a2);
      }
      int v5 = (WTF *)((char *)v5 + 48);
    }
    while (v5 != a2);
  }
  return result;
}

char *WTF::Vector<WebGPU::BindableResources,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  int v5 = *(WTF **)a1;
  if (*(void *)a1 > a3 || (uint64_t v6 = (WTF *)((char *)v5 + 48 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    unint64_t v14 = *(unsigned int *)(a1 + 8);
    unint64_t v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10) {
      unint64_t v16 = v15 + 1;
    }
    else {
      unint64_t v16 = 16;
    }
    if (v16 <= a2) {
      unint64_t v16 = a2;
    }
    if (v16 > v14)
    {
      if (v16 >= 0x5555556)
      {
        __break(0xC471u);
        JUMPOUT(0x1824D4828);
      }
      uint64_t v17 = (WTF *)((char *)v5 + 48 * *(unsigned int *)(a1 + 12));
      int v18 = 48 * v16;
      uint64_t v19 = WTF::fastMalloc((WTF *)(48 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF0) / 0x30;
      *(void *)a1 = v19;
      WTF::VectorMover<false,WebGPU::BindableResources>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
    return (char *)a3;
  }
  else
  {
    unint64_t v7 = *(unsigned int *)(a1 + 8);
    unint64_t v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10) {
      unint64_t v9 = v8 + 1;
    }
    else {
      unint64_t v9 = 16;
    }
    if (v9 <= a2) {
      unint64_t v9 = a2;
    }
    if (v9 <= v7)
    {
      uint64_t v13 = *(WTF **)a1;
    }
    else
    {
      if (v9 >= 0x5555556)
      {
        __break(0xC471u);
        JUMPOUT(0x1824D4830);
      }
      int v10 = 48 * v9;
      uint64_t v11 = WTF::fastMalloc((WTF *)(48 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF0) / 0x30;
      *(void *)a1 = v11;
      WTF::VectorMover<false,WebGPU::BindableResources>::move(v5, v6, v11);
      uint64_t v13 = *(WTF **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        uint64_t v13 = *(WTF **)a1;
      }
    }
    return (char *)v13 + 16 * ((uint64_t)(a3 - (void)v5) >> 4);
  }
}

WTF *WTF::VectorMover<false,WebGPU::BindableResources>::move(WTF *result, WTF *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v20 = v3;
    uint64_t v21 = v4;
    unint64_t v7 = result;
    do
    {
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      unint64_t v8 = *(void ***)v7;
      *(void *)unint64_t v7 = 0;
      *(void *)a3 = v8;
      LODWORD(v8) = *((_DWORD *)v7 + 2);
      *((_DWORD *)v7 + 2) = 0;
      *(_DWORD *)(a3 + 8) = v8;
      LODWORD(v8) = *((_DWORD *)v7 + 3);
      *((_DWORD *)v7 + 3) = 0;
      *(_DWORD *)(a3 + 12) = v8;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      uint64_t v9 = *((void *)v7 + 2);
      *((void *)v7 + 2) = 0;
      *(void *)(a3 + 16) = v9;
      LODWORD(v9) = *((_DWORD *)v7 + 6);
      *((_DWORD *)v7 + 6) = 0;
      *(_DWORD *)(a3 + 24) = v9;
      LODWORD(v9) = *((_DWORD *)v7 + 7);
      *((_DWORD *)v7 + 7) = 0;
      *(_DWORD *)(a3 + 28) = v9;
      *(_OWORD *)(a3 + 32) = *((_OWORD *)v7 + 2);
      uint64_t v10 = *((unsigned int *)v7 + 7);
      uint64_t v11 = (WTF *)*((void *)v7 + 2);
      if (v10)
      {
        uint64_t v12 = 40 * v10;
        uint64_t v13 = (char *)v11 + 8;
        do
        {
          uint64_t v14 = *((unsigned int *)v13 + 2);
          if (v14 != -1) {
            ((void (*)(char *, char *))off_1ECABAAA0[v14])(&v19, v13);
          }
          *((_DWORD *)v13 + 2) = -1;
          v13 += 40;
          v12 -= 40;
        }
        while (v12);
        uint64_t v11 = (WTF *)*((void *)v7 + 2);
      }
      if (v11)
      {
        *((void *)v7 + 2) = 0;
        *((_DWORD *)v7 + 6) = 0;
        WTF::fastFree(v11, a2);
      }
      uint64_t v15 = *((unsigned int *)v7 + 3);
      if (v15)
      {
        unint64_t v16 = *(void ***)v7;
        uint64_t v17 = 8 * v15;
        do
        {
          int v18 = *v16++;

          v17 -= 8;
        }
        while (v17);
      }
      uint64_t result = *(WTF **)v7;
      if (*(void *)v7)
      {
        *(void *)unint64_t v7 = 0;
        *((_DWORD *)v7 + 2) = 0;
        uint64_t result = (WTF *)WTF::fastFree(result, a2);
      }
      a3 += 48;
      unint64_t v7 = (WTF *)((char *)v7 + 48);
    }
    while (v7 != a2);
  }
  return result;
}

WebGPU::BindGroupLayout *WTF::RefCounted<WebGPU::BindGroupLayout>::deref(WebGPU::BindGroupLayout *result, void *a2)
{
  if (*(_DWORD *)result == 1)
  {
    WebGPU::BindGroupLayout::~BindGroupLayout(result, a2);
    return (WebGPU::BindGroupLayout *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
    uint64_t v9 = WTF::fastMalloc((WTF *)(8 * a2 + 16));
    uint64_t v11 = v9 + 16;
    if (!a2) {
      goto LABEL_12;
    }
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
    uint64_t v9 = WTF::fastMalloc((WTF *)(8 * a2 + 16));
    uint64_t v11 = v9 + 16;
    if (!a2) {
      goto LABEL_12;
    }
  }
  if (a2 < 8)
  {
    uint64_t v12 = 0;
LABEL_10:
    uint64_t v16 = a2 - v12;
    uint64_t v17 = (void *)(v9 + 8 * v12 + 16);
    do
    {
      *v17++ = 0xFFFFFFFFLL;
      --v16;
    }
    while (v16);
    goto LABEL_12;
  }
  uint64_t v12 = a2 & 0xFFFFFFF8;
  uint64_t v13 = (_OWORD *)(v9 + 48);
  *(void *)&long long v14 = 0xFFFFFFFFLL;
  *((void *)&v14 + 1) = 0xFFFFFFFFLL;
  uint64_t v15 = v12;
  do
  {
    *(v13 - 2) = v14;
    *(v13 - 1) = v14;
    *uint64_t v13 = v14;
    v13[1] = v14;
    v13 += 4;
    v15 -= 8;
  }
  while (v15);
  if (v12 != a2) {
    goto LABEL_10;
  }
LABEL_12:
  *a1 = v11;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v18 = 0;
    char v19 = 0;
    do
    {
      uint64_t v20 = (_DWORD *)(v6 + 8 * v18);
      if (*v20 <= 0xFFFFFFFD)
      {
        uint64_t v21 = *a1;
        if (*a1) {
          int v22 = *(_DWORD *)(v21 - 8);
        }
        else {
          int v22 = 0;
        }
        int v23 = 0;
        unsigned int v24 = 9 * ((*v20 + ~(*v20 << 15)) ^ ((*v20 + ~(*v20 << 15)) >> 10));
        unsigned int v25 = ((v24 ^ (v24 >> 6)) + ~((v24 ^ (v24 >> 6)) << 11)) ^ (((v24 ^ (v24 >> 6)) + ~((v24 ^ (v24 >> 6)) << 11)) >> 16);
        do
        {
          uint64_t v26 = v25 & v22;
          unsigned int v25 = ++v23 + v26;
        }
        while (*(_DWORD *)(v21 + 8 * v26) != -1);
        long long v27 = (void *)(v21 + 8 * v26);
        void *v27 = *(void *)v20;
        if (v20 == a3) {
          char v19 = v27;
        }
      }
      ++v18;
    }
    while (v18 != v7);
  }
  else
  {
    char v19 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v19;
}

void WebGPU::Device::createBindGroupLayout(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, WebGPU::BindGroupLayout *a4@<X8>)
{
  uint64_t v334 = *MEMORY[0x1E4F143B8];
  if (*(void *)a2 || !*(void *)(a1 + 8))
  {
    uint64_t v6 = WTF::fastMalloc((WTF *)0xD8);
    WebGPU::BindGroupLayout::BindGroupLayout(v6, (atomic_uchar *volatile *)a1);
    *(void *)a4 = v6;
    return;
  }
  uint64_t v308 = 0;
  id v323 = 0;
  id v324 = 0;
  id v325 = 0;
  id v323 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:*(void *)(a2 + 16)];
  uint64_t v306 = 0;
  uint64_t v304 = 0;
  uint64_t v302 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = 0;
  id v324 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:*(void *)(a2 + 16)];
  id v325 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:*(void *)(a2 + 16)];
  int v307 = 0;
  int v305 = 0;
  int v303 = 0;
  int v301 = 0;
  int v299 = 0;
  unint64_t v8 = *(void *)(a2 + 16);
  if (v8)
  {
    if (v8 >> 25)
    {
      __break(0xC471u);
      JUMPOUT(0x1824D6A68);
    }
    uint64_t v9 = *(void *)(a2 + 24);
    uint64_t v10 = WTF::fastMalloc((WTF *)(v8 << 7));
    long long v268 = (WTF *)v10;
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = (_OWORD *)(v10 + v11);
      long long v13 = *(_OWORD *)(v9 + v11);
      long long v14 = *(_OWORD *)(v9 + v11 + 16);
      long long v15 = *(_OWORD *)(v9 + v11 + 48);
      unsigned char v12[2] = *(_OWORD *)(v9 + v11 + 32);
      v12[3] = v15;
      *uint64_t v12 = v13;
      v12[1] = v14;
      long long v7 = *(_OWORD *)(v9 + v11 + 64);
      long long v16 = *(_OWORD *)(v9 + v11 + 80);
      long long v17 = *(_OWORD *)(v9 + v11 + 112);
      v12[6] = *(_OWORD *)(v9 + v11 + 96);
      v12[7] = v17;
      v12[4] = v7;
      v12[5] = v16;
      v11 += 128;
    }
    while (v8 << 7 != v11);
    unint64_t v18 = v8;
    unint64_t v263 = v8;
    if (a3) {
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  long long v268 = 0;
  unint64_t v18 = 0;
  unint64_t v263 = 0;
  if ((a3 & 1) == 0)
  {
LABEL_10:
    unint64_t v19 = 126 - 2 * __clz(v18);
    if (v263) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    std::__introsort<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroupLayout(WGPUBindGroupLayoutDescriptor const&,BOOL)::$_0 &,WGPUBindGroupLayoutEntry *,false>((unint64_t)v268, (long long *)v268 + 8 * v18, v20, 1, *(double *)&v7);
    unint64_t v18 = v263;
  }
LABEL_14:
  uint64_t v296 = 0;
  long long v297 = 0;
  long long v322 = 0uLL;
  uint64_t v321 = 0;
  int v320 = 0;
  uint64_t v319 = 0;
  int v318 = 0;
  uint64_t v317 = 0;
  uint64_t v21 = v268;
  long long v272 = (WTF *)((char *)v268 + 128 * v18);
  uint64_t v264 = *(unsigned int *)(a1 + 112);
  uint64_t v295 = 0;
  if (!v18)
  {
    LODWORD(v258) = 0;
    LODWORD(v259) = 0;
    goto LABEL_196;
  }
  LODWORD(v258) = 0;
  LODWORD(v259) = 0;
  __n128 v262 = (char *)v268 + 12;
  do
  {
    long long v282 = v21;
    uint64_t v22 = *(void *)v21;
    if (*(void *)v21 && (*(_DWORD *)(v22 + 8) != 1683766698 || *(void *)v22))
    {
      uint64_t v249 = WTF::fastMalloc((WTF *)0xD8);
      WebGPU::BindGroupLayout::BindGroupLayout(v249, (atomic_uchar *volatile *)a1);
      goto LABEL_188;
    }
    unsigned int v24 = (unsigned int *)((char *)v21 + 8);
    uint64_t v23 = *((unsigned int *)v21 + 2);
    if (v23 >= v264)
    {
      long long v141 = NSString;
      if (v295)
      {
        int v25 = *(_DWORD *)(v295 - 8);
        unsigned int v143 = 9 * ((v23 + ~(v23 << 15)) ^ ((v23 + ~(v23 << 15)) >> 10));
        unsigned int v144 = (v143 ^ (v143 >> 6)) + ~((v143 ^ (v143 >> 6)) << 11);
        unsigned int v28 = v25 & (v144 ^ HIWORD(v144));
        int v29 = *(_DWORD *)(v295 + 4 * v28);
        if (v29 != v23) {
          goto LABEL_183;
        }
LABEL_178:
        long long v142 = "is";
      }
      else
      {
        long long v142 = "is not";
      }
LABEL_187:
      unint64_t v146 = objc_msgSend(v141, "stringWithFormat:", @"Binding index is invalid: entry.binding(%u) >= maxBindingIndex(%u) || entry binding %s duplicated", v23, v264, v142);
      WebGPU::reportErrorInCreateBindGroupLayout(v146, a3, a1);

      uint64_t v249 = WTF::fastMalloc((WTF *)0xD8);
      WebGPU::BindGroupLayout::BindGroupLayout(v249, (atomic_uchar *volatile *)a1);
      goto LABEL_188;
    }
    if (!v295) {
      goto LABEL_26;
    }
    int v25 = *(_DWORD *)(v295 - 8);
    unsigned int v26 = 9 * ((v23 + ~(v23 << 15)) ^ ((v23 + ~(v23 << 15)) >> 10));
    unsigned int v27 = (v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11);
    unsigned int v28 = v25 & (v27 ^ HIWORD(v27));
    int v29 = *(_DWORD *)(v295 + 4 * v28);
    if (v29 == v23)
    {
LABEL_177:
      long long v141 = NSString;
      if (v29 == v23) {
        goto LABEL_178;
      }
LABEL_183:
      int v145 = 1;
      long long v142 = "is not";
      while (v29 != -1)
      {
        unsigned int v28 = (v28 + v145) & v25;
        int v29 = *(_DWORD *)(v295 + 4 * v28);
        ++v145;
        if (v29 == v23)
        {
          long long v142 = "is";
          goto LABEL_187;
        }
      }
      goto LABEL_187;
    }
    int v30 = 1;
    int v31 = *(_DWORD *)(v295 + 4 * v28);
    unsigned int v32 = v28;
    while (v31 != -1)
    {
      unsigned int v32 = (v32 + v30) & v25;
      int v31 = *(_DWORD *)(v295 + 4 * v32);
      ++v30;
      if (v31 == v23) {
        goto LABEL_177;
      }
    }
LABEL_26:
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add(&v295, (int *)v282 + 2, (uint64_t)&v326);
    if (*((_DWORD *)v282 + 11))
    {
      int v33 = *((_DWORD *)v282 + 10);
      if (v33 == 1)
      {
        uint64_t v34 = *(unsigned int *)(a1 + 116);
        uint64_t v259 = (v259 + 1);
        if (v259 > v34)
        {
          uint64_t v248 = [NSString stringWithFormat:@"Too many dynamic uniform buffers: used(%u), limit(%u)", v259, v34];
          WebGPU::reportErrorInCreateBindGroupLayout(v248, a3, a1);

          uint64_t v249 = WTF::fastMalloc((WTF *)0xD8);
          WebGPU::BindGroupLayout::BindGroupLayout(v249, (atomic_uchar *volatile *)a1);
LABEL_188:
          *(void *)a4 = v249;
          goto LABEL_335;
        }
      }
      else if ((v33 & 0xFFFFFFFE) == 2)
      {
        uint64_t v35 = *(unsigned int *)(a1 + 120);
        uint64_t v258 = (v258 + 1);
        if (v258 > v35)
        {
          long long v251 = [NSString stringWithFormat:@"Too many dynamic storage buffers: used(%u), limit(%u)", v258, v35];
          WebGPU::reportErrorInCreateBindGroupLayout(v251, a3, a1);

          uint64_t v249 = WTF::fastMalloc((WTF *)0xD8);
          WebGPU::BindGroupLayout::BindGroupLayout(v249, (atomic_uchar *volatile *)a1);
          goto LABEL_188;
        }
      }
    }
    int v267 = *((_DWORD *)v282 + 22);
    if (v267 == 2147483646)
    {
      if (*((void *)v282 + 10))
      {
        long long v279 = 0;
        goto LABEL_53;
      }
      if (*((_DWORD *)v282 + 24) && *((_DWORD *)v282 + 23) != 2)
      {
        long long v67 = 0;
      }
      else
      {
        long long v48 = objc_opt_new();
        [v48 setDataType:58];
        [v48 setAccess:0];
        long long v279 = v48;
        if (*((void *)v282 + 10))
        {
LABEL_53:
          long long v49 = 0;
          goto LABEL_91;
        }
        long long v67 = v48;
      }
      if (!*((_DWORD *)v282 + 24) || (long long v49 = 0, *((_DWORD *)v282 + 23) == 2) && *((_DWORD *)v282 + 22) != 1)
      {
        long long v49 = objc_opt_new();
        [v49 setDataType:58];
        [v49 setAccess:0];
      }
      long long v279 = v67;
LABEL_91:
      long long v326 = xmmword_1826CEB30;
      long long v327 = unk_1826CEB40;
      long long v64 = WebGPU::createArgumentDescriptor((uint64_t)&v326, *((_DWORD *)v282 + 6));
      DWORD2(v326) = 2147483645;
      long long v63 = WebGPU::createArgumentDescriptor((uint64_t)&v326, *((_DWORD *)v282 + 6));
      uint64_t v255 = 0;
      uint64_t v256 = 0;
      uint64_t v253 = 0;
      uint64_t v254 = 0;
      int v257 = 4;
      if (v279)
      {
LABEL_92:
        v266 = v63;
        LOBYTE(v314) = 0;
        BYTE4(v314) = 0;
        LOBYTE(v315) = 0;
        BYTE4(v315) = 0;
        LOBYTE(v316) = 0;
        BYTE4(v316) = 0;
        LOBYTE(v293) = 0;
        BYTE4(v293) = 0;
        BYTE8(v293) = 0;
        BYTE12(v293) = 0;
        LOBYTE(v294) = 0;
        BYTE4(v294) = 0;
        LOBYTE(v291) = 0;
        BYTE4(v291) = 0;
        BYTE8(v291) = 0;
        BYTE12(v291) = 0;
        LOBYTE(v292) = 0;
        BYTE4(v292) = 0;
        v260 = a4;
        long long v276 = v49;
        long long v271 = v64;
        if (*((_DWORD *)v282 + 6))
        {
          uint64_t v68 = 0;
          uint64_t v69 = 0;
          uint64_t v70 = (unsigned int *)v262;
          long long v71 = (char *)&v314 + 4;
          v265 = v24;
          while (1)
          {
            if ((*((_DWORD *)v282 + 6) >> v69))
            {
              uint64_t v72 = dword_1826CEB20[v69];
              *(void *)&long long v312 = v68 + *v24;
              *(void *)&long long v310 = [v279 access];
              WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits>::add<MTLBindingAccess>(&v326, &v308, (uint64_t *)&v312, (uint64_t *)&v310);
              if (a3) {
                long long v73 = v70;
              }
              else {
                long long v73 = v24;
              }
              unsigned int v74 = *v73;
              if ((a3 & 1) == 0) {
                v74 += *((_DWORD *)&v319 + v69);
              }
              long long v75 = (char *)&v293 + 8 * v72;
              *(_DWORD *)long long v75 = v74;
              v75[4] = 1;
              if (*((_DWORD *)v282 + 11))
              {
                uint64_t v76 = *(&v321 + v69);
                *long long v71 = 1;
                *((_DWORD *)v71 - 1) = v76;
                *(&v321 + v69) = v76 + 4;
              }
              int v77 = *((_DWORD *)v282 + 10);
              if (v77)
              {
                int v78 = *((_DWORD *)&v317 + v69) + 1;
                *((_DWORD *)&v317 + v69) = v78;
                long long v79 = (char *)&v291 + 8 * v72;
                *(_DWORD *)long long v79 = v78;
                v79[4] = 1;
                if (v77 == 1)
                {
                  uint64_t v80 = (*((_DWORD *)&v306 + v72) + 1);
                  *((_DWORD *)&v306 + v72) = v80;
                  uint64_t v81 = *(unsigned int *)(a1 + 140);
                  if (v80 > v81)
                  {
                    unsigned int v147 = objc_msgSend(NSString, "stringWithFormat:", @"Uniform buffers count(%u) exceeded max count per stage(%u)", v80, v81);
                    WebGPU::reportErrorInCreateBindGroupLayout(v147, a3, a1);
LABEL_193:

                    uint64_t v148 = WTF::fastMalloc((WTF *)0xD8);
                    WebGPU::BindGroupLayout::BindGroupLayout(v148, (atomic_uchar *volatile *)a1);
                    *(void *)v260 = v148;

                    goto LABEL_335;
                  }
                }
                else if ((v77 & 0xFFFFFFFE) == 2)
                {
                  uint64_t v82 = (*((_DWORD *)&v304 + v72) + 1);
                  *((_DWORD *)&v304 + v72) = v82;
                  uint64_t v83 = *(unsigned int *)(a1 + 132);
                  if (v82 > v83)
                  {
                    unsigned int v147 = objc_msgSend(NSString, "stringWithFormat:", @"Storage buffers count(%u) exceeded max count per stage(%u)", v82, v83);
                    WebGPU::reportErrorInCreateBindGroupLayout(v147, a3, a1);
                    goto LABEL_193;
                  }
                }
              }
              if (*((_DWORD *)v282 + 18))
              {
                uint64_t v84 = (*((_DWORD *)&v302 + v72) + 1);
                *((_DWORD *)&v302 + v72) = v84;
                uint64_t v85 = *(unsigned int *)(a1 + 128);
                if (v84 > v85)
                {
                  unsigned int v147 = objc_msgSend(NSString, "stringWithFormat:", @"Sampler count(%u) exceeded max count per stage(%u)", v84, v85);
                  WebGPU::reportErrorInCreateBindGroupLayout(v147, a3, a1);
                  goto LABEL_193;
                }
              }
              if (*((_DWORD *)v282 + 28))
              {
                if (*((_DWORD *)v282 + 29))
                {
                  if (*((_DWORD *)v282 + 30))
                  {
                    uint64_t v86 = (*((_DWORD *)&v298 + v72) + 1);
                    *((_DWORD *)&v298 + v72) = v86;
                    uint64_t v87 = *(unsigned int *)(a1 + 136);
                    if (v86 > v87)
                    {
                      unsigned int v147 = objc_msgSend(NSString, "stringWithFormat:", @"Storage texture count(%u) exceeded max count per stage(%u)", v86, v87);
                      WebGPU::reportErrorInCreateBindGroupLayout(v147, a3, a1);
                      goto LABEL_193;
                    }
                  }
                }
              }
              if (*((_DWORD *)v282 + 22))
              {
                if (*((_DWORD *)v282 + 23))
                {
                  uint64_t v88 = (*((_DWORD *)&v300 + v72) + 1);
                  *((_DWORD *)&v300 + v72) = v88;
                  uint64_t v89 = *(unsigned int *)(a1 + 124);
                  if (v88 > v89)
                  {
                    unsigned int v147 = objc_msgSend(NSString, "stringWithFormat:", @"Texture count(%u) exceeded max count per stage(%u)", v88, v89);
                    WebGPU::reportErrorInCreateBindGroupLayout(v147, a3, a1);
                    goto LABEL_193;
                  }
                }
              }
              id v90 = v279;
              id v91 = *(&v323 + v69);
              uint64_t v92 = (void *)[v90 copy];
              [v92 setIndex:v74];
              [v91 addObject:v92];

              id v93 = v276;
              if (v276)
              {
                int v94 = v93;
                id v95 = v91;
                unsigned int v96 = (void *)[v94 copy];
                [v96 setIndex:v74 + 1];
                [v95 addObject:v96];

                id v97 = v271;
                if (v271)
                {
                  uint64_t v98 = v97;
                  id v99 = v95;
                  long long v100 = (void *)[v98 copy];
                  [v100 setIndex:v74 + 2];
                  [v99 addObject:v100];

                  id v101 = v266;
                  if (v266)
                  {
                    long long v102 = v101;
                    id v103 = v99;
                    long long v104 = (void *)[v102 copy];
                    [v104 setIndex:v74 + 3];
                    [v103 addObject:v104];
                  }
                }
              }
              unsigned int v24 = v265;
              if (v267 == 2147483646) {
                *((_DWORD *)&v319 + v69) += 4;
              }
            }
            ++v69;
            v71 += 8;
            ++v70;
            v68 += 0x100000000;
            if (v69 == 3) {
              goto LABEL_125;
            }
          }
        }
        *(void *)&long long v312 = *v24 | 0x300000000;
        *(void *)&long long v310 = [v279 access];
        WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits>::add<MTLBindingAccess>(&v326, &v308, (uint64_t *)&v312, (uint64_t *)&v310);
LABEL_125:
        int v105 = *((_DWORD *)v282 + 2);
        int v106 = *((_DWORD *)v282 + 6);
        long long v312 = v293;
        uint64_t v313 = v294;
        long long v310 = v291;
        uint64_t v311 = v292;
        LODWORD(v289) = v314;
        BYTE4(v289) = BYTE4(v314);
        BYTE12(v289) = BYTE4(v315);
        DWORD2(v289) = v315;
        BYTE4(v290) = BYTE4(v316);
        LODWORD(v290) = v316;
        uint64_t v107 = (uint64_t)v297;
        if (v297
          || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebGPU::BindGroupLayout::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebGPU::BindGroupLayout::Entry>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::BindGroupLayout::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)&v297, 8u), (uint64_t v107 = (uint64_t)v297) != 0))
        {
          int v108 = *(_DWORD *)(v107 - 8);
        }
        else
        {
          int v108 = 0;
        }
        unsigned int v109 = *v24;
        unsigned int v110 = 9 * ((v109 + ~(v109 << 15)) ^ ((v109 + ~(v109 << 15)) >> 10));
        unsigned int v111 = (v110 ^ (v110 >> 6)) + ~((v110 ^ (v110 >> 6)) << 11);
        unsigned int v112 = (v111 ^ HIWORD(v111)) & v108;
        uint64_t v113 = v107 + 136 * v112;
        int v114 = *(_DWORD *)v113;
        if (*(_DWORD *)v113 != -1)
        {
          uint64_t v115 = 0;
          int v116 = 1;
          while (v114 != v109)
          {
            if (v114 == -2) {
              uint64_t v115 = v113;
            }
            unsigned int v112 = (v112 + v116) & v108;
            uint64_t v113 = v107 + 136 * v112;
            int v114 = *(_DWORD *)v113;
            ++v116;
            if (*(_DWORD *)v113 == -1)
            {
              if (v115)
              {
                *(_DWORD *)uint64_t v115 = -1;
                *(_OWORD *)(v115 + 8) = 0u;
                *(_OWORD *)(v115 + 24) = 0u;
                *(_OWORD *)(v115 + 40) = 0u;
                *(_OWORD *)(v115 + 56) = 0u;
                *(_OWORD *)(v115 + 72) = 0u;
                *(_OWORD *)(v115 + 88) = 0u;
                *(_OWORD *)(v115 + 104) = 0u;
                *(_OWORD *)(v115 + 120) = 0u;
                --*(v297 - 4);
                unsigned int v109 = *v24;
                uint64_t v113 = v115;
              }
              goto LABEL_136;
            }
          }
          goto LABEL_145;
        }
LABEL_136:
        *(_DWORD *)uint64_t v113 = v109;
        long long v328 = v312;
        uint64_t v329 = v313;
        uint64_t v331 = v311;
        long long v330 = v310;
        long long v332 = v289;
        uint64_t v333 = v290;
        *(_DWORD *)(v113 + 8) = v105;
        *(_DWORD *)(v113 + 12) = v106;
        *(void *)(v113 + 16) = v254;
        *(void *)(v113 + 24) = v253;
        *(void *)(v113 + 32) = v255;
        *(void *)(v113 + 40) = v256;
        *(_DWORD *)(v113 + 48) = v257;
        long long v117 = v328;
        *(void *)(v113 + 72) = v329;
        *(_OWORD *)(v113 + 56) = v117;
        long long v118 = v330;
        *(void *)(v113 + 96) = v331;
        *(_OWORD *)(v113 + 80) = v118;
        long long v119 = v332;
        *(void *)(v113 + 120) = v333;
        *(_OWORD *)(v113 + 104) = v119;
        *(_DWORD *)(v113 + 128) = -1;
        uint64_t v120 = (uint64_t)v297;
        if (v297)
        {
          int v121 = *(v297 - 4);
          int v122 = *(v297 - 3) + 1;
          *(v297 - 3) = v122;
          uint64_t v123 = (v121 + v122);
          unint64_t v124 = *(unsigned int *)(v120 - 4);
          if (v124 <= 0x400) {
            goto LABEL_138;
          }
LABEL_142:
          if (v124 <= 2 * v123)
          {
LABEL_143:
            unsigned int v125 = v124 << (6 * v122 >= (2 * v124));
            goto LABEL_144;
          }
        }
        else
        {
          int v122 = 1;
          MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
          uint64_t v123 = (MEMORY[0xFFFFFFFFFFFFFFF0] + 1);
          unint64_t v124 = MEMORY[0xFFFFFFFFFFFFFFFC];
          if (MEMORY[0xFFFFFFFFFFFFFFFC] > 0x400u) {
            goto LABEL_142;
          }
LABEL_138:
          if (3 * v124 <= 4 * v123)
          {
            if (v124) {
              goto LABEL_143;
            }
            unsigned int v125 = 8;
LABEL_144:
            WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebGPU::BindGroupLayout::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebGPU::BindGroupLayout::Entry>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::BindGroupLayout::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)&v297, v125);
          }
        }
LABEL_145:

        a4 = v260;
        goto LABEL_146;
      }
LABEL_321:
      uint64_t v247 = WTF::fastMalloc((WTF *)0xD8);
      WebGPU::BindGroupLayout::BindGroupLayout(v247, (atomic_uchar *volatile *)a1);
LABEL_328:
      long long v279 = 0;
LABEL_329:
      *(void *)a4 = v247;

      goto LABEL_334;
    }
    long long v36 = (uint64_t *)((char *)v282 + 40);
    if (!*((_DWORD *)v282 + 10))
    {
      long long v36 = (uint64_t *)((char *)v282 + 72);
      if (*((_DWORD *)v282 + 18))
      {
        long long v50 = (uint64_t *)((char *)v282 + 64);
        if (*((void *)v282 + 8)
          || (long long v51 = objc_opt_new(),
              [v51 setDataType:59],
              [v51 setAccess:0],
              (long long v279 = v51) == 0))
        {
          long long v279 = 0;
LABEL_326:
          uint64_t v247 = WTF::fastMalloc((WTF *)0xD8);
          WebGPU::BindGroupLayout::BindGroupLayout(v247, (atomic_uchar *volatile *)a1);
          long long v49 = 0;
          long long v64 = 0;
          long long v63 = 0;
          goto LABEL_329;
        }
        uint64_t v52 = 0;
        uint64_t v53 = 0;
        int v54 = 1;
        uint64_t v55 = v282;
        goto LABEL_61;
      }
      uint64_t v52 = 0;
      int v54 = 0;
      if (v267)
      {
        int v65 = *((_DWORD *)v282 + 23);
        uint64_t v53 = 0;
        uint64_t v57 = 0;
        uint64_t v56 = 0;
        long long v279 = 0;
        if (v65)
        {
          if (*((void *)v282 + 10)) {
            goto LABEL_331;
          }
          if (*((_DWORD *)v282 + 24))
          {
            long long v279 = 0;
            long long v61 = @"Texture layout not valid";
            if (v267 == 1 || v65 != 2) {
              goto LABEL_333;
            }
          }
          long long v66 = objc_opt_new();
          [v66 setDataType:58];
          [v66 setAccess:0];
          long long v279 = v66;
          if (!v66)
          {
LABEL_331:
            long long v279 = 0;
LABEL_332:
            long long v61 = @"Texture layout not valid";
LABEL_333:
            WebGPU::reportErrorInCreateBindGroupLayout(v61, a3, a1);
            WebGPU::BindGroupLayout::createInvalid(a4, (atomic_uchar *volatile *)a1);
LABEL_334:

            goto LABEL_335;
          }
          uint64_t v52 = 0;
          uint64_t v56 = *((void *)v282 + 10);
          uint64_t v57 = *((void *)v282 + 11);
          int v54 = 2;
          uint64_t v53 = *((void *)v282 + 12);
        }
      }
      else
      {
        uint64_t v53 = 0;
        uint64_t v57 = 0;
        uint64_t v56 = 0;
        long long v279 = 0;
      }
LABEL_63:
      long long v49 = 0;
      int v58 = *((_DWORD *)v282 + 28);
      uint64_t v256 = v52;
      if (v58 && (v59 = *((_DWORD *)v282 + 29)) != 0 && (int v60 = *((_DWORD *)v282 + 30)) != 0)
      {
        if (v279) {
          goto LABEL_324;
        }
        if (*((void *)v282 + 13)) {
          goto LABEL_323;
        }
        long long v279 = 0;
        if (((v58 != 2) & *((unsigned char *)v282 + 24)) != 0)
        {
LABEL_324:
          long long v61 = @"Storage texture layout not valid";
          goto LABEL_333;
        }
        long long v61 = @"Storage texture layout not valid";
        if ((v60 & 0xFFFFFFFE) == 4) {
          goto LABEL_333;
        }
        if (!WebGPU::Texture::hasStorageBindingCapability(v59, a1, v58)
          || (long long v62 = objc_opt_new(),
              [v62 setDataType:58],
              [v62 setAccess:1],
              (long long v279 = v62) == 0))
        {
LABEL_323:
          long long v279 = 0;
          long long v61 = @"Storage texture layout not valid";
          goto LABEL_333;
        }
        long long v63 = 0;
        long long v64 = 0;
        long long v49 = 0;
        uint64_t v253 = *((void *)v282 + 14);
        uint64_t v254 = *((void *)v282 + 13);
        int v257 = 3;
        uint64_t v255 = *((void *)v282 + 15);
      }
      else
      {
        uint64_t v253 = v57;
        uint64_t v254 = v56;
        uint64_t v255 = v53;
        int v257 = v54;
        long long v64 = 0;
        long long v63 = 0;
        if (!v279) {
          goto LABEL_321;
        }
      }
      goto LABEL_92;
    }
    if (*((_DWORD *)v282 + 10) != 2147483644)
    {
      long long v50 = (uint64_t *)((char *)v282 + 32);
      long long v279 = WebGPU::createArgumentDescriptor((uint64_t)v282 + 32, *((_DWORD *)v282 + 6));
      if (!v279)
      {
        WebGPU::reportErrorInCreateBindGroupLayout(@"Buffer layout is not valid", a3, a1);
        uint64_t v247 = WTF::fastMalloc((WTF *)0xD8);
        WebGPU::BindGroupLayout::BindGroupLayout(v247, (atomic_uchar *volatile *)a1);
        long long v49 = 0;
        long long v64 = 0;
        long long v63 = 0;
        goto LABEL_328;
      }
      uint64_t v55 = v282;
      if (*((_DWORD *)v282 + 18)) {
        goto LABEL_326;
      }
      int v54 = 0;
      uint64_t v53 = *((void *)v282 + 6);
      uint64_t v52 = *((void *)v282 + 7);
LABEL_61:
      uint64_t v56 = *v50;
      uint64_t v57 = *v36;
      if (*((_DWORD *)v55 + 22) && *((_DWORD *)v55 + 23)) {
        goto LABEL_332;
      }
      goto LABEL_63;
    }
    int v37 = *((_DWORD *)v282 + 14);
    uint64_t v38 = v296;
    if (v296
      || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(&v296, 8u, 0), (uint64_t v38 = v296) != 0))
    {
      int v39 = *(_DWORD *)(v38 - 8);
    }
    else
    {
      int v39 = 0;
    }
    unsigned int v40 = 9 * ((~(v37 << 15) + v37) ^ ((~(v37 << 15) + v37) >> 10));
    unsigned int v41 = (v40 ^ (v40 >> 6)) + ~((v40 ^ (v40 >> 6)) << 11);
    unsigned int v42 = v39 & (v41 ^ HIWORD(v41));
    uint64_t v43 = v38 + 16 * v42;
    int v44 = *(_DWORD *)v43;
    if (*(_DWORD *)v43 != -1)
    {
      uint64_t v45 = 0;
      int v46 = 1;
      do
      {
        if (v44 == v37)
        {
          *(void *)(v43 + 8) = *v24;
          goto LABEL_146;
        }
        if (v44 == -2) {
          uint64_t v45 = v43;
        }
        unsigned int v42 = (v42 + v46) & v39;
        uint64_t v43 = v38 + 16 * v42;
        int v44 = *(_DWORD *)v43;
        ++v46;
      }
      while (*(_DWORD *)v43 != -1);
      if (v45)
      {
        *(_DWORD *)uint64_t v45 = -1;
        *(void *)(v45 + 8) = 0;
        --*(_DWORD *)(v296 - 16);
        uint64_t v43 = v45;
      }
    }
    *(_DWORD *)uint64_t v43 = v37;
    *(void *)(v43 + 8) = *v24;
    if (v296) {
      int v47 = *(_DWORD *)(v296 - 12) + 1;
    }
    else {
      int v47 = 1;
    }
    *(_DWORD *)(v296 - 12) = v47;
    if (v296) {
      int v126 = *(_DWORD *)(v296 - 12);
    }
    else {
      int v126 = 0;
    }
    uint64_t v127 = (*(_DWORD *)(v296 - 16) + v126);
    unint64_t v128 = *(unsigned int *)(v296 - 4);
    if (v128 > 0x400)
    {
      if (v128 > 2 * v127) {
        goto LABEL_146;
      }
LABEL_158:
      unsigned int v129 = v128 << (6 * *(_DWORD *)(v296 - 12) >= (2 * v128));
      goto LABEL_159;
    }
    if (3 * v128 > 4 * v127) {
      goto LABEL_146;
    }
    if (v128) {
      goto LABEL_158;
    }
    unsigned int v129 = 8;
LABEL_159:
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(&v296, v129, (_DWORD *)v43);
LABEL_146:
    uint64_t v21 = (WTF *)((char *)v282 + 128);
    v262 += 128;
  }
  while ((WTF *)((char *)v282 + 128) != v272);
  if (v321 || v322 != 0)
  {
    if (a3)
    {
      __break(0xC471u);
      goto LABEL_348;
    }
    if (v263)
    {
      int v130 = 0;
      uint64_t v131 = (uint64_t)v297;
      unint64_t v132 = v268;
      do
      {
        if (*((_DWORD *)v132 + 11))
        {
          int v134 = *(_DWORD *)(v131 - 8);
          int v135 = *((_DWORD *)v132 + 2);
          unsigned int v136 = 9 * ((v135 + ~(v135 << 15)) ^ ((v135 + ~(v135 << 15)) >> 10));
          unsigned int v137 = (v136 ^ (v136 >> 6)) + ~((v136 ^ (v136 >> 6)) << 11);
          unsigned int v138 = (v137 ^ HIWORD(v137)) & v134;
          long long v133 = (int *)(v131 + 136 * v138);
          int v139 = *v133;
          if (*v133 != v135)
          {
            int v140 = 1;
            while (v139 != -1)
            {
              unsigned int v138 = (v138 + v140) & v134;
              long long v133 = (int *)(v131 + 136 * v138);
              int v139 = *v133;
              ++v140;
              if (*v133 == v135) {
                goto LABEL_169;
              }
            }
            long long v133 = (int *)(v131 + 136 * *(unsigned int *)(v131 - 4));
          }
LABEL_169:
          v133[32] = v130++;
        }
        unint64_t v132 = (WTF *)((char *)v132 + 128);
      }
      while (v132 != v272);
    }
  }
LABEL_196:
  if (*(void *)(a2 + 8)) {
    strlen(*(const char **)(a2 + 8));
  }
  __n128 v261 = a4;
  WTF::String::fromUTF8();
  uint64_t v149 = 0;
  long long v326 = 0uLL;
  *(void *)&long long v327 = 0;
  long long v315 = 0;
  id v314 = 0;
  long long v316 = 0;
  while (2)
  {
    if (*((_DWORD *)&v317 + v149))
    {
      uint64_t v150 = dword_1826CEB20[v149];
      unint64_t v151 = objc_opt_new();
      [v151 setDataType:29];
      [v151 setAccess:0];
      unsigned int v152 = objc_msgSend(*(&v323 + v149), "objectAtIndex:", objc_msgSend(*(&v323 + v149), "count") - 1);
      int v153 = [v152 index];

      if (!v297) {
        goto LABEL_208;
      }
      uint64_t v154 = *(v297 - 1);
      long long v155 = &v297[34 * v154];
      if (*(v297 - 3))
      {
        unint64_t v156 = v297;
        if (v154)
        {
          uint64_t v157 = 136 * v154;
          unint64_t v156 = v297;
          while (*v156 >= 0xFFFFFFFE)
          {
            v156 += 34;
            v157 -= 136;
            if (!v157)
            {
              unint64_t v156 = v155;
              break;
            }
          }
        }
      }
      else
      {
        unint64_t v156 = &v297[34 * v154];
        long long v155 = v156;
      }
      unint64_t v158 = &v297[34 * *(v297 - 1)];
      if (v158 == v156)
      {
LABEL_208:

        goto LABEL_209;
      }
      while (2)
      {
        long long v164 = &v156[2 * v150];
        if (!*((unsigned char *)v164 + 84)) {
          goto LABEL_225;
        }
        unsigned int v165 = v164 + 20;
        if (a3)
        {
          if (!v296) {
            goto LABEL_220;
          }
          unsigned int v166 = *(_DWORD *)(v296 - 8);
          int v167 = v156[2];
          unsigned int v168 = 9 * ((v167 + ~(v167 << 15)) ^ ((v167 + ~(v167 << 15)) >> 10));
          unsigned int v169 = (v168 ^ (v168 >> 6)) + ~((v168 ^ (v168 >> 6)) << 11);
          uint64_t v170 = (v169 ^ HIWORD(v169)) & v166;
          int v171 = *(_DWORD *)(v296 + 16 * v170);
          if (v171 != v167)
          {
            int v172 = 1;
            while (v171 != -1)
            {
              uint64_t v170 = (v170 + v172) & v166;
              int v171 = *(_DWORD *)(v296 + 16 * v170);
              ++v172;
              if (v171 == v167) {
                goto LABEL_219;
              }
            }
LABEL_220:
            *((unsigned char *)v165 + 4) = 0;
LABEL_225:
            long long v176 = v156 + 34;
            unint64_t v156 = v155;
            if (v176 != v155)
            {
              unint64_t v156 = v176;
              while (*v156 >= 0xFFFFFFFE)
              {
                v156 += 34;
                if (v156 == v155)
                {
                  unint64_t v156 = v155;
                  break;
                }
              }
            }
            if (v156 == v158) {
              goto LABEL_208;
            }
            continue;
          }
LABEL_219:
          if (v170 == *(_DWORD *)(v296 - 4)) {
            goto LABEL_220;
          }
          unsigned int v173 = *(_DWORD *)(v296 + 16 * v170 + 8);
        }
        else
        {
          unsigned int v173 = *v165 + v153;
        }
        break;
      }
      *unsigned int v165 = v173;
      id v174 = *(&v323 + v149);
      uint64_t v175 = (void *)[v151 copy];
      [v175 setIndex:v173];
      [v174 addObject:v175];

      goto LABEL_225;
    }
LABEL_209:
    unsigned int v159 = *(&v323 + v149);
    long long v160 = [v159 sortedArrayUsingComparator:&__block_literal_global_39];
    objc_storeStrong((id *)&v326 + v149, v160);
    if ([v159 count])
    {
      id v161 = (id)[*(id *)(a1 + 8) newArgumentEncoderWithArguments:v160];
      long long v162 = &v314 + v149;
      objc_storeStrong(v162, v161);
      id v163 = v161;
    }
    else
    {
      id v163 = 0;
      long long v162 = &v314 + v149;
      id v161 = *v162;
      *long long v162 = 0;
    }

    if ((void)v312)
    {
      long long v177 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      id v163 = *v162;
    }
    else
    {
      long long v177 = &stru_1ECABF938;
    }
    [v163 setLabel:v177];

    if ([*(&v323 + v149) count] && !*v162)
    {
      uint64_t v240 = WTF::fastMalloc((WTF *)0xD8);
      WebGPU::BindGroupLayout::BindGroupLayout(v240, (atomic_uchar *volatile *)a1);
      *__n128 v261 = v240;

      id v224 = v316;
      id v223 = v315;
      id v222 = v314;
      goto LABEL_317;
    }

    if (++v149 != 3) {
      continue;
    }
    break;
  }
  uint64_t v178 = 0;
  long long v293 = 0uLL;
  uint64_t v294 = 0;
  while (2)
  {
    long long v287 = 0u;
    long long v288 = 0u;
    long long v285 = 0u;
    long long v286 = 0u;
    id v179 = *((id *)&v326 + v178);
    uint64_t v180 = [v179 countByEnumeratingWithState:&v285 objects:v309 count:16];
    if (!v180) {
      goto LABEL_281;
    }
    uint64_t v275 = *(void *)v286;
    long long v277 = v179;
    uint64_t v273 = v178;
    while (2)
    {
      uint64_t v280 = v180;
      uint64_t v181 = 0;
      while (2)
      {
        if (*(void *)v286 != v275) {
          objc_enumerationMutation(v179);
        }
        id v182 = *(id *)(*((void *)&v285 + 1) + 8 * v181);
        uint64_t v183 = dword_1826CEB20[v178];
        id v283 = v182;
        int v184 = [v182 index];
        long long v185 = (_OWORD *)*((void *)&v293 + v183);
        if (v185)
        {
          int v186 = *((_DWORD *)v185 - 2);
        }
        else
        {
          v187 = (_OWORD *)WTF::fastMalloc((WTF *)0x30);
          *(void *)&long long v188 = -1;
          *((void *)&v188 + 1) = -1;
          v187[1] = v188;
          long long v185 = v187 + 1;
          v187[2] = v188;
          *((void *)&v293 + v183) = v187 + 1;
          _OWORD *v187 = xmmword_1826CEB00;
          if (v187 == (_OWORD *)-16) {
            int v186 = 0;
          }
          else {
            int v186 = 7;
          }
        }
        unsigned int v189 = 9 * ((~(v184 << 15) + v184) ^ ((~(v184 << 15) + v184) >> 10));
        unsigned int v190 = v186 & (((v189 ^ (v189 >> 6)) + ~((v189 ^ (v189 >> 6)) << 11)) ^ (((v189 ^ (v189 >> 6))
                                                                                + ~((v189 ^ (v189 >> 6)) << 11)) >> 16));
        uint64_t v191 = (_DWORD *)v185 + v190;
        int v192 = *v191;
        if (*v191 == -1)
        {
LABEL_257:
          _DWORD *v191 = v184;
          uint64_t v195 = *((void *)&v293 + v183);
          if (v195) {
            int v196 = *(_DWORD *)(v195 - 12) + 1;
          }
          else {
            int v196 = 1;
          }
          int v197 = *(_DWORD *)(v195 - 16);
          *(_DWORD *)(v195 - 12) = v196;
          uint64_t v198 = (v197 + v196);
          unint64_t v199 = *(unsigned int *)(v195 - 4);
          if (v199 > 0x400)
          {
            if (v199 > 2 * v198) {
              goto LABEL_279;
            }
          }
          else
          {
            if (3 * v199 > 4 * v198) {
              goto LABEL_279;
            }
            if (!v199)
            {
              unsigned int v200 = 8;
LABEL_266:
              uint64_t v201 = WTF::fastMalloc((WTF *)(4 * v200 + 16));
              unsigned int v203 = (_DWORD *)v201;
              uint64_t v204 = v201 + 16;
              if (v200) {
                memset((void *)(v201 + 16), 255, 4 * v200);
              }
              *((void *)&v293 + v183) = v204;
              unsigned int v205 = v200 - 1;
              v203[2] = v200 - 1;
              v203[3] = v200;
              *unsigned int v203 = 0;
              v203[1] = v196;
              if (!v199) {
                goto LABEL_278;
              }
              uint64_t v206 = 0;
              if (!v204) {
                unsigned int v205 = 0;
              }
              do
              {
                unsigned int v207 = *(_DWORD *)(v195 + 4 * v206);
                if (v207 <= 0xFFFFFFFD)
                {
                  int v208 = 0;
                  unsigned int v209 = 9 * ((v207 + ~(v207 << 15)) ^ ((v207 + ~(v207 << 15)) >> 10));
                  unsigned int v210 = ((v209 ^ (v209 >> 6)) + ~((v209 ^ (v209 >> 6)) << 11)) ^ (((v209 ^ (v209 >> 6))
                                                                                  + ~((v209 ^ (v209 >> 6)) << 11)) >> 16);
                  do
                  {
                    uint64_t v211 = v210 & v205;
                    unsigned int v210 = ++v208 + v211;
                  }
                  while (*(_DWORD *)(v204 + 4 * v211) != -1);
                  *(_DWORD *)(v204 + 4 * v211) = v207;
                }
                ++v206;
              }
              while (v206 != v199);
              if (v195) {
LABEL_278:
              }
                WTF::fastFree((WTF *)(v195 - 16), v202);
              goto LABEL_279;
            }
          }
          unsigned int v200 = v199 << (6 * v196 >= (2 * v199));
          goto LABEL_266;
        }
        unsigned int v193 = 0;
        int v194 = 1;
        while (v192 != v184)
        {
          if (v192 == -2) {
            unsigned int v193 = v191;
          }
          unsigned int v190 = (v190 + v194) & v186;
          uint64_t v191 = (_DWORD *)v185 + v190;
          int v192 = *v191;
          ++v194;
          if (*v191 == -1)
          {
            if (v193)
            {
              *unsigned int v193 = -1;
              --*(_DWORD *)(*((void *)&v293 + v183) - 16);
              uint64_t v191 = v193;
            }
            goto LABEL_257;
          }
        }
LABEL_279:

        uint64_t v178 = v273;
        ++v181;
        id v179 = v277;
        if (v181 != v280) {
          continue;
        }
        break;
      }
      uint64_t v180 = [v277 countByEnumeratingWithState:&v285 objects:v309 count:16];
      if (v180) {
        continue;
      }
      break;
    }
LABEL_281:

    if (++v178 != 3) {
      continue;
    }
    break;
  }
  uint64_t v212 = v315;
  uint64_t v213 = v316;
  uint64_t v214 = v321;
  long long v215 = v322;
  id v278 = v314;
  id v281 = v212;
  id v284 = v213;
  uint64_t v216 = WTF::fastMalloc((WTF *)0xD8);
  id v217 = v278;
  id v218 = v281;
  id v219 = v284;
  int v220 = 1;
  *(_DWORD *)uint64_t v216 = 1;
  *(void *)(v216 + 8) = 0;
  uint64_t v221 = v308;
  uint64_t v308 = 0;
  *(void *)(v216 + 16) = v221;
  id v222 = v217;
  *(void *)(v216 + 24) = v222;
  id v223 = v218;
  *(void *)(v216 + 32) = v223;
  id v224 = v219;
  char v225 = 0;
  *(void *)(v216 + 56) = 0;
  unsigned int v226 = (void **)(v216 + 56);
  uint64_t v227 = (uint64_t)v297;
  *(void *)(v216 + 40) = v224;
  *(void *)(v216 + 48) = v227;
  long long v297 = 0;
  *(void *)(v216 + 64) = 0;
  *(unsigned char *)(v216 + 72) = 1;
  *(void *)(v216 + 80) = v214;
  *(_OWORD *)(v216 + 88) = v215;
  atomic_uchar *volatile v228 = *(atomic_uchar *volatile *)a1;
  atomic_compare_exchange_strong_explicit(*(atomic_uchar *volatile *)a1, (unsigned __int8 *)&v225, 1u, memory_order_acquire, memory_order_acquire);
  if (v225) {
    MEMORY[0x18530AEA0](v228);
  }
  ++*((void *)v228 + 1);
  atomic_compare_exchange_strong_explicit(v228, (unsigned __int8 *)&v220, 0, memory_order_release, memory_order_relaxed);
  if (v220 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v228);
  }
  *(void *)(v216 + 104) = a1;
  *(void *)(v216 + 112) = 0;
  *(unsigned char *)(v216 + 120) = a3;
  *(void *)(v216 + 124) = v306;
  *(_DWORD *)(v216 + 132) = v307;
  *(void *)(v216 + 136) = v304;
  *(_DWORD *)(v216 + 144) = v305;
  *(void *)(v216 + 148) = v302;
  *(_DWORD *)(v216 + 156) = v303;
  *(_DWORD *)(v216 + 168) = v301;
  *(void *)(v216 + 160) = v300;
  *(_DWORD *)(v216 + 180) = v299;
  *(void *)(v216 + 172) = v298;
  *(_OWORD *)(v216 + 184) = v293;
  long long v293 = 0uLL;
  uint64_t v229 = v294;
  uint64_t v294 = 0;
  *(void *)(v216 + 200) = v229;
  *(_DWORD *)(v216 + 208) = v259;
  *(_DWORD *)(v216 + 212) = v258;
  uint64_t v230 = *(void *)(v216 + 48);
  if (!v230) {
    goto LABEL_312;
  }
  uint64_t v231 = *(unsigned int *)(v230 - 12);
  if (*(_DWORD *)(v216 + 64) < v231)
  {
    if (!(v231 >> 29))
    {
      unsigned int v232 = *v226;
      uint64_t v233 = *(unsigned int *)(v216 + 68);
      uint64_t v234 = (void *)WTF::fastMalloc((WTF *)(8 * v231));
      *(_DWORD *)(v216 + 64) = v231;
      *(void *)(v216 + 56) = v234;
      memcpy(v234, v232, 8 * v233);
      if (v232)
      {
        if (*v226 == v232)
        {
          *(void *)(v216 + 56) = 0;
          *(_DWORD *)(v216 + 64) = 0;
        }
        WTF::fastFree((WTF *)v232, v235);
      }
      goto LABEL_293;
    }
    __break(0xC471u);
LABEL_348:
    JUMPOUT(0x1824D6A5CLL);
  }
  uint64_t v236 = *(void *)(v216 + 48);
  if (!v236 || !*(_DWORD *)(v236 - 12)) {
    goto LABEL_312;
  }
LABEL_293:
  uint64_t v237 = *(unsigned int *)(v236 - 4);
  if (v237)
  {
    uint64_t v238 = 136 * v237;
    uint64_t v239 = *(_DWORD **)(v216 + 48);
    while (*v239 >= 0xFFFFFFFE)
    {
      v239 += 34;
      v238 -= 136;
      if (!v238) {
        goto LABEL_312;
      }
    }
  }
  else
  {
    uint64_t v239 = *(_DWORD **)(v216 + 48);
  }
  long long v241 = (_DWORD *)(v236 + 136 * v237);
  if (v241 != v239)
  {
    LODWORD(v242) = *(_DWORD *)(v216 + 68);
LABEL_304:
    *(void *)&long long v291 = v239 + 2;
    if (v242 == *(_DWORD *)(v216 + 64))
    {
      long long v243 = (void *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v216 + 56, v242 + 1, (unint64_t)&v291);
      uint64_t v242 = *(unsigned int *)(v216 + 68);
      *(void *)(*(void *)(v216 + 56) + 8 * v242) = *v243;
    }
    else
    {
      *((void *)*v226 + v242) = v239 + 2;
    }
    LODWORD(v242) = v242 + 1;
    *(_DWORD *)(v216 + 68) = v242;
    while (1)
    {
      v239 += 34;
      if (v239 == v241) {
        break;
      }
      if (*v239 < 0xFFFFFFFE)
      {
        if (v239 != v241) {
          goto LABEL_304;
        }
        break;
      }
    }
  }
  else
  {
LABEL_312:
    LODWORD(v242) = *(_DWORD *)(v216 + 68);
  }
  unint64_t v244 = 126 - 2 * __clz(v242);
  if (v242) {
    uint64_t v245 = v244;
  }
  else {
    uint64_t v245 = 0;
  }
  std::__introsort<std::_ClassicAlgPolicy,WebGPU::BindGroupLayout::BindGroupLayout(WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits> &&,objc_object  {objcproto18MTLArgumentEncoder}*,objc_object,objc_object,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &&,unsigned long,unsigned long,unsigned long,BOOL,WTF::EnumeratedArray<WebGPU::ShaderStage,unsigned int,(WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &)2> &&,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,unsigned int,unsigned int,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits><WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &,WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WebGPU::BindGroupLayout::Entry,WTF::HashTableTraits>,(WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &)2> &&,WebGPU::Device const&)::$_0 &,objc_object  {objcproto18MTLArgumentEncoder} const**,false>(*(unsigned int ***)(v216 + 56), (unsigned int **)(*(void *)(v216 + 56) + 8 * v242), v245, 1);

  *__n128 v261 = v216;
LABEL_317:

  unint64_t v246 = (_DWORD *)v312;
  *(void *)&long long v312 = 0;
  if (v246)
  {
    if (*v246 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v246 -= 2;
    }
  }
LABEL_335:
  if (v295) {
    WTF::fastFree((WTF *)(v295 - 16), v250);
  }
  if (v296) {
    WTF::fastFree((WTF *)(v296 - 16), v250);
  }
  if (v297) {
    WTF::fastFree((WTF *)(v297 - 4), v250);
  }
  if (v268) {
    WTF::fastFree(v268, v250);
  }

  if (v308) {
    WTF::fastFree((WTF *)(v308 - 16), v252);
  }
}

void sub_1824D6A74(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,WTF *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,void *a44,void *a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unsigned int v74 = *v70;
  if (*v70)
  {
    *(void *)(v68 + 56) = 0;
    *(_DWORD *)(v68 + 64) = 0;
    WTF::fastFree(v74, a2);
  }
  uint64_t v75 = *(void *)(v68 + 48);
  if (v75) {
    WTF::fastFree((WTF *)(v75 - 16), a2);
  }

  uint64_t v77 = *(void *)(v68 + 16);
  if (v77) {
    WTF::fastFree((WTF *)(v77 - 16), v76);
  }
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(a43, v76);

  WTF::fastFree((WTF *)v68, v78);
  WTF::EnumeratedArray<WebGPU::ShaderStage,WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,(WebGPU::ShaderStage)2>::~EnumeratedArray(&a61, v79);

  uint64_t v81 = (_DWORD *)STACK[0x2C0];
  STACK[0x2C0] = 0;
  if (v81)
  {
    if (*v81 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v81 -= 2;
    }
  }
  if (a65)
  {
    WTF::fastFree((WTF *)(a65 - 16), v80);
    uint64_t v82 = a66;
    if (!a66)
    {
LABEL_13:
      uint64_t v83 = a67;
      if (!a67) {
        goto LABEL_14;
      }
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v82 = a66;
    if (!a66) {
      goto LABEL_13;
    }
  }
  WTF::fastFree((WTF *)(v82 - 16), v80);
  uint64_t v83 = a67;
  if (!a67)
  {
LABEL_14:
    if (!a36) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_20:
  WTF::fastFree((WTF *)(v83 - 16), v80);
  if (!a36)
  {
LABEL_16:

    if (STACK[0x218])
    {
      WTF::fastFree((WTF *)(STACK[0x218] - 16), v84);
      _Unwind_Resume(a1);
    }
    _Unwind_Resume(a1);
  }
LABEL_15:
  WTF::fastFree(a36, v80);
  goto LABEL_16;
}

uint64_t WebGPU::BindGroupLayout::createInvalid(WebGPU::BindGroupLayout *this, atomic_uchar *volatile *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0xD8);
  uint64_t result = WebGPU::BindGroupLayout::BindGroupLayout(v4, a2);
  *(void *)this = v4;
  return result;
}

void sub_1824D6EF0(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebGPU::reportErrorInCreateBindGroupLayout(void *a1, char a2, uint64_t a3)
{
  id v5 = a1;
  if (a2) {
    goto LABEL_13;
  }
  MEMORY[0x18530AF50](&v15, v5);
  uint64_t v6 = *(void *)(a3 + 32);
  uint64_t v7 = 32 * *(unsigned int *)(a3 + 44);
  uint64_t v8 = v6 + v7;
  while (v7)
  {
    int v9 = *(_DWORD *)(v8 - 8);
    v8 -= 32;
    v7 -= 32;
    if (!v9)
    {
      uint64_t v10 = v6 + v7;
      if (!*(unsigned char *)(v10 + 16))
      {
        uint64_t v11 = v15;
        long long v15 = 0;
        *(_DWORD *)uint64_t v10 = 1;
        *(void *)(v10 + 8) = v11;
        *(unsigned char *)(v10 + 16) = 1;
      }
      goto LABEL_10;
    }
  }
  uint64_t v12 = *(void *)(a3 + 24);
  if (v12)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v12 + 16))(v12, 1, &v15);
    uint64_t v13 = *(void *)(a3 + 24);
    *(void *)(a3 + 24) = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
LABEL_10:
  long long v14 = v15;
  long long v15 = 0;
  if (!v14) {
    goto LABEL_13;
  }
  if (*v14 != 2)
  {
    *v14 -= 2;
LABEL_13:

    return;
  }
  WTF::StringImpl::destroy();
}

void sub_1824D703C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a10 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

id WebGPU::createArgumentDescriptor(uint64_t a1, char a2)
{
  if (*(void *)a1)
  {
    uint64_t v2 = 0;
    return v2;
  }
  uint64_t v6 = objc_opt_new();
  uint64_t v7 = v6;
  int v8 = *(_DWORD *)(a1 + 8);
  if (v8 == 2147483645)
  {
    uint64_t v9 = 14;
  }
  else
  {
    if (v8 != 2147483646)
    {
      [v6 setDataType:60];
      uint64_t v12 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = v7;
      switch(v8)
      {
        case 0:
          goto LABEL_12;
        case 1:
        case 3:
          goto LABEL_10;
        case 2:
          if ((a2 & 1) == 0)
          {
            uint64_t v10 = 1;
            goto LABEL_10;
          }
          uint64_t v12 = 0;
          uint64_t v11 = v7;
          break;
        default:
          if (v8 != 0x7FFFFFFF) {
            goto LABEL_11;
          }
          uint64_t v11 = v7;
          goto LABEL_12;
      }
      goto LABEL_12;
    }
    uint64_t v9 = 10;
  }
  [v6 setDataType:v9];
  uint64_t v10 = 0;
LABEL_10:
  [v7 setAccess:v10];
LABEL_11:
  uint64_t v11 = 0;
  uint64_t v12 = v7;
LABEL_12:

  uint64_t v2 = v12;
  return v2;
}

void sub_1824D71C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_OWORD *WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits>::add<MTLBindingAccess>(_OWORD *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,MTLBindingAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,MTLBindingAccess>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(a2, 8u, 0), (uint64_t v8 = *a2) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a3;
  unint64_t v12 = *a3 + ~(*a3 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  long long v16 = (void *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16 == -1)
  {
LABEL_12:
    uint64_t v20 = *a4;
    *long long v16 = v11;
    v16[1] = v20;
    if (*a2)
    {
      ++*(_DWORD *)(*a2 - 12);
      uint64_t v21 = *a2;
      if (*a2) {
        goto LABEL_14;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      uint64_t v21 = *a2;
      if (*a2)
      {
LABEL_14:
        uint64_t v22 = (*(_DWORD *)(v21 - 16) + *(_DWORD *)(v21 - 12));
        unint64_t v23 = *(unsigned int *)(v21 - 4);
        if (v23 <= 0x400) {
          goto LABEL_15;
        }
        goto LABEL_23;
      }
    }
    uint64_t v22 = *(unsigned int *)(v21 - 16);
    unint64_t v23 = *(unsigned int *)(v21 - 4);
    if (v23 <= 0x400)
    {
LABEL_15:
      if (3 * v23 > 4 * v22)
      {
LABEL_26:
        *(void *)uint64_t v7 = v16;
        *((void *)v7 + 1) = v21 + 16 * v23;
        *((unsigned char *)v7 + 16) = 1;
        return result;
      }
      if (!v23)
      {
        uint64_t result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,MTLBindingAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,MTLBindingAccess>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(a2, 8u, v16);
        long long v16 = result;
        uint64_t v21 = *a2;
        if (!*a2)
        {
LABEL_18:
          unint64_t v23 = 0;
          goto LABEL_26;
        }
LABEL_25:
        unint64_t v23 = *(unsigned int *)(v21 - 4);
        goto LABEL_26;
      }
LABEL_24:
      uint64_t result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,MTLBindingAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,MTLBindingAccess>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(a2, v23 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v23)), v16);
      long long v16 = result;
      uint64_t v21 = *a2;
      if (!*a2) {
        goto LABEL_18;
      }
      goto LABEL_25;
    }
LABEL_23:
    if (v23 > 2 * v22) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  unint64_t v18 = 0;
  int v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -2) {
      unint64_t v18 = v16;
    }
    unsigned int v15 = (v15 + v19) & v10;
    long long v16 = (void *)(v8 + 16 * v15);
    uint64_t v17 = *v16;
    ++v19;
    if (*v16 == -1)
    {
      if (v18)
      {
        *unint64_t v18 = xmmword_1826CEB10;
        --*(_DWORD *)(*a2 - 16);
        uint64_t v11 = *a3;
        long long v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if (v9) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = *(unsigned int *)(v8 - 4);
  }
  *(void *)uint64_t v7 = v16;
  *((void *)v7 + 1) = v8 + 16 * v24;
  *((unsigned char *)v7 + 16) = 0;
  return result;
}

uint64_t ___ZN6WebGPU6Device21createBindGroupLayoutERK29WGPUBindGroupLayoutDescriptorb_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  unint64_t v6 = [v4 index];
  if (v6 >= [v5 index])
  {
    uint64_t v8 = [v4 index];
    uint64_t v7 = v8 != [v5 index];
  }
  else
  {
    uint64_t v7 = -1;
  }

  return v7;
}

void sub_1824D7480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebGPU::BindGroupLayout::errorValidatingDynamicOffsets(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (*(_DWORD *)(a1 + 208) + *(_DWORD *)(a1 + 212));
  if (v4 == a3)
  {
    if (a3)
    {
      uint64_t v5 = *(void *)(a4 + 72);
      if (v5)
      {
        uint64_t v6 = 0;
        uint64_t v7 = *(void *)(a1 + 104);
        unsigned int v8 = *(_DWORD *)(v7 + 160);
        unsigned int v9 = *(_DWORD *)(v7 + 164);
        uint64_t v10 = *(unsigned int *)(a4 + 84);
        uint64_t v11 = (void *)(v5 + 16);
        while (v10 != v6)
        {
          uint64_t v12 = *(unsigned int *)(a2 + 4 * v6);
          if ((unint64_t)(*(v11 - 1) + v12) > *v11)
          {
            unsigned int v15 = objc_msgSend(NSString, "stringWithFormat:", @"dynamicBuffer(%zu): dynamicOffset(%u) + buffer->bindingSize(%llu) > buffer->bufferSize(%llu)", v6, v12, *(v11 - 1), *v11);
            return v15;
          }
          int v13 = *((_DWORD *)v11 - 4);
          if (v13 == 1) {
            uint64_t v14 = v8;
          }
          else {
            uint64_t v14 = v9;
          }
          if (v12 % v14)
          {
            uint64_t v17 = "storage";
            if (v13 == 1) {
              uint64_t v17 = "uniform";
            }
            unsigned int v15 = objc_msgSend(NSString, "stringWithFormat:", @"dynamicBuffer(%zu): dynamicOffset(%u) is not divisible by the %s buffer alignment(%u)", v6, v12, v17, v14);
            return v15;
          }
          ++v6;
          v11 += 4;
          if (a3 == v6) {
            goto LABEL_12;
          }
        }
      }
      else
      {
        uint64_t v10 = 0;
      }
      unsigned int v15 = objc_msgSend(NSString, "stringWithFormat:", @"dynamicBuffer(%zu) is nil", v10);
    }
    else
    {
LABEL_12:
      unsigned int v15 = 0;
    }
  }
  else
  {
    unsigned int v15 = objc_msgSend(NSString, "stringWithFormat:", @"dynamicOffsetCount(%zu) in setBindGroupCall does not equal the dynamicBufferCount(%u) in bind group layout", a3, v4);
  }
  return v15;
}

__CFString *WebGPU::BindGroupLayout::errorValidatingBindGroupCompatibility(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 112);
  if (v4) {
    uint64_t v4 = *(void *)(v4 + 8);
  }
  uint64_t v5 = *(void *)(a2 + 112);
  if (v5) {
    uint64_t v5 = *(void *)(v5 + 8);
  }
  if (v4 != v5)
  {
    uint64_t v6 = @"Auto-generated layouts mismatch";
    goto LABEL_24;
  }
  uint64_t v7 = *(unsigned int *)(a2 + 68);
  if (!v7)
  {
    unsigned int v8 = 0;
    uint64_t v6 = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 68);
    if (!v10) {
      goto LABEL_24;
    }
LABEL_22:
    objc_msgSend(NSString, "stringWithFormat:", @"entries.size()(%zu) > otherEntries.size()(%zu)", v10, v7);
    uint64_t v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (!v8) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v7 >> 29)
  {
LABEL_29:
    __break(0xC471u);
    JUMPOUT(0x1824D7978);
  }
  unsigned int v8 = (void *)WTF::fastMalloc((WTF *)(8 * v7));
  memcpy(v8, *(const void **)(a2 + 56), 8 * *(unsigned int *)(a2 + 68));
  uint64_t v10 = *(unsigned int *)(a1 + 68);
  if (v10 != v7) {
    goto LABEL_22;
  }
  unint64_t v11 = 0;
  uint64_t v6 = @"entries are not equal";
  do
  {
    if (v11 >= *(unsigned int *)(a1 + 68))
    {
      __break(0xC471u);
      JUMPOUT(0x1824D7980);
    }
    uint64_t v12 = *(_DWORD **)(*(void *)(a1 + 56) + 8 * v11);
    int v13 = (_DWORD *)*((void *)v8 + v11);
    if (v12) {
      BOOL v14 = v13 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    if (v14) {
      goto LABEL_29;
    }
    if (*v12 != *v13
      || v12[1] != v13[1]
      || (((uint64_t (*)(_DWORD *, _DWORD *))WebGPU::BindGroupLayout::equalBindingEntries)(v12 + 2, v13 + 2) & 1) == 0)
    {
      goto LABEL_23;
    }
    ++v11;
  }
  while (v10 != v11);
  uint64_t v6 = 0;
LABEL_23:
  WTF::fastFree((WTF *)v8, v9);
LABEL_24:
  return v6;
}

void sub_1824D798C(_Unwind_Exception *exception_object, void *a2)
{
  if (v2) {
    WTF::fastFree(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebGPU::BindGroupLayout::sortedEntries@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = this[17];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v2;
  if (v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v4 = (uint64_t)this;
      uint64_t v5 = (void *)WTF::fastMalloc((WTF *)(8 * v2));
      *(_DWORD *)(a2 + 8) = v2;
      *(void *)a2 = v5;
      uint64_t v6 = *(const void **)(v4 + 56);
      size_t v7 = 8 * *(unsigned int *)(v4 + 68);
      return (unsigned int *)memcpy(v5, v6, v7);
    }
  }
  return this;
}

uint64_t WebGPU::BindGroupLayout::BindGroupLayout(uint64_t a1, atomic_uchar *volatile *a2)
{
  char v4 = 0;
  int v5 = 1;
  *(_DWORD *)a1 = 1;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  atomic_uchar *volatile v6 = *a2;
  atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x18530AEA0](v6);
  }
  ++*((void *)v6 + 1);
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  *(void *)(a1 + 104) = a2;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  return a1;
}

void sub_1824D7AF0(_Unwind_Exception *a1, void *a2)
{
  int v5 = *(WTF **)(v2 + 56);
  if (v5)
  {
    *(void *)(v2 + 56) = 0;
    *(_DWORD *)(v2 + 64) = 0;
    WTF::fastFree(v5, a2);
  }
  uint64_t v6 = *(void *)(v2 + 48);
  if (v6) {
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }

  uint64_t v8 = *(void *)(v2 + 16);
  if (v8) {
    WTF::fastFree((WTF *)(v8 - 16), v7);
  }
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v3, v7);
  _Unwind_Resume(a1);
}

void WebGPU::BindGroupLayout::~BindGroupLayout(WebGPU::BindGroupLayout *this, void *a2)
{
  uint64_t v3 = *((void *)this + 25);
  if (v3) {
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v4 = *((void *)this + 24);
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  uint64_t v5 = *((void *)this + 23);
  if (v5) {
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  uint64_t v6 = (atomic_uint *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (!v6 || atomic_fetch_add(v6, 0xFFFFFFFF) != 1)
  {
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)this + 13, a2);
    uint64_t v8 = (WTF *)*((void *)this + 7);
    if (!v8) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  atomic_store(1u, (unsigned int *)v6);
  WTF::fastFree((WTF *)v6, a2);
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)this + 13, v14);
  uint64_t v8 = (WTF *)*((void *)this + 7);
  if (v8)
  {
LABEL_10:
    *((void *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v8, v7);
  }
LABEL_11:
  uint64_t v9 = *((void *)this + 6);
  if (v9) {
    WTF::fastFree((WTF *)(v9 - 16), v7);
  }

  uint64_t v11 = *((void *)this + 2);
  if (v11) {
    WTF::fastFree((WTF *)(v11 - 16), v10);
  }
  uint64_t v12 = *((void *)this + 1);
  if (v12)
  {
    *(void *)(v12 + 8) = 0;
    int v13 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v13)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v10);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

uint64_t WebGPU::BindGroupLayout::argumentBufferIndexForEntryIndex(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 != 3)
  {
    uint64_t v12 = *(void *)(result + 48);
    if (v12)
    {
      int v13 = *(_DWORD *)(v12 - 8);
      unsigned int v14 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
      unsigned int v15 = (v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11);
      unsigned int v16 = v13 & (v15 ^ HIWORD(v15));
      uint64_t v17 = (int *)(v12 + 136 * v16);
      int v18 = *v17;
      if (*v17 == a2)
      {
LABEL_15:
        if (v17 != (int *)(v12 + 136 * *(unsigned int *)(v12 - 4)))
        {
          if (a3 >= 3)
          {
            __break(1u);
          }
          else if ((*(void *)&v17[2 * a3 + 14] & 0xFF00000000) != 0)
          {
            return *(void *)&v17[2 * a3 + 14];
          }
          else
          {
            return 0x7FFFFFFFFFFFFFFFLL;
          }
          return result;
        }
      }
      else
      {
        int v19 = 1;
        while (v18 != -1)
        {
          unsigned int v16 = (v16 + v19) & v13;
          uint64_t v17 = (int *)(v12 + 136 * v16);
          int v18 = *v17;
          ++v19;
          if (*v17 == a2) {
            goto LABEL_15;
          }
        }
      }
    }
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v3 = *(void *)(result + 16);
  if (!v3) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v4 = a2 | 0x300000000;
  unsigned int v5 = *(_DWORD *)(v3 - 8);
  unint64_t v6 = (v4 + ~((unint64_t)a2 << 32)) ^ ((v4 + ~((unint64_t)a2 << 32)) >> 22);
  unint64_t v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  uint64_t v9 = v5 & ((v8 >> 31) ^ v8);
  uint64_t v10 = *(void *)(v3 + 16 * v9);
  if (v10 == v4)
  {
LABEL_7:
    if (v9 == *(_DWORD *)(v3 - 4)) {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      return 0;
    }
  }
  else
  {
    int v11 = 1;
    while (v10 != -1)
    {
      uint64_t v9 = (v9 + v11) & v5;
      uint64_t v10 = *(void *)(v3 + 16 * v9);
      ++v11;
      if (v10 == v4) {
        goto LABEL_7;
      }
    }
    return 0x7FFFFFFFFFFFFFFFLL;
  }
}

_DWORD *wgpuBindGroupLayoutReference(_DWORD *result)
{
  return result;
}

WebGPU::BindGroupLayout *wgpuBindGroupLayoutRelease(WebGPU::BindGroupLayout *result, void *a2)
{
  if (*(_DWORD *)result == 1)
  {
    WebGPU::BindGroupLayout::~BindGroupLayout(result, a2);
    return (WebGPU::BindGroupLayout *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_DWORD *wgpuBindGroupLayoutSetLabel(id *a1, char *__s)
{
  if (__s) {
    strlen(__s);
  }
  WTF::String::fromUTF8();
  if (v7)
  {
    *v7 += 2;
    uint64_t v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else
  {
    uint64_t v3 = &stru_1ECABF938;
  }
  [a1[3] setLabel:v3];

  if (v7) {
    uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v4 = &stru_1ECABF938;
  }
  [a1[4] setLabel:v4];

  if (v7) {
    unsigned int v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    unsigned int v5 = &stru_1ECABF938;
  }
  [a1[5] setLabel:v5];

  if (!v7)
  {
LABEL_14:
    uint64_t result = v7;
    if (!v7) {
      return result;
    }
    goto LABEL_17;
  }
  if (*v7 != 2)
  {
    *v7 -= 2;
    goto LABEL_14;
  }
  WTF::StringImpl::destroy();
  uint64_t result = v7;
LABEL_17:
  if (*result == 2) {
    return (_DWORD *)WTF::StringImpl::destroy();
  }
  *result -= 2;
  return result;
}

void sub_1824D7FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  if (v10)
  {
    if (*v10 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v10 -= 2;
    }
  }
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(a1);
}

double std::__introsort<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroupLayout(WGPUBindGroupLayoutDescriptor const&,BOOL)::$_0 &,WGPUBindGroupLayoutEntry *,false>(unint64_t a1, long long *a2, uint64_t a3, char a4, double result)
{
LABEL_1:
  int v11 = a2 - 8;
  uint64_t v12 = a2 - 16;
  int v13 = a2 - 24;
  uint64_t v374 = (unsigned int *)a2 - 94;
  for (unint64_t i = a1; ; *(_OWORD *)(i - 52) = v388)
  {
LABEL_2:
    a1 = i;
    uint64_t v15 = (uint64_t)a2 - i;
    uint64_t v16 = (uint64_t)((uint64_t)a2 - i) >> 7;
    if (v6 || !v5)
    {
      switch(v16)
      {
        case 0:
        case 1:
          return result;
        case 2:
          if (*((_DWORD *)a2 - 30) < *(_DWORD *)(i + 8))
          {
            long long v492 = *(_OWORD *)(i + 32);
            long long v526 = *(_OWORD *)(i + 48);
            long long v422 = *(_OWORD *)i;
            long long v457 = *(_OWORD *)(i + 16);
            long long v631 = *(_OWORD *)(i + 96);
            long long v666 = *(_OWORD *)(i + 112);
            long long v561 = *(_OWORD *)(i + 64);
            long long v596 = *(_OWORD *)(i + 80);
            long long v232 = *(a2 - 1);
            long long v234 = *(a2 - 4);
            long long v233 = *(a2 - 3);
            *(_OWORD *)(i + 96) = *(a2 - 2);
            *(_OWORD *)(i + 112) = v232;
            *(_OWORD *)(i + 64) = v234;
            *(_OWORD *)(i + 80) = v233;
            long long v235 = *(a2 - 8);
            long long v236 = *(a2 - 7);
            long long v237 = *(a2 - 5);
            *(_OWORD *)(i + 32) = *(a2 - 6);
            *(_OWORD *)(i + 48) = v237;
            *(_OWORD *)unint64_t i = v235;
            *(_OWORD *)(i + 16) = v236;
            *(a2 - 6) = v492;
            *(a2 - 5) = v526;
            *(a2 - 8) = v422;
            *(a2 - 7) = v457;
            uint64_t result = *(double *)&v561;
            *(a2 - 2) = v631;
            *(a2 - 1) = v666;
            *(a2 - 4) = v561;
            *(a2 - 3) = v596;
          }
          return result;
        case 3:
          int v105 = (long long *)(i + 128);
          unsigned int v238 = *(_DWORD *)(i + 136);
          unsigned int v239 = *((_DWORD *)a2 - 30);
          if (v238 >= *(_DWORD *)(i + 8))
          {
            if (v239 < v238)
            {
              long long v569 = *(_OWORD *)(i + 192);
              long long v604 = *(_OWORD *)(i + 208);
              long long v639 = *(_OWORD *)(i + 224);
              long long v674 = *(_OWORD *)(i + 240);
              long long v430 = *v105;
              long long v465 = *(_OWORD *)(i + 144);
              long long v500 = *(_OWORD *)(i + 160);
              long long v534 = *(_OWORD *)(i + 176);
              long long v339 = *v11;
              long long v340 = *(a2 - 7);
              long long v341 = *(a2 - 5);
              *(_OWORD *)(i + 160) = *(a2 - 6);
              *(_OWORD *)(i + 176) = v341;
              *int v105 = v339;
              *(_OWORD *)(i + 144) = v340;
              long long v343 = *(a2 - 2);
              long long v342 = *(a2 - 1);
              long long v344 = *(a2 - 3);
              *(_OWORD *)(i + 192) = *(a2 - 4);
              *(_OWORD *)(i + 208) = v344;
              *(_OWORD *)(i + 224) = v343;
              *(_OWORD *)(i + 240) = v342;
              *(a2 - 6) = v500;
              *(a2 - 5) = v534;
              *int v11 = v430;
              *(a2 - 7) = v465;
              uint64_t result = *(double *)&v569;
              *(a2 - 2) = v639;
              *(a2 - 1) = v674;
              *(a2 - 4) = v569;
              *(a2 - 3) = v604;
              if (*(_DWORD *)(i + 136) < *(_DWORD *)(i + 8))
              {
                long long v501 = *(_OWORD *)(i + 32);
                long long v535 = *(_OWORD *)(i + 48);
                long long v431 = *(_OWORD *)i;
                long long v466 = *(_OWORD *)(i + 16);
                long long v640 = *(_OWORD *)(i + 96);
                long long v675 = *(_OWORD *)(i + 112);
                long long v570 = *(_OWORD *)(i + 64);
                long long v605 = *(_OWORD *)(i + 80);
                long long v345 = *(_OWORD *)(i + 208);
                *(_OWORD *)(i + 64) = *(_OWORD *)(i + 192);
                *(_OWORD *)(i + 80) = v345;
                long long v346 = *(_OWORD *)(i + 240);
                *(_OWORD *)(i + 96) = *(_OWORD *)(i + 224);
                *(_OWORD *)(i + 112) = v346;
                long long v347 = *(_OWORD *)(i + 144);
                *(_OWORD *)unint64_t i = *v105;
                *(_OWORD *)(i + 16) = v347;
                long long v348 = *(_OWORD *)(i + 176);
                *(_OWORD *)(i + 32) = *(_OWORD *)(i + 160);
                *(_OWORD *)(i + 48) = v348;
                *(_OWORD *)(i + 160) = v501;
                *(_OWORD *)(i + 176) = v535;
                *int v105 = v431;
                *(_OWORD *)(i + 144) = v466;
                uint64_t result = *(double *)&v570;
                *(_OWORD *)(i + 224) = v640;
                *(_OWORD *)(i + 240) = v675;
                *(_OWORD *)(i + 192) = v570;
                *(_OWORD *)(i + 208) = v605;
              }
            }
            return result;
          }
          if (v239 >= v238) {
            goto LABEL_185;
          }
          long long v493 = *(_OWORD *)(i + 32);
          long long v527 = *(_OWORD *)(i + 48);
          long long v423 = *(_OWORD *)i;
          long long v458 = *(_OWORD *)(i + 16);
          long long v632 = *(_OWORD *)(i + 96);
          long long v667 = *(_OWORD *)(i + 112);
          long long v562 = *(_OWORD *)(i + 64);
          long long v597 = *(_OWORD *)(i + 80);
          long long v240 = *(a2 - 1);
          long long v242 = *(a2 - 4);
          long long v241 = *(a2 - 3);
          *(_OWORD *)(i + 96) = *(a2 - 2);
          *(_OWORD *)(i + 112) = v240;
          *(_OWORD *)(i + 64) = v242;
          *(_OWORD *)(i + 80) = v241;
          long long v243 = *v11;
          long long v244 = *(a2 - 7);
          long long v245 = *(a2 - 5);
          *(_OWORD *)(i + 32) = *(a2 - 6);
          *(_OWORD *)(i + 48) = v245;
          *(_OWORD *)unint64_t i = v243;
          *(_OWORD *)(i + 16) = v244;
          break;
        case 4:
          *(void *)&uint64_t result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroupLayout(WGPUBindGroupLayoutDescriptor const&,BOOL)::$_0 &,WGPUBindGroupLayoutEntry *>((long long *)i, (long long *)(i + 128), (long long *)(i + 256), a2 - 8).n128_u64[0];
          return result;
        case 5:
          int v11 = (long long *)(i + 128);
          unint64_t v246 = (long long *)(i + 256);
          uint64_t v247 = (long long *)(i + 384);
          *(void *)&uint64_t result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroupLayout(WGPUBindGroupLayoutDescriptor const&,BOOL)::$_0 &,WGPUBindGroupLayoutEntry *>((long long *)i, (long long *)(i + 128), (long long *)(i + 256), (long long *)(i + 384)).n128_u64[0];
          if (*((_DWORD *)a2 - 30) >= *(_DWORD *)(i + 392)) {
            return result;
          }
          long long v563 = *(_OWORD *)(i + 448);
          long long v598 = *(_OWORD *)(i + 464);
          long long v633 = *(_OWORD *)(i + 480);
          long long v668 = *(_OWORD *)(i + 496);
          long long v424 = *v247;
          long long v459 = *(_OWORD *)(i + 400);
          long long v494 = *(_OWORD *)(i + 416);
          long long v528 = *(_OWORD *)(i + 432);
          long long v248 = *(a2 - 8);
          long long v249 = *(a2 - 7);
          long long v250 = *(a2 - 5);
          *(_OWORD *)(i + 416) = *(a2 - 6);
          *(_OWORD *)(i + 432) = v250;
          long long *v247 = v248;
          *(_OWORD *)(i + 400) = v249;
          long long v252 = *(a2 - 2);
          long long v251 = *(a2 - 1);
          long long v253 = *(a2 - 3);
          *(_OWORD *)(i + 448) = *(a2 - 4);
          *(_OWORD *)(i + 464) = v253;
          *(_OWORD *)(i + 480) = v252;
          *(_OWORD *)(i + 496) = v251;
          *(a2 - 6) = v494;
          *(a2 - 5) = v528;
          *(a2 - 8) = v424;
          *(a2 - 7) = v459;
          uint64_t result = *(double *)&v563;
          *(a2 - 2) = v633;
          *(a2 - 1) = v668;
          *(a2 - 4) = v563;
          *(a2 - 3) = v598;
          if (*(_DWORD *)(i + 392) >= *(_DWORD *)(i + 264)) {
            return result;
          }
          long long v564 = *(_OWORD *)(i + 320);
          long long v599 = *(_OWORD *)(i + 336);
          long long v634 = *(_OWORD *)(i + 352);
          long long v669 = *(_OWORD *)(i + 368);
          long long v425 = *v246;
          long long v460 = *(_OWORD *)(i + 272);
          long long v495 = *(_OWORD *)(i + 288);
          long long v529 = *(_OWORD *)(i + 304);
          long long v254 = *v247;
          long long v255 = *(_OWORD *)(i + 400);
          long long v256 = *(_OWORD *)(i + 432);
          *(_OWORD *)(i + 288) = *(_OWORD *)(i + 416);
          *(_OWORD *)(i + 304) = v256;
          long long *v246 = v254;
          *(_OWORD *)(i + 272) = v255;
          long long v257 = *(_OWORD *)(i + 448);
          long long v258 = *(_OWORD *)(i + 464);
          long long v259 = *(_OWORD *)(i + 496);
          *(_OWORD *)(i + 352) = *(_OWORD *)(i + 480);
          *(_OWORD *)(i + 368) = v259;
          *(_OWORD *)(i + 320) = v257;
          *(_OWORD *)(i + 336) = v258;
          *(_OWORD *)(i + 416) = v495;
          *(_OWORD *)(i + 432) = v529;
          long long *v247 = v425;
          *(_OWORD *)(i + 400) = v460;
          uint64_t result = *(double *)&v564;
          *(_OWORD *)(i + 480) = v634;
          *(_OWORD *)(i + 496) = v669;
          *(_OWORD *)(i + 448) = v564;
          *(_OWORD *)(i + 464) = v599;
          if (*(_DWORD *)(i + 264) >= *(_DWORD *)(i + 136)) {
            return result;
          }
          long long v565 = *(_OWORD *)(i + 192);
          long long v600 = *(_OWORD *)(i + 208);
          long long v635 = *(_OWORD *)(i + 224);
          long long v670 = *(_OWORD *)(i + 240);
          long long v426 = *v11;
          long long v461 = *(_OWORD *)(i + 144);
          long long v496 = *(_OWORD *)(i + 160);
          long long v530 = *(_OWORD *)(i + 176);
          long long v260 = *v246;
          long long v261 = *(_OWORD *)(i + 272);
          long long v262 = *(_OWORD *)(i + 304);
          *(_OWORD *)(i + 160) = *(_OWORD *)(i + 288);
          *(_OWORD *)(i + 176) = v262;
          *int v11 = v260;
          *(_OWORD *)(i + 144) = v261;
          long long v263 = *(_OWORD *)(i + 320);
          long long v264 = *(_OWORD *)(i + 336);
          long long v265 = *(_OWORD *)(i + 368);
          *(_OWORD *)(i + 224) = *(_OWORD *)(i + 352);
          *(_OWORD *)(i + 240) = v265;
          *(_OWORD *)(i + 192) = v263;
          *(_OWORD *)(i + 208) = v264;
          *(_OWORD *)(i + 288) = v496;
          *(_OWORD *)(i + 304) = v530;
          long long *v246 = v426;
          *(_OWORD *)(i + 272) = v461;
          uint64_t result = *(double *)&v565;
          *(_OWORD *)(i + 352) = v635;
          *(_OWORD *)(i + 368) = v670;
          *(_OWORD *)(i + 320) = v565;
          *(_OWORD *)(i + 336) = v600;
          if (*(_DWORD *)(i + 136) >= *(_DWORD *)(i + 8)) {
            return result;
          }
          long long v493 = *(_OWORD *)(i + 32);
          long long v527 = *(_OWORD *)(i + 48);
          long long v423 = *(_OWORD *)i;
          long long v458 = *(_OWORD *)(i + 16);
          long long v632 = *(_OWORD *)(i + 96);
          long long v667 = *(_OWORD *)(i + 112);
          long long v562 = *(_OWORD *)(i + 64);
          long long v597 = *(_OWORD *)(i + 80);
          long long v266 = *(_OWORD *)(i + 208);
          *(_OWORD *)(i + 64) = *(_OWORD *)(i + 192);
          *(_OWORD *)(i + 80) = v266;
          long long v267 = *(_OWORD *)(i + 240);
          *(_OWORD *)(i + 96) = *(_OWORD *)(i + 224);
          *(_OWORD *)(i + 112) = v267;
          long long v268 = *(_OWORD *)(i + 144);
          *(_OWORD *)unint64_t i = *v11;
          *(_OWORD *)(i + 16) = v268;
          long long v269 = *(_OWORD *)(i + 176);
          *(_OWORD *)(i + 32) = *(_OWORD *)(i + 160);
          *(_OWORD *)(i + 48) = v269;
          goto LABEL_187;
        default:
          JUMPOUT(0);
      }
      goto LABEL_187;
    }
    if (v15 <= 3071) {
      break;
    }
    if (!a3)
    {
      if ((long long *)i != a2)
      {
        int64_t v286 = (unint64_t)(v16 - 2) >> 1;
        int64_t v287 = v286;
        do
        {
          if (v286 >= v287)
          {
            uint64_t v289 = (2 * v287) | 1;
            unint64_t v290 = i + (v289 << 7);
            if (2 * v287 + 2 < v16)
            {
              unsigned int v291 = *(_DWORD *)(v290 + 8);
              unsigned int v292 = *(_DWORD *)(v290 + 136);
              v290 += (unint64_t)(v291 < v292) << 7;
              if (v291 < v292) {
                uint64_t v289 = 2 * v287 + 2;
              }
            }
            unint64_t v293 = i + (v287 << 7);
            unsigned int v294 = *(_DWORD *)(v293 + 8);
            if (*(_DWORD *)(v290 + 8) >= v294)
            {
              uint64_t v295 = *(void *)v293;
              long long v498 = *(_OWORD *)(v293 + 44);
              long long v532 = *(_OWORD *)(v293 + 60);
              long long v428 = *(_OWORD *)(v293 + 12);
              long long v463 = *(_OWORD *)(v293 + 28);
              int v672 = *(_DWORD *)(v293 + 124);
              long long v602 = *(_OWORD *)(v293 + 92);
              long long v637 = *(_OWORD *)(v293 + 108);
              long long v567 = *(_OWORD *)(v293 + 76);
              do
              {
                uint64_t v296 = (_OWORD *)v293;
                unint64_t v293 = v290;
                long long v297 = *(_OWORD *)v290;
                long long v298 = *(_OWORD *)(v290 + 16);
                long long v299 = *(_OWORD *)(v290 + 48);
                v296[2] = *(_OWORD *)(v290 + 32);
                v296[3] = v299;
                *uint64_t v296 = v297;
                v296[1] = v298;
                long long v300 = *(_OWORD *)(v290 + 64);
                long long v301 = *(_OWORD *)(v290 + 80);
                long long v302 = *(_OWORD *)(v290 + 112);
                v296[6] = *(_OWORD *)(v290 + 96);
                v296[7] = v302;
                v296[4] = v300;
                v296[5] = v301;
                if (v286 < v289) {
                  break;
                }
                uint64_t v303 = (2 * v289) | 1;
                unint64_t v290 = i + (v303 << 7);
                uint64_t v304 = 2 * v289 + 2;
                if (v304 < v16)
                {
                  unsigned int v305 = *(_DWORD *)(v290 + 8);
                  unsigned int v306 = *(_DWORD *)(v290 + 136);
                  v290 += (unint64_t)(v305 < v306) << 7;
                  if (v305 < v306) {
                    uint64_t v303 = v304;
                  }
                }
                uint64_t v289 = v303;
              }
              while (*(_DWORD *)(v290 + 8) >= v294);
              *(void *)unint64_t v293 = v295;
              *(_DWORD *)(v293 + 8) = v294;
              *(_DWORD *)(v293 + 124) = v672;
              *(_OWORD *)(v293 + 60) = v532;
              *(_OWORD *)(v293 + 44) = v498;
              *(_OWORD *)(v293 + 28) = v463;
              *(_OWORD *)(v293 + 12) = v428;
              *(_OWORD *)(v293 + 108) = v637;
              *(_OWORD *)(v293 + 92) = v602;
              *(_OWORD *)(v293 + 76) = v567;
            }
          }
          BOOL v288 = v287-- <= 0;
        }
        while (!v288);
        uint64_t v307 = (unint64_t)v15 >> 7;
        do
        {
          uint64_t v308 = 0;
          long long v499 = *(_OWORD *)(i + 32);
          long long v533 = *(_OWORD *)(i + 48);
          long long v429 = *(_OWORD *)i;
          long long v464 = *(_OWORD *)(i + 16);
          long long v638 = *(_OWORD *)(i + 96);
          long long v673 = *(_OWORD *)(i + 112);
          long long v568 = *(_OWORD *)(i + 64);
          long long v603 = *(_OWORD *)(i + 80);
          long long v309 = (_OWORD *)i;
          do
          {
            uint64_t v316 = (uint64_t)&v309[8 * v308 + 8];
            uint64_t v317 = (2 * v308) | 1;
            uint64_t v318 = 2 * v308 + 2;
            if (v318 < v307)
            {
              unsigned int v319 = *(_DWORD *)(v316 + 8);
              unsigned int v320 = *(_DWORD *)(v316 + 136);
              v316 += (unint64_t)(v319 < v320) << 7;
              if (v319 < v320) {
                uint64_t v317 = v318;
              }
            }
            long long v310 = *(_OWORD *)v316;
            long long v311 = *(_OWORD *)(v316 + 16);
            long long v312 = *(_OWORD *)(v316 + 48);
            v309[2] = *(_OWORD *)(v316 + 32);
            v309[3] = v312;
            *long long v309 = v310;
            v309[1] = v311;
            long long v313 = *(_OWORD *)(v316 + 64);
            long long v314 = *(_OWORD *)(v316 + 80);
            long long v315 = *(_OWORD *)(v316 + 112);
            v309[6] = *(_OWORD *)(v316 + 96);
            v309[7] = v315;
            v309[4] = v313;
            v309[5] = v314;
            long long v309 = (_OWORD *)v316;
            uint64_t v308 = v317;
          }
          while (v317 <= (uint64_t)((unint64_t)(v307 - 2) >> 1));
          a2 -= 8;
          if ((long long *)v316 == a2)
          {
            *(_OWORD *)(v316 + 32) = v499;
            *(_OWORD *)(v316 + 48) = v533;
            *(_OWORD *)uint64_t v316 = v429;
            *(_OWORD *)(v316 + 16) = v464;
            uint64_t result = *(double *)&v568;
            *(_OWORD *)(v316 + 96) = v638;
            *(_OWORD *)(v316 + 112) = v673;
            *(_OWORD *)(v316 + 64) = v568;
            *(_OWORD *)(v316 + 80) = v603;
          }
          else
          {
            long long v321 = *a2;
            long long v322 = a2[1];
            long long v323 = a2[3];
            *(_OWORD *)(v316 + 32) = a2[2];
            *(_OWORD *)(v316 + 48) = v323;
            *(_OWORD *)uint64_t v316 = v321;
            *(_OWORD *)(v316 + 16) = v322;
            long long v324 = a2[4];
            long long v325 = a2[5];
            long long v326 = a2[7];
            *(_OWORD *)(v316 + 96) = a2[6];
            *(_OWORD *)(v316 + 112) = v326;
            *(_OWORD *)(v316 + 64) = v324;
            *(_OWORD *)(v316 + 80) = v325;
            a2[6] = v638;
            a2[7] = v673;
            a2[4] = v568;
            a2[5] = v603;
            uint64_t result = *(double *)&v429;
            a2[2] = v499;
            a2[3] = v533;
            *a2 = v429;
            a2[1] = v464;
            uint64_t v327 = v316 - i + 128;
            if (v327 >= 129)
            {
              unint64_t v328 = (((unint64_t)v327 >> 7) - 2) >> 1;
              uint64_t v329 = i + (v328 << 7);
              unsigned int v330 = *(_DWORD *)(v316 + 8);
              if (*(_DWORD *)(v329 + 8) < v330)
              {
                uint64_t v331 = *(void *)v316;
                long long v383 = *(_OWORD *)(v316 + 44);
                long long v386 = *(_OWORD *)(v316 + 60);
                long long v377 = *(_OWORD *)(v316 + 12);
                long long v380 = *(_OWORD *)(v316 + 28);
                int v398 = *(_DWORD *)(v316 + 124);
                long long v392 = *(_OWORD *)(v316 + 92);
                long long v395 = *(_OWORD *)(v316 + 108);
                long long v389 = *(_OWORD *)(v316 + 76);
                do
                {
                  long long v332 = (_OWORD *)v316;
                  uint64_t v316 = v329;
                  long long v333 = *(_OWORD *)v329;
                  long long v334 = *(_OWORD *)(v329 + 16);
                  long long v335 = *(_OWORD *)(v329 + 48);
                  v332[2] = *(_OWORD *)(v329 + 32);
                  v332[3] = v335;
                  _OWORD *v332 = v333;
                  v332[1] = v334;
                  long long v336 = *(_OWORD *)(v329 + 64);
                  long long v337 = *(_OWORD *)(v329 + 80);
                  long long v338 = *(_OWORD *)(v329 + 112);
                  v332[6] = *(_OWORD *)(v329 + 96);
                  v332[7] = v338;
                  v332[4] = v336;
                  v332[5] = v337;
                  if (!v328) {
                    break;
                  }
                  unint64_t v328 = (v328 - 1) >> 1;
                  uint64_t v329 = i + (v328 << 7);
                }
                while (*(_DWORD *)(v329 + 8) < v330);
                *(void *)uint64_t v316 = v331;
                *(_DWORD *)(v316 + 8) = v330;
                uint64_t result = *(double *)&v389;
                *(_DWORD *)(v316 + 124) = v398;
                *(_OWORD *)(v316 + 60) = v386;
                *(_OWORD *)(v316 + 44) = v383;
                *(_OWORD *)(v316 + 28) = v380;
                *(_OWORD *)(v316 + 12) = v377;
                *(_OWORD *)(v316 + 108) = v395;
                *(_OWORD *)(v316 + 92) = v392;
                *(_OWORD *)(v316 + 76) = v389;
              }
            }
          }
          BOOL v288 = v307-- <= 2;
        }
        while (!v288);
      }
      return result;
    }
    unint64_t v17 = (unint64_t)v16 >> 1;
    unint64_t v18 = i + ((unint64_t)v16 >> 1 << 7);
    unsigned int v19 = *((_DWORD *)a2 - 30);
    if ((unint64_t)v15 <= 0x4000)
    {
      unsigned int v27 = *(_DWORD *)(i + 8);
      if (v27 >= *(_DWORD *)(v18 + 8))
      {
        if (v19 < v27)
        {
          long long v473 = *(_OWORD *)(i + 32);
          long long v507 = *(_OWORD *)(i + 48);
          long long v403 = *(_OWORD *)i;
          long long v438 = *(_OWORD *)(i + 16);
          long long v612 = *(_OWORD *)(i + 96);
          long long v647 = *(_OWORD *)(i + 112);
          long long v542 = *(_OWORD *)(i + 64);
          long long v577 = *(_OWORD *)(i + 80);
          long long v46 = *(a2 - 1);
          long long v48 = *(a2 - 4);
          long long v47 = *(a2 - 3);
          *(_OWORD *)(i + 96) = *(a2 - 2);
          *(_OWORD *)(i + 112) = v46;
          *(_OWORD *)(i + 64) = v48;
          *(_OWORD *)(i + 80) = v47;
          long long v49 = *v11;
          long long v50 = *(a2 - 7);
          long long v51 = *(a2 - 5);
          *(_OWORD *)(i + 32) = *(a2 - 6);
          *(_OWORD *)(i + 48) = v51;
          *(_OWORD *)unint64_t i = v49;
          *(_OWORD *)(i + 16) = v50;
          *(a2 - 6) = v473;
          *(a2 - 5) = v507;
          *int v11 = v403;
          *(a2 - 7) = v438;
          *(a2 - 2) = v612;
          *(a2 - 1) = v647;
          *(a2 - 4) = v542;
          *(a2 - 3) = v577;
          if (*(_DWORD *)(i + 8) < *(_DWORD *)(v18 + 8))
          {
            long long v474 = *(_OWORD *)(v18 + 32);
            long long v508 = *(_OWORD *)(v18 + 48);
            long long v404 = *(_OWORD *)v18;
            long long v439 = *(_OWORD *)(v18 + 16);
            long long v613 = *(_OWORD *)(v18 + 96);
            long long v648 = *(_OWORD *)(v18 + 112);
            long long v543 = *(_OWORD *)(v18 + 64);
            long long v578 = *(_OWORD *)(v18 + 80);
            long long v52 = *(_OWORD *)(i + 112);
            long long v54 = *(_OWORD *)(i + 64);
            long long v53 = *(_OWORD *)(i + 80);
            *(_OWORD *)(v18 + 96) = *(_OWORD *)(i + 96);
            *(_OWORD *)(v18 + 112) = v52;
            *(_OWORD *)(v18 + 64) = v54;
            *(_OWORD *)(v18 + 80) = v53;
            long long v55 = *(_OWORD *)i;
            long long v56 = *(_OWORD *)(i + 16);
            long long v57 = *(_OWORD *)(i + 48);
            *(_OWORD *)(v18 + 32) = *(_OWORD *)(i + 32);
            *(_OWORD *)(v18 + 48) = v57;
            *(_OWORD *)unint64_t v18 = v55;
            *(_OWORD *)(v18 + 16) = v56;
            *(_OWORD *)(i + 32) = v474;
            *(_OWORD *)(i + 48) = v508;
            *(_OWORD *)unint64_t i = v404;
            *(_OWORD *)(i + 16) = v439;
            *(_OWORD *)(i + 96) = v613;
            *(_OWORD *)(i + 112) = v648;
            *(_OWORD *)(i + 64) = v543;
            *(_OWORD *)(i + 80) = v578;
            --a3;
            if (a4) {
              goto LABEL_33;
            }
            goto LABEL_56;
          }
        }
      }
      else
      {
        if (v19 < v27)
        {
          long long v470 = *(_OWORD *)(v18 + 32);
          long long v504 = *(_OWORD *)(v18 + 48);
          long long v400 = *(_OWORD *)v18;
          long long v435 = *(_OWORD *)(v18 + 16);
          long long v609 = *(_OWORD *)(v18 + 96);
          long long v644 = *(_OWORD *)(v18 + 112);
          long long v539 = *(_OWORD *)(v18 + 64);
          long long v574 = *(_OWORD *)(v18 + 80);
          long long v28 = *(a2 - 1);
          long long v30 = *(a2 - 4);
          long long v29 = *(a2 - 3);
          *(_OWORD *)(v18 + 96) = *(a2 - 2);
          *(_OWORD *)(v18 + 112) = v28;
          *(_OWORD *)(v18 + 64) = v30;
          *(_OWORD *)(v18 + 80) = v29;
          long long v31 = *v11;
          long long v32 = *(a2 - 7);
          long long v33 = *(a2 - 5);
          *(_OWORD *)(v18 + 32) = *(a2 - 6);
          *(_OWORD *)(v18 + 48) = v33;
          *(_OWORD *)unint64_t v18 = v31;
          *(_OWORD *)(v18 + 16) = v32;
          goto LABEL_31;
        }
        long long v479 = *(_OWORD *)(v18 + 32);
        long long v513 = *(_OWORD *)(v18 + 48);
        long long v409 = *(_OWORD *)v18;
        long long v444 = *(_OWORD *)(v18 + 16);
        long long v618 = *(_OWORD *)(v18 + 96);
        long long v653 = *(_OWORD *)(v18 + 112);
        long long v548 = *(_OWORD *)(v18 + 64);
        long long v583 = *(_OWORD *)(v18 + 80);
        long long v93 = *(_OWORD *)(i + 112);
        long long v95 = *(_OWORD *)(i + 64);
        long long v94 = *(_OWORD *)(i + 80);
        *(_OWORD *)(v18 + 96) = *(_OWORD *)(i + 96);
        *(_OWORD *)(v18 + 112) = v93;
        *(_OWORD *)(v18 + 64) = v95;
        *(_OWORD *)(v18 + 80) = v94;
        long long v96 = *(_OWORD *)i;
        long long v97 = *(_OWORD *)(i + 16);
        long long v98 = *(_OWORD *)(i + 48);
        *(_OWORD *)(v18 + 32) = *(_OWORD *)(i + 32);
        *(_OWORD *)(v18 + 48) = v98;
        *(_OWORD *)unint64_t v18 = v96;
        *(_OWORD *)(v18 + 16) = v97;
        *(_OWORD *)(i + 32) = v479;
        *(_OWORD *)(i + 48) = v513;
        *(_OWORD *)unint64_t i = v409;
        *(_OWORD *)(i + 16) = v444;
        *(_OWORD *)(i + 96) = v618;
        *(_OWORD *)(i + 112) = v653;
        *(_OWORD *)(i + 64) = v548;
        *(_OWORD *)(i + 80) = v583;
        if (*((_DWORD *)a2 - 30) < *(_DWORD *)(i + 8))
        {
          long long v470 = *(_OWORD *)(i + 32);
          long long v504 = *(_OWORD *)(i + 48);
          long long v400 = *(_OWORD *)i;
          long long v435 = *(_OWORD *)(i + 16);
          long long v609 = *(_OWORD *)(i + 96);
          long long v644 = *(_OWORD *)(i + 112);
          long long v539 = *(_OWORD *)(i + 64);
          long long v574 = *(_OWORD *)(i + 80);
          long long v99 = *(a2 - 1);
          long long v101 = *(a2 - 4);
          long long v100 = *(a2 - 3);
          *(_OWORD *)(i + 96) = *(a2 - 2);
          *(_OWORD *)(i + 112) = v99;
          *(_OWORD *)(i + 64) = v101;
          *(_OWORD *)(i + 80) = v100;
          long long v102 = *v11;
          long long v103 = *(a2 - 7);
          long long v104 = *(a2 - 5);
          *(_OWORD *)(i + 32) = *(a2 - 6);
          *(_OWORD *)(i + 48) = v104;
          *(_OWORD *)unint64_t i = v102;
          *(_OWORD *)(i + 16) = v103;
LABEL_31:
          *(a2 - 6) = v470;
          *(a2 - 5) = v504;
          *int v11 = v400;
          *(a2 - 7) = v435;
          *(a2 - 2) = v609;
          *(a2 - 1) = v644;
          *(a2 - 4) = v539;
          *(a2 - 3) = v574;
        }
      }
      --a3;
      if (a4) {
        goto LABEL_33;
      }
      goto LABEL_56;
    }
    unsigned int v20 = *(_DWORD *)(v18 + 8);
    if (v20 >= *(_DWORD *)(i + 8))
    {
      if (v19 < v20)
      {
        long long v471 = *(_OWORD *)(v18 + 32);
        long long v505 = *(_OWORD *)(v18 + 48);
        long long v401 = *(_OWORD *)v18;
        long long v436 = *(_OWORD *)(v18 + 16);
        long long v610 = *(_OWORD *)(v18 + 96);
        long long v645 = *(_OWORD *)(v18 + 112);
        long long v540 = *(_OWORD *)(v18 + 64);
        long long v575 = *(_OWORD *)(v18 + 80);
        long long v34 = *(a2 - 1);
        long long v36 = *(a2 - 4);
        long long v35 = *(a2 - 3);
        *(_OWORD *)(v18 + 96) = *(a2 - 2);
        *(_OWORD *)(v18 + 112) = v34;
        *(_OWORD *)(v18 + 64) = v36;
        *(_OWORD *)(v18 + 80) = v35;
        long long v37 = *v11;
        long long v38 = *(a2 - 7);
        long long v39 = *(a2 - 5);
        *(_OWORD *)(v18 + 32) = *(a2 - 6);
        *(_OWORD *)(v18 + 48) = v39;
        *(_OWORD *)unint64_t v18 = v37;
        *(_OWORD *)(v18 + 16) = v38;
        *(a2 - 6) = v471;
        *(a2 - 5) = v505;
        *int v11 = v401;
        *(a2 - 7) = v436;
        *(a2 - 2) = v610;
        *(a2 - 1) = v645;
        *(a2 - 4) = v540;
        *(a2 - 3) = v575;
        if (*(_DWORD *)(v18 + 8) < *(_DWORD *)(i + 8))
        {
          long long v472 = *(_OWORD *)(i + 32);
          long long v506 = *(_OWORD *)(i + 48);
          long long v402 = *(_OWORD *)i;
          long long v437 = *(_OWORD *)(i + 16);
          long long v611 = *(_OWORD *)(i + 96);
          long long v646 = *(_OWORD *)(i + 112);
          long long v541 = *(_OWORD *)(i + 64);
          long long v576 = *(_OWORD *)(i + 80);
          long long v40 = *(_OWORD *)(v18 + 112);
          long long v42 = *(_OWORD *)(v18 + 64);
          long long v41 = *(_OWORD *)(v18 + 80);
          *(_OWORD *)(i + 96) = *(_OWORD *)(v18 + 96);
          *(_OWORD *)(i + 112) = v40;
          *(_OWORD *)(i + 64) = v42;
          *(_OWORD *)(i + 80) = v41;
          long long v43 = *(_OWORD *)v18;
          long long v44 = *(_OWORD *)(v18 + 16);
          long long v45 = *(_OWORD *)(v18 + 48);
          *(_OWORD *)(i + 32) = *(_OWORD *)(v18 + 32);
          *(_OWORD *)(i + 48) = v45;
          *(_OWORD *)unint64_t i = v43;
          *(_OWORD *)(i + 16) = v44;
          *(_OWORD *)(v18 + 32) = v472;
          *(_OWORD *)(v18 + 48) = v506;
          *(_OWORD *)unint64_t v18 = v402;
          *(_OWORD *)(v18 + 16) = v437;
          *(_OWORD *)(v18 + 96) = v611;
          *(_OWORD *)(v18 + 112) = v646;
          *(_OWORD *)(v18 + 64) = v541;
          *(_OWORD *)(v18 + 80) = v576;
        }
      }
    }
    else
    {
      if (v19 >= v20)
      {
        long long v475 = *(_OWORD *)(i + 32);
        long long v509 = *(_OWORD *)(i + 48);
        long long v405 = *(_OWORD *)i;
        long long v440 = *(_OWORD *)(i + 16);
        long long v614 = *(_OWORD *)(i + 96);
        long long v649 = *(_OWORD *)(i + 112);
        long long v544 = *(_OWORD *)(i + 64);
        long long v579 = *(_OWORD *)(i + 80);
        long long v58 = *(_OWORD *)(v18 + 112);
        long long v60 = *(_OWORD *)(v18 + 64);
        long long v59 = *(_OWORD *)(v18 + 80);
        *(_OWORD *)(i + 96) = *(_OWORD *)(v18 + 96);
        *(_OWORD *)(i + 112) = v58;
        *(_OWORD *)(i + 64) = v60;
        *(_OWORD *)(i + 80) = v59;
        long long v61 = *(_OWORD *)v18;
        long long v62 = *(_OWORD *)(v18 + 16);
        long long v63 = *(_OWORD *)(v18 + 48);
        *(_OWORD *)(i + 32) = *(_OWORD *)(v18 + 32);
        *(_OWORD *)(i + 48) = v63;
        *(_OWORD *)unint64_t i = v61;
        *(_OWORD *)(i + 16) = v62;
        *(_OWORD *)(v18 + 32) = v475;
        *(_OWORD *)(v18 + 48) = v509;
        *(_OWORD *)unint64_t v18 = v405;
        *(_OWORD *)(v18 + 16) = v440;
        *(_OWORD *)(v18 + 96) = v614;
        *(_OWORD *)(v18 + 112) = v649;
        *(_OWORD *)(v18 + 64) = v544;
        *(_OWORD *)(v18 + 80) = v579;
        if (*((_DWORD *)a2 - 30) >= *(_DWORD *)(v18 + 8)) {
          goto LABEL_23;
        }
        long long v469 = *(_OWORD *)(v18 + 32);
        long long v503 = *(_OWORD *)(v18 + 48);
        long long v399 = *(_OWORD *)v18;
        long long v434 = *(_OWORD *)(v18 + 16);
        long long v608 = *(_OWORD *)(v18 + 96);
        long long v643 = *(_OWORD *)(v18 + 112);
        long long v538 = *(_OWORD *)(v18 + 64);
        long long v573 = *(_OWORD *)(v18 + 80);
        long long v64 = *(a2 - 1);
        long long v66 = *(a2 - 4);
        long long v65 = *(a2 - 3);
        *(_OWORD *)(v18 + 96) = *(a2 - 2);
        *(_OWORD *)(v18 + 112) = v64;
        *(_OWORD *)(v18 + 64) = v66;
        *(_OWORD *)(v18 + 80) = v65;
        long long v67 = *v11;
        long long v68 = *(a2 - 7);
        long long v69 = *(a2 - 5);
        *(_OWORD *)(v18 + 32) = *(a2 - 6);
        *(_OWORD *)(v18 + 48) = v69;
        *(_OWORD *)unint64_t v18 = v67;
        *(_OWORD *)(v18 + 16) = v68;
      }
      else
      {
        long long v469 = *(_OWORD *)(i + 32);
        long long v503 = *(_OWORD *)(i + 48);
        long long v399 = *(_OWORD *)i;
        long long v434 = *(_OWORD *)(i + 16);
        long long v608 = *(_OWORD *)(i + 96);
        long long v643 = *(_OWORD *)(i + 112);
        long long v538 = *(_OWORD *)(i + 64);
        long long v573 = *(_OWORD *)(i + 80);
        long long v21 = *(a2 - 1);
        long long v23 = *(a2 - 4);
        long long v22 = *(a2 - 3);
        *(_OWORD *)(i + 96) = *(a2 - 2);
        *(_OWORD *)(i + 112) = v21;
        *(_OWORD *)(i + 64) = v23;
        *(_OWORD *)(i + 80) = v22;
        long long v24 = *v11;
        long long v25 = *(a2 - 7);
        long long v26 = *(a2 - 5);
        *(_OWORD *)(i + 32) = *(a2 - 6);
        *(_OWORD *)(i + 48) = v26;
        *(_OWORD *)unint64_t i = v24;
        *(_OWORD *)(i + 16) = v25;
      }
      *(a2 - 6) = v469;
      *(a2 - 5) = v503;
      *int v11 = v399;
      *(a2 - 7) = v434;
      *(a2 - 2) = v608;
      *(a2 - 1) = v643;
      *(a2 - 4) = v538;
      *(a2 - 3) = v573;
    }
LABEL_23:
    uint64_t v70 = (long long *)(i + 128);
    unint64_t v71 = i + (v17 << 7);
    unint64_t v72 = v71 - 128;
    unsigned int v73 = *(_DWORD *)(v71 - 120);
    unsigned int v74 = *((_DWORD *)a2 - 62);
    if (v73 >= *(_DWORD *)(i + 136))
    {
      if (v74 < v73)
      {
        long long v477 = *(_OWORD *)(v72 + 32);
        long long v511 = *(_OWORD *)(v72 + 48);
        long long v407 = *(_OWORD *)v72;
        long long v442 = *(_OWORD *)(v72 + 16);
        long long v616 = *(_OWORD *)(v72 + 96);
        long long v651 = *(_OWORD *)(v72 + 112);
        long long v546 = *(_OWORD *)(v72 + 64);
        long long v581 = *(_OWORD *)(v72 + 80);
        long long v81 = *(a2 - 9);
        long long v83 = *(a2 - 12);
        long long v82 = *(a2 - 11);
        *(_OWORD *)(v72 + 96) = *(a2 - 10);
        *(_OWORD *)(v72 + 112) = v81;
        *(_OWORD *)(v72 + 64) = v83;
        *(_OWORD *)(v72 + 80) = v82;
        long long v84 = *v12;
        long long v85 = *(a2 - 15);
        long long v86 = *(a2 - 13);
        *(_OWORD *)(v72 + 32) = *(a2 - 14);
        *(_OWORD *)(v72 + 48) = v86;
        *(_OWORD *)unint64_t v72 = v84;
        *(_OWORD *)(v72 + 16) = v85;
        *(a2 - 14) = v477;
        *(a2 - 13) = v511;
        *uint64_t v12 = v407;
        *(a2 - 15) = v442;
        *(a2 - 10) = v616;
        *(a2 - 9) = v651;
        *(a2 - 12) = v546;
        *(a2 - 11) = v581;
        if (*(_DWORD *)(v72 + 8) < *(_DWORD *)(i + 136))
        {
          long long v547 = *(_OWORD *)(i + 192);
          long long v582 = *(_OWORD *)(i + 208);
          long long v617 = *(_OWORD *)(i + 224);
          long long v652 = *(_OWORD *)(i + 240);
          long long v408 = *v70;
          long long v443 = *(_OWORD *)(i + 144);
          long long v478 = *(_OWORD *)(i + 160);
          long long v512 = *(_OWORD *)(i + 176);
          long long v87 = *(_OWORD *)v72;
          long long v88 = *(_OWORD *)(v72 + 16);
          long long v89 = *(_OWORD *)(v72 + 48);
          *(_OWORD *)(i + 160) = *(_OWORD *)(v72 + 32);
          *(_OWORD *)(i + 176) = v89;
          *uint64_t v70 = v87;
          *(_OWORD *)(i + 144) = v88;
          long long v91 = *(_OWORD *)(v72 + 96);
          long long v90 = *(_OWORD *)(v72 + 112);
          long long v92 = *(_OWORD *)(v72 + 80);
          *(_OWORD *)(i + 192) = *(_OWORD *)(v72 + 64);
          *(_OWORD *)(i + 208) = v92;
          *(_OWORD *)(i + 224) = v91;
          *(_OWORD *)(i + 240) = v90;
          *(_OWORD *)(v72 + 32) = v478;
          *(_OWORD *)(v72 + 48) = v512;
          *(_OWORD *)unint64_t v72 = v408;
          *(_OWORD *)(v72 + 16) = v443;
          *(_OWORD *)(v72 + 96) = v617;
          *(_OWORD *)(v72 + 112) = v652;
          *(_OWORD *)(v72 + 64) = v547;
          *(_OWORD *)(v72 + 80) = v582;
        }
      }
    }
    else
    {
      if (v74 >= v73)
      {
        long long v549 = *(_OWORD *)(i + 192);
        long long v584 = *(_OWORD *)(i + 208);
        long long v619 = *(_OWORD *)(i + 224);
        long long v654 = *(_OWORD *)(i + 240);
        long long v410 = *v70;
        long long v445 = *(_OWORD *)(i + 144);
        long long v480 = *(_OWORD *)(i + 160);
        long long v514 = *(_OWORD *)(i + 176);
        long long v106 = *(_OWORD *)v72;
        long long v107 = *(_OWORD *)(v72 + 16);
        long long v108 = *(_OWORD *)(v72 + 48);
        *(_OWORD *)(i + 160) = *(_OWORD *)(v72 + 32);
        *(_OWORD *)(i + 176) = v108;
        *uint64_t v70 = v106;
        *(_OWORD *)(i + 144) = v107;
        long long v110 = *(_OWORD *)(v72 + 96);
        long long v109 = *(_OWORD *)(v72 + 112);
        long long v111 = *(_OWORD *)(v72 + 80);
        *(_OWORD *)(i + 192) = *(_OWORD *)(v72 + 64);
        *(_OWORD *)(i + 208) = v111;
        *(_OWORD *)(i + 224) = v110;
        *(_OWORD *)(i + 240) = v109;
        *(_OWORD *)(v72 + 32) = v480;
        *(_OWORD *)(v72 + 48) = v514;
        *(_OWORD *)unint64_t v72 = v410;
        *(_OWORD *)(v72 + 16) = v445;
        *(_OWORD *)(v72 + 96) = v619;
        *(_OWORD *)(v72 + 112) = v654;
        *(_OWORD *)(v72 + 64) = v549;
        *(_OWORD *)(v72 + 80) = v584;
        if (*((_DWORD *)a2 - 62) >= *(_DWORD *)(v72 + 8)) {
          goto LABEL_37;
        }
        long long v476 = *(_OWORD *)(v72 + 32);
        long long v510 = *(_OWORD *)(v72 + 48);
        long long v406 = *(_OWORD *)v72;
        long long v441 = *(_OWORD *)(v72 + 16);
        long long v615 = *(_OWORD *)(v72 + 96);
        long long v650 = *(_OWORD *)(v72 + 112);
        long long v545 = *(_OWORD *)(v72 + 64);
        long long v580 = *(_OWORD *)(v72 + 80);
        long long v112 = *(a2 - 9);
        long long v114 = *(a2 - 12);
        long long v113 = *(a2 - 11);
        *(_OWORD *)(v72 + 96) = *(a2 - 10);
        *(_OWORD *)(v72 + 112) = v112;
        *(_OWORD *)(v72 + 64) = v114;
        *(_OWORD *)(v72 + 80) = v113;
        long long v115 = *v12;
        long long v116 = *(a2 - 15);
        long long v117 = *(a2 - 13);
        *(_OWORD *)(v72 + 32) = *(a2 - 14);
        *(_OWORD *)(v72 + 48) = v117;
        *(_OWORD *)unint64_t v72 = v115;
        *(_OWORD *)(v72 + 16) = v116;
      }
      else
      {
        long long v545 = *(_OWORD *)(i + 192);
        long long v580 = *(_OWORD *)(i + 208);
        long long v615 = *(_OWORD *)(i + 224);
        long long v650 = *(_OWORD *)(i + 240);
        long long v406 = *v70;
        long long v441 = *(_OWORD *)(i + 144);
        long long v476 = *(_OWORD *)(i + 160);
        long long v510 = *(_OWORD *)(i + 176);
        long long v75 = *v12;
        long long v76 = *(a2 - 15);
        long long v77 = *(a2 - 13);
        *(_OWORD *)(i + 160) = *(a2 - 14);
        *(_OWORD *)(i + 176) = v77;
        *uint64_t v70 = v75;
        *(_OWORD *)(i + 144) = v76;
        long long v79 = *(a2 - 10);
        long long v78 = *(a2 - 9);
        long long v80 = *(a2 - 11);
        *(_OWORD *)(i + 192) = *(a2 - 12);
        *(_OWORD *)(i + 208) = v80;
        *(_OWORD *)(i + 224) = v79;
        *(_OWORD *)(i + 240) = v78;
      }
      *(a2 - 14) = v476;
      *(a2 - 13) = v510;
      *uint64_t v12 = v406;
      *(a2 - 15) = v441;
      *(a2 - 10) = v615;
      *(a2 - 9) = v650;
      *(a2 - 12) = v545;
      *(a2 - 11) = v580;
    }
LABEL_37:
    long long v118 = (long long *)(i + 256);
    unint64_t v119 = i + (v17 << 7);
    unint64_t v120 = v119 + 128;
    unsigned int v121 = *(_DWORD *)(v119 + 136);
    unsigned int v122 = *v374;
    if (v121 >= *(_DWORD *)(i + 264))
    {
      if (v122 < v121)
      {
        long long v482 = *(_OWORD *)(v120 + 32);
        long long v516 = *(_OWORD *)(v120 + 48);
        long long v412 = *(_OWORD *)v120;
        long long v447 = *(_OWORD *)(v120 + 16);
        long long v621 = *(_OWORD *)(v120 + 96);
        long long v656 = *(_OWORD *)(v120 + 112);
        long long v551 = *(_OWORD *)(v120 + 64);
        long long v586 = *(_OWORD *)(v120 + 80);
        long long v129 = *(a2 - 17);
        long long v131 = *(a2 - 20);
        long long v130 = *(a2 - 19);
        *(_OWORD *)(v120 + 96) = *(a2 - 18);
        *(_OWORD *)(v120 + 112) = v129;
        *(_OWORD *)(v120 + 64) = v131;
        *(_OWORD *)(v120 + 80) = v130;
        long long v132 = *v13;
        long long v133 = *(a2 - 23);
        long long v134 = *(a2 - 21);
        *(_OWORD *)(v120 + 32) = *(a2 - 22);
        *(_OWORD *)(v120 + 48) = v134;
        *(_OWORD *)unint64_t v120 = v132;
        *(_OWORD *)(v120 + 16) = v133;
        *(a2 - 22) = v482;
        *(a2 - 21) = v516;
        *int v13 = v412;
        *(a2 - 23) = v447;
        *(a2 - 18) = v621;
        *(a2 - 17) = v656;
        *(a2 - 20) = v551;
        *(a2 - 19) = v586;
        if (*(_DWORD *)(v120 + 8) < *(_DWORD *)(i + 264))
        {
          long long v552 = *(_OWORD *)(i + 320);
          long long v587 = *(_OWORD *)(i + 336);
          long long v622 = *(_OWORD *)(i + 352);
          long long v657 = *(_OWORD *)(i + 368);
          long long v413 = *v118;
          long long v448 = *(_OWORD *)(i + 272);
          long long v483 = *(_OWORD *)(i + 288);
          long long v517 = *(_OWORD *)(i + 304);
          long long v135 = *(_OWORD *)v120;
          long long v136 = *(_OWORD *)(v120 + 16);
          long long v137 = *(_OWORD *)(v120 + 48);
          *(_OWORD *)(i + 288) = *(_OWORD *)(v120 + 32);
          *(_OWORD *)(i + 304) = v137;
          *long long v118 = v135;
          *(_OWORD *)(i + 272) = v136;
          long long v139 = *(_OWORD *)(v120 + 96);
          long long v138 = *(_OWORD *)(v120 + 112);
          long long v140 = *(_OWORD *)(v120 + 80);
          *(_OWORD *)(i + 320) = *(_OWORD *)(v120 + 64);
          *(_OWORD *)(i + 336) = v140;
          *(_OWORD *)(i + 352) = v139;
          *(_OWORD *)(i + 368) = v138;
          *(_OWORD *)(v120 + 32) = v483;
          *(_OWORD *)(v120 + 48) = v517;
          *(_OWORD *)unint64_t v120 = v413;
          *(_OWORD *)(v120 + 16) = v448;
          *(_OWORD *)(v120 + 96) = v622;
          *(_OWORD *)(v120 + 112) = v657;
          *(_OWORD *)(v120 + 64) = v552;
          *(_OWORD *)(v120 + 80) = v587;
        }
      }
    }
    else
    {
      if (v122 >= v121)
      {
        long long v553 = *(_OWORD *)(i + 320);
        long long v588 = *(_OWORD *)(i + 336);
        long long v623 = *(_OWORD *)(i + 352);
        long long v658 = *(_OWORD *)(i + 368);
        long long v414 = *v118;
        long long v449 = *(_OWORD *)(i + 272);
        long long v484 = *(_OWORD *)(i + 288);
        long long v518 = *(_OWORD *)(i + 304);
        long long v141 = *(_OWORD *)v120;
        long long v142 = *(_OWORD *)(v120 + 16);
        long long v143 = *(_OWORD *)(v120 + 48);
        *(_OWORD *)(i + 288) = *(_OWORD *)(v120 + 32);
        *(_OWORD *)(i + 304) = v143;
        *long long v118 = v141;
        *(_OWORD *)(i + 272) = v142;
        long long v145 = *(_OWORD *)(v120 + 96);
        long long v144 = *(_OWORD *)(v120 + 112);
        long long v146 = *(_OWORD *)(v120 + 80);
        *(_OWORD *)(i + 320) = *(_OWORD *)(v120 + 64);
        *(_OWORD *)(i + 336) = v146;
        *(_OWORD *)(i + 352) = v145;
        *(_OWORD *)(i + 368) = v144;
        *(_OWORD *)(v120 + 32) = v484;
        *(_OWORD *)(v120 + 48) = v518;
        *(_OWORD *)unint64_t v120 = v414;
        *(_OWORD *)(v120 + 16) = v449;
        *(_OWORD *)(v120 + 96) = v623;
        *(_OWORD *)(v120 + 112) = v658;
        *(_OWORD *)(v120 + 64) = v553;
        *(_OWORD *)(v120 + 80) = v588;
        if (*v374 >= *(_DWORD *)(v120 + 8)) {
          goto LABEL_46;
        }
        long long v481 = *(_OWORD *)(v120 + 32);
        long long v515 = *(_OWORD *)(v120 + 48);
        long long v411 = *(_OWORD *)v120;
        long long v446 = *(_OWORD *)(v120 + 16);
        long long v620 = *(_OWORD *)(v120 + 96);
        long long v655 = *(_OWORD *)(v120 + 112);
        long long v550 = *(_OWORD *)(v120 + 64);
        long long v585 = *(_OWORD *)(v120 + 80);
        long long v147 = *(a2 - 17);
        long long v149 = *(a2 - 20);
        long long v148 = *(a2 - 19);
        *(_OWORD *)(v120 + 96) = *(a2 - 18);
        *(_OWORD *)(v120 + 112) = v147;
        *(_OWORD *)(v120 + 64) = v149;
        *(_OWORD *)(v120 + 80) = v148;
        long long v150 = *v13;
        long long v151 = *(a2 - 23);
        long long v152 = *(a2 - 21);
        *(_OWORD *)(v120 + 32) = *(a2 - 22);
        *(_OWORD *)(v120 + 48) = v152;
        *(_OWORD *)unint64_t v120 = v150;
        *(_OWORD *)(v120 + 16) = v151;
      }
      else
      {
        long long v550 = *(_OWORD *)(i + 320);
        long long v585 = *(_OWORD *)(i + 336);
        long long v620 = *(_OWORD *)(i + 352);
        long long v655 = *(_OWORD *)(i + 368);
        long long v411 = *v118;
        long long v446 = *(_OWORD *)(i + 272);
        long long v481 = *(_OWORD *)(i + 288);
        long long v515 = *(_OWORD *)(i + 304);
        long long v123 = *v13;
        long long v124 = *(a2 - 23);
        long long v125 = *(a2 - 21);
        *(_OWORD *)(i + 288) = *(a2 - 22);
        *(_OWORD *)(i + 304) = v125;
        *long long v118 = v123;
        *(_OWORD *)(i + 272) = v124;
        long long v127 = *(a2 - 18);
        long long v126 = *(a2 - 17);
        long long v128 = *(a2 - 19);
        *(_OWORD *)(i + 320) = *(a2 - 20);
        *(_OWORD *)(i + 336) = v128;
        *(_OWORD *)(i + 352) = v127;
        *(_OWORD *)(i + 368) = v126;
      }
      *(a2 - 22) = v481;
      *(a2 - 21) = v515;
      *int v13 = v411;
      *(a2 - 23) = v446;
      *(a2 - 18) = v620;
      *(a2 - 17) = v655;
      *(a2 - 20) = v550;
      *(a2 - 19) = v585;
    }
LABEL_46:
    unsigned int v153 = *(_DWORD *)(v18 + 8);
    unsigned int v154 = *(_DWORD *)(v120 + 8);
    if (v153 >= *(_DWORD *)(v72 + 8))
    {
      if (v154 < v153)
      {
        long long v486 = *(_OWORD *)(v18 + 32);
        long long v520 = *(_OWORD *)(v18 + 48);
        long long v416 = *(_OWORD *)v18;
        long long v451 = *(_OWORD *)(v18 + 16);
        long long v625 = *(_OWORD *)(v18 + 96);
        long long v660 = *(_OWORD *)(v18 + 112);
        long long v555 = *(_OWORD *)(v18 + 64);
        long long v590 = *(_OWORD *)(v18 + 80);
        long long v159 = *(_OWORD *)(v120 + 80);
        *(_OWORD *)(v18 + 64) = *(_OWORD *)(v120 + 64);
        *(_OWORD *)(v18 + 80) = v159;
        long long v160 = *(_OWORD *)(v120 + 112);
        *(_OWORD *)(v18 + 96) = *(_OWORD *)(v120 + 96);
        *(_OWORD *)(v18 + 112) = v160;
        long long v161 = *(_OWORD *)(v120 + 16);
        *(_OWORD *)unint64_t v18 = *(_OWORD *)v120;
        *(_OWORD *)(v18 + 16) = v161;
        long long v162 = *(_OWORD *)(v120 + 48);
        *(_OWORD *)(v18 + 32) = *(_OWORD *)(v120 + 32);
        *(_OWORD *)(v18 + 48) = v162;
        *(_OWORD *)(v120 + 32) = v486;
        *(_OWORD *)(v120 + 48) = v520;
        *(_OWORD *)unint64_t v120 = v416;
        *(_OWORD *)(v120 + 16) = v451;
        *(_OWORD *)(v120 + 96) = v625;
        *(_OWORD *)(v120 + 112) = v660;
        *(_OWORD *)(v120 + 64) = v555;
        *(_OWORD *)(v120 + 80) = v590;
        if (*(_DWORD *)(v18 + 8) < *(_DWORD *)(v72 + 8))
        {
          long long v487 = *(_OWORD *)(v72 + 32);
          long long v521 = *(_OWORD *)(v72 + 48);
          long long v417 = *(_OWORD *)v72;
          long long v452 = *(_OWORD *)(v72 + 16);
          long long v626 = *(_OWORD *)(v72 + 96);
          long long v661 = *(_OWORD *)(v72 + 112);
          long long v556 = *(_OWORD *)(v72 + 64);
          long long v591 = *(_OWORD *)(v72 + 80);
          long long v163 = *(_OWORD *)(v18 + 80);
          *(_OWORD *)(v72 + 64) = *(_OWORD *)(v18 + 64);
          *(_OWORD *)(v72 + 80) = v163;
          long long v164 = *(_OWORD *)(v18 + 112);
          *(_OWORD *)(v72 + 96) = *(_OWORD *)(v18 + 96);
          *(_OWORD *)(v72 + 112) = v164;
          long long v165 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)unint64_t v72 = *(_OWORD *)v18;
          *(_OWORD *)(v72 + 16) = v165;
          long long v166 = *(_OWORD *)(v18 + 48);
          *(_OWORD *)(v72 + 32) = *(_OWORD *)(v18 + 32);
          *(_OWORD *)(v72 + 48) = v166;
          *(_OWORD *)(v18 + 32) = v487;
          *(_OWORD *)(v18 + 48) = v521;
          *(_OWORD *)unint64_t v18 = v417;
          *(_OWORD *)(v18 + 16) = v452;
          *(_OWORD *)(v18 + 96) = v626;
          *(_OWORD *)(v18 + 112) = v661;
          *(_OWORD *)(v18 + 64) = v556;
          *(_OWORD *)(v18 + 80) = v591;
        }
      }
    }
    else
    {
      if (v154 >= v153)
      {
        long long v488 = *(_OWORD *)(v72 + 32);
        long long v522 = *(_OWORD *)(v72 + 48);
        long long v418 = *(_OWORD *)v72;
        long long v453 = *(_OWORD *)(v72 + 16);
        long long v627 = *(_OWORD *)(v72 + 96);
        long long v662 = *(_OWORD *)(v72 + 112);
        long long v557 = *(_OWORD *)(v72 + 64);
        long long v592 = *(_OWORD *)(v72 + 80);
        long long v167 = *(_OWORD *)(v18 + 80);
        *(_OWORD *)(v72 + 64) = *(_OWORD *)(v18 + 64);
        *(_OWORD *)(v72 + 80) = v167;
        long long v168 = *(_OWORD *)(v18 + 112);
        *(_OWORD *)(v72 + 96) = *(_OWORD *)(v18 + 96);
        *(_OWORD *)(v72 + 112) = v168;
        long long v169 = *(_OWORD *)(v18 + 16);
        *(_OWORD *)unint64_t v72 = *(_OWORD *)v18;
        *(_OWORD *)(v72 + 16) = v169;
        long long v170 = *(_OWORD *)(v18 + 48);
        *(_OWORD *)(v72 + 32) = *(_OWORD *)(v18 + 32);
        *(_OWORD *)(v72 + 48) = v170;
        *(_OWORD *)(v18 + 32) = v488;
        *(_OWORD *)(v18 + 48) = v522;
        *(_OWORD *)unint64_t v18 = v418;
        *(_OWORD *)(v18 + 16) = v453;
        *(_OWORD *)(v18 + 96) = v627;
        *(_OWORD *)(v18 + 112) = v662;
        *(_OWORD *)(v18 + 64) = v557;
        *(_OWORD *)(v18 + 80) = v592;
        if (*(_DWORD *)(v120 + 8) >= *(_DWORD *)(v18 + 8)) {
          goto LABEL_55;
        }
        long long v485 = *(_OWORD *)(v18 + 32);
        long long v519 = *(_OWORD *)(v18 + 48);
        long long v415 = *(_OWORD *)v18;
        long long v450 = *(_OWORD *)(v18 + 16);
        long long v624 = *(_OWORD *)(v18 + 96);
        long long v659 = *(_OWORD *)(v18 + 112);
        long long v554 = *(_OWORD *)(v18 + 64);
        long long v589 = *(_OWORD *)(v18 + 80);
        long long v171 = *(_OWORD *)(v120 + 80);
        *(_OWORD *)(v18 + 64) = *(_OWORD *)(v120 + 64);
        *(_OWORD *)(v18 + 80) = v171;
        long long v172 = *(_OWORD *)(v120 + 112);
        *(_OWORD *)(v18 + 96) = *(_OWORD *)(v120 + 96);
        *(_OWORD *)(v18 + 112) = v172;
        long long v173 = *(_OWORD *)(v120 + 16);
        *(_OWORD *)unint64_t v18 = *(_OWORD *)v120;
        *(_OWORD *)(v18 + 16) = v173;
        long long v174 = *(_OWORD *)(v120 + 48);
        *(_OWORD *)(v18 + 32) = *(_OWORD *)(v120 + 32);
        *(_OWORD *)(v18 + 48) = v174;
      }
      else
      {
        long long v485 = *(_OWORD *)(v72 + 32);
        long long v519 = *(_OWORD *)(v72 + 48);
        long long v415 = *(_OWORD *)v72;
        long long v450 = *(_OWORD *)(v72 + 16);
        long long v624 = *(_OWORD *)(v72 + 96);
        long long v659 = *(_OWORD *)(v72 + 112);
        long long v554 = *(_OWORD *)(v72 + 64);
        long long v589 = *(_OWORD *)(v72 + 80);
        long long v155 = *(_OWORD *)(v120 + 80);
        *(_OWORD *)(v72 + 64) = *(_OWORD *)(v120 + 64);
        *(_OWORD *)(v72 + 80) = v155;
        long long v156 = *(_OWORD *)(v120 + 112);
        *(_OWORD *)(v72 + 96) = *(_OWORD *)(v120 + 96);
        *(_OWORD *)(v72 + 112) = v156;
        long long v157 = *(_OWORD *)(v120 + 16);
        *(_OWORD *)unint64_t v72 = *(_OWORD *)v120;
        *(_OWORD *)(v72 + 16) = v157;
        long long v158 = *(_OWORD *)(v120 + 48);
        *(_OWORD *)(v72 + 32) = *(_OWORD *)(v120 + 32);
        *(_OWORD *)(v72 + 48) = v158;
      }
      *(_OWORD *)(v120 + 32) = v485;
      *(_OWORD *)(v120 + 48) = v519;
      *(_OWORD *)unint64_t v120 = v415;
      *(_OWORD *)(v120 + 16) = v450;
      *(_OWORD *)(v120 + 96) = v624;
      *(_OWORD *)(v120 + 112) = v659;
      *(_OWORD *)(v120 + 64) = v554;
      *(_OWORD *)(v120 + 80) = v589;
    }
LABEL_55:
    long long v489 = *(_OWORD *)(i + 32);
    long long v523 = *(_OWORD *)(i + 48);
    long long v419 = *(_OWORD *)i;
    long long v454 = *(_OWORD *)(i + 16);
    long long v628 = *(_OWORD *)(i + 96);
    long long v663 = *(_OWORD *)(i + 112);
    long long v558 = *(_OWORD *)(i + 64);
    long long v593 = *(_OWORD *)(i + 80);
    long long v175 = *(_OWORD *)(v18 + 112);
    long long v177 = *(_OWORD *)(v18 + 64);
    long long v176 = *(_OWORD *)(v18 + 80);
    *(_OWORD *)(i + 96) = *(_OWORD *)(v18 + 96);
    *(_OWORD *)(i + 112) = v175;
    *(_OWORD *)(i + 64) = v177;
    *(_OWORD *)(i + 80) = v176;
    long long v178 = *(_OWORD *)v18;
    long long v179 = *(_OWORD *)(v18 + 16);
    long long v180 = *(_OWORD *)(v18 + 48);
    *(_OWORD *)(i + 32) = *(_OWORD *)(v18 + 32);
    *(_OWORD *)(i + 48) = v180;
    *(_OWORD *)unint64_t i = v178;
    *(_OWORD *)(i + 16) = v179;
    *(_OWORD *)(v18 + 32) = v489;
    *(_OWORD *)(v18 + 48) = v523;
    *(_OWORD *)unint64_t v18 = v419;
    *(_OWORD *)(v18 + 16) = v454;
    *(_OWORD *)(v18 + 96) = v628;
    *(_OWORD *)(v18 + 112) = v663;
    *(_OWORD *)(v18 + 64) = v558;
    *(_OWORD *)(v18 + 80) = v593;
    --a3;
    if (a4)
    {
LABEL_33:
      int v105 = (long long *)*(unsigned int *)(i + 8);
LABEL_57:
      uint64_t v181 = 0;
      uint64_t v182 = *(void *)i;
      int v396 = *(_DWORD *)(i + 124);
      long long v390 = *(_OWORD *)(i + 92);
      long long v393 = *(_OWORD *)(i + 108);
      long long v387 = *(_OWORD *)(i + 76);
      long long v381 = *(_OWORD *)(i + 44);
      long long v384 = *(_OWORD *)(i + 60);
      long long v375 = *(_OWORD *)(i + 12);
      long long v378 = *(_OWORD *)(i + 28);
      do
      {
        if ((long long *)(i + v181 + 128) == a2) {
          goto LABEL_184;
        }
        unsigned int v183 = *(_DWORD *)(i + v181 + 136);
        v181 += 128;
      }
      while (v183 < v105);
      unint64_t v184 = i + v181;
      long long v185 = a2;
      if (v181 != 128)
      {
        while (v185 != (long long *)i)
        {
          int v186 = v185 - 8;
          unsigned int v187 = *((_DWORD *)v185 - 30);
          v185 -= 8;
          if (v187 < v105)
          {
LABEL_67:
            unint64_t i = v184;
            if (v184 >= (unint64_t)v186) {
              goto LABEL_78;
            }
            unsigned int v190 = v186;
LABEL_69:
            long long v490 = *(_OWORD *)(i + 32);
            long long v524 = *(_OWORD *)(i + 48);
            long long v420 = *(_OWORD *)i;
            long long v455 = *(_OWORD *)(i + 16);
            long long v629 = *(_OWORD *)(i + 96);
            long long v664 = *(_OWORD *)(i + 112);
            long long v559 = *(_OWORD *)(i + 64);
            long long v594 = *(_OWORD *)(i + 80);
            long long v191 = v190[7];
            long long v193 = v190[4];
            long long v192 = v190[5];
            *(_OWORD *)(i + 96) = v190[6];
            *(_OWORD *)(i + 112) = v191;
            *(_OWORD *)(i + 64) = v193;
            *(_OWORD *)(i + 80) = v192;
            long long v194 = *v190;
            long long v195 = v190[1];
            long long v196 = v190[3];
            *(_OWORD *)(i + 32) = v190[2];
            *(_OWORD *)(i + 48) = v196;
            *(_OWORD *)unint64_t i = v194;
            *(_OWORD *)(i + 16) = v195;
            v190[2] = v490;
            v190[3] = v524;
            *unsigned int v190 = v420;
            v190[1] = v455;
            v190[6] = v629;
            v190[7] = v664;
            v190[4] = v559;
            v190[5] = v594;
            unint64_t v197 = i + 128;
            while ((long long *)v197 != a2)
            {
              unsigned int v198 = *(_DWORD *)(v197 + 8);
              v197 += 128;
              if (v198 >= v105)
              {
                unint64_t i = v197 - 128;
                while (v190 != (long long *)a1)
                {
                  unint64_t v199 = v190 - 8;
                  unsigned int v200 = *((_DWORD *)v190 - 30);
                  v190 -= 8;
                  if (v200 < v105)
                  {
                    unsigned int v190 = v199;
                    if (i < (unint64_t)v199) {
                      goto LABEL_69;
                    }
                    goto LABEL_78;
                  }
                }
                goto LABEL_184;
              }
            }
            goto LABEL_184;
          }
        }
        goto LABEL_184;
      }
      long long v188 = a2;
      while (v184 < (unint64_t)v188)
      {
        int v186 = v188 - 8;
        unsigned int v189 = *((_DWORD *)v188 - 30);
        v188 -= 8;
        if (v189 < v105) {
          goto LABEL_67;
        }
      }
      int v186 = v188;
      unint64_t i = v184;
LABEL_78:
      if (i - 128 != a1)
      {
        long long v201 = *(_OWORD *)(i - 128);
        long long v202 = *(_OWORD *)(i - 112);
        long long v203 = *(_OWORD *)(i - 80);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(i - 96);
        *(_OWORD *)(a1 + 48) = v203;
        *(_OWORD *)a1 = v201;
        *(_OWORD *)(a1 + 16) = v202;
        long long v204 = *(_OWORD *)(i - 64);
        long long v205 = *(_OWORD *)(i - 48);
        long long v206 = *(_OWORD *)(i - 16);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(i - 32);
        *(_OWORD *)(a1 + 112) = v206;
        *(_OWORD *)(a1 + 64) = v204;
        *(_OWORD *)(a1 + 80) = v205;
      }
      *(void *)(i - 128) = v182;
      *(_DWORD *)(i - 120) = v105;
      *(_OWORD *)(i - 68) = v384;
      *(_OWORD *)(i - 84) = v381;
      *(_OWORD *)(i - 100) = v378;
      *(_OWORD *)(i - 116) = v375;
      *(_DWORD *)(i - 4) = v396;
      *(_OWORD *)(i - 20) = v393;
      *(_OWORD *)(i - 36) = v390;
      *(_OWORD *)(i - 52) = v387;
      if (v184 < (unint64_t)v186)
      {
LABEL_83:
        std::__introsort<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroupLayout(WGPUBindGroupLayoutDescriptor const&,BOOL)::$_0 &,WGPUBindGroupLayoutEntry *,false>(a1, i - 128, a3, a4 & 1);
        a4 = 0;
        goto LABEL_2;
      }
      BOOL v207 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroupLayout(WGPUBindGroupLayoutDescriptor const&,BOOL)::$_0 &,WGPUBindGroupLayoutEntry *>(a1, i - 128);
      if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroupLayout(WGPUBindGroupLayoutDescriptor const&,BOOL)::$_0 &,WGPUBindGroupLayoutEntry *>(i, (uint64_t)a2))
      {
        if (v207) {
          goto LABEL_2;
        }
        goto LABEL_83;
      }
      a2 = (long long *)(i - 128);
      if (v207) {
        return result;
      }
      goto LABEL_1;
    }
LABEL_56:
    int v105 = (long long *)*(unsigned int *)(i + 8);
    if (*(_DWORD *)(i - 120) < v105) {
      goto LABEL_57;
    }
    uint64_t v208 = *(void *)i;
    int v397 = *(_DWORD *)(i + 124);
    long long v391 = *(_OWORD *)(i + 92);
    long long v394 = *(_OWORD *)(i + 108);
    long long v388 = *(_OWORD *)(i + 76);
    long long v382 = *(_OWORD *)(i + 44);
    long long v385 = *(_OWORD *)(i + 60);
    long long v376 = *(_OWORD *)(i + 12);
    long long v379 = *(_OWORD *)(i + 28);
    if (v105 < *((_DWORD *)a2 - 30))
    {
      unint64_t v209 = i + 128;
      do
      {
        if ((long long *)v209 == a2) {
          goto LABEL_184;
        }
        unsigned int v210 = *(_DWORD *)(v209 + 8);
        v209 += 128;
      }
      while (v105 >= v210);
      unint64_t i = v209 - 128;
    }
    else
    {
      unint64_t v211 = i + 128;
      do
      {
        unint64_t i = v211;
        if (v211 >= (unint64_t)a2) {
          break;
        }
        unsigned int v212 = *(_DWORD *)(v211 + 8);
        v211 += 128;
      }
      while (v105 >= v212);
    }
    uint64_t v213 = a2;
    if (i < (unint64_t)a2)
    {
      uint64_t v214 = a2;
      while (v214 != (long long *)a1)
      {
        uint64_t v213 = v214 - 8;
        unsigned int v215 = *((_DWORD *)v214 - 30);
        v214 -= 8;
        if (v105 >= v215) {
          goto LABEL_96;
        }
      }
      goto LABEL_184;
    }
LABEL_96:
    if (i < (unint64_t)v213)
    {
      do
      {
        long long v491 = *(_OWORD *)(i + 32);
        long long v525 = *(_OWORD *)(i + 48);
        long long v421 = *(_OWORD *)i;
        long long v456 = *(_OWORD *)(i + 16);
        long long v630 = *(_OWORD *)(i + 96);
        long long v665 = *(_OWORD *)(i + 112);
        long long v560 = *(_OWORD *)(i + 64);
        long long v595 = *(_OWORD *)(i + 80);
        long long v216 = v213[7];
        long long v218 = v213[4];
        long long v217 = v213[5];
        *(_OWORD *)(i + 96) = v213[6];
        *(_OWORD *)(i + 112) = v216;
        *(_OWORD *)(i + 64) = v218;
        *(_OWORD *)(i + 80) = v217;
        long long v219 = *v213;
        long long v220 = v213[1];
        long long v221 = v213[3];
        *(_OWORD *)(i + 32) = v213[2];
        *(_OWORD *)(i + 48) = v221;
        *(_OWORD *)unint64_t i = v219;
        *(_OWORD *)(i + 16) = v220;
        v213[2] = v491;
        v213[3] = v525;
        *uint64_t v213 = v421;
        v213[1] = v456;
        v213[6] = v630;
        v213[7] = v665;
        v213[4] = v560;
        v213[5] = v595;
        unint64_t v222 = i + 128;
        do
        {
          if ((long long *)v222 == a2) {
            goto LABEL_184;
          }
          unsigned int v223 = *(_DWORD *)(v222 + 8);
          v222 += 128;
        }
        while (v105 >= v223);
        unint64_t i = v222 - 128;
        do
        {
          if (v213 == (long long *)a1) {
            goto LABEL_184;
          }
          id v224 = v213 - 8;
          unsigned int v225 = *((_DWORD *)v213 - 30);
          v213 -= 8;
        }
        while (v105 < v225);
        uint64_t v213 = v224;
      }
      while (i < (unint64_t)v224);
    }
    BOOL v5 = i - 128 >= a1;
    BOOL v6 = i - 128 == a1;
    if (i - 128 != a1)
    {
      long long v226 = *(_OWORD *)(i - 128);
      long long v227 = *(_OWORD *)(i - 112);
      long long v228 = *(_OWORD *)(i - 80);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(i - 96);
      *(_OWORD *)(a1 + 48) = v228;
      *(_OWORD *)a1 = v226;
      *(_OWORD *)(a1 + 16) = v227;
      long long v229 = *(_OWORD *)(i - 64);
      long long v230 = *(_OWORD *)(i - 48);
      long long v231 = *(_OWORD *)(i - 16);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(i - 32);
      *(_OWORD *)(a1 + 112) = v231;
      *(_OWORD *)(a1 + 64) = v229;
      *(_OWORD *)(a1 + 80) = v230;
    }
    a4 = 0;
    *(void *)(i - 128) = v208;
    *(_DWORD *)(i - 120) = v105;
    *(_OWORD *)(i - 68) = v385;
    *(_OWORD *)(i - 84) = v382;
    *(_OWORD *)(i - 100) = v379;
    *(_OWORD *)(i - 116) = v376;
    uint64_t result = *(double *)&v388;
    *(_DWORD *)(i - 4) = v397;
    *(_OWORD *)(i - 20) = v394;
    *(_OWORD *)(i - 36) = v391;
  }
  int v105 = (long long *)(i + 128);
  BOOL v271 = (long long *)i == a2 || v105 == a2;
  if (a4)
  {
    if (!v271)
    {
      uint64_t v272 = 0;
      uint64_t v273 = (void *)i;
      do
      {
        uint64_t v275 = v105;
        unsigned int v276 = *((_DWORD *)v273 + 34);
        if (v276 < *((_DWORD *)v273 + 2))
        {
          uint64_t v277 = *(void *)v275;
          long long v566 = *(_OWORD *)((char *)v273 + 204);
          long long v601 = *(_OWORD *)((char *)v273 + 220);
          long long v636 = *(_OWORD *)((char *)v273 + 236);
          int v671 = *((_DWORD *)v273 + 63);
          long long v427 = *(_OWORD *)((char *)v273 + 140);
          long long v462 = *(_OWORD *)((char *)v273 + 156);
          long long v278 = *(_OWORD *)((char *)v273 + 172);
          long long v279 = *(_OWORD *)((char *)v273 + 188);
          uint64_t v280 = v272;
          long long v497 = v278;
          long long v531 = v279;
          do
          {
            id v281 = (_OWORD *)(i + v280);
            long long v282 = *(_OWORD *)(i + v280 + 80);
            v281[12] = *(_OWORD *)(i + v280 + 64);
            v281[13] = v282;
            long long v283 = *(_OWORD *)(i + v280 + 112);
            v281[14] = *(_OWORD *)(i + v280 + 96);
            v281[15] = v283;
            long long v284 = *(_OWORD *)(i + v280 + 16);
            v281[8] = *(_OWORD *)(i + v280);
            v281[9] = v284;
            long long v285 = *(_OWORD *)(i + v280 + 48);
            v281[10] = *(_OWORD *)(i + v280 + 32);
            v281[11] = v285;
            if (!v280)
            {
              uint64_t v274 = i;
              goto LABEL_134;
            }
            v280 -= 128;
          }
          while (v276 < *((_DWORD *)v281 - 30));
          uint64_t v274 = i + v280 + 128;
LABEL_134:
          *(void *)uint64_t v274 = v277;
          *(_DWORD *)(v274 + 8) = v276;
          uint64_t result = *(double *)&v566;
          *(_DWORD *)(v274 + 124) = v671;
          *(_OWORD *)(v274 + 60) = v531;
          *(_OWORD *)(v274 + 44) = v497;
          *(_OWORD *)(v274 + 28) = v462;
          *(_OWORD *)(v274 + 12) = v427;
          *(_OWORD *)(v274 + 108) = v636;
          *(_OWORD *)(v274 + 92) = v601;
          *(_OWORD *)(v274 + 76) = v566;
        }
        int v105 = v275 + 8;
        v272 += 128;
        uint64_t v273 = v275;
      }
      while (v275 + 8 != a2);
    }
    return result;
  }
  if (!v271)
  {
    uint64_t v349 = -2;
    uint64_t v350 = 1;
    unint64_t v351 = i;
    while (1)
    {
      unsigned int v352 = *(_DWORD *)(v351 + 136);
      if (v352 < *(_DWORD *)(v351 + 8)) {
        break;
      }
LABEL_178:
      unint64_t v351 = i + (v350++ << 7);
      v105 += 8;
      --v349;
      if (v105 == a2) {
        return result;
      }
    }
    uint64_t v353 = *(void *)v105;
    long long v571 = *(_OWORD *)(v351 + 204);
    long long v606 = *(_OWORD *)(v351 + 220);
    long long v641 = *(_OWORD *)(v351 + 236);
    int v676 = *(_DWORD *)(v351 + 252);
    long long v432 = *(_OWORD *)(v351 + 140);
    long long v467 = *(_OWORD *)(v351 + 156);
    long long v354 = *(_OWORD *)(v351 + 172);
    long long v355 = *(_OWORD *)(v351 + 188);
    uint64_t v356 = v349;
    uint64_t v357 = v105;
    long long v536 = v355;
    while (1)
    {
      long long v358 = *(v357 - 3);
      v357[4] = *(v357 - 4);
      v357[5] = v358;
      long long v359 = *(v357 - 1);
      v357[6] = *(v357 - 2);
      v357[7] = v359;
      long long v360 = *(v357 - 7);
      *uint64_t v357 = *(v357 - 8);
      v357[1] = v360;
      long long v361 = *(v357 - 5);
      v357[2] = *(v357 - 6);
      v357[3] = v361;
      BOOL v5 = __CFADD__(v356++, 1);
      if (v5) {
        break;
      }
      uint64_t v362 = v357 - 8;
      unsigned int v363 = *((_DWORD *)v357 - 62);
      v357 -= 8;
      if (v352 >= v363)
      {
        *(void *)uint64_t v362 = v353;
        *((_DWORD *)v362 + 2) = v352;
        *(long long *)((char *)v362 + 60) = v536;
        *(long long *)((char *)v362 + 44) = v354;
        *(long long *)((char *)v362 + 28) = v467;
        *(long long *)((char *)v362 + 12) = v432;
        uint64_t result = *(double *)&v571;
        *((_DWORD *)v362 + 31) = v676;
        *(long long *)((char *)v362 + 108) = v641;
        *(long long *)((char *)v362 + 92) = v606;
        *(long long *)((char *)v362 + 76) = v571;
        goto LABEL_178;
      }
    }
LABEL_184:
    __break(1u);
LABEL_185:
    long long v502 = *(_OWORD *)(a1 + 32);
    long long v537 = *(_OWORD *)(a1 + 48);
    long long v433 = *(_OWORD *)a1;
    long long v468 = *(_OWORD *)(a1 + 16);
    long long v642 = *(_OWORD *)(a1 + 96);
    long long v677 = *(_OWORD *)(a1 + 112);
    long long v572 = *(_OWORD *)(a1 + 64);
    long long v607 = *(_OWORD *)(a1 + 80);
    long long v364 = v105[5];
    *(_OWORD *)(a1 + 64) = v105[4];
    *(_OWORD *)(a1 + 80) = v364;
    long long v365 = v105[7];
    *(_OWORD *)(a1 + 96) = v105[6];
    *(_OWORD *)(a1 + 112) = v365;
    long long v366 = v105[1];
    *(_OWORD *)a1 = *v105;
    *(_OWORD *)(a1 + 16) = v366;
    long long v367 = v105[3];
    *(_OWORD *)(a1 + 32) = v105[2];
    *(_OWORD *)(a1 + 48) = v367;
    v105[2] = v502;
    v105[3] = v537;
    *int v105 = v433;
    v105[1] = v468;
    uint64_t result = *(double *)&v572;
    v105[6] = v642;
    v105[7] = v677;
    v105[4] = v572;
    v105[5] = v607;
    if (*((_DWORD *)a2 - 30) < *(_DWORD *)(a1 + 136))
    {
      long long v562 = v105[4];
      long long v597 = v105[5];
      long long v632 = v105[6];
      long long v667 = v105[7];
      long long v423 = *v105;
      long long v458 = v105[1];
      long long v493 = v105[2];
      long long v527 = v105[3];
      long long v368 = *v11;
      long long v369 = *(a2 - 7);
      long long v370 = *(a2 - 5);
      v105[2] = *(a2 - 6);
      v105[3] = v370;
      *int v105 = v368;
      v105[1] = v369;
      long long v372 = *(a2 - 2);
      long long v371 = *(a2 - 1);
      long long v373 = *(a2 - 3);
      v105[4] = *(a2 - 4);
      v105[5] = v373;
      v105[6] = v372;
      v105[7] = v371;
LABEL_187:
      v11[2] = v493;
      v11[3] = v527;
      *int v11 = v423;
      v11[1] = v458;
      uint64_t result = *(double *)&v562;
      v11[6] = v632;
      v11[7] = v667;
      v11[4] = v562;
      v11[5] = v597;
    }
  }
  return result;
}

  int v11 = a2 - 1;
  uint64_t v12 = a2 - 2;
  int v13 = a2 - 3;
  for (unint64_t i = a1; ; i[-1].n128_u64[1] = v57)
  {
LABEL_2:
    a1 = i;
    uint64_t v15 = (char *)a2 - (char *)i;
    uint64_t v16 = a2 - i;
    if (v6 || !v5)
    {
      switch(v16)
      {
        case 0:
        case 1:
          return result;
        case 2:
          long long v67 = a2[-1].n128_u64[0];
          --a2;
          if (v67 >= i->n128_u64[0]) {
            return result;
          }
          goto LABEL_112;
        case 3:
          long long v22 = i + 1;
          long long v68 = i[1].n128_u64[0];
          uint64_t v70 = a2[-1].n128_u64[0];
          --a2;
          long long v69 = v70;
          if (v68 < i->n128_u64[0])
          {
            if (v69 >= v68) {
              goto LABEL_192;
            }
LABEL_112:
            long long v139 = *i;
            *unint64_t i = *a2;
            uint64_t result = v139;
            *a2 = v139;
            return result;
          }
          if (v69 >= v68) {
            return result;
          }
          uint64_t result = *v22;
          *long long v22 = *a2;
          *a2 = result;
          goto LABEL_200;
        case 4:
          long long v22 = i + 1;
          unint64_t v71 = i[1].n128_u64[0];
          unint64_t v72 = i + 2;
          unsigned int v73 = i[2].n128_u64[0];
          if (v71 >= i->n128_u64[0])
          {
            if (v73 < v71)
            {
              uint64_t result = *v22;
              *long long v22 = *v72;
              void *v72 = result;
              if (i[1].n128_u64[0] < i->n128_u64[0])
              {
                long long v142 = *i;
                *unint64_t i = *v22;
                uint64_t result = v142;
                *long long v22 = v142;
              }
            }
          }
          else
          {
            if (v73 >= v71)
            {
              long long v144 = *i;
              *unint64_t i = *v22;
              uint64_t result = v144;
              *long long v22 = v144;
              if (v73 >= i[1].n128_u64[0]) {
                goto LABEL_197;
              }
              uint64_t result = *v22;
              *long long v22 = *v72;
            }
            else
            {
              long long v140 = *i;
              *unint64_t i = *v72;
              uint64_t result = v140;
            }
            void *v72 = result;
          }
LABEL_197:
          if (v11->n128_u64[0] < v72->n128_u64[0])
          {
            uint64_t result = *v72;
            void *v72 = *v11;
            *int v11 = result;
            if (v72->n128_u64[0] < v22->n128_u64[0])
            {
              uint64_t result = *v22;
              *long long v22 = *v72;
              void *v72 = result;
LABEL_200:
              if (i[1].n128_u64[0] < i->n128_u64[0])
              {
                long long v145 = *i;
                *unint64_t i = *v22;
                uint64_t result = v145;
                *long long v22 = v145;
              }
            }
          }
          break;
        case 5:
          result.n128_u64[0] = std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*>(i, i + 1, i[2].n128_u64, (__n128 *)i[3].n128_u64, (__n128 *)a2[-1].n128_u64, result).n128_u64[0];
          return result;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v15 <= 383)
    {
      long long v22 = i + 1;
      long long v75 = i == a2 || v22 == a2;
      if (a4)
      {
        if (v75) {
          return result;
        }
        long long v76 = 0;
        long long v77 = i;
        while (1)
        {
          long long v79 = v22;
          long long v80 = v22->n128_u64[0];
          if (v80 < v77->n128_u64[0])
          {
            long long v81 = v77[1].n128_i64[1];
            long long v82 = v76;
            do
            {
              uint64_t result = *(__n128 *)((char *)i + v82);
              *(__n128 *)((char *)i + v82 + 16) = result;
              if (!v82)
              {
                long long v78 = i;
                goto LABEL_129;
              }
              long long v83 = *(unint64_t *)((char *)i[-1].n128_u64 + v82);
              v82 -= 16;
            }
            while (v80 < v83);
            long long v78 = (__n128 *)((char *)i + v82 + 16);
LABEL_129:
            v78->n128_u64[0] = v80;
            v78->n128_u64[1] = v81;
          }
          long long v22 = v79 + 1;
          v76 += 16;
          long long v77 = v79;
          if (&v79[1] == a2) {
            return result;
          }
        }
      }
      if (v75) {
        return result;
      }
      long long v111 = -2;
      long long v112 = 1;
      long long v113 = i;
      while (1)
      {
        long long v114 = v22->n128_u64[0];
        if (v22->n128_u64[0] < v113->n128_u64[0])
        {
          long long v115 = v113[1].n128_u64[1];
          long long v116 = v111;
          long long v117 = v22;
          do
          {
            uint64_t result = v117[-1];
            *long long v117 = result;
            BOOL v5 = __CFADD__(v116++, 1);
            if (v5) {
              goto LABEL_191;
            }
            long long v118 = v117 - 1;
            unint64_t v119 = v117[-2].n128_u64[0];
            --v117;
          }
          while (v114 < v119);
          v118->n128_u64[0] = v114;
          v118->n128_u64[1] = v115;
        }
        long long v113 = &i[v112++];
        ++v22;
        --v111;
        if (v22 == a2) {
          return result;
        }
      }
    }
    if (!a3) {
      break;
    }
    unint64_t v17 = (unint64_t)v16 >> 1;
    unint64_t v18 = &i[(unint64_t)v16 >> 1];
    unsigned int v19 = v11->n128_u64[0];
    if ((unint64_t)v15 < 0x801)
    {
      long long v21 = i->n128_u64[0];
      if (i->n128_u64[0] >= v18->n128_u64[0])
      {
        if (v19 < v21)
        {
          long long v124 = *i;
          *unint64_t i = *v11;
          uint64_t result = v124;
          *int v11 = v124;
          if (i->n128_u64[0] < v18->n128_u64[0])
          {
            long long v125 = *v18;
            *unint64_t v18 = *i;
            uint64_t result = v125;
            *unint64_t i = v125;
            --a3;
            long long v22 = (__n128 *)i->n128_u64[0];
            if (a4) {
              goto LABEL_57;
            }
            goto LABEL_56;
          }
        }
      }
      else
      {
        if (v19 < v21)
        {
          unsigned int v121 = *v18;
          *unint64_t v18 = *v11;
          goto LABEL_31;
        }
        long long v128 = *v18;
        *unint64_t v18 = *i;
        uint64_t result = v128;
        *unint64_t i = v128;
        if (v11->n128_u64[0] < i->n128_u64[0])
        {
          unsigned int v121 = *i;
          *unint64_t i = *v11;
LABEL_31:
          uint64_t result = v121;
          *int v11 = v121;
        }
      }
      --a3;
      long long v22 = (__n128 *)i->n128_u64[0];
      if (a4) {
        goto LABEL_57;
      }
      goto LABEL_56;
    }
    unsigned int v20 = v18->n128_u64[0];
    if (v18->n128_u64[0] >= i->n128_u64[0])
    {
      if (v19 < v20)
      {
        unsigned int v122 = *v18;
        *unint64_t v18 = *v11;
        *int v11 = v122;
        if (v18->n128_u64[0] < i->n128_u64[0])
        {
          long long v123 = *i;
          *unint64_t i = *v18;
          *unint64_t v18 = v123;
        }
      }
    }
    else
    {
      if (v19 >= v20)
      {
        long long v126 = *i;
        *unint64_t i = *v18;
        *unint64_t v18 = v126;
        if (v11->n128_u64[0] >= v18->n128_u64[0]) {
          goto LABEL_23;
        }
        unint64_t v120 = *v18;
        *unint64_t v18 = *v11;
      }
      else
      {
        unint64_t v120 = *i;
        *unint64_t i = *v11;
      }
      *int v11 = v120;
    }
LABEL_23:
    long long v23 = i + 1;
    long long v24 = &i[v17];
    unsigned int v27 = v24[-1].n128_u64[0];
    long long v25 = v24 - 1;
    long long v26 = v27;
    long long v28 = v12->n128_u64[0];
    if (v27 >= i[1].n128_u64[0])
    {
      if (v28 < v26)
      {
        long long v127 = *v25;
        *long long v25 = *v12;
        *uint64_t v12 = v127;
        if (v25->n128_u64[0] < v23->n128_u64[0])
        {
          long long v30 = *v23;
          *long long v23 = *v25;
          *long long v25 = v30;
        }
      }
    }
    else
    {
      if (v28 >= v26)
      {
        long long v31 = *v23;
        *long long v23 = *v25;
        *long long v25 = v31;
        if (v12->n128_u64[0] >= v25->n128_u64[0]) {
          goto LABEL_37;
        }
        long long v129 = *v25;
        *long long v25 = *v12;
        long long v29 = v129;
      }
      else
      {
        long long v29 = *v23;
        *long long v23 = *v12;
      }
      *uint64_t v12 = v29;
    }
LABEL_37:
    long long v32 = i + 2;
    long long v33 = &i[v17];
    long long v36 = v33[1].n128_u64[0];
    long long v34 = v33 + 1;
    long long v35 = v36;
    long long v37 = v13->n128_u64[0];
    if (v36 >= i[2].n128_u64[0])
    {
      if (v37 < v35)
      {
        long long v130 = *v34;
        *long long v34 = *v13;
        *int v13 = v130;
        if (v34->n128_u64[0] < v32->n128_u64[0])
        {
          long long v39 = *v32;
          *long long v32 = *v34;
          *long long v34 = v39;
        }
      }
    }
    else
    {
      if (v37 >= v35)
      {
        long long v40 = *v32;
        *long long v32 = *v34;
        *long long v34 = v40;
        if (v13->n128_u64[0] >= v34->n128_u64[0]) {
          goto LABEL_46;
        }
        long long v131 = *v34;
        *long long v34 = *v13;
        long long v38 = v131;
      }
      else
      {
        long long v38 = *v32;
        *long long v32 = *v13;
      }
      *int v13 = v38;
    }
LABEL_46:
    long long v41 = v18->n128_u64[0];
    long long v42 = v34->n128_u64[0];
    if (v18->n128_u64[0] >= v25->n128_u64[0])
    {
      if (v42 < v41)
      {
        long long v133 = *v18;
        *unint64_t v18 = *v34;
        *long long v34 = v133;
        if (v18->n128_u64[0] < v25->n128_u64[0])
        {
          long long v134 = *v25;
          *long long v25 = *v18;
          *unint64_t v18 = v134;
        }
      }
    }
    else
    {
      if (v42 >= v41)
      {
        long long v135 = *v25;
        *long long v25 = *v18;
        *unint64_t v18 = v135;
        if (v34->n128_u64[0] >= v18->n128_u64[0]) {
          goto LABEL_55;
        }
        long long v132 = *v18;
        *unint64_t v18 = *v34;
      }
      else
      {
        long long v132 = *v25;
        *long long v25 = *v34;
      }
      *long long v34 = v132;
    }
LABEL_55:
    long long v136 = *i;
    *unint64_t i = *v18;
    uint64_t result = v136;
    *unint64_t v18 = v136;
    --a3;
    long long v22 = (__n128 *)i->n128_u64[0];
    if (a4) {
      goto LABEL_57;
    }
LABEL_56:
    if (i[-1].n128_u64[0] < (unint64_t)v22)
    {
LABEL_57:
      long long v43 = 0;
      long long v44 = i->n128_u64[1];
      do
      {
        long long v45 = &i[v43 + 1];
        if (v45 == a2) {
          goto LABEL_191;
        }
        ++v43;
      }
      while (v45->n128_u64[0] < (unint64_t)v22);
      long long v46 = &i[v43];
      long long v47 = a2;
      if (v43 != 1)
      {
        while (v47 != i)
        {
          long long v48 = v47[-1].n128_u64[0];
          --v47;
          if (v48 < (unint64_t)v22) {
            goto LABEL_67;
          }
        }
        goto LABEL_191;
      }
      long long v47 = a2;
      do
      {
        if (v46 >= v47) {
          break;
        }
        long long v49 = v47[-1].n128_u64[0];
        --v47;
      }
      while (v49 >= (unint64_t)v22);
LABEL_67:
      unint64_t i = (__n128 *)((char *)i + v43 * 16);
      if (v46 < v47)
      {
        long long v50 = v47;
LABEL_69:
        long long v137 = *i;
        *unint64_t i = *v50;
        uint64_t result = v137;
        *long long v50 = v137;
        long long v51 = i + 1;
        while (v51 != a2)
        {
          long long v52 = v51->n128_u64[0];
          ++v51;
          if (v52 >= (unint64_t)v22)
          {
            unint64_t i = v51 - 1;
            while (v50 != a1)
            {
              long long v53 = v50[-1].n128_u64[0];
              --v50;
              if (v53 < (unint64_t)v22)
              {
                if (i < v50) {
                  goto LABEL_69;
                }
                goto LABEL_76;
              }
            }
            break;
          }
        }
LABEL_191:
        __break(1u);
LABEL_192:
        long long v143 = *a1;
        *a1 = *v22;
        uint64_t result = v143;
        *long long v22 = v143;
        if (a2->n128_u64[0] < a1[1].n128_u64[0])
        {
          uint64_t result = *v22;
          *long long v22 = *a2;
          *a2 = result;
        }
        return result;
      }
LABEL_76:
      long long v54 = i - 1;
      if (&i[-1] != a1)
      {
        uint64_t result = *v54;
        *a1 = *v54;
      }
      i[-1].n128_u64[0] = (unint64_t)v22;
      i[-1].n128_u64[1] = v44;
      if (v46 < v47)
      {
LABEL_81:
        std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*,false>(a1, &i[-1], a3, a4 & 1);
        a4 = 0;
        goto LABEL_2;
      }
      long long v55 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*>(a1, i - 1, result);
      if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*>(i, a2, v56))
      {
        if (v55) {
          goto LABEL_2;
        }
        goto LABEL_81;
      }
      a2 = i - 1;
      if (v55) {
        return result;
      }
      goto LABEL_1;
    }
    long long v57 = i->n128_u64[1];
    if ((unint64_t)v22 < v11->n128_u64[0])
    {
      long long v58 = i + 1;
      do
      {
        if (v58 == a2) {
          goto LABEL_191;
        }
        long long v59 = v58->n128_u64[0];
        ++v58;
      }
      while ((unint64_t)v22 >= v59);
      unint64_t i = v58 - 1;
    }
    else
    {
      n128_u64 = (unint64_t)i[1].n128_u64;
      do
      {
        unint64_t i = (__n128 *)n128_u64;
        if (n128_u64 >= (unint64_t)a2) {
          break;
        }
        n128_u64 += 16;
      }
      while ((unint64_t)v22 >= i->n128_u64[0]);
    }
    long long v61 = a2;
    if (i < a2)
    {
      long long v61 = a2;
      while (v61 != a1)
      {
        long long v62 = v61[-1].n128_u64[0];
        --v61;
        if ((unint64_t)v22 >= v62) {
          goto LABEL_100;
        }
      }
      goto LABEL_191;
    }
LABEL_100:
    if (i < v61)
    {
      long long v138 = *i;
      *unint64_t i = *v61;
      uint64_t result = v138;
      *long long v61 = v138;
      long long v63 = i + 1;
      while (v63 != a2)
      {
        long long v64 = v63->n128_u64[0];
        ++v63;
        if ((unint64_t)v22 < v64)
        {
          unint64_t i = v63 - 1;
          while (v61 != a1)
          {
            long long v65 = v61[-1].n128_u64[0];
            --v61;
            if ((unint64_t)v22 >= v65) {
              goto LABEL_100;
            }
          }
          goto LABEL_191;
        }
      }
      goto LABEL_191;
    }
    long long v66 = i - 1;
    BOOL v5 = &i[-1] >= a1;
    BOOL v6 = &i[-1] == a1;
    if (&i[-1] != a1)
    {
      uint64_t result = *v66;
      *a1 = *v66;
    }
    a4 = 0;
    i[-1].n128_u64[0] = (unint64_t)v22;
  }
  if (i == a2) {
    return result;
  }
  long long v84 = (unint64_t)(v16 - 2) >> 1;
  long long v85 = v84;
  while (2)
  {
    if (v84 >= v85)
    {
      long long v87 = (2 * v85) | 1;
      long long v88 = &i[v87];
      if (2 * v85 + 2 >= v16)
      {
        long long v91 = &i[v85];
        long long v92 = v91->n128_u64[0];
        if (v88->n128_u64[0] >= v91->n128_u64[0])
        {
LABEL_150:
          long long v93 = v91->n128_i64[1];
          while (1)
          {
            long long v97 = v91;
            long long v91 = v88;
            void *v97 = *v88;
            if (v84 < v87) {
              break;
            }
            long long v98 = (2 * v87) | 1;
            long long v88 = &i[v98];
            long long v87 = 2 * v87 + 2;
            if (v87 < v16)
            {
              long long v94 = v88->n128_u64[0];
              long long v95 = v88[1].n128_u64[0];
              long long v96 = v88->n128_u64[0] >= v95;
              if (v88->n128_u64[0] <= v95) {
                long long v94 = v88[1].n128_u64[0];
              }
              if (v88->n128_u64[0] < v95) {
                ++v88;
              }
              if (v96) {
                long long v87 = v98;
              }
              if (v94 < v92) {
                break;
              }
            }
            else
            {
              long long v87 = v98;
              if (v88->n128_u64[0] < v92) {
                break;
              }
            }
          }
          v91->n128_u64[0] = v92;
          v91->n128_u64[1] = v93;
        }
      }
      else
      {
        long long v89 = v88[1].n128_u64[0];
        long long v90 = v88->n128_u64[0] >= v89;
        if (v88->n128_u64[0] > v89) {
          long long v89 = v88->n128_u64[0];
        }
        if (!v90)
        {
          ++v88;
          long long v87 = 2 * v85 + 2;
        }
        long long v91 = &i[v85];
        long long v92 = v91->n128_u64[0];
        if (v89 >= v91->n128_u64[0]) {
          goto LABEL_150;
        }
      }
    }
    long long v86 = v85-- <= 0;
    if (!v86) {
      continue;
    }
    break;
  }
  long long v99 = (unint64_t)v15 >> 4;
  do
  {
    long long v100 = 0;
    long long v141 = *i;
    long long v101 = i;
    do
    {
      long long v102 = &v101[v100 + 1];
      long long v103 = (2 * v100) | 1;
      long long v104 = 2 * v100 + 2;
      if (v104 < v99 && v102->n128_u64[0] < v102[1].n128_u64[0])
      {
        ++v102;
        long long v103 = v104;
      }
      WTF *v101 = *v102;
      long long v101 = v102;
      long long v100 = v103;
    }
    while (v103 <= (uint64_t)((unint64_t)(v99 - 2) >> 1));
    if (v102 == --a2)
    {
      uint64_t result = v141;
      void *v102 = v141;
    }
    else
    {
      void *v102 = *a2;
      uint64_t result = v141;
      *a2 = v141;
      int v105 = (char *)v102 - (char *)i + 16;
      if (v105 >= 17)
      {
        long long v106 = (((unint64_t)v105 >> 4) - 2) >> 1;
        long long v107 = &i[v106];
        long long v108 = v102->n128_u64[0];
        if (v107->n128_u64[0] < v102->n128_u64[0])
        {
          long long v109 = v102->n128_u64[1];
          do
          {
            long long v110 = v102;
            long long v102 = v107;
            uint64_t result = *v107;
            *long long v110 = *v107;
            if (!v106) {
              break;
            }
            long long v106 = (v106 - 1) >> 1;
            long long v107 = &i[v106];
          }
          while (v107->n128_u64[0] < v108);
          v102->n128_u64[0] = v108;
          v102->n128_u64[1] = v109;
        }
      }
    }
    long long v86 = v99-- <= 2;
  }
  while (!v86);
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroupLayout(WGPUBindGroupLayoutDescriptor const&,BOOL)::$_0 &,WGPUBindGroupLayoutEntry *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 7;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 120) < *(_DWORD *)(a1 + 8))
      {
        long long v176 = *(_OWORD *)(a1 + 64);
        long long v190 = *(_OWORD *)(a1 + 80);
        long long v204 = *(_OWORD *)(a1 + 96);
        long long v218 = *(_OWORD *)(a1 + 112);
        long long v120 = *(_OWORD *)a1;
        long long v134 = *(_OWORD *)(a1 + 16);
        long long v148 = *(_OWORD *)(a1 + 32);
        long long v162 = *(_OWORD *)(a1 + 48);
        long long v6 = *(_OWORD *)(a2 - 64);
        long long v7 = *(_OWORD *)(a2 - 48);
        long long v8 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 112) = v8;
        *(_OWORD *)(a1 + 64) = v6;
        *(_OWORD *)(a1 + 80) = v7;
        long long v9 = *(_OWORD *)(a2 - 128);
        long long v10 = *(_OWORD *)(a2 - 112);
        long long v11 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 48) = v11;
        *(_OWORD *)a1 = v9;
        *(_OWORD *)(a1 + 16) = v10;
        *(_OWORD *)(a2 - 96) = v148;
        *(_OWORD *)(a2 - 80) = v162;
        *(_OWORD *)(a2 - 128) = v120;
        *(_OWORD *)(a2 - 112) = v134;
        *(_OWORD *)(a2 - 64) = v176;
        *(_OWORD *)(a2 - 48) = v190;
        *(_OWORD *)(a2 - 32) = v204;
        *(_OWORD *)(a2 - 16) = v218;
      }
      return result;
    case 3:
      long long v23 = (long long *)(a1 + 128);
      long long v24 = (long long *)(a2 - 128);
      unsigned int v25 = *(_DWORD *)(a1 + 136);
      unsigned int v26 = *(_DWORD *)(a2 - 120);
      if (v25 >= *(_DWORD *)(a1 + 8))
      {
        if (v26 < v25)
        {
          long long v185 = *(_OWORD *)(a1 + 192);
          long long v199 = *(_OWORD *)(a1 + 208);
          long long v213 = *(_OWORD *)(a1 + 224);
          long long v227 = *(_OWORD *)(a1 + 240);
          long long v129 = *v23;
          long long v143 = *(_OWORD *)(a1 + 144);
          long long v157 = *(_OWORD *)(a1 + 160);
          long long v171 = *(_OWORD *)(a1 + 176);
          long long v72 = *(_OWORD *)(a2 - 64);
          long long v73 = *(_OWORD *)(a2 - 48);
          long long v74 = *(_OWORD *)(a2 - 16);
          *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 - 32);
          *(_OWORD *)(a1 + 240) = v74;
          *(_OWORD *)(a1 + 192) = v72;
          *(_OWORD *)(a1 + 208) = v73;
          long long v75 = *v24;
          long long v76 = *(_OWORD *)(a2 - 112);
          long long v77 = *(_OWORD *)(a2 - 80);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 - 96);
          *(_OWORD *)(a1 + 176) = v77;
          *long long v23 = v75;
          *(_OWORD *)(a1 + 144) = v76;
          *(_OWORD *)(a2 - 96) = v157;
          *(_OWORD *)(a2 - 80) = v171;
          *long long v24 = v129;
          *(_OWORD *)(a2 - 112) = v143;
          *(_OWORD *)(a2 - 32) = v213;
          *(_OWORD *)(a2 - 16) = v227;
          *(_OWORD *)(a2 - 64) = v185;
          *(_OWORD *)(a2 - 48) = v199;
          if (*(_DWORD *)(a1 + 136) < *(_DWORD *)(a1 + 8))
          {
            long long v186 = *(_OWORD *)(a1 + 64);
            long long v200 = *(_OWORD *)(a1 + 80);
            long long v214 = *(_OWORD *)(a1 + 96);
            long long v228 = *(_OWORD *)(a1 + 112);
            long long v130 = *(_OWORD *)a1;
            long long v144 = *(_OWORD *)(a1 + 16);
            long long v158 = *(_OWORD *)(a1 + 32);
            long long v172 = *(_OWORD *)(a1 + 48);
            long long v78 = *v23;
            long long v79 = *(_OWORD *)(a1 + 144);
            long long v80 = *(_OWORD *)(a1 + 176);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 160);
            *(_OWORD *)(a1 + 48) = v80;
            *(_OWORD *)a1 = v78;
            *(_OWORD *)(a1 + 16) = v79;
            long long v81 = *(_OWORD *)(a1 + 192);
            long long v82 = *(_OWORD *)(a1 + 208);
            long long v83 = *(_OWORD *)(a1 + 240);
            *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 224);
            *(_OWORD *)(a1 + 112) = v83;
            *(_OWORD *)(a1 + 64) = v81;
            *(_OWORD *)(a1 + 80) = v82;
            *(_OWORD *)(a1 + 160) = v158;
            *(_OWORD *)(a1 + 176) = v172;
            *long long v23 = v130;
            *(_OWORD *)(a1 + 144) = v144;
            *(_OWORD *)(a1 + 224) = v214;
            *(_OWORD *)(a1 + 240) = v228;
            *(_OWORD *)(a1 + 192) = v186;
            *(_OWORD *)(a1 + 208) = v200;
          }
        }
      }
      else
      {
        if (v26 >= v25)
        {
          long long v189 = *(_OWORD *)(a1 + 64);
          long long v203 = *(_OWORD *)(a1 + 80);
          long long v217 = *(_OWORD *)(a1 + 96);
          long long v231 = *(_OWORD *)(a1 + 112);
          long long v133 = *(_OWORD *)a1;
          long long v147 = *(_OWORD *)(a1 + 16);
          long long v161 = *(_OWORD *)(a1 + 32);
          long long v175 = *(_OWORD *)(a1 + 48);
          long long v108 = *v23;
          long long v109 = *(_OWORD *)(a1 + 144);
          long long v110 = *(_OWORD *)(a1 + 176);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 160);
          *(_OWORD *)(a1 + 48) = v110;
          *(_OWORD *)a1 = v108;
          *(_OWORD *)(a1 + 16) = v109;
          long long v111 = *(_OWORD *)(a1 + 192);
          long long v112 = *(_OWORD *)(a1 + 208);
          long long v113 = *(_OWORD *)(a1 + 240);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 224);
          *(_OWORD *)(a1 + 112) = v113;
          *(_OWORD *)(a1 + 64) = v111;
          *(_OWORD *)(a1 + 80) = v112;
          *(_OWORD *)(a1 + 160) = v161;
          *(_OWORD *)(a1 + 176) = v175;
          *long long v23 = v133;
          *(_OWORD *)(a1 + 144) = v147;
          *(_OWORD *)(a1 + 224) = v217;
          *(_OWORD *)(a1 + 240) = v231;
          *(_OWORD *)(a1 + 192) = v189;
          *(_OWORD *)(a1 + 208) = v203;
          if (*(_DWORD *)(a2 - 120) >= *(_DWORD *)(a1 + 136)) {
            return result;
          }
          long long v178 = *(_OWORD *)(a1 + 192);
          long long v192 = *(_OWORD *)(a1 + 208);
          long long v206 = *(_OWORD *)(a1 + 224);
          long long v220 = *(_OWORD *)(a1 + 240);
          long long v122 = *v23;
          long long v136 = *(_OWORD *)(a1 + 144);
          long long v150 = *(_OWORD *)(a1 + 160);
          long long v164 = *(_OWORD *)(a1 + 176);
          long long v114 = *(_OWORD *)(a2 - 64);
          long long v115 = *(_OWORD *)(a2 - 48);
          long long v116 = *(_OWORD *)(a2 - 16);
          *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 - 32);
          *(_OWORD *)(a1 + 240) = v116;
          *(_OWORD *)(a1 + 192) = v114;
          *(_OWORD *)(a1 + 208) = v115;
          long long v117 = *v24;
          long long v118 = *(_OWORD *)(a2 - 112);
          long long v119 = *(_OWORD *)(a2 - 80);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 - 96);
          *(_OWORD *)(a1 + 176) = v119;
          *long long v23 = v117;
          *(_OWORD *)(a1 + 144) = v118;
        }
        else
        {
          long long v178 = *(_OWORD *)(a1 + 64);
          long long v192 = *(_OWORD *)(a1 + 80);
          long long v206 = *(_OWORD *)(a1 + 96);
          long long v220 = *(_OWORD *)(a1 + 112);
          long long v122 = *(_OWORD *)a1;
          long long v136 = *(_OWORD *)(a1 + 16);
          long long v150 = *(_OWORD *)(a1 + 32);
          long long v164 = *(_OWORD *)(a1 + 48);
          long long v27 = *(_OWORD *)(a2 - 64);
          long long v28 = *(_OWORD *)(a2 - 48);
          long long v29 = *(_OWORD *)(a2 - 16);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 - 32);
          *(_OWORD *)(a1 + 112) = v29;
          *(_OWORD *)(a1 + 64) = v27;
          *(_OWORD *)(a1 + 80) = v28;
          long long v30 = *v24;
          long long v31 = *(_OWORD *)(a2 - 112);
          long long v32 = *(_OWORD *)(a2 - 80);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 - 96);
          *(_OWORD *)(a1 + 48) = v32;
          *(_OWORD *)a1 = v30;
          *(_OWORD *)(a1 + 16) = v31;
        }
        *(_OWORD *)(a2 - 96) = v150;
        *(_OWORD *)(a2 - 80) = v164;
        *long long v24 = v122;
        *(_OWORD *)(a2 - 112) = v136;
        *(_OWORD *)(a2 - 32) = v206;
        *(_OWORD *)(a2 - 16) = v220;
        *(_OWORD *)(a2 - 64) = v178;
        *(_OWORD *)(a2 - 48) = v192;
      }
      return result;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroupLayout(WGPUBindGroupLayoutDescriptor const&,BOOL)::$_0 &,WGPUBindGroupLayoutEntry *>((long long *)a1, (long long *)(a1 + 128), (long long *)(a1 + 256), (long long *)(a2 - 128));
      return 1;
    case 5:
      long long v33 = (long long *)(a1 + 128);
      long long v34 = (long long *)(a1 + 256);
      long long v35 = (long long *)(a1 + 384);
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroupLayout(WGPUBindGroupLayoutDescriptor const&,BOOL)::$_0 &,WGPUBindGroupLayoutEntry *>((long long *)a1, (long long *)(a1 + 128), (long long *)(a1 + 256), (long long *)(a1 + 384));
      if (*(_DWORD *)(a2 - 120) >= *(_DWORD *)(a1 + 392)) {
        return 1;
      }
      long long v179 = *(_OWORD *)(a1 + 448);
      long long v193 = *(_OWORD *)(a1 + 464);
      long long v207 = *(_OWORD *)(a1 + 480);
      long long v221 = *(_OWORD *)(a1 + 496);
      long long v123 = *v35;
      long long v137 = *(_OWORD *)(a1 + 400);
      long long v151 = *(_OWORD *)(a1 + 416);
      long long v165 = *(_OWORD *)(a1 + 432);
      long long v36 = *(_OWORD *)(a2 - 64);
      long long v37 = *(_OWORD *)(a2 - 48);
      long long v38 = *(_OWORD *)(a2 - 16);
      *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 496) = v38;
      *(_OWORD *)(a1 + 448) = v36;
      *(_OWORD *)(a1 + 464) = v37;
      long long v39 = *(_OWORD *)(a2 - 128);
      long long v40 = *(_OWORD *)(a2 - 112);
      long long v41 = *(_OWORD *)(a2 - 80);
      *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 - 96);
      *(_OWORD *)(a1 + 432) = v41;
      long long *v35 = v39;
      *(_OWORD *)(a1 + 400) = v40;
      *(_OWORD *)(a2 - 96) = v151;
      *(_OWORD *)(a2 - 80) = v165;
      *(_OWORD *)(a2 - 128) = v123;
      *(_OWORD *)(a2 - 112) = v137;
      *(_OWORD *)(a2 - 64) = v179;
      *(_OWORD *)(a2 - 48) = v193;
      *(_OWORD *)(a2 - 32) = v207;
      *(_OWORD *)(a2 - 16) = v221;
      if (*(_DWORD *)(a1 + 392) >= *(_DWORD *)(a1 + 264)) {
        return 1;
      }
      long long v180 = *(_OWORD *)(a1 + 320);
      long long v194 = *(_OWORD *)(a1 + 336);
      long long v208 = *(_OWORD *)(a1 + 352);
      long long v222 = *(_OWORD *)(a1 + 368);
      long long v124 = *v34;
      long long v138 = *(_OWORD *)(a1 + 272);
      long long v152 = *(_OWORD *)(a1 + 288);
      long long v166 = *(_OWORD *)(a1 + 304);
      long long v42 = *v35;
      long long v43 = *(_OWORD *)(a1 + 400);
      long long v44 = *(_OWORD *)(a1 + 432);
      *(_OWORD *)(a1 + 288) = *(_OWORD *)(a1 + 416);
      *(_OWORD *)(a1 + 304) = v44;
      *long long v34 = v42;
      *(_OWORD *)(a1 + 272) = v43;
      long long v45 = *(_OWORD *)(a1 + 448);
      long long v46 = *(_OWORD *)(a1 + 464);
      long long v47 = *(_OWORD *)(a1 + 496);
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 480);
      *(_OWORD *)(a1 + 368) = v47;
      *(_OWORD *)(a1 + 320) = v45;
      *(_OWORD *)(a1 + 336) = v46;
      *(_OWORD *)(a1 + 416) = v152;
      *(_OWORD *)(a1 + 432) = v166;
      long long *v35 = v124;
      *(_OWORD *)(a1 + 400) = v138;
      *(_OWORD *)(a1 + 480) = v208;
      *(_OWORD *)(a1 + 496) = v222;
      *(_OWORD *)(a1 + 448) = v180;
      *(_OWORD *)(a1 + 464) = v194;
      if (*(_DWORD *)(a1 + 264) >= *(_DWORD *)(a1 + 136)) {
        return 1;
      }
      long long v181 = *(_OWORD *)(a1 + 192);
      long long v195 = *(_OWORD *)(a1 + 208);
      long long v209 = *(_OWORD *)(a1 + 224);
      long long v223 = *(_OWORD *)(a1 + 240);
      long long v125 = *v33;
      long long v139 = *(_OWORD *)(a1 + 144);
      long long v153 = *(_OWORD *)(a1 + 160);
      long long v167 = *(_OWORD *)(a1 + 176);
      long long v48 = *v34;
      long long v49 = *(_OWORD *)(a1 + 272);
      long long v50 = *(_OWORD *)(a1 + 304);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 176) = v50;
      *long long v33 = v48;
      *(_OWORD *)(a1 + 144) = v49;
      long long v51 = *(_OWORD *)(a1 + 320);
      long long v52 = *(_OWORD *)(a1 + 336);
      long long v53 = *(_OWORD *)(a1 + 368);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 240) = v53;
      *(_OWORD *)(a1 + 192) = v51;
      *(_OWORD *)(a1 + 208) = v52;
      *(_OWORD *)(a1 + 288) = v153;
      *(_OWORD *)(a1 + 304) = v167;
      *long long v34 = v125;
      *(_OWORD *)(a1 + 272) = v139;
      *(_OWORD *)(a1 + 352) = v209;
      *(_OWORD *)(a1 + 368) = v223;
      *(_OWORD *)(a1 + 320) = v181;
      *(_OWORD *)(a1 + 336) = v195;
      if (*(_DWORD *)(a1 + 136) >= *(_DWORD *)(a1 + 8)) {
        return 1;
      }
      long long v182 = *(_OWORD *)(a1 + 64);
      long long v196 = *(_OWORD *)(a1 + 80);
      long long v210 = *(_OWORD *)(a1 + 96);
      long long v224 = *(_OWORD *)(a1 + 112);
      long long v126 = *(_OWORD *)a1;
      long long v140 = *(_OWORD *)(a1 + 16);
      long long v154 = *(_OWORD *)(a1 + 32);
      long long v168 = *(_OWORD *)(a1 + 48);
      long long v54 = *v33;
      long long v55 = *(_OWORD *)(a1 + 144);
      long long v56 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(a1 + 48) = v56;
      *(_OWORD *)a1 = v54;
      *(_OWORD *)(a1 + 16) = v55;
      long long v57 = *(_OWORD *)(a1 + 192);
      long long v58 = *(_OWORD *)(a1 + 208);
      long long v59 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 224);
      *(_OWORD *)(a1 + 112) = v59;
      *(_OWORD *)(a1 + 64) = v57;
      *(_OWORD *)(a1 + 80) = v58;
      *(_OWORD *)(a1 + 160) = v154;
      *(_OWORD *)(a1 + 176) = v168;
      *long long v33 = v126;
      *(_OWORD *)(a1 + 144) = v140;
      *(_OWORD *)(a1 + 224) = v210;
      *(_OWORD *)(a1 + 240) = v224;
      BOOL result = 1;
      *(_OWORD *)(a1 + 192) = v182;
      *(_OWORD *)(a1 + 208) = v196;
      return result;
    default:
      uint64_t v12 = a1 + 256;
      int v13 = (long long *)(a1 + 128);
      unsigned int v14 = *(_DWORD *)(a1 + 136);
      unsigned int v15 = *(_DWORD *)(a1 + 8);
      unsigned int v16 = *(_DWORD *)(a1 + 264);
      if (v14 >= v15)
      {
        if (v16 < v14)
        {
          long long v183 = *(_OWORD *)(a1 + 192);
          long long v197 = *(_OWORD *)(a1 + 208);
          long long v211 = *(_OWORD *)(a1 + 224);
          long long v225 = *(_OWORD *)(a1 + 240);
          long long v127 = *v13;
          long long v141 = *(_OWORD *)(a1 + 144);
          long long v155 = *(_OWORD *)(a1 + 160);
          long long v169 = *(_OWORD *)(a1 + 176);
          long long v60 = *(_OWORD *)v12;
          long long v61 = *(_OWORD *)(a1 + 272);
          long long v62 = *(_OWORD *)(a1 + 304);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 288);
          *(_OWORD *)(a1 + 176) = v62;
          *int v13 = v60;
          *(_OWORD *)(a1 + 144) = v61;
          long long v63 = *(_OWORD *)(a1 + 320);
          long long v64 = *(_OWORD *)(a1 + 336);
          long long v65 = *(_OWORD *)(a1 + 368);
          *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 352);
          *(_OWORD *)(a1 + 240) = v65;
          *(_OWORD *)(a1 + 192) = v63;
          *(_OWORD *)(a1 + 208) = v64;
          *(_OWORD *)(a1 + 288) = v155;
          *(_OWORD *)(a1 + 304) = v169;
          *(_OWORD *)uint64_t v12 = v127;
          *(_OWORD *)(a1 + 272) = v141;
          *(_OWORD *)(a1 + 352) = v211;
          *(_OWORD *)(a1 + 368) = v225;
          *(_OWORD *)(a1 + 320) = v183;
          *(_OWORD *)(a1 + 336) = v197;
          if (*(_DWORD *)(a1 + 136) < v15)
          {
            long long v184 = *(_OWORD *)(a1 + 64);
            long long v198 = *(_OWORD *)(a1 + 80);
            long long v212 = *(_OWORD *)(a1 + 96);
            long long v226 = *(_OWORD *)(a1 + 112);
            long long v128 = *(_OWORD *)a1;
            long long v142 = *(_OWORD *)(a1 + 16);
            long long v156 = *(_OWORD *)(a1 + 32);
            long long v170 = *(_OWORD *)(a1 + 48);
            long long v66 = *v13;
            long long v67 = *(_OWORD *)(a1 + 144);
            long long v68 = *(_OWORD *)(a1 + 176);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 160);
            *(_OWORD *)(a1 + 48) = v68;
            *(_OWORD *)a1 = v66;
            *(_OWORD *)(a1 + 16) = v67;
            long long v69 = *(_OWORD *)(a1 + 192);
            long long v70 = *(_OWORD *)(a1 + 208);
            long long v71 = *(_OWORD *)(a1 + 240);
            *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 224);
            *(_OWORD *)(a1 + 112) = v71;
            *(_OWORD *)(a1 + 64) = v69;
            *(_OWORD *)(a1 + 80) = v70;
            *(_OWORD *)(a1 + 160) = v156;
            *(_OWORD *)(a1 + 176) = v170;
            *int v13 = v128;
            *(_OWORD *)(a1 + 144) = v142;
            *(_OWORD *)(a1 + 224) = v212;
            *(_OWORD *)(a1 + 240) = v226;
            *(_OWORD *)(a1 + 192) = v184;
            *(_OWORD *)(a1 + 208) = v198;
          }
        }
      }
      else
      {
        if (v16 >= v14)
        {
          long long v187 = *(_OWORD *)(a1 + 64);
          long long v201 = *(_OWORD *)(a1 + 80);
          long long v215 = *(_OWORD *)(a1 + 96);
          long long v229 = *(_OWORD *)(a1 + 112);
          long long v131 = *(_OWORD *)a1;
          long long v145 = *(_OWORD *)(a1 + 16);
          long long v159 = *(_OWORD *)(a1 + 32);
          long long v173 = *(_OWORD *)(a1 + 48);
          long long v84 = *v13;
          long long v85 = *(_OWORD *)(a1 + 144);
          long long v86 = *(_OWORD *)(a1 + 176);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 160);
          *(_OWORD *)(a1 + 48) = v86;
          *(_OWORD *)a1 = v84;
          *(_OWORD *)(a1 + 16) = v85;
          long long v87 = *(_OWORD *)(a1 + 192);
          long long v88 = *(_OWORD *)(a1 + 208);
          long long v89 = *(_OWORD *)(a1 + 240);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 224);
          *(_OWORD *)(a1 + 112) = v89;
          *(_OWORD *)(a1 + 64) = v87;
          *(_OWORD *)(a1 + 80) = v88;
          *(_OWORD *)(a1 + 160) = v159;
          *(_OWORD *)(a1 + 176) = v173;
          *int v13 = v131;
          *(_OWORD *)(a1 + 144) = v145;
          *(_OWORD *)(a1 + 224) = v215;
          *(_OWORD *)(a1 + 240) = v229;
          *(_OWORD *)(a1 + 192) = v187;
          *(_OWORD *)(a1 + 208) = v201;
          if (v16 >= *(_DWORD *)(a1 + 136)) {
            goto LABEL_25;
          }
          long long v177 = *(_OWORD *)(a1 + 192);
          long long v191 = *(_OWORD *)(a1 + 208);
          long long v205 = *(_OWORD *)(a1 + 224);
          long long v219 = *(_OWORD *)(a1 + 240);
          long long v121 = *v13;
          long long v135 = *(_OWORD *)(a1 + 144);
          long long v149 = *(_OWORD *)(a1 + 160);
          long long v163 = *(_OWORD *)(a1 + 176);
          long long v90 = *(_OWORD *)v12;
          long long v91 = *(_OWORD *)(a1 + 272);
          long long v92 = *(_OWORD *)(a1 + 304);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 288);
          *(_OWORD *)(a1 + 176) = v92;
          *int v13 = v90;
          *(_OWORD *)(a1 + 144) = v91;
          long long v93 = *(_OWORD *)(a1 + 320);
          long long v94 = *(_OWORD *)(a1 + 336);
          long long v95 = *(_OWORD *)(a1 + 368);
          *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 352);
          *(_OWORD *)(a1 + 240) = v95;
          *(_OWORD *)(a1 + 192) = v93;
          *(_OWORD *)(a1 + 208) = v94;
        }
        else
        {
          long long v177 = *(_OWORD *)(a1 + 64);
          long long v191 = *(_OWORD *)(a1 + 80);
          long long v205 = *(_OWORD *)(a1 + 96);
          long long v219 = *(_OWORD *)(a1 + 112);
          long long v121 = *(_OWORD *)a1;
          long long v135 = *(_OWORD *)(a1 + 16);
          long long v149 = *(_OWORD *)(a1 + 32);
          long long v163 = *(_OWORD *)(a1 + 48);
          long long v17 = *(_OWORD *)v12;
          long long v18 = *(_OWORD *)(a1 + 272);
          long long v19 = *(_OWORD *)(a1 + 304);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 288);
          *(_OWORD *)(a1 + 48) = v19;
          *(_OWORD *)a1 = v17;
          *(_OWORD *)(a1 + 16) = v18;
          long long v20 = *(_OWORD *)(a1 + 320);
          long long v21 = *(_OWORD *)(a1 + 336);
          long long v22 = *(_OWORD *)(a1 + 368);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 352);
          *(_OWORD *)(a1 + 112) = v22;
          *(_OWORD *)(a1 + 64) = v20;
          *(_OWORD *)(a1 + 80) = v21;
        }
        *(_OWORD *)(a1 + 288) = v149;
        *(_OWORD *)(a1 + 304) = v163;
        *(_OWORD *)uint64_t v12 = v121;
        *(_OWORD *)(a1 + 272) = v135;
        *(_OWORD *)(a1 + 352) = v205;
        *(_OWORD *)(a1 + 368) = v219;
        *(_OWORD *)(a1 + 320) = v177;
        *(_OWORD *)(a1 + 336) = v191;
      }
LABEL_25:
      uint64_t v96 = a1 + 384;
      if (a1 + 384 == a2) {
        return 1;
      }
      uint64_t v97 = 0;
      int v98 = 0;
      break;
  }
  while (1)
  {
    unsigned int v100 = *(_DWORD *)(v96 + 8);
    if (v100 < *(_DWORD *)(v12 + 8))
    {
      uint64_t v101 = *(void *)v96;
      long long v188 = *(_OWORD *)(v96 + 76);
      long long v202 = *(_OWORD *)(v96 + 92);
      long long v216 = *(_OWORD *)(v96 + 108);
      int v230 = *(_DWORD *)(v96 + 124);
      long long v132 = *(_OWORD *)(v96 + 12);
      long long v146 = *(_OWORD *)(v96 + 28);
      uint64_t v102 = v97;
      long long v160 = *(_OWORD *)(v96 + 44);
      long long v174 = *(_OWORD *)(v96 + 60);
      do
      {
        uint64_t v103 = a1 + v102;
        long long v104 = *(_OWORD *)(a1 + v102 + 336);
        *(_OWORD *)(v103 + 448) = *(_OWORD *)(a1 + v102 + 320);
        *(_OWORD *)(v103 + 464) = v104;
        long long v105 = *(_OWORD *)(a1 + v102 + 368);
        *(_OWORD *)(v103 + 480) = *(_OWORD *)(a1 + v102 + 352);
        *(_OWORD *)(v103 + 496) = v105;
        long long v106 = *(_OWORD *)(a1 + v102 + 272);
        *(_OWORD *)(v103 + 384) = *(_OWORD *)(a1 + v102 + 256);
        *(_OWORD *)(v103 + 400) = v106;
        long long v107 = *(_OWORD *)(a1 + v102 + 304);
        *(_OWORD *)(v103 + 416) = *(_OWORD *)(a1 + v102 + 288);
        *(_OWORD *)(v103 + 432) = v107;
        if (v102 == -256)
        {
          uint64_t v99 = a1;
          goto LABEL_28;
        }
        v102 -= 128;
      }
      while (v100 < *(_DWORD *)(v103 + 136));
      uint64_t v99 = a1 + v102 + 384;
LABEL_28:
      *(_OWORD *)(v99 + 76) = v188;
      *(_OWORD *)(v99 + 92) = v202;
      *(_OWORD *)(v99 + 108) = v216;
      *(_OWORD *)(v99 + 12) = v132;
      *(_OWORD *)(v99 + 28) = v146;
      *(_OWORD *)(v99 + 44) = v160;
      *(void *)uint64_t v99 = v101;
      *(_DWORD *)(v99 + 8) = v100;
      *(_DWORD *)(v99 + 124) = v230;
      ++v98;
      *(_OWORD *)(v99 + 60) = v174;
      if (v98 == 8) {
        return v96 + 128 == a2;
      }
    }
    uint64_t v12 = v96;
    v97 += 128;
    v96 += 128;
    if (v96 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::Device::createBindGroupLayout(WGPUBindGroupLayoutDescriptor const&,BOOL)::$_0 &,WGPUBindGroupLayoutEntry *>(long long *a1, long long *a2, long long *a3, long long *a4)
{
  unsigned int v4 = *((_DWORD *)a2 + 2);
  unsigned int v5 = *((_DWORD *)a3 + 2);
  if (v4 >= *((_DWORD *)a1 + 2))
  {
    if (v5 < v4)
    {
      long long v84 = a2[4];
      __n128 v91 = (__n128)a2[5];
      long long v98 = a2[6];
      long long v105 = a2[7];
      long long v56 = *a2;
      long long v63 = a2[1];
      long long v70 = a2[2];
      long long v77 = a2[3];
      long long v12 = a3[4];
      long long v13 = a3[5];
      long long v14 = a3[7];
      a2[6] = a3[6];
      a2[7] = v14;
      a2[4] = v12;
      a2[5] = v13;
      long long v15 = *a3;
      long long v16 = a3[1];
      long long v17 = a3[3];
      a2[2] = a3[2];
      a2[3] = v17;
      *a2 = v15;
      a2[1] = v16;
      a3[2] = v70;
      a3[3] = v77;
      *a3 = v56;
      a3[1] = v63;
      a3[6] = v98;
      a3[7] = v105;
      __n128 result = v91;
      a3[4] = v84;
      a3[5] = (__int128)v91;
      if (*((_DWORD *)a2 + 2) < *((_DWORD *)a1 + 2))
      {
        long long v85 = a1[4];
        __n128 v92 = (__n128)a1[5];
        long long v99 = a1[6];
        long long v106 = a1[7];
        long long v57 = *a1;
        long long v64 = a1[1];
        long long v71 = a1[2];
        long long v78 = a1[3];
        long long v19 = a2[4];
        long long v20 = a2[5];
        long long v21 = a2[7];
        a1[6] = a2[6];
        a1[7] = v21;
        a1[4] = v19;
        a1[5] = v20;
        long long v22 = *a2;
        long long v23 = a2[1];
        long long v24 = a2[3];
        a1[2] = a2[2];
        a1[3] = v24;
        *a1 = v22;
        a1[1] = v23;
        a2[2] = v71;
        a2[3] = v78;
        *a2 = v57;
        a2[1] = v64;
        a2[6] = v99;
        a2[7] = v106;
        __n128 result = v92;
        a2[4] = v85;
        a2[5] = (__int128)v92;
      }
    }
  }
  else
  {
    if (v5 < v4)
    {
      long long v83 = a1[4];
      __n128 v90 = (__n128)a1[5];
      long long v97 = a1[6];
      long long v104 = a1[7];
      long long v55 = *a1;
      long long v62 = a1[1];
      long long v69 = a1[2];
      long long v76 = a1[3];
      long long v6 = a3[4];
      long long v7 = a3[5];
      long long v8 = a3[7];
      a1[6] = a3[6];
      a1[7] = v8;
      a1[4] = v6;
      a1[5] = v7;
      long long v9 = *a3;
      long long v10 = a3[1];
      long long v11 = a3[3];
      a1[2] = a3[2];
      a1[3] = v11;
      *a1 = v9;
      a1[1] = v10;
LABEL_9:
      a3[2] = v69;
      a3[3] = v76;
      *a3 = v55;
      a3[1] = v62;
      a3[6] = v97;
      a3[7] = v104;
      __n128 result = v90;
      a3[4] = v83;
      a3[5] = (__int128)v90;
      goto LABEL_10;
    }
    long long v86 = a1[4];
    __n128 v93 = (__n128)a1[5];
    long long v100 = a1[6];
    long long v107 = a1[7];
    long long v58 = *a1;
    long long v65 = a1[1];
    long long v72 = a1[2];
    long long v79 = a1[3];
    long long v25 = a2[4];
    long long v26 = a2[5];
    long long v27 = a2[7];
    a1[6] = a2[6];
    a1[7] = v27;
    a1[4] = v25;
    a1[5] = v26;
    long long v28 = *a2;
    long long v29 = a2[1];
    long long v30 = a2[3];
    a1[2] = a2[2];
    a1[3] = v30;
    *a1 = v28;
    a1[1] = v29;
    a2[2] = v72;
    a2[3] = v79;
    *a2 = v58;
    a2[1] = v65;
    a2[6] = v100;
    a2[7] = v107;
    __n128 result = v93;
    a2[4] = v86;
    a2[5] = (__int128)v93;
    if (*((_DWORD *)a3 + 2) < *((_DWORD *)a2 + 2))
    {
      long long v83 = a2[4];
      __n128 v90 = (__n128)a2[5];
      long long v97 = a2[6];
      long long v104 = a2[7];
      long long v55 = *a2;
      long long v62 = a2[1];
      long long v69 = a2[2];
      long long v76 = a2[3];
      long long v31 = a3[4];
      long long v32 = a3[5];
      long long v33 = a3[7];
      a2[6] = a3[6];
      a2[7] = v33;
      a2[4] = v31;
      a2[5] = v32;
      long long v34 = *a3;
      long long v35 = a3[1];
      long long v36 = a3[3];
      a2[2] = a3[2];
      a2[3] = v36;
      *a2 = v34;
      a2[1] = v35;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*((_DWORD *)a4 + 2) < *((_DWORD *)a3 + 2))
  {
    long long v87 = a3[4];
    __n128 v94 = (__n128)a3[5];
    long long v101 = a3[6];
    long long v108 = a3[7];
    long long v59 = *a3;
    long long v66 = a3[1];
    long long v73 = a3[2];
    long long v80 = a3[3];
    long long v37 = a4[4];
    long long v38 = a4[5];
    long long v39 = a4[7];
    a3[6] = a4[6];
    a3[7] = v39;
    a3[4] = v37;
    a3[5] = v38;
    long long v40 = *a4;
    long long v41 = a4[1];
    long long v42 = a4[3];
    a3[2] = a4[2];
    a3[3] = v42;
    *a3 = v40;
    a3[1] = v41;
    a4[2] = v73;
    a4[3] = v80;
    *a4 = v59;
    a4[1] = v66;
    a4[6] = v101;
    a4[7] = v108;
    __n128 result = v94;
    a4[4] = v87;
    a4[5] = (__int128)v94;
    if (*((_DWORD *)a3 + 2) < *((_DWORD *)a2 + 2))
    {
      long long v88 = a2[4];
      __n128 v95 = (__n128)a2[5];
      long long v102 = a2[6];
      long long v109 = a2[7];
      long long v60 = *a2;
      long long v67 = a2[1];
      long long v74 = a2[2];
      long long v81 = a2[3];
      long long v43 = a3[4];
      long long v44 = a3[5];
      long long v45 = a3[7];
      a2[6] = a3[6];
      a2[7] = v45;
      a2[4] = v43;
      a2[5] = v44;
      long long v46 = *a3;
      long long v47 = a3[1];
      long long v48 = a3[3];
      a2[2] = a3[2];
      a2[3] = v48;
      *a2 = v46;
      a2[1] = v47;
      a3[2] = v74;
      a3[3] = v81;
      *a3 = v60;
      a3[1] = v67;
      a3[6] = v102;
      a3[7] = v109;
      __n128 result = v95;
      a3[4] = v88;
      a3[5] = (__int128)v95;
      if (*((_DWORD *)a2 + 2) < *((_DWORD *)a1 + 2))
      {
        long long v89 = a1[4];
        __n128 v96 = (__n128)a1[5];
        long long v103 = a1[6];
        long long v110 = a1[7];
        long long v61 = *a1;
        long long v68 = a1[1];
        long long v75 = a1[2];
        long long v82 = a1[3];
        long long v49 = a2[4];
        long long v50 = a2[5];
        long long v51 = a2[7];
        a1[6] = a2[6];
        a1[7] = v51;
        a1[4] = v49;
        a1[5] = v50;
        long long v52 = *a2;
        long long v53 = a2[1];
        long long v54 = a2[3];
        a1[2] = a2[2];
        a1[3] = v54;
        *a1 = v52;
        a1[1] = v53;
        a2[2] = v75;
        a2[3] = v82;
        *a2 = v61;
        a2[1] = v68;
        a2[6] = v103;
        a2[7] = v110;
        __n128 result = v96;
        a2[4] = v89;
        a2[5] = (__int128)v96;
      }
    }
  }
  return result;
}

unsigned int **std::__introsort<std::_ClassicAlgPolicy,WebGPU::BindGroupLayout::BindGroupLayout(WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits> &&,objc_object  {objcproto18MTLArgumentEncoder}*,objc_object,objc_object,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &&,unsigned long,unsigned long,unsigned long,BOOL,WTF::EnumeratedArray<WebGPU::ShaderStage,unsigned int,(WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &)2> &&,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,unsigned int,unsigned int,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits><WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &,WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WebGPU::BindGroupLayout::Entry,WTF::HashTableTraits>,(WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &)2> &&,WebGPU::Device const&)::$_0 &,objc_object  {objcproto18MTLArgumentEncoder} const**,false>(unsigned int **result, unsigned int **a2, uint64_t a3, char a4)
{
  long long v9 = result;
LABEL_2:
  long long v10 = v9;
  while (1)
  {
    long long v9 = v10;
    uint64_t v11 = (char *)a2 - (char *)v10;
    uint64_t v12 = a2 - v10;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return result;
        case 2:
          long long v81 = *(a2 - 1);
          long long v82 = *v10;
          if (*v81 < **v10)
          {
            *long long v10 = v81;
            *(a2 - 1) = v82;
          }
          return result;
        case 3:
          long long v83 = *v10;
          long long v84 = v10[1];
          unsigned int v85 = *v84;
          unsigned int v86 = **v10;
          long long v87 = *(a2 - 1);
          unsigned int v88 = *v87;
          if (*v84 >= v86)
          {
            if (v88 < v85)
            {
              v10[1] = v87;
              *(a2 - 1) = v84;
              long long v138 = *v10;
              long long v137 = v10[1];
              if (*v137 < **v10)
              {
                *long long v10 = v137;
                v10[1] = v138;
              }
            }
          }
          else
          {
            if (v88 >= v85)
            {
              *long long v10 = v84;
              v10[1] = v83;
              long long v149 = *(a2 - 1);
              if (*v149 >= v86) {
                return result;
              }
              v10[1] = v149;
            }
            else
            {
              *long long v10 = v87;
            }
            *(a2 - 1) = v83;
          }
          return result;
        case 4:
          long long v27 = (unsigned int *)(v10 + 1);
          long long v89 = (unsigned int **)v10[1];
          int64_t v22 = (int64_t)(v10 + 2);
          long long v15 = v10[2];
          __n128 v90 = *v10;
          unsigned int v91 = *(_DWORD *)v89;
          unsigned int v92 = **v10;
          unsigned int v93 = *v15;
          if (*(_DWORD *)v89 >= v92)
          {
            if (v93 >= v91) {
              goto LABEL_202;
            }
            *(void *)long long v27 = v15;
            *(void *)int64_t v22 = v89;
            __n128 v94 = v10;
            __n128 v95 = v10 + 1;
            __n128 result = v89;
            if (v93 >= v92)
            {
LABEL_191:
              long long v139 = *(a2 - 1);
              if (*v139 >= *(_DWORD *)v89) {
                return result;
              }
              goto LABEL_203;
            }
          }
          else
          {
            __n128 v94 = v10;
            __n128 v95 = v10 + 2;
            __n128 result = (unsigned int **)*v10;
            if (v93 >= v91)
            {
              *long long v10 = (unsigned int *)v89;
              v10[1] = v90;
              __n128 v94 = v10 + 1;
              __n128 v95 = v10 + 2;
              __n128 result = (unsigned int **)v90;
              if (v93 >= v92) {
                goto LABEL_202;
              }
            }
          }
          *__n128 v94 = v15;
          *__n128 v95 = v90;
          long long v89 = result;
          goto LABEL_191;
        case 5:
          return std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::BindGroupLayout::BindGroupLayout(WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits> &&,objc_object  {objcproto18MTLArgumentEncoder}*,objc_object,objc_object,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &&,unsigned long,unsigned long,unsigned long,BOOL,WTF::EnumeratedArray<WebGPU::ShaderStage,unsigned int,(WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &)2> &&,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,unsigned int,unsigned int,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits><WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &,WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WebGPU::BindGroupLayout::Entry,WTF::HashTableTraits>,(WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &)2> &&,WebGPU::Device const&)::$_0 &,objc_object  {objcproto18MTLArgumentEncoder} const**,0>(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if (v11 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v10 != a2)
      {
        int64_t v106 = (unint64_t)(v12 - 2) >> 1;
        int64_t v107 = v106;
        do
        {
          if (v106 >= v107)
          {
            uint64_t v109 = (2 * v107) | 1;
            long long v110 = &v10[v109];
            long long v111 = *v110;
            if (2 * v107 + 2 >= v12)
            {
              __n128 result = &v10[v107];
              long long v114 = *result;
              unsigned int v115 = **result;
              if (*v111 >= v115) {
                goto LABEL_167;
              }
            }
            else
            {
              unsigned int v112 = *v111;
              unsigned int v113 = *v110[1];
              if (*v111 <= v113) {
                unsigned int v112 = *v110[1];
              }
              if (*v111 < v113)
              {
                long long v111 = v110[1];
                ++v110;
                uint64_t v109 = 2 * v107 + 2;
              }
              __n128 result = &v10[v107];
              long long v114 = *result;
              unsigned int v115 = **result;
              if (v112 >= v115)
              {
LABEL_167:
                while (1)
                {
                  long long v118 = v110;
                  *__n128 result = v111;
                  if (v106 < v109) {
                    break;
                  }
                  uint64_t v119 = (2 * v109) | 1;
                  long long v110 = &v10[v119];
                  uint64_t v109 = 2 * v109 + 2;
                  long long v111 = *v110;
                  if (v109 < v12)
                  {
                    unsigned int v116 = *v111;
                    unsigned int v117 = *v110[1];
                    if (*v111 <= v117) {
                      unsigned int v116 = *v110[1];
                    }
                    if (*v111 >= v117)
                    {
                      uint64_t v109 = v119;
                    }
                    else
                    {
                      long long v111 = v110[1];
                      ++v110;
                    }
                    __n128 result = v118;
                    if (v116 < v115) {
                      break;
                    }
                  }
                  else
                  {
                    uint64_t v109 = v119;
                    __n128 result = v118;
                    if (*v111 < v115) {
                      break;
                    }
                  }
                }
                *long long v118 = v114;
              }
            }
          }
          BOOL v108 = v107-- <= 0;
        }
        while (!v108);
        uint64_t v120 = (unint64_t)v11 >> 3;
        do
        {
          uint64_t v121 = 0;
          long long v122 = *v10;
          long long v123 = v10;
          do
          {
            long long v124 = &v123[v121];
            long long v127 = v124[1];
            long long v125 = v124 + 1;
            long long v126 = v127;
            uint64_t v128 = (2 * v121) | 1;
            uint64_t v129 = 2 * v121 + 2;
            if (v129 < v120)
            {
              __n128 result = (unsigned int **)*v126;
              if (result < *v125[1])
              {
                long long v126 = v125[1];
                ++v125;
                uint64_t v128 = v129;
              }
            }
            *long long v123 = v126;
            long long v123 = v125;
            uint64_t v121 = v128;
          }
          while (v128 <= (uint64_t)((unint64_t)(v120 - 2) >> 1));
          if (v125 == --a2)
          {
            *long long v125 = v122;
          }
          else
          {
            *long long v125 = *a2;
            *a2 = v122;
            uint64_t v130 = (char *)v125 - (char *)v10 + 8;
            if (v130 >= 9)
            {
              unint64_t v131 = (((unint64_t)v130 >> 3) - 2) >> 1;
              long long v132 = &v10[v131];
              long long v133 = *v132;
              long long v134 = *v125;
              unsigned int v135 = **v125;
              if (**v132 < v135)
              {
                do
                {
                  long long v136 = v132;
                  *long long v125 = v133;
                  if (!v131) {
                    break;
                  }
                  unint64_t v131 = (v131 - 1) >> 1;
                  long long v132 = &v10[v131];
                  long long v133 = *v132;
                  long long v125 = v136;
                }
                while (**v132 < v135);
                *long long v136 = v134;
              }
            }
          }
          BOOL v108 = v120-- <= 2;
        }
        while (!v108);
      }
      return result;
    }
    unint64_t v13 = (unint64_t)v12 >> 1;
    long long v14 = &v10[(unint64_t)v12 >> 1];
    long long v15 = *(a2 - 1);
    unsigned int v16 = *v15;
    if ((unint64_t)v11 < 0x401)
    {
      long long v21 = *v10;
      int64_t v22 = (int64_t)*v14;
      unsigned int v23 = **v10;
      unsigned int v24 = **v14;
      if (v23 >= v24)
      {
        if (v16 < v23)
        {
          *long long v10 = v15;
          *(a2 - 1) = v21;
          int64_t v22 = (int64_t)*v10;
          long long v26 = *v14;
          long long v15 = (unsigned int *)**v10;
          if (v15 < **v14)
          {
            *long long v14 = (unsigned int *)v22;
            *long long v10 = v26;
            --a3;
            long long v27 = v26;
            if ((a4 & 1) == 0) {
              goto LABEL_56;
            }
            goto LABEL_57;
          }
        }
      }
      else
      {
        if (v16 < v23)
        {
          *long long v14 = v15;
          goto LABEL_32;
        }
        *long long v14 = v21;
        *long long v10 = (unsigned int *)v22;
        long long v39 = *(a2 - 1);
        if (*v39 < v24)
        {
          *long long v10 = v39;
LABEL_32:
          *(a2 - 1) = (unsigned int *)v22;
        }
      }
      --a3;
      long long v27 = *v10;
      if ((a4 & 1) == 0) {
        goto LABEL_56;
      }
      goto LABEL_57;
    }
    long long v17 = *v14;
    long long v18 = *v10;
    unsigned int v19 = **v14;
    unsigned int v20 = **v10;
    if (v19 >= v20)
    {
      if (v16 < v19)
      {
        *long long v14 = v15;
        *(a2 - 1) = v17;
        long long v25 = *v10;
        if (**v14 < **v10)
        {
          *long long v10 = *v14;
          *long long v14 = v25;
        }
      }
    }
    else
    {
      if (v16 >= v19)
      {
        *long long v10 = v17;
        *long long v14 = v18;
        long long v28 = *(a2 - 1);
        if (*v28 >= v20) {
          goto LABEL_24;
        }
        *long long v14 = v28;
      }
      else
      {
        *long long v10 = v15;
      }
      *(a2 - 1) = v18;
    }
LABEL_24:
    long long v29 = &v10[v13];
    long long v32 = *(v29 - 1);
    long long v30 = v29 - 1;
    long long v31 = v32;
    long long v33 = v10[1];
    unsigned int v34 = *v32;
    unsigned int v35 = *v33;
    long long v36 = *(a2 - 2);
    unsigned int v37 = *v36;
    if (*v32 >= *v33)
    {
      if (v37 < v34)
      {
        *long long v30 = v36;
        *(a2 - 2) = v31;
        long long v38 = v10[1];
        if (**v30 < *v38)
        {
          v10[1] = *v30;
          *long long v30 = v38;
        }
      }
    }
    else
    {
      if (v37 >= v34)
      {
        v10[1] = v31;
        *long long v30 = v33;
        long long v40 = *(a2 - 2);
        if (*v40 >= v35) {
          goto LABEL_38;
        }
        *long long v30 = v40;
      }
      else
      {
        v10[1] = v36;
      }
      *(a2 - 2) = v33;
    }
LABEL_38:
    long long v41 = &v10[v13];
    long long v44 = v41[1];
    long long v42 = v41 + 1;
    long long v43 = v44;
    long long v45 = v10[2];
    unsigned int v46 = *v44;
    unsigned int v47 = *v45;
    long long v48 = *(a2 - 3);
    unsigned int v49 = *v48;
    if (*v44 >= *v45)
    {
      if (v49 < v46)
      {
        *long long v42 = v48;
        *(a2 - 3) = v43;
        long long v50 = v10[2];
        if (**v42 < *v50)
        {
          v10[2] = *v42;
          *long long v42 = v50;
        }
      }
      goto LABEL_47;
    }
    if (v49 < v46)
    {
      v10[2] = v48;
LABEL_46:
      *(a2 - 3) = v45;
      goto LABEL_47;
    }
    v10[2] = v43;
    *long long v42 = v45;
    long long v51 = *(a2 - 3);
    if (*v51 < v47)
    {
      *long long v42 = v51;
      goto LABEL_46;
    }
LABEL_47:
    long long v15 = *v14;
    long long v52 = *v30;
    unsigned int v53 = **v14;
    unsigned int v54 = **v30;
    long long v55 = *v42;
    unsigned int v56 = **v42;
    if (v53 < v54)
    {
      if (v56 >= v53)
      {
        *long long v30 = v15;
        *long long v14 = v52;
        long long v30 = v14;
        long long v15 = v55;
        if (v56 >= v54)
        {
          long long v15 = v52;
          int64_t v22 = (int64_t)*v10;
          *long long v10 = v52;
          *long long v14 = (unsigned int *)v22;
          --a3;
          long long v27 = *v10;
          if (a4) {
            goto LABEL_57;
          }
          goto LABEL_56;
        }
      }
      goto LABEL_54;
    }
    if (v56 >= v53) {
      goto LABEL_55;
    }
    *long long v14 = v55;
    *long long v42 = v15;
    long long v42 = v14;
    long long v15 = v52;
    if (v56 >= v54)
    {
      long long v15 = v55;
      int64_t v22 = (int64_t)*v10;
      *long long v10 = v55;
      *long long v14 = (unsigned int *)v22;
      --a3;
      long long v27 = *v10;
      if ((a4 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      long long v57 = v10 + 1;
      if (v10 + 1 == a2) {
        goto LABEL_201;
      }
      long long v15 = *v57;
      int64_t v22 = *v27;
      if (**v57 >= v22) {
        goto LABEL_76;
      }
      uint64_t v58 = 0;
      do
      {
        long long v59 = &v10[v58 + 2];
        if (v59 == a2) {
          goto LABEL_201;
        }
        long long v15 = *v59;
        ++v58;
      }
      while (**v59 < v22);
      long long v60 = &v10[v58];
      long long v57 = &v10[v58 + 1];
      long long v61 = a2;
      if (!(v58 * 8))
      {
LABEL_76:
        long long v61 = a2;
        do
        {
          if (v57 >= v61)
          {
            long long v60 = v10;
            goto LABEL_82;
          }
          long long v69 = *--v61;
        }
        while (*v69 >= v22);
        long long v60 = v10;
        if (v57 < v61) {
          goto LABEL_66;
        }
LABEL_82:
        if (v60 == v10) {
          goto LABEL_84;
        }
LABEL_83:
        *long long v10 = *v60;
        goto LABEL_84;
      }
      do
      {
        if (v61 == v10) {
          goto LABEL_201;
        }
        long long v62 = *--v61;
      }
      while (*v62 >= v22);
      if (v57 >= v61) {
        goto LABEL_82;
      }
LABEL_66:
      long long v63 = *v61;
      long long v64 = v57;
      long long v65 = v61;
      do
      {
        void *v64 = v63;
        *long long v65 = v15;
        long long v66 = v64 + 1;
        do
        {
          if (v66 == a2) {
            goto LABEL_201;
          }
          long long v67 = *v66++;
          long long v15 = v67;
        }
        while (*v67 < v22);
        long long v64 = v66 - 1;
        do
        {
          if (v65 == v10) {
            goto LABEL_201;
          }
          long long v68 = *--v65;
          long long v63 = v68;
        }
        while (*v68 >= v22);
      }
      while (v64 < v65);
      long long v60 = v66 - 2;
      if (v66 - 2 != v10) {
        goto LABEL_83;
      }
LABEL_84:
      *long long v60 = v27;
      if (v57 < v61) {
        goto LABEL_87;
      }
      BOOL v70 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::BindGroupLayout::BindGroupLayout(WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits> &&,objc_object  {objcproto18MTLArgumentEncoder}*,objc_object,objc_object,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &&,unsigned long,unsigned long,unsigned long,BOOL,WTF::EnumeratedArray<WebGPU::ShaderStage,unsigned int,(WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &)2> &&,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,unsigned int,unsigned int,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits><WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &,WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WebGPU::BindGroupLayout::Entry,WTF::HashTableTraits>,(WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &)2> &&,WebGPU::Device const&)::$_0 &,objc_object  {objcproto18MTLArgumentEncoder} const**>(v10, v60);
      long long v10 = v60 + 1;
      __n128 result = (unsigned int **)std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::BindGroupLayout::BindGroupLayout(WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits> &&,objc_object  {objcproto18MTLArgumentEncoder}*,objc_object,objc_object,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &&,unsigned long,unsigned long,unsigned long,BOOL,WTF::EnumeratedArray<WebGPU::ShaderStage,unsigned int,(WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &)2> &&,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,unsigned int,unsigned int,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits><WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &,WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WebGPU::BindGroupLayout::Entry,WTF::HashTableTraits>,(WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &)2> &&,WebGPU::Device const&)::$_0 &,objc_object  {objcproto18MTLArgumentEncoder} const**>(v60 + 1, a2);
      if (result)
      {
        a2 = v60;
        if (v70) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v70)
      {
LABEL_87:
        __n128 result = (unsigned int **)std::__introsort<std::_ClassicAlgPolicy,WebGPU::BindGroupLayout::BindGroupLayout(WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits> &&,objc_object  {objcproto18MTLArgumentEncoder}*,objc_object,objc_object,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &&,unsigned long,unsigned long,unsigned long,BOOL,WTF::EnumeratedArray<WebGPU::ShaderStage,unsigned int,(WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &)2> &&,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,unsigned int,unsigned int,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits><WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &,WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WebGPU::BindGroupLayout::Entry,WTF::HashTableTraits>,(WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &)2> &&,WebGPU::Device const&)::$_0 &,objc_object  {objcproto18MTLArgumentEncoder} const**,false>(v9, v60, a3, a4 & 1);
        a4 = 0;
        long long v10 = v60 + 1;
      }
    }
    else
    {
LABEL_54:
      *long long v30 = v55;
      *long long v42 = v52;
LABEL_55:
      int64_t v22 = (int64_t)*v10;
      *long long v10 = v15;
      *long long v14 = (unsigned int *)v22;
      --a3;
      long long v27 = *v10;
      if (a4) {
        goto LABEL_57;
      }
LABEL_56:
      int64_t v22 = *v27;
      if (**(v10 - 1) < v22) {
        goto LABEL_57;
      }
      if (v22 < **(a2 - 1))
      {
        long long v71 = v10 + 1;
        do
        {
          if (v71 == a2) {
            goto LABEL_201;
          }
          long long v72 = *v71++;
          long long v15 = (unsigned int *)*v72;
        }
        while (v22 >= v15);
        long long v10 = v71 - 1;
      }
      else
      {
        long long v73 = v10 + 1;
        do
        {
          long long v10 = v73;
          if (v73 >= a2) {
            break;
          }
          ++v73;
          long long v15 = (unsigned int *)**v10;
        }
        while (v22 >= v15);
      }
      long long v74 = a2;
      if (v10 < a2)
      {
        long long v74 = a2;
        while (v74 != v9)
        {
          long long v75 = *--v74;
          long long v15 = (unsigned int *)*v75;
          if (v22 >= v15) {
            goto LABEL_102;
          }
        }
        goto LABEL_201;
      }
LABEL_102:
      if (v10 < v74)
      {
        long long v15 = *v10;
        long long v76 = *v74;
        do
        {
          *long long v10 = v76;
          long long v77 = v10 + 1;
          *long long v74 = v15;
          do
          {
            if (v77 == a2) {
              goto LABEL_201;
            }
            long long v78 = *v77++;
            long long v15 = v78;
          }
          while (v22 >= *v78);
          long long v10 = v77 - 1;
          do
          {
            if (v74 == v9) {
              goto LABEL_201;
            }
            long long v79 = *--v74;
            long long v76 = v79;
          }
          while (v22 < *v79);
        }
        while (v10 < v74);
      }
      long long v80 = v10 - 1;
      BOOL v4 = v10 - 1 >= v9;
      BOOL v5 = v10 - 1 == v9;
      if (v10 - 1 != v9) {
        *long long v9 = *v80;
      }
      a4 = 0;
      *long long v80 = v27;
    }
  }
  long long v27 = (unsigned int *)(v10 + 1);
  BOOL v97 = v10 == a2 || v27 == (unsigned int *)a2;
  if (a4)
  {
    if (!v97)
    {
      uint64_t v98 = 8;
      long long v99 = v10;
      do
      {
        long long v101 = *v99;
        long long v99 = (_DWORD **)v27;
        long long v102 = *(unsigned int **)v27;
        unsigned int v103 = *v102;
        if (*v102 < *v101)
        {
          uint64_t v104 = v98;
          do
          {
            *(unsigned int **)((char *)v10 + v104) = v101;
            uint64_t v105 = v104 - 8;
            if (v104 == 8)
            {
              long long v100 = v10;
              goto LABEL_138;
            }
            long long v101 = *(unsigned int **)((char *)v10 + v104 - 16);
            v104 -= 8;
          }
          while (v103 < *v101);
          long long v100 = (unsigned int **)((char *)v10 + v105);
LABEL_138:
          void *v100 = v102;
        }
        long long v27 = (unsigned int *)(v99 + 1);
        v98 += 8;
      }
      while (v99 + 1 != a2);
    }
    return result;
  }
  if (!v97)
  {
    int64_t v22 = 0;
    uint64_t v140 = 1;
    while (1)
    {
      long long v141 = v10[v22];
      int64_t v22 = v140;
      long long v142 = *(unsigned int **)v27;
      long long v15 = (unsigned int *)**(unsigned int **)v27;
      if (v15 < *v141) {
        break;
      }
LABEL_195:
      uint64_t v140 = v22 + 1;
      v27 += 2;
      if (v27 == (unsigned int *)a2) {
        return result;
      }
    }
    uint64_t v143 = 0;
    while (1)
    {
      long long v144 = &v27[2 * v143];
      *(void *)long long v144 = v141;
      if (!(v22 + v143)) {
        break;
      }
      long long v141 = (unsigned int *)*((void *)v144 - 2);
      --v143;
      if (v15 >= *v141)
      {
        *(void *)&v27[2 * v143] = v142;
        goto LABEL_195;
      }
    }
LABEL_201:
    __break(1u);
LABEL_202:
    long long v89 = (unsigned int **)v15;
    long long v139 = *(a2 - 1);
    if (*v139 < *(_DWORD *)v89)
    {
LABEL_203:
      *(void *)int64_t v22 = v139;
      *(a2 - 1) = (unsigned int *)v89;
      long long v145 = *(unsigned int **)v22;
      long long v146 = *(unsigned int **)v27;
      unsigned int v147 = *v145;
      if (*v145 < *v146)
      {
        v9[1] = v145;
        v9[2] = v146;
        long long v148 = *v9;
        if (v147 < **v9)
        {
          *long long v9 = v145;
          v9[1] = v148;
        }
      }
    }
  }
  return result;
}

unsigned int **std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::BindGroupLayout::BindGroupLayout(WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits> &&,objc_object  {objcproto18MTLArgumentEncoder}*,objc_object,objc_object,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &&,unsigned long,unsigned long,unsigned long,BOOL,WTF::EnumeratedArray<WebGPU::ShaderStage,unsigned int,(WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &)2> &&,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,unsigned int,unsigned int,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits><WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &,WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WebGPU::BindGroupLayout::Entry,WTF::HashTableTraits>,(WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &)2> &&,WebGPU::Device const&)::$_0 &,objc_object  {objcproto18MTLArgumentEncoder} const**,0>(unsigned int **result, unsigned int **a2, unsigned int **a3, unsigned int **a4, unsigned int **a5)
{
  BOOL v5 = *a2;
  long long v6 = *result;
  unsigned int v7 = **a2;
  unsigned int v8 = **result;
  long long v9 = *a3;
  unsigned int v10 = **a3;
  if (v7 >= v8)
  {
    if (v10 >= v7)
    {
      BOOL v5 = *a3;
      uint64_t v12 = *a4;
      if (**a4 >= *v9) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    *a2 = v9;
    *a3 = v5;
    uint64_t v11 = *result;
    if (**a2 < **result)
    {
      *__n128 result = *a2;
      *a2 = v11;
      BOOL v5 = *a3;
      uint64_t v12 = *a4;
      if (**a4 >= **a3) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (v10 >= v7)
    {
      *__n128 result = v5;
      *a2 = v6;
      BOOL v5 = *a3;
      if (**a3 >= v8) {
        goto LABEL_11;
      }
      *a2 = v5;
    }
    else
    {
      *__n128 result = v9;
    }
    *a3 = v6;
    BOOL v5 = v6;
  }
LABEL_11:
  uint64_t v12 = *a4;
  if (**a4 >= *v5) {
    goto LABEL_17;
  }
LABEL_14:
  *a3 = v12;
  *a4 = v5;
  unint64_t v13 = *a2;
  if (**a3 < **a2)
  {
    *a2 = *a3;
    *a3 = v13;
    long long v14 = *result;
    if (**a2 < **result)
    {
      *__n128 result = *a2;
      *a2 = v14;
    }
  }
LABEL_17:
  long long v15 = *a4;
  if (**a5 < **a4)
  {
    *a4 = *a5;
    *a5 = v15;
    unsigned int v16 = *a3;
    if (**a4 < **a3)
    {
      *a3 = *a4;
      *a4 = v16;
      long long v17 = *a2;
      if (**a3 < **a2)
      {
        *a2 = *a3;
        *a3 = v17;
        long long v18 = *result;
        if (**a2 < **result)
        {
          *__n128 result = *a2;
          *a2 = v18;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::BindGroupLayout::BindGroupLayout(WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits> &&,objc_object  {objcproto18MTLArgumentEncoder}*,objc_object,objc_object,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &&,unsigned long,unsigned long,unsigned long,BOOL,WTF::EnumeratedArray<WebGPU::ShaderStage,unsigned int,(WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &)2> &&,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,unsigned int,unsigned int,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits><WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &,WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WebGPU::BindGroupLayout::Entry,WTF::HashTableTraits>,(WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &)2> &&,WebGPU::Device const&)::$_0 &,objc_object  {objcproto18MTLArgumentEncoder} const**>(unsigned int **a1, unsigned int **a2)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      uint64_t v12 = *(a2 - 1);
      unint64_t v13 = *a1;
      if (*v12 >= **a1) {
        return 1;
      }
      *a1 = v12;
      *(a2 - 1) = v13;
      return 1;
    case 3:
      long long v14 = *a1;
      long long v15 = a1[1];
      unsigned int v16 = *v15;
      unsigned int v17 = **a1;
      long long v18 = *(a2 - 1);
      unsigned int v19 = *v18;
      if (*v15 >= v17)
      {
        if (v19 >= v16) {
          return 1;
        }
        a1[1] = v18;
        *(a2 - 1) = v15;
        long long v40 = *a1;
        long long v39 = a1[1];
        if (*v39 >= **a1) {
          return 1;
        }
        *a1 = v39;
        a1[1] = v40;
        return 1;
      }
      else if (v19 >= v16)
      {
        *a1 = v15;
        a1[1] = v14;
        unsigned int v46 = *(a2 - 1);
        if (*v46 >= v17) {
          return 1;
        }
        a1[1] = v46;
        *(a2 - 1) = v14;
        return 1;
      }
      else
      {
        *a1 = v18;
        *(a2 - 1) = v14;
        return 1;
      }
    case 4:
      unsigned int v20 = a1 + 1;
      long long v21 = a1[1];
      int64_t v22 = a1 + 2;
      unsigned int v23 = a1[2];
      unsigned int v24 = *a1;
      unsigned int v25 = *v21;
      unsigned int v26 = **a1;
      unsigned int v27 = *v23;
      if (*v21 < v26)
      {
        long long v28 = a1;
        long long v29 = a1 + 2;
        long long v30 = *a1;
        if (v27 >= v25)
        {
          *a1 = v21;
          a1[1] = v24;
          long long v28 = a1 + 1;
          long long v29 = a1 + 2;
          long long v30 = v24;
          if (v27 >= v26) {
            goto LABEL_38;
          }
        }
LABEL_35:
        *long long v28 = v23;
        *long long v29 = v24;
        long long v21 = v30;
LABEL_36:
        long long v41 = *(a2 - 1);
        if (*v41 >= *v21) {
          return 1;
        }
        goto LABEL_39;
      }
      if (v27 < v25)
      {
        *unsigned int v20 = v23;
        *int64_t v22 = v21;
        long long v28 = a1;
        long long v29 = a1 + 1;
        long long v30 = v21;
        if (v27 >= v26) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_38:
      long long v21 = v23;
      long long v41 = *(a2 - 1);
      if (*v41 >= *v21) {
        return 1;
      }
LABEL_39:
      *int64_t v22 = v41;
      *(a2 - 1) = v21;
      long long v42 = *v22;
      long long v43 = *v20;
      unsigned int v44 = *v42;
      if (*v42 >= *v43) {
        return 1;
      }
      a1[1] = v42;
      a1[2] = v43;
      long long v45 = *a1;
      if (v44 >= **a1) {
        return 1;
      }
      *a1 = v42;
      a1[1] = v45;
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebGPU::BindGroupLayout::BindGroupLayout(WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits> &&,objc_object  {objcproto18MTLArgumentEncoder}*,objc_object,objc_object,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &&,unsigned long,unsigned long,unsigned long,BOOL,WTF::EnumeratedArray<WebGPU::ShaderStage,unsigned int,(WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &)2> &&,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,WTF::EnumeratedArray,unsigned int,unsigned int,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits><WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &,WTF::HashSet<unsigned int,WTF::IntHash<unsigned int>,WebGPU::BindGroupLayout::Entry,WTF::HashTableTraits>,(WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<objc_object  {objcproto18MTLArgumentEncoder}>,WTF::HashTableTraits> &)2> &&,WebGPU::Device const&)::$_0 &,objc_object  {objcproto18MTLArgumentEncoder} const**,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      BOOL v4 = a1 + 2;
      uint64_t v3 = a1[2];
      BOOL v5 = a1[1];
      long long v6 = *a1;
      unsigned int v7 = *v5;
      unsigned int v8 = **a1;
      unsigned int v9 = *v3;
      if (*v5 >= v8)
      {
        if (v9 >= v7) {
          goto LABEL_20;
        }
        a1[1] = v3;
        *BOOL v4 = v5;
        unsigned int v10 = a1;
        uint64_t v11 = a1 + 1;
      }
      else
      {
        unsigned int v10 = a1;
        uint64_t v11 = a1 + 2;
        if (v9 < v7) {
          goto LABEL_19;
        }
        *a1 = v5;
        a1[1] = v6;
        unsigned int v10 = a1 + 1;
        uint64_t v11 = a1 + 2;
      }
      if (v9 >= v8) {
        goto LABEL_20;
      }
LABEL_19:
      *unsigned int v10 = v3;
      *uint64_t v11 = v6;
LABEL_20:
      long long v31 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v32 = 0;
      for (uint64_t i = 24; ; i += 8)
      {
        unsigned int v34 = *v31;
        unsigned int v35 = *v4;
        unsigned int v36 = **v31;
        if (v36 < *v35) {
          break;
        }
LABEL_23:
        BOOL v4 = v31++;
        if (v31 == a2) {
          return 1;
        }
      }
      uint64_t v37 = i;
      do
      {
        *(unsigned int **)((char *)a1 + v37) = v35;
        uint64_t v38 = v37 - 8;
        if (v37 == 8)
        {
          *a1 = v34;
          if (++v32 != 8) {
            goto LABEL_23;
          }
          return v31 + 1 == a2;
        }
        unsigned int v35 = *(unsigned int **)((char *)a1 + v37 - 16);
        v37 -= 8;
      }
      while (v36 < *v35);
      *(unsigned int **)((char *)a1 + v38) = v34;
      if (++v32 != 8) {
        goto LABEL_23;
      }
      return v31 + 1 == a2;
  }
}

uint64_t *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add@<X0>(uint64_t *result@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v4 = result;
  uint64_t v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(result, 8u, 0), (uint64_t v6 = *v4) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  int v9 = *a2;
  unsigned int v10 = 9 * ((v9 + ~(v9 << 15)) ^ ((v9 + ~(v9 << 15)) >> 10));
  unsigned int v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  unsigned int v12 = (v11 ^ HIWORD(v11)) & v8;
  unint64_t v13 = (int *)(v6 + 4 * v12);
  int v14 = *v13;
  if (*v13 == -1)
  {
LABEL_12:
    *unint64_t v13 = v9;
    if (*v4)
    {
      ++*(_DWORD *)(*v4 - 12);
      uint64_t v17 = *v4;
      if (*v4) {
        goto LABEL_14;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      uint64_t v17 = *v4;
      if (*v4)
      {
LABEL_14:
        uint64_t v18 = (*(_DWORD *)(v17 - 16) + *(_DWORD *)(v17 - 12));
        unint64_t v19 = *(unsigned int *)(v17 - 4);
        if (v19 <= 0x400) {
          goto LABEL_15;
        }
        goto LABEL_23;
      }
    }
    uint64_t v18 = *(unsigned int *)(v17 - 16);
    unint64_t v19 = *(unsigned int *)(v17 - 4);
    if (v19 <= 0x400)
    {
LABEL_15:
      if (3 * v19 > 4 * v18)
      {
LABEL_26:
        *(void *)a3 = v13;
        *(void *)(a3 + 8) = v17 + 4 * v19;
        *(unsigned char *)(a3 + 16) = 1;
        return result;
      }
      if (!v19)
      {
        __n128 result = (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v4, 8u, v13);
        unint64_t v13 = (int *)result;
        uint64_t v17 = *v4;
        if (!*v4)
        {
LABEL_18:
          unint64_t v19 = 0;
          goto LABEL_26;
        }
LABEL_25:
        unint64_t v19 = *(unsigned int *)(v17 - 4);
        goto LABEL_26;
      }
LABEL_24:
      __n128 result = (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v4, v19 << (6 * *(_DWORD *)(v17 - 12) >= (2 * v19)), v13);
      unint64_t v13 = (int *)result;
      uint64_t v17 = *v4;
      if (!*v4) {
        goto LABEL_18;
      }
      goto LABEL_25;
    }
LABEL_23:
    if (v19 > 2 * v18) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  long long v15 = 0;
  int v16 = 1;
  while (v14 != v9)
  {
    if (v14 == -2) {
      long long v15 = v13;
    }
    unsigned int v12 = (v12 + v16) & v8;
    unint64_t v13 = (int *)(v6 + 4 * v12);
    int v14 = *v13;
    ++v16;
    if (*v13 == -1)
    {
      if (v15)
      {
        *long long v15 = -1;
        --*(_DWORD *)(*v4 - 16);
        int v9 = *a2;
        unint64_t v13 = v15;
      }
      goto LABEL_12;
    }
  }
  if (v7) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(unsigned int *)(v6 - 4);
  }
  *(void *)a3 = v13;
  *(void *)(a3 + 8) = v6 + 4 * v20;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

_DWORD *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
    size_t v9 = 4 * a2;
    uint64_t v11 = WTF::fastMalloc((WTF *)(v9 + 16));
    unsigned int v12 = (void *)(v11 + 16);
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  int v7 = 0;
  int v8 = 0;
  size_t v9 = 4 * a2;
  uint64_t v11 = WTF::fastMalloc((WTF *)(v9 + 16));
  unsigned int v12 = (void *)(v11 + 16);
  if (a2) {
LABEL_3:
  }
    memset(v12, 255, v9);
LABEL_4:
  *a1 = (uint64_t)v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    int v14 = 0;
    do
    {
      long long v15 = (int *)(v6 + 4 * v13);
      int v16 = *v15;
      if (*v15 <= 0xFFFFFFFD)
      {
        uint64_t v17 = *a1;
        int v18 = *a1 ? *(_DWORD *)(v17 - 8) : 0;
        int v19 = 0;
        unsigned int v20 = 9 * ((v16 + ~(v16 << 15)) ^ ((v16 + ~(v16 << 15)) >> 10));
        unsigned int v21 = ((v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11)) ^ (((v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11)) >> 16);
        do
        {
          uint64_t v22 = v21 & v18;
          unsigned int v21 = ++v19 + v22;
        }
        while (*(_DWORD *)(v17 + 4 * v22) != -1);
        unsigned int v23 = (_DWORD *)(v17 + 4 * v22);
        *unsigned int v23 = v16;
        if (v15 == a3) {
          int v14 = v23;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    int v14 = 0;
  }
  if (v6) {
    WTF::fastFree((WTF *)(v6 - 16), v10);
  }
  return v14;
}

_OWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
    uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    uint64_t v11 = v9 + 16;
    if (!a2) {
      goto LABEL_12;
    }
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
    uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    uint64_t v11 = v9 + 16;
    if (!a2) {
      goto LABEL_12;
    }
  }
  if (a2 == 1)
  {
    uint64_t v12 = 0;
LABEL_10:
    uint64_t v15 = a2 - v12;
    int v16 = (void *)(v9 + 16 * v12 + 24);
    do
    {
      *((_DWORD *)v16 - 2) = -1;
      *int v16 = 0;
      v16 += 2;
      --v15;
    }
    while (v15);
    goto LABEL_12;
  }
  uint64_t v12 = a2 & 0xFFFFFFFE;
  uint64_t v13 = (void *)(v9 + 40);
  uint64_t v14 = v12;
  do
  {
    *((_DWORD *)v13 - 6) = -1;
    *((_DWORD *)v13 - 2) = -1;
    *(v13 - 2) = 0;
    *uint64_t v13 = 0;
    v13 += 4;
    v14 -= 2;
  }
  while (v14);
  if (v12 != a2) {
    goto LABEL_10;
  }
LABEL_12:
  *a1 = v11;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v17 = 0;
    int v18 = 0;
    do
    {
      int v19 = (_DWORD *)(v6 + 16 * v17);
      if (*v19 <= 0xFFFFFFFD)
      {
        uint64_t v20 = *a1;
        if (*a1) {
          int v21 = *(_DWORD *)(v20 - 8);
        }
        else {
          int v21 = 0;
        }
        int v22 = 0;
        unsigned int v23 = 9 * ((*v19 + ~(*v19 << 15)) ^ ((*v19 + ~(*v19 << 15)) >> 10));
        unsigned int v24 = ((v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11)) ^ (((v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11)) >> 16);
        do
        {
          uint64_t v25 = v24 & v21;
          unsigned int v24 = ++v22 + v25;
        }
        while (*(_DWORD *)(v20 + 16 * v25) != -1);
        unsigned int v26 = (_OWORD *)(v20 + 16 * v25);
        *unsigned int v26 = *(_OWORD *)v19;
        if (v19 == a3) {
          int v18 = v26;
        }
      }
      ++v17;
    }
    while (v17 != v7);
  }
  else
  {
    int v18 = 0;
    __n128 result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v18;
}

_OWORD *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,MTLBindingAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,MTLBindingAccess>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
    uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    uint64_t v11 = v9 + 16;
    if (!a2) {
      goto LABEL_12;
    }
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
    uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    uint64_t v11 = v9 + 16;
    if (!a2) {
      goto LABEL_12;
    }
  }
  if (a2 < 4)
  {
    uint64_t v12 = 0;
LABEL_10:
    uint64_t v15 = a2 - v12;
    int v16 = (_OWORD *)(v9 + 16 * v12 + 16);
    do
    {
      *v16++ = xmmword_1826CEB10;
      --v15;
    }
    while (v15);
    goto LABEL_12;
  }
  uint64_t v12 = a2 & 0xFFFFFFFC;
  uint64_t v13 = (_OWORD *)(v9 + 48);
  uint64_t v14 = v12;
  do
  {
    *(v13 - 2) = xmmword_1826CEB10;
    *(v13 - 1) = xmmword_1826CEB10;
    *uint64_t v13 = xmmword_1826CEB10;
    v13[1] = xmmword_1826CEB10;
    v13 += 4;
    v14 -= 4;
  }
  while (v14);
  if (v12 != a2) {
    goto LABEL_10;
  }
LABEL_12:
  *a1 = v11;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v17 = 0;
    int v18 = 0;
    do
    {
      int v19 = (void *)(v6 + 16 * v17);
      if (*v19 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v20 = *a1;
        if (*a1) {
          int v21 = *(_DWORD *)(v20 - 8);
        }
        else {
          int v21 = 0;
        }
        uint64_t v22 = (*v19 + ~(*v19 << 32)) ^ ((*v19 + ~(*v19 << 32)) >> 22);
        unint64_t v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((unint64_t)(v22 + ~(v22 << 13)) >> 8));
        unint64_t v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
        unsigned int v25 = v21 & ((v24 >> 31) ^ v24);
        int v26 = 1;
        do
        {
          unsigned int v27 = v25;
          uint64_t v28 = *(void *)(v20 + 16 * v25);
          unsigned int v25 = (v25 + v26++) & v21;
        }
        while (v28 != -1);
        long long v29 = (_OWORD *)(v20 + 16 * v27);
        *long long v29 = *(_OWORD *)v19;
        if (v19 == a3) {
          int v18 = v29;
        }
      }
      ++v17;
    }
    while (v17 != v7);
  }
  else
  {
    int v18 = 0;
    __n128 result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v18;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebGPU::BindGroupLayout::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebGPU::BindGroupLayout::Entry>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebGPU::BindGroupLayout::Entry,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::BindGroupLayout::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    uint64_t result = WTF::fastMalloc((WTF *)(136 * a2 + 16));
    uint64_t v9 = result + 16;
    if (!a2) {
      goto LABEL_7;
    }
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
    uint64_t result = WTF::fastMalloc((WTF *)(136 * a2 + 16));
    uint64_t v9 = result + 16;
    if (!a2) {
      goto LABEL_7;
    }
  }
  uint64_t v10 = a2;
  uint64_t v11 = (_OWORD *)(result + 24);
  do
  {
    *((_DWORD *)v11 - 2) = -1;
    *uint64_t v11 = 0uLL;
    v11[1] = 0uLL;
    v11[2] = 0uLL;
    v11[3] = 0uLL;
    v11[4] = 0uLL;
    v11[5] = 0uLL;
    v11[6] = 0uLL;
    v11[7] = 0uLL;
    uint64_t v11 = (_OWORD *)((char *)v11 + 136);
    --v10;
  }
  while (v10);
LABEL_7:
  *a1 = v9;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      unsigned int v13 = *(_DWORD *)(v4 + 136 * i);
      if (v13 <= 0xFFFFFFFD)
      {
        uint64_t v14 = *a1;
        if (*a1) {
          unsigned int v15 = *(_DWORD *)(v14 - 8);
        }
        else {
          unsigned int v15 = 0;
        }
        int v16 = 0;
        unsigned int v17 = 9 * ((v13 + ~(v13 << 15)) ^ ((v13 + ~(v13 << 15)) >> 10));
        unsigned int v18 = (v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11);
        int v19 = v18 ^ HIWORD(v18);
        do
        {
          int v8 = (void *)(v19 & v15);
          uint64_t v20 = (unsigned int *)(v14 + 136 * v8);
          int v19 = ++v16 + v8;
        }
        while (*v20 != -1);
        *uint64_t v20 = v13;
        uint64_t v21 = v14 + 136 * v8;
        uint64_t v22 = v4 + 136 * i;
        long long v23 = *(_OWORD *)(v22 + 8);
        long long v24 = *(_OWORD *)(v22 + 24);
        *(_OWORD *)(v21 + 40) = *(_OWORD *)(v22 + 40);
        *(_OWORD *)(v21 + 24) = v24;
        *(_OWORD *)(v21 + 8) = v23;
        long long v25 = *(_OWORD *)(v22 + 56);
        *(void *)(v21 + 72) = *(void *)(v22 + 72);
        *(_OWORD *)(v21 + 56) = v25;
        long long v26 = *(_OWORD *)(v22 + 80);
        *(void *)(v21 + 96) = *(void *)(v22 + 96);
        *(_OWORD *)(v21 + 80) = v26;
        long long v27 = *(_OWORD *)(v22 + 104);
        *(_OWORD *)(v21 + 116) = *(_OWORD *)(v22 + 116);
        *(_OWORD *)(v21 + 104) = v27;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

unint64_t WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  int v5 = *(void **)a1;
  if (*(void *)a1 > a3 || (uint64_t v6 = *(unsigned int *)(a1 + 12), (unint64_t)v5 + 8 * v6 <= a3))
  {
    unint64_t v14 = *(unsigned int *)(a1 + 8);
    unint64_t v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10) {
      unint64_t v16 = v15 + 1;
    }
    else {
      unint64_t v16 = 16;
    }
    if (v16 <= a2) {
      unint64_t v17 = a2;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17 > v14)
    {
      if (v17 >> 29) {
        goto LABEL_30;
      }
      uint64_t v18 = *(unsigned int *)(a1 + 12);
      int v19 = (void *)WTF::fastMalloc((WTF *)(8 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(void *)a1 = v19;
      memcpy(v19, v5, 8 * v18);
      if (v5)
      {
        if (*(void **)a1 == v5)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v20);
      }
    }
    return a3;
  }
  unint64_t v7 = *(unsigned int *)(a1 + 8);
  unint64_t v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10) {
    unint64_t v9 = v8 + 1;
  }
  else {
    unint64_t v9 = 16;
  }
  if (v9 <= a2) {
    unint64_t v10 = a2;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 > v7)
  {
    if (!(v10 >> 29))
    {
      uint64_t v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(void *)a1 = v11;
      memcpy(v11, v5, 8 * v6);
      unsigned int v13 = *(void **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v12);
        unsigned int v13 = *(void **)a1;
      }
      return (unint64_t)v13 + 8 * ((uint64_t)(a3 - (void)v5) >> 3);
    }
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x1824DC0E0);
  }
  unsigned int v13 = *(void **)a1;
  return (unint64_t)v13 + 8 * ((uint64_t)(a3 - (void)v5) >> 3);
}

id WebGPU::Device::safeCreateBuffer(WebGPU::Device *this, unint64_t a2, MTLStorageMode a3, MTLCPUCacheMode a4, MTLHazardTrackingMode a5)
{
  unint64_t v6 = a4 | (16 * a3) | (a5 << 8);
  unint64_t v7 = (void *)*((void *)this + 1);
  if (a2 <= 1) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = a2;
  }
  unint64_t v9 = (void *)[v7 newBufferWithLength:v8 options:v6];
  WebGPU::Device::setOwnerWithIdentity((uint64_t)this, v9);
  return v9;
}

void sub_1824DC148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebGPU::Device::safeCreateBuffer(WebGPU::Device *this, unint64_t a2)
{
  uint64_t v3 = (void *)*((void *)this + 1);
  if (a2 <= 1) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = a2;
  }
  int v5 = (void *)[v3 newBufferWithLength:v4 options:0];
  WebGPU::Device::setOwnerWithIdentity((uint64_t)this, v5);
  return v5;
}

void sub_1824DC1B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebGPU::Device::createBuffer(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(void *)a2 || (unint64_t v6 = *(void **)(a1 + 8)) == 0)
  {
    uint64_t v5 = WTF::fastMalloc((WTF *)0x130);
    WebGPU::Buffer::Buffer(v5, (atomic_uchar *volatile *)a1);
LABEL_35:
    *a3 = v5;
    return;
  }
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  if (*(unsigned char *)(a1 + 72)) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = (*(_DWORD *)(a2 + 16) & 3) == 3;
  }
  BOOL v10 = v9 || v8 == 0;
  if (v10
    || (v8 <= 0x3FF ? (BOOL v11 = (*(_DWORD *)(a2 + 16) & 0x3FF) == 0) : (BOOL v11 = 1),
        v11
     || (v8 & 1) != 0 && (v8 & 0xFFFFFFF6) != 0
     || (v8 & 2) != 0 && (v8 & 0xFFFFFFF9) != 0
     || (unint64_t v12 = *(void *)(a2 + 24), *(_DWORD *)(a2 + 32)) && (v12 & 3) != 0
     || v12 > *(void *)(a1 + 176)))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = 32 * *(unsigned int *)(a1 + 44);
    uint64_t v15 = v13 + v14;
    while (v14)
    {
      int v16 = *(_DWORD *)(v15 - 8);
      v15 -= 32;
      v14 -= 32;
      if (!v16)
      {
        uint64_t v17 = v13 + v14;
        if (!*(unsigned char *)(v17 + 16))
        {
          uint64_t v18 = v35;
          uint64_t v35 = 0;
          *(_DWORD *)uint64_t v17 = 1;
          *(void *)(v17 + 8) = v18;
          *(unsigned char *)(v17 + 16) = 1;
        }
        goto LABEL_30;
      }
    }
    uint64_t v19 = *(void *)(a1 + 24);
    if (v19)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v19 + 16))(v19, 1, &v35);
      uint64_t v20 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = 0;
      if (v20) {
        (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
      }
    }
LABEL_30:
    uint64_t v21 = (_DWORD *)v35;
    uint64_t v35 = 0;
    if (v21)
    {
      if (*v21 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v21 -= 2;
      }
    }
    uint64_t v5 = WTF::fastMalloc((WTF *)0x130);
    WebGPU::Buffer::Buffer(v5, (atomic_uchar *volatile *)a1);
    goto LABEL_35;
  }
  if ([v6 hasUnifiedMemory]) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = 32;
  }
  if (*(void *)(a2 + 24) <= 1uLL) {
    uint64_t v23 = 1;
  }
  else {
    uint64_t v23 = *(void *)(a2 + 24);
  }
  long long v24 = (void *)[*(id *)(a1 + 8) newBufferWithLength:v23 options:v22];
  WebGPU::Device::setOwnerWithIdentity(a1, v24);
  if (v24)
  {
    if (*(void *)(a2 + 8)) {
      strlen(*(const char **)(a2 + 8));
    }
    WTF::String::fromUTF8();
    if (v33) {
      long long v26 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      long long v26 = &stru_1ECABF938;
    }
    [v24 setLabel:v26];

    if (v33)
    {
      if (*v33 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v33 -= 2;
      }
    }
    int v27 = *(_DWORD *)(a2 + 32);
    uint64_t v28 = *(void *)(a2 + 24);
    int v29 = *(_DWORD *)(a2 + 16);
    if (v27)
    {
      id v30 = v24;
      uint64_t v31 = WTF::fastMalloc((WTF *)0x130);
      WebGPU::Buffer::Buffer(v31, v30, v28, v29, 1, 0, v28, a1);
    }
    else
    {
      id v30 = v24;
      uint64_t v31 = WTF::fastMalloc((WTF *)0x130);
      WebGPU::Buffer::Buffer(v31, v30, v28, v29, 3, 0, 0, a1);
    }
    *a3 = v31;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    unsigned int v34 = (_DWORD *)v35;
    WebGPU::Device::generateAnOutOfMemoryError(a1, (uint64_t *)&v34);
    long long v25 = v34;
    unsigned int v34 = 0;
    if (v25)
    {
      if (*v25 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v25 -= 2;
      }
    }
    uint64_t v32 = WTF::fastMalloc((WTF *)0x130);
    WebGPU::Buffer::Buffer(v32, (atomic_uchar *volatile *)a1);
    *a3 = v32;
  }
}

void sub_1824DC540(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  WTF::fastFree(v13, a2);

  _Unwind_Resume(a1);
}

void sub_1824DC5FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  if (a12)
  {
    if (*a12 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a12 -= 2;
    _Unwind_Resume(exception_object);
  }
  JUMPOUT(0x1824DC5F4);
}

void sub_1824DC630(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1824DC644(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebGPU::Buffer::Buffer(uint64_t a1, void *a2, uint64_t a3, int a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v15 = a2;
  int v16 = 1;
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  id v17 = v15;
  char v18 = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = a3;
  *(void *)(a1 + 16) = v17;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 48) = a4;
  *(unsigned char *)(a1 + 52) = a5;
  *(void *)(a1 + 56) = a6;
  *(void *)(a1 + 64) = a7;
  *(void *)(a1 + 72) = a1 + 88;
  *(void *)(a1 + 80) = 8;
  *(unsigned char *)(a1 + 216) = 1;
  *(_DWORD *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = -1;
  *(void *)(a1 + 240) = -1;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  atomic_uchar *volatile v19 = *(atomic_uchar *volatile *)a8;
  atomic_compare_exchange_strong_explicit(*(atomic_uchar *volatile *)a8, (unsigned __int8 *)&v18, 1u, memory_order_acquire, memory_order_acquire);
  if (v18) {
    MEMORY[0x18530AEA0](v19);
  }
  ++*((void *)v19 + 1);
  atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v16, 0, memory_order_release, memory_order_relaxed);
  if (v16 == 1)
  {
    *(void *)(a1 + 288) = 0;
    *(void *)(a1 + 296) = 0;
    *(void *)(a1 + 280) = a8;
    int v20 = *(_DWORD *)(a1 + 48);
    if ((v20 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v19);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = a8;
  int v20 = *(_DWORD *)(a1 + 48);
  if ((v20 & 0x100) != 0)
  {
LABEL_5:
    uint64_t v21 = (void *)[*(id *)(a8 + 8) newBufferWithLength:16 options:32];
    WebGPU::Device::setOwnerWithIdentity(a8, v21);
    uint64_t v22 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = v21;

    int v20 = *(_DWORD *)(a1 + 48);
  }
LABEL_6:
  if ((v20 & 0x110) != 0)
  {
    uint64_t v23 = (void *)[*(id *)(a8 + 8) newBufferWithLength:20 options:32];
    WebGPU::Device::setOwnerWithIdentity(a8, v23);
    long long v24 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = v23;
  }
  return a1;
}

void sub_1824DC7E4(_Unwind_Exception *a1, void *a2)
{
  unint64_t v7 = *(WTF **)(v2 + 72);
  if (v5 != v7)
  {
    if (v7)
    {
      *(void *)(v2 + 72) = 0;
      *(_DWORD *)(v2 + 80) = 0;
      WTF::fastFree(v7, a2);
    }
  }

  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v4, v8);
  _Unwind_Resume(a1);
}

unsigned int ***WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::~WeakHashSet(unsigned int ***a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = *((unsigned int *)v3 - 1);
    if (v4)
    {
      uint64_t v5 = *a1;
      do
      {
        unint64_t v6 = *v5;
        if (*v5 != (unsigned int *)-1)
        {
          *uint64_t v5 = 0;
          if (v6)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v6);
              WTF::fastFree((WTF *)v6, a2);
            }
          }
        }
        ++v5;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  return a1;
}

uint64_t WebGPU::Buffer::Buffer(uint64_t a1, atomic_uchar *volatile *a2)
{
  char v4 = 0;
  int v5 = 1;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)a1 = 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(unsigned char *)(a1 + 52) = 3;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = a1 + 88;
  *(void *)(a1 + 80) = 8;
  *(unsigned char *)(a1 + 216) = 1;
  *(_DWORD *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = -1;
  *(void *)(a1 + 240) = -1;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  atomic_uchar *volatile v6 = *a2;
  atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x18530AEA0](v6);
  }
  ++*((void *)v6 + 1);
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = a2;
  return a1;
}

void sub_1824DC9CC(_Unwind_Exception *a1, void *a2)
{
  atomic_uchar *volatile v6 = *(WTF **)(v2 + 72);
  if (v4 != v6)
  {
    if (v6)
    {
      *(void *)(v2 + 72) = 0;
      *(_DWORD *)(v2 + 80) = 0;
      WTF::fastFree(v6, a2);
    }
  }

  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v3, v7);
  _Unwind_Resume(a1);
}

void WebGPU::Buffer::~Buffer(WebGPU::Buffer *this, void *a2)
{
  uint64_t v3 = *((void *)this + 36);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      int v5 = (unsigned int **)*((void *)this + 36);
      do
      {
        atomic_uchar *volatile v6 = *v5;
        if (*v5 != (unsigned int *)-1)
        {
          *int v5 = 0;
          if (v6)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v6);
              WTF::fastFree((WTF *)v6, a2);
            }
          }
        }
        ++v5;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)this + 35, a2);
  unsigned int v8 = (WTF *)*((void *)this + 9);
  if ((WebGPU::Buffer *)((char *)this + 88) != v8 && v8 != 0)
  {
    *((void *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v8, v7);
  }

  uint64_t v11 = *((void *)this + 1);
  if (v11)
  {
    *(void *)(v11 + 8) = 0;
    unint64_t v12 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v12)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v10);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

void WebGPU::Buffer::setCommandEncoder(WebGPU::Buffer *this, WebGPU::CommandEncoder *a2)
{
  WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>((uint64_t)this + 288, (uint64_t)a2, (uint64_t)v10);
  unsigned int v4 = *((unsigned __int8 *)this + 52);
  if (v4 > 1)
  {
    if (v4 == 4)
    {
      *((unsigned char *)a2 + 76) = 1;
      uint64_t v8 = *((void *)a2 + 7);
      if (v8)
      {
        BOOL v9 = *(WebGPU::CommandBuffer **)(v8 + 8);
        if (v9) {
          WebGPU::CommandBuffer::makeInvalid(v9, *((NSString **)a2 + 8));
        }
      }
    }
  }
  else
  {
    int v5 = *((_DWORD *)a2 + 18) + 1;
    *((_DWORD *)a2 + 18) = v5;
    uint64_t v6 = *((void *)a2 + 7);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 8);
      if (v7) {
        *(_DWORD *)(v7 + 32) = v5;
      }
    }
  }
}

unsigned int *WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  unsigned int v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN6WebGPU14CommandEncoderES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)a1, &v15);
    *(_DWORD *)(a1 + 8) = 0;
    uint64_t v8 = *(void *)a1;
    if (*(void *)a1)
    {
      LODWORD(v8) = *(_DWORD *)(v8 - 12);
      if (v8 > 0x7FFFFFFE) {
        LODWORD(v8) = 0x7FFFFFFF;
      }
    }
    *(_DWORD *)(a1 + 12) = 2 * v8;
  }
  uint64_t v9 = *(void *)(a2 + 8);
  if (!v9)
  {
    uint64_t v9 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v9 = 1;
    *(void *)(v9 + 8) = a2;
    uint64_t v11 = *(unsigned int **)(a2 + 8);
    *(void *)(a2 + 8) = v9;
    if (v11)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v10);
      }
      uint64_t v9 = *(void *)(a2 + 8);
    }
  }
  atomic_fetch_add((atomic_uint *volatile)v9, 1u);
  atomic_fetch_add((atomic_uint *volatile)v9, 1u);
  uint64_t v14 = (WTF *)v9;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v14, a3);
  uint64_t result = (unsigned int *)v14;
  uint64_t v14 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v12);
    if (!v9) {
      return result;
    }
  }
  else if (!v9)
  {
    return result;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v9);
    return (unsigned int *)WTF::fastFree((WTF *)v9, v12);
  }
  return result;
}

void sub_1824DCD38(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9)
{
  if (a9 && atomic_fetch_add((atomic_uint *volatile)a9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a9);
    WTF::fastFree(a9, a2);
    if (!v9) {
      goto LABEL_5;
    }
  }
  else if (!v9)
  {
    goto LABEL_5;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, a2);
    _Unwind_Resume(exception_object);
  }
LABEL_5:
  _Unwind_Resume(exception_object);
}

WTF *WebGPU::Buffer::unmap(WebGPU::Buffer *this)
{
  uint64_t v2 = *((void *)this + 36);
  if (!v2)
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
LABEL_10:
    uint64_t v6 = v4;
    uint64_t v4 = v2 + 8 * v3;
    if (!v2)
    {
      uint64_t v8 = 0;
      if (v6) {
        goto LABEL_17;
      }
      goto LABEL_24;
    }
    goto LABEL_8;
  }
  uint64_t v3 = *(unsigned int *)(v2 - 4);
  uint64_t v4 = v2 + 8 * v3;
  if (!*(_DWORD *)(v2 - 12)) {
    goto LABEL_10;
  }
  if (v3)
  {
    uint64_t v5 = 8 * v3;
    uint64_t v6 = *((void *)this + 36);
    while ((unint64_t)(*(void *)v6 + 1) <= 1)
    {
      v6 += 8;
      v5 -= 8;
      if (!v5)
      {
        uint64_t v6 = v4;
        break;
      }
    }
LABEL_8:
    uint64_t v7 = *(unsigned int *)(v2 - 4);
    goto LABEL_14;
  }
  uint64_t v7 = 0;
  uint64_t v6 = *((void *)this + 36);
LABEL_14:
  uint64_t v8 = v2 + 8 * v7;
  if (v8 != v6)
  {
LABEL_17:
    while (!*(void *)(*(void *)v6 + 8))
    {
      uint64_t v9 = v6 + 8;
      uint64_t v6 = v4;
      if (v9 != v4)
      {
        uint64_t v6 = v9;
        while ((unint64_t)(*(void *)v6 + 1) <= 1)
        {
          v6 += 8;
          if (v6 == v4)
          {
            uint64_t v6 = v4;
            break;
          }
        }
      }
      if (v6 == v8)
      {
        uint64_t v6 = v8;
        break;
      }
    }
  }
LABEL_24:
  if (v2) {
    v2 += 8 * *(unsigned int *)(v2 - 4);
  }
  if (v6 != v2)
  {
    int v10 = *((_DWORD *)this + 74);
    do
    {
      uint64_t v11 = *(void *)(*(void *)v6 + 8);
      int v12 = *(_DWORD *)(v11 + 72) - 1;
      *(_DWORD *)(v11 + 72) = v12;
      uint64_t v13 = *(void *)(v11 + 56);
      if (v13)
      {
        uint64_t v14 = *(void *)(v13 + 8);
        if (v14) {
          *(_DWORD *)(v14 + 32) = v12;
        }
      }
      uint64_t v15 = v6 + 8;
      uint64_t v16 = v4;
      if (v15 != v4)
      {
        uint64_t v16 = v15;
        while ((unint64_t)(*(void *)v16 + 1) <= 1)
        {
          v16 += 8;
          if (v16 == v4)
          {
            uint64_t v16 = v4;
            break;
          }
        }
      }
      uint64_t v6 = v8;
      if (v16 != v8)
      {
        uint64_t v6 = v16;
        if (!*(void *)(*(void *)v16 + 8))
        {
          while (1)
          {
            uint64_t v17 = v6 + 8;
            uint64_t v6 = v4;
            if (v17 != v4)
            {
              uint64_t v6 = v17;
              while ((unint64_t)(*(void *)v6 + 1) <= 1)
              {
                v6 += 8;
                if (v6 == v4)
                {
                  uint64_t v6 = v4;
                  break;
                }
              }
            }
            if (v6 == v8) {
              break;
            }
            if (*(void *)(*(void *)v6 + 8)) {
              goto LABEL_29;
            }
          }
          uint64_t v6 = v8;
        }
      }
LABEL_29:
      ++v10;
    }
    while (v6 != v2);
    *((_DWORD *)this + 74) = v10;
  }
  *((void *)this + 29) = -1;
  *((void *)this + 30) = -1;
  *((void *)this + 34) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  *((_DWORD *)this + 66) = 0;
  if (*((unsigned char *)this + 52) != 4) {
    *((unsigned char *)this + 52) = 3;
  }
  int v20 = (WTF *)v22;
  uint64_t v21 = 8;
  char v23 = 1;
  WTF::Vector<WTF::Range<unsigned long>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WebGPU::Buffer *)((char *)this + 72), (WTF *)&v20);
  *((unsigned char *)this + 216) = v23;
  uint64_t result = v20;
  if (v22 != (unsigned char *)v20)
  {
    if (v20)
    {
      int v20 = 0;
      LODWORD(v21) = 0;
      return (WTF *)WTF::fastFree(result, v18);
    }
  }
  return result;
}

void sub_1824DD008(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11)
{
  if (v11 != a10)
  {
    if (a10) {
      WTF::fastFree(a10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t WebGPU::Buffer::getMappedRange(WebGPU::Buffer *this, unint64_t a2, unint64_t a3, __n128 a4)
{
  unint64_t v4 = a3;
  unsigned int v7 = *((unsigned __int8 *)this + 52);
  if (v7 != 4 && !*((void *)this + 2)) {
    return 0;
  }
  if (a3 == -1)
  {
    unint64_t v10 = [*((id *)this + 2) length];
    if (v10 >= a2) {
      unint64_t v4 = v10 - a2;
    }
    else {
      unint64_t v4 = 0;
    }
    if (*((unsigned __int8 *)this + 52) > 1u || (v4 & 3 | a2 & 7) != 0) {
      return 0;
    }
  }
  else if (v7 > 1 || (a3 & 3 | a2 & 7) != 0)
  {
    return 0;
  }
  if (*((void *)this + 7) > a2) {
    return 0;
  }
  unint64_t v12 = a2 + v4;
  if (__CFADD__(a2, v4) || v12 > *((void *)this + 8)) {
    return 0;
  }
  if (v12 != a2)
  {
    unint64_t v13 = *((unsigned int *)this + 21);
    if (!*((unsigned char *)this + 216))
    {
      if (*((_DWORD *)this + 21))
      {
        a4 = std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*,false>((__n128 *)*((void *)this + 9), (__n128 *)(*((void *)this + 9) + 16 * v13), 126 - 2 * __clz(v13), 1, a4);
        unint64_t v14 = *((unsigned int *)this + 21);
        if (!v14)
        {
          __break(0xC471u);
          JUMPOUT(0x1824DD4A4);
        }
        unint64_t v15 = v14 - 1;
        if (v14 == 1)
        {
          unint64_t v13 = 1;
        }
        else
        {
          long long v45 = (__n128 *)*((void *)this + 9);
          unsigned int v46 = v45 + 1;
          unint64_t v13 = 1;
          unsigned int v47 = v45;
          do
          {
            a4 = *v46;
            unint64_t v50 = v47->n128_u64[1];
            unint64_t v49 = v46->n128_u64[1];
            if (v49 > v50)
            {
              if (a4.n128_u64[0] <= v50)
              {
                unint64_t v48 = v47->n128_u64[0];
                if (v47->n128_u64[0] == v49)
                {
                  unint64_t v48 = 0;
                  unint64_t v49 = 0;
                }
                v47->n128_u64[0] = v48;
                v47->n128_u64[1] = v49;
              }
              else
              {
                if (v14 <= v13)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1824DD48CLL);
                }
                unsigned int v47 = &v45[v13++];
                *unsigned int v47 = a4;
              }
            }
            ++v46;
            --v15;
          }
          while (v15);
        }
        *((_DWORD *)this + 21) = v13;
      }
      *((unsigned char *)this + 216) = 1;
    }
    if (v13)
    {
      uint64_t v16 = (unint64_t *)(*((void *)this + 9) + 8);
      uint64_t v17 = 0xFFFFFFFFLL;
      do
      {
        if (v12 > *(v16 - 1) && *v16 > a2) {
          break;
        }
        v16 += 2;
        --v17;
        --v13;
      }
      while (v13);
      if (v17) {
        return 0;
      }
    }
  }
  atomic_uchar *volatile v19 = (__n128 **)((char *)this + 72);
  v57.n128_u64[0] = a2;
  v57.n128_u64[1] = a2 + v4;
  if (v4 && v12 != a2)
  {
    uint64_t v20 = *((unsigned int *)this + 21);
    if (!v20)
    {
      uint64_t v25 = 0;
      goto LABEL_49;
    }
    uint64_t v21 = (uint64_t)&(*v19)[v20];
    unint64_t v23 = *(void *)(v21 - 16);
    unint64_t v22 = *(void *)(v21 - 8);
    BOOL v24 = v23 <= a2 && v22 >= v12;
    uint64_t v25 = *((unsigned int *)this + 21);
    if (!v24)
    {
LABEL_49:
      *((unsigned char *)this + 216) = 0;
      long long v26 = (void *)(v25 + 1);
      unint64_t v27 = *((unsigned int *)this + 20);
      if (v25 + 1 >= v27)
      {
        if (v20 == v27)
        {
          int v29 = (__n128 *)WTF::Vector<WTF::Range<unsigned long>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 72, v26, (unint64_t)&v57);
          a4 = *v29;
          *(__n128 *)(*((void *)this + 9) + 16 * *((unsigned int *)this + 21)) = *v29;
        }
        else
        {
          a4 = v57;
          (*v19)[v25] = v57;
        }
        unint64_t v30 = (*((_DWORD *)this + 21) + 1);
        *((_DWORD *)this + 21) = v30;
        if (!*((unsigned char *)this + 216))
        {
          if (v30)
          {
            a4 = std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*,false>((__n128 *)*((void *)this + 9), (__n128 *)(*((void *)this + 9) + 16 * v30), 126 - 2 * __clz(v30), 1, a4);
            unint64_t v31 = *((unsigned int *)this + 21);
            if (!v31)
            {
LABEL_105:
              __break(0xC471u);
              JUMPOUT(0x1824DD484);
            }
            unint64_t v32 = v31 - 1;
            if (v31 == 1)
            {
              LODWORD(v33) = 1;
            }
            else
            {
              long long v51 = *v19;
              long long v52 = *v19 + 1;
              unint64_t v33 = 1;
              unsigned int v53 = *v19;
              do
              {
                a4 = *v52;
                unint64_t v56 = v53->n128_u64[1];
                unint64_t v55 = v52->n128_u64[1];
                if (v55 > v56)
                {
                  if (a4.n128_u64[0] <= v56)
                  {
                    unint64_t v54 = v53->n128_u64[0];
                    if (v53->n128_u64[0] == v55)
                    {
                      unint64_t v54 = 0;
                      unint64_t v55 = 0;
                    }
                    v53->n128_u64[0] = v54;
                    v53->n128_u64[1] = v55;
                  }
                  else
                  {
                    if (v31 <= v33)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1824DD49CLL);
                    }
                    unsigned int v53 = &v51[v33++];
                    *unsigned int v53 = a4;
                  }
                }
                ++v52;
                --v32;
              }
              while (v32);
            }
            *((_DWORD *)this + 21) = v33;
          }
          *((unsigned char *)this + 216) = 1;
        }
      }
      else
      {
        if (v20 == v27)
        {
          uint64_t v28 = (__n128 *)WTF::Vector<WTF::Range<unsigned long>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 72, v26, (unint64_t)&v57);
          a4 = *v28;
          *(__n128 *)(*((void *)this + 9) + 16 * *((unsigned int *)this + 21)) = *v28;
        }
        else
        {
          a4 = v57;
          *(__n128 *)(*((void *)this + 9) + 16 * v25) = v57;
        }
        ++*((_DWORD *)this + 21);
      }
    }
  }
  if (!*((unsigned char *)this + 216))
  {
    unint64_t v34 = *((unsigned int *)this + 21);
    if (v34)
    {
      std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*,false>(*((__n128 **)this + 9), (__n128 *)(*((void *)this + 9) + 16 * v34), 126 - 2 * __clz(v34), 1, a4);
      unint64_t v35 = *((unsigned int *)this + 21);
      if (!v35)
      {
        __break(0xC471u);
        JUMPOUT(0x1824DD494);
      }
      unint64_t v36 = v35 - 1;
      if (v35 != 1)
      {
        uint64_t v38 = *v19;
        uint64_t v39 = (uint64_t)&(*v19)[1];
        unint64_t v37 = 1;
        long long v40 = *v19;
        while (1)
        {
          __n128 v43 = *(__n128 *)v39;
          unint64_t v44 = v40->n128_u64[1];
          unint64_t v42 = *(void *)(v39 + 8);
          if (v42 > v44)
          {
            if (v43.n128_u64[0] <= v44)
            {
              unint64_t v41 = v40->n128_u64[0];
              if (v40->n128_u64[0] == v42)
              {
                unint64_t v41 = 0;
                unint64_t v42 = 0;
              }
              v40->n128_u64[0] = v41;
              v40->n128_u64[1] = v42;
            }
            else
            {
              if (v35 <= v37) {
                goto LABEL_105;
              }
              long long v40 = &v38[v37++];
              *long long v40 = v43;
            }
          }
          v39 += 16;
          if (!--v36) {
            goto LABEL_69;
          }
        }
      }
      LODWORD(v37) = 1;
LABEL_69:
      *((_DWORD *)this + 21) = v37;
    }
    *((unsigned char *)this + 216) = 1;
  }
  unint64_t result = objc_msgSend(*((id *)this + 2), "contents", *(_OWORD *)&v57);
  if (result) {
    return [*((id *)this + 2) contents] + a2;
  }
  return result;
}

uint64_t WebGPU::Buffer::mapAsync(unsigned int,unsigned long,unsigned long,WTF::CompletionHandler<void ()(WGPUBufferMapAsyncStatus)> &&)::$_0::~$_0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = *(WebGPU::Buffer **)a1;
  *(void *)a1 = 0;
  if (!v4) {
    return a1;
  }
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    return a1;
  }
  WebGPU::Buffer::~Buffer(v4, a2);
  WTF::fastFree(v6, v7);
  return a1;
}

_DWORD *wgpuBufferReference(_DWORD *result)
{
  return result;
}

WebGPU::Buffer *wgpuBufferRelease(WebGPU::Buffer *result, void *a2)
{
  if (*(_DWORD *)result == 1)
  {
    WebGPU::Buffer::~Buffer(result, a2);
    return (WebGPU::Buffer *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void wgpuBufferDestroy(id *this, void *a2)
{
  int v3 = *((unsigned __int8 *)this + 52);
  if ((v3 - 3) >= 2)
  {
    WebGPU::Buffer::unmap((WebGPU::Buffer *)this);
    if (*((unsigned char *)this + 52) == 4)
    {
LABEL_3:
      unint64_t v4 = (unsigned int **)this[36];
      if (v4) {
        goto LABEL_4;
      }
LABEL_13:
      uint64_t v6 = 0;
      uint64_t v5 = 0;
LABEL_14:
      uint64_t v8 = v6;
      uint64_t v6 = &v4[v5];
      if (!v4)
      {
        unint64_t v10 = 0;
        if (v8) {
          goto LABEL_21;
        }
        goto LABEL_28;
      }
      goto LABEL_10;
    }
  }
  else if (v3 == 4)
  {
    goto LABEL_3;
  }
  *((unsigned char *)this + 52) = 4;
  unint64_t v4 = (unsigned int **)this[36];
  if (!v4) {
    goto LABEL_13;
  }
LABEL_4:
  uint64_t v5 = *((unsigned int *)v4 - 1);
  uint64_t v6 = &v4[v5];
  if (!*((_DWORD *)v4 - 3)) {
    goto LABEL_14;
  }
  if (v5)
  {
    uint64_t v7 = 8 * v5;
    uint64_t v8 = v4;
    while ((unint64_t)*v8 + 1 <= 1)
    {
      ++v8;
      v7 -= 8;
      if (!v7)
      {
        uint64_t v8 = v6;
        break;
      }
    }
LABEL_10:
    uint64_t v9 = *((unsigned int *)v4 - 1);
    goto LABEL_18;
  }
  uint64_t v9 = 0;
  uint64_t v8 = v4;
LABEL_18:
  unint64_t v10 = &v4[v9];
  if (v10 != v8)
  {
LABEL_21:
    while (!*((void *)*v8 + 1))
    {
      uint64_t v11 = v8 + 1;
      uint64_t v8 = v6;
      if (v11 != v6)
      {
        uint64_t v8 = v11;
        while ((unint64_t)*v8 + 1 <= 1)
        {
          if (++v8 == v6)
          {
            uint64_t v8 = v6;
            break;
          }
        }
      }
      if (v8 == v10)
      {
        uint64_t v8 = v10;
        break;
      }
    }
  }
LABEL_28:
  if (v4)
  {
    unint64_t v12 = &v4[*((unsigned int *)v4 - 1)];
    if (v8 == v12) {
      goto LABEL_30;
    }
    do
    {
LABEL_45:
      uint64_t v17 = *((void *)*v8 + 1);
      *(unsigned char *)(v17 + 76) = 1;
      uint64_t v18 = *(void *)(v17 + 56);
      if (v18)
      {
        atomic_uchar *volatile v19 = *(WebGPU::CommandBuffer **)(v18 + 8);
        if (v19) {
          WebGPU::CommandBuffer::makeInvalid(v19, *(NSString **)(v17 + 64));
        }
      }
      uint64_t v20 = v6;
      if (v8 + 1 != v6)
      {
        uint64_t v20 = v8 + 1;
        while ((unint64_t)*v20 + 1 <= 1)
        {
          if (++v20 == v6)
          {
            uint64_t v20 = v6;
            break;
          }
        }
      }
      uint64_t v8 = v10;
      if (v20 != v10)
      {
        uint64_t v8 = v20;
        if (!*((void *)*v20 + 1))
        {
          while (1)
          {
            uint64_t v21 = v8 + 1;
            uint64_t v8 = v6;
            if (v21 != v6)
            {
              uint64_t v8 = v21;
              while ((unint64_t)*v8 + 1 <= 1)
              {
                if (++v8 == v6)
                {
                  uint64_t v8 = v6;
                  break;
                }
              }
            }
            if (v8 == v10) {
              break;
            }
            if (*((void *)*v8 + 1)) {
              goto LABEL_44;
            }
          }
          uint64_t v8 = v10;
        }
      }
LABEL_44:
      ++*((_DWORD *)this + 74);
    }
    while (v8 != v12);
    unint64_t v4 = (unsigned int **)this[36];
    if (v4) {
      goto LABEL_31;
    }
LABEL_64:
    LODWORD(v16) = 0;
    *((_DWORD *)this + 74) = 0;
    goto LABEL_65;
  }
  unint64_t v12 = 0;
  if (v8) {
    goto LABEL_45;
  }
LABEL_30:
  if (!v4) {
    goto LABEL_64;
  }
LABEL_31:
  this[36] = 0;
  uint64_t v13 = *((unsigned int *)v4 - 1);
  if (v13)
  {
    unint64_t v14 = v4;
    do
    {
      unint64_t v15 = *v14;
      if (*v14 != (unsigned int *)-1)
      {
        *unint64_t v14 = 0;
        if (v15)
        {
          if (atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v15);
            WTF::fastFree((WTF *)v15, a2);
          }
        }
      }
      ++v14;
      --v13;
    }
    while (v13);
  }
  WTF::fastFree((WTF *)(v4 - 2), a2);
  uint64_t v16 = this[36];
  *((_DWORD *)this + 74) = 0;
  if (v16)
  {
    LODWORD(v16) = *(v16 - 3);
    if (v16 > 0x7FFFFFFE) {
      LODWORD(v16) = 0x7FFFFFFF;
    }
  }
LABEL_65:
  *((_DWORD *)this + 75) = 2 * v16;
  unint64_t v22 = (void *)*((void *)this[35] + 36);
  objc_storeStrong(this + 2, v22);
}

uint64_t wgpuBufferGetMapState(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 52) - 2;
  if (v1 > 2) {
    return 2;
  }
  else {
    return dword_1826CEB58[(char)v1];
  }
}

uint64_t wgpuBufferGetBufferContents(uint64_t a1)
{
  return [*(id *)(a1 + 16) contents];
}

uint64_t wgpuBufferGetInitialSize(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t wgpuBufferGetCurrentSize(uint64_t a1)
{
  return [*(id *)(a1 + 16) length];
}

uint64_t wgpuBufferMapAsync(uint64_t a1, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
  *unint64_t v12 = &unk_1ECABAB50;
  v12[1] = a5;
  unsigned char v12[2] = a6;
  if (a4 == -1)
  {
    unint64_t v13 = [*(id *)(a1 + 16) length];
    if (v13 >= a3) {
      a4 = v13 - a3;
    }
    else {
      a4 = 0;
    }
    if (*(unsigned char *)(a1 + 52) == 4) {
      goto LABEL_9;
    }
  }
  else if (*(unsigned char *)(a1 + 52) == 4)
  {
    goto LABEL_9;
  }
  if (!*(void *)(a1 + 16))
  {
    unint64_t v14 = @"GPUBuffer.mapAsync: Buffer is not valid";
    goto LABEL_17;
  }
LABEL_9:
  if ((a3 & 7) != 0)
  {
    unint64_t v14 = @"GPUBuffer.mapAsync: Offset is not divisible by 8";
  }
  else if ((a4 & 3) != 0)
  {
    unint64_t v14 = @"GPUBuffer.mapAsync: range size is not divisible by 4";
  }
  else if (__CFADD__(a3, a4) || a3 + a4 > [*(id *)(a1 + 16) length])
  {
    unint64_t v14 = @"GPUBuffer.mapAsync: offset and rangeSize overflowed";
  }
  else if (*(unsigned char *)(a1 + 52) == 3)
  {
    if ((a2 & 3u) - 3 >= 0xFFFFFFFE)
    {
      if (a2 & 1) == 0 || (*(unsigned char *)(a1 + 48))
      {
        if ((a2 & 2) == 0 || (*(unsigned char *)(a1 + 48) & 2) != 0)
        {
          *(unsigned char *)(a1 + 52) = 2;
          *(_DWORD *)(a1 + 224) = a2;
          uint64_t v26 = *(void *)(*(void *)(a1 + 280) + 16);
          ++*(_DWORD *)a1;
          *(void *)&long long v29 = a3;
          *((void *)&v29 + 1) = a4;
          uint64_t v27 = WTF::fastMalloc((WTF *)0x28);
          *(void *)uint64_t v27 = &unk_1ECABAB28;
          *(void *)(v27 + 8) = a1;
          *(_OWORD *)(v27 + 16) = v29;
          uint64_t v28 = 0;
          uint64_t v30 = 0;
          uint64_t v31 = v27;
          *(void *)(v27 + 32) = v12;
          WebGPU::Queue::onSubmittedWorkDone(v26, &v31);
          uint64_t result = v31;
          uint64_t v31 = 0;
          if (result) {
            return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
          }
          return result;
        }
        unint64_t v14 = @"GPUBuffer.mapAsync: (mode & Write) && !(usage & Write)";
      }
      else
      {
        unint64_t v14 = @"GPUBuffer.mapAsync: (mode & Read) && !(usage & Read)";
      }
    }
    else
    {
      unint64_t v14 = @"GPUBuffer.mapAsync: readWriteModeFlags != Read && readWriteModeFlags != Write";
    }
  }
  else
  {
    unint64_t v14 = @"GPUBuffer.mapAsync: state != Unmapped";
  }
LABEL_17:
  uint64_t v15 = *(void *)(a1 + 280);
  MEMORY[0x18530AF50](&v28, v14);
  uint64_t v16 = *(void *)(v15 + 32);
  uint64_t v17 = 32 * *(unsigned int *)(v15 + 44);
  uint64_t v18 = v16 + v17;
  while (v17)
  {
    int v19 = *(_DWORD *)(v18 - 8);
    v18 -= 32;
    v17 -= 32;
    if (!v19)
    {
      uint64_t v20 = v16 + v17;
      if (!*(unsigned char *)(v20 + 16))
      {
        uint64_t v21 = v28;
        uint64_t v28 = 0;
        *(_DWORD *)uint64_t v20 = 1;
        *(void *)(v20 + 8) = v21;
        *(unsigned char *)(v20 + 16) = 1;
      }
      goto LABEL_25;
    }
  }
  uint64_t v22 = *(void *)(v15 + 24);
  if (v22)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v22 + 16))(v22, 1, &v28);
    uint64_t v23 = *(void *)(v15 + 24);
    *(void *)(v15 + 24) = 0;
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
    }
  }
LABEL_25:
  BOOL v24 = v28;
  uint64_t v28 = 0;
  if (v24)
  {
    if (*v24 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v24 -= 2;
    }
  }
  (*(void (**)(void *, uint64_t))(*v12 + 16))(v12, 1);
  return (*(uint64_t (**)(void *))(*v12 + 8))(v12);
}

void sub_1824DDC30(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15 = a14;
  a14 = 0;
  if (v15)
  {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    WebGPU::Buffer::mapAsync(unsigned int,unsigned long,unsigned long,WTF::CompletionHandler<void ()(WGPUBufferMapAsyncStatus)> &&)::$_0::~$_0((uint64_t)&a10, v16);
    _Unwind_Resume(a1);
  }
  WebGPU::Buffer::mapAsync(unsigned int,unsigned long,unsigned long,WTF::CompletionHandler<void ()(WGPUBufferMapAsyncStatus)> &&)::$_0::~$_0((uint64_t)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_1824DDC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *a10 -= 2;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

_DWORD *wgpuBufferSetLabel(uint64_t a1, char *__s)
{
  if (__s) {
    strlen(__s);
  }
  WTF::String::fromUTF8();
  if (v5) {
    int v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    int v3 = &stru_1ECABF938;
  }
  [*(id *)(a1 + 16) setLabel:v3];

  uint64_t result = v5;
  if (v5)
  {
    if (*v5 == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *v5 -= 2;
    }
  }
  return result;
}

void sub_1824DDD9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t wgpuBufferGetUsage(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

WTF *WTF::Vector<WTF::Range<unsigned long>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF *result, WTF *a2)
{
  uint64_t v2 = result;
  if (a2 == result) {
    return v2;
  }
  unsigned int v4 = *((_DWORD *)result + 3);
  unsigned int v5 = *((_DWORD *)a2 + 3);
  if (v4 > v5)
  {
    *((_DWORD *)result + 3) = v5;
    uint64_t v6 = *(WTF **)result;
    if (!v5)
    {
LABEL_5:
      uint64_t v7 = *((unsigned int *)a2 + 3);
      if (v5 != v7)
      {
        uint64_t v8 = 16 * v5;
        uint64_t v9 = (_OWORD *)((char *)v6 + v8);
        uint64_t v10 = (long long *)(*(void *)a2 + v8);
        uint64_t v11 = 16 * v7 - v8;
        do
        {
          long long v12 = *v10++;
          *v9++ = v12;
          v11 -= 16;
        }
        while (v11);
        unsigned int v5 = *((_DWORD *)a2 + 3);
      }
      *((_DWORD *)v2 + 3) = v5;
      return v2;
    }
LABEL_4:
    memmove(v6, *(const void **)a2, 16 * v5);
    unsigned int v5 = *((_DWORD *)v2 + 3);
    uint64_t v6 = *(WTF **)v2;
    goto LABEL_5;
  }
  unsigned int v13 = *((_DWORD *)result + 2);
  if (v5 <= v13)
  {
LABEL_36:
    unsigned int v5 = *((_DWORD *)v2 + 3);
    uint64_t v6 = *(WTF **)v2;
    if (!v5) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  if (v13)
  {
    if (v4) {
      *((_DWORD *)result + 3) = 0;
    }
    uint64_t result = *(WTF **)result;
    if ((WTF *)((char *)v2 + 16) != *(WTF **)v2 && result)
    {
      *(void *)uint64_t v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      WTF::fastFree(result, a2);
      uint64_t result = *(WTF **)v2;
    }
    if (result)
    {
      uint64_t v14 = *((unsigned int *)a2 + 3);
      if (*((_DWORD *)v2 + 2) >= v14) {
        goto LABEL_36;
      }
    }
    else
    {
      *(void *)uint64_t v2 = (char *)v2 + 16;
      *((_DWORD *)v2 + 2) = 8;
      uint64_t v14 = *((unsigned int *)a2 + 3);
      if (v14 <= 8) {
        goto LABEL_36;
      }
    }
  }
  else
  {
    uint64_t v14 = *((unsigned int *)a2 + 3);
    if (!v14) {
      goto LABEL_36;
    }
  }
  uint64_t v15 = *(WTF **)v2;
  uint64_t v16 = *((unsigned int *)v2 + 3);
  if (v14 < 9)
  {
    uint64_t v17 = (_OWORD *)((char *)v2 + 16);
    *(void *)uint64_t v2 = (char *)v2 + 16;
    *((_DWORD *)v2 + 2) = 8;
    goto LABEL_28;
  }
  if (!(v14 >> 28))
  {
    uint64_t v17 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v14));
    *((_DWORD *)v2 + 2) = v14;
    *(void *)uint64_t v2 = v17;
LABEL_28:
    if (v16)
    {
      uint64_t v18 = 16 * v16;
      int v19 = v15;
      do
      {
        long long v20 = *(_OWORD *)v19;
        int v19 = (WTF *)((char *)v19 + 16);
        *v17++ = v20;
        v18 -= 16;
      }
      while (v18);
    }
    if ((WTF *)((char *)v2 + 16) != v15 && v15)
    {
      if (*(WTF **)v2 == v15)
      {
        *(void *)uint64_t v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      WTF::fastFree(v15, a2);
    }
    goto LABEL_36;
  }
  __break(0xC471u);
  return result;
}

uint64_t _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN6WebGPU14CommandEncoderES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = *(_DWORD *)(v2 - 4);
    if (!v3) {
      return 0;
    }
    int v5 = 0;
    unsigned int v6 = v3 - 1;
    do
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)(v2 + 8 * v6);
      if ((unint64_t)(v8 + 1) >= 2 && !*(void *)(v8 + 8))
      {
        *(void *)(v2 + 8 * v6) = 0;
        if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v8);
          WTF::fastFree((WTF *)v8, a2);
        }
        *(void *)(v2 + 8 * v6) = -1;
        ++v5;
      }
      --v6;
    }
    while (v7);
    uint64_t v9 = *a1;
    uint64_t v2 = v5 != 0;
    if (v5)
    {
      *(_DWORD *)(v9 - 16) += v5;
      uint64_t v10 = *a1;
      if (*a1) {
        int v11 = *(_DWORD *)(v10 - 12);
      }
      else {
        int v11 = 0;
      }
      *(_DWORD *)(v10 - 12) = v11 - v5;
      uint64_t v9 = *a1;
    }
    if (v9)
    {
      unsigned int v12 = *(_DWORD *)(v9 - 4);
      uint64_t v13 = *(unsigned int *)(v9 - 12);
      if (6 * (int)v13 < v12 && v12 >= 9)
      {
        unsigned int v15 = (v13 - 1) | ((v13 - 1) >> 1) | (((v13 - 1) | ((v13 - 1) >> 1)) >> 2);
        unsigned int v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
        unint64_t v17 = (v16 | HIWORD(v16)) + 1;
        if (v17 > 0x400)
        {
          if (v17 > 2 * v13) {
            goto LABEL_29;
          }
        }
        else if (3 * v17 > 4 * v13)
        {
LABEL_27:
          if ((double)v17 * 0.604166667 > (double)v13) {
            goto LABEL_31;
          }
          goto LABEL_30;
        }
        LODWORD(v17) = 2 * v17;
        if (v17 <= 0x400) {
          goto LABEL_27;
        }
LABEL_29:
        if ((double)v17 * 0.416666667 > (double)v13)
        {
LABEL_31:
          if (v17 <= 8) {
            unsigned int v18 = 8;
          }
          else {
            unsigned int v18 = v17;
          }
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v18, 0);
          return v2;
        }
LABEL_30:
        LODWORD(v17) = 2 * v17;
        goto LABEL_31;
      }
    }
  }
  return v2;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unsigned int v12 = 0;
    do
    {
      uint64_t v13 = (unsigned int **)(v6 + 8 * v11);
      uint64_t v14 = *v13;
      if (*v13 != (unsigned int *)-1)
      {
        if (v14)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = ((unint64_t)v14 + ~((void)v14 << 32)) ^ (((unint64_t)v14 + ~((void)v14 << 32)) >> 22);
          unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v23 = *(void *)(v15 + 8 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (v23);
          BOOL v24 = (unsigned int **)(v15 + 8 * v22);
          *BOOL v24 = 0;
          uint64_t v25 = *v13;
          *uint64_t v13 = 0;
          *BOOL v24 = v25;
          uint64_t v26 = *v13;
          *uint64_t v13 = 0;
          if (v26 && atomic_fetch_add((atomic_uint *volatile)v26, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v26);
            WTF::fastFree((WTF *)v26, v10);
          }
          if (v13 == a3) {
            unsigned int v12 = v24;
          }
        }
        else
        {
          *uint64_t v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unsigned int v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add@<X0>(uint64_t *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4 = result;
  uint64_t v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(result, 8u, 0), (uint64_t v6 = *v4) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = 0;
  uint64_t v10 = (unsigned int *)*a2;
  unint64_t v11 = ~(*a2 << 32) + *a2;
  unint64_t v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  unsigned int v14 = (v13 >> 31) ^ v13;
  for (int i = 1; ; ++i)
  {
    unsigned int v16 = v14 & v8;
    unint64_t v17 = (unsigned int **)(v6 + 8 * v16);
    unint64_t v18 = *v17;
    if (*v17 == (unsigned int *)-1)
    {
      uint64_t v9 = (unsigned int **)(v6 + 8 * v16);
      goto LABEL_6;
    }
    if (!v18)
    {
      if (v9)
      {
        *uint64_t v9 = 0;
        --*(_DWORD *)(*v4 - 16);
        uint64_t v10 = (unsigned int *)*a2;
        unint64_t v17 = v9;
      }
      *a2 = 0;
      uint64_t result = (uint64_t *)*v17;
      *unint64_t v17 = v10;
      if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)result);
        uint64_t result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
        uint64_t v20 = *v4;
        if (*v4)
        {
LABEL_17:
          ++*(_DWORD *)(v20 - 12);
          uint64_t v21 = *v4;
          if (*v4) {
            goto LABEL_18;
          }
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v20 = *v4;
        if (*v4) {
          goto LABEL_17;
        }
      }
      *(_DWORD *)(v20 - 12) = 1;
      uint64_t v21 = *v4;
      if (*v4)
      {
LABEL_18:
        uint64_t v22 = (*(_DWORD *)(v21 - 16) + *(_DWORD *)(v21 - 12));
        unint64_t v23 = *(unsigned int *)(v21 - 4);
        if (v23 <= 0x400) {
          goto LABEL_19;
        }
        goto LABEL_29;
      }
LABEL_28:
      uint64_t v22 = *(unsigned int *)(v21 - 16);
      unint64_t v23 = *(unsigned int *)(v21 - 4);
      if (v23 <= 0x400)
      {
LABEL_19:
        if (3 * v23 > 4 * v22)
        {
LABEL_32:
          *(void *)a3 = v17;
          *(void *)(a3 + 8) = v21 + 8 * v23;
          *(unsigned char *)(a3 + 16) = 1;
          return result;
        }
        if (!v23)
        {
          uint64_t result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(v4, 8u, v17);
          unint64_t v17 = (unsigned int **)result;
          uint64_t v21 = *v4;
          if (!*v4)
          {
LABEL_22:
            unint64_t v23 = 0;
            goto LABEL_32;
          }
LABEL_31:
          unint64_t v23 = *(unsigned int *)(v21 - 4);
          goto LABEL_32;
        }
LABEL_30:
        uint64_t result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(v4, v23 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v23)), v17);
        unint64_t v17 = (unsigned int **)result;
        uint64_t v21 = *v4;
        if (!*v4) {
          goto LABEL_22;
        }
        goto LABEL_31;
      }
LABEL_29:
      if (v23 > 2 * v22) {
        goto LABEL_32;
      }
      goto LABEL_30;
    }
    if (v18 == v10) {
      break;
    }
LABEL_6:
    unsigned int v14 = i + v16;
  }
  if (v7) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(unsigned int *)(v6 - 4);
  }
  *(void *)a3 = v17;
  *(void *)(a3 + 8) = v6 + 8 * v19;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

unint64_t WTF::Vector<WTF::Range<unsigned long>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3)
{
  int v5 = *(WTF **)a1;
  if (*(void *)a1 > a3 || (uint64_t v6 = *(unsigned int *)(a1 + 12), (unint64_t)v5 + 16 * v6 <= a3))
  {
    unint64_t v12 = *(unsigned int *)(a1 + 8);
    unint64_t v13 = v12 + (v12 >> 2);
    if (v13 >= 0x10) {
      unint64_t v14 = v13 + 1;
    }
    else {
      unint64_t v14 = 16;
    }
    if (v14 <= (unint64_t)a2) {
      unint64_t v15 = (unint64_t)a2;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15 <= v12) {
      return a3;
    }
    uint64_t v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 9)
    {
      unint64_t v17 = (_OWORD *)(a1 + 16);
      *(void *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 8;
      if (!v16) {
        goto LABEL_27;
      }
    }
    else
    {
      if (v15 >> 28) {
        goto LABEL_43;
      }
      unint64_t v17 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(void *)a1 = v17;
      if (!v16) {
        goto LABEL_27;
      }
    }
    uint64_t v18 = 16 * v16;
    uint64_t v19 = v5;
    do
    {
      long long v20 = *(_OWORD *)v19;
      uint64_t v19 = (WTF *)((char *)v19 + 16);
      *v17++ = v20;
      v18 -= 16;
    }
    while (v18);
LABEL_27:
    if ((WTF *)(a1 + 16) != v5 && v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
    return a3;
  }
  unint64_t v7 = *(unsigned int *)(a1 + 8);
  unint64_t v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10) {
    unint64_t v9 = v8 + 1;
  }
  else {
    unint64_t v9 = 16;
  }
  if (v9 <= (unint64_t)a2) {
    unint64_t v10 = (unint64_t)a2;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 > v7)
  {
    if (v10 < 9)
    {
      uint64_t v11 = a1 + 16;
      *(void *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 8;
      goto LABEL_35;
    }
    if (!(v10 >> 28))
    {
      uint64_t v11 = WTF::fastMalloc((WTF *)(16 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(void *)a1 = v11;
LABEL_35:
      uint64_t v23 = 0;
      do
      {
        *(_OWORD *)(v11 + v23) = *(_OWORD *)((char *)v5 + v23);
        v23 += 16;
      }
      while (16 * v6 != v23);
      uint64_t v22 = *(WTF **)a1;
      if ((WTF *)(a1 + 16) != v5 && v5)
      {
        if (v22 == v5)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, a2);
        uint64_t v22 = *(WTF **)a1;
      }
      return (unint64_t)v22 + 16 * ((uint64_t)(a3 - (void)v5) >> 4);
    }
LABEL_43:
    __break(0xC471u);
    JUMPOUT(0x1824DE704);
  }
  uint64_t v22 = *(WTF **)a1;
  return (unint64_t)v22 + 16 * ((uint64_t)(a3 - (void)v5) >> 4);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*>(__n128 *a1, __n128 *a2, __n128 a3)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      unint64_t v11 = a2[-1].n128_u64[0];
      unint64_t v10 = a2 - 1;
      if (v11 < a1->n128_u64[0]) {
        goto LABEL_10;
      }
      return 1;
    case 3:
      unint64_t v12 = (long long *)&a1[1];
      unint64_t v13 = a1[1].n128_u64[0];
      unint64_t v15 = a2[-1].n128_u64[0];
      unint64_t v10 = a2 - 1;
      unint64_t v14 = v15;
      if (v13 >= a1->n128_u64[0])
      {
        if (v14 < v13)
        {
          long long v25 = *v12;
          *unint64_t v12 = (__int128)*v10;
          *unint64_t v10 = (__n128)v25;
          if (a1[1].n128_u64[0] < a1->n128_u64[0])
          {
LABEL_46:
            long long v41 = (__int128)*a1;
            *a1 = (__n128)*v12;
            *unint64_t v12 = v41;
            return 1;
          }
        }
      }
      else
      {
        if (v14 < v13)
        {
LABEL_10:
          __n128 v16 = *a1;
          *a1 = *v10;
LABEL_11:
          *unint64_t v10 = v16;
          return 1;
        }
        long long v37 = (__int128)*a1;
        *a1 = (__n128)*v12;
        *unint64_t v12 = v37;
        if (v10->n128_u64[0] < a1[1].n128_u64[0])
        {
          __n128 v16 = (__n128)*v12;
          *unint64_t v12 = (__int128)*v10;
          goto LABEL_11;
        }
      }
      return 1;
    case 4:
      unint64_t v12 = (long long *)&a1[1];
      unint64_t v17 = a1[1].n128_u64[0];
      uint64_t v18 = (long long *)&a1[2];
      unint64_t v19 = a1[2].n128_u64[0];
      unint64_t v20 = a2 - 1;
      unint64_t v21 = a1->n128_u64[0];
      if (v17 >= a1->n128_u64[0])
      {
        if (v19 < v17)
        {
          long long v26 = *v12;
          *unint64_t v12 = *v18;
          *uint64_t v18 = v26;
          if (*(void *)v12 < v21)
          {
            long long v27 = (__int128)*a1;
            *a1 = (__n128)*v12;
            *unint64_t v12 = v27;
          }
        }
      }
      else
      {
        if (v19 >= v17)
        {
          long long v38 = (__int128)*a1;
          *a1 = (__n128)*v12;
          *unint64_t v12 = v38;
          if (v19 >= a1[1].n128_u64[0]) {
            goto LABEL_43;
          }
          long long v22 = *v12;
          *unint64_t v12 = *v18;
        }
        else
        {
          long long v22 = (__int128)*a1;
          *a1 = (__n128)*v18;
        }
        *uint64_t v18 = v22;
      }
LABEL_43:
      if (v20->n128_u64[0] < *(void *)v18)
      {
        __n128 v39 = (__n128)*v18;
        *uint64_t v18 = (__int128)*v20;
        *unint64_t v20 = v39;
        if (*(void *)v18 < *(void *)v12)
        {
          long long v40 = *v12;
          *unint64_t v12 = *v18;
          *uint64_t v18 = v40;
          if (a1[1].n128_u64[0] < a1->n128_u64[0]) {
            goto LABEL_46;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*>(a1, a1 + 1, a1[2].n128_u64, (__n128 *)a1[3].n128_u64, (__n128 *)a2[-1].n128_u64, a3);
      return 1;
    default:
      unsigned int v4 = a1 + 2;
      unint64_t v5 = a1[2].n128_u64[0];
      BOOL v6 = a1 + 1;
      unint64_t v7 = a1[1].n128_u64[0];
      unint64_t v8 = a1->n128_u64[0];
      if (v7 >= a1->n128_u64[0])
      {
        if (v5 < v7)
        {
          __n128 v23 = *v6;
          *BOOL v6 = *v4;
          *unsigned int v4 = v23;
          if (v6->n128_u64[0] < v8)
          {
            __n128 v24 = *a1;
            *a1 = *v6;
            *BOOL v6 = v24;
          }
        }
      }
      else
      {
        if (v5 >= v7)
        {
          __n128 v28 = *a1;
          *a1 = *v6;
          *BOOL v6 = v28;
          if (v5 >= a1[1].n128_u64[0]) {
            goto LABEL_28;
          }
          __n128 v9 = *v6;
          *BOOL v6 = *v4;
        }
        else
        {
          __n128 v9 = *a1;
          *a1 = *v4;
        }
        *unsigned int v4 = v9;
      }
LABEL_28:
      __n128 v29 = a1 + 3;
      if (&a1[3] == a2) {
        return 1;
      }
      uint64_t v30 = 0;
      int v31 = 0;
      while (1)
      {
        unint64_t v32 = v29->n128_u64[0];
        if (v29->n128_u64[0] < v4->n128_u64[0]) {
          break;
        }
LABEL_31:
        unsigned int v4 = v29;
        v30 += 16;
        if (++v29 == a2) {
          return 1;
        }
      }
      uint64_t v33 = v29->n128_i64[1];
      uint64_t v34 = v30;
      do
      {
        *(__n128 *)((char *)a1 + v34 + 48) = *(__n128 *)((char *)a1 + v34 + 32);
        if (v34 == -32)
        {
          a1->n128_u64[0] = v32;
          a1->n128_u64[1] = v33;
          if (++v31 != 8) {
            goto LABEL_31;
          }
          return &v29[1] == a2;
        }
        unint64_t v35 = *(unint64_t *)((char *)a1[1].n128_u64 + v34);
        v34 -= 16;
      }
      while (v32 < v35);
      uint64_t v36 = (uint64_t)a1 + v34;
      *(void *)(v36 + 48) = v32;
      *(void *)(v36 + 56) = v33;
      if (++v31 != 8) {
        goto LABEL_31;
      }
      return &v29[1] == a2;
  }
}

__n128 std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*>(__n128 *a1, __n128 *a2, unint64_t *a3, _OWORD *a4, _OWORD *a5, __n128 result)
{
  unint64_t v6 = a2->n128_u64[0];
  unint64_t v7 = *a3;
  if (a2->n128_u64[0] >= a1->n128_u64[0])
  {
    if (v7 < v6)
    {
      uint64_t result = *a2;
      *a2 = *(__n128 *)a3;
      *(__n128 *)a3 = result;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        uint64_t result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  else
  {
    if (v7 < v6)
    {
      uint64_t result = *a1;
      *a1 = *(__n128 *)a3;
LABEL_9:
      *(__n128 *)a3 = result;
      goto LABEL_10;
    }
    uint64_t result = *a1;
    *a1 = *a2;
    *a2 = result;
    if (*a3 < a2->n128_u64[0])
    {
      uint64_t result = *a2;
      *a2 = *(__n128 *)a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(void *)a4 < *a3)
  {
    uint64_t result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < a2->n128_u64[0])
    {
      uint64_t result = *a2;
      *a2 = *(__n128 *)a3;
      *(__n128 *)a3 = result;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        uint64_t result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  if (*(void *)a5 < *(void *)a4)
  {
    uint64_t result = *(__n128 *)a4;
    *a4 = *a5;
    *a5 = result;
    if (*(void *)a4 < *a3)
    {
      uint64_t result = *(__n128 *)a3;
      *(_OWORD *)a3 = *a4;
      *a4 = result;
      if (*a3 < a2->n128_u64[0])
      {
        uint64_t result = *a2;
        *a2 = *(__n128 *)a3;
        *(__n128 *)a3 = result;
        if (a2->n128_u64[0] < a1->n128_u64[0])
        {
          uint64_t result = *a1;
          *a1 = *a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebGPU::Buffer::mapAsync(unsigned int,unsigned long,unsigned long,WTF::CompletionHandler<void ()(WGPUBufferMapAsyncStatus)> &&)::$_0,void,WGPUQueueWorkDoneStatus>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1ECABAB28;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (WebGPU::Buffer *)a1[1];
  a1[1] = 0;
  if (!v4) {
    return a1;
  }
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    return a1;
  }
  WebGPU::Buffer::~Buffer(v4, a2);
  WTF::fastFree(v6, v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::Buffer::mapAsync(unsigned int,unsigned long,unsigned long,WTF::CompletionHandler<void ()(WGPUBufferMapAsyncStatus)> &&)::$_0,void,WGPUQueueWorkDoneStatus>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1ECABAB28;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (WebGPU::Buffer *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (!v4) {
    goto LABEL_6;
  }
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
LABEL_6:
    unint64_t v5 = this;
    return WTF::fastFree(v5, a2);
  }
  WebGPU::Buffer::~Buffer(v4, a2);
  WTF::fastFree(v7, v8);
  unint64_t v5 = this;
  return WTF::fastFree(v5, a2);
}

WTF *WTF::Detail::CallableWrapper<WebGPU::Buffer::mapAsync(unsigned int,unsigned long,unsigned long,WTF::CompletionHandler<void ()(WGPUBufferMapAsyncStatus)> &&)::$_0,void,WGPUQueueWorkDoneStatus>::call(WTF *result, int a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 1);
  if (*(unsigned char *)(v4 + 52) != 2) {
    goto LABEL_53;
  }
  *(unsigned char *)(v4 + 52) = 0;
  uint64_t v5 = *(void *)(v4 + 288);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 - 4);
    uint64_t v7 = v5 + 8 * v6;
    if (*(_DWORD *)(v5 - 12))
    {
      if (!v6)
      {
        uint64_t v10 = 0;
        uint64_t v9 = *(void *)(v4 + 288);
LABEL_15:
        uint64_t v11 = v5 + 8 * v10;
        if (v11 != v9)
        {
LABEL_18:
          while (!*(void *)(*(void *)v9 + 8))
          {
            uint64_t v12 = v9 + 8;
            uint64_t v9 = v7;
            if (v12 != v7)
            {
              uint64_t v9 = v12;
              while ((unint64_t)(*(void *)v9 + 1) <= 1)
              {
                v9 += 8;
                if (v9 == v7)
                {
                  uint64_t v9 = v7;
                  break;
                }
              }
            }
            if (v9 == v11)
            {
              uint64_t v9 = v11;
              goto LABEL_25;
            }
          }
        }
        goto LABEL_25;
      }
      uint64_t v8 = 8 * v6;
      uint64_t v9 = *(void *)(v4 + 288);
      while ((unint64_t)(*(void *)v9 + 1) <= 1)
      {
        v9 += 8;
        v8 -= 8;
        if (!v8)
        {
          uint64_t v9 = v7;
          break;
        }
      }
LABEL_9:
      uint64_t v10 = *(unsigned int *)(v5 - 4);
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v9 = v7;
  uint64_t v7 = v5 + 8 * v6;
  if (v5) {
    goto LABEL_9;
  }
  uint64_t v11 = 0;
  if (v9) {
    goto LABEL_18;
  }
LABEL_25:
  if (v5) {
    v5 += 8 * *(unsigned int *)(v5 - 4);
  }
  if (v9 != v5)
  {
    int v13 = *(_DWORD *)(v4 + 296);
    do
    {
      uint64_t v14 = *(void *)(*(void *)v9 + 8);
      int v15 = *(_DWORD *)(v14 + 72) + 1;
      *(_DWORD *)(v14 + 72) = v15;
      uint64_t v16 = *(void *)(v14 + 56);
      if (v16)
      {
        uint64_t v17 = *(void *)(v16 + 8);
        if (v17) {
          *(_DWORD *)(v17 + 32) = v15;
        }
      }
      uint64_t v18 = v9 + 8;
      uint64_t v19 = v7;
      if (v18 != v7)
      {
        uint64_t v19 = v18;
        while ((unint64_t)(*(void *)v19 + 1) <= 1)
        {
          v19 += 8;
          if (v19 == v7)
          {
            uint64_t v19 = v7;
            break;
          }
        }
      }
      uint64_t v9 = v11;
      if (v19 != v11)
      {
        uint64_t v9 = v19;
        if (!*(void *)(*(void *)v19 + 8))
        {
          while (1)
          {
            uint64_t v20 = v9 + 8;
            uint64_t v9 = v7;
            if (v20 != v7)
            {
              uint64_t v9 = v20;
              while ((unint64_t)(*(void *)v9 + 1) <= 1)
              {
                v9 += 8;
                if (v9 == v7)
                {
                  uint64_t v9 = v7;
                  break;
                }
              }
            }
            if (v9 == v11) {
              break;
            }
            if (*(void *)(*(void *)v9 + 8)) {
              goto LABEL_30;
            }
          }
          uint64_t v9 = v11;
        }
      }
LABEL_30:
      ++v13;
    }
    while (v9 != v5);
    *(_DWORD *)(v4 + 296) = v13;
  }
  uint64_t v21 = *((void *)result + 2);
  uint64_t v22 = *((void *)result + 3) + v21;
  *(void *)(v4 + 56) = v21;
  *(void *)(v4 + 64) = v22;
  long long v25 = (WTF *)v27;
  uint64_t v26 = 8;
  char v28 = 1;
  WTF::Vector<WTF::Range<unsigned long>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)(v4 + 72), (WTF *)&v25);
  *(unsigned char *)(v4 + 216) = v28;
  uint64_t result = v25;
  if (v27 != (unsigned char *)v25 && v25)
  {
    long long v25 = 0;
    LODWORD(v26) = 0;
    uint64_t result = (WTF *)WTF::fastFree(result, v23);
  }
LABEL_53:
  switch(a2)
  {
    case 0:
      uint64_t v24 = *((void *)v3 + 4);
      *((void *)v3 + 4) = 0;
      (*(void (**)(uint64_t, void))(*(void *)v24 + 16))(v24, 0);
      return (WTF *)(*(uint64_t (**)(uint64_t))(*(void *)v24 + 8))(v24);
    case 1:
      goto LABEL_59;
    case 2:
      uint64_t v24 = *((void *)v3 + 4);
      *((void *)v3 + 4) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, 2);
      return (WTF *)(*(uint64_t (**)(uint64_t))(*(void *)v24 + 8))(v24);
    case 3:
      uint64_t v24 = *((void *)v3 + 4);
      *((void *)v3 + 4) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, 3);
      return (WTF *)(*(uint64_t (**)(uint64_t))(*(void *)v24 + 8))(v24);
    default:
      if (a2 == 0x7FFFFFFF)
      {
LABEL_59:
        uint64_t v24 = *((void *)v3 + 4);
        *((void *)v3 + 4) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, 1);
        return (WTF *)(*(uint64_t (**)(uint64_t))(*(void *)v24 + 8))(v24);
      }
      return result;
  }
}

void sub_1824DFDC4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1824DFE08(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11)
{
  if (v11 != a10)
  {
    if (a10) {
      WTF::fastFree(a10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<wgpuBufferMapAsync::$_0,void,WGPUBufferMapAsyncStatus>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 8))(a2, *(void *)(a1 + 16));
}

uint64_t WebGPU::CommandBuffer::CommandBuffer(uint64_t a1, void *a2, atomic_uchar *volatile *a3)
{
  id v5 = a2;
  int v6 = 1;
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  id v7 = v5;
  char v8 = 0;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  atomic_uchar *volatile v9 = *a3;
  atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
  if (v8) {
    MEMORY[0x18530AEA0](v9);
  }
  ++*((void *)v9 + 1);
  atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  }
  *(void *)(a1 + 40) = a3;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 55) = 0;

  return a1;
}

void sub_1824DFF04(_Unwind_Exception *a1)
{
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v3, v5);
  _Unwind_Resume(a1);
}

uint64_t WebGPU::CommandBuffer::CommandBuffer(uint64_t a1, atomic_uchar *volatile *a2)
{
  char v4 = 0;
  int v5 = 1;
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  atomic_uchar *volatile v6 = *a2;
  atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x18530AEA0](v6);
  }
  ++*((void *)v6 + 1);
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 55) = 0;
  return a1;
}

void sub_1824DFFC8(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void *)(v1 + 8);
  if (!v5)
  {
    *uint64_t v2 = 0;
    _Unwind_Resume(a1);
  }
  *(void *)(v5 + 8) = 0;
  atomic_uchar *volatile v6 = *v2;
  *uint64_t v2 = 0;
  if (v6)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v4);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void WebGPU::CommandBuffer::~CommandBuffer(WebGPU::CommandBuffer *this)
{
  uint64_t v2 = (atomic_uchar *volatile **)((char *)this + 40);
  WebGPU::Queue::removeMTLCommandBuffer(*(void *)(*((void *)this + 5) + 16), *((void **)this + 2));

  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref(v2, v3);
  uint64_t v5 = *((void *)this + 1);
  if (v5)
  {
    *(void *)(v5 + 8) = 0;
    atomic_uchar *volatile v6 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v6)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v4);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

void sub_1824E00E4(_Unwind_Exception *a1)
{
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref(v2, v4);
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase((void *)(v1 + 8), v5);
  _Unwind_Resume(a1);
}

void WebGPU::CommandBuffer::makeInvalid(WebGPU::CommandBuffer *this, NSString *a2)
{
  atomic_uchar *volatile v6 = a2;
  char v4 = (void *)*((void *)this + 2);
  if (v4 && (unint64_t)[v4 status] <= 1)
  {
    objc_storeStrong((id *)this + 6, a2);
    WebGPU::Queue::removeMTLCommandBuffer(*(void *)(*((void *)this + 5) + 16), *((void **)this + 2));
    uint64_t v5 = (void *)*((void *)this + 2);
    *((void *)this + 2) = 0;
  }
}

void sub_1824E019C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WebGPU::CommandBuffer::makeInvalidDueToCommit(id *this, NSString *a2)
{
  char v4 = a2;
  objc_storeStrong(this + 3, this[2]);
  id v5 = this[2];
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3321888768;
  unsigned char v12[2] = ___ZN6WebGPU13CommandBuffer22makeInvalidDueToCommitEP8NSString_block_invoke;
  v12[3] = &__block_descriptor_40_ea8_32c69_ZTSKZN6WebGPU13CommandBuffer22makeInvalidDueToCommitEP8NSStringE3__0_e28_v16__0___MTLCommandBuffer__8l;
  *(_DWORD *)this += 2;
  int v13 = (WebGPU::CommandBuffer *)this;
  objc_msgSend(v5, "addCompletedHandler:", v12, this);
  if (*(_DWORD *)this == 1)
  {
    WebGPU::CommandBuffer::~CommandBuffer((WebGPU::CommandBuffer *)this);
    WTF::fastFree(v6, v7);
  }
  else
  {
    --*(_DWORD *)this;
  }
  objc_storeStrong(this + 6, a2);
  id v8 = this[2];
  this[2] = 0;

  atomic_uchar *volatile v9 = v13;
  int v13 = 0;
  if (!v9) {
    goto LABEL_7;
  }
  if (*(_DWORD *)v9 != 1)
  {
    --*(_DWORD *)v9;
LABEL_7:

    return;
  }
  WebGPU::CommandBuffer::~CommandBuffer(v9);
  WTF::fastFree(v10, v11);
}

void sub_1824E02D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WebGPU::CommandBuffer *a9)
{
  WebGPU::CommandBuffer::makeInvalidDueToCommit(NSString *)::$_0::~$_0(v10);
  WebGPU::CommandBuffer::makeInvalidDueToCommit(NSString *)::$_0::~$_0(&a9);

  _Unwind_Resume(a1);
}

void ___ZN6WebGPU13CommandBuffer22makeInvalidDueToCommitEP8NSString_block_invoke(uint64_t a1)
{
  WTF::BinarySemaphore::signal((WTF::BinarySemaphore *)(*(void *)(a1 + 32) + 56));
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 24);
  *(void *)(v2 + 24) = 0;
}

uint64_t __copy_helper_block_ea8_32c69_ZTSKZN6WebGPU13CommandBuffer22makeInvalidDueToCommitEP8NSStringE3__0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)(a2 + 32);
  ++*v2;
  *(void *)(result + 32) = v2;
  return result;
}

WebGPU::CommandBuffer *__destroy_helper_block_ea8_32c69_ZTSKZN6WebGPU13CommandBuffer22makeInvalidDueToCommitEP8NSStringE3__0(uint64_t a1)
{
  uint64_t result = *(WebGPU::CommandBuffer **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebGPU::CommandBuffer::~CommandBuffer(result);
      return (WebGPU::CommandBuffer *)WTF::fastFree(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WebGPU::CommandBuffer **WebGPU::CommandBuffer::makeInvalidDueToCommit(NSString *)::$_0::~$_0(WebGPU::CommandBuffer **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (!v2) {
    return a1;
  }
  if (*(_DWORD *)v2 != 1)
  {
    --*(_DWORD *)v2;
    return a1;
  }
  WebGPU::CommandBuffer::~CommandBuffer(v2);
  WTF::fastFree(v4, v5);
  return a1;
}

_DWORD *wgpuCommandBufferReference(_DWORD *result)
{
  return result;
}

WebGPU::CommandBuffer *wgpuCommandBufferRelease(WebGPU::CommandBuffer *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebGPU::CommandBuffer::~CommandBuffer(result);
    return (WebGPU::CommandBuffer *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_DWORD *wgpuCommandBufferSetLabel(uint64_t a1, char *__s)
{
  if (__s) {
    strlen(__s);
  }
  WTF::String::fromUTF8();
  if (v5) {
    uint64_t v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v3 = &stru_1ECABF938;
  }
  [*(id *)(a1 + 16) setLabel:v3];

  uint64_t result = v5;
  if (v5)
  {
    if (*v5 == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *v5 -= 2;
    }
  }
  return result;
}

void sub_1824E04F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1824E05BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebGPU::Device::createCommandEncoder(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  if (*a2 || (atomic_uchar *volatile v6 = *(void **)(a1 + 8)) == 0)
  {
    uint64_t v5 = WTF::fastMalloc((WTF *)0x58);
    WebGPU::CommandEncoder::CommandEncoder(v5, (atomic_uchar *volatile *)a1);
    *a3 = v5;
  }
  else
  {
    id v8 = v6;
    atomic_uchar *volatile v9 = v8;
    if (WebGPU::GPUFrameCapture::enabled)
    {
      WebGPU::GPUFrameCapture::captureFrame(v8);
      WebGPU::GPUFrameCapture::enabled = 0;
    }

    uint64_t v10 = (MTLCommandBufferDescriptor *)objc_opt_new();
    [(MTLCommandBufferDescriptor *)v10 setErrorOptions:1];
    uint64_t v11 = WebGPU::Queue::commandBufferWithDescriptor(*(WebGPU::Queue **)(a1 + 16), v10);
    if (v11)
    {
      uint64_t v12 = (const char *)a2[1];
      if (v12) {
        strlen(v12);
      }
      WTF::String::fromUTF8();
      if (v23) {
        uint64_t v14 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v14 = &stru_1ECABF938;
      }
      [v11 setLabel:v14];

      if (v23)
      {
        if (*v23 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v23 -= 2;
        }
      }
      id v15 = v11;
      uint64_t v16 = WTF::fastMalloc((WTF *)0x58);
      id v17 = v15;
      int v18 = 1;
      *(_DWORD *)uint64_t v16 = 1;
      *(unsigned char *)(v16 + 4) = 0;
      *(void *)(v16 + 8) = 0;
      id v19 = v17;
      char v20 = 0;
      *(void *)(v16 + 16) = v19;
      *(_OWORD *)(v16 + 24) = 0u;
      *(_OWORD *)(v16 + 40) = 0u;
      *(_OWORD *)(v16 + 56) = 0u;
      *(void *)(v16 + 69) = 0;
      atomic_uchar *volatile v21 = *(atomic_uchar *volatile *)a1;
      atomic_compare_exchange_strong_explicit(*(atomic_uchar *volatile *)a1, (unsigned __int8 *)&v20, 1u, memory_order_acquire, memory_order_acquire);
      if (v20)
      {
        uint64_t v22 = v21;
        MEMORY[0x18530AEA0]();
        atomic_uchar *volatile v21 = v22;
      }
      ++*((void *)v21 + 1);
      atomic_compare_exchange_strong_explicit(v21, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
      if (v18 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v21);
      }
      *(void *)(v16 + 80) = a1;

      *a3 = v16;
    }
    else
    {
      uint64_t v13 = WTF::fastMalloc((WTF *)0x58);
      WebGPU::CommandEncoder::CommandEncoder(v13, (atomic_uchar *volatile *)a1);
      *a3 = v13;
    }
  }
}

void sub_1824E0824(_Unwind_Exception *a1)
{
  atomic_uchar *volatile v9 = *(unsigned int **)(v4 + 56);
  *(void *)(v4 + 56) = 0;
  if (v9)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v8);
    }
  }

  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v6, v10);
  WTF::fastFree((WTF *)v4, v11);

  _Unwind_Resume(a1);
}

void sub_1824E08A0(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v4, a2);

  _Unwind_Resume(a1);
}

void sub_1824E08BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a10 -= 2;

    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1824E08ACLL);
}

void sub_1824E0924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824E0934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824E0948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824E0958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824E0968(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebGPU::fromAPI(WebGPU *this, const char *a2)
{
  if (this)
  {
    strlen((const char *)this);
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return WTF::String::fromUTF8();
}

__CFString *WTF::String::operator NSString *(void *a1)
{
  if (*a1)
  {
    uint64_t v1 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else
  {
    uint64_t v1 = &stru_1ECABF938;
  }
  return v1;
}

uint64_t WebGPU::CommandEncoder::CommandEncoder(uint64_t a1, atomic_uchar *volatile *a2)
{
  char v4 = 0;
  int v5 = 1;
  *(_DWORD *)a1 = 1;
  *(unsigned char *)(a1 + 4) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 69) = 0;
  atomic_uchar *volatile v6 = *a2;
  atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x18530AEA0](v6);
  }
  ++*((void *)v6 + 1);
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  *(void *)(a1 + 80) = a2;
  return a1;
}

void sub_1824E0AF0(_Unwind_Exception *a1)
{
  int v5 = *(unsigned int **)(v1 + 56);
  *(void *)(v1 + 56) = 0;
  if (v5)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }

  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v2, v6);
  _Unwind_Resume(a1);
}

void WebGPU::CommandEncoder::~CommandEncoder(WebGPU::CommandEncoder *this)
{
  WebGPU::CommandEncoder::finalizeBlitCommandEncoder((id *)this);
  WebGPU::Queue::removeMTLCommandBuffer(*(void *)(*((void *)this + 10) + 16), *((void **)this + 2));
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)this + 10, v2);

  char v4 = (unsigned int *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, v3);
  }

  uint64_t v6 = *((void *)this + 1);
  if (v6)
  {
    *(void *)(v6 + 8) = 0;
    id v7 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v7)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v5);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

void sub_1824E0C3C(_Unwind_Exception *a1, void *a2)
{
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)(v2 + 80), a2);

  int v5 = *(unsigned int **)(v2 + 56);
  *(void *)(v2 + 56) = 0;
  if (v5)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }

  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase((void *)(v2 + 8), v6);
  _Unwind_Resume(a1);
}

void WebGPU::CommandEncoder::finalizeBlitCommandEncoder(id *this)
{
  id v2 = this[4];
  uint64_t v3 = *((void *)this[10] + 2);
  id v4 = this[2];
  if (v4)
  {
    id v5 = [*(id *)(v3 + 96) objectForKey:v4];

    if (v5 != v2) {
      return;
    }
  }
  else
  {

    if (v2) {
      return;
    }
  }
  WebGPU::CommandEncoder::endEncoding((uint64_t)this, this[4]);
  id v6 = this[4];
  this[4] = 0;

  id v7 = this[5];
  this[5] = 0;

  uint64_t v8 = *((void *)this[10] + 2);
  id v9 = this[2];
  WebGPU::Queue::setEncoderForBuffer(v8, v9, 0);
}

void sub_1824E0D88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebGPU::CommandEncoder::ensureBlitCommandEncoder(id *this)
{
  uint64_t v2 = [this[2] status];
  id v3 = this[4];
  if (v2)
  {
    this[4] = 0;

    goto LABEL_3;
  }
  if (!v3) {
    goto LABEL_10;
  }
  id v6 = v3;
  uint64_t v7 = *((void *)this[10] + 2);
  id v8 = this[2];
  if (!v8)
  {

    if (v6) {
      goto LABEL_9;
    }
LABEL_15:
    id v4 = this[4];
    return v4;
  }
  id v9 = [*(id *)(v7 + 96) objectForKey:v8];

  if (v9 == v6) {
    goto LABEL_15;
  }
LABEL_9:
  WebGPU::CommandEncoder::finalizeBlitCommandEncoder(this);
LABEL_10:
  if (!*((void *)this[10] + 1))
  {
LABEL_3:
    id v4 = 0;
    return v4;
  }
  uint64_t v10 = objc_opt_new();
  uint64_t v11 = [this[2] blitCommandEncoderWithDescriptor:v10];
  id v12 = this[4];
  this[4] = (id)v11;

  id v13 = this[4];
  id v14 = v13;
  objc_storeStrong(this + 5, v13);
  WebGPU::Queue::setEncoderForBuffer(*((void *)this[10] + 2), this[2], v14);

  id v15 = this[4];
  id v4 = v15;
  return v4;
}

void sub_1824E0F24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824E0F38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824E0F4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL WebGPU::CommandEncoder::encoderIsCurrent(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 80) + 16);
  id v5 = *(id *)(a1 + 16);
  if (v5)
  {
    id v6 = [*(id *)(v4 + 96) objectForKey:v5];
  }
  else
  {
    id v6 = 0;
  }

  return v6 == v3;
}

void sub_1824E0FD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebGPU::CommandEncoder::endEncoding(uint64_t a1, void *a2)
{
  id v10 = a2;
  uint64_t v3 = *(void *)(*(void *)(a1 + 80) + 16);
  id v4 = *(id *)(a1 + 16);
  if (v4)
  {
    id v5 = [*(id *)(v3 + 96) objectForKey:v4];

    uint64_t v6 = *(void *)(*(void *)(a1 + 80) + 16);
    if (v5 != v10) {
      goto LABEL_3;
    }
LABEL_6:
    WebGPU::Queue::endEncoding(v6, *(void **)(a1 + 40), *(void **)(a1 + 16));
    id v8 = *(void **)(a1 + 40);
    *(void *)(a1 + 40) = 0;

    WebGPU::Queue::setEncoderForBuffer(*(void *)(*(void *)(a1 + 80) + 16), *(void **)(a1 + 16), 0);
    id v9 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = 0;

    if (!*(void *)(a1 + 64)) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  id v5 = 0;

  uint64_t v6 = *(void *)(*(void *)(a1 + 80) + 16);
  if (!v10) {
    goto LABEL_6;
  }
LABEL_3:
  WebGPU::Queue::endEncoding(v6, v5, *(void **)(a1 + 16));
  uint64_t v7 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;

  WebGPU::Queue::setEncoderForBuffer(*(void *)(*(void *)(a1 + 80) + 16), *(void **)(a1 + 16), 0);
  if (*(void *)(a1 + 64)) {
LABEL_7:
  }
    WebGPU::CommandEncoder::discardCommandBuffer((WebGPU::CommandEncoder *)a1);
LABEL_8:
}

void sub_1824E111C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1824E1134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1824E114C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1824E1168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WebGPU::CommandEncoder::makeInvalid(WebGPU::CommandEncoder *this, NSString *a2)
{
  id v10 = a2;
  id v4 = (void *)*((void *)this + 2);
  if (v4)
  {
    if ((unint64_t)[v4 status] <= 1)
    {
      WebGPU::CommandEncoder::endEncoding((uint64_t)this, *((void **)this + 5));
      id v5 = (void *)*((void *)this + 4);
      *((void *)this + 4) = 0;

      uint64_t v6 = (void *)*((void *)this + 5);
      *((void *)this + 5) = 0;

      WebGPU::Queue::removeMTLCommandBuffer(*(void *)(*((void *)this + 10) + 16), *((void **)this + 2));
      uint64_t v7 = (void *)*((void *)this + 2);
      *((void *)this + 2) = 0;

      objc_storeStrong((id *)this + 8, a2);
      uint64_t v8 = *((void *)this + 7);
      if (v8)
      {
        id v9 = *(WebGPU::CommandBuffer **)(v8 + 8);
        if (v9) {
          WebGPU::CommandBuffer::makeInvalid(v9, v10);
        }
      }
    }
  }
}

void sub_1824E1240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WebGPU::CommandEncoder::discardCommandBuffer(WebGPU::CommandEncoder *this)
{
  uint64_t v2 = (void *)*((void *)this + 2);
  if (!v2)
  {
LABEL_4:
    *((void *)this + 2) = 0;
    goto LABEL_6;
  }
  if ((unint64_t)[v2 status] >= 2)
  {
    uint64_t v2 = (void *)*((void *)this + 2);
    goto LABEL_4;
  }
  uint64_t v3 = *(void *)(*((void *)this + 10) + 16);
  id v4 = *((id *)this + 2);
  if (v4)
  {
    id v6 = [*(id *)(v3 + 96) objectForKey:v4];
  }
  else
  {
    id v6 = 0;
  }

  WebGPU::Queue::endEncoding(*(void *)(*((void *)this + 10) + 16), v6, *((void **)this + 2));
  WebGPU::Queue::removeMTLCommandBuffer(*(void *)(*((void *)this + 10) + 16), *((void **)this + 2));
  id v5 = (void *)*((void *)this + 2);
  *((void *)this + 2) = 0;

  uint64_t v2 = v6;
LABEL_6:
}

void sub_1824E1340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(a1);
}

void sub_1824E1358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WebGPU::CommandEncoder::runClearEncoder(uint64_t a1, void *a2, void *a3, int a4, int a5, uint64_t a6, void *a7, float a8)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  id v12 = a2;
  id v68 = a3;
  id v67 = a7;
  unint64_t v64 = v12;
  if ([v12 count] || (a4 & 1) != 0 || (a5 & 1) != 0)
  {
    if ((a4 & 1) == 0 && (a5 & 1) == 0)
    {

      id v68 = 0;
    }
    id v62 = *(id *)(*(void *)(a1 + 80) + 8);
    if (!v62)
    {
      WebGPU::CommandEncoder::endEncoding(a1, v67);
LABEL_55:

      goto LABEL_56;
    }
    id v60 = v67;
    if (!v60)
    {
      id v13 = objc_opt_new();
      id v14 = v13;
      if (a4)
      {
        id v15 = [v13 depthAttachment];
        [v15 setLoadAction:2];

        uint64_t v16 = [v14 depthAttachment];
        [v16 setStoreAction:1];

        id v17 = [v14 depthAttachment];
        [v17 setClearDepth:a8];

        int v18 = [v14 depthAttachment];
        [v18 setTexture:v68];
      }
      if (a5)
      {
        id v19 = [v14 stencilAttachment];
        [v19 setLoadAction:2];

        char v20 = [v14 stencilAttachment];
        [v20 setStoreAction:1];

        atomic_uchar *volatile v21 = [v14 stencilAttachment];
        [v21 setClearStencil:a6];

        uint64_t v22 = [v14 stencilAttachment];
        [v22 setTexture:v68];
      }
      if (![v64 count])
      {
        if (!v68)
        {
          __break(0xC471u);
          JUMPOUT(0x1824E1BB4);
        }
        objc_msgSend(v14, "setDefaultRasterSampleCount:", objc_msgSend(v68, "sampleCount"));
        objc_msgSend(v14, "setRenderTargetWidth:", objc_msgSend(v68, "width"));
        objc_msgSend(v14, "setRenderTargetHeight:", objc_msgSend(v68, "height"));
      }
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      id v23 = v64;
      uint64_t v24 = [v23 countByEnumeratingWithState:&v69 objects:v79 count:16];
      if (v24)
      {
        uint64_t v25 = *(void *)v70;
        do
        {
          for (uint64_t i = 0; i != v24; ++i)
          {
            if (*(void *)v70 != v25) {
              objc_enumerationMutation(v23);
            }
            long long v27 = *(void **)(*((void *)&v69 + 1) + 8 * i);
            int v28 = [v27 intValue];
            __n128 v29 = [v23 objectForKey:v27];
            uint64_t v30 = [v29 texture];
            int v31 = [v14 colorAttachments];
            unint64_t v32 = [v31 objectAtIndexedSubscript:v28];

            [v32 setLoadAction:2];
            [v32 setStoreAction:1];
            [v29 clearColor];
            objc_msgSend(v32, "setClearColor:");
            [v32 setTexture:v30];
            [v32 setLevel:0];
            [v32 setSlice:0];
            objc_msgSend(v32, "setDepthPlane:", objc_msgSend(v29, "depthPlane"));
          }
          uint64_t v24 = [v23 countByEnumeratingWithState:&v69 objects:v79 count:16];
        }
        while (v24);
      }

      uint64_t v33 = [*(id *)(a1 + 16) renderCommandEncoderWithDescriptor:v14];
      id v60 = v33;
      objc_storeStrong((id *)(a1 + 40), v33);
      WebGPU::Queue::setEncoderForBuffer(*(void *)(*(void *)(a1 + 80) + 16), *(void **)(a1 + 16), v60);
    }
    id v34 = v64;
    id v59 = v68;
    id v61 = v62;
    unint64_t v35 = objc_opt_new();
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    id v36 = v34;
    uint64_t v37 = [v36 countByEnumeratingWithState:&v75 objects:v80 count:16];
    if (v37)
    {
      uint64_t v38 = *(void *)v76;
      do
      {
        for (uint64_t j = 0; j != v37; ++j)
        {
          if (*(void *)v76 != v38) {
            objc_enumerationMutation(v36);
          }
          long long v40 = *(void **)(*((void *)&v75 + 1) + 8 * j);
          int v41 = [v40 intValue];
          unint64_t v42 = [v36 objectForKey:v40];
          uint64_t v43 = [v42 texture];
          uint64_t v44 = [v43 sampleCount];
          long long v45 = [v35 colorAttachments];
          unsigned int v46 = [v45 objectAtIndexedSubscript:v41];

          objc_msgSend(v46, "setPixelFormat:", objc_msgSend(v43, "pixelFormat"));
          [v46 setBlendingEnabled:0];
        }
        uint64_t v37 = [v36 countByEnumeratingWithState:&v75 objects:v80 count:16];
      }
      while (v37);
    }
    else
    {
      uint64_t v44 = 0;
    }

    if (v59)
    {
      unsigned int v47 = objc_opt_new();
      id v48 = v59;
      uint64_t v44 = [v48 sampleCount];
      if (a4 && (([v48 pixelFormat] - 253) & 0xFFFFFFFFFFFFFFF7) != 0) {
        uint64_t v49 = [v48 pixelFormat];
      }
      else {
        uint64_t v49 = 0;
      }
      [v35 setDepthAttachmentPixelFormat:v49];
      [v47 setDepthWriteEnabled:0];
      if (a5
        && ([v48 pixelFormat] == 260
         || [v48 pixelFormat] == 253
         || [v48 pixelFormat] == 261))
      {
        objc_msgSend(v35, "setStencilAttachmentPixelFormat:", objc_msgSend(v48, "pixelFormat"));
      }

      if (WebGPU::createSimplePso(NSMutableDictionary<NSNumber *,TextureAndClearColor *> *,objc_object  {objcproto10MTLTexture}*,BOOL,BOOL,objc_object  {objcproto9MTLDevice}*)::function) {
        goto LABEL_46;
      }
    }
    else
    {
      unsigned int v47 = 0;
      if (WebGPU::createSimplePso(NSMutableDictionary<NSNumber *,TextureAndClearColor *> *,objc_object  {objcproto10MTLTexture}*,BOOL,BOOL,objc_object  {objcproto9MTLDevice}*)::function)
      {
LABEL_46:
        id v50 = 0;
        goto LABEL_49;
      }
    }
    long long v51 = objc_opt_new();
    [v51 setFastMathEnabled:1];
    id v74 = 0;
    unint64_t v52 = objc_msgSend(v61, "newLibraryWithSource:options:error:", @"[[vertex]] float4 vs() { return (float4)0; }",
                    v51,
                    &v74);
    id v50 = v74;
    uint64_t v53 = [v52 newFunctionWithName:@"vs"];
    unint64_t v54 = (void *)WebGPU::createSimplePso(NSMutableDictionary<NSNumber *,TextureAndClearColor *> *,objc_object  {objcproto10MTLTexture}*,BOOL,BOOL,objc_object  {objcproto9MTLDevice}*)::function;
    WebGPU::createSimplePso(NSMutableDictionary<NSNumber *,TextureAndClearColor *> *,objc_object  {objcproto10MTLTexture}*,BOOL,BOOL,objc_object  {objcproto9MTLDevice}*)::function = v53;

LABEL_49:
    objc_msgSend(v35, "setVertexFunction:");
    [v35 setFragmentFunction:0];
    if (!v44)
    {
      __break(0xC471u);
      JUMPOUT(0x1824E1B94);
    }
    [v35 setRasterSampleCount:v44];
    [v35 setInputPrimitiveTopology:1];
    id v73 = v50;
    BOOL v55 = (void *)[v61 newRenderPipelineStateWithDescriptor:v35 error:&v73];
    id v56 = v73;

    if (v47)
    {
      unint64_t v57 = (void *)[v61 newDepthStencilStateWithDescriptor:v47];
      if (!v56)
      {
LABEL_52:

        [v60 setRenderPipelineState:v55];
        if (v57) {
          [v60 setDepthStencilState:v57];
        }
        [v60 setCullMode:0];
        [v60 drawPrimitives:0 vertexStart:0 vertexCount:1 instanceCount:1 baseInstance:0];
        WebGPU::Queue::endEncoding(*(void *)(*(void *)(a1 + 80) + 16), v60, *(void **)(a1 + 16));
        uint64_t v58 = *(void **)(a1 + 40);
        *(void *)(a1 + 40) = 0;

        WebGPU::Queue::setEncoderForBuffer(*(void *)(*(void *)(a1 + 80) + 16), *(void **)(a1 + 16), 0);
        goto LABEL_55;
      }
    }
    else
    {
      unint64_t v57 = 0;
      if (!v56) {
        goto LABEL_52;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x1824E1B74);
  }
  WebGPU::CommandEncoder::endEncoding(a1, v67);
LABEL_56:
}

void sub_1824E1BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void WebGPU::CommandEncoder::copyBufferToTexture(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4 = a2 + 8;
  if (*(void *)a2) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = *(void *)(a2 + 8) == 0;
  }
  if (!v5 || *(void *)a3 != 0) {
    return;
  }
  int v10 = *(unsigned __int8 *)(a1 + 4);
  uint64_t v8 = (WebGPU::CommandsMixin *)(a1 + 4);
  int v9 = v10;
  if ((v10 - 3) >= 0xFFFFFFFE)
  {
    if (v9 == 2)
    {
      uint64_t v21 = *(void *)(a1 + 80);
      uint64_t v22 = NSString;
      id v23 = WebGPU::CommandsMixin::encoderStateName(v8);
      uint64_t v24 = [v22 stringWithFormat:@"%s: encoder state is %@", "void WebGPU::CommandEncoder::copyBufferToTexture(const WGPUImageCopyBuffer &, const WGPUImageCopyTexture &, const WGPUExtent3D &)", v23];
      MEMORY[0x18530AF50](&v152, v24);
      uint64_t v25 = *(void *)(v21 + 32);
      uint64_t v26 = 32 * *(unsigned int *)(v21 + 44);
      uint64_t v27 = v25 + v26;
      while (v26)
      {
        int v28 = *(_DWORD *)(v27 - 8);
        v27 -= 32;
        v26 -= 32;
        if (!v28)
        {
          uint64_t v29 = v25 + v26;
          if (!*(unsigned char *)(v29 + 16))
          {
            uint64_t v30 = v152;
            long long v152 = 0;
            *(_DWORD *)uint64_t v29 = 1;
            *(void *)(v29 + 8) = v30;
            *(unsigned char *)(v29 + 16) = 1;
          }
          goto LABEL_35;
        }
      }
      uint64_t v32 = *(void *)(v21 + 24);
      if (v32)
      {
        (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v32 + 16))(v32, 1, &v152);
        uint64_t v33 = *(void *)(v21 + 24);
        *(void *)(v21 + 24) = 0;
        if (v33) {
          (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
        }
      }
LABEL_35:
      id v34 = v152;
      long long v152 = 0;
      if (v34)
      {
        if (*v34 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v34 -= 2;
        }
      }
    }
    else
    {
      if (*(void *)(a1 + 64)) {
        int v31 = *(__CFString **)(a1 + 64);
      }
      else {
        int v31 = @"Encoder state is locked";
      }
      WebGPU::CommandEncoder::makeInvalid((WebGPU::CommandEncoder *)a1, &v31->isa);
    }
    return;
  }
  uint64_t v14 = *(void *)(a3 + 8);
  uint64_t v15 = *(void *)(a2 + 32);
  int v16 = *(unsigned __int8 *)(v15 + 52);
  if (v16 != 4 && !*(void *)(v15 + 16)
    || (uint64_t v17 = *(void *)(v15 + 280), !*(void *)(v17 + 8))
    || v17 != *(void *)(a1 + 80))
  {
    int v18 = @"buffer is not valid";
LABEL_15:
    id v19 = NSString;
    goto LABEL_16;
  }
  if ((v16 - 3) > 1)
  {
    int v18 = @"buffer state != Unmapped";
    goto LABEL_15;
  }
  if (*(_DWORD *)(a2 + 24) != -1 && *(_DWORD *)(a2 + 24))
  {
    int v18 = @"imageCopyBuffer.layout.bytesPerRow is not a multiple of 256";
    goto LABEL_15;
  }
  if ((*(unsigned char *)(v15 + 48) & 4) == 0)
  {
    id v19 = NSString;
    int v18 = @"source usage does not contain CopySrc";
    goto LABEL_16;
  }
  if (!*(unsigned char *)(v14 + 104) && !*(void *)(v14 + 16)
    || (uint64_t v35 = *(void *)(v14 + 72), v35 != v17)
    || !*(void *)(v35 + 8))
  {
    id v19 = NSString;
    int v18 = @"destination texture is not valid to use with this GPUCommandEncoder";
    goto LABEL_16;
  }
  uint64_t v36 = WebGPU::Texture::errorValidatingImageCopyTexture(a3, a4);
  if (v36) {
    goto LABEL_52;
  }
  if ((*(unsigned char *)(v14 + 52) & 2) == 0)
  {
    id v19 = NSString;
    int v18 = @"destination usage does not contain CopyDst";
    goto LABEL_16;
  }
  if (*(_DWORD *)(v14 + 40) != 1)
  {
    id v19 = NSString;
    int v18 = @"destination sample count is not one";
    goto LABEL_16;
  }
  uint64_t v101 = *(unsigned int *)(v14 + 48);
  if ((v101 - 38) <= 5)
  {
    int v102 = *(_DWORD *)(a3 + 32);
    if ((WebGPU::Texture::refersToSingleAspect(*(_DWORD *)(v14 + 48), v102) & 1) == 0)
    {
      id v19 = NSString;
      int v18 = @"destination aspect refers to more than one asepct";
      goto LABEL_16;
    }
    if ((v101 - 38) >= 2 && (v101 != 41 && v101 != 43 || v102 != 1))
    {
      id v19 = NSString;
      int v18 = @"destination is not valid depthStencilCopyDestination";
      goto LABEL_16;
    }
    uint64_t v101 = WebGPU::Texture::aspectSpecificFormat(v101, v102);
  }
  uint64_t v36 = WebGPU::Texture::errorValidatingTextureCopyRange(a3, a4);
  if (v36)
  {
LABEL_52:
    uint64_t v37 = (void *)v36;
    __n128 v136 = [NSString stringWithFormat:@"GPUCommandEncoder.copyBufferToTexture: %@", v36];

    char v20 = v136;
    if (v136) {
      goto LABEL_17;
    }
    goto LABEL_53;
  }
  uint64_t v117 = *(unsigned int *)(v14 + 48);
  if ((v117 - 38) >= 6)
  {
    WebGPU::Texture::texelBlockSize(v117, (int *)&v152);
    if (*(void *)(a2 + 16) % (unint64_t)v152)
    {
      id v19 = NSString;
      int v18 = @"source.layout.offset is not a multiple of texelBlockSize";
      goto LABEL_16;
    }
    goto LABEL_212;
  }
  if ((*(unsigned char *)(a2 + 16) & 3) == 0)
  {
LABEL_212:
    if (WebGPU::Texture::validateLinearTextureData(v4, *(void *)(*(void *)(a2 + 32) + 40), v101, *(void *)a4, a4[2]))
    {
      goto LABEL_53;
    }
  }
  id v19 = NSString;
  int v18 = @"source.layout.offset is not a multiple of four for depth stencil format";
LABEL_16:
  char v20 = [v19 stringWithFormat:@"GPUCommandEncoder.copyBufferToTexture: %@", v18];
  if (v20)
  {
LABEL_17:
    __n128 v135 = v20;
    WebGPU::CommandEncoder::makeInvalid((WebGPU::CommandEncoder *)a1, v20);

    return;
  }
LABEL_53:
  uint64_t v38 = *(void *)(a2 + 32);
  WebGPU::Buffer::setCommandEncoder((WebGPU::Buffer *)v38, (WebGPU::CommandEncoder *)a1);
  WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>(v14 + 112, a1, (uint64_t)&v152);
  if (!*(unsigned char *)(v14 + 105))
  {
    if (*(unsigned char *)(v14 + 104))
    {
      *(unsigned char *)(a1 + 76) = 1;
      uint64_t v48 = *(void *)(a1 + 56);
      if (v48)
      {
        uint64_t v49 = *(WebGPU::CommandBuffer **)(v48 + 8);
        if (v49) {
          WebGPU::CommandBuffer::makeInvalid(v49, *(NSString **)(a1 + 64));
        }
      }
    }
  }
  if ((*a4 || a4[1] || a4[2]) && *(unsigned char *)(v38 + 52) != 4 && !*(unsigned char *)(v14 + 104))
  {
    id v39 = WebGPU::CommandEncoder::ensureBlitCommandEncoder((id *)a1);
    uint64_t v40 = *(unsigned int *)(a2 + 24);
    id v41 = *(id *)(v38 + 16);
    if (!v41)
    {
      __break(0xC471u);
      JUMPOUT(0x1824E2998);
    }
    unint64_t v42 = v41;
    if (v40 == -1) {
      uint64_t v40 = [v41 length];
    }
    int v43 = *(_DWORD *)(a3 + 32);
    uint64_t v44 = WebGPU::Texture::aspectSpecificFormat(*(unsigned int *)(v14 + 48), v43);
    unsigned int v45 = v44;
    WebGPU::Texture::texelBlockSize(v44, (int *)v157);
    int v46 = *(_DWORD *)(v14 + 44);
    unsigned int v125 = v45;
    if ((v46 - 1) >= 2)
    {
      if (v46) {
        goto LABEL_73;
      }
      unint64_t v47 = v157[0] * (unint64_t)*(unsigned int *)(*(void *)(a1 + 80) + 88);
      if ((v47 & 0xFFFFFFFF00000000) != 0) {
        goto LABEL_73;
      }
    }
    else
    {
      unint64_t v47 = v157[0] * (unint64_t)*(unsigned int *)(*(void *)(a1 + 80) + 92);
      if ((v47 & 0xFFFFFFFF00000000) != 0)
      {
LABEL_218:
        __break(0xC471u);
        JUMPOUT(0x1824E2900);
      }
    }
    if (v47 >= v40) {
      uint64_t v40 = v40;
    }
    else {
      uint64_t v40 = v47;
    }
LABEL_73:
    switch(v43)
    {
      case 0x7FFFFFFF:
        goto LABEL_139;
      case 2:
        uint64_t v50 = 1;
        break;
      case 1:
        uint64_t v50 = 2;
        break;
      default:
        uint64_t v50 = 0;
        break;
    }
    unint64_t v51 = WebGPU::Texture::logicalMiplevelSpecificTextureExtent(*(uint32x2_t **)(a3 + 8), *(_DWORD *)(a3 + 16));
    unsigned int v53 = v52;
    unsigned int v54 = *(_DWORD *)(a3 + 28);
    unsigned int v55 = v52 - v54;
    if (v52 - v54 >= a4[2]) {
      unsigned int v55 = a4[2];
    }
    unint64_t v56 = HIDWORD(v51);
    if (v52 >= v54) {
      uint64_t v57 = v55;
    }
    else {
      uint64_t v57 = 0;
    }
    unsigned int v59 = *(_DWORD *)(a3 + 20);
    unsigned int v58 = *(_DWORD *)(a3 + 24);
    LODWORD(v60) = HIDWORD(v51) - v58;
    if (HIDWORD(v51) - v58 >= a4[1]) {
      LODWORD(v60) = a4[1];
    }
    if (HIDWORD(v51) >= v58) {
      uint64_t v60 = v60;
    }
    else {
      uint64_t v60 = 0;
    }
    LODWORD(v61) = v51 - v59;
    if (v51 - v59 >= *a4) {
      LODWORD(v61) = *a4;
    }
    int v131 = v51;
    if (v51 >= v59) {
      unint64_t v61 = v61;
    }
    else {
      unint64_t v61 = 0;
    }
    unint64_t v134 = v61;
    LODWORD(v61) = *(_DWORD *)(a2 + 28);
    uint64_t v124 = v60;
    if (v60 <= 1) {
      unsigned int v62 = 1;
    }
    else {
      unsigned int v62 = v60;
    }
    if (v61 == -1) {
      unint64_t v61 = v62;
    }
    else {
      unint64_t v61 = v61;
    }
    uint64_t v63 = (v61 * (unsigned __int128)(unint64_t)v40) >> 64;
    unint64_t v64 = v61 * v40;
    if (v63) {
      unint64_t v64 = 0;
    }
    unint64_t v127 = v64;
    if (v63) {
      goto LABEL_139;
    }
    uint64_t v121 = v50;
    uint64_t v122 = v57;
    unint64_t v123 = v40;
    __n128 v126 = v42;
    id v137 = *(id *)(v14 + 16);
    int v65 = *(_DWORD *)(v14 + 44);
    if (v65 == 2) {
      uint64_t v66 = 1;
    }
    else {
      uint64_t v66 = a4[2];
    }
    if (v66)
    {
      uint64_t v67 = 0;
      BOOL v69 = v134 == v131 && v124 == v56;
      BOOL v130 = v69;
      BOOL v70 = v122 == v53 && v69;
      BOOL v128 = v70;
      do
      {
        if (*(_DWORD *)(v14 + 44) == 2) {
          unint64_t v71 = 0;
        }
        else {
          unint64_t v71 = v67 + *(unsigned int *)(a3 + 28);
        }
        long long v72 = [v137 parentTexture];

        if (v72) {
          goto LABEL_218;
        }
        if (v65 == 2)
        {
          if (v128) {
            goto LABEL_132;
          }
        }
        else if (v65 == 1)
        {
          if (v130) {
            goto LABEL_132;
          }
        }
        else if (!v65 && v134 == v131)
        {
LABEL_132:
          WebGPU::Texture::setPreviouslyCleared((uint64_t *)v14, *(_DWORD *)(a3 + 16), v71, 1);
          goto LABEL_119;
        }
        WebGPU::CommandEncoder::clearTextureIfNeeded(*(uint32x2_t **)(a3 + 8), *(unsigned int *)(a3 + 16), v71, *(WebGPU::Device **)(a1 + 80), *(void **)(a1 + 32));
LABEL_119:
        ++v67;
      }
      while (v66 != v67);
    }
    if (v65 == 2)
    {
      unsigned int v73 = a4[1];
      unsigned int v74 = a4[2];
      long long v75 = v126;
      unint64_t v76 = v123;
      if ((v73 | v74) >= 2)
      {
        if (v123 > v157[0] << 11)
        {
          if (v74 && !((v127 | v123) >> 32))
          {
            unsigned int v82 = 0;
            while (1)
            {
              int v83 = *(_DWORD *)(a3 + 28);
              int v84 = v83 + v82;
              BOOL v85 = __CFADD__(v83, v82);
              unsigned int v86 = v85 ? 0 : v84;
              unint64_t v87 = v82 * (unint64_t)v127;
              if ((v87 & 0xFFFFFFFF00000000) != 0) {
                break;
              }
              if (v73)
              {
                if (v85)
                {
                  unint64_t v118 = *(void *)(a2 + 16);
                  if (!HIDWORD(v118))
                  {
                    BOOL v91 = __CFADD__(v87, v118);
                    uint64_t v119 = (v87 + v118);
                    if (!v91)
                    {
                      long long v152 = 0;
                      uint64_t v153 = 0;
                      uint64_t v154 = v119;
                      uint64_t v155 = -1;
                      uint64_t v156 = *(void *)(a2 + 32);
                      int v120 = *(_DWORD *)(a3 + 24);
                      long long v149 = 0u;
                      long long v150 = 0u;
                      uint64_t v151 = 0;
                      *((void *)&v149 + 1) = *(void *)(a3 + 8);
                      *(void *)&long long v150 = *(void *)(a3 + 16);
                      DWORD2(v150) = v120;
                      __break(0xC471u);
                      JUMPOUT(0x1824E29F0);
                    }
                  }
                }
                else
                {
                  unsigned int v88 = 0;
                  while (1)
                  {
                    unint64_t v89 = v88 * (unint64_t)v123;
                    if ((v89 & 0xFFFFFFFF00000000) != 0) {
                      break;
                    }
                    unint64_t v90 = *(void *)(a2 + 16);
                    if (HIDWORD(v90)) {
                      break;
                    }
                    BOOL v91 = __CFADD__(v89, v90);
                    int v92 = v89 + v90;
                    if (v91) {
                      break;
                    }
                    BOOL v91 = __CFADD__(v87, v92);
                    uint64_t v93 = (v87 + v92);
                    if (v91) {
                      break;
                    }
                    long long v152 = 0;
                    uint64_t v153 = 0;
                    uint64_t v154 = v93;
                    uint64_t v155 = -1;
                    uint64_t v156 = *(void *)(a2 + 32);
                    int v94 = *(_DWORD *)(a3 + 24);
                    BOOL v91 = __CFADD__(v94, v88);
                    unsigned int v95 = v94 + v88;
                    if (v91) {
                      break;
                    }
                    long long v149 = 0u;
                    long long v150 = 0u;
                    uint64_t v151 = 0;
                    *((void *)&v149 + 1) = *(void *)(a3 + 8);
                    *(void *)&long long v150 = *(void *)(a3 + 16);
                    *((void *)&v150 + 1) = __PAIR64__(v86, v95);
                    LODWORD(v151) = *(_DWORD *)(a3 + 32);
                    unsigned int v147 = *a4;
                    uint64_t v148 = 0x100000001;
                    WebGPU::CommandEncoder::copyBufferToTexture(a1, &v152, &v149, &v147);
                    ++v88;
                    unsigned int v73 = a4[1];
                    if (v88 >= v73)
                    {
                      unsigned int v74 = a4[2];
                      goto LABEL_173;
                    }
                  }
                }
                goto LABEL_138;
              }
LABEL_173:
              if (++v82 >= v74) {
                goto LABEL_138;
              }
            }
          }
          goto LABEL_138;
        }
      }
      else
      {
        unint64_t v76 = 0;
      }
    }
    else
    {
      long long v75 = v126;
      unint64_t v76 = v123;
    }
    unint64_t v77 = [v75 length];
    if (v77 >= WebGPU::Texture::bytesPerRow(v125, v134, *(_DWORD *)(v14 + 40)))
    {
      int v78 = *(_DWORD *)(v14 + 44);
      switch(v78)
      {
        case 2:
          if (v134 && v124 && v122)
          {
            uint64_t v111 = *(unsigned int *)(a3 + 28);
            uint64_t v112 = *(void *)(a2 + 16);
            unsigned int v113 = *(void **)(a1 + 32);
            v140[0] = v134;
            v140[1] = v124;
            v140[2] = v122;
            uint64_t v114 = *(unsigned int *)(a3 + 16);
            uint64_t v115 = *(void *)(a3 + 20);
            *(void *)&long long v116 = v115;
            *((void *)&v116 + 1) = HIDWORD(v115);
            long long v138 = v116;
            uint64_t v139 = v111;
            [v113 copyFromBuffer:v126 sourceOffset:v112 sourceBytesPerRow:v76 sourceBytesPerImage:v127 sourceSize:v140 toTexture:v137 destinationSlice:0 destinationLevel:v114 destinationOrigin:&v138 options:v121];
          }
          break;
        case 1:
          if (v134 && v124 && a4[2])
          {
            unint64_t v103 = 0;
            uint64_t v104 = *(void *)(a3 + 20);
            *(void *)&long long v105 = v104;
            *((void *)&v105 + 1) = HIDWORD(v104);
            long long v133 = v105;
            do
            {
              if (!is_mul_ok(v103, v127)) {
                break;
              }
              uint64_t v106 = *(void *)(a2 + 16);
              uint64_t v107 = v106 + v103 * v127;
              if (__CFADD__(v106, v103 * v127)) {
                break;
              }
              unint64_t v108 = v103 + *(unsigned int *)(a3 + 28);
              unint64_t v109 = *(void **)(a1 + 32);
              v143[0] = v134;
              v143[1] = v124;
              v143[2] = 1;
              uint64_t v110 = *(unsigned int *)(a3 + 16);
              long long v141 = v133;
              uint64_t v142 = 0;
              [v109 copyFromBuffer:v126 sourceOffset:v107 sourceBytesPerRow:v76 sourceBytesPerImage:v127 sourceSize:v143 toTexture:v137 destinationSlice:v108 destinationLevel:v110 destinationOrigin:&v141 options:v121];
              ++v103;
            }
            while (v103 < a4[2]);
          }
          break;
        case 0:
          if (v134)
          {
            unint64_t v79 = v157[0] * (unint64_t)v134;
            if ((v79 & 0xFFFFFFFF00000000) == 0)
            {
              unint64_t v80 = v76 >= v79 ? v79 : v76;
              if (a4[2])
              {
                unint64_t v81 = 0;
                uint64_t v132 = *(unsigned int *)(a3 + 20);
                int64x2_t v129 = vdupq_n_s64(1uLL);
                do
                {
                  if (!is_mul_ok(v81, v127)) {
                    break;
                  }
                  uint64_t v96 = *(void *)(a2 + 16);
                  uint64_t v97 = v96 + v81 * v127;
                  if (__CFADD__(v96, v81 * v127) || __CFADD__(v97, v80)) {
                    break;
                  }
                  uint64_t v98 = *(unsigned int *)(a3 + 28);
                  if (v97 + v80 <= [v126 length])
                  {
                    uint64_t v99 = *(void **)(a1 + 32);
                    unint64_t v145 = v134;
                    int64x2_t v146 = v129;
                    uint64_t v100 = *(unsigned int *)(a3 + 16);
                    v144[0] = v132;
                    v144[1] = 0;
                    v144[2] = 0;
                    [v99 copyFromBuffer:v126 sourceOffset:v97 sourceBytesPerRow:v80 sourceBytesPerImage:v127 sourceSize:&v145 toTexture:v137 destinationSlice:v81 + v98 destinationLevel:v100 destinationOrigin:v144 options:v121];
                  }
                  ++v81;
                }
                while (v81 < a4[2]);
              }
            }
          }
          break;
      }
    }
LABEL_138:

    unint64_t v42 = v126;
LABEL_139:
  }
}

void sub_1824E29FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824E2A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  _Unwind_Resume(a1);
}

void sub_1824E2AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Unwind_Resume(a1);
}

void WebGPU::CommandEncoder::clearTextureIfNeeded(uint32x2_t *a1, uint64_t a2, unint64_t a3, WebGPU::Device *a4, void *a5)
{
  id v9 = a5;
  if (!v9 || WebGPU::Texture::previouslyCleared((WebGPU::Texture *)a1, a2, a3)) {
    goto LABEL_45;
  }
  WebGPU::Texture::setPreviouslyCleared((uint64_t *)a1, a2, a3, 1);
  __int32 v10 = a1[5].i32[1];
  if (v10 == 2)
  {
    uint64_t v33 = (uint64_t)vmax_u32(vshl_u32(a1[3], (uint32x2_t)vneg_s32(vdup_n_s32(a2))), (uint32x2_t)0x100000001);
    if ((unsigned __int32)a1[4].i32[0] >> a2 <= 1) {
      unsigned int v12 = 1;
    }
    else {
      unsigned int v12 = (unsigned __int32)a1[4].i32[0] >> a2;
    }
    id v13 = *(id *)&a1[2];
    if (!v13) {
      goto LABEL_44;
    }
  }
  else if (v10 == 1)
  {
    uint64_t v33 = (uint64_t)vmax_u32(vshl_u32(a1[3], (uint32x2_t)vneg_s32(vdup_n_s32(a2))), (uint32x2_t)0x100000001);
    unsigned int v12 = a1[4].u32[0];
    id v13 = *(id *)&a1[2];
    if (!v13) {
      goto LABEL_44;
    }
  }
  else
  {
    if (v10)
    {
LABEL_45:

      return;
    }
    unsigned int v11 = (unsigned __int32)a1[3].i32[0] >> a2;
    if (v11 <= 1) {
      unsigned int v11 = 1;
    }
    unsigned int v12 = a1[4].u32[0];
    uint64_t v33 = v11 | 0x100000000;
    id v13 = *(id *)&a1[2];
    if (!v13)
    {
LABEL_44:

      goto LABEL_45;
    }
  }
  uint64_t v14 = a1[6].u32[0];
  if ([v13 pixelFormat] == 260 || objc_msgSend(v13, "pixelFormat") == 261) {
    uint64_t v14 = 42;
  }
  uint64_t v29 = v33;
  uint64_t v30 = HIDWORD(v33);
  int v15 = a1[5].i32[1];
  uint64_t v31 = v12;
  unint64_t v16 = WebGPU::Texture::physicalTextureExtent(v15, v14, v33 | ((unint64_t)HIDWORD(v33) << 32));
  unsigned int v34 = v17;
  unsigned __int32 v18 = a1[5].u32[0];
  unsigned int v19 = WebGPU::Texture::texelBlockWidth(v14);
  if (v19)
  {
    id v32 = v13;
    unsigned int v20 = v16 / v19;
    if (v16 % v19)
    {
      unint64_t v21 = 0;
    }
    else
    {
      WebGPU::Texture::texelBlockSize(v14, (int *)v39);
      unint64_t v23 = v18 * (unint64_t)v20;
      if (is_mul_ok(v39[0], v23)) {
        unint64_t v21 = v39[0] * v23;
      }
      else {
        unint64_t v21 = -1;
      }
    }
    id v13 = v32;
    unint64_t v22 = HIDWORD(v16);
    if (!is_mul_ok(v21, HIDWORD(v16))) {
      goto LABEL_44;
    }
  }
  else
  {
    unint64_t v21 = 0;
    unint64_t v22 = HIDWORD(v16);
    if (!is_mul_ok(0, HIDWORD(v16))) {
      goto LABEL_44;
    }
  }
  unint64_t v24 = v21 * v22;
  unint64_t v25 = v34;
  if (v15 != 2) {
    unint64_t v25 = 1;
  }
  if (!is_mul_ok(v24, v25) || !(v24 * v25)) {
    goto LABEL_44;
  }
  uint64_t v26 = WebGPU::Device::safeCreateBuffer(a4, v24 * v25);
  if (!v26)
  {
LABEL_43:

    goto LABEL_44;
  }
  __int32 v27 = a1[5].i32[1];
  if (v27 == 1)
  {
    unint64_t v24 = 0;
    goto LABEL_38;
  }
  if (v27 == 2)
  {
    a3 = 0;
LABEL_40:
    uint64_t v28 = [v13 pixelFormat];
    if (a3 < [v13 arrayLength])
    {
      v38[0] = v29;
      v38[1] = v30;
      v38[2] = v31;
      memset(v37, 0, sizeof(v37));
      [v9 copyFromBuffer:v26 sourceOffset:0 sourceBytesPerRow:v21 sourceBytesPerImage:v24 sourceSize:v38 toTexture:v13 destinationSlice:a3 destinationLevel:a2 destinationOrigin:v37 options:v28 == 260];
      if (v28 == 260)
      {
        v36[0] = v29;
        v36[1] = v30;
        v36[2] = v31;
        memset(v35, 0, sizeof(v35));
        [v9 copyFromBuffer:v26 sourceOffset:0 sourceBytesPerRow:v21 >> 2 sourceBytesPerImage:v24 >> 2 sourceSize:v36 toTexture:v13 destinationSlice:a3 destinationLevel:a2 destinationOrigin:v35 options:2];
      }
    }
    goto LABEL_43;
  }
  if (v27 != 0x7FFFFFFF)
  {
    unint64_t v24 = 0;
    uint64_t v30 = 1;
LABEL_38:
    uint64_t v31 = 1;
    goto LABEL_40;
  }
  __break(0xC471u);
}

void sub_1824E2E60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824E2E84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebGPU::CommandEncoder::waitForCommandBufferCompletion(WebGPU::CommandEncoder *this)
{
  uint64_t v1 = *((void *)this + 7);
  if (!v1) {
    return 1;
  }
  uint64_t v2 = *(id **)(v1 + 8);
  if (!v2) {
    return 1;
  }
  ++*(_DWORD *)v2;
  unint64_t v3 = [v2[3] status];
  if ((v3 & 0xFFFFFFFFFFFFFFFELL) == 2)
  {
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v3);
    uint64_t v4 = WTF::BinarySemaphore::waitUntil();
    int v5 = *(_DWORD *)v2 - 1;
    if (*(_DWORD *)v2 == 1)
    {
LABEL_5:
      WebGPU::CommandBuffer::~CommandBuffer((WebGPU::CommandBuffer *)v2);
      WTF::fastFree(v6, v7);
      return v4;
    }
  }
  else
  {
    uint64_t v4 = 1;
    int v5 = *(_DWORD *)v2 - 1;
    if (*(_DWORD *)v2 == 1) {
      goto LABEL_5;
    }
  }
  *(_DWORD *)uint64_t v2 = v5;
  return v4;
}

void sub_1824E2F6C(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebGPU::CommandBuffer>::deref(v1);
  _Unwind_Resume(a1);
}

void WebGPU::CommandEncoder::copyTextureToBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3 + 8;
  if (*(void *)a2) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = *(void *)a3 == 0;
  }
  if (!v5 || *(void *)(a3 + 8) != 0) {
    return;
  }
  int v10 = *(unsigned __int8 *)(a1 + 4);
  uint64_t v8 = (WebGPU::CommandsMixin *)(a1 + 4);
  int v9 = v10;
  if ((v10 - 3) >= 0xFFFFFFFE)
  {
    if (v9 == 2)
    {
      uint64_t v19 = *(void *)(a1 + 80);
      unsigned int v20 = NSString;
      unint64_t v21 = WebGPU::CommandsMixin::encoderStateName(v8);
      unint64_t v22 = [v20 stringWithFormat:@"%s: encoder state is %@", "void WebGPU::CommandEncoder::copyTextureToBuffer(const WGPUImageCopyTexture &, const WGPUImageCopyBuffer &, const WGPUExtent3D &)", v21];
      MEMORY[0x18530AF50](&v154, v22);
      uint64_t v23 = *(void *)(v19 + 32);
      uint64_t v24 = 32 * *(unsigned int *)(v19 + 44);
      uint64_t v25 = v23 + v24;
      while (v24)
      {
        int v26 = *(_DWORD *)(v25 - 8);
        v25 -= 32;
        v24 -= 32;
        if (!v26)
        {
          uint64_t v27 = v23 + v24;
          if (!*(unsigned char *)(v27 + 16))
          {
            uint64_t v28 = v154;
            *(void *)&long long v154 = 0;
            *(_DWORD *)uint64_t v27 = 1;
            *(void *)(v27 + 8) = v28;
            *(unsigned char *)(v27 + 16) = 1;
          }
          goto LABEL_34;
        }
      }
      uint64_t v30 = *(void *)(v19 + 24);
      if (v30)
      {
        (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v30 + 16))(v30, 1, &v154);
        uint64_t v31 = *(void *)(v19 + 24);
        *(void *)(v19 + 24) = 0;
        if (v31) {
          (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
        }
      }
LABEL_34:
      id v32 = (_DWORD *)v154;
      *(void *)&long long v154 = 0;
      if (v32)
      {
        if (*v32 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v32 -= 2;
        }
      }
    }
    else
    {
      if (*(void *)(a1 + 64)) {
        uint64_t v29 = *(__CFString **)(a1 + 64);
      }
      else {
        uint64_t v29 = @"Encoder state is locked";
      }
      WebGPU::CommandEncoder::makeInvalid((WebGPU::CommandEncoder *)a1, &v29->isa);
    }
    return;
  }
  uint64_t v14 = *(uint32x2_t **)(a2 + 8);
  if (!v14[13].i8[0] && !*(void *)&v14[2]
    || (uint32x2_t v15 = v14[9], !*(void *)(*(void *)&v15 + 8))
    || *(void *)&v15 != *(void *)(a1 + 80))
  {
    unint64_t v16 = NSString;
    unsigned int v17 = @"source texture is not valid to use with this GPUCommandEncoder";
    goto LABEL_15;
  }
  uint64_t v33 = WebGPU::Texture::errorValidatingImageCopyTexture(a2, (unsigned int *)a4);
  if (v33)
  {
LABEL_38:
    unsigned int v34 = (void *)v33;
    uint64_t v139 = [NSString stringWithFormat:@"GPUCommandEncoder.copyTextureToBuffer: %@", v33];

    unsigned __int32 v18 = v139;
    if (v139) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }
  if ((v14[6].i8[4] & 1) == 0)
  {
    unint64_t v16 = NSString;
    unsigned int v17 = @"sourceTexture usage does not contain CopySrc";
    goto LABEL_15;
  }
  if (v14[5].i32[0] != 1)
  {
    unint64_t v16 = NSString;
    unsigned int v17 = @"sourceTexture sample count != 1";
    goto LABEL_15;
  }
  uint64_t v40 = v14[6].u32[0];
  if ((v40 - 38) <= 5)
  {
    int v41 = *(_DWORD *)(a2 + 32);
    if ((WebGPU::Texture::refersToSingleAspect(v14[6].u32[0], v41) & 1) == 0)
    {
      unint64_t v16 = NSString;
      unsigned int v17 = @"copying to depth stencil texture with more than one aspect";
      goto LABEL_15;
    }
    if (v40 > 0x2B || ((1 << v40) & 0xCC000000000) == 0 && (v40 != 41 || v41 != 1))
    {
      unint64_t v16 = NSString;
      unsigned int v17 = @"copying to depth stencil texture, validDepthStencilCopySource fails";
      goto LABEL_15;
    }
    uint64_t v40 = WebGPU::Texture::aspectSpecificFormat(v40, v41);
  }
  uint64_t v42 = *(void *)(a3 + 32);
  int v43 = *(unsigned __int8 *)(v42 + 52);
  if (v43 != 4 && !*(void *)(v42 + 16)
    || (uint64_t v44 = *(void *)(v42 + 280), !*(void *)(v44 + 8))
    || v44 != *(void *)(a1 + 80))
  {
    unsigned int v17 = @"buffer is not valid";
LABEL_65:
    unint64_t v16 = NSString;
    goto LABEL_15;
  }
  if ((v43 - 3) > 1)
  {
    unsigned int v17 = @"buffer state != Unmapped";
    goto LABEL_65;
  }
  if (*(_DWORD *)(a3 + 24) != -1 && *(_DWORD *)(a3 + 24))
  {
    unsigned int v17 = @"imageCopyBuffer.layout.bytesPerRow is not a multiple of 256";
    goto LABEL_65;
  }
  if ((*(unsigned char *)(v42 + 48) & 8) == 0)
  {
    unint64_t v16 = NSString;
    unsigned int v17 = @"destination buffer usage does not contain CopyDst";
    goto LABEL_15;
  }
  uint64_t v33 = WebGPU::Texture::errorValidatingTextureCopyRange(a2, (unsigned int *)a4);
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v123 = v14[6].u32[0];
  if ((v123 - 38) < 6)
  {
    if ((*(unsigned char *)(a3 + 16) & 3) != 0)
    {
      unint64_t v16 = NSString;
      unsigned int v17 = @"destination.layout.offset is not a multiple of 4";
      goto LABEL_15;
    }
LABEL_195:
    if (WebGPU::Texture::validateLinearTextureData(v4, *(void *)(*(void *)(a3 + 32) + 40), v40, *(void *)a4, *(_DWORD *)(a4 + 8)))
    {
      goto LABEL_39;
    }
    unint64_t v16 = NSString;
    unsigned int v17 = @"validateLinearTextureData fails";
    goto LABEL_15;
  }
  WebGPU::Texture::texelBlockSize(v123, (int *)&v154);
  if (!(*(void *)(a3 + 16) % (unint64_t)v154)) {
    goto LABEL_195;
  }
  unint64_t v16 = NSString;
  unsigned int v17 = @"destination.layout.offset is not a multiple of texelBlockSize";
LABEL_15:
  unsigned __int32 v18 = [v16 stringWithFormat:@"GPUCommandEncoder.copyTextureToBuffer: %@", v17];
  if (v18)
  {
LABEL_16:
    long long v138 = v18;
    WebGPU::CommandEncoder::makeInvalid((WebGPU::CommandEncoder *)a1, v18);

    return;
  }
LABEL_39:
  uint64_t v35 = *(void *)(a3 + 32);
  WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>((uint64_t)&v14[14], a1, (uint64_t)&v154);
  if (!v14[13].i8[1])
  {
    if (v14[13].i8[0])
    {
      *(unsigned char *)(a1 + 76) = 1;
      uint64_t v38 = *(void *)(a1 + 56);
      if (v38)
      {
        id v39 = *(WebGPU::CommandBuffer **)(v38 + 8);
        if (v39) {
          WebGPU::CommandBuffer::makeInvalid(v39, *(NSString **)(a1 + 64));
        }
      }
    }
  }
  WebGPU::Buffer::setCommandEncoder((WebGPU::Buffer *)v35, (WebGPU::CommandEncoder *)a1);
  *(void *)(v35 + 232) = -1;
  *(void *)(v35 + 240) = -1;
  *(void *)(v35 + 272) = 0;
  *(void *)(v35 + 248) = 0;
  *(void *)(v35 + 256) = 0;
  *(_DWORD *)(v35 + 264) = 0;
  if (!v14[13].i8[0] && *(unsigned char *)(v35 + 52) != 4)
  {
    int v36 = *(_DWORD *)(a2 + 32);
    if (v36 != 0x7FFFFFFF)
    {
      if (v36 == 2)
      {
        uint64_t v37 = 1;
      }
      else
      {
        if (v36 != 1)
        {
          uint64_t v132 = 0;
LABEL_70:
          uint64_t v45 = WebGPU::Texture::logicalMiplevelSpecificTextureExtent(v14, *(_DWORD *)(a2 + 16));
          unsigned int v46 = HIDWORD(v45);
          unsigned int v48 = v47;
          unsigned int v49 = *(_DWORD *)(a2 + 20);
          unsigned int v50 = v45 - v49;
          if (v45 - v49 >= *(_DWORD *)a4) {
            unsigned int v50 = *(_DWORD *)a4;
          }
          if (v45 >= v49) {
            uint64_t v51 = v50;
          }
          else {
            uint64_t v51 = 0;
          }
          uint64_t v136 = v51;
          int32x2_t v52 = *(int32x2_t *)(a2 + 24);
          uint32x2_t v53 = *(uint32x2_t *)(a4 + 4);
          id v140 = *(id *)(v35 + 16);
          unint64_t v54 = *(unsigned int *)(a3 + 24);
          if (v54 == -1) {
            unint64_t v54 = [v140 length];
          }
          uint64_t v55 = WebGPU::Texture::aspectSpecificFormat(v14[6].u32[0], *(_DWORD *)(a2 + 32));
          unsigned int v129 = v55;
          WebGPU::Texture::texelBlockSize(v55, (int *)v157);
          __int32 v56 = v14[5].i32[1];
          if ((v56 - 1) >= 2)
          {
            if (v56)
            {
              unsigned int v57 = v157[0];
              goto LABEL_86;
            }
            unsigned int v57 = v157[0];
            unsigned int v58 = *(_DWORD *)(*(void *)(a1 + 80) + 88);
          }
          else
          {
            unsigned int v57 = v157[0];
            unsigned int v58 = *(_DWORD *)(*(void *)(a1 + 80) + 92);
          }
          unint64_t v59 = v57 * (unint64_t)v58;
          if ((v59 & 0xFFFFFFFF00000000) == 0)
          {
            if (v59 >= v54) {
              unint64_t v54 = v54;
            }
            else {
              unint64_t v54 = v59;
            }
          }
LABEL_86:
          unint64_t v60 = v57;
          unint64_t v61 = v54 % v57;
          unsigned int v133 = v60;
          if (v61)
          {
            BOOL v66 = v60 >= v61;
            unint64_t v62 = v60 - v61;
            if (!v66)
            {
              __break(0xC471u);
              goto LABEL_198;
            }
            v54 += v62;
          }
          int8x8_t v63 = vbic_s8((int8x8_t)vmin_u32((uint32x2_t)vsub_s32((int32x2_t)__PAIR64__(v48, v46), v52), v53), (int8x8_t)vcgt_u32((uint32x2_t)v52, (uint32x2_t)__PAIR64__(v48, v46)));
          unsigned int v64 = *(_DWORD *)(a4 + 4);
          unsigned int v65 = *(_DWORD *)(a4 + 8);
          BOOL v66 = v64 >= 2 || v65 >= 2;
          if (!v66 && v56 == 2) {
            unint64_t v68 = 0;
          }
          else {
            unint64_t v68 = v54;
          }
          LODWORD(v69) = *(_DWORD *)(a3 + 28);
          int8x8_t v126 = v63;
          __int32 v70 = v63.i32[0];
          if (v63.i32[0] <= 1u) {
            unsigned int v71 = 1;
          }
          else {
            unsigned int v71 = v63.i32[0];
          }
          if (v69 == -1) {
            unint64_t v69 = v71;
          }
          else {
            unint64_t v69 = v69;
          }
          unint64_t v137 = v68;
          unint64_t v72 = v69 * v68;
          if (is_mul_ok(v69, v68)) {
            unint64_t v73 = v69 * v68;
          }
          else {
            unint64_t v73 = 0;
          }
          if (is_mul_ok(v69, v68))
          {
            if (v56 == 2 && v68 > v133 << 11)
            {
              if (v65 && !((v72 | v68) >> 32))
              {
                unsigned int v74 = 0;
                while (1)
                {
                  int v75 = *(_DWORD *)(a2 + 28);
                  BOOL v76 = __CFADD__(v75, v74);
                  int v77 = v75 + v74;
                  BOOL v78 = __CFADD__(v75, v74);
                  unsigned int v79 = v76 ? 0 : v77;
                  unint64_t v80 = v74 * (unint64_t)v72;
                  int v81 = (v80 & 0xFFFFFFFF00000000) != 0 ? 0 : v74 * v72;
                  if ((v80 & 0xFFFFFFFF00000000) != 0 || v78) {
                    break;
                  }
                  if (v64)
                  {
                    unsigned int v82 = 0;
                    while (1)
                    {
                      int v83 = *(_DWORD *)(a2 + 24);
                      unsigned int v84 = v83 + v82;
                      BOOL v85 = __CFADD__(v83, v82);
                      unint64_t v86 = v82 * (unint64_t)v137;
                      if ((v86 & 0xFFFFFFFF00000000) != 0) {
                        goto LABEL_109;
                      }
                      if (v85) {
                        goto LABEL_109;
                      }
                      long long v154 = 0u;
                      long long v155 = 0u;
                      uint64_t v156 = 0;
                      *((void *)&v154 + 1) = *(void *)(a2 + 8);
                      *(void *)&long long v155 = *(void *)(a2 + 16);
                      *((void *)&v155 + 1) = __PAIR64__(v79, v84);
                      unint64_t v87 = *(void *)(a3 + 16);
                      LODWORD(v156) = *(_DWORD *)(a2 + 32);
                      if (HIDWORD(v87)) {
                        goto LABEL_109;
                      }
                      BOOL v66 = __CFADD__(v86, v87);
                      int v88 = v86 + v87;
                      if (v66) {
                        goto LABEL_109;
                      }
                      BOOL v66 = __CFADD__(v81, v88);
                      uint64_t v89 = (v81 + v88);
                      if (v66) {
                        goto LABEL_109;
                      }
                      v153[0] = 0;
                      v153[1] = 0;
                      v153[2] = v89;
                      v153[3] = -1;
                      v153[4] = *(void *)(a3 + 32);
                      unsigned int v151 = *(_DWORD *)a4;
                      uint64_t v152 = 0x100000001;
                      WebGPU::CommandEncoder::copyTextureToBuffer(a1, &v154, v153, &v151);
                      ++v82;
                      unsigned int v64 = *(_DWORD *)(a4 + 4);
                      if (v82 >= v64)
                      {
                        unsigned int v65 = *(_DWORD *)(a4 + 8);
                        break;
                      }
                    }
                  }
                  if (++v74 >= v65) {
                    goto LABEL_109;
                  }
                }
              }
              goto LABEL_109;
            }
            id v90 = WebGPU::CommandEncoder::ensureBlitCommandEncoder((id *)a1);
            unint64_t v125 = v73;
            unint64_t v91 = *(unsigned int *)(a4 + 8);
            if (v91)
            {
              for (unint64_t i = 0; i < v91; ++i)
              {
                if (v14[5].i32[1] == 2) {
                  unint64_t v93 = 0;
                }
                else {
                  unint64_t v93 = i + *(unsigned int *)(a2 + 28);
                }
                uint64_t v94 = *(unsigned int *)(a2 + 16);
                if (!WebGPU::Texture::previouslyCleared((WebGPU::Texture *)v14, *(_DWORD *)(a2 + 16), v93))
                {
                  WebGPU::CommandEncoder::clearTextureIfNeeded(*(uint32x2_t **)(a2 + 8), v94, v93, *(WebGPU::Device **)(a1 + 80), *(void **)(a1 + 32));
                  unint64_t v91 = *(unsigned int *)(a4 + 8);
                }
              }
            }
            __int32 v95 = v14[5].i32[1];
            if (v95)
            {
              unint64_t v96 = v125;
              if (v95 == 2)
              {
                if (!v136 || !v70 || !v126.i32[1]) {
                  goto LABEL_109;
                }
              }
              else if (v95 == 1 && (!v136 || !v70))
              {
                goto LABEL_109;
              }
            }
            else
            {
              unint64_t v96 = v125;
              if (!v136) {
                goto LABEL_109;
              }
            }
            unint64_t v97 = [v140 length];
            if (v97 >= WebGPU::Texture::bytesPerRow(v129, v136, v14[5].u32[0]))
            {
              *(void *)&long long v98 = v126.u32[0];
              *((void *)&v98 + 1) = v126.u32[1];
              long long v99 = v98;
              __int32 v100 = v14[5].i32[1];
              if (v100 == 2)
              {
                uint64_t v116 = *(unsigned int *)(a2 + 28);
                uint64_t v117 = *(void *)(a3 + 16);
                unint64_t v118 = *(void **)(a1 + 32);
                uint32x2_t v119 = v14[2];
                uint64_t v120 = *(unsigned int *)(a2 + 16);
                uint64_t v121 = *(void *)(a2 + 20);
                *(void *)&long long v122 = v121;
                *((void *)&v122 + 1) = HIDWORD(v121);
                long long v142 = v99;
                long long v143 = v122;
                uint64_t v144 = v116;
                uint64_t v141 = v136;
                [v118 copyFromTexture:*(void *)&v119 sourceSlice:0 sourceLevel:v120 sourceOrigin:&v143 sourceSize:&v141 toBuffer:v140 destinationOffset:v117 destinationBytesPerRow:v137 destinationBytesPerImage:v96 options:v132];
              }
              else if (v100 == 1)
              {
                if (*(_DWORD *)(a4 + 8))
                {
                  unint64_t v108 = 0;
                  uint64_t v109 = *(void *)(a2 + 20);
                  *(void *)&long long v110 = v109;
                  *((void *)&v110 + 1) = HIDWORD(v109);
                  long long v131 = v110;
                  uint64_t v128 = v99;
                  do
                  {
                    if (!is_mul_ok(v108, v96)) {
                      break;
                    }
                    uint64_t v111 = *(void *)(a3 + 16);
                    uint64_t v112 = v111 + v108 * v96;
                    if (__CFADD__(v111, v108 * v96)) {
                      break;
                    }
                    unint64_t v135 = v108 + *(unsigned int *)(a2 + 28);
                    unsigned int v113 = *(void **)(a1 + 32);
                    id v114 = *(id *)&v14[2];
                    uint64_t v115 = *(unsigned int *)(a2 + 16);
                    long long v146 = v131;
                    uint64_t v147 = 0;
                    v145[0] = v136;
                    v145[1] = v128;
                    v145[2] = 1;
                    [v113 copyFromTexture:v114 sourceSlice:v135 sourceLevel:v115 sourceOrigin:&v146 sourceSize:v145 toBuffer:v140 destinationOffset:v112 destinationBytesPerRow:v137 destinationBytesPerImage:v96 options:v132];

                    ++v108;
                    unint64_t v96 = v125;
                  }
                  while (v108 < *(unsigned int *)(a4 + 8));
                }
              }
              else if (!v100 && *(_DWORD *)(a4 + 8))
              {
                unint64_t v101 = 0;
                uint64_t v127 = *(unsigned int *)(a2 + 20);
                unint64_t v134 = v133 * (unint64_t)v136;
                int64x2_t v124 = vdupq_n_s64(1uLL);
                while (1)
                {
                  if (!is_mul_ok(v101, v96)) {
                    goto LABEL_109;
                  }
                  uint64_t v102 = *(void *)(a3 + 16);
                  uint64_t v103 = v102 + v101 * v96;
                  if (__CFADD__(v102, v101 * v96)) {
                    goto LABEL_109;
                  }
                  if (__CFADD__(v103, v134)) {
                    break;
                  }
                  uint64_t v104 = *(unsigned int *)(a2 + 28);
                  if (v103 + v134 <= [v140 length])
                  {
                    uint64_t v130 = v101 + v104;
                    long long v105 = *(void **)(a1 + 32);
                    id v106 = *(id *)&v14[2];
                    uint64_t v107 = *(unsigned int *)(a2 + 16);
                    v150[0] = v127;
                    v150[1] = 0;
                    v150[2] = 0;
                    uint64_t v148 = v136;
                    int64x2_t v149 = v124;
                    [v105 copyFromTexture:v106 sourceSlice:v130 sourceLevel:v107 sourceOrigin:v150 sourceSize:&v148 toBuffer:v140 destinationOffset:v103 destinationBytesPerRow:v137 destinationBytesPerImage:v125 options:v132];
                  }
                  ++v101;
                  unint64_t v96 = v125;
                  if (v101 >= *(unsigned int *)(a4 + 8)) {
                    goto LABEL_109;
                  }
                }
                __break(0xC471u);
LABEL_198:
                JUMPOUT(0x1824E3AE4);
              }
            }
          }
LABEL_109:

          return;
        }
        uint64_t v37 = 2;
      }
      uint64_t v132 = v37;
      goto LABEL_70;
    }
  }
}

void sub_1824E3AF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824E3B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  _Unwind_Resume(a1);
}

void sub_1824E3B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  _Unwind_Resume(a1);
}

void sub_1824E3B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  _Unwind_Resume(a1);
}

void sub_1824E3B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  _Unwind_Resume(a1);
}

void sub_1824E3B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  _Unwind_Resume(a1);
}

void sub_1824E3B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  _Unwind_Resume(a1);
}

void sub_1824E3B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  _Unwind_Resume(a1);
}

void sub_1824E3B98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824E3BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  _Unwind_Resume(a1);
}

void sub_1824E3BBC(_Unwind_Exception *a1)
{
  BOOL v5 = *(_DWORD **)(v3 - 160);
  *(void *)(v3 - 160) = 0;
  if (v5)
  {
    if (*v5 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *v5 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_1824E3C14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824E3C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25)
{
  _Unwind_Resume(a1);
}

_DWORD *wgpuCommandEncoderReference(_DWORD *result)
{
  return result;
}

WebGPU::CommandEncoder *wgpuCommandEncoderRelease(WebGPU::CommandEncoder *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebGPU::CommandEncoder::~CommandEncoder(result);
    return (WebGPU::CommandEncoder *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t wgpuCommandEncoderBeginComputePass(WebGPU::CommandEncoder *this, void *a2)
{
  if (*a2)
  {
    uint64_t v3 = (atomic_uchar *volatile *)*((void *)this + 10);
    uint64_t v4 = WTF::fastMalloc((WTF *)0x80);
    WebGPU::ComputePassEncoder::ComputePassEncoder(v4, this, v3, @"descriptor is corrupted");
    return v4;
  }
  BOOL v5 = (WebGPU::CommandEncoder *)((char *)this + 4);
  int v6 = *((unsigned __int8 *)this + 4);
  if ((v6 - 3) < 0xFFFFFFFE)
  {
    uint64_t v8 = (unsigned int *)a2[2];
    if (!v8) {
      goto LABEL_58;
    }
    uint64_t v9 = *((void *)this + 10);
    uint64_t v10 = *(unsigned int *)(v9 + 244);
    if (v10)
    {
      unsigned int v11 = *(int **)(v9 + 232);
      unsigned int v12 = @"device does not have timestamp query feature";
      while (1)
      {
        int v13 = *v11++;
        if (v13 == 3) {
          break;
        }
        if (!--v10) {
          goto LABEL_42;
        }
      }
      uint64_t v28 = *(void *)v8;
      uint64_t v29 = *(unsigned int *)(*(void *)v8 + 36);
      if (v29 != 1)
      {
        objc_msgSend(NSString, "stringWithFormat:", @"query type is not timestamp but %d", v29);
        unsigned int v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
        if (!v12) {
          goto LABEL_58;
        }
LABEL_41:
        uint64_t v9 = *((void *)this + 10);
        goto LABEL_42;
      }
      if (*(unsigned char *)(v28 + 56) || *(void *)(v28 + 16) || *(void *)(v28 + 24))
      {
        uint64_t v30 = *(void *)(v28 + 8);
        if (v30 == v9 && *(void *)(v30 + 8) != 0)
        {
          uint64_t v34 = *(unsigned int *)(v28 + 32);
          uint64_t v35 = v8[2];
          uint64_t v36 = v8[3];
          if (v35 == -1) {
            uint64_t v37 = 0;
          }
          else {
            uint64_t v37 = v35;
          }
          if (v36 == -1) {
            uint64_t v38 = 0;
          }
          else {
            uint64_t v38 = v36;
          }
          BOOL v40 = v37 >= v34
             || v38 >= v34
             || v35 == v36;
          if (!v40
            || (objc_msgSend(NSString, "stringWithFormat:", @"writeIndices mismatch: beginningOfPassWriteIndex(%u) >= querySetCount(%u) || endOfPassWriteIndex(%u) >= querySetCount(%u) || timestampWrite.beginningOfPassWriteIndex(%u) == timestampWrite.endOfPassWriteIndex(%u)", v37, v34, v38, v34, v35, v36), (unsigned int v12 = (__CFString *)objc_claimAutoreleasedReturnValue()) == 0))
          {
LABEL_58:
            if ([*((id *)this + 2) status])
            {
              int v41 = (atomic_uchar *volatile *)*((void *)this + 10);
              uint64_t v4 = WTF::fastMalloc((WTF *)0x80);
              WebGPU::ComputePassEncoder::ComputePassEncoder(v4, this, v41, @"command buffer has already been committed");
            }
            else
            {
              WebGPU::CommandEncoder::finalizeBlitCommandEncoder((id *)this);
              uint64_t v42 = *((void *)this + 10);
              if (*(void *)(v42 + 8))
              {
                int v43 = objc_opt_new();
                [v43 setDispatchType:0];
                uint64_t v44 = [*((id *)this + 2) computeCommandEncoderWithDescriptor:v43];
                id v45 = v44;
                objc_storeStrong((id *)this + 5, v44);
                WebGPU::Queue::setEncoderForBuffer(*(void *)(*((void *)this + 10) + 16), *((void **)this + 2), v45);

                unsigned int v46 = (const char *)a2[1];
                if (v46) {
                  strlen(v46);
                }
                WTF::String::fromUTF8();
                if (v54) {
                  unsigned int v48 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
                }
                else {
                  unsigned int v48 = &stru_1ECABF938;
                }
                [v45 setLabel:v48];

                unsigned int v49 = v54;
                unint64_t v54 = 0;
                if (v49)
                {
                  if (*v49 == 2) {
                    WTF::StringImpl::destroy();
                  }
                  else {
                    *v49 -= 2;
                  }
                }
                unsigned int v50 = (atomic_uchar *volatile *)*((void *)this + 10);
                id v51 = v45;
                uint64_t v4 = WTF::fastMalloc((WTF *)0x80);
                WebGPU::ComputePassEncoder::ComputePassEncoder(v4, v51, v52, (uint64_t)this, v50);
              }
              else
              {
                unsigned int v47 = @"GPUDevice was invalid, this will be an error submitting the command buffer";
                uint64_t v4 = WTF::fastMalloc((WTF *)0x80);
                WebGPU::ComputePassEncoder::ComputePassEncoder(v4, this, (atomic_uchar *volatile *)v42, @"GPUDevice was invalid, this will be an error submitting the command buffer");
              }
            }
            return v4;
          }
          goto LABEL_41;
        }
      }
      unsigned int v12 = @"device mismatch";
    }
    else
    {
      unsigned int v12 = @"device does not have timestamp query feature";
    }
LABEL_42:
    uint64_t v33 = v12;
    uint64_t v4 = WTF::fastMalloc((WTF *)0x80);
    WebGPU::ComputePassEncoder::ComputePassEncoder(v4, this, (atomic_uchar *volatile *)v9, v33);

    return v4;
  }
  if (v6 == 2)
  {
    uint64_t v14 = *((void *)this + 10);
    uint32x2_t v15 = NSString;
    unint64_t v16 = WebGPU::CommandsMixin::encoderStateName(v5);
    unsigned int v17 = [v15 stringWithFormat:@"%s: encoder state is %@", "Ref<ComputePassEncoder> WebGPU::CommandEncoder::beginComputePass(const WGPUComputePassDescriptor &)", v16];
    MEMORY[0x18530AF50](&v54, v17);
    uint64_t v18 = *(void *)(v14 + 32);
    uint64_t v19 = 32 * *(unsigned int *)(v14 + 44);
    uint64_t v20 = v18 + v19;
    while (v19)
    {
      int v21 = *(_DWORD *)(v20 - 8);
      v20 -= 32;
      v19 -= 32;
      if (!v21)
      {
        uint64_t v22 = v18 + v19;
        if (!*(unsigned char *)(v22 + 16))
        {
          uint64_t v23 = v54;
          unint64_t v54 = 0;
          *(_DWORD *)uint64_t v22 = 1;
          *(void *)(v22 + 8) = v23;
          *(unsigned char *)(v22 + 16) = 1;
        }
        goto LABEL_23;
      }
    }
    uint64_t v25 = *(void *)(v14 + 24);
    if (v25)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v25 + 16))(v25, 1, &v54);
      uint64_t v26 = *(void *)(v14 + 24);
      *(void *)(v14 + 24) = 0;
      if (v26) {
        (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
      }
    }
LABEL_23:
    uint64_t v27 = v54;
    unint64_t v54 = 0;
    if (v27)
    {
      if (*v27 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v27 -= 2;
      }
    }
  }
  else
  {
    if (*((void *)this + 8)) {
      uint64_t v24 = (__CFString *)*((void *)this + 8);
    }
    else {
      uint64_t v24 = @"Encoder state is locked";
    }
    WebGPU::CommandEncoder::makeInvalid(this, &v24->isa);
  }
  id v32 = (atomic_uchar *volatile *)*((void *)this + 10);
  uint64_t v4 = WTF::fastMalloc((WTF *)0x80);
  WebGPU::ComputePassEncoder::ComputePassEncoder(v4, this, v32, @"encoder state is invalid");
  return v4;
}

void sub_1824E413C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _DWORD *a16)
{
  if (a16)
  {
    if (*a16 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a16 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_1824E42B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824E42C4(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v3, a2);

  _Unwind_Resume(a1);
}

void sub_1824E42E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824E42F4(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1824E4308(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t wgpuCommandEncoderBeginRenderPass(WebGPU::CommandEncoder *this, uint64_t *a2)
{
  v304[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  if (*a2)
  {
    if (*(_DWORD *)(v4 + 8) != 15)
    {
      uint64_t v25 = (atomic_uchar *volatile *)*((void *)this + 10);
      uint64_t v24 = WTF::fastMalloc((WTF *)0x228);
      WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v25, @"descriptor is corrupted");
      return v24;
    }
    uint64_t v5 = *(void *)(v4 + 16);
    int v6 = (WebGPU::CommandEncoder *)((char *)this + 4);
    int v7 = *((unsigned __int8 *)this + 4);
    if ((v7 - 3) >= 0xFFFFFFFE) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v5 = -1;
    int v6 = (WebGPU::CommandEncoder *)((char *)this + 4);
    int v7 = *((unsigned __int8 *)this + 4);
    if ((v7 - 3) >= 0xFFFFFFFE)
    {
LABEL_4:
      if (v7 == 2)
      {
        uint64_t v8 = *((void *)this + 10);
        uint64_t v9 = NSString;
        uint64_t v10 = WebGPU::CommandsMixin::encoderStateName(v6);
        unsigned int v11 = [v9 stringWithFormat:@"%s: encoder state is %@", "Ref<RenderPassEncoder> WebGPU::CommandEncoder::beginRenderPass(const WGPURenderPassDescriptor &)", v10];
        MEMORY[0x18530AF50](v302, v11);
        uint64_t v12 = *(void *)(v8 + 32);
        uint64_t v13 = 32 * *(unsigned int *)(v8 + 44);
        uint64_t v14 = v12 + v13;
        while (v13)
        {
          int v15 = *(_DWORD *)(v14 - 8);
          v14 -= 32;
          v13 -= 32;
          if (!v15)
          {
            uint64_t v16 = v12 + v13;
            if (!*(unsigned char *)(v16 + 16))
            {
              uint64_t v17 = v302[0];
              v302[0] = 0;
              *(_DWORD *)uint64_t v16 = 1;
              *(void *)(v16 + 8) = v17;
              *(unsigned char *)(v16 + 16) = 1;
            }
            goto LABEL_27;
          }
        }
        uint64_t v27 = *(void *)(v8 + 24);
        if (v27)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v27 + 16))(v27, 1, v302);
          uint64_t v28 = *(void *)(v8 + 24);
          *(void *)(v8 + 24) = 0;
          if (v28) {
            (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
          }
        }
LABEL_27:
        uint64_t v29 = (_DWORD *)v302[0];
        v302[0] = 0;
        if (v29)
        {
          if (*v29 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v29 -= 2;
          }
        }
      }
      else
      {
        if (*((void *)this + 8)) {
          uint64_t v26 = (__CFString *)*((void *)this + 8);
        }
        else {
          uint64_t v26 = @"Encoder state is locked";
        }
        WebGPU::CommandEncoder::makeInvalid(this, &v26->isa);
      }
      uint64_t v30 = (atomic_uchar *volatile *)*((void *)this + 10);
      uint64_t v24 = WTF::fastMalloc((WTF *)0x228);
      WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v30, @"encoder state is not valid");
      return v24;
    }
  }
  uint64_t v19 = a2[5];
  uint64_t v18 = (unsigned int *)a2[6];
  if (v19)
  {
    if (!*(unsigned char *)(v19 + 56) && !*(void *)(v19 + 16) && !*(void *)(v19 + 24)
      || (uint64_t v20 = *(void *)(v19 + 8), !*(void *)(v20 + 8))
      || v20 != *((void *)this + 10))
    {
      int v21 = @"occlusion query does not match the device";
LABEL_18:
      uint64_t v22 = (atomic_uchar *volatile *)*((void *)this + 10);
      uint64_t v23 = v21;
      uint64_t v24 = WTF::fastMalloc((WTF *)0x228);
      WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v22, v23);

      return v24;
    }
    if (*(_DWORD *)(v19 + 36))
    {
      int v21 = @"occlusion query type is not occlusion";
      goto LABEL_18;
    }
  }
  if (!v18) {
    goto LABEL_71;
  }
  uint64_t v32 = *((void *)this + 10);
  uint64_t v33 = *(unsigned int *)(v32 + 244);
  if (!v33)
  {
    int v21 = @"device does not have timestamp query feature";
    goto LABEL_18;
  }
  uint64_t v34 = *(int **)(v32 + 232);
  int v21 = @"device does not have timestamp query feature";
  while (1)
  {
    int v35 = *v34++;
    if (v35 == 3) {
      break;
    }
    if (!--v33) {
      goto LABEL_18;
    }
  }
  uint64_t v36 = *(void *)v18;
  uint64_t v37 = *(unsigned int *)(*(void *)v18 + 36);
  if (v37 == 1)
  {
    if (!*(unsigned char *)(v36 + 56) && !*(void *)(v36 + 16) && !*(void *)(v36 + 24)
      || ((v38 = *(void *)(v36 + 8), v38 == v32) ? (BOOL v39 = *(void *)(v38 + 8) == 0) : (BOOL v39 = 1), v39))
    {
      int v21 = @"device mismatch";
      goto LABEL_18;
    }
    uint64_t v40 = *(unsigned int *)(v36 + 32);
    uint64_t v41 = v18[2];
    uint64_t v42 = v18[3];
    if (v41 == -1) {
      uint64_t v43 = 0;
    }
    else {
      uint64_t v43 = v41;
    }
    if (v42 == -1) {
      uint64_t v44 = 0;
    }
    else {
      uint64_t v44 = v42;
    }
    if (v43 < v40 && v44 < v40 && v41 != v42) {
      goto LABEL_71;
    }
    objc_msgSend(NSString, "stringWithFormat:", @"writeIndices mismatch: beginningOfPassWriteIndex(%u) >= querySetCount(%u) || endOfPassWriteIndex(%u) >= querySetCount(%u) || timestampWrite.beginningOfPassWriteIndex(%u) == timestampWrite.endOfPassWriteIndex(%u)", v43, v40, v44, v40, v41, v42);
    int v21 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(NSString, "stringWithFormat:", @"query type is not timestamp but %d", v37);
    int v21 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  if (v21) {
    goto LABEL_18;
  }
LABEL_71:
  if ([*((id *)this + 2) status])
  {
    unsigned int v47 = (atomic_uchar *volatile *)*((void *)this + 10);
    uint64_t v24 = WTF::fastMalloc((WTF *)0x228);
    WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v47, @"command buffer has already been committed");
    return v24;
  }
  unsigned int v48 = objc_opt_new();
  long long v285 = v48;
  if ((unint64_t)a2[2] >= 9)
  {
    unsigned int v49 = (atomic_uchar *volatile *)*((void *)this + 10);
    uint64_t v24 = WTF::fastMalloc((WTF *)0x228);
    WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v49, @"color attachment count is > 8");
    goto LABEL_463;
  }
  WebGPU::CommandEncoder::finalizeBlitCommandEncoder((id *)this);
  uint64_t v277 = [MEMORY[0x1E4F1CA60] dictionary];
  uint64_t v50 = *((void *)this + 10);
  unsigned int v278 = *(_DWORD *)(v50 + 204);
  uint64_t v301 = 0;
  unint64_t v51 = a2[2];
  if (!v51)
  {
    long long v170 = a2 + 4;
    long long v169 = (uint64_t *)a2[4];
    if (!v169)
    {
      LODWORD(v174) = 0;
      long long v297 = 0;
      BOOL v175 = 0;
      char v176 = 0;
      goto LABEL_296;
    }
    unsigned __int32 v288 = 0;
    LODWORD(v53) = 0;
    __int32 v282 = 0;
    char v171 = 1;
    uint64_t v172 = *v169;
    long long v173 = *(void **)(*v169 + 16);
    if (!v173)
    {
LABEL_293:
      if (!*(unsigned char *)(*(void *)(v172 + 96) + 104))
      {
LABEL_312:
        long long v185 = @"depth stencil texture device mismatch";
        uint64_t v24 = WTF::fastMalloc((WTF *)0x228);
        long long v186 = @"depth stencil texture device mismatch";
        WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, (atomic_uchar *volatile *)v50, @"depth stencil texture device mismatch");
        long long v297 = 0;
LABEL_453:

        goto LABEL_454;
      }
    }
LABEL_308:
    uint64_t v183 = *(void *)(v172 + 88);
    if (*(void *)(v183 + 8)) {
      BOOL v184 = v183 == v50;
    }
    else {
      BOOL v184 = 0;
    }
    if (!v184) {
      goto LABEL_312;
    }
    uint64_t v187 = *(void *)(v172 + 96);
    int v188 = v53;
    if (*(unsigned char *)(v187 + 104)) {
      long long v173 = *(void **)(v187 + 16);
    }
    int64_t v287 = v173;
    unint64_t v195 = *(unsigned int *)(v172 + 40);
    BOOL v196 = v195 < 0x2C;
    long long v197 = *(uint32x2_t **)(v172 + 96);
    int v292 = v197[13].u8[0];
    BOOL v281 = v196;
    int v284 = *(_DWORD *)(v172 + 40);
    if (v197[13].i8[0])
    {
LABEL_320:
      int v198 = *((_DWORD *)v169 + 5);
      BOOL v296 = v198 != 0;
      int v199 = v196 & (0xF8000000000uLL >> v195);
      char v275 = v171;
      if (v199)
      {
        long long v200 = [v285 depthAttachment];
        float v201 = *((float *)v169 + 4);
        double v202 = v201;
        if (v201 >= 0.0 && v201 <= 1.0 && *(_DWORD *)(v172 + 40) == 39)
        {
          float v203 = v202 + 0.00000762951095;
          double v202 = nextafterf(v203, 1.0);
        }
        if (v202 <= 1.0) {
          double v204 = v202;
        }
        else {
          double v204 = 1.0;
        }
        BOOL v205 = v202 < 0.0;
        double v206 = 0.0;
        if (!v205) {
          double v206 = v204;
        }
        if (*((_DWORD *)v169 + 2) != 1) {
          double v206 = 1.0;
        }
        [v200 setClearDepth:v206];
        [v200 setTexture:v287];
        [v200 setLevel:0];
        int v207 = *((_DWORD *)v169 + 2);
        if (!v207 || v207 == 0x7FFFFFFF)
        {
          uint64_t v208 = 0;
        }
        else if (v207 == 1)
        {
          uint64_t v208 = 2;
        }
        else
        {
          uint64_t v208 = 1;
        }
        [v200 setLoadAction:v208];
        [v200 setStoreAction:*((_DWORD *)v169 + 3) == 1];
        if ([v200 loadAction] != 1
          || [v200 storeAction]
          || WebGPU::Texture::previouslyCleared(*(WebGPU::Texture **)(v172 + 96), [*(id *)(v172 + 16) parentRelativeLevel], objc_msgSend(*(id *)(v172 + 16), "parentRelativeSlice")))
        {
          long long v297 = 0;
          BOOL v213 = 0;
        }
        else
        {
          long long v297 = [v200 texture];
          long long v259 = [v200 texture];
          BOOL v213 = v259 != 0;
        }
      }
      else
      {
        long long v297 = 0;
        BOOL v213 = 0;
      }
      if (v292)
      {
        int v239 = *((_DWORD *)v169 + 2);
      }
      else
      {
        int v239 = *((_DWORD *)v169 + 2);
        if (v199) {
          BOOL v244 = v198 == 0;
        }
        else {
          BOOL v244 = 0;
        }
        if (!v244)
        {
          if (v239 || *((_DWORD *)v169 + 3))
          {
            long long v241 = @"depth load and store op were specified";
            goto LABEL_440;
          }
LABEL_384:
          if (v275)
          {
            [v285 setDefaultRasterSampleCount:*(unsigned int *)(*(void *)(v172 + 96) + 40)];
            if (![v285 defaultRasterSampleCount])
            {
              long long v241 = @"no color targets and depth-stencil texture is nil";
              goto LABEL_440;
            }
            objc_msgSend(v285, "setRenderTargetWidth:", -[__CFString width](v287, "width"));
            objc_msgSend(v285, "setRenderTargetHeight:", -[__CFString height](v287, "height"));

            LODWORD(v169) = v213;
            long long v174 = (uint64_t *)*v170;
            if (!*v170)
            {
              BOOL v175 = 0;
              unsigned int v48 = v285;
              char v176 = v296;
              goto LABEL_296;
            }
            char v243 = v284;
            long long v242 = v285;
          }
          else
          {

            LODWORD(v169) = v213;
            long long v174 = (uint64_t *)*v170;
            char v243 = v284;
            if (!*v170)
            {
              BOOL v175 = 0;
              unsigned int v48 = v285;
              char v176 = v296;
LABEL_297:
              char v291 = v175;
              char v295 = v176;
              uint64_t v177 = a2[5];
              if (v177)
              {
                WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>(v177 + 40, (uint64_t)this, (uint64_t)v302);
                if (*(unsigned char *)(v177 + 56))
                {
                  *((unsigned char *)this + 76) = 1;
                  uint64_t v178 = *((void *)this + 7);
                  if (v178)
                  {
                    long long v179 = *(WebGPU::CommandBuffer **)(v178 + 8);
                    if (v179) {
                      WebGPU::CommandBuffer::makeInvalid(v179, *((NSString **)this + 8));
                    }
                  }
                  unsigned int v48 = v285;
                }
                if (*(_DWORD *)(v177 + 36))
                {
                  long long v180 = (atomic_uchar *volatile *)*((void *)this + 10);
                  long long v181 = @"querySet for occlusion query was not of type occlusion";
                  uint64_t v24 = WTF::fastMalloc((WTF *)0x228);
                  long long v182 = @"querySet for occlusion query was not of type occlusion";
                  WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v180, @"querySet for occlusion query was not of type occlusion");
                  int64_t v287 = 0;
                  goto LABEL_451;
                }
                id v214 = *(id *)(v177 + 16);
                [v48 setVisibilityResultBuffer:v214];

                uint64_t v215 = [v285 visibilityResultBuffer];
                long long v194 = (__CFString *)v215;
                if (*(unsigned char *)(v177 + 56))
                {
                  uint64_t v193 = -1;
                }
                else
                {
                  *(void *)uint64_t v289 = v215;
                  id v229 = *(id *)(v177 + 16);
                  uint64_t v193 = [v229 length];

                  long long v194 = *(__CFString **)v289;
                }
              }
              else
              {
                uint64_t v193 = 0;
                long long v194 = 0;
              }
              if ([v277 count] || v297)
              {
                if (v297) {
                  WebGPU::Texture::setPreviouslyCleared(*(uint64_t **)(*(void *)*v170 + 96), [*(id *)(*(void *)*v170 + 16) parentRelativeLevel], objc_msgSend(*(id *)(*(void *)*v170 + 16), "parentRelativeSlice"), 1);
                }
                WebGPU::CommandEncoder::runClearEncoder((uint64_t)this, v277, v297, (int)v169, (int)v174, 0, 0, 0.0);
              }
              uint64_t v230 = *((void *)this + 10);
              if (*(void *)(v230 + 8))
              {
                long long v231 = [*((id *)this + 2) renderCommandEncoderWithDescriptor:v285];
                id v232 = v231;
                objc_storeStrong((id *)this + 5, v231);
                WebGPU::Queue::setEncoderForBuffer(*(void *)(*((void *)this + 10) + 16), *((void **)this + 2), v232);

                long long v233 = (atomic_uchar *volatile *)*((void *)this + 10);
                long long v182 = (__CFString *)v232;
                long long v234 = v194;
                id v235 = v285;
                int64_t v287 = v234;
                uint64_t v24 = WTF::fastMalloc((WTF *)0x228);
                WebGPU::RenderPassEncoder::RenderPassEncoder(v24, v182, (long long *)a2, v193, v295, v291, this, v234, v5, v233, v235);
              }
              else
              {
                long long v236 = @"GPUDevice was invalid, this will be an error submitting the command buffer";
                uint64_t v24 = WTF::fastMalloc((WTF *)0x228);
                long long v182 = @"GPUDevice was invalid, this will be an error submitting the command buffer";
                WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, (atomic_uchar *volatile *)v230, @"GPUDevice was invalid, this will be an error submitting the command buffer");
                int64_t v287 = v194;
              }
LABEL_451:

LABEL_452:
              long long v186 = v287;
              goto LABEL_453;
            }
            long long v242 = v285;
          }
          int64_t v287 = [v242 stencilAttachment];
          unint64_t v245 = 0xA4000000000uLL >> v243;
          int v246 = *((_DWORD *)v174 + 9);
          uint64_t v247 = *v174;
          int v248 = v281 & v245;
          if ((v281 & v245) != 0)
          {
            uint64_t v249 = *(void *)(v247 + 96);
            if (!*(unsigned char *)(v249 + 104)) {
              uint64_t v249 = *v174;
            }
            id v250 = *(id *)(v249 + 16);
            [(__CFString *)v287 setTexture:v250];
          }
          [(__CFString *)v287 setClearStencil:*((unsigned int *)v174 + 8)];
          int v251 = *((_DWORD *)v174 + 6);
          if (!v251 || v251 == 0x7FFFFFFF)
          {
            uint64_t v252 = 0;
          }
          else if (v251 == 1)
          {
            uint64_t v252 = 2;
          }
          else
          {
            uint64_t v252 = 1;
          }
          [(__CFString *)v287 setLoadAction:v252];
          [(__CFString *)v287 setStoreAction:*((_DWORD *)v174 + 7) == 1];
          if (*(unsigned char *)(*(void *)(v247 + 96) + 104))
          {
LABEL_424:
            WebGPU::TextureView::setCommandEncoder((WebGPU::TextureView *)v247, this);
            if (v248
              && [(__CFString *)v287 loadAction] == 1
              && ![(__CFString *)v287 storeAction]
              && !WebGPU::Texture::previouslyCleared(*(WebGPU::Texture **)(v247 + 96), [*(id *)(v247 + 16) parentRelativeLevel], objc_msgSend(*(id *)(v247 + 16), "parentRelativeSlice")))
            {
              uint64_t v267 = [(__CFString *)v287 texture];

              long long v268 = [(__CFString *)v287 texture];
              LODWORD(v174) = v268 != 0;

              long long v297 = (void *)v267;
            }
            else
            {
              LODWORD(v174) = 0;
            }

            unsigned int v48 = v285;
            char v176 = v296;
            BOOL v175 = v246 != 0;
            if ((v275 & 1) == 0) {
              goto LABEL_297;
            }
LABEL_296:
            if (![v48 renderTargetWidth])
            {
              long long v189 = (atomic_uchar *volatile *)*((void *)this + 10);
              long long v190 = @"zero color and depth targets";
              uint64_t v24 = WTF::fastMalloc((WTF *)0x228);
              long long v186 = @"zero color and depth targets";
              WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v189, @"zero color and depth targets");
              goto LABEL_453;
            }
            goto LABEL_297;
          }
          int v257 = *((_DWORD *)v174 + 6);
          if (!v248 || v246)
          {
            if (!v257 && !*((_DWORD *)v174 + 7)) {
              goto LABEL_424;
            }
            long long v241 = @"stencil load and store op were specified";
          }
          else
          {
            if (v257 && *((_DWORD *)v174 + 7)) {
              goto LABEL_424;
            }
            long long v241 = @"stencil load and store op were not specified";
          }
LABEL_440:
          long long v258 = (atomic_uchar *volatile *)*((void *)this + 10);
          long long v182 = v241;
          uint64_t v24 = WTF::fastMalloc((WTF *)0x228);
          WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v258, v182);
          goto LABEL_451;
        }
        if (!v239 || !*((_DWORD *)v169 + 3))
        {
          long long v241 = @"depth load and store op were not specified";
          goto LABEL_440;
        }
      }
      if (v239 == 1)
      {
        float v240 = *((float *)v169 + 4);
        long long v241 = @"depth clear value is invalid";
        if (v240 < 0.0 || v240 > 1.0) {
          goto LABEL_440;
        }
      }
      goto LABEL_384;
    }
    if (!v288) {
      goto LABEL_474;
    }
    char v276 = v171;
    unsigned int v209 = *(_DWORD *)(v172 + 48);
    int v210 = v197[5].i32[1];
    if (v210 == 2 || v210 == 1)
    {
      unint64_t v212 = (unint64_t)vmax_u32(vshl_u32(v197[3], (uint32x2_t)vneg_s32(vdup_n_s32(v209))), (uint32x2_t)0x100000001);
    }
    else if (v210)
    {
      unint64_t v212 = 0;
    }
    else
    {
      unsigned int v211 = (unsigned __int32)v197[3].i32[0] >> v209 <= 1 ? 1 : (unsigned __int32)v197[3].i32[0] >> v209;
      unint64_t v212 = v211 | 0x100000000;
    }
    int v298 = v197[6].i32[0];
    if (v288 == WebGPU::Texture::physicalTextureExtent(v197[5].i32[1], v298, v212)
      && (v210 == 2 || v210 == 1
        ? (v256 = (unint64_t)vmax_u32(vshl_u32(v197[3], (uint32x2_t)vneg_s32(vdup_n_s32(v209))), (uint32x2_t)0x100000001)): v210? (v256 = 0): ((unsigned __int32)v197[3].i32[0] >> v209 <= 1? (unsigned int v255 = 1): (unsigned int v255 = (unsigned __int32)v197[3].i32[0] >> v209), v256 = v255 | 0x100000000), v188 == WebGPU::Texture::physicalTextureExtent(v210, v298, v256) >> 32&& (v171 = v276, v282 == v197[5].i32[0])))
    {
LABEL_474:
      if (*(_DWORD *)(v172 + 60) <= 1u && (LODWORD(v195) = *(_DWORD *)(v172 + 52), v195 <= 1))
      {
        if ((v284 - 38) <= 5 && (v197[6].i8[4] & 0x10) != 0)
        {
          unsigned int v266 = *(_DWORD *)(v172 + 44);
          long long v260 = @"depth stencil texture is not renderable";
          if (v266 <= 6 && ((1 << v266) & 0x4C) != 0)
          {
            BOOL v39 = v195 == 1;
            BOOL v196 = v281;
            LOBYTE(v195) = v284;
            if (v39) {
              goto LABEL_320;
            }
          }
        }
        else
        {
          long long v260 = @"depth stencil texture is not renderable";
        }
      }
      else
      {
        long long v260 = @"depth stencil texture has more than one array layer or mip level";
      }
    }
    else
    {
      long long v260 = @"depth stencil texture dimensions mismatch";
    }
    long long v261 = (atomic_uchar *volatile *)*((void *)this + 10);
    long long v182 = v260;
    uint64_t v24 = WTF::fastMalloc((WTF *)0x228);
    WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v261, v182);
    long long v297 = 0;
    goto LABEL_451;
  }
  uint64_t v52 = 0;
  __int32 v282 = 0;
  unsigned int v283 = 0;
  unsigned __int32 v288 = 0;
  LODWORD(v53) = 0;
  unsigned int v54 = 0;
  char v273 = 1;
  while (1)
  {
    uint64_t v293 = a2[3];
    uint64_t v55 = v293 + 72 * v52;
    uint64_t v57 = *(void *)(v55 + 8);
    __int32 v56 = (uint64_t *)(v55 + 8);
    if (v57) {
      break;
    }
LABEL_77:
    uint64_t v52 = ++v54;
    if (v51 <= v54)
    {
      long long v170 = a2 + 4;
      long long v169 = (uint64_t *)a2[4];
      if (!v169)
      {
        LODWORD(v174) = 0;
        long long v297 = 0;
        BOOL v175 = 0;
        char v176 = 0;
        if (v273) {
          goto LABEL_296;
        }
        goto LABEL_297;
      }
      uint64_t v50 = *((void *)this + 10);
      char v171 = v273;
      uint64_t v172 = *v169;
      long long v173 = *(void **)(*v169 + 16);
      if (!v173) {
        goto LABEL_293;
      }
      goto LABEL_308;
    }
  }
  unsigned int v58 = [v48 colorAttachments];
  int v59 = v53;
  unsigned int v280 = v54;
  long long v297 = [v58 objectAtIndexedSubscript:v52];

  objc_msgSend(v297, "setClearColor:", *(double *)(v293 + 72 * v52 + 40), *(double *)(v293 + 72 * v52 + 48), *(double *)(v293 + 72 * v52 + 56), *(double *)(v293 + 72 * v52 + 64));
  uint64_t v60 = *v56;
  if (!*(void *)(*v56 + 16) && !*(unsigned char *)(*(void *)(v60 + 96) + 104))
  {
    unint64_t v62 = (atomic_uchar *volatile *)*((void *)this + 10);
LABEL_352:
    uint64_t v24 = WTF::fastMalloc((WTF *)0x228);
    WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v62, @"device mismatch");
    goto LABEL_454;
  }
  uint64_t v61 = *(void *)(v60 + 88);
  unint64_t v62 = (atomic_uchar *volatile *)*((void *)this + 10);
  if (*(void *)(v61 + 8)) {
    BOOL v63 = v61 == (void)v62;
  }
  else {
    BOOL v63 = 0;
  }
  if (!v63) {
    goto LABEL_352;
  }
  unsigned int v64 = *(uint32x2_t **)(v60 + 96);
  uint64_t v290 = v60;
  unsigned int v65 = *(_DWORD *)(v60 + 48);
  int v66 = v64[5].i32[1];
  int v67 = v64[6].i32[0];
  if (v288)
  {
    if (v66 == 2 || v66 == 1)
    {
      unint64_t v69 = (unint64_t)vmax_u32(vshl_u32(v64[3], (uint32x2_t)vneg_s32(vdup_n_s32(v65))), (uint32x2_t)0x100000001);
    }
    else if (v66)
    {
      unint64_t v69 = 0;
    }
    else
    {
      unsigned int v68 = (unsigned __int32)v64[3].i32[0] >> v65 <= 1 ? 1 : (unsigned __int32)v64[3].i32[0] >> v65;
      unint64_t v69 = v68 | 0x100000000;
    }
    if (v288 != WebGPU::Texture::physicalTextureExtent(v64[5].i32[1], v64[6].i32[0], v69)
      || (v66 == 2 || v66 == 1
        ? (v71 = (unint64_t)vmax_u32(vshl_u32(v64[3], (uint32x2_t)vneg_s32(vdup_n_s32(v65))), (uint32x2_t)0x100000001)): v66? (v71 = 0): ((unsigned __int32)v64[3].i32[0] >> v65 <= 1 ? (unsigned int v70 = 1) : (unsigned int v70 = (unsigned __int32)v64[3].i32[0] >> v65), v71 = v70 | 0x100000000), v59 != WebGPU::Texture::physicalTextureExtent(v66, v67, v71) >> 32 || v282 != v64[5].i32[0]))
    {
      uint64_t v24 = WTF::fastMalloc((WTF *)0x228);
      WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, (atomic_uchar *volatile *)v61, @"texture size does not match");
      goto LABEL_454;
    }
  }
  if (v66 == 2 || v66 == 1)
  {
    uint32x2_t v286 = vmax_u32(vshl_u32(v64[3], (uint32x2_t)vneg_s32(vdup_n_s32(v65))), (uint32x2_t)0x100000001);
    unsigned int v76 = WebGPU::Texture::texelBlockWidth(v67);
    unint64_t v75 = (unint64_t)v286;
    if (v286.i32[0] % v76) {
      unsigned __int32 v77 = v76 - v286.i32[0] % v76;
    }
    else {
      unsigned __int32 v77 = 0;
    }
    unsigned __int32 v288 = v77 + v286.i32[0];
  }
  else if (v66)
  {
    unsigned __int32 v288 = 0;
    unint64_t v75 = 0;
  }
  else
  {
    if ((unsigned __int32)v64[3].i32[0] >> v65 <= 1) {
      unsigned int v72 = 1;
    }
    else {
      unsigned int v72 = (unsigned __int32)v64[3].i32[0] >> v65;
    }
    unsigned int v73 = WebGPU::Texture::texelBlockWidth(v67);
    if (v72 % v73) {
      int v74 = v73 - v72 % v73;
    }
    else {
      int v74 = 0;
    }
    unsigned __int32 v288 = v74 + v72;
    unint64_t v75 = v72 | 0x100000000;
  }
  unint64_t v279 = WebGPU::Texture::physicalTextureExtent(v66, v67, v75);
  __int32 v282 = v64[5].i32[0];
  int v78 = *(_DWORD *)(v290 + 40);
  unsigned int v79 = WebGPU::Texture::renderTargetPixelByteAlignment(v78);
  int v80 = WebGPU::Texture::renderTargetPixelByteCost(v78);
  if (v283 % v79) {
    unsigned int v81 = v79 - v283 % v79;
  }
  else {
    unsigned int v81 = 0;
  }
  v283 += v80 + v81;
  if (v283 > v278)
  {
    uint64_t v24 = WTF::fastMalloc((WTF *)0x228);
    WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, (atomic_uchar *volatile *)v61, @"total bytes per sample exceeds limit");
    goto LABEL_454;
  }
  int v82 = v64[13].u8[0];
  if (v64[13].i8[0])
  {
LABEL_135:
    WebGPU::TextureView::setCommandEncoder((WebGPU::TextureView *)v290, this);
    uint64_t v84 = *(void *)(v290 + 96);
    if (!*(unsigned char *)(v84 + 104)) {
      uint64_t v84 = v290;
    }
    int64_t v287 = (__CFString *)*(id *)(v84 + 16);
    objc_msgSend(v297, "setTexture:");
    BOOL v85 = [v297 texture];
    BOOL v86 = v85 == 0;

    if (v86)
    {
      if (v82)
      {
LABEL_289:

        unint64_t v53 = HIDWORD(v279);
        unint64_t v51 = a2[2];
        unsigned int v48 = v285;
        unsigned int v54 = v280;
        goto LABEL_77;
      }
      long long v224 = (atomic_uchar *volatile *)*((void *)this + 10);
      long long v225 = @"color attachment's texture is nil";
      uint64_t v24 = WTF::fastMalloc((WTF *)0x228);
      long long v226 = @"color attachment's texture is nil";
      WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v224, @"color attachment's texture is nil");
    }
    else
    {
      [v297 setLevel:0];
      [v297 setSlice:0];
      int v87 = *(_DWORD *)(v290 + 44);
      uint64_t v88 = v293 + 72 * v52;
      if (*(unsigned char *)(v88 + 20))
      {
        if (v87 == 6)
        {
          if (v82) {
            unint64_t v89 = 0;
          }
          else {
            unint64_t v89 = *(unsigned int *)(v88 + 16);
          }
          unint64_t v91 = *(uint32x2_t **)(v290 + 96);
          unsigned int v92 = *(_DWORD *)(v290 + 48);
          int v93 = v91[5].i32[1];
          if (v93 == 2 || v93 == 1)
          {
            unint64_t v96 = (unint64_t)vmax_u32(vshl_u32(v91[3], (uint32x2_t)vneg_s32(vdup_n_s32(v92))), (uint32x2_t)0x100000001);
          }
          else if (v93)
          {
            unint64_t v96 = 0;
          }
          else
          {
            unsigned int v94 = (unsigned __int32)v91[3].i32[0] >> v92;
            if (v94 <= 1) {
              unsigned int v95 = 1;
            }
            else {
              unsigned int v95 = v94;
            }
            unint64_t v96 = v95 | 0x100000000;
          }
          WebGPU::Texture::physicalTextureExtent(v93, v91[6].i32[0], v96);
          if (v89 < v97)
          {
            id v90 = *(id *)&v91[2];
            if (v82) {
              goto LABEL_159;
            }
            goto LABEL_161;
          }
          long long v222 = (atomic_uchar *volatile *)*((void *)this + 10);
          long long v223 = @"depthSlice is greater than texture's depth or array layers";
          uint64_t v24 = WTF::fastMalloc((WTF *)0x228);
          long long v226 = @"depthSlice is greater than texture's depth or array layers";
          WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v222, @"depthSlice is greater than texture's depth or array layers");
        }
        else
        {
          long long v220 = (atomic_uchar *volatile *)*((void *)this + 10);
          long long v221 = @"depthSlice specified on 2D texture";
          uint64_t v24 = WTF::fastMalloc((WTF *)0x228);
          long long v226 = @"depthSlice specified on 2D texture";
          WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v220, @"depthSlice specified on 2D texture");
        }
      }
      else
      {
        if (v87 != 6)
        {
          if (v82)
          {
            id v90 = *(id *)(*(void *)(v290 + 96) + 16);
            unint64_t v89 = 0;
LABEL_159:
            uint64_t v98 = 0;
LABEL_162:
            uint64_t v99 = v89 | (v98 << 32);
            uint64_t v300 = v99;
            uint64_t v100 = v301;
            uint64_t v101 = ~((void)v90 << 32);
            if (v301)
            {
              unsigned int v102 = *(_DWORD *)(v301 - 8);
              unint64_t v103 = (((unint64_t)v90 + v101) ^ (((unint64_t)v90 + v101) >> 22))
                   + ~((((unint64_t)v90 + v101) ^ (((unint64_t)v90 + v101) >> 22)) << 13);
              unint64_t v104 = (9 * (v103 ^ (v103 >> 8))) ^ ((9 * (v103 ^ (v103 >> 8))) >> 15);
              uint64_t v105 = v102 & (((v104 + ~(v104 << 27)) >> 31) ^ (v104 + ~(v104 << 27)));
              id v106 = *(id *)(v301 + 16 * v105);
              if (v106 != v90)
              {
                int v107 = 1;
                while (v106)
                {
                  uint64_t v105 = (v105 + v107) & v102;
                  id v106 = *(id *)(v301 + 16 * v105);
                  ++v107;
                  if (v106 == v90) {
                    goto LABEL_169;
                  }
                }
                uint64_t v105 = *(unsigned int *)(v301 - 4);
              }
LABEL_169:
              if (v105 != *(_DWORD *)(v301 - 4))
              {
                WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::add(v302, (uint64_t *)(v301 + 16 * v105 + 8), &v300);
                if (!v303)
                {
                  long long v253 = (atomic_uchar *volatile *)*((void *)this + 10);
                  long long v254 = @"attempting to render to overlapping color attachment";
                  uint64_t v24 = WTF::fastMalloc((WTF *)0x228);
                  WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v253, @"attempting to render to overlapping color attachment");

                  goto LABEL_452;
                }
                goto LABEL_199;
              }
            }
            v304[0] = v99;
            uint64_t v299 = 0;
            WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::add(v302, &v299, v304);
            if (v100
              || (WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(&v301, 8u), (uint64_t v100 = v301) != 0))
            {
              int v109 = *(_DWORD *)(v100 - 8);
            }
            else
            {
              int v109 = 0;
            }
            unint64_t v110 = (((unint64_t)v90 + v101) ^ (((unint64_t)v90 + v101) >> 22))
                 + ~((((unint64_t)v90 + v101) ^ (((unint64_t)v90 + v101) >> 22)) << 13);
            unint64_t v111 = (9 * (v110 ^ (v110 >> 8))) ^ ((9 * (v110 ^ (v110 >> 8))) >> 15);
            unsigned int v112 = v109 & (((v111 + ~(v111 << 27)) >> 31) ^ (v111 + ~(v111 << 27)));
            unsigned int v113 = (void *)(v100 + 16 * v112);
            id v114 = (id)*v113;
            if (*v113)
            {
              uint64_t v115 = 0;
              int v116 = 1;
              while (v114 != v90)
              {
                if (v114 == (id)-1) {
                  uint64_t v115 = v113;
                }
                unsigned int v112 = (v112 + v116) & v109;
                unsigned int v113 = (void *)(v100 + 16 * v112);
                id v114 = (id)*v113;
                ++v116;
                if (!*v113)
                {
                  if (v115)
                  {
                    *uint64_t v115 = 0;
                    v115[1] = 0;
                    --*(_DWORD *)(v100 - 16);
                    unsigned int v113 = v115;
                  }
                  goto LABEL_181;
                }
              }
              uint64_t v121 = v299;
              uint64_t v299 = 0;
              uint64_t v122 = v113[1];
              v113[1] = v121;
              if (!v122) {
                goto LABEL_199;
              }
              WTF::fastFree((WTF *)(v122 - 16), v108);
              goto LABEL_197;
            }
LABEL_181:
            *unsigned int v113 = v90;
            uint64_t v117 = v299;
            uint64_t v299 = 0;
            uint64_t v118 = v113[1];
            v113[1] = v117;
            if (v118) {
              WTF::fastFree((WTF *)(v118 - 16), v108);
            }
            uint64_t v119 = v301;
            if (v301) {
              int v120 = *(_DWORD *)(v301 - 12) + 1;
            }
            else {
              int v120 = 1;
            }
            *(_DWORD *)(v301 - 12) = v120;
            uint64_t v123 = (*(_DWORD *)(v119 - 16) + v120);
            unint64_t v124 = *(unsigned int *)(v119 - 4);
            if (v124 > 0x400)
            {
              if (v124 > 2 * v123) {
                goto LABEL_197;
              }
            }
            else
            {
              if (3 * v124 > 4 * v123) {
                goto LABEL_197;
              }
              if (!v124)
              {
                unsigned int v125 = 8;
LABEL_196:
                WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(&v301, v125);
LABEL_197:
                if (v299) {
                  WTF::fastFree((WTF *)(v299 - 16), v108);
                }
LABEL_199:
                if (v87 == 6) {
                  unint64_t v126 = v89;
                }
                else {
                  unint64_t v126 = 0;
                }
                [v297 setDepthPlane:v126];
                [v297 setSlice:0];
                int v127 = *(_DWORD *)(v293 + 72 * v52 + 32);
                if (!v127 || v127 == 0x7FFFFFFF)
                {
                  uint64_t v128 = 0;
                }
                else if (v127 == 1)
                {
                  uint64_t v128 = 2;
                }
                else
                {
                  uint64_t v128 = 1;
                }
                [v297 setLoadAction:v128];
                uint64_t v129 = v293 + 72 * v52;
                uint64_t v131 = *(void *)(v129 + 24);
                uint64_t v130 = v129 + 24;
                int v132 = *(_DWORD *)(v130 + 12);
                uint64_t v133 = 2 * (v131 != 0);
                uint64_t v134 = 3;
                if (!v131) {
                  uint64_t v134 = 1;
                }
                if (v132 != 1) {
                  uint64_t v134 = 0;
                }
                if (v132 == 2) {
                  uint64_t v134 = v133;
                }
                if (v132) {
                  uint64_t v135 = v134;
                }
                else {
                  uint64_t v135 = v133;
                }
                [v297 setStoreAction:v135];
                if ([v297 loadAction] == 1
                  && !WebGPU::Texture::previouslyCleared(*(WebGPU::Texture **)(v290 + 96), [*(id *)(v290 + 16) parentRelativeLevel], objc_msgSend(*(id *)(v290 + 16), "parentRelativeSlice")))
                {
                  unsigned int v294 = [v297 texture];
                }
                else
                {
                  unsigned int v294 = 0;
                }
                uint64_t v136 = *(WebGPU::TextureView **)v130;
                if (*(void *)v130)
                {
                  unint64_t v137 = (atomic_uchar *volatile *)*((void *)this + 10);
                  if (!*((void *)v136 + 2) && !*(unsigned char *)(*((void *)v136 + 12) + 104)
                    || ((long long v138 = (atomic_uchar *volatile *)*((void *)v136 + 11), *((void *)v138 + 1))
                      ? (BOOL v139 = v138 == v137)
                      : (BOOL v139 = 0),
                        !v139))
                  {
                    long long v219 = @"resolve target created from different device";
                    uint64_t v24 = WTF::fastMalloc((WTF *)0x228);
                    uint64_t v274 = @"resolve target created from different device";
                    WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v137, @"resolve target created from different device");
                    goto LABEL_361;
                  }
                  WebGPU::TextureView::setCommandEncoder(*(WebGPU::TextureView **)v130, this);
                  id v140 = (WebGPU::TextureView *)*((void *)v136 + 12);
                  if (!*((unsigned char *)v140 + 104)) {
                    id v140 = v136;
                  }
                  uint64_t v274 = (__CFString *)*((id *)v140 + 2);
                  if ([(__CFString *)v287 sampleCount] == 1
                    || [(__CFString *)v274 sampleCount] != 1)
                  {
                    goto LABEL_359;
                  }
                  uint64_t v141 = v274;
                  if ([(__CFString *)v141 textureType] == 4)
                  {

LABEL_359:
                    long long v227 = (atomic_uchar *volatile *)*((void *)this + 10);
                    long long v228 = @"resolve target is invalid";
                    uint64_t v24 = WTF::fastMalloc((WTF *)0x228);
                    long long v218 = @"resolve target is invalid";
                    WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v227, @"resolve target is invalid");
LABEL_360:

LABEL_361:
                    goto LABEL_452;
                  }
                  BOOL v142 = [(__CFString *)v141 textureType] == 8;
                  uint64_t v272 = v141;

                  if (v142) {
                    goto LABEL_359;
                  }
                  long long v143 = v287;
                  if ([(__CFString *)v143 textureType] == 4)
                  {

                    uint64_t v144 = v272;
                  }
                  else
                  {
                    BOOL v145 = [(__CFString *)v143 textureType] == 8;

                    uint64_t v144 = v272;
                    if (!v145) {
                      goto LABEL_359;
                    }
                  }
                  if ((*(unsigned char *)(*((void *)v136 + 12) + 52) & 0x10) == 0) {
                    goto LABEL_359;
                  }
                  unsigned int v146 = *((_DWORD *)v136 + 11);
                  if (v146 > 6) {
                    goto LABEL_359;
                  }
                  if (((1 << v146) & 0x4C) == 0) {
                    goto LABEL_359;
                  }
                  if (*((_DWORD *)v136 + 13) != 1) {
                    goto LABEL_359;
                  }
                  if (*((_DWORD *)v136 + 15) > 1u) {
                    goto LABEL_359;
                  }
                  uint64_t v147 = [(__CFString *)v143 pixelFormat];
                  if (v147 != [(__CFString *)v144 pixelFormat]
                    || (WebGPU::Texture::supportsResolve(*((_DWORD *)v136 + 10), *((void *)this + 10)) & 1) == 0)
                  {
                    goto LABEL_359;
                  }
                  [v297 setResolveTexture:v144];
                  [v297 setResolveLevel:0];
                  [v297 setResolveSlice:0];
                  [v297 setResolveDepthPlane:0];
                  uint64_t v148 = (uint32x2_t *)*((void *)v136 + 12);
                  unsigned int v149 = *((_DWORD *)v136 + 12);
                  int v150 = v148[5].i32[1];
                  unsigned int v270 = v149;
                  if (v150 == 2 || v150 == 1)
                  {
                    unint64_t v152 = (unint64_t)vmax_u32(vshl_u32(v148[3], (uint32x2_t)vneg_s32(vdup_n_s32(v149))), (uint32x2_t)0x100000001);
                  }
                  else if (v150)
                  {
                    unint64_t v152 = 0;
                  }
                  else
                  {
                    if ((unsigned __int32)v148[3].i32[0] >> v149 <= 1) {
                      unsigned int v151 = 1;
                    }
                    else {
                      unsigned int v151 = (unsigned __int32)v148[3].i32[0] >> v149;
                    }
                    unint64_t v152 = v151 | 0x100000000;
                  }
                  int v153 = v148[6].i32[0];
                  int v154 = WebGPU::Texture::physicalTextureExtent(v150, v153, v152);
                  long long v155 = *(uint32x2_t **)(v290 + 96);
                  unsigned int v156 = *(_DWORD *)(v290 + 48);
                  int v157 = v155[5].i32[1];
                  unsigned int v269 = v156;
                  int v271 = v153;
                  if (v157 == 2 || v157 == 1)
                  {
                    unint64_t v159 = (unint64_t)vmax_u32(vshl_u32(v155[3], (uint32x2_t)vneg_s32(vdup_n_s32(v156))), (uint32x2_t)0x100000001);
                  }
                  else if (v157)
                  {
                    unint64_t v159 = 0;
                  }
                  else
                  {
                    if ((unsigned __int32)v155[3].i32[0] >> v156 <= 1) {
                      unsigned int v158 = 1;
                    }
                    else {
                      unsigned int v158 = (unsigned __int32)v155[3].i32[0] >> v156;
                    }
                    unint64_t v159 = v158 | 0x100000000;
                  }
                  int v160 = v155[6].i32[0];
                  if (v154 != WebGPU::Texture::physicalTextureExtent(v157, v160, v159)
                    || (v150 == 2 || v150 == 1
                      ? (v162 = (unint64_t)vmax_u32(vshl_u32(v148[3], (uint32x2_t)vneg_s32(vdup_n_s32(v270))), (uint32x2_t)0x100000001)): v150? (v162 = 0): ((unsigned __int32)v148[3].i32[0] >> v270 <= 1? (unsigned int v161 = 1): (unsigned int v161 = (unsigned __int32)v148[3].i32[0] >> v270), v162 = v161 | 0x100000000), (v163 = WebGPU::Texture::physicalTextureExtent(v150, v271, v162), v157 == 2) || v157 == 1? (v165 = (unint64_t)vmax_u32(vshl_u32(v155[3], (uint32x2_t)vneg_s32(vdup_n_s32(v269))), (uint32x2_t)0x100000001)): v157? (v165 = 0): ((unsigned __int32)v155[3].i32[0] >> v269 <= 1? (v164 = 1): (v164 = (unsigned __int32)v155[3].i32[0] >> v269), v165 = v164 | 0x100000000), HIDWORD(v163) != WebGPU::Texture::physicalTextureExtent(v157, v160, v165) >> 32))
                  {
                    long long v216 = (atomic_uchar *volatile *)*((void *)this + 10);
                    long long v217 = @"resolve target dimensions are invalid";
                    uint64_t v24 = WTF::fastMalloc((WTF *)0x228);
                    long long v218 = @"resolve target dimensions are invalid";
                    WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v216, @"resolve target dimensions are invalid");
                    goto LABEL_360;
                  }
                }
                long long v166 = v294;
                if (v294)
                {
                  long long v167 = [[TextureAndClearColor alloc] initWithTexture:v294];
                  long long v168 = [NSNumber numberWithUnsignedInt:v280];
                  [v277 setObject:v167 forKey:v168];

                  WebGPU::Texture::setPreviouslyCleared(*(uint64_t **)(v290 + 96), [*(id *)(v290 + 16) parentRelativeLevel], objc_msgSend(*(id *)(v290 + 16), "parentRelativeSlice"), 1);
                  if (*(void *)v130) {
                    WebGPU::Texture::setPreviouslyCleared(*(uint64_t **)(*(void *)v130 + 96), [*(id *)(*(void *)v130 + 16) parentRelativeLevel], objc_msgSend(*(id *)(*(void *)v130 + 16), "parentRelativeSlice"), 1);
                  }

                  long long v166 = v294;
                }

                char v273 = 0;
                goto LABEL_289;
              }
            }
            unsigned int v125 = v124 << (6 * v120 >= (2 * v124));
            goto LABEL_196;
          }
          unint64_t v89 = *(unsigned int *)(v290 + 56);
          id v90 = *(id *)(*(void *)(v290 + 96) + 16);
LABEL_161:
          uint64_t v98 = *(unsigned int *)(v290 + 48);
          goto LABEL_162;
        }
        long long v237 = (atomic_uchar *volatile *)*((void *)this + 10);
        unsigned int v238 = @"textureDimension is 3D and no depth slice is specified";
        uint64_t v24 = WTF::fastMalloc((WTF *)0x228);
        long long v226 = @"textureDimension is 3D and no depth slice is specified";
        WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v237, @"textureDimension is 3D and no depth slice is specified");
      }
    }

    goto LABEL_452;
  }
  if ((v64[6].i8[4] & 0x10) == 0) {
    goto LABEL_356;
  }
  if (WebGPU::Texture::isColorRenderableFormat(v78, v61))
  {
    if ((*(unsigned char *)(*(void *)(v290 + 96) + 52) & 0x10) == 0
      || (unsigned int v83 = *(_DWORD *)(v290 + 44), v83 > 6)
      || ((1 << v83) & 0x4C) == 0
      || *(_DWORD *)(v290 + 52) != 1
      || *(_DWORD *)(v290 + 60) >= 2u)
    {
      long long v191 = (atomic_uchar *volatile *)*((void *)this + 10);
      long long v192 = @"texture view is not renderable";
      uint64_t v24 = WTF::fastMalloc((WTF *)0x228);
      long long v186 = @"texture view is not renderable";
      WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, v191, @"texture view is not renderable");
      goto LABEL_453;
    }
    goto LABEL_135;
  }
  uint64_t v61 = *((void *)this + 10);
LABEL_356:
  uint64_t v24 = WTF::fastMalloc((WTF *)0x228);
  WebGPU::RenderPassEncoder::RenderPassEncoder(v24, this, (atomic_uchar *volatile *)v61, @"color attachment is not renderable");
LABEL_454:

  uint64_t v263 = v301;
  if (v301)
  {
    uint64_t v264 = *(unsigned int *)(v301 - 4);
    if (v264)
    {
      long long v265 = (void *)(v301 + 8);
      do
      {
        if (*(v265 - 1) != -1 && *v265) {
          WTF::fastFree((WTF *)(*v265 - 16), v262);
        }
        v265 += 2;
        --v264;
      }
      while (v264);
    }
    WTF::fastFree((WTF *)(v263 - 16), v262);
  }

  unsigned int v48 = v285;
LABEL_463:

  return v24;
}

void sub_1824E6454(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  WTF::fastFree(v30, a2);

  uint64_t v35 = *(void *)(v32 - 136);
  if (v35)
  {
    uint64_t v36 = *(unsigned int *)(v35 - 4);
    if (v36)
    {
      uint64_t v37 = (void *)(v35 + 8);
      do
      {
        if (*(v37 - 1) != -1)
        {
          if (*v37) {
            WTF::fastFree((WTF *)(*v37 - 16), v34);
          }
        }
        v37 += 2;
        --v36;
      }
      while (v36);
    }
    WTF::fastFree((WTF *)(v35 - 16), v34);
  }

  _Unwind_Resume(a1);
}

void wgpuCommandEncoderCopyBufferToBuffer(WebGPU::CommandEncoder *a1, WebGPU::Buffer *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v9 = *((unsigned __int8 *)a1 + 4);
  int v7 = (WebGPU::CommandEncoder *)((char *)a1 + 4);
  int v8 = v9;
  if ((v9 - 3) < 0xFFFFFFFE)
  {
    int v11 = *((unsigned __int8 *)this + 52);
    if (v11 != 4)
    {
      if (!*((void *)this + 2)
        || (uint64_t v24 = *((void *)this + 35), !*(void *)(v24 + 8))
        || v24 != *((void *)a1 + 10))
      {
        uint64_t v13 = @"GPUCommandEncoder.copyBufferToBuffer: source buffer is not valid";
        goto LABEL_51;
      }
    }
    int v12 = *(unsigned __int8 *)(a4 + 52);
    if (v12 != 4)
    {
      if (!*(void *)(a4 + 16) || (uint64_t v26 = *(void *)(a4 + 280), !*(void *)(v26 + 8)) || v26 != *((void *)a1 + 10))
      {
        uint64_t v13 = @"GPUCommandEncoder.copyBufferToBuffer: destination buffer is not valid";
        goto LABEL_51;
      }
    }
    if ((*((unsigned char *)this + 48) & 4) == 0)
    {
      uint64_t v13 = @"GPUCommandEncoder.copyBufferToBuffer: source usage does not have COPY_SRC";
      goto LABEL_51;
    }
    if ((*(unsigned char *)(a4 + 48) & 8) == 0)
    {
      uint64_t v13 = @"GPUCommandEncoder.copyBufferToBuffer: destination usage does not have COPY_DST";
      goto LABEL_51;
    }
    uint64_t v13 = @"GPUCommandEncoder.copyBufferToBuffer: destination state is not unmapped or source state is not unmapped";
    if (v11 == 2 || v12 == 2) {
      goto LABEL_51;
    }
    if ((a6 & 3) != 0)
    {
      uint64_t v13 = @"GPUCommandEncoder.copyBufferToBuffer: size is not a multiple of 4";
      goto LABEL_51;
    }
    if ((a3 & 3) != 0)
    {
      uint64_t v13 = @"GPUCommandEncoder.copyBufferToBuffer: source offset is not a multiple of 4";
      goto LABEL_51;
    }
    if ((a5 & 3) != 0)
    {
      uint64_t v13 = @"GPUCommandEncoder.copyBufferToBuffer: destination offset is not a multiple of 4";
      goto LABEL_51;
    }
    if (!__CFADD__(a3, a6))
    {
      if (!__CFADD__(a5, a6))
      {
        if (*((void *)this + 5) < (unint64_t)(a3 + a6)) {
          goto LABEL_50;
        }
        if (*(void *)(a4 + 40) >= (unint64_t)(a5 + a6))
        {
          if (this != (WebGPU::Buffer *)a4)
          {
            WebGPU::Buffer::setCommandEncoder(this, a1);
            WebGPU::Buffer::setCommandEncoder((WebGPU::Buffer *)a4, a1);
            *(void *)(a4 + 232) = -1;
            *(void *)(a4 + 240) = -1;
            *(void *)(a4 + 272) = 0;
            *(void *)(a4 + 248) = 0;
            *(void *)(a4 + 256) = 0;
            *(_DWORD *)(a4 + 264) = 0;
            if (!a6 || *((unsigned char *)this + 52) == 4 || *(unsigned char *)(a4 + 52) == 4) {
              return;
            }
            id v31 = WebGPU::CommandEncoder::ensureBlitCommandEncoder((id *)a1);
            uint64_t v32 = (void *)*((void *)a1 + 4);
            uint64_t v33 = (NSString *)*((id *)this + 2);
            objc_msgSend(v32, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:");
            goto LABEL_52;
          }
          uint64_t v13 = @"GPUCommandEncoder.copyBufferToBuffer: source equals destination not valid";
LABEL_51:
          uint64_t v33 = v13;
          WebGPU::CommandEncoder::makeInvalid(a1, v33);
LABEL_52:

          return;
        }
      }
      uint64_t v13 = @"GPUCommandEncoder.copyBufferToBuffer: destination size + offset overflows";
      goto LABEL_51;
    }
LABEL_50:
    uint64_t v13 = @"GPUCommandEncoder.copyBufferToBuffer: source size + offset overflows";
    goto LABEL_51;
  }
  if (v8 == 2)
  {
    uint64_t v14 = *((void *)a1 + 10);
    int v15 = NSString;
    uint64_t v16 = WebGPU::CommandsMixin::encoderStateName(v7);
    uint64_t v17 = [v15 stringWithFormat:@"%s: encoder state is %@", "void WebGPU::CommandEncoder::copyBufferToBuffer(const Buffer &, uint64_t, Buffer &, uint64_t, uint64_t)", v16];
    MEMORY[0x18530AF50](&v35, v17);
    uint64_t v18 = *(void *)(v14 + 32);
    uint64_t v19 = 32 * *(unsigned int *)(v14 + 44);
    uint64_t v20 = v18 + v19;
    while (v19)
    {
      int v21 = *(_DWORD *)(v20 - 8);
      v20 -= 32;
      v19 -= 32;
      if (!v21)
      {
        uint64_t v22 = v18 + v19;
        if (!*(unsigned char *)(v22 + 16))
        {
          uint64_t v23 = v35;
          uint64_t v35 = 0;
          *(_DWORD *)uint64_t v22 = 1;
          *(void *)(v22 + 8) = v23;
          *(unsigned char *)(v22 + 16) = 1;
        }
        goto LABEL_29;
      }
    }
    uint64_t v27 = *(void *)(v14 + 24);
    if (v27)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v27 + 16))(v27, 1, &v35);
      uint64_t v28 = *(void *)(v14 + 24);
      *(void *)(v14 + 24) = 0;
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
      }
    }
LABEL_29:
    uint64_t v29 = v35;
    uint64_t v35 = 0;
    if (v29)
    {
      if (*v29 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v29 -= 2;
      }
    }
  }
  else
  {
    if (*((void *)a1 + 8)) {
      uint64_t v25 = (__CFString *)*((void *)a1 + 8);
    }
    else {
      uint64_t v25 = @"Encoder state is locked";
    }
    WebGPU::CommandEncoder::makeInvalid(a1, &v25->isa);
  }
}

void sub_1824E6D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
  _Unwind_Resume(a1);
}

void sub_1824E6DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  if (a14)
  {
    if (*a14 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a14 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_1824E6E04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824E6E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
  _Unwind_Resume(a1);
}

void wgpuCommandEncoderCopyTextureToTexture(WebGPU::CommandEncoder *this, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (*(void *)a2 | *(void *)a3) {
    return;
  }
  int v7 = *((unsigned __int8 *)this + 4);
  uint64_t v5 = (WebGPU::CommandEncoder *)((char *)this + 4);
  int v6 = v7;
  if ((v7 - 3) >= 0xFFFFFFFE)
  {
    if (v6 == 2)
    {
      uint64_t v16 = *((void *)this + 10);
      uint64_t v17 = NSString;
      uint64_t v18 = WebGPU::CommandsMixin::encoderStateName(v5);
      uint64_t v19 = [v17 stringWithFormat:@"%s: encoder state is %@", "void WebGPU::CommandEncoder::copyTextureToTexture(const WGPUImageCopyTexture &, const WGPUImageCopyTexture &, const WGPUExtent3D &)", v18];
      MEMORY[0x18530AF50](&v113, v19);
      uint64_t v20 = *(void *)(v16 + 32);
      uint64_t v21 = 32 * *(unsigned int *)(v16 + 44);
      uint64_t v22 = v20 + v21;
      while (v21)
      {
        int v23 = *(_DWORD *)(v22 - 8);
        v22 -= 32;
        v21 -= 32;
        if (!v23)
        {
          uint64_t v24 = v20 + v21;
          if (!*(unsigned char *)(v24 + 16))
          {
            uint64_t v25 = v113;
            *(void *)&long long v113 = 0;
            *(_DWORD *)uint64_t v24 = 1;
            *(void *)(v24 + 8) = v25;
            *(unsigned char *)(v24 + 16) = 1;
          }
          goto LABEL_27;
        }
      }
      uint64_t v27 = *(void *)(v16 + 24);
      if (v27)
      {
        (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v27 + 16))(v27, 1, &v113);
        uint64_t v28 = *(void *)(v16 + 24);
        *(void *)(v16 + 24) = 0;
        if (v28) {
          (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
        }
      }
LABEL_27:
      uint64_t v29 = (_DWORD *)v113;
      *(void *)&long long v113 = 0;
      if (v29)
      {
        if (*v29 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v29 -= 2;
        }
      }
    }
    else
    {
      if (*((void *)this + 8)) {
        uint64_t v26 = (__CFString *)*((void *)this + 8);
      }
      else {
        uint64_t v26 = @"Encoder state is locked";
      }
      WebGPU::CommandEncoder::makeInvalid(this, &v26->isa);
    }
    return;
  }
  uint64_t v11 = *(void *)(a2 + 8);
  if (!*(unsigned char *)(v11 + 104) && !*(void *)(v11 + 16)
    || (uint64_t v12 = *(void *)(v11 + 72), !*(void *)(v12 + 8))
    || v12 != *((void *)this + 10))
  {
    uint64_t v13 = NSString;
    uint64_t v14 = @"source texture is not valid to use with this GPUCommandEncoder";
    goto LABEL_8;
  }
  uint64_t v30 = *(void *)(a3 + 8);
  if (!*(unsigned char *)(v30 + 104) && !*(void *)(v30 + 16)
    || ((uint64_t v31 = *(void *)(v30 + 72), v31 == v12) ? (v32 = *(void *)(v31 + 8) == 0) : (v32 = 1), v32))
  {
    uint64_t v13 = NSString;
    uint64_t v14 = @"desintation texture is not valid to use with this GPUCommandEncoder";
    goto LABEL_8;
  }
  uint64_t v33 = WebGPU::Texture::errorValidatingImageCopyTexture(a2, a4);
  if (v33)
  {
LABEL_41:
    uint64_t v34 = (void *)v33;
    uint64_t v105 = [NSString stringWithFormat:@"GPUCommandEncoder.copyTextureToTexture: %@", v33];

    int v15 = v105;
    if (v105) {
      goto LABEL_9;
    }
LABEL_42:
    uint64_t v35 = *(void *)(a2 + 8);
    uint64_t v36 = *(void *)(a3 + 8);
    goto LABEL_43;
  }
  if ((*(unsigned char *)(v11 + 52) & 1) == 0)
  {
    uint64_t v13 = NSString;
    uint64_t v14 = @"source texture usage does not contain CopySrc";
    goto LABEL_8;
  }
  uint64_t v33 = WebGPU::Texture::errorValidatingImageCopyTexture(a3, a4);
  if (v33) {
    goto LABEL_41;
  }
  if ((*(unsigned char *)(v30 + 52) & 2) == 0)
  {
    uint64_t v13 = NSString;
    uint64_t v14 = @"destination texture usage does not contain CopyDst";
    goto LABEL_8;
  }
  if (*(_DWORD *)(v11 + 40) != *(_DWORD *)(v30 + 40))
  {
    uint64_t v13 = NSString;
    uint64_t v14 = @"destination texture sample count does not equal source texture sample count";
    goto LABEL_8;
  }
  uint64_t v80 = *(unsigned int *)(v11 + 48);
  uint64_t v81 = *(unsigned int *)(v30 + 48);
  if (v80 != v81)
  {
    int v82 = WebGPU::Texture::removeSRGBSuffix(v80);
    if (v82 != WebGPU::Texture::removeSRGBSuffix(v81))
    {
      uint64_t v13 = NSString;
      uint64_t v14 = @"destination texture and source texture are not copy compatible";
      goto LABEL_8;
    }
  }
  int v83 = *(_DWORD *)(a2 + 32);
  if ((v80 - 38) <= 5)
  {
    if (v83 == 1)
    {
      if (v80 != 38) {
        goto LABEL_155;
      }
    }
    else if (v83 == 0x7FFFFFFF || v83 == 2 && (v80 > 0x2A || ((1 << v80) & 0x58000000000) == 0))
    {
      goto LABEL_155;
    }
    int v92 = *(_DWORD *)(a3 + 32);
    if (v92 == 1)
    {
      if (v81 == 38) {
        goto LABEL_151;
      }
    }
    else if (v92 != 0x7FFFFFFF && (v92 != 2 || v81 <= 0x2A && ((1 << v81) & 0x58000000000) != 0))
    {
      goto LABEL_151;
    }
LABEL_155:
    uint64_t v13 = NSString;
    uint64_t v14 = @"source or destination do not refer to a single copy aspect";
    goto LABEL_8;
  }
  if (v83)
  {
    uint64_t v13 = NSString;
    uint64_t v14 = @"source aspect is not All";
    goto LABEL_8;
  }
  if ((v81 - 38) >= 6 && *(_DWORD *)(a3 + 32))
  {
    uint64_t v13 = NSString;
    uint64_t v14 = @"destination aspect is not All";
    goto LABEL_8;
  }
LABEL_151:
  uint64_t v33 = WebGPU::Texture::errorValidatingTextureCopyRange(a2, a4);
  if (v33) {
    goto LABEL_41;
  }
  uint64_t v33 = WebGPU::Texture::errorValidatingTextureCopyRange(a3, a4);
  if (v33) {
    goto LABEL_41;
  }
  uint64_t v35 = *(void *)(a2 + 8);
  uint64_t v36 = *(void *)(a3 + 8);
  if (v35 == v36 && *(_DWORD *)(a2 + 16) == *(_DWORD *)(a3 + 16))
  {
    int v93 = *(_DWORD *)(v35 + 44);
    if (v93 > 1)
    {
      if (v93 == 2)
      {
        uint64_t v13 = NSString;
        uint64_t v14 = @"can't copy 3D texture to itself";
      }
      else
      {
        if (v93 != 0x7FFFFFFF) {
          goto LABEL_43;
        }
        uint64_t v13 = NSString;
        uint64_t v14 = @"unknown texture format";
      }
      goto LABEL_8;
    }
    if (!v93)
    {
      uint64_t v13 = NSString;
      uint64_t v14 = @"can't copy 1D texture to itself";
LABEL_8:
      int v15 = [v13 stringWithFormat:@"GPUCommandEncoder.copyTextureToTexture: %@", v14];
      if (v15)
      {
LABEL_9:
        unint64_t v104 = v15;
        WebGPU::CommandEncoder::makeInvalid(this, v15);

        return;
      }
      goto LABEL_42;
    }
    if (v93 == 1)
    {
      unsigned int v94 = *(_DWORD *)(a2 + 28);
      unsigned int v95 = a4[2];
      unsigned int v96 = v95 + v94;
      if (v95)
      {
        if (v94 != v96)
        {
          unsigned int v97 = *(_DWORD *)(a3 + 28);
          if (v96 > v97 && v97 + v95 > v94)
          {
            uint64_t v13 = NSString;
            uint64_t v14 = @"can't copy 2D texture to itself with overlapping array range";
            goto LABEL_8;
          }
        }
      }
    }
  }
LABEL_43:
  WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>(v35 + 112, (uint64_t)this, (uint64_t)&v113);
  if (!*(unsigned char *)(v35 + 105))
  {
    if (*(unsigned char *)(v35 + 104))
    {
      *((unsigned char *)this + 76) = 1;
      uint64_t v37 = *((void *)this + 7);
      if (v37)
      {
        uint64_t v38 = *(WebGPU::CommandBuffer **)(v37 + 8);
        if (v38) {
          WebGPU::CommandBuffer::makeInvalid(v38, *((NSString **)this + 8));
        }
      }
    }
  }
  WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>(v36 + 112, (uint64_t)this, (uint64_t)&v113);
  if (!*(unsigned char *)(v36 + 105))
  {
    if (*(unsigned char *)(v36 + 104))
    {
      *((unsigned char *)this + 76) = 1;
      uint64_t v39 = *((void *)this + 7);
      if (v39)
      {
        uint64_t v40 = *(WebGPU::CommandBuffer **)(v39 + 8);
        if (v40) {
          WebGPU::CommandBuffer::makeInvalid(v40, *((NSString **)this + 8));
        }
      }
    }
  }
  if (*(unsigned char *)(v35 + 104) || *(unsigned char *)(v36 + 104)) {
    return;
  }
  id v41 = WebGPU::CommandEncoder::ensureBlitCommandEncoder((id *)this);
  int v42 = *(_DWORD *)(v36 + 44);
  unsigned int v43 = *(_DWORD *)(a3 + 16);
  if (v42 == 2) {
    uint64_t v44 = 1;
  }
  else {
    uint64_t v44 = a4[2];
  }
  if (v42 == 2)
  {
    uint64_t v46 = (uint64_t)vmax_u32(vshl_u32(*(uint32x2_t *)(v36 + 24), (uint32x2_t)vneg_s32(vdup_n_s32(v43))), (uint32x2_t)0x100000001);
    unsigned int v47 = *(_DWORD *)(v36 + 32) >> v43;
    if (v47 <= 1) {
      unsigned int v47 = 1;
    }
  }
  else
  {
    if (v42 != 1)
    {
      if (v42)
      {
        unsigned int v101 = 0;
        uint64_t v46 = 0;
      }
      else
      {
        unsigned int v45 = *(_DWORD *)(v36 + 24) >> v43;
        if (v45 <= 1) {
          unsigned int v45 = 1;
        }
        unsigned int v101 = *(_DWORD *)(v36 + 32);
        uint64_t v46 = v45 | 0x100000000;
      }
      goto LABEL_73;
    }
    uint64_t v46 = (uint64_t)vmax_u32(vshl_u32(*(uint32x2_t *)(v36 + 24), (uint32x2_t)vneg_s32(vdup_n_s32(v43))), (uint32x2_t)0x100000001);
    unsigned int v47 = *(_DWORD *)(v36 + 32);
  }
  unsigned int v101 = v47;
LABEL_73:
  if (v44)
  {
    uint64_t v48 = 0;
    int v49 = v46;
    int v106 = HIDWORD(v46);
    do
    {
      while (1)
      {
        unint64_t v50 = *(_DWORD *)(v35 + 44) == 2 ? 0 : v48 + *(unsigned int *)(a2 + 28);
        WebGPU::CommandEncoder::clearTextureIfNeeded(*(uint32x2_t **)(a2 + 8), *(unsigned int *)(a2 + 16), v50, *((WebGPU::Device **)this + 10), *((void **)this + 4));
        unint64_t v51 = *(_DWORD *)(v36 + 44) == 2 ? 0 : v48 + *(unsigned int *)(a3 + 28);
        unsigned int v52 = *a4;
        unsigned int v53 = a4[1];
        if (v42 != 2) {
          break;
        }
        if (v52 == v49 && v53 == v106 && a4[2] == v101) {
          goto LABEL_96;
        }
LABEL_75:
        WebGPU::CommandEncoder::clearTextureIfNeeded(*(uint32x2_t **)(a3 + 8), *(unsigned int *)(a3 + 16), v51, *((WebGPU::Device **)this + 10), *((void **)this + 4));
        if (v44 == ++v48) {
          goto LABEL_97;
        }
      }
      if (v42 == 1)
      {
        if (v52 == v49 && v53 == v106) {
          goto LABEL_96;
        }
        goto LABEL_75;
      }
      if (v42 || v52 != v49) {
        goto LABEL_75;
      }
LABEL_96:
      WebGPU::Texture::setPreviouslyCleared((uint64_t *)v36, *(_DWORD *)(a3 + 16), v51, 1);
      ++v48;
    }
    while (v44 != v48);
  }
LABEL_97:
  id v55 = *(id *)(v36 + 16);
  id v56 = *(id *)(*(void *)(a2 + 8) + 16);
  int v57 = *(_DWORD *)(v35 + 44);
  switch(v57)
  {
    case 2:
      unsigned int v73 = (void *)*a4;
      if (v73)
      {
        uint64_t v74 = a4[1];
        if (v74)
        {
          uint64_t v75 = a4[2];
          if (v75)
          {
            int v76 = *(_DWORD *)(a3 + 28);
            unsigned int v77 = v76 + v75;
            if (!__CFADD__(v76, v75))
            {
              unsigned int v78 = [v55 depth];
              unsigned int v79 = v101;
              if (v78 < v101) {
                unsigned int v79 = v78;
              }
              if (v77 <= v79)
              {
                uint64_t v84 = *(unsigned int *)(a2 + 28);
                uint64_t v85 = *(unsigned int *)(a3 + 28);
                BOOL v86 = (void *)*((void *)this + 4);
                uint64_t v87 = *(unsigned int *)(a2 + 16);
                uint64_t v88 = *(void *)(a2 + 20);
                *(void *)&long long v89 = v88;
                *((void *)&v89 + 1) = HIDWORD(v88);
                long long v113 = v89;
                uint64_t v114 = v84;
                id v111 = v73;
                v112.i64[0] = v74;
                v112.i64[1] = v75;
                uint64_t v90 = *(unsigned int *)(a3 + 16);
                uint64_t v91 = *(void *)(a3 + 20);
                *(void *)&long long v89 = v91;
                *((void *)&v89 + 1) = HIDWORD(v91);
                long long v109 = v89;
                uint64_t v110 = v85;
                [v86 copyFromTexture:v56 sourceSlice:0 sourceLevel:v87 sourceOrigin:&v113 sourceSize:&v111 toTexture:v55 destinationSlice:0 destinationLevel:v90 destinationOrigin:&v109];
              }
              else
              {
                WebGPU::CommandEncoder::makeInvalid(this, &cfstr_Gpucommandenco_12.isa);
              }
            }
          }
        }
      }
      break;
    case 1:
      BOOL v63 = (void *)*a4;
      if (v63)
      {
        id v108 = (id)a4[1];
        if (v108)
        {
          if (a4[2])
          {
            unint64_t v64 = 0;
            uint64_t v65 = *(void *)(a2 + 20);
            *(void *)&long long v66 = v65;
            *((void *)&v66 + 1) = HIDWORD(v65);
            long long v67 = v66;
            uint64_t v68 = *(void *)(a3 + 20);
            *(void *)&long long v66 = v68;
            *((void *)&v66 + 1) = HIDWORD(v68);
            long long v100 = v66;
            long long v103 = v67;
            do
            {
              uint64_t v69 = *(unsigned int *)(a2 + 28);
              unint64_t v70 = v64 + *(unsigned int *)(a3 + 28);
              if (v70 < [v55 arrayLength] && v64 + v69 < objc_msgSend(v56, "arrayLength"))
              {
                unint64_t v71 = (void *)*((void *)this + 4);
                long long v113 = v103;
                uint64_t v114 = 0;
                id v111 = v63;
                v112.i64[0] = (uint64_t)v108;
                v112.i64[1] = 1;
                uint64_t v72 = *(unsigned int *)(a3 + 16);
                long long v109 = v100;
                uint64_t v110 = 0;
                objc_msgSend(v71, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", v56, v70, v72, &v109);
              }
              ++v64;
            }
            while (v64 < a4[2]);
          }
        }
      }
      break;
    case 0:
      id v107 = (id)*a4;
      if (v107)
      {
        if (a4[2])
        {
          unint64_t v58 = 0;
          unint64_t v102 = *(unsigned int *)(a2 + 20);
          unint64_t v99 = *(unsigned int *)(a3 + 20);
          int64x2_t v98 = vdupq_n_s64(1uLL);
          do
          {
            uint64_t v59 = *(unsigned int *)(a2 + 28);
            unint64_t v60 = v58 + *(unsigned int *)(a3 + 28);
            if (v60 < [v55 arrayLength] && v58 + v59 < objc_msgSend(v56, "arrayLength"))
            {
              uint64_t v61 = (void *)*((void *)this + 4);
              long long v113 = v102;
              uint64_t v114 = 0;
              id v111 = v107;
              int64x2_t v112 = v98;
              uint64_t v62 = *(unsigned int *)(a3 + 16);
              long long v109 = v99;
              uint64_t v110 = 0;
              objc_msgSend(v61, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", v56, v60, v62, &v109);
            }
            ++v58;
          }
          while (v58 < a4[2]);
        }
      }
      break;
  }
}

void sub_1824E7920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824E7930(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824E7940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824E7954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824E7968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824E797C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824E7994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824E79A4(_Unwind_Exception *a1)
{
  uint64_t v5 = *(_DWORD **)(v3 - 112);
  *(void *)(v3 - 112) = 0;
  if (v5)
  {
    if (*v5 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v5 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void sub_1824E7A0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824E7A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Unwind_Resume(a1);
}

void wgpuCommandEncoderClearBuffer(WebGPU::CommandEncoder *a1, WebGPU::Buffer *this, unint64_t a3, uint64_t a4)
{
  int v7 = *((unsigned __int8 *)a1 + 4);
  uint64_t v5 = (WebGPU::CommandEncoder *)((char *)a1 + 4);
  int v6 = v7;
  if ((v7 - 3) < 0xFFFFFFFE)
  {
    uint64_t v8 = a4;
    if (a4 == -1)
    {
      unint64_t v11 = *((void *)this + 5);
      BOOL v12 = v11 >= a3;
      unint64_t v13 = v11 - a3;
      uint64_t v8 = v12 ? v13 : 0;
      if (!v12)
      {
        uint64_t v14 = *((void *)a1 + 10);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v15 = *(void *)(v14 + 32);
        uint64_t v16 = 32 * *(unsigned int *)(v14 + 44);
        uint64_t v17 = v15 + v16;
        while (v16)
        {
          int v18 = *(_DWORD *)(v17 - 8);
          v17 -= 32;
          v16 -= 32;
          if (!v18)
          {
            uint64_t v19 = v15 + v16;
            if (!*(unsigned char *)(v19 + 16))
            {
              uint64_t v20 = v44;
              uint64_t v44 = 0;
              *(_DWORD *)uint64_t v19 = 1;
              *(void *)(v19 + 8) = v20;
              *(unsigned char *)(v19 + 16) = 1;
            }
            goto LABEL_43;
          }
        }
        uint64_t v37 = *(void *)(v14 + 24);
        if (v37)
        {
          (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v37 + 16))(v37, 1, &v44);
          uint64_t v38 = *(void *)(v14 + 24);
          *(void *)(v14 + 24) = 0;
          if (v38) {
            (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
          }
        }
LABEL_43:
        uint64_t v39 = v44;
        uint64_t v44 = 0;
        if (v39)
        {
          if (*v39 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v39 -= 2;
          }
        }
        return;
      }
    }
    if (*((unsigned char *)this + 52) == 4 || *((void *)this + 2) != 0)
    {
      uint64_t v32 = *((void *)this + 35);
      if (*(void *)(v32 + 8))
      {
        if (v32 == *((void *)a1 + 10)
          && ((v8 | a3) & 3) == 0
          && (*((_DWORD *)this + 12) & 8) != 0)
        {
          unint64_t v40 = a3 + v8;
          if (!__CFADD__(a3, v8) && *((void *)this + 5) >= v40)
          {
            WebGPU::Buffer::setCommandEncoder(this, a1);
            *((void *)this + 29) = -1;
            *((void *)this + 30) = -1;
            *((void *)this + 34) = 0;
            *((void *)this + 31) = 0;
            *((void *)this + 32) = 0;
            *((_DWORD *)this + 66) = 0;
            if (v8 && *((unsigned char *)this + 52) != 4 && v40 <= [*((id *)this + 2) length])
            {
              id v41 = WebGPU::CommandEncoder::ensureBlitCommandEncoder((id *)a1);
              int v42 = (void *)*((void *)a1 + 4);
              uint64_t v43 = *((void *)this + 2);
              objc_msgSend(v42, "fillBuffer:range:value:", v43, a3, v8, 0);
            }
            return;
          }
        }
      }
    }
    uint64_t v33 = @"GPUCommandEncoder.clearBuffer validation failed";
LABEL_28:
    WebGPU::CommandEncoder::makeInvalid(a1, &v33->isa);
    return;
  }
  if (v6 != 2)
  {
    if (*((void *)a1 + 8)) {
      uint64_t v33 = (__CFString *)*((void *)a1 + 8);
    }
    else {
      uint64_t v33 = @"Encoder state is locked";
    }
    goto LABEL_28;
  }
  uint64_t v21 = *((void *)a1 + 10);
  uint64_t v22 = NSString;
  int v23 = WebGPU::CommandsMixin::encoderStateName(v5);
  uint64_t v24 = [v22 stringWithFormat:@"%s: encoder state is %@", "void WebGPU::CommandEncoder::clearBuffer(Buffer &, uint64_t, uint64_t)", v23];
  MEMORY[0x18530AF50](&v44, v24);
  uint64_t v25 = *(void *)(v21 + 32);
  uint64_t v26 = 32 * *(unsigned int *)(v21 + 44);
  uint64_t v27 = v25 + v26;
  while (v26)
  {
    int v28 = *(_DWORD *)(v27 - 8);
    v27 -= 32;
    v26 -= 32;
    if (!v28)
    {
      uint64_t v29 = v25 + v26;
      if (!*(unsigned char *)(v29 + 16))
      {
        uint64_t v30 = v44;
        uint64_t v44 = 0;
        *(_DWORD *)uint64_t v29 = 1;
        *(void *)(v29 + 8) = v30;
        *(unsigned char *)(v29 + 16) = 1;
      }
      goto LABEL_34;
    }
  }
  uint64_t v34 = *(void *)(v21 + 24);
  if (v34)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v34 + 16))(v34, 1, &v44);
    uint64_t v35 = *(void *)(v21 + 24);
    *(void *)(v21 + 24) = 0;
    if (v35) {
      (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
    }
  }
LABEL_34:
  uint64_t v36 = v44;
  uint64_t v44 = 0;
  if (v36)
  {
    if (*v36 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v36 -= 2;
    }
  }
}

void sub_1824E7E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  if (a12)
  {
    if (*a12 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a12 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t wgpuCommandEncoderFinish(WebGPU::CommandEncoder *this, void *a2)
{
  if (!*a2)
  {
    if (*((void *)this + 2))
    {
      uint64_t v15 = *((void *)this + 5);
      if (!v15 || v15 == *((void *)this + 4))
      {
        uint64_t v16 = (char *)this + 4;
        if (*((unsigned char *)this + 4))
        {
          uint64_t v17 = NSString;
          int v18 = WebGPU::CommandsMixin::encoderStateName((WebGPU::CommandEncoder *)((char *)this + 4));
          uint64_t v19 = [v17 stringWithFormat:@"GPUCommandEncoder.finish: encoder state is '%@', expected 'Open'", v18];

          *uint64_t v16 = 2;
          if (!v19)
          {
LABEL_44:
            WebGPU::CommandEncoder::finalizeBlitCommandEncoder((id *)this);
            id v35 = *((id *)this + 2);
            uint64_t v36 = (void *)*((void *)this + 2);
            *((void *)this + 2) = 0;

            uint64_t v37 = (void *)*((void *)this + 5);
            *((void *)this + 5) = 0;

            uint64_t v38 = (const char *)a2[1];
            if (v38) {
              strlen(v38);
            }
            WTF::String::fromUTF8();
            if (v48) {
              uint64_t v39 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
            }
            else {
              uint64_t v39 = &stru_1ECABF938;
            }
            [v35 setLabel:v39];

            unint64_t v40 = v48;
            uint64_t v48 = 0;
            if (v40)
            {
              if (*v40 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *v40 -= 2;
              }
            }
            id v41 = (atomic_uchar *volatile *)*((void *)this + 10);
            id v42 = v35;
            uint64_t v21 = WTF::fastMalloc((WTF *)0x40);
            WebGPU::CommandBuffer::CommandBuffer(v21, v42, v41);

            uint64_t v44 = *(void *)(v21 + 8);
            if (!v44)
            {
              uint64_t v44 = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)uint64_t v44 = 1;
              *(void *)(v44 + 8) = v21;
              unsigned int v45 = *(unsigned int **)(v21 + 8);
              *(void *)(v21 + 8) = v44;
              if (v45)
              {
                if (atomic_fetch_add((atomic_uint *volatile)v45, 0xFFFFFFFF) == 1)
                {
                  atomic_store(1u, v45);
                  WTF::fastFree((WTF *)v45, v43);
                  uint64_t v44 = *(void *)(v21 + 8);
                  if (!v44) {
                    goto LABEL_58;
                  }
                }
                else
                {
                  uint64_t v44 = *(void *)(v21 + 8);
                  if (!v44)
                  {
LABEL_58:
                    uint64_t v46 = (unsigned int *)*((void *)this + 7);
                    *((void *)this + 7) = v44;
                    if (v46)
                    {
                      if (atomic_fetch_add((atomic_uint *volatile)v46, 0xFFFFFFFF) == 1)
                      {
                        atomic_store(1u, v46);
                        WTF::fastFree((WTF *)v46, v43);
                      }
                      uint64_t v44 = *((void *)this + 7);
                    }
                    unsigned int v47 = *(WebGPU::CommandBuffer **)(v44 + 8);
                    *((_DWORD *)v47 + 8) = *((_DWORD *)this + 18);
                    if (*((unsigned char *)this + 76)) {
                      WebGPU::CommandBuffer::makeInvalid(v47, *((NSString **)this + 8));
                    }

                    uint64_t v19 = 0;
LABEL_65:

                    return v21;
                  }
                }
              }
            }
            atomic_fetch_add((atomic_uint *volatile)v44, 1u);
            goto LABEL_58;
          }
        }
        else
        {
          if (!*((void *)this + 6))
          {
            *uint64_t v16 = 2;
            goto LABEL_44;
          }
          uint64_t v19 = objc_msgSend(NSString, "stringWithFormat:", @"GPUCommandEncoder.finish: encoder stack size '%llu'", *((void *)this + 6));
          *uint64_t v16 = 2;
          if (!v19) {
            goto LABEL_44;
          }
        }
        WebGPU::CommandEncoder::discardCommandBuffer(this);
        uint64_t v23 = *((void *)this + 10);
        if (*((void *)this + 8)) {
          uint64_t v24 = (void *)*((void *)this + 8);
        }
        else {
          uint64_t v24 = v19;
        }
        MEMORY[0x18530AF50](&v48, v24);
        uint64_t v25 = *(void *)(v23 + 32);
        uint64_t v26 = 32 * *(unsigned int *)(v23 + 44);
        uint64_t v27 = v25 + v26;
        while (v26)
        {
          int v28 = *(_DWORD *)(v27 - 8);
          v27 -= 32;
          v26 -= 32;
          if (!v28)
          {
            uint64_t v29 = v25 + v26;
            if (!*(unsigned char *)(v29 + 16))
            {
              uint64_t v30 = v48;
              uint64_t v48 = 0;
              *(_DWORD *)uint64_t v29 = 1;
              *(void *)(v29 + 8) = v30;
              *(unsigned char *)(v29 + 16) = 1;
            }
            goto LABEL_38;
          }
        }
        uint64_t v31 = *(void *)(v23 + 24);
        if (v31)
        {
          (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v31 + 16))(v31, 1, &v48);
          uint64_t v32 = *(void *)(v23 + 24);
          *(void *)(v23 + 24) = 0;
          if (v32) {
            (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
          }
        }
LABEL_38:
        uint64_t v33 = v48;
        uint64_t v48 = 0;
        if (v33)
        {
          if (*v33 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v33 -= 2;
          }
        }
        uint64_t v34 = (atomic_uchar *volatile *)*((void *)this + 10);
        uint64_t v21 = WTF::fastMalloc((WTF *)0x40);
        WebGPU::CommandBuffer::CommandBuffer(v21, v34);
        goto LABEL_65;
      }
    }
  }
  *((unsigned char *)this + 4) = 2;
  WebGPU::CommandEncoder::discardCommandBuffer(this);
  uint64_t v3 = *((void *)this + 10);
  if (*((void *)this + 8)) {
    uint64_t v4 = (__CFString *)*((void *)this + 8);
  }
  else {
    uint64_t v4 = @"Invalid CommandEncoder.";
  }
  MEMORY[0x18530AF50](&v48, v4);
  uint64_t v5 = *(void *)(v3 + 32);
  uint64_t v6 = 32 * *(unsigned int *)(v3 + 44);
  uint64_t v7 = v5 + v6;
  while (v6)
  {
    int v8 = *(_DWORD *)(v7 - 8);
    v7 -= 32;
    v6 -= 32;
    if (!v8)
    {
      uint64_t v9 = v5 + v6;
      if (!*(unsigned char *)(v9 + 16))
      {
        uint64_t v10 = v48;
        uint64_t v48 = 0;
        *(_DWORD *)uint64_t v9 = 1;
        *(void *)(v9 + 8) = v10;
        *(unsigned char *)(v9 + 16) = 1;
      }
      goto LABEL_13;
    }
  }
  uint64_t v11 = *(void *)(v3 + 24);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v11 + 16))(v11, 1, &v48);
    uint64_t v12 = *(void *)(v3 + 24);
    *(void *)(v3 + 24) = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
LABEL_13:
  unint64_t v13 = v48;
  uint64_t v48 = 0;
  if (v13)
  {
    if (*v13 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v13 -= 2;
    }
  }
  uint64_t v20 = (atomic_uchar *volatile *)*((void *)this + 10);
  uint64_t v21 = WTF::fastMalloc((WTF *)0x40);
  WebGPU::CommandBuffer::CommandBuffer(v21, v20);
  return v21;
}

void sub_1824E833C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(_DWORD *)v11 == 1)
  {
    WebGPU::CommandBuffer::~CommandBuffer(v11);
    WTF::fastFree(v13, v14);
  }
  else
  {
    --*(_DWORD *)v11;
  }

  _Unwind_Resume(a1);
}

void sub_1824E8414(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v3, a2);

  _Unwind_Resume(a1);
}

void sub_1824E842C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824E843C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824E845C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
    _Unwind_Resume(exception_object);
  }
  JUMPOUT(0x1824E8444);
}

void sub_1824E8490(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

_DWORD *wgpuCommandEncoderInsertDebugMarker(uint64_t a1, char *__s)
{
  if (__s) {
    strlen(__s);
  }
  WTF::String::fromUTF8();
  int v3 = *(unsigned __int8 *)(a1 + 4);
  if ((v3 - 3) < 0xFFFFFFFE)
  {
    WebGPU::CommandEncoder::finalizeBlitCommandEncoder((id *)a1);
    uint64_t v4 = *(void **)(a1 + 16);
    if (v21) {
      uint64_t v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v5 = &stru_1ECABF938;
    }
    [v4 pushDebugGroup:v5];

    [*(id *)(a1 + 16) popDebugGroup];
    goto LABEL_18;
  }
  if (v3 != 2)
  {
    if (*(void *)(a1 + 64)) {
      uint64_t v16 = *(__CFString **)(a1 + 64);
    }
    else {
      uint64_t v16 = @"Encoder state is locked";
    }
    WebGPU::CommandEncoder::makeInvalid((WebGPU::CommandEncoder *)a1, &v16->isa);
LABEL_18:
    uint64_t result = v21;
    if (!v21) {
      return result;
    }
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = NSString;
  int v8 = WebGPU::CommandsMixin::encoderStateName((WebGPU::CommandsMixin *)(a1 + 4));
  uint64_t v9 = [v7 stringWithFormat:@"%s: encoder state is %@", "void WebGPU::CommandEncoder::insertDebugMarker(String &&)", v8];
  MEMORY[0x18530AF50](&v22, v9);
  uint64_t v10 = *(void *)(v6 + 32);
  uint64_t v11 = 32 * *(unsigned int *)(v6 + 44);
  uint64_t v12 = v10 + v11;
  while (v11)
  {
    int v13 = *(_DWORD *)(v12 - 8);
    v12 -= 32;
    v11 -= 32;
    if (!v13)
    {
      uint64_t v14 = v10 + v11;
      if (!*(unsigned char *)(v14 + 16))
      {
        uint64_t v15 = v22;
        uint64_t v22 = 0;
        *(_DWORD *)uint64_t v14 = 1;
        *(void *)(v14 + 8) = v15;
        *(unsigned char *)(v14 + 16) = 1;
      }
      goto LABEL_26;
    }
  }
  uint64_t v18 = *(void *)(v6 + 24);
  if (v18)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v18 + 16))(v18, 1, &v22);
    uint64_t v19 = *(void *)(v6 + 24);
    *(void *)(v6 + 24) = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
  }
LABEL_26:
  uint64_t v20 = v22;
  uint64_t v22 = 0;
  if (!v20)
  {
LABEL_29:

    uint64_t result = v21;
    if (!v21) {
      return result;
    }
    goto LABEL_19;
  }
  if (*v20 != 2)
  {
    *v20 -= 2;
    goto LABEL_29;
  }
  WTF::StringImpl::destroy();

  uint64_t result = v21;
  if (!v21) {
    return result;
  }
LABEL_19:
  if (*result == 2) {
    return (_DWORD *)WTF::StringImpl::destroy();
  }
  *result -= 2;
  return result;
}

void sub_1824E86F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11, _DWORD *a12)
{
  if (a12)
  {
    if (*a12 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *a12 -= 2;
    }
  }

  if (a11)
  {
    if (*a11 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *a11 -= 2;
  }
  _Unwind_Resume(a1);
}

void wgpuCommandEncoderPopDebugGroup(id *this)
{
  int v4 = *((unsigned __int8 *)this + 4);
  uint64_t v2 = (WebGPU::CommandsMixin *)((char *)this + 4);
  int v3 = v4;
  if ((v4 - 3) < 0xFFFFFFFE)
  {
    if (this[6])
    {
      WebGPU::CommandEncoder::finalizeBlitCommandEncoder(this);
      this[6] = (char *)this[6] - 1;
      id v5 = this[2];
      [v5 popDebugGroup];
      return;
    }
    uint64_t v16 = @"validatePopDebugGroup failed";
    goto LABEL_16;
  }
  if (v3 != 2)
  {
    if (this[8]) {
      uint64_t v16 = (__CFString *)this[8];
    }
    else {
      uint64_t v16 = @"Encoder state is locked";
    }
LABEL_16:
    WebGPU::CommandEncoder::makeInvalid((WebGPU::CommandEncoder *)this, &v16->isa);
    return;
  }
  uint64_t v6 = this[10];
  uint64_t v7 = NSString;
  int v8 = WebGPU::CommandsMixin::encoderStateName(v2);
  uint64_t v9 = [v7 stringWithFormat:@"%s: encoder state is %@", "void WebGPU::CommandEncoder::popDebugGroup()", v8];
  MEMORY[0x18530AF50](&v20, v9);
  uint64_t v10 = v6[4];
  uint64_t v11 = 32 * *((unsigned int *)v6 + 11);
  uint64_t v12 = v10 + v11;
  while (v11)
  {
    int v13 = *(_DWORD *)(v12 - 8);
    v12 -= 32;
    v11 -= 32;
    if (!v13)
    {
      uint64_t v14 = v10 + v11;
      if (!*(unsigned char *)(v14 + 16))
      {
        uint64_t v15 = v20;
        uint64_t v20 = 0;
        *(_DWORD *)uint64_t v14 = 1;
        *(void *)(v14 + 8) = v15;
        *(unsigned char *)(v14 + 16) = 1;
      }
      goto LABEL_22;
    }
  }
  uint64_t v17 = v6[3];
  if (v17)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v17 + 16))(v17, 1, &v20);
    uint64_t v18 = v6[3];
    v6[3] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
LABEL_22:
  uint64_t v19 = v20;
  uint64_t v20 = 0;
  if (v19)
  {
    if (*v19 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v19 -= 2;
    }
  }
}

void sub_1824E8974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  if (a12)
  {
    if (*a12 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *a12 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void sub_1824E89B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_DWORD *wgpuCommandEncoderPushDebugGroup(uint64_t a1, char *__s)
{
  if (__s) {
    strlen(__s);
  }
  WTF::String::fromUTF8();
  int v3 = *(unsigned __int8 *)(a1 + 4);
  if ((v3 - 3) < 0xFFFFFFFE)
  {
    WebGPU::CommandEncoder::finalizeBlitCommandEncoder((id *)a1);
    ++*(void *)(a1 + 48);
    int v4 = *(void **)(a1 + 16);
    if (v21) {
      id v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      id v5 = &stru_1ECABF938;
    }
    [v4 pushDebugGroup:v5];

    goto LABEL_18;
  }
  if (v3 != 2)
  {
    if (*(void *)(a1 + 64)) {
      uint64_t v16 = *(__CFString **)(a1 + 64);
    }
    else {
      uint64_t v16 = @"Encoder state is locked";
    }
    WebGPU::CommandEncoder::makeInvalid((WebGPU::CommandEncoder *)a1, &v16->isa);
LABEL_18:
    uint64_t result = v21;
    if (!v21) {
      return result;
    }
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = NSString;
  int v8 = WebGPU::CommandsMixin::encoderStateName((WebGPU::CommandsMixin *)(a1 + 4));
  uint64_t v9 = [v7 stringWithFormat:@"%s: encoder state is %@", "void WebGPU::CommandEncoder::pushDebugGroup(String &&)", v8];
  MEMORY[0x18530AF50](&v22, v9);
  uint64_t v10 = *(void *)(v6 + 32);
  uint64_t v11 = 32 * *(unsigned int *)(v6 + 44);
  uint64_t v12 = v10 + v11;
  while (v11)
  {
    int v13 = *(_DWORD *)(v12 - 8);
    v12 -= 32;
    v11 -= 32;
    if (!v13)
    {
      uint64_t v14 = v10 + v11;
      if (!*(unsigned char *)(v14 + 16))
      {
        uint64_t v15 = v22;
        uint64_t v22 = 0;
        *(_DWORD *)uint64_t v14 = 1;
        *(void *)(v14 + 8) = v15;
        *(unsigned char *)(v14 + 16) = 1;
      }
      goto LABEL_26;
    }
  }
  uint64_t v18 = *(void *)(v6 + 24);
  if (v18)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v18 + 16))(v18, 1, &v22);
    uint64_t v19 = *(void *)(v6 + 24);
    *(void *)(v6 + 24) = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
  }
LABEL_26:
  uint64_t v20 = v22;
  uint64_t v22 = 0;
  if (!v20)
  {
LABEL_29:

    uint64_t result = v21;
    if (!v21) {
      return result;
    }
    goto LABEL_19;
  }
  if (*v20 != 2)
  {
    *v20 -= 2;
    goto LABEL_29;
  }
  WTF::StringImpl::destroy();

  uint64_t result = v21;
  if (!v21) {
    return result;
  }
LABEL_19:
  if (*result == 2) {
    return (_DWORD *)WTF::StringImpl::destroy();
  }
  *result -= 2;
  return result;
}

void sub_1824E8C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11, _DWORD *a12)
{
  if (a12)
  {
    if (*a12 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *a12 -= 2;
    }
  }

  if (a11)
  {
    if (*a11 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *a11 -= 2;
  }
  _Unwind_Resume(a1);
}

void wgpuCommandEncoderResolveQuerySet(WebGPU::CommandEncoder *this, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  int v9 = *((unsigned __int8 *)this + 4);
  uint64_t v7 = (WebGPU::CommandEncoder *)((char *)this + 4);
  int v8 = v9;
  if ((v9 - 3) < 0xFFFFFFFE)
  {
    if (*(unsigned char *)(a2 + 56)) {
      BOOL v11 = 0;
    }
    else {
      BOOL v11 = *(void *)(a2 + 16) == 0;
    }
    if ((!v11 || *(void *)(a2 + 24) != 0)
      && (*(unsigned char *)(a5 + 52) == 4 || *(void *)(a5 + 16) != 0)
      && (*(unsigned char *)(a5 + 49) & 2) != 0)
    {
      unint64_t v15 = *(unsigned int *)(a2 + 32);
      if (v15 > a3
        && !(_BYTE)a6
        && a4 + (unint64_t)a3 <= v15
        && !__CFADD__(a6, 8 * a4)
        && a6 + 8 * (unint64_t)a4 <= *(void *)(a5 + 40))
      {
        uint64_t v17 = *(void *)(a2 + 8);
        if (*(void *)(v17 + 8))
        {
          if (v17 == *((void *)this + 10))
          {
            uint64_t v32 = *(void *)(a5 + 280);
            if (v32 == v17)
            {
              if (*(void *)(v32 + 8))
              {
                WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>(a2 + 40, (uint64_t)this, (uint64_t)v38);
                if (*(unsigned char *)(a2 + 56))
                {
                  *((unsigned char *)this + 76) = 1;
                  uint64_t v33 = *((void *)this + 7);
                  if (v33)
                  {
                    uint64_t v34 = *(WebGPU::CommandBuffer **)(v33 + 8);
                    if (v34) {
                      WebGPU::CommandBuffer::makeInvalid(v34, *((NSString **)this + 8));
                    }
                  }
                }
                WebGPU::Buffer::setCommandEncoder((WebGPU::Buffer *)a5, this);
                *(void *)(a5 + 232) = -1;
                *(void *)(a5 + 240) = -1;
                *(void *)(a5 + 272) = 0;
                *(void *)(a5 + 248) = 0;
                *(void *)(a5 + 256) = 0;
                *(_DWORD *)(a5 + 264) = 0;
                if (!*(unsigned char *)(a2 + 56))
                {
                  if (a4)
                  {
                    if (*(unsigned char *)(a5 + 52) != 4)
                    {
                      id v35 = WebGPU::CommandEncoder::ensureBlitCommandEncoder((id *)this);
                      if (!*(_DWORD *)(a2 + 36))
                      {
                        uint64_t v36 = (void *)*((void *)this + 4);
                        id v37 = *(id *)(a2 + 16);
                        objc_msgSend(v36, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:");
                      }
                    }
                  }
                }
                return;
              }
            }
          }
        }
      }
    }
    uint64_t v18 = @"GPUCommandEncoder.resolveQuerySet validation failed";
LABEL_31:
    WebGPU::CommandEncoder::makeInvalid(this, &v18->isa);
    return;
  }
  if (v8 != 2)
  {
    if (*((void *)this + 8)) {
      uint64_t v18 = (__CFString *)*((void *)this + 8);
    }
    else {
      uint64_t v18 = @"Encoder state is locked";
    }
    goto LABEL_31;
  }
  uint64_t v19 = *((void *)this + 10);
  uint64_t v20 = NSString;
  uint64_t v21 = WebGPU::CommandsMixin::encoderStateName(v7);
  uint64_t v22 = [v20 stringWithFormat:@"%s: encoder state is %@", "void WebGPU::CommandEncoder::resolveQuerySet(const QuerySet &, uint32_t, uint32_t, Buffer &, uint64_t)", v21];
  MEMORY[0x18530AF50](v38, v22);
  uint64_t v23 = *(void *)(v19 + 32);
  uint64_t v24 = 32 * *(unsigned int *)(v19 + 44);
  uint64_t v25 = v23 + v24;
  while (v24)
  {
    int v26 = *(_DWORD *)(v25 - 8);
    v25 -= 32;
    v24 -= 32;
    if (!v26)
    {
      uint64_t v27 = v23 + v24;
      if (!*(unsigned char *)(v27 + 16))
      {
        uint64_t v28 = v38[0];
        v38[0] = 0;
        *(_DWORD *)uint64_t v27 = 1;
        *(void *)(v27 + 8) = v28;
        *(unsigned char *)(v27 + 16) = 1;
      }
      goto LABEL_37;
    }
  }
  uint64_t v29 = *(void *)(v19 + 24);
  if (v29)
  {
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v29 + 16))(v29, 1, v38);
    uint64_t v30 = *(void *)(v19 + 24);
    *(void *)(v19 + 24) = 0;
    if (v30) {
      (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
    }
  }
LABEL_37:
  uint64_t v31 = (_DWORD *)v38[0];
  v38[0] = 0;
  if (v31)
  {
    if (*v31 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v31 -= 2;
    }
  }
}

void sub_1824E9008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  _Unwind_Resume(a1);
}

void sub_1824E9020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  if (a12)
  {
    if (*a12 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *a12 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void sub_1824E9060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void wgpuCommandEncoderWriteTimestamp(WebGPU::CommandEncoder *this, uint64_t a2, unsigned int a3)
{
  int v6 = *((unsigned __int8 *)this + 4);
  int v4 = (WebGPU::CommandEncoder *)((char *)this + 4);
  int v5 = v6;
  if ((v6 - 3) < 0xFFFFFFFE)
  {
    uint64_t v7 = *((void *)this + 10);
    uint64_t v8 = *(unsigned int *)(v7 + 244);
    if (!v8) {
      return;
    }
    uint64_t v10 = *(int **)(v7 + 232);
    while (1)
    {
      int v11 = *v10++;
      if (v11 == 3) {
        break;
      }
      if (!--v8) {
        return;
      }
    }
    if (*(_DWORD *)(a2 + 36) == 1 && *(_DWORD *)(a2 + 32) > a3)
    {
      BOOL v24 = !*(unsigned char *)(a2 + 56) && *(void *)(a2 + 16) == 0;
      if (!v24 || *(void *)(a2 + 24) != 0)
      {
        uint64_t v26 = *(void *)(a2 + 8);
        if (v26 == v7 && *(void *)(v26 + 8) != 0)
        {
          WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>(a2 + 40, (uint64_t)this, (uint64_t)v33);
          if (*(unsigned char *)(a2 + 56))
          {
            *((unsigned char *)this + 76) = 1;
            uint64_t v31 = *((void *)this + 7);
            if (v31)
            {
              uint64_t v32 = *(WebGPU::CommandBuffer **)(v31 + 8);
              if (v32) {
                WebGPU::CommandBuffer::makeInvalid(v32, *((NSString **)this + 8));
              }
            }
          }
          return;
        }
      }
    }
    uint64_t v22 = @"GPUCommandEncoder.writeTimestamp validation failed";
LABEL_34:
    WebGPU::CommandEncoder::makeInvalid(this, &v22->isa);
    return;
  }
  if (v5 != 2)
  {
    if (*((void *)this + 8)) {
      uint64_t v22 = (__CFString *)*((void *)this + 8);
    }
    else {
      uint64_t v22 = @"Encoder state is locked";
    }
    goto LABEL_34;
  }
  uint64_t v12 = *((void *)this + 10);
  int v13 = NSString;
  uint64_t v14 = WebGPU::CommandsMixin::encoderStateName(v4);
  unint64_t v15 = [v13 stringWithFormat:@"%s: encoder state is %@", "void WebGPU::CommandEncoder::writeTimestamp(QuerySet &, uint32_t)", v14];
  MEMORY[0x18530AF50](v33, v15);
  uint64_t v16 = *(void *)(v12 + 32);
  uint64_t v17 = 32 * *(unsigned int *)(v12 + 44);
  uint64_t v18 = v16 + v17;
  while (v17)
  {
    int v19 = *(_DWORD *)(v18 - 8);
    v18 -= 32;
    v17 -= 32;
    if (!v19)
    {
      uint64_t v20 = v16 + v17;
      if (!*(unsigned char *)(v20 + 16))
      {
        uint64_t v21 = v33[0];
        v33[0] = 0;
        *(_DWORD *)uint64_t v20 = 1;
        *(void *)(v20 + 8) = v21;
        *(unsigned char *)(v20 + 16) = 1;
      }
      goto LABEL_40;
    }
  }
  uint64_t v28 = *(void *)(v12 + 24);
  if (v28)
  {
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v28 + 16))(v28, 1, v33);
    uint64_t v29 = *(void *)(v12 + 24);
    *(void *)(v12 + 24) = 0;
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
    }
  }
LABEL_40:
  uint64_t v30 = (_DWORD *)v33[0];
  v33[0] = 0;
  if (v30)
  {
    if (*v30 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v30 -= 2;
    }
  }
}

void sub_1824E92EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  if (a12)
  {
    if (*a12 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a12 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_1824E9330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824E9344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_DWORD *wgpuCommandEncoderSetLabel(uint64_t a1, char *__s)
{
  if (__s) {
    strlen(__s);
  }
  WTF::String::fromUTF8();
  if (v5) {
    int v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    int v3 = &stru_1ECABF938;
  }
  [*(id *)(a1 + 16) setLabel:v3];

  uint64_t result = v5;
  if (v5)
  {
    if (*v5 == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *v5 -= 2;
    }
  }
  return result;
}

void sub_1824E93FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WebGPU::CommandBuffer *WTF::RefCounted<WebGPU::CommandBuffer>::deref(WebGPU::CommandBuffer *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebGPU::CommandBuffer::~CommandBuffer(result);
    return (WebGPU::CommandBuffer *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t *WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::add(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  int v5 = result;
  uint64_t v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(a2, 8u, 0), (uint64_t v6 = *a2) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = *a3;
  unint64_t v10 = *a3 + ~(*a3 << 32);
  unint64_t v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v8 & ((v12 >> 31) ^ v12);
  uint64_t v14 = (uint64_t *)(v6 + 8 * v13);
  uint64_t v15 = *v14;
  if (*v14 == -1)
  {
LABEL_12:
    *uint64_t v14 = v9;
    if (*a2)
    {
      ++*(_DWORD *)(*a2 - 12);
      uint64_t v18 = *a2;
      if (*a2) {
        goto LABEL_14;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      uint64_t v18 = *a2;
      if (*a2)
      {
LABEL_14:
        uint64_t v19 = (*(_DWORD *)(v18 - 16) + *(_DWORD *)(v18 - 12));
        unint64_t v20 = *(unsigned int *)(v18 - 4);
        if (v20 <= 0x400) {
          goto LABEL_15;
        }
        goto LABEL_23;
      }
    }
    uint64_t v19 = *(unsigned int *)(v18 - 16);
    unint64_t v20 = *(unsigned int *)(v18 - 4);
    if (v20 <= 0x400)
    {
LABEL_15:
      if (3 * v20 > 4 * v19)
      {
LABEL_26:
        *int v5 = (uint64_t)v14;
        v5[1] = v18 + 8 * v20;
        *((unsigned char *)v5 + 16) = 1;
        return result;
      }
      if (!v20)
      {
        uint64_t result = WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(a2, 8u, v14);
        uint64_t v14 = result;
        uint64_t v18 = *a2;
        if (!*a2)
        {
LABEL_18:
          unint64_t v20 = 0;
          goto LABEL_26;
        }
LABEL_25:
        unint64_t v20 = *(unsigned int *)(v18 - 4);
        goto LABEL_26;
      }
LABEL_24:
      uint64_t result = WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(a2, v20 << (6 * *(_DWORD *)(v18 - 12) >= (2 * v20)), v14);
      uint64_t v14 = result;
      uint64_t v18 = *a2;
      if (!*a2) {
        goto LABEL_18;
      }
      goto LABEL_25;
    }
LABEL_23:
    if (v20 > 2 * v19) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  uint64_t v16 = 0;
  int v17 = 1;
  while (v15 != v9)
  {
    if (v15 == -2) {
      uint64_t v16 = v14;
    }
    unsigned int v13 = (v13 + v17) & v8;
    uint64_t v14 = (uint64_t *)(v6 + 8 * v13);
    uint64_t v15 = *v14;
    ++v17;
    if (*v14 == -1)
    {
      if (v16)
      {
        *uint64_t v16 = -1;
        --*(_DWORD *)(*a2 - 16);
        uint64_t v9 = *a3;
        uint64_t v14 = v16;
      }
      goto LABEL_12;
    }
  }
  if (v7) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = *(unsigned int *)(v6 - 4);
  }
  *int v5 = (uint64_t)v14;
  v5[1] = v6 + 8 * v21;
  *((unsigned char *)v5 + 16) = 0;
  return result;
}

void *WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
    size_t v9 = 8 * a2;
    uint64_t v11 = WTF::fastMalloc((WTF *)(v9 + 16));
    unint64_t v12 = (void *)(v11 + 16);
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  int v7 = 0;
  int v8 = 0;
  size_t v9 = 8 * a2;
  uint64_t v11 = WTF::fastMalloc((WTF *)(v9 + 16));
  unint64_t v12 = (void *)(v11 + 16);
  if (a2) {
LABEL_3:
  }
    memset(v12, 255, v9);
LABEL_4:
  *a1 = (uint64_t)v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = (uint64_t *)(v6 + 8 * v13);
      uint64_t v16 = *v15;
      if ((unint64_t)*v15 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v17 = *a1;
        int v18 = *a1 ? *(_DWORD *)(v17 - 8) : 0;
        unint64_t v19 = (v16 + ~(v16 << 32)) ^ ((unint64_t)(v16 + ~(v16 << 32)) >> 22);
        unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
        unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
        unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
        int v23 = 1;
        do
        {
          unsigned int v24 = v22;
          uint64_t v25 = *(void *)(v17 + 8 * v22);
          unsigned int v22 = (v22 + v23++) & v18;
        }
        while (v25 != -1);
        uint64_t v26 = (void *)(v17 + 8 * v24);
        *uint64_t v26 = v16;
        if (v15 == a3) {
          uint64_t v14 = v26;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    uint64_t v14 = 0;
  }
  if (v6) {
    WTF::fastFree((WTF *)(v6 - 16), v10);
  }
  return v14;
}

void WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    size_t v7 = 16 * a2;
    uint64_t v9 = WTF::fastMalloc((WTF *)(v7 + 16));
    unint64_t v10 = (void *)(v9 + 16);
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  unsigned int v5 = 0;
  int v6 = 0;
  size_t v7 = 16 * a2;
  uint64_t v9 = WTF::fastMalloc((WTF *)(v7 + 16));
  unint64_t v10 = (void *)(v9 + 16);
  if (a2) {
LABEL_3:
  }
    bzero(v10, v7);
LABEL_4:
  *a1 = (uint64_t)v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v5;
    while (1)
    {
      uint64_t v13 = (uint64_t *)(v4 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          unint64_t v18 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          unint64_t v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          unint64_t v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          unsigned int v21 = v17 & ((v20 >> 31) ^ v20);
          int v22 = 1;
          do
          {
            unsigned int v23 = v21;
            uint64_t v24 = *(void *)(v16 + 16 * v21);
            unsigned int v21 = (v21 + v22++) & v17;
          }
          while (v24);
          uint64_t v25 = (void *)(v16 + 16 * v23);
          uint64_t v27 = v25 + 1;
          uint64_t v26 = v25[1];
          if (v26)
          {
            WTF::fastFree((WTF *)(v26 - 16), v8);
            uint64_t v14 = *v13;
          }
          *uint64_t v25 = v14;
          uint64_t v28 = v4 + 16 * v11;
          void *v27 = 0;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          void *v27 = v29;
          uint64_t v15 = *(void *)(v28 + 8);
          if (!v15) {
            goto LABEL_6;
          }
LABEL_10:
          WTF::fastFree((WTF *)(v15 - 16), v8);
          goto LABEL_6;
        }
        uint64_t v15 = *(void *)(v4 + 16 * v11 + 8);
        if (v15) {
          goto LABEL_10;
        }
      }
LABEL_6:
      if (++v11 == v12) {
        goto LABEL_23;
      }
    }
  }
  if (v4)
  {
LABEL_23:
    WTF::fastFree((WTF *)(v4 - 16), v8);
  }
}

__CFString *WebGPU::CommandsMixin::encoderStateName(WebGPU::CommandsMixin *this)
{
  int v1 = *(unsigned __int8 *)this;
  uint64_t v2 = @"Open";
  if (v1 == 1) {
    uint64_t v2 = @"Locked";
  }
  if (v1 == 2) {
    return @"Ended";
  }
  else {
    return v2;
  }
}

uint64_t WebGPU::ComputePassEncoder::ComputePassEncoder(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, atomic_uchar *volatile *a5)
{
  id v8 = a2;
  int v9 = 1;
  *(_DWORD *)a1 = 1;
  *(unsigned char *)(a1 + 4) = 0;
  id v10 = v8;
  char v11 = 0;
  *(void *)(a1 + 8) = v10;
  *(void *)(a1 + 16) = 0;
  atomic_uchar *volatile v12 = *a5;
  atomic_compare_exchange_strong_explicit(*a5, (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
  if (v11) {
    MEMORY[0x18530AEA0](v12);
  }
  ++*((void *)v12 + 1);
  atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
  }
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  ++*(_DWORD *)a4;
  *(void *)(a1 + 80) = a4;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(unsigned char *)(a1 + 120) = 0;
  if (*(unsigned char *)(a4 + 4) != 2) {
    *(unsigned char *)(a4 + 4) = 1;
  }

  return a1;
}

void sub_1824E9B2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *WTF::HashMap<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      unsigned int v5 = (WebGPU::BindGroup **)(v3 + 8);
      do
      {
        if (*((_DWORD *)v5 - 2) != -2)
        {
          id v8 = *v5;
          *unsigned int v5 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 1)
            {
              WebGPU::BindGroup::~BindGroup(v8, a2);
              WTF::fastFree(v6, v7);
            }
            else
            {
              --*(_DWORD *)v8;
            }
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

uint64_t *WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = v3 + 8;
      do
      {
        if (*(_DWORD *)(v5 - 8) != -2)
        {
          int v6 = *(WTF **)v5;
          if (*(void *)v5)
          {
            *(void *)uint64_t v5 = 0;
            *(_DWORD *)(v5 + 8) = 0;
            WTF::fastFree(v6, a2);
          }
        }
        v5 += 24;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

WebGPU::CommandEncoder **WTF::Ref<WebGPU::CommandEncoder,WTF::RawPtrTraits<WebGPU::CommandEncoder>,WTF::DefaultRefDerefTraits<WebGPU::CommandEncoder>>::~Ref(WebGPU::CommandEncoder **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (!v2) {
    return a1;
  }
  if (*(_DWORD *)v2 != 1)
  {
    --*(_DWORD *)v2;
    return a1;
  }
  WebGPU::CommandEncoder::~CommandEncoder(v2);
  WTF::fastFree(v4, v5);
  return a1;
}

uint64_t WebGPU::ComputePassEncoder::ComputePassEncoder(uint64_t a1, _DWORD *a2, atomic_uchar *volatile *a3, void *a4)
{
  id v7 = a4;
  char v8 = 0;
  int v9 = 1;
  *(_DWORD *)a1 = 1;
  *(unsigned char *)(a1 + 4) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  atomic_uchar *volatile v10 = *a3;
  atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
  if (v8) {
    MEMORY[0x18530AEA0](v10);
  }
  ++*((void *)v10 + 1);
  atomic_compare_exchange_strong_explicit(v10, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
  }
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  ++*a2;
  *(void *)(a1 + 80) = a2;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  id v11 = v7;
  *(void *)(a1 + 112) = v11;
  *(unsigned char *)(a1 + 120) = 0;
  uint64_t v12 = *(void *)(a1 + 80);
  if (*(unsigned char *)(v12 + 4) != 2) {
    *(unsigned char *)(v12 + 4) = 1;
  }

  return a1;
}

void sub_1824E9D94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebGPU::ComputePassEncoder::executePreDispatchCommands(WebGPU::ComputePassEncoder *this, id *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = *((void *)this + 9);
  if (!v3)
  {
    WebGPU::ComputePassEncoder::makeInvalid(this, &cfstr_PipelineIsNotS.isa);
    return;
  }
  WebGPU::PipelineLayout::errorValidatingBindGroupCompatibility(*(unsigned char **)(v3 + 56), (uint64_t *)this + 13);
  uint64_t v5 = (NSString *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    long long v155 = v5;
    WebGPU::ComputePassEncoder::makeInvalid(v2, v5);

    return;
  }
  if (*(unsigned char *)(*((void *)v2 + 10) + 76)) {
    int v6 = 0;
  }
  else {
    int v6 = (void *)*((void *)v2 + 1);
  }
  id v7 = v6;
  id v8 = *(id *)(*((void *)v2 + 9) + 16);
  [v7 setComputePipelineState:v8];

  uint64_t v157 = 0;
  if (a2)
  {
    id v10 = a2[2];
    WebGPU::addResourceToActiveResources((uint64_t)a2, v10, 1, &v157, 0x7FFFFFFFu, 0, 0, 2u);
  }
  uint64_t v11 = *((void *)v2 + 9);
  uint64_t v12 = *((void *)v2 + 13);
  if (v12)
  {
    uint64_t v13 = *(unsigned int *)(v12 - 4);
    uint64_t v14 = (unsigned int *)(v12 + 16 * v13);
    if (!*(_DWORD *)(v12 - 12))
    {
      uint64_t v15 = (unsigned int *)(v12 + 16 * v13);
      uint64_t v14 = v15;
      unsigned int v151 = *(WebGPU::PipelineLayout **)(v11 + 56);
      goto LABEL_23;
    }
    uint64_t v15 = (unsigned int *)*((void *)v2 + 13);
    if (v13)
    {
      uint64_t v16 = 16 * v13;
      uint64_t v15 = (unsigned int *)*((void *)v2 + 13);
      while (*v15 >= 0xFFFFFFFE)
      {
        v15 += 4;
        v16 -= 16;
        if (!v16)
        {
          uint64_t v15 = v14;
          unsigned int v151 = *(WebGPU::PipelineLayout **)(v11 + 56);
          goto LABEL_23;
        }
      }
    }
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v14 = 0;
  }
  unsigned int v151 = *(WebGPU::PipelineLayout **)(v11 + 56);
  if (v12)
  {
LABEL_23:
    int v17 = (unsigned int *)(v12 + 16 * *(unsigned int *)(v12 - 4));
    goto LABEL_26;
  }
  int v17 = 0;
LABEL_26:
  int v150 = *((unsigned __int8 *)v151 + 32);
  unsigned int v148 = *((_DWORD *)v151 + 7);
  int v153 = v2;
  while (v15 != v17)
  {
    uint64_t v18 = *((void *)v15 + 1);
    if (!v18)
    {
      WebGPU::ComputePassEncoder::makeInvalid(v2, &cfstr_BindGroupWasDe.isa);
      goto LABEL_200;
    }
    uint64_t v19 = *v15;
    WebGPU::BindGroup::rebindSamplersIfNeeded(*((WebGPU::BindGroup **)v15 + 1));
    unint64_t v20 = (_DWORD *)*((void *)v2 + 11);
    if (v20)
    {
      int v21 = *(v20 - 2);
      unsigned int v22 = 9 * ((v19 + ~(v19 << 15)) ^ ((v19 + ~(v19 << 15)) >> 10));
      unsigned int v23 = (v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11);
      unsigned int v24 = v21 & (v23 ^ HIWORD(v23));
      uint64_t v25 = &v20[6 * v24];
      int v26 = *v25;
      if (*v25 == v19)
      {
LABEL_35:
        v20 += 6 * *(v20 - 1);
        uint64_t v28 = *(void *)(*((void *)v2 + 9) + 64);
        if (v28) {
          goto LABEL_36;
        }
      }
      else
      {
        int v27 = 1;
        while (v26 != -1)
        {
          unsigned int v24 = (v24 + v27) & v21;
          uint64_t v25 = &v20[6 * v24];
          int v26 = *v25;
          ++v27;
          if (*v25 == v19) {
            goto LABEL_35;
          }
        }
        uint64_t v25 = &v20[6 * *(v20 - 1)];
        unint64_t v20 = v25;
        uint64_t v28 = *(void *)(*((void *)v2 + 9) + 64);
        if (v28)
        {
LABEL_36:
          unsigned int v29 = *(_DWORD *)(v28 - 8);
          unsigned int v30 = 9 * ((v19 + ~(v19 << 15)) ^ ((v19 + ~(v19 << 15)) >> 10));
          unsigned int v31 = (v30 ^ (v30 >> 6)) + ~((v30 ^ (v30 >> 6)) << 11);
          uint64_t v32 = v29 & (v31 ^ HIWORD(v31));
          int v33 = *(_DWORD *)(v28 + 16 * v32);
          if (v33 != v19)
          {
            int v34 = 1;
            while (v33 != -1)
            {
              uint64_t v32 = (v32 + v34) & v29;
              int v33 = *(_DWORD *)(v28 + 16 * v32);
              ++v34;
              if (v33 == v19) {
                goto LABEL_46;
              }
            }
            uint64_t v32 = *(unsigned int *)(v28 - 4);
          }
LABEL_46:
          uint64_t v35 = v28 + 16 * v32;
          v28 += 16 * *(unsigned int *)(v28 - 4);
          goto LABEL_47;
        }
      }
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v28 = *(void *)(*((void *)v2 + 9) + 64);
      if (v28) {
        goto LABEL_36;
      }
    }
    uint64_t v35 = 0;
LABEL_47:
    if (v35 == v28) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = (void *)(v35 + 8);
    }
    if (v25 == v20) {
      uint64_t v37 = 0;
    }
    else {
      uint64_t v37 = (uint64_t)(v25 + 2);
    }
    WebGPU::errorValidatingBindGroup(v18, v36, v37);
    uint64_t v38 = (NSString *)objc_claimAutoreleasedReturnValue();
    if (v38)
    {
      WebGPU::ComputePassEncoder::makeInvalid(v2, v38);
      goto LABEL_199;
    }
    if (*(unsigned char *)(*((void *)v2 + 10) + 76)) {
      uint64_t v39 = 0;
    }
    else {
      uint64_t v39 = (void *)*((void *)v2 + 1);
    }
    id v40 = v39;
    id v41 = *(id *)(v18 + 32);
    [v40 setBuffer:v41 offset:0 atIndex:v19];

    id v42 = v15 + 4;
    uint64_t v15 = v14;
    uint64_t v2 = v153;
    if (v42 != v14)
    {
      uint64_t v15 = v42;
      while (*v15 >= 0xFFFFFFFE)
      {
        v15 += 4;
        if (v15 == v14)
        {
          uint64_t v15 = v14;
          break;
        }
      }
    }
  }
  uint64_t v43 = *((void *)v2 + 12);
  if (!v43)
  {
    uint64_t v46 = 0;
    LODWORD(v44) = 0;
LABEL_73:
    unsigned int v45 = (unsigned int *)(v43 + 24 * v44);
    goto LABEL_74;
  }
  uint64_t v44 = *(unsigned int *)(v43 - 4);
  unsigned int v45 = (unsigned int *)(v43 + 24 * v44);
  if (!*(_DWORD *)(v43 - 12))
  {
    uint64_t v46 = (unsigned int *)(v43 + 24 * v44);
    goto LABEL_73;
  }
  uint64_t v46 = (unsigned int *)*((void *)v2 + 12);
  if (v44)
  {
    uint64_t v47 = 24 * v44;
    uint64_t v46 = (unsigned int *)*((void *)v2 + 12);
    while (*v46 >= 0xFFFFFFFE)
    {
      v46 += 6;
      v47 -= 24;
      if (!v47)
      {
        uint64_t v46 = v45;
        break;
      }
    }
  }
LABEL_74:
  if (v43)
  {
    uint64_t v48 = (unsigned int *)(v43 + 24 * *(unsigned int *)(v43 - 4));
    if (v48 != v46) {
      goto LABEL_76;
    }
LABEL_140:
    if (!v43) {
      goto LABEL_148;
    }
LABEL_141:
    *((void *)v2 + 12) = 0;
    uint64_t v108 = *(unsigned int *)(v43 - 4);
    if (v108)
    {
      uint64_t v109 = v43 + 8;
      do
      {
        if (*(_DWORD *)(v109 - 8) != -2)
        {
          uint64_t v110 = *(WTF **)v109;
          if (*(void *)v109)
          {
            *(void *)uint64_t v109 = 0;
            *(_DWORD *)(v109 + 8) = 0;
            WTF::fastFree(v110, v9);
          }
        }
        v109 += 24;
        --v108;
      }
      while (v108);
    }
    WTF::fastFree((WTF *)(v43 - 16), v9);
LABEL_148:
    if (!*((_DWORD *)v2 + 17)) {
      goto LABEL_200;
    }
    uint64_t v111 = *((void *)v2 + 11);
    if (v111)
    {
      uint64_t v112 = *(unsigned int *)(v111 - 4);
      long long v113 = (int *)(v111 + 24 * v112);
      if (*(_DWORD *)(v111 - 12))
      {
        uint64_t v114 = (int *)*((void *)v2 + 11);
        if (v112)
        {
          uint64_t v115 = 24 * v112;
          uint64_t v114 = (int *)*((void *)v2 + 11);
          while (*v114 >= 0xFFFFFFFE)
          {
            v114 += 6;
            v115 -= 24;
            if (!v115)
            {
              uint64_t v114 = v113;
              break;
            }
          }
        }
LABEL_159:
        if (v111) {
          int v116 = (int *)(v111 + 24 * *(unsigned int *)(v111 - 4));
        }
        else {
          int v116 = 0;
        }
        if (v116 == v114)
        {
LABEL_183:
          if (*(unsigned char *)(*((void *)v153 + 10) + 76)) {
            uint64_t v131 = 0;
          }
          else {
            uint64_t v131 = (void *)*((void *)v153 + 1);
          }
          id v132 = v131;
          uint64_t v133 = *((unsigned int *)v153 + 17);
          if (!v133)
          {
LABEL_218:
            __break(0xC471u);
            JUMPOUT(0x1824EAAF0);
          }
          uint64_t v134 = v132;
          [v132 setBytes:*((void *)v153 + 7) length:4 * v133 atIndex:*(unsigned int *)(*((void *)v153 + 3) + 104)];

          uint64_t v135 = *((void *)v153 + 11);
          if (v135)
          {
            *((void *)v153 + 11) = 0;
            uint64_t v136 = *(unsigned int *)(v135 - 4);
            if (v136)
            {
              uint64_t v137 = v135 + 8;
              do
              {
                if (*(_DWORD *)(v137 - 8) != -2)
                {
                  long long v138 = *(WTF **)v137;
                  if (*(void *)v137)
                  {
                    *(void *)uint64_t v137 = 0;
                    *(_DWORD *)(v137 + 8) = 0;
                    WTF::fastFree(v138, v9);
                  }
                }
                v137 += 24;
                --v136;
              }
              while (v136);
            }
            WTF::fastFree((WTF *)(v135 - 16), v9);
          }
          goto LABEL_200;
        }
        while (1)
        {
          uint64_t v117 = *(void *)(*((void *)v153 + 9) + 56);
          unsigned int v118 = *v114;
          uint64_t v119 = WebGPU::PipelineLayout::offsetVectorForBindGroup(v117, *v114, (uint64_t *)(v117 + 80), (uint64_t *)v114 + 1, 4);
          if (v119)
          {
            unint64_t v120 = v119[3];
            if (v120) {
              break;
            }
          }
LABEL_178:
          uint64_t v130 = v114 + 6;
          uint64_t v114 = v113;
          if (v130 != v113)
          {
            uint64_t v114 = v130;
            while (*v114 >= 0xFFFFFFFE)
            {
              v114 += 6;
              if (v114 == v113)
              {
                uint64_t v114 = v113;
                break;
              }
            }
          }
          if (v114 == v116) {
            goto LABEL_183;
          }
        }
        uint64_t v121 = *(void *)(v117 + 56);
        if (v121)
        {
          unsigned int v122 = *(_DWORD *)(v121 - 8);
          unsigned int v123 = 9 * ((v118 + ~(v118 << 15)) ^ ((v118 + ~(v118 << 15)) >> 10));
          unsigned int v124 = (v123 ^ (v123 >> 6)) + ~((v123 ^ (v123 >> 6)) << 11);
          uint64_t v125 = v122 & (v124 ^ HIWORD(v124));
          int v126 = *(_DWORD *)(v121 + 8 * v125);
          if (v126 == v118)
          {
LABEL_172:
            if (v125 != *(_DWORD *)(v121 - 4))
            {
              unint64_t v128 = *(unsigned int *)(v121 + 8 * v125 + 4);
              unint64_t v129 = *((unsigned int *)v153 + 17);
              if (v128 > v129) {
                goto LABEL_215;
              }
              goto LABEL_176;
            }
          }
          else
          {
            int v127 = 1;
            while (v126 != -1)
            {
              uint64_t v125 = (v125 + v127) & v122;
              int v126 = *(_DWORD *)(v121 + 8 * v125);
              ++v127;
              if (v126 == v118) {
                goto LABEL_172;
              }
            }
          }
        }
        unint64_t v128 = 0;
        unint64_t v129 = *((unsigned int *)v153 + 17);
LABEL_176:
        if (v129 - v128 < v120) {
          goto LABEL_218;
        }
        memcpy((void *)(*((void *)v153 + 7) + 4 * v128), *(const void **)v119, 4 * v120);
        goto LABEL_178;
      }
      uint64_t v114 = (int *)(v111 + 24 * v112);
    }
    else
    {
      uint64_t v114 = 0;
      LODWORD(v112) = 0;
    }
    long long v113 = (int *)(v111 + 24 * v112);
    goto LABEL_159;
  }
  uint64_t v48 = 0;
  if (!v46) {
    goto LABEL_140;
  }
LABEL_76:
  BOOL v145 = v48;
  unsigned int v146 = v45;
  while (1)
  {
    if (v150)
    {
      uint64_t v49 = *v46;
      if (v148 > v49)
      {
        uint64_t v154 = WebGPU::PipelineLayout::bindGroupLayout(v151, *v46);
        uint64_t v50 = v46[5];
        if (v50) {
          break;
        }
      }
    }
LABEL_134:
    id v107 = v46 + 6;
    uint64_t v46 = v45;
    if (v107 != v45)
    {
      uint64_t v46 = v107;
      while (*v46 >= 0xFFFFFFFE)
      {
        v46 += 6;
        if (v46 == v45)
        {
          uint64_t v46 = v45;
          break;
        }
      }
    }
    if (v46 == v145)
    {
      uint64_t v43 = *((void *)v2 + 12);
      if (!v43) {
        goto LABEL_148;
      }
      goto LABEL_141;
    }
  }
  unint64_t v51 = (uint64_t *)*((void *)v46 + 1);
  uint64_t v147 = &v51[v50];
  while (1)
  {
    unint64_t v152 = v51;
    uint64_t v52 = *v51;
    id v156 = (id)*(unsigned int *)(*v51 + 12);
    if (v156) {
      break;
    }
LABEL_82:
    uint64_t v2 = v153;
    unint64_t v51 = v152 + 1;
    unsigned int v45 = v146;
    if (v152 + 1 == v147) {
      goto LABEL_134;
    }
  }
  unint64_t v53 = 0;
  while (1)
  {
    if (v53 >= *(unsigned int *)(v52 + 12)) {
      goto LABEL_216;
    }
    id v54 = *(id *)(*(void *)v52 + 8 * v53);
    if (v53 >= *(unsigned int *)(v52 + 28))
    {
      __break(0xC471u);
      JUMPOUT(0x1824EAB08);
    }
    id v55 = v54;
    uint64_t v56 = *(void *)(v154 + 16);
    if (v56)
    {
      uint64_t v57 = *(void *)(v52 + 16);
      uint64_t v58 = v57 + 40 * v53;
      uint64_t v59 = *(unsigned int *)(v58 + 4);
      unsigned int v60 = *(_DWORD *)(v56 - 8);
      uint64_t v61 = ~(v59 << 32);
      unint64_t v62 = ((v61 + v59) ^ ((unint64_t)(v61 + v59) >> 22))
          + ~(((v61 + v59) ^ ((unint64_t)(v61 + v59) >> 22)) << 13);
      unint64_t v63 = (9 * (v62 ^ (v62 >> 8))) ^ ((9 * (v62 ^ (v62 >> 8))) >> 15);
      uint64_t v64 = v60 & (((v63 + ~(v63 << 27)) >> 31) ^ (v63 + ~(v63 << 27)));
      uint64_t v65 = *(void *)(v56 + 16 * v64);
      if (v65 == v59)
      {
LABEL_94:
        if (v64 != *(_DWORD *)(v56 - 4)) {
          break;
        }
      }
      else
      {
        int v66 = 1;
        while (v65 != -1)
        {
          uint64_t v64 = (v64 + v66) & v60;
          uint64_t v65 = *(void *)(v56 + 16 * v64);
          ++v66;
          if (v65 == v59) {
            goto LABEL_94;
          }
        }
        uint64_t v64 = *(unsigned int *)(v56 - 4);
      }
      unint64_t v67 = ((v59 | 0x100000000) + v61) ^ (((v59 | 0x100000000uLL) + v61) >> 22);
      unint64_t v68 = 9 * ((v67 + ~(v67 << 13)) ^ ((v67 + ~(v67 << 13)) >> 8));
      unint64_t v69 = (v68 ^ (v68 >> 15)) + ~((v68 ^ (v68 >> 15)) << 27);
      uint64_t v70 = v60 & ((v69 >> 31) ^ v69);
      uint64_t v71 = *(void *)(v56 + 16 * v70);
      if (v71 == (v59 | 0x100000000))
      {
LABEL_101:
        if (v70 != v64) {
          break;
        }
      }
      else
      {
        int v72 = 1;
        while (v71 != -1)
        {
          uint64_t v70 = (v70 + v72) & v60;
          uint64_t v71 = *(void *)(v56 + 16 * v70);
          ++v72;
          if (v71 == (v59 | 0x100000000)) {
            goto LABEL_101;
          }
        }
      }
      unint64_t v73 = ((v59 | 0x200000000) + v61) ^ (((v59 | 0x200000000uLL) + v61) >> 22);
      unint64_t v74 = 9 * ((v73 + ~(v73 << 13)) ^ ((v73 + ~(v73 << 13)) >> 8));
      unint64_t v75 = (v74 ^ (v74 >> 15)) + ~((v74 ^ (v74 >> 15)) << 27);
      uint64_t v76 = v60 & ((v75 >> 31) ^ v75);
      uint64_t v77 = *(void *)(v56 + 16 * v76);
      if (v77 == (v59 | 0x200000000))
      {
LABEL_106:
        if (v76 != v64) {
          break;
        }
      }
      else
      {
        int v78 = 1;
        while (v77 != -1)
        {
          uint64_t v76 = (v76 + v78) & v60;
          uint64_t v77 = *(void *)(v56 + 16 * v76);
          ++v78;
          if (v77 == (v59 | 0x200000000)) {
            goto LABEL_106;
          }
        }
      }
      uint64_t v79 = v59 | 0x300000000;
      unint64_t v80 = ((v79 + v61) ^ ((unint64_t)(v79 + v61) >> 22))
          + ~(((v79 + v61) ^ ((unint64_t)(v79 + v61) >> 22)) << 13);
      unint64_t v81 = (9 * (v80 ^ (v80 >> 8))) ^ ((9 * (v80 ^ (v80 >> 8))) >> 15);
      uint64_t v82 = v60 & (((v81 + ~(v81 << 27)) >> 31) ^ (v81 + ~(v81 << 27)));
      uint64_t v83 = *(void *)(v56 + 16 * v82);
      if (v83 != v79)
      {
        int v84 = 1;
        while (v83 != -1)
        {
          uint64_t v82 = (v82 + v84) & v60;
          uint64_t v83 = *(void *)(v56 + 16 * v82);
          ++v84;
          if (v83 == v79) {
            goto LABEL_111;
          }
        }
        goto LABEL_86;
      }
LABEL_111:
      if (v82 != v64) {
        break;
      }
    }
LABEL_86:

    if ((id)++v53 == v156) {
      goto LABEL_82;
    }
  }
  uint64_t v85 = v57 + 40 * v53;
  BOOL v86 = (uint64_t *)(v85 + 8);
  int v87 = *(_DWORD *)v58;
  uint64_t v38 = v55;
  int v88 = *(_DWORD *)(v85 + 16);
  if (v88 == -1) {
    uint64_t v89 = -1;
  }
  else {
    uint64_t v89 = *(unsigned int *)(v85 + 16);
  }
  if (v89 == 2)
  {
    if (v88 != 2) {
      goto LABEL_214;
    }
    char active = WebGPU::addResourceToActiveResources(*v86, v38, v87, &v157, v49, 0, 0, 2u);
LABEL_129:
    char v102 = active;

    if ((v102 & 1) == 0) {
      goto LABEL_196;
    }
    goto LABEL_86;
  }
  if (v89 != 1)
  {
    if (v88)
    {
LABEL_214:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_215:
      __break(1u);
LABEL_216:
      __break(0xC471u);
      JUMPOUT(0x1824EAB00);
    }
    uint64_t v101 = *v86;
    if (!*v86)
    {
LABEL_85:

      goto LABEL_86;
    }
    if ((v87 & 4) != 0)
    {
      *(void *)(v101 + 232) = -1;
      *(void *)(v101 + 240) = -1;
      *(void *)(v101 + 272) = 0;
      *(void *)(v101 + 248) = 0;
      *(void *)(v101 + 256) = 0;
      *(_DWORD *)(v101 + 264) = 0;
      uint64_t v101 = *v86;
    }
    char active = WebGPU::addResourceToActiveResources(v101, *(void **)(v101 + 16), v87, &v157, v49, 0, 0, 2u);
    goto LABEL_129;
  }
  if (v88 != 1) {
    goto LABEL_214;
  }
  uint64_t v90 = *v86;
  if (!v90) {
    goto LABEL_85;
  }
  uint64_t v91 = v49;
  unsigned int v92 = *(_DWORD *)(v90 + 64);
  uint64_t v93 = *(void *)(v90 + 96);
  id v94 = *(id *)(v93 + 16);
  unsigned int v95 = *(_DWORD *)(v90 + 48);
  uint64_t v96 = *(unsigned int *)(v90 + 56);
  if (v92)
  {
    uint64_t v97 = v93;
    int64x2_t v98 = v94;
    char v99 = WebGPU::addResourceToActiveResources(v97, v94, v87, &v157, v91, v95, v96, v92);

    uint64_t v49 = v91;
    if ((v99 & 1) == 0) {
      goto LABEL_196;
    }
    goto LABEL_86;
  }
  unsigned int v149 = v94;
  if (WebGPU::addResourceToActiveResources(v93, v94, v87, &v157, v91, v95, v96, 2u))
  {
    uint64_t v103 = *(void *)(v90 + 96);
    id v104 = *(id *)(v103 + 16);
    uint64_t v105 = v103;
    uint64_t v49 = v91;
    char v106 = WebGPU::addResourceToActiveResources(v105, v104, v87, &v157, v91, *(_DWORD *)(v90 + 48), *(unsigned int *)(v90 + 56), 1u);

    if ((v106 & 1) == 0) {
      goto LABEL_196;
    }
    goto LABEL_86;
  }

LABEL_196:
  BOOL v139 = (void *)*((void *)v153 + 14);
  *((void *)v153 + 14) = 0;

  id v140 = (id *)*((void *)v153 + 10);
  if (*((void *)v153 + 1))
  {
    objc_storeStrong(v140 + 8, 0);
    WebGPU::CommandEncoder::endEncoding(*((void *)v153 + 10), *((void **)v153 + 1));
    uint64_t v141 = (void *)*((void *)v153 + 1);
    *((void *)v153 + 1) = 0;
  }
  else
  {
    WebGPU::CommandEncoder::makeInvalid((WebGPU::CommandEncoder *)v140, &cfstr_Renderpassenco.isa);
  }
LABEL_199:

LABEL_200:
  uint64_t v142 = v157;
  if (v157)
  {
    uint64_t v143 = *(unsigned int *)(v157 - 4);
    if (v143)
    {
      uint64_t v144 = (void *)(v157 + 8);
      do
      {
        if (*(v144 - 1) != -1 && *v144) {
          WTF::fastFree((WTF *)(*v144 - 16), v9);
        }
        v144 += 2;
        --v143;
      }
      while (v143);
    }
    WTF::fastFree((WTF *)(v142 - 16), v9);
  }
}

void sub_1824EAB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);

  WTF::HashMap<void const*,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap((uint64_t *)va, v14);
  _Unwind_Resume(a1);
}

void sub_1824EAB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);

  WTF::HashMap<void const*,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap((uint64_t *)va, v14);
  _Unwind_Resume(a1);
}

void sub_1824EAB44(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  WTF::HashMap<void const*,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1824EAB58(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  WTF::HashMap<void const*,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1824EAB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);

  WTF::HashMap<void const*,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap((uint64_t *)va, v14);
  _Unwind_Resume(a1);
}

void sub_1824EAB84(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  WTF::HashMap<void const*,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1824EAB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);

  WTF::HashMap<void const*,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap((uint64_t *)va, v14);
  _Unwind_Resume(a1);
}

void sub_1824EABB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19, uint64_t a20)
{
  WTF::HashMap<void const*,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap(&a20, v23);
  _Unwind_Resume(a1);
}

void sub_1824EAC10(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  WTF::HashMap<void const*,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1824EAC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);

  WTF::HashMap<void const*,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap((uint64_t *)va, v15);
  _Unwind_Resume(a1);
}

void sub_1824EAC40(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  WTF::HashMap<void const*,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1824EAC54(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  WTF::HashMap<void const*,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

void sub_1824EAC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);

  WTF::HashMap<void const*,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap((uint64_t *)va, v14);
  _Unwind_Resume(a1);
}

void WebGPU::ComputePassEncoder::makeInvalid(WebGPU::ComputePassEncoder *this, NSString *a2)
{
  id v7 = a2;
  objc_storeStrong((id *)this + 14, a2);
  uint64_t v4 = (id *)*((void *)this + 10);
  if (*((void *)this + 1))
  {
    objc_storeStrong(v4 + 8, a2);
    WebGPU::CommandEncoder::endEncoding(*((void *)this + 10), *((void **)this + 1));
    uint64_t v5 = (void *)*((void *)this + 1);
    *((void *)this + 1) = 0;

    int v6 = v7;
  }
  else
  {
    WebGPU::CommandEncoder::makeInvalid((WebGPU::CommandEncoder *)v4, &cfstr_Renderpassenco.isa);
    int v6 = v7;
  }
}

void sub_1824EAD3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t WebGPU::addResourceToActiveResources(uint64_t a1, void *a2, int a3, uint64_t *a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8)
{
  id v15 = a2;
  id v16 = v15;
  if ((a3 & 0xFFFFFFF0) != 0)
  {
    id v17 = v15;
    uint64_t v18 = [v17 parentTexture];
    uint64_t v19 = v18;
    id v16 = v17;
    if (v18)
    {
      id v16 = v18;

      a6 = [v17 parentRelativeLevel];
      a7 = [v17 parentRelativeSlice];
    }
  }
  uint64_t EntryMapKey = WebGPU::BindGroup::makeEntryMapKey(a6, a7, a8);
  uint64_t v67 = EntryMapKey;
  uint64_t v21 = *a4;
  if (!*a4) {
    goto LABEL_11;
  }
  unsigned int v22 = *(_DWORD *)(v21 - 8);
  unint64_t v23 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  unint64_t v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
  unint64_t v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
  uint64_t v26 = v22 & ((v25 >> 31) ^ v25);
  uint64_t v27 = *(void *)(v21 + 16 * v26);
  if (v27 != a1)
  {
    int v28 = 1;
    while (v27)
    {
      uint64_t v26 = (v26 + v28) & v22;
      uint64_t v27 = *(void *)(v21 + 16 * v26);
      ++v28;
      if (v27 == a1) {
        goto LABEL_10;
      }
    }
    goto LABEL_11;
  }
LABEL_10:
  if (v26 == *(_DWORD *)(v21 - 4))
  {
LABEL_11:
    unsigned int v29 = 0;
LABEL_20:
    int v40 = a3;
    goto LABEL_21;
  }
  uint64_t v30 = v21 + 16 * v26;
  uint64_t v32 = *(void *)(v30 + 8);
  unsigned int v29 = (uint64_t *)(v30 + 8);
  uint64_t v31 = v32;
  if (!v32) {
    goto LABEL_19;
  }
  unsigned int v33 = *(_DWORD *)(v31 - 8);
  unint64_t v34 = (EntryMapKey + ~(EntryMapKey << 32)) ^ ((unint64_t)(EntryMapKey + ~(EntryMapKey << 32)) >> 22);
  unint64_t v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
  unint64_t v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
  uint64_t v37 = v33 & ((v36 >> 31) ^ v36);
  uint64_t v38 = *(void *)(v31 + 16 * v37);
  if (v38 != EntryMapKey)
  {
    int v39 = 1;
    while (v38 != -1)
    {
      uint64_t v37 = (v37 + v39) & v33;
      uint64_t v38 = *(void *)(v31 + 16 * v37);
      ++v39;
      if (v38 == EntryMapKey) {
        goto LABEL_18;
      }
    }
    goto LABEL_19;
  }
LABEL_18:
  if (v37 == *(_DWORD *)(v31 - 4))
  {
LABEL_19:
    unint64_t v66 = __PAIR64__(a5, a3);
    WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>::inlineSet<unsigned long long const&,WebGPU::EntryUsageData>(v65, v29, &v67, &v66);
    goto LABEL_20;
  }
  uint64_t v59 = v31 + 16 * v37;
  int v60 = *(_DWORD *)(v59 + 8);
  int v61 = *(_DWORD *)(v59 + 12);
  int v40 = v60 | a3;
  if (v61 != a5)
  {
    if (a3 == 512)
    {
      if (v60 == 512) {
        goto LABEL_51;
      }
    }
    else if (a3 == 128 && v60 == 128)
    {
      goto LABEL_51;
    }
  }
LABEL_21:
  if ((v40 & 4) != 0)
  {
    if (v40 == 4) {
      goto LABEL_29;
    }
  }
  else if (v40 == 128 || (v40 & 0x80) == 0)
  {
    if ((v40 & 0x200) != 0)
    {
      if (v40 == 512) {
        goto LABEL_29;
      }
    }
    else if (v40 == 16 || (v40 & 0x10) == 0)
    {
LABEL_29:
      if (v29)
      {
LABEL_67:
        uint64_t v58 = 1;
        goto LABEL_68;
      }
      unint64_t v66 = 0;
      unint64_t v64 = __PAIR64__(a5, v40);
      WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>::inlineSet<unsigned long long const&,WebGPU::EntryUsageData>(v65, (uint64_t *)&v66, &v67, &v64);
      uint64_t v41 = *a4;
      if (*a4
        || (WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(a4, 8u), (uint64_t v41 = *a4) != 0))
      {
        int v42 = *(_DWORD *)(v41 - 8);
      }
      else
      {
        int v42 = 0;
      }
      unint64_t v43 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
      unint64_t v44 = 9 * ((v43 + ~(v43 << 13)) ^ ((v43 + ~(v43 << 13)) >> 8));
      unint64_t v45 = (v44 ^ (v44 >> 15)) + ~((v44 ^ (v44 >> 15)) << 27);
      unsigned int v46 = v42 & ((v45 >> 31) ^ v45);
      uint64_t v47 = (void *)(v41 + 16 * v46);
      uint64_t v48 = *v47;
      if (*v47)
      {
        uint64_t v49 = 0;
        int v50 = 1;
        while (v48 != a1)
        {
          if (v48 == -1) {
            uint64_t v49 = v47;
          }
          unsigned int v46 = (v46 + v50) & v42;
          uint64_t v47 = (void *)(v41 + 16 * v46);
          uint64_t v48 = *v47;
          ++v50;
          if (!*v47)
          {
            if (v49)
            {
              *uint64_t v49 = 0;
              v49[1] = 0;
              --*(_DWORD *)(*a4 - 16);
              uint64_t v47 = v49;
            }
            goto LABEL_41;
          }
        }
        WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebGPU::EntryUsageData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebGPU::EntryUsageData>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::HashTable(v65, &v66);
        uint64_t v62 = v47[1];
        v47[1] = v65[0];
        v65[0] = v62;
        if (v62) {
          WTF::fastFree((WTF *)(v62 - 16), v51);
        }
        goto LABEL_65;
      }
LABEL_41:
      *uint64_t v47 = a1;
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebGPU::EntryUsageData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebGPU::EntryUsageData>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::HashTable(v65, &v66);
      uint64_t v52 = v65[0];
      v65[0] = 0;
      uint64_t v53 = v47[1];
      v47[1] = v52;
      if (v53)
      {
        WTF::fastFree((WTF *)(v53 - 16), v51);
        if (v65[0]) {
          WTF::fastFree((WTF *)(v65[0] - 16), v51);
        }
      }
      if (*a4)
      {
        ++*(_DWORD *)(*a4 - 12);
        uint64_t v54 = *a4;
        if (*a4) {
          goto LABEL_46;
        }
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        uint64_t v54 = *a4;
        if (*a4)
        {
LABEL_46:
          uint64_t v55 = (*(_DWORD *)(v54 - 16) + *(_DWORD *)(v54 - 12));
          unint64_t v56 = *(unsigned int *)(v54 - 4);
          if (v56 <= 0x400) {
            goto LABEL_47;
          }
          goto LABEL_62;
        }
      }
      uint64_t v55 = *(unsigned int *)(v54 - 16);
      unint64_t v56 = *(unsigned int *)(v54 - 4);
      if (v56 <= 0x400)
      {
LABEL_47:
        if (3 * v56 > 4 * v55) {
          goto LABEL_65;
        }
        if (!v56)
        {
          unsigned int v57 = 8;
LABEL_64:
          WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(a4, v57);
LABEL_65:
          if (v66) {
            WTF::fastFree((WTF *)(v66 - 16), v51);
          }
          goto LABEL_67;
        }
LABEL_63:
        unsigned int v57 = v56 << (6 * *(_DWORD *)(v54 - 12) >= (2 * v56));
        goto LABEL_64;
      }
LABEL_62:
      if (v56 > 2 * v55) {
        goto LABEL_65;
      }
      goto LABEL_63;
    }
  }
LABEL_51:
  uint64_t v58 = 0;
LABEL_68:

  return v58;
}

void sub_1824EB1E4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
  {
    WTF::fastFree((WTF *)(a13 - 16), a2);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

uint64_t *WTF::HashMap<void const*,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = (void *)(v3 + 8);
      do
      {
        if (*(v5 - 1) != -1 && *v5) {
          WTF::fastFree((WTF *)(*v5 - 16), a2);
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

uint64_t WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::remove(uint64_t *a1, int *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v4 = *(_DWORD *)(v2 - 8);
  int v5 = *a2;
  unsigned int v6 = 9 * ((v5 + ~(v5 << 15)) ^ ((v5 + ~(v5 << 15)) >> 10));
  unsigned int v7 = (v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11);
  unsigned int v8 = (v7 ^ HIWORD(v7)) & v4;
  uint64_t v9 = v2 + 24 * v8;
  int v10 = *(_DWORD *)v9;
  if (*(_DWORD *)v9 != *a2)
  {
    int v11 = 1;
    while (v10 != -1)
    {
      unsigned int v8 = (v8 + v11) & v4;
      uint64_t v9 = v2 + 24 * v8;
      int v10 = *(_DWORD *)v9;
      ++v11;
      if (*(_DWORD *)v9 == v5) {
        goto LABEL_6;
      }
    }
    return 0;
  }
LABEL_6:
  if (v2 + 24 * *(unsigned int *)(v2 - 4) == v9) {
    return 0;
  }
  *(_DWORD *)uint64_t v9 = -2;
  uint64_t v12 = *(WTF **)(v9 + 8);
  if (v12)
  {
    *(void *)(v9 + 8) = 0;
    *(_DWORD *)(v9 + 16) = 0;
    WTF::fastFree(v12, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  if (*a1)
  {
    --*(_DWORD *)(*a1 - 12);
    uint64_t v13 = *a1;
    if (!*a1) {
      return 1;
    }
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
    uint64_t v13 = *a1;
    if (!*a1) {
      return 1;
    }
  }
  unsigned int v15 = 6 * *(_DWORD *)(v13 - 12);
  unsigned int v16 = *(_DWORD *)(v13 - 4);
  if (v15 >= v16 || v16 < 9) {
    return 1;
  }
  WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1, v16 >> 1, 0);
  return 1;
}

_DWORD *wgpuComputePassEncoderReference(_DWORD *result)
{
  return result;
}

uint64_t wgpuComputePassEncoderRelease(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_DWORD *)result != 1)
  {
    --*(_DWORD *)result;
    return result;
  }
  uint64_t v2 = *(void **)(result + 8);
  if (v2)
  {
    WebGPU::CommandEncoder::makeInvalid(*(WebGPU::CommandEncoder **)(result + 80), &cfstr_Gpucomputepass.isa);
    uint64_t v2 = *(void **)(v1 + 8);
  }
  *(void *)(v1 + 8) = 0;

  uint64_t v4 = *(void *)(v1 + 104);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 4);
    if (v5)
    {
      unsigned int v6 = (WebGPU::BindGroup **)(v4 + 8);
      do
      {
        if (*((_DWORD *)v6 - 2) != -2)
        {
          uint64_t v9 = *v6;
          *unsigned int v6 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 1)
            {
              WebGPU::BindGroup::~BindGroup(v9, v3);
              WTF::fastFree(v7, v8);
            }
            else
            {
              --*(_DWORD *)v9;
            }
          }
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), v3);
  }
  uint64_t v10 = *(void *)(v1 + 96);
  if (v10)
  {
    uint64_t v11 = *(unsigned int *)(v10 - 4);
    if (v11)
    {
      uint64_t v12 = v10 + 8;
      do
      {
        if (*(_DWORD *)(v12 - 8) != -2)
        {
          uint64_t v13 = *(WTF **)v12;
          if (*(void *)v12)
          {
            *(void *)uint64_t v12 = 0;
            *(_DWORD *)(v12 + 8) = 0;
            WTF::fastFree(v13, v3);
          }
        }
        v12 += 24;
        --v11;
      }
      while (v11);
    }
    WTF::fastFree((WTF *)(v10 - 16), v3);
  }
  uint64_t v14 = *(void *)(v1 + 88);
  if (v14)
  {
    uint64_t v15 = *(unsigned int *)(v14 - 4);
    if (v15)
    {
      uint64_t v16 = v14 + 8;
      do
      {
        if (*(_DWORD *)(v16 - 8) != -2)
        {
          id v17 = *(WTF **)v16;
          if (*(void *)v16)
          {
            *(void *)uint64_t v16 = 0;
            *(_DWORD *)(v16 + 8) = 0;
            WTF::fastFree(v17, v3);
          }
        }
        v16 += 24;
        --v15;
      }
      while (v15);
    }
    WTF::fastFree((WTF *)(v14 - 16), v3);
  }
  uint64_t v18 = *(WebGPU::CommandEncoder **)(v1 + 80);
  *(void *)(v1 + 80) = 0;
  if (!v18)
  {
LABEL_34:
    uint64_t v19 = *(WebGPU::ComputePipeline **)(v1 + 72);
    *(void *)(v1 + 72) = 0;
    if (v19) {
      goto LABEL_35;
    }
    goto LABEL_38;
  }
  if (*(_DWORD *)v18 != 1)
  {
    --*(_DWORD *)v18;
    goto LABEL_34;
  }
  WebGPU::CommandEncoder::~CommandEncoder(v18);
  WTF::fastFree(v24, v25);
  uint64_t v19 = *(WebGPU::ComputePipeline **)(v1 + 72);
  *(void *)(v1 + 72) = 0;
  if (v19)
  {
LABEL_35:
    if (*(_DWORD *)v19 == 1)
    {
      WebGPU::ComputePipeline::~ComputePipeline(v19, v3);
      WTF::fastFree(v20, v21);
    }
    else
    {
      --*(_DWORD *)v19;
    }
  }
LABEL_38:
  unsigned int v22 = *(WTF **)(v1 + 56);
  if (v22)
  {
    *(void *)(v1 + 56) = 0;
    *(_DWORD *)(v1 + 64) = 0;
    WTF::fastFree(v22, v3);
  }
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)(v1 + 24), v3);

  return WTF::fastFree((WTF *)v1, v23);
}

void sub_1824EB658(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 104);
  if (v4)
  {
    uint64_t v11 = *(unsigned int *)(v4 - 4);
    if (v11)
    {
      id v17 = (WebGPU::BindGroup **)(v4 + 8);
      do
      {
        if (*((_DWORD *)v17 - 2) != -2)
        {
          unint64_t v20 = *v17;
          *id v17 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 1)
            {
              WebGPU::BindGroup::~BindGroup(v20, v3);
              WTF::fastFree(v18, v19);
            }
            else
            {
              --*(_DWORD *)v20;
            }
          }
        }
        v17 += 2;
        --v11;
      }
      while (v11);
    }
    WTF::fastFree((WTF *)(v4 - 16), v3);
    uint64_t v5 = *(void *)(v1 + 96);
    if (!v5)
    {
LABEL_3:
      uint64_t v6 = *(void *)(v1 + 88);
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(v1 + 96);
    if (!v5) {
      goto LABEL_3;
    }
  }
  uint64_t v12 = *(unsigned int *)(v5 - 4);
  if (v12)
  {
    uint64_t v21 = v5 + 8;
    do
    {
      if (*(_DWORD *)(v21 - 8) != -2)
      {
        unsigned int v22 = *(WTF **)v21;
        if (*(void *)v21)
        {
          *(void *)uint64_t v21 = 0;
          *(_DWORD *)(v21 + 8) = 0;
          WTF::fastFree(v22, v3);
        }
      }
      v21 += 24;
      --v12;
    }
    while (v12);
  }
  WTF::fastFree((WTF *)(v5 - 16), v3);
  uint64_t v6 = *(void *)(v1 + 88);
  if (!v6)
  {
LABEL_4:
    unsigned int v7 = *(WebGPU::CommandEncoder **)(v1 + 80);
    *(void *)(v1 + 80) = 0;
    if (!v7) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_12:
  uint64_t v13 = *(unsigned int *)(v6 - 4);
  if (v13)
  {
    uint64_t v23 = v6 + 8;
    do
    {
      if (*(_DWORD *)(v23 - 8) != -2)
      {
        unint64_t v24 = *(WTF **)v23;
        if (*(void *)v23)
        {
          *(void *)uint64_t v23 = 0;
          *(_DWORD *)(v23 + 8) = 0;
          WTF::fastFree(v24, v3);
        }
      }
      v23 += 24;
      --v13;
    }
    while (v13);
  }
  WTF::fastFree((WTF *)(v6 - 16), v3);
  unsigned int v7 = *(WebGPU::CommandEncoder **)(v1 + 80);
  *(void *)(v1 + 80) = 0;
  if (!v7)
  {
LABEL_5:
    unsigned int v8 = *(WebGPU::ComputePipeline **)(v1 + 72);
    *(void *)(v1 + 72) = 0;
    if (v8) {
      goto LABEL_6;
    }
LABEL_18:
    uint64_t v16 = *(WTF **)(v1 + 56);
    if (v16)
    {
      *(void *)(v1 + 56) = 0;
      *(_DWORD *)(v1 + 64) = 0;
      WTF::fastFree(v16, v3);
    }
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)(v1 + 24), v3);

    _Unwind_Resume(a1);
  }
LABEL_14:
  if (*(_DWORD *)v7 == 1)
  {
    WebGPU::CommandEncoder::~CommandEncoder(v7);
    WTF::fastFree(v14, v15);
    unsigned int v8 = *(WebGPU::ComputePipeline **)(v1 + 72);
    *(void *)(v1 + 72) = 0;
    if (!v8) {
      goto LABEL_18;
    }
  }
  else
  {
    --*(_DWORD *)v7;
    unsigned int v8 = *(WebGPU::ComputePipeline **)(v1 + 72);
    *(void *)(v1 + 72) = 0;
    if (!v8) {
      goto LABEL_18;
    }
  }
LABEL_6:
  if (*(_DWORD *)v8 == 1)
  {
    WebGPU::ComputePipeline::~ComputePipeline(v8, v3);
    WTF::fastFree(v9, v10);
  }
  else
  {
    --*(_DWORD *)v8;
  }
  goto LABEL_18;
}

void wgpuComputePassEncoderDispatchWorkgroups(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v5 = *(void *)(a1 + 80);
  if (*(unsigned char *)(v5 + 4) == 1)
  {
    unsigned int v7 = *(void **)(a1 + 8);
    if (v7 && *(void *)(v5 + 16))
    {
      if (WebGPU::CommandEncoder::encoderIsCurrent(v5, v7))
      {
        WebGPU::ComputePassEncoder::executePreDispatchCommands((WebGPU::ComputePassEncoder *)a1, 0);
        unsigned int v10 = *(_DWORD *)(*(void *)(a1 + 24) + 228);
        if (v10 >= a4 && v10 >= a2 && v10 >= a3)
        {
          if (a3 * a2 * a4)
          {
            if (*(unsigned char *)(*(void *)(a1 + 80) + 76)) {
              unint64_t v25 = 0;
            }
            else {
              unint64_t v25 = *(void **)(a1 + 8);
            }
            id v26 = v25;
            v29[0] = a2;
            v29[1] = a3;
            v29[2] = a4;
            long long v27 = *(_OWORD *)(a1 + 32);
            uint64_t v28 = *(void *)(a1 + 48);
            [v26 dispatchThreadgroups:v29 threadsPerThreadgroup:&v27];
          }
        }
        else
        {
          WebGPU::ComputePassEncoder::makeInvalid((WebGPU::ComputePassEncoder *)a1, 0);
        }
        return;
      }
      unsigned int v7 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 24);
    uint64_t v14 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::ComputePassEncoder::dispatch(uint32_t, uint32_t, uint32_t)");
    MEMORY[0x18530AF50](v29, v14);
    uint64_t v15 = *(void *)(v13 + 32);
    uint64_t v16 = 32 * *(unsigned int *)(v13 + 44);
    uint64_t v17 = v15 + v16;
    while (v16)
    {
      int v18 = *(_DWORD *)(v17 - 8);
      v17 -= 32;
      v16 -= 32;
      if (!v18)
      {
        uint64_t v19 = v15 + v16;
        if (!*(unsigned char *)(v19 + 16))
        {
          uint64_t v20 = v29[0];
          v29[0] = 0;
          *(_DWORD *)uint64_t v19 = 1;
          *(void *)(v19 + 8) = v20;
          *(unsigned char *)(v19 + 16) = 1;
        }
        goto LABEL_23;
      }
    }
    uint64_t v21 = *(void *)(v13 + 24);
    if (v21)
    {
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v21 + 16))(v21, 1, v29);
      uint64_t v22 = *(void *)(v13 + 24);
      *(void *)(v13 + 24) = 0;
      if (v22) {
        (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
      }
    }
LABEL_23:
    uint64_t v23 = (_DWORD *)v29[0];
    v29[0] = 0;
    if (v23)
    {
      if (*v23 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v23 -= 2;
      }
    }

    unint64_t v24 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
}

void sub_1824EBA9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824EBAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  if (a14)
  {
    if (*a14 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a14 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_1824EBAE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void wgpuComputePassEncoderDispatchWorkgroupsIndirect(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 80);
  if (*(unsigned char *)(v4 + 4) != 1)
  {
    uint64_t v9 = *(void *)(a1 + 24);
    unsigned int v10 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::ComputePassEncoder::dispatchIndirect(const Buffer &, uint64_t)");
    MEMORY[0x18530AF50](&v46, v10);
    uint64_t v11 = *(void *)(v9 + 32);
    uint64_t v12 = 32 * *(unsigned int *)(v9 + 44);
    uint64_t v13 = v11 + v12;
    while (v12)
    {
      int v14 = *(_DWORD *)(v13 - 8);
      v13 -= 32;
      v12 -= 32;
      if (!v14)
      {
        uint64_t v15 = v11 + v12;
        if (!*(unsigned char *)(v15 + 16))
        {
          uint64_t v16 = v46;
          *(void *)&long long v46 = 0;
          *(_DWORD *)uint64_t v15 = 1;
          *(void *)(v15 + 8) = v16;
          *(unsigned char *)(v15 + 16) = 1;
        }
        goto LABEL_21;
      }
    }
    uint64_t v17 = *(void *)(v9 + 24);
    if (v17)
    {
      (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v17 + 16))(v17, 1, &v46);
      uint64_t v18 = *(void *)(v9 + 24);
      *(void *)(v9 + 24) = 0;
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
      }
    }
LABEL_21:
    uint64_t v19 = (_DWORD *)v46;
    *(void *)&long long v46 = 0;
    if (v19)
    {
      if (*v19 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v19 -= 2;
      }
    }

    uint64_t v20 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;

    return;
  }
  uint64_t v6 = *(void **)(a1 + 8);
  if (!v6 || !*(void *)(v4 + 16))
  {
LABEL_28:
    *(void *)(a1 + 8) = 0;

    return;
  }
  if (!WebGPU::CommandEncoder::encoderIsCurrent(v4, v6))
  {
    uint64_t v6 = *(void **)(a1 + 8);
    goto LABEL_28;
  }
  if (*(unsigned char *)(a2 + 52) == 4 || *(void *)(a2 + 16))
  {
    uint64_t v8 = *(void *)(a2 + 280);
    if (*(void *)(v8 + 8))
    {
      if (v8 == *(void *)(a1 + 24)
        && (a3 & 3) == 0
        && a3 < 0xFFFFFFFFFFFFFFF4
        && (*(_DWORD *)(a2 + 48) & 0x100) != 0
        && a3 + 12 <= *(void *)(a2 + 40))
      {
        WebGPU::Buffer::setCommandEncoder((WebGPU::Buffer *)a2, *(WebGPU::CommandEncoder **)(a1 + 80));
        if (*(unsigned char *)(a2 + 52) == 4) {
          return;
        }
        id v21 = *(id *)(*(void *)(a1 + 24) + 8);
        uint64_t v22 = (void *)WebGPU::ComputePassEncoder::runPredispatchIndirectCallValidation(WebGPU::Buffer const&,unsigned long long)::function;
        if (!WebGPU::ComputePassEncoder::runPredispatchIndirectCallValidation(WebGPU::Buffer const&,unsigned long long)::function)
        {
          uint64_t v30 = *(unsigned int *)(*(void *)(a1 + 24) + 228);
          uint64_t v23 = objc_opt_new();
          [v23 setFastMathEnabled:1];
          objc_msgSend(NSString, "stringWithFormat:", @"[[kernel]] void cs(device const uint* indirectBuffer, device uint* dispatchCallBuffer, uint index [[thread_position_in_grid]]) { dispatchCallBuffer[index] = metal::select(indirectBuffer[index], 0u, indirectBuffer[index] > %u); }",
          uint64_t v31 = v30);
          id v48 = 0;
          uint64_t v32 = (void *)[v21 newLibraryWithSource:v31 options:v23 error:&v48];
          id v33 = v48;

          if (v33)
          {

            id v29 = 0;
LABEL_56:

            if (v29)
            {
              WebGPU::ComputePassEncoder::executePreDispatchCommands((WebGPU::ComputePassEncoder *)a1, (id *)a2);
              if (*(unsigned char *)(*(void *)(a1 + 80) + 76)) {
                int v40 = 0;
              }
              else {
                int v40 = *(void **)(a1 + 8);
              }
              id v41 = v40;
              long long v46 = *(_OWORD *)(a1 + 32);
              uint64_t v47 = *(void *)(a1 + 48);
              [v41 dispatchThreadgroupsWithIndirectBuffer:v29 indirectBufferOffset:0 threadsPerThreadgroup:&v46];
            }
            else
            {
              WebGPU::ComputePassEncoder::makeInvalid((WebGPU::ComputePassEncoder *)a1, &cfstr_Gpucomputepass_0.isa);
            }
            return;
          }
          uint64_t v42 = [v32 newFunctionWithName:@"cs"];
          unint64_t v43 = (void *)WebGPU::ComputePassEncoder::runPredispatchIndirectCallValidation(WebGPU::Buffer const&,unsigned long long)::function;
          WebGPU::ComputePassEncoder::runPredispatchIndirectCallValidation(WebGPU::Buffer const&,unsigned long long)::function = v42;

          uint64_t v22 = (void *)WebGPU::ComputePassEncoder::runPredispatchIndirectCallValidation(WebGPU::Buffer const&,unsigned long long)::function;
        }
        uint64_t v23 = WebGPU::Device::dispatchCallPipelineState(*(void *)(a1 + 24), v22);
        uint64_t v24 = *(void *)(a1 + 24);
        unint64_t v25 = *(void **)(v24 + 8);
        if (v25)
        {
          id v26 = *(void **)(v24 + 312);
          if (!v26)
          {
            uint64_t v27 = [v25 newBufferWithLength:12 options:32];
            uint64_t v28 = *(void **)(v24 + 312);
            *(void *)(v24 + 312) = v27;

            WebGPU::Device::setOwnerWithIdentity(v24, *(void **)(v24 + 312));
            id v26 = *(void **)(v24 + 312);
          }
          id v29 = v26;
        }
        else
        {
          id v29 = 0;
        }
        if (*(unsigned char *)(*(void *)(a1 + 80) + 76)) {
          unint64_t v34 = 0;
        }
        else {
          unint64_t v34 = *(void **)(a1 + 8);
        }
        [v34 setComputePipelineState:v23];
        if (*(unsigned char *)(*(void *)(a1 + 80) + 76)) {
          unint64_t v35 = 0;
        }
        else {
          unint64_t v35 = *(void **)(a1 + 8);
        }
        uint64_t v36 = *(void *)(a2 + 16);
        id v37 = v35;
        [v37 setBuffer:v36 offset:a3 atIndex:0];

        if (*(unsigned char *)(*(void *)(a1 + 80) + 76)) {
          uint64_t v38 = 0;
        }
        else {
          uint64_t v38 = *(void **)(a1 + 8);
        }
        [v38 setBuffer:v29 offset:0 atIndex:1];
        if (*(unsigned char *)(*(void *)(a1 + 80) + 76)) {
          int v39 = 0;
        }
        else {
          int v39 = *(void **)(a1 + 8);
        }
        long long v46 = xmmword_1826CEB70;
        uint64_t v47 = 1;
        long long v44 = xmmword_1826CEB70;
        uint64_t v45 = 1;
        [v39 dispatchThreads:&v46 threadsPerThreadgroup:&v44];
        goto LABEL_56;
      }
    }
  }
  WebGPU::ComputePassEncoder::makeInvalid((WebGPU::ComputePassEncoder *)a1, 0);
}

void sub_1824EBFC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824EBFE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824EBFF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824EC00C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824EC020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824EC034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824EC044(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824EC058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824EC084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824EC094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824EC0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _DWORD *a15)
{
  if (a15)
  {
    if (*a15 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a15 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void wgpuComputePassEncoderEnd(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 120))
  {
    uint64_t v2 = *(void *)(a1 + 24);
    uint64_t v3 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as pass is already ended", "void WebGPU::ComputePassEncoder::endPass()");
    MEMORY[0x18530AF50](&v38, v3);
    uint64_t v4 = *(void *)(v2 + 32);
    uint64_t v5 = 32 * *(unsigned int *)(v2 + 44);
    uint64_t v6 = v4 + v5;
    while (v5)
    {
      int v7 = *(_DWORD *)(v6 - 8);
      v6 -= 32;
      v5 -= 32;
      if (!v7)
      {
        uint64_t v8 = v4 + v5;
        if (!*(unsigned char *)(v8 + 16))
        {
          uint64_t v9 = v38;
          uint64_t v38 = 0;
          *(_DWORD *)uint64_t v8 = 1;
          *(void *)(v8 + 8) = v9;
          *(unsigned char *)(v8 + 16) = 1;
        }
        goto LABEL_20;
      }
    }
    uint64_t v19 = *(void *)(v2 + 24);
    if (v19)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v19 + 16))(v19, 1, &v38);
      uint64_t v20 = *(void *)(v2 + 24);
      *(void *)(v2 + 24) = 0;
      if (v20) {
        (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
      }
    }
LABEL_20:
    id v21 = v38;
    uint64_t v38 = 0;
    if (v21)
    {
      if (*v21 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v21 -= 2;
      }
    }
  }
  else
  {
    *(unsigned char *)(a1 + 120) = 1;
    uint64_t v10 = *(void *)(a1 + 80);
    if (*(unsigned char *)(v10 + 4) == 1)
    {
      uint64_t v11 = *(void **)(a1 + 8);
      if (v11
        && *(void *)(v10 + 16)
        && (IsCurrent = WebGPU::CommandEncoder::encoderIsCurrent(v10, v11), uint64_t v11 = *(void **)(a1 + 8), IsCurrent))
      {
        uint64_t v13 = *(void *)(a1 + 80);
        if (*(void *)(a1 + 16) || !v11)
        {
          BOOL v34 = v11 != 0;
          WebGPU::CommandEncoder::endEncoding(v13, v11);
          unint64_t v35 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;

          uint64_t v36 = *(WebGPU::CommandEncoder **)(a1 + 80);
          [NSString stringWithFormat:@"ComputePassEncoder.endPass failure, m_debugGroupStackSize = %llu, isValid = %d, error = %@", *(void *)(a1 + 16), v34, *(void *)(a1 + 112)];
          id v37 = (NSString *)objc_claimAutoreleasedReturnValue();
          WebGPU::CommandEncoder::makeInvalid(v36, v37);
        }
        else
        {
          WebGPU::CommandEncoder::endEncoding(v13, v11);
          int v14 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;

          uint64_t v15 = *(void *)(a1 + 80);
          if (*(unsigned char *)(v15 + 4) != 2)
          {
            *(unsigned char *)(v15 + 4) = 0;
            uint64_t v16 = *(void **)(v15 + 40);
            *(void *)(v15 + 40) = 0;

            uint64_t v17 = *(void *)(*(void *)(v15 + 80) + 16);
            uint64_t v18 = *(void **)(v15 + 16);
            WebGPU::Queue::setEncoderForBuffer(v17, v18, 0);
          }
        }
      }
      else
      {
        *(void *)(a1 + 8) = 0;
      }
    }
    else
    {
      uint64_t v22 = *(void *)(a1 + 24);
      uint64_t v23 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::ComputePassEncoder::endPass()");
      MEMORY[0x18530AF50](&v38, v23);
      uint64_t v24 = *(void *)(v22 + 32);
      uint64_t v25 = 32 * *(unsigned int *)(v22 + 44);
      uint64_t v26 = v24 + v25;
      while (v25)
      {
        int v27 = *(_DWORD *)(v26 - 8);
        v26 -= 32;
        v25 -= 32;
        if (!v27)
        {
          uint64_t v28 = v24 + v25;
          if (!*(unsigned char *)(v28 + 16))
          {
            id v29 = v38;
            uint64_t v38 = 0;
            *(_DWORD *)uint64_t v28 = 1;
            *(void *)(v28 + 8) = v29;
            *(unsigned char *)(v28 + 16) = 1;
          }
          goto LABEL_37;
        }
      }
      uint64_t v30 = *(void *)(v22 + 24);
      if (v30)
      {
        (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v30 + 16))(v30, 1, &v38);
        uint64_t v31 = *(void *)(v22 + 24);
        *(void *)(v22 + 24) = 0;
        if (v31) {
          (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
        }
      }
LABEL_37:
      uint64_t v32 = v38;
      uint64_t v38 = 0;
      if (v32)
      {
        if (*v32 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v32 -= 2;
        }
      }

      id v33 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = 0;
    }
  }
}

void sub_1824EC4B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
  _Unwind_Resume(a1);
}

void sub_1824EC4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  if (a14)
  {
    if (*a14 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a14 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_1824EC504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824EC514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  if (a14)
  {
    if (*a14 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a14 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_1824EC550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_DWORD *wgpuComputePassEncoderInsertDebugMarker(uint64_t a1, char *__s)
{
  if (__s) {
    strlen(__s);
  }
  WTF::String::fromUTF8();
  uint64_t v3 = *(void *)(a1 + 80);
  if (*(unsigned char *)(v3 + 4) != 1)
  {
    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v8 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::ComputePassEncoder::insertDebugMarker(String &&)");
    MEMORY[0x18530AF50](&v20, v8);
    uint64_t v9 = *(void *)(v7 + 32);
    uint64_t v10 = 32 * *(unsigned int *)(v7 + 44);
    uint64_t v11 = v9 + v10;
    while (v10)
    {
      int v12 = *(_DWORD *)(v11 - 8);
      v11 -= 32;
      v10 -= 32;
      if (!v12)
      {
        uint64_t v13 = v9 + v10;
        if (!*(unsigned char *)(v13 + 16))
        {
          int v14 = v20;
          uint64_t v20 = 0;
          *(_DWORD *)uint64_t v13 = 1;
          *(void *)(v13 + 8) = v14;
          *(unsigned char *)(v13 + 16) = 1;
        }
        goto LABEL_18;
      }
    }
    uint64_t v15 = *(void *)(v7 + 24);
    if (v15)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v15 + 16))(v15, 1, &v20);
      uint64_t v16 = *(void *)(v7 + 24);
      *(void *)(v7 + 24) = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
    }
LABEL_18:
    uint64_t v17 = v20;
    uint64_t v20 = 0;
    if (v17)
    {
      if (*v17 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v17 -= 2;
      }
    }

    uint64_t v5 = (__CFString **)(a1 + 8);
    goto LABEL_23;
  }
  uint64_t v5 = (__CFString **)(a1 + 8);
  uint64_t v4 = *(__CFString **)(a1 + 8);
  if (!v4 || !*(void *)(v3 + 16)) {
    goto LABEL_24;
  }
  if (!WebGPU::CommandEncoder::encoderIsCurrent(v3, *(void **)(a1 + 8)))
  {
LABEL_23:
    uint64_t v4 = *v5;
LABEL_24:
    *uint64_t v5 = 0;
    goto LABEL_25;
  }
  if (*(unsigned __int8 *)(a1 + 4) - 3 > 0xFFFFFFFD) {
    goto LABEL_26;
  }
  uint64_t v6 = *v5;
  if (v19) {
    uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v4 = &stru_1ECABF938;
  }
  [(__CFString *)v6 insertDebugSignpost:v4];
LABEL_25:

LABEL_26:
  uint64_t result = v19;
  if (v19)
  {
    if (*v19 == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *v19 -= 2;
    }
  }
  return result;
}

void sub_1824EC778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  if (a11)
  {
    if (*a11 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *a11 -= 2;
  }
  _Unwind_Resume(a1);
}

void wgpuComputePassEncoderPopDebugGroup(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  if (*(unsigned char *)(v2 + 4) == 1)
  {
    uint64_t v3 = *(void **)(a1 + 8);
    if (v3 && *(void *)(v2 + 16))
    {
      if (WebGPU::CommandEncoder::encoderIsCurrent(v2, v3))
      {
        if (*(unsigned __int8 *)(a1 + 4) - 3 <= 0xFFFFFFFD)
        {
          if (*(unsigned char *)(*(void *)(a1 + 80) + 4) == 1 && (uint64_t v4 = *(void *)(a1 + 16)) != 0)
          {
            *(void *)(a1 + 16) = v4 - 1;
            uint64_t v5 = *(void **)(a1 + 8);
            [v5 popDebugGroup];
          }
          else
          {
            WebGPU::ComputePassEncoder::makeInvalid((WebGPU::ComputePassEncoder *)a1, 0);
          }
        }
        return;
      }
      uint64_t v3 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 24);
    uint64_t v7 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::ComputePassEncoder::popDebugGroup()");
    MEMORY[0x18530AF50](&v18, v7);
    uint64_t v8 = *(void *)(v6 + 32);
    uint64_t v9 = 32 * *(unsigned int *)(v6 + 44);
    uint64_t v10 = v8 + v9;
    while (v9)
    {
      int v11 = *(_DWORD *)(v10 - 8);
      v10 -= 32;
      v9 -= 32;
      if (!v11)
      {
        uint64_t v12 = v8 + v9;
        if (!*(unsigned char *)(v12 + 16))
        {
          uint64_t v13 = v18;
          uint64_t v18 = 0;
          *(_DWORD *)uint64_t v12 = 1;
          *(void *)(v12 + 8) = v13;
          *(unsigned char *)(v12 + 16) = 1;
        }
        goto LABEL_19;
      }
    }
    uint64_t v14 = *(void *)(v6 + 24);
    if (v14)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v14 + 16))(v14, 1, &v18);
      uint64_t v15 = *(void *)(v6 + 24);
      *(void *)(v6 + 24) = 0;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
    }
LABEL_19:
    uint64_t v16 = v18;
    uint64_t v18 = 0;
    if (v16)
    {
      if (*v16 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v16 -= 2;
      }
    }

    uint64_t v17 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
}

void sub_1824ECA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a10 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

_DWORD *wgpuComputePassEncoderPushDebugGroup(uint64_t a1, char *__s)
{
  if (__s) {
    strlen(__s);
  }
  WTF::String::fromUTF8();
  uint64_t v3 = *(void *)(a1 + 80);
  if (*(unsigned char *)(v3 + 4) != 1)
  {
    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v8 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::ComputePassEncoder::pushDebugGroup(String &&)");
    MEMORY[0x18530AF50](&v20, v8);
    uint64_t v9 = *(void *)(v7 + 32);
    uint64_t v10 = 32 * *(unsigned int *)(v7 + 44);
    uint64_t v11 = v9 + v10;
    while (v10)
    {
      int v12 = *(_DWORD *)(v11 - 8);
      v11 -= 32;
      v10 -= 32;
      if (!v12)
      {
        uint64_t v13 = v9 + v10;
        if (!*(unsigned char *)(v13 + 16))
        {
          uint64_t v14 = v20;
          uint64_t v20 = 0;
          *(_DWORD *)uint64_t v13 = 1;
          *(void *)(v13 + 8) = v14;
          *(unsigned char *)(v13 + 16) = 1;
        }
        goto LABEL_18;
      }
    }
    uint64_t v15 = *(void *)(v7 + 24);
    if (v15)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v15 + 16))(v15, 1, &v20);
      uint64_t v16 = *(void *)(v7 + 24);
      *(void *)(v7 + 24) = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
    }
LABEL_18:
    uint64_t v17 = v20;
    uint64_t v20 = 0;
    if (v17)
    {
      if (*v17 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v17 -= 2;
      }
    }

    uint64_t v5 = (__CFString **)(a1 + 8);
    goto LABEL_23;
  }
  uint64_t v5 = (__CFString **)(a1 + 8);
  uint64_t v4 = *(__CFString **)(a1 + 8);
  if (!v4 || !*(void *)(v3 + 16)) {
    goto LABEL_24;
  }
  if (!WebGPU::CommandEncoder::encoderIsCurrent(v3, *(void **)(a1 + 8)))
  {
LABEL_23:
    uint64_t v4 = *v5;
LABEL_24:
    *uint64_t v5 = 0;
    goto LABEL_25;
  }
  if (*(unsigned __int8 *)(a1 + 4) - 3 > 0xFFFFFFFD) {
    goto LABEL_26;
  }
  uint64_t v6 = *(void **)(a1 + 8);
  ++*(void *)(a1 + 16);
  if (v19) {
    uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v4 = &stru_1ECABF938;
  }
  [v6 pushDebugGroup:v4];
LABEL_25:

LABEL_26:
  uint64_t result = v19;
  if (v19)
  {
    if (*v19 == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *v19 -= 2;
    }
  }
  return result;
}

void sub_1824ECC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  if (a11)
  {
    if (*a11 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *a11 -= 2;
  }
  _Unwind_Resume(a1);
}

void wgpuComputePassEncoderSetBindGroup(uint64_t *a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  unsigned int v97 = a2;
  uint64_t v6 = a1[10];
  if (*(unsigned char *)(v6 + 4) != 1)
  {
    uint64_t v15 = a1[3];
    uint64_t v16 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::ComputePassEncoder::setBindGroup(uint32_t, const BindGroup &, uint32_t, const uint32_t *)");
    MEMORY[0x18530AF50](v94, v16);
    uint64_t v17 = *(void *)(v15 + 32);
    uint64_t v18 = 32 * *(unsigned int *)(v15 + 44);
    uint64_t v19 = v17 + v18;
    while (v18)
    {
      int v20 = *(_DWORD *)(v19 - 8);
      v19 -= 32;
      v18 -= 32;
      if (!v20)
      {
        uint64_t v21 = v17 + v18;
        if (!*(unsigned char *)(v21 + 16))
        {
          uint64_t v22 = v94[0];
          v94[0] = 0;
          *(_DWORD *)uint64_t v21 = 1;
          *(void *)(v21 + 8) = v22;
          *(unsigned char *)(v21 + 16) = 1;
        }
LABEL_20:
        uint64_t v25 = (_DWORD *)v94[0];
        v94[0] = 0;
        if (v25)
        {
          if (*v25 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v25 -= 2;
          }
        }

        uint64_t v26 = (void *)a1[1];
        a1[1] = 0;

        return;
      }
    }
    uint64_t v23 = *(void *)(v15 + 24);
    if (v23)
    {
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v23 + 16))(v23, 1, v94);
      uint64_t v24 = *(void *)(v15 + 24);
      *(void *)(v15 + 24) = 0;
      if (v24) {
        (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
      }
    }
    goto LABEL_20;
  }
  uint64_t v8 = (void *)a1[1];
  if (!v8 || !*(void *)(v6 + 16))
  {
LABEL_27:
    a1[1] = 0;

    return;
  }
  if (!WebGPU::CommandEncoder::encoderIsCurrent(v6, v8))
  {
    uint64_t v8 = (void *)a1[1];
    goto LABEL_27;
  }
  uint64_t v12 = *(void *)(a3 + 64);
  if (!v12 || (uint64_t v13 = *(void *)(a3 + 40), !*(void *)(v13 + 8)) || v13 != a1[3])
  {
    uint64_t v14 = @"GPUComputePassEncoder.setBindGroup: invalid bind group";
LABEL_9:
    WebGPU::ComputePassEncoder::makeInvalid((WebGPU::ComputePassEncoder *)a1, &v14->isa);
    return;
  }
  if (*(_DWORD *)(v13 + 104) <= a2)
  {
    uint64_t v14 = @"GPUComputePassEncoder.setBindGroup: groupIndex >= limits.maxBindGroups";
    goto LABEL_9;
  }
  uint64_t v27 = WebGPU::BindGroupLayout::errorValidatingDynamicOffsets(v12, a5, a4, a3);
  if (v27)
  {
    id v92 = (id)v27;
    uint64_t v28 = [NSString stringWithFormat:@"GPUComputePassEncoder.setBindGroup: %@", v27];
    WebGPU::ComputePassEncoder::makeInvalid((WebGPU::ComputePassEncoder *)a1, v28);

    return;
  }
  if (!a4)
  {
    WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::remove(a1 + 11, (int *)&v97);
    goto LABEL_49;
  }
  HIDWORD(v96) = a4;
  if ((unint64_t)a4 >> 30)
  {
    __break(0xC471u);
    JUMPOUT(0x1824ED4E0);
  }
  id v29 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * a4));
  LODWORD(v96) = a4;
  __src = v29;
  unint64_t v30 = (a4 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v30 < 7)
  {
    uint64_t v31 = (int *)a5;
    do
    {
LABEL_46:
      int v40 = *v31++;
      *v29++ = v40;
    }
    while (v31 != (int *)(a5 + 4 * a4));
    goto LABEL_47;
  }
  uint64_t v31 = (int *)a5;
  if ((unint64_t)v29 - a5 < 0x20) {
    goto LABEL_46;
  }
  unint64_t v32 = v30 + 1;
  uint64_t v33 = v32 & 0x7FFFFFFFFFFFFFF8;
  BOOL v34 = &v29[v33];
  uint64_t v31 = (int *)(a5 + v33 * 4);
  unint64_t v35 = (long long *)(a5 + 16);
  uint64_t v36 = v29 + 4;
  uint64_t v37 = v32 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v38 = *v35;
    *(v36 - 1) = *(v35 - 1);
    *uint64_t v36 = v38;
    v35 += 2;
    v36 += 2;
    v37 -= 8;
  }
  while (v37);
  id v29 = v34;
  if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_46;
  }
LABEL_47:
  WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1 + 11, (int *)&v97, (uint64_t *)&__src, (uint64_t)v94);
  id v41 = (WTF *)__src;
  if (__src)
  {
    __src = 0;
    LODWORD(v96) = 0;
    WTF::fastFree(v41, v39);
  }
LABEL_49:
  __src = 0;
  uint64_t v96 = 0;
  unsigned int v42 = *(_DWORD *)(a3 + 60);
  if (v42)
  {
    unint64_t v43 = 0;
    unsigned int v44 = 0;
    uint64_t v45 = *(void *)(a3 + 48);
    uint64_t v46 = v45 + 48 * v42;
    do
    {
      if (!*(void *)(v45 + 40) && *(_DWORD *)(v45 + 12))
      {
        if (*(unsigned char *)(a1[10] + 76)) {
          uint64_t v47 = 0;
        }
        else {
          uint64_t v47 = (void *)a1[1];
        }
        id v48 = v47;
        uint64_t v49 = *(unsigned int *)(v45 + 12);
        if (!v49)
        {
          __break(0xC471u);
          JUMPOUT(0x1824ED4D8);
        }
        int v50 = v48;
        [v48 useResources:*(void *)v45 count:v49 usage:*(void *)(v45 + 32)];
      }
      v94[0] = v45;
      if (v44 == v96)
      {
        unint64_t v51 = (void *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&__src, v44 + 1, (unint64_t)v94);
        unsigned int v44 = HIDWORD(v96);
        unint64_t v43 = __src;
        *((void *)__src + HIDWORD(v96)) = *v51;
      }
      else
      {
        v43[v44] = v45;
      }
      HIDWORD(v96) = ++v44;
      uint64_t v52 = *(unsigned int *)(v45 + 12);
      if (v52)
      {
        uint64_t v53 = 0;
        for (unint64_t i = 0; v52 != i; ++i)
        {
          if (i >= *(unsigned int *)(v45 + 28)) {
            goto LABEL_136;
          }
          uint64_t v55 = *(void *)(v45 + 16) + v53;
          int v56 = *(_DWORD *)(v55 + 16);
          if (v56 == -1) {
            uint64_t v57 = -1;
          }
          else {
            uint64_t v57 = *(unsigned int *)(v55 + 16);
          }
          if (v57 == 2)
          {
            if (v56 != 2) {
              goto LABEL_131;
            }
          }
          else
          {
            int v39 = (void *)a1[10];
            uint64_t v58 = *(WebGPU::TextureView **)(v55 + 8);
            if (v57 == 1)
            {
              if (v56 != 1) {
                goto LABEL_131;
              }
              if (v58) {
                WebGPU::TextureView::setCommandEncoder(v58, (WebGPU::CommandEncoder *)v39);
              }
            }
            else
            {
              if (v56)
              {
LABEL_131:
                std::__throw_bad_variant_access[abi:sn180100]();
                __break(1u);
                goto LABEL_136;
              }
              if (v58) {
                WebGPU::Buffer::setCommandEncoder(v58, (WebGPU::CommandEncoder *)v39);
              }
            }
          }
          v53 += 40;
        }
      }
      v45 += 48;
    }
    while (v45 != v46);
  }
  else
  {
    unsigned int v44 = 0;
  }
  int v60 = a1 + 12;
  uint64_t v59 = a1[12];
  if (v59
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WebGPU::BindableResources const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WebGPU::BindableResources const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WebGPU::BindableResources const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WebGPU::BindableResources const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1 + 12, 8u), (uint64_t v59 = *v60) != 0))
  {
    int v61 = *(_DWORD *)(v59 - 8);
  }
  else
  {
    int v61 = 0;
  }
  int v62 = v97;
  unsigned int v63 = 9 * ((v97 + ~(v97 << 15)) ^ ((v97 + ~(v97 << 15)) >> 10));
  unsigned int v64 = (v63 ^ (v63 >> 6)) + ~((v63 ^ (v63 >> 6)) << 11);
  unsigned int v65 = (v64 ^ HIWORD(v64)) & v61;
  unint64_t v66 = (int *)(v59 + 24 * v65);
  int v67 = *v66;
  if (*v66 == -1) {
    goto LABEL_90;
  }
  unint64_t v68 = 0;
  int v69 = 1;
  do
  {
    if (v67 == v97)
    {
      unsigned int v72 = v66[5];
      if (v72 <= v44)
      {
        unsigned int v82 = v66[4];
        if (v44 > v82)
        {
          if (v82)
          {
            if (v72) {
              v66[5] = 0;
            }
            uint64_t v83 = (WTF *)*((void *)v66 + 1);
            if (v83)
            {
              *((void *)v66 + 1) = 0;
              v66[4] = 0;
              WTF::fastFree(v83, v39);
              unsigned int v82 = v66[4];
            }
          }
          if (v82 < v44)
          {
            if (v44 >> 29)
            {
LABEL_136:
              __break(0xC471u);
              JUMPOUT(0x1824ED4D0);
            }
            int v84 = (void *)*((void *)v66 + 1);
            uint64_t v85 = v66[5];
            BOOL v86 = (void *)WTF::fastMalloc((WTF *)(8 * v44));
            v66[4] = v44;
            *((void *)v66 + 1) = v86;
            memcpy(v86, v84, 8 * v85);
            if (v84)
            {
              if (*((void **)v66 + 1) == v84)
              {
                *((void *)v66 + 1) = 0;
                v66[4] = 0;
              }
              WTF::fastFree((WTF *)v84, v87);
            }
          }
        }
        unsigned int v73 = v66[5];
      }
      else
      {
        v66[5] = v44;
        unsigned int v73 = v44;
      }
      int v88 = (char *)*((void *)v66 + 1);
      uint64_t v89 = (char *)__src;
      if (v73)
      {
        memmove(v88, __src, 8 * v73);
        uint64_t v90 = v66[5];
        int v88 = (char *)*((void *)v66 + 1);
      }
      else
      {
        uint64_t v90 = 0;
      }
      memcpy(&v88[8 * v90], &v89[8 * v90], 8 * v44 - 8 * v90);
      v66[5] = v44;
      goto LABEL_129;
    }
    if (v67 == -2) {
      unint64_t v68 = v66;
    }
    unsigned int v65 = (v65 + v69) & v61;
    unint64_t v66 = (int *)(v59 + 24 * v65);
    int v67 = *v66;
    ++v69;
  }
  while (*v66 != -1);
  if (v68)
  {
    *unint64_t v68 = -1;
    *((void *)v68 + 1) = 0;
    *((void *)v68 + 2) = 0;
    --*(_DWORD *)(*v60 - 16);
    int v62 = v97;
    unint64_t v66 = v68;
  }
LABEL_90:
  *unint64_t v66 = v62;
  uint64_t v70 = HIDWORD(v96);
  if (HIDWORD(v96))
  {
    if (HIDWORD(v96) >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1824ED4E8);
    }
    uint64_t v71 = (void *)WTF::fastMalloc((WTF *)(8 * HIDWORD(v96)));
    memcpy(v71, __src, 8 * v70);
  }
  else
  {
    uint64_t v71 = 0;
  }
  unint64_t v74 = (WTF *)*((void *)v66 + 1);
  if (v74)
  {
    *((void *)v66 + 1) = 0;
    v66[4] = 0;
    WTF::fastFree(v74, v39);
  }
  *((void *)v66 + 1) = v71;
  v66[4] = v70;
  v66[5] = v70;
  uint64_t v75 = *v60;
  if (*v60) {
    int v76 = *(_DWORD *)(v75 - 12) + 1;
  }
  else {
    int v76 = 1;
  }
  *(_DWORD *)(v75 - 12) = v76;
  uint64_t v77 = *v60;
  if (*v60) {
    int v78 = *(_DWORD *)(v77 - 12);
  }
  else {
    int v78 = 0;
  }
  uint64_t v79 = (*(_DWORD *)(v77 - 16) + v78);
  unint64_t v80 = *(unsigned int *)(v77 - 4);
  if (v80 > 0x400)
  {
    if (v80 <= 2 * v79) {
      goto LABEL_109;
    }
  }
  else if (3 * v80 <= 4 * v79)
  {
    if (!v80)
    {
      unsigned int v81 = 8;
      goto LABEL_110;
    }
LABEL_109:
    unsigned int v81 = v80 << (6 * *(_DWORD *)(v77 - 12) >= (2 * v80));
LABEL_110:
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WebGPU::BindableResources const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WebGPU::BindableResources const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WebGPU::BindableResources const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WebGPU::BindableResources const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1 + 12, v81);
  }
LABEL_129:
  uint64_t v93 = (_DWORD *)a3;
  WTF::HashMap<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WebGPU::BindGroup const*>(a1 + 13, (int *)&v97, &v93, (uint64_t)v94);
  if (__src) {
    WTF::fastFree((WTF *)__src, v91);
  }
}

void sub_1824ED4F4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17)
{
  if (v17) {
    WTF::fastFree(v17, a2);
  }
  if (a16) {
    WTF::fastFree(a16, a2);
  }
  _Unwind_Resume(exception_object);
}

void wgpuComputePassEncoderSetPipeline(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 80);
  if (*(unsigned char *)(v3 + 4) == 1)
  {
    uint64_t v5 = *(void **)(a1 + 8);
    if (v5 && *(void *)(v3 + 16))
    {
      if (WebGPU::CommandEncoder::encoderIsCurrent(v3, v5))
      {
        if (!*(void *)(a2 + 16) || (uint64_t v7 = *(void *)(a2 + 24), !*(void *)(v7 + 8)) || v7 != *(void *)(a1 + 24))
        {
          WebGPU::ComputePassEncoder::makeInvalid((WebGPU::ComputePassEncoder *)a1, 0);
          return;
        }
        ++*(_DWORD *)a2;
        int v20 = *(WebGPU::ComputePipeline **)(a1 + 72);
        *(void *)(a1 + 72) = a2;
        uint64_t v21 = a2;
        if (v20)
        {
          if (*(_DWORD *)v20 == 1)
          {
            WebGPU::ComputePipeline::~ComputePipeline(v20, v6);
            WTF::fastFree(v22, v23);
            uint64_t v21 = *(void *)(a1 + 72);
          }
          else
          {
            --*(_DWORD *)v20;
            uint64_t v21 = a2;
          }
        }
        uint64_t v24 = *(_DWORD **)(*(void *)(v21 + 56) + 80);
        if (v24)
        {
          uint64_t v25 = *(v24 - 1);
          uint64_t v26 = &v24[6 * v25];
          if (*(v24 - 3))
          {
            uint64_t v27 = v24;
            if (v25)
            {
              uint64_t v28 = 24 * v25;
              uint64_t v27 = v24;
              while (*v27 >= 0xFFFFFFFE)
              {
                v27 += 6;
                v28 -= 24;
                if (!v28)
                {
                  uint64_t v27 = v26;
                  break;
                }
              }
            }
LABEL_42:
            if (v24) {
              v24 += 6 * *(v24 - 1);
            }
            if (v24 == v27)
            {
              LODWORD(v29) = 0;
            }
            else
            {
              unint64_t v29 = 0;
              do
              {
                unint64_t v30 = v26;
                if (v27 + 6 != v26)
                {
                  unint64_t v30 = v27 + 6;
                  while (*v30 >= 0xFFFFFFFE)
                  {
                    v30 += 6;
                    if (v30 == v26)
                    {
                      unint64_t v30 = v26;
                      break;
                    }
                  }
                }
                v29 += v27[5];
                uint64_t v27 = v30;
              }
              while (v30 != v24);
              unint64_t v31 = *(unsigned int *)(a1 + 68);
              if (v29 > v31)
              {
                unint64_t v32 = *(unsigned int *)(a1 + 64);
                if (v29 > v32)
                {
                  unint64_t v33 = v32 + (v32 >> 2);
                  if (v33 >= 0x10) {
                    unint64_t v34 = v33 + 1;
                  }
                  else {
                    unint64_t v34 = 16;
                  }
                  if (v34 <= v29) {
                    unint64_t v35 = v29;
                  }
                  else {
                    unint64_t v35 = v34;
                  }
                  if (v35 >> 30)
                  {
                    __break(0xC471u);
                    return;
                  }
                  uint64_t v36 = *(void **)(a1 + 56);
                  uint64_t v37 = (void *)WTF::fastMalloc((WTF *)(4 * v35));
                  *(_DWORD *)(a1 + 64) = v35;
                  *(void *)(a1 + 56) = v37;
                  memcpy(v37, v36, 4 * v31);
                  if (v36)
                  {
                    if (*(void **)(a1 + 56) == v36)
                    {
                      *(void *)(a1 + 56) = 0;
                      *(_DWORD *)(a1 + 64) = 0;
                    }
                    WTF::fastFree((WTF *)v36, v38);
                  }
                }
              }
            }
            *(_DWORD *)(a1 + 68) = v29;
            long long v39 = *(_OWORD *)(a2 + 32);
            *(void *)(a1 + 48) = *(void *)(a2 + 48);
            *(_OWORD *)(a1 + 32) = v39;
            return;
          }
          uint64_t v27 = &v24[6 * v25];
        }
        else
        {
          uint64_t v27 = 0;
          LODWORD(v25) = 0;
        }
        uint64_t v26 = &v24[6 * v25];
        goto LABEL_42;
      }
      uint64_t v5 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 24);
    uint64_t v9 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::ComputePassEncoder::setPipeline(const ComputePipeline &)");
    MEMORY[0x18530AF50](&v40, v9);
    uint64_t v10 = *(void *)(v8 + 32);
    uint64_t v11 = 32 * *(unsigned int *)(v8 + 44);
    uint64_t v12 = v10 + v11;
    while (v11)
    {
      int v13 = *(_DWORD *)(v12 - 8);
      v12 -= 32;
      v11 -= 32;
      if (!v13)
      {
        uint64_t v14 = v10 + v11;
        if (!*(unsigned char *)(v14 + 16))
        {
          uint64_t v15 = v40;
          int v40 = 0;
          *(_DWORD *)uint64_t v14 = 1;
          *(void *)(v14 + 8) = v15;
          *(unsigned char *)(v14 + 16) = 1;
        }
        goto LABEL_19;
      }
    }
    uint64_t v16 = *(void *)(v8 + 24);
    if (v16)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v16 + 16))(v16, 1, &v40);
      uint64_t v17 = *(void *)(v8 + 24);
      *(void *)(v8 + 24) = 0;
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
    }
LABEL_19:
    uint64_t v18 = v40;
    int v40 = 0;
    if (v18)
    {
      if (*v18 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v18 -= 2;
      }
    }

    uint64_t v19 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
}

void sub_1824ED994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a10 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

_DWORD *wgpuComputePassEncoderSetLabel(uint64_t a1, char *__s)
{
  if (__s) {
    strlen(__s);
  }
  WTF::String::fromUTF8();
  if (v5) {
    uint64_t v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v3 = &stru_1ECABF938;
  }
  [*(id *)(a1 + 8) setLabel:v3];

  uint64_t result = v5;
  if (v5)
  {
    if (*v5 == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *v5 -= 2;
    }
  }
  return result;
}

void sub_1824EDA88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_OWORD *WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>::inlineSet<unsigned long long const&,WebGPU::EntryUsageData>(_OWORD *result, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,MTLBindingAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,MTLBindingAccess>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(a2, 8u, 0), (uint64_t v8 = *a2) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a3;
  unint64_t v12 = *a3 + ~(*a3 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (void *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16 == -1)
  {
LABEL_12:
    *uint64_t v16 = v11;
    v16[1] = *a4;
    if (*a2)
    {
      ++*(_DWORD *)(*a2 - 12);
      uint64_t v20 = *a2;
      if (*a2) {
        goto LABEL_14;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      uint64_t v20 = *a2;
      if (*a2)
      {
LABEL_14:
        uint64_t v21 = (*(_DWORD *)(v20 - 16) + *(_DWORD *)(v20 - 12));
        unint64_t v22 = *(unsigned int *)(v20 - 4);
        if (v22 <= 0x400) {
          goto LABEL_15;
        }
        goto LABEL_23;
      }
    }
    uint64_t v21 = *(unsigned int *)(v20 - 16);
    unint64_t v22 = *(unsigned int *)(v20 - 4);
    if (v22 <= 0x400)
    {
LABEL_15:
      if (3 * v22 > 4 * v21)
      {
LABEL_26:
        *(void *)uint64_t v7 = v16;
        *((void *)v7 + 1) = v20 + 16 * v22;
        *((unsigned char *)v7 + 16) = 1;
        return result;
      }
      if (!v22)
      {
        uint64_t result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,MTLBindingAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,MTLBindingAccess>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(a2, 8u, v16);
        uint64_t v16 = result;
        uint64_t v20 = *a2;
        if (!*a2)
        {
LABEL_18:
          unint64_t v22 = 0;
          goto LABEL_26;
        }
LABEL_25:
        unint64_t v22 = *(unsigned int *)(v20 - 4);
        goto LABEL_26;
      }
LABEL_24:
      uint64_t result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,MTLBindingAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,MTLBindingAccess>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,MTLBindingAccess,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<MTLBindingAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(a2, v22 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v22)), v16);
      uint64_t v16 = result;
      uint64_t v20 = *a2;
      if (!*a2) {
        goto LABEL_18;
      }
      goto LABEL_25;
    }
LABEL_23:
    if (v22 > 2 * v21) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  uint64_t v18 = 0;
  int v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -2) {
      uint64_t v18 = v16;
    }
    unsigned int v15 = (v15 + v19) & v10;
    uint64_t v16 = (void *)(v8 + 16 * v15);
    uint64_t v17 = *v16;
    ++v19;
    if (*v16 == -1)
    {
      if (v18)
      {
        *uint64_t v18 = xmmword_1826CEB10;
        --*(_DWORD *)(*a2 - 16);
        uint64_t v11 = *a3;
        uint64_t v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if (v9) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = *(unsigned int *)(v8 - 4);
  }
  *(void *)uint64_t v7 = v16;
  *((void *)v7 + 1) = v8 + 16 * v23;
  *((unsigned char *)v7 + 16) = 0;
  v16[1] = *a4;
  return result;
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebGPU::EntryUsageData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebGPU::EntryUsageData>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebGPU::EntryUsageData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::EntryUsageData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::HashTable(uint64_t *a1, void *a2)
{
  *a1 = 0;
  if (!*a2) {
    return a1;
  }
  uint64_t v3 = *(unsigned int *)(*a2 - 12);
  if (!v3) {
    return a1;
  }
  unsigned int v5 = (v3 - 1) | ((v3 - 1) >> 1) | (((v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  unsigned int v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  unint64_t v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  if (3 * v7 <= 4 * v3)
  {
LABEL_7:
    LODWORD(v7) = 2 * v7;
    if (v7 <= 0x400) {
      goto LABEL_8;
    }
LABEL_10:
    if ((double)v7 * 0.416666667 > (double)v3) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_8:
  if ((double)v7 * 0.604166667 <= (double)v3) {
LABEL_11:
  }
    LODWORD(v7) = 2 * v7;
LABEL_12:
  if (v7 <= 8) {
    uint64_t v8 = 8;
  }
  else {
    uint64_t v8 = v7;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * v8 + 16));
  int v10 = (_OWORD *)(v9 + 48);
  uint64_t v11 = v8 & 0xFFFFFFFC;
  do
  {
    *(v10 - 2) = xmmword_1826CEB10;
    *(v10 - 1) = xmmword_1826CEB10;
    *int v10 = xmmword_1826CEB10;
    v10[1] = xmmword_1826CEB10;
    v10 += 4;
    v11 -= 4;
  }
  while (v11);
  uint64_t v12 = v8 - (v8 & 0xFFFFFFFC);
  if (v12)
  {
    unint64_t v13 = (_OWORD *)(((16 * v8) & 0xFFFFFFFC0) + v9 + 16);
    do
    {
      *v13++ = xmmword_1826CEB10;
      --v12;
    }
    while (v12);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  unint64_t v14 = (void *)*a2;
  if (!*a2)
  {
    uint64_t v17 = 0;
    uint64_t v16 = 0;
    goto LABEL_29;
  }
  uint64_t v15 = *((unsigned int *)v14 - 1);
  uint64_t v16 = &v14[2 * v15];
  if (*((_DWORD *)v14 - 3))
  {
    uint64_t v17 = (void *)*a2;
    if (v15)
    {
      uint64_t v18 = 16 * v15;
      uint64_t v17 = (void *)*a2;
      while (*v17 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v17 += 2;
        v18 -= 16;
        if (!v18)
        {
          uint64_t v17 = v16;
          if (v14) {
            goto LABEL_30;
          }
          goto LABEL_31;
        }
      }
    }
LABEL_29:
    if (!v14) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  uint64_t v17 = &v14[2 * v15];
  uint64_t v16 = v17;
  if (v14) {
LABEL_30:
  }
    v14 += 2 * *((unsigned int *)v14 - 1);
LABEL_31:
  while (v17 != v14)
  {
    uint64_t v19 = *a1;
    if (*a1) {
      int v20 = *(_DWORD *)(v19 - 8);
    }
    else {
      int v20 = 0;
    }
    unint64_t v21 = *v17 + ~(*v17 << 32);
    unint64_t v22 = (v21 ^ (v21 >> 22)) + ~((v21 ^ (v21 >> 22)) << 13);
    unint64_t v23 = (9 * (v22 ^ (v22 >> 8))) ^ ((9 * (v22 ^ (v22 >> 8))) >> 15);
    unsigned int v24 = v20 & (((v23 + ~(v23 << 27)) >> 31) ^ (v23 + ~(v23 << 27)));
    int v25 = 1;
    do
    {
      unsigned int v26 = v24;
      uint64_t v27 = *(void *)(v19 + 16 * v24);
      unsigned int v24 = (v24 + v25++) & v20;
    }
    while (v27 != -1);
    uint64_t v28 = (void *)(v19 + 16 * v26);
    uint64_t v29 = v17[1];
    *uint64_t v28 = *v17;
    v28[1] = v29;
    unint64_t v30 = v17 + 2;
    uint64_t v17 = v16;
    if (v30 != v16)
    {
      uint64_t v17 = v30;
      while (*v17 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v17 += 2;
        if (v17 == v16)
        {
          uint64_t v17 = v16;
          break;
        }
      }
    }
  }
  return a1;
}

WTF *WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1, 8u, 0), (uint64_t v8 = *a1) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  int v11 = *a2;
  unsigned int v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  unsigned int v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  unsigned int v14 = (v13 ^ HIWORD(v13)) & v10;
  uint64_t v15 = (WTF *)(v8 + 24 * v14);
  int v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15 != -1)
  {
    uint64_t v17 = 0;
    int v18 = 1;
    while (v16 != v11)
    {
      if (v16 == -2) {
        uint64_t v17 = v15;
      }
      unsigned int v14 = (v14 + v18) & v10;
      uint64_t v15 = (WTF *)(v8 + 24 * v14);
      int v16 = *(_DWORD *)v15;
      ++v18;
      if (*(_DWORD *)v15 == -1)
      {
        if (v17)
        {
          *(_DWORD *)uint64_t v17 = -1;
          *((void *)v17 + 1) = 0;
          *((void *)v17 + 2) = 0;
          --*(_DWORD *)(*a1 - 16);
          int v11 = *a2;
          uint64_t v15 = v17;
        }
        goto LABEL_12;
      }
    }
    if (v9)
    {
      *(void *)a4 = v15;
      *(void *)(a4 + 8) = v8;
      *(unsigned char *)(a4 + 16) = 0;
      uint64_t result = (WTF *)*((void *)v15 + 1);
      if (!result) {
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v25 = v8 + 24 * *(unsigned int *)(v8 - 4);
      *(void *)a4 = v15;
      *(void *)(a4 + 8) = v25;
      *(unsigned char *)(a4 + 16) = 0;
      uint64_t result = (WTF *)*((void *)v15 + 1);
      if (!result)
      {
LABEL_32:
        uint64_t v26 = *a3;
        *a3 = 0;
        *((void *)v15 + 1) = v26;
        LODWORD(v26) = *((_DWORD *)a3 + 2);
        *((_DWORD *)a3 + 2) = 0;
        *((_DWORD *)v15 + 4) = v26;
        LODWORD(v26) = *((_DWORD *)a3 + 3);
        *((_DWORD *)a3 + 3) = 0;
        *((_DWORD *)v15 + 5) = v26;
        return result;
      }
    }
    *((void *)v15 + 1) = 0;
    *((_DWORD *)v15 + 4) = 0;
    uint64_t result = (WTF *)WTF::fastFree(result, a2);
    goto LABEL_32;
  }
LABEL_12:
  *(_DWORD *)uint64_t v15 = v11;
  uint64_t v19 = *a3;
  uint64_t v20 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t result = (WTF *)*((void *)v15 + 1);
  if (result)
  {
    *((void *)v15 + 1) = 0;
    *((_DWORD *)v15 + 4) = 0;
    uint64_t result = (WTF *)WTF::fastFree(result, a2);
  }
  *((void *)v15 + 1) = v19;
  *((void *)v15 + 2) = v20;
  if (*a1)
  {
    ++*(_DWORD *)(*a1 - 12);
    uint64_t v22 = *a1;
    if (*a1) {
      goto LABEL_16;
    }
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    uint64_t v22 = *a1;
    if (*a1)
    {
LABEL_16:
      uint64_t v23 = (*(_DWORD *)(v22 - 16) + *(_DWORD *)(v22 - 12));
      unint64_t v24 = *(unsigned int *)(v22 - 4);
      if (v24 <= 0x400) {
        goto LABEL_17;
      }
LABEL_26:
      if (v24 > 2 * v23) {
        goto LABEL_29;
      }
      goto LABEL_27;
    }
  }
  uint64_t v23 = *(unsigned int *)(v22 - 16);
  unint64_t v24 = *(unsigned int *)(v22 - 4);
  if (v24 > 0x400) {
    goto LABEL_26;
  }
LABEL_17:
  if (3 * v24 <= 4 * v23)
  {
    if (!v24)
    {
      uint64_t result = (WTF *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1, 8u, (int *)v15);
      uint64_t v15 = result;
      uint64_t v22 = *a1;
      if (!*a1)
      {
LABEL_20:
        LODWORD(v24) = 0;
        goto LABEL_29;
      }
LABEL_28:
      LODWORD(v24) = *(_DWORD *)(v22 - 4);
      goto LABEL_29;
    }
LABEL_27:
    uint64_t result = (WTF *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1, v24 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v24)), (int *)v15);
    uint64_t v15 = result;
    uint64_t v22 = *a1;
    if (!*a1) {
      goto LABEL_20;
    }
    goto LABEL_28;
  }
LABEL_29:
  *(void *)a4 = v15;
  *(void *)(a4 + 8) = v22 + 24 * v24;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1824EE228(_Unwind_Exception *exception_object, void *a2)
{
  if (v2) {
    WTF::fastFree(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    uint64_t v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
    uint64_t v9 = v7 + 16;
    if (!a2) {
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
    uint64_t v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
    uint64_t v9 = v7 + 16;
    if (!a2) {
      goto LABEL_7;
    }
  }
  uint64_t v10 = a2;
  int v11 = (void *)(v7 + 24);
  do
  {
    *((_DWORD *)v11 - 2) = -1;
    *int v11 = 0;
    v11[1] = 0;
    v11 += 3;
    --v10;
  }
  while (v10);
LABEL_7:
  *a1 = v9;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = v5;
    do
    {
      uint64_t v15 = (int *)(v4 + 24 * v12);
      int v16 = *v15;
      if (*v15 != -2)
      {
        if (v16 == -1)
        {
          uint64_t v17 = v4 + 24 * v12;
          uint64_t v20 = *(WTF **)(v17 + 8);
          uint64_t v19 = (void *)(v17 + 8);
          int v18 = v20;
          if (v20)
          {
            *uint64_t v19 = 0;
            *(_DWORD *)(v4 + 24 * v12 + 16) = 0;
            WTF::fastFree(v18, v8);
          }
        }
        else
        {
          uint64_t v21 = *a1;
          if (*a1) {
            int v22 = *(_DWORD *)(v21 - 8);
          }
          else {
            int v22 = 0;
          }
          int v23 = 0;
          unsigned int v24 = 9 * ((v16 + ~(v16 << 15)) ^ ((v16 + ~(v16 << 15)) >> 10));
          unsigned int v25 = ((v24 ^ (v24 >> 6)) + ~((v24 ^ (v24 >> 6)) << 11)) ^ (((v24 ^ (v24 >> 6)) + ~((v24 ^ (v24 >> 6)) << 11)) >> 16);
          do
          {
            unsigned int v26 = v25 & v22;
            uint64_t v27 = (_DWORD *)(v21 + 24 * (v25 & v22));
            unsigned int v25 = ++v23 + (v25 & v22);
          }
          while (*v27 != -1);
          uint64_t v28 = v21 + 24 * v26;
          unint64_t v31 = *(WTF **)(v28 + 8);
          unint64_t v30 = (void *)(v28 + 8);
          uint64_t v29 = v31;
          if (v31)
          {
            *unint64_t v30 = 0;
            *(_DWORD *)(v21 + 24 * v26 + 16) = 0;
            WTF::fastFree(v29, v8);
            int v16 = *v15;
          }
          _DWORD *v27 = v16;
          uint64_t v32 = v4 + 24 * v12;
          *unint64_t v30 = 0;
          v30[1] = 0;
          int v34 = *(_DWORD *)(v32 + 16);
          unint64_t v33 = (_DWORD *)(v32 + 16);
          uint64_t v35 = *((void *)v33 - 1);
          *((void *)v33 - 1) = 0;
          *unint64_t v30 = v35;
          *unint64_t v33 = 0;
          uint64_t v36 = v21 + 24 * v26;
          *(_DWORD *)(v36 + 16) = v34;
          int v37 = v33[1];
          v33[1] = 0;
          *(_DWORD *)(v36 + 20) = v37;
          long long v38 = (WTF *)*((void *)v33 - 1);
          if (v38)
          {
            *((void *)v33 - 1) = 0;
            *unint64_t v33 = 0;
            WTF::fastFree(v38, v8);
          }
          if (v15 == a3) {
            uint64_t v13 = v21 + 24 * v26;
          }
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v13;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WebGPU::BindableResources const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WebGPU::BindableResources const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WebGPU::BindableResources const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WebGPU::BindableResources const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    unsigned int v4 = *(_DWORD *)(v3 - 4);
    int v5 = *(_DWORD *)(v3 - 12);
    uint64_t result = WTF::fastMalloc((WTF *)(24 * a2 + 16));
    uint64_t v8 = result + 16;
    if (!a2) {
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v4 = 0;
    int v5 = 0;
    uint64_t result = WTF::fastMalloc((WTF *)(24 * a2 + 16));
    uint64_t v8 = result + 16;
    if (!a2) {
      goto LABEL_7;
    }
  }
  uint64_t v9 = a2;
  uint64_t v10 = (void *)(result + 24);
  do
  {
    *((_DWORD *)v10 - 2) = -1;
    *uint64_t v10 = 0;
    v10[1] = 0;
    v10 += 3;
    --v9;
  }
  while (v9);
LABEL_7:
  *a1 = v8;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v4;
    do
    {
      uint64_t v13 = (int *)(v3 + 24 * v11);
      int v14 = *v13;
      if (*v13 != -2)
      {
        if (v14 == -1)
        {
          uint64_t v15 = v3 + 24 * v11;
          int v18 = *(WTF **)(v15 + 8);
          uint64_t v17 = (void *)(v15 + 8);
          int v16 = v18;
          if (v18)
          {
            *uint64_t v17 = 0;
            *(_DWORD *)(v3 + 24 * v11 + 16) = 0;
            WTF::fastFree(v16, v7);
          }
        }
        else
        {
          uint64_t v19 = *a1;
          if (*a1) {
            int v20 = *(_DWORD *)(v19 - 8);
          }
          else {
            int v20 = 0;
          }
          int v21 = 0;
          unsigned int v22 = 9 * ((v14 + ~(v14 << 15)) ^ ((v14 + ~(v14 << 15)) >> 10));
          unsigned int v23 = ((v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11)) ^ (((v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11)) >> 16);
          do
          {
            unsigned int v24 = v23 & v20;
            unsigned int v25 = (_DWORD *)(v19 + 24 * (v23 & v20));
            unsigned int v23 = ++v21 + (v23 & v20);
          }
          while (*v25 != -1);
          uint64_t v26 = v19 + 24 * v24;
          uint64_t v29 = *(WTF **)(v26 + 8);
          uint64_t v28 = (void *)(v26 + 8);
          uint64_t v27 = v29;
          if (v29)
          {
            *uint64_t v28 = 0;
            *(_DWORD *)(v19 + 24 * v24 + 16) = 0;
            WTF::fastFree(v27, v7);
            int v14 = *v13;
          }
          *unsigned int v25 = v14;
          uint64_t v30 = v3 + 24 * v11;
          *uint64_t v28 = 0;
          v28[1] = 0;
          int v32 = *(_DWORD *)(v30 + 16);
          unint64_t v31 = (_DWORD *)(v30 + 16);
          uint64_t v33 = *((void *)v31 - 1);
          *((void *)v31 - 1) = 0;
          *uint64_t v28 = v33;
          *unint64_t v31 = 0;
          uint64_t v34 = v19 + 24 * v24;
          *(_DWORD *)(v34 + 16) = v32;
          int v35 = v31[1];
          v31[1] = 0;
          *(_DWORD *)(v34 + 20) = v35;
          uint64_t v36 = (WTF *)*((void *)v31 - 1);
          if (v36)
          {
            *((void *)v31 - 1) = 0;
            *unint64_t v31 = 0;
            WTF::fastFree(v36, v7);
          }
        }
      }
      ++v11;
    }
    while (v11 != v12);
  }
  else if (!v3)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v3 - 16), v7);
}

WebGPU::BindGroup *WTF::HashMap<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WebGPU::BindGroup const*>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, _DWORD **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1, 8u, 0), (uint64_t v8 = *a1) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  int v11 = *a2;
  unsigned int v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  unsigned int v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  unsigned int v14 = (v13 ^ HIWORD(v13)) & v10;
  uint64_t v15 = (WebGPU::BindGroup *)(v8 + 16 * v14);
  int v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15 == -1)
  {
LABEL_12:
    *(_DWORD *)uint64_t v15 = v11;
    uint64_t v19 = *a3;
    if (*a3) {
      ++*v19;
    }
    uint64_t result = (WebGPU::BindGroup *)*((void *)v15 + 1);
    *((void *)v15 + 1) = v19;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebGPU::BindGroup::~BindGroup(result, a2);
        uint64_t result = (WebGPU::BindGroup *)WTF::fastFree(v26, v27);
        uint64_t v21 = *a1;
        if (*a1)
        {
LABEL_18:
          ++*(_DWORD *)(v21 - 12);
          uint64_t v22 = *a1;
          if (*a1) {
            goto LABEL_19;
          }
          goto LABEL_28;
        }
LABEL_27:
        *(_DWORD *)(v21 - 12) = 1;
        uint64_t v22 = *a1;
        if (*a1)
        {
LABEL_19:
          uint64_t v23 = (*(_DWORD *)(v22 - 16) + *(_DWORD *)(v22 - 12));
          unint64_t v24 = *(unsigned int *)(v22 - 4);
          if (v24 <= 0x400) {
            goto LABEL_20;
          }
          goto LABEL_29;
        }
LABEL_28:
        uint64_t v23 = *(unsigned int *)(v22 - 16);
        unint64_t v24 = *(unsigned int *)(v22 - 4);
        if (v24 <= 0x400)
        {
LABEL_20:
          if (3 * v24 > 4 * v23)
          {
LABEL_32:
            *(void *)a4 = v15;
            *(void *)(a4 + 8) = v22 + 16 * v24;
            *(unsigned char *)(a4 + 16) = 1;
            return result;
          }
          if (!v24)
          {
            uint64_t result = (WebGPU::BindGroup *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1, 8u, (int *)v15);
            uint64_t v15 = result;
            uint64_t v22 = *a1;
            if (!*a1)
            {
LABEL_23:
              unint64_t v24 = 0;
              goto LABEL_32;
            }
LABEL_31:
            unint64_t v24 = *(unsigned int *)(v22 - 4);
            goto LABEL_32;
          }
LABEL_30:
          uint64_t result = (WebGPU::BindGroup *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1, v24 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v24)), (int *)v15);
          uint64_t v15 = result;
          uint64_t v22 = *a1;
          if (!*a1) {
            goto LABEL_23;
          }
          goto LABEL_31;
        }
LABEL_29:
        if (v24 > 2 * v23) {
          goto LABEL_32;
        }
        goto LABEL_30;
      }
      --*(_DWORD *)result;
    }
    uint64_t v21 = *a1;
    if (*a1) {
      goto LABEL_18;
    }
    goto LABEL_27;
  }
  uint64_t v17 = 0;
  int v18 = 1;
  while (v16 != v11)
  {
    if (v16 == -2) {
      uint64_t v17 = v15;
    }
    unsigned int v14 = (v14 + v18) & v10;
    uint64_t v15 = (WebGPU::BindGroup *)(v8 + 16 * v14);
    int v16 = *(_DWORD *)v15;
    ++v18;
    if (*(_DWORD *)v15 == -1)
    {
      if (v17)
      {
        *(_DWORD *)uint64_t v17 = -1;
        *((void *)v17 + 1) = 0;
        --*(_DWORD *)(*a1 - 16);
        int v11 = *a2;
        uint64_t v15 = v17;
      }
      goto LABEL_12;
    }
  }
  if (v9) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = *(unsigned int *)(v8 - 4);
  }
  *(void *)a4 = v15;
  *(void *)(a4 + 8) = v8 + 16 * v25;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t v28 = *a3;
  if (*a3) {
    ++*v28;
  }
  uint64_t result = (WebGPU::BindGroup *)*((void *)v15 + 1);
  *((void *)v15 + 1) = v28;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebGPU::BindGroup::~BindGroup(result, a2);
      return (WebGPU::BindGroup *)WTF::fastFree(v29, v30);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
    uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    uint64_t v11 = v9 + 16;
    if (!a2) {
      goto LABEL_12;
    }
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
    uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    uint64_t v11 = v9 + 16;
    if (!a2) {
      goto LABEL_12;
    }
  }
  if (a2 == 1)
  {
    uint64_t v12 = 0;
LABEL_10:
    uint64_t v15 = a2 - v12;
    int v16 = (void *)(v9 + 16 * v12 + 24);
    do
    {
      *((_DWORD *)v16 - 2) = -1;
      *int v16 = 0;
      v16 += 2;
      --v15;
    }
    while (v15);
    goto LABEL_12;
  }
  uint64_t v12 = a2 & 0xFFFFFFFE;
  unsigned int v13 = (void *)(v9 + 40);
  uint64_t v14 = v12;
  do
  {
    *((_DWORD *)v13 - 6) = -1;
    *((_DWORD *)v13 - 2) = -1;
    *(v13 - 2) = 0;
    *unsigned int v13 = 0;
    v13 += 4;
    v14 -= 2;
  }
  while (v14);
  if (v12 != a2) {
    goto LABEL_10;
  }
LABEL_12:
  *a1 = v11;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    do
    {
      uint64_t v21 = (int *)(v6 + 16 * v17);
      int v22 = *v21;
      if (*v21 != -2)
      {
        if (v22 == -1)
        {
          uint64_t v23 = v6 + 16 * v17;
          unint64_t v24 = *(WebGPU::BindGroup **)(v23 + 8);
          *(void *)(v23 + 8) = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 1)
            {
              WebGPU::BindGroup::~BindGroup(v24, v10);
              WTF::fastFree(v27, v28);
            }
            else
            {
              --*(_DWORD *)v24;
            }
          }
        }
        else
        {
          uint64_t v25 = *a1;
          if (*a1) {
            int v26 = *(_DWORD *)(v25 - 8);
          }
          else {
            int v26 = 0;
          }
          int v29 = 0;
          unsigned int v30 = 9 * ((v22 + ~(v22 << 15)) ^ ((v22 + ~(v22 << 15)) >> 10));
          unsigned int v31 = ((v30 ^ (v30 >> 6)) + ~((v30 ^ (v30 >> 6)) << 11)) ^ (((v30 ^ (v30 >> 6)) + ~((v30 ^ (v30 >> 6)) << 11)) >> 16);
          do
          {
            uint64_t v32 = v31 & v26;
            unsigned int v31 = ++v29 + v32;
          }
          while (*(_DWORD *)(v25 + 16 * v32) != -1);
          uint64_t v33 = v25 + 16 * v32;
          uint64_t v34 = *(WebGPU::BindGroup **)(v33 + 8);
          *(void *)(v33 + 8) = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 1)
            {
              WebGPU::BindGroup::~BindGroup(v34, v10);
              WTF::fastFree(v35, v36);
            }
            else
            {
              --*(_DWORD *)v34;
            }
          }
          *(_DWORD *)uint64_t v33 = *v21;
          uint64_t v37 = v6 + 16 * v17;
          uint64_t v38 = *(void *)(v37 + 8);
          *(void *)(v37 + 8) = 0;
          *(void *)(v33 + 8) = v38;
          long long v39 = *(WebGPU::BindGroup **)(v37 + 8);
          *(void *)(v37 + 8) = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 1)
            {
              WebGPU::BindGroup::~BindGroup(v39, v10);
              WTF::fastFree(v19, v20);
            }
            else
            {
              --*(_DWORD *)v39;
            }
          }
          if (v21 == a3) {
            uint64_t v18 = v33;
          }
        }
      }
      ++v17;
    }
    while (v17 != v7);
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v18;
}

_DWORD *WebGPU::Device::createComputePipeline@<X0>(WebGPU::Device *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, WebGPU::ComputePipeline **a4@<X8>)
{
  if (*(void *)a2 | *(void *)(a2 + 24)
    || (uint64_t v8 = *(void *)(a2 + 32), *(_DWORD *)(v8 + 40))
    || *(WebGPU::Device **)(v8 + 72) != a1
    || (uint64_t v10 = *(void *)(a2 + 16)) == 0)
  {
    return (_DWORD *)WebGPU::returnInvalidComputePipeline((WebGPU *)a4, a1, a3, 0);
  }
  if (*(void *)(a2 + 8))
  {
    strlen(*(const char **)(a2 + 8));
    WTF::String::fromUTF8();
    uint64_t v11 = *(const char **)(a2 + 40);
    if (v11) {
      goto LABEL_10;
    }
LABEL_13:
    uint64_t v14 = *(const WTF::StringImpl **)(v8 + 136);
    if (v14) {
      *(_DWORD *)v14 += 2;
    }
    uint64_t v76 = 0;
    uint64_t v77 = v14;
    uint64_t v12 = (void *)*((void *)a1 + 1);
    if (v78) {
      goto LABEL_11;
    }
    goto LABEL_16;
  }
  WTF::String::fromUTF8();
  uint64_t v11 = *(const char **)(a2 + 40);
  if (!v11) {
    goto LABEL_13;
  }
LABEL_10:
  strlen(v11);
  WTF::String::fromUTF8();
  uint64_t v76 = 0;
  uint64_t v12 = (void *)*((void *)a1 + 1);
  if (v78)
  {
LABEL_11:
    unsigned int v13 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    goto LABEL_17;
  }
LABEL_16:
  unsigned int v13 = &stru_1ECABF938;
LABEL_17:
  uint64_t v64 = 0;
  WebGPU::createLibrary(v12, v8, (WebGPU::ShaderModule *)v10, &v77, v13, &v65);
  id v15 = 0;

  if (v75 && *(WebGPU::Device **)(v10 + 88) == a1)
  {
    id v17 = v65;
    if (v72 == 2)
    {
      long long v62 = v70;
      uint64_t v63 = v71;
      uint64_t v25 = WTF::String::operator NSString *(&v78);
      int v26 = WebGPU::createFunction(v17, (uint64_t)&v66, v25);

      if (!v26 || objc_msgSend(v26, "functionType", &v64) != 3) {
        goto LABEL_59;
      }
      int v27 = v69;
      if (v69) {
        int v27 = *(_DWORD *)(v69 - 12);
      }
      int v28 = v74;
      if (v74) {
        int v28 = *(_DWORD *)(v74 - 12);
      }
      if (v27 == v28)
      {
        long long v57 = v62;
        uint64_t v58 = v63;
        WebGPU::metalSize<WGSL::Reflection::WorkgroupSize>((uint64_t)&v59, (uint64_t *)&v57, &v74);
        if (v61)
        {
          long long v55 = v59;
          unint64_t v56 = v60;
          if (v73 <= *((unsigned int *)a1 + 52)
            && (void)v55
            && (unint64_t)v55 <= *((unsigned int *)a1 + 54)
            && *((void *)&v55 + 1)
            && *((void *)&v55 + 1) <= (unint64_t)*((unsigned int *)a1 + 55)
            && v56
            && v56 <= *((unsigned int *)a1 + 56)
            && *((void *)&v55 + 1) * (void)v55 * v56 <= *((unsigned int *)a1 + 53))
          {
            if (*(unsigned char *)(v10 + 97) && v68)
            {
              uint64_t v53 = 0;
              uint64_t v54 = 0;
              WebGPU::Device::addPipelineLayouts((uint64_t)a1, (uint64_t)&v53, &v67);
              int v29 = (NSString *)objc_claimAutoreleasedReturnValue();
              if (v29)
              {
                WebGPU::returnInvalidComputePipeline((WebGPU *)a4, a1, a3, v29);
              }
              else
              {
                WebGPU::Device::generatePipelineLayout((atomic_uchar *volatile *)a1, &v53, (WebGPU::PipelineLayout *)&v52);
                uint64_t v38 = v52;
                if (*((unsigned char *)v52 + 96))
                {
                  long long v39 = (void *)*((void *)a1 + 1);
                  int v40 = WTF::String::operator NSString *(&v78);
                  id v41 = WebGPU::createComputePipelineState(v39, v26, (uint64_t)v38, &v55, v40);

                  long long v48 = v55;
                  unint64_t v49 = v56;
                  WebGPU::ComputePipeline::create((uint64_t *)&v50, v41, (uint64_t *)&v52, &v48, &v76, (atomic_uchar *volatile *)a1);
                  unsigned int v42 = v50;
                  int v50 = 0;
                  v51[0] = 0;
                  v51[1] = 0;
                  *a4 = v42;
                  a4[1] = 0;
                  std::pair<WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>>,decltype(nullptr)>::~pair(v51, v43);
                  std::pair<WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>>,decltype(nullptr)>::~pair(&v50, v44);
                }
                else
                {
                  WebGPU::returnInvalidComputePipeline((WebGPU *)a4, a1, a3, 0);
                }
                WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>::~Ref(&v52, v45);
              }
              WTF::Vector<WTF::Vector<WGPUBindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v30);
            }
            else
            {
              unsigned int v31 = (void *)*((void *)a1 + 1);
              uint64_t v32 = WTF::String::operator NSString *(&v78);
              uint64_t v33 = WebGPU::createComputePipelineState(v31, v26, v10, &v55, v32);

              ++*(_DWORD *)v10;
              uint64_t v52 = (atomic_uchar *volatile **)v10;
              long long v46 = v55;
              unint64_t v47 = v56;
              WebGPU::ComputePipeline::create((uint64_t *)v51, v33, (uint64_t *)&v52, &v46, &v76, (atomic_uchar *volatile *)a1);
              uint64_t v34 = v51[0];
              v51[0] = 0;
              uint64_t v53 = 0;
              uint64_t v54 = 0;
              *a4 = v34;
              a4[1] = 0;
              std::pair<WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>>,decltype(nullptr)>::~pair((WebGPU::ComputePipeline **)&v53, v35);
              std::pair<WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>>,decltype(nullptr)>::~pair(v51, v36);
              WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>::~Ref(&v52, v37);
            }
          }
          else
          {
            WebGPU::returnInvalidComputePipeline((WebGPU *)a4, a1, a3, 0);
          }
        }
        else
        {
          WebGPU::returnInvalidComputePipeline((WebGPU *)a4, a1, a3, &cfstr_FailedToEvalua.isa);
        }
      }
      else
      {
LABEL_59:
        WebGPU::returnInvalidComputePipeline((WebGPU *)a4, a1, a3, 0);
      }
    }
    else
    {
      WebGPU::returnInvalidComputePipeline((WebGPU *)a4, a1, a3, 0);
    }
  }
  else
  {
    uint64_t v16 = objc_msgSend(v15, "localizedDescription", &v64);
    id v17 = (id)v16;
    if (v16) {
      uint64_t v18 = (__CFString *)v16;
    }
    else {
      uint64_t v18 = @"Compute library failed creation";
    }
    WebGPU::returnInvalidComputePipeline((WebGPU *)a4, a1, a3, &v18->isa);
  }

  std::__optional_destruct_base<WebGPU::LibraryCreationResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v65, v19);
  uint64_t v21 = v76;
  if (v76)
  {
    uint64_t v22 = *(unsigned int *)(v76 - 4);
    if (v22)
    {
      uint64_t v23 = (void *)(v76 + 8);
      do
      {
        if (*((_DWORD *)v23 - 2) != -2 && *v23) {
          WTF::fastFree((WTF *)(*v23 - 16), v20);
        }
        v23 += 2;
        --v22;
      }
      while (v22);
    }
    WTF::fastFree((WTF *)(v21 - 16), v20);
  }

  unint64_t v24 = v77;
  uint64_t v77 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  uint64_t result = v78;
  int v78 = 0;
  if (result)
  {
    if (*result == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *result -= 2;
    }
  }
  return result;
}

void sub_1824EF1A4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va1, a15);
  va_start(va, a15);
  uint64_t v25 = va_arg(va1, atomic_uchar *volatile **);
  WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>::~Ref((atomic_uchar *volatile ***)va, a2);
  WTF::Vector<WTF::Vector<WGPUBindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v20);

  std::__optional_destruct_base<WebGPU::LibraryCreationResult,false>::~__optional_destruct_base[abi:sn180100](v18 - 216, v21);
  WTF::HashMap<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap((uint64_t *)(v18 - 104), v22);
  uint64_t v23 = *(_DWORD **)(v18 - 96);
  *(void *)(v18 - 96) = 0;
  if (v23)
  {
    if (*v23 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v23 -= 2;
    }
  }
  unint64_t v24 = *(_DWORD **)(v18 - 88);
  *(void *)(v18 - 88) = 0;
  if (v24)
  {
    if (*v24 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *v24 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebGPU::returnInvalidComputePipeline(WebGPU *this, WebGPU::Device *a2, char a3, NSString *a4)
{
  int v7 = a4;
  uint64_t v8 = v7;
  if ((a3 & 1) == 0)
  {
    if (v7) {
      uint64_t v9 = (__CFString *)v7;
    }
    else {
      uint64_t v9 = @"createComputePipeline failed";
    }
    MEMORY[0x18530AF50](&v26, v9);
    uint64_t v10 = *((void *)a2 + 4);
    uint64_t v11 = 32 * *((unsigned int *)a2 + 11);
    uint64_t v12 = v10 + v11;
    while (v11)
    {
      int v13 = *(_DWORD *)(v12 - 8);
      v12 -= 32;
      v11 -= 32;
      if (!v13)
      {
        uint64_t v14 = v10 + v11;
        if (!*(unsigned char *)(v14 + 16))
        {
          id v15 = v26;
          int v26 = 0;
          *(_DWORD *)uint64_t v14 = 1;
          *(void *)(v14 + 8) = v15;
          *(unsigned char *)(v14 + 16) = 1;
        }
        goto LABEL_13;
      }
    }
    uint64_t v16 = *((void *)a2 + 3);
    if (v16)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v16 + 16))(v16, 1, &v26);
      uint64_t v17 = *((void *)a2 + 3);
      *((void *)a2 + 3) = 0;
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
    }
LABEL_13:
    uint64_t v18 = v26;
    int v26 = 0;
    if (v18)
    {
      if (*v18 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v18 -= 2;
      }
    }
  }
  uint64_t v19 = WTF::fastMalloc((WTF *)0x48);
  char v20 = 0;
  int v21 = 1;
  *(_DWORD *)uint64_t v19 = 1;
  *(void *)(v19 + 8) = 0;
  *(void *)(v19 + 16) = 0;
  uint64_t v22 = *(void *)a2;
  atomic_compare_exchange_strong_explicit(*(atomic_uchar *volatile *)a2, (unsigned __int8 *)&v20, 1u, memory_order_acquire, memory_order_acquire);
  if (v20) {
    MEMORY[0x18530AEA0](v22);
  }
  ++*(void *)(v22 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v22, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
  if (v21 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v22);
  }
  *(void *)(v19 + 24) = a2;
  *(void *)(v19 + 32) = 0;
  *(void *)(v19 + 40) = 0;
  *(void *)(v19 + 48) = 0;
  uint64_t v23 = (WebGPU::PipelineLayout *)WTF::fastMalloc((WTF *)0x68);
  WebGPU::PipelineLayout::PipelineLayout(v23, (atomic_uchar *volatile *)a2);
  *(void *)(v19 + 56) = v23;
  *(void *)(v19 + 64) = 0;
  uint64_t v24 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v24 + 16) = -1;
  uint64_t result = v24 + 16;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = -1;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = -1;
  *(void *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = -1;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = -1;
  *(void *)(result + 72) = 0;
  *(_DWORD *)(result + 80) = -1;
  *(void *)(result + 88) = 0;
  *(_DWORD *)(result + 96) = -1;
  *(void *)(result + 104) = 0;
  *(_DWORD *)(result + 112) = -1;
  *(void *)(result + 120) = 0;
  *(void *)(v19 + 64) = result;
  *(_DWORD *)(result - 4) = 8;
  *(_DWORD *)(*(void *)(v19 + 64) - 8) = 7;
  *(_DWORD *)(*(void *)(v19 + 64) - 16) = 0;
  *(_DWORD *)(*(void *)(v19 + 64) - 12) = 0;
  *(void *)this = v19;
  *((void *)this + 1) = v8;
  return result;
}

void sub_1824EF528(_Unwind_Exception *a1)
{
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v3, v5);
  WTF::fastFree((WTF *)v2, v6);

  _Unwind_Resume(a1);
}

uint64_t WebGPU::metalSize<WGSL::Reflection::WorkgroupSize>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  WGSL::evaluate(*a2, a3, (uint64_t)v21);
  uint64_t v6 = a2[1];
  if (v6)
  {
    WGSL::evaluate(v6, a3, (uint64_t)v18);
    uint64_t result = a2[2];
    if (result) {
      goto LABEL_3;
    }
LABEL_6:
    int v8 = 1;
    v15[0] = 1;
    int v16 = 3;
    unsigned __int8 v17 = 1;
    int v9 = v20;
    if (!v23) {
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  v18[0] = 1;
  int v19 = 3;
  unsigned __int8 v20 = 1;
  uint64_t result = a2[2];
  if (!result) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t result = WGSL::evaluate(result, a3, (uint64_t)v15);
  int v8 = v17;
  int v9 = v20;
  if (!v23) {
    goto LABEL_14;
  }
LABEL_7:
  if (v9 && v8)
  {
    switch(v22)
    {
      case 5:
        uint64_t v10 = *(void *)v21;
        int v11 = v19;
        if (v19 == 5) {
          goto LABEL_23;
        }
        break;
      case 4:
        uint64_t v10 = v21[0];
        int v11 = v19;
        if (v19 == 5) {
          goto LABEL_23;
        }
        break;
      case 3:
        uint64_t v10 = (int)v21[0];
        int v11 = v19;
        if (v19 == 5)
        {
LABEL_23:
          uint64_t v13 = *(void *)v18;
          int v12 = v16;
          if (v16 != 5) {
            goto LABEL_24;
          }
LABEL_28:
          uint64_t v14 = *(void *)v15;
          goto LABEL_30;
        }
        break;
      default:
        goto LABEL_41;
    }
    if (v11 == 4)
    {
      uint64_t v13 = v18[0];
      int v12 = v16;
      if (v16 == 5) {
        goto LABEL_28;
      }
    }
    else
    {
      if (v11 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1824EF874);
      }
      uint64_t v13 = (int)v18[0];
      int v12 = v16;
      if (v16 == 5) {
        goto LABEL_28;
      }
    }
LABEL_24:
    if (v12 == 4)
    {
      uint64_t v14 = v15[0];
      goto LABEL_30;
    }
    if (v12 == 3)
    {
      uint64_t v14 = (int)v15[0];
LABEL_30:
      *(void *)a1 = v10;
      *(void *)(a1 + 8) = v13;
      *(void *)(a1 + 16) = v14;
      *(unsigned char *)(a1 + 24) = 1;
LABEL_31:
      uint64_t result = ((uint64_t (*)(char *, unsigned int *))off_1ECABAB98[v12])(&v24, v15);
      int v9 = v20;
      goto LABEL_32;
    }
LABEL_41:
    __break(0xC471u);
    JUMPOUT(0x1824EF854);
  }
LABEL_14:
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (v8)
  {
    int v12 = v16;
    if (v16 != -1) {
      goto LABEL_31;
    }
  }
LABEL_32:
  if (v9 && v19 != -1) {
    uint64_t result = ((uint64_t (*)(unsigned int *, unsigned int *))off_1ECABAB98[v19])(v15, v18);
  }
  if (v23)
  {
    if (v22 != -1) {
      return ((uint64_t (*)(unsigned int *, unsigned int *))off_1ECABAB98[v22])(v18, v21);
    }
  }
  return result;
}

void sub_1824EF898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, int a16, int a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,int a24,int a25,char a26)
{
  if (a18 && a16 != -1) {
    ((void (*)(char *, char *))off_1ECABAB98[a16])(&a10, &a14);
  }
  if (a26)
  {
    if (a24 != -1) {
      ((void (*)(char *, __int16 *))off_1ECABAB98[a24])(&a14, &a20);
    }
  }
  _Unwind_Resume(exception_object);
}

id WebGPU::createComputePipelineState(void *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a5;
  int v12 = objc_opt_new();
  [v12 setComputeFunction:v10];
  [v12 setMaxTotalThreadsPerThreadgroup:a4[1] * *a4 * a4[2]];
  if (*(unsigned char *)(a3 + 32) && *(_DWORD *)(a3 + 28))
  {
    unint64_t v13 = 1;
    do
    {
      uint64_t v14 = [v12 buffers];
      id v15 = [v14 objectAtIndexedSubscript:v13 - 1];
      [v15 setMutability:2];

      if (!*(unsigned char *)(a3 + 32)) {
        break;
      }
    }
    while (v13++ < *(unsigned int *)(a3 + 28));
  }
  [v12 setSupportIndirectCommandBuffers:1];
  [v12 setLabel:v11];
  id v20 = 0;
  unsigned __int8 v17 = (void *)[v9 newComputePipelineStateWithDescriptor:v12 options:0 reflection:0 error:&v20];
  id v18 = v20;
  if (v18) {
    WTFLogAlways();
  }

  return v17;
}

void sub_1824EFA78(_Unwind_Exception *a1)
{
  int v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1824EFAA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebGPU::ComputePipeline::create(uint64_t *a1, void *a2, uint64_t *a3, long long *a4, uint64_t *a5, atomic_uchar *volatile *a6)
{
  id v11 = a2;
  uint64_t v12 = WTF::fastMalloc((WTF *)0x48);
  long long v21 = *a4;
  uint64_t v22 = *((void *)a4 + 2);
  id v13 = v11;
  int v14 = 1;
  *(_DWORD *)uint64_t v12 = 1;
  *(void *)(v12 + 8) = 0;
  id v15 = v13;
  char v16 = 0;
  id v20 = v15;
  *(void *)(v12 + 16) = v15;
  atomic_uchar *volatile v17 = *a6;
  atomic_compare_exchange_strong_explicit(*a6, (unsigned __int8 *)&v16, 1u, memory_order_acquire, memory_order_acquire);
  if (v16) {
    MEMORY[0x18530AEA0](v17);
  }
  ++*((void *)v17 + 1);
  atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
  if (v14 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v17);
  }
  *(void *)(v12 + 24) = a6;
  *(_OWORD *)(v12 + 32) = v21;
  *(void *)(v12 + 48) = v22;
  uint64_t v18 = *a3;
  *a3 = 0;
  *(void *)(v12 + 56) = v18;
  *(void *)(v12 + 64) = 0;
  uint64_t v19 = *a5;
  *a5 = 0;
  *(void *)(v12 + 64) = v19;

  *a1 = v12;
}

void sub_1824EFC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v12, v14);
  WTF::fastFree((WTF *)v10, v15);

  _Unwind_Resume(a1);
}

void sub_1824EFC64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WebGPU::ComputePipeline **std::pair<WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>>,decltype(nullptr)>::~pair(WebGPU::ComputePipeline **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  if (!v3) {
    return a1;
  }
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    return a1;
  }
  WebGPU::ComputePipeline::~ComputePipeline(v3, a2);
  WTF::fastFree(v5, v6);
  return a1;
}

atomic_uchar *volatile ***WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>::~Ref(atomic_uchar *volatile ***a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  if (!v3) {
    return a1;
  }
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    return a1;
  }
  WebGPU::PipelineLayout::~PipelineLayout(v3, a2);
  WTF::fastFree(v5, v6);
  return a1;
}

uint64_t WTF::Vector<WTF::Vector<WGPUBindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  unsigned int v4 = *(WTF **)a1;
  if (v3)
  {
    uint64_t v5 = 16 * v3;
    do
    {
      uint64_t v6 = *(WTF **)v4;
      if (*(void *)v4)
      {
        *(void *)unsigned int v4 = 0;
        *((_DWORD *)v4 + 2) = 0;
        WTF::fastFree(v6, a2);
      }
      unsigned int v4 = (WTF *)((char *)v4 + 16);
      v5 -= 16;
    }
    while (v5);
    unsigned int v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t *WTF::HashMap<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = (void *)(v3 + 8);
      do
      {
        if (*((_DWORD *)v5 - 2) != -2 && *v5) {
          WTF::fastFree((WTF *)(*v5 - 16), a2);
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

WebGPU::ComputePipeline *WebGPU::Device::createComputePipelineAsync(WebGPU::Device *a1, uint64_t a2, WebGPU::ComputePipeline **a3)
{
  WebGPU::Device::createComputePipeline(a1, a2, 1, &v53);
  uint64_t v5 = *((void *)a1 + 56);
  if (!v5) {
    goto LABEL_37;
  }
  char v6 = 0;
  uint64_t v7 = *((void *)a1 + 57);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    MEMORY[0x18530AEA0](v5);
  }
  if (*(void *)(v5 + 24))
  {
    ++*(void *)(v5 + 8);
    int v8 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 == 1) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v7 = 0;
    int v36 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v36, 0, memory_order_release, memory_order_relaxed);
    if (v36 == 1)
    {
LABEL_6:
      if (v7) {
        goto LABEL_7;
      }
      goto LABEL_37;
    }
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (v7)
  {
LABEL_7:
    char v9 = 0;
    id v10 = v53;
    uint64_t v53 = 0;
    id v11 = *a3;
    *a3 = 0;
    v50[0] = v10;
    v50[1] = v11;
    atomic_uchar *volatile v12 = *(atomic_uchar *volatile *)a1;
    int v13 = 1;
    atomic_compare_exchange_strong_explicit(*(atomic_uchar *volatile *)a1, (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
    if (v9) {
      MEMORY[0x18530AEA0](v12);
    }
    ++*((void *)v12 + 1);
    atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v12);
    }
    id v14 = v54;
    id v54 = 0;
    *(void *)&long long v51 = a1;
    *((void *)&v51 + 1) = v14;
    uint64_t v15 = WTF::fastMalloc((WTF *)0x28);
    *(void *)uint64_t v15 = &unk_1ECABAC00;
    *(WebGPU::ComputePipeline **)(v15 + 8) = v50[0];
    *(WebGPU::ComputePipeline **)(v15 + 16) = v50[1];
    long long v16 = v51;
    *(_OWORD *)int v50 = 0u;
    long long v51 = 0u;
    *(_OWORD *)(v15 + 24) = v16;
    uint64_t v52 = v15;
    WebGPU::Instance::scheduleWork(v7, &v52);
    uint64_t v17 = v52;
    uint64_t v52 = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }

    uint64_t v19 = (atomic_uchar *volatile *)v51;
    *(void *)&long long v51 = 0;
    if (!v19)
    {
LABEL_22:
      int v28 = v50[1];
      v50[1] = 0;
      if (v28) {
        (*(void (**)(WebGPU::ComputePipeline *))(*(void *)v28 + 8))(v28);
      }
      if (v50[0])
      {
        if (*(_DWORD *)v50[0] == 1)
        {
          WebGPU::ComputePipeline::~ComputePipeline(v50[0], v18);
          WTF::fastFree(v43, v44);
          char v45 = 0;
          uint64_t v30 = *(void *)(v7 + 8);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v30, (unsigned __int8 *)&v45, 1u, memory_order_acquire, memory_order_acquire);
          if (!v45)
          {
LABEL_28:
            uint64_t v31 = *(void *)(v30 + 8);
            int v32 = 1;
            uint64_t v33 = v31 - 1;
            *(void *)(v30 + 8) = v31 - 1;
            if (v31 != 1) {
              goto LABEL_29;
            }
            goto LABEL_48;
          }
LABEL_47:
          MEMORY[0x18530AEA0](v30);
          uint64_t v46 = *(void *)(v30 + 8);
          int v32 = 1;
          uint64_t v33 = v46 - 1;
          *(void *)(v30 + 8) = v46 - 1;
          if (v46 != 1)
          {
LABEL_29:
            uint64_t v34 = 0;
            BOOL v35 = 1;
            atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v30, (unsigned __int8 *)&v32, 0, memory_order_release, memory_order_relaxed);
            if (v32 == 1) {
              goto LABEL_30;
            }
            goto LABEL_49;
          }
LABEL_48:
          uint64_t v47 = *(void *)(v30 + 16);
          uint64_t v34 = *(void *)(v30 + 24);
          *(void *)(v30 + 24) = 0;
          BOOL v35 = v47 != 0;
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v30, (unsigned __int8 *)&v32, 0, memory_order_release, memory_order_relaxed);
          if (v32 == 1)
          {
LABEL_30:
            if (v33) {
              goto LABEL_41;
            }
LABEL_31:
            if (v34) {
              (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
            }
            if (!v35) {
              WTF::fastFree((WTF *)v30, v18);
            }
            goto LABEL_41;
          }
LABEL_49:
          WTF::Lock::unlockSlow((WTF::Lock *)v30);
          if (v33) {
            goto LABEL_41;
          }
          goto LABEL_31;
        }
        --*(_DWORD *)v50[0];
      }
      char v29 = 0;
      uint64_t v30 = *(void *)(v7 + 8);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v30, (unsigned __int8 *)&v29, 1u, memory_order_acquire, memory_order_acquire);
      if (!v29) {
        goto LABEL_28;
      }
      goto LABEL_47;
    }
    char v20 = 0;
    atomic_uchar *volatile v21 = *v19;
    atomic_compare_exchange_strong_explicit(*v19, (unsigned __int8 *)&v20, 1u, memory_order_acquire, memory_order_acquire);
    if (v20)
    {
      MEMORY[0x18530AEA0](v21);
      int v22 = 1;
      uint64_t v23 = *((void *)v21 + 1) - 1;
      *((void *)v21 + 1) = v23;
      if (v23)
      {
LABEL_16:
        char v24 = 0;
        BOOL v25 = 1;
        atomic_compare_exchange_strong_explicit(v21, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
        if (v22 == 1) {
          goto LABEL_17;
        }
        goto LABEL_53;
      }
    }
    else
    {
      int v22 = 1;
      uint64_t v23 = *((void *)v21 + 1) - 1;
      *((void *)v21 + 1) = v23;
      if (v23) {
        goto LABEL_16;
      }
    }
    uint64_t v48 = *((void *)v21 + 2);
    char v24 = (WebGPU::Device *)*((void *)v21 + 3);
    *((void *)v21 + 3) = 0;
    BOOL v25 = v48 != 0;
    atomic_compare_exchange_strong_explicit(v21, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
    if (v22 == 1)
    {
LABEL_17:
      if (v23) {
        goto LABEL_22;
      }
LABEL_18:
      if (v24)
      {
        WebGPU::Device::~Device(v24, v18);
        WTF::fastFree(v26, v27);
      }
      if (!v25) {
        WTF::fastFree((WTF *)v21, v18);
      }
      goto LABEL_22;
    }
LABEL_53:
    uint64_t v49 = v23;
    WTF::Lock::unlockSlow((WTF::Lock *)v21);
    if (v49) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }
LABEL_37:
  MEMORY[0x18530AF50](v50, v54);
  uint64_t v37 = *a3;
  *a3 = 0;
  (*(void (**)(WebGPU::ComputePipeline *, uint64_t, WebGPU::ComputePipeline **, WebGPU::ComputePipeline **))(*(void *)v37 + 16))(v37, 1, &v53, v50);
  (*(void (**)(WebGPU::ComputePipeline *))(*(void *)v37 + 8))(v37);
  uint64_t v38 = v50[0];
  v50[0] = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *(_DWORD *)v38 -= 2;
    }
  }
LABEL_41:

  uint64_t result = v53;
  uint64_t v53 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebGPU::ComputePipeline::~ComputePipeline(result, v39);
      return (WebGPU::ComputePipeline *)WTF::fastFree(v41, v42);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

void sub_1824F028C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WebGPU::ComputePipeline *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v17 = a10;
  a10 = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  std::pair<WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>>,decltype(nullptr)>::~pair(&a9, a2);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Instance,(WTF::DestructionThread)0>::deref((atomic_uchar *volatile *)(v15 + 8), v18);
  std::pair<WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>>,NSString * {__strong}>::~pair((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1824F0328(_Unwind_Exception *a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  if (a2)
  {
    if (*a2 == 2)
    {
      WTF::StringImpl::destroy();
      std::pair<WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>>,NSString * {__strong}>::~pair((uint64_t)va);
      _Unwind_Resume(a1);
    }
    *a2 -= 2;
    std::pair<WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>>,NSString * {__strong}>::~pair((uint64_t)va);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1824F0398);
}

uint64_t WebGPU::Device::createComputePipelineAsync(WGPUComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WGPUCreatePipelineAsyncStatus,WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0::~$_0(uint64_t a1)
{
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)(a1 + 16), v2);
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(WebGPU::ComputePipeline **)a1;
  *(void *)a1 = 0;
  if (!v5) {
    return a1;
  }
  if (*(_DWORD *)v5 != 1)
  {
    --*(_DWORD *)v5;
    return a1;
  }
  WebGPU::ComputePipeline::~ComputePipeline(v5, v3);
  WTF::fastFree(v7, v8);
  return a1;
}

uint64_t std::pair<WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>>,NSString * {__strong}>::~pair(uint64_t a1)
{
  uint64_t v3 = *(WebGPU::ComputePipeline **)a1;
  *(void *)a1 = 0;
  if (!v3) {
    return a1;
  }
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    return a1;
  }
  WebGPU::ComputePipeline::~ComputePipeline(v3, v2);
  WTF::fastFree(v5, v6);
  return a1;
}

void WebGPU::ComputePipeline::~ComputePipeline(WebGPU::ComputePipeline *this, void *a2)
{
  uint64_t v3 = *((void *)this + 8);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = (void *)(v3 + 8);
      do
      {
        if (*((_DWORD *)v5 - 2) != -2 && *v5) {
          WTF::fastFree((WTF *)(*v5 - 16), a2);
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  char v6 = (atomic_uchar *volatile **)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (!v6)
  {
LABEL_12:
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)this + 3, a2);

    uint64_t v8 = *((void *)this + 1);
    if (v8) {
      goto LABEL_13;
    }
LABEL_17:
    *((void *)this + 1) = 0;
    return;
  }
  if (*(_DWORD *)v6 != 1)
  {
    --*(_DWORD *)v6;
    goto LABEL_12;
  }
  WebGPU::PipelineLayout::~PipelineLayout(v6, a2);
  WTF::fastFree(v10, v11);
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)this + 3, v12);

  uint64_t v8 = *((void *)this + 1);
  if (!v8) {
    goto LABEL_17;
  }
LABEL_13:
  *(void *)(v8 + 8) = 0;
  char v9 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v9)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v7);
    }
  }
}

_DWORD *wgpuComputePipelineReference(_DWORD *result)
{
  return result;
}

WebGPU::ComputePipeline *wgpuComputePipelineRelease(WebGPU::ComputePipeline *result, void *a2)
{
  if (*(_DWORD *)result == 1)
  {
    WebGPU::ComputePipeline::~ComputePipeline(result, a2);
    return (WebGPU::ComputePipeline *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_DWORD *wgpuComputePipelineGetBindGroupLayout(void *a1, unsigned int a2)
{
  if (a1[2])
  {
    uint64_t v3 = a1[7];
    if (*(unsigned char *)(v3 + 32) && *(_DWORD *)(v3 + 28) > a2)
    {
      uint64_t result = (_DWORD *)WebGPU::PipelineLayout::bindGroupLayout((WebGPU::PipelineLayout *)v3, a2);
      ++*result;
      return result;
    }
    uint64_t v5 = a1[3];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v7 = *(void *)(v5 + 32);
    uint64_t v8 = 32 * *(unsigned int *)(v5 + 44);
    uint64_t v9 = v7 + v8;
    while (v8)
    {
      int v10 = *(_DWORD *)(v9 - 8);
      v9 -= 32;
      v8 -= 32;
      if (!v10)
      {
        uint64_t v11 = v7 + v8;
        if (!*(unsigned char *)(v11 + 16))
        {
          atomic_uchar *volatile v12 = v45;
          char v45 = 0;
          *(_DWORD *)uint64_t v11 = 1;
          *(void *)(v11 + 8) = v12;
          *(unsigned char *)(v11 + 16) = 1;
        }
        goto LABEL_18;
      }
    }
    uint64_t v21 = *(void *)(v5 + 24);
    if (v21)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v21 + 16))(v21, 1, &v45);
      uint64_t v22 = *(void *)(v5 + 24);
      *(void *)(v5 + 24) = 0;
      if (v22) {
        (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
      }
    }
LABEL_18:
    uint64_t v23 = v45;
    char v45 = 0;
    if (v23)
    {
      if (*v23 == 2)
      {
        WTF::StringImpl::destroy();
        uint64_t v24 = a1[7];
        *(unsigned char *)(v24 + 96) = 0;
        if (!*(unsigned char *)(v24 + 32)) {
          goto LABEL_56;
        }
        goto LABEL_32;
      }
      *v23 -= 2;
    }
    uint64_t v24 = a1[7];
    *(unsigned char *)(v24 + 96) = 0;
    if (!*(unsigned char *)(v24 + 32)) {
      goto LABEL_56;
    }
LABEL_32:
    if (*(_DWORD *)(v24 + 24))
    {
      uint64_t v29 = *(unsigned int *)(v24 + 28);
      if (v29)
      {
        uint64_t v30 = *(WebGPU::BindGroupLayout ***)(v24 + 16);
        uint64_t v31 = 8 * v29;
        do
        {
          int v32 = *v30;
          *uint64_t v30 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 1)
            {
              WebGPU::BindGroupLayout::~BindGroupLayout(v32, v6);
              WTF::fastFree(v33, v34);
            }
            else
            {
              --*(_DWORD *)v32;
            }
          }
          ++v30;
          v31 -= 8;
        }
        while (v31);
        *(_DWORD *)(v24 + 28) = 0;
      }
      id v41 = *(WTF **)(v24 + 16);
      if (v41)
      {
        *(void *)(v24 + 16) = 0;
        *(_DWORD *)(v24 + 24) = 0;
        WTF::fastFree(v41, v6);
      }
    }
    goto LABEL_56;
  }
  uint64_t v13 = a1[3];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v15 = *(void *)(v13 + 32);
  uint64_t v16 = 32 * *(unsigned int *)(v13 + 44);
  uint64_t v17 = v15 + v16;
  while (v16)
  {
    int v18 = *(_DWORD *)(v17 - 8);
    v17 -= 32;
    v16 -= 32;
    if (!v18)
    {
      uint64_t v19 = v15 + v16;
      if (!*(unsigned char *)(v19 + 16))
      {
        char v20 = v45;
        char v45 = 0;
        *(_DWORD *)uint64_t v19 = 1;
        *(void *)(v19 + 8) = v20;
        *(unsigned char *)(v19 + 16) = 1;
      }
      goto LABEL_26;
    }
  }
  uint64_t v25 = *(void *)(v13 + 24);
  if (v25)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v25 + 16))(v25, 1, &v45);
    uint64_t v26 = *(void *)(v13 + 24);
    *(void *)(v13 + 24) = 0;
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
    }
  }
LABEL_26:
  int v27 = v45;
  char v45 = 0;
  if (!v27) {
    goto LABEL_29;
  }
  if (*v27 != 2)
  {
    *v27 -= 2;
LABEL_29:
    uint64_t v28 = a1[7];
    *(unsigned char *)(v28 + 96) = 0;
    if (!*(unsigned char *)(v28 + 32)) {
      goto LABEL_56;
    }
LABEL_41:
    if (*(_DWORD *)(v28 + 24))
    {
      uint64_t v35 = *(unsigned int *)(v28 + 28);
      if (v35)
      {
        int v36 = *(WebGPU::BindGroupLayout ***)(v28 + 16);
        uint64_t v37 = 8 * v35;
        do
        {
          uint64_t v38 = *v36;
          *int v36 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 1)
            {
              WebGPU::BindGroupLayout::~BindGroupLayout(v38, v14);
              WTF::fastFree(v39, v40);
            }
            else
            {
              --*(_DWORD *)v38;
            }
          }
          ++v36;
          v37 -= 8;
        }
        while (v37);
        *(_DWORD *)(v28 + 28) = 0;
      }
      unsigned int v42 = *(WTF **)(v28 + 16);
      if (v42)
      {
        *(void *)(v28 + 16) = 0;
        *(_DWORD *)(v28 + 24) = 0;
        WTF::fastFree(v42, v14);
      }
    }
    goto LABEL_56;
  }
  WTF::StringImpl::destroy();
  uint64_t v28 = a1[7];
  *(unsigned char *)(v28 + 96) = 0;
  if (*(unsigned char *)(v28 + 32)) {
    goto LABEL_41;
  }
LABEL_56:
  unint64_t v43 = (atomic_uchar *volatile *)a1[3];
  uint64_t v44 = WTF::fastMalloc((WTF *)0xD8);
  WebGPU::BindGroupLayout::BindGroupLayout(v44, v43);
  return (_DWORD *)v44;
}

void sub_1824F09A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1824F09F8(_Unwind_Exception *a1, void *a2)
{
  uint64_t v3 = v2;
  WTF::fastFree(v3, a2);
  _Unwind_Resume(a1);
}

void sub_1824F0A10(_Unwind_Exception *a1, void *a2)
{
  uint64_t v3 = v2;
  WTF::fastFree(v3, a2);
  _Unwind_Resume(a1);
}

_DWORD *wgpuComputePipelineSetLabel(int a1, char *__s)
{
  if (__s) {
    strlen(__s);
  }
  WTF::String::fromUTF8();
  uint64_t result = v3;
  if (v3)
  {
    if (*v3 == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *v3 -= 2;
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebGPU::LibraryCreationResult,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 104))
  {
    uint64_t v3 = *(void *)(a1 + 96);
    if (v3)
    {
      uint64_t v4 = *(unsigned int *)(v3 - 4);
      if (v4)
      {
        uint64_t v5 = *(void *)(a1 + 96);
        do
        {
          char v6 = *(_DWORD **)v5;
          if (*(void *)v5 != -1)
          {
            uint64_t v7 = *(unsigned int *)(v5 + 24);
            if (v7 != -1)
            {
              ((void (*)(char *, uint64_t))off_1ECABAB98[v7])(&v9, v5 + 8);
              char v6 = *(_DWORD **)v5;
            }
            *(_DWORD *)(v5 + 24) = -1;
            *(void *)uint64_t v5 = 0;
            if (v6)
            {
              if (*v6 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *v6 -= 2;
              }
            }
          }
          v5 += 32;
          --v4;
        }
        while (v4);
      }
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }
    WGSL::Reflection::EntryPointInformation::~EntryPointInformation((WGSL::Reflection::EntryPointInformation *)(a1 + 8), a2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJfDhdijxbS9_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    uint64_t v3 = *(unsigned int *)v2;
    if (v3)
    {
      uint64_t v4 = 24 * v3;
      uint64_t v5 = (_DWORD *)((char *)v2 + 24);
      do
      {
        a2 = (WTF **)(v5 - 4);
        uint64_t v6 = *v5;
        if (v6 != -1) {
          ((void (*)(char *, WTF **))off_1ECABAB98[v6])(&v8, a2);
        }
        *uint64_t v5 = -1;
        v5 += 6;
        v4 -= 24;
      }
      while (v4);
    }
    return WTF::fastFree(v2, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJfDhdijxbS9_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    uint64_t v3 = *(unsigned int *)v2;
    if (v3)
    {
      uint64_t v4 = 24 * v3;
      uint64_t v5 = (_DWORD *)((char *)v2 + 24);
      do
      {
        a2 = (WTF **)(v5 - 4);
        uint64_t v6 = *v5;
        if (v6 != -1) {
          ((void (*)(char *, WTF **))off_1ECABAB98[v6])(&v8, a2);
        }
        *uint64_t v5 = -1;
        v5 += 6;
        v4 -= 24;
      }
      while (v4);
    }
    return WTF::fastFree(v2, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJfDhdijxbS9_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, void *a2)
{
  uint64_t v2 = (WTF *)a2[1];
  a2[1] = 0;
  if (v2)
  {
    uint64_t v3 = *(unsigned int *)v2;
    if (v3)
    {
      uint64_t v4 = 24 * v3;
      uint64_t v5 = (_DWORD *)((char *)v2 + 24);
      do
      {
        a2 = v5 - 4;
        uint64_t v6 = *v5;
        if (v6 != -1) {
          ((void (*)(char *, void *))off_1ECABAB98[v6])(&v8, a2);
        }
        *uint64_t v5 = -1;
        v5 += 6;
        v4 -= 24;
      }
      while (v4);
    }
    return WTF::fastFree(v2, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJfDhdijxbS9_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = *(unsigned int *)(v2 - 4);
    if (v3)
    {
      uint64_t v4 = *a2;
      do
      {
        uint64_t v5 = *(_DWORD **)v4;
        if (*(void *)v4 != -1)
        {
          uint64_t v6 = *(unsigned int *)(v4 + 24);
          if (v6 != -1)
          {
            ((void (*)(char *, uint64_t))off_1ECABAB98[v6])(&v7, v4 + 8);
            uint64_t v5 = *(_DWORD **)v4;
          }
          *(_DWORD *)(v4 + 24) = -1;
          *(void *)uint64_t v4 = 0;
          if (v5)
          {
            if (*v5 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v5 -= 2;
            }
          }
        }
        v4 += 32;
        --v3;
      }
      while (v3);
    }
    WTF::fastFree((WTF *)(v2 - 16), a2);
  }
}

void WGSL::Reflection::EntryPointInformation::~EntryPointInformation(WGSL::Reflection::EntryPointInformation *this, void *a2)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = *((void *)this + 5);
      while (1)
      {
        uint64_t v6 = *(_DWORD **)v5;
        if (*(void *)v5 == -1) {
          goto LABEL_5;
        }
        char v7 = *(_DWORD **)(v5 + 8);
        *(void *)(v5 + 8) = 0;
        if (!v7) {
          goto LABEL_10;
        }
        if (*v7 != 2) {
          break;
        }
        WTF::StringImpl::destroy();
        uint64_t v6 = *(_DWORD **)v5;
        *(void *)uint64_t v5 = 0;
        if (v6)
        {
LABEL_13:
          if (*v6 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v6 -= 2;
          }
        }
LABEL_5:
        v5 += 32;
        if (!--v4) {
          goto LABEL_15;
        }
      }
      *v7 -= 2;
LABEL_10:
      *(void *)uint64_t v5 = 0;
      if (v6) {
        goto LABEL_13;
      }
      goto LABEL_5;
    }
LABEL_15:
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  std::__optional_destruct_base<WGSL::PipelineLayout,false>::~__optional_destruct_base[abi:sn180100]((uint64_t *)this + 2, a2);
  char v8 = (_DWORD *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v8)
  {
    if (*v8 == 2)
    {
      WTF::StringImpl::destroy();
      char v9 = *(_DWORD **)this;
      *(void *)this = 0;
      if (!v9) {
        return;
      }
      goto LABEL_22;
    }
    *v8 -= 2;
  }
  char v9 = *(_DWORD **)this;
  *(void *)this = 0;
  if (!v9) {
    return;
  }
LABEL_22:
  if (*v9 == 2) {
    WTF::StringImpl::destroy();
  }
  else {
    *v9 -= 2;
  }
}

uint64_t *std::__optional_destruct_base<WGSL::PipelineLayout,false>::~__optional_destruct_base[abi:sn180100](uint64_t *a1, void *a2)
{
  if (*((unsigned char *)a1 + 16))
  {
    unsigned int v3 = *((_DWORD *)a1 + 3);
    uint64_t v4 = *a1;
    if (v3)
    {
      uint64_t v5 = v4 + 24 * v3;
      do
      {
        uint64_t v6 = *(unsigned int *)(v4 + 20);
        if (v6)
        {
          uint64_t v7 = 120 * v6;
          char v8 = (_DWORD **)(*(void *)(v4 + 8) + 40);
          do
          {
            char v9 = *v8;
            *char v8 = 0;
            if (v9)
            {
              if (*v9 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *v9 -= 2;
              }
            }
            v8 += 15;
            v7 -= 120;
          }
          while (v7);
        }
        int v10 = *(WTF **)(v4 + 8);
        if (v10)
        {
          *(void *)(v4 + 8) = 0;
          *(_DWORD *)(v4 + 16) = 0;
          WTF::fastFree(v10, a2);
        }
        v4 += 24;
      }
      while (v4 != v5);
      uint64_t v4 = *a1;
    }
    if (v4)
    {
      *a1 = 0;
      *((_DWORD *)a1 + 2) = 0;
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

atomic_uchar *volatile *WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Instance,(WTF::DestructionThread)0>::deref(atomic_uchar *volatile *result, void *a2)
{
  char v2 = 0;
  atomic_uchar *volatile v3 = *result;
  atomic_compare_exchange_strong_explicit(*result, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2)
  {
    uint64_t result = (atomic_uchar *volatile *)MEMORY[0x18530AEA0](v3);
    uint64_t v9 = *((void *)v3 + 1);
    int v5 = 1;
    uint64_t v6 = v9 - 1;
    *((void *)v3 + 1) = v9 - 1;
    if (v9 != 1)
    {
LABEL_3:
      uint64_t v7 = 0;
      BOOL v8 = 1;
      atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
      if (v5 == 1) {
        goto LABEL_4;
      }
LABEL_14:
      uint64_t result = (atomic_uchar *volatile *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
      if (v6) {
        return result;
      }
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v4 = *((void *)v3 + 1);
    int v5 = 1;
    uint64_t v6 = v4 - 1;
    *((void *)v3 + 1) = v4 - 1;
    if (v4 != 1) {
      goto LABEL_3;
    }
  }
  uint64_t v10 = *((void *)v3 + 2);
  uint64_t v7 = *((void *)v3 + 3);
  *((void *)v3 + 3) = 0;
  BOOL v8 = v10 != 0;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1) {
    goto LABEL_14;
  }
LABEL_4:
  if (v6) {
    return result;
  }
LABEL_5:
  if (v7) {
    uint64_t result = (atomic_uchar *volatile *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (!v8)
  {
    return (atomic_uchar *volatile *)WTF::fastFree((WTF *)v3, a2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::Device::createComputePipelineAsync(WGPUComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WGPUCreatePipelineAsyncStatus,WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1ECABAC00;

  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)(a1 + 24), v2);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  int v5 = *(WebGPU::ComputePipeline **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (!v5) {
    return a1;
  }
  if (*(_DWORD *)v5 != 1)
  {
    --*(_DWORD *)v5;
    return a1;
  }
  WebGPU::ComputePipeline::~ComputePipeline(v5, v3);
  WTF::fastFree(v7, v8);
  return a1;
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  WebGPU::ComputePipeline *v5;
  WTF *v6;
  WTF *v8;
  void *v9;
  uint64_t vars8;

  *(void *)a1 = &unk_1ECABAC00;

  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)(a1 + 24), v2);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  int v5 = *(WebGPU::ComputePipeline **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (!v5) {
    goto LABEL_6;
  }
  if (*(_DWORD *)v5 != 1)
  {
    --*(_DWORD *)v5;
LABEL_6:
    uint64_t v6 = (WTF *)a1;
    return WTF::fastFree(v6, v3);
  }
  WebGPU::ComputePipeline::~ComputePipeline(v5, v3);
  WTF::fastFree(v8, v9);
  uint64_t v6 = (WTF *)a1;
  return WTF::fastFree(v6, v3);
}

_DWORD *WTF::Detail::CallableWrapper<WebGPU::Device::createComputePipelineAsync(WGPUComputePipelineDescriptor const&,WTF::CompletionHandler<void ()(WGPUCreatePipelineAsyncStatus,WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>> &&,WTF::String &&)> &&)::$_0,void>::call(void *a1)
{
  char v2 = a1 + 1;
  if (*(void *)(a1[1] + 16)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = *(unsigned char *)(a1[3] + 73) == 0;
  }
  MEMORY[0x18530AF50](&v6, a1[4]);
  uint64_t v4 = a1[2];
  a1[2] = 0;
  (*(void (**)(uint64_t, BOOL, void *, _DWORD **))(*(void *)v4 + 16))(v4, v3, v2, &v6);
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*result == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *result -= 2;
    }
  }
  return result;
}

void sub_1824F13A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
    uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    uint64_t v11 = v9 + 16;
    if (!a2) {
      goto LABEL_7;
    }
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
    uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    uint64_t v11 = v9 + 16;
    if (!a2) {
      goto LABEL_7;
    }
  }
  uint64_t v12 = a2;
  uint64_t v13 = (void *)(v9 + 24);
  do
  {
    *((_DWORD *)v13 - 2) = -1;
    *uint64_t v13 = 0;
    v13 += 2;
    --v12;
  }
  while (v12);
LABEL_7:
  *a1 = v11;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    do
    {
      uint64_t v16 = (int *)(v6 + 16 * v14);
      int v17 = *v16;
      if (*v16 != -2)
      {
        if (v17 == -1)
        {
          uint64_t v18 = *(void *)(v6 + 16 * v14 + 8);
          if (v18) {
            WTF::fastFree((WTF *)(v18 - 16), v10);
          }
        }
        else
        {
          uint64_t v19 = *a1;
          if (*a1) {
            int v20 = *(_DWORD *)(v19 - 8);
          }
          else {
            int v20 = 0;
          }
          int v21 = 0;
          unsigned int v22 = 9 * ((v17 + ~(v17 << 15)) ^ ((v17 + ~(v17 << 15)) >> 10));
          unsigned int v23 = ((v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11)) ^ (((v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11)) >> 16);
          do
          {
            uint64_t v24 = v23 & v20;
            unsigned int v23 = ++v21 + v24;
          }
          while (*(_DWORD *)(v19 + 16 * v24) != -1);
          uint64_t v25 = v19 + 16 * v24;
          int v27 = (void *)(v25 + 8);
          uint64_t v26 = *(void *)(v25 + 8);
          if (v26)
          {
            WTF::fastFree((WTF *)(v26 - 16), v10);
            int v17 = *v16;
          }
          *(_DWORD *)uint64_t v25 = v17;
          uint64_t v28 = v6 + 16 * v14;
          void *v27 = 0;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          void *v27 = v29;
          uint64_t v30 = *(void *)(v28 + 8);
          if (v30) {
            WTF::fastFree((WTF *)(v30 - 16), v10);
          }
          if (v16 == a3) {
            uint64_t v15 = v25;
          }
        }
      }
      ++v14;
    }
    while (v14 != v7);
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v15;
}

uint64_t *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::HashTable(uint64_t *a1, void *a2)
{
  *a1 = 0;
  if (!*a2) {
    return a1;
  }
  uint64_t v3 = *(unsigned int *)(*a2 - 12);
  if (!v3) {
    return a1;
  }
  unsigned int v5 = (v3 - 1) | ((v3 - 1) >> 1) | (((v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  unsigned int v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  unint64_t v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  if (3 * v7 <= 4 * v3)
  {
LABEL_7:
    LODWORD(v7) = 2 * v7;
    if (v7 <= 0x400) {
      goto LABEL_8;
    }
LABEL_10:
    if ((double)v7 * 0.416666667 > (double)v3) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_8:
  if ((double)v7 * 0.604166667 <= (double)v3) {
LABEL_11:
  }
    LODWORD(v7) = 2 * v7;
LABEL_12:
  if (v7 <= 8) {
    uint64_t v8 = 8;
  }
  else {
    uint64_t v8 = v7;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * v8 + 16));
  uint64_t v10 = (void *)(v9 + 40);
  uint64_t v11 = v8 & 0xFFFFFFFE;
  do
  {
    *((_DWORD *)v10 - 6) = -1;
    *((_DWORD *)v10 - 2) = -1;
    *(v10 - 2) = 0;
    *uint64_t v10 = 0;
    v10 += 4;
    v11 -= 2;
  }
  while (v11);
  uint64_t v12 = v8 - (v8 & 0xFFFFFFFE);
  if (v12)
  {
    uint64_t v13 = (void *)(((16 * v8) & 0xFFFFFFFE0) + v9 + 24);
    do
    {
      *((_DWORD *)v13 - 2) = -1;
      *uint64_t v13 = 0;
      v13 += 2;
      --v12;
    }
    while (v12);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  uint64_t v14 = (_DWORD *)*a2;
  if (!*a2)
  {
    int v17 = 0;
    uint64_t v16 = 0;
    goto LABEL_29;
  }
  uint64_t v15 = *(v14 - 1);
  uint64_t v16 = &v14[4 * v15];
  if (*(v14 - 3))
  {
    int v17 = (_DWORD *)*a2;
    if (v15)
    {
      uint64_t v18 = 16 * v15;
      int v17 = (_DWORD *)*a2;
      while (*v17 >= 0xFFFFFFFE)
      {
        v17 += 4;
        v18 -= 16;
        if (!v18)
        {
          int v17 = v16;
          if (v14) {
            goto LABEL_30;
          }
          goto LABEL_31;
        }
      }
    }
LABEL_29:
    if (!v14) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  int v17 = &v14[4 * v15];
  uint64_t v16 = v17;
  if (v14) {
LABEL_30:
  }
    v14 += 4 * *(v14 - 1);
LABEL_31:
  if (v14 != v17)
  {
    do
    {
      uint64_t v19 = *a1;
      if (*a1) {
        int v20 = *(_DWORD *)(v19 - 8);
      }
      else {
        int v20 = 0;
      }
      int v21 = 0;
      unsigned int v22 = *v17 + ~(*v17 << 15);
      unsigned int v23 = (9 * (v22 ^ (v22 >> 10))) ^ ((9 * (v22 ^ (v22 >> 10))) >> 6);
      unsigned int v24 = (v23 + ~(v23 << 11)) ^ ((v23 + ~(v23 << 11)) >> 16);
      do
      {
        uint64_t v25 = v24 & v20;
        unsigned int v24 = ++v21 + v25;
      }
      while (*(_DWORD *)(v19 + 16 * v25) != -1);
      long long v27 = *(_OWORD *)v17;
      uint64_t v26 = v17 + 4;
      *(_OWORD *)(v19 + 16 * v25) = v27;
      uint64_t v28 = v16;
      if (v26 != v16)
      {
        uint64_t v28 = v26;
        while (*v28 >= 0xFFFFFFFE)
        {
          v28 += 4;
          if (v28 == v16)
          {
            uint64_t v28 = v16;
            break;
          }
        }
      }
      int v17 = v28;
    }
    while (v28 != v14);
  }
  return a1;
}

void WebGPU::Device::create(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, WebGPU::Adapter *a4@<X3>, uint64_t *a5@<X8>)
{
  id v9 = a1;
  uint64_t v10 = (void *)[v9 newCommandQueueWithMaxCommandBufferCount:4096];
  uint64_t v11 = v10;
  if (!v10)
  {
    uint64_t v17 = WTF::fastMalloc((WTF *)0x1D8);
    WebGPU::Device::Device((WebGPU::Device *)v17, a4);
    goto LABEL_28;
  }
  [v10 setLabel:@"Default queue"];
  if (*(void *)a2 && *(_DWORD *)(*(void *)a2 + 4))
  {
    uint64_t v12 = NSString;
    WTF::String::utf8();
    uint64_t v13 = v53 ? (char *)v53 + 16 : 0;
    uint64_t v14 = objc_msgSend(v12, "stringWithFormat:", @"Default queue for device %s", v13);
    [v11 setLabel:v14];

    uint64_t v16 = v53;
    uint64_t v53 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1) {
        WTF::fastFree(v16, v15);
      }
      else {
        --*(_DWORD *)v16;
      }
    }
  }
  uint64_t v17 = WTF::fastMalloc((WTF *)0x1D8);
  uint64_t v49 = a5;
  id v18 = v9;
  id v48 = v11;
  uint64_t v19 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v19 = 0;
  *(_OWORD *)(v19 + 8) = xmmword_1826CEB80;
  *(void *)(v19 + 24) = v17;
  *(void *)uint64_t v17 = v19;
  id v20 = v18;
  *(void *)(v17 + 8) = v20;
  id v21 = v48;
  uint64_t v22 = WTF::fastMalloc((WTF *)0x68);
  WebGPU::Queue::Queue(v22, v21, (uint64_t *)v17);
  *(void *)(v17 + 16) = v22;

  *(_OWORD *)(v17 + 24) = 0u;
  *(void *)(v17 + 80) = 0;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_WORD *)(v17 + 72) = 0;
  *(_OWORD *)(v17 + 88) = *(_OWORD *)a3;
  long long v23 = *(_OWORD *)(a3 + 16);
  long long v24 = *(_OWORD *)(a3 + 32);
  long long v25 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v17 + 136) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v17 + 152) = v25;
  *(_OWORD *)(v17 + 104) = v23;
  *(_OWORD *)(v17 + 120) = v24;
  long long v26 = *(_OWORD *)(a3 + 80);
  long long v27 = *(_OWORD *)(a3 + 96);
  long long v28 = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(v17 + 200) = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(v17 + 216) = v28;
  *(_OWORD *)(v17 + 168) = v26;
  *(_OWORD *)(v17 + 184) = v27;
  *(void *)(v17 + 232) = 0;
  *(void *)(v17 + 240) = 0;
  uint64_t v29 = *(void *)(a3 + 144);
  *(void *)(a3 + 144) = 0;
  *(void *)(v17 + 232) = v29;
  LODWORD(v29) = *(_DWORD *)(a3 + 152);
  *(_DWORD *)(a3 + 152) = 0;
  *(_DWORD *)(v17 + 240) = v29;
  LODWORD(v29) = *(_DWORD *)(a3 + 156);
  *(_DWORD *)(a3 + 156) = 0;
  *(_DWORD *)(v17 + 244) = v29;
  uint64_t v30 = *(void *)(a3 + 160);
  *(unsigned char *)(v17 + 256) = *(unsigned char *)(a3 + 168);
  *(void *)(v17 + 248) = v30;
  long long v31 = *(_OWORD *)(a3 + 176);
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  *(_OWORD *)(v17 + 264) = v31;
  *(unsigned char *)(v17 + 280) = *(unsigned char *)(a3 + 192);
  int v32 = (void **)(v17 + 288);
  *(_OWORD *)(v17 + 288) = 0u;
  *(_OWORD *)(v17 + 304) = 0u;
  *(_OWORD *)(v17 + 320) = 0u;
  *(_OWORD *)(v17 + 336) = 0u;
  *(_OWORD *)(v17 + 352) = 0u;
  *(_OWORD *)(v17 + 368) = 0u;
  *(_OWORD *)(v17 + 384) = 0u;
  *(_OWORD *)(v17 + 400) = 0u;
  *(_OWORD *)(v17 + 416) = 0u;
  *(void *)(v17 + 432) = 0;
  ++*(_DWORD *)a4;
  *(void *)(v17 + 440) = a4;
  uint64_t v33 = *((void *)a4 + 2);
  if (v33)
  {
    char v34 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v33, (unsigned __int8 *)&v34, 1u, memory_order_acquire, memory_order_acquire);
    if (v34) {
      MEMORY[0x18530AEA0](v33);
    }
    if (*(void *)(v33 + 24))
    {
      ++*(void *)(v33 + 16);
      uint64_t v35 = v33;
      int v36 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v33, (unsigned __int8 *)&v36, 0, memory_order_release, memory_order_relaxed);
      if (v36 != 1) {
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v35 = 0;
      int v37 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v33, (unsigned __int8 *)&v37, 0, memory_order_release, memory_order_relaxed);
      if (v37 != 1) {
LABEL_30:
      }
        WTF::Lock::unlockSlow((WTF::Lock *)v33);
    }
  }
  else
  {
    uint64_t v35 = 0;
  }
  *(void *)(v17 + 448) = v35;
  *(void *)(v17 + 456) = *((void *)a4 + 3);
  *(void *)(v17 + 464) = 0;
  CVMetalTextureCacheRef cacheOut = 0;
  CVMetalTextureCacheCreate(0, 0, v20, 0, &cacheOut);
  CVMetalTextureCacheRef v38 = cacheOut;
  if (cacheOut) {
    CFRetain(cacheOut);
  }
  long long v39 = *(const void **)(v17 + 464);
  *(void *)(v17 + 464) = v38;
  if (v39) {
    CFRelease(v39);
  }
  id v40 = *(id *)(v17 + 8);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EC00AD68, memory_order_acquire) != -1)
  {
    uint64_t v53 = (WTF *)&v51;
    uint64_t v52 = &v53;
    std::__call_once(&qword_1EC00AD68, &v52, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebGPU::GPUFrameCapture::registerForFrameCapture(objc_object  {objcproto9MTLDevice}*)::{lambda(void)#1} &&>>);
  }
  if (_MergedGlobals) {
    WebGPU::GPUFrameCapture::captureFrame(v40);
  }

  id v41 = (void *)[*(id *)(v17 + 8) newBufferWithLength:1 options:0];
  WebGPU::Device::setOwnerWithIdentity(v17, v41);
  unsigned int v42 = *v32;
  *int v32 = v41;

  unint64_t v43 = objc_opt_new();
  [v43 setWidth:1];
  [v43 setHeight:1];
  [v43 setMipmapLevelCount:1];
  [v43 setPixelFormat:80];
  [v43 setTextureType:2];
  [v43 setStorageMode:0];
  [v43 setUsage:5];
  uint64_t v44 = [*(id *)(v17 + 8) newTextureWithDescriptor:v43];
  char v45 = *(void **)(v17 + 296);
  *(void *)(v17 + 296) = v44;

  [v43 setPixelFormat:260];
  [v43 setStorageMode:2];
  uint64_t v46 = [*(id *)(v17 + 8) newTextureWithDescriptor:v43];
  uint64_t v47 = *(void **)(v17 + 304);
  *(void *)(v17 + 304) = v46;

  a5 = v49;
LABEL_28:
  *a5 = v17;
}

void sub_1824F1CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16)
{
  WTF::Ref<WebGPU::Adapter,WTF::RawPtrTraits<WebGPU::Adapter>,WTF::DefaultRefDerefTraits<WebGPU::Adapter>>::~Ref((id **)v18 + 52);

  WebGPU::HardwareCapabilities::~HardwareCapabilities((id *)v18 + 8);
  uint64_t v22 = *(void *)(v19 + 64);
  *(void *)(v19 + 64) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  WTF::Vector<WTF::RefPtr<WebGPU::XRSubImage,WTF::RawPtrTraits<WebGPU::XRSubImage>,WTF::DefaultRefDerefTraits<WebGPU::XRSubImage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v18 + 3), v21);
  WTF::Vector<WebGPU::Device::ErrorScope,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v18 + 1), v23);
  long long v24 = (id *)*v18;
  *id v18 = 0;
  if (v24) {
    (*((void (**)(id *))*v24 + 1))(v24);
  }
  WTF::Ref<WebGPU::Queue,WTF::RawPtrTraits<WebGPU::Queue>,WTF::DefaultRefDerefTraits<WebGPU::Queue>>::~Ref((atomic_uint **)(v19 + 16));

  WTF::fastFree((WTF *)v19, v25);
  _Unwind_Resume(a1);
}

uint64_t *WTF::ThreadSafeWeakPtr<WebGPU::Instance>::~ThreadSafeWeakPtr(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  if (!v3) {
    return a1;
  }
  char v4 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4)
  {
    MEMORY[0x18530AEA0](v3);
    uint64_t v8 = *(void *)(v3 + 16) - 1;
    *(void *)(v3 + 16) = v8;
    if (v8) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v9 = *(void *)(v3 + 8);
    int v10 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
    if (v10 == 1)
    {
      if (v9) {
        return a1;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v3);
      if (v9) {
        return a1;
      }
    }
    WTF::fastFree((WTF *)v3, a2);
    return a1;
  }
  uint64_t v5 = *(void *)(v3 + 16) - 1;
  *(void *)(v3 + 16) = v5;
  if (!v5) {
    goto LABEL_7;
  }
LABEL_4:
  int v6 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 == 1) {
    return a1;
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return a1;
}

id **WTF::Ref<WebGPU::Adapter,WTF::RawPtrTraits<WebGPU::Adapter>,WTF::DefaultRefDerefTraits<WebGPU::Adapter>>::~Ref(id **a1)
{
  char v2 = *a1;
  *a1 = 0;
  if (!v2) {
    return a1;
  }
  if (*(_DWORD *)v2 != 1)
  {
    --*(_DWORD *)v2;
    return a1;
  }
  WebGPU::Adapter::~Adapter(v2);
  WTF::fastFree(v4, v5);
  return a1;
}

uint64_t WTF::Vector<WTF::RefPtr<WebGPU::XRSubImage,WTF::RawPtrTraits<WebGPU::XRSubImage>,WTF::DefaultRefDerefTraits<WebGPU::XRSubImage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    char v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)char v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
        {
          WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)(v6 + 16), a2);
          uint64_t v8 = *(void *)(v6 + 8);
          if (v8)
          {
            *(void *)(v8 + 8) = 0;
            uint64_t v9 = *(unsigned int **)(v6 + 8);
            *(void *)(v6 + 8) = 0;
            if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v9);
              WTF::fastFree((WTF *)v9, v7);
            }
          }
          else
          {
            *(void *)(v6 + 8) = 0;
          }
          WTF::fastFree((WTF *)v6, v7);
        }
        else
        {
          --*(_DWORD *)v6;
        }
      }
      char v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  int v10 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebGPU::Device::ErrorScope,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  char v4 = *(WTF **)a1;
  if (v3)
  {
    uint64_t v5 = 32 * v3;
    uint64_t v6 = (char *)v4 + 8;
    do
    {
      if (v6[8])
      {
        unint64_t v7 = *(_DWORD **)v6;
        *(void *)uint64_t v6 = 0;
        if (v7)
        {
          if (*v7 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v7 -= 2;
          }
        }
      }
      v6 += 32;
      v5 -= 32;
    }
    while (v5);
    char v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

atomic_uint **WTF::Ref<WebGPU::Queue,WTF::RawPtrTraits<WebGPU::Queue>,WTF::DefaultRefDerefTraits<WebGPU::Queue>>::~Ref(atomic_uint **a1)
{
  char v2 = *a1;
  *a1 = 0;
  if (!v2 || atomic_fetch_add(v2, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v2);
  WebGPU::Queue::~Queue((WebGPU::Queue *)v2);
  WTF::fastFree(v4, v5);
  return a1;
}

WebGPU::Device *WebGPU::Device::Device(WebGPU::Device *this, WebGPU::Adapter *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v4 = 0;
  *(_OWORD *)(v4 + 8) = xmmword_1826CEB80;
  *(void *)(v4 + 24) = this;
  *(void *)this = v4;
  *((void *)this + 1) = 0;
  uint64_t v5 = (WebGPU::Queue *)WTF::fastMalloc((WTF *)0x68);
  WebGPU::Queue::Queue(v5, this);
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 2) = v5;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_WORD *)this + 36) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *(_OWORD *)((char *)this + 156) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((unsigned char *)this + 256) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((unsigned char *)this + 280) = 0;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((void *)this + 54) = 0;
  ++*(_DWORD *)a2;
  *((void *)this + 55) = a2;
  uint64_t v6 = *((void *)a2 + 2);
  if (v6)
  {
    char v7 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
    if (v7) {
      MEMORY[0x18530AEA0](v6);
    }
    if (*(void *)(v6 + 24))
    {
      ++*(void *)(v6 + 16);
      uint64_t v8 = v6;
      int v9 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
      if (v9 == 1) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v8 = 0;
      int v10 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
      if (v10 == 1) {
        goto LABEL_8;
      }
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  else
  {
    uint64_t v8 = 0;
  }
LABEL_8:
  uint64_t v11 = *((void *)a2 + 3);
  *((void *)this + 56) = v8;
  *((void *)this + 57) = v11;
  *((void *)this + 58) = 0;
  if (!*(void *)(*((void *)this + 55) + 8))
  {
    uint64_t v12 = (void *)*((void *)this + 1);
    *((void *)this + 1) = 0;

    WebGPU::Queue::makeInvalid(*((WebGPU::Queue **)this + 2));
  }
  return this;
}

void sub_1824F2418(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;
  uint64_t v5 = v2 + 8;
  uint64_t v6 = v4 + 24;
  char v7 = (id *)(v4 + 64);
  uint64_t v8 = (uint64_t *)v4;
  WTF::Ref<WebGPU::Adapter,WTF::RawPtrTraits<WebGPU::Adapter>,WTF::DefaultRefDerefTraits<WebGPU::Adapter>>::~Ref((id **)(v4 + 416));

  WebGPU::HardwareCapabilities::~HardwareCapabilities(v7);
  uint64_t v10 = *(void *)(v1 + 64);
  *(void *)(v1 + 64) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  WTF::Vector<WTF::RefPtr<WebGPU::XRSubImage,WTF::RawPtrTraits<WebGPU::XRSubImage>,WTF::DefaultRefDerefTraits<WebGPU::XRSubImage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6, v9);
  WTF::Vector<WebGPU::Device::ErrorScope,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, v11);
  uint64_t v12 = *v8;
  *uint64_t v8 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  WTF::Ref<WebGPU::Queue,WTF::RawPtrTraits<WebGPU::Queue>,WTF::DefaultRefDerefTraits<WebGPU::Queue>>::~Ref((atomic_uint **)(v1 + 16));

  _Unwind_Resume(a1);
}

void sub_1824F258C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v3, a2);

  _Unwind_Resume(a1);
}

void sub_1824F25A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebGPU::Device::~Device(WebGPU::Device *this, void *a2)
{
  uint64_t v3 = *((void *)this + 8);
  uint64_t v4 = (_DWORD *)MEMORY[0x1E4F30960];
  if (v3)
  {
    *MEMORY[0x1E4F30960] += 2;
    unsigned int v42 = v4;
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v3 + 16))(v3, 1, &v42);
    uint64_t v5 = v42;
    unsigned int v42 = 0;
    if (!v5) {
      goto LABEL_5;
    }
    if (*v5 != 2)
    {
      *v5 -= 2;
LABEL_5:
      uint64_t v6 = *((void *)this + 8);
      *((void *)this + 8) = 0;
      if (!v6) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    WTF::StringImpl::destroy();
    uint64_t v6 = *((void *)this + 8);
    *((void *)this + 8) = 0;
    if (v6) {
LABEL_6:
    }
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
LABEL_7:
  uint64_t v7 = *((void *)this + 3);
  if (!v7) {
    goto LABEL_13;
  }
  *v4 += 2;
  unsigned int v42 = v4;
  (*(void (**)(uint64_t, void, _DWORD **))(*(void *)v7 + 16))(v7, 0, &v42);
  uint64_t v8 = v42;
  unsigned int v42 = 0;
  if (!v8)
  {
LABEL_11:
    uint64_t v9 = *((void *)this + 3);
    *((void *)this + 3) = 0;
    if (!v9) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (*v8 != 2)
  {
    *v8 -= 2;
    goto LABEL_11;
  }
  WTF::StringImpl::destroy();
  uint64_t v9 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v9) {
LABEL_12:
  }
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
LABEL_13:
  uint64_t v10 = (const void *)*((void *)this + 58);
  *((void *)this + 58) = 0;
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = *((void *)this + 56);
  *((void *)this + 56) = 0;
  if (v11)
  {
    char v12 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v11, (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
    if (v12)
    {
      MEMORY[0x18530AEA0](v11);
      uint64_t v15 = *(void *)(v11 + 16) - 1;
      *(void *)(v11 + 16) = v15;
      if (v15)
      {
LABEL_18:
        int v14 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v11, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
        if (v14 != 1) {
          WTF::Lock::unlockSlow((WTF::Lock *)v11);
        }
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v13 = *(void *)(v11 + 16) - 1;
      *(void *)(v11 + 16) = v13;
      if (v13) {
        goto LABEL_18;
      }
    }
    uint64_t v16 = *(void *)(v11 + 8);
    int v17 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v11, (unsigned __int8 *)&v17, 0, memory_order_release, memory_order_relaxed);
    if (v17 == 1)
    {
      if (v16) {
        goto LABEL_28;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v11);
      if (v16) {
        goto LABEL_28;
      }
    }
    WTF::fastFree((WTF *)v11, a2);
  }
LABEL_28:
  id v18 = (id *)*((void *)this + 55);
  *((void *)this + 55) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
    {
      WebGPU::Adapter::~Adapter(v18);
      WTF::fastFree(v19, v20);
    }
    else
    {
      --*(_DWORD *)v18;
    }
  }

  uint64_t v22 = (WTF *)*((void *)this + 29);
  if (v22)
  {
    *((void *)this + 29) = 0;
    *((_DWORD *)this + 60) = 0;
    WTF::fastFree(v22, v21);
  }

  uint64_t v24 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = *((unsigned int *)this + 15);
  if (v25)
  {
    long long v26 = (WTF **)*((void *)this + 6);
    uint64_t v27 = 8 * v25;
    do
    {
      long long v28 = *v26;
      *long long v26 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 1)
        {
          WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((char *)v28 + 16);
          uint64_t v30 = *((void *)v28 + 1);
          if (v30)
          {
            *(void *)(v30 + 8) = 0;
            long long v31 = (unsigned int *)*((void *)v28 + 1);
            *((void *)v28 + 1) = 0;
            if (v31 && atomic_fetch_add((atomic_uint *volatile)v31, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v31);
              WTF::fastFree((WTF *)v31, v29);
            }
          }
          else
          {
            *((void *)v28 + 1) = 0;
          }
          WTF::fastFree(v28, v29);
        }
        else
        {
          --*(_DWORD *)v28;
        }
      }
      ++v26;
      v27 -= 8;
    }
    while (v27);
  }
  int v32 = (WTF *)*((void *)this + 6);
  if (v32)
  {
    *((void *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v32, v23);
  }
  uint64_t v33 = *((unsigned int *)this + 11);
  char v34 = (WTF *)*((void *)this + 4);
  if (v33)
  {
    uint64_t v35 = 32 * v33;
    int v36 = (char *)v34 + 8;
    do
    {
      if (v36[8])
      {
        int v37 = *(_DWORD **)v36;
        *(void *)int v36 = 0;
        if (v37)
        {
          if (*v37 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v37 -= 2;
          }
        }
      }
      v36 += 32;
      v35 -= 32;
    }
    while (v35);
    char v34 = (WTF *)*((void *)this + 4);
  }
  if (v34)
  {
    *((void *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v34, v23);
  }
  uint64_t v38 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  long long v39 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v39 && atomic_fetch_add((atomic_uint *volatile)v39, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v39);
    WebGPU::Queue::~Queue((WebGPU::Queue *)v39);
    WTF::fastFree(v40, v41);
  }
}

void sub_1824F2A70(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *a10 -= 2;
    }
  }
  char v12 = *(const void **)(v10 + 464);
  *(void *)(v10 + 464) = 0;
  if (v12) {
    CFRelease(v12);
  }
  WTF::ThreadSafeWeakPtr<WebGPU::Instance>::~ThreadSafeWeakPtr((uint64_t *)(v10 + 448), a2);
  WTF::Ref<WebGPU::Adapter,WTF::RawPtrTraits<WebGPU::Adapter>,WTF::DefaultRefDerefTraits<WebGPU::Adapter>>::~Ref((id **)(v10 + 440));

  WebGPU::HardwareCapabilities::~HardwareCapabilities((id *)(v10 + 88));
  uint64_t v14 = *(void *)(v10 + 64);
  *(void *)(v10 + 64) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  WTF::Vector<WTF::RefPtr<WebGPU::XRSubImage,WTF::RawPtrTraits<WebGPU::XRSubImage>,WTF::DefaultRefDerefTraits<WebGPU::XRSubImage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10 + 48, v13);
  WTF::Vector<WebGPU::Device::ErrorScope,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10 + 32, v15);
  uint64_t v16 = *(void *)(v10 + 24);
  *(void *)(v10 + 24) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  WTF::Ref<WebGPU::Queue,WTF::RawPtrTraits<WebGPU::Queue>,WTF::DefaultRefDerefTraits<WebGPU::Queue>>::~Ref((atomic_uint **)(v10 + 16));

  _Unwind_Resume(a1);
}

void WebGPU::Device::loseTheDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;

  uint64_t v5 = *(void *)(a1 + 440);
  uint64_t v6 = *(void **)(v5 + 8);
  *(void *)(v5 + 8) = 0;

  if (*(void *)(a1 + 64))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(void, uint64_t, _DWORD **))(**(void **)(a1 + 64) + 16))(*(void *)(a1 + 64), a2, &v9);
    uint64_t v7 = v9;
    uint64_t v9 = 0;
    if (v7)
    {
      if (*v7 == 2)
      {
        WTF::StringImpl::destroy();
        uint64_t v8 = *(void *)(a1 + 64);
        *(void *)(a1 + 64) = 0;
        if (!v8) {
          goto LABEL_7;
        }
        goto LABEL_6;
      }
      *v7 -= 2;
    }
    uint64_t v8 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = 0;
    if (v8) {
LABEL_6:
    }
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
LABEL_7:
  WebGPU::Queue::makeInvalid(*(WebGPU::Queue **)(a1 + 16));
  *(unsigned char *)(a1 + 72) = 1;
}

void sub_1824F2D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebGPU::Device::setOwnerWithIdentity(uint64_t a1, void *a2)
{
  id v3 = a2;
  WebGPU::Device::webProcessID(a1, v4, &v7);
  if (v8)
  {
    uint64_t v5 = v7;
    if (!v7) {
      goto LABEL_7;
    }
    id v6 = v3;
    if (v6 && (objc_opt_respondsToSelector() & 1) != 0) {
      [v6 setOwnerWithIdentity:v5];
    }

    if (v8) {
LABEL_7:
    }
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v7);
  }
}

void sub_1824F2DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, __int16 a11, char a12)
{
  if (a12)
  {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

uint64_t WebGPU::Device::webProcessID@<X0>(uint64_t this@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v4 = *(void *)(this + 448);
  if (!v4) {
    goto LABEL_16;
  }
  char v5 = 0;
  uint64_t v6 = *(void *)(this + 456);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v4, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5)
  {
    this = MEMORY[0x18530AEA0](v4);
    if (*(void *)(v4 + 24))
    {
LABEL_4:
      ++*(void *)(v4 + 8);
      int v7 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v4, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
      if (v7 == 1) {
        goto LABEL_5;
      }
      goto LABEL_15;
    }
  }
  else if (*(void *)(v4 + 24))
  {
    goto LABEL_4;
  }
  uint64_t v6 = 0;
  int v15 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v4, (unsigned __int8 *)&v15, 0, memory_order_release, memory_order_relaxed);
  if (v15 == 1)
  {
LABEL_5:
    if (v6) {
      goto LABEL_6;
    }
LABEL_16:
    *a3 = 0;
    a3[4] = 0;
    return this;
  }
LABEL_15:
  this = WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v6) {
    goto LABEL_16;
  }
LABEL_6:
  *a3 = 0;
  a3[4] = 0;
  if (*(unsigned char *)(v6 + 52))
  {
    this = WTF::MachSendRight::MachSendRight();
    a3[4] = 1;
  }
  char v8 = 0;
  uint64_t v9 = *(void *)(v6 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
  if (v8)
  {
    this = MEMORY[0x18530AEA0](v9);
    uint64_t v16 = *(void *)(v9 + 8);
    int v11 = 1;
    uint64_t v12 = v16 - 1;
    *(void *)(v9 + 8) = v16 - 1;
    if (v16 != 1)
    {
LABEL_10:
      uint64_t v13 = 0;
      BOOL v14 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
      if (v11 == 1) {
        goto LABEL_11;
      }
LABEL_19:
      this = WTF::Lock::unlockSlow((WTF::Lock *)v9);
      if (v12) {
        return this;
      }
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v10 = *(void *)(v9 + 8);
    int v11 = 1;
    uint64_t v12 = v10 - 1;
    *(void *)(v9 + 8) = v10 - 1;
    if (v10 != 1) {
      goto LABEL_10;
    }
  }
  uint64_t v17 = *(void *)(v9 + 16);
  uint64_t v13 = *(void *)(v9 + 24);
  *(void *)(v9 + 24) = 0;
  BOOL v14 = v17 != 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 != 1) {
    goto LABEL_19;
  }
LABEL_11:
  if (v12) {
    return this;
  }
LABEL_20:
  if (v13) {
    this = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  if (!v14)
  {
    return WTF::fastFree((WTF *)v9, a2);
  }
  return this;
}

void sub_1824F2FC0(_Unwind_Exception *a1, void *a2)
{
  if (*((unsigned char *)v2 + 4)) {
    WTF::MachSendRight::~MachSendRight(v2);
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Instance,(WTF::DestructionThread)0>::deref((atomic_uchar *volatile *)(v3 + 8), a2);
  _Unwind_Resume(a1);
}

uint64_t WebGPU::Device::generateAValidationError(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 32);
  uint64_t v4 = 32 * *(unsigned int *)(result + 44);
  uint64_t v5 = v3 + v4;
  while (v4)
  {
    int v6 = *(_DWORD *)(v5 - 8);
    v5 -= 32;
    v4 -= 32;
    if (!v6)
    {
      uint64_t v7 = v3 + v4;
      if (!*(unsigned char *)(v7 + 16))
      {
        uint64_t v9 = *a2;
        *a2 = 0;
        *(_DWORD *)uint64_t v7 = 1;
        *(void *)(v7 + 8) = v9;
        *(unsigned char *)(v7 + 16) = 1;
      }
      return result;
    }
  }
  uint64_t result = *(void *)(result + 24);
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)result + 16))(result, 1, a2);
    uint64_t result = *(void *)(v2 + 24);
    *(void *)(v2 + 24) = 0;
    if (result)
    {
      char v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return v8();
    }
  }
  return result;
}

uint64_t WebGPU::Device::generateAnOutOfMemoryError(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 32);
  uint64_t v4 = 32 * *(unsigned int *)(result + 44);
  uint64_t v5 = v3 + v4;
  while (v4)
  {
    int v6 = *(_DWORD *)(v5 - 8);
    v5 -= 32;
    v4 -= 32;
    if (v6 == 1)
    {
      uint64_t v7 = v3 + v4;
      if (!*(unsigned char *)(v7 + 16))
      {
        uint64_t v9 = *a2;
        *a2 = 0;
        *(_DWORD *)uint64_t v7 = 2;
        *(void *)(v7 + 8) = v9;
        *(unsigned char *)(v7 + 16) = 1;
      }
      return result;
    }
  }
  uint64_t result = *(void *)(result + 24);
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)result + 16))(result, 2, a2);
    uint64_t result = *(void *)(v2 + 24);
    *(void *)(v2 + 24) = 0;
    if (result)
    {
      char v8 = *(uint64_t (**)(void))(*(void *)result + 8);
      return v8();
    }
  }
  return result;
}

id WebGPU::Device::newBufferWithBytes(id *this, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)[this[1] newBufferWithBytes:a2 length:a3 options:a4];
  WebGPU::Device::setOwnerWithIdentity((uint64_t)this, v5);
  return v5;
}

void sub_1824F3224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebGPU::Device::newBufferWithBytesNoCopy(id *this, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)[this[1] newBufferWithBytesNoCopy:a2 length:a3 options:a4 deallocator:0];
  WebGPU::Device::setOwnerWithIdentity((uint64_t)this, v5);
  return v5;
}

void sub_1824F3290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebGPU::Device::newTextureWithDescriptor(WebGPU::Device *this, MTLTextureDescriptor *a2, __IOSurface *a3, uint64_t a4)
{
  uint64_t v7 = a2;
  char v8 = (void *)*((void *)this + 1);
  if (a3) {
    uint64_t v9 = (void *)[v8 newTextureWithDescriptor:v7 iosurface:a3 plane:a4];
  }
  else {
    uint64_t v9 = (void *)[v8 newTextureWithDescriptor:v7];
  }
  uint64_t v10 = v9;
  WebGPU::Device::setOwnerWithIdentity((uint64_t)this, v9);

  return v10;
}

void sub_1824F3324(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824F3334(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824F3344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebGPU::Device::ErrorScope::~ErrorScope(WebGPU::Device::ErrorScope *this)
{
  if (*((unsigned char *)this + 16))
  {
    uint64_t v2 = (_DWORD *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v2)
    {
      if (*v2 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v2 -= 2;
      }
    }
  }
}

uint64_t WebGPU::Device::popErrorScope(WTF::CompletionHandler<void ()(WGPUErrorType,WTF::String &&)> &&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (!*(unsigned char *)(a1 + 16)) {
    return a1;
  }
  uint64_t v3 = *(_DWORD **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (!v3) {
    return a1;
  }
  if (*v3 != 2)
  {
    *v3 -= 2;
    return a1;
  }
  WTF::StringImpl::destroy();
  return a1;
}

void WebGPU::Device::setDeviceLostCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4
    || (uint64_t v5 = (_DWORD *)MEMORY[0x1E4F30960],
        *MEMORY[0x1E4F30960] += 2,
        int v11 = v5,
        (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v4 + 16))(v4, 1, &v11),
        int v6 = v11,
        int v11 = 0,
        !v6))
  {
LABEL_5:
    uint64_t v7 = *a2;
    *a2 = 0;
    uint64_t v8 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v7;
    if (!v8) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (*v6 != 2)
  {
    *v6 -= 2;
    goto LABEL_5;
  }
  WTF::StringImpl::destroy();
  uint64_t v10 = *a2;
  *a2 = 0;
  uint64_t v8 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v10;
  if (v8) {
LABEL_6:
  }
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
LABEL_7:
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v9 = 1;
LABEL_9:
    WebGPU::Device::loseTheDevice(a1, v9);
    return;
  }
  if (!*(void *)(*(void *)(a1 + 440) + 8))
  {
    uint64_t v9 = 0;
    goto LABEL_9;
  }
}

void sub_1824F3560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebGPU::Device::setUncapturedErrorCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4
    || (uint64_t v5 = (_DWORD *)MEMORY[0x1E4F30960],
        *MEMORY[0x1E4F30960] += 2,
        uint64_t v10 = v5,
        (*(void (**)(uint64_t, void, _DWORD **))(*(void *)v4 + 16))(v4, 0, &v10),
        int v6 = v10,
        uint64_t v10 = 0,
        !v6))
  {
LABEL_5:
    uint64_t v7 = *a2;
    *a2 = 0;
    uint64_t result = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v7;
    if (!result) {
      return result;
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (*v6 != 2)
  {
    *v6 -= 2;
    goto LABEL_5;
  }
  WTF::StringImpl::destroy();
  uint64_t v9 = *a2;
  *a2 = 0;
  uint64_t result = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v9;
  if (!result) {
    return result;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
}

void sub_1824F367C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

id WebGPU::Device::dispatchCallPipelineState(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(void **)(a1 + 320);
    if (!v5)
    {
      id v11 = 0;
      uint64_t v6 = [v4 newComputePipelineStateWithFunction:v3 error:&v11];
      id v7 = v11;
      uint64_t v8 = *(void **)(a1 + 320);
      *(void *)(a1 + 320) = v6;

      if (v7) {
        WTFLogAlways();
      }

      uint64_t v5 = *(void **)(a1 + 320);
    }
    id v9 = v5;
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

void sub_1824F376C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebGPU::Device::copyIndexIndirectArgsPipeline(WebGPU::Device *this, unint64_t a2)
{
  if (!*((void *)this + 1))
  {
    id v5 = 0;
    goto LABEL_17;
  }
  uint64_t v4 = 424;
  if (a2 > 1) {
    uint64_t v4 = 432;
  }
  id v5 = *(id *)((char *)this + v4);
  if (!v5)
  {
    if (!WebGPU::Device::copyIndexIndirectArgsPipeline(unsigned long)::function)
    {
      uint64_t v6 = objc_opt_new();
      [v6 setFastMathEnabled:1];
      BOOL v14 = (void *)*((void *)this + 1);
      id v21 = 0;
      int v15 = objc_msgSend(v14, "newLibraryWithSource:options:error:", @"\n    using namespace metal;\n    [[vertex]] void vs(device MTLDrawIndexedPrimitivesIndirectArguments& indexedOutput [[buffer(0)]], constant const MTLDrawIndexedPrimitivesIndirectArguments& indirectArguments [[buffer(1)]], const constant uint* instanceCount [[buffer(2)]]) {\n        BOOL condition = indirectArguments.baseInstance + indirectArguments.instanceCount > instanceCount[0] || indirectArguments.baseInstance >= instanceCount[0];\n        indexedOutput.indexCount = metal::select(indirectArguments.indexCount, 0u, condition);\n        indexedOutput.instanceCount = metal::select(indirectArguments.instanceCount, 0u, condition);\n        indexedOutput.indexStart = indirectArguments.indexStart;\n        indexedOutput.baseVertex = indirectArguments.baseVertex;\n        indexedOutput.baseInstance = indirectArguments.baseInstance;\n    }",
                      v6,
                      &v21);
      id v11 = v21;
      if (v11)
      {
        WTFLogAlways();

        uint64_t v13 = 0;
        goto LABEL_14;
      }
      uint64_t v17 = [v15 newFunctionWithName:@"vs"];
      id v18 = (void *)WebGPU::Device::copyIndexIndirectArgsPipeline(unsigned long)::function;
      WebGPU::Device::copyIndexIndirectArgsPipeline(unsigned long)::function = v17;
    }
    uint64_t v6 = objc_opt_new();
    [v6 setVertexFunction:WebGPU::Device::copyIndexIndirectArgsPipeline(unsigned long)::function];
    [v6 setRasterizationEnabled:0];
    [v6 setRasterSampleCount:a2];
    [v6 setFragmentFunction:0];
    [v6 setInputPrimitiveTopology:1];
    id v7 = (void *)*((void *)this + 1);
    if (a2 < 2)
    {
      uint64_t v19 = 0;
      uint64_t v8 = [v7 newRenderPipelineStateWithDescriptor:v6 error:&v19];
      id v9 = (id *)((char *)this + 424);
      uint64_t v10 = v19;
    }
    else
    {
      id v20 = 0;
      uint64_t v8 = [v7 newRenderPipelineStateWithDescriptor:v6 error:&v20];
      id v9 = (id *)((char *)this + 432);
      uint64_t v10 = v20;
    }
    id v11 = v10;
    id v12 = *v9;
    *id v9 = (id)v8;

    id v5 = *v9;
    if (!v11)
    {
      uint64_t v13 = 0;
      goto LABEL_16;
    }
    WTFLogAlways();
    uint64_t v13 = v5;
LABEL_14:
    id v5 = 0;
LABEL_16:
  }
LABEL_17:
  return v5;
}

void sub_1824F39B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824F39C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824F39E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebGPU::Device::indexBufferClampPipeline(WebGPU::Device *this, MTLIndexType a2, unint64_t a3)
{
  if (!*((void *)this + 1))
  {
    id v8 = 0;
    goto LABEL_27;
  }
  uint64_t v6 = 336;
  if (a3 > 1) {
    uint64_t v6 = 352;
  }
  uint64_t v7 = 328;
  if (a3 > 1) {
    uint64_t v7 = 344;
  }
  if (a2) {
    uint64_t v6 = v7;
  }
  id v8 = *(id *)((char *)this + v6);
  if (!v8)
  {
    if (!qword_1EC00AD48)
    {
      uint64_t v10 = objc_opt_new();
      [v10 setFastMathEnabled:1];
      uint64_t v13 = (void *)*((void *)this + 1);
      id v30 = 0;
      BOOL v14 = objc_msgSend(v13, "newLibraryWithSource:options:error:", @"\n#define vertexCount 0\n#define primitiveRestart 1\n    using namespace metal;\n    [[vertex]] void vsUshort(device const ushort* indexBuffer [[buffer(0)]], device MTLDrawIndexedPrimitivesIndirectArguments& indexedOutput [[buffer(1)]], const constant uint* data [[buffer(2)]], uint indexId [[vertex_id]]) {\n        ushort vertexIndex = data[primitiveRestart] + indexBuffer[indexId];\n        if (vertexIndex + indexedOutput.baseVertex >= data[vertexCount] + data[primitiveRestart])\n            indexedOutput.indexCount = 0u;\n    }\n    [[vertex]] void vsUint(device const uint* indexBuffer [[buffer(0)]], device MTLDrawIndexedPrimitivesIndirectArguments& indexedOutput [[buffer(1)]], const constant uint* data [[buffer(2)]], uint indexId [[vertex_id]]) {\n        uint vertexIndex = data[primitiveRestart] + indexBuffer[indexId];\n        if (vertexIndex + indexedOutput.baseVertex >= data[vertexCount] + data[primitiveRestart])\n            indexedOutput.indexCount = 0u;\n    }",
                      v10,
                      &v30);
      id v15 = v30;
      if (v15)
      {
        WTFLogAlways();

        uint64_t v16 = 0;
        goto LABEL_24;
      }
      uint64_t v22 = [v14 newFunctionWithName:@"vsUint"];
      long long v23 = (void *)qword_1EC00AD48;
      qword_1EC00AD48 = v22;

      uint64_t v24 = [v14 newFunctionWithName:@"vsUshort"];
      uint64_t v25 = (void *)qword_1EC00AD50;
      qword_1EC00AD50 = v24;
    }
    id v9 = objc_opt_new();
    uint64_t v10 = v9;
    id v11 = &qword_1EC00AD48;
    if (a2 == MTLIndexTypeUInt16) {
      id v11 = &qword_1EC00AD50;
    }
    [v9 setVertexFunction:*v11];
    [v10 setRasterizationEnabled:0];
    [v10 setRasterSampleCount:a3];
    [v10 setFragmentFunction:0];
    [v10 setInputPrimitiveTopology:1];
    id v12 = (void *)*((void *)this + 1);
    if (a2)
    {
      if (a3 >= 2)
      {
        uint64_t v27 = 0;
        uint64_t v17 = [v12 newRenderPipelineStateWithDescriptor:v10 error:&v27];
        id v18 = (id *)((char *)this + 344);
        uint64_t v19 = v27;
      }
      else
      {
        long long v26 = 0;
        uint64_t v17 = [v12 newRenderPipelineStateWithDescriptor:v10 error:&v26];
        id v18 = (id *)((char *)this + 328);
        uint64_t v19 = v26;
      }
    }
    else if (a3 >= 2)
    {
      uint64_t v29 = 0;
      uint64_t v17 = [v12 newRenderPipelineStateWithDescriptor:v10 error:&v29];
      id v18 = (id *)((char *)this + 352);
      uint64_t v19 = v29;
    }
    else
    {
      long long v28 = 0;
      uint64_t v17 = [v12 newRenderPipelineStateWithDescriptor:v10 error:&v28];
      id v18 = (id *)((char *)this + 336);
      uint64_t v19 = v28;
    }
    id v15 = v19;
    id v20 = *v18;
    *id v18 = (id)v17;

    id v8 = *v18;
    if (!v15)
    {
      uint64_t v16 = 0;
      goto LABEL_26;
    }
    WTFLogAlways();
    uint64_t v16 = v8;
LABEL_24:
    id v8 = 0;
LABEL_26:
  }
LABEL_27:
  return v8;
}

void sub_1824F3CE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824F3CFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824F3D14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebGPU::Device::indexedIndirectBufferClampPipeline(WebGPU::Device *this, unint64_t a2)
{
  if (!*((void *)this + 1))
  {
    id v5 = 0;
    goto LABEL_17;
  }
  uint64_t v4 = 360;
  if (a2 > 1) {
    uint64_t v4 = 368;
  }
  id v5 = *(id *)((char *)this + v4);
  if (!v5)
  {
    if (!WebGPU::Device::indexedIndirectBufferClampPipeline(unsigned long)::function)
    {
      uint64_t v6 = objc_opt_new();
      [v6 setFastMathEnabled:1];
      BOOL v14 = (void *)*((void *)this + 1);
      id v21 = 0;
      id v15 = objc_msgSend(v14, "newLibraryWithSource:options:error:", @"\n    using namespace metal;\n    [[vertex]] void vs(device const MTLDrawIndexedPrimitivesIndirectArguments& input [[buffer(0)]], device MTLDrawIndexedPrimitivesIndirectArguments& indexedOutput [[buffer(1)]], device MTLDrawPrimitivesIndirectArguments& output [[buffer(2)]], const constant uint* indexBufferCount [[buffer(3)]]) {\n\n        BOOL condition = input.indexCount + input.indexStart > indexBufferCount[0] || input.instanceCount + input.baseInstance > indexBufferCount[1] || input.baseInstance >= indexBufferCount[1];\n\n        indexedOutput.indexCount = metal::select(input.indexCount, 0u, condition);\n        indexedOutput.instanceCount = input.instanceCount;\n        indexedOutput.indexStart = metal::select(input.indexStart, 0u, condition);\n        indexedOutput.baseVertex = input.baseVertex;\n        indexedOutput.baseInstance = input.baseInstance;\n\n        output.vertexCount = metal::select(input.indexCount, 0u, condition);\n        output.instanceCount = 1;\n        output.vertexStart = input.indexStart;\n        output.baseInstance = 0;\n    }",
                      v6,
                      &v21);
      id v11 = v21;
      if (v11)
      {
        WTFLogAlways();

        uint64_t v13 = 0;
        goto LABEL_14;
      }
      uint64_t v17 = [v15 newFunctionWithName:@"vs"];
      id v18 = (void *)WebGPU::Device::indexedIndirectBufferClampPipeline(unsigned long)::function;
      WebGPU::Device::indexedIndirectBufferClampPipeline(unsigned long)::function = v17;
    }
    uint64_t v6 = objc_opt_new();
    [v6 setVertexFunction:WebGPU::Device::indexedIndirectBufferClampPipeline(unsigned long)::function];
    [v6 setRasterizationEnabled:0];
    [v6 setRasterSampleCount:a2];
    [v6 setFragmentFunction:0];
    [v6 setInputPrimitiveTopology:1];
    uint64_t v7 = (void *)*((void *)this + 1);
    if (a2 < 2)
    {
      uint64_t v19 = 0;
      uint64_t v8 = [v7 newRenderPipelineStateWithDescriptor:v6 error:&v19];
      id v9 = (id *)((char *)this + 360);
      uint64_t v10 = v19;
    }
    else
    {
      id v20 = 0;
      uint64_t v8 = [v7 newRenderPipelineStateWithDescriptor:v6 error:&v20];
      id v9 = (id *)((char *)this + 368);
      uint64_t v10 = v20;
    }
    id v11 = v10;
    id v12 = *v9;
    *id v9 = (id)v8;

    id v5 = *v9;
    if (!v11)
    {
      uint64_t v13 = 0;
      goto LABEL_16;
    }
    WTFLogAlways();
    uint64_t v13 = v5;
LABEL_14:
    id v5 = 0;
LABEL_16:
  }
LABEL_17:
  return v5;
}

void sub_1824F3F64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824F3F7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824F3F98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebGPU::Device::indirectBufferClampPipeline(WebGPU::Device *this, unint64_t a2)
{
  if (!*((void *)this + 1))
  {
    id v5 = 0;
    goto LABEL_17;
  }
  uint64_t v4 = 376;
  if (a2 > 1) {
    uint64_t v4 = 384;
  }
  id v5 = *(id *)((char *)this + v4);
  if (!v5)
  {
    if (!WebGPU::Device::indirectBufferClampPipeline(unsigned long)::function)
    {
      uint64_t v6 = objc_opt_new();
      [v6 setFastMathEnabled:1];
      BOOL v14 = (void *)*((void *)this + 1);
      id v21 = 0;
      id v15 = objc_msgSend(v14, "newLibraryWithSource:options:error:", @"\n    using namespace metal;\n    [[vertex]] void vs(device const MTLDrawPrimitivesIndirectArguments& input [[buffer(0)]], device MTLDrawPrimitivesIndirectArguments& output [[buffer(1)]], const constant uint* minCounts [[buffer(2)]]) {\n        BOOL vertexCondition = input.vertexCount + input.vertexStart > minCounts[0] || input.vertexStart >= minCounts[0];\n        BOOL instanceCondition = input.baseInstance + input.instanceCount > minCounts[1] || input.baseInstance >= minCounts[1];\n        BOOL condition = vertexCondition || instanceCondition;\n        output.vertexCount = metal::select(input.vertexCount, 0u, condition);\n        output.instanceCount = input.instanceCount;\n        output.vertexStart = input.vertexStart;\n        output.baseInstance = input.baseInstance;\n    }",
                      v6,
                      &v21);
      id v11 = v21;
      if (v11)
      {
        WTFLogAlways();

        uint64_t v13 = 0;
        goto LABEL_14;
      }
      uint64_t v17 = [v15 newFunctionWithName:@"vs"];
      id v18 = (void *)WebGPU::Device::indirectBufferClampPipeline(unsigned long)::function;
      WebGPU::Device::indirectBufferClampPipeline(unsigned long)::function = v17;
    }
    uint64_t v6 = objc_opt_new();
    [v6 setVertexFunction:WebGPU::Device::indirectBufferClampPipeline(unsigned long)::function];
    [v6 setRasterizationEnabled:0];
    [v6 setRasterSampleCount:a2];
    [v6 setFragmentFunction:0];
    [v6 setInputPrimitiveTopology:1];
    uint64_t v7 = (void *)*((void *)this + 1);
    if (a2 < 2)
    {
      uint64_t v19 = 0;
      uint64_t v8 = [v7 newRenderPipelineStateWithDescriptor:v6 error:&v19];
      id v9 = (id *)((char *)this + 376);
      uint64_t v10 = v19;
    }
    else
    {
      id v20 = 0;
      uint64_t v8 = [v7 newRenderPipelineStateWithDescriptor:v6 error:&v20];
      id v9 = (id *)((char *)this + 384);
      uint64_t v10 = v20;
    }
    id v11 = v10;
    id v12 = *v9;
    *id v9 = (id)v8;

    id v5 = *v9;
    if (!v11)
    {
      uint64_t v13 = 0;
      goto LABEL_16;
    }
    WTFLogAlways();
    uint64_t v13 = v5;
LABEL_14:
    id v5 = 0;
LABEL_16:
  }
LABEL_17:
  return v5;
}

void sub_1824F41E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824F4200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824F421C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebGPU::Device::icbCommandClampPipeline(WebGPU::Device *this, MTLIndexType a2, unint64_t a3)
{
  if (*((void *)this + 1))
  {
    uint64_t v6 = 400;
    if (a3 > 1) {
      uint64_t v6 = 416;
    }
    uint64_t v7 = 392;
    if (a3 > 1) {
      uint64_t v7 = 408;
    }
    if (a2) {
      uint64_t v6 = v7;
    }
    id v8 = *(id *)((char *)this + v6);
    if (!v8)
    {
      id v9 = objc_opt_new();
      uint64_t v10 = WebGPU::Device::icbCommandClampFunction(this, a2);
      [v9 setVertexFunction:v10];

      [v9 setRasterizationEnabled:0];
      [v9 setRasterSampleCount:a3];
      [v9 setFragmentFunction:0];
      [v9 setInputPrimitiveTopology:1];
      id v11 = (void *)*((void *)this + 1);
      if (a2)
      {
        if (a3 >= 2)
        {
          id v20 = 0;
          uint64_t v12 = [v11 newRenderPipelineStateWithDescriptor:v9 error:&v20];
          uint64_t v13 = (id *)((char *)this + 408);
          BOOL v14 = v20;
        }
        else
        {
          uint64_t v19 = 0;
          uint64_t v12 = [v11 newRenderPipelineStateWithDescriptor:v9 error:&v19];
          uint64_t v13 = (id *)((char *)this + 392);
          BOOL v14 = v19;
        }
      }
      else if (a3 >= 2)
      {
        uint64_t v22 = 0;
        uint64_t v12 = [v11 newRenderPipelineStateWithDescriptor:v9 error:&v22];
        uint64_t v13 = (id *)((char *)this + 416);
        BOOL v14 = v22;
      }
      else
      {
        id v21 = 0;
        uint64_t v12 = [v11 newRenderPipelineStateWithDescriptor:v9 error:&v21];
        uint64_t v13 = (id *)((char *)this + 400);
        BOOL v14 = v21;
      }
      id v15 = v14;
      id v16 = *v13;
      *uint64_t v13 = (id)v12;

      id v8 = *v13;
      if (v15)
      {
        WTFLogAlways();
        uint64_t v17 = v8;
        id v8 = 0;
      }
      else
      {
        uint64_t v17 = 0;
      }
    }
  }
  else
  {
    id v8 = 0;
  }
  return v8;
}

void sub_1824F4464(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824F4488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebGPU::Device::icbCommandClampFunction(WebGPU::Device *this, MTLIndexType a2)
{
  id v3 = (void *)qword_1EC00AD58;
  if (!qword_1EC00AD58)
  {
    uint64_t v6 = objc_opt_new();
    [v6 setFastMathEnabled:1];
    uint64_t v7 = (void *)*((void *)this + 1);
    id v15 = 0;
    id v8 = objc_msgSend(v7, "newLibraryWithSource:options:error:", @"\n    using namespace metal;\n    struct ICBContainer {\n        command_buffer commandBuffer [[ id(0) ]];\n    };\n    struct IndexDataUshort {\n        uint64_t renderCommand { 0 };\n        uint32_t minVertexCount { UINT_MAX };\n        uint32_t minInstanceCount { UINT_MAX };\n        device ushort* indexBuffer;\n        uint32_t indexCount { 0 };\n        uint32_t instanceCount { 0 };\n        uint32_t firstIndex { 0 };\n        int32_t baseVertex { 0 };\n        uint32_t baseInstance { 0 };\n        primitive_type primitiveType { primitive_type::triangle };\n    };\n    struct IndexDataUint {\n        uint64_t renderCommand { 0 };\n        uint32_t minVertexCount { UINT_MAX };\n        uint32_t minInstanceCount { UINT_MAX };\n        device uint* indexBuffer;\n        uint32_t indexCount { 0 };\n        uint32_t instanceCount { 0 };\n        uint32_t firstIndex { 0 };\n        int32_t baseVertex { 0 };\n        uint32_t baseInstance { 0 };\n        primitive_type primitiveType { primitive_type::triangle };\n    };\n\n    [[vertex]] void vs(device const IndexDataUint* indexData [[buffer(0)]],\n        device ICBContainer *icb_container [[buffer(1)]], // <-- must match Device::bufferIndexForICBContainer()\n        uint indexId [[vertex_id]]) {\n\n        device const IndexDataUint& data = *indexData;\n        uint32_t k = (data.primitiveType == primitive_type::triangle_strip || data.primitiveType == primitive_type::line_strip) ? 1 : 0;\n        uint32_t vertexIndex = data.indexBuffer[indexId] + k;\n        if (data.baseVertex + vertexIndex >= data.minVertexCount + k) {\n            render_command cmd(icb_container->commandBuffer, data.renderCommand);\n            cmd.draw_indexed_primitives(data.primitiveType,\n                0u,\n                data.indexBuffer,\n                data.instanceCount,\n                data.baseVertex,\n                data.baseInstance);\n        }\n    }\n\n    [[vertex]] void vsUshort(device const IndexDataUshort* indexData [[buffer(0)]],\n        device ICBContainer *icb_container [[buffer(1)]], // <-- must match Device::bufferIndexForICBContainer()\n        uint indexId [[vertex_id]]) {\n\n        device const IndexDataUshort& data = *indexData;\n        uint32_t k = (data.primitiveType == primitive_type::triangle_strip || data.primitiveType == primitive_type::line_strip) ? 1 : 0;\n        ushort vertexIndex = data.indexBuffer[indexId] + k;\n        if (data.baseVertex + vertexIndex >= data.minVertexCount + k) {\n            render_command cmd(icb_container->commandBuffer, data.renderCommand);\n            cmd.draw_indexed_primitives(data.primitiveType,\n                0u,\n                data.indexBuffer,\n                data.instanceCount,\n                data.baseVertex,\n                data.baseInstance);\n        }\n\n    }",
                   v6,
                   &v15);
    id v9 = v15;
    if (v9)
    {
      WTFLogAlways();

      id v4 = 0;
      goto LABEL_7;
    }
    uint64_t v11 = [v8 newFunctionWithName:@"vs"];
    uint64_t v12 = (void *)qword_1EC00AD58;
    qword_1EC00AD58 = v11;

    uint64_t v13 = [v8 newFunctionWithName:@"vsUshort"];
    BOOL v14 = (void *)qword_1EC00AD60;
    qword_1EC00AD60 = v13;

    id v3 = (void *)qword_1EC00AD58;
  }
  if (a2 == MTLIndexTypeUInt16) {
    id v3 = (void *)qword_1EC00AD60;
  }
  id v4 = v3;
LABEL_7:
  return v4;
}

void sub_1824F45C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824F45E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

atomic_uchar *volatile *wgpuDeviceReference(atomic_uchar *volatile *result)
{
  char v1 = 0;
  atomic_uchar *volatile v2 = *result;
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(*result, (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1)
  {
    uint64_t result = (atomic_uchar *volatile *)MEMORY[0x18530AEA0](v2);
    ++*((void *)v2 + 1);
    atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
    if (v3 == 1) {
      return result;
    }
  }
  else
  {
    ++*((void *)v2 + 1);
    atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
    if (v3 == 1) {
      return result;
    }
  }
  return (atomic_uchar *volatile *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
}

atomic_uchar *volatile *wgpuDeviceRelease(atomic_uchar *volatile *result, void *a2)
{
  char v2 = 0;
  atomic_uchar *volatile v3 = *result;
  atomic_compare_exchange_strong_explicit(*result, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2)
  {
    uint64_t result = (atomic_uchar *volatile *)MEMORY[0x18530AEA0](v3);
    uint64_t v11 = *((void *)v3 + 1);
    int v5 = 1;
    uint64_t v6 = v11 - 1;
    *((void *)v3 + 1) = v11 - 1;
    if (v11 != 1)
    {
LABEL_3:
      uint64_t v7 = 0;
      BOOL v8 = 1;
      atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
      if (v5 == 1) {
        goto LABEL_4;
      }
LABEL_14:
      uint64_t result = (atomic_uchar *volatile *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
      if (v6) {
        return result;
      }
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v4 = *((void *)v3 + 1);
    int v5 = 1;
    uint64_t v6 = v4 - 1;
    *((void *)v3 + 1) = v4 - 1;
    if (v4 != 1) {
      goto LABEL_3;
    }
  }
  uint64_t v12 = *((void *)v3 + 2);
  uint64_t v7 = (WebGPU::Device *)*((void *)v3 + 3);
  *((void *)v3 + 3) = 0;
  BOOL v8 = v12 != 0;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1) {
    goto LABEL_14;
  }
LABEL_4:
  if (v6) {
    return result;
  }
LABEL_5:
  if (v7)
  {
    WebGPU::Device::~Device(v7, a2);
    uint64_t result = (atomic_uchar *volatile *)WTF::fastFree(v9, v10);
  }
  if (!v8)
  {
    return (atomic_uchar *volatile *)WTF::fastFree((WTF *)v3, a2);
  }
  return result;
}

uint64_t wgpuDeviceCreateBindGroup(uint64_t a1, void *a2)
{
  WebGPU::Device::createBindGroup(a1, a2, &v3);
  return v3;
}

uint64_t wgpuDeviceCreateBindGroupLayout(uint64_t a1, uint64_t a2)
{
  WebGPU::Device::createBindGroupLayout(a1, a2, 0, (WebGPU::BindGroupLayout *)&v3);
  return v3;
}

WebGPU::XRBinding *wgpuDeviceCreateXRBinding(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    WebGPU::XRBinding::create((atomic_uchar *volatile *)a1, (uint64_t *)&v2);
  }
  else {
    WebGPU::XRBinding::createInvalid((atomic_uchar *volatile *)a1, (uint64_t *)&v2);
  }
  return v2;
}

uint64_t wgpuDeviceCreateBuffer(uint64_t a1, uint64_t a2)
{
  WebGPU::Device::createBuffer(a1, a2, &v3);
  return v3;
}

uint64_t wgpuDeviceCreateCommandEncoder(uint64_t a1, void *a2)
{
  WebGPU::Device::createCommandEncoder(a1, a2, &v3);
  return v3;
}

WebGPU::ComputePipeline *wgpuDeviceCreateComputePipeline(WebGPU::Device *a1, uint64_t a2)
{
  WebGPU::Device::createComputePipeline(a1, a2, 0, v8);
  char v2 = v8[0];
  v8[0] = 0;

  uint64_t v4 = v8[0];
  v8[0] = 0;
  if (!v4) {
    return v2;
  }
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    return v2;
  }
  WebGPU::ComputePipeline::~ComputePipeline(v4, v3);
  WTF::fastFree(v6, v7);
  return v2;
}

WebGPU::ComputePipeline *wgpuDeviceCreateComputePipelineAsync(WebGPU::Device *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v8 = (WebGPU::ComputePipeline *)WTF::fastMalloc((WTF *)0x18);
  *(void *)BOOL v8 = &unk_1ECABAC90;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 2) = a4;
  uint64_t v10 = v8;
  WebGPU::Device::createComputePipelineAsync(a1, a2, &v10);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result) {
    return (WebGPU::ComputePipeline *)(*(uint64_t (**)(WebGPU::ComputePipeline *))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1824F497C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t wgpuDeviceCreatePipelineLayout(uint64_t a1, void *a2)
{
  WebGPU::Device::createPipelineLayout(a1, a2, (NSString *)(a2[3] == 0), (WebGPU::PipelineLayout *)&v3);
  return v3;
}

uint64_t wgpuDeviceCreateQuerySet(uint64_t a1, uint64_t a2)
{
  WebGPU::Device::createQuerySet(a1, a2, &v3);
  return v3;
}

uint64_t wgpuDeviceCreateRenderBundleEncoder(uint64_t a1, long long *a2)
{
  WebGPU::Device::createRenderBundleEncoder(a1, a2, (WebGPU::RenderBundleEncoder *)&v3);
  return v3;
}

WebGPU::RenderPipeline *wgpuDeviceCreateRenderPipeline(uint64_t a1, uint64_t a2)
{
  WebGPU::Device::createRenderPipeline(a1, a2, 0, v8);
  char v2 = v8[0];
  v8[0] = 0;

  uint64_t v4 = v8[0];
  v8[0] = 0;
  if (!v4) {
    return v2;
  }
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    return v2;
  }
  WebGPU::RenderPipeline::~RenderPipeline(v4, v3);
  WTF::fastFree(v6, v7);
  return v2;
}

uint64_t wgpuDeviceCreateRenderPipelineAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v8 = (void *)WTF::fastMalloc((WTF *)0x18);
  *BOOL v8 = &unk_1ECABACB8;
  v8[1] = a3;
  v8[2] = a4;
  uint64_t v10 = v8;
  WebGPU::Device::createRenderPipelineAsync(a1, a2, (uint64_t *)&v10);
  uint64_t result = (uint64_t)v10;
  uint64_t v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1824F4B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

WebGPU::Sampler *wgpuDeviceCreateSampler(atomic_uchar *volatile *a1, const WGPUSamplerDescriptor *a2)
{
  WebGPU::Device::createSampler(a1, a2, &v3);
  return v3;
}

WebGPU::ExternalTexture *wgpuDeviceImportExternalTexture(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v3 = *(__CVBuffer **)(a2 + 16);
    int v4 = *(_DWORD *)(a2 + 24);
    int v5 = (WebGPU::ExternalTexture *)WTF::fastMalloc((WTF *)0x40);
    WebGPU::ExternalTexture::ExternalTexture(v5, v3, v4, (atomic_uchar *volatile *)a1);
  }
  else
  {
    int v5 = (WebGPU::ExternalTexture *)WTF::fastMalloc((WTF *)0x40);
    WebGPU::ExternalTexture::ExternalTexture(v5, (atomic_uchar *volatile *)a1);
  }
  return v5;
}

void sub_1824F4C30(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1824F4C44(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t wgpuDeviceCreateShaderModule(int32x2_t *a1, uint64_t *a2)
{
  WebGPU::Device::createShaderModule(a1, a2, &v3);
  return v3;
}

_DWORD *wgpuDeviceCreateSwapChain(uint64_t a1, _DWORD *a2)
{
  return a2;
}

uint64_t wgpuDeviceCreateTexture(WebGPU::Texture *a1, uint64_t a2)
{
  WebGPU::Device::createTexture(a1, a2, &v3);
  return v3;
}

void wgpuDeviceDestroy(uint64_t a1)
{
  *(unsigned char *)(a1 + 73) = 1;
  WebGPU::Device::loseTheDevice(a1, 1);
}

uint64_t wgpuDeviceEnumerateFeatures(uint64_t a1, void *__dst)
{
  if (__dst)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 244);
    if (v3) {
      memmove(__dst, *(const void **)(a1 + 232), 4 * v3);
    }
  }
  return *(unsigned int *)(a1 + 244);
}

uint64_t wgpuDeviceGetLimits(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2) {
    return 0;
  }
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 88);
  long long v3 = *(_OWORD *)(a1 + 104);
  long long v4 = *(_OWORD *)(a1 + 120);
  long long v5 = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 56) = v5;
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  long long v6 = *(_OWORD *)(a1 + 168);
  long long v7 = *(_OWORD *)(a1 + 184);
  long long v8 = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 216);
  *(_OWORD *)(a2 + 120) = v8;
  *(_OWORD *)(a2 + 104) = v7;
  *(_OWORD *)(a2 + 88) = v6;
  return 1;
}

uint64_t wgpuDeviceGetQueue(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t wgpuDeviceHasFeature(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 244);
  if (!v2) {
    return 0;
  }
  long long v3 = *(int **)(a1 + 232);
  while (1)
  {
    int v4 = *v3++;
    if (v4 == a2) {
      break;
    }
    if (!--v2) {
      return 0;
    }
  }
  return 1;
}

_DWORD *wgpuDevicePopErrorScope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  *long long v6 = &unk_1ECABACE0;
  v6[1] = a2;
  unsigned char v6[2] = a3;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v7 = 0;
    goto LABEL_3;
  }
  uint64_t v10 = *(unsigned int *)(a1 + 44);
  if (!v10)
  {
    uint64_t v7 = 4;
LABEL_3:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(void *, uint64_t, _DWORD **))(*v6 + 16))(v6, v7, &v39);
    (*(void (**)(void *))(*v6 + 8))(v6);
    uint64_t result = v39;
    long long v39 = 0;
    if (!result) {
      return result;
    }
    int v9 = *result - 2;
    if (*result != 2) {
      goto LABEL_5;
    }
    return (_DWORD *)WTF::StringImpl::destroy();
  }
  uint64_t v11 = v10 - 1;
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = (int *)(v12 + 32 * v11);
  LOBYTE(v45) = 0;
  unsigned __int8 v47 = 0;
  if (!*((unsigned char *)v13 + 16))
  {
    int v48 = v13[6];
    goto LABEL_16;
  }
  int v45 = *v13;
  BOOL v14 = (_DWORD *)*((void *)v13 + 1);
  *((void *)v13 + 1) = 0;
  uint64_t v46 = v14;
  unsigned __int8 v47 = 1;
  uint64_t v15 = *(void *)(a1 + 32);
  int v16 = *(unsigned __int8 *)(v15 + 32 * v11 + 16);
  int v48 = *(_DWORD *)(v12 + 32 * v11 + 24);
  if (!v16 || (uint64_t v17 = v15 + 32 * v11, v18 = *(_DWORD **)(v17 + 8), *(void *)(v17 + 8) = 0, !v18))
  {
LABEL_16:
    *(_DWORD *)(a1 + 44) = v11;
    uint64_t v19 = *(void *)(a1 + 448);
    if (!v19) {
      goto LABEL_36;
    }
    goto LABEL_17;
  }
  if (*v18 == 2)
  {
    WTF::StringImpl::destroy();
    *(_DWORD *)(a1 + 44) = v11;
    uint64_t v19 = *(void *)(a1 + 448);
    if (!v19) {
      goto LABEL_36;
    }
  }
  else
  {
    *v18 -= 2;
    *(_DWORD *)(a1 + 44) = v11;
    uint64_t v19 = *(void *)(a1 + 448);
    if (!v19) {
      goto LABEL_36;
    }
  }
LABEL_17:
  char v20 = 0;
  uint64_t v21 = *(void *)(a1 + 456);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v19, (unsigned __int8 *)&v20, 1u, memory_order_acquire, memory_order_acquire);
  if (v20) {
    MEMORY[0x18530AEA0](v19);
  }
  if (*(void *)(v19 + 24))
  {
    ++*(void *)(v19 + 8);
    int v22 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v19, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
    if (v22 == 1) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v21 = 0;
    int v29 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v19, (unsigned __int8 *)&v29, 0, memory_order_release, memory_order_relaxed);
    if (v29 == 1)
    {
LABEL_21:
      if (!v21) {
        goto LABEL_36;
      }
      goto LABEL_22;
    }
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v19);
  if (!v21)
  {
LABEL_36:
    long long v39 = 0;
    (*(void (**)(void *, void, _DWORD **))(*v6 + 16))(v6, 0, &v39);
    (*(void (**)(void *))(*v6 + 8))(v6);
    uint64_t result = v39;
    long long v39 = 0;
    if (result)
    {
      if (*result == 2) {
        uint64_t result = (_DWORD *)WTF::StringImpl::destroy();
      }
      else {
        *result -= 2;
      }
    }
    goto LABEL_49;
  }
LABEL_22:
  LOBYTE(v39) = 0;
  char v41 = 0;
  int v23 = v47;
  if (v47)
  {
    LODWORD(v39) = v45;
    uint64_t v24 = v46;
    uint64_t v46 = 0;
    id v40 = v24;
    char v41 = 1;
  }
  int v25 = v48;
  int v42 = v48;
  unint64_t v43 = v6;
  uint64_t v26 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v26 = &unk_1ECABAC68;
  *(unsigned char *)(v26 + 8) = 0;
  *(unsigned char *)(v26 + 24) = 0;
  if (v23)
  {
    *(_DWORD *)(v26 + 8) = v39;
    uint64_t v27 = v40;
    id v40 = 0;
    *(void *)(v26 + 16) = v27;
    *(unsigned char *)(v26 + 24) = 1;
  }
  *(_DWORD *)(v26 + 32) = v25;
  unint64_t v43 = 0;
  uint64_t v44 = (_DWORD *)v26;
  *(void *)(v26 + 40) = v6;
  WebGPU::Instance::scheduleWork(v21, (uint64_t *)&v44);
  uint64_t result = v44;
  if (v44) {
    uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)v44 + 8))(v44);
  }
  if (v23)
  {
    uint64_t result = v40;
    if (v40)
    {
      if (*v40 == 2) {
        uint64_t result = (_DWORD *)WTF::StringImpl::destroy();
      }
      else {
        *v40 -= 2;
      }
    }
  }
  char v30 = 0;
  uint64_t v31 = *(void *)(v21 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v31, (unsigned __int8 *)&v30, 1u, memory_order_acquire, memory_order_acquire);
  if (v30)
  {
    uint64_t result = (_DWORD *)MEMORY[0x18530AEA0](v31);
    uint64_t v37 = *(void *)(v31 + 8);
    int v33 = 1;
    uint64_t v34 = v37 - 1;
    *(void *)(v31 + 8) = v37 - 1;
    if (v37 != 1)
    {
LABEL_43:
      uint64_t v35 = 0;
      BOOL v36 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v31, (unsigned __int8 *)&v33, 0, memory_order_release, memory_order_relaxed);
      if (v33 == 1) {
        goto LABEL_44;
      }
      goto LABEL_55;
    }
  }
  else
  {
    uint64_t v32 = *(void *)(v31 + 8);
    int v33 = 1;
    uint64_t v34 = v32 - 1;
    *(void *)(v31 + 8) = v32 - 1;
    if (v32 != 1) {
      goto LABEL_43;
    }
  }
  uint64_t v38 = *(void *)(v31 + 16);
  uint64_t v35 = *(void *)(v31 + 24);
  *(void *)(v31 + 24) = 0;
  BOOL v36 = v38 != 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v31, (unsigned __int8 *)&v33, 0, memory_order_release, memory_order_relaxed);
  if (v33 == 1)
  {
LABEL_44:
    if (v34) {
      goto LABEL_49;
    }
    goto LABEL_45;
  }
LABEL_55:
  uint64_t result = (_DWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v31);
  if (v34) {
    goto LABEL_49;
  }
LABEL_45:
  if (v35) {
    uint64_t result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  if (!v36) {
    uint64_t result = (_DWORD *)WTF::fastFree((WTF *)v31, v28);
  }
LABEL_49:
  if (v47)
  {
    uint64_t result = v46;
    if (v46)
    {
      int v9 = *v46 - 2;
      if (*v46 != 2)
      {
LABEL_5:
        *uint64_t result = v9;
        return result;
      }
      return (_DWORD *)WTF::StringImpl::destroy();
    }
  }
  return result;
}

void sub_1824F5284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  WebGPU::Device::ErrorScope::~ErrorScope((WebGPU::Device::ErrorScope *)va);
  (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  _Unwind_Resume(a1);
}

unint64_t wgpuDevicePushErrorScope(unint64_t result, int a2)
{
  unint64_t v2 = result;
  v8[0] = 0;
  unsigned __int8 v10 = 0;
  int v11 = a2;
  uint64_t v3 = *(unsigned int *)(result + 44);
  if (v3 == *(_DWORD *)(result + 40))
  {
    uint64_t result = WTF::Vector<WebGPU::Device::ErrorScope,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result + 32, v3 + 1, (unint64_t)v8);
    uint64_t v4 = *(void *)(v2 + 32) + 32 * *(unsigned int *)(v2 + 44);
    *(unsigned char *)uint64_t v4 = 0;
    *(unsigned char *)(v4 + 16) = 0;
    if (*(unsigned char *)(result + 16))
    {
      *(_DWORD *)uint64_t v4 = *(_DWORD *)result;
      uint64_t v5 = *(void *)(result + 8);
      *(void *)(result + 8) = 0;
      *(void *)(v4 + 8) = v5;
      *(unsigned char *)(v4 + 16) = 1;
    }
    *(_DWORD *)(v4 + 24) = *(_DWORD *)(result + 24);
    int v6 = v10;
    ++*(_DWORD *)(v2 + 44);
    if (v6)
    {
      uint64_t result = v9;
      unint64_t v9 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return WTF::StringImpl::destroy();
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    uint64_t v7 = *(void *)(result + 32) + 32 * v3;
    *(unsigned char *)uint64_t v7 = 0;
    *(unsigned char *)(v7 + 16) = 0;
    *(_DWORD *)(v7 + 24) = a2;
    ++*(_DWORD *)(result + 44);
  }
  return result;
}

void sub_1824F54EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10, char a11)
{
  if (a11 && a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t wgpuDeviceClearDeviceLostCallback(uint64_t a1)
{
  uint64_t v3 = 0;
  WebGPU::Device::setDeviceLostCallback(a1, &v3);
  uint64_t result = v3;
  if (v3)
  {
    unint64_t v2 = *(uint64_t (**)(void))(*(void *)v3 + 8);
    return v2();
  }
  return result;
}

void sub_1824F55A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t wgpuDeviceClearUncapturedErrorCallback(uint64_t a1)
{
  uint64_t v3 = 0;
  WebGPU::Device::setUncapturedErrorCallback(a1, &v3);
  uint64_t result = v3;
  if (v3)
  {
    unint64_t v2 = *(uint64_t (**)(void))(*(void *)v3 + 8);
    return v2();
  }
  return result;
}

void sub_1824F5650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t wgpuDeviceSetDeviceLostCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  *int v6 = &unk_1ECABAD08;
  v6[1] = a2;
  unsigned char v6[2] = a3;
  unint64_t v9 = v6;
  WebGPU::Device::setDeviceLostCallback(a1, (uint64_t *)&v9);
  uint64_t result = (uint64_t)v9;
  if (v9)
  {
    long long v8 = *(uint64_t (**)(void))(*v9 + 8);
    return v8();
  }
  return result;
}

void sub_1824F5744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void wgpuDeviceSetDeviceLostCallbackWithBlock(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = MEMORY[0x18530B4C0]();
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v4 = &unk_1ECABAD30;
  v4[1] = v3;
  int v6 = v4;
  WebGPU::Device::setDeviceLostCallback(a1, (uint64_t *)&v6);
  if (v6) {
    (*(void (**)(void *))(*v6 + 8))(v6);
  }
}

void sub_1824F5828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }

  _Unwind_Resume(a1);
}

void sub_1824F5870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

uint64_t wgpuDeviceSetUncapturedErrorCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  *int v6 = &unk_1ECABAD58;
  v6[1] = a2;
  unsigned char v6[2] = a3;
  unint64_t v9 = v6;
  WebGPU::Device::setUncapturedErrorCallback(a1, (uint64_t *)&v9);
  uint64_t result = (uint64_t)v9;
  if (v9)
  {
    long long v8 = *(uint64_t (**)(void))(*v9 + 8);
    return v8();
  }
  return result;
}

void sub_1824F5944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *wgpuDeviceSetLabel(int a1, char *__s)
{
  if (__s) {
    strlen(__s);
  }
  WTF::String::fromUTF8();
  uint64_t result = v3;
  if (v3)
  {
    if (*v3 == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *v3 -= 2;
    }
  }
  return result;
}

void WebGPU::GPUFrameCapture::captureFrame(void *a1)
{
  id v1 = a1;
  unint64_t v2 = [MEMORY[0x1E4F351E0] sharedCaptureManager];
  if (([v2 isCapturing] & 1) == 0)
  {
    id v3 = objc_alloc_init(MEMORY[0x1E4F351D8]);
    [v3 setCaptureObject:v1];
    [v3 setDestination:2];
    uint64_t v4 = [MEMORY[0x1E4F28CB8] defaultManager];
    id v5 = [v4 temporaryDirectory];
    int v6 = NSString;
    uint64_t v7 = [MEMORY[0x1E4F29128] UUID];
    long long v8 = [v7 UUIDString];
    unint64_t v9 = [v6 stringWithFormat:@"%@.gputrace", v8];
    unsigned __int8 v10 = [v5 URLByAppendingPathComponent:v9];
    [v3 setOutputURL:v10];

    id v14 = 0;
    [v2 startCaptureWithDescriptor:v3 error:&v14];
    id v11 = v14;
    uint64_t v12 = [v3 outputURL];
    uint64_t v13 = [v12 absoluteString];
    WTFLogAlways();
  }
}

void sub_1824F5BC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824F5C70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824F5C84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824F5C94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WebGPU::GPUFrameCapture::registerForFrameCapture(objc_object  {objcproto9MTLDevice}*)::{lambda(void)#1} &&>>()
{
  int out_token = 0;
  v0 = MEMORY[0x1E4F14428];
  notify_register_dispatch("com.apple.WebKit.WebGPU.CaptureFrame", &out_token, MEMORY[0x1E4F14428], &__block_literal_global);
  int v1 = 0;
  notify_register_dispatch("com.apple.WebKit.WebGPU.ToggleCaptureFirstFrame", &v1, v0, &__block_literal_global_40);
}

void sub_1824F5D24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZZN6WebGPU15GPUFrameCapture23registerForFrameCaptureEPU19objcproto9MTLDevice11objc_objectENKUlvE_clEv_block_invoke(int a1, int token)
{
  uint64_t state64 = 0;
  uint64_t result = notify_get_state(token, &state64);
  int v3 = state64;
  if ((int)state64 <= 1) {
    int v3 = 1;
  }
  WebGPU::GPUFrameCapture::maxSubmitCallsToCapture = v3;
  WebGPU::GPUFrameCapture::enabled = 1;
  return result;
}

void ___ZZN6WebGPU15GPUFrameCapture23registerForFrameCaptureEPU19objcproto9MTLDevice11objc_objectENKUlvE_clEv_block_invoke_2()
{
  _MergedGlobals ^= 1u;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::Device::popErrorScope(WTF::CompletionHandler<void ()(WGPUErrorType,WTF::String &&)> &&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1ECABAC68;
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (!*(unsigned char *)(a1 + 24)) {
    return a1;
  }
  int v3 = *(_DWORD **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (!v3) {
    return a1;
  }
  if (*v3 != 2)
  {
    *v3 -= 2;
    return a1;
  }
  WTF::StringImpl::destroy();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::Device::popErrorScope(WTF::CompletionHandler<void ()(WGPUErrorType,WTF::String &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1ECABAC68;
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (!*((unsigned char *)this + 24)) {
    goto LABEL_7;
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v4) {
    goto LABEL_7;
  }
  if (*v4 != 2)
  {
    *v4 -= 2;
LABEL_7:
    id v5 = this;
    return WTF::fastFree(v5, a2);
  }
  WTF::StringImpl::destroy();
  id v5 = this;
  return WTF::fastFree(v5, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WebGPU::Device::popErrorScope(WTF::CompletionHandler<void ()(WGPUErrorType,WTF::String &&)> &&)::$_0,void>::call(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v1 = *(unsigned int *)(a1 + 8);
    uint64_t v2 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1, a1 + 16);
    uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);
    return (_DWORD *)v3(v2);
  }
  else
  {
    int v6 = 0;
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, void, _DWORD **))(*(void *)v5 + 16))(v5, 0, &v6);
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    uint64_t result = v6;
    int v6 = 0;
    if (result)
    {
      if (*result == 2) {
        return (_DWORD *)WTF::StringImpl::destroy();
      }
      else {
        *result -= 2;
      }
    }
  }
  return result;
}

void sub_1824F6048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  uint64_t v11 = v10;
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *a10 -= 2;
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

unint64_t WTF::Vector<WebGPU::Device::ErrorScope,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WebGPU::Device::ErrorScope,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebGPU::Device::ErrorScope,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
}

uint64_t WTF::Vector<WebGPU::Device::ErrorScope,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v3 = result;
      uint64_t v4 = *(WTF **)result;
      uint64_t v5 = *(unsigned int *)(result + 12);
      uint64_t result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(void *)uint64_t v3 = result;
      if (v5)
      {
        uint64_t v7 = result;
        uint64_t v8 = 0;
        uint64_t v9 = 32 * v5;
        do
        {
          uint64_t v10 = v7 + v8;
          *(unsigned char *)uint64_t v10 = 0;
          *(unsigned char *)(v10 + 16) = 0;
          unint64_t v11 = (char *)v4 + v8;
          if (*((unsigned char *)v4 + v8 + 16))
          {
            *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
            uint64_t v12 = *((void *)v11 + 1);
            *((void *)v11 + 1) = 0;
            *(void *)(v10 + 8) = v12;
            *(unsigned char *)(v10 + 16) = 1;
            LODWORD(v12) = v11[16];
            *(_DWORD *)(v10 + 24) = *((_DWORD *)v11 + 6);
            if (v12)
            {
              uint64_t result = *((void *)v11 + 1);
              *((void *)v11 + 1) = 0;
              if (result)
              {
                if (*(_DWORD *)result == 2) {
                  uint64_t result = WTF::StringImpl::destroy();
                }
                else {
                  *(_DWORD *)result -= 2;
                }
              }
            }
          }
          else
          {
            *(_DWORD *)(v10 + 24) = *((_DWORD *)v11 + 6);
          }
          v8 += 32;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)uint64_t v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<wgpuDeviceCreateComputePipelineAsync::$_0,void,WGPUCreatePipelineAsyncStatus,WTF::Ref<WebGPU::ComputePipeline,WTF::RawPtrTraits<WebGPU::ComputePipeline>,WTF::DefaultRefDerefTraits<WebGPU::ComputePipeline>> &&,WTF::String &&>::call(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(a1 + 8);
  uint64_t v6 = *a3;
  *a3 = 0;
  return v5(a2, v6, a4, *(void *)(a1 + 16));
}

uint64_t WTF::Detail::CallableWrapper<wgpuDeviceCreateRenderPipelineAsync::$_0,void,WGPUCreatePipelineAsyncStatus,WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>> &&,WTF::String &&>::call(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(a1 + 8);
  uint64_t v6 = *a3;
  *a3 = 0;
  return v5(a2, v6, a4, *(void *)(a1 + 16));
}

uint64_t WTF::Detail::CallableWrapper<wgpuDevicePopErrorScope::$_0,void,WGPUErrorType,WTF::String &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t, char *, void))(a1 + 8);
  WTF::String::utf8();
  if (v8) {
    uint64_t v5 = (char *)v8 + 16;
  }
  else {
    uint64_t v5 = 0;
  }
  v4(a2, v5, *(void *)(a1 + 16));
  uint64_t result = (uint64_t)v8;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1) {
      return WTF::fastFree(v8, v6);
    }
    else {
      --*(_DWORD *)v8;
    }
  }
  return result;
}

void sub_1824F63BC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 != 1)
    {
      --*(_DWORD *)a10;
      _Unwind_Resume(exception_object);
    }
    WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<wgpuDeviceSetDeviceLostCallback(WGPUDeviceImpl *,void (*)(WGPUDeviceLostReason,char const*,void *),void *)::$_0,void,WGPUDeviceLostReason,WTF::String &&>::call(uint64_t result, uint64_t a2)
{
  int v2 = *(void (**)(uint64_t, char *, void))(result + 8);
  if (v2)
  {
    uint64_t v4 = result;
    WTF::String::utf8();
    if (v7) {
      uint64_t v5 = (char *)v7 + 16;
    }
    else {
      uint64_t v5 = 0;
    }
    v2(a2, v5, *(void *)(v4 + 16));
    uint64_t result = (uint64_t)v7;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1) {
        return WTF::fastFree(v7, v6);
      }
      else {
        --*(_DWORD *)v7;
      }
    }
  }
  return result;
}

void sub_1824F6494(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 != 1)
    {
      --*(_DWORD *)a10;
      _Unwind_Resume(exception_object);
    }
    WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<wgpuDeviceSetDeviceLostCallbackWithBlock(WGPUDeviceImpl *,void({block_pointer})(WGPUDeviceLostReason,char const*))::$_0,void,WGPUDeviceLostReason,WTF::String &&>::~CallableWrapper(uint64_t a1)
{
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<wgpuDeviceSetDeviceLostCallbackWithBlock(WGPUDeviceImpl *,void({block_pointer})(WGPUDeviceLostReason,char const*))::$_0,void,WGPUDeviceLostReason,WTF::String &&>::~CallableWrapper(id *a1)
{
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<wgpuDeviceSetDeviceLostCallbackWithBlock(WGPUDeviceImpl *,void({block_pointer})(WGPUDeviceLostReason,char const*))::$_0,void,WGPUDeviceLostReason,WTF::String &&>::call(uint64_t result)
{
  if (*(void *)(result + 8))
  {
    uint64_t v1 = result;
    WTF::String::utf8();
    (*(void (**)(void))(*(void *)(v1 + 8) + 16))();
    uint64_t result = (uint64_t)v3;
    if (v3)
    {
      if (*(_DWORD *)v3 == 1) {
        return WTF::fastFree(v3, v2);
      }
      else {
        --*(_DWORD *)v3;
      }
    }
  }
  return result;
}

void sub_1824F65C8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 != 1)
    {
      --*(_DWORD *)a10;
      _Unwind_Resume(exception_object);
    }
    WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<wgpuDeviceSetUncapturedErrorCallback::$_0,void,WGPUErrorType,WTF::String &&>::call(uint64_t result, uint64_t a2)
{
  int v2 = *(void (**)(uint64_t, char *, void))(result + 8);
  if (v2)
  {
    uint64_t v4 = result;
    WTF::String::utf8();
    if (v7) {
      uint64_t v5 = (char *)v7 + 16;
    }
    else {
      uint64_t v5 = 0;
    }
    v2(a2, v5, *(void *)(v4 + 16));
    uint64_t result = (uint64_t)v7;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1) {
        return WTF::fastFree(v7, v6);
      }
      else {
        --*(_DWORD *)v7;
      }
    }
  }
  return result;
}

void sub_1824F66A0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 != 1)
    {
      --*(_DWORD *)a10;
      _Unwind_Resume(exception_object);
    }
    WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

WebGPU::ExternalTexture *WebGPU::ExternalTexture::ExternalTexture(WebGPU::ExternalTexture *this, CVPixelBufferRef pixelBuffer, int a3, atomic_uchar *volatile *a4)
{
  *(_DWORD *)this = 1;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = pixelBuffer;
  if (pixelBuffer) {
    CFRetain(pixelBuffer);
  }
  char v8 = 0;
  *((_DWORD *)this + 6) = a3;
  atomic_uchar *volatile v9 = *a4;
  atomic_compare_exchange_strong_explicit(*a4, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
  if (v8) {
    MEMORY[0x18530AEA0](v9);
  }
  ++*((void *)v9 + 1);
  int v10 = 1;
  atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  }
  *((void *)this + 4) = a4;
  *((unsigned char *)this + 40) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  WebGPU::ExternalTexture::update(this, pixelBuffer);
  return this;
}

void sub_1824F67AC(_Unwind_Exception *a1, void *a2)
{
  uint64_t v5 = *(const void **)(v3 + 16);
  *(void *)(v3 + 16) = 0;
  if (v5) {
    CFRelease(v5);
  }
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v2, a2);
  _Unwind_Resume(a1);
}

void WebGPU::ExternalTexture::update(WebGPU::ExternalTexture *this, CVPixelBufferRef pixelBuffer)
{
  if (CVPixelBufferGetIOSurface(pixelBuffer))
  {
    WebGPU::Device::webProcessID(*((void *)this + 4), v4, &v11);
    if (v12)
    {
      if (!v11 || (IOSurfaceSetOwnershipIdentity(), v12)) {
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v11);
      }
    }
  }
  if (pixelBuffer) {
    CFRetain(pixelBuffer);
  }
  uint64_t v5 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = pixelBuffer;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (unsigned int **)*((void *)this + 6);
  if (v6)
  {
    *((void *)this + 6) = 0;
    uint64_t v7 = *((unsigned int *)v6 - 1);
    if (v7)
    {
      char v8 = v6;
      do
      {
        atomic_uchar *volatile v9 = *v8;
        if (*v8 != (unsigned int *)-1)
        {
          *char v8 = 0;
          if (v9)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v9);
              WTF::fastFree((WTF *)v9, v4);
            }
          }
        }
        ++v8;
        --v7;
      }
      while (v7);
    }
    WTF::fastFree((WTF *)(v6 - 2), v4);
    uint64_t v10 = *((void *)this + 6);
    *((_DWORD *)this + 14) = 0;
    if (v10)
    {
      LODWORD(v10) = *(_DWORD *)(v10 - 12);
      if (v10 > 0x7FFFFFFE) {
        LODWORD(v10) = 0x7FFFFFFF;
      }
    }
  }
  else
  {
    LODWORD(v10) = 0;
    *((_DWORD *)this + 14) = 0;
  }
  *((_DWORD *)this + 15) = 2 * v10;
  *((unsigned char *)this + 40) = 0;
}

void sub_1824F693C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, __int16 a11, char a12, char a13)
{
  if (a12) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);
  }
  _Unwind_Resume(exception_object);
}

WebGPU::ExternalTexture *WebGPU::ExternalTexture::ExternalTexture(WebGPU::ExternalTexture *this, atomic_uchar *volatile *a2)
{
  char v4 = 0;
  int v5 = 1;
  *(_DWORD *)this = 1;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  atomic_uchar *volatile v6 = *a2;
  atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x18530AEA0](v6);
  }
  ++*((void *)v6 + 1);
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  *((void *)this + 4) = a2;
  *((unsigned char *)this + 40) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  return this;
}

void sub_1824F69F4(_Unwind_Exception *exception_object, void *a2)
{
  int v5 = *(const void **)(v2 + 16);
  *(void *)(v2 + 16) = 0;
  if (v5) {
    CFRelease(v5);
  }
  if (!*v3)
  {
    *uint64_t v3 = 0;
    _Unwind_Resume(exception_object);
  }
  *((void *)*v3 + 1) = 0;
  atomic_uchar *volatile v6 = *v3;
  *uint64_t v3 = 0;
  if (v6)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebGPU::ExternalTexture::~ExternalTexture(WebGPU::ExternalTexture *this, void *a2)
{
  uint64_t v3 = *((void *)this + 6);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      int v5 = (unsigned int **)*((void *)this + 6);
      do
      {
        atomic_uchar *volatile v6 = *v5;
        if (*v5 != (unsigned int *)-1)
        {
          *int v5 = 0;
          if (v6)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v6);
              WTF::fastFree((WTF *)v6, a2);
            }
          }
        }
        ++v5;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)this + 4, a2);
  char v8 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = *((void *)this + 1);
  if (v9)
  {
    *(void *)(v9 + 8) = 0;
    uint64_t v10 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v10)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v7);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

_DWORD *wgpuExternalTextureReference(_DWORD *result)
{
  return result;
}

WebGPU::ExternalTexture *wgpuExternalTextureRelease(WebGPU::ExternalTexture *result, void *a2)
{
  if (*(_DWORD *)result == 1)
  {
    WebGPU::ExternalTexture::~ExternalTexture(result, a2);
    return (WebGPU::ExternalTexture *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void wgpuExternalTextureDestroy(uint64_t a1, void *a2)
{
  uint64_t v3 = *(const void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    CFRelease(v3);
  }
  *(unsigned char *)(a1 + 40) = 1;
  uint64_t v4 = *(unsigned int ***)(a1 + 48);
  if (!v4)
  {
    atomic_uchar *volatile v6 = 0;
    uint64_t v5 = 0;
LABEL_12:
    char v8 = v6;
    atomic_uchar *volatile v6 = &v4[v5];
    if (!v4)
    {
      uint64_t v10 = 0;
      if (v8) {
        goto LABEL_19;
      }
      goto LABEL_26;
    }
    goto LABEL_10;
  }
  uint64_t v5 = *((unsigned int *)v4 - 1);
  atomic_uchar *volatile v6 = &v4[v5];
  if (!*((_DWORD *)v4 - 3)) {
    goto LABEL_12;
  }
  if (v5)
  {
    uint64_t v7 = 8 * v5;
    char v8 = *(unsigned int ***)(a1 + 48);
    while ((unint64_t)*v8 + 1 <= 1)
    {
      ++v8;
      v7 -= 8;
      if (!v7)
      {
        char v8 = v6;
        break;
      }
    }
LABEL_10:
    uint64_t v9 = *((unsigned int *)v4 - 1);
    goto LABEL_16;
  }
  uint64_t v9 = 0;
  char v8 = *(unsigned int ***)(a1 + 48);
LABEL_16:
  uint64_t v10 = &v4[v9];
  if (v10 != v8)
  {
LABEL_19:
    while (!*((void *)*v8 + 1))
    {
      int v11 = v8 + 1;
      char v8 = v6;
      if (v11 != v6)
      {
        char v8 = v11;
        while ((unint64_t)*v8 + 1 <= 1)
        {
          if (++v8 == v6)
          {
            char v8 = v6;
            break;
          }
        }
      }
      if (v8 == v10)
      {
        char v8 = v10;
        break;
      }
    }
  }
LABEL_26:
  if (v4)
  {
    char v12 = &v4[*((unsigned int *)v4 - 1)];
    if (v8 == v12) {
      goto LABEL_28;
    }
    do
    {
LABEL_43:
      uint64_t v17 = *((void *)*v8 + 1);
      *(unsigned char *)(v17 + 76) = 1;
      uint64_t v18 = *(void *)(v17 + 56);
      if (v18)
      {
        uint64_t v19 = *(WebGPU::CommandBuffer **)(v18 + 8);
        if (v19) {
          WebGPU::CommandBuffer::makeInvalid(v19, *(NSString **)(v17 + 64));
        }
      }
      char v20 = v6;
      if (v8 + 1 != v6)
      {
        char v20 = v8 + 1;
        while ((unint64_t)*v20 + 1 <= 1)
        {
          if (++v20 == v6)
          {
            char v20 = v6;
            break;
          }
        }
      }
      char v8 = v10;
      if (v20 != v10)
      {
        char v8 = v20;
        if (!*((void *)*v20 + 1))
        {
          while (1)
          {
            uint64_t v21 = v8 + 1;
            char v8 = v6;
            if (v21 != v6)
            {
              char v8 = v21;
              while ((unint64_t)*v8 + 1 <= 1)
              {
                if (++v8 == v6)
                {
                  char v8 = v6;
                  break;
                }
              }
            }
            if (v8 == v10) {
              break;
            }
            if (*((void *)*v8 + 1)) {
              goto LABEL_42;
            }
          }
          char v8 = v10;
        }
      }
LABEL_42:
      ++*(_DWORD *)(a1 + 56);
    }
    while (v8 != v12);
    uint64_t v4 = *(unsigned int ***)(a1 + 48);
    if (v4) {
      goto LABEL_29;
    }
LABEL_62:
    LODWORD(v16) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    goto LABEL_63;
  }
  char v12 = 0;
  if (v8) {
    goto LABEL_43;
  }
LABEL_28:
  if (!v4) {
    goto LABEL_62;
  }
LABEL_29:
  *(void *)(a1 + 48) = 0;
  uint64_t v13 = *((unsigned int *)v4 - 1);
  if (v13)
  {
    id v14 = v4;
    do
    {
      uint64_t v15 = *v14;
      if (*v14 != (unsigned int *)-1)
      {
        *id v14 = 0;
        if (v15)
        {
          if (atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v15);
            WTF::fastFree((WTF *)v15, a2);
          }
        }
      }
      ++v14;
      --v13;
    }
    while (v13);
  }
  WTF::fastFree((WTF *)(v4 - 2), a2);
  uint64_t v16 = *(void *)(a1 + 48);
  *(_DWORD *)(a1 + 56) = 0;
  if (v16)
  {
    LODWORD(v16) = *(_DWORD *)(v16 - 12);
    if (v16 > 0x7FFFFFFE) {
      LODWORD(v16) = 0x7FFFFFFF;
    }
  }
LABEL_63:
  *(_DWORD *)(a1 + 60) = 2 * v16;
}

uint64_t wgpuExternalTextureUndestroy(uint64_t result, void *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int ***)(result + 48);
  if (v3)
  {
    *(void *)(result + 48) = 0;
    uint64_t v4 = *((unsigned int *)v3 - 1);
    if (v4)
    {
      uint64_t v5 = v3;
      do
      {
        atomic_uchar *volatile v6 = *v5;
        if (*v5 != (unsigned int *)-1)
        {
          *uint64_t v5 = 0;
          if (v6)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v6);
              WTF::fastFree((WTF *)v6, a2);
            }
          }
        }
        ++v5;
        --v4;
      }
      while (v4);
    }
    uint64_t result = WTF::fastFree((WTF *)(v3 - 2), a2);
    uint64_t v7 = *(void *)(v2 + 48);
    *(_DWORD *)(v2 + 56) = 0;
    if (v7)
    {
      LODWORD(v7) = *(_DWORD *)(v7 - 12);
      if (v7 > 0x7FFFFFFE) {
        LODWORD(v7) = 0x7FFFFFFF;
      }
    }
  }
  else
  {
    LODWORD(v7) = 0;
    *(_DWORD *)(result + 56) = 0;
  }
  *(_DWORD *)(v2 + 60) = 2 * v7;
  *(unsigned char *)(v2 + 40) = 0;
  return result;
}

BOOL WebGPU::anyLimitIsBetterThan(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 > *(_DWORD *)a2) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 4) > *(_DWORD *)(a2 + 4)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 8) > *(_DWORD *)(a2 + 8)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 12) > *(_DWORD *)(a2 + 12)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 16) > *(_DWORD *)(a2 + 16)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 24) > *(_DWORD *)(a2 + 24)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 28) > *(_DWORD *)(a2 + 28)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 32) > *(_DWORD *)(a2 + 32)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 36) > *(_DWORD *)(a2 + 36)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 40) > *(_DWORD *)(a2 + 40)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 44) > *(_DWORD *)(a2 + 44)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 48) > *(_DWORD *)(a2 + 48)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 52) > *(_DWORD *)(a2 + 52)) {
    return 1;
  }
  if (*(void *)(a1 + 56) > *(void *)(a2 + 56)) {
    return 1;
  }
  if (*(void *)(a1 + 64) > *(void *)(a2 + 64)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 72) < *(_DWORD *)(a2 + 72)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 76) < *(_DWORD *)(a2 + 76)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 80) > *(_DWORD *)(a2 + 80)) {
    return 1;
  }
  if (*(void *)(a1 + 88) > *(void *)(a2 + 88)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 96) > *(_DWORD *)(a2 + 96)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 100) > *(_DWORD *)(a2 + 100)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 104) > *(_DWORD *)(a2 + 104)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 108) > *(_DWORD *)(a2 + 108)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 112) > *(_DWORD *)(a2 + 112)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 116) > *(_DWORD *)(a2 + 116)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 120) > *(_DWORD *)(a2 + 120)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 124) > *(_DWORD *)(a2 + 124)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 128) > *(_DWORD *)(a2 + 128)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 132) > *(_DWORD *)(a2 + 132)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 136) <= *(_DWORD *)(a2 + 136)) {
    return *(_DWORD *)(a1 + 140) > *(_DWORD *)(a2 + 140);
  }
  return 1;
}

void WebGPU::hardwareCapabilities(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = a1;
  LOBYTE(v92[0]) = 0;
  char v105 = 0;
  unsigned int v124 = v92;
  if (![v3 supportsFamily:1004]) {
    goto LABEL_12;
  }
  id v4 = v3;
  WebGPU::baseCapabilities((uint64_t)&v128, v4);
  char v129 = 1;
  char v132 = 0;
  WebGPU::baseFeatures((uint64_t)&v126, v4);
  int v125 = 5;
  int v6 = v127;
  int v5 = HIDWORD(v127);
  if (HIDWORD(v127) == v127)
  {
    uint64_t v7 = (int *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, HIDWORD(v127) + 1, (unint64_t)&v125);
    int v8 = HIDWORD(v127);
    uint64_t v9 = v126;
    v126[HIDWORD(v127)] = *v7;
    int v5 = v8;
    uint64_t v10 = (v8 + 1);
    HIDWORD(v127) = v10;
    int v125 = 6;
    if (v10 != v127)
    {
LABEL_4:
      unsigned int v11 = v5 + 2;
      v9[v10] = 6;
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v9 = v126;
    v126[HIDWORD(v127)] = 5;
    uint64_t v10 = (v5 + 1);
    HIDWORD(v127) = v10;
    int v125 = 6;
    if (v10 != v6) {
      goto LABEL_4;
    }
  }
  char v12 = (int *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, v10 + 1, (unint64_t)&v125);
  unsigned int v11 = HIDWORD(v127) + 1;
  uint64_t v9 = v126;
  v126[HIDWORD(v127)] = *v12;
LABEL_7:
  HIDWORD(v127) = v11;
  unint64_t v13 = 126 - 2 * __clz(v11);
  if (v11) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WGPUFeatureName *,false>(v9, &v9[v11], v14, 1);
  long long v106 = xmmword_1826CE8D0;
  long long v107 = xmmword_1826CE8C0;
  long long v108 = xmmword_1826CE8B0;
  long long v110 = xmmword_1826CE8E0;
  uint64_t v109 = 0xC00000004;
  uint64_t v111 = 0x10000000100;
  int v112 = 8;
  uint64_t v113 = 0x10000000;
  long long v114 = xmmword_1826CE890;
  long long v115 = xmmword_1826CE880;
  long long v116 = xmmword_1826CE870;
  uint64_t v15 = (WTF *)v126;
  uint64_t v117 = v126;
  unint64_t v118 = v127;
  uint64_t v119 = v128;
  char v120 = v129;
  id v16 = v130;
  id v121 = v16;
  id v17 = v131;
  id v122 = v17;
  char v123 = 0;

  WebGPU::rawHardwareCapabilities(objc_object  {objcproto9MTLDevice}*)::$_0::operator()((uint64_t *)&v124, (uint64_t)&v106);
  if (v15) {
    WTF::fastFree(v15, v18);
  }
LABEL_12:
  if (![v3 supportsFamily:1005]) {
    goto LABEL_23;
  }
  id v19 = v3;
  WebGPU::baseCapabilities((uint64_t)&v128, v19);
  char v129 = 1;
  char v132 = 0;
  WebGPU::baseFeatures((uint64_t)&v126, v19);
  int v125 = 5;
  int v21 = v127;
  int v20 = HIDWORD(v127);
  if (HIDWORD(v127) == v127)
  {
    int v22 = (int *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, HIDWORD(v127) + 1, (unint64_t)&v125);
    int v23 = HIDWORD(v127);
    uint64_t v24 = v126;
    v126[HIDWORD(v127)] = *v22;
    int v20 = v23;
    uint64_t v25 = (v23 + 1);
    HIDWORD(v127) = v25;
    int v125 = 6;
    if (v25 != v127)
    {
LABEL_15:
      unsigned int v26 = v20 + 2;
      v24[v25] = 6;
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v24 = v126;
    v126[HIDWORD(v127)] = 5;
    uint64_t v25 = (v20 + 1);
    HIDWORD(v127) = v25;
    int v125 = 6;
    if (v25 != v21) {
      goto LABEL_15;
    }
  }
  uint64_t v27 = (int *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, v25 + 1, (unint64_t)&v125);
  unsigned int v26 = HIDWORD(v127) + 1;
  uint64_t v24 = v126;
  v126[HIDWORD(v127)] = *v27;
LABEL_18:
  HIDWORD(v127) = v26;
  unint64_t v28 = 126 - 2 * __clz(v26);
  if (v26) {
    uint64_t v29 = v28;
  }
  else {
    uint64_t v29 = 0;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WGPUFeatureName *,false>(v24, &v24[v26], v29, 1);
  long long v106 = xmmword_1826CE8D0;
  long long v107 = xmmword_1826CE8C0;
  long long v108 = xmmword_1826CE8B0;
  long long v110 = xmmword_1826CE8E0;
  uint64_t v109 = 0xC00000004;
  uint64_t v111 = 0x10000000100;
  int v112 = 8;
  uint64_t v113 = 0x10000000;
  long long v114 = xmmword_1826CE890;
  long long v115 = xmmword_1826CE880;
  long long v116 = xmmword_1826CE870;
  char v30 = (WTF *)v126;
  uint64_t v117 = v126;
  unint64_t v118 = v127;
  uint64_t v119 = v128;
  char v120 = v129;
  id v31 = v130;
  id v121 = v31;
  id v32 = v131;
  id v122 = v32;
  char v123 = 0;

  WebGPU::rawHardwareCapabilities(objc_object  {objcproto9MTLDevice}*)::$_0::operator()((uint64_t *)&v124, (uint64_t)&v106);
  if (v30) {
    WTF::fastFree(v30, v33);
  }
LABEL_23:
  if (![v3 supportsFamily:1006]) {
    goto LABEL_38;
  }
  id v34 = v3;
  WebGPU::baseCapabilities((uint64_t)&v128, v34);
  char v129 = 1;
  char v132 = 0;
  WebGPU::baseFeatures((uint64_t)&v126, v34);
  int v125 = 5;
  int v36 = v127;
  int v35 = HIDWORD(v127);
  if (HIDWORD(v127) != v127)
  {
    long long v39 = v126;
    v126[HIDWORD(v127)] = 5;
    uint64_t v40 = (v35 + 1);
    HIDWORD(v127) = v40;
    int v125 = 6;
    if (v40 != v36) {
      goto LABEL_26;
    }
LABEL_28:
    int v42 = (int *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, v40 + 1, (unint64_t)&v125);
    unsigned int v41 = HIDWORD(v127) + 1;
    long long v39 = v126;
    v126[HIDWORD(v127)] = *v42;
    goto LABEL_29;
  }
  uint64_t v37 = (int *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, HIDWORD(v127) + 1, (unint64_t)&v125);
  int v38 = HIDWORD(v127);
  long long v39 = v126;
  v126[HIDWORD(v127)] = *v37;
  int v35 = v38;
  uint64_t v40 = (v38 + 1);
  HIDWORD(v127) = v40;
  int v125 = 6;
  if (v40 == v127) {
    goto LABEL_28;
  }
LABEL_26:
  unsigned int v41 = v35 + 2;
  v39[v40] = 6;
LABEL_29:
  HIDWORD(v127) = v41;
  unint64_t v43 = 126 - 2 * __clz(v41);
  if (v41) {
    uint64_t v44 = v43;
  }
  else {
    uint64_t v44 = 0;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WGPUFeatureName *,false>(v39, &v39[v41], v44, 1);
  long long v106 = xmmword_1826CEB90;
  long long v107 = xmmword_1826CEBA0;
  long long v108 = xmmword_1826CEBB0;
  uint64_t v109 = 0x2C0000002CLL;
  long long v110 = 0uLL;
  uint64_t v111 = 0x2000000020;
  int v112 = 12;
  unint64_t v45 = [v34 maxBufferLength];
  unint64_t v46 = v45 / 0xA;
  if (v45 / 0xA <= 0x10000000) {
    unint64_t v46 = 0x10000000;
  }
  uint64_t v47 = v46 & 0x1FFFFFFFFFFFFFFCLL;
  if (v45 >= 0x4FFFFFFF6) {
    uint64_t v47 = 2147483644;
  }
  uint64_t v113 = v47;
  long long v114 = xmmword_1826CEBC0;
  long long v115 = xmmword_1826CEBD0;
  long long v116 = xmmword_1826CEBE0;
  int v48 = (WTF *)v126;
  uint64_t v117 = v126;
  unint64_t v118 = v127;
  uint64_t v119 = v128;
  char v120 = v129;
  id v49 = v130;
  id v121 = v49;
  id v50 = v131;
  id v122 = v50;
  char v123 = 0;

  WebGPU::rawHardwareCapabilities(objc_object  {objcproto9MTLDevice}*)::$_0::operator()((uint64_t *)&v124, (uint64_t)&v106);
  if (v48) {
    WTF::fastFree(v48, v51);
  }
LABEL_38:
  if (![v3 supportsFamily:1007]) {
    goto LABEL_53;
  }
  id v52 = v3;
  WebGPU::baseCapabilities((uint64_t)&v128, v52);
  char v129 = 1;
  char v132 = 0;
  WebGPU::baseFeatures((uint64_t)&v126, v52);
  int v125 = 5;
  int v54 = v127;
  int v53 = HIDWORD(v127);
  if (HIDWORD(v127) != v127)
  {
    long long v57 = v126;
    v126[HIDWORD(v127)] = 5;
    uint64_t v58 = (v53 + 1);
    HIDWORD(v127) = v58;
    int v125 = 6;
    if (v58 != v54) {
      goto LABEL_41;
    }
LABEL_43:
    unint64_t v60 = (int *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, v58 + 1, (unint64_t)&v125);
    unsigned int v59 = HIDWORD(v127) + 1;
    long long v57 = v126;
    v126[HIDWORD(v127)] = *v60;
    goto LABEL_44;
  }
  long long v55 = (int *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v126, HIDWORD(v127) + 1, (unint64_t)&v125);
  int v56 = HIDWORD(v127);
  long long v57 = v126;
  v126[HIDWORD(v127)] = *v55;
  int v53 = v56;
  uint64_t v58 = (v56 + 1);
  HIDWORD(v127) = v58;
  int v125 = 6;
  if (v58 == v127) {
    goto LABEL_43;
  }
LABEL_41:
  unsigned int v59 = v53 + 2;
  v57[v58] = 6;
LABEL_44:
  HIDWORD(v127) = v59;
  unint64_t v61 = 126 - 2 * __clz(v59);
  if (v59) {
    uint64_t v62 = v61;
  }
  else {
    uint64_t v62 = 0;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WGPUFeatureName *,false>(v57, &v57[v59], v62, 1);
  long long v106 = xmmword_1826CEB90;
  long long v107 = xmmword_1826CEBA0;
  long long v108 = xmmword_1826CEBB0;
  uint64_t v109 = 0x2C0000002CLL;
  long long v110 = 0uLL;
  uint64_t v111 = 0x2000000020;
  int v112 = 12;
  unint64_t v63 = [v52 maxBufferLength];
  unint64_t v64 = v63 / 0xA;
  if (v63 / 0xA <= 0x10000000) {
    unint64_t v64 = 0x10000000;
  }
  uint64_t v65 = v64 & 0x1FFFFFFFFFFFFFFCLL;
  if (v63 >= 0x4FFFFFFF6) {
    uint64_t v65 = 2147483644;
  }
  uint64_t v113 = v65;
  long long v114 = xmmword_1826CEBC0;
  long long v115 = xmmword_1826CEBD0;
  long long v116 = xmmword_1826CEBE0;
  uint64_t v66 = (WTF *)v126;
  uint64_t v117 = v126;
  unint64_t v118 = v127;
  uint64_t v119 = v128;
  char v120 = v129;
  id v67 = v130;
  id v121 = v67;
  id v68 = v131;
  id v122 = v68;
  char v123 = 0;

  WebGPU::rawHardwareCapabilities(objc_object  {objcproto9MTLDevice}*)::$_0::operator()((uint64_t *)&v124, (uint64_t)&v106);
  if (v66) {
    WTF::fastFree(v66, v69);
  }
LABEL_53:
  if ([v3 supportsFamily:2002])
  {
    id v70 = v3;
    WebGPU::baseCapabilities((uint64_t)&v128, v70);
    char v129 = 0;
    WebGPU::baseFeatures((uint64_t)&v126, v70);
    uint64_t v71 = (WTF *)v126;
    unsigned int v72 = HIDWORD(v127);
    unint64_t v73 = 126 - 2 * __clz(HIDWORD(v127));
    if (HIDWORD(v127)) {
      uint64_t v74 = v73;
    }
    else {
      uint64_t v74 = 0;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WGPUFeatureName *,false>(v126, &v126[HIDWORD(v127)], v74, 1);
    long long v106 = xmmword_1826CEB90;
    long long v107 = xmmword_1826CEBF0;
    long long v108 = xmmword_1826CEBB0;
    uint64_t v109 = 0x2C0000002CLL;
    long long v110 = 0uLL;
    uint64_t v111 = 0x10000000100;
    int v112 = 12;
    unint64_t v75 = [v70 maxBufferLength];
    unint64_t v76 = v75 / 0xA;
    if (v75 / 0xA <= 0x10000000) {
      unint64_t v76 = 0x10000000;
    }
    uint64_t v77 = v76 & 0x1FFFFFFFFFFFFFFCLL;
    if (v75 >= 0x4FFFFFFF6) {
      uint64_t v77 = 2147483644;
    }
    uint64_t v113 = v77;
    long long v114 = xmmword_1826CEC00;
    long long v115 = xmmword_1826CEBD0;
    long long v116 = xmmword_1826CEBE0;
    uint64_t v117 = (int *)v71;
    unint64_t v118 = __PAIR64__(v72, v127);
    uint64_t v119 = v128;
    char v120 = v129;
    id v78 = v130;
    id v121 = v78;
    id v79 = v131;
    id v122 = v79;
    char v123 = 1;

    WebGPU::rawHardwareCapabilities(objc_object  {objcproto9MTLDevice}*)::$_0::operator()((uint64_t *)&v124, (uint64_t)&v106);
    if (v71) {
      WTF::fastFree(v71, v80);
    }
  }
  if (!v105)
  {
LABEL_70:

    if (v105)
    {
      long long v106 = xmmword_1826CE8D0;
      long long v107 = xmmword_1826CE8C0;
      long long v108 = xmmword_1826CE8B0;
      long long v110 = xmmword_1826CE8E0;
      uint64_t v109 = 0xC00000004;
      uint64_t v111 = 0x10000000100;
      int v112 = 8;
      uint64_t v113 = 0x10000000;
      long long v114 = xmmword_1826CE890;
      long long v115 = xmmword_1826CE880;
      long long v116 = xmmword_1826CE870;
      if (WebGPU::anyLimitIsBetterThan((uint64_t)&v106, (uint64_t)v92))
      {
        *(unsigned char *)a2 = 0;
        int v84 = (void *)*((void *)&v103 + 1);
        *(unsigned char *)(a2 + 200) = 0;

        BOOL v86 = v99;
        if (!v99) {
          goto LABEL_77;
        }
        goto LABEL_76;
      }
      long long v87 = v97;
      *(_OWORD *)(a2 + 96) = v96;
      *(_OWORD *)(a2 + 112) = v87;
      *(_OWORD *)(a2 + 128) = v98;
      long long v88 = v93;
      *(_OWORD *)(a2 + 32) = v92[2];
      *(_OWORD *)(a2 + 48) = v88;
      long long v89 = v95;
      *(_OWORD *)(a2 + 64) = v94;
      *(_OWORD *)(a2 + 80) = v89;
      long long v90 = v92[1];
      *(_OWORD *)a2 = v92[0];
      *(_OWORD *)(a2 + 16) = v90;
      *(void *)(a2 + 144) = v99;
      *(void *)&long long v90 = v100;
      char v99 = 0;
      uint64_t v100 = 0;
      *(void *)(a2 + 152) = v90;
      *(void *)(a2 + 160) = v101;
      *(unsigned char *)(a2 + 168) = v102;
      long long v91 = v103;
      long long v103 = 0uLL;
      *(unsigned char *)(a2 + 192) = v104;
      *(_OWORD *)(a2 + 176) = v91;
      *(unsigned char *)(a2 + 200) = 1;

      BOOL v86 = v99;
      if (v99)
      {
LABEL_76:
        char v99 = 0;
        LODWORD(v100) = 0;
        WTF::fastFree(v86, v85);
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 200) = 0;
    }
LABEL_77:

    return;
  }
  unint64_t v81 = [v3 maxBufferLength];
  if (v105)
  {
    unint64_t v82 = v81 / 0xA;
    if (v81 / 0xA <= 0x10000000) {
      unint64_t v82 = 0x10000000;
    }
    uint64_t v83 = v82 & 0x1FFFFFFFFFFFFFFCLL;
    if (v81 >= 0x4FFFFFFF6) {
      uint64_t v83 = 2147483644;
    }
    *((void *)&v93 + 1) = v83;
    *(void *)&long long v94 = v83;
    goto LABEL_70;
  }
  __break(1u);
}

void sub_1824F7DD8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v13 = *(WTF **)(v11 - 152);
  if (v13) {
    WTF::fastFree(v13, a2);
  }

  std::optional<WebGPU::HardwareCapabilities>::~optional((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1824F7EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::optional<WebGPU::HardwareCapabilities>::~optional((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t std::optional<WebGPU::HardwareCapabilities>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 200))
  {

    id v3 = *(WTF **)(a1 + 144);
    if (v3)
    {
      *(void *)(a1 + 144) = 0;
      *(_DWORD *)(a1 + 152) = 0;
      WTF::fastFree(v3, v2);
    }
  }
  return a1;
}

double wgpuDefaultLimits@<D0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1826CE8D0;
  *(_OWORD *)(a1 + 16) = xmmword_1826CE8C0;
  *(_OWORD *)(a1 + 32) = xmmword_1826CE8B0;
  *(void *)(a1 + 48) = 0xC00000004;
  *(_OWORD *)(a1 + 56) = xmmword_1826CE8E0;
  *(void *)(a1 + 72) = 0x10000000100;
  *(_DWORD *)(a1 + 80) = 8;
  *(void *)(a1 + 88) = 0x10000000;
  *(_OWORD *)(a1 + 96) = xmmword_1826CE890;
  *(_OWORD *)(a1 + 112) = xmmword_1826CE880;
  *(void *)&double result = 0x10000000100;
  *(_OWORD *)(a1 + 128) = xmmword_1826CE870;
  return result;
}

void WebGPU::rawHardwareCapabilities(objc_object  {objcproto9MTLDevice}*)::$_0::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = *a1;
  if (!*(unsigned char *)(*a1 + 200))
  {
    *(_OWORD *)uint64_t v3 = *(_OWORD *)a2;
    long long v36 = *(_OWORD *)(a2 + 16);
    long long v37 = *(_OWORD *)(a2 + 32);
    long long v38 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v3 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v3 + 64) = v38;
    *(_OWORD *)(v3 + 16) = v36;
    *(_OWORD *)(v3 + 32) = v37;
    long long v39 = *(_OWORD *)(a2 + 80);
    long long v40 = *(_OWORD *)(a2 + 96);
    long long v41 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(v3 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(v3 + 128) = v41;
    *(_OWORD *)(v3 + 80) = v39;
    *(_OWORD *)(v3 + 96) = v40;
    uint64_t v42 = *(unsigned int *)(a2 + 156);
    *(void *)(v3 + 144) = 0;
    *(void *)(v3 + 152) = 0;
    *(_DWORD *)(v3 + 156) = v42;
    if (v42)
    {
      if (v42 >> 30) {
        goto LABEL_84;
      }
      unint64_t v43 = (void *)WTF::fastMalloc((WTF *)(4 * v42));
      *(_DWORD *)(v3 + 152) = v42;
      *(void *)(v3 + 144) = v43;
      memcpy(v43, *(const void **)(v2 + 144), 4 * *(unsigned int *)(v2 + 156));
    }
    uint64_t v44 = *(void *)(v2 + 160);
    *(unsigned char *)(v3 + 168) = *(unsigned char *)(v2 + 168);
    *(void *)(v3 + 160) = v44;
    *(void *)(v3 + 176) = *(id *)(v2 + 176);
    *(void *)(v3 + 184) = *(id *)(v2 + 184);
    *(unsigned char *)(v3 + 192) = *(unsigned char *)(v2 + 192);
    *(unsigned char *)(v3 + 200) = 1;
    return;
  }
  unsigned int v5 = *(_DWORD *)(v3 + 32);
  if (v5 <= *(_DWORD *)(a2 + 32)) {
    unsigned int v5 = *(_DWORD *)(a2 + 32);
  }
  unsigned int v6 = *(_DWORD *)(v3 + 52);
  if (v6 <= *(_DWORD *)(a2 + 52)) {
    unsigned int v6 = *(_DWORD *)(a2 + 52);
  }
  if (v6 >= 0x3E8) {
    unsigned int v6 = 1000;
  }
  int8x8_t v7 = (int8x8_t)vadd_s32(*(int32x2_t *)(v3 + 72), (int32x2_t)-1);
  int8x8_t v8 = (int8x8_t)vshr_n_u32((uint32x2_t)v7, 1uLL);
  int8x8_t v9 = (int8x8_t)vadd_s32(*(int32x2_t *)(a2 + 72), (int32x2_t)-1);
  int8x8_t v10 = (int8x8_t)vshr_n_u32((uint32x2_t)v9, 1uLL);
  unsigned int v11 = *(_DWORD *)(v3 + 80);
  if (v11 <= *(_DWORD *)(a2 + 80)) {
    unsigned int v11 = *(_DWORD *)(a2 + 80);
  }
  unint64_t v12 = *(void *)(v3 + 88);
  if (v12 <= *(void *)(a2 + 88)) {
    unint64_t v12 = *(void *)(a2 + 88);
  }
  uint32x4_t v13 = vmaxq_u32(*(uint32x4_t *)(v3 + 16), *(uint32x4_t *)(a2 + 16));
  uint32x4_t v14 = vminq_u32(vmaxq_u32(*(uint32x4_t *)(v3 + 36), *(uint32x4_t *)(a2 + 36)), (uint32x4_t)vdupq_n_s32(0x3E8u));
  int8x16_t v15 = vbslq_s8((int8x16_t)vcgtq_u64(*(uint64x2_t *)(v3 + 56), *(uint64x2_t *)(a2 + 56)), *(int8x16_t *)(v3 + 56), *(int8x16_t *)(a2 + 56));
  int8x8_t v16 = vorr_s8(v8, v7);
  int8x8_t v17 = vorr_s8((int8x8_t)vshr_n_u32((uint32x2_t)v16, 2uLL), v16);
  int8x8_t v18 = vorr_s8((int8x8_t)vshr_n_u32((uint32x2_t)v17, 4uLL), v17);
  int8x8_t v19 = vorr_s8((int8x8_t)vshr_n_u32((uint32x2_t)v18, 8uLL), v18);
  int8x8_t v20 = vorr_s8(v10, v9);
  int8x8_t v21 = vorr_s8((int8x8_t)vshr_n_u32((uint32x2_t)v20, 2uLL), v20);
  int8x8_t v22 = vorr_s8((int8x8_t)vshr_n_u32((uint32x2_t)v21, 4uLL), v21);
  int8x8_t v23 = vorr_s8((int8x8_t)vshr_n_u32((uint32x2_t)v22, 8uLL), v22);
  uint32x2_t v24 = vmin_u32((uint32x2_t)vadd_s32((int32x2_t)vorr_s8((int8x8_t)vshr_n_u32((uint32x2_t)v23, 0x10uLL), v23), (int32x2_t)0x100000001), (uint32x2_t)vadd_s32((int32x2_t)vorr_s8((int8x8_t)vshr_n_u32((uint32x2_t)v19, 0x10uLL), v19), (int32x2_t)0x100000001));
  uint32x4_t v25 = vmaxq_u32(*(uint32x4_t *)(v3 + 96), *(uint32x4_t *)(a2 + 96));
  uint32x4_t v26 = vmaxq_u32(*(uint32x4_t *)(v3 + 112), *(uint32x4_t *)(a2 + 112));
  uint32x4_t v27 = vmaxq_u32(*(uint32x4_t *)(v3 + 128), *(uint32x4_t *)(a2 + 128));
  *(uint32x4_t *)uint64_t v3 = vmaxq_u32(*(uint32x4_t *)v3, *(uint32x4_t *)a2);
  *(uint32x4_t *)(v3 + 16) = v13;
  *(_DWORD *)(v3 + 32) = v5;
  *(uint32x4_t *)(v3 + 36) = v14;
  *(_DWORD *)(v3 + 52) = v6;
  *(int8x16_t *)(v3 + 56) = v15;
  *(uint32x2_t *)(v3 + 72) = v24;
  *(_DWORD *)(v3 + 80) = v11;
  *(void *)(v3 + 88) = v12;
  *(uint32x4_t *)(v3 + 96) = v25;
  *(uint32x4_t *)(v3 + 112) = v26;
  *(uint32x4_t *)(v3 + 128) = v27;
  uint64_t v28 = *(unsigned int *)(v3 + 156);
  uint64_t v29 = *(unsigned int *)(a2 + 156);
  unint64_t v30 = v29 + v28;
  if (v29 + v28)
  {
    if (!(v30 >> 30))
    {
      id v31 = (unsigned char *)WTF::fastMalloc((WTF *)(4 * v30));
      uint64_t v28 = *(unsigned int *)(v3 + 156);
      uint64_t v29 = *(unsigned int *)(v2 + 156);
      id v32 = *(_DWORD **)(v3 + 144);
      unint64_t v33 = (unint64_t)&v32[v28];
      id v34 = *(unsigned int **)(v2 + 144);
      unint64_t v35 = (unint64_t)&v34[v29];
      if (!v29) {
        goto LABEL_33;
      }
      goto LABEL_21;
    }
LABEL_84:
    __break(0xC471u);
    JUMPOUT(0x1824F851CLL);
  }
  id v31 = 0;
  id v32 = *(_DWORD **)(v3 + 144);
  unint64_t v33 = (unint64_t)&v32[v28];
  id v34 = *(unsigned int **)(a2 + 144);
  unint64_t v35 = (unint64_t)&v34[v29];
  if (!v29)
  {
LABEL_33:
    unint64_t v45 = (unint64_t)v32;
    unint64_t v46 = (unint64_t)v34;
    id v50 = v31;
    goto LABEL_34;
  }
LABEL_21:
  if (!v28) {
    goto LABEL_33;
  }
  unint64_t v45 = (unint64_t)v32;
  unint64_t v46 = (unint64_t)v34;
  uint64_t v47 = v31;
LABEL_23:
  while (2)
  {
    int v48 = v47;
    while (1)
    {
      int v49 = *(_DWORD *)v45;
      a2 = *(unsigned int *)v46;
      if (*(_DWORD *)v45 < (int)a2)
      {
        *int v48 = v49;
        uint64_t v47 = v48 + 1;
        v45 += 4;
        if (v45 < v33) {
          goto LABEL_23;
        }
        goto LABEL_32;
      }
      if (v49 == a2) {
        break;
      }
      id v50 = v48 + 1;
      *int v48 = a2;
      v46 += 4;
      ++v48;
      if (v46 >= v35) {
        goto LABEL_34;
      }
    }
    *int v48 = v49;
    uint64_t v47 = v48 + 1;
    v45 += 4;
    v46 += 4;
    if (v45 < v33 && v46 < v35) {
      continue;
    }
    break;
  }
LABEL_32:
  id v50 = v48 + 1;
LABEL_34:
  if (v45 >= v33)
  {
    long long v55 = v50;
    goto LABEL_46;
  }
  unint64_t v51 = (unint64_t)&v32[v28];
  if (v51 <= v45 + 4) {
    unint64_t v51 = v45 + 4;
  }
  unint64_t v52 = v51 + ~v45;
  if (v52 < 0x1C || (unint64_t)v50 - v45 < 0x20)
  {
    long long v55 = v50;
    int v56 = (int *)v45;
    do
    {
LABEL_45:
      int v60 = *v56++;
      *v55++ = v60;
    }
    while ((unint64_t)v56 < v33);
    goto LABEL_46;
  }
  uint64_t v53 = (v52 >> 2) + 1;
  uint64_t v54 = v53 & 0x7FFFFFFFFFFFFFF8;
  long long v55 = &v50[v54];
  int v56 = (int *)(v45 + v54 * 4);
  long long v57 = (long long *)(v45 + 16);
  uint64_t v58 = v50 + 4;
  a2 = v53 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v59 = *v57;
    *(v58 - 1) = *(v57 - 1);
    _OWORD *v58 = v59;
    v57 += 2;
    v58 += 2;
    a2 -= 8;
  }
  while (a2);
  if (v53 != (v53 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_45;
  }
LABEL_46:
  if (v46 >= v35)
  {
    uint64_t v65 = (char *)v55;
    goto LABEL_58;
  }
  unint64_t v61 = (unint64_t)&v34[v29];
  if (v61 <= v46 + 4) {
    unint64_t v61 = v46 + 4;
  }
  unint64_t v62 = v61 + ~v46;
  if (v62 < 0x1C || (unint64_t)v55 - v46 < 0x20)
  {
    uint64_t v65 = (char *)v55;
    uint64_t v66 = (unsigned int *)v46;
    do
    {
LABEL_57:
      int v71 = *v66++;
      *(_DWORD *)uint64_t v65 = v71;
      v65 += 4;
    }
    while ((unint64_t)v66 < v35);
    goto LABEL_58;
  }
  uint64_t v63 = (v62 >> 2) + 1;
  uint64_t v64 = v63 & 0x7FFFFFFFFFFFFFF8;
  uint64_t v65 = (char *)&v55[v64];
  uint64_t v66 = (unsigned int *)(v46 + v64 * 4);
  id v67 = (long long *)(v46 + 16);
  id v68 = v55 + 4;
  uint64_t v69 = v63 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v70 = *v67;
    *(v68 - 1) = *(v67 - 1);
    *id v68 = v70;
    v67 += 2;
    v68 += 2;
    v69 -= 8;
  }
  while (v69);
  if (v63 != (v63 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_57;
  }
LABEL_58:
  unint64_t v72 = v65 - v31;
  unint64_t v73 = (v65 - v31) >> 2;
  uint64_t v74 = v30;
  if (v30 < v73 && v73 > v30)
  {
    unint64_t v77 = v30 + (v30 >> 2);
    if (v77 >= 0x10) {
      unint64_t v78 = v77 + 1;
    }
    else {
      unint64_t v78 = 16;
    }
    if (v78 <= v73) {
      unint64_t v30 = v73;
    }
    else {
      unint64_t v30 = v78;
    }
    if (v30 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x1824F8524);
    }
    unint64_t v76 = (unsigned char *)WTF::fastMalloc((WTF *)(4 * v30));
    memcpy(v76, v31, 4 * v74);
    if (v31)
    {
      if (v76 == v31)
      {
        LODWORD(v30) = 0;
        unint64_t v76 = 0;
      }
      WTF::fastFree((WTF *)v31, (void *)a2);
    }
  }
  else
  {
    unint64_t v76 = v31;
  }
  uint64_t v79 = *a1;
  if (!*(unsigned char *)(*a1 + 200)) {
    goto LABEL_81;
  }
  unint64_t v80 = v72 >> 2;
  unint64_t v81 = *(WTF **)(v79 + 144);
  if (v81)
  {
    *(void *)(v79 + 144) = 0;
    *(_DWORD *)(v79 + 152) = 0;
    WTF::fastFree(v81, (void *)a2);
    *(void *)(v79 + 144) = v76;
    *(_DWORD *)(v79 + 152) = v30;
    *(_DWORD *)(v79 + 156) = v80;
    uint64_t v79 = *a1;
    if (!*(unsigned char *)(*a1 + 200)) {
      goto LABEL_81;
    }
  }
  else
  {
    *(void *)(v79 + 144) = v76;
    *(_DWORD *)(v79 + 152) = v30;
    *(_DWORD *)(v79 + 156) = v80;
  }
  uint64_t v82 = *(void *)(v79 + 160);
  int v83 = *(unsigned __int8 *)(v79 + 168);
  int v84 = *(unsigned __int8 *)(v2 + 168);
  id v85 = *(id *)(v79 + 176);
  id v86 = *(id *)(v79 + 184);
  uint64_t v87 = *a1;
  if (!*(unsigned char *)(v87 + 200))
  {
LABEL_81:
    __break(1u);
    goto LABEL_84;
  }
  id v88 = v86;
  BOOL v89 = (*(unsigned __int8 *)(v79 + 192) | *(unsigned __int8 *)(v2 + 192)) != 0;
  *(void *)(v87 + 160) = v82;
  *(unsigned char *)(v87 + 168) = (v83 | v84) != 0;
  long long v90 = *(void **)(v87 + 176);
  *(void *)(v87 + 176) = v85;

  long long v91 = *(void **)(v87 + 184);
  *(void *)(v87 + 184) = v88;

  *(unsigned char *)(v87 + 192) = v89;
}

void sub_1824F8530(_Unwind_Exception *exception_object, void *a2)
{
  if (v2) {
    WTF::fastFree(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebGPU::baseCapabilities(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  obuint64_t j = [v3 counterSets];
  uint64_t v4 = [obj countByEnumeratingWithState:&v22 objects:v26 count:16];
  uint64_t v18 = a1;
  unsigned int v5 = 0;
  if (v4)
  {
    int8x8_t v21 = 0;
    uint64_t v6 = *(void *)v23;
    uint64_t v7 = *MEMORY[0x1E4F35180];
    uint64_t v19 = *MEMORY[0x1E4F35178];
    id v8 = v3;
    while (1)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v23 != v6) {
          objc_enumerationMutation(obj);
        }
        int8x8_t v10 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        unsigned int v11 = objc_msgSend(v10, "name", v18);
        char v12 = [v11 isEqualToString:v7];

        if (v12)
        {
          uint32x4_t v13 = v21;
          uint32x4_t v14 = v5;
          int8x8_t v21 = v10;
        }
        else
        {
          int8x16_t v15 = [v10 name];
          char v16 = [v15 isEqualToString:v19];

          uint32x4_t v13 = v5;
          uint32x4_t v14 = v10;
          if ((v16 & 1) == 0) {
            goto LABEL_4;
          }
        }
        id v17 = v10;

        unsigned int v5 = v14;
LABEL_4:
        id v3 = v8;
      }
      uint64_t v4 = [obj countByEnumeratingWithState:&v22 objects:v26 count:16];
      if (!v4) {
        goto LABEL_14;
      }
    }
  }
  int8x8_t v21 = 0;
LABEL_14:

  *(void *)uint64_t v18 = [v3 argumentBuffersSupport];
  *(unsigned char *)(v18 + 8) = 0;
  *(void *)(v18 + 16) = 0;
  *(void *)(v18 + 24) = v5;
  *(unsigned char *)(v18 + 32) = 0;
}

void sub_1824F8734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebGPU::baseFeatures(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  int v22 = 1;
  uint64_t v4 = (_DWORD *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, 1uLL, (unint64_t)&v22);
  uint64_t v5 = *(void *)a1;
  int v6 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(a1 + 12);
  *(_DWORD *)(*(void *)a1 + 4 * v7) = *v4;
  uint64_t v8 = (v7 + 1);
  *(_DWORD *)(a1 + 12) = v8;
  int v9 = 2;
  int v22 = 2;
  if (v8 == v6)
  {
    int8x8_t v10 = (int *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v8 + 1, (unint64_t)&v22);
    int v6 = *(_DWORD *)(a1 + 8);
    uint64_t v8 = *(unsigned int *)(a1 + 12);
    LODWORD(v7) = v8 + 1;
    uint64_t v5 = *(void *)a1;
    int v9 = *v10;
  }
  else
  {
    LODWORD(v7) = v7 + 2;
  }
  *(_DWORD *)(v5 + 4 * v8) = v9;
  *(_DWORD *)(a1 + 12) = v7;
  int v22 = 7;
  if (v7 == v6)
  {
    unsigned int v11 = (_DWORD *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v7 + 1, (unint64_t)&v22);
    uint64_t v5 = *(void *)a1;
    int v6 = *(_DWORD *)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 12);
    *(_DWORD *)(*(void *)a1 + 4 * v7) = *v11;
    uint64_t v12 = (v7 + 1);
    *(_DWORD *)(a1 + 12) = v12;
    int v13 = 9;
    int v22 = 9;
    if (v12 != v6)
    {
LABEL_6:
      LODWORD(v7) = v7 + 2;
      goto LABEL_9;
    }
  }
  else
  {
    *(_DWORD *)(v5 + 4 * v7) = 7;
    uint64_t v12 = (v7 + 1);
    *(_DWORD *)(a1 + 12) = v12;
    int v13 = 9;
    int v22 = 9;
    if (v12 != v6) {
      goto LABEL_6;
    }
  }
  uint32x4_t v14 = (int *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v12 + 1, (unint64_t)&v22);
  int v6 = *(_DWORD *)(a1 + 8);
  uint64_t v12 = *(unsigned int *)(a1 + 12);
  LODWORD(v7) = v12 + 1;
  uint64_t v5 = *(void *)a1;
  int v13 = *v14;
LABEL_9:
  *(_DWORD *)(v5 + 4 * v12) = v13;
  *(_DWORD *)(a1 + 12) = v7;
  int v22 = 8;
  if (v7 == v6)
  {
    int8x16_t v15 = (_DWORD *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v7 + 1, (unint64_t)&v22);
    uint64_t v5 = *(void *)a1;
    int v16 = *(_DWORD *)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 12);
    *(_DWORD *)(*(void *)a1 + 4 * v7) = *v15;
    uint64_t v17 = (v7 + 1);
    *(_DWORD *)(a1 + 12) = v17;
    int v22 = 10;
    if (v17 != v16)
    {
LABEL_11:
      LODWORD(v18) = v7 + 2;
      *(_DWORD *)(v5 + 4 * v17) = 10;
      goto LABEL_14;
    }
  }
  else
  {
    *(_DWORD *)(v5 + 4 * v7) = 8;
    uint64_t v17 = (v7 + 1);
    *(_DWORD *)(a1 + 12) = v17;
    int v22 = 10;
    if (v17 != v6) {
      goto LABEL_11;
    }
  }
  uint64_t v19 = (_DWORD *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v17 + 1, (unint64_t)&v22);
  uint64_t v20 = *(unsigned int *)(a1 + 12);
  LODWORD(v18) = v20 + 1;
  uint64_t v5 = *(void *)a1;
  *(_DWORD *)(*(void *)a1 + 4 * v20) = *v19;
LABEL_14:
  *(_DWORD *)(a1 + 12) = v18;
  if ([v3 supports32BitFloatFiltering])
  {
    int v22 = 11;
    if (v18 == *(_DWORD *)(a1 + 8))
    {
      int8x8_t v21 = (_DWORD *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v18 + 1, (unint64_t)&v22);
      uint64_t v18 = *(unsigned int *)(a1 + 12);
      *(_DWORD *)(*(void *)a1 + 4 * v18) = *v21;
    }
    else
    {
      *(_DWORD *)(v5 + 4 * v18) = 11;
    }
    *(_DWORD *)(a1 + 12) = v18 + 1;
  }
}

void sub_1824F89D8(_Unwind_Exception *a1, void *a2)
{
  uint64_t v5 = *(WTF **)v3;
  if (*(void *)v3)
  {
    *(void *)uint64_t v3 = 0;
    *(_DWORD *)(v3 + 8) = 0;
    WTF::fastFree(v5, a2);
  }

  _Unwind_Resume(a1);
}

unint64_t WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void **)a1;
  if (*(void *)a1 > a3 || (uint64_t v6 = *(unsigned int *)(a1 + 12), (unint64_t)v5 + 4 * v6 <= a3))
  {
    unint64_t v14 = *(unsigned int *)(a1 + 8);
    unint64_t v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10) {
      unint64_t v16 = v15 + 1;
    }
    else {
      unint64_t v16 = 16;
    }
    if (v16 <= a2) {
      unint64_t v17 = a2;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17 > v14)
    {
      if (v17 >> 30) {
        goto LABEL_30;
      }
      uint64_t v18 = *(unsigned int *)(a1 + 12);
      uint64_t v19 = (void *)WTF::fastMalloc((WTF *)(4 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(void *)a1 = v19;
      memcpy(v19, v5, 4 * v18);
      if (v5)
      {
        if (*(void **)a1 == v5)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v20);
      }
    }
    return a3;
  }
  unint64_t v7 = *(unsigned int *)(a1 + 8);
  unint64_t v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10) {
    unint64_t v9 = v8 + 1;
  }
  else {
    unint64_t v9 = 16;
  }
  if (v9 <= a2) {
    unint64_t v10 = a2;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 > v7)
  {
    if (!(v10 >> 30))
    {
      unsigned int v11 = (void *)WTF::fastMalloc((WTF *)(4 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(void *)a1 = v11;
      memcpy(v11, v5, 4 * v6);
      int v13 = *(void **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v12);
        int v13 = *(void **)a1;
      }
      return (unint64_t)v13 + 4 * ((uint64_t)(a3 - (void)v5) >> 2);
    }
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x1824F8B74);
  }
  int v13 = *(void **)a1;
  return (unint64_t)v13 + 4 * ((uint64_t)(a3 - (void)v5) >> 2);
}

int *std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WGPUFeatureName *,false>(int *result, int *a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  unint64_t v10 = v9;
  while (1)
  {
    unint64_t v9 = v10;
    uint64_t v11 = (char *)a2 - (char *)v10;
    unint64_t v12 = a2 - v10;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          int v67 = *(a2 - 1);
          int v68 = *v10;
          if (v67 < *v10)
          {
            *unint64_t v10 = v67;
            *(a2 - 1) = v68;
          }
          return result;
        case 3uLL:
          int v69 = *v10;
          int v70 = v10[1];
          int v71 = *(a2 - 1);
          if (v70 >= *v10)
          {
            if (v71 < v70)
            {
              v10[1] = v71;
              *(a2 - 1) = v70;
              int v110 = *v10;
              int v109 = v10[1];
              if (v109 < *v10)
              {
                *unint64_t v10 = v109;
                v10[1] = v110;
              }
            }
          }
          else
          {
            if (v71 >= v70)
            {
              *unint64_t v10 = v70;
              v10[1] = v69;
              int v119 = *(a2 - 1);
              if (v119 >= v69) {
                return result;
              }
              v10[1] = v119;
            }
            else
            {
              *unint64_t v10 = v71;
            }
            *(a2 - 1) = v69;
          }
          return result;
        case 4uLL:
          unint64_t v22 = (unint64_t)(v10 + 1);
          unint64_t v72 = (int *)v10[1];
          unint64_t v46 = (unint64_t)(v10 + 2);
          int v15 = v10[2];
          unint64_t v73 = (int *)*v10;
          if ((int)v72 >= (int)v73)
          {
            if (v15 >= (int)v72) {
              goto LABEL_201;
            }
            *(_DWORD *)unint64_t v22 = v15;
            *(_DWORD *)unint64_t v46 = v72;
            uint64_t v74 = v10;
            unint64_t v75 = v10 + 1;
            double result = v72;
            if (v15 >= (int)v73)
            {
LABEL_190:
              int v111 = *(a2 - 1);
              if (v111 >= (int)v72) {
                return result;
              }
              goto LABEL_202;
            }
          }
          else
          {
            uint64_t v74 = v10;
            unint64_t v75 = v10 + 2;
            double result = (int *)*v10;
            if (v15 >= (int)v72)
            {
              *unint64_t v10 = (int)v72;
              v10[1] = (int)v73;
              uint64_t v74 = v10 + 1;
              unint64_t v75 = v10 + 2;
              double result = v73;
              if (v15 >= (int)v73) {
                goto LABEL_201;
              }
            }
          }
          *uint64_t v74 = v15;
          _DWORD *v75 = v73;
          LODWORD(v72) = result;
          goto LABEL_190;
        case 5uLL:
          return std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WGPUFeatureName *>(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if (v11 <= 95) {
      break;
    }
    if (!a3)
    {
      if (v10 != a2)
      {
        int64_t v85 = (v12 - 2) >> 1;
        int64_t v86 = v85;
        do
        {
          if (v85 >= v86)
          {
            uint64_t v87 = (2 * v86) | 1;
            id v88 = &v10[v87];
            if (2 * v86 + 2 >= (uint64_t)v12)
            {
              int v89 = *v88;
              long long v91 = &v10[v86];
              int v92 = *v91;
              if (*v88 >= *v91) {
                goto LABEL_163;
              }
            }
            else
            {
              int v89 = v88[1];
              BOOL v90 = *v88 < v89;
              if (*v88 > v89) {
                int v89 = *v88;
              }
              if (v90)
              {
                ++v88;
                uint64_t v87 = 2 * v86 + 2;
              }
              long long v91 = &v10[v86];
              int v92 = *v91;
              if (v89 >= *v91)
              {
LABEL_163:
                while (1)
                {
                  int *v91 = v89;
                  long long v91 = v88;
                  if (v85 < v87) {
                    break;
                  }
                  uint64_t v94 = (2 * v87) | 1;
                  id v88 = &v10[v94];
                  uint64_t v87 = 2 * v87 + 2;
                  if (v87 < (uint64_t)v12)
                  {
                    int v89 = *v88;
                    double result = v88 + 1;
                    int v93 = v88[1];
                    if (*v88 <= v93) {
                      int v89 = v88[1];
                    }
                    if (*v88 >= v93) {
                      uint64_t v87 = v94;
                    }
                    else {
                      ++v88;
                    }
                    if (v89 < v92) {
                      break;
                    }
                  }
                  else
                  {
                    int v89 = *v88;
                    uint64_t v87 = v94;
                    if (*v88 < v92) {
                      break;
                    }
                  }
                }
                int *v91 = v92;
              }
            }
          }
          BOOL v90 = v86-- <= 0;
        }
        while (!v90);
        uint64_t v95 = (unint64_t)v11 >> 2;
        do
        {
          uint64_t v96 = 0;
          int v97 = *v10;
          int64_t v98 = (unint64_t)(v95 - 2) >> 1;
          char v99 = v10;
          do
          {
            while (1)
            {
              char v102 = &v99[v96 + 1];
              uint64_t v103 = (2 * v96) | 1;
              uint64_t v96 = 2 * v96 + 2;
              if (v96 < v95) {
                break;
              }
              uint64_t v96 = v103;
              int *v99 = *v102;
              char v99 = v102;
              if (v103 > v98) {
                goto LABEL_177;
              }
            }
            int v100 = *v102;
            int v101 = v102[1];
            if (*v102 <= v101) {
              int v100 = v102[1];
            }
            if (*v102 >= v101) {
              uint64_t v96 = v103;
            }
            else {
              ++v102;
            }
            int *v99 = v100;
            char v99 = v102;
          }
          while (v96 <= v98);
LABEL_177:
          if (v102 == --a2)
          {
            int *v102 = v97;
          }
          else
          {
            int *v102 = *a2;
            *a2 = v97;
            uint64_t v104 = (char *)v102 - (char *)v10 + 4;
            if (v104 >= 5)
            {
              unint64_t v105 = (((unint64_t)v104 >> 2) - 2) >> 1;
              long long v106 = &v10[v105];
              int v107 = *v106;
              int v108 = *v102;
              if (*v106 < *v102)
              {
                do
                {
                  int *v102 = v107;
                  char v102 = v106;
                  if (!v105) {
                    break;
                  }
                  unint64_t v105 = (v105 - 1) >> 1;
                  long long v106 = &v10[v105];
                  int v107 = *v106;
                }
                while (*v106 < v108);
                int *v102 = v108;
              }
            }
          }
          BOOL v90 = v95-- <= 2;
        }
        while (!v90);
      }
      return result;
    }
    unint64_t v13 = v12 >> 1;
    unint64_t v14 = &v10[v12 >> 1];
    int v15 = *(a2 - 1);
    if ((unint64_t)v11 < 0x201)
    {
      int v18 = *v10;
      int v19 = *v14;
      if (*v10 < *v14)
      {
        if (v15 < v18)
        {
          *unint64_t v14 = v15;
          goto LABEL_32;
        }
        *unint64_t v14 = v18;
        *unint64_t v10 = v19;
        int v31 = *(a2 - 1);
        if (v31 < v19)
        {
          *unint64_t v10 = v31;
LABEL_32:
          *(a2 - 1) = v19;
        }
LABEL_33:
        --a3;
        unint64_t v22 = *v10;
        if (a4) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v15 >= v18) {
        goto LABEL_33;
      }
      *unint64_t v10 = v15;
      *(a2 - 1) = v18;
      unsigned int v21 = *v14;
      if (*v10 >= *v14) {
        goto LABEL_33;
      }
      *unint64_t v14 = *v10;
      *unint64_t v10 = v21;
      --a3;
      unint64_t v22 = v21;
      if (a4) {
        goto LABEL_57;
      }
LABEL_56:
      if (*(v10 - 1) < (int)v22) {
        goto LABEL_57;
      }
      if ((int)v22 < *(a2 - 1))
      {
        unint64_t v46 = (unint64_t)(v10 + 1);
        do
        {
          if ((int *)v46 == a2) {
            goto LABEL_200;
          }
          int v59 = *(_DWORD *)v46;
          v46 += 4;
        }
        while ((int)v22 >= v59);
        unint64_t v10 = (int *)(v46 - 4);
      }
      else
      {
        int v60 = v10 + 1;
        do
        {
          unint64_t v10 = v60;
          if (v60 >= a2) {
            break;
          }
          ++v60;
        }
        while ((int)v22 >= *v10);
      }
      unint64_t v46 = (unint64_t)a2;
      if (v10 < a2)
      {
        unint64_t v46 = (unint64_t)a2;
        while ((int *)v46 != v9)
        {
          int v61 = *(_DWORD *)(v46 - 4);
          v46 -= 4;
          if ((int)v22 >= v61) {
            goto LABEL_98;
          }
        }
        goto LABEL_200;
      }
LABEL_98:
      if ((unint64_t)v10 < v46)
      {
        int v62 = *v10;
        int v15 = *(_DWORD *)v46;
        do
        {
          *unint64_t v10 = v15;
          uint64_t v63 = v10 + 1;
          *(_DWORD *)unint64_t v46 = v62;
          do
          {
            if (v63 == a2) {
              goto LABEL_200;
            }
            int v64 = *v63++;
            int v62 = v64;
          }
          while ((int)v22 >= v64);
          unint64_t v10 = v63 - 1;
          do
          {
            if ((int *)v46 == v9) {
              goto LABEL_200;
            }
            int v65 = *(_DWORD *)(v46 - 4);
            v46 -= 4;
            int v15 = v65;
          }
          while ((int)v22 < v65);
        }
        while ((unint64_t)v10 < v46);
      }
      uint64_t v66 = v10 - 1;
      BOOL v4 = v10 - 1 >= v9;
      BOOL v5 = v10 - 1 == v9;
      if (v10 - 1 != v9) {
        *unint64_t v9 = *v66;
      }
      a4 = 0;
      *uint64_t v66 = v22;
    }
    else
    {
      int v16 = *v14;
      int v17 = *v10;
      if (*v14 >= *v10)
      {
        if (v15 < v16)
        {
          *unint64_t v14 = v15;
          *(a2 - 1) = v16;
          int v20 = *v10;
          if (*v14 < *v10)
          {
            *unint64_t v10 = *v14;
            *unint64_t v14 = v20;
          }
        }
      }
      else
      {
        if (v15 >= v16)
        {
          *unint64_t v10 = v16;
          *unint64_t v14 = v17;
          int v23 = *(a2 - 1);
          if (v23 >= v17) {
            goto LABEL_24;
          }
          *unint64_t v14 = v23;
        }
        else
        {
          *unint64_t v10 = v15;
        }
        *(a2 - 1) = v17;
      }
LABEL_24:
      long long v24 = &v10[v13];
      int v27 = *(v24 - 1);
      long long v25 = v24 - 1;
      int v26 = v27;
      int v28 = v10[1];
      int v29 = *(a2 - 2);
      if (v27 >= v28)
      {
        if (v29 < v26)
        {
          *long long v25 = v29;
          *(a2 - 2) = v26;
          int v30 = v10[1];
          if (*v25 < v30)
          {
            v10[1] = *v25;
            *long long v25 = v30;
          }
        }
      }
      else
      {
        if (v29 >= v26)
        {
          v10[1] = v26;
          *long long v25 = v28;
          int v32 = *(a2 - 2);
          if (v32 >= v28) {
            goto LABEL_38;
          }
          *long long v25 = v32;
        }
        else
        {
          v10[1] = v29;
        }
        *(a2 - 2) = v28;
      }
LABEL_38:
      unint64_t v33 = &v10[v13];
      int v36 = v33[1];
      id v34 = v33 + 1;
      int v35 = v36;
      int v37 = v10[2];
      int v38 = *(a2 - 3);
      if (v36 >= v37)
      {
        if (v38 < v35)
        {
          *id v34 = v38;
          *(a2 - 3) = v35;
          int v39 = v10[2];
          if (*v34 < v39)
          {
            v10[2] = *v34;
            *id v34 = v39;
          }
        }
      }
      else
      {
        if (v38 >= v35)
        {
          v10[2] = v35;
          *id v34 = v37;
          int v40 = *(a2 - 3);
          if (v40 >= v37) {
            goto LABEL_47;
          }
          *id v34 = v40;
        }
        else
        {
          v10[2] = v38;
        }
        *(a2 - 3) = v37;
      }
LABEL_47:
      int v15 = *v14;
      int v41 = *v25;
      int v42 = *v34;
      if (*v14 >= *v25)
      {
        if (v42 >= v15) {
          goto LABEL_55;
        }
        *unint64_t v14 = v42;
        *id v34 = v15;
        id v34 = &v10[v12 >> 1];
        int v15 = v41;
        if (v42 < v41)
        {
LABEL_54:
          *long long v25 = v42;
          *id v34 = v41;
LABEL_55:
          int v44 = *v10;
          *unint64_t v10 = v15;
          *unint64_t v14 = v44;
          --a3;
          unint64_t v22 = *v10;
          if ((a4 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        int v15 = v42;
        int v58 = *v10;
        *unint64_t v10 = v42;
        *unint64_t v14 = v58;
        --a3;
        unint64_t v22 = *v10;
        if (a4) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v42 < v15) {
        goto LABEL_54;
      }
      *long long v25 = v15;
      *unint64_t v14 = v41;
      long long v25 = &v10[v12 >> 1];
      int v15 = v42;
      if (v42 < v41) {
        goto LABEL_54;
      }
      int v15 = v41;
      int v43 = *v10;
      *unint64_t v10 = v41;
      *unint64_t v14 = v43;
      --a3;
      unint64_t v22 = *v10;
      if ((a4 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v45 = 0;
      do
      {
        unint64_t v46 = (unint64_t)&v10[v45 + 1];
        if ((int *)v46 == a2) {
          goto LABEL_200;
        }
        int v15 = *(_DWORD *)v46;
        ++v45;
      }
      while (*(_DWORD *)v46 < (int)v22);
      unint64_t v46 = (unint64_t)&v10[v45];
      uint64_t v47 = a2;
      if (v45 != 1)
      {
        while (v47 != v10)
        {
          int v48 = *--v47;
          if (v48 < (int)v22) {
            goto LABEL_67;
          }
        }
        goto LABEL_200;
      }
      uint64_t v47 = a2;
      do
      {
        if (v46 >= (unint64_t)v47) {
          break;
        }
        int v49 = *--v47;
      }
      while (v49 >= (int)v22);
LABEL_67:
      if (v46 >= (unint64_t)v47)
      {
        int v56 = (int *)(v46 - 4);
        if ((int *)(v46 - 4) == v10) {
          goto LABEL_80;
        }
LABEL_79:
        *unint64_t v10 = *v56;
        goto LABEL_80;
      }
      int v50 = *v47;
      unint64_t v51 = &v10[v45];
      unint64_t v52 = v47;
      do
      {
        *unint64_t v51 = v50;
        int *v52 = v15;
        uint64_t v53 = v51 + 1;
        do
        {
          if (v53 == a2) {
            goto LABEL_200;
          }
          int v54 = *v53++;
          int v15 = v54;
        }
        while (v54 < (int)v22);
        unint64_t v51 = v53 - 1;
        do
        {
          if (v52 == v10) {
            goto LABEL_200;
          }
          int v55 = *--v52;
          int v50 = v55;
        }
        while (v55 >= (int)v22);
      }
      while (v51 < v52);
      int v56 = v53 - 2;
      if (v53 - 2 != v10) {
        goto LABEL_79;
      }
LABEL_80:
      *int v56 = v22;
      if (v46 < (unint64_t)v47) {
        goto LABEL_83;
      }
      BOOL v57 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WGPUFeatureName *>(v10, v56);
      unint64_t v10 = v56 + 1;
      double result = (int *)std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WGPUFeatureName *>(v56 + 1, a2);
      if (result)
      {
        a2 = v56;
        if (v57) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v57)
      {
LABEL_83:
        double result = (int *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WGPUFeatureName *,false>(v9, v56, a3, a4 & 1);
        a4 = 0;
        unint64_t v10 = v56 + 1;
      }
    }
  }
  unint64_t v22 = (unint64_t)(v10 + 1);
  BOOL v77 = v10 == a2 || v22 == (void)a2;
  if (a4)
  {
    if (!v77)
    {
      uint64_t v78 = 4;
      uint64_t v79 = v10;
      do
      {
        int v81 = *v79;
        uint64_t v79 = (int *)v22;
        int v82 = *(_DWORD *)v22;
        if (v82 < v81)
        {
          uint64_t v83 = v78;
          do
          {
            *(int *)((char *)v10 + v83) = v81;
            uint64_t v84 = v83 - 4;
            if (v83 == 4)
            {
              unint64_t v80 = v10;
              goto LABEL_134;
            }
            int v81 = *(int *)((char *)v10 + v83 - 8);
            v83 -= 4;
          }
          while (v82 < v81);
          unint64_t v80 = (int *)((char *)v10 + v84);
LABEL_134:
          *unint64_t v80 = v82;
        }
        unint64_t v22 = (unint64_t)(v79 + 1);
        v78 += 4;
      }
      while (v79 + 1 != a2);
    }
    return result;
  }
  if (!v77)
  {
    unint64_t v46 = 0;
    uint64_t v112 = 1;
    while (1)
    {
      int v15 = v10[v46];
      unint64_t v46 = v112;
      int v113 = *(_DWORD *)v22;
      if (*(_DWORD *)v22 < v15) {
        break;
      }
LABEL_194:
      uint64_t v112 = v46 + 1;
      v22 += 4;
      if ((int *)v22 == a2) {
        return result;
      }
    }
    uint64_t v114 = 0;
    while (1)
    {
      long long v115 = (int *)(v22 + 4 * v114);
      *long long v115 = v15;
      if (!(v46 + v114)) {
        break;
      }
      int v15 = *(v115 - 2);
      --v114;
      if (v113 >= v15)
      {
        *(_DWORD *)(v22 + 4 * v114) = v113;
        goto LABEL_194;
      }
    }
LABEL_200:
    __break(1u);
LABEL_201:
    LODWORD(v72) = v15;
    int v111 = *(a2 - 1);
    if (v111 < (int)v72)
    {
LABEL_202:
      *(_DWORD *)unint64_t v46 = v111;
      *(a2 - 1) = (int)v72;
      int v116 = *(_DWORD *)v46;
      int v117 = *(_DWORD *)v22;
      if (v116 < v117)
      {
        v9[1] = v116;
        v9[2] = v117;
        int v118 = *v9;
        if (v116 < *v9)
        {
          *unint64_t v9 = v116;
          v9[1] = v118;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WGPUFeatureName *>(int *a1, int *a2)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      int v9 = *(a2 - 1);
      int v10 = *a1;
      if (v9 >= *a1) {
        return 1;
      }
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      int v11 = *a1;
      int v12 = a1[1];
      int v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12) {
          return 1;
        }
        a1[1] = v13;
        *(a2 - 1) = v12;
        int v30 = *a1;
        int v29 = a1[1];
        if (v29 >= *a1) {
          return 1;
        }
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        int v35 = *(a2 - 1);
        if (v35 >= v11) {
          return 1;
        }
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      unint64_t v14 = a1 + 1;
      int v15 = a1[1];
      int v16 = a1 + 2;
      int v17 = a1[2];
      int v18 = *a1;
      if (v15 < *a1)
      {
        int v19 = a1;
        int v20 = a1 + 2;
        int v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          int v19 = a1 + 1;
          int v20 = a1 + 2;
          int v21 = v18;
          if (v17 >= v18) {
            goto LABEL_38;
          }
        }
LABEL_35:
        *int v19 = v17;
        *int v20 = v18;
        int v15 = v21;
LABEL_36:
        int v31 = *(a2 - 1);
        if (v31 >= v15) {
          return 1;
        }
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *unint64_t v14 = v17;
        *int v16 = v15;
        int v19 = a1;
        int v20 = a1 + 1;
        int v21 = v15;
        if (v17 >= v18) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_38:
      int v15 = v17;
      int v31 = *(a2 - 1);
      if (v31 >= v15) {
        return 1;
      }
LABEL_39:
      *int v16 = v31;
      *(a2 - 1) = v15;
      int v32 = *v16;
      int v33 = *v14;
      if (v32 >= v33) {
        return 1;
      }
      a1[1] = v32;
      a1[2] = v33;
      int v34 = *a1;
      if (v32 >= *a1) {
        return 1;
      }
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WGPUFeatureName *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      BOOL v4 = a1 + 2;
      int v3 = a1[2];
      int v5 = a1[1];
      int v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5) {
          goto LABEL_20;
        }
        a1[1] = v3;
        *BOOL v4 = v5;
        unint64_t v7 = a1;
        unint64_t v8 = a1 + 1;
      }
      else
      {
        unint64_t v7 = a1;
        unint64_t v8 = a1 + 2;
        if (v3 < v5) {
          goto LABEL_19;
        }
        *a1 = v5;
        a1[1] = v6;
        unint64_t v7 = a1 + 1;
        unint64_t v8 = a1 + 2;
      }
      if (v3 >= v6) {
        goto LABEL_20;
      }
LABEL_19:
      *unint64_t v7 = v3;
      *unint64_t v8 = v6;
LABEL_20:
      unint64_t v22 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v23 = 0;
      for (uint64_t i = 12; ; i += 4)
      {
        int v25 = *v22;
        int v26 = *v4;
        if (*v22 < v26) {
          break;
        }
LABEL_23:
        BOOL v4 = v22++;
        if (v22 == a2) {
          return 1;
        }
      }
      uint64_t v27 = i;
      do
      {
        *(int *)((char *)a1 + v27) = v26;
        uint64_t v28 = v27 - 4;
        if (v27 == 4)
        {
          *a1 = v25;
          if (++v23 != 8) {
            goto LABEL_23;
          }
          return v22 + 1 == a2;
        }
        int v26 = *(int *)((char *)a1 + v27 - 8);
        v27 -= 4;
      }
      while (v25 < v26);
      *(int *)((char *)a1 + v28) = v25;
      if (++v23 != 8) {
        goto LABEL_23;
      }
      return v22 + 1 == a2;
  }
}

int *std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WGPUFeatureName *>(int *result, int *a2, int *a3, int *a4, int *a5)
{
  int v5 = *a2;
  int v6 = *result;
  int v7 = *a3;
  if (*a2 >= *result)
  {
    if (v7 >= v5)
    {
      int v5 = *a3;
      int v9 = *a4;
      if (*a4 >= v7) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    *a2 = v7;
    *a3 = v5;
    int v8 = *result;
    if (*a2 < *result)
    {
      *double result = *a2;
      *a2 = v8;
      int v5 = *a3;
      int v9 = *a4;
      if (*a4 >= *a3) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (v7 >= v5)
    {
      *double result = v5;
      *a2 = v6;
      int v5 = *a3;
      if (*a3 >= v6) {
        goto LABEL_11;
      }
      *a2 = v5;
    }
    else
    {
      *double result = v7;
    }
    *a3 = v6;
    int v5 = v6;
  }
LABEL_11:
  int v9 = *a4;
  if (*a4 >= v5) {
    goto LABEL_17;
  }
LABEL_14:
  *a3 = v9;
  *a4 = v5;
  int v10 = *a2;
  if (*a3 < *a2)
  {
    *a2 = *a3;
    *a3 = v10;
    int v11 = *result;
    if (*a2 < *result)
    {
      *double result = *a2;
      *a2 = v11;
    }
  }
LABEL_17:
  int v12 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v12;
    int v13 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v13;
      int v14 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v14;
        int v15 = *result;
        if (*a2 < *result)
        {
          *double result = *a2;
          *a2 = v15;
        }
      }
    }
  }
  return result;
}

void ___ZN6WebGPU8InstanceC2EU13block_pointerFvU13block_pointerFvvEEPKN3WTF13MachSendRightE_block_invoke(uint64_t a1, id a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = v3;
  WebGPU::Instance::defaultScheduleWork(v4, &v5);
}

void WebGPU::Instance::defaultScheduleWork(uint64_t a1, void *a2)
{
  char v4 = 0;
  id v5 = (WTF::Lock *)(a1 + 64);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 64), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4)
  {
    MEMORY[0x18530AEA0](a1 + 64);
    uint64_t v6 = MEMORY[0x18530B4C0](*a2);
    uint64_t v8 = *(void *)(a1 + 16);
    uint64_t v7 = *(void *)(a1 + 24);
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = MEMORY[0x18530B4C0](*a2);
    uint64_t v8 = *(void *)(a1 + 16);
    uint64_t v7 = *(void *)(a1 + 24);
    if (v8)
    {
LABEL_3:
      if (v7 + 1 != v8) {
        goto LABEL_31;
      }
      LODWORD(v9) = *(_DWORD *)(a1 + 40);
      goto LABEL_11;
    }
  }
  uint64_t v9 = *(unsigned int *)(a1 + 40);
  if (v7)
  {
    if (v7 != v9 - 1) {
      goto LABEL_31;
    }
  }
  else if (v9)
  {
    uint64_t v7 = 0;
    goto LABEL_31;
  }
LABEL_11:
  uint64_t v10 = v9;
  unint64_t v11 = v9 + ((unint64_t)v9 >> 2);
  if (v11 <= 0xF) {
    unint64_t v11 = 15;
  }
  if (v11 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
    return;
  }
  int v12 = *(WTF **)(a1 + 32);
  unsigned int v13 = v11 + 1;
  uint64_t v14 = WTF::fastMalloc((WTF *)(8 * (v11 + 1)));
  int v16 = (void *)v14;
  *(_DWORD *)(a1 + 40) = v13;
  *(void *)(a1 + 32) = v14;
  unint64_t v17 = *(void *)(a1 + 16);
  unint64_t v18 = *(void *)(a1 + 24);
  if (v17 <= v18)
  {
    if (v17 != v18)
    {
      uint64_t v31 = 8 * v17;
      int v32 = (void *)(v14 + v31);
      int v33 = (void **)((char *)v12 + v31);
      uint64_t v34 = 8 * v18 - v31;
      do
      {
        int v35 = *v33;
        *int v33 = 0;
        *v32++ = v35;
        int v36 = *v33++;

        v34 -= 8;
      }
      while (v34);
    }
  }
  else
  {
    if (v18)
    {
      uint64_t v19 = 8 * v18;
      int v20 = (void **)v12;
      do
      {
        int v21 = *v20;
        *int v20 = 0;
        *v16++ = v21;
        unint64_t v22 = *v20++;

        v19 -= 8;
      }
      while (v19);
      unsigned int v13 = *(_DWORD *)(a1 + 40);
      unint64_t v17 = *(void *)(a1 + 16);
      int v16 = *(void **)(a1 + 32);
    }
    uint64_t v23 = v13;
    uint64_t v24 = v17 - v10 + v13;
    if (v17 != v10)
    {
      uint64_t v25 = 8 * v17;
      int v26 = (void **)((char *)v12 + v25);
      uint64_t v27 = &v16[v23];
      uint64_t v28 = v25 - 8 * v10;
      do
      {
        int v29 = *v26;
        *int v26 = 0;
        *(void *)((char *)v27 + v28) = v29;
        int v30 = *v26++;

        v28 += 8;
      }
      while (v28);
    }
    *(void *)(a1 + 16) = v24;
  }
  if (v12)
  {
    if (*(WTF **)(a1 + 32) == v12)
    {
      *(void *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 40) = 0;
    }
    WTF::fastFree(v12, v15);
  }
  uint64_t v7 = *(void *)(a1 + 24);
LABEL_31:
  *(void *)(*(void *)(a1 + 32) + 8 * v7) = v6;
  uint64_t v37 = *(void *)(a1 + 24);
  if (v37 == *(unsigned int *)(a1 + 40) - 1) {
    uint64_t v38 = 0;
  }
  else {
    uint64_t v38 = v37 + 1;
  }
  *(void *)(a1 + 24) = v38;
  int v39 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 64), (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
  if (v39 != 1)
  {
    WTF::Lock::unlockSlow(v5);
  }
}

void sub_1824F9C78(_Unwind_Exception *a1)
{
  int v4 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 == 1) {
    _Unwind_Resume(a1);
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  _Unwind_Resume(a1);
}

void ___ZN6WebGPU8InstanceC2Ev_block_invoke(uint64_t a1, id a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = v3;
  WebGPU::Instance::defaultScheduleWork(v4, &v5);
}

void WebGPU::Instance::~Instance(id *this)
{
  *this = &unk_1ECABAD80;

  if (*((unsigned char *)this + 52)) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(this + 6));
  }
  unint64_t v3 = (unint64_t)this[2];
  unint64_t v4 = (unint64_t)this[3];
  id v5 = (WTF *)this[4];
  if (v3 <= v4)
  {
    if (v3 == v4) {
      goto LABEL_16;
    }
    uint64_t v13 = 8 * v3;
    uint64_t v14 = (void **)((char *)v5 + v13);
    uint64_t v15 = 8 * v4 - v13;
    do
    {
      int v16 = *v14++;

      v15 -= 8;
    }
    while (v15);
  }
  else
  {
    if (v4)
    {
      uint64_t v6 = 8 * v4;
      do
      {
        uint64_t v7 = *(void **)v5;
        id v5 = (WTF *)((char *)v5 + 8);

        v6 -= 8;
      }
      while (v6);
      id v5 = (WTF *)this[4];
      unint64_t v3 = (unint64_t)this[2];
    }
    unint64_t v8 = *((unsigned int *)this + 10);
    if (v3 != v8)
    {
      uint64_t v9 = 8 * v3;
      uint64_t v10 = (void **)((char *)v5 + v9);
      uint64_t v11 = 8 * v8 - v9;
      do
      {
        int v12 = *v10++;

        v11 -= 8;
      }
      while (v11);
    }
  }
  id v5 = (WTF *)this[4];
LABEL_16:
  if (v5)
  {
    this[4] = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v5, v2);
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebGPU::Instance::~Instance(this);
  WTF::fastFree(v1, v2);
}

void WebGPU::Instance::scheduleWork(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *a2;
  *a2 = 0;
  unint64_t v4 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  *unint64_t v4 = MEMORY[0x1E4F14398];
  v4[1] = 50331650;
  v4[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(WTF::Function<void ()(void)>)::{lambda(void *)#1}::__invoke;
  v4[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(WTF::Function<void ()(void)>)::descriptor;
  v4[4] = v3;
  id v6 = (id)MEMORY[0x18530B4C0]();

  id v5 = (void *)MEMORY[0x18530B4C0](v6);
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v5);
}

void sub_1824F9EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1824F9F08(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(WGPURequestAdapterStatus,WTF::Ref<WebGPU::Adapter,WTF::RawPtrTraits<WebGPU::Adapter>,WTF::DefaultRefDerefTraits<WebGPU::Adapter>> &&,WTF::String &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);
  return v2(v1);
}

void sub_1824F9FC0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

double WebGPU::Adapter::createInvalid(WebGPU::Adapter *this, WebGPU::Instance *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0xF0);
  *(_DWORD *)uint64_t v4 = 1;
  *(void *)(v4 + 8) = 0;
  uint64_t v5 = *((void *)a2 + 1);
  if (!v5)
  {
    uint64_t v7 = 0;
    goto LABEL_8;
  }
  char v6 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    MEMORY[0x18530AEA0](v5);
  }
  if (*(void *)(v5 + 24))
  {
    ++*(void *)(v5 + 16);
    uint64_t v7 = v5;
    int v8 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 != 1) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v7 = 0;
    int v9 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 != 1) {
LABEL_9:
    }
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
LABEL_8:
  *(void *)(v4 + 16) = v7;
  *(void *)(v4 + 24) = a2;
  *(_WORD *)(v4 + 232) = 0;
  double result = 0.0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_DWORD *)(v4 + 112) = 0;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(unsigned char *)(v4 + 200) = 0;
  *(void *)(v4 + 208) = 0;
  *(void *)(v4 + 216) = 0;
  *(unsigned char *)(v4 + 224) = 0;
  *(void *)this = v4;
  return result;
}

void sub_1824FA0F8(_Unwind_Exception *a1)
{
  WTF::fastFree((WTF *)v1, v3);
  _Unwind_Resume(a1);
}

uint64_t wgpuInstanceReference(uint64_t result)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(result + 8);
  int v3 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1)
  {
    double result = MEMORY[0x18530AEA0](v2);
    ++*(void *)(v2 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
    if (v3 == 1) {
      return result;
    }
  }
  else
  {
    ++*(void *)(v2 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
    if (v3 == 1) {
      return result;
    }
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)v2);
}

uint64_t wgpuInstanceRelease(uint64_t result, void *a2)
{
  char v2 = 0;
  uint64_t v3 = *(void *)(result + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2)
  {
    double result = MEMORY[0x18530AEA0](v3);
    uint64_t v9 = *(void *)(v3 + 8);
    int v5 = 1;
    uint64_t v6 = v9 - 1;
    *(void *)(v3 + 8) = v9 - 1;
    if (v9 != 1)
    {
LABEL_3:
      uint64_t v7 = 0;
      BOOL v8 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
      if (v5 == 1) {
        goto LABEL_4;
      }
LABEL_14:
      double result = WTF::Lock::unlockSlow((WTF::Lock *)v3);
      if (v6) {
        return result;
      }
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(v3 + 8);
    int v5 = 1;
    uint64_t v6 = v4 - 1;
    *(void *)(v3 + 8) = v4 - 1;
    if (v4 != 1) {
      goto LABEL_3;
    }
  }
  uint64_t v10 = *(void *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 24);
  *(void *)(v3 + 24) = 0;
  BOOL v8 = v10 != 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1) {
    goto LABEL_14;
  }
LABEL_4:
  if (v6) {
    return result;
  }
LABEL_5:
  if (v7) {
    double result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (!v8)
  {
    return WTF::fastFree((WTF *)v3, a2);
  }
  return result;
}

uint64_t wgpuCreateInstance(uint64_t **a1)
{
  char v1 = *a1;
  if (!*a1 || *((_DWORD *)v1 + 2) != 354139136)
  {
    uint64_t v3 = WTF::fastMalloc((WTF *)0x48);
    uint64_t v4 = WTF::fastMalloc((WTF *)0x20);
    goto LABEL_6;
  }
  uint64_t v2 = *v1;
  uint64_t v3 = WTF::fastMalloc((WTF *)0x48);
  if (!v2)
  {
    uint64_t v7 = v1[3];
    BOOL v8 = (uint64_t *)(id)v1[2];
    uint64_t v9 = WTF::fastMalloc((WTF *)0x20);
    *(unsigned char *)uint64_t v9 = 0;
    *(_OWORD *)(v9 + 8) = xmmword_1826CEB80;
    *(void *)(v9 + 24) = v3;
    *(void *)uint64_t v3 = &unk_1ECABAD80;
    *(void *)(v3 + 8) = v9;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    if (v7)
    {
      WTF::MachSendRight::MachSendRight();
      BYTE4(v11) = 1;
      *(unsigned char *)(v3 + 48) = 0;
      *(unsigned char *)(v3 + 52) = 0;
      WTF::MachSendRight::MachSendRight();
      *(unsigned char *)(v3 + 52) = 1;
      if (BYTE4(v11)) {
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v11);
      }
      uint64_t v10 = v8;
      if (v8) {
        goto LABEL_12;
      }
    }
    else
    {
      *(unsigned char *)(v3 + 48) = 0;
      *(unsigned char *)(v3 + 52) = 0;
      uint64_t v10 = v8;
      if (v8)
      {
LABEL_12:
        *(void *)(v3 + 56) = MEMORY[0x18530B4C0](v10);
        *(_WORD *)(v3 + 64) = 256;

        return v3;
      }
    }
    uint64_t v10 = &v11;
    uint64_t v11 = MEMORY[0x1E4F143A8];
    uint64_t v12 = 3221225472;
    uint64_t v13 = ___ZN6WebGPU8InstanceC2EU13block_pointerFvU13block_pointerFvvEEPKN3WTF13MachSendRightE_block_invoke;
    uint64_t v14 = &__block_descriptor_40_e14_v16__0___v___8l;
    uint64_t v15 = v3;
    goto LABEL_12;
  }
  uint64_t v4 = WTF::fastMalloc((WTF *)0x20);
LABEL_6:
  *(unsigned char *)uint64_t v4 = 0;
  *(_OWORD *)(v4 + 8) = xmmword_1826CEB80;
  *(void *)(v4 + 24) = v3;
  *(void *)uint64_t v3 = &unk_1ECABAD80;
  *(void *)(v3 + 8) = v4;
  *(unsigned char *)(v3 + 52) = 0;
  uint64_t v5 = MEMORY[0x1E4F143A8];
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(unsigned char *)(v3 + 48) = 0;
  uint64_t v11 = v5;
  uint64_t v12 = 3221225472;
  uint64_t v13 = ___ZN6WebGPU8InstanceC2Ev_block_invoke;
  uint64_t v14 = &__block_descriptor_40_e14_v16__0___v___8l;
  uint64_t v15 = v3;
  *(void *)(v3 + 56) = MEMORY[0x18530B4C0](&v11);
  *(_WORD *)(v3 + 64) = 0;
  return v3;
}

void sub_1824FA4E8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 52))
  {
    WTF::MachSendRight::~MachSendRight(v15);
    if (!a12)
    {
LABEL_3:
      unint64_t v17 = *(void *)(v13 + 16);
      unint64_t v18 = *(void *)(v13 + 24);
      uint64_t v19 = *(WTF **)(v13 + 32);
      BOOL v20 = v17 == v18;
      if (v17 > v18)
      {
LABEL_4:
        if (v18)
        {
          uint64_t v21 = 8 * v18;
          do
          {
            unint64_t v22 = *(void **)v19;
            uint64_t v19 = (WTF *)((char *)v19 + 8);

            v21 -= 8;
          }
          while (v21);
          uint64_t v19 = *(WTF **)(v13 + 32);
          unint64_t v17 = *(void *)(v13 + 16);
        }
        uint64_t v23 = *(unsigned int *)(v13 + 40);
        if (v17 != v23)
        {
          uint64_t v24 = 8 * v17;
          uint64_t v25 = (void **)((char *)v19 + v24);
          uint64_t v26 = 8 * v23 - v24;
          do
          {
            uint64_t v27 = *v25++;

            v26 -= 8;
          }
          while (v26);
        }
        goto LABEL_17;
      }
LABEL_14:
      if (v20) {
        goto LABEL_18;
      }
      uint64_t v28 = 8 * v17;
      int v29 = (void **)((char *)v19 + v28);
      uint64_t v30 = 8 * v18 - v28;
      do
      {
        uint64_t v31 = *v29++;

        v30 -= 8;
      }
      while (v30);
LABEL_17:
      uint64_t v19 = *(WTF **)(v13 + 32);
LABEL_18:
      if (v19)
      {
        *(void *)(v13 + 32) = 0;
        *(_DWORD *)(v13 + 40) = 0;
        WTF::fastFree(v19, a2);
      }

      WTF::fastFree((WTF *)v13, v32);
      _Unwind_Resume(a1);
    }
  }
  else if (!a12)
  {
    goto LABEL_3;
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);
  unint64_t v17 = *(void *)(v13 + 16);
  unint64_t v18 = *(void *)(v13 + 24);
  uint64_t v19 = *(WTF **)(v13 + 32);
  BOOL v20 = v17 == v18;
  if (v17 > v18) {
    goto LABEL_4;
  }
  goto LABEL_14;
}

void sub_1824FA5EC(_Unwind_Exception *a1)
{
  WTF::fastFree(v1, v4);
  _Unwind_Resume(a1);
}

void sub_1824FA604(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1824FA618(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1824FA62C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t wgpuGetProcAddress()
{
  return 0;
}

uint64_t wgpuInstanceCreateSurface(uint64_t a1, uint64_t a2)
{
  WebGPU::PresentationContext::create(a2, a1, &v3);
  return v3;
}

void wgpuInstanceProcessEvents(uint64_t a1, void *a2)
{
  uint64_t v3 = (atomic_uchar *)(a1 + 64);
  uint64_t v4 = a1 + 16;
  do
  {
    char v5 = 0;
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
    if (v5) {
      MEMORY[0x18530AEA0](v3);
    }
    unint64_t v6 = *(void *)(a1 + 16);
    unint64_t v7 = *(void *)(a1 + 24);
    BOOL v8 = *(WTF **)(a1 + 32);
    unint64_t v9 = *(unsigned int *)(a1 + 40);
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0;
    *(_DWORD *)(v4 + 24) = 0;
    int v10 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 64), (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
    if (v10 == 1)
    {
      if (v6 == v7) {
        goto LABEL_21;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v3);
      if (v6 == v7) {
        goto LABEL_21;
      }
    }
    unint64_t v11 = v6;
    do
    {
      (*(void (**)(void))(*((void *)v8 + v11) + 16))();
      v11 += v9 + 1;
      do
        v11 -= v9;
      while (v11 >= v9);
    }
    while (v7 != v11);
    if (v6 <= v7)
    {
      unint64_t v18 = (void **)((char *)v8 + 8 * v6);
      uint64_t v19 = 8 * v7 - 8 * v6;
      do
      {
        BOOL v20 = *v18++;

        v19 -= 8;
      }
      while (v19);
    }
    else
    {
      if (v7)
      {
        uint64_t v12 = 8 * v7;
        uint64_t v13 = (void **)v8;
        do
        {
          uint64_t v14 = *v13++;

          v12 -= 8;
        }
        while (v12);
      }
      if (v6 != v9)
      {
        uint64_t v15 = (void **)((char *)v8 + 8 * v6);
        uint64_t v16 = 8 * v9 - 8 * v6;
        do
        {
          unint64_t v17 = *v15++;

          v16 -= 8;
        }
        while (v16);
      }
    }
LABEL_21:
    if (v8) {
      WTF::fastFree(v8, a2);
    }
  }
  while (v6 != v7);
}

void wgpuInstanceRequestAdapter(WebGPU::Instance *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v8 = &unk_1ECABADC0;
  *(void *)(v8 + 8) = a3;
  *(void *)(v8 + 16) = a4;
  uint64_t v53 = v8;
  unint64_t v9 = [MEMORY[0x1E4F1CA48] array];
  id v10 = MTLCreateSystemDefaultDevice();
  if (v10) {
    [v9 addObject:v10];
  }

  unsigned int v11 = *(_DWORD *)(a2 + 16);
  id v12 = v9;
  uint64_t v13 = v12;
  uint64_t v14 = v12;
  if (v11 >= 3)
  {

    uint64_t v14 = 0;
  }
  if (*(void *)a2)
  {
    uint64_t v15 = WTF::fastMalloc((WTF *)0xF0);
    *(_DWORD *)uint64_t v15 = 1;
    *(void *)(v15 + 8) = 0;
    uint64_t v16 = *((void *)a1 + 1);
    if (!v16)
    {
      uint64_t v18 = 0;
      goto LABEL_58;
    }
    char v17 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v16, (unsigned __int8 *)&v17, 1u, memory_order_acquire, memory_order_acquire);
    if (v17) {
      MEMORY[0x18530AEA0](v16);
    }
    if (*(void *)(v16 + 24))
    {
      ++*(void *)(v16 + 16);
      uint64_t v18 = v16;
      int v19 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v16, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
      if (v19 == 1) {
        goto LABEL_58;
      }
    }
    else
    {
      uint64_t v18 = 0;
      int v25 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v16, (unsigned __int8 *)&v25, 0, memory_order_release, memory_order_relaxed);
      if (v25 == 1) {
        goto LABEL_58;
      }
    }
LABEL_84:
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
LABEL_58:
    *(void *)(v15 + 16) = v18;
    *(void *)(v15 + 24) = a1;
    *(_WORD *)(v15 + 232) = 0;
    *(_OWORD *)(v15 + 32) = 0u;
    *(_OWORD *)(v15 + 48) = 0u;
    *(_OWORD *)(v15 + 64) = 0u;
    *(_OWORD *)(v15 + 80) = 0u;
    *(_OWORD *)(v15 + 96) = 0u;
    *(_DWORD *)(v15 + 112) = 0;
    *(_OWORD *)(v15 + 120) = 0u;
    *(_OWORD *)(v15 + 136) = 0u;
    *(_OWORD *)(v15 + 152) = 0u;
    *(_OWORD *)(v15 + 168) = 0u;
    *(_OWORD *)(v15 + 184) = 0u;
    *(unsigned char *)(v15 + 200) = 0;
    *(void *)(v15 + 208) = 0;
    *(void *)(v15 + 216) = 0;
    *(unsigned char *)(v15 + 224) = 0;
    int v62 = (id *)v15;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v61 = (id *)v55[0];
    uint64_t v34 = v53;
    uint64_t v53 = 0;
    (*(void (**)(uint64_t, uint64_t, id **, id **))(*(void *)v34 + 16))(v34, 2, &v62, &v61);
    goto LABEL_31;
  }
  if (*(_DWORD *)(a2 + 24))
  {
    uint64_t v20 = WTF::fastMalloc((WTF *)0xF0);
    *(_DWORD *)uint64_t v20 = 1;
    *(void *)(v20 + 8) = 0;
    uint64_t v21 = *((void *)a1 + 1);
    if (!v21)
    {
      uint64_t v23 = 0;
      goto LABEL_30;
    }
    char v22 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v22, 1u, memory_order_acquire, memory_order_acquire);
    if (v22) {
      MEMORY[0x18530AEA0](v21);
    }
    if (*(void *)(v21 + 24))
    {
      ++*(void *)(v21 + 16);
      uint64_t v23 = v21;
      int v24 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
      if (v24 != 1) {
LABEL_85:
      }
        WTF::Lock::unlockSlow((WTF::Lock *)v21);
    }
    else
    {
      uint64_t v23 = 0;
      int v33 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v33, 0, memory_order_release, memory_order_relaxed);
      if (v33 != 1) {
        goto LABEL_85;
      }
    }
LABEL_30:
    *(void *)(v20 + 16) = v23;
    *(void *)(v20 + 24) = a1;
    *(_WORD *)(v20 + 232) = 0;
    *(_OWORD *)(v20 + 32) = 0u;
    *(_OWORD *)(v20 + 48) = 0u;
    *(_OWORD *)(v20 + 64) = 0u;
    *(_OWORD *)(v20 + 80) = 0u;
    *(_OWORD *)(v20 + 96) = 0u;
    *(_DWORD *)(v20 + 112) = 0;
    *(_OWORD *)(v20 + 120) = 0u;
    *(_OWORD *)(v20 + 136) = 0u;
    *(_OWORD *)(v20 + 152) = 0u;
    *(_OWORD *)(v20 + 168) = 0u;
    *(_OWORD *)(v20 + 184) = 0u;
    *(unsigned char *)(v20 + 200) = 0;
    *(void *)(v20 + 208) = 0;
    *(void *)(v20 + 216) = 0;
    *(unsigned char *)(v20 + 224) = 0;
    int v62 = (id *)v20;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v61 = (id *)v55[0];
    uint64_t v34 = v53;
    uint64_t v53 = 0;
    (*(void (**)(uint64_t, uint64_t, id **, id **))(*(void *)v34 + 16))(v34, 1, &v62, &v61);
    goto LABEL_31;
  }
  if (!v14)
  {
    uint64_t v15 = WTF::fastMalloc((WTF *)0xF0);
    *(_DWORD *)uint64_t v15 = 1;
    *(void *)(v15 + 8) = 0;
    uint64_t v16 = *((void *)a1 + 1);
    if (!v16)
    {
      uint64_t v18 = 0;
      goto LABEL_58;
    }
    char v39 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v16, (unsigned __int8 *)&v39, 1u, memory_order_acquire, memory_order_acquire);
    if (v39) {
      MEMORY[0x18530AEA0](v16);
    }
    if (*(void *)(v16 + 24))
    {
      ++*(void *)(v16 + 16);
      uint64_t v18 = v16;
    }
    else
    {
      uint64_t v18 = 0;
    }
    int v43 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v16, (unsigned __int8 *)&v43, 0, memory_order_release, memory_order_relaxed);
    if (v43 == 1) {
      goto LABEL_58;
    }
    goto LABEL_84;
  }
  if (![v14 count])
  {
    uint64_t v20 = WTF::fastMalloc((WTF *)0xF0);
    *(_DWORD *)uint64_t v20 = 1;
    *(void *)(v20 + 8) = 0;
    uint64_t v21 = *((void *)a1 + 1);
    if (!v21)
    {
      uint64_t v23 = 0;
      goto LABEL_30;
    }
    char v40 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v40, 1u, memory_order_acquire, memory_order_acquire);
    if (v40) {
      MEMORY[0x18530AEA0](v21);
    }
    if (*(void *)(v21 + 24))
    {
      ++*(void *)(v21 + 16);
      uint64_t v23 = v21;
    }
    else
    {
      uint64_t v23 = 0;
    }
    int v45 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v45, 0, memory_order_release, memory_order_relaxed);
    if (v45 == 1) {
      goto LABEL_30;
    }
    goto LABEL_85;
  }
  uint64_t v26 = [v14 objectAtIndexedSubscript:0];

  if (!v26)
  {
    uint64_t v27 = (char *)WTF::fastMalloc((WTF *)0xF0);
    *(_DWORD *)uint64_t v27 = 1;
    *((void *)v27 + 1) = 0;
    uint64_t v8 = *((void *)a1 + 1);
    if (!v8)
    {
      uint64_t v42 = 0;
LABEL_72:
      *((void *)v27 + 2) = v42;
      *((void *)v27 + 3) = a1;
      *((_WORD *)v27 + 116) = 0;
      *((_OWORD *)v27 + 2) = 0u;
      *((_OWORD *)v27 + 3) = 0u;
      *((_OWORD *)v27 + 4) = 0u;
      *((_OWORD *)v27 + 5) = 0u;
      *((_OWORD *)v27 + 6) = 0u;
      *((_DWORD *)v27 + 28) = 0;
      *(_OWORD *)(v27 + 120) = 0u;
      *(_OWORD *)(v27 + 136) = 0u;
      *(_OWORD *)(v27 + 152) = 0u;
      *(_OWORD *)(v27 + 168) = 0u;
      *(_OWORD *)(v27 + 184) = 0u;
      v27[200] = 0;
      *((void *)v27 + 26) = 0;
      *((void *)v27 + 27) = 0;
      v27[224] = 0;
      int v62 = (id *)v27;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      int v61 = (id *)v55[0];
      uint64_t v34 = v53;
      uint64_t v53 = 0;
      (*(void (**)(uint64_t, uint64_t, id **, id **))(*(void *)v34 + 16))(v34, 2, &v62, &v61);
LABEL_31:
      (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
      int v35 = v61;
      int v61 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
        {
          WTF::StringImpl::destroy();
          int v36 = v62;
          int v62 = 0;
          if (!v36)
          {
LABEL_40:

            return;
          }
LABEL_37:
          if (*(_DWORD *)v36 == 1)
          {
            WebGPU::Adapter::~Adapter(v36);
            WTF::fastFree(v37, v38);
          }
          else
          {
            --*(_DWORD *)v36;
          }
          goto LABEL_40;
        }
        *(_DWORD *)v35 -= 2;
      }
      int v36 = v62;
      int v62 = 0;
      if (!v36) {
        goto LABEL_40;
      }
      goto LABEL_37;
    }
    char v41 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v8, (unsigned __int8 *)&v41, 1u, memory_order_acquire, memory_order_acquire);
    if (!v41)
    {
LABEL_54:
      if (*(void *)(v8 + 24))
      {
        ++*(void *)(v8 + 16);
        uint64_t v42 = v8;
      }
      else
      {
        uint64_t v42 = 0;
      }
      int v47 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v8, (unsigned __int8 *)&v47, 0, memory_order_release, memory_order_relaxed);
      if (v47 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v8);
      }
      goto LABEL_72;
    }
LABEL_87:
    MEMORY[0x18530AEA0](v8);
    goto LABEL_54;
  }
  uint64_t v27 = [v14 objectAtIndexedSubscript:0];
  WebGPU::hardwareCapabilities(v27, (uint64_t)v55);
  if (!v60)
  {
    WebGPU::Adapter::createInvalid((WebGPU::Adapter *)&v61, a1);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v54 = v62;
    WTF::CompletionHandler<void ()(WGPURequestAdapterStatus,WTF::Ref<WebGPU::Adapter,WTF::RawPtrTraits<WebGPU::Adapter>,WTF::DefaultRefDerefTraits<WebGPU::Adapter>> &&,WTF::String &&)>::operator()(&v53);
    int v44 = v54;
    int v54 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *(_DWORD *)v44 -= 2;
      }
    }
    WTF::Ref<WebGPU::Adapter,WTF::RawPtrTraits<WebGPU::Adapter>,WTF::DefaultRefDerefTraits<WebGPU::Adapter>>::~Ref(&v61);
    goto LABEL_77;
  }
  uint64_t v28 = [v14 objectAtIndexedSubscript:0];
  if (!v60)
  {
    __break(1u);
    goto LABEL_87;
  }
  int v29 = *(_DWORD *)(a2 + 28);
  id v30 = v28;
  uint64_t v31 = WTF::fastMalloc((WTF *)0xF0);
  WebGPU::Adapter::Adapter(v31, v30, (uint64_t)a1, v29 != 0, (uint64_t)v55);
  int v62 = (id *)v31;

  int v61 = 0;
  uint64_t v53 = 0;
  (*(void (**)(uint64_t, void, id **, id **))(*(void *)v8 + 16))(v8, 0, &v62, &v61);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  int v32 = v61;
  int v61 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  unint64_t v46 = v62;
  int v62 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 1)
    {
      WebGPU::Adapter::~Adapter(v46);
      WTF::fastFree(v48, v49);
    }
    else
    {
      --*(_DWORD *)v46;
    }
  }

LABEL_77:
  if (v60)
  {

    unint64_t v51 = v56;
    if (v56)
    {
      int v56 = 0;
      int v57 = 0;
      WTF::fastFree(v51, v50);
    }
  }

  uint64_t v52 = v53;
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  }
}

void sub_1824FB1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::fastFree((WTF *)v11, v13);
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(a1);
}

BOOL wgpuBufferIsValid(uint64_t a1)
{
  return *(unsigned char *)(a1 + 52) == 4 || *(void *)(a1 + 16) != 0;
}

BOOL wgpuAdapterIsValid(uint64_t a1)
{
  return *(void *)(a1 + 8) != 0;
}

BOOL wgpuBindGroupIsValid(uint64_t a1)
{
  return *(void *)(a1 + 64) != 0;
}

uint64_t wgpuBindGroupLayoutIsValid(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 72);
}

BOOL wgpuCommandBufferIsValid(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

BOOL wgpuCommandEncoderIsValid(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

BOOL wgpuComputePassEncoderIsValid(uint64_t a1)
{
  return *(void *)(a1 + 8) != 0;
}

BOOL wgpuComputePipelineIsValid(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

BOOL wgpuDeviceIsValid(uint64_t a1)
{
  return *(void *)(a1 + 8) != 0;
}

uint64_t wgpuExternalTextureIsValid(uint64_t a1)
{
  if (*(void *)(a1 + 16)) {
    return 1;
  }
  else {
    return *(unsigned __int8 *)(a1 + 40);
  }
}

uint64_t wgpuPipelineLayoutIsValid(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 96);
}

uint64_t wgpuPresentationContextIsValid(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
}

BOOL wgpuQuerySetIsValid(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56)) {
    return 1;
  }
  if (*(void *)(a1 + 16)) {
    return 1;
  }
  return *(void *)(a1 + 24) != 0;
}

BOOL wgpuQueueIsValid(uint64_t a1)
{
  return *(void *)(a1 + 8) != 0;
}

BOOL wgpuRenderBundleEncoderIsValid(uint64_t a1)
{
  return *(void *)(a1 + 80) != 0;
}

BOOL wgpuRenderBundleIsValid(uint64_t a1)
{
  return *(void *)(a1 + 16) || [*(id *)(a1 + 24) count] != 0;
}

BOOL wgpuRenderPassEncoderIsValid(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

BOOL wgpuRenderPipelineIsValid(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

BOOL wgpuSamplerIsValid(uint64_t a1)
{
  return *(void *)(a1 + 8) != 0;
}

BOOL wgpuShaderModuleIsValid(uint64_t a1)
{
  return *(_DWORD *)(a1 + 40) == 0;
}

BOOL wgpuTextureIsValid(uint64_t a1)
{
  return *(unsigned char *)(a1 + 104) || *(void *)(a1 + 16) != 0;
}

uint64_t wgpuTextureViewIsValid(uint64_t a1)
{
  if (*(void *)(a1 + 16)) {
    return 1;
  }
  else {
    return *(unsigned __int8 *)(*(void *)(a1 + 96) + 104);
  }
}

uint64_t wgpuXRBindingIsValid()
{
  return 1;
}

uint64_t wgpuXRSubImageIsValid()
{
  return 1;
}

uint64_t wgpuXRProjectionLayerIsValid()
{
  return 1;
}

uint64_t wgpuXRViewIsValid()
{
  return 1;
}

uint64_t WTF::BlockPtrArc<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(WTF::Function<void ()(void)>)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::BlockPtrArc<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(WTF::Function<void ()(void)>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 16))();
}

_DWORD *WTF::Detail::CallableWrapper<wgpuInstanceRequestAdapter::$_0,void,WGPURequestAdapterStatus,WTF::Ref<WebGPU::Adapter,WTF::RawPtrTraits<WebGPU::Adapter>,WTF::DefaultRefDerefTraits<WebGPU::Adapter>> &&,WTF::String &&>::call(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, char *, void))(a1 + 8);
  if (a2)
  {
    WTF::String::utf8();
    if (v13) {
      unint64_t v6 = (char *)v13 + 16;
    }
    else {
      unint64_t v6 = 0;
    }
    v4(a2, 0, v6, *(void *)(a1 + 16));
    uint64_t result = v13;
    if (v13)
    {
      int v9 = *(_DWORD *)v13 - 1;
      if (*(_DWORD *)v13 == 1) {
        return (_DWORD *)WTF::fastFree(v13, v7);
      }
LABEL_14:
      *uint64_t result = v9;
    }
  }
  else
  {
    uint64_t v10 = *a3;
    *a3 = 0;
    WTF::String::utf8();
    if (v13) {
      unsigned int v11 = (char *)v13 + 16;
    }
    else {
      unsigned int v11 = 0;
    }
    v4(0, v10, v11, *(void *)(a1 + 16));
    uint64_t result = v13;
    if (v13)
    {
      int v9 = *(_DWORD *)v13 - 1;
      if (*(_DWORD *)v13 == 1) {
        return (_DWORD *)WTF::fastFree(v13, v12);
      }
      goto LABEL_14;
    }
  }
  return result;
}

void sub_1824FB750(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 != 1)
    {
      --*(_DWORD *)a10;
      _Unwind_Resume(exception_object);
    }
    WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebGPU::createLibrary(void *a1@<X0>, uint64_t a2@<X1>, WebGPU::ShaderModule *a3@<X2>, const WTF::StringImpl **a4@<X3>, void *a5@<X4>, unsigned char *a6@<X8>)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  id v10 = a1;
  id v13 = a5;
  uint64_t v65 = 0;
  uint64_t v14 = *a4;
  if (!*a4) {
    goto LABEL_32;
  }
  int v57 = a6;
  if (!*((_DWORD *)v14 + 1)) {
    goto LABEL_28;
  }
  uint64_t v15 = *(void *)(a2 + 152);
  if (!v15)
  {
    uint64_t v14 = *a4;
    if (*a4) {
      goto LABEL_28;
    }
    goto LABEL_32;
  }
  int v16 = *(_DWORD *)(v15 - 8);
  unsigned int v17 = *((_DWORD *)v14 + 4);
  if (v17 < 0x100)
  {
    unsigned int v19 = WTF::StringImpl::hashSlowCase(v14);
    uint64_t v18 = a3;
  }
  else
  {
    uint64_t v18 = a3;
    unsigned int v19 = v17 >> 8;
  }
  for (int i = 0; ; v19 = i + v21)
  {
    uint64_t v21 = v19 & v16;
    char v22 = *(WTF **)(v15 + 16 * v21);
    if (v22 == (WTF *)-1) {
      goto LABEL_10;
    }
    if (!v22)
    {
      uint64_t v24 = *(void *)(a2 + 152);
      if (!v24)
      {
        uint64_t v23 = 0;
        goto LABEL_24;
      }
      uint64_t v25 = *(unsigned int *)(v24 - 4);
      uint64_t v23 = v24 + 16 * v25;
LABEL_18:
      a6 = v57;
      a3 = v18;
      if (v23 == v24 + 16 * v25) {
        uint64_t v26 = a4;
      }
      else {
        uint64_t v26 = (const WTF::StringImpl **)(v23 + 8);
      }
      uint64_t v14 = *v26;
      if (!*v26) {
        goto LABEL_32;
      }
LABEL_28:
      *(_DWORD *)v14 += 2;
      int v64 = v14;
      if (*((_DWORD *)v14 + 1)) {
        BOOL v28 = *(_DWORD *)(a2 + 40) == 0;
      }
      else {
        BOOL v28 = 0;
      }
      if (!v28) {
        goto LABEL_32;
      }
      id v29 = *(id *)(a2 + 64);

      int v56 = a3;
      if (a3)
      {
        if (v29)
        {
          uint64_t v32 = *(void *)(a2 + 48);
          if (v32)
          {
            int v33 = *(_DWORD *)(v32 - 8);
            unsigned int v34 = *((_DWORD *)v14 + 4);
            if (v34 < 0x100) {
              unsigned int v35 = WTF::StringImpl::hashSlowCase(v14);
            }
            else {
              unsigned int v35 = v34 >> 8;
            }
            for (j = 0; ; unsigned int v35 = j + v37)
            {
              int v37 = v35 & v33;
              uint64_t v38 = *(WTF **)(v32 + 16 * (v35 & v33));
              if (v38 != (WTF *)-1 && (!v38 || (WTF::equal(v38, v64, v30) & 1) != 0)) {
                break;
              }
              ++j;
            }
          }
        }
      }
      int v39 = *(_DWORD *)(a2 + 40);
      if (v39 == -1) {
        uint64_t v40 = -1;
      }
      else {
        uint64_t v40 = *(unsigned int *)(a2 + 40);
      }
      if (!v40)
      {
        if (!v39)
        {
          char v41 = *(WGSL **)(a2 + 24);
          if (v41)
          {
            LOBYTE(v61) = 0;
            char v63 = 0;
            if (v56 && *((unsigned char *)v56 + 32) && *((_DWORD *)v56 + 7))
            {
              WebGPU::ShaderModule::convertPipelineLayout(v56, (uint64_t)&v59);
              if (!v63)
              {
                int v61 = v59;
                uint64_t v62 = v60;
                char v63 = 1;
                int v50 = (const WTF::String *)&v61;
LABEL_73:
                WGSL::prepare(v41, &v64, v50, v31);
              }
              int v43 = v61;
              if (HIDWORD(v62))
              {
                int v44 = (WTF *)((char *)v61 + 24 * HIDWORD(v62));
                do
                {
                  uint64_t v45 = *((unsigned int *)v43 + 5);
                  if (v45)
                  {
                    uint64_t v46 = 120 * v45;
                    int v47 = (_DWORD **)(*((void *)v43 + 1) + 40);
                    do
                    {
                      int v48 = *v47;
                      *int v47 = 0;
                      if (v48)
                      {
                        if (*v48 == 2) {
                          WTF::StringImpl::destroy();
                        }
                        else {
                          *v48 -= 2;
                        }
                      }
                      v47 += 15;
                      v46 -= 120;
                    }
                    while (v46);
                  }
                  int v49 = (WTF *)*((void *)v43 + 1);
                  if (v49)
                  {
                    *((void *)v43 + 1) = 0;
                    *((_DWORD *)v43 + 4) = 0;
                    WTF::fastFree(v49, v42);
                  }
                  int v43 = (WTF *)((char *)v43 + 24);
                }
                while (v43 != v44);
                int v43 = v61;
              }
              if (v43)
              {
                int v61 = 0;
                LODWORD(v62) = 0;
                WTF::fastFree(v43, v42);
              }
              int v61 = v59;
              uint64_t v62 = v60;
              if (v63)
              {
                int v50 = (const WTF::String *)&v61;
                goto LABEL_73;
              }
            }
            int v50 = 0;
            goto LABEL_73;
          }
          goto LABEL_96;
        }
LABEL_94:
        std::__throw_bad_variant_access[abi:sn180100]();
        __break(1u);
        __break(0xC471u);
        goto LABEL_97;
      }
      if (v40 == 1)
      {
        if (v39 != 1) {
          goto LABEL_94;
        }
      }
      else if (v39 != 2)
      {
        goto LABEL_94;
      }
LABEL_96:
      __break(0xC471u);
LABEL_97:
      JUMPOUT(0x1824FD744);
    }
    if (WTF::equal(v22, *a4, v12)) {
      break;
    }
LABEL_10:
    ++i;
  }
  uint64_t v23 = v15 + 16 * v21;
  uint64_t v24 = *(void *)(a2 + 152);
  if (v24)
  {
    uint64_t v25 = *(unsigned int *)(v24 - 4);
    goto LABEL_18;
  }
LABEL_24:
  a6 = v57;
  a3 = v18;
  if (v23 == v24) {
    uint64_t v27 = a4;
  }
  else {
    uint64_t v27 = (const WTF::StringImpl **)(v23 + 8);
  }
  uint64_t v14 = *v27;
  if (*v27) {
    goto LABEL_28;
  }
LABEL_32:
  *a6 = 0;
  a6[104] = 0;
  int v64 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 != 2)
    {
      *(_DWORD *)v14 -= 2;
      goto LABEL_76;
    }
    WTF::StringImpl::destroy();
    uint64_t v51 = v65;
    if (v65) {
      goto LABEL_79;
    }
  }
  else
  {
LABEL_76:
    uint64_t v51 = v65;
    if (!v65) {
      goto LABEL_90;
    }
LABEL_79:
    uint64_t v52 = *(unsigned int *)(v51 - 4);
    if (v52)
    {
      uint64_t v53 = v51;
      do
      {
        int v54 = *(_DWORD **)v53;
        if (*(void *)v53 != -1)
        {
          uint64_t v55 = *(unsigned int *)(v53 + 24);
          if (v55 != -1)
          {
            ((void (*)(WTF **, uint64_t))off_1ECABADD8[v55])(&v59, v53 + 8);
            int v54 = *(_DWORD **)v53;
          }
          *(_DWORD *)(v53 + 24) = -1;
          *(void *)uint64_t v53 = 0;
          if (v54)
          {
            if (*v54 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v54 -= 2;
            }
          }
        }
        v53 += 32;
        --v52;
      }
      while (v52);
    }
    WTF::fastFree((WTF *)(v51 - 16), v11);
  }
LABEL_90:
}

void sub_1824FD768(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF *a22,uint64_t a23,int a24,int a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,int a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46)
{
  WGSL::Reflection::EntryPointInformation::~EntryPointInformation(v47, a2);

  if (a39 != -1) {
    ((void (*)(WTF **, uint64_t *))off_1ECABAEE0[a39])(&a22, &a36);
  }
  if (a46 != -1) {
    ((void (*)(WTF **, char *))off_1ECABAEF0[a46])(&a22, &a41);
  }
  std::__optional_destruct_base<WGSL::PipelineLayout,false>::~__optional_destruct_base[abi:sn180100]((uint64_t *)(v48 - 208), v50);
  uint64_t v52 = *(_DWORD **)(v48 - 184);
  *(void *)(v48 - 184) = 0;
  if (v52)
  {
    if (*v52 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v52 -= 2;
    }
  }
  WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::~HashMap((uint64_t *)(v48 - 176), v51);

  _Unwind_Resume(a1);
}

__n128 std::optional<WebGPU::LibraryCreationResult>::optional[abi:sn180100]<WebGPU::LibraryCreationResult,0>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  *(_OWORD *)a1 = v2;
  uint64_t v3 = *((void *)a2 + 2);
  *((void *)a2 + 2) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 40) = 0;
  if (*((unsigned char *)a2 + 40))
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    uint64_t v4 = *((void *)a2 + 3);
    *((void *)a2 + 3) = 0;
    *(void *)(a1 + 24) = v4;
    LODWORD(v4) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = 0;
    *(_DWORD *)(a1 + 32) = v4;
    LODWORD(v4) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = 0;
    *(_DWORD *)(a1 + 36) = v4;
    *(unsigned char *)(a1 + 40) = 1;
  }
  *(void *)(a1 + 48) = 0;
  uint64_t v5 = *((void *)a2 + 6);
  *((void *)a2 + 6) = 0;
  *(void *)(a1 + 48) = v5;
  __n128 result = *(__n128 *)((char *)a2 + 56);
  uint64_t v7 = *((void *)a2 + 11);
  *(_OWORD *)(a1 + 72) = *(long long *)((char *)a2 + 72);
  *(__n128 *)(a1 + 56) = result;
  *(void *)(a1 + 88) = v7;
  *(void *)(a1 + 96) = 0;
  uint64_t v8 = *((void *)a2 + 12);
  *((void *)a2 + 12) = 0;
  *(void *)(a1 + 96) = v8;
  *(unsigned char *)(a1 + 104) = 1;
  return result;
}

void WebGPU::LibraryCreationResult::~LibraryCreationResult(WebGPU::LibraryCreationResult *this, void *a2)
{
  uint64_t v3 = *((void *)this + 12);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = *((void *)this + 12);
      do
      {
        unint64_t v6 = *(_DWORD **)v5;
        if (*(void *)v5 != -1)
        {
          uint64_t v7 = *(unsigned int *)(v5 + 24);
          if (v7 != -1)
          {
            ((void (*)(char *, uint64_t))off_1ECABADD8[v7])(&v8, v5 + 8);
            unint64_t v6 = *(_DWORD **)v5;
          }
          *(_DWORD *)(v5 + 24) = -1;
          *(void *)uint64_t v5 = 0;
          if (v6)
          {
            if (*v6 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v6 -= 2;
            }
          }
        }
        v5 += 32;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  WGSL::Reflection::EntryPointInformation::~EntryPointInformation((WebGPU::LibraryCreationResult *)((char *)this + 8), a2);
}

void WGSL::PipelineLayout::~PipelineLayout(WGSL::PipelineLayout *this, void *a2)
{
  unsigned int v3 = *((_DWORD *)this + 3);
  uint64_t v4 = *(void *)this;
  if (v3)
  {
    uint64_t v5 = v4 + 24 * v3;
    do
    {
      uint64_t v6 = *(unsigned int *)(v4 + 20);
      if (v6)
      {
        uint64_t v7 = 120 * v6;
        char v8 = (_DWORD **)(*(void *)(v4 + 8) + 40);
        do
        {
          int v9 = *v8;
          *char v8 = 0;
          if (v9)
          {
            if (*v9 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v9 -= 2;
            }
          }
          v8 += 15;
          v7 -= 120;
        }
        while (v7);
      }
      id v10 = *(WTF **)(v4 + 8);
      if (v10)
      {
        *(void *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        WTF::fastFree(v10, a2);
      }
      v4 += 24;
    }
    while (v4 != v5);
    uint64_t v4 = *(void *)this;
  }
  if (v4)
  {
    *(void *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
}

uint64_t *WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = *a1;
      do
      {
        uint64_t v6 = *(_DWORD **)v5;
        if (*(void *)v5 != -1)
        {
          uint64_t v7 = *(unsigned int *)(v5 + 24);
          if (v7 != -1)
          {
            ((void (*)(char *, uint64_t))off_1ECABADD8[v7])(&v9, v5 + 8);
            uint64_t v6 = *(_DWORD **)v5;
          }
          *(_DWORD *)(v5 + 24) = -1;
          *(void *)uint64_t v5 = 0;
          if (v6)
          {
            if (*v6 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v6 -= 2;
            }
          }
        }
        v5 += 32;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

id WebGPU::createFunction(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  uint64_t v7 = objc_opt_new();
  if (*(void *)(a2 + 8)) {
    char v8 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    char v8 = &stru_1ECABF938;
  }
  [v7 setName:v8];

  id v14 = 0;
  char v9 = (void *)[v5 newFunctionWithDescriptor:v7 error:&v14];
  id v10 = v14;
  unsigned int v11 = v10;
  if (v10)
  {
    id v13 = v10;
    WTFLogAlways();
  }
  objc_msgSend(v9, "setLabel:", v6, v13);

  return v9;
}

void sub_1824FDE64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824FDE80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824FDE9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1824FDEB0(_Unwind_Exception *a1)
{
  id v6 = v5;

  _Unwind_Resume(a1);
}

id WebGPU::errorValidatingBindGroup(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 64);
  if (!v3 || (unsigned int v4 = *(_DWORD *)(a1 + 60)) == 0)
  {
LABEL_55:
    int v43 = 0;
    goto LABEL_58;
  }
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v49 = v6 + 48 * v4;
  uint64_t v50 = a1;
  uint64_t v51 = a2;
  while (1)
  {
    unsigned int v7 = *(_DWORD *)(v6 + 28);
    if (v7) {
      break;
    }
LABEL_4:
    v6 += 48;
    if (v6 == v49) {
      goto LABEL_55;
    }
  }
  uint64_t v8 = *(void *)(v6 + 16);
  uint64_t v9 = v8 + 40 * v7;
  uint64_t v52 = v6;
  while (1)
  {
    if (*(_DWORD *)(v8 + 16)) {
      goto LABEL_7;
    }
    int v10 = *(_DWORD *)(v8 + 4);
    uint64_t v11 = *(void *)(v3 + 48);
    if (!v11) {
      goto LABEL_56;
    }
    int v12 = *(_DWORD *)(v11 - 8);
    unsigned int v13 = 9 * ((v10 + ~(v10 << 15)) ^ ((v10 + ~(v10 << 15)) >> 10));
    unsigned int v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
    int v15 = v14 ^ HIWORD(v14);
    unsigned int v16 = v12 & v15;
    unsigned int v17 = (int *)(v11 + 136 * (v12 & v15));
    int v18 = *v17;
    if (*v17 != v10)
    {
      int v19 = 1;
      while (v18 != -1)
      {
        unsigned int v16 = (v16 + v19) & v12;
        unsigned int v17 = (int *)(v11 + 136 * v16);
        int v18 = *v17;
        ++v19;
        if (*v17 == v10) {
          goto LABEL_16;
        }
      }
      unsigned int v17 = (int *)(v11 + 136 * *(unsigned int *)(v11 - 4));
    }
LABEL_16:
    if (v17 == (int *)(v11 + 136 * *(unsigned int *)(v11 - 4)))
    {
LABEL_56:
      objc_msgSend(NSString, "stringWithFormat:", @"Buffer size is missing for binding at index %u bind group", 0xFFFFFFFFLL, *(unsigned int *)(v8 + 4), v45, v46, v47, v48);
      goto LABEL_57;
    }
    if (v17[12])
    {
      unint64_t v20 = 0;
      if (!a2) {
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v20 = *((void *)v17 + 4);
      if (!a2) {
        goto LABEL_27;
      }
    }
    uint64_t v21 = *a2;
    if (!*a2) {
      goto LABEL_27;
    }
    unsigned int v22 = *(_DWORD *)(v21 - 8);
    int v23 = v17[2];
    unsigned int v24 = 9 * ((v23 + ~(v23 << 15)) ^ ((v23 + ~(v23 << 15)) >> 10));
    unsigned int v25 = (v24 ^ (v24 >> 6)) + ~((v24 ^ (v24 >> 6)) << 11);
    uint64_t v26 = (v25 ^ HIWORD(v25)) & v22;
    int v27 = *(_DWORD *)(v21 + 16 * v26);
    if (v27 == v23) {
      break;
    }
    int v28 = 1;
    while (v27 != -1)
    {
      uint64_t v26 = (v26 + v28) & v22;
      int v27 = *(_DWORD *)(v21 + 16 * v26);
      ++v28;
      if (v27 == v23) {
        goto LABEL_26;
      }
    }
LABEL_27:
    if (!v20) {
      goto LABEL_7;
    }
LABEL_28:
    uint64_t v29 = *(void *)(v8 + 8);
    if (!v29) {
      goto LABEL_7;
    }
    uint64_t v30 = *(void *)(a1 + 88);
    if (!v30) {
      goto LABEL_47;
    }
    unsigned int v31 = *(_DWORD *)(v30 - 8);
    uint64_t v32 = v31 & v15;
    int v33 = *(_DWORD *)(v30 + 8 * v32);
    if (v33 == v10)
    {
LABEL_34:
      uint64_t v35 = 0;
      if (a3) {
        goto LABEL_44;
      }
    }
    else
    {
      int v34 = 1;
      while (v33 != -1)
      {
        uint64_t v32 = (v32 + v34) & v31;
        int v33 = *(_DWORD *)(v30 + 8 * v32);
        ++v34;
        if (v33 == v10) {
          goto LABEL_34;
        }
      }
      uint64_t v32 = *(unsigned int *)(v30 - 4);
      uint64_t v35 = 0;
      if (a3)
      {
LABEL_44:
        if (v32 == *(_DWORD *)(v30 - 4)) {
          goto LABEL_48;
        }
        uint64_t v37 = *(unsigned int *)(v30 + 8 * v32 + 4);
        if (*(_DWORD *)(a3 + 12) > v37)
        {
          uint64_t v35 = *(unsigned int *)(*(void *)a3 + 4 * v37);
          goto LABEL_48;
        }
LABEL_47:
        uint64_t v35 = 0;
      }
    }
LABEL_48:
    uint64_t v38 = *(void *)(v8 + 24);
    id v39 = *(id *)(v29 + 16);
    unint64_t v40 = [v39 length];
    unint64_t v41 = v38 + v35;

    BOOL v42 = v40 >= v41 && v40 - v41 >= v20;
    a1 = v50;
    a2 = v51;
    uint64_t v6 = v52;
    if (!v42 || v20 > *(void *)(v8 + 32))
    {
      [NSString stringWithFormat:@"buffer length(%zu) minus offset(%llu), (resourceOffset(%llu) + dynamicOffset(%u)), is less than required bufferSize(%llu)", 0xFFFFFFFFLL, v40, v41, *(void *)(v8 + 24), v35, v20];
      goto LABEL_57;
    }
LABEL_7:
    v8 += 40;
    if (v8 == v9) {
      goto LABEL_4;
    }
  }
LABEL_26:
  if (v26 == *(_DWORD *)(v21 - 4)) {
    goto LABEL_27;
  }
  unint64_t v36 = *(void *)(v21 + 16 * v26 + 8);
  if (!v20 || v36 <= v20)
  {
    if (v20 <= v36) {
      unint64_t v20 = v36;
    }
    if (!v20) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }
  objc_msgSend(NSString, "stringWithFormat:", @"buffer size from WGSL shader(%llu) is less than the binding buffer size(%llu)", 0xFFFFFFFFLL, v36, v20, v46, v47, v48);
  int v43 = LABEL_57:;
LABEL_58:
  return v43;
}

void sub_1824FE22C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WGSL::Reflection::EntryPointInformation *WGSL::Reflection::EntryPointInformation::EntryPointInformation(WGSL::Reflection::EntryPointInformation *this, const WGSL::Reflection::EntryPointInformation *a2)
{
  unsigned int v4 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v4 += 2;
  }
  *(void *)this = v4;
  id v5 = (_DWORD *)*((void *)a2 + 1);
  if (v5) {
    *v5 += 2;
  }
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 1) = v5;
  *((unsigned char *)this + 32) = 0;
  if (*((unsigned char *)a2 + 32))
  {
    WTF::Vector<WGSL::BindGroupLayout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 16, (uint64_t *)a2 + 2);
    *((unsigned char *)this + 32) = 1;
  }
  *((void *)this + 5) = 0;
  uint64_t v6 = *((void *)a2 + 5);
  if (!v6) {
    goto LABEL_34;
  }
  uint64_t v7 = *(unsigned int *)(v6 - 12);
  if (!v7) {
    goto LABEL_34;
  }
  unsigned int v8 = (v7 - 1) | ((v7 - 1) >> 1) | (((v7 - 1) | ((v7 - 1) >> 1)) >> 2);
  unsigned int v9 = v8 | (v8 >> 4) | ((v8 | (v8 >> 4)) >> 8);
  unint64_t v10 = (v9 | HIWORD(v9)) + 1;
  if (v10 > 0x400)
  {
    if (v10 > 2 * v7) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }
  if (3 * v10 <= 4 * v7)
  {
LABEL_13:
    LODWORD(v10) = 2 * v10;
    if (v10 <= 0x400) {
      goto LABEL_14;
    }
LABEL_16:
    if ((double)v10 * 0.416666667 > (double)v7) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_14:
  if ((double)v10 * 0.604166667 <= (double)v7) {
LABEL_17:
  }
    LODWORD(v10) = 2 * v10;
LABEL_18:
  if (v10 <= 8) {
    unsigned int v11 = 8;
  }
  else {
    unsigned int v11 = v10;
  }
  uint64_t v12 = WTF::fastMalloc((WTF *)((32 * v11) | 0x10));
  bzero((void *)(v12 + 16), 32 * v11);
  *((void *)this + 5) = v12 + 16;
  *(_DWORD *)(v12 + 12) = v11;
  *(_DWORD *)(*((void *)this + 5) - 8) = v11 - 1;
  *(_DWORD *)(*((void *)this + 5) - 12) = v7;
  *(_DWORD *)(*((void *)this + 5) - 16) = 0;
  uint64_t v13 = *((void *)a2 + 5);
  if (!v13)
  {
    uint64_t v16 = 0;
    uint64_t v15 = 0;
LABEL_29:
    if (v13) {
      goto LABEL_30;
    }
    uint64_t v18 = 0;
    if (!v16) {
      goto LABEL_34;
    }
    while (1)
    {
LABEL_36:
      uint64_t v22 = *((void *)this + 5);
      if (v22)
      {
        int v23 = *(_DWORD *)(v22 - 8);
        unsigned int v24 = *(WTF::StringImpl **)v16;
        unsigned int v25 = *(_DWORD *)(*(void *)v16 + 16);
        if (v25 < 0x100) {
          goto LABEL_40;
        }
      }
      else
      {
        int v23 = 0;
        unsigned int v24 = *(WTF::StringImpl **)v16;
        unsigned int v25 = *(_DWORD *)(*(void *)v16 + 16);
        if (v25 < 0x100)
        {
LABEL_40:
          unsigned int v26 = WTF::StringImpl::hashSlowCase(v24);
          goto LABEL_41;
        }
      }
      unsigned int v26 = v25 >> 8;
LABEL_41:
      int v27 = 0;
      do
      {
        uint64_t v28 = v26 & v23;
        unsigned int v26 = ++v27 + v28;
      }
      while (*(void *)(v22 + 32 * v28));
      uint64_t v29 = *(WTF::StringImpl **)v16;
      if (*(void *)v16) {
        *(_DWORD *)v29 += 2;
      }
      uint64_t v30 = *(_DWORD **)(v16 + 8);
      if (v30) {
        *v30 += 2;
      }
      long long v34 = *(_OWORD *)(v16 + 16);
      *(void *)(v22 + 32 * v28) = v29;
      uint64_t v31 = v22 + 32 * v28;
      uint64_t v32 = *(_DWORD **)(v31 + 8);
      *(void *)(v31 + 8) = v30;
      if (!v32) {
        goto LABEL_50;
      }
      if (*v32 != 2)
      {
        *v32 -= 2;
LABEL_50:
        *(_OWORD *)(v31 + 16) = v34;
        uint64_t v33 = v16 + 32;
        uint64_t v16 = v15;
        if (v33 != v15) {
          goto LABEL_53;
        }
        goto LABEL_35;
      }
      WTF::StringImpl::destroy();
      *(_OWORD *)(v31 + 16) = v34;
      uint64_t v33 = v16 + 32;
      uint64_t v16 = v15;
      if (v33 != v15)
      {
LABEL_53:
        uint64_t v16 = v33;
        while ((unint64_t)(*(void *)v16 + 1) <= 1)
        {
          v16 += 32;
          if (v16 == v15)
          {
            uint64_t v16 = v15;
            break;
          }
        }
      }
LABEL_35:
      if (v16 == v18) {
        goto LABEL_34;
      }
    }
  }
  uint64_t v14 = *(unsigned int *)(v13 - 4);
  uint64_t v15 = v13 + 32 * v14;
  if (*(_DWORD *)(v13 - 12))
  {
    uint64_t v16 = *((void *)a2 + 5);
    if (v14)
    {
      uint64_t v17 = 32 * v14;
      uint64_t v16 = *((void *)a2 + 5);
      do
      {
        if ((unint64_t)(*(void *)v16 + 1) > 1) {
          goto LABEL_29;
        }
        v16 += 32;
        v17 -= 32;
      }
      while (v17);
      uint64_t v16 = v15;
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  uint64_t v16 = v13 + 32 * v14;
  uint64_t v15 = v16;
LABEL_30:
  uint64_t v18 = v13 + 32 * *(unsigned int *)(v13 - 4);
  if (v18 != v16) {
    goto LABEL_36;
  }
LABEL_34:
  long long v19 = *((_OWORD *)a2 + 3);
  long long v20 = *((_OWORD *)a2 + 4);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((_OWORD *)this + 3) = v19;
  *((_OWORD *)this + 4) = v20;
  return this;
}

void sub_1824FE584(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WGSL::PipelineLayout,false>::~__optional_destruct_base[abi:sn180100](v3, a2);
  id v5 = *(_DWORD **)(v2 + 8);
  *(void *)(v2 + 8) = 0;
  if (v5)
  {
    if (*v5 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v5 -= 2;
    }
  }
  uint64_t v6 = *(_DWORD **)v2;
  *(void *)uint64_t v2 = 0;
  if (v6)
  {
    if (*v6 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *v6 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WGSL::BindGroupLayout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *((unsigned int *)a2 + 3);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v3;
  if (v3)
  {
    if (v3 >= 0xAAAAAAB)
    {
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x1824FE76CLL);
    }
    int v5 = 24 * v3;
    uint64_t v6 = WTF::fastMalloc((WTF *)(24 * v3));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(void *)a1 = v6;
    unsigned int v7 = *((_DWORD *)a2 + 3);
    if (v7)
    {
      uint64_t v8 = v6;
      uint64_t v9 = *a2;
      uint64_t v10 = *a2 + 24 * v7;
      do
      {
        *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
        uint64_t v11 = *(unsigned int *)(v9 + 20);
        *(void *)(v8 + 8) = 0;
        *(void *)(v8 + 16) = 0;
        *(_DWORD *)(v8 + 20) = v11;
        if (v11)
        {
          if (v11 >= 0x2222223) {
            goto LABEL_15;
          }
          unsigned int v12 = 120 * v11;
          uint64_t v13 = WTF::fastMalloc((WTF *)(120 * v11));
          *(_DWORD *)(v8 + 16) = v12 / 0x78;
          *(void *)(v8 + 8) = v13;
          unsigned int v14 = *(_DWORD *)(v9 + 20);
          if (v14)
          {
            uint64_t v15 = *(long long **)(v9 + 8);
            uint64_t v16 = (long long *)((char *)v15 + 120 * v14);
            do
            {
              long long v17 = *v15;
              long long v18 = v15[1];
              *(void *)(v13 + 32) = *((void *)v15 + 4);
              *(_OWORD *)uint64_t v13 = v17;
              *(_OWORD *)(v13 + 16) = v18;
              long long v19 = (_DWORD *)*((void *)v15 + 5);
              if (v19) {
                *v19 += 2;
              }
              *(void *)(v13 + 40) = v19;
              *(_OWORD *)(v13 + 48) = v15[3];
              long long v20 = v15[4];
              long long v21 = v15[5];
              long long v22 = v15[6];
              *(void *)(v13 + 109) = *(void *)((char *)v15 + 109);
              *(_OWORD *)(v13 + 80) = v21;
              *(_OWORD *)(v13 + 96) = v22;
              *(_OWORD *)(v13 + 64) = v20;
              uint64_t v15 = (long long *)((char *)v15 + 120);
              v13 += 120;
            }
            while (v15 != v16);
          }
        }
        v8 += 24;
        v9 += 24;
      }
      while (v9 != v10);
    }
  }
  return a1;
}

void sub_1824FE778(_Unwind_Exception *exception_object, void *a2)
{
  unsigned int v4 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(uint64_t *a1, void *a2)
{
  *a1 = 0;
  if (!*a2) {
    return a1;
  }
  uint64_t v3 = *(unsigned int *)(*a2 - 12);
  if (!v3) {
    return a1;
  }
  unsigned int v5 = (v3 - 1) | ((v3 - 1) >> 1) | (((v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  unsigned int v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  unint64_t v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  if (3 * v7 <= 4 * v3)
  {
LABEL_7:
    LODWORD(v7) = 2 * v7;
    if (v7 <= 0x400) {
      goto LABEL_8;
    }
LABEL_10:
    if ((double)v7 * 0.416666667 > (double)v3) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_8:
  if ((double)v7 * 0.604166667 <= (double)v3) {
LABEL_11:
  }
    LODWORD(v7) = 2 * v7;
LABEL_12:
  if (v7 <= 8) {
    unsigned int v8 = 8;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)((32 * v8) | 0x10));
  bzero((void *)(v9 + 16), 32 * v8);
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  uint64_t v10 = (void *)*a2;
  if (*a2)
  {
    uint64_t v11 = *((unsigned int *)v10 - 1);
    unsigned int v12 = &v10[4 * v11];
    if (!*((_DWORD *)v10 - 3))
    {
      uint64_t v13 = &v10[4 * v11];
      unsigned int v12 = v13;
      if (!v10) {
        goto LABEL_28;
      }
      goto LABEL_25;
    }
    uint64_t v13 = (void *)*a2;
    if (v11)
    {
      uint64_t v14 = 32 * v11;
      uint64_t v13 = v10;
      do
      {
        if ((unint64_t)(*v13 + 1) > 1) {
          goto LABEL_24;
        }
        v13 += 4;
        v14 -= 32;
      }
      while (v14);
      uint64_t v13 = v12;
      if (!v10)
      {
LABEL_28:
        uint64_t v15 = 0;
        if (!v13) {
          return a1;
        }
        while (1)
        {
LABEL_31:
          unsigned int v25 = v13;
          uint64_t v17 = *a1;
          if (*a1)
          {
            int v18 = *(_DWORD *)(v17 - 8);
            long long v19 = (WTF::StringImpl *)*v13;
            unsigned int v20 = *(_DWORD *)(*v13 + 16);
            if (v20 >= 0x100) {
              goto LABEL_33;
            }
          }
          else
          {
            int v18 = 0;
            long long v19 = (WTF::StringImpl *)*v13;
            unsigned int v20 = *(_DWORD *)(*v13 + 16);
            if (v20 >= 0x100)
            {
LABEL_33:
              unsigned int v21 = v20 >> 8;
              goto LABEL_36;
            }
          }
          unsigned int v21 = WTF::StringImpl::hashSlowCase(v19);
LABEL_36:
          int v22 = 0;
          do
          {
            uint64_t v23 = v21 & v18;
            unsigned int v21 = ++v22 + v23;
          }
          while (*(void *)(v17 + 32 * v23));
          WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::String,WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>> const&)::{lambda(void)#1}>(v17 + 32 * v23, (uint64_t)v13, &v25);
          unsigned int v24 = v13 + 4;
          uint64_t v13 = v12;
          if (v24 != v12)
          {
            uint64_t v13 = v24;
            while ((unint64_t)(*v13 + 1) <= 1)
            {
              v13 += 4;
              if (v13 == v12)
              {
                uint64_t v13 = v12;
                break;
              }
            }
          }
          if (v13 == v15) {
            return a1;
          }
        }
      }
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v13 = 0;
    unsigned int v12 = 0;
  }
LABEL_24:
  if (!v10) {
    goto LABEL_28;
  }
LABEL_25:
  uint64_t v15 = &v10[4 * *((unsigned int *)v10 - 1)];
  if (v15 != v13) {
    goto LABEL_31;
  }
  return a1;
}

uint64_t WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::String,WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>> const&)::{lambda(void)#1}>(uint64_t a1, uint64_t a2, void **a3)
{
  unsigned int v4 = (_DWORD **)*a3;
  unsigned int v5 = (_DWORD *)**a3;
  if (v5) {
    *v5 += 2;
  }
  uint64_t v11 = v5;
  v12[0] = 0;
  int v13 = -1;
  uint64_t v6 = *((unsigned int *)v4 + 6);
  if (v6 != -1)
  {
    ((void (*)(char *, unsigned char *, _DWORD **))off_1ECABAE88[v6])(&v14, v12, v4 + 1);
    int v13 = v6;
    unsigned int v5 = v11;
  }
  unint64_t v7 = *(_DWORD **)a1;
  *(void *)a1 = v5;
  if (!v7)
  {
LABEL_8:
    uint64_t v8 = a1 + 8;
    uint64_t v9 = *(unsigned int *)(a1 + 24);
    if (v9 != -1) {
      goto LABEL_9;
    }
LABEL_12:
    if (v6 == -1) {
      return 0;
    }
    goto LABEL_13;
  }
  if (*v7 != 2)
  {
    *v7 -= 2;
    goto LABEL_8;
  }
  WTF::StringImpl::destroy();
  LODWORD(v6) = v13;
  uint64_t v8 = a1 + 8;
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  if (v9 == -1) {
    goto LABEL_12;
  }
LABEL_9:
  if (v6 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1ECABADD8[v9])(&v15, v8);
    *(_DWORD *)(a1 + 24) = -1;
    goto LABEL_14;
  }
LABEL_13:
  uint64_t v15 = v8;
  ((void (*)(uint64_t *))off_1ECABAE30[v6])(&v15);
LABEL_14:
  if (v13 != -1) {
    ((void (*)(uint64_t *, unsigned char *))off_1ECABADD8[v13])(&v15, v12);
  }
  return 0;
}

void sub_1824FEB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1824FEBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _DWORD *a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, char a14)
{
  if (a12 != -1) {
    ((void (*)(char *, uint64_t))off_1ECABADD8[a12])(&a14, v14);
  }
  if (a9)
  {
    if (*a9 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>::~KeyValuePair(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1ECABADD8[v2])(&v5, a1 + 8);
  }
  *(_DWORD *)(a1 + 24) = -1;
  uint64_t v3 = *(_DWORD **)a1;
  *(void *)a1 = 0;
  if (!v3) {
    return a1;
  }
  if (*v3 != 2)
  {
    *v3 -= 2;
    return a1;
  }
  WTF::StringImpl::destroy();
  return a1;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  unsigned int v4 = *(_DWORD **)a1;
  uint64_t v5 = *(unsigned int *)(*(void *)a1 + 16);
  if (v5 != -1)
  {
    if (!v5)
    {
      float result = *a3;
      *a2 = *(_DWORD *)a3;
      return result;
    }
    ((void (*)(char *, _DWORD *))off_1ECABADD8[v5])(&v7, v4);
  }
  float result = *a3;
  *unsigned int v4 = *(_DWORD *)a3;
  v4[4] = 0;
  return result;
}

__int16 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSR_EEEDcSJ_DpT0_@<H0>(uint64_t *a1@<X0>, __int16 *a2@<X1>, __int16 *a3@<X2>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 16);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      __int16 result = *a3;
      *a2 = *a3;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1ECABADD8[v5])(&v7, v4);
  }
  __int16 result = *a3;
  *(_WORD *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 16) = 1;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t *a1, void *a2, double *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 16);
  if (v5 != -1)
  {
    if (v5 == 2)
    {
      double result = *a3;
      *a2 = *(void *)a3;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1ECABADD8[v5])(&v7, v4);
  }
  double result = *a3;
  *(double *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 16) = 2;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4 = *(_DWORD **)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 != -1)
  {
    if (v5 == 3)
    {
      *a2 = *a3;
      return result;
    }
    double result = ((uint64_t (*)(char *, _DWORD *))off_1ECABADD8[v5])(&v6, v4);
  }
  v4[4] = -1;
  *uint64_t v4 = *a3;
  v4[4] = 3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4 = *(_DWORD **)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 != -1)
  {
    if (v5 == 4)
    {
      *a2 = *a3;
      return result;
    }
    double result = ((uint64_t (*)(char *, _DWORD *))off_1ECABADD8[v5])(&v6, v4);
  }
  v4[4] = -1;
  *uint64_t v4 = *a3;
  v4[4] = 4;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 != -1)
  {
    if (v5 == 5)
    {
      *a2 = *a3;
      return result;
    }
    double result = ((uint64_t (*)(char *, uint64_t))off_1ECABADD8[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 16) = 5;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, unsigned char *a2, unsigned char *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 != -1)
  {
    if (v5 == 6)
    {
      *a2 = *a3;
      return result;
    }
    double result = ((uint64_t (*)(char *, uint64_t))off_1ECABADD8[v5])(&v6, v4);
  }
  *(unsigned char *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 16) = 6;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, WTF **a2, WTF **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 == -1) {
    goto LABEL_10;
  }
  if (v5 != 7)
  {
    double result = ((uint64_t (*)(char *, uint64_t))off_1ECABADD8[v5])(&v14, v4);
LABEL_10:
    unsigned int v12 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v12;
    *(_DWORD *)(v4 + 16) = 7;
    return result;
  }
  char v6 = *a3;
  *a3 = 0;
  char v7 = *a2;
  *a2 = v6;
  if (v7)
  {
    uint64_t v8 = *(unsigned int *)v7;
    if (v8)
    {
      uint64_t v9 = 24 * v8;
      uint64_t v10 = (_DWORD *)((char *)v7 + 24);
      do
      {
        a2 = (WTF **)(v10 - 4);
        uint64_t v11 = *v10;
        if (v11 != -1) {
          ((void (*)(char *, WTF **))off_1ECABADD8[v11])(&v13, a2);
        }
        *uint64_t v10 = -1;
        v10 += 6;
        v9 -= 24;
      }
      while (v9);
    }
    return WTF::fastFree(v7, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, WTF **a2, WTF **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 == -1) {
    goto LABEL_10;
  }
  if (v5 != 8)
  {
    double result = ((uint64_t (*)(char *, uint64_t))off_1ECABADD8[v5])(&v14, v4);
LABEL_10:
    unsigned int v12 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v12;
    *(_DWORD *)(v4 + 16) = 8;
    return result;
  }
  char v6 = *a3;
  *a3 = 0;
  char v7 = *a2;
  *a2 = v6;
  if (v7)
  {
    uint64_t v8 = *(unsigned int *)v7;
    if (v8)
    {
      uint64_t v9 = 24 * v8;
      uint64_t v10 = (_DWORD *)((char *)v7 + 24);
      do
      {
        a2 = (WTF **)(v10 - 4);
        uint64_t v11 = *v10;
        if (v11 != -1) {
          ((void (*)(char *, WTF **))off_1ECABADD8[v11])(&v13, a2);
        }
        *uint64_t v10 = -1;
        v10 += 6;
        v9 -= 24;
      }
      while (v9);
    }
    return WTF::fastFree(v7, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 == -1) {
    goto LABEL_10;
  }
  if (v5 != 9)
  {
    double result = ((uint64_t (*)(char *, uint64_t))off_1ECABADD8[v5])(&v14, v4);
LABEL_10:
    *(_DWORD *)(v4 + 16) = -1;
    *(void *)uint64_t v4 = *a3;
    uint64_t v12 = a3[1];
    a3[1] = 0;
    *(void *)(v4 + 8) = v12;
    *(_DWORD *)(v4 + 16) = 9;
    return result;
  }
  *a2 = *a3;
  uint64_t v6 = a3[1];
  a3[1] = 0;
  char v7 = (WTF *)a2[1];
  a2[1] = v6;
  if (v7)
  {
    uint64_t v8 = *(unsigned int *)v7;
    if (v8)
    {
      uint64_t v9 = 24 * v8;
      uint64_t v10 = (_DWORD *)((char *)v7 + 24);
      do
      {
        a2 = v10 - 4;
        uint64_t v11 = *v10;
        if (v11 != -1) {
          ((void (*)(char *, void *))off_1ECABADD8[v11])(&v13, a2);
        }
        *uint64_t v10 = -1;
        v10 += 6;
        v9 -= 24;
      }
      while (v9);
    }
    return WTF::fastFree(v7, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<float,half,double,int,unsigned int,long long,BOOL,WGSL::ConstantArray,WGSL::ConstantVector,WGSL::ConstantMatrix,WGSL::ConstantStruct>>::__assign_alt[abi:sn180100]<10ul,WGSL::ConstantStruct,WGSL::ConstantStruct>(*a1, a2, a3);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<float,half,double,int,unsigned int,long long,BOOL,WGSL::ConstantArray,WGSL::ConstantVector,WGSL::ConstantMatrix,WGSL::ConstantStruct>>::__assign_alt[abi:sn180100]<10ul,WGSL::ConstantStruct,WGSL::ConstantStruct>(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = result;
  uint64_t v5 = *(unsigned int *)(result + 16);
  if (v5 == -1) {
    goto LABEL_15;
  }
  if (v5 != 10)
  {
    double result = ((uint64_t (*)(char *, uint64_t))off_1ECABADD8[v5])(&v14, result);
LABEL_15:
    *(void *)uint64_t v4 = 0;
    uint64_t v12 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v12;
    *(_DWORD *)(v4 + 16) = 10;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t v7 = *a2;
  *a2 = v6;
  if (v7)
  {
    uint64_t v8 = *(unsigned int *)(v7 - 4);
    if (v8)
    {
      uint64_t v9 = v7;
      do
      {
        uint64_t v10 = *(_DWORD **)v9;
        if (*(void *)v9 != -1)
        {
          uint64_t v11 = *(unsigned int *)(v9 + 24);
          if (v11 != -1)
          {
            ((void (*)(char *, uint64_t))off_1ECABADD8[v11])(&v13, v9 + 8);
            uint64_t v10 = *(_DWORD **)v9;
          }
          *(_DWORD *)(v9 + 24) = -1;
          *(void *)uint64_t v9 = 0;
          if (v10)
          {
            if (*v10 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v10 -= 2;
            }
          }
        }
        v9 += 32;
        --v8;
      }
      while (v8);
    }
    return WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  float result = *a3;
  *a2 = *(_DWORD *)a3;
  return result;
}

__int16 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_@<H0>(uint64_t a1@<X0>, __int16 *a2@<X1>, __int16 *a3@<X2>)
{
  __int16 result = *a3;
  *a2 = *a3;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, void *a2, double *a3)
{
  double result = *a3;
  *a2 = *(void *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, void *a2, unsigned int **a3)
{
  uint64_t v4 = *a3;
  if (*a3)
  {
    uint64_t v5 = *v4;
    uint64_t v6 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v5 + 8));
    *uint64_t v6 = v5;
    if (v5)
    {
      unint64_t v7 = 0;
      uint64_t v8 = 24 * v5;
      do
      {
        LOBYTE(v6[v7 / 4 + 2]) = 0;
        v6[v7 / 4 + 6] = -1;
        uint64_t v9 = v4[v7 / 4 + 6];
        if (v9 != -1)
        {
          ((void (*)(unsigned char *, _DWORD *, unsigned int *))off_1ECABAE88[v9])(v10, &v6[v7 / 4 + 2], &v4[v7 / 4 + 2]);
          v6[v7 / 4 + 6] = v9;
        }
        v7 += 24;
      }
      while (v8 != v7);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a2 = v6;
}

void sub_1824FF594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v16 = v13 + v14;
  uint64_t v17 = *(unsigned int *)(v16 + 24);
  if (v17 != -1) {
    ((void (*)(char *, uint64_t))off_1ECABADD8[v17])(&a13, v16 + 8);
  }
  *(_DWORD *)(v16 + 24) = -1;
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, void *a2, unsigned int **a3)
{
  uint64_t v4 = *a3;
  if (*a3)
  {
    uint64_t v5 = *v4;
    uint64_t v6 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v5 + 8));
    *uint64_t v6 = v5;
    if (v5)
    {
      unint64_t v7 = 0;
      uint64_t v8 = 24 * v5;
      do
      {
        LOBYTE(v6[v7 / 4 + 2]) = 0;
        v6[v7 / 4 + 6] = -1;
        uint64_t v9 = v4[v7 / 4 + 6];
        if (v9 != -1)
        {
          ((void (*)(unsigned char *, _DWORD *, unsigned int *))off_1ECABAE88[v9])(v10, &v6[v7 / 4 + 2], &v4[v7 / 4 + 2]);
          v6[v7 / 4 + 6] = v9;
        }
        v7 += 24;
      }
      while (v8 != v7);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a2 = v6;
}

void sub_1824FF6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v16 = v13 + v14;
  uint64_t v17 = *(unsigned int *)(v16 + 24);
  if (v17 != -1) {
    ((void (*)(char *, uint64_t))off_1ECABADD8[v17])(&a13, v16 + 8);
  }
  *(_DWORD *)(v16 + 24) = -1;
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  uint64_t v4 = (unsigned int *)a3[1];
  if (v4)
  {
    uint64_t v5 = *v4;
    uint64_t v6 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v5 + 8));
    *uint64_t v6 = v5;
    if (v5)
    {
      unint64_t v7 = 0;
      uint64_t v8 = 24 * v5;
      do
      {
        LOBYTE(v6[v7 / 4 + 2]) = 0;
        v6[v7 / 4 + 6] = -1;
        uint64_t v9 = v4[v7 / 4 + 6];
        if (v9 != -1)
        {
          ((void (*)(unsigned char *, _DWORD *, unsigned int *))off_1ECABAE88[v9])(v10, &v6[v7 / 4 + 2], &v4[v7 / 4 + 2]);
          v6[v7 / 4 + 6] = v9;
        }
        v7 += 24;
      }
      while (v8 != v7);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  a2[1] = v6;
}

void sub_1824FF7C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v16 = v13 + v14;
  uint64_t v17 = *(unsigned int *)(v16 + 24);
  if (v17 != -1) {
    ((void (*)(char *, uint64_t))off_1ECABADD8[v17])(&a13, v16 + 8);
  }
  *(_DWORD *)(v16 + 24) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t *a2, void *a3)
{
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(a2, a3);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN4WGSL18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, _DWORD **a2)
{
  double result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *result -= 2;
    }
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN4WGSL18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, _DWORD **a2)
{
  double result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *result -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL13PrepareResultENS8_18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t *a2)
{
  if (*((unsigned char *)a2 + 8))
  {
    uint64_t v3 = *a2;
    if (!*a2) {
      return;
    }
  }
  else
  {
    WGSL::ShaderModule::revertReplacements((WTF *)a2[2], a2);
    uint64_t v7 = a2[2];
    unint64_t v8 = *((unsigned int *)a2 + 9);
    if (v8 < *(_DWORD *)(v7 + 356))
    {
      do
      {
        uint64_t v9 = *(void (****)(void))(*(void *)(v7 + 344) + 8 * v8);
        (**v9)(v9);
        ++v8;
      }
      while (v8 < *(unsigned int *)(v7 + 356));
      LODWORD(v8) = *((_DWORD *)a2 + 9);
    }
    *(_DWORD *)(v7 + 356) = v8;
    *(void *)(v7 + 312) = a2[3];
    uint64_t v10 = *((unsigned int *)a2 + 8);
    uint64_t v11 = *(unsigned int *)(v7 + 340);
    if (v11 != v10)
    {
      uint64_t v12 = (WTF **)(*(void *)(v7 + 328) + 8 * v10);
      uint64_t v13 = 8 * v11 - 8 * v10;
      do
      {
        uint64_t v14 = *v12++;
        WTF::fastFree(v14, a2);
        v13 -= 8;
      }
      while (v13);
    }
    *(_DWORD *)(v7 + 340) = v10;
    if (v10)
    {
      *(void *)(v7 + 320) = *(void *)(*(void *)(v7 + 328) + 8 * v10 - 8) + 0x4000;
      uint64_t v3 = *a2;
      if (!*a2) {
        return;
      }
    }
    else
    {
      *(void *)(v7 + 320) = 0;
      uint64_t v3 = *a2;
      if (!*a2) {
        return;
      }
    }
  }
  uint64_t v4 = *(unsigned int *)(v3 - 4);
  if (v4)
  {
    uint64_t v5 = (WGSL::Reflection::EntryPointInformation *)(v3 + 8);
    do
    {
      if (*((void *)v5 - 1) != -1)
      {
        WGSL::Reflection::EntryPointInformation::~EntryPointInformation(v5, a2);
        uint64_t v6 = (_DWORD *)*((void *)v5 - 1);
        *((void *)v5 - 1) = 0;
        if (v6)
        {
          if (*v6 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v6 -= 2;
          }
        }
      }
      uint64_t v5 = (WGSL::Reflection::EntryPointInformation *)((char *)v5 + 96);
      --v4;
    }
    while (v4);
  }
  WTF::fastFree((WTF *)(v3 - 16), a2);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL13PrepareResultENS8_18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _DWORD **a2)
{
  double result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *result -= 2;
    }
  }
  return result;
}

_DWORD *WTF::HashMapTranslator<WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String const&,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::inlineAdd<WTF::String const&,WGSL::ConstantValue&>(WTF::String const&,WGSL::ConstantValue&)::{lambda(void)#1}>(uint64_t a1, _DWORD **a2, uint64_t *a3)
{
  uint64_t v5 = *a2;
  if (*a2) {
    *v5 += 2;
  }
  double result = *(_DWORD **)a1;
  *(void *)a1 = v5;
  if (result)
  {
    if (*result == 2) {
      double result = (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *result -= 2;
    }
  }
  uint64_t v7 = *a3;
  v10[0] = 0;
  int v11 = -1;
  uint64_t v8 = *(unsigned int *)(v7 + 16);
  if (v8 == -1)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 24);
    if (v9 != -1)
    {
      double result = (_DWORD *)((uint64_t (*)(uint64_t *, uint64_t))off_1ECABADD8[v9])(&v12, a1 + 8);
      *(_DWORD *)(a1 + 24) = -1;
    }
  }
  else
  {
    ((void (*)(char *, unsigned char *))off_1ECABAE88[v8])(&v13, v10);
    int v11 = v8;
    uint64_t v12 = a1 + 8;
    double result = (_DWORD *)((uint64_t (*)(uint64_t *, uint64_t, unsigned char *))off_1ECABAE30[v8])(&v12, a1 + 8, v10);
  }
  if (v11 != -1) {
    return (_DWORD *)((uint64_t (*)(uint64_t *, unsigned char *))off_1ECABADD8[v11])(&v12, v10);
  }
  return result;
}

void sub_1824FFB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1ECABADD8[a12])(v14 - 33, &a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 32 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v5;
    uint64_t v39 = v5;
    while (1)
    {
      uint64_t v14 = (WTF::StringImpl **)(v4 + 32 * v11);
      uint64_t v15 = *v14;
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (v15)
        {
          uint64_t v20 = *a1;
          if (*a1)
          {
            int v21 = *(_DWORD *)(v20 - 8);
            unsigned int v22 = *((_DWORD *)v15 + 4);
            if (v22 >= 0x100) {
              goto LABEL_22;
            }
LABEL_24:
            unsigned int v23 = WTF::StringImpl::hashSlowCase(v15);
          }
          else
          {
            int v21 = 0;
            unsigned int v22 = *((_DWORD *)v15 + 4);
            if (v22 < 0x100) {
              goto LABEL_24;
            }
LABEL_22:
            unsigned int v23 = v22 >> 8;
          }
          int v24 = 0;
          do
          {
            uint64_t v25 = v23 & v21;
            unsigned int v23 = ++v24 + v25;
          }
          while (*(void *)(v20 + 32 * v25));
          uint64_t v26 = v20 + 32 * v25;
          int v27 = (_DWORD *)(v26 + 24);
          if (*(_DWORD *)(v26 + 24) == -1)
          {
            _DWORD *v27 = -1;
            *(void *)uint64_t v26 = 0;
          }
          else
          {
            ((void (*)(char *, uint64_t))off_1ECABADD8[*(unsigned int *)(v26 + 24)])(&v44, v26 + 8);
            uint64_t v28 = *(_DWORD **)v26;
            _DWORD *v27 = -1;
            *(void *)uint64_t v26 = 0;
            if (v28)
            {
              if (*v28 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *v28 -= 2;
              }
            }
          }
          uint64_t v29 = *v14;
          *uint64_t v14 = 0;
          *(void *)uint64_t v26 = v29;
          uint64_t v30 = v20 + 32 * v25;
          *(unsigned char *)(v30 + 8) = 0;
          uint64_t v31 = v30 + 8;
          _DWORD *v27 = -1;
          uint64_t v32 = v4 + 32 * v11;
          unsigned int v35 = *(_DWORD *)(v32 + 24);
          long long v34 = (_DWORD *)(v32 + 24);
          uint64_t v33 = v35;
          if (v35 != -1)
          {
            ((void (*)(char *, uint64_t, uint64_t))off_1ECABAF00[v33])(v45, v31, v4 + 32 * v11 + 8);
            _DWORD *v27 = v33;
            uint64_t v36 = *v34;
            if (v36 != -1) {
              ((void (*)(char *, uint64_t))off_1ECABADD8[v36])(&v43, v4 + 32 * v11 + 8);
            }
          }
          *long long v34 = -1;
          uint64_t v37 = *v14;
          *uint64_t v14 = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *(_DWORD *)v37 -= 2;
            }
          }
          if (v14 == a3) {
            uint64_t v12 = v26;
          }
          uint64_t v13 = v39;
          goto LABEL_12;
        }
        uint64_t v16 = v4 + 32 * v11;
        unsigned int v19 = *(_DWORD *)(v16 + 24);
        int v18 = (_DWORD *)(v16 + 24);
        uint64_t v17 = v19;
        if (v19 != -1)
        {
          ((void (*)(char *, uint64_t))off_1ECABADD8[v17])(&v42, v4 + 32 * v11 + 8);
          uint64_t v15 = *v14;
        }
        *int v18 = -1;
        *uint64_t v14 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *(_DWORD *)v15 -= 2;
          }
        }
      }
LABEL_12:
      if (++v11 == v13) {
        goto LABEL_41;
      }
    }
  }
  uint64_t v12 = 0;
  uint64_t result = 0;
  if (v4)
  {
LABEL_41:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v12;
  }
  return result;
}

void sub_1824FFE44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v19 = *v15;
  if (v19 != -1) {
    ((void (*)(char *, uint64_t))off_1ECABADD8[v19])(&a15, v17);
  }
  *uint64_t v15 = -1;
  uint64_t v20 = *v16;
  *uint64_t v16 = 0;
  if (v20)
  {
    if (*v20 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *v20 -= 2;
  }
  _Unwind_Resume(exception_object);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  float result = *a3;
  *a2 = *(_DWORD *)a3;
  return result;
}

__int16 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_@<H0>(uint64_t a1@<X0>, __int16 *a2@<X1>, __int16 *a3@<X2>)
{
  __int16 result = *a3;
  *a2 = *a3;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, void *a2, double *a3)
{
  double result = *a3;
  *a2 = *(void *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  uint64_t v3 = a3[1];
  a3[1] = 0;
  a2[1] = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  *a2 = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WebGPU::Device::createPipelineLayout@<X0>(uint64_t result@<X0>, void *a2@<X1>, NSString *a3@<X2>, WebGPU::PipelineLayout *a4@<X8>)
{
  uint64_t v6 = result;
  if (*a2 || !*(void *)(result + 8))
  {
    uint64_t v8 = (WebGPU::PipelineLayout *)WTF::fastMalloc((WTF *)0x68);
    double result = (uint64_t)WebGPU::PipelineLayout::PipelineLayout(v8, (atomic_uchar *volatile *)v6);
    *(void *)a4 = v8;
    return result;
  }
  uint64_t v10 = a2;
  LOBYTE(v103) = 0;
  char v105 = 0;
  uint64_t v11 = a2[3];
  if (!v11) {
    goto LABEL_90;
  }
  unint64_t v4 = a2[2];
  unint64_t v12 = *(unsigned int *)(result + 104);
  if (v4 > v12)
  {
    uint64_t v13 = [NSString stringWithFormat:@"Too many bind groups(%zu), limit(%u)", a2[2], v12];
    WebGPU::reportErrorInCreatePipelineLayout(v13, a3, v6, v14);

    uint64_t v15 = WTF::fastMalloc((WTF *)0x68);
    double result = (uint64_t)WebGPU::PipelineLayout::PipelineLayout((WebGPU::PipelineLayout *)v15, (atomic_uchar *volatile *)v6);
    goto LABEL_118;
  }
  if (v4)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      if (!*(void *)(v11 + 8 * i))
      {
        uint64_t v15 = WTF::fastMalloc((WTF *)0x68);
        double result = (uint64_t)WebGPU::PipelineLayout::PipelineLayout((WebGPU::PipelineLayout *)v15, (atomic_uchar *volatile *)v6);
        goto LABEL_118;
      }
    }
    if (v4 >> 29)
    {
LABEL_139:
      __break(0xC471u);
      JUMPOUT(0x182500748);
    }
    double result = WTF::fastMalloc((WTF *)(8 * v4));
    int v18 = (uint64_t *)result;
    unint64_t v19 = 0;
    unsigned int v5 = 0;
    char v102 = (WTF *)result;
    unint64_t v20 = v4;
    uint64_t v21 = v10[3];
    do
    {
      unsigned int v22 = *(_DWORD **)(v21 + v19);
      ++*v22;
      *(void *)(result + v19) = v22;
      v19 += 8;
      ++v5;
      --v20;
    }
    while (v20);
    if (v5)
    {
      unint64_t v23 = 0;
      LODWORD(v24) = 0;
      LODWORD(v25) = 0;
      LODWORD(v26) = 0;
      LODWORD(v27) = 0;
      LODWORD(v28) = 0;
      uint64_t v29 = &v18[v19 / 8];
      while (1)
      {
        uint64_t v30 = v18[v23 / 8];
        if (*(void *)(v30 + 104) != v6)
        {
LABEL_76:
          WebGPU::reportErrorInCreatePipelineLayout((WebGPU *)@"Device mismatch", a3, v6, (WebGPU::Device *)v17);
          id v59 = (WebGPU::PipelineLayout *)WTF::fastMalloc((WTF *)0x68);
          WebGPU::PipelineLayout::PipelineLayout(v59, (atomic_uchar *volatile *)v6);
          goto LABEL_79;
        }
        if (!*(unsigned char *)(v30 + 72)) {
          break;
        }
        uint64_t v28 = (*(_DWORD *)(v30 + 124) + v28);
        uint64_t v27 = (*(_DWORD *)(v30 + 136) + v27);
        uint64_t v26 = (*(_DWORD *)(v30 + 148) + v26);
        uint64_t v25 = (*(_DWORD *)(v30 + 160) + v25);
        uint64_t v24 = (*(_DWORD *)(v30 + 172) + v24);
        uint64_t v31 = *(unsigned int *)(v6 + 136);
        uint64_t v32 = *(unsigned int *)(v6 + 140);
        a2 = (void *)*(unsigned int *)(v6 + 124);
        uint64_t v33 = *(unsigned int *)(v6 + 128);
        uint64_t v34 = *(unsigned int *)(v6 + 132);
        if (v28 > v32
          || v27 > v34
          || v26 > v33
          || v25 > a2
          || v24 > v31)
        {
LABEL_78:
          objc_msgSend(NSString, "stringWithFormat:", @"Resource usage limits exceeded: uniformBufferCount(%u) > deviceLimits.maxUniformBuffersPerShaderStage(%u) || storageBufferCount(%u) > deviceLimits.maxStorageBuffersPerShaderStage(%u) || samplerCount(%u) > deviceLimits.maxSamplersPerShaderStage(%u) || textureCount(%u) > deviceLimits.maxSampledTexturesPerShaderStage(%u) || storageTextureCount(%u) > deviceLimits.maxStorageTexturesPerShaderStage(%u)", v28, v32, v27, v34, v26, v33, v25, a2, v24, v31);
          long long v60 = (WebGPU *)objc_claimAutoreleasedReturnValue();
          WebGPU::reportErrorInCreatePipelineLayout(v60, a3, v6, v61);

          id v59 = (WebGPU::PipelineLayout *)WTF::fastMalloc((WTF *)0x68);
          WebGPU::PipelineLayout::PipelineLayout(v59, (atomic_uchar *volatile *)v6);
          goto LABEL_79;
        }
        v23 += 8;
        if (v19 == v23)
        {
          unint64_t v39 = 0;
          LODWORD(v24) = 0;
          LODWORD(v25) = 0;
          LODWORD(v26) = 0;
          LODWORD(v27) = 0;
          LODWORD(v28) = 0;
          do
          {
            uint64_t v17 = v18[v39 / 8];
            if (*(void *)(v17 + 104) != v6) {
              goto LABEL_76;
            }
            if (!*(unsigned char *)(v17 + 72)) {
              goto LABEL_77;
            }
            uint64_t v28 = (*(_DWORD *)(v17 + 128) + v28);
            uint64_t v27 = (*(_DWORD *)(v17 + 140) + v27);
            uint64_t v26 = (*(_DWORD *)(v17 + 152) + v26);
            uint64_t v25 = (*(_DWORD *)(v17 + 164) + v25);
            uint64_t v24 = (*(_DWORD *)(v17 + 176) + v24);
            if (v28 > v32
              || v27 > v34
              || v26 > v33
              || v25 > a2
              || v24 > v31)
            {
              goto LABEL_78;
            }
            v39 += 8;
          }
          while (v19 != v39);
          LODWORD(v24) = 0;
          LODWORD(v25) = 0;
          LODWORD(v26) = 0;
          LODWORD(v27) = 0;
          LODWORD(v28) = 0;
          double result = (uint64_t)v18;
          do
          {
            uint64_t v17 = *(void *)result;
            if (*(void *)(*(void *)result + 104) != v6) {
              goto LABEL_76;
            }
            if (!*(unsigned char *)(v17 + 72)) {
              goto LABEL_77;
            }
            uint64_t v28 = (*(_DWORD *)(v17 + 132) + v28);
            uint64_t v27 = (*(_DWORD *)(v17 + 144) + v27);
            uint64_t v26 = (*(_DWORD *)(v17 + 156) + v26);
            uint64_t v25 = (*(_DWORD *)(v17 + 168) + v25);
            uint64_t v24 = (*(_DWORD *)(v17 + 180) + v24);
            if (v28 > v32
              || v27 > v34
              || v26 > v33
              || v25 > a2
              || v24 > v31)
            {
              goto LABEL_78;
            }
            result += 8;
            v19 -= 8;
          }
          while (v19);
          uint64_t v48 = (v4 - 1) & 0x1FFFFFFFFFFFFFFFLL;
          if (v48)
          {
            uint64_t v49 = v48 + 1;
            uint64_t v50 = (v48 + 1) & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v51 = &v18[v50];
            int32x2_t v52 = 0;
            uint64_t v53 = (int32x2_t **)(v18 + 1);
            uint64_t v54 = v50;
            int32x2_t v55 = 0;
            do
            {
              int32x2_t v55 = vadd_s32((*(v53 - 1))[26], v55);
              int32x2_t v52 = vadd_s32((*v53)[26], v52);
              v53 += 2;
              v54 -= 2;
            }
            while (v54);
            int32x2_t v56 = vadd_s32(v52, v55);
            if (v49 == v50) {
              goto LABEL_131;
            }
          }
          else
          {
            int32x2_t v56 = 0;
            uint64_t v51 = v18;
          }
          do
          {
            BOOL v90 = (int32x2_t *)*v51++;
            int32x2_t v56 = vadd_s32(v90[26], v56);
          }
          while (v29 != v51);
LABEL_131:
          uint64_t v91 = *(unsigned int *)(v6 + 116);
          if (v56.i32[0] <= v91)
          {
            uint64_t v94 = *(unsigned int *)(v6 + 120);
            if (v56.i32[1] <= v94) {
              goto LABEL_74;
            }
            int v92 = [NSString stringWithFormat:@"Too many dynamic storage buffers: used(%u), limit(%u)", v56.u32[1], v94];
            WebGPU::reportErrorInCreatePipelineLayout(v92, a3, v6, v95);
          }
          else
          {
            int v92 = [NSString stringWithFormat:@"Too many dynamic uniform buffers: used(%u), limit(%u)", v56.u32[0], v91];
            WebGPU::reportErrorInCreatePipelineLayout(v92, a3, v6, v93);
          }

          WebGPU::PipelineLayout::createInvalid(a4, (atomic_uchar *volatile *)v6);
          char v57 = 0;
          uint64_t v62 = v5;
          goto LABEL_80;
        }
      }
LABEL_77:
      WebGPU::reportErrorInCreatePipelineLayout((WebGPU *)@"Bind group layout is invalid", a3, v6, (WebGPU::Device *)v17);
      id v59 = (WebGPU::PipelineLayout *)WTF::fastMalloc((WTF *)0x68);
      WebGPU::PipelineLayout::PipelineLayout(v59, (atomic_uchar *volatile *)v6);
LABEL_79:
      char v57 = 0;
      *(void *)a4 = v59;
      uint64_t v62 = v5;
LABEL_80:
      uint64_t v63 = 8 * v62;
      do
      {
        double result = *v18;
        *int v18 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
          {
            WebGPU::BindGroupLayout::~BindGroupLayout((WebGPU::BindGroupLayout *)result, a2);
            double result = WTF::fastFree(v64, v65);
          }
          else
          {
            --*(_DWORD *)result;
          }
        }
        ++v18;
        v63 -= 8;
      }
      while (v63);
      id v58 = v102;
      goto LABEL_87;
    }
  }
  else
  {
    unsigned int v5 = 0;
    int v18 = 0;
  }
LABEL_74:
  uint64_t v103 = (WTF *)v18;
  unsigned int v104 = v5;
  char v57 = 1;
  char v105 = 1;
  id v58 = 0;
LABEL_87:
  if (v58) {
    double result = WTF::fastFree(v58, a2);
  }
  if ((v57 & 1) == 0) {
    goto LABEL_119;
  }
LABEL_90:
  double result = WTF::fastMalloc((WTF *)0x68);
  uint64_t v15 = result;
  *(void *)(result + 8) = 0;
  uint64_t v66 = (uint64_t *)(result + 8);
  *(_DWORD *)double result = 1;
  *(unsigned char *)(result + 16) = 0;
  int v101 = (void *)(result + 16);
  *(unsigned char *)(result + 32) = 0;
  if (v105)
  {
    int v67 = v103;
    uint64_t v103 = 0;
    unsigned int v104 = 0;
    *(void *)(result + 16) = v67;
    *(_DWORD *)(result + 24) = v4;
    *(_DWORD *)(result + 28) = v5;
    *(unsigned char *)(result + 32) = 1;
  }
  char v68 = 0;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  int64_t v98 = (uint64_t *)(result + 56);
  char v99 = (uint64_t *)(result + 48);
  int v100 = (uint64_t *)(result + 64);
  *(_OWORD *)(result + 72) = 0u;
  int v97 = (uint64_t *)(result + 80);
  atomic_uchar *volatile v69 = *(atomic_uchar *volatile *)v6;
  atomic_compare_exchange_strong_explicit(*(atomic_uchar *volatile *)v6, (unsigned __int8 *)&v68, 1u, memory_order_acquire, memory_order_acquire);
  if (v68) {
    double result = MEMORY[0x18530AEA0](v69);
  }
  ++*((void *)v69 + 1);
  int v70 = 1;
  atomic_compare_exchange_strong_explicit(v69, (unsigned __int8 *)&v70, 0, memory_order_release, memory_order_relaxed);
  if (v70 == 1)
  {
    *(void *)(v15 + 88) = v6;
    *(unsigned char *)(v15 + 96) = 1;
    *(unsigned char *)(v15 + 97) = (_BYTE)a3;
    if (!*(unsigned char *)(v15 + 32)) {
      goto LABEL_118;
    }
  }
  else
  {
    double result = WTF::Lock::unlockSlow((WTF::Lock *)v69);
    *(void *)(v15 + 88) = v6;
    *(unsigned char *)(v15 + 96) = 1;
    *(unsigned char *)(v15 + 97) = (_BYTE)a3;
    if (!*(unsigned char *)(v15 + 32)) {
      goto LABEL_118;
    }
  }
  if (!a3) {
    goto LABEL_113;
  }
  uint64_t v71 = *(unsigned int *)(v15 + 28);
  if (!v71) {
    goto LABEL_113;
  }
  unint64_t v72 = *(uint64_t **)(v15 + 16);
  uint64_t v73 = 8 * v71;
  do
  {
    while (1)
    {
      uint64_t v74 = *v72;
      double result = *v66;
      if (*v66) {
        goto LABEL_103;
      }
      double result = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)double result = 1;
      *(void *)(result + 8) = v15;
      unint64_t v75 = *(unsigned int **)(v15 + 8);
      *(void *)(v15 + 8) = result;
      if (!v75) {
        goto LABEL_103;
      }
      if (atomic_fetch_add((atomic_uint *volatile)v75, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v75);
        WTF::fastFree((WTF *)v75, a2);
        double result = *v66;
        if (!*v66) {
          goto LABEL_104;
        }
LABEL_103:
        atomic_fetch_add((atomic_uint *volatile)result, 1u);
        goto LABEL_104;
      }
      double result = *v66;
      if (*v66) {
        goto LABEL_103;
      }
LABEL_104:
      unint64_t v76 = *(atomic_uint **)(v74 + 112);
      *(void *)(v74 + 112) = result;
      if (v76)
      {
        if (atomic_fetch_add(v76, 0xFFFFFFFF) == 1) {
          break;
        }
      }
      ++v72;
      v73 -= 8;
      if (!v73) {
        goto LABEL_112;
      }
    }
    atomic_store(1u, (unsigned int *)v76);
    double result = WTF::fastFree((WTF *)v76, a2);
    ++v72;
    v73 -= 8;
  }
  while (v73);
LABEL_112:
  if (!*(unsigned char *)(v15 + 32))
  {
    __break(1u);
    goto LABEL_139;
  }
LABEL_113:
  uint64_t v77 = *(unsigned int *)(v15 + 28);
  if (v77)
  {
    uint64_t v96 = a4;
    unint64_t v78 = 0;
    uint64_t v79 = 0;
    unint64_t v80 = 0;
    double result = 0;
    do
    {
      if (v78 >= *(unsigned int *)(v15 + 28)) {
        goto LABEL_139;
      }
      int v81 = *(_DWORD **)(*v101 + 8 * v78);
      uint64_t v82 = (result + v81[20]);
      int v83 = v81[22];
      int v84 = v81[24];
      WebGPU::addInitialOffset<WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>>((WTF *)result, (void *)v82, v78, v100, (uint64_t *)(v15 + 40));
      unint64_t v85 = (v80 + v83);
      WebGPU::addInitialOffset<WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>>(v80, (void *)v85, v78, (uint64_t *)(v15 + 72), v99);
      WebGPU::addInitialOffset<WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>>(v79, (void *)(v79 + v84), v78++, v97, v98);
      uint64_t v79 = (WTF *)(v79 + v84);
      unint64_t v80 = (WTF *)v85;
      double result = v82;
    }
    while (v77 != v78);
    a4 = v96;
  }
LABEL_118:
  *(void *)a4 = v15;
LABEL_119:
  if (v105)
  {
    if (v104)
    {
      uint64_t v86 = 8 * v104;
      uint64_t v87 = (uint64_t *)v103;
      do
      {
        double result = *v87;
        uint64_t *v87 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
          {
            WebGPU::BindGroupLayout::~BindGroupLayout((WebGPU::BindGroupLayout *)result, a2);
            double result = WTF::fastFree(v88, v89);
          }
          else
          {
            --*(_DWORD *)result;
          }
        }
        ++v87;
        v86 -= 8;
      }
      while (v86);
    }
    if (v103) {
      return WTF::fastFree(v103, a2);
    }
  }
  return result;
}

void sub_182500754(_Unwind_Exception *a1)
{
  WTF::Vector<WTF::Ref<WebGPU::BindGroupLayout,WTF::RawPtrTraits<WebGPU::BindGroupLayout>,WTF::DefaultRefDerefTraits<WebGPU::BindGroupLayout>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 128, v4);
  std::optional<WTF::Vector<WTF::Ref<WebGPU::BindGroupLayout,WTF::RawPtrTraits<WebGPU::BindGroupLayout>,WTF::DefaultRefDerefTraits<WebGPU::BindGroupLayout>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(v2 - 112, v5);
  _Unwind_Resume(a1);
}

void sub_1825007D4(_Unwind_Exception *a1)
{
  std::optional<WTF::Vector<WTF::Ref<WebGPU::BindGroupLayout,WTF::RawPtrTraits<WebGPU::BindGroupLayout>,WTF::DefaultRefDerefTraits<WebGPU::BindGroupLayout>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(v2 - 112, v4);
  _Unwind_Resume(a1);
}

void sub_1825007EC(_Unwind_Exception *a1)
{
  std::optional<WTF::Vector<WTF::Ref<WebGPU::BindGroupLayout,WTF::RawPtrTraits<WebGPU::BindGroupLayout>,WTF::DefaultRefDerefTraits<WebGPU::BindGroupLayout>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_182500804(uint64_t a1, void *a2)
{
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)(v2 + 48), a2);
  JUMPOUT(0x18250082CLL);
}

WebGPU::PipelineLayout *WebGPU::PipelineLayout::createInvalid(WebGPU::PipelineLayout *this, atomic_uchar *volatile *a2)
{
  unint64_t v4 = (WebGPU::PipelineLayout *)WTF::fastMalloc((WTF *)0x68);
  double result = WebGPU::PipelineLayout::PipelineLayout(v4, a2);
  *(void *)this = v4;
  return result;
}

void sub_182500900(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebGPU::reportErrorInCreatePipelineLayout(WebGPU *this, NSString *a2, uint64_t a3, WebGPU::Device *a4)
{
  char v5 = (char)a2;
  uint64_t v6 = this;
  if (v5) {
    goto LABEL_13;
  }
  MEMORY[0x18530AF50](&v16, v6);
  uint64_t v7 = *(void *)(a3 + 32);
  uint64_t v8 = 32 * *(unsigned int *)(a3 + 44);
  uint64_t v9 = v7 + v8;
  while (v8)
  {
    int v10 = *(_DWORD *)(v9 - 8);
    v9 -= 32;
    v8 -= 32;
    if (!v10)
    {
      uint64_t v11 = v7 + v8;
      if (!*(unsigned char *)(v11 + 16))
      {
        unint64_t v12 = v16;
        uint64_t v16 = 0;
        *(_DWORD *)uint64_t v11 = 1;
        *(void *)(v11 + 8) = v12;
        *(unsigned char *)(v11 + 16) = 1;
      }
      goto LABEL_10;
    }
  }
  uint64_t v13 = *(void *)(a3 + 24);
  if (v13)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v13 + 16))(v13, 1, &v16);
    uint64_t v14 = *(void *)(a3 + 24);
    *(void *)(a3 + 24) = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
LABEL_10:
  uint64_t v15 = v16;
  uint64_t v16 = 0;
  if (!v15) {
    goto LABEL_13;
  }
  if (*v15 != 2)
  {
    *v15 -= 2;
LABEL_13:

    return;
  }
  WTF::StringImpl::destroy();
}

void sub_182500A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a10 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::Ref<WebGPU::BindGroupLayout,WTF::RawPtrTraits<WebGPU::BindGroupLayout>,WTF::DefaultRefDerefTraits<WebGPU::BindGroupLayout>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    unint64_t v4 = *(WebGPU::BindGroupLayout ***)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v8 = *v4;
      *unint64_t v4 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          WebGPU::BindGroupLayout::~BindGroupLayout(v8, a2);
          WTF::fastFree(v6, v7);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v9 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

uint64_t std::optional<WTF::Vector<WTF::Ref<WebGPU::BindGroupLayout,WTF::RawPtrTraits<WebGPU::BindGroupLayout>,WTF::DefaultRefDerefTraits<WebGPU::BindGroupLayout>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 12);
    if (v3)
    {
      unint64_t v4 = *(WebGPU::BindGroupLayout ***)a1;
      uint64_t v5 = 8 * v3;
      do
      {
        uint64_t v8 = *v4;
        *unint64_t v4 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 1)
          {
            WebGPU::BindGroupLayout::~BindGroupLayout(v8, a2);
            WTF::fastFree(v6, v7);
          }
          else
          {
            --*(_DWORD *)v8;
          }
        }
        ++v4;
        v5 -= 8;
      }
      while (v5);
    }
    uint64_t v9 = *(WTF **)a1;
    if (*(void *)a1)
    {
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v9, a2);
    }
  }
  return a1;
}

WTF *WebGPU::addInitialOffset<WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>>(WTF *result, void *a2, int a3, uint64_t *a4, uint64_t *a5)
{
  unsigned int v5 = a2 - result;
  if (a2 == result) {
    return result;
  }
  unsigned int v9 = result;
  unsigned int v10 = v5 >> 2;
  if (v5 >= 4)
  {
    double result = (WTF *)WTF::fastMalloc((WTF *)(v5 & 0xFFFFFFFC));
    unint64_t v12 = result;
    unsigned int v11 = v10;
    uint64_t v13 = *a4;
    if (!*a4) {
      goto LABEL_7;
    }
LABEL_8:
    int v14 = *(_DWORD *)(v13 - 8);
    goto LABEL_9;
  }
  unsigned int v11 = 0;
  unint64_t v12 = 0;
  uint64_t v13 = *a4;
  if (*a4) {
    goto LABEL_8;
  }
LABEL_7:
  double result = (WTF *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a4, 8u, 0);
  uint64_t v13 = *a4;
  if (*a4) {
    goto LABEL_8;
  }
  int v14 = 0;
LABEL_9:
  unsigned int v15 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
  unsigned int v16 = (v15 ^ (v15 >> 6)) + ~((v15 ^ (v15 >> 6)) << 11);
  int v17 = v16 ^ HIWORD(v16);
  unsigned int v18 = v14 & v17;
  uint64_t v19 = v13 + 24 * (v14 & v17);
  int v20 = *(_DWORD *)v19;
  if (*(_DWORD *)v19 == -1)
  {
LABEL_17:
    *(_DWORD *)uint64_t v19 = a3;
    double result = *(WTF **)(v19 + 8);
    if (result)
    {
      *(void *)(v19 + 8) = 0;
      *(_DWORD *)(v19 + 16) = 0;
      double result = (WTF *)WTF::fastFree(result, a2);
    }
    *(void *)(v19 + 8) = v12;
    *(_DWORD *)(v19 + 16) = v11;
    *(_DWORD *)(v19 + 20) = v10;
    if (*a4)
    {
      ++*(_DWORD *)(*a4 - 12);
      uint64_t v23 = *a4;
      if (*a4) {
        goto LABEL_21;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      uint64_t v23 = *a4;
      if (*a4)
      {
LABEL_21:
        uint64_t v24 = (*(_DWORD *)(v23 - 16) + *(_DWORD *)(v23 - 12));
        unint64_t v25 = *(unsigned int *)(v23 - 4);
        if (v25 <= 0x400) {
          goto LABEL_22;
        }
        goto LABEL_29;
      }
    }
    uint64_t v24 = *(unsigned int *)(v23 - 16);
    unint64_t v25 = *(unsigned int *)(v23 - 4);
    if (v25 <= 0x400)
    {
LABEL_22:
      if (3 * v25 > 4 * v24) {
        goto LABEL_32;
      }
      if (!v25)
      {
        unsigned int v26 = 8;
LABEL_31:
        double result = (WTF *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a4, v26, (int *)v19);
        goto LABEL_32;
      }
LABEL_30:
      unsigned int v26 = v25 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v25));
      goto LABEL_31;
    }
LABEL_29:
    if (v25 > 2 * v24) {
      goto LABEL_32;
    }
    goto LABEL_30;
  }
  uint64_t v21 = 0;
  int v22 = 1;
  while (v20 != a3)
  {
    if (v20 == -2) {
      uint64_t v21 = v19;
    }
    unsigned int v18 = (v18 + v22) & v14;
    uint64_t v19 = v13 + 24 * v18;
    int v20 = *(_DWORD *)v19;
    ++v22;
    if (*(_DWORD *)v19 == -1)
    {
      if (v21)
      {
        *(_DWORD *)uint64_t v21 = -1;
        *(void *)(v21 + 8) = 0;
        *(void *)(v21 + 16) = 0;
        --*(_DWORD *)(*a4 - 16);
        uint64_t v19 = v21;
      }
      goto LABEL_17;
    }
  }
  if (v12) {
    double result = (WTF *)WTF::fastFree(v12, a2);
  }
LABEL_32:
  uint64_t v27 = *a5;
  if (*a5
    || (double result = (WTF *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a5, 8u, 0), (v27 = *a5) != 0))
  {
    int v28 = *(_DWORD *)(v27 - 8);
    unsigned int v29 = v28 & v17;
    uint64_t v30 = (_DWORD *)(v27 + 8 * (v28 & v17));
    int v31 = *v30;
    if (*v30 != -1) {
      goto LABEL_35;
    }
LABEL_44:
    *uint64_t v30 = a3;
    v30[1] = v9 >> 2;
    if (*a5)
    {
      ++*(_DWORD *)(*a5 - 12);
      uint64_t v34 = *a5;
      if (*a5) {
        goto LABEL_46;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      uint64_t v34 = *a5;
      if (*a5)
      {
LABEL_46:
        uint64_t v35 = (*(_DWORD *)(v34 - 16) + *(_DWORD *)(v34 - 12));
        unint64_t v36 = *(unsigned int *)(v34 - 4);
        if (v36 <= 0x400) {
          goto LABEL_47;
        }
        goto LABEL_52;
      }
    }
    uint64_t v35 = *(unsigned int *)(v34 - 16);
    unint64_t v36 = *(unsigned int *)(v34 - 4);
    if (v36 <= 0x400)
    {
LABEL_47:
      if (3 * v36 > 4 * v35) {
        return result;
      }
      if (!v36)
      {
        unsigned int v37 = 8;
LABEL_54:
        return (WTF *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a5, v37, v30);
      }
LABEL_53:
      unsigned int v37 = v36 << (6 * *(_DWORD *)(v34 - 12) >= (2 * v36));
      goto LABEL_54;
    }
LABEL_52:
    if (v36 > 2 * v35) {
      return result;
    }
    goto LABEL_53;
  }
  int v28 = 0;
  unsigned int v29 = 0;
  uint64_t v30 = 0;
  int v31 = MEMORY[0];
  if (MEMORY[0] == -1) {
    goto LABEL_44;
  }
LABEL_35:
  uint64_t v32 = 0;
  int v33 = 1;
  while (v31 != a3)
  {
    if (v31 == -2) {
      uint64_t v32 = v30;
    }
    unsigned int v29 = (v29 + v33) & v28;
    uint64_t v30 = (_DWORD *)(v27 + 8 * v29);
    int v31 = *v30;
    ++v33;
    if (*v30 == -1)
    {
      if (v32)
      {
        *uint64_t v32 = 0xFFFFFFFFLL;
        --*(_DWORD *)(*a5 - 16);
        uint64_t v30 = v32;
      }
      goto LABEL_44;
    }
  }
  return result;
}

void sub_182500F30(_Unwind_Exception *exception_object, void *a2)
{
  if (v2) {
    WTF::fastFree(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

WebGPU::PipelineLayout *WebGPU::PipelineLayout::PipelineLayout(WebGPU::PipelineLayout *this, atomic_uchar *volatile *a2)
{
  char v4 = 0;
  int v5 = 1;
  *(_DWORD *)this = 1;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 0;
  *((unsigned char *)this + 32) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  atomic_uchar *volatile v6 = *a2;
  atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x18530AEA0](v6);
  }
  ++*((void *)v6 + 1);
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  *((void *)this + 11) = a2;
  *((_WORD *)this + 48) = 0;
  return this;
}

void sub_18250101C(_Unwind_Exception *a1, void *a2)
{
  WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::~HashMap(v7, a2);
  WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::~HashMap(v5, v10);
  WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::~HashMap(v6, v11);
  uint64_t v13 = *(void *)(v3 + 56);
  if (v13)
  {
    WTF::fastFree((WTF *)(v13 - 16), v12);
    uint64_t v14 = *(void *)(v3 + 48);
    if (!v14)
    {
LABEL_3:
      uint64_t v15 = *v8;
      if (!*v8) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v14 = *(void *)(v3 + 48);
    if (!v14) {
      goto LABEL_3;
    }
  }
  WTF::fastFree((WTF *)(v14 - 16), v12);
  uint64_t v15 = *v8;
  if (!*v8)
  {
LABEL_4:
    std::optional<WTF::Vector<WTF::Ref<WebGPU::BindGroupLayout,WTF::RawPtrTraits<WebGPU::BindGroupLayout>,WTF::DefaultRefDerefTraits<WebGPU::BindGroupLayout>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(v4, v12);
    WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v2, v16);
    _Unwind_Resume(a1);
  }
LABEL_7:
  WTF::fastFree((WTF *)(v15 - 16), v12);
  std::optional<WTF::Vector<WTF::Ref<WebGPU::BindGroupLayout,WTF::RawPtrTraits<WebGPU::BindGroupLayout>,WTF::DefaultRefDerefTraits<WebGPU::BindGroupLayout>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(v4, v17);
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v2, v18);
  _Unwind_Resume(a1);
}

void WebGPU::PipelineLayout::~PipelineLayout(atomic_uchar *volatile **this, void *a2)
{
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref(this + 11, a2);
  uint64_t v4 = this[10];
  if (v4)
  {
    uint64_t v5 = *((unsigned int *)v4 - 1);
    if (v5)
    {
      atomic_uchar *volatile v6 = v4 + 1;
      do
      {
        if (*((_DWORD *)v6 - 2) != -2)
        {
          uint64_t v7 = (WTF *)*v6;
          if (*v6)
          {
            *atomic_uchar *volatile v6 = 0;
            *((_DWORD *)v6 + 2) = 0;
            WTF::fastFree(v7, v3);
          }
        }
        v6 += 3;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 2), v3);
  }
  uint64_t v8 = this[9];
  if (v8)
  {
    uint64_t v9 = *((unsigned int *)v8 - 1);
    if (v9)
    {
      unsigned int v10 = v8 + 1;
      do
      {
        if (*((_DWORD *)v10 - 2) != -2)
        {
          unsigned int v11 = (WTF *)*v10;
          if (*v10)
          {
            *unsigned int v10 = 0;
            *((_DWORD *)v10 + 2) = 0;
            WTF::fastFree(v11, v3);
          }
        }
        v10 += 3;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 2), v3);
  }
  unint64_t v12 = this[8];
  if (v12)
  {
    uint64_t v13 = *((unsigned int *)v12 - 1);
    if (v13)
    {
      uint64_t v14 = v12 + 1;
      do
      {
        if (*((_DWORD *)v14 - 2) != -2)
        {
          uint64_t v15 = (WTF *)*v14;
          if (*v14)
          {
            *uint64_t v14 = 0;
            *((_DWORD *)v14 + 2) = 0;
            WTF::fastFree(v15, v3);
          }
        }
        v14 += 3;
        --v13;
      }
      while (v13);
    }
    WTF::fastFree((WTF *)(v12 - 2), v3);
  }
  unsigned int v16 = this[7];
  if (v16) {
    WTF::fastFree((WTF *)(v16 - 2), v3);
  }
  int v17 = this[6];
  if (v17) {
    WTF::fastFree((WTF *)(v17 - 2), v3);
  }
  unsigned int v18 = this[5];
  if (v18) {
    WTF::fastFree((WTF *)(v18 - 2), v3);
  }
  if (*((unsigned char *)this + 32))
  {
    uint64_t v19 = *((unsigned int *)this + 7);
    if (v19)
    {
      int v20 = (WebGPU::BindGroupLayout **)this[2];
      uint64_t v21 = 8 * v19;
      do
      {
        uint64_t v24 = *v20;
        *int v20 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 1)
          {
            WebGPU::BindGroupLayout::~BindGroupLayout(v24, v3);
            WTF::fastFree(v22, v23);
          }
          else
          {
            --*(_DWORD *)v24;
          }
        }
        ++v20;
        v21 -= 8;
      }
      while (v21);
    }
    unint64_t v25 = (WTF *)this[2];
    if (v25)
    {
      this[2] = 0;
      *((_DWORD *)this + 6) = 0;
      WTF::fastFree(v25, v3);
    }
  }
  unsigned int v26 = this[1];
  if (v26)
  {
    *((void *)v26 + 1) = 0;
    uint64_t v27 = (unsigned int *)this[1];
    this[1] = 0;
    if (v27)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v27, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v27);
        WTF::fastFree((WTF *)v27, v3);
      }
    }
  }
  else
  {
    this[1] = 0;
  }
}

uint64_t WebGPU::PipelineLayout::bindGroupLayout(WebGPU::PipelineLayout *this, unint64_t a2)
{
  if (!*((unsigned char *)this + 32) || *((unsigned int *)this + 7) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1825012F8);
  }
  return *(void *)(*((void *)this + 2) + 8 * a2);
}

uint64_t WebGPU::PipelineLayout::vertexOffsetForBindGroup(WebGPU::PipelineLayout *this, int a2)
{
  uint64_t v2 = *((void *)this + 5);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(v2 - 8);
  unsigned int v4 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  unsigned int v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
  uint64_t v6 = v3 & (v5 ^ HIWORD(v5));
  int v7 = *(_DWORD *)(v2 + 8 * v6);
  if (v7 != a2)
  {
    int v8 = 1;
    while (v7 != -1)
    {
      uint64_t v6 = (v6 + v8) & v3;
      int v7 = *(_DWORD *)(v2 + 8 * v6);
      ++v8;
      if (v7 == a2) {
        goto LABEL_6;
      }
    }
    return 0;
  }
LABEL_6:
  if (v6 == *(_DWORD *)(v2 - 4)) {
    return 0;
  }
  return *(unsigned int *)(v2 + 8 * v6 + 4);
}

uint64_t WebGPU::PipelineLayout::fragmentOffsetForBindGroup(WebGPU::PipelineLayout *this, int a2)
{
  uint64_t v2 = *((void *)this + 6);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(v2 - 8);
  unsigned int v4 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  unsigned int v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
  uint64_t v6 = v3 & (v5 ^ HIWORD(v5));
  int v7 = *(_DWORD *)(v2 + 8 * v6);
  if (v7 != a2)
  {
    int v8 = 1;
    while (v7 != -1)
    {
      uint64_t v6 = (v6 + v8) & v3;
      int v7 = *(_DWORD *)(v2 + 8 * v6);
      ++v8;
      if (v7 == a2) {
        goto LABEL_6;
      }
    }
    return 0;
  }
LABEL_6:
  if (v6 == *(_DWORD *)(v2 - 4)) {
    return 0;
  }
  return *(unsigned int *)(v2 + 8 * v6 + 4);
}

int *WebGPU::PipelineLayout::offsetVectorForBindGroup(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t *a4, int a5)
{
  if (!*(unsigned char *)(a1 + 32)) {
    return 0;
  }
  uint64_t v5 = *a3;
  if (!*a3) {
    return 0;
  }
  int v8 = *(_DWORD *)(v5 - 8);
  unsigned int v9 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  unsigned int v10 = (v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11);
  unsigned int v11 = v8 & (v10 ^ HIWORD(v10));
  unint64_t v12 = (int *)(v5 + 24 * v11);
  int v13 = *v12;
  if (*v12 != a2)
  {
    int v14 = 1;
    while (v13 != -1)
    {
      unsigned int v11 = (v11 + v14) & v8;
      unint64_t v12 = (int *)(v5 + 24 * v11);
      int v13 = *v12;
      ++v14;
      if (*v12 == a2) {
        goto LABEL_7;
      }
    }
    return 0;
  }
LABEL_7:
  if (v12 == (int *)(v5 + 24 * *(unsigned int *)(v5 - 4)) || *(_DWORD *)(a1 + 28) <= a2) {
    return 0;
  }
  WebGPU::BindGroupLayout::sortedEntries(*(unsigned int **)(*(void *)(a1 + 16) + 8 * a2), (uint64_t)&v25);
  unsigned int v16 = v25;
  if (!v27)
  {
LABEL_20:
    int v24 = 1;
    if (v16) {
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  unint64_t v17 = 0;
  uint64_t v18 = *a4;
  uint64_t v19 = 8 * v27;
  int v20 = v25;
  while (1)
  {
    uint64_t v21 = *(void *)v20;
    if (!*(unsigned char *)(*(void *)v20 + 100) && !*(unsigned char *)(v21 + 108) && !*(unsigned char *)(v21 + 116)
      || (*(_DWORD *)(v21 + 4) & a5) == 0)
    {
      goto LABEL_11;
    }
    if (v12[5] <= v17) {
      break;
    }
    uint64_t v22 = *(unsigned int *)(v21 + 120);
    if (*((_DWORD *)a4 + 3) <= v22) {
      break;
    }
    *(_DWORD *)(*((void *)v12 + 1) + 4 * v17++) = *(_DWORD *)(v18 + 4 * v22);
LABEL_11:
    int v20 = (WTF *)((char *)v20 + 8);
    v19 -= 8;
    if (!v19) {
      goto LABEL_20;
    }
  }
  int v24 = 0;
  if (!v16) {
    goto LABEL_22;
  }
LABEL_21:
  unint64_t v25 = 0;
  int v26 = 0;
  WTF::fastFree(v16, v15);
LABEL_22:
  if (v24) {
    return v12 + 2;
  }
  else {
    return 0;
  }
}

unsigned char *WebGPU::PipelineLayout::errorValidatingBindGroupCompatibility(unsigned char *result, uint64_t *a2)
{
  if (!result[32]) {
    goto LABEL_24;
  }
  unsigned int v3 = result;
  uint64_t v4 = *a2;
  if (*a2) {
    uint64_t v4 = *(unsigned int *)(v4 - 12);
  }
  uint64_t v5 = *((unsigned int *)result + 7);
  if (v5 > v4)
  {
    if (v5 != 1 || (uint64_t v6 = *(void *)(**((void **)result + 2) + 48)) != 0 && *(_DWORD *)(v6 - 12))
    {
      objc_msgSend(NSString, "stringWithFormat:", @"number of bind groups set(%u) is less than the pipeline uses(%zu)", v4, v5);
      double result = (unsigned char *)objc_claimAutoreleasedReturnValue();
LABEL_25:
      return result;
    }
LABEL_24:
    double result = 0;
    goto LABEL_25;
  }
  if (!v5) {
    goto LABEL_24;
  }
  unint64_t v7 = 0;
  while (1)
  {
    uint64_t v8 = *a2;
    if (!*a2) {
      goto LABEL_28;
    }
    unsigned int v9 = *(_DWORD *)(v8 - 8);
    unsigned int v10 = 9 * ((~(v7 << 15) + v7) ^ ((~(v7 << 15) + v7) >> 10));
    unsigned int v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
    uint64_t v12 = v9 & (v11 ^ HIWORD(v11));
    int v13 = *(_DWORD *)(v8 + 16 * v12);
    if (v13 != v7)
    {
      int v14 = 1;
      while (v13 != -1)
      {
        uint64_t v12 = (v12 + v14) & v9;
        int v13 = *(_DWORD *)(v8 + 16 * v12);
        ++v14;
        if (v13 == v7) {
          goto LABEL_18;
        }
      }
      uint64_t v12 = *(unsigned int *)(v8 - 4);
    }
LABEL_18:
    if (v12 == *(_DWORD *)(v8 - 4) || (uint64_t v15 = *(void *)(v8 + 16 * v12 + 8)) == 0)
    {
LABEL_28:
      objc_msgSend(NSString, "stringWithFormat:", @"can not find bind group in pipeline for bindGroup index %zu", v7);
      double result = (unsigned char *)objc_claimAutoreleasedReturnValue();
      goto LABEL_25;
    }
    uint64_t v16 = *(void *)(v15 + 64);
    if (!v16)
    {
      objc_msgSend(NSString, "stringWithFormat:", @"can not find bind group in set bind groups for bindGroup index %zu", v7);
      double result = (unsigned char *)objc_claimAutoreleasedReturnValue();
      goto LABEL_25;
    }
    if (v7 >= *((unsigned int *)v3 + 7)) {
      break;
    }
    WebGPU::BindGroupLayout::errorValidatingBindGroupCompatibility(*(void *)(*((void *)v3 + 2) + 8 * v7), v16);
    double result = (unsigned char *)objc_claimAutoreleasedReturnValue();
    if (result) {
      goto LABEL_25;
    }
    if (++v7 == v5) {
      goto LABEL_24;
    }
  }
  __break(0xC471u);
  return result;
}

_DWORD *wgpuPipelineLayoutReference(_DWORD *result)
{
  return result;
}

atomic_uchar *volatile **wgpuPipelineLayoutRelease(atomic_uchar *volatile **result, void *a2)
{
  if (*(_DWORD *)result == 1)
  {
    WebGPU::PipelineLayout::~PipelineLayout(result, a2);
    return (atomic_uchar *volatile **)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_DWORD *wgpuPipelineLayoutSetLabel(int a1, char *__s)
{
  if (__s) {
    strlen(__s);
  }
  WTF::String::fromUTF8();
  double result = v3;
  if (v3)
  {
    if (*v3 == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *v3 -= 2;
    }
  }
  return result;
}

_DWORD *WebGPU::PresentationContext::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *(void *)a1;
  if (!*(void *)a1 || *(void *)v4) {
    goto LABEL_3;
  }
  int v7 = *(_DWORD *)(v4 + 8);
  if (v7 == 1)
  {
    uint64_t v8 = WTF::fastMalloc((WTF *)0x68);
    *(_DWORD *)(v8 + 8) = 1;
    *(void *)uint64_t v8 = &unk_1ECABAFD0;
    double result = *(id *)(*(void *)a1 + 16);
    *(void *)(v8 + 16) = result;
    *(unsigned char *)(v8 + 24) = 0;
    *(unsigned char *)(v8 + 96) = 0;
    *a3 = v8;
  }
  else
  {
    if (v7 != 25073424)
    {
LABEL_3:
      double result = (_DWORD *)WTF::fastMalloc((WTF *)0x10);
      result[2] = 1;
      *(void *)double result = &unk_1ECABAF68;
      *a3 = (uint64_t)result;
      return result;
    }
    double result = WebGPU::PresentationContextIOSurface::create(a1, a2, &v9);
    *a3 = v9;
  }
  return result;
}

uint64_t WebGPU::PresentationContext::getCurrentTexture(WebGPU::PresentationContext *this)
{
  return 0;
}

uint64_t WebGPU::PresentationContext::getCurrentTextureView(WebGPU::PresentationContext *this)
{
  return 0;
}

uint64_t wgpuSurfaceReference(uint64_t result)
{
  return result;
}

_DWORD *wgpuSurfaceRelease(_DWORD *result)
{
  if (result[2] == 1) {
    return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  --result[2];
  return result;
}

uint64_t wgpuSwapChainReference(uint64_t result)
{
  return result;
}

_DWORD *wgpuSwapChainRelease(_DWORD *result)
{
  if (result[2] == 1) {
    return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  --result[2];
  return result;
}

uint64_t wgpuSurfaceGetPreferredFormat()
{
  return 23;
}

uint64_t wgpuSwapChainGetCurrentTexture(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t wgpuSwapChainGetCurrentTextureView(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t wgpuSwapChainPresent(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

uint64_t wgpuSwapChainGetTextureAsNativeImage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

uint64_t WebGPU::PresentationContext::isPresentationContextIOSurface(WebGPU::PresentationContext *this)
{
  return 0;
}

uint64_t WebGPU::PresentationContext::isPresentationContextCoreAnimation(WebGPU::PresentationContext *this)
{
  return 0;
}

void WebGPU::PresentationContext::getTextureAsNativeImage(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebGPU::PresentationContext::isValid(WebGPU::PresentationContext *this)
{
  return 0;
}

void WebGPU::PresentationContextCoreAnimation::~PresentationContextCoreAnimation(WebGPU::PresentationContextCoreAnimation *this, void *a2)
{
  *(void *)this = &unk_1ECABAFD0;
  if (*((unsigned char *)this + 96))
  {
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)this + 11, a2);
    uint64_t v4 = (_DWORD *)*((void *)this + 9);
    *((void *)this + 9) = 0;
    if (v4)
    {
      if (*v4 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v4 -= 2;
      }
    }
    std::__optional_destruct_base<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 24, v3);
  }
}

{
  void *v3;
  _DWORD *v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1ECABAFD0;
  if (*((unsigned char *)this + 96))
  {
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)this + 11, a2);
    uint64_t v4 = (_DWORD *)*((void *)this + 9);
    *((void *)this + 9) = 0;
    if (v4)
    {
      if (*v4 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v4 -= 2;
      }
    }
    std::__optional_destruct_base<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 24, v3);
  }

  WTF::fastFree(this, v5);
}

uint64_t WebGPU::PresentationContextCoreAnimation::configure(uint64_t result, atomic_uchar *volatile *a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v6 = result + 24;
  if (*(unsigned char *)(result + 96))
  {
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)(result + 88), (void *)a2);
    uint64_t v8 = *(_DWORD **)(v5 + 72);
    *(void *)(v5 + 72) = 0;
    if (v8)
    {
      if (*v8 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v8 -= 2;
      }
    }
    double result = std::__optional_destruct_base<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState,false>::~__optional_destruct_base[abi:sn180100](v6, v7);
    *(unsigned char *)(v5 + 96) = 0;
  }
  if (!*(void *)a3)
  {
    int v9 = *(_DWORD *)(a3 + 20);
    if ((v9 - 23) < 2 || v9 == 34 || v9 == 26 && *((unsigned char *)a2 + 280))
    {
      uint64_t v10 = *(void *)(a3 + 24);
      int v11 = *(_DWORD *)(a3 + 16);
      if (*(void *)(a3 + 8)) {
        strlen(*(const char **)(a3 + 8));
      }
      WTF::String::fromUTF8();
      char v13 = 0;
      int v14 = *(_DWORD *)(a3 + 20);
      LOBYTE(v63[0]) = 0;
      unsigned __int8 v65 = 0;
      uint64_t v66 = v10;
      int v67 = v11;
      char v68 = v62;
      int v69 = v14;
      atomic_uchar *volatile v15 = *a2;
      int v16 = 1;
      atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v13, 1u, memory_order_acquire, memory_order_acquire);
      if (v13) {
        MEMORY[0x18530AEA0](v15);
      }
      ++*((void *)v15 + 1);
      atomic_compare_exchange_strong_explicit(v15, (unsigned __int8 *)&v16, 0, memory_order_release, memory_order_relaxed);
      if (v16 == 1)
      {
        if (*(unsigned char *)(v5 + 96)) {
          goto LABEL_18;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((uint64_t *)v63, (WTF::Lock *)v15);
        if (*(unsigned char *)(v5 + 96))
        {
LABEL_18:
          if (*(unsigned __int8 *)(v5 + 48) == v65)
          {
            if (*(unsigned char *)(v5 + 48))
            {
              unint64_t v17 = v63[0];
              v63[0] = 0;
              uint64_t v18 = *(void **)(v5 + 24);
              *(void *)(v5 + 24) = v17;

              uint64_t v19 = v63[1];
              v63[1] = 0;
              int v20 = *(WebGPU::Texture **)(v5 + 32);
              *(void *)(v5 + 32) = v19;
              if (v20)
              {
                if (*(_DWORD *)v20 == 1)
                {
                  WebGPU::Texture::~Texture(v20, v12);
                  WTF::fastFree(v23, v24);
                }
                else
                {
                  --*(_DWORD *)v20;
                }
              }
              unint64_t v25 = v64;
              int v64 = 0;
              int v26 = *(WebGPU::TextureView **)(v5 + 40);
              *(void *)(v5 + 40) = v25;
              if (v26)
              {
                if (*(_DWORD *)v26 == 1)
                {
                  WebGPU::TextureView::~TextureView(v26, v12);
                  WTF::fastFree(v27, v28);
                }
                else
                {
                  --*(_DWORD *)v26;
                }
              }
            }
          }
          else if (*(unsigned char *)(v5 + 48))
          {
            std::__optional_destruct_base<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState,false>::reset[abi:sn180100](v6, v12);
          }
          else
          {
            long long v21 = *(_OWORD *)v63;
            v63[0] = 0;
            v63[1] = 0;
            *(_OWORD *)(v5 + 24) = v21;
            uint64_t v22 = v64;
            int v64 = 0;
            *(void *)(v5 + 40) = v22;
            *(unsigned char *)(v5 + 4++*(_DWORD *)(result + 8) = 1;
          }
          *(void *)(v5 + 56) = v66;
          *(_DWORD *)(v5 + 64) = v67;
          unsigned int v29 = v68;
          char v68 = 0;
          uint64_t v30 = *(_DWORD **)(v5 + 72);
          *(void *)(v5 + 72) = v29;
          if (v30)
          {
            if (*v30 == 2)
            {
              WTF::StringImpl::destroy();
              *(_DWORD *)(v5 + 80) = v69;
              int v70 = 0;
              int v31 = *(atomic_uchar *volatile **)(v5 + 88);
              *(void *)(v5 + 8++*(_DWORD *)(result + 8) = a2;
              if (!v31) {
                goto LABEL_58;
              }
              goto LABEL_37;
            }
            *v30 -= 2;
          }
          *(_DWORD *)(v5 + 80) = v69;
          int v70 = 0;
          int v31 = *(atomic_uchar *volatile **)(v5 + 88);
          *(void *)(v5 + 8++*(_DWORD *)(result + 8) = a2;
          if (!v31) {
            goto LABEL_58;
          }
LABEL_37:
          char v32 = 0;
          atomic_uchar *volatile v33 = *v31;
          atomic_compare_exchange_strong_explicit(*v31, (unsigned __int8 *)&v32, 1u, memory_order_acquire, memory_order_acquire);
          if (v32)
          {
            MEMORY[0x18530AEA0](v33);
            int v34 = 1;
            uint64_t v35 = (uint64_t *)(*((void *)v33 + 1) - 1);
            *((void *)v33 + 1) = v35;
            if (v35)
            {
LABEL_39:
              unint64_t v36 = 0;
              BOOL v37 = 1;
              atomic_compare_exchange_strong_explicit(v33, (unsigned __int8 *)&v34, 0, memory_order_release, memory_order_relaxed);
              if (v34 == 1) {
                goto LABEL_40;
              }
              goto LABEL_80;
            }
          }
          else
          {
            int v34 = 1;
            uint64_t v35 = (uint64_t *)(*((void *)v33 + 1) - 1);
            *((void *)v33 + 1) = v35;
            if (v35) {
              goto LABEL_39;
            }
          }
          uint64_t v59 = *((void *)v33 + 2);
          unint64_t v36 = (WebGPU::Device *)*((void *)v33 + 3);
          *((void *)v33 + 3) = 0;
          BOOL v37 = v59 != 0;
          atomic_compare_exchange_strong_explicit(v33, (unsigned __int8 *)&v34, 0, memory_order_release, memory_order_relaxed);
          if (v34 == 1)
          {
LABEL_40:
            if (v35) {
              goto LABEL_45;
            }
LABEL_41:
            if (v36)
            {
              WebGPU::Device::~Device(v36, v12);
              WTF::fastFree(v38, v39);
            }
            if (!v37) {
              WTF::fastFree((WTF *)v33, v12);
            }
LABEL_45:
            unint64_t v40 = v70;
            int v70 = 0;
            if (!v40) {
              goto LABEL_58;
            }
            char v41 = 0;
            atomic_uchar *volatile v42 = *v40;
            atomic_compare_exchange_strong_explicit(*v40, (unsigned __int8 *)&v41, 1u, memory_order_acquire, memory_order_acquire);
            if (v41)
            {
              MEMORY[0x18530AEA0](v42);
              int v43 = 1;
              char v44 = (uint64_t *)(*((void *)v42 + 1) - 1);
              *((void *)v42 + 1) = v44;
              if (v44)
              {
LABEL_48:
                uint64_t v45 = 0;
                BOOL v46 = 1;
                atomic_compare_exchange_strong_explicit(v42, (unsigned __int8 *)&v43, 0, memory_order_release, memory_order_relaxed);
                if (v43 == 1) {
                  goto LABEL_49;
                }
                goto LABEL_84;
              }
            }
            else
            {
              int v43 = 1;
              char v44 = (uint64_t *)(*((void *)v42 + 1) - 1);
              *((void *)v42 + 1) = v44;
              if (v44) {
                goto LABEL_48;
              }
            }
            uint64_t v60 = *((void *)v42 + 2);
            uint64_t v45 = (WebGPU::Device *)*((void *)v42 + 3);
            *((void *)v42 + 3) = 0;
            BOOL v46 = v60 != 0;
            atomic_compare_exchange_strong_explicit(v42, (unsigned __int8 *)&v43, 0, memory_order_release, memory_order_relaxed);
            if (v43 == 1)
            {
LABEL_49:
              if (v44) {
                goto LABEL_58;
              }
LABEL_50:
              if (v45)
              {
                WebGPU::Device::~Device(v45, v12);
                WTF::fastFree(v47, v48);
              }
              if (!v46) {
                WTF::fastFree((WTF *)v42, v12);
              }
              goto LABEL_58;
            }
LABEL_84:
            int v61 = v44;
            WTF::Lock::unlockSlow(v44, (WTF::Lock *)v42);
            if (v61) {
              goto LABEL_58;
            }
            goto LABEL_50;
          }
LABEL_80:
          int v61 = v35;
          WTF::Lock::unlockSlow(v35, (WTF::Lock *)v33);
          if (v61) {
            goto LABEL_45;
          }
          goto LABEL_41;
        }
      }
      *(unsigned char *)(v5 + 24) = 0;
      *(unsigned char *)(v5 + 4++*(_DWORD *)(result + 8) = 0;
      if (v65)
      {
        long long v49 = *(_OWORD *)v63;
        v63[0] = 0;
        v63[1] = 0;
        *(_OWORD *)(v5 + 24) = v49;
        uint64_t v50 = v64;
        int v64 = 0;
        *(void *)(v5 + 40) = v50;
        *(unsigned char *)(v5 + 4++*(_DWORD *)(result + 8) = 1;
      }
      *(void *)(v5 + 56) = v66;
      *(_DWORD *)(v5 + 64) = v67;
      uint64_t v51 = v68;
      char v68 = 0;
      *(void *)(v5 + 72) = v51;
      *(_DWORD *)(v5 + 80) = v69;
      *(void *)(v5 + 8++*(_DWORD *)(result + 8) = a2;
      *(unsigned char *)(v5 + 96) = 1;
LABEL_58:
      if (v68)
      {
        if (*v68 == 2)
        {
          WTF::StringImpl::destroy();
          if (!v65)
          {
LABEL_74:
            [*(id *)(v5 + 16) setPixelFormat:WebGPU::Texture::pixelFormat(*(_DWORD *)(a3 + 20))];
            if (*(_DWORD *)(a3 + 16) == 16) {
              [*(id *)(v5 + 16) setFramebufferOnly:1];
            }
            LODWORD(v57) = *(_DWORD *)(a3 + 24);
            LODWORD(v5++*(_DWORD *)(result + 8) = *(_DWORD *)(a3 + 28);
            objc_msgSend(*(id *)(v5 + 16), "setDrawableSize:", (double)v57, (double)v58, v61, 0);
            return [*(id *)(v5 + 16) setDevice:*((void *)a2 + 1)];
          }
LABEL_64:
          if (v64)
          {
            if (*(_DWORD *)v64 == 1)
            {
              WebGPU::TextureView::~TextureView(v64, v12);
              WTF::fastFree(v53, v54);
              int32x2_t v52 = v63[1];
              if (!v63[1])
              {
LABEL_73:

                goto LABEL_74;
              }
LABEL_70:
              if (*(_DWORD *)v52 == 1)
              {
                WebGPU::Texture::~Texture(v52, v12);
                WTF::fastFree(v55, v56);
              }
              else
              {
                --*(_DWORD *)v52;
              }
              goto LABEL_73;
            }
            --*(_DWORD *)v64;
          }
          int32x2_t v52 = v63[1];
          if (!v63[1]) {
            goto LABEL_73;
          }
          goto LABEL_70;
        }
        *v68 -= 2;
      }
      if (!v65) {
        goto LABEL_74;
      }
      goto LABEL_64;
    }
  }
  return result;
}

void sub_18250218C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _DWORD *a17)
{
  uint64_t v18 = a17;
  a17 = 0;
  if (v18)
  {
    if (*v18 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v18 -= 2;
    }
  }
  std::__optional_destruct_base<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a11, a2);
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebGPU::PresentationContextCoreAnimation::unconfigure(uint64_t this, void *a2)
{
  if (*(unsigned char *)(this + 96))
  {
    uint64_t v2 = this;
    uint64_t v3 = this + 24;
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)(this + 88), a2);
    uint64_t v5 = *(_DWORD **)(v2 + 72);
    *(void *)(v2 + 72) = 0;
    if (v5)
    {
      if (*v5 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v5 -= 2;
      }
    }
    this = std::__optional_destruct_base<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState,false>::~__optional_destruct_base[abi:sn180100](v3, v4);
    *(unsigned char *)(v2 + 96) = 0;
  }
  return this;
}

void WebGPU::PresentationContextCoreAnimation::Configuration::generateCurrentFrameState(WebGPU::PresentationContextCoreAnimation::Configuration *this, CAMetalLayer *a2, void *a3)
{
  id v5 = a3;
  WTF::String::utf8();
  uint64_t v6 = [v5 nextDrawable];
  int v7 = [v6 texture];
  if (v42) {
    uint64_t v8 = v42 + 16;
  }
  else {
    uint64_t v8 = 0;
  }
  v33[0] = 0;
  v33[1] = v8;
  int priv = (int)a2[2]._priv;
  int v35 = 1;
  Class isa = a2[2].super.super.isa;
  int v9 = (int)a2[3]._priv;
  int v37 = 1;
  int v38 = v9;
  uint64_t v39 = 0x100000001;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  v29[0] = (WTF *)WTF::fastMalloc((WTF *)4);
  *(_DWORD *)v29[0] = v9;
  v29[1] = (WTF *)0x100000001;
  uint64_t v10 = (atomic_uchar *volatile *)a2[4].super.super.isa;
  id v11 = v7;
  uint64_t v12 = (WebGPU::Texture *)WTF::fastMalloc((WTF *)0x80);
  WebGPU::Texture::Texture((uint64_t)v12, v11, (uint64_t)v33, (uint64_t *)v29, v10);
  char v32 = v12;

  if (v29[0]) {
    WTF::fastFree(v29[0], v13);
  }
  *(_OWORD *)unsigned int v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  if (v42) {
    int v14 = (WTF *)(v42 + 16);
  }
  else {
    int v14 = 0;
  }
  v29[1] = v14;
  LODWORD(v30) = a2[3]._priv;
  DWORD1(v30) = 2;
  HIDWORD(v30) = 1;
  DWORD1(v31) = 1;
  *(void *)&long long v28 = a2[2].super.super.isa;
  DWORD2(v2++*(_DWORD *)(result + 8) = 1;
  BYTE12(v2++*(_DWORD *)(result + 8) = 1;
  atomic_uchar *volatile v15 = (atomic_uchar *volatile *)a2[4].super.super.isa;
  id v16 = v11;
  unint64_t v17 = (WebGPU::TextureView *)WTF::fastMalloc((WTF *)0x78);
  WebGPU::TextureView::TextureView((uint64_t)v17, v16, v29, &v28, v12, v15);

  id v19 = v6;
  ++*(_DWORD *)v12;
  *(void *)this = v19;
  *((void *)this + 1) = v12;
  int v20 = (*(_DWORD *)v17)++;
  *((void *)this + 2) = v17;
  if (v20)
  {
    *(_DWORD *)unint64_t v17 = v20;
    int v21 = *(_DWORD *)v12 - 1;
    if (*(_DWORD *)v12 != 1) {
      goto LABEL_11;
    }
LABEL_14:
    WebGPU::Texture::~Texture(v12, v18);
    WTF::fastFree(v26, v27);

    uint64_t v23 = (WTF *)v42;
    uint64_t v42 = 0;
    if (!v23) {
      goto LABEL_18;
    }
    goto LABEL_15;
  }
  WebGPU::TextureView::~TextureView(v17, v18);
  WTF::fastFree(v24, v25);
  int v21 = *(_DWORD *)v12 - 1;
  if (*(_DWORD *)v12 == 1) {
    goto LABEL_14;
  }
LABEL_11:
  *(_DWORD *)uint64_t v12 = v21;

  uint64_t v23 = (WTF *)v42;
  uint64_t v42 = 0;
  if (!v23) {
    goto LABEL_18;
  }
LABEL_15:
  if (*(_DWORD *)v23 == 1) {
    WTF::fastFree(v23, v22);
  }
  else {
    --*(_DWORD *)v23;
  }
LABEL_18:
}

void sub_182502494(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WebGPU::Texture *a17)
{
  WTF::fastFree(v21, a2);

  WTF::Ref<WebGPU::Texture,WTF::RawPtrTraits<WebGPU::Texture>,WTF::DefaultRefDerefTraits<WebGPU::Texture>>::~Ref(&a17, v24);
  int v26 = *(WTF **)(v22 - 104);
  *(void *)(v22 - 104) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
    {
      WTF::fastFree(v26, v25);

      _Unwind_Resume(a1);
    }
    --*(_DWORD *)v26;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

WebGPU::Texture **WTF::Ref<WebGPU::Texture,WTF::RawPtrTraits<WebGPU::Texture>,WTF::DefaultRefDerefTraits<WebGPU::Texture>>::~Ref(WebGPU::Texture **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  if (!v3) {
    return a1;
  }
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    return a1;
  }
  WebGPU::Texture::~Texture(v3, a2);
  WTF::fastFree(v5, v6);
  return a1;
}

void WebGPU::PresentationContextCoreAnimation::present(WebGPU::PresentationContextCoreAnimation *this)
{
  if (!*((unsigned char *)this + 96)) {
    return;
  }
  uint64_t v2 = (CAMetalLayer *)((char *)this + 24);
  if (!*((unsigned char *)this + 48))
  {
    WebGPU::PresentationContextCoreAnimation::Configuration::generateCurrentFrameState((WebGPU::PresentationContextCoreAnimation::Configuration *)&v10, v2, *((void **)this + 2));
    if (!*((unsigned char *)this + 96)) {
      goto LABEL_21;
    }
    std::optional<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState>::operator=[abi:sn180100]<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState,void>((uint64_t)v2, (uint64_t *)&v10);
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
      {
        WebGPU::TextureView::~TextureView(v12, v3);
        WTF::fastFree(v5, v6);
        uint64_t v4 = v11;
        if (!v11) {
          goto LABEL_13;
        }
LABEL_11:
        if (*(_DWORD *)v4 == 1)
        {
          WebGPU::Texture::~Texture(v4, v3);
          WTF::fastFree(v7, v8);

          if (!*((unsigned char *)this + 96)) {
            goto LABEL_21;
          }
          goto LABEL_16;
        }
        --*(_DWORD *)v4;
LABEL_13:

        if (!*((unsigned char *)this + 96)) {
          goto LABEL_21;
        }
LABEL_16:
        if (*((unsigned char *)this + 48)) {
          goto LABEL_17;
        }
LABEL_21:
        __break(1u);
        return;
      }
      --*(_DWORD *)v12;
    }
    uint64_t v4 = v11;
    if (!v11) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
LABEL_17:
  [*((id *)this + 3) present];
  if (!*((unsigned char *)this + 96)) {
    goto LABEL_21;
  }
  std::__optional_destruct_base<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState,false>::reset[abi:sn180100]((uint64_t)v2, v9);
}

uint64_t std::optional<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState>::operator=[abi:sn180100]<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState,void>(uint64_t a1, uint64_t *a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v5 = *a2;
  *a2 = 0;
  if (!v4)
  {
    uint64_t v12 = a2[1];
    a2[1] = 0;
    *(void *)a1 = v5;
    *(void *)(a1 + ++*(_DWORD *)(result + 8) = v12;
    uint64_t v13 = a2[2];
    a2[2] = 0;
    *(void *)(a1 + 16) = v13;
    *(unsigned char *)(a1 + 24) = 1;
    return a1;
  }
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;

  uint64_t v8 = a2[1];
  a2[1] = 0;
  int v9 = *(WebGPU::Texture **)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = v8;
  if (!v9) {
    goto LABEL_5;
  }
  if (*(_DWORD *)v9 == 1)
  {
    WebGPU::Texture::~Texture(v9, v7);
    WTF::fastFree(v15, v16);
    uint64_t v17 = a2[2];
    a2[2] = 0;
    id v11 = *(WebGPU::TextureView **)(a1 + 16);
    *(void *)(a1 + 16) = v17;
    if (v11) {
      goto LABEL_10;
    }
    return a1;
  }
  --*(_DWORD *)v9;
LABEL_5:
  uint64_t v10 = a2[2];
  a2[2] = 0;
  id v11 = *(WebGPU::TextureView **)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  if (!v11) {
    return a1;
  }
LABEL_10:
  if (*(_DWORD *)v11 == 1)
  {
    WebGPU::TextureView::~TextureView(v11, v7);
    WTF::fastFree(v18, v19);
  }
  else
  {
    --*(_DWORD *)v11;
  }
  return a1;
}

void WebGPU::PresentationContextCoreAnimation::getCurrentTexture(WebGPU::PresentationContextCoreAnimation *this)
{
  if (*((unsigned char *)this + 96) && !*((unsigned char *)this + 48))
  {
    WebGPU::PresentationContextCoreAnimation::Configuration::generateCurrentFrameState((WebGPU::PresentationContextCoreAnimation::Configuration *)&v8, (CAMetalLayer *)((char *)this + 24), *((void **)this + 2));
    if (!*((unsigned char *)this + 96)) {
      goto LABEL_18;
    }
    std::optional<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState>::operator=[abi:sn180100]<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState,void>((uint64_t)this + 24, (uint64_t *)&v8);
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        WebGPU::TextureView::~TextureView(v10, v2);
        WTF::fastFree(v4, v5);
        uint64_t v3 = v9;
        if (!v9) {
          goto LABEL_13;
        }
LABEL_11:
        if (*(_DWORD *)v3 == 1)
        {
          WebGPU::Texture::~Texture(v3, v2);
          WTF::fastFree(v6, v7);

          if (!*((unsigned char *)this + 96)) {
            goto LABEL_18;
          }
          goto LABEL_16;
        }
        --*(_DWORD *)v3;
LABEL_13:

        if (!*((unsigned char *)this + 96)) {
          goto LABEL_18;
        }
LABEL_16:
        if (*((unsigned char *)this + 48)) {
          return;
        }
LABEL_18:
        __break(1u);
        return;
      }
      --*(_DWORD *)v10;
    }
    uint64_t v3 = v9;
    if (!v9) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
}

void WebGPU::PresentationContextCoreAnimation::getCurrentTextureView(WebGPU::PresentationContextCoreAnimation *this)
{
  if (*((unsigned char *)this + 96) && !*((unsigned char *)this + 48))
  {
    WebGPU::PresentationContextCoreAnimation::Configuration::generateCurrentFrameState((WebGPU::PresentationContextCoreAnimation::Configuration *)&v8, (CAMetalLayer *)((char *)this + 24), *((void **)this + 2));
    if (!*((unsigned char *)this + 96)) {
      goto LABEL_18;
    }
    std::optional<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState>::operator=[abi:sn180100]<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState,void>((uint64_t)this + 24, (uint64_t *)&v8);
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        WebGPU::TextureView::~TextureView(v10, v2);
        WTF::fastFree(v4, v5);
        uint64_t v3 = v9;
        if (!v9) {
          goto LABEL_13;
        }
LABEL_11:
        if (*(_DWORD *)v3 == 1)
        {
          WebGPU::Texture::~Texture(v3, v2);
          WTF::fastFree(v6, v7);

          if (!*((unsigned char *)this + 96)) {
            goto LABEL_18;
          }
          goto LABEL_16;
        }
        --*(_DWORD *)v3;
LABEL_13:

        if (!*((unsigned char *)this + 96)) {
          goto LABEL_18;
        }
LABEL_16:
        if (*((unsigned char *)this + 48)) {
          return;
        }
LABEL_18:
        __break(1u);
        return;
      }
      --*(_DWORD *)v10;
    }
    uint64_t v3 = v9;
    if (!v9) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
}

uint64_t WebGPU::PresentationContextCoreAnimation::isPresentationContextCoreAnimation(WebGPU::PresentationContextCoreAnimation *this)
{
  return 1;
}

uint64_t WebGPU::PresentationContextCoreAnimation::isValid(WebGPU::PresentationContextCoreAnimation *this)
{
  return *((unsigned __int8 *)this + 96);
}

uint64_t std::__optional_destruct_base<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(WebGPU::TextureView **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 1)
      {
        WebGPU::TextureView::~TextureView(v3, a2);
        WTF::fastFree(v5, v6);
        int v4 = *(WebGPU::Texture **)(a1 + 8);
        *(void *)(a1 + ++*(_DWORD *)(result + 8) = 0;
        if (!v4)
        {
LABEL_11:

          return a1;
        }
LABEL_8:
        if (*(_DWORD *)v4 == 1)
        {
          WebGPU::Texture::~Texture(v4, a2);
          WTF::fastFree(v7, v8);
        }
        else
        {
          --*(_DWORD *)v4;
        }
        goto LABEL_11;
      }
      --*(_DWORD *)v3;
    }
    int v4 = *(WebGPU::Texture **)(a1 + 8);
    *(void *)(a1 + ++*(_DWORD *)(result + 8) = 0;
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_8;
  }
  return a1;
}

void std::__optional_destruct_base<WebGPU::PresentationContextCoreAnimation::Configuration::FrameState,false>::reset[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(WebGPU::TextureView **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 1)
      {
        WebGPU::TextureView::~TextureView(v3, a2);
        WTF::fastFree(v5, v6);
        int v4 = *(WebGPU::Texture **)(a1 + 8);
        *(void *)(a1 + ++*(_DWORD *)(result + 8) = 0;
        if (!v4)
        {
LABEL_11:

          *(unsigned char *)(a1 + 24) = 0;
          return;
        }
LABEL_8:
        if (*(_DWORD *)v4 == 1)
        {
          WebGPU::Texture::~Texture(v4, a2);
          WTF::fastFree(v7, v8);
        }
        else
        {
          --*(_DWORD *)v4;
        }
        goto LABEL_11;
      }
      --*(_DWORD *)v3;
    }
    int v4 = *(WebGPU::Texture **)(a1 + 8);
    *(void *)(a1 + ++*(_DWORD *)(result + 8) = 0;
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_8;
  }
}

_DWORD *WebGPU::PresentationContextIOSurface::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = WTF::fastMalloc((WTF *)0x60);
  int v8 = 1;
  *(_DWORD *)(v7 + ++*(_DWORD *)(result + 8) = 1;
  *(void *)uint64_t v7 = &unk_1ECABB098;
  *(unsigned char *)(v7 + 80) = 0;
  *(unsigned char *)(v7 + 84) = 0;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 4++*(_DWORD *)(result + 8) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  if (*(unsigned char *)(a2 + 52))
  {
    WTF::MachSendRight::MachSendRight();
    *(unsigned char *)(v7 + 84) = 1;
    int v8 = *(_DWORD *)(v7 + 8);
  }
  *(void *)(v7 + 8++*(_DWORD *)(result + 8) = 0x200000000;
  *a3 = v7;
  uint64_t v9 = *(void *)(*(void *)a1 + 16);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3321888768;
  v16[2] = ___ZN6WebGPU28PresentationContextIOSurface6createERK21WGPUSurfaceDescriptorRKNS_8InstanceE_block_invoke;
  v16[3] = &__block_descriptor_40_ea8_32c97_ZTSKZN6WebGPU28PresentationContextIOSurface6createERK21WGPUSurfaceDescriptorRKNS_8InstanceEE3__0_e20_v16__0____CFArray__8l;
  uint64_t v17 = (_DWORD *)v7;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3321888768;
  v14[2] = ___ZN6WebGPU28PresentationContextIOSurface6createERK21WGPUSurfaceDescriptorRKNS_8InstanceE_block_invoke_1;
  v14[3] = &__block_descriptor_40_ea8_32c97_ZTSKZN6WebGPU28PresentationContextIOSurface6createERK21WGPUSurfaceDescriptorRKNS_8InstanceEE3__1_e14_v16__0___v___8l;
  *(_DWORD *)(v7 + ++*(_DWORD *)(result + 8) = v8 + 4;
  atomic_uchar *volatile v15 = (_DWORD *)v7;
  (*(void (**)(uint64_t, void *, void *, uint64_t))(v9 + 16))(v9, v16, v14, v6);
  int v10 = *(_DWORD *)(v7 + 8) - 1;
  if (*(_DWORD *)(v7 + 8) == 1)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    int v11 = *(_DWORD *)(v7 + 8) - 1;
    if (*(_DWORD *)(v7 + 8) != 1)
    {
LABEL_5:
      *(_DWORD *)(v7 + ++*(_DWORD *)(result + 8) = v11;
      uint64_t v12 = v15;
      atomic_uchar *volatile v15 = 0;
      if (!v12) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
  }
  else
  {
    *(_DWORD *)(v7 + ++*(_DWORD *)(result + 8) = v10;
    int v11 = v10 - 1;
    if (v11) {
      goto LABEL_5;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  uint64_t v12 = v15;
  atomic_uchar *volatile v15 = 0;
  if (!v12) {
    goto LABEL_11;
  }
LABEL_9:
  if (v12[2] == 1)
  {
    (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
    double result = v17;
    uint64_t v17 = 0;
    if (!result) {
      return result;
    }
    goto LABEL_12;
  }
  --v12[2];
LABEL_11:
  double result = v17;
  uint64_t v17 = 0;
  if (!result) {
    return result;
  }
LABEL_12:
  if (result[2] == 1) {
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
  }
  --result[2];
  return result;
}

void sub_182502D98(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 84)) {
    WTF::MachSendRight::~MachSendRight(v2);
  }

  uint64_t v5 = *(WebGPU::Texture **)(v1 + 48);
  *(void *)(v1 + 4++*(_DWORD *)(result + 8) = 0;
  if (v5) {
    WTF::RefCounted<WebGPU::Texture>::deref(v5, v4);
  }
  uint64_t v6 = *(atomic_uchar *volatile **)(v1 + 40);
  *(void *)(v1 + 40) = 0;
  if (v6) {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v6, v4);
  }
  WTF::Vector<WebGPU::PresentationContextIOSurface::RenderBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v1 + 24), v4);

  WTF::fastFree((WTF *)v1, v7);
  _Unwind_Resume(a1);
}

void sub_182502DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _DWORD *a18)
{
  if (a13)
  {
    if (a13[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a13 + 8))(a13);
    }
    else {
      --a13[2];
    }
  }
  if (v18[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v18 + 8))(v18);
  }
  else {
    --v18[2];
  }
  if (a18)
  {
    if (a18[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a18 + 8))(a18);
    }
    else {
      --a18[2];
    }
  }
  if (v18[2] == 1)
  {
    (*(void (**)(_DWORD *))(*(void *)v18 + 8))(v18);
    WTF::Ref<WebGPU::PresentationContextIOSurface,WTF::RawPtrTraits<WebGPU::PresentationContextIOSurface>,WTF::DefaultRefDerefTraits<WebGPU::PresentationContextIOSurface>>::~Ref(v19);
    _Unwind_Resume(a1);
  }
  --v18[2];
  WTF::Ref<WebGPU::PresentationContextIOSurface,WTF::RawPtrTraits<WebGPU::PresentationContextIOSurface>,WTF::DefaultRefDerefTraits<WebGPU::PresentationContextIOSurface>>::~Ref(v19);
  _Unwind_Resume(a1);
}

void ___ZN6WebGPU28PresentationContextIOSurface6createERK21WGPUSurfaceDescriptorRKNS_8InstanceE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  objc_storeStrong((id *)(v3 + 16), a2);
  if (*(unsigned char *)(v3 + 84) && *(_DWORD *)(v3 + 80))
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    id v6 = v4;
    uint64_t v7 = [v6 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v7)
    {
      uint64_t v8 = *(void *)v11;
      do
      {
        uint64_t v9 = 0;
        do
        {
          if (*(void *)v11 != v8) {
            objc_enumerationMutation(v6);
          }
          IOSurfaceSetOwnershipIdentity();
          ++v9;
        }
        while (v7 != v9);
        uint64_t v7 = [v6 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }
      while (v7);
    }
  }
  WTF::Vector<WebGPU::PresentationContextIOSurface::RenderBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)(v3 + 24), v5);
}

void sub_182503050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c97_ZTSKZN6WebGPU28PresentationContextIOSurface6createERK21WGPUSurfaceDescriptorRKNS_8InstanceEE3__0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  ++*(_DWORD *)(v2 + 8);
  *(void *)(result + 32) = v2;
  return result;
}

_DWORD *__destroy_helper_block_ea8_32c97_ZTSKZN6WebGPU28PresentationContextIOSurface6createERK21WGPUSurfaceDescriptorRKNS_8InstanceEE3__0(uint64_t a1)
{
  double result = *(_DWORD **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    if (result[2] == 1) {
      return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
    else {
      --result[2];
    }
  }
  return result;
}

void ___ZN6WebGPU28PresentationContextIOSurface6createERK21WGPUSurfaceDescriptorRKNS_8InstanceE_block_invoke_1(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = MEMORY[0x18530B4C0]();
  id v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  *id v6 = &unk_1ECABB120;
  v6[1] = v5;
  uint64_t v8 = v6;
  uint64_t v7 = *(void *)(v4 + 40);
  if (!v7)
  {
    (*(void (**)(uint64_t))(v5 + 16))(v5);
    uint64_t v8 = 0;
LABEL_5:
    (*(void (**)(void *))(*v6 + 8))(v6);
    goto LABEL_6;
  }
  WebGPU::Queue::onSubmittedWorkScheduled(*(void *)(v7 + 16), (unint64_t)&v8);
  id v6 = v8;
  uint64_t v8 = 0;
  if (v6) {
    goto LABEL_5;
  }
LABEL_6:
}

void sub_1825031C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }

  _Unwind_Resume(a1);
}

void sub_18250320C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c97_ZTSKZN6WebGPU28PresentationContextIOSurface6createERK21WGPUSurfaceDescriptorRKNS_8InstanceEE3__1(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  ++*(_DWORD *)(v2 + 8);
  *(void *)(result + 32) = v2;
  return result;
}

_DWORD *__destroy_helper_block_ea8_32c97_ZTSKZN6WebGPU28PresentationContextIOSurface6createERK21WGPUSurfaceDescriptorRKNS_8InstanceEE3__1(uint64_t a1)
{
  double result = *(_DWORD **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    if (result[2] == 1) {
      return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
    else {
      --result[2];
    }
  }
  return result;
}

_DWORD **WTF::Ref<WebGPU::PresentationContextIOSurface,WTF::RawPtrTraits<WebGPU::PresentationContextIOSurface>,WTF::DefaultRefDerefTraits<WebGPU::PresentationContextIOSurface>>::~Ref(_DWORD **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (!v2) {
    return a1;
  }
  if (v2[2] != 1)
  {
    --v2[2];
    return a1;
  }
  (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
  return a1;
}

void WebGPU::PresentationContextIOSurface::~PresentationContextIOSurface(WebGPU::PresentationContextIOSurface *this)
{
  *(void *)this = &unk_1ECABB098;
  if (*((unsigned char *)this + 84)) {
    WTF::MachSendRight::~MachSendRight((WebGPU::PresentationContextIOSurface *)((char *)this + 80));
  }

  id v3 = (WebGPU::Texture *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (!v3)
  {
LABEL_6:
    uint64_t v4 = (atomic_uchar *volatile *)*((void *)this + 5);
    *((void *)this + 5) = 0;
    if (!v4) {
      goto LABEL_17;
    }
    goto LABEL_9;
  }
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    goto LABEL_6;
  }
  WebGPU::Texture::~Texture(v3, v2);
  WTF::fastFree(v5, v6);
  uint64_t v4 = (atomic_uchar *volatile *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (!v4) {
    goto LABEL_17;
  }
LABEL_9:
  char v7 = 0;
  atomic_uchar *volatile v8 = *v4;
  atomic_compare_exchange_strong_explicit(*v4, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
  if (v7)
  {
    MEMORY[0x18530AEA0](v8);
    uint64_t v16 = *((void *)v8 + 1);
    uint64_t v10 = 1;
    uint64_t v11 = v16 - 1;
    *((void *)v8 + 1) = v16 - 1;
    if (v16 != 1)
    {
LABEL_11:
      long long v12 = 0;
      BOOL v13 = 1;
      atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
      if (v10 == 1) {
        goto LABEL_12;
      }
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *((void *)v8 + 1);
    uint64_t v10 = 1;
    uint64_t v11 = v9 - 1;
    *((void *)v8 + 1) = v9 - 1;
    if (v9 != 1) {
      goto LABEL_11;
    }
  }
  uint64_t v17 = *((void *)v8 + 2);
  long long v12 = (WebGPU::Device *)*((void *)v8 + 3);
  *((void *)v8 + 3) = 0;
  BOOL v13 = v17 != 0;
  atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 == 1)
  {
LABEL_12:
    if (v11) {
      goto LABEL_17;
    }
    goto LABEL_13;
  }
LABEL_20:
  WTF::Lock::unlockSlow((uint64_t *)v10, (WTF::Lock *)v8);
  if (v11) {
    goto LABEL_17;
  }
LABEL_13:
  if (v12)
  {
    WebGPU::Device::~Device(v12, v2);
    WTF::fastFree(v14, v15);
  }
  if (!v13) {
    WTF::fastFree((WTF *)v8, v2);
  }
LABEL_17:
  WTF::Vector<WebGPU::PresentationContextIOSurface::RenderBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 6, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebGPU::PresentationContextIOSurface::~PresentationContextIOSurface(this);
  WTF::fastFree(v1, v2);
}

void WebGPU::PresentationContextIOSurface::getTextureAsNativeImage(WebGPU::PresentationContextIOSurface *this@<X0>, BOOL *a2@<X2>, void *a3@<X1>, CGImageRef *a4@<X8>)
{
  *a2 = 0;
  if (!*((void *)this + 5)) {
    goto LABEL_41;
  }
  if (*((_DWORD *)this + 9) <= a3) {
    goto LABEL_41;
  }
  uint64_t v7 = *((void *)this + 3);
  uint64_t v8 = *(void *)(v7 + 16 * a3 + 8);
  if (!v8)
  {
    uint64_t v8 = *(void *)(v7 + 16 * a3);
    if (!v8) {
      goto LABEL_41;
    }
  }
  uint64_t v9 = *(void *)(v8 + 8);
  if (v9) {
    goto LABEL_9;
  }
  uint64_t v9 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v9 = 1;
  *(void *)(v9 + ++*(_DWORD *)(result + 8) = v8;
  uint64_t v10 = *(atomic_uint **)(v8 + 8);
  *(void *)(v8 + ++*(_DWORD *)(result + 8) = v9;
  if (!v10) {
    goto LABEL_9;
  }
  if (atomic_fetch_add(v10, 0xFFFFFFFF) != 1)
  {
    uint64_t v9 = *(void *)(v8 + 8);
    if (v9) {
      goto LABEL_9;
    }
LABEL_41:
    *a4 = 0;
    return;
  }
  atomic_store(1u, (unsigned int *)v10);
  WTF::fastFree((WTF *)v10, a3);
  uint64_t v9 = *(void *)(v8 + 8);
  if (!v9) {
    goto LABEL_41;
  }
LABEL_9:
  atomic_fetch_add((atomic_uint *volatile)v9, 1u);
  uint64_t v11 = *(WebGPU::Texture **)(v9 + 8);
  if (!v11 || (WebGPU::Texture::waitForCommandBufferCompletion(v11) & 1) == 0 || (uint64_t v12 = *(void *)(v9 + 8)) == 0)
  {
    *a4 = 0;
    if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) != 1) {
      return;
    }
    goto LABEL_18;
  }
  id v13 = *(id *)(v12 + 16);
  int v14 = v13;
  if (!v13 || [v13 pixelFormat] == 80 || objc_msgSend(v14, "pixelFormat") == 81)
  {
    *a2 = 1;
    *a4 = 0;

    if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) != 1) {
      return;
    }
    goto LABEL_18;
  }
  uint64_t v15 = [v14 pixelFormat];
  uint64_t v16 = (CFStringRef *)MEMORY[0x1E4F1DC98];
  if (*((_DWORD *)this + 22) == 1) {
    uint64_t v16 = (CFStringRef *)MEMORY[0x1E4F1DB90];
  }
  space = CGColorSpaceCreateWithName(*v16);
  size_t v17 = [v14 width];
  uint64_t v18 = [v14 height];
  size_t v19 = v18;
  if (*((_DWORD *)this + 23) == 1) {
    int v20 = 5;
  }
  else {
    int v20 = 1;
  }
  int v31 = v20;
  BOOL v21 = v15 == 115;
  char v22 = 2;
  if (v15 == 115) {
    char v22 = 3;
  }
  size_t v23 = v17 << v22;
  if (v15 == 115) {
    size_t v24 = 16;
  }
  else {
    size_t v24 = 8;
  }
  if (v21) {
    int v25 = 4352;
  }
  else {
    int v25 = 0x4000;
  }
  size_t v26 = v18 * v23;
  WTF::tryFastMalloc((WTF *)(v18 * v23));
  unsigned int v27 = v34;
  if (v34)
  {
    memset(v33, 0, 24);
    void v33[3] = v17;
    v33[4] = v19;
    v33[5] = 1;
    [v14 getBytes:v34 bytesPerRow:v23 fromRegion:v33 mipmapLevel:0];
    long long v28 = CGDataProviderCreateWithData(v27, v27, v26, (CGDataProviderReleaseDataCallback)WebGPU::PresentationContextIOSurface::getTextureAsNativeImage(unsigned int,BOOL &)::$_0::__invoke);
    CGBitmapInfo v29 = v31 | v25;
    long long v30 = space;
    *a4 = CGImageCreate(v17, v19, v24, (4 * v24), v23, space, v29, v28, 0, 0, kCGRenderingIntentDefault);
    if (v28) {
      CFRelease(v28);
    }
  }
  else
  {
    *a4 = 0;
    long long v30 = space;
  }
  if (v30) {
    CFRelease(v30);
  }

  if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
  {
LABEL_18:
    atomic_store(1u, (unsigned int *)v9);
    WTF::fastFree((WTF *)v9, a3);
  }
}

void sub_18250376C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  if (v15) {
    CFRelease(v15);
  }
  if (cf) {
    CFRelease(cf);
  }

  if (atomic_fetch_add(v13, 0xFFFFFFFF) != 1) {
    _Unwind_Resume(a1);
  }
  atomic_store(1u, (unsigned int *)v13);
  WTF::fastFree((WTF *)v13, v17);
  _Unwind_Resume(a1);
}

void WebGPU::PresentationContextIOSurface::configure(uint64_t a1, float *a2, uint32x2_t *a3)
{
  uint64_t v152 = *MEMORY[0x1E4F143B8];
  int v117 = (unsigned int *)(a1 + 24);
  WTF::Vector<WebGPU::PresentationContextIOSurface::RenderBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)(a1 + 24), a2);
  *(void *)(a1 + 56) = 0;
  id v6 = (WebGPU::Texture *)WTF::fastMalloc((WTF *)0x80);
  WebGPU::Texture::Texture(v6, (atomic_uchar *volatile *)a2);
  uint64_t v8 = *(WebGPU::Texture **)(a1 + 48);
  *(void *)(a1 + 4++*(_DWORD *)(result + 8) = v6;
  if (!v8)
  {
LABEL_4:
    uint32x2_t v9 = *a3;
    if (*a3) {
      return;
    }
    goto LABEL_7;
  }
  if (*(_DWORD *)v8 != 1)
  {
    --*(_DWORD *)v8;
    goto LABEL_4;
  }
  WebGPU::Texture::~Texture(v8, v7);
  WTF::fastFree(v10, v11);
  uint32x2_t v9 = *a3;
  if (*a3) {
    return;
  }
LABEL_7:
  __int32 v115 = a3[8].i32[0];
  atomic_uchar *volatile v12 = *(atomic_uchar *volatile *)a2;
  int v13 = 1;
  atomic_compare_exchange_strong_explicit(*(atomic_uchar *volatile *)a2, (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
  if (!v9.i32[0])
  {
    int v14 = (uint64_t *)(*((void *)v12 + 1) + 1);
    *((void *)v12 + 1) = v14;
    atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 == 1) {
      goto LABEL_9;
    }
LABEL_136:
    WTF::Lock::unlockSlow(v14, (WTF::Lock *)v12);
    uint64_t v15 = *(atomic_uchar *volatile **)(a1 + 40);
    *(void *)(a1 + 40) = a2;
    if (!v15) {
      goto LABEL_18;
    }
    goto LABEL_10;
  }
  MEMORY[0x18530AEA0](v12);
  int v14 = (uint64_t *)(*((void *)v12 + 1) + 1);
  *((void *)v12 + 1) = v14;
  atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
  if (v13 != 1) {
    goto LABEL_136;
  }
LABEL_9:
  uint64_t v15 = *(atomic_uchar *volatile **)(a1 + 40);
  *(void *)(a1 + 40) = a2;
  if (!v15) {
    goto LABEL_18;
  }
LABEL_10:
  char v16 = 0;
  atomic_uchar *volatile v17 = *v15;
  atomic_compare_exchange_strong_explicit(*v15, (unsigned __int8 *)&v16, 1u, memory_order_acquire, memory_order_acquire);
  if (v16)
  {
    MEMORY[0x18530AEA0](v17);
    uint64_t v108 = *((void *)v17 + 1);
    uint64_t v19 = 1;
    uint64_t v20 = v108 - 1;
    *((void *)v17 + 1) = v108 - 1;
    if (v108 != 1)
    {
LABEL_12:
      BOOL v21 = 0;
      BOOL v22 = 1;
      atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
      if (v19 == 1) {
        goto LABEL_13;
      }
LABEL_140:
      WTF::Lock::unlockSlow((uint64_t *)v19, (WTF::Lock *)v17);
      if (!v20) {
        goto LABEL_14;
      }
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v18 = *((void *)v17 + 1);
    uint64_t v19 = 1;
    uint64_t v20 = v18 - 1;
    *((void *)v17 + 1) = v18 - 1;
    if (v18 != 1) {
      goto LABEL_12;
    }
  }
  uint64_t v109 = *((void *)v17 + 2);
  BOOL v21 = (WebGPU::Device *)*((void *)v17 + 3);
  *((void *)v17 + 3) = 0;
  BOOL v22 = v109 != 0;
  atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
  if (v19 != 1) {
    goto LABEL_140;
  }
LABEL_13:
  if (!v20)
  {
LABEL_14:
    if (v21)
    {
      WebGPU::Device::~Device(v21, v7);
      WTF::fastFree(v23, v24);
    }
    if (!v22) {
      WTF::fastFree((WTF *)v17, v7);
    }
  }
LABEL_18:
  v148[0] = MEMORY[0x1E4F143A8];
  v148[1] = 3221225472;
  v148[2] = ___ZN6WebGPU28PresentationContextIOSurface9configureERNS_6DeviceERK23WGPUSwapChainDescriptor_block_invoke_2;
  v148[3] = &unk_1E521BE28;
  id v149 = &__block_literal_global_0;
  int v110 = (uint64_t (**)(void, void))MEMORY[0x18530B4C0](v148);
  int v25 = a2 + 23;
  uint32x2_t v26 = (uint32x2_t)vld1_dup_f32(v25);
  uint32x2_t v27 = vmin_u32(a3[3], v26);
  __int32 v29 = a3[2].i32[0];
  unsigned int v28 = a3[2].u32[1];
  if (((1 << v28) & 0x400840000) != 0) {
    int v30 = a3[2].i32[1];
  }
  else {
    int v30 = 23;
  }
  if (v28 <= 0x22) {
    int v31 = v30;
  }
  else {
    int v31 = 23;
  }
  int v147 = v31;
  uint32x2_t v32 = a3[1];
  v138[0] = 0;
  v138[1] = v32;
  __int32 v139 = v29;
  int v140 = 1;
  uint32x2_t v141 = v27;
  int v142 = 1;
  int v143 = v31;
  uint64_t v144 = 0x100000001;
  unsigned int v33 = a3[6].u32[1];
  if (v33 <= 1) {
    unint64_t v34 = 1;
  }
  else {
    unint64_t v34 = v33;
  }
  BOOL v35 = v33 == 0;
  unint64_t v36 = &v147;
  if (!v35) {
    unint64_t v36 = (int *)a3[5];
  }
  unint64_t v145 = v34;
  unsigned int v146 = v36;
  *(uint32x2_t *)(a1 + 8++*(_DWORD *)(result + 8) = a3[7];
  uint64_t v37 = v27.u32[0];
  uint64_t v38 = v27.u32[1];
  int v118 = [MEMORY[0x1E4F35330] texture2DDescriptorWithPixelFormat:WebGPU::Texture::pixelFormat(v31) width:v27.u32[0] height:v27.u32[1] mipmapped:0];
  unint64_t v39 = ((unint64_t)a3[2].u32[0] >> 2) & 7;
  if ((v147 - 38) < 6 || WebGPU::Texture::isCompressedFormat(v147)) {
    v39 |= 0x10uLL;
  }
  [(MTLTextureDescriptor *)v118 setUsage:v39];
  [(MTLTextureDescriptor *)v118 setStorageMode:0];
  long long v136 = 0u;
  long long v137 = 0u;
  long long v134 = 0u;
  long long v135 = 0u;
  id v40 = *(id *)(a1 + 16);
  uint64_t v41 = [v40 countByEnumeratingWithState:&v134 objects:v151 count:16];
  if (v41)
  {
    uint64_t v42 = *(void *)v135;
    do
    {
      for (uint64_t i = 0; i != v41; ++i)
      {
        if (*(void *)v135 != v42) {
          objc_enumerationMutation(v40);
        }
        char v44 = *(void **)(*((void *)&v134 + 1) + 8 * i);
        if ([v44 height] != v38 || objc_msgSend(v44, "width") != v37)
        {
          uint64_t v54 = [NSString stringWithFormat:@"Invalid surface size. Backing surface has size (%d, %d) but attempting to configure a size of (%u, %u)", objc_msgSend(v44, "width"), objc_msgSend(v44, "height"), v37, v38];
          WebGPU::generateAValidationError((WebGPU *)a2, v54, (NSString *)(v115 != 0));

          goto LABEL_59;
        }
      }
      uint64_t v41 = [v40 countByEnumeratingWithState:&v134 objects:v151 count:16];
    }
    while (v41);
  }

  unsigned int v45 = a3[2].u32[1];
  if (v45 > 0x22 || ((1 << v45) & 0x400840000) == 0)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"Requested texture format %s is not a valid context format", WebGPU::Texture::formatToString());
    int32x2_t v55 = (WebGPU::Device *)objc_claimAutoreleasedReturnValue();
    WebGPU::generateAValidationError((WebGPU *)a2, v55, (NSString *)(v115 != 0));

    goto LABEL_59;
  }
  BOOL v46 = @"Width or height is zero";
  if (!v37
    || !v38
    || (v47 = *((_DWORD *)a2 + 23), BOOL v46 = @"Requested canvas width and/or height are too large",
                                    a3[3].i32[0] > v47)
    || a3[3].i32[1] > v47)
  {
    WebGPU::generateAValidationError((WebGPU *)a2, (WebGPU::Device *)v46, (NSString *)(v115 != 0));
    goto LABEL_59;
  }
  uint64_t v48 = a3[6].u32[1];
  if (v48)
  {
    long long v49 = (unsigned int *)a3[5];
    uint64_t v50 = 4 * v48;
    do
    {
      if ((v110[2](v110, *v49) & 1) == 0)
      {
        WebGPU::generateAValidationError((WebGPU *)a2, (WebGPU::Device *)@"Requested texture view format BGRA8UnormStorage is not enabled", (NSString *)(v115 != 0));
        goto LABEL_59;
      }
      ++v49;
      v50 -= 4;
    }
    while (v50);
  }
  WTF::Vector<WGPUTextureFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<WGPUTextureFormat const,18446744073709551615ul>((uint64_t)&v132, (uint64_t)v146, v145);
  WebGPU::Device::errorValidatingTextureCreation((uint64_t)a2, v138, (unsigned int **)&v132);
  uint64_t v51 = (WebGPU::Device *)objc_claimAutoreleasedReturnValue();
  if (v51)
  {
    WebGPU::generateAValidationError((WebGPU *)a2, v51, (NSString *)(v115 != 0));
    goto LABEL_53;
  }
  if (a3[2].i32[1] == 23 && (a3[2].i8[0] & 8) != 0)
  {
    uint64_t v100 = *((unsigned int *)a2 + 61);
    if (!v100)
    {
LABEL_132:
      WebGPU::generateAValidationError((WebGPU *)a2, (WebGPU::Device *)@"Requested storage format but BGRA8UnormStorage is not enabled", (NSString *)(v115 != 0));
      goto LABEL_54;
    }
    int v101 = (int *)*((void *)a2 + 29);
    while (1)
    {
      int v102 = *v101++;
      if (v102 == 10) {
        break;
      }
      if (!--v100) {
        goto LABEL_132;
      }
    }
  }
  [(MTLTextureDescriptor *)v118 setUsage:[(MTLTextureDescriptor *)v118 usage] | 4];
  uint64_t v114 = [(MTLTextureDescriptor *)v118 pixelFormat];
  uint64_t v111 = [(MTLTextureDescriptor *)v118 usage];
  long long v130 = 0u;
  long long v131 = 0u;
  long long v128 = 0u;
  long long v129 = 0u;
  obuint64_t j = *(id *)(a1 + 16);
  uint64_t v56 = [obj countByEnumeratingWithState:&v128 objects:v150 count:16];
  if (!v56) {
    goto LABEL_125;
  }
  uint64_t v113 = *(void *)v129;
  do
  {
    uint64_t v116 = v56;
    for (uint64_t j = 0; j != v116; ++j)
    {
      if (*(void *)v129 != v113) {
        objc_enumerationMutation(obj);
      }
      uint64_t v60 = *(__IOSurface **)(*((void *)&v128 + 1) + 8 * j);
      if (v114 != 115)
      {
        uint64_t v63 = 0;
        goto LABEL_89;
      }
      [(MTLTextureDescriptor *)v118 setPixelFormat:115];
      int v143 = 34;
      [(MTLTextureDescriptor *)v118 setUsage:v111];
      [(MTLTextureDescriptor *)v118 setUsage:[(MTLTextureDescriptor *)v118 usage] | 1];
      int v61 = v118;
      uint64_t v62 = (void *)[*((id *)a2 + 1) newTextureWithDescriptor:v61];
      WebGPU::Device::setOwnerWithIdentity((uint64_t)a2, v62);

      if (a3[1]) {
        strlen(*(const char **)&a3[1]);
      }
      WTF::String::fromUTF8();
      if (v127) {
        int v64 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        int v64 = &stru_1ECABF938;
      }
      [v62 setLabel:v64];

      unsigned __int8 v65 = v127;
      unint64_t v127 = 0;
      if (!v65) {
        goto LABEL_81;
      }
      if (*v65 != 2)
      {
        *v65 -= 2;
LABEL_81:
        uint64_t v66 = a3[6].u32[1];
        unsigned int v124 = 0;
        int v125 = 0;
        int v126 = v66;
        if (v66) {
          goto LABEL_84;
        }
        goto LABEL_86;
      }
      WTF::StringImpl::destroy();
      uint64_t v66 = a3[6].u32[1];
      unsigned int v124 = 0;
      int v125 = 0;
      int v126 = v66;
      if (v66)
      {
LABEL_84:
        if (v66 >> 30) {
          goto LABEL_142;
        }
        int v67 = (WTF *)WTF::fastMalloc((WTF *)(4 * v66));
        int v125 = v66;
        unsigned int v124 = v67;
        memcpy(v67, *(const void **)&a3[5], 4 * a3[6].u32[1]);
      }
LABEL_86:
      id v68 = v62;
      uint64_t v63 = (WebGPU::Texture *)WTF::fastMalloc((WTF *)0x80);
      WebGPU::Texture::Texture((uint64_t)v63, v68, (uint64_t)v138, (uint64_t *)&v124, (atomic_uchar *volatile *)a2);

      *((unsigned char *)v63 + 105) = 1;
      [(MTLTextureDescriptor *)v61 setPixelFormat:80];
      int v143 = 23;
      [(MTLTextureDescriptor *)v61 setUsage:v111 | 2];
      if (v124) {
        WTF::fastFree(v124, v69);
      }

LABEL_89:
      int v70 = WebGPU::Device::newTextureWithDescriptor((WebGPU::Device *)a2, v118, v60, 0);
      if (a3[1]) {
        strlen(*(const char **)&a3[1]);
      }
      WTF::String::fromUTF8();
      if (v123) {
        uint64_t v71 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v71 = &stru_1ECABF938;
      }
      [v70 setLabel:v71];

      unint64_t v72 = v123;
      char v123 = 0;
      if (!v72) {
        goto LABEL_97;
      }
      if (*v72 != 2)
      {
        *v72 -= 2;
LABEL_97:
        uint64_t v73 = a3[6].u32[1];
        unsigned int v124 = 0;
        int v125 = 0;
        int v126 = v73;
        if (!v73) {
          goto LABEL_102;
        }
        goto LABEL_100;
      }
      WTF::StringImpl::destroy();
      uint64_t v73 = a3[6].u32[1];
      unsigned int v124 = 0;
      int v125 = 0;
      int v126 = v73;
      if (!v73) {
        goto LABEL_102;
      }
LABEL_100:
      if (v73 >> 30)
      {
LABEL_142:
        __break(0xC471u);
        JUMPOUT(0x1825043E8);
      }
      uint64_t v74 = (WTF *)WTF::fastMalloc((WTF *)(4 * v73));
      int v125 = v73;
      unsigned int v124 = v74;
      memcpy(v74, *(const void **)&a3[5], 4 * a3[6].u32[1]);
LABEL_102:
      id v75 = v70;
      unint64_t v76 = (WebGPU::Texture *)WTF::fastMalloc((WTF *)0x80);
      WebGPU::Texture::Texture((uint64_t)v76, v75, (uint64_t)v138, (uint64_t *)&v124, (atomic_uchar *volatile *)a2);
      v122[1] = v76;

      *((unsigned char *)v76 + 105) = 1;
      ++*(_DWORD *)v76;
      id v121 = v76;
      if (v63) {
        ++*(_DWORD *)v63;
      }
      v122[0] = v63;
      uint64_t v78 = *(unsigned int *)(a1 + 36);
      if (v78 == *(_DWORD *)(a1 + 32))
      {
        uint64_t v79 = (void *)WTF::Vector<WebGPU::PresentationContextIOSurface::RenderBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v117, v78 + 1, (unint64_t)&v121);
        uint64_t v78 = *(unsigned int *)(a1 + 36);
        unint64_t v80 = (void *)(*(void *)(a1 + 24) + 16 * v78);
        uint64_t v81 = *v79;
        *uint64_t v79 = 0;
        uint64_t v82 = (WebGPU::Texture **)(v79 + 1);
        *unint64_t v80 = v81;
        int v83 = (WebGPU::Texture **)(v80 + 1);
      }
      else
      {
        int v84 = (WebGPU::Texture **)(*(void *)v117 + 16 * v78);
        id v121 = 0;
        void *v84 = v76;
        int v83 = v84 + 1;
        uint64_t v82 = v122;
      }
      unint64_t v85 = *v82;
      *uint64_t v82 = 0;
      *int v83 = v85;
      *(_DWORD *)(a1 + 36) = v78 + 1;
      uint64_t v86 = v122[0];
      v122[0] = 0;
      if (!v86) {
        goto LABEL_110;
      }
      if (*(_DWORD *)v86 != 1)
      {
        --*(_DWORD *)v86;
LABEL_110:
        uint64_t v87 = v121;
        id v121 = 0;
        if (!v87) {
          goto LABEL_111;
        }
        goto LABEL_118;
      }
      WebGPU::Texture::~Texture(v86, v77);
      WTF::fastFree(v91, v92);
      uint64_t v87 = v121;
      id v121 = 0;
      if (!v87)
      {
LABEL_111:
        int v88 = *(_DWORD *)v76 - 1;
        if (*(_DWORD *)v76 != 1) {
          goto LABEL_112;
        }
        goto LABEL_120;
      }
LABEL_118:
      if (*(_DWORD *)v87 == 1)
      {
        WebGPU::Texture::~Texture(v87, v77);
        WTF::fastFree(v95, v96);
        int v88 = *(_DWORD *)v76 - 1;
        if (*(_DWORD *)v76 != 1)
        {
LABEL_112:
          *(_DWORD *)unint64_t v76 = v88;
          int v89 = v124;
          if (!v124) {
            goto LABEL_114;
          }
LABEL_113:
          WTF::fastFree(v89, v77);
          goto LABEL_114;
        }
      }
      else
      {
        --*(_DWORD *)v87;
        int v88 = *(_DWORD *)v76 - 1;
        if (*(_DWORD *)v76 != 1) {
          goto LABEL_112;
        }
      }
LABEL_120:
      WebGPU::Texture::~Texture(v76, v77);
      WTF::fastFree(v93, v94);
      int v89 = v124;
      if (v124) {
        goto LABEL_113;
      }
LABEL_114:

      if (v63)
      {
        if (*(_DWORD *)v63 == 1)
        {
          WebGPU::Texture::~Texture(v63, v90);
          WTF::fastFree(v58, v59);
        }
        else
        {
          --*(_DWORD *)v63;
        }
      }
    }
    uint64_t v56 = [obj countByEnumeratingWithState:&v128 objects:v150 count:16];
  }
  while (v56);
LABEL_125:

  if (v114 == 115)
  {
    int v97 = objc_opt_new();
    [v97 setFastMathEnabled:1];
    id v98 = *(id *)(*(void *)(a1 + 40) + 8);
    id v120 = 0;
    char v99 = objc_msgSend(v98, "newLibraryWithSource:options:error:", @"\n    using namespace metal;\n    constant float3x3 rgbToYCbCr = float3x3(\n        float3(0.2126, 0.7152, 0.0722),\n        float3(-0.1146, -0.3854, 0.5),\n        float3(0.5, -0.4542, -0.0458));\n    constant float3x3 yCbCrToRGB = float3x3(\n        float3(1, 0, 1.5748),\n        float3(1, -0.1873, -0.4681),\n        float3(1, 1.8556, 0));\n    kernel void luminanceClamp(texture2d<float, access::read>  inTexture  [[texture(0)]],\n        texture2d<float, access::write> outTexture [[texture(1)]],\n        uint2 gid [[thread_position_in_grid]])\n    {\n        if (gid.x >= outTexture.get_width() || gid.y >= outTexture.get_height())\n            return;\n\n        float4 inColor  = inTexture.read(gid);\n        float3 yCbCr = rgbToYCbCr * inColor.rgb;\n        yCbCr.x = clamp(yCbCr.x, 0., 1.);\n        float3 outColor = yCbCrToRGB * yCbCr;\n        outTexture.write(float4(outColor, 1), gid);\n    }",
                    v97,
                    &v120);
    uint64_t v51 = (WebGPU::Device *)v120;
    if (v51)
    {
      WTFLogAlways();
    }
    else
    {
      uint64_t v103 = [v99 newFunctionWithName:@"luminanceClamp"];
      unsigned int v104 = *(void **)(a1 + 64);
      *(void *)(a1 + 64) = v103;

      uint64_t v105 = *(void *)(a1 + 64);
      id v119 = 0;
      uint64_t v106 = [v98 newComputePipelineStateWithFunction:v105 error:&v119];
      uint64_t v51 = (WebGPU::Device *)v119;
      int v107 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = v106;
    }
LABEL_53:
  }
LABEL_54:
  uint64_t v53 = v132;
  if (v132)
  {
    char v132 = 0;
    int v133 = 0;
    WTF::fastFree(v53, v52);
  }
LABEL_59:
}

void sub_1825043F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,WTF *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,WTF *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a43) {
    WTF::fastFree(a43, v70);
  }

  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebGPU28PresentationContextIOSurface9configureERNS_6DeviceERK23WGPUSwapChainDescriptor_block_invoke(uint64_t a1, unsigned int a2)
{
  return (a2 < 0x23) & (0x400840000uLL >> a2);
}

uint64_t ___ZN6WebGPU28PresentationContextIOSurface9configureERNS_6DeviceERK23WGPUSwapChainDescriptor_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = WebGPU::Texture::removeSRGBSuffix(a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16);
  return v4(v2, v3);
}

void WebGPU::generateAValidationError(WebGPU *this, WebGPU::Device *a2, NSString *a3)
{
  int v3 = (int)a3;
  uint64_t v5 = a2;
  if (!v3) {
    goto LABEL_13;
  }
  MEMORY[0x18530AF50](&v15, v5);
  uint64_t v6 = *((void *)this + 4);
  uint64_t v7 = 32 * *((unsigned int *)this + 11);
  uint64_t v8 = v6 + v7;
  while (v7)
  {
    int v9 = *(_DWORD *)(v8 - 8);
    v8 -= 32;
    v7 -= 32;
    if (!v9)
    {
      uint64_t v10 = v6 + v7;
      if (!*(unsigned char *)(v10 + 16))
      {
        uint64_t v11 = v15;
        uint64_t v15 = 0;
        *(_DWORD *)uint64_t v10 = 1;
        *(void *)(v10 + ++*(_DWORD *)(result + 8) = v11;
        *(unsigned char *)(v10 + 16) = 1;
      }
      goto LABEL_10;
    }
  }
  uint64_t v12 = *((void *)this + 3);
  if (v12)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v12 + 16))(v12, 1, &v15);
    uint64_t v13 = *((void *)this + 3);
    *((void *)this + 3) = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
LABEL_10:
  int v14 = v15;
  uint64_t v15 = 0;
  if (!v14) {
    goto LABEL_13;
  }
  if (*v14 != 2)
  {
    *v14 -= 2;
LABEL_13:

    return;
  }
  WTF::StringImpl::destroy();
}

void sub_1825047EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a10 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WGPUTextureFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<WGPUTextureFormat const,18446744073709551615ul>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = result;
  *(void *)double result = 0;
  *(void *)(result + ++*(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a3;
  if (!a3) {
    return v4;
  }
  if (!(a3 >> 30))
  {
    uint64_t v6 = (int *)a2;
    uint64_t v7 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * a3));
    *(_DWORD *)(v4 + ++*(_DWORD *)(result + 8) = a3;
    *(void *)uint64_t v4 = v7;
    unint64_t v8 = (a3 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v8 < 7) {
      goto LABEL_13;
    }
    if ((unint64_t)v7 - a2 < 0x20) {
      goto LABEL_13;
    }
    unint64_t v9 = v8 + 1;
    uint64_t v10 = v9 & 0x7FFFFFFFFFFFFFF8;
    uint64_t v11 = &v7[v10];
    uint64_t v6 = (int *)(a2 + v10 * 4);
    uint64_t v12 = (long long *)(a2 + 16);
    uint64_t v13 = v7 + 4;
    uint64_t v14 = v9 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *uint64_t v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 8;
    }
    while (v14);
    uint64_t v7 = v11;
    if (v9 != (v9 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_13:
      do
      {
        int v16 = *v6++;
        *v7++ = v16;
      }
      while (v6 != (int *)(a2 + 4 * a3));
    }
    return v4;
  }
  __break(0xC471u);
  return result;
}

void WebGPU::PresentationContextIOSurface::RenderBuffer::~RenderBuffer(WebGPU::PresentationContextIOSurface::RenderBuffer *this, void *a2)
{
  int v3 = (WebGPU::Texture *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebGPU::Texture::~Texture(v3, a2);
      WTF::fastFree(v5, v6);
      uint64_t v4 = *(WebGPU::Texture **)this;
      *(void *)this = 0;
      if (!v4) {
        return;
      }
      goto LABEL_7;
    }
    --*(_DWORD *)v3;
  }
  uint64_t v4 = *(WebGPU::Texture **)this;
  *(void *)this = 0;
  if (!v4) {
    return;
  }
LABEL_7:
  if (*(_DWORD *)v4 == 1)
  {
    WebGPU::Texture::~Texture(v4, a2);
    WTF::fastFree(v7, v8);
  }
  else
  {
    --*(_DWORD *)v4;
  }
}

WTF *WebGPU::PresentationContextIOSurface::unconfigure(WebGPU::PresentationContextIOSurface *this)
{
  uint64_t v2 = (void *)*((void *)this + 2);
  *((void *)this + 2) = 0;

  double result = WTF::Vector<WebGPU::PresentationContextIOSurface::RenderBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WebGPU::PresentationContextIOSurface *)((char *)this + 24), v3);
  *((void *)this + 7) = 0;
  uint64_t v6 = (atomic_uchar *volatile *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (!v6) {
    return result;
  }
  char v7 = 0;
  atomic_uchar *volatile v8 = *v6;
  atomic_compare_exchange_strong_explicit(*v6, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
  if (v7)
  {
    double result = (WTF *)MEMORY[0x18530AEA0](v8);
    uint64_t v16 = *((void *)v8 + 1);
    uint64_t v10 = 1;
    uint64_t v11 = v16 - 1;
    *((void *)v8 + 1) = v16 - 1;
    if (v16 != 1)
    {
LABEL_4:
      uint64_t v12 = 0;
      BOOL v13 = 1;
      atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
      if (v10 == 1) {
        goto LABEL_5;
      }
LABEL_15:
      double result = (WTF *)WTF::Lock::unlockSlow((uint64_t *)v10, (WTF::Lock *)v8);
      if (v11) {
        return result;
      }
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v9 = *((void *)v8 + 1);
    uint64_t v10 = 1;
    uint64_t v11 = v9 - 1;
    *((void *)v8 + 1) = v9 - 1;
    if (v9 != 1) {
      goto LABEL_4;
    }
  }
  uint64_t v17 = *((void *)v8 + 2);
  uint64_t v12 = (WebGPU::Device *)*((void *)v8 + 3);
  *((void *)v8 + 3) = 0;
  BOOL v13 = v17 != 0;
  atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1) {
    goto LABEL_15;
  }
LABEL_5:
  if (v11) {
    return result;
  }
LABEL_6:
  if (v12)
  {
    WebGPU::Device::~Device(v12, v5);
    double result = (WTF *)WTF::fastFree(v14, v15);
  }
  if (!v13)
  {
    return (WTF *)WTF::fastFree((WTF *)v8, v5);
  }
  return result;
}

unint64_t WebGPU::PresentationContextIOSurface::present(WebGPU::PresentationContextIOSurface *this)
{
  uint64_t v2 = *((void *)this + 5);
  unint64_t result = [*((id *)this + 2) count];
  if (result == *((_DWORD *)this + 9))
  {
    unint64_t v4 = *((void *)this + 7);
    if (v4 < result && v2 != 0)
    {
      uint64_t v6 = *(void *)(*((void *)this + 3) + 16 * v4 + 8);
      if (v6 && *((void *)this + 9))
      {
        char v7 = (MTLCommandBufferDescriptor *)objc_opt_new();
        [(MTLCommandBufferDescriptor *)v7 setErrorOptions:1];
        atomic_uchar *volatile v8 = WebGPU::Queue::commandBufferWithDescriptor(*(WebGPU::Queue **)(v2 + 16), v7);
        uint64_t v9 = objc_opt_new();
        [v9 setDispatchType:0];
        uint64_t v10 = [v8 computeCommandEncoderWithDescriptor:v9];
        WebGPU::Queue::setEncoderForBuffer(*(void *)(v2 + 16), v8, v10);
        [v10 setComputePipelineState:*((void *)this + 9)];
        id v11 = *(id *)(v6 + 16);
        unint64_t result = [v10 setTexture:v11 atIndex:0];
        unint64_t v12 = *((void *)this + 7);
        if (v12 >= *((unsigned int *)this + 9))
        {
          __break(0xC471u);
          return result;
        }
        [v10 setTexture:*(void *)(*(void *)(*((void *)this + 3) + 16 * v12) + 16) atIndex:1];
        v15[0] = (unint64_t)([v11 width] + 15) >> 4;
        v15[1] = (unint64_t)([v11 height] + 15) >> 4;
        char v15[2] = 1;
        int64x2_t v13 = vdupq_n_s64(0x10uLL);
        uint64_t v14 = 1;
        [v10 dispatchThreadgroups:v15 threadsPerThreadgroup:&v13];
        WebGPU::Queue::endEncoding(*(void *)(v2 + 16), v10, v8);
        WebGPU::Queue::commitMTLCommandBuffer(*(void *)(v2 + 16), v8);

        unint64_t v4 = *((void *)this + 7);
        unint64_t result = *((unsigned int *)this + 9);
      }
      *((void *)this + 7) = (v4 + 1) % result;
    }
  }
  return result;
}

void sub_182504CA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebGPU::PresentationContextIOSurface::getCurrentTexture(id *this)
{
  unint64_t v2 = [this[2] count];
  if (v2 != *((_DWORD *)this + 9) || (unint64_t v3 = (unint64_t)this[7], v3 >= v2))
  {
    char v7 = this[5];
    if (v7)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v8 = v7[4];
      uint64_t v9 = 32 * *((unsigned int *)v7 + 11);
      uint64_t v10 = v8 + v9;
      while (v9)
      {
        int v11 = *(_DWORD *)(v10 - 8);
        v10 -= 32;
        v9 -= 32;
        if (!v11)
        {
          uint64_t v12 = v8 + v9;
          if (!*(unsigned char *)(v12 + 16))
          {
            int64x2_t v13 = v17;
            uint64_t v17 = 0;
            *(_DWORD *)uint64_t v12 = 1;
            *(void *)(v12 + ++*(_DWORD *)(result + 8) = v13;
            *(unsigned char *)(v12 + 16) = 1;
          }
          goto LABEL_14;
        }
      }
      uint64_t v14 = v7[3];
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v14 + 16))(v14, 1, &v17);
        uint64_t v15 = v7[3];
        v7[3] = 0;
        if (v15) {
          (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        }
      }
LABEL_14:
      uint64_t v16 = v17;
      uint64_t v17 = 0;
      if (v16)
      {
        if (*v16 == 2)
        {
          WTF::StringImpl::destroy();
          return this[6];
        }
        *v16 -= 2;
      }
    }
    return this[6];
  }
  unint64_t v4 = (uint64_t *)((char *)this[3] + 16 * v3);
  uint64_t v5 = v4[1];
  if (v5)
  {
    WebGPU::Texture::recreateIfNeeded(v5);
    return (id)v4[1];
  }
  else
  {
    WebGPU::Texture::recreateIfNeeded(*v4);
    WebGPU::Texture::setPreviouslyCleared((uint64_t *)*v4, 0, 0, 0);
    return (id)*v4;
  }
}

void sub_182504EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebGPU::PresentationContextIOSurface::getCurrentTextureView(WebGPU::PresentationContextIOSurface *this)
{
}

uint64_t WebGPU::PresentationContextIOSurface::isPresentationContextIOSurface(WebGPU::PresentationContextIOSurface *this)
{
  return 1;
}

uint64_t WebGPU::PresentationContextIOSurface::isValid(WebGPU::PresentationContextIOSurface *this)
{
  return 1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtrArc<void ()(void)>,void>::~CallableWrapper(uint64_t a1)
{
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtrArc<void ()(void)>,void>::~CallableWrapper(id *a1)
{
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtrArc<void ()(void)>,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

WebGPU::Texture *WTF::RefCounted<WebGPU::Texture>::deref(WebGPU::Texture *result, void *a2)
{
  if (*(_DWORD *)result == 1)
  {
    WebGPU::Texture::~Texture(result, a2);
    return (WebGPU::Texture *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

unsigned int *WTF::Vector<WebGPU::PresentationContextIOSurface::RenderBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, void *a2)
{
  uint64_t v3 = a1[3];
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = (WebGPU::Texture **)(*(void *)a1 + 8);
    while (1)
    {
      uint64_t v8 = *v5;
      *uint64_t v5 = 0;
      if (!v8) {
        goto LABEL_8;
      }
      if (*(_DWORD *)v8 != 1) {
        break;
      }
      WebGPU::Texture::~Texture(v8, a2);
      WTF::fastFree(v10, v11);
      uint64_t v9 = *(v5 - 1);
      *(v5 - 1) = 0;
      if (v9)
      {
LABEL_11:
        if (*(_DWORD *)v9 == 1)
        {
          WebGPU::Texture::~Texture(v9, a2);
          WTF::fastFree(v6, v7);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
LABEL_4:
      v5 += 2;
      v4 -= 16;
      if (!v4) {
        goto LABEL_13;
      }
    }
    --*(_DWORD *)v8;
LABEL_8:
    uint64_t v9 = *(v5 - 1);
    *(v5 - 1) = 0;
    if (v9) {
      goto LABEL_11;
    }
    goto LABEL_4;
  }
LABEL_13:
  uint64_t v12 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v12, a2);
  }
  return a1;
}

atomic_uchar *volatile *WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(atomic_uchar *volatile *result, void *a2)
{
  char v2 = 0;
  atomic_uchar *volatile v3 = *result;
  atomic_compare_exchange_strong_explicit(*result, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2)
  {
    unint64_t result = (atomic_uchar *volatile *)MEMORY[0x18530AEA0](v3);
    uint64_t v11 = *((void *)v3 + 1);
    uint64_t v5 = 1;
    uint64_t v6 = v11 - 1;
    *((void *)v3 + 1) = v11 - 1;
    if (v11 != 1)
    {
LABEL_3:
      char v7 = 0;
      BOOL v8 = 1;
      atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
      if (v5 == 1) {
        goto LABEL_4;
      }
LABEL_14:
      unint64_t result = (atomic_uchar *volatile *)WTF::Lock::unlockSlow((uint64_t *)v5, (WTF::Lock *)v3);
      if (v6) {
        return result;
      }
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v4 = *((void *)v3 + 1);
    uint64_t v5 = 1;
    uint64_t v6 = v4 - 1;
    *((void *)v3 + 1) = v4 - 1;
    if (v4 != 1) {
      goto LABEL_3;
    }
  }
  uint64_t v12 = *((void *)v3 + 2);
  char v7 = (WebGPU::Device *)*((void *)v3 + 3);
  *((void *)v3 + 3) = 0;
  BOOL v8 = v12 != 0;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1) {
    goto LABEL_14;
  }
LABEL_4:
  if (v6) {
    return result;
  }
LABEL_5:
  if (v7)
  {
    WebGPU::Device::~Device(v7, a2);
    unint64_t result = (atomic_uchar *volatile *)WTF::fastFree(v9, v10);
  }
  if (!v8)
  {
    return (atomic_uchar *volatile *)WTF::fastFree((WTF *)v3, a2);
  }
  return result;
}

WTF *WTF::Vector<WebGPU::PresentationContextIOSurface::RenderBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(WTF *result, void *a2)
{
  if (*((_DWORD *)result + 2))
  {
    char v2 = result;
    uint64_t v3 = *((unsigned int *)result + 3);
    if (v3)
    {
      uint64_t v4 = 16 * v3;
      uint64_t v5 = (WebGPU::Texture **)(*(void *)result + 8);
      while (1)
      {
        BOOL v8 = *v5;
        *uint64_t v5 = 0;
        if (!v8) {
          goto LABEL_9;
        }
        if (*(_DWORD *)v8 != 1) {
          break;
        }
        WebGPU::Texture::~Texture(v8, a2);
        WTF::fastFree(v10, v11);
        uint64_t v9 = *(v5 - 1);
        *(v5 - 1) = 0;
        if (v9)
        {
LABEL_12:
          if (*(_DWORD *)v9 == 1)
          {
            WebGPU::Texture::~Texture(v9, a2);
            WTF::fastFree(v6, v7);
          }
          else
          {
            --*(_DWORD *)v9;
          }
        }
LABEL_5:
        v5 += 2;
        v4 -= 16;
        if (!v4)
        {
          *((_DWORD *)v2 + 3) = 0;
          goto LABEL_15;
        }
      }
      --*(_DWORD *)v8;
LABEL_9:
      uint64_t v9 = *(v5 - 1);
      *(v5 - 1) = 0;
      if (v9) {
        goto LABEL_12;
      }
      goto LABEL_5;
    }
LABEL_15:
    unint64_t result = *(WTF **)v2;
    if (*(void *)v2)
    {
      *(void *)char v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      return (WTF *)WTF::fastFree(result, a2);
    }
  }
  return result;
}

unint64_t WTF::Vector<WebGPU::PresentationContextIOSurface::RenderBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v10 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WebGPU::PresentationContextIOSurface::RenderBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebGPU::PresentationContextIOSurface::RenderBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
}

unsigned int *WTF::Vector<WebGPU::PresentationContextIOSurface::RenderBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    unsigned int v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v3 = result;
      uint64_t v4 = *(WTF **)result;
      uint64_t v5 = result[3];
      unint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = v2;
      *(void *)uint64_t v3 = result;
      if (v5)
      {
        unint64_t v7 = result;
        unint64_t v8 = (unsigned int **)((char *)v4 + 16 * v5);
        uint64_t v9 = (unsigned int **)v4;
        while (1)
        {
          unint64_t v10 = *v9;
          *uint64_t v9 = 0;
          *(void *)unint64_t v7 = v10;
          unint64_t v11 = v9[1];
          v9[1] = 0;
          *((void *)v7 + 1) = v11;
          uint64_t v12 = (WebGPU::Texture *)v9[1];
          v9[1] = 0;
          if (!v12) {
            goto LABEL_10;
          }
          if (*(_DWORD *)v12 != 1) {
            break;
          }
          WebGPU::Texture::~Texture(v12, v6);
          WTF::fastFree(v13, v14);
          unint64_t result = *v9;
          *uint64_t v9 = 0;
          if (result)
          {
LABEL_13:
            if (*result == 1)
            {
              WebGPU::Texture::~Texture((WebGPU::Texture *)result, v6);
              unint64_t result = (unsigned int *)WTF::fastFree(v15, v16);
            }
            else
            {
              --*result;
            }
          }
LABEL_6:
          v9 += 2;
          v7 += 4;
          if (v9 == v8) {
            goto LABEL_15;
          }
        }
        --*(_DWORD *)v12;
LABEL_10:
        unint64_t result = *v9;
        *uint64_t v9 = 0;
        if (result) {
          goto LABEL_13;
        }
        goto LABEL_6;
      }
LABEL_15:
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)uint64_t v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

void WebGPU::Device::createQuerySet(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(void *)a2 || (v5 = *(unsigned int *)(a2 + 20), v5 > 0x1000) || (uint64_t v6 = *(void **)(a1 + 8)) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = 32 * *(unsigned int *)(a1 + 44);
    uint64_t v14 = v12 + v13;
    while (v13)
    {
      int v15 = *(_DWORD *)(v14 - 8);
      v14 -= 32;
      v13 -= 32;
      if (!v15)
      {
        uint64_t v16 = v12 + v13;
        if (!*(unsigned char *)(v16 + 16))
        {
          uint64_t v17 = v35;
          BOOL v35 = 0;
          *(_DWORD *)uint64_t v16 = 1;
          *(void *)(v16 + ++*(_DWORD *)(result + 8) = v17;
          *(unsigned char *)(v16 + 16) = 1;
        }
        goto LABEL_16;
      }
    }
    uint64_t v18 = *(void *)(a1 + 24);
    if (v18)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v18 + 16))(v18, 1, &v35);
      uint64_t v19 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = 0;
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      }
    }
LABEL_16:
    uint64_t v20 = v35;
    BOOL v35 = 0;
    if (v20)
    {
      if (*v20 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v20 -= 2;
      }
    }
    uint64_t v8 = WTF::fastMalloc((WTF *)0x40);
    char v21 = 0;
    int v10 = 1;
    *(_DWORD *)uint64_t v8 = 1;
    atomic_uchar *volatile v11 = *(atomic_uchar *volatile *)a1;
    atomic_compare_exchange_strong_explicit(*(atomic_uchar *volatile *)a1, (unsigned __int8 *)&v21, 1u, memory_order_acquire, memory_order_acquire);
    if (v21) {
      MEMORY[0x18530AEA0](v11);
    }
    goto LABEL_22;
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7)
  {
    if (v7 == 0x7FFFFFFF)
    {
      uint64_t v8 = WTF::fastMalloc((WTF *)0x40);
      char v9 = 0;
      int v10 = 1;
      *(_DWORD *)uint64_t v8 = 1;
      atomic_uchar *volatile v11 = *(atomic_uchar *volatile *)a1;
      atomic_compare_exchange_strong_explicit(*(atomic_uchar *volatile *)a1, (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
      if (!v9)
      {
LABEL_22:
        ++*((void *)v11 + 1);
        atomic_compare_exchange_strong_explicit(v11, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
        if (v10 != 1) {
          WTF::Lock::unlockSlow((WTF::Lock *)v11);
        }
        *(void *)(v8 + ++*(_DWORD *)(result + 8) = a1;
        *(void *)(v8 + 16) = 0;
        *(void *)(v8 + 24) = 0;
        *(void *)(v8 + 32) = 0x7FFFFFFF00000000;
        *(void *)(v8 + 40) = 0;
        *(void *)(v8 + 4++*(_DWORD *)(result + 8) = 0;
        *(unsigned char *)(v8 + 56) = 0;
        *a3 = v8;
        return;
      }
    }
    else
    {
      uint64_t v8 = WTF::fastMalloc((WTF *)0x40);
      char v25 = 0;
      int v10 = 1;
      *(_DWORD *)uint64_t v8 = 1;
      atomic_uchar *volatile v11 = *(atomic_uchar *volatile *)a1;
      atomic_compare_exchange_strong_explicit(*(atomic_uchar *volatile *)a1, (unsigned __int8 *)&v25, 1u, memory_order_acquire, memory_order_acquire);
      if (!v25) {
        goto LABEL_22;
      }
    }
    MEMORY[0x18530AEA0](v11);
    goto LABEL_22;
  }
  BOOL v22 = *(const char **)(a2 + 8);
  if ((unint64_t)(8 * v5) <= 1) {
    uint64_t v23 = 1;
  }
  else {
    uint64_t v23 = 8 * v5;
  }
  size_t v24 = (void *)[v6 newBufferWithLength:v23 options:32];
  WebGPU::Device::setOwnerWithIdentity(a1, v24);
  if (v22) {
    strlen(v22);
  }
  WTF::String::fromUTF8();
  if (v34) {
    uint32x2_t v26 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint32x2_t v26 = &stru_1ECABF938;
  }
  [v24 setLabel:v26];

  if (v34)
  {
    if (*v34 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v34 -= 2;
    }
  }
  id v27 = v24;
  uint64_t v28 = WTF::fastMalloc((WTF *)0x40);
  id v29 = v27;
  char v30 = 0;
  int v31 = 1;
  *(_DWORD *)uint64_t v28 = 1;
  atomic_uchar *volatile v32 = *(atomic_uchar *volatile *)a1;
  atomic_compare_exchange_strong_explicit(*(atomic_uchar *volatile *)a1, (unsigned __int8 *)&v30, 1u, memory_order_acquire, memory_order_acquire);
  if (v30)
  {
    unsigned int v33 = v32;
    MEMORY[0x18530AEA0]();
    atomic_uchar *volatile v32 = v33;
  }
  ++*((void *)v32 + 1);
  atomic_compare_exchange_strong_explicit(v32, (unsigned __int8 *)&v31, 0, memory_order_release, memory_order_relaxed);
  if (v31 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v32);
  }
  *(void *)(v28 + ++*(_DWORD *)(result + 8) = a1;
  *(void *)(v28 + 16) = v29;
  *(void *)(v28 + 24) = 0;
  *(_DWORD *)(v28 + 32) = v5;
  *(void *)(v28 + 44) = 0;
  *(void *)(v28 + 36) = 0;
  *(void *)(v28 + 49) = 0;
  *a3 = v28;
}

void sub_1825057EC(_Unwind_Exception *a1)
{
  WTF::fastFree(v2, v6);
  _Unwind_Resume(a1);
}

void sub_182505898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  if (a12)
  {
    if (*a12 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a12 -= 2;
    _Unwind_Resume(exception_object);
  }
  JUMPOUT(0x182505890);
}

_DWORD *wgpuQuerySetReference(_DWORD *result)
{
  return result;
}

uint64_t wgpuQuerySetRelease(uint64_t result, void *a2)
{
  uint64_t v2 = result;
  if (*(_DWORD *)result == 1)
  {
    uint64_t v3 = *(void *)(result + 40);
    if (v3)
    {
      uint64_t v4 = *(unsigned int *)(v3 - 4);
      if (v4)
      {
        uint64_t v5 = *(unsigned int ***)(result + 40);
        do
        {
          uint64_t v6 = *v5;
          if (*v5 != (unsigned int *)-1)
          {
            *uint64_t v5 = 0;
            if (v6)
            {
              if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
              {
                atomic_store(1u, v6);
                WTF::fastFree((WTF *)v6, a2);
              }
            }
          }
          ++v5;
          --v4;
        }
        while (v4);
      }
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }

    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)(v2 + 8), v7);
    return WTF::fastFree((WTF *)v2, v8);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void wgpuQuerySetDestroy(uint64_t a1)
{
  *(unsigned char *)(a1 + 56) = 1;
  uint64_t v2 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;

  uint64_t v3 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = 0;

  uint64_t v5 = *(unsigned int ***)(a1 + 40);
  if (!v5)
  {
    int v7 = 0;
    uint64_t v6 = 0;
LABEL_10:
    char v9 = v7;
    int v7 = &v5[v6];
    if (!v5)
    {
      atomic_uchar *volatile v11 = 0;
      if (v9) {
        goto LABEL_17;
      }
      goto LABEL_24;
    }
    goto LABEL_8;
  }
  uint64_t v6 = *((unsigned int *)v5 - 1);
  int v7 = &v5[v6];
  if (!*((_DWORD *)v5 - 3)) {
    goto LABEL_10;
  }
  if (v6)
  {
    uint64_t v8 = 8 * v6;
    char v9 = *(unsigned int ***)(a1 + 40);
    while ((unint64_t)*v9 + 1 <= 1)
    {
      ++v9;
      v8 -= 8;
      if (!v8)
      {
        char v9 = v7;
        break;
      }
    }
LABEL_8:
    uint64_t v10 = *((unsigned int *)v5 - 1);
    goto LABEL_14;
  }
  uint64_t v10 = 0;
  char v9 = *(unsigned int ***)(a1 + 40);
LABEL_14:
  atomic_uchar *volatile v11 = &v5[v10];
  if (v11 != v9)
  {
LABEL_17:
    while (!*((void *)*v9 + 1))
    {
      uint64_t v12 = v9 + 1;
      char v9 = v7;
      if (v12 != v7)
      {
        char v9 = v12;
        while ((unint64_t)*v9 + 1 <= 1)
        {
          if (++v9 == v7)
          {
            char v9 = v7;
            break;
          }
        }
      }
      if (v9 == v11)
      {
        char v9 = v11;
        break;
      }
    }
  }
LABEL_24:
  if (v5)
  {
    uint64_t v13 = &v5[*((unsigned int *)v5 - 1)];
    if (v9 == v13) {
      goto LABEL_26;
    }
    do
    {
LABEL_41:
      uint64_t v18 = *((void *)*v9 + 1);
      *(unsigned char *)(v18 + 76) = 1;
      uint64_t v19 = *(void *)(v18 + 56);
      if (v19)
      {
        uint64_t v20 = *(WebGPU::CommandBuffer **)(v19 + 8);
        if (v20) {
          WebGPU::CommandBuffer::makeInvalid(v20, *(NSString **)(v18 + 64));
        }
      }
      char v21 = v7;
      if (v9 + 1 != v7)
      {
        char v21 = v9 + 1;
        while ((unint64_t)*v21 + 1 <= 1)
        {
          if (++v21 == v7)
          {
            char v21 = v7;
            break;
          }
        }
      }
      char v9 = v11;
      if (v21 != v11)
      {
        char v9 = v21;
        if (!*((void *)*v21 + 1))
        {
          while (1)
          {
            BOOL v22 = v9 + 1;
            char v9 = v7;
            if (v22 != v7)
            {
              char v9 = v22;
              while ((unint64_t)*v9 + 1 <= 1)
              {
                if (++v9 == v7)
                {
                  char v9 = v7;
                  break;
                }
              }
            }
            if (v9 == v11) {
              break;
            }
            if (*((void *)*v9 + 1)) {
              goto LABEL_40;
            }
          }
          char v9 = v11;
        }
      }
LABEL_40:
      ++*(_DWORD *)(a1 + 48);
    }
    while (v9 != v13);
    uint64_t v5 = *(unsigned int ***)(a1 + 40);
    if (v5) {
      goto LABEL_27;
    }
LABEL_60:
    LODWORD(v17) = 0;
    *(_DWORD *)(a1 + 4++*(_DWORD *)(result + 8) = 0;
    goto LABEL_61;
  }
  uint64_t v13 = 0;
  if (v9) {
    goto LABEL_41;
  }
LABEL_26:
  if (!v5) {
    goto LABEL_60;
  }
LABEL_27:
  *(void *)(a1 + 40) = 0;
  uint64_t v14 = *((unsigned int *)v5 - 1);
  if (v14)
  {
    int v15 = v5;
    do
    {
      uint64_t v16 = *v15;
      if (*v15 != (unsigned int *)-1)
      {
        *int v15 = 0;
        if (v16)
        {
          if (atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v16);
            WTF::fastFree((WTF *)v16, v4);
          }
        }
      }
      ++v15;
      --v14;
    }
    while (v14);
  }
  WTF::fastFree((WTF *)(v5 - 2), v4);
  uint64_t v17 = *(void *)(a1 + 40);
  *(_DWORD *)(a1 + 4++*(_DWORD *)(result + 8) = 0;
  if (v17)
  {
    LODWORD(v17) = *(_DWORD *)(v17 - 12);
    if (v17 > 0x7FFFFFFE) {
      LODWORD(v17) = 0x7FFFFFFF;
    }
  }
LABEL_61:
  *(_DWORD *)(a1 + 52) = 2 * v17;
}

_DWORD *wgpuQuerySetSetLabel(uint64_t a1, char *__s)
{
  if (__s) {
    strlen(__s);
  }
  WTF::String::fromUTF8();
  if (v5) {
    uint64_t v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v3 = &stru_1ECABF938;
  }
  [*(id *)(a1 + 16) setLabel:v3];

  unint64_t result = v5;
  if (v5)
  {
    if (*v5 == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *v5 -= 2;
    }
  }
  return result;
}

void sub_182505D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t wgpuQuerySetGetCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t wgpuQuerySetGetType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t WebGPU::Queue::Queue(uint64_t a1, void *a2, uint64_t *a3)
{
  id v5 = a2;
  *(_DWORD *)a1 = 1;
  id v6 = v5;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = v6;
  uint64_t v7 = *a3;
  if (*a3)
  {
    char v8 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
    if (v8) {
      MEMORY[0x18530AEA0](v7);
    }
    if (*(void *)(v7 + 24))
    {
      ++*(void *)(v7 + 16);
      uint64_t v9 = v7;
      int v10 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
      if (v10 != 1) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v9 = 0;
      int v11 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
      if (v11 != 1) {
LABEL_10:
      }
        WTF::Lock::unlockSlow((WTF::Lock *)v7);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = a3;
  *(_OWORD *)(a1 + 4++*(_DWORD *)(result + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = 0;
  uint64_t v12 = [MEMORY[0x1E4F1CA70] orderedSet];
  uint64_t v13 = *(void **)(a1 + 88);
  *(void *)(a1 + 8++*(_DWORD *)(result + 8) = v12;

  uint64_t v14 = [MEMORY[0x1E4F28E10] strongToStrongObjectsMapTable];
  int v15 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v14;

  return a1;
}

void sub_182505EB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *WTF::HashMap<unsigned long long,WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)(v3 + 24 * i) != -2)
        {
          uint64_t v6 = v3 + 24 * i;
          uint64_t v7 = (WTF **)(v6 + 8);
          uint64_t v8 = *(unsigned int *)(v6 + 20);
          if (v8)
          {
            uint64_t v9 = *v7;
            uint64_t v10 = 8 * v8;
            do
            {
              uint64_t v11 = *(void *)v9;
              *(void *)uint64_t v9 = 0;
              if (v11) {
                (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
              }
              uint64_t v9 = (WTF *)((char *)v9 + 8);
              v10 -= 8;
            }
            while (v10);
          }
          uint64_t v12 = *v7;
          if (*v7)
          {
            *uint64_t v7 = 0;
            *(_DWORD *)(v3 + 24 * i + 16) = 0;
            WTF::fastFree(v12, a2);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

uint64_t *WTF::HashMap<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)(v3 + 24 * i) != -2)
        {
          uint64_t v6 = v3 + 24 * i;
          uint64_t v7 = (WTF **)(v6 + 8);
          uint64_t v8 = *(unsigned int *)(v6 + 20);
          if (v8)
          {
            uint64_t v9 = *v7;
            uint64_t v10 = 8 * v8;
            do
            {
              uint64_t v11 = *(void *)v9;
              *(void *)uint64_t v9 = 0;
              if (v11) {
                (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
              }
              uint64_t v9 = (WTF *)((char *)v9 + 8);
              v10 -= 8;
            }
            while (v10);
          }
          uint64_t v12 = *v7;
          if (*v7)
          {
            *uint64_t v7 = 0;
            *(_DWORD *)(v3 + 24 * i + 16) = 0;
            WTF::fastFree(v12, a2);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

WebGPU::Queue *WebGPU::Queue::Queue(WebGPU::Queue *this, WebGPU::Device *a2)
{
  *(_DWORD *)this = 1;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = 0;
  uint64_t v4 = *(void *)a2;
  if (*(void *)a2)
  {
    char v5 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v4, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
    if (v5) {
      MEMORY[0x18530AEA0](v4);
    }
    if (*(void *)(v4 + 24))
    {
      ++*(void *)(v4 + 16);
      uint64_t v6 = v4;
      int v7 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v4, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
      if (v7 != 1) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v6 = 0;
      int v8 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v4, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
      if (v8 != 1) {
LABEL_10:
      }
        WTF::Lock::unlockSlow((WTF::Lock *)v4);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  *((void *)this + 4) = v6;
  *((void *)this + 5) = a2;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((void *)this + 12) = 0;
  return this;
}

void sub_1825061BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebGPU::Queue::~Queue(WebGPU::Queue *this)
{
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2) {
    WebGPU::Queue::endEncoding((uint64_t)this, v2, *((void **)this + 2));
  }

  uint64_t v4 = *((void *)this + 10);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 4);
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)(v4 + 24 * i) != -2)
        {
          uint64_t v7 = v4 + 24 * i;
          int v8 = (WTF **)(v7 + 8);
          uint64_t v9 = *(unsigned int *)(v7 + 20);
          if (v9)
          {
            uint64_t v10 = *v8;
            uint64_t v11 = 8 * v9;
            do
            {
              uint64_t v12 = *(void *)v10;
              *(void *)uint64_t v10 = 0;
              if (v12) {
                (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
              }
              uint64_t v10 = (WTF *)((char *)v10 + 8);
              v11 -= 8;
            }
            while (v11);
          }
          uint64_t v13 = *v8;
          if (*v8)
          {
            *int v8 = 0;
            *(_DWORD *)(v4 + 24 * i + 16) = 0;
            WTF::fastFree(v13, v3);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v4 - 16), v3);
  }
  uint64_t v14 = *((void *)this + 9);
  if (v14)
  {
    uint64_t v15 = *(unsigned int *)(v14 - 4);
    if (v15)
    {
      for (uint64_t j = 0; j != v15; ++j)
      {
        if (*(void *)(v14 + 24 * j) != -2)
        {
          uint64_t v17 = v14 + 24 * j;
          uint64_t v18 = (WTF **)(v17 + 8);
          uint64_t v19 = *(unsigned int *)(v17 + 20);
          if (v19)
          {
            uint64_t v20 = *v18;
            uint64_t v21 = 8 * v19;
            do
            {
              uint64_t v22 = *(void *)v20;
              *(void *)uint64_t v20 = 0;
              if (v22) {
                (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
              }
              uint64_t v20 = (WTF *)((char *)v20 + 8);
              v21 -= 8;
            }
            while (v21);
          }
          uint64_t v23 = *v18;
          if (*v18)
          {
            *uint64_t v18 = 0;
            *(_DWORD *)(v14 + 24 * j + 16) = 0;
            WTF::fastFree(v23, v3);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v14 - 16), v3);
  }
  uint64_t v24 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v24)
  {
    char v25 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v24, (unsigned __int8 *)&v25, 1u, memory_order_acquire, memory_order_acquire);
    if (v25)
    {
      MEMORY[0x18530AEA0](v24);
      uint64_t v28 = *(void *)(v24 + 16) - 1;
      *(void *)(v24 + 16) = v28;
      if (v28)
      {
LABEL_32:
        int v27 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v24, (unsigned __int8 *)&v27, 0, memory_order_release, memory_order_relaxed);
        if (v27 != 1) {
          WTF::Lock::unlockSlow((WTF::Lock *)v24);
        }
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v26 = *(void *)(v24 + 16) - 1;
      *(void *)(v24 + 16) = v26;
      if (v26) {
        goto LABEL_32;
      }
    }
    uint64_t v29 = *(void *)(v24 + 8);
    int v30 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v24, (unsigned __int8 *)&v30, 0, memory_order_release, memory_order_relaxed);
    if (v30 == 1)
    {
      if (v29) {
        goto LABEL_38;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v24);
      if (v29) {
        goto LABEL_38;
      }
    }
    WTF::fastFree((WTF *)v24, v3);
  }
LABEL_38:
}

void sub_18250645C(_Unwind_Exception *a1)
{
  WTF::HashMap<unsigned long long,WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::~HashMap((uint64_t *)(v1 + 80), v3);
  WTF::HashMap<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::~HashMap((uint64_t *)(v1 + 72), v4);
  WTF::ThreadSafeWeakPtr<WebGPU::Instance>::~ThreadSafeWeakPtr((uint64_t *)(v1 + 32), v5);

  _Unwind_Resume(a1);
}

void WebGPU::Queue::endEncoding(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (v5)
  {
    id v6 = [*(id *)(a1 + 96) objectForKey:v5];

    if (v6 != v7) {
      goto LABEL_6;
    }
  }
  else
  {
    id v6 = 0;

    if (v7) {
      goto LABEL_6;
    }
  }
  [v7 endEncoding];
  [*(id *)(a1 + 96) removeObjectForKey:v5];
LABEL_6:
}

void sub_182506560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182506580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WebGPU::Queue::ensureBlitCommandEncoder(WebGPU::Queue *this)
{
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    id v3 = *((id *)this + 2);
    if (v3)
    {
      id v8 = v3;
      uint64_t v4 = objc_msgSend(*((id *)this + 12), "objectForKey:");

      if (v2 == v4) {
        return;
      }
    }
    else
    {
    }
  }
  uint64_t v9 = (MTLCommandBufferDescriptor *)objc_opt_new();
  [(MTLCommandBufferDescriptor *)v9 setErrorOptions:1];
  id v5 = WebGPU::Queue::commandBufferWithDescriptor(this, v9);
  objc_storeStrong((id *)this + 2, v5);
  uint64_t v6 = [*((id *)this + 2) blitCommandEncoder];
  id v7 = (void *)*((void *)this + 3);
  *((void *)this + 3) = v6;

  WebGPU::Queue::setEncoderForBuffer((uint64_t)this, *((void **)this + 2), *((void **)this + 3));
}

void sub_1825066AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1825066C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id WebGPU::Queue::commandBufferWithDescriptor(WebGPU::Queue *this, MTLCommandBufferDescriptor *a2)
{
  id v3 = a2;
  if (!*((void *)this + 1)) {
    goto LABEL_13;
  }
  uint64_t v4 = *((void *)this + 4);
  if (!v4)
  {
    uint64_t v6 = 0;
    goto LABEL_10;
  }
  char v5 = 0;
  uint64_t v6 = (uint64_t *)*((void *)this + 5);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v4, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x18530AEA0](v4);
  }
  if (*(void *)(v4 + 24))
  {
    ++*(void *)(v4 + 8);
    int v7 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v4, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 == 1) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v6 = 0;
    int v8 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v4, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 == 1) {
      goto LABEL_10;
    }
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_10:
  if ((unint64_t)[*((id *)this + 11) count] >= 0x3E8)
  {
    if (v6)
    {
      WebGPU::Device::loseTheDevice((uint64_t)v6, 1);
      uint64_t v10 = 0;
      goto LABEL_17;
    }
LABEL_13:
    uint64_t v10 = 0;
    goto LABEL_25;
  }
  uint64_t v10 = [*((id *)this + 1) commandBufferWithDescriptor:v3];
  if (v10) {
    [*((id *)this + 11) addObject:v10];
  }
  if (v6)
  {
LABEL_17:
    char v11 = 0;
    uint64_t v12 = *v6;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
    if (v11)
    {
      MEMORY[0x18530AEA0](v12);
      uint64_t v21 = *(void *)(v12 + 8);
      int v14 = 1;
      uint64_t v15 = v21 - 1;
      *(void *)(v12 + ++*(_DWORD *)(result + 8) = v21 - 1;
      if (v21 != 1)
      {
LABEL_19:
        uint64_t v16 = 0;
        BOOL v17 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
        if (v14 == 1) {
          goto LABEL_20;
        }
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v13 = *(void *)(v12 + 8);
      int v14 = 1;
      uint64_t v15 = v13 - 1;
      *(void *)(v12 + ++*(_DWORD *)(result + 8) = v13 - 1;
      if (v13 != 1) {
        goto LABEL_19;
      }
    }
    uint64_t v22 = *(void *)(v12 + 16);
    uint64_t v16 = *(WebGPU::Device **)(v12 + 24);
    *(void *)(v12 + 24) = 0;
    BOOL v17 = v22 != 0;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
    if (v14 == 1)
    {
LABEL_20:
      if (v15) {
        goto LABEL_25;
      }
LABEL_21:
      if (v16)
      {
        WebGPU::Device::~Device(v16, v9);
        WTF::fastFree(v18, v19);
      }
      if (!v17) {
        WTF::fastFree((WTF *)v12, v9);
      }
      goto LABEL_25;
    }
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
    if (v15) {
      goto LABEL_25;
    }
    goto LABEL_21;
  }
LABEL_25:

  return v10;
}

void sub_1825068B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1825068C4(_Unwind_Exception *a1)
{
  if (v2) {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v2, v5);
  }

  _Unwind_Resume(a1);
}

void WebGPU::Queue::setEncoderForBuffer(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (v8)
  {
    uint64_t v6 = [*(id *)(a1 + 96) objectForKey:v8];
    WebGPU::Queue::endEncoding(a1, v6, v8);

    int v7 = *(void **)(a1 + 96);
    if (v5) {
      [v7 setObject:v5 forKey:v8];
    }
    else {
      [v7 removeObjectForKey:v8];
    }
  }
}

void sub_18250699C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1825069B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1825069D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WebGPU::Queue::finalizeBlitCommandEncoder(WebGPU::Queue *this)
{
  uint64_t v1 = (void *)*((void *)this + 3);
  if (v1)
  {
    WebGPU::Queue::endEncoding((uint64_t)this, v1, *((void **)this + 2));
    WebGPU::Queue::commitMTLCommandBuffer((uint64_t)this, *((void **)this + 2));
    id v3 = (void *)*((void *)this + 3);
    *((void *)this + 3) = 0;

    uint64_t v4 = (void *)*((void *)this + 2);
    *((void *)this + 2) = 0;
  }
}

void WebGPU::Queue::commitMTLCommandBuffer(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!v3 || (unint64_t)[v3 status] > 1 || !*(void *)(a1 + 8))
  {
    WebGPU::Queue::removeMTLCommandBuffer(a1, v4);
    goto LABEL_16;
  }
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3321888768;
  v20[2] = ___ZN6WebGPU5Queue22commitMTLCommandBufferEPU27objcproto16MTLCommandBuffer11objc_object_block_invoke;
  v20[3] = &__block_descriptor_40_ea8_32c94_ZTSKZN6WebGPU5Queue22commitMTLCommandBufferEPU27objcproto16MTLCommandBuffer11objc_objectE3__0_e28_v16__0___MTLCommandBuffer__8l;
  atomic_fetch_add((atomic_uint *volatile)a1, 1u);
  atomic_fetch_add((atomic_uint *volatile)a1, 1u);
  uint64_t v21 = (WebGPU::Queue *)a1;
  [v4 addScheduledHandler:v20];
  uint64_t v19 = 0;
  if (a1 && atomic_fetch_add((atomic_uint *volatile)a1, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a1);
    WebGPU::Queue::~Queue((WebGPU::Queue *)a1);
    WTF::fastFree(v11, v12);
  }
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3321888768;
  v17[2] = ___ZN6WebGPU5Queue22commitMTLCommandBufferEPU27objcproto16MTLCommandBuffer11objc_object_block_invoke_4;
  v17[3] = &__block_descriptor_40_ea8_32c94_ZTSKZN6WebGPU5Queue22commitMTLCommandBufferEPU27objcproto16MTLCommandBuffer11objc_objectE3__1_e28_v16__0___MTLCommandBuffer__8l;
  atomic_fetch_add((atomic_uint *volatile)a1, 1u);
  uint64_t v18 = (WebGPU::Queue *)a1;
  uint64_t v19 = (WebGPU::Queue *)a1;
  atomic_fetch_add((atomic_uint *volatile)a1, 1u);
  [v4 addCompletedHandler:v17];
  id v5 = (unsigned int *)v19;
  uint64_t v19 = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WebGPU::Queue::~Queue((WebGPU::Queue *)v5);
    WTF::fastFree(v13, v14);
  }
  [v4 commit];
  id v6 = v4;
  [*(id *)(a1 + 96) removeObjectForKey:v6];
  [*(id *)(a1 + 88) removeObject:v6];

  ++*(void *)(a1 + 48);
  int v7 = (unsigned int *)v18;
  uint64_t v18 = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WebGPU::Queue::~Queue((WebGPU::Queue *)v7);
    WTF::fastFree(v15, v16);
    id v8 = (unsigned int *)v21;
    uint64_t v21 = 0;
    if (!v8) {
      goto LABEL_16;
    }
  }
  else
  {
    id v8 = (unsigned int *)v21;
    uint64_t v21 = 0;
    if (!v8) {
      goto LABEL_16;
    }
  }
  if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8);
    WebGPU::Queue::~Queue((WebGPU::Queue *)v8);
    WTF::fastFree(v9, v10);
  }
LABEL_16:
}

void sub_182506C7C(_Unwind_Exception *a1)
{
  WTF::Ref<WebGPU::Queue,WTF::RawPtrTraits<WebGPU::Queue>,WTF::DefaultRefDerefTraits<WebGPU::Queue>>::~Ref(v3);
  WTF::Ref<WebGPU::Queue,WTF::RawPtrTraits<WebGPU::Queue>,WTF::DefaultRefDerefTraits<WebGPU::Queue>>::~Ref(v2);

  _Unwind_Resume(a1);
}

void sub_182506CD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebGPU::Queue::makeInvalid(WebGPU::Queue *this)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;

  uint64_t v4 = *((void *)this + 9);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 4);
    uint64_t v6 = v4 + 24 * v5;
    if (*(_DWORD *)(v4 - 12))
    {
      uint64_t v7 = *((void *)this + 9);
      if (v5)
      {
        uint64_t v8 = 24 * v5;
        uint64_t v7 = *((void *)this + 9);
        while (*(void *)v7 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v7 += 24;
          v8 -= 24;
          if (!v8)
          {
            uint64_t v7 = v6;
            break;
          }
        }
      }
    }
    else
    {
      uint64_t v7 = v4 + 24 * v5;
      uint64_t v6 = v7;
    }
    uint64_t v9 = v4 + 24 * *(unsigned int *)(v4 - 4);
    while (v7 != v9)
    {
      uint64_t v16 = *(unsigned int *)(v7 + 20);
      if (v16)
      {
        BOOL v17 = *(uint64_t **)(v7 + 8);
        uint64_t v18 = 8 * v16;
        do
        {
          uint64_t v19 = *v17++;
          (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v20 = v7 + 24;
      uint64_t v7 = v6;
      if (v20 != v6)
      {
        uint64_t v7 = v20;
        while (*(void *)v7 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v7 += 24;
          if (v7 == v6)
          {
            uint64_t v7 = v6;
            break;
          }
        }
      }
    }
  }
  uint64_t v10 = *((void *)this + 10);
  if (v10)
  {
    uint64_t v11 = *(unsigned int *)(v10 - 4);
    uint64_t v12 = v10 + 24 * v11;
    if (*(_DWORD *)(v10 - 12))
    {
      uint64_t v13 = *((void *)this + 10);
      if (v11)
      {
        uint64_t v14 = 24 * v11;
        uint64_t v13 = *((void *)this + 10);
        while (*(void *)v13 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v13 += 24;
          v14 -= 24;
          if (!v14)
          {
            uint64_t v13 = v12;
            break;
          }
        }
      }
    }
    else
    {
      uint64_t v13 = v10 + 24 * v11;
      uint64_t v12 = v13;
    }
    uint64_t v15 = v10 + 24 * *(unsigned int *)(v10 - 4);
    while (v13 != v15)
    {
      uint64_t v24 = *(unsigned int *)(v13 + 20);
      if (v24)
      {
        char v25 = *(uint64_t **)(v13 + 8);
        uint64_t v26 = 8 * v24;
        do
        {
          uint64_t v27 = *v25++;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, 3);
          v26 -= 8;
        }
        while (v26);
      }
      uint64_t v28 = v13 + 24;
      uint64_t v13 = v12;
      if (v28 != v12)
      {
        uint64_t v13 = v28;
        while (*(void *)v13 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v13 += 24;
          if (v13 == v12)
          {
            uint64_t v13 = v12;
            break;
          }
        }
      }
    }
  }
  uint64_t v21 = *((void *)this + 9);
  if (v21)
  {
    *((void *)this + 9) = 0;
    uint64_t v22 = *(unsigned int *)(v21 - 4);
    if (v22)
    {
      for (uint64_t i = 0; i != v22; ++i)
      {
        if (*(void *)(v21 + 24 * i) != -2)
        {
          uint64_t v29 = v21 + 24 * i;
          int v30 = (WTF **)(v29 + 8);
          uint64_t v31 = *(unsigned int *)(v29 + 20);
          if (v31)
          {
            atomic_uchar *volatile v32 = *v30;
            uint64_t v33 = 8 * v31;
            do
            {
              uint64_t v34 = *(void *)v32;
              *(void *)atomic_uchar *volatile v32 = 0;
              if (v34) {
                (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
              }
              atomic_uchar *volatile v32 = (WTF *)((char *)v32 + 8);
              v33 -= 8;
            }
            while (v33);
          }
          BOOL v35 = *v30;
          if (*v30)
          {
            *int v30 = 0;
            *(_DWORD *)(v21 + 24 * i + 16) = 0;
            WTF::fastFree(v35, v3);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v21 - 16), v3);
  }
  uint64_t v36 = *((void *)this + 10);
  if (v36)
  {
    *((void *)this + 10) = 0;
    uint64_t v37 = *(unsigned int *)(v36 - 4);
    if (v37)
    {
      for (uint64_t j = 0; j != v37; ++j)
      {
        if (*(void *)(v36 + 24 * j) != -2)
        {
          uint64_t v39 = v36 + 24 * j;
          id v40 = (WTF **)(v39 + 8);
          uint64_t v41 = *(unsigned int *)(v39 + 20);
          if (v41)
          {
            uint64_t v42 = *v40;
            uint64_t v43 = 8 * v41;
            do
            {
              uint64_t v44 = *(void *)v42;
              *(void *)uint64_t v42 = 0;
              if (v44) {
                (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
              }
              uint64_t v42 = (WTF *)((char *)v42 + 8);
              v43 -= 8;
            }
            while (v43);
          }
          unsigned int v45 = *v40;
          if (*v40)
          {
            *id v40 = 0;
            *(_DWORD *)(v36 + 24 * j + 16) = 0;
            WTF::fastFree(v45, v3);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v36 - 16), v3);
  }
  while ([*((id *)this + 11) count])
  {
    BOOL v46 = [*((id *)this + 11) firstObject];
    WebGPU::Queue::removeMTLCommandBuffer((uint64_t)this, v46);
  }
  unsigned __int32 v47 = (void *)*((void *)this + 11);
  *((void *)this + 11) = 0;

  uint64_t v48 = (void *)*((void *)this + 12);
  *((void *)this + 12) = 0;
}

void sub_182507124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebGPU::Queue::removeMTLCommandBuffer(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v6 = v3;
    uint64_t v4 = [*(id *)(a1 + 96) objectForKey:v3];
    WebGPU::Queue::endEncoding(a1, v4, v6);
    id v5 = v6;
    [*(id *)(a1 + 96) removeObjectForKey:v5];
    [*(id *)(a1 + 88) removeObject:v5];

    id v3 = v6;
  }
}

void sub_1825071D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1825071F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182507204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *WebGPU::Queue::onSubmittedWorkDone(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = 1;
  if (!v3)
  {
    uint64_t v7 = 0;
    goto LABEL_10;
  }
  char v6 = 0;
  uint64_t v7 = *(uint64_t **)(a1 + 40);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (!v6)
  {
    if (*(void *)(v3 + 24)) {
      goto LABEL_4;
    }
LABEL_87:
    uint64_t v7 = 0;
    int v65 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3, (unsigned __int8 *)&v65, 0, memory_order_release, memory_order_relaxed);
    if (v65 == 1)
    {
LABEL_5:
      if (!v7) {
        goto LABEL_10;
      }
LABEL_6:
      if (!v7[1] || *((unsigned char *)v7 + 72))
      {
        char v4 = 0;
        goto LABEL_10;
      }
      uint64_t v21 = *(void **)(a1 + 24);
      if (v21)
      {
        WebGPU::Queue::endEncoding(a1, v21, *(void **)(a1 + 16));
        WebGPU::Queue::commitMTLCommandBuffer(a1, *(void **)(a1 + 16));
        uint64_t v22 = *(void **)(a1 + 24);
        *(void *)(a1 + 24) = 0;

        uint64_t v23 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = 0;
      }
      if (*(void *)(a1 + 48) == *(void *)(a1 + 56) && !*(void *)(a1 + 24))
      {
        uint64_t v61 = *a2;
        *a2 = 0;
        uint64_t v62 = (void *)WTF::fastMalloc((WTF *)0x10);
        void *v62 = &unk_1ECABB1F8;
        v62[1] = v61;
        uint64_t v66 = v62;
        WebGPU::Queue::scheduleWork(a1, (uint64_t *)&v66);
        unint64_t result = v66;
        if (v66) {
          unint64_t result = (void *)(*(uint64_t (**)(void *))(*v66 + 8))(v66);
        }
        goto LABEL_11;
      }
      uint64_t v66 = 0;
      uint64_t v67 = 0;
      char v25 = (uint64_t *)(a1 + 80);
      uint64_t v24 = *(void *)(a1 + 80);
      if (v24
        || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash((uint64_t *)(a1 + 80), 8u, 0), (uint64_t v24 = *v25) != 0))
      {
        int v26 = *(_DWORD *)(v24 - 8);
      }
      else
      {
        int v26 = 0;
      }
      uint64_t v27 = *(void *)(a1 + 48);
      unint64_t v28 = (v27 + ~(v27 << 32)) ^ ((unint64_t)(v27 + ~(v27 << 32)) >> 22);
      unint64_t v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
      unint64_t v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
      unsigned int v31 = v26 & ((v30 >> 31) ^ v30);
      atomic_uchar *volatile v32 = (uint64_t *)(v24 + 24 * v31);
      uint64_t v33 = *v32;
      if (*v32 != -1)
      {
        uint64_t v34 = 0;
        int v35 = 1;
        while (v33 != v27)
        {
          if (v33 == -2) {
            uint64_t v34 = v32;
          }
          unsigned int v31 = (v31 + v35) & v26;
          atomic_uchar *volatile v32 = (uint64_t *)(v24 + 24 * v31);
          uint64_t v33 = *v32;
          ++v35;
          if (*v32 == -1)
          {
            if (v34)
            {
              v34[1] = 0;
              v34[2] = 0;
              *uint64_t v34 = -1;
              --*(_DWORD *)(*(void *)(a1 + 80) - 16);
              uint64_t v27 = *(void *)(a1 + 48);
              atomic_uchar *volatile v32 = v34;
            }
            goto LABEL_37;
          }
        }
LABEL_56:
        unint64_t v46 = *((unsigned int *)v32 + 4);
        uint64_t v45 = *((unsigned int *)v32 + 5);
        if (v45 == v46)
        {
          unint64_t v47 = v46 + (v46 >> 2);
          if (v47 >= 0x10) {
            unint64_t v48 = v47 + 1;
          }
          else {
            unint64_t v48 = 16;
          }
          if (v48 <= v46 + 1) {
            unint64_t v49 = v46 + 1;
          }
          else {
            unint64_t v49 = v48;
          }
          if (!(v49 >> 29))
          {
            uint64_t v50 = (WTF *)v32[1];
            int32x2_t v52 = (WTF *)WTF::fastMalloc((WTF *)(8 * v49));
            *((_DWORD *)v32 + 4) = v49;
            v32[1] = (uint64_t)v52;
            if (v46)
            {
              uint64_t v53 = 8 * v46;
              uint64_t v54 = v50;
              do
              {
                uint64_t v55 = *(void *)v54;
                *(void *)uint64_t v54 = 0;
                *(void *)int32x2_t v52 = v55;
                uint64_t v56 = *(void *)v54;
                *(void *)uint64_t v54 = 0;
                if (v56) {
                  (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
                }
                int32x2_t v52 = (WTF *)((char *)v52 + 8);
                uint64_t v54 = (WTF *)((char *)v54 + 8);
                v53 -= 8;
              }
              while (v53);
              int32x2_t v52 = (WTF *)v32[1];
            }
            if (v50)
            {
              if (v52 == v50)
              {
                v32[1] = 0;
                *((_DWORD *)v32 + 4) = 0;
              }
              WTF::fastFree(v50, v51);
              int32x2_t v52 = (WTF *)v32[1];
            }
            uint64_t v59 = *((unsigned int *)v32 + 5);
            unint64_t result = (void *)WTF::fastMalloc((WTF *)0x10);
            *unint64_t result = &unk_1ECABB220;
            uint64_t v60 = *a2;
            *a2 = 0;
            result[1] = v60;
            if (!v60)
            {
              __break(0xC471u);
              JUMPOUT(0x182507874);
            }
            *((void *)v52 + v59) = result;
            goto LABEL_78;
          }
        }
        else
        {
          uint64_t v57 = v32[1];
          unint64_t result = (void *)WTF::fastMalloc((WTF *)0x10);
          *unint64_t result = &unk_1ECABB220;
          uint64_t v58 = *a2;
          *a2 = 0;
          result[1] = v58;
          if (v58)
          {
            *(void *)(v57 + 8 * v45) = result;
LABEL_78:
            ++*((_DWORD *)v32 + 5);
            goto LABEL_11;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x182507854);
      }
LABEL_37:
      *atomic_uchar *volatile v32 = v27;
      uint64_t v66 = 0;
      uint64_t v67 = 0;
      uint64_t v37 = (WTF **)(v32 + 1);
      uint64_t v36 = (WTF *)v32[1];
      uint64_t v38 = *((unsigned int *)v32 + 5);
      if (v38)
      {
        uint64_t v39 = 8 * v38;
        do
        {
          uint64_t v40 = *(void *)v36;
          *(void *)uint64_t v36 = 0;
          if (v40) {
            (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
          }
          uint64_t v36 = (WTF *)((char *)v36 + 8);
          v39 -= 8;
        }
        while (v39);
        uint64_t v36 = *v37;
      }
      if (v36)
      {
        v32[1] = 0;
        *((_DWORD *)v32 + 4) = 0;
        WTF::fastFree(v36, v21);
      }
      *uint64_t v37 = 0;
      v32[2] = 0;
      if (*v25)
      {
        ++*(_DWORD *)(*v25 - 12);
        uint64_t v41 = *v25;
        if (*v25) {
          goto LABEL_47;
        }
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        uint64_t v41 = *v25;
        if (*v25)
        {
LABEL_47:
          uint64_t v42 = (*(_DWORD *)(v41 - 16) + *(_DWORD *)(v41 - 12));
          unint64_t v43 = *(unsigned int *)(v41 - 4);
          if (v43 <= 0x400) {
            goto LABEL_48;
          }
          goto LABEL_53;
        }
      }
      uint64_t v42 = *(unsigned int *)(v41 - 16);
      unint64_t v43 = *(unsigned int *)(v41 - 4);
      if (v43 <= 0x400)
      {
LABEL_48:
        if (3 * v43 > 4 * v42) {
          goto LABEL_56;
        }
        if (!v43)
        {
          unsigned int v44 = 8;
LABEL_55:
          atomic_uchar *volatile v32 = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(v25, v44, v32);
          goto LABEL_56;
        }
LABEL_54:
        unsigned int v44 = v43 << (6 * *(_DWORD *)(v41 - 12) >= (2 * v43));
        goto LABEL_55;
      }
LABEL_53:
      if (v43 > 2 * v42) {
        goto LABEL_56;
      }
      goto LABEL_54;
    }
    goto LABEL_88;
  }
  MEMORY[0x18530AEA0](v3);
  if (!*(void *)(v3 + 24)) {
    goto LABEL_87;
  }
LABEL_4:
  ++*(void *)(v3 + 8);
  int v8 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 == 1) {
    goto LABEL_5;
  }
LABEL_88:
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (v7) {
    goto LABEL_6;
  }
LABEL_10:
  uint64_t v9 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, 3);
  unint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  if (v4) {
    return result;
  }
LABEL_11:
  char v12 = 0;
  uint64_t v13 = *v7;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v13, (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
  if (v12)
  {
    unint64_t result = (void *)MEMORY[0x18530AEA0](v13);
    uint64_t v63 = *(void *)(v13 + 8);
    int v15 = 1;
    uint64_t v16 = v63 - 1;
    *(void *)(v13 + ++*(_DWORD *)(result + 8) = v63 - 1;
    if (v63 != 1)
    {
LABEL_13:
      BOOL v17 = 0;
      BOOL v18 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v13, (unsigned __int8 *)&v15, 0, memory_order_release, memory_order_relaxed);
      if (v15 == 1) {
        goto LABEL_14;
      }
LABEL_84:
      unint64_t result = (void *)WTF::Lock::unlockSlow((WTF::Lock *)v13);
      if (v16) {
        return result;
      }
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v14 = *(void *)(v13 + 8);
    int v15 = 1;
    uint64_t v16 = v14 - 1;
    *(void *)(v13 + ++*(_DWORD *)(result + 8) = v14 - 1;
    if (v14 != 1) {
      goto LABEL_13;
    }
  }
  uint64_t v64 = *(void *)(v13 + 16);
  BOOL v17 = *(WebGPU::Device **)(v13 + 24);
  *(void *)(v13 + 24) = 0;
  BOOL v18 = v64 != 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v13, (unsigned __int8 *)&v15, 0, memory_order_release, memory_order_relaxed);
  if (v15 != 1) {
    goto LABEL_84;
  }
LABEL_14:
  if (v16) {
    return result;
  }
LABEL_15:
  if (v17)
  {
    WebGPU::Device::~Device(v17, v11);
    unint64_t result = (void *)WTF::fastFree(v19, v20);
  }
  if (!v18)
  {
    return (void *)WTF::fastFree((WTF *)v13, v11);
  }
  return result;
}

void sub_182507880(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v9, a2);
  _Unwind_Resume(a1);
}

void WebGPU::Queue::scheduleWork(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    return;
  }
  char v4 = 0;
  id v5 = *(uint64_t **)(a1 + 40);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4)
  {
    MEMORY[0x18530AEA0](v2);
    if (*(void *)(v2 + 24))
    {
LABEL_4:
      ++*(void *)(v2 + 8);
      int v6 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
      if (v6 == 1) {
        goto LABEL_5;
      }
      goto LABEL_36;
    }
  }
  else if (*(void *)(v2 + 24))
  {
    goto LABEL_4;
  }
  id v5 = 0;
  int v28 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
  if (v28 == 1)
  {
LABEL_5:
    if (!v5) {
      return;
    }
    goto LABEL_6;
  }
LABEL_36:
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v5) {
    return;
  }
LABEL_6:
  uint64_t v7 = v5[56];
  if (!v7) {
    goto LABEL_20;
  }
  char v8 = 0;
  uint64_t v9 = v5[57];
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
  if (v8) {
    MEMORY[0x18530AEA0](v7);
  }
  if (*(void *)(v7 + 24))
  {
    ++*(void *)(v7 + 8);
    int v10 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
    if (v10 == 1) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v9 = 0;
    int v27 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v27, 0, memory_order_release, memory_order_relaxed);
    if (v27 == 1)
    {
LABEL_11:
      if (!v9) {
        goto LABEL_20;
      }
      goto LABEL_12;
    }
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (!v9) {
    goto LABEL_20;
  }
LABEL_12:
  WebGPU::Instance::scheduleWork(v9, a2);
  char v11 = 0;
  uint64_t v12 = *(void *)(v9 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
  if (v11)
  {
    MEMORY[0x18530AEA0](v12);
    uint64_t v31 = *(void *)(v12 + 8);
    int v14 = 1;
    uint64_t v15 = v31 - 1;
    *(void *)(v12 + ++*(_DWORD *)(result + 8) = v31 - 1;
    if (v31 != 1)
    {
LABEL_14:
      uint64_t v16 = 0;
      BOOL v17 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
      if (v14 == 1) {
        goto LABEL_15;
      }
LABEL_44:
      WTF::Lock::unlockSlow((WTF::Lock *)v12);
      if (v15) {
        goto LABEL_20;
      }
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v13 = *(void *)(v12 + 8);
    int v14 = 1;
    uint64_t v15 = v13 - 1;
    *(void *)(v12 + ++*(_DWORD *)(result + 8) = v13 - 1;
    if (v13 != 1) {
      goto LABEL_14;
    }
  }
  uint64_t v32 = *(void *)(v12 + 16);
  uint64_t v16 = *(void *)(v12 + 24);
  *(void *)(v12 + 24) = 0;
  BOOL v17 = v32 != 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
  if (v14 != 1) {
    goto LABEL_44;
  }
LABEL_15:
  if (v15) {
    goto LABEL_20;
  }
LABEL_16:
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  if (!v17) {
    WTF::fastFree((WTF *)v12, a2);
  }
LABEL_20:
  char v18 = 0;
  uint64_t v19 = *v5;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v19, (unsigned __int8 *)&v18, 1u, memory_order_acquire, memory_order_acquire);
  if (v18)
  {
    MEMORY[0x18530AEA0](v19);
    uint64_t v29 = *(void *)(v19 + 8);
    int v21 = 1;
    uint64_t v22 = v29 - 1;
    *(void *)(v19 + ++*(_DWORD *)(result + 8) = v29 - 1;
    if (v29 != 1)
    {
LABEL_22:
      uint64_t v23 = 0;
      BOOL v24 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v19, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
      if (v21 == 1) {
        goto LABEL_23;
      }
LABEL_40:
      WTF::Lock::unlockSlow((WTF::Lock *)v19);
      if (v22) {
        return;
      }
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v20 = *(void *)(v19 + 8);
    int v21 = 1;
    uint64_t v22 = v20 - 1;
    *(void *)(v19 + ++*(_DWORD *)(result + 8) = v20 - 1;
    if (v20 != 1) {
      goto LABEL_22;
    }
  }
  uint64_t v30 = *(void *)(v19 + 16);
  uint64_t v23 = *(WebGPU::Device **)(v19 + 24);
  *(void *)(v19 + 24) = 0;
  BOOL v24 = v30 != 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v19, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
  if (v21 != 1) {
    goto LABEL_40;
  }
LABEL_23:
  if (v22) {
    return;
  }
LABEL_24:
  if (v23)
  {
    WebGPU::Device::~Device(v23, a2);
    WTF::fastFree(v25, v26);
  }
  if (!v24)
  {
    WTF::fastFree((WTF *)v19, a2);
  }
}

void sub_182507C08(_Unwind_Exception *a1, void *a2)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v2, a2);
  _Unwind_Resume(a1);
}

void sub_182507C1C(_Unwind_Exception *a1, void *a2)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Instance,(WTF::DestructionThread)0>::deref((atomic_uchar *volatile *)(v3 + 8), a2);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v2, v5);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    char v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)char v4 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      char v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void WebGPU::Queue::onSubmittedWorkScheduled(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = 1;
  if (!v3)
  {
    uint64_t v7 = 0;
    goto LABEL_10;
  }
  char v6 = 0;
  uint64_t v7 = *(uint64_t **)(a1 + 40);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (!v6)
  {
    if (*(void *)(v3 + 24)) {
      goto LABEL_4;
    }
LABEL_69:
    uint64_t v7 = 0;
    int v54 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3, (unsigned __int8 *)&v54, 0, memory_order_release, memory_order_relaxed);
    if (v54 == 1)
    {
LABEL_5:
      if (!v7) {
        goto LABEL_10;
      }
LABEL_6:
      if (!v7[1] || *((unsigned char *)v7 + 72))
      {
        char v4 = 0;
        goto LABEL_10;
      }
      uint64_t v9 = *(void **)(a1 + 24);
      if (v9)
      {
        WebGPU::Queue::endEncoding(a1, v9, *(void **)(a1 + 16));
        WebGPU::Queue::commitMTLCommandBuffer(a1, *(void **)(a1 + 16));
        uint64_t v19 = *(void **)(a1 + 24);
        *(void *)(a1 + 24) = 0;

        uint64_t v20 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = 0;
      }
      if (*(void *)(a1 + 48) == *(void *)(a1 + 64))
      {
        uint64_t v21 = *(void *)a2;
        *(void *)a2 = 0;
        uint64_t v22 = (void *)WTF::fastMalloc((WTF *)0x10);
        *uint64_t v22 = &unk_1ECABB248;
        v22[1] = v21;
        uint64_t v55 = v22;
        WebGPU::Queue::scheduleWork(a1, (uint64_t *)&v55);
        if (v55) {
          (*(void (**)(void *))(*v55 + 8))(v55);
        }
        goto LABEL_11;
      }
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      BOOL v24 = (uint64_t *)(a1 + 72);
      uint64_t v23 = *(void *)(a1 + 72);
      if (v23
        || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash((uint64_t *)(a1 + 72), 8u, 0), (uint64_t v23 = *v24) != 0))
      {
        int v25 = *(_DWORD *)(v23 - 8);
      }
      else
      {
        int v25 = 0;
      }
      uint64_t v26 = *(void *)(a1 + 48);
      unint64_t v27 = (v26 + ~(v26 << 32)) ^ ((unint64_t)(v26 + ~(v26 << 32)) >> 22);
      unint64_t v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
      unint64_t v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
      unsigned int v30 = v25 & ((v29 >> 31) ^ v29);
      uint64_t v31 = (uint64_t *)(v23 + 24 * v30);
      uint64_t v32 = *v31;
      if (*v31 != -1)
      {
        uint64_t v33 = 0;
        int v34 = 1;
        while (v32 != v26)
        {
          if (v32 == -2) {
            uint64_t v33 = v31;
          }
          unsigned int v30 = (v30 + v34) & v25;
          uint64_t v31 = (uint64_t *)(v23 + 24 * v30);
          uint64_t v32 = *v31;
          ++v34;
          if (*v31 == -1)
          {
            if (v33)
            {
              v33[1] = 0;
              void v33[2] = 0;
              *uint64_t v33 = -1;
              --*(_DWORD *)(*(void *)(a1 + 72) - 16);
              uint64_t v26 = *(void *)(a1 + 48);
              uint64_t v31 = v33;
            }
            goto LABEL_38;
          }
        }
        goto LABEL_59;
      }
LABEL_38:
      *uint64_t v31 = v26;
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint64_t v36 = (WTF **)(v31 + 1);
      int v35 = (WTF *)v31[1];
      uint64_t v37 = *((unsigned int *)v31 + 5);
      if (v37)
      {
        uint64_t v38 = 8 * v37;
        do
        {
          uint64_t v39 = *(void *)v35;
          *(void *)int v35 = 0;
          if (v39) {
            (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
          }
          int v35 = (WTF *)((char *)v35 + 8);
          v38 -= 8;
        }
        while (v38);
        int v35 = *v36;
      }
      if (v35)
      {
        v31[1] = 0;
        *((_DWORD *)v31 + 4) = 0;
        WTF::fastFree(v35, v9);
      }
      *uint64_t v36 = 0;
      v31[2] = 0;
      uint64_t v40 = *v24;
      if (*v24) {
        int v41 = *(_DWORD *)(v40 - 12) + 1;
      }
      else {
        int v41 = 1;
      }
      *(_DWORD *)(v40 - 12) = v41;
      uint64_t v42 = *v24;
      if (*v24) {
        int v43 = *(_DWORD *)(v42 - 12);
      }
      else {
        int v43 = 0;
      }
      uint64_t v44 = (*(_DWORD *)(v42 - 16) + v43);
      unint64_t v45 = *(unsigned int *)(v42 - 4);
      if (v45 > 0x400)
      {
        if (v45 <= 2 * v44) {
          goto LABEL_57;
        }
      }
      else if (3 * v45 <= 4 * v44)
      {
        if (!v45)
        {
          unsigned int v46 = 8;
LABEL_58:
          uint64_t v31 = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(v24, v46, v31);
          goto LABEL_59;
        }
LABEL_57:
        unsigned int v46 = v45 << (6 * *(_DWORD *)(v42 - 12) >= (2 * v45));
        goto LABEL_58;
      }
LABEL_59:
      uint64_t v47 = *((unsigned int *)v31 + 5);
      if (v47 == *((_DWORD *)v31 + 4))
      {
        unint64_t v48 = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v31 + 1), v47 + 1, a2);
        uint64_t v47 = *((unsigned int *)v31 + 5);
        int v49 = v47 + 1;
        uint64_t v50 = v31[1];
        uint64_t v51 = *(void *)v48;
        *(void *)unint64_t v48 = 0;
      }
      else
      {
        int v49 = v47 + 1;
        uint64_t v50 = v31[1];
        uint64_t v51 = *(void *)a2;
        *(void *)a2 = 0;
      }
      *(void *)(v50 + 8 * v47) = v51;
      *((_DWORD *)v31 + 5) = v49;
      goto LABEL_11;
    }
    goto LABEL_70;
  }
  MEMORY[0x18530AEA0](v3);
  if (!*(void *)(v3 + 24)) {
    goto LABEL_69;
  }
LABEL_4:
  ++*(void *)(v3 + 8);
  int v8 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 == 1) {
    goto LABEL_5;
  }
LABEL_70:
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (v7) {
    goto LABEL_6;
  }
LABEL_10:
  (*(void (**)(void))(**(void **)a2 + 16))();
  if (v4) {
    return;
  }
LABEL_11:
  char v10 = 0;
  uint64_t v11 = *v7;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v11, (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
  if (v10)
  {
    MEMORY[0x18530AEA0](v11);
    uint64_t v52 = *(void *)(v11 + 8);
    int v13 = 1;
    uint64_t v14 = v52 - 1;
    *(void *)(v11 + ++*(_DWORD *)(result + 8) = v52 - 1;
    if (v52 != 1)
    {
LABEL_13:
      uint64_t v15 = 0;
      BOOL v16 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v11, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
      if (v13 == 1) {
        goto LABEL_14;
      }
LABEL_66:
      WTF::Lock::unlockSlow((WTF::Lock *)v11);
      if (v14) {
        return;
      }
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v12 = *(void *)(v11 + 8);
    int v13 = 1;
    uint64_t v14 = v12 - 1;
    *(void *)(v11 + ++*(_DWORD *)(result + 8) = v12 - 1;
    if (v12 != 1) {
      goto LABEL_13;
    }
  }
  uint64_t v53 = *(void *)(v11 + 16);
  uint64_t v15 = *(WebGPU::Device **)(v11 + 24);
  *(void *)(v11 + 24) = 0;
  BOOL v16 = v53 != 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v11, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
  if (v13 != 1) {
    goto LABEL_66;
  }
LABEL_14:
  if (v14) {
    return;
  }
LABEL_15:
  if (v15)
  {
    WebGPU::Device::~Device(v15, v9);
    WTF::fastFree(v17, v18);
  }
  if (!v16)
  {
    WTF::fastFree((WTF *)v11, v9);
  }
}

void sub_182508190(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v9, v11);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    char v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)char v4 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      char v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void ___ZN6WebGPU5Queue22commitMTLCommandBufferEPU27objcproto16MTLCommandBuffer11objc_object_block_invoke(uint64_t a1, void *a2)
{
  id v23 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 32);
  if (!v5) {
    goto LABEL_18;
  }
  char v6 = 0;
  uint64_t v7 = *(uint64_t **)(v4 + 40);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    MEMORY[0x18530AEA0](v5);
  }
  if (*(void *)(v5 + 24))
  {
    ++*(void *)(v5 + 8);
    int v8 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 == 1) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v7 = 0;
    int v20 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v20, 0, memory_order_release, memory_order_relaxed);
    if (v20 == 1)
    {
LABEL_6:
      if (!v7) {
        goto LABEL_18;
      }
      goto LABEL_7;
    }
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (!v7) {
    goto LABEL_18;
  }
LABEL_7:
  if (v7[1])
  {
    uint64_t v9 = *(atomic_uint **)(a1 + 32);
    atomic_fetch_add(v9, 1u);
    char v10 = (void *)WTF::fastMalloc((WTF *)0x10);
    *char v10 = &unk_1ECABB1A8;
    v10[1] = v9;
    BOOL v24 = v10;
    WebGPU::Queue::scheduleWork((uint64_t)v9, (uint64_t *)&v24);
    if (v24) {
      (*(void (**)(void *))(*v24 + 8))(v24);
    }
  }
  char v11 = 0;
  uint64_t v12 = *v7;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
  if (v11)
  {
    MEMORY[0x18530AEA0](v12);
    uint64_t v21 = *(void *)(v12 + 8);
    int v14 = 1;
    uint64_t v15 = v21 - 1;
    *(void *)(v12 + ++*(_DWORD *)(result + 8) = v21 - 1;
    if (v21 != 1)
    {
LABEL_12:
      BOOL v16 = 0;
      BOOL v17 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
      if (v14 == 1) {
        goto LABEL_13;
      }
LABEL_26:
      WTF::Lock::unlockSlow((WTF::Lock *)v12);
      if (v15) {
        goto LABEL_18;
      }
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v13 = *(void *)(v12 + 8);
    int v14 = 1;
    uint64_t v15 = v13 - 1;
    *(void *)(v12 + ++*(_DWORD *)(result + 8) = v13 - 1;
    if (v13 != 1) {
      goto LABEL_12;
    }
  }
  uint64_t v22 = *(void *)(v12 + 16);
  BOOL v16 = *(WebGPU::Device **)(v12 + 24);
  *(void *)(v12 + 24) = 0;
  BOOL v17 = v22 != 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
  if (v14 != 1) {
    goto LABEL_26;
  }
LABEL_13:
  if (v15) {
    goto LABEL_18;
  }
LABEL_14:
  if (v16)
  {
    WebGPU::Device::~Device(v16, v3);
    WTF::fastFree(v18, v19);
  }
  if (!v17) {
    WTF::fastFree((WTF *)v12, v3);
  }
LABEL_18:
}

void sub_182508494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1825084B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, atomic_uint *a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  WTF::Ref<WebGPU::Queue,WTF::RawPtrTraits<WebGPU::Queue>,WTF::DefaultRefDerefTraits<WebGPU::Queue>>::~Ref(&a11);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v12, v14);

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c94_ZTSKZN6WebGPU5Queue22commitMTLCommandBufferEPU27objcproto16MTLCommandBuffer11objc_objectE3__0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(atomic_uint **)(a2 + 32);
  atomic_fetch_add(v2, 1u);
  *(void *)(result + 32) = v2;
  return result;
}

unsigned int *__destroy_helper_block_ea8_32c94_ZTSKZN6WebGPU5Queue22commitMTLCommandBufferEPU27objcproto16MTLCommandBuffer11objc_objectE3__0(uint64_t a1)
{
  unint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    WebGPU::Queue::~Queue((WebGPU::Queue *)result);
    return (unsigned int *)WTF::fastFree(v3, v4);
  }
  return result;
}

void ___ZN6WebGPU5Queue22commitMTLCommandBufferEPU27objcproto16MTLCommandBuffer11objc_object_block_invoke_4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(v5 + 32);
  id v28 = v3;
  if (!v6) {
    goto LABEL_26;
  }
  char v7 = 0;
  int v8 = *(uint64_t **)(v5 + 40);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
  if (v7) {
    MEMORY[0x18530AEA0](v6);
  }
  if (*(void *)(v6 + 24))
  {
    ++*(void *)(v6 + 8);
    int v9 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 == 1) {
      goto LABEL_6;
    }
  }
  else
  {
    int v8 = 0;
    int v14 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
    if (v14 == 1)
    {
LABEL_6:
      if (!v8) {
        goto LABEL_26;
      }
      goto LABEL_7;
    }
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  if (!v8) {
    goto LABEL_26;
  }
LABEL_7:
  if (v8[1])
  {
    uint64_t v10 = [v28 status];
    char v11 = [v28 error];
    uint64_t v12 = v11;
    BOOL v13 = v10 != 4 && (!v11 || [v11 code] != 7);

    uint64_t v15 = *(atomic_uint **)(a1 + 32);
    atomic_fetch_add(v15, 1u);
    uint64_t v16 = WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v16 = &unk_1ECABB1D0;
    *(unsigned char *)(v16 + ++*(_DWORD *)(result + 8) = v13;
    uint64_t v29 = v16;
    *(void *)(v16 + 16) = v15;
    WebGPU::Queue::scheduleWork((uint64_t)v15, &v29);
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
    }
  }
  char v17 = 0;
  uint64_t v18 = *v8;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v18, (unsigned __int8 *)&v17, 1u, memory_order_acquire, memory_order_acquire);
  if (v17)
  {
    MEMORY[0x18530AEA0](v18);
    uint64_t v26 = *(void *)(v18 + 8);
    int v20 = 1;
    uint64_t v21 = v26 - 1;
    *(void *)(v18 + ++*(_DWORD *)(result + 8) = v26 - 1;
    if (v26 != 1)
    {
LABEL_20:
      uint64_t v22 = 0;
      BOOL v23 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v18, (unsigned __int8 *)&v20, 0, memory_order_release, memory_order_relaxed);
      if (v20 == 1) {
        goto LABEL_21;
      }
LABEL_31:
      WTF::Lock::unlockSlow((WTF::Lock *)v18);
      if (v21) {
        goto LABEL_26;
      }
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v19 = *(void *)(v18 + 8);
    int v20 = 1;
    uint64_t v21 = v19 - 1;
    *(void *)(v18 + ++*(_DWORD *)(result + 8) = v19 - 1;
    if (v19 != 1) {
      goto LABEL_20;
    }
  }
  uint64_t v27 = *(void *)(v18 + 16);
  uint64_t v22 = *(WebGPU::Device **)(v18 + 24);
  *(void *)(v18 + 24) = 0;
  BOOL v23 = v27 != 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v18, (unsigned __int8 *)&v20, 0, memory_order_release, memory_order_relaxed);
  if (v20 != 1) {
    goto LABEL_31;
  }
LABEL_21:
  if (v21) {
    goto LABEL_26;
  }
LABEL_22:
  if (v22)
  {
    WebGPU::Device::~Device(v22, v4);
    WTF::fastFree(v24, v25);
  }
  if (!v23) {
    WTF::fastFree((WTF *)v18, v4);
  }
LABEL_26:
}

void sub_1825087C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void sub_1825087E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, char a10, uint64_t a11, uint64_t a12)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v12, v15);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c94_ZTSKZN6WebGPU5Queue22commitMTLCommandBufferEPU27objcproto16MTLCommandBuffer11objc_objectE3__1(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(atomic_uint **)(a2 + 32);
  atomic_fetch_add(v2, 1u);
  *(void *)(result + 32) = v2;
  return result;
}

unsigned int *__destroy_helper_block_ea8_32c94_ZTSKZN6WebGPU5Queue22commitMTLCommandBufferEPU27objcproto16MTLCommandBuffer11objc_objectE3__1(uint64_t a1)
{
  unint64_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    WebGPU::Queue::~Queue((WebGPU::Queue *)result);
    return (unsigned int *)WTF::fastFree(v3, v4);
  }
  return result;
}

void ___ZN6WebGPU5Queue6submitEON3WTF6VectorINSt3__117reference_wrapperINS_13CommandBufferEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEE_block_invoke(uint64_t a1, id *a2)
{
  uint64_t v4 = (NSString *)a2[6];
  uint64_t v5 = v4;
  if (!v4) {
    uint64_t v4 = *(NSString **)(a1 + 32);
  }
  WebGPU::CommandBuffer::makeInvalid((WebGPU::CommandBuffer *)a2, v4);
}

void sub_182508924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN6WebGPU5Queue6submitEON3WTF6VectorINSt3__117reference_wrapperINS_13CommandBufferEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEE_block_invoke_2(uint64_t a1, id *this)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v4 = (NSString *)this[6];
    uint64_t v5 = v4;
    if (!v4) {
      uint64_t v4 = *(NSString **)(a1 + 32);
    }
    WebGPU::CommandBuffer::makeInvalid((WebGPU::CommandBuffer *)this, v4);
  }
  else
  {
    WebGPU::CommandBuffer::makeInvalidDueToCommit(this, &cfstr_CommandBufferW.isa);
  }
}

void sub_1825089CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WebGPU::Queue::writeBuffer(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  id v30 = a2;
  uint64_t v9 = *(void *)(a1 + 32);
  if (!v9) {
    goto LABEL_25;
  }
  char v10 = 0;
  char v11 = *(uint64_t **)(a1 + 40);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
  if (v10) {
    MEMORY[0x18530AEA0](v9);
  }
  if (*(void *)(v9 + 24))
  {
    ++*(void *)(v9 + 8);
    uint64_t v12 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
    if (v12 == 1) {
      goto LABEL_6;
    }
  }
  else
  {
    char v11 = 0;
    uint64_t v12 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
    if (v12 == 1)
    {
LABEL_6:
      if (!v11) {
        goto LABEL_25;
      }
      goto LABEL_7;
    }
  }
  WTF::Lock::unlockSlow((uint64_t *)v12, (WTF::Lock *)v9);
  if (!v11) {
    goto LABEL_25;
  }
LABEL_7:
  WebGPU::Queue::ensureBlitCommandEncoder((WebGPU::Queue *)a1);
  BOOL v13 = (void *)v11[1];
  if (a5 >> 25) {
    int v14 = (void *)[v13 newBufferWithBytesNoCopy:a4 length:a5 options:0 deallocator:0];
  }
  else {
    int v14 = (void *)[v13 newBufferWithBytes:a4 length:a5 options:0];
  }
  WebGPU::Device::setOwnerWithIdentity((uint64_t)v11, v14);
  if (v14)
  {
    [*(id *)(a1 + 24) copyFromBuffer:v14 sourceOffset:0 toBuffer:v30 destinationOffset:a3 size:a5];
    if (a5 >> 25)
    {
      uint64_t v15 = *(void **)(a1 + 24);
      if (v15)
      {
        WebGPU::Queue::endEncoding(a1, v15, *(void **)(a1 + 16));
        WebGPU::Queue::commitMTLCommandBuffer(a1, *(void **)(a1 + 16));
        uint64_t v16 = *(void **)(a1 + 24);
        *(void *)(a1 + 24) = 0;

        char v17 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = 0;
      }
    }
  }

  char v19 = 0;
  uint64_t v20 = *v11;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v20, (unsigned __int8 *)&v19, 1u, memory_order_acquire, memory_order_acquire);
  if (v19)
  {
    MEMORY[0x18530AEA0](v20);
    uint64_t v28 = *(void *)(v20 + 8);
    uint64_t v22 = 1;
    uint64_t v23 = v28 - 1;
    *(void *)(v20 + ++*(_DWORD *)(result + 8) = v28 - 1;
    if (v28 != 1)
    {
LABEL_19:
      BOOL v24 = 0;
      BOOL v25 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v20, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
      if (v22 == 1) {
        goto LABEL_20;
      }
LABEL_30:
      WTF::Lock::unlockSlow((uint64_t *)v22, (WTF::Lock *)v20);
      if (v23) {
        goto LABEL_25;
      }
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v21 = *(void *)(v20 + 8);
    uint64_t v22 = 1;
    uint64_t v23 = v21 - 1;
    *(void *)(v20 + ++*(_DWORD *)(result + 8) = v21 - 1;
    if (v21 != 1) {
      goto LABEL_19;
    }
  }
  uint64_t v29 = *(void *)(v20 + 16);
  BOOL v24 = *(WebGPU::Device **)(v20 + 24);
  *(void *)(v20 + 24) = 0;
  BOOL v25 = v29 != 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v20, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
  if (v22 != 1) {
    goto LABEL_30;
  }
LABEL_20:
  if (v23) {
    goto LABEL_25;
  }
LABEL_21:
  if (v24)
  {
    WebGPU::Device::~Device(v24, v18);
    WTF::fastFree(v26, v27);
  }
  if (!v25) {
    WTF::fastFree((WTF *)v20, v18);
  }
LABEL_25:
}

void sub_182508C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182508C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v10, v13);
  _Unwind_Resume(a1);
}

atomic_uchar *volatile *WebGPU::Queue::device(WebGPU::Queue *this, void *a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (!v2) {
    goto LABEL_14;
  }
  char v3 = 0;
  uint64_t v4 = (atomic_uchar *volatile *)*((void *)this + 5);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3)
  {
    MEMORY[0x18530AEA0](v2);
    if (*(void *)(v2 + 24))
    {
LABEL_4:
      ++*(void *)(v2 + 8);
      uint64_t v5 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
      if (v5 == 1) {
        goto LABEL_5;
      }
      goto LABEL_13;
    }
  }
  else if (*(void *)(v2 + 24))
  {
    goto LABEL_4;
  }
  uint64_t v4 = 0;
  uint64_t v5 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
LABEL_5:
    if (v4) {
      goto LABEL_6;
    }
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x182508D84);
  }
LABEL_13:
  WTF::Lock::unlockSlow((uint64_t *)v5, (WTF::Lock *)v2);
  if (!v4) {
    goto LABEL_14;
  }
LABEL_6:
  char v6 = 0;
  atomic_uchar *volatile v7 = *v4;
  atomic_compare_exchange_strong_explicit(*v4, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6)
  {
    MEMORY[0x18530AEA0](v7);
    uint64_t v14 = *((void *)v7 + 1);
    uint64_t v9 = 1;
    uint64_t v10 = v14 - 1;
    *((void *)v7 + 1) = v14 - 1;
    if (v14 != 1)
    {
LABEL_8:
      char v11 = 0;
      BOOL v12 = 1;
      atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
      if (v9 == 1) {
        goto LABEL_9;
      }
LABEL_17:
      WTF::Lock::unlockSlow((uint64_t *)v9, (WTF::Lock *)v7);
      if (v10) {
        return v4;
      }
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v8 = *((void *)v7 + 1);
    uint64_t v9 = 1;
    uint64_t v10 = v8 - 1;
    *((void *)v7 + 1) = v8 - 1;
    if (v8 != 1) {
      goto LABEL_8;
    }
  }
  uint64_t v15 = *((void *)v7 + 2);
  char v11 = (WebGPU::Device *)*((void *)v7 + 3);
  *((void *)v7 + 3) = 0;
  BOOL v12 = v15 != 0;
  atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != 1) {
    goto LABEL_17;
  }
LABEL_9:
  if (v10) {
    return v4;
  }
LABEL_18:
  if (v11)
  {
    WebGPU::Device::~Device(v11, a2);
    WTF::fastFree(v16, v17);
  }
  if (v12) {
    return v4;
  }
  WTF::fastFree((WTF *)v7, a2);
  return v4;
}

void WebGPU::Queue::clearTextureIfNeeded(WebGPU::Queue *this, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (!v3) {
    return;
  }
  char v7 = 0;
  uint64_t v8 = (WebGPU::Device *)*((void *)this + 5);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
  if (v7)
  {
    MEMORY[0x18530AEA0](v3);
    if (*(void *)(v3 + 24))
    {
LABEL_4:
      ++*(void *)(v3 + 8);
      uint64_t v9 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
      if (v9 == 1) {
        goto LABEL_5;
      }
LABEL_34:
      WTF::Lock::unlockSlow((uint64_t *)v9, (WTF::Lock *)v3);
      if (!v8) {
        return;
      }
      goto LABEL_6;
    }
  }
  else if (*(void *)(v3 + 24))
  {
    goto LABEL_4;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v3, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != 1) {
    goto LABEL_34;
  }
LABEL_5:
  if (!v8) {
    return;
  }
LABEL_6:
  if (!*(unsigned char *)(*(void *)(a2 + 8) + 104))
  {
    WebGPU::Queue::ensureBlitCommandEncoder(this);
    WebGPU::CommandEncoder::clearTextureIfNeeded(*(uint32x2_t **)(a2 + 8), *(unsigned int *)(a2 + 16), a3, v8, *((void **)this + 3));
    goto LABEL_19;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  char v11 = v33;
  uint64_t v32 = v33;
  uint64_t v12 = *((void *)v8 + 4);
  uint64_t v13 = 32 * *((unsigned int *)v8 + 11);
  uint64_t v14 = v12 + v13;
  while (v13)
  {
    int v15 = *(_DWORD *)(v14 - 8);
    v14 -= 32;
    v13 -= 32;
    if (!v15)
    {
      uint64_t v16 = v12 + v13;
      if (!*(unsigned char *)(v16 + 16))
      {
        uint64_t v32 = 0;
        *(_DWORD *)uint64_t v16 = 1;
        *(void *)(v16 + ++*(_DWORD *)(result + 8) = v11;
        *(unsigned char *)(v16 + 16) = 1;
      }
      goto LABEL_16;
    }
  }
  uint64_t v17 = *((void *)v8 + 3);
  if (v17)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v17 + 16))(v17, 1, &v32);
    uint64_t v18 = *((void *)v8 + 3);
    *((void *)v8 + 3) = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
LABEL_16:
  char v19 = v32;
  uint64_t v32 = 0;
  if (!v19)
  {
LABEL_19:
    char v20 = 0;
    uint64_t v21 = *(void *)v8;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v20, 1u, memory_order_acquire, memory_order_acquire);
    if (!v20) {
      goto LABEL_20;
    }
    goto LABEL_25;
  }
  if (*v19 != 2)
  {
    *v19 -= 2;
    goto LABEL_19;
  }
  WTF::StringImpl::destroy();
  char v27 = 0;
  uint64_t v21 = *(void *)v8;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v27, 1u, memory_order_acquire, memory_order_acquire);
  if (!v27)
  {
LABEL_20:
    uint64_t v22 = *(void *)(v21 + 8);
    uint64_t v23 = 1;
    uint64_t v24 = v22 - 1;
    *(void *)(v21 + ++*(_DWORD *)(result + 8) = v22 - 1;
    if (v22 != 1) {
      goto LABEL_21;
    }
    goto LABEL_26;
  }
LABEL_25:
  MEMORY[0x18530AEA0](v21);
  uint64_t v28 = *(void *)(v21 + 8);
  uint64_t v23 = 1;
  uint64_t v24 = v28 - 1;
  *(void *)(v21 + ++*(_DWORD *)(result + 8) = v28 - 1;
  if (v28 != 1)
  {
LABEL_21:
    BOOL v25 = 0;
    BOOL v26 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
    if (v23 == 1) {
      goto LABEL_22;
    }
LABEL_27:
    WTF::Lock::unlockSlow((uint64_t *)v23, (WTF::Lock *)v21);
    if (v24) {
      return;
    }
    goto LABEL_28;
  }
LABEL_26:
  uint64_t v29 = *(void *)(v21 + 16);
  BOOL v25 = *(WebGPU::Device **)(v21 + 24);
  *(void *)(v21 + 24) = 0;
  BOOL v26 = v29 != 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v21, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
  if (v23 != 1) {
    goto LABEL_27;
  }
LABEL_22:
  if (v24) {
    return;
  }
LABEL_28:
  if (v25)
  {
    WebGPU::Device::~Device(v25, v10);
    WTF::fastFree(v30, v31);
  }
  if (!v26) {
    WTF::fastFree((WTF *)v21, v10);
  }
}

void sub_1825090A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  if (a9)
  {
    if (*a9 == 2)
    {
      WTF::StringImpl::destroy();
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v9, v11);
      _Unwind_Resume(a1);
    }
    *a9 -= 2;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v9, a2);
    _Unwind_Resume(a1);
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v9, a2);
  _Unwind_Resume(a1);
}

void WebGPU::Queue::writeTexture(WebGPU::Queue *a1, _DWORD *a2, uint64_t a3, unint64_t a4, unint64_t a5, unsigned int *a6)
{
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6) {
    return;
  }
  char v13 = 0;
  uint64_t v14 = *((void *)a1 + 5);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v13, 1u, memory_order_acquire, memory_order_acquire);
  if (v13)
  {
    MEMORY[0x18530AEA0](v6);
    if (*(void *)(v6 + 24))
    {
LABEL_4:
      ++*(void *)(v6 + 8);
      uint64_t v15 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v15, 0, memory_order_release, memory_order_relaxed);
      if (v15 == 1) {
        goto LABEL_5;
      }
      goto LABEL_99;
    }
  }
  else if (*(void *)(v6 + 24))
  {
    goto LABEL_4;
  }
  uint64_t v14 = 0;
  uint64_t v15 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v15, 0, memory_order_release, memory_order_relaxed);
  if (v15 == 1)
  {
LABEL_5:
    if (*(void *)a2 | *(void *)a5) {
      goto LABEL_338;
    }
    goto LABEL_6;
  }
LABEL_99:
  WTF::Lock::unlockSlow((uint64_t *)v15, (WTF::Lock *)v6);
  if (*(void *)a2 | *(void *)a5)
  {
LABEL_338:
    if (!v14) {
      return;
    }
    goto LABEL_339;
  }
LABEL_6:
  if (!v14) {
    return;
  }
  uint64_t v16 = (uint32x2_t *)*((void *)a2 + 1);
  if (!v16[13].i8[0])
  {
    uint64_t v23 = v16[6].u32[0];
    if ((v23 - 38) <= 5)
    {
      int v24 = a2[8];
      switch(v24)
      {
        case 0x7FFFFFFF:
          goto LABEL_45;
        case 2:
          if ((v23 - 39) < 5)
          {
            uint64_t v23 = dword_1826CEC28[(int)v23 - 39];
            break;
          }
          goto LABEL_45;
        case 1:
          if (v23 <= 0x2B && ((1 << v23) & 0xA4000000000) != 0)
          {
            uint64_t v23 = 38;
            break;
          }
LABEL_45:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          *(void *)&long long v264 = v261;
          WebGPU::Device::generateAValidationError(v14, (uint64_t *)&v264);
          char v27 = (int *)v264;
          *(void *)&long long v264 = 0;
          if (!v27) {
            goto LABEL_339;
          }
          int v28 = *v27 - 2;
          if (*v27 != 2) {
            goto LABEL_25;
          }
          goto LABEL_47;
      }
    }
    uint64_t v232 = v23;
    if (!*(void *)&v16[2]
      || (uint32x2_t v29 = v16[9], !*(void *)(*(void *)&v29 + 8))
      || (atomic_uchar *volatile *)v29 != WebGPU::Queue::device(a1, a2))
    {
      id v30 = @"destination texture is not valid";
      goto LABEL_32;
    }
    int v41 = WebGPU::Texture::errorValidatingImageCopyTexture((uint64_t)a2, a6);
    if (v41)
    {
LABEL_50:
      uint64_t v31 = [NSString stringWithFormat:@"GPUQueue.writeTexture: %@", v41];

      if (v31) {
        goto LABEL_33;
      }
      goto LABEL_51;
    }
    if ((v16[6].i8[4] & 2) == 0)
    {
      id v30 = @"texture usage does not contain CopyDst";
      goto LABEL_32;
    }
    if (v16[5].i32[0] == 1)
    {
      int v41 = WebGPU::Texture::errorValidatingTextureCopyRange((uint64_t)a2, a6);
      if (v41) {
        goto LABEL_50;
      }
      uint64_t v60 = v16[6].u32[0];
      int v61 = a2[8];
      if (WebGPU::Texture::refersToSingleAspect(v16[6].u32[0], v61))
      {
        if ((v60 - 38) > 5)
        {
LABEL_108:
          if (WebGPU::Texture::validateLinearTextureData(a5, a4, v60, *(void *)a6, a6[2])) {
            goto LABEL_51;
          }
          id v30 = @"validateLinearTextureData failed";
          goto LABEL_32;
        }
        if ((v60 - 38) < 2 || (v60 == 41 || v60 == 43) && v61 == 1)
        {
          uint64_t v60 = WebGPU::Texture::aspectSpecificFormat(v60, v61);
          goto LABEL_108;
        }
        id v30 = @"isValidDepthStencilCopyDestination failed";
      }
      else
      {
        id v30 = @"refersToSingleAspect failed";
      }
    }
    else
    {
      id v30 = @"destinationTexture sampleCount is not 1";
    }
LABEL_32:
    uint64_t v31 = [NSString stringWithFormat:@"GPUQueue.writeTexture: %@", v30];
    if (v31)
    {
LABEL_33:
      MEMORY[0x18530AF50](&v261, v31);
      uint64_t v32 = *(void *)(v14 + 32);
      uint64_t v33 = 32 * *(unsigned int *)(v14 + 44);
      uint64_t v34 = v32 + v33;
      while (v33)
      {
        int v35 = *(_DWORD *)(v34 - 8);
        v34 -= 32;
        v33 -= 32;
        if (!v35)
        {
          uint64_t v36 = v32 + v33;
          if (!*(unsigned char *)(v36 + 16))
          {
            uint64_t v37 = v261;
            *(void *)&long long v261 = 0;
            *(_DWORD *)uint64_t v36 = 1;
            *(void *)(v36 + ++*(_DWORD *)(result + 8) = v37;
            *(unsigned char *)(v36 + 16) = 1;
          }
          goto LABEL_41;
        }
      }
      uint64_t v38 = *(void *)(v14 + 24);
      if (v38)
      {
        (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v38 + 16))(v38, 1, &v261);
        uint64_t v39 = *(void *)(v14 + 24);
        *(void *)(v14 + 24) = 0;
        if (v39) {
          (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
        }
      }
LABEL_41:
      uint64_t v40 = (_DWORD *)v261;
      *(void *)&long long v261 = 0;
      if (v40)
      {
        if (*v40 == 2)
        {
          WTF::StringImpl::destroy();

          goto LABEL_339;
        }
        *v40 -= 2;
      }

      goto LABEL_339;
    }
LABEL_51:
    if (!a4) {
      goto LABEL_339;
    }
    if (a4 <= *(void *)(a5 + 8)) {
      goto LABEL_339;
    }
    WebGPU::Texture::texelBlockSize(v232, (int *)&v261);
    unint64_t v42 = v261;
    unint64_t v43 = WebGPU::Texture::logicalMiplevelSpecificTextureExtent(v16, a2[4]);
    long long v220 = a2;
    LODWORD(v44) = a2[5];
    unint64_t v226 = v43;
    BOOL v74 = v43 >= v44;
    LODWORD(v44) = v43 - v44;
    if (!v74) {
      goto LABEL_339;
    }
    uint64_t v44 = v44 >= *a6 ? *a6 : v44;
    uint64_t v213 = v44;
    if (!v44) {
      goto LABEL_339;
    }
    unint64_t v212 = v42;
    unsigned int v46 = a2[6];
    unsigned int v45 = a2[7];
    unsigned int v47 = a2 - v45;
    unint64_t v48 = a6[1];
    if (a2 - v45 >= a6[2]) {
      unsigned int v47 = a6[2];
    }
    if (a2 >= v45) {
      uint64_t v49 = v47;
    }
    else {
      uint64_t v49 = 0;
    }
    uint64_t v208 = v49;
    unint64_t v209 = HIDWORD(v43);
    LODWORD(v49) = HIDWORD(v43) - v46;
    if (HIDWORD(v43) - v46 >= v48) {
      LODWORD(v49) = a6[1];
    }
    if (HIDWORD(v43) >= v46) {
      uint64_t v49 = v49;
    }
    else {
      uint64_t v49 = 0;
    }
    uint64_t v210 = v49;
    unsigned int v50 = *(_DWORD *)(a5 + 16);
    if (v50 == -1)
    {
      LODWORD(v51) = a4;
      if (v48) {
        unint64_t v51 = a4 / v48;
      }
      unsigned int v52 = WebGPU::Texture::bytesPerRow(v232, v213, v16[5].u32[0]);
      if (v51 <= v52) {
        unsigned int v50 = v52;
      }
      else {
        unsigned int v50 = v51;
      }
    }
    __int32 v53 = v16[5].i32[1];
    if ((v53 - 1) >= 2)
    {
      if (v53) {
        goto LABEL_85;
      }
      unint64_t v54 = v212 * (unint64_t)*(unsigned int *)(v14 + 88);
      if ((v54 & 0xFFFFFFFF00000000) != 0) {
        goto LABEL_85;
      }
    }
    else
    {
      unint64_t v54 = v212 * (unint64_t)*(unsigned int *)(v14 + 92);
      if ((v54 & 0xFFFFFFFF00000000) != 0)
      {
LABEL_85:
        unsigned int v55 = v50;
        goto LABEL_89;
      }
    }
    if (v54 >= v50) {
      unsigned int v55 = v50;
    }
    else {
      unsigned int v55 = v54;
    }
LABEL_89:
    unsigned int v56 = *(_DWORD *)(a5 + 20);
    if (v56 == -1) {
      unsigned int v56 = v48;
    }
    unint64_t v57 = v55 * (unint64_t)v56;
    if ((v57 & 0xFFFFFFFF00000000) != 0) {
      goto LABEL_339;
    }
    int v58 = a2[8];
    if (v58 == 0x7FFFFFFF) {
      goto LABEL_339;
    }
    unsigned int v199 = v57;
    if (v58 == 2)
    {
      char v198 = 0;
      uint64_t v59 = 1;
    }
    else
    {
      if (v58 != 1)
      {
        uint64_t v197 = 0;
        char v198 = 1;
LABEL_113:
        unsigned int v201 = v55;
        id v207 = *(id *)&v16[2];
        int v62 = a6[2];
        __int32 v223 = v16[5].i32[1];
        if (v223 == 2) {
          int v62 = 1;
        }
        int v214 = v62;
        if (v62)
        {
          char v211 = 0;
          int v63 = 0;
          BOOL v65 = v213 == v226 && v210 == v209;
          BOOL v66 = v208 == v220 && v65;
          BOOL v203 = v66;
          BOOL __n = v65;
          while (1)
          {
            int v67 = a2[7];
            BOOL v74 = __CFADD__(v67, v63);
            unsigned int v68 = v67 + v63;
            if (v74) {
              goto LABEL_337;
            }
            if (v223 == 2) {
              unint64_t v69 = 0;
            }
            else {
              unint64_t v69 = v68;
            }
            int v217 = a2[4];
            unint64_t v230 = v69;
            if (WebGPU::Texture::previouslyCleared((WebGPU::Texture *)v16, v217, v69)) {
              goto LABEL_127;
            }
            if (v223 == 2)
            {
              if (!v203) {
                goto LABEL_141;
              }
            }
            else if (v223 == 1)
            {
              if (!__n) {
                goto LABEL_141;
              }
            }
            else if (v223 || v213 != v226)
            {
LABEL_141:
              WebGPU::Queue::clearTextureIfNeeded(a1, (uint64_t)a2, v230);
              char v211 = 1;
              goto LABEL_127;
            }
            WebGPU::Texture::setPreviouslyCleared((uint64_t *)v16, v217, v230, 1);
LABEL_127:
            if (v214 == ++v63) {
              goto LABEL_143;
            }
          }
        }
        char v211 = 0;
LABEL_143:
        if (v212 >> 21) {
          goto LABEL_337;
        }
        unint64_t v70 = v212 << 11;
        unint64_t v231 = v201;
        if (v223 != 2) {
          unint64_t v70 = v201;
        }
        unint64_t v215 = v70;
        BOOL isCompressedFormat = WebGPU::Texture::isCompressedFormat(v232);
        unsigned int v218 = WebGPU::Texture::texelBlockHeight(v232);
        unsigned int v72 = WebGPU::Texture::texelBlockWidth(v232);
        if (!isCompressedFormat)
        {
          BOOL v74 = v201 == (v201 / v212) * (unint64_t)v212 && v215 >= v201;
          if (!v74)
          {
            LODWORD(v267) = *a6;
            HIDWORD(v267) = v218;
            int v268 = 1;
            if (v223 && (v210 > v218 || v208 >= 2))
            {
              long long v264 = 0uLL;
              if (*(_DWORD *)(a5 + 16) >= v215) {
                int v94 = v215;
              }
              else {
                int v94 = *(_DWORD *)(a5 + 16);
              }
              int v265 = v94;
              unsigned int v266 = v218;
              if (v72) {
                unsigned int v95 = v213 / v72;
              }
              else {
                unsigned int v95 = 0;
              }
              unsigned int v105 = 0;
              unint64_t v221 = v95 * (unint64_t)v212;
              if (v208 <= 1) {
                int v106 = 1;
              }
              else {
                int v106 = v208;
              }
              int v224 = v106;
              while (1)
              {
                long long v107 = *((_OWORD *)a2 + 1);
                long long v261 = *(_OWORD *)a2;
                long long v262 = v107;
                uint64_t v263 = *((void *)a2 + 4);
                int v108 = a2[7];
                BOOL v74 = __CFADD__(v108, v105);
                int v109 = v108 + v105;
                if (v74) {
                  goto LABEL_337;
                }
                HIDWORD(v262) = v109;
                unint64_t v228 = v105 * (unint64_t)v199;
                if ((v228 & 0xFFFFFFFF00000000) != 0)
                {
                  if (v210)
                  {
                    DWORD2(v262) = a2[6];
                    if (!__CFADD__(DWORD2(v262), v218)) {
                      goto LABEL_337;
                    }
LABEL_388:
                    __break(0xC471u);
                    JUMPOUT(0x18250A508);
                  }
                }
                else
                {
                  unsigned int v234 = 0;
                  while (v234 < v210)
                  {
                    int v110 = a2[6];
                    BOOL v74 = __CFADD__(v110, v234);
                    int v111 = v110 + v234;
                    if (v74) {
                      goto LABEL_337;
                    }
                    DWORD2(v262) = v111;
                    BOOL v74 = __CFADD__(v111, v218);
                    unsigned int v112 = v111 + v218;
                    if (v74) {
                      goto LABEL_388;
                    }
                    BOOL v74 = v112 >= v209;
                    unsigned int v113 = v112 - v209;
                    if (v113 != 0 && v74)
                    {
                      HIDWORD(v267) = v113;
                      unsigned int v218 = v113;
                    }
                    unint64_t v114 = v201 * (unint64_t)v218;
                    if ((v114 & 0xFFFFFFFF00000000) == 0)
                    {
                      a5 = v234 + 1 == v210 ? v221 : v114;
                      unint64_t v115 = v201 * (unint64_t)v234;
                      BOOL v116 = (v115 & 0xFFFFFFFF00000000) != 0;
                      int v117 = v115 + v228;
                      BOOL v118 = __CFADD__(v115, v228);
                      if (!v116 && !v118 && !HIDWORD(a5))
                      {
                        int v119 = 0;
                        do
                        {
                          int v120 = a2[5];
                          BOOL v74 = __CFADD__(v120, v119);
                          int v121 = v120 + v119;
                          if (v74) {
                            goto LABEL_337;
                          }
                          DWORD1(v262) = v121;
                          unsigned int v122 = v119 + v117;
                          if (__CFADD__(v119, v117) || __CFADD__(v122, a5) || a4 < v122 + a5) {
                            goto LABEL_337;
                          }
                          if (a4 < v122 || a4 - v122 < a5) {
                            goto LABEL_385;
                          }
                          WebGPU::Queue::writeTexture(a1, &v261, a3 + v122, a5, &v264, &v267);
                          unsigned int v123 = v119 + v215;
                          if (__CFADD__(v119, v215)) {
                            goto LABEL_337;
                          }
                          v119 += v215;
                        }
                        while (v123 < v213);
                        unsigned int v218 = HIDWORD(v267);
                        BOOL v74 = __CFADD__(v234, HIDWORD(v267));
                        v234 += HIDWORD(v267);
                        if (!v74) {
                          continue;
                        }
                      }
                    }
                    goto LABEL_337;
                  }
                }
                if (++v105 == v224) {
                  goto LABEL_337;
                }
              }
            }
            unsigned int v199 = 0;
            unint64_t v231 = 0;
          }
        }
        if (v223 == 0x7FFFFFFF) {
          goto LABEL_337;
        }
        if (v223 == 2)
        {
          if (!v210 || !v208) {
            goto LABEL_337;
          }
        }
        else if (v223 == 1 && !v210)
        {
LABEL_337:

          goto LABEL_338;
        }
        long long v261 = 0uLL;
        unsigned int v75 = v213 / v72;
        if (v213 % v72) {
          ++v75;
        }
        unint64_t v76 = v212 * (unint64_t)v75;
        if ((v76 & 0xFFFFFFFF00000000) != 0) {
          unsigned int v77 = 0;
        }
        else {
          unsigned int v77 = v212 * v75;
        }
        if ((v76 & 0xFFFFFFFF00000000) != 0) {
          goto LABEL_335;
        }
        unsigned int v204 = v77;
        uint64_t v216 = v199;
        size_t __na = v76;
        if ((v213 == v226 && v231 != v76 && v210 == v209
           || v231 != (v231 / v212) * (unint64_t)v212)
          && isCompressedFormat)
        {
          if (v218 <= v210) {
            unsigned int v82 = v210;
          }
          else {
            unsigned int v82 = v218;
          }
          unsigned int v83 = v209 / v218;
          if (v209 % v218) {
            ++v83;
          }
          if (v218 > v83) {
            unsigned int v83 = v218;
          }
          unint64_t v202 = v76 * (unint64_t)v83;
          if ((v202 & 0xFFFFFFFF00000000) != 0) {
            goto LABEL_335;
          }
          unsigned int v84 = a6[2];
          uint64_t v85 = v84 <= 1 ? 1 : v84;
          uint64_t v200 = v85;
          unint64_t v86 = v202 * (unint64_t)v85;
          if ((v86 & 0xFFFFFFFF00000000) != 0) {
            goto LABEL_335;
          }
          WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize((void **)&v261, (WTF *)v86);
          size_t v196 = HIDWORD(v261);
          if (!HIDWORD(v261))
          {
            __break(0xC471u);
            JUMPOUT(0x18250A5C0);
          }
          uint64_t v87 = v82 / v218;
          *(void *)long long v219 = v261;
          bzero((void *)v261, HIDWORD(v261));
          uint64_t v195 = v87;
          unint64_t v88 = v87 - 1;
          if (!is_mul_ok(v87 - 1, v231)) {
            goto LABEL_388;
          }
          unsigned int v89 = v200 - 1;
          if (__CFADD__(v88 * v231, v76 + (v200 - 1) * v216))
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            uint64_t v267 = (_DWORD *)v264;
            WebGPU::Device::generateAValidationError(v14, (uint64_t *)&v267);
            BOOL v90 = v267;
            uint64_t v267 = 0;
            if (v90)
            {
              if (*v90 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *v90 -= 2;
              }
            }
            goto LABEL_335;
          }
          BOOL v124 = HIDWORD(v88) != 0;
          unint64_t v125 = v88 * (unint64_t)v76;
          unint64_t v126 = v89 * (unint64_t)v202;
          unint64_t v127 = v88 * (unint64_t)v231;
          BOOL v128 = (v127 & 0xFFFFFFFF00000000) != 0;
          if ((v127 & 0xFFFFFFFF00000000) != 0) {
            BOOL v124 = 1;
          }
          if (v124) {
            int v129 = 0;
          }
          else {
            int v129 = v88 * v231;
          }
          unint64_t v130 = v89 * (unint64_t)v216;
          if ((v130 & 0xFFFFFFFF00000000) == 0
            && !HIDWORD(v88)
            && (v125 & 0xFFFFFFFF00000000) == 0
            && (v126 & 0xFFFFFFFF00000000) == 0
            && !v128)
          {
            BOOL v74 = __CFADD__(v126, v76);
            int v131 = v126 + v76;
            int v132 = v74;
            BOOL v133 = __CFADD__(v125, v131);
            unsigned int v134 = v125 + v131;
            BOOL v135 = v133;
            int v136 = v133 ? 1 : v132;
            unint64_t v137 = *(void *)(a5 + 8);
            if (!HIDWORD(v137))
            {
              int v138 = v137 + v76;
              if (!__CFADD__(v137, v76))
              {
                BOOL v74 = __CFADD__(v130, v138);
                int v139 = v130 + v138;
                if (!v74)
                {
                  BOOL v74 = __CFADD__(v129, v139);
                  unint64_t v140 = (v129 + v139);
                  int v141 = v74 ? 1 : v132;
                  if (((v141 | v135) & 1) == 0)
                  {
                    if (((v134 > v196) & ~v136) == 0 && a4 >= v140)
                    {
                      uint64_t v142 = 0;
LABEL_298:
                      unint64_t v143 = v142 * (unint64_t)v216;
                      BOOL v144 = (v143 & 0xFFFFFFFF00000000) != 0;
                      if ((v143 & 0xFFFFFFFF00000000) != 0) {
                        LODWORD(v143) = 0;
                      }
                      int v229 = v143;
                      unint64_t v145 = v142 * (unint64_t)v202;
                      BOOL v146 = (v145 & 0xFFFFFFFF00000000) != 0;
                      if ((v145 & 0xFFFFFFFF00000000) != 0) {
                        LODWORD(v145) = 0;
                      }
                      int v222 = v145;
                      if (!v146 && !v144)
                      {
                        uint64_t v147 = 0;
                        while (1)
                        {
                          unint64_t v148 = v147 * (unint64_t)v231;
                          BOOL v149 = (v148 & 0xFFFFFFFF00000000) != 0;
                          if ((v148 & 0xFFFFFFFF00000000) != 0) {
                            LODWORD(v14++*(_DWORD *)(result + 8) = 0;
                          }
                          unint64_t v150 = v147 * (unint64_t)v204;
                          if ((v150 & 0xFFFFFFFF00000000) != 0) {
                            break;
                          }
                          if (v149) {
                            break;
                          }
                          unint64_t v151 = *(void *)(a5 + 8);
                          if (HIDWORD(v151)) {
                            break;
                          }
                          BOOL v74 = __CFADD__(v229, v151);
                          int v152 = v229 + v151;
                          if (v74) {
                            break;
                          }
                          BOOL v74 = __CFADD__(v148, v152);
                          unint64_t v153 = (v148 + v152);
                          if (v74) {
                            break;
                          }
                          BOOL v74 = __CFADD__(v150, v222);
                          uint64_t v154 = (v150 + v222);
                          if (v74) {
                            break;
                          }
                          if (a4 < v153
                            || a4 - v153 < __na
                            || v196 < v154
                            || v196 - v154 < __na)
                          {
                            goto LABEL_385;
                          }
                          memcpy((void *)(*(void *)v219 + v154), (const void *)(a3 + v153), __na);
                          if (v195 == ++v147)
                          {
                            if (++v142 != v200) {
                              goto LABEL_298;
                            }
                            a5 = 0;
                            a4 = v196;
                            unint64_t v231 = __na;
                            uint64_t v216 = v202;
                            if (*((void *)a1 + 6) == *((void *)a1 + 7)) {
                              goto LABEL_202;
                            }
                            goto LABEL_205;
                          }
                        }
                      }
                      goto LABEL_335;
                    }
                    objc_msgSend(NSString, "stringWithFormat:", @"y(%zu) * newBytesPerRow(%u) + z(%zu) * newBytesPerImage(%u) + newBytesPerRow(%u) > newData.size()(%zu) || y(%zu) * bytesPerRow(%lu) + z(%zu) * bytesPerImage(%lu) + newBytesPerRow(%u) > dataSize(%zu), copySize %u, %u, %u, textureSize %u, %u, %u, offset %llu", v87 - 1, v76, v200 - 1, v202, v76, v196, v87 - 1, v231, v200 - 1, v216, v76, a4, v213, v210, v208, v226,
                      v209,
                      v220,
                    a5 = v137);
                    MEMORY[0x18530AF50](&v264, a5);
                    WebGPU::Device::generateAValidationError(v14, (uint64_t *)&v264);
                    long long v194 = (_DWORD *)v264;
                    *(void *)&long long v264 = 0;
                    if (!v194) {
                      goto LABEL_334;
                    }
                    if (*v194 != 2)
                    {
                      *v194 -= 2;
                      goto LABEL_334;
                    }
LABEL_386:
                    WTF::StringImpl::destroy();
                    goto LABEL_334;
                  }
                }
              }
            }
          }
LABEL_335:
          long long v166 = (WTF *)v261;
          if ((void)v261)
          {
            *(void *)&long long v261 = 0;
            WTF::fastFree(v166, v73);
          }
          goto LABEL_337;
        }
        a5 = *(void *)(a5 + 8);
        *(void *)long long v219 = a3;
        if (*((void *)a1 + 6) == *((void *)a1 + 7))
        {
LABEL_202:
          if (!((*((void *)a1 + 3) != 0 || (v198 & 1) == 0) | v211 & 1))
          {
            uint64_t v91 = [v207 storageMode];
            if (!v91)
            {
              if (v223 != 2)
              {
                if (v223 == 1)
                {
                  if (v210)
                  {
                    unint64_t v184 = a6[2];
                    if (v184)
                    {
                      unint64_t v185 = 0;
                      uint64_t v186 = *(void *)(a2 + 5);
                      *(void *)&long long v187 = v186;
                      *((void *)&v187 + 1) = HIDWORD(v186);
                      long long v237 = v187;
                      do
                      {
                        unint64_t v188 = v185 * (unint64_t)v216;
                        if ((v188 & 0xFFFFFFFF00000000) != 0) {
                          break;
                        }
                        BOOL v74 = __CFADD__(a5, v188);
                        unint64_t v189 = a5 + v188;
                        if (v74) {
                          break;
                        }
                        if (!(v189 % v212))
                        {
                          uint64_t v190 = v185 + a2[7];
                          long long v252 = v237;
                          uint64_t v253 = 0;
                          uint64_t v254 = v213;
                          uint64_t v255 = v210;
                          uint64_t v256 = 1;
                          [v207 replaceRegion:&v252 mipmapLevel:a2[4] slice:v190 withBytes:*(void *)v219 + v189 bytesPerRow:v231 bytesPerImage:0];
                          unint64_t v184 = a6[2];
                        }
                        ++v185;
                      }
                      while (v185 < v184);
                    }
                  }
                }
                else if (!v223)
                {
                  uint64_t v178 = a2[5];
                  long long v264 = 0uLL;
                  unint64_t v179 = a6[2];
                  if (v179)
                  {
                    if (!HIDWORD(a5))
                    {
                      unint64_t v180 = 0;
                      int64x2_t v236 = vdupq_n_s64(1uLL);
                      do
                      {
                        unint64_t v181 = v180 * (unint64_t)v216;
                        if ((v181 & 0xFFFFFFFF00000000) != 0) {
                          break;
                        }
                        BOOL v74 = __CFADD__(a5, v181);
                        unint64_t v182 = (a5 + v181);
                        if (v74) {
                          break;
                        }
                        if (v182 == (v182 / v212) * (unint64_t)v212)
                        {
                          uint64_t v183 = a2[7];
                          long long v258 = v264;
                          uint64_t v257 = v178;
                          uint64_t v259 = v213;
                          int64x2_t v260 = v236;
                          if (a4 < v182) {
                            goto LABEL_385;
                          }
                          [v207 replaceRegion:&v257 mipmapLevel:a2[4] slice:v180 + v183 withBytes:*(void *)v219 + v182 bytesPerRow:0 bytesPerImage:0];
                          unint64_t v179 = a6[2];
                        }
                        ++v180;
                      }
                      while (v180 < v179);
                    }
                  }
                }
                goto LABEL_335;
              }
              if (!v210 || !v208 || a5 % v212) {
                goto LABEL_335;
              }
              uint64_t v191 = a2[7];
              uint64_t v192 = *(void *)(a2 + 5);
              *(void *)&long long v193 = v192;
              *((void *)&v193 + 1) = HIDWORD(v192);
              long long v247 = v193;
              uint64_t v248 = v191;
              uint64_t v249 = v213;
              uint64_t v250 = v210;
              uint64_t v251 = v208;
              if (a4 >= a5)
              {
                [v207 replaceRegion:&v247 mipmapLevel:a2[4] slice:0 withBytes:*(void *)v219 + a5 bytesPerRow:v231 bytesPerImage:v216];
                goto LABEL_335;
              }
              goto LABEL_385;
            }
            if (v91 != 2) {
              goto LABEL_335;
            }
          }
        }
LABEL_205:
        WebGPU::Queue::ensureBlitCommandEncoder(a1);
        uint64_t v92 = a4 - a5;
        unint64_t v227 = (a4 - a5) >> 25;
        if (v227)
        {
          if (a4 >= a5)
          {
            uint64_t v93 = WebGPU::Device::newBufferWithBytesNoCopy((id *)v14, (void *)(*(void *)v219 + a5), v92, 0);
LABEL_216:
            a5 = v93;
            if (v93)
            {
              int v96 = v16[5].i32[1];
              if (v96 <= 1)
              {
                if (v96)
                {
                  if (v96 == 1)
                  {
                    if (!v210 || v231 < WebGPU::Texture::bytesPerRow(v232, v213, v16[5].u32[0])) {
                      goto LABEL_334;
                    }
                    unint64_t v97 = a6[2];
                    if (v97)
                    {
                      unint64_t v98 = 0;
                      unint64_t v99 = 0;
                      uint64_t v100 = *(void *)(a2 + 5);
                      *(void *)&long long v101 = v100;
                      *((void *)&v101 + 1) = HIDWORD(v100);
                      long long v233 = v101;
                      do
                      {
                        if (!(v98 % v212))
                        {
                          uint64_t v102 = v99 + a2[7];
                          uint64_t v103 = (void *)*((void *)a1 + 3);
                          v243[0] = v213;
                          v243[1] = v210;
                          v243[2] = 1;
                          uint64_t v104 = a2[4];
                          long long v241 = v233;
                          uint64_t v242 = 0;
                          [v103 copyFromBuffer:a5 sourceOffset:v98 sourceBytesPerRow:v231 sourceBytesPerImage:0 sourceSize:v243 toTexture:v207 destinationSlice:v102 destinationLevel:v104 destinationOrigin:&v241 options:v197];
                          unint64_t v97 = a6[2];
                        }
                        ++v99;
                        v98 += v216;
                      }
                      while (v99 < v97);
                    }
                  }
                }
                else if (a6[2])
                {
                  unint64_t v155 = 0;
                  unint64_t v156 = 0;
                  uint64_t v235 = a2[5];
                  unint64_t v157 = v213 * (unint64_t)v212;
                  int64x2_t v225 = vdupq_n_s64(1uLL);
                  while (!__CFADD__(v155, v157))
                  {
                    uint64_t v158 = a2[7];
                    if (v155 + v157 <= [(id)a5 length] && !(v155 % v212))
                    {
                      unint64_t v159 = (void *)*((void *)a1 + 3);
                      uint64_t v245 = v213;
                      int64x2_t v246 = v225;
                      uint64_t v160 = a2[4];
                      v244[0] = v235;
                      v244[1] = 0;
                      v244[2] = 0;
                      [v159 copyFromBuffer:a5 sourceOffset:v155 sourceBytesPerRow:0 sourceBytesPerImage:0 sourceSize:&v245 toTexture:v207 destinationSlice:v156 + v158 destinationLevel:v160 destinationOrigin:v244 options:v197];
                    }
                    ++v156;
                    v155 += v216;
                    if (v156 >= a6[2]) {
                      goto LABEL_332;
                    }
                  }
                  goto LABEL_334;
                }
LABEL_332:
                if (v227) {
                  WebGPU::Queue::finalizeBlitCommandEncoder(a1);
                }
                goto LABEL_334;
              }
              if (v96 == 2)
              {
                if (!v210) {
                  goto LABEL_334;
                }
                if (!v208) {
                  goto LABEL_334;
                }
                uint64_t v161 = *(void *)(a2 + 5);
                uint64_t v162 = a2[7];
                if (v231 < WebGPU::Texture::bytesPerRow(v232, v213, v16[5].u32[0])) {
                  goto LABEL_334;
                }
                *(void *)&long long v163 = v161;
                *((void *)&v163 + 1) = HIDWORD(v161);
                unsigned int v164 = (void *)*((void *)a1 + 3);
                v240[0] = v213;
                v240[1] = v210;
                v240[2] = v208;
                uint64_t v165 = a2[4];
                long long v238 = v163;
                uint64_t v239 = v162;
                [v164 copyFromBuffer:a5 sourceOffset:0 sourceBytesPerRow:v231 sourceBytesPerImage:v216 sourceSize:v240 toTexture:v207 destinationSlice:0 destinationLevel:v165 destinationOrigin:&v238 options:v197];
                goto LABEL_332;
              }
              if (v96 != 0x7FFFFFFF) {
                goto LABEL_332;
              }
            }
LABEL_334:

            goto LABEL_335;
          }
        }
        else if (a4 >= a5)
        {
          uint64_t v93 = WebGPU::Device::newBufferWithBytes((id *)v14, (const void *)(*(void *)v219 + a5), v92, 0);
          goto LABEL_216;
        }
LABEL_385:
        __break(1u);
        goto LABEL_386;
      }
      char v198 = 0;
      uint64_t v59 = 2;
    }
    uint64_t v197 = v59;
    goto LABEL_113;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v17 = v261;
  *(void *)&long long v264 = v261;
  uint64_t v18 = *(void *)(v14 + 32);
  uint64_t v19 = 32 * *(unsigned int *)(v14 + 44);
  uint64_t v20 = v18 + v19;
  while (v19)
  {
    int v21 = *(_DWORD *)(v20 - 8);
    v20 -= 32;
    v19 -= 32;
    if (!v21)
    {
      uint64_t v22 = v18 + v19;
      if (!*(unsigned char *)(v22 + 16))
      {
        *(void *)&long long v264 = 0;
        *(_DWORD *)uint64_t v22 = 1;
        *(void *)(v22 + ++*(_DWORD *)(result + 8) = v17;
        *(unsigned char *)(v22 + 16) = 1;
      }
      goto LABEL_23;
    }
  }
  uint64_t v25 = *(void *)(v14 + 24);
  if (v25)
  {
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v25 + 16))(v25, 1, &v264);
    uint64_t v26 = *(void *)(v14 + 24);
    *(void *)(v14 + 24) = 0;
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
    }
  }
LABEL_23:
  char v27 = (int *)v264;
  *(void *)&long long v264 = 0;
  if (v27)
  {
    int v28 = *v27 - 2;
    if (*v27 != 2)
    {
LABEL_25:
      int *v27 = v28;
      goto LABEL_339;
    }
LABEL_47:
    WTF::StringImpl::destroy();
  }
LABEL_339:
  char v167 = 0;
  id v168 = *(id *)v14;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v168, (unsigned __int8 *)&v167, 1u, memory_order_acquire, memory_order_acquire);
  if (v167)
  {
    MEMORY[0x18530AEA0](v168);
    uint64_t v176 = *((void *)v168 + 1);
    uint64_t v170 = 1;
    uint64_t v171 = v176 - 1;
    *((void *)v168 + 1) = v176 - 1;
    if (v176 != 1)
    {
LABEL_341:
      uint64_t v172 = 0;
      BOOL v173 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v168, (unsigned __int8 *)&v170, 0, memory_order_release, memory_order_relaxed);
      if (v170 == 1) {
        goto LABEL_342;
      }
LABEL_350:
      WTF::Lock::unlockSlow((uint64_t *)v170, (WTF::Lock *)v168);
      if (v171) {
        return;
      }
      goto LABEL_343;
    }
  }
  else
  {
    uint64_t v169 = *((void *)v168 + 1);
    uint64_t v170 = 1;
    uint64_t v171 = v169 - 1;
    *((void *)v168 + 1) = v169 - 1;
    if (v169 != 1) {
      goto LABEL_341;
    }
  }
  uint64_t v177 = *((void *)v168 + 2);
  uint64_t v172 = (WebGPU::Device *)*((void *)v168 + 3);
  *((void *)v168 + 3) = 0;
  BOOL v173 = v177 != 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v168, (unsigned __int8 *)&v170, 0, memory_order_release, memory_order_relaxed);
  if (v170 != 1) {
    goto LABEL_350;
  }
LABEL_342:
  if (v171) {
    return;
  }
LABEL_343:
  if (v172)
  {
    WebGPU::Device::~Device(v172, a2);
    WTF::fastFree(v174, v175);
  }
  if (!v173) {
    WTF::fastFree((WTF *)v168, a2);
  }
}

void sub_18250A5CC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  uint64_t v40 = *(WTF **)(v38 - 192);
  if (v40)
  {
    WTF::fastFree(v40, a2);

    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v37, v41);
    _Unwind_Resume(a1);
  }

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v37, v42);
  _Unwind_Resume(a1);
}

void sub_18250A6E0(_Unwind_Exception *a1)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v1, v4);
  _Unwind_Resume(a1);
}

void sub_18250A6F8(_Unwind_Exception *a1)
{
  uint64_t v5 = *(_DWORD **)(v3 - 192);
  *(void *)(v3 - 192) = 0;
  if (v5)
  {
    if (*v5 == 2)
    {
      WTF::StringImpl::destroy();

      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v1, v6);
      _Unwind_Resume(a1);
    }
    *v5 -= 2;
  }

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v1, v7);
  _Unwind_Resume(a1);
}

void sub_18250A744(_Unwind_Exception *a1, void *a2)
{
  uint64_t v5 = *(_DWORD **)(v3 - 152);
  *(void *)(v3 - 152) = 0;
  if (v5)
  {
    if (*v5 != 2)
    {
      *v5 -= 2;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v2, a2);
      _Unwind_Resume(a1);
    }
    WTF::StringImpl::destroy();
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v2, v6);
    _Unwind_Resume(a1);
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v2, a2);
  _Unwind_Resume(a1);
}

void **WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(void **result, WTF *a2)
{
  int v2 = (int)a2;
  uint64_t v3 = result;
  size_t v4 = *((unsigned int *)result + 3);
  if (v4 >= (unint64_t)a2 || (unint64_t v5 = *((unsigned int *)result + 2), v5 >= (unint64_t)a2))
  {
LABEL_14:
    *((_DWORD *)v3 + 3) = v2;
    return result;
  }
  unint64_t v6 = v5 + (v5 >> 2);
  if (v6 >= 0x10) {
    unint64_t v7 = v6 + 1;
  }
  else {
    unint64_t v7 = 16;
  }
  if (v7 <= (unint64_t)a2) {
    unint64_t v8 = (unint64_t)a2;
  }
  else {
    unint64_t v8 = v7;
  }
  if (!HIDWORD(v8))
  {
    uint64_t v9 = *result;
    uint64_t v10 = (void *)WTF::fastMalloc((WTF *)v8);
    *((_DWORD *)v3 + 2) = v8;
    *uint64_t v3 = v10;
    unint64_t result = (void **)memcpy(v10, v9, v4);
    if (v9)
    {
      if (*v3 == v9)
      {
        *uint64_t v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      unint64_t result = (void **)WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_14;
  }
  __break(0xC471u);
  return result;
}

void WebGPU::Queue::clearTextureViewIfNeeded(WebGPU::Queue *this, WebGPU::TextureView *a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (!v2) {
    return;
  }
  uint64_t v3 = a2;
  char v5 = 0;
  unint64_t v6 = (WebGPU::Device *)*((void *)this + 5);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5)
  {
    MEMORY[0x18530AEA0](v2);
    if (*(void *)(v2 + 24))
    {
LABEL_4:
      ++*(void *)(v2 + 8);
      int v7 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
      if (v7 == 1) {
        goto LABEL_5;
      }
      goto LABEL_39;
    }
  }
  else if (*(void *)(v2 + 24))
  {
    goto LABEL_4;
  }
  unint64_t v6 = 0;
  int v31 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v31, 0, memory_order_release, memory_order_relaxed);
  if (v31 == 1)
  {
LABEL_5:
    if (!v6) {
      return;
    }
    goto LABEL_6;
  }
LABEL_39:
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v6) {
    return;
  }
LABEL_6:
  unsigned int v8 = *((_DWORD *)v3 + 15);
  if (v8 && (unsigned int v9 = *((_DWORD *)v3 + 13)) != 0)
  {
    int v10 = 0;
    char v11 = (uint32x2_t *)*((void *)v3 + 12);
    int v12 = 1;
    while (!v12)
    {
LABEL_10:
      if (++v10 >= v8) {
        goto LABEL_24;
      }
    }
    int v13 = 0;
    while (1)
    {
      int v14 = *((_DWORD *)v3 + 12);
      uint64_t v15 = (v14 + v13);
      BOOL v16 = __CFADD__(v14, v13);
      int v17 = *((_DWORD *)v3 + 14);
      unint64_t v18 = (v17 + v10);
      BOOL v19 = __CFADD__(v17, v10);
      if (v16 || v19) {
        break;
      }
      if (!WebGPU::Texture::previouslyCleared((WebGPU::Texture *)v11, v15, v18))
      {
        WebGPU::Queue::ensureBlitCommandEncoder(this);
        WebGPU::CommandEncoder::clearTextureIfNeeded(v11, v15, v18, v6, *((void **)this + 3));
        unsigned int v9 = *((_DWORD *)v3 + 13);
      }
      if (++v13 >= v9)
      {
        unsigned int v8 = *((_DWORD *)v3 + 15);
        int v12 = v9;
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_24:
    a2 = (WebGPU::TextureView *)*((void *)this + 3);
    if (a2)
    {
      WebGPU::Queue::endEncoding((uint64_t)this, a2, *((void **)this + 2));
      WebGPU::Queue::commitMTLCommandBuffer((uint64_t)this, *((void **)this + 2));
      uint64_t v20 = (void *)*((void *)this + 3);
      *((void *)this + 3) = 0;

      int v21 = (void *)*((void *)this + 2);
      *((void *)this + 2) = 0;
    }
  }
  char v22 = 0;
  uint64_t v23 = *(void *)v6;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v23, (unsigned __int8 *)&v22, 1u, memory_order_acquire, memory_order_acquire);
  if (v22)
  {
    MEMORY[0x18530AEA0](v23);
    uint64_t v32 = *(void *)(v23 + 8);
    int v25 = 1;
    uint64_t v26 = v32 - 1;
    *(void *)(v23 + ++*(_DWORD *)(result + 8) = v32 - 1;
    if (v32 != 1)
    {
LABEL_28:
      char v27 = 0;
      BOOL v28 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v23, (unsigned __int8 *)&v25, 0, memory_order_release, memory_order_relaxed);
      if (v25 == 1) {
        goto LABEL_29;
      }
LABEL_43:
      WTF::Lock::unlockSlow((WTF::Lock *)v23);
      if (v26) {
        return;
      }
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v24 = *(void *)(v23 + 8);
    int v25 = 1;
    uint64_t v26 = v24 - 1;
    *(void *)(v23 + ++*(_DWORD *)(result + 8) = v24 - 1;
    if (v24 != 1) {
      goto LABEL_28;
    }
  }
  uint64_t v33 = *(void *)(v23 + 16);
  char v27 = *(WebGPU::Device **)(v23 + 24);
  *(void *)(v23 + 24) = 0;
  BOOL v28 = v33 != 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v23, (unsigned __int8 *)&v25, 0, memory_order_release, memory_order_relaxed);
  if (v25 != 1) {
    goto LABEL_43;
  }
LABEL_29:
  if (v26) {
    return;
  }
LABEL_30:
  if (v27)
  {
    WebGPU::Device::~Device(v27, a2);
    WTF::fastFree(v29, v30);
  }
  if (!v28)
  {
    WTF::fastFree((WTF *)v23, a2);
  }
}

void sub_18250AB20(_Unwind_Exception *a1, void *a2)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v2, a2);
  _Unwind_Resume(a1);
}

void sub_18250AB34(_Unwind_Exception *a1, void *a2)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Device,(WTF::DestructionThread)0>::deref(v2, a2);
  _Unwind_Resume(a1);
}

atomic_uint *wgpuQueueReference(atomic_uint *result)
{
  return result;
}

unsigned int *wgpuQueueRelease(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    WebGPU::Queue::~Queue((WebGPU::Queue *)result);
    return (unsigned int *)WTF::fastFree(v1, v2);
  }
  return result;
}

uint64_t wgpuQueueOnSubmittedWorkDone(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  *unint64_t v6 = &unk_1ECABB270;
  v6[1] = a2;
  unsigned char v6[2] = a3;
  unsigned int v9 = v6;
  WebGPU::Queue::onSubmittedWorkDone(a1, (uint64_t *)&v9);
  uint64_t result = (uint64_t)v9;
  if (v9)
  {
    unsigned int v8 = *(uint64_t (**)(void))(*v9 + 8);
    return v8();
  }
  return result;
}

void sub_18250AC54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void wgpuQueueSubmit(WebGPU::Queue *this, void *a2, uint64_t a3)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    LODWORD(v6) = 0;
    LODWORD(v7) = 0;
    unint64_t v8 = 0;
    unsigned int v9 = 0;
    while (1)
    {
      uint64_t v11 = *(void *)(a3 + 8 * v8);
      if (v7 == v6)
      {
        unint64_t v12 = v7 + ((unint64_t)v7 >> 2);
        if (v12 >= 0x10) {
          unint64_t v13 = v12 + 1;
        }
        else {
          unint64_t v13 = 16;
        }
        if (v13 <= (unint64_t)v7 + 1) {
          unint64_t v6 = v7 + 1;
        }
        else {
          unint64_t v6 = v13;
        }
        if (v6 >> 29)
        {
          __break(0xC471u);
          return;
        }
        int v10 = (char *)WTF::fastMalloc((WTF *)(8 * v6));
        memcpy(v10, v9, 8 * v7);
        if (v9)
        {
          if (v10 == v9)
          {
            LODWORD(v6) = 0;
            int v10 = 0;
          }
          WTF::fastFree((WTF *)v9, a2);
        }
      }
      else
      {
        int v10 = v9;
      }
      *(void *)&v10[8 * v7] = v11;
      unint64_t v7 = (v7 + 1);
      unint64_t v8 = v7;
      unsigned int v9 = v10;
      if (v7 >= (unint64_t)a2) {
        goto LABEL_18;
      }
    }
  }
  LODWORD(v7) = 0;
  int v10 = 0;
LABEL_18:
  uint64_t v14 = *((void *)this + 4);
  if (!v14) {
    goto LABEL_103;
  }
  char v15 = 0;
  uint64_t v16 = *((void *)this + 5);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v15, 1u, memory_order_acquire, memory_order_acquire);
  if (v15) {
    MEMORY[0x18530AEA0](v14);
  }
  if (*(void *)(v14 + 24))
  {
    ++*(void *)(v14 + 8);
    uint64_t v17 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v17, 0, memory_order_release, memory_order_relaxed);
    if (v17 == 1) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v17 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v17, 0, memory_order_release, memory_order_relaxed);
    if (v17 == 1)
    {
LABEL_23:
      if (!v16) {
        goto LABEL_103;
      }
      goto LABEL_24;
    }
  }
  WTF::Lock::unlockSlow((uint64_t *)v17, (WTF::Lock *)v14);
  if (!v16) {
    goto LABEL_103;
  }
LABEL_24:
  uint64_t v83 = v16;
  if (v7)
  {
    uint64_t v18 = 8 * v7;
    uint64_t v19 = v18;
    uint64_t v20 = v10;
    while (1)
    {
      uint64_t v21 = *(void *)v20;
      if (!*(void *)(*(void *)v20 + 16)) {
        break;
      }
      uint64_t v22 = *(void *)(v21 + 40);
      if (!*(void *)(v22 + 8)) {
        break;
      }
      if ((atomic_uchar *volatile *)v22 != WebGPU::Queue::device(this, a2)) {
        break;
      }
      if (*(_DWORD *)(v21 + 32)) {
        break;
      }
      id v23 = *(id *)(v21 + 16);
      unint64_t v24 = [v23 status];

      if (v24 > 1) {
        break;
      }
      v20 += 8;
      v19 -= 8;
      if (!v19) {
        goto LABEL_32;
      }
    }
    uint64_t v33 = (__CFString *)*(id *)(v21 + 48);
    uint64_t v34 = v33;
    int v35 = @"Validation failure.";
    if (v33) {
      int v35 = v33;
    }
    uint64_t v36 = v35;

    MEMORY[0x18530AF50](v90, v36);
    uint64_t v37 = *(void *)(v83 + 32);
    uint64_t v38 = 32 * *(unsigned int *)(v83 + 44);
    uint64_t v39 = v37 + v38;
    while (v38)
    {
      int v40 = *(_DWORD *)(v39 - 8);
      v39 -= 32;
      v38 -= 32;
      if (!v40)
      {
        uint64_t v41 = v37 + v38;
        if (!*(unsigned char *)(v41 + 16))
        {
          uint64_t v42 = v90[0];
          v90[0] = 0;
          *(_DWORD *)uint64_t v41 = 1;
          *(void *)(v41 + ++*(_DWORD *)(result + 8) = v42;
          *(unsigned char *)(v41 + 16) = 1;
        }
        goto LABEL_53;
      }
    }
    uint64_t v43 = *(void *)(v83 + 24);
    if (v43)
    {
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v43 + 16))(v43, 1, v90);
      uint64_t v44 = *(void *)(v83 + 24);
      *(void *)(v83 + 24) = 0;
      if (v44) {
        (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
      }
    }
LABEL_53:
    unsigned int v45 = (_DWORD *)v90[0];
    v90[0] = 0;
    if (v45)
    {
      if (*v45 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v45 -= 2;
      }
    }
    v90[0] = MEMORY[0x1E4F143A8];
    v90[1] = 3221225472;
    v90[2] = ___ZN6WebGPU5Queue6submitEON3WTF6VectorINSt3__117reference_wrapperINS_13CommandBufferEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEE_block_invoke;
    v90[3] = &unk_1E521BE50;
    BOOL v28 = v36;
    uint64_t v91 = v28;
    uint64_t v49 = (void (**)(void, void))MEMORY[0x18530B4C0](v90);
    unsigned int v50 = v10;
    do
    {
      v49[2](v49, *v50++);
      v18 -= 8;
    }
    while (v18);

    unint64_t v51 = v91;
  }
  else
  {
LABEL_32:
    int v25 = (void *)*((void *)this + 3);
    if (v25)
    {
      WebGPU::Queue::endEncoding((uint64_t)this, v25, *((void **)this + 2));
      WebGPU::Queue::commitMTLCommandBuffer((uint64_t)this, *((void **)this + 2));
      uint64_t v26 = (void *)*((void *)this + 3);
      *((void *)this + 3) = 0;

      char v27 = (void *)*((void *)this + 2);
      *((void *)this + 2) = 0;
    }
    BOOL v28 = [MEMORY[0x1E4F1CA70] orderedSetWithCapacity:v7];
    if (v7)
    {
      uint32x2_t v29 = (__CFString *)(8 * v7);
      id v30 = v10;
      while (1)
      {
        uint64_t v31 = *(void *)v30;
        id v32 = *(id *)(*(void *)v30 + 16);
        if (!v32 || ([(__CFString *)v28 containsObject:v32] & 1) != 0) {
          break;
        }
        [(__CFString *)v28 addObject:v32];

        v30 += 8;
        uint32x2_t v29 = (__CFString *)((char *)v29 - 8);
        if (!v29) {
          goto LABEL_64;
        }
      }
      unsigned int v46 = (__CFString *)*(id *)(v31 + 48);
      unsigned int v47 = v46;
      unint64_t v48 = @"Command buffer appears twice.";
      if (v46) {
        unint64_t v48 = v46;
      }
      uint32x2_t v29 = v48;
    }
    else
    {
      uint32x2_t v29 = 0;
    }
LABEL_64:
    v88[0] = MEMORY[0x1E4F143A8];
    v88[1] = 3221225472;
    v88[2] = ___ZN6WebGPU5Queue6submitEON3WTF6VectorINSt3__117reference_wrapperINS_13CommandBufferEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEE_block_invoke_2;
    v88[3] = &unk_1E521BE50;
    unint64_t v51 = v29;
    unsigned int v89 = v51;
    unsigned int v52 = (void (**)(void, void))MEMORY[0x18530B4C0](v88);
    if (v7)
    {
      uint64_t v53 = 8 * v7;
      unint64_t v54 = v10;
      do
      {
        v52[2](v52, *v54++);
        v53 -= 8;
      }
      while (v53);
    }

    if (v51)
    {
      MEMORY[0x18530AF50](v90, @"Command buffer appears twice.");
      uint64_t v55 = *(void *)(v83 + 32);
      uint64_t v56 = 32 * *(unsigned int *)(v83 + 44);
      uint64_t v57 = v55 + v56;
      while (v56)
      {
        int v58 = *(_DWORD *)(v57 - 8);
        v57 -= 32;
        v56 -= 32;
        if (!v58)
        {
          uint64_t v59 = v55 + v56;
          if (!*(unsigned char *)(v59 + 16))
          {
            uint64_t v60 = v90[0];
            v90[0] = 0;
            *(_DWORD *)uint64_t v59 = 1;
            *(void *)(v59 + ++*(_DWORD *)(result + 8) = v60;
            *(unsigned char *)(v59 + 16) = 1;
          }
          goto LABEL_89;
        }
      }
      uint64_t v69 = *(void *)(v83 + 24);
      if (v69)
      {
        (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v69 + 16))(v69, 1, v90);
        uint64_t v70 = *(void *)(v83 + 24);
        *(void *)(v83 + 24) = 0;
        if (v70) {
          (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
        }
      }
LABEL_89:
      uint64_t v71 = (_DWORD *)v90[0];
      v90[0] = 0;
      if (v71)
      {
        if (*v71 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v71 -= 2;
        }
      }
    }
    else
    {
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      int v61 = v28;
      uint64_t v62 = [(__CFString *)v61 countByEnumeratingWithState:&v84 objects:v90 count:16];
      if (v62)
      {
        uint64_t v63 = *(void *)v85;
        do
        {
          for (uint64_t i = 0; i != v62; ++i)
          {
            if (*(void *)v85 != v63) {
              objc_enumerationMutation(v61);
            }
            WebGPU::Queue::commitMTLCommandBuffer((uint64_t)this, *(void **)(*((void *)&v84 + 1) + 8 * i));
          }
          uint64_t v62 = [(__CFString *)v61 countByEnumeratingWithState:&v84 objects:v90 count:16];
        }
        while (v62);
      }

      BOOL v65 = [MEMORY[0x1E4F351E0] sharedCaptureManager];
      if ([v65 isCapturing])
      {
        BOOL v66 = WebGPU::GPUFrameCapture::submitCallsCaptured + 1 < WebGPU::GPUFrameCapture::maxSubmitCallsToCapture;
        if (WebGPU::GPUFrameCapture::submitCallsCaptured + 1 < WebGPU::GPUFrameCapture::maxSubmitCallsToCapture) {
          int v67 = WebGPU::GPUFrameCapture::submitCallsCaptured + 1;
        }
        else {
          int v67 = 0;
        }
        WebGPU::GPUFrameCapture::submitCallsCaptured = v67;

        if (!v66)
        {
          unsigned int v68 = [MEMORY[0x1E4F351E0] sharedCaptureManager];
          [v68 stopCapture];
        }
      }
      else
      {
      }
    }
  }
  char v72 = 0;
  atomic_uchar *volatile v73 = *(atomic_uchar *volatile *)v83;
  atomic_compare_exchange_strong_explicit(*(atomic_uchar *volatile *)v83, (unsigned __int8 *)&v72, 1u, memory_order_acquire, memory_order_acquire);
  if (v72)
  {
    MEMORY[0x18530AEA0](v73);
    uint64_t v81 = *((void *)v73 + 1);
    uint64_t v75 = 1;
    uint64_t v76 = v81 - 1;
    *((void *)v73 + 1) = v81 - 1;
    if (v81 != 1)
    {
LABEL_97:
      unsigned int v77 = 0;
      BOOL v78 = 1;
      atomic_compare_exchange_strong_explicit(v73, (unsigned __int8 *)&v75, 0, memory_order_release, memory_order_relaxed);
      if (v75 == 1) {
        goto LABEL_98;
      }
LABEL_110:
      WTF::Lock::unlockSlow((uint64_t *)v75, (WTF::Lock *)v73);
      if (!v76) {
        goto LABEL_99;
      }
      goto LABEL_103;
    }
  }
  else
  {
    uint64_t v74 = *((void *)v73 + 1);
    uint64_t v75 = 1;
    uint64_t v76 = v74 - 1;
    *((void *)v73 + 1) = v74 - 1;
    if (v74 != 1) {
      goto LABEL_97;
    }
  }
  uint64_t v82 = *((void *)v73 + 2);
  unsigned int v77 = (WebGPU::Device *)*((void *)v73 + 3);
  *((void *)v73 + 3) = 0;
  BOOL v78 = v82 != 0;
  atomic_compare_exchange_strong_explicit(v73, (unsigned __int8 *)&v75, 0, memory_order_release, memory_order_relaxed);
  if (v75 != 1) {
    goto LABEL_110;
  }
LABEL_98:
  if (!v76)
  {
LABEL_99:
    if (v77)
    {
      WebGPU::Device::~Device(v77, a2);
      WTF::fastFree(v79, v80);
    }
    if (!v78) {
      WTF::fastFree((WTF *)v73, a2);
    }
  }
LABEL_103:
  if (v10)
  {
    WTF::fastFree((WTF *)v10, a2);
  }
}

void sub_18250B494(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (v29)
  {
    WTF::fastFree(v29, a2);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void wgpuQueueWriteBuffer(WebGPU::Queue *this, uint64_t a2, unint64_t a3, const void *a4, unint64_t a5)
{
  uint64_t v5 = *((void *)this + 4);
  if (!v5) {
    return;
  }
  char v11 = 0;
  uint64_t v12 = *((void *)this + 5);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
  if (v11)
  {
    MEMORY[0x18530AEA0](v5);
    if (*(void *)(v5 + 24))
    {
LABEL_4:
      ++*(void *)(v5 + 8);
      uint64_t v13 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
      if (v13 == 1) {
        goto LABEL_5;
      }
      goto LABEL_48;
    }
  }
  else if (*(void *)(v5 + 24))
  {
    goto LABEL_4;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
  if (v13 == 1)
  {
LABEL_5:
    if (!v12) {
      return;
    }
    goto LABEL_6;
  }
LABEL_48:
  WTF::Lock::unlockSlow((uint64_t *)v13, (WTF::Lock *)v5);
  if (!v12) {
    return;
  }
LABEL_6:
  if (*(unsigned char *)(a2 + 52) != 4 && !*(void *)(a2 + 16)
    || (uint64_t v14 = *(void *)(a2 + 280), !*(void *)(v14 + 8))
    || (atomic_uchar *volatile *)v14 != WebGPU::Queue::device(this, (void *)a2)
    || *(unsigned char *)(a2 + 52) != 3
    || ((a5 | a3) & 3) != 0
    || (*(_DWORD *)(a2 + 48) & 8) == 0
    || __CFADD__(a3, a5)
    || a3 + a5 > [*(id *)(a2 + 16) length]
    || *(unsigned char *)(a2 + 52) != 4 && !*(void *)(a2 + 16)
    || (uint64_t v16 = *(void *)(a2 + 280), !*(void *)(v16 + 8))
    || (atomic_uchar *volatile *)v16 != WebGPU::Queue::device(this, v15))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v18 = v46;
    unsigned int v45 = v46;
    uint64_t v19 = *(void *)(v12 + 32);
    uint64_t v20 = 32 * *(unsigned int *)(v12 + 44);
    uint64_t v21 = v19 + v20;
    while (v20)
    {
      int v22 = *(_DWORD *)(v21 - 8);
      v21 -= 32;
      v20 -= 32;
      if (!v22) {
        goto LABEL_22;
      }
    }
    uint64_t v24 = *(void *)(v12 + 24);
    if (!v24) {
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  if (!a5) {
    goto LABEL_31;
  }
  if (*(unsigned char *)(a2 + 52) != 4)
  {
    *(void *)(a2 + 232) = -1;
    *(void *)(a2 + 240) = -1;
    *(void *)(a2 + 272) = 0;
    *(void *)(a2 + 24++*(_DWORD *)(result + 8) = 0;
    *(void *)(a2 + 256) = 0;
    *(_DWORD *)(a2 + 264) = 0;
    id v38 = *(id *)(a2 + 16);
    uint64_t v39 = [v38 contents];
    unint64_t v40 = [*(id *)(a2 + 16) length];

    if (*((void *)this + 6) != *((void *)this + 7) || *((void *)this + 3)) {
      goto LABEL_52;
    }
    uint64_t v43 = [*(id *)(a2 + 16) storageMode];
    if (v43)
    {
      if (v43 != 2) {
        goto LABEL_31;
      }
LABEL_52:
      WebGPU::Queue::writeBuffer((uint64_t)this, *(void **)(a2 + 16), a3, (uint64_t)a4, a5);
      goto LABEL_31;
    }
    unint64_t v44 = v40 - a3;
    if (v40 >= a3)
    {
      if (a5 == -1) {
        goto LABEL_66;
      }
      if (v44 >= a5)
      {
LABEL_67:
        memcpy((void *)(v39 + a3), a4, a5);
        goto LABEL_31;
      }
    }
    __break(1u);
LABEL_66:
    if (v44 != -1)
    {
      __break(0xC471u);
      return;
    }
    goto LABEL_67;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v18 = v46;
  unsigned int v45 = v46;
  uint64_t v19 = *(void *)(v12 + 32);
  uint64_t v20 = 32 * *(unsigned int *)(v12 + 44);
  uint64_t v36 = v19 + v20;
  while (v20)
  {
    int v37 = *(_DWORD *)(v36 - 8);
    v36 -= 32;
    v20 -= 32;
    if (!v37)
    {
LABEL_22:
      uint64_t v23 = v19 + v20;
      if (!*(unsigned char *)(v23 + 16))
      {
        unsigned int v45 = 0;
        *(_DWORD *)uint64_t v23 = 1;
        *(void *)(v23 + ++*(_DWORD *)(result + 8) = v18;
        *(unsigned char *)(v23 + 16) = 1;
      }
      goto LABEL_27;
    }
  }
  uint64_t v24 = *(void *)(v12 + 24);
  if (!v24) {
    goto LABEL_27;
  }
LABEL_25:
  (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v24 + 16))(v24, 1, &v45);
  uint64_t v25 = *(void *)(v12 + 24);
  *(void *)(v12 + 24) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
LABEL_27:
  uint64_t v26 = v45;
  unsigned int v45 = 0;
  if (v26)
  {
    if (*v26 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v26 -= 2;
    }
  }
LABEL_31:
  char v27 = 0;
  atomic_uchar *volatile v28 = *(atomic_uchar *volatile *)v12;
  atomic_compare_exchange_strong_explicit(*(atomic_uchar *volatile *)v12, (unsigned __int8 *)&v27, 1u, memory_order_acquire, memory_order_acquire);
  if (v27)
  {
    MEMORY[0x18530AEA0](v28);
    uint64_t v41 = *((void *)v28 + 1);
    uint64_t v30 = 1;
    uint64_t v31 = v41 - 1;
    *((void *)v28 + 1) = v41 - 1;
    if (v41 != 1)
    {
LABEL_33:
      id v32 = 0;
      BOOL v33 = 1;
      atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v30, 0, memory_order_release, memory_order_relaxed);
      if (v30 == 1) {
        goto LABEL_34;
      }
LABEL_55:
      WTF::Lock::unlockSlow((uint64_t *)v30, (WTF::Lock *)v28);
      if (v31) {
        return;
      }
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v29 = *((void *)v28 + 1);
    uint64_t v30 = 1;
    uint64_t v31 = v29 - 1;
    *((void *)v28 + 1) = v29 - 1;
    if (v29 != 1) {
      goto LABEL_33;
    }
  }
  uint64_t v42 = *((void *)v28 + 2);
  id v32 = (WebGPU::Device *)*((void *)v28 + 3);
  *((void *)v28 + 3) = 0;
  BOOL v33 = v42 != 0;
  atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v30, 0, memory_order_release, memory_order_relaxed);
  if (v30 != 1) {
    goto LABEL_55;
  }
LABEL_34:
  if (v31) {
    return;
  }
LABEL_35:
  if (v32)
  {
    WebGPU::Device::~Device(v32, v17);
    WTF::fastFree(v34, v35);
  }
  if (!v33) {
    WTF::fastFree((WTF *)v28, v17);
  }
}

void sub_18250BA3C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  char v11 = 0;
  atomic_uchar *volatile v12 = *v9;
  atomic_compare_exchange_strong_explicit(*v9, (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
  if (v11)
  {
    MEMORY[0x18530AEA0](v12);
    uint64_t v20 = *((void *)v12 + 1);
    uint64_t v14 = 1;
    uint64_t v15 = v20 - 1;
    *((void *)v12 + 1) = v20 - 1;
    if (v20 != 1)
    {
LABEL_3:
      uint64_t v16 = 0;
      BOOL v17 = 1;
      atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
      if (v14 == 1) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v13 = *((void *)v12 + 1);
    uint64_t v14 = 1;
    uint64_t v15 = v13 - 1;
    *((void *)v12 + 1) = v13 - 1;
    if (v13 != 1) {
      goto LABEL_3;
    }
  }
  uint64_t v21 = *((void *)v12 + 2);
  uint64_t v16 = (WebGPU::Device *)*((void *)v12 + 3);
  *((void *)v12 + 3) = 0;
  BOOL v17 = v21 != 0;
  atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
  if (v14 == 1)
  {
LABEL_4:
    if (v15) {
      goto LABEL_9;
    }
LABEL_5:
    if (v16)
    {
      WebGPU::Device::~Device(v16, a2);
      WTF::fastFree(v18, v19);
    }
    if (!v17) {
      WTF::fastFree((WTF *)v12, a2);
    }
LABEL_9:
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  WTF::Lock::unlockSlow((uint64_t *)v14, (WTF::Lock *)v12);
  if (v15) {
    goto LABEL_9;
  }
  goto LABEL_5;
}

_DWORD *wgpuQueueSetLabel(uint64_t a1, char *__s)
{
  if (__s) {
    strlen(__s);
  }
  WTF::String::fromUTF8();
  if (v5) {
    uint64_t v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v3 = &stru_1ECABF938;
  }
  [*(id *)(a1 + 8) setLabel:v3];

  uint64_t result = v5;
  if (v5)
  {
    if (*v5 == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *v5 -= 2;
    }
  }
  return result;
}

void sub_18250BC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebGPU::Queue::commitMTLCommandBuffer(objc_object  {objcproto16MTLCommandBuffer}*)::$_0::operator() const(objc_object  {objcproto16MTLCommandBuffer})::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (atomic_uint *)a1[1];
  *a1 = &unk_1ECABB1A8;
  a1[1] = 0;
  if (!v2 || atomic_fetch_add(v2, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v2);
  WebGPU::Queue::~Queue((WebGPU::Queue *)v2);
  WTF::fastFree(v4, v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::Queue::commitMTLCommandBuffer(objc_object  {objcproto16MTLCommandBuffer}*)::$_0::operator() const(objc_object  {objcproto16MTLCommandBuffer})::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1ECABB1A8;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WebGPU::Queue::~Queue((WebGPU::Queue *)v3);
    WTF::fastFree(v6, v7);
    size_t v4 = this;
  }
  else
  {
    size_t v4 = this;
  }
  return WTF::fastFree(v4, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebGPU::Queue::commitMTLCommandBuffer(objc_object  {objcproto16MTLCommandBuffer}*)::$_0::operator() const(objc_object  {objcproto16MTLCommandBuffer})::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v2 + 72);
  uint64_t result = (uint64_t *)(v2 + 72);
  uint64_t v4 = v5;
  uint64_t v6 = *(result - 1);
  uint64_t v7 = v6 + 1;
  *(result - 1) = v6 + 1;
  if (!v5) {
    return result;
  }
  int v8 = *(_DWORD *)(v4 - 8);
  unint64_t v9 = (v6 - (v7 << 32)) ^ ((unint64_t)(v6 - (v7 << 32)) >> 22);
  unint64_t v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  unint64_t v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  unsigned int v12 = v8 & ((v11 >> 31) ^ v11);
  uint64_t v13 = (uint64_t *)(v4 + 24 * v12);
  uint64_t v14 = *v13;
  if (*v13 == v7)
  {
LABEL_6:
    if ((uint64_t *)(v4 + 24 * *(unsigned int *)(v4 - 4)) == v13) {
      return result;
    }
    uint64_t v16 = (WTF *)v13[1];
    uint64_t v17 = *((unsigned int *)v13 + 5);
    v13[1] = 0;
    v13[2] = 0;
    uint64_t v18 = *result;
    if (*result)
    {
      v18 += 24 * *(unsigned int *)(v18 - 4);
      if ((uint64_t *)v18 == v13) {
        goto LABEL_22;
      }
    }
    if ((uint64_t *)v18 == v13) {
      goto LABEL_22;
    }
    *uint64_t v13 = -2;
    ++*(_DWORD *)(*result - 16);
    if (*result)
    {
      --*(_DWORD *)(*result - 12);
      uint64_t v19 = *result;
      if (!*result) {
        goto LABEL_22;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
      uint64_t v19 = *result;
      if (!*result)
      {
LABEL_22:
        if (v17)
        {
          uint64_t v23 = 0;
          uint64_t v24 = 8 * v17;
          do
          {
            (*(void (**)(void))(**(void **)((char *)v16 + v23) + 16))(*(void *)((char *)v16 + v23));
            v23 += 8;
          }
          while (v24 != v23);
          uint64_t v25 = (uint64_t **)v16;
          do
          {
            uint64_t result = *v25;
            *uint64_t v25 = 0;
            if (result) {
              uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
            }
            ++v25;
            v24 -= 8;
          }
          while (v24);
        }
        if (v16)
        {
          return (uint64_t *)WTF::fastFree(v16, a2);
        }
        return result;
      }
    }
    unsigned int v20 = 6 * *(_DWORD *)(v19 - 12);
    unsigned int v21 = *(_DWORD *)(v19 - 4);
    if (v20 < v21 && v21 >= 9) {
      uint64_t result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(result, v21 >> 1, 0);
    }
    goto LABEL_22;
  }
  int v15 = 1;
  while (v14 != -1)
  {
    unsigned int v12 = (v12 + v15) & v8;
    uint64_t v13 = (uint64_t *)(v4 + 24 * v12);
    uint64_t v14 = *v13;
    ++v15;
    if (*v13 == v7) {
      goto LABEL_6;
    }
  }
  return result;
}

void sub_18250BF84(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v4 = v3;
  if (v4)
  {
    uint64_t v6 = 8 * v4;
    uint64_t v7 = v2;
    do
    {
      uint64_t v8 = *(void *)v7;
      *(void *)uint64_t v7 = 0;
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
      uint64_t v7 = (WTF *)((char *)v7 + 8);
      v6 -= 8;
    }
    while (v6);
  }
  if (v2) {
    WTF::fastFree(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_18250BFF4()
{
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    *(void *)(v0 + v2) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    v2 += 8;
    if (v1 == v2) {
      JUMPOUT(0x18250BF90);
    }
  }
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    uint64_t v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
    uint64_t v9 = v7 + 16;
    if (!a2) {
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
    uint64_t v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
    uint64_t v9 = v7 + 16;
    if (!a2) {
      goto LABEL_7;
    }
  }
  uint64_t v10 = a2;
  unint64_t v11 = (void *)(v7 + 24);
  do
  {
    *(v11 - 1) = -1;
    *unint64_t v11 = 0;
    v11[1] = 0;
    v11 += 3;
    --v10;
  }
  while (v10);
LABEL_7:
  *a1 = v9;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(result + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = v5;
    uint64_t v54 = v5;
    uint64_t v55 = v4;
    do
    {
      int v15 = (uint64_t *)(v4 + 24 * v12);
      uint64_t v16 = *v15;
      if (*v15 != -2)
      {
        if (v16 == -1)
        {
          uint64_t v17 = v4 + 24 * v12;
          uint64_t v18 = (WTF **)(v17 + 8);
          uint64_t v19 = *(unsigned int *)(v17 + 20);
          if (v19)
          {
            unsigned int v20 = *v18;
            uint64_t v21 = 8 * v19;
            do
            {
              uint64_t v22 = *(void *)v20;
              *(void *)unsigned int v20 = 0;
              if (v22) {
                (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
              }
              unsigned int v20 = (WTF *)((char *)v20 + 8);
              v21 -= 8;
            }
            while (v21);
          }
          uint64_t v25 = *v18;
          if (*v18)
          {
            *uint64_t v18 = 0;
            *(_DWORD *)(v4 + 24 * v12 + 16) = 0;
            WTF::fastFree(v25, v8);
          }
        }
        else
        {
          uint64_t v23 = *a1;
          int v58 = v13;
          if (*a1) {
            int v24 = *(_DWORD *)(v23 - 8);
          }
          else {
            int v24 = 0;
          }
          unint64_t v26 = (v16 + ~(v16 << 32)) ^ ((unint64_t)(v16 + ~(v16 << 32)) >> 22);
          unint64_t v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
          unint64_t v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
          unsigned int v29 = v24 & ((v28 >> 31) ^ v28);
          int v30 = 1;
          do
          {
            unsigned int v31 = v29;
            id v32 = (uint64_t *)(v23 + 24 * v29);
            unsigned int v29 = (v29 + v30++) & v24;
          }
          while (*v32 != -1);
          unsigned int v33 = v31;
          uint64_t v34 = v23 + 24 * v31;
          unsigned int v37 = *(_DWORD *)(v34 + 20);
          uint64_t v36 = (_DWORD *)(v34 + 20);
          uint64_t v35 = v37;
          id v38 = (WTF **)(v36 - 3);
          if (v37)
          {
            uint64_t v39 = *v38;
            uint64_t v40 = 8 * v35;
            do
            {
              uint64_t v41 = *(void *)v39;
              *(void *)uint64_t v39 = 0;
              if (v41) {
                (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
              }
              uint64_t v39 = (WTF *)((char *)v39 + 8);
              v40 -= 8;
            }
            while (v40);
          }
          uint64_t v42 = *v38;
          if (*v38)
          {
            WTF *v38 = 0;
            *(_DWORD *)(v23 + 24 * v33 + 16) = 0;
            WTF::fastFree(v42, v8);
          }
          *id v32 = *v15;
          uint64_t v4 = v55;
          uint64_t v43 = v55 + 24 * v12;
          WTF *v38 = 0;
          *(void *)(v36 - 1) = 0;
          unsigned int v45 = *(WTF **)(v43 + 8);
          uint64_t v44 = v43 + 8;
          *(void *)uint64_t v44 = 0;
          WTF *v38 = v45;
          int v46 = *(_DWORD *)(v44 + 8);
          *(_DWORD *)(v44 + ++*(_DWORD *)(result + 8) = 0;
          *(_DWORD *)(v23 + 24 * v33 + 16) = v46;
          int v47 = *(_DWORD *)(v44 + 12);
          *(_DWORD *)(v44 + 12) = 0;
          *uint64_t v36 = v47;
          uint64_t v48 = *(unsigned int *)(v44 + 12);
          if (v48)
          {
            uint64_t v49 = *(uint64_t **)v44;
            uint64_t v50 = 8 * v48;
            do
            {
              uint64_t v51 = *v49;
              *uint64_t v49 = 0;
              if (v51) {
                (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
              }
              ++v49;
              v50 -= 8;
            }
            while (v50);
          }
          unsigned int v52 = *(WTF **)v44;
          if (*(void *)v44)
          {
            *(void *)uint64_t v44 = 0;
            *(_DWORD *)(v44 + ++*(_DWORD *)(result + 8) = 0;
            WTF::fastFree(v52, v8);
          }
          uint64_t v13 = v58;
          if (v15 == a3) {
            uint64_t v13 = v32;
          }
          uint64_t v14 = v54;
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v13;
}

uint64_t WebGPU::Queue::commitMTLCommandBuffer(objc_object  {objcproto16MTLCommandBuffer}*)::$_1::operator() const(objc_object  {objcproto16MTLCommandBuffer})::{lambda(void)#1}::~(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = 0;
  if (!v2 || atomic_fetch_add(v2, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v2);
  WebGPU::Queue::~Queue((WebGPU::Queue *)v2);
  WTF::fastFree(v4, v5);
  return a1;
}

void *WTF::Detail::CallableWrapper<WebGPU::Queue::commitMTLCommandBuffer(objc_object  {objcproto16MTLCommandBuffer}*)::$_1::operator() const(objc_object  {objcproto16MTLCommandBuffer})::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1ECABB1D0;
  uint64_t v2 = (atomic_uint *)a1[2];
  a1[2] = 0;
  if (!v2 || atomic_fetch_add(v2, 0xFFFFFFFF) != 1) {
    return a1;
  }
  atomic_store(1u, (unsigned int *)v2);
  WebGPU::Queue::~Queue((WebGPU::Queue *)v2);
  WTF::fastFree(v4, v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::Queue::commitMTLCommandBuffer(objc_object  {objcproto16MTLCommandBuffer}*)::$_1::operator() const(objc_object  {objcproto16MTLCommandBuffer})::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1ECABB1D0;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WebGPU::Queue::~Queue((WebGPU::Queue *)v3);
    WTF::fastFree(v6, v7);
    uint64_t v4 = this;
  }
  else
  {
    uint64_t v4 = this;
  }
  return WTF::fastFree(v4, a2);
}

void WTF::Detail::CallableWrapper<WebGPU::Queue::commitMTLCommandBuffer(objc_object  {objcproto16MTLCommandBuffer}*)::$_1::operator() const(objc_object  {objcproto16MTLCommandBuffer})::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(v3 + 80);
  uint64_t v4 = (uint64_t *)(v3 + 80);
  uint64_t v5 = v6;
  uint64_t v7 = *(v4 - 3);
  uint64_t v8 = v7 + 1;
  *(v4 - 3) = v7 + 1;
  if (!v6) {
    goto LABEL_31;
  }
  int v9 = *(_DWORD *)(v5 - 8);
  unint64_t v10 = (v7 - (v8 << 32)) ^ ((unint64_t)(v7 - (v8 << 32)) >> 22);
  unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v9 & ((v12 >> 31) ^ v12);
  uint64_t v14 = (uint64_t *)(v5 + 24 * v13);
  uint64_t v15 = *v14;
  if (*v14 == v8)
  {
LABEL_6:
    if ((uint64_t *)(v5 + 24 * *(unsigned int *)(v5 - 4)) == v14) {
      goto LABEL_31;
    }
    uint64_t v17 = (WTF *)v14[1];
    uint64_t v18 = *((unsigned int *)v14 + 5);
    v14[1] = 0;
    v14[2] = 0;
    uint64_t v19 = *v4;
    if (*v4)
    {
      v19 += 24 * *(unsigned int *)(v19 - 4);
      if ((uint64_t *)v19 == v14) {
        goto LABEL_22;
      }
    }
    if ((uint64_t *)v19 == v14) {
      goto LABEL_22;
    }
    *uint64_t v14 = -2;
    ++*(_DWORD *)(*v4 - 16);
    if (*v4)
    {
      --*(_DWORD *)(*v4 - 12);
      uint64_t v20 = *v4;
      if (!*v4) {
        goto LABEL_22;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
      uint64_t v20 = *v4;
      if (!*v4)
      {
LABEL_22:
        if (v18)
        {
          uint64_t v24 = 0;
          uint64_t v25 = 8 * v18;
          do
          {
            (*(void (**)(void, void))(**(void **)((char *)v17 + v24) + 16))(*(void *)((char *)v17 + v24), 0);
            v24 += 8;
          }
          while (v25 != v24);
          unint64_t v26 = v17;
          do
          {
            uint64_t v27 = *(void *)v26;
            *(void *)unint64_t v26 = 0;
            if (v27) {
              (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
            }
            unint64_t v26 = (WTF *)((char *)v26 + 8);
            v25 -= 8;
          }
          while (v25);
        }
        if (v17) {
          WTF::fastFree(v17, a2);
        }
        goto LABEL_31;
      }
    }
    unsigned int v21 = 6 * *(_DWORD *)(v20 - 12);
    unsigned int v22 = *(_DWORD *)(v20 - 4);
    if (v21 < v22 && v22 >= 9) {
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(v4, v22 >> 1, 0);
    }
    goto LABEL_22;
  }
  int v16 = 1;
  while (v15 != -1)
  {
    unsigned int v13 = (v13 + v16) & v9;
    uint64_t v14 = (uint64_t *)(v5 + 24 * v13);
    uint64_t v15 = *v14;
    ++v16;
    if (*v14 == v8) {
      goto LABEL_6;
    }
  }
LABEL_31:
  if (!*(unsigned char *)(a1 + 8)) {
    return;
  }
  uint64_t v28 = *(void *)(a1 + 16);
  uint64_t v29 = *(void *)(v28 + 32);
  if (!v29) {
    return;
  }
  char v30 = 0;
  unsigned int v31 = *(uint64_t **)(v28 + 40);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v29, (unsigned __int8 *)&v30, 1u, memory_order_acquire, memory_order_acquire);
  if (v30)
  {
    MEMORY[0x18530AEA0](v29);
    if (*(void *)(v29 + 24))
    {
LABEL_35:
      ++*(void *)(v29 + 8);
      uint64_t v32 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v29, (unsigned __int8 *)&v32, 0, memory_order_release, memory_order_relaxed);
      if (v32 == 1) {
        goto LABEL_36;
      }
      goto LABEL_50;
    }
  }
  else if (*(void *)(v29 + 24))
  {
    goto LABEL_35;
  }
  unsigned int v31 = 0;
  uint64_t v32 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v29, (unsigned __int8 *)&v32, 0, memory_order_release, memory_order_relaxed);
  if (v32 == 1)
  {
LABEL_36:
    if (!v31) {
      return;
    }
    goto LABEL_37;
  }
LABEL_50:
  WTF::Lock::unlockSlow((uint64_t *)v32, (WTF::Lock *)v29);
  if (!v31) {
    return;
  }
LABEL_37:
  WebGPU::Device::loseTheDevice((uint64_t)v31, 0);
  char v34 = 0;
  uint64_t v35 = *v31;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v35, (unsigned __int8 *)&v34, 1u, memory_order_acquire, memory_order_acquire);
  if (v34)
  {
    MEMORY[0x18530AEA0](v35);
    uint64_t v43 = *(void *)(v35 + 8);
    uint64_t v37 = 1;
    uint64_t v38 = v43 - 1;
    *(void *)(v35 + ++*(_DWORD *)(result + 8) = v43 - 1;
    if (v43 != 1)
    {
LABEL_39:
      uint64_t v39 = 0;
      BOOL v40 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v35, (unsigned __int8 *)&v37, 0, memory_order_release, memory_order_relaxed);
      if (v37 == 1) {
        goto LABEL_40;
      }
LABEL_54:
      WTF::Lock::unlockSlow((uint64_t *)v37, (WTF::Lock *)v35);
      if (v38) {
        return;
      }
      goto LABEL_41;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(v35 + 8);
    uint64_t v37 = 1;
    uint64_t v38 = v36 - 1;
    *(void *)(v35 + ++*(_DWORD *)(result + 8) = v36 - 1;
    if (v36 != 1) {
      goto LABEL_39;
    }
  }
  uint64_t v44 = *(void *)(v35 + 16);
  uint64_t v39 = *(WebGPU::Device **)(v35 + 24);
  *(void *)(v35 + 24) = 0;
  BOOL v40 = v44 != 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v35, (unsigned __int8 *)&v37, 0, memory_order_release, memory_order_relaxed);
  if (v37 != 1) {
    goto LABEL_54;
  }
LABEL_40:
  if (v38) {
    return;
  }
LABEL_41:
  if (v39)
  {
    WebGPU::Device::~Device(v39, v33);
    WTF::fastFree(v41, v42);
  }
  if (!v40)
  {
    WTF::fastFree((WTF *)v35, v33);
  }
}

void sub_18250C894(_Unwind_Exception *exception_object, void *a2)
{
  if (v3)
  {
    uint64_t v5 = 8 * v3;
    uint64_t v6 = v2;
    do
    {
      uint64_t v7 = *(void *)v6;
      *(void *)uint64_t v6 = 0;
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
      uint64_t v6 = (WTF *)((char *)v6 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  if (v2) {
    WTF::fastFree(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_18250C8FC(uint64_t a1, void *a2)
{
  char v3 = 0;
  uint64_t v4 = *v2;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v4, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3)
  {
    MEMORY[0x18530AEA0](v4);
    uint64_t v12 = *(void *)(v4 + 8);
    uint64_t v6 = 1;
    uint64_t v7 = v12 - 1;
    *(void *)(v4 + ++*(_DWORD *)(result + 8) = v12 - 1;
    if (v12 != 1)
    {
LABEL_3:
      uint64_t v8 = 0;
      BOOL v9 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v4, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
      if (v6 == 1) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(v4 + 8);
    uint64_t v6 = 1;
    uint64_t v7 = v5 - 1;
    *(void *)(v4 + ++*(_DWORD *)(result + 8) = v5 - 1;
    if (v5 != 1) {
      goto LABEL_3;
    }
  }
  uint64_t v13 = *(void *)(v4 + 16);
  uint64_t v8 = *(WebGPU::Device **)(v4 + 24);
  *(void *)(v4 + 24) = 0;
  BOOL v9 = v13 != 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v4, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 == 1)
  {
LABEL_4:
    if (v7) {
      goto LABEL_15;
    }
    goto LABEL_5;
  }
LABEL_11:
  WTF::Lock::unlockSlow((uint64_t *)v6, (WTF::Lock *)v4);
  if (v7) {
    goto LABEL_15;
  }
LABEL_5:
  if (v8)
  {
    WebGPU::Device::~Device(v8, a2);
    WTF::fastFree(v10, v11);
  }
  if (!v9) {
    JUMPOUT(0x18250C8A0);
  }
LABEL_15:
  JUMPOUT(0x18250C8A8);
}

void sub_18250C9A4()
{
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    *(void *)(v0 + v2) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    v2 += 8;
    if (v1 == v2) {
      JUMPOUT(0x18250C89CLL);
    }
  }
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::Vector<WTF::Function<void ()(WGPUQueueWorkDoneStatus)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    uint64_t v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
    uint64_t v9 = v7 + 16;
    if (!a2) {
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
    uint64_t v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
    uint64_t v9 = v7 + 16;
    if (!a2) {
      goto LABEL_7;
    }
  }
  uint64_t v10 = a2;
  unint64_t v11 = (void *)(v7 + 24);
  do
  {
    *(v11 - 1) = -1;
    *unint64_t v11 = 0;
    v11[1] = 0;
    v11 += 3;
    --v10;
  }
  while (v10);
LABEL_7:
  *a1 = v9;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(result + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = v5;
    uint64_t v54 = v5;
    uint64_t v55 = v4;
    do
    {
      uint64_t v15 = (uint64_t *)(v4 + 24 * v12);
      uint64_t v16 = *v15;
      if (*v15 != -2)
      {
        if (v16 == -1)
        {
          uint64_t v17 = v4 + 24 * v12;
          uint64_t v18 = (WTF **)(v17 + 8);
          uint64_t v19 = *(unsigned int *)(v17 + 20);
          if (v19)
          {
            uint64_t v20 = *v18;
            uint64_t v21 = 8 * v19;
            do
            {
              uint64_t v22 = *(void *)v20;
              *(void *)uint64_t v20 = 0;
              if (v22) {
                (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
              }
              uint64_t v20 = (WTF *)((char *)v20 + 8);
              v21 -= 8;
            }
            while (v21);
          }
          uint64_t v25 = *v18;
          if (*v18)
          {
            *uint64_t v18 = 0;
            *(_DWORD *)(v4 + 24 * v12 + 16) = 0;
            WTF::fastFree(v25, v8);
          }
        }
        else
        {
          uint64_t v23 = *a1;
          int v58 = v13;
          if (*a1) {
            int v24 = *(_DWORD *)(v23 - 8);
          }
          else {
            int v24 = 0;
          }
          unint64_t v26 = (v16 + ~(v16 << 32)) ^ ((unint64_t)(v16 + ~(v16 << 32)) >> 22);
          unint64_t v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
          unint64_t v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
          unsigned int v29 = v24 & ((v28 >> 31) ^ v28);
          int v30 = 1;
          do
          {
            unsigned int v31 = v29;
            uint64_t v32 = (uint64_t *)(v23 + 24 * v29);
            unsigned int v29 = (v29 + v30++) & v24;
          }
          while (*v32 != -1);
          unsigned int v33 = v31;
          uint64_t v34 = v23 + 24 * v31;
          unsigned int v37 = *(_DWORD *)(v34 + 20);
          uint64_t v36 = (_DWORD *)(v34 + 20);
          uint64_t v35 = v37;
          uint64_t v38 = (WTF **)(v36 - 3);
          if (v37)
          {
            uint64_t v39 = *v38;
            uint64_t v40 = 8 * v35;
            do
            {
              uint64_t v41 = *(void *)v39;
              *(void *)uint64_t v39 = 0;
              if (v41) {
                (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
              }
              uint64_t v39 = (WTF *)((char *)v39 + 8);
              v40 -= 8;
            }
            while (v40);
          }
          uint64_t v42 = *v38;
          if (*v38)
          {
            WTF *v38 = 0;
            *(_DWORD *)(v23 + 24 * v33 + 16) = 0;
            WTF::fastFree(v42, v8);
          }
          *uint64_t v32 = *v15;
          uint64_t v4 = v55;
          uint64_t v43 = v55 + 24 * v12;
          WTF *v38 = 0;
          *(void *)(v36 - 1) = 0;
          unsigned int v45 = *(WTF **)(v43 + 8);
          uint64_t v44 = v43 + 8;
          *(void *)uint64_t v44 = 0;
          WTF *v38 = v45;
          int v46 = *(_DWORD *)(v44 + 8);
          *(_DWORD *)(v44 + ++*(_DWORD *)(result + 8) = 0;
          *(_DWORD *)(v23 + 24 * v33 + 16) = v46;
          int v47 = *(_DWORD *)(v44 + 12);
          *(_DWORD *)(v44 + 12) = 0;
          *uint64_t v36 = v47;
          uint64_t v48 = *(unsigned int *)(v44 + 12);
          if (v48)
          {
            uint64_t v49 = *(uint64_t **)v44;
            uint64_t v50 = 8 * v48;
            do
            {
              uint64_t v51 = *v49;
              *uint64_t v49 = 0;
              if (v51) {
                (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
              }
              ++v49;
              v50 -= 8;
            }
            while (v50);
          }
          unsigned int v52 = *(WTF **)v44;
          if (*(void *)v44)
          {
            *(void *)uint64_t v44 = 0;
            *(_DWORD *)(v44 + ++*(_DWORD *)(result + 8) = 0;
            WTF::fastFree(v52, v8);
          }
          uint64_t v13 = v58;
          if (v15 == a3) {
            uint64_t v13 = v32;
          }
          uint64_t v14 = v54;
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v13;
}

void *WTF::Detail::CallableWrapper<WebGPU::Queue::onSubmittedWorkDone(WTF::CompletionHandler<void ()(WGPUQueueWorkDoneStatus)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1ECABB1F8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::Queue::onSubmittedWorkDone(WTF::CompletionHandler<void ()(WGPUQueueWorkDoneStatus)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1ECABB1F8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::Queue::onSubmittedWorkDone(WTF::CompletionHandler<void ()(WGPUQueueWorkDoneStatus)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v1 + 16))(v1, 0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);
  return v2(v1);
}

void sub_18250CEBC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WGPUQueueWorkDoneStatus)>,void,WGPUQueueWorkDoneStatus>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1ECABB220;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WGPUQueueWorkDoneStatus)>,void,WGPUQueueWorkDoneStatus>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1ECABB220;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WGPUQueueWorkDoneStatus)>,void,WGPUQueueWorkDoneStatus>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);
  return v2(v1);
}

void sub_18250D058(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebGPU::Queue::onSubmittedWorkScheduled(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1ECABB248;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::Queue::onSubmittedWorkScheduled(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1ECABB248;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::Queue::onSubmittedWorkScheduled(WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

char *WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  unsigned int v5 = *(WTF **)a1;
  if (*(void *)a1 <= a3)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      unint64_t v7 = *(unsigned int *)(a1 + 8);
      unint64_t v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10) {
        unint64_t v9 = v8 + 1;
      }
      else {
        unint64_t v9 = 16;
      }
      if (v9 <= a2) {
        unint64_t v10 = a2;
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10 <= v7)
      {
        unsigned int v29 = *(WTF **)a1;
        return (char *)v29 + 8 * ((uint64_t)(v3 - (void)v5) >> 3);
      }
      if (!(v10 >> 29))
      {
        uint64_t v12 = WTF::fastMalloc((WTF *)(8 * v10));
        uint64_t v13 = 0;
        *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = v10;
        *(void *)a1 = v12;
        uint64_t v14 = 8 * v6;
        do
        {
          uint64_t v15 = *(void *)((char *)v5 + v13);
          *(void *)((char *)v5 + v13) = 0;
          *(void *)(v12 + v13) = v15;
          uint64_t v16 = *(void *)((char *)v5 + v13);
          *(void *)((char *)v5 + v13) = 0;
          if (v16) {
            (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          }
          v13 += 8;
        }
        while (v14 != v13);
        unsigned int v29 = *(WTF **)a1;
        if (v5)
        {
          if (v29 == v5)
          {
            *(void *)a1 = 0;
            *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = 0;
          }
          WTF::fastFree(v5, v11);
          unsigned int v29 = *(WTF **)a1;
        }
        return (char *)v29 + 8 * ((uint64_t)(v3 - (void)v5) >> 3);
      }
LABEL_39:
      __break(0xC471u);
      JUMPOUT(0x18250D394);
    }
  }
  unint64_t v17 = *(unsigned int *)(a1 + 8);
  unint64_t v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10) {
    unint64_t v19 = v18 + 1;
  }
  else {
    unint64_t v19 = 16;
  }
  if (v19 <= a2) {
    unint64_t v20 = a2;
  }
  else {
    unint64_t v20 = v19;
  }
  if (v20 > v17)
  {
    if (v20 >> 29) {
      goto LABEL_39;
    }
    uint64_t v21 = *(unsigned int *)(a1 + 12);
    uint64_t v22 = WTF::fastMalloc((WTF *)(8 * v20));
    *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = v20;
    *(void *)a1 = v22;
    if (v21)
    {
      int v24 = (void *)v22;
      uint64_t v25 = 8 * v21;
      unint64_t v26 = v5;
      do
      {
        uint64_t v27 = *(void *)v26;
        *(void *)unint64_t v26 = 0;
        *int v24 = v27;
        uint64_t v28 = *(void *)v26;
        *(void *)unint64_t v26 = 0;
        if (v28) {
          (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
        }
        ++v24;
        unint64_t v26 = (WTF *)((char *)v26 + 8);
        v25 -= 8;
      }
      while (v25);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = 0;
      }
      WTF::fastFree(v5, v23);
    }
  }
  return (char *)v3;
}

uint64_t WTF::Detail::CallableWrapper<wgpuQueueOnSubmittedWorkDone::$_0,void,WGPUQueueWorkDoneStatus>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 8))(a2, *(void *)(a1 + 16));
}

void sub_18250D49C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18250D54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 8);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_1ECABB288[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + ++*(_DWORD *)(result + 8) = -1;
  _Unwind_Resume(exception_object);
}

id WebGPU::RenderBundle::RenderBundle(uint64_t a1, void *a2, _DWORD **a3, long long *a4, uint64_t a5, atomic_uchar *volatile *a6)
{
  id v11 = a2;
  char v12 = 0;
  int v13 = 1;
  *(_DWORD *)a1 = 1;
  atomic_uchar *volatile v14 = *a6;
  atomic_compare_exchange_strong_explicit(*a6, (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
  if (v12) {
    MEMORY[0x18530AEA0](v14);
  }
  uint64_t v15 = (uint64_t *)(*((void *)v14 + 1) + 1);
  *((void *)v14 + 1) = v15;
  atomic_compare_exchange_strong_explicit(v14, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
  if (v13 == 1)
  {
    *(void *)(a1 + ++*(_DWORD *)(result + 8) = a6;
    uint64_t v16 = *a3;
    if (!*a3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  WTF::Lock::unlockSlow(v15, (WTF::Lock *)v14);
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = a6;
  uint64_t v16 = *a3;
  if (*a3) {
LABEL_5:
  }
    ++*v16;
LABEL_6:
  *(void *)(a1 + 16) = v16;
  id result = v11;
  unint64_t v18 = result;
  *(void *)(a1 + 24) = result;
  long long v19 = *a4;
  long long v20 = a4[2];
  *(_OWORD *)(a1 + 4++*(_DWORD *)(result + 8) = a4[1];
  *(_OWORD *)(a1 + 64) = v20;
  *(_OWORD *)(a1 + 32) = v19;
  uint64_t v21 = (void *)(a1 + 80);
  uint64_t v22 = *((void *)a4 + 3);
  if (!v22)
  {
    *uint64_t v21 = 0;
    *(void *)(a1 + 8++*(_DWORD *)(result + 8) = 0;
    goto LABEL_16;
  }
  unint64_t v23 = *((void *)a4 + 2);
  *uint64_t v21 = 0;
  *(void *)(a1 + 8++*(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(a1 + 92) = v23;
  if (!v23)
  {
LABEL_16:
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = a5;
    *(void *)(a1 + 112) = 0x3F80000000000000;
LABEL_21:

    return (id)a1;
  }
  if (!(v23 >> 30))
  {
    uint64_t v24 = WTF::fastMalloc((WTF *)(4 * v23));
    *(_DWORD *)(a1 + 8++*(_DWORD *)(result + 8) = v23;
    *(void *)(a1 + 80) = v24;
    unint64_t v25 = (v23 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v25 < 7)
    {
      unint64_t v26 = (_DWORD *)v24;
      uint64_t v27 = (int *)v22;
    }
    else
    {
      unint64_t v26 = (_DWORD *)v24;
      uint64_t v27 = (int *)v22;
      if ((unint64_t)(v24 - v22) >= 0x20)
      {
        unint64_t v28 = v25 + 1;
        uint64_t v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
        unint64_t v26 = (_DWORD *)(v24 + v29);
        uint64_t v27 = (int *)(v22 + v29);
        int v30 = (long long *)(v22 + 16);
        unsigned int v31 = (_OWORD *)(v24 + 16);
        uint64_t v32 = v28 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v33 = *v30;
          *(v31 - 1) = *(v30 - 1);
          *unsigned int v31 = v33;
          v30 += 2;
          v31 += 2;
          v32 -= 8;
        }
        while (v32);
        if (v28 == (v28 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_19;
        }
      }
    }
    do
    {
      int v34 = *v27++;
      *v26++ = v34;
    }
    while (v27 != (int *)(v22 + 4 * v23));
LABEL_19:
    int v35 = *(_DWORD *)(a1 + 92);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = a5;
    *(void *)(a1 + 112) = 0x3F80000000000000;
    if (v35) {
      *(void *)(a1 + 56) = v24;
    }
    goto LABEL_21;
  }
  __break(0xC471u);
  return result;
}

void sub_18250D860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18250D870(_Unwind_Exception *a1)
{
  uint64_t v6 = *(WebGPU::RenderBundleEncoder **)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v6) {
    WTF::RefCounted<WebGPU::RenderBundleEncoder>::deref(v6);
  }
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref(v3, v5);

  _Unwind_Resume(a1);
}

WebGPU::RenderBundle *WebGPU::RenderBundle::RenderBundle(WebGPU::RenderBundle *this, atomic_uchar *volatile *a2, NSString *a3)
{
  unsigned int v5 = a3;
  char v6 = 0;
  int v7 = 1;
  *(_DWORD *)this = 1;
  atomic_uchar *volatile v8 = *a2;
  atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    MEMORY[0x18530AEA0](v8);
  }
  unint64_t v9 = (uint64_t *)(*((void *)v8 + 1) + 1);
  *((void *)v8 + 1) = v9;
  atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1) {
    WTF::Lock::unlockSlow(v9, (WTF::Lock *)v8);
  }
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = a2;
  *((void *)this + 12) = v5;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0x3F80000000000000;

  return this;
}

void sub_18250D950(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebGPU::RenderBundle::~RenderBundle(WebGPU::RenderBundle *this)
{
  unint64_t v3 = (WTF *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v3, v2);
  }

  unsigned int v5 = (WebGPU::RenderBundleEncoder *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v5) {
    goto LABEL_6;
  }
  if (*(_DWORD *)v5 != 1)
  {
    --*(_DWORD *)v5;
LABEL_6:
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)this + 1, v4);
    return;
  }
  WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v5);
  WTF::fastFree(v6, v7);
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)this + 1, v8);
}

void WebGPU::RenderBundle::setLabel(uint64_t a1, void *a2)
{
  if (*a2) {
    unint64_t v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    unint64_t v3 = &stru_1ECABF938;
  }
  char v6 = v3;
  uint64_t v4 = [*(id *)(a1 + 24) firstObject];
  unsigned int v5 = [v4 indirectCommandBuffer];
  [v5 setLabel:v6];
}

void sub_18250DA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  char v12 = v11;

  _Unwind_Resume(a1);
}

void sub_18250DAA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WebGPU::RenderBundle::updateMinMaxDepths(WebGPU::RenderBundle *this, float a2, float a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*((float *)this + 28) != a2 || *((float *)this + 29) != a3)
  {
    *((float *)this + 2++*(_DWORD *)(result + 8) = a2;
    *((float *)this + 29) = a3;
    *(float *)uint64_t v15 = a2;
    *(float *)&v15[1] = a3;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v4 = *((id *)this + 3);
    uint64_t v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v11;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v11 != v6) {
            objc_enumerationMutation(v4);
          }
          uint64_t v8 = *(void *)(*((void *)this + 1) + 16);
          unint64_t v9 = objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * v7), "fragmentDynamicOffsetsBuffer", (void)v10);
          WebGPU::Queue::writeBuffer(v8, v9, 0, (uint64_t)v15, 8uLL);

          ++v7;
        }
        while (v5 != v7);
        uint64_t v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }
      while (v5);
    }
  }
}

void sub_18250DBFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL WebGPU::RenderBundle::validateRenderPass(BOOL result, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  if (a2 && !*(_DWORD *)(result + 72)) {
    return 0;
  }
  if (a3 && !*(_DWORD *)(result + 76)) {
    return 0;
  }
  uint64_t v6 = *(void *)(result + 48);
  if (v6 != *(void *)(a4 + 16)) {
    return 0;
  }
  int v7 = 0;
  if (!v6)
  {
LABEL_14:
    if (*(void *)(a4 + 32) && (uint64_t v11 = *a6) != 0)
    {
      if (*(_DWORD *)(v11 + 40) == *(_DWORD *)(result + 64))
      {
        int v7 = *(_DWORD *)(*(void *)(v11 + 96) + 40);
        return *(_DWORD *)(result + 68) == v7;
      }
    }
    else if (!*(_DWORD *)(result + 64))
    {
      return *(_DWORD *)(result + 68) == v7;
    }
    return 0;
  }
  unint64_t v8 = 0;
  while (v8 < *(unsigned int *)(a5 + 12))
  {
    int v9 = *(_DWORD *)(*(void *)(result + 56) + 4 * v8);
    uint64_t v10 = *(void *)(*(void *)a5 + 8 * v8);
    if (v10)
    {
      if (v9 != *(_DWORD *)(v10 + 40)) {
        return 0;
      }
      int v7 = *(_DWORD *)(*(void *)(v10 + 96) + 40);
      if (v6 == ++v8) {
        goto LABEL_14;
      }
    }
    else
    {
      if (v9) {
        return 0;
      }
      if (v6 == ++v8) {
        goto LABEL_14;
      }
    }
  }
  __break(0xC471u);
  return result;
}

_DWORD *wgpuRenderBundleReference(_DWORD *result)
{
  return result;
}

WebGPU::RenderBundle *wgpuRenderBundleRelease(WebGPU::RenderBundle *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebGPU::RenderBundle::~RenderBundle(result);
    return (WebGPU::RenderBundle *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_DWORD *wgpuRenderBundleSetLabel(uint64_t a1, char *__s)
{
  if (__s) {
    strlen(__s);
  }
  WTF::String::fromUTF8();
  WebGPU::RenderBundle::setLabel(a1, &v4);
  id result = v4;
  id v4 = 0;
  if (result)
  {
    if (*result == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *result -= 2;
    }
  }
  return result;
}

void sub_18250DDD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WebGPU::Buffer *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN6WebGPU6BufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IKNSA_11TextureViewENSC_ISI_EENSE_ISI_EEEENS9_IKNSA_15ExternalTextureENSC_ISN_EENSE_ISN_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJSG_SL_SQ_EEERKS17_EEEDcSZ_DpT0_(WebGPU::Buffer *result, WebGPU::Buffer **a2, WebGPU::Buffer **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 != -1)
  {
    if (!v5)
    {
      uint64_t v6 = *a3;
      if (*a3) {
        ++*(_DWORD *)v6;
      }
      id result = *a2;
      *a2 = v6;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebGPU::Buffer::~Buffer(result, a2);
          return (WebGPU::Buffer *)WTF::fastFree(v8, v9);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      return result;
    }
    id result = (WebGPU::Buffer *)((uint64_t (*)(char *, uint64_t))off_1ECABB288[v5])(&v10, v4);
  }
  int v7 = *a3;
  if (*a3) {
    ++*(_DWORD *)v7;
  }
  *(void *)uint64_t v4 = v7;
  *(_DWORD *)(v4 + ++*(_DWORD *)(result + 8) = 0;
  return result;
}

WebGPU::TextureView *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN6WebGPU6BufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IKNSA_11TextureViewENSC_ISI_EENSE_ISI_EEEENS9_IKNSA_15ExternalTextureENSC_ISN_EENSE_ISN_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJSG_SL_SQ_EEERKS17_EEEDcSZ_DpT0_(WebGPU::TextureView *result, WebGPU::TextureView **a2, WebGPU::TextureView **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      uint64_t v6 = *a3;
      if (*a3) {
        ++*(_DWORD *)v6;
      }
      id result = *a2;
      *a2 = v6;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebGPU::TextureView::~TextureView(result, a2);
          return (WebGPU::TextureView *)WTF::fastFree(v8, v9);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      return result;
    }
    id result = (WebGPU::TextureView *)((uint64_t (*)(char *, uint64_t))off_1ECABB288[v5])(&v10, v4);
  }
  int v7 = *a3;
  if (*a3) {
    ++*(_DWORD *)v7;
  }
  *(void *)uint64_t v4 = v7;
  *(_DWORD *)(v4 + ++*(_DWORD *)(result + 8) = 1;
  return result;
}

WebGPU::ExternalTexture *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN6WebGPU6BufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IKNSA_11TextureViewENSC_ISI_EENSE_ISI_EEEENS9_IKNSA_15ExternalTextureENSC_ISN_EENSE_ISN_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJSG_SL_SQ_EEERKS17_EEEDcSZ_DpT0_(WebGPU::ExternalTexture *result, WebGPU::ExternalTexture **a2, WebGPU::ExternalTexture **a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 != -1)
  {
    if (v5 == 2)
    {
      uint64_t v6 = *a3;
      if (*a3) {
        ++*(_DWORD *)v6;
      }
      id result = *a2;
      *a2 = v6;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebGPU::ExternalTexture::~ExternalTexture(result, a2);
          return (WebGPU::ExternalTexture *)WTF::fastFree(v8, v9);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      return result;
    }
    id result = (WebGPU::ExternalTexture *)((uint64_t (*)(char *, uint64_t))off_1ECABB288[v5])(&v10, v4);
  }
  int v7 = *a3;
  if (*a3) {
    ++*(_DWORD *)v7;
  }
  *(void *)uint64_t v4 = v7;
  *(_DWORD *)(v4 + ++*(_DWORD *)(result + 8) = 2;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN6WebGPU6BufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IKNSA_11TextureViewENSC_ISI_EENSE_ISI_EEEENS9_IKNSA_15ExternalTextureENSC_ISN_EENSE_ISN_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJSG_SL_SQ_EEERKS18_EEEDcS10_DpT0_(uint64_t a1, void *a2, _DWORD **a3)
{
  unint64_t v3 = *a3;
  if (*a3) {
    ++*v3;
  }
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN6WebGPU6BufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IKNSA_11TextureViewENSC_ISI_EENSE_ISI_EEEENS9_IKNSA_15ExternalTextureENSC_ISN_EENSE_ISN_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJSG_SL_SQ_EEERKS18_EEEDcS10_DpT0_(uint64_t a1, void *a2, _DWORD **a3)
{
  unint64_t v3 = *a3;
  if (*a3) {
    ++*v3;
  }
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN6WebGPU6BufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IKNSA_11TextureViewENSC_ISI_EENSE_ISI_EEEENS9_IKNSA_15ExternalTextureENSC_ISN_EENSE_ISN_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJSG_SL_SQ_EEERKS18_EEEDcS10_DpT0_(uint64_t a1, void *a2, _DWORD **a3)
{
  unint64_t v3 = *a3;
  if (*a3) {
    ++*v3;
  }
  *a2 = v3;
}

WebGPU::RenderBundleEncoder *WTF::RefCounted<WebGPU::RenderBundleEncoder>::deref(WebGPU::RenderBundleEncoder *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebGPU::RenderBundleEncoder::~RenderBundleEncoder(result);
    return (WebGPU::RenderBundleEncoder *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void sub_18250E2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t *WTF::HashMap<unsigned long long,WebGPU::IndexBufferAndIndexData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::IndexBufferAndIndexData>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = (unsigned int **)(v3 + 8);
      do
      {
        if (*(v5 - 1) != (unsigned int *)-2)
        {
          uint64_t v6 = *v5;
          *uint64_t v5 = 0;
          if (v6)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v6);
              WTF::fastFree((WTF *)v6, a2);
            }
          }
        }
        v5 += 11;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

uint64_t WebGPU::RenderBundleEncoder::returnIfEncodingIsFinished(WebGPU::RenderBundleEncoder *this, NSString *a2)
{
  uint64_t v3 = a2;
  if (!*((unsigned char *)this + 385)) {
    goto LABEL_6;
  }
  uint64_t v4 = *((void *)this + 37);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      if (*(unsigned char *)(*(void *)(v5 + 152) + 76))
      {
        id v6 = 0;

        if (v6)
        {
LABEL_6:
          uint64_t v7 = 0;
          goto LABEL_21;
        }
      }
      else
      {
        id v8 = *(id *)(v5 + 16);

        if (v8) {
          goto LABEL_6;
        }
      }
    }
  }
  uint64_t v9 = *((void *)this + 1);
  MEMORY[0x18530AF50](&v20, v3);
  uint64_t v10 = *(void *)(v9 + 32);
  uint64_t v11 = 32 * *(unsigned int *)(v9 + 44);
  uint64_t v12 = v10 + v11;
  while (v11)
  {
    int v13 = *(_DWORD *)(v12 - 8);
    v12 -= 32;
    v11 -= 32;
    if (!v13)
    {
      uint64_t v14 = v10 + v11;
      if (!*(unsigned char *)(v14 + 16))
      {
        uint64_t v15 = v20;
        long long v20 = 0;
        *(_DWORD *)uint64_t v14 = 1;
        *(void *)(v14 + ++*(_DWORD *)(result + 8) = v15;
        *(unsigned char *)(v14 + 16) = 1;
      }
      goto LABEL_16;
    }
  }
  uint64_t v16 = *(void *)(v9 + 24);
  if (v16)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v16 + 16))(v16, 1, &v20);
    uint64_t v17 = *(void *)(v9 + 24);
    *(void *)(v9 + 24) = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
LABEL_16:
  unint64_t v18 = v20;
  long long v20 = 0;
  if (v18)
  {
    if (*v18 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v18 -= 2;
    }
  }
  uint64_t v7 = 1;
LABEL_21:

  return v7;
}

void sub_18250E6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a10 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void WebGPU::Device::createRenderBundleEncoder(uint64_t a1@<X0>, long long *a2@<X1>, WebGPU::RenderBundleEncoder *a3@<X8>)
{
  if (*(void *)a2 || !*(void *)(a1 + 8))
  {
    uint64_t v5 = (WebGPU::RenderBundleEncoder *)WTF::fastMalloc((WTF *)0x188);
    WebGPU::RenderBundleEncoder::RenderBundleEncoder(v5, (atomic_uchar *volatile *)a1, &cfstr_Createrenderbu.isa);
    *(void *)a3 = v5;
    return;
  }
  uint64_t v7 = objc_opt_new();
  [v7 setInheritBuffers:0];
  [v7 setInheritPipelineState:0];
  [v7 setMaxFragmentBufferBindCount:1];
  unint64_t v8 = *((void *)a2 + 2);
  unint64_t v9 = *(unsigned int *)(a1 + 200);
  if (v8 > v9)
  {
    uint64_t v10 = objc_msgSend(NSString, "stringWithFormat:", @"descriptor.colorFormatCount(%zu) > limits().maxColorAttachments(%u)", *((void *)a2 + 2), v9);
    MEMORY[0x18530AF50](&v70, v10);
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = 32 * *(unsigned int *)(a1 + 44);
    uint64_t v13 = v11 + v12;
    while (v12)
    {
      int v14 = *(_DWORD *)(v13 - 8);
      v13 -= 32;
      v12 -= 32;
      if (!v14)
      {
        uint64_t v15 = v11 + v12;
        if (!*(unsigned char *)(v15 + 16))
        {
          uint64_t v16 = (uint64_t)v70;
          uint64_t v70 = 0;
          *(_DWORD *)uint64_t v15 = 1;
          *(void *)(v15 + ++*(_DWORD *)(result + 8) = v16;
          *(unsigned char *)(v15 + 16) = 1;
        }
        goto LABEL_30;
      }
    }
    uint64_t v28 = *(void *)(a1 + 24);
    if (v28)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v28 + 16))(v28, 1, &v70);
      uint64_t v29 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = 0;
      if (v29) {
        (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
      }
    }
LABEL_30:
    int v30 = v70;
    uint64_t v70 = 0;
    if (v30)
    {
      if (*v30 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v30 -= 2;
      }
    }
LABEL_34:
    unsigned int v31 = v10;
    uint64_t v32 = (WebGPU::RenderBundleEncoder *)WTF::fastMalloc((WTF *)0x188);
    WebGPU::RenderBundleEncoder::RenderBundleEncoder(v32, (atomic_uchar *volatile *)a1, v31);
    *(void *)a3 = v32;

    goto LABEL_80;
  }
  if (v8)
  {
    unsigned int v17 = 0;
    uint64_t v18 = 0;
    unsigned int v19 = *(_DWORD *)(a1 + 204);
    do
    {
      uint64_t v20 = *((void *)a2 + 3);
      uint64_t v21 = *(unsigned int *)(v20 + 4 * v18);
      if (v21)
      {
        if (!WebGPU::Texture::isColorRenderableFormat(*(_DWORD *)(v20 + 4 * v18), a1))
        {
          uint64_t v10 = objc_msgSend(NSString, "stringWithFormat:", @"createRenderBundleEncoder - colorAttachment[%zu] with format %d is not renderable", v18, v21);
          MEMORY[0x18530AF50](&v70, v10);
          WebGPU::Device::generateAValidationError(a1, (uint64_t *)&v70);
          uint64_t v56 = v70;
          uint64_t v70 = 0;
          if (v56)
          {
            if (*v56 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v56 -= 2;
            }
          }
          goto LABEL_34;
        }
        unsigned int v22 = WebGPU::Texture::renderTargetPixelByteAlignment(v21);
        int v23 = WebGPU::Texture::renderTargetPixelByteCost(v21);
        if (v17 % v22) {
          unsigned int v24 = v22 - v17 % v22;
        }
        else {
          unsigned int v24 = 0;
        }
        v17 += v23 + v24;
        if (v17 > v19)
        {
          MEMORY[0x18530AF50](&v70, @"createRenderBundleEncoder - bytesPerSample > maxColorAttachmentBytesPerSample");
          WebGPU::Device::generateAValidationError(a1, (uint64_t *)&v70);
          unint64_t v25 = v70;
          uint64_t v70 = 0;
          if (v25)
          {
            if (*v25 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v25 -= 2;
            }
          }
          uint64_t v59 = (WebGPU::RenderBundleEncoder *)WTF::fastMalloc((WTF *)0x188);
          WebGPU::RenderBundleEncoder::RenderBundleEncoder(v59, (atomic_uchar *volatile *)a1, &cfstr_Createrenderbu_1.isa);
          *(void *)a3 = v59;
          goto LABEL_80;
        }
      }
      ++v18;
    }
    while (v8 != v18);
  }
  int v26 = *((_DWORD *)a2 + 8);
  if (v26)
  {
    if ((v26 - 38) >= 6)
    {
      uint64_t v10 = objc_msgSend(NSString, "stringWithFormat:", @"createRenderBundleEncoder - provided depthStencilFormat %d is not a depth or stencil format", *((unsigned int *)a2 + 8));
      MEMORY[0x18530AF50](&v70, v10);
      WebGPU::Device::generateAValidationError(a1, (uint64_t *)&v70);
      uint64_t v27 = v70;
      uint64_t v70 = 0;
      if (v27)
      {
        if (*v27 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v27 -= 2;
        }
      }
      goto LABEL_34;
    }
  }
  else if (!*((void *)a2 + 2))
  {
    MEMORY[0x18530AF50](&v70, @"createRenderBundleEncoder - zero color and depth-stencil formats provided");
    WebGPU::Device::generateAValidationError(a1, (uint64_t *)&v70);
    int v58 = v70;
    uint64_t v70 = 0;
    if (v58)
    {
      if (*v58 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v58 -= 2;
      }
    }
    WebGPU::RenderBundleEncoder::createInvalid(a3, (atomic_uchar *volatile *)a1, v57);
    goto LABEL_80;
  }
  id v69 = v7;
  uint64_t v33 = WTF::fastMalloc((WTF *)0x188);
  id v34 = v69;
  char v35 = 0;
  int v36 = 1;
  *(_DWORD *)uint64_t v33 = 1;
  *(unsigned char *)(v33 + 4) = 0;
  atomic_uchar *volatile v37 = *(atomic_uchar *volatile *)a1;
  atomic_compare_exchange_strong_explicit(*(atomic_uchar *volatile *)a1, (unsigned __int8 *)&v35, 1u, memory_order_acquire, memory_order_acquire);
  if (v35) {
    MEMORY[0x18530AEA0](v37);
  }
  ++*((void *)v37 + 1);
  atomic_compare_exchange_strong_explicit(v37, (unsigned __int8 *)&v36, 0, memory_order_release, memory_order_relaxed);
  if (v36 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v37);
  }
  *(void *)(v33 + ++*(_DWORD *)(result + 8) = a1;
  *(_OWORD *)(v33 + 16) = 0u;
  *(_OWORD *)(v33 + 32) = 0u;
  *(_OWORD *)(v33 + 4++*(_DWORD *)(result + 8) = 0u;
  *(_OWORD *)(v33 + 64) = 0u;
  id v38 = v34;
  *(void *)(v33 + 16++*(_DWORD *)(result + 8) = 0;
  *(void *)(v33 + 80) = v38;
  *(_OWORD *)(v33 + 8++*(_DWORD *)(result + 8) = 0u;
  *(_OWORD *)(v33 + 104) = 0u;
  *(_OWORD *)(v33 + 120) = 0u;
  *(_OWORD *)(v33 + 136) = 0u;
  *(_DWORD *)(v33 + 152) = 0;
  *(void *)(v33 + 160) = 3;
  *(void *)(v33 + 176) = 0;
  uint64_t v39 = [MEMORY[0x1E4F28E10] strongToStrongObjectsMapTable];
  *(_OWORD *)(v33 + 192) = 0u;
  *(void *)(v33 + 184) = v39;
  *(_OWORD *)(v33 + 20++*(_DWORD *)(result + 8) = 0u;
  *(unsigned char *)(v33 + 224) = 0;
  uint64_t v40 = (uint64_t *)(v33 + 224);
  *(unsigned char *)(v33 + 232) = 0;
  *(_OWORD *)(v33 + 240) = 0u;
  *(_OWORD *)(v33 + 256) = 0u;
  *(_OWORD *)(v33 + 272) = 0u;
  *(_OWORD *)(v33 + 28++*(_DWORD *)(result + 8) = 0u;
  *(void *)(v33 + 304) = 0;
  long long v41 = *a2;
  long long v42 = a2[1];
  *(_OWORD *)(v33 + 344) = a2[2];
  *(_OWORD *)(v33 + 32++*(_DWORD *)(result + 8) = v42;
  *(_OWORD *)(v33 + 312) = v41;
  uint64_t v43 = (void *)(v33 + 360);
  uint64_t v44 = *((void *)a2 + 3);
  if (!v44)
  {
    *uint64_t v43 = 0;
    *(void *)(v33 + 36++*(_DWORD *)(result + 8) = 0;
    goto LABEL_53;
  }
  unint64_t v45 = *((void *)a2 + 2);
  *uint64_t v43 = 0;
  *(void *)(v33 + 36++*(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(v33 + 372) = v45;
  if (!v45)
  {
LABEL_53:
    *(void *)(v33 + 376) = 0;
    *(_WORD *)(v33 + 384) = 0;
    *(_DWORD *)(v33 + 38++*(_DWORD *)(result + 8) = -1;
LABEL_67:
    uint64_t v62 = [MEMORY[0x1E4F1CA48] array];
    uint64_t v63 = *(void **)(v33 + 256);
    *(void *)(v33 + 256) = v62;

    if (*(unsigned char *)(v33 + 232))
    {
      uint64_t v65 = *v40;
      *uint64_t v40 = 0;
      if (v65)
      {
        uint64_t v66 = *(unsigned int *)(v65 - 4);
        if (v66)
        {
          uint64_t v67 = v65 + 8;
          do
          {
            if (*(_DWORD *)(v67 - 8) != -2)
            {
              unsigned int v68 = *(WTF **)v67;
              if (*(void *)v67)
              {
                *(void *)uint64_t v67 = 0;
                *(_DWORD *)(v67 + ++*(_DWORD *)(result + 8) = 0;
                WTF::fastFree(v68, v64);
              }
            }
            v67 += 24;
            --v66;
          }
          while (v66);
        }
        WTF::fastFree((WTF *)(v65 - 16), v64);
      }
    }
    else
    {
      *(void *)(v33 + 224) = 0;
      *(unsigned char *)(v33 + 232) = 1;
    }

    *(void *)a3 = v33;
LABEL_80:

    return;
  }
  if (!(v45 >> 30))
  {
    uint64_t v46 = WTF::fastMalloc((WTF *)(4 * v45));
    *(_DWORD *)(v33 + 36++*(_DWORD *)(result + 8) = v45;
    *(void *)(v33 + 360) = v46;
    unint64_t v47 = (v45 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v47 < 7)
    {
      uint64_t v48 = (_DWORD *)v46;
      uint64_t v49 = (int *)v44;
    }
    else
    {
      uint64_t v48 = (_DWORD *)v46;
      uint64_t v49 = (int *)v44;
      if ((unint64_t)(v46 - v44) >= 0x20)
      {
        unint64_t v50 = v47 + 1;
        uint64_t v51 = 4 * (v50 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v48 = (_DWORD *)(v46 + v51);
        uint64_t v49 = (int *)(v44 + v51);
        unsigned int v52 = (long long *)(v44 + 16);
        uint64_t v53 = (_OWORD *)(v46 + 16);
        uint64_t v54 = v50 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v55 = *v52;
          *(v53 - 1) = *(v52 - 1);
          *uint64_t v53 = v55;
          v52 += 2;
          v53 += 2;
          v54 -= 8;
        }
        while (v54);
        if (v50 == (v50 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_65:
          int v61 = *(_DWORD *)(v33 + 372);
          *(void *)(v33 + 376) = 0;
          *(_WORD *)(v33 + 384) = 0;
          *(_DWORD *)(v33 + 38++*(_DWORD *)(result + 8) = -1;
          if (v61) {
            *(void *)(v33 + 336) = v46;
          }
          goto LABEL_67;
        }
      }
    }
    do
    {
      int v60 = *v49++;
      *v48++ = v60;
    }
    while (v49 != (int *)(v44 + 4 * v45));
    goto LABEL_65;
  }
  __break(0xC471u);
}

void sub_18250EE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  WTF::fastFree(v16, v18);
  _Unwind_Resume(a1);
}

void sub_18250F09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_18250F0D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18250F0EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18250F108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18250F118(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebGPU::RenderBundleEncoder::createInvalid(WebGPU::RenderBundleEncoder *this, atomic_uchar *volatile *a2, NSString *a3)
{
  uint64_t v5 = @"createRenderBundleEncoder - zero color and depth-stencil formats provided";
  id v6 = (WebGPU::RenderBundleEncoder *)WTF::fastMalloc((WTF *)0x188);
  WebGPU::RenderBundleEncoder::RenderBundleEncoder(v6, a2, &cfstr_Createrenderbu_3.isa);
  *(void *)this = v6;
}

void sub_18250F19C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);

  _Unwind_Resume(a1);
}

void sub_18250F1BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *std::optional<WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>::~optional(uint64_t *a1, void *a2)
{
  if (*((unsigned char *)a1 + 8))
  {
    uint64_t v3 = *a1;
    if (*a1)
    {
      uint64_t v4 = *(unsigned int *)(v3 - 4);
      if (v4)
      {
        uint64_t v5 = v3 + 8;
        do
        {
          if (*(_DWORD *)(v5 - 8) != -2)
          {
            id v6 = *(WTF **)v5;
            if (*(void *)v5)
            {
              *(void *)uint64_t v5 = 0;
              *(_DWORD *)(v5 + ++*(_DWORD *)(result + 8) = 0;
              WTF::fastFree(v6, a2);
            }
          }
          v5 += 24;
          --v4;
        }
        while (v4);
      }
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }
  }
  return a1;
}

uint64_t WTF::Vector<WebGPU::RenderBundleEncoder::BufferAndOffset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(void ***)a1;
    uint64_t v5 = 40 * v3;
    do
    {
      id v6 = *v4;
      v4 += 5;

      v5 -= 40;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::Function<BOOL ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)uint64_t v4 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      uint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

WebGPU::RenderBundleEncoder *WebGPU::RenderBundleEncoder::RenderBundleEncoder(WebGPU::RenderBundleEncoder *this, atomic_uchar *volatile *a2, NSString *a3)
{
  uint64_t v5 = a3;
  char v6 = 0;
  int v7 = 1;
  *(_DWORD *)this = 1;
  *((unsigned char *)this + 4) = 0;
  atomic_uchar *volatile v8 = *a2;
  atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    MEMORY[0x18530AEA0](v8);
  }
  ++*((void *)v8 + 1);
  atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  }
  *((void *)this + 1) = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + ++*(_DWORD *)(result + 8) = 0u;
  *(_OWORD *)((char *)this + 140) = 0u;
  *((void *)this + 20) = 3;
  *((unsigned char *)this + 232) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  *(_OWORD *)((char *)this + 16++*(_DWORD *)(result + 8) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 209) = 0u;
  *((void *)this + 3++*(_DWORD *)(result + 8) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 1++*(_DWORD *)(result + 8) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((void *)this + 47) = v5;
  *((_WORD *)this + 192) = 0;
  *((_DWORD *)this + 97) = -1;

  return this;
}

void sub_18250F440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebGPU::RenderBundleEncoder::makeInvalid(WebGPU::RenderBundleEncoder *this, NSString *a2)
{
  uint64_t v10 = a2;
  uint64_t v4 = (void *)*((void *)this + 9);
  *((void *)this + 9) = 0;

  uint64_t v5 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0;

  char v6 = (void *)*((void *)this + 23);
  *((void *)this + 23) = 0;

  objc_storeStrong((id *)this + 47, a2);
  int v7 = (void *)*((void *)this + 32);
  *((void *)this + 32) = 0;

  uint64_t v8 = *((void *)this + 37);
  if (v8)
  {
    unint64_t v9 = *(WebGPU::RenderPassEncoder **)(v8 + 8);
    if (v9) {
      WebGPU::RenderPassEncoder::makeInvalid(v9, v10);
    }
  }
}

void sub_18250F4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WebGPU::RenderBundleEncoder::~RenderBundleEncoder(WebGPU::RenderBundleEncoder *this)
{
  uint64_t v3 = (WTF *)*((void *)this + 45);
  if (v3)
  {
    *((void *)this + 45) = 0;
    *((_DWORD *)this + 92) = 0;
    WTF::fastFree(v3, v2);
  }

  uint64_t v5 = (unsigned int *)*((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, v4);
  }

  uint64_t v7 = *((void *)this + 31);
  if (v7)
  {
    uint64_t v8 = *(unsigned int *)(v7 - 4);
    if (v8)
    {
      unint64_t v9 = (unsigned int **)(v7 + 8);
      do
      {
        if (*(v9 - 1) != (unsigned int *)-2)
        {
          uint64_t v10 = *v9;
          *unint64_t v9 = 0;
          if (v10)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v10);
              WTF::fastFree((WTF *)v10, v6);
            }
          }
        }
        v9 += 11;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v7 - 16), v6);
  }
  uint64_t v11 = *((void *)this + 30);
  if (v11)
  {
    uint64_t v12 = *(unsigned int *)(v11 - 4);
    if (v12)
    {
      uint64_t v13 = (WebGPU::BindGroup **)(v11 + 8);
      do
      {
        if (*((_DWORD *)v13 - 2) != -2)
        {
          uint64_t v16 = *v13;
          *uint64_t v13 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 1)
            {
              WebGPU::BindGroup::~BindGroup(v16, v6);
              WTF::fastFree(v14, v15);
            }
            else
            {
              --*(_DWORD *)v16;
            }
          }
        }
        v13 += 2;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree((WTF *)(v11 - 16), v6);
  }
  if (*((unsigned char *)this + 232))
  {
    uint64_t v17 = *((void *)this + 28);
    if (v17)
    {
      uint64_t v18 = *(unsigned int *)(v17 - 4);
      if (v18)
      {
        uint64_t v19 = v17 + 8;
        do
        {
          if (*(_DWORD *)(v19 - 8) != -2)
          {
            uint64_t v20 = *(WTF **)v19;
            if (*(void *)v19)
            {
              *(void *)uint64_t v19 = 0;
              *(_DWORD *)(v19 + ++*(_DWORD *)(result + 8) = 0;
              WTF::fastFree(v20, v6);
            }
          }
          v19 += 24;
          --v18;
        }
        while (v18);
      }
      WTF::fastFree((WTF *)(v17 - 16), v6);
    }
  }
  uint64_t v21 = *((unsigned int *)this + 55);
  if (v21)
  {
    unsigned int v22 = (void **)*((void *)this + 26);
    uint64_t v23 = 40 * v21;
    do
    {
      unsigned int v24 = *v22;
      v22 += 5;

      v23 -= 40;
    }
    while (v23);
  }
  unint64_t v25 = (WTF *)*((void *)this + 26);
  if (v25)
  {
    *((void *)this + 26) = 0;
    *((_DWORD *)this + 54) = 0;
    WTF::fastFree(v25, v6);
  }
  uint64_t v26 = *((unsigned int *)this + 51);
  if (v26)
  {
    uint64_t v27 = (void **)*((void *)this + 24);
    uint64_t v28 = 40 * v26;
    do
    {
      uint64_t v29 = *v27;
      v27 += 5;

      v28 -= 40;
    }
    while (v28);
  }
  int v30 = (WTF *)*((void *)this + 24);
  if (v30)
  {
    *((void *)this + 24) = 0;
    *((_DWORD *)this + 50) = 0;
    WTF::fastFree(v30, v6);
  }

  uint64_t v32 = *((unsigned int *)this + 45);
  if (v32)
  {
    uint64_t v33 = (uint64_t *)*((void *)this + 21);
    uint64_t v34 = 8 * v32;
    do
    {
      uint64_t v35 = *v33;
      *uint64_t v33 = 0;
      if (v35) {
        (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
      }
      ++v33;
      v34 -= 8;
    }
    while (v34);
  }
  int v36 = (WTF *)*((void *)this + 21);
  if (v36)
  {
    *((void *)this + 21) = 0;
    *((_DWORD *)this + 44) = 0;
    WTF::fastFree(v36, v31);
  }

  uint64_t v38 = *((void *)this + 8);
  if (v38) {
    WTF::fastFree((WTF *)(v38 - 16), v37);
  }
  uint64_t v39 = (WebGPU::RenderPipeline *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 1)
    {
      WebGPU::RenderPipeline::~RenderPipeline(v39, v37);
      WTF::fastFree(v41, v42);
      uint64_t v40 = (WebGPU::Buffer *)*((void *)this + 2);
      *((void *)this + 2) = 0;
      if (!v40) {
        goto LABEL_62;
      }
      goto LABEL_59;
    }
    --*(_DWORD *)v39;
  }
  uint64_t v40 = (WebGPU::Buffer *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v40) {
    goto LABEL_62;
  }
LABEL_59:
  if (*(_DWORD *)v40 == 1)
  {
    WebGPU::Buffer::~Buffer(v40, v37);
    WTF::fastFree(v43, v44);
  }
  else
  {
    --*(_DWORD *)v40;
  }
LABEL_62:
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)this + 1, v37);
}

id WebGPU::RenderBundleEncoder::currentRenderCommand(WebGPU::RenderBundleEncoder *this)
{
  uint64_t v2 = *((void *)this + 37);
  if (v2 && (uint64_t v3 = *(void *)(v2 + 8)) != 0)
  {
    if (*(unsigned char *)(*(void *)(v3 + 152) + 76))
    {
      uint64_t v4 = 0;
      goto LABEL_5;
    }
    uint64_t v7 = (id *)(v3 + 16);
  }
  else
  {
    uint64_t v4 = (void *)*((void *)this + 38);
    if (v4)
    {
LABEL_5:
      id v5 = v4;
      return v5;
    }
    uint64_t v7 = (id *)((char *)this + 304);
    unint64_t v8 = *((void *)this + 12);
    if (v8 >= [*((id *)this + 9) size])
    {
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v9 = [*((id *)this + 9) indirectRenderCommandAtIndex:*((void *)this + 12)];
    }
    id v10 = *v7;
    *uint64_t v7 = (id)v9;
  }
  id v5 = *v7;
  return v5;
}

BOOL WebGPU::RenderBundleEncoder::addResource(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  uint64_t v11 = *(void *)(a1 + 296);
  if (!v11 || !*(void *)(v11 + 8))
  {
    uint64_t v15 = [v7 objectForKey:v8];
    if (v15)
    {
      objc_msgSend(v15, "setUsage:", objc_msgSend(v15, "usage") | objc_msgSend(v10, "usage"));
      objc_msgSend(v15, "setRenderStages:", objc_msgSend(v15, "renderStages") | objc_msgSend(v10, "renderStages"));
      objc_msgSend(v15, "setEntryUsage:", objc_msgSend(v15, "entryUsage") | objc_msgSend(v10, "entryUsage"));
      objc_msgSend(v15, "setBinding:", objc_msgSend(v10, "binding"));
    }
    else
    {
      [v7 setObject:v10 forKey:v8];
    }

    BOOL v16 = 1;
    goto LABEL_35;
  }
  uint64_t v12 = [v9 renderStages];
  if (v8 && v12)
  {
    uint64_t v13 = *(void **)(a1 + 296);
    if (v13) {
      uint64_t v13 = (void *)v13[1];
    }
    if (*(unsigned char *)(v13[19] + 76)) {
      int v14 = 0;
    }
    else {
      int v14 = (void *)v13[2];
    }
    id v17 = v14;
    objc_msgSend(v17, "useResource:usage:stages:", v8, objc_msgSend(v10, "usage"), objc_msgSend(v10, "renderStages"));
  }
  uint64_t v18 = *(void *)(a1 + 296);
  if (v18)
  {
    uint64_t v19 = *(uint64_t **)(v18 + 8);
    if (v10)
    {
LABEL_17:
      [v10 resource];
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v19 = 0;
    if (v10) {
      goto LABEL_17;
    }
  }
  uint64_t v26 = 0;
  uint64_t v27 = 0;
LABEL_20:
  WebGPU::RenderPassEncoder::addResourceToActiveResources(v19, (uint64_t)&v26, v8, [v10 entryUsage]);
  if (v27 != -1) {
    ((void (*)(char *, uint64_t *))off_1ECABB2D0[v27])(&v28, &v26);
  }
  uint64_t v20 = *(void *)(a1 + 296);
  if (!v20)
  {
    uint64_t v21 = 0;
    if (v10) {
      goto LABEL_24;
    }
LABEL_26:
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    goto LABEL_27;
  }
  uint64_t v21 = *(void *)(v20 + 8);
  if (!v10) {
    goto LABEL_26;
  }
LABEL_24:
  [v10 resource];
LABEL_27:
  WebGPU::RenderPassEncoder::setCommandEncoder(v21, (uint64_t)&v26);
  if (v27 != -1) {
    ((void (*)(char *, uint64_t *))off_1ECABB2D0[v27])(&v28, &v26);
  }
  unsigned int v22 = *(void **)(a1 + 296);
  if (v22) {
    unsigned int v22 = (void *)v22[1];
  }
  if (*(unsigned char *)(v22[19] + 76)) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = (void *)v22[2];
  }
  id v24 = v23;
  BOOL v16 = v24 != 0;

LABEL_35:
  return v16;
}

void sub_18250FB84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18250FC08()
{
  JUMPOUT(0x18250FC10);
}

BOOL WebGPU::RenderBundleEncoder::addResource(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = 0;
  int v6 = 0;
  BOOL v3 = WebGPU::RenderBundleEncoder::addResource(a1, a2, a3, 2, (uint64_t)&v5);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t *))off_1ECABB2D0[v6])(&v7, &v5);
  }
  return v3;
}

void sub_18250FC88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_1ECABB2D0[a12])(v12 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebGPU::RenderBundleEncoder::addResource(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9 = a2;
  id v10 = a3;
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(a1 + 296);
  if (v12 && v10 && (uint64_t v13 = *(void *)(v12 + 8)) != 0)
  {
    if (*(unsigned char *)(*(void *)(v13 + 152) + 76)) {
      int v14 = 0;
    }
    else {
      int v14 = *(void **)(v13 + 16);
    }
    id v19 = v14;
    [v19 useResource:v11 usage:1 stages:a4];
    BOOL v18 = v19 != 0;
  }
  else
  {
    uint64_t v15 = [ResourceUsageAndRenderStage alloc];
    v21[0] = 0;
    int v22 = -1;
    uint64_t v16 = *(unsigned int *)(a5 + 8);
    if (v16 != -1)
    {
      ((void (*)(char *, unsigned char *, uint64_t))off_1ECABB2E8[v16])(&v23, v21, a5);
      int v22 = v16;
    }
    id v17 = [(ResourceUsageAndRenderStage *)v15 initWithUsage:1 renderStages:a4 entryUsage:1 binding:0x7FFFFFFFLL resource:v21];
    BOOL v18 = WebGPU::RenderBundleEncoder::addResource(a1, v9, v11, v17);

    if (v22 != -1) {
      ((void (*)(char *, unsigned char *))off_1ECABB2D0[v22])(&v24, v21);
    }
    int v22 = -1;
  }

  return v18;
}

void sub_18250FE24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18250FE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, int a11, int a12, int a13, int a14, __int16 a15, char a16, char a17)
{
  if (a12 != -1) {
    ((void (*)(char *, char *))off_1ECABB2D0[a12])(&a17, &a10);
  }
  a12 = -1;

  _Unwind_Resume(a1);
}

void sub_18250FE8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebGPU::RenderBundleEncoder::executePreDrawCommands(WebGPU::RenderBundleEncoder *this)
{
  if (!*((void *)this + 10)) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 6);
  if (!v2)
  {
    uint64_t v11 = @"Pipeline was not set prior to draw command";
LABEL_52:
    WebGPU::RenderBundleEncoder::makeInvalid(this, &v11->isa);
    return 0;
  }
  unint64_t v4 = *((void *)this + 35);
  unint64_t v3 = *((void *)this + 36);
  uint64_t v5 = *(void *)(v2 + 136);
  int v6 = *(_DWORD **)(v5 + 64);
  if (!v6)
  {
    id v9 = 0;
    LODWORD(v7) = 0;
LABEL_13:
    id v8 = &v6[6 * v7];
    goto LABEL_14;
  }
  uint64_t v7 = *(v6 - 1);
  id v8 = &v6[6 * v7];
  if (!*(v6 - 3))
  {
    id v9 = &v6[6 * v7];
    goto LABEL_13;
  }
  id v9 = *(_DWORD **)(v5 + 64);
  if (v7)
  {
    uint64_t v10 = 24 * v7;
    id v9 = *(_DWORD **)(v5 + 64);
    while (*v9 >= 0xFFFFFFFE)
    {
      v9 += 6;
      v10 -= 24;
      if (!v10)
      {
        id v9 = v8;
        break;
      }
    }
  }
LABEL_14:
  if (v6) {
    v6 += 6 * *(v6 - 1);
  }
  if (v6 == v9)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = v8;
      if (v9 + 6 != v8)
      {
        uint64_t v13 = v9 + 6;
        while (*v13 >= 0xFFFFFFFE)
        {
          v13 += 6;
          if (v13 == v8)
          {
            uint64_t v13 = v8;
            break;
          }
        }
      }
      v12 += v9[5];
      id v9 = v13;
    }
    while (v13 != v6);
  }
  if (__CFADD__(v4, 4 * v12))
  {
    uint64_t v11 = @"Invalid vertexDynamicOffset";
    goto LABEL_52;
  }
  *((void *)this + 35) = v4 + 4 * v12;
  int v14 = *(_DWORD **)(v5 + 72);
  if (!v14)
  {
    id v17 = 0;
    LODWORD(v15) = 0;
LABEL_37:
    uint64_t v16 = &v14[6 * v15];
    goto LABEL_38;
  }
  uint64_t v15 = *(v14 - 1);
  uint64_t v16 = &v14[6 * v15];
  if (!*(v14 - 3))
  {
    id v17 = &v14[6 * v15];
    goto LABEL_37;
  }
  id v17 = v14;
  if (v15)
  {
    uint64_t v18 = 24 * v15;
    id v17 = v14;
    while (*v17 >= 0xFFFFFFFE)
    {
      v17 += 6;
      v18 -= 24;
      if (!v18)
      {
        id v17 = v16;
        break;
      }
    }
  }
LABEL_38:
  if (v14) {
    v14 += 6 * *(v14 - 1);
  }
  if (v14 == v17)
  {
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = 0;
    do
    {
      uint64_t v20 = v16;
      if (v17 + 6 != v16)
      {
        uint64_t v20 = v17 + 6;
        while (*v20 >= 0xFFFFFFFE)
        {
          v20 += 6;
          if (v20 == v16)
          {
            uint64_t v20 = v16;
            break;
          }
        }
      }
      v19 += v17[5];
      id v17 = v20;
    }
    while (v20 != v14);
  }
  if (__CFADD__(v3, 4 * v19))
  {
    uint64_t v11 = @"Invalid fragmentDynamicOffset";
    goto LABEL_52;
  }
  *((void *)this + 36) = v3 + 4 * v19;
  uint64_t v23 = WebGPU::RenderBundleEncoder::currentRenderCommand(this);
  char v24 = (uint64_t *)v23;
  if (!v23) {
    goto LABEL_154;
  }
  WebGPU::PipelineLayout::errorValidatingBindGroupCompatibility(*(unsigned char **)(*((void *)this + 6) + 136), (uint64_t *)this + 30);
  uint64_t v26 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (v26) {
    goto LABEL_91;
  }
  if (*((void *)this + 13)) {
    objc_msgSend(v24, "setRenderPipelineState:");
  }
  uint64_t v27 = *((void *)this + 6);
  if (!v27)
  {
    uint64_t v26 = @"pipeline is not set";
    goto LABEL_91;
  }
  char v28 = *(_DWORD **)(v27 + 128);
  if (!v28)
  {
    int v30 = 0;
    uint64_t v29 = 0;
    goto LABEL_69;
  }
  uint64_t v29 = *(v28 - 1);
  int v30 = &v28[8 * v29];
  if (!*(v28 - 3))
  {
LABEL_69:
    uint64_t v32 = v30;
    int v30 = &v28[8 * v29];
    goto LABEL_70;
  }
  if (!v29)
  {
    uint64_t v33 = 0;
    uint64_t v32 = v28;
    goto LABEL_73;
  }
  uint64_t v31 = 32 * v29;
  uint64_t v32 = v28;
  while (*v32 >= 0xFFFFFFFE)
  {
    v32 += 8;
    v31 -= 32;
    if (!v31)
    {
      uint64_t v32 = v30;
      break;
    }
  }
LABEL_70:
  if (!v28) {
    goto LABEL_74;
  }
  uint64_t v33 = *(v28 - 1);
LABEL_73:
  v28 += 8 * v33;
LABEL_74:
  if (v28 == v32)
  {
LABEL_87:
    if ((*((_DWORD *)this + 15) + *((_DWORD *)this + 14) + 2) > *(_DWORD *)(*((void *)this + 1) + 108))
    {
      uint64_t v26 = @"Too many bind groups and vertex buffers used";
      goto LABEL_91;
    }
  }
  else
  {
    uint64_t v34 = *((void *)this + 8);
    if (v34)
    {
      int v35 = *(_DWORD *)(v34 - 8);
      while (1)
      {
        uint64_t v36 = *v32;
        unsigned int v37 = 9 * ((v36 + ~(v36 << 15)) ^ ((v36 + ~(v36 << 15)) >> 10));
        unsigned int v38 = (v37 ^ (v37 >> 6)) + ~((v37 ^ (v37 >> 6)) << 11);
        unsigned int v39 = (v38 ^ HIWORD(v38)) & v35;
        int v40 = *(_DWORD *)(v34 + 16 * v39);
        if (v40 != v36) {
          break;
        }
LABEL_82:
        long long v42 = v32 + 8;
        uint64_t v32 = v30;
        if (v42 != v30)
        {
          uint64_t v32 = v42;
          while (*v32 >= 0xFFFFFFFE)
          {
            v32 += 8;
            if (v32 == v30)
            {
              uint64_t v32 = v30;
              break;
            }
          }
        }
        if (v32 == v28) {
          goto LABEL_87;
        }
      }
      int v41 = 1;
      while (v40 != -1)
      {
        unsigned int v39 = (v39 + v41) & v35;
        int v40 = *(_DWORD *)(v34 + 16 * v39);
        ++v41;
        if (v40 == v36) {
          goto LABEL_82;
        }
      }
    }
    else
    {
      uint64_t v36 = *v32;
    }
    objc_msgSend(NSString, "stringWithFormat:", @"Buffer index[%u] is missing", v36);
    uint64_t v26 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (v26)
    {
LABEL_91:
      WebGPU::RenderBundleEncoder::makeInvalid(this, &v26->isa);

LABEL_92:
      uint64_t v21 = 0;
      goto LABEL_155;
    }
  }
  unint64_t v87 = v3;
  uint64_t v43 = *((unsigned int *)this + 51);
  if (v43)
  {
    unint64_t v44 = 0;
    uint64_t v45 = 32;
    do
    {
      if (v44 >= *((unsigned int *)this + 51))
      {
        __break(0xC471u);
        JUMPOUT(0x1825106F8);
      }
      uint64_t v46 = *((void *)this + 24) + v45;
      unint64_t v47 = *(void **)(v46 - 32);
      if (v47)
      {
        unint64_t v48 = *(void *)(v46 - 24);
        unint64_t v49 = [v47 length];
        unint64_t v50 = *((unsigned int *)this + 51);
        if (v48 >= v49)
        {
          if (v44 >= v50) {
            goto LABEL_164;
          }
          if (*(void *)(*((void *)this + 24) + v45))
          {
            WebGPU::RenderBundleEncoder::makeInvalid(this, &cfstr_AttemptingToSe.isa);
            goto LABEL_92;
          }
          id v51 = *(id *)(*((void *)this + 1) + 288);
          [v24 setVertexBuffer:v51 offset:0 atIndex:v44];
        }
        else
        {
          if (v44 >= v50)
          {
            __break(0xC471u);
            JUMPOUT(0x182510700);
          }
          [v24 setVertexBuffer:*(void *)(*((void *)this + 24) + v45 - 32) offset:*(void *)(*((void *)this + 24) + v45 - 24) atIndex:v44];
        }
      }
      ++v44;
      v45 += 40;
    }
    while (v43 != v44);
  }
  uint64_t v52 = *((unsigned int *)this + 55);
  if (v52)
  {
    uint64_t v53 = 0;
    unint64_t v54 = 0;
    uint64_t v55 = 40 * v52;
    do
    {
      if (v54 >= *((unsigned int *)this + 55))
      {
        __break(0xC471u);
        JUMPOUT(0x1825106F0);
      }
      uint64_t v56 = *((void *)this + 26);
      uint64_t v57 = *(void *)(v56 + v53);
      if (v57) {
        [v24 setFragmentBuffer:v57 offset:*(void *)(v56 + v53 + 8) atIndex:v54];
      }
      ++v54;
      v53 += 40;
    }
    while (v55 != v53);
  }
  long long v86 = (uint64_t *)((char *)this + 224);
  if (!*((unsigned char *)this + 232)
    || ((uint64_t v58 = *v86,
         uint64_t v59 = WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::begin((_DWORD *)*v86),
         int v60 = v59,
         int v61 = v25,
         !v58)
      ? (uint64_t v62 = 0)
      : (uint64_t v62 = (_DWORD *)(v58 + 24 * *(unsigned int *)(v58 - 4))),
        v62 == v59))
  {
LABEL_145:
    uint64_t v83 = (void *)*((void *)this + 33);
    if (v83 && v4 < [v83 length]) {
      [v24 setVertexBuffer:*((void *)this + 33) offset:v4 atIndex:*(unsigned int *)(*((void *)this + 1) + 108)];
    }
    long long v84 = (void *)*((void *)this + 34);
    if (v84 && v87 < [v84 length])
    {
      uint64_t v85 = *((unsigned int *)this + 55);
      if (!v85)
      {
LABEL_164:
        __break(0xC471u);
        JUMPOUT(0x1825106E8);
      }
      [v24 setFragmentBuffer:*((void *)this + 34) offset:v87 atIndex:v85 - 1];
    }
    if (*((unsigned char *)this + 232)) {
      WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::clear(v86, v25);
    }
LABEL_154:
    uint64_t v21 = 1;
    goto LABEL_155;
  }
  unint64_t v88 = v87 + 12;
  unsigned int v89 = v62;
  BOOL v90 = v24;
  while (1)
  {
    char v24 = *(uint64_t **)(*((void *)this + 6) + 136);
    unsigned int v64 = *v60;
    uint64_t v65 = (void *)*((void *)this + 33);
    if (v65)
    {
      id v66 = v65;
      unint64_t v67 = [v66 length];
      if (v67)
      {
        uint64_t v68 = [v66 contents];

        unint64_t v69 = v67 - v4;
        if (v67 < v4) {
          goto LABEL_144;
        }
      }
      else
      {
        uint64_t v68 = 0;

        unint64_t v69 = -(uint64_t)v4;
        if (v4) {
          goto LABEL_144;
        }
      }
      uint64_t v70 = WebGPU::PipelineLayout::offsetVectorForBindGroup((uint64_t)v24, v64, v24 + 8, (uint64_t *)v60 + 1, 1);
      if (v70)
      {
        uint64_t v71 = v70[3];
        if (v71)
        {
          char v72 = *(const void **)v70;
          unint64_t v73 = WebGPU::PipelineLayout::vertexOffsetForBindGroup((WebGPU::PipelineLayout *)v24, v64);
          if (v73 >> 62)
          {
            WebGPU::RenderBundleEncoder::makeInvalid(this, &cfstr_IncorrectDataF.isa);
            goto LABEL_159;
          }
          if (v69 < 4 * v73 || v69 - 4 * v73 < 4 * v71)
          {
LABEL_144:
            __break(1u);
            goto LABEL_145;
          }
          memcpy((void *)(v68 + v4 + 4 * v73), v72, 4 * v71);
        }
      }
    }
    uint64_t v74 = (void *)*((void *)this + 34);
    if (v74)
    {
      id v75 = v74;
      unint64_t v76 = [v75 length];
      if (v76)
      {
        uint64_t v77 = [v75 contents];

        unint64_t v78 = v76 - v88;
        if (v76 < v88) {
          goto LABEL_144;
        }
      }
      else
      {
        uint64_t v77 = 0;

        unint64_t v78 = -(uint64_t)v88;
        if (v87 != -12) {
          goto LABEL_144;
        }
      }
      uint64_t v79 = WebGPU::PipelineLayout::offsetVectorForBindGroup((uint64_t)v24, v64, v24 + 9, (uint64_t *)v60 + 1, 2);
      if (v79)
      {
        uint64_t v80 = v79[3];
        if (v80) {
          break;
        }
      }
    }
LABEL_136:
    v60 += 6;
    if (v60 == v61)
    {
      int v60 = v61;
      uint64_t v63 = v89;
      char v24 = v90;
    }
    else
    {
      uint64_t v63 = v89;
      char v24 = v90;
      while (*v60 >= 0xFFFFFFFE)
      {
        v60 += 6;
        if (v60 == v61)
        {
          int v60 = v61;
          break;
        }
      }
    }
    if (v60 == v63) {
      goto LABEL_145;
    }
  }
  uint64_t v81 = *(const void **)v79;
  unint64_t v82 = WebGPU::PipelineLayout::fragmentOffsetForBindGroup((WebGPU::PipelineLayout *)v24, v64);
  if (!(v82 >> 62))
  {
    if (v78 < 4 * v82 || v78 - 4 * v82 < 4 * v80) {
      goto LABEL_144;
    }
    memcpy((void *)(v77 + v88 + 4 * v82), v81, 4 * v80);
    goto LABEL_136;
  }
  WebGPU::RenderBundleEncoder::makeInvalid(this, &cfstr_IncorrectDataF_0.isa);
LABEL_159:
  uint64_t v21 = 0;
  char v24 = v90;
LABEL_155:

  return v21;
}

void sub_18251070C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182510720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182510734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18251074C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182510764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182510780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182510798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1825107AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1825107C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1825107DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1825107F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182510810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_182510828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182510840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182510858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_DWORD *WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::begin(_DWORD *result)
{
  if (!result) {
    return 0;
  }
  uint64_t v1 = *(result - 1);
  uint64_t v2 = &result[6 * v1];
  if (*(result - 3))
  {
    if (v1)
    {
      uint64_t v3 = 24 * v1;
      while (*result >= 0xFFFFFFFE)
      {
        result += 6;
        v3 -= 24;
        if (!v3) {
          return v2;
        }
      }
    }
  }
  else
  {
    result += 6 * v1;
  }
  return result;
}

uint64_t *WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::clear(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  if (*result)
  {
    *id result = 0;
    uint64_t v3 = *(unsigned int *)(v2 - 4);
    if (v3)
    {
      uint64_t v4 = v2 + 8;
      do
      {
        if (*(_DWORD *)(v4 - 8) != -2)
        {
          uint64_t v5 = *(WTF **)v4;
          if (*(void *)v4)
          {
            *(void *)uint64_t v4 = 0;
            *(_DWORD *)(v4 + ++*(_DWORD *)(result + 8) = 0;
            WTF::fastFree(v5, a2);
          }
        }
        v4 += 24;
        --v3;
      }
      while (v3);
    }
    return (uint64_t *)WTF::fastFree((WTF *)(v2 - 16), a2);
  }
  return result;
}

void WebGPU::RenderBundleEncoder::draw(WebGPU::RenderBundleEncoder *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "RenderBundleEncoder::FinalizeRenderCommand WebGPU::RenderBundleEncoder::draw(uint32_t, uint32_t, uint32_t, uint32_t)");
  if ((WebGPU::RenderBundleEncoder::returnIfEncodingIsFinished(this, (NSString *)v10) & 1) == 0)
  {
    uint64_t v11 = *((void *)this + 10);

    if (!v11 || (WebGPU::RenderBundleEncoder::executePreDrawCommands(this) & 1) == 0) {
      goto LABEL_14;
    }
    WebGPU::RenderBundleEncoder::currentRenderCommand(this);
    id v60 = (id)objc_claimAutoreleasedReturnValue();
    if (v60)
    {
      uint64_t v12 = *((void *)this + 6);
      if (!v12)
      {
        WebGPU::RenderBundleEncoder::makeInvalid(this, &cfstr_MissingPipelin.isa);
        goto LABEL_132;
      }
      uint64_t v13 = *(unsigned int **)(v12 + 128);
      if (v13)
      {
        uint64_t v14 = *(v13 - 1);
        uint64_t v15 = &v13[8 * v14];
        if (*(v13 - 3))
        {
          uint64_t v16 = v13;
          if (v14)
          {
            uint64_t v17 = 32 * v14;
            uint64_t v16 = v13;
            while (*v16 >= 0xFFFFFFFE)
            {
              v16 += 8;
              v17 -= 32;
              if (!v17)
              {
                uint64_t v16 = v15;
                break;
              }
            }
          }
        }
        else
        {
          uint64_t v16 = &v13[8 * v14];
          uint64_t v15 = v16;
        }
      }
      else
      {
        uint64_t v16 = 0;
        uint64_t v15 = 0;
      }
      if (v13) {
        v13 += 8 * *(v13 - 1);
      }
      if (v13 != v16)
      {
        BOOL v28 = __CFADD__(a4, a2);
        if (__CFADD__(a4, a2)) {
          uint64_t v29 = 0;
        }
        else {
          uint64_t v29 = a4 + a2;
        }
        uint64_t v30 = a5 + a3;
        if (__CFADD__(a5, a3)) {
          uint64_t v31 = 0;
        }
        else {
          uint64_t v31 = a5 + a3;
        }
        if (__CFADD__(a5, a3))
        {
          if (v28)
          {
            while (v16[6] >= 2)
            {
              uint64_t v33 = v16 + 8;
              uint64_t v16 = v15;
              if (v33 != v15)
              {
                uint64_t v16 = v33;
                while (*v16 >= 0xFFFFFFFE)
                {
                  v16 += 8;
                  if (v16 == v15)
                  {
                    uint64_t v16 = v15;
                    break;
                  }
                }
              }
              if (v16 == v13) {
                goto LABEL_117;
              }
            }
          }
          else
          {
            if (a4 + a2)
            {
              unint64_t v32 = v29 - 1;
              while (1)
              {
                unsigned int v34 = v16[6];
                if (v34)
                {
                  if (v34 == 1) {
                    goto LABEL_102;
                  }
                }
                else
                {
                  uint64_t v35 = *v16;
                  if (*((_DWORD *)this + 51) <= v35)
                  {
LABEL_127:
                    objc_msgSend(NSString, "stringWithFormat:", @"vertex buffer validation failed as vertex buffer %d was not set", v35);
                    uint64_t v55 = (NSString *)objc_claimAutoreleasedReturnValue();
                    WebGPU::RenderBundleEncoder::makeInvalid(this, v55);
                    goto LABEL_131;
                  }
                  unint64_t v36 = *((void *)v16 + 1);
                  if (!is_mul_ok(v32, v36))
                  {
LABEL_154:
                    __break(0xC471u);
                    return;
                  }
                  unint64_t v37 = *(void *)(*((void *)this + 24) + 40 * v35 + 32);
                  uint64_t v38 = *((void *)v16 + 2);
                  if (__CFADD__(v32 * v36, v38) || v32 * v36 + v38 > v37)
                  {
                    uint64_t v46 = v29;
                    goto LABEL_130;
                  }
                }
                unsigned int v39 = v16 + 8;
                uint64_t v16 = v15;
                if (v39 != v15)
                {
                  uint64_t v16 = v39;
                  while (*v16 >= 0xFFFFFFFE)
                  {
                    v16 += 8;
                    if (v16 == v15)
                    {
                      uint64_t v16 = v15;
                      break;
                    }
                  }
                }
                if (v16 == v13) {
                  goto LABEL_117;
                }
              }
            }
            while (v16[6] != 1)
            {
              int v40 = v16 + 8;
              uint64_t v16 = v15;
              if (v40 != v15)
              {
                uint64_t v16 = v40;
                while (*v16 >= 0xFFFFFFFE)
                {
                  v16 += 8;
                  if (v16 == v15)
                  {
                    uint64_t v16 = v15;
                    break;
                  }
                }
              }
              if (v16 == v13) {
                goto LABEL_117;
              }
            }
          }
          goto LABEL_102;
        }
        if (v28)
        {
          if (v30)
          {
            unint64_t v41 = v30 - 1;
            while (1)
            {
              unsigned int v42 = v16[6];
              if (v42 == 1)
              {
                uint64_t v35 = *v16;
                if (*((_DWORD *)this + 51) <= v35) {
                  goto LABEL_127;
                }
                unint64_t v36 = *((void *)v16 + 1);
                if (!is_mul_ok(v41, v36)) {
                  goto LABEL_154;
                }
                unint64_t v37 = *(void *)(*((void *)this + 24) + 40 * v35 + 32);
                uint64_t v38 = *((void *)v16 + 2);
                if (__CFADD__(v41 * v36, v38) || v41 * v36 + v38 > v37)
                {
                  uint64_t v46 = v31;
                  goto LABEL_130;
                }
              }
              else if (!v42)
              {
                goto LABEL_102;
              }
              uint64_t v43 = v16 + 8;
              uint64_t v16 = v15;
              if (v43 != v15)
              {
                uint64_t v16 = v43;
                while (*v16 >= 0xFFFFFFFE)
                {
                  v16 += 8;
                  if (v16 == v15)
                  {
                    uint64_t v16 = v15;
                    break;
                  }
                }
              }
              if (v16 == v13) {
                goto LABEL_117;
              }
            }
          }
          while (v16[6])
          {
            unint64_t v44 = v16 + 8;
            uint64_t v16 = v15;
            if (v44 != v15)
            {
              uint64_t v16 = v44;
              while (*v16 >= 0xFFFFFFFE)
              {
                v16 += 8;
                if (v16 == v15)
                {
                  uint64_t v16 = v15;
                  break;
                }
              }
            }
            if (v16 == v13) {
              goto LABEL_117;
            }
          }
LABEL_102:
          WebGPU::RenderBundleEncoder::makeInvalid(this, &cfstr_StridecountInv.isa);
          goto LABEL_132;
        }
        while (1)
        {
          unsigned int v45 = v16[6];
          uint64_t v46 = v29;
          if (!v45 || (uint64_t v46 = v31, v45 == 1))
          {
            if (v46)
            {
              uint64_t v35 = *v16;
              if (*((_DWORD *)this + 51) <= v35) {
                goto LABEL_127;
              }
              unint64_t v36 = *((void *)v16 + 1);
              if (!is_mul_ok(v46 - 1, v36)) {
                goto LABEL_154;
              }
              uint64_t v47 = (v46 - 1) * v36;
              unint64_t v37 = *(void *)(*((void *)this + 24) + 40 * v35 + 32);
              uint64_t v38 = *((void *)v16 + 2);
              BOOL v48 = __CFADD__(v47, v38);
              unint64_t v49 = v47 + v38;
              if (v48 || v49 > v37) {
                break;
              }
            }
          }
          unint64_t v50 = v16 + 8;
          uint64_t v16 = v15;
          if (v50 != v15)
          {
            uint64_t v16 = v50;
            while (*v16 >= 0xFFFFFFFE)
            {
              v16 += 8;
              if (v16 == v15)
              {
                uint64_t v16 = v15;
                break;
              }
            }
          }
          if (v16 == v13) {
            goto LABEL_117;
          }
        }
LABEL_130:
        objc_msgSend(NSString, "stringWithFormat:", @"Buffer[%d] fails: (strideCount(%llu) - 1) * bufferData.stride(%llu) + bufferData.lastStride(%llu) > bufferSize(%llu)", v35, v46, v36, v38, v37);
        uint64_t v55 = (NSString *)objc_claimAutoreleasedReturnValue();
        WebGPU::RenderBundleEncoder::makeInvalid(this, v55);
LABEL_131:

LABEL_132:
        uint64_t v56 = (void *)*((void *)this + 38);
        *((void *)this + 3++*(_DWORD *)(result + 8) = 0;

        unint64_t v57 = *((void *)this + 12) + 1;
        *((void *)this + 12) = v57;
        if (_MergedGlobals_0 == 1)
        {
          LODWORD(v5++*(_DWORD *)(result + 8) = dword_1EC00AD74;
          if (!*((void *)this + 10))
          {
LABEL_139:

            return;
          }
        }
        else
        {
          uint64_t v58 = *(void *)(*((void *)this + 1) + 176) >> 9;
          if (v58 <= 0x186A0) {
            LODWORD(v5++*(_DWORD *)(result + 8) = 100000;
          }
          dword_1EC00AD74 = v58;
          _MergedGlobals_0 = 1;
          if (!*((void *)this + 10)) {
            goto LABEL_139;
          }
        }
        if (v57 >= v58)
        {
          uint64_t v59 = *((void *)this + 37);
          if ((!v59 || !*(void *)(v59 + 8)) && !*((void *)this + 9)) {
            WebGPU::RenderBundleEncoder::endCurrentICB((id *)this);
          }
        }
        goto LABEL_139;
      }
LABEL_117:
      if (!a2 || !a3) {
        goto LABEL_132;
      }
      [v60 drawPrimitives:*((void *)this + 20) vertexStart:a4 vertexCount:a2 instanceCount:a3 baseInstance:a5];
LABEL_120:

      objc_msgSend(*((id *)this + 10), "setCommandTypes:", objc_msgSend(*((id *)this + 10), "commandTypes") | 1);
      id v51 = (void *)*((void *)this + 38);
      *((void *)this + 3++*(_DWORD *)(result + 8) = 0;

      unint64_t v52 = *((void *)this + 12) + 1;
      *((void *)this + 12) = v52;
      if (_MergedGlobals_0 == 1)
      {
        LODWORD(v53) = dword_1EC00AD74;
        if (!*((void *)this + 10)) {
          return;
        }
      }
      else
      {
        uint64_t v53 = *(void *)(*((void *)this + 1) + 176) >> 9;
        if (v53 <= 0x186A0) {
          LODWORD(v53) = 100000;
        }
        dword_1EC00AD74 = v53;
        _MergedGlobals_0 = 1;
        if (!*((void *)this + 10)) {
          return;
        }
      }
      if (v52 >= v53)
      {
        uint64_t v54 = *((void *)this + 37);
        if ((!v54 || !*(void *)(v54 + 8)) && !*((void *)this + 9)) {
          WebGPU::RenderBundleEncoder::endCurrentICB((id *)this);
        }
      }
      return;
    }
    *(void *)&long long v61 = __PAIR64__(a3, a2);
    *((void *)&v61 + 1) = __PAIR64__(a5, a4);
    ++*(_DWORD *)this;
    uint64_t v22 = WTF::fastMalloc((WTF *)0x20);
    uint64_t v23 = (void (**)(void))&unk_1ECABB328;
    *(void *)uint64_t v22 = &unk_1ECABB328;
    *(_OWORD *)(v22 + ++*(_DWORD *)(result + 8) = v61;
    uint64_t v62 = (void (***)(void))v22;
    *(void *)(v22 + 24) = this;
    if (*((void *)this + 10))
    {
      uint64_t v24 = *((unsigned int *)this + 45);
      if (v24 == *((_DWORD *)this + 44))
      {
        unint64_t v25 = WTF::Vector<WTF::Function<BOOL ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 168, v24 + 1, (unint64_t)&v62);
        uint64_t v24 = *((unsigned int *)this + 45);
        uint64_t v26 = (uint64_t *)(*((void *)this + 21) + 8 * v24);
        uint64_t v22 = *(void *)v25;
      }
      else
      {
        uint64_t v26 = (uint64_t *)(*((void *)this + 21) + 8 * v24);
        unint64_t v25 = (char *)&v62;
      }
      *(void *)unint64_t v25 = 0;
      *uint64_t v26 = v22;
      *((_DWORD *)this + 45) = v24 + 1;
      uint64_t v27 = v62;
      uint64_t v62 = 0;
      if (!v27) {
        goto LABEL_120;
      }
      uint64_t v23 = *v27;
    }
    else
    {
      uint64_t v62 = 0;
    }
    v23[1]();
    goto LABEL_120;
  }

LABEL_14:
  uint64_t v18 = (void *)*((void *)this + 38);
  *((void *)this + 3++*(_DWORD *)(result + 8) = 0;

  unint64_t v19 = *((void *)this + 12) + 1;
  *((void *)this + 12) = v19;
  if (_MergedGlobals_0 == 1)
  {
    LODWORD(v20) = dword_1EC00AD74;
    if (!*((void *)this + 10)) {
      return;
    }
    goto LABEL_16;
  }
  uint64_t v20 = *(void *)(*((void *)this + 1) + 176) >> 9;
  if (v20 <= 0x186A0) {
    LODWORD(v20) = 100000;
  }
  dword_1EC00AD74 = v20;
  _MergedGlobals_0 = 1;
  if (*((void *)this + 10))
  {
LABEL_16:
    if (v19 >= v20)
    {
      uint64_t v21 = *((void *)this + 37);
      if ((!v21 || !*(void *)(v21 + 8)) && !*((void *)this + 9))
      {
        WebGPU::RenderBundleEncoder::endCurrentICB((id *)this);
      }
    }
  }
}

void sub_182511198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_1825111B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19 = a18;
  a18 = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  WebGPU::RenderBundleEncoder::draw(unsigned int,unsigned int,unsigned int,unsigned int)::$_0::~$_0((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void sub_182511208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_18251121C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebGPU::RenderBundleEncoder::finalizeRenderCommand(WebGPU::RenderBundleEncoder *this)
{
  uint64_t v2 = (void *)*((void *)this + 38);
  *((void *)this + 3++*(_DWORD *)(result + 8) = 0;

  unint64_t v3 = *((void *)this + 12) + 1;
  *((void *)this + 12) = v3;
  if (_MergedGlobals_0 == 1)
  {
    LODWORD(v4) = dword_1EC00AD74;
    if (!*((void *)this + 10)) {
      return;
    }
    goto LABEL_3;
  }
  uint64_t v4 = *(void *)(*((void *)this + 1) + 176) >> 9;
  if (v4 <= 0x186A0) {
    LODWORD(v4) = 100000;
  }
  dword_1EC00AD74 = v4;
  _MergedGlobals_0 = 1;
  if (*((void *)this + 10))
  {
LABEL_3:
    if (v3 >= v4)
    {
      uint64_t v5 = *((void *)this + 37);
      if ((!v5 || !*(void *)(v5 + 8)) && !*((void *)this + 9))
      {
        WebGPU::RenderBundleEncoder::endCurrentICB((id *)this);
      }
    }
  }
}

char *WebGPU::RenderBundleEncoder::recordCommand(char *result, unint64_t a2)
{
  if (*((void *)result + 10))
  {
    uint64_t v2 = (uint64_t *)a2;
    unint64_t v3 = result;
    result += 168;
    uint64_t v4 = *((unsigned int *)v3 + 45);
    if (v4 == *((_DWORD *)v3 + 44))
    {
      id result = WTF::Vector<WTF::Function<BOOL ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v4 + 1, a2);
      uint64_t v2 = (uint64_t *)result;
      uint64_t v4 = *((unsigned int *)v3 + 45);
      uint64_t v5 = (void *)(*((void *)v3 + 21) + 8 * v4);
    }
    else
    {
      uint64_t v5 = (void *)(*(void *)result + 8 * v4);
    }
    uint64_t v6 = *v2;
    *uint64_t v2 = 0;
    *uint64_t v5 = v6;
    *((_DWORD *)v3 + 45) = v4 + 1;
  }
  return result;
}

uint64_t WebGPU::RenderBundleEncoder::draw(unsigned int,unsigned int,unsigned int,unsigned int)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(WebGPU::RenderBundleEncoder **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (!v2) {
    return a1;
  }
  if (*(_DWORD *)v2 != 1)
  {
    --*(_DWORD *)v2;
    return a1;
  }
  WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v2);
  WTF::fastFree(v4, v5);
  return a1;
}

void WebGPU::RenderBundleEncoder::endCurrentICB(id *this)
{
  uint64_t v1 = (WebGPU::RenderBundleEncoder *)this;
  uint64_t v229 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this[12];
  this[12] = 0;
  if (v2 && ![this[10] commandTypes])
  {
    __break(0xC471u);
    JUMPOUT(0x182512500);
  }
  [*((id *)v1 + 10) setMaxVertexBufferBindCount:(*(_DWORD *)(*((void *)v1 + 1) + 108) + 1)];
  [*((id *)v1 + 10) setMaxFragmentBufferBindCount:(*(_DWORD *)(*((void *)v1 + 1) + 104) + 1)];
  unint64_t v3 = *((unsigned int *)v1 + 51);
  if ([*((id *)v1 + 10) maxVertexBufferBindCount] <= v3)
  {
    unint64_t v6 = *((unsigned int *)v1 + 55);
    if ([*((id *)v1 + 10) maxFragmentBufferBindCount] <= v6)
    {
LABEL_5:
      if (!*((void *)v1 + 35)) {
        goto LABEL_13;
      }
      goto LABEL_9;
    }
  }
  else
  {
    WTF::Vector<WebGPU::RenderBundleEncoder::BufferAndOffset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((uint64_t)v1 + 192, [*((id *)v1 + 10) maxVertexBufferBindCount]);
    unint64_t v4 = *((unsigned int *)v1 + 55);
    if ([*((id *)v1 + 10) maxFragmentBufferBindCount] <= v4) {
      goto LABEL_5;
    }
  }
  WTF::Vector<WebGPU::RenderBundleEncoder::BufferAndOffset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((uint64_t)v1 + 208, [*((id *)v1 + 10) maxFragmentBufferBindCount]);
  if (!*((void *)v1 + 35)) {
    goto LABEL_13;
  }
LABEL_9:
  if (!*((void *)v1 + 33))
  {
    uint64_t v7 = *((void *)v1 + 1);
    id v8 = objc_msgSend(*(id *)(v7 + 8), "newBufferWithLength:options:");
    WebGPU::Device::setOwnerWithIdentity(v7, v8);
    id v9 = (void *)*((void *)v1 + 33);
    *((void *)v1 + 33) = v8;

    uint64_t v10 = (void *)*((void *)v1 + 23);
    uint64_t v11 = (void *)*((void *)v1 + 33);
    v217[0] = 0;
    LODWORD(v217[1]) = 0;
    BOOL v12 = WebGPU::RenderBundleEncoder::addResource((uint64_t)v1, v10, v11, 1, (uint64_t)v217);
    if (LODWORD(v217[1]) != -1) {
      ((void (*)(_OWORD *, WTF **))off_1ECABB2D0[LODWORD(v217[1])])(v216, v217);
    }
    if (!v12) {
      return;
    }
  }
LABEL_13:
  *((void *)v1 + 35) = 0;
  uint64_t v197 = v1;
  if (*((void *)v1 + 34)) {
    goto LABEL_27;
  }
  uint64_t v13 = *((void *)v1 + 1);
  if ((unint64_t)(*((void *)v1 + 36) + 12) <= 1) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = *((void *)v1 + 36) + 12;
  }
  uint64_t v15 = (void *)[*(id *)(v13 + 8) newBufferWithLength:v14 options:0];
  WebGPU::Device::setOwnerWithIdentity(v13, v15);
  uint64_t v16 = (void *)*((void *)v1 + 34);
  *((void *)v1 + 34) = v15;

  id v17 = *((id *)v1 + 34);
  unint64_t v18 = [v17 length];
  if (v18 < 4)
  {
    unint64_t v20 = 0;
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = (_DWORD *)[v17 contents];
    unint64_t v20 = v18 >> 2;
  }

  id v21 = *((id *)v1 + 34);
  unint64_t v22 = [v21 length];
  if (v22 < 4)
  {
    unint64_t v24 = 0;
    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v23 = [v21 contents];
    unint64_t v24 = v22 >> 2;
  }

  if (!v20)
  {
    __break(0xC471u);
    goto LABEL_209;
  }
  *uint64_t v19 = 0;
  if (v20 == 1 || (v19[1] = 1065353216, v24 <= 2)) {
LABEL_209:
  }
    __break(1u);
  *(_DWORD *)(v23 + ++*(_DWORD *)(result + 8) = *((_DWORD *)v1 + 97);
  unint64_t v25 = (void *)*((void *)v1 + 23);
  uint64_t v26 = (void *)*((void *)v1 + 34);
  v217[0] = 0;
  LODWORD(v217[1]) = 0;
  BOOL v27 = WebGPU::RenderBundleEncoder::addResource((uint64_t)v1, v25, v26, 2, (uint64_t)v217);
  if (LODWORD(v217[1]) != -1) {
    ((void (*)(_OWORD *, WTF **))off_1ECABB2D0[LODWORD(v217[1])])(v216, v217);
  }
  if (!v27) {
    return;
  }
LABEL_27:
  *((void *)v1 + 36) = 0;
  uint64_t v28 = *((void *)v1 + 37);
  if (!v28 || !*(void *)(v28 + 8))
  {
    id v36 = *(id *)(*((void *)v1 + 1) + 8);
    uint64_t v37 = [v36 newIndirectCommandBufferWithDescriptor:*((void *)v1 + 10) maxCommandCount:v2 options:0];
    unsigned int v39 = (void *)*((void *)v1 + 9);
    uint64_t v38 = (id *)((char *)v1 + 72);
    id *v38 = (id)v37;

    if (!*v38 || (char *)[*v38 size] != v2)
    {
      WebGPU::RenderBundleEncoder::makeInvalid(v197, &cfstr_Mtlindirectcom.isa);
      return;
    }
    WebGPU::Device::setOwnerWithIdentity(*((void *)v197 + 1), *((void **)v197 + 9));
    uint64_t v1 = v197;
    uint64_t v29 = *((unsigned int *)v197 + 45);
    if (v29) {
      goto LABEL_30;
    }
LABEL_38:
    uint64_t v31 = 0;
    uint64_t v33 = 0;
    uint64_t v35 = *((void *)v1 + 37);
    if (!v35) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  uint64_t v29 = *((unsigned int *)v1 + 45);
  if (!v29) {
    goto LABEL_38;
  }
LABEL_30:
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = *((void *)v1 + 21);
  uint64_t v33 = ((v29 - 1) & 0x1FFFFFFFFFFFFFFFLL) + 1;
  uint64_t v34 = 8 * v29;
  while (1)
  {
    v31 += (*(unsigned int (**)(void))(**(void **)(v32 + 8 * v30) + 16))(*(void *)(v32 + 8 * v30));
    if (v31 == v2) {
      break;
    }
    ++v30;
    v34 -= 8;
    if (!v34)
    {
      uint64_t v1 = v197;
      uint64_t v35 = *((void *)v197 + 37);
      if (v35) {
        goto LABEL_42;
      }
      goto LABEL_43;
    }
  }
  uint64_t v33 = v30 + 1;
  uint64_t v31 = v2;
  uint64_t v1 = v197;
  uint64_t v35 = *((void *)v197 + 37);
  if (!v35) {
    goto LABEL_43;
  }
LABEL_42:
  if (*(void *)(v35 + 8)) {
    return;
  }
LABEL_43:
  uint64_t v40 = *((unsigned int *)v1 + 45);
  if (v33 != v40)
  {
    unint64_t v44 = (void *)*((void *)v1 + 21);
    unsigned int v45 = (char *)&v44[v33];
    if (v33)
    {
      uint64_t v46 = 8 * v33;
      uint64_t v47 = (uint64_t *)*((void *)v1 + 21);
      do
      {
        uint64_t v48 = *v47;
        *uint64_t v47 = 0;
        if (v48) {
          (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
        }
        ++v47;
        v46 -= 8;
      }
      while (v46);
      uint64_t v1 = v197;
      unint64_t v49 = (char *)(*((void *)v197 + 21) + 8 * *((unsigned int *)v197 + 45));
      if (v33 >= 1)
      {
        if (v45 != v49)
        {
          do
          {
            uint64_t v50 = v44[v33];
            v44[v33] = 0;
            *unint64_t v44 = v50;
            uint64_t v51 = v44[v33];
            v44[v33] = 0;
            if (v51) {
              (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
            }
            ++v44;
          }
          while (&v44[v33] != (void *)v49);
        }
LABEL_71:
        *((_DWORD *)v1 + 45) -= v33;
        goto LABEL_72;
      }
    }
    else
    {
      unint64_t v49 = (char *)&v44[v40];
    }
    if (v49 != v45)
    {
      unint64_t v52 = (void *)((char *)v44 + ((v49 - v45) & 0xFFFFFFFFFFFFFFF8) - 8);
      do
      {
        uint64_t v53 = *((void *)v49 - 1);
        v49 -= 8;
        *(void *)unint64_t v49 = 0;
        void *v52 = v53;
        uint64_t v54 = *(void *)v49;
        *(void *)unint64_t v49 = 0;
        if (v54) {
          (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
        }
        --v52;
      }
      while (v49 != v45);
    }
    goto LABEL_71;
  }
  if (*((_DWORD *)v1 + 44))
  {
    unint64_t v41 = (WTF *)*((void *)v1 + 21);
    if (v40)
    {
      uint64_t v42 = 8 * v33;
      do
      {
        uint64_t v43 = *(void *)v41;
        *(void *)unint64_t v41 = 0;
        if (v43) {
          (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
        }
        unint64_t v41 = (WTF *)((char *)v41 + 8);
        v42 -= 8;
      }
      while (v42);
      *((_DWORD *)v1 + 45) = 0;
      unint64_t v41 = (WTF *)*((void *)v1 + 21);
    }
    if (v41)
    {
      *((void *)v1 + 21) = 0;
      *((_DWORD *)v1 + 44) = 0;
      WTF::fastFree(v41, v5);
      uint64_t v1 = v197;
    }
  }
  [*((id *)v1 + 10) setCommandTypes:0];
  uint64_t v1 = v197;
LABEL_72:
  *((void *)v1 + 12) = v2 - v31;
  unint64_t v188 = (void *)*((void *)v1 + 32);
  uint64_t v55 = (void *)*((void *)v1 + 23);
  uint64_t v56 = (void *)*((void *)v1 + 13);
  unint64_t v57 = (void *)*((void *)v1 + 14);
  uint64_t v191 = *((void *)v1 + 17);
  uint64_t v192 = *((void *)v1 + 16);
  int v58 = *((_DWORD *)v1 + 36);
  int v59 = *((_DWORD *)v1 + 37);
  int v60 = *((_DWORD *)v1 + 38);
  long long v61 = (void *)*((void *)v1 + 34);
  uint64_t v189 = *((void *)v1 + 15);
  uint64_t v190 = *((void *)v1 + 6);
  uint64_t v62 = (id *)*((void *)v1 + 1);
  id v196 = *((id *)v1 + 9);
  id v63 = v55;
  id v193 = v56;
  id v194 = v57;
  id v195 = v61;
  *(_OWORD *)unint64_t v227 = 0u;
  *(_OWORD *)unint64_t v228 = 0u;
  *(_OWORD *)int64x2_t v225 = 0u;
  *(_OWORD *)unint64_t v226 = 0u;
  *(_OWORD *)__int32 v223 = 0u;
  *(_OWORD *)int v224 = 0u;
  *(_OWORD *)unint64_t v221 = 0u;
  *(_OWORD *)int v222 = 0u;
  *(_OWORD *)long long v219 = 0u;
  *(_OWORD *)long long v220 = 0u;
  *(_OWORD *)int v217 = 0u;
  *(_OWORD *)unsigned int v218 = 0u;
  memset(v216, 0, sizeof(v216));
  long long v210 = 0u;
  long long v211 = 0u;
  long long v208 = 0u;
  long long v209 = 0u;
  obuint64_t j = v63;
  uint64_t v64 = [obj countByEnumeratingWithState:&v208 objects:v215 count:16];
  if (v64)
  {
    uint64_t v65 = *(void *)v209;
    uint64_t v199 = *(void *)v209;
    do
    {
      uint64_t v66 = 0;
      uint64_t v201 = v64;
      do
      {
        if (*(void *)v209 != v65) {
          objc_enumerationMutation(obj);
        }
        id v67 = *(id *)(*((void *)&v208 + 1) + 8 * v66);
        id v212 = v67;
        if (v67)
        {
          uint64_t v68 = [obj objectForKey:v67];
          if ([v68 renderStages] && objc_msgSend(v68, "usage"))
          {
            uint64_t v69 = [v68 renderStages];
            uint64_t v70 = &v217[6 * v69] + 2 * [v68 usage];
            uint64_t v71 = (uint64_t)(v70 - 8);
            uint64_t v72 = *((unsigned int *)v70 - 13);
            if (v72 == *((_DWORD *)v70 - 14))
            {
              unint64_t v73 = WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v71, v72 + 1, (unint64_t)&v212);
              uint64_t v74 = (void *)(*(void *)v71 + 8 * *(unsigned int *)(v71 + 12));
              id v75 = *(id *)v73;
            }
            else
            {
              uint64_t v74 = (void *)(*(void *)v71 + 8 * v72);
              id v75 = v212;
            }
            *uint64_t v74 = v75;
            ++*(_DWORD *)(v71 + 12);
            uint64_t v76 = [v68 renderStages];
            uint64_t v77 = [v68 usage];
            LODWORD(v204) = [v68 entryUsage];
            HIDWORD(v204) = [v68 binding];
            if (v68)
            {
              [v68 resource];
            }
            else
            {
              BOOL v205 = 0;
              double v206 = 0;
            }
            unint64_t v78 = &v216[3 * v76 - 4 + v77];
            *(void *)id v207 = 0;
            *(void *)&v207[8] = 0;
            uint64_t v79 = *((unsigned int *)v78 + 3);
            if (v79 == *((_DWORD *)v78 + 2))
            {
              uint64_t v80 = v62;
              unint64_t v81 = WTF::Vector<WebGPU::BindGroupEntryUsageData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v78, v79 + 1, (unint64_t)&v204);
              unint64_t v82 = v81;
              unsigned int v83 = *((_DWORD *)v78 + 3);
              uint64_t v84 = *(void *)v78;
              uint64_t v85 = *(void *)v78 + 40 * v83;
              *(void *)uint64_t v85 = *(void *)v81;
              *(unsigned char *)(v85 + ++*(_DWORD *)(result + 8) = 0;
              uint64_t v86 = v85 + 8;
              *(_DWORD *)(v85 + 16) = -1;
              unint64_t v87 = (_DWORD *)(v85 + 16);
              uint64_t v88 = *(unsigned int *)(v81 + 16);
              if (v88 != -1)
              {
                ((void (*)(char *, uint64_t, unint64_t))off_1ECABB300[v88])(&v213, v86, v81 + 8);
                _DWORD *v87 = v88;
              }
              *(_OWORD *)(v84 + 40 * v83 + 24) = *(_OWORD *)(v82 + 24);
              uint64_t v62 = v80;
            }
            else
            {
              uint64_t v89 = *(void *)v78;
              uint64_t v90 = *(void *)v78 + 40 * v79;
              *(void *)uint64_t v90 = v204;
              *(unsigned char *)(v90 + ++*(_DWORD *)(result + 8) = 0;
              uint64_t v91 = v90 + 8;
              *(_DWORD *)(v90 + 16) = -1;
              uint64_t v92 = (_DWORD *)(v90 + 16);
              int v93 = (int)v206;
              if (v206 != -1)
              {
                ((void (*)(char *, uint64_t, WTF **))off_1ECABB300[v206])(&v213, v91, &v205);
                *uint64_t v92 = v93;
              }
              *(_OWORD *)(v89 + 40 * v79 + 24) = *(_OWORD *)v207;
            }
            ++*((_DWORD *)v78 + 3);
            uint64_t v65 = v199;
            uint64_t v64 = v201;
            if (v206 != -1) {
              ((void (*)(char *, WTF **))off_1ECABB2D0[v206])(&v214, &v205);
            }
          }
        }
        ++v66;
      }
      while (v64 != v66);
      uint64_t v64 = [obj countByEnumeratingWithState:&v208 objects:v215 count:16];
    }
    while (v64);
  }

  int v94 = WebGPU::Device::icbCommandClampFunction((WebGPU::Device *)v62, MTLIndexTypeUInt32);
  unint64_t v202 = (void *)[v94 newArgumentEncoderWithBufferIndex:1];

  unint64_t v95 = [v202 encodedLength];
  if (v95 <= 1) {
    uint64_t v96 = 1;
  }
  else {
    uint64_t v96 = v95;
  }
  unint64_t v97 = (void *)[v62[1] newBufferWithLength:v96 options:0];
  WebGPU::Device::setOwnerWithIdentity((uint64_t)v62, v97);
  uint64_t v200 = v97;
  [v97 setLabel:@"ICB Argument Buffer"];
  [v202 setArgumentBuffer:v97 offset:0];
  [v202 setIndirectCommandBuffer:v196 atIndex:0];
  unint64_t v98 = [RenderBundleICBWithResources alloc];
  char v198 = (uint64_t *)((char *)v197 + 248);
  LODWORD(v99) = v58;
  LODWORD(v100) = v59;
  LODWORD(v101) = v60;
  uint64_t v102 = [(RenderBundleICBWithResources *)v98 initWithICB:v196 containerBuffer:v97 pipelineState:v193 depthStencilState:v194 cullMode:v189 frontFace:v192 depthClipMode:v99 depthBias:v100 depthBiasSlopeScale:v101 depthBiasClamp:v191 fragmentDynamicOffsetsBuffer:v195 pipeline:v190 minVertexCounts:(char *)v197 + 248];
  uint64_t v104 = 0;
  do
  {
    uint64_t v105 = 0;
    uint64_t v106 = v104 + 1;
    do
    {
      while (1)
      {
        long long v107 = &v217[6 * v104] + 2 * v105;
        if (*((_DWORD *)v107 + 3)) {
          break;
        }
        if (++v105 == 3) {
          goto LABEL_102;
        }
      }
      int v108 = v102;
      uint64_t v109 = [(RenderBundleICBWithResources *)v102 resources];
      uint64_t v110 = v109;
      int v111 = &v216[3 * v104 + v105];
      unsigned int v112 = *v107;
      *long long v107 = 0;
      unsigned int v204 = v112;
      unsigned int v113 = v107[1];
      v107[1] = 0;
      BOOL v205 = v113;
      unint64_t v114 = *(WTF **)v111;
      *(void *)int v111 = 0;
      double v206 = v114;
      uint64_t v115 = *((void *)v111 + 1);
      *((void *)v111 + 1) = 0;
      *(void *)id v207 = v115;
      *(void *)&v207[8] = ++v105;
      *(void *)&v207[16] = v104 + 1;
      uint64_t v116 = *(unsigned int *)(v109 + 12);
      if (v116 == *(_DWORD *)(v109 + 8))
      {
        int v117 = WTF::Vector<WebGPU::BindableResources,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v109, v116 + 1, (unint64_t)&v204);
        uint64_t v118 = *(void *)v110 + 48 * *(unsigned int *)(v110 + 12);
        *(void *)uint64_t v118 = 0;
        *(void *)(v118 + ++*(_DWORD *)(result + 8) = 0;
        uint64_t v119 = *(void *)v117;
        *(void *)int v117 = 0;
        *(void *)uint64_t v118 = v119;
        LODWORD(v119) = *((_DWORD *)v117 + 2);
        *((_DWORD *)v117 + 2) = 0;
        *(_DWORD *)(v118 + ++*(_DWORD *)(result + 8) = v119;
        LODWORD(v119) = *((_DWORD *)v117 + 3);
        *((_DWORD *)v117 + 3) = 0;
        *(_DWORD *)(v118 + 12) = v119;
        *(void *)(v118 + 16) = 0;
        *(void *)(v118 + 24) = 0;
        uint64_t v120 = *((void *)v117 + 2);
        *((void *)v117 + 2) = 0;
        *(void *)(v118 + 16) = v120;
        LODWORD(v120) = *((_DWORD *)v117 + 6);
        *((_DWORD *)v117 + 6) = 0;
        *(_DWORD *)(v118 + 24) = v120;
        LODWORD(v120) = *((_DWORD *)v117 + 7);
        *((_DWORD *)v117 + 7) = 0;
        *(_DWORD *)(v118 + 2++*(_DWORD *)(result + 8) = v120;
        long long v121 = *((_OWORD *)v117 + 2);
      }
      else
      {
        uint64_t v118 = *(void *)v109 + 48 * v116;
        *(void *)uint64_t v118 = 0;
        *(void *)(v118 + ++*(_DWORD *)(result + 8) = 0;
        unsigned int v122 = v204;
        unsigned int v204 = 0;
        *(void *)uint64_t v118 = v122;
        LODWORD(v122) = v205;
        LODWORD(v205) = 0;
        *(_DWORD *)(v118 + ++*(_DWORD *)(result + 8) = v122;
        LODWORD(v122) = HIDWORD(v205);
        HIDWORD(v205) = 0;
        *(_DWORD *)(v118 + 12) = v122;
        *(void *)(v118 + 16) = 0;
        *(void *)(v118 + 24) = 0;
        unsigned int v123 = v206;
        double v206 = 0;
        *(void *)(v118 + 16) = v123;
        LODWORD(v123) = *(_DWORD *)v207;
        *(_DWORD *)id v207 = 0;
        *(_DWORD *)(v118 + 24) = v123;
        LODWORD(v123) = *(_DWORD *)&v207[4];
        *(_DWORD *)&v207[4] = 0;
        *(_DWORD *)(v118 + 2++*(_DWORD *)(result + 8) = v123;
        long long v121 = *(_OWORD *)&v207[8];
      }
      *(_OWORD *)(v118 + 32) = v121;
      ++*(_DWORD *)(v110 + 12);
      BOOL v124 = v206;
      if (*(_DWORD *)&v207[4])
      {
        uint64_t v125 = 40 * *(unsigned int *)&v207[4];
        unint64_t v126 = (char *)v206 + 8;
        do
        {
          uint64_t v127 = *((unsigned int *)v126 + 2);
          if (v127 != -1) {
            ((void (*)(id *, char *))off_1ECABB2D0[v127])(&v212, v126);
          }
          *((_DWORD *)v126 + 2) = -1;
          v126 += 40;
          v125 -= 40;
        }
        while (v125);
        BOOL v124 = v206;
      }
      if (v124)
      {
        double v206 = 0;
        *(_DWORD *)id v207 = 0;
        WTF::fastFree(v124, v103);
      }
      if (HIDWORD(v205))
      {
        BOOL v128 = (id *)v204;
        uint64_t v129 = 8 * HIDWORD(v205);
        do
        {

          v129 -= 8;
        }
        while (v129);
      }
      unint64_t v130 = v204;
      if (v204)
      {
        unsigned int v204 = 0;
        LODWORD(v205) = 0;
        WTF::fastFree(v130, v103);
      }
      uint64_t v102 = v108;
    }
    while (v105 != 3);
LABEL_102:
    ++v104;
  }
  while (v106 != 4);
  int v131 = v102;
  uint64_t v132 = *v198;
  if (*v198)
  {
    uint64_t *v198 = 0;
    uint64_t v133 = *(unsigned int *)(v132 - 4);
    if (v133)
    {
      unsigned int v134 = (unsigned int **)(v132 + 8);
      do
      {
        if (*(v134 - 1) != (unsigned int *)-2)
        {
          BOOL v135 = *v134;
          *unsigned int v134 = 0;
          if (v135)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v135, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v135);
              WTF::fastFree((WTF *)v135, v103);
            }
          }
        }
        v134 += 11;
        --v133;
      }
      while (v133);
    }
    WTF::fastFree((WTF *)(v132 - 16), v103);
  }

  unint64_t v137 = v217;
  int v138 = v217;
  do
  {
    unint64_t v140 = *(v138 - 2);
    v138 -= 2;
    int v139 = v140;
    uint64_t v141 = *((unsigned int *)v138 + 3);
    if (v141)
    {
      uint64_t v142 = 40 * v141;
      unint64_t v143 = (char *)v139 + 8;
      do
      {
        uint64_t v144 = *((unsigned int *)v143 + 2);
        if (v144 != -1) {
          ((void (*)(WTF **, char *))off_1ECABB2D0[v144])(&v204, v143);
        }
        *((_DWORD *)v143 + 2) = -1;
        v143 += 40;
        v142 -= 40;
      }
      while (v142);
      int v139 = *v138;
    }
    if (v139)
    {
      *(v137 - 2) = 0;
      *((_DWORD *)v137 - 2) = 0;
      WTF::fastFree(v139, v136);
    }
    unint64_t v137 = v138;
  }
  while (v138 != (WTF **)v216);
  if (HIDWORD(v228[1]))
  {
    unint64_t v145 = (id *)v228[0];
    uint64_t v146 = 8 * HIDWORD(v228[1]);
    do
    {

      v146 -= 8;
    }
    while (v146);
  }
  uint64_t v147 = v228[0];
  if (v228[0])
  {
    v228[0] = 0;
    LODWORD(v228[1]) = 0;
    WTF::fastFree(v147, v136);
  }
  if (HIDWORD(v227[1]))
  {
    unint64_t v148 = (id *)v227[0];
    uint64_t v149 = 8 * HIDWORD(v227[1]);
    do
    {

      v149 -= 8;
    }
    while (v149);
  }
  unint64_t v150 = v227[0];
  if (v227[0])
  {
    v227[0] = 0;
    LODWORD(v227[1]) = 0;
    WTF::fastFree(v150, v136);
  }
  if (HIDWORD(v226[1]))
  {
    unint64_t v151 = (id *)v226[0];
    uint64_t v152 = 8 * HIDWORD(v226[1]);
    do
    {

      v152 -= 8;
    }
    while (v152);
  }
  unint64_t v153 = v226[0];
  if (v226[0])
  {
    v226[0] = 0;
    LODWORD(v226[1]) = 0;
    WTF::fastFree(v153, v136);
  }
  if (HIDWORD(v225[1]))
  {
    uint64_t v154 = (id *)v225[0];
    uint64_t v155 = 8 * HIDWORD(v225[1]);
    do
    {

      v155 -= 8;
    }
    while (v155);
  }
  unint64_t v156 = v225[0];
  if (v225[0])
  {
    v225[0] = 0;
    LODWORD(v225[1]) = 0;
    WTF::fastFree(v156, v136);
  }
  if (HIDWORD(v224[1]))
  {
    unint64_t v157 = (id *)v224[0];
    uint64_t v158 = 8 * HIDWORD(v224[1]);
    do
    {

      v158 -= 8;
    }
    while (v158);
  }
  unint64_t v159 = v224[0];
  if (v224[0])
  {
    v224[0] = 0;
    LODWORD(v224[1]) = 0;
    WTF::fastFree(v159, v136);
  }
  if (HIDWORD(v223[1]))
  {
    uint64_t v160 = (id *)v223[0];
    uint64_t v161 = 8 * HIDWORD(v223[1]);
    do
    {

      v161 -= 8;
    }
    while (v161);
  }
  uint64_t v162 = v223[0];
  if (v223[0])
  {
    v223[0] = 0;
    LODWORD(v223[1]) = 0;
    WTF::fastFree(v162, v136);
  }
  if (HIDWORD(v222[1]))
  {
    long long v163 = (id *)v222[0];
    uint64_t v164 = 8 * HIDWORD(v222[1]);
    do
    {

      v164 -= 8;
    }
    while (v164);
  }
  uint64_t v165 = v222[0];
  if (v222[0])
  {
    v222[0] = 0;
    LODWORD(v222[1]) = 0;
    WTF::fastFree(v165, v136);
  }
  if (HIDWORD(v221[1]))
  {
    long long v166 = (id *)v221[0];
    uint64_t v167 = 8 * HIDWORD(v221[1]);
    do
    {

      v167 -= 8;
    }
    while (v167);
  }
  id v168 = v221[0];
  if (v221[0])
  {
    v221[0] = 0;
    LODWORD(v221[1]) = 0;
    WTF::fastFree(v168, v136);
  }
  if (HIDWORD(v220[1]))
  {
    uint64_t v169 = (id *)v220[0];
    uint64_t v170 = 8 * HIDWORD(v220[1]);
    do
    {

      v170 -= 8;
    }
    while (v170);
  }
  uint64_t v171 = v220[0];
  if (v220[0])
  {
    v220[0] = 0;
    LODWORD(v220[1]) = 0;
    WTF::fastFree(v171, v136);
  }
  if (HIDWORD(v219[1]))
  {
    uint64_t v172 = (id *)v219[0];
    uint64_t v173 = 8 * HIDWORD(v219[1]);
    do
    {

      v173 -= 8;
    }
    while (v173);
  }
  long long v174 = v219[0];
  if (v219[0])
  {
    v219[0] = 0;
    LODWORD(v219[1]) = 0;
    WTF::fastFree(v174, v136);
  }
  if (HIDWORD(v218[1]))
  {
    BOOL v175 = (id *)v218[0];
    uint64_t v176 = 8 * HIDWORD(v218[1]);
    do
    {

      v176 -= 8;
    }
    while (v176);
  }
  uint64_t v177 = v218[0];
  if (v218[0])
  {
    v218[0] = 0;
    LODWORD(v218[1]) = 0;
    WTF::fastFree(v177, v136);
  }
  if (HIDWORD(v217[1]))
  {
    uint64_t v178 = (id *)v217[0];
    uint64_t v179 = 8 * HIDWORD(v217[1]);
    do
    {

      v179 -= 8;
    }
    while (v179);
  }
  unint64_t v180 = v217[0];
  if (v217[0])
  {
    v217[0] = 0;
    LODWORD(v217[1]) = 0;
    WTF::fastFree(v180, v136);
  }

  [v188 addObject:v131];
  unint64_t v181 = (void *)*((void *)v197 + 9);
  *((void *)v197 + 9) = 0;

  unint64_t v182 = (void *)*((void *)v197 + 38);
  *((void *)v197 + 3++*(_DWORD *)(result + 8) = 0;

  uint64_t v183 = (void *)*((void *)v197 + 13);
  *((void *)v197 + 13) = 0;

  unint64_t v184 = (void *)*((void *)v197 + 34);
  *((void *)v197 + 34) = 0;

  unint64_t v185 = (void *)*((void *)v197 + 33);
  *((void *)v197 + 33) = 0;

  uint64_t v186 = [MEMORY[0x1E4F28E10] strongToStrongObjectsMapTable];
  long long v187 = (void *)*((void *)v197 + 23);
  *((void *)v197 + 23) = v186;
}

void sub_182512540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,void *a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v64 = a14;
  uint64_t v65 = a14;
  while (1)
  {
    id v67 = *(WTF **)(v65 - 16);
    v65 -= 16;
    uint64_t v66 = v67;
    uint64_t v68 = *(unsigned int *)(v65 + 12);
    if (v68)
    {
      uint64_t v69 = 40 * v68;
      uint64_t v70 = (char *)v66 + 8;
      do
      {
        uint64_t v71 = *((unsigned int *)v70 + 2);
        if (v71 != -1) {
          ((void (*)(char *, char *))off_1ECABB2D0[v71])(&a29, v70);
        }
        *((_DWORD *)v70 + 2) = -1;
        v70 += 40;
        v69 -= 40;
      }
      while (v69);
      uint64_t v66 = *(WTF **)v65;
    }
    if (v66)
    {
      *(void *)(v64 - 16) = 0;
      *(_DWORD *)(v64 - ++*(_DWORD *)(result + 8) = 0;
      WTF::fastFree(v66, v63);
    }
    uint64_t v64 = v65;
    if ((char *)v65 == &a61)
    {
      uint64_t v72 = LODWORD(STACK[0x31C]);
      if (v72)
      {
        unint64_t v73 = (id *)STACK[0x310];
        uint64_t v74 = 8 * v72;
        do
        {

          v74 -= 8;
        }
        while (v74);
      }
      id v75 = (WTF *)STACK[0x310];
      if (STACK[0x310])
      {
        STACK[0x310] = 0;
        LODWORD(STACK[0x318]) = 0;
        WTF::fastFree(v75, v63);
      }
      uint64_t v76 = LODWORD(STACK[0x30C]);
      if (v76)
      {
        uint64_t v77 = (id *)STACK[0x300];
        uint64_t v78 = 8 * v76;
        do
        {

          v78 -= 8;
        }
        while (v78);
      }
      uint64_t v79 = (WTF *)STACK[0x300];
      if (STACK[0x300])
      {
        STACK[0x300] = 0;
        LODWORD(STACK[0x308]) = 0;
        WTF::fastFree(v79, v63);
      }
      uint64_t v80 = LODWORD(STACK[0x2FC]);
      if (v80)
      {
        unint64_t v81 = (id *)STACK[0x2F0];
        uint64_t v82 = 8 * v80;
        do
        {

          v82 -= 8;
        }
        while (v82);
      }
      unsigned int v83 = (WTF *)STACK[0x2F0];
      if (STACK[0x2F0])
      {
        STACK[0x2F0] = 0;
        LODWORD(STACK[0x2F8]) = 0;
        WTF::fastFree(v83, v63);
      }
      uint64_t v84 = LODWORD(STACK[0x2EC]);
      if (v84)
      {
        uint64_t v85 = (id *)STACK[0x2E0];
        uint64_t v86 = 8 * v84;
        do
        {

          v86 -= 8;
        }
        while (v86);
      }
      unint64_t v87 = (WTF *)STACK[0x2E0];
      if (STACK[0x2E0])
      {
        STACK[0x2E0] = 0;
        LODWORD(STACK[0x2E8]) = 0;
        WTF::fastFree(v87, v63);
      }
      uint64_t v88 = LODWORD(STACK[0x2DC]);
      if (v88)
      {
        uint64_t v89 = (id *)STACK[0x2D0];
        uint64_t v90 = 8 * v88;
        do
        {

          v90 -= 8;
        }
        while (v90);
      }
      uint64_t v91 = (WTF *)STACK[0x2D0];
      if (STACK[0x2D0])
      {
        STACK[0x2D0] = 0;
        LODWORD(STACK[0x2D8]) = 0;
        WTF::fastFree(v91, v63);
      }
      uint64_t v92 = LODWORD(STACK[0x2CC]);
      if (v92)
      {
        int v93 = (id *)STACK[0x2C0];
        uint64_t v94 = 8 * v92;
        do
        {

          v94 -= 8;
        }
        while (v94);
      }
      unint64_t v95 = (WTF *)STACK[0x2C0];
      if (STACK[0x2C0])
      {
        STACK[0x2C0] = 0;
        LODWORD(STACK[0x2C8]) = 0;
        WTF::fastFree(v95, v63);
      }
      uint64_t v96 = LODWORD(STACK[0x2BC]);
      if (v96)
      {
        unint64_t v97 = (id *)STACK[0x2B0];
        uint64_t v98 = 8 * v96;
        do
        {

          v98 -= 8;
        }
        while (v98);
      }
      double v99 = (WTF *)STACK[0x2B0];
      if (STACK[0x2B0])
      {
        STACK[0x2B0] = 0;
        LODWORD(STACK[0x2B8]) = 0;
        WTF::fastFree(v99, v63);
      }
      uint64_t v100 = LODWORD(STACK[0x2AC]);
      if (v100)
      {
        double v101 = (id *)STACK[0x2A0];
        uint64_t v102 = 8 * v100;
        do
        {

          v102 -= 8;
        }
        while (v102);
      }
      uint64_t v103 = (WTF *)STACK[0x2A0];
      if (STACK[0x2A0])
      {
        STACK[0x2A0] = 0;
        LODWORD(STACK[0x2A8]) = 0;
        WTF::fastFree(v103, v63);
      }
      uint64_t v104 = LODWORD(STACK[0x29C]);
      if (v104)
      {
        uint64_t v105 = (id *)STACK[0x290];
        uint64_t v106 = 8 * v104;
        do
        {

          v106 -= 8;
        }
        while (v106);
      }
      long long v107 = (WTF *)STACK[0x290];
      if (STACK[0x290])
      {
        STACK[0x290] = 0;
        LODWORD(STACK[0x298]) = 0;
        WTF::fastFree(v107, v63);
      }
      uint64_t v108 = LODWORD(STACK[0x28C]);
      if (v108)
      {
        uint64_t v109 = (id *)STACK[0x280];
        uint64_t v110 = 8 * v108;
        do
        {

          v110 -= 8;
        }
        while (v110);
      }
      int v111 = (WTF *)STACK[0x280];
      if (STACK[0x280])
      {
        STACK[0x280] = 0;
        LODWORD(STACK[0x288]) = 0;
        WTF::fastFree(v111, v63);
      }
      uint64_t v112 = LODWORD(STACK[0x27C]);
      if (v112)
      {
        unsigned int v113 = (id *)STACK[0x270];
        uint64_t v114 = 8 * v112;
        do
        {

          v114 -= 8;
        }
        while (v114);
      }
      uint64_t v115 = (WTF *)STACK[0x270];
      if (STACK[0x270])
      {
        STACK[0x270] = 0;
        LODWORD(STACK[0x278]) = 0;
        WTF::fastFree(v115, v63);
      }
      uint64_t v116 = LODWORD(STACK[0x26C]);
      if (v116)
      {
        int v117 = (id *)STACK[0x260];
        uint64_t v118 = 8 * v116;
        do
        {

          v118 -= 8;
        }
        while (v118);
      }
      uint64_t v119 = (WTF *)STACK[0x260];
      if (STACK[0x260])
      {
        STACK[0x260] = 0;
        LODWORD(STACK[0x268]) = 0;
        WTF::fastFree(v119, v63);
      }

      _Unwind_Resume(a1);
    }
  }
}

uint64_t WebGPU::RenderBundleEncoder::runIndexBufferValidation(WebGPU::RenderBundleEncoder *this, unsigned int a2, unsigned int a3)
{
  uint64_t v4 = *((void *)this + 6);
  if (!v4 || !*((void *)this + 2))
  {
    WebGPU::RenderBundleEncoder::makeInvalid(this, &cfstr_MissingPipelin.isa);
    return 0;
  }
  unint64_t v5 = a3 + (unint64_t)a2;
  if (!v5) {
    return 1;
  }
  unint64_t v6 = *(unsigned int **)(v4 + 128);
  if (!v6)
  {
    id v9 = 0;
    id v8 = 0;
    goto LABEL_13;
  }
  uint64_t v7 = *(v6 - 1);
  id v8 = &v6[8 * v7];
  if (*(v6 - 3))
  {
    id v9 = v6;
    if (v7)
    {
      uint64_t v10 = 32 * v7;
      id v9 = v6;
      while (*v9 >= 0xFFFFFFFE)
      {
        v9 += 8;
        v10 -= 32;
        if (!v10)
        {
          id v9 = v8;
          goto LABEL_14;
        }
      }
    }
LABEL_13:
    if (!v6) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  id v9 = &v6[8 * v7];
  id v8 = v9;
LABEL_14:
  v6 += 8 * *(v6 - 1);
LABEL_15:
  if (v6 == v9) {
    return 1;
  }
  unint64_t v12 = v5 - 1;
  while (1)
  {
    uint64_t v13 = *v9;
    if (*((_DWORD *)this + 51) <= v13) {
      break;
    }
    if (v9[6] == 1)
    {
      unint64_t v14 = *((void *)v9 + 1);
      if (!is_mul_ok(v12, v14)) {
        return 0;
      }
      uint64_t v15 = *((void *)v9 + 2);
      if (__CFADD__(v12 * v14, v15)) {
        return 0;
      }
      uint64_t v16 = *((void *)this + 24);
      unint64_t v17 = *(void *)(v16 + 40 * v13 + 32);
      if (v12 * v14 + v15 > v17)
      {
        uint64_t v19 = [NSString stringWithFormat:@"(RenderBundle) Buffer[%d] fails: (strideCount(%lu) - 1) * stride(%llu) + lastStride(%llu) > bufferSize(%llu), metalBufferLength(%lu)", v13, v5, v14, v15, v17, objc_msgSend(*(id *)(v16 + 40 * v13), "length")];
        WebGPU::RenderBundleEncoder::makeInvalid(this, v19);

        return 0;
      }
    }
    unint64_t v18 = v9 + 8;
    id v9 = v8;
    if (v18 != v8)
    {
      id v9 = v18;
      while (*v9 >= 0xFFFFFFFE)
      {
        v9 += 8;
        if (v9 == v8)
        {
          id v9 = v8;
          break;
        }
      }
    }
    if (v9 == v6) {
      return 1;
    }
  }
  uint64_t result = 558;
  __break(0xC471u);
  return result;
}

void sub_182512C64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebGPU::RenderBundleEncoder::storeVertexBufferCountsForValidation(WebGPU::RenderBundleEncoder *this, int a2, int a3, int a4, int a5, int a6, MTLIndexType a7, uint64_t a8)
{
  uint64_t v16 = *((void *)this + 2);
  if (v16) {
    id v66 = *(id *)(v16 + 16);
  }
  else {
    id v66 = 0;
  }
  unint64_t v17 = WebGPU::RenderBundleEncoder::currentRenderCommand(this);
  if (!v17 || !v66) {
    goto LABEL_79;
  }
  uint64_t v18 = *((void *)this + 6);
  MTLIndexType v62 = a7;
  if (v18)
  {
    uint64_t v19 = *(unsigned int **)(v18 + 128);
    if (v19)
    {
      uint64_t v20 = *(v19 - 1);
      id v21 = &v19[8 * v20];
      if (!*(v19 - 3))
      {
        unint64_t v22 = &v19[8 * v20];
        id v21 = v22;
LABEL_18:
        v19 += 8 * *(v19 - 1);
LABEL_19:
        if (v19 != v22)
        {
          unsigned int v26 = -1;
          uint64_t v27 = 0xFFFFFFFFLL;
          while (1)
          {
            if (*((_DWORD *)this + 51) <= *v22)
            {
              unint64_t v28 = 0;
              unint64_t v29 = *((void *)v22 + 1);
              if (v29)
              {
LABEL_26:
                unint64_t v30 = *((void *)v22 + 2);
                BOOL v31 = v28 >= v30;
                unint64_t v32 = v28 - v30;
                if (v31) {
                  uint64_t v33 = v32 / v29 + 1;
                }
                else {
                  LODWORD(v33) = 0;
                }
                unsigned int v34 = v22[6];
                if (v27 >= v33) {
                  unsigned int v35 = v33;
                }
                else {
                  unsigned int v35 = v27;
                }
                if (v26 < v33) {
                  LODWORD(v33) = v26;
                }
                if (v34) {
                  uint64_t v27 = v35;
                }
                else {
                  uint64_t v27 = v27;
                }
                if (!v34) {
                  unsigned int v26 = v33;
                }
              }
            }
            else
            {
              unint64_t v28 = *(void *)(*((void *)this + 24) + 40 * *v22 + 32);
              unint64_t v29 = *((void *)v22 + 1);
              if (v29) {
                goto LABEL_26;
              }
            }
            id v36 = v22 + 8;
            unint64_t v22 = v21;
            if (v36 != v21)
            {
              unint64_t v22 = v36;
              while (*v22 >= 0xFFFFFFFE)
              {
                v22 += 8;
                if (v22 == v21)
                {
                  unint64_t v22 = v21;
                  break;
                }
              }
            }
            if (v22 == v19) {
              goto LABEL_45;
            }
          }
        }
        uint64_t v27 = 0xFFFFFFFFLL;
        unsigned int v26 = -1;
LABEL_45:
        uint64_t v64 = v17;
        unint64_t v65 = v26 | (unint64_t)(v27 << 32);
        int v63 = a2;
        uint64_t v24 = *((void *)this + 2);
        if (v24) {
          goto LABEL_46;
        }
LABEL_15:
        uint64_t v25 = 0;
        goto LABEL_51;
      }
      unint64_t v22 = v19;
      if (v20)
      {
        uint64_t v23 = 32 * v20;
        unint64_t v22 = v19;
        while (*v22 >= 0xFFFFFFFE)
        {
          v22 += 8;
          v23 -= 32;
          if (!v23)
          {
            unint64_t v22 = v21;
            goto LABEL_18;
          }
        }
      }
    }
    else
    {
      unint64_t v22 = 0;
      id v21 = 0;
    }
    if (!v19) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v64 = v17;
  unint64_t v65 = 0;
  int v63 = a2;
  uint64_t v24 = *((void *)this + 2);
  if (!v24) {
    goto LABEL_15;
  }
LABEL_46:
  uint64_t v25 = *(void *)(v24 + 8);
  if (v25) {
    goto LABEL_50;
  }
  uint64_t v25 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v25 = 1;
  *(void *)(v25 + ++*(_DWORD *)(result + 8) = v24;
  uint64_t v38 = *(unsigned int **)(v24 + 8);
  *(void *)(v24 + ++*(_DWORD *)(result + 8) = v25;
  if (!v38) {
    goto LABEL_50;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v38, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v38);
    WTF::fastFree((WTF *)v38, v37);
    uint64_t v25 = *(void *)(v24 + 8);
    if (!v25) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  uint64_t v25 = *(void *)(v24 + 8);
  if (v25) {
LABEL_50:
  }
    atomic_fetch_add((atomic_uint *volatile)v25, 1u);
LABEL_51:
  uint64_t v61 = a8;
  uint64_t v39 = *((void *)this + 12);
  uint64_t v41 = [v66 gpuAddress];
  uint64_t v42 = (uint64_t *)((char *)this + 248);
  uint64_t v43 = *((void *)this + 31);
  uint64_t v60 = *((void *)this + 20);
  if (v43
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebGPU::IndexBufferAndIndexData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebGPU::IndexBufferAndIndexData>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebGPU::IndexBufferAndIndexData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::IndexBufferAndIndexData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash((uint64_t *)this + 31, 8u, 0), (uint64_t v43 = *v42) != 0))
  {
    int v44 = a6;
    int v45 = *(_DWORD *)(v43 - 8);
  }
  else
  {
    int v44 = a6;
    int v45 = 0;
  }
  uint64_t v46 = *((void *)this + 12);
  unint64_t v47 = (v46 + ~(v46 << 32)) ^ ((unint64_t)(v46 + ~(v46 << 32)) >> 22);
  unint64_t v48 = 9 * ((v47 + ~(v47 << 13)) ^ ((v47 + ~(v47 << 13)) >> 8));
  unint64_t v49 = (v48 ^ (v48 >> 15)) + ~((v48 ^ (v48 >> 15)) << 27);
  unsigned int v50 = v45 & ((v49 >> 31) ^ v49);
  uint64_t v51 = v43 + 88 * v50;
  uint64_t v52 = *(void *)v51;
  if (*(void *)v51 == -1)
  {
LABEL_62:
    uint64_t v55 = *(unsigned int **)(v51 + 8);
    *(void *)uint64_t v51 = v46;
    *(void *)(v51 + ++*(_DWORD *)(result + 8) = v25;
    if (v55 && atomic_fetch_add((atomic_uint *volatile)v55, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v55);
      WTF::fastFree((WTF *)v55, v40);
    }
    *(void *)(v51 + 16) = v62;
    *(void *)(v51 + 24) = v61;
    *(void *)(v51 + 32) = v39;
    *(void *)(v51 + 40) = v65;
    *(void *)(v51 + 4++*(_DWORD *)(result + 8) = v41;
    *(_DWORD *)(v51 + 56) = v63;
    *(_DWORD *)(v51 + 60) = a3;
    *(_DWORD *)(v51 + 64) = a4;
    *(_DWORD *)(v51 + 6++*(_DWORD *)(result + 8) = a5;
    *(_DWORD *)(v51 + 72) = v44;
    *(void *)(v51 + 80) = v60;
    if (*v42)
    {
      unint64_t v17 = v64;
      ++*(_DWORD *)(*v42 - 12);
      uint64_t v56 = *v42;
      if (*v42) {
        goto LABEL_67;
      }
    }
    else
    {
      unint64_t v17 = v64;
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      uint64_t v56 = *v42;
      if (*v42)
      {
LABEL_67:
        uint64_t v57 = (*(_DWORD *)(v56 - 16) + *(_DWORD *)(v56 - 12));
        unint64_t v58 = *(unsigned int *)(v56 - 4);
        if (v58 <= 0x400) {
          goto LABEL_68;
        }
        goto LABEL_76;
      }
    }
    uint64_t v57 = *(unsigned int *)(v56 - 16);
    unint64_t v58 = *(unsigned int *)(v56 - 4);
    if (v58 <= 0x400)
    {
LABEL_68:
      if (3 * v58 > 4 * v57) {
        goto LABEL_79;
      }
      if (!v58)
      {
        unsigned int v59 = 8;
LABEL_78:
        WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebGPU::IndexBufferAndIndexData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebGPU::IndexBufferAndIndexData>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebGPU::IndexBufferAndIndexData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::IndexBufferAndIndexData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(v42, v59, v51);
        goto LABEL_79;
      }
LABEL_77:
      unsigned int v59 = v58 << (6 * *(_DWORD *)(v56 - 12) >= (2 * v58));
      goto LABEL_78;
    }
LABEL_76:
    if (v58 > 2 * v57) {
      goto LABEL_79;
    }
    goto LABEL_77;
  }
  uint64_t v53 = 0;
  int v54 = 1;
  while (v52 != v46)
  {
    if (v52 == -2) {
      uint64_t v53 = v51;
    }
    unsigned int v50 = (v50 + v54) & v45;
    uint64_t v51 = v43 + 88 * v50;
    uint64_t v52 = *(void *)v51;
    ++v54;
    if (*(void *)v51 == -1)
    {
      if (v53)
      {
        *(void *)uint64_t v53 = -1;
        *(_OWORD *)(v53 + 40) = 0u;
        *(_OWORD *)(v53 + 56) = 0u;
        *(_OWORD *)(v53 + 24) = 0u;
        *(_OWORD *)(v53 + ++*(_DWORD *)(result + 8) = 0u;
        *(void *)(v53 + 40) = -1;
        *(void *)(v53 + 4++*(_DWORD *)(result + 8) = 0;
        *(void *)(v53 + 56) = 0;
        *(void *)(v53 + 64) = 0;
        *(void *)(v53 + 72) = 0;
        *(_DWORD *)(v53 + 72) = 0;
        *(void *)(v53 + 80) = 3;
        --*(_DWORD *)(*((void *)this + 31) - 16);
        uint64_t v46 = *((void *)this + 12);
        uint64_t v51 = v53;
      }
      goto LABEL_62;
    }
  }
  unint64_t v17 = v64;
  if (v25 && atomic_fetch_add((atomic_uint *volatile)v25, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v25);
    WTF::fastFree((WTF *)v25, v40);
  }
LABEL_79:
}

void sub_18251315C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, id a16)
{
  _Unwind_Resume(a1);
}

void sub_1825131B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  _Unwind_Resume(a1);
}

void WebGPU::RenderBundleEncoder::drawIndexed(WebGPU::RenderBundleEncoder *this, unsigned int a2, unsigned int a3, unsigned int a4, int a5, unsigned int a6)
{
  unint64_t v12 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "RenderBundleEncoder::FinalizeRenderCommand WebGPU::RenderBundleEncoder::drawIndexed(uint32_t, uint32_t, uint32_t, int32_t, uint32_t)");
  if (WebGPU::RenderBundleEncoder::returnIfEncodingIsFinished(this, (NSString *)v12))
  {

    goto LABEL_8;
  }
  uint64_t v13 = *((void *)this + 10);

  if (v13)
  {
    uint64_t v14 = *((void *)this + 4);
    char v15 = 1;
    if (*((void *)this + 3)) {
      char v15 = 2;
    }
    unint64_t v16 = (unint64_t)a4 << v15;
    uint64_t v17 = v14 + v16;
    if (!__CFADD__(v14, v16))
    {
      char v78 = v15;
      uint64_t v22 = *((void *)this + 2);
      if (v22)
      {
        id v23 = *(id *)(v22 + 16);
        uint64_t v24 = *((void *)this + 37);
        unint64_t v79 = v16;
        if (!v24) {
          goto LABEL_30;
        }
      }
      else
      {
        id v23 = 0;
        uint64_t v24 = *((void *)this + 37);
        unint64_t v79 = (unint64_t)a4 << v15;
        if (!v24) {
          goto LABEL_30;
        }
      }
      uint64_t v25 = *(void *)(v24 + 8);
      if (v25)
      {
        uint64_t v26 = *((void *)this + 6);
        unint64_t v76 = v17;
        if (v26)
        {
          uint64_t v27 = *(unsigned int **)(v26 + 128);
          if (v27)
          {
            uint64_t v28 = *(v27 - 1);
            unint64_t v29 = &v27[8 * v28];
            if (*(v27 - 3))
            {
              unint64_t v30 = v27;
              if (v28)
              {
                uint64_t v31 = 32 * v28;
                unint64_t v30 = v27;
                while (*v30 >= 0xFFFFFFFE)
                {
                  v30 += 8;
                  v31 -= 32;
                  if (!v31)
                  {
                    unint64_t v30 = v29;
                    break;
                  }
                }
              }
            }
            else
            {
              unint64_t v30 = &v27[8 * v28];
              unint64_t v29 = v30;
            }
          }
          else
          {
            unint64_t v30 = 0;
            unint64_t v29 = 0;
          }
          if (v27) {
            v27 += 8 * *(v27 - 1);
          }
          if (v27 != v30)
          {
            unsigned int v34 = -1;
            unsigned int v33 = -1;
            while (1)
            {
              if (*((_DWORD *)this + 51) <= *v30)
              {
                unint64_t v35 = 0;
                unint64_t v36 = *((void *)v30 + 1);
                if (v36)
                {
LABEL_43:
                  unint64_t v37 = *((void *)v30 + 2);
                  BOOL v38 = v35 >= v37;
                  unint64_t v39 = v35 - v37;
                  if (v38) {
                    uint64_t v40 = v39 / v36 + 1;
                  }
                  else {
                    LODWORD(v40) = 0;
                  }
                  if (v33 >= v40) {
                    unsigned int v41 = v40;
                  }
                  else {
                    unsigned int v41 = v33;
                  }
                  if (v34 < v40) {
                    LODWORD(v40) = v34;
                  }
                  if (v30[6]) {
                    unsigned int v33 = v41;
                  }
                  else {
                    unsigned int v34 = v40;
                  }
                }
              }
              else
              {
                unint64_t v35 = *(void *)(*((void *)this + 24) + 40 * *v30 + 32);
                unint64_t v36 = *((void *)v30 + 1);
                if (v36) {
                  goto LABEL_43;
                }
              }
              uint64_t v42 = v30 + 8;
              unint64_t v30 = v29;
              if (v42 != v29)
              {
                unint64_t v30 = v42;
                while (*v30 >= 0xFFFFFFFE)
                {
                  v30 += 8;
                  if (v30 == v29)
                  {
                    unint64_t v30 = v29;
                    break;
                  }
                }
              }
              if (v30 == v27) {
                goto LABEL_60;
              }
            }
          }
          unsigned int v33 = -1;
          unsigned int v34 = -1;
        }
        else
        {
          unsigned int v33 = 0;
          unsigned int v34 = 0;
        }
LABEL_60:
        int v77 = a3;
        int v43 = a6;
        int v44 = a5;
        uint64_t v45 = *((void *)this + 2);
        MTLIndexType v46 = *((void *)this + 3);
        id v80 = v23;
        if (*(unsigned char *)(*(void *)(v25 + 152) + 76)) {
          unint64_t v47 = 0;
        }
        else {
          unint64_t v47 = *(void **)(v25 + 16);
        }
        id v48 = v47;
        int v75 = v33;
        uint64_t v17 = v76;
        int valid = WebGPU::RenderPassEncoder::clampIndexBufferToValidValues(a2, v77, v44, v43, v46, v76, v45, v34, v75, v48, *((WebGPU::Device **)this + 1), *((_DWORD *)this + 87), *((void *)this + 20));

        id v23 = v80;
        a5 = v44;
        a6 = v43;
        a3 = v77;
LABEL_64:
        if ((WebGPU::RenderBundleEncoder::executePreDrawCommands(this) & 1) == 0) {
          goto LABEL_95;
        }
        unint64_t v81 = v23;
        unint64_t v49 = WebGPU::RenderBundleEncoder::currentRenderCommand(this);
        if (!v49)
        {
          *(void *)&long long v82 = __PAIR64__(a3, a2);
          *((void *)&v82 + 1) = __PAIR64__(a5, a4);
          ++*(_DWORD *)this;
          uint64_t v54 = WTF::fastMalloc((WTF *)0x28);
          uint64_t v55 = (void (**)(void))&unk_1ECABB350;
          *(void *)uint64_t v54 = &unk_1ECABB350;
          *(_DWORD *)(v54 + 24) = a6;
          *(_OWORD *)(v54 + ++*(_DWORD *)(result + 8) = v82;
          *(void *)(v54 + 32) = this;
          unsigned int v83 = (void (***)(void))v54;
          if (*((void *)this + 10))
          {
            uint64_t v56 = *((unsigned int *)this + 45);
            if (v56 == *((_DWORD *)this + 44))
            {
              uint64_t v57 = WTF::Vector<WTF::Function<BOOL ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 168, v56 + 1, (unint64_t)&v83);
              uint64_t v56 = *((unsigned int *)this + 45);
              unint64_t v58 = (uint64_t *)(*((void *)this + 21) + 8 * v56);
              uint64_t v54 = *(void *)v57;
            }
            else
            {
              unint64_t v58 = (uint64_t *)(*((void *)this + 21) + 8 * v56);
              uint64_t v57 = (char *)&v83;
            }
            *(void *)uint64_t v57 = 0;
            uint64_t *v58 = v54;
            *((_DWORD *)this + 45) = v56 + 1;
            int v63 = v83;
            unsigned int v83 = 0;
            if (!v63) {
              goto LABEL_94;
            }
            uint64_t v55 = *v63;
          }
          else
          {
            unsigned int v83 = 0;
          }
          v55[1]();
          goto LABEL_94;
        }
        uint64_t v50 = *((void *)this + 6);
        uint64_t v51 = *(void *)(v50 + 128);
        if (v51 && *(_DWORD *)(v51 - 12))
        {
          if (*((void *)this + 2))
          {
            int v52 = *(_DWORD *)(v50 + 232);
            if (v52 != 4 && v52 != 2 || *((void *)this + 3) == (*(_DWORD *)(v50 + 236) != 1)) {
              goto LABEL_72;
            }
            uint64_t v68 = @"Primitive topology mismiatch with render pipeline";
          }
          else
          {
            uint64_t v68 = @"Index buffer is not set";
          }
          WebGPU::RenderBundleEncoder::makeInvalid(this, &v68->isa);
          WebGPU::RenderBundleEncoder::finalizeRenderCommand(this);
          goto LABEL_105;
        }
LABEL_72:
        unint64_t v53 = (unint64_t)a2 << v78;
        if (v79 + v53 > *((void *)this + 5))
        {
          WebGPU::RenderBundleEncoder::makeInvalid(this, &cfstr_Firstindexoffs.isa);
LABEL_82:
          unsigned int v59 = (void *)*((void *)this + 38);
          *((void *)this + 3++*(_DWORD *)(result + 8) = 0;

          unint64_t v60 = *((void *)this + 12) + 1;
          *((void *)this + 12) = v60;
          if (_MergedGlobals_0 != 1)
          {
            uint64_t v61 = *(void *)(*((void *)this + 1) + 176) >> 9;
            if (v61 <= 0x186A0) {
              LODWORD(v61) = 100000;
            }
            dword_1EC00AD74 = v61;
            _MergedGlobals_0 = 1;
            if (!*((void *)this + 10)) {
              goto LABEL_105;
            }
            goto LABEL_84;
          }
          LODWORD(v61) = dword_1EC00AD74;
          if (*((void *)this + 10))
          {
LABEL_84:
            if (v60 >= v61)
            {
              uint64_t v62 = *((void *)this + 37);
              if ((!v62 || !*(void *)(v62 + 8)) && !*((void *)this + 9)) {
                WebGPU::RenderBundleEncoder::endCurrentICB((id *)this);
              }
            }
          }
LABEL_105:

          id v23 = v81;
          goto LABEL_106;
        }
        if (!WebGPU::RenderBundleEncoder::runIndexBufferValidation(this, a6, a3)
          || !a2
          || !a3
          || !v81
          || *(unsigned char *)(*((void *)this + 2) + 52) == 4)
        {
          goto LABEL_82;
        }
        WebGPU::RenderBundleEncoder::storeVertexBufferCountsForValidation(this, a2, a3, a4, a5, a6, *((MTLIndexType *)this + 3), v17);
        uint64_t v69 = *((void *)this + 37);
        if (v69 && *(void *)(v69 + 8))
        {
          if (valid == 3)
          {
LABEL_113:
            id v70 = *(id *)(*((void *)this + 2) + 32);
            uint64_t v71 = *((void *)this + 37);
            if (v71) {
              uint64_t v72 = *(id **)(v71 + 8);
            }
            else {
              uint64_t v72 = 0;
            }
            uint64_t v74 = WebGPU::RenderPassEncoder::renderCommandEncoder(v72);
            [v74 drawIndexedPrimitives:*((void *)this + 20) indexType:*((void *)this + 3) indexBuffer:v81 indexBufferOffset:0 indirectBuffer:v70 indirectBufferOffset:0];

            goto LABEL_94;
          }
          if (valid != 2)
          {
            if (valid == 1) {
              goto LABEL_113;
            }
LABEL_116:
            BOOL v38 = __CFADD__(v17, v53);
            unint64_t v73 = v17 + v53;
            if (!v38 && v73 <= [v81 length]) {
              [v49 drawIndexedPrimitives:*((void *)this + 20) indexCount:a2 indexType:*((void *)this + 3) indexBuffer:v81 indexBufferOffset:v17 instanceCount:a3 baseVertex:a5 baseInstance:a6];
            }
          }
        }
        else if (valid != 2)
        {
          goto LABEL_116;
        }
LABEL_94:

        id v23 = v81;
        objc_msgSend(*((id *)this + 10), "setCommandTypes:", objc_msgSend(*((id *)this + 10), "commandTypes") | 2);
LABEL_95:
        uint64_t v64 = (void *)*((void *)this + 38);
        *((void *)this + 3++*(_DWORD *)(result + 8) = 0;

        unint64_t v65 = *((void *)this + 12) + 1;
        *((void *)this + 12) = v65;
        if (_MergedGlobals_0 == 1)
        {
          LODWORD(v66) = dword_1EC00AD74;
          if (!*((void *)this + 10))
          {
LABEL_106:

            return;
          }
        }
        else
        {
          uint64_t v66 = *(void *)(*((void *)this + 1) + 176) >> 9;
          if (v66 <= 0x186A0) {
            LODWORD(v66) = 100000;
          }
          dword_1EC00AD74 = v66;
          _MergedGlobals_0 = 1;
          if (!*((void *)this + 10)) {
            goto LABEL_106;
          }
        }
        if (v65 >= v66)
        {
          uint64_t v67 = *((void *)this + 37);
          if ((!v67 || !*(void *)(v67 + 8)) && !*((void *)this + 9)) {
            WebGPU::RenderBundleEncoder::endCurrentICB((id *)this);
          }
        }
        goto LABEL_106;
      }
LABEL_30:
      int valid = 0;
      goto LABEL_64;
    }
  }
LABEL_8:
  uint64_t v18 = (void *)*((void *)this + 38);
  *((void *)this + 3++*(_DWORD *)(result + 8) = 0;

  unint64_t v19 = *((void *)this + 12) + 1;
  *((void *)this + 12) = v19;
  if (_MergedGlobals_0 == 1)
  {
    LODWORD(v20) = dword_1EC00AD74;
    if (!*((void *)this + 10)) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v20 = *(void *)(*((void *)this + 1) + 176) >> 9;
  if (v20 <= 0x186A0) {
    LODWORD(v20) = 100000;
  }
  dword_1EC00AD74 = v20;
  _MergedGlobals_0 = 1;
  if (*((void *)this + 10))
  {
LABEL_10:
    if (v19 >= v20)
    {
      uint64_t v21 = *((void *)this + 37);
      if ((!v21 || !*(void *)(v21 + 8)) && !*((void *)this + 9))
      {
        WebGPU::RenderBundleEncoder::endCurrentICB((id *)this);
      }
    }
  }
}

void sub_1825139E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_182513A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_182513A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_182513A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, ...)
{
  va_start(va, a12);
  uint64_t v15 = *(void *)(v13 - 88);
  *(void *)(v13 - 8++*(_DWORD *)(result + 8) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  WebGPU::RenderBundleEncoder::drawIndexed(unsigned int,unsigned int,unsigned int,int,unsigned int)::$_0::~$_0((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_182513AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_182513AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_182513AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_182513AEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182513B04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebGPU::RenderBundleEncoder::drawIndexed(unsigned int,unsigned int,unsigned int,int,unsigned int)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(WebGPU::RenderBundleEncoder **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (!v2) {
    return a1;
  }
  if (*(_DWORD *)v2 != 1)
  {
    --*(_DWORD *)v2;
    return a1;
  }
  WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v2);
  WTF::fastFree(v4, v5);
  return a1;
}

void WebGPU::RenderBundleEncoder::drawIndexedIndirect(id *this, id *a2, unint64_t a3)
{
  unint64_t v6 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "RenderBundleEncoder::FinalizeRenderCommand WebGPU::RenderBundleEncoder::drawIndexedIndirect(Buffer &, uint64_t)");
  if (WebGPU::RenderBundleEncoder::returnIfEncodingIsFinished((WebGPU::RenderBundleEncoder *)this, (NSString *)v6))
  {

    goto LABEL_14;
  }
  id v7 = this[10];

  if (v7)
  {
    *((unsigned char *)this + 384) = 1;
    char v88 = 0;
    id v8 = this[37];
    if (v8 && (uint64_t v9 = v8[1]) != 0)
    {
      id v10 = this[6];
      uint64_t v84 = a3;
      if (v10)
      {
        uint64_t v11 = (unsigned int *)*((void *)v10 + 16);
        if (v11)
        {
          uint64_t v12 = *(v11 - 1);
          uint64_t v13 = &v11[8 * v12];
          if (*(v11 - 3))
          {
            uint64_t v14 = v11;
            if (v12)
            {
              uint64_t v15 = 32 * v12;
              uint64_t v14 = v11;
              while (*v14 >= 0xFFFFFFFE)
              {
                v14 += 8;
                v15 -= 32;
                if (!v15)
                {
                  uint64_t v14 = v13;
                  break;
                }
              }
            }
          }
          else
          {
            uint64_t v14 = &v11[8 * v12];
            uint64_t v13 = v14;
          }
        }
        else
        {
          uint64_t v14 = 0;
          uint64_t v13 = 0;
        }
        if (v11) {
          v11 += 8 * *(v11 - 1);
        }
        if (v11 != v14)
        {
          unsigned int v24 = -1;
          uint64_t v25 = 0xFFFFFFFFLL;
          while (1)
          {
            if (*((_DWORD *)this + 51) <= *v14)
            {
              unint64_t v26 = 0;
              unint64_t v27 = *((void *)v14 + 1);
              if (v27)
              {
LABEL_36:
                unint64_t v28 = *((void *)v14 + 2);
                BOOL v29 = v26 >= v28;
                unint64_t v30 = v26 - v28;
                if (v29) {
                  uint64_t v31 = v30 / v27 + 1;
                }
                else {
                  LODWORD(v31) = 0;
                }
                unsigned int v32 = v14[6];
                if (v25 >= v31) {
                  unsigned int v33 = v31;
                }
                else {
                  unsigned int v33 = v25;
                }
                if (v24 < v31) {
                  LODWORD(v31) = v24;
                }
                if (v32) {
                  uint64_t v25 = v33;
                }
                else {
                  uint64_t v25 = v25;
                }
                if (!v32) {
                  unsigned int v24 = v31;
                }
              }
            }
            else
            {
              unint64_t v26 = *((void *)this[24] + 5 * *v14 + 4);
              unint64_t v27 = *((void *)v14 + 1);
              if (v27) {
                goto LABEL_36;
              }
            }
            unsigned int v34 = v14 + 8;
            uint64_t v14 = v13;
            if (v34 != v13)
            {
              uint64_t v14 = v34;
              while (*v14 >= 0xFFFFFFFE)
              {
                v14 += 8;
                if (v14 == v13)
                {
                  uint64_t v14 = v13;
                  break;
                }
              }
            }
            if (v14 == v11) {
              goto LABEL_55;
            }
          }
        }
        uint64_t v25 = 0xFFFFFFFFLL;
        unsigned int v24 = -1;
LABEL_55:
        uint64_t v22 = (WebGPU::Buffer *)a2;
        unint64_t v23 = v24 | (unint64_t)(v25 << 32);
      }
      else
      {
        uint64_t v22 = (WebGPU::Buffer *)a2;
        unint64_t v23 = 0;
      }
      MTLIndexType v35 = (MTLIndexType)this[3];
      unint64_t v36 = (unint64_t)this[4];
      uint64_t v37 = (uint64_t)this[20];
      unint64_t v39 = (WebGPU::Device *)this[1];
      uint64_t v38 = (uint64_t)this[2];
      int v40 = *((_DWORD *)this + 87);
      if (*(unsigned char *)(*(void *)(v9 + 152) + 76)) {
        unsigned int v41 = 0;
      }
      else {
        unsigned int v41 = *(void **)(v9 + 16);
      }
      id v42 = v41;
      LODWORD(v83) = v40;
      a2 = (id *)v22;
      uint64_t v43 = (uint64_t)v22;
      a3 = v84;
      WebGPU::RenderPassEncoder::clampIndirectIndexBufferToValidValues(v38, v43, v35, v36, v84, v23, SHIDWORD(v23), v37, &v85, v39, v83, v42, &v88);

      id v21 = (id)v85;
      uint64_t v20 = *((void *)&v85 + 1);
    }
    else
    {
      uint64_t v20 = 0;
      id v21 = 0;
    }
    if ((WebGPU::RenderBundleEncoder::executePreDrawCommands((WebGPU::RenderBundleEncoder *)this) & 1) == 0)
    {
      id v46 = this[38];
      this[38] = 0;

      unint64_t v47 = (unint64_t)this[12] + 1;
      this[12] = (id)v47;
      if (_MergedGlobals_0 == 1)
      {
        LODWORD(v4++*(_DWORD *)(result + 8) = dword_1EC00AD74;
        if (!this[10])
        {
LABEL_137:

          return;
        }
      }
      else
      {
        uint64_t v48 = *((void *)this[1] + 22) >> 9;
        if (v48 <= 0x186A0) {
          LODWORD(v4++*(_DWORD *)(result + 8) = 100000;
        }
        dword_1EC00AD74 = v48;
        _MergedGlobals_0 = 1;
        if (!this[10]) {
          goto LABEL_137;
        }
      }
      if (v47 >= v48)
      {
        unint64_t v49 = this[37];
        if ((!v49 || !v49[1]) && !this[9]) {
          WebGPU::RenderBundleEncoder::endCurrentICB(this);
        }
      }
      goto LABEL_137;
    }
    int v44 = (id *)this[2];
    if (v44) {
      id v45 = v44[2];
    }
    else {
      id v45 = 0;
    }
    uint64_t v50 = WebGPU::RenderBundleEncoder::currentRenderCommand((WebGPU::RenderBundleEncoder *)this);
    if (v50)
    {
      if ([v45 length])
      {
        uint64_t v51 = this[37];
        if (v51)
        {
          uint64_t v52 = v51[1];
          if (v52)
          {
            WebGPU::Buffer::setCommandEncoder((WebGPU::Buffer *)a2, *(WebGPU::CommandEncoder **)(v52 + 152));
            unint64_t v53 = this[37];
            if (v53) {
              unint64_t v53 = (void *)v53[1];
            }
            if (*(unsigned char *)(v53[19] + 76)) {
              uint64_t v54 = 0;
            }
            else {
              uint64_t v54 = (void *)v53[2];
            }
            id v67 = v54;

            if (v67)
            {
              if (*((unsigned char *)a2 + 52) != 4 && [v45 length] && v21)
              {
                id v68 = this[37];
                if (v68) {
                  uint64_t v69 = (id *)*((void *)v68 + 1);
                }
                else {
                  uint64_t v69 = 0;
                }
                uint64_t v74 = WebGPU::RenderPassEncoder::renderCommandEncoder(v69);
                [v74 drawIndexedPrimitives:this[20] indexType:this[3] indexBuffer:v45 indexBufferOffset:this[4] indirectBuffer:v21 indirectBufferOffset:v20];
              }
              goto LABEL_120;
            }
            goto LABEL_116;
          }
        }
        id v60 = a2[2];
        unint64_t v61 = [v60 length];
        if (v61 < a3 || v61 - a3 <= 0x13)
        {
        }
        else
        {
          id v62 = v60;
          int v63 = (unsigned int *)[v62 contents];

          if (v63 && *v63 && v63[1])
          {
            id v64 = this[23];
            id v65 = a2[2];
            ++*(_DWORD *)a2;
            *(void *)&long long v85 = a2;
            DWORD2(v85) = 0;
            BOOL v66 = WebGPU::RenderBundleEncoder::addResource((uint64_t)this, v64, v65, 1, (uint64_t)&v85);
            if (DWORD2(v85) != -1) {
              ((void (*)(uint64_t *, long long *))off_1ECABB2D0[DWORD2(v85)])(&v87, &v85);
            }
            if (v66)
            {
              [v50 drawIndexedPrimitives:this[20] indexCount:*v63 indexType:this[3] indexBuffer:v45 indexBufferOffset:this[4] instanceCount:v63[1] baseVertex:(int)v63[3] baseInstance:v63[4]];
LABEL_120:

              objc_msgSend(this[10], "setCommandTypes:", objc_msgSend(this[10], "commandTypes") | 2);
              id v75 = this[38];
              this[38] = 0;

              unint64_t v76 = (unint64_t)this[12] + 1;
              this[12] = (id)v76;
              if (_MergedGlobals_0 != 1)
              {
                uint64_t v77 = *((void *)this[1] + 22) >> 9;
                if (v77 <= 0x186A0) {
                  LODWORD(v77) = 100000;
                }
                dword_1EC00AD74 = v77;
                _MergedGlobals_0 = 1;
                if (!this[10]) {
                  goto LABEL_136;
                }
                goto LABEL_122;
              }
              LODWORD(v77) = dword_1EC00AD74;
              if (this[10])
              {
LABEL_122:
                if (v76 >= v77)
                {
                  char v78 = this[37];
                  if ((!v78 || !v78[1]) && !this[9]) {
                    WebGPU::RenderBundleEncoder::endCurrentICB(this);
                  }
                }
              }
LABEL_136:

              goto LABEL_137;
            }
            goto LABEL_116;
          }
        }
        id v79 = this[38];
        this[38] = 0;

        unint64_t v80 = (unint64_t)this[12] + 1;
        this[12] = (id)v80;
        if (_MergedGlobals_0 == 1)
        {
          LODWORD(v81) = dword_1EC00AD74;
          if (!this[10]) {
            goto LABEL_135;
          }
        }
        else
        {
          uint64_t v81 = *((void *)this[1] + 22) >> 9;
          if (v81 <= 0x186A0) {
            LODWORD(v81) = 100000;
          }
          dword_1EC00AD74 = v81;
          _MergedGlobals_0 = 1;
          if (!this[10]) {
            goto LABEL_135;
          }
        }
        if (v80 < v81) {
          goto LABEL_135;
        }
        long long v82 = this[37];
        if (v82)
        {
          if (v82[1]) {
            goto LABEL_135;
          }
        }
        if (this[9]) {
          goto LABEL_135;
        }
LABEL_134:
        WebGPU::RenderBundleEncoder::endCurrentICB(this);
        goto LABEL_135;
      }
    }
    else
    {
      if (*((unsigned char *)a2 + 52) == 4 || a2[2])
      {
        uint64_t v55 = a2[35];
        if (v55[1])
        {
          if (v55 == this[1])
          {
            if ((a3 & 3) != 0 || (a2[6] & 0x100) == 0)
            {
              WebGPU::RenderBundleEncoder::makeInvalid((WebGPU::RenderBundleEncoder *)this, &cfstr_Drawindexedind_0.isa);
LABEL_116:
              WebGPU::RenderBundleEncoder::finalizeRenderCommand((WebGPU::RenderBundleEncoder *)this);
              goto LABEL_135;
            }
            if (a3 < 0xFFFFFFFFFFFFFFECLL && (unint64_t)a2[5] >= a3 + 20)
            {
              ++*(_DWORD *)a2;
              *(void *)&long long v85 = a2;
              *((void *)&v85 + 1) = a3;
              ++*(_DWORD *)this;
              uint64_t v86 = this;
              uint64_t v70 = WTF::fastMalloc((WTF *)0x20);
              *(void *)uint64_t v70 = &unk_1ECABB378;
              *(_OWORD *)(v70 + ++*(_DWORD *)(result + 8) = v85;
              uint64_t v71 = v86;
              *(void *)&long long v85 = 0;
              uint64_t v86 = 0;
              uint64_t v87 = v70;
              *(void *)(v70 + 24) = v71;
              WebGPU::RenderBundleEncoder::recordCommand((char *)this, (unint64_t)&v87);
              uint64_t v73 = v87;
              uint64_t v87 = 0;
              if (v73) {
                (*(void (**)(uint64_t))(*(void *)v73 + 8))(v73);
              }
              WebGPU::RenderBundleEncoder::drawIndexedIndirect(WebGPU::Buffer &,unsigned long long)::$_0::~$_0((WebGPU::Buffer **)&v85, v72);
              goto LABEL_120;
            }
            WebGPU::RenderBundleEncoder::makeInvalid((WebGPU::RenderBundleEncoder *)this, &cfstr_Drawindexedind_0.isa);
            WebGPU::RenderBundleEncoder::finalizeRenderCommand((WebGPU::RenderBundleEncoder *)this);
            goto LABEL_135;
          }
        }
      }
      WebGPU::RenderBundleEncoder::makeInvalid((WebGPU::RenderBundleEncoder *)this, &cfstr_Drawindexedind.isa);
    }
    id v56 = this[38];
    this[38] = 0;

    unint64_t v57 = (unint64_t)this[12] + 1;
    this[12] = (id)v57;
    if (_MergedGlobals_0 != 1)
    {
      uint64_t v58 = *((void *)this[1] + 22) >> 9;
      if (v58 <= 0x186A0) {
        LODWORD(v5++*(_DWORD *)(result + 8) = 100000;
      }
      dword_1EC00AD74 = v58;
      _MergedGlobals_0 = 1;
      if (!this[10]) {
        goto LABEL_135;
      }
LABEL_86:
      if (v57 < v58) {
        goto LABEL_135;
      }
      unsigned int v59 = this[37];
      if (v59)
      {
        if (v59[1]) {
          goto LABEL_135;
        }
      }
      if (this[9]) {
        goto LABEL_135;
      }
      goto LABEL_134;
    }
    LODWORD(v5++*(_DWORD *)(result + 8) = dword_1EC00AD74;
    if (this[10]) {
      goto LABEL_86;
    }
LABEL_135:

    goto LABEL_136;
  }
LABEL_14:
  id v16 = this[38];
  this[38] = 0;

  unint64_t v17 = (unint64_t)this[12] + 1;
  this[12] = (id)v17;
  if (_MergedGlobals_0 == 1)
  {
    LODWORD(v1++*(_DWORD *)(result + 8) = dword_1EC00AD74;
    if (!this[10]) {
      return;
    }
    goto LABEL_16;
  }
  uint64_t v18 = *((void *)this[1] + 22) >> 9;
  if (v18 <= 0x186A0) {
    LODWORD(v1++*(_DWORD *)(result + 8) = 100000;
  }
  dword_1EC00AD74 = v18;
  _MergedGlobals_0 = 1;
  if (this[10])
  {
LABEL_16:
    if (v17 >= v18)
    {
      unint64_t v19 = this[37];
      if ((!v19 || !v19[1]) && !this[9])
      {
        WebGPU::RenderBundleEncoder::endCurrentICB(this);
      }
    }
  }
}

void sub_1825144AC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WebGPU::Buffer *a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v21 = a17;
  a17 = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  WebGPU::RenderBundleEncoder::drawIndexedIndirect(WebGPU::Buffer &,unsigned long long)::$_0::~$_0(&a14, a2);

  _Unwind_Resume(a1);
}

void sub_182514504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1825145D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1825145E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WebGPU::Buffer **WebGPU::RenderBundleEncoder::drawIndexedIndirect(WebGPU::Buffer &,unsigned long long)::$_0::~$_0(WebGPU::Buffer **a1, void *a2)
{
  unint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
      WTF::fastFree(v6, v7);
      uint64_t v4 = *a1;
      *a1 = 0;
      if (!v4) {
        return a1;
      }
      goto LABEL_5;
    }
    --*(_DWORD *)v3;
  }
  uint64_t v4 = *a1;
  *a1 = 0;
  if (!v4) {
    return a1;
  }
LABEL_5:
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    return a1;
  }
  WebGPU::Buffer::~Buffer(v4, a2);
  WTF::fastFree(v8, v9);
  return a1;
}

void WebGPU::RenderBundleEncoder::drawIndirect(id *this, id *a2, unint64_t a3)
{
  unint64_t v6 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "RenderBundleEncoder::FinalizeRenderCommand WebGPU::RenderBundleEncoder::drawIndirect(Buffer &, uint64_t)");
  if (WebGPU::RenderBundleEncoder::returnIfEncodingIsFinished((WebGPU::RenderBundleEncoder *)this, (NSString *)v6))
  {

    goto LABEL_14;
  }
  id v7 = this[10];

  if (v7)
  {
    *((unsigned char *)this + 384) = 1;
    char v72 = 0;
    id v8 = this[37];
    if (v8 && (uint64_t v9 = v8[1]) != 0)
    {
      id v10 = this[6];
      if (v10)
      {
        uint64_t v11 = (unsigned int *)*((void *)v10 + 16);
        if (v11)
        {
          uint64_t v12 = *(v11 - 1);
          uint64_t v13 = &v11[8 * v12];
          if (*(v11 - 3))
          {
            uint64_t v14 = v11;
            if (v12)
            {
              uint64_t v15 = 32 * v12;
              uint64_t v14 = v11;
              while (*v14 >= 0xFFFFFFFE)
              {
                v14 += 8;
                v15 -= 32;
                if (!v15)
                {
                  uint64_t v14 = v13;
                  break;
                }
              }
            }
          }
          else
          {
            uint64_t v14 = &v11[8 * v12];
            uint64_t v13 = v14;
          }
        }
        else
        {
          uint64_t v14 = 0;
          uint64_t v13 = 0;
        }
        if (v11) {
          v11 += 8 * *(v11 - 1);
        }
        if (v11 != v14)
        {
          unsigned int v22 = -1;
          unsigned int v21 = -1;
          while (1)
          {
            if (*((_DWORD *)this + 51) <= *v14)
            {
              unint64_t v23 = 0;
              unint64_t v24 = *((void *)v14 + 1);
              if (v24)
              {
LABEL_36:
                unint64_t v25 = *((void *)v14 + 2);
                BOOL v26 = v23 >= v25;
                unint64_t v27 = v23 - v25;
                if (v26) {
                  uint64_t v28 = v27 / v24 + 1;
                }
                else {
                  LODWORD(v2++*(_DWORD *)(result + 8) = 0;
                }
                if (v21 >= v28) {
                  unsigned int v29 = v28;
                }
                else {
                  unsigned int v29 = v21;
                }
                if (v22 < v28) {
                  LODWORD(v2++*(_DWORD *)(result + 8) = v22;
                }
                if (v14[6]) {
                  unsigned int v21 = v29;
                }
                else {
                  unsigned int v22 = v28;
                }
              }
            }
            else
            {
              unint64_t v23 = *((void *)this[24] + 5 * *v14 + 4);
              unint64_t v24 = *((void *)v14 + 1);
              if (v24) {
                goto LABEL_36;
              }
            }
            unint64_t v30 = v14 + 8;
            uint64_t v14 = v13;
            if (v30 != v13)
            {
              uint64_t v14 = v30;
              while (*v14 >= 0xFFFFFFFE)
              {
                v14 += 8;
                if (v14 == v13)
                {
                  uint64_t v14 = v13;
                  break;
                }
              }
            }
            if (v14 == v11) {
              goto LABEL_53;
            }
          }
        }
        unsigned int v21 = -1;
        unsigned int v22 = -1;
      }
      else
      {
        unsigned int v21 = 0;
        unsigned int v22 = 0;
      }
LABEL_53:
      uint64_t v31 = (WebGPU::Device *)this[1];
      unsigned int v32 = *((_DWORD *)this + 87);
      if (*(unsigned char *)(*(void *)(v9 + 152) + 76)) {
        unsigned int v33 = 0;
      }
      else {
        unsigned int v33 = *(void **)(v9 + 16);
      }
      id v34 = v33;
      uint64_t v35 = WebGPU::RenderPassEncoder::clampIndirectBufferToValidValues((uint64_t)a2, a3, v22, v21, v31, v32, v34, &v72);

      uint64_t v20 = (void *)v35;
    }
    else
    {
      uint64_t v20 = 0;
    }
    if ((WebGPU::RenderBundleEncoder::executePreDrawCommands((WebGPU::RenderBundleEncoder *)this) & 1) == 0)
    {
LABEL_100:
      id v57 = this[38];
      this[38] = 0;

      unint64_t v58 = (unint64_t)this[12] + 1;
      this[12] = (id)v58;
      if (_MergedGlobals_0 == 1)
      {
        LODWORD(v59) = dword_1EC00AD74;
        if (!this[10])
        {
LABEL_119:

          return;
        }
      }
      else
      {
        uint64_t v59 = *((void *)this[1] + 22) >> 9;
        if (v59 <= 0x186A0) {
          LODWORD(v59) = 100000;
        }
        dword_1EC00AD74 = v59;
        _MergedGlobals_0 = 1;
        if (!this[10]) {
          goto LABEL_119;
        }
      }
      if (v58 >= v59)
      {
        id v60 = this[37];
        if ((!v60 || !v60[1]) && !this[9]) {
          WebGPU::RenderBundleEncoder::endCurrentICB(this);
        }
      }
      goto LABEL_119;
    }
    unint64_t v36 = WebGPU::RenderBundleEncoder::currentRenderCommand((WebGPU::RenderBundleEncoder *)this);
    if (v36)
    {
      uint64_t v37 = this[37];
      if (!v37 || (uint64_t v38 = v37[1]) == 0)
      {
        id v41 = a2[2];
        unint64_t v42 = [v41 length];
        if (v42 < a3 || v42 - a3 <= 0xF)
        {
        }
        else
        {
          id v43 = v41;
          int v44 = (unsigned int *)[v43 contents];

          if (v44 && v44[1] && *v44)
          {
            id v45 = this[23];
            id v46 = a2[2];
            ++*(_DWORD *)a2;
            *(void *)&long long v69 = a2;
            DWORD2(v69) = 0;
            BOOL v47 = WebGPU::RenderBundleEncoder::addResource((uint64_t)this, v45, v46, 1, (uint64_t)&v69);
            if (DWORD2(v69) != -1) {
              ((void (*)(uint64_t *, long long *))off_1ECABB2D0[DWORD2(v69)])(&v71, &v69);
            }
            if (!v47)
            {
              WebGPU::RenderBundleEncoder::finalizeRenderCommand((WebGPU::RenderBundleEncoder *)this);
              goto LABEL_118;
            }
            [v36 drawPrimitives:this[20] vertexStart:v44[2] vertexCount:*v44 instanceCount:v44[1] baseInstance:v44[3]];
            goto LABEL_99;
          }
        }
        id v65 = this[38];
        this[38] = 0;

        unint64_t v66 = (unint64_t)this[12] + 1;
        this[12] = (id)v66;
        if (_MergedGlobals_0 == 1)
        {
          LODWORD(v67) = dword_1EC00AD74;
          if (!this[10]) {
            goto LABEL_118;
          }
        }
        else
        {
          uint64_t v67 = *((void *)this[1] + 22) >> 9;
          if (v67 <= 0x186A0) {
            LODWORD(v67) = 100000;
          }
          dword_1EC00AD74 = v67;
          _MergedGlobals_0 = 1;
          if (!this[10]) {
            goto LABEL_118;
          }
        }
        if (v66 < v67) {
          goto LABEL_118;
        }
        id v68 = this[37];
        if (v68)
        {
          if (v68[1]) {
            goto LABEL_118;
          }
        }
        if (this[9]) {
          goto LABEL_118;
        }
LABEL_117:
        WebGPU::RenderBundleEncoder::endCurrentICB(this);
        goto LABEL_118;
      }
      WebGPU::Buffer::setCommandEncoder((WebGPU::Buffer *)a2, *(WebGPU::CommandEncoder **)(v38 + 152));
      id v39 = this[37];
      if (v39) {
        id v39 = (id)*((void *)v39 + 1);
      }
      if (*(unsigned char *)(*((void *)v39 + 19) + 76))
      {
        id v40 = 0;

        if (!v40) {
          goto LABEL_80;
        }
        goto LABEL_88;
      }
      id v53 = *((id *)v39 + 2);

      if (v53)
      {
LABEL_88:
        if (*((unsigned char *)a2 + 52) != 4 && v20)
        {
          id v54 = this[37];
          if (v54) {
            uint64_t v55 = (id *)*((void *)v54 + 1);
          }
          else {
            uint64_t v55 = 0;
          }
          id v56 = WebGPU::RenderPassEncoder::renderCommandEncoder(v55);
          [v56 drawPrimitives:this[20] indirectBuffer:v20 indirectBufferOffset:0];
        }
LABEL_99:

        objc_msgSend(this[10], "setCommandTypes:", objc_msgSend(this[10], "commandTypes") | 1);
        goto LABEL_100;
      }
    }
    else
    {
      if (*((unsigned char *)a2 + 52) == 4 || a2[2])
      {
        uint64_t v48 = a2[35];
        if (v48[1])
        {
          if (v48 == this[1])
          {
            if ((a3 & 3) != 0 || (a2[6] & 0x100) == 0 || (unint64_t)a2[5] < a3 + 16)
            {
              WebGPU::RenderBundleEncoder::makeInvalid((WebGPU::RenderBundleEncoder *)this, &cfstr_DrawindirectVa.isa);
              WebGPU::RenderBundleEncoder::finalizeRenderCommand((WebGPU::RenderBundleEncoder *)this);
              goto LABEL_118;
            }
            ++*(_DWORD *)a2;
            *(void *)&long long v69 = a2;
            *((void *)&v69 + 1) = a3;
            ++*(_DWORD *)this;
            uint64_t v70 = this;
            uint64_t v61 = WTF::fastMalloc((WTF *)0x20);
            *(void *)uint64_t v61 = &unk_1ECABB3A0;
            *(_OWORD *)(v61 + ++*(_DWORD *)(result + 8) = v69;
            id v62 = v70;
            *(void *)&long long v69 = 0;
            uint64_t v70 = 0;
            uint64_t v71 = v61;
            *(void *)(v61 + 24) = v62;
            WebGPU::RenderBundleEncoder::recordCommand((char *)this, (unint64_t)&v71);
            uint64_t v64 = v71;
            uint64_t v71 = 0;
            if (v64) {
              (*(void (**)(uint64_t))(*(void *)v64 + 8))(v64);
            }
            WebGPU::RenderBundleEncoder::drawIndexedIndirect(WebGPU::Buffer &,unsigned long long)::$_0::~$_0((WebGPU::Buffer **)&v69, v63);
            goto LABEL_99;
          }
        }
      }
      WebGPU::RenderBundleEncoder::makeInvalid((WebGPU::RenderBundleEncoder *)this, &cfstr_DrawindirectBu.isa);
    }
LABEL_80:
    id v49 = this[38];
    this[38] = 0;

    unint64_t v50 = (unint64_t)this[12] + 1;
    this[12] = (id)v50;
    if (_MergedGlobals_0 != 1)
    {
      uint64_t v51 = *((void *)this[1] + 22) >> 9;
      if (v51 <= 0x186A0) {
        LODWORD(v51) = 100000;
      }
      dword_1EC00AD74 = v51;
      _MergedGlobals_0 = 1;
      if (!this[10]) {
        goto LABEL_118;
      }
LABEL_82:
      if (v50 < v51) {
        goto LABEL_118;
      }
      uint64_t v52 = this[37];
      if (v52)
      {
        if (v52[1]) {
          goto LABEL_118;
        }
      }
      if (this[9]) {
        goto LABEL_118;
      }
      goto LABEL_117;
    }
    LODWORD(v51) = dword_1EC00AD74;
    if (this[10]) {
      goto LABEL_82;
    }
LABEL_118:

    goto LABEL_119;
  }
LABEL_14:
  id v16 = this[38];
  this[38] = 0;

  unint64_t v17 = (unint64_t)this[12] + 1;
  this[12] = (id)v17;
  if (_MergedGlobals_0 == 1)
  {
    LODWORD(v1++*(_DWORD *)(result + 8) = dword_1EC00AD74;
    if (!this[10]) {
      return;
    }
    goto LABEL_16;
  }
  uint64_t v18 = *((void *)this[1] + 22) >> 9;
  if (v18 <= 0x186A0) {
    LODWORD(v1++*(_DWORD *)(result + 8) = 100000;
  }
  dword_1EC00AD74 = v18;
  _MergedGlobals_0 = 1;
  if (this[10])
  {
LABEL_16:
    if (v17 >= v18)
    {
      unint64_t v19 = this[37];
      if ((!v19 || !v19[1]) && !this[9])
      {
        WebGPU::RenderBundleEncoder::endCurrentICB(this);
      }
    }
  }
}

void sub_182514E70(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, WebGPU::Buffer *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v16 = a13;
  a13 = 0;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    WebGPU::RenderBundleEncoder::drawIndexedIndirect(WebGPU::Buffer &,unsigned long long)::$_0::~$_0(&a10, v17);

    _Unwind_Resume(a1);
  }
  WebGPU::RenderBundleEncoder::drawIndexedIndirect(WebGPU::Buffer &,unsigned long long)::$_0::~$_0(&a10, a2);

  _Unwind_Resume(a1);
}

void sub_182514ED8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182514EF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  if (v7 != -1)
  {
    ((void (*)(char *, uint64_t *))off_1ECABB2D0[v7])(va1, (uint64_t *)va);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_182514F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182514F6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182514F7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182514F8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN6WebGPU19RenderBundleEncoder6finishERK26WGPURenderBundleDescriptor_block_invoke(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v3 + 384))
  {
    uint64_t v4 = *(void **)(v3 + 256);
    ++*(_DWORD *)v3;
    uint64_t v35 = (_DWORD *)v3;
    WebGPU::RenderBundle::create(a2, v4, &v35, (long long *)(v3 + 312), *(void *)(v3 + 96), *(atomic_uchar *volatile **)(v3 + 8));
    if (*(_DWORD *)v3 == 1)
    {
      WebGPU::RenderBundleEncoder::~RenderBundleEncoder((WebGPU::RenderBundleEncoder *)v3);
      WTF::fastFree(v18, v19);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(v3 + 96);
    WebGPU::RenderBundleEncoder::endCurrentICB(*(id **)(a1 + 32));
    if (*(_DWORD *)(v3 + 200))
    {
      uint64_t v7 = *(unsigned int *)(v3 + 204);
      if (v7)
      {
        uint64_t v8 = *(void ***)(v3 + 192);
        uint64_t v9 = 40 * v7;
        do
        {
          id v10 = *v8;
          v8 += 5;

          v9 -= 40;
        }
        while (v9);
        *(_DWORD *)(v3 + 204) = 0;
      }
      uint64_t v11 = *(WTF **)(v3 + 192);
      if (v11)
      {
        *(void *)(v3 + 192) = 0;
        *(_DWORD *)(v3 + 200) = 0;
        WTF::fastFree(v11, v6);
      }
    }
    if (*(_DWORD *)(v3 + 216))
    {
      uint64_t v12 = *(unsigned int *)(v3 + 220);
      if (v12)
      {
        uint64_t v13 = *(void ***)(v3 + 208);
        uint64_t v14 = 40 * v12;
        do
        {
          uint64_t v15 = *v13;
          v13 += 5;

          v14 -= 40;
        }
        while (v14);
        *(_DWORD *)(v3 + 220) = 0;
      }
      uint64_t v16 = *(WTF **)(v3 + 208);
      if (v16)
      {
        *(void *)(v3 + 20++*(_DWORD *)(result + 8) = 0;
        *(_DWORD *)(v3 + 216) = 0;
        WTF::fastFree(v16, v6);
      }
    }
    [*(id *)(v3 + 80) setMaxVertexBufferBindCount:0];
    [*(id *)(v3 + 80) setMaxFragmentBufferBindCount:0];
    unint64_t v17 = *(void **)(v3 + 256);
    if (v17)
    {
      id v34 = 0;
      WebGPU::RenderBundle::create(a2, v17, &v34, (long long *)(v3 + 312), v5, *(atomic_uchar *volatile **)(v3 + 8));
    }
    else if (*(void *)(v3 + 376))
    {
      uint64_t v20 = *(void *)(v3 + 8);
      MEMORY[0x18530AF50](&v33);
      uint64_t v21 = *(void *)(v20 + 32);
      uint64_t v22 = 32 * *(unsigned int *)(v20 + 44);
      uint64_t v23 = v21 + v22;
      while (v22)
      {
        int v24 = *(_DWORD *)(v23 - 8);
        v23 -= 32;
        v22 -= 32;
        if (!v24)
        {
          uint64_t v25 = v21 + v22;
          if (!*(unsigned char *)(v25 + 16))
          {
            BOOL v26 = v33;
            unsigned int v33 = 0;
            *(_DWORD *)uint64_t v25 = 1;
            *(void *)(v25 + ++*(_DWORD *)(result + 8) = v26;
            *(unsigned char *)(v25 + 16) = 1;
          }
          goto LABEL_32;
        }
      }
      uint64_t v27 = *(void *)(v20 + 24);
      if (v27)
      {
        (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v27 + 16))(v27, 1, &v33);
        uint64_t v28 = *(void *)(v20 + 24);
        *(void *)(v20 + 24) = 0;
        if (v28) {
          (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
        }
      }
LABEL_32:
      unsigned int v29 = v33;
      unsigned int v33 = 0;
      if (v29)
      {
        if (*v29 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v29 -= 2;
        }
      }
      unint64_t v30 = *(atomic_uchar *volatile **)(v3 + 8);
      uint64_t v31 = (NSString *)*(id *)(v3 + 376);
      unsigned int v32 = (WebGPU::RenderBundle *)WTF::fastMalloc((WTF *)0x78);
      WebGPU::RenderBundle::RenderBundle(v32, v30, v31);
      *a2 = (uint64_t)v32;
    }
    else
    {
      __break(0xC471u);
    }
  }
}

void sub_182515284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void WebGPU::RenderBundle::create(uint64_t *a1, void *a2, _DWORD **a3, long long *a4, uint64_t a5, atomic_uchar *volatile *a6)
{
  id v16 = a2;
  uint64_t v11 = WTF::fastMalloc((WTF *)0x78);
  uint64_t v12 = v11;
  uint64_t v13 = *a3;
  if (v13) {
    ++*v13;
  }
  unint64_t v17 = v13;
  WebGPU::RenderBundle::RenderBundle(v11, v16, &v17, a4, a5, a6);
  *a1 = v12;
  if (v13)
  {
    if (*v13 == 1)
    {
      WebGPU::RenderBundleEncoder::~RenderBundleEncoder((WebGPU::RenderBundleEncoder *)v13);
      WTF::fastFree(v14, v15);
    }
    else
    {
      --*v13;
    }
  }
}

void sub_1825153C0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  if (v9) {
    WTF::RefCounted<WebGPU::RenderBundleEncoder>::deref(v9);
  }
  WTF::fastFree(v10, a2);

  _Unwind_Resume(a1);
}

void sub_1825153E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void WebGPU::RenderBundleEncoder::replayCommands(WebGPU::RenderBundleEncoder *this, WebGPU::RenderPassEncoder *a2)
{
  if (*(unsigned char *)(*((void *)a2 + 19) + 76))
  {
    id v2 = 0;
    goto LABEL_3;
  }
  id v2 = *((id *)a2 + 2);
  if (!v2 || !*((void *)this + 10))
  {
LABEL_3:

    return;
  }
  uint64_t v5 = *(void *)(*((void *)this + 1) + 8);

  if (!v5) {
    return;
  }
  uint64_t v7 = *((void *)a2 + 1);
  if (v7) {
    goto LABEL_13;
  }
  uint64_t v7 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v7 = 1;
  *(void *)(v7 + ++*(_DWORD *)(result + 8) = a2;
  uint64_t v8 = (unsigned int *)*((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  if (!v8) {
    goto LABEL_13;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v6);
    uint64_t v7 = *((void *)a2 + 1);
    if (!v7) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v7 = *((void *)a2 + 1);
  if (v7) {
LABEL_13:
  }
    atomic_fetch_add((atomic_uint *volatile)v7, 1u);
LABEL_14:
  uint64_t v9 = (unsigned int *)*((void *)this + 37);
  *((void *)this + 37) = v7;
  if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v6);
    WebGPU::RenderBundleEncoder::endCurrentICB((id *)this);
    uint64_t v11 = (unsigned int *)*((void *)this + 37);
    *((void *)this + 37) = 0;
    if (v11)
    {
LABEL_17:
      if (atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v10);
      }
    }
  }
  else
  {
    WebGPU::RenderBundleEncoder::endCurrentICB((id *)this);
    uint64_t v11 = (unsigned int *)*((void *)this + 37);
    *((void *)this + 37) = 0;
    if (v11) {
      goto LABEL_17;
    }
  }
  uint64_t v12 = (void *)*((void *)this + 13);
  *((void *)this + 13) = 0;

  uint64_t v13 = (void *)*((void *)this + 14);
  *((void *)this + 14) = 0;

  if (*((unsigned char *)this + 232))
  {
    uint64_t v15 = *((void *)this + 28);
    if (v15)
    {
      uint64_t v16 = *(unsigned int *)(v15 - 4);
      if (v16)
      {
        uint64_t v17 = v15 + 8;
        do
        {
          if (*(_DWORD *)(v17 - 8) != -2)
          {
            uint64_t v18 = *(WTF **)v17;
            if (*(void *)v17)
            {
              *(void *)uint64_t v17 = 0;
              *(_DWORD *)(v17 + ++*(_DWORD *)(result + 8) = 0;
              WTF::fastFree(v18, v14);
            }
          }
          v17 += 24;
          --v16;
        }
        while (v16);
      }
      WTF::fastFree((WTF *)(v15 - 16), v14);
    }
    *((unsigned char *)this + 232) = 0;
  }
}

void WebGPU::RenderBundleEncoder::setBindGroup(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v86 = a2;
  objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::RenderBundleEncoder::setBindGroup(uint32_t, const BindGroup &, std::optional<Vector<uint32_t>> &&)");
  id v75 = (id)objc_claimAutoreleasedReturnValue();
  if (WebGPU::RenderBundleEncoder::returnIfEncodingIsFinished((WebGPU::RenderBundleEncoder *)a1, (NSString *)v75))
  {

    return;
  }
  uint64_t v8 = *(void *)(a1 + 80);

  if (!v8) {
    return;
  }
  if (!*(void *)(a3 + 64) || (uint64_t v9 = *(void *)(a3 + 40), !*(void *)(v9 + 8)) || v9 != *(void *)(a1 + 8))
  {
    WebGPU::RenderBundleEncoder::makeInvalid((WebGPU::RenderBundleEncoder *)a1, &cfstr_SetbindgroupIn.isa);
    return;
  }
  uint64_t v10 = WebGPU::RenderBundleEncoder::currentRenderCommand((WebGPU::RenderBundleEncoder *)a1);
  unsigned int v11 = *(_DWORD *)(a1 + 60);
  if (a2 > v11) {
    unsigned int v11 = a2;
  }
  *(_DWORD *)(a1 + 60) = v11;
  uint64_t v74 = (void *)v10;
  if (!v10)
  {
    uint64_t v32 = *(void *)(a3 + 64);
    if (v32 && (uint64_t v33 = *(void *)(a3 + 40), *(void *)(v33 + 8)) && v33 == *(void *)(a1 + 8))
    {
      if (*(_DWORD *)(v33 + 104) > a2)
      {
        if (*((unsigned char *)a4 + 16)
          && (WebGPU::BindGroupLayout::errorValidatingDynamicOffsets(v32, *a4, *((unsigned int *)a4 + 3), a3),
              (int v63 = objc_claimAutoreleasedReturnValue()) != 0))
        {
          uint64_t v64 = [NSString stringWithFormat:@"GPURenderBundleEncoder.setBindGroup: %@", v63];
          WebGPU::RenderBundleEncoder::makeInvalid((WebGPU::RenderBundleEncoder *)a1, v64);
        }
        else
        {
          if (*(void *)(a3 + 24))
          {
            unint64_t v65 = [*(id *)(a1 + 80) maxFragmentBufferBindCount];
            if (v65 <= v86 + 2) {
              unint64_t v66 = v86 + 2;
            }
            else {
              unint64_t v66 = v65;
            }
            [*(id *)(a1 + 80) setMaxFragmentBufferBindCount:v66];
          }
          LODWORD(v79) = v86;
          ++*(_DWORD *)a3;
          ++*(_DWORD *)a1;
          uint64_t v80 = a3;
          uint64_t v81 = a1;
          LOBYTE(v82) = 0;
          char v84 = 0;
          if (*((unsigned char *)a4 + 16))
          {
            uint64_t v82 = *a4;
            uint64_t v67 = a4[1];
            *a4 = 0;
            a4[1] = 0;
            uint64_t v83 = v67;
            char v84 = 1;
          }
          WTF::Function<BOOL ()(void)>::Function<WebGPU::RenderBundleEncoder::setBindGroup(unsigned int,WebGPU::BindGroup const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)::$_0,void>((uint64_t *)&v85, (uint64_t)&v79);
          WebGPU::RenderBundleEncoder::recordCommand((char *)a1, (unint64_t)&v85);
          long long v69 = v85;
          long long v85 = 0;
          if (v69) {
            (*(void (**)(_DWORD *))(*(void *)v69 + 8))(v69);
          }
          WebGPU::RenderBundleEncoder::setBindGroup(unsigned int,WebGPU::BindGroup const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)::$_0::~$_0((uint64_t)&v79, v68);
        }
        goto LABEL_49;
      }
      id v34 = @"setBindGroup: groupIndex >= limits.maxBindGroups";
    }
    else
    {
      id v34 = @"setBindGroup: invalid bind group passed";
    }
    WebGPU::RenderBundleEncoder::makeInvalid((WebGPU::RenderBundleEncoder *)a1, &v34->isa);
    goto LABEL_49;
  }
  uint64_t v71 = a4;
  if (*((unsigned char *)a4 + 16) && *((_DWORD *)a4 + 3))
  {
    int v70 = *((_DWORD *)a4 + 3);
    if (*(unsigned char *)(a1 + 232)) {
      WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)(a1 + 224), (int *)&v86, a4, (uint64_t)&v79);
    }
  }
  else
  {
    int v70 = 0;
  }
  unsigned int v12 = *(_DWORD *)(a3 + 60);
  uint64_t v73 = a3;
  if (!v12)
  {
LABEL_51:
    long long v85 = (_DWORD *)a3;
    WTF::HashMap<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WebGPU::BindGroup const*>((uint64_t *)(a1 + 240), (int *)&v86, &v85, (uint64_t)&v79);
    unsigned int v35 = *(_DWORD *)(*(void *)(a1 + 8) + 108) - 1;
    BOOL v36 = v35 >= v86;
    unsigned int v37 = v35 - v86;
    if (v36) {
      unsigned int v38 = v37;
    }
    else {
      unsigned int v38 = v86;
    }
    id v39 = *(id *)(a3 + 16);
    if (v39)
    {
      unsigned int v40 = *(_DWORD *)(a1 + 204);

      if (v40 > v38)
      {
        id v41 = *(void **)(a1 + 184);
        unint64_t v42 = *(void **)(a3 + 16);
        uint64_t v79 = 0;
        LODWORD(v80) = 0;
        BOOL v43 = WebGPU::RenderBundleEncoder::addResource(a1, v41, v42, 1, (uint64_t)&v79);
        if (v80 != -1) {
          ((void (*)(_DWORD **, uint64_t *))off_1ECABB2D0[v80])(&v85, &v79);
        }
        if (!v43) {
          goto LABEL_49;
        }
        a3 = v73;
        id v44 = *(id *)(v73 + 16);
        if (!*((unsigned char *)v71 + 16)) {
          goto LABEL_83;
        }
        id v45 = v44;
        uint64_t v46 = *v71;
        id v47 = *(id *)(v73 + 16);
        uint64_t v48 = [v47 length];
        if (*(_DWORD *)(a1 + 204) <= v38)
        {
          __break(0xC471u);
          JUMPOUT(0x182515C34);
        }
        uint64_t v49 = v48;
        uint64_t v50 = *(void *)(a1 + 192) + 40 * v38;
        uint64_t v51 = *(void **)v50;
        *(void *)uint64_t v50 = v45;

        *(void *)(v50 + ++*(_DWORD *)(result + 8) = 0;
        *(_DWORD *)(v50 + 16) = v70;
        *(void *)(v50 + 24) = v46;
        *(void *)(v50 + 32) = v49;
      }
    }
    id v52 = *(id *)(a3 + 24);
    if (!v52) {
      goto LABEL_49;
    }
    unsigned int v53 = *(_DWORD *)(a1 + 220);
    unsigned int v54 = v86;

    if (v53 <= v54 || !WebGPU::RenderBundleEncoder::addResource(a1, *(void **)(a1 + 184), *(void **)(v73 + 24))) {
      goto LABEL_49;
    }
    id v55 = *(id *)(v73 + 24);
    if (*((unsigned char *)v71 + 16))
    {
      id v56 = v55;
      uint64_t v57 = *v71;
      id v58 = *(id *)(v73 + 24);
      uint64_t v59 = [v58 length];
      if (*(_DWORD *)(a1 + 220) > v86)
      {
        uint64_t v60 = v59;
        uint64_t v61 = *(void *)(a1 + 208) + 40 * v86;
        id v62 = *(void **)v61;
        *(void *)uint64_t v61 = v56;

        *(void *)(v61 + ++*(_DWORD *)(result + 8) = 0;
        *(_DWORD *)(v61 + 16) = v70;
        *(void *)(v61 + 24) = v57;
        *(void *)(v61 + 32) = v60;

        goto LABEL_49;
      }
LABEL_88:
      __break(0xC471u);
      JUMPOUT(0x182515C1CLL);
    }
LABEL_83:
    __break(1u);
    goto LABEL_88;
  }
  uint64_t v13 = *(void *)(a3 + 48);
  uint64_t v72 = v13 + 48 * v12;
  while (1)
  {
    id v76 = (id)*(unsigned int *)(v13 + 28);
    if (v76)
    {
      uint64_t v14 = 0;
      unint64_t v15 = 0;
      while (v15 < *(unsigned int *)(v13 + 28))
      {
        uint64_t v16 = *(void *)(v13 + 16);
        uint64_t v17 = [ResourceUsageAndRenderStage alloc];
        uint64_t v18 = v16 + v14;
        uint64_t v19 = *(void *)(v13 + 32);
        uint64_t v20 = *(void *)(v13 + 40);
        uint64_t v21 = *(unsigned int *)(v16 + v14);
        uint64_t v22 = *(unsigned int *)(v16 + v14 + 4);
        v77[0] = 0;
        int v78 = -1;
        uint64_t v23 = *(unsigned int *)(v16 + v14 + 16);
        if (v23 != -1)
        {
          ((void (*)(_DWORD **, unsigned char *, uint64_t))off_1ECABB2E8[v23])(&v85, v77, v18 + 8);
          int v78 = v23;
        }
        int v24 = [(ResourceUsageAndRenderStage *)v17 initWithUsage:v19 renderStages:v20 entryUsage:v21 binding:v22 resource:v77];
        if (v78 != -1) {
          ((void (*)(uint64_t *, unsigned char *))off_1ECABB2D0[v78])(&v79, v77);
        }
        int v78 = -1;
        if (v15 >= *(unsigned int *)(v13 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x182515C24);
        }
        BOOL v25 = WebGPU::RenderBundleEncoder::addResource(a1, *(void **)(a1 + 184), *(void **)(*(void *)v13 + 8 * v15), v24);

        if (!v25) {
          goto LABEL_49;
        }
        ++v15;
        v14 += 40;
        if (v76 == (id)v15) {
          goto LABEL_33;
        }
      }
      goto LABEL_88;
    }
LABEL_33:
    uint64_t v26 = *(void *)(a1 + 296);
    if (v26)
    {
      if (*(void *)(v26 + 8))
      {
        uint64_t v27 = *(unsigned int *)(v13 + 28);
        if (v27) {
          break;
        }
      }
    }
LABEL_22:
    v13 += 48;
    a3 = v73;
    if (v13 == v72) {
      goto LABEL_51;
    }
  }
  unint64_t v28 = 0;
  uint64_t v29 = 8;
  while (1)
  {
    if (v28 >= *(unsigned int *)(v13 + 28))
    {
      __break(0xC471u);
      JUMPOUT(0x182515C2CLL);
    }
    uint64_t v30 = *(void *)(a1 + 296);
    uint64_t v31 = v30 ? *(void *)(v30 + 8) : 0;
    if (!WebGPU::RenderPassEncoder::setCommandEncoder(v31, *(void *)(v13 + 16) + v29)) {
      break;
    }
    ++v28;
    v29 += 40;
    if (v27 == v28) {
      goto LABEL_22;
    }
  }
LABEL_49:
}

void sub_182515C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_182515C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_182515C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_182515D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_182515D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_182515D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, int a20,int a21)
{
  if (a21 != -1)
  {
    ((void (*)(uint64_t, char *))off_1ECABB2D0[a21])(v21 - 96, &a19);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_182515E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  _Unwind_Resume(a1);
}

uint64_t *WTF::Function<BOOL ()(void)>::Function<WebGPU::RenderBundleEncoder::setBindGroup(unsigned int,WebGPU::BindGroup const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)::$_0,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x38);
  *(void *)uint64_t v4 = &unk_1ECABB3C8;
  *(_DWORD *)(v4 + ++*(_DWORD *)(result + 8) = *(_DWORD *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(result + 8) = 0;
  *(void *)(v4 + 16) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(v4 + 24) = v6;
  *(unsigned char *)(v4 + 32) = 0;
  *(unsigned char *)(v4 + 4++*(_DWORD *)(result + 8) = 0;
  if (*(unsigned char *)(a2 + 40))
  {
    *(void *)(v4 + 32) = 0;
    *(void *)(v4 + 40) = 0;
    uint64_t v7 = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = 0;
    *(void *)(v4 + 32) = v7;
    LODWORD(v7) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    *(_DWORD *)(v4 + 40) = v7;
    LODWORD(v7) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    *(_DWORD *)(v4 + 44) = v7;
    *(unsigned char *)(v4 + 4++*(_DWORD *)(result + 8) = 1;
  }
  *a1 = v4;
  return a1;
}

uint64_t WebGPU::RenderBundleEncoder::setBindGroup(unsigned int,WebGPU::BindGroup const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)::$_0::~$_0(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v3 = *(WTF **)(a1 + 24);
    if (v3)
    {
      *(void *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  uint64_t v4 = *(WebGPU::RenderBundleEncoder **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v4);
      WTF::fastFree(v7, v8);
      uint64_t v5 = *(WebGPU::BindGroup **)(a1 + 8);
      *(void *)(a1 + ++*(_DWORD *)(result + 8) = 0;
      if (!v5) {
        return a1;
      }
      goto LABEL_8;
    }
    --*(_DWORD *)v4;
  }
  uint64_t v5 = *(WebGPU::BindGroup **)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = 0;
  if (!v5) {
    return a1;
  }
LABEL_8:
  if (*(_DWORD *)v5 != 1)
  {
    --*(_DWORD *)v5;
    return a1;
  }
  WebGPU::BindGroup::~BindGroup(v5, a2);
  WTF::fastFree(v9, v10);
  return a1;
}

void WebGPU::RenderBundleEncoder::setIndexBuffer(WebGPU::RenderBundleEncoder *a1, uint64_t a2, int a3, unint64_t a4, unint64_t a5)
{
  objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::RenderBundleEncoder::setIndexBuffer(Buffer &, WGPUIndexFormat, uint64_t, uint64_t)");
  id v32 = (id)objc_claimAutoreleasedReturnValue();
  if (WebGPU::RenderBundleEncoder::returnIfEncodingIsFinished(a1, (NSString *)v32))
  {

    return;
  }
  uint64_t v10 = *((void *)a1 + 10);

  if (!v10) {
    return;
  }
  ++*(_DWORD *)a2;
  unsigned int v12 = (WebGPU::Buffer *)*((void *)a1 + 2);
  *((void *)a1 + 2) = a2;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
    {
      WebGPU::Buffer::~Buffer(v12, v11);
      WTF::fastFree(v17, v18);
      if (*((void *)a1 + 2)) {
        goto LABEL_9;
      }
    }
    else
    {
      --*(_DWORD *)v12;
      if (*((void *)a1 + 2)) {
        goto LABEL_9;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x18251611CLL);
  }
LABEL_9:
  *((void *)a1 + 3) = a3 == 2;
  *((void *)a1 + 4) = a4;
  *((void *)a1 + 5) = a5;
  uint64_t v13 = *((void *)a1 + 37);
  if (v13)
  {
    uint64_t v14 = *(void *)(v13 + 8);
    if (v14)
    {
      WebGPU::Buffer::setCommandEncoder((WebGPU::Buffer *)a2, *(WebGPU::CommandEncoder **)(v14 + 152));
      uint64_t v15 = *((void *)a1 + 37);
      if (v15) {
        uint64_t v15 = *(void *)(v15 + 8);
      }
      if (*(unsigned char *)(*(void *)(v15 + 152) + 76))
      {
        id v16 = 0;

        if (!v16) {
          return;
        }
      }
      else
      {
        id v19 = *(id *)(v15 + 16);

        if (!v19) {
          return;
        }
      }
    }
  }
  if (*(unsigned char *)(a2 + 52) == 4 || *(void *)(a2 + 16))
  {
    uint64_t v20 = *(void *)(a2 + 280);
    if (*(void *)(v20 + 8))
    {
      if (v20 == *((void *)a1 + 1))
      {
        id v21 = *(id *)(*((void *)a1 + 2) + 16);
        uint64_t v22 = WebGPU::RenderBundleEncoder::currentRenderCommand(a1);

        if (v22)
        {
          uint64_t v23 = (void *)*((void *)a1 + 23);
          ++*(_DWORD *)a2;
          uint64_t v33 = (WebGPU::Buffer *)a2;
          LODWORD(v34) = 0;
          WebGPU::RenderBundleEncoder::addResource((uint64_t)a1, v23, v21, 1, (uint64_t)&v33);
          if (v34 != -1) {
            ((void (*)(uint64_t *, WebGPU::Buffer **))off_1ECABB2D0[v34])(&v37, &v33);
          }
          goto LABEL_40;
        }
        unint64_t v24 = *(void *)(a2 + 40);
        if (a5 == -1)
        {
          if (v24 < a4)
          {
LABEL_39:
            WebGPU::RenderBundleEncoder::makeInvalid(a1, &cfstr_Setindexbuffer_0.isa);
LABEL_40:

            return;
          }
          a5 = v24 - a4;
        }
        if (!__CFADD__(a4, a5) && a4 + a5 <= v24)
        {
          if ((*(unsigned char *)(a2 + 48) & 0x10) == 0) {
            goto LABEL_38;
          }
          uint64_t v25 = 3;
          if (a3 == 1) {
            uint64_t v25 = 1;
          }
          if ((v25 & a4) == 0)
          {
            if ((*(unsigned char *)(a2 + 52) == 4 || *(void *)(a2 + 16))
              && (uint64_t v26 = *(void *)(a2 + 280), *(void *)(v26 + 8))
              && v26 == *((void *)a1 + 1))
            {
              ++*(_DWORD *)a2;
              uint64_t v33 = (WebGPU::Buffer *)a2;
              LODWORD(v34) = a3;
              *((void *)&v34 + 1) = a4;
              unint64_t v35 = a5;
              ++*(_DWORD *)a1;
              BOOL v36 = a1;
              uint64_t v27 = WTF::fastMalloc((WTF *)0x30);
              *(void *)uint64_t v27 = &unk_1ECABB3F0;
              *(void *)(v27 + ++*(_DWORD *)(result + 8) = v33;
              unint64_t v28 = v35;
              *(_OWORD *)(v27 + 16) = v34;
              *(void *)(v27 + 32) = v28;
              uint64_t v29 = v36;
              uint64_t v33 = 0;
              BOOL v36 = 0;
              uint64_t v37 = v27;
              *(void *)(v27 + 40) = v29;
              WebGPU::RenderBundleEncoder::recordCommand((char *)a1, (unint64_t)&v37);
              uint64_t v31 = v37;
              uint64_t v37 = 0;
              if (v31) {
                (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
              }
              WebGPU::RenderBundleEncoder::setIndexBuffer(WebGPU::Buffer &,WGPUIndexFormat,unsigned long long,unsigned long long)::$_0::~$_0(&v33, v30);
            }
            else
            {
              WebGPU::RenderBundleEncoder::makeInvalid(a1, &cfstr_Setindexbuffer_2.isa);
            }
          }
          else
          {
LABEL_38:
            WebGPU::RenderBundleEncoder::makeInvalid(a1, &cfstr_Setindexbuffer_1.isa);
          }
          goto LABEL_40;
        }
        goto LABEL_39;
      }
    }
  }
  WebGPU::RenderBundleEncoder::makeInvalid(a1, &cfstr_Setindexbuffer.isa);
}

void sub_1825163A0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, WebGPU::Buffer *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v18 = a16;
  a16 = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  WebGPU::RenderBundleEncoder::setIndexBuffer(WebGPU::Buffer &,WGPUIndexFormat,unsigned long long,unsigned long long)::$_0::~$_0(&a11, a2);

  _Unwind_Resume(a1);
}

void sub_1825163F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182516400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182516410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  if (v7 != -1)
  {
    ((void (*)(char *, uint64_t *))off_1ECABB2D0[v7])(va1, (uint64_t *)va);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_182516454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

WebGPU::Buffer **WebGPU::RenderBundleEncoder::setIndexBuffer(WebGPU::Buffer &,WGPUIndexFormat,unsigned long long,unsigned long long)::$_0::~$_0(WebGPU::Buffer **a1, void *a2)
{
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
      WTF::fastFree(v6, v7);
      uint64_t v4 = *a1;
      *a1 = 0;
      if (!v4) {
        return a1;
      }
      goto LABEL_5;
    }
    --*(_DWORD *)v3;
  }
  uint64_t v4 = *a1;
  *a1 = 0;
  if (!v4) {
    return a1;
  }
LABEL_5:
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    return a1;
  }
  WebGPU::Buffer::~Buffer(v4, a2);
  WTF::fastFree(v8, v9);
  return a1;
}

BOOL WebGPU::RenderBundleEncoder::icbNeedsToBeSplit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 384)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 296);
  if (v6) {
    LOBYTE(v6) = *(void *)(v6 + 8) != 0;
  }
  BOOL result = 0;
  if (a2 != a3 && (v6 & 1) == 0)
  {
    if (*(_DWORD *)(a2 + 92) == *(_DWORD *)(a3 + 92)
      && *(void *)(a2 + 64) == *(void *)(a3 + 64)
      && *(void *)(a2 + 56) == *(void *)(a3 + 56)
      && *(void *)(a2 + 72) == *(void *)(a3 + 72)
      && (uint64_t v7 = *(void *)(a3 + 112),
          id v8 = *(id *)(a2 + 112),
          LOBYTE(v7) = [v8 isEqual:v7],
          v8,
          (v7 & 1) != 0)
      && *(float *)(a2 + 80) == *(float *)(a3 + 80)
      && *(float *)(a2 + 84) == *(float *)(a3 + 84))
    {
      return *(float *)(a2 + 88) != *(float *)(a3 + 88);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void sub_182516608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebGPU::RenderBundleEncoder::setPipeline(uint64_t a1, uint64_t a2)
{
  objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::RenderBundleEncoder::setPipeline(const RenderPipeline &)");
  id v35 = (id)objc_claimAutoreleasedReturnValue();
  if (WebGPU::RenderBundleEncoder::returnIfEncodingIsFinished((WebGPU::RenderBundleEncoder *)a1, (NSString *)v35))
  {
LABEL_2:

    return;
  }
  uint64_t v4 = *(void *)(a1 + 80);

  if (!v4) {
    return;
  }
  if (!*(void *)(a2 + 16) || (uint64_t v5 = *(void *)(a2 + 24), !*(void *)(v5 + 8)) || v5 != *(void *)(a1 + 8))
  {
    WebGPU::RenderBundleEncoder::makeInvalid((WebGPU::RenderBundleEncoder *)a1, &cfstr_SetpipelineInv.isa);
    return;
  }
  WebGPU::RenderBundleEncoder::currentRenderCommand((WebGPU::RenderBundleEncoder *)a1);
  id v35 = (id)objc_claimAutoreleasedReturnValue();
  if (v35)
  {
    uint64_t v6 = (id *)(a1 + 104);
    id v7 = *(id *)(a1 + 104);
    id v8 = *(id *)(a1 + 112);
    uint64_t v9 = *(void *)(a1 + 120);
    uint64_t v10 = *(void *)(a1 + 128);
    uint64_t v11 = *(void *)(a1 + 136);
    float v13 = *(float *)(a1 + 144);
    float v12 = *(float *)(a1 + 148);
    float v14 = *(float *)(a1 + 152);
    objc_storeStrong((id *)(a1 + 104), *(id *)(a2 + 16));
    objc_storeStrong((id *)(a1 + 112), *(id *)(a2 + 120));
    *(int8x16_t *)(a1 + 120) = vextq_s8(*(int8x16_t *)(a2 + 56), *(int8x16_t *)(a2 + 56), 8uLL);
    *(void *)(a1 + 136) = *(void *)(a2 + 72);
    *(void *)(a1 + 160) = *(void *)(a2 + 32);
    *(void *)(a1 + 144) = *(void *)(a2 + 80);
    *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 88);
    *(_DWORD *)(a1 + 38++*(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 92);
    uint64_t v15 = *(void *)(a1 + 296);
    if (v15)
    {
      uint64_t v16 = *(void *)(v15 + 8);
      if (v16)
      {
        WebGPU::RenderPassEncoder::errorValidatingPipeline(v16, a2);
        uint64_t v17 = (NSString *)objc_claimAutoreleasedReturnValue();
        if (v17)
        {
          WebGPU::RenderBundleEncoder::makeInvalid((WebGPU::RenderBundleEncoder *)a1, v17);

          goto LABEL_2;
        }
        uint64_t v20 = *(void *)(a1 + 296);
        if (v20) {
          id v21 = *(id **)(v20 + 8);
        }
        else {
          id v21 = 0;
        }
        uint64_t v27 = WebGPU::RenderPassEncoder::renderCommandEncoder(v21);
        id v34 = *v6;
        if (v34 && v7 != *v6) {
          [v27 setRenderPipelineState:v34];
        }
        id v28 = *(id *)(a1 + 112);
        uint64_t v29 = v28;
        if (v28 && v8 != v28) {
          [v27 setDepthStencilState:v28];
        }
        if (v9 != *(void *)(a1 + 120)) {
          objc_msgSend(v27, "setCullMode:");
        }
        if (v10 != *(void *)(a1 + 128)) {
          objc_msgSend(v27, "setFrontFacingWinding:");
        }
        if (v11 != *(void *)(a1 + 136)) {
          objc_msgSend(v27, "setDepthClipMode:");
        }
        if (v13 != *(float *)(a1 + 144) || v12 != *(float *)(a1 + 148) || v14 != *(float *)(a1 + 152)) {
          objc_msgSend(v27, "setDepthBias:slopeScale:clamp:");
        }
      }
    }

    goto LABEL_51;
  }
  if (!*(void *)(a2 + 16) || (uint64_t v18 = *(void *)(a2 + 24), !*(void *)(v18 + 8)) || v18 != *(void *)(a1 + 8))
  {
    id v19 = @"setPipeline: invalid pipeline passed";
LABEL_21:
    WebGPU::RenderBundleEncoder::makeInvalid((WebGPU::RenderBundleEncoder *)a1, &v19->isa);
    goto LABEL_2;
  }
  if (!WebGPU::RenderPipeline::validateRenderBundle(a2, a1 + 312))
  {
    id v19 = @"setPipeline: validation failed";
    goto LABEL_21;
  }
  if (*(_DWORD *)(a2 + 92) != -1) {
    *(unsigned char *)(a1 + 384) = 1;
  }
  uint64_t v22 = *(void *)(a1 + 48);
  if (v22 && *(void *)(a1 + 96) && WebGPU::RenderBundleEncoder::icbNeedsToBeSplit(a1, v22, a2)) {
    WebGPU::RenderBundleEncoder::endCurrentICB((id *)a1);
  }
  ++*(_DWORD *)a2;
  ++*(_DWORD *)a1;
  BOOL v36 = (WebGPU::RenderPipeline *)a2;
  uint64_t v37 = a1;
  uint64_t v23 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v23 = &unk_1ECABB418;
  v23[1] = v36;
  uint64_t v24 = v37;
  BOOL v36 = 0;
  uint64_t v37 = 0;
  v23[2] = v24;
  unsigned int v38 = v23;
  WebGPU::RenderBundleEncoder::recordCommand((char *)a1, (unint64_t)&v38);
  uint64_t v26 = v38;
  unsigned int v38 = 0;
  if (v26) {
    (*(void (**)(void *))(*v26 + 8))(v26);
  }
  WebGPU::RenderBundleEncoder::setPipeline(WebGPU::RenderPipeline const&)::$_0::~$_0(&v36, v25);
LABEL_51:

  ++*(_DWORD *)a2;
  uint64_t v31 = *(WebGPU::RenderPipeline **)(a1 + 48);
  *(void *)(a1 + 4++*(_DWORD *)(result + 8) = a2;
  if (v31)
  {
    if (*(_DWORD *)v31 == 1)
    {
      WebGPU::RenderPipeline::~RenderPipeline(v31, v30);
      WTF::fastFree(v32, v33);
    }
    else
    {
      --*(_DWORD *)v31;
    }
  }
}

void sub_182516A84(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12, WebGPU::RenderPipeline *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17 = a16;
  a16 = 0;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    WebGPU::RenderBundleEncoder::setPipeline(WebGPU::RenderPipeline const&)::$_0::~$_0(&a13, v18);

    _Unwind_Resume(a1);
  }
  WebGPU::RenderBundleEncoder::setPipeline(WebGPU::RenderPipeline const&)::$_0::~$_0(&a13, a2);

  _Unwind_Resume(a1);
}

void sub_182516AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_182516B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_182516B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

WebGPU::RenderPipeline **WebGPU::RenderBundleEncoder::setPipeline(WebGPU::RenderPipeline const&)::$_0::~$_0(WebGPU::RenderPipeline **a1, void *a2)
{
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
      WTF::fastFree(v6, v7);
      uint64_t v4 = *a1;
      *a1 = 0;
      if (!v4) {
        return a1;
      }
      goto LABEL_5;
    }
    --*(_DWORD *)v3;
  }
  uint64_t v4 = *a1;
  *a1 = 0;
  if (!v4) {
    return a1;
  }
LABEL_5:
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    return a1;
  }
  WebGPU::RenderPipeline::~RenderPipeline(v4, a2);
  WTF::fastFree(v8, v9);
  return a1;
}

void WebGPU::RenderBundleEncoder::setVertexBuffer(WebGPU::RenderBundleEncoder *this, unsigned int a2, WebGPU::Buffer *a3, unint64_t a4, unint64_t a5)
{
  objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::RenderBundleEncoder::setVertexBuffer(uint32_t, Buffer *, uint64_t, uint64_t)");
  id v68 = (id)objc_claimAutoreleasedReturnValue();
  if (WebGPU::RenderBundleEncoder::returnIfEncodingIsFinished(this, (NSString *)v68))
  {

    return;
  }
  uint64_t v10 = *((void *)this + 10);

  if (!v10) {
    return;
  }
  unsigned int v11 = *((_DWORD *)this + 14);
  if (v11 <= a2) {
    unsigned int v11 = a2;
  }
  *((_DWORD *)this + 14) = v11;
  if (!a3
    || (*((unsigned char *)a3 + 52) == 4 || *((void *)a3 + 2))
    && (uint64_t v12 = *((void *)a3 + 35), *(void *)(v12 + 8))
    && v12 == *((void *)this + 1))
  {
    float v13 = WebGPU::RenderBundleEncoder::currentRenderCommand(this);
    if (v13)
    {
      if (a3)
      {
        uint64_t v15 = (uint64_t *)((char *)this + 64);
        uint64_t v14 = *((void *)this + 8);
        if (v14
          || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)this + 8, 8u, 0), (uint64_t v14 = *v15) != 0))
        {
          int v16 = *(_DWORD *)(v14 - 8);
        }
        else
        {
          int v16 = 0;
        }
        unsigned int v17 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
        unsigned int v18 = (v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11);
        unsigned int v19 = v16 & (v18 ^ HIWORD(v18));
        uint64_t v20 = (unsigned int *)(v14 + 16 * v19);
        unsigned int v21 = *v20;
        if (*v20 != -1)
        {
          uint64_t v22 = 0;
          int v23 = 1;
          while (v21 != a2)
          {
            if (v21 == -2) {
              uint64_t v22 = v20;
            }
            unsigned int v19 = (v19 + v23) & v16;
            uint64_t v20 = (unsigned int *)(v14 + 16 * v19);
            unsigned int v21 = *v20;
            ++v23;
            if (*v20 == -1)
            {
              if (v22)
              {
                *uint64_t v22 = -1;
                *((void *)v22 + 1) = 0;
                --*(_DWORD *)(*v15 - 16);
                uint64_t v20 = v22;
              }
              goto LABEL_29;
            }
          }
LABEL_58:
          id v44 = (void *)*((void *)this + 23);
          id v45 = (void *)*((void *)a3 + 2);
          ++*(_DWORD *)a3;
          long long v69 = a3;
          LODWORD(v70) = 0;
          BOOL v46 = WebGPU::RenderBundleEncoder::addResource((uint64_t)this, v44, v45, 1, (uint64_t)&v69);
          if (v70 != -1) {
            ((void (*)(void (****)(void), WebGPU::Buffer **))off_1ECABB2D0[v70])(&v73, &v69);
          }
          if (v46)
          {
            id v47 = *((id *)a3 + 2);
            if (*((_DWORD *)this + 51) <= a2)
            {
              __break(0xC471u);
              return;
            }
            uint64_t v48 = *((void *)this + 24) + 40 * a2;
            uint64_t v49 = *(void **)v48;
            *(void *)uint64_t v48 = v47;

            *(void *)(v48 + ++*(_DWORD *)(result + 8) = a4;
            *(_DWORD *)(v48 + 16) = 0;
            *(void *)(v48 + 24) = 0;
            *(void *)(v48 + 32) = a5;
            uint64_t v50 = *((void *)this + 37);
            if (v50)
            {
              uint64_t v51 = *(void *)(v50 + 8);
              if (v51)
              {
                WebGPU::Buffer::setCommandEncoder(a3, *(WebGPU::CommandEncoder **)(v51 + 152));
                uint64_t v52 = *((void *)this + 37);
                if (v52) {
                  unsigned int v53 = *(id **)(v52 + 8);
                }
                else {
                  unsigned int v53 = 0;
                }
                WebGPU::RenderPassEncoder::renderCommandEncoder(v53);
              }
            }
          }
          goto LABEL_99;
        }
LABEL_29:
        *uint64_t v20 = a2;
        *((void *)v20 + 1) = a5;
        if (*v15)
        {
          ++*(_DWORD *)(*v15 - 12);
          uint64_t v24 = *v15;
          if (*v15) {
            goto LABEL_31;
          }
        }
        else
        {
          MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
          uint64_t v24 = *v15;
          if (*v15)
          {
LABEL_31:
            uint64_t v25 = (*(_DWORD *)(v24 - 16) + *(_DWORD *)(v24 - 12));
            unint64_t v26 = *(unsigned int *)(v24 - 4);
            if (v26 <= 0x400) {
              goto LABEL_32;
            }
            goto LABEL_55;
          }
        }
        uint64_t v25 = *(unsigned int *)(v24 - 16);
        unint64_t v26 = *(unsigned int *)(v24 - 4);
        if (v26 <= 0x400)
        {
LABEL_32:
          if (3 * v26 > 4 * v25) {
            goto LABEL_58;
          }
          if (!v26)
          {
            unsigned int v27 = 8;
LABEL_57:
            WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)this + 8, v27, v20);
            goto LABEL_58;
          }
LABEL_56:
          unsigned int v27 = v26 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v26));
          goto LABEL_57;
        }
LABEL_55:
        if (v26 > 2 * v25) {
          goto LABEL_58;
        }
        goto LABEL_56;
      }
      if (*(_DWORD *)(*((void *)this + 1) + 168) > a2)
      {
        uint64_t v30 = (uint64_t *)((char *)this + 64);
        uint64_t v31 = *((void *)this + 8);
        if (v31)
        {
          unsigned int v32 = *(_DWORD *)(v31 - 8);
          unsigned int v33 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
          unsigned int v34 = (v33 ^ (v33 >> 6)) + ~((v33 ^ (v33 >> 6)) << 11);
          uint64_t v35 = v32 & (v34 ^ HIWORD(v34));
          int v36 = *(_DWORD *)(v31 + 16 * v35);
          if (v36 != a2)
          {
            int v37 = 1;
            while (v36 != -1)
            {
              uint64_t v35 = (v35 + v37) & v32;
              int v36 = *(_DWORD *)(v31 + 16 * v35);
              ++v37;
              if (v36 == a2) {
                goto LABEL_86;
              }
            }
            uint64_t v35 = *(unsigned int *)(v31 - 4);
          }
LABEL_86:
          if (v35 != *(_DWORD *)(v31 - 4))
          {
            *(_DWORD *)(v31 + 16 * v35) = -2;
            ++*(_DWORD *)(*v30 - 16);
            uint64_t v60 = *v30;
            int v61 = *v30 ? *(_DWORD *)(v60 - 12) - 1 : -1;
            *(_DWORD *)(v60 - 12) = v61;
            uint64_t v62 = *v30;
            if (*v30)
            {
              unsigned int v63 = 6 * *(_DWORD *)(v62 - 12);
              unsigned int v64 = *(_DWORD *)(v62 - 4);
              BOOL v65 = v63 < v64 && v64 >= 9;
              if (v65) {
                WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v30, v64 >> 1, 0);
              }
            }
          }
        }
      }
      if (*((_DWORD *)this + 51) > a2)
      {
        uint64_t v66 = *((void *)this + 24) + 40 * a2;
        uint64_t v67 = *(void **)v66;
        *(void *)uint64_t v66 = 0;

        *(_OWORD *)(v66 + 24) = 0u;
        *(_OWORD *)(v66 + ++*(_DWORD *)(result + 8) = 0u;
      }
LABEL_99:

      return;
    }
    if (a3)
    {
      if (*((unsigned char *)a3 + 52) != 4 && !*((void *)a3 + 2)
        || (uint64_t v28 = *((void *)a3 + 35), !*(void *)(v28 + 8))
        || v28 != *((void *)this + 1))
      {
        uint64_t v29 = @"setVertexBuffer: buffer is not valid";
LABEL_41:
        WebGPU::RenderBundleEncoder::makeInvalid(this, &v29->isa);
        goto LABEL_99;
      }
      if (a5 == -1)
      {
        unint64_t v58 = *((void *)a3 + 5);
        BOOL v65 = v58 >= a4;
        unint64_t v59 = v58 - a4;
        if (!v65)
        {
LABEL_82:
          uint64_t v29 = @"setVertexBuffer: size overflowed";
          goto LABEL_41;
        }
        a5 = v59;
      }
      if (__CFADD__(a4, a5) || a4 + a5 > *((void *)a3 + 5)) {
        goto LABEL_82;
      }
      uint64_t v29 = @"setVertexBuffer: validation failed";
      if (*(_DWORD *)(v28 + 168) <= a2 || (a4 & 3) != 0 || (*((_DWORD *)a3 + 12) & 0x20) == 0) {
        goto LABEL_41;
      }
      LODWORD(v69) = a2;
      ++*(_DWORD *)a3;
    }
    else
    {
      LODWORD(v69) = a2;
    }
    int v70 = a3;
    *(void *)&long long v71 = a4;
    ++*(_DWORD *)this;
    *((void *)&v71 + 1) = a5;
    uint64_t v38 = WTF::fastMalloc((WTF *)0x30);
    unsigned int v40 = (void (**)(void))&unk_1ECABB440;
    *(void *)uint64_t v38 = &unk_1ECABB440;
    *(_DWORD *)(v38 + ++*(_DWORD *)(result + 8) = a2;
    *(void *)(v38 + 16) = v70;
    *(_OWORD *)(v38 + 24) = v71;
    int v70 = 0;
    uint64_t v72 = 0;
    uint64_t v73 = (void (***)(void))v38;
    *(void *)(v38 + 40) = this;
    if (*((void *)this + 10))
    {
      uint64_t v41 = *((unsigned int *)this + 45);
      if (v41 == *((_DWORD *)this + 44))
      {
        unint64_t v42 = WTF::Vector<WTF::Function<BOOL ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 168, v41 + 1, (unint64_t)&v73);
        uint64_t v41 = *((unsigned int *)this + 45);
        BOOL v43 = (uint64_t *)(*((void *)this + 21) + 8 * v41);
        uint64_t v38 = *(void *)v42;
      }
      else
      {
        BOOL v43 = (uint64_t *)(*((void *)this + 21) + 8 * v41);
        unint64_t v42 = (char *)&v73;
      }
      *(void *)unint64_t v42 = 0;
      *BOOL v43 = v38;
      *((_DWORD *)this + 45) = v41 + 1;
      unsigned int v54 = v73;
      uint64_t v73 = 0;
      if (!v54)
      {
LABEL_72:
        id v55 = v70;
        int v70 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 1)
          {
            WebGPU::Buffer::~Buffer(v55, v39);
            WTF::fastFree(v56, v57);
          }
          else
          {
            --*(_DWORD *)v55;
          }
        }
        goto LABEL_99;
      }
      unsigned int v40 = *v54;
    }
    else
    {
      uint64_t v73 = 0;
    }
    v40[1]();
    goto LABEL_72;
  }
  WebGPU::RenderBundleEncoder::makeInvalid(this, &cfstr_Setvertexbuffe.isa);
}

void sub_18251729C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1825172AC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v18 = a16;
  a16 = 0;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    WebGPU::RenderBundleEncoder::setVertexBuffer(unsigned int,WebGPU::Buffer *,unsigned long long,unsigned long long)::$_0::~$_0((uint64_t)&a11, v19);

    _Unwind_Resume(a1);
  }
  WebGPU::RenderBundleEncoder::setVertexBuffer(unsigned int,WebGPU::Buffer *,unsigned long long,unsigned long long)::$_0::~$_0((uint64_t)&a11, a2);

  _Unwind_Resume(a1);
}

void sub_18251730C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18251731C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18251732C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18251733C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  if (v7 != -1) {
    ((void (*)(char *, uint64_t *))off_1ECABB2D0[v7])(va1, (uint64_t *)va);
  }

  _Unwind_Resume(a1);
}

void sub_182517370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t WebGPU::RenderBundleEncoder::setVertexBuffer(unsigned int,WebGPU::Buffer *,unsigned long long,unsigned long long)::$_0::~$_0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(WebGPU::RenderBundleEncoder **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
      WTF::fastFree(v8, v9);
      uint64_t v4 = *(WebGPU::Buffer **)(a1 + 8);
      *(void *)(a1 + ++*(_DWORD *)(result + 8) = 0;
      if (!v4) {
        return a1;
      }
      goto LABEL_5;
    }
    --*(_DWORD *)v3;
  }
  uint64_t v4 = *(WebGPU::Buffer **)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = 0;
  if (!v4) {
    return a1;
  }
LABEL_5:
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    return a1;
  }
  WebGPU::Buffer::~Buffer(v4, a2);
  WTF::fastFree(v6, v7);
  return a1;
}

_DWORD *wgpuRenderBundleEncoderReference(_DWORD *result)
{
  return result;
}

WebGPU::RenderBundleEncoder *wgpuRenderBundleEncoderRelease(WebGPU::RenderBundleEncoder *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebGPU::RenderBundleEncoder::~RenderBundleEncoder(result);
    return (WebGPU::RenderBundleEncoder *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void wgpuRenderBundleEncoderDrawIndexedIndirect(id *a1, id *a2, unint64_t a3)
{
  if (a2) {
    WebGPU::RenderBundleEncoder::drawIndexedIndirect(a1, a2, a3);
  }
  else {
    __break(0xC471u);
  }
}

void wgpuRenderBundleEncoderDrawIndirect(id *a1, id *a2, unint64_t a3)
{
  if (a2) {
    WebGPU::RenderBundleEncoder::drawIndirect(a1, a2, a3);
  }
  else {
    __break(0xC471u);
  }
}

WebGPU::RenderBundle *wgpuRenderBundleEncoderFinish(uint64_t a1, uint64_t a2)
{
  void (**v19)(void *__return_ptr);
  uint64_t v20;
  const char *v21;
  _DWORD *v22;
  uint64_t v23;
  _DWORD *v24;
  void v25[5];

  if (!*(void *)(a1 + 80) || *(void *)(a1 + 88) || !*(void *)(*(void *)(a1 + 8) + 8) || *(unsigned char *)(a1 + 385))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    MEMORY[0x18530AF50](v25, *(void *)(a1 + 376));
    uint64_t v4 = *(void *)(v3 + 32);
    uint64_t v5 = 32 * *(unsigned int *)(v3 + 44);
    uint64_t v6 = v4 + v5;
    while (v5)
    {
      int v7 = *(_DWORD *)(v6 - 8);
      v6 -= 32;
      v5 -= 32;
      if (!v7)
      {
        uint64_t v8 = v4 + v5;
        if (!*(unsigned char *)(v8 + 16))
        {
          uint64_t v9 = v25[0];
          v25[0] = 0;
          *(_DWORD *)uint64_t v8 = 1;
          *(void *)(v8 + ++*(_DWORD *)(result + 8) = v9;
          *(unsigned char *)(v8 + 16) = 1;
        }
        goto LABEL_11;
      }
    }
    uint64_t v10 = *(void *)(v3 + 24);
    if (v10)
    {
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v10 + 16))(v10, 1, v25);
      uint64_t v11 = *(void *)(v3 + 24);
      *(void *)(v3 + 24) = 0;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
    }
LABEL_11:
    uint64_t v12 = (_DWORD *)v25[0];
    v25[0] = 0;
    if (v12)
    {
      if (*v12 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v12 -= 2;
      }
    }
    float v13 = *(atomic_uchar *volatile **)(a1 + 8);
    uint64_t v14 = (NSString *)*(id *)(a1 + 376);
    uint64_t v15 = (WebGPU::RenderBundle *)WTF::fastMalloc((WTF *)0x78);
    WebGPU::RenderBundle::RenderBundle(v15, v13, v14);

    return v15;
  }
  else
  {
    int v18 = *(unsigned __int8 *)(a1 + 384);
    if (!*(unsigned char *)(a1 + 384)) {
      int v18 = *(void *)(a1 + 96) == 0;
    }
    *(unsigned char *)(a1 + 384) = v18 != 0;
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 3221225472;
    v25[2] = ___ZN6WebGPU19RenderBundleEncoder6finishERK26WGPURenderBundleDescriptor_block_invoke;
    v25[3] = &__block_descriptor_40_e138__Ref_WebGPU::RenderBundle__WTF::RawPtrTraits_WebGPU::RenderBundle___WTF::DefaultRefDerefTraits_WebGPU::RenderBundle_____RenderBundle__8__0l;
    v25[4] = a1;
    unsigned int v19 = (void (**)(void *__return_ptr))MEMORY[0x18530B4C0](v25);
    v19[2](&v23);
    uint64_t v20 = v23;
    unsigned int v21 = *(const char **)(a2 + 8);
    if (v21) {
      strlen(v21);
    }
    WTF::String::fromUTF8();
    WebGPU::RenderBundle::setLabel(v20, &v24);
    uint64_t v22 = v24;
    uint64_t v24 = 0;
    if (v22)
    {
      if (*v22 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v22 -= 2;
      }
    }
    *(unsigned char *)(a1 + 385) = 1;

    return (WebGPU::RenderBundle *)v23;
  }
}

void sub_18251772C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebGPU::RenderBundle *a10, _DWORD *a11, uint64_t a12)
{
  if (a11)
  {
    if (*a11 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *a11 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 1)
    {
      WebGPU::RenderBundle::~RenderBundle(a10);
      WTF::fastFree(v14, v15);
    }
    else
    {
      --*(_DWORD *)a10;
    }
  }

  _Unwind_Resume(a1);
}

_DWORD *wgpuRenderBundleEncoderInsertDebugMarker(WebGPU::RenderBundleEncoder *a1, char *__s)
{
  if (__s) {
    strlen(__s);
  }
  WTF::String::fromUTF8();
  objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::RenderBundleEncoder::insertDebugMarker(String &&)");
  uint64_t v3 = (NSString *)objc_claimAutoreleasedReturnValue();
  WebGPU::RenderBundleEncoder::returnIfEncodingIsFinished(a1, v3);

  BOOL result = v5;
  if (v5)
  {
    if (*v5 == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *v5 -= 2;
    }
  }
  return result;
}

void sub_18251788C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void wgpuRenderBundleEncoderPopDebugGroup(uint64_t a1)
{
  objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::RenderBundleEncoder::popDebugGroup()");
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  if (WebGPU::RenderBundleEncoder::returnIfEncodingIsFinished((WebGPU::RenderBundleEncoder *)a1, (NSString *)v4))
  {
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 80);

    if (v2 && *(unsigned __int8 *)(a1 + 4) - 3 <= 0xFFFFFFFD)
    {
      uint64_t v3 = *(void *)(a1 + 88);
      if (v3)
      {
        *(void *)(a1 + 8++*(_DWORD *)(result + 8) = v3 - 1;
      }
      else
      {
        WebGPU::RenderBundleEncoder::makeInvalid((WebGPU::RenderBundleEncoder *)a1, &cfstr_Validatepopdeb.isa);
      }
    }
  }
}

void sub_1825179AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

_DWORD *wgpuRenderBundleEncoderPushDebugGroup(uint64_t a1, char *__s)
{
  if (__s) {
    strlen(__s);
  }
  WTF::String::fromUTF8();
  uint64_t v3 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::RenderBundleEncoder::pushDebugGroup(String &&)");
  if (WebGPU::RenderBundleEncoder::returnIfEncodingIsFinished((WebGPU::RenderBundleEncoder *)a1, (NSString *)v3))
  {
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 80);

    if (v4 && *(unsigned __int8 *)(a1 + 4) - 3 <= 0xFFFFFFFD) {
      ++*(void *)(a1 + 88);
    }
  }
  BOOL result = v6;
  if (v6)
  {
    if (*v6 == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *v6 -= 2;
    }
  }
  return result;
}

void sub_182517AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(a1);
}

_DWORD *wgpuRenderBundleEncoderSetLabel(uint64_t a1, char *__s)
{
  if (__s) {
    strlen(__s);
  }
  WTF::String::fromUTF8();
  if (v5) {
    uint64_t v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v3 = &stru_1ECABF938;
  }
  [*(id *)(a1 + 72) setLabel:v3];

  BOOL result = v5;
  if (v5)
  {
    if (*v5 == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *v5 -= 2;
    }
  }
  return result;
}

void sub_182517BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

char *WTF::Vector<objc_object  {objcproto11MTLResource}* {__strong},0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(WTF **)a1;
  if (*(void *)a1 <= a3)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      unint64_t v7 = *(unsigned int *)(a1 + 8);
      unint64_t v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10) {
        unint64_t v9 = v8 + 1;
      }
      else {
        unint64_t v9 = 16;
      }
      if (v9 <= a2) {
        unint64_t v10 = a2;
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10 <= v7)
      {
        int v16 = *(WTF **)a1;
        return (char *)v16 + 8 * ((uint64_t)(v3 - (void)v5) >> 3);
      }
      if (!(v10 >> 29))
      {
        uint64_t v11 = WTF::fastMalloc((WTF *)(8 * v10));
        uint64_t v12 = 0;
        *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = v10;
        *(void *)a1 = v11;
        uint64_t v13 = 8 * v6;
        do
        {
          uint64_t v14 = *(void *)((char *)v5 + v12);
          *(void *)((char *)v5 + v12) = 0;
          *(void *)(v11 + v12) = v14;

          v12 += 8;
        }
        while (v13 != v12);
        int v16 = *(WTF **)a1;
        if (v5)
        {
          if (v16 == v5)
          {
            *(void *)a1 = 0;
            *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = 0;
          }
          WTF::fastFree(v5, v15);
          int v16 = *(WTF **)a1;
        }
        return (char *)v16 + 8 * ((uint64_t)(v3 - (void)v5) >> 3);
      }
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x182517D78);
    }
  }
  unint64_t v17 = *(unsigned int *)(a1 + 8);
  unint64_t v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10) {
    unint64_t v19 = v18 + 1;
  }
  else {
    unint64_t v19 = 16;
  }
  if (v19 <= a2) {
    unint64_t v20 = a2;
  }
  else {
    unint64_t v20 = v19;
  }
  if (v20 > v17)
  {
    if (v20 >> 29) {
      goto LABEL_35;
    }
    uint64_t v21 = *(unsigned int *)(a1 + 12);
    uint64_t v22 = WTF::fastMalloc((WTF *)(8 * v20));
    *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = v20;
    *(void *)a1 = v22;
    if (v21)
    {
      uint64_t v24 = (void *)v22;
      uint64_t v25 = 8 * v21;
      unint64_t v26 = (void **)v5;
      do
      {
        unsigned int v27 = *v26;
        *unint64_t v26 = 0;
        *v24++ = v27;
        uint64_t v28 = *v26++;

        v25 -= 8;
      }
      while (v25);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = 0;
      }
      WTF::fastFree(v5, v23);
    }
  }
  return (char *)v3;
}

WebGPU::Buffer *WTF::RefCounted<WebGPU::Buffer>::deref(WebGPU::Buffer *result, void *a2)
{
  if (*(_DWORD *)result == 1)
  {
    WebGPU::Buffer::~Buffer(result, a2);
    return (WebGPU::Buffer *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

WebGPU::RenderPipeline *WTF::RefCounted<WebGPU::RenderPipeline>::deref(WebGPU::RenderPipeline *result, void *a2)
{
  if (*(_DWORD *)result == 1)
  {
    WebGPU::RenderPipeline::~RenderPipeline(result, a2);
    return (WebGPU::RenderPipeline *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::draw(unsigned int,unsigned int,unsigned int,unsigned int)::$_0,BOOL>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1ECABB328;
  uint64_t v2 = (WebGPU::RenderBundleEncoder *)a1[3];
  a1[3] = 0;
  if (!v2) {
    return a1;
  }
  if (*(_DWORD *)v2 != 1)
  {
    --*(_DWORD *)v2;
    return a1;
  }
  WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v2);
  WTF::fastFree(v4, v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::draw(unsigned int,unsigned int,unsigned int,unsigned int)::$_0,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1ECABB328;
  unint64_t v3 = (WebGPU::RenderBundleEncoder *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (!v3)
  {
LABEL_4:
    uint64_t v4 = this;
    return WTF::fastFree(v4, a2);
  }
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    goto LABEL_4;
  }
  WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
  WTF::fastFree(v6, v7);
  uint64_t v4 = this;
  return WTF::fastFree(v4, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::draw(unsigned int,unsigned int,unsigned int,unsigned int)::$_0,BOOL>::call(uint64_t a1)
{
  return 1;
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebGPU::IndexBufferAndIndexData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebGPU::IndexBufferAndIndexData>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebGPU::IndexBufferAndIndexData,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WebGPU::IndexBufferAndIndexData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = a1;
    uint64_t v6 = a3;
    unsigned int v7 = *(_DWORD *)(v4 - 4);
    int v8 = *(_DWORD *)(v4 - 12);
    uint64_t result = WTF::fastMalloc((WTF *)(88 * a2 + 16));
    uint64_t v11 = result + 16;
    if (!a2) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = a3;
    unsigned int v7 = 0;
    int v8 = 0;
    uint64_t result = WTF::fastMalloc((WTF *)(88 * a2 + 16));
    uint64_t v11 = result + 16;
    if (!a2) {
      goto LABEL_7;
    }
  }
  uint64_t v12 = result + 56;
  uint64_t v13 = a2;
  do
  {
    *(void *)(v12 - 40) = -1;
    *(_OWORD *)uint64_t v12 = 0uLL;
    *(_OWORD *)(v12 + 16) = 0uLL;
    *(_OWORD *)(v12 - 32) = 0uLL;
    *(_OWORD *)(v12 - 16) = 0uLL;
    *(void *)uint64_t v12 = -1;
    *(void *)(v12 + 24) = 0;
    *(void *)(v12 + 32) = 0;
    *(void *)(v12 + ++*(_DWORD *)(result + 8) = 0;
    *(void *)(v12 + 16) = 0;
    *(_DWORD *)(v12 + 32) = 0;
    *(void *)(v12 + 40) = 3;
    v12 += 88;
    --v13;
  }
  while (v13);
LABEL_7:
  *uint64_t v5 = v11;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*v5 - ++*(_DWORD *)(result + 8) = a2 - 1;
  *(_DWORD *)(*v5 - 16) = 0;
  *(_DWORD *)(*v5 - 12) = v8;
  if (v7)
  {
    uint64_t v14 = v5;
    uint64_t v15 = 0;
    uint64_t v16 = v7;
    uint64_t v17 = v6;
    do
    {
      unint64_t v18 = (uint64_t *)(v4 + 88 * v15);
      uint64_t v19 = *v18;
      if (*v18 != -2)
      {
        if (v19 == -1)
        {
          uint64_t v20 = v4 + 88 * v15;
          uint64_t v21 = *(unsigned int **)(v20 + 8);
          *(void *)(v20 + ++*(_DWORD *)(result + 8) = 0;
          if (v21 && atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v21);
            uint64_t v22 = v17;
            int v23 = v14;
            WTF::fastFree((WTF *)v21, v10);
            uint64_t v14 = v23;
            uint64_t v17 = v22;
          }
        }
        else
        {
          uint64_t v24 = *v14;
          if (*v14) {
            int v25 = *(_DWORD *)(v24 - 8);
          }
          else {
            int v25 = 0;
          }
          unint64_t v26 = (v19 + ~(v19 << 32)) ^ ((unint64_t)(v19 + ~(v19 << 32)) >> 22);
          unint64_t v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
          unint64_t v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
          unsigned int v29 = v25 & ((v28 >> 31) ^ v28);
          int v30 = 1;
          do
          {
            unsigned int v31 = v29;
            unsigned int v32 = (uint64_t *)(v24 + 88 * v29);
            unsigned int v29 = (v29 + v30++) & v25;
          }
          while (*v32 != -1);
          unsigned int v33 = v31;
          uint64_t v34 = v24 + 88 * v31;
          int v37 = *(unsigned int **)(v34 + 8);
          int v36 = (void *)(v34 + 8);
          uint64_t v35 = v37;
          *int v36 = 0;
          if (v37 && atomic_fetch_add((atomic_uint *volatile)v35, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v35);
            id v47 = v14;
            uint64_t v48 = v17;
            WTF::fastFree((WTF *)v35, v10);
            uint64_t v14 = v47;
            uint64_t v17 = v48;
          }
          *unsigned int v32 = *v18;
          uint64_t v38 = v4 + 88 * v15;
          uint64_t v39 = *(void *)(v38 + 8);
          *(void *)(v38 + ++*(_DWORD *)(result + 8) = 0;
          *int v36 = v39;
          uint64_t v40 = v24 + 88 * v33;
          *(_OWORD *)(v40 + 16) = *(_OWORD *)(v38 + 16);
          long long v41 = *(_OWORD *)(v38 + 32);
          long long v42 = *(_OWORD *)(v38 + 48);
          long long v43 = *(_OWORD *)(v38 + 64);
          *(void *)(v40 + 80) = *(void *)(v38 + 80);
          *(_OWORD *)(v40 + 4++*(_DWORD *)(result + 8) = v42;
          *(_OWORD *)(v40 + 64) = v43;
          *(_OWORD *)(v40 + 32) = v41;
          id v44 = *(unsigned int **)(v38 + 8);
          *(void *)(v38 + ++*(_DWORD *)(result + 8) = 0;
          if (v44 && atomic_fetch_add((atomic_uint *volatile)v44, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v44);
            uint64_t v45 = v17;
            BOOL v46 = v14;
            WTF::fastFree((WTF *)v44, v10);
            uint64_t v14 = v46;
            uint64_t v17 = v45;
          }
        }
      }
      ++v15;
    }
    while (v15 != v16);
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v10);
}

void *WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::drawIndexed(unsigned int,unsigned int,unsigned int,int,unsigned int)::$_0,BOOL>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1ECABB350;
  uint64_t v2 = (WebGPU::RenderBundleEncoder *)a1[4];
  a1[4] = 0;
  if (!v2) {
    return a1;
  }
  if (*(_DWORD *)v2 != 1)
  {
    --*(_DWORD *)v2;
    return a1;
  }
  WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v2);
  WTF::fastFree(v4, v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::drawIndexed(unsigned int,unsigned int,unsigned int,int,unsigned int)::$_0,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1ECABB350;
  unint64_t v3 = (WebGPU::RenderBundleEncoder *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (!v3)
  {
LABEL_4:
    uint64_t v4 = this;
    return WTF::fastFree(v4, a2);
  }
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    goto LABEL_4;
  }
  WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
  WTF::fastFree(v6, v7);
  uint64_t v4 = this;
  return WTF::fastFree(v4, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::drawIndexed(unsigned int,unsigned int,unsigned int,int,unsigned int)::$_0,BOOL>::call(uint64_t a1)
{
  return 1;
}

void *WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::drawIndexedIndirect(WebGPU::Buffer &,unsigned long long)::$_0,BOOL>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1ECABB378;
  unint64_t v3 = (WebGPU::RenderBundleEncoder *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
      WTF::fastFree(v6, v7);
      uint64_t v4 = (WebGPU::Buffer *)a1[1];
      a1[1] = 0;
      if (!v4) {
        return a1;
      }
      goto LABEL_5;
    }
    --*(_DWORD *)v3;
  }
  uint64_t v4 = (WebGPU::Buffer *)a1[1];
  a1[1] = 0;
  if (!v4) {
    return a1;
  }
LABEL_5:
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    return a1;
  }
  WebGPU::Buffer::~Buffer(v4, a2);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::drawIndexedIndirect(WebGPU::Buffer &,unsigned long long)::$_0,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1ECABB378;
  unint64_t v3 = (WebGPU::RenderBundleEncoder *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (!v3)
  {
LABEL_4:
    uint64_t v4 = (WebGPU::Buffer *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (!v4) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    goto LABEL_4;
  }
  WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
  WTF::fastFree(v7, v8);
  uint64_t v4 = (WebGPU::Buffer *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (!v4)
  {
LABEL_7:
    uint64_t v5 = this;
    return WTF::fastFree(v5, a2);
  }
LABEL_5:
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    goto LABEL_7;
  }
  WebGPU::Buffer::~Buffer(v4, a2);
  WTF::fastFree(v9, v10);
  uint64_t v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::drawIndexedIndirect(WebGPU::Buffer &,unsigned long long)::$_0,BOOL>::call(uint64_t a1)
{
  return 1;
}

void *WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::drawIndirect(WebGPU::Buffer &,unsigned long long)::$_0,BOOL>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1ECABB3A0;
  unint64_t v3 = (WebGPU::RenderBundleEncoder *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
      WTF::fastFree(v6, v7);
      uint64_t v4 = (WebGPU::Buffer *)a1[1];
      a1[1] = 0;
      if (!v4) {
        return a1;
      }
      goto LABEL_5;
    }
    --*(_DWORD *)v3;
  }
  uint64_t v4 = (WebGPU::Buffer *)a1[1];
  a1[1] = 0;
  if (!v4) {
    return a1;
  }
LABEL_5:
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    return a1;
  }
  WebGPU::Buffer::~Buffer(v4, a2);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::drawIndirect(WebGPU::Buffer &,unsigned long long)::$_0,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1ECABB3A0;
  unint64_t v3 = (WebGPU::RenderBundleEncoder *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (!v3)
  {
LABEL_4:
    uint64_t v4 = (WebGPU::Buffer *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (!v4) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    goto LABEL_4;
  }
  WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
  WTF::fastFree(v7, v8);
  uint64_t v4 = (WebGPU::Buffer *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (!v4)
  {
LABEL_7:
    uint64_t v5 = this;
    return WTF::fastFree(v5, a2);
  }
LABEL_5:
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    goto LABEL_7;
  }
  WebGPU::Buffer::~Buffer(v4, a2);
  WTF::fastFree(v9, v10);
  uint64_t v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::drawIndirect(WebGPU::Buffer &,unsigned long long)::$_0,BOOL>::call(uint64_t a1)
{
  return 1;
}

void WTF::Vector<WebGPU::RenderBundleEncoder::BufferAndOffset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(unsigned int *)(a1 + 8);
  uint64_t v5 = *(WTF **)a1;
  if (v4 >= a2) {
    goto LABEL_16;
  }
  unint64_t v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10) {
    unint64_t v7 = v6 + 1;
  }
  else {
    unint64_t v7 = 16;
  }
  if (v7 <= a2) {
    unint64_t v7 = a2;
  }
  if (v7 < 0x6666667)
  {
    unsigned int v8 = *(_DWORD *)(a1 + 12);
    int v9 = 40 * v7;
    uint64_t v11 = WTF::fastMalloc((WTF *)(40 * v7));
    *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = (v9 & 0xFFFFFFF8) / 0x28;
    *(void *)a1 = v11;
    if (v8)
    {
      uint64_t v12 = (WTF *)((char *)v5 + 40 * v8);
      uint64_t v13 = v5;
      do
      {
        uint64_t v14 = *(void **)v13;
        *(void *)uint64_t v13 = 0;
        *(void *)uint64_t v11 = v14;
        long long v15 = *(_OWORD *)((char *)v13 + 8);
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)v13 + 24);
        *(_OWORD *)(v11 + ++*(_DWORD *)(result + 8) = v15;
        uint64_t v16 = *(void **)v13;
        uint64_t v13 = (WTF *)((char *)v13 + 40);

        v11 += 40;
      }
      while (v13 != v12);
      uint64_t v11 = *(void *)a1;
    }
    if (!v5)
    {
      uint64_t v5 = (WTF *)v11;
      if (v11)
      {
LABEL_17:
        uint64_t v17 = *(unsigned int *)(a1 + 12);
        if (v17 != a2) {
          bzero((char *)v5 + 40 * v17, 40 * ((40 * a2 - 40 * v17 - 40) / 0x28) + 40);
        }
      }
LABEL_19:
      *(_DWORD *)(a1 + 12) = a2;
      return;
    }
    if ((WTF *)v11 == v5)
    {
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = 0;
    }
    WTF::fastFree(v5, v10);
    uint64_t v5 = *(WTF **)a1;
LABEL_16:
    if (v5) {
      goto LABEL_17;
    }
    goto LABEL_19;
  }
  __break(0xC471u);
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::setBindGroup(unsigned int,WebGPU::BindGroup const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)::$_0,BOOL>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1ECABB3C8;
  if (*(unsigned char *)(a1 + 48))
  {
    unint64_t v3 = *(WTF **)(a1 + 32);
    if (v3)
    {
      *(void *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 40) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  unint64_t v4 = *(WebGPU::RenderBundleEncoder **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v4);
      WTF::fastFree(v7, v8);
      uint64_t v5 = *(WebGPU::BindGroup **)(a1 + 16);
      *(void *)(a1 + 16) = 0;
      if (!v5) {
        return a1;
      }
      goto LABEL_8;
    }
    --*(_DWORD *)v4;
  }
  uint64_t v5 = *(WebGPU::BindGroup **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (!v5) {
    return a1;
  }
LABEL_8:
  if (*(_DWORD *)v5 != 1)
  {
    --*(_DWORD *)v5;
    return a1;
  }
  WebGPU::BindGroup::~BindGroup(v5, a2);
  WTF::fastFree(v9, v10);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::setBindGroup(unsigned int,WebGPU::BindGroup const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)::$_0,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1ECABB3C8;
  if (*((unsigned char *)this + 48))
  {
    unint64_t v3 = (WTF *)*((void *)this + 4);
    if (v3)
    {
      *((void *)this + 4) = 0;
      *((_DWORD *)this + 10) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  unint64_t v4 = (WebGPU::RenderBundleEncoder *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (!v4)
  {
LABEL_7:
    uint64_t v5 = (WebGPU::BindGroup *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v5) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    goto LABEL_7;
  }
  WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v4);
  WTF::fastFree(v8, v9);
  uint64_t v5 = (WebGPU::BindGroup *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v5)
  {
LABEL_10:
    unint64_t v6 = this;
    return WTF::fastFree(v6, a2);
  }
LABEL_8:
  if (*(_DWORD *)v5 != 1)
  {
    --*(_DWORD *)v5;
    goto LABEL_10;
  }
  WebGPU::BindGroup::~BindGroup(v5, a2);
  WTF::fastFree(v10, v11);
  unint64_t v6 = this;
  return WTF::fastFree(v6, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::setBindGroup(unsigned int,WebGPU::BindGroup const&,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)::$_0,BOOL>::call(uint64_t a1)
{
  return 0;
}

void *WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::setIndexBuffer(WebGPU::Buffer &,WGPUIndexFormat,unsigned long long,unsigned long long)::$_0,BOOL>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1ECABB3F0;
  unint64_t v3 = (WebGPU::RenderBundleEncoder *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
      WTF::fastFree(v6, v7);
      unint64_t v4 = (WebGPU::Buffer *)a1[1];
      a1[1] = 0;
      if (!v4) {
        return a1;
      }
      goto LABEL_5;
    }
    --*(_DWORD *)v3;
  }
  unint64_t v4 = (WebGPU::Buffer *)a1[1];
  a1[1] = 0;
  if (!v4) {
    return a1;
  }
LABEL_5:
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    return a1;
  }
  WebGPU::Buffer::~Buffer(v4, a2);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::setIndexBuffer(WebGPU::Buffer &,WGPUIndexFormat,unsigned long long,unsigned long long)::$_0,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1ECABB3F0;
  unint64_t v3 = (WebGPU::RenderBundleEncoder *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (!v3)
  {
LABEL_4:
    unint64_t v4 = (WebGPU::Buffer *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (!v4) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    goto LABEL_4;
  }
  WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
  WTF::fastFree(v7, v8);
  unint64_t v4 = (WebGPU::Buffer *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (!v4)
  {
LABEL_7:
    uint64_t v5 = this;
    return WTF::fastFree(v5, a2);
  }
LABEL_5:
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    goto LABEL_7;
  }
  WebGPU::Buffer::~Buffer(v4, a2);
  WTF::fastFree(v9, v10);
  uint64_t v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::setIndexBuffer(WebGPU::Buffer &,WGPUIndexFormat,unsigned long long,unsigned long long)::$_0,BOOL>::call(uint64_t a1)
{
  return 0;
}

char *WTF::Vector<WTF::Function<BOOL ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(WTF **)a1;
  if (*(void *)a1 <= a3)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      unint64_t v7 = *(unsigned int *)(a1 + 8);
      unint64_t v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10) {
        unint64_t v9 = v8 + 1;
      }
      else {
        unint64_t v9 = 16;
      }
      if (v9 <= a2) {
        unint64_t v10 = a2;
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10 <= v7)
      {
        unsigned int v29 = *(WTF **)a1;
        return (char *)v29 + 8 * ((uint64_t)(v3 - (void)v5) >> 3);
      }
      if (!(v10 >> 29))
      {
        uint64_t v12 = WTF::fastMalloc((WTF *)(8 * v10));
        uint64_t v13 = 0;
        *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = v10;
        *(void *)a1 = v12;
        uint64_t v14 = 8 * v6;
        do
        {
          uint64_t v15 = *(void *)((char *)v5 + v13);
          *(void *)((char *)v5 + v13) = 0;
          *(void *)(v12 + v13) = v15;
          uint64_t v16 = *(void *)((char *)v5 + v13);
          *(void *)((char *)v5 + v13) = 0;
          if (v16) {
            (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          }
          v13 += 8;
        }
        while (v14 != v13);
        unsigned int v29 = *(WTF **)a1;
        if (v5)
        {
          if (v29 == v5)
          {
            *(void *)a1 = 0;
            *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = 0;
          }
          WTF::fastFree(v5, v11);
          unsigned int v29 = *(WTF **)a1;
        }
        return (char *)v29 + 8 * ((uint64_t)(v3 - (void)v5) >> 3);
      }
LABEL_39:
      __break(0xC471u);
      JUMPOUT(0x182518D70);
    }
  }
  unint64_t v17 = *(unsigned int *)(a1 + 8);
  unint64_t v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10) {
    unint64_t v19 = v18 + 1;
  }
  else {
    unint64_t v19 = 16;
  }
  if (v19 <= a2) {
    unint64_t v20 = a2;
  }
  else {
    unint64_t v20 = v19;
  }
  if (v20 > v17)
  {
    if (v20 >> 29) {
      goto LABEL_39;
    }
    uint64_t v21 = *(unsigned int *)(a1 + 12);
    uint64_t v22 = WTF::fastMalloc((WTF *)(8 * v20));
    *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = v20;
    *(void *)a1 = v22;
    if (v21)
    {
      uint64_t v24 = (void *)v22;
      uint64_t v25 = 8 * v21;
      unint64_t v26 = v5;
      do
      {
        uint64_t v27 = *(void *)v26;
        *(void *)unint64_t v26 = 0;
        *uint64_t v24 = v27;
        uint64_t v28 = *(void *)v26;
        *(void *)unint64_t v26 = 0;
        if (v28) {
          (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
        }
        ++v24;
        unint64_t v26 = (WTF *)((char *)v26 + 8);
        v25 -= 8;
      }
      while (v25);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = 0;
      }
      WTF::fastFree(v5, v23);
    }
  }
  return (char *)v3;
}

void *WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::setPipeline(WebGPU::RenderPipeline const&)::$_0,BOOL>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1ECABB418;
  unint64_t v3 = (WebGPU::RenderBundleEncoder *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
      WTF::fastFree(v6, v7);
      unint64_t v4 = (WebGPU::RenderPipeline *)a1[1];
      a1[1] = 0;
      if (!v4) {
        return a1;
      }
      goto LABEL_5;
    }
    --*(_DWORD *)v3;
  }
  unint64_t v4 = (WebGPU::RenderPipeline *)a1[1];
  a1[1] = 0;
  if (!v4) {
    return a1;
  }
LABEL_5:
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    return a1;
  }
  WebGPU::RenderPipeline::~RenderPipeline(v4, a2);
  WTF::fastFree(v8, v9);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::setPipeline(WebGPU::RenderPipeline const&)::$_0,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1ECABB418;
  unint64_t v3 = (WebGPU::RenderBundleEncoder *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v3)
  {
LABEL_4:
    unint64_t v4 = (WebGPU::RenderPipeline *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (!v4) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    goto LABEL_4;
  }
  WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
  WTF::fastFree(v7, v8);
  unint64_t v4 = (WebGPU::RenderPipeline *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (!v4)
  {
LABEL_7:
    uint64_t v5 = this;
    return WTF::fastFree(v5, a2);
  }
LABEL_5:
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    goto LABEL_7;
  }
  WebGPU::RenderPipeline::~RenderPipeline(v4, a2);
  WTF::fastFree(v9, v10);
  uint64_t v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::setPipeline(WebGPU::RenderPipeline const&)::$_0,BOOL>::call(uint64_t a1)
{
  return 0;
}

void *WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::setVertexBuffer(unsigned int,WebGPU::Buffer *,unsigned long long,unsigned long long)::$_0,BOOL>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1ECABB440;
  unint64_t v3 = (WebGPU::RenderBundleEncoder *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
      WTF::fastFree(v8, v9);
      unint64_t v4 = (WebGPU::Buffer *)a1[2];
      a1[2] = 0;
      if (!v4) {
        return a1;
      }
      goto LABEL_5;
    }
    --*(_DWORD *)v3;
  }
  unint64_t v4 = (WebGPU::Buffer *)a1[2];
  a1[2] = 0;
  if (!v4) {
    return a1;
  }
LABEL_5:
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    return a1;
  }
  WebGPU::Buffer::~Buffer(v4, a2);
  WTF::fastFree(v6, v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::setVertexBuffer(unsigned int,WebGPU::Buffer *,unsigned long long,unsigned long long)::$_0,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1ECABB440;
  unint64_t v3 = (WebGPU::RenderBundleEncoder *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (!v3)
  {
LABEL_4:
    unint64_t v4 = (WebGPU::Buffer *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (!v4) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    goto LABEL_4;
  }
  WebGPU::RenderBundleEncoder::~RenderBundleEncoder(v3);
  WTF::fastFree(v9, v10);
  unint64_t v4 = (WebGPU::Buffer *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v4)
  {
LABEL_7:
    uint64_t v5 = this;
    return WTF::fastFree(v5, a2);
  }
LABEL_5:
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
    goto LABEL_7;
  }
  WebGPU::Buffer::~Buffer(v4, a2);
  WTF::fastFree(v7, v8);
  uint64_t v5 = this;
  return WTF::fastFree(v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::RenderBundleEncoder::setVertexBuffer(unsigned int,WebGPU::Buffer *,unsigned long long,unsigned long long)::$_0,BOOL>::call(uint64_t a1)
{
  return 0;
}

id WebGPU::RenderPassEncoder::RenderPassEncoder(uint64_t a1, void *a2, long long *a3, uint64_t a4, char a5, char a6, WebGPU::CommandEncoder *a7, void *a8, uint64_t a9, atomic_uchar *volatile *a10, void *a11)
{
  id v17 = a2;
  id v18 = a8;
  id v102 = a11;
  int v19 = 1;
  *(_DWORD *)a1 = 1;
  *(unsigned char *)(a1 + 4) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = 0;
  id v20 = v17;
  char v21 = 0;
  id v103 = v20;
  *(void *)(a1 + 16) = v20;
  *(void *)(a1 + 24) = 0;
  atomic_uchar *volatile v22 = *a10;
  atomic_compare_exchange_strong_explicit(*a10, (unsigned __int8 *)&v21, 1u, memory_order_acquire, memory_order_acquire);
  if (v21) {
    MEMORY[0x18530AEA0](v22);
  }
  ++*((void *)v22 + 1);
  atomic_compare_exchange_strong_explicit(v22, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
  if (v19 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v22);
  }
  *(void *)(a1 + 32) = a10;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8++*(_DWORD *)(result + 8) = xmmword_1826CEC40;
  *(void *)(a1 + 104) = a4;
  *(unsigned char *)(a1 + 112) = a5;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 152) = a7;
  uint64_t v104 = (uint64_t *)(a1 + 152);
  *(unsigned char *)(a1 + 113) = a6;
  *(_OWORD *)(a1 + 136) = 0u;
  ++*(_DWORD *)a7;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 16++*(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 180) = 1065353216;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  id result = v18;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 200) = result;
  *(void *)(a1 + 20++*(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(a1 + 216) = 1;
  *(void *)(a1 + 232) = 0;
  uint64_t v100 = (id *)(a1 + 232);
  double v101 = result;
  long long v25 = *a3;
  long long v26 = a3[1];
  long long v27 = a3[2];
  *(void *)(a1 + 28++*(_DWORD *)(result + 8) = *((void *)a3 + 6);
  *(_OWORD *)(a1 + 256) = v26;
  *(_OWORD *)(a1 + 272) = v27;
  *(_OWORD *)(a1 + 240) = v25;
  uint64_t v105 = (void **)(a1 + 224);
  uint64_t v28 = (void *)(a1 + 296);
  unint64_t v29 = *((void *)a3 + 2);
  if (!v29)
  {
    *uint64_t v28 = 0;
    *(void *)(a1 + 304) = 0;
    uint64_t v36 = a1 + 312;
    int v37 = (long long *)*((void *)a3 + 4);
    if (v37) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  uint64_t v30 = *((void *)a3 + 3);
  *uint64_t v28 = 0;
  *(void *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 30++*(_DWORD *)(result + 8) = v29;
  if (v29 < 0x38E38E4)
  {
    uint64_t v31 = 72 * v29;
    uint64_t v32 = WTF::fastMalloc((WTF *)(72 * v29));
    *(_DWORD *)(a1 + 304) = v31 / 0x48;
    *(void *)(a1 + 296) = v32;
    do
    {
      *(_OWORD *)uint64_t v32 = *(_OWORD *)v30;
      long long v33 = *(_OWORD *)(v30 + 16);
      long long v34 = *(_OWORD *)(v30 + 32);
      long long v35 = *(_OWORD *)(v30 + 48);
      *(void *)(v32 + 64) = *(void *)(v30 + 64);
      *(_OWORD *)(v32 + 32) = v34;
      *(_OWORD *)(v32 + 4++*(_DWORD *)(result + 8) = v35;
      *(_OWORD *)(v32 + 16) = v33;
      v32 += 72;
      v30 += 72;
      v31 -= 72;
    }
    while (v31);
    uint64_t v36 = a1 + 312;
    int v37 = (long long *)*((void *)a3 + 4);
    if (v37)
    {
LABEL_10:
      long long v38 = *v37;
      long long v39 = v37[1];
      *(void *)(v36 + 32) = *((void *)v37 + 4);
      *(_OWORD *)uint64_t v36 = v38;
      *(_OWORD *)(v36 + 16) = v39;
      uint64_t v40 = a9;
      uint64_t v41 = a1 + 352;
      long long v42 = (_OWORD *)*((void *)a3 + 6);
      if (v42)
      {
LABEL_11:
        *(_OWORD *)uint64_t v41 = *v42;
        goto LABEL_15;
      }
LABEL_14:
      *(void *)uint64_t v41 = 0;
      *(void *)(v41 + ++*(_DWORD *)(result + 8) = 0;
LABEL_15:
      *(unsigned char *)(a1 + 44++*(_DWORD *)(result + 8) = 0;
      *(unsigned char *)(a1 + 456) = 0;
      *(unsigned char *)(a1 + 48++*(_DWORD *)(result + 8) = 0;
      *(unsigned char *)(a1 + 496) = 0;
      *(unsigned char *)(a1 + 500) = 0;
      *(_DWORD *)(a1 + 504) = 0;
      *(void *)(a1 + 512) = 0;
      *(_OWORD *)(a1 + 36++*(_DWORD *)(result + 8) = 0u;
      *(_OWORD *)(a1 + 384) = 0u;
      *(_OWORD *)(a1 + 400) = 0u;
      *(unsigned char *)(a1 + 416) = 0;
      *(void *)(a1 + 520) = v40;
      *(void *)(a1 + 52++*(_DWORD *)(result + 8) = 0;
      *(void *)(a1 + 544) = 0;
      *(void *)(a1 + 536) = 0;
      if (*(_DWORD *)(a1 + 308)) {
        *(void *)(a1 + 264) = *(void *)(a1 + 296);
      }
      if (*((void *)a3 + 4)) {
        *(void *)(a1 + 272) = v36;
      }
      if (*((void *)a3 + 6)) {
        *(void *)(a1 + 28++*(_DWORD *)(result + 8) = v41;
      }
      uint64_t v106 = (uint64_t *)(a1 + 368);
      if (*((void *)a3 + 2))
      {
        unint64_t v43 = 0;
        uint64_t v44 = 8;
        do
        {
          uint64_t v45 = *(WebGPU::TextureView **)(*((void *)a3 + 3) + v44);
          if (v45) {
            ++*(_DWORD *)v45;
          }
          uint64_t v108 = v45;
          uint64_t v46 = *(unsigned int *)(a1 + 380);
          if (v46 == *(_DWORD *)(a1 + 376))
          {
            id v47 = (uint64_t *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v106, v46 + 1, (unint64_t)&v108);
            uint64_t v46 = *(unsigned int *)(a1 + 380);
            uint64_t v48 = *(void *)(a1 + 368);
            uint64_t v49 = *v47;
            *id v47 = 0;
            *(void *)(v48 + 8 * v46) = v49;
          }
          else
          {
            uint64_t v50 = *v106;
            uint64_t v108 = 0;
            *(void *)(v50 + 8 * v46) = v45;
          }
          *(_DWORD *)(a1 + 380) = v46 + 1;
          uint64_t v51 = v108;
          uint64_t v108 = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 1)
            {
              WebGPU::TextureView::~TextureView(v51, v24);
              WTF::fastFree(v52, v53);
            }
            else
            {
              --*(_DWORD *)v51;
            }
          }
          ++v43;
          v44 += 72;
        }
        while (v43 < *((void *)a3 + 2));
      }
      unsigned int v54 = (_DWORD **)*((void *)a3 + 4);
      if (v54)
      {
        id v55 = *v54;
        if (v55) {
          ++*v55;
        }
        id v56 = *(WebGPU::TextureView **)(a1 + 384);
        *(void *)(a1 + 384) = v55;
        if (v56)
        {
          if (*(_DWORD *)v56 == 1)
          {
            WebGPU::TextureView::~TextureView(v56, v24);
            WTF::fastFree(v83, v84);
            uint64_t v57 = *v104;
            if (*(unsigned char *)(*v104 + 4) == 2)
            {
LABEL_41:
              uint64_t v58 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionary", v18, a1 + 296, a1 + 184, a1 + 168, a1 + 160, a1 + 120, a1 + 40, a1 + 8);
              unint64_t v59 = *v105;
              *uint64_t v105 = (void *)v58;

              unint64_t v60 = *((void *)a3 + 2);
              if (v60)
              {
                unint64_t v61 = 0;
                unsigned int v62 = 1;
                do
                {
                  uint64_t v63 = *((void *)a3 + 3);
                  uint64_t v64 = *(void *)(v63 + 72 * v61 + 8);
                  if (v64)
                  {
                    WebGPU::Texture::setPreviouslyCleared(*(uint64_t **)(v64 + 96), [*(id *)(v64 + 16) parentRelativeLevel], objc_msgSend(*(id *)(v64 + 16), "parentRelativeSlice"), 1);
                    WebGPU::RenderPassEncoder::addResourceToActiveResources((uint64_t *)a1, v64, 16);
                    *(_DWORD *)(a1 + 216) = *(_DWORD *)(*(void *)(v64 + 96) + 40);
                    uint64_t v65 = v63 + 72 * v61;
                    uint64_t v66 = *(void *)(v65 + 24);
                    if (v66)
                    {
                      WebGPU::TextureView::setCommandEncoder(*(WebGPU::TextureView **)(v65 + 24), a7);
                      WebGPU::Texture::setPreviouslyCleared(*(uint64_t **)(v66 + 96), [*(id *)(v66 + 16) parentRelativeLevel], objc_msgSend(*(id *)(v66 + 16), "parentRelativeSlice"), 1);
                      WebGPU::RenderPassEncoder::addResourceToActiveResources((uint64_t *)a1, v66, 16);
                    }
                    WebGPU::TextureView::setCommandEncoder((WebGPU::TextureView *)v64, a7);
                    uint64_t v67 = *(void *)(v64 + 96);
                    if (!*(unsigned char *)(v67 + 104)) {
                      uint64_t v67 = v64;
                    }
                    id v68 = *(id *)(v67 + 16);
                    *(_DWORD *)(a1 + 20++*(_DWORD *)(result + 8) = [v68 width];
                    *(_DWORD *)(a1 + 212) = [v68 height];
                    if (v68)
                    {
                      long long v69 = [[TextureAndClearColor alloc] initWithTexture:v68];
                      int v70 = v69;
                      if (*(_DWORD *)(v63 + 72 * v61 + 36) == 2)
                      {
                        if (*(_DWORD *)(v63 + 72 * v61 + 32) == 2)
                        {
                          -[TextureAndClearColor setClearColor:](v69, "setClearColor:", 0.0, 0.0, 0.0, 0.0);
                          long long v71 = *v105;
                          uint64_t v72 = [NSNumber numberWithUnsignedInt:v62 - 1];
                          [v71 setObject:v70 forKey:v72];
                        }
                      }
                      else
                      {
                        -[TextureAndClearColor setClearColor:](v69, "setClearColor:", *(double *)(v63 + 72 * v61 + 40), *(double *)(v63 + 72 * v61 + 48), *(double *)(v63 + 72 * v61 + 56), *(double *)(v63 + 72 * v61 + 64));
                      }
                      if (*(unsigned char *)(*(void *)(v64 + 96) + 104) || (uint64_t v74 = v63 + 72 * v61, !*(unsigned char *)(v74 + 20))) {
                        uint64_t v73 = 0;
                      }
                      else {
                        uint64_t v73 = *(unsigned int *)(v74 + 16);
                      }
                      [(TextureAndClearColor *)v70 setDepthPlane:v73];
                    }
                    unint64_t v60 = *((void *)a3 + 2);
                  }
                  unint64_t v61 = v62++;
                }
                while (v60 > v61);
              }
              id v75 = (uint64_t *)*((void *)a3 + 4);
              if (!v75) {
                goto LABEL_106;
              }
              uint64_t v76 = *v75;
              WebGPU::Texture::setPreviouslyCleared(*(uint64_t **)(*v75 + 96), [*(id *)(*v75 + 16) parentRelativeLevel], objc_msgSend(*(id *)(*v75 + 16), "parentRelativeSlice"), 1);
              WebGPU::TextureView::setCommandEncoder((WebGPU::TextureView *)v76, a7);
              uint64_t v77 = *(uint32x2_t **)(v76 + 96);
              if (v77[13].i8[0])
              {
                id v78 = 0;
                unsigned int v79 = *(_DWORD *)(v76 + 48);
                int v80 = v77[5].i32[1];
                int v81 = v77[6].i32[0];
                if (v80 != 2) {
                  goto LABEL_63;
                }
              }
              else
              {
                id v78 = *(id *)(v76 + 16);

                uint64_t v77 = *(uint32x2_t **)(v76 + 96);
                unsigned int v79 = *(_DWORD *)(v76 + 48);
                int v80 = v77[5].i32[1];
                int v81 = v77[6].i32[0];
                if (v80 != 2)
                {
LABEL_63:
                  if (v80 == 1)
                  {
                    if (!WebGPU::Texture::physicalTextureExtent(1, v81, *(void *)&vmax_u32(vshl_u32(v77[3], (uint32x2_t)vneg_s32(vdup_n_s32(v79))), (uint32x2_t)0x100000001)))goto LABEL_78; {
                  }
                    }
                  else if (v80)
                  {
                    if (!WebGPU::Texture::physicalTextureExtent(v80, v81, 0)) {
                      goto LABEL_78;
                    }
                  }
                  else
                  {
                    unsigned int v82 = (unsigned __int32)v77[3].i32[0] >> v79;
                    if (v82 <= 1) {
                      unsigned int v82 = 1;
                    }
                    if (!WebGPU::Texture::physicalTextureExtent(0, v81, v82 | 0x100000000)) {
                      goto LABEL_78;
                    }
                  }
LABEL_77:
                  if (!*(_DWORD *)(a1 + 208))
                  {
                    *(_DWORD *)(a1 + 20++*(_DWORD *)(result + 8) = [v78 width];
                    int v87 = [v78 height];
                    int v88 = *(_DWORD *)(*(void *)(v76 + 96) + 40);
                    *(_DWORD *)(a1 + 212) = v87;
                    *(_DWORD *)(a1 + 216) = v88;
                    float v85 = 0.0;
                    if (*((_DWORD *)v75 + 3) == 2) {
                      goto LABEL_84;
                    }
                    goto LABEL_79;
                  }
LABEL_78:
                  float v85 = 0.0;
                  if (*((_DWORD *)v75 + 3) == 2) {
                    goto LABEL_84;
                  }
LABEL_79:
                  float v85 = *((float *)v75 + 4);
                  if (v85 >= 0.0 && v85 <= 1.0 && *(_DWORD *)(v76 + 40) == 39)
                  {
                    float v86 = v85 + 0.00000762951095;
                    float v85 = nextafterf(v86, 1.0);
                  }
LABEL_84:
                  *(float *)(a1 + 504) = v85;
                  if ((([v78 pixelFormat] - 253) & 0xFFFFFFFFFFFFFFF7) != 0)
                  {
                    BOOL v89 = v78 && *((_DWORD *)v75 + 3) == 2 && *((_DWORD *)v75 + 2) == 2;
                    *(unsigned char *)(a1 + 54++*(_DWORD *)(result + 8) = v89;
                    objc_storeStrong(v100, v78);
                    if (*((_DWORD *)v75 + 5)) {
                      int v90 = 32;
                    }
                    else {
                      int v90 = 16;
                    }
                    uint64_t v91 = *(void *)(v76 + 96);
                    id v92 = *(id *)(v91 + 16);
                    WebGPU::RenderPassEncoder::addResourceToActiveResources((uint64_t *)a1, v91, v92, v90, *(_DWORD *)(v76 + 48), *(unsigned int *)(v76 + 56), 2u);
                  }
                  int v93 = (_DWORD *)(a1 + 528);
                  int v94 = *((_DWORD *)v75 + 7);
                  if (v94 == 2)
                  {
                    *int v93 = 0;
                    unsigned int v95 = *(_DWORD *)(v76 + 40);
                    if (v95 > 0x2B)
                    {
LABEL_105:

LABEL_106:
                      *(float32x2_t *)(a1 + 540) = vcvt_f32_u32(*(uint32x2_t *)(a1 + 208));

                      return (id)a1;
                    }
                  }
                  else
                  {
                    *int v93 = *((_DWORD *)v75 + 8);
                    unsigned int v95 = *(_DWORD *)(v76 + 40);
                    if (v95 > 0x2B) {
                      goto LABEL_105;
                    }
                  }
                  if (((1 << v95) & 0xA4000000000) != 0)
                  {
                    BOOL v96 = 0;
                    if (v78 && v94 == 2) {
                      BOOL v96 = *((_DWORD *)v75 + 6) == 2;
                    }
                    *(unsigned char *)(a1 + 549) = v96;
                    objc_storeStrong(v100, v78);
                    if (*((_DWORD *)v75 + 9)) {
                      int v97 = 32;
                    }
                    else {
                      int v97 = 16;
                    }
                    uint64_t v98 = *(void *)(v76 + 96);
                    id v99 = *(id *)(v98 + 16);
                    WebGPU::RenderPassEncoder::addResourceToActiveResources((uint64_t *)a1, v98, v99, v97, *(_DWORD *)(v76 + 48), *(unsigned int *)(v76 + 56), 1u);
                  }
                  goto LABEL_105;
                }
              }
              if (!WebGPU::Texture::physicalTextureExtent(v80, v81, *(void *)&vmax_u32(vshl_u32(v77[3], (uint32x2_t)vneg_s32(vdup_n_s32(v79))), (uint32x2_t)0x100000001)))goto LABEL_78; {
              goto LABEL_77;
              }
            }
LABEL_40:
            *(unsigned char *)(v57 + 4) = 1;
            goto LABEL_41;
          }
          --*(_DWORD *)v56;
        }
      }
      uint64_t v57 = *v104;
      if (*(unsigned char *)(*v104 + 4) == 2) {
        goto LABEL_41;
      }
      goto LABEL_40;
    }
LABEL_13:
    *(void *)(v36 + 32) = 0;
    *(_OWORD *)uint64_t v36 = 0u;
    *(_OWORD *)(v36 + 16) = 0u;
    uint64_t v40 = a9;
    uint64_t v41 = a1 + 352;
    long long v42 = (_OWORD *)*((void *)a3 + 6);
    if (v42) {
      goto LABEL_11;
    }
    goto LABEL_14;
  }
  __break(0xC471u);
  return result;
}

void sub_182519A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(a16, v23);
  _Unwind_Resume(a1);
}

void WebGPU::RenderPassEncoder::addResourceToActiveResources(uint64_t *a1, uint64_t a2, int a3)
{
  unsigned int v6 = *(_DWORD *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 96);
  id v8 = *(id *)(v7 + 16);
  unsigned int v9 = *(_DWORD *)(a2 + 48);
  uint64_t v10 = *(unsigned int *)(a2 + 56);
  id v12 = v8;
  if (v6)
  {
    WebGPU::RenderPassEncoder::addResourceToActiveResources(a1, v7, v8, a3, v9, v10, v6);
  }
  else
  {
    WebGPU::RenderPassEncoder::addResourceToActiveResources(a1, v7, v8, a3, v9, v10, 2u);

    uint64_t v11 = *(void *)(a2 + 96);
    id v12 = *(id *)(v11 + 16);
    WebGPU::RenderPassEncoder::addResourceToActiveResources(a1, v11, v12, a3, *(_DWORD *)(a2 + 48), *(unsigned int *)(a2 + 56), 1u);
  }
}

void sub_182519D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182519D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_182519D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t *WTF::HashMap<unsigned int,WebGPU::RenderPassEncoder::BufferAndOffset,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::RenderPassEncoder::BufferAndOffset>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = (id *)(v3 + 8);
      do
      {
        if (*((_DWORD *)v5 - 2) != -2) {

        }
        v5 += 4;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::RefPtr<WebGPU::TextureView,WTF::RawPtrTraits<WebGPU::TextureView>,WTF::DefaultRefDerefTraits<WebGPU::TextureView>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WebGPU::TextureView ***)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      id v8 = *v4;
      *uint64_t v4 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          WebGPU::TextureView::~TextureView(v8, a2);
          WTF::fastFree(v6, v7);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  unsigned int v9 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

uint64_t WebGPU::RenderPassEncoder::RenderPassEncoder(uint64_t a1, _DWORD *a2, atomic_uchar *volatile *a3, void *a4)
{
  id v7 = a4;
  char v8 = 0;
  int v9 = 1;
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(a1 + 4) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  atomic_uchar *volatile v10 = *a3;
  atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
  if (v8) {
    MEMORY[0x18530AEA0](v10);
  }
  ++*((void *)v10 + 1);
  atomic_compare_exchange_strong_explicit(v10, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
  }
  *(void *)(a1 + 32) = a3;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 8++*(_DWORD *)(result + 8) = 3;
  *(_WORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  ++*a2;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 16++*(_DWORD *)(result + 8) = 0;
  *(void *)(a1 + 152) = a2;
  *(_DWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 180) = 1065353216;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 1;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 36++*(_DWORD *)(result + 8) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(void *)(a1 + 400) = 0;
  id v11 = v7;
  *(void *)(a1 + 40++*(_DWORD *)(result + 8) = v11;
  *(unsigned char *)(a1 + 416) = 0;
  *(unsigned char *)(a1 + 44++*(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(a1 + 456) = 0;
  *(unsigned char *)(a1 + 48++*(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(a1 + 496) = 0;
  *(unsigned char *)(a1 + 500) = 0;
  *(_DWORD *)(a1 + 504) = 0;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 52++*(_DWORD *)(result + 8) = 0u;
  *(void *)(a1 + 544) = 0;
  uint64_t v12 = *(void *)(a1 + 152);
  if (*(unsigned char *)(v12 + 4) != 2) {
    *(unsigned char *)(v12 + 4) = 1;
  }

  return a1;
}

void sub_182519FF0(_Unwind_Exception *a1)
{
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v3, v5);
  _Unwind_Resume(a1);
}

void WebGPU::RenderPassEncoder::makeInvalid(WebGPU::RenderPassEncoder *this, NSString *a2)
{
  unsigned int v6 = a2;
  objc_storeStrong((id *)this + 51, a2);
  uint64_t v4 = (id *)*((void *)this + 19);
  if (*((void *)this + 2))
  {
    objc_storeStrong(v4 + 8, a2);
    WebGPU::CommandEncoder::endEncoding(*((void *)this + 19), *((void **)this + 2));
    uint64_t v5 = (NSString *)*((void *)this + 2);
    *((void *)this + 2) = 0;
  }
  else
  {
    [NSString stringWithFormat:@"RenderPassEncoder.makeInvalid, rason = %@", v6];
    uint64_t v5 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebGPU::CommandEncoder::makeInvalid((WebGPU::CommandEncoder *)v4, v5);
  }
}

void sub_18251A0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18251A0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id WebGPU::RenderPassEncoder::renderCommandEncoder(id *this)
{
  if (*((unsigned char *)this[19] + 76)) {
    return 0;
  }
  else {
    return this[2];
  }
}

void WebGPU::RenderPassEncoder::addResourceToActiveResources(uint64_t *a1, uint64_t a2, void *a3, int a4, unsigned int a5, uint64_t a6, unsigned int a7)
{
  id v13 = a3;
  if (v13)
  {
    id v14 = v13;
    if ((a4 & 0xFFFFFFF0) != 0)
    {
      id v15 = v13;
      uint64_t v16 = [v15 parentTexture];
      id v17 = v16;
      id v14 = v15;
      if (v16)
      {
        id v14 = v16;

        a5 = [v15 parentRelativeLevel];
        a6 = [v15 parentRelativeSlice];
      }
    }
    uint64_t EntryMapKey = WebGPU::BindGroup::makeEntryMapKey(a5, a6, a7);
    uint64_t v63 = EntryMapKey;
    int v62 = a4;
    uint64_t v20 = a1 + 21;
    uint64_t v19 = a1[21];
    if (v19)
    {
      unsigned int v21 = *(_DWORD *)(v19 - 8);
      unint64_t v22 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      unint64_t v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
      unint64_t v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
      uint64_t v25 = v21 & ((v24 >> 31) ^ v24);
      uint64_t v26 = *(void *)(v19 + 16 * v25);
      if (v26 == a2)
      {
LABEL_11:
        if (v25 != *(_DWORD *)(v19 - 4))
        {
          uint64_t v29 = v19 + 16 * v25;
          uint64_t v31 = *(void *)(v29 + 8);
          uint64_t v28 = (uint64_t *)(v29 + 8);
          uint64_t v30 = v31;
          if (v31)
          {
            unsigned int v32 = *(_DWORD *)(v30 - 8);
            unint64_t v33 = (EntryMapKey + ~(EntryMapKey << 32)) ^ ((unint64_t)(EntryMapKey + ~(EntryMapKey << 32)) >> 22);
            unint64_t v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
            unint64_t v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
            uint64_t v36 = v32 & ((v35 >> 31) ^ v35);
            uint64_t v37 = *(void *)(v30 + 16 * v36);
            if (v37 != EntryMapKey)
            {
              int v38 = 1;
              while (v37 != -1)
              {
                uint64_t v36 = (v36 + v38) & v32;
                uint64_t v37 = *(void *)(v30 + 16 * v36);
                ++v38;
                if (v37 == EntryMapKey) {
                  goto LABEL_55;
                }
              }
              uint64_t v36 = *(unsigned int *)(v30 - 4);
            }
LABEL_55:
            if (v36 != *(_DWORD *)(v30 - 4))
            {
              a4 |= *(_DWORD *)(v30 + 16 * v36 + 8);
              int v62 = a4;
            }
          }
LABEL_13:
          if ((a4 & 4) != 0)
          {
            if (a4 == 4) {
              goto LABEL_21;
            }
          }
          else if (a4 == 128 || (a4 & 0x80) == 0)
          {
            if ((a4 & 0x200) != 0)
            {
              if (a4 == 512) {
                goto LABEL_21;
              }
            }
            else if (a4 == 16 || (a4 & 0x10) == 0)
            {
LABEL_21:
              if (v28)
              {
                WTF::HashMap<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::HashTableTraits>::inlineSet<unsigned long long const&,WTF::OptionSet<WebGPU::BindGroupEntryUsage>&>(&v60, v28, &v63, &v62);
LABEL_52:

                return;
              }
              uint64_t v61 = 0;
              WTF::HashMap<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::HashTableTraits>::inlineSet<unsigned long long const&,WTF::OptionSet<WebGPU::BindGroupEntryUsage>&>(&v60, &v61, &v63, &v62);
              uint64_t v39 = *v20;
              if (*v20
                || (WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(a1 + 21, 8u), (uint64_t v39 = *v20) != 0))
              {
                int v40 = *(_DWORD *)(v39 - 8);
              }
              else
              {
                int v40 = 0;
              }
              unint64_t v41 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
              unint64_t v42 = 9 * ((v41 + ~(v41 << 13)) ^ ((v41 + ~(v41 << 13)) >> 8));
              unint64_t v43 = (v42 ^ (v42 >> 15)) + ~((v42 ^ (v42 >> 15)) << 27);
              unsigned int v44 = v40 & ((v43 >> 31) ^ v43);
              uint64_t v45 = (void *)(v39 + 16 * v44);
              uint64_t v46 = *v45;
              if (*v45)
              {
                id v47 = 0;
                int v48 = 1;
                while (v46 != a2)
                {
                  if (v46 == -1) {
                    id v47 = v45;
                  }
                  unsigned int v44 = (v44 + v48) & v40;
                  uint64_t v45 = (void *)(v39 + 16 * v44);
                  uint64_t v46 = *v45;
                  ++v48;
                  if (!*v45)
                  {
                    if (v47)
                    {
                      *id v47 = 0;
                      v47[1] = 0;
                      --*(_DWORD *)(*v20 - 16);
                      uint64_t v45 = v47;
                    }
                    goto LABEL_41;
                  }
                }
                WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::HashTable((uint64_t *)&v60, &v61);
                uint64_t v59 = v45[1];
                v45[1] = v60;
                *(void *)&long long v60 = v59;
                if (v59) {
                  WTF::fastFree((WTF *)(v59 - 16), v49);
                }
                goto LABEL_64;
              }
LABEL_41:
              void *v45 = a2;
              WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::HashTable((uint64_t *)&v60, &v61);
              uint64_t v50 = v60;
              *(void *)&long long v60 = 0;
              uint64_t v51 = v45[1];
              v45[1] = v50;
              if (v51)
              {
                WTF::fastFree((WTF *)(v51 - 16), v49);
                if ((void)v60) {
                  WTF::fastFree((WTF *)(v60 - 16), v49);
                }
              }
              if (*v20)
              {
                ++*(_DWORD *)(*v20 - 12);
                uint64_t v52 = *v20;
                if (*v20) {
                  goto LABEL_46;
                }
              }
              else
              {
                MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
                uint64_t v52 = *v20;
                if (*v20)
                {
LABEL_46:
                  uint64_t v53 = (*(_DWORD *)(v52 - 16) + *(_DWORD *)(v52 - 12));
                  unint64_t v54 = *(unsigned int *)(v52 - 4);
                  if (v54 <= 0x400) {
                    goto LABEL_47;
                  }
                  goto LABEL_61;
                }
              }
              uint64_t v53 = *(unsigned int *)(v52 - 16);
              unint64_t v54 = *(unsigned int *)(v52 - 4);
              if (v54 <= 0x400)
              {
LABEL_47:
                if (3 * v54 > 4 * v53) {
                  goto LABEL_64;
                }
                if (!v54)
                {
                  unsigned int v55 = 8;
LABEL_63:
                  WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::HashSet<unsigned long long,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v20, v55);
LABEL_64:
                  if (v61) {
                    WTF::fastFree((WTF *)(v61 - 16), v49);
                  }
                  goto LABEL_52;
                }
LABEL_62:
                unsigned int v55 = v54 << (6 * *(_DWORD *)(v52 - 12) >= (2 * v54));
                goto LABEL_63;
              }
LABEL_61:
              if (v54 > 2 * v53) {
                goto LABEL_64;
              }
              goto LABEL_62;
            }
          }
          id v56 = NSString;
          uint64_t v57 = WebGPU::BindGroup::usageName(&v62);
          uint64_t v58 = [v56 stringWithFormat:@"Bind group has incompatible usage list: %@", v57];
          WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, v58);

          goto LABEL_52;
        }
      }
      else
      {
        int v27 = 1;
        while (v26)
        {
          uint64_t v25 = (v25 + v27) & v21;
          uint64_t v26 = *(void *)(v19 + 16 * v25);
          ++v27;
          if (v26 == a2) {
            goto LABEL_11;
          }
        }
      }
    }
    uint64_t v28 = 0;
    goto LABEL_13;
  }
}

void sub_18251A5B0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
  {
    WTF::fastFree((WTF *)(a14 - 16), a2);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void WebGPU::RenderPassEncoder::addResourceToActiveResources(uint64_t *a1, uint64_t a2, void *a3, int a4)
{
  id v10 = a3;
  int v7 = *(_DWORD *)(a2 + 8);
  if (v7 == -1) {
    uint64_t v8 = -1;
  }
  else {
    uint64_t v8 = *(unsigned int *)(a2 + 8);
  }
  if (v8 != 2)
  {
    if (v8 == 1)
    {
      if (v7 == 1)
      {
        if (*(void *)a2) {
          WebGPU::RenderPassEncoder::addResourceToActiveResources(a1, *(void *)a2, a4);
        }
        goto LABEL_16;
      }
    }
    else if (!v7)
    {
      uint64_t v9 = *(void *)a2;
      if (*(void *)a2)
      {
        if ((a4 & 4) != 0)
        {
          *(void *)(v9 + 232) = -1;
          *(void *)(v9 + 240) = -1;
          *(void *)(v9 + 272) = 0;
          *(void *)(v9 + 24++*(_DWORD *)(result + 8) = 0;
          *(void *)(v9 + 256) = 0;
          *(_DWORD *)(v9 + 264) = 0;
          uint64_t v9 = *(void *)a2;
        }
        WebGPU::RenderPassEncoder::addResourceToActiveResources(a1, v9, *(void **)(v9 + 16), a4, 0, 0, 2u);
      }
      goto LABEL_16;
    }
LABEL_19:
    std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return;
  }
  if (v7 != 2) {
    goto LABEL_19;
  }
  WebGPU::RenderPassEncoder::addResourceToActiveResources(a1, *(void *)a2, v10, a4, 0, 0, 2u);
LABEL_16:
}

void sub_18251A750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void WebGPU::RenderPassEncoder::setCachedRenderPassState(uint64_t a1, void *a2)
{
  uint64_t v3 = (float32x2_t *)(a1 + 532);
  id v4 = a2;
  float64x2_t v5 = vcvtq_f64_f32(v3[1]);
  v12[0] = vcvtq_f64_f32(*v3);
  v12[1] = v5;
  unsigned char v12[2] = vcvtq_f64_f32(*(float32x2_t *)(a1 + 176));
  [v4 setViewport:v12];
  if (*(unsigned char *)(a1 + 448))
  {
    double v6 = *(double *)(a1 + 416);
    double v7 = *(double *)(a1 + 424);
    *(float *)&double v6 = v6;
    *(float *)&double v7 = v7;
    double v8 = *(double *)(a1 + 432);
    double v9 = *(double *)(a1 + 440);
    *(float *)&double v8 = v8;
    *(float *)&double v9 = v9;
    [v4 setBlendColorRed:v6 green:v7 blue:v8 alpha:v9];
  }
  if (*(unsigned char *)(a1 + 500)) {
    [v4 setStencilReferenceValue:*(unsigned int *)(a1 + 496)];
  }
  if (*(unsigned char *)(a1 + 488))
  {
    long long v10 = *(_OWORD *)(a1 + 472);
    v11[0] = *(_OWORD *)(a1 + 456);
    v11[1] = v10;
    [v4 setScissorRect:v11];
  }
}

void sub_18251A824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebGPU::RenderPassEncoder::executePreDrawCommands(WebGPU::RenderPassEncoder *this, uint64_t a2, const WebGPU::Buffer *a3)
{
  uint64_t v4 = *((void *)this + 9);
  if (!v4)
  {
    WebGPU::RenderPassEncoder::makeInvalid(this, &cfstr_MissingPipelin.isa);
    return 0;
  }
  WebGPU::PipelineLayout::errorValidatingBindGroupCompatibility(*(unsigned char **)(v4 + 136), (uint64_t *)this + 50);
  double v6 = (NSString *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    double v7 = (__CFString *)v6;
    WebGPU::RenderPassEncoder::makeInvalid(this, v6);
    goto LABEL_114;
  }
  if (a2) {
    WebGPU::RenderPassEncoder::addResourceToActiveResources((uint64_t *)this, a2, *(void **)(a2 + 16), 1, 0, 0, 2u);
  }
  uint64_t v8 = *((void *)this + 9);
  if (!v8)
  {
    double v7 = @"pipeline is not set";
    goto LABEL_113;
  }
  int v138 = (unsigned int **)((char *)this + 400);
  double v9 = *(unsigned int **)(v8 + 128);
  if (!v9)
  {
    uint64_t v12 = 0;
    id v11 = 0;
LABEL_17:
    if (v9) {
      goto LABEL_18;
    }
    id v14 = 0;
    if (!v12) {
      goto LABEL_47;
    }
    while (1)
    {
LABEL_24:
      uint64_t v15 = *((void *)this + 49);
      if (!v15)
      {
        uint64_t v17 = *v12;
LABEL_50:
        objc_msgSend(NSString, "stringWithFormat:", @"Buffer1 index[%u] is missing", v17);
        double v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
        if (!v7) {
          goto LABEL_51;
        }
LABEL_113:
        WebGPU::RenderPassEncoder::makeInvalid(this, &v7->isa);
LABEL_114:

        return 0;
      }
      unsigned int v16 = *(_DWORD *)(v15 - 8);
      uint64_t v17 = *v12;
      unsigned int v18 = 9 * ((v17 + ~(v17 << 15)) ^ ((v17 + ~(v17 << 15)) >> 10));
      unsigned int v19 = (v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11);
      uint64_t v20 = (v19 ^ HIWORD(v19)) & v16;
      int v21 = *(_DWORD *)(v15 + 32 * v20);
      if (v21 != v17)
      {
        int v22 = 1;
        while (v21 != -1)
        {
          uint64_t v20 = (v20 + v22) & v16;
          int v21 = *(_DWORD *)(v15 + 32 * v20);
          ++v22;
          if (v21 == v17) {
            goto LABEL_31;
          }
        }
        uint64_t v20 = *(unsigned int *)(v15 - 4);
      }
LABEL_31:
      if (v20 == *(_DWORD *)(v15 - 4)) {
        goto LABEL_50;
      }
      unint64_t v23 = (void *)(v15 + 32 * v20);
      unint64_t v24 = v23 + 1;
      unint64_t v25 = v23[2];
      if (v25 >= [(id)v23[1] length])
      {
        if (v23[3])
        {
          double v7 = @"offset >= buffer.length && buffer.size";
          WebGPU::RenderPassEncoder::makeInvalid(this, &cfstr_OffsetBufferLe.isa);
          goto LABEL_113;
        }
        if (*(unsigned char *)(*((void *)this + 19) + 76)) {
          int v27 = 0;
        }
        else {
          int v27 = (void *)*((void *)this + 2);
        }
        id v30 = v27;
        id v31 = *(id *)(*((void *)this + 4) + 288);
        [v30 setVertexBuffer:v31 offset:0 atIndex:*v12];

        uint64_t v29 = v12 + 8;
        uint64_t v12 = v11;
        if (v29 != v11)
        {
LABEL_43:
          uint64_t v12 = v29;
          while (*v12 >= 0xFFFFFFFE)
          {
            v12 += 8;
            if (v12 == v11)
            {
              uint64_t v12 = v11;
              break;
            }
          }
        }
      }
      else
      {
        if (*(unsigned char *)(*((void *)this + 19) + 76)) {
          uint64_t v26 = 0;
        }
        else {
          uint64_t v26 = (void *)*((void *)this + 2);
        }
        id v28 = v26;
        [v28 setVertexBuffer:*v24 offset:v24[1] atIndex:*v12];

        uint64_t v29 = v12 + 8;
        uint64_t v12 = v11;
        if (v29 != v11) {
          goto LABEL_43;
        }
      }
      if (v12 == v14) {
        goto LABEL_47;
      }
    }
  }
  uint64_t v10 = *(v9 - 1);
  id v11 = &v9[8 * v10];
  if (*(v9 - 3))
  {
    uint64_t v12 = v9;
    if (v10)
    {
      uint64_t v13 = 32 * v10;
      uint64_t v12 = v9;
      do
      {
        if (*v12 < 0xFFFFFFFE) {
          goto LABEL_17;
        }
        v12 += 8;
        v13 -= 32;
      }
      while (v13);
      uint64_t v12 = v11;
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  uint64_t v12 = &v9[8 * v10];
  id v11 = v12;
LABEL_18:
  id v14 = &v9[8 * *(v9 - 1)];
  if (v14 != v12) {
    goto LABEL_24;
  }
LABEL_47:
  if ((*((_DWORD *)this + 21) + *((_DWORD *)this + 20) + 2) > *(_DWORD *)(*((void *)this + 4) + 108))
  {
    double v7 = @"Too many bind groups and vertex buffers used";
    goto LABEL_113;
  }
LABEL_51:
  if (*(unsigned char *)(*((void *)this + 19) + 76))
  {
    id v32 = 0;
    unint64_t v33 = *v138;
    if (*v138) {
      goto LABEL_53;
    }
LABEL_60:
    uint64_t v36 = 0;
    unint64_t v35 = v33;
    goto LABEL_62;
  }
  id v32 = *((id *)this + 2);
  unint64_t v33 = *v138;
  if (!*v138) {
    goto LABEL_60;
  }
LABEL_53:
  uint64_t v34 = *(v33 - 1);
  unint64_t v35 = &v33[4 * v34];
  if (*(v33 - 3))
  {
    uint64_t v36 = v33;
    if (v34)
    {
      uint64_t v37 = 16 * v34;
      uint64_t v36 = v33;
      while (*v36 >= 0xFFFFFFFE)
      {
        v36 += 4;
        v37 -= 16;
        if (!v37)
        {
          uint64_t v36 = v35;
          break;
        }
      }
    }
  }
  else
  {
    uint64_t v36 = &v33[4 * v34];
    unint64_t v35 = v36;
  }
LABEL_62:
  if (!v33)
  {
    int v38 = 0;
    if (!v36) {
      goto LABEL_101;
    }
    while (1)
    {
LABEL_68:
      uint64_t v39 = *((void *)v36 + 1);
      if (!v39)
      {
        WebGPU::RenderPassEncoder::makeInvalid(this, &cfstr_BindGroupIsMis.isa);
        goto LABEL_203;
      }
      WebGPU::BindGroup::rebindSamplersIfNeeded(*((WebGPU::BindGroup **)v36 + 1));
      int v40 = (_DWORD *)*((void *)this + 20);
      if (v40)
      {
        int v41 = *(v40 - 2);
        unsigned int v42 = *v36;
        unsigned int v43 = 9 * ((v42 + ~(v42 << 15)) ^ ((v42 + ~(v42 << 15)) >> 10));
        unsigned int v44 = (v43 ^ (v43 >> 6)) + ~((v43 ^ (v43 >> 6)) << 11);
        unsigned int v45 = (v44 ^ HIWORD(v44)) & v41;
        uint64_t v46 = &v40[6 * v45];
        int v47 = *v46;
        if (*v46 == *v36)
        {
LABEL_74:
          v40 += 6 * *(v40 - 1);
          uint64_t v49 = *(void *)(*((void *)this + 9) + 440);
          if (v49) {
            goto LABEL_75;
          }
        }
        else
        {
          int v48 = 1;
          while (v47 != -1)
          {
            unsigned int v45 = (v45 + v48) & v41;
            uint64_t v46 = &v40[6 * v45];
            int v47 = *v46;
            ++v48;
            if (*v46 == v42) {
              goto LABEL_74;
            }
          }
          uint64_t v46 = &v40[6 * *(v40 - 1)];
          int v40 = v46;
          uint64_t v49 = *(void *)(*((void *)this + 9) + 440);
          if (v49)
          {
LABEL_75:
            unsigned int v50 = *(_DWORD *)(v49 - 8);
            unsigned int v51 = 9 * ((v42 + ~(v42 << 15)) ^ ((v42 + ~(v42 << 15)) >> 10));
            unsigned int v52 = (v51 ^ (v51 >> 6)) + ~((v51 ^ (v51 >> 6)) << 11);
            uint64_t v53 = v50 & (v52 ^ HIWORD(v52));
            int v54 = *(_DWORD *)(v49 + 16 * v53);
            if (v54 != v42)
            {
              int v55 = 1;
              while (v54 != -1)
              {
                uint64_t v53 = (v53 + v55) & v50;
                int v54 = *(_DWORD *)(v49 + 16 * v53);
                ++v55;
                if (v54 == v42) {
                  goto LABEL_85;
                }
              }
              uint64_t v53 = *(unsigned int *)(v49 - 4);
            }
LABEL_85:
            uint64_t v56 = v49 + 16 * v53;
            v49 += 16 * *(unsigned int *)(v49 - 4);
            goto LABEL_86;
          }
        }
      }
      else
      {
        uint64_t v46 = 0;
        unsigned int v42 = *v36;
        uint64_t v49 = *(void *)(*((void *)this + 9) + 440);
        if (v49) {
          goto LABEL_75;
        }
      }
      uint64_t v56 = 0;
LABEL_86:
      if (v56 == v49) {
        uint64_t v57 = 0;
      }
      else {
        uint64_t v57 = (void *)(v56 + 8);
      }
      if (v46 == v40) {
        uint64_t v58 = 0;
      }
      else {
        uint64_t v58 = (uint64_t)(v46 + 2);
      }
      WebGPU::errorValidatingBindGroup(v39, v57, v58);
      uint64_t v59 = (NSString *)objc_claimAutoreleasedReturnValue();
      if (v59)
      {
        WebGPU::RenderPassEncoder::makeInvalid(this, v59);

        uint64_t v82 = 0;
        goto LABEL_204;
      }
      id v60 = *(id *)(v39 + 16);
      unsigned int v61 = *(_DWORD *)(*((void *)this + 4) + 108) - 1;
      BOOL v89 = v61 >= *v36;
      unsigned int v62 = v61 - *v36;
      if (v89) {
        uint64_t v63 = v62;
      }
      else {
        uint64_t v63 = *v36;
      }
      [v32 setVertexBuffer:v60 offset:0 atIndex:v63];

      id v64 = *(id *)(v39 + 24);
      [v32 setFragmentBuffer:v64 offset:0 atIndex:*v36];

      uint64_t v65 = v36 + 4;
      uint64_t v36 = v35;
      if (v65 != v35)
      {
        uint64_t v36 = v65;
        while (*v36 >= 0xFFFFFFFE)
        {
          v36 += 4;
          if (v36 == v35)
          {
            uint64_t v36 = v35;
            break;
          }
        }
      }
      if (v36 == v38) {
        goto LABEL_101;
      }
    }
  }
  int v38 = &v33[4 * *(v33 - 1)];
  if (v38 != v36) {
    goto LABEL_68;
  }
LABEL_101:
  id v66 = *(id *)(v4 + 16);

  if (v66) {
    [v32 setRenderPipelineState:*(void *)(v4 + 16)];
  }
  id v67 = *(id *)(v4 + 120);

  if (v67)
  {
    id v68 = *(id *)(v4 + 120);
    [v32 setDepthStencilState:v68];
  }
  [v32 setCullMode:*(void *)(v4 + 64)];
  [v32 setFrontFacingWinding:*(void *)(v4 + 56)];
  [v32 setDepthClipMode:*(void *)(v4 + 72)];
  LODWORD(v69) = *(_DWORD *)(v4 + 80);
  LODWORD(v70) = *(_DWORD *)(v4 + 84);
  LODWORD(v71) = *(_DWORD *)(v4 + 88);
  [v32 setDepthBias:v69 slopeScale:v70 clamp:v71];
  WebGPU::RenderPassEncoder::setCachedRenderPassState((uint64_t)this, v32);
  uint64_t v72 = (uint64_t *)((char *)this + 184);
  uint64_t v73 = *((void *)this + 23);
  if (v73)
  {
    uint64_t v74 = *((void *)this + 12);
    unsigned int v75 = *(_DWORD *)(v73 - 8);
    unint64_t v76 = (v74 + ~(v74 << 32)) ^ ((unint64_t)(v74 + ~(v74 << 32)) >> 22);
    unint64_t v77 = 9 * ((v76 + ~(v76 << 13)) ^ ((v76 + ~(v76 << 13)) >> 8));
    unint64_t v78 = (v77 ^ (v77 >> 15)) + ~((v77 ^ (v77 >> 15)) << 27);
    uint64_t v79 = v75 & ((v78 >> 31) ^ v78);
    uint64_t v80 = *(void *)(v73 + 8 * v79);
    if (v80 != v74)
    {
      int v81 = 1;
      while (v80 != -1)
      {
        uint64_t v79 = (v79 + v81) & v75;
        uint64_t v80 = *(void *)(v73 + 8 * v79);
        ++v81;
        if (v80 == v74) {
          goto LABEL_119;
        }
      }
      uint64_t v79 = *(unsigned int *)(v73 - 4);
    }
LABEL_119:
    if (v79 != *(_DWORD *)(v73 - 4))
    {
      *(void *)(v73 + 8 * v79) = -2;
      ++*(_DWORD *)(*v72 - 16);
      uint64_t v84 = *v72;
      int v85 = *v72 ? *(_DWORD *)(v84 - 12) - 1 : -1;
      *(_DWORD *)(v84 - 12) = v85;
      uint64_t v86 = *v72;
      if (*v72)
      {
        unsigned int v87 = 6 * *(_DWORD *)(v86 - 12);
        unsigned int v88 = *(_DWORD *)(v86 - 4);
        BOOL v89 = v87 < v88 && v88 >= 9;
        if (v89) {
          WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(v72, v88 >> 1, 0);
        }
      }
    }
  }
  uint64_t v90 = *((void *)this + 20);
  if (!v90)
  {
    uint64_t v93 = 0;
    LODWORD(v91) = 0;
LABEL_139:
    uint64_t v92 = v90 + 24 * v91;
    goto LABEL_140;
  }
  uint64_t v91 = *(unsigned int *)(v90 - 4);
  uint64_t v92 = v90 + 24 * v91;
  if (!*(_DWORD *)(v90 - 12))
  {
    uint64_t v93 = v90 + 24 * v91;
    goto LABEL_139;
  }
  uint64_t v93 = *((void *)this + 20);
  if (v91)
  {
    uint64_t v94 = 24 * v91;
    uint64_t v93 = *((void *)this + 20);
    while (*(_DWORD *)v93 >= 0xFFFFFFFE)
    {
      v93 += 24;
      v94 -= 24;
      if (!v94)
      {
        uint64_t v93 = v92;
        break;
      }
    }
  }
LABEL_140:
  if (v90) {
    uint64_t v95 = v90 + 24 * *(unsigned int *)(v90 - 4);
  }
  else {
    uint64_t v95 = 0;
  }
  if (v95 == v93)
  {
LABEL_179:
    uint64_t v123 = *((unsigned int *)this + 33);
    if (v123) {
      [v32 setVertexBytes:*((void *)this + 15) length:4 * v123 atIndex:*(unsigned int *)(*((void *)this + 4) + 108)];
    }
    int v125 = *((_DWORD *)this + 44);
    int v124 = *((_DWORD *)this + 45);
    uint64_t v126 = *((unsigned int *)this + 37);
    if (v126 <= 2)
    {
      if (*((_DWORD *)this + 36) <= 2u)
      {
        uint64_t v127 = (void *)*((void *)this + 17);
        BOOL v128 = (void *)WTF::fastMalloc((WTF *)0x40);
        *((_DWORD *)this + 36) = 16;
        *((void *)this + 17) = v128;
        memcpy(v128, v127, 4 * v126);
        if (v127)
        {
          if (*((void **)this + 17) == v127)
          {
            *((void *)this + 17) = 0;
            *((_DWORD *)this + 36) = 0;
          }
          WTF::fastFree((WTF *)v127, v129);
        }
      }
      *((_DWORD *)this + 37) = 3;
    }
    unint64_t v130 = (_DWORD *)*((void *)this + 17);
    _DWORD *v130 = v125;
    if (*((_DWORD *)this + 37) > 1u)
    {
      v130[1] = v124;
      if (!*((_DWORD *)this + 37))
      {
        __break(0xC471u);
        JUMPOUT(0x18251B45CLL);
      }
      objc_msgSend(v32, "setFragmentBytes:length:atIndex:");
      uint64_t v132 = *((void *)this + 20);
      if (v132)
      {
        *((void *)this + 20) = 0;
        uint64_t v133 = *(unsigned int *)(v132 - 4);
        if (v133)
        {
          uint64_t v134 = v132 + 8;
          do
          {
            if (*(_DWORD *)(v134 - 8) != -2)
            {
              BOOL v135 = *(WTF **)v134;
              if (*(void *)v134)
              {
                *(void *)uint64_t v134 = 0;
                *(_DWORD *)(v134 + ++*(_DWORD *)(result + 8) = 0;
                WTF::fastFree(v135, v131);
              }
            }
            v134 += 24;
            --v133;
          }
          while (v133);
        }
        WTF::fastFree((WTF *)(v132 - 16), v131);
      }
      uint64_t v136 = *((void *)this + 64);
      BOOL v89 = __CFADD__(v136, 1);
      unint64_t v137 = v136 + 1;
      if (v89 || v137 > *((void *)this + 65)) {
        WebGPU::RenderPassEncoder::makeInvalid(this, &cfstr_MDrawcountMMax.isa);
      }
      else {
        *((void *)this + 64) = v137;
      }
      uint64_t v82 = 1;
      goto LABEL_204;
    }
    goto LABEL_209;
  }
  while (1)
  {
    BOOL v96 = *(void **)(*((void *)this + 9) + 136);
    unsigned int v97 = *(_DWORD *)v93;
    uint64_t v98 = WebGPU::PipelineLayout::offsetVectorForBindGroup((uint64_t)v96, *(_DWORD *)v93, v96 + 8, (uint64_t *)(v93 + 8), 1);
    if (!v98) {
      goto LABEL_159;
    }
    unint64_t v99 = v98[3];
    if (!v99) {
      goto LABEL_159;
    }
    uint64_t v100 = v96[5];
    if (!v100) {
      goto LABEL_154;
    }
    unsigned int v101 = *(_DWORD *)(v100 - 8);
    unsigned int v102 = 9 * ((v97 + ~(v97 << 15)) ^ ((v97 + ~(v97 << 15)) >> 10));
    unsigned int v103 = (v102 ^ (v102 >> 6)) + ~((v102 ^ (v102 >> 6)) << 11);
    uint64_t v104 = v101 & (v103 ^ HIWORD(v103));
    int v105 = *(_DWORD *)(v100 + 8 * v104);
    if (v105 != v97)
    {
      int v106 = 1;
      while (v105 != -1)
      {
        uint64_t v104 = (v104 + v106) & v101;
        int v105 = *(_DWORD *)(v100 + 8 * v104);
        ++v106;
        if (v105 == v97) {
          goto LABEL_153;
        }
      }
      goto LABEL_154;
    }
LABEL_153:
    if (v104 != *(_DWORD *)(v100 - 4))
    {
      unint64_t v107 = *(unsigned int *)(v100 + 8 * v104 + 4);
      unint64_t v108 = *((unsigned int *)this + 33);
      if (v107 <= v108) {
        goto LABEL_157;
      }
      __break(1u);
LABEL_209:
      __break(0xC471u);
      JUMPOUT(0x18251B434);
    }
LABEL_154:
    unint64_t v107 = 0;
    unint64_t v108 = *((unsigned int *)this + 33);
LABEL_157:
    if (v108 - v107 < v99) {
      goto LABEL_209;
    }
    memcpy((void *)(*((void *)this + 15) + 4 * v107), *(const void **)v98, 4 * v99);
LABEL_159:
    uint64_t v109 = WebGPU::PipelineLayout::offsetVectorForBindGroup((uint64_t)v96, v97, v96 + 9, (uint64_t *)(v93 + 8), 2);
    if (v109)
    {
      unint64_t v110 = v109[3];
      if (v110) {
        break;
      }
    }
LABEL_174:
    uint64_t v122 = v93 + 24;
    uint64_t v93 = v92;
    if (v122 != v92)
    {
      uint64_t v93 = v122;
      while (*(_DWORD *)v93 >= 0xFFFFFFFE)
      {
        v93 += 24;
        if (v93 == v92)
        {
          uint64_t v93 = v92;
          break;
        }
      }
    }
    if (v93 == v95) {
      goto LABEL_179;
    }
  }
  uint64_t v111 = v96[6];
  if (v111)
  {
    unsigned int v112 = *(_DWORD *)(v111 - 8);
    unsigned int v113 = 9 * ((v97 + ~(v97 << 15)) ^ ((v97 + ~(v97 << 15)) >> 10));
    unsigned int v114 = (v113 ^ (v113 >> 6)) + ~((v113 ^ (v113 >> 6)) << 11);
    uint64_t v115 = v112 & (v114 ^ HIWORD(v114));
    int v116 = *(_DWORD *)(v111 + 8 * v115);
    if (v116 == v97)
    {
LABEL_166:
      if (v115 == *(_DWORD *)(v111 - 4)) {
        goto LABEL_167;
      }
      uint64_t v111 = *(unsigned int *)(v111 + 8 * v115 + 4);
    }
    else
    {
      int v117 = 1;
      while (v116 != -1)
      {
        uint64_t v115 = (v115 + v117) & v112;
        int v116 = *(_DWORD *)(v111 + 8 * v115);
        ++v117;
        if (v116 == v97) {
          goto LABEL_166;
        }
      }
LABEL_167:
      uint64_t v111 = 0;
    }
  }
  unint64_t v118 = v111 + 3;
  unint64_t v119 = *((unsigned int *)this + 37);
  BOOL v120 = v119 > v118;
  unint64_t v121 = v119 - v118;
  if (v120)
  {
    if (v121 < v110)
    {
      __break(0xC471u);
      JUMPOUT(0x18251B454);
    }
    memcpy((void *)(*((void *)this + 17) + 4 * v118), *(const void **)v109, 4 * v110);
    goto LABEL_174;
  }
  WebGPU::RenderPassEncoder::makeInvalid(this, &cfstr_InvalidOffsetC.isa);
LABEL_203:
  uint64_t v82 = 0;
LABEL_204:

  return v82;
}

void sub_18251B468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18251B478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18251B488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18251B49C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18251B4AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18251B4C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18251B4D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18251B4E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18251B4F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18251B504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18251B518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18251B528(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18251B53C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18251B54C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18251B55C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18251B56C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18251B57C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t WebGPU::RenderPassEncoder::computeMininumVertexInstanceCount(WebGPU::RenderPassEncoder *this)
{
  uint64_t v1 = *((void *)this + 9);
  if (!v1)
  {
    unsigned int v8 = 0;
    uint64_t v9 = 0;
    return v8 | (unint64_t)(v9 << 32);
  }
  uint64_t v3 = *(int **)(v1 + 128);
  if (v3)
  {
    uint64_t v4 = *(v3 - 1);
    float64x2_t v5 = &v3[8 * v4];
    if (!*(v3 - 3))
    {
      double v6 = &v3[8 * v4];
      float64x2_t v5 = v6;
      goto LABEL_12;
    }
    double v6 = v3;
    if (v4)
    {
      uint64_t v7 = 32 * v4;
      double v6 = v3;
      do
      {
        if (*v6 < 0xFFFFFFFE) {
          goto LABEL_11;
        }
        v6 += 8;
        v7 -= 32;
      }
      while (v7);
      double v6 = v5;
      goto LABEL_12;
    }
  }
  else
  {
    double v6 = 0;
    float64x2_t v5 = 0;
  }
LABEL_11:
  if (!v3)
  {
    uint64_t v10 = 0;
    if (v6) {
      goto LABEL_13;
    }
LABEL_51:
    unsigned int v8 = -1;
    uint64_t v9 = 0xFFFFFFFFLL;
    return v8 | (unint64_t)(v9 << 32);
  }
LABEL_12:
  uint64_t v10 = &v3[8 * *(v3 - 1)];
  if (v10 == v6) {
    goto LABEL_51;
  }
LABEL_13:
  unint64_t v11 = *((void *)this + 49);
  if (v11)
  {
    unsigned int v8 = -1;
    uint64_t v9 = 0xFFFFFFFFLL;
    while (1)
    {
      unsigned int v12 = *(_DWORD *)(v11 - 8);
      unsigned int v13 = *v6;
      unsigned int v14 = 9 * ((v13 + ~(v13 << 15)) ^ ((v13 + ~(v13 << 15)) >> 10));
      unsigned int v15 = (v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11);
      uint64_t v16 = (v15 ^ HIWORD(v15)) & v12;
      int v17 = *(_DWORD *)(v11 + 32 * v16);
      if (v17 != *v6)
      {
        int v18 = 1;
        while (v17 != -1)
        {
          uint64_t v16 = (v16 + v18) & v12;
          int v17 = *(_DWORD *)(v11 + 32 * v16);
          ++v18;
          if (v17 == v13) {
            goto LABEL_19;
          }
        }
LABEL_20:
        unint64_t v11 = 0;
        unint64_t v19 = *((void *)v6 + 1);
        if (v19) {
          goto LABEL_26;
        }
        goto LABEL_39;
      }
LABEL_19:
      if (v16 == *(_DWORD *)(v11 - 4)) {
        goto LABEL_20;
      }
      unint64_t v20 = v11 + 32 * v16;
      int v21 = (id *)(v20 + 8);
      unint64_t v22 = [*(id *)(v20 + 8) length];
      unint64_t v24 = *(void *)(v20 + 16);
      unint64_t v23 = (void *)(v20 + 16);
      if (v22 < v24)
      {
        unint64_t v11 = 0;
        goto LABEL_25;
      }
      unint64_t v11 = [*v21 length] - *v23;
      unint64_t v19 = *((void *)v6 + 1);
      if (v19)
      {
LABEL_26:
        unint64_t v25 = *((void *)v6 + 2);
        BOOL v26 = v11 >= v25;
        unint64_t v27 = v11 - v25;
        if (v26) {
          uint64_t v28 = v27 / v19 + 1;
        }
        else {
          LODWORD(v2++*(_DWORD *)(result + 8) = 0;
        }
        int v29 = v6[6];
        if (v9 >= v28) {
          unsigned int v30 = v28;
        }
        else {
          unsigned int v30 = v9;
        }
        if (v8 < v28) {
          LODWORD(v2++*(_DWORD *)(result + 8) = v8;
        }
        if (v29) {
          uint64_t v9 = v30;
        }
        else {
          uint64_t v9 = v9;
        }
        if (!v29) {
          unsigned int v8 = v28;
        }
      }
      while (1)
      {
LABEL_39:
        id v31 = v6 + 8;
        double v6 = v5;
        if (v31 != v5)
        {
          double v6 = v31;
          while (*v6 >= 0xFFFFFFFE)
          {
            v6 += 8;
            if (v6 == v5)
            {
              double v6 = v5;
              break;
            }
          }
        }
        if (v6 == v10) {
          return v8 | (unint64_t)(v9 << 32);
        }
        unint64_t v11 = *((void *)this + 49);
        if (v11) {
          break;
        }
LABEL_25:
        unint64_t v19 = *((void *)v6 + 1);
        if (v19) {
          goto LABEL_26;
        }
      }
    }
  }
  unsigned int v8 = -1;
  uint64_t v9 = 0xFFFFFFFFLL;
  do
  {
    if (*((void *)v6 + 1))
    {
      unsigned int v33 = *((void *)v6 + 2) == 0;
      int v34 = v6[6];
      if (v8 >= v33) {
        BOOL v35 = *((void *)v6 + 2) == 0;
      }
      else {
        BOOL v35 = v8;
      }
      if (v9 < v33) {
        unsigned int v33 = v9;
      }
      if (v34) {
        uint64_t v9 = v33;
      }
      else {
        uint64_t v9 = v9;
      }
      if (!v34) {
        unsigned int v8 = v35;
      }
    }
    uint64_t v36 = v6 + 8;
    double v6 = v5;
    if (v36 != v5)
    {
      double v6 = v36;
      while (*v6 >= 0xFFFFFFFE)
      {
        v6 += 8;
        if (v6 == v5)
        {
          double v6 = v5;
          break;
        }
      }
    }
  }
  while (v6 != v10);
  return v8 | (unint64_t)(v9 << 32);
}

uint64_t WebGPU::RenderPassEncoder::clampIndexBufferToValidValues(unsigned int a1, int a2, int a3, int a4, MTLIndexType a5, unint64_t a6, uint64_t a7, int a8, int a9, id a10, WebGPU::Device *a11, unsigned int a12, uint64_t a13)
{
  int v20 = a9;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v21 = a10;
  if (!a7)
  {
    unint64_t v23 = 0;
    goto LABEL_19;
  }
  int v43 = a4;
  id v22 = *(id *)(a7 + 16);
  unint64_t v23 = v22;
  uint64_t v24 = 2;
  if (a1 && v22 && *(unsigned char *)(a7 + 52) != 4)
  {
    if ((v20 & a8) == 0xFFFFFFFF)
    {
      uint64_t v24 = 0;
      goto LABEL_20;
    }
    char v25 = 1;
    if (a5) {
      char v25 = 2;
    }
    char v41 = v25;
    if (a8)
    {
      if (v20 && [v22 length] > a6)
      {
        unint64_t v40 = a6 >> v41;
        if (*(_DWORD *)(a7 + 248) == (a6 >> v41)
          && *(_DWORD *)(a7 + 252) == a1
          && *(_DWORD *)(a7 + 256) == a8
          && *(_DWORD *)(a7 + 260) == v20
          && *(void *)(a7 + 272) == a5
          && *(_DWORD *)(a7 + 264) == v43)
        {
          uint64_t v24 = 3;
          goto LABEL_20;
        }
        unint64_t v27 = (unint64_t)a1 << v41;
        if (!__CFADD__(v27, a6) && v27 + a6 <= [v23 length])
        {
          unint64_t v28 = a12;
          int v29 = a11;
          id v42 = *(id *)(a7 + 32);
          v45[0] = a1;
          v45[1] = a2;
          char v45[2] = v40;
          v45[3] = a3;
          unint64_t v30 = v28;
          v45[4] = v43;
          id v31 = v29;
          id v32 = WebGPU::Device::copyIndexIndirectArgsPipeline(v29, v28);
          if (v32)
          {
            unsigned int v33 = v42;
            [v21 setRenderPipelineState:v32];

            [v21 setVertexBuffer:v42 offset:0 atIndex:0];
            [v21 setVertexBytes:v45 length:20 atIndex:1];
            [v21 setVertexBytes:&a9 length:4 atIndex:2];
            [v21 drawPrimitives:0 vertexStart:0 vertexCount:1];
            [v21 memoryBarrierWithScope:1 afterStages:1 beforeStages:1];
            int v34 = WebGPU::Device::indexBufferClampPipeline(v31, a5, v30);
            if (v34)
            {
              [v21 setRenderPipelineState:v34];

              [v21 setVertexBuffer:v23 offset:a6 atIndex:0];
              [v21 setVertexBuffer:v42 offset:0 atIndex:1];
              int v36 = a13 == 2 || a13 == 4;
              if (a8 == -1) {
                int v37 = ~v36;
              }
              else {
                int v37 = a8;
              }
              v46[0] = v37;
              v46[1] = v36;
              objc_msgSend(v21, "setVertexBytes:length:atIndex:", v46, 8, 2, a1);
              [v21 drawPrimitives:0 vertexStart:0 vertexCount:v39];
              [v21 memoryBarrierWithScope:1 afterStages:1 beforeStages:1];
              int v38 = a9;
              *(_DWORD *)(a7 + 24++*(_DWORD *)(result + 8) = v40;
              *(_DWORD *)(a7 + 252) = a1;
              *(_DWORD *)(a7 + 256) = a8;
              *(_DWORD *)(a7 + 260) = v38;
              *(void *)(a7 + 272) = a5;
              *(_DWORD *)(a7 + 264) = v43;
              uint64_t v24 = 1;
            }
            else
            {
              uint64_t v24 = 2;
            }
          }
          else
          {
            uint64_t v24 = 2;
            unsigned int v33 = v42;
          }

          goto LABEL_20;
        }
LABEL_19:
        uint64_t v24 = 2;
      }
    }
  }
LABEL_20:

  return v24;
}

void sub_18251BBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void WebGPU::RenderPassEncoder::clampIndirectIndexBufferToValidValues(uint64_t a1@<X0>, uint64_t a2@<X1>, MTLIndexType a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, void *a9@<X8>, WebGPU::Device *a10, unint64_t a11, void *a12, unsigned char *a13)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v22 = a12;
  if ((a7 & a6) != 0xFFFFFFFF)
  {
    if (a1)
    {
      uint64_t v36 = a8;
      id v23 = *(id *)(a1 + 16);
      if (v23 && *(unsigned char *)(a1 + 52) != 4 && *(unsigned char *)(a2 + 52) != 4)
      {
        id v35 = *(id *)(a2 + 24);
        if (!HIDWORD(a4))
        {
          int v24 = a3 ? 4 : 2;
          if (!__CFADD__(a4, v24)
            && a7
            && a6
            && v35
            && [v23 length] > (unint64_t)(a4 + v24))
          {
            if (*(void *)(a2 + 272) == a3
              && *(void *)(a2 + 240) == a4
              && *(void *)(a2 + 232) == a5
              && *(_DWORD *)(a2 + 256) == a6
              && *(_DWORD *)(a2 + 260) == a7)
            {
LABEL_42:
              *a9 = *(id *)(a2 + 32);
              a9[1] = 0;
              goto LABEL_13;
            }
            char v25 = WebGPU::Device::indexedIndirectBufferClampPipeline(a10, a11);
            if (v25)
            {
              [v22 setRenderPipelineState:v25];

              uint64_t v33 = [v23 length];
              char v26 = 1;
              if (a3) {
                char v26 = 2;
              }
              char v32 = v26;
              [v22 setVertexBuffer:*(void *)(a2 + 16) offset:a5 atIndex:0];
              id v27 = *(id *)(a2 + 32);
              [v22 setVertexBuffer:v27 offset:0 atIndex:1];

              [v22 setVertexBuffer:v35 offset:0 atIndex:2];
              v38[0] = (v33 - a4) >> v32;
              v38[1] = a7;
              [v22 setVertexBytes:v38 length:8 atIndex:3];
              [v22 drawPrimitives:0 vertexStart:0 vertexCount:1];
              [v22 memoryBarrierWithScope:1 afterStages:1 beforeStages:1];
              unint64_t v28 = WebGPU::Device::indexBufferClampPipeline(a10, a3, a11);
              if (v28)
              {
                [v22 setRenderPipelineState:v28];

                [v22 setVertexBuffer:v23 offset:a4 atIndex:0];
                id v34 = *(id *)(a2 + 32);
                objc_msgSend(v22, "setVertexBuffer:offset:atIndex:");

                int v30 = v36 == 2 || v36 == 4;
                if (a6 == -1) {
                  int v31 = ~v30;
                }
                else {
                  int v31 = a6;
                }
                v37[0] = v31;
                v37[1] = v30;
                [v22 setVertexBytes:v37 length:8 atIndex:2];
                [v22 drawPrimitives:0 indirectBuffer:v35 indirectBufferOffset:0];
                [v22 memoryBarrierWithScope:1 afterStages:1 beforeStages:1];
                *a13 = 1;
                *(void *)(a2 + 272) = a3;
                *(void *)(a2 + 232) = a5;
                *(void *)(a2 + 240) = a4;
                *(_DWORD *)(a2 + 256) = a6;
                *(_DWORD *)(a2 + 260) = a7;
                goto LABEL_42;
              }
            }
          }
        }
        *a9 = 0;
        a9[1] = 0;
LABEL_13:

LABEL_17:
        goto LABEL_18;
      }
    }
    else
    {
      id v23 = 0;
    }
    *a9 = 0;
    a9[1] = 0;
    goto LABEL_17;
  }
  *a9 = *(id *)(a2 + 16);
  a9[1] = a5;
LABEL_18:
}

void sub_18251BF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

id WebGPU::RenderPassEncoder::clampIndirectBufferToValidValues(uint64_t a1, uint64_t a2, int a3, int a4, WebGPU::Device *a5, unsigned int a6, void *a7, unsigned char *a8)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v15 = a7;
  id v16 = 0;
  if (a3 && a4 && *(unsigned char *)(a1 + 52) != 4)
  {
    if (*(void *)(a1 + 232) == a2 && *(_DWORD *)(a1 + 256) == a3 && *(_DWORD *)(a1 + 260) == a4)
    {
      id v16 = *(id *)(a1 + 24);
    }
    else
    {
      WebGPU::Device::indirectBufferClampPipeline(a5, a6);
      id v17 = (id)objc_claimAutoreleasedReturnValue();
      if (v17)
      {
        [v15 setRenderPipelineState:v17];

        [v15 setVertexBuffer:*(void *)(a1 + 16) offset:a2 atIndex:0];
        id v18 = *(id *)(a1 + 24);
        [v15 setVertexBuffer:v18 offset:0 atIndex:1];

        v20[0] = a3;
        v20[1] = a4;
        [v15 setVertexBytes:v20 length:8 atIndex:2];
        [v15 drawPrimitives:0 vertexStart:0 vertexCount:1];
        [v15 memoryBarrierWithScope:1 afterStages:1 beforeStages:1];
        *a8 = 1;
        *(void *)(a1 + 232) = a2;
        *(_DWORD *)(a1 + 256) = a3;
        *(_DWORD *)(a1 + 260) = a4;
        id v16 = *(id *)(a1 + 24);
      }
      else
      {
        id v16 = 0;
      }
    }
  }

  return v16;
}

void sub_18251C1A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN6WebGPU17RenderPassEncoder7endPassEv_block_invoke(uint64_t a1)
{
}

BOOL WebGPU::RenderPassEncoder::setCommandEncoder(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 8);
  if (v3 == -1) {
    uint64_t v4 = -1;
  }
  else {
    uint64_t v4 = *(unsigned int *)(a2 + 8);
  }
  if (v4 == 2)
  {
    if (v3 != 2) {
      goto LABEL_23;
    }
    float64x2_t v5 = *(WebGPU::TextureView **)a2;
    if (*(void *)a2)
    {
      uint64_t v6 = *(void *)(a1 + 152);
      WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>((uint64_t)v5 + 48, v6, (uint64_t)v12);
      if (*((unsigned char *)v5 + 40))
      {
        *(unsigned char *)(v6 + 76) = 1;
        uint64_t v7 = *(void *)(v6 + 56);
        if (v7)
        {
          unsigned int v8 = *(WebGPU::CommandBuffer **)(v7 + 8);
          if (v8) {
            WebGPU::CommandBuffer::makeInvalid(v8, *(NSString **)(v6 + 64));
          }
        }
      }
    }
  }
  else
  {
    if (v4 == 1)
    {
      if (v3 == 1)
      {
        if (*(void *)a2) {
          WebGPU::TextureView::setCommandEncoder(*(WebGPU::TextureView **)a2, *(WebGPU::CommandEncoder **)(a1 + 152));
        }
        goto LABEL_19;
      }
LABEL_23:
      unint64_t v11 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
      _Unwind_Resume(v11);
    }
    if (v3) {
      goto LABEL_23;
    }
    if (*(void *)a2) {
      WebGPU::Buffer::setCommandEncoder(*(WebGPU::Buffer **)a2, *(WebGPU::CommandEncoder **)(a1 + 152));
    }
  }
LABEL_19:
  if (*(unsigned char *)(*(void *)(a1 + 152) + 76)) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *(void *)(a1 + 16);
  }
  return v9 != 0;
}

__CFString *WebGPU::RenderPassEncoder::errorValidatingPipeline(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return @"setPipeline: invalid RenderPipeline";
  }
  uint64_t v3 = *(void *)(a2 + 24);
  if (!*(void *)(v3 + 8) || v3 != *(void *)(a1 + 32)) {
    return @"setPipeline: invalid RenderPipeline";
  }
  int v6 = *(unsigned __int8 *)(a1 + 113);
  if (*(unsigned char *)(a1 + 112) && ([*(id *)(a2 + 112) isDepthWriteEnabled] & 1) != 0
    || v6 && *(unsigned char *)(a2 + 448))
  {
    return @"setPipeline: invalid depth stencil state";
  }
  if (!WebGPU::RenderPipeline::colorDepthStencilTargetsMatch(a2, a1 + 240, a1 + 368, (uint64_t *)(a1 + 384))) {
    return @"setPipeline: color and depth targets from pass do not match pipeline";
  }
  uint64_t v7 = *(_DWORD **)(*(void *)(a2 + 136) + 72);
  if (v7)
  {
    uint64_t v8 = *(v7 - 1);
    uint64_t v9 = &v7[6 * v8];
    if (*(v7 - 3))
    {
      uint64_t v10 = *(_DWORD **)(*(void *)(a2 + 136) + 72);
      if (v8)
      {
        uint64_t v11 = 24 * v8;
        uint64_t v10 = *(_DWORD **)(*(void *)(a2 + 136) + 72);
        while (*v10 >= 0xFFFFFFFE)
        {
          v10 += 6;
          v11 -= 24;
          if (!v11)
          {
            uint64_t v10 = v9;
            goto LABEL_22;
          }
        }
      }
      goto LABEL_22;
    }
    uint64_t v10 = &v7[6 * v8];
  }
  else
  {
    uint64_t v10 = 0;
    LODWORD(v++*(_DWORD *)(result + 8) = 0;
  }
  uint64_t v9 = &v7[6 * v8];
LABEL_22:
  if (v7) {
    v7 += 6 * *(v7 - 1);
  }
  if (v7 == v10) {
    return 0;
  }
  unint64_t v12 = 0;
  do
  {
    unsigned int v13 = v9;
    if (v10 + 6 != v9)
    {
      unsigned int v13 = v10 + 6;
      while (*v13 >= 0xFFFFFFFE)
      {
        v13 += 6;
        if (v13 == v9)
        {
          unsigned int v13 = v9;
          break;
        }
      }
    }
    v12 += v10[5];
    uint64_t v10 = v13;
  }
  while (v13 != v7);
  if (v12 <= 0xFFFFFFFFFFFFFFFCLL) {
    return 0;
  }
  else {
    return @"setPipeline: invalid size of fragmentDynamicOffsets";
  }
}

_DWORD *wgpuRenderPassEncoderReference(_DWORD *result)
{
  return result;
}

uint64_t wgpuRenderPassEncoderRelease(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_DWORD *)result != 1)
  {
    --*(_DWORD *)result;
    return result;
  }
  uint64_t v2 = *(void **)(result + 16);
  if (v2)
  {
    WebGPU::CommandEncoder::makeInvalid(*(WebGPU::CommandEncoder **)(result + 152), &cfstr_Gpurenderpasse.isa);
    uint64_t v2 = *(void **)(v1 + 16);
  }
  *(void *)(v1 + 16) = 0;

  uint64_t v4 = *(void *)(v1 + 400);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 4);
    if (v5)
    {
      int v6 = (WebGPU::BindGroup **)(v4 + 8);
      do
      {
        if (*((_DWORD *)v6 - 2) != -2)
        {
          uint64_t v9 = *v6;
          *int v6 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 1)
            {
              WebGPU::BindGroup::~BindGroup(v9, v3);
              WTF::fastFree(v7, v8);
            }
            else
            {
              --*(_DWORD *)v9;
            }
          }
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), v3);
  }
  uint64_t v10 = *(void *)(v1 + 392);
  if (v10)
  {
    uint64_t v11 = *(unsigned int *)(v10 - 4);
    if (v11)
    {
      unint64_t v12 = (id *)(v10 + 8);
      do
      {
        if (*((_DWORD *)v12 - 2) != -2) {

        }
        v12 += 4;
        --v11;
      }
      while (v11);
    }
    WTF::fastFree((WTF *)(v10 - 16), v3);
  }
  unsigned int v13 = *(WebGPU::TextureView **)(v1 + 384);
  *(void *)(v1 + 384) = 0;
  if (!v13)
  {
LABEL_25:
    uint64_t v14 = *(unsigned int *)(v1 + 380);
    if (!v14) {
      goto LABEL_34;
    }
    goto LABEL_28;
  }
  if (*(_DWORD *)v13 != 1)
  {
    --*(_DWORD *)v13;
    goto LABEL_25;
  }
  WebGPU::TextureView::~TextureView(v13, v3);
  WTF::fastFree(v15, v16);
  uint64_t v14 = *(unsigned int *)(v1 + 380);
  if (!v14) {
    goto LABEL_34;
  }
LABEL_28:
  id v17 = *(WebGPU::TextureView ***)(v1 + 368);
  uint64_t v18 = 8 * v14;
  do
  {
    uint64_t v21 = *v17;
    *id v17 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
      {
        WebGPU::TextureView::~TextureView(v21, v3);
        WTF::fastFree(v19, v20);
      }
      else
      {
        --*(_DWORD *)v21;
      }
    }
    ++v17;
    v18 -= 8;
  }
  while (v18);
LABEL_34:
  id v22 = *(WTF **)(v1 + 368);
  if (v22)
  {
    *(void *)(v1 + 36++*(_DWORD *)(result + 8) = 0;
    *(_DWORD *)(v1 + 376) = 0;
    WTF::fastFree(v22, v3);
  }
  id v23 = *(WTF **)(v1 + 296);
  if (v23)
  {
    *(void *)(v1 + 296) = 0;
    *(_DWORD *)(v1 + 304) = 0;
    WTF::fastFree(v23, v3);
  }

  uint64_t v25 = *(void *)(v1 + 192);
  if (v25) {
    WTF::fastFree((WTF *)(v25 - 16), v24);
  }
  uint64_t v26 = *(void *)(v1 + 184);
  if (v26) {
    WTF::fastFree((WTF *)(v26 - 16), v24);
  }
  uint64_t v27 = *(void *)(v1 + 168);
  if (v27)
  {
    uint64_t v28 = *(unsigned int *)(v27 - 4);
    if (v28)
    {
      int v29 = (void *)(v27 + 8);
      do
      {
        if (*(v29 - 1) != -1 && *v29) {
          WTF::fastFree((WTF *)(*v29 - 16), v24);
        }
        v29 += 2;
        --v28;
      }
      while (v28);
    }
    WTF::fastFree((WTF *)(v27 - 16), v24);
  }
  uint64_t v30 = *(void *)(v1 + 160);
  if (v30)
  {
    uint64_t v31 = *(unsigned int *)(v30 - 4);
    if (v31)
    {
      uint64_t v32 = v30 + 8;
      do
      {
        if (*(_DWORD *)(v32 - 8) != -2)
        {
          uint64_t v33 = *(WTF **)v32;
          if (*(void *)v32)
          {
            *(void *)uint64_t v32 = 0;
            *(_DWORD *)(v32 + ++*(_DWORD *)(result + 8) = 0;
            WTF::fastFree(v33, v24);
          }
        }
        v32 += 24;
        --v31;
      }
      while (v31);
    }
    WTF::fastFree((WTF *)(v30 - 16), v24);
  }
  id v34 = *(WebGPU::CommandEncoder **)(v1 + 152);
  *(void *)(v1 + 152) = 0;
  if (!v34)
  {
LABEL_61:
    id v35 = *(WTF **)(v1 + 136);
    if (!v35) {
      goto LABEL_63;
    }
    goto LABEL_62;
  }
  if (*(_DWORD *)v34 != 1)
  {
    --*(_DWORD *)v34;
    goto LABEL_61;
  }
  WebGPU::CommandEncoder::~CommandEncoder(v34);
  WTF::fastFree(v47, v48);
  id v35 = *(WTF **)(v1 + 136);
  if (v35)
  {
LABEL_62:
    *(void *)(v1 + 136) = 0;
    *(_DWORD *)(v1 + 144) = 0;
    WTF::fastFree(v35, v24);
  }
LABEL_63:
  uint64_t v36 = *(WTF **)(v1 + 120);
  if (v36)
  {
    *(void *)(v1 + 120) = 0;
    *(_DWORD *)(v1 + 12++*(_DWORD *)(result + 8) = 0;
    WTF::fastFree(v36, v24);
  }
  int v37 = *(WebGPU::RenderPipeline **)(v1 + 72);
  *(void *)(v1 + 72) = 0;
  if (!v37)
  {
LABEL_68:
    int v38 = *(WebGPU::Buffer **)(v1 + 40);
    *(void *)(v1 + 40) = 0;
    if (!v38) {
      goto LABEL_73;
    }
    goto LABEL_71;
  }
  if (*(_DWORD *)v37 != 1)
  {
    --*(_DWORD *)v37;
    goto LABEL_68;
  }
  WebGPU::RenderPipeline::~RenderPipeline(v37, v24);
  WTF::fastFree(v39, v40);
  int v38 = *(WebGPU::Buffer **)(v1 + 40);
  *(void *)(v1 + 40) = 0;
  if (!v38) {
    goto LABEL_73;
  }
LABEL_71:
  if (*(_DWORD *)v38 == 1)
  {
    WebGPU::Buffer::~Buffer(v38, v24);
    WTF::fastFree(v44, v45);
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)(v1 + 32), v46);

    uint64_t v42 = *(void *)(v1 + 8);
    if (v42) {
      goto LABEL_74;
    }
    goto LABEL_78;
  }
  --*(_DWORD *)v38;
LABEL_73:
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)(v1 + 32), v24);

  uint64_t v42 = *(void *)(v1 + 8);
  if (v42)
  {
LABEL_74:
    *(void *)(v42 + ++*(_DWORD *)(result + 8) = 0;
    int v43 = *(unsigned int **)(v1 + 8);
    *(void *)(v1 + ++*(_DWORD *)(result + 8) = 0;
    if (v43 && atomic_fetch_add((atomic_uint *volatile)v43, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v43);
      WTF::fastFree((WTF *)v43, v41);
    }
    goto LABEL_79;
  }
LABEL_78:
  *(void *)(v1 + ++*(_DWORD *)(result + 8) = 0;
LABEL_79:
  return WTF::fastFree((WTF *)v1, v41);
}

void sub_18251C87C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 400);
  if (v4)
  {
    uint64_t v7 = *(unsigned int *)(v4 - 4);
    if (v7)
    {
      uint64_t v32 = (WebGPU::BindGroup **)(v4 + 8);
      do
      {
        if (*((_DWORD *)v32 - 2) != -2)
        {
          uint64_t v33 = *v32;
          *uint64_t v32 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 1)
            {
              WebGPU::BindGroup::~BindGroup(v33, v3);
              WTF::fastFree(v34, v35);
            }
            else
            {
              --*(_DWORD *)v33;
            }
          }
        }
        v32 += 2;
        --v7;
      }
      while (v7);
    }
    WTF::fastFree((WTF *)(v4 - 16), v3);
    uint64_t v5 = *(void *)(v1 + 392);
    if (!v5)
    {
LABEL_3:
      int v6 = *(WebGPU::TextureView **)(v1 + 384);
      *(void *)(v1 + 384) = 0;
      if (!v6) {
        goto LABEL_12;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(v1 + 392);
    if (!v5) {
      goto LABEL_3;
    }
  }
  uint64_t v8 = *(unsigned int *)(v5 - 4);
  if (v8)
  {
    uint64_t v36 = (id *)(v5 + 8);
    do
    {
      if (*((_DWORD *)v36 - 2) != -2) {

      }
      v36 += 4;
      --v8;
    }
    while (v8);
  }
  WTF::fastFree((WTF *)(v5 - 16), v3);
  int v6 = *(WebGPU::TextureView **)(v1 + 384);
  *(void *)(v1 + 384) = 0;
  if (!v6)
  {
LABEL_12:
    uint64_t v11 = *(unsigned int *)(v1 + 380);
    if (v11)
    {
      id v23 = *(WebGPU::TextureView ***)(v1 + 368);
      uint64_t v24 = 8 * v11;
      do
      {
        uint64_t v25 = *v23;
        *id v23 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 1)
          {
            WebGPU::TextureView::~TextureView(v25, v3);
            WTF::fastFree(v26, v27);
          }
          else
          {
            --*(_DWORD *)v25;
          }
        }
        ++v23;
        v24 -= 8;
      }
      while (v24);
    }
    unint64_t v12 = *(WTF **)(v1 + 368);
    if (v12)
    {
      *(void *)(v1 + 36++*(_DWORD *)(result + 8) = 0;
      *(_DWORD *)(v1 + 376) = 0;
      WTF::fastFree(v12, v3);
    }
    unsigned int v13 = *(WTF **)(v1 + 296);
    if (v13)
    {
      *(void *)(v1 + 296) = 0;
      *(_DWORD *)(v1 + 304) = 0;
      WTF::fastFree(v13, v3);
    }

    uint64_t v15 = *(void *)(v1 + 192);
    if (v15)
    {
      WTF::fastFree((WTF *)(v15 - 16), v14);
      uint64_t v16 = *(void *)(v1 + 184);
      if (!v16)
      {
LABEL_19:
        uint64_t v17 = *(void *)(v1 + 168);
        if (!v17) {
          goto LABEL_20;
        }
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v16 = *(void *)(v1 + 184);
      if (!v16) {
        goto LABEL_19;
      }
    }
    WTF::fastFree((WTF *)(v16 - 16), v14);
    uint64_t v17 = *(void *)(v1 + 168);
    if (!v17)
    {
LABEL_20:
      uint64_t v18 = *(void *)(v1 + 160);
      if (!v18) {
        goto LABEL_21;
      }
      goto LABEL_36;
    }
LABEL_34:
    uint64_t v28 = *(unsigned int *)(v17 - 4);
    if (v28)
    {
      int v37 = (void *)(v17 + 8);
      do
      {
        if (*(v37 - 1) != -1 && *v37) {
          WTF::fastFree((WTF *)(*v37 - 16), v14);
        }
        v37 += 2;
        --v28;
      }
      while (v28);
    }
    WTF::fastFree((WTF *)(v17 - 16), v14);
    uint64_t v18 = *(void *)(v1 + 160);
    if (!v18)
    {
LABEL_21:
      unint64_t v19 = *(WebGPU::CommandEncoder **)(v1 + 152);
      *(void *)(v1 + 152) = 0;
      if (!v19) {
        goto LABEL_22;
      }
      goto LABEL_38;
    }
LABEL_36:
    uint64_t v29 = *(unsigned int *)(v18 - 4);
    if (v29)
    {
      uint64_t v38 = v18 + 8;
      do
      {
        if (*(_DWORD *)(v38 - 8) != -2)
        {
          uint64_t v39 = *(WTF **)v38;
          if (*(void *)v38)
          {
            *(void *)uint64_t v38 = 0;
            *(_DWORD *)(v38 + ++*(_DWORD *)(result + 8) = 0;
            WTF::fastFree(v39, v14);
          }
        }
        v38 += 24;
        --v29;
      }
      while (v29);
    }
    WTF::fastFree((WTF *)(v18 - 16), v14);
    unint64_t v19 = *(WebGPU::CommandEncoder **)(v1 + 152);
    *(void *)(v1 + 152) = 0;
    if (!v19)
    {
LABEL_22:
      int v20 = *(WTF **)(v1 + 136);
      if (!v20) {
        goto LABEL_23;
      }
LABEL_63:
      *(void *)(v1 + 136) = 0;
      *(_DWORD *)(v1 + 144) = 0;
      WTF::fastFree(v20, v14);
      uint64_t v21 = *(WTF **)(v1 + 120);
      if (!v21)
      {
LABEL_24:
        id v22 = *(WebGPU::RenderPipeline **)(v1 + 72);
        *(void *)(v1 + 72) = 0;
        if (!v22) {
          goto LABEL_68;
        }
        goto LABEL_65;
      }
LABEL_64:
      *(void *)(v1 + 120) = 0;
      *(_DWORD *)(v1 + 12++*(_DWORD *)(result + 8) = 0;
      WTF::fastFree(v21, v14);
      id v22 = *(WebGPU::RenderPipeline **)(v1 + 72);
      *(void *)(v1 + 72) = 0;
      if (!v22) {
        goto LABEL_68;
      }
LABEL_65:
      if (*(_DWORD *)v22 == 1)
      {
        WebGPU::RenderPipeline::~RenderPipeline(v22, v14);
        WTF::fastFree(v40, v41);
      }
      else
      {
        --*(_DWORD *)v22;
      }
LABEL_68:
      uint64_t v42 = *(WebGPU::Buffer **)(v1 + 40);
      *(void *)(v1 + 40) = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 1)
        {
          WebGPU::Buffer::~Buffer(v42, v14);
          WTF::fastFree(v43, v44);
        }
        else
        {
          --*(_DWORD *)v42;
        }
      }
      WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)(v1 + 32), v14);

      uint64_t v46 = *(void *)(v1 + 8);
      if (!v46)
      {
        *(void *)(v1 + ++*(_DWORD *)(result + 8) = 0;
        _Unwind_Resume(a1);
      }
      *(void *)(v46 + ++*(_DWORD *)(result + 8) = 0;
      uint64_t v47 = *(unsigned int **)(v1 + 8);
      *(void *)(v1 + ++*(_DWORD *)(result + 8) = 0;
      if (v47)
      {
        if (atomic_fetch_add((atomic_uint *volatile)v47, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v47);
          WTF::fastFree((WTF *)v47, v45);
          _Unwind_Resume(a1);
        }
      }
      _Unwind_Resume(a1);
    }
LABEL_38:
    if (*(_DWORD *)v19 == 1)
    {
      WebGPU::CommandEncoder::~CommandEncoder(v19);
      WTF::fastFree(v30, v31);
      int v20 = *(WTF **)(v1 + 136);
      if (v20) {
        goto LABEL_63;
      }
    }
    else
    {
      --*(_DWORD *)v19;
      int v20 = *(WTF **)(v1 + 136);
      if (v20) {
        goto LABEL_63;
      }
    }
LABEL_23:
    uint64_t v21 = *(WTF **)(v1 + 120);
    if (!v21) {
      goto LABEL_24;
    }
    goto LABEL_64;
  }
LABEL_9:
  if (*(_DWORD *)v6 == 1)
  {
    WebGPU::TextureView::~TextureView(v6, v3);
    WTF::fastFree(v9, v10);
  }
  else
  {
    --*(_DWORD *)v6;
  }
  goto LABEL_12;
}

void wgpuRenderPassEncoderBeginOcclusionQuery(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 152);
  if (*(unsigned char *)(v3 + 4) != 1)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::RenderPassEncoder::beginOcclusionQuery(uint32_t)");
    MEMORY[0x18530AF50](v39, v7);
    uint64_t v8 = *(void *)(v6 + 32);
    uint64_t v9 = 32 * *(unsigned int *)(v6 + 44);
    uint64_t v10 = v8 + v9;
    while (v9)
    {
      int v11 = *(_DWORD *)(v10 - 8);
      v10 -= 32;
      v9 -= 32;
      if (!v11)
      {
        uint64_t v12 = v8 + v9;
        if (!*(unsigned char *)(v12 + 16))
        {
          uint64_t v13 = v39[0];
          v39[0] = 0;
          *(_DWORD *)uint64_t v12 = 1;
          *(void *)(v12 + ++*(_DWORD *)(result + 8) = v13;
          *(unsigned char *)(v12 + 16) = 1;
        }
        goto LABEL_17;
      }
    }
    uint64_t v14 = *(void *)(v6 + 24);
    if (v14)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v14 + 16))(v14, 1, v39);
      uint64_t v15 = *(void *)(v6 + 24);
      *(void *)(v6 + 24) = 0;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
    }
LABEL_17:
    uint64_t v16 = (_DWORD *)v39[0];
    v39[0] = 0;
    if (v16)
    {
      if (*v16 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v16 -= 2;
      }
    }

    uint64_t v17 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;

    return;
  }
  uint64_t v5 = *(void **)(a1 + 16);
  if (!v5 || !*(void *)(v3 + 16))
  {
LABEL_24:
    *(void *)(a1 + 16) = 0;

    return;
  }
  if (!WebGPU::CommandEncoder::encoderIsCurrent(v3, v5))
  {
    uint64_t v5 = *(void **)(a1 + 16);
    goto LABEL_24;
  }
  if (*(unsigned char *)(a1 + 550))
  {
LABEL_6:
    WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, &cfstr_Beginocclusion.isa);
    return;
  }
  unint64_t v18 = (8 * a2);
  uint64_t v19 = *(void *)(a1 + 184);
  if (v19)
  {
    int v20 = *(_DWORD *)(v19 - 8);
    unint64_t v21 = (~(v18 << 32) + v18) ^ ((~(v18 << 32) + v18) >> 22);
    unint64_t v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
    unint64_t v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
    unsigned int v24 = v20 & ((v23 >> 31) ^ v23);
    uint64_t v25 = *(void *)(v19 + 8 * v24);
    if (v25 == v18) {
      goto LABEL_6;
    }
    int v26 = 1;
    while (v25 != -1)
    {
      unsigned int v24 = (v24 + v26) & v20;
      uint64_t v25 = *(void *)(v19 + 8 * v24);
      ++v26;
      if (v25 == v18) {
        goto LABEL_6;
      }
    }
  }
  *(unsigned char *)(a1 + 550) = 1;
  *(void *)(a1 + 96) = v18;
  unint64_t v40 = v18;
  WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::add(v39, (uint64_t *)(a1 + 184), (uint64_t *)&v40);
  unint64_t v27 = *(void *)(a1 + 104);
  if (v27 == -1) {
    return;
  }
  if (v27 <= v18) {
    goto LABEL_6;
  }
  uint64_t v29 = (uint64_t *)(a1 + 192);
  uint64_t v28 = *(void *)(a1 + 192);
  if (v28)
  {
    int v30 = *(_DWORD *)(v28 - 8);
    unint64_t v31 = (~(v18 << 32) + v18) ^ ((~(v18 << 32) + v18) >> 22);
    unint64_t v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
    unint64_t v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
    unsigned int v34 = v30 & ((v33 >> 31) ^ v33);
    uint64_t v35 = *(void *)(v28 + 8 * v34);
    if (v35 == v18) {
      return;
    }
    int v36 = 1;
    while (v35 != -1)
    {
      unsigned int v34 = (v34 + v36) & v30;
      uint64_t v35 = *(void *)(v28 + 8 * v34);
      ++v36;
      if (v35 == v18) {
        return;
      }
    }
  }
  if (*(unsigned char *)(*(void *)(a1 + 152) + 76)) {
    int v37 = 0;
  }
  else {
    int v37 = *(void **)(a1 + 16);
  }
  id v38 = v37;
  [v38 setVisibilityResultMode:2 offset:v18];

  unint64_t v40 = v18;
  WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::add(v39, v29, (uint64_t *)&v40);
}

void sub_18251CF58(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;

  _Unwind_Resume(a1);
}

void sub_18251CF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  if (a11)
  {
    if (*a11 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a11 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_18251CFA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void wgpuRenderPassEncoderDraw(WebGPU::RenderPassEncoder *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v6 = *((void *)a1 + 19);
  if (*(unsigned char *)(v6 + 4) != 1)
  {
    uint64_t v19 = *((void *)a1 + 4);
    int v20 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::RenderPassEncoder::draw(uint32_t, uint32_t, uint32_t, uint32_t)");
    MEMORY[0x18530AF50](&v56, v20);
    uint64_t v21 = *(void *)(v19 + 32);
    uint64_t v22 = 32 * *(unsigned int *)(v19 + 44);
    uint64_t v23 = v21 + v22;
    while (v22)
    {
      int v24 = *(_DWORD *)(v23 - 8);
      v23 -= 32;
      v22 -= 32;
      if (!v24)
      {
        uint64_t v25 = v21 + v22;
        if (!*(unsigned char *)(v25 + 16))
        {
          int v26 = v56;
          uint64_t v56 = 0;
          *(_DWORD *)uint64_t v25 = 1;
          *(void *)(v25 + ++*(_DWORD *)(result + 8) = v26;
          *(unsigned char *)(v25 + 16) = 1;
        }
LABEL_22:
        uint64_t v29 = v56;
        uint64_t v56 = 0;
        if (v29)
        {
          if (*v29 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v29 -= 2;
          }
        }

        int v30 = (void *)*((void *)a1 + 2);
        *((void *)a1 + 2) = 0;

        return;
      }
    }
    uint64_t v27 = *(void *)(v19 + 24);
    if (v27)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v27 + 16))(v27, 1, &v56);
      uint64_t v28 = *(void *)(v19 + 24);
      *(void *)(v19 + 24) = 0;
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
      }
    }
    goto LABEL_22;
  }
  uint64_t v8 = (void *)*((void *)a1 + 2);
  if (!v8 || !*(void *)(v6 + 16))
  {
LABEL_29:
    *((void *)a1 + 2) = 0;

    return;
  }
  if (!WebGPU::CommandEncoder::encoderIsCurrent(v6, v8))
  {
    uint64_t v8 = (void *)*((void *)a1 + 2);
    goto LABEL_29;
  }
  if (!WebGPU::RenderPassEncoder::executePreDrawCommands(a1, 0, v12)) {
    return;
  }
  uint64_t v13 = *((void *)a1 + 9);
  if (!v13)
  {
    unint64_t v31 = @"Missing pipeline before draw command";
LABEL_68:
    WebGPU::RenderPassEncoder::makeInvalid(a1, &v31->isa);
    goto LABEL_69;
  }
  uint64_t v14 = *(unsigned int **)(v13 + 128);
  if (v14)
  {
    uint64_t v15 = *(v14 - 1);
    uint64_t v16 = &v14[8 * v15];
    if (*(v14 - 3))
    {
      uint64_t v17 = v14;
      if (v15)
      {
        uint64_t v18 = 32 * v15;
        uint64_t v17 = v14;
        while (*v17 >= 0xFFFFFFFE)
        {
          v17 += 8;
          v18 -= 32;
          if (!v18)
          {
            uint64_t v17 = v16;
            break;
          }
        }
      }
    }
    else
    {
      uint64_t v17 = &v14[8 * v15];
      uint64_t v16 = v17;
    }
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v16 = 0;
  }
  if (v14) {
    v14 += 8 * *(v14 - 1);
  }
  if (v14 == v17)
  {
LABEL_69:
    if (a2 - 1 >= ~a4) {
      return;
    }
    goto LABEL_70;
  }
  BOOL v32 = __CFADD__(a5, a3);
  BOOL v33 = __CFADD__(a4, a2);
  while (1)
  {
    unsigned int v34 = v17[6];
    if (v34 == 1) {
      break;
    }
    if (!v34)
    {
      unsigned int v35 = a4 + a2;
      if (v33) {
        goto LABEL_67;
      }
      goto LABEL_50;
    }
LABEL_62:
    unsigned int v52 = v17 + 8;
    uint64_t v17 = v16;
    if (v52 != v16)
    {
      uint64_t v17 = v52;
      while (*v17 >= 0xFFFFFFFE)
      {
        v17 += 8;
        if (v17 == v16)
        {
          uint64_t v17 = v16;
          break;
        }
      }
    }
    if (v17 == v14) {
      goto LABEL_69;
    }
  }
  unsigned int v35 = a5 + a3;
  if (v32)
  {
LABEL_67:
    unint64_t v31 = @"StrideCount invalid";
    goto LABEL_68;
  }
LABEL_50:
  if (!v35) {
    goto LABEL_62;
  }
  uint64_t v36 = *((void *)a1 + 49);
  if (!v36) {
    goto LABEL_79;
  }
  unsigned int v37 = *(_DWORD *)(v36 - 8);
  uint64_t v38 = *v17;
  unsigned int v39 = 9 * ((v38 + ~(v38 << 15)) ^ ((v38 + ~(v38 << 15)) >> 10));
  unsigned int v40 = (v39 ^ (v39 >> 6)) + ~((v39 ^ (v39 >> 6)) << 11);
  uint64_t v41 = (v40 ^ HIWORD(v40)) & v37;
  int v42 = *(_DWORD *)(v36 + 32 * v41);
  if (v42 != v38)
  {
    int v43 = 1;
    while (v42 != -1)
    {
      uint64_t v41 = (v41 + v43) & v37;
      int v42 = *(_DWORD *)(v36 + 32 * v41);
      ++v43;
      if (v42 == v38) {
        goto LABEL_58;
      }
    }
    uint64_t v41 = *(unsigned int *)(v36 - 4);
  }
LABEL_58:
  if (v41 == *(_DWORD *)(v36 - 4) || (v44 = v35, v45 = v35 - 1, unint64_t v46 = *((void *)v17 + 1), !is_mul_ok(v45, v46)))
  {
LABEL_79:
    __break(0xC471u);
    JUMPOUT(0x18251D43CLL);
  }
  unint64_t v47 = v45 * v46;
  unint64_t v48 = *(void *)(v36 + 32 * v41 + 24);
  uint64_t v49 = *((void *)v17 + 2);
  BOOL v50 = __CFADD__(v47, v49);
  unint64_t v51 = v47 + v49;
  if (!v50 && v51 <= v48) {
    goto LABEL_62;
  }
  objc_msgSend(NSString, "stringWithFormat:", @"Buffer[%d] fails: (strideCount(%llu) - 1) * bufferData.stride(%llu) + bufferData.lastStride(%llu) > bufferSize(%llu)", v38, v44, v46, *((void *)v17 + 2), v48);
  int v54 = (NSString *)objc_claimAutoreleasedReturnValue();
  WebGPU::RenderPassEncoder::makeInvalid(a1, v54);

  if (a2 - 1 >= ~a4) {
    return;
  }
LABEL_70:
  if (a3 - 1 < ~a5)
  {
    if (*(unsigned char *)(*((void *)a1 + 19) + 76)) {
      uint64_t v53 = 0;
    }
    else {
      uint64_t v53 = (void *)*((void *)a1 + 2);
    }
    id v55 = v53;
    [v55 drawPrimitives:*((void *)a1 + 11) vertexStart:a4 vertexCount:a2 instanceCount:a3 baseInstance:a5];
  }
}

void sub_18251D448(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18251D458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id a15)
{
  _Unwind_Resume(a1);
}

void sub_18251D46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _DWORD *a16)
{
  if (a16)
  {
    if (*a16 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a16 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void wgpuRenderPassEncoderDrawIndexed(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, unsigned int a6)
{
  uint64_t v7 = *(void *)(a1 + 152);
  if (*(unsigned char *)(v7 + 4) != 1)
  {
    uint64_t v20 = *(void *)(a1 + 32);
    uint64_t v21 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::RenderPassEncoder::drawIndexed(uint32_t, uint32_t, uint32_t, int32_t, uint32_t)");
    MEMORY[0x18530AF50](&v69, v21);
    uint64_t v22 = *(void *)(v20 + 32);
    uint64_t v23 = 32 * *(unsigned int *)(v20 + 44);
    uint64_t v24 = v22 + v23;
    while (v23)
    {
      int v25 = *(_DWORD *)(v24 - 8);
      v24 -= 32;
      v23 -= 32;
      if (!v25)
      {
        uint64_t v26 = v22 + v23;
        if (!*(unsigned char *)(v26 + 16))
        {
          uint64_t v27 = v69;
          double v69 = 0;
          *(_DWORD *)uint64_t v26 = 1;
          *(void *)(v26 + ++*(_DWORD *)(result + 8) = v27;
          *(unsigned char *)(v26 + 16) = 1;
        }
LABEL_22:
        int v30 = v69;
        double v69 = 0;
        if (v30)
        {
          if (*v30 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v30 -= 2;
          }
        }

        unint64_t v31 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = 0;

        return;
      }
    }
    uint64_t v28 = *(void *)(v20 + 24);
    if (v28)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v28 + 16))(v28, 1, &v69);
      uint64_t v29 = *(void *)(v20 + 24);
      *(void *)(v20 + 24) = 0;
      if (v29) {
        (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
      }
    }
    goto LABEL_22;
  }
  uint64_t v9 = *(void **)(a1 + 16);
  if (!v9 || !*(void *)(v7 + 16))
  {
LABEL_29:
    *(void *)(a1 + 16) = 0;

    return;
  }
  if (!WebGPU::CommandEncoder::encoderIsCurrent(v7, v9))
  {
    uint64_t v9 = *(void **)(a1 + 16);
    goto LABEL_29;
  }
  uint64_t v14 = a4;
  uint64_t v15 = *(void *)(a1 + 48);
  uint64_t v16 = *(void *)(a1 + 56);
  if (v15) {
    char v17 = 2;
  }
  else {
    char v17 = 1;
  }
  unint64_t v18 = v16 + ((unint64_t)a4 << v17);
  if (__CFADD__(v16, v14 << v17))
  {
    uint64_t v19 = @"Invalid offset to drawIndexed";
LABEL_11:
    WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, &v19->isa);
    return;
  }
  if (!*(void *)(a1 + 40))
  {
    unsigned int v34 = @"Index buffer is not set";
LABEL_42:
    id v68 = v34;
    WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, v68);
    goto LABEL_43;
  }
  uint64_t v32 = *(void *)(a1 + 72);
  if (!v32)
  {
    unsigned int v34 = @"Pipeline is not set";
    goto LABEL_42;
  }
  int v33 = *(_DWORD *)(v32 + 232);
  if ((v33 == 4 || v33 == 2) && v15 != (*(_DWORD *)(v32 + 236) != 1))
  {
    unsigned int v34 = @"Primitive topology mismiatch with render pipeline";
    goto LABEL_42;
  }
  if ((v14 + (unint64_t)a2) << v17 > *(void *)(a1 + 64))
  {
    uint64_t v19 = @"Values to drawIndexed are invalid";
    goto LABEL_11;
  }
  uint64_t v36 = *(void *)(a1 + 72);
  if (!v36 || !*(void *)(a1 + 40))
  {
    uint64_t v19 = @"Missing pipeline before draw command";
    goto LABEL_11;
  }
  uint64_t v66 = a6;
  uint64_t v67 = a3;
  if (!(a6 + (unint64_t)a3)) {
    goto LABEL_86;
  }
  unsigned int v37 = *(unsigned int **)(v36 + 128);
  if (v37)
  {
    uint64_t v38 = *(v37 - 1);
    unsigned int v39 = &v37[8 * v38];
    if (*(v37 - 3))
    {
      unsigned int v40 = v37;
      if (v38)
      {
        uint64_t v41 = 32 * v38;
        unsigned int v40 = v37;
        while (*v40 >= 0xFFFFFFFE)
        {
          v40 += 8;
          v41 -= 32;
          if (!v41)
          {
            unsigned int v40 = v39;
            break;
          }
        }
      }
    }
    else
    {
      unsigned int v40 = &v37[8 * v38];
      unsigned int v39 = v40;
    }
  }
  else
  {
    unsigned int v40 = 0;
    unsigned int v39 = 0;
  }
  if (v37) {
    v37 += 8 * *(v37 - 1);
  }
  if (v37 == v40)
  {
LABEL_86:
    MTLIndexType v56 = *(void *)(a1 + 48);
    unint64_t v57 = WebGPU::RenderPassEncoder::computeMininumVertexInstanceCount((WebGPU::RenderPassEncoder *)a1);
    int valid = WebGPU::RenderPassEncoder::clampIndexBufferToValidValues(a2, a3, a5, a6, v56, v18, *(void *)(a1 + 40), v57, SHIDWORD(v57), *(id *)(a1 + 16), *(WebGPU::Device **)(a1 + 32), *(_DWORD *)(a1 + 216), *(void *)(a1 + 88));
    if (!WebGPU::RenderPassEncoder::executePreDrawCommands((WebGPU::RenderPassEncoder *)a1, 0, v59)) {
      return;
    }
    if (!a2) {
      return;
    }
    if (!a3) {
      return;
    }
    uint64_t v60 = *(void *)(a1 + 40);
    if (*(unsigned char *)(v60 + 52) == 4) {
      return;
    }
    uint64_t v65 = (NSString *)*(id *)(v60 + 16);
    if (valid)
    {
      if (valid != 3 && valid != 1) {
        goto LABEL_103;
      }
      id v61 = *(id *)(*(void *)(a1 + 40) + 32);
      if (*(unsigned char *)(*(void *)(a1 + 152) + 76)) {
        unsigned int v62 = 0;
      }
      else {
        unsigned int v62 = *(void **)(a1 + 16);
      }
      id v64 = v62;
      [v64 drawIndexedPrimitives:*(void *)(a1 + 88) indexType:*(void *)(a1 + 48) indexBuffer:v65 indexBufferOffset:0 indirectBuffer:v61 indirectBufferOffset:0];
    }
    else
    {
      if (*(unsigned char *)(*(void *)(a1 + 152) + 76)) {
        uint64_t v63 = 0;
      }
      else {
        uint64_t v63 = *(void **)(a1 + 16);
      }
      id v61 = v63;
      [v61 drawIndexedPrimitives:*(void *)(a1 + 88) indexCount:a2 indexType:*(void *)(a1 + 48) indexBuffer:v65 indexBufferOffset:v18 instanceCount:v67 baseVertex:a5 baseInstance:v66];
    }

LABEL_103:
    unsigned int v35 = v65;
    goto LABEL_44;
  }
  uint64_t v42 = *(void *)(a1 + 392);
  if (!v42)
  {
    do
    {
      id v55 = v40 + 8;
      unsigned int v40 = v39;
      if (v55 != v39)
      {
        unsigned int v40 = v55;
        do
        {
          if (*v40 < 0xFFFFFFFE) {
            goto LABEL_80;
          }
          v40 += 8;
        }
        while (v40 != v39);
        unsigned int v40 = v39;
      }
LABEL_80:
      ;
    }
    while (v40 != v37);
    goto LABEL_86;
  }
  unint64_t v43 = a6 + (unint64_t)a3 - 1;
  unsigned int v44 = *(_DWORD *)(v42 - 8);
  while (1)
  {
    uint64_t v45 = *v40;
    unsigned int v46 = 9 * ((v45 + ~(v45 << 15)) ^ ((v45 + ~(v45 << 15)) >> 10));
    unsigned int v47 = (v46 ^ (v46 >> 6)) + ~((v46 ^ (v46 >> 6)) << 11);
    uint64_t v48 = (v47 ^ HIWORD(v47)) & v44;
    int v49 = *(_DWORD *)(v42 + 32 * v48);
    if (v49 == v45) {
      break;
    }
    int v50 = 1;
    while (v49 != -1)
    {
      uint64_t v48 = (v48 + v50) & v44;
      int v49 = *(_DWORD *)(v42 + 32 * v48);
      ++v50;
      if (v49 == v45) {
        goto LABEL_70;
      }
    }
LABEL_75:
    int v54 = v40 + 8;
    unsigned int v40 = v39;
    if (v54 != v39)
    {
      unsigned int v40 = v54;
      while (*v40 >= 0xFFFFFFFE)
      {
        v40 += 8;
        if (v40 == v39)
        {
          unsigned int v40 = v39;
          break;
        }
      }
    }
    if (v40 == v37) {
      goto LABEL_86;
    }
  }
LABEL_70:
  if (v48 == *(_DWORD *)(v42 - 4) || v40[6] != 1) {
    goto LABEL_75;
  }
  unint64_t v51 = *((void *)v40 + 1);
  if (!is_mul_ok(v43, v51)) {
    return;
  }
  uint64_t v52 = *((void *)v40 + 2);
  if (__CFADD__(v43 * v51, v52)) {
    return;
  }
  unint64_t v53 = *(void *)(v42 + 32 * v48 + 24);
  if (v43 * v51 + v52 <= v53) {
    goto LABEL_75;
  }
  objc_msgSend(NSString, "stringWithFormat:", @"Buffer[%d] fails: (strideCount(%lu) - 1) * stride(%llu) + lastStride(%llu) > bufferSize(%llu) / mtlBufferSize(%lu)", v45, a6 + (unint64_t)a3, v51, v52, v53, objc_msgSend(*(id *)(v42 + 32 * v48 + 8), "length"));
  id v68 = (NSString *)objc_claimAutoreleasedReturnValue();
  WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, v68);
LABEL_43:
  unsigned int v35 = v68;
LABEL_44:
}

void sub_18251DB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  _Unwind_Resume(a1);
}

void sub_18251DB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19)
{
  _Unwind_Resume(a1);
}

void sub_18251DB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  _Unwind_Resume(a1);
}

void sub_18251DB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19)
{
  _Unwind_Resume(a1);
}

void sub_18251DB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _DWORD *a20)
{
  if (a20)
  {
    if (*a20 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a20 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void wgpuRenderPassEncoderDrawIndexedIndirect(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 152);
  if (*(unsigned char *)(v4 + 4) != 1)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    int v11 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::RenderPassEncoder::drawIndexedIndirect(Buffer &, uint64_t)");
    MEMORY[0x18530AF50](v31, v11);
    uint64_t v12 = *(void *)(v10 + 32);
    uint64_t v13 = 32 * *(unsigned int *)(v10 + 44);
    uint64_t v14 = v12 + v13;
    while (v13)
    {
      int v15 = *(_DWORD *)(v14 - 8);
      v14 -= 32;
      v13 -= 32;
      if (!v15)
      {
        uint64_t v16 = v12 + v13;
        if (!*(unsigned char *)(v16 + 16))
        {
          id v17 = v31[0];
          v31[0] = 0;
          *(_DWORD *)uint64_t v16 = 1;
          *(void *)(v16 + ++*(_DWORD *)(result + 8) = v17;
          *(unsigned char *)(v16 + 16) = 1;
        }
        goto LABEL_21;
      }
    }
    uint64_t v18 = *(void *)(v10 + 24);
    if (v18)
    {
      (*(void (**)(uint64_t, uint64_t, id *))(*(void *)v18 + 16))(v18, 1, v31);
      uint64_t v19 = *(void *)(v10 + 24);
      *(void *)(v10 + 24) = 0;
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      }
    }
LABEL_21:
    uint64_t v20 = v31[0];
    v31[0] = 0;
    if (v20)
    {
      if (*v20 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v20 -= 2;
      }
    }

    uint64_t v21 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;

    return;
  }
  uint64_t v6 = *(void **)(a1 + 16);
  if (!v6 || !*(void *)(v4 + 16))
  {
LABEL_28:
    *(void *)(a1 + 16) = 0;

    return;
  }
  if (!WebGPU::CommandEncoder::encoderIsCurrent(v4, v6))
  {
    uint64_t v6 = *(void **)(a1 + 16);
    goto LABEL_28;
  }
  if (*(unsigned char *)(a2 + 52) != 4 && !*(void *)(a2 + 16)
    || (uint64_t v8 = *(void *)(a2 + 280), !*(void *)(v8 + 8))
    || v8 != *(void *)(a1 + 32))
  {
    uint64_t v9 = @"drawIndexedIndirect: buffer was invalid";
LABEL_10:
    WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, &v9->isa);
    return;
  }
  WebGPU::Buffer::setCommandEncoder((WebGPU::Buffer *)a2, *(WebGPU::CommandEncoder **)(a1 + 152));
  if (*(unsigned char *)(a2 + 52) == 4) {
    return;
  }
  uint64_t v22 = *(void *)(a1 + 40);
  if (!v22)
  {
    uint64_t v9 = @"drawIndexedIndirect: index buffer is nil";
    goto LABEL_10;
  }
  id v30 = *(id *)(v22 + 16);
  if ([v30 length])
  {
    if ((a3 & 3) != 0
      || (*(_DWORD *)(a2 + 48) & 0x100) == 0
      || a3 >= 0xFFFFFFFFFFFFFFECLL
      || *(void *)(a2 + 40) < a3 + 20)
    {
      WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, &cfstr_Drawindexedind_0.isa);
    }
    else
    {
      unint64_t v23 = WebGPU::RenderPassEncoder::computeMininumVertexInstanceCount((WebGPU::RenderPassEncoder *)a1);
      LODWORD(v29) = *(_DWORD *)(a1 + 216);
      WebGPU::RenderPassEncoder::clampIndirectIndexBufferToValidValues(*(void *)(a1 + 40), a2, *(MTLIndexType *)(a1 + 48), *(void *)(a1 + 56), a3, v23, SHIDWORD(v23), *(void *)(a1 + 88), v31, *(WebGPU::Device **)(a1 + 32), v29, *(void **)(a1 + 16), &v32);
      id v24 = v31[0];
      id v25 = v31[1];
      if (WebGPU::RenderPassEncoder::executePreDrawCommands((WebGPU::RenderPassEncoder *)a1, a2, v26)
        && *(unsigned char *)(*(void *)(a1 + 40) + 52) != 4
        && (unint64_t)[v24 length] >= 0x14)
      {
        if (*(unsigned char *)(*(void *)(a1 + 152) + 76)) {
          uint64_t v27 = 0;
        }
        else {
          uint64_t v27 = *(void **)(a1 + 16);
        }
        id v28 = v27;
        [v28 drawIndexedPrimitives:*(void *)(a1 + 88) indexType:*(void *)(a1 + 48) indexBuffer:v30 indexBufferOffset:*(void *)(a1 + 56) indirectBuffer:v24 indirectBufferOffset:v25];
      }
    }
  }
}

void sub_18251DF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
  _Unwind_Resume(a1);
}

void sub_18251DFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
  _Unwind_Resume(a1);
}

void sub_18251DFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  if (a14)
  {
    if (*a14 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a14 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_18251DFF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void wgpuRenderPassEncoderDrawIndirect(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 152);
  if (*(unsigned char *)(v4 + 4) != 1)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    int v11 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::RenderPassEncoder::drawIndirect(Buffer &, uint64_t)");
    MEMORY[0x18530AF50](&v28, v11);
    uint64_t v12 = *(void *)(v10 + 32);
    uint64_t v13 = 32 * *(unsigned int *)(v10 + 44);
    uint64_t v14 = v12 + v13;
    while (v13)
    {
      int v15 = *(_DWORD *)(v14 - 8);
      v14 -= 32;
      v13 -= 32;
      if (!v15)
      {
        uint64_t v16 = v12 + v13;
        if (!*(unsigned char *)(v16 + 16))
        {
          id v17 = v28;
          id v28 = 0;
          *(_DWORD *)uint64_t v16 = 1;
          *(void *)(v16 + ++*(_DWORD *)(result + 8) = v17;
          *(unsigned char *)(v16 + 16) = 1;
        }
        goto LABEL_21;
      }
    }
    uint64_t v18 = *(void *)(v10 + 24);
    if (v18)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v18 + 16))(v18, 1, &v28);
      uint64_t v19 = *(void *)(v10 + 24);
      *(void *)(v10 + 24) = 0;
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      }
    }
LABEL_21:
    uint64_t v20 = v28;
    id v28 = 0;
    if (v20)
    {
      if (*v20 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v20 -= 2;
      }
    }

    uint64_t v21 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;

    return;
  }
  uint64_t v6 = *(void **)(a1 + 16);
  if (!v6 || !*(void *)(v4 + 16))
  {
LABEL_28:
    *(void *)(a1 + 16) = 0;

    return;
  }
  if (!WebGPU::CommandEncoder::encoderIsCurrent(v4, v6))
  {
    uint64_t v6 = *(void **)(a1 + 16);
    goto LABEL_28;
  }
  if (*(unsigned char *)(a2 + 52) != 4 && !*(void *)(a2 + 16)
    || (uint64_t v8 = *(void *)(a2 + 280), !*(void *)(v8 + 8))
    || v8 != *(void *)(a1 + 32))
  {
    uint64_t v9 = @"drawIndirect: buffer was invalid";
LABEL_10:
    WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, &v9->isa);
    return;
  }
  WebGPU::Buffer::setCommandEncoder((WebGPU::Buffer *)a2, *(WebGPU::CommandEncoder **)(a1 + 152));
  if (*(unsigned char *)(a2 + 52) == 4) {
    return;
  }
  if ((a3 & 3) != 0
    || (*(_DWORD *)(a2 + 48) & 0x100) == 0
    || a3 >= 0xFFFFFFFFFFFFFFF0
    || *(void *)(a2 + 40) < a3 + 16)
  {
    uint64_t v9 = @"drawIndirect: validation failed";
    goto LABEL_10;
  }
  unint64_t v22 = WebGPU::RenderPassEncoder::computeMininumVertexInstanceCount((WebGPU::RenderPassEncoder *)a1);
  char v27 = 0;
  unint64_t v23 = WebGPU::RenderPassEncoder::clampIndirectBufferToValidValues(a2, a3, v22, SHIDWORD(v22), *(WebGPU::Device **)(a1 + 32), *(_DWORD *)(a1 + 216), *(void **)(a1 + 16), &v27);
  if (WebGPU::RenderPassEncoder::executePreDrawCommands((WebGPU::RenderPassEncoder *)a1, a2, v24)
    && (unint64_t)[v23 length] >= 0x10
    && *(unsigned char *)(a2 + 52) != 4)
  {
    if (*(unsigned char *)(*(void *)(a1 + 152) + 76)) {
      id v25 = 0;
    }
    else {
      id v25 = *(void **)(a1 + 16);
    }
    id v26 = v25;
    [v26 drawPrimitives:*(void *)(a1 + 88) indirectBuffer:v23 indirectBufferOffset:0];
  }
}

void sub_18251E304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18251E318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18251E328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  if (a12)
  {
    if (*a12 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a12 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_18251E364(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void wgpuRenderPassEncoderEndOcclusionQuery(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 152);
  if (*(unsigned char *)(v2 + 4) == 1)
  {
    uint64_t v3 = *(void **)(a1 + 16);
    if (v3 && *(void *)(v2 + 16))
    {
      if (WebGPU::CommandEncoder::encoderIsCurrent(v2, v3))
      {
        if (*(unsigned char *)(a1 + 550))
        {
          *(unsigned char *)(a1 + 550) = 0;
          if (*(void *)(a1 + 104) != -1)
          {
            if (*(unsigned char *)(*(void *)(a1 + 152) + 76)) {
              uint64_t v4 = 0;
            }
            else {
              uint64_t v4 = *(void **)(a1 + 16);
            }
            id v17 = v4;
            [v17 setVisibilityResultMode:0 offset:*(void *)(a1 + 96)];
          }
        }
        else
        {
          WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, &cfstr_Endocclusionqu.isa);
        }
        return;
      }
      uint64_t v3 = *(void **)(a1 + 16);
    }
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::RenderPassEncoder::endOcclusionQuery()");
    MEMORY[0x18530AF50](&v18, v6);
    uint64_t v7 = *(void *)(v5 + 32);
    uint64_t v8 = 32 * *(unsigned int *)(v5 + 44);
    uint64_t v9 = v7 + v8;
    while (v8)
    {
      int v10 = *(_DWORD *)(v9 - 8);
      v9 -= 32;
      v8 -= 32;
      if (!v10)
      {
        uint64_t v11 = v7 + v8;
        if (!*(unsigned char *)(v11 + 16))
        {
          uint64_t v12 = v18;
          uint64_t v18 = 0;
          *(_DWORD *)uint64_t v11 = 1;
          *(void *)(v11 + ++*(_DWORD *)(result + 8) = v12;
          *(unsigned char *)(v11 + 16) = 1;
        }
        goto LABEL_17;
      }
    }
    uint64_t v13 = *(void *)(v5 + 24);
    if (v13)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v13 + 16))(v13, 1, &v18);
      uint64_t v14 = *(void *)(v5 + 24);
      *(void *)(v5 + 24) = 0;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
    }
LABEL_17:
    int v15 = v18;
    uint64_t v18 = 0;
    if (v15)
    {
      if (*v15 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v15 -= 2;
      }
    }

    uint64_t v16 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
  }
}

void sub_18251E5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  _Unwind_Resume(a1);
}

void sub_18251E5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  if (a12)
  {
    if (*a12 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a12 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_18251E600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void wgpuRenderPassEncoderEnd(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 551))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as pass is already ended", "void WebGPU::RenderPassEncoder::endPass()");
    MEMORY[0x18530AF50](v46, v3);
    uint64_t v4 = *(void *)(v2 + 32);
    uint64_t v5 = 32 * *(unsigned int *)(v2 + 44);
    uint64_t v6 = v4 + v5;
    while (v5)
    {
      int v7 = *(_DWORD *)(v6 - 8);
      v6 -= 32;
      v5 -= 32;
      if (!v7)
      {
        uint64_t v8 = v4 + v5;
        if (!*(unsigned char *)(v8 + 16))
        {
          uint64_t v9 = v46[0];
          v46[0] = 0;
          *(_DWORD *)uint64_t v8 = 1;
          *(void *)(v8 + ++*(_DWORD *)(result + 8) = v9;
          *(unsigned char *)(v8 + 16) = 1;
        }
        goto LABEL_18;
      }
    }
    uint64_t v16 = *(void *)(v2 + 24);
    if (v16)
    {
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v16 + 16))(v16, 1, v46);
      uint64_t v17 = *(void *)(v2 + 24);
      *(void *)(v2 + 24) = 0;
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
    }
LABEL_18:
    uint64_t v18 = (_DWORD *)v46[0];
    v46[0] = 0;
    if (v18)
    {
      if (*v18 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v18 -= 2;
      }
    }
  }
  else
  {
    *(unsigned char *)(a1 + 551) = 1;
    uint64_t v10 = *(void *)(a1 + 152);
    if (*(unsigned char *)(v10 + 4) == 1)
    {
      uint64_t v11 = *(void **)(a1 + 16);
      if (v11
        && *(void *)(v10 + 16)
        && (IsCurrent = WebGPU::CommandEncoder::encoderIsCurrent(v10, v11), uint64_t v11 = *(void **)(a1 + 16), IsCurrent))
      {
        if (*(void *)(a1 + 24) || *(unsigned char *)(a1 + 550) || !v11)
        {
          BOOL v13 = v11 != 0;
          WebGPU::CommandEncoder::endEncoding(*(void *)(a1 + 152), v11);
          uint64_t v14 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = 0;

          int v15 = *(WebGPU::CommandEncoder **)(a1 + 152);
          [NSString stringWithFormat:@"RenderPassEncoder.endPass failure, m_debugGroupStackSize = %llu, m_occlusionQueryActive = %d, isValid = %d, error = %@", *(void *)(a1 + 24), *(unsigned __int8 *)(a1 + 550), v13, *(void *)(a1 + 408)];
          uint64_t v45 = (NSString *)objc_claimAutoreleasedReturnValue();
          WebGPU::CommandEncoder::makeInvalid(v15, v45);
        }
        else
        {
          v46[0] = MEMORY[0x1E4F143A8];
          v46[1] = 3221225472;
          _DWORD v46[2] = ___ZN6WebGPU17RenderPassEncoder7endPassEv_block_invoke;
          v46[3] = &__block_descriptor_40_e5_v8__0l;
          v46[4] = a1;
          unint64_t v31 = (void (**)(void))MEMORY[0x18530B4C0](v46);
          if ([*(id *)(a1 + 224) count]
            || *(void *)(a1 + 232) && (*(unsigned char *)(a1 + 548) || *(unsigned char *)(a1 + 549)))
          {
            v31[2](v31);
            WebGPU::CommandEncoder::runClearEncoder(*(void *)(a1 + 152), *(void **)(a1 + 224), *(void **)(a1 + 232), *(unsigned __int8 *)(a1 + 548), *(unsigned __int8 *)(a1 + 549), *(unsigned int *)(a1 + 528), 0, *(float *)(a1 + 504));
          }
          else
          {
            v31[2](v31);
          }
          char v32 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = 0;

          uint64_t v33 = *(void *)(a1 + 152);
          if (*(unsigned char *)(v33 + 4) != 2)
          {
            *(unsigned char *)(v33 + 4) = 0;
            unsigned int v34 = *(void **)(v33 + 40);
            *(void *)(v33 + 40) = 0;

            WebGPU::Queue::setEncoderForBuffer(*(void *)(*(void *)(v33 + 80) + 16), *(void **)(v33 + 16), 0);
          }
          uint64_t v35 = *(void *)(a1 + 184);
          if (v35 && *(_DWORD *)(v35 - 12) && *(void *)(a1 + 104) != -1)
          {
            unsigned int v37 = WebGPU::CommandEncoder::ensureBlitCommandEncoder(*(id **)(a1 + 152));
            uint64_t v38 = *(void *)(a1 + 184);
            if (v38)
            {
              uint64_t v39 = *(unsigned int *)(v38 - 4);
              unsigned int v40 = (void *)(v38 + 8 * v39);
              if (*(_DWORD *)(v38 - 12))
              {
                uint64_t v41 = *(void **)(a1 + 184);
                if (v39)
                {
                  uint64_t v42 = 8 * v39;
                  uint64_t v41 = *(void **)(a1 + 184);
                  while (*v41 >= 0xFFFFFFFFFFFFFFFELL)
                  {
                    ++v41;
                    v42 -= 8;
                    if (!v42)
                    {
                      uint64_t v41 = v40;
                      break;
                    }
                  }
                }
              }
              else
              {
                uint64_t v41 = (void *)(v38 + 8 * v39);
                unsigned int v40 = v41;
              }
            }
            else
            {
              uint64_t v41 = 0;
              unsigned int v40 = 0;
            }
            if (v38) {
              unint64_t v43 = (void *)(v38 + 8 * *(unsigned int *)(v38 - 4));
            }
            else {
              unint64_t v43 = 0;
            }
            if (v43 != v41)
            {
              do
              {
                objc_msgSend(v37, "fillBuffer:range:value:", *(void *)(a1 + 200), *v41, 8, 0);
                unsigned int v44 = v41 + 1;
                uint64_t v41 = v40;
                if (v44 != v40)
                {
                  uint64_t v41 = v44;
                  while (*v41 >= 0xFFFFFFFFFFFFFFFELL)
                  {
                    if (++v41 == v40)
                    {
                      uint64_t v41 = v40;
                      break;
                    }
                  }
                }
              }
              while (v41 != v43);
              uint64_t v38 = *(void *)(a1 + 184);
            }
            if (v38)
            {
              *(void *)(a1 + 184) = 0;
              WTF::fastFree((WTF *)(v38 - 16), v36);
            }
            WebGPU::CommandEncoder::finalizeBlitCommandEncoder(*(id **)(a1 + 152));
          }
        }
      }
      else
      {
        *(void *)(a1 + 16) = 0;
      }
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 32);
      uint64_t v20 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::RenderPassEncoder::endPass()");
      MEMORY[0x18530AF50](v46, v20);
      uint64_t v21 = *(void *)(v19 + 32);
      uint64_t v22 = 32 * *(unsigned int *)(v19 + 44);
      uint64_t v23 = v21 + v22;
      while (v22)
      {
        int v24 = *(_DWORD *)(v23 - 8);
        v23 -= 32;
        v22 -= 32;
        if (!v24)
        {
          uint64_t v25 = v21 + v22;
          if (!*(unsigned char *)(v25 + 16))
          {
            uint64_t v26 = v46[0];
            v46[0] = 0;
            *(_DWORD *)uint64_t v25 = 1;
            *(void *)(v25 + ++*(_DWORD *)(result + 8) = v26;
            *(unsigned char *)(v25 + 16) = 1;
          }
          goto LABEL_34;
        }
      }
      uint64_t v27 = *(void *)(v19 + 24);
      if (v27)
      {
        (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v27 + 16))(v27, 1, v46);
        uint64_t v28 = *(void *)(v19 + 24);
        *(void *)(v19 + 24) = 0;
        if (v28) {
          (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
        }
      }
LABEL_34:
      unint64_t v29 = (_DWORD *)v46[0];
      v46[0] = 0;
      if (v29)
      {
        if (*v29 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v29 -= 2;
        }
      }

      id v30 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = 0;
    }
  }
}

void sub_18251EBC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13, uint64_t a14)
{
  _Unwind_Resume(a1);
}

void sub_18251EC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  if (a14)
  {
    if (*a14 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a14 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_18251EC84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void wgpuRenderPassEncoderExecuteBundles(uint64_t a1, unint64_t a2, uint64_t a3)
{
  v165[16] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    LODWORD(v6) = 0;
    LODWORD(v7) = 0;
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v11 = *(void *)(a3 + 8 * v8);
      if (v7 == v6)
      {
        unint64_t v12 = v7 + ((unint64_t)v7 >> 2);
        if (v12 >= 0x10) {
          unint64_t v13 = v12 + 1;
        }
        else {
          unint64_t v13 = 16;
        }
        if (v13 <= (unint64_t)v7 + 1) {
          unint64_t v6 = v7 + 1;
        }
        else {
          unint64_t v6 = v13;
        }
        if (v6 >> 29)
        {
          __break(0xC471u);
LABEL_211:
          JUMPOUT(0x18251FA7CLL);
        }
        uint64_t v10 = (char *)WTF::fastMalloc((WTF *)(8 * v6));
        memcpy(v10, v9, 8 * v7);
        if (v9)
        {
          if (v10 == v9)
          {
            LODWORD(v6) = 0;
            uint64_t v10 = 0;
          }
          WTF::fastFree((WTF *)v9, v14);
        }
      }
      else
      {
        uint64_t v10 = v9;
      }
      *(void *)&v10[8 * v7] = v11;
      unint64_t v7 = (v7 + 1);
      unint64_t v8 = v7;
      uint64_t v9 = v10;
      if (v7 >= a2) {
        goto LABEL_18;
      }
    }
  }
  LODWORD(v7) = 0;
  uint64_t v10 = 0;
LABEL_18:
  uint64_t v142 = (WTF *)v10;
  uint64_t v15 = *(void *)(a1 + 152);
  if (*(unsigned char *)(v15 + 4) != 1)
  {
    uint64_t v27 = *(void *)(a1 + 32);
    uint64_t v28 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::RenderPassEncoder::executeBundles(Vector<std::reference_wrapper<RenderBundle>> &&)");
    MEMORY[0x18530AF50](v165, v28);
    uint64_t v29 = *(void *)(v27 + 32);
    uint64_t v30 = 32 * *(unsigned int *)(v27 + 44);
    uint64_t v31 = v29 + v30;
    while (v30)
    {
      int v32 = *(_DWORD *)(v31 - 8);
      v31 -= 32;
      v30 -= 32;
      if (!v32)
      {
        uint64_t v33 = v29 + v30;
        if (!*(unsigned char *)(v33 + 16))
        {
          uint64_t v34 = v165[0];
          v165[0] = 0;
          *(_DWORD *)uint64_t v33 = 1;
          *(void *)(v33 + ++*(_DWORD *)(result + 8) = v34;
          *(unsigned char *)(v33 + 16) = 1;
        }
LABEL_36:
        unsigned int v37 = (_DWORD *)v165[0];
        v165[0] = 0;
        if (v37)
        {
          if (*v37 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v37 -= 2;
          }
        }

        uint64_t v38 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = 0;

        goto LABEL_41;
      }
    }
    uint64_t v35 = *(void *)(v27 + 24);
    if (v35)
    {
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v35 + 16))(v35, 1, v165);
      uint64_t v36 = *(void *)(v27 + 24);
      *(void *)(v27 + 24) = 0;
      if (v36) {
        (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
      }
    }
    goto LABEL_36;
  }
  uint64_t v16 = *(void **)(a1 + 16);
  if (!v16 || !*(void *)(v15 + 16))
  {
LABEL_46:
    *(void *)(a1 + 16) = 0;

    if (v10) {
      goto LABEL_42;
    }
    return;
  }
  if (!WebGPU::CommandEncoder::encoderIsCurrent(v15, v16))
  {
    uint64_t v16 = *(void **)(a1 + 16);
    goto LABEL_46;
  }
  uint64_t v17 = (uint64_t *)(a1 + 184);
  uint64_t v18 = *(void *)(a1 + 184);
  if (v18)
  {
    uint64_t v19 = *(void *)(a1 + 96);
    unsigned int v20 = *(_DWORD *)(v18 - 8);
    unint64_t v21 = (v19 + ~(v19 << 32)) ^ ((unint64_t)(v19 + ~(v19 << 32)) >> 22);
    unint64_t v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
    unint64_t v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
    uint64_t v24 = v20 & ((v23 >> 31) ^ v23);
    uint64_t v25 = *(void *)(v18 + 8 * v24);
    if (v25 != v19)
    {
      int v26 = 1;
      while (v25 != -1)
      {
        uint64_t v24 = (v24 + v26) & v20;
        uint64_t v25 = *(void *)(v18 + 8 * v24);
        ++v26;
        if (v25 == v19) {
          goto LABEL_49;
        }
      }
      uint64_t v24 = *(unsigned int *)(v18 - 4);
    }
LABEL_49:
    if (v24 != *(_DWORD *)(v18 - 4))
    {
      *(void *)(v18 + 8 * v24) = -2;
      ++*(_DWORD *)(*v17 - 16);
      uint64_t v40 = *v17;
      int v41 = *v17 ? *(_DWORD *)(v40 - 12) - 1 : -1;
      *(_DWORD *)(v40 - 12) = v41;
      uint64_t v42 = *v17;
      if (*v17)
      {
        unsigned int v43 = 6 * *(_DWORD *)(v42 - 12);
        unsigned int v44 = *(_DWORD *)(v42 - 4);
        BOOL v45 = v43 < v44 && v44 >= 9;
        if (v45) {
          WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(v17, v44 >> 1, 0);
        }
      }
    }
  }
  if (*(unsigned char *)(*(void *)(a1 + 152) + 76)) {
    unsigned int v46 = 0;
  }
  else {
    unsigned int v46 = *(void **)(a1 + 16);
  }
  id v149 = v46;
  WebGPU::RenderPassEncoder::setCachedRenderPassState(a1, v149);
  if (!v7) {
    goto LABEL_205;
  }
  int v139 = &v10[8 * v7];
  unsigned int v47 = v10;
  while (2)
  {
    unint64_t v140 = v47;
    uint64_t v48 = *(void *)v47;
    if (!*(void *)(*(void *)v47 + 16) && ![*(id *)(v48 + 24) count]
      || (uint64_t v49 = *(void *)(v48 + 8), !*(void *)(v49 + 8))
      || v49 != *(void *)(a1 + 32))
    {
      unint64_t v137 = NSString;
      obuint64_t j = *(id *)(v48 + 96);
      [v137 stringWithFormat:@"executeBundles: render bundle is not valid, reason = %@", obj];
      int v138 = (NSString *)objc_claimAutoreleasedReturnValue();
      WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, v138);

      goto LABEL_204;
    }
    WebGPU::RenderBundle::updateMinMaxDepths((WebGPU::RenderBundle *)v48, *(float *)(a1 + 176), *(float *)(a1 + 180));
    if (!WebGPU::RenderBundle::validateRenderPass(v48, *(unsigned __int8 *)(a1 + 112), *(unsigned __int8 *)(a1 + 113), a1 + 240, a1 + 368, (uint64_t *)(a1 + 384)))goto LABEL_207; {
    uint64_t v141 = v48;
    }
    if (*(unsigned char *)(*(void *)(a1 + 152) + 76)) {
      int v50 = 0;
    }
    else {
      int v50 = *(void **)(a1 + 16);
    }
    id v51 = v50;

    if (*(void *)(v48 + 16)) {
      goto LABEL_74;
    }
    long long v161 = 0u;
    long long v162 = 0u;
    long long v159 = 0u;
    long long v160 = 0u;
    obuint64_t j = *(id *)(v48 + 24);
    uint64_t v55 = [obj countByEnumeratingWithState:&v159 objects:v165 count:16];
    if (!v55)
    {
      id v149 = v51;

      goto LABEL_75;
    }
    char v56 = 0;
    uint64_t v151 = *(void *)v160;
    do
    {
      uint64_t v150 = v55;
      for (uint64_t i = 0; i != v150; ++i)
      {
        if (*(void *)v160 != v151) {
          objc_enumerationMutation(obj);
        }
        uint64_t v58 = *(void **)(*((void *)&v159 + 1) + 8 * i);
        uint64_t v59 = (uint64_t *)[v58 minVertexCountForDrawCommand];
        uint64_t v60 = *v59;
        if (!*v59)
        {
          uint64_t v63 = 0;
          unsigned int v61 = 0;
LABEL_93:
          uint64_t v62 = v60 + 88 * v61;
          goto LABEL_94;
        }
        unsigned int v61 = *(_DWORD *)(v60 - 4);
        uint64_t v62 = v60 + 88 * v61;
        if (!*(_DWORD *)(v60 - 12))
        {
          uint64_t v63 = v60 + 88 * v61;
          goto LABEL_93;
        }
        uint64_t v63 = *v59;
        if (v61)
        {
          uint64_t v64 = 88 * v61;
          uint64_t v63 = *v59;
          while (*(void *)v63 >= 0xFFFFFFFFFFFFFFFELL)
          {
            v63 += 88;
            v64 -= 88;
            if (!v64)
            {
              uint64_t v63 = v62;
              break;
            }
          }
        }
LABEL_94:
        if (v60)
        {
          uint64_t v65 = v60 + 88 * *(unsigned int *)(v60 - 4);
          while (v63 != v65)
          {
LABEL_100:
            uint64_t v66 = *(void *)(v63 + 8);
            if (v66)
            {
              uint64_t v67 = *(void *)(v66 + 8);
              if (v67)
              {
                MTLIndexType v68 = *(void *)(v63 + 16);
                if (*(_DWORD *)(v67 + 248) != *(_DWORD *)(v63 + 64)
                  || *(_DWORD *)(v67 + 252) != *(_DWORD *)(v63 + 56)
                  || *(_DWORD *)(v67 + 256) != *(_DWORD *)(v63 + 40)
                  || *(_DWORD *)(v67 + 260) != *(_DWORD *)(v63 + 44)
                  || *(void *)(v67 + 272) != v68
                  || *(_DWORD *)(v67 + 264) != *(_DWORD *)(v63 + 72))
                {
                  WebGPU::Device::icbCommandClampPipeline(*(WebGPU::Device **)(a1 + 32), v68, *(unsigned int *)(a1 + 216));
                  id v69 = (id)objc_claimAutoreleasedReturnValue();
                  if (!v69)
                  {
                    id v149 = v51;
LABEL_204:

                    goto LABEL_205;
                  }
                  double v70 = v69;
                  [v51 setRenderPipelineState:v69];

                  [v51 setVertexBytes:v63 + 32 length:56 atIndex:0];
                  double v71 = [v58 indirectCommandBufferContainer];
                  [v51 setVertexBuffer:v71 offset:0 atIndex:1];

                  [v51 drawPrimitives:0 vertexStart:0 vertexCount:*(unsigned int *)(v63 + 56)];
                  int v72 = *(_DWORD *)(v63 + 56);
                  uint64_t v73 = *(void *)(v63 + 16);
                  int v74 = *(_DWORD *)(v63 + 72);
                  *(_DWORD *)(v67 + 24++*(_DWORD *)(result + 8) = *(_DWORD *)(v63 + 64);
                  *(_DWORD *)(v67 + 252) = v72;
                  *(void *)(v67 + 256) = *(void *)(v63 + 40);
                  *(void *)(v67 + 272) = v73;
                  *(_DWORD *)(v67 + 264) = v74;

                  char v56 = 1;
                }
              }
            }
            uint64_t v75 = v63 + 88;
            uint64_t v63 = v62;
            if (v75 != v62)
            {
              uint64_t v63 = v75;
              while (*(void *)v63 >= 0xFFFFFFFFFFFFFFFELL)
              {
                v63 += 88;
                if (v63 == v62)
                {
                  uint64_t v63 = v62;
                  break;
                }
              }
            }
          }
        }
        else
        {
          uint64_t v65 = 0;
          if (v63) {
            goto LABEL_100;
          }
        }
      }
      uint64_t v55 = [obj countByEnumeratingWithState:&v159 objects:v165 count:16];
    }
    while (v55);

    if (v56)
    {
      [v51 memoryBarrierWithScope:1 afterStages:1 beforeStages:1];
      WebGPU::RenderPassEncoder::renderCommandEncoder((id *)a1);
      id v149 = (id)objc_claimAutoreleasedReturnValue();

      goto LABEL_75;
    }
LABEL_74:
    id v149 = v51;
LABEL_75:
    uint64_t v52 = *(unsigned int *)(v141 + 104);
    uint64_t v53 = *(void *)(a1 + 512);
    BOOL v45 = __CFADD__(v53, v52);
    unint64_t v54 = v53 + v52;
    if (v45 || v54 > *(void *)(a1 + 520)) {
      WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, &cfstr_MDrawcountMMax.isa);
    }
    else {
      *(void *)(a1 + 512) = v54;
    }
    long long v157 = 0u;
    long long v158 = 0u;
    long long v155 = 0u;
    long long v156 = 0u;
    id v143 = *(id *)(v141 + 24);
    uint64_t v145 = [v143 countByEnumeratingWithState:&v155 objects:v164 count:16];
    if (!v145)
    {
LABEL_197:

      uint64_t v136 = *(WebGPU::RenderBundleEncoder **)(v141 + 16);
      if (v136) {
        WebGPU::RenderBundleEncoder::replayCommands(v136, (WebGPU::RenderPassEncoder *)a1);
      }
      unsigned int v47 = v140 + 8;
      if (v140 + 8 == v139) {
        goto LABEL_205;
      }
      continue;
    }
    break;
  }
  uint64_t v144 = *(void *)v156;
LABEL_121:
  uint64_t v146 = 0;
  while (1)
  {
    if (*(void *)v156 != v144) {
      objc_enumerationMutation(v143);
    }
    unint64_t v148 = *(void **)(*((void *)&v155 + 1) + 8 * v146);
    unint64_t v76 = [v148 depthStencilState];
    if (v76) {
      [v149 setDepthStencilState:v76];
    }

    objc_msgSend(v149, "setCullMode:", objc_msgSend(v148, "cullMode"));
    objc_msgSend(v149, "setFrontFacingWinding:", objc_msgSend(v148, "frontFace"));
    objc_msgSend(v149, "setDepthClipMode:", objc_msgSend(v148, "depthClipMode"));
    [v148 depthBias];
    int v78 = v77;
    [v148 depthBiasSlopeScale];
    int v80 = v79;
    [v148 depthBiasClamp];
    LODWORD(v82) = v81;
    LODWORD(v83) = v78;
    LODWORD(v84) = v80;
    [v149 setDepthBias:v83 slopeScale:v84 clamp:v82];
    uint64_t v85 = [v148 resources];
    unsigned int v86 = *(_DWORD *)(v85 + 12);
    if (v86) {
      break;
    }
LABEL_195:
    BOOL v135 = [v148 indirectCommandBuffer];
    objc_msgSend(v149, "executeCommandsInBuffer:withRange:", v135, 0, objc_msgSend(v135, "size"));

    if (++v146 == v145)
    {
      uint64_t v145 = [v143 countByEnumeratingWithState:&v155 objects:v164 count:16];
      if (!v145) {
        goto LABEL_197;
      }
      goto LABEL_121;
    }
  }
  uint64_t v87 = *(void *)v85;
  uint64_t v152 = *(void *)v85 + 48 * v86;
  while (1)
  {
    if ((*(void *)(v87 + 40) & 3) != 0)
    {
      uint64_t v88 = *(unsigned int *)(v87 + 12);
      if (v88) {
        objc_msgSend(v149, "useResources:count:usage:stages:", *(void *)v87, v88, *(void *)(v87 + 32));
      }
    }
    uint64_t v89 = *(unsigned int *)(v87 + 12);
    if (v89) {
      break;
    }
LABEL_128:
    v87 += 48;
    if (v87 == v152) {
      goto LABEL_195;
    }
  }
  uint64_t v90 = 0;
  unint64_t v91 = 0;
  while (2)
  {
    if (v91 >= *(unsigned int *)(v87 + 28))
    {
      __break(0xC471u);
      JUMPOUT(0x18251FA84);
    }
    if (v91 >= *(unsigned int *)(v87 + 12))
    {
      __break(0xC471u);
      goto LABEL_211;
    }
    uint64_t v92 = *(void *)(v87 + 16) + v90;
    int v93 = *(_DWORD *)v92;
    id v94 = *(id *)(*(void *)v87 + 8 * v91);
    int v95 = *(_DWORD *)(v92 + 16);
    if (v95 == -1) {
      uint64_t v96 = -1;
    }
    else {
      uint64_t v96 = *(unsigned int *)(v92 + 16);
    }
    if (v96 == 2)
    {
      if (v95 != 2) {
        break;
      }
      WebGPU::RenderPassEncoder::addResourceToActiveResources((uint64_t *)a1, *(void *)(v92 + 8), v94, v93, 0, 0, 2u);
    }
    else if (v96 == 1)
    {
      if (v95 != 1) {
        break;
      }
      uint64_t v97 = *(void *)(v92 + 8);
      if (v97) {
        WebGPU::RenderPassEncoder::addResourceToActiveResources((uint64_t *)a1, v97, v93);
      }
    }
    else
    {
      if (v95) {
        break;
      }
      uint64_t v98 = *(void *)(v92 + 8);
      if (v98)
      {
        if ((v93 & 4) != 0)
        {
          *(void *)(v98 + 232) = -1;
          *(void *)(v98 + 240) = -1;
          *(void *)(v98 + 272) = 0;
          *(void *)(v98 + 24++*(_DWORD *)(result + 8) = 0;
          *(void *)(v98 + 256) = 0;
          *(_DWORD *)(v98 + 264) = 0;
          uint64_t v98 = *(void *)(v92 + 8);
        }
        WebGPU::RenderPassEncoder::addResourceToActiveResources((uint64_t *)a1, v98, *(void **)(v98 + 16), v93, 0, 0, 2u);
      }
    }

    int v99 = *(_DWORD *)(v92 + 16);
    if (v99 == -1) {
      uint64_t v100 = -1;
    }
    else {
      uint64_t v100 = *(unsigned int *)(v92 + 16);
    }
    if (v100 == 2)
    {
      if (v99 != 2) {
        break;
      }
      uint64_t v110 = *(void *)(v92 + 8);
      if (v110)
      {
        uint64_t v111 = *(void *)(a1 + 152);
        WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>(v110 + 48, v111, (uint64_t)v163);
        if (*(unsigned char *)(v110 + 40))
        {
          *(unsigned char *)(v111 + 76) = 1;
          uint64_t v112 = *(void *)(v111 + 56);
          if (v112)
          {
            uint64_t v113 = *(void *)(v112 + 8);
            if (v113)
            {
              unsigned int v114 = *(void **)(v111 + 64);
              id obja = v114;
              uint64_t v115 = *(void **)(v113 + 16);
              if (v115 && (unint64_t)[v115 status] <= 1)
              {
                objc_storeStrong((id *)(v113 + 48), v114);
                uint64_t v116 = *(void *)(*(void *)(v113 + 40) + 16);
                id v117 = *(id *)(v113 + 16);
                if (v117)
                {
                  id v147 = v117;
                  id v118 = [*(id *)(v116 + 96) objectForKey:v117];
                  id v119 = v117;
                  id v120 = [*(id *)(v116 + 96) objectForKey:v119];

                  if (v120 == v118)
                  {
                    [v118 endEncoding];
                    [*(id *)(v116 + 96) removeObjectForKey:v119];
                  }

                  id v121 = v119;
                  [*(id *)(v116 + 96) removeObjectForKey:v121];
                  [*(id *)(v116 + 88) removeObject:v121];

                  id v117 = v147;
                }

                uint64_t v122 = *(void **)(v113 + 16);
                *(void *)(v113 + 16) = 0;
              }
            }
          }
        }
      }
      goto LABEL_135;
    }
    if (v100 == 1)
    {
      if (v99 != 1) {
        break;
      }
      uint64_t v101 = *(void *)(v92 + 8);
      if (v101)
      {
        uint64_t v102 = *(void *)(a1 + 152);
        WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>(v101 + 104, v102, (uint64_t)v163);
        uint64_t v103 = *(void *)(v101 + 96);
        if (*(unsigned char *)(v103 + 104))
        {
          if (!*(unsigned char *)(v103 + 105))
          {
            *(unsigned char *)(v102 + 76) = 1;
            uint64_t v104 = *(void *)(v102 + 56);
            if (v104)
            {
              uint64_t v105 = *(void *)(v104 + 8);
              if (v105)
              {
                int v106 = *(void **)(v102 + 64);
                id v107 = v106;
                unint64_t v108 = *(void **)(v105 + 16);
                if (v108 && (unint64_t)[v108 status] <= 1)
                {
                  objc_storeStrong((id *)(v105 + 48), v106);
                  WebGPU::Queue::removeMTLCommandBuffer(*(void *)(*(void *)(v105 + 40) + 16), *(void **)(v105 + 16));
                  uint64_t v109 = *(void **)(v105 + 16);
                  *(void *)(v105 + 16) = 0;
                }
              }
            }
          }
        }
      }
      goto LABEL_135;
    }
    if (!v99)
    {
      uint64_t v123 = *(void *)(v92 + 8);
      if (v123)
      {
        uint64_t v124 = *(void *)(a1 + 152);
        WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>(v123 + 288, v124, (uint64_t)v163);
        unsigned int v125 = *(unsigned __int8 *)(v123 + 52);
        if (v125 > 1)
        {
          if (v125 == 4)
          {
            *(unsigned char *)(v124 + 76) = 1;
            uint64_t v129 = *(void *)(v124 + 56);
            if (v129)
            {
              uint64_t v130 = *(void *)(v129 + 8);
              if (v130)
              {
                int v131 = *(void **)(v124 + 64);
                id v132 = v131;
                uint64_t v133 = *(void **)(v130 + 16);
                if (v133 && (unint64_t)[v133 status] <= 1)
                {
                  objc_storeStrong((id *)(v130 + 48), v131);
                  WebGPU::Queue::removeMTLCommandBuffer(*(void *)(*(void *)(v130 + 40) + 16), *(void **)(v130 + 16));
                  uint64_t v134 = *(void **)(v130 + 16);
                  *(void *)(v130 + 16) = 0;
                }
              }
            }
          }
        }
        else
        {
          int v126 = *(_DWORD *)(v124 + 72) + 1;
          *(_DWORD *)(v124 + 72) = v126;
          uint64_t v127 = *(void *)(v124 + 56);
          if (v127)
          {
            uint64_t v128 = *(void *)(v127 + 8);
            if (v128) {
              *(_DWORD *)(v128 + 32) = v126;
            }
          }
        }
      }
LABEL_135:
      ++v91;
      v90 += 40;
      if (v89 == v91) {
        goto LABEL_128;
      }
      continue;
    }
    break;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  __break(1u);
LABEL_207:
  WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, &cfstr_Executebundles_0.isa);
LABEL_205:

LABEL_41:
  if (v142)
  {
LABEL_42:
    WTF::fastFree(v142, v39);
  }
}

void sub_18251FA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a17)
  {
    WTF::fastFree(a17, v28);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_DWORD *wgpuRenderPassEncoderInsertDebugMarker(uint64_t a1, char *__s)
{
  if (__s) {
    strlen(__s);
  }
  WTF::String::fromUTF8();
  if (*(unsigned __int8 *)(a1 + 4) - 3 <= 0xFFFFFFFD)
  {
    uint64_t v3 = *(void **)(a1 + 16);
    if (v6) {
      uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v4 = &stru_1ECABF938;
    }
    [v3 insertDebugSignpost:v4];
  }
  id result = v6;
  if (v6)
  {
    if (*v6 == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *v6 -= 2;
    }
  }
  return result;
}

void sub_18251FD04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void wgpuRenderPassEncoderPopDebugGroup(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 4) - 3 <= 0xFFFFFFFD)
  {
    if (*(unsigned char *)(*(void *)(a1 + 152) + 4) == 1 && (uint64_t v1 = *(void *)(a1 + 24)) != 0)
    {
      *(void *)(a1 + 24) = v1 - 1;
      [*(id *)(a1 + 16) popDebugGroup];
    }
    else
    {
      WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, &cfstr_PopdebuggroupV.isa);
    }
  }
}

_DWORD *wgpuRenderPassEncoderPushDebugGroup(uint64_t a1, char *__s)
{
  if (__s) {
    strlen(__s);
  }
  WTF::String::fromUTF8();
  if (*(unsigned __int8 *)(a1 + 4) - 3 <= 0xFFFFFFFD)
  {
    uint64_t v3 = *(void **)(a1 + 16);
    ++*(void *)(a1 + 24);
    if (v6) {
      uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v4 = &stru_1ECABF938;
    }
    [v3 pushDebugGroup:v4];
  }
  id result = v6;
  if (v6)
  {
    if (*v6 == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *v6 -= 2;
    }
  }
  return result;
}

void sub_18251FE50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void wgpuRenderPassEncoderSetBindGroup(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  unsigned int v60 = a2;
  uint64_t v6 = *(void *)(a1 + 152);
  if (*(unsigned char *)(v6 + 4) == 1)
  {
    unint64_t v8 = *(void **)(a1 + 16);
    if (v8 && *(void *)(v6 + 16))
    {
      if (WebGPU::CommandEncoder::encoderIsCurrent(v6, v8))
      {
        uint64_t v12 = *(void *)(a3 + 64);
        if (!v12 || (uint64_t v13 = *(void *)(a3 + 40), !*(void *)(v13 + 8)) || v13 != *(void *)(a1 + 32))
        {
          uint64_t v14 = @"setBindGroup: invalid bind group";
LABEL_9:
          WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, &v14->isa);
          return;
        }
        if (*(_DWORD *)(v13 + 104) <= a2)
        {
          uint64_t v14 = @"setBindGroup: groupIndex >= limits.maxBindGroups";
          goto LABEL_9;
        }
        uint64_t v27 = WebGPU::BindGroupLayout::errorValidatingDynamicOffsets(v12, a5, a4, a3);
        if (v27)
        {
          id v55 = (id)v27;
          uint64_t v28 = [NSString stringWithFormat:@"GPURenderPassEncoder.setBindGroup: %@", v27];
          WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, v28);

          return;
        }
        unsigned int v29 = *(_DWORD *)(a1 + 84);
        if (a2 > v29) {
          unsigned int v29 = a2;
        }
        *(_DWORD *)(a1 + 84) = v29;
        if (!a4)
        {
          WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::remove((uint64_t *)(a1 + 160), (int *)&v60);
LABEL_50:
          unsigned int v43 = *(_DWORD *)(a3 + 60);
          if (!v43)
          {
LABEL_66:
            unint64_t v57 = (WTF *)a3;
            WTF::HashMap<unsigned int,WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebGPU::BindGroup const,WTF::RawPtrTraits<WebGPU::BindGroup const>,WTF::DefaultRefDerefTraits<WebGPU::BindGroup const>>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WebGPU::BindGroup const*>((uint64_t *)(a1 + 400), (int *)&v60, (_DWORD **)&v57, (uint64_t)v56);
            return;
          }
          uint64_t v44 = *(void *)(a3 + 48);
          uint64_t v45 = v44 + 48 * v43;
          while (1)
          {
            if ((*(unsigned char *)(v44 + 40) & 3) != 0 && *(_DWORD *)(v44 + 12))
            {
              if (*(unsigned char *)(*(void *)(a1 + 152) + 76)) {
                unsigned int v46 = 0;
              }
              else {
                unsigned int v46 = *(void **)(a1 + 16);
              }
              id v47 = v46;
              uint64_t v48 = *(unsigned int *)(v44 + 12);
              if (!v48)
              {
                __break(0xC471u);
                JUMPOUT(0x182520348);
              }
              uint64_t v49 = v47;
              [v47 useResources:*(void *)v44 count:v48 usage:*(void *)(v44 + 32) stages:*(void *)(v44 + 40)];
            }
            uint64_t v50 = *(unsigned int *)(v44 + 12);
            if (v50) {
              break;
            }
LABEL_52:
            v44 += 48;
            if (v44 == v45) {
              goto LABEL_66;
            }
          }
          uint64_t v51 = 0;
          unint64_t v52 = 0;
          while (v52 < *(unsigned int *)(v44 + 28))
          {
            if (v52 >= *(unsigned int *)(v44 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x182520340);
            }
            uint64_t v53 = (int *)(*(void *)(v44 + 16) + v51);
            int v54 = *v53;
            v53 += 2;
            WebGPU::RenderPassEncoder::addResourceToActiveResources((uint64_t *)a1, (uint64_t)v53, *(void **)(*(void *)v44 + 8 * v52), v54);
            WebGPU::RenderPassEncoder::setCommandEncoder(a1, (uint64_t)v53);
            ++v52;
            v51 += 40;
            if (v50 == v52) {
              goto LABEL_52;
            }
          }
          __break(0xC471u);
LABEL_71:
          JUMPOUT(0x182520338);
        }
        unsigned int v59 = a4;
        if ((unint64_t)a4 >> 30)
        {
          __break(0xC471u);
          goto LABEL_71;
        }
        uint64_t v30 = (WTF *)WTF::fastMalloc((WTF *)(4 * a4));
        unsigned int v58 = a4;
        unint64_t v57 = v30;
        unint64_t v31 = (a4 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v31 < 7)
        {
          int v32 = (int *)a5;
        }
        else
        {
          int v32 = (int *)a5;
          if ((unint64_t)v30 - a5 >= 0x20)
          {
            unint64_t v33 = v31 + 1;
            uint64_t v34 = 4 * (v33 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v35 = (WTF *)((char *)v30 + v34);
            int v32 = (int *)(a5 + v34);
            uint64_t v36 = (long long *)(a5 + 16);
            unsigned int v37 = (_OWORD *)((char *)v30 + 16);
            uint64_t v38 = v33 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v39 = *v36;
              *(v37 - 1) = *(v36 - 1);
              *unsigned int v37 = v39;
              v36 += 2;
              v37 += 2;
              v38 -= 8;
            }
            while (v38);
            uint64_t v30 = v35;
            if (v33 == (v33 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_48:
              WTF::HashMap<unsigned int,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)(a1 + 160), (int *)&v60, (uint64_t *)&v57, (uint64_t)v56);
              uint64_t v42 = v57;
              if (v57)
              {
                unint64_t v57 = 0;
                unsigned int v58 = 0;
                WTF::fastFree(v42, v41);
              }
              goto LABEL_50;
            }
          }
        }
        do
        {
          int v40 = *v32++;
          *(_DWORD *)uint64_t v30 = v40;
          uint64_t v30 = (WTF *)((char *)v30 + 4);
        }
        while (v32 != (int *)(a5 + 4 * a4));
        goto LABEL_48;
      }
      unint64_t v8 = *(void **)(a1 + 16);
    }
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::RenderPassEncoder::setBindGroup(uint32_t, const BindGroup &, uint32_t, const uint32_t *)");
    MEMORY[0x18530AF50](v56, v16);
    uint64_t v17 = *(void *)(v15 + 32);
    uint64_t v18 = 32 * *(unsigned int *)(v15 + 44);
    uint64_t v19 = v17 + v18;
    while (v18)
    {
      int v20 = *(_DWORD *)(v19 - 8);
      v19 -= 32;
      v18 -= 32;
      if (!v20)
      {
        uint64_t v21 = v17 + v18;
        if (!*(unsigned char *)(v21 + 16))
        {
          uint64_t v22 = v56[0];
          v56[0] = 0;
          *(_DWORD *)uint64_t v21 = 1;
          *(void *)(v21 + ++*(_DWORD *)(result + 8) = v22;
          *(unsigned char *)(v21 + 16) = 1;
        }
        goto LABEL_20;
      }
    }
    uint64_t v23 = *(void *)(v15 + 24);
    if (v23)
    {
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v23 + 16))(v23, 1, v56);
      uint64_t v24 = *(void *)(v15 + 24);
      *(void *)(v15 + 24) = 0;
      if (v24) {
        (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
      }
    }
LABEL_20:
    uint64_t v25 = (_DWORD *)v56[0];
    v56[0] = 0;
    if (v25)
    {
      if (*v25 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v25 -= 2;
      }
    }

    int v26 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
  }
}

void sub_182520354(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, int a15)
{
  if (a14)
  {
    WTF::fastFree(a14, a2);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1825203B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  if (a11)
  {
    if (*a11 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a11 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_1825203EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void wgpuRenderPassEncoderSetBlendConstant(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *(void *)(a1 + 152);
  if (*(unsigned char *)(v3 + 4) == 1)
  {
    uint64_t v5 = *(void **)(a1 + 16);
    if (v5 && *(void *)(v3 + 16))
    {
      if (WebGPU::CommandEncoder::encoderIsCurrent(v3, v5))
      {
        int v6 = *(unsigned __int8 *)(a1 + 448);
        long long v7 = a2[1];
        *(_OWORD *)(a1 + 416) = *a2;
        *(_OWORD *)(a1 + 432) = v7;
        if (!v6) {
          *(unsigned char *)(a1 + 44++*(_DWORD *)(result + 8) = 1;
        }
        return;
      }
      uint64_t v5 = *(void **)(a1 + 16);
    }
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::RenderPassEncoder::setBlendConstant(const WGPUColor &)");
    MEMORY[0x18530AF50](&v20, v9);
    uint64_t v10 = *(void *)(v8 + 32);
    uint64_t v11 = 32 * *(unsigned int *)(v8 + 44);
    uint64_t v12 = v10 + v11;
    while (v11)
    {
      int v13 = *(_DWORD *)(v12 - 8);
      v12 -= 32;
      v11 -= 32;
      if (!v13)
      {
        uint64_t v14 = v10 + v11;
        if (!*(unsigned char *)(v14 + 16))
        {
          uint64_t v15 = v20;
          int v20 = 0;
          *(_DWORD *)uint64_t v14 = 1;
          *(void *)(v14 + ++*(_DWORD *)(result + 8) = v15;
          *(unsigned char *)(v14 + 16) = 1;
        }
        goto LABEL_16;
      }
    }
    uint64_t v16 = *(void *)(v8 + 24);
    if (v16)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v16 + 16))(v16, 1, &v20);
      uint64_t v17 = *(void *)(v8 + 24);
      *(void *)(v8 + 24) = 0;
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
    }
LABEL_16:
    uint64_t v18 = v20;
    int v20 = 0;
    if (v18)
    {
      if (*v18 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v18 -= 2;
      }
    }

    uint64_t v19 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
  }
}

void sub_1825205E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a10 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void wgpuRenderPassEncoderSetIndexBuffer(uint64_t a1, uint64_t a2, int a3, unint64_t a4, unint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 152);
  if (*(unsigned char *)(v6 + 4) == 1)
  {
    uint64_t v8 = *(void **)(a1 + 16);
    if (v8 && *(void *)(v6 + 16))
    {
      if (WebGPU::CommandEncoder::encoderIsCurrent(v6, v8))
      {
        if (*(unsigned char *)(a2 + 52) != 4 && !*(void *)(a2 + 16)
          || (uint64_t v12 = *(void *)(a2 + 280), !*(void *)(v12 + 8))
          || v12 != *(void *)(a1 + 32))
        {
          int v13 = @"setIndexBuffer: invalid buffer";
LABEL_10:
          WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, &v13->isa);
          return;
        }
        WebGPU::Buffer::setCommandEncoder((WebGPU::Buffer *)a2, *(WebGPU::CommandEncoder **)(a1 + 152));
        if (*(unsigned char *)(a2 + 52) == 4) {
          return;
        }
        if ((*(unsigned char *)(a2 + 48) & 0x10) == 0) {
          goto LABEL_36;
        }
        uint64_t v27 = 3;
        if (a3 == 1) {
          uint64_t v27 = 1;
        }
        if ((v27 & a4) != 0)
        {
LABEL_36:
          int v13 = @"setIndexBuffer: validation failed";
          goto LABEL_10;
        }
        unint64_t v28 = *(void *)(a2 + 40);
        if (a5 == -1)
        {
          if (v28 < a4) {
            goto LABEL_45;
          }
          a5 = v28 - a4;
        }
        if (!__CFADD__(a4, a5) && a4 + a5 <= v28)
        {
          ++*(_DWORD *)a2;
          unsigned int v29 = *(WebGPU::Buffer **)(a1 + 40);
          *(void *)(a1 + 40) = a2;
          if (v29)
          {
            if (*(_DWORD *)v29 == 1)
            {
              WebGPU::Buffer::~Buffer(v29, v26);
              WTF::fastFree(v30, v31);
            }
            else
            {
              --*(_DWORD *)v29;
            }
          }
          *(void *)(a1 + 56) = a4;
          *(void *)(a1 + 64) = a5;
          *(void *)(a1 + 4++*(_DWORD *)(result + 8) = a3 == 2;
          int v32 = *(void **)(a2 + 16);
          WebGPU::RenderPassEncoder::addResourceToActiveResources((uint64_t *)a1, a2, v32, 1, 0, 0, 2u);
          return;
        }
LABEL_45:
        int v13 = @"setIndexBuffer: computed size overflows";
        goto LABEL_10;
      }
      uint64_t v8 = *(void **)(a1 + 16);
    }
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::RenderPassEncoder::setIndexBuffer(Buffer &, WGPUIndexFormat, uint64_t, uint64_t)");
    MEMORY[0x18530AF50](&v33, v15);
    uint64_t v16 = *(void *)(v14 + 32);
    uint64_t v17 = 32 * *(unsigned int *)(v14 + 44);
    uint64_t v18 = v16 + v17;
    while (v17)
    {
      int v19 = *(_DWORD *)(v18 - 8);
      v18 -= 32;
      v17 -= 32;
      if (!v19)
      {
        uint64_t v20 = v16 + v17;
        if (!*(unsigned char *)(v20 + 16))
        {
          uint64_t v21 = v33;
          unint64_t v33 = 0;
          *(_DWORD *)uint64_t v20 = 1;
          *(void *)(v20 + ++*(_DWORD *)(result + 8) = v21;
          *(unsigned char *)(v20 + 16) = 1;
        }
        goto LABEL_21;
      }
    }
    uint64_t v22 = *(void *)(v14 + 24);
    if (v22)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v22 + 16))(v22, 1, &v33);
      uint64_t v23 = *(void *)(v14 + 24);
      *(void *)(v14 + 24) = 0;
      if (v23) {
        (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      }
    }
LABEL_21:
    uint64_t v24 = v33;
    unint64_t v33 = 0;
    if (v24)
    {
      if (*v24 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v24 -= 2;
      }
    }

    uint64_t v25 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
  }
}

void sub_182520948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a10 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void wgpuRenderPassEncoderSetPipeline(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 152);
  if (*(unsigned char *)(v3 + 4) == 1)
  {
    uint64_t v5 = *(void **)(a1 + 16);
    if (v5 && *(void *)(v3 + 16))
    {
      if (WebGPU::CommandEncoder::encoderIsCurrent(v3, v5))
      {
        if (!*(void *)(a2 + 16) || (uint64_t v6 = *(void *)(a2 + 24), !*(void *)(v6 + 8)) || v6 != *(void *)(a1 + 32))
        {
          long long v7 = @"setPipeline: invalid RenderPipeline";
LABEL_9:
          WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, &v7->isa);
          return;
        }
        int v20 = *(unsigned __int8 *)(a1 + 113);
        if (*(unsigned char *)(a1 + 112) && ([*(id *)(a2 + 112) isDepthWriteEnabled] & 1) != 0
          || v20 && *(unsigned char *)(a2 + 448))
        {
          long long v7 = @"setPipeline: invalid depth stencil state";
          goto LABEL_9;
        }
        if (!WebGPU::RenderPipeline::colorDepthStencilTargetsMatch(a2, a1 + 240, a1 + 368, (uint64_t *)(a1 + 384)))
        {
          long long v7 = @"setPipeline: color and depth targets from pass do not match pipeline";
          goto LABEL_9;
        }
        uint64_t v22 = *(_DWORD **)(*(void *)(a2 + 136) + 72);
        if (v22)
        {
          uint64_t v23 = *(v22 - 1);
          uint64_t v24 = &v22[6 * v23];
          if (*(v22 - 3))
          {
            uint64_t v25 = *(_DWORD **)(*(void *)(a2 + 136) + 72);
            if (v23)
            {
              uint64_t v26 = 24 * v23;
              uint64_t v25 = *(_DWORD **)(*(void *)(a2 + 136) + 72);
              while (*v25 >= 0xFFFFFFFE)
              {
                v25 += 6;
                v26 -= 24;
                if (!v26)
                {
                  uint64_t v25 = v24;
                  break;
                }
              }
            }
LABEL_46:
            if (v22) {
              v22 += 6 * *(v22 - 1);
            }
            if (v22 != v25)
            {
              unint64_t v27 = 0;
              do
              {
                unint64_t v28 = v24;
                if (v25 + 6 != v24)
                {
                  unint64_t v28 = v25 + 6;
                  while (*v28 >= 0xFFFFFFFE)
                  {
                    v28 += 6;
                    if (v28 == v24)
                    {
                      unint64_t v28 = v24;
                      break;
                    }
                  }
                }
                v27 += v25[5];
                uint64_t v25 = v28;
              }
              while (v28 != v22);
              if (v27 >= 0xFFFFFFFFFFFFFFFDLL)
              {
                long long v7 = @"setPipeline: invalid size of fragmentDynamicOffsets";
                goto LABEL_9;
              }
            }
            *(void *)(a1 + 8++*(_DWORD *)(result + 8) = *(void *)(a2 + 32);
            ++*(_DWORD *)a2;
            unsigned int v29 = *(WebGPU::RenderPipeline **)(a1 + 72);
            *(void *)(a1 + 72) = a2;
            if (v29)
            {
              if (*(_DWORD *)v29 == 1)
              {
                WebGPU::RenderPipeline::~RenderPipeline(v29, v21);
                WTF::fastFree(v30, v31);
              }
              else
              {
                --*(_DWORD *)v29;
              }
            }
            int v32 = *(_DWORD **)(*(void *)(a2 + 136) + 64);
            if (v32)
            {
              uint64_t v33 = *(v32 - 1);
              uint64_t v34 = &v32[6 * v33];
              if (*(v32 - 3))
              {
                uint64_t v35 = *(_DWORD **)(*(void *)(a2 + 136) + 64);
                if (v33)
                {
                  uint64_t v36 = 24 * v33;
                  uint64_t v35 = *(_DWORD **)(*(void *)(a2 + 136) + 64);
                  while (*v35 >= 0xFFFFFFFE)
                  {
                    v35 += 6;
                    v36 -= 24;
                    if (!v36)
                    {
                      uint64_t v35 = v34;
                      break;
                    }
                  }
                }
LABEL_72:
                if (v32) {
                  v32 += 6 * *(v32 - 1);
                }
                if (v32 == v35)
                {
                  LODWORD(v37) = 0;
                }
                else
                {
                  unint64_t v37 = 0;
                  do
                  {
                    uint64_t v38 = v34;
                    if (v35 + 6 != v34)
                    {
                      uint64_t v38 = v35 + 6;
                      while (*v38 >= 0xFFFFFFFE)
                      {
                        v38 += 6;
                        if (v38 == v34)
                        {
                          uint64_t v38 = v34;
                          break;
                        }
                      }
                    }
                    v37 += v35[5];
                    uint64_t v35 = v38;
                  }
                  while (v38 != v32);
                  unint64_t v39 = *(unsigned int *)(a1 + 132);
                  if (v37 > v39)
                  {
                    unint64_t v40 = *(unsigned int *)(a1 + 128);
                    if (v37 > v40)
                    {
                      unint64_t v41 = v40 + (v40 >> 2);
                      if (v41 >= 0x10) {
                        unint64_t v42 = v41 + 1;
                      }
                      else {
                        unint64_t v42 = 16;
                      }
                      if (v42 <= v37) {
                        unint64_t v42 = v37;
                      }
                      if (v42 >> 30) {
                        goto LABEL_138;
                      }
                      unsigned int v43 = *(void **)(a1 + 120);
                      int v44 = v42;
                      uint64_t v45 = (void *)WTF::fastMalloc((WTF *)(4 * v42));
                      *(_DWORD *)(a1 + 12++*(_DWORD *)(result + 8) = v44;
                      *(void *)(a1 + 120) = v45;
                      memcpy(v45, v43, 4 * v39);
                      if (v43)
                      {
                        if (*(void **)(a1 + 120) == v43)
                        {
                          *(void *)(a1 + 120) = 0;
                          *(_DWORD *)(a1 + 12++*(_DWORD *)(result + 8) = 0;
                        }
                        WTF::fastFree((WTF *)v43, v46);
                      }
                    }
                  }
                }
                *(_DWORD *)(a1 + 132) = v37;
                id v47 = *(_DWORD **)(*(void *)(a2 + 136) + 72);
                if (v47)
                {
                  uint64_t v48 = *(v47 - 1);
                  uint64_t v49 = &v47[6 * v48];
                  if (*(v47 - 3))
                  {
                    uint64_t v50 = *(_DWORD **)(*(void *)(a2 + 136) + 72);
                    if (v48)
                    {
                      uint64_t v51 = 24 * v48;
                      uint64_t v50 = *(_DWORD **)(*(void *)(a2 + 136) + 72);
                      while (*v50 >= 0xFFFFFFFE)
                      {
                        v50 += 6;
                        v51 -= 24;
                        if (!v51)
                        {
                          uint64_t v50 = v49;
                          goto LABEL_105;
                        }
                      }
                    }
                    goto LABEL_105;
                  }
                  uint64_t v50 = &v47[6 * v48];
                }
                else
                {
                  uint64_t v50 = 0;
                  LODWORD(v4++*(_DWORD *)(result + 8) = 0;
                }
                uint64_t v49 = &v47[6 * v48];
LABEL_105:
                if (v47) {
                  v47 += 6 * *(v47 - 1);
                }
                if (v47 == v50)
                {
                  unint64_t v54 = 3;
                }
                else
                {
                  uint64_t v52 = 0;
                  do
                  {
                    uint64_t v53 = v49;
                    if (v50 + 6 != v49)
                    {
                      uint64_t v53 = v50 + 6;
                      while (*v53 >= 0xFFFFFFFE)
                      {
                        v53 += 6;
                        if (v53 == v49)
                        {
                          uint64_t v53 = v49;
                          break;
                        }
                      }
                    }
                    v52 += v50[5];
                    uint64_t v50 = v53;
                  }
                  while (v53 != v47);
                  unint64_t v54 = v52 + 3;
                }
                unint64_t v55 = *(unsigned int *)(a1 + 148);
                if (v54 <= v55) {
                  goto LABEL_130;
                }
                unint64_t v56 = *(unsigned int *)(a1 + 144);
                if (v54 <= v56) {
                  goto LABEL_130;
                }
                unint64_t v57 = v56 + (v56 >> 2);
                if (v57 >= 0x10) {
                  unint64_t v58 = v57 + 1;
                }
                else {
                  unint64_t v58 = 16;
                }
                if (v58 <= v54) {
                  unint64_t v59 = v54;
                }
                else {
                  unint64_t v59 = v58;
                }
                if (!(v59 >> 30))
                {
                  unsigned int v60 = *(void **)(a1 + 136);
                  unsigned int v61 = (void *)WTF::fastMalloc((WTF *)(4 * v59));
                  *(_DWORD *)(a1 + 144) = v59;
                  *(void *)(a1 + 136) = v61;
                  memcpy(v61, v60, 4 * v55);
                  if (v60)
                  {
                    if (*(void **)(a1 + 136) == v60)
                    {
                      *(void *)(a1 + 136) = 0;
                      *(_DWORD *)(a1 + 144) = 0;
                    }
                    WTF::fastFree((WTF *)v60, v62);
                  }
LABEL_130:
                  *(_DWORD *)(a1 + 14++*(_DWORD *)(result + 8) = v54;
                  if (v54 <= 2)
                  {
                    if (*(_DWORD *)(a1 + 144) <= 2u)
                    {
                      uint64_t v63 = *(void **)(a1 + 136);
                      uint64_t v64 = (void *)WTF::fastMalloc((WTF *)0x40);
                      *(_DWORD *)(a1 + 144) = 16;
                      *(void *)(a1 + 136) = v64;
                      memcpy(v64, v63, 4 * v54);
                      if (v63)
                      {
                        if (*(void **)(a1 + 136) == v63)
                        {
                          *(void *)(a1 + 136) = 0;
                          *(_DWORD *)(a1 + 144) = 0;
                        }
                        WTF::fastFree((WTF *)v63, v65);
                      }
                    }
                    *(_DWORD *)(a1 + 14++*(_DWORD *)(result + 8) = 3;
                  }
                  *(_DWORD *)(*(void *)(a1 + 136) + ++*(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 92);
                  return;
                }
LABEL_138:
                __break(0xC471u);
                JUMPOUT(0x182521050);
              }
              uint64_t v35 = &v32[6 * v33];
            }
            else
            {
              uint64_t v35 = 0;
              LODWORD(v33) = 0;
            }
            uint64_t v34 = &v32[6 * v33];
            goto LABEL_72;
          }
          uint64_t v25 = &v22[6 * v23];
        }
        else
        {
          uint64_t v25 = 0;
          LODWORD(v23) = 0;
        }
        uint64_t v24 = &v22[6 * v23];
        goto LABEL_46;
      }
      uint64_t v5 = *(void **)(a1 + 16);
    }
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::RenderPassEncoder::setPipeline(const RenderPipeline &)");
    MEMORY[0x18530AF50](&v66, v9);
    uint64_t v10 = *(void *)(v8 + 32);
    uint64_t v11 = 32 * *(unsigned int *)(v8 + 44);
    uint64_t v12 = v10 + v11;
    while (v11)
    {
      int v13 = *(_DWORD *)(v12 - 8);
      v12 -= 32;
      v11 -= 32;
      if (!v13)
      {
        uint64_t v14 = v10 + v11;
        if (!*(unsigned char *)(v14 + 16))
        {
          uint64_t v15 = v66;
          uint64_t v66 = 0;
          *(_DWORD *)uint64_t v14 = 1;
          *(void *)(v14 + ++*(_DWORD *)(result + 8) = v15;
          *(unsigned char *)(v14 + 16) = 1;
        }
        goto LABEL_20;
      }
    }
    uint64_t v16 = *(void *)(v8 + 24);
    if (v16)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v16 + 16))(v16, 1, &v66);
      uint64_t v17 = *(void *)(v8 + 24);
      *(void *)(v8 + 24) = 0;
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
    }
LABEL_20:
    uint64_t v18 = v66;
    uint64_t v66 = 0;
    if (v18)
    {
      if (*v18 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v18 -= 2;
      }
    }

    int v19 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
  }
}

void sub_18252105C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a10 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void wgpuRenderPassEncoderSetScissorRect(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v6 = *(void *)(a1 + 152);
  if (*(unsigned char *)(v6 + 4) == 1)
  {
    uint64_t v8 = *(void **)(a1 + 16);
    if (v8 && *(void *)(v6 + 16))
    {
      if (WebGPU::CommandEncoder::encoderIsCurrent(v6, v8))
      {
        if (__CFADD__(a2, a4)
          || a4 + a2 > *(_DWORD *)(a1 + 208)
          || __CFADD__(a3, a5)
          || a5 + a3 > *(_DWORD *)(a1 + 212))
        {
          WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, 0);
        }
        else
        {
          int v24 = *(unsigned __int8 *)(a1 + 488);
          *(void *)(a1 + 456) = a2;
          *(void *)(a1 + 464) = a3;
          *(void *)(a1 + 472) = a4;
          *(void *)(a1 + 480) = a5;
          if (!v24) {
            *(unsigned char *)(a1 + 48++*(_DWORD *)(result + 8) = 1;
          }
        }
        return;
      }
      uint64_t v8 = *(void **)(a1 + 16);
    }
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 32);
    int v13 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::RenderPassEncoder::setScissorRect(uint32_t, uint32_t, uint32_t, uint32_t)");
    MEMORY[0x18530AF50](&v25, v13);
    uint64_t v14 = *(void *)(v12 + 32);
    uint64_t v15 = 32 * *(unsigned int *)(v12 + 44);
    uint64_t v16 = v14 + v15;
    while (v15)
    {
      int v17 = *(_DWORD *)(v16 - 8);
      v16 -= 32;
      v15 -= 32;
      if (!v17)
      {
        uint64_t v18 = v14 + v15;
        if (!*(unsigned char *)(v18 + 16))
        {
          int v19 = v25;
          uint64_t v25 = 0;
          *(_DWORD *)uint64_t v18 = 1;
          *(void *)(v18 + ++*(_DWORD *)(result + 8) = v19;
          *(unsigned char *)(v18 + 16) = 1;
        }
        goto LABEL_20;
      }
    }
    uint64_t v20 = *(void *)(v12 + 24);
    if (v20)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v20 + 16))(v20, 1, &v25);
      uint64_t v21 = *(void *)(v12 + 24);
      *(void *)(v12 + 24) = 0;
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      }
    }
LABEL_20:
    uint64_t v22 = v25;
    uint64_t v25 = 0;
    if (v22)
    {
      if (*v22 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v22 -= 2;
      }
    }

    uint64_t v23 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
  }
}

void sub_182521304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a10 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void wgpuRenderPassEncoderSetStencilReference(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3 = *(void *)(a1 + 152);
  if (*(unsigned char *)(v3 + 4) == 1)
  {
    uint64_t v5 = *(void **)(a1 + 16);
    if (v5 && *(void *)(v3 + 16))
    {
      if (WebGPU::CommandEncoder::encoderIsCurrent(v3, v5))
      {
        *(_DWORD *)(a1 + 496) = a2;
        *(unsigned char *)(a1 + 500) = 1;
        return;
      }
      uint64_t v5 = *(void **)(a1 + 16);
    }
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 32);
    long long v7 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::RenderPassEncoder::setStencilReference(uint32_t)");
    MEMORY[0x18530AF50](&v18, v7);
    uint64_t v8 = *(void *)(v6 + 32);
    uint64_t v9 = 32 * *(unsigned int *)(v6 + 44);
    uint64_t v10 = v8 + v9;
    while (v9)
    {
      int v11 = *(_DWORD *)(v10 - 8);
      v10 -= 32;
      v9 -= 32;
      if (!v11)
      {
        uint64_t v12 = v8 + v9;
        if (!*(unsigned char *)(v12 + 16))
        {
          int v13 = v18;
          uint64_t v18 = 0;
          *(_DWORD *)uint64_t v12 = 1;
          *(void *)(v12 + ++*(_DWORD *)(result + 8) = v13;
          *(unsigned char *)(v12 + 16) = 1;
        }
        goto LABEL_14;
      }
    }
    uint64_t v14 = *(void *)(v6 + 24);
    if (v14)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v14 + 16))(v14, 1, &v18);
      uint64_t v15 = *(void *)(v6 + 24);
      *(void *)(v6 + 24) = 0;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
    }
LABEL_14:
    uint64_t v16 = v18;
    uint64_t v18 = 0;
    if (v16)
    {
      if (*v16 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v16 -= 2;
      }
    }

    int v17 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
  }
}

void sub_182521518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a10 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void wgpuRenderPassEncoderSetVertexBuffer(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 152);
  if (*(unsigned char *)(v6 + 4) != 1)
  {
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::RenderPassEncoder::setVertexBuffer(uint32_t, const Buffer *, uint64_t, uint64_t)");
    MEMORY[0x18530AF50](&v66, v16);
    uint64_t v17 = *(void *)(v15 + 32);
    uint64_t v18 = 32 * *(unsigned int *)(v15 + 44);
    uint64_t v19 = v17 + v18;
    while (v18)
    {
      int v20 = *(_DWORD *)(v19 - 8);
      v19 -= 32;
      v18 -= 32;
      if (!v20)
      {
        uint64_t v21 = v17 + v18;
        if (!*(unsigned char *)(v21 + 16))
        {
          uint64_t v22 = v66;
          uint64_t v66 = 0;
          *(_DWORD *)uint64_t v21 = 1;
          *(void *)(v21 + ++*(_DWORD *)(result + 8) = v22;
          *(unsigned char *)(v21 + 16) = 1;
        }
        goto LABEL_22;
      }
    }
    uint64_t v23 = *(void *)(v15 + 24);
    if (v23)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v23 + 16))(v23, 1, &v66);
      uint64_t v24 = *(void *)(v15 + 24);
      *(void *)(v15 + 24) = 0;
      if (v24) {
        (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
      }
    }
LABEL_22:
    uint64_t v25 = v66;
    uint64_t v66 = 0;
    if (v25)
    {
      if (*v25 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v25 -= 2;
      }
    }

    uint64_t v26 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;

    return;
  }
  uint64_t v8 = *(void **)(a1 + 16);
  if (!v8 || !*(void *)(v6 + 16))
  {
LABEL_29:
    *(void *)(a1 + 16) = 0;

    return;
  }
  if (!WebGPU::CommandEncoder::encoderIsCurrent(v6, v8))
  {
    uint64_t v8 = *(void **)(a1 + 16);
    goto LABEL_29;
  }
  if (a3)
  {
    WebGPU::Buffer::setCommandEncoder((WebGPU::Buffer *)a3, *(WebGPU::CommandEncoder **)(a1 + 152));
    int v12 = *(unsigned __int8 *)(a3 + 52);
    if (v12 != 4 && !*(void *)(a3 + 16)
      || (uint64_t v13 = *(void *)(a3 + 280), !*(void *)(v13 + 8))
      || v13 != *(void *)(a1 + 32))
    {
      uint64_t v14 = @"setVertexBuffer: invalid buffer";
LABEL_11:
      WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, &v14->isa);
      return;
    }
    if (v12 == 4) {
      return;
    }
    if (a5 == -1)
    {
      unint64_t v34 = *(void *)(a3 + 40);
      BOOL v43 = v34 >= a4;
      unint64_t v35 = v34 - a4;
      if (!v43)
      {
LABEL_46:
        uint64_t v14 = @"setVertexBuffer: size overflowed";
        goto LABEL_11;
      }
      a5 = v35;
    }
    if (__CFADD__(a4, a5) || a4 + a5 > *(void *)(a3 + 40)) {
      goto LABEL_46;
    }
    if (*(_DWORD *)(v13 + 168) <= a2 || (a4 & 3) != 0 || (*(_DWORD *)(a3 + 48) & 0x20) == 0)
    {
      uint64_t v14 = @"setVertexBuffer: validation failed";
      goto LABEL_11;
    }
    unsigned int v44 = *(_DWORD *)(a1 + 80);
    if (a2 > v44) {
      unsigned int v44 = a2;
    }
    *(_DWORD *)(a1 + 80) = v44;
    id v45 = *(id *)(a3 + 16);
    unint64_t v46 = [v45 length];
    id v47 = (uint64_t *)(a1 + 392);
    id v65 = v45;
    uint64_t v48 = *(void *)(a1 + 392);
    if (v48
      || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebGPU::RenderPassEncoder::BufferAndOffset>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebGPU::RenderPassEncoder::BufferAndOffset>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebGPU::RenderPassEncoder::BufferAndOffset,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::RenderPassEncoder::BufferAndOffset>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)(a1 + 392), 8u), (uint64_t v48 = *v47) != 0))
    {
      unsigned int v49 = *(_DWORD *)(v48 - 8);
    }
    else
    {
      unsigned int v49 = 0;
    }
    unsigned int v50 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    uint64_t v51 = v49 & (((v50 ^ (v50 >> 6)) + ~((v50 ^ (v50 >> 6)) << 11)) ^ (((v50 ^ (v50 >> 6)) + ~((v50 ^ (v50 >> 6)) << 11)) >> 16));
    uint64_t v52 = (unsigned int *)(v48 + 32 * v51);
    unsigned int v53 = *v52;
    if (*v52 != -1)
    {
      unint64_t v54 = 0;
      int v55 = 1;
      do
      {
        if (v53 == a2)
        {
          unint64_t v59 = (void *)*((void *)v52 + 1);
          *((void *)v52 + 1) = v65;

          *((void *)v52 + 2) = a4;
          *((void *)v52 + 3) = a5;
          goto LABEL_92;
        }
        if (v53 == -2) {
          unint64_t v54 = v52;
        }
        uint64_t v51 = (v51 + v55) & v49;
        uint64_t v52 = (unsigned int *)(v48 + 32 * v51);
        unsigned int v53 = *v52;
        ++v55;
      }
      while (*v52 != -1);
      if (v54)
      {
        unsigned int *v54 = -1;
        *((void *)v54 + 2) = 0;
        *((void *)v54 + 3) = 0;
        *((void *)v54 + 1) = 0;
        --*(_DWORD *)(*v47 - 16);
        uint64_t v52 = v54;
      }
    }
    unsigned int *v52 = a2;
    unint64_t v56 = (void *)*((void *)v52 + 1);
    *((void *)v52 + 1) = v65;

    *((void *)v52 + 2) = a4;
    *((void *)v52 + 3) = a5;
    uint64_t v57 = *v47;
    if (*v47) {
      int v58 = *(_DWORD *)(v57 - 12) + 1;
    }
    else {
      int v58 = 1;
    }
    *(_DWORD *)(v57 - 12) = v58;
    uint64_t v60 = *v47;
    if (*v47) {
      int v61 = *(_DWORD *)(v60 - 12);
    }
    else {
      int v61 = 0;
    }
    uint64_t v62 = (*(_DWORD *)(v60 - 16) + v61);
    unint64_t v63 = *(unsigned int *)(v60 - 4);
    if (v63 > 0x400)
    {
      if (v63 > 2 * v62) {
        goto LABEL_92;
      }
    }
    else
    {
      if (3 * v63 > 4 * v62) {
        goto LABEL_92;
      }
      if (!v63)
      {
        unsigned int v64 = 8;
LABEL_91:
        WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebGPU::RenderPassEncoder::BufferAndOffset>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebGPU::RenderPassEncoder::BufferAndOffset>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebGPU::RenderPassEncoder::BufferAndOffset,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::RenderPassEncoder::BufferAndOffset>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)(a1 + 392), v64);
LABEL_92:
        if (a5 || v46 != a4)
        {
          if (v46 <= a4) {
            WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, &cfstr_Setvertexbuffe_4.isa);
          }
          else {
            WebGPU::RenderPassEncoder::addResourceToActiveResources((uint64_t *)a1, a3, v65, 1, 0, 0, 2u);
          }
        }

        return;
      }
    }
    unsigned int v64 = v63 << (6 * *(_DWORD *)(v60 - 12) >= (2 * v63));
    goto LABEL_91;
  }
  if (*(_DWORD *)(*(void *)(a1 + 32) + 108) >= a2)
  {
    uint64_t v27 = *(void *)(a1 + 392);
    if (v27)
    {
      unsigned int v28 = *(_DWORD *)(v27 - 8);
      unsigned int v29 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
      unsigned int v30 = (v29 ^ (v29 >> 6)) + ~((v29 ^ (v29 >> 6)) << 11);
      uint64_t v31 = v28 & (v30 ^ HIWORD(v30));
      int v32 = *(_DWORD *)(v27 + 32 * v31);
      if (v32 != a2)
      {
        int v33 = 1;
        while (v32 != -1)
        {
          uint64_t v31 = (v31 + v33) & v28;
          int v32 = *(_DWORD *)(v27 + 32 * v31);
          ++v33;
          if (v32 == a2) {
            goto LABEL_48;
          }
        }
        uint64_t v31 = *(unsigned int *)(v27 - 4);
      }
LABEL_48:
      if (v31 != *(_DWORD *)(v27 - 4))
      {
        uint64_t v36 = (uint64_t *)(a1 + 392);
        uint64_t v37 = v27 + 32 * v31;
        *(_DWORD *)uint64_t v37 = -2;

        ++*(_DWORD *)(*v36 - 16);
        uint64_t v38 = *v36;
        int v39 = *v36 ? *(_DWORD *)(v38 - 12) - 1 : -1;
        *(_DWORD *)(v38 - 12) = v39;
        uint64_t v40 = *v36;
        if (*v36)
        {
          unsigned int v41 = 6 * *(_DWORD *)(v40 - 12);
          unsigned int v42 = *(_DWORD *)(v40 - 4);
          BOOL v43 = v41 < v42 && v42 >= 9;
          if (v43)
          {
            WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebGPU::RenderPassEncoder::BufferAndOffset>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebGPU::RenderPassEncoder::BufferAndOffset>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebGPU::RenderPassEncoder::BufferAndOffset,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::RenderPassEncoder::BufferAndOffset>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v36, v42 >> 1);
          }
        }
      }
    }
  }
}

void sub_182521B7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182521B90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182521BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  if (a12)
  {
    if (*a12 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a12 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_182521BDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void wgpuRenderPassEncoderSetViewport(uint64_t a1, float a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v8 = *(void *)(a1 + 152);
  if (*(unsigned char *)(v8 + 4) == 1)
  {
    uint64_t v9 = *(void **)(a1 + 16);
    if (v9 && *(void *)(v8 + 16))
    {
      if (WebGPU::CommandEncoder::encoderIsCurrent(v8, v9))
      {
        if (a2 < 0.0
          || a3 < 0.0
          || a4 < 0.0
          || a5 < 0.0
          || (float)(a2 + a4) > (float)*(unsigned int *)(a1 + 208)
          || a6 > a7
          || a7 > 1.0
          || a6 < 0.0
          || (float)(a3 + a5) > (float)*(unsigned int *)(a1 + 212))
        {
          WebGPU::RenderPassEncoder::makeInvalid((WebGPU::RenderPassEncoder *)a1, 0);
        }
        else
        {
          *(float *)(a1 + 176) = a6;
          *(float *)(a1 + 180) = a7;
          *(float *)(a1 + 532) = a2;
          *(float *)(a1 + 536) = a3;
          *(float *)(a1 + 540) = a4;
          *(float *)(a1 + 544) = a5;
        }
        return;
      }
      uint64_t v9 = *(void **)(a1 + 16);
    }
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = objc_msgSend(NSString, "stringWithFormat:", @"%s: failed as encoding has finished", "void WebGPU::RenderPassEncoder::setViewport(float, float, float, float, float, float)");
    MEMORY[0x18530AF50](&v28, v17);
    uint64_t v18 = *(void *)(v16 + 32);
    uint64_t v19 = 32 * *(unsigned int *)(v16 + 44);
    uint64_t v20 = v18 + v19;
    while (v19)
    {
      int v21 = *(_DWORD *)(v20 - 8);
      v20 -= 32;
      v19 -= 32;
      if (!v21)
      {
        uint64_t v22 = v18 + v19;
        if (!*(unsigned char *)(v22 + 16))
        {
          uint64_t v23 = v28;
          unsigned int v28 = 0;
          *(_DWORD *)uint64_t v22 = 1;
          *(void *)(v22 + ++*(_DWORD *)(result + 8) = v23;
          *(unsigned char *)(v22 + 16) = 1;
        }
        goto LABEL_23;
      }
    }
    uint64_t v24 = *(void *)(v16 + 24);
    if (v24)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v24 + 16))(v24, 1, &v28);
      uint64_t v25 = *(void *)(v16 + 24);
      *(void *)(v16 + 24) = 0;
      if (v25) {
        (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
      }
    }
LABEL_23:
    uint64_t v26 = v28;
    unsigned int v28 = 0;
    if (v26)
    {
      if (*v26 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v26 -= 2;
      }
    }

    uint64_t v27 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
  }
}

void sub_182521E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *a10 -= 2;

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

_DWORD *wgpuRenderPassEncoderSetLabel(uint64_t a1, char *__s)
{
  if (__s) {
    strlen(__s);
  }
  WTF::String::fromUTF8();
  if (v5) {
    uint64_t v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v3 = &stru_1ECABF938;
  }
  [*(id *)(a1 + 16) setLabel:v3];

  id result = v5;
  if (v5)
  {
    if (*v5 == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *v5 -= 2;
    }
  }
  return result;
}

void sub_182521F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WebGPU::TextureView *WTF::RefCounted<WebGPU::TextureView>::deref(WebGPU::TextureView *result, void *a2)
{
  if (*(_DWORD *)result == 1)
  {
    WebGPU::TextureView::~TextureView(result, a2);
    return (WebGPU::TextureView *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_OWORD *WTF::HashMap<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::HashTableTraits>::inlineSet<unsigned long long const&,WTF::OptionSet<WebGPU::BindGroupEntryUsage>&>(_OWORD *result, uint64_t *a2, uint64_t *a3, _DWORD *a4)
{
  long long v7 = result;
  uint64_t v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(a2, 8u, 0), (uint64_t v8 = *a2) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a3;
  unint64_t v12 = *a3 + ~(*a3 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (_OWORD *)(v8 + 16 * v15);
  uint64_t v17 = *(void *)v16;
  if (*(void *)v16 == -1)
  {
LABEL_12:
    *(void *)uint64_t v16 = v11;
    *((_DWORD *)v16 + 2) = *a4;
    if (*a2)
    {
      ++*(_DWORD *)(*a2 - 12);
      uint64_t v20 = *a2;
      if (*a2) {
        goto LABEL_14;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      uint64_t v20 = *a2;
      if (*a2)
      {
LABEL_14:
        uint64_t v21 = (*(_DWORD *)(v20 - 16) + *(_DWORD *)(v20 - 12));
        unint64_t v22 = *(unsigned int *)(v20 - 4);
        if (v22 <= 0x400) {
          goto LABEL_15;
        }
        goto LABEL_23;
      }
    }
    uint64_t v21 = *(unsigned int *)(v20 - 16);
    unint64_t v22 = *(unsigned int *)(v20 - 4);
    if (v22 <= 0x400)
    {
LABEL_15:
      if (3 * v22 > 4 * v21)
      {
LABEL_26:
        *(void *)long long v7 = v16;
        *((void *)v7 + 1) = v20 + 16 * v22;
        *((unsigned char *)v7 + 16) = 1;
        return result;
      }
      if (!v22)
      {
        id result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(a2, 8u, v16);
        uint64_t v16 = result;
        uint64_t v20 = *a2;
        if (!*a2)
        {
LABEL_18:
          unint64_t v22 = 0;
          goto LABEL_26;
        }
LABEL_25:
        unint64_t v22 = *(unsigned int *)(v20 - 4);
        goto LABEL_26;
      }
LABEL_24:
      id result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(a2, v22 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v22)), v16);
      uint64_t v16 = result;
      uint64_t v20 = *a2;
      if (!*a2) {
        goto LABEL_18;
      }
      goto LABEL_25;
    }
LABEL_23:
    if (v22 > 2 * v21) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  uint64_t v18 = 0;
  int v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -2) {
      uint64_t v18 = v16;
    }
    unsigned int v15 = (v15 + v19) & v10;
    uint64_t v16 = (_OWORD *)(v8 + 16 * v15);
    uint64_t v17 = *(void *)v16;
    ++v19;
    if (*(void *)v16 == -1)
    {
      if (v18)
      {
        *(void *)uint64_t v18 = -1;
        *((_DWORD *)v18 + 2) = 0;
        --*(_DWORD *)(*a2 - 16);
        uint64_t v11 = *a3;
        uint64_t v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if (v9) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = *(unsigned int *)(v8 - 4);
  }
  *(void *)long long v7 = v16;
  *((void *)v7 + 1) = v8 + 16 * v23;
  *((unsigned char *)v7 + 16) = 0;
  *((_DWORD *)v16 + 2) = *a4;
  return result;
}

_OWORD *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
    uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    uint64_t v11 = v9 + 16;
    if (!a2) {
      goto LABEL_7;
    }
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
    uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    uint64_t v11 = v9 + 16;
    if (!a2) {
      goto LABEL_7;
    }
  }
  uint64_t v12 = a2;
  unint64_t v13 = (_DWORD *)(v9 + 24);
  do
  {
    *((void *)v13 - 1) = -1;
    *unint64_t v13 = 0;
    v13 += 4;
    --v12;
  }
  while (v12);
LABEL_7:
  *a1 = v11;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(result + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v14 = 0;
    unsigned int v15 = 0;
    do
    {
      uint64_t v16 = (void *)(v6 + 16 * v14);
      if (*v16 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v17 = *a1;
        if (*a1) {
          int v18 = *(_DWORD *)(v17 - 8);
        }
        else {
          int v18 = 0;
        }
        uint64_t v19 = (*v16 + ~(*v16 << 32)) ^ ((*v16 + ~(*v16 << 32)) >> 22);
        unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((unint64_t)(v19 + ~(v19 << 13)) >> 8));
        unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
        unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
        int v23 = 1;
        do
        {
          unsigned int v24 = v22;
          uint64_t v25 = *(void *)(v17 + 16 * v22);
          unsigned int v22 = (v22 + v23++) & v18;
        }
        while (v25 != -1);
        uint64_t v26 = (_OWORD *)(v17 + 16 * v24);
        *uint64_t v26 = *(_OWORD *)v16;
        if (v16 == a3) {
          unsigned int v15 = v26;
        }
      }
      ++v14;
    }
    while (v14 != v7);
  }
  else
  {
    unsigned int v15 = 0;
    id result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v15;
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::OptionSet<WebGPU::BindGroupEntryUsage>,WTF::DefaultHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<WTF::OptionSet<WebGPU::BindGroupEntryUsage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::HashTable(uint64_t *a1, void *a2)
{
  *a1 = 0;
  if (!*a2) {
    return a1;
  }
  uint64_t v3 = *(unsigned int *)(*a2 - 12);
  if (!v3) {
    return a1;
  }
  unsigned int v5 = (v3 - 1) | ((v3 - 1) >> 1) | (((v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  unsigned int v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  unint64_t v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  if (3 * v7 <= 4 * v3)
  {
LABEL_7:
    LODWORD(v7) = 2 * v7;
    if (v7 <= 0x400) {
      goto LABEL_8;
    }
LABEL_10:
    if ((double)v7 * 0.416666667 > (double)v3) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_8:
  if ((double)v7 * 0.604166667 <= (double)v3) {
LABEL_11:
  }
    LODWORD(v7) = 2 * v7;
LABEL_12:
  if (v7 <= 8) {
    uint64_t v8 = 8;
  }
  else {
    uint64_t v8 = v7;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * v8 + 16));
  int v10 = (_DWORD *)(v9 + 24);
  uint64_t v11 = v8;
  do
  {
    *((void *)v10 - 1) = -1;
    *int v10 = 0;
    v10 += 4;
    --v11;
  }
  while (v11);
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = v8;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(result + 8) = v8 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  uint64_t v12 = (void *)*a2;
  if (!*a2)
  {
    unsigned int v15 = 0;
    uint64_t v14 = 0;
    goto LABEL_26;
  }
  uint64_t v13 = *((unsigned int *)v12 - 1);
  uint64_t v14 = &v12[2 * v13];
  if (*((_DWORD *)v12 - 3))
  {
    unsigned int v15 = (void *)*a2;
    if (v13)
    {
      uint64_t v16 = 16 * v13;
      unsigned int v15 = (void *)*a2;
      while (*v15 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v15 += 2;
        v16 -= 16;
        if (!v16)
        {
          unsigned int v15 = v14;
          if (v12) {
            goto LABEL_27;
          }
          goto LABEL_28;
        }
      }
    }
LABEL_26:
    if (!v12) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  unsigned int v15 = &v12[2 * v13];
  uint64_t v14 = v15;
  if (v12) {
LABEL_27:
  }
    v12 += 2 * *((unsigned int *)v12 - 1);
LABEL_28:
  while (v15 != v12)
  {
    uint64_t v17 = *a1;
    if (*a1) {
      int v18 = *(_DWORD *)(v17 - 8);
    }
    else {
      int v18 = 0;
    }
    unint64_t v19 = *v15 + ~(*v15 << 32);
    unint64_t v20 = (v19 ^ (v19 >> 22)) + ~((v19 ^ (v19 >> 22)) << 13);
    unint64_t v21 = (9 * (v20 ^ (v20 >> 8))) ^ ((9 * (v20 ^ (v20 >> 8))) >> 15);
    unsigned int v22 = v18 & (((v21 + ~(v21 << 27)) >> 31) ^ (v21 + ~(v21 << 27)));
    int v23 = 1;
    do
    {
      unsigned int v24 = v22;
      uint64_t v25 = *(void *)(v17 + 16 * v22);
      unsigned int v22 = (v22 + v23++) & v18;
    }
    while (v25 != -1);
    uint64_t v26 = v17 + 16 * v24;
    uint64_t v27 = v15[1];
    *(void *)uint64_t v26 = *v15;
    *(_DWORD *)(v26 + ++*(_DWORD *)(result + 8) = v27;
    unsigned int v28 = v15 + 2;
    unsigned int v15 = v14;
    if (v28 != v14)
    {
      unsigned int v15 = v28;
      while (*v15 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v15 += 2;
        if (v15 == v14)
        {
          unsigned int v15 = v14;
          break;
        }
      }
    }
  }
  return a1;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebGPU::RenderPassEncoder::BufferAndOffset>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebGPU::RenderPassEncoder::BufferAndOffset>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebGPU::RenderPassEncoder::BufferAndOffset,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::RenderPassEncoder::BufferAndOffset>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    uint64_t v7 = a2;
    uint64_t result = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
    uint64_t v10 = result + 16;
    if (!a2) {
      goto LABEL_7;
    }
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
    uint64_t v7 = a2;
    uint64_t result = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
    uint64_t v10 = result + 16;
    if (!a2) {
      goto LABEL_7;
    }
  }
  uint64_t v11 = (void *)(result + 24);
  do
  {
    *((_DWORD *)v11 - 2) = -1;
    v11[1] = 0;
    _OWORD v11[2] = 0;
    *uint64_t v11 = 0;
    v11 += 4;
    --v7;
  }
  while (v7);
LABEL_7:
  *a1 = v10;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(result + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v13 = (int *)(v4 + 32 * i);
      int v14 = *v13;
      if (*v13 != -2)
      {
        if (v14 == -1)
        {
        }
        else
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          int v17 = 0;
          unsigned int v18 = 9 * ((v14 + ~(v14 << 15)) ^ ((v14 + ~(v14 << 15)) >> 10));
          unsigned int v19 = ((v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11)) ^ (((v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11)) >> 16);
          do
          {
            uint64_t v20 = v19 & v16;
            unsigned int v19 = ++v17 + v20;
          }
          while (*(_DWORD *)(v15 + 32 * v20) != -1);
          uint64_t v21 = v15 + 32 * v20;

          *(_DWORD *)uint64_t v21 = *v13;
          uint64_t v22 = v4 + 32 * i;
          uint64_t v23 = *(void *)(v22 + 8);
          *(void *)(v22 + ++*(_DWORD *)(result + 8) = 0;
          *(void *)(v21 + ++*(_DWORD *)(result + 8) = v23;
          *(_OWORD *)(v21 + 16) = *(_OWORD *)(v22 + 16);
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v9);
}

__CFString *WebGPU::Device::addPipelineLayouts(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  if (!*((unsigned char *)a3 + 16)) {
    goto LABEL_138;
  }
  uint64_t v4 = *((unsigned int *)a3 + 3);
  if (!v4) {
    goto LABEL_138;
  }
  int v6 = *a3;
  uint64_t v7 = 6 * v4;
  uint64_t v8 = (uint64_t)&(*a3)[v7];
  unint64_t v9 = v7 * 4 - 24;
  if (v9 >= 0x18)
  {
    unsigned int v10 = 0;
    unsigned int v13 = 0;
    unint64_t v14 = v9 / 0x18 + 1;
    uint64_t v12 = &v6[6 * (v14 & 0x1FFFFFFFFFFFFFFELL)];
    uint64_t v15 = v14 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v11 = *a3;
    do
    {
      if (v10 <= *v6) {
        unsigned int v10 = *v6;
      }
      if (v13 <= v6[6]) {
        unsigned int v13 = v6[6];
      }
      v6 += 12;
      v15 -= 2;
    }
    while (v15);
    if (v10 <= v13) {
      unsigned int v10 = v13;
    }
    if (v14 == (v14 & 0x1FFFFFFFFFFFFFFELL)) {
      goto LABEL_17;
    }
  }
  else
  {
    unsigned int v10 = 0;
    uint64_t v11 = *a3;
    uint64_t v12 = *a3;
  }
  do
  {
    unsigned int v17 = *v12;
    v12 += 6;
    unsigned int v16 = v17;
    if (v10 <= v17) {
      unsigned int v10 = v16;
    }
  }
  while (v12 != (unsigned int *)v8);
LABEL_17:
  unint64_t v18 = v10 + 1;
  uint64_t v19 = *(unsigned int *)(a1 + 104);
  if (v10 >= v19)
  {
    int v32 = [NSString stringWithFormat:@"too many bind groups, limit %u, attempted %zu", v19, v18];
    goto LABEL_139;
  }
  uint64_t v20 = *(unsigned int *)(a2 + 12);
  if (v20 > v10) {
    goto LABEL_44;
  }
  unint64_t v21 = *(unsigned int *)(a2 + 8);
  uint64_t v22 = *(WTF **)a2;
  if (v10 >= v21)
  {
    unint64_t v23 = v21 + (v21 >> 2);
    if (v23 >= 0x10) {
      unint64_t v24 = v23 + 1;
    }
    else {
      unint64_t v24 = 16;
    }
    if (v24 <= v18) {
      unint64_t v25 = v10 + 1;
    }
    else {
      unint64_t v25 = v24;
    }
    if (v25 >> 28)
    {
      __break(0xC471u);
      goto LABEL_146;
    }
    uint64_t v27 = WTF::fastMalloc((WTF *)(16 * v25));
    *(_DWORD *)(a2 + ++*(_DWORD *)(result + 8) = v25;
    *(void *)a2 = v27;
    if (v20)
    {
      uint64_t v28 = 16 * v20;
      unsigned int v29 = (_DWORD *)((char *)v22 + 8);
      do
      {
        *(void *)uint64_t v27 = 0;
        *(void *)(v27 + ++*(_DWORD *)(result + 8) = 0;
        uint64_t v30 = *((void *)v29 - 1);
        *((void *)v29 - 1) = 0;
        *(void *)uint64_t v27 = v30;
        LODWORD(v30) = *v29;
        *unsigned int v29 = 0;
        *(_DWORD *)(v27 + ++*(_DWORD *)(result + 8) = v30;
        LODWORD(v30) = v29[1];
        v29[1] = 0;
        *(_DWORD *)(v27 + 12) = v30;
        uint64_t v31 = (WTF *)*((void *)v29 - 1);
        if (v31)
        {
          *((void *)v29 - 1) = 0;
          *unsigned int v29 = 0;
          WTF::fastFree(v31, v26);
        }
        v29 += 4;
        v27 += 16;
        v28 -= 16;
      }
      while (v28);
      uint64_t v27 = *(void *)a2;
    }
    if (v22)
    {
      if ((WTF *)v27 == v22)
      {
        *(void *)a2 = 0;
        *(_DWORD *)(a2 + ++*(_DWORD *)(result + 8) = 0;
      }
      WTF::fastFree(v22, v26);
      uint64_t v22 = *(WTF **)a2;
    }
    else
    {
      uint64_t v22 = (WTF *)v27;
    }
  }
  if (v22)
  {
    uint64_t v33 = *(unsigned int *)(a2 + 12);
    if (v18 != v33) {
      bzero((char *)v22 + 16 * v33, (16 * v18 - 16 * v33) & 0xFFFFFFFFFFFFFFF0);
    }
  }
  *(_DWORD *)(a2 + 12) = v18;
  int v34 = *((_DWORD *)a3 + 3);
  if (v34)
  {
    uint64_t v11 = *a3;
    uint64_t v8 = (uint64_t)&(*a3)[6 * v34];
LABEL_44:
    uint64_t v102 = v8;
    uint64_t v103 = a2;
    do
    {
      uint64_t v35 = *v11;
      if (*(_DWORD *)(a2 + 12) <= v35)
      {
        __break(0xC471u);
        JUMPOUT(0x182523014);
      }
      uint64_t v36 = *(WTF **)a2;
      v119[0] = 0;
      unsigned int v37 = v11[5];
      if (!v37) {
        goto LABEL_46;
      }
      uint64_t v38 = (char **)((char *)v36 + 16 * v35);
      uint64_t v39 = *((void *)v11 + 1);
      uint64_t v40 = v39 + 120 * v37;
      uint64_t v104 = v11;
      uint64_t v105 = v40;
      while (2)
      {
        unint64_t v48 = *(unsigned __int8 *)(v39 + 8);
        int v106 = v48 & 7;
        uint64_t v49 = (v48 >> 1) & 3;
        long long v117 = 0u;
        long long v118 = 0u;
        long long v115 = 0u;
        long long v116 = 0u;
        long long v114 = 0u;
        long long v112 = 0u;
        long long v113 = 0u;
        long long v111 = 0u;
        unint64_t v50 = *((unsigned int *)v38 + 3);
        if (v50)
        {
          unint64_t v51 = 0;
          uint64_t v52 = *v38;
          while (*((_DWORD *)v52 + 2) != *(_DWORD *)(v39 + 4))
          {
            ++v51;
            v52 += 128;
            if (v50 == v51) {
              goto LABEL_57;
            }
          }
          if (v51 < v50)
          {
            *((_DWORD *)v52 + 6) |= v106;
            *(_DWORD *)&v52[4 * v49 + 12] = *(_DWORD *)v39;
            if (v51 >= *((unsigned int *)v38 + 3))
            {
              __break(0xC471u);
              JUMPOUT(0x18252300CLL);
            }
            int v110 = 0;
            *(_OWORD *)unint64_t v108 = 0u;
            long long v109 = 0u;
            if (*((_DWORD *)v52 + 10))
            {
              long long v58 = *((_OWORD *)v52 + 3);
              *(_OWORD *)unint64_t v108 = *((_OWORD *)v52 + 2);
              long long v109 = v58;
              goto LABEL_99;
            }
            if (*((_DWORD *)v52 + 18))
            {
              *(_OWORD *)unint64_t v108 = *((_OWORD *)v52 + 4);
              int v64 = 1;
              goto LABEL_98;
            }
            if (*((_DWORD *)v52 + 22) && *((_DWORD *)v52 + 23))
            {
              long long v68 = *((_OWORD *)v52 + 5);
              *(void *)&long long v109 = *((void *)v52 + 12);
              *(_OWORD *)unint64_t v108 = v68;
              int v64 = 2;
              goto LABEL_98;
            }
            if (*((_DWORD *)v52 + 28) && *((_DWORD *)v52 + 29) && *((_DWORD *)v52 + 30))
            {
              long long v73 = *(_OWORD *)(v52 + 104);
              *(void *)&long long v109 = *((void *)v52 + 15);
              *(_OWORD *)unint64_t v108 = v73;
              int v64 = 3;
LABEL_98:
              int v110 = v64;
            }
LABEL_99:
            ((void (*)(unsigned char *, long long *, uint64_t, void, void))WebGPU::makeBindingLayout<std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const>)(v107, &v111, v39 + 16, 0, 0);
            if (((uint64_t (*)(WTF::StringImpl **, unsigned char *))WebGPU::BindGroupLayout::equalBindingEntries)(v108, v107))goto LABEL_52; {
            char v96 = 0;
            }
            uint64_t v97 = v119[0];
            if (!v119[0]) {
              goto LABEL_136;
            }
LABEL_127:
            uint64_t v98 = *(unsigned int *)(v97 - 4);
            a2 = v103;
            if (v98)
            {
              int v99 = (_DWORD **)v97;
              do
              {
                uint64_t v100 = *v99;
                if (*v99 != (_DWORD *)-1)
                {
                  WTF *v99 = 0;
                  if (v100)
                  {
                    if (*v100 == 2) {
                      WTF::StringImpl::destroy();
                    }
                    else {
                      *v100 -= 2;
                    }
                  }
                }
                v99 += 2;
                --v98;
              }
              while (v98);
            }
            WTF::fastFree((WTF *)(v97 - 16), v74);
            uint64_t v11 = v104;
            uint64_t v8 = v102;
            if ((v96 & 1) == 0) {
              goto LABEL_137;
            }
            goto LABEL_46;
          }
          __break(0xC471u);
LABEL_146:
          JUMPOUT(0x182523004);
        }
LABEL_57:
        uint64_t v53 = *(void *)(v39 + 40);
        if (!v53 || !*(_DWORD *)(v53 + 4)) {
          goto LABEL_123;
        }
        if (WTF::StringImpl::endsWith())
        {
          int v55 = *(WTF::StringImpl **)(v39 + 40);
          if (v55)
          {
            WTF::StringImpl::substring(v55);
            unint64_t v56 = v108[0];
            uint64_t v57 = v119[0];
            if (!v119[0]) {
              goto LABEL_89;
            }
          }
          else
          {
            unint64_t v56 = 0;
            uint64_t v57 = v119[0];
            if (!v119[0])
            {
LABEL_89:
              if (v56)
              {
                if (*(_DWORD *)v56 == 2) {
                  WTF::StringImpl::destroy();
                }
                else {
                  *(_DWORD *)v56 -= 2;
                }
              }
              uint64_t v72 = 2147483644;
              goto LABEL_124;
            }
          }
          int v65 = *(_DWORD *)(v57 - 8);
          unsigned int v66 = *((_DWORD *)v56 + 4);
          if (v66 < 0x100) {
            unsigned int v67 = WTF::StringImpl::hashSlowCase(v56);
          }
          else {
            unsigned int v67 = v66 >> 8;
          }
          for (int i = 0; ; v67 = i + v70)
          {
            uint64_t v70 = v67 & v65;
            double v71 = *(WTF **)(v57 + 16 * v70);
            if (v71 != (WTF *)-1)
            {
              if (!v71) {
                goto LABEL_87;
              }
              if (WTF::equal(v71, v56, v54)) {
                break;
              }
            }
            ++i;
          }
          if (v70 != *(_DWORD *)(v57 - 4))
          {
            uint64_t v57 = *(void *)(v57 + 16 * v70 + 8);
            goto LABEL_88;
          }
LABEL_87:
          uint64_t v57 = 0;
LABEL_88:
          uint64_t v40 = v105;
          goto LABEL_89;
        }
        uint64_t v59 = v119[0];
        if (v119[0]
          || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned long long>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned long long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v119, 8u), (uint64_t v59 = v119[0]) != 0))
        {
          int v60 = *(_DWORD *)(v59 - 8);
          int v61 = *(WTF::StringImpl **)(v39 + 40);
          unsigned int v62 = *((_DWORD *)v61 + 4);
          if (v62 < 0x100) {
            goto LABEL_102;
          }
        }
        else
        {
          int v60 = 0;
          int v61 = *(WTF::StringImpl **)(v39 + 40);
          unsigned int v62 = *((_DWORD *)v61 + 4);
          if (v62 < 0x100)
          {
LABEL_102:
            unsigned int v63 = WTF::StringImpl::hashSlowCase(v61);
            goto LABEL_103;
          }
        }
        unsigned int v63 = v62 >> 8;
LABEL_103:
        uint64_t v75 = 0;
        for (int j = 1; ; ++j)
        {
          uint64_t v77 = v63 & v60;
          int v78 = (WTF **)(v59 + 16 * v77);
          int v79 = *v78;
          if (*v78 == (WTF *)-1)
          {
            uint64_t v75 = (WTF **)(v59 + 16 * v77);
            goto LABEL_105;
          }
          if (!v79) {
            break;
          }
          if (WTF::equal(v79, *(const WTF::StringImpl **)(v39 + 40), v54))
          {
            uint64_t v57 = 0;
            uint64_t v72 = 0;
            *(void *)(v59 + 16 * v77 + ++*(_DWORD *)(result + 8) = *(unsigned int *)(v39 + 4);
            uint64_t v40 = v105;
            goto LABEL_124;
          }
LABEL_105:
          unsigned int v63 = j + v77;
        }
        if (v75)
        {
          uint64_t *v75 = 0;
          v75[1] = 0;
          --*(_DWORD *)(v59 - 16);
          int v78 = v75;
        }
        int v80 = *(WTF **)(v39 + 40);
        uint64_t v40 = v105;
        if (v80) {
          *(_DWORD *)v80 += 2;
        }
        void *v78 = v80;
        v78[1] = (WTF *)*(unsigned int *)(v39 + 4);
        uint64_t v81 = v119[0];
        if (v119[0])
        {
          int v82 = *(_DWORD *)(v119[0] - 16);
          int v83 = *(_DWORD *)(v119[0] - 12) + 1;
          *(_DWORD *)(v119[0] - 12) = v83;
          uint64_t v84 = (v82 + v83);
          unint64_t v85 = *(unsigned int *)(v81 - 4);
          if (v85 <= 0x400) {
            goto LABEL_116;
          }
LABEL_120:
          if (v85 <= 2 * v84)
          {
LABEL_121:
            unsigned int v86 = v85 << (6 * v83 >= (2 * v85));
            goto LABEL_122;
          }
        }
        else
        {
          int v83 = 1;
          MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
          uint64_t v84 = (MEMORY[0xFFFFFFFFFFFFFFF0] + 1);
          unint64_t v85 = MEMORY[0xFFFFFFFFFFFFFFFC];
          if (MEMORY[0xFFFFFFFFFFFFFFFC] > 0x400u) {
            goto LABEL_120;
          }
LABEL_116:
          if (3 * v85 <= 4 * v84)
          {
            if (v85) {
              goto LABEL_121;
            }
            unsigned int v86 = 8;
LABEL_122:
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned long long>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned long long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v119, v86);
          }
        }
LABEL_123:
        uint64_t v57 = 0;
        uint64_t v72 = 0;
LABEL_124:
        DWORD2(v111) = *(_DWORD *)(v39 + 4);
        *(_DWORD *)(((unint64_t)&v111 | (4 * v49)) + 0xC) = *(_DWORD *)v39;
        DWORD2(v112) = v106;
        ((void (*)(WTF::StringImpl **, long long *, uint64_t, uint64_t, uint64_t))WebGPU::makeBindingLayout<std::variant<WGSL::BufferBindingLayout,WGSL::SamplerBindingLayout,WGSL::TextureBindingLayout,WGSL::StorageTextureBindingLayout,WGSL::ExternalTextureBindingLayout> const>)(v108, &v111, v39 + 16, v72, v57);
        uint64_t v87 = *((unsigned int *)v38 + 3);
        if (v87 == *((_DWORD *)v38 + 2))
        {
          uint64_t v88 = WTF::Vector<WGPUBindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v38, v87 + 1, (unint64_t)&v111);
          uint64_t v89 = &(*v38)[128 * (unint64_t)*((unsigned int *)v38 + 3)];
          long long v90 = *((_OWORD *)v88 + 7);
          long long v92 = *((_OWORD *)v88 + 4);
          long long v91 = *((_OWORD *)v88 + 5);
          *((_OWORD *)v89 + 6) = *((_OWORD *)v88 + 6);
          *((_OWORD *)v89 + 7) = v90;
          *((_OWORD *)v89 + 4) = v92;
          *((_OWORD *)v89 + 5) = v91;
          long long v93 = *(_OWORD *)v88;
          long long v94 = *((_OWORD *)v88 + 1);
          long long v95 = *((_OWORD *)v88 + 3);
          *((_OWORD *)v89 + 2) = *((_OWORD *)v88 + 2);
          *((_OWORD *)v89 + 3) = v95;
          *(_OWORD *)uint64_t v89 = v93;
          *((_OWORD *)v89 + 1) = v94;
        }
        else
        {
          unsigned int v41 = &(*v38)[128 * v87];
          long long v42 = v111;
          long long v43 = v112;
          long long v44 = v114;
          *((_OWORD *)v41 + 2) = v113;
          *((_OWORD *)v41 + 3) = v44;
          *(_OWORD *)unsigned int v41 = v42;
          *((_OWORD *)v41 + 1) = v43;
          long long v45 = v115;
          long long v46 = v116;
          long long v47 = v118;
          *((_OWORD *)v41 + 6) = v117;
          *((_OWORD *)v41 + 7) = v47;
          *((_OWORD *)v41 + 4) = v45;
          *((_OWORD *)v41 + 5) = v46;
        }
        ++*((_DWORD *)v38 + 3);
LABEL_52:
        v39 += 120;
        if (v39 != v40) {
          continue;
        }
        break;
      }
      char v96 = 1;
      uint64_t v97 = v119[0];
      if (v119[0]) {
        goto LABEL_127;
      }
LABEL_136:
      a2 = v103;
      uint64_t v11 = v104;
      uint64_t v8 = v102;
      if ((v96 & 1) == 0)
      {
LABEL_137:
        int v32 = @"Binding mismatch in auto-generated layouts";
        goto LABEL_139;
      }
LABEL_46:
      v11 += 6;
    }
    while (v11 != (unsigned int *)v8);
  }
LABEL_138:
  int v32 = 0;
LABEL_139:
  return v32;
}

void sub_182523020(_Unwind_Exception *a1, void *a2)
{
  if (*v2 == 2)
  {
    WTF::StringImpl::destroy();
    WTF::HashMap<WTF::String,unsigned long long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::~HashMap((void *)(v3 - 104), v5);
    _Unwind_Resume(a1);
  }
  *v2 -= 2;
  WTF::HashMap<WTF::String,unsigned long long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::~HashMap((void *)(v3 - 104), a2);
  _Unwind_Resume(a1);
}

void *WTF::HashMap<WTF::String,unsigned long long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::~HashMap(void *a1, void *a2)
{
  uint64_t v3 = (_DWORD **)*a1;
  if (*a1)
  {
    uint64_t v4 = *((unsigned int *)v3 - 1);
    if (v4)
    {
      int v5 = (_DWORD **)*a1;
      do
      {
        int v6 = *v5;
        if (*v5 != (_DWORD *)-1)
        {
          *int v5 = 0;
          if (v6)
          {
            if (*v6 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v6 -= 2;
            }
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  return a1;
}

WTF *WebGPU::Device::generatePipelineLayout@<X0>(atomic_uchar *volatile *a1@<X0>, void ***a2@<X1>, WebGPU::PipelineLayout *a3@<X8>)
{
  long long v45 = 0;
  uint64_t v46 = 0;
  uint64_t v5 = *((unsigned int *)a2 + 3);
  if (!v5) {
    goto LABEL_38;
  }
  if (v5 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x182523620);
  }
  LODWORD(v46) = *((_DWORD *)a2 + 3);
  long long v45 = (WTF *)WTF::fastMalloc((WTF *)(8 * v5));
  unint64_t v7 = *((unsigned int *)a2 + 3);
  if (!v7)
  {
LABEL_38:
    uint64_t v8 = 0;
LABEL_39:
    uint64_t v41 = 0;
    long long v42 = "generated pipeline layout";
    uint64_t v43 = 0;
    goto LABEL_40;
  }
  if (v7 >> 29)
  {
    __break(0xC471u);
LABEL_60:
    JUMPOUT(0x182523610);
  }
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)(8 * v7));
  uint64_t v9 = *((unsigned int *)a2 + 3);
  if (!v9) {
    goto LABEL_39;
  }
  uint64_t v39 = a3;
  unsigned int v10 = 0;
  uint64_t v11 = *a2;
  uint64_t v12 = 16 * v9;
  do
  {
    uint64_t v41 = 0;
    long long v42 = "getBindGroup() generated layout";
    uint64_t v43 = *((unsigned int *)v11 + 3);
    if (v43) {
      unsigned int v16 = *v11;
    }
    else {
      unsigned int v16 = 0;
    }
    long long v44 = v16;
    WebGPU::Device::createBindGroupLayout((uint64_t)a1, (uint64_t)&v41, 1, (WebGPU::BindGroupLayout *)&v40);
    unsigned int v17 = v40;
    int v18 = *((unsigned __int8 *)v40 + 72);
    if (*((unsigned char *)v40 + 72))
    {
      LODWORD(v19) = HIDWORD(v46);
      if (HIDWORD(v46) == v46)
      {
        uint64_t v20 = (uint64_t *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v45, HIDWORD(v46) + 1, (unint64_t)&v40);
        uint64_t v19 = HIDWORD(v46);
        unint64_t v21 = v45;
        uint64_t v22 = *v20;
        *uint64_t v20 = 0;
        *((void *)v21 + v19) = v22;
      }
      else
      {
        uint64_t v40 = 0;
        *((void *)v45 + HIDWORD(v46)) = v17;
      }
      BOOL v25 = __CFADD__(v19, 1);
      unsigned int v26 = v19 + 1;
      HIDWORD(v46) = v26;
      if (v25)
      {
        __break(0xC471u);
        goto LABEL_60;
      }
      uint64_t v27 = *((void *)v45 + v26 - 1);
      uint64_t v28 = v10;
      if (v10 == v7)
      {
        unint64_t v29 = v10 + ((unint64_t)v10 >> 2);
        if (v29 >= 0x10) {
          unint64_t v30 = v29 + 1;
        }
        else {
          unint64_t v30 = 16;
        }
        if (v30 <= (unint64_t)v10 + 1) {
          unint64_t v7 = v10 + 1;
        }
        else {
          unint64_t v7 = v30;
        }
        if (v7 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x182523618);
        }
        uint64_t v31 = (void *)WTF::fastMalloc((WTF *)(8 * v7));
        memcpy(v31, v8, 8 * v10);
        if (v8)
        {
          if (v31 == v8)
          {
            LODWORD(v7) = 0;
            uint64_t v31 = 0;
          }
          WTF::fastFree((WTF *)v8, v15);
        }
        ++v10;
        *((void *)v31 + v2++*(_DWORD *)(result + 8) = v27;
        uint64_t v8 = v31;
        unint64_t v24 = v40;
        uint64_t v40 = 0;
        if (!v24) {
          goto LABEL_8;
        }
      }
      else
      {
        ++v10;
        *((void *)v8 + v2++*(_DWORD *)(result + 8) = v27;
        unint64_t v24 = v40;
        uint64_t v40 = 0;
        if (!v24) {
          goto LABEL_8;
        }
      }
    }
    else
    {
      unint64_t v23 = (WebGPU::PipelineLayout *)WTF::fastMalloc((WTF *)0x68);
      WebGPU::PipelineLayout::PipelineLayout(v23, a1);
      unint64_t v24 = v40;
      *(void *)uint64_t v39 = v23;
      uint64_t v40 = 0;
      if (!v24) {
        goto LABEL_8;
      }
    }
    if (*(_DWORD *)v24 == 1)
    {
      WebGPU::BindGroupLayout::~BindGroupLayout(v24, v15);
      WTF::fastFree(v13, v14);
LABEL_8:
      if (!v18) {
        goto LABEL_42;
      }
      goto LABEL_9;
    }
    --*(_DWORD *)v24;
    if (!v18) {
      goto LABEL_42;
    }
LABEL_9:
    v11 += 2;
    v12 -= 16;
  }
  while (v12);
  uint64_t v41 = 0;
  long long v42 = "generated pipeline layout";
  uint64_t v43 = v10;
  int v32 = v8;
  a3 = v39;
  if (!v10) {
LABEL_40:
  }
    int v32 = 0;
  long long v44 = v32;
  WebGPU::Device::createPipelineLayout((uint64_t)a1, &v41, (NSString *)1, a3);
LABEL_42:
  if (HIDWORD(v46))
  {
    uint64_t v33 = v45;
    uint64_t v34 = 8 * HIDWORD(v46);
    do
    {
      uint64_t v35 = *(WebGPU::BindGroupLayout **)v33;
      *(void *)uint64_t v33 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 1)
        {
          WebGPU::BindGroupLayout::~BindGroupLayout(v35, v15);
          WTF::fastFree(v36, v37);
        }
        else
        {
          --*(_DWORD *)v35;
        }
      }
      uint64_t v33 = (WTF *)((char *)v33 + 8);
      v34 -= 8;
    }
    while (v34);
  }
  uint64_t result = v45;
  if (v45)
  {
    long long v45 = 0;
    LODWORD(v46) = 0;
    uint64_t result = (WTF *)WTF::fastFree(result, v15);
  }
  if (v8) {
    return (WTF *)WTF::fastFree((WTF *)v8, v15);
  }
  return result;
}

void sub_18252362C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  WTF::Vector<WTF::Ref<WebGPU::BindGroupLayout,WTF::RawPtrTraits<WebGPU::BindGroupLayout>,WTF::DefaultRefDerefTraits<WebGPU::BindGroupLayout>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  if (v8) {
    WTF::fastFree(v8, v10);
  }
  _Unwind_Resume(a1);
}

WebGPU::BindGroupLayout **WTF::Ref<WebGPU::BindGroupLayout,WTF::RawPtrTraits<WebGPU::BindGroupLayout>,WTF::DefaultRefDerefTraits<WebGPU::BindGroupLayout>>::~Ref(WebGPU::BindGroupLayout **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  if (!v3) {
    return a1;
  }
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    return a1;
  }
  WebGPU::BindGroupLayout::~BindGroupLayout(v3, a2);
  WTF::fastFree(v5, v6);
  return a1;
}

void WebGPU::Device::createRenderPipeline(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, WTF::StringImpl **a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 + 136);
  if ((!v8 || *(void *)(v8 + 40) <= (unint64_t)*(unsigned int *)(a1 + 200)) && *(void *)(a1 + 8))
  {
    uint64_t v9 = objc_opt_new();
    if (*(void *)(a2 + 8)) {
      strlen(*(const char **)(a2 + 8));
    }
    WTF::String::fromUTF8();
    [v9 setSupportIndirectCommandBuffers:1];
    id v194 = 0;
    uint64_t v195 = 0;
    uint64_t v13 = *(void *)(a2 + 16);
    if (v13)
    {
      if (!*(unsigned char *)(v13 + 96))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        unint64_t v14 = v191;
        if (v191)
        {
LABEL_22:
          int v18 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
          goto LABEL_33;
        }
        int v18 = &stru_1ECABF938;
LABEL_33:
        WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, &v18->isa);

        if (v14)
        {
          if (*(_DWORD *)v14 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *(_DWORD *)v14 -= 2;
          }
        }
LABEL_63:
        unint64_t v29 = v196;
        id v196 = 0;
        if (v29)
        {
          if (*v29 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v29 -= 2;
          }
        }

        return;
      }
      if (*(void *)(v13 + 88) != a1)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        unint64_t v14 = v191;
        if (v191) {
          goto LABEL_22;
        }
        int v18 = &stru_1ECABF938;
        goto LABEL_33;
      }
      if (*(unsigned char *)(v13 + 97)) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = *(void *)(a2 + 16);
      }
      id v193 = 0;
      LOBYTE(v191) = 0;
      char v192 = 0;
      uint64_t v16 = a2 + 24;
      if (!*(void *)(a2 + 24)) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v15 = 0;
      id v193 = 0;
      LOBYTE(v191) = 0;
      char v192 = 0;
      uint64_t v16 = a2 + 24;
      if (!*(void *)(a2 + 24))
      {
LABEL_27:
        uint64_t v19 = *(WebGPU::RenderPipeline ***)(a2 + 32);
        if (!*((_DWORD *)v19 + 10) && v19[3])
        {
          if (v19[9] != (WebGPU::RenderPipeline *)a1)
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            unsigned int v17 = v185;
            WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, (uint64_t)v185);
            if (!v185) {
              goto LABEL_46;
            }
LABEL_43:
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
            goto LABEL_46;
          }
          unint64_t v30 = *(WebGPU **)(a2 + 40);
          if (v30)
          {
            WebGPU::fromAPI((uint64_t *)v197, v30, v11);
          }
          else
          {
            uint64_t v31 = v19[15];
            if (v31) {
              *(_DWORD *)v31 += 2;
            }
            v197[0] = v31;
          }
          id v168 = WebGPU::ShaderModule::stageInTypesForEntryPoint((WebGPU::ShaderModule *)v19, v197, v12);
          WebGPU::errorValidatingVertexStageIn(v168, (void *)*(unsigned int *)(a1 + 184));
          int v32 = (NSString *)objc_claimAutoreleasedReturnValue();
          uint64_t v170 = (WebGPU::ShaderModule *)v15;
          if (v32)
          {
            WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, v32);
            uint64_t v19 = 0;
            int v33 = 1;
            goto LABEL_100;
          }
          uint64_t v34 = *(void **)(a1 + 8);
          uint64_t v35 = WTF::String::operator NSString *(&v196);
          id v184 = 0;
          uint64_t v145 = &v184;
          WebGPU::createLibrary(v34, (uint64_t)v19, (WebGPU::ShaderModule *)v15, v197, v35, &v185);
          int v32 = (NSString *)v184;

          if (!v190)
          {
            uint64_t v41 = [(NSString *)v32 localizedDescription];
            uint64_t v37 = v41;
            if (v41) {
              long long v42 = (__CFString *)v41;
            }
            else {
              long long v42 = @"Vertex library failed creation";
            }
            WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, &v42->isa);
            goto LABEL_97;
          }
          if (!v15)
          {
            uint64_t v37 = WebGPU::Device::addPipelineLayouts(a1, (uint64_t)&v194, &v187);
            if (v37)
            {
              WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, (NSString *)v37);
              goto LABEL_97;
            }
            if (!v190) {
              goto LABEL_131;
            }
          }
          uint64_t v36 = v185;
          uint64_t v15 = WTF::String::operator NSString *(&v196);
          uint64_t v37 = WebGPU::createFunction((void *)v36, (uint64_t)&v186, (void *)v15);

          if (v37 && objc_msgSend((id)v37, "functionType", &v184) == 1)
          {
            int v38 = v188;
            if (v188) {
              int v38 = *(_DWORD *)(v188 - 12);
            }
            if (!v190) {
              goto LABEL_131;
            }
            int v39 = v189;
            if (v189) {
              int v39 = *(_DWORD *)(v189 - 12);
            }
            if (v38 == v39)
            {
              [v9 setVertexFunction:v37];
              uint64_t v19 = (WebGPU::RenderPipeline **)WebGPU::ShaderModule::vertexReturnTypeForEntryPoint((WebGPU::ShaderModule *)v19, v197, v40);
              int v33 = 0;
LABEL_99:

              std::__optional_destruct_base<WebGPU::LibraryCreationResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v185, v43);
LABEL_100:

              long long v44 = v197[0];
              v197[0] = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2) {
                  WTF::StringImpl::destroy();
                }
                else {
                  *(_DWORD *)v44 -= 2;
                }
              }
              if (v33) {
                goto LABEL_46;
              }
              LOBYTE(v185) = 0;
              char v190 = 0;
              uint64_t v37 = *(void *)(a2 + 136);
              if (v37)
              {
                if (*(void *)v37)
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  long long v45 = v177;
                  WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, (uint64_t)v177);
                }
                else
                {
                  uint64_t v15 = *(void *)(v37 + 8);
                  if (!*(_DWORD *)(v15 + 40))
                  {
                    while (WebGPU::ShaderModule::ast((WebGPU::ShaderModule *)v15) && *(void *)(v15 + 72) == a1)
                    {
                      uint64_t v154 = v19;
                      long long v161 = (WebGPU::ShaderModule *)v15;
                      if (!WebGPU::ShaderModule::ast((WebGPU::ShaderModule *)v15)) {
                        goto LABEL_332;
                      }
                      unsigned int v62 = *(WebGPU **)(v37 + 16);
                      if (v62)
                      {
                        WebGPU::fromAPI((uint64_t *)&v183, v62, v60);
                      }
                      else
                      {
                        unsigned int v63 = *(WTF::StringImpl **)(v15 + 128);
                        if (v63) {
                          *(_DWORD *)v63 += 2;
                        }
                        uint64_t v183 = v63;
                      }
                      BOOL v163 = WebGPU::ShaderModule::usesFragDepth((WebGPU::ShaderModule *)v15, &v183, v61);
                      BOOL v159 = WebGPU::ShaderModule::usesSampleMaskInOutput((WebGPU::ShaderModule *)v15, &v183, v64);
                      int v65 = *(void **)(a1 + 8);
                      unsigned int v66 = WTF::String::operator NSString *(&v196);
                      id v176 = 0;
                      uint64_t v145 = &v176;
                      WebGPU::createLibrary(v65, v15, v170, &v183, v66, &v177);
                      id v153 = v176;

                      if (!v182)
                      {
                        uint64_t v76 = objc_msgSend(v153, "localizedDescription", &v176);
                        long long v166 = (NSString *)v76;
                        if (v76) {
                          uint64_t v77 = (__CFString *)v76;
                        }
                        else {
                          uint64_t v77 = @"Fragment library could not be created";
                        }
                        WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, &v77->isa);
                        goto LABEL_203;
                      }
                      uint64_t v19 = &v177;
                      if (v170) {
                        goto LABEL_142;
                      }
                      WebGPU::Device::addPipelineLayouts(a1, (uint64_t)&v194, &v179);
                      long long v166 = (NSString *)objc_claimAutoreleasedReturnValue();
                      if (v166)
                      {
                        WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, v166);
                        goto LABEL_203;
                      }
                      if (v182)
                      {
LABEL_142:
                        unsigned int v67 = v177;
                        uint64_t v15 = WTF::String::operator NSString *(&v196);
                        WebGPU::createFunction(v67, (uint64_t)&v178, (void *)v15);
                        long long v166 = (NSString *)objc_claimAutoreleasedReturnValue();

                        if (!v166 || [(NSString *)v166 functionType] != 2) {
                          goto LABEL_152;
                        }
                        int v68 = v180;
                        if (v180) {
                          int v68 = *(_DWORD *)(v180 - 12);
                        }
                        if (v182)
                        {
                          int v69 = v181;
                          if (v181) {
                            int v69 = *(_DWORD *)(v181 - 12);
                          }
                          if (v68 == v69)
                          {
                            [v9 setFragmentFunction:v166];
                            long long v157 = (int **)WebGPU::ShaderModule::fragmentInputsForEntryPoint(v161, &v183, v70);
                            long long v158 = (uint64_t *)WebGPU::ShaderModule::fragmentReturnTypeForEntryPoint(v161, &v183, v71);
                            uint64_t v156 = *(void *)(v37 + 40);
                            if (v156)
                            {
                              uint64_t v150 = 0;
                              char v72 = 0;
                              unsigned int v148 = 0;
                              uint64_t v73 = 16;
                              do
                              {
                                uint64_t v149 = *(void *)(v37 + 48);
                                uint64_t v151 = v149 + v73;
                                if (*(_DWORD *)(v149 + v73 - 8))
                                {
                                  if (!v158
                                    || ((uint64_t v78 = *v158,
                                         uint64_t v79 = WTF::HashMap<unsigned int,MTLDataType,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<MTLDataType>,WTF::HashTableTraits>::find(*v158, v150), !v78)? (v80 = 0): (v80 = v78 + 16 * *(unsigned int *)(v78 - 4)), v80 == v79))
                                  {
                                    unint64_t v147 = 0;
                                  }
                                  else
                                  {
                                    unint64_t v147 = *(void *)(v79 + 8);
                                  }
                                  uint64_t v81 = [v9 colorAttachments];
                                  uint64_t v152 = [v81 objectAtIndexedSubscript:v150];

                                  uint64_t v82 = *(unsigned int *)(v151 - 8);
                                  if ((v82 - 38) < 6 || !WebGPU::Texture::isRenderableFormat(v82, a1))
                                  {
                                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                                    unsigned int v125 = v197[0];
                                    WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, (uint64_t)v197[0]);
                                    if (v125)
                                    {
                                      if (*(_DWORD *)v125 == 2) {
                                        WTF::StringImpl::destroy();
                                      }
                                      else {
                                        *(_DWORD *)v125 -= 2;
                                      }
                                    }
                                    goto LABEL_324;
                                  }
                                  int v83 = *(_DWORD *)(v151 - 8);
                                  unsigned int v84 = WebGPU::Texture::renderTargetPixelByteAlignment(v83);
                                  int v146 = WebGPU::Texture::renderTargetPixelByteCost(v83);
                                  if (v148 % v84) {
                                    unsigned int v85 = v84 - v148 % v84;
                                  }
                                  else {
                                    unsigned int v85 = 0;
                                  }
                                  [v152 setPixelFormat:WebGPU::Texture::pixelFormat(v83)];
                                  unsigned int v86 = *(_DWORD *)(v149 + v73 + 8);
                                  if (v86 > 0xF || !v147 && v86)
                                  {
LABEL_319:
                                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                                    uint64_t v144 = v197[0];
                                    WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, (uint64_t)v197[0]);
                                    if (v144)
                                    {
                                      if (*(_DWORD *)v144 == 2) {
                                        WTF::StringImpl::destroy();
                                      }
                                      else {
                                        *(_DWORD *)v144 -= 2;
                                      }
                                    }
LABEL_323:
                                    char v72 = 1;
LABEL_324:

                                    goto LABEL_204;
                                  }
                                  [v152 setWriteMask:__rbit32(v86) >> 28];
                                  if (*(void *)(v149 + v73))
                                  {
                                    if (!WebGPU::Texture::supportsBlending(*(_DWORD *)(v151 - 8), a1)) {
                                      goto LABEL_319;
                                    }
                                    [v152 setBlendingEnabled:1];
                                    uint64_t v87 = *(_DWORD **)(v149 + v73);
                                    int v88 = v87[3];
                                    if ((v88 - 3) <= 1 && (v87[4] != 1 || v87[5] != 1)) {
                                      goto LABEL_319;
                                    }
                                    if ((*v87 - 3) <= 1 && (v87[1] != 1 || v87[2] != 1)) {
                                      goto LABEL_319;
                                    }
                                    uint64_t v89 = (v88 - 1);
                                    if (v89 < 4) {
                                      uint64_t v90 = v89 + 1;
                                    }
                                    else {
                                      uint64_t v90 = 0;
                                    }
                                    [v152 setAlphaBlendOperation:v90];
                                    [v152 setSourceAlphaBlendFactor:WebGPU::blendFactor(v87[4])];
                                    [v152 setDestinationAlphaBlendFactor:WebGPU::blendFactor(v87[5])];
                                    uint64_t v91 = (*v87 - 1);
                                    if (v91 < 4) {
                                      uint64_t v92 = v91 + 1;
                                    }
                                    else {
                                      uint64_t v92 = 0;
                                    }
                                    [v152 setRgbBlendOperation:v92];
                                    [v152 setSourceRGBBlendFactor:WebGPU::blendFactor(v87[1])];
                                    [v152 setDestinationRGBBlendFactor:WebGPU::blendFactor(v87[2])];
                                    unsigned int v93 = v87[1];
                                    if (v93 <= 0xA && ((1 << v93) & 0x430) != 0)
                                    {
                                      unsigned int v94 = 1;
                                    }
                                    else
                                    {
                                      unsigned int v95 = v87[2];
                                      if (v95 >= 0xB) {
                                        unsigned int v94 = 0;
                                      }
                                      else {
                                        unsigned int v94 = (0x430u >> v95) & 1;
                                      }
                                    }
                                  }
                                  else
                                  {
                                    [v152 setBlendingEnabled:0];
                                    unsigned int v94 = 0;
                                  }
                                  if (!WebGPU::textureFormatAllowedForRetunType(*(_DWORD *)(v151 - 8), v147, v94))
                                  {
                                    objc_msgSend(NSString, "stringWithFormat:", @"pipeline creation - color target pixel format(%u) for location(%zu) is incompatible with shader output data type of %zu", v150, objc_msgSend(v152, "pixelFormat"), v147);
                                    uint64_t v142 = (NSString *)objc_claimAutoreleasedReturnValue();
                                    WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, v142);

                                    goto LABEL_323;
                                  }
                                  v148 += v146 + v85;

                                  char v72 = 1;
                                }
                                v73 += 32;
                                ++v150;
                              }
                              while (v156 != v150);
                              if (v148 <= *(_DWORD *)(a1 + 204))
                              {
                                int v96 = 0;
                                goto LABEL_205;
                              }
                              WTF::StringImpl::createWithoutCopyingNonEmpty();
                              int v74 = v197[0];
                              WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, (uint64_t)v197[0]);
                              if (!v74) {
                                goto LABEL_204;
                              }
                              int v75 = *(_DWORD *)v74 - 2;
                              if (*(_DWORD *)v74 == 2)
                              {
                                WTF::StringImpl::destroy();
                                goto LABEL_204;
                              }
LABEL_155:
                              *(_DWORD *)int v74 = v75;
LABEL_204:
                              int v96 = 1;
                            }
                            else
                            {
                              LODWORD(v156) = 0;
                              char v72 = 0;
                              int v96 = 0;
                            }
LABEL_205:

                            std::__optional_destruct_base<WebGPU::LibraryCreationResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v177, v97);
                            uint64_t v98 = v183;
                            uint64_t v183 = 0;
                            if (v98)
                            {
                              if (*(_DWORD *)v98 == 2) {
                                WTF::StringImpl::destroy();
                              }
                              else {
                                *(_DWORD *)v98 -= 2;
                              }
                            }
                            if (v96) {
                              goto LABEL_228;
                            }
                            char v165 = v72 & 1;
                            uint64_t v19 = v154;
                            LODWORD(v37) = v156;
                            uint64_t v46 = *(void *)(a2 + 104);
                            if (v46) {
                              goto LABEL_109;
                            }
                            goto LABEL_211;
                          }
LABEL_152:
                          WTF::StringImpl::createWithoutCopyingNonEmpty();
                          int v74 = v197[0];
                          WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, (uint64_t)v197[0]);
                          if (v74)
                          {
                            int v75 = *(_DWORD *)v74 - 2;
                            if (*(_DWORD *)v74 != 2)
                            {
                              LODWORD(v156) = 0;
                              long long v157 = 0;
                              long long v158 = 0;
                              char v72 = 0;
                              goto LABEL_155;
                            }
                            WTF::StringImpl::destroy();
                          }
LABEL_203:
                          LODWORD(v156) = 0;
                          long long v157 = 0;
                          long long v158 = 0;
                          char v72 = 0;
                          goto LABEL_204;
                        }
                      }
LABEL_131:
                      __break(1u);
                    }
                  }
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  long long v45 = v177;
                  WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, (uint64_t)v177);
                }
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                  {
                    WTF::StringImpl::destroy();
                    if (!v190) {
                      goto LABEL_46;
                    }
                  }
                  else
                  {
                    *(_DWORD *)v45 -= 2;
                    if (!v190) {
                      goto LABEL_46;
                    }
                  }
                  goto LABEL_229;
                }
LABEL_228:
                if (v190) {
LABEL_229:
                }
                  WebGPU::PipelineLayout::~PipelineLayout(&v185, v21);
LABEL_46:
                if (v192) {
                  WebGPU::PipelineLayout::~PipelineLayout(&v191, v21);
                }
                uint64_t v22 = v193;
                if (v193)
                {
                  uint64_t v23 = *(v193 - 1);
                  if (v23)
                  {
                    unint64_t v24 = v193 + 2;
                    do
                    {
                      if (*(v24 - 2) != -2 && *(void *)v24) {
                        WTF::fastFree((WTF *)(*(void *)v24 - 16), v21);
                      }
                      v24 += 4;
                      --v23;
                    }
                    while (v23);
                  }
                  WTF::fastFree((WTF *)(v22 - 4), v21);
                }
                BOOL v25 = (WTF *)v194;
                if (HIDWORD(v195))
                {
                  uint64_t v26 = 16 * HIDWORD(v195);
                  uint64_t v27 = v194;
                  do
                  {
                    uint64_t v28 = (WTF *)*v27;
                    if (*v27)
                    {
                      void *v27 = 0;
                      *((_DWORD *)v27 + 2) = 0;
                      WTF::fastFree(v28, v21);
                    }
                    v27 += 2;
                    v26 -= 16;
                  }
                  while (v26);
                }
                if (v25) {
                  WTF::fastFree(v25, v21);
                }
                goto LABEL_63;
              }
              long long v161 = 0;
              long long v157 = 0;
              long long v158 = 0;
              char v165 = 0;
              BOOL v159 = 0;
              BOOL v163 = 0;
              uint64_t v46 = *(void *)(a2 + 104);
              if (v46)
              {
LABEL_109:
                WebGPU::errorValidatingDepthStencilState(v46);
                long long v47 = (NSString *)objc_claimAutoreleasedReturnValue();
                if (v47)
                {
                  WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, v47);
                  goto LABEL_111;
                }
                int v155 = v37;
                uint64_t v48 = WebGPU::Texture::pixelFormat(*(_DWORD *)(v46 + 8));
                uint64_t v49 = v48;
                if (((v48 - 253) & 0xFFFFFFFFFFFFFFF7) != 0) {
                  uint64_t v50 = v48;
                }
                else {
                  uint64_t v50 = 0;
                }
                objc_msgSend(v9, "setDepthAttachmentPixelFormat:", v50, v145);
                unsigned int v51 = *(_DWORD *)(v46 + 8);
                if (v51 <= 0x2B && ((1 << v51) & 0xA4000000000) != 0) {
                  [v9 setStencilAttachmentPixelFormat:v49];
                }
                uint64_t v52 = objc_opt_new();
                [v52 setDepthCompareFunction:WebGPU::convertToMTLCompare(*(_DWORD *)(v46 + 20))];
                int v53 = *(unsigned __int8 *)(v46 + 16);
                if (*(unsigned char *)(v46 + 16)) {
                  int v53 = *(_DWORD *)(v46 + 12);
                }
                [v52 setDepthWriteEnabled:v53 != 0];
                unint64_t v54 = [v52 frontFaceStencil];
                WebGPU::populateStencilOperation(v54, (_DWORD *)(v46 + 24), *(unsigned int *)(v46 + 56), *(unsigned int *)(v46 + 60));

                int v55 = [v52 backFaceStencil];
                WebGPU::populateStencilOperation(v55, (_DWORD *)(v46 + 40), *(unsigned int *)(v46 + 56), *(unsigned int *)(v46 + 60));

                float v56 = *(float *)(v46 + 68);
                float v57 = (float)*(int *)(v46 + 64);
                float v58 = *(float *)(v46 + 72);
                uint64_t v59 = *(void *)(a2 + 104);
              }
              else
              {
LABEL_211:
                int v155 = v37;
                uint64_t v59 = 0;
                uint64_t v52 = 0;
                float v58 = 0.0;
                float v56 = 0.0;
                float v57 = 0.0;
              }
              char v99 = v165;
              if (!*(void *)(a2 + 136)) {
                char v99 = 1;
              }
              if ((v99 & 1) == 0 && !v59
                || v163 && ![v9 depthAttachmentPixelFormat]
                || (int v100 = *(_DWORD *)(a2 + 120), v100 != 1) && v100 != 4)
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                uint64_t v101 = v177;
                WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, (uint64_t)v177);
                if (v101)
                {
                  if (*(_DWORD *)v101 == 2) {
                    WTF::StringImpl::destroy();
                  }
                  else {
                    *(_DWORD *)v101 -= 2;
                  }
                }
                goto LABEL_227;
              }
              [v9 setRasterSampleCount:v145];
              [v9 setAlphaToCoverageEnabled:*(_DWORD *)(a2 + 128) != 0];
              if (*(_DWORD *)(a2 + 128))
              {
                long long v47 = (NSString *)v52;
                if (v159
                  || (uint64_t v102 = *(void *)(a2 + 136)) == 0
                  || !*(void *)(v102 + 40)
                  || !WebGPU::hasAlphaChannel(*(_DWORD *)(*(void *)(v102 + 48) + 8))
                  || !WebGPU::Texture::supportsBlending(*(_DWORD *)(*(void *)(*(void *)(a2 + 136) + 48) + 8), a1)|| *(_DWORD *)(a2 + 120) == 1)
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  unint64_t v108 = v177;
                  WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, (uint64_t)v177);
                  if (v108)
                  {
                    if (*(_DWORD *)v108 == 2)
                    {
                      WTF::StringImpl::destroy();

                      if (!v190) {
                        goto LABEL_46;
                      }
                      goto LABEL_229;
                    }
                    *(_DWORD *)v108 -= 2;
                  }
LABEL_111:

                  if (!v190) {
                    goto LABEL_46;
                  }
                  goto LABEL_229;
                }
              }
              if ((objc_opt_respondsToSelector() & 1) == 0)
              {
LABEL_332:
                __break(0xC471u);
                JUMPOUT(0x182524F64);
              }
              int v103 = *(_DWORD *)(a2 + 124);
              if (v103 != -1) {
                [v9 setSampleMask:*(unsigned int *)(a2 + 124)];
              }
              WebGPU::errorValidatingInterstageShaderInterfaces<WGPUFragmentState const>(*(unsigned int *)(a1 + 192), (MTLDataType)*(unsigned int *)(a1 + 196), (const WTF::StringImpl *)*(unsigned int *)(a2 + 88), (uint64_t *)v19, v157, (unsigned int **)v158, (uint64_t)v161, *(void *)(a2 + 136));
              uint64_t v104 = (NSString *)objc_claimAutoreleasedReturnValue();
              if (v104)
              {
                WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, v104);

LABEL_227:
                goto LABEL_228;
              }
              v197[0] = 0;
              unint64_t v105 = *(void *)(a2 + 64);
              if (v105)
              {
                if (!v168)
                {
                  objc_msgSend(NSString, "stringWithFormat:", @"Vertex shader has no stageIn parameters but buffer count was %zu and attribute count was %zu", v105, *(void *)(*(void *)(a2 + 72) + 16));
                  long long v109 = (NSString *)objc_claimAutoreleasedReturnValue();
                  WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, v109);

                  goto LABEL_330;
                }
                if (v105 > *(unsigned int *)(a1 + 168))
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  int v106 = v177;
                  WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, (uint64_t)v177);
                  goto LABEL_277;
                }
                long long v110 = *(_OWORD *)(v16 + 16);
                v174[0] = *(_OWORD *)v16;
                v174[1] = v110;
                v174[2] = *(_OWORD *)(v16 + 32);
                uint64_t v175 = *(void *)(v16 + 48);
                uint64_t v173 = 0;
                long long v111 = WebGPU::createVertexDescriptor((uint64_t)v174, a1 + 88, (unsigned int **)v168, (uint64_t *)v197, &v173);
                long long v112 = v173;
                if (v112)
                {
                  long long v113 = [NSString stringWithFormat:@"vertex descriptor creation failed %@", v112];
                  WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, v113);

LABEL_330:
                  if (v197[0]) {
                    WTF::fastFree((WTF::StringImpl *)((char *)v197[0] - 16), v107);
                  }
                  goto LABEL_227;
                }
                [v9 setVertexDescriptor:v111];
              }
              uint64_t v114 = *(void *)(a2 + 80);
              if (v114)
              {
                uint64_t v115 = *(unsigned int *)(a1 + 244);
                if (!v115) {
                  goto LABEL_276;
                }
                long long v116 = *(int **)(a1 + 232);
                while (1)
                {
                  int v117 = *v116++;
                  if (v117 == 1) {
                    break;
                  }
                  if (!--v115) {
                    goto LABEL_276;
                  }
                }
                if (*(_DWORD *)(v114 + 8) != 7 || *(void *)v114) {
                  goto LABEL_276;
                }
                BOOL v167 = *(_DWORD *)(v114 + 16) != 0;
              }
              else
              {
                BOOL v167 = 0;
              }
              int v118 = *(_DWORD *)(a2 + 88);
              unsigned int v119 = v118 - 1;
              unsigned int v120 = v118 - 3;
              BOOL v121 = v118 == 0x7FFFFFFF;
              uint64_t v122 = 3;
              if (!v121) {
                uint64_t v122 = 1;
              }
              if (v120 < 2) {
                uint64_t v122 = 3;
              }
              if (v119 >= 2) {
                uint64_t v123 = v122;
              }
              else {
                uint64_t v123 = 2;
              }
              [v9 setInputPrimitiveTopology:v123];
              uint64_t v124 = *(unsigned int *)(a2 + 88);
              if (v124 == 2)
              {
                uint64_t v124 = 2;
              }
              else if (v124 != 4)
              {
                if (*(_DWORD *)(a2 + 92))
                {
LABEL_276:
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  int v106 = v177;
                  WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, (uint64_t)v177);
LABEL_277:
                  if (v106)
                  {
                    if (*(_DWORD *)v106 == 2) {
                      WTF::StringImpl::destroy();
                    }
                    else {
                      *(_DWORD *)v106 -= 2;
                    }
                  }
                  goto LABEL_330;
                }
                uint64_t v164 = 0;
                if ((int)v124 > 2)
                {
                  if (v124 != 3 && v124 != 0x7FFFFFFF) {
                    goto LABEL_291;
                  }
                  uint64_t v124 = 3;
                }
                else
                {
                  if (v124 != 1)
                  {
LABEL_291:
                    int v126 = *(_DWORD *)(a2 + 92);
                    if (!v126 || v126 == 0x7FFFFFFF)
                    {
                      uint64_t v160 = 0;
                      BOOL v162 = 0;
                    }
                    else
                    {
                      BOOL v162 = v126 == 2;
                      uint64_t v160 = 1;
                    }
                    int v127 = *(_DWORD *)(a2 + 100);
                    BOOL v128 = *(_DWORD *)(a2 + 96) == 0;
                    if (v127 == 2) {
                      uint64_t v129 = 2;
                    }
                    else {
                      uint64_t v129 = v127 == 1;
                    }
                    uint64_t v130 = *(void **)(a1 + 8);
                    id v172 = 0;
                    uint64_t v169 = (void *)[v130 newRenderPipelineStateWithDescriptor:v9 error:&v172];
                    id v131 = v172;
                    id v132 = v131;
                    if (v131 || !v169)
                    {
                      int v138 = [v131 localizedDescription];
                      WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, v138);
                    }
                    else
                    {
                      if (v170)
                      {
                        ++*(_DWORD *)v170;
                        uint64_t v171 = v170;
                        WebGPU::RenderPipeline::create((uint64_t *)&v183, v169, v164, v162, v160, v128, v129, v167, v57, v56, v58, v52, (uint64_t *)&v171, v103, v9, v155, a2, (uint64_t *)v197, &v193,
                          a1);
                        uint64_t v133 = v183;
                        uint64_t v183 = 0;
                        uint64_t v177 = 0;
                        uint64_t v178 = 0;
                        *a4 = v133;
                        a4[1] = 0;
                        std::pair<WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>>,decltype(nullptr)>::~pair(&v177, v134);
                        std::pair<WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>>,decltype(nullptr)>::~pair(&v183, v135);
                        unint64_t v137 = &v171;
                      }
                      else
                      {
                        WebGPU::Device::generatePipelineLayout((atomic_uchar *volatile *)a1, &v194, (WebGPU::PipelineLayout *)&v183);
                        if (*((unsigned char *)v183 + 96))
                        {
                          WebGPU::RenderPipeline::create((uint64_t *)&v171, v169, v164, v162, v160, v128, v129, v167, v57, v56, v58, v52, (uint64_t *)&v183, v103, v9, v155, a2, (uint64_t *)v197, &v193,
                            a1);
                          int v139 = v171;
                          uint64_t v171 = 0;
                          uint64_t v177 = 0;
                          uint64_t v178 = 0;
                          *a4 = v139;
                          a4[1] = 0;
                          std::pair<WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>>,decltype(nullptr)>::~pair(&v177, v140);
                          std::pair<WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>>,decltype(nullptr)>::~pair(&v171, v141);
                        }
                        else
                        {
                          WTF::StringImpl::createWithoutCopyingNonEmpty();
                          id v143 = v177;
                          WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, (uint64_t)v177);
                          if (v143)
                          {
                            if (*(_DWORD *)v143 == 2) {
                              WTF::StringImpl::destroy();
                            }
                            else {
                              *(_DWORD *)v143 -= 2;
                            }
                          }
                        }
                        unint64_t v137 = &v183;
                      }
                      WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>::~Ref((atomic_uchar *volatile ***)v137, v136);
                    }

                    goto LABEL_330;
                  }
                  uint64_t v124 = 1;
                }
              }
              uint64_t v164 = v124;
              goto LABEL_291;
            }
          }
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          uint64_t v19 = (WebGPU::RenderPipeline **)v177;
          WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, (uint64_t)v177);
          if (!v177)
          {
LABEL_98:
            int v33 = 1;
            goto LABEL_99;
          }
          if (*(_DWORD *)v177 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *(_DWORD *)v177 -= 2;
          }
LABEL_97:
          uint64_t v19 = 0;
          goto LABEL_98;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        unsigned int v17 = v185;
        if (v185) {
          goto LABEL_29;
        }
        uint64_t v20 = &stru_1ECABF938;
        goto LABEL_42;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    unsigned int v17 = v185;
    if (v185)
    {
LABEL_29:
      uint64_t v20 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      goto LABEL_42;
    }
    uint64_t v20 = &stru_1ECABF938;
LABEL_42:
    WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, &v20->isa);

    if (v17) {
      goto LABEL_43;
    }
    goto LABEL_46;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (v191) {
    unsigned int v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    unsigned int v10 = &stru_1ECABF938;
  }
  WebGPU::returnInvalidRenderPipeline((WebGPU *)a4, (WebGPU::Device *)a1, a3, &v10->isa);

  if (v191)
  {
    if (*(_DWORD *)v191 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *(_DWORD *)v191 -= 2;
    }
  }
}

void sub_182524F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,_DWORD *a63)
{
  if (v66)
  {
    if (*v66 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v66 -= 2;
    }
  }

  std::__optional_destruct_base<WebGPU::LibraryCreationResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a49, v69);
  double v71 = a63;
  a63 = 0;
  if (v71)
  {
    if (*v71 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v71 -= 2;
    }
  }
  if (LOBYTE(STACK[0x228])) {
    WebGPU::PipelineLayout::~PipelineLayout(&a65, v70);
  }
  if (LOBYTE(STACK[0x298])) {
    WebGPU::PipelineLayout::~PipelineLayout((atomic_uchar *volatile **)&STACK[0x230], v70);
  }
  WTF::HashMap<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap((uint64_t *)(v67 - 160), v70);
  WTF::Vector<WTF::Vector<WGPUBindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v67 - 152, v72);
  uint64_t v73 = *(_DWORD **)(v67 - 136);
  *(void *)(v67 - 136) = 0;
  if (v73)
  {
    if (*v73 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *v73 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_18252557C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18252558C()
{
  if (v0) {
    JUMPOUT(0x182525598);
  }
  JUMPOUT(0x1825255B8);
}

void WebGPU::returnInvalidRenderPipeline(WebGPU *a1, WebGPU::Device *a2, char a3, uint64_t a4)
{
  if (a4) {
    unint64_t v7 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    unint64_t v7 = &stru_1ECABF938;
  }
  uint64_t v8 = v7;
  WebGPU::returnInvalidRenderPipeline(a1, a2, a3, &v7->isa);
}

void sub_182525644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id WebGPU::errorValidatingVertexStageIn(void *a1, void *a2)
{
  if (!a1)
  {
    uint64_t v8 = 0;
    goto LABEL_34;
  }
  uint64_t v22 = 0;
  uint64_t v3 = (_DWORD *)*a1;
  if (!*a1)
  {
    int v6 = 0;
    uint64_t v5 = 0;
    goto LABEL_12;
  }
  uint64_t v4 = *(v3 - 1);
  uint64_t v5 = &v3[2 * v4];
  if (*(v3 - 3))
  {
    int v6 = (_DWORD *)*a1;
    if (v4)
    {
      uint64_t v7 = 8 * v4;
      int v6 = (_DWORD *)*a1;
      while (*v6 >= 0xFFFFFFFE)
      {
        v6 += 2;
        v7 -= 8;
        if (!v7)
        {
          int v6 = v5;
          if (v3) {
            goto LABEL_13;
          }
          goto LABEL_16;
        }
      }
    }
LABEL_12:
    if (v3) {
      goto LABEL_13;
    }
    goto LABEL_16;
  }
  int v6 = &v3[2 * v4];
  uint64_t v5 = v6;
  if (v3)
  {
LABEL_13:
    uint64_t v9 = &v3[2 * *(v3 - 1)];
    if (v9 != v6) {
      goto LABEL_19;
    }
LABEL_37:
    uint64_t v8 = 0;
    uint64_t v18 = v22;
    if (!v22) {
      goto LABEL_34;
    }
LABEL_33:
    WTF::fastFree((WTF *)(v18 - 16), a2);
    goto LABEL_34;
  }
LABEL_16:
  uint64_t v9 = 0;
  if (!v6) {
    goto LABEL_37;
  }
LABEL_19:
  while (1)
  {
    int v21 = 0;
    uint64_t v10 = *v6;
    int v21 = v10;
    if (v10 >= a2) {
      break;
    }
    if (v22)
    {
      int v11 = *(_DWORD *)(v22 - 8);
      unsigned int v12 = 9 * ((v10 + ~(v10 << 15)) ^ ((v10 + ~(v10 << 15)) >> 10));
      unsigned int v13 = v11 & (((v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11)) ^ (((v12 ^ (v12 >> 6))
                                                                        + ~((v12 ^ (v12 >> 6)) << 11)) >> 16));
      int v14 = *(_DWORD *)(v22 + 4 * v13);
      if (v14 == v10)
      {
LABEL_31:
        uint64_t v17 = objc_msgSend(NSString, "stringWithFormat:", @"Shader location %u appears twice", v10);
        goto LABEL_32;
      }
      int v15 = 1;
      while (v14 != -1)
      {
        unsigned int v13 = (v13 + v15) & v11;
        int v14 = *(_DWORD *)(v22 + 4 * v13);
        ++v15;
        if (v14 == v10) {
          goto LABEL_31;
        }
      }
    }
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add(&v22, &v21, (uint64_t)v20);
    uint64_t v16 = v6 + 2;
    int v6 = v5;
    if (v16 != v5)
    {
      int v6 = v16;
      while (*v6 >= 0xFFFFFFFE)
      {
        v6 += 2;
        if (v6 == v5)
        {
          int v6 = v5;
          break;
        }
      }
    }
    if (v6 == v9) {
      goto LABEL_37;
    }
  }
  uint64_t v17 = objc_msgSend(NSString, "stringWithFormat:", @"Shader location %u exceeds the maximum allowed value of %u", v10, a2);
LABEL_32:
  uint64_t v8 = (void *)v17;
  uint64_t v18 = v22;
  if (v22) {
    goto LABEL_33;
  }
LABEL_34:
  return v8;
}

void sub_182525868(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    WTF::fastFree((WTF *)(a16 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebGPU::returnInvalidRenderPipeline(WebGPU *this, WebGPU::Device *a2, char a3, NSString *a4)
{
  uint64_t v7 = a4;
  if ((a3 & 1) == 0)
  {
    MEMORY[0x18530AF50](&v24, v7);
    uint64_t v8 = *((void *)a2 + 4);
    uint64_t v9 = 32 * *((unsigned int *)a2 + 11);
    uint64_t v10 = v8 + v9;
    while (v9)
    {
      int v11 = *(_DWORD *)(v10 - 8);
      v10 -= 32;
      v9 -= 32;
      if (!v11)
      {
        uint64_t v12 = v8 + v9;
        if (!*(unsigned char *)(v12 + 16))
        {
          unsigned int v13 = v24;
          unint64_t v24 = 0;
          *(_DWORD *)uint64_t v12 = 1;
          *(void *)(v12 + ++*(_DWORD *)(result + 8) = v13;
          *(unsigned char *)(v12 + 16) = 1;
        }
        goto LABEL_10;
      }
    }
    uint64_t v14 = *((void *)a2 + 3);
    if (v14)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v14 + 16))(v14, 1, &v24);
      uint64_t v15 = *((void *)a2 + 3);
      *((void *)a2 + 3) = 0;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
    }
LABEL_10:
    uint64_t v16 = v24;
    unint64_t v24 = 0;
    if (v16)
    {
      if (*v16 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v16 -= 2;
      }
    }
  }
  uint64_t v17 = WTF::fastMalloc((WTF *)0x1C8);
  char v18 = 0;
  int v19 = 1;
  *(_DWORD *)uint64_t v17 = 1;
  *(void *)(v17 + ++*(_DWORD *)(result + 8) = 0;
  *(void *)(v17 + 16) = 0;
  uint64_t v20 = *(void *)a2;
  atomic_compare_exchange_strong_explicit(*(atomic_uchar *volatile *)a2, (unsigned __int8 *)&v18, 1u, memory_order_acquire, memory_order_acquire);
  if (v18) {
    MEMORY[0x18530AEA0](v20);
  }
  ++*(void *)(v20 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v20, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
  if (v19 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v20);
  }
  *(void *)(v17 + 24) = a2;
  *(unsigned char *)(v17 + 40) = 0;
  *(unsigned char *)(v17 + 4++*(_DWORD *)(result + 8) = 0;
  *(void *)(v17 + 80) = 0;
  *(void *)(v17 + 8++*(_DWORD *)(result + 8) = 0xFFFFFFFF00000000;
  *(void *)(v17 + 96) = 0;
  *(_DWORD *)(v17 + 104) = 0;
  *(void *)(v17 + 120) = 0;
  *(void *)(v17 + 12++*(_DWORD *)(result + 8) = 0;
  *(void *)(v17 + 112) = 0;
  int v21 = (WebGPU::PipelineLayout *)WTF::fastMalloc((WTF *)0x68);
  WebGPU::PipelineLayout::PipelineLayout(v21, (atomic_uchar *volatile *)a2);
  *(void *)(v17 + 136) = v21;
  *(unsigned char *)(v17 + 300) = 0;
  *(unsigned char *)(v17 + 304) = 0;
  *(void *)(v17 + 432) = 0;
  *(void *)(v17 + 440) = 0;
  *(void *)(v17 + 424) = 0;
  uint64_t v22 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v22 + 16) = -1;
  uint64_t result = v22 + 16;
  *(void *)(result + ++*(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = -1;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = -1;
  *(void *)(result + 40) = 0;
  *(_DWORD *)(result + 4++*(_DWORD *)(result + 8) = -1;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = -1;
  *(void *)(result + 72) = 0;
  *(_DWORD *)(result + 80) = -1;
  *(void *)(result + 8++*(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 96) = -1;
  *(void *)(result + 104) = 0;
  *(_DWORD *)(result + 112) = -1;
  *(void *)(result + 120) = 0;
  *(void *)(v17 + 440) = result;
  *(_DWORD *)(result - 4) = 8;
  *(_DWORD *)(*(void *)(v17 + 440) - ++*(_DWORD *)(result + 8) = 7;
  *(_DWORD *)(*(void *)(v17 + 440) - 16) = 0;
  *(_DWORD *)(*(void *)(v17 + 440) - 12) = 0;
  *(unsigned char *)(v17 + 44++*(_DWORD *)(result + 8) = 0;
  *(void *)this = v17;
  *((void *)this + 1) = v7;
  return result;
}

void sub_182525AF8(_Unwind_Exception *a1)
{
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v3, v5);
  WTF::fastFree((WTF *)v2, v6);

  _Unwind_Resume(a1);
}

uint64_t WTF::HashMap<unsigned int,MTLDataType,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<MTLDataType>,WTF::HashTableTraits>::find(uint64_t result, int a2)
{
  if (result)
  {
    unsigned int v2 = *(_DWORD *)(result - 8);
    unsigned int v3 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    unsigned int v4 = (v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11);
    uint64_t v5 = v2 & (v4 ^ HIWORD(v4));
    int v6 = *(_DWORD *)(result + 16 * v5);
    if (v6 == a2)
    {
LABEL_6:
      result += 16 * v5;
    }
    else
    {
      int v7 = 1;
      while (v6 != -1)
      {
        uint64_t v5 = (v5 + v7) & v2;
        int v6 = *(_DWORD *)(result + 16 * v5);
        ++v7;
        if (v6 == a2) {
          goto LABEL_6;
        }
      }
      result += 16 * *(unsigned int *)(result - 4);
    }
  }
  return result;
}