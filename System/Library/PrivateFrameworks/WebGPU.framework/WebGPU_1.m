uint64_t WebGPU::blendFactor(int a1)
{
  uint64_t result;

  result = 11;
  switch(a1)
  {
    case 0:
      result = 0;
      break;
    case 1:
      result = 1;
      break;
    case 2:
      result = 2;
      break;
    case 3:
      result = 3;
      break;
    case 4:
      result = 4;
      break;
    case 5:
      result = 5;
      break;
    case 6:
      result = 6;
      break;
    case 7:
      result = 7;
      break;
    case 8:
      result = 8;
      break;
    case 9:
      result = 9;
      break;
    case 10:
      result = 10;
      break;
    case 11:
      return result;
    case 12:
      result = 12;
      break;
    default:
      if (a1 == 0x7FFFFFFF) {
        result = 1;
      }
      break;
  }
  return result;
}

BOOL WebGPU::textureFormatAllowedForRetunType(int a1, unint64_t a2, int a3)
{
  BOOL result = 1;
  if (a1)
  {
    if (a2)
    {
      if (!a3 || (BOOL result = 0, a2 <= 0x24) && ((1 << a2) & 0x1100000040) != 0)
      {
        BOOL result = a2 == 6;
        switch(a1)
        {
          case 1:
          case 7:
          case 12:
            BOOL result = a2 - 3 < 4;
            break;
          case 3:
          case 5:
          case 13:
            BOOL result = a2 - 33 < 4;
            break;
          case 4:
          case 6:
          case 14:
            BOOL result = a2 - 29 < 4;
            break;
          case 8:
          case 17:
          case 29:
            BOOL result = a2 == 6 || (a2 & 0xFFFFFFFFFFFFFFFELL) == 4;
            break;
          case 10:
          case 15:
          case 30:
            BOOL result = a2 == 36 || (a2 & 0xFFFFFFFFFFFFFFFELL) == 34;
            break;
          case 11:
          case 16:
          case 31:
            BOOL result = a2 == 32 || (a2 & 0xFFFFFFFFFFFFFFFELL) == 30;
            break;
          case 18:
          case 19:
          case 23:
          case 24:
          case 26:
          case 34:
          case 35:
            return result;
          case 21:
          case 25:
          case 32:
          case 36:
            BOOL result = a2 == 36;
            break;
          case 22:
          case 33:
          case 37:
            BOOL result = a2 == 32;
            break;
          case 27:
            BOOL result = a2 - 5 < 2;
            break;
          default:
            BOOL result = 0;
            break;
        }
      }
    }
  }
  return result;
}

id WebGPU::errorValidatingDepthStencilState(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 - 38 >= 6)
  {
    v4 = NSString;
    v5 = @"Color format passed to depth / stencil format";
    goto LABEL_11;
  }
  int v2 = *(_DWORD *)(a1 + 12);
  if (*(unsigned char *)(a1 + 16)) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if ((!v3 || (*(_DWORD *)(a1 + 20) | 8) != 8) && v1 <= 0x26)
  {
    v4 = NSString;
    v5 = @"depth-stencil state missing format";
    goto LABEL_11;
  }
  int v10 = *(_DWORD *)(a1 + 24);
  int v9 = *(_DWORD *)(a1 + 28);
  int v11 = *(_DWORD *)(a1 + 32);
  int v12 = *(_DWORD *)(a1 + 36);
  BOOL v15 = v10 == 8 && v9 == 0 && v11 == 0 && v12 == 0;
  if (v15
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(a1 + 40), (int32x4_t)xmmword_1826CEC60)))) & 1) == 0|| v1 <= 0x2B && ((1 << v1) & 0xA4000000000) != 0)
  {
    if (v1 >= 0x27)
    {
      if (*(unsigned char *)(a1 + 16))
      {
        uint64_t v6 = 0;
        if (!(v2 | v11 | *(_DWORD *)(a1 + 48)) || *(_DWORD *)(a1 + 20))
        {
LABEL_12:
          v7 = (void *)v6;
          return v7;
        }
        v4 = NSString;
        v5 = @"Depth compare must be provided";
      }
      else
      {
        v4 = NSString;
        v5 = @"depthWrite must be provided";
      }
LABEL_11:
      uint64_t v6 = [v4 stringWithFormat:@"Invalid DepthStencilState: %@", v5];
      goto LABEL_12;
    }
    v7 = 0;
  }
  else
  {
    switch(v10)
    {
      case 1:
        v16 = "never";
        break;
      case 2:
        v16 = "less";
        break;
      case 3:
        v16 = "less-equal";
        break;
      case 4:
        v16 = "greater";
        break;
      case 5:
        v16 = "greater-equal";
        break;
      case 6:
        v16 = "equal";
        break;
      case 7:
        v16 = "not-equal";
        break;
      case 8:
        v16 = "always";
        break;
      default:
        if (v10 == 0x7FFFFFFF)
        {
LABEL_130:
          __break(0xC471u);
          JUMPOUT(0x182526610);
        }
        v16 = "undefined";
        break;
    }
    switch(v9)
    {
      case 1:
        v17 = "zero";
        break;
      case 2:
        v17 = "replace";
        break;
      case 3:
        v17 = "invert";
        break;
      case 4:
        v17 = "increment-clamp";
        break;
      case 5:
        v17 = "decrement-clamp";
        break;
      case 6:
        v17 = "increment-wrap";
        break;
      case 7:
        v17 = "decrement-wrap";
        break;
      default:
        if (v9 == 0x7FFFFFFF)
        {
          __break(0xC471u);
          JUMPOUT(0x182526630);
        }
        v17 = "keep";
        break;
    }
    switch(v11)
    {
      case 1:
        v18 = "zero";
        break;
      case 2:
        v18 = "replace";
        break;
      case 3:
        v18 = "invert";
        break;
      case 4:
        v18 = "increment-clamp";
        break;
      case 5:
        v18 = "decrement-clamp";
        break;
      case 6:
        v18 = "increment-wrap";
        break;
      case 7:
        v18 = "decrement-wrap";
        break;
      default:
        if (v11 == 0x7FFFFFFF)
        {
          __break(0xC471u);
          JUMPOUT(0x182526650);
        }
        v18 = "keep";
        break;
    }
    switch(v12)
    {
      case 1:
        v19 = "zero";
        break;
      case 2:
        v19 = "replace";
        break;
      case 3:
        v19 = "invert";
        break;
      case 4:
        v19 = "increment-clamp";
        break;
      case 5:
        v19 = "decrement-clamp";
        break;
      case 6:
        v19 = "increment-wrap";
        break;
      case 7:
        v19 = "decrement-wrap";
        break;
      default:
        if (v12 == 0x7FFFFFFF)
        {
          __break(0xC471u);
          JUMPOUT(0x182526670);
        }
        v19 = "keep";
        break;
    }
    int v20 = *(_DWORD *)(a1 + 40);
    switch(v20)
    {
      case 1:
        v21 = "never";
        break;
      case 2:
        v21 = "less";
        break;
      case 3:
        v21 = "less-equal";
        break;
      case 4:
        v21 = "greater";
        break;
      case 5:
        v21 = "greater-equal";
        break;
      case 6:
        v21 = "equal";
        break;
      case 7:
        v21 = "not-equal";
        break;
      case 8:
        v21 = "always";
        break;
      default:
        if (v20 == 0x7FFFFFFF)
        {
          __break(0xC471u);
          JUMPOUT(0x182526690);
        }
        v21 = "undefined";
        break;
    }
    int v22 = *(_DWORD *)(a1 + 44);
    switch(v22)
    {
      case 1:
        v23 = "zero";
        break;
      case 2:
        v23 = "replace";
        break;
      case 3:
        v23 = "invert";
        break;
      case 4:
        v23 = "increment-clamp";
        break;
      case 5:
        v23 = "decrement-clamp";
        break;
      case 6:
        v23 = "increment-wrap";
        break;
      case 7:
        v23 = "decrement-wrap";
        break;
      default:
        if (v22 == 0x7FFFFFFF)
        {
          __break(0xC471u);
          JUMPOUT(0x1825266B0);
        }
        v23 = "keep";
        break;
    }
    int v24 = *(_DWORD *)(a1 + 48);
    switch(v24)
    {
      case 1:
        v25 = "zero";
        break;
      case 2:
        v25 = "replace";
        break;
      case 3:
        v25 = "invert";
        break;
      case 4:
        v25 = "increment-clamp";
        break;
      case 5:
        v25 = "decrement-clamp";
        break;
      case 6:
        v25 = "increment-wrap";
        break;
      case 7:
        v25 = "decrement-wrap";
        break;
      default:
        if (v24 == 0x7FFFFFFF)
        {
          __break(0xC471u);
          JUMPOUT(0x1825266D0);
        }
        v25 = "keep";
        break;
    }
    int v26 = *(_DWORD *)(a1 + 52);
    switch(v26)
    {
      case 1:
        v27 = "zero";
        goto LABEL_120;
      case 2:
        v27 = "replace";
        goto LABEL_120;
      case 3:
        v27 = "invert";
        goto LABEL_120;
      case 4:
        v27 = "increment-clamp";
        goto LABEL_120;
      case 5:
        v27 = "decrement-clamp";
        goto LABEL_120;
      case 6:
        v27 = "increment-wrap";
        goto LABEL_120;
      case 7:
        v27 = "decrement-wrap";
        goto LABEL_120;
      default:
        if (v26 == 0x7FFFFFFF) {
          goto LABEL_130;
        }
        v27 = "keep";
LABEL_120:
        v28 = [NSString stringWithFormat:@"missing stencil format - stencilFront: compare = %s, failOp = %s, depthFailOp = %s, passOp = %s, stencilBack: compare = %s, failOp = %s, depthFailOp = %s, passOp = %s", v16, v17, v18, v19, v21, v23, v25, v27];
        uint64_t v29 = [NSString stringWithFormat:@"Invalid DepthStencilState: %@", v28];

        v7 = (void *)v29;
        break;
    }
  }
  return v7;
}

void sub_1825266F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebGPU::convertToMTLCompare(int a1)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
    case 8:
      goto LABEL_4;
    case 1:
      return result;
    case 2:
      uint64_t result = 1;
      break;
    case 3:
      uint64_t result = 3;
      break;
    case 4:
      uint64_t result = 4;
      break;
    case 5:
      uint64_t result = 6;
      break;
    case 6:
      uint64_t result = 2;
      break;
    case 7:
      uint64_t result = 5;
      break;
    default:
      if (a1 == 0x7FFFFFFF) {
LABEL_4:
      }
        uint64_t result = 7;
      break;
  }
  return result;
}

void WebGPU::populateStencilOperation(void *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  uint64_t v8 = 0;
  switch(*a2)
  {
    case 0:
    case 8:
      goto LABEL_4;
    case 1:
      break;
    case 2:
      uint64_t v8 = 1;
      break;
    case 3:
      uint64_t v8 = 3;
      break;
    case 4:
      uint64_t v8 = 4;
      break;
    case 5:
      uint64_t v8 = 6;
      break;
    case 6:
      uint64_t v8 = 2;
      break;
    case 7:
      uint64_t v8 = 5;
      break;
    default:
      if (*a2 == 0x7FFFFFFF) {
LABEL_4:
      }
        uint64_t v8 = 7;
      break;
  }
  id v15 = v7;
  [v7 setStencilCompareFunction:v8];
  int v9 = a2[1];
  switch(v9)
  {
    case 1:
      uint64_t v10 = 1;
      break;
    case 2:
      uint64_t v10 = 2;
      break;
    case 3:
      uint64_t v10 = 5;
      break;
    case 4:
      uint64_t v10 = 3;
      break;
    case 5:
      uint64_t v10 = 4;
      break;
    case 6:
      uint64_t v10 = 6;
      break;
    case 7:
      uint64_t v10 = 7;
      break;
    default:
      uint64_t v10 = v9 == 0x7FFFFFFF;
      break;
  }
  [v15 setStencilFailureOperation:v10];
  int v11 = a2[2];
  switch(v11)
  {
    case 1:
      uint64_t v12 = 1;
      break;
    case 2:
      uint64_t v12 = 2;
      break;
    case 3:
      uint64_t v12 = 5;
      break;
    case 4:
      uint64_t v12 = 3;
      break;
    case 5:
      uint64_t v12 = 4;
      break;
    case 6:
      uint64_t v12 = 6;
      break;
    case 7:
      uint64_t v12 = 7;
      break;
    default:
      uint64_t v12 = v11 == 0x7FFFFFFF;
      break;
  }
  [v15 setDepthFailureOperation:v12];
  int v13 = a2[3];
  switch(v13)
  {
    case 1:
      uint64_t v14 = 1;
      break;
    case 2:
      uint64_t v14 = 2;
      break;
    case 3:
      uint64_t v14 = 5;
      break;
    case 4:
      uint64_t v14 = 3;
      break;
    case 5:
      uint64_t v14 = 4;
      break;
    case 6:
      uint64_t v14 = 6;
      break;
    case 7:
      uint64_t v14 = 7;
      break;
    default:
      uint64_t v14 = v13 == 0x7FFFFFFF;
      break;
  }
  [v15 setDepthStencilPassOperation:v14];
  [v15 setWriteMask:a4];
  [v15 setReadMask:a3];
}

void sub_182526AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t WebGPU::hasAlphaChannel(int a1)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 56:
    case 57:
    case 60:
    case 61:
    case 62:
    case 63:
      uint64_t result = 1;
      break;
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 58:
    case 59:
      return result;
    default:
      if (a1 == 0x7FFFFFFF)
      {
        __break(0xC471u);
        JUMPOUT(0x182526BD8);
      }
      return result;
  }
  return result;
}

__CFString *WebGPU::errorValidatingInterstageShaderInterfaces<WGPUFragmentState const>(uint64_t a1, MTLDataType a2, const WTF::StringImpl *a3, uint64_t *a4, int **a5, unsigned int **a6, uint64_t a7, uint64_t a8)
{
  if (!a4)
  {
    v18 = @"vertex shader has no outputs";
    goto LABEL_171;
  }
  uint64_t v9 = a7;
  unsigned int v10 = a2;
  unsigned int v11 = a1;
  if (a3)
  {
    v97 = a5;
    uint64_t v99 = a1;
    uint64_t v12 = *a4;
    int v13 = a6;
    if (*a4) {
      goto LABEL_4;
    }
LABEL_13:
    uint64_t v16 = 0;
    LODWORD(v14) = 0;
LABEL_15:
    uint64_t v15 = v12 + 24 * v14;
    goto LABEL_16;
  }
  if (!a1)
  {
    v18 = @"maxVertexShaderOutputComponents is zero";
    goto LABEL_171;
  }
  unsigned int v11 = a1 - 1;
  v97 = a5;
  uint64_t v99 = a1;
  uint64_t v12 = *a4;
  int v13 = a6;
  if (!*a4) {
    goto LABEL_13;
  }
LABEL_4:
  uint64_t v14 = *(unsigned int *)(v12 - 4);
  uint64_t v15 = v12 + 24 * v14;
  if (!*(_DWORD *)(v12 - 12))
  {
    uint64_t v16 = v12 + 24 * v14;
    goto LABEL_15;
  }
  uint64_t v16 = v12;
  if (v14)
  {
    uint64_t v17 = 24 * v14;
    uint64_t v16 = v12;
    while (*(_DWORD *)v16 >= 0xFFFFFFFE)
    {
      v16 += 24;
      v17 -= 24;
      if (!v17)
      {
        uint64_t v16 = v15;
        break;
      }
    }
  }
LABEL_16:
  if (v12)
  {
    uint64_t v19 = v12 + 24 * *(unsigned int *)(v12 - 4);
    if (v19 == v16) {
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v19 = 0;
    if (!v16) {
      goto LABEL_31;
    }
  }
  unsigned int v21 = 0;
  v18 = @"location >= maxInterStageShaderVariables";
  do
  {
    if (*(_DWORD *)v16 >= v10) {
      goto LABEL_171;
    }
    int v22 = WebGPU::componentsForDataType(*(WebGPU **)(v16 + 8), a2);
    uint64_t v23 = v16 + 24;
    uint64_t v16 = v15;
    if (v23 != v15)
    {
      uint64_t v16 = v23;
      while (*(_DWORD *)v16 >= 0xFFFFFFFE)
      {
        v16 += 24;
        if (v16 == v15)
        {
          uint64_t v16 = v15;
          break;
        }
      }
    }
    v21 += v22;
  }
  while (v16 != v19);
  BOOL v24 = v21 > v11;
  uint64_t v9 = a7;
  if (v24)
  {
    v18 = @"vertexScalarComponents > maxVertexShaderOutputComponents";
    goto LABEL_171;
  }
LABEL_31:
  if (!v9) {
    goto LABEL_170;
  }
  if (a8 && *(void *)(a8 + 16))
  {
    strlen(*(const char **)(a8 + 16));
    WTF::String::fromUTF8();
    v25 = v13;
    int v26 = v97;
    uint64_t v27 = v99;
    uint64_t v28 = *(void *)(v9 + 160);
    if (!v28) {
      goto LABEL_91;
    }
  }
  else
  {
    uint64_t v29 = *(WTF::StringImpl **)(v9 + 128);
    v25 = v13;
    uint64_t v27 = v99;
    if (v29) {
      *(_DWORD *)v29 += 2;
    }
    v102 = v29;
    int v26 = v97;
    uint64_t v28 = *(void *)(v9 + 160);
    if (!v28) {
      goto LABEL_91;
    }
  }
  int v30 = *(_DWORD *)(v28 - 8);
  unsigned int v31 = *((_DWORD *)v102 + 4);
  if (v31 < 0x100)
  {
    unsigned int v33 = WTF::StringImpl::hashSlowCase(v102);
    uint64_t v32 = v9;
  }
  else
  {
    uint64_t v32 = v9;
    unsigned int v33 = v31 >> 8;
  }
  for (i = 0; ; unsigned int v33 = i + v35)
  {
    uint64_t v35 = v33 & v30;
    v36 = *(WTF **)(v28 + 16 * v35);
    if (v36 != (WTF *)-1)
    {
      if (!v36)
      {
        uint64_t v39 = *(void *)(v32 + 160);
        if (!v39) {
          goto LABEL_91;
        }
        uint64_t v38 = v32;
        goto LABEL_57;
      }
      if (WTF::equal(v36, v102, a3)) {
        break;
      }
    }
    ++i;
  }
  uint64_t v37 = v28 + 16 * v35;
  uint64_t v38 = v32;
  uint64_t v39 = *(void *)(v32 + 160);
  if (!v39 || v37 != v39 + 16 * *(unsigned int *)(v39 - 4))
  {
    if (*(unsigned char *)(v37 + 8))
    {
      if (!v27)
      {
        BOOL v55 = 0;
        v18 = @"maxFragmentShaderInputComponents is less than zero due to front facing";
        goto LABEL_166;
      }
      uint64_t v27 = (v27 - 1);
    }
    if (!v39) {
      goto LABEL_91;
    }
  }
LABEL_57:
  int v40 = *(_DWORD *)(v39 - 8);
  unsigned int v41 = *((_DWORD *)v102 + 4);
  if (v41 < 0x100)
  {
    unsigned int v43 = WTF::StringImpl::hashSlowCase(v102);
    uint64_t v42 = v38;
  }
  else
  {
    uint64_t v42 = v38;
    unsigned int v43 = v41 >> 8;
  }
  for (j = 0; ; unsigned int v43 = j + v45)
  {
    uint64_t v45 = v43 & v40;
    v46 = *(WTF **)(v39 + 16 * v45);
    if (v46 != (WTF *)-1)
    {
      if (!v46)
      {
        uint64_t v49 = *(void *)(v42 + 160);
        if (!v49) {
          goto LABEL_91;
        }
        uint64_t v48 = v42;
        uint64_t v50 = *(unsigned int *)(v49 - 4);
        uint64_t v47 = v49 + 16 * v50;
        goto LABEL_69;
      }
      if (WTF::equal(v46, v102, a3)) {
        break;
      }
    }
    ++j;
  }
  uint64_t v47 = v39 + 16 * v45;
  uint64_t v48 = v42;
  uint64_t v49 = *(void *)(v42 + 160);
  if (!v49) {
    goto LABEL_70;
  }
  uint64_t v50 = *(unsigned int *)(v49 - 4);
LABEL_69:
  if (v47 == v49 + 16 * v50) {
    goto LABEL_74;
  }
LABEL_70:
  if (*(unsigned char *)(v47 + 9))
  {
    if (!v27)
    {
      BOOL v55 = 0;
      v18 = @"maxFragmentShaderInputComponents is less than zero due to sample index";
      goto LABEL_166;
    }
    uint64_t v27 = (v27 - 1);
  }
  if (!v49) {
    goto LABEL_91;
  }
LABEL_74:
  int v51 = *(_DWORD *)(v49 - 8);
  unsigned int v52 = *((_DWORD *)v102 + 4);
  if (v52 < 0x100)
  {
    unsigned int v54 = WTF::StringImpl::hashSlowCase(v102);
    uint64_t v53 = v48;
  }
  else
  {
    uint64_t v53 = v48;
    unsigned int v54 = v52 >> 8;
  }
  for (k = 0; ; unsigned int v54 = k + v57)
  {
    uint64_t v57 = v54 & v51;
    v58 = *(WTF **)(v49 + 16 * v57);
    if (v58 != (WTF *)-1)
    {
      if (!v58)
      {
        uint64_t v60 = *(void *)(v53 + 160);
        if (!v60) {
          goto LABEL_91;
        }
        uint64_t v61 = *(unsigned int *)(v60 - 4);
        uint64_t v59 = v60 + 16 * v61;
        goto LABEL_87;
      }
      if (WTF::equal(v58, v102, a3)) {
        break;
      }
    }
    ++k;
  }
  uint64_t v59 = v49 + 16 * v57;
  uint64_t v60 = *(void *)(v53 + 160);
  if (!v60) {
    goto LABEL_88;
  }
  uint64_t v61 = *(unsigned int *)(v60 - 4);
LABEL_87:
  if (v59 == v60 + 16 * v61) {
    goto LABEL_91;
  }
LABEL_88:
  if (*(unsigned char *)(v59 + 10))
  {
    if (!v27)
    {
      BOOL v55 = 0;
      v18 = @"maxFragmentShaderInputComponents is less than zero due to sample mask";
      goto LABEL_166;
    }
    uint64_t v27 = (v27 - 1);
  }
LABEL_91:
  if (!v26) {
    goto LABEL_144;
  }
  __int16 v101 = 2;
  v62 = *v26;
  if (!*v26)
  {
    v65 = 0;
    LODWORD(v63) = 0;
LABEL_101:
    v64 = &v62[6 * v63];
    goto LABEL_102;
  }
  uint64_t v63 = *(v62 - 1);
  v64 = &v62[6 * v63];
  if (!*(v62 - 3))
  {
    v65 = &v62[6 * v63];
    goto LABEL_101;
  }
  v65 = *v26;
  if (v63)
  {
    uint64_t v66 = 24 * v63;
    v65 = *v26;
    while (*v65 >= 0xFFFFFFFE)
    {
      v65 += 6;
      v66 -= 24;
      if (!v66)
      {
        v65 = v64;
        break;
      }
    }
  }
LABEL_102:
  if (v62)
  {
    v67 = &v62[6 * *(v62 - 1)];
    if (v67 == v65) {
      goto LABEL_144;
    }
    goto LABEL_106;
  }
  v67 = 0;
  if (!v65)
  {
LABEL_144:
    if (!v25) {
      goto LABEL_165;
    }
    v88 = *v25;
    if (*v25)
    {
      uint64_t v89 = *(v88 - 1);
      v90 = &v88[4 * v89];
      if (*(v88 - 3))
      {
        v91 = *v25;
        if (v89)
        {
          uint64_t v92 = 16 * v89;
          v91 = *v25;
          while (*v91 >= 0xFFFFFFFE)
          {
            v91 += 4;
            v92 -= 16;
            if (!v92)
            {
              v91 = v90;
              break;
            }
          }
        }
      }
      else
      {
        v91 = &v88[4 * v89];
        v90 = v91;
      }
    }
    else
    {
      v91 = 0;
      v90 = 0;
    }
    if (v88) {
      v88 += 4 * *(v88 - 1);
    }
    if (v88 == v91)
    {
LABEL_165:
      v18 = @"location >= maxInterStageShaderVariables";
      BOOL v55 = 1;
    }
    else
    {
      v18 = @"location >= maxInterStageShaderVariables";
      do
      {
        BOOL v55 = *v91 < v10;
        if (*v91 >= v10) {
          break;
        }
        v93 = v91 + 4;
        v91 = v90;
        if (v93 != v90)
        {
          v91 = v93;
          while (*v91 >= 0xFFFFFFFE)
          {
            v91 += 4;
            if (v91 == v90)
            {
              v91 = v90;
              break;
            }
          }
        }
      }
      while (v91 != v88);
    }
    goto LABEL_166;
  }
LABEL_106:
  uint64_t v68 = *a4;
  if (!*a4) {
    goto LABEL_138;
  }
  uint64_t v100 = v27;
  LODWORD(v69) = 0;
  int v70 = *(_DWORD *)(v68 - 8);
  v98 = (int *)(v68 + 24 * *(unsigned int *)(v68 - 4));
  v18 = @"interpolation attributes do not match";
  while (1)
  {
    unsigned int v71 = *v65;
    unsigned int v72 = 9 * ((v71 + ~(v71 << 15)) ^ ((v71 + ~(v71 << 15)) >> 10));
    unsigned int v73 = (v72 ^ (v72 >> 6)) + ~((v72 ^ (v72 >> 6)) << 11);
    unsigned int v74 = (v73 ^ HIWORD(v73)) & v70;
    v75 = (int *)(v68 + 24 * v74);
    int v76 = *v75;
    if (*v75 != *v65) {
      break;
    }
LABEL_113:
    if (v75 == v98) {
      goto LABEL_138;
    }
    v78 = (WebGPU *)*((void *)v75 + 1);
    if (v78 != *((WebGPU **)v65 + 1)) {
      goto LABEL_138;
    }
    int v79 = WebGPU::componentsForDataType(v78, a2);
    if (*((unsigned char *)v65 + 18))
    {
      if (*((unsigned char *)v75 + 18))
      {
        v80 = (__int16 *)(v75 + 4);
        int v81 = *((_WORD *)v65 + 8);
        int v82 = HIBYTE(*((unsigned __int16 *)v65 + 8));
      }
      else
      {
        if (*((unsigned char *)v65 + 16) != 2 || *((unsigned char *)v65 + 17)) {
          goto LABEL_143;
        }
        int v81 = *((_WORD *)v65 + 8);
        int v82 = HIBYTE(*((unsigned __int16 *)v65 + 8));
        v80 = &v101;
      }
LABEL_128:
      unsigned int v85 = (unsigned __int16)*v80;
      if (v81 != v85 || v82 != v85 >> 8) {
        goto LABEL_143;
      }
      goto LABEL_133;
    }
    if (*((unsigned char *)v75 + 18))
    {
      int v83 = *((unsigned __int8 *)v75 + 16);
      v80 = (__int16 *)(v75 + 4);
      if (v83 != 2 || *((unsigned char *)v80 + 1) != 0) {
        goto LABEL_143;
      }
      int v82 = 0;
      int v81 = 2;
      goto LABEL_128;
    }
LABEL_133:
    v87 = v65 + 6;
    v65 = v64;
    if (v87 != v64)
    {
      v65 = v87;
      while (*v65 >= 0xFFFFFFFE)
      {
        v65 += 6;
        if (v65 == v64)
        {
          v65 = v64;
          break;
        }
      }
    }
    uint64_t v69 = (v79 + v69);
    if (v65 == v67)
    {
      if (v69 <= v100) {
        goto LABEL_144;
      }
      objc_msgSend(NSString, "stringWithFormat:", @"fragmentScalarComponents(%u) > maxFragmentShaderInputComponents(%u)", v69, v100);
      v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_143:
      BOOL v55 = 0;
      goto LABEL_166;
    }
  }
  int v77 = 1;
  while (v76 != -1)
  {
    unsigned int v74 = (v74 + v77) & v70;
    v75 = (int *)(v68 + 24 * v74);
    int v76 = *v75;
    ++v77;
    if (*v75 == v71) {
      goto LABEL_113;
    }
  }
LABEL_138:
  v18 = @"data type between fragment inputs and vertex outputs do not match";
  BOOL v55 = 0;
LABEL_166:
  v94 = v102;
  v102 = 0;
  if (!v94)
  {
LABEL_169:
    if (!v55) {
      goto LABEL_171;
    }
    goto LABEL_170;
  }
  if (*(_DWORD *)v94 != 2)
  {
    *(_DWORD *)v94 -= 2;
    goto LABEL_169;
  }
  WTF::StringImpl::destroy();
  if (v55) {
LABEL_170:
  }
    v18 = 0;
LABEL_171:
  return v18;
}

void sub_18252744C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _DWORD *a16)
{
  if (a16)
  {
    if (*a16 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a16 -= 2;
  }
  _Unwind_Resume(exception_object);
}

id WebGPU::createVertexDescriptor(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t *a4, __CFString **a5)
{
  uint64_t v7 = objc_opt_new();
  uint64_t v138 = 0;
  unint64_t v9 = *(void *)(a1 + 40);
  id v135 = (id)v7;
  if (!v9)
  {
    unsigned int v134 = 0;
LABEL_131:
    uint64_t v92 = *a3;
    if (*a3)
    {
      uint64_t v93 = *(v92 - 1);
      v94 = &v92[2 * v93];
      if (!*(v92 - 3))
      {
        v95 = &v92[2 * v93];
        v94 = v95;
        if (v92)
        {
LABEL_146:
          uint64_t v100 = &v92[2 * *(v92 - 1)];
          if (v100 == v95) {
            goto LABEL_166;
          }
LABEL_152:
          while (1)
          {
            uint64_t v101 = *v95;
            uint64_t v102 = v95[1];
            if (!v138) {
              break;
            }
            unsigned int v103 = *(_DWORD *)(v138 - 8);
            unsigned int v104 = 9 * ((v101 + ~(v101 << 15)) ^ ((v101 + ~(v101 << 15)) >> 10));
            unsigned int v105 = (v104 ^ (v104 >> 6)) + ~((v104 ^ (v104 >> 6)) << 11);
            uint64_t v106 = v103 & (v105 ^ HIWORD(v105));
            int v107 = *(_DWORD *)(v138 + 8 * v106);
            if (v107 != v101)
            {
              int v108 = 1;
              while (v107 != -1)
              {
                uint64_t v106 = (v106 + v108) & v103;
                int v107 = *(_DWORD *)(v138 + 8 * v106);
                ++v108;
                if (v107 == v101) {
                  goto LABEL_159;
                }
              }
              uint64_t v106 = *(unsigned int *)(v138 - 4);
            }
LABEL_159:
            if (v106 == *(_DWORD *)(v138 - 4)) {
              break;
            }
            int v109 = WebGPU::formatType(*(unsigned int *)(v138 + 8 * v106 + 4));
            if (v109 != WebGPU::formatType(v102))
            {
              uint64_t v101 = *v95;
              break;
            }
            v110 = v95 + 2;
            v95 = v94;
            if (v110 != v94)
            {
              v95 = v110;
              while (*v95 >= 0xFFFFFFFE)
              {
                v95 += 2;
                if (v95 == v94)
                {
                  v95 = v94;
                  break;
                }
              }
            }
            if (v95 == v100) {
              goto LABEL_166;
            }
          }
          uint64_t v115 = WebGPU::vertexFormatSize(v102);
          v116 = *a3;
          unsigned int v10 = v135;
          if (*a3)
          {
            unsigned int v117 = *(v116 - 2);
            unsigned int v118 = 9 * ((v101 + ~(v101 << 15)) ^ ((v101 + ~(v101 << 15)) >> 10));
            unsigned int v119 = (v118 ^ (v118 >> 6)) + ~((v118 ^ (v118 >> 6)) << 11);
            uint64_t v120 = (v119 ^ HIWORD(v119)) & v117;
            unsigned int v121 = v116[2 * v120];
            if (v121 == v101)
            {
LABEL_178:
              if (v120 != *(v116 - 1))
              {
                uint64_t v123 = v116[2 * v120 + 1];
                goto LABEL_189;
              }
            }
            else
            {
              int v122 = 1;
              while (v121 != -1)
              {
                uint64_t v120 = (v120 + v122) & v117;
                unsigned int v121 = v116[2 * v120];
                ++v122;
                if (v121 == v101) {
                  goto LABEL_178;
                }
              }
            }
          }
          uint64_t v123 = 0;
LABEL_189:
          unsigned int v126 = v95[1];
          v127 = "UChar2";
          switch(v126)
          {
            case 0u:
              goto LABEL_194;
            case 1u:
              break;
            case 2u:
              v127 = "UChar4";
              break;
            case 3u:
              v127 = "Char2";
              break;
            case 4u:
              v127 = "Char4";
              break;
            case 5u:
              v127 = "UChar2Normalized";
              break;
            case 6u:
              v127 = "UChar4Normalized";
              break;
            case 7u:
              v127 = "Char2Normalized";
              break;
            case 8u:
              v127 = "Char4Normalized";
              break;
            case 9u:
              v127 = "UShort2";
              break;
            case 0xAu:
              v127 = "UShort4";
              break;
            case 0xBu:
              v127 = "Short2";
              break;
            case 0xCu:
              v127 = "Short4";
              break;
            case 0xDu:
              v127 = "UShort2Normalized";
              break;
            case 0xEu:
              v127 = "UShort4Normalized";
              break;
            case 0xFu:
              v127 = "Short2Normalized";
              break;
            case 0x10u:
              v127 = "Short4Normalized";
              break;
            case 0x11u:
              v127 = "Half2";
              break;
            case 0x12u:
              v127 = "Half4";
              break;
            case 0x13u:
              v127 = "Float";
              break;
            case 0x14u:
              v127 = "Float2";
              break;
            case 0x15u:
              v127 = "Float3";
              break;
            case 0x16u:
              v127 = "Float4";
              break;
            case 0x17u:
              v127 = "UInt";
              break;
            case 0x18u:
              v127 = "UInt2";
              break;
            case 0x19u:
              v127 = "UInt3";
              break;
            case 0x1Au:
              v127 = "UInt4";
              break;
            case 0x1Bu:
              v127 = "Int";
              break;
            case 0x1Cu:
              v127 = "Int2";
              break;
            case 0x1Du:
              v127 = "Int3";
              break;
            case 0x1Eu:
              v127 = "Int4";
              break;
            case 0x1Fu:
              v127 = "UInt1010102Normalized";
              break;
            default:
              if (v126 == 0x7FFFFFFF) {
LABEL_194:
              }
                v127 = "none";
              break;
          }
          v114 = objc_msgSend(NSString, "stringWithFormat:", @"!matchesFormat(attribute(%d), format(%s), size(%zu), otherFormat(%d)"), v101, v127, v115, v123;
          goto LABEL_226;
        }
LABEL_149:
        uint64_t v100 = 0;
        if (v95) {
          goto LABEL_152;
        }
LABEL_166:
        if (v134 > *(_DWORD *)(a2 + 96))
        {
          v111 = @"totalAttributeCount > limits.maxVertexAttributes";
          goto LABEL_181;
        }
        v112 = v135;
        uint64_t v113 = v138;
        if (v138) {
          goto LABEL_228;
        }
        goto LABEL_229;
      }
      v95 = *a3;
      if (v93)
      {
        uint64_t v96 = 8 * v93;
        v95 = *a3;
        while (*v95 >= 0xFFFFFFFE)
        {
          v95 += 2;
          v96 -= 8;
          if (!v96)
          {
            v95 = v94;
            if (v92) {
              goto LABEL_146;
            }
            goto LABEL_149;
          }
        }
      }
    }
    else
    {
      v95 = 0;
      v94 = 0;
    }
    if (v92) {
      goto LABEL_146;
    }
    goto LABEL_149;
  }
  unsigned int v10 = (void *)v7;
  unsigned int v134 = 0;
  uint64_t v11 = 0;
  v129 = a3;
  uint64_t v131 = a1;
  while (1)
  {
    uint64_t v12 = *(void *)(a1 + 48);
    int v13 = (unint64_t *)(v12 + 32 * v11);
    unint64_t v14 = *v13;
    if (*v13 == 0xFFFFFFFF) {
      goto LABEL_4;
    }
    if ((v14 & 3) != 0 || v14 > *(unsigned int *)(a2 + 100))
    {
      v114 = objc_msgSend(NSString, "stringWithFormat:", @"buffer.arrayStride(%llu) > limits.maxVertexBufferArrayStride(%u) || (buffer.arrayStride %llu)", v14, *(unsigned int *)(a2 + 100), v14);
LABEL_226:
      v111 = v114;
      goto LABEL_227;
    }
    uint64_t v16 = v12 + 32 * v11;
    uint64_t v18 = *(void *)(v16 + 16);
    uint64_t v17 = (void *)(v16 + 16);
    int v132 = v18;
    if (v18) {
      break;
    }
    a1 = v131;
LABEL_4:
    if (++v11 >= v9) {
      goto LABEL_131;
    }
  }
  if (v14 <= 4) {
    uint64_t v19 = 4;
  }
  else {
    uint64_t v19 = *v13;
  }
  uint64_t v20 = *a4;
  if (*a4)
  {
    int v21 = *(_DWORD *)(v20 - 8);
    unsigned int v22 = 9 * ((~(v11 << 15) + v11) ^ ((~(v11 << 15) + v11) >> 10));
    unsigned int v23 = (v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11);
    unsigned int v24 = v21 & (v23 ^ HIWORD(v23));
    int v25 = *(_DWORD *)(v20 + 32 * v24);
    if (v25 == v11)
    {
LABEL_195:
      __break(0xC471u);
      JUMPOUT(0x182528040);
    }
    int v26 = 1;
    while (v25 != -1)
    {
      unsigned int v24 = (v24 + v26) & v21;
      int v25 = *(_DWORD *)(v20 + 32 * v24);
      ++v26;
      if (v25 == v11) {
        goto LABEL_195;
      }
    }
  }
  uint64_t v27 = [v10 layouts];
  uint64_t v28 = [v27 objectAtIndexedSubscript:v11];
  [v28 setStride:v19];

  uint64_t v29 = v12 + 32 * v11;
  int v32 = *(_DWORD *)(v29 + 8);
  unsigned int v31 = (int *)(v29 + 8);
  int v30 = v32;
  uint64_t v33 = 1;
  if (v32 == 1) {
    uint64_t v33 = 2;
  }
  if (*v13) {
    BOOL v34 = v30 == 2;
  }
  else {
    BOOL v34 = 1;
  }
  if (v34) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = v33;
  }
  v36 = [v10 layouts];
  uint64_t v37 = [v36 objectAtIndexedSubscript:v11];
  [v37 setStepFunction:v35];

  uint64_t v38 = [v10 layouts];
  uint64_t v39 = [v38 objectAtIndexedSubscript:v11];
  uint64_t v40 = [v39 stepFunction];

  if (v40)
  {
    int v130 = ~(v11 << 15);
    if (*v17) {
      goto LABEL_30;
    }
LABEL_105:
    unint64_t v42 = 0;
LABEL_106:
    unint64_t v78 = *v13;
    int v79 = *v31;
    unsigned int v10 = v135;
    uint64_t v80 = *a4;
    a3 = v129;
    a1 = v131;
    if (*a4
      || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebGPU::RenderPipeline::BufferData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebGPU::RenderPipeline::BufferData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebGPU::RenderPipeline::BufferData,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::RenderPipeline::BufferData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a4, 8u), (uint64_t v80 = *a4) != 0))
    {
      unsigned int v81 = *(_DWORD *)(v80 - 8);
    }
    else
    {
      unsigned int v81 = 0;
    }
    unsigned int v82 = 9 * ((v130 + v11) ^ ((v130 + v11) >> 10));
    uint64_t v83 = v81 & (((v82 ^ (v82 >> 6)) + ~((v82 ^ (v82 >> 6)) << 11)) ^ (((v82 ^ (v82 >> 6)) + ~((v82 ^ (v82 >> 6)) << 11)) >> 16));
    uint64_t v84 = v80 + 32 * v83;
    int v85 = *(_DWORD *)v84;
    if (*(_DWORD *)v84 != -1)
    {
      uint64_t v86 = 0;
      int v87 = 1;
      while (v85 != v11)
      {
        if (v85 == -2) {
          uint64_t v86 = v84;
        }
        uint64_t v83 = (v83 + v87) & v81;
        uint64_t v84 = v80 + 32 * v83;
        int v85 = *(_DWORD *)v84;
        ++v87;
        if (*(_DWORD *)v84 == -1)
        {
          if (v86)
          {
            *(_DWORD *)uint64_t v86 = -1;
            *(void *)(v86 + 16) = 0;
            *(void *)(v86 + 24) = 0;
            *(void *)(v86 + 8) = 0;
            --*(_DWORD *)(*a4 - 16);
            uint64_t v84 = v86;
          }
          goto LABEL_117;
        }
      }
      goto LABEL_128;
    }
LABEL_117:
    *(_DWORD *)uint64_t v84 = v11;
    *(void *)(v84 + 8) = v78;
    *(void *)(v84 + 16) = v42;
    *(_DWORD *)(v84 + 24) = v79;
    if (*a4)
    {
      ++*(_DWORD *)(*a4 - 12);
      uint64_t v88 = *a4;
      if (*a4) {
        goto LABEL_119;
      }
LABEL_124:
      uint64_t v89 = *(unsigned int *)(v88 - 16);
      unint64_t v90 = *(unsigned int *)(v88 - 4);
      if (v90 > 0x400) {
        goto LABEL_125;
      }
LABEL_120:
      if (3 * v90 <= 4 * v89)
      {
        if (!v90)
        {
          unsigned int v91 = 8;
          goto LABEL_127;
        }
LABEL_126:
        unsigned int v91 = v90 << (6 * *(_DWORD *)(v88 - 12) >= (2 * v90));
LABEL_127:
        WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebGPU::RenderPipeline::BufferData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebGPU::RenderPipeline::BufferData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebGPU::RenderPipeline::BufferData,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::RenderPipeline::BufferData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a4, v91);
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      uint64_t v88 = *a4;
      if (!*a4) {
        goto LABEL_124;
      }
LABEL_119:
      uint64_t v89 = (*(_DWORD *)(v88 - 16) + *(_DWORD *)(v88 - 12));
      unint64_t v90 = *(unsigned int *)(v88 - 4);
      if (v90 <= 0x400) {
        goto LABEL_120;
      }
LABEL_125:
      if (v90 <= 2 * v89) {
        goto LABEL_126;
      }
    }
LABEL_128:
    v134 += v132;
    unint64_t v9 = *(void *)(v131 + 40);
    goto LABEL_4;
  }
  int v76 = [v10 layouts];
  int v77 = [v76 objectAtIndexedSubscript:v11];
  [v77 setStepRate:0];

  int v130 = ~(v11 << 15);
  if (!*v17) {
    goto LABEL_105;
  }
LABEL_30:
  uint64_t v41 = 0;
  unint64_t v42 = 0;
  unsigned int v43 = (uint64_t *)(v12 + 32 * v11 + 24);
  while (2)
  {
    uint64_t v44 = *v43;
    uint64_t v45 = *v43 + 24 * v41;
    unint64_t v46 = WebGPU::vertexFormatSize(*(_DWORD *)v45);
    unint64_t v47 = *(void *)(v45 + 8);
    unint64_t v48 = v47 + v46;
    if (__CFADD__(v47, v46))
    {
      unsigned int v10 = v135;
      v111 = @"attribute.offset + formatSize > uint64::max()";
      goto LABEL_227;
    }
    if (v42 <= v48) {
      unint64_t v42 = v47 + v46;
    }
    if (*v13)
    {
      if (v48 > *v13) {
        goto LABEL_180;
      }
LABEL_38:
      unint64_t v49 = 4;
      if (v46 < 4) {
        unint64_t v49 = v46;
      }
      if (v47 % v49)
      {
LABEL_180:
        v111 = @"attribute.offset + formatSize > buffer.arrayStride";
        goto LABEL_181;
      }
      uint64_t v50 = *(unsigned int *)(v44 + 24 * v41 + 16);
      uint64_t v51 = *(unsigned int *)(a2 + 96);
      uint64_t v52 = v138;
      if (v50 >= v51)
      {
        v97 = NSString;
        if (!v138)
        {
          unsigned int v10 = v135;
          goto LABEL_171;
        }
        int v54 = *(_DWORD *)(v138 - 8);
        unsigned int v124 = 9 * ((v50 + ~(v50 << 15)) ^ ((v50 + ~(v50 << 15)) >> 10));
        unsigned int v125 = (v124 ^ (v124 >> 6)) + ~((v124 ^ (v124 >> 6)) << 11);
        uint64_t v57 = v54 & (v125 ^ HIWORD(v125));
        unsigned int v10 = v135;
        int v98 = *(_DWORD *)(v138 + 8 * v57);
        if (v98 == v50)
        {
LABEL_143:
          uint64_t v52 = 1;
LABEL_171:
          v114 = objc_msgSend(v97, "stringWithFormat:", @"shaderLocation(%u) >= limits.maxVertexAttributes(%u) || shaderLocations.contains(shaderLocation) %d", v50, v51, v52);
          goto LABEL_226;
        }
LABEL_140:
        int v99 = 1;
        while (v98 != -1)
        {
          LODWORD(v57) = (v57 + v99) & v54;
          int v98 = *(_DWORD *)(v138 + 8 * v57);
          ++v99;
          if (v98 == v50) {
            goto LABEL_143;
          }
        }
        uint64_t v52 = 0;
        goto LABEL_171;
      }
      int v53 = ~(v50 << 15);
      if (v138)
      {
        int v54 = *(_DWORD *)(v138 - 8);
        unsigned int v55 = 9 * ((v50 + v53) ^ ((v50 + v53) >> 10));
        unsigned int v56 = (v55 ^ (v55 >> 6)) + ~((v55 ^ (v55 >> 6)) << 11);
        uint64_t v57 = v54 & (v56 ^ HIWORD(v56));
        int v58 = *(_DWORD *)(v138 + 8 * v57);
        if (v58 == v50)
        {
LABEL_139:
          v97 = NSString;
          unsigned int v10 = v135;
          int v98 = *(_DWORD *)(v138 + 8 * v57);
          if (v98 == v50) {
            goto LABEL_143;
          }
          goto LABEL_140;
        }
        int v59 = 1;
        unsigned int v60 = v57;
        while (v58 != -1)
        {
          unsigned int v60 = (v60 + v59) & v54;
          int v58 = *(_DWORD *)(v138 + 8 * v60);
          ++v59;
          if (v58 == v50) {
            goto LABEL_139;
          }
        }
      }
      else
      {
        WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(&v138, 8u, 0);
        uint64_t v52 = v138;
        if (v138) {
          int v54 = *(_DWORD *)(v138 - 8);
        }
        else {
          int v54 = 0;
        }
      }
      unsigned int v61 = 9 * ((v50 + v53) ^ ((v50 + v53) >> 10));
      unsigned int v62 = (v61 ^ (v61 >> 6)) + ~((v61 ^ (v61 >> 6)) << 11);
      unsigned int v63 = v54 & (v62 ^ HIWORD(v62));
      v64 = (_DWORD *)(v52 + 8 * v63);
      int v65 = *v64;
      if (*v64 != -1)
      {
        uint64_t v66 = 0;
        int v67 = 1;
        while (v65 != v50)
        {
          if (v65 == -2) {
            uint64_t v66 = v64;
          }
          unsigned int v63 = (v63 + v67) & v54;
          v64 = (_DWORD *)(v52 + 8 * v63);
          int v65 = *v64;
          ++v67;
          if (*v64 == -1)
          {
            if (v66)
            {
              *uint64_t v66 = 0xFFFFFFFFLL;
              --*(_DWORD *)(v138 - 16);
              v64 = v66;
            }
            goto LABEL_59;
          }
        }
LABEL_70:
        unsigned int v73 = [v135 attributes];
        unsigned int v74 = [v73 objectAtIndexedSubscript:v50];

        uint64_t v75 = 1;
        unsigned int v43 = (uint64_t *)(v12 + 32 * v11 + 24);
        switch(*(_DWORD *)v45)
        {
          case 0:
          case 0x13:
            goto LABEL_73;
          case 1:
            break;
          case 2:
            uint64_t v75 = 3;
            break;
          case 3:
            uint64_t v75 = 4;
            break;
          case 4:
            uint64_t v75 = 6;
            break;
          case 5:
            uint64_t v75 = 7;
            break;
          case 6:
            uint64_t v75 = 9;
            break;
          case 7:
            uint64_t v75 = 10;
            break;
          case 8:
            uint64_t v75 = 12;
            break;
          case 9:
            uint64_t v75 = 13;
            break;
          case 0xA:
            uint64_t v75 = 15;
            break;
          case 0xB:
            uint64_t v75 = 16;
            break;
          case 0xC:
            uint64_t v75 = 18;
            break;
          case 0xD:
            uint64_t v75 = 19;
            break;
          case 0xE:
            uint64_t v75 = 21;
            break;
          case 0xF:
            uint64_t v75 = 22;
            break;
          case 0x10:
            uint64_t v75 = 24;
            break;
          case 0x11:
            uint64_t v75 = 25;
            break;
          case 0x12:
            uint64_t v75 = 27;
            break;
          case 0x14:
            uint64_t v75 = 29;
            break;
          case 0x15:
            uint64_t v75 = 30;
            break;
          case 0x16:
            uint64_t v75 = 31;
            break;
          case 0x17:
            uint64_t v75 = 36;
            break;
          case 0x18:
            uint64_t v75 = 37;
            break;
          case 0x19:
            uint64_t v75 = 38;
            break;
          case 0x1A:
            uint64_t v75 = 39;
            break;
          case 0x1B:
            uint64_t v75 = 32;
            break;
          case 0x1C:
            uint64_t v75 = 33;
            break;
          case 0x1D:
            uint64_t v75 = 34;
            break;
          case 0x1E:
            uint64_t v75 = 35;
            break;
          case 0x1F:
            uint64_t v75 = 41;
            break;
          default:
            unsigned int v43 = (uint64_t *)(v12 + 32 * v11 + 24);
            if (*(_DWORD *)v45 == 0x7FFFFFFF) {
LABEL_73:
            }
              uint64_t v75 = 28;
            break;
        }
        [v74 setFormat:v75];
        [v74 setBufferIndex:v11];
        [v74 setOffset:*(void *)(v45 + 8)];

        if ((unint64_t)++v41 >= *v17) {
          goto LABEL_106;
        }
        continue;
      }
LABEL_59:
      int v68 = *(_DWORD *)v45;
      _DWORD *v64 = v50;
      v64[1] = v68;
      if (v138)
      {
        ++*(_DWORD *)(v138 - 12);
        uint64_t v69 = v138;
        if (v138)
        {
          uint64_t v70 = (*(_DWORD *)(v138 - 16) + *(_DWORD *)(v138 - 12));
          unint64_t v71 = *(unsigned int *)(v138 - 4);
          if (v71 <= 0x400) {
            goto LABEL_62;
          }
LABEL_67:
          if (v71 > 2 * v70) {
            goto LABEL_70;
          }
          goto LABEL_68;
        }
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        uint64_t v69 = 0;
      }
      uint64_t v70 = *(unsigned int *)(v69 - 16);
      unint64_t v71 = *(unsigned int *)(v69 - 4);
      if (v71 > 0x400) {
        goto LABEL_67;
      }
LABEL_62:
      if (3 * v71 > 4 * v70) {
        goto LABEL_70;
      }
      if (v71) {
LABEL_68:
      }
        unsigned int v72 = v71 << (6 * *(_DWORD *)(v69 - 12) >= (2 * v71));
      else {
        unsigned int v72 = 8;
      }
      WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(&v138, v72, v64);
      goto LABEL_70;
    }
    break;
  }
  if (v48 <= *(unsigned int *)(a2 + 100)) {
    goto LABEL_38;
  }
  v111 = @"attribute.offset + formatSize > limits.maxVertexBufferArrayStride";
LABEL_181:
  unsigned int v10 = v135;
LABEL_227:
  *a5 = v111;

  v112 = 0;
  uint64_t v113 = v138;
  if (v138) {
LABEL_228:
  }
    WTF::fastFree((WTF *)(v113 - 16), v8);
LABEL_229:
  return v112;
}

void sub_182528214(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  uint64_t v23 = *(void *)(v21 - 104);
  if (v23) {
    WTF::fastFree((WTF *)(v23 - 16), a2);
  }

  _Unwind_Resume(a1);
}

void WebGPU::RenderPipeline::create(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10, float a11, void *a12, uint64_t *a13, int a14, void *a15, int a16, uint64_t a17, uint64_t *a18, int **a19, uint64_t a20)
{
  id v23 = a2;
  id v24 = a12;
  id v90 = a15;
  uint64_t v25 = WTF::fastMalloc((WTF *)0x1C8);
  id v26 = v23;
  id v102 = v24;
  id v101 = v90;
  int v27 = 1;
  *(_DWORD *)uint64_t v25 = 1;
  *(void *)(v25 + 8) = 0;
  id v28 = v26;
  char v29 = 0;
  id v103 = v28;
  *(void *)(v25 + 16) = v28;
  atomic_uchar *volatile v30 = *(atomic_uchar *volatile *)a20;
  atomic_compare_exchange_strong_explicit(*(atomic_uchar *volatile *)a20, (unsigned __int8 *)&v29, 1u, memory_order_acquire, memory_order_acquire);
  if (v29) {
    MEMORY[0x18530AEA0](v30);
  }
  ++*((void *)v30 + 1);
  atomic_compare_exchange_strong_explicit(v30, (unsigned __int8 *)&v27, 0, memory_order_release, memory_order_relaxed);
  if (v27 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v30);
  }
  *(void *)(v25 + 24) = a20;
  *(void *)(v25 + 32) = a3;
  *(void *)(v25 + 40) = a4;
  *(void *)(v25 + 48) = a5;
  *(void *)(v25 + 56) = a6;
  *(void *)(v25 + 64) = a7;
  *(void *)(v25 + 72) = a8;
  *(float *)(v25 + 80) = a9;
  *(float *)(v25 + 84) = a10;
  *(float *)(v25 + 88) = a11;
  *(_DWORD *)(v25 + 92) = a14;
  id v31 = v101;
  *(void *)(v25 + 96) = v31;
  *(_DWORD *)(v25 + 104) = a16;
  id v32 = v102;
  *(void *)(v25 + 112) = v32;
  if (v32)
  {
    id v33 = *(id *)(a20 + 8);
    *(void *)(v25 + 120) = [v33 newDepthStencilStateWithDescriptor:v32];
  }
  else
  {
    *(void *)(v25 + 120) = 0;
  }
  *(void *)(v25 + 128) = 0;
  uint64_t v34 = *a18;
  *a18 = 0;
  *(void *)(v25 + 128) = v34;
  uint64_t v35 = *a13;
  *a13 = 0;
  *(void *)(v25 + 136) = v35;
  *(_OWORD *)(v25 + 144) = *(_OWORD *)a17;
  long long v36 = *(_OWORD *)(a17 + 16);
  long long v37 = *(_OWORD *)(a17 + 32);
  long long v38 = *(_OWORD *)(a17 + 48);
  *(_OWORD *)(v25 + 208) = *(_OWORD *)(a17 + 64);
  *(_OWORD *)(v25 + 192) = v38;
  *(_OWORD *)(v25 + 176) = v37;
  *(_OWORD *)(v25 + 160) = v36;
  long long v39 = *(_OWORD *)(a17 + 80);
  long long v40 = *(_OWORD *)(a17 + 96);
  long long v41 = *(_OWORD *)(a17 + 112);
  *(_OWORD *)(v25 + 272) = *(_OWORD *)(a17 + 128);
  *(_OWORD *)(v25 + 256) = v41;
  *(_OWORD *)(v25 + 240) = v40;
  *(_OWORD *)(v25 + 224) = v39;
  unint64_t v42 = (_OWORD *)(v25 + 288);
  unsigned int v43 = *(_OWORD **)(a17 + 104);
  if (!v43)
  {
    *(_OWORD *)(v25 + 336) = 0u;
    *(_OWORD *)(v25 + 352) = 0u;
    *(_OWORD *)(v25 + 304) = 0u;
    *(_OWORD *)(v25 + 320) = 0u;
    *unint64_t v42 = 0u;
    uint64_t v47 = v25 + 368;
    unint64_t v48 = *(long long **)(a17 + 136);
    if (v48) {
      goto LABEL_10;
    }
LABEL_12:
    *(void *)(v47 + 48) = 0;
    long long v49 = 0uLL;
    *(_OWORD *)(v47 + 16) = 0u;
    *(_OWORD *)(v47 + 32) = 0u;
    goto LABEL_13;
  }
  *unint64_t v42 = *v43;
  long long v44 = v43[1];
  long long v45 = v43[2];
  long long v46 = v43[4];
  *(_OWORD *)(v25 + 336) = v43[3];
  *(_OWORD *)(v25 + 352) = v46;
  *(_OWORD *)(v25 + 304) = v44;
  *(_OWORD *)(v25 + 320) = v45;
  uint64_t v47 = v25 + 368;
  unint64_t v48 = *(long long **)(a17 + 136);
  if (!v48) {
    goto LABEL_12;
  }
LABEL_10:
  long long v49 = *v48;
  long long v50 = v48[1];
  long long v51 = v48[2];
  *(void *)(v47 + 48) = *((void *)v48 + 6);
  *(_OWORD *)(v47 + 16) = v50;
  *(_OWORD *)(v47 + 32) = v51;
LABEL_13:
  *(_OWORD *)uint64_t v47 = v49;
  uint64_t v52 = (void *)(v25 + 424);
  uint64_t v53 = *(void *)(a17 + 136);
  int v98 = v32;
  uint64_t v100 = v31;
  uint64_t v96 = v47;
  if (!v53 || (unint64_t v54 = *(void *)(v53 + 40)) == 0)
  {
    *uint64_t v52 = 0;
    *(void *)(v25 + 432) = 0;
    int v58 = a19;
    *(void *)(v25 + 440) = 0;
    unsigned int v61 = *a19;
    if (!*a19) {
      goto LABEL_65;
    }
LABEL_21:
    uint64_t v62 = *(v61 - 3);
    if (!v62) {
      goto LABEL_65;
    }
    unsigned int v63 = (v62 - 1) | ((v62 - 1) >> 1) | (((v62 - 1) | ((v62 - 1) >> 1)) >> 2);
    unsigned int v64 = v63 | (v63 >> 4) | ((v63 | (v63 >> 4)) >> 8);
    unint64_t v65 = (v64 | HIWORD(v64)) + 1;
    if (v65 > 0x400)
    {
      if (v65 > 2 * v62) {
        goto LABEL_29;
      }
    }
    else if (3 * v65 > 4 * v62)
    {
LABEL_27:
      if ((double)v65 * 0.604166667 > (double)v62)
      {
LABEL_31:
        if (v65 <= 8) {
          uint64_t v66 = 8;
        }
        else {
          uint64_t v66 = v65;
        }
        uint64_t v67 = WTF::fastMalloc((WTF *)(16 * v66 + 16));
        int v68 = (void *)(v67 + 24);
        uint64_t v69 = v66;
        do
        {
          *((_DWORD *)v68 - 2) = -1;
          *int v68 = 0;
          v68 += 2;
          --v69;
        }
        while (v69);
        *(void *)(v25 + 440) = v67 + 16;
        *(_DWORD *)(v67 + 12) = v66;
        *(_DWORD *)(*(void *)(v25 + 440) - 8) = v66 - 1;
        *(_DWORD *)(*(void *)(v25 + 440) - 12) = v62;
        *(_DWORD *)(*(void *)(v25 + 440) - 16) = 0;
        uint64_t v70 = *v58;
        if (*v58)
        {
          uint64_t v71 = *(v70 - 1);
          unsigned int v72 = &v70[4 * v71];
          if (!*(v70 - 3))
          {
            unsigned int v73 = &v70[4 * v71];
            unsigned int v72 = v73;
            if (v70)
            {
LABEL_46:
              uint64_t v75 = &v70[4 * *(v70 - 1)];
              if (v75 == v73) {
                goto LABEL_65;
              }
              goto LABEL_52;
            }
LABEL_49:
            uint64_t v75 = 0;
            if (!v73) {
              goto LABEL_65;
            }
            do
            {
LABEL_52:
              uint64_t v76 = *(void *)(v25 + 440);
              if (v76) {
                int v77 = *(_DWORD *)(v76 - 8);
              }
              else {
                int v77 = 0;
              }
              int v78 = 0;
              unsigned int v79 = 9 * ((*v73 + ~(*v73 << 15)) ^ ((*v73 + ~(*v73 << 15)) >> 10));
              unsigned int v80 = ((v79 ^ (v79 >> 6)) + ~((v79 ^ (v79 >> 6)) << 11)) ^ (((v79 ^ (v79 >> 6))
                                                                         + ~((v79 ^ (v79 >> 6)) << 11)) >> 16);
              do
              {
                uint64_t v81 = v80 & v77;
                unsigned int v80 = ++v78 + v81;
              }
              while (*(_DWORD *)(v76 + 16 * v81) != -1);
              int v104 = *v73;
              WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::HashTable(&v105, (void *)v73 + 1);
              uint64_t v83 = v76 + 16 * v81;
              *(_DWORD *)uint64_t v83 = v104;
              uint64_t v84 = v105;
              uint64_t v105 = 0;
              uint64_t v85 = *(void *)(v83 + 8);
              *(void *)(v83 + 8) = v84;
              if (v85)
              {
                WTF::fastFree((WTF *)(v85 - 16), v82);
                if (v105) {
                  WTF::fastFree((WTF *)(v105 - 16), v86);
                }
              }
              int v87 = v73 + 4;
              unsigned int v73 = v72;
              if (v87 != v72)
              {
                unsigned int v73 = v87;
                while (*v73 >= 0xFFFFFFFE)
                {
                  v73 += 4;
                  if (v73 == v72)
                  {
                    unsigned int v73 = v72;
                    break;
                  }
                }
              }
            }
            while (v73 != v75);
            goto LABEL_65;
          }
          unsigned int v73 = *v58;
          if (v71)
          {
            uint64_t v74 = 16 * v71;
            unsigned int v73 = *v58;
            while (*v73 >= 0xFFFFFFFE)
            {
              v73 += 4;
              v74 -= 16;
              if (!v74)
              {
                unsigned int v73 = v72;
                if (v70) {
                  goto LABEL_46;
                }
                goto LABEL_49;
              }
            }
          }
        }
        else
        {
          unsigned int v73 = 0;
          unsigned int v72 = 0;
        }
        if (v70) {
          goto LABEL_46;
        }
        goto LABEL_49;
      }
LABEL_30:
      LODWORD(v65) = 2 * v65;
      goto LABEL_31;
    }
    LODWORD(v65) = 2 * v65;
    if (v65 <= 0x400) {
      goto LABEL_27;
    }
LABEL_29:
    if ((double)v65 * 0.416666667 > (double)v62) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  unsigned int v55 = *(long long **)(v53 + 48);
  *uint64_t v52 = 0;
  *(void *)(v25 + 432) = 0;
  *(_DWORD *)(v25 + 436) = v54;
  if (v54 >> 27)
  {
    __break(0xC471u);
    return;
  }
  uint64_t v56 = 32 * v54;
  uint64_t v57 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v54));
  *(_DWORD *)(v25 + 432) = v54;
  *(void *)(v25 + 424) = v57;
  int v58 = a19;
  do
  {
    long long v59 = *v55;
    long long v60 = v55[1];
    v55 += 2;
    *uint64_t v57 = v59;
    v57[1] = v60;
    v57 += 2;
    v56 -= 32;
  }
  while (v56);
  *(void *)(v25 + 440) = 0;
  unsigned int v61 = *a19;
  if (*a19) {
    goto LABEL_21;
  }
LABEL_65:
  *(unsigned char *)(v25 + 448) = 0;
  if (*(void *)(a17 + 104)) {
    *(void *)(v25 + 248) = v25 + 288;
  }
  if (*(_DWORD *)(v25 + 436)) {
    *(void *)(v25 + 416) = *(void *)(v25 + 424);
  }
  if (*(void *)(a17 + 136)) {
    *(void *)(v25 + 280) = v96;
  }
  uint64_t v88 = *(_DWORD **)(a17 + 104);
  if (!v88 || !v88[15]) {
    goto LABEL_82;
  }
  int v89 = *(_DWORD *)(a17 + 100);
  if (v89 != 1)
  {
    if (v88[9] || v88[8] || v88[7]) {
      goto LABEL_81;
    }
    if (v89 == 2) {
      goto LABEL_82;
    }
  }
  if (v88[13] || v88[12] || v88[11]) {
LABEL_81:
  }
    *(unsigned char *)(v25 + 448) = 1;
LABEL_82:

  *a1 = v25;
}

void sub_182528A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,id a25)
{
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(a10, v27);
  WTF::fastFree((WTF *)v25, v28);

  _Unwind_Resume(a1);
}

WebGPU::RenderPipeline **std::pair<WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>>,decltype(nullptr)>::~pair(WebGPU::RenderPipeline **a1, void *a2)
{
  BOOL v3 = *a1;
  *a1 = 0;
  if (!v3) {
    return a1;
  }
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    return a1;
  }
  WebGPU::RenderPipeline::~RenderPipeline(v3, a2);
  WTF::fastFree(v5, v6);
  return a1;
}

WebGPU::RenderPipeline *WebGPU::Device::createRenderPipelineAsync(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v5 = 1;
  WebGPU::Device::createRenderPipeline(a1, a2, 1, &v35);
  uint64_t v6 = *(void *)(a1 + 448);
  if (!v6) {
    goto LABEL_23;
  }
  char v7 = 0;
  uint64_t v8 = *(void *)(a1 + 456);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
  if (v7) {
    MEMORY[0x18530AEA0](v6);
  }
  if (*(void *)(v6 + 24))
  {
    ++*(void *)(v6 + 8);
    int v9 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 == 1) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v8 = 0;
    int v24 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
    if (v24 == 1)
    {
LABEL_6:
      if (v8) {
        goto LABEL_7;
      }
      goto LABEL_23;
    }
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  if (v8)
  {
LABEL_7:
    char v10 = 0;
    atomic_uchar *volatile v11 = *(atomic_uchar *volatile *)a1;
    atomic_compare_exchange_strong_explicit(*(atomic_uchar *volatile *)a1, (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
    if (v10) {
      MEMORY[0x18530AEA0](v11);
    }
    ++*((void *)v11 + 1);
    atomic_compare_exchange_strong_explicit(v11, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
    if (v5 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v11);
    }
    uint64_t v12 = v35;
    id v13 = v36;
    *(void *)&v33[0] = a1;
    *((void *)&v33[0] + 1) = v35;
    uint64_t v14 = *a3;
    *a3 = 0;
    uint64_t v35 = 0;
    id v36 = 0;
    uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x28);
    *uint64_t v15 = &unk_1ECABB468;
    v15[1] = a1;
    v15[2] = v12;
    v15[3] = v14;
    memset(v33, 0, sizeof(v33));
    v15[4] = v13;
    uint64_t v34 = v15;
    WebGPU::Instance::scheduleWork(v8, (uint64_t *)&v34);
    if (v34) {
      (*(void (**)(void *))(*v34 + 8))(v34);
    }
    char v17 = 0;
    uint64_t v18 = *(void *)(v8 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v18, (unsigned __int8 *)&v17, 1u, memory_order_acquire, memory_order_acquire);
    if (v17)
    {
      MEMORY[0x18530AEA0](v18);
      uint64_t v31 = *(void *)(v18 + 8);
      int v20 = 1;
      uint64_t v21 = v31 - 1;
      *(void *)(v18 + 8) = v31 - 1;
      if (v31 != 1)
      {
LABEL_15:
        uint64_t v22 = 0;
        BOOL v23 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v18, (unsigned __int8 *)&v20, 0, memory_order_release, memory_order_relaxed);
        if (v20 == 1) {
          goto LABEL_16;
        }
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v19 = *(void *)(v18 + 8);
      int v20 = 1;
      uint64_t v21 = v19 - 1;
      *(void *)(v18 + 8) = v19 - 1;
      if (v19 != 1) {
        goto LABEL_15;
      }
    }
    uint64_t v32 = *(void *)(v18 + 16);
    uint64_t v22 = *(void *)(v18 + 24);
    *(void *)(v18 + 24) = 0;
    BOOL v23 = v32 != 0;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v18, (unsigned __int8 *)&v20, 0, memory_order_release, memory_order_relaxed);
    if (v20 == 1)
    {
LABEL_16:
      if (v21) {
        goto LABEL_27;
      }
LABEL_17:
      if (v22) {
        (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
      }
      if (!v23) {
        WTF::fastFree((WTF *)v18, v16);
      }
      goto LABEL_27;
    }
LABEL_34:
    WTF::Lock::unlockSlow((WTF::Lock *)v18);
    if (v21) {
      goto LABEL_27;
    }
    goto LABEL_17;
  }
LABEL_23:
  MEMORY[0x18530AF50](v33, v36);
  uint64_t v25 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t, WebGPU::RenderPipeline **, _OWORD *))(*(void *)v25 + 16))(v25, 1, &v35, v33);
  (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  id v26 = *(_DWORD **)&v33[0];
  *(void *)&v33[0] = 0;
  if (v26)
  {
    if (*v26 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v26 -= 2;
    }
  }
LABEL_27:

  uint64_t result = v35;
  uint64_t v35 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebGPU::RenderPipeline::~RenderPipeline(result, v27);
      return (WebGPU::RenderPipeline *)WTF::fastFree(v29, v30);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

void sub_182528E64(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebGPU::Instance,(WTF::DestructionThread)0>::deref((atomic_uchar *volatile *)(v8 + 8), a2);
  std::pair<WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>>,NSString * {__strong}>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_182528ED8(_Unwind_Exception *a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  if (a2)
  {
    if (*a2 == 2)
    {
      WTF::StringImpl::destroy();
      std::pair<WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>>,NSString * {__strong}>::~pair((uint64_t)va);
      _Unwind_Resume(a1);
    }
    *a2 -= 2;
    std::pair<WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>>,NSString * {__strong}>::~pair((uint64_t)va);
    _Unwind_Resume(a1);
  }
  std::pair<WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>>,NSString * {__strong}>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

atomic_uchar *volatile **WebGPU::Device::createRenderPipelineAsync(WGPURenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WGPUCreatePipelineAsyncStatus,WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  v4 = *(WebGPU::RenderPipeline **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (!v4) {
    goto LABEL_6;
  }
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
LABEL_6:
    int v5 = (atomic_uchar *volatile **)a1;
    return WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref(v5, v2);
  }
  WebGPU::RenderPipeline::~RenderPipeline(v4, v2);
  WTF::fastFree(v7, v8);
  int v5 = (atomic_uchar *volatile **)a1;
  return WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref(v5, v2);
}

uint64_t std::pair<WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>>,NSString * {__strong}>::~pair(uint64_t a1)
{
  uint64_t v3 = *(WebGPU::RenderPipeline **)a1;
  *(void *)a1 = 0;
  if (!v3) {
    return a1;
  }
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    return a1;
  }
  WebGPU::RenderPipeline::~RenderPipeline(v3, v2);
  WTF::fastFree(v5, v6);
  return a1;
}

void WebGPU::RenderPipeline::~RenderPipeline(WebGPU::RenderPipeline *this, void *a2)
{
  uint64_t v3 = *((void *)this + 55);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      int v5 = (void *)(v3 + 8);
      do
      {
        if (*((_DWORD *)v5 - 2) != -2 && *v5) {
          WTF::fastFree((WTF *)(*v5 - 16), a2);
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v6 = (WTF *)*((void *)this + 53);
  if (v6)
  {
    *((void *)this + 53) = 0;
    *((_DWORD *)this + 108) = 0;
    WTF::fastFree(v6, a2);
  }
  uint64_t v7 = (atomic_uchar *volatile **)*((void *)this + 17);
  *((void *)this + 17) = 0;
  if (!v7)
  {
LABEL_14:
    uint64_t v8 = *((void *)this + 16);
    if (!v8) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (*(_DWORD *)v7 != 1)
  {
    --*(_DWORD *)v7;
    goto LABEL_14;
  }
  WebGPU::PipelineLayout::~PipelineLayout(v7, a2);
  WTF::fastFree(v13, v14);
  uint64_t v8 = *((void *)this + 16);
  if (v8) {
LABEL_15:
  }
    WTF::fastFree((WTF *)(v8 - 16), a2);
LABEL_16:

  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)this + 3, v9);
  uint64_t v11 = *((void *)this + 1);
  if (v11)
  {
    *(void *)(v11 + 8) = 0;
    uint64_t v12 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v12)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v10);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

BOOL WebGPU::RenderPipeline::colorDepthStencilTargetsMatch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (*(void *)(a1 + 280))
  {
    unint64_t v5 = *(unsigned int *)(a1 + 436);
    unint64_t v6 = *(unsigned int *)(a3 + 12);
    if (v5 <= v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = v5;
    }
    if (v7)
    {
      unint64_t v8 = 0;
      uint64_t v9 = 8;
      do
      {
        if (v8 >= v6)
        {
          if (v8 < v5)
          {
            int v11 = *(_DWORD *)(*(void *)(a1 + 424) + v9);
LABEL_7:
            if (v11) {
              return 0;
            }
          }
        }
        else
        {
          uint64_t v10 = *(void *)(*(void *)a3 + 8 * v8);
          if (v8 >= v5)
          {
            if (!v10) {
              goto LABEL_8;
            }
            if (*(_DWORD *)(v10 + 40)) {
              return 0;
            }
          }
          else
          {
            int v11 = *(_DWORD *)(*(void *)(a1 + 424) + v9);
            if (!v10) {
              goto LABEL_7;
            }
            if (v11 != *(_DWORD *)(v10 + 40)) {
              return 0;
            }
          }
          if (*(_DWORD *)(*(void *)(v10 + 96) + 40) != *(_DWORD *)(a1 + 264)) {
            return 0;
          }
        }
LABEL_8:
        ++v8;
        v9 += 32;
      }
      while (v7 != v8);
    }
  }
  else if (*(void *)(a2 + 16))
  {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 248);
  uint64_t v14 = *(void *)(a2 + 32);
  BOOL result = v14 == 0;
  if (v13)
  {
    if (v14)
    {
      uint64_t v15 = *a4;
      if (!*a4 || *(_DWORD *)(v15 + 40) != *(_DWORD *)(v13 + 8)) {
        return 0;
      }
      uint64_t v16 = *(void *)(v15 + 96);
      if (!*(unsigned char *)(v16 + 104)) {
        uint64_t v16 = *a4;
      }
      id v17 = *(id *)(v16 + 16);
      if ([v17 pixelFormat] == 261)
      {
        int v18 = *(_DWORD *)(*(void *)(a1 + 248) + 8);

        if (v18 == 38) {
          return 0;
        }
      }
      else
      {
      }
      if (*(_DWORD *)(*(void *)(v15 + 96) + 40) == *(_DWORD *)(a1 + 264)) {
        return 1;
      }
    }
    else if (!*(_DWORD *)(v13 + 8))
    {
      return 1;
    }
    return 0;
  }
  return result;
}

void sub_182529354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL WebGPU::RenderPipeline::validateRenderBundle(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 44);
  if (*(_DWORD *)(a2 + 40) && ([*(id *)(a1 + 112) isDepthWriteEnabled] & 1) != 0
    || v4 && *(unsigned char *)(a1 + 448)
    || *(_DWORD *)(a2 + 36) != *(_DWORD *)(a1 + 264))
  {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 280);
  if (v5)
  {
    unint64_t v6 = *(void *)(v5 + 40);
    unint64_t v7 = *(void *)(a2 + 16);
    if (v6 <= v7) {
      unint64_t v6 = *(void *)(a2 + 16);
    }
    if (v6)
    {
      unint64_t v8 = 0;
      unint64_t v9 = *(unsigned int *)(a1 + 436);
      uint64_t v10 = 8;
      do
      {
        if (v8 >= v7)
        {
          int v11 = 0;
          if (v8 < v9)
          {
LABEL_11:
            if (*(_DWORD *)(*(void *)(a1 + 424) + v10) != v11) {
              return 0;
            }
            goto LABEL_12;
          }
        }
        else
        {
          int v11 = *(_DWORD *)(*(void *)(a2 + 24) + 4 * v8);
          if (v8 < v9) {
            goto LABEL_11;
          }
        }
        if (v11) {
          return 0;
        }
LABEL_12:
        ++v8;
        v10 += 32;
      }
      while (v6 != v8);
    }
    uint64_t v13 = *(void *)(a1 + 248);
    int v14 = *(_DWORD *)(a2 + 32);
    if (v13) {
      return v14 == *(_DWORD *)(v13 + 8);
    }
    else {
      return v14 == 0;
    }
  }
  else
  {
    return !*(void *)(a2 + 16) && *(_DWORD *)(a2 + 32) == 0;
  }
}

_DWORD *wgpuRenderPipelineReference(_DWORD *result)
{
  return result;
}

WebGPU::RenderPipeline *wgpuRenderPipelineRelease(WebGPU::RenderPipeline *result, void *a2)
{
  if (*(_DWORD *)result == 1)
  {
    WebGPU::RenderPipeline::~RenderPipeline(result, a2);
    return (WebGPU::RenderPipeline *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_DWORD *wgpuRenderPipelineGetBindGroupLayout(void *a1, unsigned int a2)
{
  if (a1[2])
  {
    uint64_t v3 = a1[17];
    if (*(unsigned char *)(v3 + 32) && *(_DWORD *)(v3 + 28) > a2)
    {
      BOOL result = (_DWORD *)WebGPU::PipelineLayout::bindGroupLayout((WebGPU::PipelineLayout *)v3, a2);
      ++*result;
      return result;
    }
    uint64_t v5 = a1[3];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v7 = *(void *)(v5 + 32);
    uint64_t v8 = 32 * *(unsigned int *)(v5 + 44);
    uint64_t v9 = v7 + v8;
    while (v8)
    {
      int v10 = *(_DWORD *)(v9 - 8);
      v9 -= 32;
      v8 -= 32;
      if (!v10)
      {
        uint64_t v11 = v7 + v8;
        if (!*(unsigned char *)(v11 + 16))
        {
          uint64_t v12 = v45;
          long long v45 = 0;
          *(_DWORD *)uint64_t v11 = 1;
          *(void *)(v11 + 8) = v12;
          *(unsigned char *)(v11 + 16) = 1;
        }
        goto LABEL_18;
      }
    }
    uint64_t v21 = *(void *)(v5 + 24);
    if (v21)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v21 + 16))(v21, 1, &v45);
      uint64_t v22 = *(void *)(v5 + 24);
      *(void *)(v5 + 24) = 0;
      if (v22) {
        (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
      }
    }
LABEL_18:
    BOOL v23 = v45;
    long long v45 = 0;
    if (v23)
    {
      if (*v23 == 2)
      {
        WTF::StringImpl::destroy();
        uint64_t v24 = a1[17];
        *(unsigned char *)(v24 + 96) = 0;
        if (!*(unsigned char *)(v24 + 32)) {
          goto LABEL_56;
        }
        goto LABEL_32;
      }
      *v23 -= 2;
    }
    uint64_t v24 = a1[17];
    *(unsigned char *)(v24 + 96) = 0;
    if (!*(unsigned char *)(v24 + 32)) {
      goto LABEL_56;
    }
LABEL_32:
    if (*(_DWORD *)(v24 + 24))
    {
      uint64_t v29 = *(unsigned int *)(v24 + 28);
      if (v29)
      {
        atomic_uchar *volatile v30 = *(WebGPU::BindGroupLayout ***)(v24 + 16);
        uint64_t v31 = 8 * v29;
        do
        {
          uint64_t v32 = *v30;
          *atomic_uchar *volatile v30 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 1)
            {
              WebGPU::BindGroupLayout::~BindGroupLayout(v32, v6);
              WTF::fastFree(v33, v34);
            }
            else
            {
              --*(_DWORD *)v32;
            }
          }
          ++v30;
          v31 -= 8;
        }
        while (v31);
        *(_DWORD *)(v24 + 28) = 0;
      }
      long long v41 = *(WTF **)(v24 + 16);
      if (v41)
      {
        *(void *)(v24 + 16) = 0;
        *(_DWORD *)(v24 + 24) = 0;
        WTF::fastFree(v41, v6);
      }
    }
    goto LABEL_56;
  }
  uint64_t v13 = a1[3];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v15 = *(void *)(v13 + 32);
  uint64_t v16 = 32 * *(unsigned int *)(v13 + 44);
  uint64_t v17 = v15 + v16;
  while (v16)
  {
    int v18 = *(_DWORD *)(v17 - 8);
    v17 -= 32;
    v16 -= 32;
    if (!v18)
    {
      uint64_t v19 = v15 + v16;
      if (!*(unsigned char *)(v19 + 16))
      {
        int v20 = v45;
        long long v45 = 0;
        *(_DWORD *)uint64_t v19 = 1;
        *(void *)(v19 + 8) = v20;
        *(unsigned char *)(v19 + 16) = 1;
      }
      goto LABEL_26;
    }
  }
  uint64_t v25 = *(void *)(v13 + 24);
  if (v25)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v25 + 16))(v25, 1, &v45);
    uint64_t v26 = *(void *)(v13 + 24);
    *(void *)(v13 + 24) = 0;
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
    }
  }
LABEL_26:
  int v27 = v45;
  long long v45 = 0;
  if (!v27) {
    goto LABEL_29;
  }
  if (*v27 != 2)
  {
    *v27 -= 2;
LABEL_29:
    uint64_t v28 = a1[17];
    *(unsigned char *)(v28 + 96) = 0;
    if (!*(unsigned char *)(v28 + 32)) {
      goto LABEL_56;
    }
LABEL_41:
    if (*(_DWORD *)(v28 + 24))
    {
      uint64_t v35 = *(unsigned int *)(v28 + 28);
      if (v35)
      {
        id v36 = *(WebGPU::BindGroupLayout ***)(v28 + 16);
        uint64_t v37 = 8 * v35;
        do
        {
          long long v38 = *v36;
          void *v36 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 1)
            {
              WebGPU::BindGroupLayout::~BindGroupLayout(v38, v14);
              WTF::fastFree(v39, v40);
            }
            else
            {
              --*(_DWORD *)v38;
            }
          }
          ++v36;
          v37 -= 8;
        }
        while (v37);
        *(_DWORD *)(v28 + 28) = 0;
      }
      unint64_t v42 = *(WTF **)(v28 + 16);
      if (v42)
      {
        *(void *)(v28 + 16) = 0;
        *(_DWORD *)(v28 + 24) = 0;
        WTF::fastFree(v42, v14);
      }
    }
    goto LABEL_56;
  }
  WTF::StringImpl::destroy();
  uint64_t v28 = a1[17];
  *(unsigned char *)(v28 + 96) = 0;
  if (*(unsigned char *)(v28 + 32)) {
    goto LABEL_41;
  }
LABEL_56:
  unsigned int v43 = (atomic_uchar *volatile *)a1[3];
  uint64_t v44 = WTF::fastMalloc((WTF *)0xD8);
  WebGPU::BindGroupLayout::BindGroupLayout(v44, v43);
  return (_DWORD *)v44;
}

void sub_182529890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1825298E0(_Unwind_Exception *a1, void *a2)
{
  uint64_t v3 = v2;
  WTF::fastFree(v3, a2);
  _Unwind_Resume(a1);
}

void sub_1825298F8(_Unwind_Exception *a1, void *a2)
{
  uint64_t v3 = v2;
  WTF::fastFree(v3, a2);
  _Unwind_Resume(a1);
}

_DWORD *wgpuRenderPipelineSetLabel(int a1, char *__s)
{
  if (__s) {
    strlen(__s);
  }
  WTF::String::fromUTF8();
  BOOL result = v3;
  if (v3)
  {
    if (*v3 == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *v3 -= 2;
    }
  }
  return result;
}

uint64_t WebGPU::vertexFormatSize(int a1)
{
  uint64_t result = 2;
  switch(a1)
  {
    case 0:
      goto LABEL_8;
    case 1:
    case 3:
    case 5:
    case 7:
      return result;
    case 2:
    case 4:
    case 6:
    case 8:
    case 9:
    case 11:
    case 13:
    case 15:
    case 17:
    case 19:
    case 23:
    case 27:
    case 31:
      uint64_t result = 4;
      break;
    case 10:
    case 12:
    case 14:
    case 16:
    case 18:
    case 20:
    case 24:
    case 28:
      uint64_t result = 8;
      break;
    case 21:
    case 25:
    case 29:
      uint64_t result = 12;
      break;
    case 22:
    case 26:
    case 30:
      uint64_t result = 16;
      break;
    default:
      if (a1 == 0x7FFFFFFF) {
LABEL_8:
      }
        uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebGPU::RenderPipeline::BufferData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebGPU::RenderPipeline::BufferData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebGPU::RenderPipeline::BufferData,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::RenderPipeline::BufferData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    uint64_t v7 = a2;
    uint64_t result = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
    uint64_t v10 = result + 16;
    if (!a2) {
      goto LABEL_7;
    }
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
    uint64_t v7 = a2;
    uint64_t result = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
    uint64_t v10 = result + 16;
    if (!a2) {
      goto LABEL_7;
    }
  }
  uint64_t v11 = (void *)(result + 24);
  do
  {
    *((_DWORD *)v11 - 2) = -1;
    v11[1] = 0;
    v11[2] = 0;
    *uint64_t v11 = 0;
    v11 += 4;
    --v7;
  }
  while (v7);
LABEL_7:
  *a1 = v10;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v13 = v4 + 32 * i;
      if (*(_DWORD *)v13 <= 0xFFFFFFFD)
      {
        uint64_t v14 = *a1;
        if (*a1) {
          int v15 = *(_DWORD *)(v14 - 8);
        }
        else {
          int v15 = 0;
        }
        int v16 = 0;
        unsigned int v17 = 9
            * ((*(_DWORD *)v13 + ~(*(_DWORD *)v13 << 15)) ^ ((*(_DWORD *)v13 + ~(*(_DWORD *)v13 << 15)) >> 10));
        unsigned int v18 = ((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) ^ (((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) >> 16);
        do
        {
          uint64_t v19 = v18 & v15;
          unsigned int v18 = ++v16 + v19;
        }
        while (*(_DWORD *)(v14 + 32 * v19) != -1);
        int v20 = (_OWORD *)(v14 + 32 * v19);
        long long v21 = *(_OWORD *)(v13 + 16);
        *int v20 = *(_OWORD *)v13;
        v20[1] = v21;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v9);
}

uint64_t WebGPU::formatType(uint64_t result)
{
  if (result > 0x1F) {
    goto LABEL_8;
  }
  if (((1 << result) & 0x807FE1E0) != 0) {
    return 3;
  }
  if (((1 << result) & 0x78001818) != 0) {
    return 1;
  }
  if (result)
  {
LABEL_8:
    if (result == 0x7FFFFFFF)
    {
      uint64_t result = 539;
      __break(0xC471u);
    }
    else
    {
      return 2;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned long long>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned long long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = (WTF::StringImpl **)(v4 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (v11)
        {
          uint64_t v12 = *a1;
          if (*a1)
          {
            int v13 = *(_DWORD *)(v12 - 8);
            unsigned int v14 = *((_DWORD *)v11 + 4);
            if (v14 >= 0x100) {
              goto LABEL_12;
            }
LABEL_14:
            unsigned int v15 = WTF::StringImpl::hashSlowCase(v11);
          }
          else
          {
            int v13 = 0;
            unsigned int v14 = *((_DWORD *)v11 + 4);
            if (v14 < 0x100) {
              goto LABEL_14;
            }
LABEL_12:
            unsigned int v15 = v14 >> 8;
          }
          int v16 = 0;
          do
          {
            uint64_t v17 = v15 & v13;
            unsigned int v15 = ++v16 + v17;
          }
          while (*(void *)(v12 + 16 * v17));
          unsigned int v18 = (WTF::StringImpl **)(v12 + 16 * v17);
          uint64_t v19 = *(WTF::StringImpl **)(v4 + 16 * v9 + 8);
          __CFString *v18 = 0;
          int v20 = *v10;
          *uint64_t v10 = 0;
          __CFString *v18 = v20;
          v18[1] = v19;
          long long v21 = *v10;
          *uint64_t v10 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *(_DWORD *)v21 -= 2;
            }
          }
          goto LABEL_7;
        }
        *uint64_t v10 = 0;
      }
LABEL_7:
      if (++v9 == v5) {
        goto LABEL_23;
      }
    }
  }
  if (v4)
  {
LABEL_23:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

char *WTF::Vector<WGPUBindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  int v5 = *a1;
  if ((unint64_t)*a1 > a3 || (uint64_t v6 = *((unsigned int *)a1 + 3), (unint64_t)&v5[128 * v6] <= a3))
  {
    unint64_t v14 = *((unsigned int *)a1 + 2);
    unint64_t v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10) {
      unint64_t v16 = v15 + 1;
    }
    else {
      unint64_t v16 = 16;
    }
    if (v16 <= a2) {
      unint64_t v17 = a2;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17 > v14)
    {
      if (v17 >> 25) {
        goto LABEL_30;
      }
      uint64_t v18 = *((unsigned int *)a1 + 3);
      uint64_t v19 = (char *)WTF::fastMalloc((WTF *)(v17 << 7));
      *((_DWORD *)a1 + 2) = v17;
      *a1 = v19;
      memcpy(v19, v5, v18 << 7);
      if (v5)
      {
        if (*a1 == v5)
        {
          *a1 = 0;
          *((_DWORD *)a1 + 2) = 0;
        }
        WTF::fastFree((WTF *)v5, v20);
      }
    }
    return (char *)a3;
  }
  unint64_t v7 = *((unsigned int *)a1 + 2);
  unint64_t v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10) {
    unint64_t v9 = v8 + 1;
  }
  else {
    unint64_t v9 = 16;
  }
  if (v9 <= a2) {
    unint64_t v10 = a2;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 > v7)
  {
    if (!(v10 >> 25))
    {
      uint64_t v11 = (char *)WTF::fastMalloc((WTF *)(v10 << 7));
      *((_DWORD *)a1 + 2) = v10;
      *a1 = v11;
      memcpy(v11, v5, v6 << 7);
      int v13 = *a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *a1 = 0;
          *((_DWORD *)a1 + 2) = 0;
        }
        WTF::fastFree((WTF *)v5, v12);
        int v13 = *a1;
      }
      return &v13[128 * ((uint64_t)(a3 - (void)v5) >> 7)];
    }
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x182529F7CLL);
  }
  int v13 = *a1;
  return &v13[128 * ((uint64_t)(a3 - (void)v5) >> 7)];
}

uint64_t WebGPU::componentsForDataType(WebGPU *this, MTLDataType a2)
{
  int v2 = (char *)this - 3;
  uint64_t result = 1;
  switch((unint64_t)v2)
  {
    case 0uLL:
    case 0xDuLL:
    case 0x1AuLL:
    case 0x1EuLL:
    case 0x32uLL:
      return result;
    case 1uLL:
    case 0xEuLL:
    case 0x1BuLL:
    case 0x1FuLL:
    case 0x33uLL:
      uint64_t result = 2;
      break;
    case 2uLL:
    case 0xFuLL:
    case 0x1CuLL:
    case 0x20uLL:
    case 0x34uLL:
      uint64_t result = 3;
      break;
    case 3uLL:
    case 0x10uLL:
    case 0x1DuLL:
    case 0x21uLL:
    case 0x35uLL:
      uint64_t result = 4;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebGPU::Device::createRenderPipelineAsync(WGPURenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WGPUCreatePipelineAsyncStatus,WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1ECABB468;

  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(WebGPU::RenderPipeline **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (!v4) {
    goto LABEL_6;
  }
  if (*(_DWORD *)v4 != 1)
  {
    --*(_DWORD *)v4;
LABEL_6:
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)(a1 + 8), v2);
    return a1;
  }
  WebGPU::RenderPipeline::~RenderPipeline(v4, v2);
  WTF::fastFree(v6, v7);
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)(a1 + 8), v8);
  return a1;
}

{
  void *v2;
  uint64_t v3;
  WebGPU::RenderPipeline *v4;
  WTF *v5;
  void *v6;
  void *v7;
  uint64_t vars8;

  *(void *)a1 = &unk_1ECABB468;

  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(WebGPU::RenderPipeline **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebGPU::RenderPipeline::~RenderPipeline(v4, v2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)(a1 + 8), v2);
  return WTF::fastFree((WTF *)a1, v7);
}

_DWORD *WTF::Detail::CallableWrapper<WebGPU::Device::createRenderPipelineAsync(WGPURenderPipelineDescriptor const&,WTF::CompletionHandler<void ()(WGPUCreatePipelineAsyncStatus,WTF::Ref<WebGPU::RenderPipeline,WTF::RawPtrTraits<WebGPU::RenderPipeline>,WTF::DefaultRefDerefTraits<WebGPU::RenderPipeline>> &&,WTF::String &&)> &&)::$_0,void>::call(void *a1)
{
  if (*(unsigned char *)(a1[1] + 73)) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = *(void *)(a1[2] + 16) == 0;
  }
  MEMORY[0x18530AF50](&v5, a1[4]);
  uint64_t v3 = a1[3];
  a1[3] = 0;
  (*(void (**)(uint64_t, BOOL, void *, _DWORD **))(*(void *)v3 + 16))(v3, v2, a1 + 2, &v5);
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  uint64_t result = v5;
  int v5 = 0;
  if (result)
  {
    if (*result == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *result -= 2;
    }
  }
  return result;
}

void sub_18252A324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(a1);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void WebGPU::Device::createSampler(atomic_uchar *volatile *this@<X0>, const WGPUSamplerDescriptor *a2@<X1>, WebGPU::Sampler **a3@<X8>)
{
  if (*(void *)a2 || !*((void *)this + 1))
  {
    int v5 = (WebGPU::Sampler *)WTF::fastMalloc((WTF *)0x58);
    WebGPU::Sampler::Sampler(v5, this);
LABEL_33:
    *a3 = v5;
    return;
  }
  float v7 = *((float *)a2 + 10);
  if (v7 < 0.0
    || *((float *)a2 + 11) < v7
    || !*((_WORD *)a2 + 26)
    || *((_WORD *)a2 + 26) != 1 && (*((_DWORD *)a2 + 7) != 1 || *((_DWORD *)a2 + 8) != 1 || *((_DWORD *)a2 + 9) != 1))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v27 = *((void *)this + 4);
    uint64_t v28 = 32 * *((unsigned int *)this + 11);
    uint64_t v29 = v27 + v28;
    while (v28)
    {
      int v30 = *(_DWORD *)(v29 - 8);
      v29 -= 32;
      v28 -= 32;
      if (!v30)
      {
        uint64_t v31 = v27 + v28;
        if (!*(unsigned char *)(v31 + 16))
        {
          uint64_t v32 = v42;
          unint64_t v42 = 0;
          *(_DWORD *)uint64_t v31 = 1;
          *(void *)(v31 + 8) = v32;
          *(unsigned char *)(v31 + 16) = 1;
        }
        goto LABEL_28;
      }
    }
    uint64_t v33 = *((void *)this + 3);
    if (v33)
    {
      (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v33 + 16))(v33, 1, &v42);
      uint64_t v34 = *((void *)this + 3);
      *((void *)this + 3) = 0;
      if (v34) {
        (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
      }
    }
LABEL_28:
    uint64_t v35 = v42;
    unint64_t v42 = 0;
    if (v35)
    {
      if (*v35 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v35 -= 2;
      }
    }
    int v5 = (WebGPU::Sampler *)WTF::fastMalloc((WTF *)0x58);
    WebGPU::Sampler::Sampler(v5, this);
    goto LABEL_33;
  }
  WebGPU::createMetalDescriptorFromDescriptor((uint64_t)a2);
  id v41 = (id)objc_claimAutoreleasedReturnValue();
  char v40 = [v41 minFilter];
  char v39 = [v41 magFilter];
  char v38 = [v41 mipFilter];
  char v37 = [v41 sAddressMode];
  char v36 = [v41 tAddressMode];
  char v8 = [v41 rAddressMode];
  int v9 = [v41 normalizedCoordinates];
  char v10 = [v41 borderColor];
  int v11 = [v41 lodAverage];
  char v12 = [v41 compareFunction];
  int v13 = [v41 supportArgumentBuffers];

  [v41 lodMinClamp];
  unsigned int v15 = v14;
  [v41 lodMaxClamp];
  unsigned int v17 = v16;
  unint64_t v18 = [v41 maxAnisotropy];

  uint64_t v19 = [SamplerIdentifier alloc];
  uint64_t v20 = 0x8000;
  if (!v9) {
    uint64_t v20 = 0;
  }
  unint64_t v21 = v20 | ((unint64_t)(v10 & 3) << 16);
  uint64_t v22 = 0x40000;
  if (!v11) {
    uint64_t v22 = 0;
  }
  unint64_t v23 = v21 | v22 | ((unint64_t)(v12 & 7) << 19);
  uint64_t v24 = 0x400000;
  if (!v13) {
    uint64_t v24 = 0;
  }
  uint64_t v25 = [(SamplerIdentifier *)v19 initWithFirst:v40 & 3 | (unint64_t)((4 * (v39 & 3)) & 0xF) | (16 * (v38 & 3)) & 0x3F | ((v37 & 7) << 6) & 0x81FF | ((v36 & 7) << 9) & 0x8FFF | ((unint64_t)(v8 & 7) << 12) | v23 | v24 | ((unint64_t)v15 << 32) second:v17 | ((unint64_t)COERCE_UNSIGNED_INT((float)v18) << 32)];
  uint64_t v26 = (WebGPU::Sampler *)WTF::fastMalloc((WTF *)0x58);
  WebGPU::Sampler::Sampler(v26, v25, a2, this);
  *a3 = v26;
}

void sub_18252A7A0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id a15, uint64_t a16)
{
  WTF::fastFree(v17, a2);

  _Unwind_Resume(a1);
}

void sub_18252A83C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

id WebGPU::createMetalDescriptorFromDescriptor(uint64_t a1)
{
  BOOL v2 = objc_opt_new();
  uint64_t v3 = v2;
  int v4 = *(_DWORD *)(a1 + 16);
  uint64_t v5 = 2;
  if (v4 == 1) {
    uint64_t v5 = 3;
  }
  if (v4 == 2) {
    uint64_t v5 = 0;
  }
  if (v4 == 0x7FFFFFFF) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  [v2 setSAddressMode:v6];
  int v7 = *(_DWORD *)(a1 + 20);
  uint64_t v8 = 2;
  if (v7 == 1) {
    uint64_t v8 = 3;
  }
  if (v7 == 2) {
    uint64_t v8 = 0;
  }
  if (v7 == 0x7FFFFFFF) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v8;
  }
  [v3 setTAddressMode:v9];
  int v10 = *(_DWORD *)(a1 + 24);
  uint64_t v11 = 2;
  if (v10 == 1) {
    uint64_t v11 = 3;
  }
  if (v10 == 2) {
    uint64_t v11 = 0;
  }
  if (v10 == 0x7FFFFFFF) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v11;
  }
  [v3 setRAddressMode:v12];
  [v3 setMagFilter:*(_DWORD *)(a1 + 28) == 1];
  [v3 setMinFilter:*(_DWORD *)(a1 + 32) == 1];
  if (*(_DWORD *)(a1 + 36) == 1) {
    uint64_t v13 = 2;
  }
  else {
    uint64_t v13 = 1;
  }
  [v3 setMipFilter:v13];
  LODWORD(v14) = *(_DWORD *)(a1 + 40);
  [v3 setLodMinClamp:v14];
  LODWORD(v15) = *(_DWORD *)(a1 + 44);
  [v3 setLodMaxClamp:v15];
  uint64_t v16 = 0;
  int v17 = *(_DWORD *)(a1 + 48);
  switch(v17)
  {
    case 0:
    case 8:
      goto LABEL_28;
    case 1:
      break;
    case 2:
      uint64_t v16 = 1;
      break;
    case 3:
      uint64_t v16 = 3;
      break;
    case 4:
      uint64_t v16 = 4;
      break;
    case 5:
      uint64_t v16 = 6;
      break;
    case 6:
      uint64_t v16 = 2;
      break;
    case 7:
      uint64_t v16 = 5;
      break;
    default:
      if (v17 == 0x7FFFFFFF) {
LABEL_28:
      }
        uint64_t v16 = 7;
      break;
  }
  [v3 setCompareFunction:v16];
  [v3 setSupportArgumentBuffers:1];
  if (*(unsigned __int16 *)(a1 + 52) >= 0x10u) {
    uint64_t v18 = 16;
  }
  else {
    uint64_t v18 = *(unsigned __int16 *)(a1 + 52);
  }
  [v3 setMaxAnisotropy:v18];
  if (*(void *)(a1 + 8)) {
    uint64_t v19 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v19 = &stru_1ECABF938;
  }
  [v3 setLabel:v19];

  return v3;
}

void sub_18252AA48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18252AA5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18252AA6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WebGPU::Sampler *WebGPU::Sampler::Sampler(WebGPU::Sampler *this, SamplerIdentifier *a2, const WGPUSamplerDescriptor *a3, atomic_uchar *volatile *a4)
{
  int v7 = a2;
  *(_DWORD *)this = 1;
  uint64_t v8 = v7;
  *((void *)this + 2) = *(void *)a3;
  *((void *)this + 1) = v8;
  uint64_t v9 = (_DWORD *)*((void *)a3 + 1);
  if (v9) {
    *v9 += 2;
  }
  char v10 = 0;
  *((void *)this + 3) = v9;
  long long v11 = *((_OWORD *)a3 + 1);
  long long v12 = *((_OWORD *)a3 + 2);
  *(void *)((char *)this + 62) = *(void *)((char *)a3 + 46);
  *((_OWORD *)this + 2) = v11;
  *((_OWORD *)this + 3) = v12;
  atomic_uchar *volatile v13 = *a4;
  atomic_compare_exchange_strong_explicit(*a4, (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
  if (v10) {
    MEMORY[0x18530AEA0](v13);
  }
  ++*((void *)v13 + 1);
  int v14 = 1;
  atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
  if (v14 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
  }
  *((void *)this + 9) = a4;
  *((void *)this + 10) = 0;
  double v15 = WebGPU::Sampler::samplerState(this);
  objc_storeWeak((id *)this + 10, v15);

  return this;
}

void sub_18252ABAC(_Unwind_Exception *a1)
{
  WGPUSamplerDescriptor::~WGPUSamplerDescriptor(v3);

  _Unwind_Resume(a1);
}

id WebGPU::Sampler::samplerState(WebGPU::Sampler *this)
{
  if (!*((void *)this + 1))
  {
    uint64_t v8 = 0;
    goto LABEL_20;
  }
  char v2 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)&WebGPU::Sampler::samplerStateLock, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (!v2)
  {
    uint64_t v3 = (void *)WebGPU::Sampler::cachedSamplerStates;
    if (WebGPU::Sampler::cachedSamplerStates) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  MEMORY[0x18530AEA0](&WebGPU::Sampler::samplerStateLock);
  uint64_t v3 = (void *)WebGPU::Sampler::cachedSamplerStates;
  if (!WebGPU::Sampler::cachedSamplerStates)
  {
LABEL_4:
    uint64_t v4 = [MEMORY[0x1E4F1CA60] dictionary];
    uint64_t v5 = (void *)WebGPU::Sampler::cachedSamplerStates;
    WebGPU::Sampler::cachedSamplerStates = v4;

    uint64_t v6 = [MEMORY[0x1E4F1CA70] orderedSet];
    int v7 = (void *)WebGPU::Sampler::lastAccessedKeys;
    WebGPU::Sampler::lastAccessedKeys = v6;

    uint64_t v3 = (void *)WebGPU::Sampler::cachedSamplerStates;
  }
LABEL_5:
  uint64_t v8 = [v3 objectForKey:*((void *)this + 1)];
  if (v8)
  {
    int v9 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)&WebGPU::Sampler::samplerStateLock, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 == 1) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  id v10 = *(id *)(*((void *)this + 9) + 8);
  if (!v10)
  {
    uint64_t v8 = 0;
    goto LABEL_19;
  }
  unint64_t v11 = [(id)WebGPU::Sampler::cachedSamplerStates count];
  if (v11 < [v10 maxArgumentBufferSamplerCount])
  {
LABEL_15:
    atomic_uchar *volatile v13 = WebGPU::createMetalDescriptorFromDescriptor((uint64_t)this + 16);
    uint64_t v8 = (void *)[v10 newSamplerStateWithDescriptor:v13];

    if (v8)
    {
      [(id)WebGPU::Sampler::cachedSamplerStates setObject:v8 forKey:*((void *)this + 1)];
      [(id)WebGPU::Sampler::lastAccessedKeys addObject:*((void *)this + 1)];
      objc_storeWeak((id *)this + 10, v8);

      int v14 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)&WebGPU::Sampler::samplerStateLock, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
      if (v14 == 1) {
        goto LABEL_20;
      }
      goto LABEL_17;
    }
LABEL_19:

    int v15 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)&WebGPU::Sampler::samplerStateLock, (unsigned __int8 *)&v15, 0, memory_order_release, memory_order_relaxed);
    if (v15 == 1) {
      goto LABEL_20;
    }
LABEL_17:
    WTF::Lock::unlockSlow((WTF::Lock *)&WebGPU::Sampler::samplerStateLock);
    goto LABEL_20;
  }
  if ([(id)WebGPU::Sampler::lastAccessedKeys count])
  {
    long long v12 = [(id)WebGPU::Sampler::lastAccessedKeys objectAtIndex:0];
    if (v12) {
      [(id)WebGPU::Sampler::cachedSamplerStates removeObjectForKey:v12];
    }
    [(id)WebGPU::Sampler::lastAccessedKeys removeObjectAtIndex:0];

    goto LABEL_15;
  }
  uint64_t v8 = 0;

  int v17 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)&WebGPU::Sampler::samplerStateLock, (unsigned __int8 *)&v17, 0, memory_order_release, memory_order_relaxed);
  if (v17 != 1) {
    goto LABEL_17;
  }
LABEL_20:
  return v8;
}

void sub_18252AE18(_Unwind_Exception *a1)
{
  uint64_t v4 = 1;
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 == 1) {
    _Unwind_Resume(a1);
  }
  WTF::Lock::unlockSlow((uint64_t *)v4, (WTF::Lock *)&WebGPU::Sampler::samplerStateLock);
  _Unwind_Resume(a1);
}

void WGPUSamplerDescriptor::~WGPUSamplerDescriptor(WGPUSamplerDescriptor *this)
{
  char v2 = (_DWORD *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v2)
  {
    if (*v2 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v2 -= 2;
    }
  }
}

WebGPU::Sampler *WebGPU::Sampler::Sampler(WebGPU::Sampler *this, atomic_uchar *volatile *a2)
{
  char v4 = 0;
  int v5 = 1;
  *(_DWORD *)this = 1;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 54) = 0u;
  atomic_uchar *volatile v6 = *a2;
  atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x18530AEA0](v6);
  }
  ++*((void *)v6 + 1);
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  *((void *)this + 9) = a2;
  *((void *)this + 10) = 0;
  return this;
}

void sub_18252AF68(_Unwind_Exception *a1)
{
  char v4 = *(_DWORD **)(v1 + 24);
  *(void *)(v1 + 24) = 0;
  if (v4)
  {
    if (*v4 == 2)
    {
      WTF::StringImpl::destroy();

      _Unwind_Resume(a1);
    }
    *v4 -= 2;
  }

  _Unwind_Resume(a1);
}

void WebGPU::Sampler::~Sampler(WebGPU::Sampler *this)
{
  if (*((void *)this + 1))
  {
    char v2 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)&WebGPU::Sampler::samplerStateLock, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
    if (v2) {
      MEMORY[0x18530AEA0](&WebGPU::Sampler::samplerStateLock);
    }
    [(id)WebGPU::Sampler::cachedSamplerStates removeObjectForKey:*((void *)this + 1)];
    [(id)WebGPU::Sampler::lastAccessedKeys removeObject:*((void *)this + 1)];
    int v3 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)&WebGPU::Sampler::samplerStateLock, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
    if (v3 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)&WebGPU::Sampler::samplerStateLock);
    }
  }
  objc_destroyWeak((id *)this + 10);
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)this + 9, v4);
  int v5 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (!v5) {
    goto LABEL_9;
  }
  if (*v5 != 2)
  {
    *v5 -= 2;
LABEL_9:

    return;
  }
  WTF::StringImpl::destroy();
}

void sub_18252B094(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 + 80));
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)(v1 + 72), v3);
  WGPUSamplerDescriptor::~WGPUSamplerDescriptor((WGPUSamplerDescriptor *)(v1 + 16));

  _Unwind_Resume(a1);
}

_DWORD *wgpuSamplerReference(_DWORD *result)
{
  return result;
}

WebGPU::Sampler *wgpuSamplerRelease(WebGPU::Sampler *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebGPU::Sampler::~Sampler(result);
    return (WebGPU::Sampler *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_DWORD *wgpuSamplerSetLabel(uint64_t a1, char *__s)
{
  if (__s) {
    strlen(__s);
  }
  WTF::String::fromUTF8();
  uint64_t result = v5;
  if (v5) {
    *v5 += 2;
  }
  char v4 = *(_DWORD **)(a1 + 24);
  *(void *)(a1 + 24) = v5;
  if (v4)
  {
    if (*v4 == 2)
    {
      WTF::StringImpl::destroy();
      uint64_t result = v5;
      if (!v5) {
        return result;
      }
      goto LABEL_11;
    }
    *v4 -= 2;
  }
  if (!v5) {
    return result;
  }
LABEL_11:
  if (*result == 2) {
    return (_DWORD *)WTF::StringImpl::destroy();
  }
  *result -= 2;
  return result;
}

id WebGPU::ShaderModule::createLibrary(void *a1, void *a2, void *a3, void *a4)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  uint64_t v8 = objc_opt_new();
  [v8 setFastMathEnabled:1];
  if (*a2) {
    int v9 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    int v9 = &stru_1ECABF938;
  }
  id v10 = (void *)[v7 newLibraryWithSource:v9 options:v8 error:a4];

  if (a4 && *a4)
  {
    unint64_t v11 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v18 = *MEMORY[0x1E4F28568];
    long long v12 = NSString;
    if (*a2) {
      atomic_uchar *volatile v13 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      atomic_uchar *volatile v13 = &stru_1ECABF938;
    }
    int v15 = [v12 stringWithFormat:@"Failed to compile the shader source, generated metal:\n%@", v13, v18];
    v19[0] = v15;
    uint64_t v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:&v18 count:1];
    *a4 = [v11 errorWithDomain:@"WebGPU" code:1 userInfo:v16];

    id v10 = 0;
  }
  else
  {
    if (*a3) {
      int v14 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else {
      int v14 = &stru_1ECABF938;
    }
    [v10 setLabel:v14];
  }
  return v10;
}

void sub_18252B3DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebGPU::Device::createShaderModule@<X0>(int32x2_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*a2 && *(void *)&a1[1])
  {
    int v5 = 0;
    while (1)
    {
      a2 = (uint64_t *)*a2;
      if (!a2) {
        break;
      }
      if (!v5)
      {
        int v5 = a2;
        if (*((_DWORD *)a2 + 2) == 6) {
          continue;
        }
      }
      goto LABEL_18;
    }
    if (v5)
    {
      v13[0] = 0;
      v13[1] = 0;
      atomic_uchar *volatile v6 = (_DWORD *)a1[29];
      uint64_t v7 = a1[30].u32[1];
      if (v7)
      {
        uint64_t v8 = 4 * v7;
        do
        {
          switch(*v6)
          {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 0xA:
            case 0xB:
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              int v14 = (_DWORD *)v16;
              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t)&v16, v13, (const WTF::StringImpl **)&v14);
              if (v14)
              {
                if (*v14 == 2) {
                  WTF::StringImpl::destroy();
                }
                else {
                  *v14 -= 2;
                }
              }
              break;
            default:
              break;
          }
          ++v6;
          v8 -= 4;
        }
        while (v8);
      }
      if (v5[2]) {
        strlen((const char *)v5[2]);
      }
      WTF::String::fromUTF8();
      LOWORD(v15) = 0;
      *(int32x2_t *)&long long v11 = vrev64_s32(a1[13]);
      DWORD2(v11) = DWORD1(v11);
      HIDWORD(v11) = a1[26].i32[0];
      long long v16 = v11;
      uint64_t v12 = v13[0];
      v13[0] = 0;
      uint64_t v17 = v12;
      WGSL::staticCheck(&v14, (uint64_t)&v15, (uint64_t)&v16);
    }
  }
LABEL_18:
  int v18 = 2;
  uint64_t v9 = WTF::fastMalloc((WTF *)0xA8);
  uint64_t result = WebGPU::ShaderModule::ShaderModule(v9, (atomic_uchar *volatile *)a1, (uint64_t)&v16);
  *a3 = v9;
  if (v18 != -1) {
    return ((uint64_t (*)(_DWORD **, long long *))off_1ECABB480[v18])(&v14, &v16);
  }
  return result;
}

void sub_18252D08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  WTF::HashMap<WTF::String,WGSL::Reflection::EntryPointInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Reflection::EntryPointInformation>,WTF::HashTableTraits>::~HashMap(a14, v41);
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable(a19, v42);
  uint64_t v44 = *(unsigned int *)(v39 + 40);
  if (v44 != -1) {
    ((void (*)(uint64_t *, uint64_t))off_1ECABB480[v44])(&a39, a13);
  }
  *(_DWORD *)(v39 + 40) = -1;
  WTF::fastFree((WTF *)v39, v43);
  WTF::HashMap<WTF::String,WGSL::Reflection::EntryPointInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Reflection::EntryPointInformation>,WTF::HashTableTraits>::~HashMap(&a37, v45);
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable(&a38, v46);
  if (a29 != -1) {
    ((void (*)(uint64_t *, char *))off_1ECABB498[a29])(&a39, &a25);
  }
  WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::~HashSet(&a30, v47);
  WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::~HashMap(&a31, v48);
  _Unwind_Resume(a1);
}

void WGSL::Configuration::~Configuration(WGSL::Configuration *this, void *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(unsigned int *)(v2 - 4);
    if (v3)
    {
      char v4 = (_DWORD **)*((void *)this + 2);
      do
      {
        int v5 = *v4;
        if (*v4 != (_DWORD *)-1)
        {
          void *v4 = 0;
          if (v5)
          {
            if (*v5 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v5 -= 2;
            }
          }
        }
        ++v4;
        --v3;
      }
      while (v3);
    }
    WTF::fastFree((WTF *)(v2 - 16), a2);
  }
}

void *WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::~HashSet(void *a1, void *a2)
{
  uint64_t v3 = (_DWORD **)*a1;
  if (*a1)
  {
    uint64_t v4 = *((unsigned int *)v3 - 1);
    if (v4)
    {
      int v5 = (_DWORD **)*a1;
      do
      {
        atomic_uchar *volatile v6 = *v5;
        if (*v5 != (_DWORD *)-1)
        {
          _DWORD *v5 = 0;
          if (v6)
          {
            if (*v6 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v6 -= 2;
            }
          }
        }
        ++v5;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  return a1;
}

uint64_t *WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = *a1;
      while (1)
      {
        atomic_uchar *volatile v6 = *(_DWORD **)v5;
        if (*(void *)v5 == -1) {
          goto LABEL_5;
        }
        uint64_t v7 = *(_DWORD **)(v5 + 8);
        *(void *)(v5 + 8) = 0;
        if (!v7) {
          goto LABEL_10;
        }
        if (*v7 != 2) {
          break;
        }
        WTF::StringImpl::destroy();
        atomic_uchar *volatile v6 = *(_DWORD **)v5;
        *(void *)uint64_t v5 = 0;
        if (v6)
        {
LABEL_13:
          if (*v6 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v6 -= 2;
          }
        }
LABEL_5:
        v5 += 16;
        if (!--v4) {
          goto LABEL_15;
        }
      }
      *v7 -= 2;
LABEL_10:
      *(void *)uint64_t v5 = 0;
      if (v6) {
        goto LABEL_13;
      }
      goto LABEL_5;
    }
LABEL_15:
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

uint64_t WebGPU::ShaderModule::populateShaderModuleState(WebGPU::ShaderModule *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = (uint64_t *)((char *)this + 160);
  uint64_t v5 = *((void *)this + 20);
  if (!v5) {
    goto LABEL_14;
  }
  int v6 = *(_DWORD *)(v5 - 8);
  unsigned int v7 = *((_DWORD *)*a2 + 4);
  if (v7 < 0x100) {
    unsigned int v8 = WTF::StringImpl::hashSlowCase(*a2);
  }
  else {
    unsigned int v8 = v7 >> 8;
  }
  for (i = 0; ; unsigned int v8 = i + v10)
  {
    uint64_t v10 = v8 & v6;
    long long v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == (WTF *)-1) {
      goto LABEL_6;
    }
    if (!v11) {
      break;
    }
    if (WTF::equal(v11, *a2, a3))
    {
      uint64_t v12 = v5 + 16 * v10;
      uint64_t v13 = *v4;
      if (!*v4 || v12 != v13 + 16 * *(unsigned int *)(v13 - 4)) {
        return v12 + 8;
      }
      goto LABEL_15;
    }
LABEL_6:
    ++i;
  }
  uint64_t v13 = *v4;
  if (*v4) {
    goto LABEL_15;
  }
LABEL_14:
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebGPU::ShaderModule::ShaderModuleState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebGPU::ShaderModule::ShaderModuleState>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebGPU::ShaderModule::ShaderModuleState,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebGPU::ShaderModule::ShaderModuleState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v4, 8u, 0);
  uint64_t v13 = *v4;
  if (*v4)
  {
LABEL_15:
    int v14 = *(_DWORD *)(v13 - 8);
    uint64_t v15 = *a2;
    unsigned int v16 = *((_DWORD *)*a2 + 4);
    if (v16 >= 0x100) {
      goto LABEL_16;
    }
LABEL_18:
    unsigned int v17 = WTF::StringImpl::hashSlowCase(v15);
  }
  else
  {
    int v14 = 0;
    uint64_t v15 = *a2;
    unsigned int v16 = *((_DWORD *)*a2 + 4);
    if (v16 < 0x100) {
      goto LABEL_18;
    }
LABEL_16:
    unsigned int v17 = v16 >> 8;
  }
  uint64_t v18 = 0;
  int v19 = 1;
  while (2)
  {
    unsigned int v20 = v17 & v14;
    uint64_t v12 = v13 + 16 * (v17 & v14);
    unint64_t v21 = *(WTF **)v12;
    if (*(void *)v12 == -1)
    {
      uint64_t v18 = v13 + 16 * v20;
LABEL_21:
      unsigned int v17 = v19 + v20;
      ++v19;
      continue;
    }
    break;
  }
  if (v21)
  {
    if (WTF::equal(v21, *a2, a3)) {
      return v12 + 8;
    }
    goto LABEL_21;
  }
  if (v18)
  {
    *(void *)uint64_t v18 = 0;
    *(unsigned char *)(v18 + 12) = 0;
    *(_DWORD *)(v18 + 8) = 0;
    --*(_DWORD *)(*v4 - 16);
    uint64_t v12 = v18;
  }
  uint64_t v22 = *a2;
  if (*a2) {
    *(_DWORD *)v22 += 2;
  }
  *(void *)uint64_t v12 = v22;
  *(unsigned char *)(v12 + 12) = 0;
  *(_DWORD *)(v12 + 8) = 0;
  if (*v4)
  {
    ++*(_DWORD *)(*v4 - 12);
    uint64_t v23 = *v4;
    if (*v4) {
      goto LABEL_32;
    }
LABEL_37:
    uint64_t v24 = *(unsigned int *)(v23 - 16);
    unint64_t v25 = *(unsigned int *)(v23 - 4);
    if (v25 > 0x400) {
      goto LABEL_38;
    }
LABEL_33:
    if (3 * v25 <= 4 * v24)
    {
      if (!v25)
      {
        unsigned int v26 = 8;
        goto LABEL_40;
      }
LABEL_39:
      unsigned int v26 = v25 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v25));
LABEL_40:
      uint64_t v12 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebGPU::ShaderModule::ShaderModuleState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebGPU::ShaderModule::ShaderModuleState>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebGPU::ShaderModule::ShaderModuleState,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebGPU::ShaderModule::ShaderModuleState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v4, v26, (WTF::StringImpl **)v12);
    }
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    uint64_t v23 = *v4;
    if (!*v4) {
      goto LABEL_37;
    }
LABEL_32:
    uint64_t v24 = (*(_DWORD *)(v23 - 16) + *(_DWORD *)(v23 - 12));
    unint64_t v25 = *(unsigned int *)(v23 - 4);
    if (v25 <= 0x400) {
      goto LABEL_33;
    }
LABEL_38:
    if (v25 <= 2 * v24) {
      goto LABEL_39;
    }
  }
  return v12 + 8;
}

_OWORD *WTF::HashMap<unsigned int,MTLDataType,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<MTLDataType>,WTF::HashTableTraits>::add<MTLDataType>(_OWORD *result, uint64_t *a2, int *a3, void *a4)
{
  unsigned int v7 = result;
  uint64_t v8 = *a2;
  if (*a2
    || (uint64_t result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  int v11 = *a3;
  unsigned int v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  unsigned int v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  unsigned int v14 = (v13 ^ HIWORD(v13)) & v10;
  uint64_t v15 = (_OWORD *)(v8 + 16 * v14);
  int v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15 == -1)
  {
LABEL_12:
    *(_DWORD *)uint64_t v15 = v11;
    *((void *)v15 + 1) = *a4;
    if (*a2)
    {
      ++*(_DWORD *)(*a2 - 12);
      uint64_t v19 = *a2;
      if (*a2) {
        goto LABEL_14;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      uint64_t v19 = *a2;
      if (*a2)
      {
LABEL_14:
        uint64_t v20 = (*(_DWORD *)(v19 - 16) + *(_DWORD *)(v19 - 12));
        unint64_t v21 = *(unsigned int *)(v19 - 4);
        if (v21 <= 0x400) {
          goto LABEL_15;
        }
        goto LABEL_23;
      }
    }
    uint64_t v20 = *(unsigned int *)(v19 - 16);
    unint64_t v21 = *(unsigned int *)(v19 - 4);
    if (v21 <= 0x400)
    {
LABEL_15:
      if (3 * v21 > 4 * v20)
      {
LABEL_26:
        *(void *)unsigned int v7 = v15;
        *((void *)v7 + 1) = v19 + 16 * v21;
        *((unsigned char *)v7 + 16) = 1;
        return result;
      }
      if (!v21)
      {
        uint64_t result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a2, 8u, v15);
        uint64_t v15 = result;
        uint64_t v19 = *a2;
        if (!*a2)
        {
LABEL_18:
          unint64_t v21 = 0;
          goto LABEL_26;
        }
LABEL_25:
        unint64_t v21 = *(unsigned int *)(v19 - 4);
        goto LABEL_26;
      }
LABEL_24:
      uint64_t result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a2, v21 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v21)), v15);
      uint64_t v15 = result;
      uint64_t v19 = *a2;
      if (!*a2) {
        goto LABEL_18;
      }
      goto LABEL_25;
    }
LABEL_23:
    if (v21 > 2 * v20) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  unsigned int v17 = 0;
  int v18 = 1;
  while (v16 != v11)
  {
    if (v16 == -2) {
      unsigned int v17 = v15;
    }
    unsigned int v14 = (v14 + v18) & v10;
    uint64_t v15 = (_OWORD *)(v8 + 16 * v14);
    int v16 = *(_DWORD *)v15;
    ++v18;
    if (*(_DWORD *)v15 == -1)
    {
      if (v17)
      {
        *(_DWORD *)unsigned int v17 = -1;
        *((void *)v17 + 1) = 0;
        --*(_DWORD *)(*a2 - 16);
        int v11 = *a3;
        uint64_t v15 = v17;
      }
      goto LABEL_12;
    }
  }
  if (v9) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = *(unsigned int *)(v8 - 4);
  }
  *(void *)unsigned int v7 = v15;
  *((void *)v7 + 1) = v8 + 16 * v22;
  *((unsigned char *)v7 + 16) = 0;
  return result;
}

uint64_t WebGPU::metalDataTypeFromPrimitive(unsigned __int8 *a1, int a2)
{
  switch(a2)
  {
    case 1:
      unsigned int v2 = *a1 - 1;
      if (v2 >= 7 || ((0x5Bu >> v2) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x18252DC6CLL);
      }
      uint64_t result = qword_1826CECB0[(char)v2];
      break;
    case 2:
      unsigned int v5 = *a1 - 1;
      if (v5 >= 7 || ((0x5Bu >> v5) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x18252DCACLL);
      }
      uint64_t result = qword_1826CECE8[(char)v5];
      break;
    case 3:
      unsigned int v4 = *a1 - 1;
      if (v4 >= 7 || ((0x5Bu >> v4) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x18252DC8CLL);
      }
      uint64_t result = qword_1826CED20[(char)v4];
      break;
    case 4:
      unsigned int v6 = *a1 - 1;
      if (v6 >= 7 || ((0x5Bu >> v6) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x18252DCCCLL);
      }
      uint64_t result = qword_1826CED58[(char)v6];
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x18252DCECLL);
  }
  return result;
}

BOOL WebGPU::ShaderModule::usesSampleMaskInOutput(WebGPU::ShaderModule *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *((void *)this + 20);
  if (!v3) {
    return 0;
  }
  unsigned int v6 = *(_DWORD *)(v3 - 8);
  unsigned int v7 = *((_DWORD *)*a2 + 4);
  int v8 = v7 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v7 >> 8;
  for (i = 0; ; int v8 = ++i + v10)
  {
    uint64_t v10 = v8 & v6;
    int v11 = *(WTF **)(v3 + 16 * v10);
    if (v11 != (WTF *)-1)
    {
      if (!v11) {
        return 0;
      }
      if (WTF::equal(v11, *a2, a3)) {
        break;
      }
    }
  }
  uint64_t v12 = v3 + 16 * v10;
  uint64_t v13 = *((void *)this + 20);
  return (!v13 || v12 != v13 + 16 * *(unsigned int *)(v13 - 4)) && *(unsigned char *)(v12 + 11) != 0;
}

BOOL WebGPU::ShaderModule::usesFragDepth(WebGPU::ShaderModule *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *((void *)this + 20);
  if (!v3) {
    return 0;
  }
  unsigned int v6 = *(_DWORD *)(v3 - 8);
  unsigned int v7 = *((_DWORD *)*a2 + 4);
  int v8 = v7 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v7 >> 8;
  for (i = 0; ; int v8 = ++i + v10)
  {
    uint64_t v10 = v8 & v6;
    int v11 = *(WTF **)(v3 + 16 * v10);
    if (v11 != (WTF *)-1)
    {
      if (!v11) {
        return 0;
      }
      if (WTF::equal(v11, *a2, a3)) {
        break;
      }
    }
  }
  uint64_t v12 = v3 + 16 * v10;
  uint64_t v13 = *((void *)this + 20);
  return (!v13 || v12 != v13 + 16 * *(unsigned int *)(v13 - 4)) && *(unsigned char *)(v12 + 12) != 0;
}

uint64_t WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>::add<WebGPU::ShaderModule::VertexOutputFragmentInput>(uint64_t result, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *a2;
  if (*a2
    || (uint64_t result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  int v11 = *a3;
  unsigned int v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  unsigned int v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  unsigned int v14 = (v13 ^ HIWORD(v13)) & v10;
  uint64_t v15 = v8 + 24 * v14;
  int v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15 == -1)
  {
LABEL_12:
    *(_DWORD *)uint64_t v15 = v11;
    int v19 = *(_DWORD *)(a4 + 8);
    *(void *)(v15 + 8) = *(void *)a4;
    *(_WORD *)(v15 + 16) = v19;
    *(unsigned char *)(v15 + 18) = BYTE2(v19);
    if (*a2)
    {
      ++*(_DWORD *)(*a2 - 12);
      uint64_t v20 = *a2;
      if (*a2) {
        goto LABEL_14;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      uint64_t v20 = *a2;
      if (*a2)
      {
LABEL_14:
        uint64_t v21 = (*(_DWORD *)(v20 - 16) + *(_DWORD *)(v20 - 12));
        unint64_t v22 = *(unsigned int *)(v20 - 4);
        if (v22 <= 0x400) {
          goto LABEL_15;
        }
        goto LABEL_23;
      }
    }
    uint64_t v21 = *(unsigned int *)(v20 - 16);
    unint64_t v22 = *(unsigned int *)(v20 - 4);
    if (v22 <= 0x400)
    {
LABEL_15:
      if (3 * v22 > 4 * v21)
      {
LABEL_26:
        *(void *)uint64_t v7 = v15;
        *(void *)(v7 + 8) = v20 + 24 * v22;
        *(unsigned char *)(v7 + 16) = 1;
        return result;
      }
      if (!v22)
      {
        uint64_t result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a2, 8u, (long long *)v15);
        uint64_t v15 = result;
        uint64_t v20 = *a2;
        if (!*a2)
        {
LABEL_18:
          LODWORD(v22) = 0;
          goto LABEL_26;
        }
LABEL_25:
        LODWORD(v22) = *(_DWORD *)(v20 - 4);
        goto LABEL_26;
      }
LABEL_24:
      uint64_t result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a2, v22 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v22)), (long long *)v15);
      uint64_t v15 = result;
      uint64_t v20 = *a2;
      if (!*a2) {
        goto LABEL_18;
      }
      goto LABEL_25;
    }
LABEL_23:
    if (v22 > 2 * v21) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  uint64_t v17 = 0;
  int v18 = 1;
  while (v16 != v11)
  {
    if (v16 == -2) {
      uint64_t v17 = v15;
    }
    unsigned int v14 = (v14 + v18) & v10;
    uint64_t v15 = v8 + 24 * v14;
    int v16 = *(_DWORD *)v15;
    ++v18;
    if (*(_DWORD *)v15 == -1)
    {
      if (v17)
      {
        *(_DWORD *)uint64_t v17 = -1;
        *(void *)(v17 + 8) = 0;
        *(void *)(v17 + 16) = 0;
        --*(_DWORD *)(*a2 - 16);
        int v11 = *a3;
        uint64_t v15 = v17;
      }
      goto LABEL_12;
    }
  }
  if (v9) {
    unsigned int v23 = 0;
  }
  else {
    unsigned int v23 = *(_DWORD *)(v8 - 4);
  }
  *(void *)uint64_t v7 = v15;
  *(void *)(v7 + 8) = v8 + 24 * v23;
  *(unsigned char *)(v7 + 16) = 0;
  return result;
}

WTF *WTF::HashMap<WTF::String,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>(uint64_t a1, uint64_t *a2, const WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v8 = *a2;
  if (!*a2)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0);
    uint64_t v8 = *a2;
    if (!*a2)
    {
      int v9 = 0;
      int v10 = *a3;
      unsigned int v11 = *((_DWORD *)*a3 + 4);
      if (v11 >= 0x100) {
        goto LABEL_4;
      }
LABEL_6:
      unsigned int v12 = WTF::StringImpl::hashSlowCase(v10);
      goto LABEL_7;
    }
  }
  int v9 = *(_DWORD *)(v8 - 8);
  int v10 = *a3;
  unsigned int v11 = *((_DWORD *)*a3 + 4);
  if (v11 < 0x100) {
    goto LABEL_6;
  }
LABEL_4:
  unsigned int v12 = v11 >> 8;
LABEL_7:
  unsigned int v13 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v15 = v12 & v9;
    int v16 = (WTF *)(v8 + 16 * (v12 & v9));
    uint64_t result = *(WTF **)v16;
    if (*(void *)v16 == -1)
    {
      unsigned int v13 = (WTF *)(v8 + 16 * v15);
      goto LABEL_9;
    }
    if (!result)
    {
      if (v13)
      {
        uint64_t result = 0;
        *(void *)unsigned int v13 = 0;
        *((void *)v13 + 1) = 0;
        --*(_DWORD *)(*a2 - 16);
        int v16 = v13;
      }
      uint64_t v20 = *a3;
      if (*a3) {
        *(_DWORD *)v20 += 2;
      }
      *(void *)int v16 = v20;
      uint64_t v21 = *a4;
      *a4 = 0;
      uint64_t v22 = *((void *)v16 + 1);
      *((void *)v16 + 1) = v21;
      if (v22) {
        uint64_t result = (WTF *)WTF::fastFree((WTF *)(v22 - 16), a2);
      }
      if (*a2)
      {
        ++*(_DWORD *)(*a2 - 12);
        uint64_t v23 = *a2;
        if (*a2) {
          goto LABEL_23;
        }
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        uint64_t v23 = *a2;
        if (*a2)
        {
LABEL_23:
          uint64_t v24 = (*(_DWORD *)(v23 - 16) + *(_DWORD *)(v23 - 12));
          unint64_t v25 = *(unsigned int *)(v23 - 4);
          if (v25 <= 0x400) {
            goto LABEL_24;
          }
          goto LABEL_32;
        }
      }
      uint64_t v24 = *(unsigned int *)(v23 - 16);
      unint64_t v25 = *(unsigned int *)(v23 - 4);
      if (v25 <= 0x400)
      {
LABEL_24:
        if (3 * v25 > 4 * v24)
        {
LABEL_35:
          uint64_t v27 = v23 + 16 * v25;
          char v26 = 1;
          goto LABEL_36;
        }
        if (!v25)
        {
          uint64_t result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, (WTF::StringImpl **)v16);
          int v16 = result;
          uint64_t v23 = *a2;
          if (!*a2)
          {
LABEL_27:
            unint64_t v25 = 0;
            goto LABEL_35;
          }
LABEL_34:
          unint64_t v25 = *(unsigned int *)(v23 - 4);
          goto LABEL_35;
        }
LABEL_33:
        uint64_t result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v25 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v25)), (WTF::StringImpl **)v16);
        int v16 = result;
        uint64_t v23 = *a2;
        if (!*a2) {
          goto LABEL_27;
        }
        goto LABEL_34;
      }
LABEL_32:
      if (v25 > 2 * v24) {
        goto LABEL_35;
      }
      goto LABEL_33;
    }
    uint64_t result = (WTF *)WTF::equal(result, *a3, (const WTF::StringImpl *)a3);
    if (result) {
      break;
    }
LABEL_9:
    unsigned int v12 = i + v15;
  }
  uint64_t v18 = *a2;
  if (*a2) {
    uint64_t v19 = *(unsigned int *)(v18 - 4);
  }
  else {
    uint64_t v19 = 0;
  }
  char v26 = 0;
  uint64_t v27 = v18 + 16 * v19;
LABEL_36:
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v27;
  *(unsigned char *)(a1 + 16) = v26;
  return result;
}

uint64_t *WTF::HashMap<WTF::String,WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = *a1;
      do
      {
        unsigned int v6 = *(_DWORD **)v5;
        if (*(void *)v5 != -1)
        {
          uint64_t v7 = *(void *)(v5 + 8);
          if (v7)
          {
            WTF::fastFree((WTF *)(v7 - 16), a2);
            unsigned int v6 = *(_DWORD **)v5;
          }
          *(void *)uint64_t v5 = 0;
          if (v6)
          {
            if (*v6 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v6 -= 2;
            }
          }
        }
        v5 += 16;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

uint64_t *WTF::HashMap<WTF::String,WGSL::Reflection::EntryPointInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Reflection::EntryPointInformation>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = (WGSL::Reflection::EntryPointInformation *)(v3 + 8);
      do
      {
        if (*((void *)v5 - 1) != -1)
        {
          WGSL::Reflection::EntryPointInformation::~EntryPointInformation(v5, a2);
          unsigned int v6 = (_DWORD *)*((void *)v5 - 1);
          *((void *)v5 - 1) = 0;
          if (v6)
          {
            if (*v6 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v6 -= 2;
            }
          }
        }
        uint64_t v5 = (WGSL::Reflection::EntryPointInformation *)((char *)v5 + 96);
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

uint64_t WebGPU::ShaderModule::fragmentInputsForEntryPoint(WebGPU::ShaderModule *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5 = *((void *)this + 12);
  if (v5)
  {
    int v6 = *(_DWORD *)(v5 - 8);
    unsigned int v7 = *((_DWORD *)*a2 + 4);
    if (v7 < 0x100) {
      unsigned int v8 = WTF::StringImpl::hashSlowCase(*a2);
    }
    else {
      unsigned int v8 = v7 >> 8;
    }
    for (i = 0; ; unsigned int v8 = i + v10)
    {
      uint64_t v10 = v8 & v6;
      unsigned int v11 = *(WTF **)(v5 + 16 * v10);
      if (v11 != (WTF *)-1)
      {
        if (!v11) {
          goto LABEL_15;
        }
        if (WTF::equal(v11, *a2, a3)) {
          break;
        }
      }
      ++i;
    }
    uint64_t v12 = v5 + 16 * v10;
    uint64_t v13 = *((void *)this + 12);
    if (!v13 || v12 != v13 + 16 * *(unsigned int *)(v13 - 4)) {
      return v12 + 8;
    }
  }
LABEL_15:
  uint64_t v15 = *((void *)this + 19);
  if (!v15) {
    return 0;
  }
  unsigned int v16 = *(_DWORD *)(v15 - 8);
  unsigned int v17 = *((_DWORD *)*a2 + 4);
  int v18 = v17 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v17 >> 8;
  for (int j = 0; ; v18 = ++j + v20)
  {
    uint64_t v20 = v18 & v16;
    uint64_t v21 = *(WTF **)(v15 + 16 * v20);
    if (v21 != (WTF *)-1)
    {
      if (!v21) {
        return 0;
      }
      if (WTF::equal(v21, *a2, a3)) {
        break;
      }
    }
  }
  uint64_t v22 = v15 + 16 * v20;
  uint64_t v23 = *((void *)this + 19);
  if (v23)
  {
    if (v22 == v23 + 16 * *(unsigned int *)(v23 - 4)) {
      return 0;
    }
  }
  uint64_t v24 = *((void *)this + 12);
  if (!v24)
  {
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    goto LABEL_45;
  }
  int v25 = *(_DWORD *)(v24 - 8);
  char v26 = *(WTF::StringImpl **)(v22 + 8);
  unsigned int v27 = *((_DWORD *)v26 + 4);
  if (v27 < 0x100) {
    unsigned int v28 = WTF::StringImpl::hashSlowCase(v26);
  }
  else {
    unsigned int v28 = v27 >> 8;
  }
  for (k = 0; ; unsigned int v28 = k + v32)
  {
    uint64_t v32 = v28 & v25;
    uint64_t v33 = *(WTF **)(v24 + 16 * v32);
    if (v33 == (WTF *)-1) {
      goto LABEL_35;
    }
    if (!v33) {
      break;
    }
    if (WTF::equal(v33, *(const WTF::StringImpl **)(v22 + 8), a3))
    {
      uint64_t v29 = v24 + 16 * v32;
      uint64_t v30 = *((void *)this + 12);
      if (!v30) {
        goto LABEL_45;
      }
      uint64_t v34 = *(unsigned int *)(v30 - 4);
      goto LABEL_43;
    }
LABEL_35:
    ++k;
  }
  uint64_t v30 = *((void *)this + 12);
  if (v30)
  {
    uint64_t v34 = *(unsigned int *)(v30 - 4);
    uint64_t v29 = v30 + 16 * v34;
LABEL_43:
    v30 += 16 * v34;
    goto LABEL_45;
  }
  uint64_t v29 = 0;
LABEL_45:
  if (v29 == v30) {
    return 0;
  }
  else {
    return v29 + 8;
  }
}

uint64_t WebGPU::ShaderModule::fragmentReturnTypeForEntryPoint(WebGPU::ShaderModule *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5 = *((void *)this + 11);
  if (v5)
  {
    int v6 = *(_DWORD *)(v5 - 8);
    unsigned int v7 = *((_DWORD *)*a2 + 4);
    if (v7 < 0x100) {
      unsigned int v8 = WTF::StringImpl::hashSlowCase(*a2);
    }
    else {
      unsigned int v8 = v7 >> 8;
    }
    for (i = 0; ; unsigned int v8 = i + v10)
    {
      uint64_t v10 = v8 & v6;
      unsigned int v11 = *(WTF **)(v5 + 16 * v10);
      if (v11 != (WTF *)-1)
      {
        if (!v11) {
          goto LABEL_15;
        }
        if (WTF::equal(v11, *a2, a3)) {
          break;
        }
      }
      ++i;
    }
    uint64_t v12 = v5 + 16 * v10;
    uint64_t v13 = *((void *)this + 11);
    if (!v13 || v12 != v13 + 16 * *(unsigned int *)(v13 - 4)) {
      return v12 + 8;
    }
  }
LABEL_15:
  uint64_t v15 = *((void *)this + 19);
  if (!v15) {
    return 0;
  }
  unsigned int v16 = *(_DWORD *)(v15 - 8);
  unsigned int v17 = *((_DWORD *)*a2 + 4);
  int v18 = v17 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v17 >> 8;
  for (int j = 0; ; v18 = ++j + v20)
  {
    uint64_t v20 = v18 & v16;
    uint64_t v21 = *(WTF **)(v15 + 16 * v20);
    if (v21 != (WTF *)-1)
    {
      if (!v21) {
        return 0;
      }
      if (WTF::equal(v21, *a2, a3)) {
        break;
      }
    }
  }
  uint64_t v22 = v15 + 16 * v20;
  uint64_t v23 = *((void *)this + 19);
  if (v23)
  {
    if (v22 == v23 + 16 * *(unsigned int *)(v23 - 4)) {
      return 0;
    }
  }
  uint64_t v24 = *((void *)this + 11);
  if (!v24)
  {
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    goto LABEL_45;
  }
  int v25 = *(_DWORD *)(v24 - 8);
  char v26 = *(WTF::StringImpl **)(v22 + 8);
  unsigned int v27 = *((_DWORD *)v26 + 4);
  if (v27 < 0x100) {
    unsigned int v28 = WTF::StringImpl::hashSlowCase(v26);
  }
  else {
    unsigned int v28 = v27 >> 8;
  }
  for (k = 0; ; unsigned int v28 = k + v32)
  {
    uint64_t v32 = v28 & v25;
    uint64_t v33 = *(WTF **)(v24 + 16 * v32);
    if (v33 == (WTF *)-1) {
      goto LABEL_35;
    }
    if (!v33) {
      break;
    }
    if (WTF::equal(v33, *(const WTF::StringImpl **)(v22 + 8), a3))
    {
      uint64_t v29 = v24 + 16 * v32;
      uint64_t v30 = *((void *)this + 11);
      if (!v30) {
        goto LABEL_45;
      }
      uint64_t v34 = *(unsigned int *)(v30 - 4);
      goto LABEL_43;
    }
LABEL_35:
    ++k;
  }
  uint64_t v30 = *((void *)this + 11);
  if (v30)
  {
    uint64_t v34 = *(unsigned int *)(v30 - 4);
    uint64_t v29 = v30 + 16 * v34;
LABEL_43:
    v30 += 16 * v34;
    goto LABEL_45;
  }
  uint64_t v29 = 0;
LABEL_45:
  if (v29 == v30) {
    return 0;
  }
  else {
    return v29 + 8;
  }
}

uint64_t WebGPU::ShaderModule::vertexReturnTypeForEntryPoint(WebGPU::ShaderModule *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5 = *((void *)this + 13);
  if (v5)
  {
    int v6 = *(_DWORD *)(v5 - 8);
    unsigned int v7 = *((_DWORD *)*a2 + 4);
    if (v7 < 0x100) {
      unsigned int v8 = WTF::StringImpl::hashSlowCase(*a2);
    }
    else {
      unsigned int v8 = v7 >> 8;
    }
    for (i = 0; ; unsigned int v8 = i + v10)
    {
      uint64_t v10 = v8 & v6;
      unsigned int v11 = *(WTF **)(v5 + 16 * v10);
      if (v11 != (WTF *)-1)
      {
        if (!v11) {
          goto LABEL_15;
        }
        if (WTF::equal(v11, *a2, a3)) {
          break;
        }
      }
      ++i;
    }
    uint64_t v12 = v5 + 16 * v10;
    uint64_t v13 = *((void *)this + 13);
    if (!v13 || v12 != v13 + 16 * *(unsigned int *)(v13 - 4)) {
      return v12 + 8;
    }
  }
LABEL_15:
  uint64_t v15 = *((void *)this + 19);
  if (!v15) {
    return 0;
  }
  unsigned int v16 = *(_DWORD *)(v15 - 8);
  unsigned int v17 = *((_DWORD *)*a2 + 4);
  int v18 = v17 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v17 >> 8;
  for (int j = 0; ; v18 = ++j + v20)
  {
    uint64_t v20 = v18 & v16;
    uint64_t v21 = *(WTF **)(v15 + 16 * v20);
    if (v21 != (WTF *)-1)
    {
      if (!v21) {
        return 0;
      }
      if (WTF::equal(v21, *a2, a3)) {
        break;
      }
    }
  }
  uint64_t v22 = v15 + 16 * v20;
  uint64_t v23 = *((void *)this + 19);
  if (v23)
  {
    if (v22 == v23 + 16 * *(unsigned int *)(v23 - 4)) {
      return 0;
    }
  }
  uint64_t v24 = *((void *)this + 13);
  if (!v24)
  {
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    goto LABEL_45;
  }
  int v25 = *(_DWORD *)(v24 - 8);
  char v26 = *(WTF::StringImpl **)(v22 + 8);
  unsigned int v27 = *((_DWORD *)v26 + 4);
  if (v27 < 0x100) {
    unsigned int v28 = WTF::StringImpl::hashSlowCase(v26);
  }
  else {
    unsigned int v28 = v27 >> 8;
  }
  for (k = 0; ; unsigned int v28 = k + v32)
  {
    uint64_t v32 = v28 & v25;
    uint64_t v33 = *(WTF **)(v24 + 16 * v32);
    if (v33 == (WTF *)-1) {
      goto LABEL_35;
    }
    if (!v33) {
      break;
    }
    if (WTF::equal(v33, *(const WTF::StringImpl **)(v22 + 8), a3))
    {
      uint64_t v29 = v24 + 16 * v32;
      uint64_t v30 = *((void *)this + 13);
      if (!v30) {
        goto LABEL_45;
      }
      uint64_t v34 = *(unsigned int *)(v30 - 4);
      goto LABEL_43;
    }
LABEL_35:
    ++k;
  }
  uint64_t v30 = *((void *)this + 13);
  if (v30)
  {
    uint64_t v34 = *(unsigned int *)(v30 - 4);
    uint64_t v29 = v30 + 16 * v34;
LABEL_43:
    v30 += 16 * v34;
    goto LABEL_45;
  }
  uint64_t v29 = 0;
LABEL_45:
  if (v29 == v30) {
    return 0;
  }
  else {
    return v29 + 8;
  }
}

uint64_t WebGPU::ShaderModule::hasOverride(WebGPU::ShaderModule *this, const WTF::String *a2)
{
  unsigned int v2 = (void *)*((void *)this + 18);
  if (*(void *)a2) {
    uint64_t v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v3 = &stru_1ECABF938;
  }
  uint64_t v4 = [v2 containsObject:v3];

  return v4;
}

void sub_18252EBA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const WTF::StringImpl *WebGPU::ShaderModule::stageInTypesForEntryPoint(WebGPU::ShaderModule *this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return result;
  }
  if (!*((_DWORD *)result + 1)) {
    return 0;
  }
  uint64_t v6 = *((void *)this + 14);
  if (v6)
  {
    int v7 = *(_DWORD *)(v6 - 8);
    unsigned int v8 = *((_DWORD *)result + 4);
    if (v8 < 0x100) {
      unsigned int v9 = WTF::StringImpl::hashSlowCase(result);
    }
    else {
      unsigned int v9 = v8 >> 8;
    }
    for (i = 0; ; unsigned int v9 = i + v11)
    {
      uint64_t v11 = v9 & v7;
      uint64_t v12 = *(WTF **)(v6 + 16 * v11);
      if (v12 != (WTF *)-1)
      {
        if (!v12) {
          goto LABEL_19;
        }
        if (WTF::equal(v12, *a2, a3)) {
          break;
        }
      }
      ++i;
    }
    uint64_t v13 = v6 + 16 * v11;
    uint64_t v14 = *((void *)this + 14);
    if (!v14 || v13 != v14 + 16 * *(unsigned int *)(v14 - 4)) {
      return (const WTF::StringImpl *)(v13 + 8);
    }
  }
LABEL_19:
  uint64_t v15 = *((void *)this + 19);
  if (!v15) {
    return 0;
  }
  unsigned int v16 = *(_DWORD *)(v15 - 8);
  unsigned int v17 = *((_DWORD *)*a2 + 4);
  int v18 = v17 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v17 >> 8;
  for (int j = 0; ; v18 = ++j + v20)
  {
    uint64_t v20 = v18 & v16;
    uint64_t v21 = *(WTF **)(v15 + 16 * v20);
    if (v21 != (WTF *)-1)
    {
      if (!v21) {
        return 0;
      }
      if (WTF::equal(v21, *a2, a3)) {
        break;
      }
    }
  }
  uint64_t v22 = v15 + 16 * v20;
  uint64_t v23 = *((void *)this + 19);
  if (v23)
  {
    if (v22 == v23 + 16 * *(unsigned int *)(v23 - 4)) {
      return 0;
    }
  }
  uint64_t v24 = *((void *)this + 14);
  if (!v24)
  {
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    goto LABEL_49;
  }
  int v25 = *(_DWORD *)(v24 - 8);
  char v26 = *(WTF::StringImpl **)(v22 + 8);
  unsigned int v27 = *((_DWORD *)v26 + 4);
  if (v27 < 0x100) {
    unsigned int v28 = WTF::StringImpl::hashSlowCase(v26);
  }
  else {
    unsigned int v28 = v27 >> 8;
  }
  for (k = 0; ; unsigned int v28 = k + v32)
  {
    uint64_t v32 = v28 & v25;
    uint64_t v33 = *(WTF **)(v24 + 16 * v32);
    if (v33 == (WTF *)-1) {
      goto LABEL_39;
    }
    if (!v33) {
      break;
    }
    if (WTF::equal(v33, *(const WTF::StringImpl **)(v22 + 8), a3))
    {
      uint64_t v29 = v24 + 16 * v32;
      uint64_t v30 = *((void *)this + 14);
      if (!v30) {
        goto LABEL_49;
      }
      uint64_t v34 = *(unsigned int *)(v30 - 4);
      goto LABEL_47;
    }
LABEL_39:
    ++k;
  }
  uint64_t v30 = *((void *)this + 14);
  if (v30)
  {
    uint64_t v34 = *(unsigned int *)(v30 - 4);
    uint64_t v29 = v30 + 16 * v34;
LABEL_47:
    v30 += 16 * v34;
    goto LABEL_49;
  }
  uint64_t v29 = 0;
LABEL_49:
  if (v29 == v30) {
    return 0;
  }
  else {
    return (const WTF::StringImpl *)(v29 + 8);
  }
}

uint64_t WebGPU::ShaderModule::ShaderModule(uint64_t a1, atomic_uchar *volatile *a2, uint64_t a3)
{
  *(_DWORD *)a1 = 1;
  *(unsigned char *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = -1;
  uint64_t v5 = *(unsigned int *)(a3 + 32);
  if (v5 != -1)
  {
    ((void (*)(unsigned char *, uint64_t))off_1ECABB4A8[v5])(v10, a1 + 8);
    *(_DWORD *)(a1 + 40) = v5;
  }
  char v6 = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  atomic_uchar *volatile v7 = *a2;
  atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    MEMORY[0x18530AEA0](v7);
  }
  ++*((void *)v7 + 1);
  int v8 = 1;
  atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
  }
  *(void *)(a1 + 72) = a2;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 160) = 0;
  return a1;
}

void sub_18252EF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  WTF::HashMap<WTF::String,WGSL::Reflection::EntryPointInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Reflection::EntryPointInformation>,WTF::HashTableTraits>::~HashMap(v16, v18);
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable(v15, v19);
  uint64_t v20 = *(unsigned int *)(v13 + 40);
  if (v20 != -1) {
    ((void (*)(char *, uint64_t))off_1ECABB480[v20])(&a13, v14);
  }
  *(_DWORD *)(v13 + 40) = -1;
  _Unwind_Resume(a1);
}

WTF *WebGPU::ShaderModule::convertPipelineLayout@<X0>(WebGPU::ShaderModule *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v130 = 0;
  uint64_t v131 = 0;
  if (*((unsigned char *)this + 32)) {
    BOOL v5 = *((_DWORD *)this + 7) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v14 = this;
    unsigned int v108 = 0;
    unsigned int v105 = 0;
    unsigned int v106 = 0;
    unint64_t v15 = 0;
    while (1)
    {
      uint64_t v16 = WebGPU::PipelineLayout::bindGroupLayout(v14, v15);
      v128 = 0;
      uint64_t v129 = 0;
      uint64_t v18 = *(void *)(v16 + 48);
      unint64_t v104 = v15;
      if (v18)
      {
        uint64_t v19 = *(unsigned int *)(v18 - 4);
        uint64_t v20 = v18 + 136 * v19;
        if (*(_DWORD *)(v18 - 12))
        {
          uint64_t v21 = *(void *)(v16 + 48);
          if (v19)
          {
            uint64_t v22 = 136 * v19;
            uint64_t v21 = *(void *)(v16 + 48);
            while (*(_DWORD *)v21 >= 0xFFFFFFFE)
            {
              v21 += 136;
              v22 -= 136;
              if (!v22)
              {
                uint64_t v21 = v20;
                break;
              }
            }
          }
        }
        else
        {
          uint64_t v21 = v18 + 136 * v19;
          uint64_t v20 = v21;
        }
        uint64_t v23 = v18 + 136 * *(unsigned int *)(v18 - 4);
        if (v23 != v21)
        {
          unsigned int v117 = v108;
          unsigned int v116 = v106;
          unsigned int v115 = v105;
          uint64_t v111 = v18 + 136 * *(unsigned int *)(v18 - 4);
          while (1)
          {
            BYTE8(v119) = 0;
            long long v120 = 0uLL;
            LODWORD(v121) = 0;
            int v122 = 0;
            LOBYTE(v123) = 0;
            BYTE4(v123) = 0;
            BYTE8(v123) = 0;
            BYTE12(v123) = 0;
            LOBYTE(v124) = 0;
            BYTE4(v124) = 0;
            BYTE8(v124) = 0;
            BYTE12(v124) = 0;
            LOBYTE(v125) = 0;
            BYTE4(v125) = 0;
            BYTE8(v125) = 0;
            BYTE12(v125) = 0;
            v126[0] = 0;
            v126[4] = 0;
            v126[8] = 0;
            v126[12] = 0;
            v126[16] = 0;
            v126[20] = 0;
            int v24 = *(_DWORD *)(v21 + 12);
            LODWORD(v119) = *(_DWORD *)(v21 + 8);
            uint64_t v25 = *(unsigned int *)(v21 + 48);
            BYTE8(v119) = v24;
            if (v25 == -1) {
              uint64_t v26 = -1;
            }
            else {
              uint64_t v26 = v25;
            }
            switch(v26)
            {
              case 1:
                if (v25 != 1) {
                  goto LABEL_156;
                }
                int v31 = *(_DWORD *)(v21 + 24);
                if (v31 == 2) {
                  char v3 = 1;
                }
                else {
                  char v3 = 2 * (v31 == 3);
                }
                LODWORD(v25) = 1;
                goto LABEL_83;
              case 2:
                if (v25 != 2) {
                  goto LABEL_156;
                }
                int v28 = *(_DWORD *)(v21 + 24);
                char v3 = 3;
                switch(v28)
                {
                  case 0:
                  case 1:
                    goto LABEL_59;
                  case 2:
                    char v3 = 1;
                    unsigned int v29 = *(_DWORD *)(v21 + 28);
                    char v4 = 3;
                    if (v29 > 6) {
                      goto LABEL_77;
                    }
                    goto LABEL_74;
                  case 3:
                    char v3 = 2;
                    unsigned int v29 = *(_DWORD *)(v21 + 28);
                    char v4 = 3;
                    if (v29 > 6) {
                      goto LABEL_77;
                    }
                    goto LABEL_74;
                  case 4:
                    goto LABEL_73;
                  case 5:
                    char v3 = 4;
                    goto LABEL_73;
                  default:
                    if (v28 == 0x7FFFFFFF)
                    {
LABEL_59:
                      char v3 = 0;
                      unsigned int v29 = *(_DWORD *)(v21 + 28);
                      char v4 = 3;
                      if (v29 > 6)
                      {
LABEL_77:
                        if (v29 == 0x7FFFFFFF) {
LABEL_78:
                        }
                          char v4 = 1;
                        goto LABEL_82;
                      }
                    }
                    else
                    {
LABEL_73:
                      unsigned int v29 = *(_DWORD *)(v21 + 28);
                      char v4 = 3;
                    }
LABEL_74:
                    switch(v29)
                    {
                      case 0u:
                      case 2u:
                        goto LABEL_78;
                      case 1u:
                        char v4 = 0;
                        break;
                      case 3u:
                        char v4 = 2;
                        break;
                      case 4u:
                        break;
                      case 5u:
                        char v4 = 4;
                        break;
                      case 6u:
                        char v4 = 5;
                        break;
                      default:
                        goto LABEL_77;
                    }
LABEL_82:
                    char v118 = *(_DWORD *)(v21 + 32) != 0;
                    LODWORD(v25) = 2;
                    break;
                }
                goto LABEL_83;
              case 3:
                if (v25 != 3) {
                  goto LABEL_156;
                }
                char v3 = 0;
                int v30 = *(_DWORD *)(v21 + 24);
                if (v30 > 2)
                {
                  if (v30 == 3)
                  {
                    char v3 = 2;
                  }
                  else if (v30 == 0x7FFFFFFF)
                  {
                    goto LABEL_157;
                  }
                }
                else if (v30 == 2)
                {
                  char v3 = 1;
                }
                else if (!v30)
                {
                  goto LABEL_157;
                }
                int v32 = *(_DWORD *)(v21 + 28) - 12;
                if (v32 <= 0x19)
                {
                  char v4 = byte_1826CED90[v32];
                  unsigned int v33 = *(_DWORD *)(v21 + 32);
                  LODWORD(v25) = 3;
                  char v118 = 3;
LABEL_66:
                  switch(v33)
                  {
                    case 0u:
                      goto LABEL_70;
                    case 1u:
                      char v118 = 0;
                      break;
                    case 2u:
                      goto LABEL_71;
                    case 3u:
                      char v118 = 2;
                      break;
                    case 4u:
                      goto LABEL_83;
                    case 5u:
                      char v118 = 4;
                      break;
                    case 6u:
                      char v118 = 5;
                      break;
                    default:
                      goto LABEL_69;
                  }
                  goto LABEL_83;
                }
                char v4 = 0;
                unsigned int v33 = *(_DWORD *)(v21 + 32);
                LODWORD(v25) = 3;
                char v118 = 3;
                if (v33 <= 6) {
                  goto LABEL_66;
                }
LABEL_69:
                if (v33 == 0x7FFFFFFF)
                {
LABEL_70:
                  LODWORD(v25) = 3;
LABEL_71:
                  char v118 = 1;
                }
                else
                {
                  LODWORD(v25) = 3;
                }
LABEL_83:
                LOBYTE(v120) = v3;
                BYTE1(v120) = v4;
                BYTE2(v120) = v118;
                *((void *)&v120 + 1) = v114;
                LODWORD(v121) = v25;
                LODWORD(v123) = *(_DWORD *)(v21 + 56);
                BYTE4(v123) = *(unsigned char *)(v21 + 60);
                DWORD2(v123) = *(_DWORD *)(v21 + 80);
                BYTE12(v123) = *(unsigned char *)(v21 + 84);
                if (*(unsigned char *)(v21 + 108))
                {
                  uint64_t v34 = *(unsigned int *)(v21 + 104);
                  if ((v34 & 3) != 0) {
                    goto LABEL_159;
                  }
                  BYTE4(v124) = 1;
                  LODWORD(v124) = (v34 + v108) >> 2;
                  unint64_t v35 = v34 + 4;
                  if (v35 <= v117) {
                    LODWORD(v35) = v117;
                  }
                  unsigned int v117 = v35;
                }
                int v36 = *(_DWORD *)(v21 + 64);
                BYTE12(v124) = *(unsigned char *)(v21 + 68);
                DWORD2(v124) = v36;
                LODWORD(v125) = *(_DWORD *)(v21 + 88);
                BYTE4(v125) = *(unsigned char *)(v21 + 92);
                if (*(unsigned char *)(v21 + 116))
                {
                  uint64_t v37 = *(unsigned int *)(v21 + 112);
                  if ((v37 & 3) != 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x18252FA60);
                  }
                  BYTE12(v125) = 1;
                  DWORD2(v125) = ((v37 + v106) >> 2) + 3;
                  unint64_t v38 = v37 + 4;
                  if (v38 <= v116) {
                    LODWORD(v38) = v116;
                  }
                  unsigned int v116 = v38;
                }
                int v39 = *(_DWORD *)(v21 + 72);
                v126[4] = *(unsigned char *)(v21 + 76);
                *(_DWORD *)unsigned int v126 = v39;
                int v40 = *(_DWORD *)(v21 + 96);
                v126[12] = *(unsigned char *)(v21 + 100);
                *(_DWORD *)&v126[8] = v40;
                if (*(unsigned char *)(v21 + 124))
                {
                  uint64_t v41 = *(unsigned int *)(v21 + 120);
                  if ((v41 & 3) != 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x18252FA80);
                  }
                  v126[20] = 1;
                  *(_DWORD *)&v126[16] = (v41 + v105) >> 2;
                  unint64_t v42 = v41 + 4;
                  if (v42 <= v115) {
                    LODWORD(v42) = v115;
                  }
                  unsigned int v115 = v42;
                }
                unsigned int v43 = HIDWORD(v129);
                if (HIDWORD(v129) == v129)
                {
                  unint64_t v44 = WTF::Vector<WGSL::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v128, HIDWORD(v129) + 1, (unint64_t)&v119);
                  unsigned int v45 = HIDWORD(v129);
                  long long v46 = v128;
                  uint64_t v47 = (uint64_t)v128 + 120 * HIDWORD(v129);
                  long long v48 = *(_OWORD *)v44;
                  long long v49 = *(_OWORD *)(v44 + 16);
                  *(void *)(v47 + 32) = *(void *)(v44 + 32);
                  *(_OWORD *)uint64_t v47 = v48;
                  *(_OWORD *)(v47 + 16) = v49;
                  long long v50 = *(_DWORD **)(v44 + 40);
                  uint64_t v23 = v111;
                  if (v50) {
                    *v50 += 2;
                  }
                  uint64_t v51 = (uint64_t)v46 + 120 * v45;
                  *(void *)(v51 + 40) = v50;
                  *(_OWORD *)(v51 + 48) = *(_OWORD *)(v44 + 48);
                  long long v52 = *(_OWORD *)(v44 + 64);
                  long long v53 = *(_OWORD *)(v44 + 80);
                  long long v54 = *(_OWORD *)(v44 + 96);
                  *(void *)(v51 + 109) = *(void *)(v44 + 109);
                  *(_OWORD *)(v51 + 80) = v53;
                  *(_OWORD *)(v51 + 96) = v54;
                  *(_OWORD *)(v51 + 64) = v52;
                  HIDWORD(v129) = v45 + 1;
                  unsigned int v55 = v122;
                  int v122 = 0;
                  if (!v55) {
                    goto LABEL_108;
                  }
                }
                else
                {
                  uint64_t v56 = v128;
                  uint64_t v57 = (uint64_t)v128 + 120 * HIDWORD(v129);
                  long long v58 = v119;
                  long long v59 = v120;
                  *(void *)(v57 + 32) = v121;
                  *(_OWORD *)uint64_t v57 = v58;
                  *(_OWORD *)(v57 + 16) = v59;
                  long long v60 = v122;
                  if (v122) {
                    *v122 += 2;
                  }
                  uint64_t v61 = (uint64_t)v56 + 120 * v43;
                  *(void *)(v61 + 40) = v60;
                  *(_OWORD *)(v61 + 48) = v123;
                  long long v62 = v124;
                  long long v63 = v125;
                  long long v64 = *(_OWORD *)v126;
                  *(void *)(v61 + 109) = *(void *)&v126[13];
                  *(_OWORD *)(v61 + 80) = v63;
                  *(_OWORD *)(v61 + 96) = v64;
                  *(_OWORD *)(v61 + 64) = v62;
                  HIDWORD(v129) = v43 + 1;
                  unsigned int v55 = v122;
                  int v122 = 0;
                  if (!v55) {
                    goto LABEL_108;
                  }
                }
                if (*v55 != 2)
                {
                  *v55 -= 2;
LABEL_108:
                  uint64_t v65 = v21 + 136;
                  uint64_t v21 = v20;
                  if (v65 != v20) {
                    goto LABEL_111;
                  }
                  goto LABEL_31;
                }
                WTF::StringImpl::destroy();
                uint64_t v23 = v111;
                uint64_t v65 = v21 + 136;
                uint64_t v21 = v20;
                if (v65 != v20)
                {
LABEL_111:
                  uint64_t v21 = v65;
                  while (*(_DWORD *)v21 >= 0xFFFFFFFE)
                  {
                    v21 += 136;
                    if (v21 == v20)
                    {
                      uint64_t v21 = v20;
                      break;
                    }
                  }
                }
LABEL_31:
                if (v21 == v23) {
                  goto LABEL_122;
                }
                break;
              case 4:
                if (v25 != 4) {
                  goto LABEL_156;
                }
                goto LABEL_83;
              default:
                if (v25)
                {
LABEL_156:
                  std::__throw_bad_variant_access[abi:sn180100]();
                  __break(1u);
LABEL_157:
                  __break(0xC471u);
                  JUMPOUT(0x18252FAA8);
                }
                int v27 = *(_DWORD *)(v21 + 24);
                if (v27 == 3) {
                  char v3 = 2;
                }
                else {
                  char v3 = v27 == 2;
                }
                char v4 = *(_DWORD *)(v21 + 28) != 0;
                uint64_t v114 = *(void *)(v21 + 32);
                goto LABEL_83;
            }
          }
        }
      }
      unsigned int v115 = v105;
      unsigned int v116 = v106;
      unsigned int v117 = v108;
LABEL_122:
      unsigned int v66 = HIDWORD(v131);
      if (HIDWORD(v131) == v131) {
        break;
      }
      uint64_t v84 = v130;
      uint64_t v85 = v130 + 24 * HIDWORD(v131);
      *(_DWORD *)uint64_t v85 = v127;
      uint64_t v86 = HIDWORD(v129);
      *(void *)(v85 + 16) = 0;
      *(_DWORD *)(v85 + 20) = v86;
      *(void *)(v85 + 8) = 0;
      int v87 = (uint64_t *)(v85 + 8);
      if (!v86) {
        goto LABEL_138;
      }
      v110 = v87;
      uint64_t v113 = v84;
      if (v86 >= 0x2222223)
      {
LABEL_159:
        __break(0xC471u);
        JUMPOUT(0x18252FA40);
      }
      unsigned int v88 = 120 * v86;
      uint64_t v89 = WTF::fastMalloc((WTF *)(120 * v86));
      *(_DWORD *)(v113 + 24 * v66 + 16) = v88 / 0x78;
      uint64_t *v110 = v89;
      id v90 = v128;
      if (HIDWORD(v129))
      {
        unsigned int v91 = (long long *)((char *)v128 + 120 * HIDWORD(v129));
        do
        {
          long long v92 = *v90;
          long long v93 = v90[1];
          *(void *)(v89 + 32) = *((void *)v90 + 4);
          *(_OWORD *)uint64_t v89 = v92;
          *(_OWORD *)(v89 + 16) = v93;
          v94 = (_DWORD *)*((void *)v90 + 5);
          if (v94) {
            *v94 += 2;
          }
          *(void *)(v89 + 40) = v94;
          *(_OWORD *)(v89 + 48) = v90[3];
          long long v95 = v90[4];
          long long v96 = v90[5];
          long long v97 = v90[6];
          *(void *)(v89 + 109) = *(void *)((char *)v90 + 109);
          *(_OWORD *)(v89 + 80) = v96;
          *(_OWORD *)(v89 + 96) = v97;
          *(_OWORD *)(v89 + 64) = v95;
          id v90 = (long long *)((char *)v90 + 120);
          v89 += 120;
        }
        while (v90 != v91);
LABEL_138:
        ++HIDWORD(v131);
        id v90 = v128;
        if (HIDWORD(v129))
        {
          uint64_t v98 = 120 * HIDWORD(v129);
          int v99 = (_DWORD **)v128 + 5;
          do
          {
            uint64_t v100 = *v99;
            *int v99 = 0;
            if (v100)
            {
              if (*v100 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *v100 -= 2;
              }
            }
            v99 += 15;
            v98 -= 120;
          }
          while (v98);
          id v90 = v128;
        }
        uint64_t v14 = this;
        unint64_t v101 = v104;
        if (!v90) {
          goto LABEL_148;
        }
LABEL_147:
        v128 = 0;
        LODWORD(v129) = 0;
        WTF::fastFree((WTF *)v90, v17);
        goto LABEL_148;
      }
      ++HIDWORD(v131);
      uint64_t v14 = this;
      unint64_t v101 = v104;
      if (v128) {
        goto LABEL_147;
      }
LABEL_148:
      if (*((unsigned char *)v14 + 32))
      {
        unint64_t v15 = v101 + 1;
        unsigned int v108 = v117;
        unsigned int v106 = v116;
        unsigned int v105 = v115;
        if (v15 < *((unsigned int *)v14 + 7)) {
          continue;
        }
      }
      goto LABEL_6;
    }
    unint64_t v67 = WTF::Vector<WGSL::BindGroupLayout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v130, HIDWORD(v131) + 1, (unint64_t)&v127);
    unsigned int v68 = HIDWORD(v131);
    uint64_t v69 = v130;
    uint64_t v70 = v130 + 24 * HIDWORD(v131);
    *(_DWORD *)uint64_t v70 = *(_DWORD *)v67;
    uint64_t v71 = *(unsigned int *)(v67 + 20);
    *(void *)(v70 + 16) = 0;
    *(_DWORD *)(v70 + 20) = v71;
    *(void *)(v70 + 8) = 0;
    unsigned int v72 = (uint64_t *)(v70 + 8);
    if (v71)
    {
      int v107 = v72;
      uint64_t v109 = v69;
      unsigned int v112 = v68;
      if (v71 >= 0x2222223)
      {
        __break(0xC471u);
        JUMPOUT(0x18252FAB0);
      }
      unsigned int v73 = 120 * v71;
      uint64_t v74 = WTF::fastMalloc((WTF *)(120 * v71));
      *(_DWORD *)(v109 + 24 * v112 + 16) = v73 / 0x78;
      *int v107 = v74;
      unsigned int v75 = *(_DWORD *)(v67 + 20);
      if (v75)
      {
        uint64_t v76 = *(long long **)(v67 + 8);
        int v77 = (long long *)((char *)v76 + 120 * v75);
        do
        {
          long long v78 = *v76;
          long long v79 = v76[1];
          *(void *)(v74 + 32) = *((void *)v76 + 4);
          *(_OWORD *)uint64_t v74 = v78;
          *(_OWORD *)(v74 + 16) = v79;
          unsigned int v80 = (_DWORD *)*((void *)v76 + 5);
          if (v80) {
            *v80 += 2;
          }
          *(void *)(v74 + 40) = v80;
          *(_OWORD *)(v74 + 48) = v76[3];
          long long v81 = v76[4];
          long long v82 = v76[5];
          long long v83 = v76[6];
          *(void *)(v74 + 109) = *(void *)((char *)v76 + 109);
          *(_OWORD *)(v74 + 80) = v82;
          *(_OWORD *)(v74 + 96) = v83;
          *(_OWORD *)(v74 + 64) = v81;
          uint64_t v76 = (long long *)((char *)v76 + 120);
          v74 += 120;
        }
        while (v76 != v77);
      }
    }
    goto LABEL_138;
  }
LABEL_6:
  uint64_t result = (WTF *)WTF::Vector<WGSL::BindGroupLayout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, &v130);
  uint64_t v8 = v130;
  if (HIDWORD(v131))
  {
    uint64_t v9 = v130 + 24 * HIDWORD(v131);
    do
    {
      uint64_t v10 = *(unsigned int *)(v8 + 20);
      if (v10)
      {
        uint64_t v11 = 120 * v10;
        uint64_t v12 = (_DWORD **)(*(void *)(v8 + 8) + 40);
        do
        {
          uint64_t v13 = *v12;
          *uint64_t v12 = 0;
          if (v13)
          {
            if (*v13 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v13 -= 2;
            }
          }
          v12 += 15;
          v11 -= 120;
        }
        while (v11);
      }
      uint64_t result = *(WTF **)(v8 + 8);
      if (result)
      {
        *(void *)(v8 + 8) = 0;
        *(_DWORD *)(v8 + 16) = 0;
        uint64_t result = (WTF *)WTF::fastFree(result, v7);
      }
      v8 += 24;
    }
    while (v8 != v9);
    uint64_t v8 = v130;
  }
  if (v8)
  {
    uint64_t v130 = 0;
    LODWORD(v131) = 0;
    return (WTF *)WTF::fastFree((WTF *)v8, v7);
  }
  return result;
}

void sub_18252FABC(_Unwind_Exception *a1, void *a2)
{
  WGSL::PipelineLayout::~PipelineLayout((WGSL::PipelineLayout *)(v2 - 104), a2);
  _Unwind_Resume(a1);
}

void sub_18252FAD4(_Unwind_Exception *a1, void *a2)
{
  WGSL::BindGroupLayout::~BindGroupLayout((WGSL::BindGroupLayout *)(v2 - 128), a2);
  WGSL::PipelineLayout::~PipelineLayout((WGSL::PipelineLayout *)(v2 - 104), v4);
  _Unwind_Resume(a1);
}

void sub_18252FAF0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,_DWORD *a29)
{
  if (a29)
  {
    if (*a29 == 2)
    {
      WTF::StringImpl::destroy();
      WGSL::BindGroupLayout::~BindGroupLayout((WGSL::BindGroupLayout *)(v29 - 128), v31);
      WGSL::PipelineLayout::~PipelineLayout((WGSL::PipelineLayout *)(v29 - 104), v32);
      _Unwind_Resume(a1);
    }
    *a29 -= 2;
  }
  WGSL::BindGroupLayout::~BindGroupLayout((WGSL::BindGroupLayout *)(v29 - 128), a2);
  WGSL::PipelineLayout::~PipelineLayout((WGSL::PipelineLayout *)(v29 - 104), v33);
  _Unwind_Resume(a1);
}

void WGSL::BindGroupLayout::~BindGroupLayout(WGSL::BindGroupLayout *this, void *a2)
{
  uint64_t v3 = *((unsigned int *)this + 5);
  if (v3)
  {
    uint64_t v4 = 120 * v3;
    BOOL v5 = (_DWORD **)(*((void *)this + 1) + 40);
    do
    {
      char v6 = *v5;
      WGSL::Reflection::EntryPointInformation *v5 = 0;
      if (v6)
      {
        if (*v6 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v6 -= 2;
        }
      }
      v5 += 15;
      v4 -= 120;
    }
    while (v4);
  }
  atomic_uchar *volatile v7 = (WTF *)*((void *)this + 1);
  if (v7)
  {
    *((void *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v7, a2);
  }
}

_DWORD *WebGPU::ShaderModule::ast(WebGPU::ShaderModule *this)
{
  int v1 = *((_DWORD *)this + 10);
  if (v1 == -1) {
    uint64_t v2 = -1;
  }
  else {
    uint64_t v2 = *((unsigned int *)this + 10);
  }
  if (v2 == 2)
  {
    if (v1 == 2) {
      return 0;
    }
  }
  else
  {
    if (v2 == 1)
    {
      if (v1 != 1) {
        goto LABEL_12;
      }
      return 0;
    }
    if (!v1) {
      return (_DWORD *)*((void *)this + 3);
    }
  }
LABEL_12:
  uint64_t v4 = (_DWORD *)std::__throw_bad_variant_access[abi:sn180100]();
  return wgpuShaderModuleReference(v4);
}

_DWORD *wgpuShaderModuleReference(_DWORD *result)
{
  return result;
}

uint64_t wgpuShaderModuleRelease(uint64_t result, void *a2)
{
  uint64_t v2 = result;
  if (*(_DWORD *)result != 1)
  {
    --*(_DWORD *)result;
    return result;
  }
  uint64_t v3 = *(void *)(result + 160);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      BOOL v5 = *(_DWORD ***)(result + 160);
      do
      {
        char v6 = *v5;
        if (*v5 != (_DWORD *)-1)
        {
          WGSL::Reflection::EntryPointInformation *v5 = 0;
          if (v6)
          {
            if (*v6 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v6 -= 2;
            }
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v7 = *(void *)(v2 + 152);
  if (v7)
  {
    uint64_t v8 = *(unsigned int *)(v7 - 4);
    if (v8)
    {
      uint64_t v9 = *(void *)(v2 + 152);
      while (1)
      {
        uint64_t v10 = *(_DWORD **)v9;
        if (*(void *)v9 == -1) {
          goto LABEL_17;
        }
        uint64_t v11 = *(_DWORD **)(v9 + 8);
        *(void *)(v9 + 8) = 0;
        if (!v11) {
          goto LABEL_22;
        }
        if (*v11 != 2) {
          break;
        }
        WTF::StringImpl::destroy();
        uint64_t v10 = *(_DWORD **)v9;
        *(void *)uint64_t v9 = 0;
        if (v10)
        {
LABEL_25:
          if (*v10 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v10 -= 2;
          }
        }
LABEL_17:
        v9 += 16;
        if (!--v8) {
          goto LABEL_27;
        }
      }
      *v11 -= 2;
LABEL_22:
      *(void *)uint64_t v9 = 0;
      if (v10) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
LABEL_27:
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }

  uint64_t v13 = *(_DWORD **)(v2 + 136);
  *(void *)(v2 + 136) = 0;
  if (!v13)
  {
LABEL_31:
    uint64_t v14 = *(_DWORD **)(v2 + 128);
    *(void *)(v2 + 128) = 0;
    if (!v14) {
      goto LABEL_36;
    }
    goto LABEL_34;
  }
  if (*v13 != 2)
  {
    *v13 -= 2;
    goto LABEL_31;
  }
  WTF::StringImpl::destroy();
  uint64_t v14 = *(_DWORD **)(v2 + 128);
  *(void *)(v2 + 128) = 0;
  if (!v14) {
    goto LABEL_36;
  }
LABEL_34:
  if (*v14 == 2)
  {
    WTF::StringImpl::destroy();
    unint64_t v15 = *(_DWORD **)(v2 + 120);
    *(void *)(v2 + 120) = 0;
    if (!v15) {
      goto LABEL_41;
    }
    goto LABEL_39;
  }
  *v14 -= 2;
LABEL_36:
  unint64_t v15 = *(_DWORD **)(v2 + 120);
  *(void *)(v2 + 120) = 0;
  if (!v15)
  {
LABEL_41:
    uint64_t v16 = *(void *)(v2 + 112);
    if (!v16) {
      goto LABEL_42;
    }
    goto LABEL_53;
  }
LABEL_39:
  if (*v15 != 2)
  {
    *v15 -= 2;
    goto LABEL_41;
  }
  WTF::StringImpl::destroy();
  uint64_t v16 = *(void *)(v2 + 112);
  if (!v16)
  {
LABEL_42:
    uint64_t v17 = *(void *)(v2 + 104);
    if (!v17) {
      goto LABEL_43;
    }
    goto LABEL_64;
  }
LABEL_53:
  uint64_t v25 = *(unsigned int *)(v16 - 4);
  if (v25)
  {
    uint64_t v26 = v16;
    do
    {
      int v27 = *(_DWORD **)v26;
      if (*(void *)v26 != -1)
      {
        uint64_t v28 = *(void *)(v26 + 8);
        if (v28)
        {
          WTF::fastFree((WTF *)(v28 - 16), v12);
          int v27 = *(_DWORD **)v26;
        }
        *(void *)uint64_t v26 = 0;
        if (v27)
        {
          if (*v27 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v27 -= 2;
          }
        }
      }
      v26 += 16;
      --v25;
    }
    while (v25);
  }
  WTF::fastFree((WTF *)(v16 - 16), v12);
  uint64_t v17 = *(void *)(v2 + 104);
  if (!v17)
  {
LABEL_43:
    uint64_t v18 = *(void *)(v2 + 96);
    if (!v18) {
      goto LABEL_44;
    }
    goto LABEL_75;
  }
LABEL_64:
  uint64_t v29 = *(unsigned int *)(v17 - 4);
  if (v29)
  {
    uint64_t v30 = v17;
    do
    {
      int v31 = *(_DWORD **)v30;
      if (*(void *)v30 != -1)
      {
        uint64_t v32 = *(void *)(v30 + 8);
        if (v32)
        {
          WTF::fastFree((WTF *)(v32 - 16), v12);
          int v31 = *(_DWORD **)v30;
        }
        *(void *)uint64_t v30 = 0;
        if (v31)
        {
          if (*v31 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v31 -= 2;
          }
        }
      }
      v30 += 16;
      --v29;
    }
    while (v29);
  }
  WTF::fastFree((WTF *)(v17 - 16), v12);
  uint64_t v18 = *(void *)(v2 + 96);
  if (!v18)
  {
LABEL_44:
    uint64_t v19 = *(void *)(v2 + 88);
    if (!v19) {
      goto LABEL_45;
    }
    goto LABEL_86;
  }
LABEL_75:
  uint64_t v33 = *(unsigned int *)(v18 - 4);
  if (v33)
  {
    uint64_t v34 = v18;
    do
    {
      unint64_t v35 = *(_DWORD **)v34;
      if (*(void *)v34 != -1)
      {
        uint64_t v36 = *(void *)(v34 + 8);
        if (v36)
        {
          WTF::fastFree((WTF *)(v36 - 16), v12);
          unint64_t v35 = *(_DWORD **)v34;
        }
        *(void *)uint64_t v34 = 0;
        if (v35)
        {
          if (*v35 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v35 -= 2;
          }
        }
      }
      v34 += 16;
      --v33;
    }
    while (v33);
  }
  WTF::fastFree((WTF *)(v18 - 16), v12);
  uint64_t v19 = *(void *)(v2 + 88);
  if (!v19)
  {
LABEL_45:
    uint64_t v20 = *(void *)(v2 + 80);
    if (!v20) {
      goto LABEL_46;
    }
    goto LABEL_97;
  }
LABEL_86:
  uint64_t v37 = *(unsigned int *)(v19 - 4);
  if (v37)
  {
    uint64_t v38 = v19;
    do
    {
      int v39 = *(_DWORD **)v38;
      if (*(void *)v38 != -1)
      {
        uint64_t v40 = *(void *)(v38 + 8);
        if (v40)
        {
          WTF::fastFree((WTF *)(v40 - 16), v12);
          int v39 = *(_DWORD **)v38;
        }
        *(void *)uint64_t v38 = 0;
        if (v39)
        {
          if (*v39 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v39 -= 2;
          }
        }
      }
      v38 += 16;
      --v37;
    }
    while (v37);
  }
  WTF::fastFree((WTF *)(v19 - 16), v12);
  uint64_t v20 = *(void *)(v2 + 80);
  if (!v20)
  {
LABEL_46:
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)(v2 + 72), v12);

    uint64_t v22 = *(void *)(v2 + 56);
    if (!v22) {
      goto LABEL_47;
    }
LABEL_111:
    uint64_t v46 = *(unsigned int *)(v22 - 4);
    if (v46)
    {
      uint64_t v47 = (WGSL::Reflection::EntryPointInformation *)(v22 + 8);
      do
      {
        if (*((void *)v47 - 1) != -1)
        {
          WGSL::Reflection::EntryPointInformation::~EntryPointInformation(v47, v21);
          long long v48 = (_DWORD *)*((void *)v47 - 1);
          *((void *)v47 - 1) = 0;
          if (v48)
          {
            if (*v48 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v48 -= 2;
            }
          }
        }
        uint64_t v47 = (WGSL::Reflection::EntryPointInformation *)((char *)v47 + 96);
        --v46;
      }
      while (v46);
    }
    WTF::fastFree((WTF *)(v22 - 16), v21);
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable((uint64_t *)(v2 + 48), v49);
    uint64_t v24 = *(unsigned int *)(v2 + 40);
    if (v24 == -1) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }
LABEL_97:
  uint64_t v41 = *(unsigned int *)(v20 - 4);
  if (v41)
  {
    uint64_t v42 = v20;
    while (1)
    {
      unsigned int v43 = *(_DWORD **)v42;
      if (*(void *)v42 == -1) {
        goto LABEL_100;
      }
      unint64_t v44 = *(_DWORD **)(v42 + 8);
      *(void *)(v42 + 8) = 0;
      if (!v44) {
        goto LABEL_105;
      }
      if (*v44 != 2) {
        break;
      }
      WTF::StringImpl::destroy();
      unsigned int v43 = *(_DWORD **)v42;
      *(void *)uint64_t v42 = 0;
      if (v43)
      {
LABEL_108:
        if (*v43 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v43 -= 2;
        }
      }
LABEL_100:
      v42 += 16;
      if (!--v41) {
        goto LABEL_110;
      }
    }
    *v44 -= 2;
LABEL_105:
    *(void *)uint64_t v42 = 0;
    if (v43) {
      goto LABEL_108;
    }
    goto LABEL_100;
  }
LABEL_110:
  WTF::fastFree((WTF *)(v20 - 16), v12);
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)(v2 + 72), v45);

  uint64_t v22 = *(void *)(v2 + 56);
  if (v22) {
    goto LABEL_111;
  }
LABEL_47:
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable((uint64_t *)(v2 + 48), v21);
  uint64_t v24 = *(unsigned int *)(v2 + 40);
  if (v24 != -1) {
LABEL_48:
  }
    ((void (*)(char *, uint64_t))off_1ECABB480[v24])(&v50, v2 + 8);
LABEL_49:
  *(_DWORD *)(v2 + 40) = -1;
  return WTF::fastFree((WTF *)v2, v23);
}

_DWORD *wgpuShaderModuleGetCompilationInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = (WTF *)WTF::fastMalloc((WTF *)0x18);
  uint64_t v8 = v6;
  *(void *)char v6 = &unk_1ECABB4D0;
  *((void *)v6 + 1) = a2;
  *((void *)v6 + 2) = a3;
  int v9 = *(_DWORD *)(a1 + 40);
  if (v9 == -1) {
    uint64_t v10 = -1;
  }
  else {
    uint64_t v10 = *(unsigned int *)(a1 + 40);
  }
  if (v10 != 2)
  {
    if (v10 == 1)
    {
      if (v9 == 1)
      {
        uint64_t v31 = a1 + 8;
        int v32 = 0;
        uint64_t v28 = a1 + 24;
        LODWORD(v29) = 1;
        LOBYTE(v30) = 1;
        double v11 = WebGPU::convertMessages((double *)&v33, &v31, &v28);
        uint64_t v12 = v34;
        uint64_t v28 = 0;
        uint64_t v29 = v34;
        uint64_t v13 = v33;
        double v30 = *(double *)&v33;
        (*(void (**)(WTF *, uint64_t, uint64_t *, double))(*(void *)v8 + 16))(v8, 1, &v28, v11);
        uint64_t result = (_DWORD *)(*(uint64_t (**)(WTF *))(*(void *)v8 + 8))(v8);
        uint64_t v16 = v35;
        if (v36)
        {
          uint64_t v17 = 8 * v36;
          uint64_t v18 = v35;
          do
          {
            uint64_t result = *(_DWORD **)v18;
            *(void *)uint64_t v18 = 0;
            if (result)
            {
              if (*result == 2) {
                uint64_t result = (_DWORD *)WTF::StringImpl::destroy();
              }
              else {
                *result -= 2;
              }
            }
            uint64_t v18 = (WTF *)((char *)v18 + 8);
            v17 -= 8;
          }
          while (v17);
        }
        if (v16) {
          uint64_t result = (_DWORD *)WTF::fastFree(v16, v15);
        }
        if (v12)
        {
          uint64_t v24 = 80 * v12;
          uint64_t v25 = (_DWORD **)((char *)v13 + 8);
          do
          {
            uint64_t result = *v25;
            SamplerIdentifier *v25 = 0;
            if (result)
            {
              if (*result == 2) {
                uint64_t result = (_DWORD *)WTF::StringImpl::destroy();
              }
              else {
                *result -= 2;
              }
            }
            v25 += 10;
            v24 -= 80;
          }
          while (v24);
        }
LABEL_44:
        if (v13) {
          return (_DWORD *)WTF::fastFree(v13, v15);
        }
        return result;
      }
    }
    else if (!v9)
    {
      uint64_t v31 = a1 + 8;
      int v32 = 1;
      LOBYTE(v28) = 0;
      LOBYTE(v30) = 0;
      double v19 = WebGPU::convertMessages((double *)&v33, &v31, &v28);
      uint64_t v20 = v34;
      uint64_t v28 = 0;
      uint64_t v29 = v34;
      uint64_t v13 = v33;
      double v30 = *(double *)&v33;
      (*(void (**)(WTF *, void, uint64_t *, double))(*(void *)v8 + 16))(v8, 0, &v28, v19);
      uint64_t result = (_DWORD *)(*(uint64_t (**)(WTF *))(*(void *)v8 + 8))(v8);
      uint64_t v21 = v35;
      if (v36)
      {
        uint64_t v22 = 8 * v36;
        uint64_t v23 = v35;
        do
        {
          uint64_t result = *(_DWORD **)v23;
          *(void *)uint64_t v23 = 0;
          if (result)
          {
            if (*result == 2) {
              uint64_t result = (_DWORD *)WTF::StringImpl::destroy();
            }
            else {
              *result -= 2;
            }
          }
          uint64_t v23 = (WTF *)((char *)v23 + 8);
          v22 -= 8;
        }
        while (v22);
      }
      if (v21) {
        uint64_t result = (_DWORD *)WTF::fastFree(v21, v15);
      }
      if (v20)
      {
        uint64_t v26 = 80 * v20;
        int v27 = (_DWORD **)((char *)v13 + 8);
        do
        {
          uint64_t result = *v27;
          _DWORD *v27 = 0;
          if (result)
          {
            if (*result == 2) {
              uint64_t result = (_DWORD *)WTF::StringImpl::destroy();
            }
            else {
              *result -= 2;
            }
          }
          v27 += 10;
          v26 -= 80;
        }
        while (v26);
      }
      goto LABEL_44;
    }
LABEL_47:
    uint64_t result = (_DWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  if (v9 != 2) {
    goto LABEL_47;
  }
  return (_DWORD *)WTF::fastFree(v6, v7);
}

void sub_1825304E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, int a18, unsigned int a19)
{
  uint64_t v22 = v19;
  (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  if (a19)
  {
    uint64_t v28 = 8 * a19;
    uint64_t v29 = a17;
    do
    {
      double v30 = *(_DWORD **)v29;
      *(void *)uint64_t v29 = 0;
      if (v30)
      {
        if (*v30 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v30 -= 2;
        }
      }
      uint64_t v29 = (WTF *)((char *)v29 + 8);
      v28 -= 8;
    }
    while (v28);
  }
  if (a17) {
    WTF::fastFree(a17, v24);
  }
  if (v21)
  {
    uint64_t v25 = 80 * v21;
    uint64_t v26 = (_DWORD **)((char *)v20 + 8);
    do
    {
      int v27 = *v26;
      *uint64_t v26 = 0;
      if (v27)
      {
        if (*v27 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v27 -= 2;
        }
      }
      v26 += 10;
      v25 -= 80;
    }
    while (v25);
  }
  if (v20)
  {
    WTF::fastFree(v20, v24);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_DWORD *wgpuShaderModuleSetLabel(uint64_t a1, char *__s)
{
  if (__s) {
    strlen(__s);
  }
  WTF::String::fromUTF8();
  uint64_t v3 = *(void **)(a1 + 64);
  if (v3)
  {
    if (v6)
    {
      uint64_t v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      uint64_t v3 = *(void **)(a1 + 64);
    }
    else
    {
      uint64_t v4 = &stru_1ECABF938;
    }
    [v3 setLabel:v4];
  }
  uint64_t result = v6;
  if (v6)
  {
    if (*v6 == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *v6 -= 2;
    }
  }
  return result;
}

void sub_182530774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL15SuccessfulCheckENS8_11FailedCheckENS_9monostateEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, void *a2)
{
  uint64_t v3 = (WGSL::ShaderModule *)a2[2];
  a2[2] = 0;
  if (v3)
  {
    WGSL::ShaderModule::~ShaderModule(v3, a2);
    WTF::fastFree(v4, v5);
  }
  uint64_t v6 = *((unsigned int *)a2 + 3);
  if (v6)
  {
    uint64_t v7 = (_DWORD **)*a2;
    uint64_t v8 = 24 * v6;
    do
    {
      int v9 = *v7;
      void *v7 = 0;
      if (v9)
      {
        if (*v9 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v9 -= 2;
        }
      }
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  uint64_t result = (WTF *)*a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL15SuccessfulCheckENS8_11FailedCheckENS_9monostateEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a2 + 7);
  if (v3)
  {
    uint64_t v4 = (_DWORD **)a2[2];
    uint64_t v5 = 24 * v3;
    do
    {
      uint64_t v6 = *v4;
      WTF *v4 = 0;
      if (v6)
      {
        if (*v6 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v6 -= 2;
        }
      }
      v4 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  uint64_t v7 = (WTF *)a2[2];
  if (v7)
  {
    a2[2] = 0;
    *((_DWORD *)a2 + 6) = 0;
    WTF::fastFree(v7, a2);
  }
  uint64_t v8 = *((unsigned int *)a2 + 3);
  if (v8)
  {
    int v9 = (_DWORD **)*a2;
    uint64_t v10 = 24 * v8;
    do
    {
      double v11 = *v9;
      *int v9 = 0;
      if (v11)
      {
        if (*v11 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v11 -= 2;
        }
      }
      v9 += 3;
      v10 -= 24;
    }
    while (v10);
  }
  uint64_t result = (WTF *)*a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 24 * v3;
    do
    {
      uint64_t v6 = *(_DWORD **)v4;
      *(void *)uint64_t v4 = 0;
      if (v6)
      {
        if (*v6 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v6 -= 2;
        }
      }
      uint64_t v4 = (WTF *)((char *)v4 + 24);
      v5 -= 24;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(uint64_t a1, uint64_t *a2, const WTF::StringImpl **a3)
{
  uint64_t v6 = *a2;
  if (!*a2)
  {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0);
    uint64_t v6 = *a2;
    if (!*a2)
    {
      int v7 = 0;
      uint64_t v8 = *a3;
      unsigned int v9 = *((_DWORD *)*a3 + 4);
      if (v9 >= 0x100) {
        goto LABEL_4;
      }
LABEL_6:
      unsigned int v10 = WTF::StringImpl::hashSlowCase(v8);
      goto LABEL_7;
    }
  }
  int v7 = *(_DWORD *)(v6 - 8);
  uint64_t v8 = *a3;
  unsigned int v9 = *((_DWORD *)*a3 + 4);
  if (v9 < 0x100) {
    goto LABEL_6;
  }
LABEL_4:
  unsigned int v10 = v9 >> 8;
LABEL_7:
  double v11 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v13 = v10 & v7;
    uint64_t v14 = (WTF::StringImpl **)(v6 + 8 * (v10 & v7));
    unint64_t v15 = *v14;
    if (*v14 == (WTF::StringImpl *)-1)
    {
      double v11 = (WTF::StringImpl **)(v6 + 8 * v13);
      goto LABEL_9;
    }
    if (!v15)
    {
      if (v11)
      {
        *double v11 = 0;
        --*(_DWORD *)(*a2 - 16);
        uint64_t v14 = v11;
      }
      uint64_t v19 = *a3;
      *a3 = 0;
      uint64_t result = (WTF::StringImpl **)*v14;
      *uint64_t v14 = v19;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          uint64_t result = (WTF::StringImpl **)WTF::StringImpl::destroy();
          uint64_t v20 = *a2;
          if (*a2)
          {
LABEL_21:
            ++*(_DWORD *)(v20 - 12);
            uint64_t v21 = *a2;
            if (*a2) {
              goto LABEL_22;
            }
            goto LABEL_31;
          }
LABEL_30:
          *(_DWORD *)(v20 - 12) = 1;
          uint64_t v21 = *a2;
          if (*a2)
          {
LABEL_22:
            uint64_t v22 = (*(_DWORD *)(v21 - 16) + *(_DWORD *)(v21 - 12));
            unint64_t v23 = *(unsigned int *)(v21 - 4);
            if (v23 <= 0x400) {
              goto LABEL_23;
            }
            goto LABEL_32;
          }
LABEL_31:
          uint64_t v22 = *(unsigned int *)(v21 - 16);
          unint64_t v23 = *(unsigned int *)(v21 - 4);
          if (v23 <= 0x400)
          {
LABEL_23:
            if (3 * v23 > 4 * v22)
            {
LABEL_35:
              uint64_t v25 = v21 + 8 * v23;
              char v24 = 1;
              goto LABEL_36;
            }
            if (!v23)
            {
              uint64_t result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, v14);
              uint64_t v14 = result;
              uint64_t v21 = *a2;
              if (!*a2)
              {
LABEL_26:
                unint64_t v23 = 0;
                goto LABEL_35;
              }
LABEL_34:
              unint64_t v23 = *(unsigned int *)(v21 - 4);
              goto LABEL_35;
            }
LABEL_33:
            uint64_t result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a2, v23 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v23)), v14);
            uint64_t v14 = result;
            uint64_t v21 = *a2;
            if (!*a2) {
              goto LABEL_26;
            }
            goto LABEL_34;
          }
LABEL_32:
          if (v23 > 2 * v22) {
            goto LABEL_35;
          }
          goto LABEL_33;
        }
        *(_DWORD *)result -= 2;
      }
      uint64_t v20 = *a2;
      if (*a2) {
        goto LABEL_21;
      }
      goto LABEL_30;
    }
    uint64_t result = (WTF::StringImpl **)WTF::equal(v15, *a3, (const WTF::StringImpl *)a3);
    if (result) {
      break;
    }
LABEL_9:
    unsigned int v10 = i + v13;
  }
  uint64_t v17 = *a2;
  if (*a2) {
    uint64_t v18 = *(unsigned int *)(v17 - 4);
  }
  else {
    uint64_t v18 = 0;
  }
  char v24 = 0;
  uint64_t v25 = v17 + 8 * v18;
LABEL_36:
  *(void *)a1 = v14;
  *(void *)(a1 + 8) = v25;
  *(unsigned char *)(a1 + 16) = v24;
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    while (1)
    {
      unsigned int v13 = (WTF::StringImpl **)(v6 + 8 * v11);
      uint64_t v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          uint64_t v15 = *a1;
          if (*a1)
          {
            int v16 = *(_DWORD *)(v15 - 8);
            unsigned int v17 = *((_DWORD *)v14 + 4);
            if (v17 >= 0x100) {
              goto LABEL_12;
            }
LABEL_14:
            unsigned int v18 = WTF::StringImpl::hashSlowCase(v14);
          }
          else
          {
            int v16 = 0;
            unsigned int v17 = *((_DWORD *)v14 + 4);
            if (v17 < 0x100) {
              goto LABEL_14;
            }
LABEL_12:
            unsigned int v18 = v17 >> 8;
          }
          int v19 = 0;
          do
          {
            uint64_t v20 = v18 & v16;
            unsigned int v18 = ++v19 + v20;
          }
          while (*(void *)(v15 + 8 * v20));
          uint64_t v21 = (WTF::StringImpl **)(v15 + 8 * v20);
          WTF *v21 = 0;
          uint64_t v22 = *v13;
          *unsigned int v13 = 0;
          WTF *v21 = v22;
          unint64_t v23 = *v13;
          *unsigned int v13 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *(_DWORD *)v23 -= 2;
            }
          }
          if (v13 == a3) {
            uint64_t v12 = v21;
          }
          goto LABEL_7;
        }
        *unsigned int v13 = 0;
      }
LABEL_7:
      if (++v11 == v7) {
        goto LABEL_25;
      }
    }
  }
  uint64_t v12 = 0;
  uint64_t result = 0;
  if (v6)
  {
LABEL_25:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL15SuccessfulCheckENS8_11FailedCheckEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, void *a2)
{
  uint64_t v3 = (WGSL::ShaderModule *)a2[2];
  a2[2] = 0;
  if (v3)
  {
    WGSL::ShaderModule::~ShaderModule(v3, a2);
    WTF::fastFree(v4, v5);
  }
  uint64_t v6 = *((unsigned int *)a2 + 3);
  if (v6)
  {
    int v7 = (_DWORD **)*a2;
    uint64_t v8 = 24 * v6;
    do
    {
      uint64_t v9 = *v7;
      WTF *v7 = 0;
      if (v9)
      {
        if (*v9 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v9 -= 2;
        }
      }
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  uint64_t result = (WTF *)*a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL15SuccessfulCheckENS8_11FailedCheckEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a2 + 7);
  if (v3)
  {
    uint64_t v4 = (_DWORD **)a2[2];
    uint64_t v5 = 24 * v3;
    do
    {
      uint64_t v6 = *v4;
      WTF *v4 = 0;
      if (v6)
      {
        if (*v6 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v6 -= 2;
        }
      }
      v4 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  int v7 = (WTF *)a2[2];
  if (v7)
  {
    a2[2] = 0;
    *((_DWORD *)a2 + 6) = 0;
    WTF::fastFree(v7, a2);
  }
  uint64_t v8 = *((unsigned int *)a2 + 3);
  if (v8)
  {
    uint64_t v9 = (_DWORD **)*a2;
    uint64_t v10 = 24 * v8;
    do
    {
      uint64_t v11 = *v9;
      *uint64_t v9 = 0;
      if (v11)
      {
        if (*v11 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v11 -= 2;
        }
      }
      v9 += 3;
      v10 -= 24;
    }
    while (v10);
  }
  uint64_t result = (WTF *)*a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t WebGPU::vertexFormatTypeForStructMember(WebGPU *this, const WGSL::Type *a2)
{
  if (!this)
  {
    __break(0xC471u);
    JUMPOUT(0x1825310A8);
  }
  int v2 = *((_DWORD *)this + 12);
  if (v2)
  {
    if (v2 == 1)
    {
      uint64_t v3 = *(WebGPU **)this;
      if (*(void *)this)
      {
        if (!*((_DWORD *)v3 + 12))
        {
          switch(*((unsigned char *)this + 8))
          {
            case 1:
              goto LABEL_11;
            case 2:
              unsigned int v4 = *(unsigned __int8 *)v3 - 1;
              if (v4 >= 5 || ((0x1Bu >> v4) & 1) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x1825310C8);
              }
              return dword_1826CEDC0[(char)v4];
            case 3:
              unsigned int v7 = *(unsigned __int8 *)v3 - 1;
              if (v7 >= 5 || ((0x1Bu >> v7) & 1) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x1825310E8);
              }
              return dword_1826CEDD4[(char)v7];
            case 4:
              unsigned int v8 = *(unsigned __int8 *)v3 - 1;
              if (v8 >= 5 || ((0x1Bu >> v8) & 1) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x182531108);
              }
              return dword_1826CEDE8[(char)v8];
            default:
              __break(0xC471u);
              JUMPOUT(0x182531128);
          }
        }
      }
    }
    __break(0xC471u);
    JUMPOUT(0x182531068);
  }
  uint64_t v3 = this;
LABEL_11:
  unsigned int v6 = *(unsigned __int8 *)v3 - 1;
  if (v6 >= 5 || ((0x1Bu >> v6) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x182531088);
  }
  return dword_1826CEDAC[(char)v6];
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, long long *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
    uint64_t v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
    uint64_t v11 = v9 + 16;
    if (!a2) {
      goto LABEL_7;
    }
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
    uint64_t v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
    uint64_t v11 = v9 + 16;
    if (!a2) {
      goto LABEL_7;
    }
  }
  uint64_t v12 = a2;
  unsigned int v13 = (void *)(v9 + 24);
  do
  {
    *((_DWORD *)v13 - 2) = -1;
    *unsigned int v13 = 0;
    v13[1] = 0;
    v13 += 3;
    --v12;
  }
  while (v12);
LABEL_7:
  *a1 = v11;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    do
    {
      int v16 = (long long *)(v6 + 24 * v14);
      if (*(_DWORD *)v16 <= 0xFFFFFFFD)
      {
        uint64_t v17 = *a1;
        if (*a1) {
          int v18 = *(_DWORD *)(v17 - 8);
        }
        else {
          int v18 = 0;
        }
        int v19 = 0;
        unsigned int v20 = 9
            * ((*(_DWORD *)v16 + ~(*(_DWORD *)v16 << 15)) ^ ((*(_DWORD *)v16 + ~(*(_DWORD *)v16 << 15)) >> 10));
        unsigned int v21 = (v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11);
        int v22 = v21 ^ HIWORD(v21);
        do
        {
          unsigned int v23 = v22 & v18;
          uint64_t v24 = v17 + 24 * v23;
          int v22 = ++v19 + v23;
        }
        while (*(_DWORD *)v24 != -1);
        long long v25 = *v16;
        *(void *)(v24 + 16) = *((void *)v16 + 2);
        *(_OWORD *)uint64_t v24 = v25;
        if (v16 == a3) {
          uint64_t v15 = v24;
        }
      }
      ++v14;
    }
    while (v14 != v7);
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v15;
}

uint64_t *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebGPU::PipelineLayout,WTF::RawPtrTraits<WebGPU::PipelineLayout>,WTF::DefaultRefDerefTraits<WebGPU::PipelineLayout>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::~HashTable(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = *a1;
      while (1)
      {
        uint64_t v6 = *(_DWORD **)v5;
        if (*(void *)v5 == -1) {
          goto LABEL_5;
        }
        int v7 = *(atomic_uchar *volatile ***)(v5 + 8);
        *(void *)(v5 + 8) = 0;
        if (!v7) {
          goto LABEL_10;
        }
        if (*(_DWORD *)v7 != 1) {
          break;
        }
        WebGPU::PipelineLayout::~PipelineLayout(v7, a2);
        WTF::fastFree(v8, v9);
        uint64_t v6 = *(_DWORD **)v5;
        *(void *)uint64_t v5 = 0;
        if (v6)
        {
LABEL_11:
          if (*v6 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v6 -= 2;
          }
        }
LABEL_5:
        v5 += 16;
        if (!--v4) {
          goto LABEL_15;
        }
      }
      --*(_DWORD *)v7;
LABEL_10:
      *(void *)uint64_t v5 = 0;
      if (v6) {
        goto LABEL_11;
      }
      goto LABEL_5;
    }
LABEL_15:
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL15SuccessfulCheckENS8_11FailedCheckENS_9monostateEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  uint64_t v4 = a3[2];
  a3[2] = 0;
  *(void *)(a2 + 16) = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL15SuccessfulCheckENS8_11FailedCheckENS_9monostateEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SA_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t v4 = a3[2];
  a3[2] = 0;
  *(void *)(a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 6);
  *((_DWORD *)a3 + 6) = 0;
  *(_DWORD *)(a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 7);
  *((_DWORD *)a3 + 7) = 0;
  *(_DWORD *)(a2 + 28) = v4;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebGPU::ShaderModule::ShaderModuleState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebGPU::ShaderModule::ShaderModuleState>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebGPU::ShaderModule::ShaderModuleState,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebGPU::ShaderModule::ShaderModuleState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
    uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    uint64_t v11 = v9 + 16;
    if (!a2) {
      goto LABEL_7;
    }
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
    uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    uint64_t v11 = v9 + 16;
    if (!a2) {
      goto LABEL_7;
    }
  }
  uint64_t v12 = a2;
  uint64_t v13 = v9 + 24;
  do
  {
    *(void *)(v13 - 8) = 0;
    *(unsigned char *)(v13 + 4) = 0;
    *(_DWORD *)uint64_t v13 = 0;
    v13 += 16;
    --v12;
  }
  while (v12);
LABEL_7:
  *a1 = v11;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    while (1)
    {
      int v16 = (WTF::StringImpl **)(v6 + 16 * v14);
      uint64_t v17 = *v16;
      if (*v16 != (WTF::StringImpl *)-1)
      {
        if (v17)
        {
          uint64_t v18 = *a1;
          if (*a1)
          {
            int v19 = *(_DWORD *)(v18 - 8);
            unsigned int v20 = *((_DWORD *)v17 + 4);
            if (v20 >= 0x100) {
              goto LABEL_15;
            }
LABEL_17:
            unsigned int v21 = WTF::StringImpl::hashSlowCase(v17);
          }
          else
          {
            int v19 = 0;
            unsigned int v20 = *((_DWORD *)v17 + 4);
            if (v20 < 0x100) {
              goto LABEL_17;
            }
LABEL_15:
            unsigned int v21 = v20 >> 8;
          }
          int v22 = 0;
          do
          {
            uint64_t v23 = v21 & v19;
            unsigned int v21 = ++v22 + v23;
          }
          while (*(void *)(v18 + 16 * v23));
          uint64_t v24 = v18 + 16 * v23;
          *(void *)uint64_t v24 = 0;
          long long v25 = *v16;
          long long *v16 = 0;
          *(void *)uint64_t v24 = v25;
          uint64_t v26 = v6 + 16 * v14;
          int v27 = *(_DWORD *)(v26 + 8);
          *(unsigned char *)(v24 + 12) = *(unsigned char *)(v26 + 12);
          *(_DWORD *)(v24 + 8) = v27;
          uint64_t v28 = *v16;
          long long *v16 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *(_DWORD *)v28 -= 2;
            }
          }
          if (v16 == a3) {
            uint64_t v15 = v24;
          }
          goto LABEL_10;
        }
        long long *v16 = 0;
      }
LABEL_10:
      if (++v14 == v7) {
        goto LABEL_28;
      }
    }
  }
  uint64_t v15 = 0;
  uint64_t result = 0;
  if (v6)
  {
LABEL_28:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v15;
  }
  return result;
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<unsigned int,WGPUVertexFormat,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGPUVertexFormat>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    size_t v7 = 16 * a2;
    uint64_t v9 = WTF::fastMalloc((WTF *)(v7 + 16));
    uint64_t v10 = (void *)(v9 + 16);
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  unsigned int v5 = 0;
  int v6 = 0;
  size_t v7 = 16 * a2;
  uint64_t v9 = WTF::fastMalloc((WTF *)(v7 + 16));
  uint64_t v10 = (void *)(v9 + 16);
  if (a2) {
LABEL_3:
  }
    bzero(v10, v7);
LABEL_4:
  *a1 = (uint64_t)v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v5;
    while (1)
    {
      uint64_t v13 = (WTF::StringImpl **)(v4 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 == (WTF::StringImpl *)-1) {
        goto LABEL_7;
      }
      if (v14) {
        break;
      }
      uint64_t v15 = *(void *)(v4 + 16 * v11 + 8);
      if (v15)
      {
        WTF::fastFree((WTF *)(v15 - 16), v8);
        uint64_t v14 = *v13;
      }
      *uint64_t v13 = 0;
      if (!v14) {
        goto LABEL_7;
      }
      if (*(_DWORD *)v14 == 2)
      {
LABEL_33:
        WTF::StringImpl::destroy();
        goto LABEL_7;
      }
      *(_DWORD *)v14 -= 2;
LABEL_7:
      if (++v11 == v12) {
        goto LABEL_37;
      }
    }
    uint64_t v16 = *a1;
    if (*a1)
    {
      int v17 = *(_DWORD *)(v16 - 8);
      unsigned int v18 = *((_DWORD *)v14 + 4);
      if (v18 >= 0x100)
      {
LABEL_17:
        unsigned int v19 = v18 >> 8;
        goto LABEL_21;
      }
    }
    else
    {
      int v17 = 0;
      unsigned int v18 = *((_DWORD *)v14 + 4);
      if (v18 >= 0x100) {
        goto LABEL_17;
      }
    }
    unsigned int v19 = WTF::StringImpl::hashSlowCase(v14);
LABEL_21:
    int v20 = 0;
    do
    {
      uint64_t v21 = v19 & v17;
      unsigned int v19 = ++v20 + v21;
    }
    while (*(void *)(v16 + 16 * v21));
    uint64_t v22 = v16 + 16 * v21;
    uint64_t v24 = (void *)(v22 + 8);
    uint64_t v23 = *(void *)(v22 + 8);
    if (v23)
    {
      WTF::fastFree((WTF *)(v23 - 16), v8);
      long long v25 = *(_DWORD **)v22;
      *(void *)uint64_t v22 = 0;
      if (v25)
      {
        if (*v25 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v25 -= 2;
        }
      }
    }
    else
    {
      *(void *)uint64_t v22 = 0;
    }
    uint64_t v26 = *v13;
    *uint64_t v13 = 0;
    *(void *)uint64_t v22 = v26;
    uint64_t v27 = v4 + 16 * v11;
    *uint64_t v24 = 0;
    uint64_t v28 = *(void *)(v27 + 8);
    *(void *)(v27 + 8) = 0;
    *uint64_t v24 = v28;
    uint64_t v29 = *(void *)(v27 + 8);
    if (v29) {
      WTF::fastFree((WTF *)(v29 - 16), v8);
    }
    double v30 = *v13;
    *uint64_t v13 = 0;
    if (!v30) {
      goto LABEL_7;
    }
    if (*(_DWORD *)v30 == 2) {
      goto LABEL_33;
    }
    *(_DWORD *)v30 -= 2;
    goto LABEL_7;
  }
  if (v4)
  {
LABEL_37:
    WTF::fastFree((WTF *)(v4 - 16), v8);
  }
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<unsigned int,WebGPU::ShaderModule::VertexOutputFragmentInput,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebGPU::ShaderModule::VertexOutputFragmentInput>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
    size_t v9 = 16 * a2;
    uint64_t v11 = WTF::fastMalloc((WTF *)(v9 + 16));
    uint64_t v12 = (void *)(v11 + 16);
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  unsigned int v7 = 0;
  int v8 = 0;
  size_t v9 = 16 * a2;
  uint64_t v11 = WTF::fastMalloc((WTF *)(v9 + 16));
  uint64_t v12 = (void *)(v11 + 16);
  if (a2) {
LABEL_3:
  }
    bzero(v12, v9);
LABEL_4:
  *a1 = (uint64_t)v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = v7;
    while (1)
    {
      uint64_t v16 = (WTF::StringImpl **)(v6 + 16 * v13);
      int v17 = *v16;
      if (*v16 != (WTF::StringImpl *)-1)
      {
        if (v17)
        {
          uint64_t v19 = *a1;
          if (*a1)
          {
            int v20 = *(_DWORD *)(v19 - 8);
            unsigned int v21 = *((_DWORD *)v17 + 4);
            if (v21 >= 0x100) {
              goto LABEL_19;
            }
LABEL_22:
            unsigned int v22 = WTF::StringImpl::hashSlowCase(v17);
          }
          else
          {
            int v20 = 0;
            unsigned int v21 = *((_DWORD *)v17 + 4);
            if (v21 < 0x100) {
              goto LABEL_22;
            }
LABEL_19:
            unsigned int v22 = v21 >> 8;
          }
          int v23 = 0;
          do
          {
            uint64_t v24 = v22 & v20;
            unsigned int v22 = ++v23 + v24;
          }
          while (*(void *)(v19 + 16 * v24));
          uint64_t v25 = v19 + 16 * v24;
          uint64_t v27 = (void *)(v25 + 8);
          uint64_t v26 = *(void *)(v25 + 8);
          if (v26)
          {
            WTF::fastFree((WTF *)(v26 - 16), v10);
            uint64_t v28 = *(_DWORD **)v25;
            *(void *)uint64_t v25 = 0;
            if (v28)
            {
              if (*v28 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *v28 -= 2;
              }
            }
          }
          else
          {
            *(void *)uint64_t v25 = 0;
          }
          uint64_t v29 = *v16;
          long long *v16 = 0;
          *(void *)uint64_t v25 = v29;
          uint64_t v30 = v6 + 16 * v13;
          void *v27 = 0;
          uint64_t v31 = *(void *)(v30 + 8);
          *(void *)(v30 + 8) = 0;
          void *v27 = v31;
          uint64_t v32 = *(void *)(v30 + 8);
          if (v32) {
            WTF::fastFree((WTF *)(v32 - 16), v10);
          }
          uint64_t v33 = *v16;
          long long *v16 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *(_DWORD *)v33 -= 2;
            }
          }
          if (v16 == a3) {
            uint64_t v14 = v25;
          }
          goto LABEL_9;
        }
        uint64_t v18 = *(void *)(v6 + 16 * v13 + 8);
        if (v18)
        {
          WTF::fastFree((WTF *)(v18 - 16), v10);
          int v17 = *v16;
        }
        long long *v16 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *(_DWORD *)v17 -= 2;
          }
        }
      }
LABEL_9:
      if (++v13 == v15) {
        goto LABEL_39;
      }
    }
  }
  uint64_t v14 = 0;
  uint64_t result = 0;
  if (v6)
  {
LABEL_39:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v14;
  }
  return result;
}

double WebGPU::convertMessages(double *a1, _DWORD *a2, unsigned char *a3)
{
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v24 = 0;
  double v25 = 0.0;
  uint64_t v6 = *(unsigned int *)(*(void *)a2 + 12);
  if (!v6)
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    if (!a3[16]) {
      goto LABEL_22;
    }
    goto LABEL_13;
  }
  uint64_t v7 = 0;
  unsigned int v8 = 0;
  size_t v9 = **(void ***)a2;
  uint64_t v10 = 24 * v6;
  do
  {
    while (v8 == LODWORD(v25))
    {
      uint64_t v11 = (_DWORD **)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v24, v8 + 1, (unint64_t)v9);
      uint64_t v12 = HIDWORD(v25);
      uint64_t v7 = v24;
      uint64_t v13 = *v11;
      if (*v11) {
        *v13 += 2;
      }
      *(void *)(v7 + 8 * v12) = v13;
      unsigned int v8 = v12 + 1;
      HIDWORD(v25) = v8;
      v9 += 3;
      v10 -= 24;
      if (!v10) {
        goto LABEL_10;
      }
    }
    uint64_t v14 = (_DWORD *)*v9;
    if (*v9) {
      *v14 += 2;
    }
    *(void *)(v7 + 8 * v8++) = v14;
    HIDWORD(v25) = v8;
    v9 += 3;
    v10 -= 24;
  }
  while (v10);
LABEL_10:
  if (a3[16])
  {
LABEL_13:
    uint64_t v15 = *(unsigned int *)(*(void *)a3 + 12);
    if (v15)
    {
      uint64_t v16 = **(void ***)a3;
      uint64_t v17 = 24 * v15;
      do
      {
        while (v8 == LODWORD(v25))
        {
          uint64_t v18 = (_DWORD **)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v24, v8 + 1, (unint64_t)v16);
          uint64_t v19 = HIDWORD(v25);
          uint64_t v7 = v24;
          int v20 = *v18;
          if (*v18) {
            *v20 += 2;
          }
          *(void *)(v7 + 8 * v19) = v20;
          unsigned int v8 = v19 + 1;
          HIDWORD(v25) = v8;
          v16 += 3;
          v17 -= 24;
          if (!v17) {
            goto LABEL_22;
          }
        }
        unsigned int v21 = (_DWORD *)*v16;
        if (*v16) {
          *v21 += 2;
        }
        *(void *)(v7 + 8 * v8++) = v21;
        HIDWORD(v25) = v8;
        v16 += 3;
        v17 -= 24;
      }
      while (v17);
    }
  }
LABEL_22:
  v23[0] = (uint64_t)&v26;
  v23[1] = (uint64_t)&v24;
  WebGPU::convertMessages(WebGPU::Messages const&,std::optional<WebGPU::Messages> const&)::$_1::operator()(v23, a2, 0);
  if (a3[16]) {
    WebGPU::convertMessages(WebGPU::Messages const&,std::optional<WebGPU::Messages> const&)::$_1::operator()(v23, a3, *(unsigned int *)(*(void *)a2 + 12));
  }
  *(void *)a1 = v26;
  *((void *)a1 + 1) = v27;
  *((void *)a1 + 2) = v24;
  double result = v25;
  a1[3] = v25;
  return result;
}

void sub_182531C70(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::Vector<WGPUCompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)va1, v5);
  _Unwind_Resume(a1);
}

uint64_t *WebGPU::convertMessages(WebGPU::Messages const&,std::optional<WebGPU::Messages> const&)::$_1::operator()(uint64_t *result, _DWORD *a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t **)a2;
  if (*(_DWORD *)(*(void *)a2 + 12))
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = 8 * a3;
    while (1)
    {
      uint64_t v10 = *v3;
      uint64_t v24 = 0;
      uint64_t v12 = *v6;
      uint64_t v11 = v6[1];
      if (a3 + v8 >= *(unsigned int *)(v11 + 12)) {
        break;
      }
      uint64_t v13 = *(uint64_t **)(*(void *)v11 + v9 + 8 * v8);
      if (v13) {
        *(_DWORD *)v13 += 2;
      }
      double v25 = v13;
      LODWORD(v26) = a2[2];
      uint64_t v14 = (unsigned int *)(v10 + v7);
      *((void *)&v26 + 1) = v14[2];
      *(void *)&long long v27 = v14[3];
      *((void *)&v27 + 1) = v14[4];
      *(void *)uint64_t v28 = v14[5];
      *(_OWORD *)&v28[8] = v27;
      *(void *)&v28[24] = *(void *)v28;
      uint64_t v15 = *(unsigned int *)(v12 + 12);
      if (v15 == *(_DWORD *)(v12 + 8))
      {
        unint64_t v16 = WTF::Vector<WGPUCompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, v15 + 1, (unint64_t)&v24);
        uint64_t v17 = *(void *)v12 + 80 * *(unsigned int *)(v12 + 12);
        *(void *)uint64_t v17 = *(void *)v16;
        uint64_t v18 = *(void *)(v16 + 8);
        *(void *)(v16 + 8) = 0;
        *(void *)(v17 + 8) = v18;
        long long v19 = *(_OWORD *)(v16 + 16);
        long long v20 = *(_OWORD *)(v16 + 32);
        long long v21 = *(_OWORD *)(v16 + 48);
        long long v22 = *(_OWORD *)(v16 + 64);
      }
      else
      {
        uint64_t v17 = *(void *)v12 + 80 * v15;
        *(void *)uint64_t v17 = 0;
        int v23 = v25;
        double v25 = 0;
        *(void *)(v17 + 8) = v23;
        long long v19 = v26;
        long long v20 = v27;
        long long v21 = *(_OWORD *)v28;
        long long v22 = *(_OWORD *)&v28[16];
      }
      *(_OWORD *)(v17 + 48) = v21;
      *(_OWORD *)(v17 + 64) = v22;
      *(_OWORD *)(v17 + 16) = v19;
      *(_OWORD *)(v17 + 32) = v20;
      ++*(_DWORD *)(v12 + 12);
      double result = v25;
      double v25 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          double result = (uint64_t *)WTF::StringImpl::destroy();
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      ++v8;
      uint64_t v3 = *(uint64_t **)a2;
      v7 += 24;
      if (v8 >= *(unsigned int *)(*(void *)a2 + 12)) {
        return result;
      }
    }
    __break(0xC471u);
  }
  return result;
}

void sub_182531E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(_DWORD **)v4;
      *(void *)uint64_t v4 = 0;
      if (v6)
      {
        if (*v6 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v6 -= 2;
        }
      }
      uint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

unsigned int *WTF::Vector<WGPUCompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, void *a2)
{
  uint64_t v3 = a1[3];
  if (v3)
  {
    uint64_t v4 = 80 * v3;
    uint64_t v5 = (_DWORD **)(*(void *)a1 + 8);
    do
    {
      uint64_t v6 = *v5;
      void *v5 = 0;
      if (v6)
      {
        if (*v6 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v6 -= 2;
        }
      }
      v5 += 10;
      v4 -= 80;
    }
    while (v4);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

unint64_t WTF::Vector<WGPUCompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 80 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WGPUCompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WGPUCompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
}

uint64_t WTF::Vector<WGPUCompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x3333334)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v2 = result;
      uint64_t v3 = *(WTF **)result;
      unsigned int v4 = *(_DWORD *)(result + 12);
      int v5 = 80 * a2;
      double result = WTF::fastMalloc((WTF *)(80 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x50;
      *(void *)uint64_t v2 = result;
      if (v4)
      {
        uint64_t v7 = result;
        unint64_t v8 = (WTF *)((char *)v3 + 80 * v4);
        uint64_t v9 = v3;
        do
        {
          *(void *)uint64_t v7 = *(void *)v9;
          uint64_t v10 = *((void *)v9 + 1);
          *((void *)v9 + 1) = 0;
          *(void *)(v7 + 8) = v10;
          long long v11 = *((_OWORD *)v9 + 1);
          long long v12 = *((_OWORD *)v9 + 2);
          long long v13 = *((_OWORD *)v9 + 4);
          *(_OWORD *)(v7 + 48) = *((_OWORD *)v9 + 3);
          *(_OWORD *)(v7 + 64) = v13;
          *(_OWORD *)(v7 + 16) = v11;
          *(_OWORD *)(v7 + 32) = v12;
          double result = *((void *)v9 + 1);
          *((void *)v9 + 1) = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              double result = WTF::StringImpl::destroy();
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
          uint64_t v9 = (WTF *)((char *)v9 + 80);
          v7 += 80;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(void *)uint64_t v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<WGSL::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 120 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WGSL::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WGSL::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
}

uint64_t WTF::Vector<WGSL::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  if (a2 < 0x2222223)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(WTF **)result;
    unsigned int v4 = *(_DWORD *)(result + 12);
    int v5 = 120 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(120 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x78;
    *(void *)uint64_t v2 = v6;
    if (v4)
    {
      uint64_t v8 = v6;
      uint64_t v9 = (WTF *)((char *)v3 + 120 * v4);
      unint64_t v10 = v3;
      do
      {
        long long v11 = *(_OWORD *)v10;
        long long v12 = *((_OWORD *)v10 + 1);
        *(void *)(v8 + 32) = *((void *)v10 + 4);
        *(_OWORD *)uint64_t v8 = v11;
        *(_OWORD *)(v8 + 16) = v12;
        uint64_t v13 = *((void *)v10 + 5);
        *((void *)v10 + 5) = 0;
        *(void *)(v8 + 40) = v13;
        *(_OWORD *)(v8 + 48) = *((_OWORD *)v10 + 3);
        long long v14 = *((_OWORD *)v10 + 4);
        long long v15 = *((_OWORD *)v10 + 5);
        long long v16 = *((_OWORD *)v10 + 6);
        *(void *)(v8 + 109) = *(void *)((char *)v10 + 109);
        *(_OWORD *)(v8 + 80) = v15;
        *(_OWORD *)(v8 + 96) = v16;
        *(_OWORD *)(v8 + 64) = v14;
        uint64_t v17 = (_DWORD *)*((void *)v10 + 5);
        *((void *)v10 + 5) = 0;
        if (v17)
        {
          if (*v17 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v17 -= 2;
          }
        }
        unint64_t v10 = (WTF *)((char *)v10 + 120);
        v8 += 120;
      }
      while (v10 != v9);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::Vector<WGSL::BindGroupLayout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WGSL::BindGroupLayout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WGSL::BindGroupLayout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
}

uint64_t WTF::Vector<WGSL::BindGroupLayout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  if (a2 < 0xAAAAAAB)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(WTF **)result;
    unsigned int v4 = *(_DWORD *)(result + 12);
    int v5 = 24 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(void *)uint64_t v2 = v6;
    if (v4)
    {
      uint64_t v8 = v6;
      uint64_t v9 = (WTF *)((char *)v3 + 24 * v4);
      unint64_t v10 = v3;
      do
      {
        *(_DWORD *)uint64_t v8 = *(_DWORD *)v10;
        *(void *)(v8 + 8) = 0;
        *(void *)(v8 + 16) = 0;
        uint64_t v11 = *((void *)v10 + 1);
        *((void *)v10 + 1) = 0;
        *(void *)(v8 + 8) = v11;
        LODWORD(v11) = *((_DWORD *)v10 + 4);
        *((_DWORD *)v10 + 4) = 0;
        *(_DWORD *)(v8 + 16) = v11;
        LODWORD(v11) = *((_DWORD *)v10 + 5);
        *((_DWORD *)v10 + 5) = 0;
        *(_DWORD *)(v8 + 20) = v11;
        uint64_t v12 = *((unsigned int *)v10 + 5);
        if (v12)
        {
          uint64_t v13 = 120 * v12;
          long long v14 = (_DWORD **)(*((void *)v10 + 1) + 40);
          do
          {
            long long v15 = *v14;
            *long long v14 = 0;
            if (v15)
            {
              if (*v15 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *v15 -= 2;
              }
            }
            v14 += 15;
            v13 -= 120;
          }
          while (v13);
        }
        long long v16 = (WTF *)*((void *)v10 + 1);
        if (v16)
        {
          *((void *)v10 + 1) = 0;
          *((_DWORD *)v10 + 4) = 0;
          WTF::fastFree(v16, v7);
        }
        v8 += 24;
        unint64_t v10 = (WTF *)((char *)v10 + 24);
      }
      while (v10 != v9);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<wgpuShaderModuleGetCompilationInfo::$_0,void,WGPUCompilationInfoRequestStatus,WGPUCompilationInfo const&>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 8))(a2, a3, *(void *)(a1 + 16));
}

BOOL WebGPU::Texture::isCompressedFormat(int a1)
{
  BOOL v1 = a1 != 0x7FFFFFFF;
  if (!a1) {
    BOOL v1 = 0;
  }
  return (a1 - 1) >= 0x2B && v1;
}

uint64_t WebGPU::Texture::texelBlockWidth(int a1)
{
  uint64_t result = 4;
  switch(a1)
  {
    case 0:
      uint64_t result = 0;
      break;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
      uint64_t result = 1;
      break;
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
      return result;
    case 70:
    case 71:
    case 72:
    case 73:
      uint64_t result = 5;
      break;
    case 74:
    case 75:
    case 76:
    case 77:
      uint64_t result = 6;
      break;
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
      uint64_t result = 8;
      break;
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
      uint64_t result = 10;
      break;
    case 92:
    case 93:
    case 94:
    case 95:
      uint64_t result = 12;
      break;
    default:
      if (a1 == 0x7FFFFFFF) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = 4;
      }
      break;
  }
  return result;
}

uint64_t WebGPU::Texture::texelBlockHeight(int a1)
{
  uint64_t result = 4;
  switch(a1)
  {
    case 0:
      uint64_t result = 0;
      break;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
      uint64_t result = 1;
      break;
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
      return result;
    case 72:
    case 73:
    case 74:
    case 75:
    case 78:
    case 79:
    case 84:
    case 85:
      uint64_t result = 5;
      break;
    case 76:
    case 77:
    case 80:
    case 81:
    case 86:
    case 87:
      uint64_t result = 6;
      break;
    case 82:
    case 83:
    case 88:
    case 89:
      uint64_t result = 8;
      break;
    case 90:
    case 91:
    case 92:
    case 93:
      uint64_t result = 10;
      break;
    case 94:
    case 95:
      uint64_t result = 12;
      break;
    default:
      if (a1 == 0x7FFFFFFF) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = 4;
      }
      break;
  }
  return result;
}

BOOL WebGPU::Texture::isColorRenderableFormat(int a1, uint64_t a2)
{
  if ((a1 - 44) < 0x34) {
    return 0;
  }
  BOOL result = 1;
  switch(a1)
  {
    case 0:
    case 2:
    case 9:
    case 20:
    case 28:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
      return 0;
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
      return result;
    case 27:
      uint64_t v4 = *(unsigned int *)(a2 + 244);
      if (!v4) {
        return 0;
      }
      int v5 = *(int **)(a2 + 232);
      uint64_t v6 = v4 - 1;
      do
      {
        int v7 = *v5++;
        BOOL result = v7 == 9;
      }
      while (v7 != 9 && v6-- != 0);
      break;
    default:
      BOOL result = a1 != 0x7FFFFFFF;
      break;
  }
  return result;
}

BOOL WebGPU::Texture::isRenderableFormat(BOOL result, uint64_t a2)
{
  if ((result - 44) < 0x34) {
    return 0;
  }
  if (result > 0x1C) {
    return result != 0x7FFFFFFF;
  }
  if (((1 << result) & 0x10100204) != 0) {
    return 0;
  }
  if (!result) {
    return result;
  }
  if (result != 27) {
    return result != 0x7FFFFFFF;
  }
  uint64_t v2 = *(unsigned int *)(a2 + 244);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(int **)(a2 + 232);
  uint64_t v4 = v2 - 1;
  do
  {
    int v5 = *v3++;
    BOOL result = v5 == 9;
  }
  while (v5 != 9 && v4-- != 0);
  return result;
}

uint64_t WebGPU::Texture::renderTargetPixelByteCost(int a1)
{
  uint64_t result = 1;
  switch(a1)
  {
    case 0:
    case 2:
    case 9:
    case 20:
    case 28:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
      uint64_t result = 0;
      break;
    case 1:
    case 3:
    case 4:
      return result;
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
      uint64_t result = 2;
      break;
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 21:
    case 22:
      uint64_t result = 4;
      break;
    case 18:
    case 19:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      uint64_t result = 8;
      break;
    case 35:
    case 36:
    case 37:
      uint64_t result = 16;
      break;
    default:
      uint64_t result = a1 != 0x7FFFFFFF;
      break;
  }
  return result;
}

uint64_t WebGPU::Texture::renderTargetPixelByteAlignment(int a1)
{
  if ((a1 - 38) < 0x3A) {
    return 0;
  }
  uint64_t result = 1;
  switch(a1)
  {
    case 0:
    case 2:
    case 9:
    case 20:
    case 28:
      return 0;
    case 1:
    case 3:
    case 4:
    case 8:
    case 10:
    case 11:
    case 18:
    case 19:
    case 21:
    case 22:
    case 23:
    case 24:
      return result;
    case 5:
    case 6:
    case 7:
    case 15:
    case 16:
    case 17:
    case 32:
    case 33:
    case 34:
      uint64_t result = 2;
      break;
    case 12:
    case 13:
    case 14:
    case 25:
    case 26:
    case 27:
    case 29:
    case 30:
    case 31:
    case 35:
    case 36:
    case 37:
      uint64_t result = 4;
      break;
    default:
      uint64_t result = a1 != 0x7FFFFFFF;
      break;
  }
  return result;
}

BOOL WebGPU::Texture::supportsMultisampling(unsigned int a1, int *a2, unsigned int a3)
{
  if (a1 - 44 < 0x34) {
    return 0;
  }
  if (a1 > 0x25) {
    return a1 != 0x7FFFFFFF;
  }
  if (((1 << a1) & 0x38F0006000) != 0 || !a1) {
    return 0;
  }
  if (a1 != 27) {
    return a1 != 0x7FFFFFFF;
  }
  if (!a3) {
    return 0;
  }
  uint64_t v4 = a3 - 1;
  do
  {
    int v5 = *a2++;
    BOOL result = v5 == 9;
  }
  while (v5 != 9 && v4-- != 0);
  return result;
}

uint64_t WebGPU::Texture::supportsResolve(unsigned int a1, uint64_t a2)
{
  if (a1 - 35 < 0x3D) {
    return 0;
  }
  if (a1 > 0x21) {
    goto LABEL_15;
  }
  if (((1 << a1) & 0x3F271FE7CLL) != 0 || !a1) {
    return 0;
  }
  if (a1 != 27)
  {
LABEL_15:
    if (a1 != 0x7FFFFFFF) {
      return 1;
    }
    uint64_t result = 1408;
    __break(0xC471u);
    return result;
  }
  uint64_t v3 = *(unsigned int *)(a2 + 244);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(int **)(a2 + 232);
  uint64_t v5 = v3 - 1;
  do
  {
    int v6 = *v4++;
    uint64_t result = v6 == 9;
  }
  while (v6 != 9 && v5-- != 0);
  return result;
}

BOOL WebGPU::Texture::supportsBlending(unsigned int a1, uint64_t a2)
{
  if (a1 - 35 < 0x3D) {
    return 0;
  }
  if (a1 > 0x21) {
    return a1 != 0x7FFFFFFF;
  }
  if (((1 << a1) & 0x3F271FE7CLL) != 0 || !a1) {
    return 0;
  }
  if (a1 != 27) {
    return a1 != 0x7FFFFFFF;
  }
  uint64_t v3 = *(unsigned int *)(a2 + 244);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(int **)(a2 + 232);
  uint64_t v5 = v3 - 1;
  do
  {
    int v6 = *v4++;
    BOOL result = v6 == 9;
  }
  while (v6 != 9 && v5-- != 0);
  return result;
}

BOOL WebGPU::Texture::hasStorageBindingCapability(int a1, uint64_t a2, int a3)
{
  BOOL result = 1;
  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 15:
    case 16:
    case 17:
    case 19:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
      goto LABEL_2;
    case 12:
    case 13:
    case 14:
      return result;
    case 18:
    case 20:
    case 21:
    case 22:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
      BOOL result = a3 != 3;
      break;
    case 23:
      if (a3 == 3 || (uint64_t v5 = *(unsigned int *)(a2 + 244), !v5))
      {
LABEL_2:
        BOOL result = 0;
      }
      else
      {
        int v6 = *(int **)(a2 + 232);
        uint64_t v7 = v5 - 1;
        do
        {
          int v8 = *v6++;
          BOOL result = v8 == 10;
        }
        while (v8 != 10 && v7-- != 0);
      }
      break;
    default:
      BOOL result = a1 != 0x7FFFFFFF;
      break;
  }
  return result;
}

uint64_t WebGPU::Texture::removeSRGBSuffix(uint64_t result)
{
  switch((int)result)
  {
    case 0:
      BOOL result = 0;
      break;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 20:
    case 21:
    case 22:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 64:
    case 65:
    case 66:
    case 67:
      return result;
    case 18:
    case 19:
      BOOL result = 18;
      break;
    case 23:
    case 24:
      BOOL result = 23;
      break;
    case 44:
    case 45:
      BOOL result = 44;
      break;
    case 46:
    case 47:
      BOOL result = 46;
      break;
    case 48:
    case 49:
      BOOL result = 48;
      break;
    case 56:
    case 57:
      BOOL result = 56;
      break;
    case 58:
    case 59:
      BOOL result = 58;
      break;
    case 60:
    case 61:
      BOOL result = 60;
      break;
    case 62:
    case 63:
      BOOL result = 62;
      break;
    case 68:
    case 69:
      BOOL result = 68;
      break;
    case 70:
    case 71:
      BOOL result = 70;
      break;
    case 72:
    case 73:
      BOOL result = 72;
      break;
    case 74:
    case 75:
      BOOL result = 74;
      break;
    case 76:
    case 77:
      BOOL result = 76;
      break;
    case 78:
    case 79:
      BOOL result = 78;
      break;
    case 80:
    case 81:
      BOOL result = 80;
      break;
    case 82:
    case 83:
      BOOL result = 82;
      break;
    case 84:
    case 85:
      BOOL result = 84;
      break;
    case 86:
    case 87:
      BOOL result = 86;
      break;
    case 88:
    case 89:
      BOOL result = 88;
      break;
    case 90:
    case 91:
      BOOL result = 90;
      break;
    case 92:
    case 93:
      BOOL result = 92;
      break;
    case 94:
    case 95:
      BOOL result = 94;
      break;
    default:
      if (result == 0x7FFFFFFF) {
        BOOL result = 0;
      }
      else {
        BOOL result = result;
      }
      break;
  }
  return result;
}

__CFString *WebGPU::Device::errorValidatingTextureCreation(uint64_t a1, _DWORD *a2, unsigned int **a3)
{
  if (!*(void *)(a1 + 8)) {
    return @"createTexture: Device is not valid";
  }
  int v4 = a2[4];
  if (!v4) {
    return @"createTexture: descriptor.usage is zero";
  }
  unsigned int v5 = a2[6];
  if (!v5) {
    return @"createTexture: descriptor.size.width/height/depth is zero";
  }
  unsigned int v6 = a2[7];
  if (!v6) {
    return @"createTexture: descriptor.size.width/height/depth is zero";
  }
  unsigned int v7 = a2[8];
  if (!v7) {
    return @"createTexture: descriptor.size.width/height/depth is zero";
  }
  unsigned int v8 = a2[10];
  if (!v8) {
    return @"createTexture: descriptor.mipLevelCount is zero";
  }
  unsigned int v11 = a2[11];
  if (v11 != 4 && v11 != 1) {
    return @"createTexture: descriptor.sampleCount is neither 1 nor 4";
  }
  int v12 = a2[5];
  if (v12 <= 1)
  {
    if (v12)
    {
      if (v12 == 1)
      {
        unsigned int v13 = *(_DWORD *)(a1 + 92);
        if (v5 > v13) {
          return @"createTexture: descriptor.size.width is greater than limits().maxTextureDimension2D";
        }
        if (v6 > v13) {
          return @"createTexture: descriptor.size.height is greater than limits().maxTextureDimension2D";
        }
        if (v7 > *(_DWORD *)(a1 + 100)) {
          return @"createTexture: descriptor.size.depthOrArrayLayers > limits().maxTextureArrayLayers";
        }
      }
      goto LABEL_42;
    }
    if (v5 > *(_DWORD *)(a1 + 88)) {
      return @"createTexture: descriptor.size.width is greater than limits().maxTextureDimension1D";
    }
    if (v6 != 1) {
      return @"createTexture: descriptor.size.height != 1";
    }
    if (v7 != 1) {
      return @"createTexture: descriptor.size.depthOrArrayLayers != 1";
    }
LABEL_39:
    if (v11 != 1) {
      return @"createTexture: descriptor.sampleCount != 1";
    }
    int v20 = a2[9];
    BOOL isCompressedFormat = WebGPU::Texture::isCompressedFormat(v20);
    BOOL result = @"createTexture: descriptor.format is compressed or a depth stencil format";
    if (isCompressedFormat || (v20 - 38) < 6) {
      return result;
    }
    goto LABEL_42;
  }
  if (v12 == 2)
  {
    unsigned int v15 = *(_DWORD *)(a1 + 96);
    if (v5 > v15) {
      return @"createTexture: descriptor.size.width > limits().maxTextureDimension3D";
    }
    if (v6 > v15) {
      return @"createTexture: descriptor.size.height > limits().maxTextureDimension3D";
    }
    if (v7 > v15) {
      return @"createTexture: descriptor.size.depthOrArrayLayers > limits().maxTextureDimension3D";
    }
    goto LABEL_39;
  }
  if (v12 == 0x7FFFFFFF) {
    return @"createTexture: descriptor.dimension is WGPUTextureDimension_Force32";
  }
LABEL_42:
  unsigned int v21 = a2[9];
  if (v5 % WebGPU::Texture::texelBlockWidth(v21)) {
    return @"createTexture: descriptor.size.width % Texture::texelBlockWidth(descriptor.format)";
  }
  if (v6 % WebGPU::Texture::texelBlockHeight(v21)) {
    return @"createTexture: descriptor.size.height % Texture::texelBlockHeight(descriptor.format)";
  }
  if (v11 < 2) {
    goto LABEL_52;
  }
  if (v8 != 1) {
    return @"createTexture: descriptor.sampleCount > 1 and descriptor.mipLevelCount != 1";
  }
  if (v7 != 1) {
    return @"createTexture: descriptor.sampleCount > 1 and descriptor.size.depthOrArrayLayers != 1";
  }
  if ((v4 & 0x18) != 0x10) {
    return @"createTexture: descriptor.sampleCount > 1 and (descriptor.usage & WGPUTextureUsage_StorageBinding) || !(descriptor.usage & WGPUTextureUsage_RenderAttachment)";
  }
  if (!WebGPU::Texture::isRenderableFormat(v21, a1)) {
    return @"createTexture: descriptor.sampleCount > 1 and !isRenderableFormat(descriptor.format, *this)";
  }
  if (!WebGPU::Texture::supportsMultisampling(v21, *(int **)(a1 + 232), *(_DWORD *)(a1 + 244))) {
    return @"createTexture: descriptor.sampleCount > 1 and !supportsMultisampling(descriptor.format, *this)";
  }
LABEL_52:
  if (v8 > WebGPU::maximumMiplevelCount(v12, *((void *)a2 + 3), v7)) {
    return @"createTexture: descriptor.mipLevelCount > maximumMiplevelCount(descriptor.dimension, descriptor.size)";
  }
  if ((v4 & 0x10) == 0) {
    goto LABEL_59;
  }
  if (!WebGPU::Texture::isRenderableFormat(v21, a1)) {
    return @"createTexture: descriptor.usage & WGPUTextureUsage_RenderAttachment && !isRenderableFormat(descriptor.format, *this)";
  }
  if (!v12) {
    return @"createTexture: descriptor.usage & WGPUTextureUsage_RenderAttachment && descriptor.dimension == WGPUTextureDimension_1D";
  }
LABEL_59:
  if ((v4 & 8) != 0 && !WebGPU::Texture::hasStorageBindingCapability(v21, a1, 0)) {
    return @"createTexture: descriptor.usage & WGPUTextureUsage_StorageBinding && !hasStorageBindingCapability(descriptor.format)";
  }
  uint64_t v17 = *((unsigned int *)a3 + 3);
  if (!v17) {
    return 0;
  }
  uint64_t v18 = *a3;
  uint64_t v19 = 4 * v17;
  while (WebGPU::textureViewFormatCompatible(v21, *v18))
  {
    BOOL result = 0;
    ++v18;
    v19 -= 4;
    if (!v19) {
      return result;
    }
  }
  return @"createTexture: !textureViewFormatCompatible(descriptor.format, viewFormat)";
}

uint64_t WebGPU::maximumMiplevelCount(int a1, unint64_t a2, unsigned int a3)
{
  unint64_t v3 = HIDWORD(a2);
  if (a1 > 1)
  {
    if (a1 == 2)
    {
      if (a2 > HIDWORD(a2)) {
        LODWORD(v3) = a2;
      }
      if (v3 <= a3) {
        unsigned int v4 = a3;
      }
      else {
        unsigned int v4 = v3;
      }
    }
    else
    {
      if (a1 == 0x7FFFFFFF) {
        return 0;
      }
      unsigned int v4 = 0;
    }
  }
  else
  {
    if (!a1) {
      return 1;
    }
    if (a2 > HIDWORD(a2)) {
      LODWORD(v3) = a2;
    }
    if (a1 == 1) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = 0;
    }
  }
  if (v4 >= 0x10000) {
    unsigned int v6 = HIWORD(v4);
  }
  else {
    unsigned int v6 = v4;
  }
  if (v6 >= 0x100) {
    unsigned int v7 = v6 >> 8;
  }
  else {
    unsigned int v7 = v6;
  }
  unsigned int v8 = v7 >> 4;
  if (v7 < 0x10) {
    unsigned int v8 = v7;
  }
  unsigned int v9 = v8 >> 2;
  if (v8 < 4) {
    unsigned int v9 = v8;
  }
  BOOL v10 = v9 > 1;
  if ((v4 & (v4 - 1)) != 0)
  {
    if (v4 < 0x10000) {
      int v15 = 1;
    }
    else {
      int v15 = 17;
    }
    if (v6 >= 0x100) {
      v15 |= 8u;
    }
    if (v7 >= 0x10) {
      int v16 = v15 | 4;
    }
    else {
      int v16 = v15;
    }
    if (v8 >= 4) {
      int v17 = v16 | 2;
    }
    else {
      int v17 = v16;
    }
    return (v17 + v10);
  }
  else
  {
    BOOL v11 = (v4 & 0xFFFF0000) != 0;
    if (v6 >= 0x100) {
      int v12 = (16 * v11) | 8;
    }
    else {
      int v12 = 16 * v11;
    }
    if (v7 >= 0x10) {
      int v13 = v12 | 4;
    }
    else {
      int v13 = v12;
    }
    if (v8 >= 4) {
      int v14 = v13 | 2;
    }
    else {
      int v14 = v13;
    }
    return (v14 + v10 + 1);
  }
}

BOOL WebGPU::textureViewFormatCompatible(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  int v4 = WebGPU::Texture::removeSRGBSuffix(a1);
  return v4 == WebGPU::Texture::removeSRGBSuffix(a2);
}

uint64_t WebGPU::Texture::pixelFormat(int a1)
{
  uint64_t result = 10;
  switch(a1)
  {
    case 0:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      uint64_t result = 0;
      break;
    case 1:
      return result;
    case 2:
      uint64_t result = 12;
      break;
    case 3:
      uint64_t result = 13;
      break;
    case 4:
      uint64_t result = 14;
      break;
    case 5:
      uint64_t result = 23;
      break;
    case 6:
      uint64_t result = 24;
      break;
    case 7:
      uint64_t result = 25;
      break;
    case 8:
      uint64_t result = 30;
      break;
    case 9:
      uint64_t result = 32;
      break;
    case 10:
      uint64_t result = 33;
      break;
    case 11:
      uint64_t result = 34;
      break;
    case 12:
      uint64_t result = 55;
      break;
    case 13:
      uint64_t result = 53;
      break;
    case 14:
      uint64_t result = 54;
      break;
    case 15:
      uint64_t result = 63;
      break;
    case 16:
      uint64_t result = 64;
      break;
    case 17:
      uint64_t result = 65;
      break;
    case 18:
      uint64_t result = 70;
      break;
    case 19:
      uint64_t result = 71;
      break;
    case 20:
      uint64_t result = 72;
      break;
    case 21:
      uint64_t result = 73;
      break;
    case 22:
      uint64_t result = 74;
      break;
    case 23:
      uint64_t result = 80;
      break;
    case 24:
      uint64_t result = 81;
      break;
    case 25:
      uint64_t result = 91;
      break;
    case 26:
      uint64_t result = 90;
      break;
    case 27:
      uint64_t result = 92;
      break;
    case 28:
      uint64_t result = 93;
      break;
    case 29:
      uint64_t result = 105;
      break;
    case 30:
      uint64_t result = 103;
      break;
    case 31:
      uint64_t result = 104;
      break;
    case 32:
      uint64_t result = 113;
      break;
    case 33:
      uint64_t result = 114;
      break;
    case 34:
      uint64_t result = 115;
      break;
    case 35:
      uint64_t result = 125;
      break;
    case 36:
      uint64_t result = 123;
      break;
    case 37:
      uint64_t result = 124;
      break;
    case 38:
      uint64_t result = 253;
      break;
    case 39:
      uint64_t result = 250;
      break;
    case 40:
    case 42:
      uint64_t result = 252;
      break;
    case 41:
    case 43:
      uint64_t result = 260;
      break;
    case 58:
      uint64_t result = 180;
      break;
    case 59:
      uint64_t result = 181;
      break;
    case 60:
      uint64_t result = 182;
      break;
    case 61:
      uint64_t result = 183;
      break;
    case 62:
      uint64_t result = 178;
      break;
    case 63:
      uint64_t result = 179;
      break;
    case 64:
      uint64_t result = 170;
      break;
    case 65:
      uint64_t result = 172;
      break;
    case 66:
      uint64_t result = 174;
      break;
    case 67:
      uint64_t result = 176;
      break;
    case 68:
      uint64_t result = 204;
      break;
    case 69:
      uint64_t result = 186;
      break;
    case 70:
      uint64_t result = 205;
      break;
    case 71:
      uint64_t result = 187;
      break;
    case 72:
      uint64_t result = 206;
      break;
    case 73:
      uint64_t result = 188;
      break;
    case 74:
      uint64_t result = 207;
      break;
    case 75:
      uint64_t result = 189;
      break;
    case 76:
      uint64_t result = 208;
      break;
    case 77:
      uint64_t result = 190;
      break;
    case 78:
      uint64_t result = 210;
      break;
    case 79:
      uint64_t result = 192;
      break;
    case 80:
      uint64_t result = 211;
      break;
    case 81:
      uint64_t result = 193;
      break;
    case 82:
      uint64_t result = 212;
      break;
    case 83:
      uint64_t result = 194;
      break;
    case 84:
      uint64_t result = 213;
      break;
    case 85:
      uint64_t result = 195;
      break;
    case 86:
      uint64_t result = 214;
      break;
    case 87:
      uint64_t result = 196;
      break;
    case 88:
      uint64_t result = 215;
      break;
    case 89:
      uint64_t result = 197;
      break;
    case 90:
      uint64_t result = 216;
      break;
    case 91:
      uint64_t result = 198;
      break;
    case 92:
      uint64_t result = 217;
      break;
    case 93:
      uint64_t result = 199;
      break;
    case 94:
      uint64_t result = 218;
      break;
    case 95:
      uint64_t result = 200;
      break;
    default:
      if (a1 == 0x7FFFFFFF) {
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

uint64_t WebGPU::Texture::bytesPerRow(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v6 = WebGPU::Texture::texelBlockWidth(a1);
  if (!v6) {
    return 0;
  }
  unsigned int v7 = a2 / v6;
  if (a2 % v6) {
    return 0;
  }
  WebGPU::Texture::texelBlockSize(a1, (int *)&v10);
  unint64_t v9 = v7 * (unint64_t)a3;
  if (is_mul_ok(v10, v9)) {
    return v10 * v9;
  }
  else {
    return -1;
  }
}

uint64_t WebGPU::Texture::texelBlockSize@<X0>(uint64_t result@<X0>, int *a2@<X8>)
{
  int v2 = 1;
  switch((int)result)
  {
    case 0:
    case 41:
    case 43:
      goto LABEL_7;
    case 1:
    case 2:
    case 3:
    case 4:
    case 38:
      goto LABEL_8;
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 39:
      int v2 = 2;
      goto LABEL_8;
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 40:
    case 42:
      int v2 = 4;
      goto LABEL_8;
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 44:
    case 45:
    case 50:
    case 51:
    case 58:
    case 59:
    case 60:
    case 61:
    case 64:
    case 65:
      int v2 = 8;
      goto LABEL_8;
    case 35:
    case 36:
    case 37:
    case 46:
    case 47:
    case 48:
    case 49:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 62:
    case 63:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
      int v2 = 16;
      goto LABEL_8;
    default:
      if (result != 0x7FFFFFFF) {
        return result;
      }
LABEL_7:
      int v2 = 0;
LABEL_8:
      *a2 = v2;
      return result;
  }
}

uint64_t WebGPU::Texture::aspectSpecificFormat(uint64_t result, int a2)
{
  if (a2 == 0x7FFFFFFF) {
    return 0;
  }
  if (a2 == 2)
  {
    int v2 = result - 39;
    if ((result - 39) < 5)
    {
      unint64_t v3 = (unsigned int *)&unk_1826CEE18;
      return v3[v2];
    }
    return 0;
  }
  if (a2 != 1) {
    return result;
  }
  int v2 = result - 38;
  if ((result - 38) >= 6) {
    return 0;
  }
  unint64_t v3 = (unsigned int *)&unk_1826CEE00;
  return v3[v2];
}

WebGPU::Texture *WebGPU::Device::createTexture@<X0>(WebGPU::Texture *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = (uint64_t)result;
  if (*(void *)a2 || !*((void *)result + 1))
  {
    unsigned int v5 = (WebGPU::Texture *)WTF::fastMalloc((WTF *)0x80);
    uint64_t result = WebGPU::Texture::Texture(v5, (atomic_uchar *volatile *)v3);
    *a3 = v5;
    return result;
  }
  unint64_t v8 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 56);
  long long v58 = 0;
  int v59 = 0;
  int v60 = v8;
  if (v8)
  {
    if (v8 >> 30)
    {
      __break(0xC471u);
      return result;
    }
    unint64_t v9 = (WTF *)WTF::fastMalloc((WTF *)(4 * v8));
    int v59 = v8;
    long long v58 = v9;
    unint64_t v10 = (v8 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v10 < 7)
    {
      BOOL v11 = (int *)v7;
    }
    else
    {
      BOOL v11 = (int *)v7;
      if ((unint64_t)v9 - v7 >= 0x20)
      {
        unint64_t v12 = v10 + 1;
        uint64_t v13 = 4 * (v12 & 0x7FFFFFFFFFFFFFF8);
        int v14 = (WTF *)((char *)v9 + v13);
        BOOL v11 = (int *)(v7 + v13);
        int v15 = (long long *)(v7 + 16);
        int v16 = (_OWORD *)((char *)v9 + 16);
        uint64_t v17 = v12 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v18 = *v15;
          *(v16 - 1) = *(v15 - 1);
          _OWORD *v16 = v18;
          v15 += 2;
          v16 += 2;
          v17 -= 8;
        }
        while (v17);
        unint64_t v9 = v14;
        if (v12 == (v12 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_15;
        }
      }
    }
    do
    {
      int v19 = *v11++;
      *(_DWORD *)unint64_t v9 = v19;
      unint64_t v9 = (WTF *)((char *)v9 + 4);
    }
    while (v11 != (int *)(v7 + 4 * v8));
  }
LABEL_15:
  uint64_t v20 = WebGPU::Device::errorValidatingTextureCreation(v3, (_DWORD *)a2, (unsigned int **)&v58);
  if (v20)
  {
    unsigned int v21 = (void *)v20;
    MEMORY[0x18530AF50](&v61, v20);
    uint64_t v22 = *(void *)(v3 + 32);
    uint64_t v23 = 32 * *(unsigned int *)(v3 + 44);
    uint64_t v24 = v22 + v23;
    while (v23)
    {
      int v25 = *(_DWORD *)(v24 - 8);
      v24 -= 32;
      v23 -= 32;
      if (!v25)
      {
        uint64_t v26 = v22 + v23;
        if (!*(unsigned char *)(v26 + 16))
        {
          uint64_t v27 = v61;
          uint64_t v61 = 0;
          *(_DWORD *)uint64_t v26 = 1;
          *(void *)(v26 + 8) = v27;
          *(unsigned char *)(v26 + 16) = 1;
        }
        goto LABEL_32;
      }
    }
    uint64_t v34 = *(void *)(v3 + 24);
    if (v34)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v34 + 16))(v34, 1, &v61);
      uint64_t v35 = *(void *)(v3 + 24);
      *(void *)(v3 + 24) = 0;
      if (v35) {
        (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
      }
    }
LABEL_32:
    unsigned int v36 = (_DWORD *)v61;
    uint64_t v61 = 0;
    if (v36)
    {
      if (*v36 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v36 -= 2;
      }
    }
    goto LABEL_36;
  }
  unsigned int v21 = objc_opt_new();
  int v28 = *(_DWORD *)(a2 + 36);
  unint64_t v29 = ((unint64_t)*(unsigned int *)(a2 + 16) >> 2) & 7;
  if ((v28 - 38) < 6 || WebGPU::Texture::isCompressedFormat(v28)) {
    v29 |= 0x10uLL;
  }
  [v21 setUsage:v29];
  int v30 = *(_DWORD *)(a2 + 20);
  if (v30 > 1)
  {
    if (v30 != 2)
    {
      if (v30 == 0x7FFFFFFF)
      {
LABEL_36:
        uint64_t v37 = (WebGPU::Texture *)WTF::fastMalloc((WTF *)0x80);
        WebGPU::Texture::Texture(v37, (atomic_uchar *volatile *)v3);
        goto LABEL_37;
      }
      goto LABEL_52;
    }
    [v21 setWidth:*(unsigned int *)(a2 + 24)];
    [v21 setHeight:*(unsigned int *)(a2 + 28)];
    [v21 setDepth:*(unsigned int *)(a2 + 32)];
    uint64_t v39 = 7;
LABEL_51:
    [v21 setTextureType:v39];
    goto LABEL_52;
  }
  if (!v30)
  {
    [v21 setWidth:*(unsigned int *)(a2 + 24)];
    if (*(_DWORD *)(a2 + 32) >= 2u)
    {
      [v21 setTextureType:1];
      [v21 setArrayLength:*(unsigned int *)(a2 + 32)];
      goto LABEL_52;
    }
    uint64_t v39 = 0;
    goto LABEL_51;
  }
  if (v30 == 1)
  {
    [v21 setWidth:*(unsigned int *)(a2 + 24)];
    [v21 setHeight:*(unsigned int *)(a2 + 28)];
    if (*(_DWORD *)(a2 + 32) < 2u)
    {
      BOOL v31 = *(_DWORD *)(a2 + 44) > 1u;
      uint64_t v32 = 2;
      uint64_t v33 = 4;
    }
    else
    {
      objc_msgSend(v21, "setArrayLength:");
      BOOL v31 = *(_DWORD *)(a2 + 44) > 1u;
      uint64_t v32 = 3;
      uint64_t v33 = 8;
    }
    if (v31) {
      uint64_t v39 = v33;
    }
    else {
      uint64_t v39 = v32;
    }
    goto LABEL_51;
  }
LABEL_52:
  [v21 setPixelFormat:WebGPU::Texture::pixelFormat(*(_DWORD *)(a2 + 36))];
  if ([v21 pixelFormat])
  {
    [v21 setMipmapLevelCount:*(unsigned int *)(a2 + 40)];
    [v21 setSampleCount:*(unsigned int *)(a2 + 44)];
    if (([*(id *)(v3 + 8) hasUnifiedMemory] & (*(unsigned char *)(v3 + 256) != 0)) != 0) {
      uint64_t v40 = 0;
    }
    else {
      uint64_t v40 = 2;
    }
    [v21 setStorageMode:v40];
    uint64_t v41 = (void *)[*(id *)(v3 + 8) newTextureWithDescriptor:v21];
    if (v41)
    {
      WebGPU::Device::setOwnerWithIdentity(v3, v41);
      if (*(void *)(a2 + 8)) {
        strlen(*(const char **)(a2 + 8));
      }
      WTF::String::fromUTF8();
      if (v56) {
        long long v52 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        long long v52 = &stru_1ECABF938;
      }
      [v41 setLabel:v52];

      if (v56)
      {
        if (*v56 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v56 -= 2;
        }
      }
      id v53 = v41;
      uint64_t v54 = WTF::fastMalloc((WTF *)0x80);
      WebGPU::Texture::Texture(v54, v53, a2, (uint64_t *)&v58, (atomic_uchar *volatile *)v3);
      *a3 = v54;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v57 = (_DWORD *)v61;
      WebGPU::Device::generateAnOutOfMemoryError(v3, (uint64_t *)&v57);
      long long v48 = v57;
      uint64_t v57 = 0;
      if (v48)
      {
        if (*v48 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v48 -= 2;
        }
      }
      unsigned int v55 = (WebGPU::Texture *)WTF::fastMalloc((WTF *)0x80);
      WebGPU::Texture::Texture(v55, (atomic_uchar *volatile *)v3);
      *a3 = v55;
    }
    goto LABEL_38;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v42 = v61;
  uint64_t v57 = (_DWORD *)v61;
  uint64_t v43 = *(void *)(v3 + 32);
  uint64_t v44 = 32 * *(unsigned int *)(v3 + 44);
  uint64_t v45 = v43 + v44;
  while (v44)
  {
    int v46 = *(_DWORD *)(v45 - 8);
    v45 -= 32;
    v44 -= 32;
    if (!v46)
    {
      uint64_t v47 = v43 + v44;
      if (!*(unsigned char *)(v47 + 16))
      {
        uint64_t v57 = 0;
        *(_DWORD *)uint64_t v47 = 1;
        *(void *)(v47 + 8) = v42;
        *(unsigned char *)(v47 + 16) = 1;
      }
      goto LABEL_70;
    }
  }
  uint64_t v49 = *(void *)(v3 + 24);
  if (v49)
  {
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(void *)v49 + 16))(v49, 1, &v57);
    uint64_t v50 = *(void *)(v3 + 24);
    *(void *)(v3 + 24) = 0;
    if (v50) {
      (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
    }
  }
LABEL_70:
  uint64_t v51 = v57;
  uint64_t v57 = 0;
  if (v51)
  {
    if (*v51 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v51 -= 2;
    }
  }
  uint64_t v37 = (WebGPU::Texture *)WTF::fastMalloc((WTF *)0x80);
  WebGPU::Texture::Texture(v37, (atomic_uchar *volatile *)v3);
LABEL_37:
  *a3 = v37;
LABEL_38:

  uint64_t result = v58;
  if (v58) {
    return (WebGPU::Texture *)WTF::fastFree(v58, v38);
  }
  return result;
}

void sub_1825346B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11, WTF *a12)
{
  if (a11)
  {
    if (*a11 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *a11 -= 2;
    }
  }

  if (a12) {
    WTF::fastFree(a12, v14);
  }
  _Unwind_Resume(a1);
}

uint64_t WebGPU::Texture::Texture(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, atomic_uchar *volatile *a5)
{
  id v9 = a2;
  int v10 = 1;
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  id v11 = v9;
  char v12 = 0;
  *(void *)(a1 + 16) = v11;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a3 + 24);
  long long v13 = *(_OWORD *)(a3 + 28);
  *((void *)&v13 + 1) = *(void *)(a3 + 40);
  *(_OWORD *)(a1 + 28) = v13;
  int v14 = *(_DWORD *)(a3 + 36);
  int v16 = *(_DWORD *)(a3 + 16);
  int v15 = *(_DWORD *)(a3 + 20);
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 44) = v15;
  *(_DWORD *)(a1 + 48) = v14;
  *(_DWORD *)(a1 + 52) = v16;
  *(void *)(a1 + 64) = 0;
  uint64_t v17 = *a4;
  *a4 = 0;
  *(void *)(a1 + 56) = v17;
  LODWORD(v17) = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = 0;
  *(_DWORD *)(a1 + 64) = v17;
  LODWORD(v17) = *((_DWORD *)a4 + 3);
  *((_DWORD *)a4 + 3) = 0;
  *(_DWORD *)(a1 + 68) = v17;
  atomic_uchar *volatile v18 = *a5;
  atomic_compare_exchange_strong_explicit(*a5, (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
  if (v12) {
    MEMORY[0x18530AEA0](v18);
  }
  ++*((void *)v18 + 1);
  atomic_compare_exchange_strong_explicit(v18, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v18);
  }
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 72) = a5;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 104) = 0;

  return a1;
}

void sub_182534908(_Unwind_Exception *a1, void *a2)
{
  uint64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v2 + 56) = 0;
    *(_DWORD *)(v2 + 64) = 0;
    WTF::fastFree(v7, a2);
  }

  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v4, v8);
  _Unwind_Resume(a1);
}

WebGPU::Texture *WebGPU::Texture::Texture(WebGPU::Texture *this, atomic_uchar *volatile *a2)
{
  char v4 = 0;
  int v5 = 1;
  *(_DWORD *)this = 1;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0x100000000;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  atomic_uchar *volatile v6 = *a2;
  atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x18530AEA0](v6);
  }
  ++*((void *)v6 + 1);
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 9) = a2;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((_WORD *)this + 52) = 0;
  return this;
}

void sub_1825349EC(_Unwind_Exception *a1, void *a2)
{
  int v5 = *(WTF **)(v2 + 56);
  if (v5)
  {
    *(void *)(v2 + 56) = 0;
    *(_DWORD *)(v2 + 64) = 0;
    WTF::fastFree(v5, a2);
  }

  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v3, v6);
  _Unwind_Resume(a1);
}

void WebGPU::Texture::~Texture(WebGPU::Texture *this, void *a2)
{
  uint64_t v3 = *((void *)this + 14);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      int v5 = (unsigned int **)*((void *)this + 14);
      do
      {
        atomic_uchar *volatile v6 = *v5;
        if (*v5 != (unsigned int *)-1)
        {
          WTF *v5 = 0;
          if (v6)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v6);
              WTF::fastFree((WTF *)v6, a2);
            }
          }
        }
        ++v5;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v7 = *((unsigned int *)this + 25);
  if (v7)
  {
    unint64_t v8 = (atomic_uint **)*((void *)this + 11);
    uint64_t v9 = 8 * v7;
    do
    {
      while (1)
      {
        int v10 = *v8;
        *unint64_t v8 = 0;
        if (v10)
        {
          if (atomic_fetch_add(v10, 0xFFFFFFFF) == 1) {
            break;
          }
        }
        ++v8;
        v9 -= 8;
        if (!v9) {
          goto LABEL_17;
        }
      }
      atomic_store(1u, (unsigned int *)v10);
      WTF::fastFree((WTF *)v10, a2);
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
LABEL_17:
  id v11 = (WTF *)*((void *)this + 11);
  if (v11)
  {
    *((void *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v11, a2);
  }
  uint64_t v12 = *((void *)this + 10);
  if (v12)
  {
    uint64_t v13 = *(unsigned int *)(v12 - 4);
    if (v13)
    {
      int v14 = (void *)(v12 + 8);
      do
      {
        if (*((_DWORD *)v14 - 2) != -2 && *v14) {
          WTF::fastFree((WTF *)(*v14 - 16), a2);
        }
        v14 += 2;
        --v13;
      }
      while (v13);
    }
    WTF::fastFree((WTF *)(v12 - 16), a2);
  }
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)this + 9, a2);
  int v16 = (WTF *)*((void *)this + 7);
  if (v16)
  {
    *((void *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v16, v15);
  }

  uint64_t v18 = *((void *)this + 1);
  if (v18)
  {
    *(void *)(v18 + 8) = 0;
    int v19 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v19)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v19);
        WTF::fastFree((WTF *)v19, v17);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

uint64_t WebGPU::Texture::recreateIfNeeded(uint64_t this)
{
  if (*(unsigned char *)(this + 105))
  {
    *(unsigned char *)(this + 104) = 0;
  }
  else
  {
    this = 2987;
    __break(0xC471u);
  }
  return this;
}

uint64_t WebGPU::Texture::waitForCommandBufferCompletion(WebGPU::Texture *this)
{
  uint64_t v2 = *((void *)this + 14);
  if (!v2)
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
LABEL_10:
    atomic_uchar *volatile v6 = v4;
    uint64_t v4 = (uint64_t *)(v2 + 8 * v3);
    if (!v2)
    {
      unint64_t v8 = 0;
      if (v6) {
        goto LABEL_17;
      }
      goto LABEL_24;
    }
    goto LABEL_8;
  }
  uint64_t v3 = *(unsigned int *)(v2 - 4);
  uint64_t v4 = (uint64_t *)(v2 + 8 * v3);
  if (!*(_DWORD *)(v2 - 12)) {
    goto LABEL_10;
  }
  if (v3)
  {
    uint64_t v5 = 8 * v3;
    atomic_uchar *volatile v6 = (uint64_t *)*((void *)this + 14);
    while ((unint64_t)(*v6 + 1) <= 1)
    {
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        atomic_uchar *volatile v6 = v4;
        break;
      }
    }
LABEL_8:
    uint64_t v7 = *(unsigned int *)(v2 - 4);
    goto LABEL_14;
  }
  uint64_t v7 = 0;
  atomic_uchar *volatile v6 = (uint64_t *)*((void *)this + 14);
LABEL_14:
  unint64_t v8 = (uint64_t *)(v2 + 8 * v7);
  if (v8 != v6)
  {
LABEL_17:
    while (!*(void *)(*v6 + 8))
    {
      uint64_t v9 = v6 + 1;
      atomic_uchar *volatile v6 = v4;
      if (v9 != v4)
      {
        atomic_uchar *volatile v6 = v9;
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          if (++v6 == v4)
          {
            atomic_uchar *volatile v6 = v4;
            break;
          }
        }
      }
      if (v6 == v8)
      {
        atomic_uchar *volatile v6 = v8;
        break;
      }
    }
  }
LABEL_24:
  if (v2) {
    int v10 = (uint64_t *)(v2 + 8 * *(unsigned int *)(v2 - 4));
  }
  else {
    int v10 = 0;
  }
  uint64_t v11 = 1;
  while (v6 != v10)
  {
    uint64_t v13 = *v6;
    uint64_t v12 = v6 + 1;
    int v14 = WebGPU::CommandEncoder::waitForCommandBufferCompletion(*(WebGPU::CommandEncoder **)(v13 + 8));
    int v15 = v4;
    if (v12 != v4)
    {
      int v15 = v12;
      while ((unint64_t)(*v15 + 1) <= 1)
      {
        if (++v15 == v4)
        {
          int v15 = v4;
          break;
        }
      }
    }
    atomic_uchar *volatile v6 = v8;
    if (v15 != v8)
    {
      atomic_uchar *volatile v6 = v15;
      if (!*(void *)(*v15 + 8))
      {
        while (1)
        {
          int v16 = v6 + 1;
          atomic_uchar *volatile v6 = v4;
          if (v16 != v4)
          {
            atomic_uchar *volatile v6 = v16;
            while ((unint64_t)(*v6 + 1) <= 1)
            {
              if (++v6 == v4)
              {
                atomic_uchar *volatile v6 = v4;
                break;
              }
            }
          }
          if (v6 == v8) {
            break;
          }
          if (*(void *)(*v6 + 8)) {
            goto LABEL_29;
          }
        }
        atomic_uchar *volatile v6 = v8;
      }
    }
LABEL_29:
    uint64_t v11 = v14 & v11;
    ++*((_DWORD *)this + 30);
  }
  return v11;
}

const char *WebGPU::Texture::formatToString()
{
  uint64_t result = "undefined";
  switch("undefined")
  {
    case 0u:
      return result;
    case 1u:
      uint64_t result = "r8unorm";
      break;
    case 2u:
      uint64_t result = "r8snorm";
      break;
    case 3u:
      uint64_t result = "r8uint";
      break;
    case 4u:
      uint64_t result = "r8sint";
      break;
    case 5u:
      uint64_t result = "r16uint";
      break;
    case 6u:
      uint64_t result = "r16sint";
      break;
    case 7u:
      uint64_t result = "r16float";
      break;
    case 8u:
      uint64_t result = "rg8unorm";
      break;
    case 9u:
      uint64_t result = "rg8snorm";
      break;
    case 0xAu:
      uint64_t result = "rg8uint";
      break;
    case 0xBu:
      uint64_t result = "rg8sint";
      break;
    case 0xCu:
      uint64_t result = "r32float";
      break;
    case 0xDu:
      uint64_t result = "r32uint";
      break;
    case 0xEu:
      uint64_t result = "r32sint";
      break;
    case 0xFu:
      uint64_t result = "rg16uint";
      break;
    case 0x10u:
      uint64_t result = "rg16sint";
      break;
    case 0x11u:
      uint64_t result = "rg16float";
      break;
    case 0x12u:
      uint64_t result = "rgba8unorm";
      break;
    case 0x13u:
      uint64_t result = "rgba8unorm-srgb";
      break;
    case 0x14u:
      uint64_t result = "rgba8snorm";
      break;
    case 0x15u:
      uint64_t result = "rgba8uint";
      break;
    case 0x16u:
      uint64_t result = "rgba8sint";
      break;
    case 0x17u:
      uint64_t result = "bgra8unorm";
      break;
    case 0x18u:
      uint64_t result = "bgra8unorm-srgb";
      break;
    case 0x19u:
      uint64_t result = "rgb10a2uint";
      break;
    case 0x1Au:
      uint64_t result = "rgb10a2unorm";
      break;
    case 0x1Bu:
      uint64_t result = "rg11b10ufloat";
      break;
    case 0x1Cu:
      uint64_t result = "rgb9e5ufloat";
      break;
    case 0x1Du:
      uint64_t result = "rg32float";
      break;
    case 0x1Eu:
      uint64_t result = "rg32uint";
      break;
    case 0x1Fu:
      uint64_t result = "rg32sint";
      break;
    case 0x20u:
      uint64_t result = "rgba16uint";
      break;
    case 0x21u:
      uint64_t result = "rgba16sint";
      break;
    case 0x22u:
      uint64_t result = "rgba16float";
      break;
    case 0x23u:
      uint64_t result = "rgba32float";
      break;
    case 0x24u:
      uint64_t result = "rgba32uint";
      break;
    case 0x25u:
      uint64_t result = "rgba32sint";
      break;
    case 0x26u:
      uint64_t result = "stencil8";
      break;
    case 0x27u:
      uint64_t result = "depth16unorm";
      break;
    case 0x28u:
      uint64_t result = "depth24plus";
      break;
    case 0x29u:
      uint64_t result = "depth24plus-stencil8";
      break;
    case 0x2Au:
      uint64_t result = "depth32float";
      break;
    case 0x2Bu:
      uint64_t result = "depth32float-stencil8";
      break;
    case 0x2Cu:
      uint64_t result = "bc1-rgba-unorm";
      break;
    case 0x2Du:
      uint64_t result = "bc1-rgba-unorm-srgb";
      break;
    case 0x2Eu:
      uint64_t result = "bc2-rgba-unorm";
      break;
    case 0x2Fu:
      uint64_t result = "bc2-rgba-unorm-srgb";
      break;
    case 0x30u:
      uint64_t result = "bc3-rgba-unorm";
      break;
    case 0x31u:
      uint64_t result = "bc3-rgba-unorm-srgb";
      break;
    case 0x32u:
      uint64_t result = "bc4-r-unorm";
      break;
    case 0x33u:
      uint64_t result = "bc4-r-snorm";
      break;
    case 0x34u:
      uint64_t result = "bc5-rg-unorm";
      break;
    case 0x35u:
      uint64_t result = "bc5-rg-snorm";
      break;
    case 0x36u:
      uint64_t result = "bc6h-rgb-ufloat";
      break;
    case 0x37u:
      uint64_t result = "bc6h-rgb-float";
      break;
    case 0x38u:
      uint64_t result = "bc7-rgba-unorm";
      break;
    case 0x39u:
      uint64_t result = "bc7-rgba-unorm-srgb";
      break;
    case 0x3Au:
      uint64_t result = "etc2-rgb8unorm";
      break;
    case 0x3Bu:
      uint64_t result = "etc2-rgb8unorm-srgb";
      break;
    case 0x3Cu:
      uint64_t result = "etc2-rgb8a1unorm";
      break;
    case 0x3Du:
      uint64_t result = "etc2-rgb8a1unorm-srgb";
      break;
    case 0x3Eu:
      uint64_t result = "etc2-rgba8unorm";
      break;
    case 0x3Fu:
      uint64_t result = "etc2-rgba8unorm-srgb";
      break;
    case 0x40u:
      uint64_t result = "eac-r11unorm";
      break;
    case 0x41u:
      uint64_t result = "eac-r11snorm";
      break;
    case 0x42u:
      uint64_t result = "eac-rg11unorm";
      break;
    case 0x43u:
      uint64_t result = "eac-rg11snorm";
      break;
    case 0x44u:
      uint64_t result = "astc-4x4-unorm";
      break;
    case 0x45u:
      uint64_t result = "astc-4x4-unorm-srgb";
      break;
    case 0x46u:
      uint64_t result = "astc-5x4-unorm";
      break;
    case 0x47u:
      uint64_t result = "astc-5x4-unorm-srgb";
      break;
    case 0x48u:
      uint64_t result = "astc-5x5-unorm";
      break;
    case 0x49u:
      uint64_t result = "astc-5x5-unorm-srgb";
      break;
    case 0x4Au:
      uint64_t result = "astc-6x5-unorm";
      break;
    case 0x4Bu:
      uint64_t result = "astc-6x5-unorm-srgb";
      break;
    case 0x4Cu:
      uint64_t result = "astc-6x6-unorm";
      break;
    case 0x4Du:
      uint64_t result = "astc-6x6-unorm-srgb";
      break;
    case 0x4Eu:
      uint64_t result = "astc-8x5-unorm";
      break;
    case 0x4Fu:
      uint64_t result = "astc-8x5-unorm-srgb";
      break;
    case 0x50u:
      uint64_t result = "astc-8x6-unorm";
      break;
    case 0x51u:
      uint64_t result = "astc-8x6-unorm-srgb";
      break;
    case 0x52u:
      uint64_t result = "astc-8x8-unorm";
      break;
    case 0x53u:
      uint64_t result = "astc-8x8-unorm-srgb";
      break;
    case 0x54u:
      uint64_t result = "astc-10x5-unorm";
      break;
    case 0x55u:
      uint64_t result = "astc-10x5-unorm-srgb";
      break;
    case 0x56u:
      uint64_t result = "astc-10x6-unorm";
      break;
    case 0x57u:
      uint64_t result = "astc-10x6-unorm-srgb";
      break;
    case 0x58u:
      uint64_t result = "astc-10x8-unorm";
      break;
    case 0x59u:
      uint64_t result = "astc-10x8-unorm-srgb";
      break;
    case 0x5Au:
      uint64_t result = "astc-10x10-unorm";
      break;
    case 0x5Bu:
      uint64_t result = "astc-10x10-unorm-srgb";
      break;
    case 0x5Cu:
      uint64_t result = "astc-12x10-unorm";
      break;
    case 0x5Du:
      uint64_t result = "astc-12x10-unorm-srgb";
      break;
    case 0x5Eu:
      uint64_t result = "astc-12x12-unorm";
      break;
    case 0x5Fu:
      uint64_t result = "astc-12x12-unorm-srgb";
      break;
    default:
      uint64_t result = "invalid format";
      break;
  }
  return result;
}

uint64_t WebGPU::Texture::logicalMiplevelSpecificTextureExtent(uint32x2_t *this, char a2)
{
  __int32 v2 = this[5].i32[1];
  if (v2 == 2 || v2 == 1) {
    return (uint64_t)vmax_u32(vshl_u32(this[3], (uint32x2_t)vneg_s32(vdup_n_s32(a2))), (uint32x2_t)0x100000001);
  }
  if (v2) {
    return 0;
  }
  if ((unsigned __int32)this[3].i32[0] >> a2 <= 1) {
    unsigned int v3 = 1;
  }
  else {
    unsigned int v3 = (unsigned __int32)this[3].i32[0] >> a2;
  }
  return v3 | 0x100000000;
}

unint64_t WebGPU::Texture::physicalTextureExtent(int a1, int a2, unint64_t a3)
{
  unsigned int v3 = a3;
  unint64_t v5 = HIDWORD(a3);
  if (a1 == 2 || a1 == 1)
  {
    unsigned int v10 = WebGPU::Texture::texelBlockWidth(a2);
    if (v3 % v10) {
      unsigned int v11 = v10 - v3 % v10;
    }
    else {
      unsigned int v11 = 0;
    }
    unsigned int v8 = v11 + v3;
    unsigned int v12 = WebGPU::Texture::texelBlockHeight(a2);
    if (v5 % v12) {
      int v13 = v12 - v5 % v12;
    }
    else {
      int v13 = 0;
    }
    uint64_t v9 = (v13 + v5);
  }
  else if (a1)
  {
    unsigned int v8 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    unsigned int v6 = WebGPU::Texture::texelBlockWidth(a2);
    if (v3 % v6) {
      unsigned int v7 = v6 - v3 % v6;
    }
    else {
      unsigned int v7 = 0;
    }
    unsigned int v8 = v7 + v3;
    uint64_t v9 = 1;
  }
  return v8 | (unint64_t)(v9 << 32);
}

__CFString *WebGPU::Texture::errorValidatingImageCopyTexture(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = *(uint32x2_t **)(a1 + 8);
  int v5 = v4[6].i32[0];
  unsigned int v6 = WebGPU::Texture::texelBlockWidth(v5);
  unsigned int v7 = WebGPU::Texture::texelBlockHeight(v5);
  if (v4[13].i8[0] || *(void *)&v4[2])
  {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
    if (v8 >= v4[4].i32[1])
    {
      uint64_t v9 = @"imageCopyTexture mip level is greater than or equal to the mipLevelCount in the texture";
    }
    else if (*(_DWORD *)(a1 + 20) % v6)
    {
      uint64_t v9 = @"imageCopyTexture.origin.x is not a multiple of the texture blockWidth";
    }
    else if (*(_DWORD *)(a1 + 24) % v7)
    {
      uint64_t v9 = @"imageCopyTexture.origin.y is not a multiple of the texture blockHeight";
    }
    else if ((v5 - 38) >= 6 && v4[5].i32[0] < 2u)
    {
      uint64_t v9 = 0;
    }
    else
    {
      int v10 = v4[5].i32[1];
      if (v10 == 2 || v10 == 1)
      {
        unint64_t v13 = (unint64_t)vmax_u32(vshl_u32(v4[3], (uint32x2_t)vneg_s32(vdup_n_s32(v8))), (uint32x2_t)0x100000001);
      }
      else if (v10)
      {
        unint64_t v13 = 0;
      }
      else
      {
        unsigned int v11 = (unsigned __int32)v4[3].i32[0] >> v8;
        if (v11 <= 1) {
          unsigned int v12 = 1;
        }
        else {
          unsigned int v12 = v11;
        }
        unint64_t v13 = v12 | 0x100000000;
      }
      unint64_t v14 = WebGPU::Texture::physicalTextureExtent(v10, v5, v13);
      uint64_t v16 = *a2;
      uint64_t v17 = a2[1];
      if (v16 != v14 || (uint64_t v9 = 0, v17 >= 2) && v17 != HIDWORD(v14))
      {
        objc_msgSend(NSString, "stringWithFormat:", @"subresourceSize.width(%u) != copySize.width(%u) || subresourceSize.height(%u) != copySize.height(%u) || subresourceSize.depthOrArrayLayers(%u) != copySize.depthOrArrayLayers(%u)", v14, v16, HIDWORD(v14), v17, v15, a2[2]);
        uint64_t v9 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
    }
  }
  else
  {
    uint64_t v9 = @"imageCopyTexture is not valid";
  }
  return v9;
}

unint64_t WebGPU::Texture::refersToSingleAspect(unsigned int a1, int a2)
{
  if (a2 > 1)
  {
    if (a2 == 2)
    {
      if (a1 - 39 > 4) {
        return 0;
      }
    }
    else if (a2 == 0x7FFFFFFF)
    {
      return 0;
    }
    return 1;
  }
  if (!a2) {
    return ((a1 - 41) & 0xFFFFFFFD) != 0;
  }
  if (a2 != 1) {
    return 1;
  }
  if (a1 >= 0x2C) {
    return 0;
  }
  else {
    return (0xA4000000000uLL >> a1) & 1;
  }
}

id WebGPU::Texture::errorValidatingTextureCopyRange(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = *(uint32x2_t **)(a1 + 8);
  int v5 = v4[6].i32[0];
  uint64_t v6 = WebGPU::Texture::texelBlockWidth(v5);
  uint64_t v7 = WebGPU::Texture::texelBlockHeight(v5);
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  int v9 = v4[5].i32[1];
  if (v9 == 2 || v9 == 1)
  {
    unint64_t v12 = (unint64_t)vmax_u32(vshl_u32(v4[3], (uint32x2_t)vneg_s32(vdup_n_s32(v8))), (uint32x2_t)0x100000001);
  }
  else if (v9)
  {
    unint64_t v12 = 0;
  }
  else
  {
    unsigned int v10 = (unsigned __int32)v4[3].i32[0] >> v8;
    if (v10 <= 1) {
      unsigned int v11 = 1;
    }
    else {
      unsigned int v11 = v10;
    }
    unint64_t v12 = v11 | 0x100000000;
  }
  unint64_t v13 = WebGPU::Texture::physicalTextureExtent(v9, v5, v12);
  int v15 = *(_DWORD *)(a1 + 20);
  BOOL v16 = __CFADD__(v15, *a2);
  uint64_t v17 = v15 + *a2;
  if (v16)
  {
    uint64_t v17 = 0xFFFFFFFFLL;
LABEL_14:
    objc_msgSend(NSString, "stringWithFormat:", @"endX(%u) > subresourceSize.width(%u)", v17, v13);
    uint64_t v18 = LABEL_15:;
    goto LABEL_16;
  }
  if (v17 > v13) {
    goto LABEL_14;
  }
  int v20 = *(_DWORD *)(a1 + 24);
  unsigned int v21 = a2[1];
  BOOL v16 = __CFADD__(v20, v21);
  uint64_t v22 = v20 + v21;
  if (v16)
  {
    uint64_t v22 = 0xFFFFFFFFLL;
LABEL_23:
    objc_msgSend(NSString, "stringWithFormat:", @"endY(%u) > subresourceSize.height(%u)", v22, HIDWORD(v13));
    goto LABEL_15;
  }
  if (v22 > HIDWORD(v13)) {
    goto LABEL_23;
  }
  int v23 = *(_DWORD *)(a1 + 28);
  unsigned int v24 = a2[2];
  BOOL v16 = __CFADD__(v23, v24);
  uint64_t v25 = v23 + v24;
  if (v16)
  {
    uint64_t v25 = 0xFFFFFFFFLL;
LABEL_28:
    objc_msgSend(NSString, "stringWithFormat:", @"endZ(%u) > subresourceSize.depthOrArrayLayers(%u)", v25, v14);
    goto LABEL_15;
  }
  if (v25 > v14) {
    goto LABEL_28;
  }
  if (*a2 % v6)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"copySize.width(%u) is not divisible by blockWidth(%u)", *a2, v6);
    goto LABEL_15;
  }
  if (v21 % v7)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"copySize.height(%u) is not divisible by blockHeight(%u)", a2[1], v7);
    goto LABEL_15;
  }
  uint64_t v18 = 0;
LABEL_16:
  return v18;
}

BOOL WebGPU::Texture::validateLinearTextureData(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  unsigned int v10 = WebGPU::Texture::texelBlockWidth(a3);
  unsigned int v11 = WebGPU::Texture::texelBlockHeight(a3);
  WebGPU::Texture::texelBlockSize(a3, (int *)&v28);
  if (a4 % v10) {
    return 0;
  }
  uint64_t v12 = HIDWORD(a4) / v11;
  if (HIDWORD(a4) % v11) {
    return 0;
  }
  unint64_t v13 = *(unsigned int *)(a1 + 16);
  if (v12 >= 2 && v13 == -1) {
    return 0;
  }
  unint64_t v15 = v28 * (unint64_t)(a4 / v10);
  if (a5 < 2)
  {
    if (v13 != -1 && v15 > v13) {
      return 0;
    }
    unsigned int v22 = *(_DWORD *)(a1 + 20);
    if (v22 != -1 && v22 < v12) {
      return 0;
    }
    unint64_t v21 = 0;
    if (!a5)
    {
LABEL_30:
      uint64_t v26 = *(void *)(a1 + 8);
      BOOL v24 = __CFADD__(v26, v21);
      unint64_t v27 = v26 + v21;
      if (!v24) {
        return v27 <= a2;
      }
      return 0;
    }
    BOOL v20 = 0;
LABEL_21:
    if (v12 >= 2)
    {
      uint64_t v23 = (v12 - 1) * v13;
      BOOL v24 = __CFADD__(v21, v23);
      unint64_t v25 = v21 + v23;
      if (v24) {
        BOOL v20 = 1;
      }
      if (!v24) {
        unint64_t v21 = v25;
      }
    }
    if (v11 <= HIDWORD(a4))
    {
      BOOL v24 = __CFADD__(v21, v15);
      v21 += v15;
      if (v24) {
        return 0;
      }
    }
    if (v20) {
      return 0;
    }
    goto LABEL_30;
  }
  BOOL result = 0;
  if (v13 != -1)
  {
    unsigned int v16 = *(_DWORD *)(a1 + 20);
    if (v16 != -1 && v15 <= v13 && v16 >= v12)
    {
      unint64_t v17 = a5 - 1;
      unint64_t v18 = v16 * (unint64_t)v13;
      BOOL v19 = (v18 * (unsigned __int128)v17) >> 64 == 0;
      BOOL v20 = !is_mul_ok(v18, v17);
      unint64_t v21 = v18 * v17;
      if (!v19) {
        unint64_t v21 = 0;
      }
      goto LABEL_21;
    }
  }
  return result;
}

BOOL WebGPU::Texture::previouslyCleared(WebGPU::Texture *this, int a2, int a3)
{
  if (*((unsigned char *)this + 104)) {
    return 1;
  }
  uint64_t v4 = *((void *)this + 10);
  if (!v4) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v4 - 8);
  unsigned int v6 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  unsigned int v7 = (v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11);
  uint64_t v8 = v5 & (v7 ^ HIWORD(v7));
  int v9 = *(_DWORD *)(v4 + 16 * v8);
  if (v9 != a2)
  {
    int v10 = 1;
    while (v9 != -1)
    {
      uint64_t v8 = (v8 + v10) & v5;
      int v9 = *(_DWORD *)(v4 + 16 * v8);
      ++v10;
      if (v9 == a2) {
        goto LABEL_8;
      }
    }
    return 0;
  }
LABEL_8:
  if (v8 == *(_DWORD *)(v4 - 4)) {
    return 0;
  }
  uint64_t v11 = *(void *)(v4 + 16 * v8 + 8);
  if (!v11) {
    return 0;
  }
  int v12 = *(_DWORD *)(v11 - 8);
  unsigned int v13 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
  unsigned int v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
  unsigned int v15 = v12 & (v14 ^ HIWORD(v14));
  int v16 = *(_DWORD *)(v11 + 4 * v15);
  if (v16 == a3) {
    return 1;
  }
  int v17 = 1;
  do
  {
    BOOL v18 = v16 != -1;
    if (v16 == -1) {
      break;
    }
    unsigned int v15 = (v15 + v17) & v12;
    int v16 = *(_DWORD *)(v11 + 4 * v15);
    ++v17;
  }
  while (v16 != a3);
  return v18;
}

uint64_t *WebGPU::Texture::setPreviouslyCleared(uint64_t *this, int a2, int a3, char a4)
{
  int v66 = a3;
  unsigned int v6 = this + 10;
  uint64_t v5 = this[10];
  if (a4)
  {
    if (v5)
    {
      unsigned int v7 = *(_DWORD *)(v5 - 8);
      unsigned int v8 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
      unsigned int v9 = (v8 ^ (v8 >> 6)) + ~((v8 ^ (v8 >> 6)) << 11);
      uint64_t v10 = v7 & (v9 ^ HIWORD(v9));
      int v11 = *(_DWORD *)(v5 + 16 * v10);
      if (v11 == a2)
      {
LABEL_7:
        if (v10 != *(_DWORD *)(v5 - 4)) {
          return WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add((uint64_t *)(v5 + 16 * v10 + 8), &v66, (uint64_t)v65);
        }
      }
      else
      {
        int v12 = 1;
        while (v11 != -1)
        {
          uint64_t v10 = (v10 + v12) & v7;
          int v11 = *(_DWORD *)(v5 + 16 * v10);
          ++v12;
          if (v11 == a2) {
            goto LABEL_7;
          }
        }
      }
    }
    long long v64 = 0;
    this = WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add((uint64_t *)&v64, &v66, (uint64_t)v65);
    uint64_t v14 = *v6;
    if (*v6
      || (this = (uint64_t *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v6, 8u), (uint64_t v14 = *v6) != 0))
    {
      int v15 = *(_DWORD *)(v14 - 8);
    }
    else
    {
      int v15 = 0;
    }
    unsigned int v16 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    unsigned int v17 = (v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11);
    unsigned int v18 = v15 & (v17 ^ HIWORD(v17));
    uint64_t v19 = v14 + 16 * v18;
    int v20 = *(_DWORD *)v19;
    if (*(_DWORD *)v19 != -1)
    {
      uint64_t v21 = 0;
      int v22 = 1;
      while (v20 != a2)
      {
        if (v20 == -2) {
          uint64_t v21 = v19;
        }
        unsigned int v18 = (v18 + v22) & v15;
        uint64_t v19 = v14 + 16 * v18;
        int v20 = *(_DWORD *)v19;
        ++v22;
        if (*(_DWORD *)v19 == -1)
        {
          if (v21)
          {
            *(_DWORD *)uint64_t v21 = -1;
            *(void *)(v21 + 8) = 0;
            --*(_DWORD *)(*v6 - 16);
            uint64_t v19 = v21;
          }
          goto LABEL_19;
        }
      }
      goto LABEL_45;
    }
LABEL_19:
    *(_DWORD *)uint64_t v19 = a2;
    if (!v64 || (uint64_t v23 = *(v64 - 3), !v23))
    {
      uint64_t v33 = 0;
      goto LABEL_32;
    }
    unsigned int v24 = (v23 - 1) | ((v23 - 1) >> 1) | (((v23 - 1) | ((v23 - 1) >> 1)) >> 2);
    unsigned int v25 = v24 | (v24 >> 4) | ((v24 | (v24 >> 4)) >> 8);
    unint64_t v26 = (v25 | HIWORD(v25)) + 1;
    if (v26 > 0x400)
    {
      if (v26 > 2 * v23) {
        goto LABEL_62;
      }
    }
    else if (3 * v26 > 4 * v23)
    {
LABEL_60:
      if ((double)v26 * 0.604166667 > (double)v23)
      {
LABEL_64:
        if (v26 <= 8) {
          unsigned int v47 = 8;
        }
        else {
          unsigned int v47 = v26;
        }
        long long v48 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v47 + 16));
        uint64_t v33 = v48 + 4;
        this = (uint64_t *)memset(v48 + 4, 255, 4 * v47);
        v48[2] = v47 - 1;
        v48[3] = v47;
        *long long v48 = 0;
        v48[1] = v23;
        uint64_t v49 = (uint64_t)v64;
        if (v64)
        {
          uint64_t v50 = *(v64 - 1);
          uint64_t v51 = &v64[v50];
          if (!*(v64 - 3))
          {
            long long v52 = &v64[v50];
            uint64_t v51 = v52;
LABEL_76:
            uint64_t v49 = (uint64_t)&v64[*(v64 - 1)];
LABEL_77:
            if ((_DWORD *)v49 != v52)
            {
              do
              {
                int v54 = 0;
                int v55 = *v52;
                unsigned int v56 = 9 * ((v55 + ~(v55 << 15)) ^ ((v55 + ~(v55 << 15)) >> 10));
                unsigned int v57 = ((v56 ^ (v56 >> 6)) + ~((v56 ^ (v56 >> 6)) << 11)) ^ (((v56 ^ (v56 >> 6))
                                                                           + ~((v56 ^ (v56 >> 6)) << 11)) >> 16);
                do
                {
                  uint64_t v58 = v57 & (v47 - 1);
                  unsigned int v57 = ++v54 + v58;
                }
                while (v33[v58] != -1);
                v33[v58] = v55;
                int v59 = v52 + 1;
                long long v52 = v51;
                if (v59 != v51)
                {
                  long long v52 = v59;
                  while (*v52 >= 0xFFFFFFFE)
                  {
                    if (++v52 == v51)
                    {
                      long long v52 = v51;
                      break;
                    }
                  }
                }
              }
              while (v52 != (_DWORD *)v49);
            }
LABEL_32:
            uint64_t v34 = *(void *)(v19 + 8);
            *(void *)(v19 + 8) = v33;
            if (v34) {
              this = (uint64_t *)WTF::fastFree((WTF *)(v34 - 16), v13);
            }
            if (*v6)
            {
              ++*(_DWORD *)(*v6 - 12);
              uint64_t v35 = *v6;
              if (*v6) {
                goto LABEL_36;
              }
            }
            else
            {
              MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
              uint64_t v35 = *v6;
              if (*v6)
              {
LABEL_36:
                uint64_t v36 = (*(_DWORD *)(v35 - 16) + *(_DWORD *)(v35 - 12));
                unint64_t v37 = *(unsigned int *)(v35 - 4);
                if (v37 <= 0x400) {
                  goto LABEL_37;
                }
                goto LABEL_42;
              }
            }
            uint64_t v36 = *(unsigned int *)(v35 - 16);
            unint64_t v37 = *(unsigned int *)(v35 - 4);
            if (v37 <= 0x400)
            {
LABEL_37:
              if (3 * v37 > 4 * v36) {
                goto LABEL_45;
              }
              if (!v37)
              {
                unsigned int v38 = 8;
LABEL_44:
                this = (uint64_t *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v6, v38);
LABEL_45:
                if (v64) {
                  return (uint64_t *)WTF::fastFree((WTF *)(v64 - 4), v13);
                }
                return this;
              }
LABEL_43:
              unsigned int v38 = v37 << (6 * *(_DWORD *)(v35 - 12) >= (2 * v37));
              goto LABEL_44;
            }
LABEL_42:
            if (v37 > 2 * v36) {
              goto LABEL_45;
            }
            goto LABEL_43;
          }
          long long v52 = v64;
          if (v50)
          {
            uint64_t v53 = 4 * v50;
            long long v52 = v64;
            while (*v52 >= 0xFFFFFFFE)
            {
              ++v52;
              v53 -= 4;
              if (!v53)
              {
                long long v52 = v51;
                goto LABEL_76;
              }
            }
          }
        }
        else
        {
          long long v52 = 0;
          uint64_t v51 = 0;
        }
        if (!v64) {
          goto LABEL_77;
        }
        goto LABEL_76;
      }
LABEL_63:
      LODWORD(v26) = 2 * v26;
      goto LABEL_64;
    }
    LODWORD(v26) = 2 * v26;
    if (v26 <= 0x400) {
      goto LABEL_60;
    }
LABEL_62:
    if ((double)v26 * 0.416666667 > (double)v23) {
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  if (!v5) {
    return this;
  }
  unsigned int v27 = *(_DWORD *)(v5 - 8);
  unsigned int v28 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  unsigned int v29 = (v28 ^ (v28 >> 6)) + ~((v28 ^ (v28 >> 6)) << 11);
  uint64_t v30 = v27 & (v29 ^ HIWORD(v29));
  int v31 = *(_DWORD *)(v5 + 16 * v30);
  if (v31 == a2)
  {
LABEL_29:
    if (v30 != *(_DWORD *)(v5 - 4))
    {
      uint64_t v39 = v5 + 16 * v30;
      uint64_t v41 = *(void *)(v39 + 8);
      this = (uint64_t *)(v39 + 8);
      uint64_t v40 = v41;
      if (v41)
      {
        unsigned int v42 = *(_DWORD *)(v40 - 8);
        unsigned int v43 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
        uint64_t v44 = v42 & (((v43 ^ (v43 >> 6)) + ~((v43 ^ (v43 >> 6)) << 11)) ^ (((v43 ^ (v43 >> 6))
                                                                          + ~((v43 ^ (v43 >> 6)) << 11)) >> 16));
        int v45 = *(_DWORD *)(v40 + 4 * v44);
        if (v45 == a3)
        {
LABEL_55:
          if (v44 == *(_DWORD *)(v40 - 4)) {
            return this;
          }
          *(_DWORD *)(v40 + 4 * v44) = -2;
          ++*(_DWORD *)(*this - 16);
          if (*this)
          {
            --*(_DWORD *)(*this - 12);
            uint64_t v60 = *this;
            if (!*this) {
              return this;
            }
          }
          else
          {
            MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
            uint64_t v60 = *this;
            if (!*this) {
              return this;
            }
          }
          unsigned int v61 = 6 * *(_DWORD *)(v60 - 12);
          unsigned int v62 = *(_DWORD *)(v60 - 4);
          if (v61 < v62 && v62 >= 9)
          {
            return (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(this, v62 >> 1, 0);
          }
        }
        else
        {
          int v46 = 1;
          while (v45 != -1)
          {
            uint64_t v44 = (v44 + v46) & v42;
            int v45 = *(_DWORD *)(v40 + 4 * v44);
            ++v46;
            if (v45 == a3) {
              goto LABEL_55;
            }
          }
        }
      }
    }
  }
  else
  {
    int v32 = 1;
    while (v31 != -1)
    {
      uint64_t v30 = (v30 + v32) & v27;
      int v31 = *(_DWORD *)(v5 + 16 * v30);
      ++v32;
      if (v31 == a2) {
        goto LABEL_29;
      }
    }
  }
  return this;
}

void sub_18253646C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    WTF::fastFree((WTF *)(a10 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *wgpuTextureReference(_DWORD *result)
{
  return result;
}

WebGPU::Texture *wgpuTextureRelease(WebGPU::Texture *result, void *a2)
{
  if (*(_DWORD *)result == 1)
  {
    WebGPU::Texture::~Texture(result, a2);
    return (WebGPU::Texture *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

WebGPU::TextureView *wgpuTextureCreateView(uint64_t a1, long long *a2)
{
  if (!*(void *)a2 && !*(unsigned char *)(a1 + 104))
  {
    long long v112 = *a2;
    int v6 = *((_DWORD *)a2 + 4);
    unsigned int v7 = *((_DWORD *)a2 + 5);
    uint64_t v8 = *((unsigned int *)a2 + 6);
    unsigned int v9 = *((_DWORD *)a2 + 7);
    uint64_t v10 = *((unsigned int *)a2 + 8);
    unsigned int v11 = *((_DWORD *)a2 + 9);
    uint64_t v12 = *((void *)a2 + 5);
    if (v6)
    {
      if (v9 != -1) {
        goto LABEL_48;
      }
    }
    else
    {
      uint64_t v14 = (int *)(a1 + 48);
      int v13 = *(_DWORD *)(a1 + 48);
      if (v12 == 2)
      {
        switch(v13)
        {
          case '\'':
          case '(':
          case '*':
            unsigned int v15 = 0;
            uint64_t v14 = (int *)&v102;
            break;
          case ')':
            unsigned int v15 = 0;
            uint64_t v14 = (int *)&v102;
            int v13 = 40;
            break;
          case '+':
            unsigned int v15 = 0;
            uint64_t v14 = (int *)&v102;
            int v13 = 42;
            break;
          default:
            int v13 = 0;
            unsigned int v15 = 0;
            break;
        }
      }
      else if (v12 == 1)
      {
        if (v13 == 38) {
          int v16 = 38;
        }
        else {
          int v16 = 0;
        }
        if (v13 == 38) {
          uint64_t v14 = (int *)&v102;
        }
        if (v13 == 41) {
          int v17 = 38;
        }
        else {
          int v17 = v16;
        }
        if (v13 == 41) {
          uint64_t v14 = (int *)&v102;
        }
        BOOL v18 = v13 == 43;
        if (v13 == 43) {
          int v13 = 38;
        }
        else {
          int v13 = v17;
        }
        if (v18) {
          uint64_t v14 = (int *)&v102;
        }
        unsigned int v15 = 0;
      }
      else
      {
        unsigned int v15 = v13 & 0xFFFFFF00;
        int v13 = *(_DWORD *)(a1 + 48);
        if (v12) {
          int v13 = 0;
        }
        else {
          uint64_t v14 = (int *)&v102;
        }
        if (v12) {
          unsigned int v15 = 0;
        }
      }
      LODWORD(v102) = v15 | v13;
      int v6 = *v14;
      if (v9 != -1) {
        goto LABEL_48;
      }
    }
    unsigned int v19 = *(_DWORD *)(a1 + 36);
    BOOL v20 = v19 >= v8;
    unsigned int v21 = v19 - v8;
    if (v20) {
      unsigned int v9 = v21;
    }
    else {
      unsigned int v9 = 0;
    }
    if (!v20)
    {
LABEL_43:
      uint64_t v22 = *(void *)(a1 + 72);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v23 = *(void *)(v22 + 32);
      uint64_t v24 = 32 * *(unsigned int *)(v22 + 44);
      uint64_t v25 = v23 + v24;
      while (v24)
      {
        int v26 = *(_DWORD *)(v25 - 8);
        v25 -= 32;
        v24 -= 32;
        if (!v26)
        {
          uint64_t v27 = v23 + v24;
          if (!*(unsigned char *)(v27 + 16))
          {
            uint64_t v28 = v112;
            *(void *)&long long v112 = 0;
            *(_DWORD *)uint64_t v27 = 1;
            *(void *)(v27 + 8) = v28;
            *(unsigned char *)(v27 + 16) = 1;
          }
          goto LABEL_85;
        }
      }
      uint64_t v38 = *(void *)(v22 + 24);
      if (v38)
      {
        (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v38 + 16))(v38, 1, &v112);
        uint64_t v39 = *(void *)(v22 + 24);
        *(void *)(v22 + 24) = 0;
        if (v39) {
          (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
        }
      }
LABEL_85:
      uint64_t v40 = (_DWORD *)v112;
      *(void *)&long long v112 = 0;
      if (v40)
      {
        if (*v40 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v40 -= 2;
        }
      }
LABEL_172:
      uint64_t v69 = *(atomic_uchar *volatile **)(a1 + 72);
      uint64_t v4 = (WebGPU::TextureView *)WTF::fastMalloc((WTF *)0x78);
      WebGPU::TextureView::TextureView(v4, (WebGPU::Texture *)a1, v69);
      return v4;
    }
LABEL_48:
    if (!v7)
    {
      switch([*(id *)(a1 + 16) textureType])
      {
        case 0:
          unsigned int v7 = 1;
          break;
        case 1:
          goto LABEL_250;
        case 2:
        case 4:
          unsigned int v7 = 2;
          break;
        case 3:
        case 8:
          unsigned int v7 = 3;
          break;
        case 5:
          unsigned int v7 = 4;
          break;
        case 6:
          unsigned int v7 = 5;
          break;
        case 7:
          unsigned int v7 = 6;
          break;
        default:
          unsigned int v7 = 0;
          break;
      }
    }
    if (v11 != -1) {
      goto LABEL_50;
    }
    if (v7 <= 6)
    {
      if (((1 << v7) & 0x46) != 0)
      {
        unsigned int v11 = 1;
        goto LABEL_50;
      }
      if (((1 << v7) & 0x28) != 0)
      {
        unsigned int v34 = *(_DWORD *)(a1 + 32);
        BOOL v35 = v34 >= v10;
        unsigned int v36 = v34 - v10;
        if (v35) {
          unsigned int v11 = v36;
        }
        else {
          unsigned int v11 = 0;
        }
        if (!v35) {
          goto LABEL_43;
        }
LABEL_50:
        *(_OWORD *)__s = v112;
        int v104 = v6;
        unsigned int v105 = v7;
        int v106 = v8;
        unsigned int v107 = v9;
        int v108 = v10;
        unsigned int v109 = v11;
        uint64_t v110 = v12;
        char v111 = 1;
        if (!*(unsigned char *)(a1 + 104) && !*(void *)(a1 + 16))
        {
          int v32 = @"GPUTexture.createView: texture is not valid";
          goto LABEL_112;
        }
        unsigned int v29 = *(_DWORD *)(a1 + 48);
        switch(v12)
        {
          case 2:
            if (v29 - 39 >= 5) {
              goto LABEL_81;
            }
            int v37 = dword_1826CEE18[v29 - 39];
            break;
          case 1:
            int v32 = @"GPUTexture.createView: aspect == All and (format != resolveTextureFormat(format, aspect))";
            if (v29 > 0x2B || ((1 << v29) & 0xA4000000000) == 0) {
              goto LABEL_112;
            }
            int v37 = 38;
            break;
          case 0:
            if (v6 != v29)
            {
              uint64_t v30 = *(unsigned int *)(a1 + 68);
              if (!v30)
              {
                int v32 = @"GPUTexture.createView: aspect == all and (format != parentTexture's format and !viewFormats.contains(parentTexture's format))";
                goto LABEL_112;
              }
              int v31 = *(int **)(a1 + 56);
              int v32 = @"GPUTexture.createView: aspect == all and (format != parentTexture's format and !viewFormats.contains(parentTexture's format))";
              while (1)
              {
                int v33 = *v31++;
                if (v33 == v6) {
                  break;
                }
                if (!--v30) {
                  goto LABEL_112;
                }
              }
            }
            goto LABEL_77;
          default:
            goto LABEL_81;
        }
        if (v6 == v37)
        {
LABEL_77:
          if (!v9)
          {
            int v32 = @"GPUTexture.createView: !mipLevelCount";
            goto LABEL_112;
          }
          if (__CFADD__(v8, v9) || v8 + v9 > *(_DWORD *)(a1 + 36))
          {
            int v32 = @"GPUTexture.createView: endMipLevel is not valid";
            goto LABEL_112;
          }
          if (!v11)
          {
            int v32 = @"GPUTexture.createView: !arrayLayerCount";
            goto LABEL_112;
          }
          if (__CFADD__(v10, v11)
            || ((int v41 = *(_DWORD *)(a1 + 44), v41 != 1) ? (v42 = 1) : (v42 = *(_DWORD *)(a1 + 32)),
                v10 + v11 > v42))
          {
            int v32 = @"GPUTexture.createView: endArrayLayer is not valid";
            goto LABEL_112;
          }
          if (*(_DWORD *)(a1 + 40) >= 2u && v7 != 2)
          {
            int v32 = @"GPUTexture.createView: sampleCount > 1 and dimension != 2D";
            goto LABEL_112;
          }
          int v32 = @"GPUTexture.createView: dimension is undefined";
          switch(v7)
          {
            case 0u:
              break;
            case 1u:
              if (v41)
              {
                int v32 = @"GPUTexture.createView: attempting to create 1D texture view from non-1D base texture";
                break;
              }
              if (v11 == 1) {
                goto LABEL_157;
              }
              int v32 = @"GPUTexture.createView: attempting to create 1D texture view with array layers";
              break;
            case 2u:
              if (v41 == 1)
              {
                if (v11 != 1)
                {
                  int v32 = @"GPUTexture.createView: attempting to create 2D texture view with array layers";
                  break;
                }
                goto LABEL_157;
              }
              int v32 = @"GPUTexture.createView: attempting to create 2D texture view from non-2D base texture";
              break;
            case 3u:
              if (v41 == 1) {
                goto LABEL_157;
              }
              int v32 = @"GPUTexture.createView: attempting to create 2D texture array view from non-2D parent texture";
              break;
            case 4u:
              if (v41 == 1)
              {
                if (v11 == 6)
                {
                  if (*(_DWORD *)(a1 + 24) != *(_DWORD *)(a1 + 28))
                  {
                    int v32 = @"GPUTexture.createView: attempting to create cube texture view from non-square parent texture";
                    break;
                  }
                  goto LABEL_157;
                }
                int v32 = @"GPUTexture.createView: attempting to create cube texture view with arrayLayerCount != 6";
              }
              else
              {
                int v32 = @"GPUTexture.createView: attempting to create cube texture view from non-2D parent texture";
              }
              break;
            case 5u:
              if (v41 == 1)
              {
                HIDWORD(v55) = -1431655765 * v11;
                LODWORD(v55) = -1431655765 * v11;
                if ((v55 >> 1) > 0x2AAAAAAA)
                {
                  int v32 = @"GPUTexture.createView: attempting to create cube array texture view with (arrayLayerCount % 6) != 0";
                  break;
                }
                if (*(_DWORD *)(a1 + 24) == *(_DWORD *)(a1 + 28))
                {
LABEL_157:
                  uint64_t v56 = WebGPU::Texture::pixelFormat(v6);
                  if (!v56)
                  {
                    uint64_t v59 = *(void *)(a1 + 72);
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    uint64_t v60 = *(void *)(v59 + 32);
                    uint64_t v61 = 32 * *(unsigned int *)(v59 + 44);
                    uint64_t v62 = v60 + v61;
                    while (v61)
                    {
                      int v63 = *(_DWORD *)(v62 - 8);
                      v62 -= 32;
                      v61 -= 32;
                      if (!v63)
                      {
                        uint64_t v64 = v60 + v61;
                        if (!*(unsigned char *)(v64 + 16))
                        {
                          uint64_t v65 = v112;
                          *(void *)&long long v112 = 0;
                          *(_DWORD *)uint64_t v64 = 1;
                          *(void *)(v64 + 8) = v65;
                          *(unsigned char *)(v64 + 16) = 1;
                        }
                        goto LABEL_168;
                      }
                    }
                    uint64_t v66 = *(void *)(v59 + 24);
                    if (v66)
                    {
                      (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v66 + 16))(v66, 1, &v112);
                      uint64_t v67 = *(void *)(v59 + 24);
                      *(void *)(v59 + 24) = 0;
                      if (v67) {
                        (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
                      }
                    }
LABEL_168:
                    unsigned int v68 = (_DWORD *)v112;
                    *(void *)&long long v112 = 0;
                    if (v68)
                    {
                      if (*v68 == 2) {
                        WTF::StringImpl::destroy();
                      }
                      else {
                        *v68 -= 2;
                      }
                    }
                    goto LABEL_172;
                  }
                  uint64_t v57 = v56;
                  switch(v7)
                  {
                    case 1u:
                      uint64_t v58 = v11 != 1;
                      goto LABEL_185;
                    case 2u:
                      if (*(_DWORD *)(a1 + 40) <= 1u) {
                        uint64_t v58 = 2;
                      }
                      else {
                        uint64_t v58 = 4;
                      }
                      goto LABEL_185;
                    case 3u:
                      if (*(_DWORD *)(a1 + 40) <= 1u) {
                        uint64_t v58 = 3;
                      }
                      else {
                        uint64_t v58 = 8;
                      }
                      goto LABEL_185;
                    case 4u:
                      uint64_t v58 = 5;
                      goto LABEL_185;
                    case 5u:
                      uint64_t v58 = 6;
                      goto LABEL_185;
                    case 6u:
                      uint64_t v58 = 7;
                      goto LABEL_185;
                    default:
                      if (v7 == 0x7FFFFFFF) {
                        goto LABEL_172;
                      }
                      uint64_t v58 = 0;
LABEL_185:
                      uint64_t v70 = *(void **)(a1 + 16);
                      uint64_t v71 = [v70 pixelFormat];
                      uint64_t v72 = v71;
                      if (v57 != 252)
                      {
                        if (v57 == 253)
                        {
                          if (v71 == 260) {
                            uint64_t v72 = 261;
                          }
                        }
                        else
                        {
                          uint64_t v72 = v57;
                        }
                      }
                      unsigned int v43 = (__CFString *)objc_msgSend(v70, "newTextureViewWithPixelFormat:textureType:levels:slices:", v72, v58, v8, v9, v10, v11);
                      if (!v43) {
                        goto LABEL_124;
                      }
                      if (__s[1]) {
                        strlen(__s[1]);
                      }
                      WTF::String::fromUTF8();
                      if (v102) {
                        unsigned int v73 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
                      }
                      else {
                        unsigned int v73 = &stru_1ECABF938;
                      }
                      [(__CFString *)v43 setLabel:v73];

                      uint64_t v74 = v102;
                      id v102 = 0;
                      if (v74)
                      {
                        if (*v74 == 2) {
                          WTF::StringImpl::destroy();
                        }
                        else {
                          *v74 -= 2;
                        }
                      }
                      unsigned int v75 = [(__CFString *)v43 label];
                      uint64_t v76 = [v75 length];

                      if (!v76)
                      {
                        int v77 = [*(id *)(a1 + 16) label];
                        [(__CFString *)v43 setLabel:v77];
                      }
                      LOBYTE(v112) = 0;
                      BYTE12(v112) = 0;
                      if ((*(unsigned char *)(a1 + 52) & 0x10) != 0)
                      {
                        LODWORD(v78) = *(_DWORD *)(a1 + 24) >> v8;
                        if (v78 <= 1) {
                          uint64_t v78 = 1;
                        }
                        else {
                          uint64_t v78 = v78;
                        }
                        LODWORD(v79) = *(_DWORD *)(a1 + 28) >> v8;
                        if (v79 <= 1) {
                          uint64_t v79 = 1;
                        }
                        else {
                          uint64_t v79 = v79;
                        }
                        *(void *)&long long v112 = v78 | (v79 << 32);
                        DWORD2(v112) = 1;
                        BYTE12(v112) = 1;
                      }
                      unsigned int v80 = *(atomic_uchar *volatile **)(a1 + 72);
                      long long v81 = v43;
                      uint64_t v4 = (WebGPU::TextureView *)WTF::fastMalloc((WTF *)0x78);
                      WebGPU::TextureView::TextureView((uint64_t)v4, v81, __s, &v112, (_DWORD *)a1, v80);

                      unint64_t v82 = *(unsigned int *)(a1 + 100);
                      if (v82 == *(_DWORD *)(a1 + 96))
                      {
                        unint64_t v83 = v82 + (v82 >> 2);
                        if (v83 >= 0x10) {
                          unint64_t v84 = v83 + 1;
                        }
                        else {
                          unint64_t v84 = 16;
                        }
                        if (v84 <= v82 + 1) {
                          unint64_t v85 = v82 + 1;
                        }
                        else {
                          unint64_t v85 = v84;
                        }
                        if (v85 >> 29)
                        {
LABEL_250:
                          __break(0xC471u);
                          JUMPOUT(0x182537188);
                        }
                        uint64_t v86 = *(WTF **)(a1 + 88);
                        unsigned int v88 = (WTF *)WTF::fastMalloc((WTF *)(8 * v85));
                        *(_DWORD *)(a1 + 96) = v85;
                        *(void *)(a1 + 88) = v88;
                        if (v82)
                        {
                          uint64_t v89 = 8 * v82;
                          id v90 = (atomic_uint **)v86;
                          do
                          {
                            while (1)
                            {
                              unsigned int v91 = *v90;
                              long long *v90 = 0;
                              *(void *)unsigned int v88 = v91;
                              long long v92 = *v90;
                              long long *v90 = 0;
                              if (v92)
                              {
                                if (atomic_fetch_add(v92, 0xFFFFFFFF) == 1) {
                                  break;
                                }
                              }
                              unsigned int v88 = (WTF *)((char *)v88 + 8);
                              ++v90;
                              v89 -= 8;
                              if (!v89) {
                                goto LABEL_227;
                              }
                            }
                            atomic_store(1u, (unsigned int *)v92);
                            unint64_t v101 = v90;
                            WTF::fastFree((WTF *)v92, v87);
                            unsigned int v88 = (WTF *)((char *)v88 + 8);
                            id v90 = v101 + 1;
                            v89 -= 8;
                          }
                          while (v89);
LABEL_227:
                          unsigned int v88 = *(WTF **)(a1 + 88);
                        }
                        if (v86)
                        {
                          if (v88 == v86)
                          {
                            *(void *)(a1 + 88) = 0;
                            *(_DWORD *)(a1 + 96) = 0;
                          }
                          WTF::fastFree(v86, v87);
                          unsigned int v88 = *(WTF **)(a1 + 88);
                        }
                        uint64_t v93 = *(unsigned int *)(a1 + 100);
                        uint64_t v94 = *((void *)v4 + 1);
                        if (!v94)
                        {
                          uint64_t v94 = WTF::fastCompactMalloc((WTF *)0x10);
                          *(_DWORD *)uint64_t v94 = 1;
                          *(void *)(v94 + 8) = v4;
                          long long v96 = (unsigned int *)*((void *)v4 + 1);
                          *((void *)v4 + 1) = v94;
                          if (v96)
                          {
                            if (atomic_fetch_add((atomic_uint *volatile)v96, 0xFFFFFFFF) == 1)
                            {
                              atomic_store(1u, v96);
                              WTF::fastFree((WTF *)v96, v95);
                              uint64_t v94 = *((void *)v4 + 1);
                              if (!v94) {
                                goto LABEL_237;
                              }
                            }
                            else
                            {
                              uint64_t v94 = *((void *)v4 + 1);
                              if (!v94)
                              {
LABEL_237:
                                *((void *)v88 + v93) = v94;
                                goto LABEL_244;
                              }
                            }
                          }
                        }
                        atomic_fetch_add((atomic_uint *volatile)v94, 1u);
                        goto LABEL_237;
                      }
                      uint64_t v97 = *(void *)(a1 + 88);
                      uint64_t v98 = *((void *)v4 + 1);
                      if (v98) {
                        goto LABEL_242;
                      }
                      uint64_t v98 = WTF::fastCompactMalloc((WTF *)0x10);
                      *(_DWORD *)uint64_t v98 = 1;
                      *(void *)(v98 + 8) = v4;
                      uint64_t v100 = (unsigned int *)*((void *)v4 + 1);
                      *((void *)v4 + 1) = v98;
                      if (!v100) {
                        goto LABEL_242;
                      }
                      if (atomic_fetch_add((atomic_uint *volatile)v100, 0xFFFFFFFF) == 1)
                      {
                        atomic_store(1u, v100);
                        WTF::fastFree((WTF *)v100, v99);
                        uint64_t v98 = *((void *)v4 + 1);
                        if (!v98)
                        {
LABEL_243:
                          *(void *)(v97 + 8 * v82) = v98;
LABEL_244:
                          ++*(_DWORD *)(a1 + 100);
LABEL_125:

                          return v4;
                        }
                      }
                      else
                      {
                        uint64_t v98 = *((void *)v4 + 1);
                        if (!v98) {
                          goto LABEL_243;
                        }
                      }
LABEL_242:
                      atomic_fetch_add((atomic_uint *volatile)v98, 1u);
                      goto LABEL_243;
                  }
                }
                int v32 = @"GPUTexture.createView: attempting to create cube array texture view from non-square parent texture";
              }
              else
              {
                int v32 = @"GPUTexture.createView: attempting to create cube array texture view from non-2D parent texture";
              }
              break;
            case 6u:
              if (v41 == 2)
              {
                if (v11 == 1) {
                  goto LABEL_157;
                }
                int v32 = @"GPUTexture.createView: attempting to create 3D texture view with array layers";
              }
              else
              {
                int v32 = @"GPUTexture.createView: attempting to create 3D texture view from non-3D parent texture";
              }
              break;
            default:
              if (v7 != 0x7FFFFFFF) {
                goto LABEL_157;
              }
              int v32 = @"GPUTexture.createView: descriptor.dimension is invalid value";
              break;
          }
LABEL_112:
          unsigned int v43 = v32;
          uint64_t v44 = *(void *)(a1 + 72);
          MEMORY[0x18530AF50](&v112, v43);
          uint64_t v45 = *(void *)(v44 + 32);
          uint64_t v46 = 32 * *(unsigned int *)(v44 + 44);
          uint64_t v47 = v45 + v46;
          while (v46)
          {
            int v48 = *(_DWORD *)(v47 - 8);
            v47 -= 32;
            v46 -= 32;
            if (!v48)
            {
              uint64_t v49 = v45 + v46;
              if (!*(unsigned char *)(v49 + 16))
              {
                uint64_t v50 = v112;
                *(void *)&long long v112 = 0;
                *(_DWORD *)uint64_t v49 = 1;
                *(void *)(v49 + 8) = v50;
                *(unsigned char *)(v49 + 16) = 1;
              }
              goto LABEL_120;
            }
          }
          uint64_t v51 = *(void *)(v44 + 24);
          if (v51)
          {
            (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v51 + 16))(v51, 1, &v112);
            uint64_t v52 = *(void *)(v44 + 24);
            *(void *)(v44 + 24) = 0;
            if (v52) {
              (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
            }
          }
LABEL_120:
          uint64_t v53 = (_DWORD *)v112;
          *(void *)&long long v112 = 0;
          if (v53)
          {
            if (*v53 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v53 -= 2;
            }
          }
LABEL_124:
          int v54 = *(atomic_uchar *volatile **)(a1 + 72);
          uint64_t v4 = (WebGPU::TextureView *)WTF::fastMalloc((WTF *)0x78);
          WebGPU::TextureView::TextureView(v4, (WebGPU::Texture *)a1, v54);
          goto LABEL_125;
        }
LABEL_81:
        int v32 = @"GPUTexture.createView: aspect == All and (format != resolveTextureFormat(format, aspect))";
        goto LABEL_112;
      }
      if (v7 == 4)
      {
        unsigned int v11 = 6;
        goto LABEL_50;
      }
    }
    unsigned int v11 = -1;
    if (v7 == 0x7FFFFFFF) {
      unsigned int v7 = 0x7FFFFFFF;
    }
    goto LABEL_50;
  }
  unsigned int v3 = *(atomic_uchar *volatile **)(a1 + 72);
  uint64_t v4 = (WebGPU::TextureView *)WTF::fastMalloc((WTF *)0x78);
  WebGPU::TextureView::TextureView(v4, (WebGPU::Texture *)a1, v3);
  return v4;
}

void sub_1825371C4(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1825371D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _DWORD *a19)
{
  if (a19)
  {
    if (*a19 != 2)
    {
      *a19 -= 2;
      _Unwind_Resume(exception_object);
    }
    WTF::StringImpl::destroy();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_182537324(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void wgpuTextureDestroy(uint64_t a1, void *a2)
{
  if (!*(unsigned char *)(a1 + 105))
  {
    uint64_t v3 = 296;
    if ((*(_DWORD *)(a1 + 48) - 38) < 6) {
      uint64_t v3 = 304;
    }
    objc_storeStrong((id *)(a1 + 16), *(id *)(*(void *)(a1 + 72) + v3));
  }
  *(unsigned char *)(a1 + 104) = 1;
  uint64_t v4 = *(unsigned int *)(a1 + 100);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 88);
    uint64_t v6 = 8 * v4;
    do
    {
      if (*(void *)v5)
      {
        unsigned int v7 = *(WebGPU::TextureView **)(*(void *)v5 + 8);
        if (v7) {
          WebGPU::TextureView::destroy(v7);
        }
      }
      v5 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  if (*(unsigned char *)(a1 + 105)) {
    goto LABEL_12;
  }
  uint64_t v13 = *(void *)(a1 + 112);
  if (v13)
  {
    uint64_t v14 = *(unsigned int *)(v13 - 4);
    uint64_t v15 = v13 + 8 * v14;
    if (*(_DWORD *)(v13 - 12))
    {
      if (!v14)
      {
        uint64_t v18 = 0;
        uint64_t v17 = *(void *)(a1 + 112);
LABEL_52:
        uint64_t v23 = v13 + 8 * v18;
        if (v23 != v17)
        {
LABEL_55:
          while (!*(void *)(*(void *)v17 + 8))
          {
            uint64_t v24 = v17 + 8;
            uint64_t v17 = v15;
            if (v24 != v15)
            {
              uint64_t v17 = v24;
              while ((unint64_t)(*(void *)v17 + 1) <= 1)
              {
                v17 += 8;
                if (v17 == v15)
                {
                  uint64_t v17 = v15;
                  break;
                }
              }
            }
            if (v17 == v23)
            {
              uint64_t v17 = v23;
              goto LABEL_62;
            }
          }
        }
        goto LABEL_62;
      }
      uint64_t v16 = 8 * v14;
      uint64_t v17 = *(void *)(a1 + 112);
      while ((unint64_t)(*(void *)v17 + 1) <= 1)
      {
        v17 += 8;
        v16 -= 8;
        if (!v16)
        {
          uint64_t v17 = v15;
          break;
        }
      }
LABEL_32:
      uint64_t v18 = *(unsigned int *)(v13 - 4);
      goto LABEL_52;
    }
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v14 = 0;
  }
  uint64_t v17 = v15;
  uint64_t v15 = v13 + 8 * v14;
  if (v13) {
    goto LABEL_32;
  }
  uint64_t v23 = 0;
  if (v17) {
    goto LABEL_55;
  }
LABEL_62:
  if (v13)
  {
    uint64_t v25 = v13 + 8 * *(unsigned int *)(v13 - 4);
    if (v17 == v25) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v25 = 0;
    if (!v17) {
      goto LABEL_12;
    }
  }
  do
  {
    uint64_t v26 = *(void *)(*(void *)v17 + 8);
    *(unsigned char *)(v26 + 76) = 1;
    uint64_t v27 = *(void *)(v26 + 56);
    if (v27)
    {
      uint64_t v28 = *(WebGPU::CommandBuffer **)(v27 + 8);
      if (v28) {
        WebGPU::CommandBuffer::makeInvalid(v28, *(NSString **)(v26 + 64));
      }
    }
    uint64_t v29 = v15;
    if (v17 + 8 != v15)
    {
      uint64_t v29 = v17 + 8;
      while ((unint64_t)(*(void *)v29 + 1) <= 1)
      {
        v29 += 8;
        if (v29 == v15)
        {
          uint64_t v29 = v15;
          break;
        }
      }
    }
    uint64_t v17 = v23;
    if (v29 != v23)
    {
      uint64_t v17 = v29;
      if (!*(void *)(*(void *)v29 + 8))
      {
        while (1)
        {
          uint64_t v30 = v17 + 8;
          uint64_t v17 = v15;
          if (v30 != v15)
          {
            uint64_t v17 = v30;
            while ((unint64_t)(*(void *)v17 + 1) <= 1)
            {
              v17 += 8;
              if (v17 == v15)
              {
                uint64_t v17 = v15;
                break;
              }
            }
          }
          if (v17 == v23) {
            break;
          }
          if (*(void *)(*(void *)v17 + 8)) {
            goto LABEL_68;
          }
        }
        uint64_t v17 = v23;
      }
    }
LABEL_68:
    ++*(_DWORD *)(a1 + 120);
  }
  while (v17 != v25);
LABEL_12:
  uint64_t v8 = *(unsigned int ***)(a1 + 112);
  if (v8)
  {
    *(void *)(a1 + 112) = 0;
    uint64_t v9 = *((unsigned int *)v8 - 1);
    if (v9)
    {
      uint64_t v10 = v8;
      do
      {
        unsigned int v11 = *v10;
        if (*v10 != (unsigned int *)-1)
        {
          *uint64_t v10 = 0;
          if (v11)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v11);
              WTF::fastFree((WTF *)v11, a2);
            }
          }
        }
        ++v10;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 2), a2);
    uint64_t v12 = *(void *)(a1 + 112);
    *(_DWORD *)(a1 + 120) = 0;
    if (v12)
    {
      LODWORD(v12) = *(_DWORD *)(v12 - 12);
      if (v12 > 0x7FFFFFFE) {
        LODWORD(v12) = 0x7FFFFFFF;
      }
    }
    *(_DWORD *)(a1 + 124) = 2 * v12;
    if (!*(_DWORD *)(a1 + 96)) {
      return;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 120) = 0;
    *(_DWORD *)(a1 + 124) = 0;
    if (!*(_DWORD *)(a1 + 96)) {
      return;
    }
  }
  uint64_t v19 = *(unsigned int *)(a1 + 100);
  BOOL v20 = *(WTF **)(a1 + 88);
  if (v19)
  {
    uint64_t v21 = 8 * v19;
    do
    {
      while (1)
      {
        uint64_t v22 = *(atomic_uint **)v20;
        *(void *)BOOL v20 = 0;
        if (v22)
        {
          if (atomic_fetch_add(v22, 0xFFFFFFFF) == 1) {
            break;
          }
        }
        BOOL v20 = (WTF *)((char *)v20 + 8);
        v21 -= 8;
        if (!v21) {
          goto LABEL_41;
        }
      }
      atomic_store(1u, (unsigned int *)v22);
      WTF::fastFree((WTF *)v22, a2);
      BOOL v20 = (WTF *)((char *)v20 + 8);
      v21 -= 8;
    }
    while (v21);
LABEL_41:
    *(_DWORD *)(a1 + 100) = 0;
    BOOL v20 = *(WTF **)(a1 + 88);
  }
  if (v20)
  {
    *(void *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v20, a2);
  }
}

_DWORD *wgpuTextureSetLabel(uint64_t a1, char *__s)
{
  if (__s) {
    strlen(__s);
  }
  WTF::String::fromUTF8();
  if (v5) {
    uint64_t v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v3 = &stru_1ECABF938;
  }
  [*(id *)(a1 + 16) setLabel:v3];

  BOOL result = v5;
  if (v5)
  {
    if (*v5 == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *v5 -= 2;
    }
  }
  return result;
}

void sub_182537820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t wgpuTextureGetDepthOrArrayLayers(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t wgpuTextureGetDimension(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t wgpuTextureGetFormat(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t wgpuTextureGetHeight(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t wgpuTextureGetWidth(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t wgpuTextureGetMipLevelCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t wgpuTextureGetSampleCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t wgpuTextureGetUsage(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashSet<unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    uint64_t result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    uint64_t v9 = result + 16;
    if (!a2) {
      goto LABEL_7;
    }
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
    uint64_t result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    uint64_t v9 = result + 16;
    if (!a2) {
      goto LABEL_7;
    }
  }
  uint64_t v10 = a2;
  unsigned int v11 = (void *)(result + 24);
  do
  {
    *((_DWORD *)v11 - 2) = -1;
    *unsigned int v11 = 0;
    v11 += 2;
    --v10;
  }
  while (v10);
LABEL_7:
  *a1 = v9;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v12 = 0;
    while (1)
    {
      uint64_t v13 = (int *)(v4 + 16 * v12);
      int v14 = *v13;
      if (*v13 != -2)
      {
        if (v14 != -1)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          int v18 = 0;
          unsigned int v19 = 9 * ((v14 + ~(v14 << 15)) ^ ((v14 + ~(v14 << 15)) >> 10));
          unsigned int v20 = ((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) >> 16);
          do
          {
            uint64_t v21 = v20 & v17;
            unsigned int v20 = ++v18 + v21;
          }
          while (*(_DWORD *)(v16 + 16 * v21) != -1);
          uint64_t v22 = v16 + 16 * v21;
          uint64_t v24 = (void *)(v22 + 8);
          uint64_t v23 = *(void *)(v22 + 8);
          if (v23)
          {
            WTF::fastFree((WTF *)(v23 - 16), v8);
            int v14 = *v13;
          }
          *(_DWORD *)uint64_t v22 = v14;
          uint64_t v25 = v4 + 16 * v12;
          *uint64_t v24 = 0;
          uint64_t v26 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          *uint64_t v24 = v26;
          uint64_t v15 = *(void *)(v25 + 8);
          if (!v15) {
            goto LABEL_9;
          }
LABEL_13:
          WTF::fastFree((WTF *)(v15 - 16), v8);
          goto LABEL_9;
        }
        uint64_t v15 = *(void *)(v4 + 16 * v12 + 8);
        if (v15) {
          goto LABEL_13;
        }
      }
LABEL_9:
      if (++v12 == v5) {
        goto LABEL_24;
      }
    }
  }
  if (v4)
  {
LABEL_24:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

uint64_t WebGPU::TextureView::TextureView(uint64_t a1, void *a2, _OWORD *a3, _OWORD *a4, _DWORD *a5, atomic_uchar *volatile *a6)
{
  id v11 = a2;
  int v12 = 1;
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  id v13 = v11;
  char v14 = 0;
  *(void *)(a1 + 16) = v13;
  long long v16 = a3[1];
  long long v15 = a3[2];
  *(_OWORD *)(a1 + 24) = *a3;
  *(_OWORD *)(a1 + 40) = v16;
  *(_OWORD *)(a1 + 56) = v15;
  *(_OWORD *)(a1 + 72) = *a4;
  atomic_uchar *volatile v17 = *a6;
  atomic_compare_exchange_strong_explicit(*a6, (unsigned __int8 *)&v14, 1u, memory_order_acquire, memory_order_acquire);
  if (v14) {
    MEMORY[0x18530AEA0](v17);
  }
  int v18 = (uint64_t *)(*((void *)v17 + 1) + 1);
  *((void *)v17 + 1) = v18;
  atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
  if (v12 != 1) {
    WTF::Lock::unlockSlow(v18, (WTF::Lock *)v17);
  }
  ++*a5;
  *(void *)(a1 + 88) = a6;
  *(void *)(a1 + 96) = a5;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;

  return a1;
}

void sub_182537B7C(_Unwind_Exception *a1)
{
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebGPU::BindGroup,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(v3, v5);
  _Unwind_Resume(a1);
}

WebGPU::TextureView *WebGPU::TextureView::TextureView(WebGPU::TextureView *this, WebGPU::Texture *a2, atomic_uchar *volatile *a3)
{
  char v6 = 0;
  int v7 = 1;
  *(_DWORD *)this = 1;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((unsigned char *)this + 84) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((unsigned char *)this + 72) = 0;
  atomic_uchar *volatile v8 = *a3;
  atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    MEMORY[0x18530AEA0](v8);
  }
  uint64_t v9 = (uint64_t *)(*((void *)v8 + 1) + 1);
  *((void *)v8 + 1) = v9;
  atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1) {
    WTF::Lock::unlockSlow(v9, (WTF::Lock *)v8);
  }
  ++*(_DWORD *)a2;
  *((void *)this + 11) = a3;
  *((void *)this + 12) = a2;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  return this;
}

void sub_182537C58(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void *)(v1 + 8);
  if (!v5)
  {
    *__int32 v2 = 0;
    _Unwind_Resume(a1);
  }
  *(void *)(v5 + 8) = 0;
  char v6 = *v2;
  *__int32 v2 = 0;
  if (v6)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v4);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void WebGPU::TextureView::~TextureView(WebGPU::TextureView *this, void *a2)
{
  uint64_t v3 = *((void *)this + 13);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = (unsigned int **)*((void *)this + 13);
      do
      {
        char v6 = *v5;
        if (*v5 != (unsigned int *)-1)
        {
          void *v5 = 0;
          if (v6)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v6);
              WTF::fastFree((WTF *)v6, a2);
            }
          }
        }
        ++v5;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  int v7 = (WebGPU::Texture *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (!v7)
  {
LABEL_13:
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)this + 11, a2);

    uint64_t v9 = *((void *)this + 1);
    if (v9) {
      goto LABEL_14;
    }
LABEL_18:
    *((void *)this + 1) = 0;
    return;
  }
  if (*(_DWORD *)v7 != 1)
  {
    --*(_DWORD *)v7;
    goto LABEL_13;
  }
  WebGPU::Texture::~Texture(v7, a2);
  WTF::fastFree(v11, v12);
  WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)this + 11, v13);

  uint64_t v9 = *((void *)this + 1);
  if (!v9) {
    goto LABEL_18;
  }
LABEL_14:
  *(void *)(v9 + 8) = 0;
  uint64_t v10 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v10)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v8);
    }
  }
}

id WebGPU::TextureView::texture(WebGPU::TextureView *this)
{
  uint64_t v1 = (WebGPU::TextureView *)*((void *)this + 12);
  if (!*((unsigned char *)v1 + 104)) {
    uint64_t v1 = this;
  }
  id v2 = *((id *)v1 + 2);
  return v2;
}

void WebGPU::TextureView::destroy(WebGPU::TextureView *this)
{
  uint64_t v2 = 296;
  if ((*((_DWORD *)this + 10) - 38) < 6) {
    uint64_t v2 = 304;
  }
  objc_storeStrong((id *)this + 2, *(id *)(*((void *)this + 11) + v2));
  if (*(unsigned char *)(*((void *)this + 12) + 105)) {
    goto LABEL_4;
  }
  uint64_t v9 = *((void *)this + 13);
  if (v9)
  {
    uint64_t v10 = *(unsigned int *)(v9 - 4);
    uint64_t v11 = v9 + 8 * v10;
    if (*(_DWORD *)(v9 - 12))
    {
      if (!v10)
      {
        uint64_t v14 = 0;
        uint64_t v13 = *((void *)this + 13);
LABEL_30:
        uint64_t v15 = v9 + 8 * v14;
        if (v15 != v13)
        {
LABEL_33:
          while (!*(void *)(*(void *)v13 + 8))
          {
            uint64_t v16 = v13 + 8;
            uint64_t v13 = v11;
            if (v16 != v11)
            {
              uint64_t v13 = v16;
              while ((unint64_t)(*(void *)v13 + 1) <= 1)
              {
                v13 += 8;
                if (v13 == v11)
                {
                  uint64_t v13 = v11;
                  break;
                }
              }
            }
            if (v13 == v15)
            {
              uint64_t v13 = v15;
              goto LABEL_40;
            }
          }
        }
        goto LABEL_40;
      }
      uint64_t v12 = 8 * v10;
      uint64_t v13 = *((void *)this + 13);
      while ((unint64_t)(*(void *)v13 + 1) <= 1)
      {
        v13 += 8;
        v12 -= 8;
        if (!v12)
        {
          uint64_t v13 = v11;
          break;
        }
      }
LABEL_22:
      uint64_t v14 = *(unsigned int *)(v9 - 4);
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  uint64_t v13 = v11;
  uint64_t v11 = v9 + 8 * v10;
  if (v9) {
    goto LABEL_22;
  }
  uint64_t v15 = 0;
  if (v13) {
    goto LABEL_33;
  }
LABEL_40:
  if (v9)
  {
    uint64_t v17 = v9 + 8 * *(unsigned int *)(v9 - 4);
    if (v13 == v17) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v17 = 0;
    if (!v13) {
      goto LABEL_4;
    }
  }
  do
  {
    uint64_t v18 = *(void *)(*(void *)v13 + 8);
    *(unsigned char *)(v18 + 76) = 1;
    uint64_t v19 = *(void *)(v18 + 56);
    if (v19)
    {
      unsigned int v20 = *(WebGPU::CommandBuffer **)(v19 + 8);
      if (v20) {
        WebGPU::CommandBuffer::makeInvalid(v20, *(NSString **)(v18 + 64));
      }
    }
    uint64_t v21 = v11;
    if (v13 + 8 != v11)
    {
      uint64_t v21 = v13 + 8;
      while ((unint64_t)(*(void *)v21 + 1) <= 1)
      {
        v21 += 8;
        if (v21 == v11)
        {
          uint64_t v21 = v11;
          break;
        }
      }
    }
    uint64_t v13 = v15;
    if (v21 != v15)
    {
      uint64_t v13 = v21;
      if (!*(void *)(*(void *)v21 + 8))
      {
        while (1)
        {
          uint64_t v22 = v13 + 8;
          uint64_t v13 = v11;
          if (v22 != v11)
          {
            uint64_t v13 = v22;
            while ((unint64_t)(*(void *)v13 + 1) <= 1)
            {
              v13 += 8;
              if (v13 == v11)
              {
                uint64_t v13 = v11;
                break;
              }
            }
          }
          if (v13 == v15) {
            break;
          }
          if (*(void *)(*(void *)v13 + 8)) {
            goto LABEL_46;
          }
        }
        uint64_t v13 = v15;
      }
    }
LABEL_46:
    ++*((_DWORD *)this + 28);
  }
  while (v13 != v17);
LABEL_4:
  uint64_t v4 = (unsigned int **)*((void *)this + 13);
  if (v4)
  {
    *((void *)this + 13) = 0;
    uint64_t v5 = *((unsigned int *)v4 - 1);
    if (v5)
    {
      char v6 = v4;
      do
      {
        int v7 = *v6;
        if (*v6 != (unsigned int *)-1)
        {
          *char v6 = 0;
          if (v7)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v7);
              WTF::fastFree((WTF *)v7, v3);
            }
          }
        }
        ++v6;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 2), v3);
    uint64_t v8 = *((void *)this + 13);
    *((_DWORD *)this + 28) = 0;
    if (v8)
    {
      LODWORD(v8) = *(_DWORD *)(v8 - 12);
      if (v8 > 0x7FFFFFFE) {
        LODWORD(v8) = 0x7FFFFFFF;
      }
    }
  }
  else
  {
    LODWORD(v8) = 0;
    *((_DWORD *)this + 28) = 0;
  }
  *((_DWORD *)this + 29) = 2 * v8;
}

void WebGPU::TextureView::setCommandEncoder(WebGPU::TextureView *this, WebGPU::CommandEncoder *a2)
{
  WTF::WeakHashSet<WebGPU::CommandEncoder,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebGPU::CommandEncoder>((uint64_t)this + 104, (uint64_t)a2, (uint64_t)v7);
  uint64_t v4 = *((void *)this + 12);
  if (*(unsigned char *)(v4 + 104))
  {
    if (!*(unsigned char *)(v4 + 105))
    {
      *((unsigned char *)a2 + 76) = 1;
      uint64_t v5 = *((void *)a2 + 7);
      if (v5)
      {
        char v6 = *(WebGPU::CommandBuffer **)(v5 + 8);
        if (v6) {
          WebGPU::CommandBuffer::makeInvalid(v6, *((NSString **)a2 + 8));
        }
      }
    }
  }
}

_DWORD *wgpuTextureViewReference(_DWORD *result)
{
  return result;
}

WebGPU::TextureView *wgpuTextureViewRelease(WebGPU::TextureView *result, void *a2)
{
  if (*(_DWORD *)result == 1)
  {
    WebGPU::TextureView::~TextureView(result, a2);
    return (WebGPU::TextureView *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_DWORD *wgpuTextureViewSetLabel(uint64_t a1, char *__s)
{
  if (__s) {
    strlen(__s);
  }
  WTF::String::fromUTF8();
  if (v5) {
    uint64_t v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v3 = &stru_1ECABF938;
  }
  [*(id *)(a1 + 16) setLabel:v3];

  uint64_t result = v5;
  if (v5)
  {
    if (*v5 == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *v5 -= 2;
    }
  }
  return result;
}

void sub_182538290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (*a10 == 2)
    {
      WTF::StringImpl::destroy();
      _Unwind_Resume(exception_object);
    }
    *a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebGPU::XRBinding::createInvalid@<X0>(atomic_uchar *volatile *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = WTF::fastMalloc((WTF *)0x18);
  uint64_t v6 = result;
  char v7 = 0;
  int v8 = 1;
  *(_DWORD *)uint64_t result = 1;
  *(void *)(result + 8) = 0;
  atomic_uchar *volatile v9 = *this;
  atomic_compare_exchange_strong_explicit(*this, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
  if (v7) {
    uint64_t result = MEMORY[0x18530AEA0](v9);
  }
  ++*((void *)v9 + 1);
  atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != 1) {
    uint64_t result = WTF::Lock::unlockSlow((WTF::Lock *)v9);
  }
  *(void *)(v6 + 16) = this;
  *a2 = v6;
  return result;
}

void sub_182538368(_Unwind_Exception *a1, void *a2)
{
  uint64_t v4 = *((void *)v2 + 1);
  if (!v4)
  {
    *((void *)v2 + 1) = 0;
    WTF::fastFree(v2, a2);
    _Unwind_Resume(a1);
  }
  *(void *)(v4 + 8) = 0;
  uint64_t v5 = (unsigned int *)*((void *)v2 + 1);
  *((void *)v2 + 1) = 0;
  if (v5)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
      WTF::fastFree(v2, v6);
      _Unwind_Resume(a1);
    }
  }
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebGPU::XRBinding::create@<X0>(atomic_uchar *volatile *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = WTF::fastMalloc((WTF *)0x18);
  uint64_t v6 = result;
  char v7 = 0;
  int v8 = 1;
  *(_DWORD *)uint64_t result = 1;
  *(void *)(result + 8) = 0;
  atomic_uchar *volatile v9 = *this;
  atomic_compare_exchange_strong_explicit(*this, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
  if (v7) {
    uint64_t result = MEMORY[0x18530AEA0](v9);
  }
  ++*((void *)v9 + 1);
  atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != 1) {
    uint64_t result = WTF::Lock::unlockSlow((WTF::Lock *)v9);
  }
  *(void *)(v6 + 16) = this;
  *a2 = v6;
  return result;
}

void sub_182538468(_Unwind_Exception *a1, void *a2)
{
  uint64_t v4 = *((void *)v2 + 1);
  if (!v4)
  {
    *((void *)v2 + 1) = 0;
    WTF::fastFree(v2, a2);
    _Unwind_Resume(a1);
  }
  *(void *)(v4 + 8) = 0;
  uint64_t v5 = (unsigned int *)*((void *)v2 + 1);
  *((void *)v2 + 1) = 0;
  if (v5)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
      WTF::fastFree(v2, v6);
      _Unwind_Resume(a1);
    }
  }
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

_DWORD *wgpuXRBindingReference(_DWORD *result)
{
  return result;
}

uint64_t wgpuXRBindingRelease(uint64_t result, void *a2)
{
  uint64_t v2 = (unsigned int **)result;
  if (*(_DWORD *)result == 1)
  {
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)(result + 16), a2);
    uint64_t v4 = v2[1];
    if (v4)
    {
      *((void *)v4 + 1) = 0;
      uint64_t v5 = v2[1];
      v2[1] = 0;
      if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v3);
        uint64_t v6 = (WTF *)v2;
      }
      else
      {
        uint64_t v6 = (WTF *)v2;
      }
    }
    else
    {
      v2[1] = 0;
      uint64_t v6 = (WTF *)v2;
    }
    return WTF::fastFree(v6, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t *wgpuBindingCreateXRProjectionLayer(uint64_t a1)
{
  WebGPU::XRProjectionLayer::create(*(atomic_uchar *volatile **)(a1 + 16), &v2);
  return v2;
}

_DWORD *wgpuBindingGetViewSubImage(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(_DWORD *)(v2 + 60) < 2u) {
    return 0;
  }
  uint64_t result = *(_DWORD **)(*(void *)(v2 + 48) + 8 * (a2 == 2));
  if (result) {
    ++*result;
  }
  return result;
}

uint64_t *WebGPU::XRProjectionLayer::create@<X0>(atomic_uchar *volatile *this@<X0>, uint64_t **a2@<X8>)
{
  uint64_t result = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
  uint64_t v6 = result;
  char v7 = 0;
  int v8 = 1;
  *(_DWORD *)uint64_t result = 1;
  result[1] = 0;
  atomic_uchar *volatile v9 = *this;
  atomic_compare_exchange_strong_explicit(*this, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
  if (v7) {
    uint64_t result = (uint64_t *)MEMORY[0x18530AEA0](v9);
  }
  uint64_t v10 = (uint64_t *)(*((void *)v9 + 1) + 1);
  *((void *)v9 + 1) = v10;
  atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != 1) {
    uint64_t result = WTF::Lock::unlockSlow(v10, (WTF::Lock *)v9);
  }
  v6[2] = (uint64_t)this;
  *a2 = v6;
  return result;
}

void sub_1825386AC(_Unwind_Exception *a1, void *a2)
{
  uint64_t v4 = *((void *)v2 + 1);
  if (!v4)
  {
    *((void *)v2 + 1) = 0;
    WTF::fastFree(v2, a2);
    _Unwind_Resume(a1);
  }
  *(void *)(v4 + 8) = 0;
  uint64_t v5 = (unsigned int *)*((void *)v2 + 1);
  *((void *)v2 + 1) = 0;
  if (v5)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
      WTF::fastFree(v2, v6);
      _Unwind_Resume(a1);
    }
  }
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

_DWORD *wgpuXRProjectionLayerReference(_DWORD *result)
{
  return result;
}

uint64_t wgpuXRProjectionLayerRelease(uint64_t result, void *a2)
{
  uint64_t v2 = (unsigned int **)result;
  if (*(_DWORD *)result == 1)
  {
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)(result + 16), a2);
    uint64_t v4 = v2[1];
    if (v4)
    {
      *((void *)v4 + 1) = 0;
      uint64_t v5 = v2[1];
      v2[1] = 0;
      if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v3);
        uint64_t v6 = (WTF *)v2;
      }
      else
      {
        uint64_t v6 = (WTF *)v2;
      }
    }
    else
    {
      v2[1] = 0;
      uint64_t v6 = (WTF *)v2;
    }
    return WTF::fastFree(v6, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_DWORD *wgpuXRSubImageReference(_DWORD *result)
{
  return result;
}

uint64_t wgpuXRSubImageRelease(uint64_t result, void *a2)
{
  uint64_t v2 = (unsigned int **)result;
  if (*(_DWORD *)result == 1)
  {
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)(result + 16), a2);
    uint64_t v4 = v2[1];
    if (v4)
    {
      *((void *)v4 + 1) = 0;
      uint64_t v5 = v2[1];
      v2[1] = 0;
      if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v3);
        uint64_t v6 = (WTF *)v2;
      }
      else
      {
        uint64_t v6 = (WTF *)v2;
      }
    }
    else
    {
      v2[1] = 0;
      uint64_t v6 = (WTF *)v2;
    }
    return WTF::fastFree(v6, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_DWORD *wgpuXRViewReference(_DWORD *result)
{
  return result;
}

uint64_t wgpuXRViewRelease(uint64_t result, void *a2)
{
  uint64_t v2 = (unsigned int **)result;
  if (*(_DWORD *)result == 1)
  {
    WTF::Ref<WebGPU::Device,WTF::RawPtrTraits<WebGPU::Device>,WTF::DefaultRefDerefTraits<WebGPU::Device>>::~Ref((atomic_uchar *volatile **)(result + 16), a2);
    uint64_t v4 = v2[1];
    if (v4)
    {
      *((void *)v4 + 1) = 0;
      uint64_t v5 = v2[1];
      v2[1] = 0;
      if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v3);
        uint64_t v6 = (WTF *)v2;
      }
      else
      {
        uint64_t v6 = (WTF *)v2;
      }
    }
    else
    {
      v2[1] = 0;
      uint64_t v6 = (WTF *)v2;
    }
    return WTF::fastFree(v6, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void WGSL::AST::Builder::~Builder(WGSL::AST::Builder *this, void *a2)
{
  uint64_t v3 = *((unsigned int *)this + 11);
  if (v3)
  {
    unint64_t v4 = 0;
    while (v4 < *((unsigned int *)this + 11))
    {
      uint64_t v5 = *(void (****)(void))(*((void *)this + 4) + 8 * v4);
      (**v5)(v5);
      if (v3 == ++v4) {
        goto LABEL_5;
      }
    }
    __break(0xC471u);
  }
  else
  {
LABEL_5:
    uint64_t v6 = (WTF *)*((void *)this + 4);
    if (v6)
    {
      *((void *)this + 4) = 0;
      *((_DWORD *)this + 10) = 0;
      WTF::fastFree(v6, a2);
    }
    uint64_t v7 = *((unsigned int *)this + 7);
    if (v7)
    {
      int v8 = (WTF **)*((void *)this + 2);
      uint64_t v9 = 8 * v7;
      do
      {
        uint64_t v10 = *v8++;
        WTF::fastFree(v10, a2);
        v9 -= 8;
      }
      while (v9);
    }
    uint64_t v11 = (WTF *)*((void *)this + 2);
    if (v11)
    {
      *((void *)this + 2) = 0;
      *((_DWORD *)this + 6) = 0;
      WTF::fastFree(v11, a2);
    }
  }
}

uint64_t WGSL::AST::Builder::allocateArena(WGSL::AST::Builder *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 16);
  uint64_t v3 = WTF::fastMalloc((WTF *)0x4000);
  uint64_t v15 = (WTF *)v3;
  uint64_t v5 = *((unsigned int *)this + 7);
  if (v5 == *((_DWORD *)this + 6))
  {
    uint64_t v6 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v5 + 1, (unint64_t)&v15);
    uint64_t v5 = *((unsigned int *)this + 7);
    uint64_t v7 = *((void *)this + 2);
    uint64_t v8 = *(void *)v6;
    *(void *)uint64_t v6 = 0;
    *(void *)(v7 + 8 * v5) = v8;
    uint64_t v9 = v15;
  }
  else
  {
    uint64_t v10 = v3;
    uint64_t v9 = 0;
    uint64_t v11 = *v2;
    uint64_t v15 = 0;
    *(void *)(v11 + 8 * v5) = v10;
  }
  *((_DWORD *)this + 7) = v5 + 1;
  uint64_t result = WTF::fastFree(v9, v4);
  uint64_t v13 = *((unsigned int *)this + 7);
  if (v13)
  {
    uint64_t v14 = *(void *)(*((void *)this + 2) + 8 * v13 - 8);
    *(void *)this = v14;
    *((void *)this + 1) = v14 + 0x4000;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WGSL::AST::Builder::saveCurrentState(WGSL::AST::Builder *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = (uint64_t *)((char *)this + 16);
  uint64_t v4 = WTF::fastMalloc((WTF *)0x4000);
  uint64_t v16 = (WTF *)v4;
  uint64_t v6 = *((unsigned int *)this + 7);
  if (v6 == *((_DWORD *)this + 6))
  {
    uint64_t v7 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v3, v6 + 1, (unint64_t)&v16);
    uint64_t v6 = *((unsigned int *)this + 7);
    uint64_t v8 = *((void *)this + 2);
    uint64_t v9 = *(void *)v7;
    *(void *)uint64_t v7 = 0;
    *(void *)(v8 + 8 * v6) = v9;
    uint64_t v10 = v16;
  }
  else
  {
    uint64_t v11 = v4;
    uint64_t v10 = 0;
    uint64_t v12 = *v3;
    uint64_t v16 = 0;
    *(void *)(v12 + 8 * v6) = v11;
  }
  *((_DWORD *)this + 7) = v6 + 1;
  uint64_t result = WTF::fastFree(v10, v5);
  uint64_t v14 = *((unsigned int *)this + 7);
  if (v14)
  {
    uint64_t v15 = *(void *)(*((void *)this + 2) + 8 * v14 - 8);
    *(void *)this = v15;
    *((void *)this + 1) = v15 + 0x4000;
    return v2;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

char *WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(WTF **)a1;
  if (*(void *)a1 <= a3)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      unint64_t v7 = *(unsigned int *)(a1 + 8);
      unint64_t v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10) {
        unint64_t v9 = v8 + 1;
      }
      else {
        unint64_t v9 = 16;
      }
      if (v9 <= a2) {
        unint64_t v10 = a2;
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10 <= v7)
      {
        uint64_t v16 = *(WTF **)a1;
        return (char *)v16 + 8 * ((uint64_t)(v3 - (void)v5) >> 3);
      }
      if (!(v10 >> 29))
      {
        uint64_t v12 = WTF::fastMalloc((WTF *)(8 * v10));
        uint64_t v13 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(void *)a1 = v12;
        uint64_t v14 = 8 * v6;
        do
        {
          uint64_t v15 = *(void *)((char *)v5 + v13);
          *(void *)((char *)v5 + v13) = 0;
          *(void *)(v12 + v13) = v15;
          WTF::fastFree(*(WTF **)((char *)v5 + v13), v11);
          v13 += 8;
        }
        while (v14 != v13);
        uint64_t v16 = *(WTF **)a1;
        if (v5)
        {
          if (v16 == v5)
          {
            *(void *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v11);
          uint64_t v16 = *(WTF **)a1;
        }
        return (char *)v16 + 8 * ((uint64_t)(v3 - (void)v5) >> 3);
      }
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x182538D90);
    }
  }
  unint64_t v17 = *(unsigned int *)(a1 + 8);
  unint64_t v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10) {
    unint64_t v19 = v18 + 1;
  }
  else {
    unint64_t v19 = 16;
  }
  if (v19 <= a2) {
    unint64_t v20 = a2;
  }
  else {
    unint64_t v20 = v19;
  }
  if (v20 > v17)
  {
    if (v20 >> 29) {
      goto LABEL_35;
    }
    uint64_t v21 = *(unsigned int *)(a1 + 12);
    uint64_t v22 = WTF::fastMalloc((WTF *)(8 * v20));
    *(_DWORD *)(a1 + 8) = v20;
    *(void *)a1 = v22;
    if (v21)
    {
      uint64_t v24 = (WTF **)v22;
      uint64_t v25 = 8 * v21;
      uint64_t v26 = (WTF **)v5;
      do
      {
        uint64_t v27 = *v26;
        *uint64_t v26 = 0;
        *v24++ = v27;
        uint64_t v28 = *v26++;
        WTF::fastFree(v28, v23);
        v25 -= 8;
      }
      while (v25);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v23);
    }
  }
  return (char *)v3;
}

uint64_t WGSL::AST::StringDumper::visit(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(a2 + 92);
  if (v4)
  {
    uint64_t v5 = *(void **)(a2 + 80);
    uint64_t v6 = 8 * v4;
    do
    {
      uint64_t v7 = *v5;
      uint64_t result = (*(uint64_t (**)(void))(*(void *)*v5 + 16))(*v5);
      if (result == 17 && !*(unsigned char *)(v3 + 32)) {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 32))(v3, v7);
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
    if (*(_DWORD *)(a2 + 92))
    {
      (*(void (**)(uint64_t))(*(void *)(v3 + 40) + 32))(v3 + 40);
      WTF::printInternal();
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 40) + 40))(v3 + 40);
    }
  }
  uint64_t v8 = *(unsigned int *)(a2 + 76);
  if (v8)
  {
    unint64_t v9 = *(uint64_t **)(a2 + 64);
    uint64_t v10 = 8 * v8;
    do
    {
      uint64_t v11 = *v9++;
      WGSL::AST::Visitor::visit((unsigned char *)v3, v11);
      (*(void (**)(uint64_t))(*(void *)(v3 + 40) + 32))(v3 + 40);
      WTF::printInternal();
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 40) + 40))(v3 + 40);
      v10 -= 8;
    }
    while (v10);
  }
  return result;
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::BindingAttribute *a2)
{
  uint64_t v4 = (char *)this + 40;
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  WGSL::AST::Visitor::visit(this, *((void *)a2 + 3));
  (*(void (**)(char *))(*(void *)v4 + 32))(v4);
  WTF::printInternal();
  uint64_t v5 = *(uint64_t (**)(char *))(*(void *)v4 + 40);
  return v5(v4);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::BuiltinAttribute *a2)
{
  uint64_t v2 = (char *)this + 40;
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
  WTF::ASCIILiteral::dump();
  (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  WTF::printInternal();
  uint64_t v4 = *(uint64_t (**)(char *))(*(void *)v2 + 40);
  return v4(v2);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::GroupAttribute *a2)
{
  uint64_t v4 = (char *)this + 40;
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  WGSL::AST::Visitor::visit(this, *((void *)a2 + 3));
  (*(void (**)(char *))(*(void *)v4 + 32))(v4);
  WTF::printInternal();
  uint64_t v5 = *(uint64_t (**)(char *))(*(void *)v4 + 40);
  return v5(v4);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::LocationAttribute *a2)
{
  uint64_t v4 = (char *)this + 40;
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  WGSL::AST::Visitor::visit(this, *((void *)a2 + 3));
  (*(void (**)(char *))(*(void *)v4 + 32))(v4);
  WTF::printInternal();
  uint64_t v5 = *(uint64_t (**)(char *))(*(void *)v4 + 40);
  return v5(v4);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::StageAttribute *a2)
{
  uint64_t v2 = (char *)this + 40;
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
  WTF::ASCIILiteral::dump();
  (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  uint64_t v4 = *(uint64_t (**)(char *))(*(void *)v2 + 40);
  return v4(v2);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::WorkgroupSizeAttribute *a2)
{
  uint64_t v4 = (char *)this + 40;
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  WGSL::AST::Visitor::visit(this, *((void *)a2 + 3));
  uint64_t v5 = *((void *)a2 + 4);
  if (v5)
  {
    (*(void (**)(char *))(*((void *)this + 5) + 32))(v4);
    WTF::printInternal();
    (*(void (**)(char *))(*((void *)this + 5) + 40))(v4);
    WGSL::AST::Visitor::visit(this, v5);
    uint64_t v6 = *((void *)a2 + 5);
    if (v6)
    {
      (*(void (**)(char *))(*((void *)this + 5) + 32))(v4);
      WTF::printInternal();
      (*(void (**)(char *))(*((void *)this + 5) + 40))(v4);
      WGSL::AST::Visitor::visit(this, v6);
    }
  }
  (*(void (**)(char *))(*(void *)v4 + 32))(v4);
  WTF::printInternal();
  uint64_t v7 = *(uint64_t (**)(char *))(*(void *)v4 + 40);
  return v7(v4);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::Function *a2)
{
  uint64_t v4 = (char *)this + 40;
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  if (*((_DWORD *)a2 + 21))
  {
    WGSL::AST::Visitor::visit(this, **((void **)a2 + 9));
    if (*((_DWORD *)a2 + 21) >= 2u)
    {
      unint64_t v5 = 1;
      while (1)
      {
        (*(void (**)(char *))(*(void *)v4 + 32))(v4);
        WTF::printInternal();
        (*(void (**)(char *))(*(void *)v4 + 40))(v4);
        if (v5 >= *((unsigned int *)a2 + 21)) {
          break;
        }
        WGSL::AST::Visitor::visit(this, *(void *)(*((void *)a2 + 9) + 8 * v5++));
        if (v5 >= *((unsigned int *)a2 + 21)) {
          goto LABEL_6;
        }
      }
      __break(0xC471u);
LABEL_34:
      JUMPOUT(0x182539EA0);
    }
LABEL_6:
    (*(void (**)(char *))(*(void *)v4 + 32))(v4);
    WTF::printInternal();
    WTF::printInternal();
    (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  }
  uint64_t v6 = (*(uint64_t (**)(char *))(*(void *)v4 + 32))(v4);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  if (*((_DWORD *)a2 + 17))
  {
    (*(void (**)(char *))(*((void *)this + 5) + 32))(v4);
    WTF::printInternal();
    (*(void (**)(char *))(*((void *)this + 5) + 40))(v4);
    WGSL::AST::Indent::Indent(&v13, this);
    if (*((_DWORD *)a2 + 17))
    {
      WGSL::AST::StringDumper::visit(this, **((WGSL::AST::Parameter ***)a2 + 7));
      if (*((_DWORD *)a2 + 17) >= 2u)
      {
        unint64_t v7 = 1;
        do
        {
          (*(void (**)(char *))(*(void *)v4 + 32))(v4);
          WTF::printInternal();
          (*(void (**)(char *))(*(void *)v4 + 40))(v4);
          if (v7 >= *((unsigned int *)a2 + 17))
          {
            __break(0xC471u);
            JUMPOUT(0x182539EA8);
          }
          WGSL::AST::StringDumper::visit(this, *(WGSL::AST::Parameter **)(*((void *)a2 + 7) + 8 * v7++));
        }
        while (v7 < *((unsigned int *)a2 + 17));
      }
    }
    uint64_t v8 = v14;
    uint64_t v14 = 0;
    unint64_t v9 = *v13;
    *uint64_t v13 = v8;
    if (v9)
    {
      if (*v9 == 2)
      {
        WTF::StringImpl::destroy();
        uint64_t v10 = v14;
        uint64_t v14 = 0;
        if (!v10)
        {
LABEL_22:
          (*(void (**)(char *))(*(void *)v4 + 32))(v4);
          WTF::printInternal();
          WTF::printInternal();
          (*(void (**)(char *))(*(void *)v4 + 40))(v4);
          goto LABEL_23;
        }
LABEL_19:
        if (*v10 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v10 -= 2;
        }
        goto LABEL_22;
      }
      *v9 -= 2;
    }
    uint64_t v10 = v14;
    uint64_t v14 = 0;
    if (!v10) {
      goto LABEL_22;
    }
    goto LABEL_19;
  }
LABEL_23:
  (*(void (**)(char *))(*(void *)v4 + 32))(v4);
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  if (*((void *)a2 + 13))
  {
    (*(void (**)(char *))(*(void *)v4 + 32))(v4);
    WTF::printInternal();
    (*(void (**)(char *))(*(void *)v4 + 40))(v4);
    if (*((_DWORD *)a2 + 25))
    {
      WGSL::AST::Visitor::visit(this, **((void **)a2 + 11));
      if (*((_DWORD *)a2 + 25) >= 2u)
      {
        unint64_t v11 = 1;
        while (1)
        {
          (*(void (**)(char *))(*(void *)v4 + 32))(v4);
          WTF::printInternal();
          (*(void (**)(char *))(*(void *)v4 + 40))(v4);
          if (v11 >= *((unsigned int *)a2 + 25)) {
            break;
          }
          WGSL::AST::Visitor::visit(this, *(void *)(*((void *)a2 + 11) + 8 * v11++));
          if (v11 >= *((unsigned int *)a2 + 25)) {
            goto LABEL_29;
          }
        }
        __break(0xC471u);
        goto LABEL_34;
      }
    }
LABEL_29:
    (*(void (**)(char *))(*((void *)this + 5) + 32))(v4);
    WTF::printInternal();
    (*(void (**)(char *))(*((void *)this + 5) + 40))(v4);
    WGSL::AST::Visitor::visit(this, *((void *)a2 + 13));
  }
  (*(void (**)(char *))(*((void *)this + 5) + 32))(v4);
  WTF::printInternal();
  WTF::printInternal();
  (*(void (**)(char *))(*((void *)this + 5) + 40))(v4);
  return WGSL::AST::StringDumper::visit(this, *((WGSL::AST::CompoundStatement **)a2 + 14));
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::CompoundStatement *a2)
{
  uint64_t v4 = (char *)this + 40;
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  if (!*((_DWORD *)a2 + 13)) {
    goto LABEL_17;
  }
  WGSL::AST::Indent::Indent(&v10, this);
  (*(void (**)(char *))(*((void *)this + 5) + 32))(v4);
  WTF::printInternal();
  (*(void (**)(char *))(*((void *)this + 5) + 40))(v4);
  if (!*((_DWORD *)a2 + 13) || (WGSL::AST::Visitor::visit(this, **((void **)a2 + 5)), *((_DWORD *)a2 + 13) < 2u))
  {
LABEL_7:
    unint64_t v7 = v11;
    unint64_t v11 = 0;
    uint64_t v8 = *v10;
    *uint64_t v10 = v7;
    if (v8)
    {
      if (*v8 == 2)
      {
        WTF::StringImpl::destroy();
        unint64_t v9 = v11;
        unint64_t v11 = 0;
        if (!v9)
        {
LABEL_16:
          (*(void (**)(char *))(*(void *)v4 + 32))(v4);
          WTF::printInternal();
          WTF::printInternal();
          (*(void (**)(char *))(*(void *)v4 + 40))(v4);
LABEL_17:
          (*(void (**)(char *))(*(void *)v4 + 32))(v4);
          WTF::printInternal();
          return (*(uint64_t (**)(char *))(*(void *)v4 + 40))(v4);
        }
LABEL_13:
        if (*v9 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v9 -= 2;
        }
        goto LABEL_16;
      }
      *v8 -= 2;
    }
    unint64_t v9 = v11;
    unint64_t v11 = 0;
    if (!v9) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }
  unint64_t v5 = 1;
  while (1)
  {
    (*(void (**)(char *))(*(void *)v4 + 32))(v4);
    WTF::printInternal();
    uint64_t result = (*(uint64_t (**)(char *))(*(void *)v4 + 40))(v4);
    if (v5 >= *((unsigned int *)a2 + 13)) {
      break;
    }
    WGSL::AST::Visitor::visit(this, *(void *)(*((void *)a2 + 5) + 8 * v5++));
    if (v5 >= *((unsigned int *)a2 + 13)) {
      goto LABEL_7;
    }
  }
  __break(0xC471u);
  return result;
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::Structure *a2)
{
  uint64_t v4 = (char *)this + 40;
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  if (*((_DWORD *)a2 + 17))
  {
    WGSL::AST::Visitor::visit(this, **((void **)a2 + 7));
    if (*((_DWORD *)a2 + 17) >= 2u)
    {
      unint64_t v5 = 1;
      while (1)
      {
        (*(void (**)(char *))(*(void *)v4 + 32))(v4);
        WTF::printInternal();
        (*(void (**)(char *))(*(void *)v4 + 40))(v4);
        if (v5 >= *((unsigned int *)a2 + 17)) {
          break;
        }
        WGSL::AST::Visitor::visit(this, *(void *)(*((void *)a2 + 7) + 8 * v5++));
        if (v5 >= *((unsigned int *)a2 + 17)) {
          goto LABEL_6;
        }
      }
      __break(0xC471u);
LABEL_26:
      JUMPOUT(0x18253A688);
    }
LABEL_6:
    (*(void (**)(char *))(*(void *)v4 + 32))(v4);
    WTF::printInternal();
    WTF::printInternal();
    (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  }
  uint64_t v6 = (*(uint64_t (**)(char *))(*(void *)v4 + 32))(v4);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  if (*((_DWORD *)a2 + 21))
  {
    (*(void (**)(char *))(*((void *)this + 5) + 32))(v4);
    WTF::printInternal();
    (*(void (**)(char *))(*((void *)this + 5) + 40))(v4);
    WGSL::AST::Indent::Indent(&v12, this);
    if (*((_DWORD *)a2 + 21))
    {
      WGSL::AST::StringDumper::visit(this, **((WGSL::AST::StructureMember ***)a2 + 9));
      if (*((_DWORD *)a2 + 21) >= 2u)
      {
        unint64_t v7 = 1;
        while (1)
        {
          (*(void (**)(char *))(*(void *)v4 + 32))(v4);
          WTF::printInternal();
          (*(void (**)(char *))(*(void *)v4 + 40))(v4);
          if (v7 >= *((unsigned int *)a2 + 21)) {
            break;
          }
          WGSL::AST::StringDumper::visit(this, *(WGSL::AST::StructureMember **)(*((void *)a2 + 9) + 8 * v7++));
          if (v7 >= *((unsigned int *)a2 + 21)) {
            goto LABEL_13;
          }
        }
        __break(0xC471u);
        goto LABEL_26;
      }
    }
LABEL_13:
    uint64_t v8 = v13;
    uint64_t v13 = 0;
    unint64_t v9 = *v12;
    *uint64_t v12 = v8;
    if (v9)
    {
      if (*v9 == 2)
      {
        WTF::StringImpl::destroy();
        uint64_t v10 = v13;
        uint64_t v13 = 0;
        if (!v10)
        {
LABEL_22:
          (*(void (**)(char *))(*(void *)v4 + 32))(v4);
          WTF::printInternal();
          WTF::printInternal();
          (*(void (**)(char *))(*(void *)v4 + 40))(v4);
          goto LABEL_23;
        }
LABEL_19:
        if (*v10 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v10 -= 2;
        }
        goto LABEL_22;
      }
      *v9 -= 2;
    }
    uint64_t v10 = v13;
    uint64_t v13 = 0;
    if (!v10) {
      goto LABEL_22;
    }
    goto LABEL_19;
  }
LABEL_23:
  (*(void (**)(char *))(*(void *)v4 + 32))(v4);
  WTF::printInternal();
  return (*(uint64_t (**)(char *))(*(void *)v4 + 40))(v4);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::Variable *a2)
{
  if (*((_DWORD *)a2 + 25))
  {
    WGSL::AST::Visitor::visit(this, **((void **)a2 + 11));
    if (*((_DWORD *)a2 + 25) >= 2u)
    {
      uint64_t v4 = (char *)this + 40;
      unint64_t v5 = 1;
      do
      {
        (*(void (**)(char *))(*(void *)v4 + 32))((char *)this + 40);
        WTF::printInternal();
        (*(void (**)(char *))(*(void *)v4 + 40))((char *)this + 40);
        if (v5 >= *((unsigned int *)a2 + 25))
        {
          __break(0xC471u);
          JUMPOUT(0x18253AC90);
        }
        WGSL::AST::Visitor::visit(this, *(void *)(*((void *)a2 + 11) + 8 * v5++));
      }
      while (v5 < *((unsigned int *)a2 + 25));
    }
    (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
    WTF::printInternal();
    (*(void (**)(char *))(*((void *)this + 5) + 40))((char *)this + 40);
  }
  uint64_t v6 = (char *)this + 40;
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*((void *)this + 5) + 40))((char *)this + 40);
  if (*((void *)a2 + 13))
  {
    uint64_t v7 = (*(uint64_t (**)(char *))(*(void *)v6 + 32))((char *)this + 40);
    WTF::printInternal();
    (*(void (**)(uint64_t))(*(void *)v7 + 32))(v7);
    WTF::ASCIILiteral::dump();
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    WTF::printInternal();
    (*(void (**)(uint64_t))(*(void *)v7 + 32))(v7);
    WTF::ASCIILiteral::dump();
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    WTF::printInternal();
    (*(void (**)(char *))(*(void *)v6 + 40))((char *)this + 40);
  }
  uint64_t v8 = (*(uint64_t (**)(char *))(*(void *)v6 + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(void *)v8 + 32))(v8);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
  (*(void (**)(char *))(*(void *)v6 + 40))((char *)this + 40);
  if (*((void *)a2 + 14))
  {
    (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
    WTF::printInternal();
    (*(void (**)(char *))(*((void *)this + 5) + 40))((char *)this + 40);
    WGSL::AST::Visitor::visit(this, *((void *)a2 + 14));
  }
  if (*((void *)a2 + 15))
  {
    (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
    WTF::printInternal();
    (*(void (**)(char *))(*((void *)this + 5) + 40))((char *)this + 40);
    WGSL::AST::Visitor::visit(this, *((void *)a2 + 15));
  }
  (*(void (**)(char *))(*(void *)v6 + 32))((char *)this + 40);
  WTF::printInternal();
  unint64_t v9 = *(uint64_t (**)(char *))(*(void *)v6 + 40);
  return v9((char *)this + 40);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::VariableQualifier *a2)
{
  uint64_t v2 = (char *)this + 40;
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
  WTF::ASCIILiteral::dump();
  (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
  WTF::ASCIILiteral::dump();
  (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  WTF::printInternal();
  uint64_t v4 = *(uint64_t (**)(char *))(*(void *)v2 + 40);
  return v4(v2);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::TypeAlias *a2)
{
  uint64_t v4 = (char *)this + 40;
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  uint64_t v5 = (*(uint64_t (**)(char *))(*(void *)v4 + 32))(v4);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(void *)v5 + 32))(v5);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  WGSL::AST::Visitor::visit(this, *((void *)a2 + 7));
  (*(void (**)(char *))(*(void *)v4 + 32))(v4);
  WTF::printInternal();
  uint64_t v6 = *(uint64_t (**)(char *))(*(void *)v4 + 40);
  return v6(v4);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::AbstractFloatLiteral *a2)
{
  uint64_t v2 = (char *)this + 40;
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  uint64_t v3 = *(uint64_t (**)(char *))(*(void *)v2 + 40);
  return v3(v2);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::AbstractIntegerLiteral *a2)
{
  uint64_t v2 = (char *)this + 40;
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  uint64_t v3 = *(uint64_t (**)(char *))(*(void *)v2 + 40);
  return v3(v2);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::IndexAccessExpression *a2)
{
  WGSL::AST::Visitor::visit(this, *((void *)a2 + 8));
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*((void *)this + 5) + 40))((char *)this + 40);
  WGSL::AST::Visitor::visit(this, *((void *)a2 + 9));
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  uint64_t v4 = *(uint64_t (**)(char *))(*((void *)this + 5) + 40);
  return v4((char *)this + 40);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::BoolLiteral *a2)
{
  uint64_t v2 = (char *)this + 40;
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  uint64_t v3 = *(uint64_t (**)(char *))(*(void *)v2 + 40);
  return v3(v2);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::CallExpression *a2)
{
  WGSL::AST::Visitor::visit(this, *((void *)a2 + 8));
  uint64_t v4 = (char *)this + 40;
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*((void *)this + 5) + 40))((char *)this + 40);
  if (!*((_DWORD *)a2 + 21)) {
    goto LABEL_16;
  }
  WGSL::AST::Indent::Indent(&v10, this);
  if (!*((_DWORD *)a2 + 21) || (WGSL::AST::Visitor::visit(this, **((void **)a2 + 9)), *((_DWORD *)a2 + 21) < 2u))
  {
LABEL_7:
    uint64_t v7 = v11;
    unint64_t v11 = 0;
    uint64_t v8 = *v10;
    *uint64_t v10 = v7;
    if (v8)
    {
      if (*v8 == 2)
      {
        WTF::StringImpl::destroy();
        unint64_t v9 = v11;
        unint64_t v11 = 0;
        if (!v9)
        {
LABEL_16:
          (*(void (**)(char *))(*(void *)v4 + 32))((char *)this + 40);
          WTF::printInternal();
          return (*(uint64_t (**)(char *))(*(void *)v4 + 40))((char *)this + 40);
        }
LABEL_13:
        if (*v9 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v9 -= 2;
        }
        goto LABEL_16;
      }
      *v8 -= 2;
    }
    unint64_t v9 = v11;
    unint64_t v11 = 0;
    if (!v9) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }
  unint64_t v5 = 1;
  while (1)
  {
    (*(void (**)(char *))(*(void *)v4 + 32))((char *)this + 40);
    WTF::printInternal();
    uint64_t result = (*(uint64_t (**)(char *))(*(void *)v4 + 40))((char *)this + 40);
    if (v5 >= *((unsigned int *)a2 + 21)) {
      break;
    }
    WGSL::AST::Visitor::visit(this, *(void *)(*((void *)a2 + 9) + 8 * v5++));
    if (v5 >= *((unsigned int *)a2 + 21)) {
      goto LABEL_7;
    }
  }
  __break(0xC471u);
  return result;
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::Float32Literal *a2)
{
  uint64_t v2 = (char *)this + 40;
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  WTF::printInternal();
  uint64_t v3 = *(uint64_t (**)(char *))(*(void *)v2 + 40);
  return v3(v2);
}

_DWORD *WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::Float16Literal *a2)
{
  uint64_t v2 = this;
  _H0 = *((_WORD *)a2 + 32);
  __asm { FCVT            S0, H0; float }
  WTF::String::number((uint64_t *)&v11, this, _S0);
  uint64_t v9 = *((void *)v2 + 5);
  uint64_t v2 = (WGSL::AST::StringDumper *)((char *)v2 + 40);
  (*(void (**)(WGSL::AST::StringDumper *))(v9 + 32))(v2);
  WTF::printInternal();
  WTF::printInternal();
  (*(void (**)(WGSL::AST::StringDumper *))(*(void *)v2 + 40))(v2);
  uint64_t result = v11;
  unint64_t v11 = 0;
  if (result)
  {
    if (*result == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *result -= 2;
    }
  }
  return result;
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::IdentifierExpression *a2)
{
  uint64_t v2 = (char *)this + 40;
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  uint64_t v4 = *(uint64_t (**)(char *))(*(void *)v2 + 40);
  return v4(v2);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::Signed32Literal *a2)
{
  uint64_t v2 = (char *)this + 40;
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  WTF::printInternal();
  uint64_t v3 = *(uint64_t (**)(char *))(*(void *)v2 + 40);
  return v3(v2);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::FieldAccessExpression *a2)
{
  WGSL::AST::Visitor::visit(this, *((void *)a2 + 8));
  uint64_t v4 = *((void *)this + 5);
  uint64_t v3 = (char *)this + 40;
  uint64_t v5 = (*(uint64_t (**)(char *))(v4 + 32))(v3);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(void *)v5 + 32))(v5);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
  uint64_t v6 = *(uint64_t (**)(char *))(*(void *)v3 + 40);
  return v6(v3);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::Unsigned32Literal *a2)
{
  uint64_t v2 = (char *)this + 40;
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  WTF::printInternal();
  uint64_t v3 = *(uint64_t (**)(char *))(*(void *)v2 + 40);
  return v3(v2);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::UnaryExpression *a2)
{
  uint64_t v4 = (char *)this + 40;
  uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  (*(void (**)(uint64_t))(*(void *)v5 + 32))(v5);
  WTF::ASCIILiteral::dump();
  (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  uint64_t v6 = *((void *)a2 + 8);
  return WGSL::AST::Visitor::visit(this, v6);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::BinaryExpression *a2)
{
  WGSL::AST::Visitor::visit(this, *((void *)a2 + 8));
  uint64_t v4 = (*(uint64_t (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
  WTF::ASCIILiteral::dump();
  (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  WTF::printInternal();
  (*(void (**)(char *))(*((void *)this + 5) + 40))((char *)this + 40);
  uint64_t v5 = *((void *)a2 + 9);
  return WGSL::AST::Visitor::visit(this, v5);
}

uint64_t WGSL::AST::StringDumper::visit(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 40;
  (*(void (**)(uint64_t))(*(void *)(a1 + 40) + 32))(a1 + 40);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  WGSL::AST::Visitor::visit((unsigned char *)a1, *(void *)(a2 + 64));
  (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
  WTF::printInternal();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 40);
  return v5(v4);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::AssignmentStatement *a2)
{
  uint64_t v4 = (char *)this + 40;
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  WGSL::AST::Visitor::visit(this, *((void *)a2 + 3));
  (*(void (**)(char *))(*(void *)v4 + 32))(v4);
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  WGSL::AST::Visitor::visit(this, *((void *)a2 + 4));
  (*(void (**)(char *))(*(void *)v4 + 32))(v4);
  WTF::printInternal();
  uint64_t v5 = *(uint64_t (**)(char *))(*(void *)v4 + 40);
  return v5(v4);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::CallExpression **a2)
{
  WGSL::AST::StringDumper::visit(this, a2[3]);
  uint64_t v4 = *((void *)this + 5);
  uint64_t v3 = (char *)this + 40;
  (*(void (**)(char *))(v4 + 32))(v3);
  WTF::printInternal();
  uint64_t v5 = *(uint64_t (**)(char *))(*(void *)v3 + 40);
  return v5(v3);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::CompoundAssignmentStatement *a2)
{
  uint64_t v4 = (char *)this + 40;
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  WGSL::AST::Visitor::visit(this, *((void *)a2 + 3));
  uint64_t v5 = (*(uint64_t (**)(char *))(*(void *)v4 + 32))(v4);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(void *)v5 + 32))(v5);
  WTF::ASCIILiteral::dump();
  (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  WGSL::AST::Visitor::visit(this, *((void *)a2 + 4));
  (*(void (**)(char *))(*(void *)v4 + 32))(v4);
  WTF::printInternal();
  uint64_t v6 = *(uint64_t (**)(char *))(*(void *)v4 + 40);
  return v6(v4);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::DecrementIncrementStatement *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = (char *)this + 40;
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  WGSL::AST::Visitor::visit(v3, *((void *)a2 + 3));
  LODWORD(v3) = *((unsigned __int8 *)a2 + 32);
  uint64_t v5 = (*(uint64_t (**)(char *))(*(void *)v4 + 32))(v4);
  uint64_t v6 = v5;
  if (v3 <= 1)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 32))(v5);
    WTF::printInternal();
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  WTF::printInternal();
  uint64_t v7 = *(uint64_t (**)(char *))(*(void *)v4 + 40);
  return v7(v4);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::IfStatement *a2)
{
  uint64_t v4 = (char *)this + 40;
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  WGSL::AST::Visitor::visit(this, *((void *)a2 + 3));
  (*(void (**)(char *))(*(void *)v4 + 32))(v4);
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  uint64_t result = WGSL::AST::StringDumper::visit(this, *((WGSL::AST::CompoundStatement **)a2 + 4));
  if (*((void *)a2 + 5))
  {
    (*(void (**)(char *))(*((void *)this + 5) + 32))(v4);
    WTF::printInternal();
    WTF::printInternal();
    (*(void (**)(char *))(*((void *)this + 5) + 40))(v4);
    (*(void (**)(void))(**((void **)a2 + 5) + 16))(*((void *)a2 + 5));
    (*(void (**)(char *))(*((void *)this + 5) + 32))(v4);
    WTF::printInternal();
    (*(void (**)(char *))(*((void *)this + 5) + 40))(v4);
    uint64_t v6 = *((void *)a2 + 5);
    return WGSL::AST::Visitor::visit(this, v6);
  }
  return result;
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::PhonyAssignmentStatement *a2)
{
  uint64_t v4 = (char *)this + 40;
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  (*(void (**)(char *))(*(void *)v4 + 32))(v4);
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  WGSL::AST::Visitor::visit(this, *((void *)a2 + 3));
  (*(void (**)(char *))(*(void *)v4 + 32))(v4);
  WTF::printInternal();
  uint64_t v5 = *(uint64_t (**)(char *))(*(void *)v4 + 40);
  return v5(v4);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::ReturnStatement *a2)
{
  uint64_t v4 = (char *)this + 40;
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  if (*((void *)a2 + 3))
  {
    (*(void (**)(char *))(*((void *)this + 5) + 32))(v4);
    WTF::printInternal();
    (*(void (**)(char *))(*((void *)this + 5) + 40))(v4);
    WGSL::AST::Visitor::visit(this, *((void *)a2 + 3));
  }
  (*(void (**)(char *))(*(void *)v4 + 32))(v4);
  WTF::printInternal();
  uint64_t v5 = *(uint64_t (**)(char *))(*(void *)v4 + 40);
  return v5(v4);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::VariableStatement *a2)
{
  uint64_t v4 = (char *)this + 40;
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  uint64_t v5 = (WGSL::AST::Variable *)*((void *)a2 + 3);
  return WGSL::AST::StringDumper::visit(this, v5);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::ForStatement *a2)
{
  uint64_t v4 = (char *)this + 40;
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  uint64_t v5 = *((void *)a2 + 3);
  if (v5) {
    WGSL::AST::Visitor::visit(this, v5);
  }
  (*(void (**)(char *))(*(void *)v4 + 32))(v4);
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  uint64_t v6 = *((void *)a2 + 4);
  if (v6) {
    WGSL::AST::Visitor::visit(this, v6);
  }
  (*(void (**)(char *))(*(void *)v4 + 32))(v4);
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  uint64_t v7 = *((void *)a2 + 5);
  if (v7) {
    WGSL::AST::Visitor::visit(this, v7);
  }
  (*(void (**)(char *))(*((void *)this + 5) + 32))(v4);
  WTF::printInternal();
  (*(void (**)(char *))(*((void *)this + 5) + 40))(v4);
  uint64_t v8 = (WGSL::AST::CompoundStatement *)*((void *)a2 + 6);
  return WGSL::AST::StringDumper::visit(this, v8);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::ArrayTypeExpression *a2)
{
  uint64_t v4 = (char *)this + 40;
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  uint64_t result = (*(uint64_t (**)(char *))(*(void *)v4 + 40))(v4);
  if (*((void *)a2 + 8))
  {
    (*(void (**)(char *))(*((void *)this + 5) + 32))(v4);
    WTF::printInternal();
    (*(void (**)(char *))(*((void *)this + 5) + 40))(v4);
    WGSL::AST::Visitor::visit(this, *((void *)a2 + 8));
    if (*((void *)a2 + 9))
    {
      (*(void (**)(char *))(*((void *)this + 5) + 32))(v4);
      WTF::printInternal();
      (*(void (**)(char *))(*((void *)this + 5) + 40))(v4);
      WGSL::AST::Visitor::visit(this, *((void *)a2 + 9));
    }
    (*(void (**)(char *))(*(void *)v4 + 32))(v4);
    WTF::printInternal();
    uint64_t v6 = *(uint64_t (**)(char *))(*(void *)v4 + 40);
    return v6(v4);
  }
  return result;
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::ElaboratedTypeExpression *a2)
{
  uint64_t v4 = (char *)this + 40;
  uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  (*(void (**)(uint64_t))(*(void *)v5 + 32))(v5);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  uint64_t v6 = *((unsigned int *)a2 + 27);
  if (v6)
  {
    uint64_t v7 = (uint64_t *)*((void *)a2 + 12);
    WGSL::AST::Visitor::visit(this, *v7);
    if (v6 != 1)
    {
      uint64_t v8 = v7 + 1;
      uint64_t v9 = 8 * v6 - 8;
      do
      {
        uint64_t v10 = *v8++;
        (*(void (**)(char *))(*((void *)this + 5) + 32))(v4);
        WTF::printInternal();
        (*(void (**)(char *))(*((void *)this + 5) + 40))(v4);
        WGSL::AST::Visitor::visit(this, v10);
        v9 -= 8;
      }
      while (v9);
    }
  }
  (*(void (**)(char *))(*(void *)v4 + 32))(v4);
  WTF::printInternal();
  unint64_t v11 = *(uint64_t (**)(char *))(*(void *)v4 + 40);
  return v11(v4);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::ReferenceTypeExpression *a2)
{
  WGSL::AST::Visitor::visit(this, *((void *)a2 + 8));
  uint64_t v4 = *((void *)this + 5);
  uint64_t v3 = (char *)this + 40;
  (*(void (**)(char *))(v4 + 32))(v3);
  WTF::printInternal();
  uint64_t v5 = *(uint64_t (**)(char *))(*(void *)v3 + 40);
  return v5(v3);
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::Parameter *a2)
{
  uint64_t v4 = (char *)this + 40;
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  if (!*((_DWORD *)a2 + 21))
  {
LABEL_7:
    uint64_t v7 = (*(uint64_t (**)(char *))(*((void *)this + 5) + 32))(v4);
    (*(void (**)(uint64_t))(*(void *)v7 + 32))(v7);
    WTF::printInternal();
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    WTF::printInternal();
    (*(void (**)(char *))(*((void *)this + 5) + 40))(v4);
    uint64_t v8 = *((void *)a2 + 8);
    return WGSL::AST::Visitor::visit(this, v8);
  }
  WGSL::AST::Visitor::visit(this, **((void **)a2 + 9));
  if (*((_DWORD *)a2 + 21) < 2u)
  {
LABEL_6:
    (*(void (**)(char *))(*(void *)v4 + 32))(v4);
    WTF::printInternal();
    (*(void (**)(char *))(*(void *)v4 + 40))(v4);
    goto LABEL_7;
  }
  unint64_t v5 = 1;
  while (1)
  {
    (*(void (**)(char *))(*(void *)v4 + 32))(v4);
    WTF::printInternal();
    uint64_t result = (*(uint64_t (**)(char *))(*(void *)v4 + 40))(v4);
    if (v5 >= *((unsigned int *)a2 + 21)) {
      break;
    }
    WGSL::AST::Visitor::visit(this, *(void *)(*((void *)a2 + 9) + 8 * v5++));
    if (v5 >= *((unsigned int *)a2 + 21)) {
      goto LABEL_6;
    }
  }
  __break(0xC471u);
  return result;
}

uint64_t WGSL::AST::StringDumper::visit(WGSL::AST::StringDumper *this, WGSL::AST::StructureMember *a2)
{
  uint64_t v4 = (char *)this + 40;
  (*(void (**)(char *))(*((void *)this + 5) + 32))((char *)this + 40);
  WTF::printInternal();
  (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  if (!*((_DWORD *)a2 + 25))
  {
LABEL_7:
    uint64_t v7 = (*(uint64_t (**)(char *))(*((void *)this + 5) + 32))(v4);
    (*(void (**)(uint64_t))(*(void *)v7 + 32))(v7);
    WTF::printInternal();
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    WTF::printInternal();
    (*(void (**)(char *))(*((void *)this + 5) + 40))(v4);
    uint64_t v8 = *((void *)a2 + 13);
    return WGSL::AST::Visitor::visit(this, v8);
  }
  WGSL::AST::Visitor::visit(this, **((void **)a2 + 11));
  if (*((_DWORD *)a2 + 25) < 2u)
  {
LABEL_6:
    (*(void (**)(char *))(*(void *)v4 + 32))(v4);
    WTF::printInternal();
    (*(void (**)(char *))(*(void *)v4 + 40))(v4);
    goto LABEL_7;
  }
  unint64_t v5 = 1;
  while (1)
  {
    (*(void (**)(char *))(*(void *)v4 + 32))(v4);
    WTF::printInternal();
    uint64_t result = (*(uint64_t (**)(char *))(*(void *)v4 + 40))(v4);
    if (v5 >= *((unsigned int *)a2 + 25)) {
      break;
    }
    WGSL::AST::Visitor::visit(this, *(void *)(*((void *)a2 + 11) + 8 * v5++));
    if (v5 >= *((unsigned int *)a2 + 25)) {
      goto LABEL_6;
    }
  }
  __break(0xC471u);
  return result;
}

void WGSL::AST::StringDumper::~StringDumper(WGSL::AST::StringDumper *this)
{
  uint64_t v2 = (_DWORD *)*((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v2)
  {
    if (*v2 == 2)
    {
      WTF::StringImpl::destroy();
      WTF::StringPrintStream::~StringPrintStream((WGSL::AST::StringDumper *)((char *)this + 40));
      *(void *)this = &unk_1ECABB740;
      if (!*((unsigned char *)this + 32)) {
        return;
      }
      goto LABEL_7;
    }
    *v2 -= 2;
  }
  WTF::StringPrintStream::~StringPrintStream((WGSL::AST::StringDumper *)((char *)this + 40));
  *(void *)this = &unk_1ECABB740;
  if (!*((unsigned char *)this + 32)) {
    return;
  }
LABEL_7:
  uint64_t v3 = (_DWORD *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (*v3 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v3 -= 2;
    }
  }
}

{
  _DWORD *v2;
  _DWORD *v3;
  uint64_t vars8;

  uint64_t v2 = (_DWORD *)*((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v2)
  {
    if (*v2 == 2)
    {
      WTF::StringImpl::destroy();
      WTF::StringPrintStream::~StringPrintStream((WGSL::AST::StringDumper *)((char *)this + 40));
      *(void *)this = &unk_1ECABB740;
      if (!*((unsigned char *)this + 32)) {
        goto LABEL_11;
      }
LABEL_7:
      uint64_t v3 = (_DWORD *)*((void *)this + 1);
      *((void *)this + 1) = 0;
      if (v3)
      {
        if (*v3 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v3 -= 2;
        }
      }
LABEL_11:
      JUMPOUT(0x18530AFF0);
    }
    *v2 -= 2;
  }
  WTF::StringPrintStream::~StringPrintStream((WGSL::AST::StringDumper *)((char *)this + 40));
  *(void *)this = &unk_1ECABB740;
  if (!*((unsigned char *)this + 32)) {
    goto LABEL_11;
  }
  goto LABEL_7;
}

void *WGSL::AST::Indent::Indent(void *this, WGSL::AST::StringDumper *a2)
{
  uint64_t v2 = this;
  uint64_t v4 = (_DWORD **)((char *)a2 + 200);
  uint64_t v3 = *((void *)a2 + 25);
  if (!v3)
  {
    unsigned int v6 = 4;
    goto LABEL_40;
  }
  int v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5 < 0) {
    goto LABEL_88;
  }
  unsigned int v6 = v5 + 4;
  if (__OFADD__(v5, 4)) {
    goto LABEL_88;
  }
  if ((*(unsigned char *)(v3 + 16) & 4) != 0)
  {
LABEL_40:
    this = (void *)WTF::tryFastCompactMalloc((WTF *)(v6 + 20));
    uint64_t v7 = (_DWORD *)v66;
    if (!v66) {
      goto LABEL_88;
    }
    uint64_t v38 = (unsigned char *)(v66 + 20);
    *(_DWORD *)uint64_t v66 = 2;
    *(_DWORD *)(v66 + 4) = v6;
    *(void *)(v66 + 8) = v66 + 20;
    *(_DWORD *)(v66 + 16) = 4;
    if (!v3)
    {
      uint64_t v45 = 0;
LABEL_66:
      *(_DWORD *)&v38[v45] = 538976288;
LABEL_67:
      *uint64_t v2 = v4;
      uint64_t v53 = *v4;
      if (*v4) {
        *v53 += 2;
      }
      v2[1] = v53;
      int v54 = *v4;
      char *v4 = v7;
      if (v54)
      {
        if (*v54 == 2)
        {
          WTF::StringImpl::destroy();
          if (!v3) {
            return v2;
          }
LABEL_75:
          if (*(_DWORD *)v3 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *(_DWORD *)v3 -= 2;
          }
          return v2;
        }
        *v54 -= 2;
      }
      if (!v3) {
        return v2;
      }
      goto LABEL_75;
    }
    uint64_t v39 = *(int8x16_t **)(v3 + 8);
    size_t v40 = *(unsigned int *)(v3 + 4);
    if ((*(unsigned char *)(v3 + 16) & 4) != 0)
    {
      if (v40)
      {
        if (v40 == 1) {
          *uint64_t v38 = v39->i8[0];
        }
        else {
          memcpy((void *)(v66 + 20), v39, v40);
        }
      }
      goto LABEL_65;
    }
    int v41 = &v38[v40];
    if (v40 < 0x10)
    {
      unint64_t v42 = v66 + 20;
      if (v38 == v41)
      {
LABEL_65:
        uint64_t v45 = *(unsigned int *)(v3 + 4);
        goto LABEL_66;
      }
    }
    else
    {
      unint64_t v42 = (unint64_t)&v38[v40 & 0xFFFFFFF0];
      unsigned int v43 = (unsigned long long *)(v66 + 20);
      do
      {
        unsigned long long v44 = (unsigned __int128)vld2q_s8(v39->i8);
        v39 += 2;
        *v43++ = v44;
      }
      while (v43 != (unsigned long long *)v42);
      if ((unsigned char *)v42 == v41) {
        goto LABEL_65;
      }
    }
    size_t v46 = v66 + v40;
    unint64_t v47 = v66 + v40 - v42 + 20;
    if (v47 < 8
      || (v42 < (unint64_t)&v39[2].u64[1] + 2 * v46 + -2 * v42
        ? (BOOL v48 = (unint64_t)v39 >= v46 + 20)
        : (BOOL v48 = 1),
          !v48))
    {
      uint64_t v50 = (unsigned char *)v42;
      uint64_t v51 = v39;
      goto LABEL_62;
    }
    if (v47 >= 0x20)
    {
      unint64_t v49 = v47 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v55 = v39 + 2;
      uint64_t v56 = (int8x16_t *)(v42 + 16);
      unint64_t v57 = v47 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v59 = v55[-2];
        int8x16_t v58 = v55[-1];
        int8x16_t v61 = *v55;
        int8x16_t v60 = v55[1];
        v55 += 4;
        v56[-1] = vuzp1q_s8(v59, v58);
        *uint64_t v56 = vuzp1q_s8(v61, v60);
        v56 += 2;
        v57 -= 32;
      }
      while (v57);
      if (v47 == v49) {
        goto LABEL_65;
      }
      if ((v47 & 0x18) == 0)
      {
        uint64_t v51 = (int8x16_t *)((char *)v39 + 2 * v49);
        uint64_t v50 = (unsigned char *)(v42 + v49);
        do
        {
LABEL_62:
          char v52 = v51->i8[0];
          uint64_t v51 = (int8x16_t *)((char *)v51 + 2);
          *v50++ = v52;
        }
        while (v50 != v41);
        goto LABEL_65;
      }
    }
    else
    {
      unint64_t v49 = 0;
    }
    uint64_t v50 = (unsigned char *)(v42 + (v47 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v51 = (int8x16_t *)((char *)v39 + 2 * (v47 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v62 = (int16x8_t *)((char *)v39 + 2 * v49);
    int v63 = (int8x8_t *)(v42 + v49);
    unint64_t v64 = v49 - (v47 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int16x8_t v65 = *v62++;
      *v63++ = vmovn_s16(v65);
      v64 += 8;
    }
    while (v64);
    if (v47 == (v47 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_65;
    }
    goto LABEL_62;
  }
  if (v6 <= 0x7FFFFFEF)
  {
    this = (void *)WTF::tryFastCompactMalloc((WTF *)(2 * (v5 + 4) + 20));
    uint64_t v7 = (_DWORD *)v66;
    if (v66)
    {
      uint64_t v8 = (_WORD *)(v66 + 20);
      *(_DWORD *)uint64_t v66 = 2;
      *(_DWORD *)(v66 + 4) = v6;
      *(void *)(v66 + 8) = v66 + 20;
      *(_DWORD *)(v66 + 16) = 0;
      uint64_t v9 = *(int8x16_t **)(v3 + 8);
      uint64_t v10 = *(unsigned int *)(v3 + 4);
      if ((*(unsigned char *)(v3 + 16) & 4) == 0)
      {
        if (v10)
        {
          if (v10 == 1) {
            *uint64_t v8 = v9->i16[0];
          }
          else {
            memcpy((void *)(v66 + 20), v9, 2 * v10);
          }
        }
        goto LABEL_29;
      }
      unint64_t v11 = &v8[v10];
      if (v10 < 0x40)
      {
        unint64_t v12 = v66 + 20;
        if (v8 == v11)
        {
LABEL_29:
          *(void *)&v8[*(unsigned int *)(v3 + 4)] = 0x20002000200020;
          goto LABEL_67;
        }
      }
      else
      {
        unint64_t v12 = (unint64_t)&v8[v10 & 0xFFFFFFC0];
        long long v13 = 0uLL;
        uint64_t v14 = (char *)(v66 + 20);
        do
        {
          v67.val[0] = *v9;
          int8x16_t v15 = v9[1];
          v68.val[0] = v9[2];
          int8x16_t v16 = v9[3];
          v9 += 4;
          int8x16_t v17 = v16;
          v68.val[1] = 0uLL;
          v69.val[0] = v15;
          v67.val[1] = 0uLL;
          unint64_t v18 = v14;
          vst2q_s8(v18, v67);
          v18 += 32;
          v69.val[1] = 0uLL;
          vst2q_s8(v18, v69);
          unint64_t v19 = v14 + 64;
          vst2q_s8(v19, v68);
          unint64_t v20 = v14 + 96;
          vst2q_s8(v20, *(int8x16x2_t *)(&v13 - 1));
          v14 += 128;
        }
        while (v14 != (char *)v12);
        if ((_WORD *)v12 == v11) {
          goto LABEL_29;
        }
      }
      unint64_t v21 = v66 + 2 * v10 - v12 + 18;
      if (v21 < 0xE
        || (v12 < (unint64_t)v9->u64 + (v21 >> 1) + 1
          ? (BOOL v22 = (unint64_t)v9 >= (v21 & 0xFFFFFFFFFFFFFFFELL) + v12 + 2)
          : (BOOL v22 = 1),
            !v22))
      {
        uint64_t v25 = (_WORD *)v12;
        uint64_t v26 = v9;
        goto LABEL_26;
      }
      uint64_t v23 = (v21 >> 1) + 1;
      if (v21 >= 0x3E)
      {
        unint64_t v24 = v23 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v28 = (uint8x8_t *)&v9[1];
        uint64_t v29 = (uint16x8_t *)(v12 + 32);
        unint64_t v30 = v23 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          uint8x16_t v31 = *(uint8x16_t *)v28[-2].i8;
          uint16x8_t v32 = vmovl_u8(*v28);
          uint16x8_t v33 = vmovl_high_u8(*(uint8x16_t *)v28->i8);
          v29[-2] = vmovl_u8(*(uint8x8_t *)v31.i8);
          v29[-1] = vmovl_high_u8(v31);
          *uint64_t v29 = v32;
          v29[1] = v33;
          v29 += 4;
          v28 += 4;
          v30 -= 32;
        }
        while (v30);
        if (v23 == v24) {
          goto LABEL_29;
        }
        if ((v23 & 0x18) == 0)
        {
          uint64_t v26 = (int8x16_t *)((char *)v9 + v24);
          uint64_t v25 = (_WORD *)(v12 + 2 * v24);
          do
          {
LABEL_26:
            __int16 v27 = v26->u8[0];
            uint64_t v26 = (int8x16_t *)((char *)v26 + 1);
            *v25++ = v27;
          }
          while (v25 != v11);
          goto LABEL_29;
        }
      }
      else
      {
        unint64_t v24 = 0;
      }
      uint64_t v25 = (_WORD *)(v12 + 2 * (v23 & 0xFFFFFFFFFFFFFFF8));
      uint64_t v26 = (int8x16_t *)((char *)v9 + (v23 & 0xFFFFFFFFFFFFFFF8));
      unsigned int v34 = (uint8x8_t *)&v9->i8[v24];
      BOOL v35 = (uint16x8_t *)(v12 + 2 * v24);
      unint64_t v36 = v24 - (v23 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint8x8_t v37 = *v34++;
        *v35++ = vmovl_u8(v37);
        v36 += 8;
      }
      while (v36);
      if (v23 == (v23 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_29;
      }
      goto LABEL_26;
    }
  }
LABEL_88:
  __break(0xC471u);
  return this;
}

uint64_t WGSL::AST::Visitor::visit(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (unsigned char *)result;
  uint64_t v4 = *(unsigned int *)(a2 + 92);
  if (v4 && !*(unsigned char *)(result + 32))
  {
    unsigned int v6 = *(void **)(a2 + 80);
    uint64_t v7 = 8 * v4 - 8;
LABEL_7:
    uint64_t result = (*(uint64_t (**)(unsigned char *, void))(*(void *)v3 + 24))(v3, *v6);
    while (v7)
    {
      ++v6;
      v7 -= 8;
      if (!v3[32]) {
        goto LABEL_7;
      }
    }
  }
  uint64_t v5 = *(unsigned int *)(a2 + 76);
  if (v5 && !v3[32])
  {
    uint64_t v8 = *(void **)(a2 + 64);
    uint64_t v9 = 8 * v5 - 8;
LABEL_12:
    uint64_t result = (*(uint64_t (**)(unsigned char *, void))(*(void *)v3 + 40))(v3, *v8);
    while (v9)
    {
      ++v8;
      v9 -= 8;
      if (!v3[32]) {
        goto LABEL_12;
      }
    }
  }
  return result;
}

{
  unsigned char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(unsigned char *, uint64_t);
  void *v7;
  uint64_t v8;
  uint64_t vars8;

  uint64_t v3 = (unsigned char *)result;
  uint64_t v4 = *(unsigned int *)(a2 + 84);
  if (v4 && !*(unsigned char *)(result + 32))
  {
    uint64_t v7 = *(void **)(a2 + 72);
    uint64_t v8 = 8 * v4 - 8;
LABEL_8:
    uint64_t result = (*(uint64_t (**)(unsigned char *, void))(*(void *)v3 + 88))(v3, *v7);
    while (v8)
    {
      ++v7;
      v8 -= 8;
      if (!v3[32]) {
        goto LABEL_8;
      }
    }
  }
  if (!v3[32])
  {
    uint64_t v5 = *(void *)(a2 + 64);
    unsigned int v6 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)v3 + 208);
    return v6(v3, v5);
  }
  return result;
}

{
  uint64_t v2;
  unsigned char *v3;
  void *v4;
  uint64_t v5;

  uint64_t v2 = *(unsigned int *)(a2 + 52);
  if (v2)
  {
    uint64_t v3 = (unsigned char *)result;
    if (!*(unsigned char *)(result + 32))
    {
      uint64_t v4 = *(void **)(a2 + 40);
      uint64_t v5 = 8 * v2 - 8;
LABEL_5:
      uint64_t result = (*(uint64_t (**)(unsigned char *, void))(*(void *)v3 + 360))(v3, *v4);
      while (v5)
      {
        ++v4;
        v5 -= 8;
        if (!v3[32]) {
          goto LABEL_5;
        }
      }
    }
  }
  return result;
}

{
  unsigned char *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(unsigned char *);
  uint64_t vars8;

  uint64_t v3 = (unsigned char *)result;
  uint64_t v4 = *(unsigned int *)(a2 + 60);
  if (v4 && !*(unsigned char *)(result + 32))
  {
    uint64_t v5 = *(void **)(a2 + 48);
    unsigned int v6 = 8 * v4 - 8;
LABEL_7:
    uint64_t result = (*(uint64_t (**)(unsigned char *, void))(*(void *)v3 + 88))(v3, *v5);
    while (v6)
    {
      ++v5;
      v6 -= 8;
      if (!v3[32]) {
        goto LABEL_7;
      }
    }
  }
  if (!v3[32])
  {
    uint64_t result = (*(uint64_t (**)(unsigned char *, void))(*(void *)v3 + 208))(v3, *(void *)(a2 + 24));
    if (!v3[32])
    {
      uint64_t result = (*(uint64_t (**)(unsigned char *, void))(*(void *)v3 + 400))(v3, *(void *)(a2 + 32));
      if (!v3[32])
      {
        if (*(void *)(a2 + 40))
        {
          uint64_t v7 = *(uint64_t (**)(unsigned char *))(*(void *)v3 + 360);
          return v7(v3);
        }
      }
    }
  }
  return result;
}

{
  unsigned char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t (*v10)(unsigned char *, uint64_t);
  uint64_t vars8;

  uint64_t v3 = (unsigned char *)result;
  uint64_t v4 = *(unsigned int *)(a2 + 36);
  if (v4 && !*(unsigned char *)(result + 32))
  {
    unsigned int v6 = *(void **)(a2 + 24);
    uint64_t v7 = 8 * v4 - 8;
LABEL_9:
    uint64_t result = (*(uint64_t (**)(unsigned char *, void))(*(void *)v3 + 88))(v3, *v6);
    while (v7)
    {
      ++v6;
      v7 -= 8;
      if (!v3[32]) {
        goto LABEL_9;
      }
    }
  }
  uint64_t v5 = *(unsigned int *)(a2 + 52);
  if (v5 && !v3[32])
  {
    uint64_t v8 = *(void **)(a2 + 40);
    uint64_t v9 = 8 * v5 - 8;
LABEL_14:
    uint64_t result = (*(uint64_t (**)(unsigned char *, void))(*(void *)v3 + 360))(v3, *v8);
    while (v9)
    {
      ++v8;
      v9 -= 8;
      if (!v3[32]) {
        goto LABEL_14;
      }
    }
  }
  if (*(unsigned char *)(a2 + 96) && !v3[32])
  {
    uint64_t v10 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)v3 + 560);
    return v10(v3, a2 + 56);
  }
  return result;
}

{
  unsigned char *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t (*v7)(unsigned char *);
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t vars8;

  uint64_t v3 = (unsigned char *)result;
  uint64_t v4 = *(unsigned int *)(a2 + 12);
  if (v4 && !*(unsigned char *)(result + 32))
  {
    uint64_t v8 = *(void **)a2;
    uint64_t v9 = 8 * v4 - 8;
LABEL_14:
    uint64_t result = (*(uint64_t (**)(unsigned char *, void))(*(void *)v3 + 360))(v3, *v8);
    while (v9)
    {
      ++v8;
      v9 -= 8;
      if (!v3[32]) {
        goto LABEL_14;
      }
    }
  }
  uint64_t v5 = *(unsigned int *)(a2 + 28);
  if (v5 && !v3[32])
  {
    uint64_t v10 = *(void **)(a2 + 16);
    unint64_t v11 = 8 * v5 - 8;
LABEL_19:
    uint64_t result = (*(uint64_t (**)(unsigned char *, void))(*(void *)v3 + 88))(v3, *v10);
    while (v11)
    {
      ++v10;
      v11 -= 8;
      if (!v3[32]) {
        goto LABEL_19;
      }
    }
  }
  if (*(void *)(a2 + 32)) {
    unsigned int v6 = v3[32] == 0;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6)
  {
    uint64_t v7 = *(uint64_t (**)(unsigned char *))(*(void *)v3 + 208);
    return v7(v3);
  }
  return result;
}

{
  unsigned char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(unsigned char *, uint64_t);
  void *v7;
  uint64_t v8;
  uint64_t vars8;

  uint64_t v3 = (unsigned char *)result;
  uint64_t v4 = *(unsigned int *)(a2 + 12);
  if (v4 && !*(unsigned char *)(result + 32))
  {
    uint64_t v7 = *(void **)a2;
    uint64_t v8 = 8 * v4 - 8;
LABEL_8:
    uint64_t result = (*(uint64_t (**)(unsigned char *, void))(*(void *)v3 + 208))(v3, *v7);
    while (v8)
    {
      ++v7;
      v8 -= 8;
      if (!v3[32]) {
        goto LABEL_8;
      }
    }
  }
  if (!v3[32])
  {
    uint64_t v5 = *(void *)(a2 + 16);
    unsigned int v6 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)v3 + 400);
    return v6(v3, v5);
  }
  return result;
}

{
  unsigned char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  uint64_t v3 = (unsigned char *)result;
  uint64_t v4 = *(unsigned int *)(a2 + 68);
  if (v4 && !*(unsigned char *)(result + 32))
  {
    unsigned int v6 = *(void **)(a2 + 56);
    uint64_t v7 = 8 * v4 - 8;
LABEL_7:
    uint64_t result = (*(uint64_t (**)(unsigned char *, void))(*(void *)v3 + 88))(v3, *v6);
    while (v7)
    {
      ++v6;
      v7 -= 8;
      if (!v3[32]) {
        goto LABEL_7;
      }
    }
  }
  uint64_t v5 = *(unsigned int *)(a2 + 84);
  if (v5 && !v3[32])
  {
    uint64_t v8 = *(void **)(a2 + 72);
    uint64_t v9 = 8 * v5 - 8;
LABEL_12:
    uint64_t result = (*(uint64_t (**)(unsigned char *, void))(*(void *)v3 + 536))(v3, *v8);
    while (v9)
    {
      ++v8;
      v9 -= 8;
      if (!v3[32]) {
        goto LABEL_12;
      }
    }
  }
  return result;
}

{
  unsigned char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(unsigned char *, uint64_t);
  void *v7;
  uint64_t v8;
  uint64_t vars8;

  uint64_t v3 = (unsigned char *)result;
  uint64_t v4 = *(unsigned int *)(a2 + 100);
  if (v4 && !*(unsigned char *)(result + 32))
  {
    uint64_t v7 = *(void **)(a2 + 88);
    uint64_t v8 = 8 * v4 - 8;
LABEL_8:
    uint64_t result = (*(uint64_t (**)(unsigned char *, void))(*(void *)v3 + 88))(v3, *v7);
    while (v8)
    {
      ++v7;
      v8 -= 8;
      if (!v3[32]) {
        goto LABEL_8;
      }
    }
  }
  if (!v3[32])
  {
    uint64_t v5 = *(void *)(a2 + 104);
    unsigned int v6 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)v3 + 208);
    return v6(v3, v5);
  }
  return result;
}

{
  uint64_t v2;
  unsigned char *v3;
  void *v4;
  uint64_t v5;

  uint64_t v2 = *(unsigned int *)(a2 + 108);
  if (v2)
  {
    uint64_t v3 = (unsigned char *)result;
    if (!*(unsigned char *)(result + 32))
    {
      uint64_t v4 = *(void **)(a2 + 96);
      uint64_t v5 = 8 * v2 - 8;
LABEL_5:
      uint64_t result = (*(uint64_t (**)(unsigned char *, void))(*(void *)v3 + 208))(v3, *v4);
      while (v5)
      {
        ++v4;
        v5 -= 8;
        if (!v3[32]) {
          goto LABEL_5;
        }
      }
    }
  }
  return result;
}

{
  unsigned char *v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  uint64_t (*v9)(unsigned char *);
  void *v10;
  uint64_t v11;
  uint64_t vars8;

  uint64_t v3 = (unsigned char *)result;
  uint64_t v4 = *(unsigned int *)(a2 + 100);
  if (v4 && !*(unsigned char *)(result + 32))
  {
    uint64_t v10 = *(void **)(a2 + 88);
    unint64_t v11 = 8 * v4 - 8;
LABEL_25:
    uint64_t result = (*(uint64_t (**)(unsigned char *, void))(*(void *)v3 + 88))(v3, *v10);
    while (v11)
    {
      ++v10;
      v11 -= 8;
      if (!v3[32]) {
        goto LABEL_25;
      }
    }
  }
  uint64_t v5 = v3[32];
  if (*(void *)(a2 + 104)) {
    unsigned int v6 = v5 == 0;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6)
  {
    uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)v3 + 544))(v3);
    uint64_t v5 = v3[32];
    if (v3[32]) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = *(void *)(a2 + 112) == 0;
    }
    if (!v8)
    {
LABEL_18:
      uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)v3 + 208))(v3);
      if (v3[32]) {
        return result;
      }
      goto LABEL_19;
    }
  }
  else
  {
    if (v3[32]) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = *(void *)(a2 + 112) == 0;
    }
    if (!v7) {
      goto LABEL_18;
    }
  }
  if (v5) {
    return result;
  }
LABEL_19:
  if (*(void *)(a2 + 120))
  {
    uint64_t v9 = *(uint64_t (**)(unsigned char *))(*(void *)v3 + 208);
    return v9(v3);
  }
  return result;
}

uint64_t WGSL::AST::Visitor::visit(unsigned char *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  if (result == 17 && !a1[32])
  {
    uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 32);
    return v5(a1, a2);
  }
  return result;
}

{
  uint64_t result;
  uint64_t (*v5)(unsigned char *, uint64_t);
  unsigned char *v6;
  uint64_t v7;
  uint64_t vars8;

  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  switch((int)result)
  {
    case 15:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 80);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_22;
      }
      break;
    case 27:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 48);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_22;
      }
      break;
    case 56:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 64);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_22;
      }
      break;
    case 58:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 72);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_22;
      }
      break;
    case 62:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 56);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
LABEL_22:
        uint64_t result = v5(v6, v7);
      }
      break;
    default:
      return result;
  }
  return result;
}

{
  uint64_t result;
  uint64_t (*v5)(unsigned char *, uint64_t);
  unsigned char *v6;
  uint64_t v7;
  uint64_t vars8;

  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  switch((int)result)
  {
    case 1:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 96);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_58;
      }
      break;
    case 2:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 104);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_58;
      }
      break;
    case 3:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 112);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_58;
      }
      break;
    case 4:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 120);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_58;
      }
      break;
    case 5:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 128);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_58;
      }
      break;
    case 6:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 136);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_58;
      }
      break;
    case 7:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 144);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_58;
      }
      break;
    case 8:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 152);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_58;
      }
      break;
    case 9:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 160);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_58;
      }
      break;
    case 10:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 168);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_58;
      }
      break;
    case 11:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 176);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_58;
      }
      break;
    case 12:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 184);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_58;
      }
      break;
    case 13:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 192);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_58;
      }
      break;
    case 14:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 200);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
LABEL_58:
        uint64_t result = v5(v6, v7);
      }
      break;
    default:
      return result;
  }
  return result;
}

{
  uint64_t result;
  uint64_t (*v5)(unsigned char *, uint64_t);
  unsigned char *v6;
  uint64_t v7;
  uint64_t vars8;

  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  switch((int)result)
  {
    case 18:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 232);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case 19:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 240);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case 20:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 256);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case 21:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 264);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case 22:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 288);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case 23:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 296);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case 24:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 304);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case 26:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 328);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case 30:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 216);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case 31:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 224);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case 32:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 248);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case 33:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 272);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case 34:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 280);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case 35:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 320);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case 36:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 336);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case 59:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 512);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case 60:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 520);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case 61:
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 528);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
LABEL_74:
        uint64_t result = v5(v6, v7);
      }
      break;
    default:
      return result;
  }
  return result;
}

{
  uint64_t result;
  uint64_t (*v5)(unsigned char *, uint64_t);
  unsigned char *v6;
  uint64_t v7;
  uint64_t vars8;

  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  switch((int)result)
  {
    case '&':
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 368);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case '\'':
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 376);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case '(':
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 384);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case ')':
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 392);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case '*':
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 400);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case '+':
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 408);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case ',':
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 416);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case '-':
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 424);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case '.':
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 432);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case '/':
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 440);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case '0':
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 448);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case '1':
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 456);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case '2':
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 464);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case '3':
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 472);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case '4':
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 480);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case '5':
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 488);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case '6':
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 496);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
        goto LABEL_74;
      }
      break;
    case '7':
      if (!a1[32])
      {
        uint64_t v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 504);
        unsigned int v6 = a1;
        uint64_t v7 = a2;
LABEL_74:
        uint64_t result = v5(v6, v7);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t WGSL::AST::Visitor::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 208))(a1, *(void *)(a2 + 56));
}

{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 208))(a1, *(void *)(a2 + 24));
}

{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 208))(a1, *(void *)(a2 + 24));
}

{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 208))(a1, *(void *)(a2 + 24));
}

{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 208))(a1, *(void *)(a2 + 24));
}

{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 208))(a1, *(void *)(a2 + 24));
}

{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 208))(a1, *(void *)(a2 + 24));
}

{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 208))(a1, *(void *)(a2 + 24));
}

unsigned __int8 *WGSL::AST::Visitor::visit(unsigned __int8 *result, void *a2)
{
  if (!result[32])
  {
    uint64_t v3 = result;
    uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, void))(*(void *)result + 208))(result, a2[3]);
    int v4 = v3[32];
    if (v3[32]) {
      BOOL v5 = 1;
    }
    else {
      BOOL v5 = a2[4] == 0;
    }
    if (!v5)
    {
      uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)v3 + 208))(v3);
      int v4 = v3[32];
    }
    if (v4) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = a2[5] == 0;
    }
    if (!v6)
    {
      uint64_t v7 = *(uint64_t (**)(unsigned __int8 *))(*(void *)v3 + 208);
      return (unsigned __int8 *)v7(v3);
    }
  }
  return result;
}

{
  unsigned __int8 *v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  uint64_t (*v12)(unsigned __int8 *, uint64_t);
  uint64_t vars8;

  uint64_t v3 = result;
  int v4 = result[32];
  if (a2[3]) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 360))(result);
    int v4 = v3[32];
    if (v3[32]) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = a2[4] == 0;
    }
    if (!v9)
    {
LABEL_21:
      uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)v3 + 208))(v3);
      int v4 = v3[32];
      if (v3[32]) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = a2[5] == 0;
      }
      if (!v10) {
        goto LABEL_25;
      }
      goto LABEL_15;
    }
  }
  else
  {
    BOOL v6 = a2[4];
    if (result[32]) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v6 == 0;
    }
    if (!v7) {
      goto LABEL_21;
    }
  }
  if (v4) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = a2[5] == 0;
  }
  if (!v8)
  {
LABEL_25:
    uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)v3 + 360))(v3);
    if (v3[32]) {
      return result;
    }
    goto LABEL_26;
  }
LABEL_15:
  if (v4) {
    return result;
  }
LABEL_26:
  unint64_t v11 = a2[6];
  unint64_t v12 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(*(void *)v3 + 400);
  return (unsigned __int8 *)v12(v3, v11);
}

unsigned char *WGSL::AST::Visitor::visit(unsigned char *result, uint64_t a2)
{
  if (!result[32])
  {
    uint64_t v3 = result;
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, void))(*(void *)result + 208))(result, *(void *)(a2 + 64));
    if (!v3[32])
    {
      uint64_t v4 = *(void *)(a2 + 72);
      BOOL v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)v3 + 208);
      return (unsigned char *)v5(v3, v4);
    }
  }
  return result;
}

{
  if (!result[32]) {
    return (unsigned char *)(*(uint64_t (**)(unsigned char *, void))(*(void *)result + 208))(result, *(void *)(a2 + 72));
  }
  return result;
}

{
  unsigned char *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  uint64_t v3 = result;
  if (result[32])
  {
    uint64_t v4 = *(unsigned int *)(a2 + 84);
    if (!v4) {
      return result;
    }
  }
  else
  {
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, void))(*(void *)result + 208))(result, *(void *)(a2 + 64));
    uint64_t v4 = *(unsigned int *)(a2 + 84);
    if (!v4) {
      return result;
    }
  }
  if (!v3[32])
  {
    BOOL v5 = *(void **)(a2 + 72);
    BOOL v6 = 8 * v4 - 8;
LABEL_8:
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, void))(*(void *)v3 + 208))(v3, *v5);
    while (v6)
    {
      ++v5;
      v6 -= 8;
      if (!v3[32]) {
        goto LABEL_8;
      }
    }
  }
  return result;
}

{
  if (!result[32]) {
    return (unsigned char *)(*(uint64_t (**)(unsigned char *, void))(*(void *)result + 208))(result, *(void *)(a2 + 64));
  }
  return result;
}

{
  if (!result[32]) {
    return (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)result + 352))(result, a2 + 64);
  }
  return result;
}

{
  unsigned char *v3;
  uint64_t v4;
  uint64_t (*v5)(unsigned char *, uint64_t);
  uint64_t vars8;

  if (!result[32])
  {
    uint64_t v3 = result;
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, void))(*(void *)result + 208))(result, *(void *)(a2 + 64));
    if (!v3[32])
    {
      uint64_t v4 = *(void *)(a2 + 72);
      BOOL v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)v3 + 208);
      return (unsigned char *)v5(v3, v4);
    }
  }
  return result;
}

{
  if (!result[32]) {
    return (unsigned char *)(*(uint64_t (**)(unsigned char *, void))(*(void *)result + 208))(result, *(void *)(a2 + 64));
  }
  return result;
}

{
  if (!result[32]) {
    return (unsigned char *)(*(uint64_t (**)(unsigned char *, void))(*(void *)result + 208))(result, *(void *)(a2 + 64));
  }
  return result;
}

{
  unsigned char *v3;
  uint64_t v4;
  uint64_t (*v5)(unsigned char *, uint64_t);
  uint64_t vars8;

  if (!result[32])
  {
    uint64_t v3 = result;
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, void))(*(void *)result + 208))(result, *(void *)(a2 + 24));
    if (!v3[32])
    {
      uint64_t v4 = *(void *)(a2 + 32);
      BOOL v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)v3 + 208);
      return (unsigned char *)v5(v3, v4);
    }
  }
  return result;
}

{
  if (!result[32]) {
    return (unsigned char *)(*(uint64_t (**)(unsigned char *, void))(*(void *)result + 256))(result, *(void *)(a2 + 24));
  }
  return result;
}

{
  unsigned char *v3;
  uint64_t v4;
  uint64_t (*v5)(unsigned char *, uint64_t);
  uint64_t vars8;

  if (!result[32])
  {
    uint64_t v3 = result;
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, void))(*(void *)result + 208))(result, *(void *)(a2 + 24));
    if (!v3[32])
    {
      uint64_t v4 = *(void *)(a2 + 32);
      BOOL v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)v3 + 208);
      return (unsigned char *)v5(v3, v4);
    }
  }
  return result;
}

{
  if (!result[32]) {
    return (unsigned char *)(*(uint64_t (**)(unsigned char *, void))(*(void *)result + 80))(result, *(void *)(a2 + 24));
  }
  return result;
}

{
  if (!result[32]) {
    return (unsigned char *)(*(uint64_t (**)(unsigned char *, void))(*(void *)result + 208))(result, *(void *)(a2 + 24));
  }
  return result;
}

{
  if (!result[32]) {
    return (unsigned char *)(*(uint64_t (**)(unsigned char *, void))(*(void *)result + 208))(result, *(void *)(a2 + 24));
  }
  return result;
}

{
  BOOL v2;

  if (*(void *)(a2 + 24)) {
    uint64_t v2 = result[32] == 0;
  }
  else {
    uint64_t v2 = 0;
  }
  if (v2) {
    return (unsigned char *)(*(uint64_t (**)(void))(*(void *)result + 208))();
  }
  return result;
}

{
  if (!result[32]) {
    return (unsigned char *)(*(uint64_t (**)(unsigned char *, void))(*(void *)result + 208))(result, *(void *)(a2 + 24));
  }
  return result;
}

{
  if (!result[32]) {
    return (unsigned char *)(*(uint64_t (**)(unsigned char *, void))(*(void *)result + 56))(result, *(void *)(a2 + 24));
  }
  return result;
}

{
  unsigned char *v3;
  uint64_t v4;
  uint64_t (*v5)(unsigned char *, uint64_t);
  uint64_t vars8;

  if (!result[32])
  {
    uint64_t v3 = result;
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, void))(*(void *)result + 208))(result, *(void *)(a2 + 24));
    if (!v3[32])
    {
      uint64_t v4 = *(void *)(a2 + 32);
      BOOL v5 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)v3 + 400);
      return (unsigned char *)v5(v3, v4);
    }
  }
  return result;
}

{
  if (!result[32]) {
    return (unsigned char *)(*(uint64_t (**)(unsigned char *, void))(*(void *)result + 208))(result, *(void *)(a2 + 64));
  }
  return result;
}

unsigned char *WGSL::AST::Visitor::visit(unsigned char *this, Function *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((unsigned int *)a2 + 21);
  if (v4 && !this[32])
  {
    unint64_t v11 = (void *)*((void *)a2 + 9);
    uint64_t v12 = 8 * v4 - 8;
LABEL_18:
    this = (unsigned char *)(*(uint64_t (**)(unsigned char *, void))(*(void *)v3 + 88))(v3, *v11);
    while (v12)
    {
      ++v11;
      v12 -= 8;
      if (!v3[32]) {
        goto LABEL_18;
      }
    }
  }
  uint64_t v5 = *((unsigned int *)a2 + 17);
  if (v5 && !v3[32])
  {
    long long v13 = (void *)*((void *)a2 + 7);
    uint64_t v14 = 8 * v5 - 8;
LABEL_23:
    this = (unsigned char *)(*(uint64_t (**)(unsigned char *, void))(*(void *)v3 + 344))(v3, *v13);
    while (v14)
    {
      ++v13;
      v14 -= 8;
      if (!v3[32]) {
        goto LABEL_23;
      }
    }
  }
  uint64_t v6 = *((unsigned int *)a2 + 25);
  if (v6 && !v3[32])
  {
    int8x16_t v15 = (void *)*((void *)a2 + 11);
    uint64_t v16 = 8 * v6 - 8;
LABEL_28:
    this = (unsigned char *)(*(uint64_t (**)(unsigned char *, void))(*(void *)v3 + 88))(v3, *v15);
    while (v16)
    {
      ++v15;
      v16 -= 8;
      if (!v3[32]) {
        goto LABEL_28;
      }
    }
  }
  int v7 = v3[32];
  if (*((void *)a2 + 13)) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    this = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)v3 + 208))(v3);
    int v7 = v3[32];
  }
  if (!v7)
  {
    uint64_t v9 = *((void *)a2 + 14);
    uint64_t v10 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)v3 + 400);
    return (unsigned char *)v10(v3, v9);
  }
  return this;
}

unsigned __int8 *WGSL::AST::Visitor::visit(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v3 = result;
  if (result[32]) {
    goto LABEL_2;
  }
  uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, void))(*(void *)result + 208))(result, *(void *)(a2 + 32));
  int v4 = v3[32];
  uint64_t v8 = *(unsigned int *)(a2 + 52);
  if (v8)
  {
    if (v3[32])
    {
LABEL_2:
      int v4 = 1;
      goto LABEL_3;
    }
    uint64_t v9 = *(void **)(a2 + 40);
    uint64_t v10 = 8 * v8;
    do
    {
      if (!v3[32]) {
        uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, void))(*(void *)v3 + 88))(v3, *v9);
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
    int v4 = v3[32];
  }
LABEL_3:
  uint64_t v5 = *(unsigned int *)(a2 + 68);
  if (v5)
  {
    if (v4) {
      return result;
    }
    uint64_t v6 = *(void *)(a2 + 56);
    uint64_t v7 = 24 * v5;
    do
    {
      if (!v3[32]) {
        uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(void *)v3 + 552))(v3, v6);
      }
      v6 += 24;
      v7 -= 24;
    }
    while (v7);
    int v4 = v3[32];
  }
  if (!v4)
  {
    unint64_t v11 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(*(void *)v3 + 552);
    return (unsigned __int8 *)v11(v3, a2 + 72);
  }
  return result;
}

{
  unsigned __int8 *v3;
  int v4;
  BOOL v5;
  BOOL v6;
  uint64_t (*v7)(unsigned __int8 *);
  uint64_t vars8;

  uint64_t v3 = result;
  int v4 = result[32];
  if (*(void *)(a2 + 64)) {
    uint64_t v5 = v4 == 0;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5)
  {
    uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 208))(result);
    int v4 = v3[32];
  }
  if (v4) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = *(void *)(a2 + 72) == 0;
  }
  if (!v6)
  {
    uint64_t v7 = *(uint64_t (**)(unsigned __int8 *))(*(void *)v3 + 208);
    return (unsigned __int8 *)v7(v3);
  }
  return result;
}

void WGSL::AST::Visitor::~Visitor(WGSL::AST::Visitor *this)
{
  *(void *)this = &unk_1ECABB740;
  if (*((unsigned char *)this + 32))
  {
    uint64_t v2 = (_DWORD *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v2)
    {
      if (*v2 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v2 -= 2;
      }
    }
  }
}

{
  _DWORD *v2;
  uint64_t vars8;

  *(void *)this = &unk_1ECABB740;
  if (*((unsigned char *)this + 32))
  {
    uint64_t v2 = (_DWORD *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v2)
    {
      if (*v2 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v2 -= 2;
      }
    }
  }
  JUMPOUT(0x18530AFF0);
}

unsigned char *WGSL::AttributeValidator::visit(WGSL::AttributeValidator *this, Function *a2)
{
  uint64_t v4 = *((unsigned int *)a2 + 21);
  if (v4)
  {
    uint16x8_t v32 = (char *)a2 + 128;
    uint64_t v5 = 8 * v4;
    uint64_t v6 = (void *)*((void *)a2 + 9);
    do
    {
      uint64_t v7 = *v6;
      if ((*(unsigned int (**)(void))(*(void *)*v6 + 16))(*v6) == 11)
      {
        if (*((void *)a2 + 13))
        {
          if (*((unsigned char *)a2 + 120)) {
            goto LABEL_59;
          }
        }
        else
        {
          WGSL::AttributeValidator::error<WTF::ASCIILiteral>(this, (long long *)(v7 + 8), "@must_use can only be applied to functions that return a value", 63);
          if (*((unsigned char *)a2 + 120)) {
            goto LABEL_59;
          }
        }
        *((unsigned char *)a2 + 120) = 1;
      }
      else
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) != 13)
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) == 14)
          {
            uint64_t v8 = *(void *)(v7 + 24);
            if (!v8) {
              goto LABEL_30;
            }
            LOBYTE(v33[0]) = 0;
            char v35 = 0;
            if (!*(unsigned char *)(v8 + 56)) {
              goto LABEL_30;
            }
            unsigned int v34 = -1;
            uint64_t v9 = *(unsigned int *)(v8 + 48);
            if (v9 == -1)
            {
              char v35 = 1;
              goto LABEL_103;
            }
            ((void (*)(char *, int *, uint64_t))off_1ECABBC18[v9])(&v36, v33, v8 + 32);
            unsigned int v34 = v9;
            char v35 = 1;
            switch(v9)
            {
              case 5:
                if (*(uint64_t *)v33 <= 0) {
                  goto LABEL_27;
                }
                break;
              case 4:
                if (!v33[0]) {
                  goto LABEL_27;
                }
                break;
              case 3:
                if (v33[0] <= 0)
                {
LABEL_27:
                  WGSL::AttributeValidator::error<WTF::ASCIILiteral>(this, (long long *)(v8 + 8), "@workgroup_size argument must be at least 1", 44);
                  if (v35)
                  {
                    uint64_t v9 = v34;
                    if (v34 != -1) {
                      break;
                    }
                  }
LABEL_30:
                  uint64_t v14 = *(void *)(v7 + 32);
                  if (!v14) {
                    goto LABEL_44;
                  }
                  LOBYTE(v33[0]) = 0;
                  char v35 = 0;
                  if (!*(unsigned char *)(v14 + 56)) {
                    goto LABEL_44;
                  }
                  unsigned int v34 = -1;
                  uint64_t v15 = *(unsigned int *)(v14 + 48);
                  if (v15 == -1)
                  {
                    char v35 = 1;
LABEL_101:
                    __break(0xC471u);
                    JUMPOUT(0x182541248);
                  }
                  ((void (*)(char *, int *, uint64_t))off_1ECABBC18[v15])(&v36, v33, v14 + 32);
                  unsigned int v34 = v15;
                  char v35 = 1;
                  switch(v15)
                  {
                    case 5:
                      if (*(uint64_t *)v33 <= 0) {
                        goto LABEL_41;
                      }
                      break;
                    case 4:
                      if (!v33[0]) {
                        goto LABEL_41;
                      }
                      break;
                    case 3:
                      if (v33[0] <= 0)
                      {
LABEL_41:
                        WGSL::AttributeValidator::error<WTF::ASCIILiteral>(this, (long long *)(v14 + 8), "@workgroup_size argument must be at least 1", 44);
                        if (v35)
                        {
                          uint64_t v15 = v34;
                          if (v34 != -1) {
                            break;
                          }
                        }
LABEL_44:
                        uint64_t v16 = *(void *)(v7 + 40);
                        if (!v16) {
                          goto LABEL_58;
                        }
                        LOBYTE(v33[0]) = 0;
                        char v35 = 0;
                        if (!*(unsigned char *)(v16 + 56)) {
                          goto LABEL_58;
                        }
                        unsigned int v34 = -1;
                        uint64_t v17 = *(unsigned int *)(v16 + 48);
                        if (v17 == -1)
                        {
                          char v35 = 1;
LABEL_103:
                          __break(0xC471u);
                          JUMPOUT(0x182541220);
                        }
                        ((void (*)(char *, int *, uint64_t))off_1ECABBC18[v17])(&v36, v33, v16 + 32);
                        unsigned int v34 = v17;
                        char v35 = 1;
                        switch(v17)
                        {
                          case 5:
                            if (*(uint64_t *)v33 <= 0) {
                              goto LABEL_55;
                            }
                            break;
                          case 4:
                            if (!v33[0]) {
                              goto LABEL_55;
                            }
                            break;
                          case 3:
                            if (v33[0] <= 0)
                            {
LABEL_55:
                              WGSL::AttributeValidator::error<WTF::ASCIILiteral>(this, (long long *)(v16 + 8), "@workgroup_size argument must be at least 1", 44);
                              if (v35)
                              {
                                uint64_t v17 = v34;
                                if (v34 != -1) {
                                  break;
                                }
                              }
LABEL_58:
                              if (!*((unsigned char *)a2 + 152))
                              {
                                long long v18 = *(_OWORD *)(v7 + 24);
                                *((void *)v32 + 2) = *(void *)(v7 + 40);
                                *(_OWORD *)uint16x8_t v32 = v18;
                                *((unsigned char *)a2 + 152) = 1;
                                goto LABEL_4;
                              }
LABEL_59:
                              uint64_t v10 = (long long *)(v7 + 8);
                              unint64_t v11 = this;
                              uint64_t v12 = "duplicate attribute";
                              uint64_t v13 = 20;
LABEL_60:
                              WGSL::AttributeValidator::error<WTF::ASCIILiteral>(v11, v10, v12, v13);
                              goto LABEL_4;
                            }
                            break;
                          default:
                            goto LABEL_103;
                        }
                        ((void (*)(char *, int *))off_1ECABBBC0[v17])(&v36, v33);
                        goto LABEL_58;
                      }
                      break;
                    default:
                      goto LABEL_101;
                  }
                  ((void (*)(char *, int *))off_1ECABBBC0[v15])(&v36, v33);
                  goto LABEL_44;
                }
                break;
              default:
                goto LABEL_103;
            }
            ((void (*)(char *, int *))off_1ECABBBC0[v9])(&v36, v33);
            goto LABEL_30;
          }
          uint64_t v10 = (long long *)(v7 + 8);
          unint64_t v11 = this;
          uint64_t v12 = "invalid attribute for function declaration";
          uint64_t v13 = 43;
          goto LABEL_60;
        }
        if (*((unsigned char *)a2 + 122)) {
          goto LABEL_59;
        }
        *(_WORD *)((char *)a2 + 121) = *(unsigned __int8 *)(v7 + 24) | 0x100;
      }
LABEL_4:
      ++v6;
      v5 -= 8;
    }
    while (v5);
  }
  if (*((unsigned char *)a2 + 152))
  {
    if (*(unsigned __int16 *)((char *)a2 + 121) < 0x100u || *(_WORD *)((char *)a2 + 121) != 4) {
      WGSL::AttributeValidator::error<WTF::ASCIILiteral>(this, (long long *)((char *)a2 + 8), "@workgroup_size must only be applied to compute shader entry point function", 76);
    }
  }
  uint64_t v20 = *((unsigned int *)a2 + 25);
  if (v20)
  {
    unint64_t v21 = (uint64_t *)*((void *)a2 + 11);
    for (uint64_t i = 8 * v20; i; i -= 8)
    {
      uint64_t v23 = *v21;
      if ((*(unsigned int (**)(uint64_t))(*(void *)*v21 + 16))(*v21) == 3)
      {
        if (*(unsigned __int16 *)((char *)a2 + 121) <= 0xFFu) {
          WGSL::AttributeValidator::error<WTF::ASCIILiteral>(this, (long long *)(v23 + 8), "@builtin is not valid for non-entry point function types", 57);
        }
        if (*((unsigned char *)a2 + 162)) {
          goto LABEL_81;
        }
        *(_WORD *)((char *)a2 + 161) = *(unsigned __int8 *)(v23 + 24) | 0x100;
      }
      else
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v23 + 16))(v23) != 8)
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)v23 + 16))(v23) == 9)
          {
            if (!*((unsigned char *)a2 + 160))
            {
              *((unsigned char *)a2 + 160) = 1;
              goto LABEL_70;
            }
LABEL_81:
            uint64_t v25 = (long long *)(v23 + 8);
            uint64_t v26 = this;
            __int16 v27 = "duplicate attribute";
            uint64_t v28 = 20;
          }
          else
          {
            if (WGSL::AttributeValidator::parseLocation(this, (uint64_t)a2, (uint64_t)a2 + 168, v23, *(unsigned __int8 **)(*((void *)a2 + 13) + 24)))goto LABEL_70; {
            uint64_t v25 = (long long *)(v23 + 8);
            }
            uint64_t v26 = this;
            __int16 v27 = "invalid attribute for function return type";
            uint64_t v28 = 43;
          }
          WGSL::AttributeValidator::error<WTF::ASCIILiteral>(v26, v25, v27, v28);
          goto LABEL_70;
        }
        if (*((unsigned char *)a2 + 165)) {
          goto LABEL_81;
        }
        __int16 v24 = *(_WORD *)(v23 + 24);
        *((unsigned char *)a2 + 165) = 1;
        *(_WORD *)((char *)a2 + 163) = v24;
      }
LABEL_70:
      ++v21;
    }
  }
  uint64_t v29 = *((void *)a2 + 13);
  if (v29)
  {
    if ((*(unsigned __int16 *)((char *)a2 + 163) | (*((unsigned __int8 *)a2 + 165) << 16)) >= 0x10000u
      && (unint64_t)*((unsigned __int8 *)a2 + 172) << 32 == 0)
    {
      WGSL::AttributeValidator::error<WTF::ASCIILiteral>(this, (long long *)(v29 + 8), "@interpolate is only allowed on declarations that have a @location attribute", 77);
      uint64_t v29 = *((void *)a2 + 13);
    }
    if (*((unsigned char *)a2 + 160)
      && (*(unsigned __int16 *)((char *)a2 + 161) < 0x100u || *(_WORD *)((char *)a2 + 161) != 7))
    {
      WGSL::AttributeValidator::error<WTF::ASCIILiteral>(this, (long long *)(v29 + 8), "@invariant is only allowed on declarations that have a @builtin(position) attribute", 84);
    }
  }
  *((void *)this + 5) = a2;
  uint64_t result = WGSL::AST::Visitor::visit(this, a2);
  *((void *)this + 5) = 0;
  return result;
}

_DWORD *WGSL::AttributeValidator::error<WTF::ASCIILiteral>(_DWORD *result, long long *a2, unsigned char *a3, uint64_t a4)
{
  if (a4) {
    size_t v4 = a4 - 1;
  }
  else {
    size_t v4 = 0;
  }
  if (v4 >> 31) {
    goto LABEL_18;
  }
  uint64_t v6 = result;
  if (!v4)
  {
    uint64_t v8 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    uint64_t v14 = v8;
    long long v15 = *a2;
    uint64_t v9 = result[17];
    if (v9 == result[16]) {
      goto LABEL_11;
    }
    goto LABEL_16;
  }
  WTF::tryFastCompactMalloc((WTF *)(v4 + 20));
  uint64_t v8 = v14;
  if (!v14)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x182541444);
  }
  uint64_t result = v14 + 5;
  *uint64_t v14 = 2;
  v8[1] = v4;
  *((void *)v8 + 1) = v8 + 5;
  v8[4] = 4;
  if (v4 != 1)
  {
    uint64_t result = memcpy(result, a3, v4);
    uint64_t v14 = v8;
    long long v15 = *a2;
    uint64_t v9 = v6[17];
    if (v9 == v6[16]) {
      goto LABEL_11;
    }
LABEL_16:
    uint64_t v13 = *((void *)v6 + 7) + 24 * v9;
    *(void *)uint64_t v13 = v8;
    *(_OWORD *)(v13 + 8) = v15;
    ++v6[17];
    return result;
  }
  *(unsigned char *)uint64_t result = *a3;
  uint64_t v14 = v8;
  long long v15 = *a2;
  uint64_t v9 = v6[17];
  if (v9 != v6[16]) {
    goto LABEL_16;
  }
LABEL_11:
  unint64_t v10 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v6 + 14), v9 + 1, (unint64_t)&v14);
  uint64_t v11 = *((void *)v6 + 7) + 24 * v6[17];
  uint64_t v12 = *(void *)v10;
  *(void *)unint64_t v10 = 0;
  *(void *)uint64_t v11 = v12;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(v10 + 8);
  uint64_t result = v14;
  ++v6[17];
  uint64_t v14 = 0;
  if (result)
  {
    if (*result == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *result -= 2;
    }
  }
  return result;
}

uint64_t WGSL::AttributeValidator::parseLocation(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a4 + 16))(a4) != 10) {
    return 0;
  }
  if (a2)
  {
    if (*(unsigned __int16 *)(a2 + 121) <= 0xFFu)
    {
      unint64_t v10 = (long long *)(a4 + 8);
      uint64_t v11 = "@location is not valid for non-entry point function types";
      uint64_t v12 = a1;
      uint64_t v13 = 58;
LABEL_8:
      WGSL::AttributeValidator::error<WTF::ASCIILiteral>(v12, v10, v11, v13);
      goto LABEL_9;
    }
    if (*(_WORD *)(a2 + 121) == 4)
    {
      unint64_t v10 = (long long *)(a4 + 8);
      uint64_t v11 = "@location may not be used in the compute shader stage";
      uint64_t v12 = a1;
      uint64_t v13 = 54;
      goto LABEL_8;
    }
  }
LABEL_9:
  if (!a5) {
    goto LABEL_23;
  }
  long long v15 = a5;
  while (1)
  {
    int v16 = *((_DWORD *)v15 + 12);
    if (v16 != 10) {
      break;
    }
    long long v15 = (unsigned __int8 *)*((void *)v15 + 1);
    if (!v15) {
      goto LABEL_16;
    }
  }
  if (!v16 && *v15 < 6u) {
    goto LABEL_24;
  }
LABEL_16:
  if (*((_DWORD *)a5 + 12) != 1) {
    goto LABEL_23;
  }
  uint64_t v17 = *(unsigned __int8 **)a5;
  if (!*(void *)a5) {
    goto LABEL_23;
  }
  while (1)
  {
    int v18 = *((_DWORD *)v17 + 12);
    if (v18 != 10) {
      break;
    }
    uint64_t v17 = (unsigned __int8 *)*((void *)v17 + 1);
    if (!v17) {
      goto LABEL_23;
    }
  }
  if (v18 || *v17 >= 6u) {
LABEL_23:
  }
    WGSL::AttributeValidator::error<WTF::ASCIILiteral>(a1, (long long *)(a4 + 8), "@location must only be applied to declarations of numeric scalar or numeric vector type", 88);
LABEL_24:
  uint64_t v19 = *(void *)(a4 + 24);
  if (!*(unsigned char *)(v19 + 56))
  {
    WGSL::AttributeValidator::error<WTF::ASCIILiteral>(a1, (long long *)(a4 + 8), "@location constant value is missing", 36);
    return 0;
  }
  int v20 = *(_DWORD *)(v19 + 48);
  switch(v20)
  {
    case 5:
      uint64_t v19 = *(void *)(v19 + 32);
      if ((v19 & 0x8000000000000000) == 0)
      {
LABEL_29:
        if (*(unsigned char *)(a3 + 4))
        {
LABEL_30:
          unint64_t v21 = (long long *)(a4 + 8);
          BOOL v22 = "duplicate attribute";
          uint64_t v23 = a1;
          uint64_t v24 = 20;
LABEL_34:
          WGSL::AttributeValidator::error<WTF::ASCIILiteral>(v23, v21, v22, v24);
          return 1;
        }
        goto LABEL_36;
      }
LABEL_33:
      unint64_t v21 = (long long *)(a4 + 8);
      BOOL v22 = "@location value must be non-negative";
      uint64_t v23 = a1;
      uint64_t v24 = 37;
      goto LABEL_34;
    case 4:
      LODWORD(v19) = *(_DWORD *)(v19 + 32);
      if (*(unsigned char *)(a3 + 4)) {
        goto LABEL_30;
      }
LABEL_36:
      *(_DWORD *)a3 = v19;
      uint64_t result = 1;
      *(unsigned char *)(a3 + 4) = 1;
      return result;
    case 3:
      uint64_t v19 = *(int *)(v19 + 32);
      if ((v19 & 0x8000000000000000) == 0) {
        goto LABEL_29;
      }
      goto LABEL_33;
  }
  uint64_t result = 151;
  __break(0xC471u);
  return result;
}

uint64_t WGSL::AttributeValidator::visit(uint64_t this, WGSL::AST::Parameter *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((unsigned int *)a2 + 21);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)*((void *)a2 + 9);
    for (uint64_t i = 8 * v4; i; i -= 8)
    {
      uint64_t v7 = *v5;
      uint64_t v8 = *(void *)(v3 + 40);
      this = (*(uint64_t (**)(uint64_t))(*(void *)*v5 + 16))(*v5);
      if (this == 3)
      {
        if (v8 && *(unsigned __int16 *)(v8 + 121) <= 0xFFu) {
          this = (uint64_t)WGSL::AttributeValidator::error<WTF::ASCIILiteral>((_DWORD *)v3, (long long *)(v7 + 8), "@builtin is not valid for non-entry point function types", 57);
        }
        if (*((unsigned char *)a2 + 90)) {
          goto LABEL_15;
        }
        *(_WORD *)((char *)a2 + 89) = *(unsigned __int8 *)(v7 + 24) | 0x100;
      }
      else
      {
        this = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
        if (this != 8)
        {
          this = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
          if (this == 9)
          {
            if (!*((unsigned char *)a2 + 88))
            {
              *((unsigned char *)a2 + 88) = 1;
              goto LABEL_3;
            }
LABEL_15:
            unint64_t v10 = (long long *)(v7 + 8);
            uint64_t v11 = (_DWORD *)v3;
            uint64_t v12 = "duplicate attribute";
            uint64_t v13 = 20;
          }
          else
          {
            this = WGSL::AttributeValidator::parseLocation((_DWORD *)v3, *(void *)(v3 + 40), (uint64_t)a2 + 96, v7, *(unsigned __int8 **)(*((void *)a2 + 8) + 24));
            if (this) {
              goto LABEL_3;
            }
            unint64_t v10 = (long long *)(v7 + 8);
            uint64_t v11 = (_DWORD *)v3;
            uint64_t v12 = "invalid attribute for function parameter";
            uint64_t v13 = 41;
          }
          this = (uint64_t)WGSL::AttributeValidator::error<WTF::ASCIILiteral>(v11, v10, v12, v13);
          goto LABEL_3;
        }
        if (*((unsigned char *)a2 + 93)) {
          goto LABEL_15;
        }
        __int16 v9 = *(_WORD *)(v7 + 24);
        *((unsigned char *)a2 + 93) = 1;
        *(_WORD *)((char *)a2 + 91) = v9;
      }
LABEL_3:
      ++v5;
    }
  }
  if ((*(unsigned __int16 *)((char *)a2 + 91) | (*((unsigned __int8 *)a2 + 93) << 16)) >= 0x10000u
    && (unint64_t)*((unsigned __int8 *)a2 + 100) << 32 == 0)
  {
    this = (uint64_t)WGSL::AttributeValidator::error<WTF::ASCIILiteral>((_DWORD *)v3, (long long *)((char *)a2 + 8), "@interpolate is only allowed on declarations that have a @location attribute", 77);
  }
  if (*((unsigned char *)a2 + 88))
  {
    if (*(unsigned __int16 *)((char *)a2 + 89) < 0x100u || *(_WORD *)((char *)a2 + 89) != 7) {
      this = (uint64_t)WGSL::AttributeValidator::error<WTF::ASCIILiteral>((_DWORD *)v3, (long long *)((char *)a2 + 8), "@invariant is only allowed on declarations that have a @builtin(position) attribute", 84);
    }
  }
  uint64_t v16 = *((unsigned int *)a2 + 21);
  if (v16 && !*(unsigned char *)(v3 + 32))
  {
    uint64_t v19 = (void *)*((void *)a2 + 9);
    uint64_t v20 = 8 * v16 - 8;
LABEL_39:
    this = (*(uint64_t (**)(uint64_t, void))(*(void *)v3 + 88))(v3, *v19);
    while (v20)
    {
      ++v19;
      v20 -= 8;
      if (!*(unsigned char *)(v3 + 32)) {
        goto LABEL_39;
      }
    }
  }
  if (!*(unsigned char *)(v3 + 32))
  {
    uint64_t v17 = *((void *)a2 + 8);
    int v18 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 208);
    return v18(v3, v17);
  }
  return this;
}

_DWORD *WGSL::AttributeValidator::visit(_DWORD *this, WGSL::AST::Variable *a2)
{
  uint64_t v3 = (uint64_t)this;
  unsigned int v4 = *((unsigned __int16 *)a2 + 76);
  unsigned int v5 = (0x1Au >> v4) & 1;
  if (*((_WORD *)a2 + 76) > 5u) {
    LOBYTE(v5) = 1;
  }
  if (v4 >= 0x100) {
    char v6 = v5;
  }
  else {
    char v6 = 0;
  }
  uint64_t v7 = *((unsigned int *)a2 + 25);
  if (v7)
  {
    uint64_t v8 = (void *)*((void *)a2 + 11);
    __int16 v9 = &v8[v7];
    do
    {
      uint64_t v14 = *v8;
      this = (_DWORD *)(*(uint64_t (**)(void))(*(void *)*v8 + 16))(*v8);
      if (v14) {
        BOOL v15 = this == 2;
      }
      else {
        BOOL v15 = 0;
      }
      if (v15)
      {
        if ((v6 & 1) == 0) {
          this = WGSL::AttributeValidator::error<WTF::ASCIILiteral>((_DWORD *)v3, (long long *)(v14 + 8), "@binding attribute must only be applied to resource variables", 62);
        }
        uint64_t v18 = *(void *)(v14 + 24);
        if (*(unsigned char *)(v18 + 56))
        {
          int v19 = *(_DWORD *)(v18 + 48);
          switch(v19)
          {
            case 5:
              uint64_t v18 = *(void *)(v18 + 32);
              if ((v18 & 0x8000000000000000) == 0) {
                goto LABEL_32;
              }
              break;
            case 4:
              LODWORD(v18) = *(_DWORD *)(v18 + 32);
              if (!*((unsigned char *)a2 + 160))
              {
LABEL_44:
                *((_DWORD *)a2 + 39) = v18;
                *((unsigned char *)a2 + 160) = 1;
                goto LABEL_10;
              }
              goto LABEL_63;
            case 3:
              uint64_t v18 = *(int *)(v18 + 32);
              if ((v18 & 0x8000000000000000) == 0)
              {
LABEL_32:
                if (!*((unsigned char *)a2 + 160)) {
                  goto LABEL_44;
                }
                goto LABEL_63;
              }
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x182541E70);
          }
          unint64_t v10 = (long long *)(v14 + 8);
          uint64_t v11 = (_DWORD *)v3;
          uint64_t v12 = "@binding value must be non-negative";
          uint64_t v13 = 36;
        }
        else
        {
          unint64_t v10 = (long long *)(v14 + 8);
          uint64_t v11 = (_DWORD *)v3;
          uint64_t v12 = "@binding attribute must only be applied to resource variables";
          uint64_t v13 = 62;
        }
      }
      else
      {
        this = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
        if (this == 6)
        {
          if ((v6 & 1) == 0) {
            this = WGSL::AttributeValidator::error<WTF::ASCIILiteral>((_DWORD *)v3, (long long *)(v14 + 8), "@group attribute must only be applied to resource variables", 60);
          }
          uint64_t v16 = *(void *)(v14 + 24);
          if (*(unsigned char *)(v16 + 56))
          {
            int v17 = *(_DWORD *)(v16 + 48);
            switch(v17)
            {
              case 5:
                uint64_t v16 = *(void *)(v16 + 32);
                if ((v16 & 0x8000000000000000) == 0) {
                  goto LABEL_23;
                }
                break;
              case 4:
                LODWORD(v16) = *(_DWORD *)(v16 + 32);
                if (!*((unsigned char *)a2 + 168))
                {
LABEL_64:
                  *((_DWORD *)a2 + 41) = v16;
                  *((unsigned char *)a2 + 168) = 1;
                  goto LABEL_10;
                }
                goto LABEL_63;
              case 3:
                uint64_t v16 = *(int *)(v16 + 32);
                if ((v16 & 0x8000000000000000) == 0)
                {
LABEL_23:
                  if (!*((unsigned char *)a2 + 168)) {
                    goto LABEL_64;
                  }
LABEL_63:
                  unint64_t v10 = (long long *)(v14 + 8);
                  uint64_t v11 = (_DWORD *)v3;
                  uint64_t v12 = "duplicate attribute";
                  uint64_t v13 = 20;
                  goto LABEL_9;
                }
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x182541E90);
            }
            unint64_t v10 = (long long *)(v14 + 8);
            uint64_t v11 = (_DWORD *)v3;
            uint64_t v12 = "@group value must be non-negative";
            uint64_t v13 = 34;
          }
          else
          {
            unint64_t v10 = (long long *)(v14 + 8);
            uint64_t v11 = (_DWORD *)v3;
            uint64_t v12 = "@group attribute must only be applied to resource variables";
            uint64_t v13 = 60;
          }
        }
        else
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 16))(v14) == 7)
          {
            uint64_t v20 = *(void *)(v14 + 24);
            if (*((unsigned char *)a2 + 128) == 2)
            {
              unint64_t v21 = (unsigned __int8 *)*((void *)a2 + 18);
              if (!v21) {
                goto LABEL_84;
              }
              while (1)
              {
                int v22 = *((_DWORD *)v21 + 12);
                if (v22 != 10) {
                  break;
                }
                unint64_t v21 = (unsigned __int8 *)*((void *)v21 + 1);
                if (!v21) {
                  goto LABEL_84;
                }
              }
              if (v22 || ((v23 = *v21, v23 >= 6) ? (BOOL v24 = v23 == 7) : (BOOL v24 = 1), !v24))
              {
LABEL_84:
                __break(0xC471u);
                JUMPOUT(0x182541E50);
              }
            }
            else
            {
              WGSL::AttributeValidator::error<WTF::ASCIILiteral>((_DWORD *)v3, (long long *)(v14 + 8), "@id attribute must only be applied to override variables", 57);
            }
            if (!*(unsigned char *)(v20 + 56))
            {
LABEL_87:
              __break(0xC471u);
              JUMPOUT(0x182541E30);
            }
            int v25 = *(_DWORD *)(v20 + 48);
            if (v25 != 5)
            {
              if (v25 == 4)
              {
                unint64_t v26 = *(unsigned int *)(v20 + 32);
                if (v26 < 0x10000)
                {
LABEL_68:
                  uint64_t v27 = *(void *)(*(void *)(v3 + 48) + 416);
                  if (!v27) {
                    goto LABEL_74;
                  }
                  int v28 = *(_DWORD *)(v27 - 8);
                  unsigned int v29 = 9 * ((~(v26 << 15) + v26) ^ ((~(v26 << 15) + v26) >> 10));
                  unsigned int v30 = v28 & (((v29 ^ (v29 >> 6)) + ~((v29 ^ (v29 >> 6)) << 11)) ^ (((v29 ^ (v29 >> 6))
                                                                                    + ~((v29 ^ (v29 >> 6)) << 11)) >> 16));
                  int v31 = *(_DWORD *)(v27 + 4 * v30);
                  if (v31 != v26)
                  {
                    int v32 = 1;
                    while (v31 != -1)
                    {
                      unsigned int v30 = (v30 + v32) & v28;
                      int v31 = *(_DWORD *)(v27 + 4 * v30);
                      ++v32;
                      if (v31 == v26) {
                        goto LABEL_73;
                      }
                    }
LABEL_74:
                    if (*((unsigned char *)a2 + 176))
                    {
                      WGSL::AttributeValidator::error<WTF::ASCIILiteral>((_DWORD *)v3, (long long *)(v14 + 8), "duplicate attribute", 20);
                    }
                    else
                    {
                      *((_DWORD *)a2 + 43) = v26;
                      *((unsigned char *)a2 + 176) = 1;
                    }
                    uint64_t v33 = *(void *)(v3 + 48);
                    int v35 = v26;
                    this = WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add((uint64_t *)(v33 + 416), &v35, (uint64_t)&v34);
                    goto LABEL_10;
                  }
LABEL_73:
                  unint64_t v10 = (long long *)(v14 + 8);
                  uint64_t v11 = (_DWORD *)v3;
                  uint64_t v12 = "@id value must be unique";
                  uint64_t v13 = 25;
                  goto LABEL_9;
                }
              }
              else
              {
                if (v25 != 3) {
                  goto LABEL_87;
                }
                unint64_t v26 = *(int *)(v20 + 32);
                if ((v26 & 0x8000000000000000) != 0)
                {
LABEL_66:
                  unint64_t v10 = (long long *)(v14 + 8);
                  uint64_t v11 = (_DWORD *)v3;
                  uint64_t v12 = "@id value must be non-negative";
                  uint64_t v13 = 31;
                  goto LABEL_9;
                }
LABEL_58:
                if (v26 < 0x10000) {
                  goto LABEL_68;
                }
              }
              unint64_t v10 = (long long *)(v14 + 8);
              uint64_t v11 = (_DWORD *)v3;
              uint64_t v12 = "@id value must be between 0 and 65535";
              uint64_t v13 = 38;
              goto LABEL_9;
            }
            unint64_t v26 = *(void *)(v20 + 32);
            if ((v26 & 0x8000000000000000) != 0) {
              goto LABEL_66;
            }
            goto LABEL_58;
          }
          unint64_t v10 = (long long *)(v14 + 8);
          uint64_t v11 = (_DWORD *)v3;
          uint64_t v12 = "invalid attribute for variable declaration";
          uint64_t v13 = 43;
        }
      }
LABEL_9:
      this = WGSL::AttributeValidator::error<WTF::ASCIILiteral>(v11, v10, v12, v13);
LABEL_10:
      ++v8;
    }
    while (v8 != v9);
  }
  if ((v6 & 1) != 0 && (!*((unsigned char *)a2 + 168) || !*((unsigned char *)a2 + 160))) {
    return WGSL::AttributeValidator::error<WTF::ASCIILiteral>((_DWORD *)v3, (long long *)((char *)a2 + 8), "resource variables require @group and @binding attributes", 58);
  }
  return this;
}

uint64_t WGSL::AttributeValidator::visit(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(a2 + 68);
  if (v4 && !*(unsigned char *)(result + 32))
  {
    unint64_t v21 = *(void **)(a2 + 56);
    uint64_t v22 = 8 * v4 - 8;
LABEL_28:
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)v3 + 88))(v3, *v21);
    while (v22)
    {
      ++v21;
      v22 -= 8;
      if (!*(unsigned char *)(v3 + 32)) {
        goto LABEL_28;
      }
    }
  }
  uint64_t v5 = *(unsigned int *)(v2 + 84);
  if (v5 && !*(unsigned char *)(v3 + 32))
  {
    unsigned int v23 = *(void **)(v2 + 72);
    uint64_t v24 = 8 * v5 - 8;
LABEL_33:
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)v3 + 536))(v3, *v23);
    while (v24)
    {
      ++v23;
      v24 -= 8;
      if (!*(unsigned char *)(v3 + 32)) {
        goto LABEL_33;
      }
    }
  }
  if (!*(_DWORD *)(v3 + 68))
  {
    char v6 = *(unsigned char *)(v3 + 72);
    *(unsigned char *)(v3 + 72) = 0;
    *(unsigned char *)(v2 + 120) = v6;
    uint64_t v7 = *(unsigned int *)(v2 + 84);
    if (v7)
    {
      uint64_t v8 = 0;
      unsigned int v9 = 0;
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      uint64_t v27 = v2;
      uint64_t v12 = *(uint64_t **)(v2 + 72);
      uint64_t v13 = 8 * v7;
      while (1)
      {
        uint64_t v16 = *v12;
        uint64_t v17 = *(void *)(*(void *)(*v12 + 104) + 24);
        if (!*(unsigned char *)(*v12 + 128)) {
          break;
        }
        unsigned int v18 = *(_DWORD *)(v16 + 124);
        uint64_t result = ((uint64_t (*)(void))WGSL::Type::size)(*(void *)(*(void *)(*v12 + 104) + 24));
        uint64_t v19 = *(void *)(v16 + 132);
        if ((v19 & 0xFF00000000) == 0) {
          goto LABEL_14;
        }
LABEL_15:
        unint64_t v20 = (v18 + (unint64_t)v11 - 1) & -(uint64_t)v18;
        if (v20 >= 0xFFFFFFFF) {
          LODWORD(v20) = -1;
        }
        *(_DWORD *)(v16 + 112) = v20;
        if (v10 <= v18) {
          unsigned int v10 = v18;
        }
        BOOL v14 = __CFADD__(v20, v19);
        LODWORD(v19) = v20 + v19;
        if (v14) {
          uint64_t v19 = v11;
        }
        else {
          uint64_t v19 = v19;
        }
        if (v8)
        {
          if (v20 < v9) {
            goto LABEL_44;
          }
          *(_DWORD *)(v8 + 116) = v20 - v9;
        }
        BOOL v14 = __CFADD__(v20, result);
        unsigned int v15 = v20 + result;
        if (v14) {
          unsigned int v9 = v11;
        }
        else {
          unsigned int v9 = v15;
        }
        ++v12;
        uint64_t v8 = v16;
        unsigned int v11 = v19;
        v13 -= 8;
        if (!v13)
        {
          uint64_t v25 = v19 - 1;
          uint64_t v2 = v27;
          goto LABEL_39;
        }
      }
      unsigned int v18 = ((uint64_t (*)(void))WGSL::Type::alignment)(*(void *)(*(void *)(*v12 + 104) + 24));
      *(_DWORD *)(v16 + 124) = v18;
      *(unsigned char *)(v16 + 128) = 1;
      uint64_t result = ((uint64_t (*)(uint64_t))WGSL::Type::size)(v17);
      uint64_t v19 = *(void *)(v16 + 132);
      if ((v19 & 0xFF00000000) != 0) {
        goto LABEL_15;
      }
LABEL_14:
      *(_DWORD *)(v16 + 132) = result;
      *(unsigned char *)(v16 + 136) = 1;
      LODWORD(v19) = result;
      goto LABEL_15;
    }
    unsigned int v10 = 0;
    unsigned int v9 = 0;
    uint64_t v16 = 0;
    uint64_t v25 = -1;
LABEL_39:
    unint64_t v26 = (v25 + v10) & -(uint64_t)v10;
    if (v26 >= 0xFFFFFFFF) {
      LODWORD(v26) = -1;
    }
    if (v26 < v9)
    {
LABEL_44:
      __break(0xC471u);
      JUMPOUT(0x182542138);
    }
    *(_DWORD *)(v16 + 116) = v26 - v9;
    *(_DWORD *)(v2 + 132) = v10;
    *(unsigned char *)(v2 + 136) = 1;
    *(_DWORD *)(v2 + 124) = v26;
    *(unsigned char *)(v2 + 128) = 1;
  }
  return result;
}

uint64_t WGSL::AttributeValidator::visit(uint64_t this, WGSL::AST::StructureMember *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((unsigned int *)a2 + 25);
  if (v4)
  {
    uint64_t v5 = 8 * v4;
    char v6 = (uint64_t *)*((void *)a2 + 11);
    do
    {
      uint64_t v7 = *v6;
      this = (*(uint64_t (**)(uint64_t))(*(void *)*v6 + 16))(*v6);
      if (this == 3)
      {
        if (*((unsigned char *)a2 + 141)) {
          goto LABEL_12;
        }
        *((_WORD *)a2 + 70) = *(unsigned __int8 *)(v7 + 24) | 0x100;
        goto LABEL_3;
      }
      this = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
      if (this == 8)
      {
        if (*((unsigned char *)a2 + 154)) {
          goto LABEL_12;
        }
        __int16 v8 = *(_WORD *)(v7 + 24);
        *((unsigned char *)a2 + 154) = 1;
        *((_WORD *)a2 + 76) = v8;
        goto LABEL_3;
      }
      this = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
      if (this == 9)
      {
        if (!*((unsigned char *)a2 + 120))
        {
          *((unsigned char *)a2 + 120) = 1;
          goto LABEL_3;
        }
        goto LABEL_12;
      }
      this = WGSL::AttributeValidator::parseLocation((_DWORD *)v3, 0, (uint64_t)a2 + 144, v7, *(unsigned __int8 **)(*((void *)a2 + 13) + 24));
      if (this) {
        goto LABEL_3;
      }
      this = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
      if (this == 12)
      {
        *(unsigned char *)(v3 + 72) = 1;
        uint64_t v13 = *(void *)(v7 + 24);
        if (!*(unsigned char *)(v13 + 56))
        {
          unsigned int v9 = (long long *)(v7 + 8);
          unsigned int v10 = (_DWORD *)v3;
          unsigned int v11 = "@size constant value is not found";
          uint64_t v12 = 34;
          goto LABEL_13;
        }
        int v14 = *(_DWORD *)(v13 + 48);
        switch(v14)
        {
          case 5:
            unint64_t v15 = *(void *)(v13 + 32);
            if ((v15 & 0x8000000000000000) == 0) {
              goto LABEL_21;
            }
            break;
          case 4:
            unint64_t v15 = *(unsigned int *)(v13 + 32);
            if (!*(_DWORD *)(v3 + 68)) {
              goto LABEL_37;
            }
            goto LABEL_40;
          case 3:
            unint64_t v15 = *(int *)(v13 + 32);
            if ((v15 & 0x8000000000000000) == 0)
            {
LABEL_21:
              if (!*(_DWORD *)(v3 + 68))
              {
LABEL_37:
                this = WGSL::Type::size(*(WGSL::Type **)(*((void *)a2 + 13) + 24));
                if (v15 < this)
                {
                  uint64_t v19 = (long long *)(v7 + 8);
                  unint64_t v20 = (_DWORD *)v3;
                  unint64_t v21 = "@size value must be at least the byte-size of the type of the member";
                  uint64_t v22 = 69;
LABEL_39:
                  this = (uint64_t)WGSL::AttributeValidator::error<WTF::ASCIILiteral>(v20, v19, v21, v22);
                }
              }
LABEL_40:
              if (!*((unsigned char *)a2 + 136))
              {
                *((_DWORD *)a2 + 33) = v15;
                *((unsigned char *)a2 + 136) = 1;
                goto LABEL_3;
              }
LABEL_12:
              unsigned int v9 = (long long *)(v7 + 8);
              unsigned int v10 = (_DWORD *)v3;
              unsigned int v11 = "duplicate attribute";
              uint64_t v12 = 20;
LABEL_13:
              this = (uint64_t)WGSL::AttributeValidator::error<WTF::ASCIILiteral>(v10, v9, v11, v12);
              goto LABEL_3;
            }
            break;
          default:
            goto LABEL_84;
        }
        uint64_t v19 = (long long *)(v7 + 8);
        unint64_t v20 = (_DWORD *)v3;
        unint64_t v21 = "@size value must be non-negative";
        uint64_t v22 = 33;
        goto LABEL_39;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) != 1)
      {
        unsigned int v9 = (long long *)(v7 + 8);
        unsigned int v10 = (_DWORD *)v3;
        unsigned int v11 = "invalid attribute for structure member";
        uint64_t v12 = 39;
        goto LABEL_13;
      }
      *(unsigned char *)(v3 + 72) = 1;
      uint64_t v16 = *(void *)(v7 + 24);
      LOBYTE(v34[0]) = 0;
      char v36 = 0;
      if (!*(unsigned char *)(v16 + 56))
      {
        this = (uint64_t)WGSL::AttributeValidator::error<WTF::ASCIILiteral>((_DWORD *)v3, (long long *)(v7 + 8), "@align constant value does not exist", 37);
        if (v36) {
          goto LABEL_59;
        }
        goto LABEL_3;
      }
      int v35 = -1;
      uint64_t v17 = *(unsigned int *)(v16 + 48);
      if (v17 == -1)
      {
        char v36 = 1;
LABEL_84:
        __break(0xC471u);
        JUMPOUT(0x1825426ACLL);
      }
      ((void (*)(char *, unsigned int *, uint64_t))off_1ECABBC18[v17])(&v37, v34, v16 + 32);
      int v35 = v17;
      char v36 = 1;
      switch(v17)
      {
        case 5:
          uint64_t v18 = *(void *)v34;
          if (*(uint64_t *)v34 <= 0) {
            goto LABEL_48;
          }
          break;
        case 4:
          uint64_t v18 = v34[0];
          if (!v34[0]) {
            goto LABEL_48;
          }
          break;
        case 3:
          uint64_t v18 = (int)v34[0];
          if ((int)v34[0] <= 0)
          {
LABEL_48:
            unsigned int v23 = (long long *)(v7 + 8);
            uint64_t v24 = (_DWORD *)v3;
            uint64_t v25 = "@align value must be positive";
            uint64_t v26 = 30;
            goto LABEL_49;
          }
          break;
        default:
          goto LABEL_84;
      }
      if ((v18 & (v18 - 1)) != 0)
      {
        unsigned int v23 = (long long *)(v7 + 8);
        uint64_t v24 = (_DWORD *)v3;
        uint64_t v25 = "@align value must be a power of two";
        uint64_t v26 = 36;
LABEL_49:
        WGSL::AttributeValidator::error<WTF::ASCIILiteral>(v24, v23, v25, v26);
      }
      uint64_t v27 = *(WGSL::Type **)(*((void *)a2 + 13) + 24);
      if (v27)
      {
        this = WGSL::Type::alignment(v27);
        if (*((unsigned char *)a2 + 128)) {
          goto LABEL_52;
        }
      }
      else
      {
        this = 1;
        if (*((unsigned char *)a2 + 128))
        {
LABEL_52:
          this = (uint64_t)WGSL::AttributeValidator::error<WTF::ASCIILiteral>((_DWORD *)v3, (long long *)(v7 + 8), "duplicate attribute", 20);
          if (v36) {
            goto LABEL_59;
          }
          goto LABEL_3;
        }
      }
      if (this <= v18) {
        int v28 = v18;
      }
      else {
        int v28 = this;
      }
      *((_DWORD *)a2 + 31) = v28;
      *((unsigned char *)a2 + 128) = 1;
      if (v36)
      {
LABEL_59:
        if (v35 != -1) {
          this = ((uint64_t (*)(char *, unsigned int *))off_1ECABBBC0[v35])(&v37, v34);
        }
      }
LABEL_3:
      ++v6;
      v5 -= 8;
    }
    while (v5);
  }
  if ((*((unsigned __int16 *)a2 + 76) | (*((unsigned __int8 *)a2 + 154) << 16)) >= 0x10000u
    && (unint64_t)*((unsigned __int8 *)a2 + 148) << 32 == 0)
  {
    this = (uint64_t)WGSL::AttributeValidator::error<WTF::ASCIILiteral>((_DWORD *)v3, (long long *)((char *)a2 + 8), "@interpolate is only allowed on declarations that have a @location attribute", 77);
  }
  if (*((unsigned char *)a2 + 120))
  {
    if (*((unsigned __int16 *)a2 + 70) < 0x100u || *((_WORD *)a2 + 70) != 7) {
      this = (uint64_t)WGSL::AttributeValidator::error<WTF::ASCIILiteral>((_DWORD *)v3, (long long *)((char *)a2 + 8), "@invariant is only allowed on declarations that have a @builtin(position) attribute", 84);
    }
  }
  uint64_t v31 = *((unsigned int *)a2 + 25);
  if (v31 && !*(unsigned char *)(v3 + 32))
  {
    int v32 = (void *)*((void *)a2 + 11);
    uint64_t v33 = 8 * v31 - 8;
LABEL_79:
    this = (*(uint64_t (**)(uint64_t, void))(*(void *)v3 + 88))(v3, *v32);
    while (v33)
    {
      ++v32;
      v33 -= 8;
      if (!*(unsigned char *)(v3 + 32)) {
        goto LABEL_79;
      }
    }
  }
  if (!*(unsigned char *)(v3 + 32)) {
    return (*(uint64_t (**)(uint64_t, void))(*(void *)v3 + 208))(v3, *((void *)a2 + 13));
  }
  return this;
}

_DWORD *WGSL::AttributeValidator::visit(_DWORD *this, WGSL::AST::CompoundStatement *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((unsigned int *)a2 + 9);
  if (v4)
  {
    uint64_t v5 = (void *)*((void *)a2 + 3);
    uint64_t v6 = 8 * v4;
    do
    {
      uint64_t v7 = *v5;
      this = (_DWORD *)(*(uint64_t (**)(void))(*(void *)*v5 + 16))(*v5);
      if (this != 5) {
        this = WGSL::AttributeValidator::error<WTF::ASCIILiteral>((_DWORD *)v3, (long long *)(v7 + 8), "invalid attribute for compound statement", 41);
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  uint64_t v8 = *((unsigned int *)a2 + 13);
  if (v8 && !*(unsigned char *)(v3 + 32))
  {
    unsigned int v9 = (void *)*((void *)a2 + 5);
    uint64_t v10 = 8 * v8 - 8;
LABEL_10:
    this = (_DWORD *)(*(uint64_t (**)(uint64_t, void))(*(void *)v3 + 360))(v3, *v9);
    while (v10)
    {
      ++v9;
      v10 -= 8;
      if (!*(unsigned char *)(v3 + 32)) {
        goto LABEL_10;
      }
    }
  }
  return this;
}

void WGSL::AttributeValidator::validateIO(WGSL::AttributeValidator *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *((void *)this + 6);
  if (!*(unsigned char *)(v3 + 392))
  {
    __break(1u);
LABEL_185:
    __break(0xC471u);
    JUMPOUT(0x182543510);
  }
  unsigned int v5 = *(_DWORD *)(v3 + 372);
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)(v3 + 360);
    int v122 = &v6[3 * v5];
    long long v124 = (char *)this + 56;
    do
    {
      uint64_t v7 = *v6;
      long long v125 = 0;
      uint64_t v126 = 0;
      uint64_t v123 = v7;
      uint64_t v8 = *(unsigned int *)(v7 + 68);
      if (v8)
      {
        uint64_t v9 = *(void *)(v123 + 56);
        uint64_t v10 = v9 + 8 * v8;
        do
        {
          unsigned int v11 = (long long *)(*(void *)v9 + 8);
          uint64_t v12 = *(_DWORD **)(*(void *)(*(void *)v9 + 64) + 24);
          if (*(unsigned __int16 *)(*(void *)v9 + 89) >= 0x100u)
          {
            WGSL::AttributeValidator::validateBuiltinIO((uint64_t)this, (long long *)(*(void *)v9 + 8), *(void **)(*(void *)(*(void *)v9 + 64) + 24), *((unsigned __int8 *)v6 + 8), *(_WORD *)(*(void *)v9 + 89), 0, &v126);
          }
          else
          {
            uint64_t v13 = *(void *)(*(void *)v9 + 96);
            if ((v13 & 0xFF00000000) != 0)
            {
              if (*((unsigned char *)v6 + 8) == 4)
              {
                WTF::tryFastCompactMalloc((WTF *)0x3F);
                uint64_t v14 = v129;
                if (!v129)
                {
                  __break(0xC471u);
                  JUMPOUT(0x182543518);
                }
                *(_OWORD *)(v129 + 20) = *(_OWORD *)"@location cannot be used by compute shaders";
                *(void *)uint64_t v14 = 0x2B00000002;
                *(void *)(v14 + 8) = v14 + 20;
                *(_DWORD *)(v14 + 16) = 4;
                qmemcpy((void *)(v14 + 36), " be used by compute shaders", 27);
                int v127 = (int *)v14;
                long long v128 = *v11;
                uint64_t v15 = *((unsigned int *)this + 17);
                if (v15 != *((_DWORD *)this + 16)) {
                  goto LABEL_101;
                }
                unint64_t v16 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v124, v15 + 1, (unint64_t)&v127);
                uint64_t v17 = *((void *)this + 7) + 24 * *((unsigned int *)this + 17);
                uint64_t v18 = *(void *)v16;
                *(void *)unint64_t v16 = 0;
                *(void *)uint64_t v17 = v18;
                *(_OWORD *)(v17 + 8) = *(_OWORD *)(v16 + 8);
                uint64_t v19 = v127;
                ++*((_DWORD *)this + 17);
                int v127 = 0;
                if (v19)
                {
                  int v20 = *v19 - 2;
                  if (*v19 == 2) {
                    goto LABEL_100;
                  }
LABEL_16:
                  int *v19 = v20;
                }
              }
              else
              {
                if (v12)
                {
                  int16x8_t v65 = *(unsigned __int8 **)(*(void *)(*(void *)v9 + 64) + 24);
                  while (1)
                  {
                    int v66 = *((_DWORD *)v65 + 12);
                    if (v66 != 10) {
                      break;
                    }
                    int16x8_t v65 = (unsigned __int8 *)*((void *)v65 + 1);
                    if (!v65) {
                      goto LABEL_104;
                    }
                  }
                  if (!v66 && *v65 < 6u)
                  {
LABEL_111:
                    uint64_t v73 = (uint64_t)v125;
                    if (v125) {
                      goto LABEL_113;
                    }
                    uint64_t v74 = WTF::fastMalloc((WTF *)0x30);
                    *(void *)&long long v75 = -1;
                    *((void *)&v75 + 1) = -1;
                    *(_OWORD *)(v74 + 16) = v75;
                    *(_OWORD *)(v74 + 32) = v75;
                    long long v125 = (_DWORD *)(v74 + 16);
                    *(_DWORD *)(v74 + 12) = 8;
                    *(v125 - 2) = 7;
                    *(v125 - 4) = 0;
                    *(v125 - 3) = 0;
                    uint64_t v73 = (uint64_t)v125;
                    if (v125) {
LABEL_113:
                    }
                      int v76 = *(_DWORD *)(v73 - 8);
                    else {
                      int v76 = 0;
                    }
                    unsigned int v77 = 9 * ((~(v13 << 15) + v13) ^ ((~(v13 << 15) + v13) >> 10));
                    unsigned int v78 = (v77 ^ (v77 >> 6)) + ~((v77 ^ (v77 >> 6)) << 11);
                    unsigned int v79 = v76 & (v78 ^ HIWORD(v78));
                    unsigned int v80 = (int *)(v73 + 4 * v79);
                    int v81 = *v80;
                    if (*v80 != -1)
                    {
                      unint64_t v82 = 0;
                      int v83 = 1;
                      do
                      {
                        if (v81 == v13)
                        {
                          WGSL::AttributeValidator::error<WTF::ASCIILiteral,unsigned int &,WTF::ASCIILiteral>((char *)this, v11, "@location(", 11, v13, ") appears multiple times", 25);
                          goto LABEL_8;
                        }
                        if (v81 == -2) {
                          unint64_t v82 = v80;
                        }
                        unsigned int v79 = (v79 + v83) & v76;
                        unsigned int v80 = (int *)(v73 + 4 * v79);
                        int v81 = *v80;
                        ++v83;
                      }
                      while (*v80 != -1);
                      if (v82)
                      {
                        *unint64_t v82 = -1;
                        --*(v125 - 4);
                        unsigned int v80 = v82;
                      }
                    }
                    int *v80 = v13;
                    if (v125)
                    {
                      ++*(v125 - 3);
                      uint64_t v84 = (uint64_t)v125;
                      if (v125)
                      {
                        uint64_t v85 = (*(v125 - 4) + *(v125 - 3));
                        unint64_t v86 = *(v125 - 1);
                        if (v86 <= 0x400) {
                          goto LABEL_125;
                        }
LABEL_132:
                        if (v86 > 2 * v85) {
                          goto LABEL_8;
                        }
                        goto LABEL_133;
                      }
                    }
                    else
                    {
                      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
                      uint64_t v84 = 0;
                    }
                    uint64_t v85 = *(unsigned int *)(v84 - 16);
                    unint64_t v86 = *(unsigned int *)(v84 - 4);
                    if (v86 > 0x400) {
                      goto LABEL_132;
                    }
LABEL_125:
                    if (3 * v86 > 4 * v85) {
                      goto LABEL_8;
                    }
                    if (v86) {
LABEL_133:
                    }
                      unsigned int v87 = v86 << (6 * *(_DWORD *)(v84 - 12) >= (2 * v86));
                    else {
                      unsigned int v87 = 8;
                    }
                    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)&v125, v87, v80);
                    goto LABEL_8;
                  }
LABEL_104:
                  if (v12[12] == 1)
                  {
                    uint64_t v71 = *(unsigned __int8 **)v12;
                    if (*(void *)v12)
                    {
                      while (1)
                      {
                        int v72 = *((_DWORD *)v71 + 12);
                        if (v72 != 10) {
                          break;
                        }
                        uint64_t v71 = (unsigned __int8 *)*((void *)v71 + 1);
                        if (!v71) {
                          goto LABEL_128;
                        }
                      }
                      if (!v72 && *v71 < 6u) {
                        goto LABEL_111;
                      }
                    }
                  }
                }
LABEL_128:
                LOBYTE(v127) = 39;
                WGSL::AttributeValidator::error<WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)this, v11, "cannot apply @location to declaration of type '", 48, (uint64_t)v12, (char *)&v127);
              }
            }
            else
            {
              if (v12 && v12[12] == 4)
              {
                uint64_t v21 = *(void *)v12;
                uint64_t v22 = *(unsigned int *)(*(void *)v12 + 84);
                if (!v22) {
                  goto LABEL_8;
                }
                int v23 = *((unsigned __int8 *)v6 + 8);
                uint64_t v24 = *(void *)(v21 + 72);
                uint64_t v25 = v24 + 8 * v22;
                while (2)
                {
                  uint64_t v26 = (long long *)(*(void *)v24 + 8);
                  uint64_t v27 = *(void *)(*(void *)(*(void *)v24 + 104) + 24);
                  if (*(unsigned __int16 *)(*(void *)v24 + 140) >= 0x100u)
                  {
                    WGSL::AttributeValidator::validateBuiltinIO((uint64_t)this, (long long *)(*(void *)v24 + 8), *(void **)(*(void *)(*(void *)v24 + 104) + 24), v23, *(_WORD *)(*(void *)v24 + 140), 0, &v126);
                  }
                  else
                  {
                    uint64_t v28 = *(void *)(*(void *)v24 + 144);
                    if ((v28 & 0xFF00000000) != 0)
                    {
                      if (v23 == 4)
                      {
                        WTF::tryFastCompactMalloc((WTF *)0x3F);
                        uint64_t v29 = v129;
                        if (!v129) {
                          goto LABEL_185;
                        }
                        *(_OWORD *)(v129 + 20) = *(_OWORD *)"@location cannot be used by compute shaders";
                        *(void *)uint64_t v29 = 0x2B00000002;
                        *(void *)(v29 + 8) = v29 + 20;
                        *(_DWORD *)(v29 + 16) = 4;
                        qmemcpy((void *)(v29 + 36), " be used by compute shaders", 27);
                        int v127 = (int *)v29;
                        long long v128 = *v26;
                        uint64_t v30 = *((unsigned int *)this + 17);
                        if (v30 == *((_DWORD *)this + 16)) {
                          goto LABEL_28;
                        }
LABEL_43:
                        uint64_t v37 = *((void *)this + 7) + 24 * v30;
                        *(void *)uint64_t v37 = v29;
                        *(_OWORD *)(v37 + 8) = v128;
                        ++*((_DWORD *)this + 17);
                      }
                      else
                      {
                        if (v27)
                        {
                          int v35 = *(unsigned __int8 **)(*(void *)(*(void *)v24 + 104) + 24);
                          while (1)
                          {
                            int v36 = *((_DWORD *)v35 + 12);
                            if (v36 != 10) {
                              break;
                            }
                            int v35 = (unsigned __int8 *)*((void *)v35 + 1);
                            if (!v35) {
                              goto LABEL_46;
                            }
                          }
                          if (!v36 && *v35 < 6u)
                          {
LABEL_54:
                            uint64_t v40 = (uint64_t)v125;
                            if (v125) {
                              goto LABEL_56;
                            }
                            uint64_t v41 = WTF::fastMalloc((WTF *)0x30);
                            *(void *)&long long v42 = -1;
                            *((void *)&v42 + 1) = -1;
                            *(_OWORD *)(v41 + 16) = v42;
                            *(_OWORD *)(v41 + 32) = v42;
                            long long v125 = (_DWORD *)(v41 + 16);
                            *(_DWORD *)(v41 + 12) = 8;
                            *(v125 - 2) = 7;
                            *(v125 - 4) = 0;
                            *(v125 - 3) = 0;
                            uint64_t v40 = (uint64_t)v125;
                            if (v125) {
LABEL_56:
                            }
                              int v43 = *(_DWORD *)(v40 - 8);
                            else {
                              int v43 = 0;
                            }
                            unsigned int v44 = 9
                                * ((~(v28 << 15) + v28) ^ ((~(v28 << 15) + v28) >> 10));
                            unsigned int v45 = v43 & (((v44 ^ (v44 >> 6)) + ~((v44 ^ (v44 >> 6)) << 11)) ^ (((v44 ^ (v44 >> 6))
                                                                                              + ~((v44 ^ (v44 >> 6)) << 11)) >> 16));
                            size_t v46 = (_DWORD *)(v40 + 4 * v45);
                            int v47 = *v46;
                            if (*v46 != -1)
                            {
                              BOOL v48 = 0;
                              int v49 = 1;
                              do
                              {
                                if (v47 == v28)
                                {
                                  WGSL::AttributeValidator::error<WTF::ASCIILiteral,unsigned int &,WTF::ASCIILiteral>((char *)this, v26, "@location(", 11, v28, ") appears multiple times", 25);
                                  goto LABEL_22;
                                }
                                if (v47 == -2) {
                                  BOOL v48 = v46;
                                }
                                unsigned int v45 = (v45 + v49) & v43;
                                size_t v46 = (_DWORD *)(v40 + 4 * v45);
                                int v47 = *v46;
                                ++v49;
                              }
                              while (*v46 != -1);
                              if (v48)
                              {
                                *BOOL v48 = -1;
                                --*(v125 - 4);
                                size_t v46 = v48;
                              }
                            }
                            _DWORD *v46 = v28;
                            if (v125)
                            {
                              ++*(v125 - 3);
                              uint64_t v50 = (uint64_t)v125;
                              if (v125)
                              {
                                uint64_t v51 = (WTF *)(v125 - 4);
                                uint64_t v52 = (*(v125 - 4) + *(v125 - 3));
                                unint64_t v53 = *(v125 - 1);
                                if (v53 <= 0x400) {
                                  goto LABEL_68;
                                }
LABEL_75:
                                if (v53 > 2 * v52) {
                                  goto LABEL_22;
                                }
                                goto LABEL_76;
                              }
                            }
                            else
                            {
                              MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
                              uint64_t v50 = 0;
                            }
                            uint64_t v51 = (WTF *)(v50 - 16);
                            uint64_t v52 = *(unsigned int *)(v50 - 16);
                            unint64_t v53 = *(unsigned int *)(v50 - 4);
                            if (v53 > 0x400) {
                              goto LABEL_75;
                            }
LABEL_68:
                            if (3 * v53 > 4 * v52) {
                              goto LABEL_22;
                            }
                            if (!v53)
                            {
                              uint64_t v121 = v51;
                              int v120 = *(_DWORD *)(v50 - 12);
                              unsigned int v54 = 8;
                              size_t __len = 32;
                              uint64_t v55 = WTF::fastMalloc((WTF *)0x30);
                              uint64_t v56 = (void *)(v55 + 16);
                              goto LABEL_77;
                            }
LABEL_76:
                            uint64_t v121 = v51;
                            int v120 = *(_DWORD *)(v50 - 12);
                            unsigned int v54 = v53 << (6 * v120 >= (2 * v53));
                            size_t __len = 4 * v54;
                            uint64_t v55 = WTF::fastMalloc((WTF *)(__len + 16));
                            uint64_t v56 = (void *)(v55 + 16);
                            if (v54)
                            {
LABEL_77:
                              uint64_t v117 = v55;
                              size_t v57 = __len;
                              size_t __lena = (size_t)v56;
                              memset(v56, 255, v57);
                              uint64_t v55 = v117;
                              uint64_t v56 = (void *)__lena;
                            }
                            long long v125 = v56;
                            *(_DWORD *)(v55 + 12) = v54;
                            *(v125 - 2) = v54 - 1;
                            *(v125 - 4) = 0;
                            *(v125 - 3) = v120;
                            if (!v53) {
                              goto LABEL_89;
                            }
                            for (uint64_t i = 0; i != v53; ++i)
                            {
                              unsigned int v59 = *(_DWORD *)(v50 + 4 * i);
                              if (v59 <= 0xFFFFFFFD)
                              {
                                if (v125) {
                                  int v60 = *(v125 - 2);
                                }
                                else {
                                  int v60 = 0;
                                }
                                int v61 = 0;
                                unsigned int v62 = 9 * ((v59 + ~(v59 << 15)) ^ ((v59 + ~(v59 << 15)) >> 10));
                                unsigned int v63 = ((v62 ^ (v62 >> 6)) + ~((v62 ^ (v62 >> 6)) << 11)) ^ (((v62 ^ (v62 >> 6))
                                                                                           + ~((v62 ^ (v62 >> 6)) << 11)) >> 16);
                                do
                                {
                                  uint64_t v64 = v63 & v60;
                                  unsigned int v63 = ++v61 + v64;
                                }
                                while (v125[v64] != -1);
                                v125[v64] = v59;
                              }
                            }
                            if (v50) {
LABEL_89:
                            }
                              WTF::fastFree(v121, a2);
                            goto LABEL_22;
                          }
LABEL_46:
                          if (*(_DWORD *)(v27 + 48) == 1)
                          {
                            uint64_t v38 = *(unsigned __int8 **)v27;
                            if (*(void *)v27)
                            {
                              while (1)
                              {
                                int v39 = *((_DWORD *)v38 + 12);
                                if (v39 != 10) {
                                  break;
                                }
                                uint64_t v38 = (unsigned __int8 *)*((void *)v38 + 1);
                                if (!v38) {
                                  goto LABEL_71;
                                }
                              }
                              if (!v39 && *v38 < 6u) {
                                goto LABEL_54;
                              }
                            }
                          }
                        }
LABEL_71:
                        LOBYTE(v127) = 39;
                        WGSL::AttributeValidator::error<WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)this, v26, "cannot apply @location to declaration of type '", 48, v27, (char *)&v127);
                      }
                    }
                    else
                    {
                      if (!v27 || *(_DWORD *)(v27 + 48) != 4)
                      {
                        WTF::tryFastCompactMalloc((WTF *)0x34);
                        uint64_t v29 = v129;
                        if (!v129)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x182543520);
                        }
                        *(void *)uint64_t v129 = 0x2000000002;
                        *(void *)(v29 + 8) = v29 + 20;
                        *(_DWORD *)(v29 + 16) = 4;
                        qmemcpy((void *)(v29 + 20), "missing entry point IO attribute", 32);
                        int v127 = (int *)v29;
                        long long v128 = *v26;
                        uint64_t v30 = *((unsigned int *)this + 17);
                        if (v30 == *((_DWORD *)this + 16)) {
                          goto LABEL_28;
                        }
                        goto LABEL_43;
                      }
                      WTF::tryFastCompactMalloc((WTF *)0x47);
                      uint64_t v29 = v129;
                      if (!v129) {
                        goto LABEL_185;
                      }
                      *(_OWORD *)(v129 + 20) = *(_OWORD *)"nested structures cannot be used for entry point IO";
                      *(void *)uint64_t v29 = 0x3300000002;
                      *(void *)(v29 + 8) = v29 + 20;
                      *(_DWORD *)(v29 + 16) = 4;
                      qmemcpy((void *)(v29 + 36), "s cannot be used for entry point IO", 35);
                      int v127 = (int *)v29;
                      long long v128 = *v26;
                      uint64_t v30 = *((unsigned int *)this + 17);
                      if (v30 != *((_DWORD *)this + 16)) {
                        goto LABEL_43;
                      }
LABEL_28:
                      unint64_t v31 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v124, v30 + 1, (unint64_t)&v127);
                      uint64_t v32 = *((void *)this + 7) + 24 * *((unsigned int *)this + 17);
                      uint64_t v33 = *(void *)v31;
                      *(void *)unint64_t v31 = 0;
                      *(void *)uint64_t v32 = v33;
                      *(_OWORD *)(v32 + 8) = *(_OWORD *)(v31 + 8);
                      uint64_t v34 = v127;
                      ++*((_DWORD *)this + 17);
                      int v127 = 0;
                      if (v34)
                      {
                        if (*v34 == 2) {
                          WTF::StringImpl::destroy();
                        }
                        else {
                          *v34 -= 2;
                        }
                      }
                    }
                  }
LABEL_22:
                  v24 += 8;
                  if (v24 == v25) {
                    goto LABEL_8;
                  }
                  continue;
                }
              }
              WTF::tryFastCompactMalloc((WTF *)0x41);
              uint64_t v14 = v129;
              if (!v129)
              {
                __break(0xC471u);
                JUMPOUT(0x182543528);
              }
              *(_OWORD *)(v129 + 20) = *(_OWORD *)"missing entry point IO attribute on parameter";
              *(void *)uint64_t v14 = 0x2D00000002;
              *(void *)(v14 + 8) = v14 + 20;
              *(_DWORD *)(v14 + 16) = 4;
              qmemcpy((void *)(v14 + 36), "int IO attribute on parameter", 29);
              int v127 = (int *)v14;
              long long v128 = *v11;
              uint64_t v15 = *((unsigned int *)this + 17);
              if (v15 != *((_DWORD *)this + 16))
              {
LABEL_101:
                uint64_t v70 = *((void *)this + 7) + 24 * v15;
                *(void *)uint64_t v70 = v14;
                *(_OWORD *)(v70 + 8) = v128;
                ++*((_DWORD *)this + 17);
                goto LABEL_8;
              }
              unint64_t v67 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v124, v15 + 1, (unint64_t)&v127);
              uint64_t v68 = *((void *)this + 7) + 24 * *((unsigned int *)this + 17);
              uint64_t v69 = *(void *)v67;
              *(void *)unint64_t v67 = 0;
              *(void *)uint64_t v68 = v69;
              *(_OWORD *)(v68 + 8) = *(_OWORD *)(v67 + 8);
              uint64_t v19 = v127;
              ++*((_DWORD *)this + 17);
              int v127 = 0;
              if (v19)
              {
                int v20 = *v19 - 2;
                if (*v19 == 2)
                {
LABEL_100:
                  WTF::StringImpl::destroy();
                  goto LABEL_8;
                }
                goto LABEL_16;
              }
            }
          }
LABEL_8:
          v9 += 8;
        }
        while (v9 != v10);
      }
      if (*(void *)(v123 + 104))
      {
        uint64_t v88 = v126;
        if (v126)
        {
          uint64_t v126 = 0;
          WTF::fastFree((WTF *)(v88 - 16), a2);
        }
        uint64_t v89 = (uint64_t)v125;
        if (v125)
        {
          long long v125 = 0;
          WTF::fastFree((WTF *)(v89 - 16), a2);
        }
        uint64_t v90 = *(void *)(v123 + 104);
        unsigned int v91 = (long long *)(v90 + 8);
        uint64_t v92 = *(void *)(v90 + 24);
        if (*(unsigned __int16 *)(v123 + 161) >= 0x100u)
        {
          WGSL::AttributeValidator::validateBuiltinIO((uint64_t)this, v91, (void *)v92, *((unsigned __int8 *)v6 + 8), *(_WORD *)(v123 + 161), 1, &v126);
        }
        else
        {
          uint64_t v93 = *(void *)(v123 + 168);
          if ((v93 & 0xFF00000000) != 0)
          {
            WGSL::AttributeValidator::validateLocationIO((char *)this, v91, v92, *((unsigned __int8 *)v6 + 8), v93, (uint64_t *)&v125);
          }
          else
          {
            if (!v92 || *(_DWORD *)(v92 + 48) != 4)
            {
              long long v95 = this;
              uint64_t v94 = (long long *)(v90 + 8);
              uint64_t v100 = "missing entry point IO attribute on return type";
              uint64_t v101 = 48;
              goto LABEL_156;
            }
            uint64_t v102 = *(unsigned int *)(*(void *)v92 + 84);
            if (v102)
            {
              int v103 = *((unsigned __int8 *)v6 + 8);
              uint64_t v104 = *(void *)(*(void *)v92 + 72);
              uint64_t v105 = 8 * v102;
              do
              {
                int v106 = (long long *)(*(void *)v104 + 8);
                uint64_t v107 = *(void *)(*(void *)(*(void *)v104 + 104) + 24);
                if (*(unsigned __int16 *)(*(void *)v104 + 140) >= 0x100u)
                {
                  WGSL::AttributeValidator::validateBuiltinIO((uint64_t)this, v106, (void *)v107, v103, *(_WORD *)(*(void *)v104 + 140), 1, &v126);
                }
                else
                {
                  uint64_t v108 = *(void *)(*(void *)v104 + 144);
                  if ((v108 & 0xFF00000000) != 0)
                  {
                    WGSL::AttributeValidator::validateLocationIO((char *)this, v106, v107, v103, v108, (uint64_t *)&v125);
                  }
                  else
                  {
                    if (v107 && *(_DWORD *)(v107 + 48) == 4)
                    {
                      unsigned int v109 = this;
                      uint64_t v110 = "nested structures cannot be used for entry point IO";
                      uint64_t v111 = 52;
                    }
                    else
                    {
                      unsigned int v109 = this;
                      uint64_t v110 = "missing entry point IO attribute";
                      uint64_t v111 = 33;
                    }
                    WGSL::AttributeValidator::error<WTF::ASCIILiteral>(v109, v106, v110, v111);
                  }
                }
                v104 += 8;
                v105 -= 8;
              }
              while (v105);
            }
          }
        }
        if (*((unsigned char *)v6 + 8) == 1)
        {
          if (!v126) {
            goto LABEL_154;
          }
          unsigned int v96 = *(_DWORD *)(v126 - 8);
          LODWORD(v97) = v96 & 0xBDFAF04C;
          int v98 = *(unsigned __int8 *)(v126 + (v96 & 0xBDFAF04C));
          if (v98 != 7)
          {
            int v99 = 1;
            while (v98 != 255)
            {
              uint64_t v97 = (v97 + v99) & v96;
              int v98 = *(unsigned __int8 *)(v126 + v97);
              ++v99;
              if (v98 == 7) {
                goto LABEL_157;
              }
            }
LABEL_154:
            long long v95 = this;
            uint64_t v94 = v91;
LABEL_155:
            uint64_t v100 = "a vertex shader must include the 'position' builtin in its return type";
            uint64_t v101 = 71;
LABEL_156:
            WGSL::AttributeValidator::error<WTF::ASCIILiteral>(v95, v94, v100, v101);
          }
        }
      }
      else if (*((unsigned char *)v6 + 8) == 1)
      {
        uint64_t v94 = (long long *)(v123 + 8);
        long long v95 = this;
        goto LABEL_155;
      }
LABEL_157:
      if (v125) {
        WTF::fastFree((WTF *)(v125 - 4), a2);
      }
      if (v126) {
        WTF::fastFree((WTF *)(v126 - 16), a2);
      }
      v6 += 3;
    }
    while (v6 != v122);
  }
  int v112 = *((_DWORD *)this + 17);
  if (v112)
  {
    uint64_t v113 = *((void *)this + 7);
    int v114 = *((_DWORD *)this + 16);
    *((void *)this + 7) = 0;
    *((void *)this + 8) = 0;
    uint64_t v115 = a3;
    *(void *)a3 = v113;
    *(_DWORD *)(a3 + 8) = v114;
    *(_DWORD *)(a3 + 12) = v112;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    LOBYTE(v112) = 1;
  }
  else
  {
    uint64_t v115 = a3;
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(v115 + 32) = v112;
}

void WGSL::AttributeValidator::validateBuiltinIO(uint64_t a1, long long *a2, void *a3, int a4, int a5, int a6, uint64_t *a7)
{
  switch(a5)
  {
    case 0:
      uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 176);
      if ((void *)v11 == a3)
      {
        if (a4 == 2 && a6 == 1) {
          goto LABEL_73;
        }
        if (a4 == 1)
        {
          int v23 = "vertex";
          uint64_t v24 = 7;
        }
        else if (a4 == 2)
        {
          int v23 = "fragment";
          uint64_t v24 = 9;
        }
        else
        {
          int v23 = "compute";
          uint64_t v24 = 8;
        }
        unsigned int v63 = "output";
        if (!a6) {
          unsigned int v63 = "input";
        }
        uint64_t v64 = 6;
        if (a6) {
          uint64_t v64 = 7;
        }
        WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(a1, a2, "@builtin(", 10, (uint64_t)"frag_depth", 11, (uint64_t)") cannot be used for ", 22, (uint64_t)v23, v24, (uint64_t)" shader ", 9, (uint64_t)v63, v64);
      }
      else
      {
        LOBYTE(v99) = 39;
        WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WGSL::Type const&,char>(a1, a2, (int8x16_t *)"store type of @builtin(", 24, (int8x16_t *)"frag_depth", 11, ") must be '", 12, v11, (char *)&v99);
      }
      return;
    case 1:
      uint64_t v14 = *(void **)(*(void *)(a1 + 48) + 152);
      if (v14 != a3)
      {
        LOBYTE(v99) = 39;
        uint64_t v93 = v14;
        uint64_t v15 = (int8x16_t *)"front_facing";
        goto LABEL_42;
      }
      if (a4 == 2 && !a6) {
        goto LABEL_73;
      }
      if (a4 == 1)
      {
        uint64_t v25 = "vertex";
        uint64_t v26 = 7;
      }
      else if (a4 == 2)
      {
        uint64_t v25 = "fragment";
        uint64_t v26 = 9;
      }
      else
      {
        uint64_t v25 = "compute";
        uint64_t v26 = 8;
      }
      int16x8_t v65 = "output";
      if (!a6) {
        int16x8_t v65 = "input";
      }
      uint64_t v66 = 6;
      if (a6) {
        uint64_t v66 = 7;
      }
      uint64_t v94 = v25;
      uint64_t v95 = v26;
      uint64_t v96 = (uint64_t)v65;
      uint64_t v97 = v66;
      int v61 = "front_facing";
      goto LABEL_164;
    case 2:
      if (!a3
        || *((_DWORD *)a3 + 12) != 1
        || *((unsigned char *)a3 + 8) != 3
        || *a3 != *(void *)(*(void *)(a1 + 48) + 168))
      {
        WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,char>((_DWORD *)a1, a2, "store type of @builtin(", 24, "global_invocation_id", 21, ") must be '", 12, "vec3<u32>", 10, 39);
        return;
      }
      if (a4 == 4 && !a6) {
        goto LABEL_73;
      }
      if (a4 == 1)
      {
        unsigned int v77 = "vertex";
        uint64_t v78 = 7;
      }
      else if (a4 == 2)
      {
        unsigned int v77 = "fragment";
        uint64_t v78 = 9;
      }
      else
      {
        unsigned int v77 = "compute";
        uint64_t v78 = 8;
      }
      unsigned int v87 = "output";
      if (!a6) {
        unsigned int v87 = "input";
      }
      uint64_t v88 = 6;
      if (a6) {
        uint64_t v88 = 7;
      }
      WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(a1, a2, "@builtin(", 10, (uint64_t)"global_invocation_id", 21, (uint64_t)") cannot be used for ", 22, (uint64_t)v77, v78, (uint64_t)" shader ", 9, (uint64_t)v87, v88);
      return;
    case 3:
      uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 168);
      if ((void *)v13 != a3)
      {
        LOBYTE(v99) = 39;
        WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WGSL::Type const&,char>(a1, a2, (int8x16_t *)"store type of @builtin(", 24, (int8x16_t *)"instance_index", 15, ") must be '", 12, v13, (char *)&v99);
        return;
      }
      if (a4 == 1 && !a6) {
        goto LABEL_73;
      }
      if (a4 == 1)
      {
        uint64_t v21 = "vertex";
        uint64_t v22 = 7;
      }
      else if (a4 == 2)
      {
        uint64_t v21 = "fragment";
        uint64_t v22 = 9;
      }
      else
      {
        uint64_t v21 = "compute";
        uint64_t v22 = 8;
      }
      unsigned int v59 = "output";
      if (!a6) {
        unsigned int v59 = "input";
      }
      uint64_t v60 = 6;
      if (a6) {
        uint64_t v60 = 7;
      }
      uint64_t v94 = v21;
      uint64_t v95 = v22;
      uint64_t v96 = (uint64_t)v59;
      uint64_t v97 = v60;
      int v61 = "instance_index";
      goto LABEL_131;
    case 4:
      if (!a3
        || *((_DWORD *)a3 + 12) != 1
        || *((unsigned char *)a3 + 8) != 3
        || *a3 != *(void *)(*(void *)(a1 + 48) + 168))
      {
        WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,char>((_DWORD *)a1, a2, "store type of @builtin(", 24, "local_invocation_id", 20, ") must be '", 12, "vec3<u32>", 10, 39);
        return;
      }
      if (a4 == 4 && !a6) {
        goto LABEL_73;
      }
      if (a4 == 1)
      {
        long long v75 = "vertex";
        uint64_t v76 = 7;
      }
      else if (a4 == 2)
      {
        long long v75 = "fragment";
        uint64_t v76 = 9;
      }
      else
      {
        long long v75 = "compute";
        uint64_t v76 = 8;
      }
      uint64_t v85 = "output";
      if (!a6) {
        uint64_t v85 = "input";
      }
      uint64_t v86 = 6;
      if (a6) {
        uint64_t v86 = 7;
      }
      WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(a1, a2, "@builtin(", 10, (uint64_t)"local_invocation_id", 20, (uint64_t)") cannot be used for ", 22, (uint64_t)v75, v76, (uint64_t)" shader ", 9, (uint64_t)v85, v86);
      return;
    case 5:
      uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 168);
      if ((void *)v16 != a3)
      {
        LOBYTE(v99) = 39;
        WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WGSL::Type const&,char>(a1, a2, (int8x16_t *)"store type of @builtin(", 24, (int8x16_t *)"local_invocation_index", 23, ") must be '", 12, v16, (char *)&v99);
        return;
      }
      if (a4 == 4 && !a6) {
        goto LABEL_73;
      }
      if (a4 == 1)
      {
        uint64_t v27 = "vertex";
        uint64_t v28 = 7;
      }
      else if (a4 == 2)
      {
        uint64_t v27 = "fragment";
        uint64_t v28 = 9;
      }
      else
      {
        uint64_t v27 = "compute";
        uint64_t v28 = 8;
      }
      unint64_t v67 = "output";
      if (!a6) {
        unint64_t v67 = "input";
      }
      uint64_t v68 = 6;
      if (a6) {
        uint64_t v68 = 7;
      }
      WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(a1, a2, "@builtin(", 10, (uint64_t)"local_invocation_index", 23, (uint64_t)") cannot be used for ", 22, (uint64_t)v27, v28, (uint64_t)" shader ", 9, (uint64_t)v67, v68);
      return;
    case 6:
      if (!a3
        || *((_DWORD *)a3 + 12) != 1
        || *((unsigned char *)a3 + 8) != 3
        || *a3 != *(void *)(*(void *)(a1 + 48) + 168))
      {
        WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,char>((_DWORD *)a1, a2, "store type of @builtin(", 24, "num_workgroups", 15, ") must be '", 12, "vec3<u32>", 10, 39);
        return;
      }
      if (a4 == 4 && !a6) {
        goto LABEL_73;
      }
      if (a4 == 1)
      {
        int v81 = "vertex";
        uint64_t v82 = 7;
      }
      else if (a4 == 2)
      {
        int v81 = "fragment";
        uint64_t v82 = 9;
      }
      else
      {
        int v81 = "compute";
        uint64_t v82 = 8;
      }
      uint64_t v89 = "output";
      if (!a6) {
        uint64_t v89 = "input";
      }
      uint64_t v90 = 6;
      if (a6) {
        uint64_t v90 = 7;
      }
      uint64_t v94 = v81;
      uint64_t v95 = v82;
      uint64_t v96 = (uint64_t)v89;
      uint64_t v97 = v90;
      int v61 = "num_workgroups";
LABEL_131:
      uint64_t v62 = 15;
      goto LABEL_165;
    case 7:
      if (!a3
        || *((_DWORD *)a3 + 12) != 1
        || *((unsigned char *)a3 + 8) != 4
        || *a3 != *(void *)(*(void *)(a1 + 48) + 176))
      {
        WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,char>((_DWORD *)a1, a2, "store type of @builtin(", 24, "position", 9, ") must be '", 12, "vec4<f32>", 10, 39);
        return;
      }
      if (a4 == 1 && a6 == 1 || a4 == 2 && !a6) {
        goto LABEL_73;
      }
      if (a4 == 1)
      {
        unsigned int v79 = "vertex";
        uint64_t v80 = 7;
      }
      else if (a4 == 2)
      {
        unsigned int v79 = "fragment";
        uint64_t v80 = 9;
      }
      else
      {
        unsigned int v79 = "compute";
        uint64_t v80 = 8;
      }
      unsigned int v91 = "output";
      if (!a6) {
        unsigned int v91 = "input";
      }
      uint64_t v92 = 6;
      if (a6) {
        uint64_t v92 = 7;
      }
      WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(a1, a2, "@builtin(", 10, (uint64_t)"position", 9, (uint64_t)") cannot be used for ", 22, (uint64_t)v79, v80, (uint64_t)" shader ", 9, (uint64_t)v91, v92);
      return;
    case 8:
      uint64_t v17 = *(void **)(*(void *)(a1 + 48) + 168);
      if (v17 != a3)
      {
        LOBYTE(v99) = 39;
        uint64_t v93 = v17;
        uint64_t v15 = (int8x16_t *)"sample_index";
        goto LABEL_42;
      }
      if (a4 == 2 && !a6) {
        goto LABEL_73;
      }
      if (a4 == 1)
      {
        uint64_t v29 = "vertex";
        uint64_t v30 = 7;
      }
      else if (a4 == 2)
      {
        uint64_t v29 = "fragment";
        uint64_t v30 = 9;
      }
      else
      {
        uint64_t v29 = "compute";
        uint64_t v30 = 8;
      }
      uint64_t v69 = "output";
      if (!a6) {
        uint64_t v69 = "input";
      }
      uint64_t v70 = 6;
      if (a6) {
        uint64_t v70 = 7;
      }
      uint64_t v94 = v29;
      uint64_t v95 = v30;
      uint64_t v96 = (uint64_t)v69;
      uint64_t v97 = v70;
      int v61 = "sample_index";
      goto LABEL_164;
    case 9:
      uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 168);
      if ((void *)v12 != a3)
      {
        LOBYTE(v99) = 39;
        WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WGSL::Type const&,char>(a1, a2, (int8x16_t *)"store type of @builtin(", 24, (int8x16_t *)"sample_mask", 12, ") must be '", 12, v12, (char *)&v99);
        return;
      }
      if (a4 == 2) {
        goto LABEL_73;
      }
      if (a4 == 1)
      {
        uint64_t v19 = "vertex";
        uint64_t v20 = 7;
      }
      else
      {
        uint64_t v19 = "compute";
        uint64_t v20 = 8;
      }
      size_t v57 = "output";
      if (!a6) {
        size_t v57 = "input";
      }
      uint64_t v58 = 6;
      if (a6) {
        uint64_t v58 = 7;
      }
      WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(a1, a2, "@builtin(", 10, (uint64_t)"sample_mask", 12, (uint64_t)") cannot be used for ", 22, (uint64_t)v19, v20, (uint64_t)" shader ", 9, (uint64_t)v57, v58);
      return;
    case 10:
      uint64_t v18 = *(void **)(*(void *)(a1 + 48) + 168);
      if (v18 != a3)
      {
        LOBYTE(v99) = 39;
        uint64_t v93 = v18;
        uint64_t v15 = (int8x16_t *)"vertex_index";
LABEL_42:
        WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WGSL::Type const&,char>(a1, a2, (int8x16_t *)"store type of @builtin(", 24, v15, 13, ") must be '", 12, (uint64_t)v93, (char *)&v99);
        return;
      }
      if (a4 == 1 && !a6) {
        goto LABEL_73;
      }
      if (a4 == 1)
      {
        unsigned int v54 = "vertex";
        uint64_t v55 = 7;
      }
      else if (a4 == 2)
      {
        unsigned int v54 = "fragment";
        uint64_t v55 = 9;
      }
      else
      {
        unsigned int v54 = "compute";
        uint64_t v55 = 8;
      }
      uint64_t v71 = "output";
      if (!a6) {
        uint64_t v71 = "input";
      }
      uint64_t v72 = 6;
      if (a6) {
        uint64_t v72 = 7;
      }
      uint64_t v94 = v54;
      uint64_t v95 = v55;
      uint64_t v96 = (uint64_t)v71;
      uint64_t v97 = v72;
      int v61 = "vertex_index";
      goto LABEL_164;
    case 11:
      if (!a3
        || *((_DWORD *)a3 + 12) != 1
        || *((unsigned char *)a3 + 8) != 3
        || *a3 != *(void *)(*(void *)(a1 + 48) + 168))
      {
        WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,char>((_DWORD *)a1, a2, "store type of @builtin(", 24, "workgroup_id", 13, ") must be '", 12, "vec3<u32>", 10, 39);
        return;
      }
      if (a4 == 4 && !a6)
      {
LABEL_73:
        uint64_t v31 = *a7;
        if (*a7
          || (WTF::HashTable<WGSL::Builtin,WGSL::Builtin,WTF::IdentityExtractor,WTF::IntHash<WGSL::Builtin>,WTF::StrongEnumHashTraits<WGSL::Builtin>,WTF::StrongEnumHashTraits<WGSL::Builtin>>::rehash(a7, 8u), (uint64_t v31 = *a7) != 0))
        {
          unsigned int v32 = *(_DWORD *)(v31 - 8);
        }
        else
        {
          unsigned int v32 = 0;
        }
        unsigned int v33 = 9 * ((~(a5 << 15) + a5) ^ ((~(a5 << 15) + a5) >> 10));
        uint64_t v34 = v32 & (((v33 ^ (v33 >> 6)) + ~((v33 ^ (v33 >> 6)) << 11)) ^ (((v33 ^ (v33 >> 6))
                                                                          + ~((v33 ^ (v33 >> 6)) << 11)) >> 16));
        int v35 = (unsigned char *)(v31 + v34);
        int v36 = *(unsigned __int8 *)(v31 + v34);
        if (v36 == 255) {
          goto LABEL_84;
        }
        uint64_t v37 = 0;
        int v38 = 1;
        while (a5 != v36)
        {
          if (v36 == 254) {
            uint64_t v37 = v35;
          }
          uint64_t v34 = (v34 + v38) & v32;
          int v35 = (unsigned char *)(v31 + v34);
          int v36 = *(unsigned __int8 *)(v31 + v34);
          ++v38;
          if (v36 == 255)
          {
            if (v37)
            {
              *uint64_t v37 = -1;
              --*(_DWORD *)(*a7 - 16);
              int v35 = v37;
            }
LABEL_84:
            *int v35 = a5;
            if (*a7)
            {
              ++*(_DWORD *)(*a7 - 12);
              uint64_t v39 = *a7;
              if (*a7) {
                goto LABEL_86;
              }
LABEL_93:
              uint64_t v40 = *(unsigned int *)(v39 - 16);
              unint64_t v41 = *(unsigned int *)(v39 - 4);
              if (v41 > 0x400) {
                goto LABEL_94;
              }
LABEL_87:
              if (3 * v41 > 4 * v40) {
                return;
              }
              if (!v41)
              {
                unsigned int v42 = 8;
LABEL_96:
                WTF::HashTable<WGSL::Builtin,WGSL::Builtin,WTF::IdentityExtractor,WTF::IntHash<WGSL::Builtin>,WTF::StrongEnumHashTraits<WGSL::Builtin>,WTF::StrongEnumHashTraits<WGSL::Builtin>>::rehash(a7, v42);
                return;
              }
            }
            else
            {
              MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
              uint64_t v39 = *a7;
              if (!*a7) {
                goto LABEL_93;
              }
LABEL_86:
              uint64_t v40 = (*(_DWORD *)(v39 - 16) + *(_DWORD *)(v39 - 12));
              unint64_t v41 = *(unsigned int *)(v39 - 4);
              if (v41 <= 0x400) {
                goto LABEL_87;
              }
LABEL_94:
              if (v41 > 2 * v40) {
                return;
              }
            }
            unsigned int v42 = v41 << (6 * *(_DWORD *)(v39 - 12) >= (2 * v41));
            goto LABEL_96;
          }
        }
        char v43 = a5 - 1;
        if ((a5 - 1) > 0xA)
        {
          int v46 = 10;
          unsigned int v45 = "frag_depth";
        }
        else
        {
          uint64_t v44 = v43;
          unsigned int v45 = off_1E521C020[v43];
          int v46 = dword_1826CEE50[v44];
        }
        int v99 = "@builtin(";
        LODWORD(v100) = 9;
        int v103 = v45;
        int v104 = v46;
        uint64_t v101 = ") appears multiple times as pipeline input";
        int v102 = 42;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v99, (uint64_t)&v103, (uint64_t)&v101, &v98);
        int v47 = v98;
        if (!v98)
        {
          __break(0xC471u);
          JUMPOUT(0x18254449CLL);
        }
        int v98 = 0;
        int v99 = v47;
        long long v100 = *a2;
        uint64_t v48 = *(unsigned int *)(a1 + 68);
        if (v48 == *(_DWORD *)(a1 + 64))
        {
          unint64_t v49 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 56, v48 + 1, (unint64_t)&v99);
          uint64_t v50 = *(void *)(a1 + 56) + 24 * *(unsigned int *)(a1 + 68);
          uint64_t v51 = *(void *)v49;
          *(void *)unint64_t v49 = 0;
          *(void *)uint64_t v50 = v51;
          *(_OWORD *)(v50 + 8) = *(_OWORD *)(v49 + 8);
          uint64_t v52 = v99;
          ++*(_DWORD *)(a1 + 68);
          int v99 = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *(_DWORD *)v52 -= 2;
            }
          }
        }
        else
        {
          uint64_t v53 = *(void *)(a1 + 56) + 24 * v48;
          *(void *)uint64_t v53 = v47;
          *(_OWORD *)(v53 + 8) = v100;
          ++*(_DWORD *)(a1 + 68);
          int v99 = 0;
        }
        uint64_t v56 = v98;
        int v98 = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *(_DWORD *)v56 -= 2;
          }
        }
      }
      else
      {
        if (a4 == 1)
        {
          uint64_t v73 = "vertex";
          uint64_t v74 = 7;
        }
        else if (a4 == 2)
        {
          uint64_t v73 = "fragment";
          uint64_t v74 = 9;
        }
        else
        {
          uint64_t v73 = "compute";
          uint64_t v74 = 8;
        }
        int v83 = "output";
        if (!a6) {
          int v83 = "input";
        }
        uint64_t v84 = 6;
        if (a6) {
          uint64_t v84 = 7;
        }
        uint64_t v94 = v73;
        uint64_t v95 = v74;
        uint64_t v96 = (uint64_t)v83;
        uint64_t v97 = v84;
        int v61 = "workgroup_id";
LABEL_164:
        uint64_t v62 = 13;
LABEL_165:
        WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(a1, a2, "@builtin(", 10, (uint64_t)v61, v62, (uint64_t)") cannot be used for ", 22, (uint64_t)v94, v95, (uint64_t)" shader ", 9, v96, v97);
      }
      return;
    default:
      goto LABEL_73;
  }
}

uint64_t *WGSL::AttributeValidator::validateLocationIO(char *a1, long long *a2, uint64_t a3, int a4, unsigned int a5, uint64_t *a6)
{
  unsigned int v14 = a5;
  if (a4 != 4)
  {
    if (a3)
    {
      uint64_t v9 = (unsigned __int8 *)a3;
      while (1)
      {
        int v10 = *((_DWORD *)v9 + 12);
        if (v10 != 10) {
          break;
        }
        uint64_t v9 = (unsigned __int8 *)*((void *)v9 + 1);
        if (!v9) {
          goto LABEL_12;
        }
      }
      if (!v10 && *v9 < 6u)
      {
LABEL_19:
        uint64_t result = WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add(a6, (int *)&v14, (uint64_t)v13);
        if (!v13[16]) {
          return (uint64_t *)WGSL::AttributeValidator::error<WTF::ASCIILiteral,unsigned int &,WTF::ASCIILiteral>(a1, a2, "@location(", 11, v14, ") appears multiple times", 25);
        }
        return result;
      }
LABEL_12:
      if (*(_DWORD *)(a3 + 48) == 1)
      {
        uint64_t v11 = *(unsigned __int8 **)a3;
        if (*(void *)a3)
        {
          while (1)
          {
            int v12 = *((_DWORD *)v11 + 12);
            if (v12 != 10) {
              break;
            }
            uint64_t v11 = (unsigned __int8 *)*((void *)v11 + 1);
            if (!v11) {
              goto LABEL_22;
            }
          }
          if (!v12 && *v11 < 6u) {
            goto LABEL_19;
          }
        }
      }
    }
LABEL_22:
    v13[0] = 39;
    return (uint64_t *)WGSL::AttributeValidator::error<WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)a1, a2, "cannot apply @location to declaration of type '", 48, a3, v13);
  }
  return (uint64_t *)WGSL::AttributeValidator::error<WTF::ASCIILiteral>(a1, a2, "@location cannot be used by compute shaders", 44);
}

_DWORD *WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WGSL::Type const&,char>(uint64_t a1, _OWORD *a2, int8x16_t *a3, uint64_t a4, int8x16_t *a5, uint64_t a6, unsigned char *a7, uint64_t a8, uint64_t a9, char *a10)
{
  uint64_t v221 = *MEMORY[0x1E4F143B8];
  v217[0] = 0;
  unsigned int v218 = -1;
  uint64_t v18 = *(unsigned int *)(a9 + 48);
  if (v18 != -1)
  {
    ((void (*)(_DWORD **, unsigned __int8 *))off_1ECABBCE8[v18])(&v219, v217);
    unsigned int v218 = v18;
  }
  if (a4) {
    size_t v19 = a4 - 1;
  }
  else {
    size_t v19 = 0;
  }
  if (v19 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x18254515CLL);
  }
  __src = a7;
  if (a6) {
    size_t v20 = a6 - 1;
  }
  else {
    size_t v20 = 0;
  }
  if (v20 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x18254517CLL);
  }
  uint64_t v21 = a4;
  uint64_t v22 = a6;
  uint64_t v215 = a8;
  if (a8) {
    size_t v23 = a8 - 1;
  }
  else {
    size_t v23 = 0;
  }
  if (v23 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x18254519CLL);
  }
  __int16 v24 = *a10;
  WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v219);
  WGSL::Type::dump(v217, (uint64_t)&v219);
  WTF::StringPrintStream::toString((uint64_t *)&v216, (WTF::StringPrintStream *)&v219);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v219);
  uint64_t v26 = v216;
  if (v216)
  {
    int v27 = v216[1];
    if (v27 < 0) {
      goto LABEL_24;
    }
    BOOL v25 = __OFADD__(v27, 1);
    int v28 = v27 + 1;
    if (v25) {
      goto LABEL_24;
    }
  }
  else
  {
    int v28 = 1;
    if (v25)
    {
LABEL_24:
      uint64_t v31 = 0;
      goto LABEL_25;
    }
  }
  BOOL v25 = __OFADD__(v23, v28);
  int v29 = v23 + v28;
  if (v25) {
    goto LABEL_24;
  }
  BOOL v25 = __OFADD__(v20, v29);
  int v30 = v20 + v29;
  if (v25) {
    goto LABEL_24;
  }
  v213 = a2;
  uint64_t v39 = (v19 + v30);
  if (__OFADD__(v19, v30))
  {
    uint64_t v31 = 0;
    a2 = v213;
    goto LABEL_25;
  }
  if (!v216 || (int v40 = v216[4], *v216 += 2, (v40 & 4) != 0))
  {
    if (v39)
    {
      if ((v39 & 0x80000000) != 0)
      {
        uint64_t v31 = 0;
      }
      else
      {
        v212 = v26;
        char v210 = v24;
        WTF::tryFastCompactMalloc((WTF *)(v39 + 20));
        uint64_t v31 = v219;
        if (v219)
        {
          unint64_t v41 = v219 + 5;
          _DWORD *v219 = 2;
          v31[1] = v39;
          *((void *)v31 + 1) = v31 + 5;
          v31[4] = 4;
          uint64_t v26 = v212;
          if (v212) {
            *v212 += 2;
          }
          a2 = v213;
          if (v19)
          {
            if (v19 == 1)
            {
              *unint64_t v41 = a3->i8[0];
            }
            else
            {
              memcpy(v31 + 5, a3, v19);
              unint64_t v41 = v31 + 5;
              uint64_t v26 = v212;
            }
          }
          if (v26) {
            *v26 += 2;
          }
          uint64_t v70 = &v41[v19];
          if (v20)
          {
            if (v20 == 1)
            {
              *uint64_t v70 = a5->i8[0];
            }
            else
            {
              memcpy(&v41[v19], a5, v20);
              uint64_t v26 = v212;
            }
          }
          if (v26) {
            *v26 += 2;
          }
          uint64_t v71 = &v70[v20];
          if (v23)
          {
            if (v23 == 1)
            {
              *uint64_t v71 = *__src;
            }
            else
            {
              memcpy(v71, __src, v23);
              uint64_t v26 = v212;
            }
          }
          uint64_t v72 = &v71[v23];
          if (!v26)
          {
            *uint64_t v72 = v210;
            goto LABEL_25;
          }
          size_t v73 = v26[1];
          *v26 += 2;
          uint64_t v74 = (int8x16_t *)*((void *)v26 + 1);
          if ((v26[4] & 4) != 0)
          {
            if (v73)
            {
              if (v73 == 1)
              {
                *uint64_t v72 = v74->i8[0];
              }
              else
              {
                memcpy(v72, v74, v73);
                uint64_t v26 = v212;
              }
            }
            goto LABEL_128;
          }
          long long v75 = &v72[v73];
          if (v73 < 0x10)
          {
            unint64_t v76 = (unint64_t)v72;
          }
          else
          {
            unint64_t v76 = (unint64_t)&v72[v73 & 0xFFFFFFF0];
            unsigned int v77 = (unsigned long long *)v72;
            do
            {
              unsigned long long v78 = (unsigned __int128)vld2q_s8(v74->i8);
              v74 += 2;
              *v77++ = v78;
            }
            while (v77 != (unsigned long long *)v76);
          }
          if ((unsigned char *)v76 == v75)
          {
LABEL_128:
            v72[v26[1]] = v210;
LABEL_213:
            int v147 = *v26 - 2;
            if (*v26 == 2)
            {
              WTF::StringImpl::destroy();
              uint64_t v26 = v212;
              int v147 = *v212;
            }
            else
            {
              *uint64_t v26 = v147;
            }
            int v148 = v147 - 2;
            if (v148)
            {
              *uint64_t v26 = v148;
            }
            else
            {
              WTF::StringImpl::destroy();
              uint64_t v26 = v212;
              int v148 = *v212;
            }
            int v149 = v148 - 2;
            if (v149)
            {
              *uint64_t v26 = v149;
            }
            else
            {
              WTF::StringImpl::destroy();
              uint64_t v26 = v212;
              int v149 = *v212;
            }
            int v150 = v149 - 2;
            if (v150)
            {
              *uint64_t v26 = v150;
            }
            else
            {
              WTF::StringImpl::destroy();
              uint64_t v26 = v212;
            }
            goto LABEL_225;
          }
          size_t v79 = (size_t)v31 + v21 + v215 + v22 + v73;
          unint64_t v80 = v79 - v76 - (v215 != 0) - (v22 != 0) - (v21 != 0) + 20;
          if (v80 < 8) {
            goto LABEL_123;
          }
          if (v21) {
            unint64_t v81 = v76 + 1;
          }
          else {
            unint64_t v81 = v76;
          }
          if (v22) {
            ++v81;
          }
          if (v215)
          {
            ++v81;
            unint64_t v82 = v76 + 1;
          }
          else
          {
            unint64_t v82 = v76;
          }
          if (v22) {
            ++v82;
          }
          if (v21) {
            ++v82;
          }
          if (v76 < (unint64_t)&v74[2].u64[1] + 2 * v79 + -2 * v82
            && (unint64_t)v74 < v79 - v81 + v76 + 20)
          {
LABEL_123:
            int v83 = (unsigned char *)v76;
            uint64_t v84 = v74;
            goto LABEL_124;
          }
          if (v80 >= 0x20)
          {
            unint64_t v146 = v80 & 0xFFFFFFFFFFFFFFE0;
            v157 = v74 + 2;
            v158 = (int8x16_t *)(v76 + 16);
            unint64_t v159 = v80 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              int8x16_t v161 = v157[-2];
              int8x16_t v160 = v157[-1];
              int8x16_t v163 = *v157;
              int8x16_t v162 = v157[1];
              v157 += 4;
              v158[-1] = vuzp1q_s8(v161, v160);
              int8x16_t *v158 = vuzp1q_s8(v163, v162);
              v158 += 2;
              v159 -= 32;
            }
            while (v159);
            if (v80 == v146) {
              goto LABEL_128;
            }
            if ((v80 & 0x18) == 0)
            {
              uint64_t v84 = (int8x16_t *)((char *)v74 + 2 * v146);
              int v83 = (unsigned char *)(v76 + v146);
              do
              {
LABEL_124:
                char v85 = v84->i8[0];
                uint64_t v84 = (int8x16_t *)((char *)v84 + 2);
                *v83++ = v85;
              }
              while (v83 != v75);
              goto LABEL_128;
            }
          }
          else
          {
            unint64_t v146 = 0;
          }
          int v83 = (unsigned char *)(v76 + (v80 & 0xFFFFFFFFFFFFFFF8));
          uint64_t v84 = (int8x16_t *)((char *)v74 + 2 * (v80 & 0xFFFFFFFFFFFFFFF8));
          v164 = (int16x8_t *)((char *)v74 + 2 * v146);
          v165 = (int8x8_t *)(v76 + v146);
          unint64_t v166 = v146 - (v80 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            int16x8_t v167 = *v164++;
            *v165++ = vmovn_s16(v167);
            v166 += 8;
          }
          while (v166);
          if (v80 == (v80 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_128;
          }
          goto LABEL_124;
        }
        uint64_t v26 = v212;
      }
    }
    else
    {
      uint64_t v31 = (_DWORD *)MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    a2 = v213;
    if (!v26) {
      goto LABEL_25;
    }
    goto LABEL_225;
  }
  if (v39)
  {
    if (v39 > 0x7FFFFFEF)
    {
      uint64_t v31 = 0;
      a2 = v213;
      goto LABEL_225;
    }
    v212 = v26;
    __int16 v211 = v24;
    WTF::tryFastCompactMalloc((WTF *)(2 * v39 + 20));
    uint64_t v31 = v219;
    if (v219)
    {
      unint64_t v42 = (unint64_t)(v219 + 5);
      _DWORD *v219 = 2;
      v31[1] = v39;
      *((void *)v31 + 1) = v31 + 5;
      v31[4] = 0;
      uint64_t v26 = v212;
      *v212 += 2;
      unint64_t v43 = (unint64_t)v31 + 2 * v19 + 20;
      if ((v19 & 0xFFFFFFC0) != 0)
      {
        unint64_t v44 = v42 + 2 * (v19 & 0xFFFFFFC0);
        long long v45 = 0uLL;
        do
        {
          v222.val[0] = *a3;
          int8x16_t v46 = a3[1];
          v226.val[0] = a3[2];
          int8x16_t v47 = a3[3];
          a3 += 4;
          int8x16_t v48 = v47;
          v226.val[1] = 0uLL;
          v230.val[0] = v46;
          v222.val[1] = 0uLL;
          unint64_t v49 = (char *)v42;
          vst2q_s8(v49, v222);
          v49 += 32;
          v230.val[1] = 0uLL;
          vst2q_s8(v49, v230);
          uint64_t v50 = (char *)(v42 + 64);
          vst2q_s8(v50, v226);
          uint64_t v51 = (char *)(v42 + 96);
          vst2q_s8(v51, *(int8x16x2_t *)(&v45 - 1));
          v42 += 128;
        }
        while (v42 != v44);
        unint64_t v42 = v44;
      }
      a2 = v213;
      if (v42 == v43)
      {
LABEL_80:
        *v212 += 2;
        unint64_t v60 = v43 + 2 * v20;
        if ((v20 & 0xFFFFFFC0) != 0)
        {
          unint64_t v61 = v43 + 2 * (v20 & 0xFFFFFFC0);
          long long v62 = 0uLL;
          unint64_t v63 = (unint64_t)__src;
          do
          {
            v223.val[0] = *a5;
            int8x16_t v64 = a5[1];
            v227.val[0] = a5[2];
            int8x16_t v65 = a5[3];
            a5 += 4;
            int8x16_t v66 = v65;
            v227.val[1] = 0uLL;
            v231.val[0] = v64;
            v223.val[1] = 0uLL;
            unint64_t v67 = (char *)v43;
            vst2q_s8(v67, v223);
            v67 += 32;
            v231.val[1] = 0uLL;
            vst2q_s8(v67, v231);
            uint64_t v68 = (char *)(v43 + 64);
            vst2q_s8(v68, v227);
            uint64_t v69 = (char *)(v43 + 96);
            vst2q_s8(v69, *(int8x16x2_t *)(&v62 - 1));
            v43 += 128;
          }
          while (v43 != v61);
          unint64_t v43 = v61;
        }
        else
        {
          unint64_t v63 = (unint64_t)__src;
        }
        if (v43 == v60)
        {
LABEL_147:
          *v212 += 2;
          uint64_t v96 = (_WORD *)(v60 + 2 * v23);
          if ((v23 & 0xFFFFFFC0) != 0)
          {
            unint64_t v97 = v60 + 2 * (v23 & 0xFFFFFFC0);
            long long v98 = 0uLL;
            uint64_t v99 = v215;
            do
            {
              v224.val[0] = *(int8x16_t *)v63;
              int8x16_t v100 = *(int8x16_t *)(v63 + 16);
              v228.val[0] = *(int8x16_t *)(v63 + 32);
              long long v101 = *(_OWORD *)(v63 + 48);
              v63 += 64;
              long long v102 = v101;
              v228.val[1] = 0uLL;
              v232.val[0] = v100;
              v224.val[1] = 0uLL;
              int v103 = (char *)v60;
              vst2q_s8(v103, v224);
              v103 += 32;
              v232.val[1] = 0uLL;
              vst2q_s8(v103, v232);
              int v104 = (char *)(v60 + 64);
              vst2q_s8(v104, v228);
              uint64_t v105 = (char *)(v60 + 96);
              vst2q_s8(v105, *(int8x16x2_t *)(&v98 - 1));
              v60 += 128;
            }
            while (v60 != v97);
            unint64_t v60 = v97;
          }
          else
          {
            uint64_t v99 = v215;
          }
          if ((_WORD *)v60 != v96)
          {
            unint64_t v106 = (unint64_t)v31 + 2 * v99 + 2 * v22 + 2 * v21 - v60;
            uint64_t v107 = -2;
            if (v21) {
              uint64_t v108 = -2;
            }
            else {
              uint64_t v108 = 0;
            }
            if (v22) {
              uint64_t v109 = -2;
            }
            else {
              uint64_t v109 = 0;
            }
            uint64_t v110 = v108 + v109;
            if (v99) {
              uint64_t v111 = -2;
            }
            else {
              uint64_t v111 = 0;
            }
            unint64_t v112 = v106 + v110 + v111 + 18;
            if (v112 < 0xE) {
              goto LABEL_173;
            }
            if (v21) {
              uint64_t v113 = -2;
            }
            else {
              uint64_t v113 = 0;
            }
            if (v22) {
              uint64_t v114 = -2;
            }
            else {
              uint64_t v114 = 0;
            }
            uint64_t v115 = v113 + v114;
            if (!v99) {
              uint64_t v107 = 0;
            }
            unint64_t v116 = v106 + v115 + v107 + 18;
            if (v60 < v63 + (v116 >> 1) + 1 && v63 < (v116 & 0xFFFFFFFFFFFFFFFELL) + v60 + 2)
            {
LABEL_173:
              uint64_t v117 = (_WORD *)v60;
              char v118 = (unsigned __int8 *)v63;
              goto LABEL_174;
            }
            uint64_t v155 = (v112 >> 1) + 1;
            if (v112 >= 0x3E)
            {
              unint64_t v156 = v155 & 0xFFFFFFFFFFFFFFE0;
              v190 = (uint8x8_t *)(v63 + 16);
              v191 = (uint16x8_t *)(v60 + 32);
              unint64_t v192 = v155 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                uint8x16_t v193 = *(uint8x16_t *)v190[-2].i8;
                uint16x8_t v194 = vmovl_u8(*v190);
                uint16x8_t v195 = vmovl_high_u8(*(uint8x16_t *)v190->i8);
                v191[-2] = vmovl_u8(*(uint8x8_t *)v193.i8);
                v191[-1] = vmovl_high_u8(v193);
                uint16x8_t *v191 = v194;
                v191[1] = v195;
                v191 += 4;
                v190 += 4;
                v192 -= 32;
              }
              while (v192);
              if (v155 == v156) {
                goto LABEL_175;
              }
              if ((v155 & 0x18) == 0)
              {
                char v118 = (unsigned __int8 *)(v63 + v156);
                uint64_t v117 = (_WORD *)(v60 + 2 * v156);
                do
                {
LABEL_174:
                  __int16 v119 = *v118++;
                  *v117++ = v119;
                }
                while (v117 != v96);
                goto LABEL_175;
              }
            }
            else
            {
              unint64_t v156 = 0;
            }
            uint64_t v117 = (_WORD *)(v60 + 2 * (v155 & 0xFFFFFFFFFFFFFFF8));
            char v118 = (unsigned __int8 *)(v63 + (v155 & 0xFFFFFFFFFFFFFFF8));
            v196 = (uint8x8_t *)(v63 + v156);
            v197 = (uint16x8_t *)(v60 + 2 * v156);
            unint64_t v198 = v156 - (v155 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint8x8_t v199 = *v196++;
              *v197++ = vmovl_u8(v199);
              v198 += 8;
            }
            while (v198);
            if (v155 != (v155 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_174;
            }
          }
LABEL_175:
          uint64_t v120 = v212[1];
          *v212 += 2;
          uint64_t v121 = (int8x16_t *)*((void *)v212 + 1);
          if ((v212[4] & 4) == 0)
          {
            if (!v120)
            {
LABEL_212:
              v96[v120] = v211;
              goto LABEL_213;
            }
            if (v120 == 1)
            {
              *uint64_t v96 = v121->i16[0];
              LODWORD(v120) = 1;
              goto LABEL_212;
            }
            memcpy(v96, v121, 2 * v120);
            uint64_t v26 = v212;
LABEL_211:
            LODWORD(v120) = v26[1];
            goto LABEL_212;
          }
          int v122 = &v96[v120];
          if (v120 < 0x40)
          {
            unint64_t v123 = (unint64_t)v96;
          }
          else
          {
            unint64_t v123 = (unint64_t)&v96[v120 & 0xFFFFFFC0];
            long long v124 = 0uLL;
            long long v125 = (char *)v96;
            do
            {
              v225.val[0] = *v121;
              int8x16_t v126 = v121[1];
              v229.val[0] = v121[2];
              int8x16_t v127 = v121[3];
              v121 += 4;
              int8x16_t v128 = v127;
              v229.val[1] = 0uLL;
              v233.val[0] = v126;
              v225.val[1] = 0uLL;
              uint64_t v129 = v125;
              vst2q_s8(v129, v225);
              v129 += 32;
              v233.val[1] = 0uLL;
              vst2q_s8(v129, v233);
              uint64_t v130 = v125 + 64;
              vst2q_s8(v130, v229);
              uint64_t v131 = v125 + 96;
              vst2q_s8(v131, *(int8x16x2_t *)(&v124 - 1));
              v125 += 128;
            }
            while (v125 != (char *)v123);
          }
          if ((_WORD *)v123 == v122) {
            goto LABEL_211;
          }
          unint64_t v132 = (unint64_t)v31 + 2 * v99 + 2 * v22 + 2 * v21 + 2 * v120 - v123;
          uint64_t v133 = -2;
          if (v21) {
            uint64_t v134 = -2;
          }
          else {
            uint64_t v134 = 0;
          }
          if (v22) {
            uint64_t v135 = -2;
          }
          else {
            uint64_t v135 = 0;
          }
          uint64_t v136 = v134 + v135;
          if (v99) {
            uint64_t v137 = -2;
          }
          else {
            uint64_t v137 = 0;
          }
          unint64_t v138 = v132 + v136 + v137 + 18;
          if (v138 < 0xE) {
            goto LABEL_205;
          }
          if (v21) {
            uint64_t v139 = -2;
          }
          else {
            uint64_t v139 = 0;
          }
          if (v22) {
            uint64_t v140 = -2;
          }
          else {
            uint64_t v140 = 0;
          }
          uint64_t v141 = v139 + v140;
          if (!v99) {
            uint64_t v133 = 0;
          }
          unint64_t v142 = v132 + v141 + v133 + 18;
          if (v123 < (unint64_t)v121->u64 + (v142 >> 1) + 1
            && (unint64_t)v121 < (v142 & 0xFFFFFFFFFFFFFFFELL) + v123 + 2)
          {
LABEL_205:
            v143 = (_WORD *)v123;
            v144 = v121;
            goto LABEL_206;
          }
          uint64_t v168 = (v138 >> 1) + 1;
          if (v138 >= 0x3E)
          {
            unint64_t v169 = v168 & 0xFFFFFFFFFFFFFFE0;
            v200 = (uint8x8_t *)&v121[1];
            v201 = (uint16x8_t *)(v123 + 32);
            unint64_t v202 = v168 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              uint8x16_t v203 = *(uint8x16_t *)v200[-2].i8;
              uint16x8_t v204 = vmovl_u8(*v200);
              uint16x8_t v205 = vmovl_high_u8(*(uint8x16_t *)v200->i8);
              v201[-2] = vmovl_u8(*(uint8x8_t *)v203.i8);
              v201[-1] = vmovl_high_u8(v203);
              uint16x8_t *v201 = v204;
              v201[1] = v205;
              v201 += 4;
              v200 += 4;
              v202 -= 32;
            }
            while (v202);
            if (v168 == v169) {
              goto LABEL_211;
            }
            if ((v168 & 0x18) == 0)
            {
              v144 = (int8x16_t *)((char *)v121 + v169);
              v143 = (_WORD *)(v123 + 2 * v169);
              do
              {
LABEL_206:
                __int16 v145 = v144->u8[0];
                v144 = (int8x16_t *)((char *)v144 + 1);
                *v143++ = v145;
              }
              while (v143 != v122);
              goto LABEL_211;
            }
          }
          else
          {
            unint64_t v169 = 0;
          }
          v143 = (_WORD *)(v123 + 2 * (v168 & 0xFFFFFFFFFFFFFFF8));
          v144 = (int8x16_t *)((char *)v121 + (v168 & 0xFFFFFFFFFFFFFFF8));
          v206 = (uint8x8_t *)&v121->i8[v169];
          v207 = (uint16x8_t *)(v123 + 2 * v169);
          unint64_t v208 = v169 - (v168 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint8x8_t v209 = *v206++;
            *v207++ = vmovl_u8(v209);
            v208 += 8;
          }
          while (v208);
          if (v168 == (v168 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_211;
          }
          goto LABEL_206;
        }
        unint64_t v86 = (unint64_t)v31 + 2 * v22 + 2 * v21 - v43;
        uint64_t v87 = -2;
        if (v21) {
          uint64_t v88 = -2;
        }
        else {
          uint64_t v88 = 0;
        }
        if (v22) {
          uint64_t v89 = -2;
        }
        else {
          uint64_t v89 = 0;
        }
        unint64_t v90 = v86 + v88 + v89 + 18;
        if (v90 < 0xE) {
          goto LABEL_145;
        }
        if (v21) {
          uint64_t v91 = -2;
        }
        else {
          uint64_t v91 = 0;
        }
        if (!v22) {
          uint64_t v87 = 0;
        }
        unint64_t v92 = v86 + v91 + v87 + 18;
        if (v43 < (unint64_t)a5->u64 + (v92 >> 1) + 1
          && (unint64_t)a5 < (v92 & 0xFFFFFFFFFFFFFFFELL) + v43 + 2)
        {
LABEL_145:
          uint64_t v93 = (_WORD *)v43;
          uint64_t v94 = a5;
          goto LABEL_146;
        }
        uint64_t v153 = (v90 >> 1) + 1;
        if (v90 >= 0x3E)
        {
          unint64_t v154 = v153 & 0xFFFFFFFFFFFFFFE0;
          v180 = (uint8x8_t *)&a5[1];
          v181 = (uint16x8_t *)(v43 + 32);
          unint64_t v182 = v153 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            uint8x16_t v183 = *(uint8x16_t *)v180[-2].i8;
            uint16x8_t v184 = vmovl_u8(*v180);
            uint16x8_t v185 = vmovl_high_u8(*(uint8x16_t *)v180->i8);
            v181[-2] = vmovl_u8(*(uint8x8_t *)v183.i8);
            v181[-1] = vmovl_high_u8(v183);
            uint16x8_t *v181 = v184;
            v181[1] = v185;
            v181 += 4;
            v180 += 4;
            v182 -= 32;
          }
          while (v182);
          if (v153 == v154) {
            goto LABEL_147;
          }
          if ((v153 & 0x18) == 0)
          {
            uint64_t v94 = (int8x16_t *)((char *)a5 + v154);
            uint64_t v93 = (_WORD *)(v43 + 2 * v154);
            do
            {
LABEL_146:
              __int16 v95 = v94->u8[0];
              uint64_t v94 = (int8x16_t *)((char *)v94 + 1);
              *v93++ = v95;
            }
            while (v93 != (_WORD *)v60);
            goto LABEL_147;
          }
        }
        else
        {
          unint64_t v154 = 0;
        }
        uint64_t v93 = (_WORD *)(v43 + 2 * (v153 & 0xFFFFFFFFFFFFFFF8));
        uint64_t v94 = (int8x16_t *)((char *)a5 + (v153 & 0xFFFFFFFFFFFFFFF8));
        v186 = (uint8x8_t *)&a5->i8[v154];
        v187 = (uint16x8_t *)(v43 + 2 * v154);
        unint64_t v188 = v154 - (v153 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint8x8_t v189 = *v186++;
          *v187++ = vmovl_u8(v189);
          v188 += 8;
        }
        while (v188);
        if (v153 == (v153 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_147;
        }
        goto LABEL_146;
      }
      unint64_t v52 = (unint64_t)v31 + 2 * v21 - v42;
      uint64_t v53 = -2;
      if (v21) {
        uint64_t v54 = -2;
      }
      else {
        uint64_t v54 = 0;
      }
      unint64_t v55 = v52 + v54 + 18;
      if (v55 < 0xE) {
        goto LABEL_78;
      }
      if (!v21) {
        uint64_t v53 = 0;
      }
      unint64_t v56 = v52 + v53 + 18;
      if (v42 < (unint64_t)a3->u64 + (v56 >> 1) + 1
        && (unint64_t)a3 < (v56 & 0xFFFFFFFFFFFFFFFELL) + v42 + 2)
      {
LABEL_78:
        size_t v57 = (_WORD *)v42;
        uint64_t v58 = a3;
        goto LABEL_79;
      }
      uint64_t v151 = (v55 >> 1) + 1;
      if (v55 >= 0x3E)
      {
        unint64_t v152 = v151 & 0xFFFFFFFFFFFFFFE0;
        v170 = (uint8x8_t *)&a3[1];
        v171 = (uint16x8_t *)(v42 + 32);
        unint64_t v172 = v151 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          uint8x16_t v173 = *(uint8x16_t *)v170[-2].i8;
          uint16x8_t v174 = vmovl_u8(*v170);
          uint16x8_t v175 = vmovl_high_u8(*(uint8x16_t *)v170->i8);
          v171[-2] = vmovl_u8(*(uint8x8_t *)v173.i8);
          v171[-1] = vmovl_high_u8(v173);
          uint16x8_t *v171 = v174;
          v171[1] = v175;
          v171 += 4;
          v170 += 4;
          v172 -= 32;
        }
        while (v172);
        if (v151 == v152) {
          goto LABEL_80;
        }
        if ((v151 & 0x18) == 0)
        {
          uint64_t v58 = (int8x16_t *)((char *)a3 + v152);
          size_t v57 = (_WORD *)(v42 + 2 * v152);
          do
          {
LABEL_79:
            __int16 v59 = v58->u8[0];
            uint64_t v58 = (int8x16_t *)((char *)v58 + 1);
            *v57++ = v59;
          }
          while (v57 != (_WORD *)v43);
          goto LABEL_80;
        }
      }
      else
      {
        unint64_t v152 = 0;
      }
      size_t v57 = (_WORD *)(v42 + 2 * (v151 & 0xFFFFFFFFFFFFFFF8));
      uint64_t v58 = (int8x16_t *)((char *)a3 + (v151 & 0xFFFFFFFFFFFFFFF8));
      v176 = (uint8x8_t *)&a3->i8[v152];
      v177 = (uint16x8_t *)(v42 + 2 * v152);
      unint64_t v178 = v152 - (v151 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint8x8_t v179 = *v176++;
        *v177++ = vmovl_u8(v179);
        v178 += 8;
      }
      while (v178);
      if (v151 == (v151 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_80;
      }
      goto LABEL_79;
    }
    uint64_t v26 = v212;
    a2 = v213;
  }
  else
  {
    uint64_t v31 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    a2 = v213;
  }
LABEL_225:
  if (*v26 == 2) {
    WTF::StringImpl::destroy();
  }
  else {
    *v26 -= 2;
  }
LABEL_25:
  uint64_t result = v216;
  v216 = 0;
  if (!result) {
    goto LABEL_28;
  }
  if (*result != 2)
  {
    *result -= 2;
LABEL_28:
    if (v31) {
      goto LABEL_29;
    }
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x182544894);
  }
  uint64_t result = (_DWORD *)WTF::StringImpl::destroy();
  if (!v31) {
    goto LABEL_39;
  }
LABEL_29:
  v219 = v31;
  long long v220 = *a2;
  uint64_t v33 = *(unsigned int *)(a1 + 68);
  if (v33 != *(_DWORD *)(a1 + 64))
  {
    uint64_t v38 = *(void *)(a1 + 56) + 24 * v33;
    *(void *)uint64_t v38 = v31;
    *(_OWORD *)(v38 + 8) = v220;
    ++*(_DWORD *)(a1 + 68);
    v219 = 0;
LABEL_35:
    uint64_t v37 = v218;
    if (v218 == -1) {
      return result;
    }
    return (_DWORD *)((uint64_t (*)(int **, unsigned __int8 *))off_1ECABBC70[v37])(&v216, v217);
  }
  unint64_t v34 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 56, v33 + 1, (unint64_t)&v219);
  uint64_t v35 = *(void *)(a1 + 56) + 24 * *(unsigned int *)(a1 + 68);
  uint64_t v36 = *(void *)v34;
  *(void *)unint64_t v34 = 0;
  *(void *)uint64_t v35 = v36;
  *(_OWORD *)(v35 + 8) = *(_OWORD *)(v34 + 8);
  uint64_t result = v219;
  ++*(_DWORD *)(a1 + 68);
  v219 = 0;
  if (!result) {
    goto LABEL_35;
  }
  if (*result != 2)
  {
    *result -= 2;
    uint64_t v37 = v218;
    if (v218 == -1) {
      return result;
    }
    return (_DWORD *)((uint64_t (*)(int **, unsigned __int8 *))off_1ECABBC70[v37])(&v216, v217);
  }
  uint64_t result = (_DWORD *)WTF::StringImpl::destroy();
  uint64_t v37 = v218;
  if (v218 != -1) {
    return (_DWORD *)((uint64_t (*)(void, void))off_1ECABBC70[v37])(&v216, v217);
  }
  return result;
}

void WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(uint64_t a1, long long *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  BOOL v25 = a3;
  *(void *)&long long v26 = a4;
  v31[0] = a5;
  v31[1] = a6;
  v30[0] = a7;
  v30[1] = a8;
  v29[0] = a9;
  v29[1] = a10;
  v28[0] = a11;
  v28[1] = a12;
  v27[0] = a13;
  v27[1] = a14;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>((uint64_t)&v25, (uint64_t)v31, (uint64_t)v30, (uint64_t)v29, (uint64_t)v28, (uint64_t)v27, &v24);
  uint64_t v16 = v24;
  if (!v24)
  {
    __break(0xC471u);
    return;
  }
  __int16 v24 = 0;
  BOOL v25 = v16;
  long long v26 = *a2;
  uint64_t v17 = *(unsigned int *)(a1 + 68);
  if (v17 != *(_DWORD *)(a1 + 64))
  {
    uint64_t v23 = *(void *)(a1 + 56) + 24 * v17;
    *(void *)uint64_t v23 = v16;
    *(_OWORD *)(v23 + 8) = v26;
    ++*(_DWORD *)(a1 + 68);
    BOOL v25 = 0;
LABEL_8:
    uint64_t v22 = v24;
    __int16 v24 = 0;
    if (!v22) {
      return;
    }
    goto LABEL_9;
  }
  unint64_t v18 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 56, v17 + 1, (unint64_t)&v25);
  uint64_t v19 = *(void *)(a1 + 56) + 24 * *(unsigned int *)(a1 + 68);
  uint64_t v20 = *(void *)v18;
  *(void *)unint64_t v18 = 0;
  *(void *)uint64_t v19 = v20;
  *(_OWORD *)(v19 + 8) = *(_OWORD *)(v18 + 8);
  uint64_t v21 = v25;
  ++*(_DWORD *)(a1 + 68);
  BOOL v25 = 0;
  if (!v21) {
    goto LABEL_8;
  }
  if (*v21 == 2)
  {
    WTF::StringImpl::destroy();
    uint64_t v22 = v24;
    __int16 v24 = 0;
    if (!v22) {
      return;
    }
  }
  else
  {
    *v21 -= 2;
    uint64_t v22 = v24;
    __int16 v24 = 0;
    if (!v22) {
      return;
    }
  }
LABEL_9:
  if (*v22 == 2) {
    WTF::StringImpl::destroy();
  }
  else {
    *v22 -= 2;
  }
}

_DWORD *WGSL::AttributeValidator::error<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,char>(_DWORD *result, long long *a2, unsigned char *a3, uint64_t a4, unsigned char *a5, uint64_t a6, unsigned char *a7, uint64_t a8, unsigned char *a9, uint64_t a10, char a11)
{
  if (a4) {
    size_t v11 = a4 - 1;
  }
  else {
    size_t v11 = 0;
  }
  if (v11 >> 31) {
    goto LABEL_55;
  }
  if (a6) {
    size_t v12 = a6 - 1;
  }
  else {
    size_t v12 = 0;
  }
  if (v12 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825458E0);
  }
  if (a8) {
    size_t v13 = a8 - 1;
  }
  else {
    size_t v13 = 0;
  }
  if (v13 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x182545900);
  }
  if (a10) {
    size_t v14 = a10 - 1;
  }
  else {
    size_t v14 = 0;
  }
  if (v14 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x182545920);
  }
  int v15 = v14 + 1;
  if (__OFADD__(v14, 1)) {
    goto LABEL_55;
  }
  BOOL v16 = __OFADD__(v13, v15);
  int v17 = v13 + v15;
  if (v16) {
    goto LABEL_55;
  }
  BOOL v16 = __OFADD__(v12, v17);
  int v18 = v12 + v17;
  if (v16) {
    goto LABEL_55;
  }
  uint64_t v19 = (v11 + v18);
  if (__OFADD__(v11, v18)) {
    goto LABEL_55;
  }
  uint64_t v21 = result;
  if (!v19)
  {
    long long v26 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    int v40 = v26;
    long long v41 = *a2;
    uint64_t v31 = result[17];
    if (v31 == result[16]) {
      goto LABEL_46;
    }
LABEL_30:
    uint64_t v32 = *((void *)v21 + 7) + 24 * v31;
    *(void *)uint64_t v32 = v26;
    *(_OWORD *)(v32 + 8) = v41;
    ++v21[17];
    return result;
  }
  if ((v19 & 0x80000000) != 0
    || (uint64_t result = (_DWORD *)WTF::tryFastCompactMalloc((WTF *)(v19 + 20)), v25 = a3, (v26 = v40) == 0))
  {
LABEL_55:
    __break(0xC471u);
    JUMPOUT(0x1825458C0);
  }
  __src = a7;
  int v27 = a2;
  int v28 = v40 + 5;
  *int v40 = 2;
  v26[1] = v19;
  *((void *)v26 + 1) = v26 + 5;
  v26[4] = 4;
  if (!v11)
  {
LABEL_27:
    int v29 = &v28[v11];
    int v30 = v27;
    if (!v12) {
      goto LABEL_34;
    }
    goto LABEL_32;
  }
  if (v11 == 1)
  {
    unsigned char *v28 = *v25;
    goto LABEL_27;
  }
  uint64_t result = memcpy(v26 + 5, v25, v11);
  int v29 = &v28[v11];
  int v30 = v27;
  if (!v12) {
    goto LABEL_34;
  }
LABEL_32:
  if (v12 != 1)
  {
    uint64_t result = memcpy(v29, a5, v12);
    uint64_t v33 = &v29[v12];
    if (!v13) {
      goto LABEL_39;
    }
    goto LABEL_37;
  }
  *int v29 = *a5;
LABEL_34:
  uint64_t v33 = &v29[v12];
  if (!v13)
  {
LABEL_39:
    char v34 = a11;
    uint64_t v35 = &v33[v13];
    if (!v14) {
      goto LABEL_45;
    }
    goto LABEL_42;
  }
LABEL_37:
  if (v13 == 1)
  {
    *uint64_t v33 = *__src;
    goto LABEL_39;
  }
  uint64_t result = memcpy(v33, __src, v13);
  char v34 = a11;
  uint64_t v35 = &v33[v13];
  if (!v14) {
    goto LABEL_45;
  }
LABEL_42:
  if (v14 == 1) {
    *uint64_t v35 = *a9;
  }
  else {
    uint64_t result = memcpy(v35, a9, v14);
  }
LABEL_45:
  v35[v14] = v34;
  int v40 = v26;
  long long v41 = *v30;
  uint64_t v31 = v21[17];
  if (v31 != v21[16]) {
    goto LABEL_30;
  }
LABEL_46:
  unint64_t v36 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v21 + 14), v31 + 1, (unint64_t)&v40);
  uint64_t v37 = *((void *)v21 + 7) + 24 * v21[17];
  uint64_t v38 = *(void *)v36;
  *(void *)unint64_t v36 = 0;
  *(void *)uint64_t v37 = v38;
  *(_OWORD *)(v37 + 8) = *(_OWORD *)(v36 + 8);
  uint64_t result = v40;
  ++v21[17];
  int v40 = 0;
  if (result)
  {
    if (*result == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *result -= 2;
    }
  }
  return result;
}

_DWORD *WGSL::AttributeValidator::error<WTF::ASCIILiteral,WGSL::Type const&,char>(uint64_t a1, long long *a2, _DWORD *a3, uint64_t a4, uint64_t a5, char *a6)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  v25[0] = 0;
  int v26 = -1;
  uint64_t v11 = *(unsigned int *)(a5 + 48);
  if (v11 != -1)
  {
    ((void (*)(_DWORD **, unsigned __int8 *, uint64_t))off_1ECABBCE8[v11])(&v22, v25, a5);
    int v26 = v11;
  }
  char v12 = *a6;
  uint64_t v22 = a3;
  *(void *)&long long v23 = a4;
  char v24 = v12;
  uint64_t result = (_DWORD *)WTF::tryMakeString<WTF::ASCIILiteral,WGSL::Type,char>((uint64_t)&v22, v25, &v24, &v21);
  size_t v14 = v21;
  if (!v21)
  {
    __break(0xC471u);
    return result;
  }
  uint64_t v21 = 0;
  uint64_t v22 = v14;
  long long v23 = *a2;
  uint64_t v15 = *(unsigned int *)(a1 + 68);
  if (v15 != *(_DWORD *)(a1 + 64))
  {
    uint64_t v20 = *(void *)(a1 + 56) + 24 * v15;
    *(void *)uint64_t v20 = v14;
    *(_OWORD *)(v20 + 8) = v23;
    ++*(_DWORD *)(a1 + 68);
    uint64_t v22 = 0;
LABEL_10:
    uint64_t result = v21;
    uint64_t v21 = 0;
    if (!result) {
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  unint64_t v16 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 56, v15 + 1, (unint64_t)&v22);
  uint64_t v17 = *(void *)(a1 + 56) + 24 * *(unsigned int *)(a1 + 68);
  uint64_t v18 = *(void *)v16;
  *(void *)unint64_t v16 = 0;
  *(void *)uint64_t v17 = v18;
  *(_OWORD *)(v17 + 8) = *(_OWORD *)(v16 + 8);
  uint64_t v19 = v22;
  ++*(_DWORD *)(a1 + 68);
  uint64_t v22 = 0;
  if (!v19) {
    goto LABEL_10;
  }
  if (*v19 != 2)
  {
    *v19 -= 2;
    uint64_t result = v21;
    uint64_t v21 = 0;
    if (!result) {
      goto LABEL_14;
    }
LABEL_11:
    if (*result == 2) {
      uint64_t result = (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *result -= 2;
    }
    goto LABEL_14;
  }
  WTF::StringImpl::destroy();
  uint64_t result = v21;
  uint64_t v21 = 0;
  if (result) {
    goto LABEL_11;
  }
LABEL_14:
  if (v26 != -1) {
    return (_DWORD *)((uint64_t (*)(char *, unsigned __int8 *))off_1ECABBC70[v26])(&v24, v25);
  }
  return result;
}

char *WGSL::AttributeValidator::error<WTF::ASCIILiteral,unsigned int &,WTF::ASCIILiteral>(char *result, long long *a2, unsigned char *a3, uint64_t a4, unsigned int a5, unsigned char *a6, uint64_t a7)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (a4) {
    size_t v7 = a4 - 1;
  }
  else {
    size_t v7 = 0;
  }
  if (v7 >> 31) {
    goto LABEL_47;
  }
  if (a7) {
    unint64_t v8 = a7 - 1;
  }
  else {
    unint64_t v8 = 0;
  }
  unint64_t v9 = v8 >> 31;
  if (v8 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x182545EA4);
  }
  unsigned int v11 = a5;
  size_t v14 = result;
  uint64_t v15 = (uint64_t)(result + 56);
  unsigned int v16 = a5;
  do
  {
    LODWORD(v9) = v9 + 1;
    BOOL v17 = v16 > 9;
    v16 /= 0xAu;
  }
  while (v17);
  if (((v9 | v8) & 0x80000000) != 0) {
    goto LABEL_47;
  }
  BOOL v18 = __OFADD__(v9, v8);
  int v19 = v9 + v8;
  BOOL v20 = v18;
  if ((v7 & 0x80000000) != 0) {
    goto LABEL_47;
  }
  if (v20) {
    goto LABEL_47;
  }
  uint64_t v21 = (v7 + v19);
  if (__OFADD__(v7, v19)) {
    goto LABEL_47;
  }
  if (!v21)
  {
    uint64_t v22 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    unint64_t v36 = v22;
    long long v37 = *a2;
    uint64_t v26 = *((unsigned int *)result + 17);
    if (v26 == *((_DWORD *)result + 16)) {
      goto LABEL_40;
    }
LABEL_38:
    uint64_t v31 = *((void *)v14 + 7) + 24 * v26;
    *(void *)uint64_t v31 = v22;
    *(_OWORD *)(v31 + 8) = v37;
    ++*((_DWORD *)v14 + 17);
    return result;
  }
  if ((v21 & 0x80000000) != 0 || (uint64_t result = (char *)WTF::tryFastCompactMalloc((WTF *)(v21 + 20)), (v22 = v36) == 0))
  {
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x182545E84);
  }
  uint64_t v35 = a2;
  long long v23 = a6;
  uint64_t v24 = v15;
  BOOL v25 = v36 + 5;
  _DWORD *v36 = 2;
  v22[1] = v21;
  *((void *)v22 + 1) = v22 + 5;
  v22[4] = 4;
  if (v7)
  {
    if (v7 == 1) {
      unsigned char *v25 = *a3;
    }
    else {
      uint64_t result = (char *)memcpy(v22 + 5, a3, v7);
    }
  }
  uint64_t v27 = 0;
  unsigned int v28 = v11;
  do
  {
    *((unsigned char *)&v37 + v27-- + 4) = (v28 % 0xA) | 0x30;
    BOOL v17 = v28 > 9;
    v28 /= 0xAu;
  }
  while (v17);
  int v29 = &v25[v7];
  if (v27 + 14 <= 13) {
    uint64_t result = (char *)memcpy(v29, (char *)&v37 + v27 + 5, -v27);
  }
  int v30 = 0;
  uint64_t v15 = v24;
  do
  {
    ++v30;
    BOOL v17 = v11 > 9;
    v11 /= 0xAu;
  }
  while (v17);
  if (!v8)
  {
    unint64_t v36 = v22;
    long long v37 = *v35;
    uint64_t v26 = *((unsigned int *)v14 + 17);
    if (v26 == *((_DWORD *)v14 + 16)) {
      goto LABEL_40;
    }
    goto LABEL_38;
  }
  uint64_t result = &v29[v30];
  if (v8 != 1)
  {
    uint64_t result = (char *)memcpy(result, v23, v8);
    unint64_t v36 = v22;
    long long v37 = *v35;
    uint64_t v26 = *((unsigned int *)v14 + 17);
    if (v26 == *((_DWORD *)v14 + 16)) {
      goto LABEL_40;
    }
    goto LABEL_38;
  }
  *uint64_t result = *v23;
  unint64_t v36 = v22;
  long long v37 = *v35;
  uint64_t v26 = *((unsigned int *)v14 + 17);
  if (v26 != *((_DWORD *)v14 + 16)) {
    goto LABEL_38;
  }
LABEL_40:
  unint64_t v32 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15, v26 + 1, (unint64_t)&v36);
  uint64_t v33 = *((void *)v14 + 7) + 24 * *((unsigned int *)v14 + 17);
  uint64_t v34 = *(void *)v32;
  *(void *)unint64_t v32 = 0;
  *(void *)uint64_t v33 = v34;
  *(_OWORD *)(v33 + 8) = *(_OWORD *)(v32 + 8);
  uint64_t result = (char *)v36;
  ++*((_DWORD *)v14 + 17);
  unint64_t v36 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (char *)WTF::StringImpl::destroy();
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF *WGSL::validateAttributes@<X0>(WTF *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result;
  LOBYTE(v17) = 0;
  unsigned __int8 v18 = 0;
  unsigned int v16 = (uint64_t (**)(void **, void))&unk_1ECABB988;
  uint64_t v19 = 0;
  BOOL v20 = result;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  char v23 = 0;
  uint64_t v5 = *((unsigned int *)result + 23);
  if (v5)
  {
    int v6 = 0;
    size_t v7 = (void *)*((void *)result + 10);
    uint64_t v8 = 8 * v5;
    do
    {
      if (!v6) {
        uint64_t result = (WTF *)v16[3]((void **)&v16, *v7);
      }
      ++v7;
      int v6 = v18;
      v8 -= 8;
    }
    while (v8);
    BOOL v9 = v18 == 0;
    uint64_t v10 = *((unsigned int *)v3 + 19);
    if (!v10) {
      goto LABEL_15;
    }
  }
  else
  {
    BOOL v9 = 1;
    uint64_t v10 = *((unsigned int *)result + 19);
    if (!v10) {
      goto LABEL_15;
    }
  }
  if (v9)
  {
    unsigned int v11 = (void *)*((void *)v3 + 8);
    uint64_t v12 = 8 * v10 - 8;
LABEL_11:
    uint64_t result = (WTF *)v16[5]((void **)&v16, *v11);
    while (v12)
    {
      ++v11;
      v12 -= 8;
      if (!v18) {
        goto LABEL_11;
      }
    }
  }
LABEL_15:
  int v13 = HIDWORD(v22);
  if (HIDWORD(v22))
  {
    size_t v14 = v21;
    int v15 = v22;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    *(void *)a3 = v14;
    *(_DWORD *)(a3 + 8) = v15;
    *(_DWORD *)(a3 + 12) = v13;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(unsigned char *)(a3 + 32) = 1;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 32) = 0;
    unsigned int v16 = (uint64_t (**)(void **, void))&unk_1ECABB988;
    uint64_t result = v21;
    if (v21)
    {
      uint64_t v21 = 0;
      LODWORD(v22) = 0;
      uint64_t result = (WTF *)WTF::fastFree(result, a2);
    }
  }
  unsigned int v16 = (uint64_t (**)(void **, void))&unk_1ECABB740;
  if (v18)
  {
    uint64_t result = v17;
    BOOL v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF *)WTF::StringImpl::destroy();
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void WGSL::AttributeValidator::~AttributeValidator(WGSL::AttributeValidator *this, void *a2)
{
  *(void *)this = &unk_1ECABB988;
  uint64_t v3 = *((unsigned int *)this + 17);
  if (v3)
  {
    uint64_t v4 = (_DWORD **)*((void *)this + 7);
    uint64_t v5 = 24 * v3;
    do
    {
      int v6 = *v4;
      char *v4 = 0;
      if (v6)
      {
        if (*v6 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v6 -= 2;
        }
      }
      v4 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  size_t v7 = (WTF *)*((void *)this + 7);
  if (v7)
  {
    *((void *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v7, a2);
  }
  *(void *)this = &unk_1ECABB740;
  if (*((unsigned char *)this + 32))
  {
    uint64_t v8 = (_DWORD *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v8)
    {
      if (*v8 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v8 -= 2;
      }
    }
  }
}

{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t vars8;

  *(void *)this = &unk_1ECABB988;
  uint64_t v3 = *((unsigned int *)this + 17);
  if (v3)
  {
    uint64_t v4 = (_DWORD **)*((void *)this + 7);
    uint64_t v5 = 24 * v3;
    do
    {
      int v6 = *v4;
      char *v4 = 0;
      if (v6)
      {
        if (*v6 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v6 -= 2;
        }
      }
      v4 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  size_t v7 = (WTF *)*((void *)this + 7);
  if (v7)
  {
    *((void *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v7, a2);
  }
  *(void *)this = &unk_1ECABB740;
  if (*((unsigned char *)this + 32))
  {
    uint64_t v8 = (_DWORD *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v8)
    {
      if (*v8 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v8 -= 2;
      }
    }
  }
  JUMPOUT(0x18530AFF0);
}

WTF *WGSL::validateIO@<X0>(WGSL *this@<X0>, WGSL::ShaderModule *a2@<X1>, uint64_t a3@<X8>)
{
  LOBYTE(v9) = 0;
  char v10 = 0;
  uint64_t v8 = &unk_1ECABB988;
  uint64_t v11 = 0;
  uint64_t v12 = this;
  int v13 = 0;
  uint64_t v14 = 0;
  char v15 = 0;
  WGSL::AttributeValidator::validateIO((WGSL::AttributeValidator *)&v8, a2, a3);
  uint64_t v8 = &unk_1ECABB988;
  if (HIDWORD(v14))
  {
    uint64_t v4 = v13;
    uint64_t v5 = 24 * HIDWORD(v14);
    do
    {
      int v6 = *(_DWORD **)v4;
      *(void *)uint64_t v4 = 0;
      if (v6)
      {
        if (*v6 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v6 -= 2;
        }
      }
      uint64_t v4 = (WTF *)((char *)v4 + 24);
      v5 -= 24;
    }
    while (v5);
  }
  uint64_t result = v13;
  if (v13)
  {
    int v13 = 0;
    LODWORD(v14) = 0;
    uint64_t result = (WTF *)WTF::fastFree(result, v3);
  }
  uint64_t v8 = &unk_1ECABB740;
  if (v10)
  {
    uint64_t result = v9;
    BOOL v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF *)WTF::StringImpl::destroy();
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
}

uint64_t WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  if (a2 < 0xAAAAAAB)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(WTF **)result;
    unsigned int v4 = *(_DWORD *)(result + 12);
    int v5 = 24 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(void *)uint64_t v2 = v6;
    if (v4)
    {
      uint64_t v8 = v6;
      BOOL v9 = (WTF *)((char *)v3 + 24 * v4);
      unint64_t v10 = v3;
      do
      {
        unint64_t v11 = *(_DWORD **)v10;
        *(void *)unint64_t v10 = 0;
        *(void *)uint64_t v8 = v11;
        *(_OWORD *)(v8 + 8) = *(_OWORD *)((char *)v10 + 8);
        uint64_t v12 = *(_DWORD **)v10;
        *(void *)unint64_t v10 = 0;
        if (v12)
        {
          if (*v12 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v12 -= 2;
          }
        }
        unint64_t v10 = (WTF *)((char *)v10 + 24);
        v8 += 24;
      }
      while (v10 != v9);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1];
  if (v2)
  {
    uint64_t v3 = *(unsigned int *)(v2 - 4);
    if (v3)
    {
      unsigned int v4 = (_DWORD **)a2[1];
      do
      {
        int v5 = *v4;
        if (*v4 != (_DWORD *)-1)
        {
          WTF *v4 = 0;
          if (v5)
          {
            if (*v5 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v5 -= 2;
            }
          }
        }
        v4 += 2;
        --v3;
      }
      while (v3);
    }
    WTF::fastFree((WTF *)(v2 - 16), a2);
  }
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, void *a2)
{
  uint64_t v3 = (WTF *)a2[2];
  a2[2] = 0;
  if (v3) {
    WTF::fastFree(v3, a2);
  }
  uint64_t result = (_DWORD *)*a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2)
    {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else
    {
      *result -= 2;
    }
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 40);
  if (result == a2 + 16) {
    return (*(uint64_t (**)(uint64_t))(*(void *)(a2 + 16) + 32))(a2 + 16);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Type const*>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Type const*,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(a2 + 1, a3 + 1);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = *(_DWORD **)a3;
  if (*(void *)a3) {
    *v4 += 2;
  }
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(a3 + 8);
  int v5 = *(unsigned int **)(a3 + 16);
  if (v5)
  {
    uint64_t v6 = v5 + 2;
    uint64_t v7 = *v5;
    __n128 result = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v7 + 8));
    *__n128 result = v7;
    if (v7)
    {
      BOOL v9 = result + 2;
      unint64_t v10 = (v7 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v10 < 7)
      {
        unint64_t v11 = v5 + 2;
      }
      else
      {
        unint64_t v11 = v5 + 2;
        if ((unint64_t)((char *)result - (char *)v5) >= 0x20)
        {
          uint64_t v12 = 0;
          unint64_t v13 = v10 + 1;
          uint64_t v14 = 2 * (v13 & 0x3FFFFFFFFFFFFFFCLL);
          BOOL v9 = (void *)((char *)v9 + v14 * 4);
          unint64_t v11 = &v6[v14];
          uint64_t v15 = v13 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            unsigned int v16 = &result[v12];
            long long v17 = *(_OWORD *)&v5[v12 + 6];
            *(_OWORD *)(v16 + 2) = *(_OWORD *)&v5[v12 + 2];
            *(_OWORD *)(v16 + 6) = v17;
            v12 += 8;
            v15 -= 4;
          }
          while (v15);
          if (v13 == (v13 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_10;
          }
        }
      }
      do
      {
        uint64_t v18 = *(void *)v11;
        v11 += 2;
        *v9++ = v18;
      }
      while (v11 != &v6[2 * v7]);
    }
LABEL_10:
    *(void *)(a2 + 16) = result;
    return result;
  }
  __n128 result = 0;
  *(void *)(a2 + 16) = 0;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a3 + 12);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v5;
  if (!v5) {
    goto LABEL_4;
  }
  if (!(v5 >> 29))
  {
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(a2 + 8) = v5;
    *(void *)a2 = v6;
    memcpy(v6, *(const void **)a3, 8 * *(unsigned int *)(a3 + 12));
LABEL_4:
    uint64_t v7 = *(void *)(a3 + 16);
    *(unsigned char *)(a2 + 24) = *(unsigned char *)(a3 + 24);
    *(void *)(a2 + 16) = v7;
    return;
  }
  __break(0xC471u);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, uint64_t a2, __int16 *a3)
{
  __int16 v3 = *a3;
  *(unsigned char *)(a2 + 2) = *((unsigned char *)a3 + 2);
  *(_WORD *)a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13ELm13EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL5Types9PrimitiveENS9_6VectorENS9_6MatrixENS9_5ArrayENS9_6StructENS9_15PrimitiveStructENS9_8FunctionENS9_7TextureENS9_14TextureStorageENS9_12TextureDepthENS9_9ReferenceENS9_7PointerENS9_6AtomicENS9_15TypeConstructorENS9_6BottomEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  uint64_t result = *(void *)(a3 + 40);
  if (result)
  {
    if (result == a3 + 16)
    {
      *(void *)(a2 + 40) = a2 + 16;
      uint64_t v5 = *(uint64_t (**)(void))(**(void **)(a3 + 40) + 24);
      return v5();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      *(void *)(a2 + 40) = result;
    }
  }
  else
  {
    *(void *)(a2 + 40) = 0;
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Type const*>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Type const*,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(uint64_t *a1, void *a2)
{
  *a1 = 0;
  if (!*a2) {
    return a1;
  }
  uint64_t v3 = *(unsigned int *)(*a2 - 12);
  if (!v3) {
    return a1;
  }
  unsigned int v5 = (v3 - 1) | ((v3 - 1) >> 1) | (((v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  unsigned int v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  unint64_t v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  if (3 * v7 <= 4 * v3)
  {
LABEL_7:
    LODWORD(v7) = 2 * v7;
    if (v7 <= 0x400) {
      goto LABEL_8;
    }
LABEL_10:
    if ((double)v7 * 0.416666667 > (double)v3) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_8:
  if ((double)v7 * 0.604166667 <= (double)v3) {
LABEL_11:
  }
    LODWORD(v7) = 2 * v7;
LABEL_12:
  if (v7 <= 8) {
    unsigned int v8 = 8;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * v8 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  unint64_t v10 = (void *)*a2;
  if (*a2)
  {
    uint64_t v11 = *((unsigned int *)v10 - 1);
    uint64_t v12 = (WTF::StringImpl **)&v10[2 * v11];
    if (!*((_DWORD *)v10 - 3))
    {
      unint64_t v13 = (WTF::StringImpl **)&v10[2 * v11];
      uint64_t v12 = v13;
      if (!v10) {
        goto LABEL_28;
      }
      goto LABEL_25;
    }
    unint64_t v13 = (WTF::StringImpl **)v10;
    if (v11)
    {
      uint64_t v14 = 16 * v11;
      unint64_t v13 = (WTF::StringImpl **)v10;
      do
      {
        if ((unint64_t)*v13 + 1 > 1) {
          goto LABEL_24;
        }
        v13 += 2;
        v14 -= 16;
      }
      while (v14);
      unint64_t v13 = v12;
      if (!v10)
      {
LABEL_28:
        uint64_t v15 = 0;
        if (!v13) {
          return a1;
        }
        while (1)
        {
LABEL_31:
          uint64_t v17 = *a1;
          if (*a1)
          {
            int v18 = *(_DWORD *)(v17 - 8);
            uint64_t v19 = *v13;
            unsigned int v20 = *((_DWORD *)*v13 + 4);
            if (v20 >= 0x100) {
              goto LABEL_33;
            }
          }
          else
          {
            int v18 = 0;
            uint64_t v19 = *v13;
            unsigned int v20 = *((_DWORD *)*v13 + 4);
            if (v20 >= 0x100)
            {
LABEL_33:
              unsigned int v21 = v20 >> 8;
              goto LABEL_36;
            }
          }
          unsigned int v21 = WTF::StringImpl::hashSlowCase(v19);
LABEL_36:
          int v22 = 0;
          do
          {
            uint64_t v23 = v21 & v18;
            unsigned int v21 = ++v22 + v23;
          }
          while (*(void *)(v17 + 16 * v23));
          uint64_t v24 = *v13;
          if (*v13) {
            *(_DWORD *)v24 += 2;
          }
          BOOL v25 = (WTF::StringImpl **)(v17 + 16 * v23);
          uint64_t v26 = v13[1];
          unsigned char *v25 = v24;
          v25[1] = v26;
          uint64_t v27 = v13 + 2;
          unint64_t v13 = v12;
          if (v27 != v12)
          {
            unint64_t v13 = v27;
            while ((unint64_t)*v13 + 1 <= 1)
            {
              v13 += 2;
              if (v13 == v12)
              {
                unint64_t v13 = v12;
                break;
              }
            }
          }
          if (v13 == v15) {
            return a1;
          }
        }
      }
      goto LABEL_25;
    }
  }
  else
  {
    unint64_t v13 = 0;
    uint64_t v12 = 0;
  }
LABEL_24:
  if (!v10) {
    goto LABEL_28;
  }
LABEL_25:
  uint64_t v15 = (WTF::StringImpl **)&v10[2 * *((unsigned int *)v10 - 1)];
  if (v15 != v13) {
    goto LABEL_31;
  }
  return a1;
}

void WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 8);
  BOOL v9 = v8 != 0;
  unint64_t v10 = v8 - 1;
  if (v9) {
    unint64_t v11 = v10;
  }
  else {
    unint64_t v11 = 0;
  }
  if (v11 >> 31) {
    goto LABEL_36;
  }
  uint64_t v12 = *(void *)(a2 + 8);
  BOOL v9 = v12 != 0;
  unint64_t v13 = v12 - 1;
  if (!v9) {
    unint64_t v13 = 0;
  }
  if (v13 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x182546DD4);
  }
  uint64_t v14 = *(void *)(a3 + 8);
  BOOL v9 = v14 != 0;
  unint64_t v15 = v14 - 1;
  if (v9) {
    unint64_t v16 = v15;
  }
  else {
    unint64_t v16 = 0;
  }
  if (v16 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x182546DF4);
  }
  uint64_t v17 = *(void *)(a4 + 8);
  BOOL v9 = v17 != 0;
  unint64_t v18 = v17 - 1;
  if (v9) {
    unint64_t v19 = v18;
  }
  else {
    unint64_t v19 = 0;
  }
  if (v19 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x182546E14);
  }
  uint64_t v20 = *(void *)(a5 + 8);
  BOOL v9 = v20 != 0;
  unint64_t v21 = v20 - 1;
  if (v9) {
    unint64_t v22 = v21;
  }
  else {
    unint64_t v22 = 0;
  }
  if (v22 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x182546E34);
  }
  uint64_t v23 = *(void *)(a6 + 8);
  BOOL v9 = v23 != 0;
  uint64_t v24 = v23 - 1;
  unint64_t v25 = v9 ? v24 : 0;
  if (v25 >> 31)
  {
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x182546DB4);
  }
  int v26 = v22 + v25;
  if (__OFADD__(v22, v25)) {
    goto LABEL_30;
  }
  BOOL v27 = __OFADD__(v19, v26);
  int v28 = v19 + v26;
  if (v27
    || (v27 = __OFADD__(v16, v28), int v29 = v16 + v28, v27)
    || (BOOL v27 = __OFADD__(v13, v29), v30 = v13 + v29, v27)
    || (BOOL v27 = __OFADD__(v11, v30), v31 = v11 + v30, v27))
  {
LABEL_30:
    *a7 = 0;
  }
  else
  {
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v31, 1, *(int8x16_t **)a1, v11, *(unsigned char **)a2, v13, *(unsigned char **)a3, v16, a7, *(unsigned char **)a4, v19, *(unsigned char **)a5, v22, *(unsigned char **)a6, v25);
  }
}

void WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(unsigned int a1@<W0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, unsigned char *a5@<X4>, unsigned int a6@<W5>, unsigned char *a7@<X6>, unsigned int a8@<W7>, void *a9@<X8>, unsigned char *a10, unsigned int a11, unsigned char *a12, unsigned int a13, unsigned char *a14, unsigned int a15)
{
  if (!a2)
  {
    if (!a1) {
      goto LABEL_11;
    }
    if (a1 > 0x7FFFFFEF) {
      goto LABEL_10;
    }
    WTF::tryFastCompactMalloc((WTF *)(2 * a1 + 20));
    uint64_t v19 = v65;
    if (!v65) {
      goto LABEL_50;
    }
    unint64_t v26 = v65 + 20;
    *(_DWORD *)uint64_t v65 = 2;
    *(_DWORD *)(v65 + 4) = a1;
    *(void *)(v65 + 8) = v65 + 20;
    *(_DWORD *)(v65 + 16) = 0;
    unint64_t v27 = v65 + 20 + 2 * a4;
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      unint64_t v28 = v26 + 2 * (a4 & 0xFFFFFFC0);
      long long v29 = 0uLL;
      do
      {
        v66.val[0] = *a3;
        int8x16_t v30 = a3[1];
        v67.val[0] = a3[2];
        int8x16_t v31 = a3[3];
        a3 += 4;
        int8x16_t v32 = v31;
        v67.val[1] = 0uLL;
        v68.val[0] = v30;
        v66.val[1] = 0uLL;
        uint64_t v33 = (char *)v26;
        vst2q_s8(v33, v66);
        v33 += 32;
        v68.val[1] = 0uLL;
        vst2q_s8(v33, v68);
        uint64_t v34 = (char *)(v26 + 64);
        vst2q_s8(v34, v67);
        uint64_t v35 = (char *)(v26 + 96);
        vst2q_s8(v35, *(int8x16x2_t *)(&v29 - 1));
        v26 += 128;
      }
      while (v26 != v28);
      unint64_t v26 = v28;
    }
    if (v26 == v27)
    {
LABEL_28:
      WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v27, (unint64_t)a5, a6, (unint64_t)a7, a8, (unint64_t)a10, a11, v25, (unint64_t)a12, a13, (unint64_t)a14, a15);
      goto LABEL_50;
    }
    unint64_t v36 = v65 + 2 * a4 - v26 + 18;
    if (v36 < 0xE
      || (v26 < (unint64_t)a3->u64 + (v36 >> 1) + 1
        ? (BOOL v37 = (unint64_t)a3 >= (v36 & 0xFFFFFFFFFFFFFFFELL) + v26 + 2)
        : (BOOL v37 = 1),
          !v37))
    {
      int v40 = (_WORD *)v26;
      long long v41 = a3;
      goto LABEL_27;
    }
    uint64_t v38 = (v36 >> 1) + 1;
    if (v36 >= 0x3E)
    {
      unint64_t v39 = v38 & 0xFFFFFFFFFFFFFFE0;
      int8x16_t v48 = (uint8x8_t *)&a3[1];
      unint64_t v49 = (uint16x8_t *)(v26 + 32);
      unint64_t v50 = v38 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v51 = *(uint8x16_t *)v48[-2].i8;
        uint16x8_t v52 = vmovl_u8(*v48);
        uint16x8_t v53 = vmovl_high_u8(*(uint8x16_t *)v48->i8);
        v49[-2] = vmovl_u8(*(uint8x8_t *)v51.i8);
        v49[-1] = vmovl_high_u8(v51);
        *unint64_t v49 = v52;
        v49[1] = v53;
        v49 += 4;
        v48 += 4;
        v50 -= 32;
      }
      while (v50);
      if (v38 == v39) {
        goto LABEL_28;
      }
      if ((v38 & 0x18) == 0)
      {
        long long v41 = (int8x16_t *)((char *)a3 + v39);
        int v40 = (_WORD *)(v26 + 2 * v39);
        do
        {
LABEL_27:
          __int16 v42 = v41->u8[0];
          long long v41 = (int8x16_t *)((char *)v41 + 1);
          *v40++ = v42;
        }
        while (v40 != (_WORD *)v27);
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v39 = 0;
    }
    int v40 = (_WORD *)(v26 + 2 * (v38 & 0xFFFFFFFFFFFFFFF8));
    long long v41 = (int8x16_t *)((char *)a3 + (v38 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v54 = (uint8x8_t *)&a3->i8[v39];
    unint64_t v55 = (uint16x8_t *)(v26 + 2 * v39);
    unint64_t v56 = v39 - (v38 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v57 = *v54++;
      *v55++ = vmovl_u8(v57);
      v56 += 8;
    }
    while (v56);
    if (v38 == (v38 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (!a1)
  {
LABEL_11:
    uint64_t v19 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_50;
  }
  if ((a1 & 0x80000000) != 0)
  {
LABEL_10:
    uint64_t v19 = 0;
    goto LABEL_50;
  }
  WTF::tryFastCompactMalloc((WTF *)(a1 + 20));
  uint64_t v19 = v65;
  if (v65)
  {
    unsigned int v20 = a6;
    unint64_t v21 = (unsigned char *)(v65 + 20);
    *(_DWORD *)uint64_t v65 = 2;
    *(_DWORD *)(v65 + 4) = a1;
    *(void *)(v65 + 8) = v65 + 20;
    *(_DWORD *)(v65 + 16) = 4;
    unsigned int v22 = a11;
    unsigned int v23 = a8;
    if (a4)
    {
      if (a4 == 1)
      {
        unsigned char *v21 = a3->i8[0];
      }
      else
      {
        memcpy((void *)(v65 + 20), a3, a4);
        unsigned int v20 = a6;
        unsigned int v23 = a8;
        unsigned int v22 = a11;
      }
    }
    unint64_t v43 = &v21[a4];
    if (v20)
    {
      if (v20 == 1)
      {
        *unint64_t v43 = *a5;
      }
      else
      {
        memcpy(v43, a5, v20);
        unsigned int v20 = a6;
        unsigned int v23 = a8;
        unsigned int v22 = a11;
      }
    }
    unint64_t v44 = &v43[v20];
    if (v23)
    {
      if (v23 == 1)
      {
        *unint64_t v44 = *a7;
      }
      else
      {
        memcpy(v44, a7, v23);
        unsigned int v23 = a8;
        unsigned int v22 = a11;
      }
    }
    long long v45 = &v44[v23];
    if (v22)
    {
      if (v22 == 1)
      {
        *long long v45 = *a10;
      }
      else
      {
        memcpy(v45, a10, v22);
        unsigned int v22 = a11;
      }
    }
    int8x16_t v46 = &v45[v22];
    if (a13)
    {
      if (a13 == 1) {
        unsigned char *v46 = *a12;
      }
      else {
        memcpy(v46, a12, a13);
      }
    }
    if (a15)
    {
      int8x16_t v47 = &v46[a13];
      if (a15 == 1) {
        *int8x16_t v47 = *a14;
      }
      else {
        memcpy(v47, a14, a15);
      }
    }
  }
LABEL_50:
  *a9 = v19;
}

uint16x8_t WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unsigned int a5, unint64_t a6, unsigned int a7, uint64_t a8, unint64_t a9, unsigned int a10, unint64_t a11, unsigned int a12)
{
  unint64_t v12 = a1 + 2 * a3;
  if ((a3 & 0xFFFFFFC0) == 0)
  {
    unint64_t v13 = a1;
    uint64_t v22 = a3;
    if (a1 == v12) {
      goto LABEL_17;
    }
LABEL_7:
    unint64_t v23 = a1 + 2 * v22 - v13 - 2;
    if (v23 < 0xE
      || (v13 < a2 + (v23 >> 1) + 1 ? (BOOL v24 = a2 >= (v23 & 0xFFFFFFFFFFFFFFFELL) + v13 + 2) : (BOOL v24 = 1), !v24))
    {
      unint64_t v27 = (_WORD *)v13;
      unint64_t v28 = (unsigned __int8 *)a2;
      goto LABEL_16;
    }
    uint64_t v25 = (v23 >> 1) + 1;
    if (v23 >= 0x3E)
    {
      unint64_t v26 = v25 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v92 = (uint8x8_t *)(a2 + 16);
      uint64_t v93 = (uint16x8_t *)(v13 + 32);
      unint64_t v94 = v25 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v95 = *(uint8x16_t *)v92[-2].i8;
        uint16x8_t v96 = vmovl_u8(*(uint8x8_t *)v95.i8);
        uint16x8_t result = vmovl_high_u8(v95);
        uint16x8_t v97 = vmovl_u8(*v92);
        uint16x8_t v98 = vmovl_high_u8(*(uint8x16_t *)v92->i8);
        v93[-2] = v96;
        v93[-1] = result;
        uint16x8_t *v93 = v97;
        v93[1] = v98;
        v93 += 4;
        v92 += 4;
        v94 -= 32;
      }
      while (v94);
      if (v25 == v26) {
        goto LABEL_17;
      }
      if ((v25 & 0x18) == 0)
      {
        unint64_t v28 = (unsigned __int8 *)(a2 + v26);
        unint64_t v27 = (_WORD *)(v13 + 2 * v26);
        goto LABEL_16;
      }
    }
    else
    {
      unint64_t v26 = 0;
    }
    unint64_t v27 = (_WORD *)(v13 + 2 * (v25 & 0xFFFFFFFFFFFFFFF8));
    unint64_t v28 = (unsigned __int8 *)(a2 + (v25 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v99 = (uint8x8_t *)(a2 + v26);
    int8x16_t v100 = (uint16x8_t *)(v13 + 2 * v26);
    unint64_t v101 = v26 - (v25 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v102 = *v99++;
      uint16x8_t result = vmovl_u8(v102);
      *v100++ = result;
      v101 += 8;
    }
    while (v101);
    if (v25 == (v25 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_17;
    }
    do
    {
LABEL_16:
      __int16 v29 = *v28++;
      *v27++ = v29;
    }
    while (v27 != (_WORD *)v12);
    goto LABEL_17;
  }
  unint64_t v13 = a1 + 2 * (a3 & 0xFFFFFFC0);
  long long v14 = 0uLL;
  unint64_t v15 = (char *)a1;
  do
  {
    v147.val[0] = *(int8x16_t *)a2;
    int8x16_t v16 = *(int8x16_t *)(a2 + 16);
    v152.val[0] = *(int8x16_t *)(a2 + 32);
    uint16x8_t v17 = *(uint16x8_t *)(a2 + 48);
    a2 += 64;
    uint16x8_t result = v17;
    v152.val[1] = 0uLL;
    v157.val[0] = v16;
    v147.val[1] = 0uLL;
    uint64_t v19 = v15;
    vst2q_s8(v19, v147);
    v19 += 32;
    v157.val[1] = 0uLL;
    vst2q_s8(v19, v157);
    unsigned int v20 = v15 + 64;
    vst2q_s8(v20, v152);
    unint64_t v21 = v15 + 96;
    vst2q_s8(v21, *(int8x16x2_t *)(&v14 - 1));
    v15 += 128;
  }
  while (v15 != (char *)v13);
  uint64_t v22 = a3;
  if (v13 != v12) {
    goto LABEL_7;
  }
LABEL_17:
  unint64_t v30 = v12 + 2 * a5;
  if ((a5 & 0xFFFFFFC0) != 0)
  {
    unint64_t v31 = v12 + 2 * (a5 & 0xFFFFFFC0);
    long long v32 = 0uLL;
    do
    {
      v148.val[0] = *(int8x16_t *)a4;
      int8x16_t v33 = *(int8x16_t *)(a4 + 16);
      v153.val[0] = *(int8x16_t *)(a4 + 32);
      uint16x8_t v34 = *(uint16x8_t *)(a4 + 48);
      a4 += 64;
      uint16x8_t result = v34;
      v153.val[1] = 0uLL;
      v158.val[0] = v33;
      v148.val[1] = 0uLL;
      uint64_t v35 = (char *)v12;
      vst2q_s8(v35, v148);
      v35 += 32;
      v158.val[1] = 0uLL;
      vst2q_s8(v35, v158);
      unint64_t v36 = (char *)(v12 + 64);
      vst2q_s8(v36, v153);
      BOOL v37 = (char *)(v12 + 96);
      vst2q_s8(v37, *(int8x16x2_t *)result.i8);
      v12 += 128;
    }
    while (v12 != v31);
    unint64_t v12 = v31;
  }
  uint64_t v38 = a5;
  if (v12 != v30)
  {
    unint64_t v39 = a1 + 2 * (v22 + a5) - v12 - 2;
    if (v39 < 0xE || v12 < a4 + (v39 >> 1) + 1 && a4 < (v39 & 0xFFFFFFFFFFFFFFFELL) + v12 + 2)
    {
      int v40 = (_WORD *)v12;
      long long v41 = (unsigned __int8 *)a4;
      goto LABEL_26;
    }
    uint64_t v90 = (v39 >> 1) + 1;
    if (v39 >= 0x3E)
    {
      unint64_t v91 = v90 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v136 = (uint8x8_t *)(a4 + 16);
      uint64_t v137 = (uint16x8_t *)(v12 + 32);
      unint64_t v138 = v90 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v139 = *(uint8x16_t *)v136[-2].i8;
        uint16x8_t v140 = vmovl_u8(*(uint8x8_t *)v139.i8);
        uint16x8_t result = vmovl_high_u8(v139);
        uint16x8_t v141 = vmovl_u8(*v136);
        uint16x8_t v142 = vmovl_high_u8(*(uint8x16_t *)v136->i8);
        v137[-2] = v140;
        v137[-1] = result;
        *uint64_t v137 = v141;
        v137[1] = v142;
        v137 += 4;
        v136 += 4;
        v138 -= 32;
      }
      while (v138);
      if (v90 == v91) {
        goto LABEL_27;
      }
      if ((v90 & 0x18) == 0)
      {
        long long v41 = (unsigned __int8 *)(a4 + v91);
        int v40 = (_WORD *)(v12 + 2 * v91);
        do
        {
LABEL_26:
          __int16 v42 = *v41++;
          *v40++ = v42;
        }
        while (v40 != (_WORD *)v30);
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v91 = 0;
    }
    int v40 = (_WORD *)(v12 + 2 * (v90 & 0xFFFFFFFFFFFFFFF8));
    long long v41 = (unsigned __int8 *)(a4 + (v90 & 0xFFFFFFFFFFFFFFF8));
    v143 = (uint8x8_t *)(a4 + v91);
    v144 = (uint16x8_t *)(v12 + 2 * v91);
    unint64_t v145 = v91 - (v90 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v146 = *v143++;
      uint16x8_t result = vmovl_u8(v146);
      *v144++ = result;
      v145 += 8;
    }
    while (v145);
    if (v90 != (v90 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_26;
    }
  }
LABEL_27:
  unint64_t v43 = v30 + 2 * a7;
  if ((a7 & 0xFFFFFFC0) != 0)
  {
    unint64_t v44 = v30 + 2 * (a7 & 0xFFFFFFC0);
    long long v45 = 0uLL;
    do
    {
      v149.val[0] = *(int8x16_t *)a6;
      int8x16_t v46 = *(int8x16_t *)(a6 + 16);
      v154.val[0] = *(int8x16_t *)(a6 + 32);
      uint16x8_t v47 = *(uint16x8_t *)(a6 + 48);
      a6 += 64;
      uint16x8_t result = v47;
      v154.val[1] = 0uLL;
      v159.val[0] = v46;
      v149.val[1] = 0uLL;
      int8x16_t v48 = (char *)v30;
      vst2q_s8(v48, v149);
      v48 += 32;
      v159.val[1] = 0uLL;
      vst2q_s8(v48, v159);
      unint64_t v49 = (char *)(v30 + 64);
      vst2q_s8(v49, v154);
      unint64_t v50 = (char *)(v30 + 96);
      vst2q_s8(v50, *(int8x16x2_t *)result.i8);
      v30 += 128;
    }
    while (v30 != v44);
    unint64_t v30 = v44;
  }
  if (v30 != v43)
  {
    unint64_t v52 = a1 + 2 * (v22 + a5 + a7) - v30 - 2;
    if (v52 < 0xE
      || (v30 < a6 + (v52 >> 1) + 1 ? (BOOL v53 = a6 >= (v52 & 0xFFFFFFFFFFFFFFFELL) + v30 + 2) : (BOOL v53 = 1), !v53))
    {
      unint64_t v56 = (_WORD *)v30;
      uint8x8_t v57 = (unsigned __int8 *)a6;
      goto LABEL_41;
    }
    uint64_t v54 = (v52 >> 1) + 1;
    if (v52 >= 0x3E)
    {
      unint64_t v55 = v54 & 0xFFFFFFFFFFFFFFE0;
      int v103 = (uint8x8_t *)(a6 + 16);
      int v104 = (uint16x8_t *)(v30 + 32);
      unint64_t v105 = v54 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v106 = *(uint8x16_t *)v103[-2].i8;
        uint16x8_t v107 = vmovl_u8(*(uint8x8_t *)v106.i8);
        uint16x8_t result = vmovl_high_u8(v106);
        uint16x8_t v108 = vmovl_u8(*v103);
        uint16x8_t v109 = vmovl_high_u8(*(uint8x16_t *)v103->i8);
        v104[-2] = v107;
        v104[-1] = result;
        *int v104 = v108;
        v104[1] = v109;
        v104 += 4;
        v103 += 4;
        v105 -= 32;
      }
      while (v105);
      if (v54 == v55) {
        goto LABEL_42;
      }
      if ((v54 & 0x18) == 0)
      {
        uint8x8_t v57 = (unsigned __int8 *)(a6 + v55);
        unint64_t v56 = (_WORD *)(v30 + 2 * v55);
        do
        {
LABEL_41:
          __int16 v58 = *v57++;
          *v56++ = v58;
        }
        while (v56 != (_WORD *)v43);
        goto LABEL_42;
      }
    }
    else
    {
      unint64_t v55 = 0;
    }
    unint64_t v56 = (_WORD *)(v30 + 2 * (v54 & 0xFFFFFFFFFFFFFFF8));
    uint8x8_t v57 = (unsigned __int8 *)(a6 + (v54 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v110 = (uint8x8_t *)(a6 + v55);
    uint64_t v111 = (uint16x8_t *)(v30 + 2 * v55);
    unint64_t v112 = v55 - (v54 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v113 = *v110++;
      uint16x8_t result = vmovl_u8(v113);
      *v111++ = result;
      v112 += 8;
    }
    while (v112);
    if (v54 != (v54 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_41;
    }
  }
LABEL_42:
  unint64_t v59 = v43 + 2 * a10;
  if ((a10 & 0xFFFFFFC0) != 0)
  {
    unint64_t v60 = v43 + 2 * (a10 & 0xFFFFFFC0);
    long long v61 = 0uLL;
    do
    {
      v150.val[0] = *(int8x16_t *)a9;
      int8x16_t v62 = *(int8x16_t *)(a9 + 16);
      v155.val[0] = *(int8x16_t *)(a9 + 32);
      uint16x8_t v63 = *(uint16x8_t *)(a9 + 48);
      a9 += 64;
      uint16x8_t result = v63;
      v155.val[1] = 0uLL;
      v160.val[0] = v62;
      v150.val[1] = 0uLL;
      int8x16_t v64 = (char *)v43;
      vst2q_s8(v64, v150);
      v64 += 32;
      v160.val[1] = 0uLL;
      vst2q_s8(v64, v160);
      uint64_t v65 = (char *)(v43 + 64);
      vst2q_s8(v65, v155);
      int8x16x2_t v66 = (char *)(v43 + 96);
      vst2q_s8(v66, *(int8x16x2_t *)result.i8);
      v43 += 128;
    }
    while (v43 != v60);
    unint64_t v43 = v60;
  }
  if (v43 != v59)
  {
    unint64_t v68 = a1 + 2 * (v22 + a5 + a7 + a10) - v43 - 2;
    if (v68 < 0xE
      || (v43 < a9 + (v68 >> 1) + 1 ? (BOOL v69 = a9 >= (v68 & 0xFFFFFFFFFFFFFFFELL) + v43 + 2) : (BOOL v69 = 1), !v69))
    {
      uint64_t v72 = (_WORD *)v43;
      size_t v73 = (unsigned __int8 *)a9;
      goto LABEL_56;
    }
    uint64_t v70 = (v68 >> 1) + 1;
    if (v68 >= 0x3E)
    {
      unint64_t v71 = v70 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v114 = (uint8x8_t *)(a9 + 16);
      uint64_t v115 = (uint16x8_t *)(v43 + 32);
      unint64_t v116 = v70 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v117 = *(uint8x16_t *)v114[-2].i8;
        uint16x8_t v118 = vmovl_u8(*(uint8x8_t *)v117.i8);
        uint16x8_t result = vmovl_high_u8(v117);
        uint16x8_t v119 = vmovl_u8(*v114);
        uint16x8_t v120 = vmovl_high_u8(*(uint8x16_t *)v114->i8);
        v115[-2] = v118;
        v115[-1] = result;
        *uint64_t v115 = v119;
        v115[1] = v120;
        v115 += 4;
        v114 += 4;
        v116 -= 32;
      }
      while (v116);
      if (v70 == v71) {
        goto LABEL_57;
      }
      if ((v70 & 0x18) == 0)
      {
        size_t v73 = (unsigned __int8 *)(a9 + v71);
        uint64_t v72 = (_WORD *)(v43 + 2 * v71);
        do
        {
LABEL_56:
          __int16 v74 = *v73++;
          *v72++ = v74;
        }
        while (v72 != (_WORD *)v59);
        goto LABEL_57;
      }
    }
    else
    {
      unint64_t v71 = 0;
    }
    uint64_t v72 = (_WORD *)(v43 + 2 * (v70 & 0xFFFFFFFFFFFFFFF8));
    size_t v73 = (unsigned __int8 *)(a9 + (v70 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v121 = (uint8x8_t *)(a9 + v71);
    int v122 = (uint16x8_t *)(v43 + 2 * v71);
    unint64_t v123 = v71 - (v70 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v124 = *v121++;
      uint16x8_t result = vmovl_u8(v124);
      *v122++ = result;
      v123 += 8;
    }
    while (v123);
    if (v70 != (v70 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_56;
    }
  }
LABEL_57:
  long long v75 = (_WORD *)(v59 + 2 * a12);
  if ((a12 & 0xFFFFFFC0) != 0)
  {
    unint64_t v76 = v59 + 2 * (a12 & 0xFFFFFFC0);
    long long v77 = 0uLL;
    do
    {
      v151.val[0] = *(int8x16_t *)a11;
      int8x16_t v78 = *(int8x16_t *)(a11 + 16);
      v156.val[0] = *(int8x16_t *)(a11 + 32);
      uint16x8_t v79 = *(uint16x8_t *)(a11 + 48);
      a11 += 64;
      uint16x8_t result = v79;
      v156.val[1] = 0uLL;
      v161.val[0] = v78;
      v151.val[1] = 0uLL;
      unint64_t v80 = (char *)v59;
      vst2q_s8(v80, v151);
      v80 += 32;
      v161.val[1] = 0uLL;
      vst2q_s8(v80, v161);
      unint64_t v81 = (char *)(v59 + 64);
      vst2q_s8(v81, v156);
      unint64_t v82 = (char *)(v59 + 96);
      vst2q_s8(v82, *(int8x16x2_t *)result.i8);
      v59 += 128;
    }
    while (v59 != v76);
    unint64_t v59 = v76;
  }
  if ((_WORD *)v59 != v75)
  {
    unint64_t v83 = a1 + 2 * (v22 + v38 + a7 + a10 + (unint64_t)a12) - v59 - 2;
    if (v83 < 0xE
      || (v59 < a11 + (v83 >> 1) + 1 ? (BOOL v84 = a11 >= (v83 & 0xFFFFFFFFFFFFFFFELL) + v59 + 2) : (BOOL v84 = 1), !v84))
    {
      uint64_t v87 = (_WORD *)v59;
      uint64_t v88 = (unsigned __int8 *)a11;
      goto LABEL_71;
    }
    uint64_t v85 = (v83 >> 1) + 1;
    if (v83 >= 0x3E)
    {
      unint64_t v86 = v85 & 0xFFFFFFFFFFFFFFE0;
      long long v125 = (uint8x8_t *)(a11 + 16);
      int8x16_t v126 = (uint16x8_t *)(v59 + 32);
      unint64_t v127 = v85 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v128 = *(uint8x16_t *)v125[-2].i8;
        uint16x8_t v129 = vmovl_u8(*(uint8x8_t *)v128.i8);
        uint16x8_t result = vmovl_high_u8(v128);
        uint16x8_t v130 = vmovl_u8(*v125);
        uint16x8_t v131 = vmovl_high_u8(*(uint8x16_t *)v125->i8);
        v126[-2] = v129;
        v126[-1] = result;
        *int8x16_t v126 = v130;
        v126[1] = v131;
        v126 += 4;
        v125 += 4;
        v127 -= 32;
      }
      while (v127);
      if (v85 == v86) {
        return result;
      }
      if ((v85 & 0x18) == 0)
      {
        uint64_t v88 = (unsigned __int8 *)(a11 + v86);
        uint64_t v87 = (_WORD *)(v59 + 2 * v86);
        do
        {
LABEL_71:
          __int16 v89 = *v88++;
          *v87++ = v89;
        }
        while (v87 != v75);
        return result;
      }
    }
    else
    {
      unint64_t v86 = 0;
    }
    uint64_t v87 = (_WORD *)(v59 + 2 * (v85 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v88 = (unsigned __int8 *)(a11 + (v85 & 0xFFFFFFFFFFFFFFF8));
    unint64_t v132 = (uint8x8_t *)(a11 + v86);
    uint64_t v133 = (uint16x8_t *)(v59 + 2 * v86);
    unint64_t v134 = v86 - (v85 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v135 = *v132++;
      uint16x8_t result = vmovl_u8(v135);
      *v133++ = result;
      v134 += 8;
    }
    while (v134);
    if (v85 != (v85 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_71;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WGSL::Builtin,WGSL::Builtin,WTF::IdentityExtractor,WTF::IntHash<WGSL::Builtin>,WTF::StrongEnumHashTraits<WGSL::Builtin>,WTF::StrongEnumHashTraits<WGSL::Builtin>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    size_t v7 = a2;
    uint64_t result = WTF::fastMalloc((WTF *)(a2 + 16));
    uint64_t v10 = result;
    unint64_t v11 = (void *)(result + 16);
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  int v5 = 0;
  int v6 = 0;
  size_t v7 = a2;
  uint64_t result = WTF::fastMalloc((WTF *)(a2 + 16));
  uint64_t v10 = result;
  unint64_t v11 = (void *)(result + 16);
  if (a2) {
LABEL_3:
  }
    uint64_t result = (uint64_t)memset(v11, 255, v7);
LABEL_4:
  *a1 = (uint64_t)v11;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      unsigned int v13 = *(unsigned __int8 *)(v4 + i);
      if (v13 <= 0xFD)
      {
        uint64_t v14 = *a1;
        if (*a1) {
          int v15 = *(_DWORD *)(v14 - 8);
        }
        else {
          int v15 = 0;
        }
        int v16 = 0;
        unsigned int v17 = 9 * ((~(v13 << 15) + v13) ^ ((~(v13 << 15) + v13) >> 10));
        unsigned int v18 = ((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) ^ (((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) >> 16);
        do
        {
          uint64_t result = v18 & v15;
          BOOL v9 = (void *)*(unsigned __int8 *)(v14 + result);
          unsigned int v18 = ++v16 + result;
        }
        while (v9 != 255);
        *(unsigned char *)(v14 + result) = v13;
      }
    }
  }
  if (v4)
  {
    return WTF::fastFree((WTF *)(v4 - 16), v9);
  }
  return result;
}

_DWORD *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  int v5 = *(_DWORD *)(a2 + 8);
  int v6 = *(_DWORD *)(a3 + 8);
  uint64_t v7 = 0;
  if (((v6 | v5) & 0x80000000) == 0)
  {
    int v8 = result[2];
    BOOL v9 = __OFADD__(v5, v6);
    int v10 = v5 + v6;
    BOOL v11 = v9;
    if ((v8 & 0x80000000) == 0 && !v11)
    {
      uint64_t v12 = (v8 + v10);
      if (__OFADD__(v8, v10)) {
        goto LABEL_9;
      }
      if (!v12)
      {
        uint64_t v7 = MEMORY[0x1E4F30960];
        *MEMORY[0x1E4F30960] += 2;
        goto LABEL_17;
      }
      if ((v12 & 0x80000000) != 0)
      {
LABEL_9:
        uint64_t v7 = 0;
      }
      else
      {
        unsigned int v13 = *(unsigned char **)result;
        size_t v14 = result[2];
        int v15 = *(unsigned char **)a2;
        size_t v16 = *(unsigned int *)(a2 + 8);
        unsigned int v17 = *(unsigned char **)a3;
        size_t v18 = *(unsigned int *)(a3 + 8);
        uint64_t result = (_DWORD *)WTF::tryFastCompactMalloc((WTF *)(v12 + 20));
        uint64_t v7 = v21;
        if (v21)
        {
          uint64_t v19 = (unsigned char *)(v21 + 20);
          *(_DWORD *)uint64_t v21 = 2;
          *(_DWORD *)(v21 + 4) = v12;
          *(void *)(v21 + 8) = v21 + 20;
          *(_DWORD *)(v21 + 16) = 4;
          if (v14)
          {
            if (v14 == 1) {
              unsigned char *v19 = *v13;
            }
            else {
              uint64_t result = memcpy((void *)(v21 + 20), v13, v14);
            }
          }
          unsigned int v20 = &v19[v14];
          if (v16)
          {
            if (v16 == 1) {
              *unsigned int v20 = *v15;
            }
            else {
              uint64_t result = memcpy(v20, v15, v16);
            }
          }
          if (v18)
          {
            uint64_t result = &v20[v16];
            if (v18 == 1) {
              *(unsigned char *)uint64_t result = *v17;
            }
            else {
              uint64_t result = memcpy(result, v17, v18);
            }
          }
        }
      }
    }
  }
LABEL_17:
  *a4 = v7;
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WGSL::Type,char>@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  v21[20] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 8);
  BOOL v6 = v5 != 0;
  unint64_t v7 = v5 - 1;
  if (v6) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = 0;
  }
  if (v8 >> 31)
  {
    uint64_t result = 124;
    __break(0xC471u);
    return result;
  }
  BOOL v11 = *(int8x16_t **)a1;
  WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)v21);
  WGSL::Type::dump(a2, (uint64_t)v21);
  WTF::StringPrintStream::toString((uint64_t *)&v19, (WTF::StringPrintStream *)v21);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)v21);
  char v13 = *a3;
  uint64_t result = (uint64_t)v19;
  if (v19)
  {
    int v15 = v19[1];
    if (v15 < 0 || (BOOL v12 = __OFADD__(v15, 1), v16 = v15 + 1, v12))
    {
LABEL_13:
      *a4 = 0;
      uint64_t v19 = 0;
      if (!result) {
        return result;
      }
      goto LABEL_24;
    }
  }
  else
  {
    int v16 = 1;
    if (v12) {
      goto LABEL_13;
    }
  }
  if (__OFADD__(v8, v16)) {
    goto LABEL_13;
  }
  if (v19)
  {
    int v17 = (v19[4] >> 2) & 1;
    *v19 += 2;
  }
  else
  {
    int v17 = 1;
  }
  unsigned int v20 = (_DWORD *)result;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<char,void>>((v8 + v16), v17, v11, v8, (uint64_t *)&v20, v13, v21);
  size_t v18 = v20;
  *a4 = v21[0];
  unsigned int v20 = 0;
  v21[0] = 0;
  if (v18)
  {
    if (*v18 == 2)
    {
      WTF::StringImpl::destroy();
      uint64_t result = (uint64_t)v19;
      uint64_t v19 = 0;
      if (!result) {
        return result;
      }
      goto LABEL_24;
    }
    *v18 -= 2;
  }
  uint64_t result = (uint64_t)v19;
  uint64_t v19 = 0;
  if (!result) {
    return result;
  }
LABEL_24:
  if (*(_DWORD *)result == 2) {
    return WTF::StringImpl::destroy();
  }
  *(_DWORD *)result -= 2;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t *a5@<X4>, char a6@<W5>, void *a7@<X8>)
{
  int v11 = result;
  if (!a2)
  {
    if (!result) {
      goto LABEL_13;
    }
    if (result > 0x7FFFFFEF) {
      goto LABEL_12;
    }
    uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
    uint64_t v13 = v98;
    if (!v98) {
      goto LABEL_82;
    }
    unint64_t v16 = v98 + 20;
    *(_DWORD *)uint64_t v98 = 2;
    *(_DWORD *)(v98 + 4) = v11;
    *(void *)(v98 + 8) = v98 + 20;
    *(_DWORD *)(v98 + 16) = 0;
    uint64_t v15 = *a5;
    if (v15) {
      *(_DWORD *)v15 += 2;
    }
    int v17 = (_WORD *)(v16 + 2 * a4);
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      unint64_t v18 = v16 + 2 * (a4 & 0xFFFFFFC0);
      long long v19 = 0uLL;
      do
      {
        v99.val[0] = *a3;
        int8x16_t v20 = a3[1];
        v101.val[0] = a3[2];
        int8x16_t v21 = a3[3];
        a3 += 4;
        int8x16_t v22 = v21;
        v101.val[1] = 0uLL;
        v103.val[0] = v20;
        v99.val[1] = 0uLL;
        unint64_t v23 = (char *)v16;
        vst2q_s8(v23, v99);
        v23 += 32;
        v103.val[1] = 0uLL;
        vst2q_s8(v23, v103);
        BOOL v24 = (char *)(v16 + 64);
        vst2q_s8(v24, v101);
        uint64_t v25 = (char *)(v16 + 96);
        vst2q_s8(v25, *(int8x16x2_t *)(&v19 - 1));
        v16 += 128;
      }
      while (v16 != v18);
      unint64_t v16 = v18;
    }
    if ((_WORD *)v16 != v17)
    {
      unint64_t v26 = v98 + 2 * a4 - v16 + 18;
      if (v26 < 0xE
        || (v16 < (unint64_t)a3->u64 + (v26 >> 1) + 1
          ? (BOOL v27 = (unint64_t)a3 >= (v26 & 0xFFFFFFFFFFFFFFFELL) + v16 + 2)
          : (BOOL v27 = 1),
            !v27))
      {
        unint64_t v30 = (_WORD *)v16;
        unint64_t v31 = a3;
        goto LABEL_31;
      }
      uint64_t v28 = (v26 >> 1) + 1;
      if (v26 >= 0x3E)
      {
        unint64_t v29 = v28 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v65 = (uint8x8_t *)&a3[1];
        int8x16x2_t v66 = (uint16x8_t *)(v16 + 32);
        unint64_t v67 = v28 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          uint8x16_t v68 = *(uint8x16_t *)v65[-2].i8;
          uint16x8_t v69 = vmovl_u8(*v65);
          uint16x8_t v70 = vmovl_high_u8(*(uint8x16_t *)v65->i8);
          v66[-2] = vmovl_u8(*(uint8x8_t *)v68.i8);
          v66[-1] = vmovl_high_u8(v68);
          *int8x16x2_t v66 = v69;
          v66[1] = v70;
          v66 += 4;
          v65 += 4;
          v67 -= 32;
        }
        while (v67);
        if (v28 == v29) {
          goto LABEL_32;
        }
        if ((v28 & 0x18) == 0)
        {
          unint64_t v31 = (int8x16_t *)((char *)a3 + v29);
          unint64_t v30 = (_WORD *)(v16 + 2 * v29);
          do
          {
LABEL_31:
            __int16 v32 = v31->u8[0];
            unint64_t v31 = (int8x16_t *)((char *)v31 + 1);
            *v30++ = v32;
          }
          while (v30 != v17);
          goto LABEL_32;
        }
      }
      else
      {
        unint64_t v29 = 0;
      }
      unint64_t v30 = (_WORD *)(v16 + 2 * (v28 & 0xFFFFFFFFFFFFFFF8));
      unint64_t v31 = (int8x16_t *)((char *)a3 + (v28 & 0xFFFFFFFFFFFFFFF8));
      unint64_t v71 = (uint8x8_t *)&a3->i8[v29];
      uint64_t v72 = (uint16x8_t *)(v16 + 2 * v29);
      unint64_t v73 = v29 - (v28 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint8x8_t v74 = *v71++;
        *v72++ = vmovl_u8(v74);
        v73 += 8;
      }
      while (v73);
      if (v28 != (v28 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_31;
      }
    }
LABEL_32:
    if (!v15)
    {
      _WORD *v17 = a6;
      goto LABEL_82;
    }
    uint64_t v33 = *(unsigned int *)(v15 + 4);
    *(_DWORD *)v15 += 2;
    uint16x8_t v34 = *(int8x16_t **)(v15 + 8);
    if ((*(unsigned char *)(v15 + 16) & 4) == 0)
    {
      if (!v33) {
        goto LABEL_79;
      }
      if (v33 == 1)
      {
        _WORD *v17 = v34->i16[0];
        LODWORD(v33) = 1;
        goto LABEL_79;
      }
      uint64_t result = (uint64_t)memcpy(v17, v34, 2 * v33);
LABEL_78:
      LODWORD(v33) = *(_DWORD *)(v15 + 4);
LABEL_79:
      v17[v33] = a6;
      int v52 = *(_DWORD *)v15 - 2;
      if (*(_DWORD *)v15 != 2)
      {
LABEL_75:
        *(_DWORD *)uint64_t v15 = v52;
        int v64 = v52 - 2;
        if (v64)
        {
LABEL_76:
          *(_DWORD *)uint64_t v15 = v64;
          goto LABEL_82;
        }
LABEL_81:
        uint64_t result = WTF::StringImpl::destroy();
        goto LABEL_82;
      }
LABEL_80:
      uint64_t result = WTF::StringImpl::destroy();
      int v64 = *(_DWORD *)v15 - 2;
      if (*(_DWORD *)v15 != 2) {
        goto LABEL_76;
      }
      goto LABEL_81;
    }
    uint64_t v35 = &v17[v33];
    if (v33 < 0x40)
    {
      unint64_t v36 = (unint64_t)v17;
    }
    else
    {
      unint64_t v36 = (unint64_t)&v17[v33 & 0xFFFFFFC0];
      long long v37 = 0uLL;
      uint64_t v38 = (char *)v17;
      do
      {
        v100.val[0] = *v34;
        int8x16_t v39 = v34[1];
        v102.val[0] = v34[2];
        int8x16_t v40 = v34[3];
        v34 += 4;
        int8x16_t v41 = v40;
        v102.val[1] = 0uLL;
        v104.val[0] = v39;
        v100.val[1] = 0uLL;
        __int16 v42 = v38;
        vst2q_s8(v42, v100);
        v42 += 32;
        v104.val[1] = 0uLL;
        vst2q_s8(v42, v104);
        unint64_t v43 = v38 + 64;
        vst2q_s8(v43, v102);
        unint64_t v44 = v38 + 96;
        vst2q_s8(v44, *(int8x16x2_t *)(&v37 - 1));
        v38 += 128;
      }
      while (v38 != (char *)v36);
    }
    if ((_WORD *)v36 == v35) {
      goto LABEL_78;
    }
    unint64_t v60 = v98 + 2 * (a4 + v33) - v36 + 18;
    if (v60 < 0xE
      || v36 < (unint64_t)v34->u64 + (v60 >> 1) + 1
      && (unint64_t)v34 < (v60 & 0xFFFFFFFFFFFFFFFELL) + v36 + 2)
    {
      long long v61 = (_WORD *)v36;
      int8x16_t v62 = v34;
      goto LABEL_71;
    }
    uint64_t v75 = (v60 >> 1) + 1;
    if (v60 >= 0x3E)
    {
      unint64_t v76 = v75 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v88 = (uint8x8_t *)&v34[1];
      __int16 v89 = (uint16x8_t *)(v36 + 32);
      unint64_t v90 = v75 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v91 = *(uint8x16_t *)v88[-2].i8;
        uint16x8_t v92 = vmovl_u8(*v88);
        uint16x8_t v93 = vmovl_high_u8(*(uint8x16_t *)v88->i8);
        v89[-2] = vmovl_u8(*(uint8x8_t *)v91.i8);
        v89[-1] = vmovl_high_u8(v91);
        *__int16 v89 = v92;
        v89[1] = v93;
        v89 += 4;
        v88 += 4;
        v90 -= 32;
      }
      while (v90);
      if (v75 == v76) {
        goto LABEL_78;
      }
      if ((v75 & 0x18) == 0)
      {
        int8x16_t v62 = (int8x16_t *)((char *)v34 + v76);
        long long v61 = (_WORD *)(v36 + 2 * v76);
        do
        {
LABEL_71:
          __int16 v63 = v62->u8[0];
          int8x16_t v62 = (int8x16_t *)((char *)v62 + 1);
          *v61++ = v63;
        }
        while (v61 != v35);
        goto LABEL_78;
      }
    }
    else
    {
      unint64_t v76 = 0;
    }
    long long v61 = (_WORD *)(v36 + 2 * (v75 & 0xFFFFFFFFFFFFFFF8));
    int8x16_t v62 = (int8x16_t *)((char *)v34 + (v75 & 0xFFFFFFFFFFFFFFF8));
    unint64_t v94 = (uint8x8_t *)&v34->i8[v76];
    uint8x16_t v95 = (uint16x8_t *)(v36 + 2 * v76);
    unint64_t v96 = v76 - (v75 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v97 = *v94++;
      *v95++ = vmovl_u8(v97);
      v96 += 8;
    }
    while (v96);
    if (v75 == (v75 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_78;
    }
    goto LABEL_71;
  }
  if (!result)
  {
LABEL_13:
    uint64_t v13 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_82;
  }
  if ((result & 0x80000000) != 0)
  {
LABEL_12:
    uint64_t v13 = 0;
    goto LABEL_82;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
  uint64_t v13 = v98;
  if (v98)
  {
    size_t v14 = (unsigned char *)(v98 + 20);
    *(_DWORD *)uint64_t v98 = 2;
    *(_DWORD *)(v98 + 4) = v11;
    *(void *)(v98 + 8) = v98 + 20;
    *(_DWORD *)(v98 + 16) = 4;
    uint64_t v15 = *a5;
    if (v15) {
      *(_DWORD *)v15 += 2;
    }
    if (a4)
    {
      if (a4 == 1) {
        *size_t v14 = a3->i8[0];
      }
      else {
        uint64_t result = (uint64_t)memcpy((void *)(v98 + 20), a3, a4);
      }
    }
    long long v45 = &v14[a4];
    if (!v15)
    {
      *long long v45 = a6;
      goto LABEL_82;
    }
    size_t v46 = *(unsigned int *)(v15 + 4);
    *(_DWORD *)v15 += 2;
    uint16x8_t v47 = *(int8x16_t **)(v15 + 8);
    if ((*(unsigned char *)(v15 + 16) & 4) != 0)
    {
      if (v46)
      {
        if (v46 == 1)
        {
          *long long v45 = v47->i8[0];
          v45[*(unsigned int *)(v15 + 4)] = a6;
          int v52 = *(_DWORD *)v15 - 2;
          if (*(_DWORD *)v15 != 2) {
            goto LABEL_75;
          }
          goto LABEL_80;
        }
        uint64_t result = (uint64_t)memcpy(&v14[a4], v47, v46);
      }
      goto LABEL_74;
    }
    int8x16_t v48 = &v45[v46];
    if (v46 < 0x10)
    {
      unint64_t v49 = (unint64_t)&v14[a4];
    }
    else
    {
      unint64_t v49 = (unint64_t)&v45[v46 & 0xFFFFFFF0];
      unint64_t v50 = (unsigned long long *)&v14[a4];
      do
      {
        unsigned long long v51 = (unsigned __int128)vld2q_s8(v47->i8);
        v47 += 2;
        *v50++ = v51;
      }
      while (v50 != (unsigned long long *)v49);
    }
    if ((unsigned char *)v49 != v48)
    {
      size_t v53 = v98 + v46 + a4;
      unint64_t v54 = v53 - v49 + 20;
      if (v54 < 8
        || (v49 < (unint64_t)&v47[2].u64[1] + 2 * v53 + -2 * v49
          ? (BOOL v55 = (unint64_t)v47 >= v53 + 20)
          : (BOOL v55 = 1),
            !v55))
      {
        uint8x8_t v57 = (unsigned char *)v49;
        __int16 v58 = v47;
        goto LABEL_63;
      }
      if (v54 >= 0x20)
      {
        unint64_t v56 = v54 & 0xFFFFFFFFFFFFFFE0;
        long long v77 = v47 + 2;
        int8x16_t v78 = (int8x16_t *)(v49 + 16);
        unint64_t v79 = v54 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          int8x16_t v81 = v77[-2];
          int8x16_t v80 = v77[-1];
          int8x16_t v83 = *v77;
          int8x16_t v82 = v77[1];
          v77 += 4;
          v78[-1] = vuzp1q_s8(v81, v80);
          int8x16_t *v78 = vuzp1q_s8(v83, v82);
          v78 += 2;
          v79 -= 32;
        }
        while (v79);
        if (v54 == v56) {
          goto LABEL_74;
        }
        if ((v54 & 0x18) == 0)
        {
          __int16 v58 = (int8x16_t *)((char *)v47 + 2 * v56);
          uint8x8_t v57 = (unsigned char *)(v49 + v56);
          do
          {
LABEL_63:
            char v59 = v58->i8[0];
            __int16 v58 = (int8x16_t *)((char *)v58 + 2);
            *v57++ = v59;
          }
          while (v57 != v48);
          goto LABEL_74;
        }
      }
      else
      {
        unint64_t v56 = 0;
      }
      uint8x8_t v57 = (unsigned char *)(v49 + (v54 & 0xFFFFFFFFFFFFFFF8));
      __int16 v58 = (int8x16_t *)((char *)v47 + 2 * (v54 & 0xFFFFFFFFFFFFFFF8));
      BOOL v84 = (int16x8_t *)((char *)v47 + 2 * v56);
      uint64_t v85 = (int8x8_t *)(v49 + v56);
      unint64_t v86 = v56 - (v54 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        int16x8_t v87 = *v84++;
        *v85++ = vmovn_s16(v87);
        v86 += 8;
      }
      while (v86);
      if (v54 != (v54 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_63;
      }
    }
LABEL_74:
    v45[*(unsigned int *)(v15 + 4)] = a6;
    int v52 = *(_DWORD *)v15 - 2;
    if (*(_DWORD *)v15 != 2) {
      goto LABEL_75;
    }
    goto LABEL_80;
  }
LABEL_82:
  *a7 = v13;
  return result;
}

__n128 WGSL::BoundsCheckVisitor::visit(WGSL::BoundsCheckVisitor *this, WGSL::AST::IndexAccessExpression *a2)
{
  if (*((unsigned char *)a2 + 56)) {
    return result;
  }
  if (*((unsigned char *)this + 32)
    || ((*(void (**)(WGSL::BoundsCheckVisitor *, void))(*(void *)this + 208))(this, *((void *)a2 + 8)), *((unsigned char *)this + 32)))
  {
    uint64_t v4 = (__n128 *)((char *)a2 + 64);
    uint64_t v5 = *(void *)(*((void *)a2 + 8) + 24);
    if (!v5) {
      goto LABEL_15;
    }
  }
  else
  {
    (*(void (**)(WGSL::BoundsCheckVisitor *, void))(*(void *)this + 208))(this, *((void *)a2 + 9));
    uint64_t v4 = (__n128 *)((char *)a2 + 64);
    uint64_t v5 = *(void *)(*((void *)a2 + 8) + 24);
    if (!v5) {
      goto LABEL_15;
    }
  }
  int v6 = *(_DWORD *)(v5 + 48);
  if (v6 == 10)
  {
    uint64_t v5 = *(void *)(v5 + 8);
    if (!v5) {
      goto LABEL_15;
    }
    int v6 = *(_DWORD *)(v5 + 48);
  }
  if (v6 == 11)
  {
    uint64_t v5 = *(void *)(v5 + 8);
    if (!v5) {
      goto LABEL_15;
    }
    int v6 = *(_DWORD *)(v5 + 48);
  }
  if (v6 == 2 || v6 == 1)
  {
    int v7 = *(unsigned __int8 *)(v5 + 8);
    goto LABEL_23;
  }
LABEL_15:
  if (*(_DWORD *)(v5 + 48) != 3) {
    goto LABEL_146;
  }
  int v8 = *(_DWORD *)(v5 + 16);
  if (v8 == -1) {
    uint64_t v9 = -1;
  }
  else {
    uint64_t v9 = *(unsigned int *)(v5 + 16);
  }
  if (v9 == 2)
  {
    if (v8 == 2)
    {
      BOOL v12 = *(void **)(v5 + 8);
      unint64_t v16 = (void *)*((void *)a2 + 9);
      uint64_t v17 = *((void *)this + 5);
      if (v16[3] == *(void *)(v17 + 168)) {
        goto LABEL_59;
      }
      goto LABEL_52;
    }
    goto LABEL_146;
  }
  if (v9 == 1)
  {
    if (v8 == 1)
    {
      int v7 = *(_DWORD *)(v5 + 8);
LABEL_23:
      LODWORD(v117) = v7;
      int v10 = (void *)(*((void *)this + 5) + 312);
      long long v124 = 0uLL;
      int v11 = WGSL::AST::Builder::construct<WGSL::AST::Unsigned32Literal,WGSL::SourceSpan,int,void>(v10, &v124, (int *)&v117);
      BOOL v12 = v11;
      v11[3] = *(void *)(*((void *)this + 5) + 168);
      int v13 = v117;
      if (!*((unsigned char *)v11 + 56))
      {
        *((_DWORD *)v11 + 8) = v117;
        *((_DWORD *)v11 + 12) = 4;
        *((unsigned char *)v11 + 56) = 1;
        unint64_t v16 = (void *)*((void *)a2 + 9);
        uint64_t v17 = *((void *)this + 5);
        if (v16[3] == *(void *)(v17 + 168)) {
          goto LABEL_59;
        }
        goto LABEL_52;
      }
      uint64_t v14 = *((unsigned int *)v11 + 12);
      if (v14 != -1)
      {
        uint64_t v15 = v11 + 4;
        if (v14 == 4)
        {
          *uint64_t v15 = v117;
          unint64_t v16 = (void *)*((void *)a2 + 9);
          uint64_t v17 = *((void *)this + 5);
          if (v16[3] == *(void *)(v17 + 168)) {
            goto LABEL_59;
          }
          goto LABEL_52;
        }
        ((void (*)(long long *, _DWORD *))off_1ECABC098[v14])(&v124, v15);
      }
      *((_DWORD *)v12 + 8) = v13;
      *((_DWORD *)v12 + 12) = 4;
      unint64_t v16 = (void *)*((void *)a2 + 9);
      uint64_t v17 = *((void *)this + 5);
      if (v16[3] == *(void *)(v17 + 168)) {
        goto LABEL_59;
      }
      goto LABEL_52;
    }
LABEL_146:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_147;
  }
  if (v8) {
    goto LABEL_146;
  }
  unint64_t v18 = (void *)(*((void *)this + 5) + 312);
  long long v117 = 0uLL;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(void *)&long long v125 = 0;
  *(void *)&long long v124 = off_1ECABC030;
  *((void *)&v124 + 1) = 0;
  long long v19 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v18, &v117, (uint64_t)&v124);
  *(void *)&long long v124 = off_1ECABC030;
  int8x16_t v20 = (_DWORD *)*((void *)&v125 + 1);
  *((void *)&v125 + 1) = 0;
  if (v20)
  {
    if (*v20 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v20 -= 2;
    }
  }
  uint64_t v21 = *((void *)this + 5);
  v19[3] = *(void *)(v21 + 120);
  int8x16_t v22 = (void *)v4->n128_u64[0];
  unint64_t v23 = *(unsigned __int8 **)(v4->n128_u64[0] + 24);
  int v24 = *((_DWORD *)v23 + 12);
  if (v24 == 10)
  {
    long long v124 = 0uLL;
    LOBYTE(v117) = 0;
    int8x16_t v22 = WGSL::AST::Builder::construct<WGSL::AST::UnaryExpression,WGSL::SourceSpan,WGSL::AST::Expression &,WGSL::AST::UnaryOperation,void>((void *)(v21 + 312), &v124, (uint64_t)v22, (char *)&v117);
    uint64_t v25 = *((void *)this + 5);
    uint64_t v115 = *((void *)v23 + 1);
    *(void *)&long long v124 = ((unint64_t)v23[1] << 16) | ((unint64_t)*v23 << 8) | 7;
    *((void *)&v124 + 1) = v115;
    unint64_t v26 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v25 + 112), (unsigned __int8 *)&v124);
    BOOL v27 = *(unsigned __int8 **)(v25 + 112);
    if (v27) {
      v27 += 24 * *((unsigned int *)v27 - 1);
    }
    if (v27 == v26 || (uint64_t v28 = *((void *)v26 + 2)) == 0) {
      WGSL::TypeStore::allocateType<WGSL::Types::Pointer,WGSL::AddressSpace &,WGSL::AccessMode &,WGSL::Type const*&>();
    }
    v22[3] = v28;
    int v24 = *(_DWORD *)(v28 + 48);
  }
  if (v24 != 11) {
    goto LABEL_148;
  }
  uint64_t v29 = *((void *)this + 5);
  long long v124 = 0uLL;
  unint64_t v30 = (void *)WTF::fastMalloc((WTF *)8);
  DWORD2(v117) = 1;
  *(void *)&long long v117 = v30;
  *unint64_t v30 = v22;
  HIDWORD(v117) = 1;
  BOOL v12 = WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>((void *)(v29 + 312), &v124, (uint64_t)v19, (uint64_t *)&v117);
  __int16 v32 = (WTF *)v117;
  if ((void)v117)
  {
    *(void *)&long long v117 = 0;
    DWORD2(v117) = 0;
    WTF::fastFree(v32, v31);
  }
  v12[3] = *(void *)(*((void *)this + 5) + 168);
  unint64_t v16 = (void *)*((void *)a2 + 9);
  uint64_t v17 = *((void *)this + 5);
  if (v16[3] != *(void *)(v17 + 168))
  {
LABEL_52:
    uint64_t v33 = (void *)(v17 + 312);
    long long v117 = 0uLL;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(void *)&long long v125 = 0;
    *(void *)&long long v124 = off_1ECABC030;
    *((void *)&v124 + 1) = 0;
    uint16x8_t v34 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v33, &v117, (uint64_t)&v124);
    *(void *)&long long v124 = off_1ECABC030;
    uint64_t v35 = (_DWORD *)*((void *)&v125 + 1);
    *((void *)&v125 + 1) = 0;
    if (v35)
    {
      if (*v35 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v35 -= 2;
      }
    }
    uint64_t v36 = *((void *)this + 5);
    v34[3] = *(void *)(v36 + 120);
    long long v124 = 0uLL;
    long long v37 = (void *)WTF::fastMalloc((WTF *)8);
    DWORD2(v117) = 1;
    *(void *)&long long v117 = v37;
    *long long v37 = v16;
    HIDWORD(v117) = 1;
    unint64_t v16 = WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>((void *)(v36 + 312), &v124, (uint64_t)v34, (uint64_t *)&v117);
    int8x16_t v39 = (WTF *)v117;
    if ((void)v117)
    {
      *(void *)&long long v117 = 0;
      DWORD2(v117) = 0;
      WTF::fastFree(v39, v38);
    }
    uint64_t v17 = *((void *)this + 5);
    v16[3] = *(void *)(v17 + 168);
    *((unsigned char *)v16 + 88) = 1;
  }
LABEL_59:
  int8x16_t v40 = (void *)(v17 + 312);
  long long v117 = 0uLL;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(void *)&long long v125 = 0;
  *(void *)&long long v124 = off_1ECABC030;
  *((void *)&v124 + 1) = 0;
  int8x16_t v41 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v40, &v117, (uint64_t)&v124);
  *(void *)&long long v124 = off_1ECABC030;
  __int16 v42 = (_DWORD *)*((void *)&v125 + 1);
  *((void *)&v125 + 1) = 0;
  if (v42)
  {
    if (*v42 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v42 -= 2;
    }
  }
  uint64_t v43 = *((void *)this + 5);
  v41[3] = *(void *)(v43 + 120);
  long long v124 = 0uLL;
  LODWORD(v117) = 1;
  unint64_t v44 = WGSL::AST::Builder::construct<WGSL::AST::Unsigned32Literal,WGSL::SourceSpan,int,void>((void *)(v43 + 312), &v124, (int *)&v117);
  uint64_t v45 = (uint64_t)v44;
  uint64_t v46 = *((void *)this + 5);
  v44[3] = *(void *)(v46 + 168);
  if (*((unsigned char *)v44 + 56))
  {
    uint64_t v47 = *((unsigned int *)v44 + 12);
    if (v47 != -1)
    {
      int8x16_t v48 = v44 + 4;
      if (v47 == 4)
      {
        *int8x16_t v48 = 1;
        goto LABEL_70;
      }
      ((void (*)(long long *, _DWORD *))off_1ECABC098[v47])(&v124, v48);
      uint64_t v46 = *((void *)this + 5);
    }
    *(_DWORD *)(v45 + 32) = 1;
    *(_DWORD *)(v45 + 48) = 4;
  }
  else
  {
    *((_DWORD *)v44 + 8) = 1;
    *((_DWORD *)v44 + 12) = 4;
    *((unsigned char *)v44 + 56) = 1;
  }
LABEL_70:
  long long v124 = 0uLL;
  LOBYTE(v117) = 1;
  unint64_t v49 = WGSL::AST::Builder::construct<WGSL::AST::BinaryExpression,WGSL::SourceSpan,WGSL::AST::Expression &,WGSL::AST::Unsigned32Literal &,WGSL::AST::BinaryOperation,void>((void *)(v46 + 312), &v124, (uint64_t)v12, v45, (char *)&v117);
  uint64_t v50 = *((void *)this + 5);
  v49[3] = *(void *)(v50 + 168);
  long long v124 = 0uLL;
  unsigned long long v51 = (void *)WTF::fastMalloc((WTF *)0x10);
  DWORD2(v117) = 2;
  *(void *)&long long v117 = v51;
  *unsigned long long v51 = v16;
  v51[1] = v49;
  HIDWORD(v117) = 2;
  unint64_t v53 = (unint64_t)WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>((void *)(v50 + 312), &v124, (uint64_t)v41, (uint64_t *)&v117);
  unint64_t v54 = (WTF *)v117;
  if ((void)v117)
  {
    *(void *)&long long v117 = 0;
    DWORD2(v117) = 0;
    WTF::fastFree(v54, v52);
  }
  *(void *)(v53 + 24) = v49[3];
  uint64_t v55 = *((void *)this + 5);
  uint64_t v56 = *((void *)a2 + 8);
  uint64_t v57 = *(void *)(v55 + 312);
  if ((unint64_t)(*(void *)(v55 + 320) - v57) <= 0x4F)
  {
    uint64_t v102 = WTF::fastMalloc((WTF *)0x4000);
    *(void *)&long long v124 = v102;
    uint64_t v104 = *(unsigned int *)(v55 + 340);
    if (v104 == *(_DWORD *)(v55 + 336))
    {
      unint64_t v105 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v55 + 328, v104 + 1, (unint64_t)&v124);
      uint64_t v104 = *(unsigned int *)(v55 + 340);
      uint64_t v106 = *(void *)(v55 + 328);
      uint64_t v107 = *(void *)v105;
      *(void *)unint64_t v105 = 0;
      *(void *)(v106 + 8 * v104) = v107;
      uint16x8_t v108 = (WTF *)v124;
    }
    else
    {
      uint64_t v109 = v102;
      uint16x8_t v108 = 0;
      uint64_t v110 = *(void *)(v55 + 328);
      *(void *)&long long v124 = 0;
      *(void *)(v110 + 8 * v104) = v109;
    }
    *(_DWORD *)(v55 + 340) = v104 + 1;
    WTF::fastFree(v108, v103);
    uint64_t v111 = *(unsigned int *)(v55 + 340);
    if (v111)
    {
      uint64_t v57 = *(void *)(*(void *)(v55 + 328) + 8 * v111 - 8);
      *(void *)(v55 + 312) = v57;
      *(void *)(v55 + 320) = v57 + 0x4000;
      goto LABEL_73;
    }
LABEL_148:
    __break(0xC471u);
    JUMPOUT(0x182549348);
  }
LABEL_73:
  uint64_t v114 = (long long *)((char *)a2 + 8);
  *(_OWORD *)(v57 + 8) = *(_OWORD *)((char *)a2 + 8);
  *(void *)(v57 + 24) = 0;
  *(unsigned char *)(v57 + 32) = 0;
  *(unsigned char *)(v57 + 56) = 0;
  *(void *)uint64_t v57 = off_1ECABC180;
  *(void *)(v57 + 64) = v56;
  *(void *)(v57 + 72) = v53;
  *(void *)(v55 + 312) += 80;
  unint64_t v58 = *(unsigned int *)(v55 + 356);
  if (v58 != *(_DWORD *)(v55 + 352))
  {
    int v64 = (void *)(*(void *)(v55 + 344) + 8 * v58);
    goto LABEL_87;
  }
  unint64_t v59 = v58 + (v58 >> 2);
  if (v59 >= 0x10) {
    unint64_t v60 = v59 + 1;
  }
  else {
    unint64_t v60 = 16;
  }
  if (v60 <= v58 + 1) {
    unint64_t v61 = v58 + 1;
  }
  else {
    unint64_t v61 = v60;
  }
  if (v61 >> 29)
  {
LABEL_147:
    __break(0xC471u);
    JUMPOUT(0x182549354);
  }
  unint64_t v53 = *(void *)(v55 + 344);
  int8x16_t v62 = (void *)WTF::fastMalloc((WTF *)(8 * v61));
  *(_DWORD *)(v55 + 352) = v61;
  *(void *)(v55 + 344) = v62;
  memcpy(v62, (const void *)v53, 8 * v58);
  if (v53)
  {
    if (*(void *)(v55 + 344) == v53)
    {
      *(void *)(v55 + 344) = 0;
      *(_DWORD *)(v55 + 352) = 0;
    }
    WTF::fastFree((WTF *)v53, v63);
  }
  unint64_t v58 = *(unsigned int *)(v55 + 356);
  int v64 = (void *)(*(void *)(v55 + 344) + 8 * v58);
LABEL_87:
  void *v64 = v57;
  *(_DWORD *)(v55 + 356) = v58 + 1;
  *(void *)(v57 + 24) = *((void *)a2 + 3);
  uint64_t v65 = *((void *)this + 5);
  long long v118 = *v114;
  uint64_t v66 = *((void *)a2 + 3);
  *(void *)&long long v117 = a2;
  *((void *)&v117 + 1) = &unk_1ECABBFE0;
  uint64_t v119 = v66;
  v120[0] = 0;
  unsigned __int8 v122 = 0;
  int v67 = *((unsigned __int8 *)a2 + 56);
  if (*((unsigned char *)a2 + 56))
  {
    int v121 = -1;
    unint64_t v53 = *((unsigned int *)a2 + 12);
    if (v53 != -1)
    {
      ((void (*)(long long *, unsigned char *, char *))off_1ECABC0F0[v53])(&v124, v120, (char *)a2 + 32);
      int v121 = v53;
    }
    unsigned __int8 v122 = 1;
  }
  unint64_t v112 = v4;
  uint8x8_t v113 = this;
  uint8x16_t v68 = (uint64_t *)(v65 + 400);
  *((void *)&v117 + 1) = off_1ECABC180;
  __n128 v123 = *v4;
  unint64_t v69 = *(unsigned int *)(v65 + 412);
  if (v69 == *(_DWORD *)(v65 + 408))
  {
    unint64_t v70 = v69 + (v69 >> 2);
    if (v70 >= 0x10) {
      unint64_t v71 = v70 + 1;
    }
    else {
      unint64_t v71 = 16;
    }
    if (v71 <= v69 + 1) {
      unint64_t v72 = v69 + 1;
    }
    else {
      unint64_t v72 = v71;
    }
    WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v68, v72);
    uint64_t v73 = *(unsigned int *)(v65 + 412);
    uint64_t v74 = *(void *)(v65 + 400);
    uint64_t v75 = v117;
    long long v125 = v118;
    *(void *)&long long v124 = v117;
    *((void *)&v124 + 1) = &unk_1ECABBFE0;
    uint64_t v76 = v119;
    uint64_t v126 = v119;
    v127[0] = 0;
    unsigned __int8 v129 = 0;
    int v77 = v122;
    if (v122)
    {
      int v128 = -1;
      int v67 = v121;
      if (v121 != -1)
      {
        uint64_t v78 = v73;
        uint64_t v79 = v74;
        ((void (*)(uint64_t *, unsigned char *, unsigned char *))off_1ECABC198[v121])(&v116, v127, v120);
        uint64_t v74 = v79;
        uint64_t v73 = v78;
        int v128 = v67;
        uint64_t v75 = v124;
        uint64_t v76 = v126;
      }
      int v80 = 1;
      unsigned __int8 v129 = 1;
    }
    else
    {
      int v80 = 0;
    }
    *((void *)&v124 + 1) = off_1ECABC180;
    __n128 v130 = v123;
    uint64_t v86 = v74 + 32 * v73;
    *(void *)(v86 + 24) = 0;
    int16x8_t v87 = (__n128 **)(v86 + 24);
    uint64_t v88 = (char *)operator new(0x60uLL);
    __int16 v89 = (__n128 *)v88;
    *(void *)uint64_t v88 = &unk_1ECABC200;
    *((void *)v88 + 1) = v75;
    *(_OWORD *)(v88 + 24) = v125;
    *((void *)v88 + 2) = &unk_1ECABBFE0;
    *((void *)v88 + 5) = v76;
    v88[48] = 0;
    v88[72] = 0;
    if (v77)
    {
      *((_DWORD *)v88 + 16) = -1;
      if (v67 != -1)
      {
        ((void (*)(uint64_t *, char *, unsigned char *))off_1ECABC198[v67])(&v116, v88 + 48, v127);
        v89[4].n128_u32[0] = v67;
        int v80 = v129;
      }
      v89[4].n128_u8[8] = 1;
    }
    else
    {
      int v80 = 0;
    }
    uint8x16_t v95 = (__n128 *)(v57 + 64);
    unint64_t v94 = v112;
    unint64_t v96 = (long long *)(v57 + 8);
    v89[1].n128_u64[0] = (unint64_t)off_1ECABC180;
    v89[5] = v130;
    _WORD *v87 = v89;
    *((void *)&v124 + 1) = &unk_1ECABBFE0;
    if (v80 && v128 != -1) {
      ((void (*)(uint64_t *, unsigned char *))off_1ECABC098[v128])(&v116, v127);
    }
    ++*(_DWORD *)(v65 + 412);
    uint8x8_t v97 = v113;
    uint64_t v98 = (char *)a2 + 32;
    *((void *)&v117 + 1) = &unk_1ECABBFE0;
    if (!v122) {
      goto LABEL_130;
    }
  }
  else
  {
    uint64_t v81 = *v68;
    uint64_t v82 = v117;
    long long v125 = v118;
    *(void *)&long long v124 = v117;
    *((void *)&v124 + 1) = &unk_1ECABBFE0;
    uint64_t v83 = v119;
    uint64_t v126 = v119;
    v127[0] = 0;
    unsigned __int8 v129 = 0;
    if (v67)
    {
      int v128 = -1;
      if (v53 != -1)
      {
        uint64_t v84 = v81;
        ((void (*)(uint64_t *, unsigned char *, unsigned char *))off_1ECABC198[v53])(&v116, v127, v120);
        uint64_t v81 = v84;
        int v128 = v53;
        uint64_t v82 = v124;
        uint64_t v83 = v126;
      }
      int v85 = 1;
      unsigned __int8 v129 = 1;
    }
    else
    {
      int v85 = 0;
    }
    *((void *)&v124 + 1) = off_1ECABC180;
    __n128 v130 = v123;
    uint64_t v90 = v81 + 32 * v69;
    *(void *)(v90 + 24) = 0;
    uint8x16_t v91 = (__n128 **)(v90 + 24);
    uint16x8_t v92 = (char *)operator new(0x60uLL);
    uint16x8_t v93 = (__n128 *)v92;
    *(void *)uint16x8_t v92 = &unk_1ECABC200;
    *((void *)v92 + 1) = v82;
    *(_OWORD *)(v92 + 24) = v125;
    *((void *)v92 + 2) = &unk_1ECABBFE0;
    *((void *)v92 + 5) = v83;
    v92[48] = 0;
    v92[72] = 0;
    if (v67)
    {
      *((_DWORD *)v92 + 16) = -1;
      if (v53 != -1)
      {
        ((void (*)(uint64_t *, char *, unsigned char *))off_1ECABC198[v53])(&v116, v92 + 48, v127);
        v93[4].n128_u32[0] = v53;
        int v85 = v129;
      }
      v93[4].n128_u8[8] = 1;
    }
    else
    {
      int v85 = 0;
    }
    v93[1].n128_u64[0] = (unint64_t)off_1ECABC180;
    v93[5] = v130;
    const char *v91 = v93;
    *((void *)&v124 + 1) = &unk_1ECABBFE0;
    uint8x8_t v97 = v113;
    uint8x16_t v95 = (__n128 *)(v57 + 64);
    unint64_t v94 = v112;
    unint64_t v96 = (long long *)(v57 + 8);
    if (v85)
    {
      if (v128 != -1) {
        ((void (*)(uint64_t *, unsigned char *))off_1ECABC098[v128])(&v116, v127);
      }
      int v128 = -1;
    }
    ++*(_DWORD *)(v65 + 412);
    *((void *)&v117 + 1) = &unk_1ECABBFE0;
    uint64_t v98 = (char *)a2 + 32;
    if (!v122) {
      goto LABEL_130;
    }
  }
  if (v121 != -1) {
    ((void (*)(long long *, unsigned char *))off_1ECABC098[v121])(&v124, v120);
  }
LABEL_130:
  *(void *)a2 = &unk_1ECABBFE0;
  if (*((unsigned char *)a2 + 56))
  {
    uint64_t v99 = *((unsigned int *)a2 + 12);
    if (v99 != -1) {
      ((void (*)(long long *, char *))off_1ECABC098[v99])(&v124, v98);
    }
    *((_DWORD *)a2 + 12) = -1;
  }
  *(void *)a2 = &unk_1ECABC008;
  long long *v114 = *v96;
  *(void *)a2 = &unk_1ECABBFE0;
  *((void *)a2 + 3) = *(void *)(v57 + 24);
  *((unsigned char *)a2 + 32) = 0;
  *((unsigned char *)a2 + 56) = 0;
  if (*(unsigned char *)(v57 + 56))
  {
    *((_DWORD *)a2 + 12) = -1;
    uint64_t v100 = *(unsigned int *)(v57 + 48);
    if (v100 != -1)
    {
      ((void (*)(long long *, char *, uint64_t))off_1ECABC0F0[v100])(&v124, v98, v57 + 32);
      *((_DWORD *)a2 + 12) = v100;
    }
    *((unsigned char *)a2 + 56) = 1;
  }
  *(void *)a2 = off_1ECABC180;
  __n128 result = *v95;
  __n128 *v94 = *v95;
  *(unsigned char *)(*((void *)v97 + 5) + 31) = 1;
  return result;
}

uint64_t WGSL::insertBoundsChecks@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = result;
  LOBYTE(v13) = 0;
  unsigned __int8 v14 = 0;
  BOOL v12 = (uint64_t (**)(void **, void))&unk_1ECABBD70;
  uint64_t v15 = result;
  uint64_t v4 = *(unsigned int *)(result + 92);
  if (!v4)
  {
    uint64_t v9 = *(unsigned int *)(result + 76);
    if (!v9)
    {
      *a2 = 0;
      a2[32] = 0;
      return result;
    }
    int v10 = *(void **)(result + 64);
    int v11 = &v10[v9];
    goto LABEL_12;
  }
  int v5 = 0;
  int v6 = *(void **)(result + 80);
  uint64_t v7 = 8 * v4;
  do
  {
    if (!v5) {
      __n128 result = v12[3]((void **)&v12, *v6);
    }
    ++v6;
    int v5 = v14;
    v7 -= 8;
  }
  while (v7);
  uint64_t v8 = *(unsigned int *)(v2 + 76);
  if (!v8)
  {
LABEL_16:
    *a2 = 0;
    a2[32] = 0;
    BOOL v12 = (uint64_t (**)(void **, void))&unk_1ECABB740;
    if (!v5) {
      return result;
    }
    goto LABEL_17;
  }
  if (!v14)
  {
    int v10 = *(void **)(v2 + 64);
    int v11 = &v10[v8];
LABEL_12:
    int v5 = 0;
    do
    {
      if (!v5) {
        __n128 result = v12[5]((void **)&v12, *v10);
      }
      ++v10;
      int v5 = v14;
    }
    while (v10 != v11);
    goto LABEL_16;
  }
  *a2 = 0;
  a2[32] = 0;
  BOOL v12 = (uint64_t (**)(void **, void))&unk_1ECABB740;
LABEL_17:
  __n128 result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return WTF::StringImpl::destroy();
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WGSL::BoundsCheckVisitor::~BoundsCheckVisitor(WGSL::BoundsCheckVisitor *this)
{
  *(void *)this = &unk_1ECABB740;
  if (*((unsigned char *)this + 32))
  {
    uint64_t v2 = (_DWORD *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v2)
    {
      if (*v2 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v2 -= 2;
      }
    }
  }
}

{
  _DWORD *v2;
  uint64_t vars8;

  *(void *)this = &unk_1ECABB740;
  if (*((unsigned char *)this + 32))
  {
    uint64_t v2 = (_DWORD *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v2)
    {
      if (*v2 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v2 -= 2;
      }
    }
  }
  JUMPOUT(0x18530AFF0);
}

void *WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(void *this, _OWORD *a2, uint64_t a3)
{
  int v5 = this;
  uint64_t v6 = *this;
  if (this[1] - *this <= 0x5FuLL)
  {
    this = (void *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    uint64_t v6 = *v5;
  }
  *(_OWORD *)(v6 + 8) = *a2;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 0;
  *(unsigned char *)(v6 + 56) = 0;
  *(void *)uint64_t v6 = off_1ECABBFB8;
  *(void *)(v6 + 64) = &unk_1ECABC008;
  *(_OWORD *)(v6 + 72) = *(_OWORD *)(a3 + 8);
  *(void *)(v6 + 64) = off_1ECABC030;
  uint64_t v7 = *(void *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(v6 + 88) = v7;
  *v5 += 96;
  unint64_t v8 = *((unsigned int *)v5 + 11);
  if (v8 != *((_DWORD *)v5 + 10))
  {
    uint64_t v15 = (void *)(v5[4] + 8 * v8);
LABEL_17:
    *uint64_t v15 = v6;
    *((_DWORD *)v5 + 11) = v8 + 1;
    return (void *)v6;
  }
  unint64_t v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10) {
    unint64_t v10 = v9 + 1;
  }
  else {
    unint64_t v10 = 16;
  }
  if (v10 <= v8 + 1) {
    unint64_t v11 = v8 + 1;
  }
  else {
    unint64_t v11 = v10;
  }
  if (!(v11 >> 29))
  {
    BOOL v12 = (void *)v5[4];
    uint64_t v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
    *((_DWORD *)v5 + 10) = v11;
    v5[4] = v13;
    memcpy(v13, v12, 8 * v8);
    if (v12)
    {
      if ((void *)v5[4] == v12)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v12, v14);
    }
    unint64_t v8 = *((unsigned int *)v5 + 11);
    uint64_t v15 = (void *)(v5[4] + 8 * v8);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

void WGSL::AST::Identifier::~Identifier(WGSL::AST::Identifier *this)
{
  *(void *)this = off_1ECABC030;
  uint64_t v2 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2)
  {
    if (*v2 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v2 -= 2;
    }
  }
}

{
  _DWORD *v2;
  uint64_t vars8;

  *(void *)this = off_1ECABC030;
  uint64_t v2 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2)
  {
    if (*v2 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v2 -= 2;
    }
  }
  JUMPOUT(0x18530AFF0);
}

void *WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>(void *this, _OWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = this;
  uint64_t v8 = *this;
  if (this[1] - *this <= 0x5FuLL)
  {
    this = (void *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    uint64_t v8 = *v7;
  }
  *(_OWORD *)(v8 + 8) = *a2;
  *(void *)(v8 + 24) = 0;
  *(unsigned char *)(v8 + 32) = 0;
  *(unsigned char *)(v8 + 56) = 0;
  *(void *)uint64_t v8 = &unk_1ECABC058;
  *(void *)(v8 + 72) = 0;
  *(void *)(v8 + 80) = 0;
  *(void *)(v8 + 64) = a3;
  uint64_t v9 = *a4;
  *a4 = 0;
  *(void *)(v8 + 72) = v9;
  LODWORD(v9) = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = 0;
  *(_DWORD *)(v8 + 80) = v9;
  LODWORD(v9) = *((_DWORD *)a4 + 3);
  *((_DWORD *)a4 + 3) = 0;
  *(_DWORD *)(v8 + 84) = v9;
  *(_WORD *)(v8 + 88) = 1792;
  *v7 += 96;
  unint64_t v10 = *((unsigned int *)v7 + 11);
  if (v10 != *((_DWORD *)v7 + 10))
  {
    uint64_t v17 = (void *)(v7[4] + 8 * v10);
LABEL_17:
    void *v17 = v8;
    *((_DWORD *)v7 + 11) = v10 + 1;
    return (void *)v8;
  }
  unint64_t v11 = v10 + (v10 >> 2);
  if (v11 >= 0x10) {
    unint64_t v12 = v11 + 1;
  }
  else {
    unint64_t v12 = 16;
  }
  if (v12 <= v10 + 1) {
    unint64_t v13 = v10 + 1;
  }
  else {
    unint64_t v13 = v12;
  }
  if (!(v13 >> 29))
  {
    unsigned __int8 v14 = (void *)v7[4];
    uint64_t v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)v7 + 10) = v13;
    v7[4] = v15;
    memcpy(v15, v14, 8 * v10);
    if (v14)
    {
      if ((void *)v7[4] == v14)
      {
        v7[4] = 0;
        *((_DWORD *)v7 + 10) = 0;
      }
      WTF::fastFree((WTF *)v14, v16);
    }
    unint64_t v10 = *((unsigned int *)v7 + 11);
    uint64_t v17 = (void *)(v7[4] + 8 * v10);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

void *WGSL::AST::Builder::construct<WGSL::AST::Unsigned32Literal,WGSL::SourceSpan,int,void>(void *this, _OWORD *a2, int *a3)
{
  int v5 = this;
  uint64_t v6 = *this;
  if (this[1] - *this <= 0x47uLL)
  {
    this = (void *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    uint64_t v6 = *v5;
  }
  int v7 = *a3;
  *(_OWORD *)(v6 + 8) = *a2;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 0;
  *(unsigned char *)(v6 + 56) = 0;
  *(void *)uint64_t v6 = &unk_1ECABC080;
  *(_DWORD *)(v6 + 64) = v7;
  *v5 += 72;
  unint64_t v8 = *((unsigned int *)v5 + 11);
  if (v8 != *((_DWORD *)v5 + 10))
  {
    uint64_t v15 = (void *)(v5[4] + 8 * v8);
LABEL_17:
    *uint64_t v15 = v6;
    *((_DWORD *)v5 + 11) = v8 + 1;
    return (void *)v6;
  }
  unint64_t v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10) {
    unint64_t v10 = v9 + 1;
  }
  else {
    unint64_t v10 = 16;
  }
  if (v10 <= v8 + 1) {
    unint64_t v11 = v8 + 1;
  }
  else {
    unint64_t v11 = v10;
  }
  if (!(v11 >> 29))
  {
    unint64_t v12 = (void *)v5[4];
    unint64_t v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
    *((_DWORD *)v5 + 10) = v11;
    v5[4] = v13;
    memcpy(v13, v12, 8 * v8);
    if (v12)
    {
      if ((void *)v5[4] == v12)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v12, v14);
    }
    unint64_t v8 = *((unsigned int *)v5 + 11);
    uint64_t v15 = (void *)(v5[4] + 8 * v8);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

void *WGSL::AST::Builder::construct<WGSL::AST::BinaryExpression,WGSL::SourceSpan,WGSL::AST::Expression &,WGSL::AST::Unsigned32Literal &,WGSL::AST::BinaryOperation,void>(void *this, _OWORD *a2, uint64_t a3, uint64_t a4, char *a5)
{
  unint64_t v9 = this;
  uint64_t v10 = *this;
  if (this[1] - *this <= 0x57uLL)
  {
    this = (void *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    uint64_t v10 = *v9;
  }
  char v11 = *a5;
  *(_OWORD *)(v10 + 8) = *a2;
  *(void *)(v10 + 24) = 0;
  *(unsigned char *)(v10 + 32) = 0;
  *(unsigned char *)(v10 + 56) = 0;
  *(void *)uint64_t v10 = off_1ECABC158;
  *(void *)(v10 + 64) = a3;
  *(void *)(v10 + 72) = a4;
  *(unsigned char *)(v10 + 80) = v11;
  *v9 += 88;
  unint64_t v12 = *((unsigned int *)v9 + 11);
  if (v12 != *((_DWORD *)v9 + 10))
  {
    long long v19 = (void *)(v9[4] + 8 * v12);
LABEL_17:
    void *v19 = v10;
    *((_DWORD *)v9 + 11) = v12 + 1;
    return (void *)v10;
  }
  unint64_t v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10) {
    unint64_t v14 = v13 + 1;
  }
  else {
    unint64_t v14 = 16;
  }
  if (v14 <= v12 + 1) {
    unint64_t v15 = v12 + 1;
  }
  else {
    unint64_t v15 = v14;
  }
  if (!(v15 >> 29))
  {
    unint64_t v16 = (void *)v9[4];
    uint64_t v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
    *((_DWORD *)v9 + 10) = v15;
    v9[4] = v17;
    memcpy(v17, v16, 8 * v12);
    if (v16)
    {
      if ((void *)v9[4] == v16)
      {
        v9[4] = 0;
        *((_DWORD *)v9 + 10) = 0;
      }
      WTF::fastFree((WTF *)v16, v18);
    }
    unint64_t v12 = *((unsigned int *)v9 + 11);
    long long v19 = (void *)(v9[4] + 8 * v12);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

void WGSL::AST::IdentifierExpression::~IdentifierExpression(WGSL::AST::IdentifierExpression *this)
{
  *((void *)this + 8) = off_1ECABC030;
  uint64_t v2 = (_DWORD *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v2)
  {
    if (*v2 == 2)
    {
      WTF::StringImpl::destroy();
      *(void *)this = &unk_1ECABBFE0;
      if (!*((unsigned char *)this + 56)) {
        return;
      }
      goto LABEL_7;
    }
    *v2 -= 2;
  }
  *(void *)this = &unk_1ECABBFE0;
  if (!*((unsigned char *)this + 56)) {
    return;
  }
LABEL_7:
  uint64_t v3 = *((unsigned int *)this + 12);
  if (v3 != -1) {
    ((void (*)(char *, char *))off_1ECABC098[v3])(&v4, (char *)this + 32);
  }
  *((_DWORD *)this + 12) = -1;
}

{
  _DWORD *v2;
  uint64_t v3;
  char v4;

  *((void *)this + 8) = off_1ECABC030;
  uint64_t v2 = (_DWORD *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v2)
  {
    if (*v2 == 2)
    {
      WTF::StringImpl::destroy();
      *(void *)this = &unk_1ECABBFE0;
      if (!*((unsigned char *)this + 56)) {
        goto LABEL_10;
      }
      goto LABEL_7;
    }
    *v2 -= 2;
  }
  *(void *)this = &unk_1ECABBFE0;
  if (!*((unsigned char *)this + 56)) {
    goto LABEL_10;
  }
LABEL_7:
  uint64_t v3 = *((unsigned int *)this + 12);
  if (v3 != -1) {
    ((void (*)(char *, char *))off_1ECABC098[v3])(&v4, (char *)this + 32);
  }
  *((_DWORD *)this + 12) = -1;
LABEL_10:
  MEMORY[0x18530AFF0](this, 0x10F3C400B403FF0);
}

uint64_t WGSL::AST::IdentifierExpression::kind(WGSL::AST::IdentifierExpression *this)
{
  return 22;
}

void WGSL::AST::Expression::~Expression(WGSL::AST::Expression *this)
{
  *(void *)this = &unk_1ECABBFE0;
  if (*((unsigned char *)this + 56))
  {
    uint64_t v2 = *((unsigned int *)this + 12);
    if (v2 != -1) {
      ((void (*)(char *, char *))off_1ECABC098[v2])(&v3, (char *)this + 32);
    }
    *((_DWORD *)this + 12) = -1;
  }
}

{
  uint64_t v2;
  char v3;

  *(void *)this = &unk_1ECABBFE0;
  if (*((unsigned char *)this + 56))
  {
    uint64_t v2 = *((unsigned int *)this + 12);
    if (v2 != -1) {
      ((void (*)(char *, char *))off_1ECABC098[v2])(&v3, (char *)this + 32);
    }
    *((_DWORD *)this + 12) = -1;
  }
  MEMORY[0x18530AFF0](this, 0x10F3C40F62AF53DLL);
}

uint64_t WGSL::AST::Node::kind(WGSL::AST::Node *this)
{
  return 0;
}

void WGSL::AST::Node::~Node(WGSL::AST::Node *this)
{
}

uint64_t WGSL::AST::Identifier::kind(WGSL::AST::Identifier *this)
{
  return 29;
}

void WGSL::AST::CallExpression::~CallExpression(WGSL::AST::CallExpression *this, void *a2)
{
  char v3 = (WTF *)*((void *)this + 9);
  if (v3)
  {
    *((void *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  *(void *)this = &unk_1ECABBFE0;
  if (*((unsigned char *)this + 56))
  {
    uint64_t v4 = *((unsigned int *)this + 12);
    if (v4 != -1) {
      ((void (*)(char *, char *))off_1ECABC098[v4])(&v5, (char *)this + 32);
    }
    *((_DWORD *)this + 12) = -1;
  }
}

{
  WTF *v3;
  uint64_t v4;
  char v5;

  char v3 = (WTF *)*((void *)this + 9);
  if (v3)
  {
    *((void *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  *(void *)this = &unk_1ECABBFE0;
  if (*((unsigned char *)this + 56))
  {
    uint64_t v4 = *((unsigned int *)this + 12);
    if (v4 != -1) {
      ((void (*)(char *, char *))off_1ECABC098[v4])(&v5, (char *)this + 32);
    }
    *((_DWORD *)this + 12) = -1;
  }
  MEMORY[0x18530AFF0](this, 0x10F3C4016200FDELL);
}

uint64_t WGSL::AST::CallExpression::kind(WGSL::AST::CallExpression *this)
{
  return 20;
}

void WGSL::AST::Unsigned32Literal::~Unsigned32Literal(WGSL::AST::Unsigned32Literal *this)
{
  *(void *)this = &unk_1ECABBFE0;
  if (*((unsigned char *)this + 56))
  {
    uint64_t v2 = *((unsigned int *)this + 12);
    if (v2 != -1) {
      ((void (*)(char *, char *))off_1ECABC098[v2])(&v3, (char *)this + 32);
    }
    *((_DWORD *)this + 12) = -1;
  }
}

{
  uint64_t v2;
  char v3;

  *(void *)this = &unk_1ECABBFE0;
  if (*((unsigned char *)this + 56))
  {
    uint64_t v2 = *((unsigned int *)this + 12);
    if (v2 != -1) {
      ((void (*)(char *, char *))off_1ECABC098[v2])(&v3, (char *)this + 32);
    }
    *((_DWORD *)this + 12) = -1;
  }
  MEMORY[0x18530AFF0](this, 0x10F3C40FA57840CLL);
}

uint64_t WGSL::AST::Unsigned32Literal::kind(WGSL::AST::Unsigned32Literal *this)
{
  return 36;
}

void WGSL::AST::BinaryExpression::~BinaryExpression(WGSL::AST::BinaryExpression *this)
{
  *(void *)this = &unk_1ECABBFE0;
  if (*((unsigned char *)this + 56))
  {
    uint64_t v2 = *((unsigned int *)this + 12);
    if (v2 != -1) {
      ((void (*)(char *, char *))off_1ECABC098[v2])(&v3, (char *)this + 32);
    }
    *((_DWORD *)this + 12) = -1;
  }
}

{
  uint64_t v2;
  char v3;

  *(void *)this = &unk_1ECABBFE0;
  if (*((unsigned char *)this + 56))
  {
    uint64_t v2 = *((unsigned int *)this + 12);
    if (v2 != -1) {
      ((void (*)(char *, char *))off_1ECABC098[v2])(&v3, (char *)this + 32);
    }
    *((_DWORD *)this + 12) = -1;
  }
  MEMORY[0x18530AFF0](this, 0x10F3C4034F99CDCLL);
}

uint64_t WGSL::AST::BinaryExpression::kind(WGSL::AST::BinaryExpression *this)
{
  return 18;
}

void WGSL::AST::IndexAccessExpression::~IndexAccessExpression(WGSL::AST::IndexAccessExpression *this)
{
  *(void *)this = &unk_1ECABBFE0;
  if (*((unsigned char *)this + 56))
  {
    uint64_t v2 = *((unsigned int *)this + 12);
    if (v2 != -1) {
      ((void (*)(char *, char *))off_1ECABC098[v2])(&v3, (char *)this + 32);
    }
    *((_DWORD *)this + 12) = -1;
  }
}

{
  uint64_t v2;
  char v3;

  *(void *)this = &unk_1ECABBFE0;
  if (*((unsigned char *)this + 56))
  {
    uint64_t v2 = *((unsigned int *)this + 12);
    if (v2 != -1) {
      ((void (*)(char *, char *))off_1ECABC098[v2])(&v3, (char *)this + 32);
    }
    *((_DWORD *)this + 12) = -1;
  }
  MEMORY[0x18530AFF0](this, 0x10F3C408065EDEFLL);
}

uint64_t WGSL::AST::IndexAccessExpression::kind(WGSL::AST::IndexAccessExpression *this)
{
  return 24;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21IndexAccessExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1ECABC200;
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 64);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_1ECABC098[v2])(&v4, a1 + 48);
    }
    *(_DWORD *)(a1 + 64) = -1;
  }
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21IndexAccessExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1ECABC200;
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 64);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_1ECABC098[v2])(&v4, a1 + 48);
    }
    *(_DWORD *)(a1 + 64) = -1;
  }
  return MEMORY[0x18530AFF0](a1, 0x10F3C403B4B6AF4);
}

char *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21IndexAccessExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x60uLL);
  char v3 = v2;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v2 = &unk_1ECABC200;
  *((void *)v2 + 1) = v4;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((void *)v2 + 2) = &unk_1ECABBFE0;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  v2[48] = 0;
  v2[72] = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    *((_DWORD *)v2 + 16) = -1;
    uint64_t v5 = *(unsigned int *)(a1 + 64);
    if (v5 != -1)
    {
      ((void (*)(char *, char *, uint64_t))off_1ECABC0F0[v5])(&v7, v2 + 48, a1 + 48);
      *((_DWORD *)v3 + 16) = v5;
    }
    v3[72] = 1;
  }
  *((void *)v3 + 2) = off_1ECABC180;
  *((_OWORD *)v3 + 5) = *(_OWORD *)(a1 + 80);
  return v3;
}

__n128 _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21IndexAccessExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7__cloneEPNS0_6__baseISI_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_1ECABC200;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = &unk_1ECABC008;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 16) = &unk_1ECABBFE0;
  uint64_t v5 = *(void *)(a1 + 40);
  *(unsigned char *)(a2 + 48) = 0;
  uint64_t v6 = a2 + 48;
  *(void *)(v6 - 8) = v5;
  *(unsigned char *)(v6 + 24) = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    *(_DWORD *)(a2 + 64) = -1;
    uint64_t v7 = *(unsigned int *)(a1 + 64);
    if (v7 != -1)
    {
      ((void (*)(char *))off_1ECABC0F0[v7])(&v9);
      *(_DWORD *)(a2 + 64) = v7;
    }
    *(unsigned char *)(a2 + 72) = 1;
  }
  *(void *)(a2 + 16) = off_1ECABC180;
  __n128 result = *(__n128 *)(a1 + 80);
  *(__n128 *)(a2 + 80) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21IndexAccessExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7destroyEv(uint64_t result)
{
  *(void *)(result + 16) = &unk_1ECABBFE0;
  if (*(unsigned char *)(result + 72))
  {
    uint64_t v1 = result;
    uint64_t v2 = *(unsigned int *)(result + 64);
    if (v2 != -1) {
      __n128 result = ((uint64_t (*)(char *, uint64_t))off_1ECABC098[v2])(&v3, result + 48);
    }
    *(_DWORD *)(v1 + 64) = -1;
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21IndexAccessExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE18destroy_deallocateEv(void *__p)
{
  __p[2] = &unk_1ECABBFE0;
  if (*((unsigned char *)__p + 72))
  {
    uint64_t v2 = *((unsigned int *)__p + 16);
    if (v2 != -1) {
      ((void (*)(char *, void *))off_1ECABC098[v2])(&v3, __p + 6);
    }
  }
  operator delete(__p);
}

__n128 _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21IndexAccessExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEEclEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)uint64_t v2 = &unk_1ECABBFE0;
  if (*(unsigned char *)(v2 + 56))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 48);
    if (v3 == -1)
    {
      uint64_t v4 = v2;
    }
    else
    {
      ((void (*)(char *, uint64_t))off_1ECABC098[v3])(&v7, v2 + 32);
      uint64_t v4 = *(void *)(a1 + 8);
    }
    *(_DWORD *)(v2 + 48) = -1;
    uint64_t v2 = v4;
  }
  *(void *)uint64_t v2 = &unk_1ECABC008;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 24);
  *(void *)uint64_t v2 = &unk_1ECABBFE0;
  *(void *)(v2 + 24) = *(void *)(a1 + 40);
  *(unsigned char *)(v2 + 32) = 0;
  *(unsigned char *)(v2 + 56) = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    *(_DWORD *)(v2 + 48) = -1;
    uint64_t v5 = *(unsigned int *)(a1 + 64);
    if (v5 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1ECABC198[v5])(&v8, v2 + 32, a1 + 48);
      *(_DWORD *)(v2 + 48) = v5;
    }
    *(unsigned char *)(v2 + 56) = 1;
  }
  *(void *)uint64_t v2 = off_1ECABC180;
  __n128 result = *(__n128 *)(a1 + 80);
  *(__n128 *)(v2 + 64) = result;
  return result;
}

uint64_t WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  if (!(a2 >> 27))
  {
    uint64_t v3 = result;
    uint64_t v4 = *(WTF **)result;
    uint64_t v5 = *(unsigned int *)(result + 12);
    uint64_t v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    if (v5)
    {
      uint64_t v8 = v6;
      uint64_t v9 = 32 * v5;
      uint64_t v10 = v4;
      char v11 = v4;
      while (1)
      {
        unint64_t v12 = (WTF *)*((void *)v11 + 3);
        if (!v12) {
          break;
        }
        if (v11 == v12)
        {
          *(void *)(v8 + 24) = v8;
          (*(void (**)(void, uint64_t))(**((void **)v11 + 3) + 24))(*((void *)v11 + 3), v8);
          unint64_t v13 = (WTF *)*((void *)v11 + 3);
          if (v11 != v13) {
            goto LABEL_12;
          }
LABEL_10:
          (*(void (**)(WTF *))(*(void *)v11 + 32))(v11);
          goto LABEL_6;
        }
        *(void *)(v8 + 24) = v12;
        *((void *)v11 + 3) = 0;
LABEL_6:
        v8 += 32;
        char v11 = (WTF *)((char *)v11 + 32);
        uint64_t v10 = (WTF *)((char *)v10 + 32);
        v9 -= 32;
        if (!v9) {
          goto LABEL_14;
        }
      }
      *(void *)(v8 + 24) = 0;
      unint64_t v13 = (WTF *)*((void *)v11 + 3);
      if (v11 != v13)
      {
LABEL_12:
        if (v13) {
          (*(void (**)(WTF *))(*(void *)v13 + 40))(v13);
        }
        goto LABEL_6;
      }
      goto LABEL_10;
    }
LABEL_14:
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void *WGSL::AST::Builder::construct<WGSL::AST::UnaryExpression,WGSL::SourceSpan,WGSL::AST::Expression &,WGSL::AST::UnaryOperation,void>(void *this, _OWORD *a2, uint64_t a3, char *a4)
{
  char v7 = this;
  uint64_t v8 = *this;
  if (this[1] - *this <= 0x4FuLL)
  {
    this = (void *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    uint64_t v8 = *v7;
  }
  char v9 = *a4;
  *(_OWORD *)(v8 + 8) = *a2;
  *(void *)(v8 + 24) = 0;
  *(unsigned char *)(v8 + 32) = 0;
  *(unsigned char *)(v8 + 56) = 0;
  *(void *)uint64_t v8 = off_1ECABC248;
  *(void *)(v8 + 64) = a3;
  *(unsigned char *)(v8 + 72) = v9;
  *v7 += 80;
  unint64_t v10 = *((unsigned int *)v7 + 11);
  if (v10 != *((_DWORD *)v7 + 10))
  {
    uint64_t v17 = (void *)(v7[4] + 8 * v10);
LABEL_17:
    void *v17 = v8;
    *((_DWORD *)v7 + 11) = v10 + 1;
    return (void *)v8;
  }
  unint64_t v11 = v10 + (v10 >> 2);
  if (v11 >= 0x10) {
    unint64_t v12 = v11 + 1;
  }
  else {
    unint64_t v12 = 16;
  }
  if (v12 <= v10 + 1) {
    unint64_t v13 = v10 + 1;
  }
  else {
    unint64_t v13 = v12;
  }
  if (!(v13 >> 29))
  {
    unint64_t v14 = (void *)v7[4];
    unint64_t v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)v7 + 10) = v13;
    v7[4] = v15;
    memcpy(v15, v14, 8 * v10);
    if (v14)
    {
      if ((void *)v7[4] == v14)
      {
        v7[4] = 0;
        *((_DWORD *)v7 + 10) = 0;
      }
      WTF::fastFree((WTF *)v14, v16);
    }
    unint64_t v10 = *((unsigned int *)v7 + 11);
    uint64_t v17 = (void *)(v7[4] + 8 * v10);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

void WGSL::AST::UnaryExpression::~UnaryExpression(WGSL::AST::UnaryExpression *this)
{
  *(void *)this = &unk_1ECABBFE0;
  if (*((unsigned char *)this + 56))
  {
    uint64_t v2 = *((unsigned int *)this + 12);
    if (v2 != -1) {
      ((void (*)(char *, char *))off_1ECABC098[v2])(&v3, (char *)this + 32);
    }
    *((_DWORD *)this + 12) = -1;
  }
}

{
  uint64_t v2;
  char v3;

  *(void *)this = &unk_1ECABBFE0;
  if (*((unsigned char *)this + 56))
  {
    uint64_t v2 = *((unsigned int *)this + 12);
    if (v2 != -1) {
      ((void (*)(char *, char *))off_1ECABC098[v2])(&v3, (char *)this + 32);
    }
    *((_DWORD *)this + 12) = -1;
  }
  MEMORY[0x18530AFF0](this, 0x10F3C40B327DD0CLL);
}

uint64_t WGSL::AST::UnaryExpression::kind(WGSL::AST::UnaryExpression *this)
{
  return 26;
}

uint64_t WGSL::CallGraphBuilder::initializeMappings(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 40);
  uint64_t v3 = *(unsigned int *)(v2 + 76);
  if (!v3) {
    goto LABEL_51;
  }
  uint64_t v4 = *(uint64_t **)(v2 + 64);
  uint64_t v5 = (uint64_t *)(this + 64);
  uint64_t v38 = (void *)(this + 48);
  int8x16_t v39 = (uint64_t *)(this + 104);
  int8x16_t v40 = (uint64_t *)(this + 64);
  int8x16_t v41 = &v4[v3];
  while (2)
  {
    uint64_t v6 = *v4;
    this = (*(uint64_t (**)(uint64_t))(*(void *)*v4 + 16))(*v4);
    if (this == 27) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v45 = v8;
    if (!v8) {
      goto LABEL_5;
    }
    uint64_t v9 = *v5;
    if (!*v5)
    {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::AST::Function *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::AST::Function *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::AST::Function *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v5, 8u);
      uint64_t v9 = *v5;
      if (!*v5)
      {
        int v10 = 0;
        unint64_t v11 = *(WTF::StringImpl **)(v8 + 48);
        unsigned int v12 = *((_DWORD *)v11 + 4);
        if (v12 >= 0x100) {
          goto LABEL_13;
        }
LABEL_15:
        unsigned int v13 = WTF::StringImpl::hashSlowCase(v11);
        goto LABEL_16;
      }
    }
    int v10 = *(_DWORD *)(v9 - 8);
    unint64_t v11 = *(WTF::StringImpl **)(v8 + 48);
    unsigned int v12 = *((_DWORD *)v11 + 4);
    if (v12 < 0x100) {
      goto LABEL_15;
    }
LABEL_13:
    unsigned int v13 = v12 >> 8;
LABEL_16:
    unint64_t v14 = 0;
    for (int i = 1; ; ++i)
    {
      unsigned int v16 = v13 & v10;
      uint64_t v17 = (uint64_t *)(v9 + 16 * (v13 & v10));
      this = *v17;
      if (*v17 == -1)
      {
        unint64_t v14 = (uint64_t *)(v9 + 16 * v16);
        goto LABEL_18;
      }
      if (!this) {
        break;
      }
      this = WTF::equal((WTF *)this, *(const WTF::StringImpl **)(v8 + 48), v7);
      if (this)
      {
        uint64_t v5 = v40;
        goto LABEL_38;
      }
LABEL_18:
      unsigned int v13 = i + v16;
    }
    uint64_t v5 = v40;
    if (v14)
    {
      this = 0;
      *unint64_t v14 = 0;
      v14[1] = 0;
      --*(_DWORD *)(*v40 - 16);
      uint64_t v17 = v14;
    }
    unint64_t v18 = *(_DWORD **)(v8 + 48);
    if (v18) {
      *v18 += 2;
    }
    uint64_t *v17 = (uint64_t)v18;
    uint64_t v6 = v45;
    v17[1] = v45;
    if (*v40)
    {
      ++*(_DWORD *)(*v40 - 12);
      uint64_t v19 = *v40;
      if (*v40) {
        goto LABEL_29;
      }
LABEL_34:
      uint64_t v20 = *(unsigned int *)(v19 - 16);
      unint64_t v21 = *(unsigned int *)(v19 - 4);
      if (v21 > 0x400) {
        goto LABEL_35;
      }
LABEL_30:
      if (3 * v21 <= 4 * v20)
      {
        if (!v21)
        {
          unsigned int v22 = 8;
          goto LABEL_37;
        }
LABEL_36:
        unsigned int v22 = v21 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v21));
LABEL_37:
        this = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::AST::Function *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::AST::Function *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::AST::Function *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v40, v22);
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      uint64_t v19 = *v40;
      if (!*v40) {
        goto LABEL_34;
      }
LABEL_29:
      uint64_t v20 = (*(_DWORD *)(v19 - 16) + *(_DWORD *)(v19 - 12));
      unint64_t v21 = *(unsigned int *)(v19 - 4);
      if (v21 <= 0x400) {
        goto LABEL_30;
      }
LABEL_35:
      if (v21 <= 2 * v20) {
        goto LABEL_36;
      }
    }
LABEL_38:
    unsigned int v23 = *(unsigned __int16 *)(v6 + 121);
    if (v23 >= 0x100)
    {
      uint64_t v42 = v6;
      char v43 = v23;
      int v24 = *(_DWORD **)(v6 + 48);
      if (v24) {
        *v24 += 2;
      }
      unint64_t v44 = v24;
      uint64_t v25 = *(unsigned int *)(v1 + 60);
      if (v25 == *(_DWORD *)(v1 + 56))
      {
        unint64_t v26 = WTF::Vector<WGSL::CallGraph::EntryPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v38, v25 + 1, (unint64_t)&v42);
        uint64_t v27 = *(void *)(v1 + 48) + 24 * *(unsigned int *)(v1 + 60);
        uint64_t v28 = *(void *)v26;
        *(unsigned char *)(v27 + 8) = *(unsigned char *)(v26 + 8);
        *(void *)uint64_t v27 = v28;
        uint64_t v29 = (void *)(v27 + 16);
        unint64_t v30 = (uint64_t *)(v26 + 16);
      }
      else
      {
        uint64_t v31 = *v38 + 24 * v25;
        uint64_t v32 = v42;
        *(unsigned char *)(v31 + 8) = v43;
        *(void *)uint64_t v31 = v32;
        uint64_t v29 = (void *)(v31 + 16);
        unint64_t v30 = (uint64_t *)&v44;
      }
      uint64_t v33 = *v30;
      *unint64_t v30 = 0;
      *uint64_t v29 = v33;
      ++*(_DWORD *)(v1 + 60);
      uint16x8_t v34 = v44;
      unint64_t v44 = 0;
      if (v34)
      {
        if (*v34 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v34 -= 2;
        }
      }
      this = (uint64_t)WTF::Deque<WGSL::AST::Function *,0ul>::append<WGSL::AST::Function *&>(v39, &v45);
    }
LABEL_5:
    if (++v4 != v41) {
      continue;
    }
    break;
  }
LABEL_51:
  while (1)
  {
    uint64_t v37 = *(void *)(v1 + 104);
    if (v37 == *(void *)(v1 + 112)) {
      break;
    }
    uint64_t v35 = *(void *)(*(void *)(v1 + 120) + 8 * v37);
    if (v37 == *(unsigned int *)(v1 + 128) - 1) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = v37 + 1;
    }
    *(void *)(v1 + 104) = v36;
    this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1 + 48))(v1, v35);
  }
  return this;
}

uint64_t *WTF::Deque<WGSL::AST::Function *,0ul>::append<WGSL::AST::Function *&>(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result[1];
  if (*result)
  {
    if (v4 + 1 != *result) {
      goto LABEL_18;
    }
    LODWORD(v5) = *((_DWORD *)result + 6);
  }
  else
  {
    uint64_t v5 = *((unsigned int *)result + 6);
    if (v4)
    {
      if (v4 != v5 - 1) {
        goto LABEL_18;
      }
    }
    else if (v5)
    {
      goto LABEL_18;
    }
  }
  uint64_t v6 = v5;
  unint64_t v7 = v5 + ((unint64_t)v5 >> 2);
  if (v7 <= 0xF) {
    unint64_t v7 = 15;
  }
  if (v7 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
    return result;
  }
  uint64_t v8 = (char *)result[2];
  int v9 = v7 + 1;
  int v10 = (char *)WTF::fastMalloc((WTF *)(8 * (v7 + 1)));
  *((_DWORD *)v3 + 6) = v9;
  v3[2] = (uint64_t)v10;
  unint64_t v11 = v3[1];
  if (*v3 > v11)
  {
    memcpy(v10, v8, 8 * v11);
    uint64_t v12 = *v3 - v6 + *((unsigned int *)v3 + 6);
    __n128 result = (uint64_t *)memcpy((void *)(v3[2] + 8 * v12), &v8[8 * *v3], 8 * v6 - 8 * *v3);
    *uint64_t v3 = v12;
    if (!v8) {
      goto LABEL_18;
    }
LABEL_15:
    if ((char *)v3[2] == v8)
    {
      v3[2] = 0;
      *((_DWORD *)v3 + 6) = 0;
    }
    __n128 result = (uint64_t *)WTF::fastFree((WTF *)v8, v13);
    goto LABEL_18;
  }
  __n128 result = (uint64_t *)memcpy(&v10[8 * *v3], &v8[8 * *v3], 8 * v11 - 8 * *v3);
  if (v8) {
    goto LABEL_15;
  }
LABEL_18:
  uint64_t v14 = v3[1];
  *(void *)(v3[2] + 8 * v14) = *a2;
  if (v14 == *((unsigned int *)v3 + 6) - 1) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = v14 + 1;
  }
  v3[1] = v15;
  return result;
}

void *WGSL::CallGraphBuilder::visit(void *this, uint64_t a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v5 = this + 9;
  uint64_t v4 = this[9];
  if (v4
    || (this = WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash(this + 9, 8u, 0), (uint64_t v4 = *v5) != 0))
  {
    int v6 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    int v6 = 0;
  }
  unint64_t v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  unsigned int v10 = v6 & ((v9 >> 31) ^ v9);
  unint64_t v11 = (uint64_t *)(v4 + 24 * v10);
  uint64_t v12 = (Function *)*v11;
  if (!*v11)
  {
LABEL_12:
    *unint64_t v11 = a2;
    unsigned int v16 = (WTF **)(v11 + 1);
    uint64_t v15 = (WTF *)v11[1];
    uint64_t v17 = *((unsigned int *)v11 + 5);
    if (v17)
    {
      uint64_t v18 = 24 * v17;
      uint64_t v19 = (char *)v15 + 8;
      do
      {
        uint64_t v20 = *(WTF **)v19;
        if (*(void *)v19)
        {
          *(void *)uint64_t v19 = 0;
          *((_DWORD *)v19 + 2) = 0;
          WTF::fastFree(v20, (void *)a2);
        }
        v19 += 24;
        v18 -= 24;
      }
      while (v18);
      uint64_t v15 = *v16;
    }
    if (v15)
    {
      v11[1] = 0;
      *((_DWORD *)v11 + 4) = 0;
      WTF::fastFree(v15, (void *)a2);
    }
    void *v16 = 0;
    v11[2] = 0;
    if (*v5)
    {
      ++*(_DWORD *)(*v5 - 12);
      uint64_t v21 = *v5;
      if (*v5) {
        goto LABEL_22;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      uint64_t v21 = *v5;
      if (*v5)
      {
LABEL_22:
        uint64_t v22 = (*(_DWORD *)(v21 - 16) + *(_DWORD *)(v21 - 12));
        unint64_t v23 = *(unsigned int *)(v21 - 4);
        if (v23 <= 0x400) {
          goto LABEL_23;
        }
        goto LABEL_28;
      }
    }
    uint64_t v22 = *(unsigned int *)(v21 - 16);
    unint64_t v23 = *(unsigned int *)(v21 - 4);
    if (v23 <= 0x400)
    {
LABEL_23:
      if (3 * v23 <= 4 * v22)
      {
        if (!v23)
        {
          unsigned int v24 = 8;
LABEL_30:
          unint64_t v11 = WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash(v5, v24, v11);
          goto LABEL_31;
        }
LABEL_29:
        unsigned int v24 = v23 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v23));
        goto LABEL_30;
      }
LABEL_31:
      *(void *)(v3 + 88) = v11 + 1;
      *(void *)(v3 + 96) = a2;
      this = WGSL::AST::Visitor::visit((unsigned char *)v3, (Function *)a2);
      uint64_t v26 = *(void *)(v3 + 80);
      if (v26)
      {
        *(void *)(v3 + 80) = 0;
        this = (void *)WTF::fastFree((WTF *)(v26 - 16), v25);
      }
      *(void *)(v3 + 88) = 0;
      *(void *)(v3 + 96) = 0;
      return this;
    }
LABEL_28:
    if (v23 <= 2 * v22) {
      goto LABEL_29;
    }
    goto LABEL_31;
  }
  unsigned int v13 = 0;
  int v14 = 1;
  while (v12 != (Function *)a2)
  {
    if (v12 == (Function *)-1) {
      unsigned int v13 = v11;
    }
    unsigned int v10 = (v10 + v14) & v6;
    unint64_t v11 = (uint64_t *)(v4 + 24 * v10);
    uint64_t v12 = (Function *)*v11;
    ++v14;
    if (!*v11)
    {
      if (v13)
      {
        *unsigned int v13 = 0;
        v13[1] = 0;
        uint64_t v13[2] = 0;
        --*(_DWORD *)(*v5 - 16);
        unint64_t v11 = v13;
      }
      goto LABEL_12;
    }
  }
  return this;
}

uint64_t WGSL::CallGraphBuilder::visit(WGSL::CallGraphBuilder *this, WGSL::AST::CallExpression *a2)
{
  uint64_t v4 = *((unsigned int *)a2 + 21);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)*((void *)a2 + 9);
    uint64_t v6 = 8 * v4;
    do
    {
      uint64_t v7 = *v5++;
      WGSL::AST::Visitor::visit(this, v7);
      v6 -= 8;
    }
    while (v6);
  }
  unint64_t v8 = (const WTF::StringImpl **)*((void *)a2 + 8);
  uint64_t result = (*((uint64_t (**)(const WTF::StringImpl **))*v8 + 2))(v8);
  if (result == 22)
  {
    uint64_t v11 = *((void *)this + 8);
    if (v11)
    {
      unsigned int v12 = *(_DWORD *)(v11 - 8);
      unsigned int v13 = v8[11];
      unsigned int v14 = *((_DWORD *)v13 + 4);
      int v15 = v14 < 0x100 ? WTF::StringImpl::hashSlowCase(v13) : v14 >> 8;
      for (i = 0; ; int v15 = i + v17)
      {
        uint64_t v17 = v15 & v12;
        uint64_t result = *(void *)(v11 + 16 * v17);
        if (result != -1)
        {
          if (!result) {
            return result;
          }
          uint64_t result = WTF::equal((WTF *)result, v8[11], v10);
          if (result) {
            break;
          }
        }
        ++i;
      }
      uint64_t v18 = v11 + 16 * v17;
      uint64_t v19 = *((void *)this + 8);
      if (!v19 || v18 != v19 + 16 * *(unsigned int *)(v19 - 4))
      {
        uint64_t v20 = (void *)(v18 + 8);
        uint64_t result = (uint64_t)WTF::Deque<WGSL::AST::Function *,0ul>::append<WGSL::AST::Function *&>((uint64_t *)this + 13, (void *)(v18 + 8));
        uint64_t v21 = *((void *)this + 10);
        uint64_t v22 = (uint64_t *)((char *)this + 80);
        int v23 = *(_DWORD *)(*((void *)this + 11) + 12);
        if (v21
          || (uint64_t result = WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,unsigned int,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash((uint64_t *)this + 10, 8u), (v21 = *v22) != 0))
        {
          int v24 = *(_DWORD *)(v21 - 8);
        }
        else
        {
          int v24 = 0;
        }
        uint64_t v25 = (WTF *)*v20;
        unint64_t v26 = ~(*v20 << 32) + *v20;
        unint64_t v27 = 9
            * (((v26 ^ (v26 >> 22)) + ~((v26 ^ (v26 >> 22)) << 13)) ^ (((v26 ^ (v26 >> 22))
                                                                      + ~((v26 ^ (v26 >> 22)) << 13)) >> 8));
        unint64_t v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
        unsigned int v29 = v24 & ((v28 >> 31) ^ v28);
        unint64_t v30 = (WTF **)(v21 + 16 * v29);
        uint64_t v31 = *v30;
        if (*v30)
        {
          uint64_t v32 = 0;
          int v33 = 1;
          while (v31 != v25)
          {
            if (v31 == (WTF *)-1) {
              uint64_t v32 = v30;
            }
            unsigned int v29 = (v29 + v33) & v24;
            unint64_t v30 = (WTF **)(v21 + 16 * v29);
            uint64_t v31 = *v30;
            ++v33;
            if (!*v30)
            {
              if (v32)
              {
                *uint64_t v32 = 0;
                v32[1] = 0;
                --*(_DWORD *)(*v22 - 16);
                uint64_t v25 = (WTF *)*v20;
                unint64_t v30 = v32;
              }
              goto LABEL_29;
            }
          }
          uint64_t v38 = *((void *)this + 11);
          unsigned int v39 = *((_DWORD *)v30 + 2);
          if (*(_DWORD *)(v38 + 12) <= v39)
          {
            __break(0xC471u);
            return result;
          }
          uint64_t v40 = *(void *)v38 + 24 * v39;
          int8x16_t v41 = (unsigned int *)(v40 + 8);
          v54[0] = *((WTF **)this + 12);
          v54[1] = a2;
          uint64_t v42 = *(unsigned int *)(v40 + 20);
          if (v42 == *(_DWORD *)(v40 + 16))
          {
            uint64_t result = WTF::Vector<std::tuple<WGSL::AST::Function *,WGSL::AST::CallExpression *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)v54);
            uint64_t v42 = v41[3];
            uint64_t v43 = *(void *)v41;
            long long v44 = *(_OWORD *)result;
          }
          else
          {
            uint64_t v43 = *(void *)v41;
            long long v44 = *(_OWORD *)v54;
          }
          *(_OWORD *)(v43 + 16 * v42) = v44;
          goto LABEL_49;
        }
LABEL_29:
        *unint64_t v30 = v25;
        *((_DWORD *)v30 + 2) = v23;
        if (*v22)
        {
          ++*(_DWORD *)(*v22 - 12);
          uint64_t v34 = *v22;
          if (*v22) {
            goto LABEL_31;
          }
        }
        else
        {
          MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
          uint64_t v34 = *v22;
          if (*v22)
          {
LABEL_31:
            uint64_t v35 = (*(_DWORD *)(v34 - 16) + *(_DWORD *)(v34 - 12));
            unint64_t v36 = *(unsigned int *)(v34 - 4);
            if (v36 <= 0x400) {
              goto LABEL_32;
            }
            goto LABEL_40;
          }
        }
        uint64_t v35 = *(unsigned int *)(v34 - 16);
        unint64_t v36 = *(unsigned int *)(v34 - 4);
        if (v36 <= 0x400)
        {
LABEL_32:
          if (3 * v36 <= 4 * v35)
          {
            if (!v36)
            {
              unsigned int v37 = 8;
LABEL_42:
              WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,unsigned int,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash((uint64_t *)this + 10, v37);
              goto LABEL_43;
            }
LABEL_41:
            unsigned int v37 = v36 << (6 * *(_DWORD *)(v34 - 12) >= (2 * v36));
            goto LABEL_42;
          }
LABEL_43:
          uint64_t v45 = (WTF *)*v20;
          v54[0] = *(WTF **)v20;
          int8x16_t v41 = (unsigned int *)*((void *)this + 11);
          uint64_t v46 = *((void *)this + 12);
          uint64_t result = WTF::fastMalloc((WTF *)0x10);
          int v55 = 1;
          v54[1] = (WTF *)result;
          *(void *)uint64_t result = v46;
          *(void *)(result + 8) = a2;
          int v56 = 1;
          uint64_t v47 = v41[3];
          if (v47 == v41[2])
          {
            unint64_t v48 = WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v41, v47 + 1, (unint64_t)v54);
            uint64_t v50 = *(void *)v41 + 24 * v41[3];
            uint64_t v51 = *(void *)v48;
            *(void *)(v50 + 8) = 0;
            *(void *)(v50 + 16) = 0;
            *(void *)uint64_t v50 = v51;
            uint64_t v52 = *(void *)(v48 + 8);
            *(void *)(v48 + 8) = 0;
            *(void *)(v50 + 8) = v52;
            LODWORD(v52) = *(_DWORD *)(v48 + 16);
            *(_DWORD *)(v48 + 16) = 0;
            *(_DWORD *)(v50 + 16) = v52;
            LODWORD(v52) = *(_DWORD *)(v48 + 20);
            *(_DWORD *)(v48 + 20) = 0;
            *(_DWORD *)(v50 + 20) = v52;
            uint64_t result = (uint64_t)v54[1];
            ++v41[3];
            if (result)
            {
              v54[1] = 0;
              int v55 = 0;
              return WTF::fastFree((WTF *)result, v49);
            }
            return result;
          }
          unint64_t v53 = (WTF **)(*(void *)v41 + 24 * v47);
          *unint64_t v53 = v45;
          v53[1] = (WTF *)result;
          v53[2] = (WTF *)0x100000001;
LABEL_49:
          ++v41[3];
          return result;
        }
LABEL_40:
        if (v36 <= 2 * v35) {
          goto LABEL_41;
        }
        goto LABEL_43;
      }
    }
  }
  return result;
}

void WGSL::buildCallGraph(WGSL *this, WGSL::ShaderModule *a2)
{
  LOBYTE(v10) = 0;
  char v11 = 0;
  unint64_t v9 = &unk_1ECABC270;
  unsigned int v12 = this;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)uint64_t v17 = 0u;
  uint64_t v18 = 0;
  WGSL::CallGraphBuilder::initializeMappings((uint64_t)&v9);
  uint64_t v3 = v12;
  uint64_t v4 = (unsigned int *)((char *)v12 + 360);
  if (*((unsigned char *)v12 + 392))
  {
    WGSL::CallGraph::operator=(v4, (uint64_t *)&v13);
    unint64_t v9 = &unk_1ECABC270;
    uint64_t v5 = v17[1];
    if (!v17[1]) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  *((void *)v12 + 45) = v13;
  uint64_t v7 = *((void *)&v13 + 1);
  long long v13 = 0uLL;
  *((void *)v3 + 46) = v7;
  long long v8 = v14;
  long long v14 = 0uLL;
  *((_OWORD *)v4 + 1) = v8;
  *((unsigned char *)v3 + 392) = 1;
  unint64_t v9 = &unk_1ECABC270;
  uint64_t v5 = v17[1];
  if (v17[1])
  {
LABEL_3:
    v17[1] = 0;
    LODWORD(v18) = 0;
    WTF::fastFree(v5, v2);
  }
LABEL_4:
  if ((void)v15) {
    WTF::fastFree((WTF *)(v15 - 16), v2);
  }
  WGSL::CallGraph::~CallGraph((WGSL::CallGraph *)&v13, v2);
  unint64_t v9 = &unk_1ECABB740;
  if (v11)
  {
    uint64_t v6 = v10;
    unsigned int v10 = 0;
    if (v6)
    {
      if (*v6 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v6 -= 2;
      }
    }
  }
}

void WGSL::CallGraphBuilder::~CallGraphBuilder(WGSL::CallGraphBuilder *this, void *a2)
{
  *(void *)this = &unk_1ECABC270;
  uint64_t v3 = (WTF *)*((void *)this + 15);
  if (v3)
  {
    *((void *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = *((void *)this + 10);
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  WGSL::CallGraph::~CallGraph((WGSL::CallGraphBuilder *)((char *)this + 48), a2);
  *(void *)this = &unk_1ECABB740;
  if (*((unsigned char *)this + 32))
  {
    uint64_t v5 = (_DWORD *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v5)
    {
      if (*v5 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v5 -= 2;
      }
    }
  }
}

{
  WTF *v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t vars8;

  *(void *)this = &unk_1ECABC270;
  uint64_t v3 = (WTF *)*((void *)this + 15);
  if (v3)
  {
    *((void *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = *((void *)this + 10);
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  WGSL::CallGraph::~CallGraph((WGSL::CallGraphBuilder *)((char *)this + 48), a2);
  *(void *)this = &unk_1ECABB740;
  if (*((unsigned char *)this + 32))
  {
    uint64_t v5 = (_DWORD *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v5)
    {
      if (*v5 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v5 -= 2;
      }
    }
  }
  JUMPOUT(0x18530AFF0);
}

unsigned int *WGSL::CallGraph::operator=(unsigned int *a1, uint64_t *a2)
{
  uint64_t v4 = a1[3];
  if (v4)
  {
    uint64_t v5 = 24 * v4;
    uint64_t v6 = (_DWORD **)(*(void *)a1 + 16);
    do
    {
      uint64_t v7 = *v6;
      *uint64_t v6 = 0;
      if (v7)
      {
        if (*v7 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v7 -= 2;
        }
      }
      v6 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  long long v8 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v8, a2);
  }
  uint64_t v9 = *a2;
  *a2 = 0;
  *(void *)a1 = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  a1[2] = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  a1[3] = v9;
  uint64_t v10 = a2[2];
  a2[2] = 0;
  char v11 = (_DWORD **)*((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  if (v11)
  {
    uint64_t v12 = *((unsigned int *)v11 - 1);
    if (v12)
    {
      long long v13 = v11;
      do
      {
        long long v14 = *v13;
        if (*v13 != (_DWORD *)-1)
        {
          *long long v13 = 0;
          if (v14)
          {
            if (*v14 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v14 -= 2;
            }
          }
        }
        v13 += 2;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree((WTF *)(v11 - 2), a2);
  }
  uint64_t v15 = a2[3];
  a2[3] = 0;
  uint64_t v16 = *((void *)a1 + 3);
  *((void *)a1 + 3) = v15;
  if (v16)
  {
    uint64_t v17 = *(unsigned int *)(v16 - 4);
    if (v17)
    {
      for (uint64_t i = 0; i != v17; ++i)
      {
        if (*(void *)(v16 + 24 * i) != -1)
        {
          uint64_t v19 = v16 + 24 * i;
          uint64_t v22 = *(WTF **)(v19 + 8);
          uint64_t v21 = v19 + 8;
          uint64_t v20 = v22;
          uint64_t v23 = *(unsigned int *)(v21 + 12);
          if (v23)
          {
            uint64_t v24 = 24 * v23;
            uint64_t v25 = (char *)v20 + 8;
            do
            {
              unint64_t v26 = *(WTF **)v25;
              if (*(void *)v25)
              {
                *(void *)uint64_t v25 = 0;
                *((_DWORD *)v25 + 2) = 0;
                WTF::fastFree(v26, a2);
              }
              v25 += 24;
              v24 -= 24;
            }
            while (v24);
            uint64_t v20 = *(WTF **)v21;
          }
          if (v20)
          {
            *(void *)uint64_t v21 = 0;
            *(_DWORD *)(v16 + 24 * i + 16) = 0;
            WTF::fastFree(v20, a2);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v16 - 16), a2);
  }
  return a1;
}

void WGSL::CallGraph::~CallGraph(WGSL::CallGraph *this, void *a2)
{
  uint64_t v3 = *((void *)this + 3);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)(v3 + 24 * i) != -1)
        {
          uint64_t v6 = v3 + 24 * i;
          uint64_t v9 = *(WTF **)(v6 + 8);
          uint64_t v8 = v6 + 8;
          uint64_t v7 = v9;
          uint64_t v10 = *(unsigned int *)(v8 + 12);
          if (v10)
          {
            uint64_t v11 = 24 * v10;
            uint64_t v12 = (char *)v7 + 8;
            do
            {
              long long v13 = *(WTF **)v12;
              if (*(void *)v12)
              {
                *(void *)uint64_t v12 = 0;
                *((_DWORD *)v12 + 2) = 0;
                WTF::fastFree(v13, a2);
              }
              v12 += 24;
              v11 -= 24;
            }
            while (v11);
            uint64_t v7 = *(WTF **)v8;
          }
          if (v7)
          {
            *(void *)uint64_t v8 = 0;
            *(_DWORD *)(v3 + 24 * i + 16) = 0;
            WTF::fastFree(v7, a2);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v14 = *((void *)this + 2);
  if (v14)
  {
    uint64_t v15 = *(unsigned int *)(v14 - 4);
    if (v15)
    {
      uint64_t v16 = (_DWORD **)*((void *)this + 2);
      do
      {
        uint64_t v17 = *v16;
        if (*v16 != (_DWORD *)-1)
        {
          void *v16 = 0;
          if (v17)
          {
            if (*v17 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v17 -= 2;
            }
          }
        }
        v16 += 2;
        --v15;
      }
      while (v15);
    }
    WTF::fastFree((WTF *)(v14 - 16), a2);
  }
  uint64_t v18 = *((unsigned int *)this + 3);
  if (v18)
  {
    uint64_t v19 = 24 * v18;
    uint64_t v20 = (_DWORD **)(*(void *)this + 16);
    do
    {
      uint64_t v21 = *v20;
      *uint64_t v20 = 0;
      if (v21)
      {
        if (*v21 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v21 -= 2;
        }
      }
      v20 += 3;
      v19 -= 24;
    }
    while (v19);
  }
  uint64_t v22 = *(WTF **)this;
  if (*(void *)this)
  {
    *(void *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v22, a2);
  }
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::AST::Function *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::AST::Function *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::AST::Function *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = (WTF::StringImpl **)(v4 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (v11)
        {
          uint64_t v12 = *a1;
          if (*a1)
          {
            int v13 = *(_DWORD *)(v12 - 8);
            unsigned int v14 = *((_DWORD *)v11 + 4);
            if (v14 >= 0x100) {
              goto LABEL_12;
            }
LABEL_14:
            unsigned int v15 = WTF::StringImpl::hashSlowCase(v11);
          }
          else
          {
            int v13 = 0;
            unsigned int v14 = *((_DWORD *)v11 + 4);
            if (v14 < 0x100) {
              goto LABEL_14;
            }
LABEL_12:
            unsigned int v15 = v14 >> 8;
          }
          int v16 = 0;
          do
          {
            uint64_t v17 = v15 & v13;
            unsigned int v15 = ++v16 + v17;
          }
          while (*(void *)(v12 + 16 * v17));
          uint64_t v18 = (void *)(v12 + 16 * v17);
          void *v18 = 0;
          long long v19 = *(_OWORD *)v10;
          *uint64_t v10 = 0;
          *(_OWORD *)uint64_t v18 = v19;
          uint64_t v20 = *v10;
          *uint64_t v10 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *(_DWORD *)v20 -= 2;
            }
          }
          goto LABEL_7;
        }
        *uint64_t v10 = 0;
      }
LABEL_7:
      if (++v9 == v5) {
        goto LABEL_23;
      }
    }
  }
  if (v4)
  {
LABEL_23:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

unint64_t WTF::Vector<WGSL::CallGraph::EntryPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WGSL::CallGraph::EntryPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WGSL::CallGraph::EntryPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
}

uint64_t WTF::Vector<WGSL::CallGraph::EntryPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v2 = result;
      uint64_t v3 = *(WTF **)result;
      unsigned int v4 = *(_DWORD *)(result + 12);
      int v5 = 24 * a2;
      uint64_t result = WTF::fastMalloc((WTF *)(24 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
      *(void *)uint64_t v2 = result;
      if (v4)
      {
        uint64_t v7 = result;
        unint64_t v8 = (WTF *)((char *)v3 + 24 * v4);
        uint64_t v9 = v3;
        do
        {
          uint64_t v10 = *(void *)v9;
          *(unsigned char *)(v7 + 8) = *((unsigned char *)v9 + 8);
          *(void *)uint64_t v7 = v10;
          uint64_t v11 = *((void *)v9 + 2);
          *((void *)v9 + 2) = 0;
          *(void *)(v7 + 16) = v11;
          uint64_t result = *((void *)v9 + 2);
          *((void *)v9 + 2) = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              uint64_t result = WTF::StringImpl::destroy();
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
          uint64_t v9 = (WTF *)((char *)v9 + 24);
          v7 += 24;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(void *)uint64_t v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = v5;
    uint64_t v51 = v4;
    uint64_t v52 = v5;
    while (1)
    {
      uint64_t v12 = (uint64_t *)(v4 + 24 * v9);
      uint64_t v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          uint64_t v22 = *a1;
          if (*a1) {
            int v23 = *(_DWORD *)(v22 - 8);
          }
          else {
            int v23 = 0;
          }
          int v55 = v10;
          unint64_t v24 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          unint64_t v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
          unint64_t v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
          unsigned int v27 = v23 & ((v26 >> 31) ^ v26);
          int v28 = 1;
          do
          {
            unsigned int v29 = v27;
            unint64_t v30 = (uint64_t *)(v22 + 24 * v27);
            unsigned int v27 = (v27 + v28++) & v23;
          }
          while (*v30);
          unsigned int v31 = v29;
          uint64_t v32 = v22 + 24 * v29;
          uint64_t v35 = *(WTF **)(v32 + 8);
          uint64_t v34 = v32 + 8;
          int v33 = v35;
          uint64_t v36 = *(unsigned int *)(v34 + 12);
          if (v36)
          {
            uint64_t v37 = 24 * v36;
            uint64_t v38 = (char *)v33 + 8;
            do
            {
              unsigned int v39 = *(WTF **)v38;
              if (*(void *)v38)
              {
                *(void *)uint64_t v38 = 0;
                *((_DWORD *)v38 + 2) = 0;
                WTF::fastFree(v39, v8);
              }
              v38 += 24;
              v37 -= 24;
            }
            while (v37);
            int v33 = *(WTF **)v34;
            uint64_t v4 = v51;
          }
          if (v33)
          {
            *(void *)uint64_t v34 = 0;
            *(_DWORD *)(v22 + 24 * v31 + 16) = 0;
            WTF::fastFree(v33, v8);
          }
          *unint64_t v30 = *v12;
          uint64_t v40 = v4 + 24 * v9;
          *(void *)uint64_t v34 = 0;
          *(void *)(v34 + 8) = 0;
          uint64_t v42 = *(void *)(v40 + 8);
          uint64_t v41 = v40 + 8;
          *(void *)uint64_t v41 = 0;
          *(void *)uint64_t v34 = v42;
          int v43 = *(_DWORD *)(v41 + 8);
          *(_DWORD *)(v41 + 8) = 0;
          *(_DWORD *)(v22 + 24 * v31 + 16) = v43;
          int v44 = *(_DWORD *)(v41 + 12);
          *(_DWORD *)(v41 + 12) = 0;
          *(_DWORD *)(v34 + 12) = v44;
          uint64_t v45 = *(unsigned int *)(v41 + 12);
          uint64_t v46 = *(WTF **)v41;
          if (v45)
          {
            uint64_t v47 = 24 * v45;
            unint64_t v48 = (char *)v46 + 8;
            uint64_t v10 = v55;
            do
            {
              unint64_t v49 = *(WTF **)v48;
              if (*(void *)v48)
              {
                *(void *)unint64_t v48 = 0;
                *((_DWORD *)v48 + 2) = 0;
                WTF::fastFree(v49, v8);
              }
              v48 += 24;
              v47 -= 24;
            }
            while (v47);
            uint64_t v46 = *(WTF **)v41;
            if (!*(void *)v41) {
              goto LABEL_6;
            }
LABEL_40:
            *(void *)uint64_t v41 = 0;
            *(_DWORD *)(v41 + 8) = 0;
            WTF::fastFree(v46, v8);
          }
          else
          {
            uint64_t v10 = v55;
            if (v46) {
              goto LABEL_40;
            }
          }
LABEL_6:
          uint64_t v11 = v52;
          if (v12 == a3) {
            uint64_t v10 = v30;
          }
          goto LABEL_8;
        }
        uint64_t v14 = v4 + 24 * v9;
        uint64_t v17 = *(WTF **)(v14 + 8);
        uint64_t v16 = v14 + 8;
        unsigned int v15 = v17;
        uint64_t v18 = *(unsigned int *)(v16 + 12);
        if (v18)
        {
          uint64_t v19 = 24 * v18;
          uint64_t v20 = (char *)v15 + 8;
          do
          {
            uint64_t v21 = *(WTF **)v20;
            if (*(void *)v20)
            {
              *(void *)uint64_t v20 = 0;
              *((_DWORD *)v20 + 2) = 0;
              WTF::fastFree(v21, v8);
            }
            v20 += 24;
            v19 -= 24;
          }
          while (v19);
          unsigned int v15 = *(WTF **)v16;
        }
        if (v15)
        {
          *(void *)uint64_t v16 = 0;
          *(_DWORD *)(v4 + 24 * v9 + 16) = 0;
          WTF::fastFree(v15, v8);
        }
      }
LABEL_8:
      if (++v9 == v11) {
        goto LABEL_42;
      }
    }
  }
  uint64_t v10 = 0;
  uint64_t result = 0;
  if (v4)
  {
LABEL_42:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v10;
  }
  return result;
}

uint64_t WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,unsigned int,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v10 = (void *)(v4 + 16 * i);
      if ((unint64_t)(*v10 + 1) >= 2)
      {
        uint64_t v11 = *a1;
        if (*a1) {
          int v12 = *(_DWORD *)(v11 - 8);
        }
        else {
          int v12 = 0;
        }
        uint64_t v13 = (~(*v10 << 32) + *v10) ^ ((~(*v10 << 32) + *v10) >> 22);
        unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((unint64_t)(v13 + ~(v13 << 13)) >> 8));
        unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        unsigned int v16 = v12 & ((v15 >> 31) ^ v15);
        int v17 = 1;
        do
        {
          unsigned int v18 = v16;
          uint64_t v19 = *(void *)(v11 + 16 * v16);
          unsigned int v16 = (v16 + v17++) & v12;
        }
        while (v19);
        *(_OWORD *)(v11 + 16 * v18) = *(_OWORD *)v10;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

unint64_t WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v10 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
}

unsigned int *WTF::Vector<WGSL::CallGraph::Callee,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v2 = result;
      uint64_t v3 = *(WTF **)result;
      uint64_t v4 = result[3];
      int v5 = 24 * a2;
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(24 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x18;
      *(void *)uint64_t v2 = result;
      if (v4)
      {
        unint64_t v7 = result;
        uint64_t v8 = 24 * v4;
        uint64_t v9 = (_DWORD *)((char *)v3 + 16);
        do
        {
          uint64_t v10 = *((void *)v9 - 2);
          *((void *)v7 + 1) = 0;
          *((void *)v7 + 2) = 0;
          *(void *)unint64_t v7 = v10;
          uint64_t v11 = *((void *)v9 - 1);
          *((void *)v9 - 1) = 0;
          *((void *)v7 + 1) = v11;
          LODWORD(v11) = *v9;
          *uint64_t v9 = 0;
          v7[4] = v11;
          LODWORD(v11) = v9[1];
          v9[1] = 0;
          v7[5] = v11;
          uint64_t result = (unsigned int *)*((void *)v9 - 1);
          if (result)
          {
            *((void *)v9 - 1) = 0;
            *uint64_t v9 = 0;
            uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
          }
          v9 += 6;
          v7 += 6;
          v8 -= 24;
        }
        while (v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(void *)uint64_t v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<std::tuple<WGSL::AST::Function *,WGSL::AST::CallExpression *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  int v5 = *(WTF **)a1;
  if (*(void *)a1 > a3 || (uint64_t v6 = *(unsigned int *)(a1 + 12), (unint64_t)v5 + 16 * v6 <= a3))
  {
    unint64_t v15 = *(unsigned int *)(a1 + 8);
    unint64_t v16 = v15 + (v15 >> 2);
    if (v16 >= 0x10) {
      unint64_t v17 = v16 + 1;
    }
    else {
      unint64_t v17 = 16;
    }
    if (v17 <= a2) {
      unint64_t v18 = a2;
    }
    else {
      unint64_t v18 = v17;
    }
    if (v18 > v15)
    {
      if (v18 >> 28) {
        goto LABEL_35;
      }
      uint64_t v19 = *(unsigned int *)(a1 + 12);
      uint64_t v20 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v18));
      *(_DWORD *)(a1 + 8) = v18;
      *(void *)a1 = v20;
      if (v19)
      {
        uint64_t v22 = 16 * v19;
        int v23 = v5;
        do
        {
          long long v24 = *(_OWORD *)v23;
          int v23 = (WTF *)((char *)v23 + 16);
          *v20++ = v24;
          v22 -= 16;
        }
        while (v22);
      }
      if (v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v21);
      }
    }
    return a3;
  }
  unint64_t v7 = *(unsigned int *)(a1 + 8);
  unint64_t v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10) {
    unint64_t v9 = v8 + 1;
  }
  else {
    unint64_t v9 = 16;
  }
  if (v9 <= a2) {
    unint64_t v10 = a2;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 > v7)
  {
    if (!(v10 >> 28))
    {
      uint64_t v11 = WTF::fastMalloc((WTF *)(16 * v10));
      uint64_t v13 = 0;
      *(_DWORD *)(a1 + 8) = v10;
      *(void *)a1 = v11;
      do
      {
        *(_OWORD *)(v11 + v13) = *(_OWORD *)((char *)v5 + v13);
        v13 += 16;
      }
      while (16 * v6 != v13);
      unint64_t v14 = *(WTF **)a1;
      if (v5)
      {
        if (v14 == v5)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        unint64_t v14 = *(WTF **)a1;
      }
      return (unint64_t)v14 + 16 * ((uint64_t)(a3 - (void)v5) >> 4);
    }
LABEL_35:
    __break(0xC471u);
    JUMPOUT(0x18254CA48);
  }
  unint64_t v14 = *(WTF **)a1;
  return (unint64_t)v14 + 16 * ((uint64_t)(a3 - (void)v5) >> 4);
}

WTF *WGSL::ShaderModule::revertReplacements(WTF *this, void *a2)
{
  uint64_t v2 = this;
  LODWORD(v3) = *((_DWORD *)this + 103);
  if ((int)v3 - 1 < 0)
  {
LABEL_5:
    if (*((_DWORD *)v2 + 102))
    {
      uint64_t v5 = *((unsigned int *)v2 + 103);
      uint64_t v6 = (WTF *)*((void *)v2 + 50);
      if (v5)
      {
        uint64_t v7 = 32 * v5;
        uint64_t v8 = *((void *)v2 + 50);
        do
        {
          this = (WTF *)*((void *)v6 + 3);
          if (v6 == this)
          {
            this = (WTF *)(*(uint64_t (**)(WTF *))(*(void *)v6 + 32))(v6);
          }
          else if (this)
          {
            this = (WTF *)(*(uint64_t (**)(WTF *))(*(void *)this + 40))(this);
          }
          uint64_t v6 = (WTF *)((char *)v6 + 32);
          v8 += 32;
          v7 -= 32;
        }
        while (v7);
        *((_DWORD *)v2 + 103) = 0;
        uint64_t v6 = (WTF *)*((void *)v2 + 50);
      }
      if (v6)
      {
        *((void *)v2 + 50) = 0;
        *((_DWORD *)v2 + 102) = 0;
        return (WTF *)WTF::fastFree(v6, a2);
      }
    }
  }
  else
  {
    while (1)
    {
      uint64_t v3 = (v3 - 1);
      if (*((_DWORD *)v2 + 103) <= v3) {
        break;
      }
      uint64_t v4 = *(void *)(*((void *)v2 + 50) + 32 * v3 + 24);
      if (!v4)
      {
        this = (WTF *)std::__throw_bad_function_call[abi:sn180100]();
        break;
      }
      this = (WTF *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
      if ((int)v3 <= 0) {
        goto LABEL_5;
      }
    }
    __break(0xC471u);
  }
  return this;
}

uint64_t std::__throw_bad_function_call[abi:sn180100]()
{
  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  return WGSL::ConstantArray::operator[](v0, v1, v2);
}

uint64_t WGSL::ConstantArray::operator[]@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  if (**(_DWORD **)result <= a2)
  {
    uint64_t result = 146;
    __break(0xC471u);
  }
  else
  {
    uint64_t v4 = *(void *)result + 24 * a2;
    *(unsigned char *)a3 = 0;
    *(_DWORD *)(a3 + 16) = -1;
    uint64_t v5 = *(unsigned int *)(v4 + 24);
    if (v5 != -1)
    {
      uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS6_14ConstantVectorENS6_14ConstantMatrixENS6_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSK_OT0_E_JSJ_SI_EEEDcmSL_DpOT0____fdiagonal[v5])(&v6, a3, v4 + 8);
      *(_DWORD *)(a3 + 16) = v5;
    }
  }
  return result;
}

void WGSL::ConstantMatrix::operator[](uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v4 = *(unsigned int *)(a1 + 4);
  if (v4)
  {
    uint64_t v7 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v4 + 8));
    unsigned int *v7 = v4;
    bzero(v7 + 2, 24 * ((24 * v4 - 24) / 0x18uLL) + 24);
    LODWORD(v8) = *(_DWORD *)(a1 + 4);
    *a3 = v7;
    if (v8)
    {
      unint64_t v9 = 0;
      unint64_t v10 = v7 + 6;
      do
      {
        while (1)
        {
          unsigned int v11 = v9 + v8 * a2;
          int v12 = *(unsigned int **)(a1 + 8);
          if (*v12 <= v11 || v9 >= *v7)
          {
            __break(0xC471u);
            JUMPOUT(0x18254CDD8);
          }
          uint64_t v13 = (uint64_t)&v12[6 * v11 + 2];
          uint64_t v14 = *v10;
          uint64_t v15 = *(unsigned int *)(v13 + 16);
          if (v14 != -1) {
            break;
          }
          if (v15 != -1) {
            goto LABEL_5;
          }
LABEL_6:
          ++v9;
          unint64_t v8 = *(unsigned int *)(a1 + 4);
          v10 += 6;
          if (v9 >= v8) {
            return;
          }
        }
        if (v15 != -1)
        {
LABEL_5:
          unint64_t v16 = v10 - 4;
          ((void (*)(_DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS6_14ConstantVectorENS6_14ConstantMatrixENS6_14ConstantStructEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRSC_SI_EEEDcmSK_DpOT0____fdiagonal[v15])(&v16);
          goto LABEL_6;
        }
        ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS6_14ConstantVectorENS6_14ConstantMatrixENS6_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v14])(&v17, v10 - 4);
        *unint64_t v10 = -1;
        v10 += 6;
        ++v9;
        unint64_t v8 = *(unsigned int *)(a1 + 4);
      }
      while (v9 < v8);
    }
  }
  else
  {
    *a3 = 0;
  }
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  uint64_t v4 = *(_DWORD **)a1;
  uint64_t v5 = *(unsigned int *)(*(void *)a1 + 16);
  if (v5 != -1)
  {
    if (!v5)
    {
      float result = *a3;
      *a2 = *(_DWORD *)a3;
      return result;
    }
    ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS6_14ConstantVectorENS6_14ConstantMatrixENS6_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v5])(&v7, v4);
  }
  float result = *a3;
  _DWORD *v4 = *(_DWORD *)a3;
  v4[4] = 0;
  return result;
}

__int16 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_@<H0>(uint64_t *a1@<X0>, __int16 *a2@<X1>, __int16 *a3@<X2>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 16);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      __int16 result = *a3;
      *a2 = *a3;
      return result;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS6_14ConstantVectorENS6_14ConstantMatrixENS6_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v5])(&v7, v4);
  }
  __int16 result = *a3;
  *(_WORD *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 16) = 1;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_(uint64_t *a1, void *a2, double *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 16);
  if (v5 != -1)
  {
    if (v5 == 2)
    {
      double result = *a3;
      *a2 = *(void *)a3;
      return result;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS6_14ConstantVectorENS6_14ConstantMatrixENS6_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v5])(&v7, v4);
  }
  double result = *a3;
  *(double *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 16) = 2;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4 = *(_DWORD **)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 != -1)
  {
    if (v5 == 3)
    {
      *a2 = *a3;
      return result;
    }
    double result = ((uint64_t (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS6_14ConstantVectorENS6_14ConstantMatrixENS6_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v5])(&v6, v4);
  }
  v4[4] = -1;
  _DWORD *v4 = *a3;
  v4[4] = 3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4 = *(_DWORD **)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 != -1)
  {
    if (v5 == 4)
    {
      *a2 = *a3;
      return result;
    }
    double result = ((uint64_t (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS6_14ConstantVectorENS6_14ConstantMatrixENS6_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v5])(&v6, v4);
  }
  v4[4] = -1;
  _DWORD *v4 = *a3;
  v4[4] = 4;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 != -1)
  {
    if (v5 == 5)
    {
      *a2 = *a3;
      return result;
    }
    double result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS6_14ConstantVectorENS6_14ConstantMatrixENS6_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 16) = 5;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_(uint64_t result, unsigned char *a2, unsigned char *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 != -1)
  {
    if (v5 == 6)
    {
      *a2 = *a3;
      return result;
    }
    double result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS6_14ConstantVectorENS6_14ConstantMatrixENS6_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v5])(&v6, v4);
  }
  *(unsigned char *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 16) = 6;
  return result;
}

WTF **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_(WTF **result, WTF **a2, unsigned int **a3)
{
  uint64_t v3 = *result;
  int v4 = *((_DWORD *)*result + 4);
  if (v4 != 7)
  {
    uint64_t v5 = *a3;
    if (*a3)
    {
      uint64_t v6 = *v5;
      double result = (WTF **)WTF::fastMalloc((WTF *)(24 * v6 + 8));
      char v7 = result;
      *(_DWORD *)double result = v6;
      if (v6)
      {
        unint64_t v8 = result + 3;
        uint64_t v9 = 24 * v6;
        unint64_t v10 = v5 + 6;
        do
        {
          *((unsigned char *)v8 - 16) = 0;
          *unint64_t v8 = -1;
          uint64_t v11 = *v10;
          if (v11 != -1)
          {
            double result = (WTF **)((uint64_t (*)(char *, _DWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS6_14ConstantVectorENS6_14ConstantMatrixENS6_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSK_OT0_E_JSJ_SI_EEEDcmSL_DpOT0____fdiagonal[v11])(&v12, v8 - 4, v10 - 4);
            *unint64_t v8 = v11;
          }
          v8 += 6;
          v10 += 6;
          v9 -= 24;
        }
        while (v9);
      }
      int v4 = *((_DWORD *)v3 + 4);
      if (v4 == -1) {
        goto LABEL_13;
      }
    }
    else
    {
      char v7 = 0;
      if (v4 == -1) {
        goto LABEL_13;
      }
    }
    double result = (WTF **)((uint64_t (*)(char *, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS6_14ConstantVectorENS6_14ConstantMatrixENS6_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v4])(&v13, v3);
LABEL_13:
    *(void *)uint64_t v3 = v7;
    *((_DWORD *)v3 + 4) = 7;
    return result;
  }
  return WTF::FixedVector<WGSL::ConstantValue>::operator=(a2, a3);
}

WTF **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_(WTF **result, WTF **a2, unsigned int **a3)
{
  uint64_t v3 = *result;
  int v4 = *((_DWORD *)*result + 4);
  if (v4 != 8)
  {
    uint64_t v5 = *a3;
    if (*a3)
    {
      uint64_t v6 = *v5;
      double result = (WTF **)WTF::fastMalloc((WTF *)(24 * v6 + 8));
      char v7 = result;
      *(_DWORD *)double result = v6;
      if (v6)
      {
        unint64_t v8 = result + 3;
        uint64_t v9 = 24 * v6;
        unint64_t v10 = v5 + 6;
        do
        {
          *((unsigned char *)v8 - 16) = 0;
          *unint64_t v8 = -1;
          uint64_t v11 = *v10;
          if (v11 != -1)
          {
            double result = (WTF **)((uint64_t (*)(char *, _DWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS6_14ConstantVectorENS6_14ConstantMatrixENS6_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSK_OT0_E_JSJ_SI_EEEDcmSL_DpOT0____fdiagonal[v11])(&v12, v8 - 4, v10 - 4);
            *unint64_t v8 = v11;
          }
          v8 += 6;
          v10 += 6;
          v9 -= 24;
        }
        while (v9);
      }
      int v4 = *((_DWORD *)v3 + 4);
      if (v4 == -1) {
        goto LABEL_13;
      }
    }
    else
    {
      char v7 = 0;
      if (v4 == -1) {
        goto LABEL_13;
      }
    }
    double result = (WTF **)((uint64_t (*)(char *, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS6_14ConstantVectorENS6_14ConstantMatrixENS6_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v4])(&v13, v3);
LABEL_13:
    *(void *)uint64_t v3 = v7;
    *((_DWORD *)v3 + 4) = 8;
    return result;
  }
  return WTF::FixedVector<WGSL::ConstantValue>::operator=(a2, a3);
}

WTF **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_(WTF **result, uint64_t a2, unsigned int **a3)
{
  uint64_t v3 = *result;
  int v4 = *a3;
  if (*((_DWORD *)*result + 4) == 9)
  {
    *(void *)a2 = v4;
    return WTF::FixedVector<WGSL::ConstantValue>::operator=((WTF **)(a2 + 8), a3 + 1);
  }
  else
  {
    uint64_t v5 = a3[1];
    if (v5)
    {
      uint64_t v6 = *v5;
      double result = (WTF **)WTF::fastMalloc((WTF *)(24 * v6 + 8));
      char v7 = result;
      *(_DWORD *)double result = v6;
      if (v6)
      {
        unint64_t v8 = 0;
        uint64_t v9 = 24 * v6;
        do
        {
          LOBYTE(v7[v8 / 8 + 1]) = 0;
          LODWORD(v7[v8 / 8 + 3]) = -1;
          uint64_t v10 = v5[v8 / 4 + 6];
          if (v10 != -1)
          {
            double result = (WTF **)((uint64_t (*)(char *, WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS6_14ConstantVectorENS6_14ConstantMatrixENS6_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSK_OT0_E_JSJ_SI_EEEDcmSL_DpOT0____fdiagonal[v10])(&v12, &v7[v8 / 8 + 1], &v5[v8 / 4 + 2]);
            LODWORD(v7[v8 / 8 + 3]) = v10;
          }
          v8 += 24;
        }
        while (v9 != v8);
      }
    }
    else
    {
      char v7 = 0;
    }
    uint64_t v11 = *((unsigned int *)v3 + 4);
    if (v11 != -1) {
      double result = (WTF **)((uint64_t (*)(char *, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS6_14ConstantVectorENS6_14ConstantMatrixENS6_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v11])(&v13, v3);
    }
    *(void *)uint64_t v3 = v4;
    *((void *)v3 + 1) = v7;
    *((_DWORD *)v3 + 4) = 9;
  }
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKST_EEEDcSL_DpT0_(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 16);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 10)
  {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS6_14ConstantVectorENS6_14ConstantMatrixENS6_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v5])(&v7, v4);
LABEL_7:
    *(_DWORD *)(v4 + 16) = -1;
    double result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)v4, a3);
    *(_DWORD *)(v4 + 16) = 10;
    return result;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::operator=(a2, a3);
}

WTF **WTF::FixedVector<WGSL::ConstantValue>::operator=(WTF **a1, unsigned int **a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v4 = *v3;
    uint64_t v5 = (WTF *)WTF::fastMalloc((WTF *)(24 * v4 + 8));
    *(_DWORD *)uint64_t v5 = v4;
    if (v4)
    {
      unint64_t v6 = 0;
      uint64_t v7 = 24 * v4;
      do
      {
        *((unsigned char *)v5 + v6 + 8) = 0;
        a2 = (unsigned int **)((char *)v5 + v6 + 8);
        *(_DWORD *)((char *)v5 + v6 + 24) = -1;
        uint64_t v8 = v3[v6 / 4 + 6];
        if (v8 != -1)
        {
          ((void (*)(char *, unsigned int **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS6_14ConstantVectorENS6_14ConstantMatrixENS6_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSK_OT0_E_JSJ_SI_EEEDcmSL_DpOT0____fdiagonal[v8])(&v15, a2, &v3[v6 / 4 + 2]);
          *(_DWORD *)((char *)v5 + v6 + 24) = v8;
        }
        v6 += 24;
      }
      while (v7 != v6);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v9 = *a1;
  *a1 = v5;
  if (v9)
  {
    uint64_t v10 = *(unsigned int *)v9;
    if (v10)
    {
      uint64_t v11 = 24 * v10;
      char v12 = (_DWORD *)((char *)v9 + 24);
      do
      {
        a2 = (unsigned int **)(v12 - 4);
        uint64_t v13 = *v12;
        if (v13 != -1) {
          ((void (*)(char *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS6_14ConstantVectorENS6_14ConstantMatrixENS6_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v13])(&v16, a2);
        }
        *char v12 = -1;
        v12 += 6;
        v11 -= 24;
      }
      while (v11);
    }
    WTF::fastFree(v9, a2);
  }
  return a1;
}

uint64_t *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::operator=(uint64_t *a1, void *a2)
{
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(&v10, a2);
  uint64_t v4 = *a1;
  *a1 = v10;
  uint64_t v10 = v4;
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 4);
    if (v5)
    {
      uint64_t v6 = v4;
      do
      {
        uint64_t v7 = *(_DWORD **)v6;
        if (*(void *)v6 != -1)
        {
          uint64_t v8 = *(unsigned int *)(v6 + 24);
          if (v8 != -1)
          {
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS6_14ConstantVectorENS6_14ConstantMatrixENS6_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v8])(&v11, v6 + 8);
            uint64_t v7 = *(_DWORD **)v6;
          }
          *(_DWORD *)(v6 + 24) = -1;
          *(void *)uint64_t v6 = 0;
          if (v7)
          {
            if (*v7 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v7 -= 2;
            }
          }
        }
        v6 += 32;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), v3);
  }
  return a1;
}

uint64_t WGSL::satisfies(WGSL *this, const WGSL::Type *a2)
{
  if (!a2) {
    return 1;
  }
  uint64_t v2 = this;
  if (!this) {
    return 0;
  }
  while (1)
  {
    int v3 = *((_DWORD *)v2 + 12);
    if (v3 != 10) {
      break;
    }
    uint64_t v2 = (WGSL *)*((void *)v2 + 1);
    if (!v2) {
      return 0;
    }
  }
  uint64_t result = 0;
  if (!v3)
  {
    switch(*(unsigned char *)v2)
    {
      case 0:
        uint64_t result = a2 > 1;
        break;
      case 1:
        uint64_t result = (a2 >> 2) & 1;
        break;
      case 2:
        uint64_t result = (a2 >> 3) & 1;
        break;
      case 3:
        uint64_t result = (a2 & 0x70) != 0;
        break;
      case 4:
        uint64_t result = (a2 >> 6) & 1;
        break;
      case 5:
        uint64_t result = (a2 >> 5) & 1;
        break;
      case 7:
        uint64_t result = a2 & 1;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t WGSL::satisfyOrPromote(uint64_t result, unsigned int a2, void *a3)
{
  uint64_t v3 = result;
  if (a2)
  {
    if (result)
    {
      while (1)
      {
        int v4 = *(_DWORD *)(v3 + 48);
        if (v4 != 10) {
          break;
        }
        uint64_t v3 = *(void *)(v3 + 8);
        if (!v3) {
          return 0;
        }
      }
      uint64_t result = 0;
      if (!v4)
      {
        switch(*(unsigned char *)v3)
        {
          case 0:
            if (a2 < 2) {
              return 0;
            }
            uint64_t result = v3;
            if ((a2 & 2) == 0)
            {
              if ((a2 & 4) != 0)
              {
                return a3[8];
              }
              else if ((a2 & 8) != 0)
              {
                return a3[9];
              }
              else if ((a2 & 0x10) != 0)
              {
                return a3[5];
              }
              else
              {
                if ((a2 & 0x20) != 0) {
                  return a3[10];
                }
                if ((a2 & 0x40) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x18254E72CLL);
                }
                return a3[11];
              }
            }
            return result;
          case 1:
            BOOL v5 = (a2 & 4) == 0;
            goto LABEL_24;
          case 2:
            BOOL v5 = (a2 & 8) == 0;
            goto LABEL_24;
          case 3:
            if (a2 < 0x10) {
              return 0;
            }
            uint64_t result = v3;
            if ((a2 & 0x10) == 0)
            {
              if ((a2 & 0x20) != 0)
              {
                return a3[10];
              }
              else
              {
                if ((a2 & 0x40) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x18254E70CLL);
                }
                return a3[11];
              }
            }
            return result;
          case 4:
            BOOL v5 = (a2 & 0x40) == 0;
            goto LABEL_24;
          case 5:
            BOOL v5 = (a2 & 0x20) == 0;
            goto LABEL_24;
          case 7:
            BOOL v5 = (a2 & 1) == 0;
LABEL_24:
            if (v5) {
              uint64_t result = 0;
            }
            else {
              uint64_t result = v3;
            }
            break;
          default:
            return result;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

WGSL *WGSL::concretize(WGSL *this, const WGSL::Type *a2, WGSL::TypeStore *a3)
{
  int v3 = *((_DWORD *)this + 12);
  if (v3 == -1) {
    uint64_t v4 = -1;
  }
  else {
    uint64_t v4 = *((unsigned int *)this + 12);
  }
  uint64_t v6 = this;
  switch(v4)
  {
    case 1:
      if (v3 != 1) {
        goto LABEL_61;
      }
      uint64_t v9 = WGSL::concretize(*(WGSL **)this, a2, a3);
      if (!v9) {
        return 0;
      }
      unint64_t v33 = ((unint64_t)*((unsigned __int8 *)v6 + 8) << 8) | 1;
      uint64_t v34 = v9;
      uint64_t v10 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)a2 + 2, (unsigned __int8 *)&v33);
      char v11 = (unsigned __int8 *)*((void *)a2 + 2);
      if (v11) {
        v11 += 24 * *((unsigned int *)v11 - 1);
      }
      if (v11 == v10 || (uint64_t v6 = (WGSL *)*((void *)v10 + 2)) == 0) {
        WGSL::TypeStore::allocateType<WGSL::Types::Vector,WGSL::Type const*&,unsigned char &>();
      }
      return v6;
    case 2:
      if (v3 != 2) {
        goto LABEL_61;
      }
      uint64_t v12 = WGSL::concretize(*(WGSL **)this, a2, a3);
      if (!v12) {
        return 0;
      }
      unint64_t v33 = ((unint64_t)*((unsigned __int8 *)v6 + 9) << 16) | ((unint64_t)*((unsigned __int8 *)v6 + 8) << 8) | 2;
      uint64_t v34 = v12;
      uint64_t v13 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)a2 + 2, (unsigned __int8 *)&v33);
      uint64_t v14 = (unsigned __int8 *)*((void *)a2 + 2);
      if (v14) {
        v14 += 24 * *((unsigned int *)v14 - 1);
      }
      if (v14 == v13 || (uint64_t v6 = (WGSL *)*((void *)v13 + 2)) == 0) {
        WGSL::TypeStore::allocateType<WGSL::Types::Matrix,WGSL::Type const*&,unsigned char &,unsigned char &>();
      }
      return v6;
    case 3:
      if (v3 != 3) {
        goto LABEL_61;
      }
      uint64_t v15 = WGSL::concretize(*(WGSL **)this, a2, a3);
      if (!v15) {
        return 0;
      }
      uint64_t v16 = *((void *)v6 + 1);
      uint64_t v17 = *((void *)v6 + 2);
      return (WGSL *)WGSL::TypeStore::arrayType((uint64_t)a2, v15, v16, v17);
    case 4:
      if (v3 != 4) {
        goto LABEL_61;
      }
      return v6;
    case 5:
      if (v3 != 5) {
        goto LABEL_61;
      }
      if (*((unsigned char *)this + 8) != 1)
      {
        if (*((unsigned char *)this + 8)) {
          return v6;
        }
        uint64_t v19 = *((void *)this + 2);
        if (!*(_DWORD *)v19)
        {
          __break(0xC471u);
          JUMPOUT(0x18254EB3CLL);
        }
        uint64_t v20 = WGSL::concretize(*(WGSL **)(v19 + 8), a2, a3);
        uint64_t v22 = *((void *)v6 + 2);
        if (*(_DWORD *)v22 <= 1u)
        {
          __break(0xC471u);
          JUMPOUT(0x18254EB5CLL);
        }
        int v23 = (const WGSL::Type *)v20;
        long long v24 = (const WGSL::Type *)WGSL::concretize(*(WGSL **)(v22 + 16), a2, v21);
        if (v23) {
          BOOL v25 = v24 == 0;
        }
        else {
          BOOL v25 = 1;
        }
        if (!v25)
        {
          return (WGSL *)WGSL::TypeStore::frexpResultType(a2, v23, v24);
        }
        return 0;
      }
      uint64_t v26 = *((void *)this + 2);
      if (!*(_DWORD *)v26)
      {
        __break(0xC471u);
        JUMPOUT(0x18254EB7CLL);
      }
      uint64_t v27 = WGSL::concretize(*(WGSL **)(v26 + 8), a2, a3);
      uint64_t v29 = *((void *)v6 + 2);
      if (*(_DWORD *)v29 <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x18254EB9CLL);
      }
      unint64_t v30 = (const WGSL::Type *)v27;
      unsigned int v31 = (const WGSL::Type *)WGSL::concretize(*(WGSL **)(v29 + 16), a2, v28);
      if (v30) {
        BOOL v32 = v31 == 0;
      }
      else {
        BOOL v32 = 1;
      }
      if (v32) {
        return 0;
      }
      return (WGSL *)WGSL::TypeStore::modfResultType(a2, v30, v31);
    case 6:
      if (v3 != 6) {
        goto LABEL_61;
      }
      return 0;
    case 7:
      if (v3 != 7) {
        goto LABEL_61;
      }
      return 0;
    case 8:
      if (v3 != 8) {
        goto LABEL_61;
      }
      return 0;
    case 9:
      if (v3 != 9) {
        goto LABEL_61;
      }
      return 0;
    case 10:
      if (v3 != 10) {
        goto LABEL_61;
      }
      return 0;
    case 11:
      if (v3 != 11) {
        goto LABEL_61;
      }
      return v6;
    case 12:
      if (v3 != 12) {
        goto LABEL_61;
      }
      return v6;
    case 13:
      if (v3 == 13) {
        return 0;
      }
      goto LABEL_61;
    case 14:
      if (v3 != 14) {
        goto LABEL_61;
      }
      return v6;
    default:
      if (v3)
      {
LABEL_61:
        std::__throw_bad_variant_access[abi:sn180100]();
      }
      else
      {
        uint64_t v7 = this;
        while (1)
        {
          int v8 = *((_DWORD *)v7 + 12);
          if (v8 != 10) {
            break;
          }
          uint64_t v6 = 0;
          uint64_t v7 = (WGSL *)*((void *)v7 + 1);
          if (!v7) {
            return v6;
          }
        }
      }
      uint64_t v6 = 0;
      if (!v8)
      {
        switch(*(unsigned char *)v7)
        {
          case 0:
            uint64_t v6 = (WGSL *)*((void *)a2 + 8);
            break;
          case 1:
          case 2:
          case 4:
          case 5:
          case 7:
            uint64_t v6 = v7;
            break;
          case 3:
            uint64_t v6 = (WGSL *)*((void *)a2 + 10);
            break;
          default:
            return v6;
        }
      }
      return v6;
  }
}

void *WGSL::EntryPointRewriter::rewrite(WGSL::EntryPointRewriter *this)
{
  unsigned int v1 = this;
  uint64_t v2 = *(void *)(*((void *)this + 2) + 48);
  if (v2)
  {
    *(_DWORD *)v2 += 2;
    long long v220 = (_DWORD *)v2;
    int v3 = *(_DWORD *)(v2 + 4);
    if (v3 < 0) {
      goto LABEL_287;
    }
    BOOL v4 = __OFADD__(v3, 4);
    int v5 = v3 + 4;
    if (v4) {
      goto LABEL_287;
    }
  }
  else
  {
    long long v220 = 0;
    int v5 = 4;
  }
  if (__OFADD__(v5, 2))
  {
LABEL_287:
    uint64_t v221 = 0;
    goto LABEL_303;
  }
  BOOL v6 = !v2 || (*(unsigned char *)(v2 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v5 + 2), v6, (int8x16_t *)"__", 2u, v2, (int8x16_t *)"_inT", 4u, &v221);
  uint64_t v7 = v221;
  if (!v221) {
    goto LABEL_303;
  }
  uint64_t v221 = 0;
  int v8 = (_DWORD *)*((void *)v1 + 10);
  *((void *)v1 + 10) = v7;
  if (v8)
  {
    if (*v8 != 2)
    {
      *v8 -= 2;
      uint64_t v9 = v220;
      uint64_t v221 = 0;
      if (!v220) {
        goto LABEL_21;
      }
      goto LABEL_18;
    }
    WTF::StringImpl::destroy();
    uint64_t v10 = v221;
    uint64_t v221 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy();
        uint64_t v9 = v220;
        if (!v220) {
          goto LABEL_21;
        }
        goto LABEL_18;
      }
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v9 = v220;
  if (!v220) {
    goto LABEL_21;
  }
LABEL_18:
  if (*v9 == 2) {
    WTF::StringImpl::destroy();
  }
  else {
    *v9 -= 2;
  }
LABEL_21:
  uint64_t v11 = *(void *)(*((void *)v1 + 2) + 48);
  if (v11)
  {
    *(_DWORD *)v11 += 2;
    v219 = (_DWORD *)v11;
    int v12 = *(_DWORD *)(v11 + 4);
    if (v12 < 0) {
      goto LABEL_290;
    }
    BOOL v4 = __OFADD__(v12, 3);
    int v13 = v12 + 3;
    if (v4) {
      goto LABEL_290;
    }
  }
  else
  {
    v219 = 0;
    int v13 = 3;
  }
  if (__OFADD__(v13, 2))
  {
LABEL_290:
    uint64_t v221 = 0;
    goto LABEL_291;
  }
  BOOL v14 = !v11 || (*(unsigned char *)(v11 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v13 + 2), v14, (int8x16_t *)"__", 2u, v11, (int8x16_t *)"_in", 3u, &v221);
  uint64_t v15 = v221;
  if (!v221)
  {
LABEL_291:
    __break(0xC471u);
    JUMPOUT(0x182550254);
  }
  uint64_t v221 = 0;
  uint64_t v16 = (_DWORD *)*((void *)v1 + 11);
  *((void *)v1 + 11) = v15;
  if (v16)
  {
    if (*v16 != 2)
    {
      *v16 -= 2;
      uint64_t v221 = 0;
      uint64_t v17 = v219;
      if (!v219) {
        goto LABEL_41;
      }
      goto LABEL_38;
    }
    WTF::StringImpl::destroy();
    unint64_t v18 = v221;
    uint64_t v221 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::destroy();
        uint64_t v17 = v219;
        if (!v219) {
          goto LABEL_41;
        }
        goto LABEL_38;
      }
      *(_DWORD *)v18 -= 2;
    }
  }
  uint64_t v17 = v219;
  if (!v219) {
    goto LABEL_41;
  }
LABEL_38:
  if (*v17 == 2) {
    WTF::StringImpl::destroy();
  }
  else {
    *v17 -= 2;
  }
LABEL_41:
  uint64_t v19 = *((void *)v1 + 2);
  uint64_t v20 = *(uint64_t **)(v19 + 56);
  uint64_t v21 = *(unsigned int *)(v19 + 68);
  if (v21)
  {
    uint64_t v22 = &v20[v21];
    while (1)
    {
      uint64_t v23 = *v20;
      int8x16x2_t v231 = 0;
      *(void *)&long long v232 = 0;
      long long v222 = *(_OWORD *)(v23 + 40);
      uint64_t v221 = (WTF **)off_1ECABC030;
      long long v24 = *(_DWORD **)(v23 + 56);
      if (v24) {
        *v24 += 2;
      }
      uint64_t v25 = *(void *)(v23 + 64);
      int8x16x2_t v223 = v24;
      uint64_t v224 = v25;
      uint64_t v26 = *(unsigned int *)(v23 + 84);
      int8x16x2_t v225 = 0;
      int v226 = 0;
      int v227 = v26;
      if (v26)
      {
        if (v26 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x18255029CLL);
        }
        uint64_t v27 = (WTF *)WTF::fastMalloc((WTF *)(8 * v26));
        int v226 = v26;
        int8x16x2_t v225 = v27;
        uint64_t v28 = *(unsigned int *)(v23 + 84);
        if (v28)
        {
          uint64_t v29 = *(void *)(v23 + 72);
          unint64_t v30 = (v28 - 1) & 0x1FFFFFFFFFFFFFFFLL;
          if (v30 < 3)
          {
            unsigned int v31 = *(uint64_t **)(v23 + 72);
LABEL_56:
            unsigned int v39 = (uint64_t *)(v29 + 8 * v28);
            do
            {
              uint64_t v40 = *v31++;
              *(void *)uint64_t v27 = v40;
              uint64_t v27 = (WTF *)((char *)v27 + 8);
            }
            while (v31 != v39);
            goto LABEL_58;
          }
          unsigned int v31 = *(uint64_t **)(v23 + 72);
          if ((unint64_t)v27 - v29 < 0x20) {
            goto LABEL_56;
          }
          unint64_t v32 = v30 + 1;
          uint64_t v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v34 = (WTF *)((char *)v27 + v33);
          unsigned int v31 = (uint64_t *)(v29 + v33);
          uint64_t v35 = (long long *)(v29 + 16);
          uint64_t v36 = (_OWORD *)((char *)v27 + 16);
          uint64_t v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v38 = *v35;
            *(v36 - 1) = *(v35 - 1);
            _OWORD *v36 = v38;
            v35 += 2;
            v36 += 2;
            v37 -= 4;
          }
          while (v37);
          uint64_t v27 = v34;
          if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_56;
          }
        }
      }
LABEL_58:
      WGSL::EntryPointRewriter::visit((uint64_t)v1, (uint64_t)&v231, (unint64_t)&v221);
      uint64_t v42 = v225;
      if (v225)
      {
        int8x16x2_t v225 = 0;
        int v226 = 0;
        WTF::fastFree(v42, v41);
      }
      int v43 = v223;
      uint64_t v221 = (WTF **)off_1ECABC030;
      int8x16x2_t v223 = 0;
      if (!v43) {
        goto LABEL_63;
      }
      if (*v43 != 2)
      {
        *v43 -= 2;
LABEL_63:
        uint64_t v44 = DWORD1(v232);
        uint64_t v45 = v231;
        if (DWORD1(v232)) {
          goto LABEL_66;
        }
        goto LABEL_72;
      }
      WTF::StringImpl::destroy();
      uint64_t v44 = DWORD1(v232);
      uint64_t v45 = v231;
      if (DWORD1(v232))
      {
LABEL_66:
        uint64_t v46 = 8 * v44;
        uint64_t v47 = v45;
        do
        {
          unint64_t v48 = *(_DWORD **)v47;
          *(void *)uint64_t v47 = 0;
          if (v48)
          {
            if (*v48 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v48 -= 2;
            }
          }
          uint64_t v47 = (WTF *)((char *)v47 + 8);
          v46 -= 8;
        }
        while (v46);
      }
LABEL_72:
      if (v45) {
        WTF::fastFree(v45, v41);
      }
      if (++v20 == v22)
      {
        uint64_t v19 = *((void *)v1 + 2);
        uint64_t v20 = *(uint64_t **)(v19 + 56);
        int v49 = *(_DWORD *)(v19 + 68);
        goto LABEL_76;
      }
    }
  }
  int v49 = 0;
LABEL_76:
  uint64_t v50 = *((void *)v1 + 1);
  *(void *)(v19 + 56) = 0;
  uint64_t v51 = (WTF **)(v19 + 56);
  int v52 = *(_DWORD *)(v19 + 64);
  *(void *)(v19 + 64) = 0;
  unint64_t v53 = *(unsigned int *)(v50 + 412);
  if (v53 == *(_DWORD *)(v50 + 408))
  {
    unint64_t v54 = v53 + (v53 >> 2);
    if (v54 >= 0x10) {
      unint64_t v55 = v54 + 1;
    }
    else {
      unint64_t v55 = 16;
    }
    if (v55 <= v53 + 1) {
      unint64_t v56 = v53 + 1;
    }
    else {
      unint64_t v56 = v55;
    }
    WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v50 + 400, v56);
    uint64_t v57 = *(unsigned int *)(v50 + 412);
    uint64_t v58 = *(void *)(v50 + 400) + 32 * v57;
    unint64_t v59 = operator new(0x20uLL);
    *unint64_t v59 = &unk_1ECABC6D0;
    v59[1] = v51;
    v59[2] = v20;
    *((_DWORD *)v59 + 6) = v52;
    *((_DWORD *)v59 + 7) = v49;
    *(void *)(v58 + 24) = v59;
    int v61 = *(_DWORD *)(v19 + 64);
    *(_DWORD *)(v50 + 412) = v57 + 1;
    if (v61)
    {
      if (*(_DWORD *)(v19 + 68)) {
        *(_DWORD *)(v19 + 68) = 0;
      }
      int8x16_t v62 = *v51;
      if (*v51)
      {
        *(void *)(v19 + 56) = 0;
        *(_DWORD *)(v19 + 64) = 0;
        WTF::fastFree(v62, v60);
      }
    }
    if (*(unsigned char *)v1 == 4) {
      goto LABEL_175;
    }
  }
  else
  {
    uint64_t v63 = *(void *)(v50 + 400) + 32 * v53;
    int v64 = operator new(0x20uLL);
    void *v64 = &unk_1ECABC6D0;
    v64[1] = v51;
    v64[2] = v20;
    *((_DWORD *)v64 + 6) = v52;
    *((_DWORD *)v64 + 7) = v49;
    *(void *)(v63 + 24) = v64;
    *(_DWORD *)(v50 + 412) = v53 + 1;
    if (*(unsigned char *)v1 == 4) {
      goto LABEL_175;
    }
  }
  uint64_t v65 = *(WTF ***)(*((void *)v1 + 2) + 104);
  if (v65 && (*((unsigned int (**)(WTF **))*v65 + 2))(v65) == 22)
  {
    v235 = v65;
    uint64_t v66 = v65[3];
    if (v66 && *((_DWORD *)v66 + 12) == 4)
    {
      int8x16x2_t v231 = v65[3];
      uint64_t v221 = &v231;
      *(void *)&long long v222 = v1;
      *((void *)&v222 + 1) = &v235;
      if (*(unsigned char *)v1 == 2) {
        WGSL::EntryPointRewriter::checkReturnType(void)::$_0::operator()((uint64_t ***)&v221, 8, (int8x16_t *)"FragmentOutput", 15);
      }
      else {
        WGSL::EntryPointRewriter::checkReturnType(void)::$_0::operator()((uint64_t ***)&v221, 4, (int8x16_t *)"VertexOutput", 13);
      }
      goto LABEL_175;
    }
    if (*(unsigned char *)v1 == 2)
    {
      uint64_t v67 = *((void *)v1 + 2);
      if (*(unsigned __int16 *)(v67 + 161) >= 0x100u)
      {
        long long v222 = *(_OWORD *)(v67 + 32);
        uint64_t v221 = (WTF **)off_1ECABC030;
        uint64_t v68 = *(void *)(v67 + 48);
        if (v68)
        {
          *(_DWORD *)v68 += 2;
          int8x16x2_t v223 = (_DWORD *)v68;
          int v69 = *(_DWORD *)(v68 + 4);
          if (v69 < 0) {
            goto LABEL_293;
          }
          BOOL v4 = __OFADD__(v69, 15);
          int v70 = v69 + 15;
          if (v4) {
            goto LABEL_293;
          }
        }
        else
        {
          int8x16x2_t v223 = 0;
          int v70 = 15;
        }
        if (!__OFADD__(v70, 2))
        {
          BOOL v71 = !v68 || (*(unsigned char *)(v68 + 16) & 4) != 0;
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v70 + 2), v71, (int8x16_t *)"__", 2u, v68, (int8x16_t *)"_FragmentOutput", 0xFu, &v234);
          if (v234)
          {
            unint64_t v72 = v223;
            uint64_t v221 = (WTF **)off_1ECABC030;
            int8x16x2_t v223 = 0;
            if (v72)
            {
              if (*v72 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *v72 -= 2;
              }
            }
            uint64_t v73 = (void *)(*((void *)v1 + 1) + 312);
            long long v238 = 0uLL;
            uint64_t v74 = v65[11];
            if (v74) {
              *(_DWORD *)v74 += 2;
            }
            int8x16x2_t v231 = (WTF *)off_1ECABC030;
            long long v232 = 0uLL;
            int8x16x2_t v233 = v74;
            uint64_t v75 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v73, &v238, (uint64_t)&v231);
            uint64_t v76 = v233;
            int8x16x2_t v231 = (WTF *)off_1ECABC030;
            int8x16x2_t v233 = 0;
            if (v76)
            {
              if (*(_DWORD *)v76 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *(_DWORD *)v76 -= 2;
              }
            }
            v75[3] = v65[3];
            uint64_t v77 = *((void *)v1 + 1);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            uint64_t v78 = v231;
            int8x16x2_t v231 = (WTF *)off_1ECABC030;
            long long v232 = 0uLL;
            int8x16x2_t v233 = v78;
            uint64_t v79 = *((void *)v1 + 2);
            uint64_t v80 = *(unsigned int *)(v79 + 100);
            if (v80)
            {
              if (v80 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x1825502D4);
              }
              uint64_t v81 = WTF::fastMalloc((WTF *)(8 * v80));
              uint64_t v82 = *(unsigned int *)(v79 + 100);
              if (!v82) {
                goto LABEL_136;
              }
              uint64_t v83 = *(void *)(v79 + 88);
              unint64_t v84 = (v82 - 1) & 0x1FFFFFFFFFFFFFFFLL;
              if (v84 < 3)
              {
                int v85 = (void *)v81;
                uint64_t v86 = *(uint64_t **)(v79 + 88);
              }
              else
              {
                int v85 = (void *)v81;
                uint64_t v86 = *(uint64_t **)(v79 + 88);
                if ((unint64_t)(v81 - v83) >= 0x20)
                {
                  uint64_t v87 = 0;
                  unint64_t v88 = v84 + 1;
                  uint64_t v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
                  int v85 = (void *)(v81 + v89);
                  uint64_t v86 = (uint64_t *)(v83 + v89);
                  uint64_t v90 = v88 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    uint8x16_t v91 = (_OWORD *)(v81 + v87);
                    long long v92 = *(_OWORD *)(v83 + v87 + 16);
                    _OWORD *v91 = *(_OWORD *)(v83 + v87);
                    v91[1] = v92;
                    v87 += 32;
                    v90 -= 4;
                  }
                  while (v90);
                  if (v88 == (v88 & 0x3FFFFFFFFFFFFFFCLL)) {
                    goto LABEL_136;
                  }
                }
              }
              uint16x8_t v93 = (uint64_t *)(v83 + 8 * v82);
              do
              {
                uint64_t v94 = *v86++;
                *v85++ = v94;
              }
              while (v86 != v93);
            }
            else
            {
              uint64_t v81 = 0;
            }
LABEL_136:
            uint64_t v95 = *(void *)(v77 + 312);
            if ((unint64_t)(*(void *)(v77 + 320) - v95) <= 0x9F)
            {
              uint64_t v214 = v77;
              uint64_t v215 = (WGSL::AST::Builder *)(v77 + 312);
              uint64_t v216 = v81;
              WGSL::AST::Builder::allocateArena(v215);
              uint64_t v81 = v216;
              uint64_t v95 = *(void *)v215;
              uint64_t v77 = v214;
            }
            *(void *)(v95 + 8) = 0;
            *(void *)(v95 + 16) = 0;
            *(void *)uint64_t v95 = &unk_1ECABC888;
            long long v96 = v232;
            *(_OWORD *)(v95 + 32) = v232;
            *(void *)(v95 + 24) = off_1ECABC030;
            uint8x8_t v97 = v233;
            int8x16x2_t v233 = 0;
            *(_OWORD *)(v95 + 64) = v96;
            *(void *)(v95 + 48) = v97;
            *(void *)(v95 + 56) = off_1ECABC030;
            if (v97) {
              *(_DWORD *)v97 += 2;
            }
            *(void *)(v95 + 80) = v97;
            *(void *)(v95 + 88) = v81;
            *(_DWORD *)(v95 + 96) = v80;
            *(_DWORD *)(v95 + 100) = v80;
            *(unsigned char *)(v95 + 124) = 0;
            *(unsigned char *)(v95 + 128) = 0;
            *(unsigned char *)(v95 + 132) = 0;
            *(unsigned char *)(v95 + 136) = 0;
            *(_WORD *)(v95 + 140) = 0;
            *(unsigned char *)(v95 + 144) = 0;
            *(unsigned char *)(v95 + 148) = 0;
            *(unsigned char *)(v95 + 152) = 0;
            *(unsigned char *)(v95 + 154) = 0;
            *(void *)(v95 + 104) = v75;
            *(void *)(v95 + 112) = 0;
            *(unsigned char *)(v95 + 120) = 0;
            *(void *)(v77 + 312) += 160;
            unint64_t v98 = *(unsigned int *)(v77 + 356);
            if (v98 != *(_DWORD *)(v77 + 352))
            {
              unint64_t v105 = (void *)(*(void *)(v77 + 344) + 8 * v98);
              goto LABEL_154;
            }
            unint64_t v99 = v98 + (v98 >> 2);
            if (v99 >= 0x10) {
              unint64_t v100 = v99 + 1;
            }
            else {
              unint64_t v100 = 16;
            }
            if (v100 <= v98 + 1) {
              unint64_t v101 = v98 + 1;
            }
            else {
              unint64_t v101 = v100;
            }
            if (!(v101 >> 29))
            {
              uint64_t v102 = *(void **)(v77 + 344);
              int8x16x2_t v103 = (void *)WTF::fastMalloc((WTF *)(8 * v101));
              *(_DWORD *)(v77 + 352) = v101;
              *(void *)(v77 + 344) = v103;
              memcpy(v103, v102, 8 * v98);
              if (v102)
              {
                if (*(void **)(v77 + 344) == v102)
                {
                  *(void *)(v77 + 344) = 0;
                  *(_DWORD *)(v77 + 352) = 0;
                }
                WTF::fastFree((WTF *)v102, v104);
              }
              unint64_t v98 = *(unsigned int *)(v77 + 356);
              unint64_t v105 = (void *)(*(void *)(v77 + 344) + 8 * v98);
LABEL_154:
              *unint64_t v105 = v95;
              *(_DWORD *)(v77 + 356) = v98 + 1;
              uint64_t v106 = v233;
              int8x16x2_t v231 = (WTF *)off_1ECABC030;
              int8x16x2_t v233 = 0;
              if (v106)
              {
                if (*(_DWORD *)v106 == 2) {
                  WTF::StringImpl::destroy();
                }
                else {
                  *(_DWORD *)v106 -= 2;
                }
              }
              uint64_t v107 = (void *)(*((void *)v1 + 1) + 312);
              long long v238 = 0uLL;
              uint16x8_t v108 = v234;
              if (v234) {
                *(_DWORD *)v234 += 2;
              }
              int8x16x2_t v231 = (WTF *)off_1ECABC030;
              long long v232 = 0uLL;
              int8x16x2_t v233 = v108;
              uint64_t v109 = (WTF *)WTF::fastMalloc((WTF *)8);
              LODWORD(v237) = 1;
              v236 = v109;
              *(void *)uint64_t v109 = v95;
              HIDWORD(v237) = 1;
              int8x16x2_t v229 = 0;
              uint64_t v230 = 0;
              char v228 = 9;
              uint64_t v111 = WGSL::AST::Builder::construct<WGSL::AST::Structure,WGSL::SourceSpan,WGSL::AST::Identifier,WTF::ReferenceWrapperVector<WGSL::AST::StructureMember,0ul>,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WGSL::AST::StructureRole,void>(v107, &v238, (uint64_t)&v231, (uint64_t *)&v236, (uint64_t *)&v229, &v228);
              unint64_t v112 = v229;
              if (v229)
              {
                int8x16x2_t v229 = 0;
                LODWORD(v230) = 0;
                WTF::fastFree(v112, v110);
              }
              uint8x8_t v113 = v236;
              if (v236)
              {
                v236 = 0;
                LODWORD(v237) = 0;
                WTF::fastFree(v113, v110);
              }
              uint64_t v114 = v233;
              int8x16x2_t v231 = (WTF *)off_1ECABC030;
              int8x16x2_t v233 = 0;
              if (v114)
              {
                if (*(_DWORD *)v114 == 2) {
                  WTF::StringImpl::destroy();
                }
                else {
                  *(_DWORD *)v114 -= 2;
                }
              }
              WGSL::ShaderModule::append<WGSL::AST::Structure &,std::reference_wrapper<WGSL::AST::Declaration>,0ul>(*((void **)v1 + 1), *((void *)v1 + 1) + 64, (uint64_t)v111);
              uint64_t v115 = (void *)(*((void *)v1 + 1) + 312);
              long long v238 = 0uLL;
              uint64_t v116 = v234;
              if (v234) {
                *(_DWORD *)v234 += 2;
              }
              int8x16x2_t v231 = (WTF *)off_1ECABC030;
              long long v232 = 0uLL;
              int8x16x2_t v233 = v116;
              WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v115, &v238, (uint64_t)&v231);
              long long v117 = v233;
              int8x16x2_t v231 = (WTF *)off_1ECABC030;
              int8x16x2_t v233 = 0;
              if (v117)
              {
                if (*(_DWORD *)v117 == 2) {
                  WTF::StringImpl::destroy();
                }
                else {
                  *(_DWORD *)v117 -= 2;
                }
              }
              int8x16x2_t v231 = 0;
              WGSL::TypeStore::allocateType<WGSL::Types::Struct,WGSL::AST::Structure &,WTF::HashMap<WTF::String,WGSL::Type const*,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits> &>();
            }
LABEL_303:
            __break(0xC471u);
            JUMPOUT(0x182550238);
          }
LABEL_294:
          __break(0xC471u);
          JUMPOUT(0x182550270);
        }
LABEL_293:
        v234 = 0;
        goto LABEL_294;
      }
    }
  }
LABEL_175:
  uint64_t v118 = *((unsigned int *)v1 + 9);
  unsigned int v218 = v1;
  if (v118)
  {
    uint64_t v119 = v118 << 6;
    uint16x8_t v120 = (unsigned __int8 *)(*((void *)v1 + 3) + 56);
    do
    {
      uint64_t v122 = *((void *)v1 + 1);
      __n128 v123 = (_DWORD *)*((void *)v120 - 4);
      if (v123) {
        *v123 += 2;
      }
      long long v222 = 0uLL;
      uint64_t v221 = (WTF **)off_1ECABC030;
      int8x16x2_t v223 = v123;
      uint64_t v124 = *((void *)v120 - 3);
      uint64_t v125 = *(void *)(v122 + 312);
      if ((unint64_t)(*(void *)(v122 + 320) - v125) <= 0x67)
      {
        uint64_t v137 = (WTF *)WTF::fastMalloc((WTF *)0x4000);
        int8x16x2_t v231 = v137;
        uint64_t v139 = *(unsigned int *)(v122 + 340);
        if (v139 == *(_DWORD *)(v122 + 336))
        {
          uint16x8_t v140 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v122 + 328, v139 + 1, (unint64_t)&v231);
          uint64_t v139 = *(unsigned int *)(v122 + 340);
          uint64_t v141 = *(void *)(v122 + 328);
          uint64_t v142 = *(void *)v140;
          *(void *)uint16x8_t v140 = 0;
          *(void *)(v141 + 8 * v139) = v142;
          v143 = v231;
        }
        else
        {
          v144 = v137;
          v143 = 0;
          uint64_t v145 = *(void *)(v122 + 328);
          int8x16x2_t v231 = 0;
          *(void *)(v145 + 8 * v139) = v144;
        }
        *(_DWORD *)(v122 + 340) = v139 + 1;
        WTF::fastFree(v143, v138);
        uint64_t v146 = *(unsigned int *)(v122 + 340);
        if (!v146)
        {
          __break(0xC471u);
          JUMPOUT(0x1825502BCLL);
        }
        uint64_t v125 = *(void *)(*(void *)(v122 + 328) + 8 * v146 - 8);
        *(void *)(v122 + 312) = v125;
        *(void *)(v122 + 320) = v125 + 0x4000;
      }
      *(void *)(v125 + 8) = 0;
      *(void *)(v125 + 16) = 0;
      *(void *)uint64_t v125 = &unk_1ECABC618;
      *(unsigned char *)(v125 + 24) = 0;
      *(_OWORD *)(v125 + 40) = v222;
      *(void *)(v125 + 32) = off_1ECABC030;
      uint64_t v126 = v223;
      int8x16x2_t v223 = 0;
      *(void *)(v125 + 56) = v126;
      *(void *)(v125 + 64) = v124;
      *(void *)(v125 + 72) = 0;
      *(void *)(v125 + 80) = 0;
      uint64_t v127 = *((void *)v120 - 2);
      *((void *)v120 - 2) = 0;
      *(void *)(v125 + 72) = v127;
      LODWORD(v127) = *((_DWORD *)v120 - 2);
      *((_DWORD *)v120 - 2) = 0;
      *(_DWORD *)(v125 + 80) = v127;
      LODWORD(v127) = *((_DWORD *)v120 - 1);
      *((_DWORD *)v120 - 1) = 0;
      *(unsigned char *)(v125 + 93) = 0;
      *(unsigned char *)(v125 + 96) = 0;
      *(unsigned char *)(v125 + 100) = 0;
      *(_DWORD *)(v125 + 84) = v127;
      *(_DWORD *)(v125 + 88) = 0;
      *(void *)(v122 + 312) += 104;
      unint64_t v128 = *(unsigned int *)(v122 + 356);
      if (v128 == *(_DWORD *)(v122 + 352))
      {
        unint64_t v129 = v128 + (v128 >> 2);
        if (v129 >= 0x10) {
          unint64_t v130 = v129 + 1;
        }
        else {
          unint64_t v130 = 16;
        }
        if (v130 <= v128 + 1) {
          unint64_t v131 = v128 + 1;
        }
        else {
          unint64_t v131 = v130;
        }
        if (v131 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1825502A4);
        }
        unint64_t v132 = *(void **)(v122 + 344);
        uint64_t v133 = (void *)WTF::fastMalloc((WTF *)(8 * v131));
        *(_DWORD *)(v122 + 352) = v131;
        *(void *)(v122 + 344) = v133;
        memcpy(v133, v132, 8 * v128);
        if (v132)
        {
          if (*(void **)(v122 + 344) == v132)
          {
            *(void *)(v122 + 344) = 0;
            *(_DWORD *)(v122 + 352) = 0;
          }
          WTF::fastFree((WTF *)v132, v134);
        }
        unint64_t v128 = *(unsigned int *)(v122 + 356);
        uint8x8_t v135 = (uint64_t *)(*(void *)(v122 + 344) + 8 * v128);
      }
      else
      {
        uint8x8_t v135 = (uint64_t *)(*(void *)(v122 + 344) + 8 * v128);
      }
      *uint8x8_t v135 = v125;
      *(_DWORD *)(v122 + 356) = v128 + 1;
      uint64_t v136 = v223;
      uint64_t v221 = (WTF **)off_1ECABC030;
      int8x16x2_t v223 = 0;
      unsigned int v1 = v218;
      if (v136)
      {
        if (*v136 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v136 -= 2;
        }
      }
      __int16 v121 = *v120;
      v120 += 64;
      *(_WORD *)(v125 + 89) = v121 | 0x100;
      WGSL::ShaderModule::append<WGSL::AST::Parameter &,std::reference_wrapper<WGSL::AST::Parameter>,0ul>(*((void **)v218 + 1), *((void *)v218 + 2) + 56, v125);
      v119 -= 64;
    }
    while (v119);
  }
  uint64_t v147 = *((unsigned int *)v1 + 13);
  if (v147)
  {
    size_t v148 = 0;
    unint64_t v149 = 0;
    int8x16x2_t v150 = 0;
    uint64_t v151 = 0;
    int8x16x2_t v231 = 0;
    *(void *)&long long v232 = 0;
    uint64_t v152 = 56 * v147;
    int8x16x2_t v153 = (_DWORD *)(*((void *)v1 + 5) + 52);
    while (1)
    {
      unint64_t v154 = v149;
      uint64_t v155 = *((void *)v1 + 1);
      uint64_t v156 = *(void *)(v153 - 5);
      uint64_t v157 = *(void *)(v155 + 312);
      if ((unint64_t)(*(void *)(v155 + 320) - v157) <= 0x9F)
      {
        WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v155 + 312));
        uint64_t v157 = *(void *)(v155 + 312);
      }
      __src = v150;
      *(void *)(v157 + 8) = 0;
      *(void *)(v157 + 16) = 0;
      *(void *)uint64_t v157 = &unk_1ECABC888;
      *(void *)(v157 + 24) = &unk_1ECABC008;
      *(_OWORD *)(v157 + 32) = *(_OWORD *)(v153 - 11);
      *(void *)(v157 + 24) = off_1ECABC030;
      int8x16x2_t v158 = *(_DWORD **)(v153 - 7);
      *(void *)(v153 - 7) = 0;
      *(_OWORD *)(v157 + 64) = *(_OWORD *)(v157 + 32);
      *(void *)(v157 + 48) = v158;
      *(void *)(v157 + 56) = off_1ECABC030;
      if (v158) {
        *v158 += 2;
      }
      *(void *)(v157 + 88) = 0;
      *(void *)(v157 + 96) = 0;
      *(void *)(v157 + 80) = v158;
      uint64_t v159 = *(void *)(v153 - 3);
      *(void *)(v153 - 3) = 0;
      *(void *)(v157 + 88) = v159;
      LODWORD(v159) = *(v153 - 1);
      *(v153 - 1) = 0;
      *(_DWORD *)(v157 + 96) = v159;
      LODWORD(v159) = *v153;
      *int8x16x2_t v153 = 0;
      *(_DWORD *)(v157 + 100) = v159;
      *(unsigned char *)(v157 + 124) = 0;
      *(unsigned char *)(v157 + 128) = 0;
      *(unsigned char *)(v157 + 132) = 0;
      *(unsigned char *)(v157 + 136) = 0;
      *(_WORD *)(v157 + 140) = 0;
      *(unsigned char *)(v157 + 144) = 0;
      *(unsigned char *)(v157 + 148) = 0;
      *(unsigned char *)(v157 + 152) = 0;
      *(unsigned char *)(v157 + 154) = 0;
      *(unsigned char *)(v157 + 120) = 0;
      *(void *)(v157 + 104) = v156;
      *(void *)(v157 + 112) = 0;
      *(void *)(v155 + 312) += 160;
      unint64_t v160 = *(unsigned int *)(v155 + 356);
      if (v160 == *(_DWORD *)(v155 + 352))
      {
        unint64_t v161 = v160 + (v160 >> 2);
        if (v161 >= 0x10) {
          unint64_t v162 = v161 + 1;
        }
        else {
          unint64_t v162 = 16;
        }
        if (v162 <= v160 + 1) {
          unint64_t v163 = v160 + 1;
        }
        else {
          unint64_t v163 = v162;
        }
        if (v163 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1825502ACLL);
        }
        v164 = *(void **)(v155 + 344);
        v165 = (void *)WTF::fastMalloc((WTF *)(8 * v163));
        *(_DWORD *)(v155 + 352) = v163;
        *(void *)(v155 + 344) = v165;
        memcpy(v165, v164, 8 * v160);
        if (v164)
        {
          if (*(void **)(v155 + 344) == v164)
          {
            *(void *)(v155 + 344) = 0;
            *(_DWORD *)(v155 + 352) = 0;
          }
          WTF::fastFree((WTF *)v164, v166);
        }
        uint64_t v167 = *(unsigned int *)(v155 + 356);
        *(void *)(*(void *)(v155 + 344) + 8 * v167) = v157;
        *(_DWORD *)(v155 + 356) = v167 + 1;
        unint64_t v149 = v154 + 1;
        if (v154 == v151)
        {
LABEL_227:
          unint64_t v168 = v154 + (v154 >> 2);
          if (v168 >= 0x10) {
            unint64_t v169 = v168 + 1;
          }
          else {
            unint64_t v169 = 16;
          }
          if (v169 <= v149) {
            unint64_t v170 = v149;
          }
          else {
            unint64_t v170 = v169;
          }
          if (v170 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1825502B4);
          }
          v171 = (WTF *)WTF::fastMalloc((WTF *)(8 * v170));
          uint64_t v151 = v170;
          memcpy(v171, __src, v148);
          if (__src)
          {
            if (v171 == __src)
            {
              uint64_t v151 = 0;
              int8x16x2_t v150 = 0;
            }
            else
            {
              int8x16x2_t v150 = v171;
            }
            WTF::fastFree(__src, v172);
          }
          else
          {
            int8x16x2_t v150 = v171;
          }
          goto LABEL_207;
        }
      }
      else
      {
        *(void *)(*(void *)(v155 + 344) + 8 * v160) = v157;
        *(_DWORD *)(v155 + 356) = v160 + 1;
        unint64_t v149 = v154 + 1;
        if (v154 == v151) {
          goto LABEL_227;
        }
      }
      int8x16x2_t v150 = __src;
LABEL_207:
      *((void *)v150 + v154) = v157;
      v148 += 8;
      v153 += 14;
      v152 -= 56;
      unsigned int v1 = v218;
      if (!v152)
      {
        *(void *)&long long v232 = __PAIR64__(v149, v151);
        int8x16x2_t v231 = v150;
        LOBYTE(v229) = 0;
        int v173 = *(unsigned __int8 *)v218;
        if (v173 == 1 || v173 == 2)
        {
LABEL_244:
          LOBYTE(v229) = v173;
        }
        else if (v173 == 4)
        {
          LOBYTE(v173) = 3;
          goto LABEL_244;
        }
        uint16x8_t v174 = (void *)(*((void *)v218 + 1) + 312);
        long long v238 = 0uLL;
        uint16x8_t v175 = (_DWORD *)*((void *)v218 + 10);
        if (v175) {
          *v175 += 2;
        }
        uint64_t v221 = (WTF **)off_1ECABC030;
        long long v222 = 0uLL;
        int8x16x2_t v223 = v175;
        v236 = 0;
        uint64_t v237 = 0;
        v177 = WGSL::AST::Builder::construct<WGSL::AST::Structure,WGSL::SourceSpan,WGSL::AST::Identifier,WTF::ReferenceWrapperVector<WGSL::AST::StructureMember,0ul>,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WGSL::AST::StructureRole,void>(v174, &v238, (uint64_t)&v221, (uint64_t *)&v231, (uint64_t *)&v236, (char *)&v229);
        if (v236) {
          WTF::fastFree(v236, v176);
        }
        unint64_t v178 = v223;
        uint64_t v221 = (WTF **)off_1ECABC030;
        int8x16x2_t v223 = 0;
        if (v178)
        {
          if (*v178 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v178 -= 2;
          }
        }
        WGSL::ShaderModule::append<WGSL::AST::Structure &,std::reference_wrapper<WGSL::AST::Declaration>,0ul>(*((void **)v218 + 1), *((void *)v218 + 1) + 64, (uint64_t)v177);
        uint64_t v221 = 0;
        WGSL::TypeStore::allocateType<WGSL::Types::Struct,WGSL::AST::Structure &,WTF::HashMap<WTF::String,WGSL::Type const*,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits> &>();
      }
    }
  }
  uint64_t v179 = *((void *)v1 + 1);
  uint64_t v180 = *(void *)(*((void *)v1 + 2) + 112);
  v181 = (const void **)(v180 + 40);
  uint64_t v182 = *((void *)v1 + 7);
  uint64_t v183 = *((unsigned int *)v1 + 17);
  unint64_t v184 = *(unsigned int *)(v180 + 48);
  uint64_t v185 = *(unsigned int *)(v180 + 52);
  unint64_t v186 = v185 + v183;
  if (v185 + v183 > v184)
  {
    unint64_t v187 = v184 + (v184 >> 2);
    if (v187 >= 0x10) {
      unint64_t v188 = v187 + 1;
    }
    else {
      unint64_t v188 = 16;
    }
    if (v188 <= v186) {
      unint64_t v189 = v185 + v183;
    }
    else {
      unint64_t v189 = v188;
    }
    if (v189 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1825502CCLL);
    }
    v190 = (void *)*v181;
    v191 = (void *)WTF::fastMalloc((WTF *)(8 * v189));
    *(_DWORD *)(v180 + 48) = v189;
    *(void *)(v180 + 40) = v191;
    memcpy(v191, v190, 8 * v185);
    if (v190)
    {
      if (*v181 == v190)
      {
        *(void *)(v180 + 40) = 0;
        *(_DWORD *)(v180 + 48) = 0;
      }
      WTF::fastFree((WTF *)v190, v192);
    }
  }
  unint64_t v193 = *(unsigned int *)(v180 + 52);
  if (v186 < v193)
  {
    __break(0xC471u);
    JUMPOUT(0x1825502C4);
  }
  uint16x8_t v194 = *v181;
  memmove((char *)*v181 + 8 * v183, *v181, 8 * v193);
  if (v183)
  {
    unint64_t v195 = (v183 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v195 < 3)
    {
      v196 = (uint64_t *)v182;
    }
    else
    {
      v196 = (uint64_t *)v182;
      if ((unint64_t)v194 - v182 >= 0x20)
      {
        unint64_t v197 = v195 + 1;
        uint64_t v198 = v197 & 0x3FFFFFFFFFFFFFFCLL;
        uint8x8_t v199 = &v194[v198];
        v196 = (uint64_t *)(v182 + v198 * 8);
        v200 = (long long *)(v182 + 16);
        v201 = v194 + 2;
        uint64_t v202 = v197 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v203 = *v200;
          *(v201 - 1) = *(v200 - 1);
          _OWORD *v201 = v203;
          v200 += 2;
          v201 += 2;
          v202 -= 4;
        }
        while (v202);
        uint16x8_t v194 = v199;
        if (v197 == (v197 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_276;
        }
      }
    }
    do
    {
      uint64_t v204 = *v196++;
      *v194++ = v204;
    }
    while (v196 != (uint64_t *)(v182 + 8 * v183));
  }
LABEL_276:
  *(_DWORD *)(v180 + 52) = v186;
  uint16x8_t v205 = (void *)(v179 + 400);
  uint64_t v206 = *((unsigned int *)v1 + 17);
  unint64_t v207 = *(unsigned int *)(v179 + 412);
  if (v207 == *(_DWORD *)(v179 + 408))
  {
    unint64_t v208 = v207 + (v207 >> 2);
    if (v208 >= 0x10) {
      unint64_t v209 = v208 + 1;
    }
    else {
      unint64_t v209 = 16;
    }
    if (v209 <= v207 + 1) {
      unint64_t v210 = v207 + 1;
    }
    else {
      unint64_t v210 = v209;
    }
    WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v205, v210);
    unint64_t v207 = *(unsigned int *)(v179 + 412);
    uint64_t v211 = *(void *)(v179 + 400) + 32 * v207;
    uint64_t result = operator new(0x20uLL);
    *uint64_t result = &unk_1ECABC688;
    result[1] = v181;
    result[2] = 0;
    result[3] = v206;
    *(void *)(v211 + 24) = result;
  }
  else
  {
    uint64_t v213 = *v205 + 32 * v207;
    uint64_t result = operator new(0x20uLL);
    *uint64_t result = &unk_1ECABC688;
    result[1] = v181;
    result[2] = 0;
    result[3] = v206;
    *(void *)(v213 + 24) = result;
  }
  *(_DWORD *)(v179 + 412) = v207 + 1;
  return result;
}

void *WGSL::AST::Builder::construct<WGSL::AST::Parameter,WGSL::SourceSpan,WGSL::AST::Identifier,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WGSL::AST::ParameterRole,void>(void *this, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t *a5, char *a6)
{
  uint64_t v11 = this;
  uint64_t v12 = *this;
  if (this[1] - *this <= 0x67uLL)
  {
    this = (void *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    uint64_t v12 = *v11;
  }
  char v13 = *a6;
  *(_OWORD *)(v12 + 8) = *a2;
  *(void *)uint64_t v12 = &unk_1ECABC618;
  *(unsigned char *)(v12 + 24) = v13;
  *(void *)(v12 + 32) = &unk_1ECABC008;
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(a3 + 8);
  *(void *)(v12 + 32) = off_1ECABC030;
  uint64_t v14 = *(void *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(v12 + 56) = v14;
  *(void *)(v12 + 64) = a4;
  *(void *)(v12 + 72) = 0;
  *(void *)(v12 + 80) = 0;
  uint64_t v15 = *a5;
  *a5 = 0;
  *(void *)(v12 + 72) = v15;
  LODWORD(v15) = *((_DWORD *)a5 + 2);
  *((_DWORD *)a5 + 2) = 0;
  *(_DWORD *)(v12 + 80) = v15;
  LODWORD(v15) = *((_DWORD *)a5 + 3);
  *((_DWORD *)a5 + 3) = 0;
  *(unsigned char *)(v12 + 93) = 0;
  *(unsigned char *)(v12 + 96) = 0;
  *(unsigned char *)(v12 + 100) = 0;
  *(_DWORD *)(v12 + 84) = v15;
  *(_DWORD *)(v12 + 88) = 0;
  *v11 += 104;
  unint64_t v16 = *((unsigned int *)v11 + 11);
  if (v16 != *((_DWORD *)v11 + 10))
  {
    uint64_t v23 = (void *)(v11[4] + 8 * v16);
LABEL_17:
    void *v23 = v12;
    *((_DWORD *)v11 + 11) = v16 + 1;
    return (void *)v12;
  }
  unint64_t v17 = v16 + (v16 >> 2);
  if (v17 >= 0x10) {
    unint64_t v18 = v17 + 1;
  }
  else {
    unint64_t v18 = 16;
  }
  if (v18 <= v16 + 1) {
    unint64_t v19 = v16 + 1;
  }
  else {
    unint64_t v19 = v18;
  }
  if (!(v19 >> 29))
  {
    uint64_t v20 = (void *)v11[4];
    uint64_t v21 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
    *((_DWORD *)v11 + 10) = v19;
    v11[4] = v21;
    memcpy(v21, v20, 8 * v16);
    if (v20)
    {
      if ((void *)v11[4] == v20)
      {
        v11[4] = 0;
        *((_DWORD *)v11 + 10) = 0;
      }
      WTF::fastFree((WTF *)v20, v22);
    }
    unint64_t v16 = *((unsigned int *)v11 + 11);
    uint64_t v23 = (void *)(v11[4] + 8 * v16);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

void *WGSL::ShaderModule::append<WGSL::AST::Parameter &,std::reference_wrapper<WGSL::AST::Parameter>,0ul>(void *result, uint64_t a2, uint64_t a3)
{
  int v5 = result;
  unint64_t v6 = *(unsigned int *)(a2 + 12);
  if (v6 == *(_DWORD *)(a2 + 8))
  {
    unint64_t v7 = v6 + (v6 >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 <= v6 + 1) {
      unint64_t v9 = v6 + 1;
    }
    else {
      unint64_t v9 = v8;
    }
    if (v9 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v10 = *(void **)a2;
    uint64_t v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(a2 + 8) = v9;
    *(void *)a2 = v11;
    memcpy(v11, v10, 8 * v6);
    if (v10)
    {
      if (*(void **)a2 == v10)
      {
        *(void *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v10, v12);
    }
    unint64_t v6 = *(unsigned int *)(a2 + 12);
    char v13 = (void *)(*(void *)a2 + 8 * v6);
  }
  else
  {
    char v13 = (void *)(*(void *)a2 + 8 * v6);
  }
  *char v13 = a3;
  *(_DWORD *)(a2 + 12) = v6 + 1;
  uint64_t result = v5 + 50;
  unint64_t v14 = *((unsigned int *)v5 + 103);
  if (v14 == *((_DWORD *)v5 + 102))
  {
    unint64_t v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10) {
      unint64_t v16 = v15 + 1;
    }
    else {
      unint64_t v16 = 16;
    }
    if (v16 <= v14 + 1) {
      unint64_t v17 = v14 + 1;
    }
    else {
      unint64_t v17 = v16;
    }
    uint64_t result = (void *)WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)result, v17);
    unint64_t v14 = *((unsigned int *)v5 + 103);
    unint64_t v18 = (void *)(v5[50] + 32 * v14);
  }
  else
  {
    unint64_t v18 = (void *)(*result + 32 * v14);
  }
  void *v18 = &unk_1ECABC640;
  v18[1] = a2;
  v18[3] = v18;
  *((_DWORD *)v5 + 103) = v14 + 1;
  return result;
}

uint64_t WGSL::EntryPointRewriter::visit(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 32);
  unint64_t v7 = *(_DWORD **)(v6 + 24);
  if (!v7 || v7[12] != 4)
  {
    uint64_t v22 = *(unsigned int *)(a3 + 52);
    if (!v22)
    {
LABEL_26:
      uint64_t result = (uint64_t)WGSL::EntryPointRewriter::materialize(a1, a2, a3, 0, 0);
      uint64_t v28 = *(unsigned int *)(a1 + 52);
      if (v28 == *(_DWORD *)(a1 + 48))
      {
        uint64_t result = WTF::Vector<WGSL::EntryPointRewriter::MemberOrParameter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 40, v28 + 1, a3);
        uint64_t v29 = *(void *)(a1 + 40) + 56 * *(unsigned int *)(a1 + 52);
        *(void *)uint64_t v29 = &unk_1ECABC008;
        *(_OWORD *)(v29 + 8) = *(_OWORD *)(result + 8);
        *(void *)uint64_t v29 = off_1ECABC030;
        long long v30 = *(_OWORD *)(result + 24);
        *(void *)(result + 24) = 0;
        *(_OWORD *)(v29 + 24) = v30;
        *(void *)(v29 + 40) = 0;
        *(void *)(v29 + 48) = 0;
        uint64_t v31 = *(void *)(result + 40);
        *(void *)(result + 40) = 0;
        *(void *)(v29 + 40) = v31;
        LODWORD(v31) = *(_DWORD *)(result + 48);
        *(_DWORD *)(result + 48) = 0;
        *(_DWORD *)(v29 + 48) = v31;
        int v32 = *(_DWORD *)(result + 52);
        *(_DWORD *)(result + 52) = 0;
      }
      else
      {
        uint64_t v29 = *(void *)(a1 + 40) + 56 * v28;
        *(void *)uint64_t v29 = &unk_1ECABC008;
        *(_OWORD *)(v29 + 8) = *(_OWORD *)(a3 + 8);
        *(void *)uint64_t v29 = off_1ECABC030;
        long long v33 = *(_OWORD *)(a3 + 24);
        *(void *)(a3 + 24) = 0;
        *(_OWORD *)(v29 + 24) = v33;
        *(void *)(v29 + 40) = 0;
        *(void *)(v29 + 48) = 0;
        uint64_t v34 = *(void *)(a3 + 40);
        *(void *)(a3 + 40) = 0;
        *(void *)(v29 + 40) = v34;
        LODWORD(v34) = *(_DWORD *)(a3 + 48);
        *(_DWORD *)(a3 + 48) = 0;
        *(_DWORD *)(v29 + 48) = v34;
        int v32 = *(_DWORD *)(a3 + 52);
        *(_DWORD *)(a3 + 52) = 0;
      }
      *(_DWORD *)(v29 + 52) = v32;
      ++*(_DWORD *)(a1 + 52);
      return result;
    }
    uint64_t v23 = *(void **)(a3 + 40);
    uint64_t v24 = 8 * v22;
    while (1)
    {
      uint64_t v25 = *v23;
      if ((*(unsigned int (**)(void))(*(void *)*v23 + 16))(*v23) == 3) {
        break;
      }
      ++v23;
      v24 -= 8;
      if (!v24) {
        goto LABEL_26;
      }
    }
    char v35 = *(unsigned char *)(v25 + 24);
    if (*(_DWORD *)(a2 + 12))
    {
      uint64_t v36 = (WTF::String *)*(unsigned int *)(a1 + 96);
      *(_DWORD *)(a1 + 96) = v36 + 1;
      WTF::String::number(v36);
      if (v158)
      {
        int v37 = *(_DWORD *)(v158 + 4);
        if (v37 < 0 || (unint64_t v38 = (v37 + 9), __OFADD__(v37, 9)))
        {
          *(void *)&long long v159 = 0;
          goto LABEL_161;
        }
        int v39 = (*(unsigned __int8 *)(v158 + 16) >> 2) & 1;
      }
      else
      {
        int v39 = 1;
        unint64_t v38 = 9;
      }
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v38, v39, (int8x16_t *)"__builtin", 9u, v158, &v159);
      if ((void)v159)
      {
        uint64_t v104 = (_DWORD *)v158;
        uint64_t v158 = 0;
        if (v104)
        {
          if (*v104 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v104 -= 2;
          }
        }
        WGSL::EntryPointRewriter::materialize(a1, a2, a3, 1, (int **)&v159);
        uint64_t v106 = v159;
        if ((void)v159) {
          *(_DWORD *)v159 += 2;
        }
        uint64_t v151 = off_1ECABC030;
        long long v152 = 0uLL;
        *(void *)&long long v153 = v106;
        uint64_t v107 = *(void *)(a3 + 32);
        uint64_t v108 = *(unsigned int *)(a3 + 52);
        unint64_t v154 = 0;
        int v155 = 0;
        *((void *)&v153 + 1) = v107;
        int v156 = v108;
        if (v108)
        {
          if (v108 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x182551330);
          }
          uint64_t v109 = (WTF *)WTF::fastMalloc((WTF *)(8 * v108));
          int v155 = v108;
          unint64_t v154 = v109;
          uint64_t v110 = *(unsigned int *)(a3 + 52);
          if (v110)
          {
            uint64_t v111 = *(void *)(a3 + 40);
            unint64_t v112 = (v110 - 1) & 0x1FFFFFFFFFFFFFFFLL;
            if (v112 < 3)
            {
              uint8x8_t v113 = *(uint64_t **)(a3 + 40);
            }
            else
            {
              uint8x8_t v113 = *(uint64_t **)(a3 + 40);
              if ((unint64_t)v109 - v111 >= 0x20)
              {
                unint64_t v114 = v112 + 1;
                uint64_t v115 = 8 * (v114 & 0x3FFFFFFFFFFFFFFCLL);
                uint64_t v116 = (WTF *)((char *)v109 + v115);
                uint8x8_t v113 = (uint64_t *)(v111 + v115);
                long long v117 = (long long *)(v111 + 16);
                uint64_t v118 = (_OWORD *)((char *)v109 + 16);
                uint64_t v119 = v114 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v120 = *v117;
                  *(v118 - 1) = *(v117 - 1);
                  *uint64_t v118 = v120;
                  v117 += 2;
                  v118 += 2;
                  v119 -= 4;
                }
                while (v119);
                uint64_t v109 = v116;
                if (v114 == (v114 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_133;
                }
              }
            }
            __int16 v121 = (uint64_t *)(v111 + 8 * v110);
            do
            {
              uint64_t v122 = *v113++;
              *(void *)uint64_t v109 = v122;
              uint64_t v109 = (WTF *)((char *)v109 + 8);
            }
            while (v113 != v121);
          }
        }
LABEL_133:
        __n128 v123 = (void *)(a1 + 24);
        char v157 = v35;
        uint64_t v124 = *(unsigned int *)(a1 + 36);
        if (v124 == *(_DWORD *)(a1 + 32))
        {
          unint64_t v125 = WTF::Vector<WGSL::EntryPointRewriter::BuiltinMemberOrParameter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v123, v124 + 1, (unint64_t)&v151);
          unint64_t v126 = *(void *)(a1 + 24) + ((unint64_t)*(unsigned int *)(a1 + 36) << 6);
          *(void *)unint64_t v126 = &unk_1ECABC008;
          *(_OWORD *)(v126 + 8) = *(_OWORD *)(v125 + 8);
          *(void *)unint64_t v126 = off_1ECABC030;
          long long v127 = *(_OWORD *)(v125 + 24);
          *(void *)(v125 + 24) = 0;
          *(_OWORD *)(v126 + 24) = v127;
          *(void *)(v126 + 40) = 0;
          *(void *)(v126 + 48) = 0;
          uint64_t v128 = *(void *)(v125 + 40);
          *(void *)(v125 + 40) = 0;
          *(void *)(v126 + 40) = v128;
          LODWORD(v128) = *(_DWORD *)(v125 + 48);
          *(_DWORD *)(v125 + 48) = 0;
          *(_DWORD *)(v126 + 48) = v128;
          LODWORD(v128) = *(_DWORD *)(v125 + 52);
          *(_DWORD *)(v125 + 52) = 0;
          *(_DWORD *)(v126 + 52) = v128;
          unint64_t v129 = (char *)(v126 + 56);
          unint64_t v130 = (char *)(v125 + 56);
        }
        else
        {
          unint64_t v130 = &v157;
          uint64_t v131 = *v123 + (v124 << 6);
          *(void *)uint64_t v131 = &unk_1ECABC008;
          *(_OWORD *)(v131 + 8) = v152;
          *(void *)uint64_t v131 = off_1ECABC030;
          long long v132 = v153;
          *(void *)&long long v153 = 0;
          *(_OWORD *)(v131 + 24) = v132;
          *(void *)(v131 + 40) = 0;
          *(void *)(v131 + 48) = 0;
          uint64_t v133 = v154;
          unint64_t v154 = 0;
          *(void *)(v131 + 40) = v133;
          LODWORD(v133) = v155;
          int v155 = 0;
          *(_DWORD *)(v131 + 48) = v133;
          LODWORD(v133) = v156;
          int v156 = 0;
          *(_DWORD *)(v131 + 52) = v133;
          unint64_t v129 = (char *)(v131 + 56);
        }
        *unint64_t v129 = *v130;
        ++*(_DWORD *)(a1 + 36);
        unint64_t v134 = v154;
        if (v154)
        {
          unint64_t v154 = 0;
          int v155 = 0;
          WTF::fastFree(v134, v105);
        }
        uint8x8_t v135 = (_DWORD *)v153;
        uint64_t v151 = off_1ECABC030;
        *(void *)&long long v153 = 0;
        if (v135)
        {
          if (*v135 == 2)
          {
            WTF::StringImpl::destroy();
            uint64_t result = v159;
            *(void *)&long long v159 = 0;
            if (!result) {
              return result;
            }
LABEL_144:
            int v136 = *(_DWORD *)result - 2;
            if (*(_DWORD *)result != 2) {
              goto LABEL_145;
            }
            return WTF::StringImpl::destroy();
          }
          *v135 -= 2;
        }
        uint64_t result = v159;
        *(void *)&long long v159 = 0;
        if (!result) {
          return result;
        }
        goto LABEL_144;
      }
LABEL_161:
      __break(0xC471u);
      JUMPOUT(0x182551310);
    }
    long long v152 = *(_OWORD *)(a3 + 8);
    uint64_t v151 = off_1ECABC030;
    uint64_t v89 = *(_DWORD **)(a3 + 24);
    if (v89) {
      *v89 += 2;
    }
    uint64_t v90 = *(void *)(a3 + 32);
    *(void *)&long long v153 = v89;
    *((void *)&v153 + 1) = v90;
    uint64_t v91 = *(unsigned int *)(a3 + 52);
    unint64_t v154 = 0;
    int v155 = 0;
    int v156 = v91;
    if (v91)
    {
      if (v91 >> 29)
      {
        __break(0xC471u);
LABEL_167:
        JUMPOUT(0x1825512FCLL);
      }
      long long v92 = (WTF *)WTF::fastMalloc((WTF *)(8 * v91));
      int v155 = v91;
      unint64_t v154 = v92;
      uint64_t v93 = *(unsigned int *)(a3 + 52);
      if (v93)
      {
        uint64_t v94 = *(void *)(a3 + 40);
        unint64_t v95 = (v93 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        if (v95 < 3)
        {
          long long v96 = *(uint64_t **)(a3 + 40);
        }
        else
        {
          long long v96 = *(uint64_t **)(a3 + 40);
          if ((unint64_t)v92 - v94 >= 0x20)
          {
            unint64_t v97 = v95 + 1;
            uint64_t v98 = 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v99 = (WTF *)((char *)v92 + v98);
            long long v96 = (uint64_t *)(v94 + v98);
            unint64_t v100 = (long long *)(v94 + 16);
            unint64_t v101 = (_OWORD *)((char *)v92 + 16);
            uint64_t v102 = v97 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v103 = *v100;
              *(v101 - 1) = *(v100 - 1);
              *unint64_t v101 = v103;
              v100 += 2;
              v101 += 2;
              v102 -= 4;
            }
            while (v102);
            long long v92 = v99;
            if (v97 == (v97 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_149;
            }
          }
        }
        uint64_t v137 = (uint64_t *)(v94 + 8 * v93);
        do
        {
          uint64_t v138 = *v96++;
          *(void *)long long v92 = v138;
          long long v92 = (WTF *)((char *)v92 + 8);
        }
        while (v96 != v137);
      }
    }
LABEL_149:
    uint64_t v139 = (void *)(a1 + 24);
    char v157 = v35;
    uint64_t v140 = *(unsigned int *)(a1 + 36);
    if (v140 == *(_DWORD *)(a1 + 32))
    {
      unint64_t v141 = WTF::Vector<WGSL::EntryPointRewriter::BuiltinMemberOrParameter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v139, v140 + 1, (unint64_t)&v151);
      unint64_t v142 = *(void *)(a1 + 24) + ((unint64_t)*(unsigned int *)(a1 + 36) << 6);
      *(void *)unint64_t v142 = &unk_1ECABC008;
      *(_OWORD *)(v142 + 8) = *(_OWORD *)(v141 + 8);
      *(void *)unint64_t v142 = off_1ECABC030;
      long long v143 = *(_OWORD *)(v141 + 24);
      *(void *)(v141 + 24) = 0;
      *(_OWORD *)(v142 + 24) = v143;
      *(void *)(v142 + 40) = 0;
      *(void *)(v142 + 48) = 0;
      uint64_t v144 = *(void *)(v141 + 40);
      *(void *)(v141 + 40) = 0;
      *(void *)(v142 + 40) = v144;
      LODWORD(v144) = *(_DWORD *)(v141 + 48);
      *(_DWORD *)(v141 + 48) = 0;
      *(_DWORD *)(v142 + 48) = v144;
      LODWORD(v144) = *(_DWORD *)(v141 + 52);
      *(_DWORD *)(v141 + 52) = 0;
      *(_DWORD *)(v142 + 52) = v144;
      uint64_t v145 = (char *)(v142 + 56);
      uint64_t v146 = (char *)(v141 + 56);
    }
    else
    {
      uint64_t v146 = &v157;
      uint64_t v147 = *v139 + (v140 << 6);
      *(void *)uint64_t v147 = &unk_1ECABC008;
      *(_OWORD *)(v147 + 8) = v152;
      *(void *)uint64_t v147 = off_1ECABC030;
      long long v148 = v153;
      *(void *)&long long v153 = 0;
      *(_OWORD *)(v147 + 24) = v148;
      *(void *)(v147 + 40) = 0;
      *(void *)(v147 + 48) = 0;
      unint64_t v149 = v154;
      unint64_t v154 = 0;
      *(void *)(v147 + 40) = v149;
      LODWORD(v149) = v155;
      int v155 = 0;
      *(_DWORD *)(v147 + 48) = v149;
      LODWORD(v149) = v156;
      int v156 = 0;
      *(_DWORD *)(v147 + 52) = v149;
      uint64_t v145 = (char *)(v147 + 56);
    }
    *uint64_t v145 = *v146;
    ++*(_DWORD *)(a1 + 36);
    int8x16x2_t v150 = v154;
    if (v154)
    {
      unint64_t v154 = 0;
      int v155 = 0;
      WTF::fastFree(v150, v26);
    }
    uint64_t result = v153;
    uint64_t v151 = off_1ECABC030;
    *(void *)&long long v153 = 0;
    if (!result) {
      return result;
    }
    int v136 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result != 2)
    {
LABEL_145:
      *(_DWORD *)uint64_t result = v136;
      return result;
    }
    return WTF::StringImpl::destroy();
  }
  uint64_t v8 = *(void *)(a1 + 8);
  long long v159 = 0uLL;
  unint64_t v9 = *(_DWORD **)(a3 + 24);
  if (v9) {
    *v9 += 2;
  }
  uint64_t v10 = (uint64_t *)(v8 + 312);
  uint64_t v151 = off_1ECABC030;
  long long v152 = 0uLL;
  *(void *)&long long v153 = v9;
  uint64_t v11 = *(void *)(v8 + 312);
  if ((unint64_t)(*(void *)(v8 + 320) - v11) <= 0xB7)
  {
    WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v8 + 312));
    uint64_t v11 = *v10;
  }
  *(void *)(v11 + 8) = 0;
  *(void *)(v11 + 16) = 0;
  *(void *)uint64_t v11 = &unk_1ECABC8D8;
  long long v12 = v152;
  *(_OWORD *)(v11 + 32) = v152;
  *(void *)(v11 + 24) = off_1ECABC030;
  char v13 = (_DWORD *)v153;
  *(void *)&long long v153 = 0;
  *(_OWORD *)(v11 + 64) = v12;
  *(void *)(v11 + 48) = v13;
  *(void *)(v11 + 56) = off_1ECABC030;
  if (v13) {
    *v13 += 2;
  }
  *(void *)(v11 + 80) = v13;
  *(void *)(v11 + 88) = 0;
  *(void *)(v11 + 96) = 0;
  *(void *)(v11 + 104) = 0;
  *(void *)(v11 + 112) = v6;
  *(void *)(v11 + 120) = 0;
  *(_WORD *)(v11 + 128) = 3;
  *(unsigned char *)(v11 + 160) = 0;
  *(unsigned char *)(v11 + 164) = 0;
  *(unsigned char *)(v11 + 168) = 0;
  *(unsigned char *)(v11 + 172) = 0;
  *(unsigned char *)(v11 + 176) = 0;
  *(void *)(v11 + 149) = 0;
  *(void *)(v11 + 136) = 0;
  *(void *)(v11 + 144) = 0;
  *(void *)(v11 + 144) = *(void *)(v6 + 24);
  *(void *)(v8 + 312) += 184;
  unint64_t v14 = *(unsigned int *)(v8 + 356);
  if (v14 == *(_DWORD *)(v8 + 352))
  {
    unint64_t v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10) {
      unint64_t v16 = v15 + 1;
    }
    else {
      unint64_t v16 = 16;
    }
    if (v16 <= v14 + 1) {
      unint64_t v17 = v14 + 1;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x182551318);
    }
    unint64_t v18 = *(void **)(v8 + 344);
    unint64_t v19 = (void *)WTF::fastMalloc((WTF *)(8 * v17));
    *(_DWORD *)(v8 + 352) = v17;
    *(void *)(v8 + 344) = v19;
    memcpy(v19, v18, 8 * v14);
    uint64_t v10 = (uint64_t *)(v8 + 312);
    if (v18)
    {
      if (*(void **)(v8 + 344) == v18)
      {
        *(void *)(v8 + 344) = 0;
        *(_DWORD *)(v8 + 352) = 0;
      }
      WTF::fastFree((WTF *)v18, v20);
    }
    unint64_t v14 = *(unsigned int *)(v8 + 356);
    uint64_t v21 = (uint64_t *)(*(void *)(v8 + 344) + 8 * v14);
  }
  else
  {
    uint64_t v21 = (uint64_t *)(*(void *)(v8 + 344) + 8 * v14);
  }
  uint64_t *v21 = v11;
  *(_DWORD *)(v8 + 356) = v14 + 1;
  uint64_t v40 = WGSL::AST::Builder::construct<WGSL::AST::VariableStatement,WGSL::SourceSpan,WGSL::AST::Variable &,void>(v10, &v159, v11);
  unint64_t v41 = *(unsigned int *)(a1 + 68);
  if (v41 == *(_DWORD *)(a1 + 64))
  {
    unint64_t v42 = v41 + (v41 >> 2);
    if (v42 >= 0x10) {
      unint64_t v43 = v42 + 1;
    }
    else {
      unint64_t v43 = 16;
    }
    if (v43 <= v41 + 1) {
      unint64_t v44 = v41 + 1;
    }
    else {
      unint64_t v44 = v43;
    }
    if (v44 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x182551320);
    }
    uint64_t v45 = *(void **)(a1 + 56);
    uint64_t v46 = (void *)WTF::fastMalloc((WTF *)(8 * v44));
    *(_DWORD *)(a1 + 64) = v44;
    *(void *)(a1 + 56) = v46;
    memcpy(v46, v45, 8 * v41);
    if (v45)
    {
      if (*(void **)(a1 + 56) == v45)
      {
        *(void *)(a1 + 56) = 0;
        *(_DWORD *)(a1 + 64) = 0;
      }
      WTF::fastFree((WTF *)v45, v47);
    }
    unint64_t v41 = *(unsigned int *)(a1 + 68);
    unint64_t v48 = (void *)(*(void *)(a1 + 56) + 8 * v41);
  }
  else
  {
    unint64_t v48 = (void *)(*(void *)(a1 + 56) + 8 * v41);
  }
  *unint64_t v48 = v40;
  *(_DWORD *)(a1 + 68) = v41 + 1;
  int v49 = (_DWORD *)v153;
  uint64_t v151 = off_1ECABC030;
  *(void *)&long long v153 = 0;
  if (!v49)
  {
LABEL_53:
    unint64_t v50 = *(unsigned int *)(a2 + 12);
    if (v50 == *(_DWORD *)(a2 + 8)) {
      goto LABEL_54;
    }
LABEL_70:
    uint64_t v63 = *(void **)a2;
    int v64 = *(_DWORD **)(a3 + 24);
    if (v64) {
      *v64 += 2;
    }
    v63[v50] = v64;
    unsigned int v60 = v50 + 1;
    *(_DWORD *)(a2 + 12) = v50 + 1;
    uint64_t v61 = *(void *)v7;
    uint64_t v62 = *(unsigned int *)(*(void *)v7 + 84);
    if (!v62) {
      goto LABEL_96;
    }
    goto LABEL_73;
  }
  if (*v49 != 2)
  {
    *v49 -= 2;
    goto LABEL_53;
  }
  WTF::StringImpl::destroy();
  unint64_t v50 = *(unsigned int *)(a2 + 12);
  if (v50 != *(_DWORD *)(a2 + 8)) {
    goto LABEL_70;
  }
LABEL_54:
  unint64_t v51 = v50 + (v50 >> 2);
  if (v51 >= 0x10) {
    unint64_t v52 = v51 + 1;
  }
  else {
    unint64_t v52 = 16;
  }
  if (v52 <= v50 + 1) {
    unint64_t v53 = v50 + 1;
  }
  else {
    unint64_t v53 = v52;
  }
  if (v53 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x182551328);
  }
  unint64_t v54 = *(void **)a2;
  unint64_t v55 = (void *)WTF::fastMalloc((WTF *)(8 * v53));
  *(_DWORD *)(a2 + 8) = v53;
  *(void *)a2 = v55;
  memcpy(v55, v54, 8 * v50);
  if (v54)
  {
    if (*(void **)a2 == v54)
    {
      *(void *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
    }
    WTF::fastFree((WTF *)v54, v56);
  }
  uint64_t v57 = *(unsigned int *)(a2 + 12);
  uint64_t v58 = *(void **)a2;
  unint64_t v59 = *(_DWORD **)(a3 + 24);
  if (v59) {
    *v59 += 2;
  }
  v58[v57] = v59;
  unsigned int v60 = v57 + 1;
  *(_DWORD *)(a2 + 12) = v57 + 1;
  uint64_t v61 = *(void *)v7;
  uint64_t v62 = *(unsigned int *)(*(void *)v7 + 84);
  if (v62)
  {
LABEL_73:
    uint64_t v65 = *(uint64_t **)(v61 + 72);
    uint64_t v66 = &v65[v62];
    while (1)
    {
      uint64_t v67 = *v65;
      long long v152 = *(_OWORD *)(*v65 + 32);
      uint64_t v151 = off_1ECABC030;
      uint64_t v68 = *(_DWORD **)(v67 + 48);
      if (v68) {
        *v68 += 2;
      }
      uint64_t v69 = *(void *)(v67 + 104);
      *(void *)&long long v153 = v68;
      *((void *)&v153 + 1) = v69;
      uint64_t v70 = *(unsigned int *)(v67 + 100);
      unint64_t v154 = 0;
      int v155 = 0;
      int v156 = v70;
      if (v70)
      {
        if (v70 >> 29)
        {
          __break(0xC471u);
          goto LABEL_167;
        }
        BOOL v71 = (WTF *)WTF::fastMalloc((WTF *)(8 * v70));
        int v155 = v70;
        unint64_t v154 = v71;
        uint64_t v72 = *(unsigned int *)(v67 + 100);
        if (v72)
        {
          uint64_t v73 = *(void *)(v67 + 88);
          unint64_t v74 = (v72 - 1) & 0x1FFFFFFFFFFFFFFFLL;
          if (v74 < 3)
          {
            uint64_t v75 = *(uint64_t **)(v67 + 88);
          }
          else
          {
            uint64_t v75 = *(uint64_t **)(v67 + 88);
            if ((unint64_t)v71 - v73 >= 0x20)
            {
              unint64_t v76 = v74 + 1;
              uint64_t v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v78 = (WTF *)((char *)v71 + v77);
              uint64_t v75 = (uint64_t *)(v73 + v77);
              uint64_t v79 = (long long *)(v73 + 16);
              uint64_t v80 = (_OWORD *)((char *)v71 + 16);
              uint64_t v81 = v76 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v82 = *v79;
                *(v80 - 1) = *(v79 - 1);
                _OWORD *v80 = v82;
                v79 += 2;
                v80 += 2;
                v81 -= 4;
              }
              while (v81);
              BOOL v71 = v78;
              if (v76 == (v76 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_90;
              }
            }
          }
          uint64_t v83 = (uint64_t *)(v73 + 8 * v72);
          do
          {
            uint64_t v84 = *v75++;
            *(void *)BOOL v71 = v84;
            BOOL v71 = (WTF *)((char *)v71 + 8);
          }
          while (v75 != v83);
        }
      }
LABEL_90:
      WGSL::EntryPointRewriter::visit(a1, a2, &v151);
      uint64_t v86 = v154;
      if (v154)
      {
        unint64_t v154 = 0;
        int v155 = 0;
        WTF::fastFree(v86, v85);
      }
      uint64_t v87 = (_DWORD *)v153;
      uint64_t v151 = off_1ECABC030;
      *(void *)&long long v153 = 0;
      if (v87)
      {
        if (*v87 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v87 -= 2;
        }
      }
      if (++v65 == v66)
      {
        unsigned int v60 = *(_DWORD *)(a2 + 12);
        break;
      }
    }
  }
LABEL_96:
  if (!v60)
  {
    __break(0xC471u);
    JUMPOUT(0x182551304);
  }
  uint64_t v88 = v60 - 1;
  uint64_t result = *(void *)(*(void *)a2 + 8 * v88);
  *(void *)(*(void *)a2 + 8 * v88) = 0;
  if (!result) {
    goto LABEL_100;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
LABEL_100:
    *(_DWORD *)(a2 + 12) = v88;
    return result;
  }
  uint64_t result = WTF::StringImpl::destroy();
  *(_DWORD *)(a2 + 12) = v88;
  return result;
}

void WGSL::EntryPointRewriter::checkReturnType(void)::$_0::operator()(uint64_t ***a1, char a2, int8x16_t *a3, uint64_t a4)
{
  char v140 = a2;
  uint64_t v6 = a1[1];
  uint64_t v7 = ***a1;
  long long v138 = *(_OWORD *)(v7 + 32);
  uint64_t v137 = off_1ECABC030;
  uint64_t v8 = *(void *)(v7 + 48);
  if (v8)
  {
    *(_DWORD *)v8 += 2;
    uint64_t v139 = (_DWORD *)v8;
    if (a4) {
      unint64_t v9 = a4 - 1;
    }
    else {
      unint64_t v9 = 0;
    }
    if (v9 >> 31) {
      goto LABEL_148;
    }
    LODWORD(v10) = *(_DWORD *)(v8 + 4);
  }
  else
  {
    uint64_t v139 = 0;
    if (a4) {
      unint64_t v9 = a4 - 1;
    }
    else {
      unint64_t v9 = 0;
    }
    unint64_t v10 = v9 >> 31;
    if (v9 >> 31) {
      goto LABEL_148;
    }
  }
  int v11 = v9 + 1;
  BOOL v12 = __OFADD__(v9, 1);
  if ((v10 & 0x80000000) != 0) {
    goto LABEL_147;
  }
  if (v12) {
    goto LABEL_147;
  }
  BOOL v13 = __OFADD__(v10, v11);
  int v14 = v10 + v11;
  if (v13) {
    goto LABEL_147;
  }
  uint64_t v15 = (v14 + 2);
  if (__OFADD__(v14, 2)) {
    goto LABEL_147;
  }
  if (v8 && (*(unsigned char *)(v8 + 16) & 4) == 0)
  {
    if (v14 != -2)
    {
      if (v15 <= 0x7FFFFFEF)
      {
        WTF::tryFastCompactMalloc((WTF *)(2 * v15 + 20));
        unint64_t v16 = v132;
        if (v132)
        {
          *(_DWORD *)long long v132 = 2;
          *((_DWORD *)v16 + 1) = v15;
          v16[1] = (void (*)(WGSL::AST::Identifier *__hidden))((char *)v16 + 20);
          v16[2] = (void (*)(WGSL::AST::Identifier *__hidden))0x5F005F00000000;
          unint64_t v17 = v16 + 3;
          unint64_t v18 = *(int8x16_t **)(v8 + 8);
          uint64_t v19 = *(unsigned int *)(v8 + 4);
          if ((*(unsigned char *)(v8 + 16) & 4) == 0)
          {
            if (v19)
            {
              if (v19 == 1) {
                _WORD *v17 = v18->i16[0];
              }
              else {
                memcpy(v16 + 3, v18, 2 * v19);
              }
            }
LABEL_74:
            uint64_t v53 = *(unsigned int *)(v8 + 4);
            unint64_t v54 = &v17[v53];
            *unint64_t v54 = 95;
            unint64_t v55 = (unint64_t)(v54 + 1);
            unint64_t v56 = (_WORD *)(v55 + 2 * v9);
            if ((v9 & 0xFFFFFFC0) != 0)
            {
              unint64_t v57 = v55 + 2 * (v9 & 0xFFFFFFC0);
              long long v58 = 0uLL;
              do
              {
                v142.val[0] = *a3;
                int8x16_t v59 = a3[1];
                v144.val[0] = a3[2];
                int8x16_t v60 = a3[3];
                a3 += 4;
                int8x16_t v61 = v60;
                v144.val[1] = 0uLL;
                v146.val[0] = v59;
                v142.val[1] = 0uLL;
                uint64_t v62 = (char *)v55;
                vst2q_s8(v62, v142);
                v62 += 32;
                v146.val[1] = 0uLL;
                vst2q_s8(v62, v146);
                uint64_t v63 = (char *)(v55 + 64);
                vst2q_s8(v63, v144);
                int v64 = (char *)(v55 + 96);
                vst2q_s8(v64, *(int8x16x2_t *)(&v58 - 1));
                v55 += 128;
              }
              while (v55 != v57);
              unint64_t v55 = v57;
            }
            if ((_WORD *)v55 == v56) {
              goto LABEL_84;
            }
            unint64_t v65 = (unint64_t)v16 + 2 * v9 + 2 * v53 - v55 + 24;
            if (v65 < 0xE
              || v55 < (unint64_t)a3->u64 + (v65 >> 1) + 1
              && (unint64_t)a3 < (v65 & 0xFFFFFFFFFFFFFFFELL) + v55 + 2)
            {
              uint64_t v66 = (_WORD *)v55;
              uint64_t v67 = a3;
              goto LABEL_83;
            }
            uint64_t v95 = (v65 >> 1) + 1;
            if (v65 >= 0x3E)
            {
              unint64_t v96 = v95 & 0xFFFFFFFFFFFFFFE0;
              unint64_t v97 = (uint8x8_t *)&a3[1];
              uint64_t v98 = (uint16x8_t *)(v55 + 32);
              unint64_t v99 = v95 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                uint8x16_t v100 = *(uint8x16_t *)v97[-2].i8;
                uint16x8_t v101 = vmovl_u8(*v97);
                uint16x8_t v102 = vmovl_high_u8(*(uint8x16_t *)v97->i8);
                v98[-2] = vmovl_u8(*(uint8x8_t *)v100.i8);
                v98[-1] = vmovl_high_u8(v100);
                uint16x8_t *v98 = v101;
                v98[1] = v102;
                v98 += 4;
                v97 += 4;
                v99 -= 32;
              }
              while (v99);
              if (v95 == v96) {
                goto LABEL_84;
              }
              if ((v95 & 0x18) == 0)
              {
                uint64_t v67 = (int8x16_t *)((char *)a3 + v96);
                uint64_t v66 = (_WORD *)(v55 + 2 * v96);
                do
                {
LABEL_83:
                  __int16 v68 = v67->u8[0];
                  uint64_t v67 = (int8x16_t *)((char *)v67 + 1);
                  *v66++ = v68;
                }
                while (v66 != v56);
                goto LABEL_84;
              }
            }
            else
            {
              unint64_t v96 = 0;
            }
            uint64_t v66 = (_WORD *)(v55 + 2 * (v95 & 0xFFFFFFFFFFFFFFF8));
            uint64_t v67 = (int8x16_t *)((char *)a3 + (v95 & 0xFFFFFFFFFFFFFFF8));
            long long v103 = (uint8x8_t *)&a3->i8[v96];
            uint64_t v104 = (uint16x8_t *)(v55 + 2 * v96);
            unint64_t v105 = v96 - (v95 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint8x8_t v106 = *v103++;
              *v104++ = vmovl_u8(v106);
              v105 += 8;
            }
            while (v105);
            if (v95 == (v95 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_84;
            }
            goto LABEL_83;
          }
          uint64_t v28 = &v17[v19];
          if (v19 < 0x40)
          {
            unint64_t v29 = (unint64_t)(v16 + 3);
          }
          else
          {
            unint64_t v29 = (unint64_t)&v17[v19 & 0xFFFFFFC0];
            long long v30 = 0uLL;
            uint64_t v31 = (char *)(v16 + 3);
            do
            {
              v141.val[0] = *v18;
              int8x16_t v32 = v18[1];
              v143.val[0] = v18[2];
              int8x16_t v33 = v18[3];
              v18 += 4;
              int8x16_t v34 = v33;
              v143.val[1] = 0uLL;
              v145.val[0] = v32;
              v141.val[1] = 0uLL;
              char v35 = v31;
              vst2q_s8(v35, v141);
              v35 += 32;
              v145.val[1] = 0uLL;
              vst2q_s8(v35, v145);
              uint64_t v36 = v31 + 64;
              vst2q_s8(v36, v143);
              int v37 = v31 + 96;
              vst2q_s8(v37, *(int8x16x2_t *)(&v30 - 1));
              v31 += 128;
            }
            while (v31 != (char *)v29);
          }
          if ((_WORD *)v29 == v28) {
            goto LABEL_74;
          }
          unint64_t v45 = (unint64_t)v16 + 2 * v19 - v29 + 22;
          if (v45 < 0xE
            || (v29 < (unint64_t)v18->u64 + (v45 >> 1) + 1
              ? (BOOL v46 = (unint64_t)v18 >= (v45 & 0xFFFFFFFFFFFFFFFELL) + v29 + 2)
              : (BOOL v46 = 1),
                !v46))
          {
            int v49 = (_WORD *)v29;
            unint64_t v50 = v18;
            goto LABEL_66;
          }
          uint64_t v47 = (v45 >> 1) + 1;
          if (v45 >= 0x3E)
          {
            unint64_t v48 = v47 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v118 = (uint8x8_t *)&v18[1];
            uint64_t v119 = (uint16x8_t *)(v29 + 32);
            unint64_t v120 = v47 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              uint8x16_t v121 = *(uint8x16_t *)v118[-2].i8;
              uint16x8_t v122 = vmovl_u8(*v118);
              uint16x8_t v123 = vmovl_high_u8(*(uint8x16_t *)v118->i8);
              v119[-2] = vmovl_u8(*(uint8x8_t *)v121.i8);
              v119[-1] = vmovl_high_u8(v121);
              *uint64_t v119 = v122;
              v119[1] = v123;
              v119 += 4;
              v118 += 4;
              v120 -= 32;
            }
            while (v120);
            if (v47 == v48) {
              goto LABEL_74;
            }
            if ((v47 & 0x18) == 0)
            {
              unint64_t v50 = (int8x16_t *)((char *)v18 + v48);
              int v49 = (_WORD *)(v29 + 2 * v48);
              goto LABEL_66;
            }
          }
          else
          {
            unint64_t v48 = 0;
          }
          int v49 = (_WORD *)(v29 + 2 * (v47 & 0xFFFFFFFFFFFFFFF8));
          unint64_t v50 = (int8x16_t *)((char *)v18 + (v47 & 0xFFFFFFFFFFFFFFF8));
          uint64_t v124 = (uint8x8_t *)&v18->i8[v48];
          unint64_t v125 = (uint16x8_t *)(v29 + 2 * v48);
          unint64_t v126 = v48 - (v47 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint8x8_t v127 = *v124++;
            *v125++ = vmovl_u8(v127);
            v126 += 8;
          }
          while (v126);
          if (v47 == (v47 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_74;
          }
          do
          {
LABEL_66:
            __int16 v51 = v50->u8[0];
            unint64_t v50 = (int8x16_t *)((char *)v50 + 1);
            *v49++ = v51;
          }
          while (v49 != v28);
          goto LABEL_74;
        }
      }
LABEL_147:
      __break(0xC471u);
      JUMPOUT(0x182551C44);
    }
    goto LABEL_33;
  }
  if (v14 == -2)
  {
LABEL_33:
    unint64_t v16 = (void (**)(WGSL::AST::Identifier *__hidden))MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
LABEL_84:
    uint64_t v69 = v139;
    uint64_t v137 = off_1ECABC030;
    uint64_t v139 = 0;
    if (v69)
    {
      if (*v69 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v69 -= 2;
      }
    }
    uint64_t v72 = v6[1];
    BOOL v71 = v6 + 1;
    uint64_t v70 = v72;
    long long v136 = 0uLL;
    *(_DWORD *)v16 += 2;
    long long v132 = off_1ECABC030;
    uint64_t v133 = 0;
    uint64_t v134 = 0;
    uint8x8_t v135 = v16;
    uint64_t v73 = **a1;
    uint64_t v74 = *v73;
    uint64_t v75 = *(unsigned int *)(*v73 + 84);
    unint64_t v129 = 0;
    int v130 = 0;
    int v131 = v75;
    if (!v75)
    {
LABEL_100:
      v128[0] = 0;
      v128[1] = 0;
      uint64_t v91 = WGSL::AST::Builder::construct<WGSL::AST::Structure,WGSL::SourceSpan,WGSL::AST::Identifier,WTF::ReferenceWrapperVector<WGSL::AST::StructureMember,0ul>,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WGSL::AST::StructureRole,void>(v70 + 39, &v136, (uint64_t)&v132, (uint64_t *)&v129, (uint64_t *)v128, &v140);
      if (v128[0]) {
        WTF::fastFree(v128[0], v90);
      }
      if (v129) {
        WTF::fastFree(v129, v90);
      }
      long long v92 = v135;
      long long v132 = off_1ECABC030;
      uint8x8_t v135 = 0;
      if (v92)
      {
        if (*(_DWORD *)v92 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *(_DWORD *)v92 -= 2;
        }
      }
      WGSL::ShaderModule::append<WGSL::AST::Structure &,std::reference_wrapper<WGSL::AST::Declaration>,0ul>(*v71, (uint64_t)(*v71 + 8), (uint64_t)v91);
      uint64_t v93 = *v71 + 39;
      long long v136 = 0uLL;
      *(_DWORD *)v16 += 2;
      long long v132 = off_1ECABC030;
      uint64_t v133 = 0;
      uint64_t v134 = 0;
      uint8x8_t v135 = v16;
      WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v93, &v136, (uint64_t)&v132);
      uint64_t v94 = v135;
      long long v132 = off_1ECABC030;
      uint8x8_t v135 = 0;
      if (v94)
      {
        if (*(_DWORD *)v94 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *(_DWORD *)v94 -= 2;
        }
      }
      long long v132 = 0;
      WGSL::TypeStore::allocateType<WGSL::Types::Struct,WGSL::AST::Structure &,WTF::HashMap<WTF::String,WGSL::Type const*,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits> &>();
    }
    if (!(v75 >> 29))
    {
      unint64_t v76 = (WTF *)WTF::fastMalloc((WTF *)(8 * v75));
      int v130 = v75;
      unint64_t v129 = v76;
      uint64_t v77 = *(unsigned int *)(v74 + 84);
      if (!v77) {
        goto LABEL_100;
      }
      uint64_t v78 = *(void *)(v74 + 72);
      unint64_t v79 = (v77 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v79 < 3)
      {
        uint64_t v80 = *(uint64_t **)(v74 + 72);
      }
      else
      {
        uint64_t v80 = *(uint64_t **)(v74 + 72);
        if ((unint64_t)v76 - v78 >= 0x20)
        {
          unint64_t v81 = v79 + 1;
          uint64_t v82 = 8 * (v81 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v83 = (WTF *)((char *)v76 + v82);
          uint64_t v80 = (uint64_t *)(v78 + v82);
          uint64_t v84 = (long long *)(v78 + 16);
          int v85 = (_OWORD *)((char *)v76 + 16);
          uint64_t v86 = v81 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v87 = *v84;
            *(v85 - 1) = *(v84 - 1);
            *int v85 = v87;
            v84 += 2;
            v85 += 2;
            v86 -= 4;
          }
          while (v86);
          unint64_t v76 = v83;
          if (v81 == (v81 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_100;
          }
        }
      }
      uint64_t v88 = (uint64_t *)(v78 + 8 * v77);
      do
      {
        uint64_t v89 = *v80++;
        *(void *)unint64_t v76 = v89;
        unint64_t v76 = (WTF *)((char *)v76 + 8);
      }
      while (v80 != v88);
      goto LABEL_100;
    }
LABEL_148:
    __break(0xC471u);
    JUMPOUT(0x182551C3CLL);
  }
  if ((v15 & 0x80000000) != 0) {
    goto LABEL_147;
  }
  WTF::tryFastCompactMalloc((WTF *)(v15 + 20));
  unint64_t v16 = v132;
  if (!v132) {
    goto LABEL_147;
  }
  *(_DWORD *)long long v132 = 2;
  *((_DWORD *)v16 + 1) = v15;
  *((_WORD *)v16 + 10) = 24415;
  v16[1] = (void (*)(WGSL::AST::Identifier *__hidden))((char *)v16 + 20);
  *((_DWORD *)v16 + 4) = 4;
  uint64_t v20 = (char *)v16 + 22;
  if (!v8)
  {
    *uint64_t v20 = 95;
    uint64_t v27 = (char *)v16 + 23;
    if (!v9) {
      goto LABEL_84;
    }
    goto LABEL_70;
  }
  uint64_t v21 = *(int8x16_t **)(v8 + 8);
  size_t v22 = *(unsigned int *)(v8 + 4);
  if ((*(unsigned char *)(v8 + 16) & 4) != 0)
  {
    if (v22)
    {
      if (v22 == 1) {
        *uint64_t v20 = v21->i8[0];
      }
      else {
        memcpy((char *)v16 + 22, v21, v22);
      }
    }
LABEL_69:
    unint64_t v52 = &v20[*(unsigned int *)(v8 + 4)];
    *unint64_t v52 = 95;
    uint64_t v27 = v52 + 1;
    if (!v9) {
      goto LABEL_84;
    }
LABEL_70:
    if (v9 == 1) {
      unsigned char *v27 = a3->i8[0];
    }
    else {
      memcpy(v27, a3, v9);
    }
    goto LABEL_84;
  }
  uint64_t v23 = &v20[v22];
  if (v22 < 0x10)
  {
    unint64_t v24 = (unint64_t)v16 + 22;
    if (v20 == v23) {
      goto LABEL_69;
    }
  }
  else
  {
    unint64_t v24 = (unint64_t)&v20[v22 & 0xFFFFFFF0];
    uint64_t v25 = (unsigned long long *)((char *)v16 + 22);
    do
    {
      unsigned long long v26 = (unsigned __int128)vld2q_s8(v21->i8);
      v21 += 2;
      *v25++ = v26;
    }
    while (v25 != (unsigned long long *)v24);
    if ((unsigned char *)v24 == v23) {
      goto LABEL_69;
    }
  }
  size_t v38 = (size_t)v16 + v22;
  unint64_t v39 = (unint64_t)v16 + v22 - v24 + 22;
  if (v39 < 8
    || (v24 < (unint64_t)&v21[2].u64[1] + 2 * v38 + -2 * v24 + 4
      ? (BOOL v40 = (unint64_t)v21 >= v38 + 22)
      : (BOOL v40 = 1),
        !v40))
  {
    unint64_t v42 = (unsigned char *)v24;
    unint64_t v43 = v21;
    goto LABEL_53;
  }
  if (v39 >= 0x20)
  {
    unint64_t v41 = v39 & 0xFFFFFFFFFFFFFFE0;
    uint64_t v107 = v21 + 2;
    uint64_t v108 = (int8x16_t *)(v24 + 16);
    unint64_t v109 = v39 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      int8x16_t v111 = v107[-2];
      int8x16_t v110 = v107[-1];
      int8x16_t v113 = *v107;
      int8x16_t v112 = v107[1];
      v107 += 4;
      v108[-1] = vuzp1q_s8(v111, v110);
      *uint64_t v108 = vuzp1q_s8(v113, v112);
      v108 += 2;
      v109 -= 32;
    }
    while (v109);
    if (v39 == v41) {
      goto LABEL_69;
    }
    if ((v39 & 0x18) == 0)
    {
      unint64_t v43 = (int8x16_t *)((char *)v21 + 2 * v41);
      unint64_t v42 = (unsigned char *)(v24 + v41);
      goto LABEL_53;
    }
  }
  else
  {
    unint64_t v41 = 0;
  }
  unint64_t v42 = (unsigned char *)(v24 + (v39 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v43 = (int8x16_t *)((char *)v21 + 2 * (v39 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v114 = (int16x8_t *)((char *)v21 + 2 * v41);
  uint64_t v115 = (int8x8_t *)(v24 + v41);
  unint64_t v116 = v41 - (v39 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    int16x8_t v117 = *v114++;
    *v115++ = vmovn_s16(v117);
    v116 += 8;
  }
  while (v116);
  if (v39 == (v39 & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_69;
  }
  do
  {
LABEL_53:
    char v44 = v43->i8[0];
    unint64_t v43 = (int8x16_t *)((char *)v43 + 2);
    *v42++ = v44;
  }
  while (v42 != v23);
  goto LABEL_69;
}

void *WGSL::AST::Builder::construct<WGSL::AST::Structure,WGSL::SourceSpan,WGSL::AST::Identifier,WTF::ReferenceWrapperVector<WGSL::AST::StructureMember,0ul>,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WGSL::AST::StructureRole,void>(void *this, _OWORD *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, char *a6)
{
  int v11 = this;
  uint64_t v12 = *this;
  if (this[1] - *this <= 0x8FuLL)
  {
    this = (void *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    uint64_t v12 = *v11;
  }
  char v13 = *a6;
  *(_OWORD *)(v12 + 8) = *a2;
  *(void *)uint64_t v12 = &unk_1ECABC718;
  *(void *)(v12 + 24) = &unk_1ECABC008;
  *(_OWORD *)(v12 + 32) = *(_OWORD *)(a3 + 8);
  *(void *)(v12 + 24) = off_1ECABC030;
  uint64_t v14 = *(void *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(v12 + 56) = 0;
  *(void *)(v12 + 64) = 0;
  *(void *)(v12 + 48) = v14;
  uint64_t v15 = *a5;
  *a5 = 0;
  *(void *)(v12 + 56) = v15;
  LODWORD(v15) = *((_DWORD *)a5 + 2);
  *((_DWORD *)a5 + 2) = 0;
  *(_DWORD *)(v12 + 64) = v15;
  LODWORD(v15) = *((_DWORD *)a5 + 3);
  *((_DWORD *)a5 + 3) = 0;
  *(_DWORD *)(v12 + 68) = v15;
  *(void *)(v12 + 72) = 0;
  *(void *)(v12 + 80) = 0;
  uint64_t v16 = *a4;
  *a4 = 0;
  *(void *)(v12 + 72) = v16;
  LODWORD(v16) = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = 0;
  *(_DWORD *)(v12 + 80) = v16;
  LODWORD(v16) = *((_DWORD *)a4 + 3);
  *((_DWORD *)a4 + 3) = 0;
  *(_DWORD *)(v12 + 84) = v16;
  *(unsigned char *)(v12 + 88) = v13;
  *(unsigned char *)(v12 + 124) = 0;
  *(unsigned char *)(v12 + 128) = 0;
  *(unsigned char *)(v12 + 132) = 0;
  *(unsigned char *)(v12 + 136) = 0;
  *(void *)(v12 + 104) = 0;
  *(void *)(v12 + 112) = 0;
  *(void *)(v12 + 96) = 0;
  *(unsigned char *)(v12 + 120) = 0;
  *v11 += 144;
  unint64_t v17 = *((unsigned int *)v11 + 11);
  if (v17 != *((_DWORD *)v11 + 10))
  {
    unint64_t v24 = (void *)(v11[4] + 8 * v17);
LABEL_17:
    *unint64_t v24 = v12;
    *((_DWORD *)v11 + 11) = v17 + 1;
    return (void *)v12;
  }
  unint64_t v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10) {
    unint64_t v19 = v18 + 1;
  }
  else {
    unint64_t v19 = 16;
  }
  if (v19 <= v17 + 1) {
    unint64_t v20 = v17 + 1;
  }
  else {
    unint64_t v20 = v19;
  }
  if (!(v20 >> 29))
  {
    uint64_t v21 = (void *)v11[4];
    size_t v22 = (void *)WTF::fastMalloc((WTF *)(8 * v20));
    *((_DWORD *)v11 + 10) = v20;
    v11[4] = v22;
    memcpy(v22, v21, 8 * v17);
    if (v21)
    {
      if ((void *)v11[4] == v21)
      {
        v11[4] = 0;
        *((_DWORD *)v11 + 10) = 0;
      }
      WTF::fastFree((WTF *)v21, v23);
    }
    unint64_t v17 = *((unsigned int *)v11 + 11);
    unint64_t v24 = (void *)(v11[4] + 8 * v17);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

void *WGSL::ShaderModule::append<WGSL::AST::Structure &,std::reference_wrapper<WGSL::AST::Declaration>,0ul>(void *result, uint64_t a2, uint64_t a3)
{
  int v5 = result;
  unint64_t v6 = *(unsigned int *)(a2 + 12);
  if (v6 == *(_DWORD *)(a2 + 8))
  {
    unint64_t v7 = v6 + (v6 >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 <= v6 + 1) {
      unint64_t v9 = v6 + 1;
    }
    else {
      unint64_t v9 = v8;
    }
    if (v9 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    unint64_t v10 = *(void **)a2;
    int v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(a2 + 8) = v9;
    *(void *)a2 = v11;
    memcpy(v11, v10, 8 * v6);
    if (v10)
    {
      if (*(void **)a2 == v10)
      {
        *(void *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v10, v12);
    }
    unint64_t v6 = *(unsigned int *)(a2 + 12);
    char v13 = (void *)(*(void *)a2 + 8 * v6);
  }
  else
  {
    char v13 = (void *)(*(void *)a2 + 8 * v6);
  }
  *char v13 = a3;
  *(_DWORD *)(a2 + 12) = v6 + 1;
  uint64_t result = v5 + 50;
  unint64_t v14 = *((unsigned int *)v5 + 103);
  if (v14 == *((_DWORD *)v5 + 102))
  {
    unint64_t v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10) {
      unint64_t v16 = v15 + 1;
    }
    else {
      unint64_t v16 = 16;
    }
    if (v16 <= v14 + 1) {
      unint64_t v17 = v14 + 1;
    }
    else {
      unint64_t v17 = v16;
    }
    uint64_t result = (void *)WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)result, v17);
    unint64_t v14 = *((unsigned int *)v5 + 103);
    unint64_t v18 = (void *)(v5[50] + 32 * v14);
  }
  else
  {
    unint64_t v18 = (void *)(*result + 32 * v14);
  }
  void *v18 = &unk_1ECABC748;
  v18[1] = a2;
  v18[3] = v18;
  *((_DWORD *)v5 + 103) = v14 + 1;
  return result;
}

_DWORD *WGSL::ShaderModule::replace<WGSL::AST::IdentifierExpression const,WGSL::AST::IdentifierExpression>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v49 = *(_OWORD *)(a2 + 8);
  uint64_t v50 = *(void *)(a2 + 24);
  uint64_t v7 = a2 + 32;
  v51[0] = 0;
  unsigned __int8 v53 = 0;
  int v8 = *(unsigned __int8 *)(a2 + 56);
  if (*(unsigned char *)(a2 + 56))
  {
    int v52 = -1;
    uint64_t v3 = *(unsigned int *)(a2 + 48);
    if (v3 != -1)
    {
      ((void (*)(uint64_t *, unsigned char *, uint64_t))off_1ECABC820[v3])(&v57, v51, v7);
      int v52 = v3;
    }
    unsigned __int8 v53 = 1;
  }
  long long v55 = *(_OWORD *)(a2 + 72);
  unint64_t v54 = off_1ECABC030;
  unint64_t v9 = *(_DWORD **)(a2 + 88);
  if (v9) {
    *v9 += 2;
  }
  uint64_t v46 = v7;
  uint64_t v47 = a3;
  unint64_t v10 = (uint64_t *)(a1 + 400);
  unint64_t v56 = v9;
  unint64_t v11 = *(unsigned int *)(a1 + 412);
  if (v11 != *(_DWORD *)(a1 + 408))
  {
    uint64_t v22 = *v10;
    uint64_t v23 = a2;
    long long v59 = v49;
    uint64_t v24 = v50;
    uint64_t v57 = a2;
    long long v58 = (void (**)(WGSL::AST::IdentifierExpression *__hidden))&unk_1ECABBFE0;
    uint64_t v60 = v50;
    v61[0] = 0;
    unsigned __int8 v63 = 0;
    if (v8)
    {
      int v62 = -1;
      if (v3 != -1)
      {
        uint64_t v25 = v22;
        ((void (*)(unsigned char *, unsigned char *, unsigned char *))off_1ECABC780[v3])(v67, v61, v51);
        uint64_t v22 = v25;
        int v62 = v3;
        unint64_t v9 = v56;
        uint64_t v23 = v57;
        uint64_t v24 = v60;
      }
      unsigned __int8 v63 = 1;
    }
    long long v58 = off_1ECABBFB8;
    long long v65 = v55;
    unint64_t v56 = 0;
    int v64 = off_1ECABC030;
    uint64_t v66 = v9;
    uint64_t v26 = v22 + 32 * v11;
    *(void *)(v26 + 24) = 0;
    uint64_t v27 = (void *)(v26 + 24);
    uint64_t v28 = (char *)operator new(0x70uLL);
    unint64_t v29 = v28;
    *(void *)uint64_t v28 = &unk_1ECABC7E8;
    *((void *)v28 + 1) = v23;
    *(_OWORD *)(v28 + 24) = v59;
    *((void *)v28 + 2) = &unk_1ECABBFE0;
    *((void *)v28 + 5) = v24;
    v28[48] = 0;
    v28[72] = 0;
    if (v8)
    {
      *((_DWORD *)v28 + 16) = -1;
      int v30 = v62;
      if (v62 != -1)
      {
        ((void (*)(unsigned char *, char *, unsigned char *))off_1ECABC780[v62])(v67, v28 + 48, v61);
        *((_DWORD *)v29 + 16) = v30;
      }
      v29[72] = 1;
    }
    *((void *)v29 + 2) = off_1ECABBFB8;
    *(_OWORD *)(v29 + 88) = v65;
    *((void *)v29 + 10) = off_1ECABC030;
    uint64_t v31 = v66;
    uint64_t v66 = 0;
    *((void *)v29 + 13) = v31;
    void *v27 = v29;
    int8x16_t v32 = v66;
    int v64 = off_1ECABC030;
    uint64_t v66 = 0;
    if (v32)
    {
      if (*v32 == 2)
      {
        WTF::StringImpl::destroy();
        long long v58 = (void (**)(WGSL::AST::IdentifierExpression *__hidden))&unk_1ECABBFE0;
        if (!v63)
        {
LABEL_39:
          ++*(_DWORD *)(a1 + 412);
          goto LABEL_45;
        }
LABEL_37:
        if (v62 != -1) {
          ((void (*)(unsigned char *, unsigned char *))off_1ECABC5B0[v62])(v67, v61);
        }
        goto LABEL_39;
      }
      *v32 -= 2;
    }
    long long v58 = (void (**)(WGSL::AST::IdentifierExpression *__hidden))&unk_1ECABBFE0;
    if (!v63) {
      goto LABEL_39;
    }
    goto LABEL_37;
  }
  unint64_t v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10) {
    unint64_t v13 = v12 + 1;
  }
  else {
    unint64_t v13 = 16;
  }
  if (v13 <= v11 + 1) {
    unint64_t v14 = v11 + 1;
  }
  else {
    unint64_t v14 = v13;
  }
  WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v10, v14);
  uint64_t v15 = *(unsigned int *)(a1 + 412);
  uint64_t v16 = *(void *)(a1 + 400);
  uint64_t v17 = a2;
  long long v59 = v49;
  uint64_t v18 = v50;
  uint64_t v57 = a2;
  long long v58 = (void (**)(WGSL::AST::IdentifierExpression *__hidden))&unk_1ECABBFE0;
  uint64_t v60 = v50;
  v61[0] = 0;
  unsigned __int8 v63 = 0;
  int v19 = v53;
  if (v53)
  {
    int v62 = -1;
    int v8 = v52;
    if (v52 != -1)
    {
      uint64_t v20 = v15;
      uint64_t v21 = v16;
      ((void (*)(unsigned char *, unsigned char *, unsigned char *))off_1ECABC780[v52])(v67, v61, v51);
      uint64_t v16 = v21;
      uint64_t v15 = v20;
      int v62 = v8;
      uint64_t v17 = v57;
      uint64_t v18 = v60;
    }
    int v45 = 1;
    unsigned __int8 v63 = 1;
  }
  else
  {
    int v45 = 0;
  }
  long long v58 = off_1ECABBFB8;
  long long v65 = v55;
  int8x16_t v33 = v56;
  unint64_t v56 = 0;
  int v64 = off_1ECABC030;
  uint64_t v66 = v33;
  uint64_t v34 = v16 + 32 * v15;
  *(void *)(v34 + 24) = 0;
  char v35 = (void *)(v34 + 24);
  uint64_t v36 = (char *)operator new(0x70uLL);
  int v37 = v36;
  *(void *)uint64_t v36 = &unk_1ECABC7E8;
  *((void *)v36 + 1) = v17;
  *(_OWORD *)(v36 + 24) = v59;
  *((void *)v36 + 2) = &unk_1ECABBFE0;
  *((void *)v36 + 5) = v18;
  v36[48] = 0;
  v36[72] = 0;
  if (v19)
  {
    *((_DWORD *)v36 + 16) = -1;
    int v38 = v45;
    if (v8 != -1)
    {
      ((void (*)(unsigned char *, char *, unsigned char *))off_1ECABC780[v8])(v67, v36 + 48, v61);
      *((_DWORD *)v37 + 16) = v8;
      int8x16_t v33 = v66;
      int v38 = v63;
    }
    v37[72] = 1;
    a3 = v47;
  }
  else
  {
    a3 = v47;
    int v38 = v45;
  }
  *((void *)v37 + 2) = off_1ECABBFB8;
  *(_OWORD *)(v37 + 88) = v65;
  *((void *)v37 + 10) = off_1ECABC030;
  *((void *)v37 + 13) = v33;
  *char v35 = v37;
  uint64_t v66 = 0;
  int v64 = off_1ECABC030;
  long long v58 = (void (**)(WGSL::AST::IdentifierExpression *__hidden))&unk_1ECABBFE0;
  if (v38 && v62 != -1) {
    ((void (*)(unsigned char *, unsigned char *))off_1ECABC5B0[v62])(v67, v61);
  }
  ++*(_DWORD *)(a1 + 412);
  uint64_t v7 = v46;
LABEL_45:
  unint64_t v39 = v56;
  unint64_t v54 = off_1ECABC030;
  unint64_t v56 = 0;
  if (!v39) {
    goto LABEL_48;
  }
  if (*v39 != 2)
  {
    *v39 -= 2;
LABEL_48:
    if (!v53) {
      goto LABEL_53;
    }
    goto LABEL_51;
  }
  WTF::StringImpl::destroy();
  if (!v53) {
    goto LABEL_53;
  }
LABEL_51:
  if (v52 != -1) {
    ((void (*)(uint64_t *, unsigned char *))off_1ECABC5B0[v52])(&v57, v51);
  }
LABEL_53:
  *(void *)(a2 + 64) = off_1ECABC030;
  uint64_t result = *(_DWORD **)(a2 + 88);
  *(void *)(a2 + 88) = 0;
  if (!result) {
    goto LABEL_56;
  }
  if (*result != 2)
  {
    *result -= 2;
LABEL_56:
    unint64_t v41 = (_OWORD *)(a2 + 8);
    *(void *)a2 = &unk_1ECABBFE0;
    if (!*(unsigned char *)(a2 + 56)) {
      goto LABEL_62;
    }
    goto LABEL_59;
  }
  uint64_t result = (_DWORD *)WTF::StringImpl::destroy();
  unint64_t v41 = (_OWORD *)(a2 + 8);
  *(void *)a2 = &unk_1ECABBFE0;
  if (!*(unsigned char *)(a2 + 56)) {
    goto LABEL_62;
  }
LABEL_59:
  uint64_t v42 = *(unsigned int *)(a2 + 48);
  if (v42 != -1) {
    uint64_t result = (_DWORD *)((uint64_t (*)(uint64_t *, uint64_t))off_1ECABC5B0[v42])(&v57, v7);
  }
  *(_DWORD *)(a2 + 48) = -1;
LABEL_62:
  *(void *)a2 = &unk_1ECABC008;
  *unint64_t v41 = *(_OWORD *)(a3 + 8);
  *(void *)a2 = &unk_1ECABBFE0;
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  *(unsigned char *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 56) = 0;
  if (*(unsigned char *)(a3 + 56))
  {
    *(_DWORD *)(a2 + 48) = -1;
    uint64_t v43 = *(unsigned int *)(a3 + 48);
    if (v43 != -1)
    {
      uint64_t result = (_DWORD *)((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1ECABC820[v43])(&v57, v7, a3 + 32);
      *(_DWORD *)(a2 + 48) = v43;
    }
    *(unsigned char *)(a2 + 56) = 1;
  }
  *(void *)a2 = off_1ECABBFB8;
  *(void *)(a2 + 64) = &unk_1ECABC008;
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
  *(void *)(a2 + 64) = off_1ECABC030;
  char v44 = *(_DWORD **)(a3 + 88);
  if (v44) {
    *v44 += 2;
  }
  *(void *)(a2 + 88) = v44;
  return result;
}

_DWORD *WGSL::EntryPointRewriter::materialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int **a5)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (a4 != 1)
  {
    long long v105 = 0uLL;
    uint64_t v22 = *(int **)(a1 + 88);
    if (v22) {
      *v22 += 2;
    }
    uint8x8_t v106 = off_1ECABC030;
    long long v107 = 0uLL;
    uint64_t v108 = v22;
    uint64_t v23 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>((void *)(v8 + 312), &v105, (uint64_t)&v106);
    uint64_t v24 = *(_DWORD **)(a3 + 24);
    if (v24) {
      *v24 += 2;
    }
    uint16x8_t v102 = off_1ECABC030;
    long long v103 = 0uLL;
    uint64_t v104 = v24;
    if (*(void *)(v8 + 320) - *(void *)(v8 + 312) <= 0x87uLL) {
      WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v8 + 312));
    }
    unint64_t v10 = *(void **)(v8 + 312);
    *((unsigned char *)v10 + 56) = 0;
    v10[2] = 0;
    unsigned char v10[3] = 0;
    *((unsigned char *)v10 + 32) = 0;
    *unint64_t v10 = off_1ECABC8B0;
    v10[1] = 0;
    long long v25 = v103;
    *((_OWORD *)v10 + 5) = v103;
    v10[8] = v23;
    v10[9] = off_1ECABC030;
    uint64_t v26 = v104;
    uint64_t v104 = 0;
    *((_OWORD *)v10 + 7) = v25;
    v10[12] = v26;
    v10[13] = off_1ECABC030;
    if (v26) {
      *v26 += 2;
    }
    v10[16] = v26;
    *(void *)(v8 + 312) += 136;
    unint64_t v27 = *(unsigned int *)(v8 + 356);
    if (v27 == *(_DWORD *)(v8 + 352))
    {
      unint64_t v28 = v27 + (v27 >> 2);
      if (v28 >= 0x10) {
        unint64_t v29 = v28 + 1;
      }
      else {
        unint64_t v29 = 16;
      }
      if (v29 <= v27 + 1) {
        unint64_t v30 = v27 + 1;
      }
      else {
        unint64_t v30 = v29;
      }
      if (v30 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x182553370);
      }
      uint64_t v31 = *(void **)(v8 + 344);
      int8x16_t v32 = (void *)WTF::fastMalloc((WTF *)(8 * v30));
      *(_DWORD *)(v8 + 352) = v30;
      *(void *)(v8 + 344) = v32;
      memcpy(v32, v31, 8 * v27);
      if (v31)
      {
        if (*(void **)(v8 + 344) == v31)
        {
          *(void *)(v8 + 344) = 0;
          *(_DWORD *)(v8 + 352) = 0;
        }
        WTF::fastFree((WTF *)v31, v33);
      }
      unint64_t v27 = *(unsigned int *)(v8 + 356);
      uint64_t v34 = (void *)(*(void *)(v8 + 344) + 8 * v27);
    }
    else
    {
      uint64_t v34 = (void *)(*(void *)(v8 + 344) + 8 * v27);
    }
    *uint64_t v34 = v10;
    *(_DWORD *)(v8 + 356) = v27 + 1;
    unint64_t v41 = v104;
    uint16x8_t v102 = off_1ECABC030;
    uint64_t v104 = 0;
    if (v41)
    {
      if (*v41 == 2)
      {
        WTF::StringImpl::destroy();
        unint64_t v11 = v108;
        uint8x8_t v106 = off_1ECABC030;
        uint64_t v108 = 0;
        if (!v11) {
          goto LABEL_7;
        }
        goto LABEL_125;
      }
      *v41 -= 2;
    }
    unint64_t v11 = v108;
    uint8x8_t v106 = off_1ECABC030;
    uint64_t v108 = 0;
    if (!v11) {
      goto LABEL_7;
    }
LABEL_125:
    int v12 = *v11 - 2;
    if (*v11 != 2) {
      goto LABEL_6;
    }
    goto LABEL_126;
  }
  uint16x8_t v102 = 0;
  *(void *)&long long v103 = 0;
  unint64_t v9 = *a5;
  if (*a5) {
    *v9 += 2;
  }
  uint8x8_t v106 = off_1ECABC030;
  long long v107 = 0uLL;
  uint64_t v108 = v9;
  unint64_t v10 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>((void *)(v8 + 312), &v102, (uint64_t)&v106);
  unint64_t v11 = v108;
  uint8x8_t v106 = off_1ECABC030;
  uint64_t v108 = 0;
  if (!v11)
  {
LABEL_7:
    unint64_t v13 = *(unsigned int *)(a2 + 12);
    if (v13) {
      goto LABEL_8;
    }
    goto LABEL_127;
  }
  int v12 = *v11 - 2;
  if (*v11 != 2)
  {
LABEL_6:
    *unint64_t v11 = v12;
    goto LABEL_7;
  }
LABEL_126:
  WTF::StringImpl::destroy();
  unint64_t v13 = *(unsigned int *)(a2 + 12);
  if (v13)
  {
LABEL_8:
    if (v13 == *(_DWORD *)(a2 + 8))
    {
      unint64_t v14 = v13 + (v13 >> 2);
      if (v14 >= 0x10) {
        unint64_t v15 = v14 + 1;
      }
      else {
        unint64_t v15 = 16;
      }
      if (v15 <= v13 + 1) {
        unint64_t v16 = v13 + 1;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x182553358);
      }
      uint64_t v17 = *(int ***)a2;
      uint64_t v18 = (void *)WTF::fastMalloc((WTF *)(8 * v16));
      *(_DWORD *)(a2 + 8) = v16;
      *(void *)a2 = v18;
      memcpy(v18, v17, 8 * v13);
      if (v17)
      {
        if (*(int ***)a2 == v17)
        {
          *(void *)a2 = 0;
          *(_DWORD *)(a2 + 8) = 0;
        }
        WTF::fastFree((WTF *)v17, v19);
      }
      unint64_t v13 = *(unsigned int *)(a2 + 12);
      uint64_t v20 = *(int ***)a2;
      uint64_t v21 = *(int **)(a3 + 24);
      if (v21) {
        *v21 += 2;
      }
      v20[v13] = v21;
    }
    else
    {
      uint64_t v20 = *(int ***)a2;
      char v35 = *(int **)(a3 + 24);
      if (v35) {
        *v35 += 2;
      }
      v20[v13] = v35;
    }
    uint16x8_t v102 = 0;
    *(void *)&long long v103 = 0;
    *(_DWORD *)(a2 + 12) = v13 + 1;
    if (v13 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x182553348);
    }
    uint64_t v36 = (void *)(*(void *)(a1 + 8) + 312);
    int v37 = *v20;
    if (v37) {
      *v37 += 2;
    }
    uint8x8_t v106 = off_1ECABC030;
    long long v107 = 0uLL;
    uint64_t v108 = v37;
    int v38 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v36, &v102, (uint64_t)&v106);
    unint64_t v39 = v108;
    uint8x8_t v106 = off_1ECABC030;
    uint64_t v108 = 0;
    if (v39)
    {
      if (*v39 == 2)
      {
        WTF::StringImpl::destroy();
        LODWORD(v40) = *(_DWORD *)(a2 + 12);
        if (v40 < 2) {
          goto LABEL_89;
        }
LABEL_62:
        uint16x8_t v101 = v10;
        unint64_t v42 = 1;
        do
        {
          uint64_t v43 = v38;
          uint64_t v44 = *(void *)(a1 + 8);
          int v45 = *(int **)(*(void *)a2 + 8 * v42);
          if (v45) {
            *v45 += 2;
          }
          long long v107 = 0uLL;
          uint8x8_t v106 = off_1ECABC030;
          uint64_t v108 = v45;
          int v38 = *(void **)(v44 + 312);
          if (*(void *)(v44 + 320) - (void)v38 <= 0x87uLL)
          {
            WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v44 + 312));
            int v38 = *(void **)(v44 + 312);
          }
          *((unsigned char *)v38 + 56) = 0;
          v38[2] = 0;
          v38[3] = 0;
          *((unsigned char *)v38 + 32) = 0;
          *int v38 = off_1ECABC8B0;
          v38[1] = 0;
          long long v46 = v107;
          *((_OWORD *)v38 + 5) = v107;
          v38[8] = v43;
          v38[9] = off_1ECABC030;
          uint64_t v47 = v108;
          uint64_t v108 = 0;
          *((_OWORD *)v38 + 7) = v46;
          v38[12] = v47;
          v38[13] = off_1ECABC030;
          if (v47) {
            *v47 += 2;
          }
          v38[16] = v47;
          *(void *)(v44 + 312) += 136;
          unint64_t v48 = *(unsigned int *)(v44 + 356);
          if (v48 == *(_DWORD *)(v44 + 352))
          {
            unint64_t v49 = v48 + (v48 >> 2);
            if (v49 >= 0x10) {
              unint64_t v50 = v49 + 1;
            }
            else {
              unint64_t v50 = 16;
            }
            if (v50 <= v48 + 1) {
              unint64_t v51 = v48 + 1;
            }
            else {
              unint64_t v51 = v50;
            }
            if (v51 >> 29) {
              goto LABEL_177;
            }
            int v52 = *(void **)(v44 + 344);
            unsigned __int8 v53 = (void *)WTF::fastMalloc((WTF *)(8 * v51));
            *(_DWORD *)(v44 + 352) = v51;
            *(void *)(v44 + 344) = v53;
            memcpy(v53, v52, 8 * v48);
            if (v52)
            {
              if (*(void **)(v44 + 344) == v52)
              {
                *(void *)(v44 + 344) = 0;
                *(_DWORD *)(v44 + 352) = 0;
              }
              WTF::fastFree((WTF *)v52, v54);
            }
            unint64_t v48 = *(unsigned int *)(v44 + 356);
            long long v55 = (void *)(*(void *)(v44 + 344) + 8 * v48);
          }
          else
          {
            long long v55 = (void *)(*(void *)(v44 + 344) + 8 * v48);
          }
          *long long v55 = v38;
          *(_DWORD *)(v44 + 356) = v48 + 1;
          unint64_t v56 = v108;
          uint8x8_t v106 = off_1ECABC030;
          uint64_t v108 = 0;
          if (v56)
          {
            if (*v56 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v56 -= 2;
            }
          }
          ++v42;
          unint64_t v40 = *(unsigned int *)(a2 + 12);
        }
        while (v42 < v40);
        unint64_t v10 = v101;
LABEL_89:
        if (!v40)
        {
          __break(0xC471u);
          JUMPOUT(0x182553350);
        }
        uint64_t v57 = v40 - 1;
        uint64_t result = *(_DWORD **)(*(void *)a2 + 8 * v57);
        *(void *)(*(void *)a2 + 8 * v57) = 0;
        if (result)
        {
          if (*result == 2)
          {
            uint64_t result = (_DWORD *)WTF::StringImpl::destroy();
            *(_DWORD *)(a2 + 12) = v57;
            uint64_t v59 = *(void *)(a1 + 8);
            uint64_t v60 = *(void **)(v59 + 312);
            if (*(void *)(v59 + 320) - (void)v60 > 0x27uLL) {
              goto LABEL_94;
            }
            goto LABEL_123;
          }
          *result -= 2;
        }
        *(_DWORD *)(a2 + 12) = v57;
        uint64_t v59 = *(void *)(a1 + 8);
        uint64_t v60 = *(void **)(v59 + 312);
        if (*(void *)(v59 + 320) - (void)v60 > 0x27uLL) {
          goto LABEL_94;
        }
LABEL_123:
        uint64_t result = (_DWORD *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v59 + 312));
        uint64_t v60 = *(void **)(v59 + 312);
LABEL_94:
        *uint64_t v60 = &unk_1ECABC930;
        v60[1] = 0;
        v60[2] = 0;
        v60[3] = v38;
        v60[4] = v10;
        *(void *)(v59 + 312) += 40;
        unint64_t v61 = *(unsigned int *)(v59 + 356);
        if (v61 == *(_DWORD *)(v59 + 352))
        {
          unint64_t v62 = v61 + (v61 >> 2);
          if (v62 >= 0x10) {
            unint64_t v63 = v62 + 1;
          }
          else {
            unint64_t v63 = 16;
          }
          if (v63 <= v61 + 1) {
            unint64_t v64 = v61 + 1;
          }
          else {
            unint64_t v64 = v63;
          }
          if (v64 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x182553360);
          }
          long long v65 = *(void **)(v59 + 344);
          uint64_t v66 = (void *)WTF::fastMalloc((WTF *)(8 * v64));
          *(_DWORD *)(v59 + 352) = v64;
          *(void *)(v59 + 344) = v66;
          uint64_t result = memcpy(v66, v65, 8 * v61);
          if (v65)
          {
            if (*(void **)(v59 + 344) == v65)
            {
              *(void *)(v59 + 344) = 0;
              *(_DWORD *)(v59 + 352) = 0;
            }
            uint64_t result = (_DWORD *)WTF::fastFree((WTF *)v65, v67);
          }
          uint64_t v68 = *(unsigned int *)(v59 + 356);
          *(void *)(*(void *)(v59 + 344) + 8 * v68) = v60;
          *(_DWORD *)(v59 + 356) = v68 + 1;
          unint64_t v69 = *(unsigned int *)(a1 + 68);
          if (v69 != *(_DWORD *)(a1 + 64)) {
            goto LABEL_107;
          }
        }
        else
        {
          *(void *)(*(void *)(v59 + 344) + 8 * v61) = v60;
          *(_DWORD *)(v59 + 356) = v61 + 1;
          unint64_t v69 = *(unsigned int *)(a1 + 68);
          if (v69 != *(_DWORD *)(a1 + 64))
          {
LABEL_107:
            uint64_t v70 = (void *)(*(void *)(a1 + 56) + 8 * v69);
LABEL_121:
            *uint64_t v70 = v60;
            *(_DWORD *)(a1 + 68) = v69 + 1;
            return result;
          }
        }
        unint64_t v71 = v69 + (v69 >> 2);
        if (v71 >= 0x10) {
          unint64_t v72 = v71 + 1;
        }
        else {
          unint64_t v72 = 16;
        }
        if (v72 <= v69 + 1) {
          unint64_t v73 = v69 + 1;
        }
        else {
          unint64_t v73 = v72;
        }
        if (v73 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x182553368);
        }
        uint64_t v74 = *(void **)(a1 + 56);
        uint64_t v75 = (void *)WTF::fastMalloc((WTF *)(8 * v73));
        *(_DWORD *)(a1 + 64) = v73;
        *(void *)(a1 + 56) = v75;
        uint64_t result = memcpy(v75, v74, 8 * v69);
        if (v74)
        {
          if (*(void **)(a1 + 56) == v74)
          {
            *(void *)(a1 + 56) = 0;
            *(_DWORD *)(a1 + 64) = 0;
          }
          uint64_t result = (_DWORD *)WTF::fastFree((WTF *)v74, v76);
        }
        unint64_t v69 = *(unsigned int *)(a1 + 68);
        uint64_t v70 = (void *)(*(void *)(a1 + 56) + 8 * v69);
        goto LABEL_121;
      }
      *v39 -= 2;
    }
    LODWORD(v40) = *(_DWORD *)(a2 + 12);
    if (v40 < 2) {
      goto LABEL_89;
    }
    goto LABEL_62;
  }
LABEL_127:
  uint64_t v77 = *(void *)(a1 + 8);
  uint16x8_t v102 = 0;
  *(void *)&long long v103 = 0;
  uint64_t v78 = *(int **)(a3 + 24);
  if (v78) {
    *v78 += 2;
  }
  uint8x8_t v106 = off_1ECABC030;
  long long v107 = 0uLL;
  uint64_t v108 = v78;
  unint64_t v79 = *(void **)(a3 + 32);
  uint64_t v80 = *(void *)(v77 + 312);
  if ((unint64_t)(*(void *)(v77 + 320) - v80) <= 0xB7)
  {
    WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v77 + 312));
    uint64_t v80 = *(void *)(v77 + 312);
  }
  *(void *)(v80 + 8) = 0;
  *(void *)(v80 + 16) = 0;
  *(void *)uint64_t v80 = &unk_1ECABC8D8;
  long long v81 = v107;
  *(_OWORD *)(v80 + 32) = v107;
  *(void *)(v80 + 24) = off_1ECABC030;
  uint64_t v82 = v108;
  uint64_t v108 = 0;
  *(_OWORD *)(v80 + 64) = v81;
  *(void *)(v80 + 48) = v82;
  *(void *)(v80 + 56) = off_1ECABC030;
  if (v82) {
    *v82 += 2;
  }
  *(void *)(v80 + 80) = v82;
  *(void *)(v80 + 88) = 0;
  *(void *)(v80 + 96) = 0;
  *(void *)(v80 + 104) = 0;
  *(void *)(v80 + 112) = v79;
  *(void *)(v80 + 120) = v10;
  *(_WORD *)(v80 + 128) = 3;
  *(unsigned char *)(v80 + 160) = 0;
  *(unsigned char *)(v80 + 164) = 0;
  *(unsigned char *)(v80 + 168) = 0;
  *(unsigned char *)(v80 + 172) = 0;
  *(unsigned char *)(v80 + 176) = 0;
  if (v79) {
    uint64_t v83 = v79;
  }
  else {
    uint64_t v83 = v10;
  }
  *(void *)(v80 + 149) = 0;
  *(void *)(v80 + 136) = 0;
  *(void *)(v80 + 144) = 0;
  *(void *)(v80 + 144) = v83[3];
  *(void *)(v77 + 312) += 184;
  unint64_t v84 = *(unsigned int *)(v77 + 356);
  if (v84 == *(_DWORD *)(v77 + 352))
  {
    unint64_t v85 = v84 + (v84 >> 2);
    if (v85 >= 0x10) {
      unint64_t v86 = v85 + 1;
    }
    else {
      unint64_t v86 = 16;
    }
    if (v86 <= v84 + 1) {
      unint64_t v87 = v84 + 1;
    }
    else {
      unint64_t v87 = v86;
    }
    if (v87 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x182553378);
    }
    uint64_t v88 = *(void **)(v77 + 344);
    uint64_t v89 = (void *)WTF::fastMalloc((WTF *)(8 * v87));
    *(_DWORD *)(v77 + 352) = v87;
    *(void *)(v77 + 344) = v89;
    memcpy(v89, v88, 8 * v84);
    if (v88)
    {
      if (*(void **)(v77 + 344) == v88)
      {
        *(void *)(v77 + 344) = 0;
        *(_DWORD *)(v77 + 352) = 0;
      }
      WTF::fastFree((WTF *)v88, v90);
    }
    unint64_t v84 = *(unsigned int *)(v77 + 356);
    uint64_t v91 = (uint64_t *)(*(void *)(v77 + 344) + 8 * v84);
  }
  else
  {
    uint64_t v91 = (uint64_t *)(*(void *)(v77 + 344) + 8 * v84);
  }
  uint64_t *v91 = v80;
  *(_DWORD *)(v77 + 356) = v84 + 1;
  long long v92 = WGSL::AST::Builder::construct<WGSL::AST::VariableStatement,WGSL::SourceSpan,WGSL::AST::Variable &,void>((void *)(v77 + 312), &v102, v80);
  unint64_t v93 = *(unsigned int *)(a1 + 68);
  if (v93 == *(_DWORD *)(a1 + 64))
  {
    unint64_t v94 = v93 + (v93 >> 2);
    if (v94 >= 0x10) {
      unint64_t v95 = v94 + 1;
    }
    else {
      unint64_t v95 = 16;
    }
    if (v95 <= v93 + 1) {
      unint64_t v96 = v93 + 1;
    }
    else {
      unint64_t v96 = v95;
    }
    if (v96 >> 29)
    {
LABEL_177:
      __break(0xC471u);
      JUMPOUT(0x182553340);
    }
    unint64_t v97 = *(void **)(a1 + 56);
    uint64_t v98 = (void *)WTF::fastMalloc((WTF *)(8 * v96));
    *(_DWORD *)(a1 + 64) = v96;
    *(void *)(a1 + 56) = v98;
    memcpy(v98, v97, 8 * v93);
    if (v97)
    {
      if (*(void **)(a1 + 56) == v97)
      {
        *(void *)(a1 + 56) = 0;
        *(_DWORD *)(a1 + 64) = 0;
      }
      WTF::fastFree((WTF *)v97, v99);
    }
    unint64_t v93 = *(unsigned int *)(a1 + 68);
    uint8x16_t v100 = (void *)(*(void *)(a1 + 56) + 8 * v93);
  }
  else
  {
    uint8x16_t v100 = (void *)(*(void *)(a1 + 56) + 8 * v93);
  }
  *uint8x16_t v100 = v92;
  *(_DWORD *)(a1 + 68) = v93 + 1;
  uint64_t result = v108;
  uint8x8_t v106 = off_1ECABC030;
  uint64_t v108 = 0;
  if (result)
  {
    if (*result == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *result -= 2;
    }
  }
  return result;
}

void *WGSL::AST::Builder::construct<WGSL::AST::VariableStatement,WGSL::SourceSpan,WGSL::AST::Variable &,void>(void *this, _OWORD *a2, uint64_t a3)
{
  int v5 = this;
  uint64_t v6 = *this;
  if (this[1] - *this <= 0x1FuLL)
  {
    this = (void *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    uint64_t v6 = *v5;
  }
  *(_OWORD *)(v6 + 8) = *a2;
  *(void *)uint64_t v6 = &unk_1ECABC908;
  *(void *)(v6 + 24) = a3;
  *v5 += 32;
  unint64_t v7 = *((unsigned int *)v5 + 11);
  if (v7 != *((_DWORD *)v5 + 10))
  {
    unint64_t v14 = (void *)(v5[4] + 8 * v7);
LABEL_17:
    *unint64_t v14 = v6;
    *((_DWORD *)v5 + 11) = v7 + 1;
    return (void *)v6;
  }
  unint64_t v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10) {
    unint64_t v9 = v8 + 1;
  }
  else {
    unint64_t v9 = 16;
  }
  if (v9 <= v7 + 1) {
    unint64_t v10 = v7 + 1;
  }
  else {
    unint64_t v10 = v9;
  }
  if (!(v10 >> 29))
  {
    unint64_t v11 = (void *)v5[4];
    int v12 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
    *((_DWORD *)v5 + 10) = v10;
    v5[4] = v12;
    memcpy(v12, v11, 8 * v7);
    if (v11)
    {
      if ((void *)v5[4] == v11)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v11, v13);
    }
    unint64_t v7 = *((unsigned int *)v5 + 11);
    unint64_t v14 = (void *)(v5[4] + 8 * v7);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

void WGSL::rewriteEntryPoints(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  if (*(unsigned char *)(a1 + 392))
  {
    unsigned int v4 = *(_DWORD *)(a1 + 372);
    if (v4)
    {
      uint64_t v6 = *a2;
      if (*a2)
      {
        unint64_t v7 = *(uint64_t **)(a1 + 360);
        unint64_t v8 = &v7[3 * v4];
LABEL_5:
        int v9 = *(_DWORD *)(v6 - 8);
        unint64_t v10 = (WTF::StringImpl *)v7[2];
        unsigned int v11 = *((_DWORD *)v10 + 4);
        if (v11 < 0x100) {
          unsigned int v12 = WTF::StringImpl::hashSlowCase(v10);
        }
        else {
          unsigned int v12 = v11 >> 8;
        }
        for (i = 0; ; unsigned int v12 = i + v14)
        {
          int v14 = v12 & v9;
          unint64_t v15 = *(WTF **)(v6 + 16 * (v12 & v9));
          if (v15 != (WTF *)-1)
          {
            if (!v15) {
              goto LABEL_14;
            }
            if (WTF::equal(v15, (const WTF::StringImpl *)v7[2], a3)) {
              break;
            }
          }
          ++i;
        }
        uint64_t v16 = *v7;
        v18[0] = *((unsigned char *)v7 + 8);
        uint64_t v19 = a1;
        uint64_t v20 = v16;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        int v26 = 0;
        WGSL::EntryPointRewriter::rewrite((WGSL::EntryPointRewriter *)v18);
        WGSL::EntryPointRewriter::~EntryPointRewriter((WGSL::EntryPointRewriter *)v18, v17);
LABEL_14:
        while (1)
        {
          v7 += 3;
          if (v7 == v8) {
            break;
          }
          uint64_t v6 = *a2;
          if (*a2) {
            goto LABEL_5;
          }
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t WGSL::AST::Structure::name(WGSL::AST::Structure *this)
{
  return (uint64_t)this + 24;
}

void WGSL::EntryPointRewriter::~EntryPointRewriter(WGSL::EntryPointRewriter *this, void *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v3)
  {
    if (*v3 == 2)
    {
      WTF::StringImpl::destroy();
      unsigned int v4 = (_DWORD *)*((void *)this + 10);
      *((void *)this + 10) = 0;
      if (!v4) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
    *v3 -= 2;
  }
  unsigned int v4 = (_DWORD *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (!v4)
  {
LABEL_9:
    int v5 = (WTF *)*((void *)this + 7);
    if (!v5) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_7:
  if (*v4 != 2)
  {
    *v4 -= 2;
    goto LABEL_9;
  }
  WTF::StringImpl::destroy();
  int v5 = (WTF *)*((void *)this + 7);
  if (v5)
  {
LABEL_10:
    *((void *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v5, a2);
  }
LABEL_11:
  uint64_t v6 = *((unsigned int *)this + 13);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 5);
    uint64_t v8 = 56 * v6;
    uint64_t v9 = v7 + 24;
    do
    {
      unint64_t v10 = *(WTF **)(v9 + 16);
      if (v10)
      {
        *(void *)(v9 + 16) = 0;
        *(_DWORD *)(v9 + 24) = 0;
        WTF::fastFree(v10, a2);
      }
      *(void *)(v9 - 24) = off_1ECABC030;
      unsigned int v11 = *(_DWORD **)v9;
      *(void *)uint64_t v9 = 0;
      if (v11)
      {
        if (*v11 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v11 -= 2;
        }
      }
      v9 += 56;
      v7 += 56;
      v8 -= 56;
    }
    while (v8);
  }
  unsigned int v12 = (WTF *)*((void *)this + 5);
  if (v12)
  {
    *((void *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v12, a2);
  }
  uint64_t v13 = *((unsigned int *)this + 9);
  if (v13)
  {
    uint64_t v14 = *((void *)this + 3);
    uint64_t v15 = v13 << 6;
    uint64_t v16 = v14 + 24;
    do
    {
      uint64_t v17 = *(WTF **)(v16 + 16);
      if (v17)
      {
        *(void *)(v16 + 16) = 0;
        *(_DWORD *)(v16 + 24) = 0;
        WTF::fastFree(v17, a2);
      }
      *(void *)(v16 - 24) = off_1ECABC030;
      uint64_t v18 = *(_DWORD **)v16;
      *(void *)uint64_t v16 = 0;
      if (v18)
      {
        if (*v18 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v18 -= 2;
        }
      }
      v16 += 64;
      v14 += 64;
      v15 -= 64;
    }
    while (v15);
  }
  uint64_t v19 = (WTF *)*((void *)this + 3);
  if (v19)
  {
    *((void *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v19, a2);
  }
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, void *a8@<X8>)
{
  int v13 = result;
  if (a2)
  {
    if (result)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        uint64_t v15 = v127;
        if (!v127) {
          goto LABEL_18;
        }
        uint64_t v16 = (unsigned char *)(v127 + 20);
        *(_DWORD *)uint64_t v127 = 2;
        *(_DWORD *)(v127 + 4) = v13;
        *(void *)(v127 + 8) = v127 + 20;
        *(_DWORD *)(v127 + 16) = 4;
        if (a4)
        {
          if (a4 != 1)
          {
            uint64_t result = (uint64_t)memcpy((void *)(v127 + 20), a3, a4);
            uint64_t v17 = a4;
            uint64_t v18 = &v16[a4];
            if (a5)
            {
LABEL_9:
              uint64_t v19 = *(int8x16_t **)(a5 + 8);
              size_t v20 = *(unsigned int *)(a5 + 4);
              if ((*(unsigned char *)(a5 + 16) & 4) != 0)
              {
                if (v20)
                {
                  if (v20 == 1) {
                    unsigned char *v18 = v19->i8[0];
                  }
                  else {
                    uint64_t result = (uint64_t)memcpy(v18, v19, v20);
                  }
                }
                goto LABEL_72;
              }
              long long v21 = &v18[v20];
              if (v20 < 0x10)
              {
                unint64_t v22 = (unint64_t)v18;
              }
              else
              {
                unint64_t v22 = (unint64_t)&v18[v20 & 0xFFFFFFF0];
                long long v23 = (unsigned long long *)v18;
                do
                {
                  unsigned long long v24 = (unsigned __int128)vld2q_s8(v19->i8);
                  v19 += 2;
                  *v23++ = v24;
                }
                while (v23 != (unsigned long long *)v22);
              }
              if ((unsigned char *)v22 == v21)
              {
LABEL_72:
                uint64_t v44 = *(unsigned int *)(a5 + 4);
LABEL_73:
                if (a7)
                {
                  uint64_t result = (uint64_t)&v18[v44];
                  if (a7 == 1) {
                    *(unsigned char *)uint64_t result = a6->i8[0];
                  }
                  else {
                    uint64_t result = (uint64_t)memcpy((void *)result, a6, a7);
                  }
                }
                goto LABEL_18;
              }
              size_t v56 = v127 + v20 + v17;
              unint64_t v57 = v56 - v22 + 20;
              if (v57 < 8
                || (v22 < (unint64_t)&v19[2].u64[1] + 2 * v56 + -2 * v22
                  ? (BOOL v58 = (unint64_t)v19 >= v56 + 20)
                  : (BOOL v58 = 1),
                    !v58))
              {
                uint64_t v60 = (unsigned char *)v22;
                unint64_t v61 = v19;
                goto LABEL_61;
              }
              if (v57 >= 0x20)
              {
                unint64_t v59 = v57 & 0xFFFFFFFFFFFFFFE0;
                uint8x8_t v106 = v19 + 2;
                long long v107 = (int8x16_t *)(v22 + 16);
                unint64_t v108 = v57 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  int8x16_t v110 = v106[-2];
                  int8x16_t v109 = v106[-1];
                  int8x16_t v112 = *v106;
                  int8x16_t v111 = v106[1];
                  v106 += 4;
                  v107[-1] = vuzp1q_s8(v110, v109);
                  *long long v107 = vuzp1q_s8(v112, v111);
                  v107 += 2;
                  v108 -= 32;
                }
                while (v108);
                if (v57 == v59) {
                  goto LABEL_72;
                }
                if ((v57 & 0x18) == 0)
                {
                  unint64_t v61 = (int8x16_t *)((char *)v19 + 2 * v59);
                  uint64_t v60 = (unsigned char *)(v22 + v59);
                  do
                  {
LABEL_61:
                    char v62 = v61->i8[0];
                    unint64_t v61 = (int8x16_t *)((char *)v61 + 2);
                    *v60++ = v62;
                  }
                  while (v60 != v21);
                  goto LABEL_72;
                }
              }
              else
              {
                unint64_t v59 = 0;
              }
              uint64_t v60 = (unsigned char *)(v22 + (v57 & 0xFFFFFFFFFFFFFFF8));
              unint64_t v61 = (int8x16_t *)((char *)v19 + 2 * (v57 & 0xFFFFFFFFFFFFFFF8));
              int8x16_t v113 = (int16x8_t *)((char *)v19 + 2 * v59);
              unint64_t v114 = (int8x8_t *)(v22 + v59);
              unint64_t v115 = v59 - (v57 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                int16x8_t v116 = *v113++;
                *v114++ = vmovn_s16(v116);
                v115 += 8;
              }
              while (v115);
              if (v57 == (v57 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_72;
              }
              goto LABEL_61;
            }
LABEL_41:
            uint64_t v44 = 0;
            goto LABEL_73;
          }
          unsigned char *v16 = a3->i8[0];
        }
        uint64_t v17 = a4;
        uint64_t v18 = &v16[a4];
        if (a5) {
          goto LABEL_9;
        }
        goto LABEL_41;
      }
LABEL_16:
      uint64_t v15 = 0;
      goto LABEL_18;
    }
LABEL_17:
    uint64_t v15 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_18;
  }
  if (!result) {
    goto LABEL_17;
  }
  if (result > 0x7FFFFFEF) {
    goto LABEL_16;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  uint64_t v15 = v127;
  if (!v127) {
    goto LABEL_18;
  }
  unint64_t v25 = v127 + 20;
  *(_DWORD *)uint64_t v127 = 2;
  *(_DWORD *)(v127 + 4) = v13;
  *(void *)(v127 + 8) = v127 + 20;
  *(_DWORD *)(v127 + 16) = 0;
  int v26 = (_WORD *)(v127 + 20 + 2 * a4);
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    unint64_t v27 = v25 + 2 * (a4 & 0xFFFFFFC0);
    long long v28 = 0uLL;
    do
    {
      v128.val[0] = *a3;
      int8x16_t v29 = a3[1];
      v131.val[0] = a3[2];
      int8x16_t v30 = a3[3];
      a3 += 4;
      int8x16_t v31 = v30;
      v131.val[1] = 0uLL;
      v134.val[0] = v29;
      v128.val[1] = 0uLL;
      int8x16_t v32 = (char *)v25;
      vst2q_s8(v32, v128);
      v32 += 32;
      v134.val[1] = 0uLL;
      vst2q_s8(v32, v134);
      int8x16_t v33 = (char *)(v25 + 64);
      vst2q_s8(v33, v131);
      uint64_t v34 = (char *)(v25 + 96);
      vst2q_s8(v34, *(int8x16x2_t *)(&v28 - 1));
      v25 += 128;
    }
    while (v25 != v27);
    unint64_t v25 = v27;
  }
  if ((_WORD *)v25 != v26)
  {
    unint64_t v35 = v127 + 2 * a4 - v25 + 18;
    if (v35 < 0xE
      || (v25 < (unint64_t)a3->u64 + (v35 >> 1) + 1
        ? (BOOL v36 = (unint64_t)a3 >= (v35 & 0xFFFFFFFFFFFFFFFELL) + v25 + 2)
        : (BOOL v36 = 1),
          !v36))
    {
      unint64_t v39 = (_WORD *)v25;
      unint64_t v40 = a3;
      goto LABEL_34;
    }
    uint64_t v37 = (v35 >> 1) + 1;
    if (v35 >= 0x3E)
    {
      unint64_t v38 = v37 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v84 = (uint8x8_t *)&a3[1];
      unint64_t v85 = (uint16x8_t *)(v25 + 32);
      unint64_t v86 = v37 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v87 = *(uint8x16_t *)v84[-2].i8;
        uint16x8_t v88 = vmovl_u8(*v84);
        uint16x8_t v89 = vmovl_high_u8(*(uint8x16_t *)v84->i8);
        v85[-2] = vmovl_u8(*(uint8x8_t *)v87.i8);
        v85[-1] = vmovl_high_u8(v87);
        *unint64_t v85 = v88;
        v85[1] = v89;
        v85 += 4;
        v84 += 4;
        v86 -= 32;
      }
      while (v86);
      if (v37 == v38) {
        goto LABEL_35;
      }
      if ((v37 & 0x18) == 0)
      {
        unint64_t v40 = (int8x16_t *)((char *)a3 + v38);
        unint64_t v39 = (_WORD *)(v25 + 2 * v38);
        do
        {
LABEL_34:
          __int16 v41 = v40->u8[0];
          unint64_t v40 = (int8x16_t *)((char *)v40 + 1);
          *v39++ = v41;
        }
        while (v39 != v26);
        goto LABEL_35;
      }
    }
    else
    {
      unint64_t v38 = 0;
    }
    unint64_t v39 = (_WORD *)(v25 + 2 * (v37 & 0xFFFFFFFFFFFFFFF8));
    unint64_t v40 = (int8x16_t *)((char *)a3 + (v37 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v90 = (uint8x8_t *)&a3->i8[v38];
    uint64_t v91 = (uint16x8_t *)(v25 + 2 * v38);
    unint64_t v92 = v38 - (v37 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v93 = *v90++;
      *v91++ = vmovl_u8(v93);
      v92 += 8;
    }
    while (v92);
    if (v37 != (v37 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_34;
    }
  }
LABEL_35:
  if (!a5)
  {
    uint64_t v45 = 0;
    goto LABEL_79;
  }
  unint64_t v42 = *(int8x16_t **)(a5 + 8);
  uint64_t v43 = *(unsigned int *)(a5 + 4);
  if ((*(unsigned char *)(a5 + 16) & 4) == 0)
  {
    if (v43)
    {
      if (v43 == 1) {
        *int v26 = v42->i16[0];
      }
      else {
        uint64_t result = (uint64_t)memcpy(v26, v42, 2 * v43);
      }
    }
    goto LABEL_78;
  }
  long long v46 = &v26[v43];
  if (v43 < 0x40)
  {
    unint64_t v47 = v127 + 20 + 2 * a4;
  }
  else
  {
    unint64_t v47 = (unint64_t)&v26[v43 & 0xFFFFFFC0];
    long long v48 = 0uLL;
    uint64_t v49 = v127 + 20 + 2 * a4;
    do
    {
      v129.val[0] = *v42;
      int8x16_t v50 = v42[1];
      v132.val[0] = v42[2];
      int8x16_t v51 = v42[3];
      v42 += 4;
      int8x16_t v52 = v51;
      v132.val[1] = 0uLL;
      v135.val[0] = v50;
      v129.val[1] = 0uLL;
      unsigned __int8 v53 = (char *)v49;
      vst2q_s8(v53, v129);
      v53 += 32;
      v135.val[1] = 0uLL;
      vst2q_s8(v53, v135);
      unint64_t v54 = (char *)(v49 + 64);
      vst2q_s8(v54, v132);
      long long v55 = (char *)(v49 + 96);
      vst2q_s8(v55, *(int8x16x2_t *)(&v48 - 1));
      v49 += 128;
    }
    while (v49 != v47);
  }
  if ((_WORD *)v47 != v46)
  {
    unint64_t v63 = v127 + 2 * (a4 + v43) - v47 + 18;
    if (v63 < 0xE
      || v47 < (unint64_t)v42->u64 + (v63 >> 1) + 1
      && (unint64_t)v42 < (v63 & 0xFFFFFFFFFFFFFFFELL) + v47 + 2)
    {
      unint64_t v64 = (_WORD *)v47;
      long long v65 = v42;
      goto LABEL_69;
    }
    uint64_t v104 = (v63 >> 1) + 1;
    if (v63 >= 0x3E)
    {
      unint64_t v105 = v104 & 0xFFFFFFFFFFFFFFE0;
      int16x8_t v117 = (uint8x8_t *)&v42[1];
      uint64_t v118 = (uint16x8_t *)(v47 + 32);
      unint64_t v119 = v104 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v120 = *(uint8x16_t *)v117[-2].i8;
        uint16x8_t v121 = vmovl_u8(*v117);
        uint16x8_t v122 = vmovl_high_u8(*(uint8x16_t *)v117->i8);
        v118[-2] = vmovl_u8(*(uint8x8_t *)v120.i8);
        v118[-1] = vmovl_high_u8(v120);
        *uint64_t v118 = v121;
        v118[1] = v122;
        v118 += 4;
        v117 += 4;
        v119 -= 32;
      }
      while (v119);
      if (v104 == v105) {
        goto LABEL_78;
      }
      if ((v104 & 0x18) == 0)
      {
        long long v65 = (int8x16_t *)((char *)v42 + v105);
        unint64_t v64 = (_WORD *)(v47 + 2 * v105);
        do
        {
LABEL_69:
          __int16 v66 = v65->u8[0];
          long long v65 = (int8x16_t *)((char *)v65 + 1);
          *v64++ = v66;
        }
        while (v64 != v46);
        goto LABEL_78;
      }
    }
    else
    {
      unint64_t v105 = 0;
    }
    unint64_t v64 = (_WORD *)(v47 + 2 * (v104 & 0xFFFFFFFFFFFFFFF8));
    long long v65 = (int8x16_t *)((char *)v42 + (v104 & 0xFFFFFFFFFFFFFFF8));
    uint16x8_t v123 = (uint8x8_t *)&v42->i8[v105];
    uint64_t v124 = (uint16x8_t *)(v47 + 2 * v105);
    unint64_t v125 = v105 - (v104 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v126 = *v123++;
      *v124++ = vmovl_u8(v126);
      v125 += 8;
    }
    while (v125);
    if (v104 == (v104 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_78;
    }
    goto LABEL_69;
  }
LABEL_78:
  uint64_t v45 = *(unsigned int *)(a5 + 4);
LABEL_79:
  unint64_t v67 = (unint64_t)&v26[v45];
  uint64_t v68 = (_WORD *)(v67 + 2 * a7);
  if ((a7 & 0xFFFFFFC0) != 0)
  {
    unint64_t v69 = v67 + 2 * (a7 & 0xFFFFFFC0);
    long long v70 = 0uLL;
    do
    {
      v130.val[0] = *a6;
      int8x16_t v71 = a6[1];
      v133.val[0] = a6[2];
      int8x16_t v72 = a6[3];
      a6 += 4;
      int8x16_t v73 = v72;
      v133.val[1] = 0uLL;
      v136.val[0] = v71;
      v130.val[1] = 0uLL;
      uint64_t v74 = (char *)v67;
      vst2q_s8(v74, v130);
      v74 += 32;
      v136.val[1] = 0uLL;
      vst2q_s8(v74, v136);
      uint64_t v75 = (char *)(v67 + 64);
      vst2q_s8(v75, v133);
      unint64_t v76 = (char *)(v67 + 96);
      vst2q_s8(v76, *(int8x16x2_t *)(&v70 - 1));
      v67 += 128;
    }
    while (v67 != v69);
    unint64_t v67 = v69;
  }
  if ((_WORD *)v67 != v68)
  {
    unint64_t v77 = v127 + 2 * (v45 + a4 + a7) - v67 + 18;
    if (v77 < 0xE
      || (v67 < (unint64_t)a6->u64 + (v77 >> 1) + 1
        ? (BOOL v78 = (unint64_t)a6 >= (v77 & 0xFFFFFFFFFFFFFFFELL) + v67 + 2)
        : (BOOL v78 = 1),
          !v78))
    {
      long long v81 = (_WORD *)v67;
      uint64_t v82 = a6;
      goto LABEL_93;
    }
    uint64_t v79 = (v77 >> 1) + 1;
    if (v77 >= 0x3E)
    {
      unint64_t v80 = v79 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v94 = (uint8x8_t *)&a6[1];
      unint64_t v95 = (uint16x8_t *)(v67 + 32);
      unint64_t v96 = v79 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v97 = *(uint8x16_t *)v94[-2].i8;
        uint16x8_t v98 = vmovl_u8(*v94);
        uint16x8_t v99 = vmovl_high_u8(*(uint8x16_t *)v94->i8);
        v95[-2] = vmovl_u8(*(uint8x8_t *)v97.i8);
        v95[-1] = vmovl_high_u8(v97);
        uint16x8_t *v95 = v98;
        v95[1] = v99;
        v95 += 4;
        v94 += 4;
        v96 -= 32;
      }
      while (v96);
      if (v79 == v80) {
        goto LABEL_18;
      }
      if ((v79 & 0x18) == 0)
      {
        uint64_t v82 = (int8x16_t *)((char *)a6 + v80);
        long long v81 = (_WORD *)(v67 + 2 * v80);
        goto LABEL_93;
      }
    }
    else
    {
      unint64_t v80 = 0;
    }
    long long v81 = (_WORD *)(v67 + 2 * (v79 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v82 = (int8x16_t *)((char *)a6 + (v79 & 0xFFFFFFFFFFFFFFF8));
    uint8x16_t v100 = (uint8x8_t *)&a6->i8[v80];
    uint16x8_t v101 = (uint16x8_t *)(v67 + 2 * v80);
    unint64_t v102 = v80 - (v79 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v103 = *v100++;
      *v101++ = vmovl_u8(v103);
      v102 += 8;
    }
    while (v102);
    if (v79 == (v79 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_18;
    }
    do
    {
LABEL_93:
      __int16 v83 = v82->u8[0];
      uint64_t v82 = (int8x16_t *)((char *)v82 + 1);
      *v81++ = v83;
    }
    while (v81 != v68);
  }
LABEL_18:
  *a8 = v15;
  return result;
}

void WGSL::AST::Parameter::~Parameter(WGSL::AST::Parameter *this, void *a2)
{
  uint64_t v3 = (WTF *)*((void *)this + 9);
  if (v3)
  {
    *((void *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  *((void *)this + 4) = off_1ECABC030;
  unsigned int v4 = (_DWORD *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4)
  {
    if (*v4 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v4 -= 2;
    }
  }
}

{
  WTF *v3;
  _DWORD *v4;
  uint64_t vars8;

  uint64_t v3 = (WTF *)*((void *)this + 9);
  if (v3)
  {
    *((void *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  *((void *)this + 4) = off_1ECABC030;
  unsigned int v4 = (_DWORD *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4)
  {
    if (*v4 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v4 -= 2;
    }
  }
  JUMPOUT(0x18530AFF0);
}

uint64_t WGSL::AST::Parameter::kind(WGSL::AST::Parameter *this)
{
  return 28;
}

void std::__function::__func<void WGSL::ShaderModule::append<WGSL::AST::Parameter &,std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WGSL::AST::Parameter &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::~__func()
{
}

void *std::__function::__func<void WGSL::ShaderModule::append<WGSL::AST::Parameter &,std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WGSL::AST::Parameter &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1ECABC640;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void WGSL::ShaderModule::append<WGSL::AST::Parameter &,std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WGSL::AST::Parameter &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECABC640;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void WGSL::ShaderModule::append<WGSL::AST::Parameter &,std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WGSL::AST::Parameter &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  int v2 = *(_DWORD *)(v1 + 12);
  if (v2) {
    *(_DWORD *)(v1 + 12) = v2 - 1;
  }
  else {
    __break(0xC471u);
  }
  return result;
}

void std::__function::__func<void WGSL::ShaderModule::insertVector<std::reference_wrapper<WGSL::AST::Statement>,0ul,std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long,WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1},std::allocator<void WGSL::ShaderModule::insertVector<std::reference_wrapper<WGSL::AST::Statement>,0ul,std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long,WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<void WGSL::ShaderModule::insertVector<std::reference_wrapper<WGSL::AST::Statement>,0ul,std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long,WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1},std::allocator<void WGSL::ShaderModule::insertVector<std::reference_wrapper<WGSL::AST::Statement>,0ul,std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long,WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x20uLL);
  *(void *)int v2 = &unk_1ECABC688;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void WGSL::ShaderModule::insertVector<std::reference_wrapper<WGSL::AST::Statement>,0ul,std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long,WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1},std::allocator<void WGSL::ShaderModule::insertVector<std::reference_wrapper<WGSL::AST::Statement>,0ul,std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long,WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1ECABC688;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<void WGSL::ShaderModule::insertVector<std::reference_wrapper<WGSL::AST::Statement>,0ul,std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long,WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1},std::allocator<void WGSL::ShaderModule::insertVector<std::reference_wrapper<WGSL::AST::Statement>,0ul,std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long,WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1}>,void ()(void)>::operator()(void *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v2 = a1[3];
  uint64_t v3 = (char *)(*(void *)v1 + 8 * a1[2]);
  __n128 result = memmove(v3, &v3[8 * v2], *(void *)v1 + 8 * *(unsigned int *)(v1 + 12) - (void)&v3[8 * v2]);
  *(_DWORD *)(v1 + 12) -= v2;
  return result;
}

uint64_t std::__function::__func<void WGSL::ShaderModule::clear<std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1},std::allocator<void WGSL::ShaderModule::clear<std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1ECABC6D0;
  uint64_t v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  return a1;
}

void std::__function::__func<void WGSL::ShaderModule::clear<std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1},std::allocator<void WGSL::ShaderModule::clear<std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1ECABC6D0;
  uint64_t v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  JUMPOUT(0x18530AFF0);
}

void *std::__function::__func<void WGSL::ShaderModule::clear<std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1},std::allocator<void WGSL::ShaderModule::clear<std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x20uLL);
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a1 + 8);
  *__n128 result = &unk_1ECABC6D0;
  result[1] = v4;
  uint64_t v5 = *(unsigned int *)(a1 + 28);
  result[2] = 0;
  result[3] = 0;
  *((_DWORD *)result + 7) = v5;
  if (!v5) {
    return v3;
  }
  if (!(v5 >> 29))
  {
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
    *((_DWORD *)v3 + 6) = v5;
    v3[2] = v6;
    uint64_t v7 = *(unsigned int *)(a1 + 28);
    if (v7)
    {
      uint64_t v8 = *(void *)(a1 + 16);
      unint64_t v9 = (v7 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v9 < 3)
      {
        unint64_t v10 = *(uint64_t **)(a1 + 16);
      }
      else
      {
        unint64_t v10 = *(uint64_t **)(a1 + 16);
        if ((unint64_t)v6 - v8 >= 0x20)
        {
          unint64_t v11 = v9 + 1;
          uint64_t v12 = v11 & 0x3FFFFFFFFFFFFFFCLL;
          int v13 = &v6[v12];
          unint64_t v10 = (uint64_t *)(v8 + v12 * 8);
          uint64_t v14 = (long long *)(v8 + 16);
          uint64_t v15 = v6 + 2;
          uint64_t v16 = v11 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v17 = *v14;
            *(v15 - 1) = *(v14 - 1);
            *uint64_t v15 = v17;
            v14 += 2;
            v15 += 2;
            v16 -= 4;
          }
          while (v16);
          uint64_t v6 = v13;
          if (v11 == (v11 & 0x3FFFFFFFFFFFFFFCLL)) {
            return v3;
          }
        }
      }
      uint64_t v18 = (uint64_t *)(v8 + 8 * v7);
      do
      {
        uint64_t v19 = *v10++;
        *v6++ = v19;
      }
      while (v10 != v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::__function::__func<void WGSL::ShaderModule::clear<std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1},std::allocator<void WGSL::ShaderModule::clear<std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = &unk_1ECABC6D0;
  *(void *)(a2 + 8) = v2;
  uint64_t v3 = *(unsigned int *)(result + 28);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 28) = v3;
  if (v3)
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v5 = result;
    __n128 result = WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(a2 + 24) = v3;
    *(void *)(a2 + 16) = result;
    uint64_t v6 = *(unsigned int *)(v5 + 28);
    if (v6)
    {
      uint64_t v7 = *(void *)(v5 + 16);
      unint64_t v8 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v8 < 3)
      {
        unint64_t v9 = *(uint64_t **)(v5 + 16);
      }
      else
      {
        unint64_t v9 = *(uint64_t **)(v5 + 16);
        if ((unint64_t)(result - v7) >= 0x20)
        {
          unint64_t v10 = v8 + 1;
          uint64_t v11 = 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v12 = result + v11;
          unint64_t v9 = (uint64_t *)(v7 + v11);
          int v13 = (long long *)(v7 + 16);
          uint64_t v14 = (_OWORD *)(result + 16);
          uint64_t v15 = v10 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v16 = *v13;
            *(v14 - 1) = *(v13 - 1);
            *uint64_t v14 = v16;
            v13 += 2;
            v14 += 2;
            v15 -= 4;
          }
          while (v15);
          __n128 result = v12;
          if (v10 == (v10 & 0x3FFFFFFFFFFFFFFCLL)) {
            return result;
          }
        }
      }
      long long v17 = (uint64_t *)(v7 + 8 * v6);
      do
      {
        uint64_t v18 = *v9++;
        *(void *)__n128 result = v18;
        result += 8;
      }
      while (v9 != v17);
    }
  }
  return result;
}

WTF *std::__function::__func<void WGSL::ShaderModule::clear<std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1},std::allocator<void WGSL::ShaderModule::clear<std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1, void *a2)
{
  __n128 result = *(WTF **)(a1 + 16);
  if (result)
  {
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void std::__function::__func<void WGSL::ShaderModule::clear<std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1},std::allocator<void WGSL::ShaderModule::clear<std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *__p, void *a2)
{
  uint64_t v3 = (WTF *)__p[2];
  if (v3)
  {
    __p[2] = 0;
    *((_DWORD *)__p + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  operator delete(__p);
}

uint64_t std::__function::__func<void WGSL::ShaderModule::clear<std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1},std::allocator<void WGSL::ShaderModule::clear<std::reference_wrapper<WGSL::AST::Parameter>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Parameter>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t result, void *a2)
{
  uint64_t v2 = (const void **)(result + 16);
  uint64_t v3 = *(void *)(result + 8);
  if (result + 16 != v3)
  {
    uint64_t v4 = result;
    unsigned int v5 = *(_DWORD *)(v3 + 12);
    unsigned int v6 = *(_DWORD *)(result + 28);
    if (v5 <= v6)
    {
      unsigned int v9 = *(_DWORD *)(v3 + 8);
      if (v6 > v9)
      {
        if (v9)
        {
          if (v5) {
            *(_DWORD *)(v3 + 12) = 0;
          }
          __n128 result = *(void *)v3;
          if (*(void *)v3)
          {
            *(void *)uint64_t v3 = 0;
            *(_DWORD *)(v3 + 8) = 0;
            __n128 result = WTF::fastFree((WTF *)result, a2);
            unsigned int v9 = *(_DWORD *)(v3 + 8);
          }
        }
        uint64_t v10 = *(unsigned int *)(v4 + 28);
        if (v9 < v10)
        {
          if (v10 >> 29)
          {
            __break(0xC471u);
            return result;
          }
          uint64_t v11 = *(void **)v3;
          uint64_t v12 = *(unsigned int *)(v3 + 12);
          int v13 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
          *(_DWORD *)(v3 + 8) = v10;
          *(void *)uint64_t v3 = v13;
          memcpy(v13, v11, 8 * v12);
          if (v11)
          {
            if (*(void **)v3 == v11)
            {
              *(void *)uint64_t v3 = 0;
              *(_DWORD *)(v3 + 8) = 0;
            }
            WTF::fastFree((WTF *)v11, v14);
          }
        }
      }
      unsigned int v6 = *(_DWORD *)(v3 + 12);
      __n128 result = *(void *)v3;
      if (v6)
      {
LABEL_4:
        memmove((void *)result, *v2, 8 * v6);
        unsigned int v7 = *(_DWORD *)(v3 + 12);
        __n128 result = *(void *)v3;
        uint64_t v8 = *(unsigned int *)(v4 + 28);
        if (v7 == v8) {
          goto LABEL_28;
        }
        goto LABEL_20;
      }
    }
    else
    {
      *(_DWORD *)(v3 + 12) = v6;
      __n128 result = *(void *)v3;
      if (v6) {
        goto LABEL_4;
      }
    }
    unsigned int v7 = 0;
    uint64_t v8 = *(unsigned int *)(v4 + 28);
    if (!v8)
    {
LABEL_28:
      *(_DWORD *)(v3 + 12) = v7;
      return result;
    }
LABEL_20:
    uint64_t v15 = *(void *)(v4 + 16);
    uint64_t v16 = 8 * v7;
    long long v17 = (void *)(result + v16);
    uint64_t v18 = (uint64_t *)(v15 + v16);
    unint64_t v19 = 8 * v8 - v16 - 8;
    if (v19 < 0x48) {
      goto LABEL_25;
    }
    if ((unint64_t)(result - v15) < 0x20) {
      goto LABEL_25;
    }
    uint64_t v20 = (v19 >> 3) + 1;
    uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    long long v17 = (void *)((char *)v17 + v21);
    uint64_t v18 = (uint64_t *)((char *)v18 + v21);
    uint64_t v22 = v16 + 16;
    long long v23 = (long long *)(v15 + v16 + 16);
    unsigned long long v24 = (_OWORD *)(result + v22);
    uint64_t v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *v23;
      *(v24 - 1) = *(v23 - 1);
      *unsigned long long v24 = v26;
      v23 += 2;
      v24 += 2;
      v25 -= 4;
    }
    while (v25);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_25:
      unint64_t v27 = (uint64_t *)(v15 + 8 * v8);
      do
      {
        uint64_t v28 = *v18++;
        *v17++ = v28;
      }
      while (v18 != v27);
    }
    unsigned int v7 = *(_DWORD *)(v4 + 28);
    goto LABEL_28;
  }
  return result;
}

void WGSL::AST::Structure::~Structure(WGSL::AST::Structure *this, void *a2)
{
  uint64_t v3 = (WTF *)*((void *)this + 9);
  if (v3)
  {
    *((void *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = (WTF *)*((void *)this + 7);
  if (v4)
  {
    *((void *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  *((void *)this + 3) = off_1ECABC030;
  unsigned int v5 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v5)
  {
    if (*v5 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v5 -= 2;
    }
  }
}

{
  WTF *v3;
  WTF *v4;
  _DWORD *v5;
  uint64_t vars8;

  uint64_t v3 = (WTF *)*((void *)this + 9);
  if (v3)
  {
    *((void *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = (WTF *)*((void *)this + 7);
  if (v4)
  {
    *((void *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  *((void *)this + 3) = off_1ECABC030;
  unsigned int v5 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v5)
  {
    if (*v5 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v5 -= 2;
    }
  }
  JUMPOUT(0x18530AFF0);
}

uint64_t WGSL::AST::Structure::kind(WGSL::AST::Structure *this)
{
  return 56;
}

void std::__function::__func<void WGSL::ShaderModule::append<WGSL::AST::Structure &,std::reference_wrapper<WGSL::AST::Declaration>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Declaration>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WGSL::AST::Structure &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::~__func()
{
}

void *std::__function::__func<void WGSL::ShaderModule::append<WGSL::AST::Structure &,std::reference_wrapper<WGSL::AST::Declaration>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Declaration>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WGSL::AST::Structure &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1ECABC748;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void WGSL::ShaderModule::append<WGSL::AST::Structure &,std::reference_wrapper<WGSL::AST::Declaration>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Declaration>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WGSL::AST::Structure &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECABC748;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void WGSL::ShaderModule::append<WGSL::AST::Structure &,std::reference_wrapper<WGSL::AST::Declaration>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Declaration>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WGSL::AST::Structure &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  int v2 = *(_DWORD *)(v1 + 12);
  if (v2) {
    *(_DWORD *)(v1 + 12) = v2 - 1;
  }
  else {
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceIKNS2_3AST20IdentifierExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1ECABC7E8;
  *(void *)(a1 + 80) = off_1ECABC030;
  int v2 = *(_DWORD **)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v2)
  {
    if (*v2 == 2)
    {
      WTF::StringImpl::destroy();
      *(void *)(a1 + 16) = &unk_1ECABBFE0;
      if (!*(unsigned char *)(a1 + 72)) {
        return a1;
      }
      goto LABEL_7;
    }
    *v2 -= 2;
  }
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (!*(unsigned char *)(a1 + 72)) {
    return a1;
  }
LABEL_7:
  uint64_t v4 = *(unsigned int *)(a1 + 64);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1ECABC5B0[v4])(&v5, a1 + 48);
  }
  *(_DWORD *)(a1 + 64) = -1;
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceIKNS2_3AST20IdentifierExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1ECABC7E8;
  *(void *)(a1 + 80) = off_1ECABC030;
  int v2 = *(_DWORD **)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v2)
  {
    if (*v2 == 2)
    {
      WTF::StringImpl::destroy();
      *(void *)(a1 + 16) = &unk_1ECABBFE0;
      if (!*(unsigned char *)(a1 + 72)) {
        return MEMORY[0x18530AFF0](a1, 0x10F3C40815FE5B7);
      }
      goto LABEL_7;
    }
    *v2 -= 2;
  }
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (!*(unsigned char *)(a1 + 72)) {
    return MEMORY[0x18530AFF0](a1, 0x10F3C40815FE5B7);
  }
LABEL_7:
  uint64_t v3 = *(unsigned int *)(a1 + 64);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_1ECABC5B0[v3])(&v5, a1 + 48);
  }
  *(_DWORD *)(a1 + 64) = -1;
  return MEMORY[0x18530AFF0](a1, 0x10F3C40815FE5B7);
}

char *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceIKNS2_3AST20IdentifierExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEv(uint64_t a1)
{
  int v2 = (char *)operator new(0x70uLL);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)int v2 = &unk_1ECABC7E8;
  *((void *)v2 + 1) = v4;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((void *)v2 + 2) = &unk_1ECABBFE0;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  v2[48] = 0;
  v2[72] = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    *((_DWORD *)v2 + 16) = -1;
    uint64_t v5 = *(unsigned int *)(a1 + 64);
    if (v5 != -1)
    {
      ((void (*)(char *, char *, uint64_t))off_1ECABC820[v5])(&v8, v2 + 48, a1 + 48);
      *((_DWORD *)v3 + 16) = v5;
    }
    v3[72] = 1;
  }
  *((void *)v3 + 2) = off_1ECABBFB8;
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a1 + 88);
  *((void *)v3 + 10) = off_1ECABC030;
  unsigned int v6 = *(_DWORD **)(a1 + 104);
  if (v6) {
    *v6 += 2;
  }
  *((void *)v3 + 13) = v6;
  return v3;
}

uint64_t _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceIKNS2_3AST20IdentifierExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEPNS0_6__baseISJ_EE(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  *(void *)a2 = &unk_1ECABC7E8;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = &unk_1ECABC008;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  *(void *)(a2 + 16) = &unk_1ECABBFE0;
  uint64_t v5 = *(void *)(result + 40);
  *(unsigned char *)(a2 + 48) = 0;
  uint64_t v6 = a2 + 48;
  *(void *)(v6 - 8) = v5;
  *(unsigned char *)(v6 + 24) = 0;
  if (*(unsigned char *)(result + 72))
  {
    *(_DWORD *)(a2 + 64) = -1;
    uint64_t v7 = *(unsigned int *)(result + 64);
    if (v7 != -1)
    {
      __n128 result = ((uint64_t (*)(char *))off_1ECABC820[v7])(&v9);
      *(_DWORD *)(a2 + 64) = v7;
    }
    *(unsigned char *)(a2 + 72) = 1;
  }
  *(void *)(a2 + 16) = off_1ECABBFB8;
  *(void *)(a2 + 80) = &unk_1ECABC008;
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(v3 + 88);
  *(void *)(a2 + 80) = off_1ECABC030;
  char v8 = *(_DWORD **)(v3 + 104);
  if (v8) {
    *v8 += 2;
  }
  *(void *)(a2 + 104) = v8;
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceIKNS2_3AST20IdentifierExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7destroyEv(uint64_t a1)
{
  *(void *)(a1 + 80) = off_1ECABC030;
  __n128 result = *(_DWORD **)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (result)
  {
    if (*result == 2)
    {
      __n128 result = (_DWORD *)WTF::StringImpl::destroy();
      *(void *)(a1 + 16) = &unk_1ECABBFE0;
      if (!*(unsigned char *)(a1 + 72)) {
        return result;
      }
      goto LABEL_7;
    }
    *result -= 2;
  }
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (!*(unsigned char *)(a1 + 72)) {
    return result;
  }
LABEL_7:
  uint64_t v3 = *(unsigned int *)(a1 + 64);
  if (v3 != -1) {
    __n128 result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1ECABC5B0[v3])(&v4, a1 + 48);
  }
  *(_DWORD *)(a1 + 64) = -1;
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceIKNS2_3AST20IdentifierExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE18destroy_deallocateEv(void *__p)
{
  __p[10] = off_1ECABC030;
  int v2 = (_DWORD *)__p[13];
  __p[13] = 0;
  if (v2)
  {
    if (*v2 == 2)
    {
      WTF::StringImpl::destroy();
      __p[2] = &unk_1ECABBFE0;
      if (!*((unsigned char *)__p + 72)) {
        goto LABEL_5;
      }
      goto LABEL_7;
    }
    *v2 -= 2;
  }
  __p[2] = &unk_1ECABBFE0;
  if (!*((unsigned char *)__p + 72))
  {
LABEL_5:
    operator delete(__p);
    return;
  }
LABEL_7:
  uint64_t v3 = *((unsigned int *)__p + 16);
  if (v3 == -1) {
    goto LABEL_5;
  }
  ((void (*)(char *, void *))off_1ECABC5B0[v3])(&v4, __p + 6);
  operator delete(__p);
}

__n128 _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceIKNS2_3AST20IdentifierExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEEclEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(v2 + 64) = off_1ECABC030;
  uint64_t v3 = *(_DWORD **)(v2 + 88);
  *(void *)(v2 + 88) = 0;
  if (!v3)
  {
LABEL_4:
    *(void *)uint64_t v2 = &unk_1ECABBFE0;
    if (!*(unsigned char *)(v2 + 56)) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  if (*v3 != 2)
  {
    *v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy();
  *(void *)uint64_t v2 = &unk_1ECABBFE0;
  if (!*(unsigned char *)(v2 + 56)) {
    goto LABEL_10;
  }
LABEL_7:
  uint64_t v4 = *(unsigned int *)(v2 + 48);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1ECABC5B0[v4])(&v9, v2 + 32);
  }
  *(_DWORD *)(v2 + 48) = -1;
LABEL_10:
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)uint64_t v5 = &unk_1ECABC008;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)(a1 + 24);
  *(void *)uint64_t v5 = &unk_1ECABBFE0;
  *(void *)(v5 + 24) = *(void *)(a1 + 40);
  *(unsigned char *)(v5 + 32) = 0;
  *(unsigned char *)(v5 + 56) = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    *(_DWORD *)(v5 + 48) = -1;
    uint64_t v6 = *(unsigned int *)(a1 + 64);
    if (v6 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1ECABC780[v6])(&v10, v5 + 32, a1 + 48);
      *(_DWORD *)(v5 + 48) = v6;
    }
    *(unsigned char *)(v5 + 56) = 1;
  }
  *(void *)uint64_t v5 = off_1ECABBFB8;
  *(void *)(v5 + 64) = &unk_1ECABC008;
  __n128 result = *(__n128 *)(a1 + 88);
  *(__n128 *)(v5 + 72) = result;
  *(void *)(v5 + 64) = off_1ECABC030;
  uint64_t v8 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  *(void *)(v5 + 88) = v8;
  return result;
}

void WGSL::AST::StructureMember::~StructureMember(WGSL::AST::StructureMember *this, void *a2)
{
  uint64_t v3 = (WTF *)*((void *)this + 11);
  if (v3)
  {
    *((void *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  *((void *)this + 7) = off_1ECABC030;
  uint64_t v4 = (_DWORD *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4)
  {
    if (*v4 == 2)
    {
      WTF::StringImpl::destroy();
      *((void *)this + 3) = off_1ECABC030;
      uint64_t v5 = (_DWORD *)*((void *)this + 6);
      *((void *)this + 6) = 0;
      if (!v5) {
        return;
      }
      goto LABEL_9;
    }
    *v4 -= 2;
  }
  *((void *)this + 3) = off_1ECABC030;
  uint64_t v5 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (!v5) {
    return;
  }
LABEL_9:
  if (*v5 == 2) {
    WTF::StringImpl::destroy();
  }
  else {
    *v5 -= 2;
  }
}

{
  WTF *v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t vars8;

  uint64_t v3 = (WTF *)*((void *)this + 11);
  if (v3)
  {
    *((void *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  *((void *)this + 7) = off_1ECABC030;
  uint64_t v4 = (_DWORD *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4)
  {
    if (*v4 == 2)
    {
      WTF::StringImpl::destroy();
      *((void *)this + 3) = off_1ECABC030;
      uint64_t v5 = (_DWORD *)*((void *)this + 6);
      *((void *)this + 6) = 0;
      if (!v5) {
        goto LABEL_12;
      }
      goto LABEL_9;
    }
    *v4 -= 2;
  }
  *((void *)this + 3) = off_1ECABC030;
  uint64_t v5 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (!v5)
  {
LABEL_12:
    JUMPOUT(0x18530AFF0);
  }
LABEL_9:
  if (*v5 == 2) {
    WTF::StringImpl::destroy();
  }
  else {
    *v5 -= 2;
  }
  goto LABEL_12;
}

uint64_t WGSL::AST::StructureMember::kind(WGSL::AST::StructureMember *this)
{
  return 57;
}

void WGSL::AST::FieldAccessExpression::~FieldAccessExpression(WGSL::AST::FieldAccessExpression *this)
{
  *((void *)this + 13) = off_1ECABC030;
  uint64_t v2 = (_DWORD *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (!v2)
  {
LABEL_4:
    *((void *)this + 9) = off_1ECABC030;
    uint64_t v3 = (_DWORD *)*((void *)this + 12);
    *((void *)this + 12) = 0;
    if (!v3) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  if (*v2 != 2)
  {
    *v2 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy();
  *((void *)this + 9) = off_1ECABC030;
  uint64_t v3 = (_DWORD *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (!v3) {
    goto LABEL_9;
  }
LABEL_7:
  if (*v3 == 2)
  {
    WTF::StringImpl::destroy();
    *(void *)this = &unk_1ECABBFE0;
    if (!*((unsigned char *)this + 56)) {
      return;
    }
    goto LABEL_12;
  }
  *v3 -= 2;
LABEL_9:
  *(void *)this = &unk_1ECABBFE0;
  if (!*((unsigned char *)this + 56)) {
    return;
  }
LABEL_12:
  uint64_t v4 = *((unsigned int *)this + 12);
  if (v4 != -1) {
    ((void (*)(char *, char *))off_1ECABC5B0[v4])(&v5, (char *)this + 32);
  }
  *((_DWORD *)this + 12) = -1;
}

{
  _DWORD *v2;
  _DWORD *v3;
  uint64_t v4;
  char v5;

  *((void *)this + 13) = off_1ECABC030;
  uint64_t v2 = (_DWORD *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (!v2)
  {
LABEL_4:
    *((void *)this + 9) = off_1ECABC030;
    uint64_t v3 = (_DWORD *)*((void *)this + 12);
    *((void *)this + 12) = 0;
    if (!v3) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  if (*v2 != 2)
  {
    *v2 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy();
  *((void *)this + 9) = off_1ECABC030;
  uint64_t v3 = (_DWORD *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (!v3) {
    goto LABEL_9;
  }
LABEL_7:
  if (*v3 == 2)
  {
    WTF::StringImpl::destroy();
    *(void *)this = &unk_1ECABBFE0;
    if (!*((unsigned char *)this + 56)) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  *v3 -= 2;
LABEL_9:
  *(void *)this = &unk_1ECABBFE0;
  if (!*((unsigned char *)this + 56)) {
    goto LABEL_15;
  }
LABEL_12:
  uint64_t v4 = *((unsigned int *)this + 12);
  if (v4 != -1) {
    ((void (*)(char *, char *))off_1ECABC5B0[v4])(&v5, (char *)this + 32);
  }
  *((_DWORD *)this + 12) = -1;
LABEL_15:
  MEMORY[0x18530AFF0](this, 0x10F3C402962E6BCLL);
}

uint64_t WGSL::AST::FieldAccessExpression::kind(WGSL::AST::FieldAccessExpression *this)
{
  return 21;
}

void WGSL::AST::Variable::~Variable(WGSL::AST::Variable *this, void *a2)
{
  uint64_t v3 = (WTF *)*((void *)this + 11);
  if (v3)
  {
    *((void *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  *((void *)this + 7) = off_1ECABC030;
  uint64_t v4 = (_DWORD *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4)
  {
    if (*v4 == 2)
    {
      WTF::StringImpl::destroy();
      *((void *)this + 3) = off_1ECABC030;
      char v5 = (_DWORD *)*((void *)this + 6);
      *((void *)this + 6) = 0;
      if (!v5) {
        return;
      }
      goto LABEL_9;
    }
    *v4 -= 2;
  }
  *((void *)this + 3) = off_1ECABC030;
  char v5 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (!v5) {
    return;
  }
LABEL_9:
  if (*v5 == 2) {
    WTF::StringImpl::destroy();
  }
  else {
    *v5 -= 2;
  }
}

{
  WTF *v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t vars8;

  uint64_t v3 = (WTF *)*((void *)this + 11);
  if (v3)
  {
    *((void *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  *((void *)this + 7) = off_1ECABC030;
  uint64_t v4 = (_DWORD *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4)
  {
    if (*v4 == 2)
    {
      WTF::StringImpl::destroy();
      *((void *)this + 3) = off_1ECABC030;
      char v5 = (_DWORD *)*((void *)this + 6);
      *((void *)this + 6) = 0;
      if (!v5) {
        goto LABEL_12;
      }
      goto LABEL_9;
    }
    *v4 -= 2;
  }
  *((void *)this + 3) = off_1ECABC030;
  char v5 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (!v5)
  {
LABEL_12:
    JUMPOUT(0x18530AFF0);
  }
LABEL_9:
  if (*v5 == 2) {
    WTF::StringImpl::destroy();
  }
  else {
    *v5 -= 2;
  }
  goto LABEL_12;
}

uint64_t WGSL::AST::Variable::kind(WGSL::AST::Variable *this)
{
  return 62;
}

uint64_t WGSL::AST::Variable::name(WGSL::AST::Variable *this)
{
  return (uint64_t)this + 24;
}

void WGSL::AST::VariableStatement::~VariableStatement(WGSL::AST::VariableStatement *this)
{
}

uint64_t WGSL::AST::VariableStatement::kind(WGSL::AST::VariableStatement *this)
{
  return 54;
}

void WGSL::AST::AssignmentStatement::~AssignmentStatement(WGSL::AST::AssignmentStatement *this)
{
}

uint64_t WGSL::AST::AssignmentStatement::kind(WGSL::AST::AssignmentStatement *this)
{
  return 38;
}

unint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(unint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  int v9 = result;
  if (!a2)
  {
    if (!result) {
      goto LABEL_11;
    }
    if (result > 0x7FFFFFEF) {
      goto LABEL_10;
    }
    __n128 result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
    uint64_t v11 = v88;
    if (!v88) {
      goto LABEL_12;
    }
    unint64_t v13 = v88 + 20;
    *(_DWORD *)uint64_t v88 = 2;
    *(_DWORD *)(v88 + 4) = v9;
    *(void *)(v88 + 8) = v88 + 20;
    *(_DWORD *)(v88 + 16) = 0;
    __n128 result = v88 + 20 + 2 * a4;
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      unint64_t v14 = v13 + 2 * (a4 & 0xFFFFFFC0);
      long long v15 = 0uLL;
      do
      {
        v89.val[0] = *a3;
        int8x16_t v16 = a3[1];
        v91.val[0] = a3[2];
        int8x16_t v17 = a3[3];
        a3 += 4;
        int8x16_t v18 = v17;
        v91.val[1] = 0uLL;
        v93.val[0] = v16;
        v89.val[1] = 0uLL;
        unint64_t v19 = (char *)v13;
        vst2q_s8(v19, v89);
        v19 += 32;
        v93.val[1] = 0uLL;
        vst2q_s8(v19, v93);
        uint64_t v20 = (char *)(v13 + 64);
        vst2q_s8(v20, v91);
        uint64_t v21 = (char *)(v13 + 96);
        vst2q_s8(v21, *(int8x16x2_t *)(&v15 - 1));
        v13 += 128;
      }
      while (v13 != v14);
      unint64_t v13 = v14;
    }
    if (v13 != result)
    {
      unint64_t v22 = v88 + 2 * a4 - v13 + 18;
      if (v22 < 0xE
        || (v13 < (unint64_t)a3->u64 + (v22 >> 1) + 1
          ? (BOOL v23 = (unint64_t)a3 >= (v22 & 0xFFFFFFFFFFFFFFFELL) + v13 + 2)
          : (BOOL v23 = 1),
            !v23))
      {
        long long v26 = (_WORD *)v13;
        unint64_t v27 = a3;
        goto LABEL_28;
      }
      uint64_t v24 = (v22 >> 1) + 1;
      if (v22 >= 0x3E)
      {
        unint64_t v25 = v24 & 0xFFFFFFFFFFFFFFE0;
        long long v55 = (uint8x8_t *)&a3[1];
        size_t v56 = (uint16x8_t *)(v13 + 32);
        unint64_t v57 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          uint8x16_t v58 = *(uint8x16_t *)v55[-2].i8;
          uint16x8_t v59 = vmovl_u8(*v55);
          uint16x8_t v60 = vmovl_high_u8(*(uint8x16_t *)v55->i8);
          v56[-2] = vmovl_u8(*(uint8x8_t *)v58.i8);
          v56[-1] = vmovl_high_u8(v58);
          *size_t v56 = v59;
          v56[1] = v60;
          v56 += 4;
          v55 += 4;
          v57 -= 32;
        }
        while (v57);
        if (v24 == v25) {
          goto LABEL_29;
        }
        if ((v24 & 0x18) == 0)
        {
          unint64_t v27 = (int8x16_t *)((char *)a3 + v25);
          long long v26 = (_WORD *)(v13 + 2 * v25);
          do
          {
LABEL_28:
            __int16 v28 = v27->u8[0];
            unint64_t v27 = (int8x16_t *)((char *)v27 + 1);
            *v26++ = v28;
          }
          while (v26 != (_WORD *)result);
          goto LABEL_29;
        }
      }
      else
      {
        unint64_t v25 = 0;
      }
      long long v26 = (_WORD *)(v13 + 2 * (v24 & 0xFFFFFFFFFFFFFFF8));
      unint64_t v27 = (int8x16_t *)((char *)a3 + (v24 & 0xFFFFFFFFFFFFFFF8));
      unint64_t v61 = (uint8x8_t *)&a3->i8[v25];
      char v62 = (uint16x8_t *)(v13 + 2 * v25);
      unint64_t v63 = v25 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint8x8_t v64 = *v61++;
        *v62++ = vmovl_u8(v64);
        v63 += 8;
      }
      while (v63);
      if (v24 != (v24 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_28;
      }
    }
LABEL_29:
    if (!a5) {
      goto LABEL_12;
    }
    int8x16_t v29 = *(int8x16_t **)(a5 + 8);
    uint64_t v30 = *(unsigned int *)(a5 + 4);
    if ((*(unsigned char *)(a5 + 16) & 4) == 0)
    {
      if (!v30) {
        goto LABEL_12;
      }
      if (v30 == 1)
      {
        *(_WORD *)__n128 result = v29->i16[0];
        goto LABEL_12;
      }
      size_t v31 = 2 * v30;
LABEL_68:
      __n128 result = (unint64_t)memcpy((void *)result, v29, v31);
      goto LABEL_12;
    }
    unint64_t v39 = (_WORD *)(result + 2 * v30);
    if (v30 >= 0x40)
    {
      unint64_t v40 = result + 2 * (v30 & 0xFFFFFFC0);
      long long v41 = 0uLL;
      do
      {
        v90.val[0] = *v29;
        int8x16_t v42 = v29[1];
        v92.val[0] = v29[2];
        int8x16_t v43 = v29[3];
        v29 += 4;
        int8x16_t v44 = v43;
        v92.val[1] = 0uLL;
        v94.val[0] = v42;
        v90.val[1] = 0uLL;
        uint64_t v45 = (char *)result;
        vst2q_s8(v45, v90);
        v45 += 32;
        v94.val[1] = 0uLL;
        vst2q_s8(v45, v94);
        long long v46 = (char *)(result + 64);
        vst2q_s8(v46, v92);
        unint64_t v47 = (char *)(result + 96);
        vst2q_s8(v47, *(int8x16x2_t *)(&v41 - 1));
        result += 128;
      }
      while (result != v40);
      __n128 result = v40;
    }
    if ((_WORD *)result == v39) {
      goto LABEL_12;
    }
    unint64_t v48 = v88 + 2 * (a4 + v30) - result + 18;
    if (v48 < 0xE
      || result < (unint64_t)v29->u64 + (v48 >> 1) + 1
      && (unint64_t)v29 < (v48 & 0xFFFFFFFFFFFFFFFELL) + result + 2)
    {
      uint64_t v49 = (_WORD *)result;
      int8x16_t v50 = v29;
      goto LABEL_62;
    }
    uint64_t v65 = (v48 >> 1) + 1;
    if (v48 >= 0x3E)
    {
      unint64_t v66 = v65 & 0xFFFFFFFFFFFFFFE0;
      BOOL v78 = (uint8x8_t *)&v29[1];
      uint64_t v79 = (uint16x8_t *)(result + 32);
      unint64_t v80 = v65 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v81 = *(uint8x16_t *)v78[-2].i8;
        uint16x8_t v82 = vmovl_u8(*v78);
        uint16x8_t v83 = vmovl_high_u8(*(uint8x16_t *)v78->i8);
        v79[-2] = vmovl_u8(*(uint8x8_t *)v81.i8);
        v79[-1] = vmovl_high_u8(v81);
        *uint64_t v79 = v82;
        v79[1] = v83;
        v79 += 4;
        v78 += 4;
        v80 -= 32;
      }
      while (v80);
      if (v65 == v66) {
        goto LABEL_12;
      }
      if ((v65 & 0x18) == 0)
      {
        int8x16_t v50 = (int8x16_t *)((char *)v29 + v66);
        uint64_t v49 = (_WORD *)(result + 2 * v66);
        goto LABEL_62;
      }
    }
    else
    {
      unint64_t v66 = 0;
    }
    uint64_t v49 = (_WORD *)(result + 2 * (v65 & 0xFFFFFFFFFFFFFFF8));
    int8x16_t v50 = (int8x16_t *)((char *)v29 + (v65 & 0xFFFFFFFFFFFFFFF8));
    unint64_t v84 = (uint8x8_t *)&v29->i8[v66];
    unint64_t v85 = (uint16x8_t *)(result + 2 * v66);
    unint64_t v86 = v66 - (v65 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v87 = *v84++;
      *v85++ = vmovl_u8(v87);
      v86 += 8;
    }
    while (v86);
    if (v65 == (v65 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_12;
    }
    do
    {
LABEL_62:
      __int16 v51 = v50->u8[0];
      int8x16_t v50 = (int8x16_t *)((char *)v50 + 1);
      *v49++ = v51;
    }
    while (v49 != v39);
    goto LABEL_12;
  }
  if (!result)
  {
LABEL_11:
    uint64_t v11 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_12;
  }
  if ((result & 0x80000000) != 0)
  {
LABEL_10:
    uint64_t v11 = 0;
    goto LABEL_12;
  }
  __n128 result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
  uint64_t v11 = v88;
  if (!v88) {
    goto LABEL_12;
  }
  uint64_t v12 = (unsigned char *)(v88 + 20);
  *(_DWORD *)uint64_t v88 = 2;
  *(_DWORD *)(v88 + 4) = v9;
  *(void *)(v88 + 8) = v88 + 20;
  *(_DWORD *)(v88 + 16) = 4;
  if (a4)
  {
    if (a4 == 1) {
      *uint64_t v12 = a3->i8[0];
    }
    else {
      __n128 result = (unint64_t)memcpy((void *)(v88 + 20), a3, a4);
    }
  }
  if (!a5) {
    goto LABEL_12;
  }
  __n128 result = (unint64_t)&v12[a4];
  int8x16_t v29 = *(int8x16_t **)(a5 + 8);
  size_t v31 = *(unsigned int *)(a5 + 4);
  if ((*(unsigned char *)(a5 + 16) & 4) != 0)
  {
    if (!v31) {
      goto LABEL_12;
    }
    if (v31 == 1)
    {
      *(unsigned char *)__n128 result = v29->i8[0];
      goto LABEL_12;
    }
    goto LABEL_68;
  }
  int8x16_t v32 = (unsigned char *)(result + v31);
  if (v31 >= 0x10)
  {
    unint64_t v33 = result + (v31 & 0xFFFFFFF0);
    do
    {
      unsigned long long v34 = (unsigned __int128)vld2q_s8(v29->i8);
      v29 += 2;
      *(_OWORD *)__n128 result = v34;
      result += 16;
    }
    while (result != v33);
    __n128 result = v33;
  }
  if ((unsigned char *)result != v32)
  {
    size_t v35 = v88 + v31 + a4;
    unint64_t v36 = v35 - result + 20;
    if (v36 < 8
      || (result < (unint64_t)&v29[2].u64[1] + 2 * v35 + -2 * result
        ? (BOOL v37 = (unint64_t)v29 >= v35 + 20)
        : (BOOL v37 = 1),
          !v37))
    {
      int8x16_t v52 = (unsigned char *)result;
      unsigned __int8 v53 = v29;
      goto LABEL_65;
    }
    if (v36 >= 0x20)
    {
      unint64_t v38 = v36 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v67 = v29 + 2;
      uint64_t v68 = (int8x16_t *)(result + 16);
      unint64_t v69 = v36 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v71 = v67[-2];
        int8x16_t v70 = v67[-1];
        int8x16_t v73 = *v67;
        int8x16_t v72 = v67[1];
        v67 += 4;
        v68[-1] = vuzp1q_s8(v71, v70);
        *uint64_t v68 = vuzp1q_s8(v73, v72);
        v68 += 2;
        v69 -= 32;
      }
      while (v69);
      if (v36 == v38) {
        goto LABEL_12;
      }
      if ((v36 & 0x18) == 0)
      {
        unsigned __int8 v53 = (int8x16_t *)((char *)v29 + 2 * v38);
        int8x16_t v52 = (unsigned char *)(result + v38);
        do
        {
LABEL_65:
          char v54 = v53->i8[0];
          unsigned __int8 v53 = (int8x16_t *)((char *)v53 + 2);
          *v52++ = v54;
        }
        while (v52 != v32);
        goto LABEL_12;
      }
    }
    else
    {
      unint64_t v38 = 0;
    }
    int8x16_t v52 = (unsigned char *)(result + (v36 & 0xFFFFFFFFFFFFFFF8));
    unsigned __int8 v53 = (int8x16_t *)((char *)v29 + 2 * (v36 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v74 = (int16x8_t *)((char *)v29 + 2 * v38);
    uint64_t v75 = (int8x8_t *)(result + v38);
    unint64_t v76 = v38 - (v36 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int16x8_t v77 = *v74++;
      *v75++ = vmovn_s16(v77);
      v76 += 8;
    }
    while (v76);
    if (v36 != (v36 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_65;
    }
  }
LABEL_12:
  *a6 = v11;
  return result;
}

unint64_t WTF::Vector<WGSL::EntryPointRewriter::BuiltinMemberOrParameter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6) <= a3)
  {
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WGSL::EntryPointRewriter::BuiltinMemberOrParameter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WGSL::EntryPointRewriter::BuiltinMemberOrParameter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
}

uint64_t WTF::Vector<WGSL::EntryPointRewriter::BuiltinMemberOrParameter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 26)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v3 = result;
      uint64_t v4 = *(WTF **)result;
      uint64_t v5 = *(unsigned int *)(result + 12);
      __n128 result = WTF::fastMalloc((WTF *)(a2 << 6));
      *(_DWORD *)(v3 + 8) = v2;
      *(void *)uint64_t v3 = result;
      if (v5)
      {
        uint64_t v7 = result;
        uint64_t v8 = 0;
        uint64_t v9 = v5 << 6;
        do
        {
          uint64_t v10 = v7 + v8;
          *(void *)uint64_t v10 = &unk_1ECABC008;
          unint64_t v11 = (char *)v4 + v8;
          *(_OWORD *)(v10 + 8) = *(_OWORD *)((char *)v4 + v8 + 8);
          *(void *)uint64_t v10 = off_1ECABC030;
          long long v12 = *(_OWORD *)((char *)v4 + v8 + 24);
          *((void *)v11 + 3) = 0;
          *(_OWORD *)(v10 + 24) = v12;
          *(void *)(v10 + 40) = 0;
          *(void *)(v10 + 48) = 0;
          uint64_t v13 = *(void *)((char *)v4 + v8 + 40);
          *((void *)v11 + 5) = 0;
          *(void *)(v10 + 40) = v13;
          LODWORD(v13) = *(_DWORD *)((char *)v4 + v8 + 48);
          *((_DWORD *)v11 + 12) = 0;
          *(_DWORD *)(v10 + 48) = v13;
          LODWORD(v13) = *(_DWORD *)((char *)v4 + v8 + 52);
          *((_DWORD *)v11 + 13) = 0;
          *(_DWORD *)(v10 + 52) = v13;
          *(unsigned char *)(v10 + 56) = *((unsigned char *)v4 + v8 + 56);
          unint64_t v14 = *(WTF **)((char *)v4 + v8 + 40);
          if (v14)
          {
            *((void *)v11 + 5) = 0;
            *((_DWORD *)v11 + 12) = 0;
            WTF::fastFree(v14, v6);
          }
          *(void *)unint64_t v11 = off_1ECABC030;
          __n128 result = *((void *)v11 + 3);
          *((void *)v11 + 3) = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              __n128 result = WTF::StringImpl::destroy();
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
          v8 += 64;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)uint64_t v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<WGSL::EntryPointRewriter::MemberOrParameter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 56 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WGSL::EntryPointRewriter::MemberOrParameter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WGSL::EntryPointRewriter::MemberOrParameter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
}

uint64_t WTF::Vector<WGSL::EntryPointRewriter::MemberOrParameter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x4924925)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v2 = result;
      uint64_t v3 = *(WTF **)result;
      uint64_t v4 = *(unsigned int *)(result + 12);
      unsigned int v5 = 56 * a2;
      __n128 result = WTF::fastMalloc((WTF *)(56 * a2));
      *(_DWORD *)(v2 + 8) = v5 / 0x38;
      *(void *)uint64_t v2 = result;
      if (v4)
      {
        uint64_t v7 = result;
        uint64_t v8 = 56 * v4;
        uint64_t v9 = (char *)v3 + 40;
        unint64_t v10 = v3;
        uint64_t v11 = result;
        do
        {
          *(void *)uint64_t v11 = &unk_1ECABC008;
          *(_OWORD *)(v11 + 8) = *((_OWORD *)v9 - 2);
          *(void *)uint64_t v11 = off_1ECABC030;
          long long v12 = *((_OWORD *)v9 - 1);
          *((void *)v9 - 2) = 0;
          *(_OWORD *)(v11 + 24) = v12;
          *(void *)(v11 + 40) = 0;
          *(void *)(v11 + 48) = 0;
          uint64_t v13 = *(WTF **)v9;
          *(void *)uint64_t v9 = 0;
          *(void *)(v11 + 40) = v13;
          LODWORD(v13) = *((_DWORD *)v9 + 2);
          *((_DWORD *)v9 + 2) = 0;
          *(_DWORD *)(v11 + 48) = v13;
          LODWORD(v13) = *((_DWORD *)v9 + 3);
          *((_DWORD *)v9 + 3) = 0;
          *(_DWORD *)(v11 + 52) = v13;
          unint64_t v14 = *(WTF **)v9;
          if (*(void *)v9)
          {
            *(void *)uint64_t v9 = 0;
            *((_DWORD *)v9 + 2) = 0;
            WTF::fastFree(v14, v6);
          }
          *((void *)v9 - 5) = off_1ECABC030;
          __n128 result = *((void *)v9 - 2);
          *((void *)v9 - 2) = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              __n128 result = WTF::StringImpl::destroy();
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
          v7 += 56;
          v9 += 56;
          unint64_t v10 = (WTF *)((char *)v10 + 56);
          v11 += 56;
          v8 -= 56;
        }
        while (v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(void *)uint64_t v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

WTF *WGSL::GraphBuilder::visit(WGSL::GraphBuilder *this, const WTF::StringImpl **a2)
{
  __n128 result = WTF::HashMap<WTF::String,WGSL::Empty,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Empty>,WTF::HashTableTraits>::add<WGSL::Empty const&>((uint64_t)v10, (uint64_t *)(*((void *)this + 5) + 8), a2 + 7);
  uint64_t v5 = *((unsigned int *)a2 + 21);
  if (v5 && !*((unsigned char *)this + 32))
  {
    uint64_t v8 = a2[9];
    uint64_t v9 = 8 * v5 - 8;
LABEL_8:
    __n128 result = (WTF *)(*(uint64_t (**)(WGSL::GraphBuilder *, void))(*(void *)this + 88))(this, *(void *)v8);
    while (v9)
    {
      uint64_t v8 = (const WTF::StringImpl *)((char *)v8 + 8);
      v9 -= 8;
      if (!*((unsigned char *)this + 32)) {
        goto LABEL_8;
      }
    }
  }
  if (!*((unsigned char *)this + 32))
  {
    uint64_t v6 = a2[8];
    uint64_t v7 = *(uint64_t (**)(WGSL::GraphBuilder *, const WTF::StringImpl *))(*(void *)this + 208);
    return (WTF *)v7(this, v6);
  }
  return result;
}

WTF *WGSL::GraphBuilder::visit(WGSL::GraphBuilder *this, WGSL::AST::VariableStatement *a2)
{
  __n128 result = WTF::HashMap<WTF::String,WGSL::Empty,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Empty>,WTF::HashTableTraits>::add<WGSL::Empty const&>((uint64_t)v7, (uint64_t *)(*((void *)this + 5) + 8), (const WTF::StringImpl **)(*((void *)a2 + 3) + 48));
  if (!*((unsigned char *)this + 32))
  {
    uint64_t v5 = *((void *)a2 + 3);
    uint64_t v6 = *(uint64_t (**)(WGSL::GraphBuilder *, uint64_t))(*(void *)this + 56);
    return (WTF *)v6(this, v5);
  }
  return result;
}

_DWORD *WGSL::GraphBuilder::visit(WGSL::GraphBuilder *this, WGSL::AST::Expression *a2)
{
  int v4 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = v4 + 1;
  if ((v4 + 1) < 0x201)
  {
    __n128 result = (_DWORD *)WGSL::AST::Visitor::visit(this, (uint64_t)a2);
LABEL_3:
    *((_DWORD *)this + 24) = v4;
    return result;
  }
  WTF::String::number((WTF::String *)0x200);
  WTF::makeString<WTF::ASCIILiteral,WTF::String>(&v10, (uint64_t)v9);
  uint64_t v6 = v10;
  unint64_t v10 = 0;
  uint64_t v11 = v6;
  long long v12 = *(_OWORD *)((char *)a2 + 8);
  WGSL::AST::Visitor::setError((uint64_t)this, (uint64_t)&v11);
  uint64_t v7 = v11;
  uint64_t v11 = 0;
  if (v7)
  {
    if (*v7 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v7 -= 2;
    }
  }
  uint64_t v8 = v10;
  unint64_t v10 = 0;
  if (v8)
  {
    if (*v8 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v8 -= 2;
    }
  }
  __n128 result = v9;
  if (!v9) {
    goto LABEL_3;
  }
  if (*v9 == 2) {
    __n128 result = (_DWORD *)WTF::StringImpl::destroy();
  }
  else {
    *v9 -= 2;
  }
  *((_DWORD *)this + 24) = v4;
  return result;
}

_DWORD *WGSL::AST::Visitor::setError(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v2 += 2;
  }
  long long v5 = *(_OWORD *)(a2 + 8);
  int v4 = v2;
  char v6 = 1;
  __n128 result = (_DWORD *)std::optional<WGSL::CompilationMessage>::swap[abi:sn180100]((uint64_t)&v4, a1 + 8);
  if (v6)
  {
    __n128 result = v4;
    int v4 = 0;
    if (result)
    {
      if (*result == 2) {
        return (_DWORD *)WTF::StringImpl::destroy();
      }
      else {
        *result -= 2;
      }
    }
  }
  return result;
}

unint64_t WTF::makeString<WTF::ASCIILiteral,WTF::String>(void *a1, uint64_t a2)
{
  if (a2)
  {
    int v4 = *(_DWORD *)(a2 + 4);
    if (v4 < 0 || (unint64_t v5 = (v4 + 36), __OFADD__(v4, 36)))
    {
      *a1 = 0;
      __break(0xC471u);
      goto LABEL_10;
    }
    int v6 = (*(unsigned __int8 *)(a2 + 16) >> 2) & 1;
  }
  else
  {
    int v6 = 1;
    unint64_t v5 = 36;
  }
  unint64_t result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v5, v6, (int8x16_t *)"reached maximum expression depth of ", 0x24u, a2, a1);
  if (!*a1)
  {
    __break(0xC471u);
LABEL_10:
    JUMPOUT(0x182556634);
  }
  return result;
}

uint64_t WGSL::GraphBuilder::visit(uint64_t this, WGSL::AST::IdentifierExpression *a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = this;
  unint64_t v5 = *(void **)(this + 40);
  while (2)
  {
    uint64_t v6 = v5[1];
    if (!v6) {
      goto LABEL_3;
    }
    int v7 = *(_DWORD *)(v6 - 8);
    uint64_t v8 = (WTF::StringImpl *)*((void *)a2 + 11);
    unsigned int v9 = *((_DWORD *)v8 + 4);
    if (v9 < 0x100) {
      unsigned int v10 = WTF::StringImpl::hashSlowCase(v8);
    }
    else {
      unsigned int v10 = v9 >> 8;
    }
    for (i = 0; ; unsigned int v10 = i + v12)
    {
      uint64_t v12 = v10 & v7;
      this = *(void *)(v6 + 16 * v12);
      if (this == -1) {
        goto LABEL_9;
      }
      if (!this) {
        break;
      }
      this = WTF::equal((WTF *)this, *((const WTF::StringImpl **)a2 + 11), a3);
      if (this)
      {
        uint64_t v13 = v5[1];
        if (!v13) {
          return this;
        }
        uint64_t v14 = v6 + 16 * v12;
        uint64_t v15 = *(unsigned int *)(v13 - 4);
        goto LABEL_2;
      }
LABEL_9:
      ++i;
    }
    uint64_t v13 = v5[1];
    if (!v13) {
      goto LABEL_3;
    }
    uint64_t v15 = *(unsigned int *)(v13 - 4);
    uint64_t v14 = v13 + 16 * v15;
LABEL_2:
    if (v14 != v13 + 16 * v15) {
      return this;
    }
LABEL_3:
    unint64_t v5 = (void *)*v5;
    if (v5) {
      continue;
    }
    break;
  }
  uint64_t v16 = *(void *)(v4 + 80);
  uint64_t v17 = *(void *)(v16 + 8);
  if (v17)
  {
    unsigned int v18 = *(_DWORD *)(v17 - 8);
    unint64_t v19 = (WTF::StringImpl *)*((void *)a2 + 11);
    unsigned int v20 = *((_DWORD *)v19 + 4);
    int v21 = v20 < 0x100 ? WTF::StringImpl::hashSlowCase(v19) : v20 >> 8;
    for (j = 0; ; int v21 = j + v23)
    {
      uint64_t v23 = v21 & v18;
      this = *(void *)(v17 + 16 * v23);
      if (this != -1)
      {
        if (!this) {
          return this;
        }
        this = WTF::equal((WTF *)this, *((const WTF::StringImpl **)a2 + 11), a3);
        if (this) {
          break;
        }
      }
      ++j;
    }
    uint64_t v24 = v17 + 16 * v23;
    uint64_t v25 = *(void *)(v16 + 8);
    if (!v25 || v24 != v25 + 16 * *(unsigned int *)(v25 - 4))
    {
      uint64_t v26 = *(void *)(v24 + 8);
      if (v26)
      {
        uint64_t v28 = *(void *)(v4 + 80);
        uint64_t v27 = *(void *)(v4 + 88);
        uint64_t v30 = (uint64_t *)(v28 + 16);
        uint64_t v29 = *(void *)(v28 + 16);
        if (v29
          || (WTF::HashTable<WTF::ListHashSetNode<WGSL::Graph::Edge> *,WTF::ListHashSetNode<WGSL::Graph::Edge> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WGSL::Graph::EdgeHash>,WTF::HashTraits<WTF::ListHashSetNode<WGSL::Graph::Edge> *>,WTF::HashTraits<WTF::ListHashSetNode<WGSL::Graph::Edge> *>>::rehash(v30, 8u, 0), (uint64_t v29 = *v30) != 0))
        {
          int v31 = *(_DWORD *)(v29 - 8);
        }
        else
        {
          int v31 = 0;
        }
        int8x16_t v32 = 0;
        unint64_t v33 = (~(v27 << 32) + v27) ^ ((unint64_t)(~(v27 << 32) + v27) >> 22);
        unint64_t v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
        unint64_t v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
        unint64_t v36 = (~(v26 << 32) + v26) ^ ((unint64_t)(~(v26 << 32) + v26) >> 22);
        unint64_t v37 = 9 * ((v36 + ~(v36 << 13)) ^ ((v36 + ~(v36 << 13)) >> 8));
        unint64_t v38 = (v37 ^ (v37 >> 15)) + ~((v37 ^ (v37 >> 15)) << 27);
        unint64_t v39 = (0xD7862706ELL
             * (unint64_t)(95187966 * ((v38 >> 31) ^ v38)
                                + 277951225 * ((v35 >> 31) ^ v35))) >> 4;
        for (int k = 1; ; ++k)
        {
          unsigned int v41 = v39 & v31;
          int8x16_t v42 = (void *)(v29 + 8 * v41);
          int8x16_t v43 = (void *)*v42;
          if (*v42 == -1)
          {
            int8x16_t v32 = (void *)(v29 + 8 * v41);
          }
          else
          {
            if (!v43)
            {
              if (v32)
              {
                *int8x16_t v32 = 0;
                --*(_DWORD *)(*v30 - 16);
                int8x16_t v42 = v32;
              }
              uint64_t v45 = (void *)WTF::fastMalloc((WTF *)0x20);
              *uint64_t v45 = v27;
              v45[1] = v26;
              v45[2] = 0;
              v45[3] = 0;
              *int8x16_t v42 = v45;
              if (*v30)
              {
                ++*(_DWORD *)(*v30 - 12);
                uint64_t v46 = *v30;
                if (*v30) {
                  goto LABEL_49;
                }
LABEL_54:
                uint64_t v47 = *(unsigned int *)(v46 - 16);
                unint64_t v48 = *(unsigned int *)(v46 - 4);
                if (v48 > 0x400) {
                  goto LABEL_55;
                }
LABEL_50:
                if (3 * v48 <= 4 * v47)
                {
                  if (!v48)
                  {
                    unsigned int v49 = 8;
                    goto LABEL_57;
                  }
LABEL_56:
                  unsigned int v49 = v48 << (6 * *(_DWORD *)(v46 - 12) >= (2 * v48));
LABEL_57:
                  int8x16_t v42 = WTF::HashTable<WTF::ListHashSetNode<WGSL::Graph::Edge> *,WTF::ListHashSetNode<WGSL::Graph::Edge> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WGSL::Graph::EdgeHash>,WTF::HashTraits<WTF::ListHashSetNode<WGSL::Graph::Edge> *>,WTF::HashTraits<WTF::ListHashSetNode<WGSL::Graph::Edge> *>>::rehash(v30, v49, (void **)v42);
                  uint64_t v45 = (void *)*v42;
                }
              }
              else
              {
                MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
                uint64_t v46 = *v30;
                if (!*v30) {
                  goto LABEL_54;
                }
LABEL_49:
                uint64_t v47 = (*(_DWORD *)(v46 - 16) + *(_DWORD *)(v46 - 12));
                unint64_t v48 = *(unsigned int *)(v46 - 4);
                if (v48 <= 0x400) {
                  goto LABEL_50;
                }
LABEL_55:
                if (v48 <= 2 * v47) {
                  goto LABEL_56;
                }
              }
              uint64_t v50 = *(void *)(v28 + 32);
              v45[2] = v50;
              v45[3] = 0;
              if (!v50) {
                uint64_t v50 = v28;
              }
              *(void *)(v50 + 24) = v45;
              *(void *)(v28 + 32) = v45;
              int8x16_t v43 = (void *)*v42;
LABEL_61:
              WTF::ListHashSet<WGSL::Graph::Edge,WGSL::Graph::EdgeHash>::add(v51, (uint64_t *)(v27 + 40), v43);
              return (uint64_t)WTF::ListHashSet<WGSL::Graph::Edge,WGSL::Graph::EdgeHash>::add(v51, (uint64_t *)(v26 + 16), v43);
            }
            if (*v43 == v27 && v43[1] == v26) {
              goto LABEL_61;
            }
          }
          LODWORD(v39) = k + v41;
        }
      }
    }
  }
  return this;
}

uint64_t WGSL::reorderGlobals@<X0>(WGSL *this@<X0>, WGSL::ShaderModule *a2@<X1>, uint64_t a3@<X8>)
{
  v165[6] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((unsigned int *)this + 19);
  if (!v3)
  {
    memset(v157, 0, sizeof(v157));
    int v155 = 0;
    uint64_t v156 = 0;
    goto LABEL_64;
  }
  unint64_t v5 = (WTF *)WTF::fastMalloc((WTF *)(((unint64_t)*((unsigned int *)this + 19) << 6) | 8));
  uint64_t v6 = 0;
  *(_DWORD *)unint64_t v5 = v3;
  do
  {
    int v7 = (char *)v5 + v6;
    *((void *)v7 + 8) = 0;
    *((_OWORD *)v7 + 2) = 0uLL;
    *((_OWORD *)v7 + 3) = 0uLL;
    *((_OWORD *)v7 + 1) = 0uLL;
    v6 += 64;
  }
  while (v3 << 6 != v6);
  uint64_t v8 = *((unsigned int *)this + 19);
  uint64_t v156 = 0;
  v157[0] = v5;
  memset(&v157[1], 0, 32);
  int v155 = 0;
  if (v8)
  {
    if (v8 >> 29)
    {
LABEL_228:
      __break(0xC471u);
      JUMPOUT(0x1825579F4);
    }
    unsigned int v9 = (WTF *)WTF::fastMalloc((WTF *)(8 * v8));
    LODWORD(v156) = v8;
    int v155 = v9;
    uint64_t v10 = *((unsigned int *)this + 19);
    if (v10)
    {
      uint64_t v11 = v9;
      unint64_t v12 = 0;
      uint64_t v13 = (void **)*((void *)this + 8);
      int8x16x2_t v145 = &v13[v10];
LABEL_10:
      uint64_t v17 = *v13;
      *(void *)&long long v152 = 0;
      int v18 = (*(uint64_t (**)(void *))(*v17 + 16))(v17);
      if (v18 == 15) {
        goto LABEL_22;
      }
      uint64_t v19 = (*(uint64_t (**)(void *))(*v17 + 24))(v17);
      int v21 = v157[1];
      if (!v157[1]) {
        goto LABEL_22;
      }
      uint64_t v22 = v19;
      unsigned int v23 = *((_DWORD *)v157[1] - 2);
      uint64_t v24 = *(WTF::StringImpl **)(v19 + 24);
      unsigned int v25 = *((_DWORD *)v24 + 4);
      int v26 = v25 < 0x100 ? WTF::StringImpl::hashSlowCase(v24) : v25 >> 8;
      for (i = 0; ; int v26 = i + v28)
      {
        uint64_t v28 = v26 & v23;
        uint64_t v29 = (WTF *)*((void *)v21 + 2 * v28);
        if (v29 != (WTF *)-1)
        {
          if (!v29) {
            goto LABEL_22;
          }
          if (WTF::equal(v29, *(const WTF::StringImpl **)(v22 + 24), v20)) {
            break;
          }
        }
        ++i;
      }
      if (v157[1] && (char *)v21 + 16 * v28 == (char *)v157[1] + 16 * *((unsigned int *)v157[1] - 1))
      {
LABEL_22:
        if (v12 >= *(unsigned int *)v157[0])
        {
          __break(0xC471u);
          goto LABEL_231;
        }
        uint64_t v30 = (char *)v157[0] + 8;
        int v31 = (char *)v157[0] + 64 * v12 + 8;
        *(_DWORD *)int v31 = v12;
        uint64_t v33 = *((void *)v31 + 2);
        int8x16_t v32 = (WTF *)*((void *)v31 + 3);
        *((void *)v31 + 1) = v17;
        *((void *)v31 + 2) = 0;
        *((void *)v31 + 3) = 0;
        *((void *)v31 + 4) = 0;
        if (v32)
        {
          do
          {
            unint64_t v34 = (WTF *)*((void *)v32 + 3);
            WTF::fastFree(v32, a2);
            int8x16_t v32 = v34;
          }
          while (v34);
        }
        if (v33) {
          WTF::fastFree((WTF *)(v33 - 16), a2);
        }
        unint64_t v35 = &v30[64 * v12];
        uint64_t v37 = *((void *)v35 + 5);
        unint64_t v36 = (WTF *)*((void *)v35 + 6);
        *((void *)v35 + 5) = 0;
        *((void *)v35 + 6) = 0;
        *((void *)v35 + 7) = 0;
        if (v36)
        {
          do
          {
            unint64_t v38 = (WTF *)*((void *)v36 + 3);
            WTF::fastFree(v36, a2);
            unint64_t v36 = v38;
          }
          while (v38);
        }
        if (v37) {
          WTF::fastFree((WTF *)(v37 - 16), a2);
        }
        if (v12 >= *(unsigned int *)v157[0])
        {
          __break(0xC471u);
          JUMPOUT(0x1825579A8);
        }
        unint64_t v39 = (char *)v157[0] + 64 * v12 + 8;
        if (v18 == 15) {
          goto LABEL_61;
        }
        uint64_t v41 = (*(uint64_t (**)(void *))(*v17 + 24))(v17);
        int8x16_t v42 = v157[1];
        if (v157[1]
          || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::AST::Function *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::AST::Function *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::AST::Function *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v157[1], 8u), (int8x16_t v42 = v157[1]) != 0))
        {
          int v43 = *((_DWORD *)v42 - 2);
          int8x16_t v44 = *(WTF::StringImpl **)(v41 + 24);
          unsigned int v45 = *((_DWORD *)v44 + 4);
          if (v45 >= 0x100)
          {
LABEL_36:
            unsigned int v46 = v45 >> 8;
LABEL_39:
            uint64_t v47 = 0;
            for (int j = 1; ; ++j)
            {
              unsigned int v49 = v46 & v43;
              uint64_t v50 = (char *)v42 + 16 * (v46 & v43);
              __int16 v51 = *(WTF **)v50;
              if (*(void *)v50 == -1)
              {
                uint64_t v47 = (char *)v42 + 16 * v49;
              }
              else
              {
                if (!v51)
                {
                  if (v47)
                  {
                    *(void *)uint64_t v47 = 0;
                    *((void *)v47 + 1) = 0;
                    --*((_DWORD *)v157[1] - 4);
                    uint64_t v50 = v47;
                  }
                  int8x16_t v52 = *(_DWORD **)(v41 + 24);
                  if (v52) {
                    *v52 += 2;
                  }
                  *(void *)uint64_t v50 = v52;
                  *((void *)v50 + 1) = v39;
                  if (v157[1])
                  {
                    ++*((_DWORD *)v157[1] - 3);
                    unsigned __int8 v53 = v157[1];
                    if (v157[1])
                    {
                      uint64_t v54 = (*((_DWORD *)v157[1] - 4) + *((_DWORD *)v157[1] - 3));
                      unint64_t v55 = *((unsigned int *)v157[1] - 1);
                      if (v55 <= 0x400) {
                        goto LABEL_53;
                      }
LABEL_58:
                      if (v55 <= 2 * v54)
                      {
LABEL_59:
                        unsigned int v56 = v55 << (6 * *((_DWORD *)v53 - 3) >= (2 * v55));
                        goto LABEL_60;
                      }
                      goto LABEL_61;
                    }
                  }
                  else
                  {
                    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
                    unsigned __int8 v53 = 0;
                  }
                  uint64_t v54 = *((unsigned int *)v53 - 4);
                  unint64_t v55 = *((unsigned int *)v53 - 1);
                  if (v55 > 0x400) {
                    goto LABEL_58;
                  }
LABEL_53:
                  if (3 * v55 <= 4 * v54)
                  {
                    if (v55) {
                      goto LABEL_59;
                    }
                    unsigned int v56 = 8;
LABEL_60:
                    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::AST::Function *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::AST::Function *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::AST::Function *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v157[1], v56);
                  }
LABEL_61:
                  *(void *)&long long v152 = v39;
                  int v15 = HIDWORD(v156);
                  if (HIDWORD(v156) == v156)
                  {
                    uint64_t v14 = (void *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v155, HIDWORD(v156) + 1, (unint64_t)&v152);
                    int v15 = HIDWORD(v156);
                    uint64_t v11 = v155;
                    *((void *)v155 + HIDWORD(v156)) = *v14;
                  }
                  else
                  {
                    uint64_t v11 = v155;
                    *((void *)v155 + HIDWORD(v156)) = v39;
                  }
                  ++v12;
                  int v16 = v15 + 1;
                  HIDWORD(v156) = v16;
                  if (++v13 != v145) {
                    goto LABEL_10;
                  }
                  if (v16)
                  {
                    v161[0] = &unk_1ECABB740;
                    LOBYTE(v161[1]) = 0;
                    char v163 = 0;
                    memset(v164, 0, sizeof(v164));
                    WGSL::ContextProvider<WGSL::Empty>::ContextScope::ContextScope(v165, v164);
                  }
                  goto LABEL_64;
                }
                if (WTF::equal(v51, *(const WTF::StringImpl **)(v41 + 24), v40)) {
                  goto LABEL_61;
                }
              }
              unsigned int v46 = j + v49;
            }
          }
        }
        else
        {
          int v43 = 0;
          int8x16_t v44 = *(WTF::StringImpl **)(v41 + 24);
          unsigned int v45 = *((_DWORD *)v44 + 4);
          if (v45 >= 0x100) {
            goto LABEL_36;
          }
        }
        unsigned int v46 = WTF::StringImpl::hashSlowCase(v44);
        goto LABEL_39;
      }
      *(void *)&long long v152 = 0;
      uint64_t v131 = (*(uint64_t (**)(void *))(*v17 + 24))(v17);
      *(_OWORD *)&v161[1] = *(_OWORD *)(v131 + 8);
      v161[0] = off_1ECABC030;
      uint64_t v132 = *(void *)(v131 + 24);
      if (v132)
      {
        *(_DWORD *)v132 += 2;
        unint64_t v162 = (void *)v132;
        int v133 = *(_DWORD *)(v132 + 4);
        if (v133 < 0) {
          goto LABEL_225;
        }
        BOOL v134 = __OFADD__(v133, 1);
        int v135 = v133 + 1;
        if (v134) {
          goto LABEL_225;
        }
      }
      else
      {
        unint64_t v162 = 0;
        int v135 = 1;
      }
      if (!__OFADD__(v135, 18))
      {
        BOOL v136 = !v132 || (*(unsigned char *)(v132 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<char,void>>((v135 + 18), v136, (int8x16_t *)"redeclaration of '", 0x12u, v132, 39, &v159);
        uint64_t v137 = v159;
        if (v159)
        {
          uint64_t v138 = v17[1];
          uint64_t v139 = v17[2];
          long long v159 = 0;
          char v140 = (void *)WTF::fastMalloc((WTF *)0x18);
          *(_DWORD *)v137 += 2;
          *char v140 = v137;
          v140[1] = v138;
          v140[2] = v139;
          int8x16x2_t v146 = v140;
          uint64_t v147 = 0x100000001;
          uint64_t v148 = 0;
          uint64_t v149 = 0;
          char v150 = 1;
          if (*(_DWORD *)v137 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *(_DWORD *)v137 -= 2;
          }
          int8x16x2_t v141 = v159;
          long long v159 = 0;
          if (v141)
          {
            if (*(_DWORD *)v141 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *(_DWORD *)v141 -= 2;
            }
          }
          int8x16x2_t v142 = v162;
          v161[0] = off_1ECABC030;
          unint64_t v162 = 0;
          if (v142)
          {
            if (*v142 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v142 -= 2;
            }
          }
          goto LABEL_156;
        }
LABEL_226:
        __break(0xC471u);
        JUMPOUT(0x1825579C4);
      }
LABEL_225:
      long long v159 = 0;
      goto LABEL_226;
    }
  }
LABEL_64:
  unint64_t v57 = (WTF **)((char *)this + 64);
  if (*((_DWORD *)this + 18))
  {
    if (*((_DWORD *)this + 19)) {
      *((_DWORD *)this + 19) = 0;
    }
    uint8x16_t v58 = *v57;
    if (*v57)
    {
      *((void *)this + 8) = 0;
      *((_DWORD *)this + 18) = 0;
      WTF::fastFree(v58, a2);
    }
  }
  uint16x8_t v59 = operator new(0x20uLL);
  *uint16x8_t v59 = &unk_1ECABCBA0;
  v59[1] = v57;
  v59[2] = v157;
  v59[3] = v161;
  unint64_t v162 = v59;
  if (v157[0]) {
    unint64_t v61 = (char *)v157[0] + 8;
  }
  else {
    unint64_t v61 = 0;
  }
  if (v157[0]) {
    char v62 = (char *)v157[0] + 64 * (unint64_t)*(unsigned int *)v157[0] + 8;
  }
  else {
    char v62 = 0;
  }
  while (v61 != v62)
  {
    uint64_t v63 = *((void *)v61 + 5);
    if (!v63 || !*(_DWORD *)(v63 - 12))
    {
      LODWORD(v152) = *(_DWORD *)v61;
      if (!v162)
      {
        std::__throw_bad_function_call[abi:sn180100]();
        goto LABEL_228;
      }
      (*(void (**)(void *, char *, long long *))(*v162 + 48))(v162, v61, &v152);
    }
    v61 += 64;
  }
  if (!v157[2] || !*((_DWORD *)v157[2] - 3))
  {
    LOBYTE(v146) = 0;
    char v150 = 0;
    unint64_t v66 = v162;
    if (v162 == v161) {
      goto LABEL_154;
    }
LABEL_151:
    if (v66) {
      (*(void (**)(void *))(*v66 + 40))(v66);
    }
    goto LABEL_155;
  }
  if (v157[0]) {
    uint8x8_t v64 = (char *)v157[0] + 8;
  }
  else {
    uint8x8_t v64 = 0;
  }
  if (v157[0]) {
    uint64_t v65 = (char *)v157[0] + 64 * (unint64_t)*(unsigned int *)v157[0] + 8;
  }
  else {
    uint64_t v65 = 0;
  }
  while (v64 != v65)
  {
    uint64_t v67 = *((void *)v64 + 5);
    if (v67 && *(_DWORD *)(v67 - 12)) {
      goto LABEL_99;
    }
    v64 += 64;
  }
  uint8x8_t v64 = 0;
LABEL_99:
  uint64_t v68 = 0;
  long long v152 = 0uLL;
  int v153 = 0;
  char v154 = 1;
  uint64_t v151 = 0;
  while (1)
  {
    do
    {
      if (v68
        || (WTF::HashTable<WGSL::Graph::Node *,WGSL::Graph::Node *,WTF::IdentityExtractor,WTF::DefaultHash<WGSL::Graph::Node *>,WTF::HashTraits<WGSL::Graph::Node *>,WTF::HashTraits<WGSL::Graph::Node *>>::rehash(&v151, 8u), (uint64_t v68 = v151) != 0))
      {
        int v69 = *(_DWORD *)(v68 - 8);
        uint64_t v70 = v68;
      }
      else
      {
        uint64_t v70 = 0;
        int v69 = 0;
      }
      unint64_t v71 = (unint64_t)&v64[~((void)v64 << 32)] ^ ((unint64_t)&v64[~((void)v64 << 32)] >> 22);
      unint64_t v72 = 9 * ((v71 + ~(v71 << 13)) ^ ((v71 + ~(v71 << 13)) >> 8));
      unint64_t v73 = (v72 ^ (v72 >> 15)) + ~((v72 ^ (v72 >> 15)) << 27);
      unsigned int v74 = v69 & ((v73 >> 31) ^ v73);
      uint64_t v75 = (char **)(v70 + 8 * v74);
      unint64_t v76 = *v75;
      if (*v75)
      {
        int16x8_t v77 = 0;
        int v78 = 1;
        while (v76 != v64)
        {
          if (v76 == (char *)-1) {
            int16x8_t v77 = v75;
          }
          unsigned int v74 = (v74 + v78) & v69;
          uint64_t v75 = (char **)(v70 + 8 * v74);
          unint64_t v76 = *v75;
          ++v78;
          if (!*v75)
          {
            if (v77)
            {
              *int16x8_t v77 = 0;
              --*(_DWORD *)(v151 - 16);
              uint64_t v75 = v77;
            }
            goto LABEL_111;
          }
        }
LABEL_118:
        uint8x8_t v64 = *(char **)(*((void *)v64 + 6) + 8);
        break;
      }
LABEL_111:
      int8x8_t *v75 = v64;
      uint64_t v70 = v151;
      if (v151)
      {
        int v79 = *(_DWORD *)(v151 - 16);
        int v80 = *(_DWORD *)(v151 - 12) + 1;
        *(_DWORD *)(v151 - 12) = v80;
        uint64_t v81 = (v79 + v80);
        unint64_t v82 = *(unsigned int *)(v70 - 4);
        if (v82 > 0x400) {
          goto LABEL_117;
        }
      }
      else
      {
        int v80 = 1;
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        uint64_t v81 = (MEMORY[0xFFFFFFFFFFFFFFF0] + 1);
        unint64_t v82 = MEMORY[0xFFFFFFFFFFFFFFFC];
        if (MEMORY[0xFFFFFFFFFFFFFFFC] > 0x400u)
        {
LABEL_117:
          if (v82 > 2 * v81) {
            goto LABEL_118;
          }
          goto LABEL_119;
        }
      }
      if (3 * v82 > 4 * v81) {
        goto LABEL_118;
      }
      if (!v82)
      {
        unsigned int v83 = 8;
        goto LABEL_120;
      }
LABEL_119:
      unsigned int v83 = v82 << (6 * v80 >= (2 * v82));
LABEL_120:
      WTF::HashTable<WGSL::Graph::Node *,WGSL::Graph::Node *,WTF::IdentityExtractor,WTF::DefaultHash<WGSL::Graph::Node *>,WTF::HashTraits<WGSL::Graph::Node *>,WTF::HashTraits<WGSL::Graph::Node *>>::rehash(&v151, v83);
      uint64_t v68 = 0;
      uint64_t v70 = v151;
      uint8x8_t v64 = *(char **)(*((void *)v64 + 6) + 8);
    }
    while (!v151);
    int v84 = *(_DWORD *)(v70 - 8);
    unint64_t v85 = (unint64_t)&v64[~((void)v64 << 32)] ^ ((unint64_t)&v64[~((void)v64 << 32)] >> 22);
    unint64_t v86 = 9 * ((v85 + ~(v85 << 13)) ^ ((v85 + ~(v85 << 13)) >> 8));
    unint64_t v87 = (v86 ^ (v86 >> 15)) + ~((v86 ^ (v86 >> 15)) << 27);
    unsigned int v88 = v84 & ((v87 >> 31) ^ v87);
    int8x16x2_t v89 = *(char **)(v70 + 8 * v88);
    if (v89 == v64) {
      break;
    }
    int v90 = 1;
    while (v89)
    {
      unsigned int v88 = (v88 + v90) & v84;
      int8x16x2_t v89 = *(char **)(v70 + 8 * v88);
      ++v90;
      if (v89 == v64) {
        goto LABEL_128;
      }
    }
    uint64_t v68 = v70;
  }
LABEL_128:
  uint64_t v91 = (*(uint64_t (**)(void))(**((void **)v64 + 1) + 24))(*((void *)v64 + 1));
  int v160 = 32;
  uint64_t v158 = *(void *)(v91 + 24);
  long long v159 = "encountered a dependency cycle: ";
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>>((WTF::StringBuilder *)&v152, (unint64_t *)&v159, &v158);
  int8x16x2_t v92 = v64;
  do
  {
    int8x16x2_t v92 = *(char **)(*((void *)v92 + 6) + 8);
    uint64_t v93 = (*(uint64_t (**)(void))(**((void **)v92 + 1) + 24))(*((void *)v92 + 1));
    int v160 = 4;
    uint64_t v158 = *(void *)(v93 + 24);
    long long v159 = " -> ";
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>>((WTF::StringBuilder *)&v152, (unint64_t *)&v159, &v158);
  }
  while (v92 != v64);
  int8x16x2_t v94 = (_DWORD *)v152;
  if ((void)v152
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v152),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v152),
        (int8x16x2_t v94 = (_DWORD *)v152) != 0))
  {
    *v94 += 2;
  }
  uint64_t v95 = *((void *)v64 + 1);
  uint64_t v96 = *(void *)(v95 + 8);
  uint64_t v97 = *(void *)(v95 + 16);
  uint16x8_t v98 = (void *)WTF::fastMalloc((WTF *)0x18);
  if (v94) {
    *v94 += 2;
  }
  void *v98 = v94;
  v98[1] = v96;
  v98[2] = v97;
  int8x16x2_t v146 = v98;
  uint64_t v147 = 0x100000001;
  uint64_t v148 = 0;
  uint64_t v149 = 0;
  char v150 = 1;
  if (!v94)
  {
LABEL_138:
    uint64_t v99 = v151;
    if (!v151) {
      goto LABEL_140;
    }
    goto LABEL_139;
  }
  if (*v94 != 2)
  {
    *v94 -= 2;
    goto LABEL_138;
  }
  WTF::StringImpl::destroy();
  uint64_t v99 = v151;
  if (v151) {
LABEL_139:
  }
    WTF::fastFree((WTF *)(v99 - 16), v60);
LABEL_140:
  uint8x16_t v100 = (_DWORD *)*((void *)&v152 + 1);
  *((void *)&v152 + 1) = 0;
  if (!v100) {
    goto LABEL_143;
  }
  if (*v100 == 2)
  {
    WTF::StringImpl::destroy();
    uint16x8_t v101 = (_DWORD *)v152;
    *(void *)&long long v152 = 0;
    if (!v101) {
      goto LABEL_150;
    }
LABEL_148:
    if (*v101 != 2)
    {
      *v101 -= 2;
      goto LABEL_150;
    }
    WTF::StringImpl::destroy();
    unint64_t v66 = v162;
    if (v162 == v161) {
      goto LABEL_154;
    }
    goto LABEL_151;
  }
  *v100 -= 2;
LABEL_143:
  uint16x8_t v101 = (_DWORD *)v152;
  *(void *)&long long v152 = 0;
  if (v101) {
    goto LABEL_148;
  }
LABEL_150:
  unint64_t v66 = v162;
  if (v162 != v161) {
    goto LABEL_151;
  }
LABEL_154:
  (*(void (**)(void *))(v161[0] + 32))(v161);
LABEL_155:
  uint64_t v11 = v155;
LABEL_156:
  if (v11)
  {
    int v155 = 0;
    LODWORD(v156) = 0;
    WTF::fastFree(v11, v60);
  }
  unint64_t v102 = v157[3];
  if (v157[3])
  {
    do
    {
      uint8x8_t v103 = (WTF *)*((void *)v102 + 3);
      WTF::fastFree(v102, v60);
      unint64_t v102 = v103;
    }
    while (v103);
  }
  if (v157[2]) {
    WTF::fastFree((WTF *)((char *)v157[2] - 16), v60);
  }
  uint64_t v104 = v157[1];
  if (v157[1])
  {
    uint64_t v105 = *((unsigned int *)v157[1] - 1);
    if (v105)
    {
      uint8x8_t v106 = v157[1];
      do
      {
        long long v107 = *(_DWORD **)v106;
        if (*(void *)v106 != -1)
        {
          *(void *)uint8x8_t v106 = 0;
          if (v107)
          {
            if (*v107 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v107 -= 2;
            }
          }
        }
        uint8x8_t v106 = (WTF *)((char *)v106 + 16);
        --v105;
      }
      while (v105);
    }
    WTF::fastFree((WTF *)((char *)v104 - 16), v60);
  }
  unint64_t v108 = v157[0];
  v157[0] = 0;
  if (v108)
  {
    int8x16_t v110 = (void *)((char *)v108 + 8);
    uint64_t v109 = *(unsigned int *)v108;
    if (v109)
    {
      int8x16_t v111 = &v110[8 * v109];
      do
      {
        int8x16_t v112 = (WTF *)v110[6];
        if (v112)
        {
          do
          {
            int8x16_t v113 = (WTF *)*((void *)v112 + 3);
            WTF::fastFree(v112, v60);
            int8x16_t v112 = v113;
          }
          while (v113);
        }
        uint64_t v114 = v110[5];
        if (v114) {
          WTF::fastFree((WTF *)(v114 - 16), v60);
        }
        unint64_t v115 = (WTF *)v110[3];
        if (v115)
        {
          do
          {
            int16x8_t v116 = (WTF *)*((void *)v115 + 3);
            WTF::fastFree(v115, v60);
            unint64_t v115 = v116;
          }
          while (v116);
        }
        uint64_t v117 = v110[2];
        if (v117) {
          WTF::fastFree((WTF *)(v117 - 16), v60);
        }
        v110 += 8;
      }
      while (v110 != v111);
    }
    WTF::fastFree(v108, v60);
  }
  if (v150)
  {
    uint64_t v118 = HIDWORD(v147);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v118;
    if (v118)
    {
      if (v118 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x1825579FCLL);
      }
      int v119 = 24 * v118;
      uint64_t v120 = WTF::fastMalloc((WTF *)(24 * v118));
      *(_DWORD *)(a3 + 8) = (v119 & 0xFFFFFFF8) / 0x18;
      *(void *)a3 = v120;
      if (HIDWORD(v147))
      {
        uint16x8_t v121 = v146;
        uint16x8_t v122 = &v146[3 * HIDWORD(v147)];
        do
        {
          uint16x8_t v123 = (_DWORD *)*v121;
          if (*v121) {
            *v123 += 2;
          }
          *(void *)uint64_t v120 = v123;
          *(_OWORD *)(v120 + 8) = *(_OWORD *)(v121 + 1);
          v121 += 3;
          v120 += 24;
        }
        while (v121 != v122);
      }
    }
    uint64_t v124 = HIDWORD(v149);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 28) = v124;
    if (v124)
    {
      if (v124 < 0xAAAAAAB)
      {
        int v125 = 24 * v124;
        uint64_t v126 = WTF::fastMalloc((WTF *)(24 * v124));
        *(_DWORD *)(a3 + 24) = (v125 & 0xFFFFFFF8) / 0x18;
        *(void *)(a3 + 16) = v126;
        if (HIDWORD(v149))
        {
          uint64_t v127 = v148;
          uint64_t v128 = v148 + 24 * HIDWORD(v149);
          do
          {
            int8x16x2_t v129 = *(_DWORD **)v127;
            if (*(void *)v127) {
              *v129 += 2;
            }
            *(void *)uint64_t v126 = v129;
            *(_OWORD *)(v126 + 8) = *(_OWORD *)(v127 + 8);
            v127 += 24;
            v126 += 24;
          }
          while (v127 != v128);
        }
        goto LABEL_200;
      }
      __break(0xC471u);
LABEL_231:
      JUMPOUT(0x182557988);
    }
LABEL_200:
    *(unsigned char *)(a3 + 32) = 1;
    return std::__optional_destruct_base<WGSL::FailedCheck,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v146, v60);
  }
  else
  {
    uint64_t result = std::__optional_destruct_base<WGSL::FailedCheck,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v146, v60);
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 32) = 0;
  }
  return result;
}

void WGSL::GraphBuilder::~GraphBuilder(WGSL::GraphBuilder *this, void *a2)
{
  WGSL::AST::ScopedVisitor<WGSL::Empty>::~ScopedVisitor((uint64_t)this, a2);
  JUMPOUT(0x18530AFF0);
}

void WGSL::AST::ScopedVisitor<WGSL::Empty>::visit(uint64_t a1)
{
  WGSL::ContextProvider<WGSL::Empty>::ContextScope::ContextScope(&v1, (void *)(a1 + 40));
}

{
  uint64_t v1;

  WGSL::ContextProvider<WGSL::Empty>::ContextScope::ContextScope(&v1, (void *)(a1 + 40));
}

{
  uint64_t v1;

  WGSL::ContextProvider<WGSL::Empty>::ContextScope::ContextScope(&v1, (void *)(a1 + 40));
}

{
  uint64_t v1;

  WGSL::ContextProvider<WGSL::Empty>::ContextScope::ContextScope(&v1, (void *)(a1 + 40));
}

uint64_t WGSL::AST::ScopedVisitor<WGSL::Empty>::~ScopedVisitor(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 64);
  *(void *)uint64_t v2 = *(void *)(result + 72);
  uint64_t v3 = *(unsigned int *)(v2 + 20);
  if (v3)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3 - 1;
    uint64_t v6 = *(void *)(v2 + 8);
    uint64_t v7 = *(void *)(v6 + 8 * v5);
    *(void *)(v6 + 8 * v5) = 0;
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 8);
      if (v8)
      {
        uint64_t v9 = *(unsigned int *)(v8 - 4);
        if (v9)
        {
          uint64_t v10 = *(_DWORD ***)(v7 + 8);
          do
          {
            uint64_t v11 = *v10;
            if (*v10 != (_DWORD *)-1)
            {
              *uint64_t v10 = 0;
              if (v11)
              {
                if (*v11 == 2) {
                  WTF::StringImpl::destroy();
                }
                else {
                  *v11 -= 2;
                }
              }
            }
            v10 += 2;
            --v9;
          }
          while (v9);
        }
        WTF::fastFree((WTF *)(v8 - 16), a2);
      }
      MEMORY[0x18530AFF0](v7, 0x72C404B2EE363);
    }
    *(_DWORD *)(v2 + 20) = v5;
    uint64_t v12 = *(unsigned int *)(v4 + 60);
    if (v12)
    {
      uint64_t v13 = *(uint64_t **)(v4 + 48);
      uint64_t v14 = &v13[v12];
      do
      {
        uint64_t v15 = *v13;
        *uint64_t v13 = 0;
        if (v15)
        {
          uint64_t v16 = *(void *)(v15 + 8);
          if (v16)
          {
            uint64_t v17 = *(unsigned int *)(v16 - 4);
            if (v17)
            {
              int v18 = *(_DWORD ***)(v15 + 8);
              do
              {
                uint64_t v19 = *v18;
                if (*v18 != (_DWORD *)-1)
                {
                  uint64_t *v18 = 0;
                  if (v19)
                  {
                    if (*v19 == 2) {
                      WTF::StringImpl::destroy();
                    }
                    else {
                      *v19 -= 2;
                    }
                  }
                }
                v18 += 2;
                --v17;
              }
              while (v17);
            }
            WTF::fastFree((WTF *)(v16 - 16), a2);
          }
          MEMORY[0x18530AFF0](v15, 0x72C404B2EE363);
        }
        ++v13;
      }
      while (v13 != v14);
    }
    unsigned int v20 = *(WTF **)(v4 + 48);
    if (v20)
    {
      *(void *)(v4 + 48) = 0;
      *(_DWORD *)(v4 + 56) = 0;
      WTF::fastFree(v20, a2);
    }
    *(void *)uint64_t v4 = &unk_1ECABB740;
    if (*(unsigned char *)(v4 + 32))
    {
      int v21 = *(_DWORD **)(v4 + 8);
      *(void *)(v4 + 8) = 0;
      if (v21)
      {
        if (*v21 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v21 -= 2;
        }
      }
    }
    return v4;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void WGSL::ContextProvider<WGSL::Empty>::ContextScope::ContextScope(void *a1, void *a2)
{
  *a1 = a2;
  a1[1] = *a2;
  operator new();
}

uint64_t std::optional<WGSL::CompilationMessage>::swap[abi:sn180100](uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if ((*(unsigned char *)(result + 24) != 0) == (*(unsigned char *)(a2 + 24) != 0))
  {
    if (!*(unsigned char *)(result + 24)) {
      return result;
    }
    uint64_t v5 = *(_DWORD **)result;
    *(void *)uint64_t result = 0;
    uint64_t v6 = (_OWORD *)(result + 8);
    long long v11 = *(_OWORD *)(result + 8);
    uint64_t v7 = *(void *)a2;
    *(void *)a2 = 0;
    uint64_t v8 = *(_DWORD **)result;
    *(void *)uint64_t v3 = v7;
    if (v8)
    {
      if (*v8 == 2)
      {
        WTF::StringImpl::destroy();
        uint64_t v9 = (_OWORD *)(a2 + 8);
        *uint64_t v6 = *(_OWORD *)(a2 + 8);
        uint64_t result = *(void *)a2;
        *(void *)a2 = v5;
        if (!result)
        {
LABEL_24:
          *uint64_t v9 = v11;
          return result;
        }
LABEL_21:
        if (*(_DWORD *)result == 2) {
          uint64_t result = WTF::StringImpl::destroy();
        }
        else {
          *(_DWORD *)result -= 2;
        }
        goto LABEL_24;
      }
      *v8 -= 2;
    }
    uint64_t v9 = (_OWORD *)(a2 + 8);
    *uint64_t v6 = *(_OWORD *)(a2 + 8);
    uint64_t result = *(void *)a2;
    *(void *)a2 = v5;
    if (!result) {
      goto LABEL_24;
    }
    goto LABEL_21;
  }
  if (*(unsigned char *)(result + 24))
  {
    uint64_t v4 = *(_DWORD **)result;
    *(void *)uint64_t result = 0;
    *(void *)a2 = v4;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
    *(unsigned char *)(a2 + 24) = 1;
    if (*(unsigned char *)(result + 24))
    {
      uint64_t result = *(void *)result;
      *(void *)uint64_t v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          uint64_t result = WTF::StringImpl::destroy();
          *(unsigned char *)(v3 + 24) = 0;
          return result;
        }
        *(_DWORD *)result -= 2;
      }
      *(unsigned char *)(v3 + 24) = 0;
    }
  }
  else
  {
    uint64_t v10 = *(void *)a2;
    *(void *)a2 = 0;
    *(void *)uint64_t result = v10;
    *(_OWORD *)(result + 8) = *(_OWORD *)(a2 + 8);
    *(unsigned char *)(result + 24) = 1;
    if (*(unsigned char *)(a2 + 24))
    {
      uint64_t result = *(void *)a2;
      *(void *)a2 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          uint64_t result = WTF::StringImpl::destroy();
          *(unsigned char *)(a2 + 24) = 0;
          return result;
        }
        *(_DWORD *)result -= 2;
      }
      *(unsigned char *)(a2 + 24) = 0;
    }
  }
  return result;
}

uint64_t **WTF::ListHashSet<WGSL::Graph::Edge,WGSL::Graph::EdgeHash>::add(uint64_t **result, uint64_t *a2, void *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *a2;
  if (*a2
    || (uint64_t result = (uint64_t **)WTF::HashTable<WTF::ListHashSetNode<WGSL::Graph::Edge> *,WTF::ListHashSetNode<WGSL::Graph::Edge> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WGSL::Graph::EdgeHash>,WTF::HashTraits<WTF::ListHashSetNode<WGSL::Graph::Edge> *>,WTF::HashTraits<WTF::ListHashSetNode<WGSL::Graph::Edge> *>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  uint64_t v8 = 0;
  uint64_t v9 = a3[1];
  unint64_t v10 = ~(*a3 << 32) + *a3;
  unint64_t v11 = (v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13);
  unint64_t v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
  unint64_t v13 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
  unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  unint64_t v16 = (0xD7862706ELL
       * (unint64_t)(277951225
                          * (((v12 + ~(v12 << 27)) >> 31) ^ (v12 + ~(v12 << 27)))
                          + 95187966 * ((v15 >> 31) ^ v15))) >> 4;
  for (int i = 1; ; ++i)
  {
    unsigned int v18 = v16 & v7;
    uint64_t v19 = (uint64_t **)(v6 + 8 * (v16 & v7));
    unsigned int v20 = *v19;
    if (*v19 == (uint64_t *)-1)
    {
      uint64_t v8 = (uint64_t **)(v6 + 8 * v18);
      goto LABEL_6;
    }
    if (!v20) {
      break;
    }
    if (*v20 == *a3 && v20[1] == v9)
    {
      _DWORD *v5 = a2;
      v5[1] = v20;
      *((unsigned char *)v5 + 16) = 0;
      return result;
    }
LABEL_6:
    LODWORD(v16) = i + v18;
  }
  if (v8)
  {
    *uint64_t v8 = 0;
    --*(_DWORD *)(*a2 - 16);
    uint64_t v19 = v8;
  }
  uint64_t result = (uint64_t **)WTF::fastMalloc((WTF *)0x20);
  *(_OWORD *)uint64_t result = *(_OWORD *)a3;
  result[2] = 0;
  result[3] = 0;
  _DWORD *v19 = (uint64_t *)result;
  if (*a2)
  {
    ++*(_DWORD *)(*a2 - 12);
    uint64_t v22 = *a2;
    if (*a2) {
      goto LABEL_19;
    }
LABEL_24:
    uint64_t v23 = *(unsigned int *)(v22 - 16);
    unint64_t v24 = *(unsigned int *)(v22 - 4);
    if (v24 > 0x400) {
      goto LABEL_25;
    }
LABEL_20:
    if (3 * v24 <= 4 * v23)
    {
      if (!v24)
      {
        unsigned int v25 = 8;
        goto LABEL_27;
      }
LABEL_26:
      unsigned int v25 = v24 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v24));
LABEL_27:
      uint64_t v19 = (uint64_t **)WTF::HashTable<WTF::ListHashSetNode<WGSL::Graph::Edge> *,WTF::ListHashSetNode<WGSL::Graph::Edge> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WGSL::Graph::EdgeHash>,WTF::HashTraits<WTF::ListHashSetNode<WGSL::Graph::Edge> *>,WTF::HashTraits<WTF::ListHashSetNode<WGSL::Graph::Edge> *>>::rehash(a2, v25, v19);
      uint64_t result = (uint64_t **)*v19;
    }
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    uint64_t v22 = *a2;
    if (!*a2) {
      goto LABEL_24;
    }
LABEL_19:
    uint64_t v23 = (*(_DWORD *)(v22 - 16) + *(_DWORD *)(v22 - 12));
    unint64_t v24 = *(unsigned int *)(v22 - 4);
    if (v24 <= 0x400) {
      goto LABEL_20;
    }
LABEL_25:
    if (v24 <= 2 * v23) {
      goto LABEL_26;
    }
  }
  uint64_t v26 = a2[2];
  result[2] = (uint64_t *)v26;
  result[3] = 0;
  if (v26) {
    uint64_t v27 = (uint64_t ***)(v26 + 24);
  }
  else {
    uint64_t v27 = (uint64_t ***)(a2 + 1);
  }
  int8x16_t *v27 = result;
  a2[2] = (uint64_t)result;
  uint64_t v28 = *v19;
  _DWORD *v5 = a2;
  v5[1] = v28;
  *((unsigned char *)v5 + 16) = 1;
  return result;
}

void *WTF::HashTable<WTF::ListHashSetNode<WGSL::Graph::Edge> *,WTF::ListHashSetNode<WGSL::Graph::Edge> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WGSL::Graph::EdgeHash>,WTF::HashTraits<WTF::ListHashSetNode<WGSL::Graph::Edge> *>,WTF::HashTraits<WTF::ListHashSetNode<WGSL::Graph::Edge> *>>::rehash(uint64_t *a1, unsigned int a2, void **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      unint64_t v13 = (void **)(v6 + 8 * v11);
      unint64_t v14 = *v13;
      if ((unint64_t)*v13 + 1 >= 2)
      {
        uint64_t v15 = *a1;
        unsigned int v16 = *a1 ? *(_DWORD *)(v15 - 8) : 0;
        unint64_t v17 = ~(*v14 << 32) + *v14;
        unint64_t v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
        unint64_t v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
        unint64_t v20 = ~(v14[1] << 32) + v14[1];
        unint64_t v21 = (v20 ^ (v20 >> 22)) + ~((v20 ^ (v20 >> 22)) << 13);
        unint64_t v10 = (9 * (v21 ^ (v21 >> 8))) ^ ((9 * (v21 ^ (v21 >> 8))) >> 15);
        LODWORD(v10) = v16 & ((0xD7862706ELL
                             * (unint64_t)(277951225
                                                * (((v19 + ~(v19 << 27)) >> 31) ^ (v19
                                                                                               + ~(v19 << 27)))
                                                + 95187966
                                                * (((v10 + ~(v10 << 27)) >> 31) ^ (v10
                                                                                               + ~(v10 << 27))))) >> 4);
        int v22 = 1;
        do
        {
          unsigned int v23 = v10;
          uint64_t v24 = *(void *)(v15 + 8 * v10);
          unint64_t v10 = (v10 + v22++) & v16;
        }
        while (v24);
        unsigned int v25 = (void *)(v15 + 8 * v23);
        void *v25 = v14;
        if (v13 == a3) {
          unint64_t v12 = v25;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unint64_t v12 = 0;
  }
  if (v6) {
    WTF::fastFree((WTF *)(v6 - 16), (void *)v10);
  }
  return v12;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, void *a7@<X8>)
{
  int v11 = result;
  if (!a2)
  {
    if (!result) {
      goto LABEL_17;
    }
    if (result > 0x7FFFFFEF) {
      goto LABEL_16;
    }
    uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
    uint64_t v13 = v97;
    if (!v97) {
      goto LABEL_75;
    }
    unint64_t v23 = v97 + 20;
    *(_DWORD *)uint64_t v97 = 2;
    *(_DWORD *)(v97 + 4) = v11;
    *(void *)(v97 + 8) = v97 + 20;
    *(_DWORD *)(v97 + 16) = 0;
    uint64_t v24 = (_WORD *)(v97 + 20 + 2 * a4);
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      unint64_t v25 = v23 + 2 * (a4 & 0xFFFFFFC0);
      long long v26 = 0uLL;
      do
      {
        v98.val[0] = *a3;
        int8x16_t v27 = a3[1];
        v100.val[0] = a3[2];
        int8x16_t v28 = a3[3];
        a3 += 4;
        int8x16_t v29 = v28;
        v100.val[1] = 0uLL;
        v102.val[0] = v27;
        v98.val[1] = 0uLL;
        uint64_t v30 = (char *)v23;
        vst2q_s8(v30, v98);
        v30 += 32;
        v102.val[1] = 0uLL;
        vst2q_s8(v30, v102);
        int v31 = (char *)(v23 + 64);
        vst2q_s8(v31, v100);
        int8x16_t v32 = (char *)(v23 + 96);
        vst2q_s8(v32, *(int8x16x2_t *)(&v26 - 1));
        v23 += 128;
      }
      while (v23 != v25);
      unint64_t v23 = v25;
    }
    if ((_WORD *)v23 != v24)
    {
      unint64_t v33 = v97 + 2 * a4 - v23 + 18;
      if (v33 < 0xE
        || (v23 < (unint64_t)a3->u64 + (v33 >> 1) + 1
          ? (BOOL v34 = (unint64_t)a3 >= (v33 & 0xFFFFFFFFFFFFFFFELL) + v23 + 2)
          : (BOOL v34 = 1),
            !v34))
      {
        uint64_t v37 = (_WORD *)v23;
        unint64_t v38 = a3;
        goto LABEL_33;
      }
      uint64_t v35 = (v33 >> 1) + 1;
      if (v33 >= 0x3E)
      {
        unint64_t v36 = v35 & 0xFFFFFFFFFFFFFFE0;
        uint8x8_t v64 = (uint8x8_t *)&a3[1];
        uint64_t v65 = (uint16x8_t *)(v23 + 32);
        unint64_t v66 = v35 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          uint8x16_t v67 = *(uint8x16_t *)v64[-2].i8;
          uint16x8_t v68 = vmovl_u8(*v64);
          uint16x8_t v69 = vmovl_high_u8(*(uint8x16_t *)v64->i8);
          v65[-2] = vmovl_u8(*(uint8x8_t *)v67.i8);
          v65[-1] = vmovl_high_u8(v67);
          uint16x8_t *v65 = v68;
          v65[1] = v69;
          v65 += 4;
          v64 += 4;
          v66 -= 32;
        }
        while (v66);
        if (v35 == v36) {
          goto LABEL_34;
        }
        if ((v35 & 0x18) == 0)
        {
          unint64_t v38 = (int8x16_t *)((char *)a3 + v36);
          uint64_t v37 = (_WORD *)(v23 + 2 * v36);
          do
          {
LABEL_33:
            __int16 v39 = v38->u8[0];
            unint64_t v38 = (int8x16_t *)((char *)v38 + 1);
            *v37++ = v39;
          }
          while (v37 != v24);
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v36 = 0;
      }
      uint64_t v37 = (_WORD *)(v23 + 2 * (v35 & 0xFFFFFFFFFFFFFFF8));
      unint64_t v38 = (int8x16_t *)((char *)a3 + (v35 & 0xFFFFFFFFFFFFFFF8));
      uint64_t v70 = (uint8x8_t *)&a3->i8[v36];
      unint64_t v71 = (uint16x8_t *)(v23 + 2 * v36);
      unint64_t v72 = v36 - (v35 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint8x8_t v73 = *v70++;
        *v71++ = vmovl_u8(v73);
        v72 += 8;
      }
      while (v72);
      if (v35 != (v35 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_33;
      }
    }
LABEL_34:
    if (!a5)
    {
      uint64_t v42 = 0;
LABEL_74:
      v24[v42] = a6;
      goto LABEL_75;
    }
    unint64_t v40 = *(int8x16_t **)(a5 + 8);
    uint64_t v41 = *(unsigned int *)(a5 + 4);
    if ((*(unsigned char *)(a5 + 16) & 4) == 0)
    {
      if (v41)
      {
        if (v41 == 1) {
          *uint64_t v24 = v40->i16[0];
        }
        else {
          uint64_t result = (uint64_t)memcpy((void *)(v97 + 20 + 2 * a4), v40, 2 * v41);
        }
      }
      goto LABEL_73;
    }
    int v43 = &v24[v41];
    if (v41 < 0x40)
    {
      unint64_t v44 = v97 + 20 + 2 * a4;
    }
    else
    {
      unint64_t v44 = (unint64_t)&v24[v41 & 0xFFFFFFC0];
      long long v45 = 0uLL;
      uint64_t v46 = v97 + 20 + 2 * a4;
      do
      {
        v99.val[0] = *v40;
        int8x16_t v47 = v40[1];
        v101.val[0] = v40[2];
        int8x16_t v48 = v40[3];
        v40 += 4;
        int8x16_t v49 = v48;
        v101.val[1] = 0uLL;
        v103.val[0] = v47;
        v99.val[1] = 0uLL;
        uint64_t v50 = (char *)v46;
        vst2q_s8(v50, v99);
        v50 += 32;
        v103.val[1] = 0uLL;
        vst2q_s8(v50, v103);
        __int16 v51 = (char *)(v46 + 64);
        vst2q_s8(v51, v101);
        int8x16_t v52 = (char *)(v46 + 96);
        vst2q_s8(v52, *(int8x16x2_t *)(&v45 - 1));
        v46 += 128;
      }
      while (v46 != v44);
    }
    if ((_WORD *)v44 == v43)
    {
LABEL_73:
      uint64_t v42 = *(unsigned int *)(a5 + 4);
      goto LABEL_74;
    }
    unint64_t v60 = v97 + 2 * (a4 + v41) - v44 + 18;
    if (v60 < 0xE
      || v44 < (unint64_t)v40->u64 + (v60 >> 1) + 1
      && (unint64_t)v40 < (v60 & 0xFFFFFFFFFFFFFFFELL) + v44 + 2)
    {
      unint64_t v61 = (_WORD *)v44;
      char v62 = v40;
      goto LABEL_68;
    }
    uint64_t v74 = (v60 >> 1) + 1;
    if (v60 >= 0x3E)
    {
      unint64_t v75 = v74 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v87 = (uint8x8_t *)&v40[1];
      unsigned int v88 = (uint16x8_t *)(v44 + 32);
      unint64_t v89 = v74 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v90 = *(uint8x16_t *)v87[-2].i8;
        uint16x8_t v91 = vmovl_u8(*v87);
        uint16x8_t v92 = vmovl_high_u8(*(uint8x16_t *)v87->i8);
        v88[-2] = vmovl_u8(*(uint8x8_t *)v90.i8);
        v88[-1] = vmovl_high_u8(v90);
        uint16x8_t *v88 = v91;
        v88[1] = v92;
        v88 += 4;
        v87 += 4;
        v89 -= 32;
      }
      while (v89);
      if (v74 == v75) {
        goto LABEL_73;
      }
      if ((v74 & 0x18) == 0)
      {
        char v62 = (int8x16_t *)((char *)v40 + v75);
        unint64_t v61 = (_WORD *)(v44 + 2 * v75);
        do
        {
LABEL_68:
          __int16 v63 = v62->u8[0];
          char v62 = (int8x16_t *)((char *)v62 + 1);
          *v61++ = v63;
        }
        while (v61 != v43);
        goto LABEL_73;
      }
    }
    else
    {
      unint64_t v75 = 0;
    }
    unint64_t v61 = (_WORD *)(v44 + 2 * (v74 & 0xFFFFFFFFFFFFFFF8));
    char v62 = (int8x16_t *)((char *)v40 + (v74 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v93 = (uint8x8_t *)&v40->i8[v75];
    int8x16x2_t v94 = (uint16x8_t *)(v44 + 2 * v75);
    unint64_t v95 = v75 - (v74 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v96 = *v93++;
      *v94++ = vmovl_u8(v96);
      v95 += 8;
    }
    while (v95);
    if (v74 == (v74 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_73;
    }
    goto LABEL_68;
  }
  if (!result)
  {
LABEL_17:
    uint64_t v13 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_75;
  }
  if ((result & 0x80000000) != 0)
  {
LABEL_16:
    uint64_t v13 = 0;
    goto LABEL_75;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
  uint64_t v13 = v97;
  if (v97)
  {
    unint64_t v14 = (unsigned char *)(v97 + 20);
    *(_DWORD *)uint64_t v97 = 2;
    *(_DWORD *)(v97 + 4) = v11;
    *(void *)(v97 + 8) = v97 + 20;
    *(_DWORD *)(v97 + 16) = 4;
    if (a4)
    {
      if (a4 != 1)
      {
        uint64_t result = (uint64_t)memcpy((void *)(v97 + 20), a3, a4);
        uint64_t v15 = a4;
        unsigned int v16 = &v14[a4];
        if (a5)
        {
LABEL_9:
          unint64_t v17 = *(int8x16_t **)(a5 + 8);
          size_t v18 = *(unsigned int *)(a5 + 4);
          if ((*(unsigned char *)(a5 + 16) & 4) != 0)
          {
            if (v18)
            {
              if (v18 == 1) {
                unsigned char *v16 = v17->i8[0];
              }
              else {
                uint64_t result = (uint64_t)memcpy(v16, v17, v18);
              }
            }
            goto LABEL_71;
          }
          unint64_t v19 = &v16[v18];
          if (v18 < 0x10)
          {
            unint64_t v20 = (unint64_t)v16;
          }
          else
          {
            unint64_t v20 = (unint64_t)&v16[v18 & 0xFFFFFFF0];
            unint64_t v21 = (unsigned long long *)v16;
            do
            {
              unsigned long long v22 = (unsigned __int128)vld2q_s8(v17->i8);
              v17 += 2;
              *v21++ = v22;
            }
            while (v21 != (unsigned long long *)v20);
          }
          if ((unsigned char *)v20 == v19)
          {
LABEL_71:
            v16[*(unsigned int *)(a5 + 4)] = a6;
            goto LABEL_75;
          }
          size_t v53 = v97 + v18 + v15;
          unint64_t v54 = v53 - v20 + 20;
          if (v54 < 8
            || (v20 < (unint64_t)&v17[2].u64[1] + 2 * v53 + -2 * v20
              ? (BOOL v55 = (unint64_t)v17 >= v53 + 20)
              : (BOOL v55 = 1),
                !v55))
          {
            unint64_t v57 = (unsigned char *)v20;
            uint8x16_t v58 = v17;
            goto LABEL_60;
          }
          if (v54 >= 0x20)
          {
            unint64_t v56 = v54 & 0xFFFFFFFFFFFFFFE0;
            unint64_t v76 = v17 + 2;
            int16x8_t v77 = (int8x16_t *)(v20 + 16);
            unint64_t v78 = v54 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              int8x16_t v80 = v76[-2];
              int8x16_t v79 = v76[-1];
              int8x16_t v82 = *v76;
              int8x16_t v81 = v76[1];
              v76 += 4;
              v77[-1] = vuzp1q_s8(v80, v79);
              *int16x8_t v77 = vuzp1q_s8(v82, v81);
              v77 += 2;
              v78 -= 32;
            }
            while (v78);
            if (v54 == v56) {
              goto LABEL_71;
            }
            if ((v54 & 0x18) == 0)
            {
              uint8x16_t v58 = (int8x16_t *)((char *)v17 + 2 * v56);
              unint64_t v57 = (unsigned char *)(v20 + v56);
              do
              {
LABEL_60:
                char v59 = v58->i8[0];
                uint8x16_t v58 = (int8x16_t *)((char *)v58 + 2);
                *v57++ = v59;
              }
              while (v57 != v19);
              goto LABEL_71;
            }
          }
          else
          {
            unint64_t v56 = 0;
          }
          unint64_t v57 = (unsigned char *)(v20 + (v54 & 0xFFFFFFFFFFFFFFF8));
          uint8x16_t v58 = (int8x16_t *)((char *)v17 + 2 * (v54 & 0xFFFFFFFFFFFFFFF8));
          unsigned int v83 = (int16x8_t *)((char *)v17 + 2 * v56);
          int v84 = (int8x8_t *)(v20 + v56);
          unint64_t v85 = v56 - (v54 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            int16x8_t v86 = *v83++;
            *v84++ = vmovn_s16(v86);
            v85 += 8;
          }
          while (v85);
          if (v54 == (v54 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_71;
          }
          goto LABEL_60;
        }
        goto LABEL_40;
      }
      *unint64_t v14 = a3->i8[0];
    }
    uint64_t v15 = a4;
    unsigned int v16 = &v14[a4];
    if (a5) {
      goto LABEL_9;
    }
LABEL_40:
    unsigned char *v16 = a6;
  }
LABEL_75:
  *a7 = v13;
  return result;
}

void std::__function::__func<WGSL::reorder(WTF::ReferenceWrapperVector<WGSL::AST::Declaration,0ul> &)::$_0,std::allocator<WGSL::reorder(WTF::ReferenceWrapperVector<WGSL::AST::Declaration,0ul> &)::$_0>,void ()(WGSL::Graph::Node &,unsigned int)>::~__func()
{
}

__n128 std::__function::__func<WGSL::reorder(WTF::ReferenceWrapperVector<WGSL::AST::Declaration,0ul> &)::$_0,std::allocator<WGSL::reorder(WTF::ReferenceWrapperVector<WGSL::AST::Declaration,0ul> &)::$_0>,void ()(WGSL::Graph::Node &,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1ECABCBA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<WGSL::reorder(WTF::ReferenceWrapperVector<WGSL::AST::Declaration,0ul> &)::$_0,std::allocator<WGSL::reorder(WTF::ReferenceWrapperVector<WGSL::AST::Declaration,0ul> &)::$_0>,void ()(WGSL::Graph::Node &,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1ECABCBA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<WGSL::reorder(WTF::ReferenceWrapperVector<WGSL::AST::Declaration,0ul> &)::$_0,std::allocator<WGSL::reorder(WTF::ReferenceWrapperVector<WGSL::AST::Declaration,0ul> &)::$_0>,void ()(WGSL::Graph::Node &,unsigned int)>::operator()(uint64_t result, uint64_t a2, unsigned int *a3)
{
  uint64_t v4 = result;
  unsigned int v5 = *a3;
  uint64_t v6 = *(void *)(result + 8);
  uint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = *(unsigned int *)(v6 + 12);
  if (v8 == *(_DWORD *)(v6 + 8))
  {
    unint64_t v9 = v8 + (v8 >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 <= v8 + 1) {
      unint64_t v11 = v8 + 1;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11 >> 29)
    {
LABEL_24:
      __break(0xC471u);
    }
    else
    {
      unint64_t v12 = *(void **)v6;
      uint64_t v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
      *(_DWORD *)(v6 + 8) = v11;
      *(void *)uint64_t v6 = v13;
      __n128 result = (uint64_t)memcpy(v13, v12, 8 * v8);
      if (v12)
      {
        if (*(void **)v6 == v12)
        {
          *(void *)uint64_t v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
        }
        __n128 result = WTF::fastFree((WTF *)v12, v14);
      }
      uint64_t v15 = *(unsigned int *)(v6 + 12);
      *(void *)(*(void *)v6 + 8 * v15) = v7;
      *(_DWORD *)(v6 + 12) = v15 + 1;
      for (int i = *(void ***)(a2 + 24); i; int i = (void **)i[3])
      {
LABEL_19:
        unint64_t v17 = *i;
        size_t v18 = i[1];
        WTF::ListHashSet<WGSL::Graph::Edge,WGSL::Graph::EdgeHash>::remove((uint64_t *)*i + 5, *i, v18);
        __n128 result = (uint64_t)WTF::ListHashSet<WGSL::Graph::Edge,WGSL::Graph::EdgeHash>::remove((uint64_t *)(*(void *)(v4 + 16) + 16), v17, v18);
        uint64_t v19 = v17[5];
        if ((!v19 || !*(_DWORD *)(v19 - 12)) && *(_DWORD *)v17 < v5)
        {
          uint64_t v20 = *(void *)(v4 + 24);
          unsigned int v22 = v5;
          uint64_t v21 = *(void *)(v20 + 24);
          if (!v21)
          {
            __n128 result = std::__throw_bad_function_call[abi:sn180100]();
            goto LABEL_24;
          }
          __n128 result = (*(uint64_t (**)(uint64_t, void *, unsigned int *))(*(void *)v21 + 48))(v21, v17, &v22);
        }
      }
    }
  }
  else
  {
    *(void *)(*(void *)v6 + 8 * v8) = v7;
    *(_DWORD *)(v6 + 12) = v8 + 1;
    int i = *(void ***)(a2 + 24);
    if (i) {
      goto LABEL_19;
    }
  }
  return result;
}

uint64_t *WTF::ListHashSet<WGSL::Graph::Edge,WGSL::Graph::EdgeHash>::remove(uint64_t *result, void *a2, void *a3)
{
  uint64_t v3 = *result;
  if (*result)
  {
    uint64_t v4 = result;
    int v5 = *(_DWORD *)(v3 - 8);
    unint64_t v6 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
    unint64_t v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    unint64_t v9 = ((unint64_t)a3 + ~((void)a3 << 32)) ^ (((unint64_t)a3 + ~((void)a3 << 32)) >> 22);
    unint64_t v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    unint64_t v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    unsigned int v12 = v5 & ((0xD7862706ELL
               * (unint64_t)(277951225 * ((v8 >> 31) ^ v8)
                                  + 95187966 * ((v11 >> 31) ^ v11))) >> 4);
    for (int i = 1; ; ++i)
    {
      uint64_t v14 = v12;
      uint64_t v15 = *(void ***)(v3 + 8 * v12);
      if (v15 != (void **)-1)
      {
        if (!v15) {
          return result;
        }
        unint64_t v17 = *v15;
        unsigned int v16 = v15[1];
        if (v17 == a2 && v16 == a3) {
          break;
        }
      }
      unsigned int v12 = (v14 + i) & v5;
    }
    if (*(_DWORD *)(v3 - 4) != v14)
    {
      uint64_t v19 = *(WTF **)(v3 + 8 * v14);
      if (v19)
      {
        int v20 = *(_DWORD *)(v3 - 8);
        uint64_t v21 = *((void *)v19 + 1);
        unint64_t v22 = ~(*(void *)v19 << 32) + *(void *)v19;
        unint64_t v23 = (v22 ^ (v22 >> 22)) + ~((v22 ^ (v22 >> 22)) << 13);
        unint64_t v24 = (9 * (v23 ^ (v23 >> 8))) ^ ((9 * (v23 ^ (v23 >> 8))) >> 15);
        unint64_t v25 = (~(v21 << 32) + v21) ^ ((unint64_t)(~(v21 << 32) + v21) >> 22);
        unint64_t v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
        unint64_t v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
        unsigned int v28 = v20 & ((0xD7862706ELL
                    * (unint64_t)(277951225
                                       * (((v24 + ~(v24 << 27)) >> 31) ^ (v24
                                                                                      + ~(v24 << 27)))
                                       + 95187966 * ((v27 >> 31) ^ v27))) >> 4);
        for (int j = 1; ; ++j)
        {
          uint64_t v30 = v28;
          int v31 = *(uint64_t **)(v3 + 8 * v28);
          if (v31 != (uint64_t *)-1)
          {
            if (!v31) {
              goto LABEL_38;
            }
            uint64_t v33 = *v31;
            uint64_t v32 = v31[1];
            if (v33 == *(void *)v19 && v32 == v21) {
              break;
            }
          }
          unsigned int v28 = (v30 + j) & v20;
        }
        if (*(_DWORD *)(v3 - 4) == v30) {
          goto LABEL_38;
        }
        *(void *)(v3 + 8 * v30) = -1;
        ++*(_DWORD *)(*result - 16);
        if (*result)
        {
          --*(_DWORD *)(*result - 12);
          uint64_t v35 = *result;
          if (!*result) {
            goto LABEL_38;
          }
        }
        else
        {
          MEMORY[0xFFFFFFFFFFFFFFF4] = -1;
          uint64_t v35 = *result;
          if (!*result)
          {
LABEL_38:
            uint64_t v39 = *((void *)v19 + 2);
            unint64_t v40 = (uint64_t *)*((void *)v19 + 3);
            if (v39)
            {
              *(void *)(v39 + 24) = v40;
              unint64_t v40 = (uint64_t *)*((void *)v19 + 3);
            }
            else
            {
              v4[1] = (uint64_t)v40;
            }
            if (!v40) {
              unint64_t v40 = v4;
            }
            v40[2] = v39;
            return (uint64_t *)WTF::fastFree(v19, a2);
          }
        }
        unsigned int v36 = 6 * *(_DWORD *)(v35 - 12);
        unsigned int v37 = *(_DWORD *)(v35 - 4);
        if (v36 < v37 && v37 >= 9) {
          WTF::HashTable<WTF::ListHashSetNode<WGSL::Graph::Edge> *,WTF::ListHashSetNode<WGSL::Graph::Edge> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WGSL::Graph::EdgeHash>,WTF::HashTraits<WTF::ListHashSetNode<WGSL::Graph::Edge> *>,WTF::HashTraits<WTF::ListHashSetNode<WGSL::Graph::Edge> *>>::rehash(result, v37 >> 1, 0);
        }
        goto LABEL_38;
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WGSL::Graph::Node *,WGSL::Graph::Node *,WTF::IdentityExtractor,WTF::DefaultHash<WGSL::Graph::Node *>,WTF::HashTraits<WGSL::Graph::Node *>,WTF::HashTraits<WGSL::Graph::Node *>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v10 = *(void *)(v4 + 8 * i);
      if ((unint64_t)(v10 + 1) >= 2)
      {
        uint64_t v11 = *a1;
        if (*a1) {
          unsigned int v12 = *(_DWORD *)(v11 - 8);
        }
        else {
          unsigned int v12 = 0;
        }
        unint64_t v13 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
        unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
        unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        uint64_t v16 = v12 & ((v15 >> 31) ^ v15);
        int v17 = 1;
        do
        {
          uint64_t result = v16;
          unint64_t v8 = *(void **)(v11 + 8 * v16);
          uint64_t v16 = (v16 + v17++) & v12;
        }
        while (v8);
        *(void *)(v11 + 8 * result) = v10;
      }
    }
  }
  if (v4)
  {
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>>(WTF::StringBuilder *a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  if (*a3)
  {
    uint64_t v6 = *((void *)a1 + 1);
    if (!v6)
    {
LABEL_5:
      uint64_t v6 = *(void *)a1;
      if (!*(void *)a1) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    uint64_t v6 = *((void *)a1 + 1);
    if (!v6) {
      goto LABEL_5;
    }
  }
  if ((*(unsigned char *)(v6 + 16) & 4) == 0) {
    goto LABEL_9;
  }
LABEL_7:
  if (!v5 || (*(unsigned char *)(v5 + 16) & 4) != 0)
  {
    uint64_t result = (char *)MEMORY[0x18530ACF0]();
    if (!result) {
      return result;
    }
    uint64_t v21 = result;
    unint64_t v22 = a2[1];
    uint64_t v23 = v22;
    uint64_t v24 = *a3;
    if (v22)
    {
      unint64_t v25 = (unsigned char *)*a2;
      if (v22 != 1)
      {
        uint64_t result = (char *)memcpy(result, v25, a2[1]);
        if (!v24) {
          return result;
        }
LABEL_49:
        uint64_t result = &v21[v23];
        unint64_t v33 = *(void *)(v24 + 8);
        size_t v48 = *(unsigned int *)(v24 + 4);
        if ((*(unsigned char *)(v24 + 16) & 4) != 0)
        {
          if (!v48) {
            return result;
          }
          if (v48 == 1)
          {
            *uint64_t result = *(unsigned char *)v33;
            return result;
          }
          goto LABEL_67;
        }
        int8x16_t v49 = &result[v48];
        if (v48 >= 0x10)
        {
          uint64_t v50 = &result[v48 & 0xFFFFFFF0];
          do
          {
            unsigned long long v51 = (unsigned __int128)vld2q_s8((const char *)v33);
            v33 += 32;
            *(_OWORD *)uint64_t result = v51;
            result += 16;
          }
          while (result != v50);
          uint64_t result = v50;
        }
        if (result == v49) {
          return result;
        }
        unint64_t v52 = (unint64_t)&v21[v48 + v23];
        unint64_t v53 = v52 - (void)result;
        if (v52 - (unint64_t)result < 8
          || ((unint64_t)result < v33 + 2 * v53 ? (BOOL v54 = v33 >= v52) : (BOOL v54 = 1), !v54))
        {
          unint64_t v56 = result;
          unint64_t v57 = (char *)v33;
          goto LABEL_71;
        }
        if (v53 >= 0x20)
        {
          unint64_t v55 = v53 & 0xFFFFFFFFFFFFFFE0;
          int8x16_t v81 = (int8x16_t *)(v33 + 32);
          int8x16_t v82 = (int8x16_t *)(result + 16);
          unint64_t v83 = v53 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            int8x16_t v85 = v81[-2];
            int8x16_t v84 = v81[-1];
            int8x16_t v87 = *v81;
            int8x16_t v86 = v81[1];
            v81 += 4;
            v82[-1] = vuzp1q_s8(v85, v84);
            *int8x16_t v82 = vuzp1q_s8(v87, v86);
            v82 += 2;
            v83 -= 32;
          }
          while (v83);
          if (v53 == v55) {
            return result;
          }
          if ((v53 & 0x18) == 0)
          {
            unint64_t v57 = (char *)(v33 + 2 * v55);
            unint64_t v56 = &result[v55];
            goto LABEL_71;
          }
        }
        else
        {
          unint64_t v55 = 0;
        }
        unint64_t v56 = &result[v53 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v57 = (char *)(v33 + 2 * (v53 & 0xFFFFFFFFFFFFFFF8));
        unsigned int v88 = (int16x8_t *)(v33 + 2 * v55);
        unint64_t v89 = (int8x8_t *)&result[v55];
        unint64_t v90 = v55 - (v53 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          int16x8_t v91 = *v88++;
          *v89++ = vmovn_s16(v91);
          v90 += 8;
        }
        while (v90);
        if (v53 == (v53 & 0xFFFFFFFFFFFFFFF8)) {
          return result;
        }
        do
        {
LABEL_71:
          char v58 = *v57;
          v57 += 2;
          *v56++ = v58;
        }
        while (v56 != v49);
        return result;
      }
      *uint64_t result = *v25;
    }
    if (!v24) {
      return result;
    }
    goto LABEL_49;
  }
LABEL_9:
  uint64_t result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (!result) {
    return result;
  }
  unint64_t v8 = result;
  unint64_t v10 = *a2;
  unint64_t v9 = a2[1];
  uint64_t v11 = *a3;
  result += 2 * v9;
  if ((v9 & 0xFFFFFFC0) == 0)
  {
    unint64_t v12 = (unint64_t)v8;
    unint64_t v9 = a2[1];
    if (v8 == result) {
      goto LABEL_32;
    }
LABEL_22:
    unint64_t v26 = (unint64_t)&v8[2 * v9 - v12 - 2];
    if (v26 < 0xE
      || (v12 < v10 + (v26 >> 1) + 1 ? (BOOL v27 = v10 >= (v26 & 0xFFFFFFFFFFFFFFFELL) + v12 + 2) : (BOOL v27 = 1), !v27))
    {
      uint64_t v30 = (char *)v12;
      int v31 = (unsigned __int8 *)v10;
      goto LABEL_31;
    }
    uint64_t v28 = (v26 >> 1) + 1;
    if (v26 >= 0x3E)
    {
      unint64_t v29 = v28 & 0xFFFFFFFFFFFFFFE0;
      char v59 = (uint8x8_t *)(v10 + 16);
      unint64_t v60 = (uint16x8_t *)(v12 + 32);
      unint64_t v61 = v28 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v62 = *(uint8x16_t *)v59[-2].i8;
        uint16x8_t v63 = vmovl_u8(*v59);
        uint16x8_t v64 = vmovl_high_u8(*(uint8x16_t *)v59->i8);
        v60[-2] = vmovl_u8(*(uint8x8_t *)v62.i8);
        v60[-1] = vmovl_high_u8(v62);
        *unint64_t v60 = v63;
        v60[1] = v64;
        v60 += 4;
        v59 += 4;
        v61 -= 32;
      }
      while (v61);
      if (v28 == v29) {
        goto LABEL_32;
      }
      if ((v28 & 0x18) == 0)
      {
        int v31 = (unsigned __int8 *)(v10 + v29);
        uint64_t v30 = (char *)(v12 + 2 * v29);
        goto LABEL_31;
      }
    }
    else
    {
      unint64_t v29 = 0;
    }
    uint64_t v30 = (char *)(v12 + 2 * (v28 & 0xFFFFFFFFFFFFFFF8));
    int v31 = (unsigned __int8 *)(v10 + (v28 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v65 = (uint8x8_t *)(v10 + v29);
    unint64_t v66 = (uint16x8_t *)(v12 + 2 * v29);
    unint64_t v67 = v29 - (v28 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v68 = *v65++;
      *v66++ = vmovl_u8(v68);
      v67 += 8;
    }
    while (v67);
    if (v28 == (v28 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_32;
    }
    do
    {
LABEL_31:
      __int16 v32 = *v31++;
      *(_WORD *)uint64_t v30 = v32;
      v30 += 2;
    }
    while (v30 != result);
    goto LABEL_32;
  }
  unint64_t v12 = (unint64_t)&v8[2 * (a2[1] & 0xFFFFFFC0)];
  long long v13 = 0uLL;
  unint64_t v14 = v8;
  do
  {
    v93.val[0] = *(int8x16_t *)v10;
    int8x16_t v15 = *(int8x16_t *)(v10 + 16);
    v95.val[0] = *(int8x16_t *)(v10 + 32);
    long long v16 = *(_OWORD *)(v10 + 48);
    v10 += 64;
    long long v17 = v16;
    v95.val[1] = 0uLL;
    v97.val[0] = v15;
    v93.val[1] = 0uLL;
    size_t v18 = v14;
    vst2q_s8(v18, v93);
    v18 += 32;
    v97.val[1] = 0uLL;
    vst2q_s8(v18, v97);
    uint64_t v19 = v14 + 64;
    vst2q_s8(v19, v95);
    int v20 = v14 + 96;
    vst2q_s8(v20, *(int8x16x2_t *)(&v13 - 1));
    v14 += 128;
  }
  while (v14 != (char *)v12);
  unint64_t v9 = v9;
  if ((char *)v12 != result) {
    goto LABEL_22;
  }
LABEL_32:
  if (!v11) {
    return result;
  }
  unint64_t v33 = *(void *)(v11 + 8);
  uint64_t v34 = *(unsigned int *)(v11 + 4);
  if ((*(unsigned char *)(v11 + 16) & 4) == 0)
  {
    if (!v34) {
      return result;
    }
    if (v34 == 1)
    {
      *(_WORD *)uint64_t result = *(_WORD *)v33;
      return result;
    }
    size_t v48 = 2 * v34;
LABEL_67:
    return (char *)memcpy(result, (const void *)v33, v48);
  }
  uint64_t v35 = &result[2 * v34];
  if (v34 >= 0x40)
  {
    unsigned int v36 = &result[2 * (v34 & 0xFFFFFFC0)];
    long long v37 = 0uLL;
    do
    {
      v94.val[0] = *(int8x16_t *)v33;
      int8x16_t v38 = *(int8x16_t *)(v33 + 16);
      v96.val[0] = *(int8x16_t *)(v33 + 32);
      long long v39 = *(_OWORD *)(v33 + 48);
      v33 += 64;
      long long v40 = v39;
      v96.val[1] = 0uLL;
      v98.val[0] = v38;
      v94.val[1] = 0uLL;
      uint64_t v41 = result;
      vst2q_s8(v41, v94);
      v41 += 32;
      v98.val[1] = 0uLL;
      vst2q_s8(v41, v98);
      uint64_t v42 = result + 64;
      vst2q_s8(v42, v96);
      int v43 = result + 96;
      vst2q_s8(v43, *(int8x16x2_t *)(&v37 - 1));
      result += 128;
    }
    while (result != v36);
    uint64_t result = v36;
  }
  if (result != v35)
  {
    unint64_t v44 = &v8[2 * v9 + 2 * v34] - result - 2;
    if (v44 < 0xE
      || (unint64_t)result < v33 + (v44 >> 1) + 1
      && v33 < (unint64_t)&result[(v44 & 0xFFFFFFFFFFFFFFFELL) + 2])
    {
      long long v45 = result;
      uint64_t v46 = (unsigned __int8 *)v33;
      goto LABEL_46;
    }
    uint64_t v69 = (v44 >> 1) + 1;
    if (v44 >= 0x3E)
    {
      unint64_t v70 = v69 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v71 = (uint8x8_t *)(v33 + 16);
      unint64_t v72 = (uint16x8_t *)(result + 32);
      unint64_t v73 = v69 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v74 = *(uint8x16_t *)v71[-2].i8;
        uint16x8_t v75 = vmovl_u8(*v71);
        uint16x8_t v76 = vmovl_high_u8(*(uint8x16_t *)v71->i8);
        v72[-2] = vmovl_u8(*(uint8x8_t *)v74.i8);
        v72[-1] = vmovl_high_u8(v74);
        *unint64_t v72 = v75;
        v72[1] = v76;
        v72 += 4;
        v71 += 4;
        v73 -= 32;
      }
      while (v73);
      if (v69 == v70) {
        return result;
      }
      if ((v69 & 0x18) == 0)
      {
        uint64_t v46 = (unsigned __int8 *)(v33 + v70);
        long long v45 = &result[2 * v70];
        goto LABEL_46;
      }
    }
    else
    {
      unint64_t v70 = 0;
    }
    long long v45 = &result[2 * (v69 & 0xFFFFFFFFFFFFFFF8)];
    uint64_t v46 = (unsigned __int8 *)(v33 + (v69 & 0xFFFFFFFFFFFFFFF8));
    int16x8_t v77 = (uint8x8_t *)(v33 + v70);
    unint64_t v78 = (uint16x8_t *)&result[2 * v70];
    unint64_t v79 = v70 - (v69 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v80 = *v77++;
      *v78++ = vmovl_u8(v80);
      v79 += 8;
    }
    while (v79);
    if (v69 == (v69 & 0xFFFFFFFFFFFFFFF8)) {
      return result;
    }
    do
    {
LABEL_46:
      __int16 v47 = *v46++;
      *(_WORD *)long long v45 = v47;
      v45 += 2;
    }
    while (v45 != v35);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WGSL::FailedCheck,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 28);
    if (v3)
    {
      uint64_t v4 = *(_DWORD ***)(a1 + 16);
      uint64_t v5 = 24 * v3;
      do
      {
        uint64_t v6 = *v4;
        uint64_t *v4 = 0;
        if (v6)
        {
          if (*v6 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v6 -= 2;
          }
        }
        v4 += 3;
        v5 -= 24;
      }
      while (v5);
    }
    unint64_t v7 = *(WTF **)(a1 + 16);
    if (v7)
    {
      *(void *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree(v7, a2);
    }
    uint64_t v8 = *(unsigned int *)(a1 + 12);
    if (v8)
    {
      unint64_t v9 = *(WTF **)a1;
      uint64_t v10 = 24 * v8;
      do
      {
        uint64_t v11 = *(_DWORD **)v9;
        *(void *)unint64_t v9 = 0;
        if (v11)
        {
          if (*v11 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v11 -= 2;
          }
        }
        unint64_t v9 = (WTF *)((char *)v9 + 24);
        v10 -= 24;
      }
      while (v10);
    }
    unint64_t v12 = *(WTF **)a1;
    if (*(void *)a1)
    {
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v12, a2);
    }
  }
  return a1;
}

WTF *WTF::HashMap<WTF::String,WGSL::Empty,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Empty>,WTF::HashTableTraits>::add<WGSL::Empty const&>(uint64_t a1, uint64_t *a2, const WTF::StringImpl **a3)
{
  uint64_t v6 = *a2;
  if (!*a2)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Empty>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Empty>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Empty,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Empty>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0);
    uint64_t v6 = *a2;
    if (!*a2)
    {
      int v7 = 0;
      uint64_t v8 = *a3;
      unsigned int v9 = *((_DWORD *)*a3 + 4);
      if (v9 >= 0x100) {
        goto LABEL_4;
      }
LABEL_6:
      unsigned int v10 = WTF::StringImpl::hashSlowCase(v8);
      goto LABEL_7;
    }
  }
  int v7 = *(_DWORD *)(v6 - 8);
  uint64_t v8 = *a3;
  unsigned int v9 = *((_DWORD *)*a3 + 4);
  if (v9 < 0x100) {
    goto LABEL_6;
  }
LABEL_4:
  unsigned int v10 = v9 >> 8;
LABEL_7:
  uint64_t v11 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v13 = v10 & v7;
    unint64_t v14 = (WTF::StringImpl **)(v6 + 16 * (v10 & v7));
    uint64_t result = *v14;
    if (*v14 == (WTF::StringImpl *)-1)
    {
      uint64_t v11 = (WTF::StringImpl **)(v6 + 16 * v13);
      goto LABEL_9;
    }
    if (!result)
    {
      if (v11)
      {
        uint64_t result = 0;
        *uint64_t v11 = 0;
        --*(_DWORD *)(*a2 - 16);
        unint64_t v14 = v11;
      }
      size_t v18 = *a3;
      if (*a3) {
        *(_DWORD *)v18 += 2;
      }
      *unint64_t v14 = v18;
      if (*a2)
      {
        ++*(_DWORD *)(*a2 - 12);
        uint64_t v19 = *a2;
        if (*a2) {
          goto LABEL_21;
        }
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        uint64_t v19 = *a2;
        if (*a2)
        {
LABEL_21:
          uint64_t v20 = (*(_DWORD *)(v19 - 16) + *(_DWORD *)(v19 - 12));
          unint64_t v21 = *(unsigned int *)(v19 - 4);
          if (v21 <= 0x400) {
            goto LABEL_22;
          }
          goto LABEL_30;
        }
      }
      uint64_t v20 = *(unsigned int *)(v19 - 16);
      unint64_t v21 = *(unsigned int *)(v19 - 4);
      if (v21 <= 0x400)
      {
LABEL_22:
        if (3 * v21 > 4 * v20)
        {
LABEL_33:
          uint64_t v23 = v19 + 16 * v21;
          char v22 = 1;
          goto LABEL_34;
        }
        if (!v21)
        {
          uint64_t result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Empty>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Empty>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Empty,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Empty>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, v14);
          unint64_t v14 = (WTF::StringImpl **)result;
          uint64_t v19 = *a2;
          if (!*a2)
          {
LABEL_25:
            unint64_t v21 = 0;
            goto LABEL_33;
          }
LABEL_32:
          unint64_t v21 = *(unsigned int *)(v19 - 4);
          goto LABEL_33;
        }
LABEL_31:
        uint64_t result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Empty>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Empty>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Empty,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Empty>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v21 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v21)), v14);
        unint64_t v14 = (WTF::StringImpl **)result;
        uint64_t v19 = *a2;
        if (!*a2) {
          goto LABEL_25;
        }
        goto LABEL_32;
      }
LABEL_30:
      if (v21 > 2 * v20) {
        goto LABEL_33;
      }
      goto LABEL_31;
    }
    uint64_t result = (WTF *)WTF::equal(result, *a3, (const WTF::StringImpl *)a3);
    if (result) {
      break;
    }
LABEL_9:
    unsigned int v10 = i + v13;
  }
  uint64_t v16 = *a2;
  if (*a2) {
    uint64_t v17 = *(unsigned int *)(v16 - 4);
  }
  else {
    uint64_t v17 = 0;
  }
  char v22 = 0;
  uint64_t v23 = v16 + 16 * v17;
LABEL_34:
  *(void *)a1 = v14;
  *(void *)(a1 + 8) = v23;
  *(unsigned char *)(a1 + 16) = v22;
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Empty>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Empty>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Empty,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Empty>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
    uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    uint64_t v11 = v9 + 16;
    if (!a2) {
      goto LABEL_12;
    }
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
    uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    uint64_t v11 = v9 + 16;
    if (!a2) {
      goto LABEL_12;
    }
  }
  if (a2 == 1)
  {
    uint64_t v12 = 0;
LABEL_10:
    uint64_t v15 = a2 - v12;
    uint64_t v16 = (void *)(v9 + 16 * v12 + 16);
    do
    {
      void *v16 = 0;
      v16 += 2;
      --v15;
    }
    while (v15);
    goto LABEL_12;
  }
  uint64_t v12 = a2 & 0xFFFFFFFE;
  unsigned int v13 = (void *)(v9 + 32);
  uint64_t v14 = v12;
  do
  {
    *(v13 - 2) = 0;
    *unsigned int v13 = 0;
    v13 += 4;
    v14 -= 2;
  }
  while (v14);
  if (v12 != a2) {
    goto LABEL_10;
  }
LABEL_12:
  *a1 = v11;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v17 = 0;
    size_t v18 = 0;
    while (1)
    {
      uint64_t v19 = (WTF::StringImpl **)(v6 + 16 * v17);
      uint64_t v20 = *v19;
      if (*v19 != (WTF::StringImpl *)-1)
      {
        if (v20)
        {
          uint64_t v21 = *a1;
          if (*a1)
          {
            int v22 = *(_DWORD *)(v21 - 8);
            unsigned int v23 = *((_DWORD *)v20 + 4);
            if (v23 >= 0x100) {
              goto LABEL_20;
            }
LABEL_22:
            unsigned int v24 = WTF::StringImpl::hashSlowCase(v20);
          }
          else
          {
            int v22 = 0;
            unsigned int v23 = *((_DWORD *)v20 + 4);
            if (v23 < 0x100) {
              goto LABEL_22;
            }
LABEL_20:
            unsigned int v24 = v23 >> 8;
          }
          int v25 = 0;
          do
          {
            uint64_t v26 = v24 & v22;
            unsigned int v24 = ++v25 + v26;
          }
          while (*(void *)(v21 + 16 * v26));
          BOOL v27 = (WTF::StringImpl **)(v21 + 16 * v26);
          int8x16_t *v27 = 0;
          uint64_t v28 = *v19;
          char *v19 = 0;
          int8x16_t *v27 = v28;
          unint64_t v29 = *v19;
          char *v19 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *(_DWORD *)v29 -= 2;
            }
          }
          if (v19 == a3) {
            size_t v18 = v27;
          }
          goto LABEL_15;
        }
        char *v19 = 0;
      }
LABEL_15:
      if (++v17 == v7) {
        goto LABEL_33;
      }
    }
  }
  size_t v18 = 0;
  uint64_t result = 0;
  if (v6)
  {
LABEL_33:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v18;
  }
  return result;
}

WTF *WGSL::RewriteGlobalVariables::collectGlobals@<X0>(WGSL::RewriteGlobalVariables *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = this;
  uint64_t v347 = *MEMORY[0x1E4F143B8];
  v318 = 0;
  uint64_t v319 = 0;
  uint64_t v5 = *(unsigned int *)(*((void *)this + 5) + 76);
  if (!v5)
  {
LABEL_282:
    uint64_t v190 = *((void *)v4 + 8);
    if (v190)
    {
      uint64_t v191 = *(unsigned int *)(v190 - 4);
      uint64_t v192 = v190 + 24 * v191;
      if (*(_DWORD *)(v190 - 12))
      {
        uint64_t v193 = v190;
        if (v191)
        {
          uint64_t v194 = 24 * v191;
          uint64_t v193 = v190;
          while (*(_DWORD *)v193 >= 0xFFFFFFFE)
          {
            v193 += 24;
            v194 -= 24;
            if (!v194)
            {
              uint64_t v193 = v192;
              break;
            }
          }
        }
LABEL_292:
        if (v190)
        {
          uint64_t v195 = v190 + 24 * *(unsigned int *)(v190 - 4);
          if (v195 == v193) {
            goto LABEL_306;
          }
        }
        else
        {
          uint64_t v195 = 0;
          if (!v193)
          {
LABEL_306:
            v200 = this;
            if (!HIDWORD(v319))
            {
LABEL_412:
              *(unsigned char *)a3 = 0;
              *(unsigned char *)(a3 + 24) = 0;
              uint64_t result = v318;
              if (!v318) {
                return result;
              }
              return (WTF *)WTF::fastFree(result, a2);
            }
            v201 = v318;
            v312 = (WTF *)((char *)v318 + 16 * HIDWORD(v319));
            uint64_t v202 = (uint64_t *)((char *)this + 208);
            while (1)
            {
              uint64_t v203 = *(void *)(*(void *)v201 + 48);
              if (v203)
              {
                int v204 = *(_DWORD *)(v203 + 4);
                *(_DWORD *)v203 += 2;
                v316 = (_DWORD *)v203;
                if (v204 < 0) {
                  goto LABEL_451;
                }
                BOOL v205 = __OFADD__(v204, 12);
                int v206 = v204 + 12;
                if (v205) {
                  goto LABEL_451;
                }
              }
              else
              {
                v316 = 0;
                int v206 = 12;
              }
              if (__OFADD__(v206, 2)) {
                goto LABEL_451;
              }
              BOOL v207 = !v203 || (*(unsigned char *)(v203 + 16) & 4) != 0;
              WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v206 + 2), v207, (int8x16_t *)"__", 2u, v203, (int8x16_t *)"_ArrayLength", 0xCu, &v339);
              unint64_t v208 = (_DWORD *)v339;
              if (!(void)v339) {
                goto LABEL_452;
              }
              *((void *)&v328 + 1) = 0;
              *(void *)&long long v329 = 0;
              *(void *)&long long v328 = off_1ECABC030;
              *((void *)&v329 + 1) = v339;
              *(void *)&long long v339 = 0;
              if (v316)
              {
                if (*v316 == 2)
                {
                  WTF::StringImpl::destroy();
                  unint64_t v208 = (_DWORD *)*((void *)&v329 + 1);
                  uint64_t v209 = *((void *)v200 + 5) + 312;
                  if (!*((void *)&v329 + 1)) {
                    goto LABEL_325;
                  }
                  goto LABEL_324;
                }
                *v316 -= 2;
              }
              uint64_t v209 = *((void *)v200 + 5) + 312;
LABEL_324:
              *v208 += 2;
LABEL_325:
              *(void *)v321 = 0;
              *(void *)&v321[8] = 0;
              v320 = off_1ECABC030;
              *(void *)&v321[16] = v208;
              unint64_t v210 = (void *)*((void *)v200 + 27);
              if (!v210)
              {
                long long v317 = 0uLL;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                *((void *)&v339 + 1) = 0;
                *(void *)&long long v340 = 0;
                *(void *)&long long v339 = off_1ECABC030;
                unint64_t v210 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>((void *)v209, &v317, (uint64_t)&v339);
                *((void *)v200 + 27) = v210;
                uint64_t v211 = (_DWORD *)*((void *)&v340 + 1);
                *(void *)&long long v339 = off_1ECABC030;
                *((void *)&v340 + 1) = 0;
                if (v211)
                {
                  if (*v211 == 2)
                  {
                    WTF::StringImpl::destroy();
                    unint64_t v210 = (void *)*((void *)v200 + 27);
                  }
                  else
                  {
                    *v211 -= 2;
                  }
                }
                v210[3] = *(void *)(*((void *)v200 + 5) + 168);
              }
              uint64_t v212 = *(void *)v209;
              if (*(void *)(v209 + 8) - *(void *)v209 <= 0xB7uLL)
              {
                WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)v209);
                uint64_t v212 = *(void *)v209;
              }
              *(void *)(v212 + 8) = 0;
              *(void *)(v212 + 16) = 0;
              *(void *)uint64_t v212 = &unk_1ECABC8D8;
              long long v213 = *(_OWORD *)v321;
              *(_OWORD *)(v212 + 32) = *(_OWORD *)v321;
              *(void *)(v212 + 24) = off_1ECABC030;
              uint64_t v214 = *(_DWORD **)&v321[16];
              *(void *)&v321[16] = 0;
              *(_OWORD *)(v212 + 64) = v213;
              *(void *)(v212 + 48) = v214;
              *(void *)(v212 + 56) = off_1ECABC030;
              if (v214) {
                *v214 += 2;
              }
              *(void *)(v212 + 136) = 0;
              uint64_t v215 = (void *)(v212 + 136);
              *(void *)(v212 + 80) = v214;
              *(void *)(v212 + 88) = 0;
              *(void *)(v212 + 96) = 0;
              *(void *)(v212 + 104) = 0;
              *(void *)(v212 + 112) = v210;
              *(void *)(v212 + 120) = 0;
              *(_WORD *)(v212 + 128) = 3;
              *(unsigned char *)(v212 + 160) = 0;
              *(unsigned char *)(v212 + 164) = 0;
              *(unsigned char *)(v212 + 168) = 0;
              *(unsigned char *)(v212 + 172) = 0;
              *(unsigned char *)(v212 + 176) = 0;
              *(void *)(v212 + 149) = 0;
              *(void *)(v212 + 144) = 0;
              *(void *)(v212 + 144) = v210[3];
              *(void *)v209 += 184;
              unint64_t v216 = *(unsigned int *)(v209 + 44);
              if (v216 == *(_DWORD *)(v209 + 40))
              {
                unint64_t v217 = v216 + (v216 >> 2);
                if (v217 >= 0x10) {
                  unint64_t v218 = v217 + 1;
                }
                else {
                  unint64_t v218 = 16;
                }
                if (v218 <= v216 + 1) {
                  unint64_t v219 = v216 + 1;
                }
                else {
                  unint64_t v219 = v218;
                }
                if (v219 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x18255C860);
                }
                long long v220 = *(void **)(v209 + 32);
                uint64_t v221 = (void *)WTF::fastMalloc((WTF *)(8 * v219));
                *(_DWORD *)(v209 + 40) = v219;
                *(void *)(v209 + 32) = v221;
                memcpy(v221, v220, 8 * v216);
                v200 = this;
                if (v220)
                {
                  if (*(void **)(v209 + 32) == v220)
                  {
                    *(void *)(v209 + 32) = 0;
                    *(_DWORD *)(v209 + 40) = 0;
                  }
                  WTF::fastFree((WTF *)v220, v222);
                }
                unint64_t v216 = *(unsigned int *)(v209 + 44);
                int8x16x2_t v223 = (void *)(*(void *)(v209 + 32) + 8 * v216);
              }
              else
              {
                int8x16x2_t v223 = (void *)(*(void *)(v209 + 32) + 8 * v216);
              }
              *int8x16x2_t v223 = v212;
              *(_DWORD *)(v209 + 44) = v216 + 1;
              uint64_t v224 = *(_DWORD **)&v321[16];
              v320 = off_1ECABC030;
              *(void *)&v321[16] = 0;
              if (!v224) {
                goto LABEL_352;
              }
              if (*v224 != 2)
              {
                *v224 -= 2;
LABEL_352:
                uint64_t v225 = *((void *)v200 + 28);
                if (v225) {
                  goto LABEL_353;
                }
                goto LABEL_360;
              }
              WTF::StringImpl::destroy();
              uint64_t v225 = *((void *)v200 + 28);
              if (v225)
              {
LABEL_353:
                *uint64_t v215 = v225;
                uint64_t v226 = *((void *)v200 + 8);
                if (!v226) {
                  goto LABEL_372;
                }
                goto LABEL_354;
              }
LABEL_360:
              v234 = (void *)(*((void *)v200 + 5) + 312);
              long long v317 = 0uLL;
              v235 = (void *)*((void *)v200 + 27);
              if (!v235)
              {
                v320 = 0;
                *(void *)v321 = 0;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                *((void *)&v339 + 1) = 0;
                *(void *)&long long v340 = 0;
                *(void *)&long long v339 = off_1ECABC030;
                v235 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v234, &v320, (uint64_t)&v339);
                *((void *)v200 + 27) = v235;
                v236 = (_DWORD *)*((void *)&v340 + 1);
                *(void *)&long long v339 = off_1ECABC030;
                *((void *)&v340 + 1) = 0;
                if (v236)
                {
                  if (*v236 == 2)
                  {
                    WTF::StringImpl::destroy();
                    v235 = (void *)*((void *)v200 + 27);
                  }
                  else
                  {
                    *v236 -= 2;
                  }
                }
                v235[3] = *(void *)(*((void *)v200 + 5) + 168);
              }
              *((void *)v200 + 28) = WGSL::AST::Builder::construct<WGSL::AST::ReferenceTypeExpression,WGSL::SourceSpan,WGSL::AST::Expression &,void>(v234, &v317, (uint64_t)v235);
              uint64_t v237 = *((void *)v200 + 5);
              uint64_t v238 = *(void *)(v237 + 168);
              char v338 = 1;
              uint64_t v337 = v238;
              __int16 v336 = 0;
              *(void *)&long long v339 = 262;
              *((void *)&v339 + 1) = v238;
              v239 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v237 + 112), (unsigned __int8 *)&v339);
              v240 = *(unsigned __int8 **)(v237 + 112);
              if (v240) {
                v240 += 24 * *((unsigned int *)v240 - 1);
              }
              if (v240 == v239 || (uint64_t v241 = *((void *)v239 + 2)) == 0) {
                WGSL::TypeStore::allocateType<WGSL::Types::Reference,WGSL::AddressSpace &,WGSL::AccessMode &,WGSL::Type const*&,BOOL &>();
              }
              uint64_t v242 = *((void *)v200 + 28);
              *(void *)(v242 + 24) = v241;
              *uint64_t v215 = v242;
              uint64_t v226 = *((void *)v200 + 8);
              if (!v226)
              {
LABEL_372:
                int8x16x2_t v231 = 0;
                goto LABEL_373;
              }
LABEL_354:
              int v227 = *(_DWORD *)(v226 - 8);
              int v228 = *((_DWORD *)v201 + 2);
              unsigned int v229 = 9 * ((v228 + ~(v228 << 15)) ^ ((v228 + ~(v228 << 15)) >> 10));
              unsigned int v230 = (((v229 ^ (v229 >> 6)) + ~((v229 ^ (v229 >> 6)) << 11)) ^ (((v229 ^ (v229 >> 6))
                                                                               + ~((v229 ^ (v229 >> 6)) << 11)) >> 16)) & v227;
              int8x16x2_t v231 = (int *)(v226 + 24 * v230);
              int v232 = *v231;
              if (*v231 != v228)
              {
                int v233 = 1;
                while (v232 != -1)
                {
                  unsigned int v230 = (v230 + v233) & v227;
                  int8x16x2_t v231 = (int *)(v226 + 24 * v230);
                  int v232 = *v231;
                  ++v233;
                  if (*v231 == v228) {
                    goto LABEL_373;
                  }
                }
                int8x16x2_t v231 = (int *)(v226 + 24 * *(unsigned int *)(v226 - 4));
              }
LABEL_373:
              uint64_t v243 = v231[5];
              if (!v243)
              {
                __break(0xC471u);
                JUMPOUT(0x18255C848);
              }
              uint64_t v244 = (*(_DWORD *)(*((void *)v231 + 1) + 16 * v243 - 16) + 1);
              v320 = (void (**)(WGSL::AST::Identifier *__hidden))(*((unsigned int *)v201 + 2) | (unint64_t)(v244 << 32));
              v321[0] = 1;
              *(void *)&v321[8] = v212;
              WTF::HashMap<WTF::String,WGSL::RewriteGlobalVariables::Global,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::RewriteGlobalVariables::Global>,WTF::HashTableTraits>::add<WGSL::RewriteGlobalVariables::Global>((uint64_t)&v339, (uint64_t *)this + 6, (const WTF::StringImpl **)&v329 + 1, (long long *)&v320);
              uint64_t v245 = *v202;
              if (*v202
                || (WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,unsigned int,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash(v202, 8u), (uint64_t v245 = *v202) != 0))
              {
                int v246 = *(_DWORD *)(v245 - 8);
              }
              else
              {
                int v246 = 0;
              }
              uint64_t v247 = *(void *)v201;
              unint64_t v248 = ~(*(void *)v201 << 32) + *(void *)v201;
              unint64_t v249 = (v248 ^ (v248 >> 22)) + ~((v248 ^ (v248 >> 22)) << 13);
              unint64_t v250 = (9 * (v249 ^ (v249 >> 8))) ^ ((9 * (v249 ^ (v249 >> 8))) >> 15);
              unsigned int v251 = v246 & (((v250 + ~(v250 << 27)) >> 31) ^ (v250 + ~(v250 << 27)));
              v252 = (void *)(v245 + 16 * v251);
              uint64_t v253 = *v252;
              if (!*v252)
              {
LABEL_385:
                void *v252 = v247;
                v252[1] = v212;
                if (*v202)
                {
                  ++*(_DWORD *)(*v202 - 12);
                  uint64_t v256 = *v202;
                  if (*v202) {
                    goto LABEL_387;
                  }
LABEL_392:
                  uint64_t v257 = *(unsigned int *)(v256 - 16);
                  unint64_t v258 = *(unsigned int *)(v256 - 4);
                  if (v258 > 0x400) {
                    goto LABEL_393;
                  }
LABEL_388:
                  if (3 * v258 > 4 * v257) {
                    goto LABEL_396;
                  }
                  if (!v258)
                  {
                    unsigned int v259 = 8;
LABEL_395:
                    WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,unsigned int,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash(v202, v259);
                    goto LABEL_396;
                  }
                }
                else
                {
                  MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
                  uint64_t v256 = *v202;
                  if (!*v202) {
                    goto LABEL_392;
                  }
LABEL_387:
                  uint64_t v257 = (*(_DWORD *)(v256 - 16) + *(_DWORD *)(v256 - 12));
                  unint64_t v258 = *(unsigned int *)(v256 - 4);
                  if (v258 <= 0x400) {
                    goto LABEL_388;
                  }
LABEL_393:
                  if (v258 > 2 * v257) {
                    goto LABEL_396;
                  }
                }
                unsigned int v259 = v258 << (6 * *(_DWORD *)(v256 - 12) >= (2 * v258));
                goto LABEL_395;
              }
              v254 = 0;
              int v255 = 1;
              while (v253 != v247)
              {
                if (v253 == -1) {
                  v254 = v252;
                }
                unsigned int v251 = (v251 + v255) & v246;
                v252 = (void *)(v245 + 16 * v251);
                uint64_t v253 = *v252;
                ++v255;
                if (!*v252)
                {
                  if (v254)
                  {
                    void *v254 = 0;
                    v254[1] = 0;
                    --*(_DWORD *)(*v202 - 16);
                    uint64_t v247 = *(void *)v201;
                    v252 = v254;
                  }
                  goto LABEL_385;
                }
              }
LABEL_396:
              LODWORD(v320) = v244;
              uint64_t v260 = *((void *)&v329 + 1);
              if (*((void *)&v329 + 1)) {
                **((_DWORD **)&v329 + 1) += 2;
              }
              *(void *)v321 = v260;
              uint64_t v261 = v231[5];
              if (v261 == v231[4])
              {
                unint64_t v262 = WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v231 + 2), v261 + 1, (unint64_t)&v320);
                uint64_t v261 = v231[5];
                uint64_t v263 = *((void *)v231 + 1) + 16 * v261;
                *(_DWORD *)uint64_t v263 = *(_DWORD *)v262;
                uint64_t v264 = *(void *)(v262 + 8);
                *(void *)(v262 + 8) = 0;
                *(void *)(v263 + 8) = v264;
              }
              else
              {
                uint64_t v265 = *((void *)v231 + 1) + 16 * v261;
                *(_DWORD *)uint64_t v265 = v244;
                *(void *)v321 = 0;
                *(void *)(v265 + 8) = v260;
              }
              v231[5] = v261 + 1;
              v266 = *(_DWORD **)v321;
              *(void *)v321 = 0;
              if (!v266) {
                goto LABEL_404;
              }
              if (*v266 != 2)
              {
                *v266 -= 2;
LABEL_404:
                v267 = (_DWORD *)*((void *)&v329 + 1);
                *(void *)&long long v328 = off_1ECABC030;
                *((void *)&v329 + 1) = 0;
                if (v267) {
                  goto LABEL_407;
                }
                goto LABEL_309;
              }
              WTF::StringImpl::destroy();
              v267 = (_DWORD *)*((void *)&v329 + 1);
              *(void *)&long long v328 = off_1ECABC030;
              *((void *)&v329 + 1) = 0;
              if (v267)
              {
LABEL_407:
                if (*v267 == 2) {
                  WTF::StringImpl::destroy();
                }
                else {
                  *v267 -= 2;
                }
              }
LABEL_309:
              v201 = (WTF *)((char *)v201 + 16);
              if (v201 == v312) {
                goto LABEL_412;
              }
            }
          }
        }
        do
        {
          unint64_t v196 = *(unsigned int *)(v193 + 20);
          unint64_t v197 = 126 - 2 * __clz(v196);
          if (v196) {
            uint64_t v198 = v197;
          }
          else {
            uint64_t v198 = 0;
          }
          std::__introsort<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *,false>(*(void *)(v193 + 8), *(void *)(v193 + 8) + 16 * v196, v198, 1);
          uint64_t v199 = v193 + 24;
          uint64_t v193 = v192;
          if (v199 != v192)
          {
            uint64_t v193 = v199;
            while (*(_DWORD *)v193 >= 0xFFFFFFFE)
            {
              v193 += 24;
              if (v193 == v192)
              {
                uint64_t v193 = v192;
                break;
              }
            }
          }
        }
        while (v193 != v195);
        goto LABEL_306;
      }
      uint64_t v193 = v190 + 24 * v191;
    }
    else
    {
      uint64_t v193 = 0;
      LODWORD(v191) = 0;
    }
    uint64_t v192 = v190 + 24 * v191;
    goto LABEL_292;
  }
  unsigned int v314 = 0;
  unint64_t v6 = 0;
  int v7 = (uint64_t *)((char *)this + 48);
  int v8 = (uint64_t *)((char *)this + 56);
  v315 = (uint64_t *)((char *)this + 64);
  v309 = (uint64_t *)((char *)this + 48);
  v310 = (uint64_t *)((char *)this + 56);
  while (1)
  {
    uint64_t v11 = *((void *)v4 + 5);
    if (v6 >= *(unsigned int *)(v11 + 76))
    {
      __break(0xC471u);
      JUMPOUT(0x18255C850);
    }
    int32x2_t v12 = *(int32x2_t *)(*(void *)(v11 + 64) + 8 * v6);
    if ((*(unsigned int (**)(int32x2_t))(**(void **)&v12 + 16))(v12) != 62) {
      goto LABEL_6;
    }
    uint64_t v13 = *(void *)(*(void *)&v12 + 164);
    uint64_t v14 = v13 & 0xFF00000000;
    if ((v13 & 0xFF00000000) == 0)
    {
      char v17 = 0;
      LOBYTE(v13) = 0;
      unsigned int v18 = v314;
      goto LABEL_21;
    }
    if ((*(void *)(*(void *)&v12 + 156) & 0xFF00000000) == 0) {
      goto LABEL_458;
    }
    uint64_t v15 = (_DWORD *)*((void *)this + 5);
    int v16 = *((unsigned __int8 *)this + 184);
    if (v16 == 1)
    {
      LODWORD(v3) = v15[10];
      if (v3 <= v13) {
        break;
      }
      goto LABEL_20;
    }
    if (v16 == 2)
    {
      LODWORD(v3) = v15[11];
      if (v3 <= v13) {
        break;
      }
      goto LABEL_20;
    }
    if (v16 != 4) {
      break;
    }
    LODWORD(v3) = v15[12];
    if (v3 <= v13) {
      break;
    }
LABEL_20:
    unsigned int v18 = v13 >> 8;
    char v17 = 1;
    uint64_t v3 = *(void *)(*(void *)&v12 + 156);
LABEL_21:
    unsigned int v314 = v18;
    uint64_t v19 = v13 | (v18 << 8);
    *(void *)&long long v339 = v19 | (v3 << 32);
    uint64_t v20 = (_DWORD **)(*(void *)&v12 + 48);
    BYTE8(v339) = v17;
    *(int32x2_t *)&long long v340 = v12;
    WTF::HashMap<WTF::String,WGSL::RewriteGlobalVariables::Global,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::RewriteGlobalVariables::Global>,WTF::HashTableTraits>::add<WGSL::RewriteGlobalVariables::Global>((uint64_t)&v317, v7, (const WTF::StringImpl **)(*(void *)&v12 + 48), &v339);
    if (v14)
    {
      uint64_t v21 = *v8;
      if (*v8
        || (WTF::HashTable<std::tuple<unsigned int,unsigned int>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned int>,WGSL::AST::Variable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned int>,WGSL::AST::Variable *>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned int>>,WTF::HashMap<std::tuple<unsigned int,unsigned int>,WGSL::AST::Variable *,WTF::DefaultHash<std::tuple<unsigned int,unsigned int>>,WTF::HashTraits<std::tuple<unsigned int,unsigned int>>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned int>>>::rehash(v8, 8u), (uint64_t v21 = *v8) != 0))
      {
        int v22 = *(_DWORD *)(v21 - 8);
      }
      else
      {
        int v22 = 0;
      }
      int32x2_t v23 = vadd_s32((int32x2_t)__PAIR64__(v3, v19), (int32x2_t)0x100000001);
      int8x8_t v24 = (int8x8_t)vsub_s32((int32x2_t)__PAIR64__(v3, v19), vshl_n_s32(v23, 0xFuLL));
      int8x8_t v25 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v24, 0xAuLL), v24), (int32x2_t)0x900000009);
      int32x2_t v26 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v25, 6uLL), v25);
      int8x8_t v27 = (int8x8_t)vadd_s32(v26, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v26, 0xBuLL)));
      int32x2_t v28 = vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v27, 0x10uLL), v27), (int32x2_t)0x5AC73FE109132F9);
      unsigned int v29 = v22 & ((0xD7862706ELL * (unint64_t)vadd_s32(v28, vdup_lane_s32(v28, 1)).u32[0]) >> 4);
      uint64_t v30 = (int32x2_t *)(v21 + 16 * v29);
      unsigned int v31 = v30->i32[0];
      unsigned int v32 = v30->u32[1];
      if (*v30)
      {
        unint64_t v33 = 0;
        int v34 = 1;
        while (__PAIR64__(v32, v31) != *(void *)&v23)
        {
          if (v31 == -1) {
            unint64_t v33 = v30;
          }
          unsigned int v29 = (v29 + v34) & v22;
          uint64_t v30 = (int32x2_t *)(v21 + 16 * v29);
          unsigned int v31 = v30->i32[0];
          unsigned int v32 = v30->u32[1];
          ++v34;
          if (!*(void *)v30)
          {
            if (v33)
            {
              *unint64_t v33 = 0;
              v33[1] = 0;
              --*(_DWORD *)(*v8 - 16);
              uint64_t v30 = v33;
            }
            goto LABEL_34;
          }
        }
LABEL_45:
        uint64_t v39 = *v315;
        uint64_t v311 = v3;
        if (*v315
          || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v315, 8u, 0), (uint64_t v39 = *v315) != 0))
        {
          int v40 = *(_DWORD *)(v39 - 8);
        }
        else
        {
          int v40 = 0;
        }
        unsigned int v41 = 9 * ((v19 + ~(v19 << 15)) ^ ((v19 + ~(v19 << 15)) >> 10));
        unsigned int v42 = (v41 ^ (v41 >> 6)) + ~((v41 ^ (v41 >> 6)) << 11);
        unsigned int v43 = v40 & (v42 ^ HIWORD(v42));
        unint64_t v44 = (int *)(v39 + 24 * v43);
        int v45 = *v44;
        if (*v44 != -1)
        {
          uint64_t v46 = 0;
          int v47 = 1;
          while (v45 != v19)
          {
            if (v45 == -2) {
              uint64_t v46 = v44;
            }
            unsigned int v43 = (v43 + v47) & v40;
            unint64_t v44 = (int *)(v39 + 24 * v43);
            int v45 = *v44;
            ++v47;
            if (*v44 == -1)
            {
              if (v46)
              {
                int *v46 = -1;
                *((void *)v46 + 1) = 0;
                *((void *)v46 + 2) = 0;
                --*(_DWORD *)(*v315 - 16);
                unint64_t v44 = v46;
              }
              goto LABEL_56;
            }
          }
LABEL_77:
          LODWORD(v339) = v3;
          char v58 = *v20;
          if (*v20) {
            *v58 += 2;
          }
          char v59 = v44 + 2;
          *((void *)&v339 + 1) = v58;
          uint64_t v60 = v44[5];
          if (v60 == v44[4])
          {
            unint64_t v61 = WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v59, v60 + 1, (unint64_t)&v339);
            uint64_t v60 = v44[5];
            uint64_t v62 = *((void *)v44 + 1) + 16 * v60;
            *(_DWORD *)uint64_t v62 = *(_DWORD *)v61;
            uint64_t v63 = *(void *)(v61 + 8);
            *(void *)(v61 + 8) = 0;
            *(void *)(v62 + 8) = v63;
          }
          else
          {
            uint64_t v64 = *v59 + 16 * v60;
            *(_DWORD *)uint64_t v64 = v3;
            *((void *)&v339 + 1) = 0;
            *(void *)(v64 + 8) = v58;
          }
          v44[5] = v60 + 1;
          uint64_t v65 = (_DWORD *)*((void *)&v339 + 1);
          *((void *)&v339 + 1) = 0;
          int v8 = v310;
          if (v65)
          {
            if (*v65 == 2)
            {
              WTF::StringImpl::destroy();
              uint64_t v66 = *(void *)(*(void *)(*(void *)&v12 + 112) + 24);
              if (!v66) {
                goto LABEL_269;
              }
LABEL_88:
              int v67 = *(_DWORD *)(v66 + 48);
              if (v67 != 4)
              {
                if (v67 == 3)
                {
                  uint8x8_t v68 = *(WGSL::Type **)v66;
                  if (*(void *)v66 && *((_DWORD *)v68 + 12) == 4)
                  {
                    uint64_t v69 = WGSL::RewriteGlobalVariables::packStructType((uint64_t)this, (uint64_t)v68);
                    if (v69)
                    {
                      uint64_t v70 = *((void *)this + 5);
                      *(_WORD *)(v70 + 9) = 257;
                      uint64_t v71 = WGSL::TypeStore::arrayType(v70 + 96, v69, *(void *)(v66 + 8), *(void *)(v66 + 16));
                      if (v71)
                      {
                        if (*(_DWORD *)(v71 + 48) != 3
                          || (unint64_t v72 = *(_DWORD **)v71, v73 = *((void *)this + 5), v328 = 0uLL, v72[12] != 4))
                        {
LABEL_450:
                          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_451:
                          *(void *)&long long v339 = 0;
LABEL_452:
                          __break(0xC471u);
                          JUMPOUT(0x18255C840);
                        }
                        v303 = (WGSL::AST::Expression *)v71;
                        uint8x16_t v74 = *(_DWORD **)(*(void *)v72 + 48);
                        if (v74) {
                          *v74 += 2;
                        }
                        *((void *)&v339 + 1) = 0;
                        *(void *)&long long v340 = 0;
                        *(void *)&long long v339 = off_1ECABC030;
                        *((void *)&v340 + 1) = v74;
                        uint16x8_t v75 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>((void *)(v73 + 312), &v328, (uint64_t)&v339);
                        uint16x8_t v76 = (_DWORD *)*((void *)&v340 + 1);
                        *(void *)&long long v339 = off_1ECABC030;
                        *((void *)&v340 + 1) = 0;
                        if (v76)
                        {
                          if (*v76 == 2) {
                            WTF::StringImpl::destroy();
                          }
                          else {
                            *v76 -= 2;
                          }
                        }
                        v75[3] = v72;
                        uint64_t v133 = *(void *)(*(void *)&v12 + 112);
                        if ((*(unsigned int (**)(uint64_t))(*(void *)v133 + 16))(v133) != 59)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x18255C82CLL);
                        }
                        uint64_t v134 = *((void *)this + 5);
                        uint64_t v135 = *(void *)(v133 + 72);
                        uint64_t v136 = *(void *)(v134 + 312);
                        if ((unint64_t)(*(void *)(v134 + 320) - v136) <= 0x4F)
                        {
                          WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v134 + 312));
                          uint64_t v136 = *(void *)(v134 + 312);
                        }
                        uint64_t v137 = (_OWORD *)(v133 + 8);
                        *(_OWORD *)(v136 + 8) = *(_OWORD *)(v133 + 8);
                        v300 = (_OWORD *)(v136 + 8);
                        *(void *)(v136 + 24) = 0;
                        *(unsigned char *)(v136 + 32) = 0;
                        uint64_t v295 = v136 + 32;
                        *(unsigned char *)(v136 + 56) = 0;
                        *(void *)uint64_t v136 = &unk_1ECABD308;
                        *(void *)(v136 + 64) = v75;
                        v302 = (_OWORD *)(v136 + 64);
                        *(void *)(v136 + 72) = v135;
                        *(void *)(v134 + 312) += 80;
                        unint64_t v138 = *(unsigned int *)(v134 + 356);
                        uint64_t v308 = v136;
                        if (v138 == *(_DWORD *)(v134 + 352))
                        {
                          uint64_t v139 = v5;
                          unint64_t v140 = v138 + (v138 >> 2);
                          if (v140 >= 0x10) {
                            unint64_t v141 = v140 + 1;
                          }
                          else {
                            unint64_t v141 = 16;
                          }
                          if (v141 <= v138 + 1) {
                            unint64_t v142 = v138 + 1;
                          }
                          else {
                            unint64_t v142 = v141;
                          }
                          if (v142 >> 29)
                          {
LABEL_458:
                            __break(0xC471u);
                            JUMPOUT(0x18255C7ECLL);
                          }
                          int8x16x2_t v143 = *(void **)(v134 + 344);
                          int8x16x2_t v144 = (void *)WTF::fastMalloc((WTF *)(8 * v142));
                          *(_DWORD *)(v134 + 352) = v142;
                          *(void *)(v134 + 344) = v144;
                          memcpy(v144, v143, 8 * v138);
                          uint64_t v5 = v139;
                          uint64_t v136 = v308;
                          if (v143)
                          {
                            if (*(void **)(v134 + 344) == v143)
                            {
                              *(void *)(v134 + 344) = 0;
                              *(_DWORD *)(v134 + 352) = 0;
                            }
                            WTF::fastFree((WTF *)v143, v145);
                          }
                          unint64_t v138 = *(unsigned int *)(v134 + 356);
                          int8x16x2_t v146 = (void *)(*(void *)(v134 + 344) + 8 * v138);
                          uint64_t v137 = (_OWORD *)(v133 + 8);
                        }
                        else
                        {
                          int8x16x2_t v146 = (void *)(*(void *)(v134 + 344) + 8 * v138);
                        }
                        *int8x16x2_t v146 = v136;
                        *(_DWORD *)(v134 + 356) = v138 + 1;
                        *(void *)(v136 + 24) = v303;
                        uint64_t v147 = *((void *)this + 5);
                        *(_OWORD *)&v321[8] = *v137;
                        uint64_t v148 = *(void *)(v133 + 24);
                        v320 = (void (**)(WGSL::AST::Identifier *__hidden))v133;
                        *(void *)v321 = &unk_1ECABBFE0;
                        uint64_t v322 = v148;
                        v323[0] = 0;
                        unsigned __int8 v325 = 0;
                        int v149 = *(unsigned __int8 *)(v133 + 56);
                        if (*(unsigned char *)(v133 + 56))
                        {
                          unsigned int v324 = -1;
                          uint64_t v150 = *(unsigned int *)(v133 + 48);
                          if (v150 != -1)
                          {
                            int v296 = v149;
                            uint64_t v151 = *(unsigned int *)(v133 + 48);
                            ((void (*)(long long *, unsigned char *, uint64_t))off_1ECABCEC0[v150])(&v339, v323, v133 + 32);
                            uint64_t v150 = v151;
                            int v149 = v296;
                            unsigned int v324 = v151;
                          }
                          unsigned __int8 v325 = 1;
                        }
                        else
                        {
                          uint64_t v150 = 0;
                        }
                        long long v152 = (uint64_t *)(v147 + 400);
                        *(void *)v321 = &unk_1ECABD308;
                        *(_OWORD *)v326 = *(_OWORD *)(v133 + 64);
                        unint64_t v153 = *(unsigned int *)(v147 + 412);
                        uint64_t v299 = v147;
                        if (v153 == *(_DWORD *)(v147 + 408))
                        {
                          unint64_t v154 = v153 + (v153 >> 2);
                          if (v154 >= 0x10) {
                            unint64_t v155 = v154 + 1;
                          }
                          else {
                            unint64_t v155 = 16;
                          }
                          if (v155 <= v153 + 1) {
                            unint64_t v156 = v153 + 1;
                          }
                          else {
                            unint64_t v156 = v155;
                          }
                          WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v152, v156);
                          uint64_t v157 = *(unsigned int *)(v147 + 412);
                          uint64_t v158 = *(void *)(v147 + 400);
                          long long v159 = v320;
                          long long v340 = *(_OWORD *)&v321[8];
                          uint64_t v160 = v322;
                          *(void *)&long long v339 = v320;
                          *((void *)&v339 + 1) = &unk_1ECABBFE0;
                          uint64_t v341 = v322;
                          v342[0] = 0;
                          unsigned __int8 v344 = 0;
                          int v291 = v325;
                          if (v325)
                          {
                            int v343 = -1;
                            uint64_t v297 = v324;
                            if (v324 != -1)
                            {
                              uint64_t v161 = v157;
                              ((void (*)(uint64_t *, unsigned char *, unsigned char *))off_1ECABCF18[v324])(&v337, v342, v323);
                              uint64_t v157 = v161;
                              int v343 = v297;
                              long long v159 = (void (**)(WGSL::AST::Identifier *__hidden))v339;
                              uint64_t v160 = v341;
                            }
                            int v289 = 1;
                            unsigned __int8 v344 = 1;
                          }
                          else
                          {
                            uint64_t v297 = 0;
                            int v289 = 0;
                          }
                          *((void *)&v339 + 1) = &unk_1ECABD308;
                          *(_OWORD *)v345 = *(_OWORD *)v326;
                          uint64_t v167 = v158 + 32 * v157;
                          *(void *)(v167 + 24) = 0;
                          unint64_t v168 = (void *)(v167 + 24);
                          unint64_t v169 = (char *)operator new(0x60uLL);
                          unint64_t v170 = v169;
                          *(void *)unint64_t v169 = &unk_1ECABD330;
                          *((void *)v169 + 1) = v159;
                          *(_OWORD *)(v169 + 24) = v340;
                          *((void *)v169 + 2) = &unk_1ECABBFE0;
                          *((void *)v169 + 5) = v160;
                          v169[48] = 0;
                          v169[72] = 0;
                          if (v291)
                          {
                            *((_DWORD *)v169 + 16) = -1;
                            int v7 = v309;
                            int v171 = v289;
                            if (v297 != 0xFFFFFFFFLL)
                            {
                              ((void (*)(uint64_t *, char *, unsigned char *))off_1ECABCF18[v297])(&v337, v169 + 48, v342);
                              *((_DWORD *)v170 + 16) = v297;
                              int v171 = v344;
                            }
                            v170[72] = 1;
                          }
                          else
                          {
                            int v171 = 0;
                            int v7 = v309;
                          }
                          *((void *)v170 + 2) = &unk_1ECABD308;
                          *((_OWORD *)v170 + 5) = *(_OWORD *)v345;
                          *unint64_t v168 = v170;
                          *((void *)&v339 + 1) = &unk_1ECABBFE0;
                          if (v171 && v343 != -1) {
                            ((void (*)(uint64_t *, unsigned char *))off_1ECABCE68[v343])(&v337, v342);
                          }
                          v177 = v300;
                          ++*(_DWORD *)(v299 + 412);
                          unint64_t v178 = this;
                          uint64_t v179 = v308;
                          *(void *)v321 = &unk_1ECABBFE0;
                          if (!v325) {
                            goto LABEL_254;
                          }
                        }
                        else
                        {
                          uint64_t v162 = *v152;
                          char v163 = v320;
                          long long v329 = *(_OWORD *)&v321[8];
                          uint64_t v164 = v322;
                          *(void *)&long long v328 = v320;
                          *((void *)&v328 + 1) = &unk_1ECABBFE0;
                          uint64_t v330 = v322;
                          v331[0] = 0;
                          unsigned __int8 v333 = 0;
                          int v298 = v149;
                          uint64_t v288 = v150;
                          if (v149)
                          {
                            int v332 = -1;
                            if (v150 != 0xFFFFFFFFLL)
                            {
                              int v165 = v150;
                              ((void (*)(long long *, unsigned char *, unsigned char *))off_1ECABCF18[v150])(&v339, v331, v323);
                              int v332 = v165;
                              char v163 = (void (**)(WGSL::AST::Identifier *__hidden))v328;
                              uint64_t v164 = v330;
                            }
                            uint64_t v290 = v164;
                            v292 = v163;
                            int v166 = 1;
                            unsigned __int8 v333 = 1;
                          }
                          else
                          {
                            uint64_t v290 = v322;
                            v292 = v320;
                            int v166 = 0;
                          }
                          *((void *)&v328 + 1) = &unk_1ECABD308;
                          *(_OWORD *)v334 = *(_OWORD *)v326;
                          uint64_t v172 = v162 + 32 * v153;
                          *(void *)(v172 + 24) = 0;
                          int v173 = (void *)(v172 + 24);
                          uint16x8_t v174 = (char *)operator new(0x60uLL);
                          uint16x8_t v175 = v174;
                          *(void *)uint16x8_t v174 = &unk_1ECABD330;
                          *((void *)v174 + 1) = v292;
                          *(_OWORD *)(v174 + 24) = v329;
                          *((void *)v174 + 2) = &unk_1ECABBFE0;
                          *((void *)v174 + 5) = v290;
                          v174[48] = 0;
                          v174[72] = 0;
                          if (v298)
                          {
                            *((_DWORD *)v174 + 16) = -1;
                            int v176 = v166;
                            if (v288 != 0xFFFFFFFFLL)
                            {
                              ((void (*)(long long *, char *, unsigned char *))off_1ECABCF18[v288])(&v339, v174 + 48, v331);
                              *((_DWORD *)v175 + 16) = v288;
                              int v176 = v333;
                            }
                            v175[72] = 1;
                          }
                          else
                          {
                            int v176 = 0;
                          }
                          *((void *)v175 + 2) = &unk_1ECABD308;
                          *((_OWORD *)v175 + 5) = *(_OWORD *)v334;
                          *int v173 = v175;
                          *((void *)&v328 + 1) = &unk_1ECABBFE0;
                          v177 = v300;
                          if (v176 && v332 != -1) {
                            ((void (*)(long long *, unsigned char *))off_1ECABCE68[v332])(&v339, v331);
                          }
                          ++*(_DWORD *)(v299 + 412);
                          unint64_t v178 = this;
                          int v7 = v309;
                          uint64_t v179 = v308;
                          *(void *)v321 = &unk_1ECABBFE0;
                          if (!v325) {
                            goto LABEL_254;
                          }
                        }
                        if (v324 != -1) {
                          ((void (*)(long long *, unsigned char *))off_1ECABCE68[v324])(&v339, v323);
                        }
LABEL_254:
                        (**(void (***)(uint64_t))v133)(v133);
                        *(void *)uint64_t v133 = &unk_1ECABC008;
                        *(_OWORD *)(v133 + 8) = *v177;
                        *(void *)uint64_t v133 = &unk_1ECABBFE0;
                        *(void *)(v133 + 24) = *(void *)(v179 + 24);
                        *(unsigned char *)(v133 + 32) = 0;
                        *(unsigned char *)(v133 + 56) = 0;
                        if (*(unsigned char *)(v179 + 56))
                        {
                          *(_DWORD *)(v133 + 48) = -1;
                          uint64_t v180 = *(unsigned int *)(v179 + 48);
                          if (v180 != -1)
                          {
                            ((void (*)(long long *, uint64_t, uint64_t))off_1ECABCEC0[v180])(&v339, v133 + 32, v295);
                            *(_DWORD *)(v133 + 48) = v180;
                          }
                          *(unsigned char *)(v133 + 56) = 1;
                        }
                        *(void *)uint64_t v133 = &unk_1ECABD308;
                        *(_OWORD *)(v133 + 64) = *v302;
                        WGSL::RewriteGlobalVariables::updateReference((unint64_t)v178, *(WGSL::AST::Variable **)(*(void *)&v12 + 136), (WGSL::AST::Expression *)v179);
                        uint64_t v83 = *((void *)v178 + 5);
                        goto LABEL_259;
                      }
                    }
                  }
                  else if ((WGSL::Type::packing(*(WGSL::Type **)v66) & 0x10) != 0)
                  {
                    *(unsigned char *)(*((void *)this + 5) + 30) = 1;
                  }
                  if ((WGSL::Type::packing(*(WGSL::Type **)v66) & 0x10) != 0)
                  {
                    uint64_t v83 = *((void *)this + 5);
LABEL_259:
                    uint64_t v124 = *(void *)&v12 + 129;
                    uint64_t v125 = *(unsigned __int8 *)(*(void *)&v12 + 129);
                    *(unsigned char *)(*(void *)&v12 + 129) = 1;
                    v181 = (void *)(v83 + 400);
                    uint64_t v127 = (_DWORD *)(v83 + 412);
                    unint64_t v182 = *(unsigned int *)(v83 + 412);
                    if (v182 == *(_DWORD *)(v83 + 408))
                    {
                      unint64_t v183 = v182 + (v182 >> 2);
                      if (v183 >= 0x10) {
                        unint64_t v184 = v183 + 1;
                      }
                      else {
                        unint64_t v184 = 16;
                      }
                      if (v184 <= v182 + 1) {
                        unint64_t v185 = v182 + 1;
                      }
                      else {
                        unint64_t v185 = v184;
                      }
                      WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v181, v185);
                      unint64_t v182 = *v127;
                    }
                    uint64_t v132 = (void *)(*v181 + 32 * v182);
LABEL_268:
                    *uint64_t v132 = &unk_1ECABD2C0;
                    v132[1] = v124;
                    v132[2] = v125;
                    v132[3] = v132;
                    ++*v127;
                    int v8 = v310;
                    uint64_t v3 = v311;
                  }
                }
LABEL_269:
                if (!*((void *)this + 18)) {
                  goto LABEL_280;
                }
                unint64_t v186 = *(uint64_t **)(*(void *)(*(void *)&v12 + 136) + 24);
                if (v186)
                {
                  while (1)
                  {
                    while (1)
                    {
                      int v189 = *((_DWORD *)v186 + 12);
                      if (v189 != 4) {
                        break;
                      }
                      uint64_t v187 = *v186;
                      uint64_t v188 = *(unsigned int *)(*v186 + 84);
                      if (!v188)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x18255C858);
                      }
                      unint64_t v186 = *(uint64_t **)(*(void *)(*(void *)(*(void *)(v187 + 72) + 8 * v188 - 8) + 104) + 24);
                      if (!v186) {
                        goto LABEL_5;
                      }
                    }
                    if (v189 != 10) {
                      break;
                    }
                    unint64_t v186 = (uint64_t *)v186[1];
                    if (!v186) {
                      goto LABEL_5;
                    }
                  }
                  if (v189 == 3 && !*((_DWORD *)v186 + 4))
                  {
LABEL_280:
                    *(int32x2_t *)&long long v339 = v12;
                    DWORD2(v339) = v19;
                    int v10 = HIDWORD(v319);
                    if (HIDWORD(v319) == v319)
                    {
                      uint64_t v9 = (_OWORD *)WTF::Vector<std::tuple<WGSL::AST::Function *,WGSL::AST::CallExpression *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v318, HIDWORD(v319) + 1, (unint64_t)&v339);
                      int v10 = HIDWORD(v319);
                      *((_OWORD *)v318 + HIDWORD(v319)) = *v9;
                    }
                    else
                    {
                      *((_OWORD *)v318 + HIDWORD(v319)) = v339;
                    }
                    HIDWORD(v319) = v10 + 1;
                  }
                }
                goto LABEL_5;
              }
              int16x8_t v77 = (_DWORD *)WGSL::RewriteGlobalVariables::packStructType((uint64_t)this, v66);
              if (!v77) {
                goto LABEL_269;
              }
              unint64_t v78 = v77;
              uint64_t v79 = *((void *)this + 5);
              long long v328 = 0uLL;
              if (v77[12] != 4) {
                goto LABEL_450;
              }
              uint8x8_t v80 = *(_DWORD **)(*(void *)v77 + 48);
              if (v80) {
                *v80 += 2;
              }
              *((void *)&v339 + 1) = 0;
              *(void *)&long long v340 = 0;
              *(void *)&long long v339 = off_1ECABC030;
              *((void *)&v340 + 1) = v80;
              int8x16_t v81 = (WGSL::AST::Expression *)WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>((void *)(v79 + 312), &v328, (uint64_t)&v339);
              int8x16_t v82 = (_DWORD *)*((void *)&v340 + 1);
              *(void *)&long long v339 = off_1ECABC030;
              *((void *)&v340 + 1) = 0;
              if (v82)
              {
                if (*v82 == 2) {
                  WTF::StringImpl::destroy();
                }
                else {
                  *v82 -= 2;
                }
              }
              uint64_t v305 = v5;
              *((void *)v81 + 3) = v78;
              uint64_t v84 = *(void *)(*(void *)&v12 + 112);
              if ((*(unsigned int (**)(uint64_t))(*(void *)v84 + 16))(v84) != 22)
              {
                __break(0xC471u);
                JUMPOUT(0x18255C80CLL);
              }
              uint64_t v307 = *((void *)this + 5);
              *(_OWORD *)&v321[8] = *(_OWORD *)(v84 + 8);
              uint64_t v85 = *(void *)(v84 + 24);
              v320 = (void (**)(WGSL::AST::Identifier *__hidden))v84;
              *(void *)v321 = &unk_1ECABBFE0;
              uint64_t v322 = v85;
              v323[0] = 0;
              unsigned __int8 v325 = 0;
              int v86 = *(unsigned __int8 *)(v84 + 56);
              if (*(unsigned char *)(v84 + 56))
              {
                unsigned int v324 = -1;
                uint64_t v87 = *(unsigned int *)(v84 + 48);
                if (v87 != -1)
                {
                  ((void (*)(long long *, unsigned char *, uint64_t))off_1ECABCEC0[v87])(&v339, v323, v84 + 32);
                  unsigned int v324 = v87;
                }
                unsigned __int8 v325 = 1;
              }
              else
              {
                uint64_t v87 = 0;
              }
              *(void *)v321 = off_1ECABBFB8;
              *(_OWORD *)&v326[8] = *(_OWORD *)(v84 + 72);
              *(void *)v326 = off_1ECABC030;
              unsigned int v88 = *(_DWORD **)(v84 + 88);
              if (v88) {
                *v88 += 2;
              }
              uint64_t v301 = v84 + 32;
              v304 = v81;
              unint64_t v89 = (uint64_t *)(v307 + 400);
              v327 = v88;
              unint64_t v90 = *(unsigned int *)(v307 + 412);
              if (v90 == *(_DWORD *)(v307 + 408))
              {
                unint64_t v91 = v90 + (v90 >> 2);
                if (v91 >= 0x10) {
                  unint64_t v92 = v91 + 1;
                }
                else {
                  unint64_t v92 = 16;
                }
                if (v92 <= v90 + 1) {
                  unint64_t v93 = v90 + 1;
                }
                else {
                  unint64_t v93 = v92;
                }
                WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v89, v93);
                uint64_t v94 = *(unsigned int *)(v307 + 412);
                uint64_t v95 = *(void *)(v307 + 400);
                int8x16x2_t v96 = v320;
                long long v340 = *(_OWORD *)&v321[8];
                uint64_t v97 = v322;
                *(void *)&long long v339 = v320;
                *((void *)&v339 + 1) = &unk_1ECABBFE0;
                uint64_t v341 = v322;
                v342[0] = 0;
                unsigned __int8 v344 = 0;
                int v293 = v325;
                if (v325)
                {
                  int v343 = -1;
                  uint64_t v98 = v324;
                  if (v324 != -1)
                  {
                    ((void (*)(uint64_t *, unsigned char *, unsigned char *))off_1ECABCF18[v324])(&v337, v342, v323);
                    int v343 = v98;
                    int8x16x2_t v96 = (void (**)(WGSL::AST::Identifier *__hidden))v339;
                    uint64_t v97 = v341;
                  }
                  int v294 = 1;
                  unsigned __int8 v344 = 1;
                }
                else
                {
                  int v294 = 0;
                  uint64_t v98 = 0;
                }
                *((void *)&v339 + 1) = off_1ECABBFB8;
                *(_OWORD *)&v345[8] = *(_OWORD *)&v326[8];
                int8x16_t v111 = v327;
                v327 = 0;
                *(void *)v345 = off_1ECABC030;
                v346 = v111;
                uint64_t v112 = v95 + 32 * v94;
                *(void *)(v112 + 24) = 0;
                int8x16_t v113 = (void *)(v112 + 24);
                uint64_t v114 = (char *)operator new(0x70uLL);
                unint64_t v115 = v114;
                *(void *)uint64_t v114 = &unk_1ECABD278;
                *((void *)v114 + 1) = v96;
                *(_OWORD *)(v114 + 24) = v340;
                *((void *)v114 + 2) = &unk_1ECABBFE0;
                *((void *)v114 + 5) = v97;
                v114[48] = 0;
                v114[72] = 0;
                if (v293)
                {
                  *((_DWORD *)v114 + 16) = -1;
                  int8x16_t v110 = v304;
                  int v116 = v294;
                  if (v98 != 0xFFFFFFFFLL)
                  {
                    ((void (*)(uint64_t *, char *, unsigned char *))off_1ECABCF18[v98])(&v337, v114 + 48, v342);
                    *((_DWORD *)v115 + 16) = v98;
                    int8x16_t v111 = v346;
                    int v116 = v344;
                  }
                  v115[72] = 1;
                }
                else
                {
                  int8x16_t v110 = v304;
                  int v116 = v294;
                }
                *((void *)v115 + 2) = off_1ECABBFB8;
                *(_OWORD *)(v115 + 88) = *(_OWORD *)&v345[8];
                *((void *)v115 + 10) = off_1ECABC030;
                *((void *)v115 + 13) = v111;
                *int8x16_t v113 = v115;
                v346 = 0;
                *(void *)v345 = off_1ECABC030;
                *((void *)&v339 + 1) = &unk_1ECABBFE0;
                if (v116 && v343 != -1) {
                  ((void (*)(uint64_t *, unsigned char *))off_1ECABCE68[v343])(&v337, v342);
                }
                ++*(_DWORD *)(v307 + 412);
                int v7 = v309;
LABEL_161:
                uint64_t v117 = v327;
                *(void *)v326 = off_1ECABC030;
                v327 = 0;
                if (v117)
                {
                  if (*v117 == 2)
                  {
                    WTF::StringImpl::destroy();
                    *(void *)v321 = &unk_1ECABBFE0;
                    if (!v325) {
                      goto LABEL_169;
                    }
LABEL_167:
                    if (v324 != -1) {
                      ((void (*)(long long *, unsigned char *))off_1ECABCE68[v324])(&v339, v323);
                    }
LABEL_169:
                    *(void *)(v84 + 64) = off_1ECABC030;
                    uint64_t v118 = *(_DWORD **)(v84 + 88);
                    *(void *)(v84 + 88) = 0;
                    if (v118)
                    {
                      if (*v118 == 2)
                      {
                        WTF::StringImpl::destroy();
                        *(void *)uint64_t v84 = &unk_1ECABBFE0;
                        if (!*(unsigned char *)(v84 + 56))
                        {
LABEL_178:
                          *(void *)uint64_t v84 = &unk_1ECABC008;
                          *(_OWORD *)(v84 + 8) = *(_OWORD *)((char *)v110 + 8);
                          *(void *)uint64_t v84 = &unk_1ECABBFE0;
                          *(void *)(v84 + 24) = *((void *)v110 + 3);
                          *(unsigned char *)(v84 + 32) = 0;
                          *(unsigned char *)(v84 + 56) = 0;
                          if (*((unsigned char *)v110 + 56))
                          {
                            uint64_t v120 = v7;
                            *(_DWORD *)(v84 + 48) = -1;
                            uint64_t v121 = *((unsigned int *)v110 + 12);
                            if (v121 != -1)
                            {
                              ((void (*)(long long *, uint64_t, char *))off_1ECABCEC0[v121])(&v339, v301, (char *)v110 + 32);
                              *(_DWORD *)(v84 + 48) = v121;
                            }
                            *(unsigned char *)(v84 + 56) = 1;
                            int v7 = v120;
                          }
                          *(void *)uint64_t v84 = off_1ECABBFB8;
                          *(void *)(v84 + 64) = &unk_1ECABC008;
                          *(_OWORD *)(v84 + 72) = *(_OWORD *)((char *)v110 + 72);
                          *(void *)(v84 + 64) = off_1ECABC030;
                          uint16x8_t v122 = (_DWORD *)*((void *)v110 + 11);
                          if (v122) {
                            *v122 += 2;
                          }
                          *(void *)(v84 + 88) = v122;
                          WGSL::RewriteGlobalVariables::updateReference((unint64_t)this, *(WGSL::AST::Variable **)(*(void *)&v12 + 136), v110);
                          uint64_t v123 = *((void *)this + 5);
                          uint64_t v124 = *(void *)&v12 + 129;
                          uint64_t v125 = *(unsigned __int8 *)(*(void *)&v12 + 129);
                          *(unsigned char *)(*(void *)&v12 + 129) = 1;
                          uint64_t v126 = (void *)(v123 + 400);
                          uint64_t v127 = (_DWORD *)(v123 + 412);
                          unint64_t v128 = *(unsigned int *)(v123 + 412);
                          if (v128 == *(_DWORD *)(v123 + 408))
                          {
                            unint64_t v129 = v128 + (v128 >> 2);
                            if (v129 >= 0x10) {
                              unint64_t v130 = v129 + 1;
                            }
                            else {
                              unint64_t v130 = 16;
                            }
                            if (v130 <= v128 + 1) {
                              unint64_t v131 = v128 + 1;
                            }
                            else {
                              unint64_t v131 = v130;
                            }
                            WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v126, v131);
                            unint64_t v128 = *v127;
                          }
                          uint64_t v132 = (void *)(*v126 + 32 * v128);
                          uint64_t v5 = v305;
                          goto LABEL_268;
                        }
LABEL_175:
                        uint64_t v119 = *(unsigned int *)(v84 + 48);
                        if (v119 != -1) {
                          ((void (*)(long long *, uint64_t))off_1ECABCE68[v119])(&v339, v301);
                        }
                        *(_DWORD *)(v84 + 48) = -1;
                        goto LABEL_178;
                      }
                      *v118 -= 2;
                    }
                    *(void *)uint64_t v84 = &unk_1ECABBFE0;
                    if (!*(unsigned char *)(v84 + 56)) {
                      goto LABEL_178;
                    }
                    goto LABEL_175;
                  }
                  *v117 -= 2;
                }
                *(void *)v321 = &unk_1ECABBFE0;
                if (!v325) {
                  goto LABEL_169;
                }
                goto LABEL_167;
              }
              uint64_t v99 = *v89;
              int8x16x2_t v100 = v320;
              long long v329 = *(_OWORD *)&v321[8];
              uint64_t v101 = v322;
              *(void *)&long long v328 = v320;
              *((void *)&v328 + 1) = &unk_1ECABBFE0;
              uint64_t v330 = v322;
              v331[0] = 0;
              unsigned __int8 v333 = 0;
              if (v86)
              {
                int v332 = -1;
                if (v87 != 0xFFFFFFFFLL)
                {
                  uint64_t v102 = v99;
                  ((void (*)(long long *, unsigned char *, unsigned char *))off_1ECABCF18[v87])(&v339, v331, v323);
                  uint64_t v99 = v102;
                  int v332 = v87;
                  unsigned int v88 = v327;
                  int8x16x2_t v100 = (void (**)(WGSL::AST::Identifier *__hidden))v328;
                  uint64_t v101 = v330;
                }
                unsigned __int8 v333 = 1;
              }
              *((void *)&v328 + 1) = off_1ECABBFB8;
              *(_OWORD *)&v334[8] = *(_OWORD *)&v326[8];
              v327 = 0;
              *(void *)v334 = off_1ECABC030;
              v335 = v88;
              uint64_t v103 = v99 + 32 * v90;
              *(void *)(v103 + 24) = 0;
              uint64_t v104 = (void *)(v103 + 24);
              uint64_t v105 = (char *)operator new(0x70uLL);
              uint8x8_t v106 = v105;
              *(void *)uint64_t v105 = &unk_1ECABD278;
              *((void *)v105 + 1) = v100;
              *(_OWORD *)(v105 + 24) = v329;
              *((void *)v105 + 2) = &unk_1ECABBFE0;
              *((void *)v105 + 5) = v101;
              v105[48] = 0;
              v105[72] = 0;
              if (v86)
              {
                *((_DWORD *)v105 + 16) = -1;
                int v107 = v332;
                if (v332 != -1)
                {
                  ((void (*)(long long *, char *, unsigned char *))off_1ECABCF18[v332])(&v339, v105 + 48, v331);
                  *((_DWORD *)v106 + 16) = v107;
                }
                v106[72] = 1;
              }
              *((void *)v106 + 2) = off_1ECABBFB8;
              *(_OWORD *)(v106 + 88) = *(_OWORD *)&v334[8];
              *((void *)v106 + 10) = off_1ECABC030;
              unint64_t v108 = v335;
              v335 = 0;
              *((void *)v106 + 13) = v108;
              *uint64_t v104 = v106;
              uint64_t v109 = v335;
              *(void *)v334 = off_1ECABC030;
              v335 = 0;
              int v7 = v309;
              int8x16_t v110 = v304;
              if (v109)
              {
                if (*v109 == 2)
                {
                  WTF::StringImpl::destroy();
                  *((void *)&v328 + 1) = &unk_1ECABBFE0;
                  if (!v333)
                  {
LABEL_160:
                    ++*(_DWORD *)(v307 + 412);
                    goto LABEL_161;
                  }
LABEL_158:
                  if (v332 != -1) {
                    ((void (*)(long long *, unsigned char *))off_1ECABCE68[v332])(&v339, v331);
                  }
                  goto LABEL_160;
                }
                *v109 -= 2;
              }
              *((void *)&v328 + 1) = &unk_1ECABBFE0;
              if (!v333) {
                goto LABEL_160;
              }
              goto LABEL_158;
            }
            *v65 -= 2;
          }
          uint64_t v66 = *(void *)(*(void *)(*(void *)&v12 + 112) + 24);
          if (!v66) {
            goto LABEL_269;
          }
          goto LABEL_88;
        }
LABEL_56:
        *unint64_t v44 = v19;
        int8x16_t v49 = (WTF **)(v44 + 2);
        size_t v48 = (WTF *)*((void *)v44 + 1);
        uint64_t v50 = v44[5];
        if (v50)
        {
          uint64_t v51 = 16 * v50;
          unint64_t v52 = (_DWORD **)((char *)v48 + 8);
          do
          {
            unint64_t v53 = *v52;
            *unint64_t v52 = 0;
            if (v53)
            {
              if (*v53 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *v53 -= 2;
              }
            }
            v52 += 2;
            v51 -= 16;
          }
          while (v51);
          size_t v48 = *v49;
          int v7 = v309;
        }
        if (v48)
        {
          *((void *)v44 + 1) = 0;
          v44[4] = 0;
          WTF::fastFree(v48, a2);
        }
        *int8x16_t v49 = 0;
        *((void *)v44 + 2) = 0;
        if (*v315)
        {
          uint64_t v3 = v311;
          ++*(_DWORD *)(*v315 - 12);
          uint64_t v54 = *v315;
          if (*v315) {
            goto LABEL_68;
          }
        }
        else
        {
          uint64_t v3 = v311;
          MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
          uint64_t v54 = *v315;
          if (*v315)
          {
LABEL_68:
            uint64_t v55 = (*(_DWORD *)(v54 - 16) + *(_DWORD *)(v54 - 12));
            unint64_t v56 = *(unsigned int *)(v54 - 4);
            if (v56 <= 0x400) {
              goto LABEL_69;
            }
            goto LABEL_74;
          }
        }
        uint64_t v55 = *(unsigned int *)(v54 - 16);
        unint64_t v56 = *(unsigned int *)(v54 - 4);
        if (v56 <= 0x400)
        {
LABEL_69:
          if (3 * v56 > 4 * v55) {
            goto LABEL_77;
          }
          if (!v56)
          {
            unsigned int v57 = 8;
LABEL_76:
            unint64_t v44 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v315, v57, v44);
            goto LABEL_77;
          }
LABEL_75:
          unsigned int v57 = v56 << (6 * *(_DWORD *)(v54 - 12) >= (2 * v56));
          goto LABEL_76;
        }
LABEL_74:
        if (v56 > 2 * v55) {
          goto LABEL_77;
        }
        goto LABEL_75;
      }
LABEL_34:
      *uint64_t v30 = v23;
      v30[1] = v12;
      if (*v8)
      {
        ++*(_DWORD *)(*v8 - 12);
        uint64_t v35 = *v8;
        if (*v8) {
          goto LABEL_36;
        }
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        uint64_t v35 = *v8;
        if (*v8)
        {
LABEL_36:
          uint64_t v36 = (*(_DWORD *)(v35 - 16) + *(_DWORD *)(v35 - 12));
          unint64_t v37 = *(unsigned int *)(v35 - 4);
          if (v37 <= 0x400) {
            goto LABEL_37;
          }
          goto LABEL_42;
        }
      }
      uint64_t v36 = *(unsigned int *)(v35 - 16);
      unint64_t v37 = *(unsigned int *)(v35 - 4);
      if (v37 <= 0x400)
      {
LABEL_37:
        if (3 * v37 > 4 * v36) {
          goto LABEL_45;
        }
        if (!v37)
        {
          unsigned int v38 = 8;
LABEL_44:
          WTF::HashTable<std::tuple<unsigned int,unsigned int>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned int>,WGSL::AST::Variable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned int>,WGSL::AST::Variable *>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned int>>,WTF::HashMap<std::tuple<unsigned int,unsigned int>,WGSL::AST::Variable *,WTF::DefaultHash<std::tuple<unsigned int,unsigned int>>,WTF::HashTraits<std::tuple<unsigned int,unsigned int>>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned int>>>::rehash(v8, v38);
          goto LABEL_45;
        }
LABEL_43:
        unsigned int v38 = v37 << (6 * *(_DWORD *)(v35 - 12) >= (2 * v37));
        goto LABEL_44;
      }
LABEL_42:
      if (v37 > 2 * v36) {
        goto LABEL_45;
      }
      goto LABEL_43;
    }
LABEL_5:
    uint64_t v4 = this;
LABEL_6:
    if (++v6 == v5) {
      goto LABEL_282;
    }
  }
  int v269 = 0;
  uint64_t v270 = *(void *)(*(void *)&v12 + 164);
  do
  {
    ++v269;
    BOOL v271 = v270 > 9;
    LODWORD(v270) = v270 / 0xA;
  }
  while (v271);
  int v272 = 0;
  unsigned int v273 = v3;
  do
  {
    ++v272;
    BOOL v271 = v273 > 9;
    v273 /= 0xAu;
  }
  while (v271);
  if (v272 < 0) {
    goto LABEL_457;
  }
  BOOL v205 = __OFADD__(v272, 15);
  int v274 = v272 + 15;
  if (v205) {
    goto LABEL_457;
  }
  BOOL v205 = __OFADD__(v274, 44);
  int v275 = v274 + 44;
  BOOL v276 = v205;
  if (v269 < 0) {
    goto LABEL_457;
  }
  if (v276) {
    goto LABEL_457;
  }
  BOOL v205 = __OFADD__(v269, v275);
  int v277 = v269 + v275;
  if (v205) {
    goto LABEL_457;
  }
  uint64_t v278 = (v277 + 24);
  if (__OFADD__(v277, 24)) {
    goto LABEL_457;
  }
  if (v277 == -24)
  {
    uint64_t v279 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_445;
  }
  if ((v278 & 0x80000000) != 0 || (WTF::tryFastCompactMalloc((WTF *)(v278 + 20)), (uint64_t v279 = v339) == 0))
  {
LABEL_457:
    __break(0xC471u);
    JUMPOUT(0x18255C868);
  }
  uint64_t v280 = 0;
  *(_DWORD *)long long v339 = 2;
  *(_DWORD *)(v279 + 4) = v278;
  *(void *)(v279 + 8) = v279 + 20;
  *(_DWORD *)(v279 + 16) = 4;
  qmemcpy((void *)(v279 + 20), "global has buffer index ", 24);
  unsigned int v281 = v13;
  do
  {
    *((unsigned char *)&v339 + v280-- + 12) = (v281 % 0xA) | 0x30;
    BOOL v271 = v281 > 9;
    v281 /= 0xAu;
  }
  while (v271);
  if (v280 + 14 <= 13) {
    memcpy((void *)(v279 + 44), (char *)&v339 + v280 + 13, -v280);
  }
  unsigned int v282 = 0;
  do
  {
    ++v282;
    BOOL v271 = v13 > 9;
    LODWORD(v13) = v13 / 0xA;
  }
  while (v271);
  uint64_t v283 = 0;
  v284 = (char *)(v279 + 44 + v282);
  qmemcpy(v284, " which exceeds the max allowed buffer index ", 44);
  unsigned int v285 = v3;
  do
  {
    *((unsigned char *)&v339 + v283-- + 12) = (v285 % 0xA) | 0x30;
    BOOL v271 = v285 > 9;
    v285 /= 0xAu;
  }
  while (v271);
  v286 = v284 + 44;
  if (v283 + 14 <= 13) {
    memcpy(v286, (char *)&v339 + v283 + 13, -v283);
  }
  int v287 = 0;
  do
  {
    ++v287;
    BOOL v271 = v3 > 9;
    LODWORD(v3) = v3 / 0xA;
  }
  while (v271);
  qmemcpy(&v286[v287], " for this stage", 15);
LABEL_445:
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = v279;
  *(unsigned char *)(a3 + 24) = 1;
  uint64_t result = v318;
  if (v318) {
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t WGSL::RewriteGlobalVariables::visitEntryPoint@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = result;
  v1223[2] = *MEMORY[0x1E4F143B8];
  unint64_t v6 = *(uint64_t **)(result + 192);
  uint64_t v7 = *v6;
  if (!*v6)
  {
LABEL_15:
    uint64_t v14 = 0;
    uint64_t v15 = **(void **)(v5 + 192);
    if (!v15) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  int v8 = *(_DWORD *)(v7 - 8);
  uint64_t v9 = *(WTF::StringImpl **)(a2 + 16);
  unsigned int v10 = *((_DWORD *)v9 + 4);
  if (v10 < 0x100) {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(v9);
  }
  else {
    unsigned int v11 = v10 >> 8;
  }
  for (i = 0; ; unsigned int v11 = i + v13)
  {
    uint64_t v13 = v11 & v8;
    uint64_t result = *(void *)(v7 + 16 * v13);
    if (result == -1) {
      goto LABEL_6;
    }
    if (!result) {
      break;
    }
    uint64_t result = WTF::equal((WTF *)result, *(const WTF::StringImpl **)(a2 + 16), a3);
    if (result)
    {
      uint64_t v14 = v7 + 16 * v13;
      uint64_t v15 = **(void **)(v5 + 192);
      if (v15) {
        goto LABEL_16;
      }
      goto LABEL_17;
    }
LABEL_6:
    ++i;
  }
  if (!*v6) {
    goto LABEL_15;
  }
  uint64_t v14 = *v6 + 16 * *(unsigned int *)(*v6 - 4);
  uint64_t v15 = **(void **)(v5 + 192);
  if (v15) {
LABEL_16:
  }
    v15 += 16 * *(unsigned int *)(v15 - 4);
LABEL_17:
  if (v15 == v14)
  {
LABEL_218:
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 24) = 0;
    return result;
  }
  int v16 = *(WTF **)(v5 + 96);
  while (v16)
  {
    int32x2_t v26 = v16;
    int v16 = (WTF *)*((void *)v16 + 2);
    int8x8_t v27 = *(_DWORD **)v26;
    *(void *)int32x2_t v26 = 0;
    if (v27)
    {
      if (*v27 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v27 -= 2;
      }
    }
    WTF::fastFree(v26, (void *)a2);
  }
  uint64_t v17 = *(void *)(v5 + 88);
  if (v17)
  {
    *(void *)(v5 + 88) = 0;
    WTF::fastFree((WTF *)(v17 - 16), (void *)a2);
  }
  *(void *)(v5 + 96) = 0;
  *(void *)(v5 + 104) = 0;
  uint64_t v18 = *(void *)(v5 + 72);
  if (v18)
  {
    *(void *)(v5 + 72) = 0;
    WTF::fastFree((WTF *)(v18 - 16), (void *)a2);
  }
  uint64_t v19 = *(void *)(v5 + 240);
  if (v19)
  {
    *(void *)(v5 + 240) = 0;
    WTF::fastFree((WTF *)(v19 - 16), (void *)a2);
  }
  uint64_t v20 = *(void *)(v5 + 200);
  char v1202 = 0;
  DWORD2(v1205) = 0;
  uint64_t v1206 = 0;
  memset(v1200, 0, 17);
  v1203 = 0;
  LOBYTE(v1204) = 0;
  uint64_t v21 = *(void *)v20;
  if (*(void *)v20
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Reflection::EntryPointInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Reflection::EntryPointInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Reflection::EntryPointInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Reflection::EntryPointInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)v20, 8u, 0), (uint64_t v21 = *(void *)v20) != 0))
  {
    int v22 = *(_DWORD *)(v21 - 8);
    int32x2_t v23 = *(WTF::StringImpl **)(a2 + 16);
    unsigned int v24 = *((_DWORD *)v23 + 4);
    uint64_t v1178 = v5;
    if (v24 >= 0x100) {
      goto LABEL_28;
    }
LABEL_35:
    unsigned int v25 = WTF::StringImpl::hashSlowCase(v23);
  }
  else
  {
    int v22 = 0;
    int32x2_t v23 = *(WTF::StringImpl **)(a2 + 16);
    unsigned int v24 = *((_DWORD *)v23 + 4);
    uint64_t v1178 = v5;
    if (v24 < 0x100) {
      goto LABEL_35;
    }
LABEL_28:
    unsigned int v25 = v24 >> 8;
  }
  int32x2_t v28 = 0;
  int v29 = 1;
  unint64_t v30 = 96;
  while (2)
  {
    unsigned int v31 = v25 & v22;
    uint64_t v32 = v21 + 96 * (v25 & v22);
    unint64_t v33 = *(WTF **)v32;
    if (*(void *)v32 == -1)
    {
      int32x2_t v28 = (_OWORD *)(v21 + 96 * v31);
LABEL_38:
      unsigned int v25 = v29 + v31;
      ++v29;
      continue;
    }
    break;
  }
  if (v33)
  {
    if (WTF::equal(v33, *(const WTF::StringImpl **)(a2 + 16), a3))
    {
      WGSL::Reflection::EntryPointInformation::~EntryPointInformation((WGSL::Reflection::EntryPointInformation *)v1200, (void *)a2);
      __break(0xC471u);
      JUMPOUT(0x18255CAD0);
    }
    goto LABEL_38;
  }
  if (v28)
  {
    v28[4] = 0u;
    v28[5] = 0u;
    void v28[2] = 0u;
    v28[3] = 0u;
    _OWORD *v28 = 0u;
    v28[1] = 0u;
    --*(_DWORD *)(*(void *)v20 - 16);
    uint64_t v32 = (uint64_t)v28;
  }
  int v34 = *(_DWORD **)(a2 + 16);
  uint64_t v35 = v1178;
  if (v34) {
    *v34 += 2;
  }
  *(void *)uint64_t v32 = v34;
  uint64_t v36 = *(void *)v1200;
  uint64_t v37 = *(void *)&v1200[8];
  *(void *)v1200 = 0;
  *(void *)&v1200[8] = 0;
  v1207[16] = 0;
  LOBYTE(v1208) = 0;
  unsigned int v38 = v1203;
  v1203 = 0;
  long long v1210 = v1204;
  long long v1211 = v1205;
  v1209 = v38;
  *(void *)&long long v1212 = v1206;
  *(void *)v1207 = 0;
  *(void *)&v1207[8] = v37;
  uint64_t v39 = *(_DWORD **)(v32 + 8);
  *(void *)(v32 + 8) = v36;
  if (!v39)
  {
LABEL_50:
    *(void *)&v1207[8] = 0;
    int v40 = *(_DWORD **)(v32 + 16);
    *(void *)(v32 + 16) = v37;
    if (v40) {
      goto LABEL_53;
    }
LABEL_55:
    if (!*(unsigned char *)(v32 + 40)) {
      goto LABEL_74;
    }
    goto LABEL_56;
  }
  if (*v39 != 2)
  {
    *v39 -= 2;
    goto LABEL_50;
  }
  WTF::StringImpl::destroy();
  *(void *)&v1207[8] = 0;
  int v40 = *(_DWORD **)(v32 + 16);
  *(void *)(v32 + 16) = v37;
  if (!v40) {
    goto LABEL_55;
  }
LABEL_53:
  if (*v40 != 2)
  {
    *v40 -= 2;
    goto LABEL_55;
  }
  WTF::StringImpl::destroy();
  if (*(unsigned char *)(v32 + 40))
  {
LABEL_56:
    unsigned int v41 = *(_DWORD *)(v32 + 36);
    uint64_t v42 = *(void *)(v32 + 24);
    if (v41)
    {
      uint64_t v43 = v42 + 24 * v41;
      do
      {
        uint64_t v44 = *(unsigned int *)(v42 + 20);
        if (v44)
        {
          unint64_t v30 = 120 * v44;
          int v45 = (_DWORD **)(*(void *)(v42 + 8) + 40);
          do
          {
            uint64_t v46 = *v45;
            *int v45 = 0;
            if (v46)
            {
              if (*v46 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *v46 -= 2;
              }
            }
            v45 += 15;
            v30 -= 120;
          }
          while (v30);
        }
        int v47 = *(WTF **)(v42 + 8);
        if (v47)
        {
          *(void *)(v42 + 8) = 0;
          *(_DWORD *)(v42 + 16) = 0;
          WTF::fastFree(v47, (void *)a2);
        }
        v42 += 24;
      }
      while (v42 != v43);
      uint64_t v42 = *(void *)(v32 + 24);
    }
    if (v42)
    {
      *(void *)(v32 + 24) = 0;
      *(_DWORD *)(v32 + 32) = 0;
      WTF::fastFree((WTF *)v42, (void *)a2);
    }
    *(unsigned char *)(v32 + 40) = 0;
    uint64_t v35 = v1178;
    v1209 = 0;
    uint64_t v48 = *(void *)(v32 + 48);
    *(void *)(v32 + 48) = v38;
    if (!v48) {
      goto LABEL_89;
    }
LABEL_75:
    uint64_t v49 = *(unsigned int *)(v48 - 4);
    if (!v49)
    {
LABEL_88:
      WTF::fastFree((WTF *)(v48 - 16), (void *)a2);
      uint64_t v35 = v1178;
      goto LABEL_89;
    }
    uint64_t v50 = v48;
    while (1)
    {
      uint64_t v51 = *(_DWORD **)v50;
      if (*(void *)v50 == -1) {
        goto LABEL_78;
      }
      unint64_t v52 = *(_DWORD **)(v50 + 8);
      *(void *)(v50 + 8) = 0;
      if (!v52) {
        goto LABEL_83;
      }
      if (*v52 != 2) {
        break;
      }
      WTF::StringImpl::destroy();
      uint64_t v51 = *(_DWORD **)v50;
      *(void *)uint64_t v50 = 0;
      if (v51)
      {
LABEL_86:
        if (*v51 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v51 -= 2;
        }
      }
LABEL_78:
      v50 += 32;
      if (!--v49) {
        goto LABEL_88;
      }
    }
    *v52 -= 2;
LABEL_83:
    *(void *)uint64_t v50 = 0;
    if (v51) {
      goto LABEL_86;
    }
    goto LABEL_78;
  }
LABEL_74:
  v1209 = 0;
  uint64_t v48 = *(void *)(v32 + 48);
  *(void *)(v32 + 48) = v38;
  if (v48) {
    goto LABEL_75;
  }
LABEL_89:
  long long v53 = v1210;
  long long v54 = v1211;
  *(void *)(v32 + 88) = v1212;
  *(_OWORD *)(v32 + 72) = v54;
  *(_OWORD *)(v32 + 56) = v53;
  WGSL::Reflection::EntryPointInformation::~EntryPointInformation((WGSL::Reflection::EntryPointInformation *)v1207, (void *)a2);
  if (*(void *)v20)
  {
    ++*(_DWORD *)(*(void *)v20 - 12);
    uint64_t v56 = *(void *)v20;
    if (*(void *)v20) {
      goto LABEL_91;
    }
LABEL_96:
    uint64_t v57 = *(unsigned int *)(v56 - 16);
    unint64_t v58 = *(unsigned int *)(v56 - 4);
    if (v58 > 0x400) {
      goto LABEL_97;
    }
LABEL_92:
    if (3 * v58 <= 4 * v57)
    {
      if (!v58)
      {
        unsigned int v59 = 8;
        goto LABEL_99;
      }
LABEL_98:
      unsigned int v59 = v58 << (6 * *(_DWORD *)(v56 - 12) >= (2 * v58));
LABEL_99:
      uint64_t v32 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Reflection::EntryPointInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Reflection::EntryPointInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Reflection::EntryPointInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Reflection::EntryPointInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)v20, v59, (WTF::StringImpl **)v32);
    }
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    uint64_t v56 = *(void *)v20;
    if (!*(void *)v20) {
      goto LABEL_96;
    }
LABEL_91:
    uint64_t v57 = (*(_DWORD *)(v56 - 16) + *(_DWORD *)(v56 - 12));
    unint64_t v58 = *(unsigned int *)(v56 - 4);
    if (v58 <= 0x400) {
      goto LABEL_92;
    }
LABEL_97:
    if (v58 <= 2 * v57) {
      goto LABEL_98;
    }
  }
  WGSL::Reflection::EntryPointInformation::~EntryPointInformation((WGSL::Reflection::EntryPointInformation *)v1200, v55);
  *(unsigned char *)(v35 + 184) = *(unsigned char *)(a2 + 8);
  unint64_t v61 = (_DWORD **)(v32 + 8);
  *(void *)(v35 + 128) = v32 + 8;
  uint64_t v62 = *(_DWORD **)(a2 + 16);
  if (v62) {
    *v62 += 2;
  }
  uint64_t v63 = *v61;
  *unint64_t v61 = v62;
  if (!v63)
  {
LABEL_105:
    uint64_t v64 = *(void *)(v35 + 128);
    uint64_t v65 = *(_DWORD **)(*(void *)a2 + 48);
    if (!v65) {
      goto LABEL_107;
    }
    goto LABEL_106;
  }
  if (*v63 != 2)
  {
    *v63 -= 2;
    goto LABEL_105;
  }
  WTF::StringImpl::destroy();
  uint64_t v64 = *(void *)(v35 + 128);
  uint64_t v65 = *(_DWORD **)(*(void *)a2 + 48);
  if (v65) {
LABEL_106:
  }
    *v65 += 2;
LABEL_107:
  uint64_t v66 = *(_DWORD **)(v64 + 8);
  *(void *)(v64 + 8) = v65;
  if (!v66) {
    goto LABEL_110;
  }
  if (*v66 == 2)
  {
    WTF::StringImpl::destroy();
    int v67 = *(unsigned __int8 *)(v35 + 184);
    if (v67 != 1) {
      goto LABEL_111;
    }
    goto LABEL_121;
  }
  *v66 -= 2;
LABEL_110:
  int v67 = *(unsigned __int8 *)(v35 + 184);
  if (v67 == 1)
  {
LABEL_121:
    uint64_t v71 = *(void *)(v35 + 128);
    if (*(_DWORD *)(v71 + 72)) {
      *(_DWORD *)(v71 + 72) = 0;
    }
    *(unsigned char *)(v71 + 48) = 0;
    goto LABEL_129;
  }
LABEL_111:
  if (v67 == 2)
  {
    uint64_t v72 = *(void *)(v35 + 128);
    if (*(_DWORD *)(v72 + 72) != 1)
    {
      int v73 = 1;
      goto LABEL_128;
    }
  }
  else if (v67 == 4)
  {
    uint64_t v68 = *(unsigned int *)(*(void *)a2 + 84);
    if (v68)
    {
      uint64_t v69 = *(void **)(*(void *)a2 + 72);
      uint64_t v70 = 8 * v68;
      while (1)
      {
        uint64_t v20 = *v69;
        if ((*(unsigned int (**)(void))(*(void *)*v69 + 16))(*v69) == 14) {
          break;
        }
        ++v69;
        v70 -= 8;
        if (!v70) {
          goto LABEL_129;
        }
      }
      uint64_t v74 = *(void *)(v20 + 40);
      uint64_t v72 = *(void *)(v35 + 128);
      int v75 = *(_DWORD *)(v72 + 72);
      *(_OWORD *)(v72 + 48) = *(_OWORD *)(v20 + 24);
      *(void *)(v72 + 64) = v74;
      if (v75 != 2)
      {
        int v73 = 2;
LABEL_128:
        *(_DWORD *)(v72 + 72) = v73;
      }
    }
  }
LABEL_129:
  uint16x8_t v76 = *(uint64_t **)(v14 + 8);
  v1148 = (uint64_t *)a2;
  uint64_t v1167 = v14;
  if (v76)
  {
    *(void *)(v35 + 144) = 0;
    unsigned int v77 = *((_DWORD *)v76 + 3);
    if (v77)
    {
      int v78 = 0;
      uint64_t v79 = *v76;
      __src = (void *)(*v76 + 24 * v77);
      while (1)
      {
        uint64_t v1174 = v79;
        unsigned int v80 = *(_DWORD *)(v79 + 20);
        ++v78;
        if (v80) {
          break;
        }
LABEL_132:
        uint64_t v79 = v1174 + 24;
        if ((void *)(v1174 + 24) == __src) {
          goto LABEL_209;
        }
      }
      uint64_t v81 = *(void *)(v79 + 8);
      uint64_t v82 = v81 + 120 * v80;
      while (2)
      {
        int v83 = *(unsigned __int8 *)(v35 + 184);
        if ((*(unsigned char *)(v81 + 8) & v83) == 0)
        {
LABEL_136:
          v81 += 120;
          if (v81 == v82) {
            goto LABEL_132;
          }
          continue;
        }
        break;
      }
      switch(v83)
      {
        case 4:
          uint64_t v84 = (uint64_t *)(v81 + 96);
          break;
        case 2:
          uint64_t v84 = (uint64_t *)(v81 + 72);
          break;
        case 1:
          uint64_t v84 = (uint64_t *)(v81 + 48);
          break;
        default:
LABEL_145:
          switch(v83)
          {
            case 4:
              uint64_t v85 = *(void *)(v81 + 112);
              if ((v85 & 0xFF00000000) == 0) {
                goto LABEL_136;
              }
              break;
            case 2:
              uint64_t v85 = *(void *)(v81 + 88);
              if ((v85 & 0xFF00000000) == 0) {
                goto LABEL_136;
              }
              break;
            case 1:
              uint64_t v85 = *(void *)(v81 + 64);
              if ((v85 & 0xFF00000000) == 0) {
                goto LABEL_136;
              }
              break;
            default:
              goto LABEL_136;
          }
          if ((v20 & 0xFF00000000) == 0) {
            goto LABEL_842;
          }
          uint64_t v86 = *(void *)(v35 + 240);
          if (v86
            || (uint64_t v87 = WTF::fastZeroedMalloc((WTF *)0x70),
                *(void *)(v35 + 240) = v87 + 16,
                *(_DWORD *)(v87 + 12) = 8,
                *(_DWORD *)(*(void *)(v35 + 240) - 8) = 7,
                *(_DWORD *)(*(void *)(v35 + 240) - 16) = 0,
                *(_DWORD *)(*(void *)(v35 + 240) - 12) = 0,
                (uint64_t v86 = *(void *)(v35 + 240)) != 0))
          {
            int v88 = *(_DWORD *)(v86 - 8);
          }
          else
          {
            int v88 = 0;
          }
          int v89 = v20 + 1;
          unsigned int v90 = v88 & ((0xD7862706ELL * (unint64_t)(277951225 * v78 + 95187966 * (v20 + 1))) >> 4);
          unint64_t v91 = (_DWORD *)(v86 + 12 * v90);
          int v92 = *v91;
          int v93 = v91[1];
          if (*(void *)v91)
          {
            uint64_t v94 = 0;
            int v95 = 1;
            while (v92 != v78 || v93 != v89)
            {
              if (v92 == -1) {
                uint64_t v94 = v91;
              }
              unsigned int v90 = (v90 + v95) & v88;
              unint64_t v91 = (_DWORD *)(v86 + 12 * v90);
              int v92 = *v91;
              int v93 = v91[1];
              ++v95;
              if (!*(void *)v91)
              {
                if (v94)
                {
                  v94[2] = 0;
                  *(void *)uint64_t v94 = 0;
                  --*(_DWORD *)(*(void *)(v35 + 240) - 16);
                  unint64_t v91 = v94;
                }
                goto LABEL_167;
              }
            }
            goto LABEL_136;
          }
LABEL_167:
          _DWORD *v91 = v78;
          v91[1] = v89;
          v91[2] = v85;
          uint64_t v96 = *(void *)(v35 + 240);
          if (v96)
          {
            ++*(_DWORD *)(v96 - 12);
            uint64_t v20 = *(void *)(v35 + 240);
            if (v20) {
              goto LABEL_169;
            }
LABEL_174:
            uint64_t v97 = (WTF *)(v20 - 16);
            uint64_t v98 = *(unsigned int *)(v20 - 16);
            unint64_t v30 = *(unsigned int *)(v20 - 4);
            if (v30 > 0x400) {
              goto LABEL_175;
            }
LABEL_170:
            if (3 * v30 > 4 * v98) {
              goto LABEL_136;
            }
            if (!v30)
            {
              int v99 = *(_DWORD *)(v20 - 12);
              unsigned int v100 = 8;
LABEL_177:
              uint64_t v101 = WTF::fastZeroedMalloc((WTF *)(12 * v100 + 16));
              *(void *)(v1178 + 240) = v101 + 16;
              *(_DWORD *)(v101 + 12) = v100;
              unsigned int v103 = v100 - 1;
              uint64_t v35 = v1178;
              *(_DWORD *)(*(void *)(v1178 + 240) - 8) = v103;
              *(_DWORD *)(*(void *)(v1178 + 240) - 16) = 0;
              *(_DWORD *)(*(void *)(v1178 + 240) - 12) = v99;
              if (v30)
              {
                for (uint64_t j = 0; j != v30; ++j)
                {
                  uint8x8_t v106 = (int *)(v20 + 12 * j);
                  int v107 = *v106;
                  if (*v106 != -1)
                  {
                    int v108 = v106[1];
                    if (v107 | v108)
                    {
                      uint64_t v109 = *(void *)(v1178 + 240);
                      if (v109) {
                        int v110 = *(_DWORD *)(v109 - 8);
                      }
                      else {
                        int v110 = 0;
                      }
                      unsigned int v111 = v110 & ((0xD7862706ELL
                                    * (unint64_t)(277951225 * v107 + 95187966 * v108)) >> 4);
                      int v112 = 1;
                      do
                      {
                        uint64_t v113 = v109 + 12 * v111;
                        unsigned int v111 = (v111 + v112++) & v110;
                      }
                      while (*(void *)v113);
                      uint64_t v105 = *(void *)v106;
                      *(_DWORD *)(v113 + 8) = v106[2];
                      *(void *)uint64_t v113 = v105;
                    }
                  }
                }
              }
              WTF::fastFree(v97, v102);
              goto LABEL_136;
            }
          }
          else
          {
            MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
            uint64_t v20 = *(void *)(v35 + 240);
            if (!v20) {
              goto LABEL_174;
            }
LABEL_169:
            uint64_t v97 = (WTF *)(v20 - 16);
            uint64_t v98 = (*(_DWORD *)(v20 - 16) + *(_DWORD *)(v20 - 12));
            unint64_t v30 = *(unsigned int *)(v20 - 4);
            if (v30 <= 0x400) {
              goto LABEL_170;
            }
LABEL_175:
            if (v30 > 2 * v98) {
              goto LABEL_136;
            }
          }
          int v99 = *(_DWORD *)(v20 - 12);
          unsigned int v100 = v30 << (6 * v99 >= (2 * v30));
          goto LABEL_177;
      }
      uint64_t v20 = *v84;
      goto LABEL_145;
    }
  }
  else
  {
    uint64_t v114 = *(void *)(v35 + 128);
    unint64_t v115 = (uint64_t *)(v114 + 16);
    if (*(unsigned char *)(v114 + 32))
    {
      unsigned int v116 = *(_DWORD *)(v114 + 28);
      uint64_t v117 = *(void *)(v114 + 16);
      if (v116)
      {
        uint64_t v118 = v117 + 24 * v116;
        do
        {
          uint64_t v119 = *(unsigned int *)(v117 + 20);
          if (v119)
          {
            uint64_t v120 = 120 * v119;
            uint64_t v121 = (_DWORD **)(*(void *)(v117 + 8) + 40);
            do
            {
              uint16x8_t v122 = *v121;
              *uint64_t v121 = 0;
              if (v122)
              {
                if (*v122 == 2) {
                  WTF::StringImpl::destroy();
                }
                else {
                  *v122 -= 2;
                }
              }
              v121 += 15;
              v120 -= 120;
            }
            while (v120);
          }
          uint64_t v123 = *(WTF **)(v117 + 8);
          if (v123)
          {
            *(void *)(v117 + 8) = 0;
            *(_DWORD *)(v117 + 16) = 0;
            WTF::fastFree(v123, v60);
          }
          v117 += 24;
        }
        while (v117 != v118);
        uint64_t v117 = *v115;
        uint64_t v35 = v1178;
      }
      if (v117)
      {
        *(void *)(v114 + 16) = 0;
        *(_DWORD *)(v114 + 24) = 0;
        WTF::fastFree((WTF *)v117, v60);
      }
      *unint64_t v115 = 0;
      *(void *)(v114 + 24) = 0;
      uint64_t v124 = *(void *)(v35 + 128);
      if (!*(unsigned char *)(v124 + 32)) {
        goto LABEL_842;
      }
    }
    else
    {
      *unint64_t v115 = 0;
      *(void *)(v114 + 24) = 0;
      *(unsigned char *)(v114 + 32) = 1;
      uint64_t v124 = *(void *)(v35 + 128);
      if (!*(unsigned char *)(v124 + 32)) {
        goto LABEL_842;
      }
    }
    *(void *)(v35 + 144) = v124 + 16;
  }
LABEL_209:
  unint64_t v30 = (unint64_t)v1148;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v35 + 48))(v35, *v1148);
  if (*(unsigned char *)(v35 + 32))
  {
    uint64_t v127 = *(_DWORD **)(v35 + 8);
    if (v127) {
      *v127 += 2;
    }
    *(_OWORD *)(a4 + 8) = *(_OWORD *)(v35 + 16);
    *(void *)a4 = v127;
    *(unsigned char *)(a4 + 24) = 1;
    return result;
  }
  uint64_t v128 = *(void *)(v35 + 88);
  if (!v128 || !*(_DWORD *)(v128 - 12))
  {
    uint64_t result = WGSL::RewriteGlobalVariables::insertDynamicOffsetsBufferIfNeeded(v35, (_OWORD *)(*v1148 + 8), *v1148);
    goto LABEL_218;
  }
  uint64_t v1158 = *v1148;
  v1220 = 0;
  long long v1221 = 0uLL;
  unint64_t v129 = *(unsigned int *)(*(void *)(v35 + 40) + 52);
  uint64_t v130 = *(void *)(v35 + 96);
  if (!v130)
  {
    LOBYTE(__srca) = 0;
    unsigned int v1164 = 0;
    LOBYTE(v1179) = 0;
    unsigned int v1175 = 0;
    uint64_t v131 = v1167;
    goto LABEL_221;
  }
  unsigned int v1175 = 0;
  int v1179 = 0;
  unsigned int v1164 = 0;
  int __srca = 0;
  uint64_t v131 = v1167;
LABEL_257:
  while (2)
  {
    uint64_t v152 = *(void *)(v35 + 48);
    if (!v152)
    {
LABEL_1653:
      __break(0xC471u);
      JUMPOUT(0x182563318);
    }
    int v153 = *(_DWORD *)(v152 - 8);
    unsigned int v154 = *(_DWORD *)(*(void *)v130 + 16);
    if (v154 < 0x100) {
      unsigned int v155 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v130);
    }
    else {
      unsigned int v155 = v154 >> 8;
    }
    int v156 = 0;
    while (2)
    {
      uint64_t v157 = v155 & v153;
      uint64_t v158 = *(WTF **)(v152 + 32 * v157);
      if (v158 == (WTF *)-1)
      {
LABEL_262:
        unsigned int v155 = ++v156 + v157;
        continue;
      }
      break;
    }
    if (v158)
    {
      if (WTF::equal(v158, *(const WTF::StringImpl **)v130, (const WTF::StringImpl *)v126))
      {
        uint64_t v159 = v152 + 32 * v157;
        uint64_t v160 = *(void *)(v35 + 48);
        if (v160)
        {
          uint64_t v161 = *(unsigned int *)(v160 - 4);
          goto LABEL_270;
        }
        goto LABEL_271;
      }
      goto LABEL_262;
    }
    uint64_t v160 = *(void *)(v35 + 48);
    if (!v160) {
      goto LABEL_1653;
    }
    uint64_t v161 = *(unsigned int *)(v160 - 4);
    uint64_t v159 = v160 + 32 * v161;
LABEL_270:
    if (v159 == v160 + 32 * v161) {
      goto LABEL_1653;
    }
LABEL_271:
    uint64_t v162 = v159 + 8;
    uint64_t v163 = *(void *)(v159 + 24);
    unsigned int v164 = *(unsigned __int8 *)(v163 + 128);
    BOOL v165 = v164 < 2 || v164 == 3;
    if (v165)
    {
      if (*(unsigned char *)(v159 + 16)) {
        goto LABEL_285;
      }
      *(void *)v1207 = v159 + 8;
      int v166 = HIDWORD(v1221);
      if (HIDWORD(v1221) == DWORD2(v1221))
      {
        uint64_t v167 = (void *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1221, HIDWORD(v1221) + 1, (unint64_t)v1207);
        int v168 = HIDWORD(v1221);
        *(void *)(v1221 + 8 * HIDWORD(v1221)) = *v167;
        HIDWORD(v1221) = v168 + 1;
        uint64_t v169 = *(void *)(v163 + 104);
        if (!v169) {
          goto LABEL_339;
        }
      }
      else
      {
        *(void *)(v1221 + 8 * HIDWORD(v1221)) = v162;
        HIDWORD(v1221) = v166 + 1;
        uint64_t v169 = *(void *)(v163 + 104);
        if (!v169) {
          goto LABEL_339;
        }
      }
      if (*(unsigned char *)(v169 + 24) == 5)
      {
        int v204 = WGSL::Type::size(*(WGSL::Type **)(v163 + 144));
        unsigned int v205 = v1164;
        BOOL v206 = __CFADD__(v1164, v204);
        if (!__CFADD__(v1164, v204)) {
          unsigned int v205 = v1164 + v204;
        }
        unsigned int v1164 = v205;
        int v207 = __srca;
        if (v206) {
          int v207 = 1;
        }
        int __srca = v207;
        uint64_t v130 = *(void *)(v130 + 16);
        if (v130) {
          continue;
        }
LABEL_221:
        if ((_BYTE)v1179 || v1175 > 0x2000)
        {
          WTF::String::number((WTF::String *)0x2000);
          WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int8x16_t *)"The combined byte size of all variables in the private address space exceeds ", 78, (uint64_t *)v1200, (int8x16_t *)" bytes", 7, v1207);
          v1120 = *(void **)(v1158 + 8);
          unint64_t v1119 = *(void *)(v1158 + 16);
          uint64_t v134 = *(void (***)(WGSL::AST::Identifier *__hidden))v1207;
          v1217 = *(_DWORD **)v1207;
          *(void *)&long long v1218 = v1120;
          __srcb = v1120;
          *((void *)&v1218 + 1) = v1119;
          int v1219 = 1;
          *(void *)v1207 = 0;
          v1121 = *(int **)v1200;
          *(void *)v1200 = 0;
          unint64_t v1122 = HIDWORD(v1119);
          if (!v1121) {
            goto LABEL_1638;
          }
          int v1123 = *v1121 - 2;
          if (*v1121 == 2) {
            goto LABEL_1637;
          }
        }
        else
        {
          if (!(_BYTE)__srca && v1164 <= v129)
          {
            char v132 = 0;
            uint64_t v134 = v1220;
            uint64_t v133 = (void *)v1221;
            v1220 = 0;
            *(void *)&long long v1221 = 0;
            v1217 = v134;
            *(void *)&long long v1218 = v133;
            __srcb = v133;
            *((void *)&v1218 + 1) = *((void *)&v1221 + 1);
            LODWORD(v1176) = HIDWORD(v1221);
            char v135 = 1;
            int v1219 = 0;
            goto LABEL_227;
          }
          WTF::String::number((WTF::String *)v129);
          WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int8x16_t *)"The combined byte size of all variables in the workgroup address space exceeds ", 80, (uint64_t *)v1200, (int8x16_t *)" bytes", 7, v1207);
          v1125 = *(void **)(v1158 + 8);
          unint64_t v1124 = *(void *)(v1158 + 16);
          uint64_t v134 = *(void (***)(WGSL::AST::Identifier *__hidden))v1207;
          v1217 = *(_DWORD **)v1207;
          *(void *)&long long v1218 = v1125;
          __srcb = v1125;
          *((void *)&v1218 + 1) = v1124;
          int v1219 = 1;
          *(void *)v1207 = 0;
          v1121 = *(int **)v1200;
          *(void *)v1200 = 0;
          unint64_t v1122 = HIDWORD(v1124);
          if (!v1121)
          {
LABEL_1638:
            char v135 = 0;
            char v132 = 1;
            LODWORD(v1176) = v1122;
            uint64_t v35 = v1178;
            unint64_t v30 = (unint64_t)v1148;
            uint64_t v131 = v1167;
            v1085 = (WTF *)v1221;
            if ((void)v1221) {
              goto LABEL_226;
            }
            goto LABEL_227;
          }
          int v1123 = *v1121 - 2;
          if (*v1121 == 2)
          {
LABEL_1637:
            WTF::StringImpl::destroy();
            goto LABEL_1638;
          }
        }
        int *v1121 = v1123;
        goto LABEL_1638;
      }
LABEL_339:
      int v208 = WGSL::Type::size(*(WGSL::Type **)(v163 + 144));
      unsigned int v209 = v1175;
      BOOL v210 = __CFADD__(v1175, v208);
      if (!__CFADD__(v1175, v208)) {
        unsigned int v209 = v1175 + v208;
      }
      unsigned int v1175 = v209;
      int v211 = v1179;
      if (v210) {
        int v211 = 1;
      }
      int v1179 = v211;
      uint64_t v130 = *(void *)(v130 + 16);
      if (v130) {
        continue;
      }
      goto LABEL_221;
    }
    break;
  }
  if (v164 == 2)
  {
    uint64_t v170 = *(void *)(v163 + 144);
    if (!*(_DWORD *)(v170 + 48))
    {
      char v171 = 0;
      switch(*(unsigned char *)v170)
      {
        case 0:
        case 3:
        case 6:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
          __break(0xC471u);
          JUMPOUT(0x182563338);
        case 1:
          char v171 = 2;
          break;
        case 2:
          char v171 = 3;
          break;
        case 4:
          char v171 = 4;
          break;
        case 5:
          char v171 = 1;
          break;
        default:
          break;
      }
      uint64_t v212 = *(WTF::StringImpl **)(v163 + 80);
      if (v212) {
        *(_DWORD *)v212 += 2;
      }
      long long v213 = *(WTF::String **)(v163 + 172);
      unsigned int v1161 = v129;
      if (((unint64_t)v213 & 0xFF00000000) != 0)
      {
        WTF::String::number(v213);
        uint64_t v214 = *(WTF::StringImpl **)v1207;
        *(void *)v1207 = 0;
        if (v212)
        {
          if (*(_DWORD *)v212 == 2)
          {
            WTF::StringImpl::destroy();
            uint64_t v215 = *(_DWORD **)v1207;
            *(void *)v1207 = 0;
            if (v215)
            {
              if (*v215 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *v215 -= 2;
              }
            }
          }
          else
          {
            *(_DWORD *)v212 -= 2;
          }
        }
        uint64_t v212 = v214;
      }
      uint64_t v216 = *(void *)(v1178 + 128);
      unint64_t v217 = *(_DWORD **)(v163 + 48);
      if (v217) {
        *v217 += 2;
      }
      unint64_t v218 = (uint64_t *)(v216 + 40);
      uint64_t v219 = *(void *)(v163 + 120);
      uint64_t v220 = *(void *)(v216 + 40);
      if (v220
        || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Reflection::SpecializationConstant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Reflection::SpecializationConstant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Reflection::SpecializationConstant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Reflection::SpecializationConstant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)(v216 + 40), 8u), (uint64_t v220 = *v218) != 0))
      {
        int v221 = *(_DWORD *)(v220 - 8);
        unsigned int v222 = *((_DWORD *)v212 + 4);
        char v1154 = v171;
        uint64_t v1151 = v219;
        if (v222 >= 0x100) {
          goto LABEL_367;
        }
LABEL_369:
        unsigned int v223 = WTF::StringImpl::hashSlowCase(v212);
      }
      else
      {
        int v221 = 0;
        unsigned int v222 = *((_DWORD *)v212 + 4);
        char v1154 = v171;
        uint64_t v1151 = v219;
        if (v222 < 0x100) {
          goto LABEL_369;
        }
LABEL_367:
        unsigned int v223 = v222 >> 8;
      }
      uint64_t v224 = 0;
      for (int k = 1; ; ++k)
      {
        uint64_t v226 = v223 & v221;
        int v227 = (_OWORD *)(v220 + 32 * v226);
        int v228 = *(WTF **)v227;
        if (*(void *)v227 == -1)
        {
          uint64_t v224 = (_OWORD *)(v220 + 32 * v226);
        }
        else
        {
          if (!v228)
          {
            if (v224)
            {
              *uint64_t v224 = 0u;
              v224[1] = 0u;
              --*(_DWORD *)(*v218 - 16);
              int v227 = v224;
            }
            uint64_t v131 = v1167;
            if (v212) {
              *(_DWORD *)v212 += 2;
            }
            *(void *)int v227 = v212;
            unsigned int v229 = (_DWORD *)*((void *)v227 + 1);
            *((void *)v227 + 1) = v217;
            if (v229)
            {
              if (*v229 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *v229 -= 2;
              }
            }
            *((unsigned char *)v227 + 16) = v1154;
            *((void *)v227 + 3) = v1151;
            uint64_t v230 = *v218;
            if (*v218) {
              int v231 = *(_DWORD *)(v230 - 12) + 1;
            }
            else {
              int v231 = 1;
            }
            *(_DWORD *)(v230 - 12) = v231;
            uint64_t v232 = *v218;
            if (*v218) {
              int v233 = *(_DWORD *)(v232 - 12);
            }
            else {
              int v233 = 0;
            }
            uint64_t v234 = (*(_DWORD *)(v232 - 16) + v233);
            unint64_t v235 = *(unsigned int *)(v232 - 4);
            if (v235 > 0x400)
            {
              if (v235 > 2 * v234) {
                goto LABEL_401;
              }
            }
            else
            {
              if (3 * v235 > 4 * v234) {
                goto LABEL_401;
              }
              if (!v235)
              {
                unsigned int v236 = 8;
LABEL_399:
                WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Reflection::SpecializationConstant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Reflection::SpecializationConstant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Reflection::SpecializationConstant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Reflection::SpecializationConstant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v218, v236);
                goto LABEL_401;
              }
            }
            unsigned int v236 = v235 << (6 * *(_DWORD *)(v232 - 12) >= (2 * v235));
            goto LABEL_399;
          }
          if (WTF::equal(v228, v212, (const WTF::StringImpl *)v126))
          {
            uint64_t v131 = v1167;
            if (v217)
            {
              if (*v217 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *v217 -= 2;
              }
            }
LABEL_401:
            if (!v212)
            {
              uint64_t v35 = v1178;
              unint64_t v30 = (unint64_t)v1148;
              unint64_t v129 = v1161;
              uint64_t v130 = *(void *)(v130 + 16);
              if (!v130) {
                goto LABEL_221;
              }
              goto LABEL_257;
            }
            unint64_t v30 = (unint64_t)v1148;
            unint64_t v129 = v1161;
            if (*(_DWORD *)v212 != 2)
            {
              *(_DWORD *)v212 -= 2;
              uint64_t v35 = v1178;
              uint64_t v130 = *(void *)(v130 + 16);
              if (!v130) {
                goto LABEL_221;
              }
              goto LABEL_257;
            }
            WTF::StringImpl::destroy();
            goto LABEL_256;
          }
        }
        unsigned int v223 = k + v226;
      }
    }
LABEL_1667:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_1668:
    __break(0xC471u);
    JUMPOUT(0x18256344CLL);
  }
  if (!*(unsigned char *)(v159 + 16)) {
    goto LABEL_842;
  }
LABEL_285:
  unsigned int v173 = *(_DWORD *)(v159 + 8);
  unsigned int v172 = *(_DWORD *)(v159 + 12);
  uint16x8_t v174 = v1220;
  if (v1220
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)&v1220, 8u, 0), (uint16x8_t v174 = v1220) != 0))
  {
    int v175 = *((_DWORD *)v174 - 2);
  }
  else
  {
    int v175 = 0;
  }
  unsigned int v176 = 9 * ((v173 + ~(v173 << 15)) ^ ((v173 + ~(v173 << 15)) >> 10));
  unsigned int v177 = (v176 ^ (v176 >> 6)) + ~((v176 ^ (v176 >> 6)) << 11);
  unsigned int v178 = v175 & (v177 ^ HIWORD(v177));
  uint64_t v179 = (uint64_t)&v174[2 * v178];
  int v180 = *(_DWORD *)v179;
  if (*(_DWORD *)v179 == -1)
  {
LABEL_296:
    *(_DWORD *)uint64_t v179 = v173;
    uint64_t v183 = *(void *)(v179 + 8);
    *(void *)(v179 + 8) = 0;
    if (v183) {
      WTF::fastFree((WTF *)(v183 - 16), (void *)v125);
    }
    unint64_t v184 = v1220;
    if (v1220)
    {
      int v185 = *((_DWORD *)v1220 - 4);
      int v186 = *((_DWORD *)v1220 - 3) + 1;
      *((_DWORD *)v1220 - 3) = v186;
      uint64_t v187 = (v185 + v186);
      unint64_t v188 = *((unsigned int *)v184 - 1);
      if (v188 <= 0x400) {
        goto LABEL_300;
      }
    }
    else
    {
      int v186 = 1;
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      uint64_t v187 = (MEMORY[0xFFFFFFFFFFFFFFF0] + 1);
      unint64_t v188 = MEMORY[0xFFFFFFFFFFFFFFFC];
      if (MEMORY[0xFFFFFFFFFFFFFFFC] <= 0x400u)
      {
LABEL_300:
        if (3 * v188 > 4 * v187) {
          goto LABEL_307;
        }
        if (!v188)
        {
          unsigned int v189 = 8;
LABEL_306:
          uint64_t v179 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)&v1220, v189, (int *)v179);
          goto LABEL_307;
        }
LABEL_305:
        unsigned int v189 = v188 << (6 * v186 >= (2 * v188));
        goto LABEL_306;
      }
    }
    if (v188 > 2 * v187) {
      goto LABEL_307;
    }
    goto LABEL_305;
  }
  uint64_t v181 = 0;
  int v182 = 1;
  while (v180 != v173)
  {
    if (v180 == -2) {
      uint64_t v181 = v179;
    }
    unsigned int v178 = (v178 + v182) & v175;
    uint64_t v179 = (uint64_t)&v174[2 * v178];
    int v180 = *(_DWORD *)v179;
    ++v182;
    if (*(_DWORD *)v179 == -1)
    {
      if (v181)
      {
        *(_DWORD *)uint64_t v181 = -1;
        *(void *)(v181 + 8) = 0;
        --*((_DWORD *)v1220 - 4);
        uint64_t v179 = v181;
      }
      goto LABEL_296;
    }
  }
LABEL_307:
  uint64_t v192 = *(void *)(v179 + 8);
  uint64_t v191 = (uint64_t *)(v179 + 8);
  uint64_t v190 = v192;
  if (v192
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WGSL::RewriteGlobalVariables::Global *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WGSL::RewriteGlobalVariables::Global *>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WGSL::RewriteGlobalVariables::Global *,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGSL::RewriteGlobalVariables::Global *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v191, 8u), (uint64_t v190 = *v191) != 0))
  {
    int v193 = *(_DWORD *)(v190 - 8);
  }
  else
  {
    int v193 = 0;
  }
  unsigned int v194 = 9 * ((v172 + ~(v172 << 15)) ^ ((v172 + ~(v172 << 15)) >> 10));
  unsigned int v195 = (v194 ^ (v194 >> 6)) + ~((v194 ^ (v194 >> 6)) << 11);
  unsigned int v196 = v193 & (v195 ^ HIWORD(v195));
  size_t v126 = v190 + 16 * v196;
  int v197 = *(_DWORD *)v126;
  if (*(_DWORD *)v126 == -1) {
    goto LABEL_318;
  }
  size_t v198 = 0;
  int v199 = 1;
  while (2)
  {
    if (v197 != v172)
    {
      if (v197 == -2) {
        size_t v198 = v126;
      }
      unsigned int v196 = (v196 + v199) & v193;
      size_t v126 = v190 + 16 * v196;
      int v197 = *(_DWORD *)v126;
      ++v199;
      if (*(_DWORD *)v126 != -1) {
        continue;
      }
      if (v198)
      {
        *(_DWORD *)size_t v198 = -1;
        *(void *)(v198 + 8) = 0;
        --*(_DWORD *)(*v191 - 16);
        size_t v126 = v198;
      }
LABEL_318:
      *(_DWORD *)size_t v126 = v172;
      *(void *)(v126 + 8) = v162;
      unint64_t v30 = (unint64_t)v1148;
      if (!*v191)
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        uint64_t v200 = *v191;
        if (!*v191) {
          goto LABEL_325;
        }
LABEL_320:
        uint64_t v201 = (*(_DWORD *)(v200 - 16) + *(_DWORD *)(v200 - 12));
        unint64_t v202 = *(unsigned int *)(v200 - 4);
        if (v202 <= 0x400) {
          goto LABEL_321;
        }
LABEL_326:
        if (v202 <= 2 * v201) {
          goto LABEL_327;
        }
        goto LABEL_256;
      }
      ++*(_DWORD *)(*v191 - 12);
      uint64_t v200 = *v191;
      if (*v191) {
        goto LABEL_320;
      }
LABEL_325:
      uint64_t v201 = *(unsigned int *)(v200 - 16);
      unint64_t v202 = *(unsigned int *)(v200 - 4);
      if (v202 > 0x400) {
        goto LABEL_326;
      }
LABEL_321:
      if (3 * v202 > 4 * v201)
      {
LABEL_256:
        uint64_t v35 = v1178;
        uint64_t v130 = *(void *)(v130 + 16);
        if (!v130) {
          goto LABEL_221;
        }
      }
      else
      {
        if (!v202)
        {
          unsigned int v203 = 8;
          goto LABEL_328;
        }
LABEL_327:
        unsigned int v203 = v202 << (6 * *(_DWORD *)(v200 - 12) >= (2 * v202));
LABEL_328:
        WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WGSL::RewriteGlobalVariables::Global *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WGSL::RewriteGlobalVariables::Global *>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WGSL::RewriteGlobalVariables::Global *,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGSL::RewriteGlobalVariables::Global *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v191, v203);
        uint64_t v35 = v1178;
        uint64_t v130 = *(void *)(v130 + 16);
        if (!v130) {
          goto LABEL_221;
        }
      }
      goto LABEL_257;
    }
    break;
  }
  uint64_t v237 = **(void **)(v1178 + 128);
  if (v237) {
    *(_DWORD *)v237 += 2;
  }
  uint64_t v238 = *(void *)(*(void *)(v126 + 8) + 16);
  *(_OWORD *)&v1207[8] = *(_OWORD *)(v238 + 64);
  *(void *)v1207 = off_1ECABC030;
  uint64_t v239 = *(void *)(v238 + 80);
  if (v239) {
    *(_DWORD *)v239 += 2;
  }
  *(void *)&v1207[24] = v239;
  *(_OWORD *)&v1200[8] = *(_OWORD *)(v163 + 64);
  *(void *)v1200 = off_1ECABC030;
  uint64_t v240 = *(void *)(v163 + 80);
  if (v240)
  {
    *(_DWORD *)v240 += 2;
    uint64_t v239 = *(void *)&v1207[24];
  }
  v1201 = (_DWORD *)v240;
  if (v237)
  {
    int v241 = *(_DWORD *)(v237 + 4);
    if (v239) {
      goto LABEL_415;
    }
LABEL_418:
    int v242 = 0;
    if (!v240) {
      goto LABEL_419;
    }
LABEL_416:
    int v243 = *(_DWORD *)(v240 + 4);
  }
  else
  {
    int v241 = 0;
    if (!v239) {
      goto LABEL_418;
    }
LABEL_415:
    int v242 = *(_DWORD *)(v239 + 4);
    if (v240) {
      goto LABEL_416;
    }
LABEL_419:
    int v243 = 0;
  }
  int v244 = 0;
  unsigned int v245 = v173;
  do
  {
    ++v244;
    BOOL v246 = v245 > 9;
    v245 /= 0xAu;
  }
  while (v246);
  int v247 = 0;
  unsigned int v248 = v172;
  do
  {
    ++v247;
    BOOL v246 = v248 > 9;
    v248 /= 0xAu;
  }
  while (v246);
  if (v247 < 0) {
    goto LABEL_1685;
  }
  BOOL v249 = __OFADD__(v247, 1);
  int v250 = v247 + 1;
  if (v249) {
    goto LABEL_1685;
  }
  BOOL v249 = __OFADD__(v250, 11);
  int v251 = v250 + 11;
  BOOL v252 = v249;
  if (v244 < 0) {
    goto LABEL_1685;
  }
  if (v252) {
    goto LABEL_1685;
  }
  BOOL v249 = __OFADD__(v244, v251);
  int v253 = v244 + v251;
  if (v249) {
    goto LABEL_1685;
  }
  BOOL v249 = __OFADD__(v253, 52);
  int v254 = v253 + 52;
  BOOL v255 = v249;
  if (v243 < 0) {
    goto LABEL_1685;
  }
  if (v255) {
    goto LABEL_1685;
  }
  BOOL v249 = __OFADD__(v243, v254);
  int v256 = v243 + v254;
  if (v249) {
    goto LABEL_1685;
  }
  BOOL v249 = __OFADD__(v256, 7);
  int v257 = v256 + 7;
  BOOL v258 = v249;
  if (v242 < 0) {
    goto LABEL_1685;
  }
  if (v258) {
    goto LABEL_1685;
  }
  BOOL v249 = __OFADD__(v242, v257);
  int v259 = v242 + v257;
  if (v249) {
    goto LABEL_1685;
  }
  BOOL v249 = __OFADD__(v259, 18);
  int v260 = v259 + 18;
  BOOL v261 = v249;
  if (v241 < 0) {
    goto LABEL_1685;
  }
  if (v261) {
    goto LABEL_1685;
  }
  BOOL v249 = __OFADD__(v241, v260);
  int v262 = v241 + v260;
  if (v249) {
    goto LABEL_1685;
  }
  uint64_t v263 = (v262 + 13);
  if (__OFADD__(v262, 13)) {
    goto LABEL_1685;
  }
  if ((!v237 || (*(unsigned char *)(v237 + 16) & 4) != 0)
    && (!v239 || (*(unsigned char *)(v239 + 16) & 4) != 0)
    && (!v240 || (*(unsigned char *)(v240 + 16) & 4) != 0))
  {
    if (v262 == -13) {
      goto LABEL_474;
    }
    if ((v263 & 0x80000000) == 0)
    {
      WTF::tryFastCompactMalloc((WTF *)(v263 + 20));
      uint64_t v134 = (void (**)(WGSL::AST::Identifier *__hidden))v1217;
      if (v1217)
      {
        _DWORD *v1217 = 2;
        *((_DWORD *)v134 + 1) = v263;
        qmemcpy((char *)v134 + 20, "entry point '", 13);
        v134[1] = (void (*)(WGSL::AST::Identifier *__hidden))((char *)v134 + 20);
        *((_DWORD *)v134 + 4) = 4;
        v267 = (char *)v134 + 33;
        if (!v237)
        {
          uint64_t v850 = 0;
          goto LABEL_1474;
        }
        unint64_t v125 = *(void *)(v237 + 8);
        size_t v126 = *(unsigned int *)(v237 + 4);
        if ((*(unsigned char *)(v237 + 16) & 4) != 0)
        {
          if (v126)
          {
            if (v126 == 1) {
              unsigned char *v267 = *(unsigned char *)v125;
            }
            else {
              memcpy((char *)v134 + 33, (const void *)v125, v126);
            }
          }
          goto LABEL_1473;
        }
        v268 = &v267[v126];
        if (v126 < 0x10)
        {
          unint64_t v269 = (unint64_t)v134 + 33;
        }
        else
        {
          unint64_t v269 = (unint64_t)&v267[v126 & 0xFFFFFFF0];
          uint64_t v270 = (unsigned long long *)((char *)v134 + 33);
          do
          {
            unsigned long long v271 = (unsigned __int128)vld2q_s8((const char *)v125);
            v125 += 32;
            *v270++ = v271;
          }
          while (v270 != (unsigned long long *)v269);
        }
        if ((unsigned char *)v269 == v268)
        {
LABEL_1473:
          uint64_t v850 = *(unsigned int *)(v237 + 4);
LABEL_1474:
          v988 = &v267[v850];
          *(_OWORD *)v988 = *(_OWORD *)"' uses variables '";
          *((_WORD *)v988 + 8) = 10016;
          v989 = &v267[v850 + 18];
          if (!v239)
          {
            uint64_t v994 = 0;
            goto LABEL_1499;
          }
          unint64_t v125 = *(void *)(v239 + 8);
          size_t v126 = *(unsigned int *)(v239 + 4);
          if ((*(unsigned char *)(v239 + 16) & 4) != 0)
          {
            if (v126)
            {
              if (v126 == 1) {
                unsigned char *v989 = *(unsigned char *)v125;
              }
              else {
                memcpy(v989, (const void *)v125, v126);
              }
            }
            goto LABEL_1498;
          }
          v990 = &v989[v126];
          if (v126 < 0x10)
          {
            unint64_t v991 = (unint64_t)v989;
          }
          else
          {
            unint64_t v991 = (unint64_t)&v989[v126 & 0xFFFFFFF0];
            v992 = (unsigned long long *)v989;
            do
            {
              unsigned long long v993 = (unsigned __int128)vld2q_s8((const char *)v125);
              v125 += 32;
              *v992++ = v993;
            }
            while (v992 != (unsigned long long *)v991);
          }
          if ((unsigned char *)v991 == v990)
          {
LABEL_1498:
            uint64_t v994 = *(unsigned int *)(v239 + 4);
LABEL_1499:
            v1002 = &v989[v994];
            *(_DWORD *)((char *)v1002 + 3) = 656434286;
            _DWORD *v1002 = 1851858983;
            v1003 = &v989[v994 + 7];
            uint64_t v35 = v1178;
            if (!v240)
            {
              uint64_t v1008 = 0;
              goto LABEL_1524;
            }
            unint64_t v125 = *(void *)(v240 + 8);
            size_t v126 = *(unsigned int *)(v240 + 4);
            if ((*(unsigned char *)(v240 + 16) & 4) != 0)
            {
              if (v126)
              {
                if (v126 == 1) {
                  unsigned char *v1003 = *(unsigned char *)v125;
                }
                else {
                  memcpy(v1003, (const void *)v125, v126);
                }
              }
              goto LABEL_1523;
            }
            v1004 = &v1003[v126];
            if (v126 < 0x10)
            {
              unint64_t v1005 = (unint64_t)v1003;
            }
            else
            {
              unint64_t v1005 = (unint64_t)&v1003[v126 & 0xFFFFFFF0];
              v1006 = (unsigned long long *)v1003;
              do
              {
                unsigned long long v1007 = (unsigned __int128)vld2q_s8((const char *)v125);
                v125 += 32;
                *v1006++ = v1007;
              }
              while (v1006 != (unsigned long long *)v1005);
            }
            if ((unsigned char *)v1005 == v1004)
            {
LABEL_1523:
              uint64_t v1008 = *(unsigned int *)(v240 + 4);
LABEL_1524:
              uint64_t v1016 = 0;
              v1017 = &v1003[v1008];
              qmemcpy(v1017, "', both which use the same resource binding: @group(", 52);
              unsigned int v1018 = v173;
              do
              {
                *((unsigned char *)&v1218 + v1016-- + 4) = (v1018 % 0xA) | 0x30;
                BOOL v246 = v1018 > 9;
                v1018 /= 0xAu;
              }
              while (v246);
              v1019 = v1017 + 52;
              if (v1016 + 14 <= 13) {
                memcpy(v1019, (char *)&v1218 + v1016 + 5, -v1016);
              }
              int v1020 = 0;
              do
              {
                ++v1020;
                BOOL v246 = v173 > 9;
                v173 /= 0xAu;
              }
              while (v246);
              uint64_t v1021 = 0;
              v1022 = &v1019[v1020];
              *(void *)v1022 = *(void *)") @binding(";
              *(_DWORD *)(v1022 + 7) = 677867113;
              unsigned int v1023 = v172;
              do
              {
                *((unsigned char *)&v1218 + v1021-- + 4) = (v1023 % 0xA) | 0x30;
                BOOL v246 = v1023 > 9;
                v1023 /= 0xAu;
              }
              while (v246);
              v1024 = v1022 + 11;
              if (v1021 + 14 <= 13) {
                memcpy(v1024, (char *)&v1218 + v1021 + 5, -v1021);
              }
              unsigned int v1025 = 0;
              do
              {
                ++v1025;
                BOOL v246 = v172 > 9;
                v172 /= 0xAu;
              }
              while (v246);
              *((unsigned char *)v1024 + v1025) = 41;
              unint64_t v30 = (unint64_t)v1148;
              goto LABEL_1587;
            }
            unint64_t v1009 = (unint64_t)v134 + v126 + v850 + v994 - v1005 + 58;
            if (v1009 < 8
              || ((v1010 = (char *)v134 + v126 + v994 + v850, v1005 < v125 - 2 * v1005 + 2 * (void)v1010 + 116)
                ? (BOOL v1011 = v125 >= (unint64_t)(v1010 + 58))
                : (BOOL v1011 = 1),
                  !v1011))
            {
              v1013 = (unsigned char *)v1005;
              v1014 = (char *)v125;
              goto LABEL_1520;
            }
            if (v1009 >= 0x20)
            {
              unint64_t v1012 = v1009 & 0xFFFFFFFFFFFFFFE0;
              v1108 = (int8x16_t *)(v125 + 32);
              v1109 = (int8x16_t *)(v1005 + 16);
              unint64_t v1110 = v1009 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                int8x16_t v1112 = v1108[-2];
                int8x16_t v1111 = v1108[-1];
                int8x16_t v1114 = *v1108;
                int8x16_t v1113 = v1108[1];
                v1108 += 4;
                v1109[-1] = vuzp1q_s8(v1112, v1111);
                int8x16_t *v1109 = vuzp1q_s8(v1114, v1113);
                v1109 += 2;
                v1110 -= 32;
              }
              while (v1110);
              if (v1009 == v1012) {
                goto LABEL_1523;
              }
              if ((v1009 & 0x18) == 0)
              {
                v1014 = (char *)(v125 + 2 * v1012);
                v1013 = (unsigned char *)(v1005 + v1012);
                do
                {
LABEL_1520:
                  char v1015 = *v1014;
                  v1014 += 2;
                  *v1013++ = v1015;
                }
                while (v1013 != v1004);
                goto LABEL_1523;
              }
            }
            else
            {
              unint64_t v1012 = 0;
            }
            v1013 = (unsigned char *)(v1005 + (v1009 & 0xFFFFFFFFFFFFFFF8));
            v1014 = (char *)(v125 + 2 * (v1009 & 0xFFFFFFFFFFFFFFF8));
            v1115 = (int16x8_t *)(v125 + 2 * v1012);
            v1116 = (int8x8_t *)(v1005 + v1012);
            unint64_t v1117 = v1012 - (v1009 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              int16x8_t v1118 = *v1115++;
              *v1116++ = vmovn_s16(v1118);
              v1117 += 8;
            }
            while (v1117);
            if (v1009 == (v1009 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_1523;
            }
            goto LABEL_1520;
          }
          v995 = (char *)v134 + v850 + v126;
          unint64_t v996 = (unint64_t)&v995[-v991 + 51];
          if (v996 < 8
            || (v991 < v125 - 2 * v991 + 2 * (void)v995 + 102
              ? (BOOL v997 = v125 >= (unint64_t)(v995 + 51))
              : (BOOL v997 = 1),
                !v997))
          {
            v999 = (unsigned char *)v991;
            v1000 = (char *)v125;
            goto LABEL_1495;
          }
          if (v996 >= 0x20)
          {
            unint64_t v998 = v996 & 0xFFFFFFFFFFFFFFE0;
            v1097 = (int8x16_t *)(v125 + 32);
            v1098 = (int8x16_t *)(v991 + 16);
            unint64_t v1099 = v996 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              int8x16_t v1101 = v1097[-2];
              int8x16_t v1100 = v1097[-1];
              int8x16_t v1103 = *v1097;
              int8x16_t v1102 = v1097[1];
              v1097 += 4;
              v1098[-1] = vuzp1q_s8(v1101, v1100);
              int8x16_t *v1098 = vuzp1q_s8(v1103, v1102);
              v1098 += 2;
              v1099 -= 32;
            }
            while (v1099);
            if (v996 == v998) {
              goto LABEL_1498;
            }
            if ((v996 & 0x18) == 0)
            {
              v1000 = (char *)(v125 + 2 * v998);
              v999 = (unsigned char *)(v991 + v998);
              do
              {
LABEL_1495:
                char v1001 = *v1000;
                v1000 += 2;
                *v999++ = v1001;
              }
              while (v999 != v990);
              goto LABEL_1498;
            }
          }
          else
          {
            unint64_t v998 = 0;
          }
          v999 = (unsigned char *)(v991 + (v996 & 0xFFFFFFFFFFFFFFF8));
          v1000 = (char *)(v125 + 2 * (v996 & 0xFFFFFFFFFFFFFFF8));
          v1104 = (int16x8_t *)(v125 + 2 * v998);
          v1105 = (int8x8_t *)(v991 + v998);
          unint64_t v1106 = v998 - (v996 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            int16x8_t v1107 = *v1104++;
            *v1105++ = vmovn_s16(v1107);
            v1106 += 8;
          }
          while (v1106);
          if (v996 == (v996 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_1498;
          }
          goto LABEL_1495;
        }
        v981 = (char *)v134 + v126;
        unint64_t v982 = (unint64_t)v134 + v126 - v269 + 33;
        if (v982 < 8
          || (v269 < v125 - 2 * v269 + 2 * (void)v981 + 66
            ? (BOOL v983 = v125 >= (unint64_t)(v981 + 33))
            : (BOOL v983 = 1),
              !v983))
        {
          v985 = (unsigned char *)v269;
          v986 = (char *)v125;
          goto LABEL_1470;
        }
        if (v982 >= 0x20)
        {
          unint64_t v984 = v982 & 0xFFFFFFFFFFFFFFE0;
          v1086 = (int8x16_t *)(v125 + 32);
          v1087 = (int8x16_t *)(v269 + 16);
          unint64_t v1088 = v982 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            int8x16_t v1090 = v1086[-2];
            int8x16_t v1089 = v1086[-1];
            int8x16_t v1092 = *v1086;
            int8x16_t v1091 = v1086[1];
            v1086 += 4;
            v1087[-1] = vuzp1q_s8(v1090, v1089);
            int8x16_t *v1087 = vuzp1q_s8(v1092, v1091);
            v1087 += 2;
            v1088 -= 32;
          }
          while (v1088);
          if (v982 == v984) {
            goto LABEL_1473;
          }
          if ((v982 & 0x18) == 0)
          {
            v986 = (char *)(v125 + 2 * v984);
            v985 = (unsigned char *)(v269 + v984);
            do
            {
LABEL_1470:
              char v987 = *v986;
              v986 += 2;
              *v985++ = v987;
            }
            while (v985 != v268);
            goto LABEL_1473;
          }
        }
        else
        {
          unint64_t v984 = 0;
        }
        v985 = (unsigned char *)(v269 + (v982 & 0xFFFFFFFFFFFFFFF8));
        v986 = (char *)(v125 + 2 * (v982 & 0xFFFFFFFFFFFFFFF8));
        v1093 = (int16x8_t *)(v125 + 2 * v984);
        v1094 = (int8x8_t *)(v269 + v984);
        unint64_t v1095 = v984 - (v982 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          int16x8_t v1096 = *v1093++;
          *v1094++ = vmovn_s16(v1096);
          v1095 += 8;
        }
        while (v1095);
        if (v982 == (v982 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_1473;
        }
        goto LABEL_1470;
      }
    }
LABEL_1685:
    __break(0xC471u);
    JUMPOUT(0x1825634E4);
  }
  if (v262 == -13)
  {
LABEL_474:
    uint64_t v134 = (void (**)(WGSL::AST::Identifier *__hidden))MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    uint64_t v35 = v1178;
    unint64_t v30 = (unint64_t)v1148;
    goto LABEL_1587;
  }
  if (v263 > 0x7FFFFFEF) {
    goto LABEL_1685;
  }
  WTF::tryFastCompactMalloc((WTF *)(2 * v263 + 20));
  uint64_t v134 = (void (**)(WGSL::AST::Identifier *__hidden))v1217;
  if (!v1217) {
    goto LABEL_1685;
  }
  _DWORD *v1217 = 2;
  *((_DWORD *)v134 + 1) = v263;
  *(_OWORD *)((char *)v134 + 20) = xmmword_1826CEEA0;
  v134[1] = (void (*)(WGSL::AST::Identifier *__hidden))((char *)v134 + 20);
  *((_DWORD *)v134 + 4) = 0;
  uint64_t v264 = (_WORD *)v134 + 23;
  *(void (**)(WGSL::AST::Identifier *__hidden))((char *)v134 + 36) = (void (*)(WGSL::AST::Identifier *__hidden))0x200074006E0069;
  *((_WORD *)v134 + 22) = 39;
  if (!v237)
  {
    uint64_t v325 = 0;
    goto LABEL_1399;
  }
  uint64_t v265 = *(int8x16_t **)(v237 + 8);
  uint64_t v266 = *(unsigned int *)(v237 + 4);
  if ((*(unsigned char *)(v237 + 16) & 4) != 0)
  {
    v522 = &v264[v266];
    if (v266 < 0x40)
    {
      unint64_t v523 = (unint64_t)v134 + 46;
    }
    else
    {
      unint64_t v523 = (unint64_t)&v264[v266 & 0xFFFFFFC0];
      long long v524 = 0uLL;
      v525 = (char *)v134 + 46;
      do
      {
        v1225.val[0] = *v265;
        int8x16_t v526 = v265[1];
        v1229.val[0] = v265[2];
        int8x16_t v527 = v265[3];
        v265 += 4;
        int8x16_t v528 = v527;
        v1229.val[1] = 0uLL;
        v1233.val[0] = v526;
        v1225.val[1] = 0uLL;
        v529 = v525;
        vst2q_s8(v529, v1225);
        v529 += 32;
        v1233.val[1] = 0uLL;
        vst2q_s8(v529, v1233);
        v530 = v525 + 64;
        vst2q_s8(v530, v1229);
        v531 = v525 + 96;
        vst2q_s8(v531, *(int8x16x2_t *)(&v524 - 1));
        v525 += 128;
      }
      while (v525 != (char *)v523);
    }
    if ((_WORD *)v523 == v522) {
      goto LABEL_1398;
    }
    unint64_t v909 = (unint64_t)v134 + 2 * v266 - v523 + 44;
    if (v909 < 0xE
      || (v523 < (unint64_t)v265->u64 + (v909 >> 1) + 1
        ? (BOOL v910 = (unint64_t)v265 >= (v909 & 0xFFFFFFFFFFFFFFFELL) + v523 + 2)
        : (BOOL v910 = 1),
          !v910))
    {
      v913 = (_WORD *)v523;
      v914 = v265;
      goto LABEL_1395;
    }
    uint64_t v911 = (v909 >> 1) + 1;
    if (v909 >= 0x3E)
    {
      unint64_t v912 = v911 & 0xFFFFFFFFFFFFFFE0;
      v1038 = (uint8x8_t *)&v265[1];
      v1039 = (uint16x8_t *)(v523 + 32);
      unint64_t v1040 = v911 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v1041 = *(uint8x16_t *)v1038[-2].i8;
        uint16x8_t v1042 = vmovl_u8(*v1038);
        uint16x8_t v1043 = vmovl_high_u8(*(uint8x16_t *)v1038->i8);
        v1039[-2] = vmovl_u8(*(uint8x8_t *)v1041.i8);
        v1039[-1] = vmovl_high_u8(v1041);
        uint16x8_t *v1039 = v1042;
        v1039[1] = v1043;
        v1039 += 4;
        v1038 += 4;
        v1040 -= 32;
      }
      while (v1040);
      if (v911 == v912) {
        goto LABEL_1398;
      }
      if ((v911 & 0x18) == 0)
      {
        v914 = (int8x16_t *)((char *)v265 + v912);
        v913 = (_WORD *)(v523 + 2 * v912);
        goto LABEL_1395;
      }
    }
    else
    {
      unint64_t v912 = 0;
    }
    v913 = (_WORD *)(v523 + 2 * (v911 & 0xFFFFFFFFFFFFFFF8));
    v914 = (int8x16_t *)((char *)v265 + (v911 & 0xFFFFFFFFFFFFFFF8));
    v1044 = (uint8x8_t *)&v265->i8[v912];
    v1045 = (uint16x8_t *)(v523 + 2 * v912);
    unint64_t v1046 = v912 - (v911 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v1047 = *v1044++;
      *v1045++ = vmovl_u8(v1047);
      v1046 += 8;
    }
    while (v1046);
    if (v911 == (v911 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_1398;
    }
    do
    {
LABEL_1395:
      __int16 v915 = v914->u8[0];
      v914 = (int8x16_t *)((char *)v914 + 1);
      *v913++ = v915;
    }
    while (v913 != v522);
    goto LABEL_1398;
  }
  if (v266)
  {
    if (v266 == 1) {
      *uint64_t v264 = v265->i16[0];
    }
    else {
      memcpy((char *)v134 + 46, v265, 2 * v266);
    }
  }
LABEL_1398:
  uint64_t v325 = *(unsigned int *)(v237 + 4);
LABEL_1399:
  v916 = &v264[v325];
  *(_OWORD *)v916 = xmmword_1826CEEB0;
  *((_OWORD *)v916 + 1) = xmmword_1826CEEC0;
  *((_DWORD *)v916 + 8) = 2555936;
  v917 = (char *)(v916 + 18);
  if (!v239)
  {
    uint64_t v920 = 0;
    goto LABEL_1419;
  }
  v918 = *(int8x16_t **)(v239 + 8);
  uint64_t v919 = *(unsigned int *)(v239 + 4);
  if ((*(unsigned char *)(v239 + 16) & 4) != 0)
  {
    v921 = &v917[2 * v919];
    if (v919 < 0x40)
    {
      unint64_t v922 = (unint64_t)v917;
    }
    else
    {
      unint64_t v922 = (unint64_t)&v917[2 * (v919 & 0xFFFFFFC0)];
      long long v923 = 0uLL;
      v924 = v917;
      do
      {
        v1227.val[0] = *v918;
        int8x16_t v925 = v918[1];
        v1231.val[0] = v918[2];
        int8x16_t v926 = v918[3];
        v918 += 4;
        int8x16_t v927 = v926;
        v1231.val[1] = 0uLL;
        v1235.val[0] = v925;
        v1227.val[1] = 0uLL;
        v928 = v924;
        vst2q_s8(v928, v1227);
        v928 += 32;
        v1235.val[1] = 0uLL;
        vst2q_s8(v928, v1235);
        v929 = v924 + 64;
        vst2q_s8(v929, v1231);
        v930 = v924 + 96;
        vst2q_s8(v930, *(int8x16x2_t *)(&v923 - 1));
        v924 += 128;
      }
      while (v924 != (char *)v922);
    }
    if ((char *)v922 == v921) {
      goto LABEL_1418;
    }
    unint64_t v931 = (unint64_t)v134 + 2 * v325 + 2 * v919 - v922 + 80;
    if (v931 < 0xE
      || v922 < (unint64_t)v918->u64 + (v931 >> 1) + 1
      && (unint64_t)v918 < (v931 & 0xFFFFFFFFFFFFFFFELL) + v922 + 2)
    {
      v932 = (char *)v922;
      v933 = v918;
      goto LABEL_1415;
    }
    uint64_t v1026 = (v931 >> 1) + 1;
    if (v931 >= 0x3E)
    {
      unint64_t v1027 = v1026 & 0xFFFFFFFFFFFFFFE0;
      v1028 = (uint8x8_t *)&v918[1];
      v1029 = (uint16x8_t *)(v922 + 32);
      unint64_t v1030 = v1026 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v1031 = *(uint8x16_t *)v1028[-2].i8;
        uint16x8_t v1032 = vmovl_u8(*v1028);
        uint16x8_t v1033 = vmovl_high_u8(*(uint8x16_t *)v1028->i8);
        v1029[-2] = vmovl_u8(*(uint8x8_t *)v1031.i8);
        v1029[-1] = vmovl_high_u8(v1031);
        uint16x8_t *v1029 = v1032;
        v1029[1] = v1033;
        v1029 += 4;
        v1028 += 4;
        v1030 -= 32;
      }
      while (v1030);
      if (v1026 == v1027) {
        goto LABEL_1418;
      }
      if ((v1026 & 0x18) == 0)
      {
        v933 = (int8x16_t *)((char *)v918 + v1027);
        v932 = (char *)(v922 + 2 * v1027);
        goto LABEL_1415;
      }
    }
    else
    {
      unint64_t v1027 = 0;
    }
    v932 = (char *)(v922 + 2 * (v1026 & 0xFFFFFFFFFFFFFFF8));
    v933 = (int8x16_t *)((char *)v918 + (v1026 & 0xFFFFFFFFFFFFFFF8));
    v1034 = (uint8x8_t *)&v918->i8[v1027];
    v1035 = (uint16x8_t *)(v922 + 2 * v1027);
    unint64_t v1036 = v1027 - (v1026 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v1037 = *v1034++;
      *v1035++ = vmovl_u8(v1037);
      v1036 += 8;
    }
    while (v1036);
    if (v1026 == (v1026 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_1418;
    }
    do
    {
LABEL_1415:
      __int16 v934 = v933->u8[0];
      v933 = (int8x16_t *)((char *)v933 + 1);
      *(_WORD *)v932 = v934;
      v932 += 2;
    }
    while (v932 != v921);
    goto LABEL_1418;
  }
  if (v919)
  {
    if (v919 == 1)
    {
      *(_WORD *)v917 = v918->i16[0];
    }
    else
    {
      uint64_t v935 = v325;
      memcpy(v917, v918, 2 * v919);
      uint64_t v325 = v935;
    }
  }
LABEL_1418:
  uint64_t v920 = *(unsigned int *)(v239 + 4);
LABEL_1419:
  v936 = &v917[2 * v920];
  *(void *)v936 = 0x6E006100200027;
  *((_DWORD *)v936 + 2) = 2097252;
  *((_WORD *)v936 + 6) = 39;
  v937 = v936 + 14;
  if (!v240)
  {
    uint64_t v940 = 0;
    goto LABEL_1444;
  }
  v938 = *(int8x16_t **)(v240 + 8);
  uint64_t v939 = *(unsigned int *)(v240 + 4);
  if ((*(unsigned char *)(v240 + 16) & 4) != 0)
  {
    v941 = &v937[2 * v939];
    if (v939 < 0x40)
    {
      unint64_t v942 = (unint64_t)v937;
    }
    else
    {
      unint64_t v942 = (unint64_t)&v937[2 * (v939 & 0xFFFFFFC0)];
      long long v943 = 0uLL;
      v944 = v937;
      do
      {
        v1228.val[0] = *v938;
        int8x16_t v945 = v938[1];
        v1232.val[0] = v938[2];
        int8x16_t v946 = v938[3];
        v938 += 4;
        int8x16_t v947 = v946;
        v1232.val[1] = 0uLL;
        v1236.val[0] = v945;
        v1228.val[1] = 0uLL;
        v948 = v944;
        vst2q_s8(v948, v1228);
        v948 += 32;
        v1236.val[1] = 0uLL;
        vst2q_s8(v948, v1236);
        v949 = v944 + 64;
        vst2q_s8(v949, v1232);
        v950 = v944 + 96;
        vst2q_s8(v950, *(int8x16x2_t *)(&v943 - 1));
        v944 += 128;
      }
      while (v944 != (char *)v942);
    }
    if ((char *)v942 == v941) {
      goto LABEL_1443;
    }
    unint64_t v951 = (unint64_t)v134 + 2 * v325 + 2 * v920 + 2 * v939 - v942 + 94;
    if (v951 < 0xE
      || (v942 < (unint64_t)v938->u64 + (v951 >> 1) + 1
        ? (BOOL v952 = (unint64_t)v938 >= (v951 & 0xFFFFFFFFFFFFFFFELL) + v942 + 2)
        : (BOOL v952 = 1),
          !v952))
    {
      v955 = (char *)v942;
      v956 = v938;
      goto LABEL_1440;
    }
    uint64_t v953 = (v951 >> 1) + 1;
    if (v951 >= 0x3E)
    {
      unint64_t v954 = v953 & 0xFFFFFFFFFFFFFFE0;
      v1048 = (uint8x8_t *)&v938[1];
      v1049 = (uint16x8_t *)(v942 + 32);
      unint64_t v1050 = v953 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v1051 = *(uint8x16_t *)v1048[-2].i8;
        uint16x8_t v1052 = vmovl_u8(*v1048);
        uint16x8_t v1053 = vmovl_high_u8(*(uint8x16_t *)v1048->i8);
        v1049[-2] = vmovl_u8(*(uint8x8_t *)v1051.i8);
        v1049[-1] = vmovl_high_u8(v1051);
        uint16x8_t *v1049 = v1052;
        v1049[1] = v1053;
        v1049 += 4;
        v1048 += 4;
        v1050 -= 32;
      }
      while (v1050);
      if (v953 == v954) {
        goto LABEL_1443;
      }
      if ((v953 & 0x18) == 0)
      {
        v956 = (int8x16_t *)((char *)v938 + v954);
        v955 = (char *)(v942 + 2 * v954);
        goto LABEL_1440;
      }
    }
    else
    {
      unint64_t v954 = 0;
    }
    v955 = (char *)(v942 + 2 * (v953 & 0xFFFFFFFFFFFFFFF8));
    v956 = (int8x16_t *)((char *)v938 + (v953 & 0xFFFFFFFFFFFFFFF8));
    v1054 = (uint8x8_t *)&v938->i8[v954];
    v1055 = (uint16x8_t *)(v942 + 2 * v954);
    unint64_t v1056 = v954 - (v953 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v1057 = *v1054++;
      *v1055++ = vmovl_u8(v1057);
      v1056 += 8;
    }
    while (v1056);
    if (v953 == (v953 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_1443;
    }
    do
    {
LABEL_1440:
      __int16 v957 = v956->u8[0];
      v956 = (int8x16_t *)((char *)v956 + 1);
      *(_WORD *)v955 = v957;
      v955 += 2;
    }
    while (v955 != v941);
    goto LABEL_1443;
  }
  if (v939)
  {
    if (v939 == 1)
    {
      *(_WORD *)v937 = v938->i16[0];
    }
    else
    {
      uint64_t v958 = v325;
      memcpy(v937, v938, 2 * v939);
      uint64_t v325 = v958;
    }
  }
LABEL_1443:
  uint64_t v940 = *(unsigned int *)(v240 + 4);
LABEL_1444:
  uint64_t v959 = 0;
  v960 = &v937[2 * v940];
  *(_WORD *)v960 = 39;
  *(_OWORD *)(v960 + 2) = xmmword_1826CEED0;
  *(_OWORD *)(v960 + 18) = xmmword_1826CEEE0;
  *(_OWORD *)(v960 + 34) = xmmword_1826CEEF0;
  *(_OWORD *)(v960 + 50) = xmmword_1826CEF00;
  *(_OWORD *)(v960 + 66) = xmmword_1826CEF10;
  uint64_t v961 = 13;
  *(_DWORD *)(v960 + 98) = 7340149;
  uint64_t v962 = 1;
  *((_WORD *)v960 + 51) = 40;
  unsigned int v963 = v173;
  *(_OWORD *)(v960 + 82) = xmmword_1826CEF20;
  do
  {
    uint64_t v964 = v961;
    uint64_t v965 = v959;
    uint64_t v966 = v962;
    --v961;
    *((unsigned char *)&v1217 + v961) = (v963 % 0xA) | 0x30;
    ++v959;
    ++v962;
    BOOL v246 = v963 > 9;
    v963 /= 0xAu;
  }
  while (v246);
  v967 = v960 + 104;
  if (v964 <= 13)
  {
    unint64_t v968 = v965 + 1;
    if ((unint64_t)(v965 + 1) < 8)
    {
      uint64_t v969 = v961;
      v970 = v967;
      goto LABEL_1564;
    }
    if (v968 >= 0x20)
    {
      unint64_t v971 = v968 & 0xFFFFFFFFFFFFFFE0;
      v972 = (uint8x8_t *)((char *)&v1217 - v965 + 28);
      v973 = (uint16x8_t *)((char *)v134 + 2 * v940 + 2 * v920 + 2 * v325 + 232);
      unint64_t v974 = v966 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v975 = *(uint8x16_t *)v972[-2].i8;
        uint16x8_t v976 = vmovl_u8(*v972);
        uint16x8_t v977 = vmovl_high_u8(*(uint8x16_t *)v972->i8);
        v973[-2] = vmovl_u8(*(uint8x8_t *)v975.i8);
        v973[-1] = vmovl_high_u8(v975);
        uint16x8_t *v973 = v976;
        v973[1] = v977;
        v973 += 4;
        v972 += 4;
        v974 -= 32;
      }
      while (v974);
      if (v968 != v971)
      {
        if ((v968 & 0x18) == 0)
        {
          v970 = &v967[v971];
          uint64_t v969 = v961 + v971;
          goto LABEL_1564;
        }
        goto LABEL_1455;
      }
    }
    else
    {
      unint64_t v971 = 0;
LABEL_1455:
      uint64_t v969 = v961 + (v968 & 0xFFFFFFFFFFFFFFF8);
      v970 = &v967[v968 & 0xFFFFFFFFFFFFFFF8];
      v978 = (uint16x8_t *)((char *)v134 + 2 * v940 + 2 * v920 + 2 * v325 + 2 * v971 + 200);
      unint64_t v979 = v971 - (v966 & 0xFFFFFFFFFFFFFFF8);
      v980 = (char *)&v1217 + v971;
      do
      {
        *v978++ = vmovl_u8(*(uint8x8_t *)&v980[v961]);
        v980 += 8;
        v979 += 8;
      }
      while (v979);
      if (v968 != (v968 & 0xFFFFFFFFFFFFFFF8))
      {
        do
LABEL_1564:
          *v970++ = *((unsigned __int8 *)&v1217 + v969++);
        while (v969 != 13);
      }
    }
  }
  unsigned int v1058 = 0;
  do
  {
    ++v1058;
    BOOL v246 = v173 > 9;
    v173 /= 0xAu;
  }
  while (v246);
  uint64_t v1059 = 0;
  v1060 = &v967[v1058];
  _WORD *v1060 = 41;
  *(_OWORD *)(v1060 + 1) = xmmword_1826CEF30;
  uint64_t v1061 = 13;
  *(_DWORD *)(v1060 + 9) = 2621543;
  size_t v126 = 1;
  LODWORD(v125) = v172;
  do
  {
    uint64_t v1062 = v1061;
    uint64_t v1063 = v1059;
    size_t v1064 = v126;
    --v1061;
    *((unsigned char *)&v1217 + v1061) = (v125 % 0xA) | 0x30;
    ++v1059;
    ++v126;
    BOOL v246 = v125 > 9;
    unint64_t v125 = v125 / 0xAuLL;
  }
  while (v246);
  v1065 = v1060 + 11;
  unint64_t v30 = (unint64_t)v1148;
  if (v1062 <= 13)
  {
    unint64_t v1066 = v1063 + 1;
    if ((unint64_t)(v1063 + 1) < 8)
    {
      uint64_t v1067 = v1061;
      v1068 = v1065;
      goto LABEL_1583;
    }
    uint64_t v1069 = 2 * v940;
    if (v1066 >= 0x20)
    {
      unint64_t v1070 = v1066 & 0xFFFFFFFFFFFFFFE0;
      v1071 = (uint8x8_t *)((char *)&v1217 - v1063 + 28);
      v1072 = (uint16x8_t *)((char *)v134 + 2 * v920 + 2 * v325 + 2 * v1058 + v1069 + 254);
      unint64_t v1073 = v1064 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v1074 = *(uint8x16_t *)v1071[-2].i8;
        uint16x8_t v1075 = vmovl_u8(*v1071);
        uint16x8_t v1076 = vmovl_high_u8(*(uint8x16_t *)v1071->i8);
        v1072[-2] = vmovl_u8(*(uint8x8_t *)v1074.i8);
        v1072[-1] = vmovl_high_u8(v1074);
        uint16x8_t *v1072 = v1075;
        v1072[1] = v1076;
        v1072 += 4;
        v1071 += 4;
        v1073 -= 32;
      }
      while (v1073);
      if (v1066 != v1070)
      {
        if ((v1066 & 0x18) == 0)
        {
          v1068 = &v1065[v1070];
          uint64_t v1067 = v1061 + v1070;
          goto LABEL_1583;
        }
        goto LABEL_1578;
      }
    }
    else
    {
      unint64_t v1070 = 0;
LABEL_1578:
      uint64_t v1067 = v1061 + (v1066 & 0xFFFFFFFFFFFFFFF8);
      v1068 = &v1065[v1066 & 0xFFFFFFFFFFFFFFF8];
      v1077 = (uint16x8_t *)((char *)v134 + 2 * v920 + 2 * v325 + 2 * v1070 + 2 * v1058 + v1069 + 222);
      unint64_t v1078 = v1070 - (v1064 & 0xFFFFFFFFFFFFFFF8);
      v1079 = (char *)&v1217 + v1070;
      do
      {
        *v1077++ = vmovl_u8(*(uint8x8_t *)&v1079[v1061]);
        v1079 += 8;
        v1078 += 8;
      }
      while (v1078);
      if (v1066 != (v1066 & 0xFFFFFFFFFFFFFFF8))
      {
        do
LABEL_1583:
          *v1068++ = *((unsigned __int8 *)&v1217 + v1067++);
        while (v1067 != 13);
      }
    }
  }
  int v1080 = 0;
  do
  {
    ++v1080;
    BOOL v246 = v172 > 9;
    v172 /= 0xAu;
  }
  while (v246);
  v1065[v1080] = 41;
  uint64_t v35 = v1178;
LABEL_1587:
  v1081 = *(void **)(v163 + 8);
  unint64_t v1082 = *(void *)(v163 + 16);
  v1217 = v134;
  *(void *)&long long v1218 = v1081;
  __srcb = v1081;
  *((void *)&v1218 + 1) = v1082;
  int v1219 = 1;
  v1083 = v1201;
  *(void *)v1200 = off_1ECABC030;
  v1201 = 0;
  if (v1083)
  {
    if (*v1083 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v1083 -= 2;
    }
  }
  v1084 = *(_DWORD **)&v1207[24];
  unint64_t v1176 = HIDWORD(v1082);
  *(void *)v1207 = off_1ECABC030;
  *(void *)&v1207[24] = 0;
  if (v1084)
  {
    if (*v1084 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v1084 -= 2;
    }
  }
  if (v237)
  {
    if (*(_DWORD *)v237 != 2)
    {
      char v135 = 0;
      *(_DWORD *)v237 -= 2;
      char v132 = 1;
      v1085 = (WTF *)v1221;
      if (!(void)v1221) {
        goto LABEL_227;
      }
LABEL_226:
      WTF::fastFree(v1085, (void *)v125);
      goto LABEL_227;
    }
    WTF::StringImpl::destroy();
  }
  char v135 = 0;
  char v132 = 1;
  v1085 = (WTF *)v1221;
  if ((void)v1221) {
    goto LABEL_226;
  }
LABEL_227:
  uint64_t v136 = v1220;
  if (v1220)
  {
    uint64_t v137 = *((unsigned int *)v1220 - 1);
    if (v137)
    {
      unint64_t v138 = v1220 + 1;
      do
      {
        if (*((_DWORD *)v138 - 2) != -2 && *v138) {
          WTF::fastFree((WTF *)(*v138 - 16), (void *)v125);
        }
        v138 += 2;
        --v137;
      }
      while (v137);
    }
    WTF::fastFree((WTF *)(v136 - 2), (void *)v125);
  }
  if ((v135 & 1) == 0)
  {
    WGSL::RewriteGlobalVariables::insertDynamicOffsetsBufferIfNeeded(v35, (_OWORD *)(*(void *)v30 + 8), *(void *)v30);
    if ((v132 & 1) == 0) {
      goto LABEL_1667;
    }
    if (v134) {
      *(_DWORD *)v134 += 2;
    }
    *(void *)a4 = v134;
    *(_OWORD *)(a4 + 8) = v1218;
    int v143 = 1;
    *(unsigned char *)(a4 + 24) = 1;
    return ((uint64_t (*)(unsigned char *, _DWORD **))off_1ECABD1A0[v143])(v1207, &v1217);
  }
  v1196 = 0;
  if (!v134 || (uint64_t v139 = *((unsigned int *)v134 - 3), !v139))
  {
    uint64_t v144 = 0;
    v1197 = 0;
    unsigned int v1198 = 0;
    unsigned int v145 = v1176;
    unsigned int v1199 = v1176;
    if (!v1176) {
      goto LABEL_546;
    }
LABEL_246:
    if (v145 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x18256352CLL);
    }
    int8x16x2_t v146 = (WTF *)WTF::fastMalloc((WTF *)(8 * v145));
    unsigned int v1198 = v145;
    v1197 = v146;
    memcpy(v146, __srcb, 8 * v145);
    if (!*(void *)(v35 + 144)) {
      goto LABEL_547;
    }
    goto LABEL_248;
  }
  unsigned int v140 = (v139 - 1) | ((v139 - 1) >> 1) | (((v139 - 1) | ((v139 - 1) >> 1)) >> 2);
  unsigned int v141 = v140 | (v140 >> 4) | ((v140 | (v140 >> 4)) >> 8);
  unint64_t v142 = (v141 | HIWORD(v141)) + 1;
  if (v142 > 0x400)
  {
    if (v142 <= 2 * v139) {
      goto LABEL_477;
    }
  }
  else
  {
    if (3 * v142 > 4 * v139)
    {
LABEL_478:
      double v272 = (double)v139;
      double v273 = (double)v142;
      double v274 = 0.604166667;
      goto LABEL_480;
    }
LABEL_477:
    LODWORD(v142) = 2 * v142;
    if (v142 <= 0x400) {
      goto LABEL_478;
    }
  }
  double v272 = (double)v139;
  double v273 = (double)v142;
  double v274 = 0.416666667;
LABEL_480:
  if (v273 * v274 <= v272) {
    LODWORD(v142) = 2 * v142;
  }
  if (v142 <= 8) {
    unsigned int v275 = 8;
  }
  else {
    unsigned int v275 = v142;
  }
  uint64_t v276 = 16 * v275;
  int v277 = (_DWORD *)WTF::fastMalloc((WTF *)(v276 + 16));
  uint64_t v278 = v277;
  unint64_t v279 = 0;
  uint64_t v144 = (uint64_t)(v277 + 4);
  do
  {
    uint64_t v280 = &v277[v279 / 4];
    v280[4] = -1;
    *((void *)v280 + 3) = 0;
    v279 += 16;
  }
  while (v276 != v279);
  v1196 = v277 + 4;
  v277[2] = v275 - 1;
  v277[3] = v275;
  *int v277 = 0;
  v277[1] = v139;
  uint64_t v281 = *((unsigned int *)v134 - 1);
  unsigned int v282 = &v134[2 * v281];
  uint64_t v283 = v282;
  if (*((_DWORD *)v134 - 3))
  {
    uint64_t v283 = v134;
    if (v281)
    {
      uint64_t v284 = 16 * v281;
      uint64_t v283 = v134;
      while (*(_DWORD *)v283 >= 0xFFFFFFFE)
      {
        v283 += 2;
        v284 -= 16;
        if (!v284)
        {
          uint64_t v283 = v282;
          break;
        }
      }
    }
  }
  unsigned int v285 = &v134[2 * *((unsigned int *)v134 - 1)];
  if (v285 != v283)
  {
    v1180 = &v134[2 * *((unsigned int *)v134 - 1)];
    do
    {
      int v286 = 0;
      int v287 = *(_DWORD *)v283;
      unsigned int v288 = 9 * ((v287 + ~(v287 << 15)) ^ ((v287 + ~(v287 << 15)) >> 10));
      unsigned int v289 = ((v288 ^ (v288 >> 6)) + ~((v288 ^ (v288 >> 6)) << 11)) ^ (((v288 ^ (v288 >> 6))
                                                                      + ~((v288 ^ (v288 >> 6)) << 11)) >> 16);
      do
      {
        uint64_t v290 = v289 & v278[2];
        unsigned int v289 = ++v286 + v290;
      }
      while (*(_DWORD *)(v144 + 16 * v290) != -1);
      int v291 = v283[1];
      if (v291)
      {
        uint64_t v292 = *((unsigned int *)v291 - 3);
        if (v292)
        {
          unsigned int v293 = (v292 - 1) | ((v292 - 1) >> 1) | (((v292 - 1) | ((v292 - 1) >> 1)) >> 2);
          unsigned int v294 = v293 | (v293 >> 4) | ((v293 | (v293 >> 4)) >> 8);
          unint64_t v295 = (v294 | HIWORD(v294)) + 1;
          if (v295 > 0x400)
          {
            if (v295 <= 2 * v292) {
              goto LABEL_505;
            }
          }
          else
          {
            if (3 * v295 > 4 * v292)
            {
LABEL_506:
              if ((double)v295 * 0.604166667 > (double)v292)
              {
LABEL_510:
                if (v295 <= 8) {
                  uint64_t v296 = 8;
                }
                else {
                  uint64_t v296 = v295;
                }
                uint64_t v297 = 16 * v296;
                int v298 = (_DWORD *)WTF::fastMalloc((WTF *)(v297 + 16));
                unint64_t v299 = 0;
                int v291 = (void (*)(WGSL::AST::Identifier *__hidden))(v298 + 4);
                uint64_t v300 = v296 & 0xFFFFFFFE;
                uint64_t v301 = v297 & 0xFFFFFFFE0;
                do
                {
                  v302 = &v298[v299 / 4];
                  v302[4] = -1;
                  v302[8] = -1;
                  *((void *)v302 + 3) = 0;
                  *((void *)v302 + 5) = 0;
                  v299 += 32;
                }
                while (v301 != v299);
                uint64_t v303 = v296 - v300;
                if (v296 != v300)
                {
                  v304 = (void *)((char *)v298 + v301 + 24);
                  do
                  {
                    *((_DWORD *)v304 - 2) = -1;
                    void *v304 = 0;
                    v304 += 2;
                    --v303;
                  }
                  while (v303);
                }
                int v305 = v296 - 1;
                v298[2] = v296 - 1;
                v298[3] = v296;
                *int v298 = 0;
                v298[1] = v292;
                v306 = v283[1];
                if (!v306)
                {
                  v309 = 0;
                  unsigned int v285 = v1180;
                  uint64_t v308 = 0;
                  goto LABEL_526;
                }
                uint64_t v307 = *((unsigned int *)v306 - 1);
                uint64_t v308 = (void (*)(WGSL::AST::Identifier *__hidden))((char *)v306 + 16 * v307);
                unsigned int v285 = v1180;
                if (*((_DWORD *)v306 - 3))
                {
                  v309 = v283[1];
                  if (v307)
                  {
                    uint64_t v310 = 16 * v307;
                    v309 = v283[1];
                    while (*(_DWORD *)v309 >= 0xFFFFFFFE)
                    {
                      v309 = (void (*)(WGSL::AST::Identifier *__hidden))((char *)v309 + 16);
                      v310 -= 16;
                      if (!v310)
                      {
                        v309 = v308;
                        goto LABEL_527;
                      }
                    }
                  }
LABEL_526:
                  if (v306) {
LABEL_527:
                  }
                    v306 = (void (*)(WGSL::AST::Identifier *__hidden))((char *)v306
                                                                                + 16 * *((unsigned int *)v306 - 1));
                  if (v306 != v309)
                  {
                    do
                    {
                      int v314 = 0;
                      unsigned int v315 = *(_DWORD *)v309 + ~(*(_DWORD *)v309 << 15);
                      unsigned int v316 = (9 * (v315 ^ (v315 >> 10))) ^ ((9 * (v315 ^ (v315 >> 10))) >> 6);
                      unsigned int v317 = (v316 + ~(v316 << 11)) ^ ((v316 + ~(v316 << 11)) >> 16);
                      do
                      {
                        uint64_t v318 = v317 & v305;
                        unsigned int v317 = ++v314 + v318;
                      }
                      while (*((_DWORD *)v291 + 4 * v318) != -1);
                      long long v320 = *(_OWORD *)v309;
                      uint64_t v319 = (void (*)(WGSL::AST::Identifier *__hidden))((char *)v309 + 16);
                      *((_OWORD *)v291 + v318) = v320;
                      v321 = v308;
                      if (v319 != v308)
                      {
                        v321 = v319;
                        while (*(_DWORD *)v321 >= 0xFFFFFFFE)
                        {
                          v321 = (void (*)(WGSL::AST::Identifier *__hidden))((char *)v321 + 16);
                          if (v321 == v308)
                          {
                            v321 = v308;
                            break;
                          }
                        }
                      }
                      v309 = v321;
                    }
                    while (v321 != v306);
                  }
                  goto LABEL_529;
                }
                v309 = (void (*)(WGSL::AST::Identifier *__hidden))((char *)v306 + 16 * v307);
                uint64_t v308 = v309;
                goto LABEL_527;
              }
LABEL_509:
              LODWORD(v295) = 2 * v295;
              goto LABEL_510;
            }
LABEL_505:
            LODWORD(v295) = 2 * v295;
            if (v295 <= 0x400) {
              goto LABEL_506;
            }
          }
          if ((double)v295 * 0.416666667 > (double)v292) {
            goto LABEL_510;
          }
          goto LABEL_509;
        }
        int v291 = 0;
      }
LABEL_529:
      uint64_t v311 = v144 + 16 * v290;
      *(_DWORD *)uint64_t v311 = v287;
      uint64_t v312 = *(void *)(v311 + 8);
      *(void *)(v311 + 8) = v291;
      if (v312) {
        WTF::fastFree((WTF *)(v312 - 16), (void *)v125);
      }
      v313 = v283 + 2;
      uint64_t v283 = v282;
      unint64_t v30 = (unint64_t)v1148;
      uint64_t v131 = v1167;
      if (v313 != v282)
      {
        uint64_t v283 = v313;
        while (*(_DWORD *)v283 >= 0xFFFFFFFE)
        {
          v283 += 2;
          if (v283 == v282)
          {
            uint64_t v283 = v282;
            break;
          }
        }
      }
    }
    while (v283 != v285);
  }
  unsigned int v145 = v1176;
  uint64_t v35 = v1178;
  v1197 = 0;
  unsigned int v1198 = 0;
  unsigned int v1199 = v1176;
  if (v1176) {
    goto LABEL_246;
  }
LABEL_546:
  int8x16x2_t v146 = 0;
  if (!*(void *)(v35 + 144))
  {
LABEL_547:
    WGSL::RewriteGlobalVariables::insertStructs((uint64_t)&v1193, (void *)v35, **(const WTF::StringImpl ***)(v131 + 8), *(_DWORD *)(*(void *)(v131 + 8) + 12), (uint64_t *)&v1196);
    uint64_t v322 = *(void *)v30;
    if (!v1195)
    {
      v509 = v1193;
      unsigned int v510 = DWORD1(v1194);
      *(_OWORD *)v1200 = *(_OWORD *)(v322 + 8);
      if (DWORD1(v1194)) {
        goto LABEL_845;
      }
      goto LABEL_865;
    }
    WGSL::RewriteGlobalVariables::insertDynamicOffsetsBufferIfNeeded(v35, (_OWORD *)(v322 + 8), *(void *)v30);
    if (v1195 != 1) {
      goto LABEL_1667;
    }
    v323 = v1193;
    if (v1193) {
      *v1193 += 2;
    }
    *(void *)a4 = v323;
    *(_OWORD *)(a4 + 8) = v1194;
    int v324 = 1;
    *(unsigned char *)(a4 + 24) = 1;
    goto LABEL_1368;
  }
LABEL_248:
  v1220 = 0;
  *(void *)&long long v1221 = 0;
  uint64_t v147 = *(void *)(v35 + 64);
  if (!v147)
  {
    unint64_t v150 = 0;
    LODWORD(v148) = 0;
LABEL_554:
    unint64_t v149 = v147 + 24 * v148;
    goto LABEL_555;
  }
  uint64_t v148 = *(unsigned int *)(v147 - 4);
  unint64_t v149 = v147 + 24 * v148;
  if (!*(_DWORD *)(v147 - 12))
  {
    unint64_t v150 = v147 + 24 * v148;
    goto LABEL_554;
  }
  unint64_t v150 = *(void *)(v35 + 64);
  if (v148)
  {
    uint64_t v151 = 24 * v148;
    unint64_t v150 = *(void *)(v35 + 64);
    while (*(_DWORD *)v150 >= 0xFFFFFFFE)
    {
      v150 += 24;
      v151 -= 24;
      if (!v151)
      {
        unint64_t v150 = v149;
        break;
      }
    }
  }
LABEL_555:
  if (v147) {
    uint64_t v326 = v147 + 24 * *(unsigned int *)(v147 - 4);
  }
  else {
    uint64_t v326 = 0;
  }
  if (v326 == v150) {
    goto LABEL_843;
  }
  if (!v144)
  {
    while (1)
    {
      unint64_t v512 = v150 + 24;
      unint64_t v150 = v149;
      if (v512 != v149)
      {
        unint64_t v150 = v512;
        do
        {
          if (*(_DWORD *)v150 < 0xFFFFFFFE) {
            goto LABEL_836;
          }
          v150 += 24;
        }
        while (v150 != v149);
        unint64_t v150 = v149;
      }
LABEL_836:
      if (v150 == v326) {
        goto LABEL_843;
      }
    }
  }
  v1162 = (uint64_t *)(v35 + 136);
  unint64_t v1155 = v149;
  uint64_t v1152 = v326;
LABEL_562:
  unsigned int v327 = *(_DWORD *)(v144 - 8);
  unsigned int v328 = *(_DWORD *)v150;
  unsigned int v329 = 9 * ((v328 + ~(v328 << 15)) ^ ((v328 + ~(v328 << 15)) >> 10));
  unsigned int v330 = (v329 ^ (v329 >> 6)) + ~((v329 ^ (v329 >> 6)) << 11);
  uint64_t v331 = (v330 ^ HIWORD(v330)) & v327;
  int v332 = *(_DWORD *)(v144 + 16 * v331);
  if (v332 != *(_DWORD *)v150)
  {
    int v333 = 1;
    do
    {
      if (v332 == -1) {
        goto LABEL_829;
      }
      uint64_t v331 = (v331 + v333) & v327;
      int v332 = *(_DWORD *)(v144 + 16 * v331);
      ++v333;
    }
    while (v332 != v328);
  }
  if (v331 == *(_DWORD *)(v144 - 4)) {
    goto LABEL_829;
  }
  *(void *)v1200 = 0;
  *(void *)&v1200[8] = 0;
  v1193 = 0;
  uint64_t v334 = *(unsigned int *)(v150 + 20);
  if (!v334)
  {
LABEL_825:
    if (v1193) {
      WTF::fastFree((WTF *)(v1193 - 4), (void *)v125);
    }
    if (*(void *)v1200) {
      WTF::fastFree(*(WTF **)v1200, (void *)v125);
    }
    while (1)
    {
LABEL_829:
      unint64_t v508 = v150 + 24;
      unint64_t v150 = v149;
      if (v508 != v149)
      {
        unint64_t v150 = v508;
        while (*(_DWORD *)v150 >= 0xFFFFFFFE)
        {
          v150 += 24;
          if (v150 == v149)
          {
            unint64_t v150 = v149;
            break;
          }
        }
      }
      if (v150 == v326) {
        break;
      }
      uint64_t v144 = (uint64_t)v1196;
      if (v1196) {
        goto LABEL_562;
      }
    }
    v509 = (unsigned int *)v1220;
    unsigned int v511 = v1221;
    unsigned int v510 = DWORD1(v1221);
    goto LABEL_844;
  }
  unsigned int v335 = 0;
  __int16 v336 = (void *)(v144 + 16 * v331 + 8);
  uint64_t v337 = *(char **)(v150 + 8);
  char v338 = &v337[16 * v334];
  v1159 = v336;
  __srcc = v338;
  while (2)
  {
    int v339 = *(_DWORD *)v337;
    uint64_t v35 = *((void *)v337 + 1);
    if (v35) {
      *(_DWORD *)v35 += 2;
    }
    LODWORD(v1223[0]) = 0;
    LODWORD(v1223[0]) = *(_DWORD *)v150;
    uint64_t v340 = *v336;
    if (!*v336) {
      goto LABEL_810;
    }
    int v341 = *(_DWORD *)(v340 - 8);
    unsigned int v342 = 9 * ((v339 + ~(v339 << 15)) ^ ((v339 + ~(v339 << 15)) >> 10));
    unsigned int v343 = (v342 ^ (v342 >> 6)) + ~((v342 ^ (v342 >> 6)) << 11);
    unsigned int v344 = v341 & (v343 ^ HIWORD(v343));
    int v345 = *(_DWORD *)(v340 + 16 * v344);
    if (v345 != v339)
    {
      int v346 = 1;
      while (v345 != -1)
      {
        unsigned int v344 = (v344 + v346) & v341;
        int v345 = *(_DWORD *)(v340 + 16 * v344);
        ++v346;
        if (v345 == v339) {
          goto LABEL_580;
        }
      }
LABEL_810:
      if (!v35) {
        goto LABEL_572;
      }
LABEL_811:
      if (*(_DWORD *)v35 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *(_DWORD *)v35 -= 2;
      }
      goto LABEL_572;
    }
LABEL_580:
    uint64_t v347 = *(void *)(v1178 + 88);
    if (!v347) {
      goto LABEL_810;
    }
    int v348 = *(_DWORD *)(v347 - 8);
    unsigned int v349 = *(_DWORD *)(v35 + 16);
    if (v349 < 0x100) {
      unsigned int v350 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v35);
    }
    else {
      unsigned int v350 = v349 >> 8;
    }
    for (m = 0; ; unsigned int v350 = m + v352)
    {
      int v352 = v350 & v348;
      v353 = *(WTF ***)(v347 + 8 * (v350 & v348));
      if (v353 != (WTF **)-1)
      {
        if (!v353)
        {
          char v338 = __srcc;
          if (!v35) {
            goto LABEL_572;
          }
          goto LABEL_811;
        }
        if (WTF::equal(*v353, (const WTF::StringImpl *)v35, (const WTF::StringImpl *)v126)) {
          break;
        }
      }
      ++m;
    }
    uint64_t v354 = *(void *)(v1178 + 48);
    if (!v354) {
      goto LABEL_1652;
    }
    int v355 = *(_DWORD *)(v354 - 8);
    unsigned int v356 = *(_DWORD *)(v35 + 16);
    if (v356 < 0x100) {
      unsigned int v357 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v35);
    }
    else {
      unsigned int v357 = v356 >> 8;
    }
    int v358 = 0;
    while (2)
    {
      uint64_t v359 = v357 & v355;
      v360 = *(WTF **)(v354 + 32 * v359);
      if (v360 == (WTF *)-1)
      {
LABEL_596:
        unsigned int v357 = ++v358 + v359;
        continue;
      }
      break;
    }
    if (v360)
    {
      if (WTF::equal(v360, (const WTF::StringImpl *)v35, (const WTF::StringImpl *)v126))
      {
        uint64_t v361 = v354 + 32 * v359;
        uint64_t v362 = *(void *)(v1178 + 48);
        if (v362)
        {
          uint64_t v363 = *(unsigned int *)(v362 - 4);
          goto LABEL_604;
        }
        goto LABEL_605;
      }
      goto LABEL_596;
    }
    uint64_t v362 = *(void *)(v1178 + 48);
    if (!v362) {
      goto LABEL_1652;
    }
    uint64_t v363 = *(unsigned int *)(v362 - 4);
    uint64_t v361 = v362 + 32 * v363;
LABEL_604:
    if (v361 == v362 + 32 * v363)
    {
LABEL_1652:
      __break(0xC471u);
      JUMPOUT(0x1825632F8);
    }
LABEL_605:
    uint64_t v364 = *(void *)(v361 + 24);
    uint64_t v365 = *(void *)(v1178 + 40);
    uint64_t v366 = *(void *)(v365 + 312);
    uint64_t v1165 = v361;
    uint64_t v1168 = *(void *)(v364 + 136);
    if ((unint64_t)(*(void *)(v365 + 320) - v366) <= 0x47)
    {
      WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v365 + 312));
      uint64_t v366 = *(void *)(v365 + 312);
    }
    *(_OWORD *)(v366 + 8) = *(_OWORD *)(v364 + 8);
    *(unsigned char *)(v366 + 32) = 0;
    *(void *)(v366 + 24) = 0;
    *(unsigned char *)(v366 + 56) = 0;
    *(void *)uint64_t v366 = &unk_1ECABD408;
    *(void *)(v366 + 64) = v335;
    *(void *)(v365 + 312) += 72;
    unint64_t v367 = *(unsigned int *)(v365 + 356);
    unsigned int v1181 = v335;
    if (v367 == *(_DWORD *)(v365 + 352))
    {
      unint64_t v368 = v367 + (v367 >> 2);
      if (v368 >= 0x10) {
        unint64_t v369 = v368 + 1;
      }
      else {
        unint64_t v369 = 16;
      }
      if (v369 <= v367 + 1) {
        unint64_t v370 = v367 + 1;
      }
      else {
        unint64_t v370 = v369;
      }
      if (v370 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1825634FCLL);
      }
      v371 = *(void **)(v365 + 344);
      v372 = (void *)WTF::fastMalloc((WTF *)(8 * v370));
      *(_DWORD *)(v365 + 352) = v370;
      *(void *)(v365 + 344) = v372;
      memcpy(v372, v371, 8 * v367);
      unsigned int v335 = v1181;
      if (v371)
      {
        if (*(void **)(v365 + 344) == v371)
        {
          *(void *)(v365 + 344) = 0;
          *(_DWORD *)(v365 + 352) = 0;
        }
        WTF::fastFree((WTF *)v371, v373);
      }
      unint64_t v367 = *(unsigned int *)(v365 + 356);
      v374 = (void *)(*(void *)(v365 + 344) + 8 * v367);
      int v375 = *(unsigned __int8 *)(v366 + 56);
    }
    else
    {
      int v375 = 0;
      v374 = (void *)(*(void *)(v365 + 344) + 8 * v367);
    }
    void *v374 = v366;
    *(_DWORD *)(v365 + 356) = v367 + 1;
    uint64_t v376 = *(void *)(v1178 + 40);
    *(void *)(v366 + 24) = *(void *)(v376 + 128);
    if (v375)
    {
      uint64_t v377 = *(unsigned int *)(v366 + 48);
      if (v377 != -1)
      {
        if (v377 == 4)
        {
          *(_DWORD *)(v366 + 32) = v335;
          goto LABEL_628;
        }
        ((void (*)(unsigned char *, uint64_t))off_1ECABCE68[v377])(v1207, v366 + 32);
        uint64_t v376 = *(void *)(v1178 + 40);
      }
      *(_DWORD *)(v366 + 32) = v335;
      *(_DWORD *)(v366 + 48) = 4;
    }
    else
    {
      *(_DWORD *)(v366 + 32) = v335;
      *(_DWORD *)(v366 + 48) = 4;
      *(unsigned char *)(v366 + 56) = 1;
    }
LABEL_628:
    uint64_t v378 = *(void *)(v376 + 312);
    if ((unint64_t)(*(void *)(v376 + 320) - v378) <= 0x1F)
    {
      WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v376 + 312));
      uint64_t v378 = *(void *)(v376 + 312);
    }
    *(_OWORD *)(v378 + 8) = *(_OWORD *)(v364 + 8);
    *(void *)uint64_t v378 = &unk_1ECABD458;
    *(void *)(v378 + 24) = v366;
    *(void *)(v376 + 312) += 32;
    unint64_t v379 = *(unsigned int *)(v376 + 356);
    if (v379 == *(_DWORD *)(v376 + 352))
    {
      unint64_t v380 = v379 + (v379 >> 2);
      if (v380 >= 0x10) {
        unint64_t v381 = v380 + 1;
      }
      else {
        unint64_t v381 = 16;
      }
      if (v381 <= v379 + 1) {
        unint64_t v382 = v379 + 1;
      }
      else {
        unint64_t v382 = v381;
      }
      if (v382 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x182563504);
      }
      v383 = *(void **)(v376 + 344);
      v384 = (void *)WTF::fastMalloc((WTF *)(8 * v382));
      *(_DWORD *)(v376 + 352) = v382;
      *(void *)(v376 + 344) = v384;
      memcpy(v384, v383, 8 * v379);
      unsigned int v335 = v1181;
      if (v383)
      {
        if (*(void **)(v376 + 344) == v383)
        {
          *(void *)(v376 + 344) = 0;
          *(_DWORD *)(v376 + 352) = 0;
        }
        WTF::fastFree((WTF *)v383, v385);
      }
      unint64_t v379 = *(unsigned int *)(v376 + 356);
      v386 = (void *)(*(void *)(v376 + 344) + 8 * v379);
    }
    else
    {
      v386 = (void *)(*(void *)(v376 + 344) + 8 * v379);
    }
    void *v386 = v378;
    *(_DWORD *)(v376 + 356) = v379 + 1;
    uint64_t v387 = *(void *)(v1178 + 40);
    v388 = *(_DWORD **)(v364 + 48);
    if (v388) {
      *v388 += 2;
    }
    unint64_t v30 = (unint64_t)off_1ECABC030;
    *(void *)&v1207[8] = 0;
    *(void *)&v1207[16] = 0;
    *(void *)v1207 = off_1ECABC030;
    *(void *)&v1207[24] = v388;
    v389 = (void *)WTF::fastMalloc((WTF *)8);
    void *v389 = v378;
    uint64_t v390 = *(void *)(v387 + 312);
    if ((unint64_t)(*(void *)(v387 + 320) - v390) <= 0x9F)
    {
      WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v387 + 312));
      uint64_t v390 = *(void *)(v387 + 312);
    }
    *(_OWORD *)(v390 + 8) = *(_OWORD *)(v364 + 8);
    *(void *)uint64_t v390 = &unk_1ECABC888;
    long long v391 = *(_OWORD *)&v1207[8];
    *(_OWORD *)(v390 + 32) = *(_OWORD *)&v1207[8];
    *(void *)(v390 + 24) = off_1ECABC030;
    v392 = *(_DWORD **)&v1207[24];
    *(void *)&v1207[24] = 0;
    *(_OWORD *)(v390 + 64) = v391;
    *(void *)(v390 + 48) = v392;
    *(void *)(v390 + 56) = off_1ECABC030;
    if (v392) {
      *v392 += 2;
    }
    *(void *)(v390 + 80) = v392;
    *(void *)(v390 + 88) = v389;
    *(void *)(v390 + 96) = 0x100000001;
    *(unsigned char *)(v390 + 124) = 0;
    *(unsigned char *)(v390 + 128) = 0;
    *(unsigned char *)(v390 + 132) = 0;
    *(unsigned char *)(v390 + 136) = 0;
    *(_WORD *)(v390 + 140) = 0;
    *(unsigned char *)(v390 + 144) = 0;
    *(unsigned char *)(v390 + 148) = 0;
    *(unsigned char *)(v390 + 152) = 0;
    *(unsigned char *)(v390 + 154) = 0;
    *(void *)(v390 + 104) = v1168;
    *(void *)(v390 + 112) = 0;
    *(unsigned char *)(v390 + 120) = 0;
    *(void *)(v387 + 312) += 160;
    unint64_t v393 = *(unsigned int *)(v387 + 356);
    if (v393 == *(_DWORD *)(v387 + 352))
    {
      unint64_t v394 = v393 + (v393 >> 2);
      if (v394 >= 0x10) {
        unint64_t v395 = v394 + 1;
      }
      else {
        unint64_t v395 = 16;
      }
      if (v395 <= v393 + 1) {
        unint64_t v396 = v393 + 1;
      }
      else {
        unint64_t v396 = v395;
      }
      if (v396 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x18256350CLL);
      }
      v397 = *(void **)(v387 + 344);
      v398 = (void *)WTF::fastMalloc((WTF *)(8 * v396));
      *(_DWORD *)(v387 + 352) = v396;
      *(void *)(v387 + 344) = v398;
      memcpy(v398, v397, 8 * v393);
      unsigned int v335 = v1181;
      if (v397)
      {
        if (*(void **)(v387 + 344) == v397)
        {
          *(void *)(v387 + 344) = 0;
          *(_DWORD *)(v387 + 352) = 0;
        }
        WTF::fastFree((WTF *)v397, (void *)v125);
      }
      unint64_t v393 = *(unsigned int *)(v387 + 356);
      v399 = (void *)(*(void *)(v387 + 344) + 8 * v393);
    }
    else
    {
      v399 = (void *)(*(void *)(v387 + 344) + 8 * v393);
    }
    void *v399 = v390;
    *(_DWORD *)(v387 + 356) = v393 + 1;
    v400 = *(_DWORD **)&v1207[24];
    *(void *)v1207 = off_1ECABC030;
    *(void *)&v1207[24] = 0;
    if (v400)
    {
      if (*v400 != 2)
      {
        *v400 -= 2;
        break;
      }
      WTF::StringImpl::destroy();
      *(_DWORD *)v1207 = v335;
      *(void *)&v1207[8] = v390;
      uint64_t v401 = *(unsigned int *)&v1200[12];
      if (*(_DWORD *)&v1200[12] == *(_DWORD *)&v1200[8]) {
        goto LABEL_668;
      }
LABEL_671:
      *(_OWORD *)(*(void *)v1200 + 16 * v401) = *(_OWORD *)v1207;
      *(_DWORD *)&v1200[12] = v401 + 1;
      uint64_t v404 = *v1162;
      if (!*v1162) {
        goto LABEL_677;
      }
LABEL_672:
      unsigned int v405 = *(_DWORD *)(v404 - 8);
      unsigned int v406 = *(_DWORD *)v150;
      unsigned int v407 = 9 * ((v406 + ~(v406 << 15)) ^ ((v406 + ~(v406 << 15)) >> 10));
      unsigned int v408 = (v407 ^ (v407 >> 6)) + ~((v407 ^ (v407 >> 6)) << 11);
      uint64_t v409 = (v408 ^ HIWORD(v408)) & v405;
      int v410 = *(_DWORD *)(v404 + 8 * v409);
      if (v410 != *(_DWORD *)v150)
      {
        int v411 = 1;
        while (v410 != -1)
        {
          uint64_t v409 = (v409 + v411) & v405;
          int v410 = *(_DWORD *)(v404 + 8 * v409);
          ++v411;
          if (v410 == v406) {
            goto LABEL_676;
          }
        }
        goto LABEL_677;
      }
LABEL_676:
      if (v409 == *(_DWORD *)(v404 - 4)) {
        goto LABEL_677;
      }
      LODWORD(v1223[0]) = *(_DWORD *)(v404 + 8 * v409 + 4);
      *(_DWORD *)v1207 = v335;
      if (!*(unsigned char *)(v1165 + 16)) {
        goto LABEL_842;
      }
LABEL_694:
      *(_DWORD *)&v1207[4] = *(_DWORD *)(v1165 + 12);
      v1207[8] = *(unsigned char *)(v1178 + 184);
      uint64_t v422 = *(void *)(v1165 + 24);
      v424 = *(void **)(v422 + 136);
      v423 = *(unsigned __int8 **)(v422 + 144);
      int v425 = *((_DWORD *)v423 + 12);
      if (v425 == -1) {
        uint64_t v426 = -1;
      }
      else {
        uint64_t v426 = *((unsigned int *)v423 + 12);
      }
      switch(v426)
      {
        case 1:
          if (v425 != 1) {
            goto LABEL_1667;
          }
          if (!v424) {
            goto LABEL_745;
          }
          if ((*(unsigned int (**)(void *))(*v424 + 16))(v424) != 61)
          {
            __break(0xC471u);
            JUMPOUT(0x18256318CLL);
          }
          return result;
        case 2:
          if (v425 != 2) {
            goto LABEL_1667;
          }
          if (!v424) {
            goto LABEL_745;
          }
          if ((*(unsigned int (**)(void *))(*v424 + 16))(v424) != 61)
          {
            __break(0xC471u);
            JUMPOUT(0x18256314CLL);
          }
          return result;
        case 3:
          if (v425 != 3) {
            goto LABEL_1667;
          }
          if (!v424) {
            goto LABEL_745;
          }
          if ((*(unsigned int (**)(void *))(*v424 + 16))(v424) != 61)
          {
            __break(0xC471u);
            JUMPOUT(0x18256312CLL);
          }
          return result;
        case 4:
          if (v425 != 4) {
            goto LABEL_1667;
          }
          if (!v424) {
            goto LABEL_745;
          }
          if ((*(unsigned int (**)(void *))(*v424 + 16))(v424) != 61)
          {
            __break(0xC471u);
            JUMPOUT(0x18256310CLL);
          }
          return result;
        case 5:
          if (v425 == 5)
          {
            __break(0xC471u);
            JUMPOUT(0x182563428);
          }
          goto LABEL_1667;
        case 6:
          if (v425 == 6)
          {
            __break(0xC471u);
            JUMPOUT(0x182563400);
          }
          goto LABEL_1667;
        case 7:
          if (v425 != 7) {
            goto LABEL_1667;
          }
          unint64_t v480 = v423[8];
          BOOL v481 = v480 == 7;
          v1207[16] = 1;
          if (v480 >= 8) {
            char v482 = 0;
          }
          else {
            char v482 = 0x104030502010000uLL >> (8 * v480);
          }
          v1207[17] = v482;
          v1207[18] = v481;
          LODWORD(v432) = 2;
          __int16 v336 = v1159;
          goto LABEL_748;
        case 8:
          if (v425 != 8) {
            goto LABEL_1667;
          }
          unint64_t v427 = *v423;
          if (v427 >= 5) {
            char v428 = 0;
          }
          else {
            char v428 = 0x502010000uLL >> (8 * v427);
          }
          int v429 = v423[2];
          if (v429 == 1) {
            char v430 = 2;
          }
          else {
            char v430 = 1;
          }
          BOOL v165 = v429 == 2;
          unsigned __int8 v431 = v423[1];
          if (v165) {
            char v430 = 0;
          }
          v1207[16] = v430;
          v1207[17] = v431;
          v1207[18] = v428;
          LODWORD(v432) = 3;
          __int16 v336 = v1159;
          goto LABEL_748;
        case 9:
          if (v425 != 9) {
            goto LABEL_1667;
          }
          unint64_t v433 = *v423;
          BOOL v206 = v433 >= 6;
          BOOL v434 = v433 < 6;
          unint64_t v435 = 0x10403020100uLL >> (8 * v433);
          int v436 = v433 & 0x3F;
          if (v206) {
            LOBYTE(v435) = 0;
          }
          BOOL v165 = v436 == 5;
          LODWORD(v432) = 2;
          v1207[16] = 2;
          if (!v165) {
            BOOL v434 = 0;
          }
          v1207[17] = v435;
          v1207[18] = v434;
          __int16 v336 = v1159;
          goto LABEL_748;
        case 10:
          if (v425 == 10)
          {
            __break(0xC471u);
            JUMPOUT(0x182563388);
          }
          goto LABEL_1667;
        case 11:
          if (v425 == 11)
          {
            __break(0xC471u);
            JUMPOUT(0x182563360);
          }
          goto LABEL_1667;
        case 12:
          if (v425 != 12) {
            goto LABEL_1667;
          }
          if (!v424) {
            goto LABEL_745;
          }
          if ((*(unsigned int (**)(void *))(*v424 + 16))(v424) != 61)
          {
            __break(0xC471u);
            JUMPOUT(0x18256316CLL);
          }
          return result;
        case 13:
          if (v425 == 13)
          {
            __break(0xC471u);
            JUMPOUT(0x1825633D8);
          }
          goto LABEL_1667;
        case 14:
          if (v425 == 14)
          {
            __break(0xC471u);
            JUMPOUT(0x1825633B0);
          }
          goto LABEL_1667;
        default:
          if (v425) {
            goto LABEL_1667;
          }
          if (*v423 >= 8u)
          {
            __int16 v336 = v1159;
            uint64_t v432 = 4;
            switch(*v423)
            {
              case 8u:
                v1207[16] = 0;
                goto LABEL_819;
              case 9u:
                v1207[16] = 2;
LABEL_819:
                LODWORD(v432) = 1;
                goto LABEL_748;
              case 0xAu:
                goto LABEL_748;
              case 0xBu:
              case 0xCu:
              case 0xDu:
                goto LABEL_1668;
              default:
                goto LABEL_749;
            }
          }
          if (!v424) {
            goto LABEL_745;
          }
          if ((*(unsigned int (**)(void *))(*v424 + 16))(v424) != 61)
          {
            __break(0xC471u);
            JUMPOUT(0x1825631ACLL);
          }
          return result;
      }
      uint64_t v437 = v424[3];
      if (v437)
      {
        __int16 v336 = v1159;
        if (*(_DWORD *)(v437 + 48) == 10 && *(unsigned char *)v437 == 3)
        {
          if (*(unsigned char *)(v437 + 1)) {
            unsigned __int8 v438 = 1;
          }
          else {
            unsigned __int8 v438 = 2;
          }
        }
        else
        {
          unsigned __int8 v438 = 0;
        }
      }
      else
      {
LABEL_745:
        unsigned __int8 v438 = 0;
        __int16 v336 = v1159;
      }
      unsigned int v439 = WGSL::Type::size((WGSL::Type *)v423);
      LODWORD(v432) = 0;
      *(_WORD *)&v1207[16] = v438;
      *(void *)&v1207[24] = v439;
LABEL_748:
      LODWORD(v1208) = v432;
      uint64_t v432 = *(void *)(v1165 + 24);
LABEL_749:
      v440 = *(_DWORD **)(v432 + 48);
      if (v440) {
        *v440 += 2;
      }
      v1209 = v440;
      LOBYTE(v1210) = 0;
      BYTE4(v1210) = 0;
      BYTE8(v1210) = 0;
      BYTE12(v1210) = 0;
      LOBYTE(v1211) = 0;
      BYTE4(v1211) = 0;
      BYTE8(v1211) = 0;
      BYTE12(v1211) = 0;
      LOBYTE(v1212) = 0;
      BYTE4(v1212) = 0;
      BYTE8(v1212) = 0;
      BYTE12(v1212) = 0;
      v1213[0] = 0;
      v1213[4] = 0;
      v1213[8] = 0;
      v1213[12] = 0;
      v1213[16] = 0;
      v1213[20] = 0;
      uint64_t v441 = *(void *)(v1178 + 208);
      if (!v441) {
        goto LABEL_757;
      }
      unsigned int v442 = *(_DWORD *)(v441 - 8);
      uint64_t v443 = *(void *)(v1165 + 24);
      unint64_t v444 = (~(v443 << 32) + v443) ^ ((unint64_t)(~(v443 << 32) + v443) >> 22);
      unint64_t v445 = 9 * ((v444 + ~(v444 << 13)) ^ ((v444 + ~(v444 << 13)) >> 8));
      unint64_t v446 = (v445 ^ (v445 >> 15)) + ~((v445 ^ (v445 >> 15)) << 27);
      uint64_t v447 = v442 & ((v446 >> 31) ^ v446);
      uint64_t v448 = *(void *)(v441 + 16 * v447);
      if (v448 == v443)
      {
LABEL_756:
        if (v447 == *(_DWORD *)(v441 - 4)) {
          goto LABEL_757;
        }
        uint64_t v458 = *(void *)(v1178 + 144);
        if (*(_DWORD *)(v458 + 12) <= LODWORD(v1223[0]))
        {
          __break(0xC471u);
          JUMPOUT(0x182563514);
        }
        uint64_t v459 = *(void *)(v441 + 16 * v447 + 8);
        int v460 = *(_DWORD *)(*(void *)v458 + 24 * LODWORD(v1223[0]) + 20);
        v461 = v1193;
        if (v1193
          || (WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,unsigned int,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash((uint64_t *)&v1193, 8u), (v461 = v1193) != 0))
        {
          int v462 = *(v461 - 2);
        }
        else
        {
          int v462 = 0;
        }
        unint64_t v463 = (~(v459 << 32) + v459) ^ ((unint64_t)(~(v459 << 32) + v459) >> 22);
        unint64_t v464 = 9 * ((v463 + ~(v463 << 13)) ^ ((v463 + ~(v463 << 13)) >> 8));
        unint64_t v465 = (v464 ^ (v464 >> 15)) + ~((v464 ^ (v464 >> 15)) << 27);
        unsigned int v466 = v462 & ((v465 >> 31) ^ v465);
        size_t v126 = (size_t)&v461[4 * v466];
        uint64_t v467 = *(void *)v126;
        if (*(void *)v126)
        {
          v468 = 0;
          int v469 = 1;
          while (v467 != v459)
          {
            if (v467 == -1) {
              v468 = (void *)v126;
            }
            unsigned int v466 = (v466 + v469) & v462;
            size_t v126 = (size_t)&v461[4 * v466];
            uint64_t v467 = *(void *)v126;
            ++v469;
            if (!*(void *)v126)
            {
              if (v468)
              {
                void *v468 = 0;
                v468[1] = 0;
                --*(v461 - 4);
                size_t v126 = (size_t)v468;
              }
              goto LABEL_777;
            }
          }
          goto LABEL_795;
        }
LABEL_777:
        *(void *)size_t v126 = v459;
        *(_DWORD *)(v126 + 8) = v460;
        v470 = v1193;
        if (v1193)
        {
          int v471 = *(v1193 - 4);
          int v472 = *(v1193 - 3) + 1;
          *(v1193 - 3) = v472;
          uint64_t v473 = (v471 + v472);
          unint64_t v474 = *(v470 - 1);
          if (v474 <= 0x400) {
            goto LABEL_779;
          }
LABEL_792:
          if (v474 > 2 * v473) {
            goto LABEL_795;
          }
          goto LABEL_793;
        }
        int v472 = 1;
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        uint64_t v473 = (MEMORY[0xFFFFFFFFFFFFFFF0] + 1);
        unint64_t v474 = MEMORY[0xFFFFFFFFFFFFFFFC];
        if (MEMORY[0xFFFFFFFFFFFFFFFC] > 0x400u) {
          goto LABEL_792;
        }
LABEL_779:
        if (3 * v474 > 4 * v473) {
          goto LABEL_795;
        }
        if (v474) {
LABEL_793:
        }
          unsigned int v475 = v474 << (6 * v472 >= (2 * v474));
        else {
          unsigned int v475 = 8;
        }
        WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,unsigned int,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash((uint64_t *)&v1193, v475);
        goto LABEL_795;
      }
      int v449 = 1;
      while (v448)
      {
        uint64_t v447 = (v447 + v449) & v442;
        uint64_t v448 = *(void *)(v441 + 16 * v447);
        ++v449;
        if (v448 == v443) {
          goto LABEL_756;
        }
      }
LABEL_757:
      if (v1193)
      {
        unsigned int v450 = *(v1193 - 2);
        uint64_t v451 = *(void *)(v1165 + 24);
        unint64_t v452 = (~(v451 << 32) + v451) ^ ((unint64_t)(~(v451 << 32) + v451) >> 22);
        unint64_t v453 = 9 * ((v452 + ~(v452 << 13)) ^ ((v452 + ~(v452 << 13)) >> 8));
        unint64_t v454 = (v453 ^ (v453 >> 15)) + ~((v453 ^ (v453 >> 15)) << 27);
        uint64_t v455 = v450 & ((v454 >> 31) ^ v454);
        uint64_t v456 = *(void *)&v1193[4 * v455];
        if (v456 == v451)
        {
LABEL_762:
          if (v455 != *(v1193 - 1))
          {
            uint64_t v476 = *(void *)(v1178 + 144);
            if (*(_DWORD *)(v476 + 12) <= LODWORD(v1223[0]))
            {
              __break(0xC471u);
              JUMPOUT(0x18256351CLL);
            }
            uint64_t v477 = *(void *)v476 + 24 * LODWORD(v1223[0]);
            unsigned int v478 = v1193[4 * v455 + 2];
            if (*(_DWORD *)(v477 + 20) <= v478)
            {
              __break(0xC471u);
              JUMPOUT(0x182563524);
            }
            uint64_t v479 = *(void *)(v477 + 8) + 120 * v478;
            *(_DWORD *)(v479 + 56) = v335;
            *(unsigned char *)(v479 + 60) = 1;
          }
        }
        else
        {
          int v457 = 1;
          while (v456)
          {
            uint64_t v455 = (v455 + v457) & v450;
            uint64_t v456 = *(void *)&v1193[4 * v455];
            ++v457;
            if (v456 == v451) {
              goto LABEL_762;
            }
          }
        }
      }
LABEL_795:
      uint64_t v483 = *(void *)(*(void *)(v1165 + 24) + 144);
      if (v483 && !*(_DWORD *)(v483 + 48))
      {
        if (*(unsigned char *)v483 == 10) {
          int v484 = 4;
        }
        else {
          int v484 = 1;
        }
        uint64_t v485 = *(void *)(v1178 + 144);
        unsigned int v486 = v1223[0];
        if (*(_DWORD *)(v485 + 12) <= LODWORD(v1223[0]))
        {
LABEL_1687:
          __break(0xC471u);
          JUMPOUT(0x1825634F4);
        }
      }
      else
      {
        int v484 = 1;
        uint64_t v485 = *(void *)(v1178 + 144);
        unsigned int v486 = v1223[0];
        if (*(_DWORD *)(v485 + 12) <= LODWORD(v1223[0])) {
          goto LABEL_1687;
        }
      }
      uint64_t v487 = *(void *)v485 + 24 * v486;
      uint64_t v488 = v487 + 8;
      uint64_t v489 = *(unsigned int *)(v487 + 20);
      if (v489 == *(_DWORD *)(v487 + 16))
      {
        unint64_t v490 = WTF::Vector<WGSL::BindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v488, v489 + 1, (unint64_t)v1207);
        uint64_t v491 = *(void *)v488 + 120 * *(unsigned int *)(v488 + 12);
        uint64_t v492 = *(void *)(v490 + 32);
        long long v493 = *(_OWORD *)(v490 + 16);
        *(_OWORD *)uint64_t v491 = *(_OWORD *)v490;
        *(_OWORD *)(v491 + 16) = v493;
        *(void *)(v491 + 32) = v492;
        uint64_t v494 = *(void *)(v490 + 40);
        *(void *)(v490 + 40) = 0;
        *(void *)(v491 + 40) = v494;
        *(_OWORD *)(v491 + 48) = *(_OWORD *)(v490 + 48);
        uint64_t v495 = *(void *)(v490 + 109);
        long long v497 = *(_OWORD *)(v490 + 80);
        long long v496 = *(_OWORD *)(v490 + 96);
        *(_OWORD *)(v491 + 64) = *(_OWORD *)(v490 + 64);
        *(_OWORD *)(v491 + 80) = v497;
        *(_OWORD *)(v491 + 96) = v496;
        *(void *)(v491 + 109) = v495;
      }
      else
      {
        uint64_t v498 = *(void *)v488 + 120 * v489;
        long long v499 = *(_OWORD *)v1207;
        long long v500 = *(_OWORD *)&v1207[16];
        *(void *)(v498 + 32) = v1208;
        *(_OWORD *)uint64_t v498 = v499;
        *(_OWORD *)(v498 + 16) = v500;
        v501 = v1209;
        v1209 = 0;
        *(void *)(v498 + 40) = v501;
        *(_OWORD *)(v498 + 48) = v1210;
        long long v502 = v1211;
        long long v503 = v1212;
        long long v504 = *(_OWORD *)v1213;
        *(void *)(v498 + 109) = *(void *)&v1213[13];
        *(_OWORD *)(v498 + 80) = v503;
        *(_OWORD *)(v498 + 96) = v504;
        *(_OWORD *)(v498 + 64) = v502;
      }
      ++*(_DWORD *)(v488 + 12);
      v505 = v1209;
      v1209 = 0;
      char v338 = __srcc;
      if (!v505)
      {
LABEL_809:
        v335 += v484;
        goto LABEL_810;
      }
      if (*v505 != 2)
      {
        *v505 -= 2;
        goto LABEL_809;
      }
      WTF::StringImpl::destroy();
      v335 += v484;
      if (v35) {
        goto LABEL_811;
      }
LABEL_572:
      v337 += 16;
      if (v337 == v338)
      {
        uint64_t v35 = v1178;
        unint64_t v30 = (unint64_t)v1148;
        uint64_t v326 = v1152;
        unint64_t v149 = v1155;
        if (*(_DWORD *)&v1200[12])
        {
          if (DWORD1(v1221) == v1221)
          {
            v506 = (_DWORD *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1220, DWORD1(v1221) + 1, v150);
            v507 = (_DWORD *)v1220 + DWORD1(v1221);
          }
          else
          {
            v507 = (_DWORD *)v1220 + DWORD1(v1221);
            v506 = (_DWORD *)v150;
          }
          _DWORD *v507 = *v506;
          ++DWORD1(v1221);
          WGSL::RewriteGlobalVariables::finalizeArgumentBufferStruct(v1178, *(_DWORD *)v150, (uint64_t)v1200);
        }
        goto LABEL_825;
      }
      continue;
    }
    break;
  }
  *(_DWORD *)v1207 = v335;
  *(void *)&v1207[8] = v390;
  uint64_t v401 = *(unsigned int *)&v1200[12];
  if (*(_DWORD *)&v1200[12] != *(_DWORD *)&v1200[8]) {
    goto LABEL_671;
  }
LABEL_668:
  v402 = (_OWORD *)WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1200, v401 + 1, (unint64_t)v1207);
  int v403 = *(_DWORD *)&v1200[12];
  *(_OWORD *)(*(void *)v1200 + 16 * *(unsigned int *)&v1200[12]) = *v402;
  *(_DWORD *)&v1200[12] = v403 + 1;
  uint64_t v404 = *v1162;
  if (*v1162) {
    goto LABEL_672;
  }
LABEL_677:
  uint64_t v1214 = *(unsigned int *)(*(void *)(v1178 + 144) + 12);
  WTF::HashMap<unsigned int,unsigned int,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned long &>(v1162, (int *)v1223, &v1214, (uint64_t)v1207);
  unint64_t v30 = *(void *)(v1178 + 144);
  *(_DWORD *)v1207 = v1223[0];
  *(void *)&v1207[8] = 0;
  *(void *)&v1207[16] = 0;
  uint64_t v412 = *(unsigned int *)(v30 + 12);
  if (v412 == *(_DWORD *)(v30 + 8))
  {
    unint64_t v413 = WTF::Vector<WGSL::BindGroupLayout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30, v412 + 1, (unint64_t)v1207);
    uint64_t v414 = *(void *)v30 + 24 * *(unsigned int *)(v30 + 12);
    *(_DWORD *)uint64_t v414 = *(_DWORD *)v413;
    *(void *)(v414 + 8) = 0;
    *(void *)(v414 + 16) = 0;
    uint64_t v415 = *(void *)(v413 + 8);
    *(void *)(v413 + 8) = 0;
    *(void *)(v414 + 8) = v415;
    LODWORD(v415) = *(_DWORD *)(v413 + 16);
    *(_DWORD *)(v413 + 16) = 0;
    *(_DWORD *)(v414 + 16) = v415;
    LODWORD(v415) = *(_DWORD *)(v413 + 20);
    *(_DWORD *)(v413 + 20) = 0;
    *(_DWORD *)(v414 + 20) = v415;
  }
  else
  {
    uint64_t v416 = *(void *)v30 + 24 * v412;
    *(_DWORD *)uint64_t v416 = v1223[0];
    *(void *)(v416 + 8) = 0;
    *(void *)(v416 + 16) = 0;
    uint64_t v417 = *(void *)&v1207[8];
    *(void *)&v1207[8] = 0;
    *(void *)(v416 + 8) = v417;
    LODWORD(v417) = *(_DWORD *)&v1207[16];
    *(_DWORD *)&v1207[16] = 0;
    *(_DWORD *)(v416 + 16) = v417;
    LODWORD(v417) = *(_DWORD *)&v1207[20];
    *(_DWORD *)&v1207[20] = 0;
    *(_DWORD *)(v416 + 20) = v417;
  }
  ++*(_DWORD *)(v30 + 12);
  v418 = *(WTF **)&v1207[8];
  unsigned int v335 = v1181;
  if (*(_DWORD *)&v1207[20])
  {
    uint64_t v419 = 120 * *(unsigned int *)&v1207[20];
    v420 = (_DWORD **)(*(void *)&v1207[8] + 40);
    do
    {
      v421 = *v420;
      *v420 = 0;
      if (v421)
      {
        if (*v421 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v421 -= 2;
        }
      }
      v420 += 15;
      v419 -= 120;
    }
    while (v419);
    v418 = *(WTF **)&v1207[8];
  }
  if (v418)
  {
    *(void *)&v1207[8] = 0;
    *(_DWORD *)&v1207[16] = 0;
    WTF::fastFree(v418, (void *)v125);
  }
  LODWORD(v1223[0]) = v1214;
  *(_DWORD *)v1207 = v1181;
  if (*(unsigned char *)(v1165 + 16)) {
    goto LABEL_694;
  }
LABEL_842:
  __break(1u);
LABEL_843:
  unsigned int v510 = 0;
  unsigned int v511 = 0;
  v509 = 0;
LABEL_844:
  v1193 = v509;
  *(void *)&long long v1194 = __PAIR64__(v510, v511);
  int v1195 = 0;
  uint64_t v322 = *(void *)v30;
  *(_OWORD *)v1200 = *(_OWORD *)(*(void *)v30 + 8);
  if (v510)
  {
LABEL_845:
    v513 = &v509[v510];
    do
    {
      int v514 = 0;
      unsigned int v515 = *v509;
      unsigned int v516 = *v509;
      do
      {
        ++v514;
        BOOL v246 = v516 > 9;
        v516 /= 0xAu;
      }
      while (v246);
      if (v514 < 0
        || (uint64_t v517 = (v514 + 17), __OFADD__(v514, 17))
        || (WTF::tryFastCompactMalloc((WTF *)(v517 + 20)), (v518 = v1220) == 0))
      {
        __break(0xC471u);
        JUMPOUT(0x18256349CLL);
      }
      uint64_t v519 = 0;
      *(_DWORD *)v1220 = 2;
      *((_DWORD *)v518 + 1) = v517;
      v518[1] = (void (*)(WGSL::AST::Identifier *__hidden))((char *)v518 + 20);
      *((_DWORD *)v518 + 4) = 4;
      *((unsigned char *)v518 + 36) = 95;
      *(_OWORD *)((char *)v518 + 20) = *(_OWORD *)"__ArgumentBuffer_";
      unsigned int v520 = v515;
      do
      {
        *((unsigned char *)&v1221 + v519-- + 4) = (v520 % 0xA) | 0x30;
        BOOL v246 = v520 > 9;
        v520 /= 0xAu;
      }
      while (v246);
      if (v519 + 14 <= 13) {
        memcpy((char *)v518 + 37, (char *)&v1221 + v519 + 5, -v519);
      }
      *(void *)&v1207[8] = 0;
      *(void *)&v1207[16] = 0;
      *(void *)v1207 = off_1ECABC030;
      *(void *)&v1207[24] = v518;
      WGSL::RewriteGlobalVariables::insertParameter(v1178, v1200, v322, v515, (uint64_t)v1207, 0, 2);
      v521 = *(_DWORD **)&v1207[24];
      *(void *)v1207 = off_1ECABC030;
      *(void *)&v1207[24] = 0;
      if (v521)
      {
        if (*v521 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v521 -= 2;
        }
      }
      ++v509;
      uint64_t v35 = v1178;
    }
    while (v509 != v513);
  }
LABEL_865:
  uint64_t result = WGSL::RewriteGlobalVariables::insertDynamicOffsetsBufferIfNeeded(v35, v1200, v322);
  if (!v1196)
  {
    v536 = 0;
    uint64_t v534 = 0;
LABEL_874:
    v537 = v1148;
    v535 = &v1196[4 * v534];
    goto LABEL_875;
  }
  uint64_t v534 = *(v1196 - 1);
  v535 = &v1196[4 * v534];
  if (!*(v1196 - 3))
  {
    v536 = &v1196[4 * v534];
    goto LABEL_874;
  }
  v536 = v1196;
  v537 = v1148;
  if (v534)
  {
    uint64_t v538 = 16 * v534;
    v536 = v1196;
    while (*v536 >= 0xFFFFFFFE)
    {
      v536 += 4;
      v538 -= 16;
      if (!v538)
      {
        v536 = v535;
        break;
      }
    }
  }
LABEL_875:
  uint64_t v1163 = *v537;
  if (v1196) {
    v539 = &v1196[4 * *(v1196 - 1)];
  }
  else {
    v539 = 0;
  }
  if (v539 != v536)
  {
    uint64_t v1150 = *(void *)(v1163 + 16);
    uint64_t v1153 = *(void *)(v1163 + 8);
    v1147 = v535;
    __n128 v540 = 0uLL;
    v1146 = v539;
    while (1)
    {
      __n128 v1182 = v533;
      __n128 v1188 = v540;
      int v541 = 0;
      uint64_t v542 = *(void *)(v35 + 40);
      v1156 = v536;
      unsigned int v543 = *v536;
      unsigned int v544 = *v536;
      do
      {
        ++v541;
        BOOL v246 = v544 > 9;
        v544 /= 0xAu;
      }
      while (v246);
      if (v541 < 0
        || (uint64_t v545 = (v541 + 17), __OFADD__(v541, 17))
        || (WTF::tryFastCompactMalloc((WTF *)(v545 + 20)), (uint64_t v546 = v1223[0]) == 0))
      {
        __break(0xC471u);
        JUMPOUT(0x1825634A4);
      }
      uint64_t v547 = 0;
      *(_DWORD *)v1223[0] = 2;
      *(_DWORD *)(v546 + 4) = v545;
      *(void *)(v546 + 8) = v546 + 20;
      *(_DWORD *)(v546 + 16) = 4;
      *(unsigned char *)(v546 + 36) = 95;
      *(_OWORD *)(v546 + 20) = *(_OWORD *)"__ArgumentBuffer_";
      do
      {
        *((unsigned char *)&v1223[1] + v547-- + 4) = (v543 % 0xA) | 0x30;
        BOOL v246 = v543 > 9;
        v543 /= 0xAu;
      }
      while (v246);
      if (v547 + 14 <= 13) {
        memcpy((void *)(v546 + 37), (char *)&v1223[1] + v547 + 5, -v547);
      }
      *(void *)&v1200[8] = 0;
      *(void *)&v1200[16] = 0;
      *(void *)v1200 = off_1ECABC030;
      v1201 = (_DWORD *)v546;
      *(_DWORD *)v546 += 2;
      *(void *)&v1207[8] = 0;
      *(void *)&v1207[16] = 0;
      *(void *)v1207 = off_1ECABC030;
      *(void *)&v1207[24] = v546;
      uint64_t v1166 = *(void *)(v542 + 312);
      v548 = v1156;
      if ((unint64_t)(*(void *)(v542 + 320) - v1166) < 0x60)
      {
        WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v542 + 312));
        uint64_t v1166 = *(void *)(v542 + 312);
      }
      *(void *)(v1166 + 8) = v1153;
      *(void *)(v1166 + 16) = v1150;
      *(void *)(v1166 + 24) = 0;
      *(unsigned char *)(v1166 + 32) = 0;
      *(unsigned char *)(v1166 + 56) = 0;
      *(void *)uint64_t v1166 = off_1ECABBFB8;
      *(_OWORD *)(v1166 + 72) = *(_OWORD *)&v1207[8];
      *(void *)(v1166 + 64) = off_1ECABC030;
      uint64_t v549 = *(void *)&v1207[24];
      *(void *)&v1207[24] = 0;
      *(void *)(v1166 + 88) = v549;
      *(void *)(v542 + 312) += 96;
      unint64_t v550 = *(unsigned int *)(v542 + 356);
      if (v550 == *(_DWORD *)(v542 + 352))
      {
        unint64_t v551 = v550 + (v550 >> 2);
        if (v551 >= 0x10) {
          unint64_t v552 = v551 + 1;
        }
        else {
          unint64_t v552 = 16;
        }
        if (v552 <= v550 + 1) {
          unint64_t v553 = v550 + 1;
        }
        else {
          unint64_t v553 = v552;
        }
        if (v553 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1825634ECLL);
        }
        v554 = *(void **)(v542 + 344);
        v555 = (void *)WTF::fastMalloc((WTF *)(8 * v553));
        *(_DWORD *)(v542 + 352) = v553;
        *(void *)(v542 + 344) = v555;
        memcpy(v555, v554, 8 * v550);
        v548 = v1156;
        if (v554)
        {
          if (*(void **)(v542 + 344) == v554)
          {
            *(void *)(v542 + 344) = 0;
            *(_DWORD *)(v542 + 352) = 0;
          }
          WTF::fastFree((WTF *)v554, v532);
        }
        unint64_t v550 = *(unsigned int *)(v542 + 356);
        v556 = (void *)(*(void *)(v542 + 344) + 8 * v550);
      }
      else
      {
        v556 = (void *)(*(void *)(v542 + 344) + 8 * v550);
      }
      void *v556 = v1166;
      *(_DWORD *)(v542 + 356) = v550 + 1;
      v557 = *(_DWORD **)&v1207[24];
      *(void *)v1207 = off_1ECABC030;
      *(void *)&v1207[24] = 0;
      uint64_t v35 = v1178;
      __n128 v533 = v1182;
      __n128 v540 = v1188;
      if (!v557) {
        goto LABEL_909;
      }
      if (*v557 != 2) {
        break;
      }
      WTF::StringImpl::destroy();
      __n128 v533 = v1182;
      __n128 v540 = v1188;
      uint64_t result = (uint64_t)v1201;
      *(void *)v1200 = off_1ECABC030;
      v1201 = 0;
      if (!result) {
        goto LABEL_914;
      }
LABEL_912:
      if (*(_DWORD *)result != 2)
      {
        *(_DWORD *)result -= 2;
LABEL_914:
        uint64_t v558 = *((void *)v548 + 1);
        if (!v558) {
          goto LABEL_922;
        }
        goto LABEL_915;
      }
      uint64_t result = WTF::StringImpl::destroy();
      __n128 v533 = v1182;
      __n128 v540 = v1188;
      uint64_t v558 = *((void *)v548 + 1);
      if (!v558)
      {
LABEL_922:
        uint64_t v561 = 0;
        uint64_t v560 = v558;
        goto LABEL_923;
      }
LABEL_915:
      uint64_t v559 = *(unsigned int *)(v558 - 4);
      uint64_t v560 = v558 + 16 * v559;
      if (*(_DWORD *)(v558 - 12))
      {
        uint64_t v561 = v558;
        if (v559)
        {
          uint64_t v562 = 16 * v559;
          uint64_t v561 = v558;
          while (*(_DWORD *)v561 >= 0xFFFFFFFE)
          {
            v561 += 16;
            v562 -= 16;
            if (!v562)
            {
              uint64_t v561 = v560;
              goto LABEL_924;
            }
          }
        }
LABEL_923:
        if (!v558) {
          goto LABEL_925;
        }
        goto LABEL_924;
      }
      uint64_t v561 = v558 + 16 * v559;
      uint64_t v560 = v561;
LABEL_924:
      v558 += 16 * *(unsigned int *)(v558 - 4);
LABEL_925:
      if (v558 != v561)
      {
        uint64_t v1157 = v558;
        uint64_t v1160 = v560;
        do
        {
          uint64_t v563 = *(void *)(*(void *)(v561 + 8) + 16);
          uint64_t v564 = *(void *)(v563 + 48);
          if (v564) {
            *(_DWORD *)v564 += 2;
          }
          v565 = *(_DWORD **)(v563 + 144);
          __srcd = v565;
          uint64_t v1177 = v563;
          if (!v565 || v565[12] || *(unsigned char *)v565 != 10)
          {
            uint64_t v572 = *(void *)(v35 + 40);
            goto LABEL_944;
          }
          __n128 v1183 = v533;
          __n128 v1189 = v540;
          long long v1221 = *(_OWORD *)(v563 + 32);
          v1220 = off_1ECABC030;
          if (v564)
          {
            *(_DWORD *)v564 += 2;
            v1222 = (_DWORD *)v564;
            int v566 = *(_DWORD *)(v564 + 4);
            if (v566 < 0 || (uint64_t v567 = (v566 + 2), __OFADD__(v566, 2)))
            {
LABEL_1673:
              __break(0xC471u);
              JUMPOUT(0x182563474);
            }
            if ((*(unsigned char *)(v564 + 16) & 4) == 0)
            {
              if (v567 > 0x7FFFFFEF) {
                goto LABEL_1673;
              }
              WTF::tryFastCompactMalloc((WTF *)(2 * v567 + 20));
              uint64_t v568 = *(void *)v1207;
              if (!*(void *)v1207) {
                goto LABEL_1673;
              }
              **(_DWORD **)v1207 = 2;
              *(_DWORD *)(v568 + 4) = v567;
              *(void *)(v568 + 8) = v568 + 20;
              *(void *)(v568 + 16) = 0x5F005F00000000;
              v569 = (_WORD *)(v568 + 24);
              v570 = *(int8x16_t **)(v564 + 8);
              uint64_t v571 = *(unsigned int *)(v564 + 4);
              __n128 v533 = v1183;
              __n128 v540 = v1189;
              if ((*(unsigned char *)(v564 + 16) & 4) == 0)
              {
                if (!v571) {
                  goto LABEL_1205;
                }
                if (v571 == 1)
                {
                  _WORD *v569 = v570->i16[0];
                  goto LABEL_1205;
                }
                size_t v699 = 2 * v571;
LABEL_1193:
                memcpy(v569, v570, v699);
                __n128 v533 = v1183;
                __n128 v540 = v1189;
                goto LABEL_1205;
              }
              if (v571 < 0x40)
              {
                unint64_t v682 = v568 + 24;
                v689 = &v569[v571];
                if (v569 == v689) {
                  goto LABEL_1205;
                }
              }
              else
              {
                unint64_t v682 = (unint64_t)&v569[v571 & 0xFFFFFFC0];
                v683 = (char *)(v568 + 24);
                do
                {
                  v1234.val[1] = (int8x16_t)v540;
                  v1224.val[0] = *v570;
                  int8x16_t v684 = v570[1];
                  v1226.val[0] = v570[2];
                  int8x16_t v685 = v570[3];
                  v570 += 4;
                  v1234.val[0] = v685;
                  v1226.val[1] = v1234.val[1];
                  v1230.val[0] = v684;
                  v1224.val[1] = v1234.val[1];
                  v686 = v683;
                  vst2q_s8(v686, v1224);
                  v686 += 32;
                  v1230.val[1] = v1234.val[1];
                  vst2q_s8(v686, v1230);
                  v687 = v683 + 64;
                  vst2q_s8(v687, v1226);
                  __n128 v533 = (__n128)v1234.val[0];
                  __n128 v540 = (__n128)v1234.val[1];
                  v688 = v683 + 96;
                  vst2q_s8(v688, v1234);
                  v683 += 128;
                }
                while (v683 != (char *)v682);
                v689 = &v569[v571];
                if ((_WORD *)v682 == v689) {
                  goto LABEL_1205;
                }
              }
              unint64_t v690 = v568 + 2 * v571 - v682 + 22;
              if (v690 < 0xE
                || (v682 < (unint64_t)v570->u64 + (v690 >> 1) + 1
                  ? (BOOL v691 = (unint64_t)v570 >= v682 + (v690 & 0xFFFFFFFFFFFFFFFELL) + 2)
                  : (BOOL v691 = 1),
                    !v691))
              {
                v696 = (_WORD *)v682;
                v697 = v570;
                goto LABEL_1138;
              }
              __n128 v692 = v533;
              __n128 v693 = v540;
              uint64_t v694 = (v690 >> 1) + 1;
              if (v690 < 0x3E)
              {
                unint64_t v695 = 0;
                goto LABEL_1146;
              }
              unint64_t v695 = v694 & 0xFFFFFFFFFFFFFFE0;
              v700 = (uint8x8_t *)&v570[1];
              v701 = (uint16x8_t *)(v682 + 32);
              unint64_t v702 = v694 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                uint8x16_t v703 = *(uint8x16_t *)v700[-2].i8;
                uint16x8_t v704 = vmovl_u8(*v700);
                uint16x8_t v705 = vmovl_high_u8(*(uint8x16_t *)v700->i8);
                v701[-2] = vmovl_u8(*(uint8x8_t *)v703.i8);
                v701[-1] = vmovl_high_u8(v703);
                uint16x8_t *v701 = v704;
                v701[1] = v705;
                v701 += 4;
                v700 += 4;
                v702 -= 32;
              }
              while (v702);
              if (v694 != v695)
              {
                if ((v694 & 0x18) == 0)
                {
                  v697 = (int8x16_t *)((char *)v570 + v695);
                  v696 = (_WORD *)(v682 + 2 * v695);
                  __n128 v533 = v692;
                  __n128 v540 = v693;
                  do
                  {
LABEL_1138:
                    __int16 v698 = v697->u8[0];
                    v697 = (int8x16_t *)((char *)v697 + 1);
                    *v696++ = v698;
                  }
                  while (v696 != v689);
                  goto LABEL_1205;
                }
LABEL_1146:
                v696 = (_WORD *)(v682 + 2 * (v694 & 0xFFFFFFFFFFFFFFF8));
                v697 = (int8x16_t *)((char *)v570 + (v694 & 0xFFFFFFFFFFFFFFF8));
                v706 = (uint8x8_t *)&v570->i8[v695];
                v707 = (uint16x8_t *)(v682 + 2 * v695);
                unint64_t v708 = v695 - (v694 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint8x8_t v709 = *v706++;
                  *v707++ = vmovl_u8(v709);
                  v708 += 8;
                }
                while (v708);
                __n128 v533 = v692;
                __n128 v540 = v693;
                if (v694 == (v694 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_1205;
                }
                goto LABEL_1138;
              }
              __n128 v533 = v692;
              __n128 v540 = v693;
              goto LABEL_1205;
            }
          }
          else
          {
            v1222 = 0;
            uint64_t v567 = 2;
          }
          WTF::tryFastCompactMalloc((WTF *)(v567 + 20));
          uint64_t v568 = *(void *)v1207;
          if (!*(void *)v1207) {
            goto LABEL_1673;
          }
          **(_DWORD **)v1207 = 2;
          *(_DWORD *)(v568 + 4) = v567;
          *(_WORD *)(v568 + 20) = 24415;
          *(void *)(v568 + 8) = v568 + 20;
          *(_DWORD *)(v568 + 16) = 4;
          __n128 v533 = v1183;
          __n128 v540 = v1189;
          if (!v564) {
            goto LABEL_1208;
          }
          v569 = (_WORD *)(v568 + 22);
          v570 = *(int8x16_t **)(v564 + 8);
          size_t v699 = *(unsigned int *)(v564 + 4);
          if ((*(unsigned char *)(v564 + 16) & 4) != 0)
          {
            if (!v699) {
              goto LABEL_1205;
            }
            if (v699 == 1)
            {
              *(unsigned char *)v569 = v570->i8[0];
              goto LABEL_1205;
            }
            goto LABEL_1193;
          }
          if (v699 < 0x10)
          {
            unint64_t v770 = v568 + 22;
            v773 = (char *)v569 + v699;
            if (v569 == (_WORD *)((char *)v569 + v699)) {
              goto LABEL_1205;
            }
          }
          else
          {
            unint64_t v770 = (unint64_t)v569 + (v699 & 0xFFFFFFF0);
            v771 = (unsigned long long *)(v568 + 22);
            do
            {
              unsigned long long v772 = (unsigned __int128)vld2q_s8(v570->i8);
              v570 += 2;
              *v771++ = v772;
            }
            while (v771 != (unsigned long long *)v770);
            __n128 v533 = v1183;
            __n128 v540 = v1189;
            v773 = (char *)v569 + v699;
            if ((_WORD *)v770 == (_WORD *)((char *)v569 + v699)) {
              goto LABEL_1205;
            }
          }
          size_t v774 = v568 + v699 - v770;
          unint64_t v775 = v774 + 22;
          if (v774 + 22 < 8
            || (v770 < (unint64_t)&v570[2].u64[1] + 2 * v774 + 4
              ? (BOOL v776 = (unint64_t)v570 >= v568 + v699 + 22)
              : (BOOL v776 = 1),
                !v776))
          {
            v778 = (unsigned char *)v770;
            v779 = v570;
            goto LABEL_1204;
          }
          if (v775 < 0x20)
          {
            unint64_t v777 = 0;
            goto LABEL_1218;
          }
          unint64_t v777 = v775 & 0xFFFFFFFFFFFFFFE0;
          v782 = v570 + 2;
          v783 = (int8x16_t *)(v770 + 16);
          unint64_t v784 = v775 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            int8x16_t v786 = v782[-2];
            int8x16_t v785 = v782[-1];
            int8x16_t v788 = *v782;
            int8x16_t v787 = v782[1];
            v782 += 4;
            v783[-1] = vuzp1q_s8(v786, v785);
            int8x16_t *v783 = vuzp1q_s8(v788, v787);
            v783 += 2;
            v784 -= 32;
          }
          while (v784);
          if (v775 != v777)
          {
            if ((v775 & 0x18) == 0)
            {
              v779 = (int8x16_t *)((char *)v570 + 2 * v777);
              v778 = (unsigned char *)(v770 + v777);
              __n128 v533 = v1183;
              __n128 v540 = v1189;
              do
              {
LABEL_1204:
                char v780 = v779->i8[0];
                v779 = (int8x16_t *)((char *)v779 + 2);
                *v778++ = v780;
              }
              while (v778 != v773);
              goto LABEL_1205;
            }
LABEL_1218:
            v778 = (unsigned char *)(v770 + (v775 & 0xFFFFFFFFFFFFFFF8));
            v779 = (int8x16_t *)((char *)v570 + 2 * (v775 & 0xFFFFFFFFFFFFFFF8));
            v789 = (int16x8_t *)((char *)v570 + 2 * v777);
            v790 = (int8x8_t *)(v770 + v777);
            unint64_t v791 = v777 - (v775 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              int16x8_t v792 = *v789++;
              *v790++ = vmovn_s16(v792);
              v791 += 8;
            }
            while (v791);
            __n128 v533 = v1183;
            __n128 v540 = v1189;
            if (v775 == (v775 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_1205;
            }
            goto LABEL_1204;
          }
          __n128 v533 = v1183;
          __n128 v540 = v1189;
LABEL_1205:
          if (*(_DWORD *)v564 == 2)
          {
            __n128 v1185 = v533;
            __n128 v1191 = v540;
            WTF::StringImpl::destroy();
            __n128 v533 = v1185;
            __n128 v540 = v1191;
          }
          else
          {
            *(_DWORD *)v564 -= 2;
          }
LABEL_1208:
          v781 = v1222;
          v1220 = off_1ECABC030;
          v1222 = 0;
          if (v781)
          {
            if (*v781 == 2)
            {
              __n128 v1186 = v533;
              __n128 v1192 = v540;
              WTF::StringImpl::destroy();
              __n128 v533 = v1186;
              __n128 v540 = v1192;
            }
            else
            {
              *v781 -= 2;
            }
          }
          uint64_t v572 = *(void *)(v1178 + 40);
          *(unsigned char *)(v572 + 8) = 1;
          uint64_t v564 = v568;
LABEL_944:
          __n128 v1184 = v533;
          __n128 v1190 = v540;
          *(void *)&v1207[8] = 0;
          *(void *)&v1207[16] = 0;
          *(void *)v1207 = off_1ECABC030;
          *(void *)&v1207[24] = v564;
          uint64_t v573 = *(void *)(v572 + 312);
          if ((unint64_t)(*(void *)(v572 + 320) - v573) <= 0x87)
          {
            uint64_t v710 = WTF::fastMalloc((WTF *)0x4000);
            *(void *)v1200 = v710;
            uint64_t v712 = *(unsigned int *)(v572 + 340);
            if (v712 == *(_DWORD *)(v572 + 336))
            {
              v713 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v572 + 328, v712 + 1, (unint64_t)v1200);
              uint64_t v712 = *(unsigned int *)(v572 + 340);
              uint64_t v714 = *(void *)(v572 + 328);
              uint64_t v715 = *(void *)v713;
              *(void *)v713 = 0;
              *(void *)(v714 + 8 * v712) = v715;
              v716 = *(WTF **)v1200;
            }
            else
            {
              uint64_t v731 = v710;
              v716 = 0;
              uint64_t v732 = *(void *)(v572 + 328);
              *(void *)v1200 = 0;
              *(void *)(v732 + 8 * v712) = v731;
            }
            *(_DWORD *)(v572 + 340) = v712 + 1;
            WTF::fastFree(v716, v711);
            uint64_t v733 = *(unsigned int *)(v572 + 340);
            if (!v733)
            {
              __break(0xC471u);
              JUMPOUT(0x1825634DCLL);
            }
            uint64_t v573 = *(void *)(*(void *)(v572 + 328) + 8 * v733 - 8);
            *(void *)(v572 + 312) = v573;
            *(void *)(v572 + 320) = v573 + 0x4000;
          }
          *(unsigned char *)(v573 + 56) = 0;
          *(void *)(v573 + 16) = 0;
          *(void *)(v573 + 24) = 0;
          *(unsigned char *)(v573 + 32) = 0;
          *(void *)uint64_t v573 = off_1ECABC8B0;
          *(void *)(v573 + 8) = 0;
          long long v574 = *(_OWORD *)&v1207[8];
          *(_OWORD *)(v573 + 80) = *(_OWORD *)&v1207[8];
          *(void *)(v573 + 64) = v1166;
          *(void *)(v573 + 72) = off_1ECABC030;
          v575 = *(_DWORD **)&v1207[24];
          *(void *)&v1207[24] = 0;
          *(_OWORD *)(v573 + 112) = v574;
          *(void *)(v573 + 96) = v575;
          *(void *)(v573 + 104) = off_1ECABC030;
          if (v575) {
            *v575 += 2;
          }
          *(void *)(v573 + 128) = v575;
          *(void *)(v572 + 312) += 136;
          unint64_t v576 = *(unsigned int *)(v572 + 356);
          if (v576 == *(_DWORD *)(v572 + 352))
          {
            unint64_t v577 = v576 + (v576 >> 2);
            if (v577 >= 0x10) {
              unint64_t v578 = v577 + 1;
            }
            else {
              unint64_t v578 = 16;
            }
            if (v578 <= v576 + 1) {
              unint64_t v579 = v576 + 1;
            }
            else {
              unint64_t v579 = v578;
            }
            if (v579 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x182563454);
            }
            v580 = *(void **)(v572 + 344);
            v581 = (void *)WTF::fastMalloc((WTF *)(8 * v579));
            *(_DWORD *)(v572 + 352) = v579;
            *(void *)(v572 + 344) = v581;
            memcpy(v581, v580, 8 * v576);
            if (v580)
            {
              if (*(void **)(v572 + 344) == v580)
              {
                *(void *)(v572 + 344) = 0;
                *(_DWORD *)(v572 + 352) = 0;
              }
              WTF::fastFree((WTF *)v580, v582);
            }
            unint64_t v576 = *(unsigned int *)(v572 + 356);
            v583 = (void *)(*(void *)(v572 + 344) + 8 * v576);
          }
          else
          {
            v583 = (void *)(*(void *)(v572 + 344) + 8 * v576);
          }
          void *v583 = v573;
          *(_DWORD *)(v572 + 356) = v576 + 1;
          v584 = *(_DWORD **)&v1207[24];
          *(void *)v1207 = off_1ECABC030;
          *(void *)&v1207[24] = 0;
          uint64_t v585 = v1178;
          if (!v584) {
            goto LABEL_964;
          }
          if (*v584 != 2)
          {
            *v584 -= 2;
LABEL_964:
            if (!*(unsigned char *)(*(void *)(*(void *)(v561 + 8) + 16) + 160)) {
              goto LABEL_1045;
            }
            goto LABEL_965;
          }
          WTF::StringImpl::destroy();
          if (!*(unsigned char *)(*(void *)(*(void *)(v561 + 8) + 16) + 160)) {
            goto LABEL_1045;
          }
LABEL_965:
          uint64_t v586 = *(void *)(v1178 + 240);
          if (!v586) {
            goto LABEL_1045;
          }
          int v587 = *v1156 + 1;
          int v588 = *(_DWORD *)v561 + 1;
          int v589 = *(_DWORD *)(v586 - 8);
          unsigned int v590 = v589 & ((0xD7862706ELL * (unint64_t)(277951225 * v587 + 95187966 * v588)) >> 4);
          v591 = (int *)(v586 + 12 * v590);
          int v592 = *v591;
          int v593 = v591[1];
          if (*v591 == v587 && v593 == v588)
          {
LABEL_977:
            if (v591 == (int *)(v586 + 12 * *(unsigned int *)(v586 - 4))) {
              goto LABEL_1045;
            }
            int v597 = v591[2];
            uint64_t v598 = *(void *)(v1178 + 40);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            *(void *)&v1207[8] = 0;
            *(void *)&v1207[16] = 0;
            *(void *)v1207 = off_1ECABC030;
            *(void *)&v1207[24] = *(void *)v1200;
            uint64_t v599 = *(void *)(v598 + 312);
            if ((unint64_t)(*(void *)(v598 + 320) - v599) <= 0x5F)
            {
              uint64_t v740 = WTF::fastMalloc((WTF *)0x4000);
              *(void *)v1200 = v740;
              uint64_t v742 = *(unsigned int *)(v598 + 340);
              if (v742 == *(_DWORD *)(v598 + 336))
              {
                v743 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v598 + 328, v742 + 1, (unint64_t)v1200);
                uint64_t v742 = *(unsigned int *)(v598 + 340);
                uint64_t v744 = *(void *)(v598 + 328);
                uint64_t v745 = *(void *)v743;
                *(void *)v743 = 0;
                *(void *)(v744 + 8 * v742) = v745;
                v746 = *(WTF **)v1200;
              }
              else
              {
                uint64_t v761 = v740;
                v746 = 0;
                uint64_t v762 = *(void *)(v598 + 328);
                *(void *)v1200 = 0;
                *(void *)(v762 + 8 * v742) = v761;
              }
              *(_DWORD *)(v598 + 340) = v742 + 1;
              WTF::fastFree(v746, v741);
              uint64_t v763 = *(unsigned int *)(v598 + 340);
              uint64_t v585 = v1178;
              if (!v763)
              {
                __break(0xC471u);
                JUMPOUT(0x1825634C4);
              }
              uint64_t v599 = *(void *)(*(void *)(v598 + 328) + 8 * v763 - 8);
              *(void *)(v598 + 312) = v599;
              *(void *)(v598 + 320) = v599 + 0x4000;
            }
            *(unsigned char *)(v599 + 56) = 0;
            *(void *)(v599 + 16) = 0;
            *(void *)(v599 + 24) = 0;
            *(unsigned char *)(v599 + 32) = 0;
            *(void *)uint64_t v599 = off_1ECABBFB8;
            *(void *)(v599 + 8) = 0;
            *(_OWORD *)(v599 + 72) = *(_OWORD *)&v1207[8];
            *(void *)(v599 + 64) = off_1ECABC030;
            uint64_t v600 = *(void *)&v1207[24];
            *(void *)&v1207[24] = 0;
            *(void *)(v599 + 88) = v600;
            *(void *)(v598 + 312) += 96;
            unint64_t v601 = *(unsigned int *)(v598 + 356);
            if (v601 == *(_DWORD *)(v598 + 352))
            {
              unint64_t v602 = v601 + (v601 >> 2);
              if (v602 >= 0x10) {
                unint64_t v603 = v602 + 1;
              }
              else {
                unint64_t v603 = 16;
              }
              if (v603 <= v601 + 1) {
                unint64_t v604 = v601 + 1;
              }
              else {
                unint64_t v604 = v603;
              }
              if (v604 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x182563484);
              }
              v605 = *(void **)(v598 + 344);
              v606 = (void *)WTF::fastMalloc((WTF *)(8 * v604));
              *(_DWORD *)(v598 + 352) = v604;
              *(void *)(v598 + 344) = v606;
              memcpy(v606, v605, 8 * v601);
              if (v605)
              {
                if (*(void **)(v598 + 344) == v605)
                {
                  *(void *)(v598 + 344) = 0;
                  *(_DWORD *)(v598 + 352) = 0;
                }
                WTF::fastFree((WTF *)v605, v607);
              }
              unint64_t v601 = *(unsigned int *)(v598 + 356);
              v608 = (void *)(*(void *)(v598 + 344) + 8 * v601);
              uint64_t v585 = v1178;
            }
            else
            {
              v608 = (void *)(*(void *)(v598 + 344) + 8 * v601);
            }
            void *v608 = v599;
            *(_DWORD *)(v598 + 356) = v601 + 1;
            v609 = *(_DWORD **)&v1207[24];
            *(void *)v1207 = off_1ECABC030;
            *(void *)&v1207[24] = 0;
            if (v609)
            {
              if (*v609 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *v609 -= 2;
              }
            }
            v610 = *(unsigned __int8 **)(*(void *)(*(void *)(*(void *)(v561 + 8) + 16) + 136) + 24);
            if (*((_DWORD *)v610 + 12) != 10) {
              goto LABEL_1667;
            }
            uint64_t v611 = *(void *)(v585 + 40);
            *(void *)v1207 = ((unint64_t)v610[1] << 16) | ((unint64_t)*v610 << 8) | 7;
            *(void *)&v1207[8] = __srcd;
            v612 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v611 + 112), v1207);
            v613 = *(unsigned __int8 **)(v611 + 112);
            if (v613) {
              v613 += 24 * *((unsigned int *)v613 - 1);
            }
            if (v613 == v612 || (uint64_t v614 = *((void *)v612 + 2)) == 0) {
              operator new();
            }
            *(void *)(v599 + 24) = v614;
            uint64_t v585 = v1178;
            uint64_t v615 = *(void *)(v1178 + 40);
            uint64_t v616 = *(void *)(v615 + 312);
            if ((unint64_t)(*(void *)(v615 + 320) - v616) <= 0x47)
            {
              uint64_t v747 = WTF::fastMalloc((WTF *)0x4000);
              *(void *)v1207 = v747;
              uint64_t v749 = *(unsigned int *)(v615 + 340);
              if (v749 == *(_DWORD *)(v615 + 336))
              {
                v750 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v615 + 328, v749 + 1, (unint64_t)v1207);
                uint64_t v749 = *(unsigned int *)(v615 + 340);
                uint64_t v751 = *(void *)(v615 + 328);
                uint64_t v752 = *(void *)v750;
                *(void *)v750 = 0;
                *(void *)(v751 + 8 * v749) = v752;
                v753 = *(WTF **)v1207;
              }
              else
              {
                uint64_t v764 = v747;
                v753 = 0;
                uint64_t v765 = *(void *)(v615 + 328);
                *(void *)v1207 = 0;
                *(void *)(v765 + 8 * v749) = v764;
              }
              *(_DWORD *)(v615 + 340) = v749 + 1;
              WTF::fastFree(v753, v748);
              uint64_t v766 = *(unsigned int *)(v615 + 340);
              if (!v766)
              {
                __break(0xC471u);
                JUMPOUT(0x1825634CCLL);
              }
              uint64_t v616 = *(void *)(*(void *)(v615 + 328) + 8 * v766 - 8);
              *(void *)(v615 + 312) = v616;
              *(void *)(v615 + 320) = v616 + 0x4000;
            }
            *(void *)(v616 + 8) = v1153;
            *(void *)(v616 + 16) = v1150;
            *(unsigned char *)(v616 + 32) = 0;
            *(void *)(v616 + 24) = 0;
            *(unsigned char *)(v616 + 56) = 0;
            *(void *)uint64_t v616 = &unk_1ECABC080;
            *(_DWORD *)(v616 + 64) = v597;
            *(void *)(v615 + 312) += 72;
            unint64_t v617 = *(unsigned int *)(v615 + 356);
            if (v617 == *(_DWORD *)(v615 + 352))
            {
              unint64_t v618 = v617 + (v617 >> 2);
              if (v618 >= 0x10) {
                unint64_t v619 = v618 + 1;
              }
              else {
                unint64_t v619 = 16;
              }
              if (v619 <= v617 + 1) {
                unint64_t v620 = v617 + 1;
              }
              else {
                unint64_t v620 = v619;
              }
              if (v620 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x18256348CLL);
              }
              v621 = *(void **)(v615 + 344);
              v622 = (void *)WTF::fastMalloc((WTF *)(8 * v620));
              *(_DWORD *)(v615 + 352) = v620;
              *(void *)(v615 + 344) = v622;
              memcpy(v622, v621, 8 * v617);
              if (v621)
              {
                if (*(void **)(v615 + 344) == v621)
                {
                  *(void *)(v615 + 344) = 0;
                  *(_DWORD *)(v615 + 352) = 0;
                }
                WTF::fastFree((WTF *)v621, v623);
              }
              unint64_t v617 = *(unsigned int *)(v615 + 356);
              v624 = (void *)(*(void *)(v615 + 344) + 8 * v617);
              int v625 = *(unsigned __int8 *)(v616 + 56);
              uint64_t v585 = v1178;
            }
            else
            {
              int v625 = 0;
              v624 = (void *)(*(void *)(v615 + 344) + 8 * v617);
            }
            void *v624 = v616;
            *(_DWORD *)(v615 + 356) = v617 + 1;
            *(void *)(v616 + 24) = *(void *)(*(void *)(v585 + 40) + 168);
            LODWORD(v1214) = v597;
            unsigned int v1216 = 4;
            if (!v625)
            {
              *(_DWORD *)(v616 + 32) = v597;
              *(_DWORD *)(v616 + 48) = 4;
              uint64_t v627 = 4;
              *(unsigned char *)(v616 + 56) = 1;
              goto LABEL_1028;
            }
            uint64_t v626 = *(unsigned int *)(v616 + 48);
            if (v626 != 4)
            {
              if (v626 == -1)
              {
                *(_DWORD *)(v616 + 32) = v597;
                *(_DWORD *)(v616 + 48) = 4;
                uint64_t v627 = 4;
                goto LABEL_1028;
              }
              ((void (*)(unsigned char *, uint64_t))off_1ECABCE68[v626])(v1207, v616 + 32);
              uint64_t v627 = v1216;
              *(_DWORD *)(v616 + 32) = v1214;
              *(_DWORD *)(v616 + 48) = 4;
              if (v627 != -1) {
LABEL_1028:
              }
                ((void (*)(unsigned char *, uint64_t *))off_1ECABCE68[v627])(v1207, &v1214);
              unsigned int v1216 = -1;
              uint64_t v628 = *(void *)(v585 + 40);
              v629 = (void *)WTF::fastMalloc((WTF *)0x10);
              void *v629 = v573;
              v629[1] = v616;
              uint64_t v573 = *(void *)(v628 + 312);
              if ((unint64_t)(*(void *)(v628 + 320) - v573) <= 0x5F)
              {
                uint64_t v754 = WTF::fastMalloc((WTF *)0x4000);
                *(void *)v1207 = v754;
                uint64_t v756 = *(unsigned int *)(v628 + 340);
                if (v756 == *(_DWORD *)(v628 + 336))
                {
                  v757 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v628 + 328, v756 + 1, (unint64_t)v1207);
                  uint64_t v756 = *(unsigned int *)(v628 + 340);
                  uint64_t v758 = *(void *)(v628 + 328);
                  uint64_t v759 = *(void *)v757;
                  *(void *)v757 = 0;
                  *(void *)(v758 + 8 * v756) = v759;
                  v760 = *(WTF **)v1207;
                }
                else
                {
                  uint64_t v767 = v754;
                  v760 = 0;
                  uint64_t v768 = *(void *)(v628 + 328);
                  *(void *)v1207 = 0;
                  *(void *)(v768 + 8 * v756) = v767;
                }
                *(_DWORD *)(v628 + 340) = v756 + 1;
                WTF::fastFree(v760, v755);
                uint64_t v769 = *(unsigned int *)(v628 + 340);
                uint64_t v585 = v1178;
                if (!v769)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1825634D4);
                }
                uint64_t v573 = *(void *)(*(void *)(v628 + 328) + 8 * v769 - 8);
                *(void *)(v628 + 312) = v573;
                *(void *)(v628 + 320) = v573 + 0x4000;
              }
              *(unsigned char *)(v573 + 56) = 0;
              *(unsigned char *)(v573 + 32) = 0;
              *(void *)(v573 + 16) = 0;
              *(void *)(v573 + 24) = 0;
              *(void *)uint64_t v573 = &unk_1ECABC058;
              *(void *)(v573 + 8) = 0;
              *(void *)(v573 + 64) = v599;
              *(void *)(v573 + 72) = v629;
              *(void *)(v573 + 80) = 0x200000002;
              *(_WORD *)(v573 + 88) = 1792;
              *(void *)(v628 + 312) += 96;
              unint64_t v630 = *(unsigned int *)(v628 + 356);
              if (v630 == *(_DWORD *)(v628 + 352))
              {
                unint64_t v631 = v630 + (v630 >> 2);
                if (v631 >= 0x10) {
                  unint64_t v632 = v631 + 1;
                }
                else {
                  unint64_t v632 = 16;
                }
                if (v632 <= v630 + 1) {
                  unint64_t v633 = v630 + 1;
                }
                else {
                  unint64_t v633 = v632;
                }
                if (v633 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x182563494);
                }
                v634 = *(void **)(v628 + 344);
                v635 = (void *)WTF::fastMalloc((WTF *)(8 * v633));
                *(_DWORD *)(v628 + 352) = v633;
                *(void *)(v628 + 344) = v635;
                memcpy(v635, v634, 8 * v630);
                if (v634)
                {
                  if (*(void **)(v628 + 344) == v634)
                  {
                    *(void *)(v628 + 344) = 0;
                    *(_DWORD *)(v628 + 352) = 0;
                  }
                  WTF::fastFree((WTF *)v634, v636);
                }
                unint64_t v630 = *(unsigned int *)(v628 + 356);
                v637 = (void *)(*(void *)(v628 + 344) + 8 * v630);
              }
              else
              {
                v637 = (void *)(*(void *)(v628 + 344) + 8 * v630);
              }
              void *v637 = v573;
              *(_DWORD *)(v628 + 356) = v630 + 1;
              goto LABEL_1045;
            }
            *(_DWORD *)(v616 + 32) = v597;
            uint64_t v627 = 4;
            goto LABEL_1028;
          }
          int v595 = 1;
          while (v592 | v593)
          {
            unsigned int v590 = (v590 + v595) & v589;
            v591 = (int *)(v586 + 12 * v590);
            int v592 = *v591;
            int v593 = v591[1];
            ++v595;
            if (*v591 == v587 && v593 == v588) {
              goto LABEL_977;
            }
          }
LABEL_1045:
          uint64_t v638 = *(void *)(v585 + 40);
          v639 = *(_DWORD **)(v1177 + 48);
          if (v639) {
            *v639 += 2;
          }
          *(void *)&v1207[8] = 0;
          *(void *)&v1207[16] = 0;
          *(void *)v1207 = off_1ECABC030;
          *(void *)&v1207[24] = v639;
          uint64_t v640 = *(void *)(*(void *)(*(void *)(v561 + 8) + 16) + 136);
          uint64_t v641 = *(void *)(v638 + 312);
          if ((unint64_t)(*(void *)(v638 + 320) - v641) <= 0xB7)
          {
            uint64_t v717 = WTF::fastMalloc((WTF *)0x4000);
            *(void *)v1200 = v717;
            uint64_t v719 = *(unsigned int *)(v638 + 340);
            if (v719 == *(_DWORD *)(v638 + 336))
            {
              v720 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v638 + 328, v719 + 1, (unint64_t)v1200);
              uint64_t v719 = *(unsigned int *)(v638 + 340);
              uint64_t v721 = *(void *)(v638 + 328);
              uint64_t v722 = *(void *)v720;
              *(void *)v720 = 0;
              *(void *)(v721 + 8 * v719) = v722;
              v723 = *(WTF **)v1200;
            }
            else
            {
              uint64_t v734 = v717;
              v723 = 0;
              uint64_t v735 = *(void *)(v638 + 328);
              *(void *)v1200 = 0;
              *(void *)(v735 + 8 * v719) = v734;
            }
            *(_DWORD *)(v638 + 340) = v719 + 1;
            WTF::fastFree(v723, v718);
            uint64_t v736 = *(unsigned int *)(v638 + 340);
            uint64_t v585 = v1178;
            if (!v736)
            {
              __break(0xC471u);
              JUMPOUT(0x1825634B4);
            }
            uint64_t v641 = *(void *)(*(void *)(v638 + 328) + 8 * v736 - 8);
            *(void *)(v638 + 312) = v641;
            *(void *)(v638 + 320) = v641 + 0x4000;
          }
          *(void *)(v641 + 8) = 0;
          *(void *)(v641 + 16) = 0;
          *(void *)uint64_t v641 = &unk_1ECABC8D8;
          long long v642 = *(_OWORD *)&v1207[8];
          *(_OWORD *)(v641 + 32) = *(_OWORD *)&v1207[8];
          *(void *)(v641 + 24) = off_1ECABC030;
          v643 = *(_DWORD **)&v1207[24];
          *(void *)&v1207[24] = 0;
          *(_OWORD *)(v641 + 64) = v642;
          *(void *)(v641 + 48) = v643;
          *(void *)(v641 + 56) = off_1ECABC030;
          if (v643) {
            *v643 += 2;
          }
          *(void *)(v641 + 80) = v643;
          *(void *)(v641 + 88) = 0;
          *(void *)(v641 + 96) = 0;
          *(void *)(v641 + 104) = 0;
          *(void *)(v641 + 112) = v640;
          *(void *)(v641 + 120) = v573;
          *(_WORD *)(v641 + 128) = 257;
          *(unsigned char *)(v641 + 160) = 0;
          *(unsigned char *)(v641 + 164) = 0;
          *(unsigned char *)(v641 + 168) = 0;
          *(unsigned char *)(v641 + 172) = 0;
          *(unsigned char *)(v641 + 176) = 0;
          if (v640) {
            uint64_t v644 = v640;
          }
          else {
            uint64_t v644 = v573;
          }
          *(void *)(v641 + 149) = 0;
          *(void *)(v641 + 136) = 0;
          *(void *)(v641 + 144) = 0;
          *(void *)(v641 + 144) = *(void *)(v644 + 24);
          *(void *)(v638 + 312) += 184;
          unint64_t v645 = *(unsigned int *)(v638 + 356);
          if (v645 == *(_DWORD *)(v638 + 352))
          {
            unint64_t v646 = v645 + (v645 >> 2);
            if (v646 >= 0x10) {
              unint64_t v647 = v646 + 1;
            }
            else {
              unint64_t v647 = 16;
            }
            if (v647 <= v645 + 1) {
              unint64_t v648 = v645 + 1;
            }
            else {
              unint64_t v648 = v647;
            }
            if (v648 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x18256345CLL);
            }
            v649 = *(void **)(v638 + 344);
            v650 = (void *)WTF::fastMalloc((WTF *)(8 * v648));
            *(_DWORD *)(v638 + 352) = v648;
            *(void *)(v638 + 344) = v650;
            memcpy(v650, v649, 8 * v645);
            if (v649)
            {
              if (*(void **)(v638 + 344) == v649)
              {
                *(void *)(v638 + 344) = 0;
                *(_DWORD *)(v638 + 352) = 0;
              }
              WTF::fastFree((WTF *)v649, v651);
            }
            unint64_t v645 = *(unsigned int *)(v638 + 356);
            v652 = (void *)(*(void *)(v638 + 344) + 8 * v645);
            uint64_t v585 = v1178;
          }
          else
          {
            v652 = (void *)(*(void *)(v638 + 344) + 8 * v645);
          }
          void *v652 = v641;
          *(_DWORD *)(v638 + 356) = v645 + 1;
          v653 = *(_DWORD **)&v1207[24];
          *(void *)v1207 = off_1ECABC030;
          *(void *)&v1207[24] = 0;
          if (v653)
          {
            if (*v653 == 2)
            {
              WTF::StringImpl::destroy();
              uint64_t v654 = *(void *)(v585 + 40);
              v655 = *(void **)(v654 + 312);
              if (*(void *)(v654 + 320) - (void)v655 > 0x1FuLL) {
                goto LABEL_1073;
              }
              goto LABEL_1154;
            }
            *v653 -= 2;
          }
          uint64_t v654 = *(void *)(v585 + 40);
          v655 = *(void **)(v654 + 312);
          if (*(void *)(v654 + 320) - (void)v655 > 0x1FuLL) {
            goto LABEL_1073;
          }
LABEL_1154:
          uint64_t v724 = WTF::fastMalloc((WTF *)0x4000);
          *(void *)v1207 = v724;
          uint64_t v726 = *(unsigned int *)(v654 + 340);
          if (v726 == *(_DWORD *)(v654 + 336))
          {
            v727 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v654 + 328, v726 + 1, (unint64_t)v1207);
            uint64_t v726 = *(unsigned int *)(v654 + 340);
            uint64_t v728 = *(void *)(v654 + 328);
            uint64_t v729 = *(void *)v727;
            *(void *)v727 = 0;
            *(void *)(v728 + 8 * v726) = v729;
            v730 = *(WTF **)v1207;
          }
          else
          {
            uint64_t v737 = v724;
            v730 = 0;
            uint64_t v738 = *(void *)(v654 + 328);
            *(void *)v1207 = 0;
            *(void *)(v738 + 8 * v726) = v737;
          }
          *(_DWORD *)(v654 + 340) = v726 + 1;
          WTF::fastFree(v730, v725);
          uint64_t v739 = *(unsigned int *)(v654 + 340);
          if (!v739)
          {
            __break(0xC471u);
            JUMPOUT(0x1825634BCLL);
          }
          v655 = *(void **)(*(void *)(v654 + 328) + 8 * v739 - 8);
          *(void *)(v654 + 312) = v655;
          *(void *)(v654 + 320) = v655 + 2048;
LABEL_1073:
          void *v655 = &unk_1ECABC908;
          v655[1] = 0;
          v655[2] = 0;
          v655[3] = v641;
          *(void *)(v654 + 312) += 32;
          unint64_t v656 = *(unsigned int *)(v654 + 356);
          if (v656 == *(_DWORD *)(v654 + 352))
          {
            unint64_t v657 = v656 + (v656 >> 2);
            if (v657 >= 0x10) {
              unint64_t v658 = v657 + 1;
            }
            else {
              unint64_t v658 = 16;
            }
            if (v658 <= v656 + 1) {
              unint64_t v659 = v656 + 1;
            }
            else {
              unint64_t v659 = v658;
            }
            if (v659 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x182563464);
            }
            v660 = *(void **)(v654 + 344);
            v661 = (void *)WTF::fastMalloc((WTF *)(8 * v659));
            *(_DWORD *)(v654 + 352) = v659;
            *(void *)(v654 + 344) = v661;
            memcpy(v661, v660, 8 * v656);
            uint64_t v585 = v1178;
            if (v660)
            {
              if (*(void **)(v654 + 344) == v660)
              {
                *(void *)(v654 + 344) = 0;
                *(_DWORD *)(v654 + 352) = 0;
              }
              WTF::fastFree((WTF *)v660, v662);
            }
            unint64_t v656 = *(unsigned int *)(v654 + 356);
            v663 = (void *)(*(void *)(v654 + 344) + 8 * v656);
          }
          else
          {
            v663 = (void *)(*(void *)(v654 + 344) + 8 * v656);
          }
          void *v663 = v655;
          *(_DWORD *)(v654 + 356) = v656 + 1;
          uint64_t v664 = *(void *)(v585 + 40);
          uint64_t v665 = *(void *)(v1163 + 112);
          uint64_t v666 = v665 + 40;
          *(void *)v1207 = v655;
          uint64_t v667 = *(unsigned int *)(v665 + 52);
          if (v667 == *(_DWORD *)(v665 + 48))
          {
            v668 = (void *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v665 + 40, v667 + 1, (unint64_t)v1207);
            uint64_t v667 = *(unsigned int *)(v665 + 52);
          }
          else
          {
            v668 = v1207;
          }
          v669 = *(void **)(v665 + 40);
          uint64_t result = (uint64_t)memmove(v669 + 1, v669, 8 * v667);
          void *v669 = *v668;
          ++*(_DWORD *)(v665 + 52);
          unint64_t v670 = *(unsigned int *)(v664 + 412);
          if (v670 == *(_DWORD *)(v664 + 408))
          {
            unint64_t v671 = v670 + (v670 >> 2);
            if (v671 >= 0x10) {
              unint64_t v672 = v671 + 1;
            }
            else {
              unint64_t v672 = 16;
            }
            if (v672 <= v670 + 1) {
              unint64_t v673 = v670 + 1;
            }
            else {
              unint64_t v673 = v672;
            }
            if (v673 >> 27)
            {
              __break(0xC471u);
              JUMPOUT(0x18256346CLL);
            }
            v674 = *(WTF **)(v664 + 400);
            uint64_t result = WTF::fastMalloc((WTF *)(32 * v673));
            v675 = (WTF *)result;
            *(_DWORD *)(v664 + 408) = v673;
            *(void *)(v664 + 400) = result;
            if (v670)
            {
              uint64_t v676 = 32 * v670;
              v677 = v674;
              v678 = v674;
              __n128 v533 = v1184;
              __n128 v540 = v1190;
              while (1)
              {
                v679 = (WTF *)*((void *)v678 + 3);
                if (v679)
                {
                  if (v678 != v679)
                  {
                    *((void *)v675 + 3) = v679;
                    *((void *)v678 + 3) = 0;
                    goto LABEL_1101;
                  }
                  *((void *)v675 + 3) = v675;
                  (*(void (**)(void, WTF *, __n128, __n128))(**((void **)v678 + 3) + 24))(*((void *)v678 + 3), v675, v533, v540);
                  __n128 v533 = v1184;
                  __n128 v540 = v1190;
                  uint64_t result = *((void *)v678 + 3);
                  if (v678 == (WTF *)result) {
                    goto LABEL_1105;
                  }
                }
                else
                {
                  *((void *)v675 + 3) = 0;
                  uint64_t result = *((void *)v678 + 3);
                  if (v678 == (WTF *)result)
                  {
LABEL_1105:
                    uint64_t result = (*(uint64_t (**)(WTF *, __n128, __n128))(*(void *)v678 + 32))(v678, v533, v540);
LABEL_1109:
                    __n128 v533 = v1184;
                    __n128 v540 = v1190;
                    goto LABEL_1101;
                  }
                }
                if (result)
                {
                  uint64_t result = (*(uint64_t (**)(uint64_t, __n128, __n128))(*(void *)result + 40))(result, v533, v540);
                  goto LABEL_1109;
                }
LABEL_1101:
                v675 = (WTF *)((char *)v675 + 32);
                v678 = (WTF *)((char *)v678 + 32);
                v677 = (WTF *)((char *)v677 + 32);
                v676 -= 32;
                if (!v676)
                {
                  v675 = *(WTF **)(v664 + 400);
                  if (!v674) {
                    goto LABEL_1117;
                  }
                  goto LABEL_1114;
                }
              }
            }
            __n128 v533 = v1184;
            __n128 v540 = v1190;
            if (!v674) {
              goto LABEL_1117;
            }
LABEL_1114:
            if (v675 == v674)
            {
              *(void *)(v664 + 400) = 0;
              *(_DWORD *)(v664 + 408) = 0;
            }
            uint64_t result = WTF::fastFree(v674, v532);
            v675 = *(WTF **)(v664 + 400);
            __n128 v533 = v1184;
            __n128 v540 = v1190;
LABEL_1117:
            unint64_t v670 = *(unsigned int *)(v664 + 412);
            v680 = (void *)((char *)v675 + 32 * v670);
            uint64_t v35 = v1178;
          }
          else
          {
            v680 = (void *)(*(void *)(v664 + 400) + 32 * v670);
            uint64_t v35 = v1178;
            __n128 v533 = v1184;
            __n128 v540 = v1190;
          }
          void *v680 = &unk_1ECABD1C0;
          v680[1] = v666;
          v680[2] = 0;
          v680[3] = v680;
          *(_DWORD *)(v664 + 412) = v670 + 1;
          uint64_t v681 = v561 + 16;
          uint64_t v561 = v1160;
          if (v681 != v1160)
          {
            uint64_t v561 = v681;
            while (*(_DWORD *)v561 >= 0xFFFFFFFE)
            {
              v561 += 16;
              if (v561 == v1160)
              {
                uint64_t v561 = v1160;
                break;
              }
            }
          }
        }
        while (v561 != v1157);
      }
      v536 = v1147;
      if (v1156 + 4 != v1147)
      {
        v536 = v1156 + 4;
        while (*v536 >= 0xFFFFFFFE)
        {
          v536 += 4;
          if (v536 == v1147)
          {
            v536 = v1147;
            break;
          }
        }
      }
      if (v536 == v1146)
      {
        uint64_t v1163 = *v1148;
        goto LABEL_1230;
      }
    }
    *v557 -= 2;
LABEL_909:
    uint64_t result = (uint64_t)v1201;
    *(void *)v1200 = off_1ECABC030;
    v1201 = 0;
    if (!result) {
      goto LABEL_914;
    }
    goto LABEL_912;
  }
LABEL_1230:
  if (v1199)
  {
    uint64_t v1187 = *(unsigned int *)(*(void *)(v1163 + 112) + 52);
    v793 = v1197;
    uint64_t v794 = 8 * v1199;
    uint64_t v795 = v794;
    v796 = v1197;
    do
    {
      uint64_t v802 = *(void *)v796;
      v803 = (void *)(*(void *)(v1178 + 40) + 312);
      *(void *)v1207 = 0;
      *(void *)&v1207[8] = 0;
      v804 = WGSL::AST::Builder::construct<WGSL::AST::VariableStatement,WGSL::SourceSpan,WGSL::AST::Variable &,void>(v803, v1207, *(void *)(v802 + 16));
      uint64_t v805 = *(void *)(v1178 + 40);
      uint64_t v806 = *(void *)(v1163 + 112);
      *(void *)v1207 = v804;
      uint64_t v807 = *(unsigned int *)(v806 + 52);
      if (v807 == *(_DWORD *)(v806 + 48))
      {
        v808 = (void *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v806 + 40, v807 + 1, (unint64_t)v1207);
        uint64_t v807 = *(unsigned int *)(v806 + 52);
      }
      else
      {
        v808 = v1207;
      }
      v809 = *(void **)(v806 + 40);
      memmove(v809 + 1, v809, 8 * v807);
      void *v809 = *v808;
      ++*(_DWORD *)(v806 + 52);
      v810 = (void *)(v805 + 400);
      unint64_t v800 = *(unsigned int *)(v805 + 412);
      if (v800 == *(_DWORD *)(v805 + 408))
      {
        unint64_t v797 = v800 + (v800 >> 2);
        if (v797 >= 0x10) {
          unint64_t v798 = v797 + 1;
        }
        else {
          unint64_t v798 = 16;
        }
        if (v798 <= v800 + 1) {
          unint64_t v799 = v800 + 1;
        }
        else {
          unint64_t v799 = v798;
        }
        WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v810, v799);
        unint64_t v800 = *(unsigned int *)(v805 + 412);
        v801 = (void *)(*(void *)(v805 + 400) + 32 * v800);
      }
      else
      {
        v801 = (void *)(*v810 + 32 * v800);
      }
      void *v801 = &unk_1ECABD1C0;
      v801[1] = v806 + 40;
      v801[2] = 0;
      v801[3] = v801;
      *(_DWORD *)(v805 + 412) = v800 + 1;
      v796 = (WTF *)((char *)v796 + 8);
      v795 -= 8;
    }
    while (v795);
    uint64_t v811 = *(unsigned int *)(*(void *)(v1163 + 112) + 52);
    uint64_t v1214 = 0;
    uint64_t v1215 = 0;
    do
    {
      uint64_t v812 = *(void *)(*(void *)v793 + 16);
      if (*(unsigned __int16 *)(v812 + 152) >= 0x100u && *(_WORD *)(v812 + 152) == 5)
      {
        uint64_t v814 = *(void *)(v812 + 144);
        uint64_t v815 = *(void *)(v1178 + 40);
        *(void *)v1200 = 0;
        *(void *)&v1200[8] = 0;
        v816 = *(_DWORD **)(v812 + 48);
        if (v816) {
          *v816 += 2;
        }
        *(void *)&v1207[8] = 0;
        *(void *)&v1207[16] = 0;
        *(void *)v1207 = off_1ECABC030;
        *(void *)&v1207[24] = v816;
        v817 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>((void *)(v815 + 312), v1200, (uint64_t)v1207);
        v818 = *(_DWORD **)&v1207[24];
        *(void *)v1207 = off_1ECABC030;
        *(void *)&v1207[24] = 0;
        if (v818)
        {
          if (*v818 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v818 -= 2;
          }
        }
        v817[3] = v814;
        WGSL::RewriteGlobalVariables::storeInitialValue((WTF *)v1178, (uint64_t)v817, (uint64_t)&v1214, 0, 0);
      }
      v793 = (WTF *)((char *)v793 + 8);
      v794 -= 8;
    }
    while (v794);
    uint64_t v35 = v1178;
    if (HIDWORD(v1215))
    {
      v819 = (void *)(*(void *)(v1178 + 40) + 312);
      *(void *)v1200 = 0;
      *(void *)&v1200[8] = 0;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(void *)&v1207[8] = 0;
      *(void *)&v1207[16] = 0;
      *(void *)v1207 = off_1ECABC030;
      v820 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v819, v1200, (uint64_t)v1207);
      v821 = *(_DWORD **)&v1207[24];
      *(void *)v1207 = off_1ECABC030;
      *(void *)&v1207[24] = 0;
      if (v821)
      {
        if (*v821 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v821 -= 2;
        }
      }
      uint64_t v822 = *(void *)(v1178 + 40);
      v820[3] = *(void *)(v822 + 120);
      *(void *)v1207 = 0;
      *(void *)&v1207[8] = 0;
      *(void *)v1200 = 0;
      *(void *)&v1200[8] = 0;
      v824 = WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>((void *)(v822 + 312), v1207, (uint64_t)v820, (uint64_t *)v1200);
      v825 = *(WTF **)v1200;
      if (*(void *)v1200)
      {
        *(void *)v1200 = 0;
        *(_DWORD *)&v1200[8] = 0;
        WTF::fastFree(v825, v823);
      }
      uint64_t v826 = v811 - v1187;
      uint64_t v827 = *(void *)(v1178 + 40);
      v824[3] = *(void *)(v827 + 144);
      *(void *)v1207 = 0;
      *(void *)&v1207[8] = 0;
      v828 = WGSL::AST::Builder::construct<WGSL::AST::CallStatement,WGSL::SourceSpan,WGSL::AST::CallExpression &,void>((void *)(v827 + 312), v1207, (uint64_t)v824);
      uint64_t v829 = *(void *)(v1178 + 40);
      uint64_t v830 = *(void *)(v1163 + 112);
      uint64_t v831 = v830 + 40;
      *(void *)v1207 = v828;
      uint64_t v832 = *(unsigned int *)(v830 + 52);
      if (v832 == *(_DWORD *)(v830 + 48))
      {
        v833 = (void *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v830 + 40, v832 + 1, (unint64_t)v1207);
        LODWORD(v832) = *(_DWORD *)(v830 + 52);
      }
      else
      {
        v833 = v1207;
      }
      v834 = (void *)(*(void *)(v830 + 40) + 8 * v826);
      memmove(v834 + 1, v834, 8 * v832 - 8 * v826);
      void *v834 = *v833;
      ++*(_DWORD *)(v830 + 52);
      v835 = (void *)(v829 + 400);
      unint64_t v836 = *(unsigned int *)(v829 + 412);
      if (v836 == *(_DWORD *)(v829 + 408))
      {
        unint64_t v837 = v836 + (v836 >> 2);
        if (v837 >= 0x10) {
          unint64_t v838 = v837 + 1;
        }
        else {
          unint64_t v838 = 16;
        }
        if (v838 <= v836 + 1) {
          unint64_t v839 = v836 + 1;
        }
        else {
          unint64_t v839 = v838;
        }
        WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v835, v839);
        unint64_t v836 = *(unsigned int *)(v829 + 412);
        v840 = (void *)(*(void *)(v829 + 400) + 32 * v836);
      }
      else
      {
        v840 = (void *)(*v835 + 32 * v836);
      }
      uint64_t v841 = v1178;
      void *v840 = &unk_1ECABD1C0;
      v840[1] = v831;
      v840[2] = v826;
      v840[3] = v840;
      *(_DWORD *)(v829 + 412) = v836 + 1;
      uint64_t v842 = *(void *)(v1163 + 56);
      uint64_t v843 = *(unsigned int *)(v1163 + 68);
      if (v843)
      {
        uint64_t v844 = 8 * v843;
        while (1)
        {
          v845 = *(void **)v842;
          if (*(unsigned __int16 *)(*(void *)v842 + 89) >= 0x100u
            && *(_WORD *)(*(void *)v842 + 89) == 5)
          {
            break;
          }
          v842 += 8;
          v844 -= 8;
          if (!v844) {
            goto LABEL_1285;
          }
        }
      }
      else
      {
LABEL_1285:
        v847 = (void *)(*(void *)(v1178 + 40) + 312);
        *(void *)v1200 = 0;
        *(void *)&v1200[8] = 0;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        *(void *)&v1207[8] = 0;
        *(void *)&v1207[16] = 0;
        *(void *)v1207 = off_1ECABC030;
        v848 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v847, v1200, (uint64_t)v1207);
        v849 = *(_DWORD **)&v1207[24];
        *(void *)v1207 = off_1ECABC030;
        *(void *)&v1207[24] = 0;
        if (v849)
        {
          if (*v849 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v849 -= 2;
          }
        }
        uint64_t v851 = *(void *)(v1178 + 40);
        v848[3] = *(void *)(v851 + 168);
        uint64_t v852 = *(void *)(v851 + 312);
        if ((unint64_t)(*(void *)(v851 + 320) - v852) <= 0x1F)
        {
          uint64_t v1133 = WTF::fastMalloc((WTF *)0x4000);
          *(void *)v1207 = v1133;
          uint64_t v1135 = *(unsigned int *)(v851 + 340);
          if (v1135 == *(_DWORD *)(v851 + 336))
          {
            v1136 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v851 + 328, v1135 + 1, (unint64_t)v1207);
            uint64_t v1135 = *(unsigned int *)(v851 + 340);
            uint64_t v1137 = *(void *)(v851 + 328);
            uint64_t v1138 = *(void *)v1136;
            *(void *)v1136 = 0;
            *(void *)(v1137 + 8 * v1135) = v1138;
            v1139 = *(WTF **)v1207;
          }
          else
          {
            uint64_t v1143 = v1133;
            v1139 = 0;
            uint64_t v1144 = *(void *)(v851 + 328);
            *(void *)v1207 = 0;
            *(void *)(v1144 + 8 * v1135) = v1143;
          }
          *(_DWORD *)(v851 + 340) = v1135 + 1;
          WTF::fastFree(v1139, v1134);
          uint64_t v1145 = *(unsigned int *)(v851 + 340);
          if (!v1145)
          {
            __break(0xC471u);
            JUMPOUT(0x18256354CLL);
          }
          uint64_t v852 = *(void *)(*(void *)(v851 + 328) + 8 * v1145 - 8);
          *(void *)(v851 + 312) = v852;
          *(void *)(v851 + 320) = v852 + 0x4000;
        }
        *(void *)(v852 + 8) = 0;
        *(void *)(v852 + 16) = 0;
        *(void *)uint64_t v852 = &unk_1ECABD4F8;
        *(unsigned char *)(v852 + 24) = 5;
        *(void *)(v851 + 312) += 32;
        unint64_t v853 = *(unsigned int *)(v851 + 356);
        if (v853 == *(_DWORD *)(v851 + 352))
        {
          unint64_t v854 = v853 + (v853 >> 2);
          if (v854 >= 0x10) {
            unint64_t v855 = v854 + 1;
          }
          else {
            unint64_t v855 = 16;
          }
          if (v855 <= v853 + 1) {
            unint64_t v856 = v853 + 1;
          }
          else {
            unint64_t v856 = v855;
          }
          if (v856 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x18256353CLL);
          }
          v857 = *(void **)(v851 + 344);
          v858 = (void *)WTF::fastMalloc((WTF *)(8 * v856));
          *(_DWORD *)(v851 + 352) = v856;
          *(void *)(v851 + 344) = v858;
          memcpy(v858, v857, 8 * v853);
          if (v857)
          {
            if (*(void **)(v851 + 344) == v857)
            {
              *(void *)(v851 + 344) = 0;
              *(_DWORD *)(v851 + 352) = 0;
            }
            WTF::fastFree((WTF *)v857, v859);
          }
          unint64_t v853 = *(unsigned int *)(v851 + 356);
          v860 = (void *)(*(void *)(v851 + 344) + 8 * v853);
        }
        else
        {
          v860 = (void *)(*(void *)(v851 + 344) + 8 * v853);
        }
        void *v860 = v852;
        *(_DWORD *)(v851 + 356) = v853 + 1;
        uint64_t v861 = *(void *)(v1178 + 40);
        *(void *)v1200 = 0;
        *(void *)&v1200[8] = 0;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        *(void *)&v1207[8] = 0;
        *(void *)&v1207[16] = 0;
        *(void *)v1207 = off_1ECABC030;
        v862 = (void (**)(WGSL::AST::Identifier *__hidden))WTF::fastMalloc((WTF *)8);
        LODWORD(v1221) = 1;
        v1220 = v862;
        *v862 = (void (*)(WGSL::AST::Identifier *__hidden))v852;
        DWORD1(v1221) = 1;
        LOBYTE(v1223[0]) = 0;
        v845 = WGSL::AST::Builder::construct<WGSL::AST::Parameter,WGSL::SourceSpan,WGSL::AST::Identifier,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WGSL::AST::ParameterRole,void>((void *)(v861 + 312), v1200, (uint64_t)v1207, (uint64_t)v848, (uint64_t *)&v1220, (char *)v1223);
        v864 = (WTF *)v1220;
        if (v1220)
        {
          v1220 = 0;
          LODWORD(v1221) = 0;
          WTF::fastFree(v864, v863);
        }
        v865 = *(_DWORD **)&v1207[24];
        *(void *)v1207 = off_1ECABC030;
        *(void *)&v1207[24] = 0;
        uint64_t v841 = v1178;
        if (v865)
        {
          if (*v865 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v865 -= 2;
          }
        }
        WGSL::ShaderModule::append<WGSL::AST::Parameter &,std::reference_wrapper<WGSL::AST::Parameter>,0ul>(*(void **)(v1178 + 40), v1163 + 56, (uint64_t)v845);
      }
      *(_OWORD *)&v1207[8] = *(_OWORD *)(v845 + 5);
      *(void *)v1207 = off_1ECABC030;
      v866 = (_DWORD *)v845[7];
      if (v866)
      {
        int v867 = *v866;
        *(void *)&v1207[24] = v845[7];
        uint64_t v868 = *(void *)(v841 + 40);
        v1220 = 0;
        *(void *)&long long v1221 = 0;
        _DWORD *v866 = v867 + 4;
      }
      else
      {
        *(void *)&v1207[24] = 0;
        uint64_t v868 = *(void *)(v841 + 40);
        v1220 = 0;
        *(void *)&long long v1221 = 0;
      }
      *(void *)v1200 = off_1ECABC030;
      *(void *)&v1200[8] = 0;
      *(void *)&v1200[16] = 0;
      v1201 = v866;
      v869 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>((void *)(v868 + 312), &v1220, (uint64_t)v1200);
      v870 = v1201;
      *(void *)v1200 = off_1ECABC030;
      v1201 = 0;
      if (v870)
      {
        if (*v870 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v870 -= 2;
        }
      }
      uint64_t v871 = *(void *)(v841 + 40);
      v869[3] = *(void *)(v871 + 168);
      *(void *)v1200 = 0;
      *(void *)&v1200[8] = 0;
      LODWORD(v1220) = 0;
      v872 = WGSL::AST::Builder::construct<WGSL::AST::Unsigned32Literal,WGSL::SourceSpan,int,void>((void *)(v871 + 312), v1200, (int *)&v1220);
      uint64_t v873 = *(void *)(v841 + 40);
      v869[3] = *(void *)(v873 + 168);
      *(void *)v1200 = 0;
      *(void *)&v1200[8] = 0;
      LOBYTE(v1220) = 10;
      v874 = WGSL::AST::Builder::construct<WGSL::AST::BinaryExpression,WGSL::SourceSpan,WGSL::AST::Expression &,WGSL::AST::Unsigned32Literal &,WGSL::AST::BinaryOperation,void>((void *)(v873 + 312), v1200, (uint64_t)v869, (uint64_t)v872, (char *)&v1220);
      uint64_t v875 = *(void *)(v841 + 40);
      v874[3] = *(void *)(v875 + 152);
      *(void *)v1200 = 0;
      *(void *)&v1200[8] = 0;
      v1220 = 0;
      *(void *)&long long v1221 = 0;
      v877 = WGSL::AST::Builder::construct<WGSL::AST::CompoundStatement,WGSL::SourceSpan,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WTF::ReferenceWrapperVector<WGSL::AST::Statement,0ul>,void>((void *)(v875 + 312), v1200, (uint64_t *)&v1220, &v1214);
      v878 = (WTF *)v1220;
      if (v1220)
      {
        v1220 = 0;
        LODWORD(v1221) = 0;
        WTF::fastFree(v878, v876);
      }
      uint64_t v879 = *(void *)(v841 + 40);
      v880 = *(void **)(v879 + 312);
      if (*(void *)(v879 + 320) - (void)v880 <= 0x3FuLL)
      {
        uint64_t v1126 = WTF::fastMalloc((WTF *)0x4000);
        *(void *)v1200 = v1126;
        uint64_t v1128 = *(unsigned int *)(v879 + 340);
        if (v1128 == *(_DWORD *)(v879 + 336))
        {
          v1129 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v879 + 328, v1128 + 1, (unint64_t)v1200);
          uint64_t v1128 = *(unsigned int *)(v879 + 340);
          uint64_t v1130 = *(void *)(v879 + 328);
          uint64_t v1131 = *(void *)v1129;
          *(void *)v1129 = 0;
          *(void *)(v1130 + 8 * v1128) = v1131;
          v1132 = *(WTF **)v1200;
        }
        else
        {
          uint64_t v1140 = v1126;
          v1132 = 0;
          uint64_t v1141 = *(void *)(v879 + 328);
          *(void *)v1200 = 0;
          *(void *)(v1141 + 8 * v1128) = v1140;
        }
        *(_DWORD *)(v879 + 340) = v1128 + 1;
        WTF::fastFree(v1132, v1127);
        uint64_t v1142 = *(unsigned int *)(v879 + 340);
        if (!v1142)
        {
          __break(0xC471u);
          JUMPOUT(0x182563544);
        }
        v880 = *(void **)(*(void *)(v879 + 328) + 8 * v1142 - 8);
        *(void *)(v879 + 312) = v880;
        *(void *)(v879 + 320) = v880 + 2048;
      }
      void *v880 = &unk_1ECABD4A8;
      v880[1] = 0;
      v880[2] = 0;
      v880[3] = v874;
      v880[4] = v877;
      v880[5] = 0;
      v880[6] = 0;
      v880[7] = 0;
      *(void *)(v879 + 312) += 64;
      unint64_t v881 = *(unsigned int *)(v879 + 356);
      if (v881 == *(_DWORD *)(v879 + 352))
      {
        unint64_t v882 = v881 + (v881 >> 2);
        if (v882 >= 0x10) {
          unint64_t v883 = v882 + 1;
        }
        else {
          unint64_t v883 = 16;
        }
        if (v883 <= v881 + 1) {
          unint64_t v884 = v881 + 1;
        }
        else {
          unint64_t v884 = v883;
        }
        if (v884 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x182563534);
        }
        v885 = *(void **)(v879 + 344);
        v886 = (void *)WTF::fastMalloc((WTF *)(8 * v884));
        *(_DWORD *)(v879 + 352) = v884;
        *(void *)(v879 + 344) = v886;
        memcpy(v886, v885, 8 * v881);
        if (v885)
        {
          if (*(void **)(v879 + 344) == v885)
          {
            *(void *)(v879 + 344) = 0;
            *(_DWORD *)(v879 + 352) = 0;
          }
          WTF::fastFree((WTF *)v885, v887);
        }
        unint64_t v881 = *(unsigned int *)(v879 + 356);
        v888 = (void *)(*(void *)(v879 + 344) + 8 * v881);
      }
      else
      {
        v888 = (void *)(*(void *)(v879 + 344) + 8 * v881);
      }
      void *v888 = v880;
      *(_DWORD *)(v879 + 356) = v881 + 1;
      uint64_t v889 = *(void *)(v1178 + 40);
      uint64_t v890 = *(void *)(v1163 + 112);
      *(void *)v1200 = v880;
      uint64_t v891 = *(unsigned int *)(v890 + 52);
      if (v891 == *(_DWORD *)(v890 + 48))
      {
        v892 = (void *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v890 + 40, v891 + 1, (unint64_t)v1200);
        LODWORD(v891) = *(_DWORD *)(v890 + 52);
      }
      else
      {
        v892 = v1200;
      }
      v893 = (void *)(*(void *)(v890 + 40) + 8 * v826);
      memmove(v893 + 1, v893, 8 * v891 - 8 * v826);
      void *v893 = *v892;
      ++*(_DWORD *)(v890 + 52);
      v894 = (void *)(v889 + 400);
      unint64_t v895 = *(unsigned int *)(v889 + 412);
      if (v895 == *(_DWORD *)(v889 + 408))
      {
        unint64_t v896 = v895 + (v895 >> 2);
        if (v896 >= 0x10) {
          unint64_t v897 = v896 + 1;
        }
        else {
          unint64_t v897 = 16;
        }
        if (v897 <= v895 + 1) {
          unint64_t v898 = v895 + 1;
        }
        else {
          unint64_t v898 = v897;
        }
        WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v894, v898);
        unint64_t v895 = *(unsigned int *)(v889 + 412);
        v899 = (void *)(*(void *)(v889 + 400) + 32 * v895);
      }
      else
      {
        v899 = (void *)(*v894 + 32 * v895);
      }
      uint64_t v35 = v1178;
      void *v899 = &unk_1ECABD1C0;
      v899[1] = v890 + 40;
      v899[2] = v826;
      v899[3] = v899;
      *(_DWORD *)(v889 + 412) = v895 + 1;
      v900 = *(_DWORD **)&v1207[24];
      *(void *)v1207 = off_1ECABC030;
      *(void *)&v1207[24] = 0;
      if (v900)
      {
        if (*v900 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v900 -= 2;
        }
      }
    }
    uint64_t result = v1214;
    if (v1214)
    {
      uint64_t v1214 = 0;
      LODWORD(v1215) = 0;
      uint64_t result = WTF::fastFree((WTF *)result, v532);
    }
  }
  int8x16x2_t v146 = v1197;
  if (v1199)
  {
    uint64_t v901 = 8 * v1199;
    v902 = v1197;
    do
    {
      if (*(void *)v902)
      {
        uint64_t v904 = *(void *)(*(void *)v902 + 16);
        if (v904)
        {
          if (*(unsigned __int16 *)(v904 + 152) >= 0x100u && *(_WORD *)(v904 + 152) == 5)
          {
            uint64_t result = *(void *)(v904 + 144);
            if (result)
            {
              uint64_t result = WGSL::Type::size((WGSL::Type *)result);
              uint64_t v903 = (result + 15) & 0xFFFFFFF0;
            }
            else
            {
              uint64_t v903 = 0;
            }
            *(void *)(*(void *)(v35 + 128) + 80) += v903;
          }
        }
      }
      v902 = (WTF *)((char *)v902 + 8);
      v901 -= 8;
    }
    while (v901);
  }
  *(unsigned char *)a4 = 0;
  *(unsigned char *)(a4 + 24) = 0;
  int v324 = v1195;
  if (v1195 != -1) {
LABEL_1368:
  }
    uint64_t result = ((uint64_t (*)(unsigned char *, unsigned int **))off_1ECABD190[v324])(v1207, &v1193);
  if (v146)
  {
    v1197 = 0;
    unsigned int v1198 = 0;
    uint64_t result = WTF::fastFree(v146, v532);
  }
  uint64_t v906 = (uint64_t)v1196;
  if (v1196)
  {
    uint64_t v907 = *(v1196 - 1);
    if (v907)
    {
      v908 = v1196 + 2;
      do
      {
        if (*((_DWORD *)v908 - 2) != -2 && *v908) {
          WTF::fastFree((WTF *)(*v908 - 16), v532);
        }
        v908 += 2;
        --v907;
      }
      while (v907);
    }
    uint64_t result = WTF::fastFree((WTF *)(v906 - 16), v532);
  }
  int v143 = v1219;
  if (v1219 != -1) {
    return ((uint64_t (*)(unsigned char *, _DWORD **))off_1ECABD1A0[v143])(v1207, &v1217);
  }
  return result;
}

uint64_t WGSL::RewriteGlobalVariables::visitCallee(WGSL::CallGraph::Callee const&)::$_1::operator()(uint64_t result, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *(void **)result;
  uint64_t v4 = *(WTF::StringImpl ***)(*(void *)result + 96);
  uint64_t v171 = result;
  unsigned int v172 = *(void **)result;
  if (v4)
  {
    if (*(_DWORD *)(*(void *)(result + 8) + 20))
    {
      while (1)
      {
        uint64_t v5 = *(void *)(v171 + 8);
        uint64_t v6 = *(unsigned int *)(v5 + 20);
        if (v6) {
          break;
        }
LABEL_4:
        uint64_t v4 = (WTF::StringImpl **)v4[2];
        if (!v4) {
          goto LABEL_123;
        }
      }
      uint64_t v7 = *(void *)(v5 + 8);
      uint64_t v173 = v7 + 16 * v6;
      while (1)
      {
        uint64_t v8 = v3[6];
        if (!v8)
        {
LABEL_259:
          __break(0xC471u);
          JUMPOUT(0x1825646C8);
        }
        int v9 = *(_DWORD *)(v8 - 8);
        unsigned int v10 = *((_DWORD *)*v4 + 4);
        if (v10 < 0x100) {
          unsigned int v11 = WTF::StringImpl::hashSlowCase(*v4);
        }
        else {
          unsigned int v11 = v10 >> 8;
        }
        for (i = 0; ; unsigned int v11 = i + v13)
        {
          uint64_t v13 = v11 & v9;
          uint64_t v14 = *(WTF **)(v8 + 32 * v13);
          if (v14 == (WTF *)-1) {
            goto LABEL_15;
          }
          if (!v14) {
            break;
          }
          if (WTF::equal(v14, *v4, a3))
          {
            uint64_t v15 = v8 + 32 * v13;
            uint64_t v16 = v3[6];
            if (v16)
            {
              uint64_t v17 = *(unsigned int *)(v16 - 4);
              goto LABEL_23;
            }
            goto LABEL_24;
          }
LABEL_15:
          ++i;
        }
        uint64_t v16 = v3[6];
        if (!v16) {
          goto LABEL_259;
        }
        uint64_t v17 = *(unsigned int *)(v16 - 4);
        uint64_t v15 = v16 + 32 * v17;
LABEL_23:
        if (v15 == v16 + 32 * v17) {
          goto LABEL_259;
        }
LABEL_24:
        uint64_t v18 = v3[5];
        uint64_t v19 = *v4;
        if (*v4) {
          *(_DWORD *)v19 += 2;
        }
        long long v180 = 0uLL;
        uint64_t v179 = off_1ECABC030;
        uint64_t v181 = v19;
        uint64_t v20 = *(void *)(v18 + 312);
        if ((unint64_t)(*(void *)(v18 + 320) - v20) <= 0x5F)
        {
          uint64_t v82 = WTF::fastMalloc((WTF *)0x4000);
          *(void *)&long long v178 = v82;
          uint64_t v84 = *(unsigned int *)(v18 + 340);
          if (v84 == *(_DWORD *)(v18 + 336))
          {
            uint64_t v85 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 328, v84 + 1, (unint64_t)&v178);
            uint64_t v84 = *(unsigned int *)(v18 + 340);
            uint64_t v86 = *(void *)(v18 + 328);
            uint64_t v87 = *(void *)v85;
            *(void *)uint64_t v85 = 0;
            *(void *)(v86 + 8 * v84) = v87;
            int v88 = (WTF *)v178;
          }
          else
          {
            uint64_t v89 = v82;
            int v88 = 0;
            uint64_t v90 = *(void *)(v18 + 328);
            *(void *)&long long v178 = 0;
            *(void *)(v90 + 8 * v84) = v89;
          }
          *(_DWORD *)(v18 + 340) = v84 + 1;
          WTF::fastFree(v88, v83);
          uint64_t v91 = *(unsigned int *)(v18 + 340);
          if (!v91)
          {
            __break(0xC471u);
            JUMPOUT(0x182564714);
          }
          uint64_t v20 = *(void *)(*(void *)(v18 + 328) + 8 * v91 - 8);
          *(void *)(v18 + 312) = v20;
          *(void *)(v18 + 320) = v20 + 0x4000;
        }
        *(unsigned char *)(v20 + 56) = 0;
        *(void *)(v20 + 16) = 0;
        *(void *)(v20 + 24) = 0;
        *(unsigned char *)(v20 + 32) = 0;
        *(void *)uint64_t v20 = off_1ECABBFB8;
        *(void *)(v20 + 8) = 0;
        *(_OWORD *)(v20 + 72) = v180;
        *(void *)(v20 + 64) = off_1ECABC030;
        uint64_t v21 = v181;
        uint64_t v181 = 0;
        *(void *)(v20 + 88) = v21;
        *(void *)(v18 + 312) += 96;
        unint64_t v22 = *(unsigned int *)(v18 + 356);
        if (v22 == *(_DWORD *)(v18 + 352))
        {
          unint64_t v23 = v22 + (v22 >> 2);
          if (v23 >= 0x10) {
            unint64_t v24 = v23 + 1;
          }
          else {
            unint64_t v24 = 16;
          }
          if (v24 <= v22 + 1) {
            unint64_t v25 = v22 + 1;
          }
          else {
            unint64_t v25 = v24;
          }
          if (v25 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1825646FCLL);
          }
          int32x2_t v26 = *(void **)(v18 + 344);
          int8x8_t v27 = (void *)WTF::fastMalloc((WTF *)(8 * v25));
          *(_DWORD *)(v18 + 352) = v25;
          *(void *)(v18 + 344) = v27;
          memcpy(v27, v26, 8 * v22);
          if (v26)
          {
            if (*(void **)(v18 + 344) == v26)
            {
              *(void *)(v18 + 344) = 0;
              *(_DWORD *)(v18 + 352) = 0;
            }
            WTF::fastFree((WTF *)v26, v28);
          }
          unint64_t v22 = *(unsigned int *)(v18 + 356);
          int v29 = (void *)(*(void *)(v18 + 344) + 8 * v22);
        }
        else
        {
          int v29 = (void *)(*(void *)(v18 + 344) + 8 * v22);
        }
        *int v29 = v20;
        *(_DWORD *)(v18 + 356) = v22 + 1;
        uint64_t result = (uint64_t)v181;
        uint64_t v179 = off_1ECABC030;
        uint64_t v181 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = WTF::StringImpl::destroy();
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
        *(void *)(v20 + 24) = *(void *)(*(void *)(v15 + 24) + 144);
        uint64_t v30 = v3[5];
        uint64_t v31 = *(void *)(v7 + 8);
        uint64_t v32 = (void **)(v31 + 72);
        unint64_t v33 = *(unsigned int *)(v31 + 84);
        if (v33 == *(_DWORD *)(v31 + 80))
        {
          unint64_t v34 = v33 + (v33 >> 2);
          if (v34 >= 0x10) {
            unint64_t v35 = v34 + 1;
          }
          else {
            unint64_t v35 = 16;
          }
          if (v35 <= v33 + 1) {
            unint64_t v36 = v33 + 1;
          }
          else {
            unint64_t v36 = v35;
          }
          if (v36 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x182564704);
          }
          uint64_t v37 = *v32;
          unsigned int v38 = (void *)WTF::fastMalloc((WTF *)(8 * v36));
          *(_DWORD *)(v31 + 80) = v36;
          *(void *)(v31 + 72) = v38;
          uint64_t result = (uint64_t)memcpy(v38, v37, 8 * v33);
          if (v37)
          {
            if (*v32 == v37)
            {
              *(void *)(v31 + 72) = 0;
              *(_DWORD *)(v31 + 80) = 0;
            }
            uint64_t result = WTF::fastFree((WTF *)v37, v39);
          }
          unint64_t v33 = *(unsigned int *)(v31 + 84);
          int v40 = (void *)(*(void *)(v31 + 72) + 8 * v33);
        }
        else
        {
          int v40 = (char *)*v32 + 8 * v33;
        }
        *int v40 = v20;
        *(_DWORD *)(v31 + 84) = v33 + 1;
        unint64_t v41 = *(unsigned int *)(v30 + 412);
        if (v41 == *(_DWORD *)(v30 + 408))
        {
          unint64_t v42 = v41 + (v41 >> 2);
          if (v42 >= 0x10) {
            unint64_t v43 = v42 + 1;
          }
          else {
            unint64_t v43 = 16;
          }
          if (v43 <= v41 + 1) {
            unint64_t v44 = v41 + 1;
          }
          else {
            unint64_t v44 = v43;
          }
          if (v44 >> 27)
          {
            __break(0xC471u);
            JUMPOUT(0x18256470CLL);
          }
          int v45 = *(WTF **)(v30 + 400);
          uint64_t result = WTF::fastMalloc((WTF *)(32 * v44));
          int v47 = (WTF *)result;
          *(_DWORD *)(v30 + 408) = v44;
          *(void *)(v30 + 400) = result;
          if (v41)
          {
            uint64_t v48 = 32 * v41;
            uint64_t v49 = v45;
            uint64_t v50 = v45;
            while (1)
            {
              uint64_t v51 = (WTF *)*((void *)v50 + 3);
              if (!v51) {
                break;
              }
              if (v50 == v51)
              {
                *((void *)v47 + 3) = v47;
                (*(void (**)(void, WTF *))(**((void **)v50 + 3) + 24))(*((void *)v50 + 3), v47);
                uint64_t result = *((void *)v50 + 3);
                if (v50 != (WTF *)result) {
                  goto LABEL_76;
                }
LABEL_74:
                uint64_t result = (*(uint64_t (**)(WTF *))(*(void *)v50 + 32))(v50);
                goto LABEL_70;
              }
              *((void *)v47 + 3) = v51;
              *((void *)v50 + 3) = 0;
LABEL_70:
              int v47 = (WTF *)((char *)v47 + 32);
              uint64_t v50 = (WTF *)((char *)v50 + 32);
              uint64_t v49 = (WTF *)((char *)v49 + 32);
              v48 -= 32;
              if (!v48)
              {
                int v47 = *(WTF **)(v30 + 400);
                uint64_t v3 = v172;
                goto LABEL_80;
              }
            }
            *((void *)v47 + 3) = 0;
            uint64_t result = *((void *)v50 + 3);
            if (v50 != (WTF *)result)
            {
LABEL_76:
              if (result) {
                uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
              }
              goto LABEL_70;
            }
            goto LABEL_74;
          }
LABEL_80:
          if (v45)
          {
            if (v47 == v45)
            {
              *(void *)(v30 + 400) = 0;
              *(_DWORD *)(v30 + 408) = 0;
            }
            uint64_t result = WTF::fastFree(v45, v46);
            int v47 = *(WTF **)(v30 + 400);
          }
          unint64_t v41 = *(unsigned int *)(v30 + 412);
          unint64_t v52 = (void *)((char *)v47 + 32 * v41);
        }
        else
        {
          unint64_t v52 = (void *)(*(void *)(v30 + 400) + 32 * v41);
        }
        *unint64_t v52 = &unk_1ECABCE30;
        v52[1] = v32;
        v52[3] = v52;
        *(_DWORD *)(v30 + 412) = v41 + 1;
        uint64_t v53 = v3[31];
        if (v53
          || (uint64_t result = WTF::fastZeroedMalloc((WTF *)0x50),
              v3[31] = result + 16,
              *(_DWORD *)(result + 12) = 8,
              *(_DWORD *)(v3[31] - 8) = 7,
              *(_DWORD *)(v3[31] - 16) = 0,
              *(_DWORD *)(v3[31] - 12) = 0,
              (uint64_t v53 = v3[31]) != 0))
        {
          int v54 = *(_DWORD *)(v53 - 8);
        }
        else
        {
          int v54 = 0;
        }
        unint64_t v55 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
        unint64_t v56 = 9 * ((v55 + ~(v55 << 13)) ^ ((v55 + ~(v55 << 13)) >> 8));
        unint64_t v57 = (v56 ^ (v56 >> 15)) + ~((v56 ^ (v56 >> 15)) << 27);
        unsigned int v58 = v54 & ((v57 >> 31) ^ v57);
        unsigned int v59 = (void *)(v53 + 8 * v58);
        uint64_t v60 = *v59;
        if (*v59)
        {
          unint64_t v61 = 0;
          int v62 = 1;
          while (v60 != v20)
          {
            if (v60 == -1) {
              unint64_t v61 = v59;
            }
            unsigned int v58 = (v58 + v62) & v54;
            unsigned int v59 = (void *)(v53 + 8 * v58);
            uint64_t v60 = *v59;
            ++v62;
            if (!*v59)
            {
              if (v61)
              {
                *unint64_t v61 = 0;
                --*(_DWORD *)(v3[31] - 16);
                unsigned int v59 = v61;
              }
              goto LABEL_96;
            }
          }
          goto LABEL_9;
        }
LABEL_96:
        *unsigned int v59 = v20;
        uint64_t v63 = v3[31];
        if (v63)
        {
          ++*(_DWORD *)(v63 - 12);
          uint64_t v64 = v3[31];
          if (v64) {
            goto LABEL_98;
          }
        }
        else
        {
          MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
          uint64_t v64 = v3[31];
          if (v64)
          {
LABEL_98:
            uint64_t v65 = (WTF *)(v64 - 16);
            uint64_t v66 = (*(_DWORD *)(v64 - 16) + *(_DWORD *)(v64 - 12));
            unint64_t v67 = *(unsigned int *)(v64 - 4);
            if (v67 > 0x400) {
              goto LABEL_104;
            }
            goto LABEL_99;
          }
        }
        uint64_t v65 = (WTF *)(v64 - 16);
        uint64_t v66 = *(unsigned int *)(v64 - 16);
        unint64_t v67 = *(unsigned int *)(v64 - 4);
        if (v67 > 0x400)
        {
LABEL_104:
          if (v67 <= 2 * v66) {
            goto LABEL_105;
          }
          goto LABEL_9;
        }
LABEL_99:
        if (3 * v67 <= 4 * v66)
        {
          if (v67)
          {
LABEL_105:
            int v68 = *(_DWORD *)(v64 - 12);
            unsigned int v69 = v67 << (6 * v68 >= (2 * v67));
          }
          else
          {
            int v68 = *(_DWORD *)(v64 - 12);
            unsigned int v69 = 8;
          }
          uint64_t result = WTF::fastZeroedMalloc((WTF *)(8 * v69 + 16));
          v3[31] = result + 16;
          *(_DWORD *)(result + 12) = v69;
          *(_DWORD *)(v3[31] - 8) = v69 - 1;
          *(_DWORD *)(v3[31] - 16) = 0;
          *(_DWORD *)(v3[31] - 12) = v68;
          if (!v67) {
            goto LABEL_8;
          }
          for (uint64_t j = 0; j != v67; ++j)
          {
            uint64_t v72 = *(void *)(v64 + 8 * j);
            if ((unint64_t)(v72 + 1) >= 2)
            {
              uint64_t v73 = v3[31];
              if (v73) {
                int v74 = *(_DWORD *)(v73 - 8);
              }
              else {
                int v74 = 0;
              }
              unint64_t v75 = (~(v72 << 32) + v72) ^ ((unint64_t)(~(v72 << 32) + v72) >> 22);
              unint64_t v76 = 9 * ((v75 + ~(v75 << 13)) ^ ((v75 + ~(v75 << 13)) >> 8));
              unint64_t v77 = (v76 ^ (v76 >> 15)) + ~((v76 ^ (v76 >> 15)) << 27);
              unsigned int v78 = v74 & ((v77 >> 31) ^ v77);
              int v79 = 1;
              do
              {
                unsigned int v80 = v78;
                uint64_t v81 = *(void *)(v73 + 8 * v78);
                unsigned int v78 = (v78 + v79++) & v74;
              }
              while (v81);
              *(void *)(v73 + 8 * v80) = v72;
            }
          }
          if (v64) {
LABEL_8:
          }
            uint64_t result = WTF::fastFree(v65, v70);
        }
LABEL_9:
        v7 += 16;
        if (v7 == v173) {
          goto LABEL_4;
        }
      }
    }
    do
      uint64_t v4 = (WTF::StringImpl **)v4[2];
    while (v4);
  }
LABEL_123:
  uint64_t v92 = v3[14];
  int v175 = v3 + 14;
  if (v92)
  {
    unsigned int v93 = *(_DWORD *)(v92 - 8);
    uint64_t v94 = **(void **)(v171 + 8);
    unint64_t v95 = (~(v94 << 32) + v94) ^ ((unint64_t)(~(v94 << 32) + v94) >> 22);
    unint64_t v96 = 9 * ((v95 + ~(v95 << 13)) ^ ((v95 + ~(v95 << 13)) >> 8));
    unint64_t v97 = (v96 ^ (v96 >> 15)) + ~((v96 ^ (v96 >> 15)) << 27);
    uint64_t v98 = v93 & ((v97 >> 31) ^ v97);
    uint64_t v99 = *(void *)(v92 + 32 * v98);
    if (v99 != v94)
    {
      int v100 = 1;
      while (v99)
      {
        uint64_t v98 = (v98 + v100) & v93;
        uint64_t v99 = *(void *)(v92 + 32 * v98);
        ++v100;
        if (v99 == v94) {
          goto LABEL_128;
        }
      }
      return result;
    }
LABEL_128:
    if (v98 == *(_DWORD *)(v92 - 4)) {
      return result;
    }
    uint64_t v101 = *(void *)(v92 + 32 * v98 + 8);
    if (!v101 || !*(_DWORD *)(v101 - 12)) {
      return result;
    }
    uint64_t v102 = (void *)(v3[5] + 312);
    long long v178 = 0uLL;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    unsigned int v103 = v179;
    uint64_t v179 = off_1ECABC030;
    long long v180 = 0uLL;
    uint64_t v181 = (WTF::StringImpl *)v103;
    uint64_t v105 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v102, &v178, (uint64_t)&v179);
    uint64_t result = (uint64_t)v181;
    uint64_t v179 = off_1ECABC030;
    uint64_t v181 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = WTF::StringImpl::destroy();
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    v105[3] = *(void *)(v3[5] + 168);
    uint64_t v170 = *(void *)(v92 + 32 * v98 + 16);
    if (!v170) {
      return result;
    }
LABEL_140:
    uint64_t v106 = *(void *)(v171 + 8);
    unint64_t v107 = *(unsigned int *)(*(void *)v106 + 68);
    if (v107)
    {
      uint64_t v108 = 0;
      uint64_t v109 = *(void *)(*(void *)v106 + 56);
      uint64_t v110 = 8 * v107;
      while (1)
      {
        uint64_t result = WTF::equal(*(WTF **)(*(void *)(v109 + 8 * v108) + 56), *(const WTF::StringImpl **)v170, v104);
        if (result) {
          break;
        }
        ++v108;
        v110 -= 8;
        if (!v110) {
          goto LABEL_148;
        }
      }
      unint64_t v107 = v108;
LABEL_148:
      uint64_t v106 = *(void *)(v171 + 8);
      uint64_t v111 = *(unsigned int *)(v106 + 20);
      if (!v111) {
        goto LABEL_139;
      }
    }
    else
    {
      unint64_t v107 = 0;
      uint64_t v111 = *(unsigned int *)(v106 + 20);
      if (!v111) {
        goto LABEL_139;
      }
    }
    int v112 = *(uint64_t **)(v106 + 8);
    uint16x8_t v174 = &v112[2 * v111];
LABEL_152:
    uint64_t v113 = v112[1];
    if (*(unsigned int *)(v113 + 84) <= v107)
    {
      __break(0xC471u);
      JUMPOUT(0x182564728);
    }
    uint64_t v114 = (uint64_t *)(*(void *)(v113 + 72) + 8 * v107);
LABEL_155:
    uint64_t v115 = *v114;
    while (1)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v115 + 16))(v115) == 23)
      {
        uint64_t v114 = (uint64_t *)(v115 + 64);
        goto LABEL_155;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v115 + 16))(v115) == 26)
      {
        uint64_t v114 = (uint64_t *)(v115 + 64);
        goto LABEL_155;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v115 + 16))(v115) != 21)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v115 + 16))(v115) != 22)
        {
LABEL_261:
          __break(0xC471u);
          JUMPOUT(0x1825646ECLL);
        }
        uint64_t v179 = 0;
        long long v180 = 0uLL;
        WTF::HashMap<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::HashTableTraits>::add<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>((uint64_t *)&v178, v175, v112, (long long *)&v179);
        uint64_t v124 = (WTF *)v180;
        while (v124)
        {
          uint64_t v130 = v124;
          uint64_t v124 = (WTF *)*((void *)v124 + 2);
          uint64_t v131 = *(_DWORD **)v130;
          *(void *)uint64_t v130 = 0;
          if (v131)
          {
            if (*v131 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v131 -= 2;
            }
          }
          WTF::fastFree(v130, v123);
        }
        if (v179) {
          WTF::fastFree((WTF *)(v179 - 2), v123);
        }
        WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add((uint64_t)&v179, (uint64_t *)(v178 + 8), (const WTF::StringImpl **)(v115 + 88));
        uint64_t v125 = *(void *)(v115 + 88);
        if (!v125)
        {
          unsigned int v176 = 0;
          int v128 = 12;
          goto LABEL_177;
        }
        int v126 = *(_DWORD *)(v125 + 4);
        *(_DWORD *)v125 += 2;
        unsigned int v176 = (_DWORD *)v125;
        if (v126 < 0 || (BOOL v127 = __OFADD__(v126, 12), v128 = v126 + 12, v127))
        {
LABEL_267:
          unsigned int v177 = 0;
LABEL_268:
          __break(0xC471u);
          JUMPOUT(0x182564720);
        }
LABEL_177:
        if (__OFADD__(v128, 2)) {
          goto LABEL_267;
        }
        BOOL v129 = !v125 || (*(unsigned char *)(v125 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v128 + 2), v129, (int8x16_t *)"__", 2u, v125, (int8x16_t *)"_ArrayLength", 0xCu, &v177);
        char v132 = v177;
        if (!v177) {
          goto LABEL_268;
        }
        if (!v176) {
          goto LABEL_191;
        }
        if (*v176 == 2)
        {
          WTF::StringImpl::destroy();
          char v132 = v177;
          uint64_t v133 = v3[5];
          uint64_t v134 = (WGSL::AST::Builder *)(v133 + 312);
          if (v177) {
            goto LABEL_193;
          }
        }
        else
        {
          *v176 -= 2;
LABEL_191:
          uint64_t v133 = v3[5];
          uint64_t v134 = (WGSL::AST::Builder *)(v133 + 312);
LABEL_193:
          *(_DWORD *)v132 += 2;
        }
        long long v180 = 0uLL;
        uint64_t v179 = off_1ECABC030;
        uint64_t v181 = v132;
        uint64_t v135 = *(void *)(v133 + 312);
        if ((unint64_t)(*(void *)(v133 + 320) - v135) <= 0x5F)
        {
          WGSL::AST::Builder::allocateArena(v134);
          uint64_t v135 = *(void *)v134;
        }
        *(unsigned char *)(v135 + 56) = 0;
        *(void *)(v135 + 16) = 0;
        *(void *)(v135 + 24) = 0;
        *(unsigned char *)(v135 + 32) = 0;
        *(void *)uint64_t v135 = off_1ECABBFB8;
        *(void *)(v135 + 8) = 0;
        *(_OWORD *)(v135 + 72) = v180;
        *(void *)(v135 + 64) = off_1ECABC030;
        uint64_t v136 = v181;
        uint64_t v181 = 0;
        *(void *)(v135 + 88) = v136;
        *(void *)v134 += 96;
        unint64_t v137 = *(unsigned int *)(v133 + 356);
        if (v137 == *(_DWORD *)(v133 + 352))
        {
          unint64_t v138 = v137 + (v137 >> 2);
          if (v138 >= 0x10) {
            unint64_t v139 = v138 + 1;
          }
          else {
            unint64_t v139 = 16;
          }
          if (v139 <= v137 + 1) {
            unint64_t v140 = v137 + 1;
          }
          else {
            unint64_t v140 = v139;
          }
          if (v140 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x182564730);
          }
          unsigned int v141 = *(void **)(v133 + 344);
          unint64_t v142 = (void *)WTF::fastMalloc((WTF *)(8 * v140));
          *(_DWORD *)(v133 + 352) = v140;
          *(void *)(v133 + 344) = v142;
          memcpy(v142, v141, 8 * v137);
          if (v141)
          {
            if (*(void **)(v133 + 344) == v141)
            {
              *(void *)(v133 + 344) = 0;
              *(_DWORD *)(v133 + 352) = 0;
            }
            WTF::fastFree((WTF *)v141, v143);
          }
          unint64_t v137 = *(unsigned int *)(v133 + 356);
          uint64_t v144 = (void *)(*(void *)(v133 + 344) + 8 * v137);
        }
        else
        {
          uint64_t v144 = (void *)(*(void *)(v133 + 344) + 8 * v137);
        }
        void *v144 = v135;
        *(_DWORD *)(v133 + 356) = v137 + 1;
        unsigned int v145 = v181;
        uint64_t v179 = off_1ECABC030;
        uint64_t v181 = 0;
        if (v145)
        {
          if (*(_DWORD *)v145 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *(_DWORD *)v145 -= 2;
          }
        }
        uint64_t v146 = v3[5];
        *(void *)(v135 + 24) = *(void *)(v146 + 168);
        uint64_t v147 = v112[1];
        uint64_t v148 = (void **)(v147 + 72);
        unint64_t v149 = *(unsigned int *)(v147 + 84);
        if (v149 == *(_DWORD *)(v147 + 80))
        {
          unint64_t v150 = v149 + (v149 >> 2);
          if (v150 >= 0x10) {
            unint64_t v151 = v150 + 1;
          }
          else {
            unint64_t v151 = 16;
          }
          if (v151 <= v149 + 1) {
            unint64_t v152 = v149 + 1;
          }
          else {
            unint64_t v152 = v151;
          }
          if (v152 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x182564738);
          }
          int v153 = *v148;
          unsigned int v154 = (void *)WTF::fastMalloc((WTF *)(8 * v152));
          *(_DWORD *)(v147 + 80) = v152;
          *(void *)(v147 + 72) = v154;
          memcpy(v154, v153, 8 * v149);
          if (v153)
          {
            if (*v148 == v153)
            {
              *(void *)(v147 + 72) = 0;
              *(_DWORD *)(v147 + 80) = 0;
            }
            WTF::fastFree((WTF *)v153, v155);
          }
          unint64_t v149 = *(unsigned int *)(v147 + 84);
          int v156 = (void *)(*(void *)(v147 + 72) + 8 * v149);
        }
        else
        {
          int v156 = (char *)*v148 + 8 * v149;
        }
        *int v156 = v135;
        *(_DWORD *)(v147 + 84) = v149 + 1;
        unint64_t v157 = *(unsigned int *)(v146 + 412);
        if (v157 != *(_DWORD *)(v146 + 408))
        {
          uint64_t v169 = (void *)(*(void *)(v146 + 400) + 32 * v157);
          goto LABEL_254;
        }
        unint64_t v158 = v157 + (v157 >> 2);
        if (v158 >= 0x10) {
          unint64_t v159 = v158 + 1;
        }
        else {
          unint64_t v159 = 16;
        }
        if (v159 <= v157 + 1) {
          unint64_t v160 = v157 + 1;
        }
        else {
          unint64_t v160 = v159;
        }
        if (v160 >> 27)
        {
LABEL_272:
          __break(0xC471u);
          JUMPOUT(0x1825646A8);
        }
        uint64_t v161 = *(WTF **)(v146 + 400);
        uint64_t v163 = WTF::fastMalloc((WTF *)(32 * v160));
        *(_DWORD *)(v146 + 408) = v160;
        *(void *)(v146 + 400) = v163;
        if (!v157) {
          goto LABEL_249;
        }
        uint64_t v164 = 32 * v157;
        BOOL v165 = v161;
        int v166 = v161;
        while (2)
        {
          uint64_t v167 = (WTF *)*((void *)v166 + 3);
          if (v167)
          {
            if (v166 == v167)
            {
              *(void *)(v163 + 24) = v163;
              (*(void (**)(void, uint64_t))(**((void **)v166 + 3) + 24))(*((void *)v166 + 3), v163);
              int v168 = (WTF *)*((void *)v166 + 3);
              if (v166 == v168) {
                goto LABEL_243;
              }
LABEL_245:
              if (v168) {
                (*(void (**)(WTF *))(*(void *)v168 + 40))(v168);
              }
            }
            else
            {
              *(void *)(v163 + 24) = v167;
              *((void *)v166 + 3) = 0;
            }
          }
          else
          {
            *(void *)(v163 + 24) = 0;
            int v168 = (WTF *)*((void *)v166 + 3);
            if (v166 != v168) {
              goto LABEL_245;
            }
LABEL_243:
            (*(void (**)(WTF *))(*(void *)v166 + 32))(v166);
          }
          v163 += 32;
          int v166 = (WTF *)((char *)v166 + 32);
          BOOL v165 = (WTF *)((char *)v165 + 32);
          v164 -= 32;
          if (v164) {
            continue;
          }
          break;
        }
        uint64_t v163 = *(void *)(v146 + 400);
LABEL_249:
        if (v161)
        {
          if ((WTF *)v163 == v161)
          {
            *(void *)(v146 + 400) = 0;
            *(_DWORD *)(v146 + 408) = 0;
          }
          WTF::fastFree(v161, v162);
          uint64_t v163 = *(void *)(v146 + 400);
        }
        unint64_t v157 = *(unsigned int *)(v146 + 412);
        uint64_t v169 = (void *)(v163 + 32 * v157);
LABEL_254:
        *uint64_t v169 = &unk_1ECABCE30;
        v169[1] = v148;
        v169[3] = v169;
        *(_DWORD *)(v146 + 412) = v157 + 1;
        uint64_t result = (uint64_t)v177;
        unsigned int v177 = 0;
        uint64_t v3 = v172;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = WTF::StringImpl::destroy();
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
        v112 += 2;
        if (v112 != v174) {
          goto LABEL_152;
        }
LABEL_139:
        uint64_t v170 = *(void *)(v170 + 16);
        if (!v170) {
          return result;
        }
        goto LABEL_140;
      }
      uint64_t v117 = *(void *)(v115 + 64);
      uint64_t v118 = *(uint64_t **)(v117 + 24);
      if (v118)
      {
        int v119 = *((_DWORD *)v118 + 12);
        if (v119 == 10)
        {
          uint64_t v118 = (uint64_t *)v118[1];
          if (!v118) {
            goto LABEL_165;
          }
          int v119 = *((_DWORD *)v118 + 12);
        }
        if (v119 == 11) {
          uint64_t v118 = (uint64_t *)v118[1];
        }
      }
LABEL_165:
      if (*((_DWORD *)v118 + 12) != 4)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_261;
      }
      uint64_t v120 = *v118;
      uint64_t v121 = *(unsigned int *)(*v118 + 84);
      if (!v121)
      {
        __break(0xC471u);
        JUMPOUT(0x1825646F4);
      }
      char v122 = WTF::equal(*(WTF **)(*(void *)(*(void *)(v120 + 72) + 8 * v121 - 8) + 48), *(const WTF::StringImpl **)(v115 + 96), v116);
      uint64_t v115 = v117;
      if ((v122 & 1) == 0) {
        goto LABEL_272;
      }
    }
  }
  return result;
}

_DWORD *WGSL::RewriteGlobalVariables::visit(WGSL::RewriteGlobalVariables *this, WGSL::AST::Function *a2, const WTF::StringImpl *a3)
{
  uint64_t v213 = *MEMORY[0x1E4F143B8];
  v202[0] = 0;
  v202[1] = 0;
  uint64_t v203 = 0;
  uint64_t v3 = *((void *)this + 5);
  if (!*(unsigned char *)(v3 + 392))
  {
    __break(1u);
    goto LABEL_290;
  }
  uint64_t v5 = *(void *)(v3 + 384);
  int v6 = *(_DWORD *)(v5 - 8);
  unint64_t v7 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
  unint64_t v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  unsigned int v10 = v6 & ((v9 >> 31) ^ v9);
  uint64_t v11 = v5 + 24 * v10;
  int32x2_t v12 = *(WGSL::AST::Function **)v11;
  if (*(WGSL::AST::Function **)v11 == a2)
  {
LABEL_6:
    unsigned int v195 = a2;
    unsigned int v14 = *(_DWORD *)(v11 + 20);
    if (!v14) {
      goto LABEL_255;
    }
  }
  else
  {
    int v13 = 1;
    while (v12)
    {
      unsigned int v10 = (v10 + v13) & v6;
      uint64_t v11 = v5 + 24 * v10;
      int32x2_t v12 = *(WGSL::AST::Function **)v11;
      ++v13;
      if (*(WGSL::AST::Function **)v11 == a2) {
        goto LABEL_6;
      }
    }
    uint64_t v11 = v5 + 24 * *(unsigned int *)(v5 - 4);
    unsigned int v195 = a2;
    unsigned int v14 = *(_DWORD *)(v11 + 20);
    if (!v14)
    {
LABEL_255:
      v202[0] = 0;
      v202[1] = 0;
      uint64_t v203 = 0;
      uint64_t v179 = *((void *)this + 11);
      long long v180 = (WTF *)*((void *)this + 12);
      *(_OWORD *)((char *)this + 88) = 0u;
      *((void *)this + 13) = 0;
      if (!v180) {
        goto LABEL_258;
      }
      goto LABEL_265;
    }
  }
  uint64_t v15 = *(uint64_t **)(v11 + 8);
  int v197 = &v15[3 * v14];
  unsigned int v196 = (uint64_t *)((char *)this + 120);
  do
  {
    size_t v198 = v15;
    v204[0] = this;
    v204[1] = v15;
    uint64_t v16 = *((void *)this + 15);
    uint64_t v17 = *v15;
    if (!v16) {
      goto LABEL_15;
    }
    unsigned int v18 = *(_DWORD *)(v16 - 8);
    unint64_t v19 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
    unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
    unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
    uint64_t v22 = v18 & ((v21 >> 31) ^ v21);
    uint64_t v23 = *(void *)(v16 + 32 * v22);
    if (v23 == v17)
    {
LABEL_14:
      if (v22 == *(_DWORD *)(v16 - 4)) {
        goto LABEL_15;
      }
      long long v99 = 0uLL;
      memset(v207, 0, sizeof(v207));
      uint64_t v100 = *(void *)(v16 + 32 * v22 + 16);
      if (v100)
      {
        do
        {
          WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add((uint64_t)&v210, (uint64_t *)v207, (const WTF::StringImpl **)v100);
          uint64_t v100 = *(void *)(v100 + 16);
        }
        while (v100);
        long long v99 = *(_OWORD *)v207;
        uint64_t v101 = v207[2];
      }
      else
      {
        uint64_t v101 = 0;
      }
      uint64_t v108 = (WTF *)*((void *)this + 11);
      v207[0] = v108;
      long long v109 = *((_OWORD *)this + 6);
      *(_OWORD *)((char *)this + 88) = v99;
      *((void *)this + 13) = v101;
      *(_OWORD *)&v207[1] = v109;
      uint64_t v110 = (WTF *)v109;
      if ((void)v109)
      {
        do
        {
          int v112 = v110;
          uint64_t v110 = (WTF *)*((void *)v110 + 2);
          uint64_t v113 = *(_DWORD **)v112;
          *(void *)int v112 = 0;
          if (v113)
          {
            if (*v113 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v113 -= 2;
            }
          }
          WTF::fastFree(v112, (void *)v17);
        }
        while (v110);
        uint64_t v108 = v207[0];
        int v29 = v198;
        if (!v207[0]) {
          goto LABEL_136;
        }
      }
      else
      {
        int v29 = v198;
        if (!v108)
        {
LABEL_136:
          uint64_t result = (_DWORD *)WGSL::RewriteGlobalVariables::visitCallee(WGSL::CallGraph::Callee const&)::$_1::operator()((uint64_t)v204, v17, a3);
          goto LABEL_249;
        }
      }
      WTF::fastFree((WTF *)((char *)v108 - 16), (void *)v17);
      goto LABEL_136;
    }
    int v24 = 1;
    while (v23)
    {
      uint64_t v22 = (v22 + v24) & v18;
      uint64_t v23 = *(void *)(v16 + 32 * v22);
      ++v24;
      if (v23 == v17) {
        goto LABEL_14;
      }
    }
LABEL_15:
    (*(void (**)(WGSL::RewriteGlobalVariables *, uint64_t))(*(void *)this + 48))(this, v17);
    for (int i = (WTF::StringImpl **)*((void *)this + 12); i; int i = (WTF::StringImpl **)i[2])
    {
      uint64_t v37 = *((void *)this + 6);
      if (!v37) {
        goto LABEL_305;
      }
      int v38 = *(_DWORD *)(v37 - 8);
      unsigned int v39 = *((_DWORD *)*i + 4);
      if (v39 < 0x100) {
        unsigned int v40 = WTF::StringImpl::hashSlowCase(*i);
      }
      else {
        unsigned int v40 = v39 >> 8;
      }
      for (j = 0; ; unsigned int v40 = j + v42)
      {
        uint64_t v42 = v40 & v38;
        unint64_t v43 = *(WTF **)(v37 + 32 * v42);
        if (v43 == (WTF *)-1) {
          goto LABEL_30;
        }
        if (!v43) {
          break;
        }
        if (WTF::equal(v43, *i, v26))
        {
          uint64_t v44 = v37 + 32 * v42;
          uint64_t v45 = *((void *)this + 6);
          if (v45)
          {
            uint64_t v46 = *(unsigned int *)(v45 - 4);
            goto LABEL_38;
          }
          goto LABEL_39;
        }
LABEL_30:
        ++j;
      }
      uint64_t v45 = *((void *)this + 6);
      if (!v45) {
        goto LABEL_305;
      }
      uint64_t v46 = *(unsigned int *)(v45 - 4);
      uint64_t v44 = v45 + 32 * v46;
LABEL_38:
      if (v44 == v45 + 32 * v46) {
        goto LABEL_305;
      }
LABEL_39:
      uint64_t v47 = *(void *)(v44 + 24);
      if (*(unsigned char *)(v47 + 128) == 3)
      {
        uint64_t v48 = *(void **)(v47 + 136);
        uint64_t v49 = v198;
        goto LABEL_52;
      }
      uint64_t v48 = *(void **)(v47 + 112);
      uint64_t v49 = v198;
      if (!v48)
      {
        uint64_t v50 = *(unsigned __int8 **)(v47 + 144);
        uint64_t v51 = (void *)(*((void *)this + 5) + 312);
        long long v209 = 0uLL;
        WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v210);
        WGSL::Type::dump(v50, (uint64_t)&v210);
        WTF::StringPrintStream::toString((uint64_t *)&v206, (WTF::StringPrintStream *)&v210);
        WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v210);
        v207[1] = 0;
        v207[2] = 0;
        uint64_t v52 = (uint64_t)v206;
        BOOL v206 = 0;
        v207[0] = (WTF *)off_1ECABC030;
        int v208 = (_DWORD *)v52;
        uint64_t v48 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v51, &v209, (uint64_t)v207);
        uint64_t v53 = v208;
        v207[0] = (WTF *)off_1ECABC030;
        int v208 = 0;
        if (!v53) {
          goto LABEL_45;
        }
        if (*v53 == 2)
        {
          WTF::StringImpl::destroy();
          int v54 = v206;
          BOOL v206 = 0;
          if (!v54) {
            goto LABEL_51;
          }
        }
        else
        {
          *v53 -= 2;
LABEL_45:
          int v54 = v206;
          BOOL v206 = 0;
          if (!v54)
          {
LABEL_51:
            v48[3] = v50;
            uint64_t v47 = *(void *)(v44 + 24);
            goto LABEL_52;
          }
        }
        if (*v54 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v54 -= 2;
        }
        goto LABEL_51;
      }
LABEL_52:
      if (*(unsigned char *)(v47 + 129) == 1) {
        char v55 = 3;
      }
      else {
        char v55 = 0;
      }
      uint64_t v56 = *((void *)this + 5);
      uint64_t v57 = *v49;
      unsigned int v58 = *i;
      if (*i) {
        *(_DWORD *)v58 += 2;
      }
      long long v211 = 0uLL;
      BOOL v210 = off_1ECABC030;
      uint64_t v212 = v58;
      uint64_t v59 = *(void *)(v56 + 312);
      if ((unint64_t)(*(void *)(v56 + 320) - v59) <= 0x67)
      {
        uint64_t v89 = (WTF *)WTF::fastMalloc((WTF *)0x4000);
        v207[0] = v89;
        uint64_t v91 = *(unsigned int *)(v56 + 340);
        if (v91 == *(_DWORD *)(v56 + 336))
        {
          uint64_t v92 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v56 + 328, v91 + 1, (unint64_t)v207);
          uint64_t v91 = *(unsigned int *)(v56 + 340);
          uint64_t v93 = *(void *)(v56 + 328);
          uint64_t v94 = *(void *)v92;
          *(void *)uint64_t v92 = 0;
          *(void *)(v93 + 8 * v91) = v94;
          unint64_t v95 = v207[0];
        }
        else
        {
          unint64_t v96 = v89;
          unint64_t v95 = 0;
          uint64_t v97 = *(void *)(v56 + 328);
          v207[0] = 0;
          *(void *)(v97 + 8 * v91) = v96;
        }
        *(_DWORD *)(v56 + 340) = v91 + 1;
        WTF::fastFree(v95, v90);
        uint64_t v98 = *(unsigned int *)(v56 + 340);
        if (v98)
        {
          uint64_t v59 = *(void *)(*(void *)(v56 + 328) + 8 * v98 - 8);
          *(void *)(v56 + 312) = v59;
          *(void *)(v56 + 320) = v59 + 0x4000;
          goto LABEL_58;
        }
LABEL_305:
        __break(0xC471u);
        JUMPOUT(0x182565A68);
      }
LABEL_58:
      *(void *)(v59 + 8) = 0;
      *(void *)(v59 + 16) = 0;
      *(void *)uint64_t v59 = &unk_1ECABC618;
      *(unsigned char *)(v59 + 24) = v55;
      *(_OWORD *)(v59 + 40) = v211;
      *(void *)(v59 + 32) = off_1ECABC030;
      uint64_t v60 = v212;
      uint64_t v212 = 0;
      *(void *)(v59 + 56) = v60;
      *(void *)(v59 + 64) = v48;
      *(unsigned char *)(v59 + 93) = 0;
      *(unsigned char *)(v59 + 96) = 0;
      *(unsigned char *)(v59 + 100) = 0;
      *(void *)(v59 + 72) = 0;
      *(void *)(v59 + 80) = 0;
      *(_DWORD *)(v59 + 88) = 0;
      *(void *)(v56 + 312) += 104;
      unint64_t v61 = *(unsigned int *)(v56 + 356);
      if (v61 == *(_DWORD *)(v56 + 352))
      {
        unint64_t v62 = v61 + (v61 >> 2);
        if (v62 >= 0x10) {
          unint64_t v63 = v62 + 1;
        }
        else {
          unint64_t v63 = 16;
        }
        if (v63 <= v61 + 1) {
          unint64_t v64 = v61 + 1;
        }
        else {
          unint64_t v64 = v63;
        }
        if (v64 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x182565A74);
        }
        uint64_t v65 = *(void **)(v56 + 344);
        uint64_t v66 = (void *)WTF::fastMalloc((WTF *)(8 * v64));
        *(_DWORD *)(v56 + 352) = v64;
        *(void *)(v56 + 344) = v66;
        memcpy(v66, v65, 8 * v61);
        if (v65)
        {
          if (*(void **)(v56 + 344) == v65)
          {
            *(void *)(v56 + 344) = 0;
            *(_DWORD *)(v56 + 352) = 0;
          }
          WTF::fastFree((WTF *)v65, v25);
        }
        unint64_t v61 = *(unsigned int *)(v56 + 356);
        unint64_t v67 = (void *)(*(void *)(v56 + 344) + 8 * v61);
      }
      else
      {
        unint64_t v67 = (void *)(*(void *)(v56 + 344) + 8 * v61);
      }
      int v68 = (void **)(v57 + 56);
      void *v67 = v59;
      *(_DWORD *)(v56 + 356) = v61 + 1;
      unint64_t v69 = *(unsigned int *)(v57 + 68);
      if (v69 == *(_DWORD *)(v57 + 64))
      {
        unint64_t v70 = v69 + (v69 >> 2);
        if (v70 >= 0x10) {
          unint64_t v71 = v70 + 1;
        }
        else {
          unint64_t v71 = 16;
        }
        if (v71 <= v69 + 1) {
          unint64_t v72 = v69 + 1;
        }
        else {
          unint64_t v72 = v71;
        }
        if (v72 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x182565A7CLL);
        }
        uint64_t v73 = *v68;
        int v74 = (void *)WTF::fastMalloc((WTF *)(8 * v72));
        *(_DWORD *)(v57 + 64) = v72;
        *(void *)(v57 + 56) = v74;
        memcpy(v74, v73, 8 * v69);
        if (v73)
        {
          if (*v68 == v73)
          {
            *(void *)(v57 + 56) = 0;
            *(_DWORD *)(v57 + 64) = 0;
          }
          WTF::fastFree((WTF *)v73, v25);
        }
        unint64_t v69 = *(unsigned int *)(v57 + 68);
        unint64_t v75 = (void *)(*(void *)(v57 + 56) + 8 * v69);
      }
      else
      {
        unint64_t v75 = (char *)*v68 + 8 * v69;
      }
      void *v75 = v59;
      *(_DWORD *)(v57 + 68) = v69 + 1;
      unint64_t v76 = *(unsigned int *)(v56 + 412);
      if (v76 == *(_DWORD *)(v56 + 408))
      {
        unint64_t v77 = v76 + (v76 >> 2);
        if (v77 >= 0x10) {
          unint64_t v78 = v77 + 1;
        }
        else {
          unint64_t v78 = 16;
        }
        if (v78 <= v76 + 1) {
          unint64_t v79 = v76 + 1;
        }
        else {
          unint64_t v79 = v78;
        }
        if (v79 >> 27)
        {
          __break(0xC471u);
          JUMPOUT(0x182565A84);
        }
        unsigned int v80 = *(WTF **)(v56 + 400);
        uint64_t v81 = WTF::fastMalloc((WTF *)(32 * v79));
        *(_DWORD *)(v56 + 408) = v79;
        *(void *)(v56 + 400) = v81;
        if (v76)
        {
          uint64_t v82 = 32 * v76;
          int v83 = v80;
          uint64_t v84 = v80;
          while (1)
          {
            uint64_t v85 = (WTF *)*((void *)v84 + 3);
            if (!v85) {
              break;
            }
            if (v84 == v85)
            {
              *(void *)(v81 + 24) = v81;
              (*(void (**)(void, uint64_t))(**((void **)v84 + 3) + 24))(*((void *)v84 + 3), v81);
              uint64_t v86 = (WTF *)*((void *)v84 + 3);
              if (v84 != v86) {
                goto LABEL_103;
              }
LABEL_101:
              (*(void (**)(WTF *))(*(void *)v84 + 32))(v84);
              goto LABEL_97;
            }
            *(void *)(v81 + 24) = v85;
            *((void *)v84 + 3) = 0;
LABEL_97:
            v81 += 32;
            uint64_t v84 = (WTF *)((char *)v84 + 32);
            int v83 = (WTF *)((char *)v83 + 32);
            v82 -= 32;
            if (!v82)
            {
              uint64_t v81 = *(void *)(v56 + 400);
              goto LABEL_107;
            }
          }
          *(void *)(v81 + 24) = 0;
          uint64_t v86 = (WTF *)*((void *)v84 + 3);
          if (v84 != v86)
          {
LABEL_103:
            if (v86) {
              (*(void (**)(WTF *))(*(void *)v86 + 40))(v86);
            }
            goto LABEL_97;
          }
          goto LABEL_101;
        }
LABEL_107:
        if (v80)
        {
          if ((WTF *)v81 == v80)
          {
            *(void *)(v56 + 400) = 0;
            *(_DWORD *)(v56 + 408) = 0;
          }
          WTF::fastFree(v80, v25);
          uint64_t v81 = *(void *)(v56 + 400);
        }
        unint64_t v76 = *(unsigned int *)(v56 + 412);
        uint64_t v87 = (void *)(v81 + 32 * v76);
      }
      else
      {
        uint64_t v87 = (void *)(*(void *)(v56 + 400) + 32 * v76);
      }
      void *v87 = &unk_1ECABC640;
      v87[1] = v68;
      v87[3] = v87;
      *(_DWORD *)(v56 + 412) = v76 + 1;
      int v88 = v212;
      BOOL v210 = off_1ECABC030;
      uint64_t v212 = 0;
      if (v88)
      {
        if (*v88 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v88 -= 2;
        }
      }
    }
    uint64_t v28 = *((void *)this + 14);
    int v29 = v198;
    if (!v28) {
      goto LABEL_145;
    }
    unsigned int v30 = *(_DWORD *)(v28 - 8);
    unint64_t v31 = ~(*v198 << 32) + *v198;
    unint64_t v32 = (v31 ^ (v31 >> 22)) + ~((v31 ^ (v31 >> 22)) << 13);
    unint64_t v33 = (9 * (v32 ^ (v32 >> 8))) ^ ((9 * (v32 ^ (v32 >> 8))) >> 15);
    uint64_t v34 = v30 & (((v33 + ~(v33 << 27)) >> 31) ^ (v33 + ~(v33 << 27)));
    uint64_t v35 = *(void *)(v28 + 32 * v34);
    if (v35 == *v198)
    {
LABEL_21:
      if (v34 == *(_DWORD *)(v28 - 4)) {
        goto LABEL_145;
      }
      uint64_t v102 = *(void *)(v28 + 32 * v34 + 8);
      if (!v102 || !*(_DWORD *)(v102 - 12)) {
        goto LABEL_145;
      }
      unsigned int v103 = (void *)(*((void *)this + 5) + 312);
      v207[0] = 0;
      v207[1] = 0;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      long long v211 = 0uLL;
      BOOL v210 = off_1ECABC030;
      uint64_t v212 = (_DWORD *)v209;
      uint64_t v105 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v103, v207, (uint64_t)&v210);
      uint64_t v106 = v212;
      BOOL v210 = off_1ECABC030;
      uint64_t v212 = 0;
      if (!v106) {
        goto LABEL_130;
      }
      BOOL v104 = __OFSUB__(*v106, 2);
      if (*v106 != 2)
      {
        *v106 -= 2;
LABEL_130:
        v105[3] = *(void *)(*((void *)this + 5) + 168);
        unint64_t v107 = *(uint64_t **)(v28 + 32 * v34 + 16);
        if (v107) {
          goto LABEL_162;
        }
        goto LABEL_145;
      }
      WTF::StringImpl::destroy();
      v105[3] = *(void *)(*((void *)this + 5) + 168);
      unint64_t v107 = *(uint64_t **)(v28 + 32 * v34 + 16);
      if (!v107) {
        goto LABEL_145;
      }
      while (1)
      {
LABEL_162:
        uint64_t v130 = *v107;
        if (*v107)
        {
          int v131 = *(_DWORD *)(v130 + 4);
          *(_DWORD *)v130 += 2;
          if (v131 < 0 || (BOOL v104 = __OFADD__(v131, 12), v132 = v131 + 12, v104))
          {
LABEL_303:
            BOOL v206 = 0;
LABEL_304:
            __break(0xC471u);
            JUMPOUT(0x182565A90);
          }
        }
        else
        {
          int v132 = 12;
          if (v104) {
            goto LABEL_303;
          }
        }
        uint64_t v133 = (v132 + 2);
        if (__OFADD__(v132, 2)) {
          goto LABEL_303;
        }
        if (!v130)
        {
          WTF::tryFastCompactMalloc((WTF *)(v133 + 20));
          uint64_t v134 = (uint64_t)v210;
          if (!v210) {
            goto LABEL_303;
          }
          *(_DWORD *)BOOL v210 = 2;
          *(_DWORD *)(v134 + 4) = v133;
          qmemcpy((void *)(v134 + 20), "___ArrayLength", 14);
          *(void *)(v134 + 8) = v134 + 20;
          *(_DWORD *)(v134 + 16) = 4;
          BOOL v206 = (_DWORD *)v134;
          goto LABEL_173;
        }
        if ((*(unsigned char *)(v130 + 16) & 4) == 0)
        {
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v133, 0, (int8x16_t *)"__", 2u, v130, (int8x16_t *)"_ArrayLength", 0xCu, &v206);
          uint64_t v134 = (uint64_t)v206;
          if (!v206) {
            goto LABEL_304;
          }
          int v135 = *(_DWORD *)v130 - 2;
          if (*(_DWORD *)v130 == 2)
          {
LABEL_198:
            WTF::StringImpl::destroy();
            uint64_t v134 = (uint64_t)v206;
            uint64_t v136 = (void *)*((void *)this + 5);
            uint64_t v137 = *v198 + 56;
            unint64_t v138 = v136 + 39;
            v207[0] = 0;
            v207[1] = 0;
            if (!v206) {
              goto LABEL_200;
            }
            goto LABEL_199;
          }
          goto LABEL_170;
        }
        WTF::tryFastCompactMalloc((WTF *)(v133 + 20));
        uint64_t v134 = (uint64_t)v210;
        if (!v210) {
          goto LABEL_303;
        }
        *(_DWORD *)BOOL v210 = 2;
        *(_DWORD *)(v134 + 4) = v133;
        *(_WORD *)(v134 + 20) = 24415;
        *(void *)(v134 + 8) = v134 + 20;
        *(_DWORD *)(v134 + 16) = 4;
        unint64_t v139 = (unsigned char *)(v134 + 22);
        unint64_t v140 = *(int8x16_t **)(v130 + 8);
        size_t v141 = *(unsigned int *)(v130 + 4);
        if ((*(unsigned char *)(v130 + 16) & 4) != 0)
        {
          if (v141)
          {
            if (v141 == 1) {
              *unint64_t v139 = v140->i8[0];
            }
            else {
              memcpy((void *)(v134 + 22), v140, v141);
            }
          }
        }
        else
        {
          if (v141 < 0x10)
          {
            unint64_t v142 = v134 + 22;
            unsigned int v145 = &v139[v141];
            if (v139 == &v139[v141]) {
              goto LABEL_197;
            }
          }
          else
          {
            unint64_t v142 = (unint64_t)&v139[v141 & 0xFFFFFFF0];
            int v143 = (unsigned long long *)(v134 + 22);
            do
            {
              unsigned long long v144 = (unsigned __int128)vld2q_s8(v140->i8);
              v140 += 2;
              *v143++ = v144;
            }
            while (v143 != (unsigned long long *)v142);
            unsigned int v145 = &v139[v141];
            if ((unsigned char *)v142 == &v139[v141]) {
              goto LABEL_197;
            }
          }
          size_t v146 = v134 + v141 - v142;
          unint64_t v147 = v146 + 22;
          if (v146 + 22 < 8
            || (v142 < (unint64_t)&v140[2].u64[1] + 2 * v146 + 4
              ? (BOOL v148 = (unint64_t)v140 >= v134 + v141 + 22)
              : (BOOL v148 = 1),
                !v148))
          {
            unint64_t v150 = (unsigned char *)v142;
            unint64_t v151 = v140;
            goto LABEL_194;
          }
          if (v147 >= 0x20)
          {
            unint64_t v149 = v147 & 0xFFFFFFFFFFFFFFE0;
            unint64_t v158 = v140 + 2;
            unint64_t v159 = (int8x16_t *)(v142 + 16);
            unint64_t v160 = v147 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              int8x16_t v162 = v158[-2];
              int8x16_t v161 = v158[-1];
              int8x16_t v164 = *v158;
              int8x16_t v163 = v158[1];
              v158 += 4;
              v159[-1] = vuzp1q_s8(v162, v161);
              *unint64_t v159 = vuzp1q_s8(v164, v163);
              v159 += 2;
              v160 -= 32;
            }
            while (v160);
            if (v147 == v149) {
              goto LABEL_197;
            }
            if ((v147 & 0x18) == 0)
            {
              unint64_t v151 = (int8x16_t *)((char *)v140 + 2 * v149);
              unint64_t v150 = (unsigned char *)(v142 + v149);
              do
              {
LABEL_194:
                char v152 = v151->i8[0];
                unint64_t v151 = (int8x16_t *)((char *)v151 + 2);
                *v150++ = v152;
              }
              while (v150 != v145);
              goto LABEL_197;
            }
          }
          else
          {
            unint64_t v149 = 0;
          }
          unint64_t v150 = (unsigned char *)(v142 + (v147 & 0xFFFFFFFFFFFFFFF8));
          unint64_t v151 = (int8x16_t *)((char *)v140 + 2 * (v147 & 0xFFFFFFFFFFFFFFF8));
          BOOL v165 = (int16x8_t *)((char *)v140 + 2 * v149);
          int v166 = (int8x8_t *)(v142 + v149);
          unint64_t v167 = v149 - (v147 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            int16x8_t v168 = *v165++;
            *v166++ = vmovn_s16(v168);
            v167 += 8;
          }
          while (v167);
          if (v147 != (v147 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_194;
          }
        }
LABEL_197:
        int v153 = &v139[*(unsigned int *)(v130 + 4)];
        *(void *)int v153 = *(void *)"_ArrayLength";
        *((_DWORD *)v153 + 2) = 1752459118;
        BOOL v206 = (_DWORD *)v134;
        int v135 = *(_DWORD *)v130 - 2;
        if (*(_DWORD *)v130 == 2) {
          goto LABEL_198;
        }
LABEL_170:
        *(_DWORD *)uint64_t v130 = v135;
LABEL_173:
        uint64_t v136 = (void *)*((void *)this + 5);
        uint64_t v137 = *v198 + 56;
        unint64_t v138 = v136 + 39;
        v207[0] = 0;
        v207[1] = 0;
LABEL_199:
        *(_DWORD *)v134 += 2;
LABEL_200:
        long long v211 = 0uLL;
        BOOL v210 = off_1ECABC030;
        uint64_t v212 = (_DWORD *)v134;
        long long v209 = 0uLL;
        char v205 = 0;
        unsigned int v154 = WGSL::AST::Builder::construct<WGSL::AST::Parameter,WGSL::SourceSpan,WGSL::AST::Identifier,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WGSL::AST::ParameterRole,void>(v138, v207, (uint64_t)&v210, (uint64_t)v105, (uint64_t *)&v209, &v205);
        WGSL::ShaderModule::append<WGSL::AST::Parameter &,std::reference_wrapper<WGSL::AST::Parameter>,0ul>(v136, v137, (uint64_t)v154);
        unsigned int v155 = (WTF *)v209;
        if ((void)v209)
        {
          *(void *)&long long v209 = 0;
          DWORD2(v209) = 0;
          WTF::fastFree(v155, v25);
        }
        int v156 = v212;
        BOOL v210 = off_1ECABC030;
        uint64_t v212 = 0;
        if (!v156) {
          goto LABEL_205;
        }
        BOOL v104 = __OFSUB__(*v156, 2);
        if (*v156 != 2)
        {
          *v156 -= 2;
LABEL_205:
          unint64_t v157 = v206;
          BOOL v206 = 0;
          if (v157) {
            goto LABEL_208;
          }
          goto LABEL_161;
        }
        WTF::StringImpl::destroy();
        unint64_t v157 = v206;
        BOOL v206 = 0;
        if (v157)
        {
LABEL_208:
          BOOL v104 = __OFSUB__(*v157, 2);
          if (*v157 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v157 -= 2;
          }
        }
LABEL_161:
        unint64_t v107 = (uint64_t *)v107[2];
        if (!v107) {
          goto LABEL_145;
        }
      }
    }
    int v36 = 1;
    while (v35)
    {
      uint64_t v34 = (v34 + v36) & v30;
      uint64_t v35 = *(void *)(v28 + 32 * v34);
      ++v36;
      if (v35 == *v198) {
        goto LABEL_21;
      }
    }
LABEL_145:
    uint64_t result = (_DWORD *)WGSL::RewriteGlobalVariables::visitCallee(WGSL::CallGraph::Callee const&)::$_1::operator()((uint64_t)v204, (uint64_t)v25, v26);
    uint64_t v114 = *v196;
    if (*v196
      || (uint64_t result = WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash(v196, 8u, 0), (v114 = *v196) != 0))
    {
      unsigned int v115 = *(_DWORD *)(v114 - 8);
    }
    else
    {
      unsigned int v115 = 0;
    }
    uint64_t v116 = *v198;
    unint64_t v117 = ~(*v198 << 32) + *v198;
    unint64_t v118 = (v117 ^ (v117 >> 22)) + ~((v117 ^ (v117 >> 22)) << 13);
    unint64_t v119 = (9 * (v118 ^ (v118 >> 8))) ^ ((9 * (v118 ^ (v118 >> 8))) >> 15);
    uint64_t v120 = v115 & (((v119 + ~(v119 << 27)) >> 31) ^ (v119 + ~(v119 << 27)));
    uint64_t v121 = (uint64_t *)(v114 + 32 * v120);
    uint64_t v122 = *v121;
    if (!*v121)
    {
LABEL_156:
      *uint64_t v121 = v116;
      memset(v207, 0, sizeof(v207));
      uint64_t v125 = *((void *)this + 12);
      if (v125)
      {
        do
        {
          uint64_t result = (_DWORD *)WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add((uint64_t)&v210, (uint64_t *)v207, (const WTF::StringImpl **)v125);
          uint64_t v125 = *(void *)(v125 + 16);
        }
        while (v125);
        long long v126 = *(_OWORD *)v207;
        BOOL v127 = v207[2];
        memset(v207, 0, sizeof(v207));
        uint64_t v128 = v121[1];
        BOOL v129 = (WTF *)v121[2];
        *(_OWORD *)(v121 + 1) = v126;
        v121[3] = (uint64_t)v127;
        if (!v129) {
          goto LABEL_223;
        }
      }
      else
      {
        memset(v207, 0, sizeof(v207));
        uint64_t v128 = v121[1];
        BOOL v129 = (WTF *)v121[2];
        *(_OWORD *)(v121 + 1) = 0uLL;
        v121[3] = 0;
        if (!v129) {
          goto LABEL_223;
        }
      }
      do
      {
        uint16x8_t v174 = v129;
        BOOL v129 = (WTF *)*((void *)v129 + 2);
        int v175 = *(_DWORD **)v174;
        *(void *)uint16x8_t v174 = 0;
        if (v175)
        {
          if (*v175 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v175 -= 2;
          }
        }
        uint64_t result = (_DWORD *)WTF::fastFree(v174, a2);
      }
      while (v129);
LABEL_223:
      if (v128) {
        uint64_t result = (_DWORD *)WTF::fastFree((WTF *)(v128 - 16), a2);
      }
      for (k = v207[1]; k; uint64_t result = (_DWORD *)WTF::fastFree(v176, a2))
      {
        unsigned int v176 = k;
        int k = (WTF *)*((void *)k + 2);
        unsigned int v177 = *(_DWORD **)v176;
        *(void *)unsigned int v176 = 0;
        if (v177)
        {
          if (*v177 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v177 -= 2;
          }
        }
      }
      if (v207[0]) {
        uint64_t result = (_DWORD *)WTF::fastFree((WTF *)((char *)v207[0] - 16), a2);
      }
      int v29 = v198;
      if (*v196)
      {
        ++*(_DWORD *)(*v196 - 12);
        uint64_t v170 = *v196;
        if (*v196) {
          goto LABEL_230;
        }
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        uint64_t v170 = *v196;
        if (*v196)
        {
LABEL_230:
          uint64_t v171 = (*(_DWORD *)(v170 - 16) + *(_DWORD *)(v170 - 12));
          unint64_t v172 = *(unsigned int *)(v170 - 4);
          if (v172 <= 0x400) {
            goto LABEL_231;
          }
          goto LABEL_246;
        }
      }
      uint64_t v171 = *(unsigned int *)(v170 - 16);
      unint64_t v172 = *(unsigned int *)(v170 - 4);
      if (v172 <= 0x400)
      {
LABEL_231:
        if (3 * v172 > 4 * v171) {
          goto LABEL_249;
        }
        if (!v172)
        {
          unsigned int v173 = 8;
LABEL_248:
          uint64_t result = WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash(v196, v173, v121);
          goto LABEL_249;
        }
LABEL_247:
        unsigned int v173 = v172 << (6 * *(_DWORD *)(v170 - 12) >= (2 * v172));
        goto LABEL_248;
      }
LABEL_246:
      if (v172 > 2 * v171) {
        goto LABEL_249;
      }
      goto LABEL_247;
    }
    uint64_t v123 = 0;
    int v124 = 1;
    while (v122 != v116)
    {
      if (v122 == -1) {
        uint64_t v123 = v121;
      }
      uint64_t v120 = (v120 + v124) & v115;
      uint64_t v121 = (uint64_t *)(v114 + 32 * v120);
      uint64_t v122 = *v121;
      ++v124;
      if (!*v121)
      {
        if (v123)
        {
          *(_OWORD *)uint64_t v123 = 0u;
          *((_OWORD *)v123 + 1) = 0u;
          --*(_DWORD *)(*v196 - 16);
          uint64_t v116 = *v198;
          uint64_t v121 = v123;
        }
        goto LABEL_156;
      }
    }
LABEL_249:
    if (*((unsigned char *)this + 32)) {
      goto LABEL_277;
    }
    for (uint64_t m = *((void *)this + 12); m; uint64_t m = *(void *)(m + 16))
      WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add((uint64_t)&v210, (uint64_t *)v202, (const WTF::StringImpl **)m);
    uint64_t v15 = v29 + 3;
  }
  while (v15 != v197);
  long long v181 = *(_OWORD *)v202;
  uint64_t v182 = v203;
  v202[0] = 0;
  v202[1] = 0;
  uint64_t v203 = 0;
  uint64_t v179 = *((void *)this + 11);
  long long v180 = (WTF *)*((void *)this + 12);
  *(_OWORD *)((char *)this + 88) = v181;
  *((void *)this + 13) = v182;
  if (!v180) {
    goto LABEL_258;
  }
  do
  {
LABEL_265:
    int v186 = v180;
    long long v180 = (WTF *)*((void *)v180 + 2);
    uint64_t v187 = *(_DWORD **)v186;
    *(void *)int v186 = 0;
    if (v187)
    {
      if (*v187 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v187 -= 2;
      }
    }
    WTF::fastFree(v186, a2);
  }
  while (v180);
LABEL_258:
  if (v179) {
    WTF::fastFree((WTF *)(v179 - 16), a2);
  }
  uint64_t v183 = (_DWORD **)*((void *)this + 10);
  if (v183)
  {
    *((void *)this + 10) = 0;
    uint64_t v184 = *((unsigned int *)v183 - 1);
    if (v184)
    {
      int v185 = v183;
      do
      {
        unint64_t v188 = *v185;
        if (*v185 != (_DWORD *)-1)
        {
          *int v185 = 0;
          if (v188)
          {
            if (*v188 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v188 -= 2;
            }
          }
        }
        v185 += 2;
        --v184;
      }
      while (v184);
    }
    WTF::fastFree((WTF *)(v183 - 2), a2);
  }
  *((unsigned char *)this + 256) = 0;
  *((_DWORD *)this + 65) = 0;
  v207[0] = 0;
  WTF::HashMap<WTF::String,WGSL::AST::Variable *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::add<WGSL::AST::Variable *&>((uint64_t)&v210, (uint64_t *)this + 10, (const WTF::StringImpl **)v195 + 6, v207);
  *((void *)this + 29) = v195;
  uint64_t result = WGSL::AST::Visitor::visit(this, (Function *)v195);
  *((void *)this + 29) = 0;
  if (*((unsigned char *)this + 256) || *((_DWORD *)this + 65) > 0x2000u)
  {
    WTF::String::number((WTF::String *)0x2000);
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int8x16_t *)"The combined byte size of all variables in this function exceeds ", 66, (uint64_t *)&v199, (int8x16_t *)" bytes", 7, &v210);
    uint64_t v192 = v210;
    BOOL v210 = 0;
    uint64_t v200 = v192;
    long long v201 = *(_OWORD *)((char *)v195 + 8);
    WGSL::AST::Visitor::setError((uint64_t)this, (uint64_t)&v200);
    int v193 = v200;
    uint64_t v200 = 0;
    if (!v193)
    {
LABEL_291:
      unsigned int v194 = v210;
      BOOL v210 = 0;
      if (v194)
      {
        if (*(_DWORD *)v194 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *(_DWORD *)v194 -= 2;
        }
      }
      uint64_t result = v199;
      int v199 = 0;
      if (result)
      {
        if (*result == 2) {
          uint64_t result = (_DWORD *)WTF::StringImpl::destroy();
        }
        else {
          *result -= 2;
        }
      }
      goto LABEL_277;
    }
    if (*(_DWORD *)v193 != 2)
    {
      *(_DWORD *)v193 -= 2;
      goto LABEL_291;
    }
LABEL_290:
    WTF::StringImpl::destroy();
    goto LABEL_291;
  }
LABEL_277:
  for (n = v202[1]; n; uint64_t result = (_DWORD *)WTF::fastFree(v190, a2))
  {
    uint64_t v190 = n;
    n = (WTF *)*((void *)n + 2);
    uint64_t v191 = *(_DWORD **)v190;
    *(void *)uint64_t v190 = 0;
    if (v191)
    {
      if (*v191 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v191 -= 2;
      }
    }
  }
  if (v202[0]) {
    return (_DWORD *)WTF::fastFree((WTF *)((char *)v202[0] - 16), a2);
  }
  return result;
}

uint64_t WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add(uint64_t a1, uint64_t *a2, const WTF::StringImpl **a3)
{
  uint64_t v6 = *a2;
  if (!*a2)
  {
    WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::rehash(a2, 8u, 0);
    uint64_t v6 = *a2;
    if (!*a2)
    {
      int v7 = 0;
      unint64_t v8 = *a3;
      unsigned int v9 = *((_DWORD *)*a3 + 4);
      if (v9 >= 0x100) {
        goto LABEL_4;
      }
LABEL_6:
      unsigned int v10 = WTF::StringImpl::hashSlowCase(v8);
      goto LABEL_7;
    }
  }
  int v7 = *(_DWORD *)(v6 - 8);
  unint64_t v8 = *a3;
  unsigned int v9 = *((_DWORD *)*a3 + 4);
  if (v9 < 0x100) {
    goto LABEL_6;
  }
LABEL_4:
  unsigned int v10 = v9 >> 8;
LABEL_7:
  uint64_t v11 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v13 = v10 & v7;
    unsigned int v14 = (WTF::StringImpl ***)(v6 + 8 * (v10 & v7));
    uint64_t v15 = *v14;
    if (*v14 == (WTF::StringImpl **)-1)
    {
      uint64_t v11 = (WTF::StringImpl ***)(v6 + 8 * v13);
      goto LABEL_9;
    }
    if (!v15) {
      break;
    }
    uint64_t result = WTF::equal(*v15, *a3, (const WTF::StringImpl *)a3);
    if (result)
    {
      char v17 = 0;
      goto LABEL_33;
    }
LABEL_9:
    unsigned int v10 = i + v13;
  }
  if (v11)
  {
    *uint64_t v11 = 0;
    --*(_DWORD *)(*a2 - 16);
    unsigned int v14 = v11;
  }
  uint64_t result = WTF::fastMalloc((WTF *)0x18);
  unsigned int v18 = *a3;
  if (*a3) {
    *(_DWORD *)v18 += 2;
  }
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = v18;
  *unsigned int v14 = (WTF::StringImpl **)result;
  if (*a2)
  {
    ++*(_DWORD *)(*a2 - 12);
    uint64_t v19 = *a2;
    if (*a2) {
      goto LABEL_20;
    }
LABEL_25:
    uint64_t v20 = *(unsigned int *)(v19 - 16);
    unint64_t v21 = *(unsigned int *)(v19 - 4);
    if (v21 > 0x400) {
      goto LABEL_26;
    }
LABEL_21:
    if (3 * v21 <= 4 * v20)
    {
      if (!v21)
      {
        unsigned int v22 = 8;
        goto LABEL_28;
      }
LABEL_27:
      unsigned int v22 = v21 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v21));
LABEL_28:
      unsigned int v14 = (WTF::StringImpl ***)WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::rehash(a2, v22, v14);
      uint64_t result = (uint64_t)*v14;
    }
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    uint64_t v19 = *a2;
    if (!*a2) {
      goto LABEL_25;
    }
LABEL_20:
    uint64_t v20 = (*(_DWORD *)(v19 - 16) + *(_DWORD *)(v19 - 12));
    unint64_t v21 = *(unsigned int *)(v19 - 4);
    if (v21 <= 0x400) {
      goto LABEL_21;
    }
LABEL_26:
    if (v21 <= 2 * v20) {
      goto LABEL_27;
    }
  }
  uint64_t v23 = a2[2];
  *(void *)(result + 8) = v23;
  *(void *)(result + 16) = 0;
  if (v23) {
    int v24 = (uint64_t *)(v23 + 16);
  }
  else {
    int v24 = a2 + 1;
  }
  *int v24 = result;
  a2[2] = result;
  char v17 = 1;
LABEL_33:
  unint64_t v25 = *v14;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v25;
  *(unsigned char *)(a1 + 16) = v17;
  return result;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>@<X0>(int8x16_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int8x16_t *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  if (a2) {
    unint64_t v8 = a2 - 1;
  }
  else {
    unint64_t v8 = 0;
  }
  if (v8 >> 31) {
    goto LABEL_24;
  }
  if (a5) {
    unint64_t v9 = a5 - 1;
  }
  else {
    unint64_t v9 = 0;
  }
  if (v9 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x182565D7CLL);
  }
  uint64_t v10 = *a3;
  if (*a3)
  {
    int v11 = *(_DWORD *)(v10 + 4);
    if (((v11 | v9) & 0x80000000) != 0) {
      goto LABEL_23;
    }
  }
  else
  {
    int v11 = 0;
    if ((v9 & 0x80000000) != 0)
    {
LABEL_23:
      *a6 = 0;
      goto LABEL_24;
    }
  }
  BOOL v12 = __OFADD__(v11, v9);
  int v13 = v11 + v9;
  if (v12 || __OFADD__(v8, v13)) {
    goto LABEL_23;
  }
  BOOL v14 = !v10 || (*(unsigned char *)(v10 + 16) & 4) != 0;
  uint64_t result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v8 + v13), v14, a1, v8, v10, a4, v9, a6);
  if (!*a6)
  {
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x182565D5CLL);
  }
  return result;
}

WTF *WGSL::RewriteGlobalVariables::visit(WGSL::RewriteGlobalVariables *this, const WTF::StringImpl **a2)
{
  uint64_t v11 = 0;
  uint64_t result = WTF::HashMap<WTF::String,WGSL::AST::Variable *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::add<WGSL::AST::Variable *&>((uint64_t)&v10, (uint64_t *)this + 10, a2 + 7, &v11);
  uint64_t v5 = *((unsigned int *)a2 + 21);
  if (v5 && !*((unsigned char *)this + 32))
  {
    unint64_t v8 = a2[9];
    uint64_t v9 = 8 * v5 - 8;
LABEL_8:
    uint64_t result = (WTF *)(*(uint64_t (**)(WGSL::RewriteGlobalVariables *, void))(*(void *)this + 88))(this, *(void *)v8);
    while (v9)
    {
      unint64_t v8 = (const WTF::StringImpl *)((char *)v8 + 8);
      v9 -= 8;
      if (!*((unsigned char *)this + 32)) {
        goto LABEL_8;
      }
    }
  }
  if (!*((unsigned char *)this + 32))
  {
    uint64_t v6 = a2[8];
    int v7 = *(uint64_t (**)(WGSL::RewriteGlobalVariables *, const WTF::StringImpl *))(*(void *)this + 208);
    return (WTF *)v7(this, v6);
  }
  return result;
}

uint64_t WGSL::RewriteGlobalVariables::visit(WGSL::RewriteGlobalVariables *this, const WTF::StringImpl **a2)
{
  uint64_t v6 = a2;
  WTF::HashMap<WTF::String,WGSL::AST::Variable *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::add<WGSL::AST::Variable *&>((uint64_t)&v5, (uint64_t *)this + 10, a2 + 6, &v6);
  return WGSL::AST::Visitor::visit((uint64_t)this, (uint64_t)a2);
}

uint64_t WGSL::RewriteGlobalVariables::visit(uint64_t this, uint64_t **a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 156);
  *(_DWORD *)(this + 156) = 0;
  uint64_t v5 = *(unsigned int *)(this + 172);
  if (!v5)
  {
    uint64_t v6 = 0;
    int v7 = (uint64_t *)(this + 160);
    this = *(void *)(this + 160);
    if (!this) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  if (v5 >> 28)
  {
    __break(0xC471u);
    return this;
  }
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)(16 * v5));
  memcpy(v6, *(const void **)(v3 + 160), 16 * *(unsigned int *)(v3 + 172));
  int v7 = (uint64_t *)(v3 + 160);
  this = *(void *)(v3 + 160);
  if (this)
  {
LABEL_4:
    *(void *)(v3 + 160) = 0;
    *(_DWORD *)(v3 + 168) = 0;
    this = WTF::fastFree((WTF *)this, a2);
  }
LABEL_5:
  uint64_t *v7 = 0;
  v7[1] = 0;
  unint64_t v8 = a2[5];
  uint64_t v9 = *((unsigned int *)a2 + 13);
  if (v9)
  {
    uint64_t v10 = 8 * v9;
    do
    {
      uint64_t v11 = *v8++;
      WGSL::AST::Visitor::visit((unsigned char *)v3, v11);
      ++*(_DWORD *)(v3 + 156);
      v10 -= 8;
    }
    while (v10);
    this = *(void *)(v3 + 160);
    uint64_t v13 = *(unsigned int *)(v3 + 172);
    if (v13)
    {
      int v29 = v7;
      unsigned int v30 = v6;
      int v31 = v5;
      int v32 = v4;
      int v14 = 0;
      uint64_t v15 = 16 * v13;
      uint64_t v16 = (_DWORD *)(this + 8);
      do
      {
        uint64_t v22 = *(void *)(v3 + 40);
        int v23 = *v16;
        uint64_t v33 = *((void *)v16 - 1);
        uint64_t v24 = *((unsigned int *)a2 + 13);
        if (v24 == *((_DWORD *)a2 + 12))
        {
          unint64_t v25 = (uint64_t *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a2 + 5), v24 + 1, (unint64_t)&v33);
          uint64_t v24 = *((unsigned int *)a2 + 13);
        }
        else
        {
          unint64_t v25 = &v33;
        }
        uint64_t v26 = (v14 + v23);
        int8x8_t v27 = &a2[5][v26];
        memmove(v27 + 1, v27, 8 * v24 - 8 * v26);
        uint64_t *v27 = *v25;
        ++*((_DWORD *)a2 + 13);
        uint64_t v28 = (void *)(v22 + 400);
        unint64_t v20 = *(unsigned int *)(v22 + 412);
        if (v20 == *(_DWORD *)(v22 + 408))
        {
          unint64_t v17 = v20 + (v20 >> 2);
          if (v17 >= 0x10) {
            unint64_t v18 = v17 + 1;
          }
          else {
            unint64_t v18 = 16;
          }
          if (v18 <= v20 + 1) {
            unint64_t v19 = v20 + 1;
          }
          else {
            unint64_t v19 = v18;
          }
          WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v28, v19);
          unint64_t v20 = *(unsigned int *)(v22 + 412);
          unint64_t v21 = (void *)(*(void *)(v22 + 400) + 32 * v20);
        }
        else
        {
          unint64_t v21 = (void *)(*v28 + 32 * v20);
        }
        void *v21 = &unk_1ECABD1C0;
        v21[1] = a2 + 5;
        v21[2] = v26;
        v21[3] = v21;
        *(_DWORD *)(v22 + 412) = v20 + 1;
        ++v14;
        v16 += 4;
        v15 -= 16;
      }
      while (v15);
      uint64_t v6 = v30;
      this = *v29;
      int v4 = v32;
      LODWORD(v5) = v31;
    }
    if (this)
    {
      *(void *)(v3 + 160) = 0;
      *(_DWORD *)(v3 + 168) = 0;
      this = WTF::fastFree((WTF *)this, v12);
    }
  }
  *(void *)(v3 + 160) = v6;
  *(_DWORD *)(v3 + 168) = v5;
  *(_DWORD *)(v3 + 172) = v5;
  *(_DWORD *)(v3 + 156) = v4;
  return this;
}

uint64_t WGSL::RewriteGlobalVariables::visit(WGSL::RewriteGlobalVariables *this, WGSL::AST::CompoundAssignmentStatement *a2)
{
  uint64_t v4 = WGSL::RewriteGlobalVariables::pack((uint64_t *)this, 2, *((void *)a2 + 3));
  uint64_t v5 = *((void *)a2 + 4);
  return WGSL::RewriteGlobalVariables::pack((uint64_t *)this, v4, v5);
}

uint64_t WGSL::RewriteGlobalVariables::pack(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v5 = a2;
  uint64_t v7 = a1[31];
  if (v7)
  {
    int v8 = *(_DWORD *)(v7 - 8);
    unint64_t v9 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    unint64_t v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    unint64_t v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    unsigned int v12 = v8 & ((v11 >> 31) ^ v11);
    uint64_t v13 = *(void *)(v7 + 8 * v12);
    if (v13 == a3) {
      return a2;
    }
    int v14 = 1;
    while (v13)
    {
      unsigned int v12 = (v12 + v14) & v8;
      uint64_t v13 = *(void *)(v7 + 8 * v12);
      ++v14;
      if (v13 == a3) {
        return a2;
      }
    }
  }
  switch((*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3))
  {
    case 0x12u:
      unint64_t v17 = (long long *)(a3 + 64);
      uint64_t v15 = 2;
      WGSL::RewriteGlobalVariables::pack(a1, 2, *(void *)(a3 + 64));
      WGSL::RewriteGlobalVariables::pack(a1, 2, *(void *)(a3 + 72));
      if ((v5 & 2) != 0) {
        return v15;
      }
      uint64_t v18 = *(void *)(a3 + 24);
      int v19 = *(_DWORD *)(v18 + 48);
      if (v19 == 10)
      {
        uint64_t v18 = *(void *)(v18 + 8);
        int v19 = *(_DWORD *)(v18 + 48);
      }
      if (v19 == 3)
      {
        uint64_t v20 = a1[5];
        *(unsigned char *)(v20 + 9) = 1;
      }
      else if (v19 == 4)
      {
        if (!WGSL::Type::isConstructible((WGSL::Type *)v18)) {
          return v15;
        }
        uint64_t v20 = a1[5];
      }
      else
      {
        uint64_t v20 = a1[5];
        *(unsigned char *)(v20 + 11) = 1;
      }
      unint64_t v72 = (void *)(v20 + 312);
      long long v513 = 0uLL;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(void *)v525 = 0;
      *(void *)&v525[8] = 0;
      long long v524 = off_1ECABC030;
      uint64_t v73 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v72, &v513, (uint64_t)&v524);
      int v74 = *(_DWORD **)&v525[16];
      long long v524 = off_1ECABC030;
      *(void *)&v525[16] = 0;
      if (v74)
      {
        if (*v74 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v74 -= 2;
        }
      }
      uint64_t v75 = a1[5];
      v73[3] = *(void *)(v75 + 120);
      uint64_t v76 = *(void *)(v75 + 312);
      if ((unint64_t)(*(void *)(v75 + 320) - v76) <= 0x57)
      {
        WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v75 + 312));
        uint64_t v76 = *(void *)(v75 + 312);
      }
      *(void *)uint64_t v76 = &unk_1ECABC008;
      *(_OWORD *)(v76 + 8) = *(_OWORD *)(a3 + 8);
      *(void *)uint64_t v76 = &unk_1ECABBFE0;
      *(void *)(v76 + 24) = *(void *)(a3 + 24);
      *(unsigned char *)(v76 + 32) = 0;
      *(unsigned char *)(v76 + 56) = 0;
      if (*(unsigned char *)(a3 + 56))
      {
        *(_DWORD *)(v76 + 48) = -1;
        uint64_t v77 = *(unsigned int *)(a3 + 48);
        if (v77 != -1)
        {
          ((void (*)(void (***)(WGSL::AST::Identifier *__hidden), uint64_t, uint64_t))off_1ECABCEC0[v77])(&v524, v76 + 32, a3 + 32);
          *(_DWORD *)(v76 + 48) = v77;
        }
        *(unsigned char *)(v76 + 56) = 1;
      }
      *(void *)uint64_t v76 = off_1ECABC158;
      long long v78 = *v17;
      *(unsigned char *)(v76 + 80) = *(unsigned char *)(a3 + 80);
      *(_OWORD *)(v76 + 64) = v78;
      *(void *)(v75 + 312) += 88;
      unint64_t v79 = *(unsigned int *)(v75 + 356);
      if (v79 == *(_DWORD *)(v75 + 352))
      {
        unint64_t v80 = v79 + (v79 >> 2);
        if (v80 >= 0x10) {
          unint64_t v81 = v80 + 1;
        }
        else {
          unint64_t v81 = 16;
        }
        if (v81 <= v79 + 1) {
          unint64_t v3 = v79 + 1;
        }
        else {
          unint64_t v3 = v81;
        }
        if (v3 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x18256AC2CLL);
        }
        uint64_t v82 = *(void **)(v75 + 344);
        int v83 = (void *)WTF::fastMalloc((WTF *)(8 * v3));
        *(_DWORD *)(v75 + 352) = v3;
        *(void *)(v75 + 344) = v83;
        memcpy(v83, v82, 8 * v79);
        if (v82)
        {
          if (*(void **)(v75 + 344) == v82)
          {
            *(void *)(v75 + 344) = 0;
            *(_DWORD *)(v75 + 352) = 0;
          }
          WTF::fastFree((WTF *)v82, v84);
        }
        uint64_t v85 = *(unsigned int *)(v75 + 356);
        uint64_t v86 = (void *)(*(void *)(v75 + 344) + 8 * v85);
      }
      else
      {
        uint64_t v86 = (void *)(*(void *)(v75 + 344) + 8 * v79);
        LODWORD(v85) = *(_DWORD *)(v75 + 356);
      }
      *uint64_t v86 = v76;
      *(_DWORD *)(v75 + 356) = v85 + 1;
      uint64_t v87 = a1[5];
      long long v524 = 0;
      *(void *)v525 = 0;
      int v88 = (void *)WTF::fastMalloc((WTF *)8);
      DWORD2(v513) = 1;
      *(void *)&long long v513 = v88;
      void *v88 = v76;
      HIDWORD(v513) = 1;
      uint64_t v90 = WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>((void *)(v87 + 312), &v524, (uint64_t)v73, (uint64_t *)&v513);
      uint64_t v91 = (WTF *)v513;
      if ((void)v513)
      {
        *(void *)&long long v513 = 0;
        DWORD2(v513) = 0;
        WTF::fastFree(v91, v89);
      }
      v90[3] = *(void *)(v76 + 24);
      uint64_t v92 = a1[5];
      long long v514 = *(_OWORD *)(a3 + 8);
      uint64_t v93 = *(void *)(a3 + 24);
      *(void *)&long long v513 = a3;
      *((void *)&v513 + 1) = &unk_1ECABBFE0;
      uint64_t v515 = v93;
      v516[0] = 0;
      unsigned __int8 v518 = 0;
      int v94 = *(unsigned __int8 *)(a3 + 56);
      if (*(unsigned char *)(a3 + 56))
      {
        int v517 = -1;
        unint64_t v3 = *(unsigned int *)(a3 + 48);
        if (v3 != -1)
        {
          ((void (*)(void (***)(WGSL::AST::Identifier *__hidden), unsigned char *, uint64_t))off_1ECABCEC0[v3])(&v524, v516, a3 + 32);
          int v517 = v3;
        }
        unsigned __int8 v518 = 1;
      }
      unint64_t v95 = (uint64_t *)(v92 + 400);
      *((void *)&v513 + 1) = off_1ECABC158;
      *(_OWORD *)uint64_t v519 = *v17;
      v519[16] = *(unsigned char *)(a3 + 80);
      unint64_t v96 = *(unsigned int *)(v92 + 412);
      if (v96 == *(_DWORD *)(v92 + 408))
      {
        unint64_t v97 = v96 + (v96 >> 2);
        if (v97 >= 0x10) {
          unint64_t v98 = v97 + 1;
        }
        else {
          unint64_t v98 = 16;
        }
        if (v98 <= v96 + 1) {
          unint64_t v99 = v96 + 1;
        }
        else {
          unint64_t v99 = v98;
        }
        WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v95, v99);
        uint64_t v100 = *(unsigned int *)(v92 + 412);
        uint64_t v101 = *(void *)(v92 + 400);
        uint64_t v102 = (void (**)(WGSL::AST::Identifier *__hidden))v513;
        *(_OWORD *)&v525[8] = v514;
        uint64_t v103 = v515;
        long long v524 = (void (**)(WGSL::AST::Identifier *__hidden))v513;
        *(void *)v525 = &unk_1ECABBFE0;
        uint64_t v526 = v515;
        v527[0] = 0;
        unsigned __int8 v529 = 0;
        int v104 = v518;
        if (v518)
        {
          int v528 = -1;
          int v94 = v517;
          if (v517 != -1)
          {
            uint64_t v105 = v100;
            uint64_t v106 = v101;
            ((void (*)(long long *, unsigned char *, unsigned char *))off_1ECABCF18[v517])(&v536, v527, v516);
            uint64_t v101 = v106;
            uint64_t v100 = v105;
            int v528 = v94;
            uint64_t v102 = v524;
            uint64_t v103 = v526;
          }
          int v107 = 1;
          unsigned __int8 v529 = 1;
        }
        else
        {
          int v107 = 0;
        }
        *(void *)v525 = off_1ECABC158;
        *(_OWORD *)v530 = *(_OWORD *)v519;
        v530[16] = v519[16];
        uint64_t v183 = v101 + 32 * v100;
        *(void *)(v183 + 24) = 0;
        uint64_t v184 = (void *)(v183 + 24);
        int v185 = (char *)operator new(0x68uLL);
        int v186 = v185;
        *(void *)int v185 = &unk_1ECABD080;
        *((void *)v185 + 1) = v102;
        *(_OWORD *)(v185 + 24) = *(_OWORD *)&v525[8];
        *((void *)v185 + 2) = &unk_1ECABBFE0;
        *((void *)v185 + 5) = v103;
        v185[48] = 0;
        v185[72] = 0;
        if (v104)
        {
          *((_DWORD *)v185 + 16) = -1;
          if (v94 != -1)
          {
            ((void (*)(long long *, char *, unsigned char *))off_1ECABCF18[v94])(&v536, v185 + 48, v527);
            *((_DWORD *)v186 + 16) = v94;
            int v107 = v529;
          }
          v186[72] = 1;
        }
        else
        {
          int v107 = 0;
        }
        *((void *)v186 + 2) = off_1ECABC158;
        *((_OWORD *)v186 + 5) = *(_OWORD *)v530;
        v186[96] = v530[16];
        *uint64_t v184 = v186;
        *(void *)v525 = &unk_1ECABBFE0;
        if (v107 && v528 != -1) {
          ((void (*)(long long *, unsigned char *))off_1ECABCE68[v528])(&v536, v527);
        }
        ++*(_DWORD *)(v92 + 412);
      }
      else
      {
        uint64_t v108 = *v95;
        long long v109 = (void (**)(WGSL::AST::Identifier *__hidden))v513;
        *(_OWORD *)&v525[8] = v514;
        uint64_t v110 = v515;
        long long v524 = (void (**)(WGSL::AST::Identifier *__hidden))v513;
        *(void *)v525 = &unk_1ECABBFE0;
        uint64_t v526 = v515;
        v527[0] = 0;
        unsigned __int8 v529 = 0;
        if (v94)
        {
          int v528 = -1;
          if (v3 != -1)
          {
            uint64_t v111 = v108;
            ((void (*)(long long *, unsigned char *, unsigned char *))off_1ECABCF18[v3])(&v536, v527, v516);
            uint64_t v108 = v111;
            int v528 = v3;
            long long v109 = v524;
            uint64_t v110 = v526;
          }
          int v112 = 1;
          unsigned __int8 v529 = 1;
        }
        else
        {
          int v112 = 0;
        }
        *(void *)v525 = off_1ECABC158;
        *(_OWORD *)v530 = *(_OWORD *)v519;
        v530[16] = v519[16];
        uint64_t v187 = v108 + 32 * v96;
        *(void *)(v187 + 24) = 0;
        unint64_t v188 = (void *)(v187 + 24);
        unsigned int v189 = (char *)operator new(0x68uLL);
        uint64_t v190 = v189;
        *(void *)unsigned int v189 = &unk_1ECABD080;
        *((void *)v189 + 1) = v109;
        *(_OWORD *)(v189 + 24) = *(_OWORD *)&v525[8];
        *((void *)v189 + 2) = &unk_1ECABBFE0;
        *((void *)v189 + 5) = v110;
        v189[48] = 0;
        v189[72] = 0;
        if (v94)
        {
          *((_DWORD *)v189 + 16) = -1;
          if (v3 != -1)
          {
            ((void (*)(long long *, char *, unsigned char *))off_1ECABCF18[v3])(&v536, v189 + 48, v527);
            *((_DWORD *)v190 + 16) = v3;
            int v112 = v529;
          }
          v190[72] = 1;
        }
        else
        {
          int v112 = 0;
        }
        *((void *)v190 + 2) = off_1ECABC158;
        *((_OWORD *)v190 + 5) = *(_OWORD *)v530;
        v190[96] = v530[16];
        *unint64_t v188 = v190;
        *(void *)v525 = &unk_1ECABBFE0;
        if (v112)
        {
          if (v528 != -1) {
            ((void (*)(long long *, unsigned char *))off_1ECABCE68[v528])(&v536, v527);
          }
          int v528 = -1;
        }
        ++*(_DWORD *)(v92 + 412);
      }
      *((void *)&v513 + 1) = &unk_1ECABBFE0;
      if (v518 && v517 != -1) {
        ((void (*)(void (***)(WGSL::AST::Identifier *__hidden), unsigned char *))off_1ECABCE68[v517])(&v524, v516);
      }
      (**(void (***)(uint64_t))a3)(a3);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)(v90 + 1);
      *(void *)(a3 + 24) = 0;
      *(unsigned char *)(a3 + 32) = 0;
      *(unsigned char *)(a3 + 56) = 0;
      *(void *)a3 = off_1ECABD058;
      *(void *)(a3 + 64) = v90;
      *(void *)(a3 + 24) = v90[3];
      return 1;
    case 0x14u:
      int v31 = *(void **)(a3 + 64);
      if ((*(unsigned int (**)(void *))(*v31 + 16))(v31) != 22
        || !MEMORY[0x18530AEB0](v31[11], "arrayLength", 11))
      {
        uint64_t v63 = *(unsigned int *)(a3 + 84);
        if (v63)
        {
          unint64_t v64 = *(uint64_t **)(a3 + 72);
          uint64_t v65 = 8 * v63;
          do
          {
            uint64_t v66 = *v64++;
            WGSL::RewriteGlobalVariables::pack(a1, 2, v66);
            v65 -= 8;
          }
          while (v65);
        }
LABEL_193:
        if ((v5 & 2) == 0)
        {
          uint64_t v152 = *(void *)(a3 + 24);
          int v153 = *(_DWORD *)(v152 + 48);
          if (v153 == 10)
          {
            uint64_t v152 = *(void *)(v152 + 8);
            int v153 = *(_DWORD *)(v152 + 48);
          }
          if (v153 == 3)
          {
            uint64_t v154 = a1[5];
            *(unsigned char *)(v154 + 9) = 1;
            goto LABEL_203;
          }
          if (v153 != 4)
          {
            uint64_t v154 = a1[5];
            *(unsigned char *)(v154 + 11) = 1;
            goto LABEL_203;
          }
          if (WGSL::Type::isConstructible((WGSL::Type *)v152))
          {
            uint64_t v154 = a1[5];
LABEL_203:
            unsigned int v155 = (void *)(v154 + 312);
            long long v513 = 0uLL;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            *(void *)v525 = 0;
            *(void *)&v525[8] = 0;
            long long v524 = off_1ECABC030;
            int v156 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v155, &v513, (uint64_t)&v524);
            unint64_t v157 = *(_DWORD **)&v525[16];
            long long v524 = off_1ECABC030;
            *(void *)&v525[16] = 0;
            if (v157)
            {
              if (*v157 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *v157 -= 2;
              }
            }
            uint64_t v158 = a1[5];
            v156[3] = *(void *)(v158 + 120);
            uint64_t v159 = *(void *)(v158 + 312);
            if ((unint64_t)(*(void *)(v158 + 320) - v159) <= 0x5F)
            {
              WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v158 + 312));
              uint64_t v159 = *(void *)(v158 + 312);
            }
            WGSL::AST::CallExpression::CallExpression(v159, (const WGSL::AST::CallExpression *)a3);
            *(void *)(v158 + 312) += 96;
            unint64_t v160 = *(unsigned int *)(v158 + 356);
            if (v160 == *(_DWORD *)(v158 + 352))
            {
              unint64_t v161 = v160 + (v160 >> 2);
              if (v161 >= 0x10) {
                unint64_t v162 = v161 + 1;
              }
              else {
                unint64_t v162 = 16;
              }
              if (v162 <= v160 + 1) {
                unint64_t v163 = v160 + 1;
              }
              else {
                unint64_t v163 = v162;
              }
              if (v163 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x18256AC34);
              }
              int8x16_t v164 = *(void **)(v158 + 344);
              BOOL v165 = (void *)WTF::fastMalloc((WTF *)(8 * v163));
              *(_DWORD *)(v158 + 352) = v163;
              *(void *)(v158 + 344) = v165;
              memcpy(v165, v164, 8 * v160);
              if (v164)
              {
                if (*(void **)(v158 + 344) == v164)
                {
                  *(void *)(v158 + 344) = 0;
                  *(_DWORD *)(v158 + 352) = 0;
                }
                WTF::fastFree((WTF *)v164, v166);
              }
              unint64_t v160 = *(unsigned int *)(v158 + 356);
              unint64_t v167 = (uint64_t *)(*(void *)(v158 + 344) + 8 * v160);
            }
            else
            {
              unint64_t v167 = (uint64_t *)(*(void *)(v158 + 344) + 8 * v160);
            }
            *unint64_t v167 = v159;
            *(_DWORD *)(v158 + 356) = v160 + 1;
            uint64_t v168 = a1[5];
            long long v524 = 0;
            *(void *)v525 = 0;
            uint64_t v169 = (void *)WTF::fastMalloc((WTF *)8);
            DWORD2(v513) = 1;
            *(void *)&long long v513 = v169;
            *uint64_t v169 = v159;
            HIDWORD(v513) = 1;
            uint64_t v171 = (const WGSL::AST::CallExpression *)WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>((void *)(v168 + 312), &v524, (uint64_t)v156, (uint64_t *)&v513);
            unint64_t v172 = (WTF *)v513;
            if ((void)v513)
            {
              *(void *)&long long v513 = 0;
              DWORD2(v513) = 0;
              WTF::fastFree(v172, v170);
            }
            *((void *)v171 + 3) = *(void *)(v159 + 24);
            uint64_t v173 = a1[5];
            *(void *)&long long v513 = a3;
            WGSL::AST::CallExpression::CallExpression((uint64_t)&v513 + 8, (const WGSL::AST::CallExpression *)a3);
            unint64_t v174 = *(unsigned int *)(v173 + 412);
            v509 = v171;
            if (v174 == *(_DWORD *)(v173 + 408))
            {
              unint64_t v175 = v174 + (v174 >> 2);
              if (v175 >= 0x10) {
                unint64_t v176 = v175 + 1;
              }
              else {
                unint64_t v176 = 16;
              }
              if (v176 <= v174 + 1) {
                unint64_t v177 = v174 + 1;
              }
              else {
                unint64_t v177 = v176;
              }
              WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v173 + 400, v177);
              uint64_t v178 = *(unsigned int *)(v173 + 412);
              uint64_t v179 = *(void *)(v173 + 400);
              long long v180 = (void (**)(WGSL::AST::Identifier *__hidden))v513;
              *(_OWORD *)&v525[8] = v514;
              uint64_t v181 = v515;
              long long v524 = (void (**)(WGSL::AST::Identifier *__hidden))v513;
              *(void *)v525 = &unk_1ECABBFE0;
              uint64_t v526 = v515;
              v527[0] = 0;
              unsigned __int8 v529 = 0;
              int v497 = v518;
              if (v518)
              {
                int v528 = -1;
                int v504 = v517;
                if (v517 != -1)
                {
                  ((void (*)(long long *, unsigned char *, unsigned char *))off_1ECABCF18[v517])(&v536, v527, v516);
                  int v528 = v504;
                  long long v180 = v524;
                  uint64_t v181 = v526;
                }
                int v494 = 1;
                unsigned __int8 v529 = 1;
              }
              else
              {
                int v494 = 0;
                int v504 = 0;
              }
              uint64_t v191 = *(void *)&v519[8];
              *(void *)v525 = &unk_1ECABC058;
              uint64_t v498 = *(void *)v519;
              *(void *)v530 = *(void *)v519;
              *(void *)&v530[8] = *(void *)&v519[8];
              int v192 = *(_DWORD *)&v519[16];
              int v193 = *(_DWORD *)&v519[20];
              *(void *)&v519[8] = 0;
              *(void *)&v519[16] = 0;
              *(_DWORD *)&v530[16] = v192;
              *(_DWORD *)&v530[20] = v193;
              __int16 v194 = *(_WORD *)&v519[24];
              *(_WORD *)&v530[24] = *(_WORD *)&v519[24];
              uint64_t v195 = v179 + 32 * v178;
            }
            else
            {
              uint64_t v182 = *(void *)(v173 + 400);
              long long v180 = (void (**)(WGSL::AST::Identifier *__hidden))v513;
              *(_OWORD *)&v525[8] = v514;
              uint64_t v181 = v515;
              long long v524 = (void (**)(WGSL::AST::Identifier *__hidden))v513;
              *(void *)v525 = &unk_1ECABBFE0;
              uint64_t v526 = v515;
              v527[0] = 0;
              unsigned __int8 v529 = 0;
              int v497 = v518;
              if (v518)
              {
                int v528 = -1;
                int v504 = v517;
                if (v517 != -1)
                {
                  ((void (*)(long long *, unsigned char *, unsigned char *))off_1ECABCF18[v517])(&v536, v527, v516);
                  int v528 = v504;
                  long long v180 = v524;
                  uint64_t v181 = v526;
                }
                int v494 = 1;
                unsigned __int8 v529 = 1;
              }
              else
              {
                int v494 = 0;
                int v504 = 0;
              }
              uint64_t v191 = *(void *)&v519[8];
              *(void *)v525 = &unk_1ECABC058;
              uint64_t v498 = *(void *)v519;
              *(void *)v530 = *(void *)v519;
              *(void *)&v530[8] = *(void *)&v519[8];
              int v192 = *(_DWORD *)&v519[16];
              int v193 = *(_DWORD *)&v519[20];
              *(void *)&v519[8] = 0;
              *(void *)&v519[16] = 0;
              *(_DWORD *)&v530[16] = v192;
              *(_DWORD *)&v530[20] = v193;
              __int16 v194 = *(_WORD *)&v519[24];
              *(_WORD *)&v530[24] = *(_WORD *)&v519[24];
              uint64_t v195 = v182 + 32 * v174;
            }
            *(void *)(v195 + 24) = 0;
            unsigned int v196 = (void *)(v195 + 24);
            int v197 = (char *)operator new(0x70uLL);
            size_t v198 = v197;
            *(void *)int v197 = &unk_1ECABD110;
            *((void *)v197 + 1) = v180;
            *(_OWORD *)(v197 + 24) = *(_OWORD *)&v525[8];
            *((void *)v197 + 2) = &unk_1ECABBFE0;
            *((void *)v197 + 5) = v181;
            v197[48] = 0;
            int v199 = v197 + 48;
            v197[72] = 0;
            if (v497)
            {
              *((_DWORD *)v197 + 16) = -1;
              int v200 = v494;
              uint64_t v201 = v498;
              if (v504 != -1)
              {
                ((void (*)(long long *, void *, unsigned char *))off_1ECABCF18[v504])(&v536, v199, v527);
                *((_DWORD *)v198 + 16) = v504;
                uint64_t v201 = *(void *)v530;
                uint64_t v191 = *(void *)&v530[8];
                int v192 = *(_DWORD *)&v530[16];
                int v193 = *(_DWORD *)&v530[20];
                __int16 v194 = *(_WORD *)&v530[24];
                int v200 = v529;
              }
              v198[72] = 1;
            }
            else
            {
              int v200 = 0;
              uint64_t v201 = v498;
            }
            *((void *)v198 + 2) = &unk_1ECABC058;
            *(_OWORD *)&v530[8] = 0uLL;
            *((void *)v198 + 10) = v201;
            *((void *)v198 + 11) = v191;
            *((_DWORD *)v198 + 24) = v192;
            *((_DWORD *)v198 + 25) = v193;
            *((_WORD *)v198 + 52) = v194;
            void *v196 = v198;
            *(void *)v525 = &unk_1ECABBFE0;
            if (v200 && v528 != -1) {
              ((void (*)(long long *, unsigned char *))off_1ECABCE68[v528])(&v536, v527);
            }
            ++*(_DWORD *)(v173 + 412);
            unint64_t v202 = *(WTF **)&v519[8];
            if (*(void *)&v519[8])
            {
              *(void *)&v519[8] = 0;
              *(_DWORD *)&v519[16] = 0;
              WTF::fastFree(v202, v199);
            }
            *((void *)&v513 + 1) = &unk_1ECABBFE0;
            if (v518 && v517 != -1) {
              ((void (*)(void (***)(WGSL::AST::Identifier *__hidden), unsigned char *))off_1ECABCE68[v517])(&v524, v516);
            }
            uint64_t v203 = *(WTF **)(a3 + 72);
            if (v203)
            {
              *(void *)(a3 + 72) = 0;
              *(_DWORD *)(a3 + 80) = 0;
              WTF::fastFree(v203, v199);
            }
            *(void *)a3 = &unk_1ECABBFE0;
            if (*(unsigned char *)(a3 + 56))
            {
              uint64_t v204 = *(unsigned int *)(a3 + 48);
              if (v204 != -1) {
                ((void (*)(void (***)(WGSL::AST::Identifier *__hidden), uint64_t))off_1ECABCE68[v204])(&v524, a3 + 32);
              }
              *(_DWORD *)(a3 + 48) = -1;
            }
            WGSL::AST::CallExpression::CallExpression(a3, v509);
            return 1;
          }
        }
        return 2;
      }
      if (!*(_DWORD *)(a3 + 84)) {
        goto LABEL_738;
      }
      uint64_t v33 = **(WGSL::RewriteGlobalVariables ***)(a3 + 72);
      v538[0] = 0;
      Base = WGSL::RewriteGlobalVariables::getBase(v33, (WGSL::AST::Expression *)v538, v32);
      int v36 = (WTF::StringImpl **)((char *)Base + 88);
      uint64_t v37 = a1[6];
      if (v37)
      {
        int v38 = *(_DWORD *)(v37 - 8);
        unsigned int v39 = *((_DWORD *)*v36 + 4);
        if (v39 < 0x100) {
          unsigned int v40 = WTF::StringImpl::hashSlowCase(*v36);
        }
        else {
          unsigned int v40 = v39 >> 8;
        }
        for (int i = 0; ; v40 = i + v119)
        {
          int v119 = v40 & v38;
          uint64_t v120 = *(WTF **)(v37 + 32 * (v40 & v38));
          if (v120 != (WTF *)-1)
          {
            if (!v120) {
              goto LABEL_156;
            }
            if (WTF::equal(v120, *v36, v34)) {
              break;
            }
          }
          ++i;
        }
      }
      else
      {
LABEL_156:
        long long v513 = 0uLL;
        *(void *)&long long v514 = 0;
        WTF::HashMap<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::HashTableTraits>::add<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>((uint64_t *)&v524, a1 + 14, a1 + 29, &v513);
        uint64_t v122 = (WTF *)*((void *)&v513 + 1);
        if (*((void *)&v513 + 1))
        {
          do
          {
            uint64_t v128 = v122;
            uint64_t v122 = (WTF *)*((void *)v122 + 2);
            BOOL v129 = *(_DWORD **)v128;
            *(void *)uint64_t v128 = 0;
            if (v129)
            {
              if (*v129 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *v129 -= 2;
              }
            }
            WTF::fastFree(v128, v121);
          }
          while (v122);
        }
        if ((void)v513) {
          WTF::fastFree((WTF *)(v513 - 16), v121);
        }
        WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add((uint64_t)&v513, (uint64_t *)v524 + 1, v36);
      }
      *(_OWORD *)v525 = *(_OWORD *)((char *)Base + 72);
      long long v524 = off_1ECABC030;
      uint64_t v123 = *((void *)Base + 11);
      if (v123)
      {
        *(_DWORD *)v123 += 2;
        *(void *)&v525[16] = v123;
        int v124 = *(_DWORD *)(v123 + 4);
        if (v124 < 0) {
          goto LABEL_735;
        }
        BOOL v125 = __OFADD__(v124, 12);
        int v126 = v124 + 12;
        if (v125) {
          goto LABEL_735;
        }
      }
      else
      {
        *(void *)&v525[16] = 0;
        int v126 = 12;
      }
      if (!__OFADD__(v126, 2))
      {
        BOOL v127 = !v123 || (*(unsigned char *)(v123 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v126 + 2), v127, (int8x16_t *)"__", 2u, v123, (int8x16_t *)"_ArrayLength", 0xCu, &v537);
        uint64_t v130 = v537;
        if (v537)
        {
          int v131 = *(_DWORD **)&v525[16];
          long long v524 = off_1ECABC030;
          *(void *)&v525[16] = 0;
          if (v131)
          {
            if (*v131 == 2)
            {
              WTF::StringImpl::destroy();
              uint64_t v130 = v537;
              int v132 = a1 + 5;
              uint64_t v133 = (void *)(a1[5] + 312);
              long long v536 = 0uLL;
              if (!v537) {
                goto LABEL_180;
              }
              goto LABEL_179;
            }
            *v131 -= 2;
          }
          int v132 = a1 + 5;
          uint64_t v133 = (void *)(a1[5] + 312);
          long long v536 = 0uLL;
LABEL_179:
          *v130 += 2;
LABEL_180:
          *(void *)&long long v513 = off_1ECABC030;
          *((void *)&v513 + 1) = 0;
          *(void *)&long long v514 = 0;
          *((void *)&v514 + 1) = v130;
          uint64_t v134 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v133, &v536, (uint64_t)&v513);
          int v135 = (_DWORD *)*((void *)&v514 + 1);
          *(void *)&long long v513 = off_1ECABC030;
          *((void *)&v514 + 1) = 0;
          if (v135)
          {
            if (*v135 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v135 -= 2;
            }
          }
          v134[3] = *(void *)(*v132 + 168);
          uint64_t v136 = *((void *)v33 + 3);
          if (*(_DWORD *)(v136 + 48) == 11)
          {
            uint64_t v137 = *(void *)(v136 + 8);
            if (*(_DWORD *)(v137 + 48) == 3)
            {
              unint64_t v138 = *(WGSL::Type **)v137;
              int v139 = WGSL::Type::size(*(WGSL::Type **)v137);
              int v140 = WGSL::Type::alignment(v138);
              LODWORD(v536) = (v139 + v140 - 1) & -v140;
              size_t v141 = (void *)(*v132 + 312);
              long long v513 = 0uLL;
              unint64_t v142 = WGSL::AST::Builder::construct<WGSL::AST::Unsigned32Literal,WGSL::SourceSpan,int,void>(v141, &v513, (int *)&v536);
              uint64_t v143 = *v132;
              v142[3] = *(void *)(*v132 + 168);
              if (v538[0])
              {
                long long v513 = 0uLL;
                unsigned long long v144 = WGSL::AST::Builder::construct<WGSL::AST::Unsigned32Literal,WGSL::SourceSpan,int,void>((void *)(v143 + 312), &v513, v538);
                uint64_t v145 = *v132;
                v144[3] = *(void *)(*v132 + 168);
                long long v513 = 0uLL;
                char v535 = 1;
                size_t v146 = WGSL::AST::Builder::construct<WGSL::AST::BinaryExpression,WGSL::SourceSpan,WGSL::AST::Expression &,WGSL::AST::Unsigned32Literal &,WGSL::AST::BinaryOperation,void>((void *)(v145 + 312), &v513, (uint64_t)v134, (uint64_t)v144, &v535);
                uint64_t v143 = *v132;
                v146[3] = *(void *)(*v132 + 168);
              }
              else
              {
                size_t v146 = v134;
              }
              *(unsigned char *)(v143 + 14) = 1;
              long long v513 = 0uLL;
              char v535 = 3;
              unint64_t v147 = WGSL::AST::Builder::construct<WGSL::AST::BinaryExpression,WGSL::SourceSpan,WGSL::AST::Expression &,WGSL::AST::Unsigned32Literal &,WGSL::AST::BinaryOperation,void>((void *)(v143 + 312), &v513, (uint64_t)v146, (uint64_t)v142, &v535);
              uint64_t v148 = a1[5];
              v147[3] = *(void *)(v148 + 168);
              WGSL::ShaderModule::replace<WGSL::AST::CallExpression,WGSL::AST::BinaryExpression>(v148, a3, (uint64_t)v147);
              WGSL::RewriteGlobalVariables::readVariable((WGSL::RewriteGlobalVariables *)a1, Base, v149);
              WGSL::RewriteGlobalVariables::readVariable((WGSL::RewriteGlobalVariables *)a1, (WGSL::AST::IdentifierExpression *)v134, v150);
              unint64_t v151 = v537;
              v537 = 0;
              if (v151)
              {
                if (*v151 == 2) {
                  WTF::StringImpl::destroy();
                }
                else {
                  *v151 -= 2;
                }
              }
              goto LABEL_193;
            }
          }
          goto LABEL_737;
        }
LABEL_736:
        __break(0xC471u);
        JUMPOUT(0x18256AC18);
      }
LABEL_735:
      v537 = 0;
      goto LABEL_736;
    case 0x15u:
      if ((WGSL::RewriteGlobalVariables::pack(a1, 3, *(void *)(a3 + 64)) & 2) != 0) {
        goto LABEL_76;
      }
      uint64_t v49 = *(void *)(*(void *)(a3 + 64) + 24);
      if (!v49) {
        goto LABEL_56;
      }
      int v50 = *(_DWORD *)(v49 + 48);
      if (v50 != 10) {
        goto LABEL_54;
      }
      uint64_t v49 = *(void *)(v49 + 8);
      if (v49)
      {
        int v50 = *(_DWORD *)(v49 + 48);
LABEL_54:
        if (v50 == 11) {
          uint64_t v49 = *(void *)(v49 + 8);
        }
      }
LABEL_56:
      int v51 = *(_DWORD *)(v49 + 48);
      if (v51 == 1)
      {
LABEL_76:
        uint64_t v15 = 2;
        if ((v5 & 2) != 0) {
          return v15;
        }
        goto LABEL_297;
      }
      if (v51 != 4)
      {
LABEL_737:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_738:
        __break(0xC471u);
        JUMPOUT(0x18256AC24);
      }
      uint64_t v52 = *(void *)(v49 + 8);
      if (v52)
      {
        int v53 = *(_DWORD *)(v52 - 8);
        int v54 = *(WTF::StringImpl **)(a3 + 128);
        unsigned int v55 = *((_DWORD *)v54 + 4);
        if (v55 < 0x100) {
          unsigned int v56 = WTF::StringImpl::hashSlowCase(v54);
        }
        else {
          unsigned int v56 = v55 >> 8;
        }
        for (int j = 0; ; v56 = j + v206)
        {
          uint64_t v206 = v56 & v53;
          unint64_t v117 = *(WTF **)(v52 + 16 * v206);
          if (v117 != (WTF *)-1)
          {
            if (!v117) {
              goto LABEL_296;
            }
            if (WTF::equal(v117, *(const WTF::StringImpl **)(a3 + 128), v48)) {
              break;
            }
          }
          ++j;
        }
        unint64_t v117 = *(WTF **)(v52 + 16 * v206 + 8);
      }
      else
      {
        unint64_t v117 = 0;
      }
LABEL_296:
      uint64_t v15 = WGSL::Type::packing(v117);
      if ((v15 & v5) == 0)
      {
LABEL_297:
        uint64_t v207 = *(void *)(a3 + 24);
        int v208 = *(_DWORD *)(v207 + 48);
        if (v208 == 10)
        {
          uint64_t v207 = *(void *)(v207 + 8);
          int v208 = *(_DWORD *)(v207 + 48);
        }
        if (v208 == 3)
        {
          uint64_t v212 = (unsigned char *)a1[5];
          if (v15) {
            v212[10] = 1;
          }
          else {
            v212[9] = 1;
          }
        }
        else
        {
          if (v208 == 4)
          {
            if ((WGSL::Type::isConstructible((WGSL::Type *)v207) & 1) == 0) {
              return v15;
            }
            uint64_t v210 = a1[5];
            long long v209 = a1 + 5;
            long long v211 = (void *)(v210 + 312);
            long long v513 = 0uLL;
            goto LABEL_506;
          }
          uint64_t v212 = (unsigned char *)a1[5];
          if (v15) {
            v212[12] = 1;
          }
          else {
            v212[11] = 1;
          }
        }
        long long v209 = a1 + 5;
        long long v211 = v212 + 312;
        long long v513 = 0uLL;
LABEL_506:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        long long v524 = off_1ECABC030;
        *(void *)v525 = 0;
        *(void *)&v525[8] = 0;
        *(void *)&v525[16] = v536;
        v374 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v211, &v513, (uint64_t)&v524);
        int v375 = *(_DWORD **)&v525[16];
        long long v524 = off_1ECABC030;
        *(void *)&v525[16] = 0;
        if (v375)
        {
          if (*v375 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v375 -= 2;
          }
        }
        uint64_t v376 = *v209;
        v374[3] = *(void *)(*v209 + 120);
        uint64_t v377 = *(void *)(v376 + 312);
        if ((unint64_t)(*(void *)(v376 + 320) - v377) <= 0x87)
        {
          WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v376 + 312));
          uint64_t v377 = *(void *)(v376 + 312);
        }
        *(void *)uint64_t v377 = &unk_1ECABC008;
        *(_OWORD *)(v377 + 8) = *(_OWORD *)(a3 + 8);
        *(void *)uint64_t v377 = &unk_1ECABBFE0;
        *(void *)(v377 + 24) = *(void *)(a3 + 24);
        *(unsigned char *)(v377 + 32) = 0;
        *(unsigned char *)(v377 + 56) = 0;
        if (*(unsigned char *)(a3 + 56))
        {
          *(_DWORD *)(v377 + 48) = -1;
          uint64_t v378 = *(unsigned int *)(a3 + 48);
          if (v378 != -1)
          {
            ((void (*)(void (***)(WGSL::AST::Identifier *__hidden), uint64_t, uint64_t))off_1ECABCEC0[v378])(&v524, v377 + 32, a3 + 32);
            *(_DWORD *)(v377 + 48) = v378;
          }
          *(unsigned char *)(v377 + 56) = 1;
        }
        *(void *)uint64_t v377 = off_1ECABC8B0;
        *(void *)(v377 + 64) = *(void *)(a3 + 64);
        *(void *)(v377 + 72) = &unk_1ECABC008;
        *(_OWORD *)(v377 + 80) = *(_OWORD *)(a3 + 80);
        *(void *)(v377 + 72) = off_1ECABC030;
        unint64_t v379 = *(_DWORD **)(a3 + 96);
        if (v379) {
          *v379 += 2;
        }
        *(void *)(v377 + 96) = v379;
        *(void *)(v377 + 104) = &unk_1ECABC008;
        *(_OWORD *)(v377 + 112) = *(_OWORD *)(a3 + 112);
        *(void *)(v377 + 104) = off_1ECABC030;
        unint64_t v380 = *(_DWORD **)(a3 + 128);
        if (v380) {
          *v380 += 2;
        }
        *(void *)(v377 + 128) = v380;
        *(void *)(v376 + 312) += 136;
        unint64_t v381 = *(unsigned int *)(v376 + 356);
        if (v381 == *(_DWORD *)(v376 + 352))
        {
          unint64_t v382 = v381 + (v381 >> 2);
          if (v382 >= 0x10) {
            unint64_t v383 = v382 + 1;
          }
          else {
            unint64_t v383 = 16;
          }
          if (v383 <= v381 + 1) {
            unint64_t v384 = v381 + 1;
          }
          else {
            unint64_t v384 = v383;
          }
          if (v384 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x18256AC5CLL);
          }
          v385 = *(void **)(v376 + 344);
          v386 = (void *)WTF::fastMalloc((WTF *)(8 * v384));
          *(_DWORD *)(v376 + 352) = v384;
          *(void *)(v376 + 344) = v386;
          memcpy(v386, v385, 8 * v381);
          if (v385)
          {
            if (*(void **)(v376 + 344) == v385)
            {
              *(void *)(v376 + 344) = 0;
              *(_DWORD *)(v376 + 352) = 0;
            }
            WTF::fastFree((WTF *)v385, v387);
          }
          unint64_t v381 = *(unsigned int *)(v376 + 356);
          v388 = (void *)(*(void *)(v376 + 344) + 8 * v381);
        }
        else
        {
          v388 = (void *)(*(void *)(v376 + 344) + 8 * v381);
        }
        void *v388 = v377;
        *(_DWORD *)(v376 + 356) = v381 + 1;
        uint64_t v389 = *v209;
        long long v524 = 0;
        *(void *)v525 = 0;
        uint64_t v390 = (void *)WTF::fastMalloc((WTF *)8);
        DWORD2(v513) = 1;
        *(void *)&long long v513 = v390;
        *uint64_t v390 = v377;
        HIDWORD(v513) = 1;
        unint64_t v392 = (unint64_t)WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>((void *)(v389 + 312), &v524, (uint64_t)v374, (uint64_t *)&v513);
        unint64_t v393 = (WTF *)v513;
        if ((void)v513)
        {
          *(void *)&long long v513 = 0;
          DWORD2(v513) = 0;
          WTF::fastFree(v393, v391);
        }
        unint64_t v503 = v392;
        *(void *)(v392 + 24) = *(void *)(v377 + 24);
        uint64_t v512 = *v209;
        *(void *)&long long v513 = a3;
        long long v514 = *(_OWORD *)(a3 + 8);
        uint64_t v394 = *(void *)(a3 + 24);
        *((void *)&v513 + 1) = &unk_1ECABBFE0;
        uint64_t v515 = v394;
        v516[0] = 0;
        unsigned __int8 v518 = 0;
        int v395 = *(unsigned __int8 *)(a3 + 56);
        if (*(unsigned char *)(a3 + 56))
        {
          int v517 = -1;
          unint64_t v392 = *(unsigned int *)(a3 + 48);
          if (v392 != -1)
          {
            ((void (*)(void (***)(WGSL::AST::Identifier *__hidden), unsigned char *, uint64_t))off_1ECABCEC0[v392])(&v524, v516, a3 + 32);
            int v517 = v392;
          }
          unsigned __int8 v518 = 1;
        }
        uint64_t v396 = *(void *)(a3 + 64);
        *((void *)&v513 + 1) = off_1ECABC8B0;
        *(_OWORD *)&v519[16] = *(_OWORD *)(a3 + 80);
        *(void *)uint64_t v519 = v396;
        *(void *)&v519[8] = off_1ECABC030;
        v397 = *(_DWORD **)(a3 + 96);
        if (v397) {
          *v397 += 2;
        }
        long long v522 = *(_OWORD *)(a3 + 112);
        unsigned int v520 = v397;
        v521 = off_1ECABC030;
        v398 = *(_DWORD **)(a3 + 128);
        if (v398) {
          *v398 += 2;
        }
        v399 = (uint64_t *)(v512 + 400);
        unint64_t v523 = v398;
        unint64_t v400 = *(unsigned int *)(v512 + 412);
        if (v400 == *(_DWORD *)(v512 + 408))
        {
          unint64_t v401 = v400 + (v400 >> 2);
          if (v401 >= 0x10) {
            unint64_t v402 = v401 + 1;
          }
          else {
            unint64_t v402 = 16;
          }
          if (v402 <= v400 + 1) {
            unint64_t v403 = v400 + 1;
          }
          else {
            unint64_t v403 = v402;
          }
          WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v399, v403);
          uint64_t v404 = *(unsigned int *)(v512 + 412);
          uint64_t v405 = *(void *)(v512 + 400);
          unsigned int v406 = (void (**)(WGSL::AST::Identifier *__hidden))v513;
          *(_OWORD *)&v525[8] = v514;
          uint64_t v407 = v515;
          long long v524 = (void (**)(WGSL::AST::Identifier *__hidden))v513;
          *(void *)v525 = &unk_1ECABBFE0;
          uint64_t v526 = v515;
          v527[0] = 0;
          unsigned __int8 v529 = 0;
          int v491 = v518;
          if (v518)
          {
            int v528 = -1;
            LODWORD(v400) = v517;
            if (v517 != -1)
            {
              uint64_t v408 = v404;
              uint64_t v409 = v405;
              ((void (*)(long long *, unsigned char *, unsigned char *))off_1ECABCF18[v517])(&v536, v527, v516);
              uint64_t v405 = v409;
              uint64_t v404 = v408;
              int v528 = v400;
              unsigned int v406 = v524;
              uint64_t v407 = v526;
            }
            int v492 = 1;
            unsigned __int8 v529 = 1;
          }
          else
          {
            int v492 = 0;
          }
          uint64_t v476 = *(void *)v519;
          *(void *)v525 = off_1ECABC8B0;
          *(_OWORD *)&v530[16] = *(_OWORD *)&v519[16];
          uint64_t v477 = v520;
          unsigned int v520 = 0;
          *(void *)v530 = *(void *)v519;
          *(void *)&v530[8] = off_1ECABC030;
          long long v533 = v522;
          unsigned int v478 = v523;
          unint64_t v523 = 0;
          v531 = v477;
          v532 = off_1ECABC030;
          uint64_t v534 = v478;
          uint64_t v479 = v405 + 32 * v404;
          *(void *)(v479 + 24) = 0;
          unint64_t v480 = (void *)(v479 + 24);
          BOOL v481 = (char *)operator new(0x98uLL);
          char v482 = v481;
          *(void *)BOOL v481 = &unk_1ECABCFC8;
          *((void *)v481 + 1) = v406;
          *(_OWORD *)(v481 + 24) = *(_OWORD *)&v525[8];
          *((void *)v481 + 2) = &unk_1ECABBFE0;
          *((void *)v481 + 5) = v407;
          v481[48] = 0;
          v481[72] = 0;
          if (v491)
          {
            *((_DWORD *)v481 + 16) = -1;
            int v483 = v492;
            if (v400 != -1)
            {
              ((void (*)(long long *, char *, unsigned char *))off_1ECABCF18[v400])(&v536, v481 + 48, v527);
              *((_DWORD *)v482 + 16) = v400;
              uint64_t v476 = *(void *)v530;
              uint64_t v477 = v531;
              unsigned int v478 = v534;
              int v483 = v529;
            }
            v482[72] = 1;
          }
          else
          {
            int v483 = v492;
          }
          *((void *)v482 + 2) = off_1ECABC8B0;
          *((_OWORD *)v482 + 6) = *(_OWORD *)&v530[16];
          *((void *)v482 + 10) = v476;
          *((void *)v482 + 11) = off_1ECABC030;
          *((_OWORD *)v482 + 8) = v533;
          *((void *)v482 + 14) = v477;
          *((void *)v482 + 15) = off_1ECABC030;
          *((void *)v482 + 18) = v478;
          *unint64_t v480 = v482;
          uint64_t v534 = 0;
          v531 = 0;
          v532 = off_1ECABC030;
          *(void *)&v530[8] = off_1ECABC030;
          *(void *)v525 = &unk_1ECABBFE0;
          if (v483 && v528 != -1) {
            ((void (*)(long long *, unsigned char *))off_1ECABCE68[v528])(&v536, v527);
          }
          ++*(_DWORD *)(v512 + 412);
          v424 = (const WGSL::AST::CallExpression *)v503;
          uint64_t v418 = a3 + 32;
        }
        else
        {
          uint64_t v410 = *v399;
          int v411 = (void (**)(WGSL::AST::Identifier *__hidden))v513;
          *(_OWORD *)&v525[8] = v514;
          uint64_t v412 = v515;
          long long v524 = (void (**)(WGSL::AST::Identifier *__hidden))v513;
          *(void *)v525 = &unk_1ECABBFE0;
          uint64_t v526 = v515;
          v527[0] = 0;
          unsigned __int8 v529 = 0;
          if (v395)
          {
            int v528 = -1;
            if (v392 != -1)
            {
              uint64_t v413 = v410;
              ((void (*)(long long *, unsigned char *, unsigned char *))off_1ECABCF18[v392])(&v536, v527, v516);
              uint64_t v410 = v413;
              int v528 = v392;
              v397 = v520;
              v398 = v523;
              int v411 = v524;
              uint64_t v412 = v526;
            }
            unsigned __int8 v529 = 1;
          }
          *(void *)v525 = off_1ECABC8B0;
          *(void *)v530 = *(void *)v519;
          *(_OWORD *)&v530[16] = *(_OWORD *)&v519[16];
          unsigned int v520 = 0;
          *(void *)&v530[8] = off_1ECABC030;
          v531 = v397;
          long long v533 = v522;
          unint64_t v523 = 0;
          v532 = off_1ECABC030;
          uint64_t v534 = v398;
          uint64_t v414 = v410 + 32 * v400;
          *(void *)(v414 + 24) = 0;
          uint64_t v415 = (void *)(v414 + 24);
          uint64_t v416 = (char *)operator new(0x98uLL);
          uint64_t v417 = v416;
          *(void *)uint64_t v416 = &unk_1ECABCFC8;
          *((void *)v416 + 1) = v411;
          *(_OWORD *)(v416 + 24) = *(_OWORD *)&v525[8];
          *((void *)v416 + 2) = &unk_1ECABBFE0;
          *((void *)v416 + 5) = v412;
          v416[48] = 0;
          v416[72] = 0;
          uint64_t v418 = a3 + 32;
          if (v395)
          {
            *((_DWORD *)v416 + 16) = -1;
            int v419 = v528;
            if (v528 != -1)
            {
              ((void (*)(long long *, char *, unsigned char *))off_1ECABCF18[v528])(&v536, v416 + 48, v527);
              *((_DWORD *)v417 + 16) = v419;
            }
            v417[72] = 1;
          }
          *((void *)v417 + 2) = off_1ECABC8B0;
          uint64_t v420 = *(void *)v530;
          *((_OWORD *)v417 + 6) = *(_OWORD *)&v530[16];
          *((void *)v417 + 10) = v420;
          *((void *)v417 + 11) = off_1ECABC030;
          v421 = v531;
          v531 = 0;
          *((_OWORD *)v417 + 8) = v533;
          *((void *)v417 + 14) = v421;
          *((void *)v417 + 15) = off_1ECABC030;
          uint64_t v422 = v534;
          uint64_t v534 = 0;
          *((void *)v417 + 18) = v422;
          *uint64_t v415 = v417;
          v423 = v534;
          v532 = off_1ECABC030;
          uint64_t v534 = 0;
          v424 = (const WGSL::AST::CallExpression *)v503;
          if (v423)
          {
            if (*v423 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v423 -= 2;
            }
          }
          int v484 = v531;
          *(void *)&v530[8] = off_1ECABC030;
          v531 = 0;
          if (v484)
          {
            if (*v484 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v484 -= 2;
            }
          }
          *(void *)v525 = &unk_1ECABBFE0;
          if (v529 && v528 != -1) {
            ((void (*)(long long *, unsigned char *))off_1ECABCE68[v528])(&v536, v527);
          }
          ++*(_DWORD *)(v512 + 412);
        }
        uint64_t v485 = v523;
        v521 = off_1ECABC030;
        unint64_t v523 = 0;
        if (v485)
        {
          if (*v485 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v485 -= 2;
          }
        }
        unsigned int v486 = v520;
        *(void *)&v519[8] = off_1ECABC030;
        unsigned int v520 = 0;
        if (v486)
        {
          if (*v486 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v486 -= 2;
          }
        }
        *((void *)&v513 + 1) = &unk_1ECABBFE0;
        if (v518 && v517 != -1) {
          ((void (*)(void (***)(WGSL::AST::Identifier *__hidden), unsigned char *))off_1ECABCE68[v517])(&v524, v516);
        }
        *(void *)(a3 + 104) = off_1ECABC030;
        uint64_t v487 = *(_DWORD **)(a3 + 128);
        *(void *)(a3 + 128) = 0;
        if (v487)
        {
          if (*v487 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v487 -= 2;
          }
        }
        *(void *)(a3 + 72) = off_1ECABC030;
        uint64_t v488 = *(_DWORD **)(a3 + 96);
        *(void *)(a3 + 96) = 0;
        if (v488)
        {
          if (*v488 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v488 -= 2;
          }
        }
        *(void *)a3 = &unk_1ECABBFE0;
        if (*(unsigned char *)(a3 + 56))
        {
          uint64_t v489 = *(unsigned int *)(a3 + 48);
          if (v489 != -1) {
            ((void (*)(void (***)(WGSL::AST::Identifier *__hidden), uint64_t))off_1ECABCE68[v489])(&v524, v418);
          }
          *(_DWORD *)(a3 + 48) = -1;
        }
        uint64_t v442 = a3;
        uint64_t v443 = v424;
LABEL_731:
        WGSL::AST::CallExpression::CallExpression(v442, v443);
        return v15 ^ 3;
      }
      return v15;
    case 0x16u:
      uint64_t Variable = WGSL::RewriteGlobalVariables::readVariable((WGSL::RewriteGlobalVariables *)a1, (WGSL::AST::IdentifierExpression *)a3, v16);
      if (Variable && *(unsigned char *)(Variable + 8))
      {
        uint64_t v15 = WGSL::Type::packing(*(WGSL::Type **)(a3 + 24));
        if ((v15 & v5) != 0) {
          return v15;
        }
      }
      else
      {
        uint64_t v15 = 2;
        if ((v5 & 2) != 0) {
          return v15;
        }
      }
      uint64_t v67 = *(void *)(a3 + 24);
      int v68 = *(_DWORD *)(v67 + 48);
      if (v68 == 10)
      {
        uint64_t v67 = *(void *)(v67 + 8);
        int v68 = *(_DWORD *)(v67 + 48);
      }
      if (v68 == 3)
      {
        uint64_t v114 = (unsigned char *)a1[5];
        if (v15) {
          v114[10] = 1;
        }
        else {
          v114[9] = 1;
        }
      }
      else
      {
        if (v68 == 4)
        {
          if ((WGSL::Type::isConstructible((WGSL::Type *)v67) & 1) == 0) {
            return v15;
          }
          uint64_t v70 = a1[5];
          unint64_t v69 = a1 + 5;
          unint64_t v71 = (void *)(v70 + 312);
          long long v513 = 0uLL;
LABEL_359:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          long long v524 = off_1ECABC030;
          *(void *)v525 = 0;
          *(void *)&v525[8] = 0;
          *(void *)&v525[16] = v536;
          int v256 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v71, &v513, (uint64_t)&v524);
          int v257 = *(_DWORD **)&v525[16];
          long long v524 = off_1ECABC030;
          *(void *)&v525[16] = 0;
          if (v257)
          {
            if (*v257 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v257 -= 2;
            }
          }
          uint64_t v258 = *v69;
          v256[3] = *(void *)(*v69 + 120);
          uint64_t v259 = *(void *)(v258 + 312);
          if ((unint64_t)(*(void *)(v258 + 320) - v259) <= 0x5F)
          {
            WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v258 + 312));
            uint64_t v259 = *(void *)(v258 + 312);
          }
          *(void *)uint64_t v259 = &unk_1ECABC008;
          *(_OWORD *)(v259 + 8) = *(_OWORD *)(a3 + 8);
          *(void *)uint64_t v259 = &unk_1ECABBFE0;
          *(void *)(v259 + 24) = *(void *)(a3 + 24);
          *(unsigned char *)(v259 + 32) = 0;
          *(unsigned char *)(v259 + 56) = 0;
          if (*(unsigned char *)(a3 + 56))
          {
            *(_DWORD *)(v259 + 48) = -1;
            uint64_t v260 = *(unsigned int *)(a3 + 48);
            if (v260 != -1)
            {
              ((void (*)(void (***)(WGSL::AST::Identifier *__hidden), uint64_t, uint64_t))off_1ECABCEC0[v260])(&v524, v259 + 32, a3 + 32);
              *(_DWORD *)(v259 + 48) = v260;
            }
            *(unsigned char *)(v259 + 56) = 1;
          }
          *(void *)uint64_t v259 = off_1ECABBFB8;
          *(void *)(v259 + 64) = &unk_1ECABC008;
          *(_OWORD *)(v259 + 72) = *(_OWORD *)(a3 + 72);
          *(void *)(v259 + 64) = off_1ECABC030;
          BOOL v261 = *(_DWORD **)(a3 + 88);
          if (v261) {
            *v261 += 2;
          }
          *(void *)(v259 + 88) = v261;
          *(void *)(v258 + 312) += 96;
          unint64_t v262 = *(unsigned int *)(v258 + 356);
          if (v262 == *(_DWORD *)(v258 + 352))
          {
            unint64_t v263 = v262 + (v262 >> 2);
            if (v263 >= 0x10) {
              unint64_t v264 = v263 + 1;
            }
            else {
              unint64_t v264 = 16;
            }
            if (v264 <= v262 + 1) {
              unint64_t v265 = v262 + 1;
            }
            else {
              unint64_t v265 = v264;
            }
            if (v265 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x18256AC44);
            }
            uint64_t v266 = *(void **)(v258 + 344);
            v267 = (void *)WTF::fastMalloc((WTF *)(8 * v265));
            *(_DWORD *)(v258 + 352) = v265;
            *(void *)(v258 + 344) = v267;
            memcpy(v267, v266, 8 * v262);
            if (v266)
            {
              if (*(void **)(v258 + 344) == v266)
              {
                *(void *)(v258 + 344) = 0;
                *(_DWORD *)(v258 + 352) = 0;
              }
              WTF::fastFree((WTF *)v266, v268);
            }
            unint64_t v262 = *(unsigned int *)(v258 + 356);
            unint64_t v269 = (void *)(*(void *)(v258 + 344) + 8 * v262);
          }
          else
          {
            unint64_t v269 = (void *)(*(void *)(v258 + 344) + 8 * v262);
          }
          *unint64_t v269 = v259;
          *(_DWORD *)(v258 + 356) = v262 + 1;
          uint64_t v270 = *v69;
          long long v524 = 0;
          *(void *)v525 = 0;
          unsigned long long v271 = (void *)WTF::fastMalloc((WTF *)8);
          DWORD2(v513) = 1;
          *(void *)&long long v513 = v271;
          *unsigned long long v271 = v259;
          HIDWORD(v513) = 1;
          double v273 = (const WGSL::AST::CallExpression *)WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>((void *)(v270 + 312), &v524, (uint64_t)v256, (uint64_t *)&v513);
          double v274 = (WTF *)v513;
          if ((void)v513)
          {
            *(void *)&long long v513 = 0;
            DWORD2(v513) = 0;
            WTF::fastFree(v274, v272);
          }
          *((void *)v273 + 3) = *(void *)(v259 + 24);
          uint64_t v275 = *v69;
          long long v514 = *(_OWORD *)(a3 + 8);
          uint64_t v276 = *(void *)(a3 + 24);
          v506 = v273;
          *(void *)&long long v513 = a3;
          *((void *)&v513 + 1) = &unk_1ECABBFE0;
          uint64_t v515 = v276;
          v516[0] = 0;
          unsigned __int8 v518 = 0;
          int v277 = *(unsigned __int8 *)(a3 + 56);
          if (*(unsigned char *)(a3 + 56))
          {
            int v517 = -1;
            uint64_t v258 = *(unsigned int *)(a3 + 48);
            if (v258 != -1)
            {
              int v278 = v277;
              ((void (*)(void (***)(WGSL::AST::Identifier *__hidden), unsigned char *, uint64_t))off_1ECABCEC0[v258])(&v524, v516, a3 + 32);
              int v277 = v278;
              int v517 = v258;
            }
            unsigned __int8 v518 = 1;
          }
          *((void *)&v513 + 1) = off_1ECABBFB8;
          *(_OWORD *)&v519[8] = *(_OWORD *)(a3 + 72);
          *(void *)uint64_t v519 = off_1ECABC030;
          unint64_t v279 = *(_DWORD **)(a3 + 88);
          if (v279) {
            *v279 += 2;
          }
          uint64_t v280 = (uint64_t *)(v275 + 400);
          *(void *)&v519[24] = v279;
          unint64_t v281 = *(unsigned int *)(v275 + 412);
          uint64_t v499 = v275;
          if (v281 == *(_DWORD *)(v275 + 408))
          {
            unint64_t v282 = v281 + (v281 >> 2);
            if (v282 >= 0x10) {
              unint64_t v283 = v282 + 1;
            }
            else {
              unint64_t v283 = 16;
            }
            if (v283 <= v281 + 1) {
              unint64_t v284 = v281 + 1;
            }
            else {
              unint64_t v284 = v283;
            }
            WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v280, v284);
            uint64_t v285 = *(unsigned int *)(v275 + 412);
            uint64_t v286 = *(void *)(v275 + 400);
            int v287 = (void (**)(WGSL::AST::Identifier *__hidden))v513;
            *(_OWORD *)&v525[8] = v514;
            uint64_t v288 = v515;
            long long v524 = (void (**)(WGSL::AST::Identifier *__hidden))v513;
            *(void *)v525 = &unk_1ECABBFE0;
            uint64_t v526 = v515;
            v527[0] = 0;
            unsigned __int8 v529 = 0;
            int v289 = v518;
            if (v518)
            {
              int v528 = -1;
              LODWORD(v281) = v517;
              if (v517 != -1)
              {
                uint64_t v290 = v285;
                uint64_t v291 = v286;
                ((void (*)(long long *, unsigned char *, unsigned char *))off_1ECABCF18[v517])(&v536, v527, v516);
                uint64_t v286 = v291;
                uint64_t v285 = v290;
                int v528 = v281;
                int v287 = v524;
                uint64_t v288 = v526;
              }
              int v495 = 1;
              unsigned __int8 v529 = 1;
            }
            else
            {
              int v495 = 0;
            }
            *(void *)v525 = off_1ECABBFB8;
            *(_OWORD *)&v530[8] = *(_OWORD *)&v519[8];
            uint64_t v425 = *(void *)&v519[24];
            *(void *)&v519[24] = 0;
            *(void *)v530 = off_1ECABC030;
            *(void *)&v530[24] = v425;
            uint64_t v426 = v286 + 32 * v285;
            *(void *)(v426 + 24) = 0;
            unint64_t v427 = (void *)(v426 + 24);
            char v428 = (char *)operator new(0x70uLL);
            int v429 = v428;
            *(void *)char v428 = &unk_1ECABCF80;
            *((void *)v428 + 1) = v287;
            *(_OWORD *)(v428 + 24) = *(_OWORD *)&v525[8];
            *((void *)v428 + 2) = &unk_1ECABBFE0;
            *((void *)v428 + 5) = v288;
            v428[48] = 0;
            v428[72] = 0;
            if (v289)
            {
              *((_DWORD *)v428 + 16) = -1;
              char v430 = v506;
              int v431 = v495;
              if (v281 != -1)
              {
                ((void (*)(long long *, char *, unsigned char *))off_1ECABCF18[v281])(&v536, v428 + 48, v527);
                *((_DWORD *)v429 + 16) = v281;
                uint64_t v425 = *(void *)&v530[24];
                int v431 = v529;
              }
              v429[72] = 1;
            }
            else
            {
              char v430 = v506;
              int v431 = v495;
            }
            *((void *)v429 + 2) = off_1ECABBFB8;
            *(_OWORD *)(v429 + 88) = *(_OWORD *)&v530[8];
            *((void *)v429 + 10) = off_1ECABC030;
            *((void *)v429 + 13) = v425;
            *unint64_t v427 = v429;
            *(void *)&v530[24] = 0;
            *(void *)v530 = off_1ECABC030;
            *(void *)v525 = &unk_1ECABBFE0;
            if (v431 && v528 != -1) {
              ((void (*)(long long *, unsigned char *))off_1ECABCE68[v528])(&v536, v527);
            }
            ++*(_DWORD *)(v499 + 412);
            uint64_t v437 = a3 + 32;
          }
          else
          {
            uint64_t v292 = *v280;
            unsigned int v293 = (void (**)(WGSL::AST::Identifier *__hidden))v513;
            *(_OWORD *)&v525[8] = v514;
            uint64_t v294 = v515;
            long long v524 = (void (**)(WGSL::AST::Identifier *__hidden))v513;
            *(void *)v525 = &unk_1ECABBFE0;
            uint64_t v526 = v515;
            v527[0] = 0;
            unsigned __int8 v529 = 0;
            int v496 = v277;
            if (v277)
            {
              int v528 = -1;
              if (v258 != -1)
              {
                uint64_t v295 = v292;
                ((void (*)(long long *, unsigned char *, unsigned char *))off_1ECABCF18[v258])(&v536, v527, v516);
                uint64_t v292 = v295;
                int v528 = v258;
                unint64_t v279 = *(_DWORD **)&v519[24];
                unsigned int v293 = v524;
                uint64_t v294 = v526;
              }
              int v493 = 1;
              unsigned __int8 v529 = 1;
            }
            else
            {
              int v493 = 0;
            }
            *(void *)v525 = off_1ECABBFB8;
            *(_OWORD *)&v530[8] = *(_OWORD *)&v519[8];
            *(void *)&v519[24] = 0;
            *(void *)v530 = off_1ECABC030;
            *(void *)&v530[24] = v279;
            uint64_t v432 = v292 + 32 * v281;
            *(void *)(v432 + 24) = 0;
            unint64_t v433 = (void *)(v432 + 24);
            BOOL v434 = (char *)operator new(0x70uLL);
            unint64_t v435 = v434;
            *(void *)BOOL v434 = &unk_1ECABCF80;
            *((void *)v434 + 1) = v293;
            *(_OWORD *)(v434 + 24) = *(_OWORD *)&v525[8];
            *((void *)v434 + 2) = &unk_1ECABBFE0;
            *((void *)v434 + 5) = v294;
            v434[48] = 0;
            v434[72] = 0;
            if (v496)
            {
              *((_DWORD *)v434 + 16) = -1;
              int v436 = v528;
              uint64_t v437 = a3 + 32;
              int v438 = v493;
              if (v528 != -1)
              {
                ((void (*)(long long *, char *, unsigned char *))off_1ECABCF18[v528])(&v536, v434 + 48, v527);
                *((_DWORD *)v435 + 16) = v436;
                unint64_t v279 = *(_DWORD **)&v530[24];
                int v438 = v529;
              }
              v435[72] = 1;
            }
            else
            {
              uint64_t v437 = a3 + 32;
              int v438 = v493;
            }
            *((void *)v435 + 2) = off_1ECABBFB8;
            *(_OWORD *)(v435 + 88) = *(_OWORD *)&v530[8];
            *((void *)v435 + 10) = off_1ECABC030;
            *((void *)v435 + 13) = v279;
            *unint64_t v433 = v435;
            *(void *)&v530[24] = 0;
            *(void *)v530 = off_1ECABC030;
            *(void *)v525 = &unk_1ECABBFE0;
            if (v438 && v528 != -1) {
              ((void (*)(long long *, unsigned char *))off_1ECABCE68[v528])(&v536, v527);
            }
            ++*(_DWORD *)(v499 + 412);
            char v430 = v506;
          }
          unsigned int v439 = *(_DWORD **)&v519[24];
          *(void *)uint64_t v519 = off_1ECABC030;
          *(void *)&v519[24] = 0;
          if (v439)
          {
            if (*v439 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v439 -= 2;
            }
          }
          *((void *)&v513 + 1) = &unk_1ECABBFE0;
          if (v518 && v517 != -1) {
            ((void (*)(void (***)(WGSL::AST::Identifier *__hidden), unsigned char *))off_1ECABCE68[v517])(&v524, v516);
          }
          *(void *)(a3 + 64) = off_1ECABC030;
          v440 = *(_DWORD **)(a3 + 88);
          *(void *)(a3 + 88) = 0;
          if (v440)
          {
            if (*v440 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v440 -= 2;
            }
          }
          *(void *)a3 = &unk_1ECABBFE0;
          if (*(unsigned char *)(a3 + 56))
          {
            uint64_t v441 = *(unsigned int *)(a3 + 48);
            if (v441 != -1) {
              ((void (*)(void (***)(WGSL::AST::Identifier *__hidden), uint64_t))off_1ECABCE68[v441])(&v524, v437);
            }
            *(_DWORD *)(a3 + 48) = -1;
          }
          uint64_t v442 = a3;
          uint64_t v443 = v430;
          goto LABEL_731;
        }
        uint64_t v114 = (unsigned char *)a1[5];
        if (v15) {
          v114[12] = 1;
        }
        else {
          v114[11] = 1;
        }
      }
      unint64_t v69 = a1 + 5;
      unint64_t v71 = v114 + 312;
      long long v513 = 0uLL;
      goto LABEL_359;
    case 0x17u:
      uint64_t v15 = WGSL::RewriteGlobalVariables::pack(a1, 3, *(void *)(a3 + 64));
      if ((v15 & v5) != 0) {
        return v15;
      }
      uint64_t v58 = *(void *)(a3 + 24);
      int v59 = *(_DWORD *)(v58 + 48);
      if (v59 == 10)
      {
        uint64_t v58 = *(void *)(v58 + 8);
        int v59 = *(_DWORD *)(v58 + 48);
      }
      if (v59 == 3)
      {
        unsigned int v115 = (unsigned char *)a1[5];
        if (v15) {
          v115[10] = 1;
        }
        else {
          v115[9] = 1;
        }
      }
      else
      {
        if (v59 == 4)
        {
          if ((WGSL::Type::isConstructible((WGSL::Type *)v58) & 1) == 0) {
            return v15;
          }
          uint64_t v61 = a1[5];
          uint64_t v60 = a1 + 5;
          unint64_t v62 = (void *)(v61 + 312);
          long long v513 = 0uLL;
LABEL_410:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          long long v524 = off_1ECABC030;
          *(void *)v525 = 0;
          *(void *)&v525[8] = 0;
          *(void *)&v525[16] = v536;
          uint64_t v296 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v62, &v513, (uint64_t)&v524);
          uint64_t v297 = *(_DWORD **)&v525[16];
          long long v524 = off_1ECABC030;
          *(void *)&v525[16] = 0;
          if (v297)
          {
            if (*v297 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v297 -= 2;
            }
          }
          uint64_t v298 = *v60;
          v296[3] = *(void *)(*v60 + 120);
          uint64_t v299 = *(void *)(v298 + 312);
          if ((unint64_t)(*(void *)(v298 + 320) - v299) <= 0x47)
          {
            WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v298 + 312));
            uint64_t v299 = *(void *)(v298 + 312);
          }
          *(void *)uint64_t v299 = &unk_1ECABC008;
          *(_OWORD *)(v299 + 8) = *(_OWORD *)(a3 + 8);
          *(void *)uint64_t v299 = &unk_1ECABBFE0;
          *(void *)(v299 + 24) = *(void *)(a3 + 24);
          *(unsigned char *)(v299 + 32) = 0;
          *(unsigned char *)(v299 + 56) = 0;
          if (*(unsigned char *)(a3 + 56))
          {
            *(_DWORD *)(v299 + 48) = -1;
            uint64_t v300 = *(unsigned int *)(a3 + 48);
            if (v300 != -1)
            {
              ((void (*)(void (***)(WGSL::AST::Identifier *__hidden), uint64_t, uint64_t))off_1ECABCEC0[v300])(&v524, v299 + 32, a3 + 32);
              *(_DWORD *)(v299 + 48) = v300;
            }
            *(unsigned char *)(v299 + 56) = 1;
          }
          *(void *)uint64_t v299 = off_1ECABD058;
          *(void *)(v299 + 64) = *(void *)(a3 + 64);
          *(void *)(v298 + 312) += 72;
          unint64_t v301 = *(unsigned int *)(v298 + 356);
          if (v301 == *(_DWORD *)(v298 + 352))
          {
            unint64_t v302 = v301 + (v301 >> 2);
            if (v302 >= 0x10) {
              unint64_t v303 = v302 + 1;
            }
            else {
              unint64_t v303 = 16;
            }
            if (v303 <= v301 + 1) {
              unint64_t v304 = v301 + 1;
            }
            else {
              unint64_t v304 = v303;
            }
            if (v304 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x18256AC4CLL);
            }
            int v305 = *(void **)(v298 + 344);
            v306 = (void *)WTF::fastMalloc((WTF *)(8 * v304));
            *(_DWORD *)(v298 + 352) = v304;
            *(void *)(v298 + 344) = v306;
            memcpy(v306, v305, 8 * v301);
            if (v305)
            {
              if (*(void **)(v298 + 344) == v305)
              {
                *(void *)(v298 + 344) = 0;
                *(_DWORD *)(v298 + 352) = 0;
              }
              WTF::fastFree((WTF *)v305, v307);
            }
            uint64_t v308 = *(unsigned int *)(v298 + 356);
            v309 = (void *)(*(void *)(v298 + 344) + 8 * v308);
          }
          else
          {
            v309 = (void *)(*(void *)(v298 + 344) + 8 * v301);
            LODWORD(v308) = *(_DWORD *)(v298 + 356);
          }
          unint64_t v310 = a3 + 8;
          void *v309 = v299;
          *(_DWORD *)(v298 + 356) = v308 + 1;
          uint64_t v311 = *v60;
          long long v524 = 0;
          *(void *)v525 = 0;
          uint64_t v312 = (void *)WTF::fastMalloc((WTF *)8);
          DWORD2(v513) = 1;
          *(void *)&long long v513 = v312;
          void *v312 = v299;
          HIDWORD(v513) = 1;
          int v314 = WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>((void *)(v311 + 312), &v524, (uint64_t)v296, (uint64_t *)&v513);
          unsigned int v315 = (WTF *)v513;
          if ((void)v513)
          {
            *(void *)&long long v513 = 0;
            DWORD2(v513) = 0;
            WTF::fastFree(v315, v313);
          }
          v507 = v314;
          v314[3] = *(void *)(v299 + 24);
          uint64_t v316 = *v60;
          long long v514 = *(_OWORD *)v310;
          uint64_t v317 = *(void *)(a3 + 24);
          *(void *)&long long v513 = a3;
          *((void *)&v513 + 1) = &unk_1ECABBFE0;
          uint64_t v515 = v317;
          v516[0] = 0;
          unsigned __int8 v518 = 0;
          int v318 = *(unsigned __int8 *)(a3 + 56);
          if (*(unsigned char *)(a3 + 56))
          {
            int v517 = -1;
            unint64_t v310 = *(unsigned int *)(a3 + 48);
            if (v310 != -1)
            {
              ((void (*)(void (***)(WGSL::AST::Identifier *__hidden), unsigned char *, uint64_t))off_1ECABCEC0[v310])(&v524, v516, a3 + 32);
              int v517 = v310;
            }
            unsigned __int8 v518 = 1;
          }
          uint64_t v319 = (uint64_t *)(v316 + 400);
          uint64_t v320 = *(void *)(a3 + 64);
          *((void *)&v513 + 1) = off_1ECABD058;
          *(void *)uint64_t v519 = v320;
          unint64_t v321 = *(unsigned int *)(v316 + 412);
          uint64_t v501 = v316;
          if (v321 == *(_DWORD *)(v316 + 408))
          {
            unint64_t v322 = v321 + (v321 >> 2);
            if (v322 >= 0x10) {
              unint64_t v323 = v322 + 1;
            }
            else {
              unint64_t v323 = 16;
            }
            if (v323 <= v321 + 1) {
              unint64_t v324 = v321 + 1;
            }
            else {
              unint64_t v324 = v323;
            }
            WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v319, v324);
            uint64_t v325 = *(unsigned int *)(v316 + 412);
            uint64_t v326 = *(void *)(v316 + 400);
            unsigned int v327 = (void (**)(WGSL::AST::Identifier *__hidden))v513;
            *(_OWORD *)&v525[8] = v514;
            uint64_t v328 = v515;
            long long v524 = (void (**)(WGSL::AST::Identifier *__hidden))v513;
            *(void *)v525 = &unk_1ECABBFE0;
            uint64_t v526 = v515;
            v527[0] = 0;
            unsigned __int8 v529 = 0;
            int v329 = v518;
            if (v518)
            {
              int v528 = -1;
              int v318 = v517;
              if (v517 != -1)
              {
                ((void (*)(long long *, unsigned char *, unsigned char *))off_1ECABCF18[v517])(&v536, v527, v516);
                int v528 = v318;
                unsigned int v327 = v524;
                uint64_t v328 = v526;
              }
              int v330 = 1;
              unsigned __int8 v529 = 1;
            }
            else
            {
              int v330 = 0;
            }
            uint64_t v454 = *(void *)v519;
            *(void *)v525 = off_1ECABD058;
            *(void *)v530 = *(void *)v519;
            uint64_t v455 = v326 + 32 * v325;
            *(void *)(v455 + 24) = 0;
            uint64_t v456 = (void *)(v455 + 24);
            int v457 = (char *)operator new(0x58uLL);
            uint64_t v458 = v457;
            *(void *)int v457 = &unk_1ECABD158;
            *((void *)v457 + 1) = v327;
            *(_OWORD *)(v457 + 24) = *(_OWORD *)&v525[8];
            *((void *)v457 + 2) = &unk_1ECABBFE0;
            *((void *)v457 + 5) = v328;
            v457[48] = 0;
            v457[72] = 0;
            if (v329)
            {
              *((_DWORD *)v457 + 16) = -1;
              uint64_t v459 = v507;
              if (v318 != -1)
              {
                ((void (*)(long long *, char *, unsigned char *))off_1ECABCF18[v318])(&v536, v457 + 48, v527);
                *((_DWORD *)v458 + 16) = v318;
                uint64_t v454 = *(void *)v530;
                int v330 = v529;
              }
              v458[72] = 1;
            }
            else
            {
              int v330 = 0;
              uint64_t v459 = v507;
            }
            *((void *)v458 + 2) = off_1ECABD058;
            *((void *)v458 + 10) = v454;
            *uint64_t v456 = v458;
            *(void *)v525 = &unk_1ECABBFE0;
            if (v330 && v528 != -1) {
              ((void (*)(long long *, unsigned char *))off_1ECABCE68[v528])(&v536, v527);
            }
            ++*(_DWORD *)(v501 + 412);
            uint64_t v464 = a3 + 32;
          }
          else
          {
            uint64_t v331 = *v319;
            int v332 = (void (**)(WGSL::AST::Identifier *__hidden))v513;
            *(_OWORD *)&v525[8] = v514;
            uint64_t v333 = v515;
            long long v524 = (void (**)(WGSL::AST::Identifier *__hidden))v513;
            *(void *)v525 = &unk_1ECABBFE0;
            uint64_t v526 = v515;
            v527[0] = 0;
            unsigned __int8 v529 = 0;
            if (v318)
            {
              int v528 = -1;
              if (v310 != -1)
              {
                uint64_t v334 = v331;
                ((void (*)(long long *, unsigned char *, unsigned char *))off_1ECABCF18[v310])(&v536, v527, v516);
                uint64_t v331 = v334;
                int v528 = v310;
                uint64_t v320 = *(void *)v519;
                int v332 = v524;
                uint64_t v333 = v526;
              }
              int v335 = 1;
              unsigned __int8 v529 = 1;
            }
            else
            {
              int v335 = 0;
            }
            *(void *)v525 = off_1ECABD058;
            *(void *)v530 = v320;
            uint64_t v460 = v331 + 32 * v321;
            *(void *)(v460 + 24) = 0;
            v461 = (void *)(v460 + 24);
            int v462 = (char *)operator new(0x58uLL);
            unint64_t v463 = v462;
            *(void *)int v462 = &unk_1ECABD158;
            *((void *)v462 + 1) = v332;
            *(_OWORD *)(v462 + 24) = *(_OWORD *)&v525[8];
            *((void *)v462 + 2) = &unk_1ECABBFE0;
            *((void *)v462 + 5) = v333;
            v462[48] = 0;
            v462[72] = 0;
            if (v318)
            {
              *((_DWORD *)v462 + 16) = -1;
              uint64_t v464 = a3 + 32;
              if (v310 != -1)
              {
                ((void (*)(long long *, char *, unsigned char *))off_1ECABCF18[v310])(&v536, v462 + 48, v527);
                *((_DWORD *)v463 + 16) = v310;
                uint64_t v320 = *(void *)v530;
                int v335 = v529;
              }
              v463[72] = 1;
            }
            else
            {
              int v335 = 0;
              uint64_t v464 = a3 + 32;
            }
            *((void *)v463 + 2) = off_1ECABD058;
            *((void *)v463 + 10) = v320;
            void *v461 = v463;
            *(void *)v525 = &unk_1ECABBFE0;
            uint64_t v459 = v507;
            if (v335)
            {
              if (v528 != -1) {
                ((void (*)(long long *, unsigned char *))off_1ECABCE68[v528])(&v536, v527);
              }
              int v528 = -1;
            }
            ++*(_DWORD *)(v501 + 412);
          }
          *((void *)&v513 + 1) = &unk_1ECABBFE0;
          if (v518 && v517 != -1) {
            ((void (*)(void (***)(WGSL::AST::Identifier *__hidden), unsigned char *))off_1ECABCE68[v517])(&v524, v516);
          }
          *(void *)a3 = &unk_1ECABBFE0;
          if (*(unsigned char *)(a3 + 56))
          {
            uint64_t v465 = *(unsigned int *)(a3 + 48);
            if (v465 != -1) {
              ((void (*)(void (***)(WGSL::AST::Identifier *__hidden), uint64_t))off_1ECABCE68[v465])(&v524, v464);
            }
            *(_DWORD *)(a3 + 48) = -1;
          }
          *(_OWORD *)(a3 + 8) = *(_OWORD *)(v459 + 1);
          *(void *)(a3 + 24) = 0;
          *(unsigned char *)(a3 + 32) = 0;
          *(unsigned char *)(a3 + 56) = 0;
          *(void *)a3 = off_1ECABD058;
          *(void *)(a3 + 64) = v459;
          uint64_t v466 = v459[3];
          goto LABEL_687;
        }
        unsigned int v115 = (unsigned char *)a1[5];
        if (v15) {
          v115[12] = 1;
        }
        else {
          v115[11] = 1;
        }
      }
      uint64_t v60 = a1 + 5;
      unint64_t v62 = v115 + 312;
      long long v513 = 0uLL;
      goto LABEL_410;
    case 0x18u:
      uint64_t v21 = a3 + 64;
      char v22 = WGSL::RewriteGlobalVariables::pack(a1, 3, *(void *)(a3 + 64));
      uint64_t v15 = 2;
      WGSL::RewriteGlobalVariables::pack(a1, 2, *(void *)(a3 + 72));
      if ((v22 & 2) != 0) {
        goto LABEL_26;
      }
      uint64_t v23 = *(void *)(*(void *)v21 + 24);
      if (!v23) {
        goto LABEL_23;
      }
      int v24 = *(_DWORD *)(v23 + 48);
      if (v24 != 10) {
        goto LABEL_21;
      }
      uint64_t v23 = *(void *)(v23 + 8);
      if (v23)
      {
        int v24 = *(_DWORD *)(v23 + 48);
LABEL_21:
        if (v24 == 11) {
          uint64_t v23 = *(void *)(v23 + 8);
        }
      }
LABEL_23:
      int v25 = *(_DWORD *)(v23 + 48);
      if (v25 == 1) {
        goto LABEL_26;
      }
      if (v25 != 3) {
        goto LABEL_737;
      }
      uint64_t v15 = WGSL::Type::packing(*(WGSL::Type **)v23);
LABEL_26:
      if ((v15 & v5) != 0) {
        return v15;
      }
      uint64_t v26 = *(void *)(a3 + 24);
      int v27 = *(_DWORD *)(v26 + 48);
      if (v27 == 10)
      {
        uint64_t v26 = *(void *)(v26 + 8);
        int v27 = *(_DWORD *)(v26 + 48);
      }
      if (v27 == 3)
      {
        uint64_t v116 = (unsigned char *)a1[5];
        if (v15) {
          v116[10] = 1;
        }
        else {
          v116[9] = 1;
        }
      }
      else
      {
        if (v27 == 4)
        {
          if ((WGSL::Type::isConstructible((WGSL::Type *)v26) & 1) == 0) {
            return v15;
          }
          uint64_t v29 = a1[5];
          unint64_t v28 = (unint64_t)(a1 + 5);
          unsigned int v30 = (void *)(v29 + 312);
          long long v513 = 0uLL;
LABEL_458:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          long long v524 = off_1ECABC030;
          *(void *)v525 = 0;
          *(void *)&v525[8] = 0;
          *(void *)&v525[16] = v536;
          __int16 v336 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v30, &v513, (uint64_t)&v524);
          uint64_t v337 = *(_DWORD **)&v525[16];
          long long v524 = off_1ECABC030;
          *(void *)&v525[16] = 0;
          if (v337)
          {
            if (*v337 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v337 -= 2;
            }
          }
          uint64_t v338 = *(void *)v28;
          v336[3] = *(void *)(*(void *)v28 + 120);
          uint64_t v339 = *(void *)(v338 + 312);
          if ((unint64_t)(*(void *)(v338 + 320) - v339) <= 0x4F)
          {
            WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v338 + 312));
            uint64_t v339 = *(void *)(v338 + 312);
          }
          *(void *)uint64_t v339 = &unk_1ECABC008;
          *(_OWORD *)(v339 + 8) = *(_OWORD *)(a3 + 8);
          *(void *)uint64_t v339 = &unk_1ECABBFE0;
          *(void *)(v339 + 24) = *(void *)(a3 + 24);
          *(unsigned char *)(v339 + 32) = 0;
          uint64_t v508 = a3 + 32;
          *(unsigned char *)(v339 + 56) = 0;
          if (*(unsigned char *)(a3 + 56))
          {
            *(_DWORD *)(v339 + 48) = -1;
            uint64_t v340 = *(unsigned int *)(a3 + 48);
            if (v340 != -1)
            {
              ((void (*)(void (***)(WGSL::AST::Identifier *__hidden), uint64_t, uint64_t))off_1ECABCEC0[v340])(&v524, v339 + 32, v508);
              *(_DWORD *)(v339 + 48) = v340;
            }
            *(unsigned char *)(v339 + 56) = 1;
          }
          *(void *)uint64_t v339 = off_1ECABC180;
          *(_OWORD *)(v339 + 64) = *(_OWORD *)v21;
          *(void *)(v338 + 312) += 80;
          unint64_t v341 = *(unsigned int *)(v338 + 356);
          if (v341 == *(_DWORD *)(v338 + 352))
          {
            unint64_t v342 = v341 + (v341 >> 2);
            if (v342 >= 0x10) {
              unint64_t v343 = v342 + 1;
            }
            else {
              unint64_t v343 = 16;
            }
            if (v343 <= v341 + 1) {
              unint64_t v344 = v341 + 1;
            }
            else {
              unint64_t v344 = v343;
            }
            if (v344 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x18256AC54);
            }
            int v345 = *(void **)(v338 + 344);
            int v346 = (void *)WTF::fastMalloc((WTF *)(8 * v344));
            *(_DWORD *)(v338 + 352) = v344;
            *(void *)(v338 + 344) = v346;
            memcpy(v346, v345, 8 * v341);
            if (v345)
            {
              if (*(void **)(v338 + 344) == v345)
              {
                *(void *)(v338 + 344) = 0;
                *(_DWORD *)(v338 + 352) = 0;
              }
              WTF::fastFree((WTF *)v345, v347);
            }
            unint64_t v341 = *(unsigned int *)(v338 + 356);
            int v348 = (void *)(*(void *)(v338 + 344) + 8 * v341);
          }
          else
          {
            int v348 = (void *)(*(void *)(v338 + 344) + 8 * v341);
          }
          *int v348 = v339;
          *(_DWORD *)(v338 + 356) = v341 + 1;
          uint64_t v349 = *(void *)v28;
          long long v524 = 0;
          *(void *)v525 = 0;
          unsigned int v350 = (void *)WTF::fastMalloc((WTF *)8);
          DWORD2(v513) = 1;
          *(void *)&long long v513 = v350;
          *unsigned int v350 = v339;
          HIDWORD(v513) = 1;
          int v352 = WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>((void *)(v349 + 312), &v524, (uint64_t)v336, (uint64_t *)&v513);
          v353 = (WTF *)v513;
          if ((void)v513)
          {
            *(void *)&long long v513 = 0;
            DWORD2(v513) = 0;
            WTF::fastFree(v353, v351);
          }
          v352[3] = *(void *)(v339 + 24);
          uint64_t v511 = *(void *)v28;
          *(void *)&long long v513 = a3;
          long long v514 = *(_OWORD *)(a3 + 8);
          uint64_t v354 = *(void *)(a3 + 24);
          long long v502 = v352;
          *((void *)&v513 + 1) = &unk_1ECABBFE0;
          uint64_t v515 = v354;
          v516[0] = 0;
          unsigned __int8 v518 = 0;
          int v355 = *(unsigned __int8 *)(a3 + 56);
          if (*(unsigned char *)(a3 + 56))
          {
            int v517 = -1;
            unint64_t v28 = *(unsigned int *)(a3 + 48);
            if (v28 != -1)
            {
              ((void (*)(void (***)(WGSL::AST::Identifier *__hidden), unsigned char *, uint64_t))off_1ECABCEC0[v28])(&v524, v516, v508);
              int v517 = v28;
            }
            unsigned __int8 v518 = 1;
          }
          unsigned int v356 = (uint64_t *)(v511 + 400);
          *((void *)&v513 + 1) = off_1ECABC180;
          *(_OWORD *)uint64_t v519 = *(_OWORD *)v21;
          unint64_t v357 = *(unsigned int *)(v511 + 412);
          if (v357 == *(_DWORD *)(v511 + 408))
          {
            unint64_t v358 = v357 + (v357 >> 2);
            if (v358 >= 0x10) {
              unint64_t v359 = v358 + 1;
            }
            else {
              unint64_t v359 = 16;
            }
            if (v359 <= v357 + 1) {
              unint64_t v360 = v357 + 1;
            }
            else {
              unint64_t v360 = v359;
            }
            WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v356, v360);
            uint64_t v361 = *(unsigned int *)(v511 + 412);
            uint64_t v362 = *(void *)(v511 + 400);
            uint64_t v363 = (void (**)(WGSL::AST::Identifier *__hidden))v513;
            *(_OWORD *)&v525[8] = v514;
            uint64_t v364 = v515;
            long long v524 = (void (**)(WGSL::AST::Identifier *__hidden))v513;
            *(void *)v525 = &unk_1ECABBFE0;
            uint64_t v526 = v515;
            v527[0] = 0;
            unsigned __int8 v529 = 0;
            int v365 = v518;
            if (v518)
            {
              int v528 = -1;
              LODWORD(v28) = v517;
              if (v517 != -1)
              {
                uint64_t v366 = v361;
                uint64_t v367 = v362;
                ((void (*)(long long *, unsigned char *, unsigned char *))off_1ECABCF18[v517])(&v536, v527, v516);
                uint64_t v362 = v367;
                uint64_t v361 = v366;
                int v528 = v28;
                uint64_t v363 = v524;
                uint64_t v364 = v526;
              }
              int v368 = 1;
              unsigned __int8 v529 = 1;
            }
            else
            {
              int v368 = 0;
            }
            *(void *)v525 = off_1ECABC180;
            *(_OWORD *)v530 = *(_OWORD *)v519;
            uint64_t v467 = v362 + 32 * v361;
            *(void *)(v467 + 24) = 0;
            v468 = (void *)(v467 + 24);
            int v469 = (char *)operator new(0x60uLL);
            v470 = v469;
            *(void *)int v469 = &unk_1ECABD010;
            *((void *)v469 + 1) = v363;
            *(_OWORD *)(v469 + 24) = *(_OWORD *)&v525[8];
            *((void *)v469 + 2) = &unk_1ECABBFE0;
            *((void *)v469 + 5) = v364;
            v469[48] = 0;
            v469[72] = 0;
            if (v365)
            {
              *((_DWORD *)v469 + 16) = -1;
              if (v28 != -1)
              {
                ((void (*)(long long *, char *, unsigned char *))off_1ECABCF18[v28])(&v536, v469 + 48, v527);
                *((_DWORD *)v470 + 16) = v28;
                int v368 = v529;
              }
              v470[72] = 1;
            }
            else
            {
              int v368 = 0;
            }
            *((void *)v470 + 2) = off_1ECABC180;
            *((_OWORD *)v470 + 5) = *(_OWORD *)v530;
            void *v468 = v470;
            *(void *)v525 = &unk_1ECABBFE0;
            if (v368 && v528 != -1) {
              ((void (*)(long long *, unsigned char *))off_1ECABCE68[v528])(&v536, v527);
            }
            ++*(_DWORD *)(v511 + 412);
            unint64_t v452 = v502;
          }
          else
          {
            uint64_t v369 = *v356;
            unint64_t v370 = (void (**)(WGSL::AST::Identifier *__hidden))v513;
            *(_OWORD *)&v525[8] = v514;
            uint64_t v371 = v515;
            long long v524 = (void (**)(WGSL::AST::Identifier *__hidden))v513;
            *(void *)v525 = &unk_1ECABBFE0;
            uint64_t v526 = v515;
            v527[0] = 0;
            unsigned __int8 v529 = 0;
            if (v355)
            {
              int v528 = -1;
              if (v28 != -1)
              {
                uint64_t v372 = v369;
                ((void (*)(long long *, unsigned char *, unsigned char *))off_1ECABCF18[v28])(&v536, v527, v516);
                uint64_t v369 = v372;
                int v528 = v28;
                unint64_t v370 = v524;
                uint64_t v371 = v526;
              }
              int v373 = 1;
              unsigned __int8 v529 = 1;
            }
            else
            {
              int v373 = 0;
            }
            *(void *)v525 = off_1ECABC180;
            *(_OWORD *)v530 = *(_OWORD *)v519;
            uint64_t v471 = v369 + 32 * v357;
            *(void *)(v471 + 24) = 0;
            int v472 = (void *)(v471 + 24);
            uint64_t v473 = (char *)operator new(0x60uLL);
            unint64_t v474 = v473;
            *(void *)uint64_t v473 = &unk_1ECABD010;
            *((void *)v473 + 1) = v370;
            *(_OWORD *)(v473 + 24) = *(_OWORD *)&v525[8];
            *((void *)v473 + 2) = &unk_1ECABBFE0;
            *((void *)v473 + 5) = v371;
            v473[48] = 0;
            v473[72] = 0;
            if (v355)
            {
              *((_DWORD *)v473 + 16) = -1;
              if (v28 != -1)
              {
                ((void (*)(long long *, char *, unsigned char *))off_1ECABCF18[v28])(&v536, v473 + 48, v527);
                *((_DWORD *)v474 + 16) = v28;
                int v373 = v529;
              }
              v474[72] = 1;
            }
            else
            {
              int v373 = 0;
            }
            *((void *)v474 + 2) = off_1ECABC180;
            *((_OWORD *)v474 + 5) = *(_OWORD *)v530;
            *int v472 = v474;
            *(void *)v525 = &unk_1ECABBFE0;
            unint64_t v452 = v502;
            if (v373)
            {
              if (v528 != -1) {
                ((void (*)(long long *, unsigned char *))off_1ECABCE68[v528])(&v536, v527);
              }
              int v528 = -1;
            }
            ++*(_DWORD *)(v511 + 412);
          }
          *((void *)&v513 + 1) = &unk_1ECABBFE0;
          if (v518 && v517 != -1) {
            ((void (*)(void (***)(WGSL::AST::Identifier *__hidden), unsigned char *))off_1ECABCE68[v517])(&v524, v516);
          }
          *(void *)a3 = &unk_1ECABBFE0;
          if (!*(unsigned char *)(a3 + 56)) {
            goto LABEL_686;
          }
          uint64_t v475 = *(unsigned int *)(a3 + 48);
          if (v475 != -1) {
            ((void (*)(void (***)(WGSL::AST::Identifier *__hidden), uint64_t))off_1ECABCE68[v475])(&v524, v508);
          }
LABEL_685:
          *(_DWORD *)(a3 + 48) = -1;
LABEL_686:
          *(_OWORD *)(a3 + 8) = *(_OWORD *)(v452 + 1);
          *(void *)(a3 + 24) = 0;
          *(unsigned char *)(a3 + 32) = 0;
          *(unsigned char *)(a3 + 56) = 0;
          *(void *)a3 = off_1ECABD058;
          *(void *)(a3 + 64) = v452;
          uint64_t v466 = v452[3];
LABEL_687:
          *(void *)(a3 + 24) = v466;
          return v15 ^ 3;
        }
        uint64_t v116 = (unsigned char *)a1[5];
        if (v15) {
          v116[12] = 1;
        }
        else {
          v116[11] = 1;
        }
      }
      unint64_t v28 = (unint64_t)(a1 + 5);
      unsigned int v30 = v116 + 312;
      long long v513 = 0uLL;
      goto LABEL_458;
    case 0x1Au:
      unint64_t v41 = (uint64_t *)(a3 + 64);
      if ((*(unsigned char *)(a3 + 72) & 0xFD) != 0) {
        uint64_t v42 = 2;
      }
      else {
        uint64_t v42 = 3;
      }
      uint64_t v15 = WGSL::RewriteGlobalVariables::pack(a1, v42, *(void *)(a3 + 64));
      if ((v15 & v5) != 0) {
        return v15;
      }
      uint64_t v43 = *(void *)(a3 + 24);
      int v44 = *(_DWORD *)(v43 + 48);
      if (v44 == 10)
      {
        uint64_t v43 = *(void *)(v43 + 8);
        int v44 = *(_DWORD *)(v43 + 48);
      }
      if (v44 == 3)
      {
        uint64_t v113 = (unsigned char *)a1[5];
        if (v15) {
          v113[10] = 1;
        }
        else {
          v113[9] = 1;
        }
      }
      else
      {
        if (v44 == 4)
        {
          if ((WGSL::Type::isConstructible((WGSL::Type *)v43) & 1) == 0) {
            return v15;
          }
          uint64_t v46 = a1[5];
          uint64_t v45 = a1 + 5;
          uint64_t v47 = (void *)(v46 + 312);
          long long v513 = 0uLL;
LABEL_312:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          long long v524 = off_1ECABC030;
          *(void *)v525 = 0;
          *(void *)&v525[8] = 0;
          *(void *)&v525[16] = v536;
          uint64_t v213 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v47, &v513, (uint64_t)&v524);
          uint64_t v214 = *(_DWORD **)&v525[16];
          long long v524 = off_1ECABC030;
          *(void *)&v525[16] = 0;
          if (v214)
          {
            if (*v214 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v214 -= 2;
            }
          }
          uint64_t v215 = *v45;
          v213[3] = *(void *)(*v45 + 120);
          uint64_t v216 = *(void *)(v215 + 312);
          if ((unint64_t)(*(void *)(v215 + 320) - v216) <= 0x4F)
          {
            WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v215 + 312));
            uint64_t v216 = *(void *)(v215 + 312);
          }
          *(void *)uint64_t v216 = &unk_1ECABC008;
          *(_OWORD *)(v216 + 8) = *(_OWORD *)(a3 + 8);
          *(void *)uint64_t v216 = &unk_1ECABBFE0;
          *(void *)(v216 + 24) = *(void *)(a3 + 24);
          *(unsigned char *)(v216 + 32) = 0;
          uint64_t v510 = a3 + 32;
          *(unsigned char *)(v216 + 56) = 0;
          if (*(unsigned char *)(a3 + 56))
          {
            *(_DWORD *)(v216 + 48) = -1;
            uint64_t v217 = *(unsigned int *)(a3 + 48);
            if (v217 != -1)
            {
              ((void (*)(void (***)(WGSL::AST::Identifier *__hidden), uint64_t, uint64_t))off_1ECABCEC0[v217])(&v524, v216 + 32, v510);
              *(_DWORD *)(v216 + 48) = v217;
            }
            *(unsigned char *)(v216 + 56) = 1;
          }
          *(void *)uint64_t v216 = off_1ECABC248;
          uint64_t v218 = *v41;
          *(unsigned char *)(v216 + 72) = *(unsigned char *)(a3 + 72);
          *(void *)(v216 + 64) = v218;
          *(void *)(v215 + 312) += 80;
          unint64_t v219 = *(unsigned int *)(v215 + 356);
          if (v219 == *(_DWORD *)(v215 + 352))
          {
            unint64_t v220 = v219 + (v219 >> 2);
            if (v220 >= 0x10) {
              unint64_t v221 = v220 + 1;
            }
            else {
              unint64_t v221 = 16;
            }
            if (v221 <= v219 + 1) {
              unint64_t v222 = v219 + 1;
            }
            else {
              unint64_t v222 = v221;
            }
            if (v222 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x18256AC3CLL);
            }
            unsigned int v223 = *(void **)(v215 + 344);
            uint64_t v224 = (void *)WTF::fastMalloc((WTF *)(8 * v222));
            *(_DWORD *)(v215 + 352) = v222;
            *(void *)(v215 + 344) = v224;
            memcpy(v224, v223, 8 * v219);
            if (v223)
            {
              if (*(void **)(v215 + 344) == v223)
              {
                *(void *)(v215 + 344) = 0;
                *(_DWORD *)(v215 + 352) = 0;
              }
              WTF::fastFree((WTF *)v223, v225);
            }
            uint64_t v226 = *(unsigned int *)(v215 + 356);
            int v227 = (void *)(*(void *)(v215 + 344) + 8 * v226);
          }
          else
          {
            int v227 = (void *)(*(void *)(v215 + 344) + 8 * v219);
            LODWORD(v226) = *(_DWORD *)(v215 + 356);
          }
          unint64_t v228 = a3 + 8;
          *int v227 = v216;
          *(_DWORD *)(v215 + 356) = v226 + 1;
          uint64_t v229 = *v45;
          long long v524 = 0;
          *(void *)v525 = 0;
          uint64_t v230 = (void *)WTF::fastMalloc((WTF *)8);
          DWORD2(v513) = 1;
          *(void *)&long long v513 = v230;
          *uint64_t v230 = v216;
          HIDWORD(v513) = 1;
          uint64_t v232 = WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>((void *)(v229 + 312), &v524, (uint64_t)v213, (uint64_t *)&v513);
          int v233 = (WTF *)v513;
          if ((void)v513)
          {
            *(void *)&long long v513 = 0;
            DWORD2(v513) = 0;
            WTF::fastFree(v233, v231);
          }
          v232[3] = *(void *)(v216 + 24);
          uint64_t v234 = *v45;
          long long v514 = *(_OWORD *)v228;
          uint64_t v235 = *(void *)(a3 + 24);
          *(void *)&long long v513 = a3;
          *((void *)&v513 + 1) = &unk_1ECABBFE0;
          uint64_t v515 = v235;
          v516[0] = 0;
          unsigned __int8 v518 = 0;
          int v236 = *(unsigned __int8 *)(a3 + 56);
          if (*(unsigned char *)(a3 + 56))
          {
            int v517 = -1;
            unint64_t v228 = *(unsigned int *)(a3 + 48);
            if (v228 != -1)
            {
              ((void (*)(void (***)(WGSL::AST::Identifier *__hidden), unsigned char *, uint64_t))off_1ECABCEC0[v228])(&v524, v516, v510);
              int v517 = v228;
            }
            unsigned __int8 v518 = 1;
          }
          uint64_t v500 = v234;
          v505 = v232;
          uint64_t v237 = (uint64_t *)(v234 + 400);
          uint64_t v238 = *v41;
          *((void *)&v513 + 1) = off_1ECABC248;
          *(void *)uint64_t v519 = v238;
          v519[8] = *(unsigned char *)(a3 + 72);
          unint64_t v239 = *(unsigned int *)(v234 + 412);
          if (v239 == *(_DWORD *)(v234 + 408))
          {
            unint64_t v240 = v239 + (v239 >> 2);
            if (v240 >= 0x10) {
              unint64_t v241 = v240 + 1;
            }
            else {
              unint64_t v241 = 16;
            }
            if (v241 <= v239 + 1) {
              unint64_t v242 = v239 + 1;
            }
            else {
              unint64_t v242 = v241;
            }
            WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v237, v242);
            uint64_t v243 = *(unsigned int *)(v234 + 412);
            uint64_t v244 = *(void *)(v234 + 400);
            unsigned int v245 = (void (**)(WGSL::AST::Identifier *__hidden))v513;
            *(_OWORD *)&v525[8] = v514;
            uint64_t v246 = v515;
            long long v524 = (void (**)(WGSL::AST::Identifier *__hidden))v513;
            *(void *)v525 = &unk_1ECABBFE0;
            uint64_t v526 = v515;
            v527[0] = 0;
            unsigned __int8 v529 = 0;
            int v247 = v518;
            if (v518)
            {
              int v528 = -1;
              int v236 = v517;
              if (v517 != -1)
              {
                uint64_t v248 = v243;
                uint64_t v249 = v244;
                ((void (*)(long long *, unsigned char *, unsigned char *))off_1ECABCF18[v517])(&v536, v527, v516);
                uint64_t v244 = v249;
                uint64_t v243 = v248;
                int v528 = v236;
                unsigned int v245 = v524;
                uint64_t v246 = v526;
              }
              int v250 = 1;
              unsigned __int8 v529 = 1;
            }
            else
            {
              int v250 = 0;
            }
            *(void *)v525 = off_1ECABC248;
            *(void *)v530 = *(void *)v519;
            v530[8] = v519[8];
            uint64_t v444 = v244 + 32 * v243;
            *(void *)(v444 + 24) = 0;
            unint64_t v445 = (void *)(v444 + 24);
            unint64_t v446 = (char *)operator new(0x60uLL);
            uint64_t v447 = v446;
            *(void *)unint64_t v446 = &unk_1ECABD0C8;
            *((void *)v446 + 1) = v245;
            *(_OWORD *)(v446 + 24) = *(_OWORD *)&v525[8];
            *((void *)v446 + 2) = &unk_1ECABBFE0;
            *((void *)v446 + 5) = v246;
            v446[48] = 0;
            v446[72] = 0;
            if (v247)
            {
              *((_DWORD *)v446 + 16) = -1;
              if (v236 != -1)
              {
                ((void (*)(long long *, char *, unsigned char *))off_1ECABCF18[v236])(&v536, v446 + 48, v527);
                *((_DWORD *)v447 + 16) = v236;
                int v250 = v529;
              }
              v447[72] = 1;
            }
            else
            {
              int v250 = 0;
            }
            *((void *)v447 + 2) = off_1ECABC248;
            *((void *)v447 + 10) = *(void *)v530;
            v447[88] = v530[8];
            *unint64_t v445 = v447;
            *(void *)v525 = &unk_1ECABBFE0;
            if (v250 && v528 != -1) {
              ((void (*)(long long *, unsigned char *))off_1ECABCE68[v528])(&v536, v527);
            }
            unint64_t v452 = v505;
            ++*(_DWORD *)(v500 + 412);
          }
          else
          {
            uint64_t v251 = *v237;
            BOOL v252 = (void (**)(WGSL::AST::Identifier *__hidden))v513;
            *(_OWORD *)&v525[8] = v514;
            uint64_t v253 = v515;
            long long v524 = (void (**)(WGSL::AST::Identifier *__hidden))v513;
            *(void *)v525 = &unk_1ECABBFE0;
            uint64_t v526 = v515;
            v527[0] = 0;
            unsigned __int8 v529 = 0;
            if (v236)
            {
              int v528 = -1;
              if (v228 != -1)
              {
                uint64_t v254 = v251;
                ((void (*)(long long *, unsigned char *, unsigned char *))off_1ECABCF18[v228])(&v536, v527, v516);
                uint64_t v251 = v254;
                int v528 = v228;
                BOOL v252 = v524;
                uint64_t v253 = v526;
              }
              int v255 = 1;
              unsigned __int8 v529 = 1;
            }
            else
            {
              int v255 = 0;
            }
            *(void *)v525 = off_1ECABC248;
            *(void *)v530 = *(void *)v519;
            v530[8] = v519[8];
            uint64_t v448 = v251 + 32 * v239;
            *(void *)(v448 + 24) = 0;
            int v449 = (void *)(v448 + 24);
            unsigned int v450 = (char *)operator new(0x60uLL);
            uint64_t v451 = v450;
            *(void *)unsigned int v450 = &unk_1ECABD0C8;
            *((void *)v450 + 1) = v252;
            *(_OWORD *)(v450 + 24) = *(_OWORD *)&v525[8];
            *((void *)v450 + 2) = &unk_1ECABBFE0;
            *((void *)v450 + 5) = v253;
            v450[48] = 0;
            v450[72] = 0;
            if (v236)
            {
              *((_DWORD *)v450 + 16) = -1;
              unint64_t v452 = v505;
              if (v228 != -1)
              {
                ((void (*)(long long *, char *, unsigned char *))off_1ECABCF18[v228])(&v536, v450 + 48, v527);
                *((_DWORD *)v451 + 16) = v228;
                int v255 = v529;
              }
              v451[72] = 1;
            }
            else
            {
              int v255 = 0;
              unint64_t v452 = v505;
            }
            *((void *)v451 + 2) = off_1ECABC248;
            *((void *)v451 + 10) = *(void *)v530;
            v451[88] = v530[8];
            *int v449 = v451;
            *(void *)v525 = &unk_1ECABBFE0;
            if (v255)
            {
              if (v528 != -1) {
                ((void (*)(long long *, unsigned char *))off_1ECABCE68[v528])(&v536, v527);
              }
              int v528 = -1;
            }
            ++*(_DWORD *)(v234 + 412);
          }
          *((void *)&v513 + 1) = &unk_1ECABBFE0;
          if (v518 && v517 != -1) {
            ((void (*)(void (***)(WGSL::AST::Identifier *__hidden), unsigned char *))off_1ECABCE68[v517])(&v524, v516);
          }
          *(void *)a3 = &unk_1ECABBFE0;
          if (!*(unsigned char *)(a3 + 56)) {
            goto LABEL_686;
          }
          uint64_t v453 = *(unsigned int *)(a3 + 48);
          if (v453 != -1) {
            ((void (*)(void (***)(WGSL::AST::Identifier *__hidden), uint64_t))off_1ECABCE68[v453])(&v524, v510);
          }
          goto LABEL_685;
        }
        uint64_t v113 = (unsigned char *)a1[5];
        if (v15) {
          v113[12] = 1;
        }
        else {
          v113[11] = 1;
        }
      }
      uint64_t v45 = a1 + 5;
      uint64_t v47 = v113 + 312;
      long long v513 = 0uLL;
      goto LABEL_312;
    default:
      WGSL::AST::Visitor::visit(a1, a3);
      return 2;
  }
}

uint64_t WGSL::RewriteGlobalVariables::visit(WGSL::RewriteGlobalVariables *this, WGSL::AST::AssignmentStatement *a2)
{
  unsigned int v4 = WGSL::RewriteGlobalVariables::pack((uint64_t *)this, 3, *((void *)a2 + 3));
  if (v4 == 17) {
    uint64_t v5 = 3;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = *((void *)a2 + 4);
  return WGSL::RewriteGlobalVariables::pack((uint64_t *)this, v5, v6);
}

uint64_t WGSL::RewriteGlobalVariables::visit(uint64_t this, WGSL::AST::VariableStatement *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 3);
  if (*(unsigned char *)(v4 + 128) == 3)
  {
    this = WGSL::Type::size(*(WGSL::Type **)(v4 + 144));
    int v5 = *(_DWORD *)(v3 + 260);
    BOOL v6 = __CFADD__(v5, this);
    int v7 = v5 + this;
    if (!v6)
    {
      *(_DWORD *)(v3 + 260) = v7;
      uint64_t v8 = *(void *)(*((void *)a2 + 3) + 120);
      if (!v8) {
        return this;
      }
      goto LABEL_6;
    }
    *(unsigned char *)(v3 + 256) = 1;
  }
  uint64_t v8 = *(void *)(*((void *)a2 + 3) + 120);
  if (!v8) {
    return this;
  }
LABEL_6:
  return WGSL::RewriteGlobalVariables::pack((uint64_t *)v3, 2, v8);
}

uint64_t WGSL::RewriteGlobalVariables::visit(WGSL::RewriteGlobalVariables *this, WGSL::AST::PhonyAssignmentStatement *a2)
{
  return WGSL::RewriteGlobalVariables::pack((uint64_t *)this, 3, *((void *)a2 + 3));
}

uint64_t WGSL::RewriteGlobalVariables::visit(WGSL::RewriteGlobalVariables *this, WGSL::AST::Expression *a2)
{
  return WGSL::RewriteGlobalVariables::pack((uint64_t *)this, 2, (uint64_t)a2);
}

uint64_t WGSL::RewriteGlobalVariables::readVariable(WGSL::RewriteGlobalVariables *this, WGSL::AST::IdentifierExpression *a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = (WTF::StringImpl **)((char *)a2 + 88);
  uint64_t v5 = *((void *)this + 10);
  if (v5)
  {
    unsigned int v6 = *(_DWORD *)(v5 - 8);
    unsigned int v7 = *((_DWORD *)*v4 + 4);
    int v8 = v7 < 0x100 ? WTF::StringImpl::hashSlowCase(*v4) : v7 >> 8;
    for (i = 0; ; int v8 = i + v10)
    {
      uint64_t v10 = v8 & v6;
      unint64_t v11 = *(WTF **)(v5 + 16 * v10);
      if (v11 != (WTF *)-1)
      {
        if (!v11) {
          goto LABEL_12;
        }
        if (WTF::equal(v11, *v4, a3)) {
          break;
        }
      }
      ++i;
    }
    uint64_t v12 = *((void *)this + 10);
    if (!v12 || v5 + 16 * v10 != v12 + 16 * *(unsigned int *)(v12 - 4)) {
      return 0;
    }
  }
LABEL_12:
  uint64_t v13 = *((void *)this + 6);
  if (!v13) {
    return v13;
  }
  int v14 = *(_DWORD *)(v13 - 8);
  unsigned int v15 = *((_DWORD *)*v4 + 4);
  if (v15 < 0x100) {
    unsigned int v16 = WTF::StringImpl::hashSlowCase(*v4);
  }
  else {
    unsigned int v16 = v15 >> 8;
  }
  for (j = 0; ; unsigned int v16 = j + v18)
  {
    uint64_t v18 = v16 & v14;
    int v19 = *(WTF **)(v13 + 32 * v18);
    if (v19 != (WTF *)-1)
    {
      if (!v19) {
        return 0;
      }
      if (WTF::equal(v19, *v4, a3)) {
        break;
      }
    }
    ++j;
  }
  uint64_t v20 = v13 + 32 * v18;
  uint64_t v21 = *((void *)this + 6);
  if (v21 && v20 == v21 + 32 * *(unsigned int *)(v21 - 4) || !*(unsigned char *)(*(void *)(v20 + 24) + 128)) {
    return 0;
  }
  uint64_t v13 = v20 + 8;
  WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add((uint64_t)v24, (uint64_t *)this + 11, v4);
  if (v24[16])
  {
    uint64_t v22 = *(void *)(v20 + 24);
    if (*(void *)(v22 + 112))
    {
      (*(void (**)(WGSL::RewriteGlobalVariables *))(*(void *)this + 208))(this);
      uint64_t v22 = *(void *)(v20 + 24);
    }
    if (*(void *)(v22 + 120)) {
      (*(void (**)(WGSL::RewriteGlobalVariables *))(*(void *)this + 208))(this);
    }
  }
  return v13;
}

WGSL::RewriteGlobalVariables *WGSL::RewriteGlobalVariables::getBase(WGSL::RewriteGlobalVariables *this, WGSL::AST::Expression *a2, unsigned int *a3)
{
  while (1)
  {
    while (1)
    {
      while ((*(unsigned int (**)(WGSL::RewriteGlobalVariables *, WGSL::AST::Expression *, unsigned int *))(*(void *)this + 16))(this, a2, a3) == 23)this = (WGSL::RewriteGlobalVariables *)*((void *)this + 8);
      if ((*(unsigned int (**)(WGSL::RewriteGlobalVariables *))(*(void *)this + 16))(this) != 26) {
        break;
      }
      this = (WGSL::RewriteGlobalVariables *)*((void *)this + 8);
    }
    if ((*(unsigned int (**)(WGSL::RewriteGlobalVariables *))(*(void *)this + 16))(this) != 21) {
      break;
    }
    unsigned int v6 = (WGSL::RewriteGlobalVariables *)*((void *)this + 8);
    unsigned int v7 = (uint64_t *)*((void *)v6 + 3);
    if (!v7) {
      goto LABEL_13;
    }
    int v8 = *((_DWORD *)v7 + 12);
    if (v8 == 10)
    {
      unsigned int v7 = (uint64_t *)v7[1];
      if (!v7) {
        goto LABEL_13;
      }
      int v8 = *((_DWORD *)v7 + 12);
    }
    if (v8 == 11) {
      unsigned int v7 = (uint64_t *)v7[1];
    }
LABEL_13:
    if (*((_DWORD *)v7 + 12) != 4)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_21;
    }
    uint64_t v9 = *v7;
    uint64_t v10 = *(unsigned int *)(*v7 + 84);
    if (!v10
      || (uint64_t v11 = *(void *)(*(void *)(v9 + 72) + 8 * v10 - 8),
          (WTF::equal(*(WTF **)(v11 + 48), *((const WTF::StringImpl **)this + 12), v5) & 1) == 0))
    {
      __break(0xC471u);
      JUMPOUT(0x18256B128);
    }
    *(_DWORD *)a2 += *(_DWORD *)(v11 + 112);
    this = v6;
  }
  if ((*(unsigned int (**)(WGSL::RewriteGlobalVariables *))(*(void *)this + 16))(this) != 22)
  {
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x18256B14CLL);
  }
  return this;
}

uint64_t *WTF::HashMap<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::HashTableTraits>::add<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>(uint64_t *result, uint64_t *a2, uint64_t *a3, long long *a4)
{
  unsigned int v7 = result;
  uint64_t v8 = *a2;
  if (*a2
    || (uint64_t result = WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    char v9 = 0;
    unsigned int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    unsigned int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a3;
  unint64_t v12 = ~(*a3 << 32) + *a3;
  unint64_t v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  unint64_t v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  uint64_t v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~(v14 << 27)));
  unsigned int v16 = (uint64_t *)(v8 + 32 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v29 = 0;
        }
        else {
          uint64_t v29 = *(unsigned int *)(v8 - 4);
        }
        char v31 = 0;
        uint64_t v30 = v8 + 32 * v29;
        goto LABEL_37;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      uint64_t v15 = (v15 + v19) & v10;
      unsigned int v16 = (uint64_t *)(v8 + 32 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *(_OWORD *)uint64_t v18 = 0u;
      *((_OWORD *)v18 + 1) = 0u;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v11 = *a3;
      unsigned int v16 = v18;
    }
  }
  uint64_t *v16 = v11;
  uint64_t v20 = *((void *)a4 + 2);
  long long v21 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  *((void *)a4 + 2) = 0;
  uint64_t v22 = v16[1];
  uint64_t v23 = (WTF *)v16[2];
  *(_OWORD *)(v16 + 1) = v21;
  for (v16[3] = v20; v23; uint64_t result = (uint64_t *)WTF::fastFree(v27, a2))
  {
    int v27 = v23;
    uint64_t v23 = (WTF *)*((void *)v23 + 2);
    unint64_t v28 = *(_DWORD **)v27;
    *(void *)int v27 = 0;
    if (v28)
    {
      if (*v28 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v28 -= 2;
      }
    }
  }
  if (v22) {
    uint64_t result = (uint64_t *)WTF::fastFree((WTF *)(v22 - 16), a2);
  }
  if (*a2)
  {
    ++*(_DWORD *)(*a2 - 12);
    uint64_t v24 = *a2;
    if (*a2) {
      goto LABEL_17;
    }
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    uint64_t v24 = *a2;
    if (*a2)
    {
LABEL_17:
      uint64_t v25 = (*(_DWORD *)(v24 - 16) + *(_DWORD *)(v24 - 12));
      unint64_t v26 = *(unsigned int *)(v24 - 4);
      if (v26 <= 0x400) {
        goto LABEL_18;
      }
LABEL_31:
      if (v26 > 2 * v25) {
        goto LABEL_34;
      }
      goto LABEL_32;
    }
  }
  uint64_t v25 = *(unsigned int *)(v24 - 16);
  unint64_t v26 = *(unsigned int *)(v24 - 4);
  if (v26 > 0x400) {
    goto LABEL_31;
  }
LABEL_18:
  if (3 * v26 <= 4 * v25)
  {
    if (!v26)
    {
      uint64_t result = WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash(a2, 8u, v16);
      unsigned int v16 = result;
      uint64_t v24 = *a2;
      if (!*a2)
      {
LABEL_21:
        unint64_t v26 = 0;
        goto LABEL_34;
      }
LABEL_33:
      unint64_t v26 = *(unsigned int *)(v24 - 4);
      goto LABEL_34;
    }
LABEL_32:
    uint64_t result = WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash(a2, v26 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v26)), v16);
    unsigned int v16 = result;
    uint64_t v24 = *a2;
    if (!*a2) {
      goto LABEL_21;
    }
    goto LABEL_33;
  }
LABEL_34:
  uint64_t v30 = v24 + 32 * v26;
  char v31 = 1;
LABEL_37:
  uint64_t *v7 = (uint64_t)v16;
  v7[1] = v30;
  *((unsigned char *)v7 + 16) = v31;
  return result;
}

__n128 WGSL::ShaderModule::replace<WGSL::AST::CallExpression,WGSL::AST::BinaryExpression>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 400);
  WGSL::AST::CallExpression::CallExpression((uint64_t)&v39, (const WGSL::AST::CallExpression *)a2);
  unint64_t v6 = *(unsigned int *)(a1 + 412);
  if (v6 == *(_DWORD *)(a1 + 408))
  {
    unint64_t v7 = v6 + (v6 >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 <= v6 + 1) {
      unint64_t v9 = v6 + 1;
    }
    else {
      unint64_t v9 = v8;
    }
    WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v5, v9);
    uint64_t v10 = *(unsigned int *)(a1 + 412);
    uint64_t v11 = *(void *)(a1 + 400);
    uint64_t v12 = a2;
    long long v51 = v40;
    uint64_t v13 = v41;
    uint64_t v49 = a2;
    int v50 = &unk_1ECABBFE0;
    uint64_t v52 = v41;
    v53[0] = 0;
    unsigned __int8 v55 = 0;
    int v35 = v44;
    if (v44)
    {
      int v54 = -1;
      int v14 = v43;
      if (v43 != -1)
      {
        ((void (*)(unsigned char *, unsigned char *, unsigned char *))off_1ECABCF18[v43])(v60, v53, v42);
        int v54 = v14;
        uint64_t v12 = v49;
        uint64_t v13 = v52;
      }
      int v33 = v14;
      int v34 = 1;
      unsigned __int8 v55 = 1;
    }
    else
    {
      int v34 = 0;
      int v33 = 0;
    }
    uint64_t v17 = v46;
    int v50 = &unk_1ECABC058;
    uint64_t v36 = v45;
    uint64_t v56 = v45;
    uint64_t v57 = v46;
    unsigned int v18 = v47;
    unsigned int v19 = HIDWORD(v47);
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    unint64_t v58 = __PAIR64__(v19, v18);
    __int16 v20 = v48;
    __int16 v59 = v48;
    uint64_t v21 = v11 + 32 * v10;
  }
  else
  {
    uint64_t v15 = *v5;
    uint64_t v12 = a2;
    long long v51 = v40;
    uint64_t v13 = v41;
    uint64_t v49 = a2;
    int v50 = &unk_1ECABBFE0;
    uint64_t v52 = v41;
    v53[0] = 0;
    unsigned __int8 v55 = 0;
    int v35 = v44;
    if (v44)
    {
      int v54 = -1;
      int v16 = v43;
      if (v43 != -1)
      {
        ((void (*)(unsigned char *, unsigned char *, unsigned char *))off_1ECABCF18[v43])(v60, v53, v42);
        int v54 = v16;
        uint64_t v12 = v49;
        uint64_t v13 = v52;
      }
      int v33 = v16;
      int v34 = 1;
      unsigned __int8 v55 = 1;
    }
    else
    {
      int v34 = 0;
      int v33 = 0;
    }
    uint64_t v17 = v46;
    int v50 = &unk_1ECABC058;
    uint64_t v36 = v45;
    uint64_t v56 = v45;
    uint64_t v57 = v46;
    unsigned int v18 = v47;
    unsigned int v19 = HIDWORD(v47);
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    unint64_t v58 = __PAIR64__(v19, v18);
    __int16 v20 = v48;
    __int16 v59 = v48;
    uint64_t v21 = v15 + 32 * v6;
  }
  *(void *)(v21 + 24) = 0;
  uint64_t v22 = (void *)(v21 + 24);
  uint64_t v23 = (char *)operator new(0x70uLL);
  uint64_t v24 = v23;
  *(void *)uint64_t v23 = &unk_1ECABD208;
  *((void *)v23 + 1) = v12;
  *(_OWORD *)(v23 + 24) = v51;
  *((void *)v23 + 2) = &unk_1ECABBFE0;
  *((void *)v23 + 5) = v13;
  v23[48] = 0;
  uint64_t v25 = v23 + 48;
  v23[72] = 0;
  if (v35)
  {
    *((_DWORD *)v23 + 16) = -1;
    int v26 = v34;
    uint64_t v27 = v36;
    if (v33 != -1)
    {
      ((void (*)(unsigned char *, void *, unsigned char *))off_1ECABCF18[v33])(v60, v25, v53);
      *((_DWORD *)v24 + 16) = v33;
      uint64_t v27 = v56;
      uint64_t v17 = v57;
      unsigned int v18 = v58;
      unsigned int v19 = HIDWORD(v58);
      __int16 v20 = v59;
      int v26 = v55;
    }
    v24[72] = 1;
  }
  else
  {
    int v26 = 0;
    uint64_t v27 = v36;
  }
  *((void *)v24 + 2) = &unk_1ECABC058;
  uint64_t v57 = 0;
  unint64_t v58 = 0;
  *((void *)v24 + 10) = v27;
  *((void *)v24 + 11) = v17;
  *((_DWORD *)v24 + 24) = v18;
  *((_DWORD *)v24 + 25) = v19;
  *((_WORD *)v24 + 52) = v20;
  *uint64_t v22 = v24;
  int v50 = &unk_1ECABBFE0;
  if (v26 && v54 != -1) {
    ((void (*)(unsigned char *, unsigned char *))off_1ECABCE68[v54])(v60, v53);
  }
  ++*(_DWORD *)(a1 + 412);
  unint64_t v28 = v46;
  if (v46)
  {
    uint64_t v46 = 0;
    LODWORD(v47) = 0;
    WTF::fastFree(v28, v25);
  }
  unsigned int v39 = &unk_1ECABBFE0;
  if (v44 && v43 != -1) {
    ((void (*)(uint64_t *, unsigned char *))off_1ECABCE68[v43])(&v49, v42);
  }
  uint64_t v29 = *(WTF **)(a2 + 72);
  if (v29)
  {
    *(void *)(a2 + 72) = 0;
    *(_DWORD *)(a2 + 80) = 0;
    WTF::fastFree(v29, v25);
  }
  *(void *)a2 = &unk_1ECABBFE0;
  if (*(unsigned char *)(a2 + 56))
  {
    uint64_t v30 = *(unsigned int *)(a2 + 48);
    if (v30 != -1) {
      ((void (*)(uint64_t *, uint64_t))off_1ECABCE68[v30])(&v49, a2 + 32);
    }
    *(_DWORD *)(a2 + 48) = -1;
  }
  *(void *)a2 = &unk_1ECABC008;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(void *)a2 = &unk_1ECABBFE0;
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  *(unsigned char *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 56) = 0;
  if (*(unsigned char *)(a3 + 56))
  {
    *(_DWORD *)(a2 + 48) = -1;
    uint64_t v31 = *(unsigned int *)(a3 + 48);
    if (v31 != -1)
    {
      ((void (*)(uint64_t *, uint64_t, uint64_t))off_1ECABCEC0[v31])(&v49, a2 + 32, a3 + 32);
      *(_DWORD *)(a2 + 48) = v31;
    }
    *(unsigned char *)(a2 + 56) = 1;
  }
  *(void *)a2 = off_1ECABC158;
  __n128 result = *(__n128 *)(a3 + 64);
  *(unsigned char *)(a2 + 80) = *(unsigned char *)(a3 + 80);
  *(__n128 *)(a2 + 64) = result;
  return result;
}

WTF *WTF::HashMap<WTF::String,WGSL::RewriteGlobalVariables::Global,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::RewriteGlobalVariables::Global>,WTF::HashTableTraits>::add<WGSL::RewriteGlobalVariables::Global>(uint64_t a1, uint64_t *a2, const WTF::StringImpl **a3, long long *a4)
{
  uint64_t v8 = *a2;
  if (!*a2)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::RewriteGlobalVariables::Global>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::RewriteGlobalVariables::Global>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::RewriteGlobalVariables::Global,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::RewriteGlobalVariables::Global>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0);
    uint64_t v8 = *a2;
    if (!*a2)
    {
      int v9 = 0;
      uint64_t v10 = *a3;
      unsigned int v11 = *((_DWORD *)*a3 + 4);
      if (v11 >= 0x100) {
        goto LABEL_4;
      }
LABEL_6:
      unsigned int v12 = WTF::StringImpl::hashSlowCase(v10);
      goto LABEL_7;
    }
  }
  int v9 = *(_DWORD *)(v8 - 8);
  uint64_t v10 = *a3;
  unsigned int v11 = *((_DWORD *)*a3 + 4);
  if (v11 < 0x100) {
    goto LABEL_6;
  }
LABEL_4:
  unsigned int v12 = v11 >> 8;
LABEL_7:
  uint64_t v13 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v15 = v12 & v9;
    int v16 = (WTF *)(v8 + 32 * v15);
    __n128 result = *(WTF **)v16;
    if (*(void *)v16 == -1)
    {
      uint64_t v13 = (WTF *)(v8 + 32 * v15);
      goto LABEL_9;
    }
    if (!result)
    {
      if (v13)
      {
        __n128 result = 0;
        *(_OWORD *)uint64_t v13 = 0u;
        *((_OWORD *)v13 + 1) = 0u;
        --*(_DWORD *)(*a2 - 16);
        int v16 = v13;
      }
      __int16 v20 = *a3;
      if (*a3) {
        *(_DWORD *)v20 += 2;
      }
      *(void *)int v16 = v20;
      long long v21 = *a4;
      *((void *)v16 + 3) = *((void *)a4 + 2);
      *(_OWORD *)((char *)v16 + 8) = v21;
      if (*a2)
      {
        ++*(_DWORD *)(*a2 - 12);
        uint64_t v22 = *a2;
        if (*a2) {
          goto LABEL_21;
        }
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        uint64_t v22 = *a2;
        if (*a2)
        {
LABEL_21:
          uint64_t v23 = (*(_DWORD *)(v22 - 16) + *(_DWORD *)(v22 - 12));
          unint64_t v24 = *(unsigned int *)(v22 - 4);
          if (v24 <= 0x400) {
            goto LABEL_22;
          }
          goto LABEL_30;
        }
      }
      uint64_t v23 = *(unsigned int *)(v22 - 16);
      unint64_t v24 = *(unsigned int *)(v22 - 4);
      if (v24 <= 0x400)
      {
LABEL_22:
        if (3 * v24 > 4 * v23)
        {
LABEL_33:
          uint64_t v26 = v22 + 32 * v24;
          char v25 = 1;
          goto LABEL_34;
        }
        if (!v24)
        {
          __n128 result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::RewriteGlobalVariables::Global>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::RewriteGlobalVariables::Global>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::RewriteGlobalVariables::Global,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::RewriteGlobalVariables::Global>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, (WTF::StringImpl **)v16);
          int v16 = result;
          uint64_t v22 = *a2;
          if (!*a2)
          {
LABEL_25:
            unint64_t v24 = 0;
            goto LABEL_33;
          }
LABEL_32:
          unint64_t v24 = *(unsigned int *)(v22 - 4);
          goto LABEL_33;
        }
LABEL_31:
        __n128 result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::RewriteGlobalVariables::Global>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::RewriteGlobalVariables::Global>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::RewriteGlobalVariables::Global,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::RewriteGlobalVariables::Global>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v24 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v24)), (WTF::StringImpl **)v16);
        int v16 = result;
        uint64_t v22 = *a2;
        if (!*a2) {
          goto LABEL_25;
        }
        goto LABEL_32;
      }
LABEL_30:
      if (v24 > 2 * v23) {
        goto LABEL_33;
      }
      goto LABEL_31;
    }
    __n128 result = (WTF *)WTF::equal(result, *a3, (const WTF::StringImpl *)a3);
    if (result) {
      break;
    }
LABEL_9:
    unsigned int v12 = i + v15;
  }
  uint64_t v18 = *a2;
  if (*a2) {
    uint64_t v19 = *(unsigned int *)(v18 - 4);
  }
  else {
    uint64_t v19 = 0;
  }
  char v25 = 0;
  uint64_t v26 = v18 + 32 * v19;
LABEL_34:
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v26;
  *(unsigned char *)(a1 + 16) = v25;
  return result;
}

void *WGSL::AST::Builder::construct<WGSL::AST::ReferenceTypeExpression,WGSL::SourceSpan,WGSL::AST::Expression &,void>(void *this, _OWORD *a2, uint64_t a3)
{
  uint64_t v5 = this;
  uint64_t v6 = *this;
  if (this[1] - *this <= 0x47uLL)
  {
    this = (void *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    uint64_t v6 = *v5;
  }
  *(_OWORD *)(v6 + 8) = *a2;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 0;
  *(unsigned char *)(v6 + 56) = 0;
  *(void *)uint64_t v6 = off_1ECABD250;
  *(void *)(v6 + 64) = a3;
  *v5 += 72;
  unint64_t v7 = *((unsigned int *)v5 + 11);
  if (v7 != *((_DWORD *)v5 + 10))
  {
    int v14 = (void *)(v5[4] + 8 * v7);
LABEL_17:
    *int v14 = v6;
    *((_DWORD *)v5 + 11) = v7 + 1;
    return (void *)v6;
  }
  unint64_t v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10) {
    unint64_t v9 = v8 + 1;
  }
  else {
    unint64_t v9 = 16;
  }
  if (v9 <= v7 + 1) {
    unint64_t v10 = v7 + 1;
  }
  else {
    unint64_t v10 = v9;
  }
  if (!(v10 >> 29))
  {
    unsigned int v11 = (void *)v5[4];
    unsigned int v12 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
    *((_DWORD *)v5 + 10) = v10;
    v5[4] = v12;
    memcpy(v12, v11, 8 * v7);
    if (v11)
    {
      if ((void *)v5[4] == v11)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v11, v13);
    }
    unint64_t v7 = *((unsigned int *)v5 + 11);
    int v14 = (void *)(v5[4] + 8 * v7);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

uint64_t WGSL::RewriteGlobalVariables::packStructType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  if (*(unsigned char *)(*(void *)a2 + 88) != 6)
  {
    uint64_t v14 = *(unsigned int *)(v4 + 84);
    if (!v14) {
      goto LABEL_26;
    }
    char v15 = 0;
    uint64_t v16 = *(void *)(v4 + 72);
    uint64_t v17 = 8 * v14;
    while (1)
    {
      uint64_t v18 = *(void *)(*(void *)(*(void *)v16 + 104) + 24);
      if (v18)
      {
        int v19 = *(_DWORD *)(v18 + 48);
        switch(v19)
        {
          case 1:
            if (*(unsigned char *)(v18 + 8) == 3) {
              goto LABEL_11;
            }
            break;
          case 3:
            if (*(void *)v18 && *(_DWORD *)(*(void *)v18 + 48) == 4)
            {
              uint64_t v20 = WGSL::RewriteGlobalVariables::packStructType(a1);
              if (v20)
              {
                uint64_t v21 = *(void *)(a1 + 40);
                *(_WORD *)(v21 + 9) = 257;
                uint64_t v18 = WGSL::TypeStore::arrayType(v21 + 96, v20, *(void *)(v18 + 8), *(void *)(v18 + 16));
                goto LABEL_11;
              }
            }
            else if ((WGSL::Type::packing(*(WGSL::Type **)v18) & 0x10) != 0)
            {
              uint64_t v18 = 0;
              *(unsigned char *)(*(void *)(a1 + 40) + 30) = 1;
              goto LABEL_11;
            }
            break;
          case 4:
            uint64_t v18 = WGSL::RewriteGlobalVariables::packStructType(a1);
            goto LABEL_11;
        }
      }
      uint64_t v18 = 0;
LABEL_11:
      v15 |= v18 != 0;
      v16 += 8;
      v17 -= 8;
      if (!v17)
      {
        uint64_t v4 = *(void *)a2;
        if (v15) {
          goto LABEL_27;
        }
LABEL_26:
        if (*(unsigned char *)(v4 + 120))
        {
LABEL_27:
          uint64_t v22 = *(void *)(a1 + 40);
          unsigned int v25 = *(unsigned __int8 *)(v4 + 88);
          uint64_t v23 = (unsigned char *)(v4 + 88);
          uint64_t v24 = v25;
          unsigned char *v23 = 6;
          uint64_t v26 = (uint64_t *)(v22 + 400);
          unint64_t v27 = *(unsigned int *)(v22 + 412);
          if (v27 == *(_DWORD *)(v22 + 408))
          {
            unint64_t v28 = v27 + (v27 >> 2);
            if (v28 >= 0x10) {
              unint64_t v29 = v28 + 1;
            }
            else {
              unint64_t v29 = 16;
            }
            if (v29 <= v27 + 1) {
              unint64_t v30 = v27 + 1;
            }
            else {
              unint64_t v30 = v29;
            }
            WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v26, v30);
            unint64_t v27 = *(unsigned int *)(v22 + 412);
            uint64_t v31 = *(void *)(v22 + 400);
          }
          else
          {
            uint64_t v31 = *v26;
          }
          int v32 = (void *)(v31 + 32 * v27);
          *int v32 = &unk_1ECABD3C0;
          v32[1] = v23;
          v32[2] = v24;
          v32[3] = v32;
          ++*(_DWORD *)(v22 + 412);
          uint64_t v33 = *(void *)(*(void *)a2 + 48);
          if (!v33)
          {
            unint64_t v71 = 0;
            int v36 = 7;
            goto LABEL_40;
          }
          *(_DWORD *)v33 += 2;
          unint64_t v71 = (_DWORD *)v33;
          int v34 = *(_DWORD *)(v33 + 4);
          if ((v34 & 0x80000000) == 0)
          {
            BOOL v35 = __OFADD__(v34, 7);
            int v36 = v34 + 7;
            if (!v35)
            {
LABEL_40:
              if (!__OFADD__(v36, 2))
              {
                BOOL v37 = !v33 || (*(unsigned char *)(v33 + 16) & 4) != 0;
                WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v36 + 2), v37, (int8x16_t *)"__", 2u, v33, (int8x16_t *)"_Packed", 7u, &v72);
                int v38 = v72;
                if (v72)
                {
                  if (!v71) {
                    goto LABEL_49;
                  }
                  if (*v71 == 2)
                  {
                    WTF::StringImpl::destroy();
                    int v38 = v72;
                    uint64_t v39 = *(void *)(a1 + 40) + 312;
                    if (v72) {
                      goto LABEL_51;
                    }
                  }
                  else
                  {
                    *v71 -= 2;
LABEL_49:
                    uint64_t v39 = *(void *)(a1 + 40) + 312;
LABEL_51:
                    *v38 += 2;
                  }
                  uint64_t v70 = v38;
                  uint64_t v40 = *(void *)a2;
                  uint64_t v41 = *(unsigned int *)(*(void *)a2 + 84);
                  if (!v41)
                  {
                    uint64_t v43 = 0;
                    goto LABEL_65;
                  }
                  if (v41 >> 29)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x18256C498);
                  }
                  uint64_t v42 = WTF::fastMalloc((WTF *)(8 * v41));
                  uint64_t v43 = v42;
                  uint64_t v44 = *(unsigned int *)(v40 + 84);
                  if (v44)
                  {
                    uint64_t v45 = *(void *)(v40 + 72);
                    unint64_t v46 = (v44 - 1) & 0x1FFFFFFFFFFFFFFFLL;
                    if (v46 < 3)
                    {
                      uint64_t v47 = (void *)v42;
                      __int16 v48 = *(uint64_t **)(v40 + 72);
                    }
                    else
                    {
                      uint64_t v47 = (void *)v42;
                      __int16 v48 = *(uint64_t **)(v40 + 72);
                      if ((unint64_t)(v42 - v45) >= 0x20)
                      {
                        uint64_t v49 = 0;
                        unint64_t v50 = v46 + 1;
                        uint64_t v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
                        uint64_t v47 = (void *)(v42 + v51);
                        __int16 v48 = (uint64_t *)(v45 + v51);
                        uint64_t v52 = v50 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          int v53 = (_OWORD *)(v42 + v49);
                          long long v54 = *(_OWORD *)(v45 + v49 + 16);
                          *int v53 = *(_OWORD *)(v45 + v49);
                          v53[1] = v54;
                          v49 += 32;
                          v52 -= 4;
                        }
                        while (v52);
                        if (v50 == (v50 & 0x3FFFFFFFFFFFFFFCLL)) {
                          goto LABEL_65;
                        }
                      }
                    }
                    unsigned __int8 v55 = (uint64_t *)(v45 + 8 * v44);
                    do
                    {
                      uint64_t v56 = *v48++;
                      *v47++ = v56;
                    }
                    while (v48 != v55);
                  }
LABEL_65:
                  uint64_t v57 = *(void *)a2;
                  uint64_t v58 = *(void *)v39;
                  if (*(void *)(v39 + 8) - *(void *)v39 <= 0x8FuLL)
                  {
                    WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)v39);
                    uint64_t v58 = *(void *)v39;
                  }
                  *(void *)(v58 + 8) = 0;
                  *(void *)(v58 + 16) = 0;
                  *(void *)uint64_t v58 = &unk_1ECABC718;
                  *(_OWORD *)(v58 + 32) = 0uLL;
                  *(void *)(v58 + 24) = off_1ECABC030;
                  *(void *)(v58 + 48) = v70;
                  *(void *)(v58 + 56) = 0;
                  *(void *)(v58 + 64) = 0;
                  *(void *)(v58 + 72) = v43;
                  *(_DWORD *)(v58 + 80) = v41;
                  *(_DWORD *)(v58 + 84) = v41;
                  *(unsigned char *)(v58 + 88) = 7;
                  *(unsigned char *)(v58 + 124) = 0;
                  *(unsigned char *)(v58 + 132) = 0;
                  *(unsigned char *)(v58 + 128) = 0;
                  *(unsigned char *)(v58 + 136) = 0;
                  *(void *)(v58 + 104) = 0;
                  *(void *)(v58 + 112) = 0;
                  *(void *)(v58 + 96) = v57;
                  *(unsigned char *)(v58 + 120) = 0;
                  if (v57)
                  {
                    *(void *)(v57 + 104) = v58;
                    int v59 = *(_DWORD *)(v57 + 124);
                    *(unsigned char *)(v58 + 128) = *(unsigned char *)(v57 + 128);
                    *(_DWORD *)(v58 + 124) = v59;
                    int v60 = *(_DWORD *)(v57 + 132);
                    *(unsigned char *)(v58 + 136) = *(unsigned char *)(v57 + 136);
                    *(_DWORD *)(v58 + 132) = v60;
                  }
                  *(void *)v39 += 144;
                  unint64_t v61 = *(unsigned int *)(v39 + 44);
                  if (v61 != *(_DWORD *)(v39 + 40))
                  {
                    int v68 = (uint64_t *)(*(void *)(v39 + 32) + 8 * v61);
                    goto LABEL_83;
                  }
                  unint64_t v62 = v61 + (v61 >> 2);
                  if (v62 >= 0x10) {
                    unint64_t v63 = v62 + 1;
                  }
                  else {
                    unint64_t v63 = 16;
                  }
                  if (v63 <= v61 + 1) {
                    unint64_t v64 = v61 + 1;
                  }
                  else {
                    unint64_t v64 = v63;
                  }
                  if (!(v64 >> 29))
                  {
                    uint64_t v65 = *(void **)(v39 + 32);
                    uint64_t v66 = (void *)WTF::fastMalloc((WTF *)(8 * v64));
                    *(_DWORD *)(v39 + 40) = v64;
                    *(void *)(v39 + 32) = v66;
                    memcpy(v66, v65, 8 * v61);
                    if (v65)
                    {
                      if (*(void **)(v39 + 32) == v65)
                      {
                        *(void *)(v39 + 32) = 0;
                        *(_DWORD *)(v39 + 40) = 0;
                      }
                      WTF::fastFree((WTF *)v65, v67);
                    }
                    unint64_t v61 = *(unsigned int *)(v39 + 44);
                    int v68 = (uint64_t *)(*(void *)(v39 + 32) + 8 * v61);
LABEL_83:
                    *int v68 = v58;
                    *(_DWORD *)(v39 + 44) = v61 + 1;
                    WGSL::ShaderModule::append<WGSL::AST::Structure &,std::reference_wrapper<WGSL::AST::Declaration>,0ul>(*(void **)(a1 + 40), *(void *)(a1 + 40) + 64, v58);
                    WGSL::TypeStore::allocateType<WGSL::Types::Struct,WGSL::AST::Structure &,WTF::HashMap<WTF::String,WGSL::Type const*,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits> &>();
                  }
                }
LABEL_89:
                __break(0xC471u);
                JUMPOUT(0x18256C480);
              }
            }
          }
          unint64_t v72 = 0;
          goto LABEL_89;
        }
        return 0;
      }
    }
  }
  uint64_t v5 = *(void *)(a1 + 176);
  if (!v5) {
    return 0;
  }
  unsigned int v6 = *(_DWORD *)(v5 - 8);
  unint64_t v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  uint64_t v10 = v6 & ((v9 >> 31) ^ v9);
  uint64_t v11 = *(void *)(v5 + 16 * v10);
  if (v11 != a2)
  {
    int v12 = 1;
    while (v11)
    {
      uint64_t v10 = (v10 + v12) & v6;
      uint64_t v11 = *(void *)(v5 + 16 * v10);
      ++v12;
      if (v11 == a2) {
        return *(void *)(v5 + 16 * v10 + 8);
      }
    }
    return 0;
  }
  return *(void *)(v5 + 16 * v10 + 8);
}

uint64_t WGSL::RewriteGlobalVariables::updateReference(unint64_t this, WGSL::AST::Variable *a2, WGSL::AST::Expression *a3)
{
  if ((*(unsigned int (**)(WGSL::AST::Variable *))(*(void *)a2 + 16))(a2) != 61)
  {
    uint64_t result = 96;
    __break(0xC471u);
    return result;
  }
  uint64_t v6 = *((void *)a2 + 3);
  if (v6)
  {
    if (*(_DWORD *)(v6 + 48) == 10) {
      unint64_t v7 = (unsigned __int8 *)*((void *)a2 + 3);
    }
    else {
      unint64_t v7 = 0;
    }
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v8 = (void *)(*(void *)(this + 40) + 312);
  long long v58 = 0uLL;
  unint64_t v9 = WGSL::AST::Builder::construct<WGSL::AST::ReferenceTypeExpression,WGSL::SourceSpan,WGSL::AST::Expression &,void>(v8, &v58, (uint64_t)a3);
  uint64_t v10 = *(void *)(this + 40);
  uint64_t v48 = *((void *)a3 + 3);
  *(void *)&long long v58 = ((unint64_t)v7[1] << 16) | ((unint64_t)*v7 << 8) | 6;
  *((void *)&v58 + 1) = v48;
  uint64_t v11 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v10 + 112), (unsigned __int8 *)&v58);
  int v12 = *(unsigned __int8 **)(v10 + 112);
  if (v12) {
    v12 += 24 * *((unsigned int *)v12 - 1);
  }
  if (v12 == v11 || (uint64_t v13 = *((void *)v11 + 2)) == 0) {
    WGSL::TypeStore::allocateType<WGSL::Types::Reference,WGSL::AddressSpace &,WGSL::AccessMode &,WGSL::Type const*&,BOOL &>();
  }
  v9[3] = v13;
  uint64_t v14 = *(void *)(this + 40);
  long long v52 = *(_OWORD *)((char *)a2 + 8);
  uint64_t v15 = *((void *)a2 + 3);
  unint64_t v50 = a2;
  uint64_t v51 = (void (**)(WGSL::AST::ReferenceTypeExpression *__hidden))&unk_1ECABBFE0;
  uint64_t v53 = v15;
  v54[0] = 0;
  unsigned __int8 v56 = 0;
  int v16 = *((unsigned __int8 *)a2 + 56);
  uint64_t v47 = v9;
  if (*((unsigned char *)a2 + 56))
  {
    int v55 = -1;
    this = *((unsigned int *)a2 + 12);
    if (this != -1)
    {
      ((void (*)(long long *, unsigned char *, char *))off_1ECABCEC0[this])(&v58, v54, (char *)a2 + 32);
      int v55 = this;
    }
    unsigned __int8 v56 = 1;
  }
  uint64_t v17 = (uint64_t *)(v14 + 400);
  uint64_t v18 = *((void *)a2 + 8);
  uint64_t v51 = off_1ECABD250;
  uint64_t v57 = v18;
  unint64_t v19 = *(unsigned int *)(v14 + 412);
  uint64_t v46 = v14;
  if (v19 == *(_DWORD *)(v14 + 408))
  {
    unint64_t v20 = v19 + (v19 >> 2);
    if (v20 >= 0x10) {
      unint64_t v21 = v20 + 1;
    }
    else {
      unint64_t v21 = 16;
    }
    if (v21 <= v19 + 1) {
      unint64_t v22 = v19 + 1;
    }
    else {
      unint64_t v22 = v21;
    }
    WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v17, v22);
    uint64_t v23 = *(unsigned int *)(v14 + 412);
    uint64_t v24 = *(void *)(v14 + 400);
    unsigned int v25 = v50;
    long long v59 = v52;
    *(void *)&long long v58 = v50;
    *((void *)&v58 + 1) = &unk_1ECABBFE0;
    uint64_t v26 = v53;
    uint64_t v60 = v53;
    v61[0] = 0;
    unsigned __int8 v63 = 0;
    int v27 = v56;
    if (v56)
    {
      int v62 = -1;
      LODWORD(this) = v55;
      if (v55 != -1)
      {
        ((void (*)(uint64_t *, unsigned char *, unsigned char *))off_1ECABCF18[v55])(&v49, v61, v54);
        int v62 = this;
        unsigned int v25 = (WGSL::AST::Variable *)v58;
        uint64_t v26 = v60;
      }
      int v28 = 1;
      unsigned __int8 v63 = 1;
    }
    else
    {
      int v28 = 0;
    }
    *((void *)&v58 + 1) = off_1ECABD250;
    uint64_t v34 = v57;
    uint64_t v64 = v57;
    uint64_t v35 = v24 + 32 * v23;
    *(void *)(v35 + 24) = 0;
    int v36 = (uint64_t *)(v35 + 24);
    uint64_t result = (uint64_t)operator new(0x58uLL);
    uint64_t v38 = result;
    *(void *)uint64_t result = &unk_1ECABD378;
    *(void *)(result + 8) = v25;
    *(_OWORD *)(result + 24) = v59;
    *(void *)(result + 16) = &unk_1ECABBFE0;
    *(void *)(result + 40) = v26;
    *(unsigned char *)(result + 48) = 0;
    *(unsigned char *)(result + 72) = 0;
    if (v27)
    {
      *(_DWORD *)(result + 64) = -1;
      if (this != -1)
      {
        uint64_t result = ((uint64_t (*)(uint64_t *, uint64_t, unsigned char *))off_1ECABCF18[this])(&v49, result + 48, v61);
        *(_DWORD *)(v38 + 64) = this;
        uint64_t v34 = v64;
        int v28 = v63;
      }
      *(unsigned char *)(v38 + 72) = 1;
    }
    else
    {
      int v28 = 0;
    }
    *(void *)(v38 + 16) = off_1ECABD250;
    *(void *)(v38 + 80) = v34;
    uint64_t *v36 = v38;
    *((void *)&v58 + 1) = &unk_1ECABBFE0;
    if (v28 && v62 != -1) {
      uint64_t result = ((uint64_t (*)(uint64_t *, unsigned char *))off_1ECABCE68[v62])(&v49, v61);
    }
    ++*(_DWORD *)(v46 + 412);
    uint64_t v43 = (char *)a2 + 32;
    uint64_t v42 = v47;
    uint64_t v51 = (void (**)(WGSL::AST::ReferenceTypeExpression *__hidden))&unk_1ECABBFE0;
    if (!v56) {
      goto LABEL_55;
    }
  }
  else
  {
    uint64_t v29 = *v17;
    unint64_t v30 = v50;
    long long v59 = v52;
    *(void *)&long long v58 = v50;
    *((void *)&v58 + 1) = &unk_1ECABBFE0;
    uint64_t v31 = v53;
    uint64_t v60 = v53;
    v61[0] = 0;
    unsigned __int8 v63 = 0;
    if (v16)
    {
      int v62 = -1;
      if (this != -1)
      {
        uint64_t v32 = v29;
        ((void (*)(uint64_t *, unsigned char *, unsigned char *))off_1ECABCF18[this])(&v49, v61, v54);
        uint64_t v29 = v32;
        int v62 = this;
        uint64_t v18 = v57;
        unint64_t v30 = (WGSL::AST::Variable *)v58;
        uint64_t v31 = v60;
      }
      int v33 = 1;
      unsigned __int8 v63 = 1;
    }
    else
    {
      int v33 = 0;
    }
    *((void *)&v58 + 1) = off_1ECABD250;
    uint64_t v64 = v18;
    uint64_t v39 = v29 + 32 * v19;
    *(void *)(v39 + 24) = 0;
    uint64_t v40 = (uint64_t *)(v39 + 24);
    uint64_t result = (uint64_t)operator new(0x58uLL);
    uint64_t v41 = result;
    *(void *)uint64_t result = &unk_1ECABD378;
    *(void *)(result + 8) = v30;
    *(_OWORD *)(result + 24) = v59;
    *(void *)(result + 16) = &unk_1ECABBFE0;
    *(void *)(result + 40) = v31;
    *(unsigned char *)(result + 48) = 0;
    *(unsigned char *)(result + 72) = 0;
    if (v16)
    {
      *(_DWORD *)(result + 64) = -1;
      if (this != -1)
      {
        uint64_t result = ((uint64_t (*)(uint64_t *, uint64_t, unsigned char *))off_1ECABCF18[this])(&v49, result + 48, v61);
        *(_DWORD *)(v41 + 64) = this;
        uint64_t v18 = v64;
        int v33 = v63;
      }
      *(unsigned char *)(v41 + 72) = 1;
    }
    else
    {
      int v33 = 0;
    }
    *(void *)(v41 + 16) = off_1ECABD250;
    *(void *)(v41 + 80) = v18;
    *uint64_t v40 = v41;
    *((void *)&v58 + 1) = &unk_1ECABBFE0;
    uint64_t v43 = (char *)a2 + 32;
    uint64_t v42 = v47;
    if (v33)
    {
      if (v62 != -1) {
        uint64_t result = ((uint64_t (*)(uint64_t *, unsigned char *))off_1ECABCE68[v62])(&v49, v61);
      }
      int v62 = -1;
    }
    ++*(_DWORD *)(v46 + 412);
    uint64_t v51 = (void (**)(WGSL::AST::ReferenceTypeExpression *__hidden))&unk_1ECABBFE0;
    if (!v56) {
      goto LABEL_55;
    }
  }
  if (v55 != -1) {
    uint64_t result = ((uint64_t (*)(long long *, unsigned char *))off_1ECABCE68[v55])(&v58, v54);
  }
LABEL_55:
  *(void *)a2 = &unk_1ECABBFE0;
  if (*((unsigned char *)a2 + 56))
  {
    uint64_t v44 = *((unsigned int *)a2 + 12);
    if (v44 != -1) {
      uint64_t result = ((uint64_t (*)(long long *, char *))off_1ECABCE68[v44])(&v58, v43);
    }
    *((_DWORD *)a2 + 12) = -1;
  }
  *(void *)a2 = &unk_1ECABC008;
  *(_OWORD *)((char *)a2 + 8) = *(_OWORD *)(v42 + 1);
  *(void *)a2 = &unk_1ECABBFE0;
  *((void *)a2 + 3) = v42[3];
  *((unsigned char *)a2 + 32) = 0;
  *((unsigned char *)a2 + 56) = 0;
  if (*((unsigned char *)v42 + 56))
  {
    *((_DWORD *)a2 + 12) = -1;
    uint64_t v45 = *((unsigned int *)v42 + 12);
    if (v45 != -1)
    {
      uint64_t result = ((uint64_t (*)(long long *, char *, void *))off_1ECABCEC0[v45])(&v58, v43, v42 + 4);
      *((_DWORD *)a2 + 12) = v45;
    }
    *((unsigned char *)a2 + 56) = 1;
  }
  *(void *)a2 = off_1ECABD250;
  *((void *)a2 + 8) = v42[8];
  return result;
}

void *WGSL::RewriteGlobalVariables::insertParameter(uint64_t a1, _OWORD *a2, uint64_t a3, unsigned int a4, uint64_t a5, void *a6, char a7)
{
  unint64_t v8 = a6;
  uint64_t v13 = a1;
  unsigned int v59 = a4;
  if (!a6)
  {
    uint64_t v14 = *(void *)(a1 + 40);
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&v60, "__ArgumentBufferT_", 19, a4);
    if (!v60)
    {
      __break(0xC471u);
LABEL_59:
      JUMPOUT(0x18256D11CLL);
    }
    v57[0] = off_1ECABC030;
    v57[1] = 0;
    v57[2] = 0;
    long long v58 = v60;
    unint64_t v8 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>((void *)(v14 + 312), a2, (uint64_t)v57);
    uint64_t v15 = v58;
    v57[0] = off_1ECABC030;
    long long v58 = 0;
    if (v15)
    {
      if (*v15 == 2)
      {
        WTF::StringImpl::destroy();
        uint64_t v16 = *(void *)(v13 + 72);
        if (!v16)
        {
LABEL_15:
          v8[3] = v16;
          goto LABEL_16;
        }
LABEL_9:
        unsigned int v17 = *(_DWORD *)(v16 - 8);
        unsigned int v18 = 9 * ((~(a4 << 15) + a4) ^ ((~(a4 << 15) + a4) >> 10));
        unsigned int v19 = (v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11);
        uint64_t v20 = v17 & (v19 ^ HIWORD(v19));
        int v21 = *(_DWORD *)(v16 + 16 * v20);
        if (v21 == a4)
        {
LABEL_13:
          uint64_t v16 = *(void *)(v16 + 16 * v20 + 8);
        }
        else
        {
          int v22 = 1;
          while (v21 != -1)
          {
            uint64_t v20 = (v20 + v22) & v17;
            int v21 = *(_DWORD *)(v16 + 16 * v20);
            ++v22;
            if (v21 == a4) {
              goto LABEL_13;
            }
          }
          uint64_t v16 = 0;
        }
        goto LABEL_15;
      }
      *v15 -= 2;
    }
    uint64_t v16 = *(void *)(v13 + 72);
    if (!v16) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
LABEL_16:
  uint64_t v23 = WGSL::AST::Builder::construct<WGSL::AST::AbstractIntegerLiteral,WGSL::SourceSpan const&,unsigned int &,void>((void *)(*(void *)(v13 + 40) + 312), a2, &v59);
  uint64_t v24 = v23;
  uint64_t v25 = *(void *)(v13 + 40);
  v23[3] = *(void *)(v25 + 128);
  if (*((unsigned char *)v23 + 56))
  {
    uint64_t v26 = *((unsigned int *)v23 + 12);
    if (v26 != -1)
    {
      int v27 = (unsigned int *)(v23 + 4);
      if (v26 == 4)
      {
        unsigned int *v27 = a4;
        goto LABEL_23;
      }
      ((void (*)(void *, unsigned int *))off_1ECABCE68[v26])(v57, v27);
      uint64_t v25 = *(void *)(v13 + 40);
    }
    *((_DWORD *)v24 + 8) = a4;
    *((_DWORD *)v24 + 12) = 4;
  }
  else
  {
    *((_DWORD *)v23 + 8) = a4;
    *((_DWORD *)v23 + 12) = 4;
    *((unsigned char *)v23 + 56) = 1;
  }
LABEL_23:
  uint64_t v28 = *(void *)(v25 + 312);
  if ((unint64_t)(*(void *)(v25 + 320) - v28) <= 0x1F)
  {
    WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v25 + 312));
    uint64_t v28 = *(void *)(v25 + 312);
  }
  *(_OWORD *)(v28 + 8) = *a2;
  *(void *)uint64_t v28 = &unk_1ECABD430;
  *(void *)(v28 + 24) = v24;
  *(void *)(v25 + 312) += 32;
  unint64_t v29 = *(unsigned int *)(v25 + 356);
  if (v29 != *(_DWORD *)(v25 + 352))
  {
    uint64_t v41 = (void *)(*(void *)(v25 + 344) + 8 * v29);
    goto LABEL_39;
  }
  uint64_t v56 = v13;
  unint64_t v30 = a2;
  uint64_t v31 = v8;
  uint64_t v32 = a5;
  char v33 = a7;
  uint64_t v34 = a3;
  unint64_t v35 = v29 + (v29 >> 2);
  if (v35 >= 0x10) {
    unint64_t v36 = v35 + 1;
  }
  else {
    unint64_t v36 = 16;
  }
  if (v36 <= v29 + 1) {
    unint64_t v37 = v29 + 1;
  }
  else {
    unint64_t v37 = v36;
  }
  if (v37 >> 29)
  {
    __break(0xC471u);
    goto LABEL_59;
  }
  uint64_t v38 = *(void **)(v25 + 344);
  uint64_t v39 = (void *)WTF::fastMalloc((WTF *)(8 * v37));
  *(_DWORD *)(v25 + 352) = v37;
  *(void *)(v25 + 344) = v39;
  memcpy(v39, v38, 8 * v29);
  a3 = v34;
  a7 = v33;
  a5 = v32;
  unint64_t v8 = v31;
  a2 = v30;
  uint64_t v13 = v56;
  if (v38)
  {
    if (*(void **)(v25 + 344) == v38)
    {
      *(void *)(v25 + 344) = 0;
      *(_DWORD *)(v25 + 352) = 0;
    }
    WTF::fastFree((WTF *)v38, v40);
  }
  unint64_t v29 = *(unsigned int *)(v25 + 356);
  uint64_t v41 = (void *)(*(void *)(v25 + 344) + 8 * v29);
LABEL_39:
  *uint64_t v41 = v28;
  *(_DWORD *)(v25 + 356) = v29 + 1;
  uint64_t v42 = *(void *)(v13 + 40);
  uint64_t v43 = (void *)WTF::fastMalloc((WTF *)8);
  *uint64_t v43 = v28;
  uint64_t v44 = *(void *)(v42 + 312);
  if ((unint64_t)(*(void *)(v42 + 320) - v44) <= 0x67)
  {
    WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v42 + 312));
    uint64_t v44 = *(void *)(v42 + 312);
  }
  *(_OWORD *)(v44 + 8) = *a2;
  *(void *)uint64_t v44 = &unk_1ECABC618;
  *(unsigned char *)(v44 + 24) = a7;
  *(void *)(v44 + 32) = &unk_1ECABC008;
  *(_OWORD *)(v44 + 40) = *(_OWORD *)(a5 + 8);
  *(void *)(v44 + 32) = off_1ECABC030;
  uint64_t v45 = *(void *)(a5 + 24);
  *(void *)(a5 + 24) = 0;
  *(void *)(v44 + 56) = v45;
  *(void *)(v44 + 64) = v8;
  *(void *)(v44 + 72) = v43;
  *(void *)(v44 + 80) = 0x100000001;
  *(unsigned char *)(v44 + 93) = 0;
  *(unsigned char *)(v44 + 96) = 0;
  *(unsigned char *)(v44 + 100) = 0;
  *(_DWORD *)(v44 + 88) = 0;
  *(void *)(v42 + 312) += 104;
  unint64_t v46 = *(unsigned int *)(v42 + 356);
  if (v46 == *(_DWORD *)(v42 + 352))
  {
    uint64_t v47 = a3;
    unint64_t v48 = v46 + (v46 >> 2);
    if (v48 >= 0x10) {
      unint64_t v49 = v48 + 1;
    }
    else {
      unint64_t v49 = 16;
    }
    if (v49 <= v46 + 1) {
      unint64_t v50 = v46 + 1;
    }
    else {
      unint64_t v50 = v49;
    }
    if (v50 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x18256D124);
    }
    uint64_t v51 = *(void **)(v42 + 344);
    long long v52 = (void *)WTF::fastMalloc((WTF *)(8 * v50));
    *(_DWORD *)(v42 + 352) = v50;
    *(void *)(v42 + 344) = v52;
    memcpy(v52, v51, 8 * v46);
    a3 = v47;
    if (v51)
    {
      if (*(void **)(v42 + 344) == v51)
      {
        *(void *)(v42 + 344) = 0;
        *(_DWORD *)(v42 + 352) = 0;
      }
      WTF::fastFree((WTF *)v51, v53);
    }
    unint64_t v46 = *(unsigned int *)(v42 + 356);
    long long v54 = (uint64_t *)(*(void *)(v42 + 344) + 8 * v46);
  }
  else
  {
    long long v54 = (uint64_t *)(*(void *)(v42 + 344) + 8 * v46);
  }
  *long long v54 = v44;
  *(_DWORD *)(v42 + 356) = v46 + 1;
  return WGSL::ShaderModule::append<WGSL::AST::Parameter &,std::reference_wrapper<WGSL::AST::Parameter>,0ul>((void *)v42, a3 + 56, v44);
}

void *WGSL::AST::Builder::construct<WGSL::AST::AbstractIntegerLiteral,WGSL::SourceSpan const&,unsigned int &,void>(void *this, _OWORD *a2, unsigned int *a3)
{
  uint64_t v5 = this;
  uint64_t v6 = *this;
  if (this[1] - *this <= 0x47uLL)
  {
    this = (void *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    uint64_t v6 = *v5;
  }
  uint64_t v7 = *a3;
  *(_OWORD *)(v6 + 8) = *a2;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 0;
  *(unsigned char *)(v6 + 56) = 0;
  *(void *)uint64_t v6 = &unk_1ECABD408;
  *(void *)(v6 + 64) = v7;
  *v5 += 72;
  unint64_t v8 = *((unsigned int *)v5 + 11);
  if (v8 != *((_DWORD *)v5 + 10))
  {
    uint64_t v15 = (void *)(v5[4] + 8 * v8);
LABEL_17:
    *uint64_t v15 = v6;
    *((_DWORD *)v5 + 11) = v8 + 1;
    return (void *)v6;
  }
  unint64_t v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10) {
    unint64_t v10 = v9 + 1;
  }
  else {
    unint64_t v10 = 16;
  }
  if (v10 <= v8 + 1) {
    unint64_t v11 = v8 + 1;
  }
  else {
    unint64_t v11 = v10;
  }
  if (!(v11 >> 29))
  {
    int v12 = (void *)v5[4];
    uint64_t v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
    *((_DWORD *)v5 + 10) = v11;
    v5[4] = v13;
    memcpy(v13, v12, 8 * v8);
    if (v12)
    {
      if ((void *)v5[4] == v12)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v12, v14);
    }
    unint64_t v8 = *((unsigned int *)v5 + 11);
    uint64_t v15 = (void *)(v5[4] + 8 * v8);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

WTF *WGSL::RewriteGlobalVariables::insertStructs(uint64_t a1, void *a2, const WTF::StringImpl *a3, unsigned int a4, uint64_t *a5)
{
  uint64_t v574 = *MEMORY[0x1E4F143B8];
  __src = 0;
  uint64_t v563 = 0;
  __int32 v561 = 0;
  uint64_t v560 = 0;
  if (a4)
  {
    uint64_t v5 = a3;
    uint64_t v6 = (uint64_t)a2;
    v548 = (const WTF::StringImpl *)((char *)a3 + 24 * a4);
    uint64_t v546 = (void *)(a1 + 8);
    uint64_t v7 = 3435973837;
    do
    {
      uint64_t v568 = 0;
      uint64_t v569 = 0;
      int v566 = 0;
      uint64_t v567 = 0;
      unsigned int v8 = *((_DWORD *)v5 + 5);
      if (!v8)
      {
        unint64_t v9 = 0;
        ++v561;
        int v438 = 3;
        goto LABEL_500;
      }
      unint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v549 = v5;
      uint64_t v11 = *((void *)v5 + 1);
      uint64_t v551 = v11 + 120 * v8;
      do
      {
        int v14 = *(unsigned __int8 *)(v6 + 184);
        if ((*(unsigned char *)(v11 + 8) & v14) == 0) {
          goto LABEL_8;
        }
        switch(v14)
        {
          case 4:
            uint64_t v15 = (uint64_t *)(v11 + 96);
            break;
          case 2:
            uint64_t v15 = (uint64_t *)(v11 + 72);
            break;
          case 1:
            uint64_t v15 = (uint64_t *)(v11 + 48);
            break;
          default:
            goto LABEL_17;
        }
        uint64_t v10 = *v15;
LABEL_17:
        switch(v14)
        {
          case 4:
            uint64_t v16 = (unsigned int **)(v11 + 104);
            break;
          case 2:
            uint64_t v16 = (unsigned int **)(v11 + 80);
            break;
          case 1:
            uint64_t v16 = (unsigned int **)(v11 + 56);
            break;
          default:
            goto LABEL_24;
        }
        unint64_t v552 = *v16;
LABEL_24:
        int v17 = BYTE4(v10);
        uint64_t v18 = *(void *)(v6 + 56);
        unsigned int v553 = v10;
        if (!v18) {
          goto LABEL_53;
        }
        v19.i32[0] = *(_DWORD *)v11;
        v19.i32[1] = v561;
        int32x2_t v20 = vadd_s32(v19, (int32x2_t)0x100000001);
        int v21 = *(_DWORD *)(v18 - 8);
        int8x8_t v22 = (int8x8_t)vsub_s32(v19, vshl_n_s32(v20, 0xFuLL));
        int8x8_t v23 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v22, 0xAuLL), v22), (int32x2_t)0x900000009);
        int32x2_t v24 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v23, 6uLL), v23);
        int8x8_t v25 = (int8x8_t)vadd_s32(v24, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v24, 0xBuLL)));
        int32x2_t v26 = vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v25, 0x10uLL), v25), (int32x2_t)0x109132F905AC73FELL);
        unsigned int v27 = v21 & ((0xD7862706ELL * (unint64_t)vadd_s32(v26, vdup_lane_s32(v26, 1)).u32[0]) >> 4);
        uint64_t v28 = (int *)(v18 + 16 * v27);
        int v29 = *v28;
        int v30 = v28[1];
        if (*v28 != v20.i32[1] || v30 != v20.i32[0])
        {
          int v32 = 1;
          while (v29 | v30)
          {
            unsigned int v27 = (v27 + v32) & v21;
            uint64_t v28 = (int *)(v18 + 16 * v27);
            int v29 = *v28;
            int v30 = v28[1];
            ++v32;
            if (*v28 == v20.i32[1] && v30 == v20.i32[0]) {
              goto LABEL_36;
            }
          }
LABEL_53:
          if (*(_DWORD *)(v11 + 32) == 4)
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            *uint64_t v546 = 0;
            v546[1] = 0;
            int v438 = 1;
            *(_DWORD *)(a1 + 24) = 1;
            uint64_t v5 = v549;
            unsigned int v439 = v566;
            if (!v566) {
              goto LABEL_500;
            }
LABEL_499:
            WTF::fastFree(v439, a2);
            goto LABEL_500;
          }
          uint64_t v50 = *(void *)(v6 + 40);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          *(void *)&v572[8] = 0;
          *(void *)&v572[16] = 0;
          *(void *)uint64_t v572 = off_1ECABC030;
          uint64_t v573 = (_DWORD *)v571;
          uint64_t v51 = *(void *)(v50 + 312);
          if ((unint64_t)(*(void *)(v50 + 320) - v51) <= 0x5F)
          {
            uint64_t v163 = WTF::fastMalloc((WTF *)0x4000);
            *(void *)&long long v571 = v163;
            uint64_t v165 = *(unsigned int *)(v50 + 340);
            if (v165 == *(_DWORD *)(v50 + 336))
            {
              int v166 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v50 + 328, v165 + 1, (unint64_t)&v571);
              uint64_t v165 = *(unsigned int *)(v50 + 340);
              uint64_t v167 = *(void *)(v50 + 328);
              uint64_t v168 = *(void *)v166;
              *(void *)int v166 = 0;
              *(void *)(v167 + 8 * v165) = v168;
              uint64_t v169 = (WTF *)v571;
            }
            else
            {
              uint64_t v219 = v163;
              uint64_t v169 = 0;
              uint64_t v220 = *(void *)(v50 + 328);
              *(void *)&long long v571 = 0;
              *(void *)(v220 + 8 * v165) = v219;
            }
            *(_DWORD *)(v50 + 340) = v165 + 1;
            WTF::fastFree(v169, v164);
            uint64_t v221 = *(unsigned int *)(v50 + 340);
            if (!v221)
            {
              __break(0xC471u);
              JUMPOUT(0x182570DF8);
            }
            uint64_t v51 = *(void *)(*(void *)(v50 + 328) + 8 * v221 - 8);
            *(void *)(v50 + 312) = v51;
            *(void *)(v50 + 320) = v51 + 0x4000;
          }
          *(unsigned char *)(v51 + 56) = 0;
          *(void *)(v51 + 16) = 0;
          *(void *)(v51 + 24) = 0;
          *(unsigned char *)(v51 + 32) = 0;
          *(void *)uint64_t v51 = off_1ECABBFB8;
          *(void *)(v51 + 8) = 0;
          *(_OWORD *)(v51 + 72) = *(_OWORD *)&v572[8];
          *(void *)(v51 + 64) = off_1ECABC030;
          long long v52 = v573;
          uint64_t v573 = 0;
          *(void *)(v51 + 88) = v52;
          *(void *)(v50 + 312) += 96;
          unint64_t v53 = *(unsigned int *)(v50 + 356);
          if (v53 == *(_DWORD *)(v50 + 352))
          {
            unint64_t v54 = v53 + (v53 >> 2);
            if (v54 >= 0x10) {
              unint64_t v55 = v54 + 1;
            }
            else {
              unint64_t v55 = 16;
            }
            if (v55 <= v53 + 1) {
              unint64_t v56 = v53 + 1;
            }
            else {
              unint64_t v56 = v55;
            }
            if (v56 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x182570D70);
            }
            uint64_t v57 = *(void **)(v50 + 344);
            long long v58 = (void *)WTF::fastMalloc((WTF *)(8 * v56));
            *(_DWORD *)(v50 + 352) = v56;
            *(void *)(v50 + 344) = v58;
            memcpy(v58, v57, 8 * v53);
            if (v57)
            {
              if (*(void **)(v50 + 344) == v57)
              {
                *(void *)(v50 + 344) = 0;
                *(_DWORD *)(v50 + 352) = 0;
              }
              WTF::fastFree((WTF *)v57, v59);
            }
            unint64_t v53 = *(unsigned int *)(v50 + 356);
            uint64_t v60 = (void *)(*(void *)(v50 + 344) + 8 * v53);
          }
          else
          {
            uint64_t v60 = (void *)(*(void *)(v50 + 344) + 8 * v53);
          }
          *uint64_t v60 = v51;
          *(_DWORD *)(v50 + 356) = v53 + 1;
          unint64_t v61 = v573;
          *(void *)uint64_t v572 = off_1ECABC030;
          uint64_t v573 = 0;
          if (v61)
          {
            if (*v61 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v61 -= 2;
            }
          }
          uint64_t v62 = *(void *)(v6 + 40);
          *(void *)(v51 + 24) = *(void *)(v62 + 168);
          uint64_t v63 = *(void *)(v62 + 312);
          if ((unint64_t)(*(void *)(v62 + 320) - v63) <= 0x47)
          {
            uint64_t v170 = WTF::fastMalloc((WTF *)0x4000);
            *(void *)uint64_t v572 = v170;
            uint64_t v172 = *(unsigned int *)(v62 + 340);
            if (v172 == *(_DWORD *)(v62 + 336))
            {
              uint64_t v173 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v62 + 328, v172 + 1, (unint64_t)v572);
              uint64_t v172 = *(unsigned int *)(v62 + 340);
              uint64_t v174 = *(void *)(v62 + 328);
              uint64_t v175 = *(void *)v173;
              *(void *)uint64_t v173 = 0;
              *(void *)(v174 + 8 * v172) = v175;
              unint64_t v176 = *(WTF **)v572;
            }
            else
            {
              uint64_t v222 = v170;
              unint64_t v176 = 0;
              uint64_t v223 = *(void *)(v62 + 328);
              *(void *)uint64_t v572 = 0;
              *(void *)(v223 + 8 * v172) = v222;
            }
            *(_DWORD *)(v62 + 340) = v172 + 1;
            WTF::fastFree(v176, v171);
            uint64_t v224 = *(unsigned int *)(v62 + 340);
            if (!v224)
            {
              __break(0xC471u);
              JUMPOUT(0x182570E00);
            }
            uint64_t v63 = *(void *)(*(void *)(v62 + 328) + 8 * v224 - 8);
            *(void *)(v62 + 312) = v63;
            *(void *)(v62 + 320) = v63 + 0x4000;
          }
          *(unsigned char *)(v63 + 56) = 0;
          *(void *)(v63 + 16) = 0;
          *(void *)(v63 + 24) = 0;
          *(unsigned char *)(v63 + 32) = 0;
          *(void *)uint64_t v63 = off_1ECABD250;
          *(void *)(v63 + 8) = 0;
          *(void *)(v63 + 64) = v51;
          *(void *)(v62 + 312) += 72;
          unint64_t v64 = *(unsigned int *)(v62 + 356);
          if (v64 == *(_DWORD *)(v62 + 352))
          {
            unint64_t v65 = v64 + (v64 >> 2);
            if (v65 >= 0x10) {
              unint64_t v66 = v65 + 1;
            }
            else {
              unint64_t v66 = 16;
            }
            if (v66 <= v64 + 1) {
              unint64_t v67 = v64 + 1;
            }
            else {
              unint64_t v67 = v66;
            }
            if (v67 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x182570D78);
            }
            int v68 = *(void **)(v62 + 344);
            unint64_t v69 = (void *)WTF::fastMalloc((WTF *)(8 * v67));
            *(_DWORD *)(v62 + 352) = v67;
            *(void *)(v62 + 344) = v69;
            memcpy(v69, v68, 8 * v64);
            if (v68)
            {
              if (*(void **)(v62 + 344) == v68)
              {
                *(void *)(v62 + 344) = 0;
                *(_DWORD *)(v62 + 352) = 0;
              }
              WTF::fastFree((WTF *)v68, v70);
            }
            unint64_t v64 = *(unsigned int *)(v62 + 356);
            unint64_t v71 = (void *)(*(void *)(v62 + 344) + 8 * v64);
          }
          else
          {
            unint64_t v71 = (void *)(*(void *)(v62 + 344) + 8 * v64);
          }
          *unint64_t v71 = v63;
          *(_DWORD *)(v62 + 356) = v64 + 1;
          uint64_t v72 = *(void *)(v6 + 40);
          uint64_t v73 = *(void *)(v72 + 168);
          LOBYTE(v558) = 3;
          v564[0] = v73;
          __int16 v570 = 0;
          *(void *)uint64_t v572 = 774;
          *(void *)&v572[8] = v73;
          int v74 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v72 + 112), v572);
          uint64_t v35 = *(void *)(v72 + 112);
          if (v35) {
            v35 += 24 * *(unsigned int *)(v35 - 4);
          }
          if ((unsigned __int8 *)v35 == v74 || (uint64_t v75 = *((void *)v74 + 2)) == 0) {
            WGSL::TypeStore::allocateType<WGSL::Types::Reference,WGSL::AddressSpace &,WGSL::AccessMode &,WGSL::Type const*&,BOOL &>();
          }
          *(void *)(v63 + 24) = v75;
          if (!v17)
          {
LABEL_832:
            __break(1u);
LABEL_833:
            uint64_t v499 = a1;
LABEL_834:
            *(_DWORD *)v7 += 2;
            if ((v35 & 0x80000000) != 0 || __OFADD__(v35, 45))
            {
              *(void *)uint64_t v572 = 0;
            }
            else
            {
              WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((v35 + 45), (*(_DWORD *)(v7 + 16) >> 2) & 1, (int8x16_t *)"Shader is incompatible with layout pipeline: ", 0x2Du, v7, v572);
              uint64_t v543 = *(void *)v572;
              if (*(void *)v572)
              {
                *(void *)(v499 + 8) = 0;
                *(void *)(v499 + 16) = 0;
                *(void *)uint64_t v499 = v543;
                *(_DWORD *)(v499 + 24) = 1;
                *(void *)uint64_t v572 = 0;
                if (*(_DWORD *)v7 == 2) {
                  WTF::StringImpl::destroy();
                }
                else {
                  *(_DWORD *)v7 -= 2;
                }
                unsigned int v544 = v558;
                uint64_t v558 = 0;
                if (v544)
                {
                  if (*v544 == 2) {
                    WTF::StringImpl::destroy();
                  }
                  else {
                    *v544 -= 2;
                  }
                }
                goto LABEL_825;
              }
            }
            __break(0xC471u);
            JUMPOUT(0x182570E6CLL);
          }
          int v76 = 0;
          unsigned int v77 = *(_DWORD *)v11;
          unsigned int v78 = *(_DWORD *)v11;
          do
          {
            ++v76;
            BOOL v79 = v78 > 9;
            v78 /= 0xAu;
          }
          while (v79);
          if (v76 < 0
            || (uint64_t v80 = (v76 + 28), __OFADD__(v76, 28))
            || (WTF::tryFastCompactMalloc((WTF *)(v80 + 20)), (uint64_t v81 = *(void *)v572) == 0))
          {
            __break(0xC471u);
            JUMPOUT(0x182570D44);
          }
          uint64_t v82 = 0;
          **(_DWORD **)uint64_t v572 = 2;
          *(_DWORD *)(v81 + 4) = v80;
          *(void *)(v81 + 8) = v81 + 20;
          *(_DWORD *)(v81 + 16) = 4;
          qmemcpy((void *)(v81 + 20), "__ArgumentBufferPlaceholder_", 28);
          do
          {
            v572[v82-- + 12] = (v77 % 0xA) | 0x30;
            BOOL v79 = v77 > 9;
            v77 /= 0xAu;
          }
          while (v79);
          unsigned int v83 = v553;
          if (v82 + 14 <= 13) {
            memcpy((void *)(v81 + 48), &v572[v82 + 13], -v82);
          }
          uint64_t v84 = *(void *)(v6 + 40);
          uint64_t v85 = *(void *)(v84 + 312);
          if ((unint64_t)(*(void *)(v84 + 320) - v85) < 0x48)
          {
            uint64_t v177 = WTF::fastMalloc((WTF *)0x4000);
            *(void *)uint64_t v572 = v177;
            uint64_t v179 = *(unsigned int *)(v84 + 340);
            if (v179 == *(_DWORD *)(v84 + 336))
            {
              long long v180 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v84 + 328, v179 + 1, (unint64_t)v572);
              uint64_t v179 = *(unsigned int *)(v84 + 340);
              uint64_t v181 = *(void *)(v84 + 328);
              uint64_t v182 = *(void *)v180;
              *(void *)long long v180 = 0;
              *(void *)(v181 + 8 * v179) = v182;
              uint64_t v183 = *(WTF **)v572;
            }
            else
            {
              uint64_t v225 = v177;
              uint64_t v183 = 0;
              uint64_t v226 = *(void *)(v84 + 328);
              *(void *)uint64_t v572 = 0;
              *(void *)(v226 + 8 * v179) = v225;
            }
            *(_DWORD *)(v84 + 340) = v179 + 1;
            WTF::fastFree(v183, v178);
            uint64_t v227 = *(unsigned int *)(v84 + 340);
            unsigned int v83 = v553;
            if (!v227)
            {
              __break(0xC471u);
              JUMPOUT(0x182570DC8);
            }
            uint64_t v85 = *(void *)(*(void *)(v84 + 328) + 8 * v227 - 8);
            *(void *)(v84 + 312) = v85;
            *(void *)(v84 + 320) = v85 + 0x4000;
          }
          *(unsigned char *)(v85 + 32) = 0;
          *(unsigned char *)(v85 + 56) = 0;
          *(void *)(v85 + 16) = 0;
          *(void *)(v85 + 24) = 0;
          *(void *)uint64_t v85 = &unk_1ECABD408;
          *(void *)(v85 + 8) = 0;
          *(void *)(v85 + 64) = v83;
          *(void *)(v84 + 312) += 72;
          unint64_t v86 = *(unsigned int *)(v84 + 356);
          if (v86 == *(_DWORD *)(v84 + 352))
          {
            unint64_t v87 = v86 + (v86 >> 2);
            if (v87 >= 0x10) {
              unint64_t v88 = v87 + 1;
            }
            else {
              unint64_t v88 = 16;
            }
            if (v88 <= v86 + 1) {
              unint64_t v89 = v86 + 1;
            }
            else {
              unint64_t v89 = v88;
            }
            if (v89 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x182570D80);
            }
            uint64_t v90 = *(void **)(v84 + 344);
            uint64_t v91 = (void *)WTF::fastMalloc((WTF *)(8 * v89));
            *(_DWORD *)(v84 + 352) = v89;
            *(void *)(v84 + 344) = v91;
            memcpy(v91, v90, 8 * v86);
            uint64_t v6 = (uint64_t)a2;
            if (v90)
            {
              if (*(void **)(v84 + 344) == v90)
              {
                *(void *)(v84 + 344) = 0;
                *(_DWORD *)(v84 + 352) = 0;
              }
              WTF::fastFree((WTF *)v90, v92);
            }
            unint64_t v86 = *(unsigned int *)(v84 + 356);
            uint64_t v93 = (void *)(*(void *)(v84 + 344) + 8 * v86);
            int v94 = *(unsigned __int8 *)(v85 + 56);
            unsigned int v83 = v553;
          }
          else
          {
            int v94 = 0;
            uint64_t v93 = (void *)(*(void *)(v84 + 344) + 8 * v86);
          }
          void *v93 = v85;
          *(_DWORD *)(v84 + 356) = v86 + 1;
          uint64_t v95 = *(void *)(v6 + 40);
          *(void *)(v85 + 24) = *(void *)(v95 + 128);
          if (v94)
          {
            uint64_t v96 = *(unsigned int *)(v85 + 48);
            if (v96 != -1)
            {
              if (v96 == 4)
              {
                *(_DWORD *)(v85 + 32) = v83;
                goto LABEL_125;
              }
              ((void (*)(unsigned char *, uint64_t))off_1ECABCE68[v96])(v572, v85 + 32);
              uint64_t v95 = *(void *)(v6 + 40);
            }
            *(_DWORD *)(v85 + 32) = v83;
            *(_DWORD *)(v85 + 48) = 4;
          }
          else
          {
            *(_DWORD *)(v85 + 32) = v83;
            *(_DWORD *)(v85 + 48) = 4;
            *(unsigned char *)(v85 + 56) = 1;
          }
LABEL_125:
          unint64_t v97 = *(void **)(v95 + 312);
          if (*(void *)(v95 + 320) - (void)v97 <= 0x1FuLL)
          {
            uint64_t v184 = WTF::fastMalloc((WTF *)0x4000);
            *(void *)uint64_t v572 = v184;
            uint64_t v186 = *(unsigned int *)(v95 + 340);
            if (v186 == *(_DWORD *)(v95 + 336))
            {
              uint64_t v187 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v95 + 328, v186 + 1, (unint64_t)v572);
              uint64_t v186 = *(unsigned int *)(v95 + 340);
              uint64_t v188 = *(void *)(v95 + 328);
              uint64_t v189 = *(void *)v187;
              *(void *)uint64_t v187 = 0;
              *(void *)(v188 + 8 * v186) = v189;
              uint64_t v190 = *(WTF **)v572;
            }
            else
            {
              uint64_t v228 = v184;
              uint64_t v190 = 0;
              uint64_t v229 = *(void *)(v95 + 328);
              *(void *)uint64_t v572 = 0;
              *(void *)(v229 + 8 * v186) = v228;
            }
            *(_DWORD *)(v95 + 340) = v186 + 1;
            WTF::fastFree(v190, v185);
            uint64_t v230 = *(unsigned int *)(v95 + 340);
            if (!v230)
            {
              __break(0xC471u);
              JUMPOUT(0x182570DD0);
            }
            unint64_t v97 = *(void **)(*(void *)(v95 + 328) + 8 * v230 - 8);
            *(void *)(v95 + 312) = v97;
            *(void *)(v95 + 320) = v97 + 2048;
          }
          void *v97 = &unk_1ECABD458;
          v97[1] = 0;
          v97[2] = 0;
          v97[3] = v85;
          *(void *)(v95 + 312) += 32;
          unint64_t v98 = *(unsigned int *)(v95 + 356);
          if (v98 == *(_DWORD *)(v95 + 352))
          {
            unint64_t v99 = v98 + (v98 >> 2);
            if (v99 >= 0x10) {
              unint64_t v100 = v99 + 1;
            }
            else {
              unint64_t v100 = 16;
            }
            if (v100 <= v98 + 1) {
              unint64_t v101 = v98 + 1;
            }
            else {
              unint64_t v101 = v100;
            }
            if (v101 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x182570D88);
            }
            uint64_t v102 = *(void **)(v95 + 344);
            uint64_t v103 = (void *)WTF::fastMalloc((WTF *)(8 * v101));
            *(_DWORD *)(v95 + 352) = v101;
            *(void *)(v95 + 344) = v103;
            memcpy(v103, v102, 8 * v98);
            if (v102)
            {
              if (*(void **)(v95 + 344) == v102)
              {
                *(void *)(v95 + 344) = 0;
                *(_DWORD *)(v95 + 352) = 0;
              }
              WTF::fastFree((WTF *)v102, v104);
            }
            unint64_t v98 = *(unsigned int *)(v95 + 356);
            uint64_t v105 = (void *)(*(void *)(v95 + 344) + 8 * v98);
          }
          else
          {
            uint64_t v105 = (void *)(*(void *)(v95 + 344) + 8 * v98);
          }
          *uint64_t v105 = v97;
          *(_DWORD *)(v95 + 356) = v98 + 1;
          uint64_t v106 = a2[5];
          *(_DWORD *)v81 += 2;
          *(void *)&v572[8] = 0;
          *(void *)&v572[16] = 0;
          *(void *)uint64_t v572 = off_1ECABC030;
          uint64_t v573 = (_DWORD *)v81;
          int v107 = (void *)WTF::fastMalloc((WTF *)8);
          *int v107 = v97;
          uint64_t v108 = *(void *)(v106 + 312);
          if ((unint64_t)(*(void *)(v106 + 320) - v108) <= 0x9F)
          {
            uint64_t v191 = WTF::fastMalloc((WTF *)0x4000);
            *(void *)&long long v571 = v191;
            uint64_t v193 = *(unsigned int *)(v106 + 340);
            if (v193 == *(_DWORD *)(v106 + 336))
            {
              __int16 v194 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v106 + 328, v193 + 1, (unint64_t)&v571);
              uint64_t v193 = *(unsigned int *)(v106 + 340);
              uint64_t v195 = *(void *)(v106 + 328);
              uint64_t v196 = *(void *)v194;
              *(void *)__int16 v194 = 0;
              *(void *)(v195 + 8 * v193) = v196;
              int v197 = (WTF *)v571;
            }
            else
            {
              uint64_t v231 = v191;
              int v197 = 0;
              uint64_t v232 = *(void *)(v106 + 328);
              *(void *)&long long v571 = 0;
              *(void *)(v232 + 8 * v193) = v231;
            }
            *(_DWORD *)(v106 + 340) = v193 + 1;
            WTF::fastFree(v197, v192);
            uint64_t v233 = *(unsigned int *)(v106 + 340);
            if (!v233)
            {
              __break(0xC471u);
              JUMPOUT(0x182570DD8);
            }
            uint64_t v108 = *(void *)(*(void *)(v106 + 328) + 8 * v233 - 8);
            *(void *)(v106 + 312) = v108;
            *(void *)(v106 + 320) = v108 + 0x4000;
          }
          *(void *)(v108 + 8) = 0;
          *(void *)(v108 + 16) = 0;
          *(void *)uint64_t v108 = &unk_1ECABC888;
          long long v109 = *(_OWORD *)&v572[8];
          *(_OWORD *)(v108 + 32) = *(_OWORD *)&v572[8];
          *(void *)(v108 + 24) = off_1ECABC030;
          uint64_t v110 = v573;
          uint64_t v573 = 0;
          *(_OWORD *)(v108 + 64) = v109;
          *(void *)(v108 + 48) = v110;
          *(void *)(v108 + 56) = off_1ECABC030;
          if (v110) {
            *v110 += 2;
          }
          *(void *)(v108 + 80) = v110;
          *(void *)(v108 + 88) = v107;
          *(void *)(v108 + 96) = 0x100000001;
          *(unsigned char *)(v108 + 124) = 0;
          *(unsigned char *)(v108 + 128) = 0;
          *(unsigned char *)(v108 + 132) = 0;
          *(unsigned char *)(v108 + 136) = 0;
          *(_WORD *)(v108 + 140) = 0;
          *(unsigned char *)(v108 + 144) = 0;
          *(unsigned char *)(v108 + 148) = 0;
          *(unsigned char *)(v108 + 152) = 0;
          *(unsigned char *)(v108 + 154) = 0;
          *(void *)(v108 + 104) = v63;
          *(void *)(v108 + 112) = 0;
          *(unsigned char *)(v108 + 120) = 0;
          *(void *)(v106 + 312) += 160;
          unint64_t v111 = *(unsigned int *)(v106 + 356);
          if (v111 == *(_DWORD *)(v106 + 352))
          {
            unint64_t v112 = v111 + (v111 >> 2);
            if (v112 >= 0x10) {
              unint64_t v113 = v112 + 1;
            }
            else {
              unint64_t v113 = 16;
            }
            if (v113 <= v111 + 1) {
              unint64_t v114 = v111 + 1;
            }
            else {
              unint64_t v114 = v113;
            }
            if (v114 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x182570D90);
            }
            unsigned int v115 = *(void **)(v106 + 344);
            uint64_t v116 = (void *)WTF::fastMalloc((WTF *)(8 * v114));
            *(_DWORD *)(v106 + 352) = v114;
            *(void *)(v106 + 344) = v116;
            memcpy(v116, v115, 8 * v111);
            if (v115)
            {
              if (*(void **)(v106 + 344) == v115)
              {
                *(void *)(v106 + 344) = 0;
                *(_DWORD *)(v106 + 352) = 0;
              }
              WTF::fastFree((WTF *)v115, a2);
            }
            unint64_t v111 = *(unsigned int *)(v106 + 356);
            unint64_t v117 = (void *)(*(void *)(v106 + 344) + 8 * v111);
          }
          else
          {
            unint64_t v117 = (void *)(*(void *)(v106 + 344) + 8 * v111);
          }
          *unint64_t v117 = v108;
          *(_DWORD *)(v106 + 356) = v111 + 1;
          unint64_t v118 = v573;
          *(void *)uint64_t v572 = off_1ECABC030;
          uint64_t v573 = 0;
          uint64_t v6 = (uint64_t)a2;
          if (v118)
          {
            if (*v118 != 2)
            {
              *v118 -= 2;
              goto LABEL_160;
            }
            WTF::StringImpl::destroy();
            *(_DWORD *)uint64_t v572 = *(_DWORD *)v11;
            *(void *)&v572[8] = v108;
            uint64_t v119 = HIDWORD(v569);
            if (HIDWORD(v569) != v569)
            {
LABEL_165:
              unint64_t v9 = (WTF *)v568;
              *(_OWORD *)&v568[16 * v119] = *(_OWORD *)v572;
              uint64_t v10 = (v119 + 1);
              HIDWORD(v569) = v119 + 1;
              int v122 = *(_DWORD *)v81 - 2;
              if (*(_DWORD *)v81 == 2)
              {
LABEL_166:
                WTF::StringImpl::destroy();
                uint64_t v34 = 0;
                int v123 = (int)v552;
                if (((unint64_t)v552 & 0xFF00000000) == 0) {
                  goto LABEL_8;
                }
                goto LABEL_237;
              }
              goto LABEL_162;
            }
          }
          else
          {
LABEL_160:
            *(_DWORD *)uint64_t v572 = *(_DWORD *)v11;
            *(void *)&v572[8] = v108;
            uint64_t v119 = HIDWORD(v569);
            if (HIDWORD(v569) != v569) {
              goto LABEL_165;
            }
          }
          uint64_t v120 = (_OWORD *)WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v568, v119 + 1, (unint64_t)v572);
          int v121 = HIDWORD(v569);
          unint64_t v9 = (WTF *)v568;
          *(_OWORD *)&v568[16 * HIDWORD(v569)] = *v120;
          uint64_t v10 = (v121 + 1);
          HIDWORD(v569) = v121 + 1;
          int v122 = *(_DWORD *)v81 - 2;
          if (*(_DWORD *)v81 == 2) {
            goto LABEL_166;
          }
LABEL_162:
          *(_DWORD *)uint64_t v81 = v122;
          uint64_t v34 = 0;
          int v123 = (int)v552;
          if (((unint64_t)v552 & 0xFF00000000) == 0) {
            goto LABEL_8;
          }
          goto LABEL_237;
        }
LABEL_36:
        if (v28 == (int *)(v18 + 16 * *(unsigned int *)(v18 - 4))) {
          goto LABEL_53;
        }
        uint64_t v34 = *((void *)v28 + 1);
        uint64_t v35 = (uint64_t)v560;
        if (v560
          || (WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,unsigned int,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash((uint64_t *)&v560, 8u), (uint64_t v35 = (uint64_t)v560) != 0))
        {
          int v36 = *(_DWORD *)(v35 - 8);
        }
        else
        {
          int v36 = 0;
        }
        unint64_t v37 = (~(v34 << 32) + v34) ^ ((unint64_t)(~(v34 << 32) + v34) >> 22);
        unint64_t v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
        unint64_t v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
        unsigned int v40 = v36 & ((v39 >> 31) ^ v39);
        uint64_t v41 = (void *)(v35 + 16 * v40);
        uint64_t v42 = *v41;
        if (!*v41)
        {
LABEL_48:
          *uint64_t v41 = v34;
          v41[1] = v11;
          uint64_t v45 = (uint64_t)v560;
          if (v560)
          {
            int v46 = *(v560 - 4);
            LODWORD(v35) = *(v560 - 3) + 1;
            *(v560 - 3) = v35;
            uint64_t v47 = (v46 + v35);
            unint64_t v48 = *(unsigned int *)(v45 - 4);
            if (v48 <= 0x400) {
              goto LABEL_50;
            }
LABEL_169:
            if (v48 > 2 * v47) {
              goto LABEL_172;
            }
            goto LABEL_170;
          }
          LODWORD(v35) = 1;
          MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
          uint64_t v47 = (MEMORY[0xFFFFFFFFFFFFFFF0] + 1);
          unint64_t v48 = MEMORY[0xFFFFFFFFFFFFFFFC];
          if (MEMORY[0xFFFFFFFFFFFFFFFC] > 0x400u) {
            goto LABEL_169;
          }
LABEL_50:
          if (3 * v48 > 4 * v47) {
            goto LABEL_172;
          }
          if (v48) {
LABEL_170:
          }
            unsigned int v49 = v48 << (6 * (int)v35 >= (2 * v48));
          else {
            unsigned int v49 = 8;
          }
          WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,unsigned int>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,unsigned int,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash((uint64_t *)&v560, v49);
          goto LABEL_172;
        }
        uint64_t v43 = 0;
        int v44 = 1;
        while (v42 != v34)
        {
          if (v42 == -1) {
            uint64_t v43 = v41;
          }
          unsigned int v40 = (v40 + v44) & v36;
          uint64_t v41 = (void *)(v35 + 16 * v40);
          uint64_t v42 = *v41;
          ++v44;
          if (!*v41)
          {
            if (v43)
            {
              *uint64_t v43 = 0;
              v43[1] = 0;
              --*(_DWORD *)(v35 - 16);
              uint64_t v41 = v43;
            }
            goto LABEL_48;
          }
        }
LABEL_172:
        if (!BYTE4(v10)) {
          goto LABEL_832;
        }
        uint64_t v124 = *(void *)(v6 + 40);
        uint64_t v125 = *(void *)(v124 + 312);
        uint64_t v550 = *(void *)(v34 + 136);
        if ((unint64_t)(*(void *)(v124 + 320) - v125) <= 0x47)
        {
          uint64_t v198 = WTF::fastMalloc((WTF *)0x4000);
          *(void *)uint64_t v572 = v198;
          uint64_t v200 = *(unsigned int *)(v124 + 340);
          if (v200 == *(_DWORD *)(v124 + 336))
          {
            uint64_t v201 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v124 + 328, v200 + 1, (unint64_t)v572);
            uint64_t v200 = *(unsigned int *)(v124 + 340);
            uint64_t v202 = *(void *)(v124 + 328);
            uint64_t v203 = *(void *)v201;
            *(void *)uint64_t v201 = 0;
            *(void *)(v202 + 8 * v200) = v203;
            uint64_t v204 = *(WTF **)v572;
          }
          else
          {
            uint64_t v234 = v198;
            uint64_t v204 = 0;
            uint64_t v235 = *(void *)(v124 + 328);
            *(void *)uint64_t v572 = 0;
            *(void *)(v235 + 8 * v200) = v234;
          }
          *(_DWORD *)(v124 + 340) = v200 + 1;
          WTF::fastFree(v204, v199);
          uint64_t v236 = *(unsigned int *)(v124 + 340);
          if (!v236)
          {
            __break(0xC471u);
            JUMPOUT(0x182570DE0);
          }
          uint64_t v125 = *(void *)(*(void *)(v124 + 328) + 8 * v236 - 8);
          *(void *)(v124 + 312) = v125;
          *(void *)(v124 + 320) = v125 + 0x4000;
        }
        *(_OWORD *)(v125 + 8) = *(_OWORD *)(v34 + 8);
        *(unsigned char *)(v125 + 32) = 0;
        *(void *)(v125 + 24) = 0;
        *(unsigned char *)(v125 + 56) = 0;
        *(void *)uint64_t v125 = &unk_1ECABD408;
        *(void *)(v125 + 64) = v10;
        *(void *)(v124 + 312) += 72;
        unint64_t v126 = *(unsigned int *)(v124 + 356);
        if (v126 == *(_DWORD *)(v124 + 352))
        {
          unint64_t v127 = v126 + (v126 >> 2);
          if (v127 >= 0x10) {
            unint64_t v128 = v127 + 1;
          }
          else {
            unint64_t v128 = 16;
          }
          if (v128 <= v126 + 1) {
            unint64_t v129 = v126 + 1;
          }
          else {
            unint64_t v129 = v128;
          }
          if (v129 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x182570D98);
          }
          uint64_t v130 = *(void **)(v124 + 344);
          int v131 = (void *)WTF::fastMalloc((WTF *)(8 * v129));
          *(_DWORD *)(v124 + 352) = v129;
          *(void *)(v124 + 344) = v131;
          memcpy(v131, v130, 8 * v126);
          if (v130)
          {
            if (*(void **)(v124 + 344) == v130)
            {
              *(void *)(v124 + 344) = 0;
              *(_DWORD *)(v124 + 352) = 0;
            }
            WTF::fastFree((WTF *)v130, v132);
          }
          unint64_t v126 = *(unsigned int *)(v124 + 356);
          uint64_t v133 = (void *)(*(void *)(v124 + 344) + 8 * v126);
          int v134 = *(unsigned __int8 *)(v125 + 56);
          LODWORD(v10) = v553;
        }
        else
        {
          int v134 = 0;
          uint64_t v133 = (void *)(*(void *)(v124 + 344) + 8 * v126);
        }
        *uint64_t v133 = v125;
        *(_DWORD *)(v124 + 356) = v126 + 1;
        uint64_t v135 = *(void *)(v6 + 40);
        *(void *)(v125 + 24) = *(void *)(v135 + 128);
        if (v134)
        {
          uint64_t v136 = *(unsigned int *)(v125 + 48);
          if (v136 != -1)
          {
            if (v136 == 4)
            {
              *(_DWORD *)(v125 + 32) = v10;
              goto LABEL_195;
            }
            ((void (*)(unsigned char *, uint64_t))off_1ECABCE68[v136])(v572, v125 + 32);
            uint64_t v135 = *(void *)(v6 + 40);
          }
          *(_DWORD *)(v125 + 32) = v10;
          *(_DWORD *)(v125 + 48) = 4;
        }
        else
        {
          *(_DWORD *)(v125 + 32) = v10;
          *(_DWORD *)(v125 + 48) = 4;
          *(unsigned char *)(v125 + 56) = 1;
        }
LABEL_195:
        uint64_t v137 = *(void *)(v135 + 312);
        if ((unint64_t)(*(void *)(v135 + 320) - v137) <= 0x1F)
        {
          uint64_t v205 = WTF::fastMalloc((WTF *)0x4000);
          *(void *)uint64_t v572 = v205;
          uint64_t v207 = *(unsigned int *)(v135 + 340);
          if (v207 == *(_DWORD *)(v135 + 336))
          {
            int v208 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v135 + 328, v207 + 1, (unint64_t)v572);
            uint64_t v207 = *(unsigned int *)(v135 + 340);
            uint64_t v209 = *(void *)(v135 + 328);
            uint64_t v210 = *(void *)v208;
            *(void *)int v208 = 0;
            *(void *)(v209 + 8 * v207) = v210;
            long long v211 = *(WTF **)v572;
          }
          else
          {
            uint64_t v237 = v205;
            long long v211 = 0;
            uint64_t v238 = *(void *)(v135 + 328);
            *(void *)uint64_t v572 = 0;
            *(void *)(v238 + 8 * v207) = v237;
          }
          *(_DWORD *)(v135 + 340) = v207 + 1;
          WTF::fastFree(v211, v206);
          uint64_t v239 = *(unsigned int *)(v135 + 340);
          if (!v239)
          {
            __break(0xC471u);
            JUMPOUT(0x182570DE8);
          }
          uint64_t v137 = *(void *)(*(void *)(v135 + 328) + 8 * v239 - 8);
          *(void *)(v135 + 312) = v137;
          *(void *)(v135 + 320) = v137 + 0x4000;
        }
        *(_OWORD *)(v137 + 8) = *(_OWORD *)(v34 + 8);
        *(void *)uint64_t v137 = &unk_1ECABD458;
        *(void *)(v137 + 24) = v125;
        *(void *)(v135 + 312) += 32;
        unint64_t v138 = *(unsigned int *)(v135 + 356);
        if (v138 == *(_DWORD *)(v135 + 352))
        {
          unint64_t v139 = v138 + (v138 >> 2);
          if (v139 >= 0x10) {
            unint64_t v140 = v139 + 1;
          }
          else {
            unint64_t v140 = 16;
          }
          if (v140 <= v138 + 1) {
            unint64_t v141 = v138 + 1;
          }
          else {
            unint64_t v141 = v140;
          }
          if (v141 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x182570DA0);
          }
          unint64_t v142 = *(void **)(v135 + 344);
          uint64_t v143 = (void *)WTF::fastMalloc((WTF *)(8 * v141));
          *(_DWORD *)(v135 + 352) = v141;
          *(void *)(v135 + 344) = v143;
          memcpy(v143, v142, 8 * v138);
          uint64_t v6 = (uint64_t)a2;
          if (v142)
          {
            if (*(void **)(v135 + 344) == v142)
            {
              *(void *)(v135 + 344) = 0;
              *(_DWORD *)(v135 + 352) = 0;
            }
            WTF::fastFree((WTF *)v142, v144);
          }
          unint64_t v138 = *(unsigned int *)(v135 + 356);
          uint64_t v145 = (void *)(*(void *)(v135 + 344) + 8 * v138);
        }
        else
        {
          uint64_t v145 = (void *)(*(void *)(v135 + 344) + 8 * v138);
        }
        *uint64_t v145 = v137;
        *(_DWORD *)(v135 + 356) = v138 + 1;
        uint64_t v146 = *(void *)(v6 + 40);
        unint64_t v147 = *(_DWORD **)(v34 + 48);
        if (v147) {
          *v147 += 2;
        }
        *(void *)&v572[8] = 0;
        *(void *)&v572[16] = 0;
        *(void *)uint64_t v572 = off_1ECABC030;
        uint64_t v573 = v147;
        uint64_t v148 = (void *)WTF::fastMalloc((WTF *)8);
        *uint64_t v148 = v137;
        uint64_t v149 = *(void *)(v146 + 312);
        if ((unint64_t)(*(void *)(v146 + 320) - v149) <= 0x9F)
        {
          uint64_t v212 = WTF::fastMalloc((WTF *)0x4000);
          *(void *)&long long v571 = v212;
          uint64_t v214 = *(unsigned int *)(v146 + 340);
          if (v214 == *(_DWORD *)(v146 + 336))
          {
            uint64_t v215 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v146 + 328, v214 + 1, (unint64_t)&v571);
            uint64_t v214 = *(unsigned int *)(v146 + 340);
            uint64_t v216 = *(void *)(v146 + 328);
            uint64_t v217 = *(void *)v215;
            *(void *)uint64_t v215 = 0;
            *(void *)(v216 + 8 * v214) = v217;
            uint64_t v218 = (WTF *)v571;
          }
          else
          {
            uint64_t v240 = v212;
            uint64_t v218 = 0;
            uint64_t v241 = *(void *)(v146 + 328);
            *(void *)&long long v571 = 0;
            *(void *)(v241 + 8 * v214) = v240;
          }
          *(_DWORD *)(v146 + 340) = v214 + 1;
          WTF::fastFree(v218, v213);
          uint64_t v242 = *(unsigned int *)(v146 + 340);
          if (!v242)
          {
            __break(0xC471u);
            JUMPOUT(0x182570DF0);
          }
          uint64_t v149 = *(void *)(*(void *)(v146 + 328) + 8 * v242 - 8);
          *(void *)(v146 + 312) = v149;
          *(void *)(v146 + 320) = v149 + 0x4000;
        }
        *(_OWORD *)(v149 + 8) = *(_OWORD *)(v34 + 8);
        *(void *)uint64_t v149 = &unk_1ECABC888;
        long long v150 = *(_OWORD *)&v572[8];
        *(_OWORD *)(v149 + 32) = *(_OWORD *)&v572[8];
        *(void *)(v149 + 24) = off_1ECABC030;
        unint64_t v151 = v573;
        uint64_t v573 = 0;
        *(_OWORD *)(v149 + 64) = v150;
        *(void *)(v149 + 48) = v151;
        *(void *)(v149 + 56) = off_1ECABC030;
        if (v151) {
          *v151 += 2;
        }
        *(void *)(v149 + 80) = v151;
        *(void *)(v149 + 88) = v148;
        *(void *)(v149 + 96) = 0x100000001;
        *(unsigned char *)(v149 + 124) = 0;
        *(unsigned char *)(v149 + 128) = 0;
        *(unsigned char *)(v149 + 132) = 0;
        *(unsigned char *)(v149 + 136) = 0;
        *(_WORD *)(v149 + 140) = 0;
        *(unsigned char *)(v149 + 144) = 0;
        *(unsigned char *)(v149 + 148) = 0;
        *(unsigned char *)(v149 + 152) = 0;
        *(unsigned char *)(v149 + 154) = 0;
        *(void *)(v149 + 104) = v550;
        *(void *)(v149 + 112) = 0;
        *(unsigned char *)(v149 + 120) = 0;
        *(void *)(v146 + 312) += 160;
        unint64_t v152 = *(unsigned int *)(v146 + 356);
        if (v152 == *(_DWORD *)(v146 + 352))
        {
          unint64_t v153 = v152 + (v152 >> 2);
          if (v153 >= 0x10) {
            unint64_t v154 = v153 + 1;
          }
          else {
            unint64_t v154 = 16;
          }
          if (v154 <= v152 + 1) {
            unint64_t v155 = v152 + 1;
          }
          else {
            unint64_t v155 = v154;
          }
          if (v155 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x182570DA8);
          }
          int v156 = *(void **)(v146 + 344);
          unint64_t v157 = (void *)WTF::fastMalloc((WTF *)(8 * v155));
          *(_DWORD *)(v146 + 352) = v155;
          *(void *)(v146 + 344) = v157;
          memcpy(v157, v156, 8 * v152);
          if (v156)
          {
            if (*(void **)(v146 + 344) == v156)
            {
              *(void *)(v146 + 344) = 0;
              *(_DWORD *)(v146 + 352) = 0;
            }
            WTF::fastFree((WTF *)v156, a2);
          }
          unint64_t v152 = *(unsigned int *)(v146 + 356);
          uint64_t v158 = (void *)(*(void *)(v146 + 344) + 8 * v152);
        }
        else
        {
          uint64_t v158 = (void *)(*(void *)(v146 + 344) + 8 * v152);
        }
        void *v158 = v149;
        *(_DWORD *)(v146 + 356) = v152 + 1;
        uint64_t v159 = v573;
        *(void *)uint64_t v572 = off_1ECABC030;
        uint64_t v573 = 0;
        uint64_t v6 = (uint64_t)a2;
        int v123 = (int)v552;
        if (v159)
        {
          if (*v159 == 2)
          {
            WTF::StringImpl::destroy();
            *(_DWORD *)uint64_t v572 = *(_DWORD *)v11;
            *(void *)&v572[8] = v149;
            uint64_t v160 = HIDWORD(v569);
            if (HIDWORD(v569) == v569)
            {
LABEL_233:
              unint64_t v161 = (_OWORD *)WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v568, v160 + 1, (unint64_t)v572);
              int v162 = HIDWORD(v569);
              unint64_t v9 = (WTF *)v568;
              *(_OWORD *)&v568[16 * HIDWORD(v569)] = *v161;
              uint64_t v10 = (v162 + 1);
              HIDWORD(v569) = v162 + 1;
              if (((unint64_t)v552 & 0xFF00000000) == 0) {
                goto LABEL_8;
              }
              goto LABEL_237;
            }
            goto LABEL_236;
          }
          *v159 -= 2;
        }
        *(_DWORD *)uint64_t v572 = *(_DWORD *)v11;
        *(void *)&v572[8] = v149;
        uint64_t v160 = HIDWORD(v569);
        if (HIDWORD(v569) == v569) {
          goto LABEL_233;
        }
LABEL_236:
        unint64_t v9 = (WTF *)v568;
        *(_OWORD *)&v568[16 * v160] = *(_OWORD *)v572;
        uint64_t v10 = (v160 + 1);
        HIDWORD(v569) = v160 + 1;
        if (((unint64_t)v552 & 0xFF00000000) == 0) {
          goto LABEL_8;
        }
LABEL_237:
        *(_DWORD *)uint64_t v572 = v123;
        *(void *)&v572[8] = v34;
        int v13 = HIDWORD(v567);
        if (HIDWORD(v567) == v567)
        {
          int v12 = (_OWORD *)WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v566, HIDWORD(v567) + 1, (unint64_t)v572);
          int v13 = HIDWORD(v567);
          *((_OWORD *)v566 + HIDWORD(v567)) = *v12;
        }
        else
        {
          *((_OWORD *)v566 + HIDWORD(v567)) = *(_OWORD *)v572;
        }
        HIDWORD(v567) = v13 + 1;
LABEL_8:
        v11 += 120;
      }
      while (v11 != v551);
      if (HIDWORD(v567))
      {
        uint64_t v243 = (unsigned int *)v566;
        unint64_t v552 = (unsigned int *)((char *)v566 + 16 * HIDWORD(v567));
        do
        {
          uint64_t v246 = *v243;
          uint64_t v247 = *((void *)v243 + 1);
          if (v247)
          {
            uint64_t v248 = *(void *)(v6 + 208);
            if (!v248) {
              goto LABEL_844;
            }
            unsigned int v249 = *(_DWORD *)(v248 - 8);
            unint64_t v250 = (~(v247 << 32) + v247) ^ ((unint64_t)(~(v247 << 32) + v247) >> 22);
            unint64_t v251 = 9 * ((v250 + ~(v250 << 13)) ^ ((v250 + ~(v250 << 13)) >> 8));
            unint64_t v252 = (v251 ^ (v251 >> 15)) + ~((v251 ^ (v251 >> 15)) << 27);
            uint64_t v253 = v249 & ((v252 >> 31) ^ v252);
            uint64_t v254 = *(void *)(v248 + 16 * v253);
            if (v254 != v247)
            {
              int v255 = 1;
              while (v254)
              {
                uint64_t v253 = (v253 + v255) & v249;
                uint64_t v254 = *(void *)(v248 + 16 * v253);
                ++v255;
                if (v254 == v247) {
                  goto LABEL_297;
                }
              }
              uint64_t v253 = *(unsigned int *)(v248 - 4);
            }
LABEL_297:
            if (v253 == *(_DWORD *)(v248 - 4))
            {
LABEL_844:
              __break(0xC471u);
              JUMPOUT(0x182570D34);
            }
            uint64_t v259 = (uint64_t)v560;
            if (!v560)
            {
              uint64_t v260 = (_OWORD *)WTF::fastZeroedMalloc((WTF *)0x90);
              *uint64_t v260 = xmmword_1826CEB00;
              uint64_t v259 = (uint64_t)(v260 + 1);
              uint64_t v560 = v260 + 1;
            }
            uint64_t v261 = v248 + 16 * v253 + 8;
            int v262 = *(_DWORD *)(v259 - 8);
            uint64_t v263 = *(void *)v261;
            unint64_t v264 = ~(*(void *)v261 << 32) + *(void *)v261;
            unint64_t v265 = (v264 ^ (v264 >> 22)) + ~((v264 ^ (v264 >> 22)) << 13);
            unint64_t v266 = (9 * (v265 ^ (v265 >> 8))) ^ ((9 * (v265 ^ (v265 >> 8))) >> 15);
            unsigned int v267 = v262 & (((v266 + ~(v266 << 27)) >> 31) ^ (v266 + ~(v266 << 27)));
            v268 = (void *)(v259 + 16 * v267);
            uint64_t v269 = *v268;
            if (*v268)
            {
              uint64_t v270 = 0;
              int v271 = 1;
              while (v269 != v263)
              {
                if (v269 == -1) {
                  uint64_t v270 = v268;
                }
                unsigned int v267 = (v267 + v271) & v262;
                v268 = (void *)(v259 + 16 * v267);
                uint64_t v269 = *v268;
                ++v271;
                if (!*v268)
                {
                  if (v270)
                  {
                    *uint64_t v270 = 0;
                    v270[1] = 0;
                    --*(_DWORD *)(v259 - 16);
                    uint64_t v263 = *(void *)v261;
                    v268 = v270;
                  }
                  goto LABEL_308;
                }
              }
LABEL_322:
              uint64_t v554 = v246;
              uint64_t v290 = v6;
              uint64_t v291 = *(void *)v261;
              uint64_t v292 = *(void *)(*(void *)v261 + 136);
              uint64_t v293 = *(void *)(v290 + 40);
              uint64_t v294 = *(void *)(v293 + 312);
              if ((unint64_t)(*(void *)(v293 + 320) - v294) <= 0x47)
              {
                uint64_t v374 = WTF::fastMalloc((WTF *)0x4000);
                *(void *)uint64_t v572 = v374;
                uint64_t v376 = *(unsigned int *)(v293 + 340);
                if (v376 == *(_DWORD *)(v293 + 336))
                {
                  uint64_t v377 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v293 + 328, v376 + 1, (unint64_t)v572);
                  uint64_t v376 = *(unsigned int *)(v293 + 340);
                  uint64_t v378 = *(void *)(v293 + 328);
                  uint64_t v379 = *(void *)v377;
                  *(void *)uint64_t v377 = 0;
                  *(void *)(v378 + 8 * v376) = v379;
                  unint64_t v380 = *(WTF **)v572;
                }
                else
                {
                  uint64_t v416 = v374;
                  unint64_t v380 = 0;
                  uint64_t v417 = *(void *)(v293 + 328);
                  *(void *)uint64_t v572 = 0;
                  *(void *)(v417 + 8 * v376) = v416;
                }
                *(_DWORD *)(v293 + 340) = v376 + 1;
                WTF::fastFree(v380, v375);
                uint64_t v418 = *(unsigned int *)(v293 + 340);
                if (!v418)
                {
                  __break(0xC471u);
                  JUMPOUT(0x182570E08);
                }
                uint64_t v294 = *(void *)(*(void *)(v293 + 328) + 8 * v418 - 8);
                *(void *)(v293 + 312) = v294;
                *(void *)(v293 + 320) = v294 + 0x4000;
              }
              *(_OWORD *)(v294 + 8) = *(_OWORD *)(v291 + 8);
              *(unsigned char *)(v294 + 32) = 0;
              *(void *)(v294 + 24) = 0;
              *(unsigned char *)(v294 + 56) = 0;
              *(void *)uint64_t v294 = &unk_1ECABD408;
              *(void *)(v294 + 64) = v554;
              *(void *)(v293 + 312) += 72;
              unint64_t v295 = *(unsigned int *)(v293 + 356);
              if (v295 == *(_DWORD *)(v293 + 352))
              {
                unint64_t v296 = v295 + (v295 >> 2);
                if (v296 >= 0x10) {
                  unint64_t v297 = v296 + 1;
                }
                else {
                  unint64_t v297 = 16;
                }
                if (v297 <= v295 + 1) {
                  unint64_t v298 = v295 + 1;
                }
                else {
                  unint64_t v298 = v297;
                }
                if (v298 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x182570D58);
                }
                uint64_t v299 = *(void **)(v293 + 344);
                uint64_t v300 = (void *)WTF::fastMalloc((WTF *)(8 * v298));
                *(_DWORD *)(v293 + 352) = v298;
                *(void *)(v293 + 344) = v300;
                memcpy(v300, v299, 8 * v295);
                if (v299)
                {
                  if (*(void **)(v293 + 344) == v299)
                  {
                    *(void *)(v293 + 344) = 0;
                    *(_DWORD *)(v293 + 352) = 0;
                  }
                  WTF::fastFree((WTF *)v299, v301);
                }
                unint64_t v295 = *(unsigned int *)(v293 + 356);
                unint64_t v302 = (void *)(*(void *)(v293 + 344) + 8 * v295);
                int v303 = *(unsigned __int8 *)(v294 + 56);
              }
              else
              {
                int v303 = 0;
                unint64_t v302 = (void *)(*(void *)(v293 + 344) + 8 * v295);
              }
              void *v302 = v294;
              *(_DWORD *)(v293 + 356) = v295 + 1;
              uint64_t v304 = a2[5];
              *(void *)(v294 + 24) = *(void *)(v304 + 128);
              if (v303)
              {
                uint64_t v305 = *(unsigned int *)(v294 + 48);
                if (v305 != -1)
                {
                  if (v305 == 4)
                  {
                    *(_DWORD *)(v294 + 32) = v554;
                    goto LABEL_350;
                  }
                  ((void (*)(unsigned char *, uint64_t))off_1ECABCE68[v305])(v572, v294 + 32);
                  uint64_t v304 = a2[5];
                }
                *(_DWORD *)(v294 + 32) = v554;
                *(_DWORD *)(v294 + 48) = 4;
              }
              else
              {
                *(_DWORD *)(v294 + 32) = v554;
                *(_DWORD *)(v294 + 48) = 4;
                *(unsigned char *)(v294 + 56) = 1;
              }
LABEL_350:
              uint64_t v310 = *(void *)(v304 + 312);
              if ((unint64_t)(*(void *)(v304 + 320) - v310) <= 0x1F)
              {
                uint64_t v381 = WTF::fastMalloc((WTF *)0x4000);
                *(void *)uint64_t v572 = v381;
                uint64_t v383 = *(unsigned int *)(v304 + 340);
                if (v383 == *(_DWORD *)(v304 + 336))
                {
                  unint64_t v384 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v304 + 328, v383 + 1, (unint64_t)v572);
                  uint64_t v383 = *(unsigned int *)(v304 + 340);
                  uint64_t v385 = *(void *)(v304 + 328);
                  uint64_t v386 = *(void *)v384;
                  *(void *)unint64_t v384 = 0;
                  *(void *)(v385 + 8 * v383) = v386;
                  uint64_t v387 = *(WTF **)v572;
                }
                else
                {
                  uint64_t v419 = v381;
                  uint64_t v387 = 0;
                  uint64_t v420 = *(void *)(v304 + 328);
                  *(void *)uint64_t v572 = 0;
                  *(void *)(v420 + 8 * v383) = v419;
                }
                *(_DWORD *)(v304 + 340) = v383 + 1;
                WTF::fastFree(v387, v382);
                uint64_t v421 = *(unsigned int *)(v304 + 340);
                if (!v421)
                {
                  __break(0xC471u);
                  JUMPOUT(0x182570E10);
                }
                uint64_t v310 = *(void *)(*(void *)(v304 + 328) + 8 * v421 - 8);
                *(void *)(v304 + 312) = v310;
                *(void *)(v304 + 320) = v310 + 0x4000;
              }
              *(_OWORD *)(v310 + 8) = *(_OWORD *)(v291 + 8);
              *(void *)uint64_t v310 = &unk_1ECABD458;
              *(void *)(v310 + 24) = v294;
              *(void *)(v304 + 312) += 32;
              unint64_t v311 = *(unsigned int *)(v304 + 356);
              if (v311 == *(_DWORD *)(v304 + 352))
              {
                unint64_t v312 = v311 + (v311 >> 2);
                if (v312 >= 0x10) {
                  unint64_t v313 = v312 + 1;
                }
                else {
                  unint64_t v313 = 16;
                }
                if (v313 <= v311 + 1) {
                  unint64_t v314 = v311 + 1;
                }
                else {
                  unint64_t v314 = v313;
                }
                if (v314 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x182570D60);
                }
                unsigned int v315 = *(void **)(v304 + 344);
                uint64_t v316 = (void *)WTF::fastMalloc((WTF *)(8 * v314));
                *(_DWORD *)(v304 + 352) = v314;
                *(void *)(v304 + 344) = v316;
                memcpy(v316, v315, 8 * v311);
                if (v315)
                {
                  if (*(void **)(v304 + 344) == v315)
                  {
                    *(void *)(v304 + 344) = 0;
                    *(_DWORD *)(v304 + 352) = 0;
                  }
                  WTF::fastFree((WTF *)v315, v317);
                }
                unint64_t v311 = *(unsigned int *)(v304 + 356);
                int v318 = (void *)(*(void *)(v304 + 344) + 8 * v311);
              }
              else
              {
                int v318 = (void *)(*(void *)(v304 + 344) + 8 * v311);
              }
              void *v318 = v310;
              *(_DWORD *)(v304 + 356) = v311 + 1;
              uint64_t v319 = a2[5];
              uint64_t v320 = *(_DWORD **)(v291 + 48);
              if (v320) {
                *v320 += 2;
              }
              *(void *)&v572[8] = 0;
              *(void *)&v572[16] = 0;
              *(void *)uint64_t v572 = off_1ECABC030;
              uint64_t v573 = v320;
              unint64_t v321 = (void *)WTF::fastMalloc((WTF *)8);
              *unint64_t v321 = v310;
              uint64_t v322 = *(void *)(v319 + 312);
              if ((unint64_t)(*(void *)(v319 + 320) - v322) <= 0x9F)
              {
                uint64_t v388 = WTF::fastMalloc((WTF *)0x4000);
                *(void *)&long long v571 = v388;
                uint64_t v390 = *(unsigned int *)(v319 + 340);
                if (v390 == *(_DWORD *)(v319 + 336))
                {
                  long long v391 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v319 + 328, v390 + 1, (unint64_t)&v571);
                  uint64_t v390 = *(unsigned int *)(v319 + 340);
                  uint64_t v392 = *(void *)(v319 + 328);
                  uint64_t v393 = *(void *)v391;
                  *(void *)long long v391 = 0;
                  *(void *)(v392 + 8 * v390) = v393;
                  uint64_t v394 = (WTF *)v571;
                }
                else
                {
                  uint64_t v422 = v388;
                  uint64_t v394 = 0;
                  uint64_t v423 = *(void *)(v319 + 328);
                  *(void *)&long long v571 = 0;
                  *(void *)(v423 + 8 * v390) = v422;
                }
                *(_DWORD *)(v319 + 340) = v390 + 1;
                WTF::fastFree(v394, v389);
                uint64_t v424 = *(unsigned int *)(v319 + 340);
                if (!v424)
                {
                  __break(0xC471u);
                  JUMPOUT(0x182570E18);
                }
                uint64_t v322 = *(void *)(*(void *)(v319 + 328) + 8 * v424 - 8);
                *(void *)(v319 + 312) = v322;
                *(void *)(v319 + 320) = v322 + 0x4000;
              }
              *(_OWORD *)(v322 + 8) = *(_OWORD *)(v291 + 8);
              *(void *)uint64_t v322 = &unk_1ECABC888;
              long long v323 = *(_OWORD *)&v572[8];
              *(_OWORD *)(v322 + 32) = *(_OWORD *)&v572[8];
              *(void *)(v322 + 24) = off_1ECABC030;
              unint64_t v324 = v573;
              uint64_t v573 = 0;
              *(_OWORD *)(v322 + 64) = v323;
              *(void *)(v322 + 48) = v324;
              *(void *)(v322 + 56) = off_1ECABC030;
              if (v324) {
                *v324 += 2;
              }
              *(void *)(v322 + 80) = v324;
              *(void *)(v322 + 88) = v321;
              *(void *)(v322 + 96) = 0x100000001;
              *(unsigned char *)(v322 + 124) = 0;
              *(unsigned char *)(v322 + 128) = 0;
              *(unsigned char *)(v322 + 132) = 0;
              *(unsigned char *)(v322 + 136) = 0;
              *(_WORD *)(v322 + 140) = 0;
              *(unsigned char *)(v322 + 144) = 0;
              *(unsigned char *)(v322 + 148) = 0;
              *(unsigned char *)(v322 + 152) = 0;
              *(unsigned char *)(v322 + 154) = 0;
              *(void *)(v322 + 104) = v292;
              *(void *)(v322 + 112) = 0;
              *(unsigned char *)(v322 + 120) = 0;
              *(void *)(v319 + 312) += 160;
              unint64_t v325 = *(unsigned int *)(v319 + 356);
              if (v325 == *(_DWORD *)(v319 + 352))
              {
                unint64_t v326 = v325 + (v325 >> 2);
                if (v326 >= 0x10) {
                  unint64_t v327 = v326 + 1;
                }
                else {
                  unint64_t v327 = 16;
                }
                if (v327 <= v325 + 1) {
                  unint64_t v328 = v325 + 1;
                }
                else {
                  unint64_t v328 = v327;
                }
                if (v328 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x182570D68);
                }
                int v329 = *(void **)(v319 + 344);
                int v330 = (void *)WTF::fastMalloc((WTF *)(8 * v328));
                *(_DWORD *)(v319 + 352) = v328;
                *(void *)(v319 + 344) = v330;
                memcpy(v330, v329, 8 * v325);
                uint64_t v6 = (uint64_t)a2;
                int v331 = v554;
                if (v329)
                {
                  if (*(void **)(v319 + 344) == v329)
                  {
                    *(void *)(v319 + 344) = 0;
                    *(_DWORD *)(v319 + 352) = 0;
                  }
                  WTF::fastFree((WTF *)v329, a2);
                }
                unint64_t v325 = *(unsigned int *)(v319 + 356);
                int v332 = (void *)(*(void *)(v319 + 344) + 8 * v325);
              }
              else
              {
                int v332 = (void *)(*(void *)(v319 + 344) + 8 * v325);
                uint64_t v6 = (uint64_t)a2;
                int v331 = v554;
              }
              *int v332 = v322;
              *(_DWORD *)(v319 + 356) = v325 + 1;
              uint64_t v333 = v573;
              *(void *)uint64_t v572 = off_1ECABC030;
              uint64_t v573 = 0;
              if (v333)
              {
                if (*v333 != 2)
                {
                  *v333 -= 2;
                  goto LABEL_387;
                }
                WTF::StringImpl::destroy();
                *(_DWORD *)uint64_t v572 = v331;
                *(void *)&v572[8] = v322;
                uint64_t v245 = HIDWORD(v569);
                if (HIDWORD(v569) != v569)
                {
LABEL_390:
                  unint64_t v9 = (WTF *)v568;
                  *(_OWORD *)&v568[16 * v245] = *(_OWORD *)v572;
                  goto LABEL_283;
                }
              }
              else
              {
LABEL_387:
                *(_DWORD *)uint64_t v572 = v331;
                *(void *)&v572[8] = v322;
                uint64_t v245 = HIDWORD(v569);
                if (HIDWORD(v569) != v569) {
                  goto LABEL_390;
                }
              }
              uint64_t v244 = (_OWORD *)WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v568, v245 + 1, (unint64_t)v572);
              LODWORD(v245) = HIDWORD(v569);
              unint64_t v9 = (WTF *)v568;
              *(_OWORD *)&v568[16 * HIDWORD(v569)] = *v244;
LABEL_283:
              LODWORD(v10) = v245 + 1;
              HIDWORD(v569) = v245 + 1;
              goto LABEL_284;
            }
LABEL_308:
            void *v268 = v263;
            v268[1] = 0;
            int v272 = *(_DWORD *)(v259 - 16);
            int v273 = *(_DWORD *)(v259 - 12) + 1;
            *(_DWORD *)(v259 - 12) = v273;
            uint64_t v274 = (v272 + v273);
            unint64_t v275 = *(unsigned int *)(v259 - 4);
            if (v275 > 0x400)
            {
              if (v275 > 2 * v274) {
                goto LABEL_322;
              }
            }
            else
            {
              if (3 * v275 > 4 * v274) {
                goto LABEL_322;
              }
              if (!v275)
              {
                unsigned int v276 = 8;
LABEL_314:
                int v277 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * v276 + 16));
                unint64_t v279 = v277 + 4;
                uint64_t v560 = v277 + 4;
                unsigned int v280 = v276 - 1;
                v277[2] = v276 - 1;
                v277[3] = v276;
                *int v277 = 0;
                v277[1] = v273;
                uint64_t v6 = (uint64_t)a2;
                if (v275)
                {
                  for (uint64_t i = 0; i != v275; ++i)
                  {
                    unint64_t v282 = (void *)(v259 + 16 * i);
                    if ((unint64_t)(*v282 + 1) >= 2)
                    {
                      uint64_t v283 = (~(*v282 << 32) + *v282) ^ ((~(*v282 << 32) + *v282) >> 22);
                      unint64_t v284 = 9 * ((v283 + ~(v283 << 13)) ^ ((unint64_t)(v283 + ~(v283 << 13)) >> 8));
                      unint64_t v285 = (v284 ^ (v284 >> 15)) + ~((v284 ^ (v284 >> 15)) << 27);
                      unsigned int v286 = v280 & ((v285 >> 31) ^ v285);
                      int v287 = 1;
                      do
                      {
                        unsigned int v288 = v286;
                        uint64_t v289 = *(void *)&v279[4 * v286];
                        unsigned int v286 = (v286 + v287++) & v280;
                      }
                      while (v289);
                      *(_OWORD *)&v279[4 * v288] = *(_OWORD *)v282;
                    }
                  }
                }
                WTF::fastFree((WTF *)(v259 - 16), v278);
                goto LABEL_322;
              }
            }
            unsigned int v276 = v275 << (6 * v273 >= (2 * v275));
            goto LABEL_314;
          }
          WTF::String::number((WTF::String *)*v243);
          if (v559)
          {
            int v256 = *(_DWORD *)(v559 + 4);
            if (v256 < 0 || (unint64_t v257 = (v256 + 28), __OFADD__(v256, 28)))
            {
              v565[0] = 0;
LABEL_848:
              __break(0xC471u);
              JUMPOUT(0x182570D50);
            }
            int v258 = (*(unsigned __int8 *)(v559 + 16) >> 2) & 1;
          }
          else
          {
            int v258 = 1;
            unint64_t v257 = 28;
          }
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v257, v258, (int8x16_t *)"__ArgumentBufferPlaceholder_", 0x1Cu, v559, v565);
          if (!v565[0]) {
            goto LABEL_848;
          }
          v306 = *(void **)(v6 + 216);
          uint64_t v307 = v6;
          uint64_t v308 = *(void *)(v6 + 40);
          if (!v306)
          {
            long long v571 = 0uLL;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            *(void *)&v572[8] = 0;
            *(void *)&v572[16] = 0;
            *(void *)uint64_t v572 = off_1ECABC030;
            v306 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>((void *)(v308 + 312), &v571, (uint64_t)v572);
            *(void *)(v307 + 216) = v306;
            v309 = v573;
            *(void *)uint64_t v572 = off_1ECABC030;
            uint64_t v573 = 0;
            if (v309)
            {
              if (*v309 == 2)
              {
                WTF::StringImpl::destroy();
                v306 = *(void **)(v307 + 216);
              }
              else
              {
                *v309 -= 2;
              }
            }
            uint64_t v308 = *(void *)(v307 + 40);
            v306[3] = *(void *)(v308 + 168);
          }
          uint64_t v334 = *(void *)(v308 + 312);
          if ((unint64_t)(*(void *)(v308 + 320) - v334) <= 0x47)
          {
            uint64_t v395 = WTF::fastMalloc((WTF *)0x4000);
            *(void *)uint64_t v572 = v395;
            uint64_t v397 = *(unsigned int *)(v308 + 340);
            if (v397 == *(_DWORD *)(v308 + 336))
            {
              v398 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v308 + 328, v397 + 1, (unint64_t)v572);
              uint64_t v397 = *(unsigned int *)(v308 + 340);
              uint64_t v399 = *(void *)(v308 + 328);
              uint64_t v400 = *(void *)v398;
              *(void *)v398 = 0;
              *(void *)(v399 + 8 * v397) = v400;
              unint64_t v401 = *(WTF **)v572;
            }
            else
            {
              uint64_t v425 = v395;
              unint64_t v401 = 0;
              uint64_t v426 = *(void *)(v308 + 328);
              *(void *)uint64_t v572 = 0;
              *(void *)(v426 + 8 * v397) = v425;
            }
            *(_DWORD *)(v308 + 340) = v397 + 1;
            WTF::fastFree(v401, v396);
            uint64_t v427 = *(unsigned int *)(v308 + 340);
            if (!v427)
            {
              __break(0xC471u);
              JUMPOUT(0x182570E20);
            }
            uint64_t v334 = *(void *)(*(void *)(v308 + 328) + 8 * v427 - 8);
            *(void *)(v308 + 312) = v334;
            *(void *)(v308 + 320) = v334 + 0x4000;
          }
          *(unsigned char *)(v334 + 32) = 0;
          *(unsigned char *)(v334 + 56) = 0;
          *(void *)(v334 + 16) = 0;
          *(void *)(v334 + 24) = 0;
          *(void *)uint64_t v334 = &unk_1ECABD408;
          *(void *)(v334 + 8) = 0;
          *(void *)(v334 + 64) = v246;
          *(void *)(v308 + 312) += 72;
          unint64_t v335 = *(unsigned int *)(v308 + 356);
          if (v335 == *(_DWORD *)(v308 + 352))
          {
            unint64_t v336 = v335 + (v335 >> 2);
            if (v336 >= 0x10) {
              unint64_t v337 = v336 + 1;
            }
            else {
              unint64_t v337 = 16;
            }
            if (v337 <= v335 + 1) {
              unint64_t v338 = v335 + 1;
            }
            else {
              unint64_t v338 = v337;
            }
            if (v338 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x182570DB0);
            }
            uint64_t v339 = *(void **)(v308 + 344);
            uint64_t v340 = (void *)WTF::fastMalloc((WTF *)(8 * v338));
            *(_DWORD *)(v308 + 352) = v338;
            *(void *)(v308 + 344) = v340;
            memcpy(v340, v339, 8 * v335);
            if (v339)
            {
              if (*(void **)(v308 + 344) == v339)
              {
                *(void *)(v308 + 344) = 0;
                *(_DWORD *)(v308 + 352) = 0;
              }
              WTF::fastFree((WTF *)v339, v341);
            }
            unint64_t v335 = *(unsigned int *)(v308 + 356);
            unint64_t v342 = (void *)(*(void *)(v308 + 344) + 8 * v335);
            int v343 = *(unsigned __int8 *)(v334 + 56);
          }
          else
          {
            int v343 = 0;
            unint64_t v342 = (void *)(*(void *)(v308 + 344) + 8 * v335);
          }
          *unint64_t v342 = v334;
          *(_DWORD *)(v308 + 356) = v335 + 1;
          uint64_t v344 = a2[5];
          *(void *)(v334 + 24) = *(void *)(v344 + 128);
          if (v343)
          {
            uint64_t v345 = *(unsigned int *)(v334 + 48);
            if (v345 != -1)
            {
              if (v345 == 4)
              {
                *(_DWORD *)(v334 + 32) = v246;
                goto LABEL_415;
              }
              ((void (*)(unsigned char *, uint64_t))off_1ECABCE68[v345])(v572, v334 + 32);
              uint64_t v344 = a2[5];
            }
            *(_DWORD *)(v334 + 32) = v246;
            *(_DWORD *)(v334 + 48) = 4;
          }
          else
          {
            *(_DWORD *)(v334 + 32) = v246;
            *(_DWORD *)(v334 + 48) = 4;
            *(unsigned char *)(v334 + 56) = 1;
          }
LABEL_415:
          int v346 = *(void **)(v344 + 312);
          if (*(void *)(v344 + 320) - (void)v346 <= 0x1FuLL)
          {
            uint64_t v402 = WTF::fastMalloc((WTF *)0x4000);
            *(void *)uint64_t v572 = v402;
            uint64_t v404 = *(unsigned int *)(v344 + 340);
            if (v404 == *(_DWORD *)(v344 + 336))
            {
              uint64_t v405 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v344 + 328, v404 + 1, (unint64_t)v572);
              uint64_t v404 = *(unsigned int *)(v344 + 340);
              uint64_t v406 = *(void *)(v344 + 328);
              uint64_t v407 = *(void *)v405;
              *(void *)uint64_t v405 = 0;
              *(void *)(v406 + 8 * v404) = v407;
              uint64_t v408 = *(WTF **)v572;
            }
            else
            {
              uint64_t v428 = v402;
              uint64_t v408 = 0;
              uint64_t v429 = *(void *)(v344 + 328);
              *(void *)uint64_t v572 = 0;
              *(void *)(v429 + 8 * v404) = v428;
            }
            *(_DWORD *)(v344 + 340) = v404 + 1;
            WTF::fastFree(v408, v403);
            uint64_t v430 = *(unsigned int *)(v344 + 340);
            if (!v430)
            {
              __break(0xC471u);
              JUMPOUT(0x182570E28);
            }
            int v346 = *(void **)(*(void *)(v344 + 328) + 8 * v430 - 8);
            *(void *)(v344 + 312) = v346;
            *(void *)(v344 + 320) = v346 + 2048;
          }
          void *v346 = &unk_1ECABD458;
          v346[1] = 0;
          v346[2] = 0;
          v346[3] = v334;
          *(void *)(v344 + 312) += 32;
          unint64_t v347 = *(unsigned int *)(v344 + 356);
          if (v347 == *(_DWORD *)(v344 + 352))
          {
            unint64_t v348 = v347 + (v347 >> 2);
            if (v348 >= 0x10) {
              unint64_t v349 = v348 + 1;
            }
            else {
              unint64_t v349 = 16;
            }
            if (v349 <= v347 + 1) {
              unint64_t v350 = v347 + 1;
            }
            else {
              unint64_t v350 = v349;
            }
            if (v350 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x182570DB8);
            }
            v351 = *(void **)(v344 + 344);
            int v352 = (void *)WTF::fastMalloc((WTF *)(8 * v350));
            *(_DWORD *)(v344 + 352) = v350;
            *(void *)(v344 + 344) = v352;
            memcpy(v352, v351, 8 * v347);
            if (v351)
            {
              if (*(void **)(v344 + 344) == v351)
              {
                *(void *)(v344 + 344) = 0;
                *(_DWORD *)(v344 + 352) = 0;
              }
              WTF::fastFree((WTF *)v351, v353);
            }
            unint64_t v347 = *(unsigned int *)(v344 + 356);
            uint64_t v354 = (void *)(*(void *)(v344 + 344) + 8 * v347);
          }
          else
          {
            uint64_t v354 = (void *)(*(void *)(v344 + 344) + 8 * v347);
          }
          *uint64_t v354 = v346;
          *(_DWORD *)(v344 + 356) = v347 + 1;
          uint64_t v355 = a2[5];
          unsigned int v356 = (_DWORD *)v565[0];
          if (v565[0]) {
            *(_DWORD *)v565[0] += 2;
          }
          *(void *)&v572[8] = 0;
          *(void *)&v572[16] = 0;
          *(void *)uint64_t v572 = off_1ECABC030;
          uint64_t v573 = v356;
          unint64_t v357 = (void *)WTF::fastMalloc((WTF *)8);
          *unint64_t v357 = v346;
          uint64_t v358 = *(void *)(v355 + 312);
          if ((unint64_t)(*(void *)(v355 + 320) - v358) <= 0x9F)
          {
            uint64_t v409 = WTF::fastMalloc((WTF *)0x4000);
            *(void *)&long long v571 = v409;
            uint64_t v411 = *(unsigned int *)(v355 + 340);
            if (v411 == *(_DWORD *)(v355 + 336))
            {
              uint64_t v412 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v355 + 328, v411 + 1, (unint64_t)&v571);
              uint64_t v411 = *(unsigned int *)(v355 + 340);
              uint64_t v413 = *(void *)(v355 + 328);
              uint64_t v414 = *(void *)v412;
              *(void *)uint64_t v412 = 0;
              *(void *)(v413 + 8 * v411) = v414;
              uint64_t v415 = (WTF *)v571;
            }
            else
            {
              uint64_t v431 = v409;
              uint64_t v415 = 0;
              uint64_t v432 = *(void *)(v355 + 328);
              *(void *)&long long v571 = 0;
              *(void *)(v432 + 8 * v411) = v431;
            }
            *(_DWORD *)(v355 + 340) = v411 + 1;
            WTF::fastFree(v415, v410);
            uint64_t v433 = *(unsigned int *)(v355 + 340);
            if (!v433)
            {
              __break(0xC471u);
              JUMPOUT(0x182570E30);
            }
            uint64_t v358 = *(void *)(*(void *)(v355 + 328) + 8 * v433 - 8);
            *(void *)(v355 + 312) = v358;
            *(void *)(v355 + 320) = v358 + 0x4000;
          }
          *(void *)(v358 + 8) = 0;
          *(void *)(v358 + 16) = 0;
          *(void *)uint64_t v358 = &unk_1ECABC888;
          long long v359 = *(_OWORD *)&v572[8];
          *(_OWORD *)(v358 + 32) = *(_OWORD *)&v572[8];
          *(void *)(v358 + 24) = off_1ECABC030;
          unint64_t v360 = v573;
          uint64_t v573 = 0;
          *(_OWORD *)(v358 + 64) = v359;
          *(void *)(v358 + 48) = v360;
          *(void *)(v358 + 56) = off_1ECABC030;
          if (v360) {
            *v360 += 2;
          }
          *(void *)(v358 + 80) = v360;
          *(void *)(v358 + 88) = v357;
          *(void *)(v358 + 96) = 0x100000001;
          *(unsigned char *)(v358 + 124) = 0;
          *(unsigned char *)(v358 + 128) = 0;
          *(unsigned char *)(v358 + 132) = 0;
          *(unsigned char *)(v358 + 136) = 0;
          *(_WORD *)(v358 + 140) = 0;
          *(unsigned char *)(v358 + 144) = 0;
          *(unsigned char *)(v358 + 148) = 0;
          *(unsigned char *)(v358 + 152) = 0;
          *(unsigned char *)(v358 + 154) = 0;
          *(void *)(v358 + 104) = v306;
          *(void *)(v358 + 112) = 0;
          *(unsigned char *)(v358 + 120) = 0;
          *(void *)(v355 + 312) += 160;
          unint64_t v361 = *(unsigned int *)(v355 + 356);
          if (v361 == *(_DWORD *)(v355 + 352))
          {
            unint64_t v362 = v361 + (v361 >> 2);
            if (v362 >= 0x10) {
              unint64_t v363 = v362 + 1;
            }
            else {
              unint64_t v363 = 16;
            }
            if (v363 <= v361 + 1) {
              unint64_t v364 = v361 + 1;
            }
            else {
              unint64_t v364 = v363;
            }
            if (v364 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x182570DC0);
            }
            int v365 = *(void **)(v355 + 344);
            uint64_t v366 = (void *)WTF::fastMalloc((WTF *)(8 * v364));
            *(_DWORD *)(v355 + 352) = v364;
            *(void *)(v355 + 344) = v366;
            memcpy(v366, v365, 8 * v361);
            if (v365)
            {
              if (*(void **)(v355 + 344) == v365)
              {
                *(void *)(v355 + 344) = 0;
                *(_DWORD *)(v355 + 352) = 0;
              }
              WTF::fastFree((WTF *)v365, a2);
            }
            unint64_t v361 = *(unsigned int *)(v355 + 356);
            uint64_t v367 = (void *)(*(void *)(v355 + 344) + 8 * v361);
          }
          else
          {
            uint64_t v367 = (void *)(*(void *)(v355 + 344) + 8 * v361);
          }
          *uint64_t v367 = v358;
          *(_DWORD *)(v355 + 356) = v361 + 1;
          int v368 = v573;
          *(void *)uint64_t v572 = off_1ECABC030;
          uint64_t v573 = 0;
          if (!v368) {
            goto LABEL_452;
          }
          if (*v368 != 2)
          {
            *v368 -= 2;
LABEL_452:
            *(_DWORD *)uint64_t v572 = v246;
            *(void *)&v572[8] = v358;
            uint64_t v369 = HIDWORD(v569);
            if (HIDWORD(v569) == v569) {
              goto LABEL_453;
            }
            goto LABEL_456;
          }
          WTF::StringImpl::destroy();
          *(_DWORD *)uint64_t v572 = v246;
          *(void *)&v572[8] = v358;
          uint64_t v369 = HIDWORD(v569);
          if (HIDWORD(v569) == v569)
          {
LABEL_453:
            unint64_t v370 = (_OWORD *)WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v568, v369 + 1, (unint64_t)v572);
            int v371 = HIDWORD(v569);
            unint64_t v9 = (WTF *)v568;
            *(_OWORD *)&v568[16 * HIDWORD(v569)] = *v370;
            uint64_t v6 = (uint64_t)a2;
            LODWORD(v10) = v371 + 1;
            HIDWORD(v569) = v371 + 1;
            uint64_t v372 = (_DWORD *)v565[0];
            v565[0] = 0;
            if (!v372) {
              goto LABEL_459;
            }
            goto LABEL_457;
          }
LABEL_456:
          unint64_t v9 = (WTF *)v568;
          *(_OWORD *)&v568[16 * v369] = *(_OWORD *)v572;
          uint64_t v6 = (uint64_t)a2;
          LODWORD(v10) = v369 + 1;
          HIDWORD(v569) = v369 + 1;
          uint64_t v372 = (_DWORD *)v565[0];
          v565[0] = 0;
          if (!v372) {
            goto LABEL_459;
          }
LABEL_457:
          if (*v372 != 2)
          {
            *v372 -= 2;
LABEL_459:
            int v373 = (_DWORD *)v559;
            uint64_t v559 = 0;
            if (v373) {
              goto LABEL_462;
            }
            goto LABEL_284;
          }
          WTF::StringImpl::destroy();
          int v373 = (_DWORD *)v559;
          uint64_t v559 = 0;
          if (v373)
          {
LABEL_462:
            if (*v373 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v373 -= 2;
            }
          }
LABEL_284:
          v243 += 4;
        }
        while (v243 != v552);
      }
      if (v10)
      {
        uint64_t v434 = HIDWORD(v563);
        uint64_t v5 = v549;
        if (HIDWORD(v563) == v563)
        {
          unint64_t v435 = (__int32 *)WTF::Vector<WGPUFeatureName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&__src, HIDWORD(v563) + 1, (unint64_t)&v561);
          uint64_t v434 = HIDWORD(v563);
          int v436 = __src;
          __int32 v437 = *v435;
        }
        else
        {
          int v436 = __src;
          __int32 v437 = v561;
        }
        v436[v434] = v437;
        ++HIDWORD(v563);
        unsigned int v440 = v561++;
        WGSL::RewriteGlobalVariables::finalizeArgumentBufferStruct(v6, v440, (uint64_t)&v568);
        int v438 = 0;
        unsigned int v439 = v566;
        if (v566) {
          goto LABEL_499;
        }
      }
      else
      {
        uint64_t v5 = v549;
        ++v561;
        int v438 = 3;
        unsigned int v439 = v566;
        if (v566) {
          goto LABEL_499;
        }
      }
LABEL_500:
      if (v9)
      {
        uint64_t v568 = 0;
        LODWORD(v569) = 0;
        WTF::fastFree(v9, a2);
      }
      if (v438 != 3 && v438) {
        goto LABEL_825;
      }
      uint64_t v5 = (const WTF::StringImpl *)((char *)v5 + 24);
    }
    while (v5 != v548);
  }
  uint64_t v441 = *a5;
  if (*a5)
  {
    uint64_t v442 = *(unsigned int *)(v441 - 4);
    uint64_t v443 = v441 + 16 * v442;
    uint64_t v444 = a1;
    if (!*(_DWORD *)(v441 - 12))
    {
      uint64_t v445 = v441 + 16 * v442;
      uint64_t v443 = v445;
      if (!v441) {
        goto LABEL_523;
      }
      goto LABEL_522;
    }
    uint64_t v445 = *a5;
    if (v442)
    {
      uint64_t v446 = 16 * v442;
      uint64_t v445 = *a5;
      while (*(_DWORD *)v445 >= 0xFFFFFFFE)
      {
        v445 += 16;
        v446 -= 16;
        if (!v446)
        {
          uint64_t v445 = v443;
          if (v441) {
            goto LABEL_522;
          }
          goto LABEL_523;
        }
      }
    }
  }
  else
  {
    uint64_t v445 = 0;
    uint64_t v444 = a1;
    uint64_t v443 = 0;
  }
  if (v441) {
LABEL_522:
  }
    v441 += 16 * *(unsigned int *)(v441 - 4);
LABEL_523:
  if (v441 == v445)
  {
LABEL_821:
    uint64_t v540 = HIDWORD(v563);
    *(void *)uint64_t v444 = 0;
    *(void *)(v444 + 8) = 0;
    *(_DWORD *)(v444 + 12) = v540;
    if (v540)
    {
      if (v540 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x182570E60);
      }
      int v541 = (void *)WTF::fastMalloc((WTF *)(4 * v540));
      *(_DWORD *)(v444 + 8) = v540;
      *(void *)uint64_t v444 = v541;
      memcpy(v541, __src, 4 * HIDWORD(v563));
    }
    *(_DWORD *)(v444 + 24) = 0;
    goto LABEL_825;
  }
  uint64_t v556 = v441;
  while (1)
  {
    uint64_t v447 = *(void *)(v445 + 8);
    if (v447)
    {
      uint64_t v448 = *(unsigned int *)(v447 - 4);
      uint64_t v449 = v447 + 16 * v448;
      if (!*(_DWORD *)(v447 - 12))
      {
        uint64_t v450 = v447 + 16 * v448;
        uint64_t v449 = v450;
LABEL_534:
        uint64_t v452 = v447 + 16 * *(unsigned int *)(v447 - 4);
        if (v452 != v450) {
          break;
        }
        goto LABEL_538;
      }
      uint64_t v450 = *(void *)(v445 + 8);
      if (v448)
      {
        uint64_t v451 = 16 * v448;
        uint64_t v450 = *(void *)(v445 + 8);
        do
        {
          if (*(_DWORD *)v450 < 0xFFFFFFFE) {
            goto LABEL_533;
          }
          v450 += 16;
          v451 -= 16;
        }
        while (v451);
        uint64_t v450 = v449;
        goto LABEL_534;
      }
    }
    else
    {
      uint64_t v450 = 0;
      uint64_t v449 = 0;
    }
LABEL_533:
    if (v447) {
      goto LABEL_534;
    }
    uint64_t v452 = 0;
    if (v450) {
      break;
    }
LABEL_538:
    uint64_t v453 = v445 + 16;
    uint64_t v445 = v443;
    uint64_t v444 = a1;
    if (v453 != v443)
    {
      uint64_t v445 = v453;
      while (*(_DWORD *)v445 >= 0xFFFFFFFE)
      {
        v445 += 16;
        if (v445 == v443)
        {
          uint64_t v445 = v443;
          break;
        }
      }
    }
    if (v445 == v556) {
      goto LABEL_821;
    }
  }
  while (2)
  {
    uint64_t v454 = *(void *)(*(void *)(v450 + 8) + 16);
    if (!v560) {
      goto LABEL_701;
    }
    unsigned int v455 = *(v560 - 2);
    unint64_t v456 = (~(v454 << 32) + v454) ^ ((unint64_t)(~(v454 << 32) + v454) >> 22);
    unint64_t v457 = 9 * ((v456 + ~(v456 << 13)) ^ ((v456 + ~(v456 << 13)) >> 8));
    unint64_t v458 = (v457 ^ (v457 >> 15)) + ~((v457 ^ (v457 >> 15)) << 27);
    uint64_t v459 = v455 & ((v458 >> 31) ^ v458);
    uint64_t v460 = *(void *)&v560[4 * v459];
    if (v460 != v454)
    {
      int v461 = 1;
      while (v460)
      {
        uint64_t v459 = (v459 + v461) & v455;
        uint64_t v460 = *(void *)&v560[4 * v459];
        ++v461;
        if (v460 == v454) {
          goto LABEL_551;
        }
      }
LABEL_701:
      uint64_t v504 = a2[11];
      if (!v504) {
        goto LABEL_718;
      }
      goto LABEL_702;
    }
LABEL_551:
    if (v459 == *(v560 - 1)) {
      goto LABEL_701;
    }
    int v462 = &v560[4 * v459];
    uint64_t v465 = *((void *)v462 + 1);
    unint64_t v463 = (uint64_t *)(v462 + 2);
    uint64_t v464 = v465;
    if (!v465) {
      goto LABEL_701;
    }
    int v466 = *(_DWORD *)(v464 + 32);
    if (v466 == -1) {
      uint64_t v467 = -1;
    }
    else {
      uint64_t v467 = *(unsigned int *)(v464 + 32);
    }
    switch(v467)
    {
      case 1:
        if (v466 != 1) {
          goto LABEL_845;
        }
        unint64_t v480 = *(char *)(v464 + 16);
        if (v480 > 2) {
          goto LABEL_588;
        }
        int v481 = dword_1826CEF40[v480];
        if (WGSL::bindingTypeForType(*(WGSL **)(v454 + 144), (const WGSL::Type *)a2) == v481) {
          goto LABEL_588;
        }
        goto LABEL_655;
      case 2:
        if (v466 != 2) {
          goto LABEL_845;
        }
        v468 = *(WGSL **)(v454 + 144);
        int v555 = *(unsigned __int8 *)(v464 + 18);
        if (*(unsigned char *)(v464 + 18)) {
          int v469 = 3;
        }
        else {
          int v469 = 2;
        }
        int v470 = WGSL::bindingTypeForType(v468, (const WGSL::Type *)a2);
        if (v470 != v469)
        {
          switch(v470)
          {
            case 1:
              char v482 = "Buffer";
              uint64_t v483 = 7;
              break;
            case 2:
              char v482 = "Texture";
              uint64_t v483 = 8;
              break;
            case 3:
              char v482 = "TextureMultisampled";
              uint64_t v483 = 20;
              break;
            case 4:
              char v482 = "TextureStorageReadOnly";
              uint64_t v483 = 23;
              break;
            case 5:
              char v482 = "TextureStorageReadWrite";
              uint64_t v483 = 24;
              break;
            case 6:
              char v482 = "TextureStorageWriteOnly";
              uint64_t v483 = 24;
              break;
            case 7:
              char v482 = "Sampler";
              uint64_t v483 = 8;
              break;
            case 8:
              char v482 = "SamplerComparison";
              uint64_t v483 = 18;
              break;
            case 9:
              char v482 = "TextureExternal";
              uint64_t v483 = 16;
              break;
            default:
              char v482 = "Undefined";
              uint64_t v483 = 10;
              break;
          }
          if (v555) {
            int v493 = "TextureMultisampled";
          }
          else {
            int v493 = "Texture";
          }
          uint64_t v494 = 8;
          if (v555) {
            uint64_t v494 = 20;
          }
          WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v558, "types don't match: WGSL type ", 30, v482, v483, " target type ", 14, v493, v494);
          uint64_t v7 = (uint64_t)v558;
          if (!v558)
          {
            __break(0xC471u);
            JUMPOUT(0x182570E38);
          }
          goto LABEL_656;
        }
        int v471 = *(unsigned __int8 *)(v464 + 16);
        if (!v468) {
          goto LABEL_607;
        }
        int v472 = *((_DWORD *)v468 + 12);
        if (v472 != 7)
        {
          if (v472 == 9) {
            int v484 = v468;
          }
          else {
            int v484 = 0;
          }
          if (!v484 || v471 != 2)
          {
LABEL_607:
            uint64_t v489 = "Float";
            uint64_t v490 = 6;
            switch(*(unsigned char *)(v464 + 16))
            {
              case 0:
                break;
              case 1:
                uint64_t v489 = "UnfilterableFloat";
                uint64_t v490 = 18;
                break;
              case 2:
                uint64_t v489 = "Depth";
                uint64_t v490 = 6;
                break;
              case 3:
                uint64_t v489 = "SignedInt";
                goto LABEL_646;
              case 4:
                uint64_t v489 = "UnsignedInt";
                uint64_t v490 = 12;
                break;
              default:
                uint64_t v489 = "Undefined";
LABEL_646:
                uint64_t v490 = 10;
                break;
            }
            *(void *)uint64_t v572 = "depth validation failed: ";
            *(void *)&v572[8] = 26;
            *(void *)&long long v571 = v489;
            *((void *)&v571 + 1) = v490;
            WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral>(v572, (uint64_t)&v571, &v558);
            uint64_t v7 = (uint64_t)v558;
            if (!v558)
            {
              __break(0xC471u);
              JUMPOUT(0x182570E40);
            }
            goto LABEL_656;
          }
          int v485 = *(unsigned __int8 *)v484;
          if (v555)
          {
            if (v485 == 5 && *(unsigned char *)(v464 + 17) == 1)
            {
LABEL_588:
              uint64_t v7 = *MEMORY[0x1E4F30980];
              if (*MEMORY[0x1E4F30980]) {
                *(_DWORD *)v7 += 2;
              }
              uint64_t v558 = (_DWORD *)v7;
              if (!v7)
              {
LABEL_659:
                uint64_t v558 = 0;
                goto LABEL_661;
              }
              goto LABEL_656;
            }
LABEL_605:
            if ((v485 - 1) < 4)
            {
              uint64_t v487 = "TextureDepth2d";
              uint64_t v488 = 15;
              goto LABEL_781;
            }
          }
          else
          {
            switch(*(unsigned char *)(v464 + 17))
            {
              case 1:
                if ((v485 - 2) < 3)
                {
                  uint64_t v487 = "TextureDepth2d";
                  uint64_t v488 = 15;
LABEL_782:
                  long long v533 = "2d";
LABEL_788:
                  uint64_t v534 = 3;
                  goto LABEL_789;
                }
                if (v485 != 1) {
                  break;
                }
                goto LABEL_588;
              case 2:
                int v531 = v485 - 1;
                uint64_t v487 = "TextureDepth2d";
                uint64_t v488 = 15;
                switch(v531)
                {
                  case 0:
                  case 2:
                  case 3:
LABEL_784:
                    long long v533 = "2d_array";
                    uint64_t v534 = 9;
                    goto LABEL_789;
                  case 1:
                    goto LABEL_588;
                  case 4:
                    goto LABEL_778;
                  default:
                    goto LABEL_779;
                }
              case 3:
                int v532 = v485 - 1;
                uint64_t v487 = "TextureDepth2d";
                uint64_t v488 = 15;
                switch(v532)
                {
                  case 0:
                  case 1:
                  case 3:
LABEL_785:
                    long long v533 = "cube";
                    uint64_t v534 = 5;
                    goto LABEL_789;
                  case 2:
                    goto LABEL_588;
                  case 4:
                    goto LABEL_778;
                  default:
                    goto LABEL_779;
                }
              case 4:
                if ((v485 - 1) < 3)
                {
                  uint64_t v487 = "TextureDepth2d";
                  uint64_t v488 = 15;
LABEL_783:
                  long long v533 = "cube-array";
                  uint64_t v534 = 11;
                  goto LABEL_789;
                }
                if (v485 == 4) {
                  goto LABEL_588;
                }
                break;
              default:
                goto LABEL_605;
            }
          }
          if (v485 == 5) {
LABEL_778:
          }
            uint64_t v487 = "Texture2d";
          else {
LABEL_779:
          }
            uint64_t v487 = "Undefined";
          uint64_t v488 = 10;
LABEL_781:
          long long v533 = "1d";
          uint64_t v534 = 3;
          switch(*(unsigned char *)(v464 + 17))
          {
            case 0:
              break;
            case 1:
              goto LABEL_782;
            case 2:
              goto LABEL_784;
            case 3:
              goto LABEL_785;
            case 4:
              goto LABEL_783;
            case 5:
              long long v533 = "3d";
              goto LABEL_788;
            default:
              long long v533 = "undefined";
              uint64_t v534 = 10;
              break;
          }
LABEL_789:
          char v535 = "yes";
          if (!v555) {
            char v535 = "no";
          }
          uint64_t v536 = 3;
          if (v555) {
            uint64_t v536 = 4;
          }
          *(void *)uint64_t v572 = "viewDimensions don't match: ";
          *(void *)&v572[8] = 29;
          *(void *)&long long v571 = v487;
          *((void *)&v571 + 1) = v488;
          uint64_t v567 = v534;
          uint64_t v568 = ", textureBinding view dimension ";
          uint64_t v569 = 33;
          v565[0] = ", multisampled = ";
          v565[1] = 18;
          int v566 = (WTF *)v533;
          v564[0] = v535;
          v564[1] = v536;
          WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>((uint64_t)v572, (uint64_t)&v571, (uint64_t)&v568, (uint64_t)&v566, (uint64_t)v565, (uint64_t)v564, &v558);
          uint64_t v7 = (uint64_t)v558;
          if (!v558)
          {
            __break(0xC471u);
            JUMPOUT(0x182570E58);
          }
          goto LABEL_656;
        }
        int v473 = *((unsigned __int8 *)v468 + 8);
        if (!v555)
        {
          switch(*(unsigned char *)(v464 + 17))
          {
            case 0:
              if (v471 == 2 || v473 != 1) {
                goto LABEL_737;
              }
              goto LABEL_575;
            case 1:
              unint64_t v523 = "Texture1d";
              switch(*((unsigned char *)v468 + 8))
              {
                case 1:
LABEL_740:
                  v525 = "2d";
LABEL_746:
                  uint64_t v526 = 3;
                  goto LABEL_747;
                case 2:
                  goto LABEL_575;
                case 3:
                case 5:
                case 6:
                case 7:
                  goto LABEL_738;
                case 4:
                  goto LABEL_761;
                default:
                  goto LABEL_760;
              }
            case 2:
              unint64_t v523 = "Texture1d";
              switch(*((unsigned char *)v468 + 8))
              {
                case 1:
LABEL_742:
                  v525 = "2d_array";
                  uint64_t v526 = 9;
                  goto LABEL_747;
                case 2:
                case 5:
                case 6:
                case 7:
                  goto LABEL_738;
                case 3:
                  goto LABEL_575;
                case 4:
                  goto LABEL_761;
                default:
                  goto LABEL_760;
              }
            case 3:
              unint64_t v523 = "Texture1d";
              switch(*((unsigned char *)v468 + 8))
              {
                case 1:
LABEL_743:
                  v525 = "cube";
                  uint64_t v526 = 5;
                  goto LABEL_747;
                case 2:
                case 3:
                case 6:
                case 7:
                  goto LABEL_738;
                case 4:
                  goto LABEL_761;
                case 5:
                  goto LABEL_575;
                default:
                  goto LABEL_760;
              }
            case 4:
              unint64_t v523 = "Texture1d";
              switch(*((unsigned char *)v468 + 8))
              {
                case 1:
LABEL_741:
                  v525 = "cube-array";
                  uint64_t v526 = 11;
                  goto LABEL_747;
                case 2:
                case 3:
                case 5:
                case 7:
LABEL_738:
                  unint64_t v523 = "Texture2d";
                  goto LABEL_739;
                case 4:
LABEL_761:
                  unint64_t v523 = "Texture3d";
                  goto LABEL_739;
                case 6:
                  goto LABEL_575;
                default:
LABEL_760:
                  unint64_t v523 = "Undefined";
                  goto LABEL_739;
              }
            case 5:
              if (v471 == 2 || v473 != 4) {
                goto LABEL_737;
              }
              goto LABEL_575;
            default:
              goto LABEL_737;
          }
        }
        if (v473 != 7 || *(unsigned char *)(v464 + 17) != 1)
        {
LABEL_737:
          unint64_t v523 = "Texture1d";
          switch(*((unsigned char *)v468 + 8))
          {
            case 1:
              break;
            case 2:
            case 3:
            case 5:
            case 6:
            case 7:
              goto LABEL_738;
            case 4:
              goto LABEL_761;
            default:
              goto LABEL_760;
          }
LABEL_739:
          v525 = "1d";
          uint64_t v526 = 3;
          switch(*(unsigned char *)(v464 + 17))
          {
            case 0:
              break;
            case 1:
              goto LABEL_740;
            case 2:
              goto LABEL_742;
            case 3:
              goto LABEL_743;
            case 4:
              goto LABEL_741;
            case 5:
              v525 = "3d";
              goto LABEL_746;
            default:
              v525 = "undefined";
              uint64_t v526 = 10;
              break;
          }
LABEL_747:
          int8x16_t v527 = "yes";
          if (!v555) {
            int8x16_t v527 = "no";
          }
          uint64_t v528 = 3;
          if (v555) {
            uint64_t v528 = 4;
          }
          unsigned __int8 v529 = "Float";
          uint64_t v530 = 6;
          switch(*(unsigned char *)(v464 + 16))
          {
            case 0:
              break;
            case 1:
              unsigned __int8 v529 = "UnfilterableFloat";
              uint64_t v530 = 18;
              break;
            case 2:
              unsigned __int8 v529 = "Depth";
              uint64_t v530 = 6;
              break;
            case 3:
              unsigned __int8 v529 = "SignedInt";
              goto LABEL_757;
            case 4:
              unsigned __int8 v529 = "UnsignedInt";
              uint64_t v530 = 12;
              break;
            default:
              unsigned __int8 v529 = "Undefined";
LABEL_757:
              uint64_t v530 = 10;
              break;
          }
          WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v558, "viewDimensions don't match: ", 29, v523, 10, ", bindingViewDimension = ", 26, v525, v526, ", multisampled = ", 18, v527, v528, ", bindingSampleType = ", 23, v529, v530);
          uint64_t v7 = (uint64_t)v558;
          if (!v558)
          {
            __break(0xC471u);
            JUMPOUT(0x182570E48);
          }
          goto LABEL_656;
        }
LABEL_575:
        unint64_t v474 = *(unsigned __int8 **)v468;
        if (!*(void *)v468) {
          goto LABEL_737;
        }
        if (*((_DWORD *)v474 + 12))
        {
          uint64_t v475 = "Float";
          uint64_t v476 = 6;
          switch(*(unsigned char *)(v464 + 16))
          {
            case 0:
              break;
            case 1:
              uint64_t v475 = "UnfilterableFloat";
              uint64_t v476 = 18;
              break;
            case 2:
              uint64_t v475 = "Depth";
              uint64_t v476 = 6;
              break;
            case 3:
              uint64_t v475 = "SignedInt";
              goto LABEL_769;
            case 4:
              uint64_t v475 = "UnsignedInt";
              uint64_t v476 = 12;
              break;
            default:
              uint64_t v475 = "Undefined";
LABEL_769:
              uint64_t v476 = 10;
              break;
          }
          *(void *)uint64_t v572 = "WGSL texture has no elementType: sampleType ";
          *(void *)&v572[8] = 45;
          *(void *)&long long v571 = v475;
          *((void *)&v571 + 1) = v476;
          WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral>(v572, (uint64_t)&v571, &v558);
          uint64_t v7 = (uint64_t)v558;
          if (!v558)
          {
            __break(0xC471u);
            JUMPOUT(0x182570E50);
          }
        }
        else
        {
          unsigned int v520 = "Depth";
          uint64_t v521 = 6;
          switch(*(unsigned char *)(v464 + 16))
          {
            case 0:
            case 1:
              unsigned int v522 = *v474;
              if ((v522 & 0xFE) == 4) {
                goto LABEL_588;
              }
              if (*(unsigned char *)(v464 + 16))
              {
                if (v471 == 1)
                {
                  unsigned int v520 = "UnfilterableFloat";
                  uint64_t v521 = 18;
                  if (v522 > 0xD) {
                    goto LABEL_798;
                  }
                }
                else
                {
LABEL_773:
                  unsigned int v520 = "Undefined";
LABEL_797:
                  uint64_t v521 = 10;
                  unsigned int v522 = *v474;
                  if (v522 > 0xD)
                  {
LABEL_798:
                    v537 = "undefined";
                    uint64_t v538 = 10;
                    goto LABEL_818;
                  }
                }
              }
              else
              {
                unsigned int v520 = "Float";
                uint64_t v521 = 6;
                if (v522 > 0xD) {
                  goto LABEL_798;
                }
              }
LABEL_802:
              v537 = "<AbstractInt>";
              uint64_t v538 = 14;
              switch(v522)
              {
                case 0u:
                  break;
                case 1u:
                  v537 = "int32";
                  uint64_t v538 = 6;
                  break;
                case 2u:
                  v537 = "uint32";
                  uint64_t v538 = 7;
                  break;
                case 3u:
                  v537 = "<AbstractFloat>";
                  uint64_t v538 = 16;
                  break;
                case 4u:
                  v537 = "f16";
                  uint64_t v538 = 4;
                  break;
                case 5u:
                  v537 = "f32";
                  uint64_t v538 = 4;
                  break;
                case 6u:
                  v537 = "void";
                  uint64_t v538 = 5;
                  break;
                case 7u:
                  v537 = "BOOL";
                  uint64_t v538 = 5;
                  break;
                case 8u:
                  v537 = "sampler";
                  uint64_t v538 = 8;
                  break;
                case 9u:
                  v537 = "sampler_comparion";
                  uint64_t v538 = 18;
                  break;
                case 0xAu:
                  v537 = "texture_external";
                  uint64_t v538 = 17;
                  break;
                case 0xBu:
                  v537 = "access_mode";
                  uint64_t v538 = 12;
                  break;
                case 0xCu:
                  v537 = "texel_format";
                  uint64_t v538 = 13;
                  break;
                case 0xDu:
                  v537 = "address_space";
                  uint64_t v538 = 14;
                  break;
                default:
                  goto LABEL_798;
              }
LABEL_818:
              WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v558, "element types don't match: sampleType ", 39, v520, v521, ", primitive->kind ", 19, v537, v538);
              uint64_t v7 = (uint64_t)v558;
              if (!v558)
              {
                __break(0xC471u);
                JUMPOUT(0x182570B94);
              }
              return result;
            case 2:
              goto LABEL_801;
            case 3:
              if (*v474 == 1) {
                goto LABEL_588;
              }
              unsigned int v520 = "SignedInt";
              goto LABEL_797;
            case 4:
              if (*v474 == 2) {
                goto LABEL_588;
              }
              unsigned int v520 = "UnsignedInt";
              uint64_t v521 = 12;
LABEL_801:
              unsigned int v522 = *v474;
              goto LABEL_802;
            default:
              goto LABEL_773;
          }
        }
LABEL_656:
        LODWORD(v35) = *(_DWORD *)(v7 + 4);
        if (v35) {
          goto LABEL_833;
        }
        uint64_t v558 = 0;
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
LABEL_661:
        unsigned int v495 = *(unsigned __int16 *)(v454 + 152);
        int v496 = *(unsigned __int8 *)(v464 + 16);
        int v497 = *(_DWORD *)(v464 + 32);
        if (v497 == -1) {
          uint64_t v498 = -1;
        }
        else {
          uint64_t v498 = *(unsigned int *)(v464 + 32);
        }
        uint64_t v499 = a1;
        switch(v498)
        {
          case 1:
            if (v497 == 1) {
              goto LABEL_678;
            }
            goto LABEL_845;
          case 2:
            if (v497 != 2) {
              goto LABEL_845;
            }
            goto LABEL_678;
          case 3:
            if (v497 != 3) {
              goto LABEL_845;
            }
            goto LABEL_678;
          case 4:
            if (v497 != 4) {
              goto LABEL_845;
            }
LABEL_678:
            unsigned __int8 v500 = 1;
            if (v495 >= 0x100) {
              goto LABEL_679;
            }
            goto LABEL_680;
          default:
            if (v497) {
              goto LABEL_845;
            }
            if ((v496 - 1) < 2) {
              unsigned __int8 v500 = 3;
            }
            else {
              unsigned __int8 v500 = 4;
            }
            if (v495 < 0x100) {
              goto LABEL_680;
            }
LABEL_679:
            if (v500 == v495)
            {
LABEL_680:
              unsigned int v501 = *(unsigned __int16 *)(v454 + 154);
              switch(v498)
              {
                case 1:
                  if (v497 == 1) {
                    goto LABEL_691;
                  }
                  goto LABEL_845;
                case 2:
                  if (v497 != 2) {
                    goto LABEL_845;
                  }
                  goto LABEL_691;
                case 3:
                  if (v497 != 3) {
                    goto LABEL_845;
                  }
                  goto LABEL_691;
                case 4:
                  if (v497 != 4) {
                    goto LABEL_845;
                  }
LABEL_691:
                  int v502 = 0;
                  if (v501 >= 0x100) {
                    goto LABEL_692;
                  }
                  goto LABEL_694;
                default:
                  if (v497) {
                    goto LABEL_845;
                  }
                  int v502 = v496 == 1;
                  if (v501 < 0x100) {
                    goto LABEL_694;
                  }
LABEL_692:
                  if (v502 != v501) {
                    goto LABEL_693;
                  }
LABEL_694:
                  uint64_t v7 = *MEMORY[0x1E4F30980];
                  if (*MEMORY[0x1E4F30980]) {
                    *(_DWORD *)v7 += 2;
                  }
                  break;
              }
            }
            else
            {
LABEL_693:
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              uint64_t v7 = *(void *)v572;
            }
            uint64_t v558 = (_DWORD *)v7;
            if (!v7) {
              goto LABEL_700;
            }
            LODWORD(v35) = *(_DWORD *)(v7 + 4);
            if (v35) {
              goto LABEL_834;
            }
            uint64_t v558 = 0;
            if (*(_DWORD *)v7 == 2)
            {
              WTF::StringImpl::destroy();
              uint64_t v503 = *v463;
              if (*(_DWORD *)(*v463 + 32)) {
                goto LABEL_701;
              }
            }
            else
            {
              *(_DWORD *)v7 -= 2;
LABEL_700:
              uint64_t v503 = *v463;
              if (*(_DWORD *)(*v463 + 32)) {
                goto LABEL_701;
              }
            }
            *(void *)(v503 + 24) = WGSL::Type::size(*(WGSL::Type **)(v454 + 144));
            uint64_t v504 = a2[11];
            if (!v504) {
              goto LABEL_718;
            }
            break;
        }
LABEL_702:
        int v505 = *(_DWORD *)(v504 - 8);
        v506 = *(WTF::StringImpl **)(v454 + 48);
        unsigned int v507 = *((_DWORD *)v506 + 4);
        if (v507 < 0x100) {
          unsigned int v508 = WTF::StringImpl::hashSlowCase(v506);
        }
        else {
          unsigned int v508 = v507 >> 8;
        }
        for (int j = 0; ; v508 = j + v510)
        {
          int v510 = v508 & v505;
          uint64_t v511 = *(WTF ***)(v504 + 8 * (v508 & v505));
          if (v511 != (WTF **)-1)
          {
            if (!v511) {
              goto LABEL_718;
            }
            if (WTF::equal(*v511, *(const WTF::StringImpl **)(v454 + 48), a3)) {
              break;
            }
          }
          ++j;
        }
        if (!v560) {
          goto LABEL_820;
        }
        int v512 = *(v560 - 2);
        unint64_t v513 = (~(v454 << 32) + v454) ^ ((unint64_t)(~(v454 << 32) + v454) >> 22);
        unint64_t v514 = 9 * ((v513 + ~(v513 << 13)) ^ ((v513 + ~(v513 << 13)) >> 8));
        unint64_t v515 = (v514 ^ (v514 >> 15)) + ~((v514 ^ (v514 >> 15)) << 27);
        unsigned int v516 = v512 & ((v515 >> 31) ^ v515);
        uint64_t v517 = *(void *)&v560[4 * v516];
        if (v517 == v454)
        {
LABEL_718:
          uint64_t v519 = v450 + 16;
          uint64_t v450 = v449;
          if (v519 != v449)
          {
            uint64_t v450 = v519;
            while (*(_DWORD *)v450 >= 0xFFFFFFFE)
            {
              v450 += 16;
              if (v450 == v449)
              {
                uint64_t v450 = v449;
                break;
              }
            }
          }
          if (v450 == v452) {
            goto LABEL_538;
          }
          continue;
        }
        int v518 = 1;
        while (v517)
        {
          unsigned int v516 = (v516 + v518) & v512;
          uint64_t v517 = *(void *)&v560[4 * v516];
          ++v518;
          if (v517 == v454) {
            goto LABEL_718;
          }
        }
LABEL_820:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v539 = *(void *)v572;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = v539;
        *(_DWORD *)(a1 + 24) = 1;
LABEL_825:
        if (v560) {
          WTF::fastFree((WTF *)(v560 - 4), a2);
        }
        uint64_t result = (WTF *)__src;
        if (__src)
        {
          __src = 0;
          LODWORD(v563) = 0;
          return (WTF *)WTF::fastFree(result, a2);
        }
        return result;
      case 3:
        if (v466 != 3) {
          goto LABEL_845;
        }
        uint64_t v477 = *(unsigned __int8 **)(v454 + 144);
        if (!v477 || *((_DWORD *)v477 + 12) != 8) {
          goto LABEL_655;
        }
        int v478 = *(unsigned __int8 *)(v464 + 16);
        int v479 = *v477;
        switch(*(unsigned char *)(v464 + 18))
        {
          case 0:
            if (v479 != 1) {
              goto LABEL_655;
            }
            goto LABEL_614;
          case 1:
            if (v479 != 2) {
              goto LABEL_655;
            }
            goto LABEL_614;
          case 2:
            if (v479 != 3) {
              goto LABEL_655;
            }
            goto LABEL_614;
          case 5:
            if (v479 != 4) {
              goto LABEL_655;
            }
LABEL_614:
            if (v477[1] != *(unsigned __int8 *)(v464 + 17)) {
              goto LABEL_655;
            }
            int v491 = WGSL::bindingTypeForType((WGSL *)v477, (const WGSL::Type *)a2);
            if (v491 == 4)
            {
              if (v478 == 1) {
                goto LABEL_588;
              }
            }
            else if (v491 == 6)
            {
              if ((v478 & 0xFFFFFFFD) == 0) {
                goto LABEL_588;
              }
            }
            else if (v491 == 5 && v478 == 2)
            {
              goto LABEL_588;
            }
LABEL_655:
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            uint64_t v7 = *(void *)v572;
            uint64_t v558 = *(_DWORD **)v572;
            if (!*(void *)v572) {
              goto LABEL_659;
            }
            break;
          default:
            goto LABEL_655;
        }
        goto LABEL_656;
      case 4:
        if (v466 != 4) {
          goto LABEL_845;
        }
        if (WGSL::bindingTypeForType(*(WGSL **)(v454 + 144), (const WGSL::Type *)a2) != 9) {
          goto LABEL_655;
        }
        goto LABEL_588;
      default:
        if (v466) {
LABEL_845:
        }
          std::__throw_bad_variant_access[abi:sn180100]();
        if (WGSL::bindingTypeForType(*(WGSL **)(v454 + 144), (const WGSL::Type *)a2) != 1) {
          goto LABEL_655;
        }
        goto LABEL_588;
    }
  }
}

void WGSL::RewriteGlobalVariables::finalizeArgumentBufferStruct(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a3;
  unint64_t v7 = *(unsigned int *)(a3 + 12);
  unsigned int v8 = (int *)(*(void *)a3 + 16 * v7);
  unint64_t v9 = 126 - 2 * __clz(v7);
  if (v7) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  std::__introsort<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::finalizeArgumentBufferStruct(unsigned int,WTF::Vector<std::pair<unsigned int,WGSL::AST::StructureMember *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,std::pair<unsigned int,WGSL::AST::StructureMember *>*,false>(v6, v8, v10, 1);
  unint64_t v36 = 0;
  uint64_t v11 = *(unsigned int *)(a3 + 12);
  if (v11)
  {
    uint64_t v28 = a1;
    size_t v12 = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 16 * v11;
    int v17 = (uint64_t *)(*(void *)a3 + 8);
    do
    {
      unint64_t v18 = v13;
      uint64_t v19 = *v17;
      ++v13;
      if (v18 == v14)
      {
        unint64_t v20 = v18 + (v18 >> 2);
        if (v20 >= 0x10) {
          unint64_t v21 = v20 + 1;
        }
        else {
          unint64_t v21 = 16;
        }
        if (v21 <= v13) {
          unint64_t v14 = v13;
        }
        else {
          unint64_t v14 = v21;
        }
        if (v14 >> 29)
        {
          __break(0xC471u);
          goto LABEL_32;
        }
        int8x8_t v22 = (char *)WTF::fastMalloc((WTF *)(8 * v14));
        unint64_t v14 = v14;
        memcpy(v22, v15, v12);
        if (v15)
        {
          if (v22 == v15)
          {
            unint64_t v14 = 0;
            int8x8_t v22 = 0;
          }
          WTF::fastFree((WTF *)v15, v23);
        }
        uint64_t v15 = v22;
      }
      *(void *)&v15[v12] = v19;
      v12 += 8;
      v17 += 2;
      v16 -= 16;
    }
    while (v16);
    unint64_t v36 = __PAIR64__(v13, v14);
    a1 = v28;
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v35 = (WTF *)v15;
  uint64_t v24 = *(void *)(a1 + 40);
  long long v34 = 0uLL;
  WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&v30, "__ArgumentBufferT_", 19, a2);
  if (v30)
  {
    v32[0] = off_1ECABC030;
    v32[1] = 0;
    v32[2] = 0;
    char v33 = v30;
    int v30 = 0;
    uint64_t v31 = 0;
    char v29 = 5;
    WGSL::AST::Builder::construct<WGSL::AST::Structure,WGSL::SourceSpan,WGSL::AST::Identifier,WTF::ReferenceWrapperVector<WGSL::AST::StructureMember,0ul>,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WGSL::AST::StructureRole,void>((void *)(v24 + 312), &v34, (uint64_t)v32, (uint64_t *)&v35, (uint64_t *)&v30, &v29);
    int32x2_t v26 = v30;
    if (v30)
    {
      int v30 = 0;
      LODWORD(v31) = 0;
      WTF::fastFree(v26, v25);
    }
    unsigned int v27 = v33;
    v32[0] = off_1ECABC030;
    char v33 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
    v32[0] = 0;
    WGSL::TypeStore::allocateType<WGSL::Types::Struct,WGSL::AST::Structure &,WTF::HashMap<WTF::String,WGSL::Type const*,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits> &>();
  }
  __break(0xC471u);
LABEL_32:
  JUMPOUT(0x182571470);
}

uint64_t WGSL::RewriteGlobalVariables::insertDynamicOffsetsBufferIfNeeded(uint64_t result, _OWORD *a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(result + 240);
  if (v6 && *(_DWORD *)(v6 - 12))
  {
    int v7 = *(unsigned __int8 *)(result + 184);
    switch(v7)
    {
      case 1:
        uint64_t v8 = *(void *)(result + 40);
        unsigned int v9 = *(_DWORD *)(v8 + 40);
        break;
      case 4:
        uint64_t v8 = *(void *)(result + 40);
        unsigned int v9 = *(_DWORD *)(v8 + 48);
        break;
      case 2:
        uint64_t v8 = *(void *)(result + 40);
LABEL_9:
        unsigned int v9 = *(_DWORD *)(v8 + 44);
        break;
      default:
        unsigned int v9 = 0;
        uint64_t v8 = *(void *)(result + 40);
        break;
    }
    uint64_t v10 = (void *)(v8 + 312);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v20 = (uint64_t)off_1ECABC030;
    uint64_t v11 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v10, a2, (uint64_t)&v20);
    size_t v12 = v23;
    uint64_t v20 = (uint64_t)off_1ECABC030;
    int8x8_t v23 = 0;
    if (v12)
    {
      if (*v12 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v12 -= 2;
      }
    }
    uint64_t v13 = *(void *)(v5 + 40);
    uint64_t v14 = *(void *)(v13 + 168);
    char v26 = 4;
    uint64_t v25 = v14;
    char v24 = 0;
    uint64_t v20 = 1031;
    uint64_t v21 = v14;
    uint64_t v15 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v13 + 112), (unsigned __int8 *)&v20);
    uint64_t v16 = *(unsigned __int8 **)(v13 + 112);
    if (v16) {
      v16 += 24 * *((unsigned int *)v16 - 1);
    }
    if (v16 == v15 || (uint64_t v17 = *((void *)v15 + 2)) == 0) {
      WGSL::TypeStore::allocateType<WGSL::Types::Pointer,WGSL::AddressSpace &,WGSL::AccessMode &,WGSL::Type const*&>();
    }
    v11[3] = v17;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    if (v19) {
      *v19 += 2;
    }
    uint64_t v20 = (uint64_t)off_1ECABC030;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    int8x8_t v23 = v19;
    WGSL::RewriteGlobalVariables::insertParameter(v5, a2, a3, v9, (uint64_t)&v20, v11, 0);
    unint64_t v18 = v23;
    uint64_t v20 = (uint64_t)off_1ECABC030;
    int8x8_t v23 = 0;
    if (v18)
    {
      if (*v18 == 2)
      {
        WTF::StringImpl::destroy();
        uint64_t result = (uint64_t)v19;
        if (!v19) {
          return result;
        }
LABEL_30:
        if (*(_DWORD *)result == 2) {
          return WTF::StringImpl::destroy();
        }
        *(_DWORD *)result -= 2;
        return result;
      }
      *v18 -= 2;
    }
    uint64_t result = (uint64_t)v19;
    if (!v19) {
      return result;
    }
    goto LABEL_30;
  }
  if (*(unsigned char *)(result + 184) == 2)
  {
    uint64_t v8 = *(void *)(result + 40);
    if (*(unsigned char *)(v8 + 19)) {
      goto LABEL_9;
    }
  }
  return result;
}

void *WGSL::AST::Builder::construct<WGSL::AST::CompoundStatement,WGSL::SourceSpan,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WTF::ReferenceWrapperVector<WGSL::AST::Statement,0ul>,void>(void *this, _OWORD *a2, uint64_t *a3, uint64_t *a4)
{
  int v7 = this;
  uint64_t v8 = *this;
  if (this[1] - *this <= 0x37uLL)
  {
    this = (void *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    uint64_t v8 = *v7;
  }
  *(_OWORD *)(v8 + 8) = *a2;
  *(void *)uint64_t v8 = &unk_1ECABD480;
  *(void *)(v8 + 24) = 0;
  *(void *)(v8 + 32) = 0;
  uint64_t v9 = *a3;
  *a3 = 0;
  *(void *)(v8 + 24) = v9;
  LODWORD(v9) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(v8 + 32) = v9;
  LODWORD(v9) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(v8 + 36) = v9;
  *(void *)(v8 + 40) = 0;
  *(void *)(v8 + 48) = 0;
  uint64_t v10 = *a4;
  *a4 = 0;
  *(void *)(v8 + 40) = v10;
  LODWORD(v10) = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = 0;
  *(_DWORD *)(v8 + 48) = v10;
  LODWORD(v10) = *((_DWORD *)a4 + 3);
  *((_DWORD *)a4 + 3) = 0;
  *(_DWORD *)(v8 + 52) = v10;
  *v7 += 56;
  unint64_t v11 = *((unsigned int *)v7 + 11);
  if (v11 != *((_DWORD *)v7 + 10))
  {
    unint64_t v18 = (void *)(v7[4] + 8 * v11);
LABEL_17:
    void *v18 = v8;
    *((_DWORD *)v7 + 11) = v11 + 1;
    return (void *)v8;
  }
  unint64_t v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10) {
    unint64_t v13 = v12 + 1;
  }
  else {
    unint64_t v13 = 16;
  }
  if (v13 <= v11 + 1) {
    unint64_t v14 = v11 + 1;
  }
  else {
    unint64_t v14 = v13;
  }
  if (!(v14 >> 29))
  {
    uint64_t v15 = (void *)v7[4];
    uint64_t v16 = (void *)WTF::fastMalloc((WTF *)(8 * v14));
    *((_DWORD *)v7 + 10) = v14;
    v7[4] = v16;
    memcpy(v16, v15, 8 * v11);
    if (v15)
    {
      if ((void *)v7[4] == v15)
      {
        v7[4] = 0;
        *((_DWORD *)v7 + 10) = 0;
      }
      WTF::fastFree((WTF *)v15, v17);
    }
    unint64_t v11 = *((unsigned int *)v7 + 11);
    unint64_t v18 = (void *)(v7[4] + 8 * v11);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

void *WGSL::AST::Builder::construct<WGSL::AST::CallStatement,WGSL::SourceSpan,WGSL::AST::CallExpression &,void>(void *this, _OWORD *a2, uint64_t a3)
{
  uint64_t v5 = this;
  uint64_t v6 = *this;
  if (this[1] - *this <= 0x1FuLL)
  {
    this = (void *)WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)this);
    uint64_t v6 = *v5;
  }
  *(_OWORD *)(v6 + 8) = *a2;
  *(void *)uint64_t v6 = &unk_1ECABD4D0;
  *(void *)(v6 + 24) = a3;
  *v5 += 32;
  unint64_t v7 = *((unsigned int *)v5 + 11);
  if (v7 != *((_DWORD *)v5 + 10))
  {
    unint64_t v14 = (void *)(v5[4] + 8 * v7);
LABEL_17:
    *unint64_t v14 = v6;
    *((_DWORD *)v5 + 11) = v7 + 1;
    return (void *)v6;
  }
  unint64_t v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10) {
    unint64_t v9 = v8 + 1;
  }
  else {
    unint64_t v9 = 16;
  }
  if (v9 <= v7 + 1) {
    unint64_t v10 = v7 + 1;
  }
  else {
    unint64_t v10 = v9;
  }
  if (!(v10 >> 29))
  {
    unint64_t v11 = (void *)v5[4];
    unint64_t v12 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
    *((_DWORD *)v5 + 10) = v10;
    v5[4] = v12;
    memcpy(v12, v11, 8 * v7);
    if (v11)
    {
      if ((void *)v5[4] == v11)
      {
        v5[4] = 0;
        *((_DWORD *)v5 + 10) = 0;
      }
      WTF::fastFree((WTF *)v11, v13);
    }
    unint64_t v7 = *((unsigned int *)v5 + 11);
    unint64_t v14 = (void *)(v5[4] + 8 * v7);
    goto LABEL_17;
  }
  __break(0xC471u);
  return this;
}

WTF *WGSL::RewriteGlobalVariables::storeInitialValue(WTF *result, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  v142[0] = result;
  v142[1] = a2;
  v142[2] = a3;
  uint64_t v5 = *(void *)(a2 + 24);
  if (!v5)
  {
LABEL_10:
    if (!a5) {
      return result;
    }
    return WGSL::RewriteGlobalVariables::storeInitialValue(WGSL::AST::Expression &,WTF::ReferenceWrapperVector<WGSL::AST::Statement,0ul> &,unsigned int,BOOL)::$_0::operator()(v142);
  }
  uint64_t v6 = a3;
  unint64_t v7 = result;
  int v8 = *(_DWORD *)(v5 + 48);
  int v132 = result;
  switch(v8)
  {
    case 12:
      unint64_t v13 = (void *)(*((void *)result + 5) + 312);
      long long v140 = 0uLL;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      long long v138 = 0uLL;
      uint64_t v137 = off_1ECABC030;
      unint64_t v14 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v13, &v140, (uint64_t)&v137);
      uint64_t v15 = v139;
      uint64_t v137 = off_1ECABC030;
      unint64_t v139 = 0;
      if (v15)
      {
        if (*v15 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v15 -= 2;
        }
      }
      uint64_t v34 = *((void *)v7 + 5);
      v14[3] = *(void *)(v34 + 120);
      uint64_t v137 = 0;
      *(void *)&long long v138 = 0;
      LOBYTE(v140) = 0;
      uint64_t v35 = WGSL::AST::Builder::construct<WGSL::AST::UnaryExpression,WGSL::SourceSpan,WGSL::AST::Expression &,WGSL::AST::UnaryOperation,void>((void *)(v34 + 312), &v137, a2, (char *)&v140);
      uint64_t v36 = *((void *)v7 + 5);
      v35[3] = *(void *)(v36 + 120);
      uint64_t v37 = *(void *)(v36 + 312);
      if ((unint64_t)(*(void *)(v36 + 320) - v37) <= 0x47)
      {
        WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v36 + 312));
        uint64_t v37 = *(void *)(v36 + 312);
      }
      *(unsigned char *)(v37 + 56) = 0;
      *(void *)(v37 + 16) = 0;
      *(void *)(v37 + 24) = 0;
      *(unsigned char *)(v37 + 32) = 0;
      *(void *)uint64_t v37 = &unk_1ECABD408;
      *(void *)(v37 + 8) = 0;
      *(void *)(v37 + 64) = 0;
      *(void *)(v36 + 312) += 72;
      unint64_t v38 = *(unsigned int *)(v36 + 356);
      if (v38 == *(_DWORD *)(v36 + 352))
      {
        unint64_t v39 = v38 + (v38 >> 2);
        if (v39 >= 0x10) {
          unint64_t v40 = v39 + 1;
        }
        else {
          unint64_t v40 = 16;
        }
        if (v40 <= v38 + 1) {
          unint64_t v41 = v38 + 1;
        }
        else {
          unint64_t v41 = v40;
        }
        if (v41 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x18257288CLL);
        }
        uint64_t v42 = *(void **)(v36 + 344);
        uint64_t v43 = (void *)WTF::fastMalloc((WTF *)(8 * v41));
        *(_DWORD *)(v36 + 352) = v41;
        *(void *)(v36 + 344) = v43;
        memcpy(v43, v42, 8 * v38);
        uint64_t v6 = a3;
        if (v42)
        {
          if (*(void **)(v36 + 344) == v42)
          {
            *(void *)(v36 + 344) = 0;
            *(_DWORD *)(v36 + 352) = 0;
          }
          WTF::fastFree((WTF *)v42, v44);
        }
        unint64_t v38 = *(unsigned int *)(v36 + 356);
        uint64_t v45 = (void *)(*(void *)(v36 + 344) + 8 * v38);
      }
      else
      {
        uint64_t v45 = (void *)(*(void *)(v36 + 344) + 8 * v38);
      }
      *uint64_t v45 = v37;
      *(_DWORD *)(v36 + 356) = v38 + 1;
      uint64_t v46 = *((void *)v132 + 5);
      *(void *)(v37 + 24) = *(void *)(v46 + 128);
      uint64_t v137 = 0;
      *(void *)&long long v138 = 0;
      uint64_t v47 = (void *)WTF::fastMalloc((WTF *)0x10);
      DWORD2(v140) = 2;
      *(void *)&long long v140 = v47;
      *uint64_t v47 = v35;
      v47[1] = v37;
      HIDWORD(v140) = 2;
      unsigned int v49 = WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>((void *)(v46 + 312), &v137, (uint64_t)v14, (uint64_t *)&v140);
      uint64_t v50 = (WTF *)v140;
      if ((void)v140)
      {
        *(void *)&long long v140 = 0;
        DWORD2(v140) = 0;
        WTF::fastFree(v50, v48);
      }
      uint64_t v51 = *((void *)v132 + 5);
      v49[3] = *(void *)(v51 + 144);
      uint64_t v137 = 0;
      *(void *)&long long v138 = 0;
      uint64_t result = (WTF *)WGSL::AST::Builder::construct<WGSL::AST::CallStatement,WGSL::SourceSpan,WGSL::AST::CallExpression &,void>((void *)(v51 + 312), &v137, (uint64_t)v49);
      uint64_t v137 = (void (**)(WGSL::AST::Identifier *__hidden))result;
      uint64_t v52 = *(unsigned int *)(v6 + 12);
      if (v52 == *(_DWORD *)(v6 + 8))
      {
        uint64_t result = (WTF *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, v52 + 1, (unint64_t)&v137);
        *(void *)(*(void *)v6 + 8 * *(unsigned int *)(v6 + 12)) = *(void *)result;
      }
      else
      {
        *(void *)(*(void *)v6 + 8 * v52) = result;
      }
      ++*(_DWORD *)(v6 + 12);
      break;
    case 4:
      uint64_t result = (WTF *)WGSL::Type::isConstructible((WGSL::Type *)v5);
      if (result) {
        return WGSL::RewriteGlobalVariables::storeInitialValue(WGSL::AST::Expression &,WTF::ReferenceWrapperVector<WGSL::AST::Statement,0ul> &,unsigned int,BOOL)::$_0::operator()(v142);
      }
      uint64_t v16 = *(unsigned int *)(*(void *)v5 + 84);
      if (v16)
      {
        uint64_t v17 = *(void *)(*(void *)v5 + 72);
        uint64_t v18 = 8 * v16;
        do
        {
          uint64_t v19 = *(void *)(*(void *)(*(void *)v17 + 104) + 24);
          uint64_t v20 = *((void *)v7 + 5);
          uint64_t v21 = *(_DWORD **)(*(void *)v17 + 48);
          if (v21) {
            *v21 += 2;
          }
          long long v138 = 0uLL;
          uint64_t v137 = off_1ECABC030;
          unint64_t v139 = v21;
          uint64_t v22 = *(void *)(v20 + 312);
          if ((unint64_t)(*(void *)(v20 + 320) - v22) <= 0x87)
          {
            WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v20 + 312));
            uint64_t v22 = *(void *)(v20 + 312);
          }
          *(unsigned char *)(v22 + 56) = 0;
          *(void *)(v22 + 16) = 0;
          *(void *)(v22 + 24) = 0;
          *(unsigned char *)(v22 + 32) = 0;
          *(void *)uint64_t v22 = off_1ECABC8B0;
          *(void *)(v22 + 8) = 0;
          long long v23 = v138;
          *(_OWORD *)(v22 + 80) = v138;
          *(void *)(v22 + 64) = a2;
          *(void *)(v22 + 72) = off_1ECABC030;
          char v24 = v139;
          unint64_t v139 = 0;
          *(_OWORD *)(v22 + 112) = v23;
          *(void *)(v22 + 96) = v24;
          *(void *)(v22 + 104) = off_1ECABC030;
          if (v24) {
            *v24 += 2;
          }
          *(void *)(v22 + 128) = v24;
          *(void *)(v20 + 312) += 136;
          unint64_t v25 = *(unsigned int *)(v20 + 356);
          if (v25 == *(_DWORD *)(v20 + 352))
          {
            unint64_t v26 = v25 + (v25 >> 2);
            if (v26 >= 0x10) {
              unint64_t v27 = v26 + 1;
            }
            else {
              unint64_t v27 = 16;
            }
            if (v27 <= v25 + 1) {
              unint64_t v28 = v25 + 1;
            }
            else {
              unint64_t v28 = v27;
            }
            if (v28 >> 29) {
              goto LABEL_188;
            }
            char v29 = *(void **)(v20 + 344);
            int v30 = (void *)WTF::fastMalloc((WTF *)(8 * v28));
            *(_DWORD *)(v20 + 352) = v28;
            *(void *)(v20 + 344) = v30;
            memcpy(v30, v29, 8 * v25);
            unint64_t v7 = v132;
            if (v29)
            {
              if (*(void **)(v20 + 344) == v29)
              {
                *(void *)(v20 + 344) = 0;
                *(_DWORD *)(v20 + 352) = 0;
              }
              WTF::fastFree((WTF *)v29, v31);
            }
            unint64_t v25 = *(unsigned int *)(v20 + 356);
            int v32 = (void *)(*(void *)(v20 + 344) + 8 * v25);
            uint64_t v6 = a3;
          }
          else
          {
            int v32 = (void *)(*(void *)(v20 + 344) + 8 * v25);
          }
          *int v32 = v22;
          *(_DWORD *)(v20 + 356) = v25 + 1;
          char v33 = v139;
          uint64_t v137 = off_1ECABC030;
          unint64_t v139 = 0;
          if (v33)
          {
            if (*v33 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v33 -= 2;
            }
          }
          *(void *)(v22 + 24) = v19;
          uint64_t result = (WTF *)WGSL::RewriteGlobalVariables::storeInitialValue(v7, v22, v6, a4, 1);
          v17 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      break;
    case 3:
      if (*(_DWORD *)(v5 + 16))
      {
        WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)&v141, "__i", 4, a4);
        unint64_t v9 = v141;
        if (!v141)
        {
          __break(0xC471u);
          JUMPOUT(0x182572884);
        }
        unint64_t v10 = (void *)(*((void *)v7 + 5) + 312);
        long long v140 = 0uLL;
        *v141 += 2;
        uint64_t v137 = off_1ECABC030;
        long long v138 = 0uLL;
        unint64_t v139 = v9;
        unint64_t v11 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v10, &v140, (uint64_t)&v137);
        unint64_t v12 = v139;
        uint64_t v137 = off_1ECABC030;
        unint64_t v139 = 0;
        if (v12)
        {
          if (*v12 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v12 -= 2;
          }
        }
        uint64_t v53 = *((void *)v7 + 5);
        v11[3] = *(void *)(v53 + 168);
        uint64_t v54 = *(void *)(v53 + 312);
        if ((unint64_t)(*(void *)(v53 + 320) - v54) <= 0x4F)
        {
          WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v53 + 312));
          uint64_t v54 = *(void *)(v53 + 312);
        }
        *(unsigned char *)(v54 + 56) = 0;
        *(void *)(v54 + 16) = 0;
        *(void *)(v54 + 24) = 0;
        *(unsigned char *)(v54 + 32) = 0;
        *(void *)uint64_t v54 = off_1ECABC180;
        *(void *)(v54 + 8) = 0;
        *(void *)(v54 + 64) = a2;
        *(void *)(v54 + 72) = v11;
        *(void *)(v53 + 312) += 80;
        unint64_t v55 = *(unsigned int *)(v53 + 356);
        if (v55 == *(_DWORD *)(v53 + 352))
        {
          unint64_t v56 = v55 + (v55 >> 2);
          if (v56 >= 0x10) {
            unint64_t v57 = v56 + 1;
          }
          else {
            unint64_t v57 = 16;
          }
          if (v57 <= v55 + 1) {
            unint64_t v58 = v55 + 1;
          }
          else {
            unint64_t v58 = v57;
          }
          if (v58 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x182572894);
          }
          unsigned int v59 = *(void **)(v53 + 344);
          uint64_t v60 = (void *)WTF::fastMalloc((WTF *)(8 * v58));
          *(_DWORD *)(v53 + 352) = v58;
          *(void *)(v53 + 344) = v60;
          memcpy(v60, v59, 8 * v55);
          if (v59)
          {
            if (*(void **)(v53 + 344) == v59)
            {
              *(void *)(v53 + 344) = 0;
              *(_DWORD *)(v53 + 352) = 0;
            }
            WTF::fastFree((WTF *)v59, v61);
          }
          unint64_t v55 = *(unsigned int *)(v53 + 356);
          uint64_t v62 = (void *)(*(void *)(v53 + 344) + 8 * v55);
          unint64_t v7 = v132;
        }
        else
        {
          uint64_t v62 = (void *)(*(void *)(v53 + 344) + 8 * v55);
        }
        void *v62 = v54;
        *(_DWORD *)(v53 + 356) = v55 + 1;
        *(void *)(v54 + 24) = *(void *)v5;
        long long v140 = 0uLL;
        WGSL::RewriteGlobalVariables::storeInitialValue(v7, v54, &v140, a4 + 1, 1);
        uint64_t v63 = (void *)(*((void *)v7 + 5) + 312);
        uint64_t v137 = 0;
        *(void *)&long long v138 = 0;
        LODWORD(v135) = 0;
        unint64_t v64 = WGSL::AST::Builder::construct<WGSL::AST::Unsigned32Literal,WGSL::SourceSpan,int,void>(v63, &v137, (int *)&v135);
        uint64_t v65 = *((void *)v7 + 5);
        v64[3] = *(void *)(v65 + 168);
        *v9 += 2;
        uint64_t v137 = off_1ECABC030;
        long long v138 = 0uLL;
        unint64_t v139 = v9;
        uint64_t v66 = *(void *)(v65 + 312);
        if ((unint64_t)(*(void *)(v65 + 320) - v66) <= 0xB7)
        {
          WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v65 + 312));
          uint64_t v66 = *(void *)(v65 + 312);
        }
        *(void *)(v66 + 8) = 0;
        *(void *)(v66 + 16) = 0;
        *(void *)uint64_t v66 = &unk_1ECABC8D8;
        long long v67 = v138;
        *(_OWORD *)(v66 + 32) = v138;
        *(void *)(v66 + 24) = off_1ECABC030;
        int v68 = v139;
        unint64_t v139 = 0;
        *(_OWORD *)(v66 + 64) = v67;
        *(void *)(v66 + 48) = v68;
        *(void *)(v66 + 56) = off_1ECABC030;
        if (v68) {
          *v68 += 2;
        }
        *(void *)(v66 + 80) = v68;
        *(_OWORD *)(v66 + 88) = 0u;
        *(_OWORD *)(v66 + 104) = 0u;
        *(void *)(v66 + 120) = v64;
        *(_WORD *)(v66 + 128) = 3;
        *(unsigned char *)(v66 + 160) = 0;
        *(unsigned char *)(v66 + 164) = 0;
        *(unsigned char *)(v66 + 168) = 0;
        *(unsigned char *)(v66 + 172) = 0;
        *(unsigned char *)(v66 + 176) = 0;
        *(void *)(v66 + 149) = 0;
        *(void *)(v66 + 136) = 0;
        *(void *)(v66 + 144) = 0;
        *(void *)(v66 + 144) = v64[3];
        *(void *)(v65 + 312) += 184;
        unint64_t v69 = *(unsigned int *)(v65 + 356);
        if (v69 == *(_DWORD *)(v65 + 352))
        {
          unint64_t v70 = v69 + (v69 >> 2);
          if (v70 >= 0x10) {
            unint64_t v71 = v70 + 1;
          }
          else {
            unint64_t v71 = 16;
          }
          if (v71 <= v69 + 1) {
            unint64_t v72 = v69 + 1;
          }
          else {
            unint64_t v72 = v71;
          }
          if (v72 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x18257289CLL);
          }
          uint64_t v73 = *(void **)(v65 + 344);
          int v74 = (void *)WTF::fastMalloc((WTF *)(8 * v72));
          *(_DWORD *)(v65 + 352) = v72;
          *(void *)(v65 + 344) = v74;
          memcpy(v74, v73, 8 * v69);
          if (v73)
          {
            if (*(void **)(v65 + 344) == v73)
            {
              *(void *)(v65 + 344) = 0;
              *(_DWORD *)(v65 + 352) = 0;
            }
            WTF::fastFree((WTF *)v73, v75);
          }
          unint64_t v69 = *(unsigned int *)(v65 + 356);
          int v76 = (uint64_t *)(*(void *)(v65 + 344) + 8 * v69);
        }
        else
        {
          int v76 = (uint64_t *)(*(void *)(v65 + 344) + 8 * v69);
        }
        *int v76 = v66;
        *(_DWORD *)(v65 + 356) = v69 + 1;
        unsigned int v77 = v139;
        uint64_t v137 = off_1ECABC030;
        unint64_t v139 = 0;
        unsigned int v78 = v132;
        if (v77)
        {
          if (*v77 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v77 -= 2;
          }
        }
        BOOL v79 = (void *)(*((void *)v132 + 5) + 312);
        uint64_t v137 = 0;
        *(void *)&long long v138 = 0;
        uint64_t v80 = (void (*)(WGSL::AST::Identifier *__hidden))WGSL::AST::Builder::construct<WGSL::AST::VariableStatement,WGSL::SourceSpan,WGSL::AST::Variable &,void>(v79, &v137, v66);
        int v81 = *(_DWORD *)(v5 + 16);
        if (v81 != 1)
        {
          if (v81 != 2)
          {
            std::__throw_bad_variant_access[abi:sn180100]();
LABEL_188:
            __break(0xC471u);
            JUMPOUT(0x18257287CLL);
          }
          uint64_t v82 = *(void *)(v5 + 8);
          uint64_t v83 = *((void *)v132 + 5);
LABEL_126:
          uint64_t v94 = *(void *)(v83 + 312);
          if ((unint64_t)(*(void *)(v83 + 320) - v94) <= 0x57)
          {
            WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v83 + 312));
            uint64_t v94 = *(void *)(v83 + 312);
          }
          *(unsigned char *)(v94 + 56) = 0;
          *(void *)(v94 + 16) = 0;
          *(void *)(v94 + 24) = 0;
          *(unsigned char *)(v94 + 32) = 0;
          *(void *)uint64_t v94 = off_1ECABC158;
          *(void *)(v94 + 8) = 0;
          *(void *)(v94 + 64) = v11;
          *(void *)(v94 + 72) = v82;
          *(unsigned char *)(v94 + 80) = 14;
          *(void *)(v83 + 312) += 88;
          unint64_t v95 = *(unsigned int *)(v83 + 356);
          if (v95 == *(_DWORD *)(v83 + 352))
          {
            unint64_t v96 = v95 + (v95 >> 2);
            if (v96 >= 0x10) {
              unint64_t v97 = v96 + 1;
            }
            else {
              unint64_t v97 = 16;
            }
            if (v97 <= v95 + 1) {
              unint64_t v98 = v95 + 1;
            }
            else {
              unint64_t v98 = v97;
            }
            if (v98 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1825728A4);
            }
            unint64_t v99 = *(void **)(v83 + 344);
            unint64_t v100 = (void *)WTF::fastMalloc((WTF *)(8 * v98));
            *(_DWORD *)(v83 + 352) = v98;
            *(void *)(v83 + 344) = v100;
            memcpy(v100, v99, 8 * v95);
            unsigned int v78 = v132;
            if (v99)
            {
              if (*(void **)(v83 + 344) == v99)
              {
                *(void *)(v83 + 344) = 0;
                *(_DWORD *)(v83 + 352) = 0;
              }
              WTF::fastFree((WTF *)v99, v101);
            }
            unint64_t v95 = *(unsigned int *)(v83 + 356);
            uint64_t v102 = (void *)(*(void *)(v83 + 344) + 8 * v95);
          }
          else
          {
            uint64_t v102 = (void *)(*(void *)(v83 + 344) + 8 * v95);
          }
          void *v102 = v94;
          *(_DWORD *)(v83 + 356) = v95 + 1;
          uint64_t v103 = *((void *)v78 + 5);
          *(void *)(v94 + 24) = *(void *)(v103 + 152);
          uint64_t v137 = 0;
          *(void *)&long long v138 = 0;
          LODWORD(v135) = 1;
          int v104 = WGSL::AST::Builder::construct<WGSL::AST::Unsigned32Literal,WGSL::SourceSpan,int,void>((void *)(v103 + 312), &v137, (int *)&v135);
          uint64_t v105 = *((void *)v78 + 5);
          v104[3] = *(void *)(v105 + 168);
          uint64_t v106 = *(void *)(v105 + 312);
          if ((unint64_t)(*(void *)(v105 + 320) - v106) <= 0x2F)
          {
            WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v105 + 312));
            uint64_t v106 = *(void *)(v105 + 312);
            unsigned int v78 = v132;
          }
          *(void *)uint64_t v106 = &unk_1ECABD520;
          *(void *)(v106 + 8) = 0;
          *(void *)(v106 + 16) = 0;
          *(void *)(v106 + 24) = v11;
          *(void *)(v106 + 32) = v104;
          *(unsigned char *)(v106 + 40) = 0;
          *(void *)(v105 + 312) += 48;
          unint64_t v107 = *(unsigned int *)(v105 + 356);
          if (v107 == *(_DWORD *)(v105 + 352))
          {
            unint64_t v108 = v107 + (v107 >> 2);
            if (v108 >= 0x10) {
              unint64_t v109 = v108 + 1;
            }
            else {
              unint64_t v109 = 16;
            }
            if (v109 <= v107 + 1) {
              unint64_t v110 = v107 + 1;
            }
            else {
              unint64_t v110 = v109;
            }
            if (v110 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1825728ACLL);
            }
            unint64_t v111 = *(void **)(v105 + 344);
            unint64_t v112 = (void *)WTF::fastMalloc((WTF *)(8 * v110));
            *(_DWORD *)(v105 + 352) = v110;
            *(void *)(v105 + 344) = v112;
            memcpy(v112, v111, 8 * v107);
            unsigned int v78 = v132;
            if (v111)
            {
              if (*(void **)(v105 + 344) == v111)
              {
                *(void *)(v105 + 344) = 0;
                *(_DWORD *)(v105 + 352) = 0;
              }
              WTF::fastFree((WTF *)v111, v113);
            }
            unint64_t v107 = *(unsigned int *)(v105 + 356);
            unint64_t v114 = (void *)(*(void *)(v105 + 344) + 8 * v107);
          }
          else
          {
            unint64_t v114 = (void *)(*(void *)(v105 + 344) + 8 * v107);
          }
          void *v114 = v106;
          *(_DWORD *)(v105 + 356) = v107 + 1;
          unsigned int v115 = (void *)(*((void *)v78 + 5) + 312);
          uint64_t v137 = 0;
          *(void *)&long long v138 = 0;
          uint64_t v135 = 0;
          uint64_t v136 = 0;
          unint64_t v117 = (void (*)(WGSL::AST::Identifier *__hidden))WGSL::AST::Builder::construct<WGSL::AST::CompoundStatement,WGSL::SourceSpan,WTF::ReferenceWrapperVector<WGSL::AST::Attribute,0ul>,WTF::ReferenceWrapperVector<WGSL::AST::Statement,0ul>,void>(v115, &v137, (uint64_t *)&v135, (uint64_t *)&v140);
          unint64_t v118 = v135;
          if (v135)
          {
            uint64_t v135 = 0;
            LODWORD(v136) = 0;
            WTF::fastFree(v118, v116);
          }
          uint64_t v119 = *((void *)v78 + 5);
          uint64_t v120 = *(void (***)(WGSL::AST::Identifier *__hidden))(v119 + 312);
          if (*(void *)(v119 + 320) - (void)v120 <= 0x37uLL)
          {
            WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v119 + 312));
            uint64_t v120 = *(void (***)(WGSL::AST::Identifier *__hidden))(v119 + 312);
          }
          *uint64_t v120 = (void (*)(WGSL::AST::Identifier *__hidden))&unk_1ECABD548;
          v120[1] = 0;
          v120[2] = 0;
          v120[3] = v80;
          v120[4] = (void (*)(WGSL::AST::Identifier *__hidden))v94;
          v120[5] = (void (*)(WGSL::AST::Identifier *__hidden))v106;
          v120[6] = v117;
          *(void *)(v119 + 312) += 56;
          unint64_t v121 = *(unsigned int *)(v119 + 356);
          if (v121 == *(_DWORD *)(v119 + 352))
          {
            unint64_t v122 = v121 + (v121 >> 2);
            if (v122 >= 0x10) {
              unint64_t v123 = v122 + 1;
            }
            else {
              unint64_t v123 = 16;
            }
            if (v123 <= v121 + 1) {
              unint64_t v124 = v121 + 1;
            }
            else {
              unint64_t v124 = v123;
            }
            if (v124 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1825728B4);
            }
            uint64_t v125 = *(void **)(v119 + 344);
            unint64_t v126 = (void *)WTF::fastMalloc((WTF *)(8 * v124));
            *(_DWORD *)(v119 + 352) = v124;
            *(void *)(v119 + 344) = v126;
            memcpy(v126, v125, 8 * v121);
            uint64_t v127 = a3;
            if (v125)
            {
              if (*(void **)(v119 + 344) == v125)
              {
                *(void *)(v119 + 344) = 0;
                *(_DWORD *)(v119 + 352) = 0;
              }
              WTF::fastFree((WTF *)v125, v116);
            }
            unint64_t v121 = *(unsigned int *)(v119 + 356);
            unint64_t v128 = (void (***)(WGSL::AST::Identifier *__hidden))(*(void *)(v119 + 344) + 8 * v121);
          }
          else
          {
            unint64_t v128 = (void (***)(WGSL::AST::Identifier *__hidden))(*(void *)(v119 + 344) + 8 * v121);
            uint64_t v127 = a3;
          }
          WTF *v128 = v120;
          *(_DWORD *)(v119 + 356) = v121 + 1;
          uint64_t v137 = v120;
          uint64_t v129 = *(unsigned int *)(v127 + 12);
          if (v129 == *(_DWORD *)(v127 + 8))
          {
            *(void *)(*(void *)v127 + 8 * (*(_DWORD *)(v127 + 12))++) = *(void *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v127, v129 + 1, (unint64_t)&v137);
            uint64_t v130 = (WTF *)v140;
            if (!(void)v140)
            {
LABEL_181:
              uint64_t result = (WTF *)v141;
              if (v141)
              {
                if (*v141 == 2) {
                  return (WTF *)WTF::StringImpl::destroy();
                }
                else {
                  *v141 -= 2;
                }
              }
              return result;
            }
          }
          else
          {
            *(void *)(*(void *)v127 + 8 * v129) = v120;
            ++*(_DWORD *)(v127 + 12);
            uint64_t v130 = (WTF *)v140;
            if (!(void)v140) {
              goto LABEL_181;
            }
          }
          *(void *)&long long v140 = 0;
          DWORD2(v140) = 0;
          WTF::fastFree(v130, v116);
          goto LABEL_181;
        }
        uint64_t v84 = *((void *)v132 + 5);
        uint64_t v82 = *(void *)(v84 + 312);
        if ((unint64_t)(*(void *)(v84 + 320) - v82) <= 0x47)
        {
          WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v84 + 312));
          uint64_t v82 = *(void *)(v84 + 312);
        }
        int v85 = *(_DWORD *)(v5 + 8);
        *(unsigned char *)(v82 + 56) = 0;
        *(void *)(v82 + 16) = 0;
        *(void *)(v82 + 24) = 0;
        *(unsigned char *)(v82 + 32) = 0;
        *(void *)uint64_t v82 = &unk_1ECABC080;
        *(void *)(v82 + 8) = 0;
        *(_DWORD *)(v82 + 64) = v85;
        *(void *)(v84 + 312) += 72;
        unint64_t v86 = *(unsigned int *)(v84 + 356);
        if (v86 != *(_DWORD *)(v84 + 352))
        {
          uint64_t v93 = (void *)(*(void *)(v84 + 344) + 8 * v86);
LABEL_125:
          void *v93 = v82;
          *(_DWORD *)(v84 + 356) = v86 + 1;
          unsigned int v78 = v132;
          uint64_t v83 = *((void *)v132 + 5);
          *(void *)(v82 + 24) = *(void *)(v83 + 168);
          goto LABEL_126;
        }
        unint64_t v87 = v86 + (v86 >> 2);
        if (v87 >= 0x10) {
          unint64_t v88 = v87 + 1;
        }
        else {
          unint64_t v88 = 16;
        }
        if (v88 <= v86 + 1) {
          unint64_t v89 = v86 + 1;
        }
        else {
          unint64_t v89 = v88;
        }
        if (!(v89 >> 29))
        {
          uint64_t v90 = *(void **)(v84 + 344);
          uint64_t v91 = (void *)WTF::fastMalloc((WTF *)(8 * v89));
          *(_DWORD *)(v84 + 352) = v89;
          *(void *)(v84 + 344) = v91;
          memcpy(v91, v90, 8 * v86);
          if (v90)
          {
            if (*(void **)(v84 + 344) == v90)
            {
              *(void *)(v84 + 344) = 0;
              *(_DWORD *)(v84 + 352) = 0;
            }
            WTF::fastFree((WTF *)v90, v92);
          }
          unint64_t v86 = *(unsigned int *)(v84 + 356);
          uint64_t v93 = (void *)(*(void *)(v84 + 344) + 8 * v86);
          goto LABEL_125;
        }
        __break(0xC471u);
      }
      else
      {
        __break(0xC471u);
      }
      JUMPOUT(0x1825727E0);
    default:
      goto LABEL_10;
  }
  return result;
}

WTF *WGSL::RewriteGlobalVariables::storeInitialValue(WGSL::AST::Expression &,WTF::ReferenceWrapperVector<WGSL::AST::Statement,0ul> &,unsigned int,BOOL)::$_0::operator()(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*(void *)(*a1 + 40) + 312);
  long long v36 = 0uLL;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((void *)&v33 + 1) = 0;
  uint64_t v34 = 0;
  *(void *)&long long v33 = off_1ECABC030;
  uint64_t v4 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>(v3, &v36, (uint64_t)&v33);
  uint64_t v5 = v35;
  *(void *)&long long v33 = off_1ECABC030;
  uint64_t v35 = 0;
  if (v5)
  {
    if (*v5 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v5 -= 2;
    }
  }
  v4[3] = *(void *)(a1[1] + 24);
  uint64_t v6 = (void *)(*(void *)(v2 + 40) + 312);
  long long v33 = 0uLL;
  long long v36 = 0uLL;
  int v8 = WGSL::AST::Builder::construct<WGSL::AST::CallExpression,WGSL::SourceSpan,WGSL::AST::IdentifierExpression &,WTF::ReferenceWrapperVector<WGSL::AST::Expression,0ul>,void>(v6, &v33, (uint64_t)v4, (uint64_t *)&v36);
  uint64_t result = (WTF *)v36;
  if ((void)v36)
  {
    *(void *)&long long v36 = 0;
    DWORD2(v36) = 0;
    uint64_t result = (WTF *)WTF::fastFree(result, v7);
  }
  uint64_t v10 = a1[1];
  v8[3] = *(void *)(v10 + 24);
  *((unsigned char *)v8 + 88) = 1;
  *(void *)(v10 + 24) = 0;
  uint64_t v11 = *(void *)(v2 + 40);
  unint64_t v12 = *(void **)(v11 + 312);
  if (*(void *)(v11 + 320) - (void)v12 <= 0x27uLL)
  {
    uint64_t v23 = WTF::fastMalloc((WTF *)0x4000);
    *(void *)&long long v33 = v23;
    uint64_t v25 = *(unsigned int *)(v11 + 340);
    if (v25 == *(_DWORD *)(v11 + 336))
    {
      unint64_t v26 = WTF::Vector<WTF::MallocPtr<unsigned char,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11 + 328, v25 + 1, (unint64_t)&v33);
      uint64_t v25 = *(unsigned int *)(v11 + 340);
      uint64_t v27 = *(void *)(v11 + 328);
      uint64_t v28 = *(void *)v26;
      *(void *)unint64_t v26 = 0;
      *(void *)(v27 + 8 * v25) = v28;
      char v29 = (WTF *)v33;
    }
    else
    {
      uint64_t v30 = v23;
      char v29 = 0;
      uint64_t v31 = *(void *)(v11 + 328);
      *(void *)&long long v33 = 0;
      *(void *)(v31 + 8 * v25) = v30;
    }
    *(_DWORD *)(v11 + 340) = v25 + 1;
    uint64_t result = (WTF *)WTF::fastFree(v29, v24);
    uint64_t v32 = *(unsigned int *)(v11 + 340);
    if (!v32) {
      goto LABEL_31;
    }
    unint64_t v12 = *(void **)(*(void *)(v11 + 328) + 8 * v32 - 8);
    *(void *)(v11 + 312) = v12;
    *(void *)(v11 + 320) = v12 + 2048;
  }
  *unint64_t v12 = &unk_1ECABC930;
  v12[1] = 0;
  v12[2] = 0;
  v12[3] = v10;
  v12[4] = v8;
  *(void *)(v11 + 312) += 40;
  unint64_t v13 = *(unsigned int *)(v11 + 356);
  if (v13 != *(_DWORD *)(v11 + 352))
  {
    uint64_t v20 = (void *)(*(void *)(v11 + 344) + 8 * v13);
    goto LABEL_22;
  }
  unint64_t v14 = v13 + (v13 >> 2);
  if (v14 >= 0x10) {
    unint64_t v15 = v14 + 1;
  }
  else {
    unint64_t v15 = 16;
  }
  if (v15 <= v13 + 1) {
    unint64_t v16 = v13 + 1;
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16 >> 29)
  {
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x182572B94);
  }
  uint64_t v17 = *(void **)(v11 + 344);
  uint64_t v18 = (void *)WTF::fastMalloc((WTF *)(8 * v16));
  *(_DWORD *)(v11 + 352) = v16;
  *(void *)(v11 + 344) = v18;
  uint64_t result = (WTF *)memcpy(v18, v17, 8 * v13);
  if (v17)
  {
    if (*(void **)(v11 + 344) == v17)
    {
      *(void *)(v11 + 344) = 0;
      *(_DWORD *)(v11 + 352) = 0;
    }
    uint64_t result = (WTF *)WTF::fastFree((WTF *)v17, v19);
  }
  unint64_t v13 = *(unsigned int *)(v11 + 356);
  uint64_t v20 = (void *)(*(void *)(v11 + 344) + 8 * v13);
LABEL_22:
  *uint64_t v20 = v12;
  *(_DWORD *)(v11 + 356) = v13 + 1;
  uint64_t v21 = a1[2];
  *(void *)&long long v33 = v12;
  uint64_t v22 = *(unsigned int *)(v21 + 12);
  if (v22 == *(_DWORD *)(v21 + 8))
  {
    uint64_t result = (WTF *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v22 + 1, (unint64_t)&v33);
    *(void *)(*(void *)v21 + 8 * *(unsigned int *)(v21 + 12)) = *(void *)result;
  }
  else
  {
    *(void *)(*(void *)v21 + 8 * v22) = v12;
  }
  ++*(_DWORD *)(v21 + 12);
  return result;
}

WTF *WTF::HashMap<WTF::String,WGSL::AST::Variable *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::add<WGSL::AST::Variable *&>(uint64_t a1, uint64_t *a2, const WTF::StringImpl **a3, void *a4)
{
  uint64_t v8 = *a2;
  if (!*a2)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::AST::Variable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::AST::Variable *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::AST::Variable *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0);
    uint64_t v8 = *a2;
    if (!*a2)
    {
      int v9 = 0;
      uint64_t v10 = *a3;
      unsigned int v11 = *((_DWORD *)*a3 + 4);
      if (v11 >= 0x100) {
        goto LABEL_4;
      }
LABEL_6:
      unsigned int v12 = WTF::StringImpl::hashSlowCase(v10);
      goto LABEL_7;
    }
  }
  int v9 = *(_DWORD *)(v8 - 8);
  uint64_t v10 = *a3;
  unsigned int v11 = *((_DWORD *)*a3 + 4);
  if (v11 < 0x100) {
    goto LABEL_6;
  }
LABEL_4:
  unsigned int v12 = v11 >> 8;
LABEL_7:
  unint64_t v13 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v15 = v12 & v9;
    unint64_t v16 = (WTF *)(v8 + 16 * (v12 & v9));
    uint64_t result = *(WTF **)v16;
    if (*(void *)v16 == -1)
    {
      unint64_t v13 = (WTF *)(v8 + 16 * v15);
      goto LABEL_9;
    }
    if (!result)
    {
      if (v13)
      {
        uint64_t result = 0;
        *(void *)unint64_t v13 = 0;
        *((void *)v13 + 1) = 0;
        --*(_DWORD *)(*a2 - 16);
        unint64_t v16 = v13;
      }
      uint64_t v20 = *a3;
      if (*a3) {
        *(_DWORD *)v20 += 2;
      }
      *(void *)unint64_t v16 = v20;
      *((void *)v16 + 1) = *a4;
      if (*a2)
      {
        ++*(_DWORD *)(*a2 - 12);
        uint64_t v21 = *a2;
        if (*a2) {
          goto LABEL_21;
        }
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        uint64_t v21 = *a2;
        if (*a2)
        {
LABEL_21:
          uint64_t v22 = (*(_DWORD *)(v21 - 16) + *(_DWORD *)(v21 - 12));
          unint64_t v23 = *(unsigned int *)(v21 - 4);
          if (v23 <= 0x400) {
            goto LABEL_22;
          }
          goto LABEL_30;
        }
      }
      uint64_t v22 = *(unsigned int *)(v21 - 16);
      unint64_t v23 = *(unsigned int *)(v21 - 4);
      if (v23 <= 0x400)
      {
LABEL_22:
        if (3 * v23 > 4 * v22)
        {
LABEL_33:
          uint64_t v25 = v21 + 16 * v23;
          char v24 = 1;
          goto LABEL_34;
        }
        if (!v23)
        {
          uint64_t result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::AST::Variable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::AST::Variable *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::AST::Variable *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, (WTF::StringImpl **)v16);
          unint64_t v16 = result;
          uint64_t v21 = *a2;
          if (!*a2)
          {
LABEL_25:
            unint64_t v23 = 0;
            goto LABEL_33;
          }
LABEL_32:
          unint64_t v23 = *(unsigned int *)(v21 - 4);
          goto LABEL_33;
        }
LABEL_31:
        uint64_t result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::AST::Variable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::AST::Variable *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::AST::Variable *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v23 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v23)), (WTF::StringImpl **)v16);
        unint64_t v16 = result;
        uint64_t v21 = *a2;
        if (!*a2) {
          goto LABEL_25;
        }
        goto LABEL_32;
      }
LABEL_30:
      if (v23 > 2 * v22) {
        goto LABEL_33;
      }
      goto LABEL_31;
    }
    uint64_t result = (WTF *)WTF::equal(result, *a3, (const WTF::StringImpl *)a3);
    if (result) {
      break;
    }
LABEL_9:
    unsigned int v12 = i + v15;
  }
  uint64_t v18 = *a2;
  if (*a2) {
    uint64_t v19 = *(unsigned int *)(v18 - 4);
  }
  else {
    uint64_t v19 = 0;
  }
  char v24 = 0;
  uint64_t v25 = v18 + 16 * v19;
LABEL_34:
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v25;
  *(unsigned char *)(a1 + 16) = v24;
  return result;
}

void WGSL::RewriteGlobalVariables::~RewriteGlobalVariables(WGSL::RewriteGlobalVariables *this, void *a2)
{
  WGSL::RewriteGlobalVariables::~RewriteGlobalVariables(this, a2);
  JUMPOUT(0x18530AFF0);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD **v15;
  WTF *v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  WTF **v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD **v27;
  _DWORD *v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD **v33;
  _DWORD *v34;
  _DWORD *v35;

  *(void *)this = &unk_1ECABCBE8;
  uint64_t v3 = *((void *)this + 31);
  if (v3) {
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v4 = *((void *)this + 30);
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  uint64_t v5 = *((void *)this + 26);
  if (v5) {
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  uint64_t v6 = *((void *)this + 22);
  if (v6) {
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  unint64_t v7 = (WTF *)*((void *)this + 20);
  if (v7)
  {
    *((void *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree(v7, a2);
  }
  uint64_t v8 = *((void *)this + 17);
  if (v8) {
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
  int v9 = *((void *)this + 15);
  if (v9) {
    WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::deallocateTable(v9, a2);
  }
  uint64_t v10 = *((void *)this + 14);
  if (v10) {
    WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::deallocateTable(v10, a2);
  }
  unsigned int v11 = (WTF *)*((void *)this + 12);
  while (v11)
  {
    unint64_t v16 = v11;
    unsigned int v11 = (WTF *)*((void *)v11 + 2);
    uint64_t v17 = *(_DWORD **)v16;
    *(void *)unint64_t v16 = 0;
    if (v17)
    {
      if (*v17 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v17 -= 2;
      }
    }
    WTF::fastFree(v16, a2);
  }
  unsigned int v12 = *((void *)this + 11);
  if (v12) {
    WTF::fastFree((WTF *)(v12 - 16), a2);
  }
  unint64_t v13 = *((void *)this + 10);
  if (v13)
  {
    unint64_t v14 = *(unsigned int *)(v13 - 4);
    if (v14)
    {
      unsigned int v15 = (_DWORD **)*((void *)this + 10);
      do
      {
        uint64_t v18 = *v15;
        if (*v15 != (_DWORD *)-1)
        {
          *unsigned int v15 = 0;
          if (v18)
          {
            if (*v18 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v18 -= 2;
            }
          }
        }
        v15 += 2;
        --v14;
      }
      while (v14);
    }
    WTF::fastFree((WTF *)(v13 - 16), a2);
  }
  uint64_t v19 = *((void *)this + 9);
  if (v19) {
    WTF::fastFree((WTF *)(v19 - 16), a2);
  }
  uint64_t v20 = *((void *)this + 8);
  if (v20)
  {
    uint64_t v21 = *(unsigned int *)(v20 - 4);
    if (v21)
    {
      for (int i = 0; i != v21; ++i)
      {
        if (*(_DWORD *)(v20 + 24 * i) != -2)
        {
          unint64_t v23 = v20 + 24 * i;
          char v24 = (WTF **)(v23 + 8);
          uint64_t v25 = *(unsigned int *)(v23 + 20);
          if (v25)
          {
            unint64_t v26 = 16 * v25;
            uint64_t v27 = (_DWORD **)((char *)*v24 + 8);
            do
            {
              uint64_t v28 = *v27;
              WTF *v27 = 0;
              if (v28)
              {
                if (*v28 == 2) {
                  WTF::StringImpl::destroy();
                }
                else {
                  *v28 -= 2;
                }
              }
              v27 += 2;
              v26 -= 16;
            }
            while (v26);
          }
          char v29 = *v24;
          if (*v24)
          {
            *char v24 = 0;
            *(_DWORD *)(v20 + 24 * i + 16) = 0;
            WTF::fastFree(v29, a2);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v20 - 16), a2);
  }
  uint64_t v30 = *((void *)this + 7);
  if (v30) {
    WTF::fastFree((WTF *)(v30 - 16), a2);
  }
  uint64_t v31 = *((void *)this + 6);
  if (v31)
  {
    uint64_t v32 = *(unsigned int *)(v31 - 4);
    if (v32)
    {
      long long v33 = (_DWORD **)*((void *)this + 6);
      do
      {
        uint64_t v34 = *v33;
        if (*v33 != (_DWORD *)-1)
        {
          *long long v33 = 0;
          if (v34)
          {
            if (*v34 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v34 -= 2;
            }
          }
        }
        v33 += 4;
        --v32;
      }
      while (v32);
    }
    WTF::fastFree((WTF *)(v31 - 16), a2);
  }
  *(void *)this = &unk_1ECABB740;
  if (*((unsigned char *)this + 32))
  {
    uint64_t v35 = (_DWORD *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v35)
    {
      if (*v35 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v35 -= 2;
      }
    }
  }
}

void std::__function::__func<void WGSL::ShaderModule::append<WGSL::AST::IdentifierExpression &,std::reference_wrapper<WGSL::AST::Expression>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Expression>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WGSL::AST::IdentifierExpression &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::~__func()
{
}

void *std::__function::__func<void WGSL::ShaderModule::append<WGSL::AST::IdentifierExpression &,std::reference_wrapper<WGSL::AST::Expression>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Expression>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WGSL::AST::IdentifierExpression &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1ECABCE30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void WGSL::ShaderModule::append<WGSL::AST::IdentifierExpression &,std::reference_wrapper<WGSL::AST::Expression>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Expression>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WGSL::AST::IdentifierExpression &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECABCE30;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void WGSL::ShaderModule::append<WGSL::AST::IdentifierExpression &,std::reference_wrapper<WGSL::AST::Expression>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Expression>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WGSL::AST::IdentifierExpression &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  int v2 = *(_DWORD *)(v1 + 12);
  if (v2) {
    *(_DWORD *)(v1 + 12) = v2 - 1;
  }
  else {
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionENS5_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1ECABCF80;
  *(void *)(a1 + 80) = off_1ECABC030;
  int v2 = *(_DWORD **)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v2)
  {
    if (*v2 == 2)
    {
      WTF::StringImpl::destroy();
      *(void *)(a1 + 16) = &unk_1ECABBFE0;
      if (!*(unsigned char *)(a1 + 72)) {
        return a1;
      }
      goto LABEL_7;
    }
    *v2 -= 2;
  }
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (!*(unsigned char *)(a1 + 72)) {
    return a1;
  }
LABEL_7:
  uint64_t v4 = *(unsigned int *)(a1 + 64);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1ECABCE68[v4])(&v5, a1 + 48);
  }
  *(_DWORD *)(a1 + 64) = -1;
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionENS5_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1ECABCF80;
  *(void *)(a1 + 80) = off_1ECABC030;
  int v2 = *(_DWORD **)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v2)
  {
    if (*v2 == 2)
    {
      WTF::StringImpl::destroy();
      *(void *)(a1 + 16) = &unk_1ECABBFE0;
      if (!*(unsigned char *)(a1 + 72)) {
        return MEMORY[0x18530AFF0](a1, 0x10F3C40895CAEE9);
      }
      goto LABEL_7;
    }
    *v2 -= 2;
  }
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (!*(unsigned char *)(a1 + 72)) {
    return MEMORY[0x18530AFF0](a1, 0x10F3C40895CAEE9);
  }
LABEL_7:
  uint64_t v3 = *(unsigned int *)(a1 + 64);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_1ECABCE68[v3])(&v5, a1 + 48);
  }
  *(_DWORD *)(a1 + 64) = -1;
  return MEMORY[0x18530AFF0](a1, 0x10F3C40895CAEE9);
}

char *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionENS5_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEv(uint64_t a1)
{
  int v2 = (char *)operator new(0x70uLL);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)int v2 = &unk_1ECABCF80;
  *((void *)v2 + 1) = v4;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((void *)v2 + 2) = &unk_1ECABBFE0;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  v2[48] = 0;
  v2[72] = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    *((_DWORD *)v2 + 16) = -1;
    uint64_t v5 = *(unsigned int *)(a1 + 64);
    if (v5 != -1)
    {
      ((void (*)(char *, char *, uint64_t))off_1ECABCEC0[v5])(&v8, v2 + 48, a1 + 48);
      *((_DWORD *)v3 + 16) = v5;
    }
    v3[72] = 1;
  }
  *((void *)v3 + 2) = off_1ECABBFB8;
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a1 + 88);
  *((void *)v3 + 10) = off_1ECABC030;
  uint64_t v6 = *(_DWORD **)(a1 + 104);
  if (v6) {
    *v6 += 2;
  }
  *((void *)v3 + 13) = v6;
  return v3;
}

uint64_t _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionENS5_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEPNS0_6__baseISJ_EE(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  *(void *)a2 = &unk_1ECABCF80;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = &unk_1ECABC008;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  *(void *)(a2 + 16) = &unk_1ECABBFE0;
  uint64_t v5 = *(void *)(result + 40);
  *(unsigned char *)(a2 + 48) = 0;
  uint64_t v6 = a2 + 48;
  *(void *)(v6 - 8) = v5;
  *(unsigned char *)(v6 + 24) = 0;
  if (*(unsigned char *)(result + 72))
  {
    *(_DWORD *)(a2 + 64) = -1;
    uint64_t v7 = *(unsigned int *)(result + 64);
    if (v7 != -1)
    {
      uint64_t result = ((uint64_t (*)(char *))off_1ECABCEC0[v7])(&v9);
      *(_DWORD *)(a2 + 64) = v7;
    }
    *(unsigned char *)(a2 + 72) = 1;
  }
  *(void *)(a2 + 16) = off_1ECABBFB8;
  *(void *)(a2 + 80) = &unk_1ECABC008;
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(v3 + 88);
  *(void *)(a2 + 80) = off_1ECABC030;
  char v8 = *(_DWORD **)(v3 + 104);
  if (v8) {
    *v8 += 2;
  }
  *(void *)(a2 + 104) = v8;
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionENS5_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7destroyEv(uint64_t a1)
{
  *(void *)(a1 + 80) = off_1ECABC030;
  uint64_t result = *(_DWORD **)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (result)
  {
    if (*result == 2)
    {
      uint64_t result = (_DWORD *)WTF::StringImpl::destroy();
      *(void *)(a1 + 16) = &unk_1ECABBFE0;
      if (!*(unsigned char *)(a1 + 72)) {
        return result;
      }
      goto LABEL_7;
    }
    *result -= 2;
  }
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (!*(unsigned char *)(a1 + 72)) {
    return result;
  }
LABEL_7:
  uint64_t v3 = *(unsigned int *)(a1 + 64);
  if (v3 != -1) {
    uint64_t result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1ECABCE68[v3])(&v4, a1 + 48);
  }
  *(_DWORD *)(a1 + 64) = -1;
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionENS5_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE18destroy_deallocateEv(void *__p)
{
  __p[10] = off_1ECABC030;
  int v2 = (_DWORD *)__p[13];
  __p[13] = 0;
  if (v2)
  {
    if (*v2 == 2)
    {
      WTF::StringImpl::destroy();
      __p[2] = &unk_1ECABBFE0;
      if (!*((unsigned char *)__p + 72)) {
        goto LABEL_5;
      }
      goto LABEL_7;
    }
    *v2 -= 2;
  }
  __p[2] = &unk_1ECABBFE0;
  if (!*((unsigned char *)__p + 72))
  {
LABEL_5:
    operator delete(__p);
    return;
  }
LABEL_7:
  uint64_t v3 = *((unsigned int *)__p + 16);
  if (v3 == -1) {
    goto LABEL_5;
  }
  ((void (*)(char *, void *))off_1ECABCE68[v3])(&v4, __p + 6);
  operator delete(__p);
}

__n128 _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionENS5_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEEclEv(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  char v4 = *(WTF **)(v3 + 72);
  if (v4)
  {
    *(void *)(v3 + 72) = 0;
    *(_DWORD *)(v3 + 80) = 0;
    WTF::fastFree(v4, a2);
  }
  *(void *)uint64_t v3 = &unk_1ECABBFE0;
  if (*(unsigned char *)(v3 + 56))
  {
    uint64_t v5 = *(unsigned int *)(v3 + 48);
    if (v5 != -1) {
      ((void (*)(char *, uint64_t))off_1ECABCE68[v5])(&v10, v3 + 32);
    }
    *(_DWORD *)(v3 + 48) = -1;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)uint64_t v6 = &unk_1ECABC008;
  *(_OWORD *)(v6 + 8) = *(_OWORD *)(a1 + 24);
  *(void *)uint64_t v6 = &unk_1ECABBFE0;
  *(void *)(v6 + 24) = *(void *)(a1 + 40);
  *(unsigned char *)(v6 + 32) = 0;
  *(unsigned char *)(v6 + 56) = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    *(_DWORD *)(v6 + 48) = -1;
    uint64_t v7 = *(unsigned int *)(a1 + 64);
    if (v7 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1ECABCF18[v7])(&v11, v6 + 32, a1 + 48);
      *(_DWORD *)(v6 + 48) = v7;
    }
    *(unsigned char *)(v6 + 56) = 1;
  }
  *(void *)uint64_t v6 = off_1ECABBFB8;
  *(void *)(v6 + 64) = &unk_1ECABC008;
  __n128 result = *(__n128 *)(a1 + 88);
  *(__n128 *)(v6 + 72) = result;
  *(void *)(v6 + 64) = off_1ECABC030;
  uint64_t v9 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  *(void *)(v6 + 88) = v9;
  return result;
}

uint64_t WGSL::AST::CallExpression::CallExpression(uint64_t this, const WGSL::AST::CallExpression *a2)
{
  uint64_t v3 = this;
  *(void *)this = &unk_1ECABC008;
  *(_OWORD *)(this + 8) = *(_OWORD *)((char *)a2 + 8);
  *(void *)this = &unk_1ECABBFE0;
  *(void *)(this + 24) = *((void *)a2 + 3);
  *(unsigned char *)(this + 32) = 0;
  *(unsigned char *)(this + 56) = 0;
  if (*((unsigned char *)a2 + 56))
  {
    *(_DWORD *)(this + 48) = -1;
    uint64_t v4 = *((unsigned int *)a2 + 12);
    if (v4 != -1)
    {
      this = ((uint64_t (*)(char *, uint64_t, char *))off_1ECABCEC0[v4])(&v20, this + 32, (char *)a2 + 32);
      *(_DWORD *)(v3 + 48) = v4;
    }
    *(unsigned char *)(v3 + 56) = 1;
  }
  *(void *)uint64_t v3 = &unk_1ECABC058;
  *(void *)(v3 + 64) = *((void *)a2 + 8);
  uint64_t v5 = *((unsigned int *)a2 + 21);
  *(void *)(v3 + 72) = 0;
  *(void *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 84) = v5;
  if (!v5) {
    goto LABEL_17;
  }
  if (!(v5 >> 29))
  {
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v3 + 80) = v5;
    *(void *)(v3 + 72) = v6;
    uint64_t v7 = *((unsigned int *)a2 + 21);
    if (v7)
    {
      uint64_t v8 = *((void *)a2 + 9);
      unint64_t v9 = (v7 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v9 < 3)
      {
        char v10 = (uint64_t *)*((void *)a2 + 9);
      }
      else
      {
        char v10 = (uint64_t *)*((void *)a2 + 9);
        if ((unint64_t)v6 - v8 >= 0x20)
        {
          unint64_t v11 = v9 + 1;
          uint64_t v12 = v11 & 0x3FFFFFFFFFFFFFFCLL;
          unint64_t v13 = &v6[v12];
          char v10 = (uint64_t *)(v8 + v12 * 8);
          unint64_t v14 = (long long *)(v8 + 16);
          unsigned int v15 = v6 + 2;
          uint64_t v16 = v11 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v17 = *v14;
            *(v15 - 1) = *(v14 - 1);
            *unsigned int v15 = v17;
            v14 += 2;
            v15 += 2;
            v16 -= 4;
          }
          while (v16);
          uint64_t v6 = v13;
          if (v11 == (v11 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_17;
          }
        }
      }
      uint64_t v18 = (uint64_t *)(v8 + 8 * v7);
      do
      {
        uint64_t v19 = *v10++;
        *v6++ = v19;
      }
      while (v10 != v18);
    }
LABEL_17:
    *(_WORD *)(v3 + 88) = *((_WORD *)a2 + 44);
    return v3;
  }
  __break(0xC471u);
  return this;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21FieldAccessExpressionENS5_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1ECABCFC8;
  *(void *)(a1 + 120) = off_1ECABC030;
  int v2 = *(_DWORD **)(a1 + 144);
  *(void *)(a1 + 144) = 0;
  if (!v2)
  {
LABEL_4:
    *(void *)(a1 + 88) = off_1ECABC030;
    uint64_t v3 = *(_DWORD **)(a1 + 112);
    *(void *)(a1 + 112) = 0;
    if (!v3) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  if (*v2 != 2)
  {
    *v2 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy();
  *(void *)(a1 + 88) = off_1ECABC030;
  uint64_t v3 = *(_DWORD **)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (!v3) {
    goto LABEL_9;
  }
LABEL_7:
  if (*v3 == 2)
  {
    WTF::StringImpl::destroy();
    *(void *)(a1 + 16) = &unk_1ECABBFE0;
    if (!*(unsigned char *)(a1 + 72)) {
      return a1;
    }
    goto LABEL_12;
  }
  *v3 -= 2;
LABEL_9:
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (!*(unsigned char *)(a1 + 72)) {
    return a1;
  }
LABEL_12:
  uint64_t v5 = *(unsigned int *)(a1 + 64);
  if (v5 != -1) {
    ((void (*)(char *, uint64_t))off_1ECABCE68[v5])(&v6, a1 + 48);
  }
  *(_DWORD *)(a1 + 64) = -1;
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21FieldAccessExpressionENS5_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1ECABCFC8;
  *(void *)(a1 + 120) = off_1ECABC030;
  int v2 = *(_DWORD **)(a1 + 144);
  *(void *)(a1 + 144) = 0;
  if (!v2)
  {
LABEL_4:
    *(void *)(a1 + 88) = off_1ECABC030;
    uint64_t v3 = *(_DWORD **)(a1 + 112);
    *(void *)(a1 + 112) = 0;
    if (!v3) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  if (*v2 != 2)
  {
    *v2 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy();
  *(void *)(a1 + 88) = off_1ECABC030;
  uint64_t v3 = *(_DWORD **)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (!v3) {
    goto LABEL_9;
  }
LABEL_7:
  if (*v3 == 2)
  {
    WTF::StringImpl::destroy();
    *(void *)(a1 + 16) = &unk_1ECABBFE0;
    if (!*(unsigned char *)(a1 + 72)) {
      return MEMORY[0x18530AFF0](a1, 0x10F3C4017795E29);
    }
    goto LABEL_12;
  }
  *v3 -= 2;
LABEL_9:
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (!*(unsigned char *)(a1 + 72)) {
    return MEMORY[0x18530AFF0](a1, 0x10F3C4017795E29);
  }
LABEL_12:
  uint64_t v4 = *(unsigned int *)(a1 + 64);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1ECABCE68[v4])(&v6, a1 + 48);
  }
  *(_DWORD *)(a1 + 64) = -1;
  return MEMORY[0x18530AFF0](a1, 0x10F3C4017795E29);
}

void *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21FieldAccessExpressionENS5_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  int v2 = operator new(0x98uLL);
  *int v2 = &unk_1ECABCFC8;
  _ZNSt3__122__compressed_pair_elemIZN4WGSL12ShaderModule7replaceINS1_3AST21FieldAccessExpressionENS4_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS4_10ExpressionEEEvE4typeERS8_RS9_EUlvE_Li0ELb0EEC2B8sn180100IJRKSF_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21FieldAccessExpressionENS5_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEPNS0_6__baseISJ_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1ECABCFC8;
  return _ZNSt3__122__compressed_pair_elemIZN4WGSL12ShaderModule7replaceINS1_3AST21FieldAccessExpressionENS4_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS4_10ExpressionEEEvE4typeERS8_RS9_EUlvE_Li0ELb0EEC2B8sn180100IJRKSF_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE((uint64_t)(a2 + 1), a1 + 8);
}

_DWORD *_ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21FieldAccessExpressionENS5_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7destroyEv(uint64_t a1)
{
  *(void *)(a1 + 120) = off_1ECABC030;
  int v2 = *(_DWORD **)(a1 + 144);
  *(void *)(a1 + 144) = 0;
  if (!v2)
  {
LABEL_4:
    *(void *)(a1 + 88) = off_1ECABC030;
    __n128 result = *(_DWORD **)(a1 + 112);
    *(void *)(a1 + 112) = 0;
    if (!result) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  if (*v2 != 2)
  {
    *v2 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy();
  *(void *)(a1 + 88) = off_1ECABC030;
  __n128 result = *(_DWORD **)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (!result) {
    goto LABEL_9;
  }
LABEL_7:
  if (*result == 2)
  {
    __n128 result = (_DWORD *)WTF::StringImpl::destroy();
    *(void *)(a1 + 16) = &unk_1ECABBFE0;
    if (!*(unsigned char *)(a1 + 72)) {
      return result;
    }
    goto LABEL_12;
  }
  *result -= 2;
LABEL_9:
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (!*(unsigned char *)(a1 + 72)) {
    return result;
  }
LABEL_12:
  uint64_t v4 = *(unsigned int *)(a1 + 64);
  if (v4 != -1) {
    __n128 result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1ECABCE68[v4])(&v5, a1 + 48);
  }
  *(_DWORD *)(a1 + 64) = -1;
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21FieldAccessExpressionENS5_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE18destroy_deallocateEv(void *__p)
{
  __p[15] = off_1ECABC030;
  int v2 = (_DWORD *)__p[18];
  __p[18] = 0;
  if (!v2)
  {
LABEL_4:
    __p[11] = off_1ECABC030;
    uint64_t v3 = (_DWORD *)__p[14];
    __p[14] = 0;
    if (!v3) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  if (*v2 != 2)
  {
    *v2 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy();
  __p[11] = off_1ECABC030;
  uint64_t v3 = (_DWORD *)__p[14];
  __p[14] = 0;
  if (!v3) {
    goto LABEL_9;
  }
LABEL_7:
  if (*v3 == 2)
  {
    WTF::StringImpl::destroy();
    __p[2] = &unk_1ECABBFE0;
    if (!*((unsigned char *)__p + 72)) {
      goto LABEL_10;
    }
    goto LABEL_12;
  }
  *v3 -= 2;
LABEL_9:
  __p[2] = &unk_1ECABBFE0;
  if (!*((unsigned char *)__p + 72))
  {
LABEL_10:
    operator delete(__p);
    return;
  }
LABEL_12:
  uint64_t v4 = *((unsigned int *)__p + 16);
  if (v4 == -1) {
    goto LABEL_10;
  }
  ((void (*)(char *, void *))off_1ECABCE68[v4])(&v5, __p + 6);
  operator delete(__p);
}

__n128 _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21FieldAccessExpressionENS5_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEEclEv(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(WTF **)(v3 + 72);
  if (v4)
  {
    *(void *)(v3 + 72) = 0;
    *(_DWORD *)(v3 + 80) = 0;
    WTF::fastFree(v4, a2);
  }
  *(void *)uint64_t v3 = &unk_1ECABBFE0;
  if (*(unsigned char *)(v3 + 56))
  {
    uint64_t v5 = *(unsigned int *)(v3 + 48);
    if (v5 != -1) {
      ((void (*)(char *, uint64_t))off_1ECABCE68[v5])(&v11, v3 + 32);
    }
    *(_DWORD *)(v3 + 48) = -1;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)uint64_t v6 = &unk_1ECABC008;
  *(_OWORD *)(v6 + 8) = *(_OWORD *)(a1 + 24);
  *(void *)uint64_t v6 = &unk_1ECABBFE0;
  *(void *)(v6 + 24) = *(void *)(a1 + 40);
  *(unsigned char *)(v6 + 32) = 0;
  *(unsigned char *)(v6 + 56) = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    *(_DWORD *)(v6 + 48) = -1;
    uint64_t v7 = *(unsigned int *)(a1 + 64);
    if (v7 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1ECABCF18[v7])(&v12, v6 + 32, a1 + 48);
      *(_DWORD *)(v6 + 48) = v7;
    }
    *(unsigned char *)(v6 + 56) = 1;
  }
  *(void *)uint64_t v6 = off_1ECABC8B0;
  *(void *)(v6 + 64) = *(void *)(a1 + 80);
  *(void *)(v6 + 72) = &unk_1ECABC008;
  *(_OWORD *)(v6 + 80) = *(_OWORD *)(a1 + 96);
  *(void *)(v6 + 72) = off_1ECABC030;
  uint64_t v8 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  *(void *)(v6 + 96) = v8;
  *(void *)(v6 + 104) = &unk_1ECABC008;
  __n128 result = *(__n128 *)(a1 + 128);
  *(__n128 *)(v6 + 112) = result;
  *(void *)(v6 + 104) = off_1ECABC030;
  uint64_t v10 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = 0;
  *(void *)(v6 + 128) = v10;
  return result;
}

uint64_t _ZNSt3__122__compressed_pair_elemIZN4WGSL12ShaderModule7replaceINS1_3AST21FieldAccessExpressionENS4_14CallExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS4_10ExpressionEEEvE4typeERS8_RS9_EUlvE_Li0ELb0EEC2B8sn180100IJRKSF_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = &unk_1ECABC008;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 8) = &unk_1ECABBFE0;
  uint64_t v4 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 64) = 0;
  if (*(unsigned char *)(a2 + 64))
  {
    *(_DWORD *)(a1 + 56) = -1;
    uint64_t v5 = *(unsigned int *)(a2 + 56);
    if (v5 != -1)
    {
      ((void (*)(char *))off_1ECABCEC0[v5])(&v9);
      *(_DWORD *)(a1 + 56) = v5;
    }
    *(unsigned char *)(a1 + 64) = 1;
  }
  *(void *)(a1 + 8) = off_1ECABC8B0;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = &unk_1ECABC008;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 80) = off_1ECABC030;
  uint64_t v6 = *(_DWORD **)(a2 + 104);
  if (v6) {
    *v6 += 2;
  }
  *(void *)(a1 + 104) = v6;
  *(void *)(a1 + 112) = &unk_1ECABC008;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 112) = off_1ECABC030;
  uint64_t v7 = *(_DWORD **)(a2 + 136);
  if (v7) {
    *v7 += 2;
  }
  *(void *)(a1 + 136) = v7;
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21IndexAccessExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1ECABD010;
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 64);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_1ECABCE68[v2])(&v4, a1 + 48);
    }
    *(_DWORD *)(a1 + 64) = -1;
  }
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21IndexAccessExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1ECABD010;
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 64);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_1ECABCE68[v2])(&v4, a1 + 48);
    }
    *(_DWORD *)(a1 + 64) = -1;
  }
  return MEMORY[0x18530AFF0](a1, 0x10F3C403B4B6AF4);
}

char *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21IndexAccessExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x60uLL);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v2 = &unk_1ECABD010;
  *((void *)v2 + 1) = v4;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((void *)v2 + 2) = &unk_1ECABBFE0;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  v2[48] = 0;
  v2[72] = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    *((_DWORD *)v2 + 16) = -1;
    uint64_t v5 = *(unsigned int *)(a1 + 64);
    if (v5 != -1)
    {
      ((void (*)(char *, char *, uint64_t))off_1ECABCEC0[v5])(&v7, v2 + 48, a1 + 48);
      *((_DWORD *)v3 + 16) = v5;
    }
    v3[72] = 1;
  }
  *((void *)v3 + 2) = off_1ECABC180;
  *((_OWORD *)v3 + 5) = *(_OWORD *)(a1 + 80);
  return v3;
}

__n128 _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21IndexAccessExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEPNS0_6__baseISJ_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_1ECABD010;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = &unk_1ECABC008;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 16) = &unk_1ECABBFE0;
  uint64_t v5 = *(void *)(a1 + 40);
  *(unsigned char *)(a2 + 48) = 0;
  uint64_t v6 = a2 + 48;
  *(void *)(v6 - 8) = v5;
  *(unsigned char *)(v6 + 24) = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    *(_DWORD *)(a2 + 64) = -1;
    uint64_t v7 = *(unsigned int *)(a1 + 64);
    if (v7 != -1)
    {
      ((void (*)(char *))off_1ECABCEC0[v7])(&v9);
      *(_DWORD *)(a2 + 64) = v7;
    }
    *(unsigned char *)(a2 + 72) = 1;
  }
  *(void *)(a2 + 16) = off_1ECABC180;
  __n128 result = *(__n128 *)(a1 + 80);
  *(__n128 *)(a2 + 80) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21IndexAccessExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7destroyEv(uint64_t result)
{
  *(void *)(result + 16) = &unk_1ECABBFE0;
  if (*(unsigned char *)(result + 72))
  {
    uint64_t v1 = result;
    uint64_t v2 = *(unsigned int *)(result + 64);
    if (v2 != -1) {
      __n128 result = ((uint64_t (*)(char *, uint64_t))off_1ECABCE68[v2])(&v3, result + 48);
    }
    *(_DWORD *)(v1 + 64) = -1;
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21IndexAccessExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE18destroy_deallocateEv(void *__p)
{
  __p[2] = &unk_1ECABBFE0;
  if (*((unsigned char *)__p + 72))
  {
    uint64_t v2 = *((unsigned int *)__p + 16);
    if (v2 != -1) {
      ((void (*)(char *, void *))off_1ECABCE68[v2])(&v3, __p + 6);
    }
  }
  operator delete(__p);
}

__n128 _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST21IndexAccessExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEEclEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)uint64_t v2 = &unk_1ECABBFE0;
  if (*(unsigned char *)(v2 + 56))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 48);
    if (v3 == -1)
    {
      uint64_t v4 = v2;
    }
    else
    {
      ((void (*)(char *, uint64_t))off_1ECABCE68[v3])(&v7, v2 + 32);
      uint64_t v4 = *(void *)(a1 + 8);
    }
    *(_DWORD *)(v2 + 48) = -1;
    uint64_t v2 = v4;
  }
  *(void *)uint64_t v2 = &unk_1ECABC008;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 24);
  *(void *)uint64_t v2 = &unk_1ECABBFE0;
  *(void *)(v2 + 24) = *(void *)(a1 + 40);
  *(unsigned char *)(v2 + 32) = 0;
  *(unsigned char *)(v2 + 56) = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    *(_DWORD *)(v2 + 48) = -1;
    uint64_t v5 = *(unsigned int *)(a1 + 64);
    if (v5 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1ECABCF18[v5])(&v8, v2 + 32, a1 + 48);
      *(_DWORD *)(v2 + 48) = v5;
    }
    *(unsigned char *)(v2 + 56) = 1;
  }
  *(void *)uint64_t v2 = off_1ECABC180;
  __n128 result = *(__n128 *)(a1 + 80);
  *(__n128 *)(v2 + 64) = result;
  return result;
}

void WGSL::AST::IdentityExpression::~IdentityExpression(WGSL::AST::IdentityExpression *this)
{
  *(void *)this = &unk_1ECABBFE0;
  if (*((unsigned char *)this + 56))
  {
    uint64_t v2 = *((unsigned int *)this + 12);
    if (v2 != -1) {
      ((void (*)(char *, char *))off_1ECABCE68[v2])(&v3, (char *)this + 32);
    }
    *((_DWORD *)this + 12) = -1;
  }
}

{
  uint64_t v2;
  char v3;

  *(void *)this = &unk_1ECABBFE0;
  if (*((unsigned char *)this + 56))
  {
    uint64_t v2 = *((unsigned int *)this + 12);
    if (v2 != -1) {
      ((void (*)(char *, char *))off_1ECABCE68[v2])(&v3, (char *)this + 32);
    }
    *((_DWORD *)this + 12) = -1;
  }
  MEMORY[0x18530AFF0](this, 0x10F3C40CABE6EB0);
}

uint64_t WGSL::AST::IdentityExpression::kind(WGSL::AST::IdentityExpression *this)
{
  return 23;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST16BinaryExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1ECABD080;
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 64);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_1ECABCE68[v2])(&v4, a1 + 48);
    }
    *(_DWORD *)(a1 + 64) = -1;
  }
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST16BinaryExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1ECABD080;
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 64);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_1ECABCE68[v2])(&v4, a1 + 48);
    }
    *(_DWORD *)(a1 + 64) = -1;
  }
  return MEMORY[0x18530AFF0](a1, 0x10F3C40818A7305);
}

char *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST16BinaryExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  char v3 = v2;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v2 = &unk_1ECABD080;
  *((void *)v2 + 1) = v4;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((void *)v2 + 2) = &unk_1ECABBFE0;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  v2[48] = 0;
  v2[72] = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    *((_DWORD *)v2 + 16) = -1;
    uint64_t v5 = *(unsigned int *)(a1 + 64);
    if (v5 != -1)
    {
      ((void (*)(char *, char *, uint64_t))off_1ECABCEC0[v5])(&v7, v2 + 48, a1 + 48);
      *((_DWORD *)v3 + 16) = v5;
    }
    v3[72] = 1;
  }
  *((void *)v3 + 2) = off_1ECABC158;
  *((_OWORD *)v3 + 5) = *(_OWORD *)(a1 + 80);
  v3[96] = *(unsigned char *)(a1 + 96);
  return v3;
}

__n128 _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST16BinaryExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEPNS0_6__baseISJ_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_1ECABD080;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = &unk_1ECABC008;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 16) = &unk_1ECABBFE0;
  uint64_t v5 = *(void *)(a1 + 40);
  *(unsigned char *)(a2 + 48) = 0;
  uint64_t v6 = a2 + 48;
  *(void *)(v6 - 8) = v5;
  *(unsigned char *)(v6 + 24) = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    *(_DWORD *)(a2 + 64) = -1;
    uint64_t v7 = *(unsigned int *)(a1 + 64);
    if (v7 != -1)
    {
      ((void (*)(char *))off_1ECABCEC0[v7])(&v9);
      *(_DWORD *)(a2 + 64) = v7;
    }
    *(unsigned char *)(a2 + 72) = 1;
  }
  *(void *)(a2 + 16) = off_1ECABC158;
  __n128 result = *(__n128 *)(a1 + 80);
  *(unsigned char *)(a2 + 96) = *(unsigned char *)(a1 + 96);
  *(__n128 *)(a2 + 80) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST16BinaryExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7destroyEv(uint64_t result)
{
  *(void *)(result + 16) = &unk_1ECABBFE0;
  if (*(unsigned char *)(result + 72))
  {
    uint64_t v1 = result;
    uint64_t v2 = *(unsigned int *)(result + 64);
    if (v2 != -1) {
      __n128 result = ((uint64_t (*)(char *, uint64_t))off_1ECABCE68[v2])(&v3, result + 48);
    }
    *(_DWORD *)(v1 + 64) = -1;
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST16BinaryExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE18destroy_deallocateEv(void *__p)
{
  __p[2] = &unk_1ECABBFE0;
  if (*((unsigned char *)__p + 72))
  {
    uint64_t v2 = *((unsigned int *)__p + 16);
    if (v2 != -1) {
      ((void (*)(char *, void *))off_1ECABCE68[v2])(&v3, __p + 6);
    }
  }
  operator delete(__p);
}

__n128 _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST16BinaryExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEEclEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)uint64_t v2 = &unk_1ECABBFE0;
  if (*(unsigned char *)(v2 + 56))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 48);
    if (v3 == -1)
    {
      uint64_t v4 = v2;
    }
    else
    {
      ((void (*)(char *, uint64_t))off_1ECABCE68[v3])(&v7, v2 + 32);
      uint64_t v4 = *(void *)(a1 + 8);
    }
    *(_DWORD *)(v2 + 48) = -1;
    uint64_t v2 = v4;
  }
  *(void *)uint64_t v2 = &unk_1ECABC008;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 24);
  *(void *)uint64_t v2 = &unk_1ECABBFE0;
  *(void *)(v2 + 24) = *(void *)(a1 + 40);
  *(unsigned char *)(v2 + 32) = 0;
  *(unsigned char *)(v2 + 56) = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    *(_DWORD *)(v2 + 48) = -1;
    uint64_t v5 = *(unsigned int *)(a1 + 64);
    if (v5 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1ECABCF18[v5])(&v8, v2 + 32, a1 + 48);
      *(_DWORD *)(v2 + 48) = v5;
    }
    *(unsigned char *)(v2 + 56) = 1;
  }
  *(void *)uint64_t v2 = off_1ECABC158;
  __n128 result = *(__n128 *)(a1 + 80);
  *(unsigned char *)(v2 + 80) = *(unsigned char *)(a1 + 96);
  *(__n128 *)(v2 + 64) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST15UnaryExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1ECABD0C8;
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 64);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_1ECABCE68[v2])(&v4, a1 + 48);
    }
    *(_DWORD *)(a1 + 64) = -1;
  }
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST15UnaryExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1ECABD0C8;
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 64);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_1ECABCE68[v2])(&v4, a1 + 48);
    }
    *(_DWORD *)(a1 + 64) = -1;
  }
  return MEMORY[0x18530AFF0](a1, 0x10F3C40538DE310);
}

char *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST15UnaryExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x60uLL);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v2 = &unk_1ECABD0C8;
  *((void *)v2 + 1) = v4;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((void *)v2 + 2) = &unk_1ECABBFE0;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  v2[48] = 0;
  v2[72] = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    *((_DWORD *)v2 + 16) = -1;
    uint64_t v5 = *(unsigned int *)(a1 + 64);
    if (v5 != -1)
    {
      ((void (*)(char *, char *, uint64_t))off_1ECABCEC0[v5])(&v7, v2 + 48, a1 + 48);
      *((_DWORD *)v3 + 16) = v5;
    }
    v3[72] = 1;
  }
  *((void *)v3 + 2) = off_1ECABC248;
  *((void *)v3 + 10) = *(void *)(a1 + 80);
  v3[88] = *(unsigned char *)(a1 + 88);
  return v3;
}

uint64_t _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST15UnaryExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEPNS0_6__baseISJ_EE(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  *(void *)a2 = &unk_1ECABD0C8;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = &unk_1ECABC008;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  *(void *)(a2 + 16) = &unk_1ECABBFE0;
  uint64_t v5 = *(void *)(result + 40);
  *(unsigned char *)(a2 + 48) = 0;
  uint64_t v6 = a2 + 48;
  *(void *)(v6 - 8) = v5;
  *(unsigned char *)(v6 + 24) = 0;
  if (*(unsigned char *)(result + 72))
  {
    *(_DWORD *)(a2 + 64) = -1;
    uint64_t v7 = *(unsigned int *)(result + 64);
    if (v7 != -1)
    {
      __n128 result = ((uint64_t (*)(char *))off_1ECABCEC0[v7])(&v9);
      *(_DWORD *)(a2 + 64) = v7;
    }
    *(unsigned char *)(a2 + 72) = 1;
  }
  *(void *)(a2 + 16) = off_1ECABC248;
  uint64_t v8 = *(void *)(v3 + 80);
  *(unsigned char *)(a2 + 88) = *(unsigned char *)(v3 + 88);
  *(void *)(a2 + 80) = v8;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST15UnaryExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7destroyEv(uint64_t result)
{
  *(void *)(result + 16) = &unk_1ECABBFE0;
  if (*(unsigned char *)(result + 72))
  {
    uint64_t v1 = result;
    uint64_t v2 = *(unsigned int *)(result + 64);
    if (v2 != -1) {
      __n128 result = ((uint64_t (*)(char *, uint64_t))off_1ECABCE68[v2])(&v3, result + 48);
    }
    *(_DWORD *)(v1 + 64) = -1;
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST15UnaryExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE18destroy_deallocateEv(void *__p)
{
  __p[2] = &unk_1ECABBFE0;
  if (*((unsigned char *)__p + 72))
  {
    uint64_t v2 = *((unsigned int *)__p + 16);
    if (v2 != -1) {
      ((void (*)(char *, void *))off_1ECABCE68[v2])(&v3, __p + 6);
    }
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST15UnaryExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEEclEv(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 8);
  *(void *)uint64_t v2 = &unk_1ECABBFE0;
  if (*(unsigned char *)(v2 + 56))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 48);
    if (v3 == -1)
    {
      uint64_t v4 = v2;
    }
    else
    {
      __n128 result = ((uint64_t (*)(char *, uint64_t))off_1ECABCE68[v3])(&v7, v2 + 32);
      uint64_t v4 = *(void *)(v1 + 8);
    }
    *(_DWORD *)(v2 + 48) = -1;
    uint64_t v2 = v4;
  }
  *(void *)uint64_t v2 = &unk_1ECABC008;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(v1 + 24);
  *(void *)uint64_t v2 = &unk_1ECABBFE0;
  *(void *)(v2 + 24) = *(void *)(v1 + 40);
  *(unsigned char *)(v2 + 32) = 0;
  *(unsigned char *)(v2 + 56) = 0;
  if (*(unsigned char *)(v1 + 72))
  {
    *(_DWORD *)(v2 + 48) = -1;
    uint64_t v5 = *(unsigned int *)(v1 + 64);
    if (v5 != -1)
    {
      __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1ECABCF18[v5])(&v8, v2 + 32, v1 + 48);
      *(_DWORD *)(v2 + 48) = v5;
    }
    *(unsigned char *)(v2 + 56) = 1;
  }
  *(void *)uint64_t v2 = off_1ECABC248;
  uint64_t v6 = *(void *)(v1 + 80);
  *(unsigned char *)(v2 + 72) = *(unsigned char *)(v1 + 88);
  *(void *)(v2 + 64) = v6;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST14CallExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEED1Ev(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1ECABD110;
  uint64_t v3 = *(WTF **)(a1 + 88);
  if (v3)
  {
    *(void *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v3, a2);
  }
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v4 = *(unsigned int *)(a1 + 64);
    if (v4 != -1) {
      ((void (*)(char *, uint64_t))off_1ECABCE68[v4])(&v6, a1 + 48);
    }
    *(_DWORD *)(a1 + 64) = -1;
  }
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST14CallExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEED0Ev(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1ECABD110;
  uint64_t v3 = *(WTF **)(a1 + 88);
  if (v3)
  {
    *(void *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v3, a2);
  }
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v4 = *(unsigned int *)(a1 + 64);
    if (v4 != -1) {
      ((void (*)(char *, uint64_t))off_1ECABCE68[v4])(&v6, a1 + 48);
    }
    *(_DWORD *)(a1 + 64) = -1;
  }
  return MEMORY[0x18530AFF0](a1, 0x10F3C40E4E4A046);
}

void *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST14CallExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = operator new(0x70uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t v2 = &unk_1ECABD110;
  v2[1] = v3;
  WGSL::AST::CallExpression::CallExpression((uint64_t)(v2 + 2), (const WGSL::AST::CallExpression *)(a1 + 16));
  return v2;
}

uint64_t _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST14CallExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7__cloneEPNS0_6__baseISI_EE(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_1ECABD110;
  a2[1] = v2;
  return WGSL::AST::CallExpression::CallExpression((uint64_t)(a2 + 2), (const WGSL::AST::CallExpression *)(a1 + 16));
}

WTF *_ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST14CallExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7destroyEv(uint64_t a1, void *a2)
{
  __n128 result = *(WTF **)(a1 + 88);
  if (result)
  {
    *(void *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    __n128 result = (WTF *)WTF::fastFree(result, a2);
  }
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v4 = *(unsigned int *)(a1 + 64);
    if (v4 != -1) {
      __n128 result = (WTF *)((uint64_t (*)(char *, uint64_t))off_1ECABCE68[v4])(&v5, a1 + 48);
    }
    *(_DWORD *)(a1 + 64) = -1;
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST14CallExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE18destroy_deallocateEv(void *__p, void *a2)
{
  uint64_t v3 = (WTF *)__p[11];
  if (v3)
  {
    __p[11] = 0;
    *((_DWORD *)__p + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  __p[2] = &unk_1ECABBFE0;
  if (*((unsigned char *)__p + 72))
  {
    uint64_t v4 = *((unsigned int *)__p + 16);
    if (v4 != -1) {
      ((void (*)(char *, void *))off_1ECABCE68[v4])(&v5, __p + 6);
    }
  }
  operator delete(__p);
}

WTF *_ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST14CallExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEEclEv(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  __n128 result = *(WTF **)(v3 + 72);
  if (result)
  {
    *(void *)(v3 + 72) = 0;
    *(_DWORD *)(v3 + 80) = 0;
    __n128 result = (WTF *)WTF::fastFree(result, a2);
  }
  *(void *)uint64_t v3 = &unk_1ECABBFE0;
  if (*(unsigned char *)(v3 + 56))
  {
    uint64_t v5 = *(unsigned int *)(v3 + 48);
    if (v5 != -1) {
      __n128 result = (WTF *)((uint64_t (*)(char *, uint64_t))off_1ECABCE68[v5])(&v10, v3 + 32);
    }
    *(_DWORD *)(v3 + 48) = -1;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)uint64_t v6 = &unk_1ECABC008;
  *(_OWORD *)(v6 + 8) = *(_OWORD *)(a1 + 24);
  *(void *)uint64_t v6 = &unk_1ECABBFE0;
  *(void *)(v6 + 24) = *(void *)(a1 + 40);
  *(unsigned char *)(v6 + 32) = 0;
  *(unsigned char *)(v6 + 56) = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    *(_DWORD *)(v6 + 48) = -1;
    uint64_t v7 = *(unsigned int *)(a1 + 64);
    if (v7 != -1)
    {
      __n128 result = (WTF *)((uint64_t (*)(char *, uint64_t, uint64_t))off_1ECABCF18[v7])(&v11, v6 + 32, a1 + 48);
      *(_DWORD *)(v6 + 48) = v7;
    }
    *(unsigned char *)(v6 + 56) = 1;
  }
  *(void *)uint64_t v6 = &unk_1ECABC058;
  uint64_t v8 = *(void *)(a1 + 80);
  *(void *)(v6 + 72) = 0;
  *(void *)(v6 + 80) = 0;
  *(void *)(v6 + 64) = v8;
  uint64_t v9 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  *(void *)(v6 + 72) = v9;
  LODWORD(v9) = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 96) = 0;
  *(_DWORD *)(v6 + 80) = v9;
  LODWORD(v9) = *(_DWORD *)(a1 + 100);
  *(_DWORD *)(a1 + 100) = 0;
  *(_DWORD *)(v6 + 84) = v9;
  *(_WORD *)(v6 + 88) = *(_WORD *)(a1 + 104);
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST18IdentityExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1ECABD158;
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 64);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_1ECABCE68[v2])(&v4, a1 + 48);
    }
    *(_DWORD *)(a1 + 64) = -1;
  }
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST18IdentityExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1ECABD158;
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 64);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_1ECABCE68[v2])(&v4, a1 + 48);
    }
    *(_DWORD *)(a1 + 64) = -1;
  }
  return MEMORY[0x18530AFF0](a1, 0x10F3C40EEF274EFLL);
}

char *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST18IdentityExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x58uLL);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v2 = &unk_1ECABD158;
  *((void *)v2 + 1) = v4;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((void *)v2 + 2) = &unk_1ECABBFE0;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  v2[48] = 0;
  v2[72] = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    *((_DWORD *)v2 + 16) = -1;
    uint64_t v5 = *(unsigned int *)(a1 + 64);
    if (v5 != -1)
    {
      ((void (*)(char *, char *, uint64_t))off_1ECABCEC0[v5])(&v7, v2 + 48, a1 + 48);
      *((_DWORD *)v3 + 16) = v5;
    }
    v3[72] = 1;
  }
  *((void *)v3 + 2) = off_1ECABD058;
  *((void *)v3 + 10) = *(void *)(a1 + 80);
  return v3;
}

uint64_t _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST18IdentityExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEPNS0_6__baseISJ_EE(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  *(void *)a2 = &unk_1ECABD158;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = &unk_1ECABC008;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  *(void *)(a2 + 16) = &unk_1ECABBFE0;
  uint64_t v5 = *(void *)(result + 40);
  *(unsigned char *)(a2 + 48) = 0;
  uint64_t v6 = a2 + 48;
  *(void *)(v6 - 8) = v5;
  *(unsigned char *)(v6 + 24) = 0;
  if (*(unsigned char *)(result + 72))
  {
    *(_DWORD *)(a2 + 64) = -1;
    uint64_t v7 = *(unsigned int *)(result + 64);
    if (v7 != -1)
    {
      __n128 result = ((uint64_t (*)(char *))off_1ECABCEC0[v7])(&v8);
      *(_DWORD *)(a2 + 64) = v7;
    }
    *(unsigned char *)(a2 + 72) = 1;
  }
  *(void *)(a2 + 16) = off_1ECABD058;
  *(void *)(a2 + 80) = *(void *)(v3 + 80);
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST18IdentityExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7destroyEv(uint64_t result)
{
  *(void *)(result + 16) = &unk_1ECABBFE0;
  if (*(unsigned char *)(result + 72))
  {
    uint64_t v1 = result;
    uint64_t v2 = *(unsigned int *)(result + 64);
    if (v2 != -1) {
      __n128 result = ((uint64_t (*)(char *, uint64_t))off_1ECABCE68[v2])(&v3, result + 48);
    }
    *(_DWORD *)(v1 + 64) = -1;
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST18IdentityExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE18destroy_deallocateEv(void *__p)
{
  __p[2] = &unk_1ECABBFE0;
  if (*((unsigned char *)__p + 72))
  {
    uint64_t v2 = *((unsigned int *)__p + 16);
    if (v2 != -1) {
      ((void (*)(char *, void *))off_1ECABCE68[v2])(&v3, __p + 6);
    }
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST18IdentityExpressionENS5_14CallExpressionEEENS_9enable_ifIXooltstT_stT0_sr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEEclEv(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 8);
  *(void *)uint64_t v2 = &unk_1ECABBFE0;
  if (*(unsigned char *)(v2 + 56))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 48);
    if (v3 == -1)
    {
      uint64_t v4 = v2;
    }
    else
    {
      __n128 result = ((uint64_t (*)(char *, uint64_t))off_1ECABCE68[v3])(&v6, v2 + 32);
      uint64_t v4 = *(void *)(v1 + 8);
    }
    *(_DWORD *)(v2 + 48) = -1;
    uint64_t v2 = v4;
  }
  *(void *)uint64_t v2 = &unk_1ECABC008;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(v1 + 24);
  *(void *)uint64_t v2 = &unk_1ECABBFE0;
  *(void *)(v2 + 24) = *(void *)(v1 + 40);
  *(unsigned char *)(v2 + 32) = 0;
  *(unsigned char *)(v2 + 56) = 0;
  if (*(unsigned char *)(v1 + 72))
  {
    *(_DWORD *)(v2 + 48) = -1;
    uint64_t v5 = *(unsigned int *)(v1 + 64);
    if (v5 != -1)
    {
      __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1ECABCF18[v5])(&v7, v2 + 32, v1 + 48);
      *(_DWORD *)(v2 + 48) = v5;
    }
    *(unsigned char *)(v2 + 56) = 1;
  }
  *(void *)uint64_t v2 = off_1ECABD058;
  *(void *)(v2 + 64) = *(void *)(v1 + 80);
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  unint64_t v10 = v9;
  while (1)
  {
    unint64_t v9 = v10;
    uint64_t v11 = a2 - v10;
    uint64_t v12 = (uint64_t)(a2 - v10) >> 4;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return result;
        case 2:
          unsigned int v110 = *(_DWORD *)(a2 - 16);
          unsigned int v111 = *(_DWORD *)v9;
          if (v110 >= *(_DWORD *)v9) {
            return result;
          }
          *(_DWORD *)unint64_t v9 = v110;
          *(_DWORD *)(a2 - 16) = v111;
          goto LABEL_130;
        case 3:
          LODWORD(v13) = *(_DWORD *)(v9 + 16);
          LODWORD(v86) = *(_DWORD *)v9;
          unsigned int v112 = *(_DWORD *)(a2 - 16);
          if (v13 >= *(_DWORD *)v9)
          {
            if (v112 < v13)
            {
              *(_DWORD *)(v9 + 16) = v112;
              *(_DWORD *)(a2 - 16) = v13;
              uint64_t v178 = *(void *)(v9 + 24);
              *(void *)(v9 + 24) = *(void *)(a2 - 8);
              *(void *)(a2 - 8) = v178;
              unsigned int v179 = *(_DWORD *)(v9 + 16);
              unsigned int v180 = *(_DWORD *)v9;
              if (v179 < *(_DWORD *)v9)
              {
                *(_DWORD *)unint64_t v9 = v179;
                *(_DWORD *)(v9 + 16) = v180;
                uint64_t v124 = *(void *)(v9 + 8);
                uint64_t v120 = *(void *)(v9 + 24);
LABEL_241:
                *(void *)(v9 + 8) = v120;
                *(void *)(v9 + 24) = v124;
              }
            }
          }
          else
          {
            if (v112 >= v13) {
              goto LABEL_260;
            }
            *(_DWORD *)unint64_t v9 = v112;
            *(_DWORD *)(a2 - 16) = v86;
LABEL_130:
            uint64_t v113 = *(void *)(v9 + 8);
            *(void *)(v9 + 8) = *(void *)(a2 - 8);
            *(void *)(a2 - 8) = v113;
          }
          break;
        case 4:
          return (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *>((unsigned int *)v9, (unsigned int *)(v9 + 16), (unsigned int *)(v9 + 32), (unsigned int *)(a2 - 16));
        case 5:
          __n128 result = (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *>((unsigned int *)v9, (unsigned int *)(v9 + 16), (unsigned int *)(v9 + 32), (unsigned int *)(v9 + 48));
          unsigned int v114 = *(_DWORD *)(a2 - 16);
          unsigned int v115 = *(_DWORD *)(v9 + 48);
          if (v114 >= v115) {
            return result;
          }
          *(_DWORD *)(v9 + 48) = v114;
          *(_DWORD *)(a2 - 16) = v115;
          uint64_t v116 = *(void *)(v9 + 56);
          *(void *)(v9 + 56) = *(void *)(a2 - 8);
          *(void *)(a2 - 8) = v116;
          unsigned int v117 = *(_DWORD *)(v9 + 48);
          unsigned int v118 = *(_DWORD *)(v9 + 32);
          if (v117 >= v118) {
            return result;
          }
          *(_DWORD *)(v9 + 32) = v117;
          *(_DWORD *)(v9 + 48) = v118;
          uint64_t v119 = *(void *)(v9 + 40);
          uint64_t v120 = *(void *)(v9 + 56);
          *(void *)(v9 + 40) = v120;
          *(void *)(v9 + 56) = v119;
          unsigned int v121 = *(_DWORD *)(v9 + 16);
          if (v117 >= v121) {
            return result;
          }
          *(_DWORD *)(v9 + 16) = v117;
          *(_DWORD *)(v9 + 32) = v121;
          uint64_t v122 = *(void *)(v9 + 24);
          *(void *)(v9 + 24) = v120;
          *(void *)(v9 + 40) = v122;
          unsigned int v123 = *(_DWORD *)v9;
          if (v117 >= *(_DWORD *)v9) {
            return result;
          }
          *(_DWORD *)unint64_t v9 = v117;
          *(_DWORD *)(v9 + 16) = v123;
          uint64_t v124 = *(void *)(v9 + 8);
          goto LABEL_241;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 383) {
      break;
    }
    if (!a3)
    {
      if (v9 == a2) {
        return result;
      }
      int64_t v139 = (unint64_t)(v12 - 2) >> 1;
      int64_t v140 = v139;
      while (1)
      {
        int64_t v141 = v140;
        if (v139 < v140) {
          goto LABEL_166;
        }
        uint64_t v142 = (2 * v140) | 1;
        unint64_t v143 = v9 + 16 * v142;
        if (2 * v141 + 2 >= v12) {
          break;
        }
        unsigned int v144 = *(_DWORD *)v143;
        unsigned int v145 = *(_DWORD *)(v143 + 16);
        if (*(_DWORD *)v143 <= v145) {
          unsigned int v144 = *(_DWORD *)(v143 + 16);
        }
        if (*(_DWORD *)v143 < v145)
        {
          v143 += 16;
          uint64_t v142 = 2 * v141 + 2;
        }
        unint64_t v146 = v9 + 16 * v141;
        unsigned int v147 = *(_DWORD *)v146;
        if (v144 >= *(_DWORD *)v146) {
          goto LABEL_176;
        }
LABEL_166:
        int64_t v140 = v141 - 1;
        if (!v141)
        {
          uint64_t v155 = (unint64_t)v11 >> 4;
          while (1)
          {
            uint64_t v157 = 0;
            unsigned int v158 = *(_DWORD *)v9;
            uint64_t v159 = *(void *)(v9 + 8);
            *(void *)(v9 + 8) = 0;
            unint64_t v160 = v9;
            do
            {
              unint64_t v161 = v160;
              v160 += 16 * v157 + 16;
              if (2 * v157 + 2 >= v155)
              {
                unsigned int v162 = *(_DWORD *)v160;
                uint64_t v157 = (2 * v157) | 1;
              }
              else
              {
                unsigned int v162 = *(_DWORD *)v160;
                unsigned int v163 = *(_DWORD *)(v160 + 16);
                if (*(_DWORD *)v160 <= v163) {
                  unsigned int v162 = *(_DWORD *)(v160 + 16);
                }
                if (*(_DWORD *)v160 >= v163)
                {
                  uint64_t v157 = (2 * v157) | 1;
                }
                else
                {
                  v160 += 16;
                  uint64_t v157 = 2 * v157 + 2;
                }
              }
              *(_DWORD *)unint64_t v161 = v162;
              uint64_t v164 = *(void *)(v160 + 8);
              *(void *)(v160 + 8) = 0;
              uint64_t v165 = *(_DWORD **)(v161 + 8);
              *(void *)(v161 + 8) = v164;
              if (v165)
              {
                if (*v165 == 2) {
                  WTF::StringImpl::destroy();
                }
                else {
                  *v165 -= 2;
                }
              }
            }
            while (v157 <= (uint64_t)((unint64_t)(v155 - 2) >> 1));
            unint64_t v166 = a2 - 16;
            if (v160 != a2 - 16) {
              break;
            }
            *(_DWORD *)unint64_t v160 = v158;
            __n128 result = *(void *)(v160 + 8);
            *(void *)(v160 + 8) = v159;
            if (result)
            {
LABEL_236:
              if (*(_DWORD *)result == 2) {
                __n128 result = WTF::StringImpl::destroy();
              }
              else {
                *(_DWORD *)result -= 2;
              }
            }
LABEL_198:
            a2 = v166;
            if (v155-- <= 2) {
              return result;
            }
          }
          *(_DWORD *)unint64_t v160 = *(_DWORD *)(a2 - 16);
          uint64_t v167 = *(void *)(a2 - 8);
          *(void *)(a2 - 8) = 0;
          uint64_t v168 = *(_DWORD **)(v160 + 8);
          *(void *)(v160 + 8) = v167;
          if (v168)
          {
            if (*v168 != 2)
            {
              *v168 -= 2;
              goto LABEL_216;
            }
            WTF::StringImpl::destroy();
            *(_DWORD *)(a2 - 16) = v158;
            __n128 result = *(void *)(a2 - 8);
            *(void *)(a2 - 8) = v159;
            if (result)
            {
LABEL_221:
              if (*(_DWORD *)result != 2)
              {
                *(_DWORD *)result -= 2;
                goto LABEL_223;
              }
              __n128 result = WTF::StringImpl::destroy();
              uint64_t v169 = v160 + 16 - v9;
              if (v169 < 17) {
                goto LABEL_198;
              }
LABEL_226:
              unint64_t v170 = (((unint64_t)v169 >> 4) - 2) >> 1;
              unint64_t v171 = v9 + 16 * v170;
              int v172 = *(_DWORD *)v171;
              unsigned int v173 = *(_DWORD *)v160;
              if (*(_DWORD *)v171 >= *(_DWORD *)v160) {
                goto LABEL_198;
              }
              uint64_t v174 = *(void *)(v160 + 8);
              *(void *)(v160 + 8) = 0;
              while (2)
              {
                unint64_t v175 = v160;
                unint64_t v160 = v171;
                *(_DWORD *)unint64_t v175 = v172;
                uint64_t v176 = *(void *)(v171 + 8);
                *(void *)(v160 + 8) = 0;
                uint64_t v177 = *(_DWORD **)(v175 + 8);
                *(void *)(v175 + 8) = v176;
                if (v177)
                {
                  if (*v177 != 2)
                  {
                    *v177 -= 2;
                    goto LABEL_231;
                  }
                  WTF::StringImpl::destroy();
                  if (!v170) {
                    goto LABEL_235;
                  }
                }
                else
                {
LABEL_231:
                  if (!v170) {
                    goto LABEL_235;
                  }
                }
                unint64_t v170 = (v170 - 1) >> 1;
                unint64_t v171 = v9 + 16 * v170;
                int v172 = *(_DWORD *)v171;
                if (*(_DWORD *)v171 >= v173)
                {
LABEL_235:
                  *(_DWORD *)unint64_t v160 = v173;
                  __n128 result = *(void *)(v160 + 8);
                  *(void *)(v160 + 8) = v174;
                  if (result) {
                    goto LABEL_236;
                  }
                  goto LABEL_198;
                }
                continue;
              }
            }
          }
          else
          {
LABEL_216:
            *(_DWORD *)(a2 - 16) = v158;
            __n128 result = *(void *)(a2 - 8);
            *(void *)(a2 - 8) = v159;
            if (result) {
              goto LABEL_221;
            }
          }
LABEL_223:
          uint64_t v169 = v160 + 16 - v9;
          if (v169 < 17) {
            goto LABEL_198;
          }
          goto LABEL_226;
        }
      }
      unsigned int v144 = *(_DWORD *)v143;
      unint64_t v146 = v9 + 16 * v141;
      unsigned int v147 = *(_DWORD *)v146;
      if (*(_DWORD *)v143 < *(_DWORD *)v146) {
        goto LABEL_166;
      }
LABEL_176:
      unint64_t v148 = v9 + 16 * v141;
      uint64_t v149 = *(void *)(v148 + 8);
      *(void *)(v148 + 8) = 0;
      while (1)
      {
        unint64_t v151 = v146;
        unint64_t v146 = v143;
        *(_DWORD *)unint64_t v151 = v144;
        uint64_t v152 = *(void *)(v143 + 8);
        *(void *)(v146 + 8) = 0;
        unint64_t v153 = *(_DWORD **)(v151 + 8);
        *(void *)(v151 + 8) = v152;
        if (v153)
        {
          if (*v153 == 2)
          {
            WTF::StringImpl::destroy();
            if (v139 < v142) {
              goto LABEL_192;
            }
            goto LABEL_190;
          }
          *v153 -= 2;
        }
        if (v139 < v142) {
          goto LABEL_192;
        }
LABEL_190:
        unint64_t v143 = v9 + 16 * ((2 * v142) | 1);
        if (2 * v142 + 2 < v12)
        {
          unsigned int v144 = *(_DWORD *)v143;
          unsigned int v150 = *(_DWORD *)(v143 + 16);
          if (*(_DWORD *)v143 <= v150) {
            unsigned int v144 = *(_DWORD *)(v143 + 16);
          }
          if (*(_DWORD *)v143 >= v150)
          {
            uint64_t v142 = (2 * v142) | 1;
          }
          else
          {
            v143 += 16;
            uint64_t v142 = 2 * v142 + 2;
          }
          if (v144 < v147)
          {
LABEL_192:
            *(_DWORD *)unint64_t v146 = v147;
            unint64_t v154 = *(_DWORD **)(v146 + 8);
            *(void *)(v146 + 8) = v149;
            if (v154)
            {
              if (*v154 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *v154 -= 2;
              }
            }
            goto LABEL_166;
          }
        }
        else
        {
          unsigned int v144 = *(_DWORD *)v143;
          uint64_t v142 = (2 * v142) | 1;
          if (*(_DWORD *)v143 < v147) {
            goto LABEL_192;
          }
        }
      }
    }
    unint64_t v13 = (unint64_t)v12 >> 1;
    unint64_t v14 = (unsigned int *)(v9 + 16 * ((unint64_t)v12 >> 1));
    unsigned int v15 = *(_DWORD *)(a2 - 16);
    if ((unint64_t)v11 < 0x801)
    {
      unsigned int v19 = *(_DWORD *)v9;
      unsigned int v20 = *v14;
      if (*(_DWORD *)v9 >= *v14)
      {
        if (v15 < v19)
        {
          *(_DWORD *)unint64_t v9 = v15;
          *(_DWORD *)(a2 - 16) = v19;
          uint64_t v27 = *(void *)(v9 + 8);
          *(void *)(v9 + 8) = *(void *)(a2 - 8);
          *(void *)(a2 - 8) = v27;
          unsigned int v28 = *v14;
          if (*(_DWORD *)v9 < *v14)
          {
            *unint64_t v14 = *(_DWORD *)v9;
            *(_DWORD *)unint64_t v9 = v28;
            unint64_t v29 = v9 + 16 * v13;
            unint64_t v13 = *(void *)(v29 + 8);
            *(void *)(v29 + 8) = *(void *)(v9 + 8);
            *(void *)(v9 + 8) = v13;
            --a3;
            unsigned int v30 = v28;
            if (a4) {
              goto LABEL_57;
            }
            goto LABEL_56;
          }
        }
        goto LABEL_33;
      }
      unint64_t v13 = v9 + 16 * v13 + 8;
      if (v15 >= v19)
      {
        *unint64_t v14 = v19;
        *(_DWORD *)unint64_t v9 = v20;
        uint64_t v21 = *(void *)v13;
        *(void *)unint64_t v13 = *(void *)(v9 + 8);
        *(void *)(v9 + 8) = v21;
        LODWORD(v13) = *(_DWORD *)(a2 - 16);
        if (v13 >= v20) {
          goto LABEL_33;
        }
        *(_DWORD *)unint64_t v9 = v13;
        *(_DWORD *)(a2 - 16) = v20;
        unint64_t v13 = *(void *)(a2 - 8);
        *(void *)(v9 + 8) = v13;
      }
      else
      {
        *unint64_t v14 = v15;
        *(_DWORD *)(a2 - 16) = v20;
        uint64_t v21 = *(void *)v13;
        *(void *)unint64_t v13 = *(void *)(a2 - 8);
      }
      *(void *)(a2 - 8) = v21;
LABEL_33:
      --a3;
      unsigned int v30 = *(_DWORD *)v9;
      if (a4) {
        goto LABEL_57;
      }
      goto LABEL_56;
    }
    unsigned int v16 = *v14;
    unsigned int v17 = *(_DWORD *)v9;
    if (*v14 >= *(_DWORD *)v9)
    {
      if (v15 < v16)
      {
        *unint64_t v14 = v15;
        *(_DWORD *)(a2 - 16) = v16;
        unint64_t v22 = v9 + 16 * v13;
        uint64_t v24 = *(void *)(v22 + 8);
        unint64_t v23 = (void *)(v22 + 8);
        void *v23 = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v24;
        unsigned int v25 = *(_DWORD *)v9;
        if (*v14 < *(_DWORD *)v9)
        {
          *(_DWORD *)unint64_t v9 = *v14;
          *unint64_t v14 = v25;
          uint64_t v26 = *(void *)(v9 + 8);
          *(void *)(v9 + 8) = *v23;
          void *v23 = v26;
        }
      }
    }
    else
    {
      if (v15 >= v16)
      {
        *(_DWORD *)unint64_t v9 = v16;
        *unint64_t v14 = v17;
        uint64_t v18 = *(void *)(v9 + 8);
        uint64_t v31 = (void *)(v9 + 8 + 16 * v13);
        *(void *)(v9 + 8) = *v31;
        *uint64_t v31 = v18;
        unsigned int v32 = *(_DWORD *)(a2 - 16);
        if (v32 >= v17) {
          goto LABEL_24;
        }
        *unint64_t v14 = v32;
        *(_DWORD *)(a2 - 16) = v17;
        *uint64_t v31 = *(void *)(a2 - 8);
      }
      else
      {
        *(_DWORD *)unint64_t v9 = v15;
        *(_DWORD *)(a2 - 16) = v17;
        uint64_t v18 = *(void *)(v9 + 8);
        *(void *)(v9 + 8) = *(void *)(a2 - 8);
      }
      *(void *)(a2 - 8) = v18;
    }
LABEL_24:
    unint64_t v33 = v13 - 1;
    uint64_t v34 = (unsigned int *)(v9 + 16 * (v13 - 1));
    unsigned int v35 = *v34;
    unsigned int v36 = *(_DWORD *)(v9 + 16);
    unsigned int v37 = *(_DWORD *)(a2 - 32);
    if (*v34 >= v36)
    {
      if (v37 < v35)
      {
        *uint64_t v34 = v37;
        *(_DWORD *)(a2 - 32) = v35;
        unint64_t v39 = v9 + 16 * v33;
        uint64_t v41 = *(void *)(v39 + 8);
        unint64_t v40 = (void *)(v39 + 8);
        *unint64_t v40 = *(void *)(a2 - 24);
        *(void *)(a2 - 24) = v41;
        unsigned int v42 = *(_DWORD *)(v9 + 16);
        if (*v34 < v42)
        {
          *(_DWORD *)(v9 + 16) = *v34;
          *uint64_t v34 = v42;
          uint64_t v43 = *(void *)(v9 + 24);
          *(void *)(v9 + 24) = *v40;
          *unint64_t v40 = v43;
        }
      }
    }
    else if (v37 >= v35)
    {
      *(_DWORD *)(v9 + 16) = v35;
      unint64_t v44 = v9 + 16 * v33;
      uint64_t v46 = *(void *)(v44 + 8);
      uint64_t v45 = (void *)(v44 + 8);
      *uint64_t v34 = v36;
      uint64_t v47 = *(void *)(v9 + 24);
      *(void *)(v9 + 24) = v46;
      *uint64_t v45 = v47;
      unsigned int v48 = *(_DWORD *)(a2 - 32);
      if (v48 < v36)
      {
        *uint64_t v34 = v48;
        *(_DWORD *)(a2 - 32) = v36;
        *uint64_t v45 = *(void *)(a2 - 24);
        *(void *)(a2 - 24) = v47;
      }
    }
    else
    {
      *(_DWORD *)(v9 + 16) = v37;
      *(_DWORD *)(a2 - 32) = v36;
      uint64_t v38 = *(void *)(v9 + 24);
      *(void *)(v9 + 24) = *(void *)(a2 - 24);
      *(void *)(a2 - 24) = v38;
    }
    unint64_t v49 = v13 + 1;
    uint64_t v50 = (unsigned int *)(v9 + 16 * (v13 + 1));
    unsigned int v51 = *v50;
    unsigned int v52 = *(_DWORD *)(v9 + 32);
    unsigned int v53 = *(_DWORD *)(a2 - 48);
    if (*v50 >= v52)
    {
      if (v53 < v51)
      {
        *uint64_t v50 = v53;
        *(_DWORD *)(a2 - 48) = v51;
        unint64_t v55 = v9 + 16 * v49;
        uint64_t v57 = *(void *)(v55 + 8);
        unint64_t v56 = (void *)(v55 + 8);
        *unint64_t v56 = *(void *)(a2 - 40);
        *(void *)(a2 - 40) = v57;
        unsigned int v58 = *(_DWORD *)(v9 + 32);
        if (*v50 < v58)
        {
          *(_DWORD *)(v9 + 32) = *v50;
          *uint64_t v50 = v58;
          uint64_t v59 = *(void *)(v9 + 40);
          *(void *)(v9 + 40) = *v56;
          *unint64_t v56 = v59;
        }
      }
    }
    else if (v53 >= v51)
    {
      *(_DWORD *)(v9 + 32) = v51;
      unint64_t v60 = v9 + 16 * v49;
      uint64_t v62 = *(void *)(v60 + 8);
      unint64_t v61 = (void *)(v60 + 8);
      *uint64_t v50 = v52;
      uint64_t v63 = *(void *)(v9 + 40);
      *(void *)(v9 + 40) = v62;
      *unint64_t v61 = v63;
      unsigned int v64 = *(_DWORD *)(a2 - 48);
      if (v64 < v52)
      {
        *uint64_t v50 = v64;
        *(_DWORD *)(a2 - 48) = v52;
        *unint64_t v61 = *(void *)(a2 - 40);
        *(void *)(a2 - 40) = v63;
      }
    }
    else
    {
      *(_DWORD *)(v9 + 32) = v53;
      *(_DWORD *)(a2 - 48) = v52;
      uint64_t v54 = *(void *)(v9 + 40);
      *(void *)(v9 + 40) = *(void *)(a2 - 40);
      *(void *)(a2 - 40) = v54;
    }
    unsigned int v65 = *v14;
    unsigned int v66 = *v34;
    unsigned int v67 = *v50;
    if (*v14 >= *v34)
    {
      if (v67 >= v65) {
        goto LABEL_51;
      }
      *unint64_t v14 = v67;
      unint64_t v71 = v9 + 16 * v13;
      uint64_t v73 = *(void *)(v71 + 8);
      unint64_t v72 = (void *)(v71 + 8);
      __n128 result = v73;
      *uint64_t v50 = v65;
      unint64_t v74 = v9 + 16 * v49;
      uint64_t v75 = *(void *)(v74 + 8);
      *unint64_t v72 = v75;
      *(void *)(v74 + 8) = v73;
      if (v67 < v66)
      {
        *uint64_t v34 = v67;
        *unint64_t v14 = v66;
        unint64_t v76 = v9 + 16 * v33;
        uint64_t v77 = *(void *)(v76 + 8);
        *(void *)(v76 + 8) = v75;
        *unint64_t v72 = v77;
        goto LABEL_55;
      }
      goto LABEL_54;
    }
    int v68 = (uint64_t *)(v9 + 16 * v33 + 8);
    if (v67 < v65)
    {
      *uint64_t v34 = v67;
      *uint64_t v50 = v66;
      unint64_t v69 = v9 + 16 * v49;
      uint64_t v70 = *v68;
      *int v68 = *(void *)(v69 + 8);
      *(void *)(v69 + 8) = v70;
LABEL_51:
      unsigned int v66 = v65;
      goto LABEL_55;
    }
    *uint64_t v34 = v65;
    *unint64_t v14 = v66;
    unint64_t v78 = v9 + 16 * v13;
    uint64_t v80 = *(void *)(v78 + 8);
    BOOL v79 = (void *)(v78 + 8);
    uint64_t v81 = *v68;
    *int v68 = v80;
    *BOOL v79 = v81;
    if (v67 < v66)
    {
      *unint64_t v14 = v67;
      *uint64_t v50 = v66;
      unint64_t v82 = v9 + 16 * v49;
      *BOOL v79 = *(void *)(v82 + 8);
      *(void *)(v82 + 8) = v81;
LABEL_54:
      unsigned int v66 = v67;
    }
LABEL_55:
    unsigned int v83 = *(_DWORD *)v9;
    *(_DWORD *)unint64_t v9 = v66;
    *unint64_t v14 = v83;
    unint64_t v84 = v9 + 16 * v13;
    unint64_t v13 = *(void *)(v9 + 8);
    *(void *)(v9 + 8) = *(void *)(v84 + 8);
    *(void *)(v84 + 8) = v13;
    --a3;
    unsigned int v30 = *(_DWORD *)v9;
    if (a4) {
      goto LABEL_57;
    }
LABEL_56:
    if (*(_DWORD *)(v9 - 16) < v30)
    {
LABEL_57:
      unint64_t v13 = 0;
      uint64_t v85 = *(void *)(v9 + 8);
      *(void *)(v9 + 8) = 0;
      do
      {
        unint64_t v86 = v9 + v13 + 16;
        if (v86 == a2) {
          goto LABEL_259;
        }
        LODWORD(v86) = *(_DWORD *)v86;
        v13 += 16;
      }
      while (v86 < v30);
      unint64_t v87 = v9 + v13;
      unint64_t v88 = (unsigned int *)a2;
      if (v13 != 16)
      {
        while (v88 != (unsigned int *)v9)
        {
          unsigned int v89 = *(v88 - 4);
          v88 -= 4;
          LODWORD(v13) = v89;
          if (v89 < v30) {
            goto LABEL_67;
          }
        }
        goto LABEL_259;
      }
      unint64_t v88 = (unsigned int *)a2;
      do
      {
        if (v87 >= (unint64_t)v88) {
          break;
        }
        unsigned int v90 = *(v88 - 4);
        v88 -= 4;
      }
      while (v90 >= v30);
LABEL_67:
      if (v87 < (unint64_t)v88)
      {
        unsigned int v91 = *v88;
        unint64_t v10 = v87;
        unint64_t v13 = (unint64_t)v88;
LABEL_69:
        *(_DWORD *)unint64_t v10 = v91;
        *(_DWORD *)unint64_t v13 = v86;
        unint64_t v86 = *(void *)(v10 + 8);
        *(void *)(v10 + 8) = *(void *)(v13 + 8);
        *(void *)(v13 + 8) = v86;
        uint64_t v92 = (unsigned int *)(v10 + 16);
        while (v92 != (unsigned int *)a2)
        {
          unsigned int v93 = *v92;
          v92 += 4;
          LODWORD(v86) = v93;
          if (v93 >= v30)
          {
            unint64_t v10 = (unint64_t)(v92 - 4);
            while (v13 != v9)
            {
              unsigned int v94 = *(_DWORD *)(v13 - 16);
              v13 -= 16;
              unsigned int v91 = v94;
              if (v94 < v30)
              {
                if (v10 < v13) {
                  goto LABEL_69;
                }
                uint64_t v95 = v10 - 16;
                if (v10 - 16 != v9) {
                  goto LABEL_79;
                }
                goto LABEL_82;
              }
            }
            break;
          }
        }
LABEL_259:
        __break(1u);
LABEL_260:
        *(_DWORD *)unint64_t v9 = v13;
        *(_DWORD *)(v9 + 16) = v86;
        uint64_t v191 = *(void *)(v9 + 8);
        *(void *)(v9 + 8) = *(void *)(v9 + 24);
        *(void *)(v9 + 24) = v191;
        unsigned int v192 = *(_DWORD *)(a2 - 16);
        if (v192 < v86)
        {
          *(_DWORD *)(v9 + 16) = v192;
          *(_DWORD *)(a2 - 16) = v86;
          *(void *)(v9 + 24) = *(void *)(a2 - 8);
          *(void *)(a2 - 8) = v191;
        }
        return result;
      }
      unint64_t v10 = v87;
      uint64_t v95 = v87 - 16;
      if (v87 - 16 == v9)
      {
LABEL_82:
        *(_DWORD *)(v10 - 16) = v30;
        unint64_t v98 = *(_DWORD **)(v10 - 8);
        *(void *)(v10 - 8) = v85;
        if (!v98) {
          goto LABEL_86;
        }
LABEL_83:
        if (*v98 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v98 -= 2;
        }
        goto LABEL_86;
      }
LABEL_79:
      *(_DWORD *)unint64_t v9 = *(_DWORD *)(v10 - 16);
      uint64_t v96 = *(void *)(v10 - 8);
      *(void *)(v10 - 8) = 0;
      unint64_t v97 = *(_DWORD **)(v9 + 8);
      *(void *)(v9 + 8) = v96;
      if (!v97) {
        goto LABEL_82;
      }
      if (*v97 != 2)
      {
        *v97 -= 2;
        goto LABEL_82;
      }
      WTF::StringImpl::destroy();
      *(_DWORD *)(v10 - 16) = v30;
      unint64_t v98 = *(_DWORD **)(v10 - 8);
      *(void *)(v10 - 8) = v85;
      if (v98) {
        goto LABEL_83;
      }
LABEL_86:
      if (v87 < (unint64_t)v88)
      {
LABEL_89:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *,false>(v9, v95, a3, a4 & 1);
        a4 = 0;
        continue;
      }
      BOOL v99 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *>(v9, v95);
      __n128 result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *>(v10, a2);
      if (!result)
      {
        if (v99) {
          continue;
        }
        goto LABEL_89;
      }
      a2 = v95;
      if (v99) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v100 = *(void *)(v9 + 8);
    *(void *)(v9 + 8) = 0;
    if (v30 < *(_DWORD *)(a2 - 16))
    {
      unint64_t v86 = v9 + 16;
      do
      {
        if (v86 == a2) {
          goto LABEL_259;
        }
        unsigned int v101 = *(_DWORD *)v86;
        v86 += 16;
        LODWORD(v13) = v101;
      }
      while (v30 >= v101);
      unint64_t v10 = v86 - 16;
    }
    else
    {
      unint64_t v102 = v9 + 16;
      do
      {
        unint64_t v10 = v102;
        if (v102 >= a2) {
          break;
        }
        v102 += 16;
        LODWORD(v13) = *(_DWORD *)v10;
      }
      while (v30 >= *(_DWORD *)v10);
    }
    unint64_t v86 = a2;
    if (v10 < a2)
    {
      unint64_t v86 = a2;
      while (v86 != v9)
      {
        unsigned int v103 = *(_DWORD *)(v86 - 16);
        v86 -= 16;
        LODWORD(v13) = v103;
        if (v30 >= v103) {
          goto LABEL_104;
        }
      }
      goto LABEL_259;
    }
LABEL_104:
    if (v10 < v86)
    {
      LODWORD(v13) = *(_DWORD *)v10;
      unsigned int v104 = *(_DWORD *)v86;
      do
      {
        *(_DWORD *)unint64_t v10 = v104;
        *(_DWORD *)unint64_t v86 = v13;
        unint64_t v13 = *(void *)(v10 + 8);
        *(void *)(v10 + 8) = *(void *)(v86 + 8);
        *(void *)(v86 + 8) = v13;
        uint64_t v105 = (unsigned int *)(v10 + 16);
        do
        {
          if (v105 == (unsigned int *)a2) {
            goto LABEL_259;
          }
          unsigned int v106 = *v105;
          v105 += 4;
          LODWORD(v13) = v106;
        }
        while (v30 >= v106);
        unint64_t v10 = (unint64_t)(v105 - 4);
        do
        {
          if (v86 == v9) {
            goto LABEL_259;
          }
          unsigned int v107 = *(_DWORD *)(v86 - 16);
          v86 -= 16;
          unsigned int v104 = v107;
        }
        while (v30 < v107);
      }
      while (v10 < v86);
    }
    BOOL v4 = v10 - 16 >= v9;
    BOOL v5 = v10 - 16 == v9;
    if (v10 - 16 != v9)
    {
      *(_DWORD *)unint64_t v9 = *(_DWORD *)(v10 - 16);
      uint64_t v108 = *(void *)(v10 - 8);
      *(void *)(v10 - 8) = 0;
      unint64_t v109 = *(_DWORD **)(v9 + 8);
      *(void *)(v9 + 8) = v108;
      if (v109)
      {
        BOOL v4 = *v109 >= 2u;
        BOOL v5 = *v109 == 2;
        if (*v109 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v109 -= 2;
        }
      }
    }
    a4 = 0;
    *(_DWORD *)(v10 - 16) = v30;
    __n128 result = *(void *)(v10 - 8);
    *(void *)(v10 - 8) = v100;
    if (result)
    {
      BOOL v4 = *(_DWORD *)result >= 2u;
      BOOL v5 = *(_DWORD *)result == 2;
      if (*(_DWORD *)result == 2)
      {
        __n128 result = WTF::StringImpl::destroy();
        a4 = 0;
      }
      else
      {
        a4 = 0;
        *(_DWORD *)result -= 2;
      }
    }
  }
  uint64_t v125 = (unsigned int *)(v9 + 16);
  BOOL v127 = v9 == a2 || v125 == (unsigned int *)a2;
  if ((a4 & 1) == 0)
  {
    if (v127) {
      return result;
    }
    uint64_t v181 = 0;
    uint64_t v182 = (uint64_t *)(v9 + 24);
    uint64_t v183 = -2;
    uint64_t v184 = 1;
    unint64_t v13 = v9;
    while (1)
    {
      uint64_t v185 = v181;
      uint64_t v181 = v184;
      unsigned int v186 = *v125;
      if (*v125 < *(_DWORD *)v13) {
        break;
      }
LABEL_245:
      unint64_t v13 = v9 + 16 * v181;
      uint64_t v184 = v181 + 1;
      uint64_t v125 = (unsigned int *)(v9 + 16 * (v181 + 1));
      v182 += 2;
      --v183;
      if (v125 == (unsigned int *)a2) {
        return result;
      }
    }
    uint64_t v187 = *(void *)(v13 + 24);
    *(void *)(v13 + 24) = 0;
    unsigned int v188 = *(_DWORD *)(v9 + 16 * v185);
    uint64_t v189 = v183;
    uint64_t v190 = v182;
    while (1)
    {
      *((_DWORD *)v190 - 2) = v188;
      unint64_t v86 = *(v190 - 2);
      *(v190 - 2) = 0;
      __n128 result = *v190;
      uint64_t *v190 = v86;
      if (result)
      {
        LODWORD(v86) = *(_DWORD *)result - 2;
        if (*(_DWORD *)result == 2)
        {
          __n128 result = WTF::StringImpl::destroy();
          BOOL v4 = __CFADD__(v189++, 1);
          if (v4) {
            goto LABEL_259;
          }
          goto LABEL_255;
        }
        *(_DWORD *)__n128 result = v86;
      }
      BOOL v4 = __CFADD__(v189++, 1);
      if (v4) {
        goto LABEL_259;
      }
LABEL_255:
      unint64_t v13 = (unint64_t)(v190 - 2);
      unsigned int v188 = *((_DWORD *)v190 - 10);
      v190 -= 2;
      if (v186 >= v188)
      {
        *(_DWORD *)(v13 - 8) = v186;
        __n128 result = *(void *)v13;
        *(void *)unint64_t v13 = v187;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            __n128 result = WTF::StringImpl::destroy();
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
        goto LABEL_245;
      }
    }
  }
  if (v127) {
    return result;
  }
  uint64_t v128 = 0;
  uint64_t v129 = (unsigned int *)v9;
  while (2)
  {
    uint64_t v130 = v129;
    uint64_t v129 = v125;
    unsigned int v131 = v130[4];
    unsigned int v132 = *v130;
    if (v131 >= *v130) {
      goto LABEL_149;
    }
    uint64_t v133 = *((void *)v130 + 3);
    *((void *)v130 + 3) = 0;
    uint64_t v134 = v128;
    while (2)
    {
      uint64_t v135 = v9 + v134;
      *(_DWORD *)(v135 + 16) = v132;
      uint64_t v136 = *(void *)(v9 + v134 + 8);
      *(void *)(v135 + 8) = 0;
      uint64_t v137 = *(_DWORD **)(v9 + v134 + 24);
      *(void *)(v135 + 24) = v136;
      if (!v137)
      {
LABEL_155:
        if (!v134) {
          break;
        }
        goto LABEL_158;
      }
      if (*v137 != 2)
      {
        *v137 -= 2;
        goto LABEL_155;
      }
      WTF::StringImpl::destroy();
      if (v134)
      {
LABEL_158:
        unsigned int v132 = *(_DWORD *)(v9 + v134 - 16);
        v134 -= 16;
        if (v131 >= v132)
        {
          uint64_t v138 = v9 + v134 + 16;
          goto LABEL_161;
        }
        continue;
      }
      break;
    }
    uint64_t v138 = v9;
LABEL_161:
    *(_DWORD *)uint64_t v138 = v131;
    __n128 result = *(void *)(v138 + 8);
    *(void *)(v138 + 8) = v133;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        __n128 result = WTF::StringImpl::destroy();
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
LABEL_149:
    uint64_t v125 = v129 + 4;
    v128 += 16;
    if (v129 + 4 != (unsigned int *)a2) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(_DWORD *)(a2 - 16);
      unsigned int v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1)
      {
        *(_DWORD *)a1 = v6;
        *(_DWORD *)(a2 - 16) = v7;
        goto LABEL_8;
      }
      return result;
    case 3:
      unsigned int v8 = *(_DWORD *)(a1 + 16);
      unsigned int v9 = *(_DWORD *)a1;
      unsigned int v10 = *(_DWORD *)(a2 - 16);
      if (v8 >= *(_DWORD *)a1)
      {
        if (v10 < v8)
        {
          *(_DWORD *)(a1 + 16) = v10;
          *(_DWORD *)(a2 - 16) = v8;
          uint64_t v28 = *(void *)(a1 + 24);
          *(void *)(a1 + 24) = *(void *)(a2 - 8);
          *(void *)(a2 - 8) = v28;
          unsigned int v29 = *(_DWORD *)(a1 + 16);
          unsigned int v30 = *(_DWORD *)a1;
          if (v29 < *(_DWORD *)a1)
          {
            *(_DWORD *)a1 = v29;
            *(_DWORD *)(a1 + 16) = v30;
            uint64_t v31 = *(void *)(a1 + 8);
            *(void *)(a1 + 8) = *(void *)(a1 + 24);
            *(void *)(a1 + 24) = v31;
          }
        }
      }
      else if (v10 >= v8)
      {
        *(_DWORD *)a1 = v8;
        *(_DWORD *)(a1 + 16) = v9;
        uint64_t v35 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a1 + 24);
        *(void *)(a1 + 24) = v35;
        unsigned int v36 = *(_DWORD *)(a2 - 16);
        if (v36 < v9)
        {
          *(_DWORD *)(a1 + 16) = v36;
          *(_DWORD *)(a2 - 16) = v9;
          *(void *)(a1 + 24) = *(void *)(a2 - 8);
          *(void *)(a2 - 8) = v35;
        }
      }
      else
      {
        *(_DWORD *)a1 = v10;
        *(_DWORD *)(a2 - 16) = v9;
LABEL_8:
        uint64_t v11 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v11;
      }
      return result;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *>((unsigned int *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32), (unsigned int *)(a2 - 16));
      return 1;
    case 5:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *>((unsigned int *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32), (unsigned int *)(a1 + 48));
      unsigned int v17 = *(_DWORD *)(a2 - 16);
      unsigned int v18 = *(_DWORD *)(a1 + 48);
      if (v17 < v18)
      {
        *(_DWORD *)(a1 + 48) = v17;
        *(_DWORD *)(a2 - 16) = v18;
        uint64_t v19 = *(void *)(a1 + 56);
        *(void *)(a1 + 56) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v19;
        unsigned int v20 = *(_DWORD *)(a1 + 48);
        unsigned int v21 = *(_DWORD *)(a1 + 32);
        if (v20 < v21)
        {
          *(_DWORD *)(a1 + 32) = v20;
          *(_DWORD *)(a1 + 48) = v21;
          uint64_t v22 = *(void *)(a1 + 40);
          uint64_t v23 = *(void *)(a1 + 56);
          *(void *)(a1 + 40) = v23;
          *(void *)(a1 + 56) = v22;
          unsigned int v24 = *(_DWORD *)(a1 + 16);
          if (v20 < v24)
          {
            *(_DWORD *)(a1 + 16) = v20;
            *(_DWORD *)(a1 + 32) = v24;
            uint64_t v25 = *(void *)(a1 + 24);
            *(void *)(a1 + 24) = v23;
            *(void *)(a1 + 40) = v25;
            unsigned int v26 = *(_DWORD *)a1;
            if (v20 < *(_DWORD *)a1)
            {
              *(_DWORD *)a1 = v20;
              *(_DWORD *)(a1 + 16) = v26;
              uint64_t v27 = *(void *)(a1 + 8);
              *(void *)(a1 + 8) = v23;
              *(void *)(a1 + 24) = v27;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v12 = (unsigned int *)(a1 + 32);
      unsigned int v13 = *(_DWORD *)(a1 + 32);
      unsigned int v14 = *(_DWORD *)(a1 + 16);
      unsigned int v15 = *(_DWORD *)a1;
      if (v14 >= *(_DWORD *)a1)
      {
        if (v13 < v14)
        {
          *(_DWORD *)(a1 + 16) = v13;
          *(_DWORD *)(a1 + 32) = v14;
          uint64_t v32 = *(void *)(a1 + 24);
          uint64_t v33 = *(void *)(a1 + 40);
          *(void *)(a1 + 24) = v33;
          *(void *)(a1 + 40) = v32;
          if (v13 < v15)
          {
            *(_DWORD *)a1 = v13;
            *(_DWORD *)(a1 + 16) = v15;
            uint64_t v34 = *(void *)(a1 + 8);
            *(void *)(a1 + 8) = v33;
            *(void *)(a1 + 24) = v34;
          }
        }
      }
      else if (v13 >= v14)
      {
        *(_DWORD *)a1 = v14;
        *(_DWORD *)(a1 + 16) = v15;
        uint64_t v37 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a1 + 24);
        *(void *)(a1 + 24) = v37;
        if (v13 < v15)
        {
          *(_DWORD *)(a1 + 16) = v13;
          *(_DWORD *)(a1 + 32) = v15;
          *(void *)(a1 + 24) = *(void *)(a1 + 40);
          *(void *)(a1 + 40) = v37;
        }
      }
      else
      {
        *(_DWORD *)a1 = v13;
        *(_DWORD *)(a1 + 32) = v15;
        uint64_t v16 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a1 + 40);
        *(void *)(a1 + 40) = v16;
      }
      uint64_t v38 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v39 = 0;
      int v40 = 0;
      break;
  }
  while (2)
  {
    unsigned int v41 = *(_DWORD *)v38;
    unsigned int v42 = *v12;
    if (*(_DWORD *)v38 >= v42) {
      goto LABEL_32;
    }
    uint64_t v43 = *(void *)(v38 + 8);
    *(void *)(v38 + 8) = 0;
    uint64_t v44 = v39;
    while (1)
    {
      uint64_t v45 = a1 + v44;
      *(_DWORD *)(v45 + 48) = v42;
      uint64_t v46 = *(void *)(a1 + v44 + 40);
      *(void *)(v45 + 40) = 0;
      uint64_t v47 = *(_DWORD **)(a1 + v44 + 56);
      *(void *)(v45 + 56) = v46;
      if (!v47) {
        goto LABEL_38;
      }
      if (*v47 == 2) {
        break;
      }
      *v47 -= 2;
LABEL_38:
      if (v44 == -32) {
        goto LABEL_43;
      }
LABEL_41:
      unsigned int v42 = *(_DWORD *)(a1 + v44 + 16);
      v44 -= 16;
      if (v41 >= v42)
      {
        uint64_t v48 = a1 + v44 + 48;
        goto LABEL_44;
      }
    }
    WTF::StringImpl::destroy();
    if (v44 != -32) {
      goto LABEL_41;
    }
LABEL_43:
    uint64_t v48 = a1;
LABEL_44:
    *(_DWORD *)uint64_t v48 = v41;
    unint64_t v49 = *(_DWORD **)(v48 + 8);
    *(void *)(v48 + 8) = v43;
    if (v49)
    {
      if (*v49 == 2) {
        WTF::StringImpl::destroy();
      }
      else {
        *v49 -= 2;
      }
    }
    if (++v40 == 8) {
      return v38 + 16 == a2;
    }
LABEL_32:
    uint64_t v12 = (unsigned int *)v38;
    v39 += 16;
    v38 += 16;
    if (v38 != a2) {
      continue;
    }
    return 1;
  }
}

unsigned int *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *>(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4 = *a2;
  unsigned int v5 = *result;
  unsigned int v6 = *a3;
  if (*a2 < *result)
  {
    if (v6 >= v4)
    {
      *BOOL result = v4;
      *a2 = v5;
      uint64_t v12 = *((void *)result + 1);
      *((void *)result + 1) = *((void *)a2 + 1);
      *((void *)a2 + 1) = v12;
      unsigned int v4 = *a3;
      if (*a3 >= v5) {
        goto LABEL_11;
      }
      *a2 = v4;
      *a3 = v5;
      *((void *)a2 + 1) = *((void *)a3 + 1);
      *((void *)a3 + 1) = v12;
    }
    else
    {
      *BOOL result = v6;
      *a3 = v5;
      uint64_t v7 = *((void *)result + 1);
      *((void *)result + 1) = *((void *)a3 + 1);
      *((void *)a3 + 1) = v7;
    }
    unsigned int v4 = v5;
LABEL_11:
    unsigned int v11 = *a4;
    if (*a4 >= v4) {
      return result;
    }
    goto LABEL_14;
  }
  if (v6 >= v4)
  {
    unsigned int v4 = *a3;
    unsigned int v11 = *a4;
    if (*a4 >= v6) {
      return result;
    }
    goto LABEL_14;
  }
  *a2 = v6;
  *a3 = v4;
  uint64_t v8 = *((void *)a2 + 1);
  *((void *)a2 + 1) = *((void *)a3 + 1);
  *((void *)a3 + 1) = v8;
  unsigned int v9 = *result;
  if (*a2 >= *result) {
    goto LABEL_11;
  }
  *BOOL result = *a2;
  *a2 = v9;
  uint64_t v10 = *((void *)result + 1);
  *((void *)result + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v10;
  unsigned int v4 = *a3;
  unsigned int v11 = *a4;
  if (*a4 >= *a3) {
    return result;
  }
LABEL_14:
  *a3 = v11;
  *a4 = v4;
  uint64_t v13 = *((void *)a3 + 1);
  *((void *)a3 + 1) = *((void *)a4 + 1);
  *((void *)a4 + 1) = v13;
  unsigned int v14 = *a2;
  if (*a3 < *a2)
  {
    *a2 = *a3;
    *a3 = v14;
    uint64_t v15 = *((void *)a2 + 1);
    *((void *)a2 + 1) = *((void *)a3 + 1);
    *((void *)a3 + 1) = v15;
    unsigned int v16 = *result;
    if (*a2 < *result)
    {
      *BOOL result = *a2;
      *a2 = v16;
      uint64_t v17 = *((void *)result + 1);
      *((void *)result + 1) = *((void *)a2 + 1);
      *((void *)a2 + 1) = v17;
    }
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN4WGSL18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF **a2)
{
  BOOL result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN4WGSL18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, _DWORD **a2)
{
  BOOL result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *result -= 2;
    }
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL22RewriteGlobalVariables11UsedGlobalsENS8_18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, void *a2)
{
  BOOL result = (WTF *)a2[1];
  if (result)
  {
    a2[1] = 0;
    *((_DWORD *)a2 + 4) = 0;
    BOOL result = (WTF *)WTF::fastFree(result, a2);
  }
  uint64_t v4 = *a2;
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 4);
    if (v5)
    {
      unsigned int v6 = (void *)(v4 + 8);
      do
      {
        if (*((_DWORD *)v6 - 2) != -2 && *v6) {
          WTF::fastFree((WTF *)(*v6 - 16), a2);
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    return (WTF *)WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL22RewriteGlobalVariables11UsedGlobalsENS8_18CompilationMessageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, _DWORD **a2)
{
  BOOL result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *result -= 2;
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::finalizeArgumentBufferStruct(unsigned int,WTF::Vector<std::pair<unsigned int,WGSL::AST::StructureMember *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,std::pair<unsigned int,WGSL::AST::StructureMember *>*,false>(uint64_t result, int *a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  for (unint64_t i = v9; ; *(void *)(i - 8) = v89)
  {
LABEL_3:
    unint64_t v9 = i;
    uint64_t v11 = (uint64_t)a2 - i;
    uint64_t v12 = (uint64_t)((uint64_t)a2 - i) >> 4;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return result;
        case 2:
          unsigned int v115 = *(a2 - 4);
          unsigned int v116 = *(_DWORD *)i;
          if (v115 >= *(_DWORD *)i) {
            return result;
          }
          *(_DWORD *)unint64_t i = v115;
          *(a2 - 4) = v116;
          goto LABEL_115;
        case 3:
          LODWORD(v89) = *(_DWORD *)(i + 16);
          LODWORD(v31) = *(_DWORD *)i;
          unsigned int v117 = *(a2 - 4);
          if (v89 >= *(_DWORD *)i)
          {
            if (v117 < v89)
            {
              *(_DWORD *)(i + 16) = v117;
              *(a2 - 4) = v89;
              uint64_t v169 = *(void *)(i + 24);
              *(void *)(i + 24) = *((void *)a2 - 1);
              *((void *)a2 - 1) = v169;
              unsigned int v170 = *(_DWORD *)(i + 16);
              unsigned int v171 = *(_DWORD *)i;
              if (v170 < *(_DWORD *)i)
              {
                *(_DWORD *)unint64_t i = v170;
                *(_DWORD *)(i + 16) = v171;
                uint64_t v129 = *(void *)(i + 8);
                uint64_t v125 = *(void *)(i + 24);
LABEL_187:
                *(void *)(i + 8) = v125;
                *(void *)(i + 24) = v129;
              }
            }
          }
          else
          {
            if (v117 >= v89) {
              goto LABEL_197;
            }
            *(_DWORD *)unint64_t i = v117;
            *(a2 - 4) = (int)v31;
LABEL_115:
            uint64_t v118 = *(void *)(i + 8);
            *(void *)(i + 8) = *((void *)a2 - 1);
            *((void *)a2 - 1) = v118;
          }
          break;
        case 4:
          return (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *>((unsigned int *)i, (unsigned int *)(i + 16), (unsigned int *)(i + 32), (unsigned int *)a2 - 4);
        case 5:
          BOOL result = (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *>((unsigned int *)i, (unsigned int *)(i + 16), (unsigned int *)(i + 32), (unsigned int *)(i + 48));
          unsigned int v119 = *(a2 - 4);
          unsigned int v120 = *(_DWORD *)(i + 48);
          if (v119 >= v120) {
            return result;
          }
          *(_DWORD *)(i + 48) = v119;
          *(a2 - 4) = v120;
          uint64_t v121 = *(void *)(i + 56);
          *(void *)(i + 56) = *((void *)a2 - 1);
          *((void *)a2 - 1) = v121;
          unsigned int v122 = *(_DWORD *)(i + 48);
          unsigned int v123 = *(_DWORD *)(i + 32);
          if (v122 >= v123) {
            return result;
          }
          *(_DWORD *)(i + 32) = v122;
          *(_DWORD *)(i + 48) = v123;
          uint64_t v124 = *(void *)(i + 40);
          uint64_t v125 = *(void *)(i + 56);
          *(void *)(i + 40) = v125;
          *(void *)(i + 56) = v124;
          unsigned int v126 = *(_DWORD *)(i + 16);
          if (v122 >= v126) {
            return result;
          }
          *(_DWORD *)(i + 16) = v122;
          *(_DWORD *)(i + 32) = v126;
          uint64_t v127 = *(void *)(i + 24);
          *(void *)(i + 24) = v125;
          *(void *)(i + 40) = v127;
          unsigned int v128 = *(_DWORD *)i;
          if (v122 >= *(_DWORD *)i) {
            return result;
          }
          *(_DWORD *)unint64_t i = v122;
          *(_DWORD *)(i + 16) = v128;
          uint64_t v129 = *(void *)(i + 8);
          goto LABEL_187;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 383)
    {
      uint64_t v130 = (int *)(i + 16);
      BOOL v132 = (int *)i == a2 || v130 == a2;
      if (a4)
      {
        if (v132) {
          return result;
        }
        uint64_t v133 = 0;
        unint64_t v134 = i;
        while (1)
        {
          uint64_t v136 = v130;
          unsigned int v137 = *(_DWORD *)(v134 + 16);
          unsigned int v138 = *(_DWORD *)v134;
          if (v137 < *(_DWORD *)v134)
          {
            uint64_t v139 = *(void *)(v134 + 24);
            uint64_t v140 = v133;
            do
            {
              uint64_t v141 = i + v140;
              *(_DWORD *)(v141 + 16) = v138;
              *(void *)(v141 + 24) = *(void *)(i + v140 + 8);
              if (!v140)
              {
                uint64_t v135 = i;
                goto LABEL_134;
              }
              unsigned int v138 = *(_DWORD *)(v141 - 16);
              v140 -= 16;
            }
            while (v137 < v138);
            uint64_t v135 = i + v140 + 16;
LABEL_134:
            *(_DWORD *)uint64_t v135 = v137;
            *(void *)(v135 + 8) = v139;
          }
          uint64_t v130 = v136 + 4;
          v133 += 16;
          unint64_t v134 = (unint64_t)v136;
          if (v136 + 4 == a2) {
            return result;
          }
        }
      }
      if (v132) {
        return result;
      }
      uint64_t v172 = 0;
      uint64_t v31 = (void *)(i + 24);
      uint64_t v89 = -2;
      uint64_t v173 = 1;
      unint64_t v174 = i;
      while (1)
      {
        uint64_t v175 = v173;
        unsigned int v176 = *v130;
        if (v176 < *(_DWORD *)v174)
        {
          uint64_t v177 = *(void *)(v174 + 24);
          unsigned int v178 = *(_DWORD *)(i + 16 * v172);
          unsigned int v179 = v31;
          uint64_t v180 = v89;
          uint64_t v181 = v31;
          do
          {
            *((_DWORD *)v179 - 2) = v178;
            uint64_t v182 = *(v181 - 2);
            v181 -= 2;
            *unsigned int v179 = v182;
            BOOL v4 = __CFADD__(v180++, 1);
            if (v4) {
              goto LABEL_196;
            }
            unsigned int v178 = *((_DWORD *)v179 - 10);
            unsigned int v179 = v181;
          }
          while (v176 < v178);
          *((_DWORD *)v181 - 2) = v176;
          void *v181 = v177;
        }
        unint64_t v174 = i + 16 * v175;
        uint64_t v173 = v175 + 1;
        uint64_t v130 = (int *)(i + 16 * (v175 + 1));
        --v89;
        v31 += 2;
        uint64_t v172 = v175;
        if (v130 == a2) {
          return result;
        }
      }
    }
    if (!a3) {
      break;
    }
    unint64_t v13 = (unint64_t)v12 >> 1;
    unsigned int v14 = (unsigned int *)(i + 16 * ((unint64_t)v12 >> 1));
    unsigned int v15 = *(a2 - 4);
    if ((unint64_t)v11 < 0x801)
    {
      unsigned int v19 = *(_DWORD *)i;
      unsigned int v20 = *v14;
      if (*(_DWORD *)i >= *v14)
      {
        if (v15 < v19)
        {
          *(_DWORD *)unint64_t i = v15;
          *(a2 - 4) = v19;
          uint64_t v28 = *(void *)(i + 8);
          *(void *)(i + 8) = *((void *)a2 - 1);
          *((void *)a2 - 1) = v28;
          unsigned int v29 = *v14;
          if (*(_DWORD *)i < *v14)
          {
            *unsigned int v14 = *(_DWORD *)i;
            *(_DWORD *)unint64_t i = v29;
            uint64_t v31 = (void *)(i + 16 * v13);
            uint64_t v30 = v31[1];
            v31[1] = *(void *)(i + 8);
            *(void *)(i + 8) = v30;
            --a3;
            LODWORD(v31) = v29;
            if (a4) {
              goto LABEL_56;
            }
            goto LABEL_55;
          }
        }
      }
      else
      {
        unsigned int v21 = (uint64_t *)(i + 16 * v13 + 8);
        if (v15 < v19)
        {
          *unsigned int v14 = v15;
          *(a2 - 4) = v20;
          uint64_t v22 = *v21;
          uint64_t *v21 = *((void *)a2 - 1);
          goto LABEL_31;
        }
        *unsigned int v14 = v19;
        *(_DWORD *)unint64_t i = v20;
        uint64_t v22 = *v21;
        uint64_t *v21 = *(void *)(i + 8);
        *(void *)(i + 8) = v22;
        unsigned int v46 = *(a2 - 4);
        if (v46 < v20)
        {
          *(_DWORD *)unint64_t i = v46;
          *(a2 - 4) = v20;
          *(void *)(i + 8) = *((void *)a2 - 1);
LABEL_31:
          *((void *)a2 - 1) = v22;
        }
      }
      --a3;
      LODWORD(v31) = *(_DWORD *)i;
      if (a4) {
        goto LABEL_56;
      }
      goto LABEL_55;
    }
    unsigned int v16 = *v14;
    unsigned int v17 = *(_DWORD *)i;
    if (*v14 >= *(_DWORD *)i)
    {
      if (v15 < v16)
      {
        *unsigned int v14 = v15;
        *(a2 - 4) = v16;
        unint64_t v23 = i + 16 * v13;
        uint64_t v25 = *(void *)(v23 + 8);
        unsigned int v24 = (void *)(v23 + 8);
        *unsigned int v24 = *((void *)a2 - 1);
        *((void *)a2 - 1) = v25;
        unsigned int v26 = *(_DWORD *)i;
        if (*v14 < *(_DWORD *)i)
        {
          *(_DWORD *)unint64_t i = *v14;
          *unsigned int v14 = v26;
          uint64_t v27 = *(void *)(i + 8);
          *(void *)(i + 8) = *v24;
          *unsigned int v24 = v27;
        }
      }
    }
    else if (v15 >= v16)
    {
      *(_DWORD *)unint64_t i = v16;
      *unsigned int v14 = v17;
      uint64_t v32 = *(void *)(i + 8);
      uint64_t v33 = (void *)(i + 8 + 16 * v13);
      *(void *)(i + 8) = *v33;
      *uint64_t v33 = v32;
      unsigned int v34 = *(a2 - 4);
      if (v34 < v17)
      {
        *unsigned int v14 = v34;
        *(a2 - 4) = v17;
        *uint64_t v33 = *((void *)a2 - 1);
        *((void *)a2 - 1) = v32;
      }
    }
    else
    {
      *(_DWORD *)unint64_t i = v15;
      *(a2 - 4) = v17;
      uint64_t v18 = *(void *)(i + 8);
      *(void *)(i + 8) = *((void *)a2 - 1);
      *((void *)a2 - 1) = v18;
    }
    unint64_t v35 = v13 - 1;
    unsigned int v36 = (unsigned int *)(i + 16 * (v13 - 1));
    unsigned int v37 = *v36;
    unsigned int v38 = *(_DWORD *)(i + 16);
    unsigned int v39 = *(a2 - 8);
    if (*v36 >= v38)
    {
      if (v39 < v37)
      {
        unsigned int *v36 = v39;
        *(a2 - 8) = v37;
        unint64_t v41 = i + 16 * v35;
        uint64_t v43 = *(void *)(v41 + 8);
        unsigned int v42 = (void *)(v41 + 8);
        *unsigned int v42 = *((void *)a2 - 3);
        *((void *)a2 - 3) = v43;
        unsigned int v44 = *(_DWORD *)(i + 16);
        if (*v36 < v44)
        {
          *(_DWORD *)(i + 16) = *v36;
          unsigned int *v36 = v44;
          uint64_t v45 = *(void *)(i + 24);
          *(void *)(i + 24) = *v42;
          *unsigned int v42 = v45;
        }
      }
    }
    else if (v39 >= v37)
    {
      *(_DWORD *)(i + 16) = v37;
      unint64_t v47 = i + 16 * v35;
      uint64_t v49 = *(void *)(v47 + 8);
      uint64_t v48 = (void *)(v47 + 8);
      unsigned int *v36 = v38;
      uint64_t v50 = *(void *)(i + 24);
      *(void *)(i + 24) = v49;
      *uint64_t v48 = v50;
      unsigned int v51 = *(a2 - 8);
      if (v51 < v38)
      {
        unsigned int *v36 = v51;
        *(a2 - 8) = v38;
        *uint64_t v48 = *((void *)a2 - 3);
        *((void *)a2 - 3) = v50;
      }
    }
    else
    {
      *(_DWORD *)(i + 16) = v39;
      *(a2 - 8) = v38;
      uint64_t v40 = *(void *)(i + 24);
      *(void *)(i + 24) = *((void *)a2 - 3);
      *((void *)a2 - 3) = v40;
    }
    unint64_t v52 = v13 + 1;
    unsigned int v53 = (unsigned int *)(i + 16 * (v13 + 1));
    unsigned int v54 = *v53;
    unsigned int v55 = *(_DWORD *)(i + 32);
    unsigned int v56 = *(a2 - 12);
    if (*v53 >= v55)
    {
      if (v56 < v54)
      {
        *unsigned int v53 = v56;
        *(a2 - 12) = v54;
        unint64_t v58 = i + 16 * v52;
        uint64_t v60 = *(void *)(v58 + 8);
        uint64_t v59 = (void *)(v58 + 8);
        *uint64_t v59 = *((void *)a2 - 5);
        *((void *)a2 - 5) = v60;
        unsigned int v61 = *(_DWORD *)(i + 32);
        if (*v53 < v61)
        {
          *(_DWORD *)(i + 32) = *v53;
          *unsigned int v53 = v61;
          uint64_t v62 = *(void *)(i + 40);
          *(void *)(i + 40) = *v59;
          *uint64_t v59 = v62;
        }
      }
    }
    else if (v56 >= v54)
    {
      *(_DWORD *)(i + 32) = v54;
      unint64_t v63 = i + 16 * v52;
      uint64_t v65 = *(void *)(v63 + 8);
      unsigned int v64 = (void *)(v63 + 8);
      *unsigned int v53 = v55;
      uint64_t v66 = *(void *)(i + 40);
      *(void *)(i + 40) = v65;
      void *v64 = v66;
      unsigned int v67 = *(a2 - 12);
      if (v67 < v55)
      {
        *unsigned int v53 = v67;
        *(a2 - 12) = v55;
        void *v64 = *((void *)a2 - 5);
        *((void *)a2 - 5) = v66;
      }
    }
    else
    {
      *(_DWORD *)(i + 32) = v56;
      *(a2 - 12) = v55;
      uint64_t v57 = *(void *)(i + 40);
      *(void *)(i + 40) = *((void *)a2 - 5);
      *((void *)a2 - 5) = v57;
    }
    unsigned int v68 = *v14;
    unsigned int v69 = *v36;
    unsigned int v70 = *v53;
    if (*v14 >= *v36)
    {
      if (v70 >= v68) {
        goto LABEL_50;
      }
      *unsigned int v14 = v70;
      unint64_t v74 = i + 16 * v13;
      uint64_t v76 = *(void *)(v74 + 8);
      uint64_t v75 = (void *)(v74 + 8);
      BOOL result = v76;
      *unsigned int v53 = v68;
      unint64_t v77 = i + 16 * v52;
      uint64_t v78 = *(void *)(v77 + 8);
      void *v75 = v78;
      *(void *)(v77 + 8) = v76;
      if (v70 < v69)
      {
        unsigned int *v36 = v70;
        *unsigned int v14 = v69;
        unint64_t v79 = i + 16 * v35;
        uint64_t v80 = *(void *)(v79 + 8);
        *(void *)(v79 + 8) = v78;
        void *v75 = v80;
        goto LABEL_54;
      }
      goto LABEL_53;
    }
    unint64_t v71 = (uint64_t *)(i + 16 * v35 + 8);
    if (v70 < v68)
    {
      unsigned int *v36 = v70;
      *unsigned int v53 = v69;
      unint64_t v72 = i + 16 * v52;
      uint64_t v73 = *v71;
      *unint64_t v71 = *(void *)(v72 + 8);
      *(void *)(v72 + 8) = v73;
LABEL_50:
      unsigned int v69 = v68;
      goto LABEL_54;
    }
    unsigned int *v36 = v68;
    *unsigned int v14 = v69;
    unint64_t v81 = i + 16 * v13;
    uint64_t v83 = *(void *)(v81 + 8);
    unint64_t v82 = (void *)(v81 + 8);
    uint64_t v84 = *v71;
    *unint64_t v71 = v83;
    *unint64_t v82 = v84;
    if (v70 < v69)
    {
      *unsigned int v14 = v70;
      *unsigned int v53 = v69;
      unint64_t v85 = i + 16 * v52;
      *unint64_t v82 = *(void *)(v85 + 8);
      *(void *)(v85 + 8) = v84;
LABEL_53:
      unsigned int v69 = v70;
    }
LABEL_54:
    unsigned int v86 = *(_DWORD *)i;
    *(_DWORD *)unint64_t i = v69;
    *unsigned int v14 = v86;
    uint64_t v31 = (void *)(i + 16 * v13);
    uint64_t v87 = *(void *)(i + 8);
    *(void *)(i + 8) = v31[1];
    v31[1] = v87;
    --a3;
    LODWORD(v31) = *(_DWORD *)i;
    if (a4) {
      goto LABEL_56;
    }
LABEL_55:
    if (*(_DWORD *)(i - 16) < v31)
    {
LABEL_56:
      uint64_t v88 = 0;
      uint64_t v89 = *(void *)(i + 8);
      do
      {
        unsigned int v90 = (int *)(i + v88 + 16);
        if (v90 == a2) {
          goto LABEL_196;
        }
        unsigned int v91 = *v90;
        v88 += 16;
      }
      while (*v90 < v31);
      unint64_t v92 = i + v88;
      unsigned int v93 = a2;
      if (v88 != 16)
      {
        while (v93 != (int *)i)
        {
          unsigned int v94 = *(v93 - 4);
          v93 -= 4;
          if (v94 < v31) {
            goto LABEL_66;
          }
        }
        goto LABEL_196;
      }
      unsigned int v93 = a2;
      do
      {
        if (v92 >= (unint64_t)v93) {
          break;
        }
        unsigned int v95 = *(v93 - 4);
        v93 -= 4;
      }
      while (v95 >= v31);
LABEL_66:
      if (v92 < (unint64_t)v93)
      {
        unsigned int v96 = *v93;
        i += v88;
        unint64_t v97 = v93;
LABEL_68:
        *(_DWORD *)unint64_t i = v96;
        _DWORD *v97 = v91;
        uint64_t v98 = *(void *)(i + 8);
        *(void *)(i + 8) = *((void *)v97 + 1);
        *((void *)v97 + 1) = v98;
        BOOL v99 = (int *)(i + 16);
        while (v99 != a2)
        {
          unsigned int v100 = *v99;
          v99 += 4;
          unsigned int v91 = v100;
          if (v100 >= v31)
          {
            unint64_t i = (unint64_t)(v99 - 4);
            while (v97 != (_DWORD *)v9)
            {
              unsigned int v101 = *(v97 - 4);
              v97 -= 4;
              unsigned int v96 = v101;
              if (v101 < v31)
              {
                if (i < (unint64_t)v97) {
                  goto LABEL_68;
                }
                unint64_t v102 = (int *)(i - 16);
                if (i - 16 == v9) {
                  goto LABEL_77;
                }
                goto LABEL_76;
              }
            }
            break;
          }
        }
LABEL_196:
        __break(1u);
LABEL_197:
        *(_DWORD *)unint64_t v9 = v89;
        *(_DWORD *)(v9 + 16) = v31;
        uint64_t v183 = *(void *)(v9 + 8);
        *(void *)(v9 + 8) = *(void *)(v9 + 24);
        *(void *)(v9 + 24) = v183;
        unsigned int v184 = *(a2 - 4);
        if (v184 < v31)
        {
          *(_DWORD *)(v9 + 16) = v184;
          *(a2 - 4) = (int)v31;
          *(void *)(v9 + 24) = *((void *)a2 - 1);
          *((void *)a2 - 1) = v183;
        }
        return result;
      }
      i += v88;
      unint64_t v102 = (int *)(v92 - 16);
      if (v92 - 16 != v9)
      {
LABEL_76:
        *(_DWORD *)unint64_t v9 = *(_DWORD *)(i - 16);
        *(void *)(v9 + 8) = *(void *)(i - 8);
      }
LABEL_77:
      *(_DWORD *)(i - 16) = v31;
      *(void *)(i - 8) = v89;
      if (v92 < (unint64_t)v93)
      {
LABEL_80:
        BOOL result = std::__introsort<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::finalizeArgumentBufferStruct(unsigned int,WTF::Vector<std::pair<unsigned int,WGSL::AST::StructureMember *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,std::pair<unsigned int,WGSL::AST::StructureMember *>*,false>(v9, v102, a3, a4 & 1);
        a4 = 0;
        goto LABEL_3;
      }
      BOOL v103 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::finalizeArgumentBufferStruct(unsigned int,WTF::Vector<std::pair<unsigned int,WGSL::AST::StructureMember *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,std::pair<unsigned int,WGSL::AST::StructureMember *>*>(v9, v102);
      BOOL result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::finalizeArgumentBufferStruct(unsigned int,WTF::Vector<std::pair<unsigned int,WGSL::AST::StructureMember *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,std::pair<unsigned int,WGSL::AST::StructureMember *>*>(i, a2);
      if (!result)
      {
        if (v103) {
          goto LABEL_3;
        }
        goto LABEL_80;
      }
      a2 = v102;
      if (v103) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v89 = *(void *)(i + 8);
    if (v31 < *(a2 - 4))
    {
      unsigned int v104 = (int *)(i + 16);
      do
      {
        if (v104 == a2) {
          goto LABEL_196;
        }
        unsigned int v105 = *v104;
        v104 += 4;
      }
      while (v31 >= v105);
      unint64_t i = (unint64_t)(v104 - 4);
    }
    else
    {
      unint64_t v106 = i + 16;
      do
      {
        unint64_t i = v106;
        if (v106 >= (unint64_t)a2) {
          break;
        }
        v106 += 16;
      }
      while (v31 >= *(_DWORD *)i);
    }
    unsigned int v107 = a2;
    if (i < (unint64_t)a2)
    {
      unsigned int v107 = a2;
      while (v107 != (int *)v9)
      {
        unsigned int v108 = *(v107 - 4);
        v107 -= 4;
        if (v31 >= v108) {
          goto LABEL_95;
        }
      }
      goto LABEL_196;
    }
LABEL_95:
    if (i < (unint64_t)v107)
    {
      unsigned int v109 = *(_DWORD *)i;
      unsigned int v110 = *v107;
      do
      {
        *(_DWORD *)unint64_t i = v110;
        *unsigned int v107 = v109;
        uint64_t v111 = *(void *)(i + 8);
        *(void *)(i + 8) = *((void *)v107 + 1);
        *((void *)v107 + 1) = v111;
        unsigned int v112 = (int *)(i + 16);
        do
        {
          if (v112 == a2) {
            goto LABEL_196;
          }
          unsigned int v113 = *v112;
          v112 += 4;
          unsigned int v109 = v113;
        }
        while (v31 >= v113);
        unint64_t i = (unint64_t)(v112 - 4);
        do
        {
          if (v107 == (int *)v9) {
            goto LABEL_196;
          }
          unsigned int v114 = *(v107 - 4);
          v107 -= 4;
          unsigned int v110 = v114;
        }
        while (v31 < v114);
      }
      while (i < (unint64_t)v107);
    }
    BOOL v4 = i - 16 >= v9;
    BOOL v5 = i - 16 == v9;
    if (i - 16 != v9)
    {
      *(_DWORD *)unint64_t v9 = *(_DWORD *)(i - 16);
      *(void *)(v9 + 8) = *(void *)(i - 8);
    }
    a4 = 0;
    *(_DWORD *)(i - 16) = v31;
  }
  if ((int *)i == a2) {
    return result;
  }
  int64_t v142 = (unint64_t)(v12 - 2) >> 1;
  int64_t v143 = v142;
  while (2)
  {
    if (v142 >= v143)
    {
      uint64_t v145 = (2 * v143) | 1;
      unint64_t v146 = i + 16 * v145;
      if (2 * v143 + 2 >= v12)
      {
        unsigned int v147 = *(_DWORD *)v146;
        uint64_t v149 = i + 16 * v143;
        unsigned int v150 = *(_DWORD *)v149;
        if (*(_DWORD *)v146 >= *(_DWORD *)v149)
        {
LABEL_155:
          uint64_t v151 = *(void *)(v149 + 8);
          while (1)
          {
            BOOL result = v149;
            uint64_t v149 = v146;
            *(_DWORD *)BOOL result = v147;
            *(void *)(result + 8) = *(void *)(v146 + 8);
            if (v142 < v145) {
              break;
            }
            BOOL result = (2 * v145) | 1;
            unint64_t v146 = i + 16 * result;
            uint64_t v145 = 2 * v145 + 2;
            if (v145 < v12)
            {
              unsigned int v147 = *(_DWORD *)v146;
              unsigned int v152 = *(_DWORD *)(v146 + 16);
              if (*(_DWORD *)v146 <= v152) {
                unsigned int v147 = *(_DWORD *)(v146 + 16);
              }
              if (*(_DWORD *)v146 >= v152) {
                uint64_t v145 = result;
              }
              else {
                v146 += 16;
              }
              if (v147 < v150) {
                break;
              }
            }
            else
            {
              unsigned int v147 = *(_DWORD *)v146;
              uint64_t v145 = result;
              if (*(_DWORD *)v146 < v150) {
                break;
              }
            }
          }
          *(_DWORD *)uint64_t v149 = v150;
          *(void *)(v149 + 8) = v151;
        }
      }
      else
      {
        unsigned int v147 = *(_DWORD *)(v146 + 16);
        BOOL v148 = *(_DWORD *)v146 >= v147;
        if (*(_DWORD *)v146 > v147) {
          unsigned int v147 = *(_DWORD *)v146;
        }
        if (!v148)
        {
          v146 += 16;
          uint64_t v145 = 2 * v143 + 2;
        }
        uint64_t v149 = i + 16 * v143;
        unsigned int v150 = *(_DWORD *)v149;
        if (v147 >= *(_DWORD *)v149) {
          goto LABEL_155;
        }
      }
    }
    BOOL v144 = v143-- <= 0;
    if (!v144) {
      continue;
    }
    break;
  }
  uint64_t v153 = (unint64_t)v11 >> 4;
  do
  {
    uint64_t v154 = 0;
    unsigned int v155 = *(_DWORD *)i;
    uint64_t v156 = *(void *)(i + 8);
    int64_t v157 = (unint64_t)(v153 - 2) >> 1;
    unint64_t v158 = i;
    do
    {
      while (1)
      {
        uint64_t v160 = v158 + 16 * v154 + 16;
        uint64_t v161 = (2 * v154) | 1;
        uint64_t v154 = 2 * v154 + 2;
        if (v154 < v153) {
          break;
        }
        uint64_t v154 = v161;
        *(_DWORD *)unint64_t v158 = *(_DWORD *)v160;
        *(void *)(v158 + 8) = *(void *)(v160 + 8);
        unint64_t v158 = v160;
        if (v161 > v157) {
          goto LABEL_177;
        }
      }
      int v159 = *(_DWORD *)v160;
      BOOL result = *(unsigned int *)(v160 + 16);
      if (*(_DWORD *)v160 <= result) {
        int v159 = *(_DWORD *)(v160 + 16);
      }
      if (*(_DWORD *)v160 >= result) {
        uint64_t v154 = v161;
      }
      else {
        v160 += 16;
      }
      *(_DWORD *)unint64_t v158 = v159;
      *(void *)(v158 + 8) = *(void *)(v160 + 8);
      unint64_t v158 = v160;
    }
    while (v154 <= v157);
LABEL_177:
    if ((int *)v160 == a2 - 4)
    {
      *(_DWORD *)uint64_t v160 = v155;
      *(void *)(v160 + 8) = v156;
    }
    else
    {
      *(_DWORD *)uint64_t v160 = *(a2 - 4);
      *(void *)(v160 + 8) = *((void *)a2 - 1);
      *(a2 - 4) = v155;
      *((void *)a2 - 1) = v156;
      uint64_t v162 = v160 - i + 16;
      if (v162 >= 17)
      {
        unint64_t v163 = (((unint64_t)v162 >> 4) - 2) >> 1;
        uint64_t v164 = i + 16 * v163;
        int v165 = *(_DWORD *)v164;
        unsigned int v166 = *(_DWORD *)v160;
        if (*(_DWORD *)v164 < *(_DWORD *)v160)
        {
          uint64_t v167 = *(void *)(v160 + 8);
          do
          {
            uint64_t v168 = v160;
            uint64_t v160 = v164;
            *(_DWORD *)uint64_t v168 = v165;
            *(void *)(v168 + 8) = *(void *)(v164 + 8);
            if (!v163) {
              break;
            }
            unint64_t v163 = (v163 - 1) >> 1;
            uint64_t v164 = i + 16 * v163;
            int v165 = *(_DWORD *)v164;
          }
          while (*(_DWORD *)v164 < v166);
          *(_DWORD *)uint64_t v160 = v166;
          *(void *)(v160 + 8) = v167;
        }
      }
    }
    a2 -= 4;
    BOOL v144 = v153-- <= 2;
  }
  while (!v144);
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::finalizeArgumentBufferStruct(unsigned int,WTF::Vector<std::pair<unsigned int,WGSL::AST::StructureMember *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,std::pair<unsigned int,WGSL::AST::StructureMember *>*>(uint64_t a1, int *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(a2 - 4);
      unsigned int v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1)
      {
        *(_DWORD *)a1 = v6;
        *(a2 - 4) = v7;
        goto LABEL_8;
      }
      return result;
    case 3:
      unsigned int v8 = *(_DWORD *)(a1 + 16);
      unsigned int v9 = *(_DWORD *)a1;
      unsigned int v10 = *(a2 - 4);
      if (v8 >= *(_DWORD *)a1)
      {
        if (v10 < v8)
        {
          *(_DWORD *)(a1 + 16) = v10;
          *(a2 - 4) = v8;
          uint64_t v28 = *(void *)(a1 + 24);
          *(void *)(a1 + 24) = *((void *)a2 - 1);
          *((void *)a2 - 1) = v28;
          unsigned int v29 = *(_DWORD *)(a1 + 16);
          unsigned int v30 = *(_DWORD *)a1;
          if (v29 < *(_DWORD *)a1)
          {
            *(_DWORD *)a1 = v29;
            *(_DWORD *)(a1 + 16) = v30;
            uint64_t v31 = *(void *)(a1 + 8);
            *(void *)(a1 + 8) = *(void *)(a1 + 24);
            *(void *)(a1 + 24) = v31;
          }
        }
      }
      else if (v10 >= v8)
      {
        *(_DWORD *)a1 = v8;
        *(_DWORD *)(a1 + 16) = v9;
        uint64_t v35 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a1 + 24);
        *(void *)(a1 + 24) = v35;
        unsigned int v36 = *(a2 - 4);
        if (v36 < v9)
        {
          *(_DWORD *)(a1 + 16) = v36;
          *(a2 - 4) = v9;
          *(void *)(a1 + 24) = *((void *)a2 - 1);
          *((void *)a2 - 1) = v35;
        }
      }
      else
      {
        *(_DWORD *)a1 = v10;
        *(a2 - 4) = v9;
LABEL_8:
        uint64_t v11 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *((void *)a2 - 1);
        *((void *)a2 - 1) = v11;
      }
      return result;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *>((unsigned int *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32), (unsigned int *)a2 - 4);
      return 1;
    case 5:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WGSL::RewriteGlobalVariables::collectGlobals(void)::$_0 &,std::pair<unsigned int,WTF::String> *>((unsigned int *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32), (unsigned int *)(a1 + 48));
      unsigned int v17 = *(a2 - 4);
      unsigned int v18 = *(_DWORD *)(a1 + 48);
      if (v17 >= v18) {
        return 1;
      }
      *(_DWORD *)(a1 + 48) = v17;
      *(a2 - 4) = v18;
      uint64_t v19 = *(void *)(a1 + 56);
      *(void *)(a1 + 56) = *((void *)a2 - 1);
      *((void *)a2 - 1) = v19;
      unsigned int v20 = *(_DWORD *)(a1 + 48);
      unsigned int v21 = *(_DWORD *)(a1 + 32);
      if (v20 >= v21) {
        return 1;
      }
      *(_DWORD *)(a1 + 32) = v20;
      *(_DWORD *)(a1 + 48) = v21;
      uint64_t v22 = *(void *)(a1 + 40);
      uint64_t v23 = *(void *)(a1 + 56);
      *(void *)(a1 + 40) = v23;
      *(void *)(a1 + 56) = v22;
      unsigned int v24 = *(_DWORD *)(a1 + 16);
      if (v20 >= v24) {
        return 1;
      }
      *(_DWORD *)(a1 + 16) = v20;
      *(_DWORD *)(a1 + 32) = v24;
      uint64_t v25 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = v23;
      *(void *)(a1 + 40) = v25;
      unsigned int v26 = *(_DWORD *)a1;
      if (v20 >= *(_DWORD *)a1) {
        return 1;
      }
      *(_DWORD *)a1 = v20;
      *(_DWORD *)(a1 + 16) = v26;
      uint64_t v27 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = v23;
      *(void *)(a1 + 24) = v27;
      return 1;
    default:
      uint64_t v12 = (unsigned int *)(a1 + 32);
      unsigned int v13 = *(_DWORD *)(a1 + 32);
      unsigned int v14 = *(_DWORD *)(a1 + 16);
      unsigned int v15 = *(_DWORD *)a1;
      if (v14 >= *(_DWORD *)a1)
      {
        if (v13 < v14)
        {
          *(_DWORD *)(a1 + 16) = v13;
          *(_DWORD *)(a1 + 32) = v14;
          uint64_t v32 = *(void *)(a1 + 24);
          uint64_t v33 = *(void *)(a1 + 40);
          *(void *)(a1 + 24) = v33;
          *(void *)(a1 + 40) = v32;
          if (v13 < v15)
          {
            *(_DWORD *)a1 = v13;
            *(_DWORD *)(a1 + 16) = v15;
            uint64_t v34 = *(void *)(a1 + 8);
            *(void *)(a1 + 8) = v33;
            *(void *)(a1 + 24) = v34;
          }
        }
      }
      else if (v13 >= v14)
      {
        *(_DWORD *)a1 = v14;
        *(_DWORD *)(a1 + 16) = v15;
        uint64_t v37 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a1 + 24);
        *(void *)(a1 + 24) = v37;
        if (v13 < v15)
        {
          *(_DWORD *)(a1 + 16) = v13;
          *(_DWORD *)(a1 + 32) = v15;
          *(void *)(a1 + 24) = *(void *)(a1 + 40);
          *(void *)(a1 + 40) = v37;
        }
      }
      else
      {
        *(_DWORD *)a1 = v13;
        *(_DWORD *)(a1 + 32) = v15;
        uint64_t v16 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a1 + 40);
        *(void *)(a1 + 40) = v16;
      }
      unsigned int v38 = (unsigned int *)(a1 + 48);
      if ((int *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v39 = 0;
      int v40 = 0;
      break;
  }
  while (1)
  {
    unsigned int v41 = *v38;
    unsigned int v42 = *v12;
    if (*v38 < *v12) {
      break;
    }
LABEL_38:
    uint64_t v12 = v38;
    v39 += 16;
    v38 += 4;
    if (v38 == (unsigned int *)a2) {
      return 1;
    }
  }
  uint64_t v43 = *((void *)v38 + 1);
  uint64_t v44 = v39;
  do
  {
    uint64_t v45 = a1 + v44;
    *(_DWORD *)(v45 + 48) = v42;
    *(void *)(v45 + 56) = *(void *)(a1 + v44 + 40);
    if (v44 == -32)
    {
      *(_DWORD *)a1 = v41;
      *(void *)(a1 + 8) = v43;
      if (++v40 != 8) {
        goto LABEL_38;
      }
      return v38 + 4 == (unsigned int *)a2;
    }
    unsigned int v42 = *(_DWORD *)(v45 + 16);
    v44 -= 16;
  }
  while (v41 < v42);
  *(_DWORD *)(a1 + v44 + 48) = v41;
  *(void *)(a1 + v44 + 56) = v43;
  if (++v40 != 8) {
    goto LABEL_38;
  }
  return v38 + 4 == (unsigned int *)a2;
}

unsigned char *WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(unsigned char *result, unsigned char *a2, uint64_t a3, unsigned char *a4, uint64_t a5, unsigned char *a6, uint64_t a7, unsigned char *a8, uint64_t a9)
{
  if (a3) {
    size_t v9 = a3 - 1;
  }
  else {
    size_t v9 = 0;
  }
  if (v9 >> 31) {
    goto LABEL_46;
  }
  if (a5) {
    size_t v10 = a5 - 1;
  }
  else {
    size_t v10 = 0;
  }
  if (v10 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x182578944);
  }
  if (a7) {
    size_t v11 = a7 - 1;
  }
  else {
    size_t v11 = 0;
  }
  if (v11 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x182578964);
  }
  size_t v12 = a9 ? a9 - 1 : 0;
  if (v12 >> 31)
  {
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x182578924);
  }
  unsigned int v13 = result;
  int v14 = v11 + v12;
  if (__OFADD__(v11, v12)) {
    goto LABEL_21;
  }
  BOOL v15 = __OFADD__(v10, v14);
  int v16 = v10 + v14;
  if (v15) {
    goto LABEL_21;
  }
  uint64_t v17 = (v9 + v16);
  if (__OFADD__(v9, v16)) {
    goto LABEL_21;
  }
  if (!v17)
  {
    uint64_t v18 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_22;
  }
  if ((v17 & 0x80000000) != 0)
  {
LABEL_21:
    uint64_t v18 = 0;
  }
  else
  {
    BOOL result = (unsigned char *)WTF::tryFastCompactMalloc((WTF *)(v17 + 20));
    uint64_t v18 = v26;
    if (v26)
    {
      uint64_t v22 = (unsigned char *)(v26 + 20);
      *(_DWORD *)uint64_t v26 = 2;
      *(_DWORD *)(v26 + 4) = v17;
      *(void *)(v26 + 8) = v26 + 20;
      *(_DWORD *)(v26 + 16) = 4;
      if (v9)
      {
        if (v9 == 1)
        {
          *uint64_t v22 = *a2;
        }
        else
        {
          BOOL result = memcpy((void *)(v26 + 20), a2, v9);
          uint64_t v22 = (unsigned char *)(v26 + 20);
        }
      }
      uint64_t v23 = &v22[v9];
      if (v10)
      {
        if (v10 == 1) {
          unsigned char *v23 = *a4;
        }
        else {
          BOOL result = memcpy(v23, a4, v10);
        }
      }
      unsigned int v24 = &v23[v10];
      if (v11)
      {
        if (v11 == 1) {
          *unsigned int v24 = *a6;
        }
        else {
          BOOL result = memcpy(&v23[v10], a6, v11);
        }
      }
      if (v12)
      {
        BOOL result = &v24[v11];
        if (v12 == 1) {
          *BOOL result = *a8;
        }
        else {
          BOOL result = memcpy(result, a8, v12);
        }
      }
    }
  }
LABEL_22:
  *unsigned int v13 = v18;
  return result;
}

void *WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral>@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = result[1];
  BOOL v5 = v4 != 0;
  size_t v6 = v4 - 1;
  if (v5) {
    size_t v7 = v6;
  }
  else {
    size_t v7 = 0;
  }
  if (v7 >> 31 || ((v8 = *(void *)(a2 + 8), v5 = v8 != 0, size_t v9 = v8 - 1, v5) ? (v10 = v9) : (v10 = 0), v10 >> 31))
  {
    __break(0xC471u);
    JUMPOUT(0x182578AC4);
  }
  uint64_t v11 = (v7 + v10);
  if (__OFADD__(v7, v10)) {
    goto LABEL_11;
  }
  if (!v11)
  {
    uint64_t v12 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_19;
  }
  if ((v11 & 0x80000000) != 0)
  {
LABEL_11:
    uint64_t v12 = 0;
  }
  else
  {
    unsigned int v13 = (unsigned char *)*result;
    int v14 = *(unsigned char **)a2;
    BOOL result = (void *)WTF::tryFastCompactMalloc((WTF *)(v11 + 20));
    uint64_t v12 = v16;
    if (v16)
    {
      BOOL v15 = (unsigned char *)(v16 + 20);
      *(_DWORD *)uint64_t v16 = 2;
      *(_DWORD *)(v16 + 4) = v11;
      *(void *)(v16 + 8) = v16 + 20;
      *(_DWORD *)(v16 + 16) = 4;
      if (v7)
      {
        if (v7 == 1) {
          *BOOL v15 = *v13;
        }
        else {
          BOOL result = memcpy((void *)(v16 + 20), v13, v7);
        }
      }
      if (v10)
      {
        BOOL result = &v15[v7];
        if (v10 == 1) {
          *(unsigned char *)BOOL result = *v14;
        }
        else {
          BOOL result = memcpy(result, v14, v10);
        }
      }
    }
  }
LABEL_19:
  *a3 = v12;
  return result;
}

unsigned char *WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(unsigned char *result, unsigned char *a2, uint64_t a3, unsigned char *a4, uint64_t a5, unsigned char *a6, uint64_t a7, unsigned char *__src, uint64_t a9, unsigned char *a10, uint64_t a11, unsigned char *a12, uint64_t a13, unsigned char *a14, uint64_t a15, unsigned char *a16, uint64_t a17)
{
  if (a3) {
    unint64_t v18 = a3 - 1;
  }
  else {
    unint64_t v18 = 0;
  }
  if (v18 >> 31) {
    goto LABEL_43;
  }
  if (a5) {
    unint64_t v20 = a5 - 1;
  }
  else {
    unint64_t v20 = 0;
  }
  if (v20 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x182578C7CLL);
  }
  unint64_t v21 = a7 - 1;
  if (!a7) {
    unint64_t v21 = 0;
  }
  if (v21 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x182578C9CLL);
  }
  unint64_t v22 = a9 - 1;
  if (!a9) {
    unint64_t v22 = 0;
  }
  if (v22 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x182578CBCLL);
  }
  unint64_t v23 = a11 - 1;
  if (!a11) {
    unint64_t v23 = 0;
  }
  if (v23 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x182578CDCLL);
  }
  unint64_t v24 = a13 - 1;
  if (!a13) {
    unint64_t v24 = 0;
  }
  if (v24 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x182578CFCLL);
  }
  unint64_t v25 = a15 - 1;
  if (!a15) {
    unint64_t v25 = 0;
  }
  if (v25 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x182578D1CLL);
  }
  unint64_t v26 = a17 - 1;
  if (!a17) {
    unint64_t v26 = 0;
  }
  if (v26 >> 31)
  {
LABEL_43:
    __break(0xC471u);
    JUMPOUT(0x182578C5CLL);
  }
  uint64_t v27 = result;
  int v28 = v25 + v26;
  if (__OFADD__(v25, v26)) {
    goto LABEL_35;
  }
  BOOL v29 = __OFADD__(v24, v28);
  int v30 = v24 + v28;
  if (v29) {
    goto LABEL_35;
  }
  BOOL v29 = __OFADD__(v23, v30);
  int v31 = v23 + v30;
  if (v29
    || (BOOL v29 = __OFADD__(v22, v31), v32 = v22 + v31, v29)
    || (BOOL v29 = __OFADD__(v21, v32), v33 = v21 + v32, v29)
    || (BOOL v29 = __OFADD__(v20, v33), v34 = v20 + v33, v29)
    || __OFADD__(v18, v34))
  {
LABEL_35:
    *(void *)BOOL result = 0;
  }
  else
  {
    BOOL result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v35, (int)v18 + v34, a2, v18, a4, v20, a6, v21, __src, v22, a10, v23, a12, v24, a14, v25, a16, v26);
    void *v27 = v35;
  }
  return result;
}

unsigned char *WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(unsigned char *result, unsigned int a2, unsigned char *a3, unsigned int a4, unsigned char *a5, unsigned int a6, unsigned char *a7, unsigned int a8, unsigned char *__src, uint64_t a10, unsigned char *a11, uint64_t a12, unsigned char *a13, uint64_t a14, unsigned char *a15, uint64_t a16, unsigned char *a17, uint64_t a18)
{
  unint64_t v18 = result;
  if (!a2)
  {
    uint64_t v26 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_45;
  }
  if ((a2 & 0x80000000) != 0)
  {
    uint64_t v26 = 0;
    goto LABEL_45;
  }
  BOOL result = (unsigned char *)WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
  uint64_t v26 = v39;
  if (v39)
  {
    uint64_t v27 = (unsigned char *)(v39 + 20);
    *(_DWORD *)uint64_t v39 = 2;
    *(_DWORD *)(v39 + 4) = a2;
    *(void *)(v39 + 8) = v39 + 20;
    *(_DWORD *)(v39 + 16) = 4;
    if (a4)
    {
      if (a4 != 1)
      {
        BOOL result = memcpy((void *)(v39 + 20), a3, a4);
        int v28 = &v27[a4];
        if (!a6) {
          goto LABEL_14;
        }
LABEL_12:
        if (a6 != 1)
        {
          BOOL result = memcpy(v28, a5, a6);
          unsigned int v29 = a10;
          int v30 = &v28[a6];
          if (!a8) {
            goto LABEL_19;
          }
LABEL_17:
          if (a8 != 1)
          {
            BOOL result = memcpy(v30, a7, a8);
            unsigned int v31 = a12;
            int v32 = &v30[a8];
            if (!v29) {
              goto LABEL_24;
            }
LABEL_22:
            if (v29 != 1)
            {
              BOOL result = memcpy(v32, __src, v29);
              unsigned int v33 = a14;
              int v34 = &v32[v29];
              if (!v31) {
                goto LABEL_29;
              }
LABEL_27:
              if (v31 != 1)
              {
                BOOL result = memcpy(v34, a11, v31);
                unsigned int v35 = a16;
                unsigned int v36 = &v34[v31];
                if (!v33) {
                  goto LABEL_34;
                }
LABEL_32:
                if (v33 != 1)
                {
                  BOOL result = memcpy(v36, a13, v33);
                  unsigned int v37 = a18;
                  unsigned int v38 = &v36[v33];
                  if (!v35) {
                    goto LABEL_39;
                  }
LABEL_37:
                  if (v35 != 1)
                  {
                    BOOL result = memcpy(v38, a15, v35);
                    if (!v37) {
                      goto LABEL_45;
                    }
                    goto LABEL_42;
                  }
                  *unsigned int v38 = *a15;
LABEL_39:
                  if (!v37) {
                    goto LABEL_45;
                  }
LABEL_42:
                  BOOL result = &v38[v35];
                  if (v37 == 1) {
                    *BOOL result = *a17;
                  }
                  else {
                    BOOL result = memcpy(result, a17, v37);
                  }
                  goto LABEL_45;
                }
                unsigned char *v36 = *a13;
LABEL_34:
                unsigned int v37 = a18;
                unsigned int v38 = &v36[v33];
                if (!v35) {
                  goto LABEL_39;
                }
                goto LABEL_37;
              }
              *int v34 = *a11;
LABEL_29:
              unsigned int v35 = a16;
              unsigned int v36 = &v34[v31];
              if (!v33) {
                goto LABEL_34;
              }
              goto LABEL_32;
            }
            *int v32 = *__src;
LABEL_24:
            unsigned int v33 = a14;
            int v34 = &v32[v29];
            if (!v31) {
              goto LABEL_29;
            }
            goto LABEL_27;
          }
          *int v30 = *a7;
LABEL_19:
          unsigned int v31 = a12;
          int v32 = &v30[a8];
          if (!v29) {
            goto LABEL_24;
          }
          goto LABEL_22;
        }
        unsigned char *v28 = *a5;
LABEL_14:
        unsigned int v29 = a10;
        int v30 = &v28[a6];
        if (!a8) {
          goto LABEL_19;
        }
        goto LABEL_17;
      }
      unsigned char *v27 = *a3;
    }
    int v28 = &v27[a4];
    if (!a6) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
LABEL_45:
  void *v18 = v26;
  return result;
}

uint64_t WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if (*(void *)(a1 + 32 * i) != -1)
      {
        uint64_t v5 = a1 + 32 * i;
        size_t v6 = *(WTF **)(v5 + 16);
        while (v6)
        {
          uint64_t v8 = v6;
          size_t v6 = (WTF *)*((void *)v6 + 2);
          size_t v9 = *(_DWORD **)v8;
          *(void *)uint64_t v8 = 0;
          if (v9)
          {
            if (*v9 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v9 -= 2;
            }
          }
          WTF::fastFree(v8, a2);
        }
        uint64_t v7 = *(void *)(v5 + 8);
        if (v7) {
          WTF::fastFree((WTF *)(v7 - 16), a2);
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t *WTF::HashTable<WGSL::AST::Function *,WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashMap<WGSL::AST::Function *,WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>,WTF::DefaultHash<WGSL::AST::Function *>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTraits<WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Function *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 32 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v5;
    uint64_t v46 = v5;
    do
    {
      int v14 = (uint64_t *)(v4 + 32 * v11);
      uint64_t v15 = *v14;
      if (*v14 != -1)
      {
        if (v15)
        {
          uint64_t v21 = *a1;
          if (*a1) {
            int v22 = *(_DWORD *)(v21 - 8);
          }
          else {
            int v22 = 0;
          }
          unint64_t v23 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
          unint64_t v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
          unint64_t v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
          unsigned int v26 = v22 & ((v25 >> 31) ^ v25);
          int v27 = 1;
          do
          {
            unsigned int v28 = v26;
            uint64_t v29 = *(void *)(v21 + 32 * v26);
            unsigned int v26 = (v26 + v27++) & v22;
          }
          while (v29);
          uint64_t v30 = v28;
          unsigned int v31 = (uint64_t *)(v21 + 32 * v28);
          int v32 = (WTF *)v31[2];
          while (v32)
          {
            unsigned int v41 = v32;
            int v32 = (WTF *)*((void *)v32 + 2);
            unsigned int v42 = *(_DWORD **)v41;
            *(void *)unsigned int v41 = 0;
            if (v42)
            {
              if (*v42 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *v42 -= 2;
              }
            }
            WTF::fastFree(v41, v8);
          }
          unsigned int v33 = v31 + 1;
          uint64_t v34 = v31[1];
          if (v34) {
            WTF::fastFree((WTF *)(v34 - 16), v8);
          }
          *unsigned int v31 = *v14;
          uint64_t v35 = v4 + 32 * v11;
          *unsigned int v33 = 0;
          uint64_t v37 = *(void *)(v35 + 8);
          unsigned int v36 = (void *)(v35 + 8);
          void *v36 = 0;
          *unsigned int v33 = v37;
          uint64_t v38 = v36[1];
          v36[1] = 0;
          void v31[2] = v38;
          int v40 = (WTF *)v36[1];
          uint64_t v39 = v36[2];
          v36[2] = 0;
          *(void *)(v21 + 32 * v30 + 24) = v39;
          while (v40)
          {
            uint64_t v43 = v40;
            int v40 = (WTF *)*((void *)v40 + 2);
            uint64_t v44 = *(_DWORD **)v43;
            *(void *)uint64_t v43 = 0;
            if (v44)
            {
              if (*v44 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *v44 -= 2;
              }
            }
            WTF::fastFree(v43, v8);
          }
          if (*v36) {
            WTF::fastFree((WTF *)(*v36 - 16), v8);
          }
          uint64_t v13 = v46;
          if (v14 == a3) {
            uint64_t v12 = v31;
          }
        }
        else
        {
          uint64_t v16 = v4 + 32 * v11;
          uint64_t v17 = *(WTF **)(v16 + 16);
          while (v17)
          {
            uint64_t v19 = v17;
            uint64_t v17 = (WTF *)*((void *)v17 + 2);
            unint64_t v20 = *(_DWORD **)v19;
            *(void *)uint64_t v19 = 0;
            if (v20)
            {
              if (*v20 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *v20 -= 2;
              }
            }
            WTF::fastFree(v19, v8);
          }
          uint64_t v18 = *(void *)(v16 + 8);
          if (v18) {
            WTF::fastFree((WTF *)(v18 - 16), v8);
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    uint64_t v12 = 0;
    BOOL result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl ***a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    while (1)
    {
      uint64_t v13 = (WTF::StringImpl ***)(v6 + 8 * v11);
      int v14 = *v13;
      if ((unint64_t)*v13 + 1 >= 2) {
        break;
      }
LABEL_6:
      if (++v11 == v7) {
        goto LABEL_19;
      }
    }
    uint64_t v15 = *a1;
    if (*a1)
    {
      int v16 = *(_DWORD *)(v15 - 8);
      uint64_t v17 = *v14;
      unsigned int v18 = *((_DWORD *)*v14 + 4);
      if (v18 >= 0x100)
      {
LABEL_10:
        unsigned int v19 = v18 >> 8;
        goto LABEL_13;
      }
    }
    else
    {
      int v16 = 0;
      uint64_t v17 = *v14;
      unsigned int v18 = *((_DWORD *)*v14 + 4);
      if (v18 >= 0x100) {
        goto LABEL_10;
      }
    }
    unsigned int v19 = WTF::StringImpl::hashSlowCase(v17);
LABEL_13:
    int v20 = 0;
    do
    {
      uint64_t v21 = v19 & v16;
      unsigned int v19 = ++v20 + v21;
    }
    while (*(void *)(v15 + 8 * v21));
    *(void *)(v15 + 8 * v21) = *v13;
    if (v13 == a3) {
      uint64_t v12 = v15 + 8 * v21;
    }
    goto LABEL_6;
  }
  uint64_t v12 = 0;
  uint64_t result = 0;
  if (v6)
  {
LABEL_19:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

void std::__function::__func<void WGSL::ShaderModule::insert<std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long,std::reference_wrapper<WGSL::AST::Statement>&&)::{lambda(void)#1},std::allocator<std::reference_wrapper<WGSL::AST::Statement>&&>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<void WGSL::ShaderModule::insert<std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long,std::reference_wrapper<WGSL::AST::Statement>&&)::{lambda(void)#1},std::allocator<std::reference_wrapper<WGSL::AST::Statement>&&>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1ECABD1C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void WGSL::ShaderModule::insert<std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long,std::reference_wrapper<WGSL::AST::Statement>&&)::{lambda(void)#1},std::allocator<std::reference_wrapper<WGSL::AST::Statement>&&>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1ECABD1C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<void WGSL::ShaderModule::insert<std::reference_wrapper<WGSL::AST::Statement>,0ul>(WTF::Vector<std::reference_wrapper<WGSL::AST::Statement>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long,std::reference_wrapper<WGSL::AST::Statement>&&)::{lambda(void)#1},std::allocator<std::reference_wrapper<WGSL::AST::Statement>&&>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)v1 + 8 * *(void *)(a1 + 16);
  __n128 result = memmove((void *)v2, (const void *)(v2 + 8), *(void *)v1 + 8 * *(unsigned int *)(v1 + 12) - (v2 + 8));
  --*(_DWORD *)(v1 + 12);
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST14CallExpressionENS5_16BinaryExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED1Ev(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1ECABD208;
  uint64_t v3 = *(WTF **)(a1 + 88);
  if (v3)
  {
    *(void *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v3, a2);
  }
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v4 = *(unsigned int *)(a1 + 64);
    if (v4 != -1) {
      ((void (*)(char *, uint64_t))off_1ECABCE68[v4])(&v6, a1 + 48);
    }
    *(_DWORD *)(a1 + 64) = -1;
  }
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST14CallExpressionENS5_16BinaryExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEED0Ev(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1ECABD208;
  uint64_t v3 = *(WTF **)(a1 + 88);
  if (v3)
  {
    *(void *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v3, a2);
  }
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v4 = *(unsigned int *)(a1 + 64);
    if (v4 != -1) {
      ((void (*)(char *, uint64_t))off_1ECABCE68[v4])(&v6, a1 + 48);
    }
    *(_DWORD *)(a1 + 64) = -1;
  }
  return MEMORY[0x18530AFF0](a1, 0x10F3C40E4E4A046);
}

void *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST14CallExpressionENS5_16BinaryExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = operator new(0x70uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t v2 = &unk_1ECABD208;
  v2[1] = v3;
  WGSL::AST::CallExpression::CallExpression((uint64_t)(v2 + 2), (const WGSL::AST::CallExpression *)(a1 + 16));
  return v2;
}

uint64_t _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST14CallExpressionENS5_16BinaryExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7__cloneEPNS0_6__baseISJ_EE(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_1ECABD208;
  a2[1] = v2;
  return WGSL::AST::CallExpression::CallExpression((uint64_t)(a2 + 2), (const WGSL::AST::CallExpression *)(a1 + 16));
}

WTF *_ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST14CallExpressionENS5_16BinaryExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE7destroyEv(uint64_t a1, void *a2)
{
  __n128 result = *(WTF **)(a1 + 88);
  if (result)
  {
    *(void *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    __n128 result = (WTF *)WTF::fastFree(result, a2);
  }
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v4 = *(unsigned int *)(a1 + 64);
    if (v4 != -1) {
      __n128 result = (WTF *)((uint64_t (*)(char *, uint64_t))off_1ECABCE68[v4])(&v5, a1 + 48);
    }
    *(_DWORD *)(a1 + 64) = -1;
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST14CallExpressionENS5_16BinaryExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEE18destroy_deallocateEv(void *__p, void *a2)
{
  uint64_t v3 = (WTF *)__p[11];
  if (v3)
  {
    __p[11] = 0;
    *((_DWORD *)__p + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  __p[2] = &unk_1ECABBFE0;
  if (*((unsigned char *)__p + 72))
  {
    uint64_t v4 = *((unsigned int *)__p + 16);
    if (v4 != -1) {
      ((void (*)(char *, void *))off_1ECABCE68[v4])(&v5, __p + 6);
    }
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST14CallExpressionENS5_16BinaryExpressionEEENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vISA_NS5_10ExpressionEEEvE4typeERS9_RSA_EUlvE_NS_9allocatorISG_EEFvvEEclEv(uint64_t a1)
{
  uint64_t result = (***(uint64_t (****)(void))(a1 + 8))(*(void *)(a1 + 8));
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)uint64_t v3 = &unk_1ECABC008;
  *(_OWORD *)(v3 + 8) = *(_OWORD *)(a1 + 24);
  *(void *)uint64_t v3 = &unk_1ECABBFE0;
  *(void *)(v3 + 24) = *(void *)(a1 + 40);
  *(unsigned char *)(v3 + 32) = 0;
  *(unsigned char *)(v3 + 56) = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    *(_DWORD *)(v3 + 48) = -1;
    uint64_t v4 = *(unsigned int *)(a1 + 64);
    if (v4 != -1)
    {
      uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1ECABCF18[v4])(&v7, v3 + 32, a1 + 48);
      *(_DWORD *)(v3 + 48) = v4;
    }
    *(unsigned char *)(v3 + 56) = 1;
  }
  *(void *)uint64_t v3 = &unk_1ECABC058;
  uint64_t v5 = *(void *)(a1 + 80);
  *(void *)(v3 + 72) = 0;
  *(void *)(v3 + 80) = 0;
  *(void *)(v3 + 64) = v5;
  uint64_t v6 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  *(void *)(v3 + 72) = v6;
  LODWORD(v6) = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 96) = 0;
  *(_DWORD *)(v3 + 80) = v6;
  LODWORD(v6) = *(_DWORD *)(a1 + 100);
  *(_DWORD *)(a1 + 100) = 0;
  *(_DWORD *)(v3 + 84) = v6;
  *(_WORD *)(v3 + 88) = *(_WORD *)(a1 + 104);
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::RewriteGlobalVariables::Global>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::RewriteGlobalVariables::Global>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::RewriteGlobalVariables::Global,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::RewriteGlobalVariables::Global>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 32 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = v7;
    while (1)
    {
      int v16 = (WTF::StringImpl **)(v6 + 32 * v13);
      uint64_t v17 = *v16;
      if (*v16 != (WTF::StringImpl *)-1)
      {
        if (v17)
        {
          uint64_t v18 = *a1;
          if (*a1)
          {
            int v19 = *(_DWORD *)(v18 - 8);
            unsigned int v20 = *((_DWORD *)v17 + 4);
            if (v20 >= 0x100) {
              goto LABEL_14;
            }
LABEL_16:
            unsigned int v21 = WTF::StringImpl::hashSlowCase(v17);
          }
          else
          {
            int v19 = 0;
            unsigned int v20 = *((_DWORD *)v17 + 4);
            if (v20 < 0x100) {
              goto LABEL_16;
            }
LABEL_14:
            unsigned int v21 = v20 >> 8;
          }
          int v22 = 0;
          do
          {
            uint64_t v23 = v21 & v19;
            unsigned int v21 = ++v22 + v23;
          }
          while (*(void *)(v18 + 32 * v23));
          uint64_t v24 = v18 + 32 * v23;
          *(void *)uint64_t v24 = 0;
          unint64_t v25 = *v16;
          WTF *v16 = 0;
          *(void *)uint64_t v24 = v25;
          uint64_t v26 = v6 + 32 * v13;
          long long v27 = *(_OWORD *)(v26 + 8);
          *(void *)(v24 + 24) = *(void *)(v26 + 24);
          *(_OWORD *)(v24 + 8) = v27;
          unsigned int v28 = *v16;
          WTF *v16 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *(_DWORD *)v28 -= 2;
            }
          }
          if (v16 == a3) {
            uint64_t v14 = v24;
          }
          goto LABEL_9;
        }
        WTF *v16 = 0;
      }
LABEL_9:
      if (++v13 == v15) {
        goto LABEL_27;
      }
    }
  }
  uint64_t v14 = 0;
  uint64_t result = 0;
  if (v6)
  {
LABEL_27:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v14;
  }
  return result;
}

uint64_t WTF::HashTable<std::tuple<unsigned int,unsigned int>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned int>,WGSL::AST::Variable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned int>,WGSL::AST::Variable *>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned int>>,WTF::HashMap<std::tuple<unsigned int,unsigned int>,WGSL::AST::Variable *,WTF::DefaultHash<std::tuple<unsigned int,unsigned int>>,WTF::HashTraits<std::tuple<unsigned int,unsigned int>>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned int>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v10 = (unsigned int *)(v4 + 16 * i);
      unsigned int v11 = *v10;
      if (*v10 != -1)
      {
        unsigned int v12 = v10[1];
        if (v11 | v12)
        {
          uint64_t v13 = *a1;
          if (*a1) {
            int v14 = *(_DWORD *)(v13 - 8);
          }
          else {
            int v14 = 0;
          }
          int8x8_t v15 = (int8x8_t)vadd_s32((int32x2_t)__PAIR64__(v11, v12), (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32((int32x2_t)__PAIR64__(v11, v12), 0xFuLL)));
          int8x8_t v16 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v15, 0xAuLL), v15), (int32x2_t)0x900000009);
          int32x2_t v17 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v16, 6uLL), v16);
          int8x8_t v18 = (int8x8_t)vadd_s32(v17, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v17, 0xBuLL)));
          int32x2_t v19 = vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v18, 0x10uLL), v18), (int32x2_t)0x109132F905AC73FELL);
          unsigned int v20 = v14 & ((0xD7862706ELL * (unint64_t)vadd_s32(v19, vdup_lane_s32(v19, 1)).u32[0]) >> 4);
          int v21 = 1;
          do
          {
            uint64_t v22 = v13 + 16 * v20;
            int v8 = (void *)*(unsigned int *)(v22 + 4);
            unsigned int v20 = (v20 + v21++) & v14;
          }
          while (*(void *)v22);
          *(_OWORD *)uint64_t v22 = *(_OWORD *)v10;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

int *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    uint64_t v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
    uint64_t v9 = v7 + 16;
    if (!a2) {
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
    uint64_t v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
    uint64_t v9 = v7 + 16;
    if (!a2) {
      goto LABEL_7;
    }
  }
  uint64_t v10 = a2;
  unsigned int v11 = (void *)(v7 + 24);
  do
  {
    *((_DWORD *)v11 - 2) = -1;
    *unsigned int v11 = 0;
    v11[1] = 0;
    v11 += 3;
    --v10;
  }
  while (v10);
LABEL_7:
  *a1 = v9;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = v5;
    uint64_t v56 = v4;
    uint64_t v52 = v5;
    do
    {
      int8x8_t v15 = (int *)(v4 + 24 * v12);
      int v16 = *v15;
      if (*v15 != -2)
      {
        if (v16 == -1)
        {
          uint64_t v17 = v4 + 24 * v12;
          int8x8_t v18 = (WTF **)(v17 + 8);
          uint64_t v19 = *(unsigned int *)(v17 + 20);
          if (v19)
          {
            uint64_t v20 = 16 * v19;
            int v21 = (_DWORD **)((char *)*v18 + 8);
            do
            {
              uint64_t v22 = *v21;
              uint64_t *v21 = 0;
              if (v22)
              {
                if (*v22 == 2) {
                  WTF::StringImpl::destroy();
                }
                else {
                  *v22 -= 2;
                }
              }
              v21 += 2;
              v20 -= 16;
            }
            while (v20);
          }
          unint64_t v25 = *v18;
          if (*v18)
          {
            void *v18 = 0;
            *(_DWORD *)(v4 + 24 * v12 + 16) = 0;
            WTF::fastFree(v25, v8);
          }
        }
        else
        {
          uint64_t v23 = *a1;
          unsigned int v55 = v13;
          if (*a1) {
            int v24 = *(_DWORD *)(v23 - 8);
          }
          else {
            int v24 = 0;
          }
          int v26 = 0;
          unsigned int v27 = 9 * ((v16 + ~(v16 << 15)) ^ ((v16 + ~(v16 << 15)) >> 10));
          unsigned int v28 = ((v27 ^ (v27 >> 6)) + ~((v27 ^ (v27 >> 6)) << 11)) ^ (((v27 ^ (v27 >> 6)) + ~((v27 ^ (v27 >> 6)) << 11)) >> 16);
          do
          {
            unsigned int v29 = v28 & v24;
            uint64_t v30 = (int *)(v23 + 24 * (v28 & v24));
            unsigned int v28 = ++v26 + (v28 & v24);
          }
          while (*v30 != -1);
          uint64_t v31 = v23 + 24 * v29;
          unsigned int v34 = *(_DWORD *)(v31 + 20);
          unsigned int v33 = (_DWORD *)(v31 + 20);
          uint64_t v32 = v34;
          uint64_t v35 = (WTF **)(v33 - 3);
          if (v34)
          {
            uint64_t v36 = 16 * v32;
            uint64_t v37 = (_DWORD **)((char *)*v35 + 8);
            do
            {
              uint64_t v38 = *v37;
              *uint64_t v37 = 0;
              if (v38)
              {
                if (*v38 == 2) {
                  WTF::StringImpl::destroy();
                }
                else {
                  *v38 -= 2;
                }
              }
              v37 += 2;
              v36 -= 16;
            }
            while (v36);
          }
          uint64_t v39 = *v35;
          if (*v35)
          {
            *uint64_t v35 = 0;
            *(_DWORD *)(v23 + 24 * v29 + 16) = 0;
            WTF::fastFree(v39, v8);
          }
          *uint64_t v30 = *v15;
          uint64_t v40 = v56 + 24 * v12;
          *uint64_t v35 = 0;
          *(void *)(v33 - 1) = 0;
          int v42 = *(_DWORD *)(v40 + 16);
          unsigned int v41 = (_DWORD *)(v40 + 16);
          uint64_t v44 = (WTF **)(v41 - 2);
          uint64_t v43 = (WTF *)*((void *)v41 - 1);
          *((void *)v41 - 1) = 0;
          *uint64_t v35 = v43;
          *unsigned int v41 = 0;
          *(_DWORD *)(v23 + 24 * v29 + 16) = v42;
          int v45 = v41[1];
          v41[1] = 0;
          *unsigned int v33 = v45;
          uint64_t v46 = v41[1];
          uint64_t v13 = v55;
          if (v46)
          {
            uint64_t v47 = 16 * v46;
            uint64_t v48 = (_DWORD **)((char *)*v44 + 8);
            do
            {
              uint64_t v49 = *v48;
              *uint64_t v48 = 0;
              if (v49)
              {
                if (*v49 == 2) {
                  WTF::StringImpl::destroy();
                }
                else {
                  *v49 -= 2;
                }
              }
              v48 += 2;
              v47 -= 16;
            }
            while (v47);
          }
          uint64_t v50 = *v44;
          if (*v44)
          {
            *uint64_t v44 = 0;
            *unsigned int v41 = 0;
            WTF::fastFree(v50, v8);
          }
          uint64_t v14 = v52;
          if (v15 == a3) {
            uint64_t v13 = v30;
          }
          uint64_t v4 = v56;
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v13;
}

unint64_t WTF::Vector<std::pair<unsigned int,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unsigned int v5 = *(void **)a1;
  if (*(void *)a1 > a3 || (uint64_t v6 = *(unsigned int *)(a1 + 12), (unint64_t)v5 + 16 * v6 <= a3))
  {
    unint64_t v14 = *(unsigned int *)(a1 + 8);
    unint64_t v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10) {
      unint64_t v16 = v15 + 1;
    }
    else {
      unint64_t v16 = 16;
    }
    if (v16 <= a2) {
      unint64_t v17 = a2;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17 > v14)
    {
      if (v17 >> 28) {
        goto LABEL_30;
      }
      uint64_t v18 = *(unsigned int *)(a1 + 12);
      uint64_t v19 = (void *)WTF::fastMalloc((WTF *)(16 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(void *)a1 = v19;
      memcpy(v19, v5, 16 * v18);
      if (v5)
      {
        if (*(void **)a1 == v5)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v20);
      }
    }
    return a3;
  }
  unint64_t v7 = *(unsigned int *)(a1 + 8);
  unint64_t v8 = v7 + (v7 >> 2);
  if (v8 >= 0x10) {
    unint64_t v9 = v8 + 1;
  }
  else {
    unint64_t v9 = 16;
  }
  if (v9 <= a2) {
    unint64_t v10 = a2;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 > v7)
  {
    if (!(v10 >> 28))
    {
      unsigned int v11 = (void *)WTF::fastMalloc((WTF *)(16 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(void *)a1 = v11;
      memcpy(v11, v5, 16 * v6);
      uint64_t v13 = *(void **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v12);
        uint64_t v13 = *(void **)a1;
      }
      return (unint64_t)v13 + 16 * ((uint64_t)(a3 - (void)v5) >> 4);
    }
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x18257A488);
  }
  uint64_t v13 = *(void **)a1;
  return (unint64_t)v13 + 16 * ((uint64_t)(a3 - (void)v5) >> 4);
}

void WGSL::AST::ReferenceTypeExpression::~ReferenceTypeExpression(WGSL::AST::ReferenceTypeExpression *this)
{
  *(void *)this = &unk_1ECABBFE0;
  if (*((unsigned char *)this + 56))
  {
    uint64_t v2 = *((unsigned int *)this + 12);
    if (v2 != -1) {
      ((void (*)(char *, char *))off_1ECABCE68[v2])(&v3, (char *)this + 32);
    }
    *((_DWORD *)this + 12) = -1;
  }
}

{
  uint64_t v2;
  char v3;

  *(void *)this = &unk_1ECABBFE0;
  if (*((unsigned char *)this + 56))
  {
    uint64_t v2 = *((unsigned int *)this + 12);
    if (v2 != -1) {
      ((void (*)(char *, char *))off_1ECABCE68[v2])(&v3, (char *)this + 32);
    }
    *((_DWORD *)this + 12) = -1;
  }
  MEMORY[0x18530AFF0](this, 0x10F3C40CABE6EB0);
}

uint64_t WGSL::AST::ReferenceTypeExpression::kind(WGSL::AST::ReferenceTypeExpression *this)
{
  return 61;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1ECABD278;
  *(void *)(a1 + 80) = off_1ECABC030;
  uint64_t v2 = *(_DWORD **)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v2)
  {
    if (*v2 == 2)
    {
      WTF::StringImpl::destroy();
      *(void *)(a1 + 16) = &unk_1ECABBFE0;
      if (!*(unsigned char *)(a1 + 72)) {
        return a1;
      }
      goto LABEL_7;
    }
    *v2 -= 2;
  }
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (!*(unsigned char *)(a1 + 72)) {
    return a1;
  }
LABEL_7:
  uint64_t v4 = *(unsigned int *)(a1 + 64);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1ECABCE68[v4])(&v5, a1 + 48);
  }
  *(_DWORD *)(a1 + 64) = -1;
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1ECABD278;
  *(void *)(a1 + 80) = off_1ECABC030;
  uint64_t v2 = *(_DWORD **)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v2)
  {
    if (*v2 == 2)
    {
      WTF::StringImpl::destroy();
      *(void *)(a1 + 16) = &unk_1ECABBFE0;
      if (!*(unsigned char *)(a1 + 72)) {
        return MEMORY[0x18530AFF0](a1, 0x10F3C40895CAEE9);
      }
      goto LABEL_7;
    }
    *v2 -= 2;
  }
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (!*(unsigned char *)(a1 + 72)) {
    return MEMORY[0x18530AFF0](a1, 0x10F3C40895CAEE9);
  }
LABEL_7:
  uint64_t v3 = *(unsigned int *)(a1 + 64);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_1ECABCE68[v3])(&v5, a1 + 48);
  }
  *(_DWORD *)(a1 + 64) = -1;
  return MEMORY[0x18530AFF0](a1, 0x10F3C40895CAEE9);
}

char *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x70uLL);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v2 = &unk_1ECABD278;
  *((void *)v2 + 1) = v4;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((void *)v2 + 2) = &unk_1ECABBFE0;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  v2[48] = 0;
  v2[72] = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    *((_DWORD *)v2 + 16) = -1;
    uint64_t v5 = *(unsigned int *)(a1 + 64);
    if (v5 != -1)
    {
      ((void (*)(char *, char *, uint64_t))off_1ECABCEC0[v5])(&v8, v2 + 48, a1 + 48);
      *((_DWORD *)v3 + 16) = v5;
    }
    v3[72] = 1;
  }
  *((void *)v3 + 2) = off_1ECABBFB8;
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a1 + 88);
  *((void *)v3 + 10) = off_1ECABC030;
  uint64_t v6 = *(_DWORD **)(a1 + 104);
  if (v6) {
    *v6 += 2;
  }
  *((void *)v3 + 13) = v6;
  return v3;
}

uint64_t _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7__cloneEPNS0_6__baseISI_EE(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  *(void *)a2 = &unk_1ECABD278;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = &unk_1ECABC008;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  *(void *)(a2 + 16) = &unk_1ECABBFE0;
  uint64_t v5 = *(void *)(result + 40);
  *(unsigned char *)(a2 + 48) = 0;
  uint64_t v6 = a2 + 48;
  *(void *)(v6 - 8) = v5;
  *(unsigned char *)(v6 + 24) = 0;
  if (*(unsigned char *)(result + 72))
  {
    *(_DWORD *)(a2 + 64) = -1;
    uint64_t v7 = *(unsigned int *)(result + 64);
    if (v7 != -1)
    {
      uint64_t result = ((uint64_t (*)(char *))off_1ECABCEC0[v7])(&v9);
      *(_DWORD *)(a2 + 64) = v7;
    }
    *(unsigned char *)(a2 + 72) = 1;
  }
  *(void *)(a2 + 16) = off_1ECABBFB8;
  *(void *)(a2 + 80) = &unk_1ECABC008;
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(v3 + 88);
  *(void *)(a2 + 80) = off_1ECABC030;
  char v8 = *(_DWORD **)(v3 + 104);
  if (v8) {
    *v8 += 2;
  }
  *(void *)(a2 + 104) = v8;
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7destroyEv(uint64_t a1)
{
  *(void *)(a1 + 80) = off_1ECABC030;
  uint64_t result = *(_DWORD **)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (result)
  {
    if (*result == 2)
    {
      uint64_t result = (_DWORD *)WTF::StringImpl::destroy();
      *(void *)(a1 + 16) = &unk_1ECABBFE0;
      if (!*(unsigned char *)(a1 + 72)) {
        return result;
      }
      goto LABEL_7;
    }
    *result -= 2;
  }
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (!*(unsigned char *)(a1 + 72)) {
    return result;
  }
LABEL_7:
  uint64_t v3 = *(unsigned int *)(a1 + 64);
  if (v3 != -1) {
    uint64_t result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1ECABCE68[v3])(&v4, a1 + 48);
  }
  *(_DWORD *)(a1 + 64) = -1;
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE18destroy_deallocateEv(void *__p)
{
  __p[10] = off_1ECABC030;
  uint64_t v2 = (_DWORD *)__p[13];
  __p[13] = 0;
  if (v2)
  {
    if (*v2 == 2)
    {
      WTF::StringImpl::destroy();
      __p[2] = &unk_1ECABBFE0;
      if (!*((unsigned char *)__p + 72)) {
        goto LABEL_5;
      }
      goto LABEL_7;
    }
    *v2 -= 2;
  }
  __p[2] = &unk_1ECABBFE0;
  if (!*((unsigned char *)__p + 72))
  {
LABEL_5:
    operator delete(__p);
    return;
  }
LABEL_7:
  uint64_t v3 = *((unsigned int *)__p + 16);
  if (v3 == -1) {
    goto LABEL_5;
  }
  ((void (*)(char *, void *))off_1ECABCE68[v3])(&v4, __p + 6);
  operator delete(__p);
}

__n128 _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST20IdentifierExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEEclEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(v2 + 64) = off_1ECABC030;
  uint64_t v3 = *(_DWORD **)(v2 + 88);
  *(void *)(v2 + 88) = 0;
  if (!v3)
  {
LABEL_4:
    *(void *)uint64_t v2 = &unk_1ECABBFE0;
    if (!*(unsigned char *)(v2 + 56)) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  if (*v3 != 2)
  {
    *v3 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy();
  *(void *)uint64_t v2 = &unk_1ECABBFE0;
  if (!*(unsigned char *)(v2 + 56)) {
    goto LABEL_10;
  }
LABEL_7:
  uint64_t v4 = *(unsigned int *)(v2 + 48);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1ECABCE68[v4])(&v9, v2 + 32);
  }
  *(_DWORD *)(v2 + 48) = -1;
LABEL_10:
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)uint64_t v5 = &unk_1ECABC008;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)(a1 + 24);
  *(void *)uint64_t v5 = &unk_1ECABBFE0;
  *(void *)(v5 + 24) = *(void *)(a1 + 40);
  *(unsigned char *)(v5 + 32) = 0;
  *(unsigned char *)(v5 + 56) = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    *(_DWORD *)(v5 + 48) = -1;
    uint64_t v6 = *(unsigned int *)(a1 + 64);
    if (v6 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1ECABCF18[v6])(&v10, v5 + 32, a1 + 48);
      *(_DWORD *)(v5 + 48) = v6;
    }
    *(unsigned char *)(v5 + 56) = 1;
  }
  *(void *)uint64_t v5 = off_1ECABBFB8;
  *(void *)(v5 + 64) = &unk_1ECABC008;
  __n128 result = *(__n128 *)(a1 + 88);
  *(__n128 *)(v5 + 72) = result;
  *(void *)(v5 + 64) = off_1ECABC030;
  uint64_t v8 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  *(void *)(v5 + 88) = v8;
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST12VariableRoleEEENS_9enable_ifIXoosr3stdE16is_fundamental_vIT_Esr3stdE9is_enum_vIS8_EEvE4typeEPS8_OS8_EUlvE_NS_9allocatorISD_EEFvvEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST12VariableRoleEEENS_9enable_ifIXoosr3stdE16is_fundamental_vIT_Esr3stdE9is_enum_vIS8_EEvE4typeEPS8_OS8_EUlvE_NS_9allocatorISD_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1ECABD2C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST12VariableRoleEEENS_9enable_ifIXoosr3stdE16is_fundamental_vIT_Esr3stdE9is_enum_vIS8_EEvE4typeEPS8_OS8_EUlvE_NS_9allocatorISD_EEFvvEE7__cloneEPNS0_6__baseISG_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1ECABD2C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST12VariableRoleEEENS_9enable_ifIXoosr3stdE16is_fundamental_vIT_Esr3stdE9is_enum_vIS8_EEvE4typeEPS8_OS8_EUlvE_NS_9allocatorISD_EEFvvEEclEv(uint64_t result)
{
  **(unsigned char **)(result + 8) = *(unsigned char *)(result + 16);
  return result;
}

void WGSL::AST::ArrayTypeExpression::~ArrayTypeExpression(WGSL::AST::ArrayTypeExpression *this)
{
  *(void *)this = &unk_1ECABBFE0;
  if (*((unsigned char *)this + 56))
  {
    uint64_t v2 = *((unsigned int *)this + 12);
    if (v2 != -1) {
      ((void (*)(char *, char *))off_1ECABCE68[v2])(&v3, (char *)this + 32);
    }
    *((_DWORD *)this + 12) = -1;
  }
}

{
  uint64_t v2;
  char v3;

  *(void *)this = &unk_1ECABBFE0;
  if (*((unsigned char *)this + 56))
  {
    uint64_t v2 = *((unsigned int *)this + 12);
    if (v2 != -1) {
      ((void (*)(char *, char *))off_1ECABCE68[v2])(&v3, (char *)this + 32);
    }
    *((_DWORD *)this + 12) = -1;
  }
  MEMORY[0x18530AFF0](this, 0x10F3C408065EDEFLL);
}

uint64_t WGSL::AST::ArrayTypeExpression::kind(WGSL::AST::ArrayTypeExpression *this)
{
  return 59;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST19ArrayTypeExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1ECABD330;
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 64);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_1ECABCE68[v2])(&v4, a1 + 48);
    }
    *(_DWORD *)(a1 + 64) = -1;
  }
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST19ArrayTypeExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1ECABD330;
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 64);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_1ECABCE68[v2])(&v4, a1 + 48);
    }
    *(_DWORD *)(a1 + 64) = -1;
  }
  return MEMORY[0x18530AFF0](a1, 0x10F3C403B4B6AF4);
}

char *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST19ArrayTypeExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x60uLL);
  char v3 = v2;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v2 = &unk_1ECABD330;
  *((void *)v2 + 1) = v4;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((void *)v2 + 2) = &unk_1ECABBFE0;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  v2[48] = 0;
  v2[72] = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    *((_DWORD *)v2 + 16) = -1;
    uint64_t v5 = *(unsigned int *)(a1 + 64);
    if (v5 != -1)
    {
      ((void (*)(char *, char *, uint64_t))off_1ECABCEC0[v5])(&v7, v2 + 48, a1 + 48);
      *((_DWORD *)v3 + 16) = v5;
    }
    v3[72] = 1;
  }
  *((void *)v3 + 2) = &unk_1ECABD308;
  *((_OWORD *)v3 + 5) = *(_OWORD *)(a1 + 80);
  return v3;
}

__n128 _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST19ArrayTypeExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7__cloneEPNS0_6__baseISI_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_1ECABD330;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = &unk_1ECABC008;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 16) = &unk_1ECABBFE0;
  uint64_t v5 = *(void *)(a1 + 40);
  *(unsigned char *)(a2 + 48) = 0;
  uint64_t v6 = a2 + 48;
  *(void *)(v6 - 8) = v5;
  *(unsigned char *)(v6 + 24) = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    *(_DWORD *)(a2 + 64) = -1;
    uint64_t v7 = *(unsigned int *)(a1 + 64);
    if (v7 != -1)
    {
      ((void (*)(char *))off_1ECABCEC0[v7])(&v9);
      *(_DWORD *)(a2 + 64) = v7;
    }
    *(unsigned char *)(a2 + 72) = 1;
  }
  *(void *)(a2 + 16) = &unk_1ECABD308;
  __n128 result = *(__n128 *)(a1 + 80);
  *(__n128 *)(a2 + 80) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST19ArrayTypeExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7destroyEv(uint64_t result)
{
  *(void *)(result + 16) = &unk_1ECABBFE0;
  if (*(unsigned char *)(result + 72))
  {
    uint64_t v1 = result;
    uint64_t v2 = *(unsigned int *)(result + 64);
    if (v2 != -1) {
      __n128 result = ((uint64_t (*)(char *, uint64_t))off_1ECABCE68[v2])(&v3, result + 48);
    }
    *(_DWORD *)(v1 + 64) = -1;
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST19ArrayTypeExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE18destroy_deallocateEv(void *__p)
{
  __p[2] = &unk_1ECABBFE0;
  if (*((unsigned char *)__p + 72))
  {
    uint64_t v2 = *((unsigned int *)__p + 16);
    if (v2 != -1) {
      ((void (*)(char *, void *))off_1ECABCE68[v2])(&v3, __p + 6);
    }
  }
  operator delete(__p);
}

__n128 _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST19ArrayTypeExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEEclEv(uint64_t a1)
{
  (***(void (****)(void))(a1 + 8))(*(void *)(a1 + 8));
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)uint64_t v2 = &unk_1ECABC008;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 24);
  *(void *)uint64_t v2 = &unk_1ECABBFE0;
  *(void *)(v2 + 24) = *(void *)(a1 + 40);
  *(unsigned char *)(v2 + 32) = 0;
  *(unsigned char *)(v2 + 56) = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    *(_DWORD *)(v2 + 48) = -1;
    uint64_t v3 = *(unsigned int *)(a1 + 64);
    if (v3 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1ECABCF18[v3])(&v5, v2 + 32, a1 + 48);
      *(_DWORD *)(v2 + 48) = v3;
    }
    *(unsigned char *)(v2 + 56) = 1;
  }
  *(void *)uint64_t v2 = &unk_1ECABD308;
  __n128 result = *(__n128 *)(a1 + 80);
  *(__n128 *)(v2 + 64) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST23ReferenceTypeExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1ECABD378;
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 64);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_1ECABCE68[v2])(&v4, a1 + 48);
    }
    *(_DWORD *)(a1 + 64) = -1;
  }
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST23ReferenceTypeExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1ECABD378;
  *(void *)(a1 + 16) = &unk_1ECABBFE0;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 64);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_1ECABCE68[v2])(&v4, a1 + 48);
    }
    *(_DWORD *)(a1 + 64) = -1;
  }
  return MEMORY[0x18530AFF0](a1, 0x10F3C40EEF274EFLL);
}

char *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST23ReferenceTypeExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x58uLL);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v2 = &unk_1ECABD378;
  *((void *)v2 + 1) = v4;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((void *)v2 + 2) = &unk_1ECABBFE0;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  v2[48] = 0;
  v2[72] = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    *((_DWORD *)v2 + 16) = -1;
    uint64_t v5 = *(unsigned int *)(a1 + 64);
    if (v5 != -1)
    {
      ((void (*)(char *, char *, uint64_t))off_1ECABCEC0[v5])(&v7, v2 + 48, a1 + 48);
      *((_DWORD *)v3 + 16) = v5;
    }
    v3[72] = 1;
  }
  *((void *)v3 + 2) = off_1ECABD250;
  *((void *)v3 + 10) = *(void *)(a1 + 80);
  return v3;
}

uint64_t _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST23ReferenceTypeExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7__cloneEPNS0_6__baseISI_EE(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  *(void *)a2 = &unk_1ECABD378;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = &unk_1ECABC008;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  *(void *)(a2 + 16) = &unk_1ECABBFE0;
  uint64_t v5 = *(void *)(result + 40);
  *(unsigned char *)(a2 + 48) = 0;
  uint64_t v6 = a2 + 48;
  *(void *)(v6 - 8) = v5;
  *(unsigned char *)(v6 + 24) = 0;
  if (*(unsigned char *)(result + 72))
  {
    *(_DWORD *)(a2 + 64) = -1;
    uint64_t v7 = *(unsigned int *)(result + 64);
    if (v7 != -1)
    {
      __n128 result = ((uint64_t (*)(char *))off_1ECABCEC0[v7])(&v8);
      *(_DWORD *)(a2 + 64) = v7;
    }
    *(unsigned char *)(a2 + 72) = 1;
  }
  *(void *)(a2 + 16) = off_1ECABD250;
  *(void *)(a2 + 80) = *(void *)(v3 + 80);
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST23ReferenceTypeExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE7destroyEv(uint64_t result)
{
  *(void *)(result + 16) = &unk_1ECABBFE0;
  if (*(unsigned char *)(result + 72))
  {
    uint64_t v1 = result;
    uint64_t v2 = *(unsigned int *)(result + 64);
    if (v2 != -1) {
      __n128 result = ((uint64_t (*)(char *, uint64_t))off_1ECABCE68[v2])(&v3, result + 48);
    }
    *(_DWORD *)(v1 + 64) = -1;
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST23ReferenceTypeExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEE18destroy_deallocateEv(void *__p)
{
  __p[2] = &unk_1ECABBFE0;
  if (*((unsigned char *)__p + 72))
  {
    uint64_t v2 = *((unsigned int *)__p + 16);
    if (v2 != -1) {
      ((void (*)(char *, void *))off_1ECABCE68[v2])(&v3, __p + 6);
    }
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST23ReferenceTypeExpressionES6_EENS_9enable_ifIXaagestT_stT0_ntsr3stdE9is_same_vIS9_NS5_10ExpressionEEEvE4typeERS8_RS9_EUlvE_NS_9allocatorISF_EEFvvEEclEv(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 8);
  *(void *)uint64_t v2 = &unk_1ECABBFE0;
  if (*(unsigned char *)(v2 + 56))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 48);
    if (v3 == -1)
    {
      uint64_t v4 = v2;
    }
    else
    {
      __n128 result = ((uint64_t (*)(char *, uint64_t))off_1ECABCE68[v3])(&v6, v2 + 32);
      uint64_t v4 = *(void *)(v1 + 8);
    }
    *(_DWORD *)(v2 + 48) = -1;
    uint64_t v2 = v4;
  }
  *(void *)uint64_t v2 = &unk_1ECABC008;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(v1 + 24);
  *(void *)uint64_t v2 = &unk_1ECABBFE0;
  *(void *)(v2 + 24) = *(void *)(v1 + 40);
  *(unsigned char *)(v2 + 32) = 0;
  *(unsigned char *)(v2 + 56) = 0;
  if (*(unsigned char *)(v1 + 72))
  {
    *(_DWORD *)(v2 + 48) = -1;
    uint64_t v5 = *(unsigned int *)(v1 + 64);
    if (v5 != -1)
    {
      __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1ECABCF18[v5])(&v7, v2 + 32, v1 + 48);
      *(_DWORD *)(v2 + 48) = v5;
    }
    *(unsigned char *)(v2 + 56) = 1;
  }
  *(void *)uint64_t v2 = off_1ECABD250;
  *(void *)(v2 + 64) = *(void *)(v1 + 80);
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST13StructureRoleEEENS_9enable_ifIXoosr3stdE16is_fundamental_vIT_Esr3stdE9is_enum_vIS8_EEvE4typeEPS8_OS8_EUlvE_NS_9allocatorISD_EEFvvEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST13StructureRoleEEENS_9enable_ifIXoosr3stdE16is_fundamental_vIT_Esr3stdE9is_enum_vIS8_EEvE4typeEPS8_OS8_EUlvE_NS_9allocatorISD_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1ECABD3C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST13StructureRoleEEENS_9enable_ifIXoosr3stdE16is_fundamental_vIT_Esr3stdE9is_enum_vIS8_EEvE4typeEPS8_OS8_EUlvE_NS_9allocatorISD_EEFvvEE7__cloneEPNS0_6__baseISG_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1ECABD3C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST13StructureRoleEEENS_9enable_ifIXoosr3stdE16is_fundamental_vIT_Esr3stdE9is_enum_vIS8_EEvE4typeEPS8_OS8_EUlvE_NS_9allocatorISD_EEFvvEEclEv(uint64_t result)
{
  **(unsigned char **)(result + 8) = *(unsigned char *)(result + 16);
  return result;
}

void WGSL::AST::AbstractIntegerLiteral::~AbstractIntegerLiteral(WGSL::AST::AbstractIntegerLiteral *this)
{
  *(void *)this = &unk_1ECABBFE0;
  if (*((unsigned char *)this + 56))
  {
    uint64_t v2 = *((unsigned int *)this + 12);
    if (v2 != -1) {
      ((void (*)(char *, char *))off_1ECABCE68[v2])(&v3, (char *)this + 32);
    }
    *((_DWORD *)this + 12) = -1;
  }
}

{
  uint64_t v2;
  char v3;

  *(void *)this = &unk_1ECABBFE0;
  if (*((unsigned char *)this + 56))
  {
    uint64_t v2 = *((unsigned int *)this + 12);
    if (v2 != -1) {
      ((void (*)(char *, char *))off_1ECABCE68[v2])(&v3, (char *)this + 32);
    }
    *((_DWORD *)this + 12) = -1;
  }
  MEMORY[0x18530AFF0](this, 0x10F3C40F2BF966CLL);
}

uint64_t WGSL::AST::AbstractIntegerLiteral::kind(WGSL::AST::AbstractIntegerLiteral *this)
{
  return 31;
}

void WGSL::AST::GroupAttribute::~GroupAttribute(WGSL::AST::GroupAttribute *this)
{
}

uint64_t WGSL::AST::GroupAttribute::kind(WGSL::AST::GroupAttribute *this)
{
  return 6;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Reflection::EntryPointInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Reflection::EntryPointInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Reflection::EntryPointInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Reflection::EntryPointInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)((96 * a2) | 0x10));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 96 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v5;
    while (1)
    {
      unint64_t v14 = (WTF::StringImpl **)(v4 + 96 * v11);
      unint64_t v15 = *v14;
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (v15)
        {
          uint64_t v17 = *a1;
          if (*a1)
          {
            unsigned int v18 = *(_DWORD *)(v17 - 8);
            unsigned int v19 = *((_DWORD *)v15 + 4);
            if (v19 >= 0x100) {
              goto LABEL_19;
            }
LABEL_22:
            int v20 = WTF::StringImpl::hashSlowCase(v15);
          }
          else
          {
            unsigned int v18 = 0;
            unsigned int v19 = *((_DWORD *)v15 + 4);
            if (v19 < 0x100) {
              goto LABEL_22;
            }
LABEL_19:
            int v20 = v19 >> 8;
          }
          int v21 = 0;
          do
          {
            unsigned int v22 = v20 & v18;
            uint64_t v23 = (WTF::StringImpl **)(v17 + 96 * (v20 & v18));
            int v20 = ++v21 + (v20 & v18);
          }
          while (*v23);
          WGSL::Reflection::EntryPointInformation::~EntryPointInformation((WGSL::Reflection::EntryPointInformation *)(v17 + 96 * v22 + 8), v8);
          unint64_t v25 = *v23;
          unsigned char *v23 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *(_DWORD *)v25 -= 2;
            }
          }
          int v26 = *v14;
          *unint64_t v14 = 0;
          unsigned char *v23 = v26;
          uint64_t v27 = v4 + 96 * v11;
          uint64_t v29 = *(void *)(v27 + 8);
          uint64_t v28 = v27 + 8;
          *(void *)uint64_t v28 = 0;
          *(void *)(v17 + 96 * v22 + 8) = v29;
          uint64_t v30 = v17 + 96 * v22;
          uint64_t v31 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          *(unsigned char *)(v30 + 24) = 0;
          uint64_t v32 = v30 + 24;
          *(void *)(v32 - 8) = v31;
          *(unsigned char *)(v32 + 16) = 0;
          unsigned int v33 = (unsigned char *)(v32 + 16);
          if (*(unsigned char *)(v28 + 32))
          {
            uint64_t v34 = v4 + 96 * v11;
            *(void *)uint64_t v32 = 0;
            *(void *)(v32 + 8) = 0;
            uint64_t v35 = *(void *)(v34 + 24);
            *(void *)(v34 + 24) = 0;
            *(void *)uint64_t v32 = v35;
            int v36 = *(_DWORD *)(v34 + 32);
            *(_DWORD *)(v34 + 32) = 0;
            uint64_t v37 = v17 + 96 * v22;
            *(_DWORD *)(v37 + 32) = v36;
            int v38 = *(_DWORD *)(v34 + 36);
            *(_DWORD *)(v34 + 36) = 0;
            *(_DWORD *)(v37 + 36) = v38;
            *unsigned int v33 = 1;
          }
          uint64_t v39 = v17 + 96 * v22;
          uint64_t v40 = v4 + 96 * v11;
          *(void *)(v39 + 48) = 0;
          uint64_t v41 = *(void *)(v40 + 48);
          *(void *)(v40 + 48) = 0;
          *(void *)(v39 + 48) = v41;
          long long v42 = *(_OWORD *)(v40 + 56);
          long long v43 = *(_OWORD *)(v40 + 72);
          *(void *)(v39 + 88) = *(void *)(v40 + 88);
          *(_OWORD *)(v39 + 72) = v43;
          *(_OWORD *)(v39 + 56) = v42;
          WGSL::Reflection::EntryPointInformation::~EntryPointInformation((WGSL::Reflection::EntryPointInformation *)v28, v24);
          uint64_t v44 = *v14;
          *unint64_t v14 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *(_DWORD *)v44 -= 2;
            }
          }
          if (v14 == a3) {
            uint64_t v12 = v17 + 96 * v22;
          }
          goto LABEL_11;
        }
        WGSL::Reflection::EntryPointInformation::~EntryPointInformation((WGSL::Reflection::EntryPointInformation *)(v4 + 96 * v11 + 8), v8);
        unint64_t v16 = *v14;
        *unint64_t v14 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *(_DWORD *)v16 -= 2;
          }
        }
      }
LABEL_11:
      if (++v11 == v13) {
        goto LABEL_35;
      }
    }
  }
  uint64_t v12 = 0;
  uint64_t result = 0;
  if (v4)
  {
LABEL_35:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v12;
  }
  return result;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WGSL::RewriteGlobalVariables::Global *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WGSL::RewriteGlobalVariables::Global *>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WGSL::RewriteGlobalVariables::Global *,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WGSL::RewriteGlobalVariables::Global *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    uint64_t result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    uint64_t v9 = result + 16;
    if (!a2) {
      goto LABEL_12;
    }
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
    uint64_t result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
    uint64_t v9 = result + 16;
    if (!a2) {
      goto LABEL_12;
    }
  }
  if (a2 == 1)
  {
    uint64_t v10 = 0;
LABEL_10:
    uint64_t v13 = a2 - v10;
    unint64_t v14 = (void *)(result + 16 * v10 + 24);
    do
    {
      *((_DWORD *)v14 - 2) = -1;
      *unint64_t v14 = 0;
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_12;
  }
  uint64_t v10 = a2 & 0xFFFFFFFE;
  uint64_t v11 = (void *)(result + 40);
  uint64_t v12 = v10;
  do
  {
    *((_DWORD *)v11 - 6) = -1;
    *((_DWORD *)v11 - 2) = -1;
    *(v11 - 2) = 0;
    *uint64_t v11 = 0;
    v11 += 4;
    v12 -= 2;
  }
  while (v12);
  if (v10 != a2) {
    goto LABEL_10;
  }
LABEL_12:
  *a1 = v9;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      unint64_t v16 = (_DWORD *)(v4 + 16 * i);
      if (*v16 <= 0xFFFFFFFD)
      {
        uint64_t v17 = *a1;
        if (*a1) {
          int v18 = *(_DWORD *)(v17 - 8);
        }
        else {
          int v18 = 0;
        }
        int v19 = 0;
        unsigned int v20 = 9 * ((*v16 + ~(*v16 << 15)) ^ ((*v16 + ~(*v16 << 15)) >> 10));
        unsigned int v21 = ((v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11)) ^ (((v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11)) >> 16);
        do
        {
          uint64_t v22 = v21 & v18;
          unsigned int v21 = ++v19 + v22;
        }
        while (*(_DWORD *)(v17 + 16 * v22) != -1);
        *(_OWORD *)(v17 + 16 * v22) = *(_OWORD *)v16;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Reflection::SpecializationConstant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Reflection::SpecializationConstant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Reflection::SpecializationConstant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Reflection::SpecializationConstant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 32 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v5;
    while (1)
    {
      uint64_t v13 = (WTF::StringImpl **)(v4 + 32 * v11);
      unint64_t v14 = *v13;
      if (*v13 == (WTF::StringImpl *)-1) {
        goto LABEL_9;
      }
      if (v14) {
        break;
      }
      uint64_t v15 = v4 + 32 * v11;
      unint64_t v16 = *(_DWORD **)(v15 + 8);
      *(void *)(v15 + 8) = 0;
      if (!v16) {
        goto LABEL_15;
      }
      if (*v16 != 2)
      {
        *v16 -= 2;
LABEL_15:
        *uint64_t v13 = 0;
        goto LABEL_9;
      }
      WTF::StringImpl::destroy();
      unsigned int v21 = *v13;
      *uint64_t v13 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          goto LABEL_42;
        }
        *(_DWORD *)v21 -= 2;
      }
LABEL_9:
      if (++v11 == v12) {
        goto LABEL_44;
      }
    }
    uint64_t v17 = *a1;
    if (*a1)
    {
      int v18 = *(_DWORD *)(v17 - 8);
      unsigned int v19 = *((_DWORD *)v14 + 4);
      if (v19 >= 0x100)
      {
LABEL_18:
        unsigned int v20 = v19 >> 8;
LABEL_24:
        int v22 = 0;
        do
        {
          uint64_t v23 = v20 & v18;
          unsigned int v20 = ++v22 + v23;
        }
        while (*(void *)(v17 + 32 * v23));
        uint64_t v24 = v17 + 32 * v23;
        unint64_t v25 = *(_DWORD **)(v24 + 8);
        *(void *)(v24 + 8) = 0;
        if (v25)
        {
          if (*v25 == 2)
          {
            WTF::StringImpl::destroy();
            int v26 = *(_DWORD **)v24;
            *(void *)uint64_t v24 = 0;
            if (v26)
            {
              if (*v26 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *v26 -= 2;
              }
            }
LABEL_35:
            uint64_t v27 = *v13;
            *uint64_t v13 = 0;
            *(void *)uint64_t v24 = v27;
            uint64_t v28 = v4 + 32 * v11;
            uint64_t v29 = *(void *)(v28 + 8);
            *(void *)(v28 + 8) = 0;
            *(void *)(v24 + 8) = v29;
            *(_OWORD *)(v17 + 32 * v23 + 16) = *(_OWORD *)(v28 + 16);
            uint64_t v30 = *(_DWORD **)(v28 + 8);
            *(void *)(v28 + 8) = 0;
            if (v30)
            {
              if (*v30 == 2)
              {
                WTF::StringImpl::destroy();
                uint64_t v31 = *v13;
                *uint64_t v13 = 0;
                if (!v31) {
                  goto LABEL_9;
                }
                goto LABEL_41;
              }
              *v30 -= 2;
            }
            uint64_t v31 = *v13;
            *uint64_t v13 = 0;
            if (!v31) {
              goto LABEL_9;
            }
LABEL_41:
            if (*(_DWORD *)v31 == 2)
            {
LABEL_42:
              WTF::StringImpl::destroy();
              goto LABEL_9;
            }
            *(_DWORD *)v31 -= 2;
            goto LABEL_9;
          }
          *v25 -= 2;
        }
        *(void *)uint64_t v24 = 0;
        goto LABEL_35;
      }
    }
    else
    {
      int v18 = 0;
      unsigned int v19 = *((_DWORD *)v14 + 4);
      if (v19 >= 0x100) {
        goto LABEL_18;
      }
    }
    unsigned int v20 = WTF::StringImpl::hashSlowCase(v14);
    goto LABEL_24;
  }
  if (v4)
  {
LABEL_44:
    WTF::fastFree((WTF *)(v4 - 16), v8);
  }
}

void WGSL::AST::BindingAttribute::~BindingAttribute(WGSL::AST::BindingAttribute *this)
{
}

uint64_t WGSL::AST::BindingAttribute::kind(WGSL::AST::BindingAttribute *this)
{
  return 2;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>(uint64_t result, unsigned char *a2, uint64_t a3, unsigned int a4)
{
  v15[2] = *MEMORY[0x1E4F143B8];
  if (a3) {
    unint64_t v4 = a3 - 1;
  }
  else {
    unint64_t v4 = 0;
  }
  unint64_t v5 = v4 >> 31;
  if (v4 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x18257C5CCLL);
  }
  unsigned int v6 = a4;
  char v8 = (void *)result;
  unsigned int v9 = a4;
  do
  {
    LODWORD(v5) = v5 + 1;
    BOOL v10 = v9 > 9;
    v9 /= 0xAu;
  }
  while (v10);
  if (((v5 | v4) & 0x80000000) != 0) {
    goto LABEL_10;
  }
  uint64_t v11 = (v4 + v5);
  if (__OFADD__(v4, v5)) {
    goto LABEL_10;
  }
  if (!v11)
  {
    uint64_t v12 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_23;
  }
  if ((v11 & 0x80000000) != 0)
  {
LABEL_10:
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t result = WTF::tryFastCompactMalloc((WTF *)(v11 + 20));
    uint64_t v12 = v15[0];
    if (v15[0])
    {
      uint64_t v13 = (unsigned char *)(v15[0] + 20);
      *(_DWORD *)v15[0] = 2;
      *(_DWORD *)(v12 + 4) = v11;
      *(void *)(v12 + 8) = v12 + 20;
      *(_DWORD *)(v12 + 16) = 4;
      if (v4)
      {
        if (v4 == 1) {
          *uint64_t v13 = *a2;
        }
        else {
          uint64_t result = (uint64_t)memcpy((void *)(v12 + 20), a2, v4);
        }
      }
      uint64_t v14 = 0;
      do
      {
        *((unsigned char *)&v15[1] + v14-- + 4) = (v6 % 0xA) | 0x30;
        BOOL v10 = v6 > 9;
        v6 /= 0xAu;
      }
      while (v10);
      if (v14 + 14 <= 13) {
        uint64_t result = (uint64_t)memcpy(&v13[v4], (char *)&v15[1] + v14 + 5, -v14);
      }
    }
  }
LABEL_23:
  *char v8 = v12;
  return result;
}

void WGSL::AST::CompoundStatement::~CompoundStatement(WGSL::AST::CompoundStatement *this, void *a2)
{
  char v3 = (WTF *)*((void *)this + 5);
  if (v3)
  {
    *((void *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v3, a2);
  }
  unint64_t v4 = (WTF *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
}

{
  WTF *v3;
  WTF *v4;
  uint64_t vars8;

  char v3 = (WTF *)*((void *)this + 5);
  if (v3)
  {
    *((void *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v3, a2);
  }
  unint64_t v4 = (WTF *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  JUMPOUT(0x18530AFF0);
}

uint64_t WGSL::AST::CompoundStatement::kind(WGSL::AST::CompoundStatement *this)
{
  return 42;
}

void WGSL::AST::IfStatement::~IfStatement(WGSL::AST::IfStatement *this, void *a2)
{
  char v3 = (WTF *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  char v3 = (WTF *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v3, a2);
  }
  JUMPOUT(0x18530AFF0);
}

uint64_t WGSL::AST::IfStatement::kind(WGSL::AST::IfStatement *this)
{
  return 48;
}

void WGSL::AST::CallStatement::~CallStatement(WGSL::AST::CallStatement *this)
{
}

uint64_t WGSL::AST::CallStatement::kind(WGSL::AST::CallStatement *this)
{
  return 40;
}

void WGSL::AST::BuiltinAttribute::~BuiltinAttribute(WGSL::AST::BuiltinAttribute *this)
{
}

uint64_t WGSL::AST::BuiltinAttribute::kind(WGSL::AST::BuiltinAttribute *this)
{
  return 3;
}

void WGSL::AST::CompoundAssignmentStatement::~CompoundAssignmentStatement(WGSL::AST::CompoundAssignmentStatement *this)
{
}

uint64_t WGSL::AST::CompoundAssignmentStatement::kind(WGSL::AST::CompoundAssignmentStatement *this)
{
  return 41;
}

void WGSL::AST::ForStatement::~ForStatement(WGSL::AST::ForStatement *this)
{
}

uint64_t WGSL::AST::ForStatement::kind(WGSL::AST::ForStatement *this)
{
  return 47;
}

void *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::AST::Variable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::AST::Variable *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::AST::Variable *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    while (1)
    {
      uint64_t v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          uint64_t v15 = *a1;
          if (*a1)
          {
            int v16 = *(_DWORD *)(v15 - 8);
            unsigned int v17 = *((_DWORD *)v14 + 4);
            if (v17 >= 0x100) {
              goto LABEL_12;
            }
LABEL_14:
            unsigned int v18 = WTF::StringImpl::hashSlowCase(v14);
          }
          else
          {
            int v16 = 0;
            unsigned int v17 = *((_DWORD *)v14 + 4);
            if (v17 < 0x100) {
              goto LABEL_14;
            }
LABEL_12:
            unsigned int v18 = v17 >> 8;
          }
          int v19 = 0;
          do
          {
            uint64_t v20 = v18 & v16;
            unsigned int v18 = ++v19 + v20;
          }
          while (*(void *)(v15 + 16 * v20));
          unsigned int v21 = (void *)(v15 + 16 * v20);
          void *v21 = 0;
          long long v22 = *(_OWORD *)v13;
          *uint64_t v13 = 0;
          *(_OWORD *)unsigned int v21 = v22;
          uint64_t v23 = *v13;
          *uint64_t v13 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *(_DWORD *)v23 -= 2;
            }
          }
          if (v13 == a3) {
            uint64_t v12 = v21;
          }
          goto LABEL_7;
        }
        *uint64_t v13 = 0;
      }
LABEL_7:
      if (++v11 == v7) {
        goto LABEL_25;
      }
    }
  }
  uint64_t v12 = 0;
  uint64_t result = 0;
  if (v6)
  {
LABEL_25:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

void WGSL::Lexer<unsigned char>::lex(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = &v263;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v5 = a1 + 36;
  uint64_t v6 = &v258[4];
  int v7 = a1 + 24;
LABEL_4:
  unint64_t v8 = *((void *)a1 + 2);
  if (!v8)
  {
    *(void *)unint64_t v5 = *(void *)v7;
    *((_DWORD *)v5 + 2) = *((_DWORD *)v7 + 2);
    int v10 = *((_DWORD *)a1 + 8);
LABEL_301:
    unint64_t v37 = *(void *)(a1 + 36);
    int v38 = *((_DWORD *)a1 + 11);
    int v39 = v10 - v38;
    unint64_t v40 = HIDWORD(v37);
    unsigned int v262 = 1;
    goto LABEL_404;
  }
  uint64_t v9 = *a1;
  while (v9 - 9 < 5 || v9 == 32)
  {
    *a1 = 0;
    int v10 = *((_DWORD *)a1 + 8) + 1;
    ++*((_DWORD *)a1 + 7);
    *((_DWORD *)a1 + 8) = v10;
    --v8;
    uint64_t v11 = (unsigned __int8 *)(*((void *)a1 + 1) + 1);
    *((void *)a1 + 1) = v11;
    *((void *)a1 + 2) = v8;
    if (v8)
    {
      uint64_t v12 = *v11;
      *a1 = v12;
      if (v9 != 10) {
        goto LABEL_7;
      }
LABEL_6:
      *((void *)a1 + 3) = (*((_DWORD *)a1 + 6) + 1);
      goto LABEL_7;
    }
    uint64_t v12 = 0;
    if (v9 == 10) {
      goto LABEL_6;
    }
LABEL_7:
    uint64_t v9 = v12;
    if (!v8) {
      goto LABEL_300;
    }
  }
  uint64_t v13 = (char *)*((void *)a1 + 1);
  unint64_t v14 = v8 - 2;
  if (v8 < 2 || *v13 != 47) {
    goto LABEL_50;
  }
  int v15 = v13[1];
  if (v15 == 42)
  {
    *a1 = 0;
    int v22 = *((_DWORD *)a1 + 8) + 2;
    int v23 = *((_DWORD *)a1 + 7) + 2;
    *((_DWORD *)a1 + 7) = v23;
    *((_DWORD *)a1 + 8) = v22;
    unint64_t v24 = v8 - 2;
    unint64_t v25 = v13 + 2;
    *((void *)a1 + 1) = v13 + 2;
    *((void *)a1 + 2) = v24;
    if (!v24)
    {
      int v10 = v22;
LABEL_403:
      unint64_t v37 = *(void *)(a1 + 36);
      int v38 = *((_DWORD *)a1 + 11);
      int v39 = v10 - v38;
      unint64_t v40 = HIDWORD(v37);
      unsigned int v262 = 0;
LABEL_404:
      unint64_t v263 = __PAIR64__(v40, v37);
      int v264 = v38;
      int v265 = v39;
      goto LABEL_405;
    }
    LOBYTE(v26) = *v25;
    int v27 = 1;
    while (1)
    {
      *a1 = 0;
      int v10 = v22 + 1;
      int v28 = v23 + 1;
      *((_DWORD *)a1 + 7) = v23 + 1;
      *((_DWORD *)a1 + 8) = v22 + 1;
      unint64_t v29 = v24 - 1;
      uint64_t v30 = v25 + 1;
      *((void *)a1 + 1) = v25 + 1;
      *((void *)a1 + 2) = v24 - 1;
      if (v24 == 1)
      {
        LOBYTE(v12) = 0;
        int v26 = v26;
        if (v26 <= 0x29u)
        {
LABEL_23:
          if (v26 == 10)
          {
            int v28 = 0;
            *((void *)a1 + 3) = (*((_DWORD *)a1 + 6) + 1);
          }
          else if (!v26)
          {
            goto LABEL_403;
          }
          goto LABEL_25;
        }
      }
      else
      {
        LOBYTE(v12) = *v30;
        *a1 = *v30;
        int v26 = v26;
        if (v26 <= 0x29u) {
          goto LABEL_23;
        }
      }
      if (v26 == 42)
      {
        if (v24 == 1) {
          goto LABEL_403;
        }
        if (*v30 == 47)
        {
          *a1 = 0;
          unint64_t v8 = v24 - 2;
          uint64_t v30 = v25 + 2;
          *((void *)a1 + 1) = v25 + 2;
          *((void *)a1 + 2) = v8;
          int v10 = v22 + 2;
          int v28 = v23 + 2;
          *((_DWORD *)a1 + 7) = v23 + 2;
          *((_DWORD *)a1 + 8) = v22 + 2;
          if (v29 == 1)
          {
            uint64_t v12 = 0;
            if (!--v27) {
              goto LABEL_7;
            }
          }
          else
          {
            uint64_t v12 = *v30;
            *a1 = v12;
            if (!--v27) {
              goto LABEL_7;
            }
          }
          unint64_t v29 = v8;
        }
      }
      else if (v26 == 47)
      {
        if (v24 == 1) {
          goto LABEL_403;
        }
        if (*v30 == 42)
        {
          *a1 = 0;
          unint64_t v31 = v24 - 2;
          uint64_t v30 = v25 + 2;
          *((void *)a1 + 1) = v25 + 2;
          *((void *)a1 + 2) = v31;
          int v10 = v22 + 2;
          int v28 = v23 + 2;
          *((_DWORD *)a1 + 7) = v23 + 2;
          *((_DWORD *)a1 + 8) = v22 + 2;
          if (v29 == 1)
          {
            LOBYTE(v12) = 0;
          }
          else
          {
            LOBYTE(v12) = *v30;
            *a1 = *v30;
          }
          ++v27;
          unint64_t v29 = v31;
        }
      }
LABEL_25:
      unint64_t v25 = v30;
      int v23 = v28;
      int v22 = v10;
      LOBYTE(v26) = v12;
      unint64_t v24 = v29;
      if (!v29) {
        goto LABEL_403;
      }
    }
  }
  if (v15 == 47)
  {
    uint64_t v16 = 0;
    int v17 = *((_DWORD *)a1 + 8);
    int v18 = *((_DWORD *)a1 + 7) + 1;
    int v19 = (unsigned __int8 *)(v13 + 1);
    uint64_t v20 = -1;
    while (1)
    {
      *a1 = 0;
      *((void *)a1 + 1) = &v19[v16];
      *((void *)a1 + 2) = v8 + v20;
      *((_DWORD *)a1 + 7) = v18 + v16;
      *((_DWORD *)a1 + 8) = v17 + v16 + 1;
      if (v8 - 1 == v16) {
        break;
      }
      uint64_t v12 = v19[v16];
      *a1 = v12;
      int v21 = v19[v16++];
      --v20;
      if (v21 == 10)
      {
        int v10 = v17 + v16;
        v8 -= v16;
        goto LABEL_7;
      }
    }
    int v10 = v17 + v16 + 1;
LABEL_300:
    *(void *)unint64_t v5 = *(void *)v7;
    *((_DWORD *)v5 + 2) = *((_DWORD *)v7 + 2);
    goto LABEL_301;
  }
LABEL_50:
  *(void *)unint64_t v5 = *(void *)v7;
  *((_DWORD *)v5 + 2) = *((_DWORD *)v7 + 2);
  switch((char)v9)
  {
    case '!':
      *a1 = 0;
      int v33 = *((_DWORD *)a1 + 7);
      int v32 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v33 + 1;
      *((_DWORD *)a1 + 8) = v32 + 1;
      unint64_t v34 = v8 - 1;
      *((void *)a1 + 1) = v13 + 1;
      *((void *)a1 + 2) = v34;
      if (!v34 || (int v35 = v13[1], *a1 = v35, v35 != 61))
      {
        unint64_t v42 = *(void *)(a1 + 36);
        int v43 = *((_DWORD *)a1 + 11);
        int v44 = v32 + 1 - v43;
        unint64_t v45 = HIDWORD(v42);
        int v109 = 41;
        goto LABEL_304;
      }
      *a1 = 0;
      *((void *)a1 + 1) = v13 + 2;
      *((void *)a1 + 2) = v14;
      int v36 = v32 + 2;
      *((_DWORD *)a1 + 7) = v33 + 2;
      *((_DWORD *)a1 + 8) = v32 + 2;
      if (v34 != 1) {
        *a1 = v13[2];
      }
      unint64_t v37 = *(void *)(a1 + 36);
      int v38 = *((_DWORD *)a1 + 11);
      int v39 = v36 - v38;
      unint64_t v40 = HIDWORD(v37);
      int v41 = 42;
      goto LABEL_298;
    case '%':
      *a1 = 0;
      int v47 = *((_DWORD *)a1 + 7);
      int v46 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v47 + 1;
      *((_DWORD *)a1 + 8) = v46 + 1;
      unint64_t v48 = v8 - 1;
      *((void *)a1 + 1) = v13 + 1;
      *((void *)a1 + 2) = v48;
      if (!v48 || (int v49 = v13[1], *a1 = v49, v49 != 61))
      {
        unint64_t v42 = *(void *)(a1 + 36);
        int v43 = *((_DWORD *)a1 + 11);
        int v44 = v46 + 1 - v43;
        unint64_t v45 = HIDWORD(v42);
        int v109 = 62;
        goto LABEL_304;
      }
      *a1 = 0;
      *((void *)a1 + 1) = v13 + 2;
      *((void *)a1 + 2) = v14;
      int v50 = v46 + 2;
      *((_DWORD *)a1 + 7) = v47 + 2;
      *((_DWORD *)a1 + 8) = v46 + 2;
      if (v48 != 1) {
        *a1 = v13[2];
      }
      unint64_t v37 = *(void *)(a1 + 36);
      int v38 = *((_DWORD *)a1 + 11);
      int v39 = v50 - v38;
      unint64_t v40 = HIDWORD(v37);
      int v41 = 63;
      goto LABEL_298;
    case '&':
      *a1 = 0;
      int v51 = *((_DWORD *)a1 + 7);
      int v52 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v51 + 1;
      *((_DWORD *)a1 + 8) = v52 + 1;
      unint64_t v53 = v8 - 1;
      *((void *)a1 + 1) = v13 + 1;
      *((void *)a1 + 2) = v53;
      if (!v53) {
        goto LABEL_260;
      }
      int v54 = v13[1];
      *a1 = v54;
      if (v54 == 61)
      {
        *a1 = 0;
        *((void *)a1 + 1) = v13 + 2;
        *((void *)a1 + 2) = v14;
        *((_DWORD *)a1 + 7) = v51 + 2;
        *((_DWORD *)a1 + 8) = v52 + 2;
        if (v53 != 1) {
          *a1 = v13[2];
        }
        unint64_t v37 = *(void *)(a1 + 36);
        int v38 = *((_DWORD *)a1 + 11);
        int v39 = v52 + 2 - v38;
        unint64_t v40 = HIDWORD(v37);
        int v41 = 38;
      }
      else
      {
        if (v54 != 38)
        {
LABEL_260:
          unint64_t v42 = *(void *)(a1 + 36);
          int v43 = *((_DWORD *)a1 + 11);
          int v44 = v52 + 1 - v43;
          unint64_t v45 = HIDWORD(v42);
          int v109 = 36;
          goto LABEL_304;
        }
        *a1 = 0;
        *((void *)a1 + 1) = v13 + 2;
        *((void *)a1 + 2) = v14;
        *((_DWORD *)a1 + 7) = v51 + 2;
        *((_DWORD *)a1 + 8) = v52 + 2;
        if (v53 != 1) {
          *a1 = v13[2];
        }
        unint64_t v37 = *(void *)(a1 + 36);
        int v38 = *((_DWORD *)a1 + 11);
        int v39 = v52 + 2 - v38;
        unint64_t v40 = HIDWORD(v37);
        int v41 = 37;
      }
      goto LABEL_298;
    case '(':
      *a1 = 0;
      int v55 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v55;
      *((void *)a1 + 1) = v13 + 1;
      *((void *)a1 + 2) = v8 - 1;
      if (v8 != 1) {
        *a1 = v13[1];
      }
      unint64_t v37 = *(void *)(a1 + 36);
      int v38 = *((_DWORD *)a1 + 11);
      int v39 = v55 - v38;
      unint64_t v40 = HIDWORD(v37);
      int v41 = 67;
      goto LABEL_298;
    case ')':
      *a1 = 0;
      int v56 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v56;
      *((void *)a1 + 1) = v13 + 1;
      *((void *)a1 + 2) = v8 - 1;
      if (v8 != 1) {
        *a1 = v13[1];
      }
      unint64_t v37 = *(void *)(a1 + 36);
      int v38 = *((_DWORD *)a1 + 11);
      int v39 = v56 - v38;
      unint64_t v40 = HIDWORD(v37);
      int v41 = 68;
      goto LABEL_298;
    case '*':
      *a1 = 0;
      int v58 = *((_DWORD *)a1 + 7);
      int v57 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v58 + 1;
      *((_DWORD *)a1 + 8) = v57 + 1;
      unint64_t v59 = v8 - 1;
      *((void *)a1 + 1) = v13 + 1;
      *((void *)a1 + 2) = v59;
      if (!v59 || (int v60 = v13[1], *a1 = v60, v60 != 61))
      {
        unint64_t v42 = *(void *)(a1 + 36);
        int v43 = *((_DWORD *)a1 + 11);
        int v44 = v57 + 1 - v43;
        unint64_t v45 = HIDWORD(v42);
        int v109 = 76;
        goto LABEL_304;
      }
      *a1 = 0;
      *((void *)a1 + 1) = v13 + 2;
      *((void *)a1 + 2) = v14;
      int v61 = v57 + 2;
      *((_DWORD *)a1 + 7) = v58 + 2;
      *((_DWORD *)a1 + 8) = v57 + 2;
      if (v59 != 1) {
        *a1 = v13[2];
      }
      unint64_t v37 = *(void *)(a1 + 36);
      int v38 = *((_DWORD *)a1 + 11);
      int v39 = v61 - v38;
      unint64_t v40 = HIDWORD(v37);
      int v41 = 77;
      goto LABEL_298;
    case '+':
      *a1 = 0;
      int v62 = *((_DWORD *)a1 + 7);
      int v63 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v62 + 1;
      *((_DWORD *)a1 + 8) = v63 + 1;
      unint64_t v64 = v8 - 1;
      *((void *)a1 + 1) = v13 + 1;
      *((void *)a1 + 2) = v64;
      if (!v64) {
        goto LABEL_261;
      }
      int v65 = v13[1];
      *a1 = v65;
      if (v65 == 61)
      {
        *a1 = 0;
        *((void *)a1 + 1) = v13 + 2;
        *((void *)a1 + 2) = v14;
        *((_DWORD *)a1 + 7) = v62 + 2;
        *((_DWORD *)a1 + 8) = v63 + 2;
        if (v64 != 1) {
          *a1 = v13[2];
        }
        unint64_t v37 = *(void *)(a1 + 36);
        int v38 = *((_DWORD *)a1 + 11);
        int v39 = v63 + 2 - v38;
        unint64_t v40 = HIDWORD(v37);
        int v41 = 72;
      }
      else
      {
        if (v65 != 43)
        {
LABEL_261:
          unint64_t v42 = *(void *)(a1 + 36);
          int v43 = *((_DWORD *)a1 + 11);
          int v44 = v63 + 1 - v43;
          unint64_t v45 = HIDWORD(v42);
          int v109 = 70;
          goto LABEL_304;
        }
        *a1 = 0;
        *((void *)a1 + 1) = v13 + 2;
        *((void *)a1 + 2) = v14;
        *((_DWORD *)a1 + 7) = v62 + 2;
        *((_DWORD *)a1 + 8) = v63 + 2;
        if (v64 != 1) {
          *a1 = v13[2];
        }
        unint64_t v37 = *(void *)(a1 + 36);
        int v38 = *((_DWORD *)a1 + 11);
        int v39 = v63 + 2 - v38;
        unint64_t v40 = HIDWORD(v37);
        int v41 = 71;
      }
      goto LABEL_298;
    case ',':
      *a1 = 0;
      int v66 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v66;
      *((void *)a1 + 1) = v13 + 1;
      *((void *)a1 + 2) = v8 - 1;
      if (v8 != 1) {
        *a1 = v13[1];
      }
      unint64_t v37 = *(void *)(a1 + 36);
      int v38 = *((_DWORD *)a1 + 11);
      int v39 = v66 - v38;
      unint64_t v40 = HIDWORD(v37);
      int v41 = 48;
      goto LABEL_298;
    case '-':
      *a1 = 0;
      int v67 = *((_DWORD *)a1 + 7);
      int v68 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v67 + 1;
      *((_DWORD *)a1 + 8) = v68 + 1;
      unint64_t v69 = v8 - 1;
      *((void *)a1 + 1) = v13 + 1;
      *((void *)a1 + 2) = v69;
      if (!v69) {
        goto LABEL_285;
      }
      int v70 = v13[1];
      *a1 = v70;
      switch(v70)
      {
        case '-':
          *a1 = 0;
          *((void *)a1 + 1) = v13 + 2;
          *((void *)a1 + 2) = v14;
          *((_DWORD *)a1 + 7) = v67 + 2;
          *((_DWORD *)a1 + 8) = v68 + 2;
          if (v69 != 1) {
            *a1 = v13[2];
          }
          unint64_t v37 = *(void *)(a1 + 36);
          int v38 = *((_DWORD *)a1 + 11);
          int v39 = v68 + 2 - v38;
          unint64_t v40 = HIDWORD(v37);
          int v41 = 60;
          break;
        case '=':
          *a1 = 0;
          *((void *)a1 + 1) = v13 + 2;
          *((void *)a1 + 2) = v14;
          *((_DWORD *)a1 + 7) = v67 + 2;
          *((_DWORD *)a1 + 8) = v68 + 2;
          if (v69 != 1) {
            *a1 = v13[2];
          }
          unint64_t v37 = *(void *)(a1 + 36);
          int v38 = *((_DWORD *)a1 + 11);
          int v39 = v68 + 2 - v38;
          unint64_t v40 = HIDWORD(v37);
          int v41 = 61;
          break;
        case '>':
          *a1 = 0;
          *((void *)a1 + 1) = v13 + 2;
          *((void *)a1 + 2) = v14;
          *((_DWORD *)a1 + 7) = v67 + 2;
          *((_DWORD *)a1 + 8) = v68 + 2;
          if (v69 != 1) {
            *a1 = v13[2];
          }
          unint64_t v37 = *(void *)(a1 + 36);
          int v38 = *((_DWORD *)a1 + 11);
          int v39 = v68 + 2 - v38;
          unint64_t v40 = HIDWORD(v37);
          int v41 = 39;
          break;
        default:
LABEL_285:
          unint64_t v42 = *(void *)(a1 + 36);
          int v43 = *((_DWORD *)a1 + 11);
          int v44 = v68 + 1 - v43;
          unint64_t v45 = HIDWORD(v42);
          int v109 = 59;
          goto LABEL_304;
      }
      goto LABEL_298;
    case '/':
      *a1 = 0;
      int v72 = *((_DWORD *)a1 + 7);
      int v71 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v72 + 1;
      *((_DWORD *)a1 + 8) = v71 + 1;
      unint64_t v73 = v8 - 1;
      *((void *)a1 + 1) = v13 + 1;
      *((void *)a1 + 2) = v73;
      if (!v73 || (int v74 = v13[1], *a1 = v74, v74 != 61))
      {
        unint64_t v42 = *(void *)(a1 + 36);
        int v43 = *((_DWORD *)a1 + 11);
        int v44 = v71 + 1 - v43;
        unint64_t v45 = HIDWORD(v42);
        int v109 = 74;
        goto LABEL_304;
      }
      *a1 = 0;
      *((void *)a1 + 1) = v13 + 2;
      *((void *)a1 + 2) = v14;
      int v75 = v71 + 2;
      *((_DWORD *)a1 + 7) = v72 + 2;
      *((_DWORD *)a1 + 8) = v71 + 2;
      if (v73 != 1) {
        *a1 = v13[2];
      }
      unint64_t v37 = *(void *)(a1 + 36);
      int v38 = *((_DWORD *)a1 + 11);
      int v39 = v75 - v38;
      unint64_t v40 = HIDWORD(v37);
      int v41 = 75;
      goto LABEL_298;
    case ':':
      *a1 = 0;
      int v76 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v76;
      *((void *)a1 + 1) = v13 + 1;
      *((void *)a1 + 2) = v8 - 1;
      if (v8 != 1) {
        *a1 = v13[1];
      }
      unint64_t v37 = *(void *)(a1 + 36);
      int v38 = *((_DWORD *)a1 + 11);
      int v39 = v76 - v38;
      unint64_t v40 = HIDWORD(v37);
      int v41 = 47;
      goto LABEL_298;
    case ';':
      *a1 = 0;
      int v77 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v77;
      *((void *)a1 + 1) = v13 + 1;
      *((void *)a1 + 2) = v8 - 1;
      if (v8 != 1) {
        *a1 = v13[1];
      }
      unint64_t v37 = *(void *)(a1 + 36);
      int v38 = *((_DWORD *)a1 + 11);
      int v39 = v77 - v38;
      unint64_t v40 = HIDWORD(v37);
      int v41 = 73;
      goto LABEL_298;
    case '<':
      *a1 = 0;
      int v78 = *((_DWORD *)a1 + 7);
      int v79 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v78 + 1;
      *((_DWORD *)a1 + 8) = v79 + 1;
      *((void *)a1 + 1) = v13 + 1;
      *((void *)a1 + 2) = v8 - 1;
      if (v8 == 1) {
        goto LABEL_262;
      }
      int v80 = v13[1];
      *a1 = v80;
      if (v80 == 60)
      {
        *a1 = 0;
        *((void *)a1 + 1) = v13 + 2;
        *((void *)a1 + 2) = v14;
        *((_DWORD *)a1 + 7) = v78 + 2;
        *((_DWORD *)a1 + 8) = v79 + 2;
        if (v8 == 2 || (int v122 = v13[2], *a1 = v122, v122 != 61))
        {
          unint64_t v42 = *(void *)(a1 + 36);
          int v43 = *((_DWORD *)a1 + 11);
          int v44 = v79 + 2 - v43;
          unint64_t v45 = HIDWORD(v42);
          int v109 = 57;
          goto LABEL_304;
        }
        *a1 = 0;
        *((void *)a1 + 1) = v13 + 3;
        *((void *)a1 + 2) = v8 - 3;
        *((_DWORD *)a1 + 7) = v78 + 3;
        *((_DWORD *)a1 + 8) = v79 + 3;
        if (v8 != 3) {
          *a1 = v13[3];
        }
        unint64_t v81 = *(void *)(a1 + 36);
        int v82 = *((_DWORD *)a1 + 11);
        int v83 = v79 + 3 - v82;
        unint64_t v84 = HIDWORD(v81);
        int v85 = 58;
      }
      else
      {
        if (v80 != 61)
        {
LABEL_262:
          unint64_t v42 = *(void *)(a1 + 36);
          int v43 = *((_DWORD *)a1 + 11);
          int v44 = v79 + 1 - v43;
          unint64_t v45 = HIDWORD(v42);
          int v109 = 55;
          goto LABEL_304;
        }
        *a1 = 0;
        *((void *)a1 + 1) = v13 + 2;
        *((void *)a1 + 2) = v14;
        *((_DWORD *)a1 + 7) = v78 + 2;
        *((_DWORD *)a1 + 8) = v79 + 2;
        if (v8 != 2) {
          *a1 = v13[2];
        }
        unint64_t v81 = *(void *)(a1 + 36);
        int v82 = *((_DWORD *)a1 + 11);
        int v83 = v79 + 2 - v82;
        unint64_t v84 = HIDWORD(v81);
        int v85 = 56;
      }
      goto LABEL_281;
    case '=':
      *a1 = 0;
      int v87 = *((_DWORD *)a1 + 7);
      int v86 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v87 + 1;
      *((_DWORD *)a1 + 8) = v86 + 1;
      unint64_t v88 = v8 - 1;
      *((void *)a1 + 1) = v13 + 1;
      *((void *)a1 + 2) = v88;
      if (!v88 || (int v89 = v13[1], *a1 = v89, v89 != 61))
      {
        unint64_t v42 = *(void *)(a1 + 36);
        int v43 = *((_DWORD *)a1 + 11);
        int v44 = v86 + 1 - v43;
        unint64_t v45 = HIDWORD(v42);
        int v109 = 49;
        goto LABEL_304;
      }
      *a1 = 0;
      *((void *)a1 + 1) = v13 + 2;
      *((void *)a1 + 2) = v14;
      int v90 = v86 + 2;
      *((_DWORD *)a1 + 7) = v87 + 2;
      *((_DWORD *)a1 + 8) = v86 + 2;
      if (v88 != 1) {
        *a1 = v13[2];
      }
      unint64_t v37 = *(void *)(a1 + 36);
      int v38 = *((_DWORD *)a1 + 11);
      int v39 = v90 - v38;
      unint64_t v40 = HIDWORD(v37);
      int v41 = 50;
      goto LABEL_298;
    case '>':
      *a1 = 0;
      int v91 = *((_DWORD *)a1 + 7);
      int v92 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v91 + 1;
      *((_DWORD *)a1 + 8) = v92 + 1;
      *((void *)a1 + 1) = v13 + 1;
      *((void *)a1 + 2) = v8 - 1;
      if (v8 == 1) {
        goto LABEL_263;
      }
      int v93 = v13[1];
      *a1 = v93;
      if (v93 != 62)
      {
        if (v93 != 61)
        {
LABEL_263:
          unint64_t v42 = *(void *)(a1 + 36);
          int v43 = *((_DWORD *)a1 + 11);
          int v44 = v92 + 1 - v43;
          unint64_t v45 = HIDWORD(v42);
          int v109 = 51;
          goto LABEL_304;
        }
        *a1 = 0;
        *((void *)a1 + 1) = v13 + 2;
        *((void *)a1 + 2) = v14;
        *((_DWORD *)a1 + 7) = v91 + 2;
        *((_DWORD *)a1 + 8) = v92 + 2;
        if (v8 != 2) {
          *a1 = v13[2];
        }
        unint64_t v81 = *(void *)(a1 + 36);
        int v82 = *((_DWORD *)a1 + 11);
        int v83 = v92 + 2 - v82;
        unint64_t v84 = HIDWORD(v81);
        int v85 = 52;
        goto LABEL_281;
      }
      *a1 = 0;
      *((void *)a1 + 1) = v13 + 2;
      *((void *)a1 + 2) = v14;
      *((_DWORD *)a1 + 7) = v91 + 2;
      *((_DWORD *)a1 + 8) = v92 + 2;
      if (v8 != 2)
      {
        int v123 = v13[2];
        *a1 = v123;
        if (v123 == 61)
        {
          *a1 = 0;
          *((void *)a1 + 1) = v13 + 3;
          *((void *)a1 + 2) = v8 - 3;
          *((_DWORD *)a1 + 7) = v91 + 3;
          *((_DWORD *)a1 + 8) = v92 + 3;
          if (v8 != 3) {
            *a1 = v13[3];
          }
          unint64_t v81 = *(void *)(a1 + 36);
          int v82 = *((_DWORD *)a1 + 11);
          int v83 = v92 + 3 - v82;
          unint64_t v84 = HIDWORD(v81);
          int v85 = 54;
LABEL_281:
          unsigned int v262 = v85;
          unint64_t v263 = __PAIR64__(v84, v81);
          int v264 = v82;
          int v265 = v83;
          goto LABEL_405;
        }
      }
      unint64_t v42 = *(void *)(a1 + 36);
      int v43 = *((_DWORD *)a1 + 11);
      int v44 = v92 + 2 - v43;
      unint64_t v45 = HIDWORD(v42);
      int v109 = 53;
LABEL_304:
      unsigned int v262 = v109;
      goto LABEL_305;
    case '@':
      *a1 = 0;
      int v94 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v94;
      *((void *)a1 + 1) = v13 + 1;
      *((void *)a1 + 2) = v8 - 1;
      if (v8 != 1) {
        *a1 = v13[1];
      }
      unint64_t v37 = *(void *)(a1 + 36);
      int v38 = *((_DWORD *)a1 + 11);
      int v39 = v94 - v38;
      unint64_t v40 = HIDWORD(v37);
      int v41 = 40;
      goto LABEL_298;
    case '[':
      *a1 = 0;
      int v95 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v95;
      *((void *)a1 + 1) = v13 + 1;
      *((void *)a1 + 2) = v8 - 1;
      if (v8 != 1) {
        *a1 = v13[1];
      }
      unint64_t v37 = *(void *)(a1 + 36);
      int v38 = *((_DWORD *)a1 + 11);
      int v39 = v95 - v38;
      unint64_t v40 = HIDWORD(v37);
      int v41 = 45;
      goto LABEL_298;
    case ']':
      *a1 = 0;
      int v96 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v96;
      *((void *)a1 + 1) = v13 + 1;
      *((void *)a1 + 2) = v8 - 1;
      if (v8 != 1) {
        *a1 = v13[1];
      }
      unint64_t v37 = *(void *)(a1 + 36);
      int v38 = *((_DWORD *)a1 + 11);
      int v39 = v96 - v38;
      unint64_t v40 = HIDWORD(v37);
      int v41 = 46;
      goto LABEL_298;
    case '^':
      *a1 = 0;
      int v98 = *((_DWORD *)a1 + 7);
      int v97 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v98 + 1;
      *((_DWORD *)a1 + 8) = v97 + 1;
      unint64_t v99 = v8 - 1;
      *((void *)a1 + 1) = v13 + 1;
      *((void *)a1 + 2) = v99;
      if (!v99 || (int v100 = v13[1], *a1 = v100, v100 != 61))
      {
        unint64_t v42 = *(void *)(a1 + 36);
        int v43 = *((_DWORD *)a1 + 11);
        int v44 = v97 + 1 - v43;
        unint64_t v45 = HIDWORD(v42);
        int v109 = 80;
        goto LABEL_304;
      }
      *a1 = 0;
      *((void *)a1 + 1) = v13 + 2;
      *((void *)a1 + 2) = v14;
      int v101 = v97 + 2;
      *((_DWORD *)a1 + 7) = v98 + 2;
      *((_DWORD *)a1 + 8) = v97 + 2;
      if (v99 != 1) {
        *a1 = v13[2];
      }
      unint64_t v37 = *(void *)(a1 + 36);
      int v38 = *((_DWORD *)a1 + 11);
      int v39 = v101 - v38;
      unint64_t v40 = HIDWORD(v37);
      int v41 = 81;
      goto LABEL_298;
    case '{':
      *a1 = 0;
      int v102 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v102;
      *((void *)a1 + 1) = v13 + 1;
      *((void *)a1 + 2) = v8 - 1;
      if (v8 != 1) {
        *a1 = v13[1];
      }
      unint64_t v37 = *(void *)(a1 + 36);
      int v38 = *((_DWORD *)a1 + 11);
      int v39 = v102 - v38;
      unint64_t v40 = HIDWORD(v37);
      int v41 = 43;
      goto LABEL_298;
    case '|':
      *a1 = 0;
      int v103 = *((_DWORD *)a1 + 7);
      int v104 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v103 + 1;
      *((_DWORD *)a1 + 8) = v104 + 1;
      unint64_t v105 = v8 - 1;
      *((void *)a1 + 1) = v13 + 1;
      *((void *)a1 + 2) = v105;
      if (!v105) {
        goto LABEL_264;
      }
      int v106 = v13[1];
      *a1 = v106;
      if (v106 == 61)
      {
        *a1 = 0;
        *((void *)a1 + 1) = v13 + 2;
        *((void *)a1 + 2) = v14;
        *((_DWORD *)a1 + 7) = v103 + 2;
        *((_DWORD *)a1 + 8) = v104 + 2;
        if (v105 != 1) {
          *a1 = v13[2];
        }
        unint64_t v37 = *(void *)(a1 + 36);
        int v38 = *((_DWORD *)a1 + 11);
        int v39 = v104 + 2 - v38;
        unint64_t v40 = HIDWORD(v37);
        int v41 = 66;
      }
      else
      {
        if (v106 != 124)
        {
LABEL_264:
          unint64_t v42 = *(void *)(a1 + 36);
          int v43 = *((_DWORD *)a1 + 11);
          int v44 = v104 + 1 - v43;
          unint64_t v45 = HIDWORD(v42);
          int v109 = 64;
          goto LABEL_304;
        }
        *a1 = 0;
        *((void *)a1 + 1) = v13 + 2;
        *((void *)a1 + 2) = v14;
        *((_DWORD *)a1 + 7) = v103 + 2;
        *((_DWORD *)a1 + 8) = v104 + 2;
        if (v105 != 1) {
          *a1 = v13[2];
        }
        unint64_t v37 = *(void *)(a1 + 36);
        int v38 = *((_DWORD *)a1 + 11);
        int v39 = v104 + 2 - v38;
        unint64_t v40 = HIDWORD(v37);
        int v41 = 65;
      }
LABEL_298:
      unsigned int v262 = v41;
      goto LABEL_404;
    case '}':
      *a1 = 0;
      int v107 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v107;
      *((void *)a1 + 1) = v13 + 1;
      *((void *)a1 + 2) = v8 - 1;
      if (v8 != 1) {
        *a1 = v13[1];
      }
      unint64_t v37 = *(void *)(a1 + 36);
      int v38 = *((_DWORD *)a1 + 11);
      int v39 = v107 - v38;
      unint64_t v40 = HIDWORD(v37);
      int v41 = 44;
      goto LABEL_298;
    case '~':
      *a1 = 0;
      int v108 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v108;
      *((void *)a1 + 1) = v13 + 1;
      *((void *)a1 + 2) = v8 - 1;
      if (v8 != 1) {
        *a1 = v13[1];
      }
      unint64_t v37 = *(void *)(a1 + 36);
      int v38 = *((_DWORD *)a1 + 11);
      int v39 = v108 - v38;
      unint64_t v40 = HIDWORD(v37);
      int v41 = 78;
      goto LABEL_298;
    default:
      if (v9 != 46 && (v9 - 48) > 9u)
      {
        if (v9 != 95 && ((v9 | 0x20) - 97) > 0x19u)
        {
LABEL_60:
          unint64_t v42 = *(void *)(a1 + 36);
          int v43 = *((_DWORD *)a1 + 11);
          int v44 = *((_DWORD *)a1 + 8) - v43;
          unint64_t v45 = HIDWORD(v42);
          unsigned int v262 = 0;
LABEL_305:
          unint64_t v263 = __PAIR64__(v45, v42);
          int v264 = v43;
          int v265 = v44;
          goto LABEL_405;
        }
        *a1 = 0;
        int v125 = *((_DWORD *)a1 + 7);
        int v124 = *((_DWORD *)a1 + 8);
        *((_DWORD *)a1 + 7) = v125 + 1;
        *((_DWORD *)a1 + 8) = v124 + 1;
        unint64_t v126 = v8 - 1;
        *((void *)a1 + 1) = v13 + 1;
        *((void *)a1 + 2) = v126;
        if (v126
          && ((int v127 = v13[1], *a1 = v127, v127 == 95)
           || (v127 - 48) < 0xA
           || (v127 | 0x20u) - 97 <= 0x19))
        {
          unsigned int v129 = v126 + 1;
          uint64_t v130 = (unsigned __int8 *)(v13 + 2);
          int v131 = 2;
          BOOL v132 = (unsigned __int8 *)(v13 + 2);
          while (1)
          {
            *a1 = 0;
            *((void *)a1 + 1) = v130;
            *((void *)a1 + 2) = v14;
            int v133 = v124 + v131;
            *((_DWORD *)a1 + 7) = v125 + v131;
            *((_DWORD *)a1 + 8) = v124 + v131;
            if (!v14) {
              break;
            }
            int v134 = *v132++;
            *a1 = v134;
            unsigned int v135 = v134 - 48;
            unsigned int v136 = (v134 | 0x20) - 97;
            ++v130;
            ++v131;
            --v14;
            if (v134 != 95 && v135 >= 0xA && v136 >= 0x1A)
            {
              unsigned int v129 = v131 - 1;
              break;
            }
          }
          unsigned int v251 = v129;
          uint64_t v253 = v5;
          uint64_t v254 = v4;
          unint64_t v252 = v6;
          int v256 = v7;
          if (v133 == *((_DWORD *)a1 + 11)) {
            goto LABEL_291;
          }
        }
        else
        {
          unsigned int v251 = 1;
          uint64_t v253 = v5;
          uint64_t v254 = v4;
          unint64_t v252 = v6;
          int v256 = v7;
          if (v124 + 1 == *((_DWORD *)a1 + 11))
          {
LABEL_291:
            double v128 = MEMORY[0x1E4F30960];
            *MEMORY[0x1E4F30960] += 2;
            goto LABEL_319;
          }
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        double v128 = *(double *)v258;
        if (!*(void *)v258)
        {
          double v257 = 0.0;
          uint64_t v139 = 0;
          unint64_t v140 = 0x100000000;
          char v255 = 1;
LABEL_320:
          uint64_t v141 = &WGSL::Lexer<unsigned char>::nextToken(void)::keywordMappings;
          unint64_t v142 = 27;
          do
          {
            int64_t v143 = &v141[3 * (v142 >> 1)];
            int v144 = WTF::codePointCompare();
            if (v144 >= 0) {
              v142 >>= 1;
            }
            else {
              v142 += ~(v142 >> 1);
            }
            if (v144 < 0) {
              uint64_t v141 = v143 + 3;
            }
          }
          while (v142);
          if (v141 == &WGSL::Lexer<unsigned char>::nextToken(void)::reservedWords
            || !WTF::operator==(v139, v140, (unsigned __int8 *)*v141, (uint64_t)v141[1])
            || (int v145 = *((_DWORD *)v141 + 4)) == 0)
          {
            int v7 = v256;
            if (v255)
            {
              uint64_t v149 = 0;
              unint64_t v150 = 0x100000000;
            }
            else
            {
              uint64_t v149 = *(unsigned __int8 **)(*(void *)&v257 + 8);
              unint64_t v150 = *(unsigned int *)(*(void *)&v257 + 4) | ((unint64_t)((*(_DWORD *)(*(void *)&v257 + 16) >> 2) & 1) << 32);
            }
            uint64_t v151 = &WGSL::Lexer<unsigned char>::nextToken(void)::reservedWords;
            unint64_t v152 = 145;
            do
            {
              uint64_t v153 = &v151[2 * (v152 >> 1)];
              int v154 = WTF::codePointCompare();
              if (v154 >= 0) {
                v152 >>= 1;
              }
              else {
                v152 += ~(v152 >> 1);
              }
              if (v154 < 0) {
                uint64_t v151 = v153 + 2;
              }
            }
            while (v152);
            if (v151 != &WGSL::Lexer<char16_t>::nextToken(void)::keywordMappings
              && WTF::operator==(v149, v150, (unsigned __int8 *)*v151, (uint64_t)v151[1]))
            {
              int v145 = 9;
            }
            else
            {
              unint64_t v5 = v253;
              unint64_t v4 = v254;
              uint64_t v6 = v252;
              if (v251 < 2 || *v13 != 95 || v13[1] != 95)
              {
                unint64_t v155 = *(void *)(a1 + 36);
                int v156 = *((_DWORD *)a1 + 11);
                int v157 = *((_DWORD *)a1 + 8) - v156;
                unsigned int v262 = 8;
                unint64_t v263 = v155;
                int v264 = v156;
                int v265 = v157;
                double v266 = v257;
                goto LABEL_405;
              }
              int v145 = 0;
            }
          }
          unint64_t v146 = *(void *)(a1 + 36);
          int v147 = *((_DWORD *)a1 + 11);
          int v148 = *((_DWORD *)a1 + 8) - v147;
          unsigned int v262 = v145;
          unint64_t v263 = v146;
          int v264 = v147;
          int v265 = v148;
          unint64_t v5 = v253;
          unint64_t v4 = v254;
          uint64_t v6 = v252;
          int v7 = v256;
          if ((v255 & 1) == 0)
          {
            if (**(_DWORD **)&v257 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              **(_DWORD **)&v257 -= 2;
            }
          }
          goto LABEL_405;
        }
LABEL_319:
        char v255 = 0;
        uint64_t v139 = *(unsigned __int8 **)(*(void *)&v128 + 8);
        double v257 = v128;
        unint64_t v140 = *(unsigned int *)(*(void *)&v128 + 4) | ((unint64_t)((*(_DWORD *)(*(void *)&v128 + 16) >> 2) & 1) << 32);
        goto LABEL_320;
      }
      uint64_t v110 = 0;
      uint64_t v111 = 0;
      unsigned int v112 = 0;
      char v113 = 0;
      char v114 = 0;
      int v115 = 0;
      unsigned int v116 = (unsigned __int8 *)(v13 + 1);
      unsigned int v117 = v13;
      break;
  }
  while (2)
  {
    switch(v115)
    {
      case 0:
        int v118 = v9;
        if (v9 == 46) {
          int v119 = 4;
        }
        else {
          int v119 = 2;
        }
        if (v118 == 48) {
          int v115 = 1;
        }
        else {
          int v115 = v119;
        }
        goto LABEL_253;
      case 1:
        int v115 = 9;
        uint64_t v120 = v110;
        switch((char)v9)
        {
          case '.':
            goto LABEL_189;
          case 'E':
          case 'e':
            goto LABEL_182;
          case 'X':
          case 'x':
            goto LABEL_254;
          case 'f':
          case 'h':
          case 'i':
          case 'u':
            goto LABEL_204;
          default:
            if ((v9 - 48) >= 0xAu) {
              goto LABEL_350;
            }
            goto LABEL_249;
        }
      case 2:
        if (v9 - 69 > 0x30) {
          goto LABEL_176;
        }
        if (((1 << (v9 - 69)) & 0x1001A00000000) != 0)
        {
LABEL_204:
          int v115 = 19;
          uint64_t v120 = v9;
          goto LABEL_254;
        }
        if (((1 << (v9 - 69)) & 0x100000001) != 0)
        {
LABEL_182:
          int v115 = 6;
        }
        else
        {
LABEL_176:
          if (v9 == 46)
          {
LABEL_189:
            int v115 = 5;
          }
          else
          {
            if ((v9 - 48) >= 0xAu) {
              goto LABEL_350;
            }
            int v115 = 2;
          }
        }
        goto LABEL_253;
      case 3:
        if (v9 == 46) {
          goto LABEL_189;
        }
        if (v9 == 101 || v9 == 69) {
          goto LABEL_182;
        }
        if ((v9 - 48) >= 0xAu) {
          goto LABEL_390;
        }
LABEL_249:
        int v115 = 3;
        goto LABEL_253;
      case 4:
        if ((v9 - 48) >= 0xAu)
        {
          unint64_t v179 = *(void *)(a1 + 36);
          int v180 = *((_DWORD *)a1 + 11);
          int v181 = *((_DWORD *)a1 + 8) - v180;
          unint64_t v182 = HIDWORD(v179);
          unsigned int v262 = 69;
LABEL_391:
          unint64_t v263 = __PAIR64__(v182, v179);
          int v264 = v180;
          int v265 = v181;
          goto LABEL_405;
        }
        int v115 = 5;
LABEL_208:
        uint64_t v120 = v110;
        unsigned int v112 = v13;
        goto LABEL_254;
      case 5:
        if (!v112) {
          unsigned int v112 = v13;
        }
        int v115 = 6;
        uint64_t v120 = v110;
        switch((char)v9)
        {
          case 'E':
          case 'e':
            goto LABEL_254;
          case 'f':
          case 'h':
            goto LABEL_204;
          default:
            if ((v9 - 48) < 0xAu) {
              goto LABEL_189;
            }
            goto LABEL_350;
        }
      case 6:
        int v115 = 7;
        if (v9 == 43 || v9 == 45) {
          goto LABEL_242;
        }
        if ((v9 - 48) >= 0xAu) {
          goto LABEL_390;
        }
        int v115 = 8;
        goto LABEL_227;
      case 7:
        if (v114 == 43) {
          uint64_t v111 = v13;
        }
        if ((v9 - 48) >= 0xAu) {
          goto LABEL_390;
        }
        goto LABEL_247;
      case 8:
        int v115 = 19;
        if (v9 == 102 || v9 == 104)
        {
          uint64_t v120 = v9;
          goto LABEL_254;
        }
        if ((v9 - 48) < 0xAu)
        {
LABEL_247:
          int v115 = 8;
LABEL_253:
          uint64_t v120 = v110;
LABEL_254:
          *a1 = 0;
          if (!v8) {
            goto LABEL_486;
          }
          ++v13;
          *(int32x2_t *)(a1 + 28) = vadd_s32(*(int32x2_t *)(a1 + 28), (int32x2_t)0x100000001);
          --v8;
          *((void *)a1 + 1) = v116;
          *((void *)a1 + 2) = v8;
          if (v8)
          {
            uint64_t v9 = *v13;
            *a1 = v9;
            ++v116;
            uint64_t v110 = v120;
            if (v115 == 19) {
              goto LABEL_351;
            }
          }
          else
          {
            uint64_t v9 = 0;
            ++v116;
            uint64_t v110 = v120;
            if (v115 == 19) {
              goto LABEL_351;
            }
          }
          continue;
        }
LABEL_350:
        LOBYTE(v120) = v110;
LABEL_351:
        if ((unint64_t)v112 | (unint64_t)v111)
        {
          if (v113)
          {
            *(void *)int v258 = 0;
            _D0 = strtod(v117 - 2, (char **)v258);
            switch((char)v120)
            {
              case 'f':
                goto LABEL_364;
              case 'h':
                goto LABEL_370;
              case 'i':
              case 'u':
                goto LABEL_374;
              default:
                goto LABEL_367;
            }
          }
          *(void *)int v258 = 0;
          if (v13 - v117 >= 0)
          {
            WTF::parseDouble();
            switch((char)v120)
            {
              case 'f':
LABEL_364:
                WGSL::convertFloat<float,double>(double)::max = 2139095039;
                WGSL::convertFloat<float,double>(double)::lowest = -8388609;
                if (_D0 > 3.40282347e38 || _D0 < -3.40282347e38) {
                  goto LABEL_374;
                }
                float v166 = _D0;
                _D0 = v166;
                unint64_t v167 = *(void *)(a1 + 36);
                int v168 = *((_DWORD *)a1 + 11);
                int v169 = *((_DWORD *)a1 + 8) - v168;
                unint64_t v170 = HIDWORD(v167);
                int v171 = 6;
                goto LABEL_373;
              case 'h':
LABEL_370:
                WGSL::convertFloat<half,double>(double)::max = 31743;
                WGSL::convertFloat<half,double>(double)::lowest = -1025;
                if (_D0 > 65504.0 || _D0 < -65504.0) {
                  goto LABEL_374;
                }
                __asm
                {
                  FCVT            H0, D0
                  FCVT            D0, H0
                }
                unint64_t v167 = *(void *)(a1 + 36);
                int v168 = *((_DWORD *)a1 + 11);
                int v169 = *((_DWORD *)a1 + 8) - v168;
                unint64_t v170 = HIDWORD(v167);
                int v171 = 7;
                goto LABEL_373;
              case 'i':
              case 'u':
                goto LABEL_374;
              default:
LABEL_367:
                WGSL::convertFloat<double,double>(double)::max = 0x7FEFFFFFFFFFFFFFLL;
                WGSL::convertFloat<double,double>(double)::lowest = 0xFFEFFFFFFFFFFFFFLL;
                if (_D0 > 1.79769313e308 || _D0 < -1.79769313e308)
                {
LABEL_374:
                  unint64_t v176 = *(void *)(a1 + 36);
                  int v177 = *((_DWORD *)a1 + 11);
                  int v178 = *((_DWORD *)a1 + 8) - v177;
                  unsigned int v262 = 0;
                  unint64_t v263 = v176;
                  int v264 = v177;
                  int v265 = v178;
                }
                else
                {
                  unint64_t v167 = *(void *)(a1 + 36);
                  int v168 = *((_DWORD *)a1 + 11);
                  int v169 = *((_DWORD *)a1 + 8) - v168;
                  unint64_t v170 = HIDWORD(v167);
                  int v171 = 2;
LABEL_373:
                  unsigned int v262 = v171;
                  unint64_t v263 = __PAIR64__(v170, v167);
                  int v264 = v168;
                  int v265 = v169;
                  double v266 = _D0;
                }
                break;
            }
            goto LABEL_405;
          }
LABEL_486:
          __break(1u);
LABEL_487:
          __break(0xC471u);
          JUMPOUT(0x18257EAE4);
        }
        int v159 = &v13[-(v120 != 0)];
        if ((unint64_t)(v159 - v117) >= 0x14) {
          goto LABEL_390;
        }
        if (v113) {
          unsigned int v160 = 16;
        }
        else {
          unsigned int v160 = 10;
        }
        if (v117 == v159)
        {
          BOOL v161 = 0;
          uint64_t v162 = std::__from_chars_integral[abi:sn180100]<unsigned long long,0>(v117, v159, v258, v160);
          if (v163 != 22) {
            goto LABEL_360;
          }
LABEL_376:
          *(double *)&uint64_t v164 = 0.0;
          int v165 = v163;
          uint64_t v162 = v117;
          goto LABEL_388;
        }
        BOOL v161 = *v117 == 45;
        uint64_t v162 = std::__from_chars_integral[abi:sn180100]<unsigned long long,0>(&v117[*v117 == 45], v159, v258, v160);
        if (v163 == 22) {
          goto LABEL_376;
        }
LABEL_360:
        if (v163 == 34)
        {
          *(double *)&uint64_t v164 = 0.0;
          int v165 = 34;
        }
        else if (v161)
        {
          if (*(void *)v258 <= 0x8000000000000000) {
            uint64_t v164 = -*(void *)v258;
          }
          else {
            *(double *)&uint64_t v164 = 0.0;
          }
          int v165 = 34;
          if (*(void *)v258 <= 0x8000000000000000) {
            int v165 = v163;
          }
        }
        else
        {
          uint64_t v164 = *(void *)v258 & ~(*(uint64_t *)v258 >> 63);
          int v165 = 34;
          if (*(uint64_t *)v258 >= 0) {
            int v165 = v163;
          }
        }
LABEL_388:
        if (v159 != v162) {
          goto LABEL_487;
        }
        if (v165 == 34)
        {
LABEL_390:
          unint64_t v179 = *(void *)(a1 + 36);
          int v180 = *((_DWORD *)a1 + 11);
          int v181 = *((_DWORD *)a1 + 8) - v180;
          unint64_t v182 = HIDWORD(v179);
          unsigned int v262 = 0;
          goto LABEL_391;
        }
        switch((char)v120)
        {
          case 'f':
            double v183 = (float)v164;
            unint64_t v184 = *(void *)(a1 + 36);
            int v185 = *((_DWORD *)a1 + 11);
            int v186 = *((_DWORD *)a1 + 8) - v185;
            unsigned int v262 = 6;
            unint64_t v263 = v184;
            int v264 = v185;
            int v265 = v186;
            double v266 = v183;
            break;
          case 'h':
            if ((unint64_t)(v164 - 65505) < 0xFFFFFFFFFFFE003FLL) {
              goto LABEL_60;
            }
            _S0 = (float)v164;
            __asm
            {
              FCVT            H0, S0
              FCVT            D0, H0
            }
            unint64_t v192 = *(void *)(a1 + 36);
            int v193 = *((_DWORD *)a1 + 11);
            int v194 = *((_DWORD *)a1 + 8) - v193;
            unsigned int v262 = 7;
            unint64_t v263 = v192;
            int v264 = v193;
            int v265 = v194;
            double v266 = _D0;
            break;
          case 'i':
            if (v164 != (int)v164) {
              goto LABEL_60;
            }
            unint64_t v195 = *(void *)(a1 + 36);
            int v196 = *((_DWORD *)a1 + 11);
            int v197 = *((_DWORD *)a1 + 8) - v196;
            unint64_t v198 = HIDWORD(v195);
            int v199 = 4;
            goto LABEL_401;
          case 'u':
            if (HIDWORD(v164)) {
              goto LABEL_60;
            }
            unint64_t v195 = *(void *)(a1 + 36);
            int v196 = *((_DWORD *)a1 + 11);
            int v197 = *((_DWORD *)a1 + 8) - v196;
            unint64_t v198 = HIDWORD(v195);
            int v199 = 5;
LABEL_401:
            unsigned int v262 = v199;
            unint64_t v263 = __PAIR64__(v198, v195);
            int v264 = v196;
            int v265 = v197;
            double v266 = *(double *)&v164;
            break;
          default:
            unint64_t v187 = *(void *)(a1 + 36);
            int v188 = *((_DWORD *)a1 + 11);
            int v189 = *((_DWORD *)a1 + 8) - v188;
            unsigned int v262 = 3;
            unint64_t v263 = v187;
            int v264 = v188;
            int v265 = v189;
            double v266 = *(double *)&v164;
            break;
        }
LABEL_405:
        uint64_t v200 = *(unsigned int *)(a2 + 12);
        if (v200 == *(_DWORD *)(a2 + 8))
        {
          unint64_t v201 = WTF::Vector<WGSL::Token,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v200 + 1, (unint64_t)&v262);
          uint64_t v202 = *(unsigned int *)(a2 + 12);
          LODWORD(v200) = *(_DWORD *)(a2 + 12);
          uint64_t v203 = *(void *)a2;
          uint64_t v204 = *(void *)a2 + 32 * v202;
          *(_DWORD *)uint64_t v204 = *(_DWORD *)v201;
          *(_OWORD *)(v204 + 4) = *(_OWORD *)(v201 + 4);
          int v205 = *(_DWORD *)v201;
          if (*(_DWORD *)v201 > 8u) {
            goto LABEL_424;
          }
          if (((1 << v205) & 0x38) != 0)
          {
            *(void *)(v203 + 32 * v202 + 24) = *(void *)(v201 + 24);
            goto LABEL_424;
          }
          if (((1 << v205) & 0xC4) != 0)
          {
            double v206 = *(double *)(v201 + 24);
            uint64_t v207 = v203 + 32 * v202;
            goto LABEL_414;
          }
          if (v205 == 8)
          {
            uint64_t v210 = v203 + 32 * v202;
            *(void *)(v210 + 24) = 0;
            long long v211 = (double *)(v210 + 24);
            double v212 = *(double *)(v201 + 24);
            if (v212 == 0.0)
            {
LABEL_423:
              *long long v211 = v212;
              goto LABEL_424;
            }
LABEL_422:
            **(_DWORD **)&v212 += 2;
            goto LABEL_423;
          }
LABEL_424:
          unsigned int v209 = v262;
        }
        else
        {
          uint64_t v203 = *(void *)a2;
          uint64_t v208 = *(void *)a2 + 32 * v200;
          *(_DWORD *)uint64_t v208 = v262;
          *(_OWORD *)(v208 + 4) = *(_OWORD *)v4;
          unsigned int v209 = v262;
          if (v262 <= 8)
          {
            if (((1 << v262) & 0x38) != 0)
            {
              *(double *)(v203 + 32 * v200 + 24) = v266;
              goto LABEL_424;
            }
            if (((1 << v262) & 0xC4) != 0)
            {
              double v206 = v266;
              uint64_t v207 = v203 + 32 * v200;
LABEL_414:
              *(double *)(v207 + 24) = v206;
              goto LABEL_424;
            }
            if (v262 == 8)
            {
              uint64_t v213 = v203 + 32 * v200;
              *(void *)(v213 + 24) = 0;
              long long v211 = (double *)(v213 + 24);
              double v212 = v266;
              if (v266 == 0.0) {
                goto LABEL_423;
              }
              goto LABEL_422;
            }
          }
        }
        uint64_t v214 = (v200 + 1);
        *(_DWORD *)(a2 + 12) = v214;
        if (v209 - 52 < 2) {
          goto LABEL_452;
        }
        if (v209 == 54)
        {
          uint64_t v215 = *(void *)(a1 + 36);
          int v216 = *((_DWORD *)a1 + 11);
          int v217 = *((_DWORD *)a1 + 8) - v216;
          *(_DWORD *)int v258 = 82;
          *(void *)&v258[4] = v215;
          int v259 = v216;
          int v260 = v217;
          if (v214 == *(_DWORD *)(a2 + 8))
          {
            unint64_t v218 = WTF::Vector<WGSL::Token,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v214 + 1, (unint64_t)v258);
            uint64_t v219 = *(unsigned int *)(a2 + 12);
            uint64_t v220 = *(void *)a2;
            uint64_t v221 = *(void *)a2 + 32 * v219;
            *(_DWORD *)uint64_t v221 = *(_DWORD *)v218;
            *(_OWORD *)(v221 + 4) = *(_OWORD *)(v218 + 4);
            int v222 = *(_DWORD *)v218;
            if (*(_DWORD *)v218 > 8u) {
              goto LABEL_446;
            }
            if (((1 << v222) & 0x38) != 0)
            {
              *(void *)(v220 + 32 * v219 + 24) = *(void *)(v218 + 24);
              goto LABEL_446;
            }
            if (((1 << v222) & 0xC4) != 0)
            {
              uint64_t v223 = *(_DWORD **)(v218 + 24);
              uint64_t v224 = v220 + 32 * v219;
              goto LABEL_436;
            }
            if (v222 == 8)
            {
              uint64_t v227 = v220 + 32 * v219;
              *(void *)(v227 + 24) = 0;
              uint64_t v228 = (void *)(v227 + 24);
              uint64_t v229 = *(_DWORD **)(v218 + 24);
              if (!v229)
              {
LABEL_445:
                *uint64_t v228 = v229;
                goto LABEL_446;
              }
LABEL_444:
              *v229 += 2;
              goto LABEL_445;
            }
LABEL_446:
            int v226 = *(_DWORD *)v258;
          }
          else
          {
            uint64_t v225 = v203 + 32 * v214;
            *(_DWORD *)uint64_t v225 = 82;
            *(_OWORD *)(v225 + 4) = *v6;
            int v226 = *(_DWORD *)v258;
            if (*(_DWORD *)v258 <= 8u)
            {
              if (((1 << v258[0]) & 0x38) != 0)
              {
                *(void *)(v203 + 32 * v214 + 24) = v261;
                goto LABEL_446;
              }
              if (((1 << v258[0]) & 0xC4) != 0)
              {
                uint64_t v223 = v261;
                uint64_t v224 = v203 + 32 * v214;
LABEL_436:
                *(void *)(v224 + 24) = v223;
                goto LABEL_446;
              }
              if (*(_DWORD *)v258 == 8)
              {
                uint64_t v230 = v203 + 32 * v214;
                *(void *)(v230 + 24) = 0;
                uint64_t v228 = (void *)(v230 + 24);
                uint64_t v229 = v261;
                if (!v261) {
                  goto LABEL_445;
                }
                goto LABEL_444;
              }
            }
          }
          LODWORD(v214) = *(_DWORD *)(a2 + 12) + 1;
          *(_DWORD *)(a2 + 12) = v214;
          if (v226 == 8)
          {
            uint64_t v231 = v261;
            uint64_t v261 = 0;
            if (v231)
            {
              if (*v231 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *v231 -= 2;
              }
            }
          }
LABEL_452:
          uint64_t v232 = *(void *)(a1 + 36);
          int v233 = *((_DWORD *)a1 + 11);
          int v234 = *((_DWORD *)a1 + 8) - v233;
          *(_DWORD *)int v258 = 82;
          *(void *)&v258[4] = v232;
          int v259 = v233;
          int v260 = v234;
          if (v214 == *(_DWORD *)(a2 + 8))
          {
            unint64_t v235 = WTF::Vector<WGSL::Token,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v214 + 1, (unint64_t)v258);
            uint64_t v236 = *(unsigned int *)(a2 + 12);
            LODWORD(v214) = *(_DWORD *)(a2 + 12);
            uint64_t v237 = *(void *)a2;
            uint64_t v238 = *(void *)a2 + 32 * v236;
            *(_DWORD *)uint64_t v238 = *(_DWORD *)v235;
            *(_OWORD *)(v238 + 4) = *(_OWORD *)(v235 + 4);
            int v239 = *(_DWORD *)v235;
            if (*(_DWORD *)v235 <= 8u)
            {
              if (((1 << v239) & 0x38) != 0)
              {
                *(void *)(v237 + 32 * v236 + 24) = *(void *)(v235 + 24);
                goto LABEL_471;
              }
              if (((1 << v239) & 0xC4) != 0)
              {
                uint64_t v240 = *(_DWORD **)(v235 + 24);
                uint64_t v241 = v237 + 32 * v236;
                goto LABEL_461;
              }
              if (v239 == 8)
              {
                uint64_t v245 = v237 + 32 * v236;
                *(void *)(v245 + 24) = 0;
                uint64_t v246 = (void *)(v245 + 24);
                uint64_t v247 = *(_DWORD **)(v235 + 24);
                if (!v247)
                {
LABEL_470:
                  *uint64_t v246 = v247;
                  goto LABEL_471;
                }
LABEL_469:
                *v247 += 2;
                goto LABEL_470;
              }
            }
LABEL_471:
            int v244 = *(_DWORD *)v258;
          }
          else
          {
            uint64_t v242 = *(void *)a2;
            uint64_t v243 = *(void *)a2 + 32 * v214;
            *(_DWORD *)uint64_t v243 = 82;
            *(_OWORD *)(v243 + 4) = *v6;
            int v244 = *(_DWORD *)v258;
            if (*(_DWORD *)v258 <= 8u)
            {
              if (((1 << v258[0]) & 0x38) != 0)
              {
                *(void *)(v242 + 32 * v214 + 24) = v261;
                goto LABEL_471;
              }
              if (((1 << v258[0]) & 0xC4) != 0)
              {
                uint64_t v240 = v261;
                uint64_t v241 = v242 + 32 * v214;
LABEL_461:
                *(void *)(v241 + 24) = v240;
                goto LABEL_471;
              }
              if (*(_DWORD *)v258 == 8)
              {
                uint64_t v248 = v242 + 32 * v214;
                *(void *)(v248 + 24) = 0;
                uint64_t v246 = (void *)(v248 + 24);
                uint64_t v247 = v261;
                if (!v261) {
                  goto LABEL_470;
                }
                goto LABEL_469;
              }
            }
          }
          *(_DWORD *)(a2 + 12) = v214 + 1;
          if (v244 == 8)
          {
            unsigned int v249 = v261;
            uint64_t v261 = 0;
            if (v249)
            {
              if (*v249 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *v249 -= 2;
              }
            }
          }
          unsigned int v209 = v262;
        }
        if (v209 == 8)
        {
          double v250 = v266;
          double v266 = 0.0;
          if (v250 != 0.0)
          {
            if (**(_DWORD **)&v250 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              **(_DWORD **)&v250 -= 2;
            }
          }
        }
        if (v209 > 1) {
          goto LABEL_4;
        }
        return;
      case 9:
        if (v9 == 46)
        {
          int v115 = 11;
          char v113 = 1;
LABEL_237:
          uint64_t v120 = v110;
          unsigned int v117 = v13;
          goto LABEL_254;
        }
        int v115 = 10;
        char v113 = 1;
        if ((v9 - 48) < 0xAu) {
          goto LABEL_237;
        }
        uint64_t v120 = v110;
        unsigned int v117 = v13;
        if (((v9 | 0x20) - 97) >= 6u) {
          goto LABEL_390;
        }
        goto LABEL_254;
      case 10:
        int v115 = 16;
        uint64_t v120 = v110;
        switch((char)v9)
        {
          case 'P':
          case 'p':
            goto LABEL_254;
          case 'i':
          case 'u':
            goto LABEL_204;
          default:
            int v115 = 10;
            if ((v9 - 48) < 0xAu) {
              goto LABEL_253;
            }
            uint64_t v120 = v110;
            if (((v9 | 0x20) - 97) >= 6u) {
              goto LABEL_350;
            }
            goto LABEL_254;
        }
      case 11:
        int v115 = 12;
        if ((v9 - 48) < 0xAu) {
          goto LABEL_208;
        }
        uint64_t v120 = v110;
        unsigned int v112 = v13;
        if (((v9 | 0x20) - 97) >= 6u) {
          goto LABEL_390;
        }
        goto LABEL_254;
      case 12:
        if (!v112) {
          unsigned int v112 = v13;
        }
        int v115 = 12;
        if ((v9 - 48) < 0xAu || ((v9 | 0x20) - 97) < 6u) {
          goto LABEL_253;
        }
        if ((v9 | 0x20) != 0x70) {
          goto LABEL_350;
        }
        int v115 = 13;
        goto LABEL_253;
      case 13:
        if ((v9 - 48) < 0xAu)
        {
          int v115 = 15;
          goto LABEL_227;
        }
        int v121 = v9;
        int v115 = 14;
        if (v9 != 43) {
          goto LABEL_239;
        }
        goto LABEL_242;
      case 14:
        if (v114 == 43) {
          uint64_t v111 = v13;
        }
        if ((v9 - 48) >= 0xAu) {
          goto LABEL_390;
        }
        goto LABEL_233;
      case 15:
        if ((v9 - 48) < 0xAu) {
          goto LABEL_233;
        }
        int v115 = 19;
        uint64_t v120 = v9;
        if (v9 != 102 && v9 != 104) {
          goto LABEL_350;
        }
        goto LABEL_254;
      case 16:
        if ((v9 - 48) >= 0xAu)
        {
          int v121 = v9;
          int v115 = 17;
          if (v9 == 43)
          {
LABEL_242:
            uint64_t v120 = v110;
            uint64_t v111 = v13;
            char v114 = v9;
          }
          else
          {
LABEL_239:
            uint64_t v120 = v110;
            uint64_t v111 = v13;
            char v114 = v9;
            if (v121 != 45) {
              goto LABEL_390;
            }
          }
        }
        else
        {
          int v115 = 18;
LABEL_227:
          uint64_t v120 = v110;
          uint64_t v111 = v13;
        }
        goto LABEL_254;
      case 17:
        if (v114 == 43) {
          uint64_t v111 = v13;
        }
        if ((v9 - 48) >= 0xAu) {
          goto LABEL_390;
        }
        int v115 = 18;
        goto LABEL_253;
      case 18:
        if ((v9 - 48) < 0xAu)
        {
LABEL_233:
          int v115 = 15;
          goto LABEL_253;
        }
        int v115 = 19;
        uint64_t v120 = v9;
        if (v9 != 102 && v9 != 104) {
          goto LABEL_390;
        }
        goto LABEL_254;
      default:
        goto LABEL_253;
    }
  }
}

void WGSL::Lexer<char16_t>::lex(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = &v260;
  uint64_t v269 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = (__int16 *)(a1 + 18);
  uint64_t v6 = &v265[4];
  int v7 = (__int16 *)(a1 + 12);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
LABEL_4:
  unint64_t v8 = *((void *)a1 + 2);
  if (!v8)
  {
    *(void *)unint64_t v5 = *(void *)v7;
    *((_DWORD *)v5 + 2) = *((_DWORD *)v7 + 2);
    int v10 = *((_DWORD *)a1 + 8);
    goto LABEL_335;
  }
  unsigned __int16 v9 = *a1;
  while (1)
  {
    if (v9 - 9 < 5 || v9 == 32)
    {
      *a1 = 0;
      int v10 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v10;
      unint64_t v11 = v8 - 1;
      _ZF = v8 == 1;
      uint64_t v12 = (unsigned __int16 *)(*((void *)a1 + 1) + 2);
      *((void *)a1 + 1) = v12;
      *((void *)a1 + 2) = v11;
      if (_ZF)
      {
        unsigned __int16 v13 = 0;
        if (v9 != 10) {
          goto LABEL_10;
        }
      }
      else
      {
        unsigned __int16 v13 = *v12;
        *a1 = *v12;
        if (v9 != 10) {
          goto LABEL_10;
        }
      }
      int v14 = 0;
      ++*(_DWORD *)v7;
      goto LABEL_9;
    }
    uint64_t v15 = *((void *)a1 + 1);
    BOOL v16 = v8 > 1;
    unint64_t v17 = v8 - 2;
    if (v8 < 2 || *(_WORD *)v15 != 47) {
      goto LABEL_57;
    }
    int v18 = *(unsigned __int16 *)(v15 + 2);
    if (v18 == 42)
    {
      *a1 = 0;
      int v10 = *((_DWORD *)a1 + 8) + 2;
      int v14 = *((_DWORD *)a1 + 7) + 2;
      *((_DWORD *)a1 + 7) = v14;
      *((_DWORD *)a1 + 8) = v10;
      unint64_t v24 = v8 - 2;
      unint64_t v25 = (unsigned __int16 *)(v15 + 4);
      *((void *)a1 + 1) = v15 + 4;
      *((void *)a1 + 2) = v8 - 2;
      if (v8 == 2) {
        goto LABEL_55;
      }
      LOWORD(v26) = *v25;
      int v27 = 1;
      while (1)
      {
        *a1 = 0;
        int v28 = v25 + 1;
        unint64_t v11 = v24 - 1;
        if (v24 == 1)
        {
          unsigned __int16 v13 = 0;
          int v29 = v10 + 1;
          int v30 = v14 + 1;
          int v26 = (unsigned __int16)v26;
          if ((unsigned __int16)v26 <= 0x29u)
          {
LABEL_44:
            if (v26 != 10)
            {
              int v14 = v30;
              int v10 = v29;
              if (!v26) {
                goto LABEL_54;
              }
              goto LABEL_28;
            }
            int v14 = 0;
            ++*(_DWORD *)v7;
            goto LABEL_27;
          }
        }
        else
        {
          unsigned __int16 v13 = *v28;
          *a1 = *v28;
          int v29 = v10 + 1;
          int v30 = v14 + 1;
          int v26 = (unsigned __int16)v26;
          if ((unsigned __int16)v26 <= 0x29u) {
            goto LABEL_44;
          }
        }
        if (v26 == 42)
        {
          if (v24 == 1) {
            goto LABEL_54;
          }
          if (*v28 == 47)
          {
            *a1 = 0;
            int v28 = v25 + 2;
            if (v24 == 2)
            {
              unsigned __int16 v13 = 0;
              unint64_t v11 = 0;
              v10 += 2;
              v14 += 2;
              if (!--v27)
              {
LABEL_7:
                *((void *)a1 + 1) = v28;
                goto LABEL_8;
              }
            }
            else
            {
              unsigned __int16 v13 = *v28;
              *a1 = *v28;
              unint64_t v11 = v24 - 2;
              v10 += 2;
              v14 += 2;
              if (!--v27) {
                goto LABEL_7;
              }
            }
            goto LABEL_28;
          }
        }
        else if (v26 == 47)
        {
          if (v24 == 1) {
            goto LABEL_54;
          }
          if (*v28 == 42)
          {
            *a1 = 0;
            int v28 = v25 + 2;
            if (v24 == 2)
            {
              unsigned __int16 v13 = 0;
            }
            else
            {
              unsigned __int16 v13 = *v28;
              *a1 = *v28;
            }
            unint64_t v11 = v24 - 2;
            v10 += 2;
            v14 += 2;
            ++v27;
            goto LABEL_28;
          }
        }
        int v14 = v30;
LABEL_27:
        int v10 = v29;
LABEL_28:
        unint64_t v25 = v28;
        LOWORD(v26) = v13;
        unint64_t v24 = v11;
        if (!v11)
        {
          int v29 = v10;
          int v30 = v14;
LABEL_54:
          *((void *)a1 + 1) = v28;
          *((void *)a1 + 2) = v11;
          int v10 = v29;
          *((_DWORD *)a1 + 7) = v30;
          *((_DWORD *)a1 + 8) = v29;
LABEL_55:
          unint64_t v31 = *(void *)(a1 + 18);
          int v32 = *((_DWORD *)a1 + 11);
          int v33 = v10 - v32;
          unint64_t v34 = HIDWORD(v31);
          unsigned int v259 = 0;
LABEL_336:
          unint64_t v260 = __PAIR64__(v34, v31);
          int v261 = v32;
          int v262 = v33;
          goto LABEL_337;
        }
      }
    }
    if (v18 != 47) {
      break;
    }
    int v19 = (unsigned __int16 *)(v15 + 2);
    int v20 = *((_DWORD *)a1 + 7);
    int v21 = *((_DWORD *)a1 + 8);
    uint64_t v22 = *((void *)a1 + 1);
    int v14 = v20;
    int v10 = v21;
    unint64_t v11 = v8;
    do
    {
      *a1 = 0;
      if (!--v11)
      {
        int v10 = v21 + v8;
        *((void *)a1 + 1) = v15 + 2 * v8;
        *((void *)a1 + 2) = 0;
        *((_DWORD *)a1 + 7) = v20 + v8;
        *((_DWORD *)a1 + 8) = v21 + v8;
LABEL_334:
        *(void *)unint64_t v5 = *(void *)v7;
        *((_DWORD *)v5 + 2) = *((_DWORD *)v7 + 2);
LABEL_335:
        unint64_t v31 = *(void *)(a1 + 18);
        int v32 = *((_DWORD *)a1 + 11);
        int v33 = v10 - v32;
        unint64_t v34 = HIDWORD(v31);
        unsigned int v259 = 1;
        goto LABEL_336;
      }
      ++v14;
      ++v10;
      unsigned __int16 v13 = *v19;
      *a1 = *v19;
      int v23 = *v19++;
      v22 += 2;
    }
    while (v23 != 10);
    *((void *)a1 + 1) = v22;
LABEL_8:
    *((void *)a1 + 2) = v11;
    *((_DWORD *)a1 + 8) = v10;
LABEL_9:
    *((_DWORD *)a1 + 7) = v14;
LABEL_10:
    unsigned __int16 v9 = v13;
    unint64_t v8 = v11;
    if (!v11) {
      goto LABEL_334;
    }
  }
  BOOL v16 = 1;
LABEL_57:
  *(void *)unint64_t v5 = *(void *)v7;
  *((_DWORD *)v5 + 2) = *((_DWORD *)v7 + 2);
  switch(v9)
  {
    case '!':
      *a1 = 0;
      int v36 = *((_DWORD *)a1 + 7);
      int v35 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v36 + 1;
      *((_DWORD *)a1 + 8) = v35 + 1;
      unint64_t v37 = v8 - 1;
      *((void *)a1 + 1) = v15 + 2;
      *((void *)a1 + 2) = v37;
      if (!v37 || (int v38 = *(unsigned __int16 *)(v15 + 2), *a1 = v38, v38 != 61))
      {
        unint64_t v108 = *(void *)(a1 + 18);
        int v109 = *((_DWORD *)a1 + 11);
        int v110 = v35 + 1 - v109;
        unint64_t v111 = HIDWORD(v108);
        int v112 = 41;
        goto LABEL_418;
      }
      *a1 = 0;
      *((void *)a1 + 1) = v15 + 4;
      *((void *)a1 + 2) = v17;
      int v39 = v35 + 2;
      *((_DWORD *)a1 + 7) = v36 + 2;
      *((_DWORD *)a1 + 8) = v35 + 2;
      if (v37 != 1) {
        *a1 = *(_WORD *)(v15 + 4);
      }
      unint64_t v31 = *(void *)(a1 + 18);
      int v32 = *((_DWORD *)a1 + 11);
      int v33 = v39 - v32;
      unint64_t v34 = HIDWORD(v31);
      int v40 = 42;
      goto LABEL_306;
    case '%':
      *a1 = 0;
      int v46 = *((_DWORD *)a1 + 7);
      int v45 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v46 + 1;
      *((_DWORD *)a1 + 8) = v45 + 1;
      unint64_t v47 = v8 - 1;
      *((void *)a1 + 1) = v15 + 2;
      *((void *)a1 + 2) = v47;
      if (!v47 || (int v48 = *(unsigned __int16 *)(v15 + 2), *a1 = v48, v48 != 61))
      {
        unint64_t v108 = *(void *)(a1 + 18);
        int v109 = *((_DWORD *)a1 + 11);
        int v110 = v45 + 1 - v109;
        unint64_t v111 = HIDWORD(v108);
        int v112 = 62;
        goto LABEL_418;
      }
      *a1 = 0;
      *((void *)a1 + 1) = v15 + 4;
      *((void *)a1 + 2) = v17;
      int v49 = v45 + 2;
      *((_DWORD *)a1 + 7) = v46 + 2;
      *((_DWORD *)a1 + 8) = v45 + 2;
      if (v47 != 1) {
        *a1 = *(_WORD *)(v15 + 4);
      }
      unint64_t v31 = *(void *)(a1 + 18);
      int v32 = *((_DWORD *)a1 + 11);
      int v33 = v49 - v32;
      unint64_t v34 = HIDWORD(v31);
      int v40 = 63;
      goto LABEL_306;
    case '&':
      *a1 = 0;
      int v50 = *((_DWORD *)a1 + 7);
      int v51 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v50 + 1;
      *((_DWORD *)a1 + 8) = v51 + 1;
      unint64_t v52 = v8 - 1;
      *((void *)a1 + 1) = v15 + 2;
      *((void *)a1 + 2) = v52;
      if (!v52) {
        goto LABEL_268;
      }
      int v53 = *(unsigned __int16 *)(v15 + 2);
      *a1 = v53;
      if (v53 == 61)
      {
        *a1 = 0;
        *((void *)a1 + 1) = v15 + 4;
        *((void *)a1 + 2) = v17;
        *((_DWORD *)a1 + 7) = v50 + 2;
        *((_DWORD *)a1 + 8) = v51 + 2;
        if (v52 != 1) {
          *a1 = *(_WORD *)(v15 + 4);
        }
        unint64_t v31 = *(void *)(a1 + 18);
        int v32 = *((_DWORD *)a1 + 11);
        int v33 = v51 + 2 - v32;
        unint64_t v34 = HIDWORD(v31);
        int v40 = 38;
      }
      else
      {
        if (v53 != 38)
        {
LABEL_268:
          unint64_t v108 = *(void *)(a1 + 18);
          int v109 = *((_DWORD *)a1 + 11);
          int v110 = v51 + 1 - v109;
          unint64_t v111 = HIDWORD(v108);
          int v112 = 36;
          goto LABEL_418;
        }
        *a1 = 0;
        *((void *)a1 + 1) = v15 + 4;
        *((void *)a1 + 2) = v17;
        *((_DWORD *)a1 + 7) = v50 + 2;
        *((_DWORD *)a1 + 8) = v51 + 2;
        if (v52 != 1) {
          *a1 = *(_WORD *)(v15 + 4);
        }
        unint64_t v31 = *(void *)(a1 + 18);
        int v32 = *((_DWORD *)a1 + 11);
        int v33 = v51 + 2 - v32;
        unint64_t v34 = HIDWORD(v31);
        int v40 = 37;
      }
      goto LABEL_306;
    case '(':
      *a1 = 0;
      int v54 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v54;
      *((void *)a1 + 1) = v15 + 2;
      *((void *)a1 + 2) = v8 - 1;
      if (v8 != 1) {
        *a1 = *(_WORD *)(v15 + 2);
      }
      unint64_t v31 = *(void *)(a1 + 18);
      int v32 = *((_DWORD *)a1 + 11);
      int v33 = v54 - v32;
      unint64_t v34 = HIDWORD(v31);
      int v40 = 67;
      goto LABEL_306;
    case ')':
      *a1 = 0;
      int v55 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v55;
      *((void *)a1 + 1) = v15 + 2;
      *((void *)a1 + 2) = v8 - 1;
      if (v8 != 1) {
        *a1 = *(_WORD *)(v15 + 2);
      }
      unint64_t v31 = *(void *)(a1 + 18);
      int v32 = *((_DWORD *)a1 + 11);
      int v33 = v55 - v32;
      unint64_t v34 = HIDWORD(v31);
      int v40 = 68;
      goto LABEL_306;
    case '*':
      *a1 = 0;
      int v57 = *((_DWORD *)a1 + 7);
      int v56 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v57 + 1;
      *((_DWORD *)a1 + 8) = v56 + 1;
      unint64_t v58 = v8 - 1;
      *((void *)a1 + 1) = v15 + 2;
      *((void *)a1 + 2) = v58;
      if (!v58 || (int v59 = *(unsigned __int16 *)(v15 + 2), *a1 = v59, v59 != 61))
      {
        unint64_t v108 = *(void *)(a1 + 18);
        int v109 = *((_DWORD *)a1 + 11);
        int v110 = v56 + 1 - v109;
        unint64_t v111 = HIDWORD(v108);
        int v112 = 76;
        goto LABEL_418;
      }
      *a1 = 0;
      *((void *)a1 + 1) = v15 + 4;
      *((void *)a1 + 2) = v17;
      int v60 = v56 + 2;
      *((_DWORD *)a1 + 7) = v57 + 2;
      *((_DWORD *)a1 + 8) = v56 + 2;
      if (v58 != 1) {
        *a1 = *(_WORD *)(v15 + 4);
      }
      unint64_t v31 = *(void *)(a1 + 18);
      int v32 = *((_DWORD *)a1 + 11);
      int v33 = v60 - v32;
      unint64_t v34 = HIDWORD(v31);
      int v40 = 77;
      goto LABEL_306;
    case '+':
      *a1 = 0;
      int v61 = *((_DWORD *)a1 + 7);
      int v62 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v61 + 1;
      *((_DWORD *)a1 + 8) = v62 + 1;
      unint64_t v63 = v8 - 1;
      *((void *)a1 + 1) = v15 + 2;
      *((void *)a1 + 2) = v63;
      if (!v63) {
        goto LABEL_269;
      }
      int v64 = *(unsigned __int16 *)(v15 + 2);
      *a1 = v64;
      if (v64 == 61)
      {
        *a1 = 0;
        *((void *)a1 + 1) = v15 + 4;
        *((void *)a1 + 2) = v17;
        *((_DWORD *)a1 + 7) = v61 + 2;
        *((_DWORD *)a1 + 8) = v62 + 2;
        if (v63 != 1) {
          *a1 = *(_WORD *)(v15 + 4);
        }
        unint64_t v31 = *(void *)(a1 + 18);
        int v32 = *((_DWORD *)a1 + 11);
        int v33 = v62 + 2 - v32;
        unint64_t v34 = HIDWORD(v31);
        int v40 = 72;
      }
      else
      {
        if (v64 != 43)
        {
LABEL_269:
          unint64_t v108 = *(void *)(a1 + 18);
          int v109 = *((_DWORD *)a1 + 11);
          int v110 = v62 + 1 - v109;
          unint64_t v111 = HIDWORD(v108);
          int v112 = 70;
          goto LABEL_418;
        }
        *a1 = 0;
        *((void *)a1 + 1) = v15 + 4;
        *((void *)a1 + 2) = v17;
        *((_DWORD *)a1 + 7) = v61 + 2;
        *((_DWORD *)a1 + 8) = v62 + 2;
        if (v63 != 1) {
          *a1 = *(_WORD *)(v15 + 4);
        }
        unint64_t v31 = *(void *)(a1 + 18);
        int v32 = *((_DWORD *)a1 + 11);
        int v33 = v62 + 2 - v32;
        unint64_t v34 = HIDWORD(v31);
        int v40 = 71;
      }
      goto LABEL_306;
    case ',':
      *a1 = 0;
      int v65 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v65;
      *((void *)a1 + 1) = v15 + 2;
      *((void *)a1 + 2) = v8 - 1;
      if (v8 != 1) {
        *a1 = *(_WORD *)(v15 + 2);
      }
      unint64_t v31 = *(void *)(a1 + 18);
      int v32 = *((_DWORD *)a1 + 11);
      int v33 = v65 - v32;
      unint64_t v34 = HIDWORD(v31);
      int v40 = 48;
      goto LABEL_306;
    case '-':
      *a1 = 0;
      int v66 = *((_DWORD *)a1 + 7);
      int v67 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v66 + 1;
      *((_DWORD *)a1 + 8) = v67 + 1;
      unint64_t v68 = v8 - 1;
      *((void *)a1 + 1) = v15 + 2;
      *((void *)a1 + 2) = v68;
      if (!v68) {
        goto LABEL_293;
      }
      int v69 = *(unsigned __int16 *)(v15 + 2);
      *a1 = v69;
      switch(v69)
      {
        case '-':
          *a1 = 0;
          *((void *)a1 + 1) = v15 + 4;
          *((void *)a1 + 2) = v17;
          *((_DWORD *)a1 + 7) = v66 + 2;
          *((_DWORD *)a1 + 8) = v67 + 2;
          if (v68 != 1) {
            *a1 = *(_WORD *)(v15 + 4);
          }
          unint64_t v31 = *(void *)(a1 + 18);
          int v32 = *((_DWORD *)a1 + 11);
          int v33 = v67 + 2 - v32;
          unint64_t v34 = HIDWORD(v31);
          int v40 = 60;
          break;
        case '=':
          *a1 = 0;
          *((void *)a1 + 1) = v15 + 4;
          *((void *)a1 + 2) = v17;
          *((_DWORD *)a1 + 7) = v66 + 2;
          *((_DWORD *)a1 + 8) = v67 + 2;
          if (v68 != 1) {
            *a1 = *(_WORD *)(v15 + 4);
          }
          unint64_t v31 = *(void *)(a1 + 18);
          int v32 = *((_DWORD *)a1 + 11);
          int v33 = v67 + 2 - v32;
          unint64_t v34 = HIDWORD(v31);
          int v40 = 61;
          break;
        case '>':
          *a1 = 0;
          *((void *)a1 + 1) = v15 + 4;
          *((void *)a1 + 2) = v17;
          *((_DWORD *)a1 + 7) = v66 + 2;
          *((_DWORD *)a1 + 8) = v67 + 2;
          if (v68 != 1) {
            *a1 = *(_WORD *)(v15 + 4);
          }
          unint64_t v31 = *(void *)(a1 + 18);
          int v32 = *((_DWORD *)a1 + 11);
          int v33 = v67 + 2 - v32;
          unint64_t v34 = HIDWORD(v31);
          int v40 = 39;
          break;
        default:
LABEL_293:
          unint64_t v108 = *(void *)(a1 + 18);
          int v109 = *((_DWORD *)a1 + 11);
          int v110 = v67 + 1 - v109;
          unint64_t v111 = HIDWORD(v108);
          int v112 = 59;
          goto LABEL_418;
      }
      goto LABEL_306;
    case '/':
      *a1 = 0;
      int v71 = *((_DWORD *)a1 + 7);
      int v70 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v71 + 1;
      *((_DWORD *)a1 + 8) = v70 + 1;
      unint64_t v72 = v8 - 1;
      *((void *)a1 + 1) = v15 + 2;
      *((void *)a1 + 2) = v72;
      if (!v72 || (int v73 = *(unsigned __int16 *)(v15 + 2), *a1 = v73, v73 != 61))
      {
        unint64_t v108 = *(void *)(a1 + 18);
        int v109 = *((_DWORD *)a1 + 11);
        int v110 = v70 + 1 - v109;
        unint64_t v111 = HIDWORD(v108);
        int v112 = 74;
        goto LABEL_418;
      }
      *a1 = 0;
      *((void *)a1 + 1) = v15 + 4;
      *((void *)a1 + 2) = v17;
      int v74 = v70 + 2;
      *((_DWORD *)a1 + 7) = v71 + 2;
      *((_DWORD *)a1 + 8) = v70 + 2;
      if (v72 != 1) {
        *a1 = *(_WORD *)(v15 + 4);
      }
      unint64_t v31 = *(void *)(a1 + 18);
      int v32 = *((_DWORD *)a1 + 11);
      int v33 = v74 - v32;
      unint64_t v34 = HIDWORD(v31);
      int v40 = 75;
      goto LABEL_306;
    case ':':
      *a1 = 0;
      int v75 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v75;
      *((void *)a1 + 1) = v15 + 2;
      *((void *)a1 + 2) = v8 - 1;
      if (v8 != 1) {
        *a1 = *(_WORD *)(v15 + 2);
      }
      unint64_t v31 = *(void *)(a1 + 18);
      int v32 = *((_DWORD *)a1 + 11);
      int v33 = v75 - v32;
      unint64_t v34 = HIDWORD(v31);
      int v40 = 47;
      goto LABEL_306;
    case ';':
      *a1 = 0;
      int v76 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v76;
      *((void *)a1 + 1) = v15 + 2;
      *((void *)a1 + 2) = v8 - 1;
      if (v8 != 1) {
        *a1 = *(_WORD *)(v15 + 2);
      }
      unint64_t v31 = *(void *)(a1 + 18);
      int v32 = *((_DWORD *)a1 + 11);
      int v33 = v76 - v32;
      unint64_t v34 = HIDWORD(v31);
      int v40 = 73;
      goto LABEL_306;
    case '<':
      *a1 = 0;
      int v77 = *((_DWORD *)a1 + 7);
      int v78 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v77 + 1;
      *((_DWORD *)a1 + 8) = v78 + 1;
      *((void *)a1 + 1) = v15 + 2;
      *((void *)a1 + 2) = v8 - 1;
      if (v8 == 1) {
        goto LABEL_270;
      }
      int v79 = *(unsigned __int16 *)(v15 + 2);
      *a1 = v79;
      if (v79 == 60)
      {
        *a1 = 0;
        *((void *)a1 + 1) = v15 + 4;
        *((void *)a1 + 2) = v17;
        *((_DWORD *)a1 + 7) = v77 + 2;
        *((_DWORD *)a1 + 8) = v78 + 2;
        if (v8 == 2 || (int v125 = *(unsigned __int16 *)(v15 + 4), *a1 = v125, v125 != 61))
        {
          unint64_t v108 = *(void *)(a1 + 18);
          int v109 = *((_DWORD *)a1 + 11);
          int v110 = v78 + 2 - v109;
          unint64_t v111 = HIDWORD(v108);
          int v112 = 57;
          goto LABEL_418;
        }
        *a1 = 0;
        *((void *)a1 + 1) = v15 + 6;
        *((void *)a1 + 2) = v8 - 3;
        *((_DWORD *)a1 + 7) = v77 + 3;
        *((_DWORD *)a1 + 8) = v78 + 3;
        if (v8 != 3) {
          *a1 = *(_WORD *)(v15 + 6);
        }
        unint64_t v80 = *(void *)(a1 + 18);
        int v81 = *((_DWORD *)a1 + 11);
        int v82 = v78 + 3 - v81;
        unint64_t v83 = HIDWORD(v80);
        int v84 = 58;
      }
      else
      {
        if (v79 != 61)
        {
LABEL_270:
          unint64_t v108 = *(void *)(a1 + 18);
          int v109 = *((_DWORD *)a1 + 11);
          int v110 = v78 + 1 - v109;
          unint64_t v111 = HIDWORD(v108);
          int v112 = 55;
          goto LABEL_418;
        }
        *a1 = 0;
        *((void *)a1 + 1) = v15 + 4;
        *((void *)a1 + 2) = v17;
        *((_DWORD *)a1 + 7) = v77 + 2;
        *((_DWORD *)a1 + 8) = v78 + 2;
        if (v8 != 2) {
          *a1 = *(_WORD *)(v15 + 4);
        }
        unint64_t v80 = *(void *)(a1 + 18);
        int v81 = *((_DWORD *)a1 + 11);
        int v82 = v78 + 2 - v81;
        unint64_t v83 = HIDWORD(v80);
        int v84 = 56;
      }
      goto LABEL_289;
    case '=':
      *a1 = 0;
      int v86 = *((_DWORD *)a1 + 7);
      int v85 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v86 + 1;
      *((_DWORD *)a1 + 8) = v85 + 1;
      unint64_t v87 = v8 - 1;
      *((void *)a1 + 1) = v15 + 2;
      *((void *)a1 + 2) = v87;
      if (!v87 || (int v88 = *(unsigned __int16 *)(v15 + 2), *a1 = v88, v88 != 61))
      {
        unint64_t v108 = *(void *)(a1 + 18);
        int v109 = *((_DWORD *)a1 + 11);
        int v110 = v85 + 1 - v109;
        unint64_t v111 = HIDWORD(v108);
        int v112 = 49;
        goto LABEL_418;
      }
      *a1 = 0;
      *((void *)a1 + 1) = v15 + 4;
      *((void *)a1 + 2) = v17;
      int v89 = v85 + 2;
      *((_DWORD *)a1 + 7) = v86 + 2;
      *((_DWORD *)a1 + 8) = v85 + 2;
      if (v87 != 1) {
        *a1 = *(_WORD *)(v15 + 4);
      }
      unint64_t v31 = *(void *)(a1 + 18);
      int v32 = *((_DWORD *)a1 + 11);
      int v33 = v89 - v32;
      unint64_t v34 = HIDWORD(v31);
      int v40 = 50;
      goto LABEL_306;
    case '>':
      *a1 = 0;
      int v90 = *((_DWORD *)a1 + 7);
      int v91 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v90 + 1;
      *((_DWORD *)a1 + 8) = v91 + 1;
      *((void *)a1 + 1) = v15 + 2;
      *((void *)a1 + 2) = v8 - 1;
      if (v8 == 1) {
        goto LABEL_271;
      }
      int v92 = *(unsigned __int16 *)(v15 + 2);
      *a1 = v92;
      if (v92 != 62)
      {
        if (v92 != 61)
        {
LABEL_271:
          unint64_t v108 = *(void *)(a1 + 18);
          int v109 = *((_DWORD *)a1 + 11);
          int v110 = v91 + 1 - v109;
          unint64_t v111 = HIDWORD(v108);
          int v112 = 51;
          goto LABEL_418;
        }
        *a1 = 0;
        *((void *)a1 + 1) = v15 + 4;
        *((void *)a1 + 2) = v17;
        *((_DWORD *)a1 + 7) = v90 + 2;
        *((_DWORD *)a1 + 8) = v91 + 2;
        if (v8 != 2) {
          *a1 = *(_WORD *)(v15 + 4);
        }
        unint64_t v80 = *(void *)(a1 + 18);
        int v81 = *((_DWORD *)a1 + 11);
        int v82 = v91 + 2 - v81;
        unint64_t v83 = HIDWORD(v80);
        int v84 = 52;
        goto LABEL_289;
      }
      *a1 = 0;
      *((void *)a1 + 1) = v15 + 4;
      *((void *)a1 + 2) = v17;
      *((_DWORD *)a1 + 7) = v90 + 2;
      *((_DWORD *)a1 + 8) = v91 + 2;
      if (v8 != 2)
      {
        int v126 = *(unsigned __int16 *)(v15 + 4);
        *a1 = v126;
        if (v126 == 61)
        {
          *a1 = 0;
          *((void *)a1 + 1) = v15 + 6;
          *((void *)a1 + 2) = v8 - 3;
          *((_DWORD *)a1 + 7) = v90 + 3;
          *((_DWORD *)a1 + 8) = v91 + 3;
          if (v8 != 3) {
            *a1 = *(_WORD *)(v15 + 6);
          }
          unint64_t v80 = *(void *)(a1 + 18);
          int v81 = *((_DWORD *)a1 + 11);
          int v82 = v91 + 3 - v81;
          unint64_t v83 = HIDWORD(v80);
          int v84 = 54;
LABEL_289:
          unsigned int v259 = v84;
          unint64_t v260 = __PAIR64__(v83, v80);
          int v261 = v81;
          int v262 = v82;
          goto LABEL_337;
        }
      }
      unint64_t v108 = *(void *)(a1 + 18);
      int v109 = *((_DWORD *)a1 + 11);
      int v110 = v91 + 2 - v109;
      unint64_t v111 = HIDWORD(v108);
      int v112 = 53;
      goto LABEL_418;
    case '@':
      *a1 = 0;
      int v93 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v93;
      *((void *)a1 + 1) = v15 + 2;
      *((void *)a1 + 2) = v8 - 1;
      if (v8 != 1) {
        *a1 = *(_WORD *)(v15 + 2);
      }
      unint64_t v31 = *(void *)(a1 + 18);
      int v32 = *((_DWORD *)a1 + 11);
      int v33 = v93 - v32;
      unint64_t v34 = HIDWORD(v31);
      int v40 = 40;
      goto LABEL_306;
    case '[':
      *a1 = 0;
      int v94 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v94;
      *((void *)a1 + 1) = v15 + 2;
      *((void *)a1 + 2) = v8 - 1;
      if (v8 != 1) {
        *a1 = *(_WORD *)(v15 + 2);
      }
      unint64_t v31 = *(void *)(a1 + 18);
      int v32 = *((_DWORD *)a1 + 11);
      int v33 = v94 - v32;
      unint64_t v34 = HIDWORD(v31);
      int v40 = 45;
      goto LABEL_306;
    case ']':
      *a1 = 0;
      int v95 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v95;
      *((void *)a1 + 1) = v15 + 2;
      *((void *)a1 + 2) = v8 - 1;
      if (v8 != 1) {
        *a1 = *(_WORD *)(v15 + 2);
      }
      unint64_t v31 = *(void *)(a1 + 18);
      int v32 = *((_DWORD *)a1 + 11);
      int v33 = v95 - v32;
      unint64_t v34 = HIDWORD(v31);
      int v40 = 46;
      goto LABEL_306;
    case '^':
      *a1 = 0;
      int v97 = *((_DWORD *)a1 + 7);
      int v96 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v97 + 1;
      *((_DWORD *)a1 + 8) = v96 + 1;
      unint64_t v98 = v8 - 1;
      *((void *)a1 + 1) = v15 + 2;
      *((void *)a1 + 2) = v98;
      if (!v98 || (int v99 = *(unsigned __int16 *)(v15 + 2), *a1 = v99, v99 != 61))
      {
        unint64_t v108 = *(void *)(a1 + 18);
        int v109 = *((_DWORD *)a1 + 11);
        int v110 = v96 + 1 - v109;
        unint64_t v111 = HIDWORD(v108);
        int v112 = 80;
        goto LABEL_418;
      }
      *a1 = 0;
      *((void *)a1 + 1) = v15 + 4;
      *((void *)a1 + 2) = v17;
      int v100 = v96 + 2;
      *((_DWORD *)a1 + 7) = v97 + 2;
      *((_DWORD *)a1 + 8) = v96 + 2;
      if (v98 != 1) {
        *a1 = *(_WORD *)(v15 + 4);
      }
      unint64_t v31 = *(void *)(a1 + 18);
      int v32 = *((_DWORD *)a1 + 11);
      int v33 = v100 - v32;
      unint64_t v34 = HIDWORD(v31);
      int v40 = 81;
      goto LABEL_306;
    case '{':
      *a1 = 0;
      int v101 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v101;
      *((void *)a1 + 1) = v15 + 2;
      *((void *)a1 + 2) = v8 - 1;
      if (v8 != 1) {
        *a1 = *(_WORD *)(v15 + 2);
      }
      unint64_t v31 = *(void *)(a1 + 18);
      int v32 = *((_DWORD *)a1 + 11);
      int v33 = v101 - v32;
      unint64_t v34 = HIDWORD(v31);
      int v40 = 43;
      goto LABEL_306;
    case '|':
      *a1 = 0;
      int v102 = *((_DWORD *)a1 + 7);
      int v103 = *((_DWORD *)a1 + 8);
      *((_DWORD *)a1 + 7) = v102 + 1;
      *((_DWORD *)a1 + 8) = v103 + 1;
      unint64_t v104 = v8 - 1;
      *((void *)a1 + 1) = v15 + 2;
      *((void *)a1 + 2) = v104;
      if (!v104) {
        goto LABEL_272;
      }
      int v105 = *(unsigned __int16 *)(v15 + 2);
      *a1 = v105;
      if (v105 == 61)
      {
        *a1 = 0;
        *((void *)a1 + 1) = v15 + 4;
        *((void *)a1 + 2) = v17;
        *((_DWORD *)a1 + 7) = v102 + 2;
        *((_DWORD *)a1 + 8) = v103 + 2;
        if (v104 != 1) {
          *a1 = *(_WORD *)(v15 + 4);
        }
        unint64_t v31 = *(void *)(a1 + 18);
        int v32 = *((_DWORD *)a1 + 11);
        int v33 = v103 + 2 - v32;
        unint64_t v34 = HIDWORD(v31);
        int v40 = 66;
      }
      else
      {
        if (v105 != 124)
        {
LABEL_272:
          unint64_t v108 = *(void *)(a1 + 18);
          int v109 = *((_DWORD *)a1 + 11);
          int v110 = v103 + 1 - v109;
          unint64_t v111 = HIDWORD(v108);
          int v112 = 64;
          goto LABEL_418;
        }
        *a1 = 0;
        *((void *)a1 + 1) = v15 + 4;
        *((void *)a1 + 2) = v17;
        *((_DWORD *)a1 + 7) = v102 + 2;
        *((_DWORD *)a1 + 8) = v103 + 2;
        if (v104 != 1) {
          *a1 = *(_WORD *)(v15 + 4);
        }
        unint64_t v31 = *(void *)(a1 + 18);
        int v32 = *((_DWORD *)a1 + 11);
        int v33 = v103 + 2 - v32;
        unint64_t v34 = HIDWORD(v31);
        int v40 = 65;
      }
LABEL_306:
      unsigned int v259 = v40;
      goto LABEL_336;
    case '}':
      *a1 = 0;
      int v106 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v106;
      *((void *)a1 + 1) = v15 + 2;
      *((void *)a1 + 2) = v8 - 1;
      if (v8 != 1) {
        *a1 = *(_WORD *)(v15 + 2);
      }
      unint64_t v31 = *(void *)(a1 + 18);
      int v32 = *((_DWORD *)a1 + 11);
      int v33 = v106 - v32;
      unint64_t v34 = HIDWORD(v31);
      int v40 = 44;
      goto LABEL_306;
    case '~':
      *a1 = 0;
      int v107 = *((_DWORD *)a1 + 8) + 1;
      ++*((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 8) = v107;
      *((void *)a1 + 1) = v15 + 2;
      *((void *)a1 + 2) = v8 - 1;
      if (v8 != 1) {
        *a1 = *(_WORD *)(v15 + 2);
      }
      unint64_t v31 = *(void *)(a1 + 18);
      int v32 = *((_DWORD *)a1 + 11);
      int v33 = v107 - v32;
      unint64_t v34 = HIDWORD(v31);
      int v40 = 78;
      goto LABEL_306;
    default:
      if (v9 != 46 && (unsigned __int16)(v9 - 48) > 9u)
      {
        if (v9 == 95)
        {
          int v41 = 1;
          *a1 = 0;
          uint64_t v42 = 1;
          _CF = v8 != 0;
          unint64_t v44 = v8 - 1;
          _ZF = v44 == 0;
          if (!_CF) {
            goto LABEL_520;
          }
LABEL_423:
          int v256 = v6;
          int v197 = (const UChar *)(v15 + 2 * v42);
          *((void *)a1 + 1) = v197;
          *((void *)a1 + 2) = v44;
          int v198 = *((_DWORD *)a1 + 8) + v41;
          *((_DWORD *)a1 + 7) += v41;
          *((_DWORD *)a1 + 8) = v198;
          if (!_ZF)
          {
            UChar32 v199 = *v197;
            *a1 = v199;
            if (v44) {
              goto LABEL_425;
            }
            goto LABEL_481;
          }
          UChar32 v199 = 0;
          if (!v44)
          {
LABEL_481:
            unsigned int v258 = v41;
LABEL_482:
            uint64_t v253 = v5;
            uint64_t v254 = v4;
            if (v198 == *((_DWORD *)a1 + 11))
            {
              double v233 = MEMORY[0x1E4F30960];
              *MEMORY[0x1E4F30960] += 2;
            }
            else
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              double v233 = *(double *)v265;
              if (!*(void *)v265)
              {
                double v257 = 0.0;
                int v234 = 0;
                unint64_t v235 = 0x100000000;
                char v255 = 1;
LABEL_486:
                uint64_t v236 = &WGSL::Lexer<char16_t>::nextToken(void)::keywordMappings;
                unint64_t v237 = 27;
                do
                {
                  uint64_t v238 = &v236[3 * (v237 >> 1)];
                  int v239 = WTF::codePointCompare();
                  if (v239 >= 0) {
                    v237 >>= 1;
                  }
                  else {
                    v237 += ~(v237 >> 1);
                  }
                  if (v239 < 0) {
                    uint64_t v236 = v238 + 3;
                  }
                }
                while (v237);
                if (v236 == &WGSL::Lexer<char16_t>::nextToken(void)::reservedWords
                  || !WTF::operator==(v234, v235, (unsigned __int8 *)*v236, (uint64_t)v236[1])
                  || (int v240 = *((_DWORD *)v236 + 4)) == 0)
                {
                  if (v255)
                  {
                    int v244 = 0;
                    unint64_t v245 = 0x100000000;
                  }
                  else
                  {
                    int v244 = *(unsigned __int8 **)(*(void *)&v257 + 8);
                    unint64_t v245 = *(unsigned int *)(*(void *)&v257 + 4) | ((unint64_t)((*(_DWORD *)(*(void *)&v257 + 16) >> 2) & 1) << 32);
                  }
                  uint64_t v246 = &WGSL::Lexer<char16_t>::nextToken(void)::reservedWords;
                  unint64_t v247 = 145;
                  do
                  {
                    uint64_t v248 = &v246[2 * (v247 >> 1)];
                    int v249 = WTF::codePointCompare();
                    if (v249 >= 0) {
                      v247 >>= 1;
                    }
                    else {
                      v247 += ~(v247 >> 1);
                    }
                    if (v249 < 0) {
                      uint64_t v246 = v248 + 2;
                    }
                  }
                  while (v247);
                  if (v246 != &WGSL::MangledName::toString(void)const::prefixes
                    && WTF::operator==(v244, v245, (unsigned __int8 *)*v246, (uint64_t)v246[1]))
                  {
                    int v240 = 9;
                  }
                  else
                  {
                    unint64_t v5 = v253;
                    unint64_t v4 = v254;
                    if (v258 < 2 || *(_WORD *)v15 != 95 || *(_WORD *)(v15 + 2) != 95)
                    {
                      unint64_t v250 = *(void *)(a1 + 18);
                      int v251 = *((_DWORD *)a1 + 11);
                      int v252 = *((_DWORD *)a1 + 8) - v251;
                      unsigned int v259 = 8;
                      unint64_t v260 = v250;
                      int v261 = v251;
                      int v262 = v252;
                      uint64_t v6 = v256;
                      double v263 = v257;
                      goto LABEL_337;
                    }
                    int v240 = 0;
                  }
                }
                unint64_t v241 = *(void *)(a1 + 18);
                int v242 = *((_DWORD *)a1 + 11);
                int v243 = *((_DWORD *)a1 + 8) - v242;
                unsigned int v259 = v240;
                unint64_t v260 = v241;
                int v261 = v242;
                int v262 = v243;
                unint64_t v5 = v253;
                unint64_t v4 = v254;
                uint64_t v6 = v256;
                if ((v255 & 1) == 0)
                {
                  if (**(_DWORD **)&v257 == 2) {
                    WTF::StringImpl::destroy();
                  }
                  else {
                    **(_DWORD **)&v257 -= 2;
                  }
                }
                goto LABEL_337;
              }
            }
            char v255 = 0;
            int v234 = *(unsigned __int8 **)(*(void *)&v233 + 8);
            double v257 = v233;
            unint64_t v235 = *(unsigned int *)(*(void *)&v233 + 4) | ((unint64_t)((*(_DWORD *)(*(void *)&v233 + 16) >> 2) & 1) << 32);
            goto LABEL_486;
          }
          while (1)
          {
LABEL_425:
            if (v199 == 95)
            {
              unsigned int v200 = 1;
              goto LABEL_437;
            }
            unsigned int v258 = v41;
            if (v44 < 2)
            {
              unsigned int v200 = 1;
              int HasBinaryProperty = u_stringHasBinaryProperty(v197, 1, UCHAR_XID_START);
              int v41 = v258;
              if (HasBinaryProperty) {
                goto LABEL_437;
              }
            }
            else
            {
              if (u_charType(v199) == 18) {
                unsigned int v200 = 2;
              }
              else {
                unsigned int v200 = 1;
              }
              int v201 = u_stringHasBinaryProperty(v197, v200, UCHAR_XID_START);
              int v41 = v258;
              if (v201) {
                goto LABEL_437;
              }
              if (u_charType(v199) == 18) {
                unsigned int v200 = 2;
              }
              else {
                unsigned int v200 = 1;
              }
            }
            int v203 = u_stringHasBinaryProperty(v197, v200, UCHAR_XID_CONTINUE);
            int v41 = v258;
            if (!v203)
            {
              int v198 = *((_DWORD *)a1 + 8);
              goto LABEL_482;
            }
LABEL_437:
            *a1 = 0;
            unint64_t v204 = *((void *)a1 + 2);
            _CF = v204 >= v200;
            unint64_t v44 = v204 - v200;
            if (!_CF) {
              goto LABEL_520;
            }
            int v197 = (const UChar *)(*((void *)a1 + 1) + 2 * v200);
            *((void *)a1 + 1) = v197;
            *((void *)a1 + 2) = v44;
            int v198 = *((_DWORD *)a1 + 8) + v200;
            *((_DWORD *)a1 + 7) += v200;
            *((_DWORD *)a1 + 8) = v198;
            if (!v44)
            {
              v41 += v200;
              goto LABEL_481;
            }
            UChar32 v199 = *v197;
            *a1 = v199;
            v41 += v200;
          }
        }
        if (v16)
        {
          if (u_charType(v9) == 18) {
            int32_t v127 = 2;
          }
          else {
            int32_t v127 = 1;
          }
          unsigned int v128 = v127;
          if (!u_stringHasBinaryProperty((const UChar *)v15, v127, UCHAR_XID_START)) {
            goto LABEL_455;
          }
        }
        else
        {
          unsigned int v128 = 1;
          if (!u_stringHasBinaryProperty((const UChar *)v15, 1, UCHAR_XID_START))
          {
LABEL_455:
            unint64_t v214 = *(void *)(a1 + 18);
            int v215 = *((_DWORD *)a1 + 11);
            int v216 = *((_DWORD *)a1 + 8) - v215;
            unsigned int v259 = 0;
            unint64_t v260 = v214;
            int v261 = v215;
            int v262 = v216;
            goto LABEL_337;
          }
        }
        uint64_t v15 = *((void *)a1 + 1);
        unint64_t v196 = *((void *)a1 + 2);
        int v41 = v128;
        *a1 = 0;
        uint64_t v42 = v128;
        _CF = v196 >= v128;
        unint64_t v44 = v196 - v128;
        _ZF = v44 == 0;
        if (!_CF) {
          goto LABEL_520;
        }
        goto LABEL_423;
      }
      char v113 = 0;
      uint64_t v114 = 0;
      uint64_t v115 = 0;
      char v116 = 0;
      int v117 = 0;
      int v118 = 0;
      uint64_t v119 = v15 + 2;
      uint64_t v120 = v15;
      break;
  }
  while (2)
  {
    switch(v118)
    {
      case 0:
        int v121 = v9;
        if (v9 == 46) {
          int v122 = 4;
        }
        else {
          int v122 = 2;
        }
        if (v121 == 48) {
          int v118 = 1;
        }
        else {
          int v118 = v122;
        }
        goto LABEL_254;
      case 1:
        int v118 = 9;
        switch(v9)
        {
          case '.':
            goto LABEL_196;
          case 'E':
          case 'e':
            goto LABEL_189;
          case 'X':
          case 'x':
            goto LABEL_254;
          case 'f':
          case 'h':
          case 'i':
          case 'u':
            goto LABEL_249;
          default:
            if ((unsigned __int16)(v9 - 48) >= 0xAu) {
              goto LABEL_265;
            }
            goto LABEL_259;
        }
      case 2:
        if (v9 - 69 > 0x30) {
          goto LABEL_183;
        }
        if (((1 << (v9 - 69)) & 0x1001A00000000) != 0) {
          goto LABEL_249;
        }
        if (((1 << (v9 - 69)) & 0x100000001) != 0)
        {
LABEL_189:
          int v118 = 6;
        }
        else
        {
LABEL_183:
          if (v9 == 46)
          {
LABEL_196:
            int v118 = 5;
          }
          else
          {
            if ((unsigned __int16)(v9 - 48) >= 0xAu) {
              goto LABEL_265;
            }
            int v118 = 2;
          }
        }
        goto LABEL_254;
      case 3:
        if (v9 == 46) {
          goto LABEL_196;
        }
        if (v9 == 101 || v9 == 69) {
          goto LABEL_189;
        }
        if ((unsigned __int16)(v9 - 48) >= 0xAu) {
          goto LABEL_469;
        }
LABEL_259:
        int v118 = 3;
        goto LABEL_254;
      case 4:
        if ((unsigned __int16)(v9 - 48) >= 0xAu)
        {
          unint64_t v108 = *(void *)(a1 + 18);
          int v109 = *((_DWORD *)a1 + 11);
          int v110 = *((_DWORD *)a1 + 8) - v109;
          unint64_t v111 = HIDWORD(v108);
          int v112 = 69;
LABEL_418:
          unsigned int v259 = v112;
LABEL_419:
          unint64_t v260 = __PAIR64__(v111, v108);
          int v261 = v109;
          int v262 = v110;
          goto LABEL_337;
        }
        int v118 = 5;
        uint64_t v114 = v15;
LABEL_254:
        *a1 = 0;
        if (!v8) {
          goto LABEL_520;
        }
        *(int32x2_t *)(a1 + 14) = vadd_s32(*(int32x2_t *)(a1 + 14), (int32x2_t)0x100000001);
        --v8;
        *((void *)a1 + 1) = v119;
        *((void *)a1 + 2) = v8;
        if (v8)
        {
          unsigned __int16 v123 = *(_WORD *)(v15 + 2);
          v15 += 2;
          unsigned __int16 v9 = v123;
          *a1 = v123;
          v119 += 2;
          if (v118 == 19) {
            goto LABEL_265;
          }
          continue;
        }
        unsigned __int16 v9 = 0;
        v15 += 2;
        v119 += 2;
        if (v118 != 19) {
          continue;
        }
LABEL_265:
        if (v114 | v115)
        {
          if (v116)
          {
            *(void *)int v265 = 0;
            _D0 = strtod((const char *)(v120 - 2), (char **)v265);
            switch(v113)
            {
              case 'f':
                goto LABEL_444;
              case 'h':
                goto LABEL_451;
              case 'i':
              case 'u':
                goto LABEL_455;
              default:
                goto LABEL_448;
            }
          }
          *(void *)int v265 = 0;
          if (v15 - v120 > -2)
          {
            WTF::parseDouble();
            switch(v113)
            {
              case 'f':
LABEL_444:
                WGSL::convertFloat<float,double>(double)::max = 2139095039;
                WGSL::convertFloat<float,double>(double)::lowest = -8388609;
                if (_D0 > 3.40282347e38 || _D0 < -3.40282347e38) {
                  goto LABEL_455;
                }
                float v205 = _D0;
                _D0 = v205;
                unint64_t v206 = *(void *)(a1 + 18);
                int v207 = *((_DWORD *)a1 + 11);
                int v208 = *((_DWORD *)a1 + 8) - v207;
                unint64_t v209 = HIDWORD(v206);
                int v210 = 6;
                break;
              case 'h':
LABEL_451:
                WGSL::convertFloat<half,double>(double)::max = 31743;
                WGSL::convertFloat<half,double>(double)::lowest = -1025;
                if (_D0 > 65504.0 || _D0 < -65504.0) {
                  goto LABEL_455;
                }
                __asm
                {
                  FCVT            H0, D0
                  FCVT            D0, H0
                }
                unint64_t v206 = *(void *)(a1 + 18);
                int v207 = *((_DWORD *)a1 + 11);
                int v208 = *((_DWORD *)a1 + 8) - v207;
                unint64_t v209 = HIDWORD(v206);
                int v210 = 7;
                break;
              case 'i':
              case 'u':
                goto LABEL_455;
              default:
LABEL_448:
                WGSL::convertFloat<double,double>(double)::max = 0x7FEFFFFFFFFFFFFFLL;
                WGSL::convertFloat<double,double>(double)::lowest = 0xFFEFFFFFFFFFFFFFLL;
                if (_D0 > 1.79769313e308 || _D0 < -1.79769313e308) {
                  goto LABEL_455;
                }
                unint64_t v206 = *(void *)(a1 + 18);
                int v207 = *((_DWORD *)a1 + 11);
                int v208 = *((_DWORD *)a1 + 8) - v207;
                unint64_t v209 = HIDWORD(v206);
                int v210 = 2;
                break;
            }
            unsigned int v259 = v210;
            unint64_t v260 = __PAIR64__(v209, v206);
            int v261 = v207;
            int v262 = v208;
            double v263 = _D0;
            goto LABEL_337;
          }
LABEL_520:
          __break(1u);
LABEL_521:
          __break(0xC471u);
          JUMPOUT(0x182581218);
        }
        if (v113) {
          uint64_t v129 = -1;
        }
        else {
          uint64_t v129 = 0;
        }
        uint64_t v130 = v15 + 2 * v129;
        if ((unint64_t)(v130 - v120) >= 0x27) {
          goto LABEL_469;
        }
        unint64_t v131 = (v130 - v120) >> 1;
        if (v130 != v120)
        {
          unint64_t v132 = 0;
          unsigned int v133 = 1;
          do
          {
            int v134 = *(unsigned __int16 *)(v120 + 2 * v132);
            _CF = (v134 - 48) >= 0xA && (v134 | 0x20u) - 97 >= 6;
            if (_CF) {
              goto LABEL_521;
            }
            v265[v132] = v134;
            unint64_t v132 = v133++;
          }
          while (v131 > v132);
        }
        unsigned int v136 = &v265[v131];
        v265[v131] = 0;
        unsigned int v137 = (v116 & 1) != 0 ? 16 : 10;
        BOOL v138 = v130 != v120 && v265[0] == 45;
        BOOL v139 = v138;
        unint64_t v140 = v138 ? &v265[1] : v265;
        uint64_t v141 = std::__from_chars_integral[abi:sn180100]<unsigned long long,0>(v140, v136, &v264, v137);
        if (v142 == 34)
        {
          *(double *)&uint64_t v143 = 0.0;
          int v144 = 34;
        }
        else if (v142 == 22)
        {
          *(double *)&uint64_t v143 = 0.0;
          uint64_t v141 = v265;
          int v144 = 22;
        }
        else if (v139)
        {
          if ((unint64_t)v264 <= 0x8000000000000000) {
            uint64_t v143 = -v264;
          }
          else {
            *(double *)&uint64_t v143 = 0.0;
          }
          int v144 = 34;
          if ((unint64_t)v264 <= 0x8000000000000000) {
            int v144 = v142;
          }
        }
        else
        {
          uint64_t v143 = v264 & ~(v264 >> 63);
          int v144 = 34;
          if (v264 >= 0) {
            int v144 = v142;
          }
        }
        if (v136 != v141)
        {
          __break(0xC471u);
          JUMPOUT(0x182581238);
        }
        if (v144 == 34)
        {
LABEL_469:
          unint64_t v108 = *(void *)(a1 + 18);
          int v109 = *((_DWORD *)a1 + 11);
          int v110 = *((_DWORD *)a1 + 8) - v109;
          unint64_t v111 = HIDWORD(v108);
          unsigned int v259 = 0;
          goto LABEL_419;
        }
        switch(v113)
        {
          case 'f':
            double v217 = (float)v143;
            unint64_t v218 = *(void *)(a1 + 18);
            int v219 = *((_DWORD *)a1 + 11);
            int v220 = *((_DWORD *)a1 + 8) - v219;
            unsigned int v259 = 6;
            unint64_t v260 = v218;
            int v261 = v219;
            int v262 = v220;
            double v263 = v217;
            break;
          case 'h':
            int v10 = *((_DWORD *)a1 + 8);
            if ((unint64_t)(v143 - 65505) < 0xFFFFFFFFFFFE003FLL) {
              goto LABEL_55;
            }
            _S0 = (float)v143;
            __asm
            {
              FCVT            H0, S0
              FCVT            D0, H0
            }
            unint64_t v226 = *(void *)(a1 + 18);
            int v227 = *((_DWORD *)a1 + 11);
            unsigned int v259 = 7;
            unint64_t v260 = v226;
            int v261 = v227;
            int v262 = v10 - v227;
            double v263 = _D0;
            break;
          case 'i':
            int v10 = *((_DWORD *)a1 + 8);
            if (v143 != (int)v143) {
              goto LABEL_55;
            }
            unint64_t v228 = *(void *)(a1 + 18);
            int v229 = *((_DWORD *)a1 + 11);
            int v230 = v10 - v229;
            unint64_t v231 = HIDWORD(v228);
            int v232 = 4;
            goto LABEL_479;
          case 'u':
            int v10 = *((_DWORD *)a1 + 8);
            if (HIDWORD(v143)) {
              goto LABEL_55;
            }
            unint64_t v228 = *(void *)(a1 + 18);
            int v229 = *((_DWORD *)a1 + 11);
            int v230 = v10 - v229;
            unint64_t v231 = HIDWORD(v228);
            int v232 = 5;
LABEL_479:
            unsigned int v259 = v232;
            unint64_t v260 = __PAIR64__(v231, v228);
            int v261 = v229;
            int v262 = v230;
            double v263 = *(double *)&v143;
            break;
          default:
            unint64_t v221 = *(void *)(a1 + 18);
            int v222 = *((_DWORD *)a1 + 11);
            int v223 = *((_DWORD *)a1 + 8) - v222;
            unsigned int v259 = 3;
            unint64_t v260 = v221;
            int v261 = v222;
            int v262 = v223;
            double v263 = *(double *)&v143;
            break;
        }
LABEL_337:
        uint64_t v145 = *(unsigned int *)(a2 + 12);
        if (v145 == *(_DWORD *)(a2 + 8))
        {
          unint64_t v146 = WTF::Vector<WGSL::Token,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v145 + 1, (unint64_t)&v259);
          uint64_t v147 = *(unsigned int *)(a2 + 12);
          LODWORD(v145) = *(_DWORD *)(a2 + 12);
          uint64_t v148 = *(void *)a2;
          uint64_t v149 = *(void *)a2 + 32 * v147;
          *(_DWORD *)uint64_t v149 = *(_DWORD *)v146;
          *(_OWORD *)(v149 + 4) = *(_OWORD *)(v146 + 4);
          int v150 = *(_DWORD *)v146;
          if (*(_DWORD *)v146 <= 8u)
          {
            if (((1 << v150) & 0x38) != 0)
            {
              *(void *)(v148 + 32 * v147 + 24) = *(void *)(v146 + 24);
              goto LABEL_356;
            }
            if (((1 << v150) & 0xC4) != 0)
            {
              double v151 = *(double *)(v146 + 24);
              uint64_t v152 = v148 + 32 * v147;
              goto LABEL_346;
            }
            if (v150 == 8)
            {
              uint64_t v155 = v148 + 32 * v147;
              *(void *)(v155 + 24) = 0;
              int v156 = (double *)(v155 + 24);
              double v157 = *(double *)(v146 + 24);
              if (v157 == 0.0)
              {
LABEL_355:
                *int v156 = v157;
                goto LABEL_356;
              }
LABEL_354:
              **(_DWORD **)&v157 += 2;
              goto LABEL_355;
            }
          }
LABEL_356:
          unsigned int v154 = v259;
        }
        else
        {
          uint64_t v148 = *(void *)a2;
          uint64_t v153 = *(void *)a2 + 32 * v145;
          *(_DWORD *)uint64_t v153 = v259;
          *(_OWORD *)(v153 + 4) = *(_OWORD *)v4;
          unsigned int v154 = v259;
          if (v259 <= 8)
          {
            if (((1 << v259) & 0x38) != 0)
            {
              *(double *)(v148 + 32 * v145 + 24) = v263;
              goto LABEL_356;
            }
            if (((1 << v259) & 0xC4) != 0)
            {
              double v151 = v263;
              uint64_t v152 = v148 + 32 * v145;
LABEL_346:
              *(double *)(v152 + 24) = v151;
              goto LABEL_356;
            }
            if (v259 == 8)
            {
              uint64_t v158 = v148 + 32 * v145;
              *(void *)(v158 + 24) = 0;
              int v156 = (double *)(v158 + 24);
              double v157 = v263;
              if (v263 == 0.0) {
                goto LABEL_355;
              }
              goto LABEL_354;
            }
          }
        }
        uint64_t v159 = (v145 + 1);
        *(_DWORD *)(a2 + 12) = v159;
        if (v154 - 52 >= 2)
        {
          if (v154 != 54) {
            goto LABEL_395;
          }
          uint64_t v170 = *(void *)(a1 + 18);
          int v171 = *((_DWORD *)a1 + 11);
          int v172 = *((_DWORD *)a1 + 8) - v171;
          *(_DWORD *)int v265 = 82;
          *(void *)&v265[4] = v170;
          int v266 = v171;
          int v267 = v172;
          if (v159 == *(_DWORD *)(a2 + 8))
          {
            unint64_t v173 = WTF::Vector<WGSL::Token,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v159 + 1, (unint64_t)v265);
            uint64_t v174 = *(unsigned int *)(a2 + 12);
            uint64_t v175 = *(void *)a2;
            uint64_t v176 = *(void *)a2 + 32 * v174;
            *(_DWORD *)uint64_t v176 = *(_DWORD *)v173;
            *(_OWORD *)(v176 + 4) = *(_OWORD *)(v173 + 4);
            int v177 = *(_DWORD *)v173;
            if (*(_DWORD *)v173 > 8u) {
              goto LABEL_409;
            }
            if (((1 << v177) & 0x38) != 0)
            {
              *(void *)(v175 + 32 * v174 + 24) = *(void *)(v173 + 24);
              goto LABEL_409;
            }
            if (((1 << v177) & 0xC4) != 0)
            {
              int v178 = *(_DWORD **)(v173 + 24);
              uint64_t v179 = v175 + 32 * v174;
              goto LABEL_380;
            }
            if (v177 == 8)
            {
              uint64_t v191 = v175 + 32 * v174;
              *(void *)(v191 + 24) = 0;
              unint64_t v192 = (void *)(v191 + 24);
              int v193 = *(_DWORD **)(v173 + 24);
              if (!v193)
              {
LABEL_408:
                *unint64_t v192 = v193;
                goto LABEL_409;
              }
LABEL_407:
              *v193 += 2;
              goto LABEL_408;
            }
LABEL_409:
            int v184 = *(_DWORD *)v265;
          }
          else
          {
            uint64_t v183 = v148 + 32 * v159;
            *(_DWORD *)uint64_t v183 = 82;
            *(_OWORD *)(v183 + 4) = *v6;
            int v184 = *(_DWORD *)v265;
            if (*(_DWORD *)v265 <= 8u)
            {
              if (((1 << v265[0]) & 0x38) != 0)
              {
                *(void *)(v148 + 32 * v159 + 24) = v268;
                goto LABEL_409;
              }
              if (((1 << v265[0]) & 0xC4) != 0)
              {
                int v178 = v268;
                uint64_t v179 = v148 + 32 * v159;
LABEL_380:
                *(void *)(v179 + 24) = v178;
                goto LABEL_409;
              }
              if (*(_DWORD *)v265 == 8)
              {
                uint64_t v194 = v148 + 32 * v159;
                *(void *)(v194 + 24) = 0;
                unint64_t v192 = (void *)(v194 + 24);
                int v193 = v268;
                if (!v268) {
                  goto LABEL_408;
                }
                goto LABEL_407;
              }
            }
          }
          LODWORD(v159) = *(_DWORD *)(a2 + 12) + 1;
          *(_DWORD *)(a2 + 12) = v159;
          if (v184 == 8)
          {
            unint64_t v195 = v268;
            v268 = 0;
            if (v195)
            {
              if (*v195 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *v195 -= 2;
              }
            }
          }
        }
        uint64_t v160 = *(void *)(a1 + 18);
        int v161 = *((_DWORD *)a1 + 11);
        int v162 = *((_DWORD *)a1 + 8) - v161;
        *(_DWORD *)int v265 = 82;
        *(void *)&v265[4] = v160;
        int v266 = v161;
        int v267 = v162;
        if (v159 == *(_DWORD *)(a2 + 8))
        {
          unint64_t v163 = WTF::Vector<WGSL::Token,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v159 + 1, (unint64_t)v265);
          uint64_t v164 = *(unsigned int *)(a2 + 12);
          LODWORD(v159) = *(_DWORD *)(a2 + 12);
          uint64_t v165 = *(void *)a2;
          uint64_t v166 = *(void *)a2 + 32 * v164;
          *(_DWORD *)uint64_t v166 = *(_DWORD *)v163;
          *(_OWORD *)(v166 + 4) = *(_OWORD *)(v163 + 4);
          int v167 = *(_DWORD *)v163;
          if (*(_DWORD *)v163 <= 8u)
          {
            if (((1 << v167) & 0x38) != 0)
            {
              *(void *)(v165 + 32 * v164 + 24) = *(void *)(v163 + 24);
              goto LABEL_388;
            }
            if (((1 << v167) & 0xC4) != 0)
            {
              int v168 = *(_DWORD **)(v163 + 24);
              uint64_t v169 = v165 + 32 * v164;
              goto LABEL_373;
            }
            if (v167 == 8)
            {
              uint64_t v185 = v165 + 32 * v164;
              *(void *)(v185 + 24) = 0;
              int v186 = (void *)(v185 + 24);
              unint64_t v187 = *(_DWORD **)(v163 + 24);
              if (!v187)
              {
LABEL_387:
                void *v186 = v187;
                goto LABEL_388;
              }
LABEL_386:
              *v187 += 2;
              goto LABEL_387;
            }
          }
LABEL_388:
          int v182 = *(_DWORD *)v265;
        }
        else
        {
          uint64_t v180 = *(void *)a2;
          uint64_t v181 = *(void *)a2 + 32 * v159;
          *(_DWORD *)uint64_t v181 = 82;
          *(_OWORD *)(v181 + 4) = *v6;
          int v182 = *(_DWORD *)v265;
          if (*(_DWORD *)v265 <= 8u)
          {
            if (((1 << v265[0]) & 0x38) != 0)
            {
              *(void *)(v180 + 32 * v159 + 24) = v268;
              goto LABEL_388;
            }
            if (((1 << v265[0]) & 0xC4) != 0)
            {
              int v168 = v268;
              uint64_t v169 = v180 + 32 * v159;
LABEL_373:
              *(void *)(v169 + 24) = v168;
              goto LABEL_388;
            }
            if (*(_DWORD *)v265 == 8)
            {
              uint64_t v188 = v180 + 32 * v159;
              *(void *)(v188 + 24) = 0;
              int v186 = (void *)(v188 + 24);
              unint64_t v187 = v268;
              if (!v268) {
                goto LABEL_387;
              }
              goto LABEL_386;
            }
          }
        }
        *(_DWORD *)(a2 + 12) = v159 + 1;
        if (v182 == 8)
        {
          int v189 = v268;
          v268 = 0;
          if (v189)
          {
            if (*v189 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v189 -= 2;
            }
          }
        }
        unsigned int v154 = v259;
LABEL_395:
        if (v154 == 8)
        {
          double v190 = v263;
          double v263 = 0.0;
          if (v190 != 0.0)
          {
            if (**(_DWORD **)&v190 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              **(_DWORD **)&v190 -= 2;
            }
          }
        }
        if (v154 > 1) {
          goto LABEL_4;
        }
        return;
      case 5:
        if (!v114) {
          uint64_t v114 = v15;
        }
        int v118 = 6;
        switch(v9)
        {
          case 'E':
          case 'e':
            goto LABEL_254;
          case 'f':
          case 'h':
            goto LABEL_249;
          default:
            if ((unsigned __int16)(v9 - 48) < 0xAu) {
              goto LABEL_196;
            }
            goto LABEL_265;
        }
      case 6:
        if (v9 == 45 || v9 == 43)
        {
          int v117 = v9;
          int v118 = 7;
        }
        else
        {
          if ((unsigned __int16)(v9 - 48) >= 0xAu) {
            goto LABEL_469;
          }
          int v118 = 8;
        }
        goto LABEL_253;
      case 7:
        if (v117 == 43) {
          uint64_t v115 = v15;
        }
        if ((unsigned __int16)(v9 - 48) >= 0xAu) {
          goto LABEL_469;
        }
        goto LABEL_207;
      case 8:
        if (v9 == 104 || v9 == 102) {
          goto LABEL_249;
        }
        if ((unsigned __int16)(v9 - 48) >= 0xAu) {
          goto LABEL_265;
        }
LABEL_207:
        int v118 = 8;
        goto LABEL_254;
      case 9:
        if (v9 == 46)
        {
          int v118 = 11;
          char v116 = 1;
          uint64_t v120 = v15;
        }
        else
        {
          int v118 = 10;
          char v116 = 1;
          if ((unsigned __int16)(v9 - 48) < 0xAu)
          {
            uint64_t v120 = v15;
          }
          else
          {
            uint64_t v120 = v15;
            if ((unsigned __int16)((v9 | 0x20) - 97) >= 6u) {
              goto LABEL_469;
            }
          }
        }
        goto LABEL_254;
      case 10:
        int v118 = 16;
        switch(v9)
        {
          case 'P':
          case 'p':
            goto LABEL_254;
          case 'i':
          case 'u':
            goto LABEL_249;
          default:
            int v118 = 10;
            if ((unsigned __int16)(v9 - 48) >= 0xAu && (unsigned __int16)((v9 | 0x20) - 97) >= 6u) {
              goto LABEL_265;
            }
            goto LABEL_254;
        }
      case 11:
        int v118 = 12;
        if ((unsigned __int16)(v9 - 48) < 0xAu)
        {
          uint64_t v114 = v15;
        }
        else
        {
          uint64_t v114 = v15;
          if ((unsigned __int16)((v9 | 0x20) - 97) >= 6u) {
            goto LABEL_469;
          }
        }
        goto LABEL_254;
      case 12:
        if (!v114) {
          uint64_t v114 = v15;
        }
        int v118 = 12;
        if ((unsigned __int16)(v9 - 48) < 0xAu || (unsigned __int16)((v9 | 0x20) - 97) < 6u) {
          goto LABEL_254;
        }
        if ((v9 | 0x20) != 0x70) {
          goto LABEL_265;
        }
        int v118 = 13;
        goto LABEL_254;
      case 13:
        if ((unsigned __int16)(v9 - 48) >= 0xAu)
        {
          if (v9 != 45 && v9 != 43) {
            goto LABEL_469;
          }
          int v117 = v9;
          int v118 = 14;
        }
        else
        {
          int v118 = 15;
        }
        goto LABEL_253;
      case 14:
        if (v117 == 43) {
          uint64_t v115 = v15;
        }
        if ((unsigned __int16)(v9 - 48) >= 0xAu) {
          goto LABEL_469;
        }
        goto LABEL_237;
      case 15:
        if ((unsigned __int16)(v9 - 48) < 0xAu) {
          goto LABEL_237;
        }
        if (v9 != 104 && v9 != 102) {
          goto LABEL_265;
        }
        goto LABEL_249;
      case 16:
        if ((unsigned __int16)(v9 - 48) >= 0xAu)
        {
          if (v9 != 45 && v9 != 43) {
            goto LABEL_469;
          }
          int v117 = v9;
          int v118 = 17;
        }
        else
        {
          int v118 = 18;
        }
LABEL_253:
        uint64_t v115 = v15;
        goto LABEL_254;
      case 17:
        if (v117 == 43) {
          uint64_t v115 = v15;
        }
        if ((unsigned __int16)(v9 - 48) >= 0xAu) {
          goto LABEL_469;
        }
        int v118 = 18;
        goto LABEL_254;
      case 18:
        if ((unsigned __int16)(v9 - 48) >= 0xAu)
        {
          if (v9 != 104 && v9 != 102) {
            goto LABEL_469;
          }
LABEL_249:
          int v118 = 19;
          char v113 = v9;
        }
        else
        {
LABEL_237:
          int v118 = 15;
        }
        goto LABEL_254;
      default:
        goto LABEL_254;
    }
  }
}

char *std::__from_chars_integral[abi:sn180100]<unsigned long long,0>(char *result, char *a2, void *a3, unsigned int a4)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (a4 != 10)
  {
    if (result == a2) {
      goto LABEL_43;
    }
    unint64_t v4 = result;
    while (*v4 == 48)
    {
      if (++v4 == a2)
      {
        unint64_t v4 = a2;
        break;
      }
    }
    if (v4 == a2) {
      goto LABEL_43;
    }
    int v14 = *v4;
    unsigned int v15 = *v4;
    if ((v14 - 48) < 0xA)
    {
      float v16 = std::__from_chars_log2f_lut[a4 - 2];
      unint64_t v17 = (int)(v15 - 48);
      if (v4 + 1 != a2) {
        goto LABEL_25;
      }
LABEL_98:
      uint64_t v27 = 0;
LABEL_99:
      uint64_t v28 = v17 + v27;
      unint64_t v4 = a2;
      goto LABEL_46;
    }
    int v29 = a4 + 87;
    if ((v14 < 97 || v29 <= v14) && ((char)v15 < 65 || (int)(a4 + 55) <= v14)) {
      goto LABEL_44;
    }
    float v16 = std::__from_chars_log2f_lut[a4 - 2];
    if (v15 < 0x61 || v29 <= (int)v15)
    {
      unint64_t v17 = (int)(v15 - 55);
      if (v4 + 1 == a2) {
        goto LABEL_98;
      }
    }
    else
    {
      unint64_t v17 = (int)(v15 - 87);
      if (v4 + 1 == a2) {
        goto LABEL_98;
      }
    }
LABEL_25:
    uint64_t v18 = 0;
    int v19 = a4 + 87;
    int v20 = a4 + 55;
    float v21 = (float)(64.0 / v16) + -1.0;
    while (1)
    {
      int v22 = v4[v18 + 1];
      int v23 = v22 - 48;
      if ((v22 - 48) > 9)
      {
        if ((char)v22 < 97 || v19 <= (char)v22)
        {
          if ((char)v22 < 65 || v20 <= (char)v22)
          {
            uint64_t v27 = 0;
            uint64_t result = &v4[v18 + 1];
            if (result == a2) {
              goto LABEL_40;
            }
            goto LABEL_67;
          }
          int v23 = (char)v22 - 55;
        }
        else
        {
          int v23 = (char)v22 - 87;
        }
      }
      uint64_t v26 = v17 * a4;
      if (v21 <= (float)(v18 + 1)) {
        break;
      }
      unint64_t v17 = v26 + v23;
      if (&v4[++v18 + 1] == a2)
      {
        uint64_t v27 = 0;
        goto LABEL_40;
      }
    }
    BOOL v32 = (v17 * (unsigned __int128)a4) >> 64 == 0;
    int v33 = &v4[v18];
    uint64_t v34 = (uint64_t)&v4[v18 + 2];
    if (v32) {
      uint64_t result = (char *)v34;
    }
    else {
      uint64_t result = v33 + 1;
    }
    uint64_t v27 = v23;
    unint64_t v17 = v26;
    if (result == a2)
    {
LABEL_40:
      if (__CFADD__(v17, v27)) {
        return a2;
      }
      goto LABEL_99;
    }
LABEL_67:
    int v35 = *result;
    if ((v35 - 48) >= 0xA && (v35 < 97 || v19 <= v35))
    {
      BOOL v37 = __CFADD__(v17, v27);
      BOOL v38 = v20 <= v35 || v35 <= 64;
      if (v38 && !v37)
      {
        a2 = result;
        goto LABEL_99;
      }
    }
    while (1)
    {
      int v39 = *result;
      if ((v39 - 48) >= 0xA && (v39 < 97 || v19 <= v39) && (v39 < 65 || v20 <= v39)) {
        break;
      }
      if (++result == a2) {
        return a2;
      }
    }
    return result;
  }
  if (result == a2)
  {
LABEL_43:
    unint64_t v4 = a2;
    goto LABEL_44;
  }
  unint64_t v4 = result;
  while (*v4 == 48)
  {
    if (++v4 == a2)
    {
      unint64_t v4 = a2;
      break;
    }
  }
  if (v4 == a2)
  {
    unint64_t v4 = a2;
    if (a2 == result) {
      return result;
    }
LABEL_45:
    uint64_t v28 = 0;
LABEL_46:
    *a3 = v28;
    return v4;
  }
  if (*v4 - 48 >= 0xA)
  {
LABEL_44:
    if (v4 == result) {
      return result;
    }
    goto LABEL_45;
  }
  uint64_t v5 = 19;
  do
  {
    int v6 = *v4;
    if ((v6 - 58) < 0xFFFFFFF6) {
      break;
    }
    ++v4;
    v50[v5] = (v6 - 48);
    if (v5-- == 0) {
      break;
    }
  }
  while (v4 != a2);
  uint64_t v8 = v5 + 1;
  uint64_t v9 = (v5 + 1) << 32;
  uint64_t v10 = *(void *)((char *)v50 + (v9 >> 29));
  if ((int)v8 > 17) {
    goto LABEL_104;
  }
  unint64_t v11 = (int)v8;
  uint64_t v12 = 18 - v8;
  if ((unint64_t)(18 - v8) >= 2)
  {
    uint64_t v42 = 0;
    unsigned __int16 v13 = (uint64_t *)((char *)&std::__itoa::__pow10_64 + 8 * (v12 & 0xFFFFFFFFFFFFFFFELL) + 8);
    unint64_t v11 = (int)v8 + (v12 & 0xFFFFFFFFFFFFFFFELL);
    int v43 = &v50[v8 + 2];
    unint64_t v44 = &unk_1826CEF78;
    unint64_t v45 = v12 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v10 += *(v44 - 1) * *(v43 - 1);
      v42 += *v44 * *v43;
      v43 += 2;
      v44 += 2;
      v45 -= 2;
    }
    while (v45);
    v10 += v42;
    if (v12 == (v12 & 0xFFFFFFFFFFFFFFFELL)) {
      goto LABEL_104;
    }
  }
  else
  {
    unsigned __int16 v13 = &qword_1826CEF70;
  }
  do
  {
    uint64_t v46 = *v13++;
    v10 += v46 * v50[++v11];
  }
  while (v11 != 18);
LABEL_104:
  unint64_t v47 = *(void *)((char *)&std::__itoa::__pow10_64 + ((0x1300000000 - v9) >> 29));
  uint64_t v48 = v51 * v47;
  v4 -= (v51 * (unsigned __int128)v47) >> 64 != 0;
  if (v4 != a2)
  {
    BOOL v49 = __CFADD__(v10, v48);
    if (*v4 - 48 < 0xA || v49)
    {
      while (*v4 - 48 <= 9)
      {
        if (++v4 == a2) {
          return a2;
        }
      }
      return v4;
    }
    goto LABEL_116;
  }
  if (!__CFADD__(v10, v48))
  {
LABEL_116:
    uint64_t v28 = v48 + v10;
    goto LABEL_46;
  }
  return a2;
}

unint64_t WTF::Vector<WGSL::Token,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WGSL::Token,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WGSL::Token,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
}

uint64_t WTF::Vector<WGSL::Token,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v3 = result;
      unint64_t v4 = *(WTF **)result;
      uint64_t v5 = *(unsigned int *)(result + 12);
      uint64_t result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(void *)uint64_t v3 = result;
      if (v5)
      {
        unint64_t v7 = (void *)(result + 24);
        uint64_t v8 = 32 * v5;
        uint64_t v9 = (_DWORD **)((char *)v4 + 24);
        while (1)
        {
          *((_DWORD *)v7 - 6) = *((_DWORD *)v9 - 6);
          *(_OWORD *)((char *)v7 - 20) = *(_OWORD *)((char *)v9 - 20);
          unsigned int v10 = *((_DWORD *)v9 - 6);
          if (v10 > 8) {
            goto LABEL_17;
          }
          if (((1 << v10) & 0x38) != 0) {
            break;
          }
          if (((1 << v10) & 0xC4) == 0)
          {
            if (v10 != 8) {
              goto LABEL_17;
            }
            void *v7 = 0;
            unint64_t v11 = *v9;
            if (*v9) {
              *v11 += 2;
            }
            goto LABEL_15;
          }
          void *v7 = *v9;
LABEL_16:
          unsigned int v10 = *((_DWORD *)v9 - 6);
LABEL_17:
          if (v10 == 8)
          {
            uint64_t result = (uint64_t)*v9;
            *uint64_t v9 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2) {
                uint64_t result = WTF::StringImpl::destroy();
              }
              else {
                *(_DWORD *)result -= 2;
              }
            }
          }
          v7 += 4;
          v9 += 4;
          v8 -= 32;
          if (!v8) {
            goto LABEL_21;
          }
        }
        unint64_t v11 = *v9;
LABEL_15:
        void *v7 = v11;
        goto LABEL_16;
      }
LABEL_21:
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)uint64_t v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

BOOL WTF::operator==(unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  int v5 = a4 - 1;
  if (!a4) {
    int v5 = 0;
  }
  BOOL result = a2 == v5 && a1 == a3;
  if (a1 == a3 || a2 != v5) {
    return result;
  }
  if (!a2) {
    return 1;
  }
  if ((a2 & 0xFF00000000) == 0)
  {
    if (!v5) {
      goto LABEL_61;
    }
    if (*(_WORD *)a1 != *a3) {
      return 0;
    }
    unsigned __int16 v13 = (int16x8_t *)(a1 + 2);
    unsigned int v14 = v5 - 1;
    unsigned int v15 = (uint8x8_t *)(a3 + 1);
    if (v14 >= 8)
    {
      uint16x8_t v16 = (uint16x8_t)vceqq_s16(*v13, (int16x8_t)vmovl_u8(*v15));
      v16.i16[0] = vminvq_u16(v16);
      if (v16.i32[0])
      {
        unsigned int v17 = v14 & 7;
        do
        {
          uint16x8_t v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v13 + 2 * v17), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v15 + v17)));
          v18.i16[0] = vminvq_u16(v18);
          BOOL result = v18.i32[0] != 0;
          v17 += 8;
          if (v18.i32[0]) {
            BOOL v19 = v17 >= v14;
          }
          else {
            BOOL v19 = 1;
          }
        }
        while (!v19);
        return result;
      }
      return 0;
    }
    if (v14 >= 4)
    {
      unint64_t v20 = (v15->u32[0] | ((unint64_t)v15->u32[0] << 16)) & 0xFFFF0000FFFFLL;
      BOOL v12 = ((v20 | (v20 << 8)) & 0xFF00FF00FF00FFLL) == v13->i64[0];
      uint64_t v21 = v14 & 3;
      unint64_t v22 = (*(unsigned int *)((char *)v15->u32 + v21) | ((unint64_t)*(unsigned int *)((char *)v15->u32 + v21) << 16)) & 0xFFFF0000FFFFLL;
      uint64_t v23 = (v22 | (v22 << 8)) & 0xFF00FF00FF00FFLL;
      uint64_t v24 = *(uint64_t *)((char *)v13->i64 + 2 * v21);
      return v12 && v23 == v24;
    }
    if (v14 >= 2)
    {
      int v25 = (v15->u16[0] | (v15->u16[0] << 8)) & 0xFF00FF;
      __int32 v26 = v13->i32[0];
      uint64_t v27 = v14 & 1;
      int v28 = (*(unsigned __int16 *)((char *)v15->u16 + v27) | (*(unsigned __int16 *)((char *)v15->u16 + v27) << 8)) & 0xFF00FF;
      int v29 = *(__int32 *)((char *)v13->i32 + 2 * v27);
      return v25 == v26 && v28 == v29;
    }
    if (v14 == 1)
    {
      int v11 = v15->u8[0];
      int v10 = v13->u16[0];
      return v10 == v11;
    }
    return 1;
  }
  if (!v5)
  {
LABEL_61:
    __break(1u);
    JUMPOUT(0x1825820B0);
  }
  if (*a1 != *a3) {
    return 0;
  }
  unsigned int v7 = v5 - 1;
  if (v5 == 1) {
    return 1;
  }
  uint64_t v8 = (int8x16_t *)(a1 + 1);
  uint64_t v9 = (int8x16_t *)(a3 + 1);
  if (v5 == 2)
  {
    int v10 = v8->u8[0];
    int v11 = v9->u8[0];
    return v10 == v11;
  }
  switch(31 - __clz(v5 - 2))
  {
    case 0u:
      int v10 = v8->u16[0];
      int v11 = v9->u16[0];
      return v10 == v11;
    case 1u:
      if (v8->u16[0] != v9->u16[0]) {
        return 0;
      }
      int v10 = *(unsigned __int16 *)&a1[v5 - 2];
      int v11 = *(unsigned __int16 *)&a3[v5 - 2];
      return v10 == v11;
    case 2u:
      if (v8->i32[0] != v9->i32[0]) {
        return 0;
      }
      int v10 = *(_DWORD *)&a1[v5 - 4];
      int v11 = *(_DWORD *)&a3[v5 - 4];
      return v10 == v11;
    case 3u:
      if (v8->i64[0] != v9->i64[0]) {
        return 0;
      }
      return *(void *)&a1[v5 - 8] == *(void *)&a3[v5 - 8];
    case 4u:
      uint8x16_t v31 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)&a1[v5 - 16], *(int8x16_t *)&a3[v5 - 16]), vceqq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a3 + 1)));
      v31.i8[0] = vminvq_u8(v31);
      return v31.i32[0] != 0;
    default:
      uint8x16_t v30 = (uint8x16_t)vceqq_s8(*v8, *v9);
      v30.i8[0] = vminvq_u8(v30);
      if (!v30.i32[0]) {
        return 0;
      }
      if (v7 < 0x10) {
        return 1;
      }
      unsigned int v32 = v7 & 0xF;
      do
      {
        uint8x16_t v33 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v8 + v32), *(int8x16_t *)((char *)v9 + v32));
        v33.i8[0] = vminvq_u8(v33);
        BOOL result = v33.i32[0] != 0;
        v32 += 16;
        if (v33.i32[0]) {
          BOOL v34 = v32 >= v7;
        }
        else {
          BOOL v34 = 1;
        }
      }
      while (!v34);
      break;
  }
  return result;
}

void WGSL::NameManglerVisitor::visit(WGSL::NameManglerVisitor *this, WGSL::AST::Function *a2)
{
  uint64_t v3 = (char *)a2 + 24;
  unint64_t v4 = (_DWORD *)*((void *)a2 + 6);
  if (v4)
  {
    *v4 += 2;
    WGSL::NameManglerVisitor::introduceVariable((uint64_t)this, (uint64_t)v3, (const WTF::StringImpl *)4);
    WGSL::AST::ScopedVisitor<WGSL::MangledName>::visit();
  }
  WGSL::NameManglerVisitor::introduceVariable((uint64_t)this, (uint64_t)v3, (const WTF::StringImpl *)4);
  WGSL::AST::ScopedVisitor<WGSL::MangledName>::visit();
}

_DWORD *WGSL::NameManglerVisitor::introduceVariable(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = a1 + 4 * a3;
  uint64_t v5 = *(unsigned int *)(v4 + 96);
  *(_DWORD *)(v4 + 96) = v5 + 1;
  uint64_t v6 = *(_DWORD **)(a2 + 24);
  if (v6) {
    *v6 += 2;
  }
  uint64_t v7 = a3;
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(v8 + 8);
  uint64_t v9 = (uint64_t *)(v8 + 8);
  uint64_t v10 = v11;
  if (!v11)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::MangledName>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::MangledName>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v9, 8u, 0);
    uint64_t v10 = *v9;
    if (!*v9)
    {
      int v12 = 0;
      unsigned __int16 v13 = *(WTF::StringImpl **)(a2 + 24);
      unsigned int v14 = *((_DWORD *)v13 + 4);
      if (v14 >= 0x100) {
        goto LABEL_6;
      }
LABEL_8:
      unsigned int v15 = WTF::StringImpl::hashSlowCase(v13);
      goto LABEL_9;
    }
  }
  int v12 = *(_DWORD *)(v10 - 8);
  unsigned __int16 v13 = *(WTF::StringImpl **)(a2 + 24);
  unsigned int v14 = *((_DWORD *)v13 + 4);
  if (v14 < 0x100) {
    goto LABEL_8;
  }
LABEL_6:
  unsigned int v15 = v14 >> 8;
LABEL_9:
  uint16x8_t v16 = 0;
  int v17 = 1;
  uint64_t v36 = v7 | (v5 << 32);
  while (1)
  {
    unsigned int v18 = v15 & v12;
    uint64_t v19 = v10 + 24 * (v15 & v12);
    unint64_t v20 = *(WTF **)v19;
    if (*(void *)v19 == -1)
    {
      uint16x8_t v16 = (void *)(v10 + 24 * v18);
      goto LABEL_11;
    }
    if (!v20) {
      break;
    }
    if (WTF::equal(v20, *(const WTF::StringImpl **)(a2 + 24), a3))
    {
      uint64_t v21 = 0;
      uint64_t v22 = a1;
      goto LABEL_38;
    }
LABEL_11:
    unsigned int v15 = v17 + v18;
    ++v17;
  }
  if (v16)
  {
    void *v16 = 0;
    v16[1] = 0;
    v16[2] = 0;
    --*(_DWORD *)(*v9 - 16);
    uint64_t v19 = (uint64_t)v16;
  }
  uint64_t v23 = *(_DWORD **)(a2 + 24);
  uint64_t v22 = a1;
  if (v23) {
    *v23 += 2;
  }
  *(void *)uint64_t v19 = v23;
  if (v6) {
    *v6 += 2;
  }
  uint64_t v24 = *(_DWORD **)(v19 + 16);
  *(void *)(v19 + 8) = v36;
  *(void *)(v19 + 16) = v6;
  if (!v24)
  {
LABEL_25:
    uint64_t v25 = *v9;
    if (!*v9) {
      goto LABEL_32;
    }
LABEL_26:
    ++*(_DWORD *)(v25 - 12);
    uint64_t v26 = *v9;
    if (!*v9) {
      goto LABEL_33;
    }
LABEL_27:
    uint64_t v27 = (*(_DWORD *)(v26 - 16) + *(_DWORD *)(v26 - 12));
    unint64_t v28 = *(unsigned int *)(v26 - 4);
    if (v28 > 0x400) {
      goto LABEL_34;
    }
    goto LABEL_28;
  }
  if (*v24 != 2)
  {
    *v24 -= 2;
    goto LABEL_25;
  }
  WTF::StringImpl::destroy();
  uint64_t v25 = *v9;
  if (*v9) {
    goto LABEL_26;
  }
LABEL_32:
  *(_DWORD *)(v25 - 12) = 1;
  uint64_t v26 = *v9;
  if (*v9) {
    goto LABEL_27;
  }
LABEL_33:
  uint64_t v27 = *(unsigned int *)(v26 - 16);
  unint64_t v28 = *(unsigned int *)(v26 - 4);
  if (v28 > 0x400)
  {
LABEL_34:
    if (v28 <= 2 * v27)
    {
LABEL_35:
      unsigned int v29 = v28 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v28));
      goto LABEL_36;
    }
    goto LABEL_37;
  }
LABEL_28:
  if (3 * v28 <= 4 * v27)
  {
    if (v28) {
      goto LABEL_35;
    }
    unsigned int v29 = 8;
LABEL_36:
    uint64_t v19 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::MangledName>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::MangledName>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v9, v29, (WTF::StringImpl **)v19);
  }
LABEL_37:
  uint64_t v21 = v19 + 8;
LABEL_38:
  if (v6)
  {
    if (*v6 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v6 -= 2;
    }
  }
  uint64_t v30 = *(void *)(v22 + 80);
  uint64_t v31 = *(void *)(a2 + 8);
  uint64_t v32 = *(void *)(a2 + 16);
  WGSL::MangledName::toString((WGSL::MangledName *)&v38, *(unsigned char *)v21, (WTF::String *)*(unsigned int *)(v21 + 4));
  v39[1] = v31;
  v39[2] = v32;
  uint8x16_t v33 = v38;
  BOOL v38 = 0;
  v39[0] = off_1ECABC030;
  int v40 = v33;
  WGSL::ShaderModule::replace<WGSL::AST::Identifier>(v30, a2, (uint64_t)v39);
  BOOL v34 = v40;
  v39[0] = off_1ECABC030;
  int v40 = 0;
  if (v34)
  {
    if (*v34 != 2)
    {
      *v34 -= 2;
      goto LABEL_45;
    }
    WTF::StringImpl::destroy();
    BOOL result = v38;
    BOOL v38 = 0;
    if (result)
    {
LABEL_48:
      if (*result == 2) {
        return (_DWORD *)WTF::StringImpl::destroy();
      }
      else {
        *result -= 2;
      }
    }
  }
  else
  {
LABEL_45:
    BOOL result = v38;
    BOOL v38 = 0;
    if (result) {
      goto LABEL_48;
    }
  }
  return result;
}

void WGSL::AST::ScopedVisitor<WGSL::MangledName>::visit()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

_DWORD *WGSL::NameManglerVisitor::visit(WGSL::NameManglerVisitor *this, WGSL::AST::Parameter *a2)
{
  WGSL::AST::Visitor::visit(this, *((void *)a2 + 8));
  return WGSL::NameManglerVisitor::introduceVariable((uint64_t)this, (uint64_t)a2 + 32, (const WTF::StringImpl *)3);
}

void WGSL::NameManglerVisitor::visit(WGSL::NameManglerVisitor *this, uint64_t **a2)
{
  uint64_t v3 = this;
  WGSL::NameManglerVisitor::introduceVariable((uint64_t)this, (uint64_t)(a2 + 3), 0);
  int v70 = 0;
  int v61 = (WGSL::AST::Structure *)a2;
  uint64_t v5 = *((unsigned int *)a2 + 21);
  if (v5)
  {
    uint64_t v6 = a2[9];
    int v62 = &v6[v5];
    unint64_t v63 = (uint64_t *)v3;
    do
    {
      uint64_t v7 = *v6;
      WGSL::AST::Visitor::visit(v3, *(void *)(*v6 + 104));
      uint64_t v9 = (WTF::String *)*((unsigned int *)v3 + 29);
      *((_DWORD *)v3 + 29) = v9 + 1;
      uint64_t v10 = *(WTF **)(v7 + 48);
      if (v10) {
        *(_DWORD *)v10 += 2;
      }
      uint64_t v11 = (uint64_t)v70;
      if (v70
        || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::MangledName>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::MangledName>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v70, 8u, 0), (uint64_t v11 = (uint64_t)v70) != 0))
      {
        int v12 = *(_DWORD *)(v11 - 8);
        unsigned __int16 v13 = *(WTF::StringImpl **)(v7 + 48);
        unsigned int v14 = *((_DWORD *)v13 + 4);
        if (v14 < 0x100) {
          goto LABEL_12;
        }
      }
      else
      {
        int v12 = 0;
        unsigned __int16 v13 = *(WTF::StringImpl **)(v7 + 48);
        unsigned int v14 = *((_DWORD *)v13 + 4);
        if (v14 < 0x100)
        {
LABEL_12:
          unsigned int v15 = WTF::StringImpl::hashSlowCase(v13);
          goto LABEL_13;
        }
      }
      unsigned int v15 = v14 >> 8;
LABEL_13:
      uint16x8_t v16 = 0;
      uint64_t v64 = v7 + 24;
      int v65 = v9;
      uint64_t v66 = v66 & 0xFFFFFF00 | ((void)v9 << 32) | 5;
      for (int i = 1; ; ++i)
      {
        unsigned int v18 = v15 & v12;
        uint64_t v19 = (WTF **)(v11 + 24 * (v15 & v12));
        unint64_t v20 = *v19;
        if (*v19 == (WTF *)-1)
        {
          uint16x8_t v16 = (WTF **)(v11 + 24 * v18);
          goto LABEL_15;
        }
        if (!v20) {
          break;
        }
        if (WTF::equal(v20, *(const WTF::StringImpl **)(v7 + 48), v8)) {
          goto LABEL_39;
        }
LABEL_15:
        unsigned int v15 = i + v18;
      }
      if (v16)
      {
        void *v16 = 0;
        v16[1] = 0;
        v16[2] = 0;
        --*(_DWORD *)(v11 - 16);
        uint64_t v19 = v16;
      }
      uint64_t v21 = *(WTF **)(v7 + 48);
      if (v21) {
        *(_DWORD *)v21 += 2;
      }
      unsigned __int16 *v19 = v21;
      if (v10) {
        *(_DWORD *)v10 += 2;
      }
      uint64_t v22 = v19[2];
      v19[1] = (WTF *)v66;
      void v19[2] = v10;
      if (!v22)
      {
LABEL_29:
        uint64_t v23 = (uint64_t)v70;
        if (!v70) {
          goto LABEL_35;
        }
LABEL_30:
        int v24 = *(_DWORD *)(v23 - 16);
        int v25 = *(_DWORD *)(v23 - 12) + 1;
        *(_DWORD *)(v23 - 12) = v25;
        uint64_t v26 = (v24 + v25);
        unint64_t v27 = *(unsigned int *)(v23 - 4);
        if (v27 > 0x400) {
          goto LABEL_36;
        }
        goto LABEL_31;
      }
      if (*(_DWORD *)v22 != 2)
      {
        *(_DWORD *)v22 -= 2;
        goto LABEL_29;
      }
      WTF::StringImpl::destroy();
      uint64_t v23 = (uint64_t)v70;
      if (v70) {
        goto LABEL_30;
      }
LABEL_35:
      int v25 = 1;
      *(_DWORD *)(v23 - 12) = 1;
      uint64_t v26 = (*(_DWORD *)(v23 - 16) + 1);
      unint64_t v27 = *(unsigned int *)(v23 - 4);
      if (v27 > 0x400)
      {
LABEL_36:
        if (v27 <= 2 * v26)
        {
LABEL_37:
          unsigned int v28 = v27 << (6 * v25 >= (2 * v27));
          goto LABEL_38;
        }
        goto LABEL_39;
      }
LABEL_31:
      if (3 * v27 <= 4 * v26)
      {
        if (v27) {
          goto LABEL_37;
        }
        unsigned int v28 = 8;
LABEL_38:
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::MangledName>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::MangledName>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v70, v28, v19);
      }
LABEL_39:
      uint64_t v3 = (WGSL::NameManglerVisitor *)v63;
      uint64_t v29 = v63[10];
      uint64_t v30 = *(void *)(v7 + 32);
      uint64_t v31 = *(void *)(v7 + 40);
      WGSL::MangledName::toString((WGSL::MangledName *)&v67, 5u, v65);
      v68[1] = v30;
      v68[2] = v31;
      uint64_t v32 = v67;
      int v67 = 0;
      v68[0] = off_1ECABC030;
      int v69 = v32;
      WGSL::ShaderModule::replace<WGSL::AST::Identifier>(v29, v64, (uint64_t)v68);
      uint8x16_t v33 = v69;
      v68[0] = off_1ECABC030;
      int v69 = 0;
      if (!v33)
      {
LABEL_42:
        BOOL v34 = v67;
        int v67 = 0;
        if (v34) {
          goto LABEL_45;
        }
LABEL_47:
        if (v10) {
          goto LABEL_50;
        }
        goto LABEL_4;
      }
      if (*v33 != 2)
      {
        *v33 -= 2;
        goto LABEL_42;
      }
      WTF::StringImpl::destroy();
      BOOL v34 = v67;
      int v67 = 0;
      if (!v34) {
        goto LABEL_47;
      }
LABEL_45:
      if (*v34 != 2)
      {
        *v34 -= 2;
        goto LABEL_47;
      }
      WTF::StringImpl::destroy();
      if (v10)
      {
LABEL_50:
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
LABEL_4:
      ++v6;
    }
    while (v6 != v62);
  }
  uint64_t v37 = *((void *)v3 + 11);
  uint64_t v36 = (uint64_t *)((char *)v3 + 88);
  uint64_t v35 = v37;
  if (v37
    || (WTF::HashTable<WGSL::AST::Structure *,WTF::KeyValuePair<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>>,WTF::DefaultHash<WGSL::AST::Structure *>,WTF::HashMap<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>,WTF::DefaultHash<WGSL::AST::Structure *>,WTF::HashTraits<WGSL::AST::Structure *>,WTF::HashTraits<WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Structure *>>::rehash(v36, 8u), (uint64_t v35 = *v36) != 0))
  {
    int v38 = *(_DWORD *)(v35 - 8);
  }
  else
  {
    int v38 = 0;
  }
  unint64_t v39 = ((unint64_t)v61 + ~((void)v61 << 32)) ^ (((unint64_t)v61 + ~((void)v61 << 32)) >> 22);
  unint64_t v40 = 9 * ((v39 + ~(v39 << 13)) ^ ((v39 + ~(v39 << 13)) >> 8));
  unint64_t v41 = (v40 ^ (v40 >> 15)) + ~((v40 ^ (v40 >> 15)) << 27);
  unsigned int v42 = v38 & ((v41 >> 31) ^ v41);
  int v43 = (WGSL::AST::Structure **)(v35 + 16 * v42);
  unint64_t v44 = *v43;
  if (!*v43)
  {
LABEL_63:
    *int v43 = v61;
    unint64_t v47 = v43[1];
    v43[1] = v70;
    if (v47)
    {
      uint64_t v48 = *((unsigned int *)v47 - 1);
      if (v48)
      {
        BOOL v49 = v47;
        while (1)
        {
          int v50 = *(_DWORD **)v49;
          if (*(void *)v49 == -1) {
            goto LABEL_67;
          }
          unint64_t v51 = (_DWORD *)*((void *)v49 + 2);
          *((void *)v49 + 2) = 0;
          if (!v51) {
            goto LABEL_72;
          }
          if (*v51 != 2) {
            break;
          }
          WTF::StringImpl::destroy();
          int v50 = *(_DWORD **)v49;
          *(void *)BOOL v49 = 0;
          if (v50)
          {
LABEL_75:
            if (*v50 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v50 -= 2;
            }
          }
LABEL_67:
          BOOL v49 = (WGSL::AST::Structure *)((char *)v49 + 24);
          if (!--v48) {
            goto LABEL_77;
          }
        }
        *v51 -= 2;
LABEL_72:
        *(void *)BOOL v49 = 0;
        if (v50) {
          goto LABEL_75;
        }
        goto LABEL_67;
      }
LABEL_77:
      WTF::fastFree((WGSL::AST::Structure *)((char *)v47 - 16), v4);
    }
    if (*v36)
    {
      ++*(_DWORD *)(*v36 - 12);
      uint64_t v52 = *v36;
      if (*v36) {
        goto LABEL_80;
      }
    }
    else
    {
      MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
      uint64_t v52 = *v36;
      if (*v36)
      {
LABEL_80:
        uint64_t v53 = (*(_DWORD *)(v52 - 16) + *(_DWORD *)(v52 - 12));
        unint64_t v54 = *(unsigned int *)(v52 - 4);
        if (v54 <= 0x400) {
          goto LABEL_81;
        }
        goto LABEL_100;
      }
    }
    uint64_t v53 = *(unsigned int *)(v52 - 16);
    unint64_t v54 = *(unsigned int *)(v52 - 4);
    if (v54 <= 0x400)
    {
LABEL_81:
      if (3 * v54 > 4 * v53) {
        return;
      }
      if (!v54)
      {
        unsigned int v55 = 8;
LABEL_102:
        WTF::HashTable<WGSL::AST::Structure *,WTF::KeyValuePair<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>>,WTF::DefaultHash<WGSL::AST::Structure *>,WTF::HashMap<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>,WTF::DefaultHash<WGSL::AST::Structure *>,WTF::HashTraits<WGSL::AST::Structure *>,WTF::HashTraits<WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Structure *>>::rehash(v36, v55);
        return;
      }
LABEL_101:
      unsigned int v55 = v54 << (6 * *(_DWORD *)(v52 - 12) >= (2 * v54));
      goto LABEL_102;
    }
LABEL_100:
    if (v54 > 2 * v53) {
      return;
    }
    goto LABEL_101;
  }
  unint64_t v45 = 0;
  int v46 = 1;
  while (v44 != v61)
  {
    if (v44 == (WGSL::AST::Structure *)-1) {
      unint64_t v45 = v43;
    }
    unsigned int v42 = (v42 + v46) & v38;
    int v43 = (WGSL::AST::Structure **)(v35 + 16 * v42);
    unint64_t v44 = *v43;
    ++v46;
    if (!*v43)
    {
      if (v45)
      {
        *unint64_t v45 = 0;
        v45[1] = 0;
        --*(_DWORD *)(*v36 - 16);
        int v43 = v45;
      }
      goto LABEL_63;
    }
  }
  uint64_t v56 = (uint64_t)v70;
  if (v70)
  {
    uint64_t v57 = *((unsigned int *)v70 - 1);
    if (v57)
    {
      uint64_t v58 = (uint64_t)v70;
      while (1)
      {
        int v59 = *(_DWORD **)v58;
        if (*(void *)v58 == -1) {
          goto LABEL_88;
        }
        int v60 = *(_DWORD **)(v58 + 16);
        *(void *)(v58 + 16) = 0;
        if (!v60) {
          goto LABEL_93;
        }
        if (*v60 != 2) {
          break;
        }
        WTF::StringImpl::destroy();
        int v59 = *(_DWORD **)v58;
        *(void *)uint64_t v58 = 0;
        if (v59)
        {
LABEL_96:
          if (*v59 == 2) {
            WTF::StringImpl::destroy();
          }
          else {
            *v59 -= 2;
          }
        }
LABEL_88:
        v58 += 24;
        if (!--v57) {
          goto LABEL_103;
        }
      }
      *v60 -= 2;
LABEL_93:
      *(void *)uint64_t v58 = 0;
      if (v59) {
        goto LABEL_96;
      }
      goto LABEL_88;
    }
LABEL_103:
    WTF::fastFree((WTF *)(v56 - 16), v4);
  }
}

uint64_t WGSL::ShaderModule::replace<WGSL::AST::Identifier>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  if (v6 != (*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3))
  {
    uint64_t result = 152;
    __break(0xC471u);
    return result;
  }
  long long v25 = *(_OWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  uint64_t v26 = v7;
  uint64_t v8 = (long long *)(a3 + 8);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  uint64_t v9 = *(void *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  uint64_t v10 = *(_DWORD **)(a2 + 24);
  *(void *)(a2 + 24) = v9;
  if (!v10)
  {
LABEL_5:
    *uint64_t v8 = v25;
    uint64_t v11 = *(_DWORD **)(a3 + 24);
    *(void *)(a3 + 24) = v7;
    if (!v11) {
      goto LABEL_11;
    }
LABEL_8:
    if (*v11 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v11 -= 2;
    }
    goto LABEL_11;
  }
  if (*v10 != 2)
  {
    *v10 -= 2;
    goto LABEL_5;
  }
  WTF::StringImpl::destroy();
  *uint64_t v8 = v25;
  uint64_t v11 = *(_DWORD **)(a3 + 24);
  *(void *)(a3 + 24) = v26;
  if (v11) {
    goto LABEL_8;
  }
LABEL_11:
  int v12 = (void *)(a1 + 400);
  long long v24 = *v8;
  uint64_t v13 = *(void *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  unint64_t v14 = *(unsigned int *)(a1 + 412);
  if (v14 == *(_DWORD *)(a1 + 408))
  {
    unint64_t v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10) {
      unint64_t v16 = v15 + 1;
    }
    else {
      unint64_t v16 = 16;
    }
    if (v16 <= v14 + 1) {
      unint64_t v17 = v14 + 1;
    }
    else {
      unint64_t v17 = v16;
    }
    WTF::Vector<std::function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v12, v17);
    unint64_t v14 = *(unsigned int *)(a1 + 412);
    uint64_t v18 = v13;
    uint64_t v19 = *(void *)(a1 + 400) + 32 * v14;
    unint64_t v20 = (char *)operator new(0x30uLL);
    *(void *)unint64_t v20 = &unk_1ECABD7B8;
    *((void *)v20 + 1) = a2;
    *(_OWORD *)(v20 + 24) = v24;
    *((void *)v20 + 2) = off_1ECABC030;
    *((void *)v20 + 5) = v18;
    *(void *)(v19 + 24) = v20;
  }
  else
  {
    uint64_t v21 = *v12 + 32 * v14;
    uint64_t v22 = (char *)operator new(0x30uLL);
    *(void *)uint64_t v22 = &unk_1ECABD7B8;
    *((void *)v22 + 1) = a2;
    *(_OWORD *)(v22 + 24) = *v8;
    *((void *)v22 + 2) = off_1ECABC030;
    *((void *)v22 + 5) = v13;
    *(void *)(v21 + 24) = v22;
  }
  *(_DWORD *)(a1 + 412) = v14 + 1;
  return 0;
}

uint64_t WGSL::MangledName::toString(WGSL::MangledName *this, unsigned __int8 a2, WTF::String *a3)
{
  uint64_t v4 = &(&WGSL::MangledName::toString(void)const::prefixes)[2 * a2];
  uint64_t v5 = (int8x16_t *)*v4;
  int v6 = v4[1];
  WTF::String::number(a3);
  if (v6) {
    uint64_t v7 = v6 - 1;
  }
  else {
    uint64_t v7 = 0;
  }
  if ((unint64_t)v7 >> 31) {
    goto LABEL_21;
  }
  if (v11)
  {
    int v8 = *(_DWORD *)(v11 + 4);
    if (((v8 | v7) & 0x80000000) != 0) {
      goto LABEL_20;
    }
  }
  else
  {
    int v8 = 0;
    if ((v7 & 0x80000000) != 0)
    {
LABEL_20:
      *(void *)this = 0;
      goto LABEL_21;
    }
  }
  unint64_t v9 = (v7 + v8);
  if (__OFADD__(v7, v8)) {
    goto LABEL_20;
  }
  if (!v11)
  {
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v9, 1, v5, v7, 0, this);
    if (*(void *)this) {
      goto LABEL_14;
    }
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x182583074);
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v9, (*(unsigned __int8 *)(v11 + 16) >> 2) & 1, v5, v7, v11, this);
  if (!*(void *)this) {
    goto LABEL_21;
  }
LABEL_14:
  uint64_t result = v11;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      return WTF::StringImpl::destroy();
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  return result;
}

_DWORD *WGSL::NameManglerVisitor::visit(WGSL::NameManglerVisitor *this, WGSL::AST::Variable *a2)
{
  WGSL::AST::Visitor::visit((uint64_t)this, (uint64_t)a2);
  return WGSL::NameManglerVisitor::introduceVariable((uint64_t)this, (uint64_t)a2 + 24, (const WTF::StringImpl *)2);
}

_DWORD *WGSL::NameManglerVisitor::visit(WGSL::NameManglerVisitor *this, WGSL::AST::VariableStatement *a2)
{
  uint64_t v3 = *((void *)a2 + 3);
  WGSL::AST::Visitor::visit((uint64_t)this, v3);
  return WGSL::NameManglerVisitor::introduceVariable((uint64_t)this, v3 + 24, (const WTF::StringImpl *)1);
}

uint64_t WGSL::NameManglerVisitor::visit(uint64_t this, WGSL::AST::IdentifierExpression *a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = this;
  uint64_t v5 = (char *)a2 + 64;
  int v6 = *(void **)(this + 40);
  while (1)
  {
    uint64_t v7 = v6[1];
    if (v7)
    {
      unsigned int v8 = *(_DWORD *)(v7 - 8);
      unint64_t v9 = (WTF::StringImpl *)*((void *)a2 + 11);
      unsigned int v10 = *((_DWORD *)v9 + 4);
      int v11 = v10 < 0x100 ? WTF::StringImpl::hashSlowCase(v9) : v10 >> 8;
      for (i = 0; ; int v11 = i + v13)
      {
        int v13 = v11 & v8;
        uint64_t v14 = v7 + 24 * (v11 & v8);
        this = *(void *)v14;
        if (*(void *)v14 != -1)
        {
          if (!this) {
            goto LABEL_15;
          }
          this = WTF::equal((WTF *)this, *((const WTF::StringImpl **)a2 + 11), a3);
          if (this) {
            break;
          }
        }
        ++i;
      }
      uint64_t v15 = v6[1];
      if (!v15 || v14 != v15 + 24 * *(unsigned int *)(v15 - 4)) {
        break;
      }
    }
LABEL_15:
    int v6 = (void *)*v6;
    if (!v6) {
      return this;
    }
  }
  uint64_t v16 = *(void *)(v4 + 80);
  uint64_t v18 = *((void *)a2 + 9);
  uint64_t v17 = *((void *)a2 + 10);
  WGSL::MangledName::toString((WGSL::MangledName *)&v21, *(unsigned char *)(v14 + 8), (WTF::String *)*(unsigned int *)(v14 + 12));
  v22[1] = v18;
  v22[2] = v17;
  uint64_t v19 = v21;
  uint64_t v21 = 0;
  v22[0] = off_1ECABC030;
  uint64_t v23 = (_DWORD *)v19;
  WGSL::ShaderModule::replace<WGSL::AST::Identifier>(v16, (uint64_t)v5, (uint64_t)v22);
  unint64_t v20 = v23;
  v22[0] = off_1ECABC030;
  uint64_t v23 = 0;
  if (!v20)
  {
LABEL_20:
    this = v21;
    uint64_t v21 = 0;
    if (!this) {
      return this;
    }
    goto LABEL_23;
  }
  if (*v20 != 2)
  {
    *v20 -= 2;
    goto LABEL_20;
  }
  WTF::StringImpl::destroy();
  this = v21;
  uint64_t v21 = 0;
  if (!this) {
    return this;
  }
LABEL_23:
  if (*(_DWORD *)this == 2) {
    return WTF::StringImpl::destroy();
  }
  *(_DWORD *)this -= 2;
  return this;
}

uint64_t WGSL::NameManglerVisitor::visit(uint64_t this, WGSL::AST::FieldAccessExpression *a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = this;
  if (*(unsigned char *)(this + 32))
  {
    uint64_t v5 = *(uint64_t **)(*((void *)a2 + 8) + 24);
    if (!v5) {
      return this;
    }
  }
  else
  {
    this = (*(uint64_t (**)(uint64_t, void))(*(void *)this + 208))(this, *((void *)a2 + 8));
    uint64_t v5 = *(uint64_t **)(*((void *)a2 + 8) + 24);
    if (!v5) {
      return this;
    }
  }
  int v6 = *((_DWORD *)v5 + 12);
  if (v6 == 10)
  {
    uint64_t v5 = (uint64_t *)v5[1];
    if (!v5) {
      return this;
    }
    int v6 = *((_DWORD *)v5 + 12);
  }
  if (v6 == 11)
  {
    uint64_t v5 = (uint64_t *)v5[1];
    if (!v5) {
      return this;
    }
    int v6 = *((_DWORD *)v5 + 12);
  }
  if (v6 == 4)
  {
    uint64_t v7 = *(void *)(v4 + 88);
    if (v7)
    {
      uint64_t v8 = *v5;
      unsigned int v9 = *(_DWORD *)(v7 - 8);
      unint64_t v10 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
      unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      uint64_t v13 = v9 & ((v12 >> 31) ^ v12);
      uint64_t v14 = *(void *)(v7 + 16 * v13);
      if (v14 != v8)
      {
        int v15 = 1;
        while (v14)
        {
          uint64_t v13 = (v13 + v15) & v9;
          uint64_t v14 = *(void *)(v7 + 16 * v13);
          ++v15;
          if (v14 == v8) {
            goto LABEL_19;
          }
        }
        uint64_t v13 = *(unsigned int *)(v7 - 4);
      }
LABEL_19:
      if (v13 != *(_DWORD *)(v7 - 4))
      {
        uint64_t v16 = v7 + 16 * v13;
        uint64_t v19 = *(void *)(v16 + 8);
        uint64_t v17 = (void *)(v16 + 8);
        uint64_t v18 = v19;
        unint64_t v20 = (char *)a2 + 72;
        int v21 = *(_DWORD *)(v19 - 8);
        uint64_t v22 = (WTF::StringImpl *)*((void *)a2 + 12);
        unsigned int v23 = *((_DWORD *)v22 + 4);
        if (v23 < 0x100) {
          unsigned int v24 = WTF::StringImpl::hashSlowCase(v22);
        }
        else {
          unsigned int v24 = v23 >> 8;
        }
        for (i = 0; ; unsigned int v24 = i + v26)
        {
          int v26 = v24 & v21;
          uint64_t v27 = v18 + 24 * (v24 & v21);
          unsigned int v28 = *(WTF **)v27;
          if (*(void *)v27 != -1)
          {
            if (!v28)
            {
              uint64_t v27 = *v17 + 24 * *(unsigned int *)(*v17 - 4);
LABEL_30:
              uint64_t v29 = *(void *)(v4 + 80);
              uint64_t v31 = *((void *)a2 + 10);
              uint64_t v30 = *((void *)a2 + 11);
              WGSL::MangledName::toString((WGSL::MangledName *)&v34, *(unsigned char *)(v27 + 8), (WTF::String *)*(unsigned int *)(v27 + 12));
              v35[1] = v31;
              v35[2] = v30;
              uint64_t v32 = v34;
              uint64_t v34 = 0;
              v35[0] = off_1ECABC030;
              uint64_t v36 = (_DWORD *)v32;
              WGSL::ShaderModule::replace<WGSL::AST::Identifier>(v29, (uint64_t)v20, (uint64_t)v35);
              uint8x16_t v33 = v36;
              v35[0] = off_1ECABC030;
              uint64_t v36 = 0;
              if (v33)
              {
                if (*v33 != 2)
                {
                  *v33 -= 2;
                  goto LABEL_33;
                }
                WTF::StringImpl::destroy();
                this = v34;
                uint64_t v34 = 0;
                if (this)
                {
LABEL_36:
                  if (*(_DWORD *)this == 2) {
                    return WTF::StringImpl::destroy();
                  }
                  else {
                    *(_DWORD *)this -= 2;
                  }
                }
              }
              else
              {
LABEL_33:
                this = v34;
                uint64_t v34 = 0;
                if (this) {
                  goto LABEL_36;
                }
              }
              return this;
            }
            if (WTF::equal(v28, *((const WTF::StringImpl **)a2 + 12), a3)) {
              goto LABEL_30;
            }
          }
          ++i;
        }
      }
    }
    this = 172;
    __break(0xC471u);
  }
  return this;
}

void WGSL::mangleNames(WGSL *this, WGSL::ShaderModule *a2)
{
  int v2 = &unk_1ECABB740;
  char v3 = 0;
  char v4 = 0;
  memset(v5, 0, sizeof(v5));
  WGSL::ContextProvider<WGSL::MangledName>::ContextScope::ContextScope(&v6, v5);
}

void WGSL::NameManglerVisitor::~NameManglerVisitor(WGSL::NameManglerVisitor *this, void *a2)
{
  *(void *)this = &unk_1ECABD570;
  uint64_t v3 = *((void *)this + 11);
  if (v3) {
    WTF::HashTable<WGSL::AST::Structure *,WTF::KeyValuePair<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>>,WTF::DefaultHash<WGSL::AST::Structure *>,WTF::HashMap<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>,WTF::DefaultHash<WGSL::AST::Structure *>,WTF::HashTraits<WGSL::AST::Structure *>,WTF::HashTraits<WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Structure *>>::deallocateTable(v3, a2);
  }
  WGSL::AST::ScopedVisitor<WGSL::MangledName>::~ScopedVisitor((uint64_t)this);
}

{
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1ECABD570;
  uint64_t v3 = *((void *)this + 11);
  if (v3) {
    WTF::HashTable<WGSL::AST::Structure *,WTF::KeyValuePair<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>>,WTF::DefaultHash<WGSL::AST::Structure *>,WTF::HashMap<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>,WTF::DefaultHash<WGSL::AST::Structure *>,WTF::HashTraits<WGSL::AST::Structure *>,WTF::HashTraits<WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Structure *>>::deallocateTable(v3, a2);
  }
  WGSL::AST::ScopedVisitor<WGSL::MangledName>::~ScopedVisitor((uint64_t)this);
  JUMPOUT(0x18530AFF0);
}

void WGSL::ContextProvider<WGSL::MangledName>::ContextScope::ContextScope(void *a1, void *a2)
{
  *a1 = a2;
  a1[1] = *a2;
  operator new();
}

void std::default_delete<WGSL::ContextProvider<WGSL::MangledName>::Context>::operator()[abi:sn180100](uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2[1];
    if (v2)
    {
      uint64_t v3 = *(unsigned int *)(v2 - 4);
      if (v3)
      {
        uint64_t v4 = a2[1];
        while (1)
        {
          uint64_t v5 = *(_DWORD **)v4;
          if (*(void *)v4 == -1) {
            goto LABEL_6;
          }
          uint64_t v6 = *(_DWORD **)(v4 + 16);
          *(void *)(v4 + 16) = 0;
          if (!v6) {
            goto LABEL_11;
          }
          if (*v6 != 2) {
            break;
          }
          WTF::StringImpl::destroy();
          uint64_t v5 = *(_DWORD **)v4;
          *(void *)uint64_t v4 = 0;
          if (v5)
          {
LABEL_14:
            if (*v5 == 2) {
              WTF::StringImpl::destroy();
            }
            else {
              *v5 -= 2;
            }
          }
LABEL_6:
          v4 += 24;
          if (!--v3) {
            goto LABEL_17;
          }
        }
        *v6 -= 2;
LABEL_11:
        *(void *)uint64_t v4 = 0;
        if (v5) {
          goto LABEL_14;
        }
        goto LABEL_6;
      }
LABEL_17:
      WTF::fastFree((WTF *)(v2 - 16), a2);
    }
    JUMPOUT(0x18530AFF0);
  }
}

uint64_t WGSL::AST::ScopedVisitor<WGSL::MangledName>::~ScopedVisitor(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 64);
  *(void *)uint64_t v1 = *(void *)(result + 72);
  uint64_t v2 = *(unsigned int *)(v1 + 20);
  if (v2)
  {
    uint64_t v3 = result;
    int v4 = v2 - 1;
    uint64_t v5 = (void *)(*(void *)(v1 + 8) + 8 * (v2 - 1));
    uint64_t v6 = (void *)*v5;
    void *v5 = 0;
    if (v6) {
      std::default_delete<WGSL::ContextProvider<WGSL::MangledName>::Context>::operator()[abi:sn180100]((uint64_t)v5, v6);
    }
    *(_DWORD *)(v1 + 20) = v4;
    uint64_t v7 = *(unsigned int *)(v3 + 60);
    if (v7)
    {
      uint64_t v8 = *(void **)(v3 + 48);
      uint64_t v9 = 8 * v7;
      do
      {
        uint64_t v6 = (void *)*v8;
        *uint64_t v8 = 0;
        if (v6) {
          std::default_delete<WGSL::ContextProvider<WGSL::MangledName>::Context>::operator()[abi:sn180100]((uint64_t)v8, v6);
        }
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
    unint64_t v10 = *(WTF **)(v3 + 48);
    if (v10)
    {
      *(void *)(v3 + 48) = 0;
      *(_DWORD *)(v3 + 56) = 0;
      WTF::fastFree(v10, v6);
    }
    *(void *)uint64_t v3 = &unk_1ECABB740;
    if (!*(unsigned char *)(v3 + 32)) {
      return v3;
    }
    unint64_t v11 = *(_DWORD **)(v3 + 8);
    *(void *)(v3 + 8) = 0;
    if (!v11) {
      return v3;
    }
    if (*v11 != 2)
    {
      *v11 -= 2;
      return v3;
    }
    WTF::StringImpl::destroy();
    return v3;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::HashTable<WGSL::AST::Structure *,WTF::KeyValuePair<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>>,WTF::DefaultHash<WGSL::AST::Structure *>,WTF::HashMap<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>,WTF::DefaultHash<WGSL::AST::Structure *>,WTF::HashTraits<WGSL::AST::Structure *>,WTF::HashTraits<WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Structure *>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if (*(void *)(a1 + 16 * i) != -1)
      {
        uint64_t v5 = a1 + 16 * i;
        uint64_t v6 = *(void *)(v5 + 8);
        if (v6)
        {
          uint64_t v7 = *(unsigned int *)(v6 - 4);
          if (v7)
          {
            uint64_t v8 = *(void *)(v5 + 8);
            while (1)
            {
              uint64_t v9 = *(_DWORD **)v8;
              if (*(void *)v8 == -1) {
                goto LABEL_10;
              }
              unint64_t v10 = *(_DWORD **)(v8 + 16);
              *(void *)(v8 + 16) = 0;
              if (!v10) {
                goto LABEL_15;
              }
              if (*v10 != 2) {
                break;
              }
              WTF::StringImpl::destroy();
              uint64_t v9 = *(_DWORD **)v8;
              *(void *)uint64_t v8 = 0;
              if (v9)
              {
LABEL_18:
                if (*v9 == 2) {
                  WTF::StringImpl::destroy();
                }
                else {
                  *v9 -= 2;
                }
              }
LABEL_10:
              v8 += 24;
              if (!--v7) {
                goto LABEL_3;
              }
            }
            *v10 -= 2;
LABEL_15:
            *(void *)uint64_t v8 = 0;
            if (v9) {
              goto LABEL_18;
            }
            goto LABEL_10;
          }
LABEL_3:
          WTF::fastFree((WTF *)(v6 - 16), a2);
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::MangledName>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::MangledName>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 24 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v5;
    while (1)
    {
      uint64_t v14 = (WTF::StringImpl **)(v4 + 24 * v11);
      int v15 = *v14;
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (v15)
        {
          uint64_t v18 = *a1;
          if (*a1)
          {
            unsigned int v19 = *(_DWORD *)(v18 - 8);
            unsigned int v20 = *((_DWORD *)v15 + 4);
            if (v20 >= 0x100) {
              goto LABEL_20;
            }
LABEL_25:
            int v21 = WTF::StringImpl::hashSlowCase(v15);
          }
          else
          {
            unsigned int v19 = 0;
            unsigned int v20 = *((_DWORD *)v15 + 4);
            if (v20 < 0x100) {
              goto LABEL_25;
            }
LABEL_20:
            int v21 = v20 >> 8;
          }
          int v23 = 0;
          do
          {
            unsigned int v24 = v21 & v19;
            long long v25 = (WTF::StringImpl **)(v18 + 24 * (v21 & v19));
            int v21 = ++v23 + (v21 & v19);
          }
          while (*v25);
          uint64_t v26 = v18 + 24 * v24;
          uint64_t v29 = *(_DWORD **)(v26 + 16);
          unsigned int v28 = (void *)(v26 + 16);
          uint64_t v27 = v29;
          void *v28 = 0;
          if (v29)
          {
            if (*v27 != 2)
            {
              *v27 -= 2;
              goto LABEL_31;
            }
            WTF::StringImpl::destroy();
            uint64_t v30 = *v25;
            unsigned __int16 *v25 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *(_DWORD *)v30 -= 2;
              }
            }
          }
          else
          {
LABEL_31:
            unsigned __int16 *v25 = 0;
          }
          uint64_t v31 = *v14;
          *uint64_t v14 = 0;
          unsigned __int16 *v25 = v31;
          uint64_t v32 = v4 + 24 * v11;
          *(void *)(v18 + 24 * v24 + 8) = *(void *)(v32 + 8);
          uint64_t v33 = *(void *)(v32 + 16);
          *(void *)(v32 + 16) = 0;
          void *v28 = v33;
          uint64_t v34 = *(_DWORD **)(v32 + 16);
          *(void *)(v32 + 16) = 0;
          if (v34)
          {
            if (*v34 != 2)
            {
              *v34 -= 2;
              goto LABEL_40;
            }
            WTF::StringImpl::destroy();
            uint64_t v35 = *v14;
            *uint64_t v14 = 0;
            if (v35)
            {
LABEL_43:
              if (*(_DWORD *)v35 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *(_DWORD *)v35 -= 2;
              }
            }
          }
          else
          {
LABEL_40:
            uint64_t v35 = *v14;
            *uint64_t v14 = 0;
            if (v35) {
              goto LABEL_43;
            }
          }
          if (v14 == a3) {
            uint64_t v12 = v18 + 24 * v24;
          }
          goto LABEL_11;
        }
        uint64_t v16 = v4 + 24 * v11;
        uint64_t v17 = *(_DWORD **)(v16 + 16);
        *(void *)(v16 + 16) = 0;
        if (v17)
        {
          if (*v17 == 2)
          {
            WTF::StringImpl::destroy();
            uint64_t v22 = *v14;
            *uint64_t v14 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *(_DWORD *)v22 -= 2;
              }
            }
            goto LABEL_11;
          }
          *v17 -= 2;
        }
        *uint64_t v14 = 0;
      }
LABEL_11:
      if (++v11 == v13) {
        goto LABEL_46;
      }
    }
  }
  uint64_t v12 = 0;
  uint64_t result = 0;
  if (v4)
  {
LABEL_46:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v12;
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST10IdentifierEEENS_9enable_ifIXsr3stdE12is_base_of_vINS5_4NodeET_EEvE4typeEPS9_OS9_EUlvE_NS_9allocatorISE_EEFvvEED1Ev(void *a1)
{
  *a1 = &unk_1ECABD7B8;
  a1[2] = off_1ECABC030;
  uint64_t v2 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (!v2) {
    return a1;
  }
  if (*v2 != 2)
  {
    *v2 -= 2;
    return a1;
  }
  WTF::StringImpl::destroy();
  return a1;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST10IdentifierEEENS_9enable_ifIXsr3stdE12is_base_of_vINS5_4NodeET_EEvE4typeEPS9_OS9_EUlvE_NS_9allocatorISE_EEFvvEED0Ev(void *a1)
{
  *a1 = &unk_1ECABD7B8;
  a1[2] = off_1ECABC030;
  uint64_t v2 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (v2)
  {
    if (*v2 == 2) {
      WTF::StringImpl::destroy();
    }
    else {
      *v2 -= 2;
    }
  }
  JUMPOUT(0x18530AFF0);
}

char *_ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST10IdentifierEEENS_9enable_ifIXsr3stdE12is_base_of_vINS5_4NodeET_EEvE4typeEPS9_OS9_EUlvE_NS_9allocatorISE_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)uint64_t result = &unk_1ECABD7B8;
  *((void *)result + 1) = v3;
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *((void *)result + 2) = off_1ECABC030;
  uint64_t v4 = *(_DWORD **)(a1 + 40);
  if (v4) {
    *v4 += 2;
  }
  *((void *)result + 5) = v4;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST10IdentifierEEENS_9enable_ifIXsr3stdE12is_base_of_vINS5_4NodeET_EEvE4typeEPS9_OS9_EUlvE_NS_9allocatorISE_EEFvvEE7__cloneEPNS0_6__baseISH_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = &unk_1ECABD7B8;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = &unk_1ECABC008;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  *(void *)(a2 + 16) = off_1ECABC030;
  uint64_t v3 = *(_DWORD **)(result + 40);
  if (v3) {
    *v3 += 2;
  }
  *(void *)(a2 + 40) = v3;
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST10IdentifierEEENS_9enable_ifIXsr3stdE12is_base_of_vINS5_4NodeET_EEvE4typeEPS9_OS9_EUlvE_NS_9allocatorISE_EEFvvEE7destroyEv(uint64_t a1)
{
  *(void *)(a1 + 16) = off_1ECABC030;
  uint64_t result = *(_DWORD **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (result)
  {
    if (*result == 2) {
      return (_DWORD *)WTF::StringImpl::destroy();
    }
    else {
      *result -= 2;
    }
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST10IdentifierEEENS_9enable_ifIXsr3stdE12is_base_of_vINS5_4NodeET_EEvE4typeEPS9_OS9_EUlvE_NS_9allocatorISE_EEFvvEE18destroy_deallocateEv(void *__p)
{
  __p[2] = off_1ECABC030;
  uint64_t v2 = (_DWORD *)__p[5];
  __p[5] = 0;
  if (!v2)
  {
LABEL_4:
    uint64_t v3 = __p;
    goto LABEL_6;
  }
  if (*v2 != 2)
  {
    *v2 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy();
  uint64_t v3 = __p;
LABEL_6:
  operator delete(v3);
}

_DWORD *_ZNSt3__110__function6__funcIZN4WGSL12ShaderModule7replaceINS2_3AST10IdentifierEEENS_9enable_ifIXsr3stdE12is_base_of_vINS5_4NodeET_EEvE4typeEPS9_OS9_EUlvE_NS_9allocatorISE_EEFvvEEclEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t result = *(_DWORD **)(v2 + 24);
  *(void *)(v2 + 24) = 0;
  int v6 = result;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  unsigned int v5 = *(_DWORD **)(v2 + 24);
  *(void *)(v2 + 24) = v4;
  if (v5)
  {
    if (*v5 == 2)
    {
      WTF::StringImpl::destroy();
      uint64_t result = v6;
      if (!v6) {
        return result;
      }
      goto LABEL_7;
    }
    *v5 -= 2;
  }
  if (!result) {
    return result;
  }
LABEL_7:
  if (*result == 2) {
    return (_DWORD *)WTF::StringImpl::destroy();
  }
  *result -= 2;
  return result;
}

void WTF::HashTable<WGSL::AST::Structure *,WTF::KeyValuePair<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>>,WTF::DefaultHash<WGSL::AST::Structure *>,WTF::HashMap<WGSL::AST::Structure *,WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>,WTF::DefaultHash<WGSL::AST::Structure *>,WTF::HashTraits<WGSL::AST::Structure *>,WTF::HashTraits<WTF::HashMap<WTF::String,WGSL::MangledName,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::MangledName>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WGSL::AST::Structure *>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    unsigned int v4 = *(_DWORD *)(v3 - 4);
    int v5 = *(_DWORD *)(v3 - 12);
    size_t v6 = 16 * a2;
    uint64_t v8 = WTF::fastMalloc((WTF *)(v6 + 16));
    uint64_t v9 = (void *)(v8 + 16);
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  unsigned int v4 = 0;
  int v5 = 0;
  size_t v6 = 16 * a2;
  uint64_t v8 = WTF::fastMalloc((WTF *)(v6 + 16));
  uint64_t v9 = (void *)(v8 + 16);
  if (a2) {
LABEL_3:
  }
    bzero(v9, v6);
LABEL_4:
  *a1 = (uint64_t)v9;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v4;
    do
    {
      uint64_t v12 = (uint64_t *)(v3 + 16 * v10);
      uint64_t v13 = *v12;
      if (*v12 == -1) {
        goto LABEL_7;
      }
      if (!v13)
      {
        uint64_t v14 = v3 + 16 * v10;
        uint64_t v15 = *(void *)(v14 + 8);
        if (v15)
        {
          uint64_t v16 = *(unsigned int *)(v15 - 4);
          if (v16)
          {
            uint64_t v17 = *(void *)(v14 + 8);
            while (1)
            {
              uint64_t v18 = *(_DWORD **)v17;
              if (*(void *)v17 == -1) {
                goto LABEL_14;
              }
              unsigned int v19 = *(_DWORD **)(v17 + 16);
              *(void *)(v17 + 16) = 0;
              if (!v19) {
                goto LABEL_19;
              }
              if (*v19 != 2) {
                break;
              }
              WTF::StringImpl::destroy();
              uint64_t v18 = *(_DWORD **)v17;
              *(void *)uint64_t v17 = 0;
              if (v18)
              {
LABEL_22:
                if (*v18 == 2) {
                  WTF::StringImpl::destroy();
                }
                else {
                  *v18 -= 2;
                }
              }
LABEL_14:
              v17 += 24;
              if (!--v16) {
                goto LABEL_6;
              }
            }
            *v19 -= 2;
LABEL_19:
            *(void *)uint64_t v17 = 0;
            if (v18) {
              goto LABEL_22;
            }
            goto LABEL_14;
          }
LABEL_6:
          WTF::fastFree((WTF *)(v15 - 16), v7);
        }
        goto LABEL_7;
      }
      uint64_t v20 = *a1;
      if (*a1) {
        int v21 = *(_DWORD *)(v20 - 8);
      }
      else {
        int v21 = 0;
      }
      unint64_t v22 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
      unint64_t v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
      unint64_t v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
      unsigned int v25 = v21 & ((v24 >> 31) ^ v24);
      int v26 = 1;
      do
      {
        unsigned int v27 = v25;
        uint64_t v28 = *(void *)(v20 + 16 * v25);
        unsigned int v25 = (v25 + v26++) & v21;
      }
      while (v28);
      uint64_t v29 = (void *)(v20 + 16 * v27);
      uint64_t v31 = v29 + 1;
      uint64_t v30 = v29[1];
      if (v30)
      {
        uint64_t v32 = *(unsigned int *)(v30 - 4);
        if (v32)
        {
          uint64_t v33 = v29[1];
          while (1)
          {
            uint64_t v34 = *(_DWORD **)v33;
            if (*(void *)v33 == -1) {
              goto LABEL_33;
            }
            uint64_t v35 = *(_DWORD **)(v33 + 16);
            *(void *)(v33 + 16) = 0;
            if (!v35) {
              goto LABEL_38;
            }
            if (*v35 != 2) {
              break;
            }
            WTF::StringImpl::destroy();
            uint64_t v34 = *(_DWORD **)v33;
            *(void *)uint64_t v33 = 0;
            if (v34)
            {
LABEL_41:
              if (*v34 == 2) {
                WTF::StringImpl::destroy();
              }
              else {
                *v34 -= 2;
              }
            }
LABEL_33:
            v33 += 24;
            if (!--v32) {
              goto LABEL_43;
            }
          }
          *v35 -= 2;
LABEL_38:
          *(void *)uint64_t v33 = 0;
          if (v34) {
            goto LABEL_41;
          }
          goto LABEL_33;
        }
LABEL_43:
        WTF::fastFree((WTF *)(v30 - 16), v7);
        uint64_t v13 = *v12;
      }
      *uint64_t v29 = v13;
      uint64_t v36 = v3 + 16 * v10;
      *uint64_t v31 = 0;
      uint64_t v37 = *(void *)(v36 + 8);
      *(void *)(v36 + 8) = 0;
      *uint64_t v31 = v37;
      uint64_t v38 = *(void *)(v36 + 8);
      if (v38)
      {
        uint64_t v39 = *(unsigned int *)(v38 - 4);
        if (!v39)
        {
LABEL_58:
          WTF::fastFree((WTF *)(v38 - 16), v7);
          goto LABEL_7;
        }
        uint64_t v40 = *(void *)(v36 + 8);
        while (2)
        {
          unint64_t v41 = *(_DWORD **)v40;
          if (*(void *)v40 == -1) {
            goto LABEL_48;
          }
          unsigned int v42 = *(_DWORD **)(v40 + 16);
          *(void *)(v40 + 16) = 0;
          if (!v42) {
            goto LABEL_53;
          }
          if (*v42 == 2)
          {
            WTF::StringImpl::destroy();
            unint64_t v41 = *(_DWORD **)v40;
            *(void *)uint64_t v40 = 0;
            if (!v41) {
              goto LABEL_48;
            }
          }
          else
          {
            *v42 -= 2;
LABEL_53:
            *(void *)uint64_t v40 = 0;
            if (!v41)
            {
LABEL_48:
              v40 += 24;
              if (!--v39) {
                goto LABEL_58;
              }
              continue;
            }
          }
          break;
        }
        if (*v41 == 2) {
          WTF::StringImpl::destroy();
        }
        else {
          *v41 -= 2;
        }
        goto LABEL_48;
      }
LABEL_7:
      ++v10;
    }
    while (v10 != v11);
  }
  if (v3)
  {
    WTF::fastFree((WTF *)(v3 - 16), v7);
  }
}

char *WGSL::Metal::generateMetalCode@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  char v20 = 1;
  WTF::StringBuilder::append();
  char v24 = 0;
  char v25 = 0;
  unint64_t v23 = (char *)&unk_1ECABDC40;
  int v26 = &v17;
  uint64_t v27 = a1;
  uint64_t v30 = 0;
  int v31 = 0;
  uint64_t v28 = 0;
  int v29 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  uint64_t v36 = 0;
  WGSL::Metal::FunctionDefinitionWriter::write((WGSL::Metal::FunctionDefinitionWriter *)&v23, v8, v9);
  WGSL::Metal::FunctionDefinitionWriter::~FunctionDefinitionWriter((WGSL::Metal::FunctionDefinitionWriter *)&v23, v10);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EC00AD80, memory_order_acquire) != -1)
  {
    unint64_t v22 = &v23;
    unint64_t v23 = &v21;
    std::__call_once(&qword_1EC00AD80, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WGSL::Metal::dumpMetalCodeIfNeeded(WTF::StringBuilder &)::$_0 &&>>);
  }
  if (_MergedGlobals_1)
  {
    WTF::dataLog<char [22],char [2]>(v11);
    uint64_t v12 = v17;
    if (v17
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v17),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v17),
          (uint64_t v12 = v17) != 0))
    {
      *(_DWORD *)v12 += 2;
    }
    unint64_t v23 = v12;
    WTF::dataLog<WTF::String,char [2]>((WTF *)&v23);
    uint64_t v13 = v23;
    unint64_t v23 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy();
        uint64_t v14 = v17;
        if (!v17) {
          goto LABEL_13;
        }
        goto LABEL_14;
      }
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = v17;
  if (!v17)
  {
LABEL_13:
    WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v17);
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v17);
    uint64_t v14 = v17;
    if (!v17) {
      goto LABEL_15;
    }
  }
LABEL_14:
  *(_DWORD *)v14 += 2;
LABEL_15:
  *a4 = v14;
  uint64_t v15 = v18;
  uint64_t v18 = 0;
  if (v15)
  {
    if (*v15 == 2)
    {
      WTF::StringImpl::destroy();
      uint64_t result = v17;
      uint64_t v17 = 0;
      if (!result) {
        return result;
      }
      goto LABEL_21;
    }
    *v15 -= 2;
  }
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (!result) {
    return result;
  }
LABEL_21:
  if (*(_DWORD *)result == 2) {
    return (char *)WTF::StringImpl::destroy();
  }
  *(_DWORD *)result -= 2;
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WGSL::Metal::dumpMetalCodeIfNeeded(WTF::StringBuilder &)::$_0 &&>>()
{
  int out_token = 0;
  return notify_register_dispatch("com.apple.WebKit.WebGPU.TogglePrintMetalCode", &out_token, MEMORY[0x1E4F14428], &__block_literal_global_1);
}

void ___ZZN4WGSL5MetalL21dumpMetalCodeIfNeededERN3WTF13StringBuilderEENK3__0clEv_block_invoke()
{
  _MergedGlobals_1 ^= 1u;
}

uint64_t WTF::dataLog<char [22],char [2]>(WTF *a1)
{
  uint64_t v1 = WTF::dataFile(a1);
  (*(void (**)(uint64_t))(*(void *)v1 + 32))(v1);
  WTF::printInternal();
  WTF::printInternal();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 40);
  return v2(v1);
}

uint64_t WTF::dataLog<WTF::String,char [2]>(WTF *a1)
{
  uint64_t v1 = WTF::dataFile(a1);
  (*(void (**)(uint64_t))(*(void *)v1 + 32))(v1);
  WTF::printInternal();
  WTF::printInternal();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 40);
  return v2(v1);
}

void WGSL::Metal::FunctionDefinitionWriter::write(WGSL::Metal::FunctionDefinitionWriter *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = *((void *)this + 6);
  if (*(unsigned char *)(v4 + 30))
  {
    int v5 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v708) = *((_DWORD *)this + 14);
    unint64_t v702 = "template<typename T>\n";
    LODWORD(v703) = 21;
    LODWORD(v705) = v708;
    v711 = "struct PackedVec3 {\n";
    int v712 = 20;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v5, (int *)&v708, (uint64_t)&v702, (int *)&v705, (uint64_t)&v711);
    int v6 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v6;
    uint64_t v7 = (WTF::StringBuilder *)*((void *)this + 5);
    size_t v8 = (4 * v6);
    uint64_t v9 = *((void *)v7 + 1);
    if ((v9 || (uint64_t v9 = *(void *)v7) != 0) && (*(unsigned char *)(v9 + 16) & 4) == 0)
    {
      uint64_t v10 = (_OWORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v7);
      if (v10)
      {
        uint64_t v11 = v10;
        if (v8)
        {
          size_t v12 = 2 * v8;
          memset_pattern16(v10, asc_1826CF510, v12);
          size_t v13 = (size_t)v11 + v12;
          *(void *)size_t v13 = 0x3B007800200054;
          *(_WORD *)(v13 + 8) = 10;
          uint64_t v14 = (char *)v11 + v12 + 10;
          memset_pattern16(v14, asc_1826CF510, v12);
          uint64_t v15 = &v14[v12];
          *(void *)uint64_t v15 = 0x3B007900200054;
          *((_WORD *)v15 + 4) = 10;
          uint64_t v16 = &v14[v12 + 10];
          memset_pattern16(v16, asc_1826CF510, v12);
          uint64_t v17 = &v16[v12];
          *(void *)uint64_t v17 = 0x3B007A00200054;
          *((_WORD *)v17 + 4) = 10;
          memset_pattern16(&v16[v12 + 10], asc_1826CF510, v12);
          size_t v18 = v8;
        }
        else
        {
          size_t v18 = 0;
          *uint64_t v10 = xmmword_1826CF140;
          uint64_t v17 = (char *)v10 + 20;
          *((void *)v10 + 2) = 0x200054000A003BLL;
          *((_DWORD *)v10 + 6) = 3866746;
          *((_WORD *)v10 + 14) = 10;
        }
        unint64_t v41 = &v17[2 * v18];
        *(_OWORD *)(v41 + 10) = xmmword_1826CF150;
        *(_OWORD *)(v41 + 26) = xmmword_1826CF160;
        *(_OWORD *)(v41 + 42) = xmmword_1826CF170;
        *(void *)(v41 + 58) = 0x5D002900540028;
        *(_DWORD *)(v41 + 66) = 655419;
        unsigned int v42 = v41 + 70;
        if (v8)
        {
          memset_pattern16(v41 + 70, asc_1826CF510, 2 * v8);
          v42 += v8;
          *unsigned int v42 = 10;
          memset_pattern16(v42 + 1, asc_1826CF510, 2 * v8);
          size_t v43 = v8;
        }
        else
        {
          size_t v43 = 0;
          *unsigned int v42 = 10;
        }
        unint64_t v44 = &v42[v43];
        long long v45 = xmmword_1826CF180;
        *(_OWORD *)(v44 + 1) = xmmword_1826CF180;
        *(_OWORD *)(v44 + 9) = xmmword_1826CF190;
        v44[17] = 10;
        int v46 = v44 + 18;
        if (v8)
        {
          memset_pattern16(v44 + 18, asc_1826CF510, 2 * v8);
          v46 += v8;
          _WORD *v46 = 10;
          memset_pattern16(v46 + 1, asc_1826CF510, 2 * v8);
          long long v45 = xmmword_1826CF180;
          size_t v47 = v8;
        }
        else
        {
          size_t v47 = 0;
          _WORD *v46 = 10;
        }
        uint64_t v48 = &v46[v47];
        *(_OWORD *)(v48 + 1) = v45;
        *(_OWORD *)(v48 + 9) = xmmword_1826CF1A0;
        *(_OWORD *)(v48 + 17) = xmmword_1826CF1B0;
        *(_OWORD *)(v48 + 25) = xmmword_1826CF1C0;
        *(_OWORD *)(v48 + 33) = xmmword_1826CF1D0;
        *(_OWORD *)(v48 + 41) = xmmword_1826CF1E0;
        *(_OWORD *)(v48 + 49) = xmmword_1826CF1F0;
        BOOL v49 = v48 + 61;
        *(void *)(v48 + 57) = 0xA007D0020007BLL;
        if (v8)
        {
          memset_pattern16(v48 + 61, asc_1826CF510, 2 * v8);
          v49 += v8;
          *BOOL v49 = 10;
          memset_pattern16(v49 + 1, asc_1826CF510, 2 * v8);
          size_t v50 = v8;
        }
        else
        {
          size_t v50 = 0;
          *BOOL v49 = 10;
        }
        unint64_t v51 = &v49[v50];
        *(_OWORD *)(v51 + 1) = xmmword_1826CF200;
        *(_OWORD *)(v51 + 9) = xmmword_1826CF210;
        *(_OWORD *)(v51 + 17) = xmmword_1826CF220;
        *(_OWORD *)(v51 + 25) = xmmword_1826CF230;
        *(_OWORD *)(v51 + 33) = xmmword_1826CF240;
        *(_OWORD *)(v51 + 41) = xmmword_1826CF250;
        uint64_t v52 = v51 + 53;
        *(void *)(v51 + 49) = 0xA007D0020003BLL;
        if (v8)
        {
          memset_pattern16(v51 + 53, asc_1826CF510, 2 * v8);
          size_t v53 = v8;
        }
        else
        {
          size_t v53 = 0;
        }
        v714.val[0] = *(int8x16_t *)"operator packed_vec<T, 3>() { return packed_vec<T, 3>(x, y, z); }\n";
        v727.val[0] = *(int8x16_t *)"turn packed_vec<T, 3>(x, y, z); }\n";
        unint64_t v54 = &v52[v53];
        v740.val[1] = 0uLL;
        v740.val[0] = *(int8x16_t *)"T, 3>(x, y, z); }\n";
        v727.val[1] = 0u;
        v753.val[0] = *(int8x16_t *)"vec<T, 3>() { return packed_vec<T, 3>(x, y, z); }\n";
        v714.val[1] = 0u;
        unsigned int v55 = (char *)v54;
        vst2q_s8(v55, v714);
        v55 += 32;
        v753.val[1] = 0u;
        vst2q_s8(v55, v753);
        uint64_t v56 = (char *)(v54 + 32);
        vst2q_s8(v56, v727);
        uint64_t v57 = (char *)(v54 + 48);
        vst2q_s8(v57, v740);
        *((_DWORD *)v54 + 32) = 655485;
        uint64_t v58 = v54 + 66;
        if (v8)
        {
          memset_pattern16(v54 + 66, asc_1826CF510, 2 * v8);
          v58 += v8;
          _WORD *v58 = 10;
          memset_pattern16(v58 + 1, asc_1826CF510, 2 * v8);
          size_t v59 = v8;
        }
        else
        {
          size_t v59 = 0;
          _WORD *v58 = 10;
        }
        int v60 = &v58[v59];
        *(_OWORD *)(v60 + 1) = xmmword_1826CF260;
        *(_OWORD *)(v60 + 9) = xmmword_1826CF270;
        *(_OWORD *)(v60 + 17) = xmmword_1826CF280;
        *(_OWORD *)(v60 + 25) = xmmword_1826CF290;
        *(_OWORD *)(v60 + 33) = xmmword_1826CF2A0;
        *(_OWORD *)(v60 + 41) = xmmword_1826CF2B0;
        *(_OWORD *)(v60 + 49) = xmmword_1826CF2C0;
        v60[61] = 10;
        int v61 = v60 + 62;
        *(void *)(v60 + 57) = 0x7D0020003B0078;
        if (v8)
        {
          memset_pattern16(v60 + 62, asc_1826CF510, 2 * v8);
          size_t v62 = v8;
        }
        else
        {
          size_t v62 = 0;
        }
        v715.val[0] = *(int8x16_t *)"device T& operator[](int i) device { return i ? i == 2 ? z : y : x; }\n";
        v728.val[0] = *(int8x16_t *)"ce { return i ? i == 2 ? z : y : x; }\n";
        unint64_t v63 = (char *)&v61[v62];
        int8x16_t v64 = 0uLL;
        long long v65 = *(_OWORD *)"i == 2 ? z : y : x; }\n";
        v728.val[1] = 0u;
        v741.val[0] = *(int8x16_t *)"or[](int i) device { return i ? i == 2 ? z : y : x; }\n";
        v715.val[1] = 0u;
        uint64_t v66 = v63;
        vst2q_s8(v66, v715);
        v66 += 32;
        v741.val[1] = 0u;
        vst2q_s8(v66, v741);
        int v67 = v63 + 64;
        vst2q_s8(v67, v728);
        unint64_t v68 = v63 + 96;
        vst2q_s8(v68, *(int8x16x2_t *)(&v64 - 1));
        *((void *)v63 + 16) = 0x20003B00780020;
        *((_DWORD *)v63 + 34) = 655485;
        int v69 = v63 + 140;
        if (v8)
        {
          memset_pattern16(v63 + 140, asc_1826CF510, 2 * v8);
          int8x16_t v64 = 0uLL;
          size_t v70 = v8;
        }
        else
        {
          size_t v70 = 0;
        }
        v716.val[0] = *(int8x16_t *)"constant T& operator[](int i) constant { return i ? i == 2 ? z : y : x; }\n";
        v729.val[0] = *(int8x16_t *)"nstant { return i ? i == 2 ? z : y : x; }\n";
        int v71 = (char *)&v69[v70];
        long long v72 = *(_OWORD *)"i ? i == 2 ? z : y : x; }\n";
        v729.val[1] = v64;
        v742.val[0] = *(int8x16_t *)"ator[](int i) constant { return i ? i == 2 ? z : y : x; }\n";
        v716.val[1] = v64;
        int v73 = v71;
        vst2q_s8(v73, v716);
        v73 += 32;
        v742.val[1] = v64;
        vst2q_s8(v73, v742);
        int v74 = v71 + 64;
        vst2q_s8(v74, v729);
        int v75 = v71 + 96;
        vst2q_s8(v75, *(int8x16x2_t *)(&v64 - 1));
        *((_OWORD *)v71 + 8) = xmmword_1826CF2D0;
        *((_DWORD *)v71 + 36) = 655485;
        int v76 = v71 + 148;
        if (v8)
        {
          memset_pattern16(v71 + 148, asc_1826CF510, 2 * v8);
          size_t v77 = v8;
        }
        else
        {
          size_t v77 = 0;
        }
        v717.val[0] = *(int8x16_t *)"thread T& operator[](int i) thread { return i ? i == 2 ? z : y : x; }\n";
        v730.val[0] = *(int8x16_t *)"ad { return i ? i == 2 ? z : y : x; }\n";
        int v78 = (char *)&v76[v77];
        int8x16_t v79 = 0uLL;
        long long v80 = *(_OWORD *)"i == 2 ? z : y : x; }\n";
        v730.val[1] = 0u;
        v743.val[0] = *(int8x16_t *)"or[](int i) thread { return i ? i == 2 ? z : y : x; }\n";
        v717.val[1] = 0u;
        int v81 = v78;
        vst2q_s8(v81, v717);
        v81 += 32;
        v743.val[1] = 0u;
        vst2q_s8(v81, v743);
        int v82 = v78 + 64;
        vst2q_s8(v82, v730);
        unint64_t v83 = v78 + 96;
        vst2q_s8(v83, *(int8x16x2_t *)(&v79 - 1));
        *((void *)v78 + 16) = 0x20003B00780020;
        *((_DWORD *)v78 + 34) = 655485;
        int v84 = v78 + 140;
        if (v8)
        {
          memset_pattern16(v78 + 140, asc_1826CF510, 2 * v8);
          int8x16_t v79 = 0uLL;
        }
        else
        {
          size_t v8 = 0;
        }
        v718.val[0] = *(int8x16_t *)"threadgroup T& operator[](int i) threadgroup { return i ? i == 2 ? z : y : x; }\n";
        v731.val[0] = *(int8x16_t *)" threadgroup { return i ? i == 2 ? z : y : x; }\n";
        int v85 = (size_t)&v84[v8];
        long long v86 = *(_OWORD *)"eturn i ? i == 2 ? z : y : x; }\n";
        v731.val[1] = v79;
        v744.val[0] = *(int8x16_t *)"perator[](int i) threadgroup { return i ? i == 2 ? z : y : x; }\n";
        v718.val[1] = v79;
        unint64_t v87 = (char *)v85;
        vst2q_s8(v87, v718);
        v87 += 32;
        v744.val[1] = v79;
        vst2q_s8(v87, v744);
        int v88 = (char *)(v85 + 64);
        vst2q_s8(v88, v731);
        int v89 = (char *)(v85 + 96);
        vst2q_s8(v89, *(int8x16x2_t *)(&v79 - 1));
        *(_OWORD *)(v85 + 128) = xmmword_1826CF2E0;
        *(_OWORD *)(v85 + 144) = xmmword_1826CF2F0;
      }
    }
    else
    {
      uint64_t v19 = MEMORY[0x18530ACF0]();
      if (v19)
      {
        uint64_t v20 = v19;
        if (v8)
        {
          memset((void *)v19, 32, v8);
          size_t v21 = v20 + v8;
          *(_DWORD *)size_t v21 = 997728340;
          *(unsigned char *)(v21 + 4) = 10;
          unint64_t v22 = (char *)(v20 + v8 + 5);
          memset(v22, 32, v8);
          unint64_t v23 = &v22[v8];
          *(_DWORD *)unint64_t v23 = 997793876;
          v23[4] = 10;
          char v24 = &v22[v8 + 5];
          memset(v24, 32, v8);
          char v25 = &v24[v8];
          *(_DWORD *)char v25 = 997859412;
          v25[4] = 10;
          int v26 = &v24[v8 + 5];
          memset(v26, 32, v8);
          qmemcpy(&v26[v8], "uint8_t __padding[sizeof(T)];\n", 30);
          uint64_t v27 = &v26[v8 + 30];
          memset(v27, 32, v8);
          uint64_t v28 = &v27[v8];
          *v28++ = 10;
          memset(v28, 32, v8);
          int v29 = &v28[v8];
          v29[16] = 10;
          *(_OWORD *)int v29 = *(_OWORD *)"PackedVec3() { }\n";
          uint64_t v30 = &v28[v8 + 17];
          memset(v30, 32, v8);
          int v31 = &v30[v8];
          *v31++ = 10;
          memset(v31, 32, v8);
          qmemcpy(&v31[v8], "PackedVec3(packed_vec<T, 3> v) : x(v.x), y(v.y), z(v.z) { }\n", 60);
          uint64_t v32 = &v31[v8 + 60];
          memset(v32, 32, v8);
          uint64_t v33 = &v32[v8];
          *v33++ = 10;
          memset(v33, 32, v8);
          qmemcpy(&v33[v8], "operator vec<T, 3>() { return vec<T, 3>(x, y, z); }\n", 52);
          uint64_t v34 = &v33[v8 + 52];
          memset(v34, 32, v8);
          qmemcpy(&v34[v8], "operator packed_vec<T, 3>() { return packed_vec<T, 3>(x, y, z); }\n", 66);
          uint64_t v35 = &v34[v8 + 66];
          memset(v35, 32, v8);
          uint64_t v36 = &v35[v8];
          *v36++ = 10;
          memset(v36, 32, v8);
          qmemcpy(&v36[v8], "T operator[](int i) const { return i ? i == 2 ? z : y : x; }\n", 61);
          uint64_t v37 = &v36[v8 + 61];
          memset(v37, 32, v8);
          qmemcpy(&v37[v8], "device T& operator[](int i) device { return i ? i == 2 ? z : y : x; }\n", 70);
          uint64_t v38 = &v37[v8 + 70];
          memset(v38, 32, v8);
          qmemcpy(&v38[v8], "constant T& operator[](int i) constant { return i ? i == 2 ? z : y : x; }\n", 74);
          uint64_t v39 = &v38[v8 + 74];
          memset(v39, 32, v8);
          uint64_t v40 = &v39[v8];
          qmemcpy(v40, "thread T& operator[](int i) thread { return i ? i == 2 ? z : y : x; }\n", 70);
          memset(v40 + 70, 32, v8);
        }
        else
        {
          size_t v8 = 0;
          qmemcpy((void *)v19, "T x;\n"
            "T y;\n"
            "T z;\n"
            "uint8_t __padding[sizeof(T)];\n"
            "\n"
            "PackedVec3() { }\n"
            "\n"
            "PackedVec3(packed_vec<T, 3> v) : x(v.x), y(v.y), z(v.z) { }\n"
            "\n"
            "operator vec<T, 3>() { return vec<T, 3>(x, y, z); }\n"
            "operator packed_vec<T, 3>() { return packed_vec<T, 3>(x, y, z); }\n"
            "\n"
            "T operator[](int i) const { return i ? i == 2 ? z : y : x; }\n"
            "device T& operator[](int i) device { return i ? i == 2 ? z : y : x; }\n"
            "constant T& operator[](int i) constant { return i ? i == 2 ? z : y : x; }\n",
            449);
          uint64_t v40 = (char *)(v19 + 449);
          qmemcpy((void *)(v19 + 449), "thread T& operator[](int i) thread { return i ? i == 2 ? z : y : x; }\n", 70);
        }
        qmemcpy(&v40[v8 + 70], "threadgroup T& operator[](int i) threadgroup { return i ? i == 2 ? z : y : x; }\n", 80);
      }
    }
    int v90 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v90;
    int v91 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v711) = v90;
    unint64_t v702 = "};\n\n";
    LODWORD(v703) = 4;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v91, (int *)&v711, (uint64_t)&v702);
    uint64_t v4 = *((void *)this + 6);
  }
  if (*(unsigned char *)(v4 + 8))
  {
    *(unsigned char *)(v4 + 8) = 0;
    WTF::StringBuilder::append();
    int v92 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v92;
    int v93 = (WTF::StringBuilder *)*((void *)this + 5);
    size_t v94 = (4 * v92);
    uint64_t v95 = *((void *)v93 + 1);
    if ((v95 || (uint64_t v95 = *(void *)v93) != 0) && (*(unsigned char *)(v95 + 16) & 4) == 0)
    {
      int v96 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v93);
      if (v96)
      {
        int v97 = v96;
        if (v94)
        {
          memset_pattern16(v96, asc_1826CF510, 2 * v94);
          size_t v98 = v94;
        }
        else
        {
          size_t v98 = 0;
        }
        int v106 = &v97[2 * v98];
        long long v107 = xmmword_1826CF300;
        long long v108 = xmmword_1826CF310;
        *(_OWORD *)int v106 = xmmword_1826CF300;
        *((_OWORD *)v106 + 1) = xmmword_1826CF310;
        *((_OWORD *)v106 + 2) = xmmword_1826CF320;
        *((void *)v106 + 6) = 0x3B0065006E0061;
        *((_WORD *)v106 + 28) = 10;
        int v109 = v106 + 58;
        if (v94)
        {
          memset_pattern16(v106 + 58, asc_1826CF510, 2 * v94);
          long long v108 = xmmword_1826CF310;
          long long v107 = xmmword_1826CF300;
          size_t v110 = v94;
        }
        else
        {
          size_t v110 = 0;
        }
        unint64_t v111 = &v109[2 * v110];
        *(_OWORD *)unint64_t v111 = v107;
        *((_OWORD *)v111 + 1) = v108;
        *((_OWORD *)v111 + 2) = xmmword_1826CF330;
        *((void *)v111 + 6) = 0x65006E0061006CLL;
        *((_DWORD *)v111 + 14) = 655419;
        int v112 = v111 + 60;
        if (v94)
        {
          memset_pattern16(v111 + 60, asc_1826CF510, 2 * v94);
          size_t v113 = v94;
        }
        else
        {
          size_t v113 = 0;
        }
        uint64_t v114 = &v112[2 * v113];
        *(_OWORD *)uint64_t v114 = xmmword_1826CF340;
        *((_OWORD *)v114 + 1) = xmmword_1826CF350;
        *((_OWORD *)v114 + 2) = xmmword_1826CF360;
        uint64_t v115 = v114 + 48;
        if (v94)
        {
          memset_pattern16(v114 + 48, asc_1826CF510, 2 * v94);
          size_t v116 = v94;
        }
        else
        {
          size_t v116 = 0;
        }
        int v117 = (char *)v115 + 2 * v116;
        *(_WORD *)int v117 = 102;
        *(_OWORD *)(v117 + 2) = xmmword_1826CF370;
        *(_OWORD *)(v117 + 18) = xmmword_1826CF380;
        *(_OWORD *)(v117 + 34) = xmmword_1826CF390;
        *(_OWORD *)(v117 + 50) = xmmword_1826CF3A0;
        *(void *)(v117 + 66) = 0xA003B00780069;
        int v118 = v117 + 74;
        if (v94)
        {
          memset_pattern16(v117 + 74, asc_1826CF510, 2 * v94);
          size_t v119 = v94;
        }
        else
        {
          size_t v119 = 0;
        }
        v719.val[0] = *(int8x16_t *)"uint get_width(uint lod = 0) const { return FirstPlane.get_width(lod); }\n";
        v732.val[0] = *(int8x16_t *)"st { return FirstPlane.get_width(lod); }\n";
        uint64_t v120 = &v118[2 * v119];
        int8x16_t v121 = 0uLL;
        long long v122 = *(_OWORD *)"tPlane.get_width(lod); }\n";
        v732.val[1] = 0u;
        v745.val[0] = *(int8x16_t *)"int lod = 0) const { return FirstPlane.get_width(lod); }\n";
        v719.val[1] = 0u;
        unsigned __int16 v123 = v120;
        vst2q_s8(v123, v719);
        v123 += 32;
        v745.val[1] = 0u;
        vst2q_s8(v123, v745);
        int v124 = v120 + 64;
        vst2q_s8(v124, v732);
        int v125 = v120 + 96;
        vst2q_s8(v125, *(int8x16x2_t *)(&v121 - 1));
        *((_OWORD *)v120 + 8) = xmmword_1826CF3B0;
        *((_WORD *)v120 + 72) = 10;
        int v126 = v120 + 146;
        if (v94)
        {
          memset_pattern16(v120 + 146, asc_1826CF510, 2 * v94);
          int8x16_t v121 = 0uLL;
        }
        else
        {
          size_t v94 = 0;
        }
        v720.val[0] = *(int8x16_t *)"uint get_height(uint lod = 0) const { return FirstPlane.get_height(lod); }\n";
        v733.val[0] = *(int8x16_t *)"nst { return FirstPlane.get_height(lod); }\n";
        int32_t v127 = &v126[2 * v94];
        long long v128 = *(_OWORD *)"stPlane.get_height(lod); }\n";
        v733.val[1] = v121;
        v746.val[0] = *(int8x16_t *)"uint lod = 0) const { return FirstPlane.get_height(lod); }\n";
        v720.val[1] = v121;
        uint64_t v129 = v127;
        vst2q_s8(v129, v720);
        v129 += 32;
        v746.val[1] = v121;
        vst2q_s8(v129, v746);
        uint64_t v130 = v127 + 64;
        vst2q_s8(v130, v733);
        unint64_t v131 = v127 + 96;
        vst2q_s8(v131, *(int8x16x2_t *)(&v121 - 1));
        *((_OWORD *)v127 + 8) = xmmword_1826CF3C0;
        *((_DWORD *)v127 + 36) = 8192032;
        *((_WORD *)v127 + 74) = 10;
      }
    }
    else
    {
      uint64_t v99 = MEMORY[0x18530ACF0]();
      if (v99)
      {
        uint64_t v100 = v99;
        if (v94)
        {
          memset((void *)v99, 32, v94);
          qmemcpy((void *)(v100 + v94), "texture2d<float> FirstPlane;\n", 29);
          int v101 = (char *)(v100 + v94 + 29);
          memset(v101, 32, v94);
          qmemcpy(&v101[v94], "texture2d<float> SecondPlane;\n", 30);
          int v102 = &v101[v94 + 30];
          memset(v102, 32, v94);
          qmemcpy(&v102[v94], "float3x2 UVRemapMatrix;\n", 24);
          int v103 = &v102[v94 + 24];
          memset(v103, 32, v94);
          qmemcpy(&v103[v94], "float4x3 ColorSpaceConversionMatrix;\n", 37);
          unint64_t v104 = &v103[v94 + 37];
          memset(v104, 32, v94);
          int v105 = &v104[v94];
          qmemcpy(&v104[v94], "uint get_width(uint lod = 0) const { return FirstPlane.get_width(lod); }\n", 73);
          memset(&v104[v94 + 73], 32, v94);
        }
        else
        {
          size_t v94 = 0;
          qmemcpy((void *)v99, "texture2d<float> FirstPlane;\n"
            "texture2d<float> SecondPlane;\n"
            "float3x2 UVRemapMatrix;\n"
            "float4x3 ColorSpaceConversionMatrix;\n"
            "uint get_width(u",
            136);
          qmemcpy((void *)(v99 + 152), "st { return FirstPlane.get_width(lod); }\n", 41);
          int v105 = (char *)(v99 + 120);
          *(_OWORD *)(v99 + 136) = *(_OWORD *)"int lod = 0) const { return FirstPlane.get_width(lod); }\n";
        }
        qmemcpy(&v105[v94 + 73], "uint get_height(uint lod = 0) const { return FirstPlane.get_height(lod); }\n", 75);
      }
    }
    --*((_DWORD *)this + 14);
    WTF::StringBuilder::append();
    uint64_t v4 = *((void *)this + 6);
  }
  if (*(unsigned char *)(v4 + 9))
  {
    *(unsigned char *)(v4 + 9) = 0;
    unint64_t v132 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v705) = *((_DWORD *)this + 14);
    unint64_t v702 = "template<typename T, size_t N>\n";
    LODWORD(v703) = 31;
    LODWORD(v710) = v705;
    v711 = "array<typename T::PackedType, N> __pack(array<T, N> unpacked)\n";
    int v712 = 62;
    LODWORD(v707) = v705;
    unint64_t v708 = "{\n";
    int v709 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v132, (int *)&v705, (unint64_t *)&v702, (int *)&v710, (unint64_t *)&v711, (int *)&v707, (unint64_t *)&v708);
    int v133 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v133;
    int v134 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v708) = v133;
    unint64_t v702 = "array<typename T::PackedType, N> packed;\n";
    LODWORD(v703) = 41;
    LODWORD(v705) = v133;
    v711 = "for (size_t int i = 0; i < N; ++i)\n";
    int v712 = 31;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v134, (int *)&v708, (uint64_t)&v702, (int *)&v705, (uint64_t)&v711);
    int v135 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v135;
    unsigned int v136 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v711) = v135;
    unint64_t v702 = "packed[i] = __pack(unpacked[i]);\n";
    LODWORD(v703) = 33;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v136, (int *)&v711, (uint64_t)&v702);
    int v137 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v137;
    BOOL v138 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v711) = v137;
    unint64_t v702 = "return packed;\n";
    LODWORD(v703) = 15;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v138, (int *)&v711, (uint64_t)&v702);
    int v139 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v139;
    unint64_t v140 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v711) = v139;
    unint64_t v702 = "}\n\n";
    LODWORD(v703) = 3;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v140, (int *)&v711, (uint64_t)&v702);
    uint64_t v4 = *((void *)this + 6);
    if (*(unsigned char *)(v4 + 30))
    {
      uint64_t v141 = (WTF::StringBuilder *)*((void *)this + 5);
      LODWORD(v705) = *((_DWORD *)this + 14);
      unint64_t v702 = "template<typename T, size_t N>\n";
      LODWORD(v703) = 31;
      LODWORD(v710) = v705;
      v711 = "array<PackedVec3<T>, N> __pack(array<vec<T, 3>, N> unpacked)\n";
      int v712 = 61;
      LODWORD(v707) = v705;
      unint64_t v708 = "{\n";
      int v709 = 2;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v141, (int *)&v705, (unint64_t *)&v702, (int *)&v710, (unint64_t *)&v711, (int *)&v707, (unint64_t *)&v708);
      int v142 = *((_DWORD *)this + 14) + 1;
      *((_DWORD *)this + 14) = v142;
      uint64_t v143 = (WTF::StringBuilder *)*((void *)this + 5);
      LODWORD(v708) = v142;
      unint64_t v702 = "array<PackedVec3<T>, N> packed;\n";
      LODWORD(v703) = 32;
      LODWORD(v705) = v142;
      v711 = "for (size_t int i = 0; i < N; ++i)\n";
      int v712 = 31;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v143, (int *)&v708, (uint64_t)&v702, (int *)&v705, (uint64_t)&v711);
      int v144 = *((_DWORD *)this + 14) + 1;
      *((_DWORD *)this + 14) = v144;
      uint64_t v145 = (WTF::StringBuilder *)*((void *)this + 5);
      LODWORD(v711) = v144;
      unint64_t v702 = "packed[i] = PackedVec3<T>(unpacked[i]);\n";
      LODWORD(v703) = 40;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v145, (int *)&v711, (uint64_t)&v702);
      int v146 = *((_DWORD *)this + 14) - 1;
      *((_DWORD *)this + 14) = v146;
      uint64_t v147 = (WTF::StringBuilder *)*((void *)this + 5);
      LODWORD(v711) = v146;
      unint64_t v702 = "return packed;\n";
      LODWORD(v703) = 15;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v147, (int *)&v711, (uint64_t)&v702);
      int v148 = *((_DWORD *)this + 14) - 1;
      *((_DWORD *)this + 14) = v148;
      uint64_t v149 = (WTF::StringBuilder *)*((void *)this + 5);
      LODWORD(v711) = v148;
      unint64_t v702 = "}\n\n";
      LODWORD(v703) = 3;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v149, (int *)&v711, (uint64_t)&v702);
      uint64_t v4 = *((void *)this + 6);
    }
  }
  if (*(unsigned char *)(v4 + 10))
  {
    *(unsigned char *)(v4 + 10) = 0;
    int v150 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v705) = *((_DWORD *)this + 14);
    unint64_t v702 = "template<typename T, size_t N>\n";
    LODWORD(v703) = 31;
    LODWORD(v710) = v705;
    v711 = "array<typename T::UnpackedType, N> __unpack(array<T, N> packed)\n";
    int v712 = 64;
    LODWORD(v707) = v705;
    unint64_t v708 = "{\n";
    int v709 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v150, (int *)&v705, (unint64_t *)&v702, (int *)&v710, (unint64_t *)&v711, (int *)&v707, (unint64_t *)&v708);
    int v151 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v151;
    uint64_t v152 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v708) = v151;
    unint64_t v702 = "array<typename T::UnpackedType, N> unpacked;\n";
    LODWORD(v703) = 45;
    LODWORD(v705) = v151;
    v711 = "for (size_t int i = 0; i < N; ++i)\n";
    int v712 = 31;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v152, (int *)&v708, (uint64_t)&v702, (int *)&v705, (uint64_t)&v711);
    int v153 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v153;
    unsigned int v154 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v711) = v153;
    unint64_t v702 = "unpacked[i] = __unpack(packed[i]);\n";
    LODWORD(v703) = 35;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v154, (int *)&v711, (uint64_t)&v702);
    int v155 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v155;
    int v156 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v711) = v155;
    unint64_t v702 = "return unpacked;\n";
    LODWORD(v703) = 17;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v156, (int *)&v711, (uint64_t)&v702);
    int v157 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v157;
    uint64_t v158 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v711) = v157;
    unint64_t v702 = "}\n\n";
    LODWORD(v703) = 3;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v158, (int *)&v711, (uint64_t)&v702);
    uint64_t v4 = *((void *)this + 6);
    if (*(unsigned char *)(v4 + 30))
    {
      uint64_t v159 = (WTF::StringBuilder *)*((void *)this + 5);
      LODWORD(v705) = *((_DWORD *)this + 14);
      unint64_t v702 = "template<typename T, size_t N>\n";
      LODWORD(v703) = 31;
      LODWORD(v710) = v705;
      v711 = "array<vec<T, 3>, N> __unpack(array<PackedVec3<T>, N> packed)\n";
      int v712 = 61;
      LODWORD(v707) = v705;
      unint64_t v708 = "{\n";
      int v709 = 2;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v159, (int *)&v705, (unint64_t *)&v702, (int *)&v710, (unint64_t *)&v711, (int *)&v707, (unint64_t *)&v708);
      int v160 = *((_DWORD *)this + 14) + 1;
      *((_DWORD *)this + 14) = v160;
      int v161 = (WTF::StringBuilder *)*((void *)this + 5);
      LODWORD(v708) = v160;
      unint64_t v702 = "array<vec<T, 3>, N> unpacked;\n";
      LODWORD(v703) = 30;
      LODWORD(v705) = v160;
      v711 = "for (size_t int i = 0; i < N; ++i)\n";
      int v712 = 31;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v161, (int *)&v708, (uint64_t)&v702, (int *)&v705, (uint64_t)&v711);
      int v162 = *((_DWORD *)this + 14) + 1;
      *((_DWORD *)this + 14) = v162;
      unint64_t v163 = (WTF::StringBuilder *)*((void *)this + 5);
      LODWORD(v711) = v162;
      unint64_t v702 = "unpacked[i] = vec<T, 3>(packed[i]);\n";
      LODWORD(v703) = 36;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v163, (int *)&v711, (uint64_t)&v702);
      int v164 = *((_DWORD *)this + 14) - 1;
      *((_DWORD *)this + 14) = v164;
      uint64_t v165 = (WTF::StringBuilder *)*((void *)this + 5);
      LODWORD(v711) = v164;
      unint64_t v702 = "return unpacked;\n";
      LODWORD(v703) = 17;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v165, (int *)&v711, (uint64_t)&v702);
      int v166 = *((_DWORD *)this + 14) - 1;
      *((_DWORD *)this + 14) = v166;
      int v167 = (WTF::StringBuilder *)*((void *)this + 5);
      LODWORD(v711) = v166;
      unint64_t v702 = "}\n\n";
      LODWORD(v703) = 3;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v167, (int *)&v711, (uint64_t)&v702);
      uint64_t v4 = *((void *)this + 6);
    }
  }
  if (*(unsigned char *)(v4 + 11))
  {
    *(unsigned char *)(v4 + 11) = 0;
    int v168 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v708) = *((_DWORD *)this + 14);
    unint64_t v702 = "template<typename T>\n";
    LODWORD(v703) = 21;
    LODWORD(v705) = v708;
    v711 = "packed_vec<T, 3> __pack(vec<T, 3> unpacked) { return unpacked; }\n\n";
    int v712 = 66;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v168, (int *)&v708, (uint64_t)&v702, (int *)&v705, (uint64_t)&v711);
    uint64_t v4 = *((void *)this + 6);
  }
  if (*(unsigned char *)(v4 + 12))
  {
    *(unsigned char *)(v4 + 12) = 0;
    uint64_t v169 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v708) = *((_DWORD *)this + 14);
    unint64_t v702 = "template<typename T>\n";
    LODWORD(v703) = 21;
    LODWORD(v705) = v708;
    v711 = "vec<T, 3> __unpack(packed_vec<T, 3> packed) { return packed; }\n\n";
    int v712 = 64;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v169, (int *)&v708, (uint64_t)&v702, (int *)&v705, (uint64_t)&v711);
    uint64_t v4 = *((void *)this + 6);
    if (*(unsigned char *)(v4 + 30))
    {
      uint64_t v170 = (WTF::StringBuilder *)*((void *)this + 5);
      LODWORD(v708) = *((_DWORD *)this + 14);
      unint64_t v702 = "template<typename T>\n";
      LODWORD(v703) = 21;
      LODWORD(v705) = v708;
      v711 = "vec<T, 3> __unpack(PackedVec3<T> packed) { return packed; }\n\n";
      int v712 = 61;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v170, (int *)&v708, (uint64_t)&v702, (int *)&v705, (uint64_t)&v711);
      uint64_t v4 = *((void *)this + 6);
    }
  }
  if (*(unsigned char *)(v4 + 13))
  {
    int v171 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v705) = *((_DWORD *)this + 14);
    unint64_t v702 = "template<typename T>\n";
    LODWORD(v703) = 21;
    LODWORD(v710) = v705;
    v711 = "T __workgroup_uniform_load(threadgroup T* const ptr)\n";
    int v712 = 53;
    LODWORD(v707) = v705;
    unint64_t v708 = "{\n";
    int v709 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v171, (int *)&v705, (unint64_t *)&v702, (int *)&v710, (unint64_t *)&v711, (int *)&v707, (unint64_t *)&v708);
    int v172 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v172;
    WTF::StringBuilder::append<WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral>(*((WTF::StringBuilder **)this + 5), v172, (int8x16_t *)"threadgroup_barrier(mem_flags::mem_threadgroup);\n",
      50,
      v172,
      "auto uint64_t result = *ptr;\n",
      21,
      v172,
      "threadgroup_barrier(mem_flags::mem_threadgroup);\n",
      50,
      v172,
      "return result;\n",
      16);
    int v173 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v173;
    uint64_t v174 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v711) = v173;
    unint64_t v702 = "}\n\n";
    LODWORD(v703) = 3;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v174, (int *)&v711, (uint64_t)&v702);
    uint64_t v4 = *((void *)this + 6);
  }
  if (*(unsigned char *)(v4 + 14))
  {
    uint64_t v175 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v705) = *((_DWORD *)this + 14);
    unint64_t v702 = "template<typename T, typename U, typename V = conditional_t<is_scalar_v<U>, T, U>>\n";
    LODWORD(v703) = 83;
    LODWORD(v710) = v705;
    v711 = "V __wgslDiv(T lhs, U rhs)\n";
    int v712 = 26;
    LODWORD(v707) = v705;
    unint64_t v708 = "{\n";
    int v709 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v175, (int *)&v705, (unint64_t *)&v702, (int *)&v710, (unint64_t *)&v711, (int *)&v707, (unint64_t *)&v708);
    int v176 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v176;
    int v177 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v708) = v176;
    unint64_t v702 = "auto predicate = V(rhs) == V(0);\n";
    LODWORD(v703) = 33;
    LODWORD(v705) = v176;
    v711 = "if constexpr (is_signed_v<U>)\n";
    int v712 = 30;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v177, (int *)&v708, (uint64_t)&v702, (int *)&v705, (uint64_t)&v711);
    int v178 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v178;
    uint64_t v179 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v711) = v178;
    unint64_t v702 = "predicate = predicate || (V(lhs) == V(numeric_limits<T>::lowest()) && V(rhs) == V(-1));\n";
    LODWORD(v703) = 88;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v179, (int *)&v711, (uint64_t)&v702);
    int v180 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v180;
    uint64_t v181 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v711) = v180;
    unint64_t v702 = "return lhs / select(V(rhs), V(1), predicate);\n";
    LODWORD(v703) = 46;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v181, (int *)&v711, (uint64_t)&v702);
    int v182 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v182;
    uint64_t v183 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v711) = v182;
    unint64_t v702 = "}\n\n";
    LODWORD(v703) = 3;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v183, (int *)&v711, (uint64_t)&v702);
    uint64_t v4 = *((void *)this + 6);
  }
  if (*(unsigned char *)(v4 + 15))
  {
    int v184 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v705) = *((_DWORD *)this + 14);
    unint64_t v702 = "template<typename T, typename U, typename V = conditional_t<is_scalar_v<U>, T, U>>\n";
    LODWORD(v703) = 83;
    LODWORD(v710) = v705;
    v711 = "V __wgslMod(T lhs, U rhs)\n";
    int v712 = 26;
    LODWORD(v707) = v705;
    unint64_t v708 = "{\n";
    int v709 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v184, (int *)&v705, (unint64_t *)&v702, (int *)&v710, (unint64_t *)&v711, (int *)&v707, (unint64_t *)&v708);
    int v185 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v185;
    int v186 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v708) = v185;
    unint64_t v702 = "auto predicate = V(rhs) == V(0);\n";
    LODWORD(v703) = 33;
    LODWORD(v705) = v185;
    v711 = "if constexpr (is_signed_v<U>)\n";
    int v712 = 30;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v186, (int *)&v708, (uint64_t)&v702, (int *)&v705, (uint64_t)&v711);
    int v187 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v187;
    uint64_t v188 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v711) = v187;
    unint64_t v702 = "predicate = predicate || (V(lhs) == V(numeric_limits<T>::lowest()) && V(rhs) == V(-1));\n";
    LODWORD(v703) = 88;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v188, (int *)&v711, (uint64_t)&v702);
    int v189 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v189;
    double v190 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v711) = v189;
    unint64_t v702 = "return select(lhs % V(rhs), V(0), predicate);\n";
    LODWORD(v703) = 46;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v190, (int *)&v711, (uint64_t)&v702);
    int v191 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v191;
    unint64_t v192 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v711) = v191;
    unint64_t v702 = "}\n\n";
    LODWORD(v703) = 3;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v192, (int *)&v711, (uint64_t)&v702);
    uint64_t v4 = *((void *)this + 6);
  }
  if (*(unsigned char *)(v4 + 16))
  {
    int v193 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v708) = *((_DWORD *)this + 14);
    unint64_t v702 = "template<typename T, typename U>\n";
    LODWORD(v703) = 33;
    LODWORD(v705) = v708;
    v711 = "struct __frexp_result {\n";
    int v712 = 24;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v193, (int *)&v708, (uint64_t)&v702, (int *)&v705, (uint64_t)&v711);
    int v194 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v194;
    unint64_t v195 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v708) = v194;
    unint64_t v702 = "T fract;\n";
    LODWORD(v703) = 9;
    LODWORD(v705) = v194;
    v711 = "U exp;\n";
    int v712 = 7;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v195, (int *)&v708, (uint64_t)&v702, (int *)&v705, (uint64_t)&v711);
    int v196 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v196;
    WTF::StringBuilder::append<WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral>(*((WTF::StringBuilder **)this + 5), v196, (int8x16_t *)"};\n\n",
      5,
      v196,
      "template<typename T, typename U = conditional_t<is_vector_v<T>, vec<int, vec_elements<T>::value ?: 2>, int>>\n",
      110,
      v196,
      "__frexp_result<T, U> __wgslFrexp(T value)\n",
      43,
      v196,
      "{\n",
      3);
    int v197 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v197;
    int v198 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v705) = v197;
    unint64_t v702 = "__frexp_result<T, U> result;\n";
    LODWORD(v703) = 29;
    LODWORD(v710) = v197;
    v711 = "result.fract = frexp(value, result.exp);\n";
    int v712 = 41;
    LODWORD(v707) = v197;
    unint64_t v708 = "return result;\n";
    int v709 = 15;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v198, (int *)&v705, (unint64_t *)&v702, (int *)&v710, (unint64_t *)&v711, (int *)&v707, (unint64_t *)&v708);
    int v199 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v199;
    unsigned int v200 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v711) = v199;
    unint64_t v702 = "}\n\n";
    LODWORD(v703) = 3;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v200, (int *)&v711, (uint64_t)&v702);
    uint64_t v4 = *((void *)this + 6);
  }
  if (*(unsigned char *)(v4 + 17))
  {
    int v201 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v708) = *((_DWORD *)this + 14);
    unint64_t v702 = "template<typename T, typename U>\n";
    LODWORD(v703) = 33;
    LODWORD(v705) = v708;
    v711 = "struct __modf_result {\n";
    int v712 = 23;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v201, (int *)&v708, (uint64_t)&v702, (int *)&v705, (uint64_t)&v711);
    int v202 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v202;
    int v203 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v708) = v202;
    unint64_t v702 = "T fract;\n";
    LODWORD(v703) = 9;
    LODWORD(v705) = v202;
    v711 = "U whole;\n";
    int v712 = 9;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v203, (int *)&v708, (uint64_t)&v702, (int *)&v705, (uint64_t)&v711);
    int v204 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v204;
    WTF::StringBuilder::append<WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral>(*((WTF::StringBuilder **)this + 5), v204, (int8x16_t *)"};\n\n",
      5,
      v204,
      "template<typename T>\n",
      22,
      v204,
      "__modf_result<T, T> __wgslModf(T value)\n",
      41,
      v204,
      "{\n",
      3);
    int v205 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v205;
    unint64_t v206 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v705) = v205;
    unint64_t v702 = "__modf_result<T, T> result;\n";
    LODWORD(v703) = 28;
    LODWORD(v710) = v205;
    v711 = "result.fract = modf(value, result.whole);\n";
    int v712 = 42;
    LODWORD(v707) = v205;
    unint64_t v708 = "return result;\n";
    int v709 = 15;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v206, (int *)&v705, (unint64_t *)&v702, (int *)&v710, (unint64_t *)&v711, (int *)&v707, (unint64_t *)&v708);
    int v207 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v207;
    int v208 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v711) = v207;
    unint64_t v702 = "}\n\n";
    LODWORD(v703) = 3;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v208, (int *)&v711, (uint64_t)&v702);
    uint64_t v4 = *((void *)this + 6);
  }
  if (*(unsigned char *)(v4 + 18))
  {
    unint64_t v209 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v708) = *((_DWORD *)this + 14);
    unint64_t v702 = "template<typename T, typename U = BOOL>\n";
    LODWORD(v703) = 40;
    LODWORD(v705) = v708;
    v711 = "struct __atomic_compare_exchange_result {\n";
    int v712 = 42;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v209, (int *)&v708, (uint64_t)&v702, (int *)&v705, (uint64_t)&v711);
    int v210 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v210;
    long long v211 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v708) = v210;
    unint64_t v702 = "T old_value;\n";
    LODWORD(v703) = 13;
    LODWORD(v705) = v210;
    v711 = "U exchanged;\n";
    int v712 = 13;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v211, (int *)&v708, (uint64_t)&v702, (int *)&v705, (uint64_t)&v711);
    int v212 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v212;
    uint64_t v213 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v708) = v212;
    unint64_t v702 = "};\n\n";
    LODWORD(v703) = 4;
    LODWORD(v705) = v212;
    v711 = "#define __wgslAtomicCompareExchangeWeak(atomic, compare, value) \\\n";
    int v712 = 66;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v213, (int *)&v708, (uint64_t)&v702, (int *)&v705, (uint64_t)&v711);
    int v214 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v214;
    WTF::StringBuilder::append<WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral>(*((WTF::StringBuilder **)this + 5), v214, (int8x16_t *)"({ auto innerCompare = compare; \\\n",
      35,
      v214,
      "BOOL exchanged = atomic_compare_exchange_weak_explicit((atomic), &innerCompare, value, memory_order_relaxed, memor"
      "y_order_relaxed); \\\n",
      135,
      v214,
      "__atomic_compare_exchange_result<decltype(compare)> { innerCompare, exchanged }; \\\n",
      84,
      v214,
      "})\n",
      4);
    --*((_DWORD *)this + 14);
    uint64_t v4 = *((void *)this + 6);
  }
  if (*(unsigned char *)(v4 + 20))
  {
    int v215 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v705) = *((_DWORD *)this + 14);
    unint64_t v702 = "template<typename T, unsigned N>\n";
    LODWORD(v703) = 33;
    LODWORD(v710) = v705;
    v711 = "T __wgslDot(vec<T, N> lhs, vec<T, N> rhs)\n";
    int v712 = 42;
    LODWORD(v707) = v705;
    unint64_t v708 = "{\n";
    int v709 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v215, (int *)&v705, (unint64_t *)&v702, (int *)&v710, (unint64_t *)&v711, (int *)&v707, (unint64_t *)&v708);
    int v216 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v216;
    WTF::StringBuilder::append<WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral>(*((WTF::StringBuilder **)this + 5), v216, (int8x16_t *)"auto uint64_t result = lhs[0] * rhs[0] + lhs[1] * rhs[1];\n",
      50,
      v216,
      "if constexpr (N > 2) result += lhs[2] * rhs[2];\n",
      49,
      v216,
      "if constexpr (N > 3) result += lhs[3] * rhs[3];\n",
      49,
      v216,
      "return result;\n",
      16);
    int v217 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v217;
    unint64_t v218 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v711) = v217;
    unint64_t v702 = "}\n";
    LODWORD(v703) = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v218, (int *)&v711, (uint64_t)&v702);
    uint64_t v4 = *((void *)this + 6);
  }
  if (*(unsigned char *)(v4 + 27))
  {
    int v219 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v708) = *((_DWORD *)this + 14);
    unint64_t v702 = "int __wgslDot4I8Packed(uint lhs, uint rhs)\n";
    LODWORD(v703) = 43;
    LODWORD(v705) = v708;
    v711 = "{\n";
    int v712 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v219, (int *)&v708, (uint64_t)&v702, (int *)&v705, (uint64_t)&v711);
    int v220 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v220;
    unint64_t v221 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v705) = v220;
    unint64_t v702 = "auto vec1 = as_type<packed_char4>(lhs);";
    LODWORD(v703) = 39;
    LODWORD(v710) = v220;
    v711 = "auto vec2 = as_type<packed_char4>(rhs);";
    int v712 = 39;
    LODWORD(v707) = v220;
    unint64_t v708 = "return vec1[0] * vec2[0] + vec1[1] * vec2[1] + vec1[2] * vec2[2] + vec1[3] * vec2[3];";
    int v709 = 85;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v221, (int *)&v705, (unint64_t *)&v702, (int *)&v710, (unint64_t *)&v711, (int *)&v707, (unint64_t *)&v708);
    int v222 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v222;
    int v223 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v711) = v222;
    unint64_t v702 = "}\n";
    LODWORD(v703) = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v223, (int *)&v711, (uint64_t)&v702);
    uint64_t v4 = *((void *)this + 6);
  }
  if (*(unsigned char *)(v4 + 28))
  {
    uint64_t v224 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v708) = *((_DWORD *)this + 14);
    unint64_t v702 = "uint __wgslDot4U8Packed(uint lhs, uint rhs)\n";
    LODWORD(v703) = 44;
    LODWORD(v705) = v708;
    v711 = "{\n";
    int v712 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v224, (int *)&v708, (uint64_t)&v702, (int *)&v705, (uint64_t)&v711);
    int v225 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v225;
    unint64_t v226 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v705) = v225;
    unint64_t v702 = "auto vec1 = as_type<packed_uchar4>(lhs);";
    LODWORD(v703) = 40;
    LODWORD(v710) = v225;
    v711 = "auto vec2 = as_type<packed_uchar4>(rhs);";
    int v712 = 40;
    LODWORD(v707) = v225;
    unint64_t v708 = "return vec1[0] * vec2[0] + vec1[1] * vec2[1] + vec1[2] * vec2[2] + vec1[3] * vec2[3];";
    int v709 = 85;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v226, (int *)&v705, (unint64_t *)&v702, (int *)&v710, (unint64_t *)&v711, (int *)&v707, (unint64_t *)&v708);
    int v227 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v227;
    unint64_t v228 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v711) = v227;
    unint64_t v702 = "}\n";
    LODWORD(v703) = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v228, (int *)&v711, (uint64_t)&v702);
    uint64_t v4 = *((void *)this + 6);
  }
  if (*(unsigned char *)(v4 + 21))
  {
    int v229 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v705) = *((_DWORD *)this + 14);
    unint64_t v702 = "template<typename T>\n";
    LODWORD(v703) = 21;
    LODWORD(v710) = v705;
    v711 = "T __wgslFirstLeadingBit(T e)\n";
    int v712 = 29;
    LODWORD(v707) = v705;
    unint64_t v708 = "{\n";
    int v709 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v229, (int *)&v705, (unint64_t *)&v702, (int *)&v710, (unint64_t *)&v711, (int *)&v707, (unint64_t *)&v708);
    int v230 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v230;
    WTF::StringBuilder::append<WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral,WTF::Indentation<4u>,WTF::ASCIILiteral>(*((WTF::StringBuilder **)this + 5), v230, (int8x16_t *)"if constexpr (is_signed_v<T>)\n", 31, v230, "    return select(T(31 - select(clz(e), clz(~e), e < T(0))), T(-1), e == T(0) || e == T(-1));\n",
      95,
      v230,
      "else\n",
      6,
      v230,
      "    return select(T(31 - clz(e)), T(-1), e == T(0));\n",
      54);
    int v231 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v231;
    int v232 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v711) = v231;
    unint64_t v702 = "}\n";
    LODWORD(v703) = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v232, (int *)&v711, (uint64_t)&v702);
    uint64_t v4 = *((void *)this + 6);
  }
  if (*(unsigned char *)(v4 + 22))
  {
    double v233 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v705) = *((_DWORD *)this + 14);
    unint64_t v702 = "template<typename T>\n";
    LODWORD(v703) = 21;
    LODWORD(v710) = v705;
    v711 = "T __wgslFirstTrailingBit(T e)\n";
    int v712 = 30;
    LODWORD(v707) = v705;
    unint64_t v708 = "{\n";
    int v709 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v233, (int *)&v705, (unint64_t *)&v702, (int *)&v710, (unint64_t *)&v711, (int *)&v707, (unint64_t *)&v708);
    int v234 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v234;
    unint64_t v235 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v711) = v234;
    unint64_t v702 = "return select(ctz(e), T(-1), e == T(0));\n";
    LODWORD(v703) = 41;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v235, (int *)&v711, (uint64_t)&v702);
    int v236 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v236;
    unint64_t v237 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v711) = v236;
    unint64_t v702 = "}\n";
    LODWORD(v703) = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v237, (int *)&v711, (uint64_t)&v702);
    uint64_t v4 = *((void *)this + 6);
  }
  if (*(unsigned char *)(v4 + 23))
  {
    uint64_t v238 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v705) = *((_DWORD *)this + 14);
    unint64_t v702 = "template<typename T>\n";
    LODWORD(v703) = 21;
    LODWORD(v710) = v705;
    v711 = "T __wgslSign(T e)\n";
    int v712 = 18;
    LODWORD(v707) = v705;
    unint64_t v708 = "{\n";
    int v709 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v238, (int *)&v705, (unint64_t *)&v702, (int *)&v710, (unint64_t *)&v711, (int *)&v707, (unint64_t *)&v708);
    int v239 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v239;
    int v240 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v711) = v239;
    unint64_t v702 = "return select(select(T(-1), T(1), e > 0), T(0), e == 0);\n";
    LODWORD(v703) = 57;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v240, (int *)&v711, (uint64_t)&v702);
    int v241 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v241;
    int v242 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v711) = v241;
    unint64_t v702 = "}\n";
    LODWORD(v703) = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v242, (int *)&v711, (uint64_t)&v702);
    uint64_t v4 = *((void *)this + 6);
  }
  if (*(unsigned char *)(v4 + 29))
  {
    int v243 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v705) = *((_DWORD *)this + 14);
    unint64_t v702 = "template<typename T>\n";
    LODWORD(v703) = 21;
    LODWORD(v710) = v705;
    v711 = "T __wgslExtractBits(T e, uint offset, uint count)\n";
    int v712 = 50;
    LODWORD(v707) = v705;
    unint64_t v708 = "{\n";
    int v709 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v243, (int *)&v705, (unint64_t *)&v702, (int *)&v710, (unint64_t *)&v711, (int *)&v707, (unint64_t *)&v708);
    int v244 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v244;
    unint64_t v245 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v705) = v244;
    unint64_t v702 = "auto o = min(offset, 32u);\n";
    LODWORD(v703) = 27;
    LODWORD(v710) = v244;
    v711 = "auto c = min(count, 32u - o);\n";
    int v712 = 30;
    LODWORD(v707) = v244;
    unint64_t v708 = "return extract_bits(e, o, c);\n";
    int v709 = 30;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v245, (int *)&v705, (unint64_t *)&v702, (int *)&v710, (unint64_t *)&v711, (int *)&v707, (unint64_t *)&v708);
    int v246 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v246;
    unint64_t v247 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v711) = v246;
    unint64_t v702 = "}\n";
    LODWORD(v703) = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v247, (int *)&v711, (uint64_t)&v702);
    uint64_t v4 = *((void *)this + 6);
  }
  if (*(unsigned char *)(v4 + 31))
  {
    uint64_t v248 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v705) = *((_DWORD *)this + 14);
    unint64_t v702 = "template<typename T>\n";
    LODWORD(v703) = 21;
    LODWORD(v710) = v705;
    v711 = "static T __attribute(always_inline) __wgslMin(T a, T b)\n";
    int v712 = 58;
    LODWORD(v707) = v705;
    unint64_t v708 = "{\n";
    int v709 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v248, (int *)&v705, (unint64_t *)&v702, (int *)&v710, (unint64_t *)&v711, (int *)&v707, (unint64_t *)&v708);
    int v249 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v249;
    unint64_t v250 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v705) = v249;
    v702 = "volatile T va_list va = a;\n";
    LODWORD(v703) = 19;
    LODWORD(v710) = v249;
    v711 = "volatile T vb = b;\n";
    int v712 = 19;
    LODWORD(v707) = v249;
    unint64_t v708 = "return min(va, vb);\n";
    int v709 = 20;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v250, (int *)&v705, (unint64_t *)&v702, (int *)&v710, (unint64_t *)&v711, (int *)&v707, (unint64_t *)&v708);
    int v251 = *((_DWORD *)this + 14) - 1;
    *((_DWORD *)this + 14) = v251;
    int v252 = (WTF::StringBuilder *)*((void *)this + 5);
    LODWORD(v711) = v251;
    unint64_t v702 = "}\n\n";
    LODWORD(v703) = 3;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v252, (int *)&v711, (uint64_t)&v702);
    uint64_t v4 = *((void *)this + 6);
  }
  *(unsigned char *)(v4 + 30) = 0;
  uint64_t v253 = *(unsigned int *)(v4 + 76);
  if (v253)
  {
    uint64_t v254 = *(void **)(v4 + 64);
    char v255 = &v254[v253];
    do
    {
      uint64_t v256 = *v254;
      if ((*(unsigned int (**)(void))(*(void *)*v254 + 16))(*v254) == 56)
      {
        (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *, uint64_t))(*(void *)this + 64))(this, v256);
        goto LABEL_115;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v256 + 16))(v256) == 62 && *(unsigned char *)(v256 + 128) == 2)
      {
        double v257 = *(WTF::StringImpl **)(v256 + 80);
        if (v257) {
          *(_DWORD *)v257 += 2;
        }
        unsigned int v258 = *(WTF::String **)(v256 + 172);
        if (((unint64_t)v258 & 0xFF00000000) != 0)
        {
          WTF::String::number(v258);
          unsigned int v259 = v702;
          unint64_t v702 = 0;
          if (v257)
          {
            if (*(_DWORD *)v257 == 2)
            {
              WTF::StringImpl::destroy();
              unint64_t v260 = v702;
              unint64_t v702 = 0;
              if (v260)
              {
                if (*(_DWORD *)v260 == 2) {
                  WTF::StringImpl::destroy();
                }
                else {
                  *(_DWORD *)v260 -= 2;
                }
              }
            }
            else
            {
              *(_DWORD *)v257 -= 2;
            }
          }
          double v257 = (WTF::StringImpl *)v259;
        }
        int v261 = (uint64_t *)*((void *)this + 14);
        uint64_t v262 = *v261;
        if (!*v261)
        {
          uint64_t v266 = 0;
          goto LABEL_143;
        }
        int v263 = *(_DWORD *)(v262 - 8);
        unsigned int v264 = *((_DWORD *)v257 + 4);
        if (v264 < 0x100) {
          unsigned int v265 = WTF::StringImpl::hashSlowCase(v257);
        }
        else {
          unsigned int v265 = v264 >> 8;
        }
        for (int i = 0; ; v265 = i + v268)
        {
          uint64_t v268 = v265 & v263;
          uint64_t v269 = *(WTF **)(v262 + 32 * v268);
          if (v269 != (WTF *)-1)
          {
            if (!v269)
            {
              uint64_t v266 = *v261;
              if (*v261) {
                v266 += 32 * *(unsigned int *)(v266 - 4);
              }
LABEL_143:
              uint64_t v270 = **((void **)this + 14);
              if (v270) {
                v270 += 32 * *(unsigned int *)(v270 - 4);
              }
              if (v270 != v266)
              {
                int v271 = (WTF::StringImpl **)(v256 + 48);
                int v272 = (const WTF::StringImpl *)(v266 + 8);
                goto LABEL_147;
              }
              uint64_t v273 = *(void *)(v256 + 120);
              if (v273 && *(unsigned char *)(v273 + 56))
              {
                int v272 = (const WTF::StringImpl *)(v273 + 32);
                int v271 = (WTF::StringImpl **)(v256 + 48);
LABEL_147:
                WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::add<WGSL::ConstantValue const&>((uint64_t *)this + 15, v271, v272, (uint64_t)&v702);
              }
              if (v257)
              {
                if (*(_DWORD *)v257 == 2) {
                  WTF::StringImpl::destroy();
                }
                else {
                  *(_DWORD *)v257 -= 2;
                }
              }
              break;
            }
            if (WTF::equal(v269, v257, a3))
            {
              uint64_t v266 = v262 + 32 * v268;
              goto LABEL_143;
            }
          }
          ++i;
        }
      }
LABEL_115:
      ++v254;
    }
    while (v254 != v255);
    uint64_t v4 = *((void *)this + 6);
    uint64_t v274 = *(unsigned int *)(v4 + 76);
    if (!v274) {
      goto LABEL_655;
    }
    unint64_t v275 = *(void **)(v4 + 64);
    unsigned int v276 = &v275[v274];
    long long v700 = xmmword_1826CF3E0;
    int8x16_t v701 = 0u;
    size_t v699 = v276;
    while (1)
    {
      uint64_t v277 = *v275;
      if ((*(unsigned int (**)(void))(*(void *)*v275 + 16))(*v275) == 56
        && *(unsigned char *)(v277 + 88) == 7
        && WGSL::Type::isConstructible(*(WGSL::Type **)(v277 + 112)))
      {
        break;
      }
LABEL_158:
      if (++v275 == v276)
      {
        uint64_t v4 = *((void *)this + 6);
        goto LABEL_655;
      }
    }
    uint64_t v278 = *(void *)(v277 + 96);
    long long v703 = *(_OWORD *)(v278 + 32);
    unint64_t v702 = (const char *)off_1ECABC030;
    uint64_t v279 = *(void *)(v278 + 48);
    if (v279) {
      *(_DWORD *)v279 += 2;
    }
    uint64_t v704 = v279;
    unsigned int v280 = (WTF::StringBuilder *)*((void *)this + 5);
    uint64_t v281 = *(void *)(v277 + 48);
    size_t v282 = (4 * *((_DWORD *)this + 14));
    uint64_t v283 = *((void *)v280 + 1);
    if ((v283 || (uint64_t v283 = *(void *)v280) != 0) && (*(unsigned char *)(v283 + 16) & 4) == 0
      || v281 && (*(unsigned char *)(v281 + 16) & 4) == 0
      || v279 && (*(unsigned char *)(v279 + 16) & 4) == 0)
    {
      unint64_t v284 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v280);
      if (v284)
      {
        unint64_t v285 = v284;
        if (v282)
        {
          memset_pattern16(v284, asc_1826CF510, 2 * v282);
          size_t v286 = v282;
          long long v287 = v700;
          int8x16_t v288 = v701;
          uint64_t v289 = &v285[2 * v282];
          if (v281) {
            goto LABEL_174;
          }
        }
        else
        {
          size_t v286 = 0;
          long long v287 = v700;
          int8x16_t v288 = v701;
          uint64_t v289 = v284;
          if (v281)
          {
LABEL_174:
            uint64_t v290 = *(int8x16_t **)(v281 + 8);
            uint64_t v291 = *(unsigned int *)(v281 + 4);
            if ((*(unsigned char *)(v281 + 16) & 4) == 0)
            {
              if (v291)
              {
                if (v291 == 1)
                {
                  *(_WORD *)uint64_t v289 = v290->i16[0];
                }
                else
                {
                  memcpy(v289, v290, 2 * v291);
                  long long v287 = v700;
                  int8x16_t v288 = v701;
                }
              }
LABEL_212:
              uint64_t v301 = *(unsigned int *)(v281 + 4);
              uint64_t v320 = &v289[2 * v301];
              *(_OWORD *)uint64_t v320 = xmmword_1826CF3D0;
              unint64_t v302 = v320 + 16;
              long long v700 = v287;
              int8x16_t v701 = v288;
              if (v279)
              {
LABEL_213:
                unint64_t v321 = *(int8x16_t **)(v279 + 8);
                uint64_t v322 = *(unsigned int *)(v279 + 4);
                if ((*(unsigned char *)(v279 + 16) & 4) == 0)
                {
                  if (v322)
                  {
                    if (v322 == 1) {
                      _WORD *v302 = v321->i16[0];
                    }
                    else {
                      memcpy(v302, v321, 2 * v322);
                    }
                  }
                  goto LABEL_235;
                }
                if (v322 < 0x40)
                {
                  unint64_t v323 = (unint64_t)v302;
                  int v330 = &v302[v322];
                  if (v302 == v330)
                  {
LABEL_235:
                    uint64_t v303 = *(unsigned int *)(v279 + 4);
                    goto LABEL_236;
                  }
                }
                else
                {
                  unint64_t v323 = (unint64_t)&v302[v322 & 0xFFFFFFC0];
                  unint64_t v324 = (char *)v302;
                  do
                  {
                    v722.val[0] = *v321;
                    int8x16_t v325 = v321[1];
                    v735.val[0] = v321[2];
                    int8x16_t v326 = v321[3];
                    v321 += 4;
                    v748.val[0] = v326;
                    v735.val[1] = v288;
                    v754.val[0] = v325;
                    v722.val[1] = v288;
                    unint64_t v327 = v324;
                    vst2q_s8(v327, v722);
                    v327 += 32;
                    v748.val[1] = v288;
                    v754.val[1] = v288;
                    vst2q_s8(v327, v754);
                    unint64_t v328 = v324 + 64;
                    vst2q_s8(v328, v735);
                    int v329 = v324 + 96;
                    v324 += 128;
                    vst2q_s8(v329, v748);
                  }
                  while (v324 != (char *)v323);
                  int v330 = &v302[v322];
                  if ((_WORD *)v323 == v330) {
                    goto LABEL_235;
                  }
                }
                unint64_t v331 = (unint64_t)&v285[2 * v301 + 2 * v322 + 2 * v286 - v323];
                unint64_t v332 = v331 + 14;
                if (v331 >= 0xFFFFFFFFFFFFFFF2
                  || (v323 < (unint64_t)v321->u64 + (v332 >> 1) + 1
                    ? (BOOL v333 = (unint64_t)v321 >= v323 + (v332 & 0xFFFFFFFFFFFFFFFELL) + 2)
                    : (BOOL v333 = 1),
                      !v333))
                {
                  unint64_t v336 = (_WORD *)v323;
                  unint64_t v337 = v321;
                  goto LABEL_232;
                }
                uint64_t v334 = (v332 >> 1) + 1;
                if (v332 >= 0x3E)
                {
                  unint64_t v335 = v334 & 0xFFFFFFFFFFFFFFE0;
                  uint64_t v572 = (uint8x8_t *)&v321[1];
                  uint64_t v573 = (uint16x8_t *)(v323 + 32);
                  unint64_t v574 = v334 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    uint8x16_t v575 = *(uint8x16_t *)v572[-2].i8;
                    uint16x8_t v576 = vmovl_u8(*v572);
                    uint16x8_t v577 = vmovl_high_u8(*(uint8x16_t *)v572->i8);
                    v573[-2] = vmovl_u8(*(uint8x8_t *)v575.i8);
                    v573[-1] = vmovl_high_u8(v575);
                    *uint64_t v573 = v576;
                    v573[1] = v577;
                    v573 += 4;
                    v572 += 4;
                    v574 -= 32;
                  }
                  while (v574);
                  if (v334 == v335) {
                    goto LABEL_235;
                  }
                  if ((v334 & 0x18) == 0)
                  {
                    unint64_t v337 = (int8x16_t *)((char *)v321 + v335);
                    unint64_t v336 = (_WORD *)(v323 + 2 * v335);
                    do
                    {
LABEL_232:
                      __int16 v338 = v337->u8[0];
                      unint64_t v337 = (int8x16_t *)((char *)v337 + 1);
                      *v336++ = v338;
                    }
                    while (v336 != v330);
                    goto LABEL_235;
                  }
                }
                else
                {
                  unint64_t v335 = 0;
                }
                unint64_t v336 = (_WORD *)(v323 + 2 * (v334 & 0xFFFFFFFFFFFFFFF8));
                unint64_t v337 = (int8x16_t *)((char *)v321 + (v334 & 0xFFFFFFFFFFFFFFF8));
                unint64_t v578 = (uint8x8_t *)&v321->i8[v335];
                unint64_t v579 = (uint16x8_t *)(v323 + 2 * v335);
                unint64_t v580 = v335 - (v334 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint8x8_t v581 = *v578++;
                  *v579++ = vmovl_u8(v581);
                  v580 += 8;
                }
                while (v580);
                if (v334 == (v334 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_235;
                }
                goto LABEL_232;
              }
LABEL_188:
              uint64_t v303 = 0;
LABEL_236:
              uint64_t v339 = &v302[v303];
              *(_OWORD *)uint64_t v339 = xmmword_1826CF3E0;
              *((_DWORD *)v339 + 4) = 2687076;
              v339[10] = 10;
              uint64_t v340 = v339 + 11;
              if (v282) {
                memset_pattern16(v339 + 11, asc_1826CF510, 2 * v282);
              }
              else {
                size_t v282 = 0;
              }
              *(_DWORD *)&v340[v282] = 655483;
              goto LABEL_284;
            }
            if (v291 < 0x40)
            {
              unint64_t v304 = (unint64_t)v289;
              unint64_t v311 = &v289[2 * v291];
              if (v289 == v311) {
                goto LABEL_212;
              }
            }
            else
            {
              unint64_t v304 = (unint64_t)&v289[2 * (v291 & 0xFFFFFFC0)];
              uint64_t v305 = v289;
              do
              {
                v721.val[0] = *v290;
                int8x16_t v306 = v290[1];
                v734.val[0] = v290[2];
                long long v307 = (__int128)v290[3];
                v290 += 4;
                long long v287 = v307;
                v734.val[1] = v288;
                v747.val[0] = v306;
                v721.val[1] = v288;
                uint64_t v308 = v305;
                vst2q_s8(v308, v721);
                v308 += 32;
                v747.val[1] = v288;
                vst2q_s8(v308, v747);
                v309 = v305 + 64;
                vst2q_s8(v309, v734);
                uint64_t v310 = v305 + 96;
                vst2q_s8(v310, *(int8x16x2_t *)&v287);
                v305 += 128;
              }
              while (v305 != (char *)v304);
              unint64_t v311 = &v289[2 * v291];
              if ((char *)v304 == v311) {
                goto LABEL_212;
              }
            }
            unint64_t v312 = (unint64_t)&v285[2 * v291 + 2 * v286 - v304 - 2];
            if (v312 < 0xE
              || (v304 < (unint64_t)v290->u64 + (v312 >> 1) + 1
                ? (BOOL v313 = (unint64_t)v290 >= v304 + (v312 & 0xFFFFFFFFFFFFFFFELL) + 2)
                : (BOOL v313 = 1),
                  !v313))
            {
              uint64_t v316 = (char *)v304;
              uint64_t v317 = v290;
              goto LABEL_204;
            }
            uint64_t v314 = (v312 >> 1) + 1;
            if (v312 >= 0x3E)
            {
              unint64_t v315 = v314 & 0xFFFFFFFFFFFFFFE0;
              uint64_t v562 = (uint8x8_t *)&v290[1];
              uint64_t v563 = (uint16x8_t *)(v304 + 32);
              unint64_t v564 = v314 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                uint8x16_t v565 = *(uint8x16_t *)v562[-2].i8;
                uint16x8_t v566 = vmovl_u8(*v562);
                uint16x8_t v567 = vmovl_high_u8(*(uint8x16_t *)v562->i8);
                v563[-2] = vmovl_u8(*(uint8x8_t *)v565.i8);
                v563[-1] = vmovl_high_u8(v565);
                *uint64_t v563 = v566;
                v563[1] = v567;
                v563 += 4;
                v562 += 4;
                v564 -= 32;
              }
              while (v564);
              if (v314 == v315) {
                goto LABEL_212;
              }
              if ((v314 & 0x18) == 0)
              {
                uint64_t v317 = (int8x16_t *)((char *)v290 + v315);
                uint64_t v316 = (char *)(v304 + 2 * v315);
                goto LABEL_204;
              }
            }
            else
            {
              unint64_t v315 = 0;
            }
            uint64_t v316 = (char *)(v304 + 2 * (v314 & 0xFFFFFFFFFFFFFFF8));
            uint64_t v317 = (int8x16_t *)((char *)v290 + (v314 & 0xFFFFFFFFFFFFFFF8));
            uint64_t v568 = (uint8x8_t *)&v290->i8[v315];
            uint64_t v569 = (uint16x8_t *)(v304 + 2 * v315);
            unint64_t v570 = v315 - (v314 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint8x8_t v571 = *v568++;
              *v569++ = vmovl_u8(v571);
              v570 += 8;
            }
            while (v570);
            if (v314 == (v314 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_212;
            }
            do
            {
LABEL_204:
              __int16 v318 = v317->u8[0];
              uint64_t v317 = (int8x16_t *)((char *)v317 + 1);
              *(_WORD *)uint64_t v316 = v318;
              v316 += 2;
            }
            while (v316 != v311);
            goto LABEL_212;
          }
        }
        uint64_t v301 = 0;
        *(_OWORD *)uint64_t v289 = xmmword_1826CF3D0;
        unint64_t v302 = v289 + 16;
        long long v700 = v287;
        int8x16_t v701 = v288;
        if (v279) {
          goto LABEL_213;
        }
        goto LABEL_188;
      }
LABEL_284:
      int v367 = *((_DWORD *)this + 14) + 1;
      *((_DWORD *)this + 14) = v367;
      int v368 = (WTF::StringBuilder *)*((void *)this + 5);
      uint64_t v369 = *(void *)(v277 + 48);
      size_t v370 = (4 * v367);
      uint64_t v371 = *((void *)v368 + 1);
      if ((v371 || (uint64_t v371 = *(void *)v368) != 0) && (*(unsigned char *)(v371 + 16) & 4) == 0
        || v369 && (*(unsigned char *)(v369 + 16) & 4) == 0)
      {
        uint64_t v372 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v368);
        if (!v372) {
          goto LABEL_332;
        }
        int v373 = v372;
        if (v370)
        {
          memset_pattern16(v372, asc_1826CF510, 2 * v370);
          uint64_t v374 = &v373[2 * v370];
          int8x16_t v375 = v701;
          if (v369) {
            goto LABEL_292;
          }
        }
        else
        {
          size_t v370 = 0;
          uint64_t v374 = v372;
          int8x16_t v375 = v701;
          if (v369)
          {
LABEL_292:
            uint64_t v376 = *(int8x16_t **)(v369 + 8);
            uint64_t v377 = *(unsigned int *)(v369 + 4);
            if ((*(unsigned char *)(v369 + 16) & 4) == 0)
            {
              if (v377)
              {
                if (v377 == 1) {
                  *(_WORD *)uint64_t v374 = v376->i16[0];
                }
                else {
                  memcpy(v374, v376, 2 * v377);
                }
              }
              goto LABEL_330;
            }
            if (v377 < 0x40)
            {
              unint64_t v388 = (unint64_t)v374;
              uint64_t v395 = &v374[2 * v377];
              if (v374 == v395)
              {
LABEL_330:
                uint64_t v387 = *(unsigned int *)(v369 + 4);
                goto LABEL_331;
              }
            }
            else
            {
              unint64_t v388 = (unint64_t)&v374[2 * (v377 & 0xFFFFFFC0)];
              uint64_t v389 = v374;
              do
              {
                v723.val[0] = *v376;
                int8x16_t v390 = v376[1];
                v736.val[0] = v376[2];
                int8x16_t v391 = v376[3];
                v376 += 4;
                v749.val[0] = v391;
                v736.val[1] = v375;
                v755.val[0] = v390;
                v723.val[1] = v375;
                uint64_t v392 = v389;
                vst2q_s8(v392, v723);
                v392 += 32;
                v749.val[1] = v375;
                v755.val[1] = v375;
                vst2q_s8(v392, v755);
                uint64_t v393 = v389 + 64;
                vst2q_s8(v393, v736);
                uint64_t v394 = v389 + 96;
                v389 += 128;
                vst2q_s8(v394, v749);
              }
              while (v389 != (char *)v388);
              uint64_t v395 = &v374[2 * v377];
              if ((char *)v388 == v395) {
                goto LABEL_330;
              }
            }
            unint64_t v397 = (unint64_t)&v373[2 * v377 + 2 * v370 - v388 - 2];
            if (v397 < 0xE
              || (v388 < (unint64_t)v376->u64 + (v397 >> 1) + 1
                ? (BOOL v398 = (unint64_t)v376 >= v388 + (v397 & 0xFFFFFFFFFFFFFFFELL) + 2)
                : (BOOL v398 = 1),
                  !v398))
            {
              unint64_t v401 = (char *)v388;
              uint64_t v402 = v376;
              goto LABEL_327;
            }
            uint64_t v399 = (v397 >> 1) + 1;
            if (v397 >= 0x3E)
            {
              unint64_t v400 = v399 & 0xFFFFFFFFFFFFFFE0;
              unint64_t v602 = (uint8x8_t *)&v376[1];
              unint64_t v603 = (uint16x8_t *)(v388 + 32);
              unint64_t v604 = v399 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                uint8x16_t v605 = *(uint8x16_t *)v602[-2].i8;
                uint16x8_t v606 = vmovl_u8(*v602);
                uint16x8_t v607 = vmovl_high_u8(*(uint8x16_t *)v602->i8);
                v603[-2] = vmovl_u8(*(uint8x8_t *)v605.i8);
                v603[-1] = vmovl_high_u8(v605);
                *unint64_t v603 = v606;
                v603[1] = v607;
                v603 += 4;
                v602 += 4;
                v604 -= 32;
              }
              while (v604);
              if (v399 == v400) {
                goto LABEL_330;
              }
              if ((v399 & 0x18) == 0)
              {
                uint64_t v402 = (int8x16_t *)((char *)v376 + v400);
                unint64_t v401 = (char *)(v388 + 2 * v400);
                do
                {
LABEL_327:
                  __int16 v403 = v402->u8[0];
                  uint64_t v402 = (int8x16_t *)((char *)v402 + 1);
                  *(_WORD *)unint64_t v401 = v403;
                  v401 += 2;
                }
                while (v401 != v395);
                goto LABEL_330;
              }
            }
            else
            {
              unint64_t v400 = 0;
            }
            unint64_t v401 = (char *)(v388 + 2 * (v399 & 0xFFFFFFFFFFFFFFF8));
            uint64_t v402 = (int8x16_t *)((char *)v376 + (v399 & 0xFFFFFFFFFFFFFFF8));
            v608 = (uint8x8_t *)&v376->i8[v400];
            v609 = (uint16x8_t *)(v388 + 2 * v400);
            unint64_t v610 = v400 - (v399 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint8x8_t v611 = *v608++;
              *v609++ = vmovl_u8(v611);
              v610 += 8;
            }
            while (v610);
            if (v399 == (v399 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_330;
            }
            goto LABEL_327;
          }
        }
        uint64_t v387 = 0;
LABEL_331:
        uint64_t v404 = &v374[2 * v387];
        *(_OWORD *)uint64_t v404 = xmmword_1826CF3F0;
        *((_WORD *)v404 + 8) = 10;
LABEL_332:
        uint64_t v405 = *(unsigned int *)(v277 + 84);
        if (!v405) {
          goto LABEL_353;
        }
        goto LABEL_333;
      }
      uint64_t v378 = (char *)MEMORY[0x18530ACF0]();
      if (!v378) {
        goto LABEL_332;
      }
      uint64_t v379 = v378;
      if (v370)
      {
        memset(v378, 32, v370);
        unint64_t v380 = &v379[v370];
        if (v369) {
          goto LABEL_299;
        }
      }
      else
      {
        size_t v370 = 0;
        unint64_t v380 = v378;
        if (v369)
        {
LABEL_299:
          uint64_t v381 = *(int8x16_t **)(v369 + 8);
          size_t v382 = *(unsigned int *)(v369 + 4);
          if ((*(unsigned char *)(v369 + 16) & 4) != 0)
          {
            if (v382)
            {
              if (v382 == 1) {
                *unint64_t v380 = v381->i8[0];
              }
              else {
                memcpy(v380, v381, v382);
              }
            }
            goto LABEL_351;
          }
          if (v382 < 0x10)
          {
            unint64_t v383 = (unint64_t)v380;
            uint64_t v386 = &v380[v382];
            if (v380 == &v380[v382])
            {
LABEL_351:
              uint64_t v396 = *(unsigned int *)(v369 + 4);
LABEL_352:
              uint64_t v418 = &v380[v396];
              *(void *)uint64_t v418 = *(void *)" packed;\n";
              v418[8] = 10;
              uint64_t v405 = *(unsigned int *)(v277 + 84);
              if (!v405) {
                goto LABEL_353;
              }
LABEL_333:
              uint64_t v406 = *(uint64_t **)(v277 + 72);
              uint64_t v407 = 8 * v405;
              do
              {
                uint64_t v408 = *v406;
                char v409 = WGSL::Type::packing(*(WGSL::Type **)(*(void *)(*v406 + 104) + 24));
                uint64_t v410 = (WTF::StringBuilder *)*((void *)this + 5);
                if ((v409 & 0xC) != 0)
                {
                  v713[0] = *((_DWORD *)this + 14);
                  int v712 = 7;
                  uint64_t v710 = *(void *)(v408 + 48);
                  v711 = "packed.";
                  uint64_t v707 = v710;
                  unint64_t v708 = " = __pack(unpacked.";
                  int v709 = 19;
                  uint16x8_t v705 = ");\n";
                  int v706 = 3;
                }
                else
                {
                  v713[0] = *((_DWORD *)this + 14);
                  int v712 = 7;
                  uint64_t v710 = *(void *)(v408 + 48);
                  v711 = "packed.";
                  uint64_t v707 = v710;
                  unint64_t v708 = " = unpacked.";
                  int v709 = 12;
                  uint16x8_t v705 = ";\n";
                  int v706 = 2;
                }
                WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v410, v713, (uint64_t)&v711, &v710, (unint64_t *)&v708, &v707, (unint64_t *)&v705);
                ++v406;
                v407 -= 8;
              }
              while (v407);
LABEL_353:
              uint64_t v419 = (WTF::StringBuilder *)*((void *)this + 5);
              LODWORD(v708) = *((_DWORD *)this + 14);
              v711 = "return packed;\n";
              int v712 = 15;
              WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v419, (int *)&v708, (uint64_t)&v711);
              int v420 = *((_DWORD *)this + 14) - 1;
              *((_DWORD *)this + 14) = v420;
              uint64_t v421 = (WTF::StringBuilder *)*((void *)this + 5);
              uint64_t v422 = v704;
              uint64_t v423 = *(void *)(v277 + 48);
              size_t v424 = (4 * v420);
              uint64_t v425 = *((void *)v421 + 1);
              if ((v425 || (uint64_t v425 = *(void *)v421) != 0) && (*(unsigned char *)(v425 + 16) & 4) == 0
                || v704 && (*(unsigned char *)(v704 + 16) & 4) == 0
                || v423 && (*(unsigned char *)(v423 + 16) & 4) == 0)
              {
                uint64_t v426 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v421);
                if (v426)
                {
                  uint64_t v427 = v426;
                  if (v424)
                  {
                    memset_pattern16(v426, asc_1826CF510, 2 * v424);
                    v427 += v424;
                    *(_DWORD *)uint64_t v427 = 655485;
                    v427[2] = 10;
                    memset_pattern16(v427 + 3, asc_1826CF510, 2 * v424);
                    size_t v428 = v424;
                    int8x16_t v429 = v701;
                    uint64_t v430 = &v427[v424 + 3];
                    if (v422) {
                      goto LABEL_363;
                    }
                  }
                  else
                  {
                    size_t v428 = 0;
                    *(_DWORD *)uint64_t v426 = 655485;
                    v426[2] = 10;
                    int8x16_t v429 = v701;
                    uint64_t v430 = v426 + 3;
                    if (v422)
                    {
LABEL_363:
                      uint64_t v431 = *(int8x16_t **)(v422 + 8);
                      uint64_t v432 = *(unsigned int *)(v422 + 4);
                      if ((*(unsigned char *)(v422 + 16) & 4) == 0)
                      {
                        if (v432)
                        {
                          if (v432 == 1)
                          {
                            *uint64_t v430 = v431->i16[0];
                          }
                          else
                          {
                            memcpy(v430, v431, 2 * v432);
                            int8x16_t v429 = v701;
                          }
                        }
                        goto LABEL_400;
                      }
                      if (v432 < 0x40)
                      {
                        unint64_t v444 = (unint64_t)v430;
                        uint64_t v451 = &v430[v432];
                        if (v430 == v451)
                        {
LABEL_400:
                          uint64_t v443 = *(unsigned int *)(v422 + 4);
LABEL_401:
                          uint64_t v460 = &v430[v443];
                          *(_OWORD *)uint64_t v460 = xmmword_1826CF400;
                          *((_DWORD *)v460 + 4) = 2621547;
                          int v461 = v460 + 10;
                          if (!v423)
                          {
                            uint64_t v464 = 0;
LABEL_426:
                            unint64_t v480 = &v461[v464];
                            *(_OWORD *)unint64_t v480 = xmmword_1826CF410;
                            v480[8] = 10;
                            int v481 = v480 + 9;
                            if (v424) {
                              memset_pattern16(v480 + 9, asc_1826CF510, 2 * v424);
                            }
                            else {
                              size_t v424 = 0;
                            }
                            *(_DWORD *)&v481[v424] = 655483;
                            goto LABEL_474;
                          }
                          int v462 = *(int8x16_t **)(v423 + 8);
                          uint64_t v463 = *(unsigned int *)(v423 + 4);
                          if ((*(unsigned char *)(v423 + 16) & 4) == 0)
                          {
                            if (v463)
                            {
                              if (v463 == 1) {
                                _WORD *v461 = v462->i16[0];
                              }
                              else {
                                memcpy(v461, v462, 2 * v463);
                              }
                            }
                            goto LABEL_425;
                          }
                          if (v463 < 0x40)
                          {
                            unint64_t v465 = (unint64_t)(v460 + 10);
                            int v472 = &v461[v463];
                            if (v461 == v472)
                            {
LABEL_425:
                              uint64_t v464 = *(unsigned int *)(v423 + 4);
                              goto LABEL_426;
                            }
                          }
                          else
                          {
                            unint64_t v465 = (unint64_t)&v461[v463 & 0xFFFFFFC0];
                            int v466 = (char *)(v460 + 10);
                            do
                            {
                              v725.val[0] = *v462;
                              int8x16_t v467 = v462[1];
                              v738.val[0] = v462[2];
                              int8x16_t v468 = v462[3];
                              v462 += 4;
                              v751.val[0] = v468;
                              v738.val[1] = v429;
                              v757.val[0] = v467;
                              v725.val[1] = v429;
                              int v469 = v466;
                              vst2q_s8(v469, v725);
                              v469 += 32;
                              v751.val[1] = v429;
                              v757.val[1] = v429;
                              vst2q_s8(v469, v757);
                              int v470 = v466 + 64;
                              vst2q_s8(v470, v738);
                              int v471 = v466 + 96;
                              v466 += 128;
                              vst2q_s8(v471, v751);
                            }
                            while (v466 != (char *)v465);
                            int v472 = &v461[v463];
                            if ((_WORD *)v465 == v472) {
                              goto LABEL_425;
                            }
                          }
                          unint64_t v473 = (unint64_t)&v427[v443 + 12 + v463 + v428] - v465;
                          if (v473 < 0xE
                            || (v465 < (unint64_t)v462->u64 + (v473 >> 1) + 1
                              ? (BOOL v474 = (unint64_t)v462 >= v465 + (v473 & 0xFFFFFFFFFFFFFFFELL) + 2)
                              : (BOOL v474 = 1),
                                !v474))
                          {
                            uint64_t v477 = (_WORD *)v465;
                            int v478 = v462;
                            goto LABEL_422;
                          }
                          uint64_t v475 = (v473 >> 1) + 1;
                          if (v473 >= 0x3E)
                          {
                            unint64_t v476 = v475 & 0xFFFFFFFFFFFFFFE0;
                            int v592 = (uint8x8_t *)&v462[1];
                            int v593 = (uint16x8_t *)(v465 + 32);
                            unint64_t v594 = v475 & 0xFFFFFFFFFFFFFFE0;
                            do
                            {
                              uint8x16_t v595 = *(uint8x16_t *)v592[-2].i8;
                              uint16x8_t v596 = vmovl_u8(*v592);
                              uint16x8_t v597 = vmovl_high_u8(*(uint8x16_t *)v592->i8);
                              v593[-2] = vmovl_u8(*(uint8x8_t *)v595.i8);
                              v593[-1] = vmovl_high_u8(v595);
                              *int v593 = v596;
                              v593[1] = v597;
                              v593 += 4;
                              v592 += 4;
                              v594 -= 32;
                            }
                            while (v594);
                            if (v475 == v476) {
                              goto LABEL_425;
                            }
                            if ((v475 & 0x18) == 0)
                            {
                              int v478 = (int8x16_t *)((char *)v462 + v476);
                              uint64_t v477 = (_WORD *)(v465 + 2 * v476);
                              do
                              {
LABEL_422:
                                __int16 v479 = v478->u8[0];
                                int v478 = (int8x16_t *)((char *)v478 + 1);
                                *v477++ = v479;
                              }
                              while (v477 != v472);
                              goto LABEL_425;
                            }
                          }
                          else
                          {
                            unint64_t v476 = 0;
                          }
                          uint64_t v477 = (_WORD *)(v465 + 2 * (v475 & 0xFFFFFFFFFFFFFFF8));
                          int v478 = (int8x16_t *)((char *)v462 + (v475 & 0xFFFFFFFFFFFFFFF8));
                          uint64_t v598 = (uint8x8_t *)&v462->i8[v476];
                          uint64_t v599 = (uint16x8_t *)(v465 + 2 * v476);
                          unint64_t v600 = v476 - (v475 & 0xFFFFFFFFFFFFFFF8);
                          do
                          {
                            uint8x8_t v601 = *v598++;
                            *v599++ = vmovl_u8(v601);
                            v600 += 8;
                          }
                          while (v600);
                          if (v475 == (v475 & 0xFFFFFFFFFFFFFFF8)) {
                            goto LABEL_425;
                          }
                          goto LABEL_422;
                        }
                      }
                      else
                      {
                        unint64_t v444 = (unint64_t)&v430[v432 & 0xFFFFFFC0];
                        uint64_t v445 = (char *)v430;
                        do
                        {
                          v724.val[0] = *v431;
                          int8x16_t v446 = v431[1];
                          v737.val[0] = v431[2];
                          int8x16_t v447 = v431[3];
                          v431 += 4;
                          v750.val[0] = v447;
                          v737.val[1] = v429;
                          v756.val[0] = v446;
                          v724.val[1] = v429;
                          uint64_t v448 = v445;
                          vst2q_s8(v448, v724);
                          v448 += 32;
                          v750.val[1] = v429;
                          v756.val[1] = v429;
                          vst2q_s8(v448, v756);
                          uint64_t v449 = v445 + 64;
                          vst2q_s8(v449, v737);
                          uint64_t v450 = v445 + 96;
                          v445 += 128;
                          vst2q_s8(v450, v750);
                        }
                        while (v445 != (char *)v444);
                        uint64_t v451 = &v430[v432];
                        if ((_WORD *)v444 == v451) {
                          goto LABEL_400;
                        }
                      }
                      unint64_t v452 = (unint64_t)&v427[v432 + 2 + v428] - v444;
                      if (v452 < 0xE
                        || (v444 < (unint64_t)v431->u64 + (v452 >> 1) + 1
                          ? (BOOL v453 = (unint64_t)v431 >= v444 + (v452 & 0xFFFFFFFFFFFFFFFELL) + 2)
                          : (BOOL v453 = 1),
                            !v453))
                      {
                        unint64_t v456 = (_WORD *)v444;
                        unint64_t v457 = v431;
                        goto LABEL_392;
                      }
                      uint64_t v454 = (v452 >> 1) + 1;
                      if (v452 >= 0x3E)
                      {
                        unint64_t v455 = v454 & 0xFFFFFFFFFFFFFFE0;
                        v582 = (uint8x8_t *)&v431[1];
                        v583 = (uint16x8_t *)(v444 + 32);
                        unint64_t v584 = v454 & 0xFFFFFFFFFFFFFFE0;
                        do
                        {
                          uint8x16_t v585 = *(uint8x16_t *)v582[-2].i8;
                          uint16x8_t v586 = vmovl_u8(*v582);
                          uint16x8_t v587 = vmovl_high_u8(*(uint8x16_t *)v582->i8);
                          v583[-2] = vmovl_u8(*(uint8x8_t *)v585.i8);
                          v583[-1] = vmovl_high_u8(v585);
                          uint16x8_t *v583 = v586;
                          v583[1] = v587;
                          v583 += 4;
                          v582 += 4;
                          v584 -= 32;
                        }
                        while (v584);
                        if (v454 == v455) {
                          goto LABEL_400;
                        }
                        if ((v454 & 0x18) == 0)
                        {
                          unint64_t v457 = (int8x16_t *)((char *)v431 + v455);
                          unint64_t v456 = (_WORD *)(v444 + 2 * v455);
                          do
                          {
LABEL_392:
                            __int16 v458 = v457->u8[0];
                            unint64_t v457 = (int8x16_t *)((char *)v457 + 1);
                            *v456++ = v458;
                          }
                          while (v456 != v451);
                          goto LABEL_400;
                        }
                      }
                      else
                      {
                        unint64_t v455 = 0;
                      }
                      unint64_t v456 = (_WORD *)(v444 + 2 * (v454 & 0xFFFFFFFFFFFFFFF8));
                      unint64_t v457 = (int8x16_t *)((char *)v431 + (v454 & 0xFFFFFFFFFFFFFFF8));
                      int v588 = (uint8x8_t *)&v431->i8[v455];
                      int v589 = (uint16x8_t *)(v444 + 2 * v455);
                      unint64_t v590 = v455 - (v454 & 0xFFFFFFFFFFFFFFF8);
                      do
                      {
                        uint8x8_t v591 = *v588++;
                        *v589++ = vmovl_u8(v591);
                        v590 += 8;
                      }
                      while (v590);
                      if (v454 == (v454 & 0xFFFFFFFFFFFFFFF8)) {
                        goto LABEL_400;
                      }
                      goto LABEL_392;
                    }
                  }
                  uint64_t v443 = 0;
                  goto LABEL_401;
                }
LABEL_474:
                int v506 = *((_DWORD *)this + 14) + 1;
                *((_DWORD *)this + 14) = v506;
                unsigned int v507 = (WTF::StringBuilder *)*((void *)this + 5);
                uint64_t v508 = v704;
                size_t v509 = (4 * v506);
                uint64_t v510 = *((void *)v507 + 1);
                if ((v510 || (uint64_t v510 = *(void *)v507) != 0) && (*(unsigned char *)(v510 + 16) & 4) == 0
                  || v704 && (*(unsigned char *)(v704 + 16) & 4) == 0)
                {
                  uint64_t v511 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v507);
                  if (!v511) {
                    goto LABEL_522;
                  }
                  int v512 = v511;
                  if (v509)
                  {
                    memset_pattern16(v511, asc_1826CF510, 2 * v509);
                    unint64_t v513 = &v512[2 * v509];
                    int8x16_t v514 = v701;
                    if (v508) {
                      goto LABEL_482;
                    }
                  }
                  else
                  {
                    size_t v509 = 0;
                    unint64_t v513 = v511;
                    int8x16_t v514 = v701;
                    if (v508)
                    {
LABEL_482:
                      unint64_t v515 = *(int8x16_t **)(v508 + 8);
                      uint64_t v516 = *(unsigned int *)(v508 + 4);
                      if ((*(unsigned char *)(v508 + 16) & 4) == 0)
                      {
                        if (v516)
                        {
                          if (v516 == 1) {
                            *(_WORD *)unint64_t v513 = v515->i16[0];
                          }
                          else {
                            memcpy(v513, v515, 2 * v516);
                          }
                        }
                        goto LABEL_520;
                      }
                      if (v516 < 0x40)
                      {
                        unint64_t v527 = (unint64_t)v513;
                        uint64_t v534 = &v513[2 * v516];
                        if (v513 == v534)
                        {
LABEL_520:
                          uint64_t v526 = *(unsigned int *)(v508 + 4);
                          goto LABEL_521;
                        }
                      }
                      else
                      {
                        unint64_t v527 = (unint64_t)&v513[2 * (v516 & 0xFFFFFFC0)];
                        uint64_t v528 = v513;
                        do
                        {
                          v726.val[0] = *v515;
                          int8x16_t v529 = v515[1];
                          v739.val[0] = v515[2];
                          int8x16_t v530 = v515[3];
                          v515 += 4;
                          v752.val[0] = v530;
                          v739.val[1] = v514;
                          v758.val[0] = v529;
                          v726.val[1] = v514;
                          int v531 = v528;
                          vst2q_s8(v531, v726);
                          v531 += 32;
                          v752.val[1] = v514;
                          v758.val[1] = v514;
                          vst2q_s8(v531, v758);
                          int v532 = v528 + 64;
                          vst2q_s8(v532, v739);
                          long long v533 = v528 + 96;
                          v528 += 128;
                          vst2q_s8(v533, v752);
                        }
                        while (v528 != (char *)v527);
                        uint64_t v534 = &v513[2 * v516];
                        if ((char *)v527 == v534) {
                          goto LABEL_520;
                        }
                      }
                      unint64_t v536 = (unint64_t)&v512[2 * v516 + 2 * v509 - v527 - 2];
                      if (v536 < 0xE
                        || (v527 < (unint64_t)v515->u64 + (v536 >> 1) + 1
                          ? (BOOL v537 = (unint64_t)v515 >= v527 + (v536 & 0xFFFFFFFFFFFFFFFELL) + 2)
                          : (BOOL v537 = 1),
                            !v537))
                      {
                        uint64_t v540 = (char *)v527;
                        int v541 = v515;
                        goto LABEL_517;
                      }
                      uint64_t v538 = (v536 >> 1) + 1;
                      if (v536 >= 0x3E)
                      {
                        unint64_t v539 = v538 & 0xFFFFFFFFFFFFFFE0;
                        v612 = (uint8x8_t *)&v515[1];
                        v613 = (uint16x8_t *)(v527 + 32);
                        unint64_t v614 = v538 & 0xFFFFFFFFFFFFFFE0;
                        do
                        {
                          uint8x16_t v615 = *(uint8x16_t *)v612[-2].i8;
                          uint16x8_t v616 = vmovl_u8(*v612);
                          uint16x8_t v617 = vmovl_high_u8(*(uint8x16_t *)v612->i8);
                          v613[-2] = vmovl_u8(*(uint8x8_t *)v615.i8);
                          v613[-1] = vmovl_high_u8(v615);
                          uint16x8_t *v613 = v616;
                          v613[1] = v617;
                          v613 += 4;
                          v612 += 4;
                          v614 -= 32;
                        }
                        while (v614);
                        if (v538 == v539) {
                          goto LABEL_520;
                        }
                        if ((v538 & 0x18) == 0)
                        {
                          int v541 = (int8x16_t *)((char *)v515 + v539);
                          uint64_t v540 = (char *)(v527 + 2 * v539);
                          do
                          {
LABEL_517:
                            __int16 v542 = v541->u8[0];
                            int v541 = (int8x16_t *)((char *)v541 + 1);
                            *(_WORD *)uint64_t v540 = v542;
                            v540 += 2;
                          }
                          while (v540 != v534);
                          goto LABEL_520;
                        }
                      }
                      else
                      {
                        unint64_t v539 = 0;
                      }
                      uint64_t v540 = (char *)(v527 + 2 * (v538 & 0xFFFFFFFFFFFFFFF8));
                      int v541 = (int8x16_t *)((char *)v515 + (v538 & 0xFFFFFFFFFFFFFFF8));
                      unint64_t v618 = (uint8x8_t *)&v515->i8[v539];
                      unint64_t v619 = (uint16x8_t *)(v527 + 2 * v539);
                      unint64_t v620 = v539 - (v538 & 0xFFFFFFFFFFFFFFF8);
                      do
                      {
                        uint8x8_t v621 = *v618++;
                        *v619++ = vmovl_u8(v621);
                        v620 += 8;
                      }
                      while (v620);
                      if (v538 == (v538 & 0xFFFFFFFFFFFFFFF8)) {
                        goto LABEL_520;
                      }
                      goto LABEL_517;
                    }
                  }
                  uint64_t v526 = 0;
LABEL_521:
                  uint64_t v543 = &v513[2 * v526];
                  *(_OWORD *)uint64_t v543 = xmmword_1826CF3E0;
                  *((_DWORD *)v543 + 4) = 3866724;
                  *((_WORD *)v543 + 10) = 10;
LABEL_522:
                  uint64_t v544 = *(unsigned int *)(v277 + 84);
                  if (v544) {
                    goto LABEL_523;
                  }
                  goto LABEL_543;
                }
                uint64_t v517 = (char *)MEMORY[0x18530ACF0]();
                if (!v517) {
                  goto LABEL_522;
                }
                int v518 = v517;
                if (v509)
                {
                  memset(v517, 32, v509);
                  uint64_t v519 = &v518[v509];
                  if (v508) {
                    goto LABEL_489;
                  }
                }
                else
                {
                  size_t v509 = 0;
                  uint64_t v519 = v517;
                  if (v508)
                  {
LABEL_489:
                    unsigned int v520 = *(int8x16_t **)(v508 + 8);
                    size_t v521 = *(unsigned int *)(v508 + 4);
                    if ((*(unsigned char *)(v508 + 16) & 4) != 0)
                    {
                      if (v521)
                      {
                        if (v521 == 1) {
                          *uint64_t v519 = v520->i8[0];
                        }
                        else {
                          memcpy(v519, v520, v521);
                        }
                      }
                      goto LABEL_541;
                    }
                    if (v521 < 0x10)
                    {
                      unint64_t v522 = (unint64_t)v519;
                      v525 = &v519[v521];
                      if (v519 == &v519[v521])
                      {
LABEL_541:
                        uint64_t v535 = *(unsigned int *)(v508 + 4);
LABEL_542:
                        v557 = &v519[v535];
                        *(void *)v557 = *(void *)" unpacked;\n";
                        *(_DWORD *)(v557 + 7) = 171664485;
                        uint64_t v544 = *(unsigned int *)(v277 + 84);
                        if (v544)
                        {
LABEL_523:
                          uint64_t v545 = *(uint64_t **)(v277 + 72);
                          uint64_t v546 = 8 * v544;
                          do
                          {
                            uint64_t v547 = *v545;
                            char v548 = WGSL::Type::packing(*(WGSL::Type **)(*(void *)(*v545 + 104) + 24));
                            uint64_t v549 = (WTF::StringBuilder *)*((void *)this + 5);
                            if ((v548 & 0xC) != 0)
                            {
                              v713[0] = *((_DWORD *)this + 14);
                              int v712 = 9;
                              uint64_t v710 = *(void *)(v547 + 48);
                              v711 = "unpacked.";
                              uint64_t v707 = v710;
                              unint64_t v708 = " = __unpack(packed.";
                              int v709 = 19;
                              uint16x8_t v705 = ");\n";
                              int v706 = 3;
                            }
                            else
                            {
                              v713[0] = *((_DWORD *)this + 14);
                              int v712 = 9;
                              uint64_t v710 = *(void *)(v547 + 48);
                              v711 = "unpacked.";
                              uint64_t v707 = v710;
                              unint64_t v708 = " = packed.";
                              int v709 = 10;
                              uint16x8_t v705 = ";\n";
                              int v706 = 2;
                            }
                            WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v549, v713, (uint64_t)&v711, &v710, (unint64_t *)&v708, &v707, (unint64_t *)&v705);
                            ++v545;
                            v546 -= 8;
                          }
                          while (v546);
                        }
LABEL_543:
                        uint64_t v558 = (WTF::StringBuilder *)*((void *)this + 5);
                        LODWORD(v708) = *((_DWORD *)this + 14);
                        v711 = "return unpacked;\n";
                        int v712 = 17;
                        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v558, (int *)&v708, (uint64_t)&v711);
                        int v559 = *((_DWORD *)this + 14) - 1;
                        *((_DWORD *)this + 14) = v559;
                        uint64_t v560 = (WTF::StringBuilder *)*((void *)this + 5);
                        LODWORD(v708) = v559;
                        v711 = "}\n\n";
                        int v712 = 3;
                        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Indentation<4u>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v560, (int *)&v708, (uint64_t)&v711);
                        __int32 v561 = (_DWORD *)v704;
                        unsigned int v276 = v699;
                        unint64_t v702 = (const char *)off_1ECABC030;
                        uint64_t v704 = 0;
                        if (v561)
                        {
                          if (*v561 == 2) {
                            WTF::StringImpl::destroy();
                          }
                          else {
                            *v561 -= 2;
                          }
                        }
                        goto LABEL_158;
                      }
                    }
                    else
                    {
                      unint64_t v522 = (unint64_t)&v519[v521 & 0xFFFFFFF0];
                      unint64_t v523 = (unsigned long long *)v519;
                      do
                      {
                        unsigned long long v524 = (unsigned __int128)vld2q_s8(v520->i8);
                        v520 += 2;
                        *v523++ = v524;
                      }
                      while (v523 != (unsigned long long *)v522);
                      v525 = &v519[v521];
                      if ((char *)v522 == &v519[v521]) {
                        goto LABEL_541;
                      }
                    }
                    size_t v550 = (size_t)&v518[v521 + v509];
                    unint64_t v551 = v550 - v522;
                    if (v550 - v522 < 8
                      || (v522 < (unint64_t)v520 + 2 * v551
                        ? (BOOL v552 = (unint64_t)v520 >= v550)
                        : (BOOL v552 = 1),
                          !v552))
                    {
                      uint64_t v554 = (char *)v522;
                      int v555 = v520;
                      goto LABEL_538;
                    }
                    if (v551 >= 0x20)
                    {
                      unint64_t v553 = v551 & 0xFFFFFFFFFFFFFFE0;
                      unint64_t v633 = v520 + 2;
                      v634 = (int8x16_t *)(v522 + 16);
                      unint64_t v635 = v551 & 0xFFFFFFFFFFFFFFE0;
                      do
                      {
                        int8x16_t v637 = v633[-2];
                        int8x16_t v636 = v633[-1];
                        int8x16_t v639 = *v633;
                        int8x16_t v638 = v633[1];
                        v633 += 4;
                        v634[-1] = vuzp1q_s8(v637, v636);
                        int8x16_t *v634 = vuzp1q_s8(v639, v638);
                        v634 += 2;
                        v635 -= 32;
                      }
                      while (v635);
                      if (v551 == v553) {
                        goto LABEL_541;
                      }
                      if ((v551 & 0x18) == 0)
                      {
                        int v555 = (int8x16_t *)((char *)v520 + 2 * v553);
                        uint64_t v554 = (char *)(v522 + v553);
                        do
                        {
LABEL_538:
                          char v556 = v555->i8[0];
                          int v555 = (int8x16_t *)((char *)v555 + 2);
                          *v554++ = v556;
                        }
                        while (v554 != v525);
                        goto LABEL_541;
                      }
                    }
                    else
                    {
                      unint64_t v553 = 0;
                    }
                    uint64_t v554 = (char *)(v522 + (v551 & 0xFFFFFFFFFFFFFFF8));
                    int v555 = (int8x16_t *)((char *)v520 + 2 * (v551 & 0xFFFFFFFFFFFFFFF8));
                    uint64_t v640 = (int16x8_t *)((char *)v520 + 2 * v553);
                    uint64_t v641 = (int8x8_t *)(v522 + v553);
                    unint64_t v642 = v553 - (v551 & 0xFFFFFFFFFFFFFFF8);
                    do
                    {
                      int16x8_t v643 = *v640++;
                      *v641++ = vmovn_s16(v643);
                      v642 += 8;
                    }
                    while (v642);
                    if (v551 == (v551 & 0xFFFFFFFFFFFFFFF8)) {
                      goto LABEL_541;
                    }
                    goto LABEL_538;
                  }
                }
                uint64_t v535 = 0;
                goto LABEL_542;
              }
              uint64_t v433 = (unsigned char *)MEMORY[0x18530ACF0]();
              if (!v433) {
                goto LABEL_474;
              }
              uint64_t v434 = v433;
              if (v424)
              {
                memset(v433, 32, v424);
                unint64_t v435 = &v434[v424];
                *(_WORD *)unint64_t v435 = 2685;
                v435[2] = 10;
                memset(&v434[v424 + 3], 32, v424);
                size_t v436 = v424;
                __int32 v437 = &v434[v424 + 3 + v424];
                if (v422) {
                  goto LABEL_370;
                }
              }
              else
              {
                size_t v436 = 0;
                v433[2] = 10;
                *(_WORD *)uint64_t v433 = 2685;
                __int32 v437 = v433 + 3;
                if (v422)
                {
LABEL_370:
                  int v438 = *(int8x16_t **)(v422 + 8);
                  size_t v439 = *(unsigned int *)(v422 + 4);
                  if ((*(unsigned char *)(v422 + 16) & 4) != 0)
                  {
                    if (v439)
                    {
                      if (v439 == 1) {
                        *__int32 v437 = v438->i8[0];
                      }
                      else {
                        memcpy(v437, v438, v439);
                      }
                    }
                    goto LABEL_444;
                  }
                  if (v439 < 0x10)
                  {
                    unint64_t v440 = (unint64_t)v437;
                  }
                  else
                  {
                    unint64_t v440 = (unint64_t)&v437[v439 & 0xFFFFFFF0];
                    uint64_t v441 = (unsigned long long *)v437;
                    do
                    {
                      unsigned long long v442 = (unsigned __int128)vld2q_s8(v438->i8);
                      v438 += 2;
                      *v441++ = v442;
                    }
                    while (v441 != (unsigned long long *)v440);
                  }
                  if ((unsigned char *)v440 == &v437[v439])
                  {
LABEL_444:
                    uint64_t v459 = *(unsigned int *)(v422 + 4);
LABEL_445:
                    uint64_t v488 = &v437[v459];
                    *(void *)uint64_t v488 = *(void *)" __unpack(";
                    *((_WORD *)v488 + 4) = 10347;
                    uint64_t v489 = &v437[v459 + 10];
                    if (!v423)
                    {
                      uint64_t v495 = 0;
LABEL_470:
                      uint64_t v504 = &v489[v495];
                      *(void *)uint64_t v504 = *(void *)" packed)\n";
                      v504[8] = 10;
                      int v505 = v504 + 9;
                      if (v424) {
                        memset(v504 + 9, 32, v424);
                      }
                      else {
                        size_t v424 = 0;
                      }
                      *(_WORD *)&v505[v424] = 2683;
                      goto LABEL_474;
                    }
                    uint64_t v490 = *(int8x16_t **)(v423 + 8);
                    size_t v491 = *(unsigned int *)(v423 + 4);
                    if ((*(unsigned char *)(v423 + 16) & 4) != 0)
                    {
                      if (v491)
                      {
                        if (v491 == 1) {
                          *uint64_t v489 = v490->i8[0];
                        }
                        else {
                          memcpy(v489, v490, v491);
                        }
                      }
                      goto LABEL_469;
                    }
                    if (v491 < 0x10)
                    {
                      unint64_t v492 = (unint64_t)v489;
                    }
                    else
                    {
                      unint64_t v492 = (unint64_t)&v489[v491 & 0xFFFFFFF0];
                      int v493 = (unsigned long long *)v489;
                      do
                      {
                        unsigned long long v494 = (unsigned __int128)vld2q_s8(v490->i8);
                        v490 += 2;
                        *v493++ = v494;
                      }
                      while (v493 != (unsigned long long *)v492);
                    }
                    if ((unsigned char *)v492 == &v489[v491])
                    {
LABEL_469:
                      uint64_t v495 = *(unsigned int *)(v423 + 4);
                      goto LABEL_470;
                    }
                    int v496 = &v434[v459];
                    unint64_t v497 = (unint64_t)&v434[2 * v436 + v459 + v491 - v492 + 13];
                    if (v497 < 8
                      || ((size_t v498 = (size_t)&v496[v491],
                           v492 < (unint64_t)&v490[1].u64[1] + 4 * v436 + 2 * v498 - 2 * v492 + 2)
                        ? (BOOL v499 = (unint64_t)v490 >= v498 + 2 * v436 + 13)
                        : (BOOL v499 = 1),
                          !v499))
                    {
                      unsigned int v501 = (unsigned char *)v492;
                      int v502 = v490;
                      goto LABEL_466;
                    }
                    if (v497 >= 0x20)
                    {
                      unint64_t v500 = v497 & 0xFFFFFFFFFFFFFFE0;
                      v677 = v490 + 2;
                      v678 = (int8x16_t *)(v492 + 16);
                      unint64_t v679 = v497 & 0xFFFFFFFFFFFFFFE0;
                      do
                      {
                        int8x16_t v681 = v677[-2];
                        int8x16_t v680 = v677[-1];
                        int8x16_t v683 = *v677;
                        int8x16_t v682 = v677[1];
                        v677 += 4;
                        v678[-1] = vuzp1q_s8(v681, v680);
                        int8x16_t *v678 = vuzp1q_s8(v683, v682);
                        v678 += 2;
                        v679 -= 32;
                      }
                      while (v679);
                      if (v497 == v500) {
                        goto LABEL_469;
                      }
                      if ((v497 & 0x18) == 0)
                      {
                        int v502 = (int8x16_t *)((char *)v490 + 2 * v500);
                        unsigned int v501 = (unsigned char *)(v492 + v500);
                        do
                        {
LABEL_466:
                          char v503 = v502->i8[0];
                          int v502 = (int8x16_t *)((char *)v502 + 2);
                          *v501++ = v503;
                        }
                        while (v501 != &v489[v491]);
                        goto LABEL_469;
                      }
                    }
                    else
                    {
                      unint64_t v500 = 0;
                    }
                    unsigned int v501 = (unsigned char *)(v492 + (v497 & 0xFFFFFFFFFFFFFFF8));
                    int v502 = (int8x16_t *)((char *)v490 + 2 * (v497 & 0xFFFFFFFFFFFFFFF8));
                    int8x16_t v684 = (int16x8_t *)((char *)v490 + 2 * v500);
                    int8x16_t v685 = (int8x8_t *)(v492 + v500);
                    unint64_t v686 = v500 - (v497 & 0xFFFFFFFFFFFFFFF8);
                    do
                    {
                      int16x8_t v687 = *v684++;
                      *v685++ = vmovn_s16(v687);
                      v686 += 8;
                    }
                    while (v686);
                    if (v497 == (v497 & 0xFFFFFFFFFFFFFFF8)) {
                      goto LABEL_469;
                    }
                    goto LABEL_466;
                  }
                  unint64_t v482 = (unint64_t)&v434[2 * v436 + v439 - v440 + 3];
                  if (v482 < 8
                    || (v440 < (unint64_t)v438->u64 + 4 * v436 + 2 * (void)&v434[v439] - 2 * v440 + 6
                      ? (BOOL v483 = v438 >= (int8x16_t *)&v434[2 * v436 + 3 + v439])
                      : (BOOL v483 = 1),
                        !v483))
                  {
                    int v485 = (unsigned char *)v440;
                    unsigned int v486 = v438;
                    goto LABEL_441;
                  }
                  if (v482 >= 0x20)
                  {
                    unint64_t v484 = v482 & 0xFFFFFFFFFFFFFFE0;
                    uint64_t v666 = v438 + 2;
                    uint64_t v667 = (int8x16_t *)(v440 + 16);
                    unint64_t v668 = v482 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      int8x16_t v670 = v666[-2];
                      int8x16_t v669 = v666[-1];
                      int8x16_t v672 = *v666;
                      int8x16_t v671 = v666[1];
                      v666 += 4;
                      v667[-1] = vuzp1q_s8(v670, v669);
                      *uint64_t v667 = vuzp1q_s8(v672, v671);
                      v667 += 2;
                      v668 -= 32;
                    }
                    while (v668);
                    if (v482 == v484) {
                      goto LABEL_444;
                    }
                    if ((v482 & 0x18) == 0)
                    {
                      unsigned int v486 = (int8x16_t *)((char *)v438 + 2 * v484);
                      int v485 = (unsigned char *)(v440 + v484);
                      do
                      {
LABEL_441:
                        char v487 = v486->i8[0];
                        unsigned int v486 = (int8x16_t *)((char *)v486 + 2);
                        *v485++ = v487;
                      }
                      while (v485 != &v437[v439]);
                      goto LABEL_444;
                    }
                  }
                  else
                  {
                    unint64_t v484 = 0;
                  }
                  int v485 = (unsigned char *)(v440 + (v482 & 0xFFFFFFFFFFFFFFF8));
                  unsigned int v486 = (int8x16_t *)((char *)v438 + 2 * (v482 & 0xFFFFFFFFFFFFFFF8));
                  unint64_t v673 = (int16x8_t *)((char *)v438 + 2 * v484);
                  v674 = (int8x8_t *)(v440 + v484);
                  unint64_t v675 = v484 - (v482 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    int16x8_t v676 = *v673++;
                    *v674++ = vmovn_s16(v676);
                    v675 += 8;
                  }
                  while (v675);
                  if (v482 == (v482 & 0xFFFFFFFFFFFFFFF8)) {
                    goto LABEL_444;
                  }
                  goto LABEL_441;
                }
              }
              uint64_t v459 = 0;
              goto LABEL_445;
            }
          }
          else
          {
            unint64_t v383 = (unint64_t)&v380[v382 & 0xFFFFFFF0];
            unint64_t v384 = (unsigned long long *)v380;
            do
            {
              unsigned long long v385 = (unsigned __int128)vld2q_s8(v381->i8);
              v381 += 2;
              *v384++ = v385;
            }
            while (v384 != (unsigned long long *)v383);
            uint64_t v386 = &v380[v382];
            if ((char *)v383 == &v380[v382]) {
              goto LABEL_351;
            }
          }
          size_t v411 = (size_t)&v379[v382 + v370];
          unint64_t v412 = v411 - v383;
          if (v411 - v383 < 8
            || (v383 < (unint64_t)v381 + 2 * v412 ? (BOOL v413 = (unint64_t)v381 >= v411) : (BOOL v413 = 1), !v413))
          {
            uint64_t v415 = (char *)v383;
            uint64_t v416 = v381;
            goto LABEL_348;
          }
          if (v412 >= 0x20)
          {
            unint64_t v414 = v412 & 0xFFFFFFFFFFFFFFE0;
            v622 = v381 + 2;
            v623 = (int8x16_t *)(v383 + 16);
            unint64_t v624 = v412 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              int8x16_t v626 = v622[-2];
              int8x16_t v625 = v622[-1];
              int8x16_t v628 = *v622;
              int8x16_t v627 = v622[1];
              v622 += 4;
              v623[-1] = vuzp1q_s8(v626, v625);
              int8x16_t *v623 = vuzp1q_s8(v628, v627);
              v623 += 2;
              v624 -= 32;
            }
            while (v624);
            if (v412 == v414) {
              goto LABEL_351;
            }
            if ((v412 & 0x18) == 0)
            {
              uint64_t v416 = (int8x16_t *)((char *)v381 + 2 * v414);
              uint64_t v415 = (char *)(v383 + v414);
              do
              {
LABEL_348:
                char v417 = v416->i8[0];
                uint64_t v416 = (int8x16_t *)((char *)v416 + 2);
                *v415++ = v417;
              }
              while (v415 != v386);
              goto LABEL_351;
            }
          }
          else
          {
            unint64_t v414 = 0;
          }
          uint64_t v415 = (char *)(v383 + (v412 & 0xFFFFFFFFFFFFFFF8));
          uint64_t v416 = (int8x16_t *)((char *)v381 + 2 * (v412 & 0xFFFFFFFFFFFFFFF8));
          v629 = (int16x8_t *)((char *)v381 + 2 * v414);
          unint64_t v630 = (int8x8_t *)(v383 + v414);
          unint64_t v631 = v414 - (v412 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            int16x8_t v632 = *v629++;
            *v630++ = vmovn_s16(v632);
            v631 += 8;
          }
          while (v631);
          if (v412 == (v412 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_351;
          }
          goto LABEL_348;
        }
      }
      uint64_t v396 = 0;
      goto LABEL_352;
    }
    uint64_t v292 = (char *)MEMORY[0x18530ACF0]();
    if (!v292) {
      goto LABEL_284;
    }
    uint64_t v293 = v292;
    if (v282)
    {
      memset(v292, 32, v282);
      size_t v294 = v282;
      unint64_t v295 = &v293[v282];
      if (v281) {
        goto LABEL_181;
      }
    }
    else
    {
      size_t v294 = 0;
      unint64_t v295 = v292;
      if (v281)
      {
LABEL_181:
        unint64_t v296 = *(int8x16_t **)(v281 + 8);
        size_t v297 = *(unsigned int *)(v281 + 4);
        if ((*(unsigned char *)(v281 + 16) & 4) != 0)
        {
          if (v297)
          {
            if (v297 == 1) {
              *unint64_t v295 = v296->i8[0];
            }
            else {
              memcpy(v295, v296, v297);
            }
          }
          goto LABEL_254;
        }
        if (v297 < 0x10)
        {
          unint64_t v298 = (unint64_t)v295;
        }
        else
        {
          unint64_t v298 = (unint64_t)&v295[v297 & 0xFFFFFFF0];
          uint64_t v299 = (unsigned long long *)v295;
          do
          {
            unsigned long long v300 = (unsigned __int128)vld2q_s8(v296->i8);
            v296 += 2;
            *v299++ = v300;
          }
          while (v299 != (unsigned long long *)v298);
        }
        if ((char *)v298 == &v295[v297])
        {
LABEL_254:
          uint64_t v319 = *(unsigned int *)(v281 + 4);
LABEL_255:
          unint64_t v348 = &v295[v319];
          *(void *)unint64_t v348 = 0x286B6361705F5F20;
          unint64_t v349 = v348 + 8;
          if (!v279)
          {
            uint64_t v355 = 0;
LABEL_280:
            int v365 = &v349[v355];
            *(void *)int v365 = *(void *)" unpacked)\n";
            *(_DWORD *)(v365 + 7) = 170484837;
            uint64_t v366 = v365 + 11;
            if (v282) {
              memset(v365 + 11, 32, v282);
            }
            else {
              size_t v282 = 0;
            }
            *(_WORD *)&v366[v282] = 2683;
            goto LABEL_284;
          }
          unint64_t v350 = *(int8x16_t **)(v279 + 8);
          size_t v351 = *(unsigned int *)(v279 + 4);
          if ((*(unsigned char *)(v279 + 16) & 4) != 0)
          {
            if (v351)
            {
              if (v351 == 1) {
                *unint64_t v349 = v350->i8[0];
              }
              else {
                memcpy(v349, v350, v351);
              }
            }
            goto LABEL_279;
          }
          if (v351 < 0x10)
          {
            unint64_t v352 = (unint64_t)v349;
          }
          else
          {
            unint64_t v352 = (unint64_t)&v349[v351 & 0xFFFFFFF0];
            v353 = (unsigned long long *)v349;
            do
            {
              unsigned long long v354 = (unsigned __int128)vld2q_s8(v350->i8);
              v350 += 2;
              *v353++ = v354;
            }
            while (v353 != (unsigned long long *)v352);
          }
          if ((unsigned char *)v352 == &v349[v351])
          {
LABEL_279:
            uint64_t v355 = *(unsigned int *)(v279 + 4);
            goto LABEL_280;
          }
          size_t v356 = (size_t)&v293[v319 + v351 + v294];
          size_t v357 = v356 - v352;
          unint64_t v358 = v356 - v352 + 8;
          if (v356 - v352 >= 0xFFFFFFFFFFFFFFF8
            || ((unint64_t v359 = v356 + 8, v352 < (unint64_t)&v350[1] + 2 * v357)
              ? (BOOL v360 = (unint64_t)v350 >= v359)
              : (BOOL v360 = 1),
                !v360))
          {
            unint64_t v362 = (unsigned char *)v352;
            unint64_t v363 = v350;
            goto LABEL_276;
          }
          if (v358 >= 0x20)
          {
            unint64_t v361 = v358 & 0xFFFFFFFFFFFFFFE0;
            v655 = v350 + 2;
            unint64_t v656 = (int8x16_t *)(v352 + 16);
            unint64_t v657 = v358 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              int8x16_t v659 = v655[-2];
              int8x16_t v658 = v655[-1];
              int8x16_t v661 = *v655;
              int8x16_t v660 = v655[1];
              v655 += 4;
              v656[-1] = vuzp1q_s8(v659, v658);
              *unint64_t v656 = vuzp1q_s8(v661, v660);
              v656 += 2;
              v657 -= 32;
            }
            while (v657);
            if (v358 == v361) {
              goto LABEL_279;
            }
            if ((v358 & 0x18) == 0)
            {
              unint64_t v363 = (int8x16_t *)((char *)v350 + 2 * v361);
              unint64_t v362 = (unsigned char *)(v352 + v361);
              do
              {
LABEL_276:
                char v364 = v363->i8[0];
                unint64_t v363 = (int8x16_t *)((char *)v363 + 2);
                *v362++ = v364;
              }
              while (v362 != &v349[v351]);
              goto LABEL_279;
            }
          }
          else
          {
            unint64_t v361 = 0;
          }
          unint64_t v362 = (unsigned char *)(v352 + (v358 & 0xFFFFFFFFFFFFFFF8));
          unint64_t v363 = (int8x16_t *)((char *)v350 + 2 * (v358 & 0xFFFFFFFFFFFFFFF8));
          v662 = (int16x8_t *)((char *)v350 + 2 * v361);
          v663 = (int8x8_t *)(v352 + v361);
          unint64_t v664 = v361 - (v358 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            int16x8_t v665 = *v662++;
            *v663++ = vmovn_s16(v665);
            v664 += 8;
          }
          while (v664);
          if (v358 == (v358 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_279;
          }
          goto LABEL_276;
        }
        unint64_t v341 = (unint64_t)&v293[v297 + v294];
        unint64_t v342 = v341 - v298;
        if (v341 - v298 < 8
          || (v298 < (unint64_t)v296 + 2 * v342 ? (BOOL v343 = (unint64_t)v296 >= v341) : (BOOL v343 = 1), !v343))
        {
          uint64_t v345 = (char *)v298;
          int v346 = v296;
          goto LABEL_251;
        }
        if (v342 >= 0x20)
        {
          unint64_t v344 = v342 & 0xFFFFFFFFFFFFFFE0;
          uint64_t v644 = v296 + 2;
          unint64_t v645 = (int8x16_t *)(v298 + 16);
          unint64_t v646 = v342 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            int8x16_t v648 = v644[-2];
            int8x16_t v647 = v644[-1];
            int8x16_t v650 = *v644;
            int8x16_t v649 = v644[1];
            v644 += 4;
            v645[-1] = vuzp1q_s8(v648, v647);
            *unint64_t v645 = vuzp1q_s8(v650, v649);
            v645 += 2;
            v646 -= 32;
          }
          while (v646);
          if (v342 == v344) {
            goto LABEL_254;
          }
          if ((v342 & 0x18) == 0)
          {
            int v346 = (int8x16_t *)((char *)v296 + 2 * v344);
            uint64_t v345 = (char *)(v298 + v344);
            do
            {
LABEL_251:
              char v347 = v346->i8[0];
              int v346 = (int8x16_t *)((char *)v346 + 2);
              *v345++ = v347;
            }
            while (v345 != &v295[v297]);
            goto LABEL_254;
          }
        }
        else
        {
          unint64_t v344 = 0;
        }
        uint64_t v345 = (char *)(v298 + (v342 & 0xFFFFFFFFFFFFFFF8));
        int v346 = (int8x16_t *)((char *)v296 + 2 * (v342 & 0xFFFFFFFFFFFFFFF8));
        v651 = (int16x8_t *)((char *)v296 + 2 * v344);
        v652 = (int8x8_t *)(v298 + v344);
        unint64_t v653 = v344 - (v342 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          int16x8_t v654 = *v651++;
          *v652++ = vmovn_s16(v654);
          v653 += 8;
        }
        while (v653);
        if (v342 == (v342 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_254;
        }
        goto LABEL_251;
      }
    }
    uint64_t v319 = 0;
    goto LABEL_255;
  }
LABEL_655:
  if (*(unsigned char *)(v4 + 392))
  {
    unsigned int v688 = *(_DWORD *)(v4 + 372);
    if (v688 && **((void **)this + 13))
    {
      uint64_t v689 = *(void *)(v4 + 360);
      uint64_t v690 = v689 + 24 * v688;
      do
      {
        uint64_t v691 = **((void **)this + 13);
        if (v691)
        {
          int v692 = *(_DWORD *)(v691 - 8);
          __n128 v693 = *(WTF::StringImpl **)(v689 + 16);
          unsigned int v694 = *((_DWORD *)v693 + 4);
          if (v694 < 0x100) {
            unsigned int v695 = WTF::StringImpl::hashSlowCase(v693);
          }
          else {
            unsigned int v695 = v694 >> 8;
          }
          for (int j = 0; ; v695 = j + v697)
          {
            int v697 = v695 & v692;
            __int16 v698 = *(WTF **)(v691 + 96 * (v695 & v692));
            if (v698 != (WTF *)-1)
            {
              if (!v698) {
                goto LABEL_659;
              }
              if (WTF::equal(v698, *(const WTF::StringImpl **)(v689 + 16), a3)) {
                break;
              }
            }
            ++j;
          }
          (*(void (**)(WGSL::Metal::FunctionDefinitionWriter *, void))(*(void *)this + 48))(this, *(void *)v689);
        }
LABEL_659:
        v689 += 24;
      }
      while (v689 != v690);
    }
  }
  else
  {
    __break(1u);
  }
}