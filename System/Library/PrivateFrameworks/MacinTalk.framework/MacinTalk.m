void MT3BSegmentProducer::MT3BSegmentProducer(uint64_t a1, uint64_t a2, MT3BSegmentProducer *this, __int16 *a4)
{
  unint64_t v5;
  void *v6;
  void *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  __int16 *v13;
  int v14;
  __int16 v15;
  int v16;
  unsigned int v17;
  __int16 v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  __int16 v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  __int16 v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  __int16 v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  __int16 v37;
  int v38;
  unsigned int v39;
  unint64_t v40;
  int v41;
  unsigned int v42;

  *(void *)a1 = &unk_1F347CE28;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = this;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 96) = 28927;
  *(unsigned char *)(a1 + 98) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 282) = 4096;
  v5 = 1374389535 * (a4[6] << 13);
  *(_WORD *)(a1 + 280) = (v5 >> 37) + (v5 >> 63);
  v6 = &MT3BSegmentProducer::sHPNoise;
  if (a4[30] == 1) {
    v6 = &MT3BSegmentProducer::sNoiseWave;
  }
  if (a4[30]) {
    v7 = v6;
  }
  else {
    v7 = &MT3BSegmentProducer::sBandNoise;
  }
  *(void *)(a1 + 296) = v7;
  *(void *)(a1 + 116) = 0;
  *(void *)(a1 + 132) = 0;
  *(_WORD *)(a1 + 114) = 0;
  v8 = a4[8];
  if (v8 >= 801)
  {
    v8 = MTBEParam::HzToPitch(this, a4[8]);
    this = *(MT3BSegmentProducer **)(a1 + 16);
    a4 = *(__int16 **)(a1 + 24);
  }
  v9 = MTBEParam::HzToPitch(this, a4[10]);
  v10 = MTBEParam::HzToPitch(*(MTBEParam **)(a1 + 16), *(__int16 *)(*(void *)(a1 + 24) + 24));
  v11 = MTBEParam::HzToPitch(*(MTBEParam **)(a1 + 16), 0x125Cu);
  v12 = MTBEParam::HzToPitch(*(MTBEParam **)(a1 + 16), *(__int16 *)(*(void *)(a1 + 24) + 32));
  *(_WORD *)(a1 + 276) = v12;
  v13 = *(__int16 **)(a1 + 24);
  v14 = v13[9];
  if (v14 >= 1225) {
    v14 = 1225;
  }
  if (v14 <= 50) {
    v15 = 50;
  }
  else {
    v15 = v14;
  }
  if (v8 <= 256) {
    v16 = 256;
  }
  else {
    v16 = v8;
  }
  v17 = (unsigned __int16)(v15 - 50) / 5u;
  v18 = sCcoeffTbl[v17];
  *(_WORD *)(a1 + 220) = v18;
  v19 = sBcoeffTbl[v17] * sCosTbl[v16 - 256];
  *(_WORD *)(a1 + 218) = v19 >> 12;
  *(_WORD *)(a1 + 216) = 0x2000 - (v18 + (v19 >> 12));
  v20 = v13[11];
  if (v20 >= 1225) {
    v20 = 1225;
  }
  if (v20 <= 50) {
    LOWORD(v20) = 50;
  }
  if (v9 <= 256) {
    v21 = 256;
  }
  else {
    v21 = v9;
  }
  v22 = (unsigned __int16)(v20 - 50) / 5u;
  v23 = sCcoeffTbl[v22];
  *(_WORD *)(a1 + 238) = v23;
  v24 = sBcoeffTbl[v22] * sCosTbl[v21 - 256];
  *(_WORD *)(a1 + 236) = v24 >> 12;
  *(_WORD *)(a1 + 234) = (3200 * (__int16)(0x2000 - (v23 + (v24 >> 12)))) >> 13;
  v25 = v13[13];
  if (v25 >= 1225) {
    v25 = 1225;
  }
  if (v25 <= 50) {
    LOWORD(v25) = 50;
  }
  if (v10 <= 256) {
    v26 = 256;
  }
  else {
    v26 = v10;
  }
  v27 = (unsigned __int16)(v25 - 50) / 5u;
  v28 = sCcoeffTbl[v27];
  *(_WORD *)(a1 + 226) = v28;
  v29 = sBcoeffTbl[v27] * sCosTbl[v26 - 256];
  *(_WORD *)(a1 + 224) = v29 >> 12;
  *(_WORD *)(a1 + 222) = (3200 * (__int16)(0x2000 - (v28 + (v29 >> 12)))) >> 13;
  v30 = v13[15];
  if (v30 >= 1225) {
    v30 = 1225;
  }
  if (v30 <= 50) {
    LOWORD(v30) = 50;
  }
  if (v11 <= 256) {
    v31 = 256;
  }
  else {
    v31 = v11;
  }
  v32 = (unsigned __int16)(v30 - 50) / 5u;
  v33 = sCcoeffTbl[v32];
  *(_WORD *)(a1 + 232) = v33;
  v34 = sBcoeffTbl[v32] * sCosTbl[v31 - 256];
  *(_WORD *)(a1 + 230) = v34 >> 12;
  *(_WORD *)(a1 + 228) = (3200 * (__int16)(0x2000 - (v33 + (v34 >> 12)))) >> 13;
  if (v13[18] >= 1225) {
    v35 = 1225;
  }
  else {
    v35 = v13[18];
  }
  if (v35 <= 50) {
    LOWORD(v35) = 50;
  }
  v36 = (unsigned __int16)(v35 - 50) / 5u;
  v37 = sCcoeffTbl[v36];
  if (v12 <= 256) {
    v38 = 256;
  }
  else {
    v38 = v12;
  }
  *(_WORD *)(a1 + 250) = v37;
  v39 = sBcoeffTbl[v36] * sCosTbl[v38 - 256];
  *(_WORD *)(a1 + 248) = v39 >> 12;
  *(_WORD *)(a1 + 246) = 0x2000 - (v37 + (v39 >> 12));
  *(_DWORD *)(a1 + 268) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_WORD *)(a1 + 266) = (3200 * *(__int16 *)(a1 + 280)) >> 13;
  *(_DWORD *)(a1 + 140) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  v40 = 1374389535 * (v13[156] << 13);
  *(_WORD *)(a1 + 278) = (v40 >> 37) + (v40 >> 63);
  v41 = v13[155];
  *(_DWORD *)(a1 + 284) = v41;
  if (v41 > 100)
  {
    v41 = 100;
LABEL_49:
    *(_DWORD *)(a1 + 284) = v41;
    goto LABEL_50;
  }
  if (v41 <= 9)
  {
    v41 = 10;
    goto LABEL_49;
  }
LABEL_50:
  v42 = (v41 << 16) / 100;
  *(_DWORD *)(a1 + 284) = v42;
  *(_WORD *)(a1 + 304) = (2318 * v42) >> 16;
  *(_WORD *)(a1 + 306) = (2909 * v42) >> 16;
  *(_WORD *)(a1 + 308) = (3723 * v42) >> 16;
  v42 >>= 4;
  *(_WORD *)(a1 + 310) = v42;
  *(_WORD *)(a1 + 274) = v42;
  *(_WORD *)(a1 + 272) = 0;
  bzero((void *)(a1 + 320), 0x2000uLL);
}

void sub_1DA481CA4(_Unwind_Exception *a1)
{
  MTMBProducerComponent::~MTMBProducerComponent(v1);
  _Unwind_Resume(a1);
}

void MT3BSegmentProducer::CalcPoleCoefficients(MT3BSegmentProducer *this, int a2, int a3, __int16 *a4, __int16 *a5, __int16 *a6)
{
  if (a3 >= 1225) {
    int v6 = 1225;
  }
  else {
    int v6 = a3;
  }
  if (v6 <= 50) {
    LOWORD(v6) = 50;
  }
  if (a2 <= 256) {
    unsigned int v7 = 256;
  }
  else {
    unsigned int v7 = a2;
  }
  unsigned int v8 = (unsigned __int16)(v6 - 50) / 5u;
  *a6 = sCcoeffTbl[v8];
  unsigned int v9 = sBcoeffTbl[v8] * sCosTbl[v7 - 256];
  *a5 = v9 >> 12;
  *a4 = 0x2000 - (*a6 + (v9 >> 12));
}

void MT3BSegmentProducer::~MT3BSegmentProducer(MT3BSegmentProducer *this)
{
  *(void *)this = &unk_1F347CE28;
  v2 = (_DWORD *)*((void *)this + 11);
  if (v2)
  {
    if ((*v2)-- == 1) {
      MEMORY[0x1E016FF00]();
    }
  }

  MTMBProducerComponent::~MTMBProducerComponent(this);
}

{
  uint64_t vars8;

  MT3BSegmentProducer::~MT3BSegmentProducer(this);

  JUMPOUT(0x1E016FF00);
}

uint64_t MT3BSegmentProducer::NextSegment(MT3BSegmentProducer *this, MTMBSegment *a2)
{
  int v3 = *((char *)this + 96);
  if (v3 > 0
    || (uint64_t result = 0, *((_DWORD *)this + 25) = 0, v3 < 0)
    && (uint64_t result = MTFEFrameFiller::FillNextFrame(*((MTFEFrameFiller **)this + 1), (const char *)this + 32),
        *((unsigned char *)this + 96) = result,
        *((unsigned char *)this + 104) = *(unsigned char *)(*((void *)this + 1) + 80),
        result))
  {
    __int16 v61 = *((_WORD *)this + 16);
    int v50 = *((unsigned __int8 *)this + 34);
    __int16 v65 = *((_WORD *)this + 18);
    __int16 v66 = *((_WORD *)this + 19);
    __int16 v4 = *((_WORD *)this + 20);
    __int16 v5 = *((_WORD *)this + 21);
    __int16 v6 = *((_WORD *)this + 22);
    int v7 = *((unsigned __int16 *)this + 23);
    int v53 = *((unsigned __int16 *)this + 24);
    int v55 = *((unsigned __int16 *)this + 25);
    int v57 = *((unsigned __int16 *)this + 26);
    int v60 = *((unsigned __int16 *)this + 27);
    __int16 v63 = *((_WORD *)this + 28);
    __int16 v64 = *((_WORD *)this + 29);
    __int16 v8 = *((_WORD *)this + 30);
    __int16 v9 = *((_WORD *)this + 31);
    __int16 v10 = *((_WORD *)this + 32);
    uint64_t v51 = *((void *)this + 10);
    int Frame = MTFEFrameFiller::FillNextFrame(*((MTFEFrameFiller **)this + 1), (const char *)this + 32);
    *((unsigned char *)this + 96) = Frame;
    if (!Frame || *((unsigned char *)this + 34))
    {
      *((_WORD *)this + 141) |= *((unsigned __int8 *)this + 104) << 7;
      *((unsigned char *)this + 104) = *(unsigned char *)(*((void *)this + 1) + 80);
    }
    if (v50)
    {
      v12 = (_DWORD *)*((void *)this + 11);
      if (v12)
      {
        if ((*v12)-- == 1) {
          MEMORY[0x1E016FF00]();
        }
      }
      operator new();
    }
    if (!*((_WORD *)this + 53) && !*((_WORD *)this + 55))
    {
      *((_DWORD *)this + 29) = 0;
      *((_DWORD *)this + 30) = 0;
      *(void *)((char *)this + 148) = 0;
      *(void *)((char *)this + 140) = 0;
      *((_DWORD *)this + 39) = 0;
      *(void *)((char *)this + 180) = 0;
      *((_DWORD *)this + 47) = 0;
    }
    v15 = (__int16 *)*((void *)this + 3);
    __int16 v16 = v15[23] + v4;
    int v17 = v16;
    *((_WORD *)this + 96) = v16;
    __int16 v18 = v15[24] + v5;
    int v19 = v18;
    *((_WORD *)this + 97) = v18;
    __int16 v20 = v15[25] + v6;
    int v21 = v20;
    *((_WORD *)this + 98) = v20;
    int v22 = v8;
    if (v8 >= 1225) {
      int v22 = 1225;
    }
    if (v22 <= 50) {
      LOWORD(v22) = 50;
    }
    if (v17 <= 256) {
      int v17 = 256;
    }
    unsigned int v23 = (unsigned __int16)(v22 - 50) / 5u;
    __int16 v24 = sCcoeffTbl[v23];
    *((_WORD *)this + 101) = v24;
    unsigned int v25 = sBcoeffTbl[v23] * sCosTbl[v17 - 256];
    *((_WORD *)this + 100) = v25 >> 12;
    *((_WORD *)this + 99) = 0x2000 - (v24 + (v25 >> 12));
    int v26 = v9;
    if (v9 >= 1225) {
      int v26 = 1225;
    }
    if (v26 <= 50) {
      LOWORD(v26) = 50;
    }
    if (v19 <= 256) {
      int v27 = 256;
    }
    else {
      int v27 = v19;
    }
    unsigned int v28 = (unsigned __int16)(v26 - 50) / 5u;
    int v29 = (__int16)sCcoeffTbl[v28];
    *((_WORD *)this + 104) = sCcoeffTbl[v28];
    unsigned int v30 = (sBcoeffTbl[v28] * sCosTbl[v27 - 256]) >> 12;
    *((_WORD *)this + 103) = v30;
    *((_WORD *)this + 102) = 0x2000 - (v29 + v30);
    int v31 = v10;
    if (v10 >= 1225) {
      int v31 = 1225;
    }
    if (v31 <= 50) {
      LOWORD(v31) = 50;
    }
    if (v21 <= 256) {
      int v32 = 256;
    }
    else {
      int v32 = v21;
    }
    unsigned int v33 = (unsigned __int16)(v31 - 50) / 5u;
    int v34 = (__int16)sCcoeffTbl[v33];
    *((_WORD *)this + 107) = sCcoeffTbl[v33];
    unsigned int v35 = (sBcoeffTbl[v33] * sCosTbl[v32 - 256]) >> 12;
    *((_WORD *)this + 106) = v35;
    *((_WORD *)this + 105) = 0x2000 - (v34 + v35);
    __int16 v36 = v15[148] + v63;
    int v37 = v15[18];
    if (v37 >= 1225) {
      int v37 = 1225;
    }
    uint64_t v38 = (uint64_t)((unint64_t)((v37 - 50) / 5) << 48) >> 47;
    __int16 v39 = *(_WORD *)((char *)sCcoeffTbl + v38);
    *((_WORD *)this + 122) = -v39;
    LODWORD(v38) = *(__int16 *)((char *)sBcoeffTbl + v38) * sCosTbl[v36 - 256];
    *((_WORD *)this + 121) = -(__int16)(v38 >> 12);
    *((_WORD *)this + 120) = 0x2000 - (v39 + (v38 >> 12));
    *((_WORD *)this + 54) = v65 << 8;
    *((_WORD *)this + 55) = v66 << 8;
    *((_WORD *)this + 56) = v64 << 8;
    if (v7)
    {
      __int16 v40 = (_WORD)v7 << 8;
      int v59 = ((__int16)(0x2000 - (v29 + v30)) * (__int16)((_WORD)v7 << 8)) >> 13;
    }
    else
    {
      __int16 v40 = 0;
      int v59 = 0;
      *((_DWORD *)this + 42) = 0;
    }
    v41 = a2;
    int v42 = v57;
    *((_WORD *)this + 126) = v40;
    if (v53)
    {
      __int16 v43 = (_WORD)v53 << 8;
      int v58 = ((__int16)(0x2000 - (v34 + v35)) * (__int16)((_WORD)v53 << 8)) >> 13;
    }
    else
    {
      __int16 v43 = 0;
      int v58 = 0;
      *((_DWORD *)this + 43) = 0;
    }
    *((_WORD *)this + 127) = v43;
    if (!v55 || v66 << 8)
    {
      __int16 v44 = 0;
      int v56 = 0;
      *((_DWORD *)this + 44) = 0;
    }
    else
    {
      __int16 v44 = (_WORD)v55 << 8;
      int v56 = (*((__int16 *)this + 117) * (__int16)((_WORD)v55 << 8)) >> 13;
    }
    *((_WORD *)this + 128) = v44;
    if (v42)
    {
      __int16 v45 = (_WORD)v42 << 8;
      int v54 = (*((__int16 *)this + 111) * (__int16)((_WORD)v42 << 8)) >> 13;
    }
    else
    {
      __int16 v45 = 0;
      int v54 = 0;
      *((_DWORD *)this + 40) = 0;
    }
    __int16 v46 = v61;
    *((_WORD *)this + 129) = v45;
    if (v60)
    {
      __int16 v47 = (_WORD)v60 << 8;
      int v52 = (*((__int16 *)this + 114) * (__int16)((_WORD)v60 << 8)) >> 13;
    }
    else
    {
      __int16 v47 = 0;
      int v52 = 0;
      *((_DWORD *)this + 41) = 0;
    }
    *((_WORD *)this + 130) = v47;
    if ((MTBEDebugFlags::sMEOWDebug & 2) != 0)
    {
      printf("P %8d%7d%7d %8d%7d%7d %8d%7d%7d %8d%7d%7d %8d%7d%7d\n", v59, (__int16)v30, v29, v58, (__int16)v35, v34, v56, *((__int16 *)this + 118), *((__int16 *)this + 119), v54, *((__int16 *)this + 112), *((__int16 *)this + 113), v52, *((__int16 *)this + 115), *((__int16 *)this + 116));
      v41 = a2;
    }
    *((_WORD *)this + 131) = v61;
    uint64_t v48 = *((void *)this + 2);
    if (*(_WORD *)(v48 + 210) == 1)
    {
      if (*((_WORD *)this + 54)) {
        *((_WORD *)this + 132) = *(void *)(v48 + 8);
      }
      *((_DWORD *)this + 31) = MT3BSegmentProducer::sTopOctave[(*(_WORD *)(v48 + 192) + v61)] >> (3 - ((unsigned __int16)(*(_WORD *)(v48 + 192) + v61) >> 8));
      if (*(unsigned char *)(v48 + 50))
      {
        if (v51 != -1)
        {
          *((_DWORD *)this + 33) = v51 << 14;
          *((_DWORD *)this + 34) = v51 << 14;
        }
      }
      else
      {
        if (!*(void *)(v48 + 200))
        {
          __int16 v46 = *(_WORD *)(v48 + 190);
          *((_WORD *)this + 131) = v46;
        }
        if (*(_WORD *)(*((void *)this + 3) + 52)) {
          *((_WORD *)this + 131) = (*(_WORD *)(*((void *)this + 3) + 52) + v46) & ~((__int16)(*(_WORD *)(*((void *)this + 3) + 52)
        }
                                                                                                + v46) >> 15);
      }
    }
    else
    {
      *((_DWORD *)this + 31) = MT3BSegmentProducer::sTopOctave[v61] >> (3 - HIBYTE(v61));
      if (*(_WORD *)(*((void *)this + 3) + 52))
      {
        int v49 = (__int16)(*(_WORD *)(*((void *)this + 3) + 52) + v61) & ~((__int16)(*(_WORD *)(*((void *)this + 3)
                                                                                               + 52)
                                                                                    + v61) >> 31);
        *((_WORD *)this + 131) = v49;
        *((_DWORD *)this + 32) = MT3BSegmentProducer::sTopOctave[v49] >> (3 - BYTE1(v49));
      }
    }
    *((_DWORD *)this + 35) = *((__int16 *)this + 54) << 16;
    MTMBSegment::Allocate(v41, 0);
  }
  return result;
}

void sub_1DA482D88(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10D0C4050FF3235);
  _Unwind_Resume(a1);
}

void MT3BSegmentProducer::CalcZeroCoefficients(MT3BSegmentProducer *this, int a2, int a3, __int16 *a4, __int16 *a5, __int16 *a6)
{
  if (a3 >= 1225) {
    int v6 = 1225;
  }
  else {
    int v6 = a3;
  }
  uint64_t v7 = (uint64_t)((unint64_t)((v6 - 50) / 5) << 48) >> 47;
  *a6 = -*(_WORD *)((char *)sCcoeffTbl + v7);
  LODWORD(v7) = *(__int16 *)((char *)sBcoeffTbl + v7) * sCosTbl[a2 - 256];
  *a5 = -(__int16)(v7 >> 12);
  *a4 = *a6 - (v7 >> 12) + 0x2000;
}

void sub_1DA482EA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DA4830B8(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;
  MEMORY[0x1E016FF00](v5, 0x10E1C404B4880CALL);

  _Unwind_Resume(a1);
}

void sub_1DA4832D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MTFrontendSimple;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
}

void MT3BTextSource::MT3BTextSource(MT3BTextSource *this, const __CFString **a2)
{
  SLCFStringTextSource::SLCFStringTextSource((SLCFStringTextSource *)this, a2[26]);
  *(void *)uint64_t v3 = &unk_1F347CEB8;
  *(void *)(v3 + 296) = a2;
  *(unsigned char *)(v3 + 304) = 0;
}

{
  uint64_t v3;

  SLCFStringTextSource::SLCFStringTextSource((SLCFStringTextSource *)this, a2[26]);
  *(void *)uint64_t v3 = &unk_1F347CEB8;
  *(void *)(v3 + 296) = a2;
  *(unsigned char *)(v3 + 304) = 0;
}

uint64_t MT3BTextSource::CreateMoreText(MT3BTextSource *this)
{
  if (!*((unsigned char *)this + 304))
  {
    *((unsigned char *)this + 304) = 1;
    uint64_t v6 = 0;
    uint64_t v5 = 0;
    int v4 = 0;
    uint64_t v1 = *((void *)this + 37);
    v2 = *(void (**)(void, void, uint64_t *, uint64_t *, int *))(v1 + 376);
    if (v2)
    {
      if (*(unsigned char *)(v1 + 424)) {
        v2(*(void *)(v1 + 72), *(void *)(v1 + 312), &v6, &v5, &v4);
      }
    }
  }
  return 0;
}

void MTBEDoneTask::Execute(MTBEDoneTask *this, const char *a2)
{
  MTBEWorker::DebugLog("Done %p\n", a2, a2);
  SpeechChannelManager::RegisterCurSpeechState((uint64_t)a2, 0);
  uint64_t v3 = (void (*)(uint64_t, uint64_t))*((void *)a2 + 48);
  if (v3 && a2[424])
  {
    uint64_t v4 = *((void *)a2 + 9);
    uint64_t v5 = *((void *)a2 + 39);
    pthread_mutex_unlock((pthread_mutex_t *)(sCallbackSchedule + 104));
    v3(v4, v5);
    uint64_t v6 = (pthread_mutex_t *)(sCallbackSchedule + 104);
    pthread_mutex_lock(v6);
  }
}

uint64_t MTBESoundOutputDoneTask::Execute(MTBESoundOutputDoneTask *this, const char *a2)
{
  MTBEWorker::DebugLog("Sound Output Done %p\n", a2, a2);
  pthread_mutex_unlock((pthread_mutex_t *)(sSampleSchedule + 104));
  if (a2) {
    (*(void (**)(const char *))(*(void *)a2 + 8))(a2);
  }
  uint64_t v3 = (pthread_mutex_t *)(sSampleSchedule + 104);

  return pthread_mutex_lock(v3);
}

void MT3BEngineTask::MT3BEngineTask(MT3BEngineTask *this, const __CFString **a2)
{
  *(void *)this = &unk_1F347CF48;
  *((void *)this + 1) = &unk_1F347CF90;
  *((void *)this + 2) = &unk_1F347CFC8;
  *((void *)this + 3) = this;
  *((void *)this + 4) = MT3BEngineTask::Word;
  *((void *)this + 5) = 0;
  sprintf((char *)this + 48, "%s<%p>", "Word", this);
  *((void *)this + 10) = &unk_1F347CFC8;
  *((void *)this + 11) = this;
  *((void *)this + 12) = MT3BEngineTask::Phon;
  *((void *)this + 13) = 0;
  sprintf((char *)this + 112, "%s<%p>", "Phon", this);
  *((void *)this + 18) = &unk_1F347CFC8;
  *((void *)this + 19) = this;
  *((void *)this + 20) = MT3BEngineTask::Sync;
  *((void *)this + 21) = 0;
  sprintf((char *)this + 176, "%s<%p>", "Sync", this);
  *((void *)this + 26) = &unk_1F347CFC8;
  *((void *)this + 27) = this;
  *((void *)this + 28) = MT3BEngineTask::Pause;
  *((void *)this + 29) = 0;
  sprintf((char *)this + 240, "%s<%p>", "Pause", this);
  *((void *)this + 34) = &unk_1F347CFC8;
  *((void *)this + 35) = this;
  *((void *)this + 36) = MT3BEngineTask::Boundary;
  *((void *)this + 37) = 0;
  sprintf((char *)this + 304, "%s<%p>", "Boundary", this);
  *((void *)this + 42) = &unk_1F347CFC8;
  *((void *)this + 43) = this;
  *((void *)this + 44) = MT3BEngineTask::Stopped;
  *((void *)this + 45) = 0;
  sprintf((char *)this + 368, "%s<%p>", "Stopped", this);
  *((void *)this + 50) = &unk_1F347CFC8;
  *((void *)this + 51) = this;
  *((void *)this + 52) = MT3BEngineTask::CheckAudio;
  *((void *)this + 53) = 0;
  sprintf((char *)this + 432, "%s<%p>", "Audio?", this);
  *((void *)this + 58) = &unk_1F347CFC8;
  *((void *)this + 59) = this;
  *((void *)this + 60) = MT3BEngineTask::Ping;
  *((void *)this + 61) = 0;
  sprintf((char *)this + 496, "%s<%p>", "Ping", this);
  *((void *)this + 66) = &unk_1F347CFC8;
  *((void *)this + 67) = this;
  *((void *)this + 68) = MT3BEngineTask::ParseNextPhrase;
  *((void *)this + 69) = 0;
  sprintf((char *)this + 560, "%s<%p>", "Parse", this);
  *((void *)this + 74) = a2;
  SLCFStringTextSource::SLCFStringTextSource((SLCFStringTextSource *)((char *)this + 616), a2[26]);
  *((void *)this + 77) = &unk_1F347CEB8;
  *((void *)this + 114) = a2;
  *((unsigned char *)this + 920) = 0;
  *((void *)this + 116) = 0;
  *((void *)this + 118) = 0;
  *((void *)this + 117) = 0;
  MTBEPersistentParam::MTBEPersistentParam((MTBEPersistentParam *)((char *)this + 1016));
  *((_DWORD *)this + 308) = 257;
  *((_WORD *)this + 618) = 1;
  *((void *)this + 155) = 0;
  uint64_t v4 = *(void *)(*((void *)this + 74) + 32);
  *((void *)this + 157) = &unk_1F347D270;
  long long v5 = *(_OWORD *)(v4 + 8);
  long long v6 = *(_OWORD *)(v4 + 24);
  long long v7 = *(_OWORD *)(v4 + 40);
  *((_DWORD *)this + 328) = *(_DWORD *)(v4 + 56);
  *((_OWORD *)this + 81) = v7;
  *((_OWORD *)this + 80) = v6;
  *((_OWORD *)this + 79) = v5;
  *((_WORD *)this + 660) = 0;
  MTBEWorker::DebugLog("Create Engine %p\n", v8, this);
  gettimeofday(&v9, 0);
  *((void *)this + 156) = v9.tv_usec + 1000000 * v9.tv_sec;
  pthread_once(&sScheduleInit, (void (*)(void))InitSchedules);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 952), 0);
  *((void *)this + 138) = a2[8];
  *((void *)this + 134) = SLLexer::Create();
  operator new();
}

void sub_1DA483C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, MTBEWorker::Task *a12, MTBEWorker::Task *a13, MTBEWorker::Task *a14, MTBEWorker::Task *a15, MTBEWorker::Task *a16, MTBEWorker::Task *a17)
{
  MEMORY[0x1E016FF00](v23, 0x10A1C402F3E04C9);
  MTBENotifier::~MTBENotifier(v22);
  MTBEPersistentParam::~MTBEPersistentParam(v21);
  SLCFStringTextSource::~SLCFStringTextSource(v20);
  MTBEWorker::Task::~Task(v19);
  MTBEWorker::Task::~Task(v18);
  MTBEWorker::Task::~Task(v24);
  MTBEWorker::Task::~Task(a12);
  MTBEWorker::Task::~Task(a13);
  MTBEWorker::Task::~Task(a14);
  MTBEWorker::Task::~Task(a15);
  MTBEWorker::Task::~Task(a16);
  MTBEWorker::Task::~Task(a17);
  MTBEWorker::Task::~Task(v17);
  _Unwind_Resume(a1);
}

uint64_t MT3BEngineTask::Word(MT3BEngineTask *this, const char *a2)
{
  CFIndex v3 = (uint64_t)a2 >> 8;
  CFIndex v4 = a2;
  MTBEWorker::DebugLog("Word %d %d\n", a2, (uint64_t)a2 >> 8, a2);
  long long v5 = (SpeechChannelManager *)*((void *)this + 74);
  pthread_mutex_unlock((pthread_mutex_t *)(sCallbackSchedule + 104));
  v9.location = v3;
  v9.length = v4;
  SpeechChannelManager::CallWordCallBackProc(v5, v9);
  long long v6 = (pthread_mutex_t *)(sCallbackSchedule + 104);

  return pthread_mutex_lock(v6);
}

uint64_t MT3BEngineTask::AncillaryTask::AncillaryTask(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  *(void *)a1 = &unk_1F347CFC8;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  sprintf((char *)(a1 + 32), "%s<%p>", a5, a2);
  return a1;
}

{
  *(void *)a1 = &unk_1F347CFC8;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  sprintf((char *)(a1 + 32), "%s<%p>", a5, a2);
  return a1;
}

uint64_t MT3BEngineTask::Phon(MT3BEngineTask *this, const char *a2)
{
  __int16 v2 = (__int16)a2;
  MTBEWorker::DebugLog("Phoneme %d\n", a2, a2);
  uint64_t v4 = *((void *)this + 74);
  pthread_mutex_unlock((pthread_mutex_t *)(sCallbackSchedule + 104));
  long long v5 = *(void (**)(void, void, void))(v4 + 408);
  if (v5 && *(unsigned char *)(v4 + 424)) {
    v5(*(void *)(v4 + 72), *(void *)(v4 + 312), v2);
  }
  long long v6 = (pthread_mutex_t *)(sCallbackSchedule + 104);

  return pthread_mutex_lock(v6);
}

uint64_t MT3BEngineTask::Sync(MT3BEngineTask *this, const char *a2)
{
  MTBEWorker::DebugLog("Sync %08X\n", a2, a2);
  uint64_t v4 = *((void *)this + 74);
  pthread_mutex_unlock((pthread_mutex_t *)(sCallbackSchedule + 104));
  *(_DWORD *)(v4 + 336) = a2;
  long long v5 = *(void (**)(void, void, const char *))(v4 + 392);
  if (v5 && *(unsigned char *)(v4 + 424)) {
    v5(*(void *)(v4 + 72), *(void *)(v4 + 312), a2);
  }
  long long v6 = (pthread_mutex_t *)(sCallbackSchedule + 104);

  return pthread_mutex_lock(v6);
}

void MT3BEngineTask::Pause(MT3BEngineTask *this, const char *a2)
{
  *((_WORD *)this + 660) = (_WORD)a2;
  CFIndex v3 = "Immediate";
  if (*((void *)this + 116) && *(_DWORD *)(*((void *)this + 74) + 340) == 2) {
    CFIndex v3 = "Deferred";
  }
  MTBEWorker::DebugLog("Pause %04x %s\n", a2, (unsigned __int16)a2, v3);
  uint64_t v4 = *((void *)this + 116);
  if (v4 && *(_DWORD *)(*((void *)this + 74) + 340) == 2)
  {
    int v5 = *((_DWORD *)this + 310);
    __int16 v6 = *((_WORD *)this + 660);
    if ((v6 & 0x100) != 0)
    {
      if (v5 != 4)
      {
        int v7 = 2;
        goto LABEL_20;
      }
    }
    else if (!v5)
    {
      int v7 = 1;
LABEL_20:
      *((_DWORD *)this + 310) = v7;
    }
    MTFEFrameFiller::PauseAt(v4 + 2728, v6);
    if (!*((unsigned char *)this + 1320))
    {
      (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 75) + 56))(*((void *)this + 75), 1, 1);
      (*(void (**)(void))(**((void **)this + 116) + 64))(*((void *)this + 116));
    }
    if ((v5 - 1) >= 2)
    {
      MT3BEngineTask::CheckAudio(this, v9);
    }
    return;
  }
  if ((*((_WORD *)this + 660) & 0x100) != 0)
  {
    if (*((_DWORD *)this + 310) != 4) {
      *((_DWORD *)this + 310) = 2;
    }
    MT3BEngineTask::ShutUp(this, 1);
  }
  else
  {
    MT3BEngineTask::ShutUp(this, 1);
    *((_DWORD *)this + 310) = 3;
    *((unsigned char *)this + 1233) = 0;
    uint64_t v8 = *((void *)this + 74);
    SpeechChannelManager::RegisterCurSpeechState(v8, 3);
  }
}

uint64_t MT3BEngineTask::Boundary(MT3BEngineTask *this, void *a2)
{
  uint64_t result = MT3BEngineTask::ShutUp(this, 1);
  *((_WORD *)this + 660) = 0;
  return result;
}

void MT3BEngineTask::Stopped(MT3BEngineTask *this, const char *a2)
{
  uint64_t v2 = *((void *)this + 74);
  if (!*(_DWORD *)(v2 + 340)) {
    return;
  }
  int v4 = *((_DWORD *)this + 310);
  if (v4 == 2) {
    goto LABEL_5;
  }
  if (v4 != 1)
  {
    if (v4) {
      return;
    }
LABEL_5:
    *((_DWORD *)this + 310) = 4;
    int v5 = (MTBEWorker *)sCallbackSchedule;
    MTBEWorker::AddTask(v5, (MTBEWorker::Task *)sDoneTask, v2);
    return;
  }
  *((_DWORD *)this + 310) = 3;
  *((unsigned char *)this + 1233) = 0;
  MTBEWorker::DebugLog("Paused\n", a2);
  uint64_t v6 = *((void *)this + 74);

  SpeechChannelManager::RegisterCurSpeechState(v6, 3);
}

void MT3BEngineTask::CheckAudio(MT3BEngineTask *this, void *a2)
{
  (*(void (**)(void, void *))(**((void **)this + 75) + 104))(*((void *)this + 75), a2);
  if ((*((_DWORD *)this + 310) - 3) >= 2)
  {
    CFIndex v3 = (uint64_t *)sSampleSchedule;
    gettimeofday(&v4, 0);
    v4.tv_sec = v4.tv_usec + 1000000 * v4.tv_sec + 50000;
    MTBEWorker::AddTask(v3, (uint64_t (***)(void))this + 50, 0, &v4.tv_sec);
  }
}

void MT3BEngineTask::Ping(MT3BEngineTask *this, void *a2)
{
  int v3 = SpeechBusy();
  *((unsigned char *)this + 1234) = v3 > 0;
  if (v3 >= 1)
  {
    timeval v4 = (uint64_t *)sSampleSchedule;
    gettimeofday(&v5, 0);
    v5.tv_sec = v5.tv_usec + 1000000 * v5.tv_sec + 1000000;
    MTBEWorker::AddTask(v4, (uint64_t (***)(void))this + 58, 0, &v5.tv_sec);
  }
}

uint64_t MT3BEngineTask::ParseNextPhrase(MT3BEngineTask *this, const char *a2)
{
  MTBEWorker::DebugLog("Parse\n", a2);
  if (!*((unsigned char *)this + 1234))
  {
    *((unsigned char *)this + 1234) = 1;
    timeval v4 = (uint64_t *)sSampleSchedule;
    gettimeofday(&v22, 0);
    v22.tv_sec = v22.tv_usec + 1000000 * v22.tv_sec + 1000000;
    MTBEWorker::AddTask(v4, (uint64_t (***)(void))this + 58, 0, &v22.tv_sec);
  }
  if (a2)
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 952));
    if (*((unsigned char *)this + 1237))
    {
      uint64_t v6 = *((void *)this + 116);
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
      }
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = *((void *)this + 117);
    }
    *((void *)this + 118) = v7;
    *((_OWORD *)this + 58) = 0u;
    MTBEWorker::DebugLog("Restart at phrase %p\n", v5, v7);
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 952));
  }
  uint64_t v8 = (void *)*((void *)this + 118);
  if (v8)
  {
    *((unsigned char *)this + 1232) = 1;
    do
    {
      uint64_t v9 = v8[533];
      v8[533] = 0;
      *((void *)this + 118) = v9;
      uint64_t ClonedWord = MTFEFrameFiller::NextClonedWord((MTFEFrameFiller *)(v8 + 341));
      if (ClonedWord == -1)
      {
        v12 = 0;
        v13 = "At end of phrase %p\n";
      }
      else
      {
        v12 = (MTBEPhraseMemo *)v8[532];
        v8[532] = 0;
        v13 = "Restart phrase %p\n";
      }
      MTBEWorker::DebugLog(v13, v10, v8);
      (*(void (**)(void *))(*v8 + 48))(v8);
      uint64_t v8 = (void *)*((void *)this + 118);
      BOOL v14 = v12 != 0;
      if (v8) {
        BOOL v15 = v12 == 0;
      }
      else {
        BOOL v15 = 0;
      }
    }
    while (v15);
  }
  else
  {
    v12 = 0;
    uint64_t ClonedWord = 0;
    BOOL v14 = 0;
  }
  if (!*((unsigned char *)this + 1232) || v14)
  {
    if (!v14) {
      return (*(uint64_t (**)(void, void, void))(**((void **)this + 75) + 56))(*((void *)this + 75), 0, 0);
    }
    goto LABEL_27;
  }
  MTFEBuilder::ParseSentence(*((MTFEBuilder **)this + 76));
  __int16 v16 = (MTFEBuilder *)*((void *)this + 76);
  var2 = (MTFESpeechElement *)v16->var2;
  MTFEBuilder::ResetProduct(v16, 0);
  if (var2) {
    goto LABEL_28;
  }
  *((unsigned char *)this + 1232) = 0;
  if (v14)
  {
LABEL_27:
    var2 = 0;
LABEL_28:
    uint64_t v19 = *((void *)this + 74);
    v20.var0 = *(void **)(v19 + 304);
    MTBEPhraseParam::MTBEPhraseParam((MTBEPhraseParam *)&v22, v20, var2, *(MTBENotifier **)(v19 + 32), (MTBENotifier *)((char *)this + 1256), *(MTBENotifier **)(v19 + 40), (MTBEPersistentParam *)((char *)this + 1016));
    if (v14)
    {
      MTBEPhraseMemo::Thaw(v12, (MTBEPhraseParam *)&v22);
      uint64_t v23 = ClonedWord;
      MTBEPhraseMemo::~MTBEPhraseMemo(v12);
      MEMORY[0x1E016FF00]();
    }
    MTBEPhraseProcessor::Create(*(MTBEPhraseProcessor **)(*((void *)this + 74) + 264), (const VoiceDescription *)(*(void *)(*((void *)this + 74) + 264) + 362), &v22, v21);
  }
  return (*(uint64_t (**)(void, void, void))(**((void **)this + 75) + 56))(*((void *)this + 75), 0, 0);
}

void InitSchedules(void)
{
}

void sub_1DA4846FC(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x1070C40AA5774DALL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN14MT3BEngineTaskC2EP20SpeechChannelManager_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 32) + 592) + 32);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 16))(v2, 4294967246, a2);
}

uint64_t MT3BEngineTask::ShutUp(MT3BEngineTask *this, int a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(sSampleSchedule + 104));
  MTBEWorker::PurgeTasks((MTBEWorker *)sSampleSchedule, this);
  MTBEWorker::PurgeTasks((MTBEWorker *)sSampleSchedule, (MT3BEngineTask *)((char *)this + 528));
  MTBEWorker::PurgeTasks((MTBEWorker *)sSampleSchedule, (MT3BEngineTask *)((char *)this + 208));
  MTBEWorker::PurgeTasks((MTBEWorker *)sSampleSchedule, (MT3BEngineTask *)((char *)this + 272));
  MTBEWorker::PurgeTasks((MTBEWorker *)sSampleSchedule, (MT3BEngineTask *)((char *)this + 464));
  MTBEWorker::PurgeTasks((MTBEWorker *)sSampleSchedule, (MT3BEngineTask *)((char *)this + 400));
  MTBEWorker::PurgeTasks((MTBEWorker *)sSampleSchedule, (MT3BEngineTask *)((char *)this + 336));
  pthread_mutex_unlock((pthread_mutex_t *)(sSampleSchedule + 104));
  if (a2) {
    (*(void (**)(void, uint64_t, void))(**((void **)this + 75) + 56))(*((void *)this + 75), 1, 0);
  }
  pthread_mutex_lock((pthread_mutex_t *)(sCallbackSchedule + 104));
  MTBEWorker::PurgeTasks((MTBEWorker *)sCallbackSchedule, this);
  MTBEWorker::PurgeTasks((MTBEWorker *)sCallbackSchedule, (MT3BEngineTask *)((char *)this + 144));
  MTBEWorker::PurgeTasks((MTBEWorker *)sCallbackSchedule, (MT3BEngineTask *)((char *)this + 80));
  MTBEWorker::PurgeTasks((MTBEWorker *)sCallbackSchedule, (MT3BEngineTask *)((char *)this + 16));
  timeval v4 = (pthread_mutex_t *)(sCallbackSchedule + 104);

  return pthread_mutex_unlock(v4);
}

void MT3BEngineTask::~MT3BEngineTask(MT3BEngineTask *this, const char *a2)
{
  *(void *)this = &unk_1F347CF48;
  *((void *)this + 1) = &unk_1F347CF90;
  MTBEWorker::DebugLog("Delete Engine %p\n", a2, this);
  MT3BEngineTask::ShutUp(this, 0);
  pthread_mutex_lock((pthread_mutex_t *)(sSampleSchedule + 104));
  pthread_mutex_lock((pthread_mutex_t *)(sCallbackSchedule + 104));
  (*(void (**)(void, void))(**((void **)this + 75) + 72))(*((void *)this + 75), 0);
  if (atomic_fetch_add((atomic_uint *volatile)(*((void *)this + 75) + 16), 0xFFFFFFFF) == 1) {
    MTBEWorker::AddTask((MTBEWorker *)sSampleSchedule, (MTBEWorker::Task *)&sSoundOutputDoneTask, *((void *)this + 75));
  }
  uint64_t v3 = *((void *)this + 76);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 117);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 48))(v4);
  }
  uint64_t v5 = *((void *)this + 134);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 56))(v5);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(sCallbackSchedule + 104));
  pthread_mutex_unlock((pthread_mutex_t *)(sSampleSchedule + 104));
  MTBENotifier::~MTBENotifier((MTBENotifier *)((char *)this + 1256));
  MTBEPersistentParam::~MTBEPersistentParam((MTBEPersistentParam *)((char *)this + 1016));
  SLCFStringTextSource::~SLCFStringTextSource((SLCFStringTextSource *)((char *)this + 616));
  MTBEWorker::Task::~Task((MT3BEngineTask *)((char *)this + 528));
  MTBEWorker::Task::~Task((MT3BEngineTask *)((char *)this + 464));
  MTBEWorker::Task::~Task((MT3BEngineTask *)((char *)this + 400));
  MTBEWorker::Task::~Task((MT3BEngineTask *)((char *)this + 336));
  MTBEWorker::Task::~Task((MT3BEngineTask *)((char *)this + 272));
  MTBEWorker::Task::~Task((MT3BEngineTask *)((char *)this + 208));
  MTBEWorker::Task::~Task((MT3BEngineTask *)((char *)this + 144));
  MTBEWorker::Task::~Task((MT3BEngineTask *)((char *)this + 80));
  MTBEWorker::Task::~Task((MT3BEngineTask *)((char *)this + 16));

  MTBEWorker::Task::~Task(this);
}

{
  uint64_t vars8;

  MT3BEngineTask::~MT3BEngineTask(this, a2);

  JUMPOUT(0x1E016FF00);
}

void MTBEWorker::AddTask(MTBEWorker *this, MTBEWorker::Task *a2, uint64_t a3)
{
  gettimeofday(&v6, 0);
  v6.tv_sec = v6.tv_usec + 1000000 * v6.tv_sec;
  MTBEWorker::AddTask((uint64_t *)this, (uint64_t (***)(void))a2, a3, &v6.tv_sec);
}

void non-virtual thunk to'MT3BEngineTask::~MT3BEngineTask(MT3BEngineTask *this, const char *a2)
{
}

{
  uint64_t vars8;

  MT3BEngineTask::~MT3BEngineTask((MT3BEngineTask *)((char *)this - 8), a2);

  JUMPOUT(0x1E016FF00);
}

uint64_t MT3BEngineTask::WakeupSoundAndContinue(MT3BEngineTask *this, const char *a2)
{
  MTBEWorker::DebugLog("Waking up Sound\n", a2);
  (*(void (**)(void, void))(**((void **)this + 75) + 64))(*((void *)this + 75), 0);
  uint64_t v3 = *(uint64_t (**)(MT3BEngineTask *))(*(void *)this + 40);

  return v3(this);
}

void MT3BEngineTask::SoundIsAwake(MT3BEngineTask *this, const char *a2)
{
  if (*(_DWORD *)(*((void *)this + 74) + 340))
  {
    MTBEWorker::DebugLog("Sound is awake\n", a2);
    if (*((unsigned char *)this + 1233))
    {
      MT3BEngineTask::ScheduleParse(this);
    }
    else
    {
      MT3BEngineTask::ScheduleContinue(this);
    }
  }
  else
  {
    MTBEWorker::DebugLog("Sound is awake, but Speech already stopped\n", a2);
  }
}

void MT3BEngineTask::ScheduleParse(MT3BEngineTask *this)
{
  uint64_t v1 = (uint64_t *)sSampleSchedule;
  uint64_t v2 = (uint64_t (***)(void))((char *)this + 528);
  gettimeofday(&v3, 0);
  v3.tv_sec = v3.tv_usec + 1000000 * v3.tv_sec;
  MTBEWorker::AddTask(v1, v2, 0, &v3.tv_sec);
}

void MT3BEngineTask::ScheduleContinue(MT3BEngineTask *this)
{
  *((_WORD *)this + 660) = 0;
  *((_DWORD *)this + 310) = 0;
  MTBEWorker::PurgeTasks((MTBEWorker *)sSampleSchedule, this);
  uint64_t v2 = 797831567000 * *((_DWORD *)this + 311);
  int v3 = (v2 >> 44) + ((unint64_t)v2 >> 63);
  uint64_t v4 = *((void *)this + 74);
  if (*(_DWORD *)(v4 + 340) == 3)
  {
    *((unsigned char *)this + 1233) = 1;
    *((_DWORD *)this + 311) = 0;
    SpeechChannelManager::RegisterCurSpeechState(v4, 2);
  }
  else
  {
    v3 -= 100;
  }
  uint64_t v5 = *((void *)this + 156) + 1000 * v3;
  MTBEWorker::AddTask((uint64_t *)sSampleSchedule, (uint64_t (***)(void))this + 66, (uint64_t)this, &v5);
}

void non-virtual thunk to'MT3BEngineTask::SoundIsAwake(MT3BEngineTask *this, const char *a2)
{
}

const char *MT3BEngineTask::Latency(MT3BEngineTask *this, const char *a2)
{
  if ((MTBEDebugFlags::sMTXDebug & 0x40000) != 0)
  {
    clock_t v3 = clock();
    printf("\nStartSpeakingLatency %.8f\n", (float)((float)((float)v3 * 1000.0) / 1000000.0));
  }
  uint64_t result = MTBEWorker::DebugLog("Latency\n", a2);
  uint64_t v5 = (void *)*((void *)this + 74);
  timeval v6 = (uint64_t (*)(void, void, uint64_t))v5[50];
  if (v6) {
    uint64_t result = (const char *)v6(v5[9], v5[39], 1818326117);
  }
  *((unsigned char *)this + 1236) = 0;
  return result;
}

const char *non-virtual thunk to'MT3BEngineTask::Latency(MT3BEngineTask *this, const char *a2)
{
  return MT3BEngineTask::Latency((MT3BEngineTask *)((char *)this - 8), a2);
}

const char *MT3BEngineTask::AdjustBaseline(const char *this)
{
  if (*((int *)this + 311) >= 23)
  {
    uint64_t v1 = (uint64_t)this;
    if (!this[1235])
    {
      gettimeofday(&v8, 0);
      __darwin_time_t v2 = (v8.tv_usec + 1000000 * v8.tv_sec - *(void *)(v1 + 1248)) / 1000;
      uint64_t v3 = 797831567000 * *(_DWORD *)(v1 + 1244);
      this = MTBEWorker::DebugLog("Now: %d Lead %d\n", v4, v2, (v3 >> 44) + ((unint64_t)v3 >> 63) - 20);
      uint64_t v6 = 797831567000 * *(_DWORD *)(v1 + 1244);
      if ((int)((v6 >> 44) + ((unint64_t)v6 >> 63) - 20) < (int)v2)
      {
        MTBEWorker::DebugLog("Running late!\n", v5);
        this = (const char *)(*(uint64_t (**)(void, void))(**(void **)(v1 + 600) + 64))(*(void *)(v1 + 600), 0);
        int64_t v7 = 0xFFFFFF463D886968 * *(_DWORD *)(v1 + 1244);
        *(void *)(v1 + 1248) += 1000 * (int)(v2 + (v7 >> 44) + ((unint64_t)v7 >> 63) + 20);
      }
    }
  }
  return this;
}

void MT3BEngineTask::Execute(MT3BEngineTask *this, const char *a2)
{
  if (*(_DWORD *)(*((void *)this + 74) + 340) != 2)
  {
    *((unsigned char *)this + 1233) = 0;
    return;
  }
  uint64_t v3 = *((void *)this + 116);
  if (!v3) {
    return;
  }
  if (*(unsigned char *)(v3 + 2881))
  {
    MTFEFrameFiller::SyncWithUnitSearch(v3 + 2728);
    MT3BEngineTask::AdjustBaseline((const char *)this);
  }
  if (*((unsigned char *)this + 1233))
  {
    MTBEWorker::DebugLog("Baseline\n", a2);
    if (*((unsigned char *)this + 1235))
    {
      gettimeofday(&v17, 0);
      __darwin_time_t v4 = v17.tv_usec + 1000000 * v17.tv_sec - 1728000000000;
    }
    else
    {
      gettimeofday(&v17, 0);
      __darwin_time_t v4 = v17.tv_usec + 1000000 * v17.tv_sec;
    }
    *((void *)this + 156) = v4;
    *((unsigned char *)this + 1233) = 0;
  }
  __n128 updated = MTBEPhraseProcessor::UpdateEngineFromNotifier((MTBEPhraseProcessor *)*((void *)this + 116));
  if (*((unsigned char *)this + 1236)
    && ((*(uint64_t (**)(void, __n128))(**((void **)this + 75) + 96))(*((void *)this + 75), updated) & 1) == 0)
  {
    (*(void (**)(MT3BEngineTask *))(*(void *)this + 48))(this);
  }
  int v6 = *((_DWORD *)this + 311);
  int v8 = (*(uint64_t (**)(void, void, char *, __n128))(**((void **)this + 116) + 56))(*((void *)this + 116), *((void *)this + 75), (char *)this + 1244, updated);
  uint64_t v9 = "";
  if (v8) {
    uint64_t v9 = ", more to come";
  }
  MTBEWorker::DebugLog("Generated %d samples%s\n", v7, (*((_DWORD *)this + 311) - v6), v9);
  MTBEPhraseProcessor::UpdateNotifierFromEngine(*((MTBEPhraseProcessor **)this + 116));
  int v10 = *((_DWORD *)this + 311);
  if (v10 >= 44101)
  {
    *((void *)this + 156) += 1000000;
    v10 -= 22050;
    *((_DWORD *)this + 311) = v10;
  }
  if (v8)
  {
    uint64_t v11 = sSampleSchedule;
    if (v10 == v6)
    {
      gettimeofday(&v17, 0);
      __darwin_time_t v12 = v17.tv_usec + 1000000 * v17.tv_sec + 20000;
    }
    else
    {
      __darwin_time_t v12 = *((void *)this + 156) + 1000 * (1000 * v10 / 22050) - 100000;
    }
    v17.tv_sec = v12;
    BOOL v14 = (uint64_t *)v11;
    BOOL v15 = this;
    __int16 v16 = this;
  }
  else
  {
    if (*((_WORD *)this + 660)) {
      return;
    }
    uint64_t v13 = sSampleSchedule;
    gettimeofday(&v17, 0);
    v17.tv_sec = v17.tv_usec + 1000000 * v17.tv_sec + 1000;
    BOOL v14 = (uint64_t *)v13;
    BOOL v15 = (MT3BEngineTask *)((char *)this + 528);
    __int16 v16 = 0;
  }
  MTBEWorker::AddTask(v14, (uint64_t (***)(void))v15, (uint64_t)v16, &v17.tv_sec);
}

uint64_t SpeechChannelManager::CallWordCallBackProc(SpeechChannelManager *this, CFRange a2)
{
  CFIndex length = a2.length;
  CFIndex location = a2.location;
  *((void *)this + 27) = a2.location;
  uint64_t v5 = (pthread_mutex_t *)((char *)this + 144);
  uint64_t result = pthread_mutex_lock((pthread_mutex_t *)((char *)this + 144));
  if (!result)
  {
    int64_t v7 = (MT3UnicodeString *)*((void *)this + 28);
    if (v7
      && (v16.location = location, v16.CFIndex length = length,
                                   MT3UnicodeString::shouldReturnWordCallback(v7, v16)))
    {
      v17.CFIndex location = location;
      v17.CFIndex length = length;
      uint64_t v8 = MT3UnicodeString::MapRangeToSrc(*((MT3UnicodeString **)this + 28), v17);
      uint64_t v10 = v9;
      uint64_t result = pthread_mutex_unlock(v5);
      uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*((void *)this + 52);
      if (v11 && *((unsigned char *)this + 424))
      {
        uint64_t v12 = *((void *)this + 9);
        uint64_t v13 = *((void *)this + 39);
        uint64_t v14 = *((void *)this + 26);
        return v11(v12, v13, v14, v8, v10);
      }
    }
    else
    {
      return pthread_mutex_unlock(v5);
    }
  }
  return result;
}

void MT3BEngineTask::SchedulePause(MT3BEngineTask *this, int a2, int a3)
{
  uint64_t v3 = 4096;
  if (a2) {
    uint64_t v3 = 4352;
  }
  MTBEWorker::AddTask((MTBEWorker *)sSampleSchedule, (MT3BEngineTask *)((char *)this + 208), v3 + a3);
}

uint64_t MT3BEngineTask::StopAtBoundary(MT3BEngineTask *this, const char *a2)
{
  if ((a2 & 8) != 0)
  {
    MTBEWorker::DebugLog("End of Text\n", a2);
    MTBEWorker::AddTask((MTBEWorker *)sSampleSchedule, (MT3BEngineTask *)((char *)this + 336), (uint64_t)this);
  }
  if ((a2 & 4) != 0)
  {
    __darwin_time_t v4 = (pthread_mutex_t *)((char *)this + 952);
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 952));
    int64_t v7 = (void *)*((void *)this + 117);
    if (v7)
    {
      if (v7 == *((void **)this + 116))
      {
        *((unsigned char *)this + 1237) = 1;
      }
      else
      {
        uint64_t v8 = v7[533];
        v7[533] = 0;
        *((void *)this + 117) = v8;
        MTBEWorker::DebugLog("History %p\n", v6, v8);
        (*(void (**)(void *))(*v7 + 48))(v7);
      }
    }
    goto LABEL_11;
  }
  if ((a2 & 2) != 0)
  {
    MTBEWorker::DebugLog("Word Up\n", a2);
    __darwin_time_t v4 = (pthread_mutex_t *)((char *)this + 952);
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 952));
    uint64_t v5 = *((void *)this + 117);
    if (v5) {
      ++*(_WORD *)(v5 + 2874);
    }
LABEL_11:
    pthread_mutex_unlock(v4);
  }
  __int16 v9 = *((_WORD *)this + 660);
  if (!v9 || ((1 << v9) & (unint64_t)a2) == 0) {
    return 0;
  }
  uint64_t v10 = (uint64_t *)sSampleSchedule;
  gettimeofday(&v13, 0);
  v13.tv_sec = v13.tv_usec + 1000000 * v13.tv_sec;
  MTBEWorker::AddTask(v10, (uint64_t (***)(void))this + 34, (uint64_t)this, &v13.tv_sec);
  uint64_t v11 = *((void *)this + 116);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 64))(v11);
  }
  return 1;
}

uint64_t non-virtual thunk to'MT3BEngineTask::StopAtBoundary(MT3BEngineTask *this, const char *a2)
{
  return MT3BEngineTask::StopAtBoundary((MT3BEngineTask *)((char *)this - 8), a2);
}

uint64_t MT3BEngineTask::AncillaryTask::Execute(MT3BEngineTask::AncillaryTask *this, void *a2)
{
  __darwin_time_t v2 = (uint64_t (*)(void *, void *))*((void *)this + 2);
  uint64_t v3 = *((void *)this + 3);
  __darwin_time_t v4 = (void *)(*((void *)this + 1) + (v3 >> 1));
  if (v3) {
    return (*(uint64_t (**)(void))(*v4 + v2))();
  }
  else {
    return v2(v4, a2);
  }
}

uint64_t MT3BNotifier::ResetFromVoice(MTBENotifier *this, void *a2, int a3)
{
  double v5 = MTBENotifier::ResetFromVoice(this, a2, a3);
  MTBEParam::MTBEParam(v7, 0, a2, 0, 0, v5);
  this->var1 = MTBEParam::GetRate((MTBEParam *)v7) << 16;
  this->var2 = 3072 * MTBEParam::GetPitch((MTBEParam *)v7) + 2054400;
  this->var3 = MTBEParam::GetModulation((MTBEParam *)v7);
  uint64_t result = MTBEParam::GetVolume((MTBEParam *)v7);
  this->var4 = result;
  return result;
}

void MT3BNotifier::NotifyError(MTBENotifier *this, int a2, uint64_t a3)
{
  MTBENotifier::NotifyError(this, a2, a3);
  var0 = (SpeechChannelManager *)this[1].var0;

  SpeechChannelManager::RegisterCurSpeechError(var0, a2, a3);
}

uint64_t MT3BNotifier::NotifyTextDone(uint64_t this, const void **a2, unint64_t *a3, int *a4)
{
  uint64_t v4 = *(void *)(this + 64);
  double v5 = *(uint64_t (**)(void, void, const void **, unint64_t *, int *))(v4 + 376);
  if (v5 && *(unsigned char *)(v4 + 424)) {
    return v5(*(void *)(v4 + 72), *(void *)(v4 + 312), a2, a3, a4);
  }
  *a2 = 0;
  return this;
}

void MT3BNotifier::NotifySync(MT3BNotifier *this, unsigned int a2, int a3)
{
  uint64_t v3 = *(void *)(*((void *)this + 8) + 24);
  if (v3)
  {
    uint64_t v4 = 797831567000 * *(_DWORD *)(v3 + 1244);
    uint64_t v5 = *(void *)(v3 + 1248) + 1000 * a3 + (int)(1000 * ((v4 >> 44) + ((unint64_t)v4 >> 63)));
    MTBEWorker::AddTask((uint64_t *)sCallbackSchedule, (uint64_t (***)(void))(v3 + 144), a2, &v5);
  }
}

void MT3BNotifier::NotifyPhoneme(MTBENotifier *this, int a2, int a3, int a4)
{
  MTBENotifier::NotifyPhoneme(this, a2);
  uint64_t v7 = *((void *)this[1].var0 + 3);
  if (v7)
  {
    uint64_t v8 = 797831567000 * *(_DWORD *)(v7 + 1244);
    uint64_t v9 = *(void *)(v7 + 1248) + 1000 * a4 + (int)(1000 * ((v8 >> 44) + ((unint64_t)v8 >> 63))) + 1;
    MTBEWorker::AddTask((uint64_t *)sCallbackSchedule, (uint64_t (***)(void))(v7 + 80), a2, &v9);
  }
}

void MT3BNotifier::NotifyWord(MT3BNotifier *this, uint64_t a2, unsigned __int8 a3, int a4)
{
  uint64_t v4 = *(void *)(*((void *)this + 8) + 24);
  if (v4)
  {
    uint64_t v5 = 797831567000 * *(_DWORD *)(v4 + 1244);
    uint64_t v6 = *(void *)(v4 + 1248) + 1000 * a4 + (int)(1000 * ((v5 >> 44) + ((unint64_t)v5 >> 63)));
    MTBEWorker::AddTask((uint64_t *)sCallbackSchedule, (uint64_t (***)(void))(v4 + 16), a3 | (unint64_t)(a2 << 8), &v6);
  }
}

BOOL MT3BNotifier::WantSpeechDone(MT3BNotifier *this)
{
  uint64_t v1 = *((void *)this + 8);
  return *(void *)(v1 + 384) && *(unsigned char *)(v1 + 424) != 0;
}

BOOL MT3BNotifier::WantSync(MT3BNotifier *this)
{
  uint64_t v1 = *((void *)this + 8);
  return *(void *)(v1 + 392) && *(unsigned char *)(v1 + 424) != 0;
}

BOOL MT3BNotifier::WantPhoneme(MT3BNotifier *this)
{
  uint64_t v1 = *((void *)this + 8);
  return *(void *)(v1 + 408) && *(unsigned char *)(v1 + 424) != 0;
}

BOOL MT3BNotifier::WantWord(MT3BNotifier *this)
{
  uint64_t v1 = *((void *)this + 8);
  return *(void *)(v1 + 416) && *(unsigned char *)(v1 + 424) != 0;
}

uint64_t MTPBNotifier::ResetFromVoice(MTBENotifier *this, void *a2, int a3)
{
  double v5 = MTBENotifier::ResetFromVoice(this, a2, a3);
  double v6 = MTPBVoice::MTPBVoice(v9, a2, v5);
  MTBEParam::MTBEParam(v8, 1, v9, 0, 0, v6);
  this->var1 = MTBEParam::GetRate((MTBEParam *)v8) << 16;
  this->var2 = 3072 * MTBEParam::GetPitch((MTBEParam *)v8) + 2054400;
  this->var3 = MTBEParam::GetModulation((MTBEParam *)v8);
  uint64_t result = MTBEParam::GetVolume((MTBEParam *)v8);
  this->var4 = result;
  return result;
}

void InitSpeechProcessing(SpeechChannelManager *a1)
{
  pthread_once(&sScheduleInit, (void (*)(void))InitSchedules);
  MTBEWorker::DebugLog("Init %p\n", v2, a1);
  int v3 = *(_DWORD *)(*((void *)a1 + 33) + 4);
  if (v3 != 1835364215 && v3 != 1734437985) {
    operator new();
  }
  operator new();
}

void sub_1DA485C30(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C40E0E0A3EDLL);
  _Unwind_Resume(a1);
}

uint64_t ResetSpeechProcessing(SpeechChannelManager *a1)
{
  pthread_once(&sScheduleInit, (void (*)(void))InitSchedules);
  MTBEWorker::DebugLog("Reset %p\n", v2, a1);
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)a1 + 4) + 96))(*((void *)a1 + 4), *((void *)a1 + 33) + 362, 1);
  int v3 = *(uint64_t (**)(void))(**((void **)a1 + 5) + 96);

  return v3();
}

uint64_t ClearSpeechProcessing(SpeechChannelManager *a1)
{
  MTBEDebugFlags::Update(a1);
  pthread_once(&sScheduleInit, (void (*)(void))InitSchedules);
  MTBEWorker::DebugLog("Clear %p\n", v2, a1);
  pthread_mutex_lock((pthread_mutex_t *)(sSampleSchedule + 104));
  pthread_mutex_lock((pthread_mutex_t *)(sSampleSchedule + 40));
  uint64_t v3 = *((void *)a1 + 3);
  *((void *)a1 + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(sSampleSchedule + 40));
  uint64_t v4 = (pthread_mutex_t *)(sSampleSchedule + 104);

  return pthread_mutex_unlock(v4);
}

uint64_t ShutdownSpeechProcessing(SpeechChannelManager *a1)
{
  pthread_once(&sScheduleInit, (void (*)(void))InitSchedules);
  MTBEWorker::DebugLog("Shutdown %p\n", v2, a1);
  pthread_mutex_lock((pthread_mutex_t *)(sCallbackSchedule + 104));
  MTBEWorker::PurgeTasks((MTBEWorker *)sCallbackSchedule, (const char *)a1);
  pthread_mutex_unlock((pthread_mutex_t *)(sCallbackSchedule + 104));
  uint64_t result = MTBEWorker::PendingTasks((MTBEWorker *)sSampleSchedule, (MTBEWorker::Task *)&sSoundOutputDoneTask);
  if (result)
  {
    do
    {
      usleep(0x3E8u);
      uint64_t result = MTBEWorker::PendingTasks((MTBEWorker *)sSampleSchedule, (MTBEWorker::Task *)&sSoundOutputDoneTask);
    }
    while ((result & 1) != 0);
  }
  return result;
}

uint64_t StartSpeechProcessing(SpeechChannelManager *a1)
{
  MTBEDebugFlags::Update(a1);
  pthread_once(&sScheduleInit, (void (*)(void))InitSchedules);
  MTBEWorker::DebugLog("Start %p\n", v2, a1);
  pthread_mutex_lock((pthread_mutex_t *)(sSampleSchedule + 104));
  pthread_mutex_lock((pthread_mutex_t *)(sSampleSchedule + 40));
  if (*((void *)a1 + 9))
  {
    uint64_t v3 = *((void *)a1 + 3);
    *((void *)a1 + 3) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
    }
    pthread_mutex_unlock((pthread_mutex_t *)(sSampleSchedule + 40));
    if (*((void *)a1 + 26)) {
      operator new();
    }
    SpeechChannelManager::RegisterCurSpeechState((uint64_t)a1, 0);
  }
  else
  {
    pthread_mutex_unlock((pthread_mutex_t *)(sSampleSchedule + 40));
  }
  uint64_t v4 = (pthread_mutex_t *)(sSampleSchedule + 104);

  return pthread_mutex_unlock(v4);
}

void sub_1DA485FF8(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10E1C4013B793F0);
  _Unwind_Resume(a1);
}

uint64_t StopSpeechProcessing(SpeechChannelManager *a1, char a2)
{
  pthread_once(&sScheduleInit, (void (*)(void))InitSchedules);
  MTBEWorker::DebugLog("Stop %p\n", v4, a1);
  pthread_mutex_lock((pthread_mutex_t *)(sSampleSchedule + 104));
  uint64_t v5 = *((void *)a1 + 3);
  if (v5) {
    MTBEWorker::AddTask((MTBEWorker *)sSampleSchedule, (MTBEWorker::Task *)(v5 + 208), a2 + 4352);
  }
  else {
    SpeechChannelManager::RegisterCurSpeechState((uint64_t)a1, 0);
  }
  double v6 = (pthread_mutex_t *)(sSampleSchedule + 104);

  return pthread_mutex_unlock(v6);
}

uint64_t PauseSpeechProcessing(SpeechChannelManager *a1, char a2)
{
  pthread_once(&sScheduleInit, (void (*)(void))InitSchedules);
  MTBEWorker::DebugLog("Pause %p\n", v4, a1);
  pthread_mutex_lock((pthread_mutex_t *)(sSampleSchedule + 104));
  uint64_t v5 = *((void *)a1 + 3);
  if (v5) {
    MTBEWorker::AddTask((MTBEWorker *)sSampleSchedule, (MTBEWorker::Task *)(v5 + 208), a2 + 4096);
  }
  else {
    SpeechChannelManager::RegisterCurSpeechState((uint64_t)a1, 0);
  }
  double v6 = (pthread_mutex_t *)(sSampleSchedule + 104);

  return pthread_mutex_unlock(v6);
}

uint64_t ContinueSpeechProcessing(SpeechChannelManager *a1)
{
  pthread_once(&sScheduleInit, (void (*)(void))InitSchedules);
  MTBEWorker::DebugLog("Continue requested\n", v2);
  pthread_mutex_lock((pthread_mutex_t *)(sSampleSchedule + 104));
  uint64_t v4 = (MT3BEngineTask *)*((void *)a1 + 3);
  if (v4) {
    MT3BEngineTask::WakeupSoundAndContinue(v4, v3);
  }
  else {
    SpeechChannelManager::RegisterCurSpeechState((uint64_t)a1, 0);
  }
  uint64_t v5 = (pthread_mutex_t *)(sSampleSchedule + 104);

  return pthread_mutex_unlock(v5);
}

void DoTextToPhon(SpeechChannelManager *a1, const __CFString *a2, uint64_t a3, MTBEWritePhonemes *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  MTBEDebugFlags::Update(a1);
  pthread_once(&sScheduleInit, (void (*)(void))InitSchedules);
  MTBEWorker::DebugLog("TextToPhon %p\n", v6, a1);
  SLCFStringTextSource::SLCFStringTextSource(&v19, a2);
  MTBEPersistentParam::MTBEPersistentParam(&v20);
  CFLocaleRef v7 = CFLocaleCreate(0, @"en_US");
  v20.var9 = (SLLexer *)SLLexer::Create();
  CFRelease(v7);
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 0x40000000;
  v18[2] = ___Z12DoTextToPhonP20SpeechChannelManagerPK10__CFStringlP17MTBEWritePhonemes_block_invoke;
  v18[3] = &__block_descriptor_tmp_54;
  v18[4] = a1;
  (*((void (**)(SLLexer *, void *))v20.var9->var0 + 5))(v20.var9, v18);
  *(_OWORD *)&v20.var10 = *(_OWORD *)((char *)a1 + 232);
  v20.var12 = (__CFDictionary *)*((void *)a1 + 31);
  v20.var6 = (__CFDictionary *)*((void *)a1 + 6);
  uint64_t v8 = *((void *)a1 + 4);
  v17.var0 = (void **)&unk_1F347D270;
  long long v9 = *(_OWORD *)(v8 + 24);
  int v10 = *(_DWORD *)(v8 + 56);
  long long v11 = *(_OWORD *)(v8 + 40);
  *(_OWORD *)&v17.var1 = *(_OWORD *)(v8 + 8);
  *(_OWORD *)((char *)&v17.var5.newPos + 2) = v11;
  *(_DWORD *)&v17.var8[2] = v10;
  *(_OWORD *)&v17.var5.count = v9;
  (*((void (**)(SLLexer *, void))v20.var9->var0 + 2))(v20.var9, DWORD2(v11));
  (*((void (**)(SLLexer *, unsigned __int16 *))v20.var9->var0 + 3))(v20.var9, v17.var8);
  MTFEBuilder::MTFEBuilder(&v16, v20.var9);
  MTFEBuilder::ParseSentence(&v16);
  var2 = v16.var2;
  MTFEBuilder::ResetProduct(&v16, 0);
  if (var2)
  {
    v13.var0 = *(void **)((char *)a1 + 304);
    MTBEPhraseParam::MTBEPhraseParam((MTBEPhraseParam *)v15, v13, (MTFESpeechElement *)var2, *((MTBENotifier **)a1 + 4), &v17, *((MTBENotifier **)a1 + 5), &v20);
    v15[61] = 1;
    MTBEPhraseProcessor::Create(*((MTBEPhraseProcessor **)a1 + 33), (const VoiceDescription *)(*((void *)a1 + 33) + 362), v15, v14);
  }
  if (v20.var9) {
    (*((void (**)(SLLexer *))v20.var9->var0 + 7))(v20.var9);
  }
  MTFEBuilder::~MTFEBuilder(&v16);
  MTBENotifier::~MTBENotifier(&v17);
  MTBEPersistentParam::~MTBEPersistentParam(&v20);
  SLCFStringTextSource::~SLCFStringTextSource(&v19);
}

void sub_1DA4865BC(_Unwind_Exception *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, MTFEBuilder *a12, MTBENotifier *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, SLCFStringTextSource *a19, MTBEPersistentParam *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
}

uint64_t ___Z12DoTextToPhonP20SpeechChannelManagerPK10__CFStringlP17MTBEWritePhonemes_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 16))(*(void *)(*(void *)(a1 + 32) + 32), 4294967246, a2);
}

void TextToPhonemesProcessing(SpeechChannelManager *a1, const __CFString *a2, char a3, const __CFString **a4)
{
  if ((a3 & 1) == 0) {
    operator new();
  }
  operator new();
}

void sub_1DA48676C(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10B3C4043E664B7);
  _Unwind_Resume(a1);
}

void MT3BTextSource::~MT3BTextSource(SLCFStringTextSource *this)
{
  SLCFStringTextSource::~SLCFStringTextSource(this);

  JUMPOUT(0x1E016FF00);
}

const char *MTBEDoneTask::Name(MTBEDoneTask *this)
{
  return "Done";
}

void MTBEDoneTask::~MTBEDoneTask(MTBEDoneTask *this)
{
  MTBEWorker::Task::~Task(this);

  JUMPOUT(0x1E016FF00);
}

const char *MTBESoundOutputDoneTask::Name(MTBESoundOutputDoneTask *this)
{
  return "Sound Output Done";
}

void MTBESoundOutputDoneTask::~MTBESoundOutputDoneTask(MTBESoundOutputDoneTask *this)
{
  MTBEWorker::Task::~Task(this);

  JUMPOUT(0x1E016FF00);
}

uint64_t MT3BEngineTask::AncillaryTask::Name(MT3BEngineTask::AncillaryTask *this)
{
  return (uint64_t)this + 32;
}

void MT3BEngineTask::AncillaryTask::~AncillaryTask(MT3BEngineTask::AncillaryTask *this)
{
  MTBEWorker::Task::~Task(this);

  JUMPOUT(0x1E016FF00);
}

uint64_t MT3BEngineTask::Name(MT3BEngineTask *this)
{
  return (uint64_t)this + 1322;
}

void MT3BNotifier::~MT3BNotifier(MTBENotifier *this)
{
  MTBENotifier::~MTBENotifier(this);

  JUMPOUT(0x1E016FF00);
}

void MTPBNotifier::~MTPBNotifier(MTBENotifier *this)
{
  MTBENotifier::~MTBENotifier(this);

  JUMPOUT(0x1E016FF00);
}

uint64_t _GLOBAL__sub_I_MT3Processing_cp()
{
  __cxa_atexit((void (*)(void *))MTBEDoneTask::~MTBEDoneTask, sDoneTask, &dword_1DA47F000);

  return __cxa_atexit((void (*)(void *))MTBESoundOutputDoneTask::~MTBESoundOutputDoneTask, &sSoundOutputDoneTask, &dword_1DA47F000);
}

void *std::list<SpeechChannelManager *>::~list(void *a1)
{
  return a1;
}

uint64_t SpeechChannelManager::ValidSpeechChannel(uint64_t this)
{
  if ((this & 7) != 0) {
    return 0;
  }
  if (*(void *)(this + 72) != this) {
    return 0;
  }
  return this;
}

void SpeechChannelManager::SpeechChannelManager(SpeechChannelManager *this)
{
  *(void *)this = &unk_1F347D1E0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 85) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((void *)this + 34) = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  *((_DWORD *)this + 72) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 41) = 0;
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((void *)this + 52) = 0;
  *((unsigned char *)this + 424) = 1;
  *((void *)this + 54) = 0;
  *((_DWORD *)this + 110) = 0;
  *((void *)this + 59) = 0;
  *((void *)this + 37) = 0;
  *(void *)((char *)this + 358) = 0;
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  *((void *)this + 56) = 0;
  *((void *)this + 57) = 0;
  *((unsigned char *)this + 464) = 0;
  *((void *)this + 9) = this;
  __darwin_time_t v2 = (SLDictLookup *)CFLocaleCreate(0, @"en_US");
  *((void *)this + 2) = v2;
  CFLocaleRef v4 = (const __CFLocale *)SLDictLookup::Create(v2, v3);
  *((void *)this + 8) = v4;
  *((void *)this + 7) = SLPronouncer::Create(*((SLPronouncer **)this + 2), v4, v5);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 80), 0);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 144), 0);
  if (SpeechChannelManager::SpeechChannelManager(void)::sInitInactiveChannelSet != -1) {
    dispatch_once(&SpeechChannelManager::SpeechChannelManager(void)::sInitInactiveChannelSet, &__block_literal_global);
  }
  double v6 = (__CFBundle *)SLGetSpeechDictionaryBundle();
  if (v6)
  {
    CFURLRef v7 = CFBundleCopyResourceURL(v6, @"HomophonesEng", 0, 0);
    if (v7)
    {
      CFURLRef v8 = v7;
      long long v9 = CFReadStreamCreateWithFile(0, v7);
      if (v9)
      {
        int v10 = v9;
        CFReadStreamOpen(v9);
        *((void *)this + 6) = CFPropertyListCreateWithStream(0, v10, 0, 0, 0, 0);
        CFRelease(v10);
      }
      CFRelease(v8);
    }
  }
}

dispatch_queue_t ___ZN20SpeechChannelManagerC2Ev_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("MacintalkSpeechQueue", 0);
  sMacintalkSpeechChannelQueue = (uint64_t)result;
  return result;
}

void SpeechChannelManager::CloseSpeechChannel(SpeechChannelManager *this)
{
  *((void *)this + 9) = 0;
  if (*((_DWORD *)this + 85))
  {
    StopSpeechProcessing(this, 0);
    if (*((_DWORD *)this + 85))
    {
      int v2 = -1;
      unsigned int v3 = 1;
      do
      {
        usleep(0x1388u);
        if (!(v2 + 10 * (v3 / 0xA))) {
          StopSpeechProcessing(this, 0);
        }
        --v2;
        ++v3;
      }
      while (*((_DWORD *)this + 85));
    }
  }
  ClearSpeechProcessing(this);
  ShutdownSpeechProcessing(this);
  SpeechChannelManager::DisposeSoundChannel(this, 1);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN20SpeechChannelManager18CloseSpeechChannelEv_block_invoke;
  block[3] = &__block_descriptor_tmp_6;
  block[4] = this;
  dispatch_async((dispatch_queue_t)sMacintalkSpeechChannelQueue, block);
}

OpaqueExtAudioFile *SpeechChannelManager::DisposeSoundChannel(SpeechChannelManager *this, int a2)
{
  unsigned int v3 = (atomic_uint *)*((void *)this + 56);
  if (v3)
  {
    if (a2)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 40))(v3);
      unsigned int v3 = (atomic_uint *)*((void *)this + 56);
    }
    if (atomic_fetch_add(v3 + 4, 0xFFFFFFFF) == 1)
    {
      uint64_t v4 = *((void *)this + 56);
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
    *((void *)this + 56) = 0;
  }
  dispatch_queue_t result = (OpaqueExtAudioFile *)*((void *)this + 57);
  if (result)
  {
    if (*((unsigned char *)this + 464)) {
      dispatch_queue_t result = (OpaqueExtAudioFile *)ExtAudioFileDispose(result);
    }
    *((void *)this + 57) = 0;
    *((unsigned char *)this + 464) = 0;
  }
  return result;
}

void ___ZN20SpeechChannelManager18CloseSpeechChannelEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = operator new(0x18uLL);
  uint64_t v3 = sListOfActiveSpeechChannels;
  v2[1] = &sListOfActiveSpeechChannels;
  v2[2] = v1;
  void *v2 = v3;
  *(void *)(v3 + 8) = v2;
  sListOfActiveSpeechChannels = (uint64_t)v2;
  uint64_t v4 = qword_1EBE3CC78++;
  if ((unint64_t)qword_1EBE3CC78 >= 3)
  {
    uint64_t v5 = (void **)qword_1EBE3CC70;
    uint64_t v6 = *(void *)(qword_1EBE3CC70 + 16);
    uint64_t v7 = *(void *)qword_1EBE3CC70;
    *(void *)(v7 + 8) = *(void *)(qword_1EBE3CC70 + 8);
    *v5[1] = v7;
    qword_1EBE3CC78 = v4;
    operator delete(v5);
    if (v6)
    {
      CFURLRef v8 = *(void (**)(uint64_t))(*(void *)v6 + 8);
      v8(v6);
    }
  }
}

void SpeechChannelManager::~SpeechChannelManager(SpeechChannelManager *this)
{
  *(void *)this = &unk_1F347D1E0;
  *((void *)this + 9) = 0;
  ClearSpeechProcessing(this);
  ShutdownSpeechProcessing(this);
  SpeechChannelManager::DisposeSoundChannel(this, 1);
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 5);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 30);
  if (v5)
  {
    for (uint64_t i = 0; i != -80000; i -= 32)
      MEOWVectorBase::~MEOWVectorBase((void **)(v5 + 79968 + i));
    MEMORY[0x1E016FF00](v5, 0x1080C404F240F48);
  }
  uint64_t v7 = *((void *)this + 8);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 7);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)this + 28);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  CFRelease(*((CFTypeRef *)this + 2));
  long long v11 = (const void *)*((void *)this + 59);
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = (PROWReader *)*((void *)this + 38);
  if (v12)
  {
    int v13 = *((_DWORD *)this + 64);
    if (v13 == 1734437985)
    {
      PROWReader::~PROWReader(v12);
    }
    else
    {
      if (v13 != 1835364215) {
        goto LABEL_25;
      }
      MEOWReader::~MEOWReader((MEOWReader *)v12);
    }
    MEMORY[0x1E016FF00]();
  }
LABEL_25:
  uint64_t v14 = (void *)*((void *)this + 33);
  if (v14) {
    free(v14);
  }
  BOOL v15 = (SLMMapCache *)*((void *)this + 34);
  if (v15) {
    SLMMapCache::Unmap(v15, v10);
  }
  MTFEBuilder v16 = (void *)*((void *)this + 37);
  if (v16) {
    free(v16);
  }
  MTBENotifier v17 = (const void *)*((void *)this + 26);
  if (v17) {
    CFRelease(v17);
  }
  __int16 v18 = (const void *)*((void *)this + 29);
  if (v18) {
    CFRelease(v18);
  }
  SLCFStringTextSource v19 = (const void *)*((void *)this + 6);
  if (v19) {
    CFRelease(v19);
  }
  MTBEPersistentParam v20 = (const void *)*((void *)this + 31);
  if (v20) {
    CFRelease(v20);
  }
  uint64_t v21 = (const void *)*((void *)this + 54);
  if (v21) {
    _Block_release(v21);
  }
}

{
  uint64_t vars8;

  SpeechChannelManager::~SpeechChannelManager(this);

  JUMPOUT(0x1E016FF00);
}

uint64_t SpeechChannelManager::CreateSoundChannel(SpeechChannelManager *this, OpaqueExtAudioFile *a2)
{
  uint64_t result = *((void *)this + 56);
  if (!result)
  {
    uint64_t v4 = (MTBESoundOutput *)*((void *)this + 57);
    if (v4 == (MTBESoundOutput *)-1)
    {
      uint64_t v4 = 0;
    }
    else if (!v4)
    {
      MTBESoundOutput::CreateChannel((MTBESoundOutput *)*((unsigned int *)this + 110));
    }
    MTBESoundOutput::CreateFileStream(v4, a2);
  }
  return result;
}

CFIndex SpeechChannelManager::SpeakCFString(SpeechChannelManager *this, CFStringRef theString, const __CFDictionary *a3)
{
  if (*((_DWORD *)this + 85))
  {
    if (TestOption(a3, @"NoSpeechInterrupt")) {
      return -242;
    }
    if (*((_DWORD *)this + 85))
    {
      StopSpeechProcessing(this, 0);
      if (*((_DWORD *)this + 85))
      {
        int v7 = -1;
        unsigned int v8 = 1;
        do
        {
          usleep(0x1388u);
          if (!(v7 + 10 * (v8 / 0xA))) {
            StopSpeechProcessing(this, 0);
          }
          --v7;
          ++v8;
        }
        while (*((_DWORD *)this + 85));
      }
    }
  }
  uint64_t v9 = (const void *)*((void *)this + 26);
  if (v9)
  {
    CFRelease(v9);
    *((void *)this + 26) = 0;
    *((void *)this + 27) = 0;
  }
  if (theString)
  {
    CFIndex result = CFStringGetLength(theString);
    if (!result) {
      return result;
    }
    if (!pthread_mutex_lock((pthread_mutex_t *)((char *)this + 144)))
    {
      uint64_t v10 = *((void *)this + 28);
      if (v10)
      {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        *((void *)this + 28) = 0;
      }
      operator new();
    }
    CFStringRef TextWithEmojiDesc = (const __CFString *)MT3UnicodeString::getTextWithEmojiDesc(*((MT3UnicodeString **)this + 28));
    CFStringRef Copy = CFStringCreateCopy(0, TextWithEmojiDesc);
    *((void *)this + 26) = Copy;
    if (!Copy) {
      return -108;
    }
    *((_DWORD *)this + 85) = 1;
    *((void *)this + 43) = 0;
    *((void *)this + 44) = 0;
    *(void *)((char *)this + 358) = 0;
    TestOption(a3, @"PreflightThenPause");
    StartSpeechProcessing(this);
  }
  return 0;
}

void sub_1DA487308(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10F1C409C35B431);
  _Unwind_Resume(a1);
}

CFDictionaryRef TestOption(const __CFDictionary *result, const __CFString *a2)
{
  if (result)
  {
    CFIndex result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      CFBooleanRef v2 = result;
      CFTypeID v3 = CFGetTypeID(result);
      if (v3 == CFBooleanGetTypeID())
      {
        BOOL v4 = CFBooleanGetValue(v2) == 0;
      }
      else
      {
        CFTypeID v5 = CFGetTypeID(v2);
        if (v5 != CFNumberGetTypeID()) {
          return 0;
        }
        char valuePtr = 0;
        if (CFNumberGetValue(v2, kCFNumberSInt8Type, &valuePtr)) {
          BOOL v4 = valuePtr == 0;
        }
        else {
          BOOL v4 = 1;
        }
      }
      return (const __CFDictionary *)!v4;
    }
  }
  return result;
}

uint64_t SpeechChannelManager::UseVoice(SpeechChannelManager *this, VoiceSpec *a2, __CFBundle *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return -50;
  }
  if (*((_DWORD *)this + 85)) {
    return -231;
  }
  ClearSpeechProcessing(this);
  if (*a2 == *((void *)this + 32))
  {
    uint64_t v9 = (uint64_t)*a2;
    *((void *)this + 1) = a3;
    uint64_t v10 = (SpeechChannelManager **)((char *)this + 8);
    uint64_t v11 = *((void *)this + 31);
    *((void *)this + 32) = v9;
    if (v11) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  uint64_t v12 = (void *)*((void *)this + 33);
  if (v12)
  {
    free(v12);
    *((void *)this + 33) = 0;
  }
  if (*((void *)this + 34))
  {
    int v13 = *((_DWORD *)this + 64);
    if (v13 == 1734437985)
    {
      BOOL v15 = (PROWReader *)*((void *)this + 38);
      if (!v15)
      {
LABEL_18:
        SLMMapCache::Unmap(*((SLMMapCache **)this + 34), v7);
        *((void *)this + 34) = 0;
        goto LABEL_19;
      }
      PROWReader::~PROWReader(v15);
    }
    else
    {
      if (v13 != 1835364215) {
        goto LABEL_18;
      }
      uint64_t v14 = (MEOWReader *)*((void *)this + 38);
      if (!v14) {
        goto LABEL_18;
      }
      MEOWReader::~MEOWReader(v14);
    }
    MEMORY[0x1E016FF00]();
    goto LABEL_18;
  }
LABEL_19:
  MTFEBuilder v16 = (void *)*((void *)this + 37);
  if (v16)
  {
    free(v16);
    *((void *)this + 37) = 0;
  }
  MTBENotifier v17 = (const void *)*((void *)this + 31);
  if (v17)
  {
    CFRelease(v17);
    *((void *)this + 31) = 0;
  }
  uint64_t v18 = (uint64_t)*a2;
  *((void *)this + 1) = a3;
  uint64_t v10 = (SpeechChannelManager **)((char *)this + 8);
  *((void *)this + 32) = v18;
LABEL_24:
  *((void *)this + 31) = SpeechChannelManager::ReadVoicePitchCoefficients(a3, (__CFBundle *)v7);
LABEL_25:
  if (*((void *)this + 33)) {
    goto LABEL_26;
  }
  uint64_t result = SpeechChannelManager::ReadPCMVoiceData(*((SpeechChannelManager **)this + 1), *((__CFBundle **)this + 32), (void *)this + 38, (MTBEVoiceContents *)this + 35, (unint64_t *)this + 34, v8);
  if ((result & 0x8000000000000000) == 0)
  {
    SpeechChannelManager::ReadVoiceDescription(*v10, (SpeechChannelManager *)((char *)this + 264), v19);
    if (*((void *)this + 33)) {
LABEL_26:
    }
      InitSpeechProcessing(this);
    CFStringRef Identifier = CFBundleGetIdentifier(a3);
    CFStringGetCString(Identifier, buffer, 200, 0x8000100u);
    asl_log(0, 0, 3, "SpeechChannelManager::UseVoice - %s voiceDescription file reading failed", buffer);
    return -241;
  }
  return result;
}

CFPropertyListRef SpeechChannelManager::ReadVoicePitchCoefficients(SpeechChannelManager *this, __CFBundle *a2)
{
  CFURLRef v2 = CFBundleCopyResourceURL(this, @"PitchCoeffs.plist", 0, 0);
  if (!v2) {
    return 0;
  }
  CFURLRef v3 = v2;
  BOOL v4 = CFReadStreamCreateWithFile(0, v2);
  if (v4)
  {
    CFTypeID v5 = v4;
    CFReadStreamOpen(v4);
    CFPropertyListRef v6 = CFPropertyListCreateWithStream(0, v5, 0, 0, 0, 0);
    CFRelease(v5);
  }
  else
  {
    CFPropertyListRef v6 = 0;
  }
  CFRelease(v3);
  return v6;
}

uint64_t SpeechChannelManager::ReadPCMVoiceData(SpeechChannelManager *this, __CFBundle *a2, void *a3, MTBEVoiceContents *a4, unint64_t *a5, void **a6)
{
  int v8 = (int)a2;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = CFBundleCopyResourceURL(this, @"PCMWave", 0, 0);
  uint64_t v22 = 0;
  if (v10)
  {
    uint64_t v12 = v10;
    *(void *)buffer = &unk_1F347D230;
    BOOL v25 = v8 == 1835364215;
    int v13 = (void *)SLMMapCache::Map(v10, (const __CFURL *)buffer, v11);
    uint64_t v22 = v13;
    a4->var0 = v24;
    CFRelease(v12);
    if (v13 == (void *)0xFFFFFFFFLL)
    {
      BOOL v15 = (FILE *)*MEMORY[0x1E4F143C8];
      MTFEBuilder v16 = __error();
      fprintf(v15, "Speech Synthesis can't map voice file (%d)\n", *v16);
      uint64_t v22 = 0;
    }
    else if (v13 && *(_DWORD *)&buffer[8] != -1)
    {
      if (v25)
      {
        MEOWReader::AdvisePreload((MEOWReader *)*(unsigned int *)&buffer[8], (long long *)&v22, (unint64_t)v24);
      }
      else
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        LODWORD(v21) = a4->var0;
        fcntl(*(int *)&buffer[8], 44, &v20);
      }
      if (v8 != 1835364215) {
        close(*(int *)&buffer[8]);
      }
    }
    SLMMapHint::~SLMMapHint((SLMMapHint *)buffer);
    uint64_t v14 = v22;
  }
  else
  {
    uint64_t v14 = 0;
  }
  BOOL v17 = v8 == 1734437985 || v8 == 1835364215;
  if (!v17 || v14)
  {
    if (v8 == 1835364215)
    {
      LODWORD(v24) = 0;
      *(_OWORD *)buffer = *(_OWORD *)"ceda caa";
      if (AudioComponentCount((const AudioComponentDescription *)buffer)) {
        operator new();
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        SpeechChannelManager::ReadPCMVoiceData();
      }
      return -241;
    }
    else
    {
      if (v8 == 1734437985) {
        operator new();
      }
      uint64_t result = 0;
      *a3 = v14;
    }
  }
  else
  {
    CFStringRef Identifier = CFBundleGetIdentifier(this);
    CFStringGetCString(Identifier, buffer, 200, 0x8000100u);
    asl_log(0, 0, 3, "SpeechChannelManager::ReadPCMVoiceData - %s PCMWave file not found", buffer);
    return -43;
  }
  return result;
}

void sub_1DA487960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  SLMMapHint::~SLMMapHint((SLMMapHint *)va);
  _Unwind_Resume(a1);
}

uint64_t SpeechChannelManager::ReadVoiceDescription(SpeechChannelManager *this, __CFBundle *a2, void **a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = 0;
  if (OpenResourceFile(this, @"VoiceDescription", &v19))
  {
    CFStringRef Identifier = CFBundleGetIdentifier(this);
    CFStringGetCString(Identifier, (char *)&buffer, 200, 0x8000100u);
    asl_log(0, 0, 3, "SpeechChannelManager::ReadVoiceDescription VoiceDescription file -  Open %s failed with code %ld");
LABEL_4:
    CFPropertyListRef v6 = 0;
    goto LABEL_5;
  }
  if (fstat(v19, &buffer)) {
    goto LABEL_4;
  }
  off_t st_size = buffer.st_size;
  CFPropertyListRef v6 = (char *)malloc_type_malloc(buffer.st_size, 0x664202A7uLL);
  if (v6 && read(v19, v6, st_size) != st_size)
  {
    free(v6);
    __error();
    asl_log(0, 0, 3, "SpeechChannelManager::ReadVoiceDescription -  Read failed with code %d");
    goto LABEL_4;
  }
  int8x8_t v9 = vrev32_s8(*(int8x8_t *)(v6 + 4));
  *(int8x8_t *)(v6 + 4) = v9;
  *((_DWORD *)v6 + 3) = bswap32(*((_DWORD *)v6 + 3));
  *((int8x8_t *)v6 + 42) = vrev16_s8(*(int8x8_t *)(v6 + 336));
  *((_WORD *)v6 + 172) = bswap32(*((unsigned __int16 *)v6 + 172)) >> 16;
  *(int8x16_t *)(v6 + 346) = vrev32q_s8(*(int8x16_t *)(v6 + 346));
  if (v9.i32[0] == 1734437985)
  {
LABEL_11:
    *(int8x16_t *)(v6 + 362) = vrev16q_s8(*(int8x16_t *)(v6 + 362));
    *((_WORD *)v6 + 189) = bswap32(*((unsigned __int16 *)v6 + 189)) >> 16;
    *((_DWORD *)v6 + 95) = bswap32(*((_DWORD *)v6 + 95));
    *((int8x8_t *)v6 + 48) = vrev16_s8(*(int8x8_t *)(v6 + 384));
    *((_DWORD *)v6 + 98) = bswap32(*((_DWORD *)v6 + 98));
    *(int8x16_t *)(v6 + 396) = vrev16q_s8(*(int8x16_t *)(v6 + 396));
    goto LABEL_5;
  }
  if (v9.i32[0] != 1836346163)
  {
    if (v9.i32[0] != 1835364215)
    {
      fwrite("Unknown voice creator in SpeechChannelManager::ReadVoiceDescription\n", 0x44uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      goto LABEL_5;
    }
    goto LABEL_11;
  }
  int8x16_t v10 = vrev16q_s8(*(int8x16_t *)(v6 + 378));
  *(int8x16_t *)(v6 + 362) = vrev16q_s8(*(int8x16_t *)(v6 + 362));
  *(int8x16_t *)(v6 + 378) = v10;
  int8x16_t v11 = vrev16q_s8(*(int8x16_t *)(v6 + 410));
  *(int8x16_t *)(v6 + 394) = vrev16q_s8(*(int8x16_t *)(v6 + 394));
  *(int8x16_t *)(v6 + 410) = v11;
  *(int8x8_t *)(v6 + 426) = vrev16_s8(*(int8x8_t *)(v6 + 426));
  *(_DWORD *)(v6 + 434) = bswap32(*(_DWORD *)(v6 + 434));
  int8x8_t v12 = vrev16_s8(*(int8x8_t *)(v6 + 438));
  *(_DWORD *)(v6 + 446) = bswap32(*(_DWORD *)(v6 + 446));
  *((_WORD *)v6 + 225) = bswap32(*((unsigned __int16 *)v6 + 225)) >> 16;
  *((_WORD *)v6 + 226) = bswap32(*((unsigned __int16 *)v6 + 226)) >> 16;
  *((_WORD *)v6 + 227) = bswap32(*((unsigned __int16 *)v6 + 227)) >> 16;
  uint64_t v13 = 456;
  *(int8x8_t *)(v6 + 438) = v12;
  do
  {
    *(int8x16_t *)&v6[v13] = vrev16q_s8(*(int8x16_t *)&v6[v13]);
    v13 += 16;
  }
  while (v13 != 552);
  do
  {
    *(int8x16_t *)&v6[v13] = vrev16q_s8(*(int8x16_t *)&v6[v13]);
    v13 += 16;
  }
  while (v13 != 648);
  *((_WORD *)v6 + 324) = bswap32(*((unsigned __int16 *)v6 + 324)) >> 16;
  *((_WORD *)v6 + 325) = bswap32(*((unsigned __int16 *)v6 + 325)) >> 16;
  *((_DWORD *)v6 + 163) = bswap32(*((_DWORD *)v6 + 163));
  *((int8x16_t *)v6 + 41) = vrev16q_s8(*((int8x16_t *)v6 + 41));
  *((_WORD *)v6 + 336) = bswap32(*((unsigned __int16 *)v6 + 336)) >> 16;
  *((_WORD *)v6 + 337) = bswap32(*((unsigned __int16 *)v6 + 337)) >> 16;
  *((_WORD *)v6 + 338) = bswap32(*((unsigned __int16 *)v6 + 338)) >> 16;
  *(int8x16_t *)(v6 + 678) = vrev32q_s8(*(int8x16_t *)(v6 + 678));
  *(int8x16_t *)(v6 + 694) = vrev32q_s8(*(int8x16_t *)(v6 + 694));
  unsigned int v14 = *((unsigned __int16 *)v6 + 355);
  __int16 v15 = __rev16(v14);
  *((_WORD *)v6 + 355) = v15;
  if (v14)
  {
    unint64_t v16 = v15;
    uint64_t v17 = 356;
    do
    {
      *(_WORD *)&v6[2 * v17] = bswap32(*(unsigned __int16 *)&v6[2 * v17]) >> 16;
      unint64_t v18 = v17 - 355;
      ++v17;
    }
    while (v18 < v16);
  }
LABEL_5:
  *(void *)a2 = v6;
  return close(v19);
}

uint64_t MEOWMMapHint::MappedSize(MEOWMMapHint *this)
{
  if (*((unsigned char *)this + 32)) {
    return MEOWReader::MappedSize((MEOWReader *)*((unsigned int *)this + 2), *((void *)this + 2));
  }
  else {
    return *((void *)this + 2);
  }
}

void SpeechChannelManager::RegisterCurSpeechState(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 256) != 1835364215)
  {
    BOOL v4 = *(const void **)(a1 + 272);
    if (v4)
    {
      int v5 = *(_DWORD *)(a1 + 340);
      if (v5 != a2)
      {
        if (a2 == 2)
        {
          *(_DWORD *)(a1 + 288) = 0;
          if (mlock(v4, *(void *)(a1 + 280)))
          {
            unint64_t v9 = *(void *)(a1 + 280);
            if (v9)
            {
              unint64_t v10 = 0;
              uint64_t v11 = *(void *)(a1 + 272);
              int v12 = *(_DWORD *)(a1 + 288);
              do
              {
                v12 += *(char *)(v11 + v10);
                *(_DWORD *)(a1 + 288) = v12;
                v10 += 4096;
              }
              while (v10 < v9);
            }
          }
        }
        else if (v5 == 2)
        {
          munlock(v4, *(void *)(a1 + 280));
        }
      }
    }
  }
  BOOL v6 = (*(_DWORD *)(a1 + 340) & 0xFFFFFFFE) != 2;
  *(_DWORD *)(a1 + 340) = a2;
  if (((((a2 & 0xFFFFFFFE) == 2) ^ v6) & 1) == 0) {
    SpeechBusy();
  }
  int v7 = *(void **)(a1 + 432);
  if (v7)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v7);
  }
}

void SpeechChannelManager::RegisterCurSpeechError(SpeechChannelManager *this, CFIndex a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    BOOL v6 = (pthread_mutex_t *)((char *)this + 80);
    if (!pthread_mutex_lock((pthread_mutex_t *)((char *)this + 80)))
    {
      ++*((_WORD *)this + 172);
      *((_WORD *)this + 178) = a2;
      *(void *)((char *)this + 358) = a3;
      if (!*((_WORD *)this + 173))
      {
        *((_WORD *)this + 173) = a2;
        *(void *)((char *)this + 348) = a3;
      }
      pthread_mutex_unlock(v6);
    }
    if (*((void *)this + 46))
    {
      if (*((unsigned char *)this + 424))
      {
        userInfoKeys[0] = @"SpokenString";
        userInfoKeys[1] = @"CharacterOffset";
        userInfoValues = (void *)*((void *)this + 26);
        int valuePtr = a3;
        CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        CFErrorRef v7 = CFErrorCreateWithUserInfoKeysAndValues(0, (CFErrorDomain)*MEMORY[0x1E4F1D158], a2, (const void *const *)userInfoKeys, (const void *const *)&userInfoValues, 2);
        CFRelease(cf);
        if (v7)
        {
          int v8 = (void (*)(void, void, CFErrorRef))*((void *)this + 46);
          if (v8)
          {
            if (*((unsigned char *)this + 424)) {
              v8(*((void *)this + 9), *((void *)this + 39), v7);
            }
          }
          CFRelease(v7);
        }
      }
    }
  }
}

uint64_t SpeechChannelManager::GetCurSpeechErrors(SpeechChannelManager *this)
{
  *(_OWORD *)__p = 0u;
  long long v12 = 0u;
  long long v10 = 0u;
  CFURLRef v2 = (pthread_mutex_t *)((char *)this + 80);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 80));
  int valuePtr = *((__int16 *)this + 172);
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  SLCFDictionaryBuilder::push_back((SLCFDictionaryBuilder *)&v10, @"Count", v3);
  int valuePtr = *((__int16 *)this + 173);
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  SLCFDictionaryBuilder::push_back((SLCFDictionaryBuilder *)&v10, @"OldestCode", v4);
  int valuePtr = *((__int16 *)this + 178);
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  SLCFDictionaryBuilder::push_back((SLCFDictionaryBuilder *)&v10, @"NewestCode", v5);
  int valuePtr = *(void *)((char *)this + 348);
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  SLCFDictionaryBuilder::push_back((SLCFDictionaryBuilder *)&v10, @"OldestCharacterOffset", v6);
  int valuePtr = *(void *)((char *)this + 358);
  CFNumberRef v7 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  SLCFDictionaryBuilder::push_back((SLCFDictionaryBuilder *)&v10, @"NewestCharacterOffset", v7);
  pthread_mutex_unlock(v2);
  uint64_t Dictionary = SLCFDictionaryBuilder::CreateDictionary((SLCFDictionaryBuilder *)&v10);
  if (__p[1])
  {
    *(void **)&long long v12 = __p[1];
    operator delete(__p[1]);
  }
  SLCFArrayBuilder::~SLCFArrayBuilder((SLCFArrayBuilder *)&v10);
  return Dictionary;
}

void sub_1DA488154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void SLCFDictionaryBuilder::~SLCFDictionaryBuilder(SLCFDictionaryBuilder *this)
{
  CFURLRef v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }

  SLCFArrayBuilder::~SLCFArrayBuilder(this);
}

void SpeechChannelManager::CopyPhonemesFromText(SpeechChannelManager *this, const __CFString *a2, const __CFString **a3)
{
  *((unsigned char *)this + 424) = 0;
  TextToPhonemesProcessing(this, a2, *((void *)this + 40), a3);
}

CFComparisonResult SpeechChannelManager::CopySpeechProperty(SpeechChannelManager *this, CFStringRef theString1, const void **a3)
{
  if (!a3) {
    return -50;
  }
  if (CFEqual(theString1, @"stat"))
  {
    *(_OWORD *)__p = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    int valuePtr = (*((_DWORD *)this + 85) - 1) < 2;
    CFNumberRef v8 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    SLCFDictionaryBuilder::push_back((SLCFDictionaryBuilder *)&v24, @"OutputBusy", v8);
    int valuePtr = *((_DWORD *)this + 85) == 3;
    CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    SLCFDictionaryBuilder::push_back((SLCFDictionaryBuilder *)&v24, @"OutputPaused", v9);
    CFStringRef v10 = (const __CFString *)*((void *)this + 26);
    if (v10) {
      LODWORD(v10) = CFStringGetLength(v10);
    }
    int valuePtr = v10 - *((_DWORD *)this + 54);
    CFNumberRef v11 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    SLCFDictionaryBuilder::push_back((SLCFDictionaryBuilder *)&v24, @"NumberOfCharactersLeft", v11);
    if (*((_DWORD *)this + 85) == 2 && (uint64_t v12 = *((void *)this + 4)) != 0) {
      int v13 = *(__int16 *)(v12 + 46);
    }
    else {
      int v13 = -1;
    }
    int valuePtr = v13;
    CFNumberRef v14 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    SLCFDictionaryBuilder::push_back((SLCFDictionaryBuilder *)&v24, @"PhonemeCode", v14);
    *a3 = (const void *)SLCFDictionaryBuilder::CreateDictionary((SLCFDictionaryBuilder *)&v24);
    if (__p[1])
    {
      *(void **)&long long v26 = __p[1];
      operator delete(__p[1]);
    }
    SLCFArrayBuilder::~SLCFArrayBuilder((SLCFArrayBuilder *)&v24);
    return 0;
  }
  if (CFEqual(theString1, @"rate"))
  {
    int v15 = *(_DWORD *)(*((void *)this + 4) + 8);
LABEL_34:
    *(float *)&long long v24 = (float)v15 * 0.000015259;
    CFNumberType v16 = kCFNumberFloatType;
LABEL_35:
    CFNumberRef CurSpeechErrors = CFNumberCreate(0, v16, &v24);
    goto LABEL_36;
  }
  if (CFEqual(theString1, @"pbas"))
  {
    int v15 = *(_DWORD *)(*((void *)this + 4) + 12);
    goto LABEL_34;
  }
  if (CFEqual(theString1, @"pmod"))
  {
    int v15 = *(_DWORD *)(*((void *)this + 4) + 16);
    goto LABEL_34;
  }
  if (CFEqual(theString1, @"volm"))
  {
    int v15 = *(_DWORD *)(*((void *)this + 4) + 20);
    goto LABEL_34;
  }
  if (CFEqual(theString1, @"erro"))
  {
    CFNumberRef CurSpeechErrors = (CFNumberRef)SpeechChannelManager::GetCurSpeechErrors(this);
    goto LABEL_36;
  }
  if (CFEqual(theString1, @"inpt"))
  {
    if ((*(_DWORD *)(*((void *)this + 4) + 48) & 0xF) == 3)
    {
      CFComparisonResult result = kCFCompareEqualTo;
      uint64_t v19 = &kSpeechModeTune;
    }
    else
    {
      CFComparisonResult result = kCFCompareEqualTo;
      if ((*(_DWORD *)(*((void *)this + 4) + 48) & 0xF) == 2) {
        uint64_t v19 = &kSpeechModePhoneme;
      }
      else {
        uint64_t v19 = &kSpeechModeText;
      }
    }
    goto LABEL_50;
  }
  CFComparisonResult result = CFStringCompare(theString1, @"char", 0);
  if (result == kCFCompareEqualTo)
  {
    BOOL v20 = (*(_DWORD *)(*((void *)this + 4) + 48) & 0x10) == 0;
    goto LABEL_45;
  }
  CFComparisonResult result = CFStringCompare(theString1, @"nmbr", 0);
  if (result == kCFCompareEqualTo)
  {
    BOOL v20 = (*(_DWORD *)(*((void *)this + 4) + 48) & 0x20) == 0;
LABEL_45:
    if (v20) {
      uint64_t v19 = &kSpeechModeNormal;
    }
    else {
      uint64_t v19 = &kSpeechModeLiteral;
    }
LABEL_50:
    unint64_t v18 = *v19;
    goto LABEL_38;
  }
  if (CFEqual(theString1, @"sync"))
  {
    LODWORD(v24) = *((_DWORD *)this + 84);
LABEL_52:
    CFNumberType v16 = kCFNumberIntType;
    goto LABEL_35;
  }
  if (CFEqual(theString1, @"phsy"))
  {
    CFNumberRef CurSpeechErrors = (CFNumberRef)SLDictLookup::CreatePhonemeSymbols(*((SLDictLookup **)this + 2), v7);
    goto LABEL_36;
  }
  if (CFEqual(theString1, @"popt"))
  {
    uint64_t v21 = *((void *)this + 40);
LABEL_56:
    *(void *)&long long v24 = v21;
    CFNumberType v16 = kCFNumberLongType;
    goto LABEL_35;
  }
  if (CFEqual(theString1, kSpeechDiphoneOptionsProperty))
  {
    uint64_t v21 = *((void *)this + 41);
    goto LABEL_56;
  }
  if (CFStringCompare(theString1, kSpeechDiphoneLogProperty, 0))
  {
    if (CFEqual(theString1, kSpeechDiphoneStatisticsProperty))
    {
      uint64_t v23 = (MTMBDiphoneStatistics *)*((void *)this + 30);
      if (!v23)
      {
        unint64_t v18 = 0;
        goto LABEL_37;
      }
      CFNumberRef CurSpeechErrors = (CFNumberRef)MTMBDiphoneStatistics::CreateArray(v23);
LABEL_36:
      unint64_t v18 = CurSpeechErrors;
LABEL_37:
      CFComparisonResult result = kCFCompareEqualTo;
LABEL_38:
      *a3 = v18;
      return result;
    }
    if (CFStringCompare(theString1, kSpeechPreloadVoiceMetadataProperty, 0)) {
      return -231;
    }
    if (*((_DWORD *)this + 64) == 1835364215) {
      MEOWReader::PercentageResidentMetadata(*((MEOWReader **)this + 38));
    }
    LODWORD(v24) = 100;
    goto LABEL_52;
  }
  *a3 = (const void *)*((void *)this + 29);
  if (!*((void *)this + 29)) {
    return 0;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  CFComparisonResult result = kCFCompareEqualTo;
  *((void *)this + 29) = Mutable;
  return result;
}

void sub_1DA4886EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t SpeechChannelManager::GetSpeechInfo(SpeechChannelManager *this, int a2, void *a3)
{
  if (a2 != 2020896356) {
    return -231;
  }
  if (*(_DWORD *)a3 != 1836346163 || *((_DWORD *)this + 64) != 1836346163 || *((_DWORD *)a3 + 1) != 1986290036) {
    return -231;
  }
  memcpy(*((void **)a3 + 1), (const void *)(*((void *)this + 33) + 362), 0x160uLL);
  return 0;
}

uint64_t SpeechChannelManager::SetSpeechProperty(SpeechChannelManager *this, CFStringRef theString1, const __CFNumber *a3)
{
  if (CFEqual(theString1, @"sdcb"))
  {
    if (a3)
    {
      CFStringRef valuePtr = 0;
      int Value = CFNumberGetValue(a3, kCFNumberLongType, &valuePtr);
      CFStringRef v7 = valuePtr;
      if (!Value) {
        CFStringRef v7 = 0;
      }
    }
    else
    {
      CFStringRef v7 = 0;
    }
    *((void *)this + 48) = v7;
    return 0;
  }
  if (CFEqual(theString1, @"phcb"))
  {
    if (a3)
    {
      CFStringRef valuePtr = 0;
      int v8 = CFNumberGetValue(a3, kCFNumberLongType, &valuePtr);
      CFStringRef v9 = valuePtr;
      if (!v8) {
        CFStringRef v9 = 0;
      }
    }
    else
    {
      CFStringRef v9 = 0;
    }
    *((void *)this + 51) = v9;
    return 0;
  }
  if (CFEqual(theString1, @"sycb"))
  {
    if (a3)
    {
      CFStringRef valuePtr = 0;
      int v10 = CFNumberGetValue(a3, kCFNumberLongType, &valuePtr);
      CFStringRef v11 = valuePtr;
      if (!v10) {
        CFStringRef v11 = 0;
      }
    }
    else
    {
      CFStringRef v11 = 0;
    }
    *((void *)this + 49) = v11;
    return 0;
  }
  if (CFEqual(theString1, @"wccb"))
  {
    if (a3)
    {
      CFStringRef valuePtr = 0;
      int v12 = CFNumberGetValue(a3, kCFNumberLongType, &valuePtr);
      CFStringRef v13 = valuePtr;
      if (!v12) {
        CFStringRef v13 = 0;
      }
    }
    else
    {
      CFStringRef v13 = 0;
    }
    *((void *)this + 52) = v13;
    return 0;
  }
  if (CFEqual(theString1, @"tdcb"))
  {
    if (a3)
    {
      CFStringRef valuePtr = 0;
      int v14 = CFNumberGetValue(a3, kCFNumberLongType, &valuePtr);
      CFStringRef v15 = valuePtr;
      if (!v14) {
        CFStringRef v15 = 0;
      }
    }
    else
    {
      CFStringRef v15 = 0;
    }
    *((void *)this + 47) = v15;
    return 0;
  }
  if (CFEqual(theString1, @"eccb"))
  {
    if (a3)
    {
      CFStringRef valuePtr = 0;
      int v16 = CFNumberGetValue(a3, kCFNumberLongType, &valuePtr);
      CFStringRef v17 = valuePtr;
      if (!v16) {
        CFStringRef v17 = 0;
      }
    }
    else
    {
      CFStringRef v17 = 0;
    }
    *((void *)this + 46) = v17;
    return 0;
  }
  if (CFEqual(theString1, kSpeechLatencyCallBack))
  {
    if (a3)
    {
      CFStringRef valuePtr = 0;
      int v18 = CFNumberGetValue(a3, kCFNumberLongType, &valuePtr);
      CFStringRef v19 = valuePtr;
      if (!v18) {
        CFStringRef v19 = 0;
      }
    }
    else
    {
      CFStringRef v19 = 0;
    }
    *((void *)this + 50) = v19;
    return 0;
  }
  if (CFEqual(theString1, @"refc"))
  {
    *((void *)this + 39) = longVal(a3);
    return 0;
  }
  if (CFEqual(theString1, @"rate"))
  {
    int v20 = fixedVal(a3);
    *(_DWORD *)(*((void *)this + 4) + 8) = v20;
    *(_DWORD *)(*((void *)this + 5) + 8) = v20;
    return 0;
  }
  if (CFEqual(theString1, @"volm"))
  {
    int v22 = fixedVal(a3);
    *(_DWORD *)(*((void *)this + 4) + 20) = v22;
    *(_DWORD *)(*((void *)this + 5) + 20) = v22;
    return 0;
  }
  if (CFEqual(theString1, @"pbas"))
  {
    int v23 = fixedVal(a3);
    *(_DWORD *)(*((void *)this + 4) + 12) = v23;
    *(_DWORD *)(*((void *)this + 5) + 12) = v23;
    return 0;
  }
  if (CFEqual(theString1, @"pmod"))
  {
    int v24 = fixedVal(a3);
    *(_DWORD *)(*((void *)this + 4) + 16) = v24;
    *(_DWORD *)(*((void *)this + 5) + 16) = v24;
    return 0;
  }
  if (CFEqual(theString1, @"rset"))
  {
    ResetSpeechProcessing(this);
    return 0;
  }
  if (CFEqual(theString1, @"inpt"))
  {
    if (!a3) {
      return -50;
    }
    if (CFStringCompare((CFStringRef)a3, @"TEXT", 0))
    {
      if (CFStringCompare((CFStringRef)a3, @"PHON", 0))
      {
        if (CFStringCompare((CFStringRef)a3, @"TUNE", 0)) {
          return -50;
        }
        uint64_t v25 = *((void *)this + 4);
        unsigned int v26 = *(_DWORD *)(v25 + 48) & 0xFFFFFFF0 | 3;
      }
      else
      {
        uint64_t v25 = *((void *)this + 4);
        unsigned int v26 = *(_DWORD *)(v25 + 48) & 0xFFFFFFF0 | 2;
      }
    }
    else
    {
      uint64_t v25 = *((void *)this + 4);
      unsigned int v26 = *(_DWORD *)(v25 + 48) & 0xFFFFFFF0;
    }
LABEL_120:
    *(_DWORD *)(v25 + 48) = v26;
    return 0;
  }
  if (CFEqual(theString1, @"char"))
  {
    if (!a3) {
      return -50;
    }
    if (CFStringCompare((CFStringRef)a3, @"NORM", 0))
    {
      if (CFStringCompare((CFStringRef)a3, @"LTRL", 0)) {
        return -50;
      }
      uint64_t v25 = *((void *)this + 4);
      unsigned int v26 = *(_DWORD *)(v25 + 48) | 0x10;
    }
    else
    {
      uint64_t v25 = *((void *)this + 4);
      unsigned int v26 = *(_DWORD *)(v25 + 48) & 0xFFFFFFEF;
    }
    goto LABEL_120;
  }
  if (CFEqual(theString1, @"nmbr"))
  {
    if (!a3) {
      return -50;
    }
    if (CFStringCompare((CFStringRef)a3, @"NORM", 0))
    {
      if (CFStringCompare((CFStringRef)a3, @"LTRL", 0)) {
        return -50;
      }
      uint64_t v25 = *((void *)this + 4);
      unsigned int v26 = *(_DWORD *)(v25 + 48) | 0x20;
    }
    else
    {
      uint64_t v25 = *((void *)this + 4);
      unsigned int v26 = *(_DWORD *)(v25 + 48) & 0xFFFFFFDF;
    }
    goto LABEL_120;
  }
  if (CFEqual(theString1, @"dlim"))
  {
    CFStringRef valuePtr = 0;
    if (CFDictionaryGetValueIfPresent(a3, @"Prefix", (const void **)&valuePtr))
    {
      CFIndex Length = CFStringGetLength(valuePtr);
      if (Length)
      {
        if (Length != 1) {
          CFStringGetCharacterAtIndex(valuePtr, 1);
        }
        CFStringGetCharacterAtIndex(valuePtr, 0);
      }
    }
    if (CFDictionaryGetValueIfPresent(a3, @"Suffix", (const void **)&valuePtr))
    {
      CFIndex v28 = CFStringGetLength(valuePtr);
      if (v28)
      {
        if (v28 != 1) {
          CFStringGetCharacterAtIndex(valuePtr, 3);
        }
        CFStringGetCharacterAtIndex(valuePtr, 2);
      }
    }
    return 0;
  }
  if (CFEqual(theString1, @"opaf"))
  {
    if ((unint64_t)a3 | *((void *)this + 57))
    {
      SpeechChannelManager::DisposeSoundChannel(this, 1);
      if (a3)
      {
        if (ExtAudioFileCreateWithURL(a3, 0x41494646u, &SpeechChannelManager::SetSpeechProperty(__CFString const*,void const*)::sDefaultAudioFormat, 0, 1u, (ExtAudioFileRef *)this + 57))
        {
          *((void *)this + 57) = -1;
        }
        else
        {
          *((unsigned char *)this + 464) = 1;
        }
      }
    }
    return 0;
  }
  if (CFEqual(theString1, @"opax"))
  {
    if ((unint64_t)a3 | *((void *)this + 57))
    {
      SpeechChannelManager::DisposeSoundChannel(this, 1);
      if (a3) {
        CFNumberGetValue(a3, kCFNumberLongType, (char *)this + 456);
      }
    }
    return 0;
  }
  if (CFEqual(theString1, @"chnm"))
  {
    int v29 = (const void *)*((void *)this + 59);
    if (v29) {
      CFRelease(v29);
    }
    *((void *)this + 59) = a3;
    if (a3) {
      CFRetain(a3);
    }
    unsigned int v30 = (MTBESoundOutput *)*((void *)this + 56);
    if (v30) {
      MTBESoundOutput::SetChannelMap(v30, *((CFArrayRef *)this + 59));
    }
    return 0;
  }
  if (CFEqual(theString1, @"popt"))
  {
    *((void *)this + 40) = longVal(a3);
    return 0;
  }
  if (CFEqual(theString1, kSpeechDiphoneOptionsProperty))
  {
    *((void *)this + 41) = longVal(a3);
    int v31 = (const void *)*((void *)this + 29);
    if (v31) {
      CFRelease(v31);
    }
    int v32 = (const void *)*((void *)this + 30);
    if (v32) {
      CFRelease(v32);
    }
    uint64_t v33 = *((void *)this + 41);
    if (v33)
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      uint64_t v33 = *((void *)this + 41);
    }
    else
    {
      CFMutableArrayRef Mutable = 0;
    }
    *((void *)this + 29) = Mutable;
    if ((v33 & 2) != 0) {
      operator new();
    }
    *((void *)this + 30) = 0;
    return 0;
  }
  if (CFEqual(theString1, @"xtnd"))
  {
    CFNumberRef v35 = (const __CFNumber *)CFDictionaryGetValue(a3, @"creator");
    if (longVal(v35) == (const __CFNumber *)1836346163 && *((_DWORD *)this + 64) == 1836346163)
    {
      CFNumberRef v36 = (const __CFNumber *)CFDictionaryGetValue(a3, @"selector");
      if (longVal(v36) == (const __CFNumber *)1986290036)
      {
        CFDataRef v37 = (const __CFData *)CFDictionaryGetValue(a3, @"data");
        uint64_t v38 = (void *)(*((void *)this + 33) + 362);
        BytePtr = CFDataGetBytePtr(v37);
        memmove(v38, BytePtr, 0x160uLL);
        return 0;
      }
    }
    return -231;
  }
  if (CFEqual(theString1, kSpeechPitchCoeffProperty))
  {
    __int16 v40 = (const void *)*((void *)this + 31);
    if (v40) {
      CFRelease(v40);
    }
    CFDictionaryRef Copy = CFDictionaryCreateCopy(0, a3);
    *((void *)this + 31) = Copy;
    if (!a3 || Copy) {
      return 0;
    }
    return -50;
  }
  if (CFEqual(theString1, kSpeechPreloadVoiceMetadataProperty))
  {
    if (*((_DWORD *)this + 64) == 1835364215)
    {
      int v42 = (MEOWReader *)*((void *)this + 38);
      int v43 = longVal(a3);
      MEOWReader::MakeMetadataResident(v42, v43);
    }
    return 0;
  }
  if (CFEqual(theString1, kSpeechChannelStatusChangeBlock))
  {
    *((void *)this + 54) = _Block_copy(a3);
    return 0;
  }
  if (CFStringCompare(theString1, kSpeechChannelAudioSessionID, 0)) {
    return -231;
  }
  *((_DWORD *)this + 110) = longVal(a3);
  return 0;
}

void sub_1DA4890F0(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x1080C404F240F48);
  _Unwind_Resume(a1);
}

CFNumberRef longVal(const __CFNumber *result)
{
  if (result)
  {
    uint64_t valuePtr = 0;
    if (CFNumberGetValue(result, kCFNumberLongType, &valuePtr)) {
      return (const __CFNumber *)valuePtr;
    }
    else {
      return 0;
    }
  }
  return result;
}

int fixedVal(const __CFNumber *a1)
{
  if (a1)
  {
    float valuePtr = 0.0;
    LODWORD(a1) = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
    if (a1) {
      LODWORD(a1) = vcvts_n_s32_f32(valuePtr, 0x10uLL);
    }
  }
  return (int)a1;
}

void MTMBDiphoneStatistics::MTMBDiphoneStatistics(MTMBDiphoneStatistics *this)
{
  uint64_t v2 = 0;
  uint64_t v3 = 2500;
  do
  {
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)((char *)this + v2), 8);
    v2 += 32;
    --v3;
  }
  while (v3);
}

void sub_1DA4891E0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 32;
    do
    {
      MEOWVectorBase::~MEOWVectorBase((void **)(v4 + v2));
      v2 -= 32;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SpeechChannelManager::UseSpeechDictionary(SpeechChannelManager *this, const __CFDictionary *a2)
{
  return -1;
}

void MEOWMMapHint::~MEOWMMapHint(MEOWMMapHint *this)
{
  SLMMapHint::~SLMMapHint(this);

  JUMPOUT(0x1E016FF00);
}

void *std::__list_imp<SpeechChannelManager *>::clear(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    CFComparisonResult result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        CFComparisonResult result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t _GLOBAL__sub_I_MT3SpeechChannelMgt_cp()
{
  sListOfActiveSpeechChannels = (uint64_t)&sListOfActiveSpeechChannels;
  qword_1EBE3CC70 = (uint64_t)&sListOfActiveSpeechChannels;
  qword_1EBE3CC78 = 0;
  return __cxa_atexit((void (*)(void *))std::list<SpeechChannelManager *>::~list, &sListOfActiveSpeechChannels, &dword_1DA47F000);
}

void MTBENotifier::MTBENotifier(MTBENotifier *this)
{
  this->var0 = (void **)&unk_1F347D270;
  this->var4 = 0x10000;
  this->var6 = 0;
  this->var7 = 0;
  *(void *)this->var8 = 0x5D005D005B005BLL;
  *(void *)&this->var5.count = 0;
  *(uint64_t *)((char *)&this->var5.oldPos + 4) = 0;
  this->var5.newPos = 0;
}

{
  this->var0 = (void **)&unk_1F347D270;
  this->var4 = 0x10000;
  this->var6 = 0;
  this->var7 = 0;
  *(void *)this->var8 = 0x5D005D005B005BLL;
  *(void *)&this->var5.count = 0;
  *(uint64_t *)((char *)&this->var5.oldPos + 4) = 0;
  this->var5.newPos = 0;
}

void MTBENotifier::~MTBENotifier(MTBENotifier *this)
{
}

MTBENotifier *MTBENotifier::NotifyError(MTBENotifier *this, OSErr a2, uint64_t a3)
{
  int count = (unsigned __int16)this->var5.count;
  this->var5.int count = count + 1;
  if (!count)
  {
    this->var5.oldest = a2;
    this->var5.oldPos = a3;
  }
  this->var5.newest = a2;
  this->var5.newPos = a3;
  return this;
}

void MTBENotifier::NotifyTextDone(MTBENotifier *this, const void **a2, unint64_t *a3, int *a4)
{
  *a2 = 0;
}

MTBENotifier *MTBENotifier::NotifyPhoneme(MTBENotifier *this, signed __int16 a2)
{
  this->var6 = a2;
  return this;
}

uint64_t MTBENotifier::WantSpeechDone(MTBENotifier *this)
{
  return 1;
}

uint64_t MTBENotifier::WantSync(MTBENotifier *this)
{
  return 1;
}

uint64_t MTBENotifier::WantPhoneme(MTBENotifier *this)
{
  return 1;
}

uint64_t MTBENotifier::WantWord(MTBENotifier *this)
{
  return 1;
}

double MTBENotifier::ResetFromVoice(MTBENotifier *this, void *a2, int a3)
{
  if (a3)
  {
    if ((MTBEDebugFlags::sMTXDebug & 4) != 0) {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "MTX: Reset vol %x -> %x behavior %x -> %x\n", this->var4, 0x10000, this->var7, 0);
    }
    this->var7 = 0;
    this->var4 = 0x10000;
    double result = 6.45302995e-307;
    *(void *)this->var8 = 0x5D005D005B005BLL;
    *(void *)&this->var5.int count = 0;
    *(uint64_t *)((char *)&this->var5.oldPos + 4) = 0;
    this->var5.newPos = 0;
  }
  return result;
}

uint64_t MTBEDelayedSync::Forward(MTBEDelayedSync *this, MTBENotifier *a2)
{
  return (*((uint64_t (**)(MTBENotifier *, void, void))a2->var0 + 5))(a2, *((unsigned int *)this + 3), *((unsigned int *)this + 2));
}

uint64_t MTBEDelayedWord::Forward(MTBEDelayedWord *this, MTBENotifier *a2)
{
  return (*((uint64_t (**)(MTBENotifier *, void, void, void))a2->var0 + 7))(a2, *((void *)this + 2), *((unsigned __int16 *)this + 12), *((unsigned int *)this + 2));
}

uint64_t MTBEDelayedPhoneme::Forward(MTBEDelayedPhoneme *this, MTBENotifier *a2)
{
  return (*((uint64_t (**)(MTBENotifier *, void, void, void))a2->var0 + 6))(a2, *((__int16 *)this + 6), *((unsigned int *)this + 4), *((unsigned int *)this + 2));
}

void MTBEDelayedNotifier::MTBEDelayedNotifier(MTBEDelayedNotifier *this, MTBENotifier *a2)
{
  *((_DWORD *)this + 5) = 0x10000;
  *((_WORD *)this + 23) = 0;
  *((_DWORD *)this + 12) = 0;
  *(void *)((char *)this + 52) = 0x5D005D005B005BLL;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *(void *)((char *)this + 38) = 0;
  *(void *)this = &unk_1F347D2E8;
  *((void *)this + 8) = a2;
  *((_DWORD *)this + 18) = 0;
  MEOWVectorBase::MEOWVectorBase((MTBEDelayedNotifier *)((char *)this + 80), 8);
  MEOWVectorBase::MEOWVectorBase((MTBEDelayedNotifier *)((char *)this + 112), 8);
}

void sub_1DA489598(_Unwind_Exception *a1)
{
  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

void MTBEDelayedNotifier::~MTBEDelayedNotifier(MTBEDelayedNotifier *this)
{
  *(void *)this = &unk_1F347D2E8;
  uint64_t v2 = (void **)((char *)this + 112);
  for (uint64_t i = *((void *)this + 16); i; *((void *)this + 16) = i)
  {
    uint64_t v4 = *((void *)*v2 + i - 1);
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
      uint64_t i = *((void *)this + 16);
    }
    --i;
  }
  MEOWVectorBase::~MEOWVectorBase(v2);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 10);
}

{
  uint64_t vars8;

  MTBEDelayedNotifier::~MTBEDelayedNotifier(this);

  JUMPOUT(0x1E016FF00);
}

void *MTBEDelayedNotifier::StartUnit(MTBEDelayedNotifier *this)
{
  *((void *)this + 9) = 0x3F80000000000000;
  double result = MEOWVectorBase::Append((void *)this + 10);
  *(void *)(*((void *)this + 10) + 8 * *((void *)this + 12) - 8) = 0;
  return result;
}

void MTBEDelayedNotifier::NotifySync(MTBEDelayedNotifier *this)
{
}

void MTBEDelayedNotifier::NotifyWord(MTBEDelayedNotifier *this)
{
}

void MTBEDelayedNotifier::NotifyPhoneme(MTBEDelayedNotifier *this)
{
}

void MTBEDelayedNotifier::ForwardUnit(MTBEDelayedNotifier *this)
{
  uint64_t v1 = *((void *)this + 12);
  if (v1)
  {
    uint64_t v3 = (void **)((char *)this + 80);
    uint64_t v4 = **((void **)this + 10);
    if (!v4) {
      goto LABEL_6;
    }
    for (uint64_t i = 0; i != v4; ++i)
    {
      uint64_t v6 = *(void *)(*((void *)this + 14) + 8 * i);
      (**(void (***)(uint64_t, void))v6)(v6, *((void *)this + 8));
      (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    }
    uint64_t v1 = *((void *)this + 12);
    if (!v1)
    {
      MEOWVectorBase::clear(v3);
      MEOWVectorBase::clear((void **)this + 14);
    }
    else
    {
LABEL_6:
      memmove(*((void **)this + 10), (const void *)(*((void *)this + 10) + 8), 8 * v1 - 8);
      uint64_t v7 = *((void *)this + 12);
      uint64_t v8 = v7 - 1;
      if (*((void *)this + 13) < (unint64_t)(v7 - 1)) {
        MEOWVectorBase::Allocate((MEOWVectorBase *)v3, v7 - 1, 1);
      }
      CFStringRef v9 = (char *)*((void *)this + 14);
      *((void *)this + 12) = v8;
      memmove(v9, &v9[8 * v4], 8 * (*((void *)this + 16) - v4));
      uint64_t v10 = *((void *)this + 16);
      uint64_t v11 = v10 - v4;
      if (*((void *)this + 17) < (unint64_t)(v10 - v4)) {
        MEOWVectorBase::Allocate((MTBEDelayedNotifier *)((char *)this + 112), v10 - v4, 1);
      }
      *((void *)this + 16) = v11;
    }
  }
  else
  {
    int v12 = (FILE *)*MEMORY[0x1E4F143C8];
    fwrite("MacinTalk: No unit callbacks to forward!\n", 0x29uLL, 1uLL, v12);
  }
}

void MTBEDelayedSync::~MTBEDelayedSync(MTBEDelayedSync *this)
{
}

void MTBEDelayedWord::~MTBEDelayedWord(MTBEDelayedWord *this)
{
}

void MTBEDelayedPhoneme::~MTBEDelayedPhoneme(MTBEDelayedPhoneme *this)
{
}

void *MEOWVectorBase::Append(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[2];
  if (v2 == this[3])
  {
    this = MEOWVectorBase::Allocate((MEOWVectorBase *)this, v2 + 1, 0);
    uint64_t v2 = v1[2];
  }
  v1[2] = v2 + 1;
  return this;
}

void MTBEPhraseParam::MTBEPhraseParam(MTBEPhraseParam *this, MTBEVoiceContents a2, MTFESpeechElement *a3, MTBENotifier *a4, MTBENotifier *a5, MTBENotifier *a6, MTBEPersistentParam *a7)
{
  *(MTBEVoiceContents *)this = a2;
  *((void *)this + 1) = a3;
  *((void *)this + 2) = a4;
  *((void *)this + 3) = a5;
  *((void *)this + 4) = a6;
  *((void *)this + 5) = a7;
  *((void *)this + 6) = 0;
  *((unsigned char *)this + 61) = 0;
  __int16 v7 = MTBEDebugFlags::sMTXDebug;
  int8x16_t v8 = (int8x16_t)vdupq_n_s64(MTBEDebugFlags::sMTXDebug);
  int16x8_t v9 = (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v8, (int8x16_t)xmmword_1DA4FE3B0)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v8, (int8x16_t)xmmword_1DA4FE3C0)));
  *(int8x8_t *)v9.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v9), (int8x8_t)0x1000100010001);
  *((_DWORD *)this + 14) = vmovn_s16(v9).u32[0];
  *((unsigned char *)this + 60) = (v7 & 0x8000) == 0;
}

void MTBEPhraseProcessor::MTBEPhraseProcessor(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  long long v6 = *a3;
  long long v7 = a3[1];
  long long v8 = a3[2];
  *(_OWORD *)(a1 + 56) = a3[3];
  *(_OWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 8) = v6;
  *(void *)a1 = &unk_1F347D480;
  *(void *)(a1 + 80) = a2;
  int16x8_t v9 = (const void *)(a1 + 88);
  if (a4) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *(void *)a3;
  }
  MTBEParam::MTBEParam(a1 + 88, a4, a2, v10, 0, *(double *)&v6);
  memcpy((void *)(a1 + 1392), v9, 0x518uLL);
  *(_DWORD *)(a1 + 2696) = 1024;
  operator new[]();
}

void sub_1DA489D30(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v3, 0x10E0C4036EBA818);
  MTFEFrameFiller::~MTFEFrameFiller(v2);
  uint64_t v5 = *(void *)(v1 + 2704);
  if (v5) {
    MEMORY[0x1E016FEE0](v5, 0x1000C80274DC3F3);
  }
  _Unwind_Resume(a1);
}

void MTBEPhraseProcessor::~MTBEPhraseProcessor(MTBEPhraseProcessor *this)
{
  *(void *)this = &unk_1F347D480;
  uint64_t v2 = *((void *)this + 9);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  uint64_t v3 = *((void *)this + 529);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  uint64_t v5 = (MTBEPhraseMemo *)*((void *)this + 532);
  if (v5)
  {
    MTBEPhraseMemo::~MTBEPhraseMemo(v5);
    MEMORY[0x1E016FF00]();
  }
  uint64_t v6 = *((void *)this + 533);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
  }
  MTFEFrameFiller::~MTFEFrameFiller((MTBEPhraseProcessor *)((char *)this + 2728));
  uint64_t v7 = *((void *)this + 338);
  if (v7) {
    MEMORY[0x1E016FEE0](v7, 0x1000C80274DC3F3);
  }
}

{
  uint64_t vars8;

  MTBEPhraseProcessor::~MTBEPhraseProcessor(this);

  JUMPOUT(0x1E016FF00);
}

void MTBEPhraseProcessor::ProcessPhrase(MTBEPhraseProcessor *this)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (MTBEPhraseProcessor *)((char *)this + 88);
  MTBEParam::SetRate((MTBEPhraseProcessor *)((char *)this + 88), *(__int16 *)(*((void *)this + 3) + 10));
  int v3 = MTBEParam::MidiToPitch(v2, (uint64_t)*(int *)(*((void *)this + 3) + 12) >> 8);
  MTBEParam::SetPitch((uint64_t)v2, v3);
  MTBEParam::SetModulation((uint64_t)v2, *(int *)(*((void *)this + 3) + 16));
  MTBEParam::SetVolume(v2, *(int *)(*((void *)this + 3) + 20));
  MTBEParam::SetRate((MTBEPhraseProcessor *)((char *)this + 1392), *(__int16 *)(*((void *)this + 5) + 10));
  int v4 = MTBEParam::MidiToPitch((MTBEPhraseProcessor *)((char *)this + 1392), (uint64_t)*(int *)(*((void *)this + 5) + 12) >> 8);
  MTBEParam::SetPitch((uint64_t)this + 1392, v4);
  MTBEParam::SetModulation((uint64_t)this + 1392, *(int *)(*((void *)this + 5) + 16));
  MTBEParam::SetVolume((_WORD *)this + 696, *(int *)(*((void *)this + 5) + 20));
  v32[0] = &unk_1F347D850;
  __int16 v33 = 0;
  MTFEWord::MTFEWord(&v34, 0, 0);
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v32, *((MTFESpeechElement **)this + 2));
  v31[0] = &unk_1F34803A8;
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v31, *((MTFESpeechElement **)this + 2));
  v30[0] = &unk_1F34814C8;
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v30, *((MTFESpeechElement **)this + 2));
  CFIndex v28 = &unk_1F347D798;
  char v29 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEBoundaryModel);
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)&v28, *((MTFESpeechElement **)this + 2));
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEBoundaryModel))
  {
    uint64_t v11 = &unk_1F3481240;
    MTFESpeechVisitor::Visit((MTFESpeechVisitor *)&v11, *((MTFESpeechElement **)this + 2));
    MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&v11);
  }
  MTFEMarkStress::MTFEMarkStress((uint64_t)v27, *((void *)this + 10), (uint64_t)v2, (uint64_t)this + 1392, *((void *)this + 3));
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v27, *((MTFESpeechElement **)this + 2));
  v26[0] = &unk_1F34800F0;
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v26, *((MTFESpeechElement **)this + 2));
  int v23 = &unk_1F347E0C8;
  int v24 = &unk_1F347E170;
  uint64_t v25 = &unk_1F347E218;
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)&v23, *((MTFESpeechElement **)this + 2));
  (**(void (***)(MTBEPhraseProcessor *, void))this)(this, *((void *)this + 2));
  v22[0] = &unk_1F3481550;
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v22, *((MTFESpeechElement **)this + 2));
  v19[0] = &unk_1F347EA68;
  int v20 = 0;
  int v21 = 0;
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v19, *((MTFESpeechElement **)this + 2));
  if (*((unsigned char *)this + 1391))
  {
    MTFEDuration::MTFEDuration(&v11, v2, *((void *)this + 10));
    MTFESpeechVisitor::Visit((MTFESpeechVisitor *)&v11, *((MTFESpeechElement **)this + 2));
    MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&v11);
  }
  (*(void (**)(MTBEPhraseProcessor *, void))(*(void *)this + 8))(this, *((void *)this + 2));
  char v5 = *((unsigned char *)this + 4216);
  char v6 = *((unsigned char *)this + 1391);
  int v16 = 0;
  v15[0] = &unk_1F347E6F0;
  char v17 = v5;
  char v18 = v6;
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v15, *((MTFESpeechElement **)this + 2));
  if (!*((unsigned char *)this + 65))
  {
    uint64_t v11 = &unk_1F347E348;
    v12[0] = &unk_1F347E2C0;
    CFStringRef v13 = &v11;
    MTFESpeechVisitor::Visit((MTFESpeechVisitor *)&v11, *((MTFESpeechElement **)this + 2));
    uint64_t v11 = &unk_1F347E348;
    MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v12);
    MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&v11);
  }
  MTFEModDuration::MTFEModDuration(v10, v2, *((void *)this + 10), *((float *)this + 1057));
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v10, *((MTFESpeechElement **)this + 2));
  (*(void (**)(MTBEPhraseProcessor *, void))(*(void *)this + 16))(this, *((void *)this + 2));
  if (*((unsigned char *)this + 65))
  {
    if (*(void *)(*((void *)this + 6) + 80)) {
      operator new();
    }
    operator new();
  }
  v9[0] = &unk_1F347E7A8;
  v9[2] = v2;
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v9, *((MTFESpeechElement **)this + 2));
  uint64_t v7 = *((void *)this + 10);
  uint64_t v11 = &unk_1F347E400;
  v12[0] = (char *)this + 2696;
  v12[1] = v7;
  CFStringRef v13 = (void **)v2;
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)&v11, *((MTFESpeechElement **)this + 2));
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&v11);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v9);
  v9[0] = &unk_1F34801C8;
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v9, *((MTFESpeechElement **)this + 2));
  uint64_t v8 = *((void *)this + 7);
  if (v8)
  {
    uint64_t v11 = &unk_1F3480308;
    uint64_t v14 = v8;
    MTFESpeechVisitor::Visit((MTFESpeechVisitor *)&v11, *((MTFESpeechElement **)this + 2));
    MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&v11);
  }
  (*(void (**)(MTBEPhraseProcessor *, void))(*(void *)this + 24))(this, *((void *)this + 2));
  MTFEFrameFiller::InitPhrase((MTBEPhraseProcessor *)((char *)this + 2728), *((MTFESpeechElement **)this + 2));
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v9);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v10);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v15);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v19);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v22);
  int v23 = &unk_1F347E0C8;
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&v25);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&v24);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&v23);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v26);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v27);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&v28);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v30);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v31);
  v32[0] = &unk_1F347D850;
  v34.var0 = (void **)&unk_1F347DA28;
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)&v34.var18);
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)&v34);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v32);
}

void sub_1DA48A710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  MEMORY[0x1E016FF00](v48, 0x1000C404A43BE38);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&a48);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&STACK[0x3F8]);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&STACK[0x4D8]);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&STACK[0x518]);
  MTFESyllablify::~MTFESyllablify((MTFESyllablify *)&STACK[0x538]);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&STACK[0x588]);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&STACK[0x5B8]);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&STACK[0x678]);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&STACK[0x688]);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&STACK[0x6A0]);
  MTFEPOSResolver::~MTFEPOSResolver((MTFEPOSResolver *)&STACK[0x6B0]);
  _Unwind_Resume(a1);
}

uint64_t MTBEDebugParam<BOOL>::operator BOOL(uint64_t a1)
{
  CFStringRef v2 = *(const __CFString **)a1;
  if (v2)
  {
    MTBEDebugParams::GetParam(v2, (const __CFString *)(a1 + 8), (BOOL *)*(unsigned __int8 *)(a1 + 8));
    *(void *)a1 = 0;
  }
  return *(unsigned __int8 *)(a1 + 8);
}

void MTFEPitchRaiseFall::~MTFEPitchRaiseFall(MTFEPitchRaiseFall *this)
{
  *(void *)this = &unk_1F347E348;
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFEPitchRaiseFall *)((char *)this + 8));

  MTFESpeechVisitor::~MTFESpeechVisitor(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F347E348;
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFEPitchRaiseFall *)((char *)this + 8));
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

void MTFESegmentalPerturbations::~MTFESegmentalPerturbations(MTFESegmentalPerturbations *this)
{
  *(void *)this = &unk_1F347F2A8;
  CFStringRef v2 = (MTFESegmentalPerturbations *)((char *)this + 16);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESegmentalPerturbations *)((char *)this + 64));
  MTFESpeechVisitor::~MTFESpeechVisitor(v2);

  MTFESpeechVisitor::~MTFESpeechVisitor(this);
}

{
  MTFESpeechVisitor *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F347F2A8;
  CFStringRef v2 = (MTFESegmentalPerturbations *)((char *)this + 16);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESegmentalPerturbations *)((char *)this + 64));
  MTFESpeechVisitor::~MTFESpeechVisitor(v2);
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

void MTFESyllablify::~MTFESyllablify(MTFESyllablify *this)
{
  *(void *)this = &unk_1F347E0C8;
  CFStringRef v2 = (MTFESyllablify *)((char *)this + 8);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESyllablify *)((char *)this + 24));
  MTFESpeechVisitor::~MTFESpeechVisitor(v2);

  MTFESpeechVisitor::~MTFESpeechVisitor(this);
}

{
  MTFESpeechVisitor *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F347E0C8;
  CFStringRef v2 = (MTFESyllablify *)((char *)this + 8);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESyllablify *)((char *)this + 24));
  MTFESpeechVisitor::~MTFESpeechVisitor(v2);
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

void MTFEPOSResolver::~MTFEPOSResolver(MTFEPOSResolver *this)
{
  *(void *)this = &unk_1F347D850;
  CFStringRef v2 = (MTFESpeechElement *)((char *)this + 48);
  *((void *)this + 6) = &unk_1F347DA28;
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)((char *)this + 160));
  MTFESpeechElement::~MTFESpeechElement(v2);

  MTFESpeechVisitor::~MTFESpeechVisitor(this);
}

{
  MTFESpeechElement *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F347D850;
  CFStringRef v2 = (MTFESpeechElement *)((char *)this + 48);
  *((void *)this + 6) = &unk_1F347DA28;
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)((char *)this + 160));
  MTFESpeechElement::~MTFESpeechElement(v2);
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

void MTBEPhraseProcessor::SelectUnits(MTBEPhraseProcessor *this, MTFESpeechElement *a2)
{
  if ((MTBEDebugFlags::sMTXDebug & 2) != 0)
  {
    uint64_t v2 = *MEMORY[0x1E4F143C8];
    v3[0] = &unk_1F347D710;
    v3[1] = v2;
    v3[2] = 0;
    int v4 = 0;
    char v5 = 0;
    MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v3, a2);
    MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v3);
  }
}

void sub_1DA48AAFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)va);
  _Unwind_Resume(a1);
}

uint64_t MTBEPhraseProcessor::GenerateSamples(MTBEPhraseProcessor *this, MTBESoundOutput *a2, int *a3)
{
  int v4 = a2;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(*(uint64_t (**)(MTBESoundOutput *))(*(void *)a2 + 48))(a2) >= 0x200)
  {
    int v6 = -7;
    uint64_t v7 = (FILE **)MEMORY[0x1E4F143C8];
    do
    {
      if (__CFADD__(v6++, 1)) {
        break;
      }
      int v24 = 0;
      __Y = 0;
      *(void *)__N = 0;
      __int16 v23 = 0;
      if (((***((uint64_t (****)(void))this + 9))() & 1) == 0)
      {
        (*(void (**)(MTBESoundOutput *))(*(void *)v4 + 32))(v4);
        int v20 = *((unsigned __int8 *)this + 2882);
        LODWORD(v4) = *((unsigned char *)this + 2882) != 0;
        *((unsigned char *)this + 2882) = 0;
        if (!v20)
        {
          if (MTBEDebugFlags::sMEOWDebug) {
            fprintf(*v7, "Phrase has %ld samples\n", *((void *)this + 531));
          }
          *((void *)this + 531) = 0;
        }
        int v18 = 0;
        return (v4 | v18) & 1;
      }
      char v9 = MTBEDebugFlags::sMEOWDebug;
      if (MTBEDebugFlags::sMEOWDebug)
      {
        uint64_t v10 = v24;
        if (v24 != *((MTMBDemiProperties **)this + 530))
        {
          *((void *)this + 530) = v24;
          if (v10) {
            uint64_t v11 = MTMBDemiProperties::Phon(v10, v25);
          }
          else {
            uint64_t v11 = "SIL";
          }
          fprintf(*v7, "Cut %s at sample %ld\n", v11, *((void *)this + 531));
          (*(void (**)(MTBESoundOutput *, const char *))(*(void *)v4 + 24))(v4, v11);
          char v9 = MTBEDebugFlags::sMEOWDebug;
        }
      }
      if ((v9 & 0x10) != 0)
      {
        int v12 = *v7;
        CFStringRef v13 = MTMBSegment::Abstract((MTMBSegment **)&__Y);
        float v14 = cblas_sdot(LOWORD(__N[0]), __Y, 1, __Y, 1);
        LOWORD(v15) = __N[0];
        fprintf(v12, "PP %s %f\n", (const char *)v13, sqrtf(v14 / (float)v15));
      }
      unsigned int v16 = LOWORD(__N[0]);
      if (a3) {
        *a3 += LOWORD(__N[0]);
      }
      *((void *)this + 531) += v16;
      char v17 = (*(uint64_t (**)(MTBESoundOutput *, float *))(*(void *)v4 + 16))(v4, __Y);
      MTMBSegment::Free((MTMBSegment *)&__Y);
    }
    while ((v17 & 1) != 0);
  }
  int v18 = 1;
  return (v4 | v18) & 1;
}

uint64_t MTBEPhraseProcessor::Reader(MTBEPhraseProcessor *this)
{
  return 0;
}

__n128 MTBEPhraseProcessor::UpdateEngineFromNotifier(MTBEPhraseProcessor *this)
{
  if ((MTBEDebugFlags::sMTXDebug & 4) != 0)
  {
    int v3 = (_DWORD *)*((void *)this + 3);
    uint64_t v2 = (_DWORD *)*((void *)this + 4);
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "MTX: UpdateEngineFromNotifier rate %x -> %x pb %x -> %x pm %x -> %x vol %x -> %x behavior %x -> %x\n", v2[2], v3[2], v2[3], v3[3], v2[4], v3[4], v2[5], v3[5], v2[12], v3[12]);
  }
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = *((void *)this + 4);
  int v6 = *(_DWORD *)(v4 + 8);
  if (v6 != *(_DWORD *)(v5 + 8))
  {
    MTBEParam::SetRate((MTBEPhraseProcessor *)((char *)this + 88), v6 >> 16);
    MTBEParam::SetRate((MTBEPhraseProcessor *)((char *)this + 1392), *(__int16 *)(*((void *)this + 5) + 10));
    uint64_t v4 = *((void *)this + 3);
    uint64_t v5 = *((void *)this + 4);
  }
  int v7 = *(_DWORD *)(v4 + 12);
  if (v7 != *(_DWORD *)(v5 + 12))
  {
    int v8 = MTBEParam::MidiToPitch((MTBEPhraseProcessor *)((char *)this + 88), (uint64_t)v7 >> 8);
    MTBEParam::SetPitch((uint64_t)this + 88, v8);
    int v9 = MTBEParam::MidiToPitch((MTBEPhraseProcessor *)((char *)this + 1392), (uint64_t)*(int *)(*((void *)this + 5) + 12) >> 8);
    MTBEParam::SetPitch((uint64_t)this + 1392, v9);
    uint64_t v4 = *((void *)this + 3);
    uint64_t v5 = *((void *)this + 4);
  }
  uint64_t v10 = *(int *)(v4 + 16);
  if (v10 != *(_DWORD *)(v5 + 16))
  {
    MTBEParam::SetModulation((uint64_t)this + 88, v10);
    MTBEParam::SetModulation((uint64_t)this + 1392, *(int *)(*((void *)this + 5) + 16));
    uint64_t v4 = *((void *)this + 3);
    uint64_t v5 = *((void *)this + 4);
  }
  uint64_t v11 = *(int *)(v4 + 20);
  if (v11 != *(_DWORD *)(v5 + 20))
  {
    MTBEParam::SetVolume((_WORD *)this + 44, v11);
    MTBEParam::SetVolume((_WORD *)this + 696, *(int *)(*((void *)this + 5) + 20));
    uint64_t v4 = *((void *)this + 3);
    uint64_t v5 = *((void *)this + 4);
  }
  __n128 result = *(__n128 *)(v4 + 8);
  long long v13 = *(_OWORD *)(v4 + 24);
  long long v14 = *(_OWORD *)(v4 + 40);
  *(_DWORD *)(v5 + 56) = *(_DWORD *)(v4 + 56);
  *(_OWORD *)(v5 + 40) = v14;
  *(_OWORD *)(v5 + 24) = v13;
  *(__n128 *)(v5 + 8) = result;
  return result;
}

uint64_t MTBEPhraseProcessor::UpdateNotifierFromEngine(MTBEPhraseProcessor *this)
{
  uint64_t v2 = *((void *)this + 3);
  int v3 = (MTBEPhraseProcessor *)((char *)this + 88);
  *(_DWORD *)(v2 + 8) = MTBEParam::GetRate((MTBEPhraseProcessor *)((char *)this + 88)) << 16;
  uint64_t v4 = *((void *)this + 3);
  *(_DWORD *)(v4 + 12) = 3072 * MTBEParam::GetPitch(v3) + 2054400;
  uint64_t v5 = *((void *)this + 3);
  *(_DWORD *)(v5 + 16) = MTBEParam::GetModulation(v3);
  uint64_t v6 = *((void *)this + 3);
  *(_DWORD *)(v6 + 20) = MTBEParam::GetVolume(v3);
  if ((MTBEDebugFlags::sMTXDebug & 4) != 0)
  {
    int v7 = (_DWORD *)*((void *)this + 3);
    int v8 = (_DWORD *)*((void *)this + 4);
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "MTX: UpdateNotifierFromEngine rate %x -> %x pb %x -> %x pm %x -> %x vol %x -> %x behavior %x -> %x\n", v7[2], v8[2], v7[3], v8[3], v7[4], v8[4], v7[5], v8[5], v7[12], v8[12]);
  }
  uint64_t v9 = *((void *)this + 3);
  uint64_t v10 = *((void *)this + 4);
  long long v11 = *(_OWORD *)(v9 + 8);
  long long v12 = *(_OWORD *)(v9 + 24);
  long long v13 = *(_OWORD *)(v9 + 40);
  *(_DWORD *)(v10 + 56) = *(_DWORD *)(v9 + 56);
  *(_OWORD *)(v10 + 40) = v13;
  *(_OWORD *)(v10 + 24) = v12;
  *(_OWORD *)(v10 + 8) = v11;
  uint64_t v14 = *((void *)this + 5);
  unsigned int v15 = (MTBEPhraseProcessor *)((char *)this + 1392);
  *(_DWORD *)(v14 + 8) = MTBEParam::GetRate((MTBEPhraseProcessor *)((char *)this + 1392)) << 16;
  uint64_t v16 = *((void *)this + 5);
  *(_DWORD *)(v16 + 12) = 3072 * MTBEParam::GetPitch((MTBEPhraseProcessor *)((char *)this + 1392)) + 2054400;
  uint64_t v17 = *((void *)this + 5);
  *(_DWORD *)(v17 + 16) = MTBEParam::GetModulation((MTBEPhraseProcessor *)((char *)this + 1392));
  uint64_t v18 = *((void *)this + 5);
  uint64_t result = MTBEParam::GetVolume(v15);
  *(_DWORD *)(v18 + 20) = result;
  return result;
}

void MTBEPhraseProcessor::Create(MTBEPhraseProcessor *this, const VoiceDescription *a2, const void *a3, const MTBEPhraseParam *a4)
{
  int v4 = *((_DWORD *)this + 1);
  if (v4 != 1734437985)
  {
    if (v4 == 1835364215) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1DA48B198(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10F3C40A7C9FD70);
  _Unwind_Resume(a1);
}

void MTFESmoothPitch::~MTFESmoothPitch(MTFESmoothPitch *this)
{
  *(void *)this = &unk_1F347EF38;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x1E016FEE0](v2, 0x1000C8052888210);
  }

  MTFESpeechVisitor::~MTFESpeechVisitor(this);
}

{
  uint64_t vars8;

  MTFESmoothPitch::~MTFESmoothPitch(this);

  JUMPOUT(0x1E016FF00);
}

void MTBESampleBuffer::MTBESampleBuffer(MTBESampleBuffer *this)
{
  *(void *)this = &unk_1F347D510;
  *((void *)this + 1) = (char *)this + 32;
  *((void *)this + 2) = (char *)this + 17952;
  *((void *)this + 3) = 0;
}

uint64_t MTBESampleBuffer::NextBuffer(uint64_t this)
{
  int v1 = (*(_DWORD *)(this + 24) + 1) % 3;
  *(_DWORD *)(this + 24) = v1;
  *(_DWORD *)(this + 28) = 0;
  uint64_t v2 = *(void *)(this + 8);
  *(void *)(this + 8) = this + 8960 * v1 + 32;
  *(void *)(this + 16) = v2;
  return this;
}

void MTBEWorker::ExecuteTasks(MTBEWorker *this, const char *a2)
{
  MTBEWorker::DebugLog("<%s> ExecuteTasks\n", a2, *(void *)this);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 104));
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 40));
  for (uint64_t i = (unint64_t *)*((void *)this + 1);
        i != *((unint64_t **)this + 2);
        uint64_t i = (unint64_t *)*((void *)this + 1))
  {
    unint64_t v4 = *i;
    unint64_t v5 = i[2];
    unint64_t v6 = i[3];
    gettimeofday(&v32, 0);
    unint64_t v8 = v32.tv_usec + 1000000 * v32.tv_sec;
    if (v8 < v4) {
      break;
    }
    uint64_t v9 = *((void *)this + 1);
    uint64_t v10 = *((void *)this + 2);
    uint64_t v11 = v10 - v9;
    if (v10 - v9 >= 33)
    {
      uint64_t v12 = 0;
      uint64_t v13 = v11 >> 5;
      timeval v14 = *(timeval *)(v9 + 16);
      timeval v32 = *(timeval *)v9;
      timeval v33 = v14;
      int64_t v15 = (unint64_t)((v11 >> 5) - 2) >> 1;
      uint64_t v16 = (_OWORD *)v9;
      do
      {
        uint64_t v17 = (uint64_t)&v16[2 * v12 + 2];
        uint64_t v18 = (2 * v12) | 1;
        uint64_t v19 = 2 * v12 + 2;
        if (v19 < v13 && *(void *)v17 > *(void *)(v17 + 32))
        {
          v17 += 32;
          uint64_t v18 = v19;
        }
        long long v20 = *(_OWORD *)(v17 + 16);
        *uint64_t v16 = *(_OWORD *)v17;
        v16[1] = v20;
        uint64_t v16 = (_OWORD *)v17;
        uint64_t v12 = v18;
      }
      while (v18 <= v15);
      int v21 = (timeval *)(v10 - 32);
      if ((timeval *)v17 == v21)
      {
        __n128 v7 = (__n128)v32;
        timeval v24 = v33;
        *(timeval *)uint64_t v17 = v32;
        *(timeval *)(v17 + 16) = v24;
      }
      else
      {
        timeval v22 = v21[1];
        *(timeval *)uint64_t v17 = *v21;
        *(timeval *)(v17 + 16) = v22;
        timeval v23 = v33;
        *int v21 = v32;
        v21[1] = v23;
        __n128 v7 = std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MTBEWorker::TimeCmp &,std::__wrap_iter<MTBEWorker::TaskRec *>>(v9, v17 + 32, (uint64_t)&v31, (v17 + 32 - v9) >> 5);
      }
      uint64_t v10 = *((void *)this + 2);
    }
    *((void *)this + 2) = v10 - 32;
    uint64_t v25 = MTBEWorker::sBigBang;
    uint64_t v26 = *(void *)this;
    uint64_t v27 = (**(uint64_t (***)(unint64_t, __n128))v5)(v5, v7);
    if (v8 == v4 || v4 == v25) {
      MTBEWorker::DebugLog("<%s> Executing [%s]\n", v28, v26, v27, v30);
    }
    else {
      MTBEWorker::DebugLog("<%s> Executing [%s] with slippage %.2fms\n", v28, v26, v27, (double)(v8 - v4) / 1000.0);
    }
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 40));
    (*(void (**)(unint64_t, unint64_t))(*(void *)v5 + 8))(v5, v6);
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 40));
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 40));
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 104));
  MTBEWorker::SleepTillReady(this);
}

void MTBEWorker::MTBEWorker(MTBEWorker *this, const char *a2)
{
  *((void *)this + 1) = 0;
  *(void *)this = a2;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (MTBEWorker::MTBEWorker(char const*)::sOnceBigBang != -1) {
    dispatch_once(&MTBEWorker::MTBEWorker(char const*)::sOnceBigBang, &__block_literal_global_0);
  }
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 40), &MTBEWorker::MTBEWorker(char const*)::sRecursiveMutex);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 104), &MTBEWorker::MTBEWorker(char const*)::sRecursiveMutex);
  *((_DWORD *)this + 46) = 0;
  inactive = dispatch_workloop_create_inactive("com.apple.macintalk.synthesis");
  dispatch_set_qos_class_fallback();
  dispatch_workloop_set_scheduler_priority();
  dispatch_activate(inactive);
  *((void *)this + 21) = inactive;
  unint64_t v4 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 1uLL, inactive);
  *((void *)this + 22) = v4;
  dispatch_set_context(v4, this);
  dispatch_source_set_event_handler_f(*((dispatch_source_t *)this + 22), (dispatch_function_t)MTBEWorkerExecuteTasks);
  dispatch_source_set_timer(*((dispatch_source_t *)this + 22), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x4C4B40uLL);
  dispatch_resume(*((dispatch_object_t *)this + 22));
}

void sub_1DA48B634(_Unwind_Exception *exception_object)
{
  int v3 = v2;
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN10MTBEWorkerC2EPKc_block_invoke()
{
  gettimeofday(&v1, 0);
  MTBEWorker::sBigBang = v1.tv_usec + 1000000 * v1.tv_sec;
  pthread_mutexattr_init(&MTBEWorker::MTBEWorker(char const*)::sRecursiveMutex);

  return pthread_mutexattr_settype(&MTBEWorker::MTBEWorker(char const*)::sRecursiveMutex, 2);
}

void MTBEWorker::~MTBEWorker(MTBEWorker *this, const char *a2)
{
  MTBEWorker::Purge(this, a2);
  dispatch_release(*((dispatch_object_t *)this + 22));
  dispatch_release(*((dispatch_object_t *)this + 21));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 40));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 104));
  int v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

void MTBEWorker::Purge(MTBEWorker *this, const char *a2)
{
  MTBEWorker::DebugLog("<%s> Purge\n", a2, *(void *)this);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 40));
  int v3 = (char *)*((void *)this + 1);
  for (uint64_t i = (char *)*((void *)this + 2); v3 != i; *((void *)this + 2) = i)
  {
    uint64_t v5 = i - v3;
    if (i - v3 >= 33)
    {
      uint64_t v6 = 0;
      uint64_t v7 = v5 >> 5;
      long long v8 = *((_OWORD *)v3 + 1);
      long long v20 = *(_OWORD *)v3;
      long long v21 = v8;
      int64_t v9 = (unint64_t)((v5 >> 5) - 2) >> 1;
      uint64_t v10 = v3;
      do
      {
        uint64_t v11 = (uint64_t)&v10[2 * v6 + 2];
        uint64_t v12 = (2 * v6) | 1;
        uint64_t v13 = 2 * v6 + 2;
        if (v13 < v7 && *(void *)v11 > *(void *)(v11 + 32))
        {
          v11 += 32;
          uint64_t v12 = v13;
        }
        long long v14 = *(_OWORD *)(v11 + 16);
        *uint64_t v10 = *(_OWORD *)v11;
        v10[1] = v14;
        uint64_t v10 = (_OWORD *)v11;
        uint64_t v6 = v12;
      }
      while (v12 <= v9);
      int64_t v15 = i - 32;
      if ((char *)v11 == v15)
      {
        long long v18 = v21;
        *(_OWORD *)uint64_t v11 = v20;
        *(_OWORD *)(v11 + 16) = v18;
      }
      else
      {
        long long v16 = *((_OWORD *)v15 + 1);
        *(_OWORD *)uint64_t v11 = *(_OWORD *)v15;
        *(_OWORD *)(v11 + 16) = v16;
        long long v17 = v21;
        *(_OWORD *)int64_t v15 = v20;
        *((_OWORD *)v15 + 1) = v17;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MTBEWorker::TimeCmp &,std::__wrap_iter<MTBEWorker::TaskRec *>>((uint64_t)v3, v11 + 32, (uint64_t)&v19, (v11 + 32 - (uint64_t)v3) >> 5);
      }
      int v3 = (char *)*((void *)this + 1);
      uint64_t i = (char *)*((void *)this + 2);
    }
    i -= 32;
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 40));
  MTBEWorker::SleepTillReady(this);
}

const char *MTBEWorker::Task::Name(MTBEWorker::Task *this)
{
  return "<Unknown>";
}

void MTBEWorker::AddTask(uint64_t *a1, uint64_t (***a2)(void), uint64_t a3, uint64_t *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  sprintf(v27, "%u", (*a4 - MTBEWorker::sBigBang) / 1000);
  uint64_t v8 = *a1;
  uint64_t v9 = (**a2)(a2);
  MTBEWorker::DebugLog("<%s> Add Task %p[%s]@%s\n", v10, v8, a2, v9, v27);
  uint64_t v11 = *a4;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 5));
  unint64_t v12 = a1[3];
  uint64_t v13 = (void *)a1[2];
  if ((unint64_t)v13 >= v12)
  {
    uint64_t v15 = a1[1];
    uint64_t v16 = ((uint64_t)v13 - v15) >> 5;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 59) {
      std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v18 = v12 - v15;
    if (v18 >> 4 > v17) {
      unint64_t v17 = v18 >> 4;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v19 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19) {
      long long v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTBEWorker::TaskRec>>((uint64_t)(a1 + 3), v19);
    }
    else {
      long long v20 = 0;
    }
    long long v21 = &v20[32 * v16];
    timeval v22 = &v20[32 * v19];
    *(void *)long long v21 = v11;
    *((void *)v21 + 1) = a1;
    *((void *)v21 + 2) = a2;
    *((void *)v21 + 3) = a3;
    uint64_t v14 = (uint64_t)(v21 + 32);
    timeval v24 = (char *)a1[1];
    timeval v23 = (char *)a1[2];
    if (v23 != v24)
    {
      do
      {
        long long v25 = *((_OWORD *)v23 - 1);
        *((_OWORD *)v21 - 2) = *((_OWORD *)v23 - 2);
        *((_OWORD *)v21 - 1) = v25;
        v21 -= 32;
        v23 -= 32;
      }
      while (v23 != v24);
      timeval v23 = (char *)a1[1];
    }
    a1[1] = (uint64_t)v21;
    a1[2] = v14;
    a1[3] = (uint64_t)v22;
    if (v23) {
      operator delete(v23);
    }
  }
  else
  {
    void *v13 = v11;
    v13[1] = a1;
    uint64_t v14 = (uint64_t)(v13 + 4);
    v13[2] = a2;
    v13[3] = a3;
  }
  a1[2] = v14;
  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MTBEWorker::TimeCmp &,std::__wrap_iter<MTBEWorker::TaskRec *>>(a1[1], v14, (uint64_t)&v26, (v14 - a1[1]) >> 5);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 5));
  MTBEWorker::SleepTillReady((MTBEWorker *)a1);
}

uint64_t MTBEWorker::Timestamp(uint64_t a1, char *a2)
{
  return sprintf(a2, "%u", (a1 - MTBEWorker::sBigBang) / 1000);
}

const char *MTBEWorker::DebugLog(const char *this, const char *a2, ...)
{
  va_start(va, a2);
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (MTBEDebugFlags::sMTXDebug)
  {
    uint64_t v2 = this;
    gettimeofday(&v3, 0);
    sprintf(v4, "%u", (v3.tv_usec + 1000000 * v3.tv_sec - MTBEWorker::sBigBang) / 1000);
    vsprintf((char *)&v3, v2, va);
    return (const char *)asl_log(0, 0, 3, "MTX %s: %s", v4, (const char *)&v3);
  }
  return this;
}

void MTBEWorker::SleepTillReady(MTBEWorker *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 40);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 40));
  timeval v3 = (unint64_t *)*((void *)this + 1);
  if (v3 == *((unint64_t **)this + 2))
  {
    pthread_mutex_unlock(v2);
  }
  else
  {
    unint64_t v4 = *v3;
    pthread_mutex_unlock(v2);
    gettimeofday(&v10, 0);
    if (v4 <= v10.tv_usec + 1000000 * v10.tv_sec)
    {
      uint64_t v8 = *((void *)this + 21);
      dispatch_async_f(v8, this, (dispatch_function_t)MTBEWorkerExecuteTasks);
    }
    else
    {
      sprintf((char *)&v10, "%u", (uint64_t)(v4 - MTBEWorker::sBigBang) / 1000);
      MTBEWorker::DebugLog("<%s> Sleep till %s\n", v5, *(void *)this, &v10);
      when.tv_sec = v4 / 0xF4240;
      when.tv_nsec = 1000 * (v4 % 0xF4240);
      uint64_t v6 = *((void *)this + 22);
      dispatch_time_t v7 = dispatch_walltime(&when, 0);
      dispatch_source_set_timer(v6, v7, 0xFFFFFFFFFFFFFFFFLL, 0x4C4B40uLL);
    }
  }
}

void MTBEWorker::PurgeTasks(MTBEWorker *this, const char *a2)
{
  unint64_t v4 = (pthread_mutex_t *)((char *)this + 40);
  MTBEWorker::DebugLog("<%s> PurgeTasks %p\n", a2, *(void *)this, a2);
  __p = 0;
  uint64_t v38 = 0;
  unint64_t v39 = 0;
  pthread_mutex_lock(v4);
  uint64_t v5 = *((void *)this + 1);
  for (uint64_t i = *((void *)this + 2); v5 != i; *((void *)this + 2) = i)
  {
    dispatch_time_t v7 = *(const char **)(v5 + 24);
    uint64_t v36 = *(void *)(v5 + 16);
    long long v35 = *(_OWORD *)v5;
    if (v7 != a2)
    {
      uint64_t v8 = v38;
      if ((unint64_t)v38 >= v39)
      {
        uint64_t v11 = ((char *)v38 - (unsigned char *)__p) >> 5;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 59) {
          std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v39 - (void)__p;
        if ((uint64_t)(v39 - (void)__p) >> 4 > v12) {
          unint64_t v12 = v13 >> 4;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14) {
          uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTBEWorker::TaskRec>>((uint64_t)&v39, v14);
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v16 = &v15[32 * v11];
        *(_OWORD *)uint64_t v16 = v35;
        *((void *)v16 + 2) = v36;
        *((void *)v16 + 3) = v7;
        uint64_t v18 = __p;
        unint64_t v17 = v38;
        unint64_t v19 = v16;
        if (v38 != __p)
        {
          do
          {
            long long v20 = *(v17 - 1);
            *((_OWORD *)v19 - 2) = *(v17 - 2);
            *((_OWORD *)v19 - 1) = v20;
            v19 -= 32;
            v17 -= 2;
          }
          while (v17 != v18);
          unint64_t v17 = __p;
        }
        timeval v10 = v16 + 32;
        __p = v19;
        uint64_t v38 = v16 + 32;
        unint64_t v39 = (unint64_t)&v15[32 * v14];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        uint64_t v9 = *(void *)(v5 + 16);
        *uint64_t v38 = *(_OWORD *)v5;
        *((void *)v8 + 2) = v9;
        *((void *)v8 + 3) = v7;
        timeval v10 = v8 + 2;
      }
      uint64_t v38 = v10;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MTBEWorker::TimeCmp &,std::__wrap_iter<MTBEWorker::TaskRec *>>((uint64_t)__p, (uint64_t)v10, (uint64_t)&v41, ((char *)v10 - (unsigned char *)__p) >> 5);
      uint64_t v5 = *((void *)this + 1);
      uint64_t i = *((void *)this + 2);
    }
    uint64_t v21 = i - v5;
    if (i - v5 >= 33)
    {
      uint64_t v22 = 0;
      uint64_t v23 = v21 >> 5;
      long long v24 = *(_OWORD *)(v5 + 16);
      long long v41 = *(_OWORD *)v5;
      long long v42 = v24;
      int64_t v25 = (unint64_t)((v21 >> 5) - 2) >> 1;
      char v26 = (_OWORD *)v5;
      do
      {
        uint64_t v27 = (uint64_t)&v26[2 * v22 + 2];
        uint64_t v28 = (2 * v22) | 1;
        uint64_t v29 = 2 * v22 + 2;
        if (v29 < v23 && *(void *)v27 > *(void *)(v27 + 32))
        {
          v27 += 32;
          uint64_t v28 = v29;
        }
        long long v30 = *(_OWORD *)(v27 + 16);
        *char v26 = *(_OWORD *)v27;
        v26[1] = v30;
        char v26 = (_OWORD *)v27;
        uint64_t v22 = v28;
      }
      while (v28 <= v25);
      char v31 = (_OWORD *)(i - 32);
      if ((_OWORD *)v27 == v31)
      {
        long long v34 = v42;
        *(_OWORD *)uint64_t v27 = v41;
        *(_OWORD *)(v27 + 16) = v34;
      }
      else
      {
        long long v32 = v31[1];
        *(_OWORD *)uint64_t v27 = *v31;
        *(_OWORD *)(v27 + 16) = v32;
        long long v33 = v42;
        *char v31 = v41;
        v31[1] = v33;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MTBEWorker::TimeCmp &,std::__wrap_iter<MTBEWorker::TaskRec *>>(v5, v27 + 32, (uint64_t)&v40, (v27 + 32 - v5) >> 5);
      }
      uint64_t v5 = *((void *)this + 1);
      uint64_t i = *((void *)this + 2);
    }
    i -= 32;
  }
  if ((void **)((char *)this + 8) != &__p) {
    std::vector<MTBEWorker::TaskRec>::__assign_with_size[abi:ne180100]<MTBEWorker::TaskRec*,MTBEWorker::TaskRec*>((char *)this + 8, (char *)__p, (uint64_t)v38, ((char *)v38 - (unsigned char *)__p) >> 5);
  }
  pthread_mutex_unlock(v4);
  MTBEWorker::SleepTillReady(this);
  if (__p)
  {
    uint64_t v38 = __p;
    operator delete(__p);
  }
}

void sub_1DA48C054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MTBEWorker::PurgeTasks(MTBEWorker *this, MTBEWorker::Task *a2)
{
  unint64_t v4 = (pthread_mutex_t *)((char *)this + 40);
  uint64_t v5 = *(void *)this;
  uint64_t v6 = (**(uint64_t (***)(MTBEWorker::Task *))a2)(a2);
  MTBEWorker::DebugLog("<%s> PurgeTasks %s\n", v7, v5, v6);
  __p = 0;
  char v40 = 0;
  unint64_t v41 = 0;
  pthread_mutex_lock(v4);
  uint64_t v8 = *((void *)this + 1);
  for (uint64_t i = *((void *)this + 2); v8 != i; *((void *)this + 2) = i)
  {
    long long v38 = *(_OWORD *)v8;
    timeval v10 = *(MTBEWorker::Task **)(v8 + 16);
    if (v10 != a2)
    {
      uint64_t v11 = *(void *)(v8 + 24);
      unint64_t v12 = v40;
      if ((unint64_t)v40 >= v41)
      {
        uint64_t v14 = ((char *)v40 - (unsigned char *)__p) >> 5;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 59) {
          std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v41 - (void)__p;
        if ((uint64_t)(v41 - (void)__p) >> 4 > v15) {
          unint64_t v15 = v16 >> 4;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17) {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTBEWorker::TaskRec>>((uint64_t)&v41, v17);
        }
        else {
          uint64_t v18 = 0;
        }
        unint64_t v19 = &v18[32 * v14];
        *(_OWORD *)unint64_t v19 = v38;
        *((void *)v19 + 2) = v10;
        *((void *)v19 + 3) = v11;
        uint64_t v21 = __p;
        long long v20 = v40;
        uint64_t v22 = v19;
        if (v40 != __p)
        {
          do
          {
            long long v23 = *(v20 - 1);
            *((_OWORD *)v22 - 2) = *(v20 - 2);
            *((_OWORD *)v22 - 1) = v23;
            v22 -= 32;
            v20 -= 2;
          }
          while (v20 != v21);
          long long v20 = __p;
        }
        uint64_t v13 = v19 + 32;
        __p = v22;
        char v40 = v19 + 32;
        unint64_t v41 = (unint64_t)&v18[32 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *char v40 = *(_OWORD *)v8;
        *((void *)v12 + 2) = v10;
        *((void *)v12 + 3) = v11;
        uint64_t v13 = v12 + 2;
      }
      char v40 = v13;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MTBEWorker::TimeCmp &,std::__wrap_iter<MTBEWorker::TaskRec *>>((uint64_t)__p, (uint64_t)v13, (uint64_t)&v43, ((char *)v13 - (unsigned char *)__p) >> 5);
      uint64_t v8 = *((void *)this + 1);
      uint64_t i = *((void *)this + 2);
    }
    uint64_t v24 = i - v8;
    if (i - v8 >= 33)
    {
      uint64_t v25 = 0;
      uint64_t v26 = v24 >> 5;
      long long v27 = *(_OWORD *)(v8 + 16);
      long long v43 = *(_OWORD *)v8;
      long long v44 = v27;
      int64_t v28 = (unint64_t)((v24 >> 5) - 2) >> 1;
      uint64_t v29 = (_OWORD *)v8;
      do
      {
        uint64_t v30 = (uint64_t)&v29[2 * v25 + 2];
        uint64_t v31 = (2 * v25) | 1;
        uint64_t v32 = 2 * v25 + 2;
        if (v32 < v26 && *(void *)v30 > *(void *)(v30 + 32))
        {
          v30 += 32;
          uint64_t v31 = v32;
        }
        long long v33 = *(_OWORD *)(v30 + 16);
        *uint64_t v29 = *(_OWORD *)v30;
        v29[1] = v33;
        uint64_t v29 = (_OWORD *)v30;
        uint64_t v25 = v31;
      }
      while (v31 <= v28);
      long long v34 = (_OWORD *)(i - 32);
      if ((_OWORD *)v30 == v34)
      {
        long long v37 = v44;
        *(_OWORD *)uint64_t v30 = v43;
        *(_OWORD *)(v30 + 16) = v37;
      }
      else
      {
        long long v35 = v34[1];
        *(_OWORD *)uint64_t v30 = *v34;
        *(_OWORD *)(v30 + 16) = v35;
        long long v36 = v44;
        *long long v34 = v43;
        v34[1] = v36;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MTBEWorker::TimeCmp &,std::__wrap_iter<MTBEWorker::TaskRec *>>(v8, v30 + 32, (uint64_t)&v42, (v30 + 32 - v8) >> 5);
      }
      uint64_t v8 = *((void *)this + 1);
      uint64_t i = *((void *)this + 2);
    }
    i -= 32;
  }
  if ((void **)((char *)this + 8) != &__p) {
    std::vector<MTBEWorker::TaskRec>::__assign_with_size[abi:ne180100]<MTBEWorker::TaskRec*,MTBEWorker::TaskRec*>((char *)this + 8, (char *)__p, (uint64_t)v40, ((char *)v40 - (unsigned char *)__p) >> 5);
  }
  pthread_mutex_unlock(v4);
  MTBEWorker::SleepTillReady(this);
  if (__p)
  {
    char v40 = __p;
    operator delete(__p);
  }
}

void sub_1DA48C33C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTBEWorker::PendingTasks(MTBEWorker *this, MTBEWorker::Task *a2)
{
  __p = 0;
  __int16 v45 = 0;
  unint64_t v46 = 0;
  unint64_t v4 = (pthread_mutex_t *)((char *)this + 40);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 40));
  uint64_t v5 = *((void *)this + 1);
  unint64_t v41 = (char *)this + 8;
  char v42 = v4;
  if (v5 == *((void *)this + 2))
  {
    char v6 = 0;
  }
  else
  {
    char v6 = 0;
    do
    {
      long long v43 = *(_OWORD *)v5;
      uint64_t v8 = *(MTBEWorker::Task **)(v5 + 16);
      uint64_t v7 = *(void *)(v5 + 24);
      BOOL v9 = v8 == a2;
      timeval v10 = v45;
      if ((unint64_t)v45 >= v46)
      {
        uint64_t v12 = ((char *)v45 - (unsigned char *)__p) >> 5;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 59) {
          std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = v46 - (void)__p;
        if ((uint64_t)(v46 - (void)__p) >> 4 > v13) {
          unint64_t v13 = v14 >> 4;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15) {
          uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTBEWorker::TaskRec>>((uint64_t)&v46, v15);
        }
        else {
          uint64_t v16 = 0;
        }
        unint64_t v17 = &v16[32 * v12];
        *(_OWORD *)unint64_t v17 = v43;
        *((void *)v17 + 2) = v8;
        *((void *)v17 + 3) = v7;
        unint64_t v19 = __p;
        uint64_t v18 = v45;
        long long v20 = v17;
        if (v45 != __p)
        {
          do
          {
            long long v21 = *(v18 - 1);
            *((_OWORD *)v20 - 2) = *(v18 - 2);
            *((_OWORD *)v20 - 1) = v21;
            v20 -= 32;
            v18 -= 2;
          }
          while (v18 != v19);
          uint64_t v18 = __p;
        }
        uint64_t v11 = v17 + 32;
        __p = v20;
        __int16 v45 = v17 + 32;
        unint64_t v46 = (unint64_t)&v16[32 * v15];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *__int16 v45 = *(_OWORD *)v5;
        *((void *)v10 + 2) = v8;
        *((void *)v10 + 3) = v7;
        uint64_t v11 = v10 + 2;
      }
      __int16 v45 = v11;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MTBEWorker::TimeCmp &,std::__wrap_iter<MTBEWorker::TaskRec *>>((uint64_t)__p, (uint64_t)v11, (uint64_t)&v48, ((char *)v11 - (unsigned char *)__p) >> 5);
      uint64_t v5 = *((void *)this + 1);
      uint64_t v22 = *((void *)this + 2);
      uint64_t v23 = v22 - v5;
      if (v22 - v5 >= 33)
      {
        uint64_t v24 = 0;
        uint64_t v25 = v23 >> 5;
        long long v48 = *(_OWORD *)v5;
        long long v49 = *(_OWORD *)(v5 + 16);
        int64_t v26 = (unint64_t)((v23 >> 5) - 2) >> 1;
        long long v27 = (_OWORD *)v5;
        do
        {
          uint64_t v28 = (uint64_t)&v27[2 * v24 + 2];
          uint64_t v29 = (2 * v24) | 1;
          uint64_t v30 = 2 * v24 + 2;
          if (v30 < v25 && *(void *)v28 > *(void *)(v28 + 32))
          {
            v28 += 32;
            uint64_t v29 = v30;
          }
          long long v31 = *(_OWORD *)(v28 + 16);
          *long long v27 = *(_OWORD *)v28;
          v27[1] = v31;
          long long v27 = (_OWORD *)v28;
          uint64_t v24 = v29;
        }
        while (v29 <= v26);
        uint64_t v32 = (_OWORD *)(v22 - 32);
        if ((_OWORD *)v28 == v32)
        {
          long long v34 = v49;
          *(_OWORD *)uint64_t v28 = v48;
          *(_OWORD *)(v28 + 16) = v34;
        }
        else
        {
          long long v33 = v32[1];
          *(_OWORD *)uint64_t v28 = *v32;
          *(_OWORD *)(v28 + 16) = v33;
          *uint64_t v32 = v48;
          v32[1] = v49;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MTBEWorker::TimeCmp &,std::__wrap_iter<MTBEWorker::TaskRec *>>(v5, v28 + 32, (uint64_t)&v47, (v28 + 32 - v5) >> 5);
        }
        uint64_t v5 = *((void *)this + 1);
        uint64_t v22 = *((void *)this + 2);
      }
      v6 |= v9;
      uint64_t v35 = v22 - 32;
      *((void *)this + 2) = v35;
    }
    while (v5 != v35);
  }
  if (v41 != (char *)&__p) {
    std::vector<MTBEWorker::TaskRec>::__assign_with_size[abi:ne180100]<MTBEWorker::TaskRec*,MTBEWorker::TaskRec*>(v41, (char *)__p, (uint64_t)v45, ((char *)v45 - (unsigned char *)__p) >> 5);
  }
  pthread_mutex_unlock(v42);
  uint64_t v36 = *(void *)this;
  uint64_t v37 = (**(uint64_t (***)(MTBEWorker::Task *))a2)(a2);
  unint64_t v39 = "NO";
  if (v6) {
    unint64_t v39 = "YES";
  }
  MTBEWorker::DebugLog("<%s> PendingTasks %s? -> %s\n", v38, v36, v37, v39);
  if (__p)
  {
    __int16 v45 = __p;
    operator delete(__p);
  }
  return v6 & 1;
}

void sub_1DA48C660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E6BC5A00, MEMORY[0x1E4FBA1C8]);
}

void sub_1DA48C6E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MTBEWorker::TaskRec>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  timeval v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MTBEWorker::TimeCmp &,std::__wrap_iter<MTBEWorker::TaskRec *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    char v6 = (_OWORD *)(a1 + 32 * (v4 >> 1));
    uint64_t v7 = (_OWORD *)(a2 - 32);
    unint64_t v8 = *(void *)(a2 - 32);
    if (*(void *)v6 > v8)
    {
      __n128 v12 = *(__n128 *)(a2 - 24);
      uint64_t v13 = *(void *)(a2 - 8);
      do
      {
        BOOL v9 = v7;
        uint64_t v7 = v6;
        long long v10 = v6[1];
        *BOOL v9 = *v6;
        v9[1] = v10;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        char v6 = (_OWORD *)(a1 + 32 * v5);
      }
      while (*(void *)v6 > v8);
      *(void *)uint64_t v7 = v8;
      __n128 result = v12;
      *(__n128 *)((char *)v7 + 8) = v12;
      *((void *)v7 + 3) = v13;
    }
  }
  return result;
}

char *std::vector<MTBEWorker::TaskRec>::__assign_with_size[abi:ne180100]<MTBEWorker::TaskRec*,MTBEWorker::TaskRec*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  BOOL v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 5)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 59) {
      std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = std::vector<MTBEWorker::TaskRec>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    __n128 v12 = (void **)(v7 + 1);
    BOOL v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  __n128 v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 5;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v14 - v9);
    BOOL v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    unint64_t v19 = v16;
LABEL_18:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  _OWORD *v12 = &v9[v17];
  return result;
}

char *std::vector<MTBEWorker::TaskRec>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTBEWorker::TaskRec>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void MTBEWritePhonemes::MTBEWritePhonemes(MTBEWritePhonemes *this, char a2)
{
  *(void *)this = &unk_1F347D5A8;
  *((unsigned char *)this + 8) = a2;
  *((unsigned char *)this + 9) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_1F347D5A8;
  *((unsigned char *)this + 8) = a2;
  *((unsigned char *)this + 9) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
}

MTFESpeechElement *MTBEWritePhonemes::VisitIntonationalPhrase(MTBEWritePhonemes *this, MTFESpeechElement *a2)
{
  *((unsigned char *)this + 14) = BYTE6(a2[2].var6);
  return MTFESpeechElement::VisitChildren(a2, this);
}

MTFESpeechElement *MTBEWritePhonemes::VisitWord(MTBEWritePhonemes *this, MTFEWord *a2)
{
  MTBEWritePhonemes::HandleWord(this, a2);

  return MTFESpeechElement::VisitChildren((MTFESpeechElement *)a2, this);
}

void MTBEWritePhonemes::HandleWord(MTBEWritePhonemes *this, MTFEWord *a2)
{
  *((unsigned char *)this + 12) = 1;
  *((unsigned char *)this + 10) = 0;
  *((unsigned char *)this + 11) = a2->var15 == 31;
  MTFECommands::Visit((uint64_t)&a2->var18, (uint64_t)this);
  if (*((unsigned char *)this + 9))
  {
    uint64_t v4 = 0;
    std::string::value_type v5 = 93;
    do
    {
      std::string::push_back((std::string *)((char *)this + 16), v5);
      std::string::value_type v5 = asc_1DA50C24D[++v4];
    }
    while (v4 != 2);
    *((unsigned char *)this + 9) = 0;
  }
  int var10 = a2->var10;
  if (var10 == 1)
  {
    char v7 = 74;
  }
  else if (var10 == 2)
  {
    char v7 = 75;
  }
  else
  {
    int var15 = a2->var15;
    if (((1 << var15) & 0xA5273) != 0) {
      char v9 = 2;
    }
    else {
      char v9 = 75;
    }
    if (var15 == 255) {
      char v7 = 2;
    }
    else {
      char v7 = v9;
    }
  }
  *((unsigned char *)this + 13) = v7;
}

void MTBEWritePhonemes::Write(MTBEWritePhonemes *this, std::string::value_type *a2)
{
  std::string::value_type v2 = *a2;
  if (*a2)
  {
    timeval v3 = (std::string *)((char *)this + 16);
    uint64_t v4 = a2 + 1;
    do
    {
      std::string::push_back(v3, v2);
      int v5 = *(unsigned __int8 *)v4++;
      std::string::value_type v2 = v5;
    }
    while (v5);
  }
}

void MTBEWritePhonemes::VisitPhoneme(MTBEWritePhonemes *this, MTFEPhoneme *a2)
{
  if (*((unsigned char *)this + 12))
  {
    if (!a2->var9)
    {
      if (a2->var13 < 2.0) {
        return;
      }
      goto LABEL_11;
    }
    if (*((char *)this + 39) < 0)
    {
      if (!*((void *)this + 3))
      {
LABEL_6:
        uint64_t v4 = *(std::string::value_type **)(MEMORY[0x1E4FA5860] + 8 * *((unsigned __int8 *)this + 13));
        std::string::value_type v5 = *v4;
        if (*v4)
        {
          char v6 = (unsigned __int8 *)(v4 + 1);
          do
          {
            std::string::push_back((std::string *)((char *)this + 16), v5);
            int v7 = *v6++;
            std::string::value_type v5 = v7;
          }
          while (v7);
        }
LABEL_11:
        *((unsigned char *)this + 12) = 0;
        goto LABEL_12;
      }
    }
    else if (!*((unsigned char *)this + 39))
    {
      goto LABEL_6;
    }
    std::string::push_back((std::string *)((char *)this + 16), 32);
    goto LABEL_6;
  }
LABEL_12:
  unsigned int var9 = a2->var9;
  if (a2->var9 || a2->var6)
  {
    unsigned int var15 = a2->var15;
    if ((var15 & 0x4000) == 0)
    {
      if ((var15 & 0x10000000) != 0)
      {
        if (*((unsigned char *)this + 10))
        {
          uint64_t v10 = *(std::string::value_type **)(MEMORY[0x1E4FA5860] + 480);
          std::string::value_type v11 = *v10;
          if (*v10)
          {
            __n128 v12 = (unsigned __int8 *)(v10 + 1);
            do
            {
              std::string::push_back((std::string *)((char *)this + 16), v11);
              int v13 = *v12++;
              std::string::value_type v11 = v13;
            }
            while (v13);
            unsigned int var9 = a2->var9;
          }
        }
        *((unsigned char *)this + 10) = *((unsigned char *)this + 8);
      }
      if (*(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * var9))
      {
        unsigned int v14 = a2->var15;
        if ((v14 & 0x80000000) != 0) {
          *((unsigned char *)this + 10) = 1;
        }
        if ((v14 & 0x1400) != 0)
        {
          unint64_t v15 = *(std::string::value_type **)(MEMORY[0x1E4FA5860] + 8);
          std::string::value_type v16 = *v15;
          if (*v15)
          {
            size_t v17 = (unsigned __int8 *)(v15 + 1);
            do
            {
              std::string::push_back((std::string *)((char *)this + 16), v16);
              int v18 = *v17++;
              std::string::value_type v16 = v18;
            }
            while (v18);
          }
        }
        else if ((v14 & 0x800) != 0)
        {
          long long v20 = *(std::string::value_type **)(MEMORY[0x1E4FA5860] + 464);
          std::string::value_type v21 = *v20;
          if (*v20)
          {
            uint64_t v22 = (unsigned __int8 *)(v20 + 1);
            do
            {
              std::string::push_back((std::string *)((char *)this + 16), v21);
              int v23 = *v22++;
              std::string::value_type v21 = v23;
            }
            while (v23);
          }
        }
      }
      uint64_t v24 = *(std::string::value_type **)(MEMORY[0x1E4FA5860] + 8 * a2->var9);
      std::string::value_type v25 = *v24;
      if (*v24)
      {
        int64_t v26 = (std::string *)((char *)this + 16);
        long long v27 = (unsigned __int8 *)(v24 + 1);
        do
        {
          std::string::push_back(v26, v25);
          int v28 = *v27++;
          std::string::value_type v25 = v28;
        }
        while (v28);
      }
    }
  }
  else
  {
    if (*((unsigned __int8 *)this + 14) - 68 >= 5) {
      char v19 = 46;
    }
    else {
      char v19 = 0x213F2E3A2CuLL >> (8 * (*((unsigned char *)this + 14) - 68));
    }
    std::string::push_back((std::string *)((char *)this + 16), v19 & 0x3F);
  }
}

void MTBEWritePhonemes::VisitCommand(MTBEWritePhonemes *this, MTFECommand *a2)
{
  if (a2->var8 == 2003792484) {
    return;
  }
  uint64_t v4 = (std::string *)((char *)this + 16);
  if (*((unsigned char *)this + 9))
  {
    std::string::push_back((std::string *)((char *)this + 16), 59);
  }
  else
  {
    uint64_t v5 = 0;
    std::string::value_type v6 = 91;
    do
    {
      std::string::push_back(v4, v6);
      std::string::value_type v6 = asc_1DA50C250[++v5];
    }
    while (v5 != 2);
    *((unsigned char *)this + 9) = 1;
  }
  int v7 = 0;
  int64_t var8 = a2->var8;
  int64_t v12 = var8;
  if (var8 > 1918989425)
  {
    if (var8 == 1987013746)
    {
      uint64_t v9 = 1987013741;
    }
    else
    {
      if (var8 != 1918989426) {
        goto LABEL_17;
      }
      uint64_t v9 = 1918989413;
    }
  }
  else if (var8 == 1885495666)
  {
    uint64_t v9 = 1885495667;
  }
  else
  {
    if (var8 != 1886220146) {
      goto LABEL_17;
    }
    uint64_t v9 = 1886220132;
  }
  int64_t v12 = v9;
  int v7 = 1;
LABEL_17:
  for (uint64_t i = 0; i != 4; ++i)
    std::string::push_back(v4, *((unsigned char *)&v12 + i));
  int64_t var9 = a2->var9;
  if (v7)
  {
    if (var9 < 0)
    {
      std::string::push_back(v4, 45);
      int64_t var9 = -var9;
    }
    else
    {
      std::string::push_back(v4, 43);
    }
  }
  MTBEWritePhonemes::WriteFixed(this, var9, 4);
}

void MTBEWritePhonemes::Write(MTBEWritePhonemes *this, std::string::value_type *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    uint64_t v5 = (std::string *)((char *)this + 16);
    do
    {
      --v3;
      std::string::value_type v6 = *a2++;
      std::string::push_back(v5, v6);
    }
    while (v3);
  }
}

void MTBEWritePhonemes::WriteFixed(MTBEWritePhonemes *this, uint64_t a2, int a3)
{
  *(void *)&v11[19] = *MEMORY[0x1E4F143B8];
  double v4 = (double)a2 * 0.0000152587891;
  double v5 = __exp10((double)a3);
  sprintf(&v10, "%g", floor(v4 * v5 + 0.5) / v5);
  std::string::value_type v6 = v10;
  if (v10)
  {
    int v7 = (std::string *)((char *)this + 16);
    uint64_t v8 = v11;
    do
    {
      std::string::push_back(v7, v6);
      int v9 = *v8++;
      std::string::value_type v6 = v9;
    }
    while (v9);
  }
}

void MTBEWritePhonemes::WriteLong(MTBEWritePhonemes *this, unint64_t a2)
{
  int64_t v2 = a2;
  if ((a2 & 0x8000000000000000) != 0)
  {
    do
    {
      std::string::push_back((std::string *)((char *)this + 16), 45);
      unint64_t v4 = -v2;
      BOOL v5 = v2 <= 0;
      int64_t v2 = -v2;
    }
    while (!v5);
  }
  else
  {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xA) {
    MTBEWritePhonemes::WriteLong(this, v4 / 0xA);
  }

  std::string::push_back((std::string *)((char *)this + 16), (v4 % 0xA) | 0x30);
}

void MTBEWritePhonemes::~MTBEWritePhonemes(void **this)
{
  *this = &unk_1F347D5A8;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }

  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)this);
}

{
  uint64_t vars8;

  *this = &unk_1F347D5A8;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)this);

  JUMPOUT(0x1E016FF00);
}

void MTFEBuilder::MTFEBuilder(MTFEBuilder *this, SLLexer *a2)
{
  this->var0 = (void **)&unk_1F347D6D8;
  this->var1 = a2;
  *(_OWORD *)&this->var2 = 0u;
  *(_OWORD *)&this->var4 = 0u;
  this->int64_t var8 = 1;
  this->int var10 = 0;
  *(_WORD *)&this->var12 = 0;
  *(void *)&this->unsigned int var15 = 0;
  *(void *)&this->var17 = 0x4E4F524D00000000;
  this->var19 = 0;
}

{
  this->var0 = (void **)&unk_1F347D6D8;
  this->var1 = a2;
  *(_OWORD *)&this->var2 = 0u;
  *(_OWORD *)&this->var4 = 0u;
  this->int64_t var8 = 1;
  this->int var10 = 0;
  *(_WORD *)&this->var12 = 0;
  *(void *)&this->unsigned int var15 = 0;
  *(void *)&this->var17 = 0x4E4F524D00000000;
  this->var19 = 0;
}

void MTFEBuilder::~MTFEBuilder(MTFEBuilder *this)
{
  this->var0 = (void **)&unk_1F347D6D8;
  var2 = this->var2;
  if (var2) {
    (*((void (**)(MTFESentence *))var2->var0 + 2))(var2);
  }
  if (this->var19) {
    SLTokenRelease();
  }
}

{
  uint64_t vars8;

  MTFEBuilder::~MTFEBuilder(this);

  JUMPOUT(0x1E016FF00);
}

SLToken *MTFEBuilder::PeekToken(MTFEBuilder *this)
{
  __n128 result = this->var19;
  if (!result)
  {
    __n128 result = (SLToken *)((uint64_t (*)(SLLexer *))*this->var1->var0)(this->var1);
    this->var19 = result;
  }
  return result;
}

MTFEBuilder *MTFEBuilder::ParseSentence(MTFEBuilder *this)
{
  this->var7 = 0;
  this->int var10 = 0;
  while (1)
  {
    var19 = this->var19;
    if (!var19) {
      break;
    }
    this->var19 = 0;
LABEL_5:
    int Class = SLTokenGetClass();
    if (Class > 45)
    {
      switch(Class)
      {
        case '[':
          MTFEBuilder::ProcessCommand(this, var19);
          break;
        case '/':
          BOOL v5 = this->var19;
          if (!v5)
          {
            BOOL v5 = (SLToken *)((uint64_t (*)(SLLexer *))*this->var1->var0)(this->var1);
            this->var19 = v5;
          }
          (*((void (**)(MTFEBuilder *, BOOL))this->var0 + 2))(this, v5 == 0);
          break;
        case '.':
          if (this->var19
            || (unint64_t v4 = (SLToken *)((uint64_t (*)(SLLexer *))*this->var1->var0)(this->var1),
                (this->var19 = v4) != 0))
          {
            if (SLTokenGetClass() == 43) {
              SLTokenGetInfo();
            }
          }
          MTFEBuilder::ProcessPunctuation(this, var19);
      }
    }
    else
    {
      switch(Class)
      {
        case ' ':
          MTFEBuilder::ProcessWord(this, var19);
        case '#':
          MTFEBuilder::ProcessMelody(this, var19);
          break;
        case '+':
          MTFEBuilder::ProcessInsert(this, var19, 0);
          break;
      }
    }
    SLTokenRelease();
    if (this->var10) {
      return MTFEBuilder::EndIntonationalPhrase(this, 0);
    }
  }
  var19 = (SLToken *)((uint64_t (*)(SLLexer *))*this->var1->var0)(this->var1);
  this->var19 = 0;
  if (var19) {
    goto LABEL_5;
  }
  if (!this->var10) {
    (*((void (**)(MTFEBuilder *, uint64_t))this->var0 + 2))(this, 1);
  }
  return MTFEBuilder::EndIntonationalPhrase(this, 0);
}

void MTFEBuilder::ProcessWord(MTFEBuilder *this, SLToken *a2)
{
}

void sub_1DA48DBE8(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C40BE0D601BLL);
  _Unwind_Resume(a1);
}

uint64_t MTFEBuilder::ProcessInsert(MTFEBuilder *this, SLToken *a2, char a3)
{
  SLTokenGetInfo();
  int Info = SLTokenGetInfo();
  int v8 = Info;
  if (v6 && (Info & 1) == 0 && this->var3) {
    MTFEBuilder::ProcessInsertWord(this, a2);
  }
  uint64_t result = (uint64_t)MTFEBuilder::MakeIntonationalPhrase(this);
  if (v6) {
    char v10 = 1;
  }
  else {
    char v10 = v8;
  }
  if ((v10 & 1) == 0 && (a3 & 1) == 0)
  {
    if (!this->var19)
    {
      std::string::value_type v11 = (SLToken *)((uint64_t (*)(SLLexer *))*this->var1->var0)(this->var1);
      this->var19 = v11;
      if (!v11) {
        MTFEBuilder::ProcessInsertWord(this, a2);
      }
    }
    uint64_t result = SLTokenGetClass();
    if (result != 43 && result != 46) {
      MTFEBuilder::ProcessInsertWord(this, a2);
    }
  }
  if (v8) {
    this->var13 = 1;
  }
  return result;
}

void MTFEBuilder::ProcessPunctuation(MTFEBuilder *this, SLToken *a2)
{
  this->var13 = 0;
  MTFEBuilder::ProcessWord(this, a2);
}

void MTFEBuilder::ProcessCommand(MTFEBuilder *this, SLToken *a2)
{
}

void sub_1DA48E288(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  MEMORY[0x1E016FF00](v2, 0x1080C40ED847058);
  _Unwind_Resume(a1);
}

unsigned __int8 *MTFEBuilder::ProcessMelody(MTFEBuilder *this, SLToken *a2)
{
  MTFEBuilder::MakeIntonationalPhrase(this);
  if (!this->var3->var28) {
    operator new();
  }
  SLTokenGetHomograph();
  var28 = this->var3->var28;
  CFDataRef Phonemes = (const __CFData *)SLHomographGetPhonemes();
  uint64_t result = MTFEMelody::AddNotes(var28, Phonemes);
  for (uint64_t i = this->var5; i; uint64_t i = (MTFEWord *)i->var7)
  {
    if ((i->var9 & 0x80000000) == 0) {
      break;
    }
    i->int64_t var9 = *((void *)this->var3->var28 + 2);
  }
  return result;
}

void sub_1DA48E380(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x1080C40ED847058);
  _Unwind_Resume(a1);
}

MTFEBuilder *MTFEBuilder::EndIntonationalPhrase(MTFEBuilder *this, int a2)
{
  uint64_t v2 = this;
  if (this->var3 && !this->var4)
  {
    MTFEBuilder::MakePhrase(this);
    operator new();
  }
  this->var3 = 0;
  this->var4 = 0;
  if (a2)
  {
    if ((unsigned __int16)this->var20 >= 0xFBu)
    {
      this = (MTFEBuilder *)MTFEFirstPhoneme((MTFESpeechElement *)this->var5);
      BYTE2(this->var7) = 70;
      v2->int var10 = 1;
    }
  }
  return this;
}

void sub_1DA48E51C(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C40D6D86DEFLL);
  _Unwind_Resume(a1);
}

MTFEBuilder *MTFEBuilder::MakePhrase(MTFEBuilder *this)
{
  if (!this->var4)
  {
    MTFEBuilder::MakeIntonationalPhrase(this);
    operator new();
  }
  return this;
}

void sub_1DA48E5F0(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C4085E5C4E0);
  _Unwind_Resume(a1);
}

void MTFEBuilder::ProcessHomograph()
{
}

void sub_1DA48E9F0(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C4011C0417BLL);
  _Unwind_Resume(a1);
}

void MTFEBuilder::ProcessInsertWord(MTFEBuilder *this, SLToken *a2)
{
}

void sub_1DA48EB50(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C40D6D86DEFLL);
  _Unwind_Resume(a1);
}

MTFEBuilder *MTFEBuilder::MakeIntonationalPhrase(MTFEBuilder *this)
{
  if (!this->var3)
  {
    MTFEBuilder::MakeSentence(this);
    operator new();
  }
  return this;
}

void sub_1DA48ECB0(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C40D2EC344ELL);
  _Unwind_Resume(a1);
}

MTFEBuilder *MTFEBuilder::EndParagraph(MTFEBuilder *this, int a2)
{
  var2 = this->var2;
  if (var2)
  {
    if (a2) {
      __int16 v3 = 6;
    }
    else {
      __int16 v3 = 2;
    }
    var2->var8 |= v3;
    this->int var10 = 1;
    var7 = this->var7;
    if (var7) {
      var7->int64_t var9 = 70;
    }
  }
  this->int64_t var8 = 1;
  return this;
}

MTFEBuilder *MTFEBuilder::ResetProduct(MTFEBuilder *this, int a2)
{
  uint64_t v2 = this;
  if (a2)
  {
    this = (MTFEBuilder *)this->var2;
    if (this) {
      this = (MTFEBuilder *)(*((uint64_t (**)(MTFEBuilder *))this->var0 + 2))(this);
    }
  }
  v2->var2 = 0;
  v2->int var10 = 0;
  return this;
}

MTFEBuilder *MTFEBuilder::MakeSentence(MTFEBuilder *this)
{
  if (!this->var2) {
    operator new();
  }
  return this;
}

void sub_1DA48EE04(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C40D62C662CLL);
  _Unwind_Resume(a1);
}

uint64_t MTFEDebugVisitor::Indent(FILE **this)
{
  return fprintf(this[1], "%*s", *((_DWORD *)this + 6), "");
}

uint64_t MTFEDebugVisitor::StartElement(FILE **this, const char *a2, int a3)
{
  if (*((unsigned char *)this + 28)) {
    fputc(10, this[1]);
  }
  *((unsigned char *)this + 28) = a3 ^ 1;
  fprintf(this[1], "%*s", *((_DWORD *)this + 6), "");
  uint64_t v6 = 32;
  if (a3) {
    uint64_t v6 = 10;
  }
  uint64_t result = fprintf(this[1], "%s {%c", a2, v6);
  *((_DWORD *)this + 6) += 3;
  return result;
}

size_t MTFEDebugVisitor::EndElement(MTFEDebugVisitor *this)
{
  int v2 = *((_DWORD *)this + 6) - 3;
  *((_DWORD *)this + 6) = v2;
  __int16 v3 = (FILE *)*((void *)this + 1);
  if (*((unsigned char *)this + 28))
  {
    fputc(32, v3);
    *((unsigned char *)this + 28) = 0;
  }
  else
  {
    fprintf(v3, "%*s", v2, "");
  }
  unint64_t v4 = (FILE *)*((void *)this + 1);

  return fwrite("}\n", 2uLL, 1uLL, v4);
}

size_t MTFEDebugVisitor::PrintTags(size_t this, const SLWordTagSet *a2)
{
  if (a2->var0[0])
  {
    size_t v3 = this;
    fputc(123, *(FILE **)(this + 8));
    if (a2->var0[0])
    {
      unint64_t v4 = 0;
      do
      {
        BOOL v5 = (unsigned char *)SLTagEng::Name((SLTagEng *)a2->var0[v4 + 1]);
        if (v5 && *v5) {
          fprintf(*(FILE **)(v3 + 8), "%s%s");
        }
        else {
          fprintf(*(FILE **)(v3 + 8), "%s(?%d?)");
        }
        ++v4;
      }
      while (v4 < a2->var0[0]);
    }
    uint64_t v6 = *(FILE **)(v3 + 8);
    return fwrite("} ", 2uLL, 1uLL, v6);
  }
  return this;
}

uint64_t MTFEDebugVisitor::VisitSentence(FILE **this, MTFESpeechElement *a2)
{
  MTFEDebugVisitor::StartElement(this, "Sentence", 0);
  if (LOWORD(a2[1].var0)) {
    fprintf(this[1], " %04x", SLOWORD(a2[1].var0));
  }
  float v4 = *((float *)&a2[1].var0 + 1);
  if (v4 != 0.0) {
    fprintf(this[1], " %f", v4);
  }
  if (*(_WORD *)&a2[1].var2) {
    fprintf(this[1], " F %d", *(__int16 *)&a2[1].var2);
  }
  float v5 = *(float *)(&a2[1].var2 + 2);
  if (v5 > 1.0) {
    fprintf(this[1], " V %f %f", v5, *(float *)&a2[1].var3);
  }
  float v6 = *((float *)&a2[1].var3 + 1);
  if (v6 > 1.0) {
    fprintf(this[1], " R %f", v6);
  }
  MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);
  MTFEDebugVisitor::EndElement((MTFEDebugVisitor *)this);
  int v7 = this[1];

  return fflush(v7);
}

size_t MTFEDebugVisitor::VisitIntonationalPhrase(MTFEDebugVisitor *this, MTFESpeechElement *a2)
{
  *((void *)this + 4) = 0;
  MTFEDebugVisitor::StartElement((FILE **)this, "IntonationalPhrase", 0);
  if (a2[1].var0) {
    fprintf(*((FILE **)this + 1), " %04x", a2[1].var0);
  }
  if (a2[3].var1 >= 1)
  {
    char v4 = 0;
    uint64_t v5 = 0;
    do
    {
      fputc(sBegInsertName[((unint64_t)a2[3].var3 >> v4) & 3], *((FILE **)this + 1));
      ++v5;
      v4 += 2;
    }
    while (v5 < a2[3].var1);
  }
  if (*(__int16 *)&a2[3].var2 >= 1)
  {
    char v6 = 0;
    uint64_t v7 = 0;
    do
    {
      fputc(sEndInsertName[((unint64_t)a2[3].var4 >> v6) & 3], *((FILE **)this + 1));
      ++v7;
      v6 += 2;
    }
    while (v7 < *(__int16 *)&a2[3].var2);
  }
  if (*((_WORD *)&a2[2].var2 + 1)) {
    fprintf(*((FILE **)this + 1), " C:%d/%d N<%d:%d>", *((__int16 *)&a2[2].var2 + 2), *((__int16 *)&a2[2].var2 + 1), *(__int16 *)&a2[2].var2, a2[2].var1);
  }
  unsigned int v8 = BYTE6(a2[2].var6) - 68;
  if (v8 <= 4) {
    fwrite(off_1E6BC5B60[(char)v8], 4uLL, 1uLL, *((FILE **)this + 1));
  }
  if (a2[3].var6)
  {
    MTFEDebugVisitor::StartElement((FILE **)this, "Melody", 0);
    var6 = (MTFEMelody *)a2[3].var6;
    if (*((void *)var6 + 2))
    {
      unint64_t v10 = 0;
      do
      {
        std::string::value_type v11 = (FILE *)*((void *)this + 1);
        if (v10) {
          int64_t v12 = " ";
        }
        else {
          int64_t v12 = "";
        }
        double v13 = MTFEMelody::Pitch(var6, v10);
        float v14 = MTFEMelody::Duration((MTFEMelody *)a2[3].var6, v10);
        fprintf(v11, "%s%3.0f:%4.2f", v12, v13, v14);
        ++v10;
        var6 = (MTFEMelody *)a2[3].var6;
      }
      while (v10 < *((void *)var6 + 2));
    }
    MTFEDebugVisitor::EndElement(this);
  }
  MTFESpeechElement::VisitChildren(a2, this);
  MTFECommands::Visit((uint64_t)&a2[1].var1, (uint64_t)this);
  if (BYTE5(a2[2].var6))
  {
    MTFEDebugVisitor::StartElement((FILE **)this, "FinalBoundary", 0);
    fprintf(*((FILE **)this + 1), " %s", MTFEToBI::sTone[SBYTE5(a2[2].var6)]);
    float v15 = *(float *)&a2[3].var5;
    if (v15 != 0.0) {
      fprintf(*((FILE **)this + 1), " %4.2f", v15);
    }
    MTFEDebugVisitor::EndElement(this);
  }

  return MTFEDebugVisitor::EndElement(this);
}

size_t MTFEDebugVisitor::VisitIntermediatePhrase(FILE **this, MTFESpeechElement *a2)
{
  MTFEDebugVisitor::StartElement(this, "IntermediatePhrase", 0);
  int v4 = SWORD2(a2[1].var0);
  if (WORD2(a2[1].var0))
  {
    uint64_t v5 = this[1];
    int v6 = SWORD1(a2[1].var0);
    int var0_low = SLOWORD(a2[1].var0);
    int var0_high = SHIWORD(a2[1].var0);
    int v9 = *(__int16 *)&a2[1].var2;
    int var1 = a2[1].var1;
    std::string::value_type v11 = (const char *)SLBndEng::Name((SLBndEng *)LOBYTE(a2[1].var4));
    fprintf(v5, "%d:%d - %d:%d N<%d:%d> [%s] %p", v6, var0_low, var0_high, v4, v9, var1, v11, a2);
  }
  MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);
  if (BYTE1(a2[1].var4))
  {
    MTFEDebugVisitor::StartElement(this, "PhraseAccent", 0);
    fprintf(this[1], " %s", MTFEToBI::sTone[SBYTE1(a2[1].var4)]);
    float v12 = *((float *)&a2[1].var4 + 1);
    if (v12 != 0.0) {
      fprintf(this[1], " %4.2f", v12);
    }
    MTFEDebugVisitor::EndElement((MTFEDebugVisitor *)this);
  }

  return MTFEDebugVisitor::EndElement((MTFEDebugVisitor *)this);
}

size_t MTFEDebugVisitor::VisitWord(FILE **this, MTFESpeechElement *a2)
{
  MTFECommands::Visit((uint64_t)&a2[2], (uint64_t)this);
  MTFEDebugVisitor::StartElement(this, "Word", 0);
  if (LOBYTE(a2[3].var5))
  {
    unsigned int var0 = a2[1].var0;
    if ((var0 & 4) != 0) {
      uint64_t v5 = "-";
    }
    else {
      uint64_t v5 = "";
    }
    if ((var0 & 8) != 0) {
      int v6 = "-";
    }
    else {
      int v6 = "";
    }
    fprintf(this[1], "%s\"%s\"%s ", v5, (const char *)&a2[3].var5, v6);
  }
  unsigned int v7 = a2[1].var0;
  if ((v7 & 0x1000) != 0)
  {
    fwrite("Morph ", 6uLL, 1uLL, this[1]);
    unsigned int v7 = a2[1].var0;
    if ((v7 & 2) == 0)
    {
LABEL_11:
      if ((v7 & 1) == 0) {
        goto LABEL_12;
      }
      goto LABEL_20;
    }
  }
  else if ((v7 & 2) == 0)
  {
    goto LABEL_11;
  }
  fwrite("Flex ", 5uLL, 1uLL, this[1]);
  unsigned int v7 = a2[1].var0;
  if ((v7 & 1) == 0)
  {
LABEL_12:
    if ((v7 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_20:
  fwrite("TUNE ", 5uLL, 1uLL, this[1]);
  unsigned int v7 = a2[1].var0;
  if ((v7 & 0x800) == 0)
  {
LABEL_13:
    if ((v7 & 0x20) == 0) {
      goto LABEL_14;
    }
    goto LABEL_22;
  }
LABEL_21:
  fwrite("ExactPitch ", 0xBuLL, 1uLL, this[1]);
  unsigned int v7 = a2[1].var0;
  if ((v7 & 0x20) == 0)
  {
LABEL_14:
    if ((v7 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_22:
  unint64_t v10 = this[1];
  if ((v7 & 0x8000) != 0) {
    fprintf(v10, "CapitalizedButIgnored ");
  }
  else {
    fprintf(v10, "Capitalized ");
  }
  if (((uint64_t)a2[1].var0 & 0x40) != 0) {
LABEL_15:
  }
    fwrite("Silence ", 8uLL, 1uLL, this[1]);
LABEL_16:
  uint64_t v8 = BYTE6(a2[1].var4);
  uint64_t v9 = MEMORY[0x1E4FA5840];
  if (v8 == 255)
  {
    if (LODWORD(a2[1].var5) == 0x7FFFFFFF)
    {
      fwrite("Any ", 4uLL, 1uLL, this[1]);
    }
    else
    {
      for (uint64_t i = 0; i != 32; ++i)
      {
        if ((LODWORD(a2[1].var5) >> i)) {
          fprintf(this[1], "%s ", *(const char **)(v9 + 8 * i));
        }
      }
    }
  }
  else
  {
    fprintf(this[1], "%s ", *(const char **)(MEMORY[0x1E4FA5840] + 8 * v8));
  }
  MTFEDebugVisitor::PrintTags((size_t)this, (const SLWordTagSet *)((char *)&a2[1].var5 + 4));
  if (*((unsigned __int8 *)&a2[1].var2 + 2) != 255)
  {
    if (*(_DWORD *)&a2[1].var1 != 60) {
      fputs("...", this[1]);
    }
    fputc(60, this[1]);
    fputs(*(const char **)(v9 + 8 * *((unsigned __int8 *)&a2[1].var2 + 2)), this[1]);
    if (*((_WORD *)&a2[1].var2 + 2))
    {
      fputc(32, this[1]);
      MTFEDebugVisitor::PrintTags((size_t)this, (const SLWordTagSet *)(&a2[1].var2 + 4));
    }
    fputc(62, this[1]);
    if (*(_DWORD *)&a2[1].var1 != 62) {
      fputs("...", this[1]);
    }
    fputc(32, this[1]);
  }
  if (HIBYTE(a2[1].var0))
  {
    float v12 = this[1];
    double v13 = (const char *)SLBndEng::Name((SLBndEng *)HIBYTE(a2[1].var0));
    fprintf(v12, "[%s] ", v13);
  }
  if (WORD2(a2[3].var0)) {
    fprintf(this[1], "%d:%d - %d:%d ", SWORD1(a2[3].var0), SLOWORD(a2[3].var0), SHIWORD(a2[3].var0), SWORD2(a2[3].var0));
  }
  if (a2[3].var1) {
    fprintf(this[1], "[%d] ", a2[3].var1);
  }
  if (BYTE6(a2[1].var0)) {
    fputs(*(const char **)(MEMORY[0x1E4FA5838] + 8 * BYTE6(a2[1].var0)), this[1]);
  }
  if (*(_WORD *)&a2[3].var2) {
    fprintf(this[1], " %d", *(__int16 *)&a2[3].var2);
  }
  if (*((_WORD *)&a2[3].var2 + 1)) {
    fprintf(this[1], " <%d>", *((__int16 *)&a2[3].var2 + 1));
  }
  if ((SWORD2(a2[1].var0) & 0x80000000) == 0) {
    fprintf(this[1], " :%d", WORD2(a2[1].var0));
  }
  var6 = (MEOWWordInstance *)a2[4].var6;
  if (var6)
  {
    float v15 = this[1];
    std::string::value_type v16 = MEOWPhon::Name((MEOWPhon *)*(unsigned char *)var6);
    size_t v17 = MEOWPhon::Name((MEOWPhon *)*((unsigned __int8 *)var6 + 1));
    unsigned int v18 = bswap32(*((unsigned __int16 *)var6 + 1)) >> 16;
    char v19 = MEOWPhon::Name((MEOWPhon *)*((unsigned __int8 *)var6 + 4));
    long long v20 = MEOWPhon::Name((MEOWPhon *)*((unsigned __int8 *)var6 + 5));
    fprintf(v15, " [%s-%s#%d - %s-%s#%d]", v16, v17, v18, v19, v20, bswap32(*((unsigned __int16 *)var6 + 3)) >> 16);
  }
  MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);

  return MTFEDebugVisitor::EndElement((MTFEDebugVisitor *)this);
}

size_t MTFEDebugVisitor::VisitHomograph(FILE **this, MTFESpeechElement *a2)
{
  MTFEDebugVisitor::StartElement(this, "Homograph", 0);
  if (LODWORD(a2[1].var0) == 0x7FFFFFFF)
  {
    fwrite("Any", 3uLL, 1uLL, this[1]);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = MEMORY[0x1E4FA5840];
    do
    {
      if ((LODWORD(a2[1].var0) >> v4)) {
        fprintf(this[1], "%s ", *(const char **)(v5 + 8 * v4));
      }
      ++v4;
    }
    while (v4 != 32);
  }
  MTFEDebugVisitor::PrintTags((size_t)this, (const SLWordTagSet *)((char *)&a2[1].var0 + 4));
  MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);

  return MTFEDebugVisitor::EndElement((MTFEDebugVisitor *)this);
}

size_t MTFEDebugVisitor::VisitSyllable(FILE **this, MTFESpeechElement *a2)
{
  MTFEDebugVisitor::StartElement(this, "Syllable", 0);
  if (WORD2(a2[1].var0)) {
    fprintf(this[1], "%d:%d-%d", SLOWORD(a2[1].var0), SWORD1(a2[1].var0), SWORD2(a2[1].var0));
  }
  if (HIWORD(a2[1].var0))
  {
    fprintf(this[1], " %s", MTFEToBI::sTone[SHIWORD(a2[1].var0)]);
    float v4 = *(float *)&a2[1].var1;
    if (v4 != 0.0) {
      fprintf(this[1], " %4.2f", v4);
    }
  }
  MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);

  return MTFEDebugVisitor::EndElement((MTFEDebugVisitor *)this);
}

size_t MTFEDebugVisitor::VisitPhoneme(FILE **this, MTFESpeechElement *a2)
{
  uint64_t v4 = BYTE2(a2[1].var0);
  int v5 = BYTE3(a2[1].var0);
  if (BYTE3(a2[1].var0))
  {
    if ((v4 - 46) > 4) {
      int v6 = "!!!";
    }
    else {
      int v6 = off_1E6BC5B88[(char)(v4 - 46)];
    }
  }
  else
  {
    int v6 = *(const char **)(MEMORY[0x1E4FA5858] + 8 * v4);
  }
  char v7 = MEOWPhon::sP2M[v4];
  MTFEDebugVisitor::StartElement(this, "Phoneme", 0);
  float v8 = *(float *)&a2[1].var1;
  float v9 = *(float *)(&a2[1].var2 + 2);
  double v10 = v8;
  double v11 = (float)(v8 * v9);
  double v12 = (float)(v8 * (float)(1.0 - v9));
  var7 = a2->var7;
  if (var7)
  {
    if (var7 == (MTFESpeechElement *)this[4]) {
      uint64_t v14 = 60;
    }
    else {
      uint64_t v14 = 33;
    }
  }
  else
  {
    uint64_t v14 = 32;
  }
  uint64_t v15 = 62;
  if (!a2->var6) {
    uint64_t v15 = 32;
  }
  fprintf(this[1], "%3s %08x %3d %5.1f(%5.1f/%5.1f) %c%c %d", v6, LODWORD(a2[1].var3), SWORD2(a2[1].var0), v10, v11, v12, v14, v15, SLOWORD(a2[1].var0));
  if (BYTE5(a2[1].var5))
  {
    fputc(32, this[1]);
    if (this[2] && SLOWORD(a2[1].var5) != -1 && SWORD1(a2[1].var5) != -1)
    {
      MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v35, 2);
      std::string::value_type v16 = (MEOWReader *)this[2];
      unint64_t DemiRecord = MEOWReader::GetDemiRecord(v16, BYTE4(a2[1].var5), BYTE5(a2[1].var5), LOWORD(a2[1].var5), 1);
      MEOWReader::GetDemi((uint64_t)v16, DemiRecord, 1, (uint64_t)v33);
      int v18 = v34;
      char v19 = (MEOWReader *)this[2];
      unint64_t v20 = MEOWReader::GetDemiRecord(v19, BYTE5(a2[1].var5), BYTE6(a2[1].var5), WORD1(a2[1].var5), 0);
      MEOWReader::GetDemi((uint64_t)v19, v20, 0, (uint64_t)v33);
      if (v34 == v18) {
        fputc(38, this[1]);
      }
      MEOWVectorBase::~MEOWVectorBase(v35);
    }
    fputc(91, this[1]);
    if (SLOWORD(a2[1].var5) != -1)
    {
      std::string::value_type v21 = this[1];
      uint64_t v22 = MEOWPhon::Name((MEOWPhon *)BYTE4(a2[1].var5));
      int v23 = MEOWPhon::Name((MEOWPhon *)BYTE5(a2[1].var5));
      if (SWORD1(a2[1].var5) == -1) {
        uint64_t v24 = " ...";
      }
      else {
        uint64_t v24 = " ";
      }
      fprintf(v21, "%s>%s#%d%s", v22, v23, LOWORD(a2[1].var5), v24);
    }
    if (SWORD1(a2[1].var5) != -1)
    {
      std::string::value_type v25 = this[1];
      if (SLOWORD(a2[1].var5) == -1) {
        int64_t v26 = "... ";
      }
      else {
        int64_t v26 = "";
      }
      long long v27 = MEOWPhon::Name((MEOWPhon *)BYTE5(a2[1].var5));
      int v28 = MEOWPhon::Name((MEOWPhon *)BYTE6(a2[1].var5));
      fprintf(v25, "%s%s<%s#%d", v26, v27, v28, WORD1(a2[1].var5));
    }
    fputc(93, this[1]);
  }
  if (HIDWORD(a2[1].var3)) {
    fprintf(this[1], " @%u", HIDWORD(a2[1].var3));
  }
  if (a2[1].var4)
  {
    MTFEDebugVisitor::StartElement(this, "Pitch", 0);
    var4 = (MTFEPitchTargets *)a2[1].var4;
    if (*(_DWORD *)var4 >= 1)
    {
      uint64_t v30 = 0;
      do
      {
        fprintf(this[1], " %5.1f:%d", (float)((float)(*((void *)var4 + v30 + 1) & 0xFFFFFFLL) / 100.0), *((void *)var4 + v30 + 1) >> 24);
        ++v30;
        var4 = (MTFEPitchTargets *)a2[1].var4;
      }
      while (v30 < *(_DWORD *)var4);
    }
    MTFEDebugVisitor::EndElement((MTFEDebugVisitor *)this);
  }
  if (v5) {
    char v31 = v7 + 1;
  }
  else {
    char v31 = v7;
  }
  MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);
  size_t result = MTFEDebugVisitor::EndElement((MTFEDebugVisitor *)this);
  *((unsigned char *)this + 29) = v31;
  this[4] = (FILE *)a2;
  return result;
}

void sub_1DA48FF30(_Unwind_Exception *a1)
{
  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

size_t MTFEDebugVisitor::VisitCommand(FILE **this, MTFECommand *a2)
{
  MTFEDebugVisitor::StartElement(this, "Command", 0);
  unint64_t v4 = (unint64_t)a2->var9 >> 24;
  if (v4 <= 0x7F) {
    int v5 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v4 + 60) & 0x100;
  }
  else {
    int v5 = __maskrune(v4, 0x100uLL);
  }
  int v6 = this[1];
  if (v5) {
    fprintf(v6, "%c%c%c%c %c%c%c%c", (SLODWORD(a2->var8) >> 24), ((int)(LODWORD(a2->var8) << 8) >> 24));
  }
  else {
    fprintf(v6, "%c%c%c%c %08X");
  }

  return MTFEDebugVisitor::EndElement((MTFEDebugVisitor *)this);
}

void MTFEDebugVisitor::Dump(MTFESpeechElement *this, MTFESpeechElement *a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143C8];
  v3[0] = &unk_1F347D710;
  v3[1] = v2;
  v3[2] = 0;
  int v4 = 0;
  char v5 = 0;
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v3, this);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v3);
}

void sub_1DA4900A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)va);
  _Unwind_Resume(a1);
}

void MTFEDebugVisitor::~MTFEDebugVisitor(MTFEDebugVisitor *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

MTFESpeechElement *MTFEPhrasing::VisitIntonationalPhrase(MTFESpeechElement *this, MTFESpeechElement *a2)
{
  if (!BYTE4(a2[2].var6))
  {
    HIBYTE(this->var1) = a2->var1 < 10;
    *(_WORD *)&this->var2 = 0;
    *(_DWORD *)(&this->var2 + 2) = 0;
    return MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);
  }
  return this;
}

uint64_t MTFEPhrasing::VisitWord(uint64_t this, MTFEWord *a2)
{
  uint64_t v3 = this;
  int var15 = a2->var15;
  int var11 = a2->var11;
  BOOL v6 = a2->var11 != 0;
  int v7 = *(unsigned __int8 *)(this + 8);
  unsigned __int8 v36 = -1;
  if (a2->var12 == 60 || (this = (uint64_t)MTFEWord::PrevWord(a2)) == 0)
  {
    int v9 = 0;
  }
  else
  {
    uint64_t v8 = this;
    this = (uint64_t)MTFEWord::POSForPrev((MTFEWord *)this, &v36, 0, 0);
    if (*(_DWORD *)(v8 + 64) == 62)
    {
      int v9 = 0;
      if (!var11)
      {
LABEL_5:
        BOOL v6 = *(unsigned __int8 *)(v8 + 63) > 2u;
        goto LABEL_9;
      }
    }
    else
    {
      int v9 = (*(unsigned __int8 *)(v8 + 56) >> 4) & 1;
      if (!var11) {
        goto LABEL_5;
      }
    }
    BOOL v6 = 1;
  }
LABEL_9:
  unsigned __int8 v35 = -1;
  unsigned __int8 v34 = -1;
  unsigned __int8 v33 = -1;
  BOOL v10 = 1;
  BOOL v11 = 1;
  BOOL v12 = 1;
  if (a2->var12 != 62)
  {
    this = (uint64_t)MTFEWord::NextWord(a2);
    if (!this) {
      goto LABEL_14;
    }
    char v31 = 0;
    uint64_t v32 = 0;
    MTFEWord::POSForNext((MTFEWord *)this, &v35, 0, &v32);
    BOOL v10 = v35 == 31;
    this = (uint64_t)v32;
    if (!v32) {
      goto LABEL_14;
    }
    MTFEWord::POSForNext(v32, &v34, 0, &v31);
    BOOL v11 = v34 == 31;
    this = (uint64_t)v31;
    if (v31)
    {
      this = (uint64_t)MTFEWord::POSForNext(v31, &v33, 0, 0);
      BOOL v12 = v33 == 31;
    }
    else
    {
LABEL_14:
      BOOL v12 = 1;
    }
  }
  int v13 = 1 << var15;
  if (var15 == 255) {
    int v13 = 0;
  }
  int v14 = v36;
  if (v36 == 255) {
    int v15 = 0;
  }
  else {
    int v15 = 1 << v36;
  }
  int v16 = v35;
  if (v35 == 255) {
    int v17 = 0;
  }
  else {
    int v17 = 1 << v35;
  }
  if (var15 == 31)
  {
    int v18 = *(_DWORD *)(v3 + 12);
    goto LABEL_39;
  }
  if (v10) {
    goto LABEL_35;
  }
  int v19 = v7 ^ 1;
  if (*(unsigned char *)(v3 + 10))
  {
    *(unsigned char *)(v3 + 10) = 0;
    BOOL v20 = v19 != 0;
    unsigned __int8 v21 = 11;
    goto LABEL_28;
  }
  int v22 = v33;
  BOOL v23 = (v17 & 0x102000) != 0;
  if (var15 != 14) {
    BOOL v23 = 0;
  }
  if (v36 != 255) {
    BOOL v23 = 0;
  }
  *(unsigned char *)(v3 + 10) = v23;
  BOOL v20 = v19 != 0;
  if (v6) {
    goto LABEL_35;
  }
  if (v14 == 255 || var15 != 11)
  {
    if (var15 != 14 || *(int *)(v3 + 12) < 5 || v16 == 6 || v14 == 2 || v14 == 3 || v14 == 8) {
      goto LABEL_52;
    }
LABEL_59:
    unsigned __int8 v21 = 12;
    goto LABEL_28;
  }
  if (!*(unsigned char *)(v3 + 11) && *(int *)(v3 + 12) >= 4 && v34 != 10) {
    goto LABEL_59;
  }
LABEL_52:
  if ((v15 & 0x200000) != 0 && *(int *)(v3 + 12) > 2) {
    goto LABEL_59;
  }
  if ((v13 & 0x140000) != 0 && *(int *)(v3 + 12) >= 4 && (v15 & 0x400) == 0) {
    goto LABEL_59;
  }
  int v24 = *(_DWORD *)(v3 + 12);
  if (var15 == 12 && v24 > 4) {
    goto LABEL_59;
  }
  if (v24 >= 3 && (v15 & 0x33) != 0 && (v13 & 0x10C) != 0) {
    goto LABEL_63;
  }
  if (v14)
  {
    if (var15 == 10) {
      goto LABEL_66;
    }
    goto LABEL_87;
  }
  if (v24 >= 5 && (this = v17 & 0x110C, (v17 & 0x110C) == 0) && (this = v34, v34 != 2) && (v13 & 0x10C) != 0
    || (var15 != 12 ? (int v26 = v9) : (int v26 = 0), v26 == 1 && (v17 & 0xC04) == 0 && v24 >= 4 && var15 == 1))
  {
LABEL_63:
    unsigned __int8 v21 = 13;
    goto LABEL_28;
  }
  if (var15 == 10)
  {
LABEL_66:
    char v25 = v24 < 4 || v11;
    if ((v25 & 1) == 0 && (v15 & 0xC00) == 0) {
      goto LABEL_91;
    }
    goto LABEL_87;
  }
  if (var15 == 1)
  {
    if (v24 <= 2) {
      goto LABEL_108;
    }
    goto LABEL_63;
  }
LABEL_87:
  if (v14 == 19 && (v13 & 0x2080) == 0 && v24 >= 3 && (v13 & 0x41) != 0)
  {
LABEL_91:
    unsigned __int8 v21 = 14;
    goto LABEL_28;
  }
  if (var15 == 12)
  {
    BOOL v28 = v22 == 255 || ((1 << v22) & 0x10C) == 0;
    if (v24 < 4 || (v15 & 0x33) == 0 || !v28) {
      goto LABEL_108;
    }
LABEL_107:
    unsigned __int8 v21 = 15;
    goto LABEL_28;
  }
  if (var15 == 17 && v24 >= 6 && (v15 & 0x214C) == 0 && v34 != 11) {
    goto LABEL_107;
  }
LABEL_108:
  if ((v15 & 0xA5273) != 0 && (v13 & 0xA5273) == 0)
  {
    BOOL v20 = 1;
    unsigned __int8 v21 = 16;
    if (v14 != 4 || (v13 & 0x200000) == 0)
    {
LABEL_28:
      if (!v6 && v20) {
        a2->int var11 = v21;
      }
      goto LABEL_35;
    }
  }
  int v30 = var15 != 15 || v24 < 4 || v11;
  if (((v30 | v12) & 1) == 0)
  {
    BOOL v20 = 1;
    unsigned __int8 v21 = 16;
    goto LABEL_28;
  }
LABEL_35:
  int v18 = *(_DWORD *)(v3 + 12);
  if (v18 >= 2) {
    *(unsigned char *)(v3 + 11) = 0;
  }
  if ((v13 & 0x2000) != 0) {
    *(unsigned char *)(v3 + 11) = 1;
  }
LABEL_39:
  *(_DWORD *)(v3 + 12) = v18 + 1;
  return this;
}

void MTFEPhrasing::~MTFEPhrasing(MTFEPhrasing *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

MTFESpeechElement *MTFEPOSResolver::VisitSentence(MTFEPOSResolver *this, MTFESpeechElement *a2)
{
  BOOL v2 = ((uint64_t)a2[1].var0 & 8) != 0 || a2->var1 == 1 && a2->var3->var3->var1 == 1;
  *((unsigned char *)this + 9) = v2;
  *((unsigned char *)this + 10) = 0;
  return MTFESpeechElement::VisitChildren(a2, this);
}

MTFESpeechElement *MTFEPOSResolver::VisitIntonationalPhrase(MTFEPOSResolver *this, MTFESpeechElement *a2)
{
  *((unsigned char *)this + 8) = 0;
  *((_DWORD *)this + 4) = 100;
  *((unsigned char *)this + 12) = (uint64_t)a2[1].var0 & 1;
  var6 = a2->var6;
  if (var6)
  {
    if (var6[3].var1) {
      LOBYTE(var6) = ((uint64_t)var6[3].var3 & 3) == 1;
    }
    else {
      LOBYTE(var6) = 0;
    }
  }
  *((unsigned char *)this + 13) = (_BYTE)var6;
  *((unsigned char *)this + 14) = a2[3].var6 != 0;
  return MTFESpeechElement::VisitChildren(a2, this);
}

void MTFEPOSResolver::VisitWord(MTFEPOSResolver *this, MTFEWord *a2)
{
  BOOL v2 = a2;
  *((unsigned char *)this + 11) = 0;
  MTFECommands::Visit((uint64_t)&a2->var18, (uint64_t)this);
  __int32 var16 = v2->var16;
  SLWordTagSet var17 = v2->var17;
  unsigned __int8 v879 = -1;
  unsigned int v878 = 0;
  MTFESpeechPedigree::MTFESpeechPedigree((MTFESpeechPedigree *)v875, (MTFESpeechElement *)v2);
  v865 = v2;
  if ((v2->var8 & 0x200) != 0) {
    v2->unint64_t var15 = SLFirstPOSInSet();
  }
  if (!var16)
  {
    unsigned int v863 = 0;
    unsigned __int16 v10 = 0;
    var3 = v2->var3;
    LODWORD(var15) = 255;
    LODWORD(v13) = 255;
    goto LABEL_208;
  }
  v4.i32[0] = var16;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  BOOL v7 = v2->var1 == 1 && v5.i32[0] <= 1u && (var16 & 0x10880) == 0;
  unsigned int v863 = var16;
  if (v7)
  {
    LODWORD(var15) = SLFirstPOSInSet();
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      int v14 = (FILE *)*MEMORY[0x1E4F143D8];
      int v15 = *(const char **)(MEMORY[0x1E4FA5840] + 8 * var15);
      int v16 = (const char *)SLTagEng::Name(0);
      fprintf(v14, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v865->var27, v15, "", "", v16, 352, v863, v878);
    }
    unsigned __int16 v10 = 0;
    var3 = 0;
    goto LABEL_181;
  }
  v874 = 0;
  v873.var0[0] = 0;
  unsigned __int8 v872 = -1;
  v871.var0[0] = 0;
  if (v2->var12 == 60)
  {
    uint64_t v8 = 0;
    BOOL v9 = 0;
    int v856 = 1;
    goto LABEL_26;
  }
  Word = (MTFEWord *)MTFEWord::PrevWord(v2);
  uint64_t v8 = Word;
  if (Word) {
    MTFEWord::POSForPrev(Word, &v879, &v873, &v874);
  }
  if (v874) {
    MTFEWord::POSForPrev(v874, &v872, &v871, 0);
  }
  if (v879 != 255)
  {
    int v856 = 0;
LABEL_23:
    BOOL v9 = 0;
    goto LABEL_26;
  }
  int v856 = *(void *)(v876 + 48) == 0;
  if (!*(_WORD *)(v876 + 176)) {
    goto LABEL_23;
  }
  BOOL v9 = (*(void *)(v876 + 184) & 3) == 1;
LABEL_26:
  v869 = 0;
  v870 = 0;
  *(void *)v868 = 0;
  v867.var0[0] = 0;
  v866.var0[0] = 0;
  if (v2->var12 == 62)
  {
    int v18 = 0;
    BOOL v19 = 0;
    BOOL v20 = 1;
    BOOL v858 = 0;
    int v860 = 1;
    BOOL v853 = 1;
    int v854 = 1;
    goto LABEL_51;
  }
  unsigned __int8 v21 = MTFEWord::NextWord(v2);
  int v18 = v21;
  if (v21)
  {
    int v22 = ((uint64_t)v21[1].var0 & 0x40) != 0 && strcmp((const char *)&v21[3].var5, "< ") != 0;
    int var0_high = HIBYTE(v18[1].var0);
    BOOL v19 = var0_high == 9 || var0_high == 4;
    MTFEWord::POSForNext((MTFEWord *)v18, &v878, &v867, &v870);
    if (v870)
    {
      if (v22) {
        int v22 = (LOBYTE(v870->var8) >> 6) & 1;
      }
      MTFEWord::POSForNext(v870, &v868[1], &v866, &v869);
    }
    if (v869)
    {
      if (v22) {
        int v22 = (LOBYTE(v869->var8) >> 6) & 1;
      }
      MTFEWord::POSForNext(v869, v868, 0, 0);
    }
    if (!v22) {
      goto LABEL_49;
    }
  }
  else
  {
    BOOL v19 = 0;
  }
  if (!*(void *)(v877 + 40))
  {
    BOOL v858 = *((unsigned char *)this + 13) != 0;
    int v860 = 1;
    goto LABEL_50;
  }
LABEL_49:
  BOOL v858 = 0;
  int v860 = 0;
LABEL_50:
  BOOL v853 = (v868[1] & 0x7FFFFFFF) == 0;
  int v854 = (v878 & 0x7FFFFFFF) == 0;
  BOOL v20 = (v868[0] & 0x7FFFFFFF) == 0;
LABEL_51:
  BOOL v852 = v20;
  if (SLWordTagSet::find(&var17))
  {
    unsigned int var8 = v865->var8;
    if ((var8 & 0x80) != 0)
    {
      long long v27 = this;
      int v28 = var8 & 0x10000;
      if (*((unsigned char *)this + 10)) {
        BOOL v29 = v28 == 0;
      }
      else {
        BOOL v29 = 1;
      }
      if (v29) {
        __int16 v26 = 70;
      }
      else {
        __int16 v26 = 71;
      }
    }
    else
    {
      __int16 v26 = 71;
      long long v27 = this;
    }
    if (MTFEPOSResolver::RequireTagAndPOS(v27, (MTFESpeechElement *)v865, v26, 0x7FFFFFFF))
    {
      unsigned int v863 = *((_DWORD *)this + 7);
      SLWordTagSet var17 = (SLWordTagSet)*((_OWORD *)this + 2);
    }
  }
  else if (v865->var27[1])
  {
    *((unsigned char *)this + 10) = (v865->var8 & 0x80) != 0;
  }
  if (SLWordTagSet::find(&var17))
  {
    __int16 v30 = (v865->var8 & 0x100) != 0 ? 72 : 73;
    if (MTFEPOSResolver::RequireTagAndPOS(this, (MTFESpeechElement *)v865, v30, 0x7FFFFFFF))
    {
      unsigned int v863 = *((_DWORD *)this + 7);
      SLWordTagSet var17 = (SLWordTagSet)*((_OWORD *)this + 2);
    }
  }
  if (SLWordTagSet::find(&var17))
  {
    char v31 = (MTFESpeechElement *)v865;
    if ((v865->var8 & 0x200) != 0)
    {
      __int16 v32 = 1039;
    }
    else
    {
      __int16 v32 = SLWordTagSet::find(&v867) ? 1038 : 1039;
      char v31 = (MTFESpeechElement *)v865;
    }
    if (MTFEPOSResolver::RequireTagAndPOS(this, v31, v32, 0x7FFFFFFF))
    {
      unsigned int v33 = *((_DWORD *)this + 7);
      SLWordTagSet var17 = (SLWordTagSet)*((_OWORD *)this + 2);
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        unsigned __int8 v34 = (FILE *)*MEMORY[0x1E4F143D8];
        unsigned __int8 v35 = *(const char **)(MEMORY[0x1E4FA5840] + 2040);
        unsigned __int8 v36 = (const char *)SLTagEng::Name(0);
        fprintf(v34, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v865->var27, v35, "", "", v36, 480, v33, v878);
      }
      unsigned int v863 = v33;
    }
  }
  if (SLWordTagSet::find(&var17))
  {
    if (*((unsigned char *)this + 9)
      || *((unsigned char *)this + 11)
      || *((unsigned char *)this + 14) && strcmp(v865->var27, "THE") && strcmp(v865->var27, "A"))
    {
      goto LABEL_84;
    }
    LOWORD(v862) = 66;
    if (v865->var10 == 1) {
      goto LABEL_87;
    }
    int v52 = v860;
    if ((v865->var8 & 0x2000) != 0)
    {
      int v52 = 0;
      __int16 v53 = 66;
    }
    else
    {
      __int16 v53 = 67;
    }
    LOWORD(v862) = v53;
    if (v52 != 1) {
      goto LABEL_87;
    }
    if (v19 || !strcmp(v865->var27, "IT")) {
      v865->int var10 = 2;
    }
    if (v858 && (!strcmp(v865->var27, "THE") || !strcmp(v865->var27, "A"))) {
      __int16 v37 = 67;
    }
    else {
LABEL_84:
    }
      __int16 v37 = 66;
    LOWORD(v862) = v37;
  }
  else
  {
    LOWORD(v862) = 0;
  }
LABEL_87:
  if (!SLWordTagSet::find(&var17)) {
    goto LABEL_98;
  }
  long long v38 = v865;
  if ((v865->var8 & 0x8020) != 0x20
    || *((unsigned char *)this + 12) && (long long v38 = v865, !SLWordTagSet::find(&v867))
    || (var27 = v38->var27, !strcmp(v38->var27, "I")))
  {
    if (MTFEPOSResolver::RequireTagAndPOS(this, (MTFESpeechElement *)v38, 77, 0x7FFFFFFF))
    {
      unsigned int v863 = *((_DWORD *)this + 7);
      SLWordTagSet var17 = (SLWordTagSet)*((_OWORD *)this + 2);
    }
    goto LABEL_98;
  }
  if (!MTFEPOSResolver::RequireTagAndPOS(this, (MTFESpeechElement *)v38, 76, 0x7FFFFFFF))
  {
LABEL_98:
    LODWORD(var15) = 255;
    goto LABEL_99;
  }
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
  {
    char v40 = (FILE *)*MEMORY[0x1E4F143D8];
    unint64_t v41 = (const char *)*MEMORY[0x1E4FA5840];
    char v42 = (const char *)SLTagEng::Name((SLTagEng *)0x4C);
    fprintf(v40, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", var27, v41, "", "", v42, 520, v863, v878);
  }
  LODWORD(var15) = 0;
  LOWORD(v862) = 76;
LABEL_99:
  long long v43 = v865->var27;
  if (!strcmp(v865->var27, "PRES."))
  {
    if (SLWordTagSet::find(&v867))
    {
      HIBYTE(v18[1].var0) = 2;
      strcpy(v43, "PRESIDENT");
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        long long v44 = (FILE *)*MEMORY[0x1E4F143D8];
        __int16 v45 = *(const char **)(MEMORY[0x1E4FA5840] + 8 * var15);
        unint64_t v46 = (const char *)SLTagEng::Name((SLTagEng *)0x40C);
        fprintf(v44, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v45, "", "", v46, 536, v863, v878);
      }
      LOWORD(v862) = 1036;
    }
    else
    {
      strcpy(v43, "PRESENTS");
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        char v47 = (FILE *)*MEMORY[0x1E4F143D8];
        long long v48 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
        long long v49 = (const char *)SLTagEng::Name((SLTagEng *)0x40D);
        fprintf(v47, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v48, "", "", v49, 541, v863, v878);
      }
      LOWORD(v862) = 1037;
      LODWORD(var15) = 1;
    }
  }
  if (!strcmp(v43, "EXPY"))
  {
    if (SLWordTagSet::find(&v873))
    {
      int v50 = 1056;
      uint64_t v51 = (MTFESpeechElement *)v865;
    }
    else
    {
      uint64_t v51 = (MTFESpeechElement *)v865;
      if (v8 && (v8->var8 & 0x20) != 0) {
        int v50 = 1056;
      }
      else {
        int v50 = 1057;
      }
    }
    unsigned int v862 = v50;
    MTFEPOSResolver::RequireTagAndPOS(this, v51, v50, 0x7FFFFFFF);
    unsigned int v54 = *((_DWORD *)this + 7);
    SLWordTagSet var17 = (SLWordTagSet)*((_OWORD *)this + 2);
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
    {
      int v55 = (FILE *)*MEMORY[0x1E4F143D8];
      int v56 = *(const char **)(MEMORY[0x1E4FA5840] + 8 * var15);
      int v57 = (const char *)SLTagEng::Name((SLTagEng *)v862);
      fprintf(v55, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v56, "", "", v57, 556, v54, v878);
    }
    unsigned int v863 = v54;
  }
  if (SLWordTagSet::find(&var17))
  {
    int v58 = SLWordTagSet::find(&var17);
    if (SLWordTagSet::find(&v873))
    {
      *(_WORD *)&v865->int var10 = 516;
      strcpy(v43, "DRIVE");
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        int v59 = (FILE *)*MEMORY[0x1E4F143D8];
        int v60 = (const char *)*MEMORY[0x1E4FA5840];
        __int16 v61 = (const char *)SLTagEng::Name((SLTagEng *)0x402);
        fprintf(v59, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v60, "", "", v61, 577, v863, v878);
      }
LABEL_180:
      var3 = 0;
      LODWORD(var15) = 0;
      unsigned __int16 v10 = 1026;
      goto LABEL_181;
    }
    if (v58)
    {
      if (SLWordTagSet::find(&v867))
      {
        HIBYTE(v18[1].var0) = 2;
        strcpy(v43, "DOCTOR");
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v69 = (FILE *)*MEMORY[0x1E4F143D8];
          v70 = (const char *)*MEMORY[0x1E4FA5840];
          v71 = (const char *)SLTagEng::Name((SLTagEng *)0x403);
          fprintf(v69, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v70, "", "", v71, 582, v863, v878);
        }
LABEL_153:
        var3 = 0;
        LODWORD(var15) = 0;
        unsigned __int16 v10 = 1027;
        goto LABEL_181;
      }
      v79 = v865;
      if (((1 << v879) & 0x41) == 0)
      {
        if ((v878 & 0x41) != 0)
        {
          HIBYTE(v18[1].var0) = 2;
          strcpy(v43, "DOCTOR");
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v127 = (FILE *)*MEMORY[0x1E4F143D8];
            v128 = (const char *)*MEMORY[0x1E4FA5840];
            v129 = (const char *)SLTagEng::Name((SLTagEng *)0x403);
            fprintf(v127, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v128, "", "", v129, 593, v863, v878);
          }
        }
        else
        {
          strcpy(v43, "DOCTOR");
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v149 = (FILE *)*MEMORY[0x1E4F143D8];
            v150 = (const char *)*MEMORY[0x1E4FA5840];
            v151 = (const char *)SLTagEng::Name((SLTagEng *)0x403);
            fprintf(v149, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v150, "", "", v151, 598, v863, v878);
          }
        }
        goto LABEL_153;
      }
LABEL_178:
      *(_WORD *)&v79->int var10 = 516;
      strcpy(v43, "DRIVE");
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v86 = (FILE *)*MEMORY[0x1E4F143D8];
        v87 = (const char *)*MEMORY[0x1E4FA5840];
        v88 = (const char *)SLTagEng::Name((SLTagEng *)0x402);
        fprintf(v86, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v87, "", "", v88, 588, v863, v878);
      }
      goto LABEL_180;
    }
    v79 = v865;
    if (((1 << v879) & 0x41) != 0) {
      goto LABEL_178;
    }
    goto LABEL_286;
  }
  if (!SLWordTagSet::find(&var17))
  {
    if (SLWordTagSet::find(&var17))
    {
      if (SLWordTagSet::find(&var17) && SLWordTagSet::find(&v867))
      {
        HIBYTE(v18[1].var0) = 2;
        strcpy(v43, "FORT");
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          __int16 v66 = (FILE *)*MEMORY[0x1E4F143D8];
          v67 = (const char *)*MEMORY[0x1E4FA5840];
          v68 = (const char *)SLTagEng::Name((SLTagEng *)0x404);
          fprintf(v66, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v67, "", "", v68, 652, v863, v878);
        }
        var3 = 0;
        LODWORD(var15) = 0;
        unsigned __int16 v10 = 1028;
      }
      else
      {
        v865->int var11 = 2;
        strcpy(v43, "FEET");
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v80 = (FILE *)*MEMORY[0x1E4F143D8];
          v81 = (const char *)*MEMORY[0x1E4FA5840];
          v82 = (const char *)SLTagEng::Name((SLTagEng *)0x405);
          fprintf(v80, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v81, "", "", v82, 657, v863, v878);
        }
        var3 = 0;
        LODWORD(var15) = 0;
        unsigned __int16 v10 = 1029;
      }
      goto LABEL_181;
    }
    if (SLWordTagSet::find(&var17))
    {
      if (SLWordTagSet::find(&v873))
      {
        v865->int var11 = 2;
        if (v865->var27[2] == 83) {
          v75 = "POINTS";
        }
        else {
          v75 = "POINT";
        }
        strcpy(v43, v75);
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v76 = (FILE *)*MEMORY[0x1E4F143D8];
          v77 = *(const char **)(MEMORY[0x1E4FA5840] + 8 * var15);
          v78 = (const char *)SLTagEng::Name((SLTagEng *)0x417);
          fprintf(v76, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v77, "", "", v78, 664, v863, v878);
        }
      }
      else
      {
        if (SLWordTagSet::find(&v867))
        {
          HIBYTE(v18[1].var0) = 2;
          if (v865->var27[2] == 83) {
            v122 = "PARTS";
          }
          else {
            v122 = "PART";
          }
          strcpy(v43, v122);
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v123 = (FILE *)*MEMORY[0x1E4F143D8];
            v124 = *(const char **)(MEMORY[0x1E4FA5840] + 8 * var15);
            v125 = (const char *)SLTagEng::Name((SLTagEng *)0x416);
            fprintf(v123, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v124, "", "", v125, 669, v863, v878);
          }
          __int16 v126 = 1046;
          goto LABEL_282;
        }
        if (v865->var27[2] == 83) {
          v130 = "POINTS";
        }
        else {
          v130 = "POINT";
        }
        strcpy(v43, v130);
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v131 = (FILE *)*MEMORY[0x1E4F143D8];
          v132 = *(const char **)(MEMORY[0x1E4FA5840] + 8 * var15);
          v133 = (const char *)SLTagEng::Name((SLTagEng *)0x417);
          fprintf(v131, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v132, "", "", v133, 673, v863, v878);
        }
      }
      __int16 v126 = 1047;
LABEL_282:
      LOWORD(v862) = v126;
      goto LABEL_283;
    }
    if (SLWordTagSet::find(&var17) && SLWordTagSet::find(&v873))
    {
      if (MTFEPOSResolver::RequireTagAndPOS(this, (MTFESpeechElement *)v865, 86, 0x7FFFFFFF))
      {
        unsigned int v113 = *((_DWORD *)this + 7);
        SLWordTagSet var17 = (SLWordTagSet)*((_OWORD *)this + 2);
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v114 = (FILE *)*MEMORY[0x1E4F143D8];
          v115 = *(const char **)(MEMORY[0x1E4FA5840] + 8 * var15);
          v116 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
          fprintf(v114, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v115, "", "", v116, 682, v113, v878);
        }
        unsigned int v863 = v113;
      }
      goto LABEL_283;
    }
    int v117 = SLWordTagSet::find(&var17) ^ 1;
    if ((unsigned __int16)v862 == 66) {
      LOBYTE(v117) = 1;
    }
    if (v117) {
      goto LABEL_283;
    }
    v79 = v865;
    unsigned int v118 = v865->var8;
    if ((v118 & 0x200) != 0)
    {
      if (v865->var15)
      {
LABEL_284:
        if (var15 != 255)
        {
          var3 = 0;
LABEL_315:
          LODWORD(v13) = 255;
LABEL_316:
          unsigned __int16 v10 = v862;
          goto LABEL_182;
        }
LABEL_286:
        unsigned int v134 = v79->var8;
        if ((v134 & 0x200) != 0)
        {
          v79->unsigned int var8 = v134 ^ 0x200;
          unint64_t var15 = v79->var15;
          if ((v863 >> var15))
          {
            LODWORD(v13) = 255;
          }
          else
          {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "TTS: Tuple forced illegal POS %s for \"%s\"\n", *(const char **)(MEMORY[0x1E4FA5840] + 8 * var15), v43);
            LODWORD(var15) = SLFirstPOSInSet();
            LODWORD(v13) = v865->var15;
          }
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v141 = "";
            if (v13 == 255) {
              v142 = "";
            }
            else {
              v142 = "->";
            }
            if (v13 != 255) {
              v141 = *(const char **)(MEMORY[0x1E4FA5840] + 8 * v13);
            }
            v143 = (FILE *)*MEMORY[0x1E4F143D8];
            v144 = *(const char **)(MEMORY[0x1E4FA5840] + 8 * var15);
            v145 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
            fprintf(v143, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v144, v142, v141, v145, 754, v863, v878);
          }
          goto LABEL_306;
        }
        if ((v863 & 0x100000) != 0)
        {
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v138 = (FILE *)*MEMORY[0x1E4F143D8];
            v139 = *(const char **)(MEMORY[0x1E4FA5840] + 160);
            v140 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
            fprintf(v138, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v139, "", "", v140, 761, v863, v878);
          }
          var3 = 0;
          LODWORD(var15) = 20;
          goto LABEL_315;
        }
        if ((v863 & 0x200000) != 0)
        {
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v146 = (FILE *)*MEMORY[0x1E4F143D8];
            v147 = *(const char **)(MEMORY[0x1E4FA5840] + 168);
            v148 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
            fprintf(v146, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v147, "", "", v148, 768, v863, v878);
          }
          var3 = 0;
          LODWORD(var15) = 21;
          goto LABEL_315;
        }
        if ((SLWordTagSet::find(&v873) & v863) == 1)
        {
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v135 = (FILE *)*MEMORY[0x1E4F143D8];
            v136 = (const char *)*MEMORY[0x1E4FA5840];
            v137 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
            fprintf(v135, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v136, "", "", v137, 775, v863, v878);
          }
LABEL_292:
          var3 = 0;
          LODWORD(var15) = 0;
          goto LABEL_315;
        }
        if (SLWordTagSet::find(&v873) && (v863 & 0x40) != 0 && (v878 & 1) != 0
          || ((int v152 = SLWordTagSet::find(&v871), v153 = v879, v879 == 14) ? (v154 = v152) : (v154 = 0),
              v154 == 1 && (v863 & 0x40) != 0 && (v878 & 1) != 0))
        {
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v165 = (FILE *)*MEMORY[0x1E4F143D8];
            v166 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
            v167 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
            fprintf(v165, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v166, "", "", v167, 784, v863, v878);
          }
          goto LABEL_351;
        }
        if ((~v863 & 0x483) == 0)
        {
          int v155 = 1 << v879;
          if (((1 << v879) & 0x22000) != 0 && (v878 & 0x22000) == 0)
          {
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
            {
              v156 = (FILE *)*MEMORY[0x1E4F143D8];
              v157 = (const char *)*MEMORY[0x1E4FA5840];
              v158 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
              fprintf(v156, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v157, "", "", v158, 801, v863, v878);
            }
            goto LABEL_292;
          }
          if (!(v878 & 0x8000 | v155 & 0x100000)
            && ((v155 & 0x14100) == 0 || (v868[1] & 0x10E) != 0)
            && ((v155 & 0x10E) != 0 || (v878 & 0x200000) == 0 || (v868[1] & 0x10E) != 0))
          {
            if ((v155 & 0x250012) != 0 && ((v878 & 0x40000) != 0 || (v878 & 0x110000) != 0 && (v868[1] & 0x10E) != 0))
            {
              if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
              {
                v194 = (FILE *)*MEMORY[0x1E4F143D8];
                v195 = *(const char **)(MEMORY[0x1E4FA5840] + 80);
                v196 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                fprintf(v194, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v195, "", "", v196, 820, v863, v878);
              }
LABEL_435:
              var3 = 0;
              LODWORD(var15) = 10;
              goto LABEL_315;
            }
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
            {
              v203 = (FILE *)*MEMORY[0x1E4F143D8];
              v204 = *(const char **)(MEMORY[0x1E4FA5840] + 56);
              v205 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
              fprintf(v203, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v204, "", "", v205, 826, v863, v878);
            }
            goto LABEL_457;
          }
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v178 = (FILE *)*MEMORY[0x1E4F143D8];
            v179 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
            v180 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
            fprintf(v178, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v179, "", "", v180, 811, v863, v878);
          }
LABEL_438:
          var3 = 0;
          LODWORD(var15) = 1;
          goto LABEL_315;
        }
        if ((~v863 & 0x403) == 0)
        {
          if (((1 << v879) & 0x22000) != 0 && (v878 & 0x22000) == 0)
          {
LABEL_404:
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
            {
              v191 = (FILE *)*MEMORY[0x1E4F143D8];
              v192 = (const char *)*MEMORY[0x1E4FA5840];
              v193 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
              fprintf(v191, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v192, "", "", v193, 840, v863, v878);
            }
            goto LABEL_292;
          }
          if (((0x22000u >> v872) & 1) != 0 && v879 == 6)
          {
            unsigned int v168 = v878;
            if ((v878 & 0x22000) == 0) {
              goto LABEL_404;
            }
          }
          else
          {
            if (v879 == 15)
            {
LABEL_436:
              if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
              {
                v209 = (FILE *)*MEMORY[0x1E4F143D8];
                v210 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                v211 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                fprintf(v209, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v210, "", "", v211, 846, v863, v878);
              }
              goto LABEL_438;
            }
            if (v879 == 16)
            {
              unsigned int v168 = v878;
              if ((v878 & 0x80000) == 0) {
                goto LABEL_404;
              }
            }
            else
            {
              unsigned int v168 = v878;
            }
          }
          if ((v168 & 0x80000) == 0)
          {
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
            {
              v206 = (FILE *)*MEMORY[0x1E4F143D8];
              v207 = *(const char **)(MEMORY[0x1E4FA5840] + 80);
              v208 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
              fprintf(v206, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v207, "", "", v208, 852, v863, v878);
            }
            goto LABEL_435;
          }
          goto LABEL_436;
        }
        if ((~v863 & 0x12400) == 0)
        {
          if (((v856 & 1) != 0 || ((1 << v879) & 0xBE) != 0)
            && (v878 & 0x30000) == 0
            && (v868[1] & 0x30000) == 0
            && (v868[0] & 0x30000) == 0
            && (v853 & (v878 >> 5) & 1) == 0
            && ((v878 & 0x20) == 0 || (v852 & (v868[1] >> 7) & 1) == 0)
            && ((v878 & 0x41) != 0 || (v878 & 0x4040) != 0 && (v868[1] & 0x41) != 0))
          {
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
            {
              v255 = (FILE *)*MEMORY[0x1E4F143D8];
              v256 = *(const char **)(MEMORY[0x1E4FA5840] + 104);
              v257 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
              fprintf(v255, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v256, "", "", v257, 868, v863, v878);
            }
LABEL_426:
            var3 = 0;
            LODWORD(var15) = 13;
            goto LABEL_315;
          }
          int v181 = 1 << v879;
          if (((1 << v879) & 0x4000) != 0)
          {
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
            {
              v200 = (FILE *)*MEMORY[0x1E4F143D8];
              v201 = *(const char **)(MEMORY[0x1E4FA5840] + 80);
              v202 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
              fprintf(v200, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v201, "", "", v202, 874, v863, v878);
            }
            goto LABEL_435;
          }
          if ((((v879 == 255) & ~v856) != 0 || (v181 & 0x210033) != 0)
            && (v878 & 0x172000) != 0
            && (v868[1] & 0x1CF) != 0
            || (v181 & 0x32) != 0 && (v878 & 0x10) != 0 && (v868[1] & 0x10000) != 0
            || (v181 & 0x290001) != 0 && (v878 & 0x10E) != 0)
          {
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
            {
              v182 = (FILE *)*MEMORY[0x1E4F143D8];
              v183 = *(const char **)(MEMORY[0x1E4FA5840] + 80);
              v184 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
              fprintf(v182, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v183, "", "", v184, 885, v863, v878);
            }
            goto LABEL_435;
          }
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v218 = (FILE *)*MEMORY[0x1E4F143D8];
            v219 = *(const char **)(MEMORY[0x1E4FA5840] + 128);
            v220 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
            fprintf(v218, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v219, "", "", v220, 891, v863, v878);
          }
          goto LABEL_452;
        }
        int v185 = v863 & 0x8080;
        if (v185 == 32896)
        {
          unsigned int v186 = v878;
          if ((v878 & 0x480) != 0 && (v878 & 0x2000) == 0)
          {
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
            {
              v187 = (FILE *)*MEMORY[0x1E4F143D8];
              v188 = *(const char **)(MEMORY[0x1E4FA5840] + 56);
              v189 = *(const char **)(MEMORY[0x1E4FA5840] + 152);
              v190 = (const char *)SLTagEng::Name((SLTagEng *)0x42);
              fprintf(v187, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v188, "->", v189, v190, 907, v863, v878);
            }
            unsigned __int16 v10 = 66;
            LODWORD(v13) = 19;
            LODWORD(var15) = 7;
            goto LABEL_307;
          }
          if (v879 == 7)
          {
            int v212 = strcmp(v8->var27, "OF");
            char v213 = v854;
            if (v212) {
              char v213 = 1;
            }
            if (v213) {
              goto LABEL_455;
            }
          }
          else if (v854)
          {
LABEL_455:
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
            {
              v221 = (FILE *)*MEMORY[0x1E4F143D8];
              v222 = *(const char **)(MEMORY[0x1E4FA5840] + 56);
              v223 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
              fprintf(v221, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v222, "", "", v223, 923, v863, v878);
            }
LABEL_457:
            LODWORD(v13) = 255;
LABEL_458:
            LODWORD(var15) = 7;
LABEL_306:
            unsigned __int16 v10 = v862;
LABEL_307:
            var3 = 0;
            if (var15 == 7 && v10 == 66 && ((v860 ^ 1) & 1) == 0)
            {
              if (*((unsigned char *)this + 9))
              {
                var3 = 0;
                unsigned __int16 v10 = 66;
              }
              else
              {
                unsigned __int16 v10 = 66;
                var3 = 0;
                if (!*((unsigned char *)this + 11))
                {
                  if (v865->var10 == 1) {
                    unsigned __int16 v10 = 66;
                  }
                  else {
                    unsigned __int16 v10 = 67;
                  }
                }
              }
              LODWORD(var15) = 7;
            }
            goto LABEL_182;
          }
          if ((v186 & 0x32C00) == 0 && ((v186 & 0x10E) != 0 || (v186 & 0x4000) != 0 && (v868[1] & 0x10E) != 0))
          {
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
            {
              v240 = (FILE *)*MEMORY[0x1E4F143D8];
              v241 = *(const char **)(MEMORY[0x1E4FA5840] + 120);
              v242 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
              fprintf(v240, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v241, "", "", v242, 916, v863, v878);
            }
            var3 = 0;
            LODWORD(var15) = 15;
            goto LABEL_315;
          }
          goto LABEL_455;
        }
        if ((~v863 & 0x12000) == 0)
        {
          if ((v878 & 0x103) == 1
            || (~v878 & 0x101) == 0 && (v868[1] & 0x10C) != 0
            || (v878 & 0x4040) != 0 && (v868[1] & 0x41) != 0 && (v868[1] & 0x100) == 0)
          {
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
            {
              v197 = (FILE *)*MEMORY[0x1E4F143D8];
              v198 = *(const char **)(MEMORY[0x1E4FA5840] + 104);
              v199 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
              fprintf(v197, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v198, "", "", v199, 939, v863, v878);
            }
            goto LABEL_426;
          }
          if ((~v878 & 3) == 0)
          {
            int v236 = v853;
            if (((1 << v879) & 0x32) != 0) {
              int v236 = 1;
            }
            if (v236 == 1)
            {
              if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
              {
                v237 = (FILE *)*MEMORY[0x1E4F143D8];
                v238 = *(const char **)(MEMORY[0x1E4FA5840] + 104);
                v239 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                fprintf(v237, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v238, "", "", v239, 947, v863, v878);
              }
              goto LABEL_426;
            }
          }
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v243 = (FILE *)*MEMORY[0x1E4F143D8];
            v244 = *(const char **)(MEMORY[0x1E4FA5840] + 128);
            v245 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
            fprintf(v243, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v244, "", "", v245, 953, v863, v878);
          }
LABEL_452:
          var3 = 0;
          LODWORD(var15) = 16;
          goto LABEL_315;
        }
        if ((~v863 & 0x14200) == 0)
        {
          char v214 = v854 ^ 1;
          if (v879 != 255) {
            char v214 = 1;
          }
          if ((v214 & 1) == 0)
          {
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
            {
              v215 = (FILE *)*MEMORY[0x1E4F143D8];
              v216 = *(const char **)(MEMORY[0x1E4FA5840] + 72);
              v217 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
              fprintf(v215, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v216, "", "", v217, 965, v863, v878);
            }
LABEL_465:
            var3 = 0;
            LODWORD(var15) = 9;
            goto LABEL_315;
          }
          if ((v878 & 0x10C) != 0)
          {
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
            {
              v228 = (FILE *)*MEMORY[0x1E4F143D8];
              v229 = *(const char **)(MEMORY[0x1E4FA5840] + 128);
              v230 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
              fprintf(v228, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v229, "", "", v230, 972, v863, v878);
            }
            goto LABEL_452;
          }
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v252 = (FILE *)*MEMORY[0x1E4F143D8];
            v253 = *(const char **)(MEMORY[0x1E4FA5840] + 112);
            v254 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
            fprintf(v252, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v253, "", "", v254, 979, v863, v878);
          }
          goto LABEL_535;
        }
        if ((~v863 & 0x4201) == 0)
        {
          char v224 = v854 ^ 1;
          if (v879 != 255) {
            char v224 = 1;
          }
          if ((v224 & 1) == 0)
          {
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
            {
              v225 = (FILE *)*MEMORY[0x1E4F143D8];
              v226 = *(const char **)(MEMORY[0x1E4FA5840] + 72);
              v227 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
              fprintf(v225, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v226, "", "", v227, 991, v863, v878);
            }
            goto LABEL_465;
          }
          if (((0x22040u >> v879) & 1) != 0 && (v878 & 0x60) == 0)
          {
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
            {
              v280 = (FILE *)*MEMORY[0x1E4F143D8];
              v281 = (const char *)*MEMORY[0x1E4FA5840];
              v282 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
              fprintf(v280, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v281, "", "", v282, 998, v863, v878);
            }
            goto LABEL_292;
          }
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v246 = (FILE *)*MEMORY[0x1E4F143D8];
            v247 = *(const char **)(MEMORY[0x1E4FA5840] + 112);
            v248 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
            fprintf(v246, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v247, "", "", v248, 1005, v863, v878);
          }
LABEL_535:
          var3 = 0;
          LODWORD(var15) = 14;
          goto LABEL_315;
        }
        if ((v863 & 0x4043) == 0x4043)
        {
          int v231 = 1 << v879;
          if (((1 << v879) & 0x108C00) != 0
            || (((1 << v872) & 0x3E) != 0 ? (BOOL v232 = 1) : (BOOL v232 = (v231 & 0x10001) == 0), ((v854 | v232) & 1) == 0))
          {
            if ((v878 & 0x10E) == 0)
            {
              if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
              {
                v265 = (FILE *)*MEMORY[0x1E4F143D8];
                v266 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                v267 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                fprintf(v265, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v266, "", "", v267, 1020, v863, v878);
              }
              goto LABEL_438;
            }
          }
          if ((v231 & 0x22040) == 0)
          {
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
            {
              v273 = (FILE *)*MEMORY[0x1E4F143D8];
              v274 = *(const char **)(MEMORY[0x1E4FA5840] + 112);
              v275 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
              fprintf(v273, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v274, "", "", v275, 1041, v863, v878);
            }
            goto LABEL_535;
          }
          if ((v878 & 0x41) == 0)
          {
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
            {
              v283 = (FILE *)*MEMORY[0x1E4F143D8];
              v284 = (const char *)*MEMORY[0x1E4FA5840];
              v285 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
              fprintf(v283, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v284, "", "", v285, 1027, v863, v878);
            }
            goto LABEL_292;
          }
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v233 = (FILE *)*MEMORY[0x1E4F143D8];
            v234 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
            v235 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
            fprintf(v233, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v234, "", "", v235, 1034, v863, v878);
          }
LABEL_351:
          var3 = 0;
          LODWORD(var15) = 6;
          goto LABEL_315;
        }
        if ((~v863 & 0x4042) == 0)
        {
          if (v879 == 15
            || v8 && (!strcmp(v8->var27, "HELP") || !strcmp(v8->var27, "HELPS") || !strcmp(v8->var27, "HELPED"))
            || v874
            && ((v276 = v874->var27, !strcmp(v874->var27, "HELP")) && ((1 << v153) & 0x210000) != 0
             || !strcmp(v276, "HELPS") && ((1 << v153) & 0x210000) != 0
             || !strcmp(v276, "HELPED") && ((1 << v153) & 0x210000) != 0))
          {
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
            {
              v249 = (FILE *)*MEMORY[0x1E4F143D8];
              v250 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
              v251 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
              fprintf(v249, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v250, "", "", v251, 1059, v863, v878);
            }
            goto LABEL_438;
          }
          if (v18 && !strcmp((const char *)&v18[3].var5, "FROM") && SLWordTagSet::find(&v866))
          {
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
            {
              v277 = (FILE *)*MEMORY[0x1E4F143D8];
              v278 = *(const char **)(MEMORY[0x1E4FA5840] + 112);
              v279 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
              fprintf(v277, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v278, "", "", v279, 1066, v863, v878);
            }
            goto LABEL_535;
          }
          if ((v856 & 1) != 0
            || ((1 << v879) & 0x100D00) != 0
            || (int v293 = 1 << v872, ((1 << v879) & 0x10001) != 0) && (v293 & 0x13E) == 0
            || v879 == 17 && v872 == 8
            || !v879 && v872 == 10
            || v879 == 14 && (v293 & 0x110001) != 0)
          {
            if ((v854 & 1) != 0
              || (v878 & 0x880) != 0
              || (v878 & 0x10E) == 0
              || (~v878 & 0x43) == 0 && (v868[1] & 0x80080) == 0x80080
              || (v868[1] & 0x10000) != 0 && (v868[0] & 0x10E) != 0)
            {
              if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
              {
                v294 = (FILE *)*MEMORY[0x1E4F143D8];
                v295 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                v296 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                fprintf(v294, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v295, "", "", v296, 1086, v863, v878);
              }
              goto LABEL_438;
            }
          }
          if (((0x22040u >> v879) & 1) == 0 && ((v878 & 0x41) == 0 || (v878 & 0x10E) != 0))
          {
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
            {
              v329 = (FILE *)*MEMORY[0x1E4F143D8];
              v330 = *(const char **)(MEMORY[0x1E4FA5840] + 112);
              v331 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
              fprintf(v329, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v330, "", "", v331, 1100, v863, v878);
            }
            goto LABEL_535;
          }
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v303 = (FILE *)*MEMORY[0x1E4F143D8];
            v304 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
            v305 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
            fprintf(v303, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v304, "", "", v305, 1093, v863, v878);
          }
          goto LABEL_351;
        }
        int v258 = v863 & 0x880;
        if (v258 == 2176 && (v878 & 0x100000) == 0)
        {
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v259 = (FILE *)*MEMORY[0x1E4F143D8];
            v260 = *(const char **)(MEMORY[0x1E4FA5840] + 56);
            v261 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
            fprintf(v259, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v260, "", "", v261, 1109, v863, v878);
          }
          goto LABEL_457;
        }
        if ((~v863 & 0x4800) == 0 && v879 != 255 && (((v878 & 0x414E) == 0) & ~v854) == 0)
        {
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v262 = (FILE *)*MEMORY[0x1E4F143D8];
            v263 = *(const char **)(MEMORY[0x1E4FA5840] + 112);
            v264 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
            fprintf(v262, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v263, "", "", v264, 1118, v863, v878);
          }
          goto LABEL_535;
        }
        if (!strcmp(v43, "WIND")
          && ((v878 & 0x2000) != 0 && (v868[1] & 0x41) != 0 || (v878 & 0x10000) != 0 && (v868[1] & 0x480) != 0))
        {
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v286 = (FILE *)*MEMORY[0x1E4F143D8];
            v287 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
            v288 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
            fprintf(v286, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v287, "", "", v288, 1128, v863, v878);
          }
          goto LABEL_438;
        }
        if ((v863 & 0x10000) != 0 && v153 == 6 && (!strcmp(v43, "ONE") || !strcmp(v43, "ONES")))
        {
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v297 = (FILE *)*MEMORY[0x1E4F143D8];
            v298 = *(const char **)(MEMORY[0x1E4FA5840] + 128);
            v299 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
            fprintf(v297, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v298, "", "", v299, 1137, v863, v878);
          }
          goto LABEL_452;
        }
        int v268 = strcmp(v43, "CLOSE");
        char v269 = v854 ^ 1;
        if (v268) {
          char v269 = 1;
        }
        if ((v269 & 1) == 0)
        {
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v270 = (FILE *)*MEMORY[0x1E4F143D8];
            v271 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
            v272 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
            fprintf(v270, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v271, "", "", v272, 1147, v863, v878);
          }
          goto LABEL_351;
        }
        if ((v863 & 0x800) != 0)
        {
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v300 = (FILE *)*MEMORY[0x1E4F143D8];
            v301 = *(const char **)(MEMORY[0x1E4FA5840] + 88);
            v302 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
            fprintf(v300, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v301, "", "", v302, 1153, v863, v878);
          }
          var3 = 0;
          LODWORD(var15) = 11;
          goto LABEL_315;
        }
        if ((v856 & ((unsigned __int16)(v863 & 0x1000) >> 12)) == 1)
        {
          __int16 v289 = v878;
          if ((v878 & 0x10C) != 0 || (v878 & 0x41) != 0 && (v868[1] & 0x10C) != 0)
          {
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
            {
              v290 = (FILE *)*MEMORY[0x1E4F143D8];
              v291 = *(const char **)(MEMORY[0x1E4FA5840] + 96);
              v292 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
              fprintf(v290, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v291, "", "", v292, 1164, v863, v878);
            }
            goto LABEL_626;
          }
LABEL_619:
          if (v289 < 0)
          {
            if (((v854 | ((v868[1] & 2) >> 1)) & 1) == 0)
            {
LABEL_621:
              if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
              {
                v316 = (FILE *)*MEMORY[0x1E4F143D8];
                v317 = *(const char **)(MEMORY[0x1E4FA5840] + 80);
                v318 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                fprintf(v316, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v317, "", "", v318, 1179, v863, v878);
              }
              goto LABEL_435;
            }
          }
          else if (!v854)
          {
            goto LABEL_621;
          }
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v319 = (FILE *)*MEMORY[0x1E4F143D8];
            v320 = *(const char **)(MEMORY[0x1E4FA5840] + 96);
            v321 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
            fprintf(v319, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v320, "", "", v321, 1172, v863, v878);
          }
LABEL_626:
          var3 = 0;
          LODWORD(var15) = 12;
          goto LABEL_315;
        }
        if ((v863 & 0x1000) != 0)
        {
          __int16 v289 = v878;
          goto LABEL_619;
        }
        if ((v863 & 0x400) != 0 && (v878 & 0x150001) != 0 && (v868[1] & 0x10E) != 0)
        {
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v306 = (FILE *)*MEMORY[0x1E4F143D8];
            v307 = *(const char **)(MEMORY[0x1E4FA5840] + 80);
            v308 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
            fprintf(v306, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v307, "", "", v308, 1186, v863, v878);
          }
          goto LABEL_435;
        }
        if ((~v863 & 0x4400) == 0 && ((v878 & 0x42) == 2 || (v878 & 0x410C) != 0 || (v878 & 3) == 2))
        {
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v326 = (FILE *)*MEMORY[0x1E4F143D8];
            v327 = *(const char **)(MEMORY[0x1E4FA5840] + 112);
            v328 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
            fprintf(v326, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v327, "", "", v328, 1196, v863, v878);
          }
          goto LABEL_535;
        }
        int v851 = v863 & 0x63;
        if (v851 == 99 && !(_WORD)v862)
        {
          v309 = v865->var3;
          int v310 = 1 << v153;
          int v311 = 1 << v872;
          if (((1 << v153) & 0x22040) != 0)
          {
            char v312 = v878;
            if (!((1 << v872) & 0x10C | v878 & 0x22041))
            {
              if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
              {
                v313 = (FILE *)*MEMORY[0x1E4F143D8];
                v314 = (const char *)*MEMORY[0x1E4FA5840];
                v315 = (const char *)SLTagEng::Name(0);
                fprintf(v313, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v314, "", "", v315, 1211, v863, v878);
              }
              LODWORD(var15) = 0;
              unsigned __int16 v10 = 0;
LABEL_668:
              LODWORD(v13) = 255;
              var3 = v309;
              goto LABEL_182;
            }
          }
          else
          {
            if (v153 != 14 || (v311 & 0x26000) == 0) {
              goto LABEL_664;
            }
            char v312 = v878;
          }
          if ((v312 & 0x41) != 0)
          {
            v309 = v309->var6;
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
            {
              v335 = (FILE *)*MEMORY[0x1E4F143D8];
              v336 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
              v337 = (const char *)SLTagEng::Name(0);
              fprintf(v335, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v336, "", "", v337, 1219, v863, v878);
            }
            unsigned __int16 v10 = 0;
            LODWORD(var15) = 6;
            goto LABEL_668;
          }
LABEL_664:
          if ((v310 & 0x118100) != 0
            || v8 && (!strcmp(v8->var27, "HELP") || !strcmp(v8->var27, "HELPS") || !strcmp(v8->var27, "HELPED"))
            || (v311 & 0x118100) != 0 && v153 == 14
            || v874
            && ((v348 = v874->var27, int v349 = strcmp(v874->var27, "HELP"), (v350 = v310 & 0x210000) != 0) && !v349
             || (int v351 = strcmp(v348, "HELPS"), v350) && !v351
             || (int v352 = strcmp(v348, "HELPED"), v350) && !v352))
          {
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
            {
              v338 = (FILE *)*MEMORY[0x1E4F143D8];
              v339 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
              v340 = (const char *)SLTagEng::Name(0);
              fprintf(v338, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v339, "", "", v340, 1233, v863, v878);
            }
            unsigned __int16 v10 = 0;
            LODWORD(var15) = 1;
          }
          else
          {
            v309 = v309->var6;
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
            {
              v353 = (FILE *)*MEMORY[0x1E4F143D8];
              v354 = *(const char **)(MEMORY[0x1E4FA5840] + 40);
              v355 = (const char *)SLTagEng::Name(0);
              fprintf(v353, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v354, "", "", v355, 1243, v863, v878);
            }
            unsigned __int16 v10 = 0;
            LODWORD(var15) = 5;
          }
          goto LABEL_668;
        }
        if (strcmp(v43, "USED"))
        {
          BOOL v322 = v185 == 128 || v258 == 128;
          int v323 = v322;
          if (v322)
          {
            if ((v854 | ((unsigned __int16)(v878 & 0x800) >> 11))) {
              goto LABEL_640;
            }
            BOOL v324 = v853;
            if ((v878 & 0x4001) != 0x4000) {
              BOOL v324 = 0;
            }
            if (v324)
            {
LABEL_640:
              if (!*((unsigned char *)this + 9))
              {
                if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                {
                  v367 = (FILE *)*MEMORY[0x1E4F143D8];
                  v368 = *(const char **)(MEMORY[0x1E4FA5840] + 56);
                  v369 = *(const char **)(MEMORY[0x1E4FA5840] + 152);
                  v370 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                  fprintf(v367, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v368, "->", v369, v370, 1305, v863, v878);
                }
                goto LABEL_717;
              }
            }
          }
          int v325 = v872;
          if (v185 == 128)
          {
            if (v872 != 19) {
              goto LABEL_700;
            }
            if (v153 != 11)
            {
              int v325 = 19;
LABEL_700:
              if ((((1 << v153) & 0x32) != 0 || ((1 << v153) & 0x210000) != 0 && ((1 << v325) & 0x32) != 0)
                && ((v878 & 0x2080) == 0x80 || (v878 & 0x236441) == 0))
              {
                if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                {
                  v363 = (FILE *)*MEMORY[0x1E4F143D8];
                  v364 = *(const char **)(MEMORY[0x1E4FA5840] + 56);
                  v365 = *(const char **)(MEMORY[0x1E4FA5840] + 152);
                  v366 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                  fprintf(v363, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v364, "->", v365, v366, 1332, v863, v878);
                }
                goto LABEL_717;
              }
LABEL_705:
              if ((v863 & 0x80080) == 0x80080 && v153 == 14)
              {
                if ((v878 & 0x10C00) != 0)
                {
                  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                  {
                    v356 = (FILE *)*MEMORY[0x1E4F143D8];
                    v357 = *(const char **)(MEMORY[0x1E4FA5840] + 56);
                    v358 = *(const char **)(MEMORY[0x1E4FA5840] + 152);
                    v359 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                    fprintf(v356, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v357, "->", v358, v359, 1342, v863, v878);
                  }
LABEL_717:
                  LODWORD(v13) = 19;
                  goto LABEL_458;
                }
LABEL_711:
                if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                {
                  v360 = (FILE *)*MEMORY[0x1E4F143D8];
                  v361 = *(const char **)(MEMORY[0x1E4FA5840] + 56);
                  v362 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                  fprintf(v360, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v361, "", "", v362, 1348, v863, v878);
                }
                goto LABEL_457;
              }
              if ((v863 & 0x80080) == 0x80080) {
                goto LABEL_711;
              }
              BOOL v371 = (~v863 & 0x4002) == 0 && v153 == 255;
              int v372 = v371;
              int v373 = v854;
              if (!v371) {
                int v373 = 0;
              }
              if (v373 == 1)
              {
                if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                {
                  v374 = (FILE *)*MEMORY[0x1E4F143D8];
                  v375 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                  v376 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                  fprintf(v374, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v375, "", "", v376, 1359, v863, v878);
                }
                goto LABEL_438;
              }
              if (v153 == 255)
              {
                char v386 = v854 ^ 1;
                if ((v863 & 0x20) == 0) {
                  char v386 = 1;
                }
                if (v386)
                {
                  BOOL v849 = (~v863 & 0x4040) == 0;
                  BOOL v387 = v853;
                  if ((~v863 & 0x4040) != 0) {
                    BOOL v387 = 0;
                  }
                  if (v387)
                  {
                    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                    {
                      v388 = (FILE *)*MEMORY[0x1E4F143D8];
                      v389 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
                      v390 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                      fprintf(v388, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v389, "", "", v390, 1371, v863, v878);
                    }
                    goto LABEL_351;
                  }
                  BOOL v850 = (v863 & 3) == 3;
                  if ((v863 & 3) == 3
                    && ((v853 & HIWORD(v878) & 1) != 0 || (v878 & 2) != 0 && (v852 & (BYTE1(v868[1]) >> 6)) == 1))
                  {
                    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                    {
                      v402 = (FILE *)*MEMORY[0x1E4F143D8];
                      v403 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                      v404 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                      fprintf(v402, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v403, "", "", v404, 1392, v863, v878);
                    }
                    goto LABEL_438;
                  }
                  if ((v863 & 0x43) == 0x43)
                  {
                    if ((v878 & 0x22000) != 0 && (v868[1] & v852) == 1)
                    {
                      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                      {
                        v405 = (FILE *)*MEMORY[0x1E4F143D8];
                        v406 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                        v407 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                        fprintf(v405, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v406, "", "", v407, 1400, v863, v878);
                      }
                      goto LABEL_438;
                    }
                    BOOL v393 = 0;
                    int v394 = 67;
                    BOOL v848 = 1;
                  }
                  else
                  {
                    int v394 = v863 & 0x43;
                    BOOL v848 = 0;
                    BOOL v393 = 0;
                  }
LABEL_786:
                  if ((v856 | v9))
                  {
                    if (!v850)
                    {
                      BOOL v850 = 0;
                      goto LABEL_803;
                    }
                  }
                  else
                  {
                    BOOL v408 = v325 == 255 && v153 == 11;
                    BOOL v409 = v850;
                    if (!v408) {
                      BOOL v409 = 0;
                    }
                    if (!v409) {
                      goto LABEL_803;
                    }
                  }
                  if ((v854 | v853))
                  {
                    if ((_WORD)v862) {
                      goto LABEL_803;
                    }
LABEL_800:
                    v410 = v865->var3;
                    LODWORD(var15) = SLFirstPOSInSet();
                    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                    {
                      v411 = (FILE *)*MEMORY[0x1E4F143D8];
                      v412 = *(const char **)(MEMORY[0x1E4FA5840] + 8 * var15);
                      v413 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                      fprintf(v411, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v412, "", "", v413, 1409, v863, v878);
                    }
                    unsigned __int16 v10 = 0;
                    LODWORD(v13) = 255;
                    var3 = v410;
                    goto LABEL_182;
                  }
                  if (!(_WORD)v862 && v852) {
                    goto LABEL_800;
                  }
LABEL_803:
                  if ((v863 & 0x400) != 0 && v153 == 255 && (v878 & 0x10000) != 0)
                  {
                    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                    {
                      v422 = (FILE *)*MEMORY[0x1E4F143D8];
                      v423 = *(const char **)(MEMORY[0x1E4FA5840] + 80);
                      v424 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                      fprintf(v422, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v423, "", "", v424, 1421, v863, v878);
                    }
                    goto LABEL_435;
                  }
                  BOOL v414 = v153 == 12 || v153 == 255;
                  if (v414 && (v863 & 0x100) != 0 && (v868[1] & 0x10E) != 0)
                  {
                    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                    {
                      v415 = (FILE *)*MEMORY[0x1E4F143D8];
                      v416 = *(const char **)(MEMORY[0x1E4FA5840] + 64);
                      v417 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                      fprintf(v415, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v416, "", "", v417, 1438, v863, v878);
                    }
LABEL_815:
                    var3 = 0;
                    LODWORD(var15) = 8;
                    goto LABEL_315;
                  }
                  if (v372)
                  {
                    if ((v878 & 0x10E) != 0)
                    {
                      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                      {
                        v418 = (FILE *)*MEMORY[0x1E4F143D8];
                        v419 = *(const char **)(MEMORY[0x1E4FA5840] + 112);
                        v420 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                        fprintf(v418, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v419, "", "", v420, 1444, v863, v878);
                      }
                      goto LABEL_535;
                    }
                  }
                  else if (v153 != 11 && v153 != 255)
                  {
                    int v847 = v863 & 0x10;
                    BOOL v421 = (v863 & 0x10) == 0;
                    goto LABEL_832;
                  }
                  int v847 = v863 & 0x10;
                  BOOL v421 = v847 == 0;
                  if ((v863 & 0x10) != 0)
                  {
                    if ((v878 & 0x320E0) != 0 || (v878 & 0x4000) != 0 && (v868[1] & 0x320E0) != 0)
                    {
                      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                      {
                        v425 = (FILE *)*MEMORY[0x1E4F143D8];
                        v426 = *(const char **)(MEMORY[0x1E4FA5840] + 32);
                        v427 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                        fprintf(v425, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v426, "", "", v427, 1452, v863, v878);
                      }
                      goto LABEL_830;
                    }
                    char v431 = v856;
                    if (v153 != 255) {
                      char v431 = 1;
                    }
                    if ((v431 & 1) == 0)
                    {
                      if ((v878 & 0x41) != 0)
                      {
                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                        {
                          v432 = (FILE *)*MEMORY[0x1E4F143D8];
                          v433 = *(const char **)(MEMORY[0x1E4FA5840] + 32);
                          v434 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                          fprintf(v432, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v433, "", "", v434, 1460, v863, v878);
                        }
                        goto LABEL_830;
                      }
                      BOOL v421 = 0;
                      goto LABEL_834;
                    }
                  }
                  if (v153 == 255)
                  {
LABEL_834:
                    if ((v848 || v850)
                      && ((v878 & 0x222400) != 0
                       || (v878 & 0x10000) != 0 && (v868[1] & 0x80) != 0
                       || (v878 & 0x4000) != 0 && (v868[1] & 0x262080) != 0))
                    {
                      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                      {
                        v428 = (FILE *)*MEMORY[0x1E4F143D8];
                        v429 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                        v430 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                        fprintf(v428, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v429, "", "", v430, 1472, v863, v878);
                      }
                      goto LABEL_438;
                    }
LABEL_850:
                    char v435 = v856 ^ 1;
                    if ((v863 & 2) == 0) {
                      char v435 = 1;
                    }
                    if ((v435 & 1) != 0
                      || (~v878 & 0x42) == 0
                      || (v878 & 0x11413C) != 0
                      || (v868[1] & 0x413C) != 0
                      || (v878 & 1) != 0 && (v868[1] & 0x10E) != 0)
                    {
LABEL_858:
                      int v436 = v863 & 0x42;
                      int v437 = v856;
                      if (v436 != 66) {
                        int v437 = 0;
                      }
                      if ((v854 & v437) == 1)
                      {
                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                        {
                          v438 = (FILE *)*MEMORY[0x1E4F143D8];
                          v439 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
                          v440 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                          fprintf(v438, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v439, "", "", v440, 1496, v863, v878);
                        }
                        goto LABEL_351;
                      }
                      if (v153 == 255 && (v863 & 0x40C0) == 0x40 && (~v878 & 0x41) == 0)
                      {
                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                        {
                          v441 = (FILE *)*MEMORY[0x1E4F143D8];
                          v442 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
                          v443 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                          fprintf(v441, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v442, "", "", v443, 1503, v863, v878);
                        }
                        goto LABEL_351;
                      }
                      if (v153 == 255 && (v863 & 0x4000) != 0 && (v878 & 0x51) == 0x50)
                      {
                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                        {
                          v444 = (FILE *)*MEMORY[0x1E4F143D8];
                          v445 = *(const char **)(MEMORY[0x1E4FA5840] + 112);
                          v446 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                          fprintf(v444, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v445, "", "", v446, 1510, v863, v878);
                        }
                        goto LABEL_535;
                      }
                      int v447 = v863 & 0x101;
                      if (v447 == 257)
                      {
                        if (((1 << v153) & 0x2000) != 0
                          || ((1 << v153) & 0x40) != 0 && v325 == 13
                          || v153 == 17
                          && ((v878 & 0x20000) == 0 || (v868[1] & 2) == 0)
                          && ((v878 & 4) == 0 || (v868[1] & 0x20) == 0))
                        {
                          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                          {
                            v448 = (FILE *)*MEMORY[0x1E4F143D8];
                            v449 = (const char *)*MEMORY[0x1E4FA5840];
                            v450 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                            fprintf(v448, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v449, "", "", v450, 1526, v863, v878);
                          }
                          goto LABEL_292;
                        }
                        if ((v878 & 0x10E) != 0
                          || (v878 & 0x20000) != 0 && (v868[1] & 0x10E) != 0
                          || (v878 & 0x10000) != 0 && (v868[1] & 0x10E) != 0)
                        {
                          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                          {
                            v451 = (FILE *)*MEMORY[0x1E4F143D8];
                            v452 = *(const char **)(MEMORY[0x1E4FA5840] + 64);
                            v453 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                            fprintf(v451, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v452, "", "", v453, 1535, v863, v878);
                          }
                          goto LABEL_815;
                        }
                      }
                      if (v153 == 5 && (v863 & 0x20) != 0)
                      {
                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                        {
                          v457 = (FILE *)*MEMORY[0x1E4F143D8];
                          v458 = *(const char **)(MEMORY[0x1E4FA5840] + 40);
                          v459 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                          fprintf(v457, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v458, "", "", v459, 1554, v863, v878);
                        }
LABEL_771:
                        var3 = 0;
                        LODWORD(var15) = 5;
                        goto LABEL_315;
                      }
                      if ((v863 & 8) != 0 && (v878 & 0x8000) != 0)
                      {
                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                        {
                          v467 = (FILE *)*MEMORY[0x1E4F143D8];
                          v468 = *(const char **)(MEMORY[0x1E4FA5840] + 24);
                          v469 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                          v470 = (const char *)SLTagEng::Name((SLTagEng *)0x42);
                          fprintf(v467, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v468, "->", v469, v470, 1564, v863, v878);
                        }
                        var3 = 0;
                        unsigned __int16 v10 = 66;
                        LODWORD(var15) = 3;
                        goto LABEL_923;
                      }
                      BOOL v461 = v153 == 14 && v325 == 15;
                      if ((v153 == 15 || v461) && (v863 & 0x10C) != 0 && (v878 & 0x20) == 0)
                      {
                        LODWORD(var15) = SLFirstPOSInSet();
                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                        {
                          v462 = (FILE *)*MEMORY[0x1E4F143D8];
                          v463 = *(const char **)(MEMORY[0x1E4FA5840] + 8 * var15);
                          v464 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                          v465 = (const char *)SLTagEng::Name((SLTagEng *)0x42);
                          fprintf(v462, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v463, "->", v464, v465, 1575, v863, v878);
                        }
LABEL_1017:
                        unsigned __int16 v10 = 66;
                        LODWORD(v13) = 1;
                        goto LABEL_307;
                      }
                      int v466 = 1 << v153;
                      if (((1 << v153) & 0x110401) != 0)
                      {
                        if ((v863 & 0x100) == 0)
                        {
                          if ((v466 & 0x118441) != 0) {
                            goto LABEL_948;
                          }
                          goto LABEL_935;
                        }
                      }
                      else if (v153 != 14 || ((1 << v325) & 0x110401) == 0 || (v863 & 0x100) == 0)
                      {
                        goto LABEL_932;
                      }
                      if ((~v878 & 0x43) == 0 || (v878 & 0x4000) != 0 && (~v868[1] & 0x43) == 0)
                      {
                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                        {
                          v471 = (FILE *)*MEMORY[0x1E4F143D8];
                          v472 = *(const char **)(MEMORY[0x1E4FA5840] + 64);
                          v473 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                          fprintf(v471, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v472, "", "", v473, 1586, v863, v878);
                        }
                        goto LABEL_815;
                      }
LABEL_932:
                      if ((v466 & 0x118441) != 0)
                      {
                        if ((v863 & 0x100) == 0) {
                          goto LABEL_948;
                        }
LABEL_938:
                        if ((v878 & 0x10E) != 0 || (v878 & 0x4000) != 0 && (v868[1] & 0x10E) != 0)
                        {
                          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                          {
                            v474 = (FILE *)*MEMORY[0x1E4F143D8];
                            v475 = *(const char **)(MEMORY[0x1E4FA5840] + 64);
                            v476 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                            fprintf(v474, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v475, "", "", v476, 1597, v863, v878);
                          }
                          goto LABEL_815;
                        }
LABEL_943:
                        if ((v466 & 0x1C00) != 0 && (v863 & 0x100) != 0 && (v878 & 0x10E) != 0)
                        {
                          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                          {
                            v477 = (FILE *)*MEMORY[0x1E4F143D8];
                            v478 = *(const char **)(MEMORY[0x1E4FA5840] + 64);
                            v479 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                            fprintf(v477, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v478, "", "", v479, 1605, v863, v878);
                          }
                          goto LABEL_815;
                        }
LABEL_948:
                        if (v153 != 8)
                        {
                          if (v325 == 8)
                          {
                            if ((v466 & 0x14000) == 0 && v153 != 18) {
                              goto LABEL_962;
                            }
LABEL_960:
                            if ((v863 & 0x108) != 0)
                            {
LABEL_961:
                              if ((v878 & 0x30) == 0)
                              {
                                LODWORD(var15) = SLFirstPOSInSet();
                                if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                {
                                  v490 = (FILE *)*MEMORY[0x1E4F143D8];
                                  v491 = *(const char **)(MEMORY[0x1E4FA5840] + 8 * var15);
                                  v492 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                                  v493 = (const char *)SLTagEng::Name((SLTagEng *)0x42);
                                  fprintf(v490, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v491, "->", v492, v493, 1618, v863, v878);
                                }
                                goto LABEL_1017;
                              }
                            }
LABEL_962:
                            if (v153 == 12 && (v863 & 0x10C) != 0 && (v878 & 0x10000) != 0)
                            {
                              LODWORD(var15) = SLFirstPOSInSet();
                              if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                              {
                                v515 = (FILE *)*MEMORY[0x1E4F143D8];
                                v516 = *(const char **)(MEMORY[0x1E4FA5840] + 8 * var15);
                                v517 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                                v518 = (const char *)SLTagEng::Name((SLTagEng *)0x42);
                                fprintf(v515, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v516, "->", v517, v518, 1629, v863, v878);
                              }
                              goto LABEL_1017;
                            }
                            if ((v466 & 0x13E) == 0)
                            {
                              char v485 = v854 ^ 1;
                              if ((v863 & 0x10C) == 0) {
                                char v485 = 1;
                              }
                              if ((v485 & 1) == 0)
                              {
                                LODWORD(var15) = SLFirstPOSInSet();
                                if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                {
                                  v486 = (FILE *)*MEMORY[0x1E4F143D8];
                                  v487 = *(const char **)(MEMORY[0x1E4FA5840] + 8 * var15);
                                  v488 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                                  v489 = (const char *)SLTagEng::Name((SLTagEng *)0x42);
                                  fprintf(v486, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v487, "->", v488, v489, 1641, v863, v878);
                                }
                                goto LABEL_1017;
                              }
                              if ((v863 & 0x100) != 0 && (v878 & 0x13E) == 0 && (v868[1] & 0x13E) == 0)
                              {
                                if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                {
                                  v511 = (FILE *)*MEMORY[0x1E4F143D8];
                                  v512 = *(const char **)(MEMORY[0x1E4FA5840] + 64);
                                  v513 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                                  v514 = (const char *)SLTagEng::Name((SLTagEng *)0x42);
                                  fprintf(v511, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v512, "->", v513, v514, 1655, v863, v878);
                                }
                                var3 = 0;
                                unsigned __int16 v10 = 66;
                                LODWORD(var15) = 8;
LABEL_923:
                                LODWORD(v13) = 1;
                                goto LABEL_182;
                              }
                            }
                            if ((v466 & 0x22000) != 0)
                            {
                              if ((v863 & 0x10C) == 0) {
                                goto LABEL_984;
                              }
                            }
                            else
                            {
                              if ((v863 & 0x10C) == 0) {
                                goto LABEL_984;
                              }
                              if (((v854 | ((unsigned __int16)(v878 & 0x800) >> 11)) & 1) != 0
                                || (v853 & (v878 >> 14)) == 1)
                              {
                                LODWORD(var15) = SLFirstPOSInSet();
                                if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                {
                                  v494 = (FILE *)*MEMORY[0x1E4F143D8];
                                  v495 = *(const char **)(MEMORY[0x1E4FA5840] + 8 * var15);
                                  v496 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                                  v497 = (const char *)SLTagEng::Name((SLTagEng *)0x42);
                                  fprintf(v494, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v495, "->", v496, v497, 1667, v863, v878);
                                }
                                goto LABEL_1017;
                              }
                            }
                            if ((((v878 & 0x800) == 0) & ~v854) == 0)
                            {
                              LODWORD(var15) = SLFirstPOSInSet();
                              if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                              {
                                v481 = (FILE *)*MEMORY[0x1E4F143D8];
                                v482 = *(const char **)(MEMORY[0x1E4FA5840] + 8 * var15);
                                v483 = (const char *)*MEMORY[0x1E4FA5840];
                                v484 = (const char *)SLTagEng::Name((SLTagEng *)0x42);
                                fprintf(v481, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v482, "->", v483, v484, 1677, v863, v878);
                              }
                              LODWORD(v13) = 0;
                              unsigned __int16 v10 = 66;
                              goto LABEL_307;
                            }
LABEL_984:
                            if ((v466 & 0x110C00) != 0
                              && (v863 & 0x100) != 0
                              && (v878 & 0x4000) != 0
                              && (v868[1] & 0xE) != 0)
                            {
                              if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                              {
                                v498 = (FILE *)*MEMORY[0x1E4F143D8];
                                v499 = *(const char **)(MEMORY[0x1E4FA5840] + 64);
                                v500 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                fprintf(v498, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v499, "", "", v500, 1686, v863, v878);
                              }
                              goto LABEL_815;
                            }
                            int v501 = 1 << v325;
                            if (((1 << v325) & 0x110000) != 0
                              && (v466 & 0xE) != 0
                              && (v863 & 0x100) != 0
                              && (v878 & 0xE) != 0)
                            {
                              if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                              {
                                v502 = (FILE *)*MEMORY[0x1E4F143D8];
                                v503 = *(const char **)(MEMORY[0x1E4FA5840] + 64);
                                v504 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                fprintf(v502, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v503, "", "", v504, 1695, v863, v878);
                              }
                              goto LABEL_815;
                            }
                            if (v325 == 12
                              && (v466 & 0x41) != 0
                              && (v863 & 0x100) != 0
                              && ((v878 & 0x10000) != 0 && (v868[1] & 0xE) != 0
                               || (v878 & 0x22000) != 0 && (v868[1] & 0xE) != 0))
                            {
                              if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                              {
                                v505 = (FILE *)*MEMORY[0x1E4F143D8];
                                v506 = *(const char **)(MEMORY[0x1E4FA5840] + 64);
                                v507 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                fprintf(v505, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v506, "", "", v507, 1704, v863, v878);
                              }
                              goto LABEL_815;
                            }
                            if (v447 == 257)
                            {
                              if ((v878 & 0xE) != 0 || (v878 & 0x4000) != 0 && (v868[1] & 0xE) != 0) {
                                goto LABEL_1007;
                              }
                              if (v153 == 11)
                              {
                                if ((v878 & 0x10000) == 0 || (v868[1] & 0xE) == 0) {
                                  goto LABEL_1028;
                                }
LABEL_1007:
                                if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                {
                                  v508 = (FILE *)*MEMORY[0x1E4F143D8];
                                  v509 = *(const char **)(MEMORY[0x1E4FA5840] + 64);
                                  v510 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                  fprintf(v508, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v509, "", "", v510, 1714, v863, v878);
                                }
                                goto LABEL_815;
                              }
                            }
                            if (v153 == 15 && (v863 & 2) != 0)
                            {
                              if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                              {
                                v519 = (FILE *)*MEMORY[0x1E4F143D8];
                                v520 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                                v521 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                fprintf(v519, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v520, "", "", v521, 1725, v863, v878);
                              }
                              goto LABEL_438;
                            }
LABEL_1028:
                            if (((v466 & 0x4001C) != 0 || v153 == 14 && (v501 & 0x4001C) != 0)
                              && (v863 & 0x20) != 0
                              && (v878 & 1) == 0)
                            {
                              if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                              {
                                v522 = (FILE *)*MEMORY[0x1E4F143D8];
                                v523 = *(const char **)(MEMORY[0x1E4FA5840] + 40);
                                v524 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                fprintf(v522, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v523, "", "", v524, 1735, v863, v878);
                              }
                              goto LABEL_771;
                            }
                            if ((v466 & 0x40024) == 0 && ((v501 & 0x40024) == 0 || v153 != 14)) {
                              BOOL v421 = 1;
                            }
                            if (((v854 | v421) & 1) == 0)
                            {
                              if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                              {
                                v526 = (FILE *)*MEMORY[0x1E4F143D8];
                                v527 = *(const char **)(MEMORY[0x1E4FA5840] + 32);
                                v528 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                fprintf(v526, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v527, "", "", v528, 1743, v863, v878);
                              }
                              goto LABEL_830;
                            }
                            if ((v466 & 0x4000C) != 0)
                            {
                              if (v851 != 66) {
                                goto LABEL_1052;
                              }
                            }
                            else if (v153 != 14 || v851 != 66 || (v501 & 0x4000C) == 0)
                            {
LABEL_1052:
                              if ((v466 & 0x22080) != 0)
                              {
                                if (v851 != 66) {
                                  goto LABEL_1061;
                                }
                              }
                              else if (v153 != 14 || v851 != 66 || (v501 & 0x22080) == 0)
                              {
                                goto LABEL_1061;
                              }
                              if ((((v878 & 1) == 0) & ~v854) == 0)
                              {
                                if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                {
                                  v532 = (FILE *)*MEMORY[0x1E4F143D8];
                                  v533 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
                                  v534 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                  fprintf(v532, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v533, "", "", v534, 1761, v863, v878);
                                }
                                goto LABEL_351;
                              }
LABEL_1061:
                              if ((v393 || v153 == 14 && !v325)
                                && (v863 & 0x62) == 0x60
                                && (((v878 & 0x80) == 0) & ~v854) == 0)
                              {
                                if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                {
                                  v535 = (FILE *)*MEMORY[0x1E4F143D8];
                                  v536 = *(const char **)(MEMORY[0x1E4FA5840] + 40);
                                  v537 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                  fprintf(v535, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v536, "", "", v537, 1770, v863, v878);
                                }
                                goto LABEL_771;
                              }
                              if ((v466 & 0x40100) != 0)
                              {
                                if ((v863 & 2) == 0)
                                {
                                  int v538 = v501 & 0x40100;
                                  goto LABEL_1076;
                                }
                              }
                              else
                              {
                                int v538 = v501 & 0x40100;
                                if (v153 != 14 || !v538 || (v863 & 2) == 0)
                                {
LABEL_1076:
                                  if (v538 && (v466 & 0x310000) != 0 && (v863 & 2) != 0)
                                  {
                                    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                    {
                                      v542 = (FILE *)*MEMORY[0x1E4F143D8];
                                      v543 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                                      v544 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                      fprintf(v542, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v543, "", "", v544, 1785, v863, v878);
                                    }
                                    goto LABEL_438;
                                  }
                                  if (v847)
                                  {
                                    if ((v878 & 0x21) == 0x20 && (v868[1] & 1) == 0)
                                    {
                                      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                      {
                                        v545 = (FILE *)*MEMORY[0x1E4F143D8];
                                        v546 = *(const char **)(MEMORY[0x1E4FA5840] + 32);
                                        v547 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                        fprintf(v545, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v546, "", "", v547, 1792, v863, v878);
                                      }
LABEL_830:
                                      var3 = 0;
                                      LODWORD(var15) = 4;
                                      goto LABEL_315;
                                    }
                                    if ((v466 & 0x4090) != 0)
                                    {
                                      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                      {
                                        v548 = (FILE *)*MEMORY[0x1E4F143D8];
                                        v549 = *(const char **)(MEMORY[0x1E4FA5840] + 32);
                                        v550 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                        fprintf(v548, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v549, "", "", v550, 1800, v863, v878);
                                      }
                                      goto LABEL_830;
                                    }
                                    if (v153 == 10)
                                    {
                                      char v551 = v854;
                                      if ((v878 & 0x10E) != 0) {
                                        char v551 = 1;
                                      }
                                      if ((v551 & 1) == 0)
                                      {
                                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                        {
                                          v575 = (FILE *)*MEMORY[0x1E4F143D8];
                                          v576 = *(const char **)(MEMORY[0x1E4FA5840] + 32);
                                          v577 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                          fprintf(v575, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v576, "", "", v577, 1808, v863, v878);
                                        }
                                        goto LABEL_830;
                                      }
                                    }
                                    if (v393 && SLWordTagSet::find(&v867) && (v868[1] & 0x4040) != 0)
                                    {
                                      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                      {
                                        v552 = (FILE *)*MEMORY[0x1E4F143D8];
                                        v553 = *(const char **)(MEMORY[0x1E4FA5840] + 32);
                                        v554 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                        fprintf(v552, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v553, "", "", v554, 1815, v863, v878);
                                      }
                                      goto LABEL_830;
                                    }
                                  }
                                  int v846 = v879;
                                  if (v879 == 17)
                                  {
                                    if ((~v863 & 0x62) != 0)
                                    {
LABEL_1107:
                                      BOOL v844 = 0;
                                      goto LABEL_1108;
                                    }
                                  }
                                  else if (v879 != 14 || v872 != 17 || (v863 & 0x62) != 0x62)
                                  {
                                    BOOL v844 = v879 == 0;
                                    BOOL v564 = v848;
                                    if (v879) {
                                      BOOL v564 = 0;
                                    }
                                    if (v564)
                                    {
                                      if ((v878 & 0x80) != 0 && (v868[1] & 0x32001) != 0) {
                                        goto LABEL_1617;
                                      }
                                      if ((v878 & 3) == 1)
                                      {
                                        int v565 = v853;
                                        if ((v868[1] & 0x10E) != 0) {
                                          int v565 = 1;
                                        }
                                        if (v565 == 1)
                                        {
LABEL_1617:
                                          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                          {
                                            v566 = (FILE *)*MEMORY[0x1E4F143D8];
                                            v567 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
                                            v568 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                            fprintf(v566, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v567, "", "", v568, 1834, v863, v878);
                                          }
                                          goto LABEL_351;
                                        }
                                      }
                                      BOOL v844 = 1;
                                    }
LABEL_1108:
                                    int v558 = v872;
                                    if (v872 != 255)
                                    {
                                      BOOL v559 = v844;
                                      if ((0x22041u >> v872)) {
                                        BOOL v559 = 0;
                                      }
                                      if (v559 && v850)
                                      {
                                        if ((v878 & 0x80) != 0 && (v868[1] & 0x32001) != 0) {
                                          goto LABEL_1618;
                                        }
                                        if ((v878 & 3) == 1)
                                        {
                                          int v560 = v853;
                                          if ((v868[1] & 0x10E) != 0) {
                                            int v560 = 1;
                                          }
                                          if (v560 == 1)
                                          {
LABEL_1618:
                                            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                            {
                                              v561 = (FILE *)*MEMORY[0x1E4F143D8];
                                              v562 = (const char *)*MEMORY[0x1E4FA5840];
                                              v563 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                              fprintf(v561, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v562, "", "", v563, 1846, v863, v878);
                                            }
                                            goto LABEL_292;
                                          }
                                        }
                                      }
                                    }
                                    int v845 = 1 << v879;
                                    if (((1 << v879) & 0x118401) != 0)
                                    {
                                      if (v851 != 66) {
                                        goto LABEL_1138;
                                      }
                                    }
                                    else if (v851 != 66 || v879 != 14 || ((1 << v872) & 0x118401) == 0)
                                    {
                                      goto LABEL_1138;
                                    }
                                    if (((v854 | v878) & 1) == 0)
                                    {
                                      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                      {
                                        v572 = (FILE *)*MEMORY[0x1E4F143D8];
                                        v573 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                                        v574 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                        fprintf(v572, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v573, "", "", v574, 1856, v863, v878);
                                      }
                                      goto LABEL_438;
                                    }
LABEL_1138:
                                    if ((v845 & 0x15C500) == 0 && (v879 != 14 || ((1 << v872) & 0x158500) == 0)
                                      || v394 != 3)
                                    {
                                      goto LABEL_1164;
                                    }
                                    if ((v878 & 0x480) == 0 && ((~v878 & 3) != 0 || ((BYTE2(v868[1]) | v853) & 1) == 0))
                                    {
                                      if ((v878 & 0x101) == 1 && (v868[1] & 0x10C) != 0) {
                                        goto LABEL_1163;
                                      }
                                      if ((v878 & 0x10C) != 0)
                                      {
                                        char v578 = v853;
                                        if ((v868[1] & 0x22) != 0) {
                                          char v578 = 1;
                                        }
                                        int v394 = 3;
                                        if (v878 & 0x22) == 2 || (v578)
                                        {
LABEL_1164:
                                          if (((1 << v872) & 0xC00) != 0)
                                          {
                                            BOOL v579 = v850;
                                            if ((v845 & 0x110000) == 0) {
                                              BOOL v579 = 0;
                                            }
                                            if (v579)
                                            {
                                              if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                              {
                                                v580 = (FILE *)*MEMORY[0x1E4F143D8];
                                                v581 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                                                v582 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                fprintf(v580, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v581, "", "", v582, 1880, v863, v878);
                                              }
                                              goto LABEL_438;
                                            }
                                          }
                                          if (v850 && (v853 & (v878 >> 7)) == 1)
                                          {
                                            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                            {
                                              v583 = (FILE *)*MEMORY[0x1E4F143D8];
                                              v584 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                                              v585 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                              fprintf(v583, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v584, "", "", v585, 1888, v863, v878);
                                            }
                                            goto LABEL_438;
                                          }
                                          int v586 = !v850;
                                          if ((v845 & 0xC00) == 0) {
                                            int v586 = 1;
                                          }
                                          if (((v586 | v854) & 1) == 0
                                            && v18
                                            && strcmp((const char *)&v18[3].var5, "OF")
                                            && (v878 & 0x10E) == 0
                                            && (v868[1] & 0x10E) == 0
                                            && (v868[0] & 0x10E) == 0)
                                          {
                                            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                            {
                                              v605 = (FILE *)*MEMORY[0x1E4F143D8];
                                              v606 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                                              v607 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                              fprintf(v605, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v606, "", "", v607, 1898, v863, v878);
                                            }
                                            goto LABEL_438;
                                          }
                                          if (v850 && v844 && (v878 & 0x2000) != 0)
                                          {
                                            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                            {
                                              v598 = (FILE *)*MEMORY[0x1E4F143D8];
                                              v599 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                                              v600 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                              fprintf(v598, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v599, "", "", v600, 1907, v863, v878);
                                            }
                                            goto LABEL_438;
                                          }
                                          if (v846 == 20)
                                          {
                                            BOOL v587 = v850;
                                            if (!v850) {
                                              goto LABEL_1184;
                                            }
                                          }
                                          else
                                          {
                                            BOOL v590 = v846 == 14 && v558 == 20;
                                            char v591 = !v850;
                                            if (!v590) {
                                              char v591 = 1;
                                            }
                                            if (v591)
                                            {
                                              if (v850
                                                && v844
                                                && (v878 & 0x4000) != 0
                                                && (v853 | (LOBYTE(v868[1]) >> 7)) == 1)
                                              {
                                                if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                {
                                                  v592 = (FILE *)*MEMORY[0x1E4F143D8];
                                                  v593 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                                                  v594 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                  fprintf(v592, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v593, "", "", v594, 1924, v863, v878);
                                                }
                                                goto LABEL_438;
                                              }
                                              BOOL v587 = v846 == 14;
                                              BOOL v601 = v558 != 2 && v846 == 14;
                                              if (v601 && v848)
                                              {
                                                if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                {
                                                  v602 = (FILE *)*MEMORY[0x1E4F143D8];
                                                  v603 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                                                  v604 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                  fprintf(v602, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v603, "", "", v604, 1931, v863, v878);
                                                }
                                                goto LABEL_438;
                                              }
                                              if (((v846 == 255) & ~(_BYTE)v856 & v848) == 1)
                                              {
                                                if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                {
                                                  v608 = (FILE *)*MEMORY[0x1E4F143D8];
                                                  v609 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
                                                  v610 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                  fprintf(v608, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v609, "", "", v610, 1938, v863, v878);
                                                }
                                                goto LABEL_351;
                                              }
                                              if (v846 == 1)
                                              {
                                                if ((~v863 & 0x51) != 0)
                                                {
                                                  if ((~v863 & 0x60) != 0 || (v878 & 1) == 0)
                                                  {
                                                    if (v394 != 66) {
                                                      goto LABEL_1241;
                                                    }
LABEL_1233:
                                                    char v614 = v854 ^ 1;
                                                    if ((v863 & 0x62) != 0x42) {
                                                      char v614 = 1;
                                                    }
                                                    if ((v614 & 1) == 0)
                                                    {
                                                      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                      {
                                                        v615 = (FILE *)*MEMORY[0x1E4F143D8];
                                                        v616 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
                                                        v617 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                        fprintf(v615, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v616, "", "", v617, 1973, v863, v878);
                                                      }
                                                      goto LABEL_351;
                                                    }
                                                    int v394 = 66;
LABEL_1241:
                                                    if ((v845 & 0xE) != 0) {
                                                      goto LABEL_1246;
                                                    }
                                                    char v621 = !v587;
                                                    if (((1 << v558) & 0xE) == 0) {
                                                      char v621 = 1;
                                                    }
                                                    if ((v621 & 1) == 0)
                                                    {
LABEL_1246:
                                                      if ((v863 & 0x4041) == 0x41 && v394 == 66)
                                                      {
                                                        if ((v878 & 0x80) == 0)
                                                        {
                                                          if (v878)
                                                          {
                                                            if (((v854 | SLWordTagSet::find(&v867)) & 1) == 0)
                                                            {
                                                              int v846 = v879;
                                                              int v845 = 1 << v879;
                                                              goto LABEL_1255;
                                                            }
                                                          }
                                                          else if (!v854)
                                                          {
                                                            goto LABEL_1255;
                                                          }
                                                        }
                                                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                        {
                                                          v622 = (FILE *)*MEMORY[0x1E4F143D8];
                                                          v623 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
                                                          v624 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                          fprintf(v622, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v623, "", "", v624, 1985, v863, v878);
                                                        }
                                                        goto LABEL_351;
                                                      }
                                                    }
LABEL_1255:
                                                    if (((v845 & 0x22040) != 0
                                                       || v846 == 14 && ((1 << v872) & 0x220C0) != 0)
                                                      && v394 == 66)
                                                    {
                                                      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                      {
                                                        v625 = (FILE *)*MEMORY[0x1E4F143D8];
                                                        v626 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
                                                        v627 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                        fprintf(v625, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v626, "", "", v627, 1995, v863, v878);
                                                      }
                                                      goto LABEL_351;
                                                    }
                                                    char v628 = !v850;
                                                    if (v846) {
                                                      char v628 = 1;
                                                    }
                                                    if (v628)
                                                    {
LABEL_1289:
                                                      if (v394 == 2 && (v878 & 0x22000) != 0)
                                                      {
                                                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                        {
                                                          v630 = (FILE *)*MEMORY[0x1E4F143D8];
                                                          v631 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                                                          v632 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                          fprintf(v630, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v631, "", "", v632, 2022, v863, v878);
                                                        }
                                                        goto LABEL_438;
                                                      }
                                                      if ((v863 & 2) != 0 && v846 == 20)
                                                      {
                                                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                        {
                                                          v636 = (FILE *)*MEMORY[0x1E4F143D8];
                                                          v637 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                                                          v638 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                          fprintf(v636, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v637, "", "", v638, 2028, v863, v878);
                                                        }
                                                        goto LABEL_438;
                                                      }
                                                      BOOL v639 = v394 == 3 && v846 == 14;
                                                      char v640 = v854;
                                                      if (!v639) {
                                                        char v640 = 1;
                                                      }
                                                      if ((v640 & 1) == 0)
                                                      {
                                                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                        {
                                                          v644 = (FILE *)*MEMORY[0x1E4F143D8];
                                                          v645 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                                                          v646 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                          fprintf(v644, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v645, "", "", v646, 2043, v863, v878);
                                                        }
                                                        goto LABEL_438;
                                                      }
                                                      if ((v863 & 2) != 0 && v846 == 11)
                                                      {
                                                        if ((v878 & 0x200000) != 0)
                                                        {
                                                          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                          {
                                                            v652 = (FILE *)*MEMORY[0x1E4F143D8];
                                                            v653 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                                                            v654 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                            fprintf(v652, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v653, "", "", v654, 2050, v863, v878);
                                                          }
                                                          goto LABEL_438;
                                                        }
                                                        if ((v853 & (v878 >> 14)) == 1)
                                                        {
                                                          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                          {
                                                            v641 = (FILE *)*MEMORY[0x1E4F143D8];
                                                            v642 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                                                            v643 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                            fprintf(v641, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v642, "", "", v643, 2057, v863, v878);
                                                          }
                                                          goto LABEL_438;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        char v647 = !v850;
                                                        if (v872 | v846) {
                                                          char v647 = 1;
                                                        }
                                                        if ((v647 & 1) == 0 && (v878 & 0x41) != 0)
                                                        {
                                                          BOOL v648 = v852;
                                                          if ((v868[1] & 0x41) == 0) {
                                                            BOOL v648 = 0;
                                                          }
                                                          if (v648)
                                                          {
                                                            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                            {
                                                              v649 = (FILE *)*MEMORY[0x1E4F143D8];
                                                              v650 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                                                              v651 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                              fprintf(v649, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v650, "", "", v651, 2088, v863, v878);
                                                            }
                                                            goto LABEL_438;
                                                          }
                                                        }
                                                      }
                                                      int v655 = SLWordTagSet::find(&var17);
                                                      int v656 = v863 & 0x41;
                                                      if (v656 == 65) {
                                                        int v657 = v655;
                                                      }
                                                      else {
                                                        int v657 = 0;
                                                      }
                                                      if (v657 == 1)
                                                      {
                                                        if ((SLWordTagSet::find(&v867) & 1) != 0
                                                          || SLWordTagSet::find(&v867))
                                                        {
                                                          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                          {
                                                            v658 = (FILE *)*MEMORY[0x1E4F143D8];
                                                            v659 = (const char *)*MEMORY[0x1E4FA5840];
                                                            v660 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                            fprintf(v658, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v659, "", "", v660, 2100, v863, v878);
                                                          }
                                                          goto LABEL_292;
                                                        }
                                                        char v664 = v878;
                                                        if ((v878 & 0x400) != 0)
                                                        {
                                                          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                          {
                                                            v679 = (FILE *)*MEMORY[0x1E4F143D8];
                                                            v680 = (const char *)*MEMORY[0x1E4FA5840];
                                                            v681 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                            fprintf(v679, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v680, "", "", v681, 2106, v863, v878);
                                                          }
                                                          goto LABEL_292;
                                                        }
                                                        if ((v878 & 0x41) == 1)
                                                        {
                                                          if (SLWordTagSet::find(&v867))
                                                          {
                                                            if (!MTFEPOSResolver::RequireTagAndPOS(this, v18, 65, 1))
                                                            {
                                                              if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                              {
                                                                v685 = (FILE *)*MEMORY[0x1E4F143D8];
                                                                v686 = (const char *)*MEMORY[0x1E4FA5840];
                                                                v687 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                                fprintf(v685, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v686, "", "", v687, 2119, v863, v878);
                                                              }
                                                              goto LABEL_292;
                                                            }
                                                            HIBYTE(v18[1].var0) = 2;
                                                            LODWORD(v18[1].var5) = *((_DWORD *)this + 7);
                                                            *(_OWORD *)((char *)&v18[1].var5 + 4) = *((_OWORD *)this + 2);
                                                            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                            {
                                                              v665 = (FILE *)*MEMORY[0x1E4F143D8];
                                                              v666 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
                                                              v667 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                              fprintf(v665, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v666, "", "", v667, 2116, v863, v878);
                                                            }
                                                            goto LABEL_351;
                                                          }
                                                          char v664 = v878;
                                                        }
                                                        if ((v664 & 0x41) == 0)
                                                        {
                                                          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                          {
                                                            v694 = (FILE *)*MEMORY[0x1E4F143D8];
                                                            v695 = (const char *)*MEMORY[0x1E4FA5840];
                                                            v696 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                            fprintf(v694, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v695, "", "", v696, 2127, v863, v878);
                                                          }
                                                          goto LABEL_292;
                                                        }
                                                        HIBYTE(v18[1].var0) = 2;
                                                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                        {
                                                          v682 = (FILE *)*MEMORY[0x1E4F143D8];
                                                          v683 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
                                                          v684 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                          fprintf(v682, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v683, "", "", v684, 2124, v863, v878);
                                                        }
                                                        goto LABEL_351;
                                                      }
                                                      if ((v863 & 0x4043) == 0x41
                                                        && ((v854 | !v853 | v878) & 1) == 0)
                                                      {
                                                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                        {
                                                          v668 = (FILE *)*MEMORY[0x1E4F143D8];
                                                          v669 = (const char *)*MEMORY[0x1E4FA5840];
                                                          v670 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                          fprintf(v668, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v669, "", "", v670, 2135, v863, v878);
                                                        }
                                                        goto LABEL_292;
                                                      }
                                                      if (v879 != 17 && v879 != 13) {
                                                        goto LABEL_1353;
                                                      }
                                                      if (v394 == 65 && (v878 & 0x41) == 0)
                                                      {
                                                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                        {
                                                          v671 = (FILE *)*MEMORY[0x1E4F143D8];
                                                          v672 = (const char *)*MEMORY[0x1E4FA5840];
                                                          v673 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                          fprintf(v671, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v672, "", "", v673, 2142, v863, v878);
                                                        }
                                                        goto LABEL_292;
                                                      }
                                                      if (v879 == 17 || v879 == 13)
                                                      {
                                                        if (v394 == 3)
                                                        {
                                                          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                          {
                                                            v661 = (FILE *)*MEMORY[0x1E4F143D8];
                                                            v662 = (const char *)*MEMORY[0x1E4FA5840];
                                                            v663 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                            fprintf(v661, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v662, "", "", v663, 2149, v863, v878);
                                                          }
                                                          goto LABEL_292;
                                                        }
                                                        BOOL v675 = 0;
                                                        int v674 = 1 << v879;
                                                      }
                                                      else
                                                      {
LABEL_1353:
                                                        int v674 = 1 << v879;
                                                        if (v394 == 3 && (v674 & 0x22040) != 0 && (v878 & 0x41) == 0)
                                                        {
                                                          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                          {
                                                            v688 = (FILE *)*MEMORY[0x1E4F143D8];
                                                            v689 = (const char *)*MEMORY[0x1E4FA5840];
                                                            v690 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                            fprintf(v688, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v689, "", "", v690, 2156, v863, v878);
                                                          }
                                                          goto LABEL_292;
                                                        }
                                                        BOOL v675 = v879 == 1;
                                                        if (v879 == 1 && v656 == 65)
                                                        {
                                                          if ((~v878 & 0x80080) == 0)
                                                          {
                                                            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                            {
                                                              v676 = (FILE *)*MEMORY[0x1E4F143D8];
                                                              v677 = (const char *)*MEMORY[0x1E4FA5840];
                                                              v678 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                              fprintf(v676, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v677, "", "", v678, 2164, v863, v878);
                                                            }
                                                            goto LABEL_292;
                                                          }
                                                          BOOL v675 = 1;
                                                        }
                                                      }
                                                      if (v447 == 1 && (v878 & 0x10C) != 0)
                                                      {
                                                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                        {
                                                          v691 = (FILE *)*MEMORY[0x1E4F143D8];
                                                          v692 = (const char *)*MEMORY[0x1E4FA5840];
                                                          v693 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                          fprintf(v691, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v692, "", "", v693, 2170, v863, v878);
                                                        }
                                                        goto LABEL_292;
                                                      }
                                                      if (v879 == 17 || v879 == 13)
                                                      {
                                                        if (v656 == 1 && (v878 & 0x41) == 0)
                                                        {
                                                          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                          {
                                                            v701 = (FILE *)*MEMORY[0x1E4F143D8];
                                                            v702 = (const char *)*MEMORY[0x1E4FA5840];
                                                            v703 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                            fprintf(v701, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v702, "", "", v703, 2176, v863, v878);
                                                          }
                                                          goto LABEL_292;
                                                        }
                                                        BOOL v697 = 0;
                                                      }
                                                      else
                                                      {
                                                        BOOL v697 = v879 == 6;
                                                        if (v879 == 6 && (v863 & 0x10041) == 1)
                                                        {
                                                          if ((v878 & 0x41) == 0)
                                                          {
                                                            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                            {
                                                              v704 = (FILE *)*MEMORY[0x1E4F143D8];
                                                              v705 = (const char *)*MEMORY[0x1E4FA5840];
                                                              v706 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                              fprintf(v704, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v705, "", "", v706, 2183, v863, v878);
                                                            }
                                                            goto LABEL_292;
                                                          }
                                                          BOOL v697 = 1;
                                                        }
                                                      }
                                                      if ((v863 & 0x143) == 1 && *((int *)this + 4) <= 1)
                                                      {
                                                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                        {
                                                          v698 = (FILE *)*MEMORY[0x1E4F143D8];
                                                          v699 = (const char *)*MEMORY[0x1E4FA5840];
                                                          v700 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                          fprintf(v698, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v699, "", "", v700, 2189, v863, v878);
                                                        }
                                                        goto LABEL_292;
                                                      }
                                                      if ((v878 & 0x100000) != 0 && v656 == 1)
                                                      {
                                                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                        {
                                                          v707 = (FILE *)*MEMORY[0x1E4F143D8];
                                                          v708 = (const char *)*MEMORY[0x1E4FA5840];
                                                          v709 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                          fprintf(v707, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v708, "", "", v709, 2195, v863, v878);
                                                        }
                                                        goto LABEL_292;
                                                      }
                                                      if (v879 == 7 && v656 == 1)
                                                      {
                                                        if ((v878 & 0x41) == 0)
                                                        {
                                                          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                          {
                                                            v710 = (FILE *)*MEMORY[0x1E4F143D8];
                                                            v711 = (const char *)*MEMORY[0x1E4FA5840];
                                                            v712 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                            fprintf(v710, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v711, "", "", v712, 2202, v863, v878);
                                                          }
                                                          goto LABEL_292;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        BOOL v713 = (v878 & 0x41) == 0 && v879 == 10;
                                                        BOOL v714 = v850;
                                                        if (!v713) {
                                                          BOOL v714 = 0;
                                                        }
                                                        if (v714)
                                                        {
                                                          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                          {
                                                            v715 = (FILE *)*MEMORY[0x1E4F143D8];
                                                            v716 = (const char *)*MEMORY[0x1E4FA5840];
                                                            v717 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                            fprintf(v715, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v716, "", "", v717, 2209, v863, v878);
                                                          }
                                                          goto LABEL_292;
                                                        }
                                                      }
                                                      if (!v850) {
                                                        goto LABEL_1430;
                                                      }
                                                      if ((v878 & 0x43) == 2)
                                                      {
                                                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                        {
                                                          v718 = (FILE *)*MEMORY[0x1E4F143D8];
                                                          v719 = (const char *)*MEMORY[0x1E4FA5840];
                                                          v720 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                          fprintf(v718, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v719, "", "", v720, 2216, v863, v878);
                                                        }
                                                        goto LABEL_292;
                                                      }
                                                      if (v675)
                                                      {
                                                        if ((v878 & 0x14000) != 0)
                                                        {
                                                          if ((v878 & 0x10000) == 0) {
                                                            goto LABEL_1423;
                                                          }
                                                          char v721 = v854;
                                                          if ((v868[1] & 0x10E) == 0) {
                                                            char v721 = 1;
                                                          }
                                                          if (v721)
                                                          {
LABEL_1423:
                                                            if (((v854 | ((unsigned __int16)(v878 & 0x4000) >> 14)) & 1) == 0)
                                                            {
                                                              if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                              {
                                                                v729 = (FILE *)*MEMORY[0x1E4F143D8];
                                                                v730 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                                                                v731 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                                fprintf(v729, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v730, "", "", v731, 2231, v863, v878);
                                                              }
                                                              goto LABEL_438;
                                                            }
                                                            goto LABEL_1424;
                                                          }
                                                        }
                                                        else if (v854)
                                                        {
                                                          goto LABEL_1430;
                                                        }
                                                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                        {
                                                          v732 = (FILE *)*MEMORY[0x1E4F143D8];
                                                          v733 = (const char *)*MEMORY[0x1E4FA5840];
                                                          v734 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                          fprintf(v732, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v733, "", "", v734, 2224, v863, v878);
                                                        }
                                                        goto LABEL_292;
                                                      }
LABEL_1424:
                                                      char v722 = v854;
                                                      if (v879 != 21) {
                                                        char v722 = 1;
                                                      }
                                                      if ((v722 & 1) == 0)
                                                      {
                                                        if (!MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS)) {
                                                          goto LABEL_438;
                                                        }
                                                        v723 = (FILE *)*MEMORY[0x1E4F143D8];
                                                        v724 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                                                        v725 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                        fprintf(v723, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v724, "", "", v725, 2238, v863, v878);
LABEL_1580:
                                                        var3 = 0;
                                                        LODWORD(v13) = 255;
                                                        LODWORD(var15) = 1;
                                                        goto LABEL_316;
                                                      }
LABEL_1430:
                                                      if ((v878 & 0x41) == 0) {
                                                        BOOL v697 = 0;
                                                      }
                                                      if (v848
                                                        && v697
                                                        && ((v878 & 2) == 0
                                                         || (v853 | ((BYTE1(v868[1]) & 8) >> 3)) == 1))
                                                      {
                                                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                        {
                                                          v726 = (FILE *)*MEMORY[0x1E4F143D8];
                                                          v727 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
                                                          v728 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                          fprintf(v726, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v727, "", "", v728, 2253, v863, v878);
                                                        }
LABEL_1572:
                                                        var3 = 0;
                                                        LODWORD(v13) = 255;
                                                        LODWORD(var15) = 6;
                                                        goto LABEL_316;
                                                      }
                                                      if (v879 == 255 || (v674 & 0x220C0) != 0)
                                                      {
                                                        if (v656 != 65
                                                          && (v863 & 0x50) != 0x50
                                                          && (v863 & 0x60) != 0x60)
                                                        {
                                                          goto LABEL_1460;
                                                        }
                                                        if ((v878 & 0x43) == 0x41)
                                                        {
                                                          int v735 = v853;
                                                          if ((v868[1] & 0xC41) != 0) {
                                                            int v735 = 1;
                                                          }
                                                          if (v735 == 1
                                                            && ((v878 & 0x10) == 0 || (v868[1] & 0x22000) == 0)
                                                            && ((v878 & 0x4000) == 0 || (v868[1] & 2) == 0))
                                                          {
                                                            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                            {
                                                              v739 = (FILE *)*MEMORY[0x1E4F143D8];
                                                              v740 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
                                                              v741 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                              fprintf(v739, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v740, "", "", v741, 2267, v863, v878);
                                                            }
                                                            goto LABEL_1572;
                                                          }
                                                        }
                                                      }
                                                      if (v656 == 65 && v879 == 14)
                                                      {
                                                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                        {
                                                          v736 = (FILE *)*MEMORY[0x1E4F143D8];
                                                          v737 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
                                                          v738 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                          fprintf(v736, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v737, "", "", v738, 2274, v863, v878);
                                                        }
                                                        goto LABEL_1572;
                                                      }
LABEL_1460:
                                                      if (v863 == 1)
                                                      {
                                                        if ((SLWordTagSet::find(&var17) & 1) == 0
                                                          && (v878 & 3) == 1
                                                          && SLWordTagSet::find(&v867))
                                                        {
                                                          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                          {
                                                            v742 = (FILE *)*MEMORY[0x1E4F143D8];
                                                            v743 = (const char *)*MEMORY[0x1E4FA5840];
                                                            v744 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
                                                            v745 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                            fprintf(v742, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v743, "->", v744, v745, 2287, 1, v878);
                                                            var3 = 0;
                                                            LODWORD(var15) = 0;
                                                            LODWORD(v13) = 6;
                                                            unsigned int v863 = 1;
                                                          }
                                                          else
                                                          {
                                                            var3 = 0;
                                                            LODWORD(var15) = 0;
                                                            unsigned int v863 = 1;
                                                            LODWORD(v13) = 6;
                                                          }
                                                          goto LABEL_316;
                                                        }
                                                        BOOL v750 = v879 == 0;
                                                        int v746 = 1 << v879;
LABEL_1506:
                                                        if (v849)
                                                        {
                                                          if ((v878 & 0x41) == 1)
                                                          {
                                                            if ((v878 & 2) != 0)
                                                            {
                                                              if ((v746 & 0x22080) == 0) {
                                                                goto LABEL_1522;
                                                              }
LABEL_1520:
                                                              if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                              {
                                                                v774 = (FILE *)*MEMORY[0x1E4F143D8];
                                                                v775 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
                                                                v776 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                                fprintf(v774, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v775, "", "", v776, 2361, v863, v878);
                                                              }
                                                              goto LABEL_1572;
                                                            }
LABEL_1516:
                                                            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                            {
                                                              v771 = (FILE *)*MEMORY[0x1E4F143D8];
                                                              v772 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
                                                              v773 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                              fprintf(v771, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v772, "", "", v773, 2353, v863, v878);
                                                            }
                                                            goto LABEL_1572;
                                                          }
                                                          char v770 = v853;
                                                          if ((v878 & 0x40) == 0) {
                                                            char v770 = 1;
                                                          }
                                                          if (v770 & 1) == 0 && (v878 & 2) == 0 && (v868[1]) {
                                                            goto LABEL_1516;
                                                          }
                                                          if ((v746 & 0x22080) != 0 && (v878 & 0x41) != 0) {
                                                            goto LABEL_1520;
                                                          }
                                                        }
LABEL_1522:
                                                        if ((~v863 & 0xC0) == 0
                                                          && (v746 & 0x41) != 0
                                                          && (v746 & 2) == 0
                                                          && (v878 & 0x41) != 0
                                                          && (v878 & 2) == 0)
                                                        {
                                                          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                          {
                                                            v777 = (FILE *)*MEMORY[0x1E4F143D8];
                                                            v778 = *(const char **)(MEMORY[0x1E4FA5840] + 56);
                                                            v779 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                            fprintf(v777, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v778, "", "", v779, 2376, v863, v878);
                                                          }
LABEL_1600:
                                                          LODWORD(var15) = 7;
LABEL_1604:
                                                          LODWORD(v13) = 255;
                                                          goto LABEL_306;
                                                        }
                                                        if ((~v863 & 0xC2) == 0
                                                          && (v878 & 1) != 0
                                                          && (v853 | ((v868[1] & 2) >> 1)) == 1)
                                                        {
                                                          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                          {
                                                            v780 = (FILE *)*MEMORY[0x1E4F143D8];
                                                            v781 = *(const char **)(MEMORY[0x1E4FA5840] + 56);
                                                            v782 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                            fprintf(v780, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v781, "", "", v782, 2384, v863, v878);
                                                          }
                                                          goto LABEL_1600;
                                                        }
                                                        if ((~v863 & 0x11) == 0 && v750)
                                                        {
                                                          char v784 = v854;
                                                          if ((v878 & 0x41) != 0) {
                                                            char v784 = 1;
                                                          }
                                                          if ((v784 & 1) == 0)
                                                          {
                                                            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                            {
                                                              v789 = (FILE *)*MEMORY[0x1E4F143D8];
                                                              v790 = *(const char **)(MEMORY[0x1E4FA5840] + 32);
                                                              v791 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                              fprintf(v789, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v790, "", "", v791, 2392, v863, v878);
                                                            }
                                                            goto LABEL_1576;
                                                          }
                                                        }
                                                        if ((v863 & 0x400) == 0) {
                                                          goto LABEL_1546;
                                                        }
                                                        char v785 = v853;
                                                        if ((v878 & 0x132000) != 0x100000) {
                                                          char v785 = 1;
                                                        }
                                                        if (v785)
                                                        {
LABEL_1546:
                                                          if ((v863 & 0x80) != 0 && (v878 & 0x22000) != 0)
                                                          {
                                                            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                            {
                                                              v786 = (FILE *)*MEMORY[0x1E4F143D8];
                                                              v787 = *(const char **)(MEMORY[0x1E4FA5840] + 56);
                                                              v788 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                              fprintf(v786, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v787, "", "", v788, 2406, v863, v878);
                                                            }
                                                            goto LABEL_1600;
                                                          }
                                                          if ((v863 & 0x24000) == 0x4000 && (v878 & 0x40) != 0)
                                                          {
                                                            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                            {
                                                              v799 = (FILE *)*MEMORY[0x1E4F143D8];
                                                              v800 = *(const char **)(MEMORY[0x1E4FA5840] + 112);
                                                              v801 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                              fprintf(v799, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v800, "", "", v801, 2413, v863, v878);
                                                            }
                                                          }
                                                          else
                                                          {
                                                            char v795 = v854 ^ 1;
                                                            if ((v863 & 0x4000) == 0) {
                                                              char v795 = 1;
                                                            }
                                                            if (v795)
                                                            {
                                                              if ((v863 & 8) != 0)
                                                              {
                                                                if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                                {
                                                                  v805 = (FILE *)*MEMORY[0x1E4F143D8];
                                                                  v806 = *(const char **)(MEMORY[0x1E4FA5840] + 24);
                                                                  v807 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                                  fprintf(v805, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v806, "", "", v807, 2431, v863, v878);
                                                                }
                                                                var3 = 0;
                                                                LODWORD(v13) = 255;
                                                                LODWORD(var15) = 3;
                                                                goto LABEL_316;
                                                              }
                                                              if ((v863 & 0x40) != 0)
                                                              {
                                                                if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                                {
                                                                  v808 = (FILE *)*MEMORY[0x1E4F143D8];
                                                                  v809 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
                                                                  v810 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                                  fprintf(v808, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v809, "", "", v810, 2437, v863, v878);
                                                                }
                                                                goto LABEL_1572;
                                                              }
                                                              if (v863)
                                                              {
                                                                if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                                {
                                                                  v796 = (FILE *)*MEMORY[0x1E4F143D8];
                                                                  v797 = (const char *)*MEMORY[0x1E4FA5840];
                                                                  v798 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                                  fprintf(v796, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v797, "", "", v798, 2443, v863, v878);
                                                                }
                                                                goto LABEL_292;
                                                              }
                                                              if (v847)
                                                              {
                                                                if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                                {
                                                                  v811 = (FILE *)*MEMORY[0x1E4F143D8];
                                                                  v812 = *(const char **)(MEMORY[0x1E4FA5840] + 32);
                                                                  v813 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                                  fprintf(v811, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v812, "", "", v813, 2449, v863, v878);
                                                                }
LABEL_1576:
                                                                var3 = 0;
                                                                LODWORD(v13) = 255;
                                                                LODWORD(var15) = 4;
                                                                goto LABEL_316;
                                                              }
                                                              if ((v863 & 2) != 0)
                                                              {
                                                                if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                                {
                                                                  v814 = (FILE *)*MEMORY[0x1E4F143D8];
                                                                  v815 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                                                                  v816 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                                  fprintf(v814, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v815, "", "", v816, 2455, v863, v878);
                                                                }
                                                                goto LABEL_1580;
                                                              }
                                                              if ((v863 & 0x20000) != 0)
                                                              {
                                                                if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                                {
                                                                  v820 = (FILE *)*MEMORY[0x1E4F143D8];
                                                                  v821 = *(const char **)(MEMORY[0x1E4FA5840] + 136);
                                                                  v822 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                                  fprintf(v820, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v821, "", "", v822, 2461, v863, v878);
                                                                }
                                                                var3 = 0;
                                                                LODWORD(v13) = 255;
                                                                LODWORD(var15) = 17;
                                                                goto LABEL_316;
                                                              }
                                                              if ((v863 & 0x4000) == 0)
                                                              {
                                                                if ((v863 & 0x20) != 0)
                                                                {
                                                                  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                                  {
                                                                    v826 = (FILE *)*MEMORY[0x1E4F143D8];
                                                                    v827 = *(const char **)(MEMORY[0x1E4FA5840] + 40);
                                                                    v828 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                                    fprintf(v826, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v827, "", "", v828, 2473, v863, v878);
                                                                  }
                                                                  var3 = 0;
                                                                  LODWORD(v13) = 255;
                                                                  LODWORD(var15) = 5;
                                                                  goto LABEL_316;
                                                                }
                                                                if ((v863 & 0x80) != 0)
                                                                {
                                                                  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                                  {
                                                                    v829 = (FILE *)*MEMORY[0x1E4F143D8];
                                                                    v830 = *(const char **)(MEMORY[0x1E4FA5840] + 56);
                                                                    v831 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                                    fprintf(v829, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v830, "", "", v831, 2479, v863, v878);
                                                                  }
                                                                  goto LABEL_1600;
                                                                }
                                                                if ((v863 & 0x400) == 0)
                                                                {
                                                                  if ((v863 & 0x2000) != 0)
                                                                  {
                                                                    int v835 = strcmp(v43, "A");
                                                                    char v836 = v858;
                                                                    if (v835) {
                                                                      char v836 = 1;
                                                                    }
                                                                    if ((v836 & 1) == 0
                                                                      && (((v878 & 0x800) == 0) & ~v854) == 0)
                                                                    {
                                                                      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                                      {
                                                                        v837 = (FILE *)*MEMORY[0x1E4F143D8];
                                                                        v838 = *(const char **)(MEMORY[0x1E4FA5840]
                                                                                              + 104);
                                                                        v839 = (const char *)*MEMORY[0x1E4FA5840];
                                                                        v840 = (const char *)SLTagEng::Name((SLTagEng *)0x42);
                                                                        fprintf(v837, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v838, "->", v839, v840, 2495, v863, v878);
                                                                      }
                                                                      var3 = 0;
                                                                      LODWORD(v13) = 0;
                                                                      unsigned __int16 v10 = 66;
                                                                      LODWORD(var15) = 13;
                                                                      goto LABEL_182;
                                                                    }
                                                                    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                                    {
                                                                      v841 = (FILE *)*MEMORY[0x1E4F143D8];
                                                                      v842 = *(const char **)(MEMORY[0x1E4FA5840] + 104);
                                                                      v843 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                                      fprintf(v841, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v842, "", "", v843, 2501, v863, v878);
                                                                    }
                                                                    var3 = 0;
                                                                    LODWORD(v13) = 255;
                                                                    LODWORD(var15) = 13;
                                                                    goto LABEL_316;
                                                                  }
                                                                  LODWORD(var15) = SLFirstPOSInSet();
                                                                  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                                  {
                                                                    v832 = (FILE *)*MEMORY[0x1E4F143D8];
                                                                    v833 = *(const char **)(MEMORY[0x1E4FA5840]
                                                                                          + 8 * var15);
                                                                    v834 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                                    fprintf(v832, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v833, "", "", v834, 2517, v863, v878);
                                                                  }
                                                                  goto LABEL_1604;
                                                                }
                                                                if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                                {
                                                                  v817 = (FILE *)*MEMORY[0x1E4F143D8];
                                                                  v818 = *(const char **)(MEMORY[0x1E4FA5840] + 80);
                                                                  v819 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                                  fprintf(v817, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v818, "", "", v819, 2485, v863, v878);
                                                                }
LABEL_1588:
                                                                var3 = 0;
                                                                LODWORD(v13) = 255;
                                                                LODWORD(var15) = 10;
                                                                goto LABEL_316;
                                                              }
                                                              if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                              {
                                                                v823 = (FILE *)*MEMORY[0x1E4F143D8];
                                                                v824 = *(const char **)(MEMORY[0x1E4FA5840] + 112);
                                                                v825 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                                fprintf(v823, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v824, "", "", v825, 2467, v863, v878);
                                                              }
                                                            }
                                                            else if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                            {
                                                              v802 = (FILE *)*MEMORY[0x1E4F143D8];
                                                              v803 = *(const char **)(MEMORY[0x1E4FA5840] + 112);
                                                              v804 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                              fprintf(v802, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v803, "", "", v804, 2420, v863, v878);
                                                            }
                                                          }
                                                          var3 = 0;
                                                          LODWORD(v13) = 255;
                                                          LODWORD(var15) = 14;
                                                          goto LABEL_316;
                                                        }
                                                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                        {
                                                          v792 = (FILE *)*MEMORY[0x1E4F143D8];
                                                          v793 = *(const char **)(MEMORY[0x1E4FA5840] + 80);
                                                          v794 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                          fprintf(v792, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v793, "", "", v794, 2399, v863, v878);
                                                        }
                                                        goto LABEL_1588;
                                                      }
                                                      int v746 = 1 << v879;
                                                      if ((v878 & 0x43) == 0x41
                                                        && (v746 & 0x220C0) != 0
                                                        && (v863 & 0x40) != 0
                                                        && ((v878 & 0x10) == 0 || (v868[1] & 0x22000) == 0))
                                                      {
                                                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                        {
                                                          v751 = (FILE *)*MEMORY[0x1E4F143D8];
                                                          v752 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
                                                          v753 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                          fprintf(v751, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v752, "", "", v753, 2300, v863, v878);
                                                        }
                                                        goto LABEL_1572;
                                                      }
                                                      if ((v746 & 0xC0) != 0
                                                        && (v863 & 0x40) != 0
                                                        && (v878 & v853) == 1)
                                                      {
                                                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                        {
                                                          v747 = (FILE *)*MEMORY[0x1E4F143D8];
                                                          v748 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
                                                          v749 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                          fprintf(v747, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v748, "", "", v749, 2308, v863, v878);
                                                        }
                                                        goto LABEL_1572;
                                                      }
                                                      if ((v878 & 0xCC1) != 0 && v879 == 1 && v436 == 66)
                                                      {
                                                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                        {
                                                          v754 = (FILE *)*MEMORY[0x1E4F143D8];
                                                          v755 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
                                                          v756 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                          fprintf(v754, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v755, "", "", v756, 2315, v863, v878);
                                                        }
                                                        goto LABEL_1572;
                                                      }
                                                      if ((v746 & 0x30) != 0 && v436 == 66)
                                                      {
                                                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                        {
                                                          v757 = (FILE *)*MEMORY[0x1E4F143D8];
                                                          v758 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
                                                          v759 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                          fprintf(v757, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v758, "", "", v759, 2322, v863, v878);
                                                        }
                                                        goto LABEL_1572;
                                                      }
                                                      BOOL v750 = v879 == 0;
                                                      BOOL v760 = v436 == 66 && v879 == 0;
                                                      if ((v854 & v760) == 1)
                                                      {
                                                        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                        {
                                                          v761 = (FILE *)*MEMORY[0x1E4F143D8];
                                                          v762 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
                                                          v763 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                          fprintf(v761, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v762, "", "", v763, 2329, v863, v878);
                                                        }
                                                        goto LABEL_1572;
                                                      }
                                                      if (v879 == 14 && (v863 & 0x62) == 0x42)
                                                      {
                                                        if ((((v878 & 0x41) == 0) & ~v854) == 0)
                                                        {
                                                          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                          {
                                                            v764 = (FILE *)*MEMORY[0x1E4F143D8];
                                                            v765 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
                                                            v766 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                            fprintf(v764, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v765, "", "", v766, 2337, v863, v878);
                                                          }
                                                          goto LABEL_1572;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        if ((~v863 & 0x60) != 0 || v879 != 10) {
                                                          goto LABEL_1506;
                                                        }
                                                        if ((v878 & 0x41) != 0)
                                                        {
                                                          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                          {
                                                            v767 = (FILE *)*MEMORY[0x1E4F143D8];
                                                            v768 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
                                                            v769 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                            fprintf(v767, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v768, "", "", v769, 2344, v863, v878);
                                                          }
                                                          goto LABEL_1572;
                                                        }
                                                      }
                                                      BOOL v750 = 0;
                                                      goto LABEL_1506;
                                                    }
                                                    if ((v878 & 0x8000) != 0)
                                                    {
                                                      if ((~v878 & 3) == 0 || (v868[1] & 3) != 1) {
                                                        goto LABEL_1289;
                                                      }
                                                    }
                                                    else if ((~v878 & 3) == 0)
                                                    {
                                                      goto LABEL_1289;
                                                    }
                                                    if ((v878 & 0x32000) == 0 || (v868[1] & 0x41) == 0)
                                                    {
                                                      unsigned int v629 = v878 & 0x80080;
                                                      if ((v878 & 0x80) != 0)
                                                      {
                                                        if (v629 == 0x80000 || (v868[1] & 0x10) != 0) {
                                                          goto LABEL_1293;
                                                        }
                                                      }
                                                      else if (v629 == 0x80000)
                                                      {
                                                        goto LABEL_1293;
                                                      }
                                                      if (((v878 & 2) == 0
                                                         || (v868[1] & 0x22080) == 0
                                                         || (v868[0] & 0x51) == 0)
                                                        && ((v878 & 0x800) == 0
                                                         || (v868[1] & 3) != 2
                                                         || (v868[0] & 0x22041) == 0)
                                                        && ((v878 & 1) == 0
                                                         || (v868[1] & 0x80) == 0
                                                         || (v868[0] & 0x22041) == 0)
                                                        && ((v878 & 0x40) == 0
                                                         || ((v853 | ((BYTE1(v868[1]) & 4) >> 2)) & 1) == 0)
                                                        && ((v878 & 0x41) == 0 || (v868[1] & 1) == 0))
                                                      {
                                                        goto LABEL_1289;
                                                      }
                                                    }
LABEL_1293:
                                                    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                    {
                                                      v633 = (FILE *)*MEMORY[0x1E4F143D8];
                                                      v634 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                                                      v635 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                      fprintf(v633, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v634, "", "", v635, 2015, v863, v878);
                                                    }
                                                    goto LABEL_438;
                                                  }
LABEL_1238:
                                                  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                  {
                                                    v618 = (FILE *)*MEMORY[0x1E4F143D8];
                                                    v619 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
                                                    v620 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                    fprintf(v618, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v619, "", "", v620, 1963, v863, v878);
                                                  }
                                                  goto LABEL_351;
                                                }
LABEL_1228:
                                                if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                                {
                                                  v611 = (FILE *)*MEMORY[0x1E4F143D8];
                                                  v612 = *(const char **)(MEMORY[0x1E4FA5840] + 32);
                                                  v613 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                                  fprintf(v611, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v612, "", "", v613, 1955, v863, v878);
                                                }
                                                goto LABEL_830;
                                              }
LABEL_1184:
                                              BOOL v588 = v558 == 1 && v587;
                                              if (!v588 || (v863 & 0x51) != 0x51)
                                              {
                                                BOOL v589 = (~v863 & 0x60) == 0 && v588;
                                                if (!v589 || (v878 & 1) == 0)
                                                {
                                                  if (v394 != 66) {
                                                    LOBYTE(v588) = 0;
                                                  }
                                                  if (!v588) {
                                                    goto LABEL_1241;
                                                  }
                                                  goto LABEL_1233;
                                                }
                                                goto LABEL_1238;
                                              }
                                              goto LABEL_1228;
                                            }
                                          }
                                          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                          {
                                            v595 = (FILE *)*MEMORY[0x1E4F143D8];
                                            v596 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                                            v597 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                            fprintf(v595, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v596, "", "", v597, 1915, v863, v878);
                                          }
                                          goto LABEL_438;
                                        }
                                      }
                                      else if ((v878 & 0x22) == 2)
                                      {
LABEL_1163:
                                        int v394 = 3;
                                        goto LABEL_1164;
                                      }
                                      if ((v878 & 1) != 0 && (v868[1] & 0x22) == 2) {
                                        goto LABEL_1163;
                                      }
                                    }
                                    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                    {
                                      v569 = (FILE *)*MEMORY[0x1E4F143D8];
                                      v570 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                                      v571 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                      fprintf(v569, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v570, "", "", v571, 1871, v863, v878);
                                    }
                                    goto LABEL_438;
                                  }
                                  if ((((v878 & 0x80) == 0) & ~v854) == 0)
                                  {
                                    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                                    {
                                      v555 = (FILE *)*MEMORY[0x1E4F143D8];
                                      v556 = *(const char **)(MEMORY[0x1E4FA5840] + 40);
                                      v557 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                      fprintf(v555, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v556, "", "", v557, 1824, v863, v878);
                                    }
                                    goto LABEL_771;
                                  }
                                  goto LABEL_1107;
                                }
                              }
                              if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                              {
                                v539 = (FILE *)*MEMORY[0x1E4F143D8];
                                v540 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                                v541 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                                fprintf(v539, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v540, "", "", v541, 1778, v863, v878);
                              }
                              goto LABEL_438;
                            }
                            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                            {
                              v529 = (FILE *)*MEMORY[0x1E4F143D8];
                              v530 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
                              v531 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                              fprintf(v529, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v530, "", "", v531, 1752, v863, v878);
                            }
                            goto LABEL_351;
                          }
                          if (v153 != 18)
                          {
                            if (v325 != 18 || v153 != 14) {
                              goto LABEL_962;
                            }
                            goto LABEL_960;
                          }
                        }
                        if ((v863 & 0x108) != 0) {
                          goto LABEL_961;
                        }
                        goto LABEL_962;
                      }
LABEL_935:
                      if (v153 != 14 || ((1 << v325) & 0x118441) == 0 || (v863 & 0x100) == 0) {
                        goto LABEL_943;
                      }
                      goto LABEL_938;
                    }
                    if ((v878 & 0x80) != 0)
                    {
                      if ((v854 | ((unsigned __int16)(v868[1] & 0x2000) >> 13))) {
                        goto LABEL_858;
                      }
                    }
                    else if (v854)
                    {
                      goto LABEL_858;
                    }
                    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                    {
                      v454 = (FILE *)*MEMORY[0x1E4F143D8];
                      v455 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
                      v456 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                      fprintf(v454, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v455, "", "", v456, 1488, v863, v878);
                    }
                    goto LABEL_438;
                  }
LABEL_832:
                  if (v153 != 11 || v325 != 255) {
                    goto LABEL_850;
                  }
                  goto LABEL_834;
                }
              }
              else
              {
                BOOL v392 = v153 != 11 || v325 != 255;
                if ((v863 & 0x20) == 0) {
                  BOOL v392 = 1;
                }
                if ((v392 | v854 ^ 1))
                {
                  BOOL v393 = v153 == 0;
                  int v394 = v863 & 0x43;
                  BOOL v848 = v394 == 67;
                  BOOL v395 = v394 == 67 && v153 == 0;
                  if (v854 & v395)
                  {
                    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
                    {
                      v396 = (FILE *)*MEMORY[0x1E4F143D8];
                      v397 = (const char *)*MEMORY[0x1E4FA5840];
                      v398 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                      fprintf(v396, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v397, "", "", v398, 1377, v863, v878);
                    }
                    goto LABEL_292;
                  }
                  BOOL v849 = (~v863 & 0x4040) == 0;
                  BOOL v850 = (~v863 & 3) == 0;
                  goto LABEL_786;
                }
              }
              if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
              {
                v399 = (FILE *)*MEMORY[0x1E4F143D8];
                v400 = *(const char **)(MEMORY[0x1E4FA5840] + 40);
                v401 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
                fprintf(v399, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v400, "", "", v401, 1365, v863, v878);
              }
              goto LABEL_771;
            }
          }
          else if (v258 != 128 || v872 != 19 || v153 != 11)
          {
            if (!v323) {
              goto LABEL_705;
            }
            goto LABEL_700;
          }
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v341 = (FILE *)*MEMORY[0x1E4F143D8];
            v342 = *(const char **)(MEMORY[0x1E4FA5840] + 56);
            v343 = *(const char **)(MEMORY[0x1E4FA5840] + 152);
            v344 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v862);
            fprintf(v341, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v342, "->", v343, v344, 1315, v863, v878);
          }
          goto LABEL_717;
        }
        if ((v878 & 0x8000) != 0 && ((v868[1] & 0xE) != 0 || (v868[1] & 0x4000) != 0 && (v868[0] & 0xE) != 0))
        {
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v345 = (FILE *)*MEMORY[0x1E4F143D8];
            v346 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
            v347 = (const char *)SLTagEng::Name((SLTagEng *)0x41F);
            fprintf(v345, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v346, "", "", v347, 1256, v863, v878);
          }
          var3 = 0;
          unsigned __int16 v10 = 1055;
          goto LABEL_741;
        }
        if ((((1 << v153) & 0x22040) != 0 || v153 == 14 && ((1 << v872) & 0x26000) != 0)
          && (v878 & 0x41) != 0
          && (v878 & 0x40C00) == 0)
        {
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v332 = (FILE *)*MEMORY[0x1E4F143D8];
            v333 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
            v334 = (const char *)SLTagEng::Name((SLTagEng *)0x41E);
            fprintf(v332, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v333, "", "", v334, 1264, v863, v878);
          }
LABEL_744:
          var3 = 0;
          unsigned __int16 v10 = 1054;
          LODWORD(var15) = 6;
          goto LABEL_181;
        }
        if ((v878 & 0x8000) != 0 && (v868[1] & 0x10) != 0)
        {
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v383 = (FILE *)*MEMORY[0x1E4F143D8];
            v384 = *(const char **)(MEMORY[0x1E4FA5840] + 48);
            v385 = (const char *)SLTagEng::Name((SLTagEng *)0x41E);
            fprintf(v383, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v384, "", "", v385, 1271, v863, v878);
          }
          goto LABEL_744;
        }
        if (((1 << v153) & 0x4003C) != 0)
        {
          if (v878)
          {
LABEL_738:
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
            {
              v380 = (FILE *)*MEMORY[0x1E4F143D8];
              v381 = *(const char **)(MEMORY[0x1E4FA5840] + 8);
              v382 = (const char *)SLTagEng::Name((SLTagEng *)0x41E);
              fprintf(v380, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v381, "", "", v382, 1286, v863, v878);
            }
            var3 = 0;
            unsigned __int16 v10 = 1054;
LABEL_741:
            LODWORD(var15) = 1;
            goto LABEL_181;
          }
        }
        else if (v153 != 14 || (v878 & 1) != 0 || ((1 << v872) & 0x4003C) == 0)
        {
          goto LABEL_738;
        }
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v377 = (FILE *)*MEMORY[0x1E4F143D8];
          v378 = *(const char **)(MEMORY[0x1E4FA5840] + 40);
          v379 = (const char *)SLTagEng::Name((SLTagEng *)0x41E);
          fprintf(v377, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v378, "", "", v379, 1279, v863, v878);
        }
        var3 = 0;
        unsigned __int16 v10 = 1054;
        LODWORD(var15) = 5;
        goto LABEL_181;
      }
      if (MTFEPOSResolver::RequireTagAndPOS(this, (MTFESpeechElement *)v865, 65, 1)) {
        goto LABEL_371;
      }
      goto LABEL_283;
    }
    if ((_WORD)v862)
    {
      if (MTFEPOSResolver::RequireTagAndPOS(this, (MTFESpeechElement *)v865, 65, 0x7FFFFFFF))
      {
LABEL_371:
        unsigned int v863 = *((_DWORD *)this + 7);
        SLWordTagSet var17 = (SLWordTagSet)*((_OWORD *)this + 2);
      }
LABEL_283:
      v79 = v865;
      goto LABEL_284;
    }
    BOOL v164 = (!*((unsigned char *)this + 12)
         || ((v162 = SLWordTagSet::find(&var17), unsigned int v118 = v865->var8, (v118 & 0x4000) == 0) ? (v163 = 1) : (v163 = v162),
             v163 == 1))
        && (v118 & 0x8000) == 0;
    int v169 = SLWordTagSet::find(&v873);
    int v170 = SLWordTagSet::find(&v867);
    if ((v865->var8 & 0x20) != 0 && v164 | v169 | v170)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v171 = (FILE *)*MEMORY[0x1E4F143D8];
        v172 = (const char *)*MEMORY[0x1E4FA5840];
        v173 = (const char *)SLTagEng::Name((SLTagEng *)0x40);
        fprintf(v171, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v172, "", "", v173, 707, v863, v878);
      }
    }
    else
    {
      if (!SLWordTagSet::find(&v873))
      {
        __int16 v177 = 65;
        goto LABEL_369;
      }
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v174 = (FILE *)*MEMORY[0x1E4F143D8];
        v175 = (const char *)*MEMORY[0x1E4FA5840];
        v176 = (const char *)SLTagEng::Name((SLTagEng *)0x40);
        fprintf(v174, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v175, "", "", v176, 714, v863, v878);
      }
    }
    LODWORD(var15) = 0;
    __int16 v177 = 64;
LABEL_369:
    if (!MTFEPOSResolver::RequireTagAndPOS(this, (MTFESpeechElement *)v865, v177, 0x7FFFFFFF))
    {
      LOWORD(v862) = 0;
      goto LABEL_283;
    }
    LOWORD(v862) = 0;
    goto LABEL_371;
  }
  int v62 = SLWordTagSet::find(&var17);
  if (!v62 || !SLWordTagSet::find(&v867))
  {
    if (SLWordTagSet::find(&v873))
    {
      *(_WORD *)&v865->int var10 = 516;
      if (v62) {
        strcpy(v43, "STREET");
      }
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
      {
        v72 = (FILE *)*MEMORY[0x1E4F143D8];
        v73 = (const char *)*MEMORY[0x1E4FA5840];
        v74 = (const char *)SLTagEng::Name((SLTagEng *)0x400);
        fprintf(v72, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v73, "", "", v74, 625, v863, v878);
      }
    }
    else
    {
      v79 = v865;
      if (((1 << v879) & 0x41) != 0)
      {
        v865->int var10 = 4;
        if (v62) {
          strcpy(v43, "STREET");
        }
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v83 = (FILE *)*MEMORY[0x1E4F143D8];
          v84 = (const char *)*MEMORY[0x1E4FA5840];
          v85 = (const char *)SLTagEng::Name((SLTagEng *)0x400);
          fprintf(v83, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v84, "", "", v85, 631, v863, v878);
        }
      }
      else
      {
        if (!v62) {
          goto LABEL_286;
        }
        if ((v878 & 0x41) != 0)
        {
          HIBYTE(v18[1].var0) = 2;
          strcpy(v43, "SAINT");
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
          {
            v119 = (FILE *)*MEMORY[0x1E4F143D8];
            v120 = (const char *)*MEMORY[0x1E4FA5840];
            v121 = (const char *)SLTagEng::Name((SLTagEng *)0x401);
            fprintf(v119, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v120, "", "", v121, 636, v863, v878);
          }
          goto LABEL_142;
        }
        strcpy(v43, "STREET");
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
        {
          v159 = (FILE *)*MEMORY[0x1E4F143D8];
          v160 = (const char *)*MEMORY[0x1E4FA5840];
          v161 = (const char *)SLTagEng::Name((SLTagEng *)0x400);
          fprintf(v159, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v160, "", "", v161, 642, v863, v878);
        }
      }
    }
    var3 = 0;
    LODWORD(var15) = 0;
    unsigned __int16 v10 = 1024;
    goto LABEL_181;
  }
  HIBYTE(v18[1].var0) = 2;
  strcpy(v43, "SAINT");
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS))
  {
    __int16 v63 = (FILE *)*MEMORY[0x1E4F143D8];
    __int16 v64 = (const char *)*MEMORY[0x1E4FA5840];
    __int16 v65 = (const char *)SLTagEng::Name((SLTagEng *)0x401);
    fprintf(v63, "POS \"%s\" %s%s%s %s [%d] %08x %08x\n", v43, v64, "", "", v65, 618, v863, v878);
  }
LABEL_142:
  var3 = 0;
  LODWORD(var15) = 0;
  unsigned __int16 v10 = 1025;
LABEL_181:
  LODWORD(v13) = 255;
LABEL_182:
  if (var15 != 13) {
    goto LABEL_207;
  }
  BOOL v2 = v865;
  *((_DWORD *)this + 4) = 0;
  int v861 = 13;
  LODWORD(var15) = 13;
  if (var3)
  {
LABEL_209:
    unsigned int v97 = v861;
    goto LABEL_220;
  }
  while (1)
  {
    int v855 = (int)v13;
    var3 = v2->var3;
    if (var3) {
      break;
    }
LABEL_206:
    MTBEAbort((MTFESpeechElement *)v865);
    __break(1u);
LABEL_207:
    BOOL v2 = v865;
LABEL_208:
    ++*((_DWORD *)this + 4);
    int v861 = var15;
    if (var3) {
      goto LABEL_209;
    }
  }
  int v13 = 0;
  char v89 = 0;
  int v90 = v10;
  int v91 = 1 << var15;
  BOOL v857 = v10 != 67;
  BOOL v859 = v10 == 67;
  do
  {
    v93 = v92;
    if (!v90)
    {
      if ((*((_DWORD *)v92 + 14) & v91) == 0) {
        goto LABEL_204;
      }
      char v99 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS);
      if ((v99 & 1) == 0) {
        goto LABEL_217;
      }
      v98 = "POS match";
      goto LABEL_216;
    }
    if (SLWordTagSet::find((SLWordTagSet *)(v92 + 60)))
    {
      if ((MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS) & 1) == 0) {
        goto LABEL_217;
      }
      v98 = "Positive tag match";
      goto LABEL_216;
    }
    if ((SLWordTagSet::find(&var17) & 1) == 0 && !SLWordTagSet::find((SLWordTagSet *)(v93 + 60)))
    {
      if ((*((_DWORD *)v93 + 14) & v91) == 0)
      {
        if (v89)
        {
LABEL_198:
          char v89 = 1;
          goto LABEL_204;
        }
        char v96 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS);
        v95 = "Negative tag match";
        char v89 = v857;
        if ((v96 & 1) == 0)
        {
          char v89 = v857;
          goto LABEL_203;
        }
LABEL_201:
        fprintf((FILE *)*MEMORY[0x1E4F143D8], "POS %s\n", v95);
        goto LABEL_203;
      }
      if ((MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS) & 1) == 0) {
        goto LABEL_217;
      }
      v98 = "POS match / no tag mismatch";
LABEL_216:
      fprintf((FILE *)*MEMORY[0x1E4F143D8], "POS %s\n", v98);
      goto LABEL_217;
    }
    if (v89) {
      goto LABEL_198;
    }
    if ((*((_DWORD *)v93 + 14) & v91) == 0)
    {
      char v89 = 0;
      goto LABEL_204;
    }
    char v94 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugPOS);
    v95 = "POS match / tag mismatch";
    char v89 = v859;
    if (v94) {
      goto LABEL_201;
    }
    char v89 = v859;
LABEL_203:
    int v13 = (MTFESpeechElement *)v93;
LABEL_204:
    var3 = var3->var6;
  }
  while (var3);
  var3 = v13;
  if (!v13) {
    goto LABEL_206;
  }
LABEL_217:
  unsigned int v97 = v861;
  {
    BOOL v2 = v865;
    LODWORD(v13) = v855;
  }
  else
  {
    LODWORD(v13) = v855;
    unsigned int v97 = SLFirstPOSInSet();
    BOOL v2 = v865;
  }
LABEL_220:
  p_SLWordTagSet var17 = &v2->var17;
  SLWordTagSet v873 = v2->var17;
  v2->var17.var0[0] = 0;
  uint64_t v101 = v873.var0[0];
  if (v873.var0[0])
  {
    v102 = &v873.var0[1];
    do
    {
      unsigned __int16 v104 = *v102++;
      unsigned __int16 v103 = v104;
      if (SLWordTagSet::find(&v871))
      {
        if (SLWordTagSet::find(p_var17)) {
          goto LABEL_230;
        }
        unsigned int v105 = p_var17->var0[0];
        if (v105 >= 7) {
          goto LABEL_230;
        }
      }
      else
      {
        if (v103) {
          goto LABEL_230;
        }
        v103 ^= 1u;
        if (SLWordTagSet::find(p_var17)) {
          goto LABEL_230;
        }
        unsigned int v105 = p_var17->var0[0];
        if (v105 > 6) {
          goto LABEL_230;
        }
      }
      unsigned int v106 = v105 + 1;
      p_var17->var0[0] = v106;
      p_var17->var0[v106] = v103;
LABEL_230:
      --v101;
    }
    while (v101);
  }
  MTFESpeechElement::SelectChild((MTFESpeechElement *)v865, var3);
  if (v13 != 255)
  {
    v865->var8 |= 0x200u;
    unsigned int v97 = v13;
  }
  v865->unint64_t var15 = v97;
  if ((v863 & (v863 - 1)) != 0) {
    v865->var8 |= 0x10u;
  }
  if (v879 == 255 && v97 <= 8 && ((1 << v97) & 0x10C) != 0) {
    *((unsigned char *)this + 8) = 1;
  }
  v107 = v865->var27;
  if (!strcmp(v865->var27, "THAT"))
  {
    if (v97 != 13)
    {
      uint64_t v111 = p_var17->var0[0];
      if (v111 <= 6)
      {
        uint64_t v112 = v111 + 1;
        p_var17->var0[0] = v112;
        p_var17->var0[v112] = 75;
      }
      goto LABEL_240;
    }
    v108 = strchr(v107, 124);
    if (v108) {
      goto LABEL_245;
    }
  }
  else
  {
LABEL_240:
    v108 = strchr(v107, 124);
    if (v108)
    {
      if (v97 == 6)
      {
        v109 = v108 + 1;
        size_t v110 = strlen(v108 + 1);
        memmove(v107, v109, v110 + 1);
        goto LABEL_246;
      }
LABEL_245:
      char *v108 = 0;
    }
  }
LABEL_246:
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v875);
}

void sub_1DA498390(_Unwind_Exception *a1)
{
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)(v1 - 184));
  _Unwind_Resume(a1);
}

BOOL MTFEPOSResolver::RequireTagAndPOS(MTFEPOSResolver *this, MTFESpeechElement *a2, __int16 a3, int a4)
{
  *((_WORD *)this + 10) = a3;
  *((_DWORD *)this + 6) = a4;
  *((_DWORD *)this + 7) = 0;
  *((_WORD *)this + 16) = 0;
  MTFESpeechElement::VisitChildren(a2, this);
  int v6 = *((unsigned __int16 *)this + 28);
  if (*((_WORD *)this + 28))
  {
    MTFESpeechElement::clear(a2);
    MTFESpeechElement::TransferChildren((MTFESpeechElement *)((char *)this + 48), a2);
  }
  return v6 != 0;
}

uint64_t MTFEPOSResolver::VisitCommand(uint64_t this, MTFECommand *a2)
{
  if (a2->var8 == 1953456745)
  {
    unint64_t v2 = a2->var9 >> 24;
    BOOL v3 = v2 > 6;
    uint64_t v4 = (1 << v2) & 0x6E;
    if (v3 || v4 == 0) {
      *(unsigned char *)(this + 11) = 1;
    }
  }
  return this;
}

uint64_t MTFEPOSResolver::VisitHomograph(MTFEPOSResolver *this, MTFESpeechElement *a2)
{
  uint64_t v4 = (SLWordTagSet *)((char *)&a2[1].var0 + 4);
  uint64_t result = SLWordTagSet::find((SLWordTagSet *)((char *)&a2[1].var0 + 4));
  if ((result & 1) == 0)
  {
    if ((*((_WORD *)this + 10) & 1) != 0 || (uint64_t result = SLWordTagSet::find(v4), result))
    {
      if ((*((_DWORD *)this + 6) & (uint64_t)a2[1].var0) != 0)
      {
        MTFESpeechElement::RemoveChild(a2->var5, a2);
        MTFESpeechElement::AddChildAfter((MTFESpeechElement *)((char *)this + 48), a2, *((MTFESpeechElement **)this + 9));
        *((_DWORD *)this + 7) |= LODWORD(a2[1].var0);
        return operator+=();
      }
    }
  }
  return result;
}

void sub_1DA49893C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DA498A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DA498C0C(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v2, 0x10A2C40BF445734);

  _Unwind_Resume(a1);
}

void sub_1DA498EA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DA498F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DA498FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DA499070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DA4990CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DA4992B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MTWrappedPhraseProcessor;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

SInt16 SpeechBusy(void)
{
  return 1;
}

void MTFBlockNotifier::MTFBlockNotifier(MTFBlockNotifier *this, MTWrappedPhraseProcessor *a2)
{
  BOOL v3 = a2;
  MTBENotifier::MTBENotifier((MTBENotifier *)this);
  *(void *)this = &unk_1F347D8F8;
  *((void *)this + 8) = 0;
  objc_storeWeak((id *)this + 8, v3);
}

void sub_1DA4994D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void MTFBlockNotifier::~MTFBlockNotifier(MTBENotifier *this)
{
  objc_destroyWeak((id *)&this[1].var0);

  MTBENotifier::~MTBENotifier(this);
}

{
  uint64_t vars8;

  objc_destroyWeak((id *)&this[1].var0);
  MTBENotifier::~MTBENotifier(this);

  JUMPOUT(0x1E016FF00);
}

void MTFBlockNotifier::NotifySpeechDone(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 8);
  [WeakRetained finishedSampleGeneration];
}

void sub_1DA4995B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void MTFBlockNotifier::NotifySync(id *this, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained(this + 8);
  [WeakRetained generatedSampleForSync:a2];
}

void sub_1DA499618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void MTFBlockNotifier::NotifyPhoneme(id *this, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained(this + 8);
  [WeakRetained generatedSampleForPhoneme:a2];
}

void sub_1DA49967C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void MTFBlockNotifier::NotifyWord(id *this, uint64_t a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained(this + 8);
  [WeakRetained generatedSampleForWord:a2 length:a3];
}

void sub_1DA4996E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t MTFBlockNotifier::WantSpeechDone(MTFBlockNotifier *this)
{
  return 1;
}

uint64_t MTFBlockNotifier::WantSync(MTFBlockNotifier *this)
{
  return 1;
}

uint64_t MTFBlockNotifier::WantPhoneme(MTFBlockNotifier *this)
{
  return 1;
}

uint64_t MTFBlockNotifier::WantWord(MTFBlockNotifier *this)
{
  return 1;
}

MTFESpeechElement *MTFESpeechElement::AddChildBefore(MTFESpeechElement *this, MTFESpeechElement *a2, MTFESpeechElement *a3)
{
  uint8x8_t v5 = this;
  if (a3)
  {
    if (a3->var5 != this)
    {
      this = MTBEAbort(v5);
    }
    ++v5->var1;
    a2->var5 = v5;
    p_var7 = &a3->var7;
  }
  else
  {
    ++this->var1;
    a2->var5 = this;
    p_var7 = &this->var4;
  }
  BOOL v7 = *p_var7;
  a2->var7 = v7;
  if (!v7 || (v7->var6 = a2, v7->var5 != v5)) {
    v5->var3 = a2;
  }
  a2->var6 = a3;
  p_var4 = &v5->var4;
  if (a3) {
    p_var4 = &a3->var7;
  }
  *p_var4 = a2;
  return this;
}

MTFESpeechElement *MTFESpeechElement::AddChildAfter(MTFESpeechElement *this, MTFESpeechElement *a2, MTFESpeechElement *a3)
{
  uint8x8_t v5 = this;
  if (a3)
  {
    if (a3->var5 != this)
    {
      this = MTBEAbort(v5);
    }
    ++v5->var1;
    a2->var5 = v5;
    p_var6 = &a3->var6;
  }
  else
  {
    ++this->var1;
    a2->var5 = this;
    p_var6 = &this->var3;
  }
  BOOL v7 = *p_var6;
  a2->var6 = v7;
  if (!v7 || (v7->var7 = a2, v7->var5 != v5)) {
    v5->var4 = a2;
  }
  a2->var7 = a3;
  p_var3 = &v5->var3;
  if (a3) {
    p_var3 = &a3->var6;
  }
  *p_var3 = a2;
  return this;
}

MTFESpeechElement *MTFESpeechElement::RemoveChild(MTFESpeechElement *this, MTFESpeechElement *a2)
{
  BOOL v3 = this;
  if (a2->var5 != this)
  {
    this = MTBEAbort(v3);
  }
  --v3->var1;
  var6 = a2->var6;
  var7 = a2->var7;
  if (var6)
  {
    if (var6->var5 == v3) {
      int v6 = a2->var6;
    }
    else {
      int v6 = 0;
    }
    if (var7)
    {
LABEL_8:
      if (var7->var5 == v3) {
        BOOL v7 = a2->var7;
      }
      else {
        BOOL v7 = 0;
      }
      if (var6) {
        goto LABEL_12;
      }
      goto LABEL_13;
    }
  }
  else
  {
    int v6 = 0;
    if (var7) {
      goto LABEL_8;
    }
  }
  BOOL v7 = 0;
  if (var6) {
LABEL_12:
  }
    var6->var7 = var7;
LABEL_13:
  if (v6)
  {
    if (!var7) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  v3->var4 = v7;
  if (var7) {
LABEL_15:
  }
    var7->var6 = var6;
LABEL_16:
  if (!v7) {
    v3->var3 = v6;
  }
  return this;
}

MTFESpeechElement *MTFESpeechElement::SelectChild(MTFESpeechElement *this, MTFESpeechElement *a2)
{
  if (a2->var5 != this)
  {
    MTBEAbort(this);
  }
  uint64_t result = this->var3;
  *(_OWORD *)&this->var3 = *(_OWORD *)&a2->var3;
  this->int var1 = a2->var1;
  a2->int var1 = 0;
  a2->var3 = 0;
  a2->var4 = 0;
  for (uint64_t i = this->var3; i; uint64_t i = i->var6)
  {
    if (i->var5 != a2) {
      break;
    }
    i->var5 = this;
  }
  if (result)
  {
    do
    {
      if (result->var5 != this) {
        break;
      }
      var6 = result->var6;
      result->var5 = 0;
      (*((void (**)(MTFESpeechElement *))result->var0 + 2))(result);
      uint64_t result = var6;
    }
    while (var6);
  }
  return result;
}

MTFESpeechElement *MTFESpeechElement::AddLevel(MTFESpeechElement *this, MTFESpeechElement *a2)
{
  var3 = this->var3;
  if (var3)
  {
    BOOL v3 = this->var3;
    do
    {
      if (v3->var5 != this) {
        break;
      }
      v3->var5 = a2;
      BOOL v3 = v3->var6;
    }
    while (v3);
  }
  a2->int var1 = this->var1;
  a2->var5 = this;
  var4 = this->var4;
  a2->var3 = var3;
  a2->var4 = var4;
  this->int var1 = 1;
  this->var3 = a2;
  this->var4 = a2;
  return this;
}

MTFESpeechElement *MTFESpeechElement::TransferChildren(MTFESpeechElement *this, MTFESpeechElement *a2)
{
  var3 = this->var3;
  if (var3)
  {
    uint64_t v4 = this;
    do
    {
      MTFESpeechElement::RemoveChild(v4, var3);
      this = MTFESpeechElement::AddChildAfter(a2, var3, a2->var4);
      var3 = v4->var3;
    }
    while (var3);
  }
  return this;
}

MTFESpeechElement *MTFESpeechElement::SplitChildren(MTFESpeechElement *this, MTFESpeechElement *a2, MTFESpeechElement *a3)
{
  uint8x8_t v5 = this;
  if (this->var6 != a3)
  {
    this = MTBEAbort(v5);
  }
  var3 = a3->var3;
  var4 = v5->var4;
  if (var3)
  {
    var4->var6 = var3;
    p_var7 = &var3->var7;
  }
  else
  {
    p_var7 = &a3->var4;
  }
  *p_var7 = var4;
  a3->var3 = a2;
  var7 = a2->var7;
  if (var7)
  {
    unsigned __int16 v10 = a2->var7;
    if (var7->var5 != v5)
    {
      unsigned __int16 v10 = 0;
      v5->var3 = 0;
    }
    v5->var4 = v10;
    var7->var6 = 0;
  }
  else
  {
    v5->var3 = 0;
    v5->var4 = 0;
  }
  a2->var7 = 0;
  do
  {
    if (a2->var5 != v5) {
      break;
    }
    a2->var5 = a3;
    --v5->var1;
    ++a3->var1;
    a2 = a2->var6;
  }
  while (a2);
  return this;
}

MTFESpeechElement *MTFESpeechElement::SetPrevCousin(MTFESpeechElement *this, MTFESpeechElement *a2)
{
  a2->var6 = this;
  this->var7 = a2;
  return this;
}

MTFESpeechElement *MTFESpeechElement::SetNextCousin(MTFESpeechElement *this, MTFESpeechElement *a2)
{
  a2->var7 = this;
  this->var6 = a2;
  return this;
}

MTFESpeechElement *MTFESpeechElement::VisitChildren(MTFESpeechElement *this, MTFESpeechVisitor *a2)
{
  var3 = this->var3;
  if (var3)
  {
    uint64_t v4 = this;
    do
    {
      if (var3->var5 != v4) {
        break;
      }
      var6 = var3->var6;
      if (!var3->var2)
      {
        MTBEAbort(v4);
      }
      this = (MTFESpeechElement *)(*(uint64_t (**)(MTFESpeechElement *, MTFESpeechVisitor *))var3->var0)(var3, a2);
      var3 = var6;
    }
    while (var6);
  }
  return this;
}

MTFESpeechElement *MTFESpeechElement::clear(MTFESpeechElement *this)
{
  for (uint64_t result = this->var3; result; uint64_t result = this->var3)
    (*((void (**)(MTFESpeechElement *))result->var0 + 2))(result);
  return result;
}

void MTFESpeechElement::~MTFESpeechElement(MTFESpeechElement *this)
{
  this->unsigned int var0 = (void **)&unk_1F347D988;
  for (uint64_t i = this->var3; i; uint64_t i = this->var3)
    (*((void (**)(MTFESpeechElement *))i->var0 + 2))(i);
  var5 = this->var5;
  if (var5) {
    MTFESpeechElement::RemoveChild(var5, this);
  }
  if (!this->var2)
  {
    MTBEAbort(this);
  }
  this->var2 = 0;
}

void MTFESpeechElement::MTFESpeechElement(MTFESpeechElement *this)
{
  this->unsigned int var0 = (void **)&unk_1F347D988;
  this->int var1 = 0;
  this->var2 = 1;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  this->var7 = 0;
}

double MTFESpeechElement::CleanseClone(MTFESpeechElement *this)
{
  this->int var1 = 0;
  double result = 0.0;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  this->var7 = 0;
  return result;
}

char *MTFESentence::FlagName(MTFESentence *this)
{
  if (this <= 3) {
    return MTFESentence::flagNames[this];
  }
  else {
    return 0;
  }
}

void MTFESentence::MTFESentence(MTFESentence *this, float a2, float a3, float a4)
{
  this->int var1 = 0;
  this->var2 = 1;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  this->var7 = 0;
  this->unsigned int var0 = (void **)&unk_1F347D9B0;
  this->unsigned int var8 = 0;
  *(void *)&this->int64_t var9 = 0;
  this->var12 = a2;
  this->var13 = a3;
  this->var14 = a4;
  this->unint64_t var15 = 0;
}

{
  this->int var1 = 0;
  this->var2 = 1;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  this->var7 = 0;
  this->unsigned int var0 = (void **)&unk_1F347D9B0;
  this->unsigned int var8 = 0;
  *(void *)&this->int64_t var9 = 0;
  this->var12 = a2;
  this->var13 = a3;
  this->var14 = a4;
  this->unint64_t var15 = 0;
}

uint64_t MTFESentence::Visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a1);
}

void MTFEIntonationalPhrase::MTFEIntonationalPhrase(MTFEIntonationalPhrase *this)
{
  this->int var1 = 0;
  this->var2 = 1;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  this->var7 = 0;
  this->unsigned int var8 = 0;
  this->unsigned int var0 = (void **)&unk_1F347D9D8;
  this->var9.int var1 = 0;
  this->var9.var2 = 1;
  *(_OWORD *)&this->var9.var3 = 0u;
  *(_OWORD *)&this->var9.var5 = 0u;
  this->var9.var7 = 0;
  *(void *)&this->var10.unsigned int var0 = 0;
  this->var9.unsigned int var0 = (void **)&unk_1F347DD78;
  *(_WORD *)&this->SLWordTagSet var17 = 0;
  *(_DWORD *)&this->var20 = 0;
  this->var22 = 0;
  *(_DWORD *)&this->var23 = 0;
  this->var28 = 0;
  this->var12 = 0;
  this->var13 = 0;
  this->var27 = 0.0;
  this->var25 = 0;
  this->var26 = 0;
}

void MTFEIntonationalPhrase::~MTFEIntonationalPhrase(MTFEIntonationalPhrase *this)
{
  this->unsigned int var0 = (void **)&unk_1F347D9D8;
  var12 = this->var12;
  if (var12) {
    MEMORY[0x1E016FEE0](var12, 0x1000C8052888210);
  }
  var28 = (void **)this->var28;
  if (var28)
  {
    MEOWVectorBase::~MEOWVectorBase(var28);
    MEMORY[0x1E016FF00]();
  }
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)&this->var9);

  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)this);
}

{
  uint64_t vars8;

  MTFEIntonationalPhrase::~MTFEIntonationalPhrase(this);

  JUMPOUT(0x1E016FF00);
}

uint64_t MTFEIntonationalPhrase::Visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a1);
}

void MTFEIntermediatePhrase::MTFEIntermediatePhrase(MTFEIntermediatePhrase *this)
{
  this->int var1 = 0;
  this->var2 = 1;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  this->var7 = 0;
  *(void *)&this->var8.unsigned int var0 = 0;
  this->unsigned int var0 = (void **)&unk_1F347DA00;
  this->var12 = 0;
  this->int var10 = 0;
  *(void *)&this->var14 = 4;
}

{
  this->int var1 = 0;
  this->var2 = 1;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  this->var7 = 0;
  *(void *)&this->var8.unsigned int var0 = 0;
  this->unsigned int var0 = (void **)&unk_1F347DA00;
  this->var12 = 0;
  this->int var10 = 0;
  *(void *)&this->var14 = 4;
}

uint64_t MTFEIntermediatePhrase::Visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, a1);
}

void MTFEWord::MTFEWord(MTFEWord *this, unsigned __int8 a2, char a3)
{
  this->int var1 = 0;
  this->var2 = 1;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  this->var7 = 0;
  this->unsigned int var0 = (void **)&unk_1F347DA28;
  this->unsigned int var8 = 0;
  this->int64_t var9 = -1;
  this->int var10 = a3;
  this->int var11 = a2;
  this->var12 = 32;
  this->var13 = -1;
  this->var14.var0[0] = 0;
  this->unint64_t var15 = -1;
  this->__int32 var16 = 0;
  this->var17.var0[0] = 0;
  this->var18.int var1 = 0;
  this->var18.var2 = 1;
  this->var18.var7 = 0;
  *(void *)&this->var19.unsigned int var0 = 0;
  *(_OWORD *)&this->var18.var3 = 0u;
  *(_OWORD *)&this->var18.var5 = 0u;
  this->var18.unsigned int var0 = (void **)&unk_1F347DD78;
  this->var28 = 0;
  this->var27[0] = 0;
  *(void *)&this->var21 = 0;
  this->var25 = 0;
}

uint64_t MTFEWord::Visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a1);
}

MTFESpeechElement *MTFEWord::PrevWord(MTFEWord *this)
{
  double result = this->var7;
  if (!result)
  {
    var7 = this->var5->var7;
    if (var7) {
      return var7->var4;
    }
    else {
      return 0;
    }
  }
  return result;
}

MTFESpeechElement *MTFEWord::NextWord(MTFEWord *this)
{
  double result = this->var6;
  if (!result)
  {
    var6 = this->var5->var6;
    if (var6) {
      return var6->var3;
    }
    else {
      return 0;
    }
  }
  return result;
}

MTFEWord *MTFEWord::POSForPrev(MTFEWord *this, unsigned __int8 *a2, SLWordTagSet *a3, MTFEWord **a4)
{
  if (this->var12 == 62)
  {
    *a2 = this->var13;
    if (a3) {
      *a3 = this->var14;
    }
    if (a4)
    {
      while (1)
      {
        var7 = (MTFEWord *)this->var7;
        if (!var7)
        {
          uint8x8_t v5 = this->var5->var7;
          if (!v5) {
            break;
          }
          var7 = (MTFEWord *)v5->var4;
          if (!var7) {
            break;
          }
        }
        this = var7;
        if (var7->var12 == 60)
        {
          var4 = (MTFEWord *)var7->var7;
          if (var4) {
            goto LABEL_19;
          }
          var5 = var7->var5;
          goto LABEL_16;
        }
      }
LABEL_18:
      var4 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    *a2 = this->var15;
    if (a3) {
      *a3 = this->var17;
    }
    if (a4)
    {
      var4 = (MTFEWord *)this->var7;
      if (!var4)
      {
        var5 = this->var5;
LABEL_16:
        uint64_t v8 = var5->var7;
        if (!v8) {
          goto LABEL_18;
        }
        var4 = (MTFEWord *)v8->var4;
      }
LABEL_19:
      *a4 = var4;
    }
  }
  return this;
}

MTFEWord *MTFEWord::POSForNext(MTFEWord *this, unsigned __int8 *a2, SLWordTagSet *a3, MTFEWord **a4)
{
  if (this->var12 == 60)
  {
    *a2 = this->var13;
    if (a3) {
      *a3 = this->var14;
    }
    if (a4)
    {
      while (1)
      {
        var6 = (MTFEWord *)this->var6;
        if (!var6)
        {
          uint8x8_t v5 = this->var5->var6;
          if (!v5) {
            break;
          }
          var6 = (MTFEWord *)v5->var3;
          if (!var6) {
            break;
          }
        }
        this = var6;
        if (var6->var12 == 62)
        {
          var3 = (MTFEWord *)var6->var6;
          if (var3) {
            goto LABEL_19;
          }
          var5 = var6->var5;
          goto LABEL_16;
        }
      }
LABEL_18:
      var3 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    *a2 = this->var15;
    if (a3) {
      *a3 = this->var17;
    }
    if (a4)
    {
      var3 = (MTFEWord *)this->var6;
      if (!var3)
      {
        var5 = this->var5;
LABEL_16:
        uint64_t v8 = var5->var6;
        if (!v8) {
          goto LABEL_18;
        }
        var3 = (MTFEWord *)v8->var3;
      }
LABEL_19:
      *a4 = var3;
    }
  }
  return this;
}

MTFEWord *MTFEWord::POSForNext(MTFEWord *this, unsigned int *a2, SLWordTagSet *a3, MTFEWord **a4)
{
  if (this->var12 == 60)
  {
    *a2 = 1 << this->var13;
    if (a3) {
      *a3 = this->var14;
    }
    if (a4)
    {
      while (1)
      {
        this = (MTFEWord *)this->var6;
        if (!this) {
          break;
        }
        if (this->var12 == 62) {
          goto LABEL_11;
        }
      }
      var6 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    *a2 = this->var16;
    if (a3) {
      *a3 = this->var17;
    }
    if (a4)
    {
LABEL_11:
      var6 = (MTFEWord *)this->var6;
LABEL_13:
      *a4 = var6;
    }
  }
  return this;
}

uint64_t MTFEHomograph::Visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a1);
}

void MTFESyllable::MTFESyllable(MTFESyllable *this)
{
  this->int var1 = 0;
  this->var2 = 1;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  this->var7 = 0;
  *(void *)&this->unsigned int var8 = 0;
  this->unsigned int var0 = (void **)&unk_1F347DA50;
  this->var12 = 0.0;
}

{
  this->int var1 = 0;
  this->var2 = 1;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  this->var7 = 0;
  *(void *)&this->unsigned int var8 = 0;
  this->unsigned int var0 = (void **)&unk_1F347DA50;
  this->var12 = 0.0;
}

uint64_t MTFESyllable::Visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 48))(a2, a1);
}

void MTFEPhoneme::MTFEPhoneme(MTFEPhoneme *this, unsigned __int8 a2)
{
  this->int var1 = 0;
  this->var2 = 1;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  this->var7 = 0;
  this->unsigned int var0 = (void **)&unk_1F347DA78;
  this->unsigned int var8 = 0;
  this->int64_t var9 = a2;
  this->int var10 = 0;
  *(_DWORD *)&this->int var11 = 0;
  *(void *)&this->var13 = 0x3F0000003F800000;
  *(void *)&this->unint64_t var15 = 0;
  this->SLWordTagSet var17 = 0;
  *(_DWORD *)&this->var18 = -1;
  this->var21 = 0;
}

{
  this->int var1 = 0;
  this->var2 = 1;
  *(_OWORD *)&this->var3 = 0u;
  *(_OWORD *)&this->var5 = 0u;
  this->var7 = 0;
  this->unsigned int var0 = (void **)&unk_1F347DA78;
  this->unsigned int var8 = 0;
  this->int64_t var9 = a2;
  this->int var10 = 0;
  *(_DWORD *)&this->int var11 = 0;
  *(void *)&this->var13 = 0x3F0000003F800000;
  *(void *)&this->unint64_t var15 = 0;
  this->SLWordTagSet var17 = 0;
  *(_DWORD *)&this->var18 = -1;
  this->var21 = 0;
}

void MTFEPhoneme::~MTFEPhoneme(MTFEPhoneme *this)
{
  this->unsigned int var0 = (void **)&unk_1F347DA78;
  SLWordTagSet var17 = this->var17;
  if (var17) {
    MEMORY[0x1E016FF00](var17, 0x1000C40F33D7AAALL);
  }

  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)this);
}

{
  uint64_t vars8;

  MTFEPhoneme::~MTFEPhoneme(this);

  JUMPOUT(0x1E016FF00);
}

uint64_t MTFEPhoneme::Visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 56))(a2, a1);
}

uint64_t MTFECommands::Visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 64))(a2, a1);
}

uint64_t MTFECommand::Visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, a1);
}

uint64_t MTFESpeechVisitor::Visit(MTFESpeechVisitor *this, MTFESpeechElement *a2)
{
  if (!a2 || !a2->var2)
  {
    MTBEAbort(a2);
  }
  uint64_t v4 = (uint64_t (*)(MTFESpeechElement *, MTFESpeechVisitor *))*a2->var0;

  return v4(a2, this);
}

MTFESpeechElement *MTFESpeechVisitor::VisitSentence(MTFESpeechVisitor *this, MTFESpeechElement *a2)
{
  return MTFESpeechElement::VisitChildren(a2, this);
}

MTFESpeechElement *MTFESpeechVisitor::VisitIntonationalPhrase(MTFESpeechVisitor *this, MTFESpeechElement *a2)
{
  return MTFESpeechElement::VisitChildren(a2, this);
}

MTFESpeechElement *MTFESpeechVisitor::VisitIntermediatePhrase(MTFESpeechVisitor *this, MTFESpeechElement *a2)
{
  return MTFESpeechElement::VisitChildren(a2, this);
}

MTFESpeechElement *MTFESpeechVisitor::VisitWord(MTFESpeechVisitor *this, MTFESpeechElement *a2)
{
  return MTFESpeechElement::VisitChildren(a2, this);
}

MTFESpeechElement *MTFESpeechVisitor::VisitHomograph(MTFESpeechVisitor *this, MTFESpeechElement *a2)
{
  return MTFESpeechElement::VisitChildren(a2, this);
}

MTFESpeechElement *MTFESpeechVisitor::VisitSyllable(MTFESpeechVisitor *this, MTFESpeechElement *a2)
{
  return MTFESpeechElement::VisitChildren(a2, this);
}

MTFESpeechElement *MTFESpeechVisitor::VisitCommands(MTFESpeechVisitor *this, MTFESpeechElement *a2)
{
  return MTFESpeechElement::VisitChildren(a2, this);
}

MTFESpeechElement *MTFESpeechVisitor::VisitCommand(MTFESpeechVisitor *this, MTFESpeechElement *a2)
{
  return MTFESpeechElement::VisitChildren(a2, this);
}

void MTFESpeechPedigree::MTFESpeechPedigree(MTFESpeechPedigree *this, MTFESpeechElement *a2)
{
  *((void *)this + 7) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F347DAA0;
  ((void (*)(MTFESpeechElement *, MTFESpeechPedigree *))*a2->var0)(a2, this);
}

{
  *((void *)this + 7) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F347DAA0;
  ((void (*)(MTFESpeechElement *, MTFESpeechPedigree *))*a2->var0)(a2, this);
}

uint64_t MTFESpeechPedigree::VisitSentence(uint64_t this, MTFESentence *a2)
{
  *(void *)(this + 8) = a2;
  return this;
}

uint64_t MTFESpeechPedigree::VisitIntonationalPhrase(MTFESpeechPedigree *this, MTFEIntonationalPhrase *a2)
{
  *((void *)this + 2) = a2;
  return ((uint64_t (*)(MTFESpeechElement *, MTFESpeechPedigree *))*a2->var5->var0)(a2->var5, this);
}

uint64_t MTFESpeechPedigree::VisitIntermediatePhrase(MTFESpeechPedigree *this, MTFEIntermediatePhrase *a2)
{
  *((void *)this + 3) = a2;
  return ((uint64_t (*)(MTFESpeechElement *, MTFESpeechPedigree *))*a2->var5->var0)(a2->var5, this);
}

uint64_t MTFESpeechPedigree::VisitWord(MTFESpeechPedigree *this, MTFEWord *a2)
{
  *((void *)this + 4) = a2;
  return ((uint64_t (*)(MTFESpeechElement *, MTFESpeechPedigree *))*a2->var5->var0)(a2->var5, this);
}

uint64_t MTFESpeechPedigree::VisitHomograph(MTFESpeechPedigree *this, MTFEHomograph *a2)
{
  *((void *)this + 5) = a2;
  return ((uint64_t (*)(MTFESpeechElement *, MTFESpeechPedigree *))*a2->var5->var0)(a2->var5, this);
}

uint64_t MTFESpeechPedigree::VisitSyllable(MTFESpeechPedigree *this, MTFESyllable *a2)
{
  *((void *)this + 6) = a2;
  return ((uint64_t (*)(MTFESpeechElement *, MTFESpeechPedigree *))*a2->var5->var0)(a2->var5, this);
}

uint64_t MTFESpeechPedigree::VisitPhoneme(MTFESpeechPedigree *this, MTFEPhoneme *a2)
{
  *((void *)this + 7) = a2;
  return ((uint64_t (*)(MTFESpeechElement *, MTFESpeechPedigree *))*a2->var5->var0)(a2->var5, this);
}

void MTFESpeechIterator::MTFESpeechIterator(MTFESpeechIterator *this, MTFESpeechElement *a2)
{
  *(void *)this = &unk_1F347DB10;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = a2;
  if (a2) {
    ((void (*)(MTFESpeechElement *, MTFESpeechIterator *))*a2->var0)(a2, this);
  }
}

{
  *(void *)this = &unk_1F347DB10;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = a2;
  if (a2) {
    ((void (*)(MTFESpeechElement *, MTFESpeechIterator *))*a2->var0)(a2, this);
  }
}

uint64_t MTFESpeechIterator::operator=(uint64_t result, uint64_t (***a2)(void, uint64_t))
{
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 8) = 0u;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = a2;
  if (a2) {
    return (**a2)(a2, result);
  }
  return result;
}

void *MTFESpeechIterator::operator++(void *a1)
{
  for (uint64_t i = (MTFESpeechElement *)a1[8]; i; a1[8] = i)
  {
    if (i == (MTFESpeechElement *)a1[7])
    {
      (*(void (**)(void *))(*a1 + 200))(a1);
      a1[7] = 0;
    }
    else if (i == (MTFESpeechElement *)a1[6])
    {
      (*(void (**)(void *))(*a1 + 184))(a1);
      a1[6] = 0;
    }
    else if (i == (MTFESpeechElement *)a1[5])
    {
      (*(void (**)(void *))(*a1 + 168))(a1);
      a1[5] = 0;
    }
    else if (i == (MTFESpeechElement *)a1[4])
    {
      (*(void (**)(void *))(*a1 + 152))(a1);
      a1[4] = 0;
    }
    else if (i == (MTFESpeechElement *)a1[3])
    {
      (*(void (**)(void *))(*a1 + 136))(a1);
      a1[3] = 0;
    }
    else if (i == (MTFESpeechElement *)a1[2])
    {
      (*(void (**)(void *))(*a1 + 120))(a1);
      a1[2] = 0;
    }
    else
    {
      BOOL v3 = (MTFESpeechElement *)a1[1];
      if (i == v3)
      {
        (*(void (**)(void *))(*a1 + 104))(a1);
        a1[1] = 0;
      }
      else
      {
        MTBEAbort(v3);
      }
    }
    uint64_t v4 = a1[8];
    uint64_t v5 = *(void *)(v4 + 40);
    if (v5)
    {
      uint64_t i = *(MTFESpeechElement **)(v4 + 32);
      if (*(MTFESpeechElement **)(v5 + 32) == i)
      {
        a1[8] = v5;
        (**(void (***)(uint64_t, void *))v5)(v5, a1);
        return a1;
      }
    }
    else
    {
      uint64_t i = *(MTFESpeechElement **)(v4 + 32);
    }
  }
  return a1;
}

MTFESpeechElement *MTFESpeechIterator::VisitSentence(MTFESpeechIterator *this, MTFESentence *a2)
{
  *((void *)this + 1) = a2;
  *((void *)this + 8) = a2;
  (*(void (**)(MTFESpeechIterator *))(*(void *)this + 96))(this);
  double result = a2->var3;
  if (result)
  {
    uint64_t v4 = (uint64_t (*)(void))*result->var0;
    return (MTFESpeechElement *)v4();
  }
  return result;
}

MTFESpeechElement *MTFESpeechIterator::VisitIntonationalPhrase(MTFESpeechIterator *this, MTFEIntonationalPhrase *a2)
{
  *((void *)this + 2) = a2;
  *((void *)this + 8) = a2;
  (*(void (**)(MTFESpeechIterator *))(*(void *)this + 112))(this);
  double result = a2->var3;
  if (result)
  {
    uint64_t v4 = (uint64_t (*)(void))*result->var0;
    return (MTFESpeechElement *)v4();
  }
  return result;
}

MTFESpeechElement *MTFESpeechIterator::VisitIntermediatePhrase(MTFESpeechIterator *this, MTFEIntermediatePhrase *a2)
{
  *((void *)this + 3) = a2;
  *((void *)this + 8) = a2;
  (*(void (**)(MTFESpeechIterator *))(*(void *)this + 128))(this);
  double result = a2->var3;
  if (result)
  {
    uint64_t v4 = (uint64_t (*)(void))*result->var0;
    return (MTFESpeechElement *)v4();
  }
  return result;
}

MTFESpeechElement *MTFESpeechIterator::VisitWord(MTFESpeechIterator *this, MTFEWord *a2)
{
  *((void *)this + 4) = a2;
  *((void *)this + 8) = a2;
  (*(void (**)(MTFESpeechIterator *))(*(void *)this + 144))(this);
  double result = a2->var3;
  if (result)
  {
    uint64_t v4 = (uint64_t (*)(void))*result->var0;
    return (MTFESpeechElement *)v4();
  }
  return result;
}

MTFESpeechElement *MTFESpeechIterator::VisitHomograph(MTFESpeechIterator *this, MTFEHomograph *a2)
{
  *((void *)this + 5) = a2;
  *((void *)this + 8) = a2;
  (*(void (**)(MTFESpeechIterator *))(*(void *)this + 160))(this);
  double result = a2->var3;
  if (result)
  {
    uint64_t v4 = (uint64_t (*)(void))*result->var0;
    return (MTFESpeechElement *)v4();
  }
  return result;
}

MTFESpeechElement *MTFESpeechIterator::VisitSyllable(MTFESpeechIterator *this, MTFESyllable *a2)
{
  *((void *)this + 6) = a2;
  *((void *)this + 8) = a2;
  (*(void (**)(MTFESpeechIterator *))(*(void *)this + 176))(this);
  double result = a2->var3;
  if (result)
  {
    uint64_t v4 = (uint64_t (*)(void))*result->var0;
    return (MTFESpeechElement *)v4();
  }
  return result;
}

MTFESpeechElement *MTFESpeechIterator::VisitPhoneme(MTFESpeechIterator *this, MTFEPhoneme *a2)
{
  *((void *)this + 7) = a2;
  *((void *)this + 8) = a2;
  (*(void (**)(MTFESpeechIterator *))(*(void *)this + 192))(this);
  double result = a2->var3;
  if (result)
  {
    uint64_t v4 = (uint64_t (*)(void))*result->var0;
    return (MTFESpeechElement *)v4();
  }
  return result;
}

void *MTFEFirstPhoneme(MTFESpeechElement *a1)
{
  do
  {
    uint64_t v2 = a1;
    a1 = a1->var3;
  }
  while (a1);
}

void *MTFELastPhoneme(MTFESpeechElement *a1)
{
  do
  {
    uint64_t v2 = a1;
    a1 = a1->var4;
  }
  while (a1);
}

void MTFEHomograph::~MTFEHomograph(MTFEHomograph *this)
{
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)this);

  JUMPOUT(0x1E016FF00);
}

void MTFECommand::~MTFECommand(MTFECommand *this)
{
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)this);

  JUMPOUT(0x1E016FF00);
}

void MTFESpeechIterator::~MTFESpeechIterator(MTFESpeechIterator *this)
{
}

void MTFESentence::~MTFESentence(MTFESentence *this)
{
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)this);

  JUMPOUT(0x1E016FF00);
}

void MTFECommands::~MTFECommands(MTFECommands *this)
{
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)this);

  JUMPOUT(0x1E016FF00);
}

void MTFEIntermediatePhrase::~MTFEIntermediatePhrase(MTFEIntermediatePhrase *this)
{
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)this);

  JUMPOUT(0x1E016FF00);
}

void MTFEWord::~MTFEWord(MTFEWord *this)
{
  this->unsigned int var0 = (void **)&unk_1F347DA28;
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)&this->var18);

  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)this);
}

{
  uint64_t vars8;

  this->unsigned int var0 = (void **)&unk_1F347DA28;
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)&this->var18);
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)this);

  JUMPOUT(0x1E016FF00);
}

void MTFESyllable::~MTFESyllable(MTFESyllable *this)
{
  MTFESpeechElement::~MTFESpeechElement((MTFESpeechElement *)this);

  JUMPOUT(0x1E016FF00);
}

void MTFESpeechPedigree::~MTFESpeechPedigree(MTFESpeechPedigree *this)
{
}

void MTPBPhraseProcessor::MTPBPhraseProcessor(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = (uint64_t)(a1 + 534);
  MTPBVoice::MTPBVoice((uint64_t)(a1 + 534), a2);
  *a1 = &unk_1F347DE60;
  MTBEPhraseProcessor::MTBEPhraseProcessor((uint64_t)a1, v5, a3, 1);
}

void sub_1DA49B7B8(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v2, 0x10A1C4036524A53);
  MTBEPhraseProcessor::~MTBEPhraseProcessor(v1);
  _Unwind_Resume(a1);
}

void MTPBPhraseProcessor::ExpandCompoundsPreDur(MTPBPhraseProcessor *this, MTFESpeechElement *a2)
{
  if (!*((unsigned char *)this + 69))
  {
    int v3 = 0;
    v2[0] = &unk_1F347E010;
    char v4 = 1;
    MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v2, a2);
    MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v2);
  }
}

void sub_1DA49B8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void MTPBPhraseProcessor::ExpandCompoundsPostDur(MTPBPhraseProcessor *this, MTFESpeechElement *a2)
{
  if (!*((unsigned char *)this + 69))
  {
    int v3 = 0;
    v2[0] = &unk_1F347E010;
    char v4 = 0;
    MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v2, a2);
    MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v2);
  }
}

void sub_1DA49B934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void MTPBPhraseProcessor::~MTPBPhraseProcessor(MTPBPhraseProcessor *this)
{
  MTBEPhraseProcessor::~MTBEPhraseProcessor(this);

  JUMPOUT(0x1E016FF00);
}

double MTPBVoice::MTPBVoice(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 62) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 70) = *(_WORD *)(a2 + 16);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 18);
  *(void *)(a1 + 76) = *(void *)(a2 + 22);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 30);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 34);
  *(_WORD *)(a1 + 352) = *(_WORD *)(a2 + 36);
  double result = *(double *)(a2 + 38);
  *(double *)(a1 + 298) = result;
  *(_DWORD *)(a1 + 310) = *(_DWORD *)(a2 + 46);
  return result;
}

uint64_t OpenResourceFile(__CFBundle *a1, const __CFString *a2, uint64_t *a3)
{
  CFURLRef v4 = CFBundleCopyResourceURL(a1, a2, 0, 0);
  if (v4)
  {
    CFURLRef v5 = v4;
    CFStringRef v6 = CFURLCopyFileSystemPath(v4, kCFURLPOSIXPathStyle);
    CFRelease(v5);
    if (v6)
    {
      CStringPtr = CFStringGetCStringPtr(v6, 0);
      if (CStringPtr)
      {
        uint64_t v8 = open(CStringPtr, 0);
        *a3 = v8;
        goto LABEL_5;
      }
      CFIndex Length = CFStringGetLength(v6);
      CFIndex v11 = CFStringGetMaximumSizeForEncoding(Length, 0) + 1;
      BOOL v12 = (char *)malloc_type_malloc(v11, 0x29EE1ED8uLL);
      if (v12)
      {
        int v13 = v12;
        if (CFStringGetCString(v6, v12, v11, 0))
        {
          *a3 = open(v13, 0);
          free(v13);
          uint64_t v8 = *a3;
LABEL_5:
          if (v8 == -1) {
            uint64_t v9 = *__error();
          }
          else {
            uint64_t v9 = 0;
          }
          goto LABEL_14;
        }
        free(v13);
      }
      uint64_t v9 = -1;
LABEL_14:
      CFRelease(v6);
      return v9;
    }
  }
  return -1;
}

uint64_t ReadResourceDataFile(__CFBundle *a1, const __CFString *a2, void **a3)
{
  uint64_t v11 = 0;
  uint64_t v4 = OpenResourceFile(a1, a2, &v11);
  if (!v4)
  {
    int v5 = v11;
    int v6 = fstat(v11, &v10);
    if (v6)
    {
      uint64_t v4 = v6;
    }
    else
    {
      off_t st_size = v10.st_size;
      uint64_t v8 = malloc_type_malloc(v10.st_size, 0x7CED88B4uLL);
      *a3 = v8;
      if (v8 && read(v5, v8, st_size) != st_size)
      {
        free(*a3);
        *a3 = 0;
        uint64_t v4 = -1;
      }
      else
      {
        uint64_t v4 = 0;
      }
    }
    close(v5);
  }
  return v4;
}

uint64_t MTFEFrameFiller::MTFEFrameFiller(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(void *)a1 = &unk_1F347DF18;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = a6;
  *(void *)(a1 + 88) = a7;
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)(a1 + 112), 8);
  *(unsigned char *)(a1 + 148) = a8;
  *(_WORD *)(a1 + 149) = 257;
  *(_DWORD *)(a1 + 151) = 0;
  *(void *)(a1 + 184) = &unk_1F347DB10;
  *(void *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 384) = xmmword_1DA4FE650;
  return a1;
}

void sub_1DA49BC80(_Unwind_Exception *a1)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(v1);
  _Unwind_Resume(a1);
}

void MTFEFrameFiller::~MTFEFrameFiller(MTFEFrameFiller *this)
{
  *(void *)this = &unk_1F347DF18;
  uint64_t v2 = (void **)((char *)this + 112);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFEFrameFiller *)((char *)this + 184));
  MEOWVectorBase::~MEOWVectorBase(v2);

  MTFESpeechVisitor::~MTFESpeechVisitor(this);
}

{
  uint64_t vars8;

  MTFEFrameFiller::~MTFEFrameFiller(this);

  JUMPOUT(0x1E016FF00);
}

uint64_t MTFEFrameFiller::InitPhrase(MTFEFrameFiller *this, MTFESpeechElement *a2)
{
  int v3 = (void *)((char *)this + 518);
  uint64_t result = MTFESpeechIterator::operator=((uint64_t)this + 184, a2);
  uint64_t v5 = *((void *)this + 30);
  uint64_t v6 = *((void *)this + 27);
  *((void *)this + 34) = v5;
  *((void *)this + 35) = v6;
  *((void *)this + 32) = v5;
  *((void *)this + 33) = v5;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((unsigned char *)this + 153) = 1;
  *((void *)this + 16) = 0;
  *((_DWORD *)this + 36) = 0;
  *((unsigned char *)this + 81) = 0;
  uint64_t v7 = *((void *)this + 2);
  uint64_t v8 = *(_WORD **)(*((void *)this + 1) + 8);
  *((void *)this + 22) = v8;
  uint64_t v9 = *(unsigned int **)(v7 + 240);
  *((void *)this + 20) = v9;
  if (v9)
  {
    unsigned int v10 = *v9;
    *((void *)this + 20) = v9 + 1;
    uint64_t v9 = (unsigned int *)bswap32(v10);
  }
  *((void *)this + 21) = v9;
  uint64_t v11 = *(__int16 *)(v7 + 26);
  *((_WORD *)this + 257) = v11;
  __int16 v12 = *(_WORD *)(v7 + 28);
  *((_WORD *)this + 258) = v12;
  *((void *)this + 52) = 0;
  *((void *)this + 53) = 8 * v11;
  *((_DWORD *)this + 125) = 0;
  *int v3 = 0x200000000;
  *((_WORD *)this + 263) = 1;
  *((_WORD *)this + 264) = *v8;
  *((_WORD *)this + 256) = 256;
  *((_WORD *)this + 265) = 0;
  int v13 = (_WORD *)*((void *)this + 5);
  *((_WORD *)this + 266) = (((26215 * (__int16)v13[153]) >> 16) >> 1)
                         + ((unsigned __int16)((26215 * (__int16)v13[153]) >> 16) >> 15);
  uint64_t v14 = 1374389535 * ((unsigned __int16)v13[152] << 16);
  *((void *)this + 54) = 8 * v11;
  *((void *)this + 55) = (int)((v14 >> 37) + ((unint64_t)v14 >> 63));
  uint64_t v15 = 274877907 * ((unsigned __int16)v13[149] << 16);
  uint64_t v16 = 274877907 * ((unsigned __int16)v13[150] << 16);
  *((void *)this + 56) = (int)((v15 >> 38) + ((unint64_t)v15 >> 63));
  *((void *)this + 57) = (int)((v16 >> 38) + ((unint64_t)v16 >> 63));
  unint64_t v17 = 1717986919 * ((unsigned __int16)v13[151] << 16);
  uint64_t v18 = 1374389535 * (int)(((v17 >> 34) + (v17 >> 63)) << 8);
  uint64_t v19 = 1374389535 * ((unsigned __int16)v13[20] << 16);
  *((void *)this + 58) = (int)((v18 >> 38) + ((unint64_t)v18 >> 63));
  *((void *)this + 59) = (int)((v19 >> 37) + ((unint64_t)v19 >> 63));
  uint64_t v20 = 1374389535 * ((unsigned __int16)v13[21] << 16);
  uint64_t v21 = 1374389535 * ((unsigned __int16)v13[22] << 16);
  *((void *)this + 60) = (int)((v20 >> 37) + ((unint64_t)v20 >> 63));
  *((void *)this + 61) = (int)((v21 >> 37) + ((unint64_t)v21 >> 63));
  v3[2] = 0xD8F0000000000000;
  if (*(unsigned char *)(*((void *)this + 24) + 56))
  {
    *((_WORD *)this + 257) = v11 + 35;
    *((_WORD *)this + 258) = v12 + 21;
  }
  if (v13[4]) {
    int v22 = &MTFEFrameFiller::GenderSpecific::sFemale;
  }
  else {
    int v22 = &MTFEFrameFiller::GenderSpecific::sMale;
  }
  *((void *)this + 185) = v22;
  if ((MTBEDebugFlags::sMTXDebug & 8) != 0 && !*((unsigned char *)this + 148))
  {
    return puts("Av Af   f0   f1   f2   f3 a2 a3 a4 a5 a6  fnz AB  BW1  BW2  BW3 ED MK");
  }
  return result;
}

uint64_t MTFEFrameFiller::SyncWithUnitSearch(uint64_t this)
{
  uint64_t v1 = this;
  if (*(void *)(this + 192) && *(void *)(this + 208))
  {
    pthread_mutex_lock((pthread_mutex_t *)(*(void *)(this + 32) + 96));
    for (uint64_t i = *(void *)(v1 + 208); i == *(void *)(*(void *)(v1 + 192) + 80); uint64_t i = *(void *)(v1 + 208))
    {
      MTBEWorker::DebugLog("Waiting for unit selection to proceed [%08x].\n", v2, i);
      pthread_cond_wait((pthread_cond_t *)(*(void *)(v1 + 32) + 160), (pthread_mutex_t *)(*(void *)(v1 + 32) + 96));
    }
    this = pthread_mutex_unlock((pthread_mutex_t *)(*(void *)(v1 + 32) + 96));
  }
  *(unsigned char *)(v1 + 153) = 0;
  return this;
}

uint64_t MTFEFrameFiller::FillNextFrame(MTFEFrameFiller *this, const char *a2)
{
  if (!*((unsigned char *)this + 149)) {
    goto LABEL_26;
  }
  uint64_t v4 = *((void *)this + 30);
  if (!v4)
  {
    MTBEWorker::DebugLog("End of sentence.\n", a2);
LABEL_10:
    uint64_t result = 0;
    *((unsigned char *)this + 153) = 0;
    *((unsigned char *)this + 151) = 0;
    return result;
  }
  if (*((unsigned char *)this + 151)
    && (!*((unsigned char *)this + 155) || *((unsigned char *)this + 155) == 1 && (*(unsigned char *)(v4 + 74) & 1) != 0))
  {
    goto LABEL_10;
  }
  if (*((unsigned char *)this + 154)) {
    return 0;
  }
  if (*((void *)this + 26) != *((void *)this + 13))
  {
    pthread_mutex_lock((pthread_mutex_t *)(*((void *)this + 4) + 96));
    if (*((void *)this + 26) == *(void *)(*((void *)this + 24) + 80))
    {
      MTBEWorker::DebugLog("Will stall on search [%08x].\n", v6, *((void *)this + 26));
      *((unsigned char *)this + 153) = 1;
    }
    else
    {
      MTBEWorker::DebugLog("Intermediate Phrase [%08x].\n", v6, *((void *)this + 26));
      *((void *)this + 13) = *((void *)this + 26);
    }
    pthread_mutex_unlock((pthread_mutex_t *)(*((void *)this + 4) + 96));
    int v7 = *((unsigned __int8 *)this + 153);
    *((unsigned char *)this + 154) = v7;
    if (v7) {
      return 0;
    }
  }
  uint64_t v8 = *((void *)this + 25);
  if (v8 != *((void *)this + 12))
  {
    *((void *)this + 12) = v8;
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 128);
      if (v9) {
        v9 += 4 * *(int *)(v8 + 144);
      }
      *((void *)this + 6) = v9;
      uint64_t v10 = *(void *)(v8 + 136);
      if (v10) {
        uint64_t v8 = v10 + 4 * *(int *)(v8 + 144);
      }
      else {
        uint64_t v8 = 0;
      }
    }
    else
    {
      *((void *)this + 6) = 0;
    }
    *((void *)this + 7) = v8;
  }
  MTFEFrameFiller::InitControls(this);
LABEL_26:
  if (a2)
  {
    if (!*((unsigned char *)this + 148)) {
      MTFEFrameFiller::InterpolateFormants((MTFESpeechElement *)this);
    }
    MTFEFrameFiller::InterpolatePitch(this);
    MTFEFrameFiller::SaveFrame((uint64_t)this, (uint64_t)a2);
    __int16 v11 = *((_WORD *)this + 172) + 1;
    *((_WORD *)this + 172) = v11;
    BOOL v12 = *((__int16 *)this + 173) <= v11;
    *((unsigned char *)this + 149) = v12;
    if (!v12) {
      return 1;
    }
  }
  else
  {
    if ((MTBEDebugFlags::sMTXDebug & 8) != 0)
    {
      int v13 = (FILE **)MEMORY[0x1E4F143C8];
      fputc(80, (FILE *)*MEMORY[0x1E4F143C8]);
      if (*((__int16 *)this + 173) >= 1)
      {
        uint64_t v14 = 0;
        do
          fprintf(*v13, " %.0f", *(float *)(*((void *)this + 6) + 4 * v14++));
        while (v14 < *((__int16 *)this + 173));
      }
      fputc(10, *v13);
    }
    uint64_t v15 = *((__int16 *)this + 173);
    uint64_t v16 = *((void *)this + 7);
    *((void *)this + 6) += 4 * v15;
    if (v16) {
      *((void *)this + 7) = v16 + 4 * v15;
    }
    if (!*((unsigned char *)this + 149)) {
      return 1;
    }
  }
  MTFESpeechIterator::operator++((void *)this + 23);
  return 1;
}

uint64_t MTFEFrameFiller::InitControls(MTFEFrameFiller *this)
{
  *((unsigned char *)this + 80) = 1;
  uint64_t v2 = *((void *)this + 30);
  if ((*(unsigned char *)(v2 + 74) & 0xF) != 0)
  {
    uint64_t v3 = *((void *)this + 27);
    *((void *)this + 35) = v3;
    *((unsigned char *)this + 81) = 2;
    ++*((_WORD *)this + 72);
    MEOWVectorBase::Append((void *)this + 14);
    *(void *)(*((void *)this + 14) + 8 * *((void *)this + 16) - 8) = v3;
    MTFECommands::Visit(*((void *)this + 27) + 112, (uint64_t)this);
    uint64_t v2 = *((void *)this + 30);
  }
  uint64_t v4 = *((void *)this + 27);
  if (v2 == *(void *)(*(void *)(v4 + 24) + 24))
  {
    char v5 = *((unsigned char *)this + 80) | *((unsigned char *)this + 81);
    *((unsigned char *)this + 80) = v5;
    *((unsigned char *)this + 81) = 0;
    if (v4 == *(void *)(*(void *)(*(void *)(*((void *)this + 24) + 24) + 24) + 24)) {
      *((unsigned char *)this + 80) = v5 | 4;
    }
  }
  if (*((unsigned char *)this + 151))
  {
    int v6 = *((char *)this + 155);
    if (*((unsigned char *)this + 155))
    {
      if (v6 == 2)
      {
        if ((*((unsigned char *)this + 80) & 4) == 0) {
          goto LABEL_14;
        }
      }
      else if (v6 != 1 || (*((unsigned char *)this + 80) & 2) == 0)
      {
        goto LABEL_14;
      }
    }
    *((unsigned char *)this + 152) = 1;
  }
LABEL_14:
  uint64_t v7 = (int)(float)(*(float *)(v2 + 64) * 5.0);
  uint64_t v8 = *(unsigned __int8 *)(v2 + 58);
  uint64_t v9 = *(unsigned __int8 *)(MEMORY[0x1E4FA5850] + v8);
  if (v9 == 255) {
    uint64_t v10 = v7;
  }
  else {
    uint64_t v10 = 0;
  }
  (*(void (**)(void, void, uint64_t, void))(**((void **)this + 11) + 48))(*((void *)this + 11), *(unsigned __int8 *)(MEMORY[0x1E4FA5848] + v8), v10, 0);
  if (v9 != 255)
  {
    if ((int)v7 >= 0) {
      int v11 = v7;
    }
    else {
      int v11 = v7 + 1;
    }
    (*(void (**)(void, uint64_t, uint64_t, void))(**((void **)this + 11) + 48))(*((void *)this + 11), v9, v7, (v11 >> 1));
  }
  uint64_t v12 = *((void *)this + 2);
  if (*(unsigned char *)(v12 + 50) && (*(unsigned char *)(*((void *)this + 30) + 75) & 2) != 0)
  {
    int v13 = (unsigned int *)*((void *)this + 20);
    uint64_t v14 = *((void *)this + 21);
    *((void *)this + 48) = bswap32(*v13);
    uint64_t v15 = *(void *)(v12 + 240);
    if (v14 - (((uint64_t)v13 - v15) >> 2) > 1)
    {
      uint64_t v16 = v13 + 1;
    }
    else
    {
      uint64_t v16 = (unsigned int *)(v15 + 4);
      if (!v14) {
        uint64_t v16 = 0;
      }
    }
    *((void *)this + 20) = v16;
  }
  else if (*(unsigned char *)(v12 + 49))
  {
    MTFEFrameFiller::DoNoteScript((uint64_t)this);
  }
  else if (*(unsigned char *)(v12 + 48))
  {
    MTFEFrameFiller::DoNote((uint64_t)this);
  }
  uint64_t result = MTFEFrameFiller::FillPhonTargets((uint64_t)this);
  if (!*((unsigned char *)this + 148))
  {
    return MTFEFrameFiller::InitControlBlocks(this);
  }
  return result;
}

MTFESpeechElement *MTFEFrameFiller::InterpolateFormants(MTFESpeechElement *this)
{
  uint64_t v1 = (uint64_t)this;
  for (uint64_t i = 0; i != 336; i += 48)
  {
    uint64_t v3 = v1 + i;
    int v4 = *(__int16 *)(v1 + 344);
    if (v4 <= *(__int16 *)(v1 + i + 546))
    {
      __int16 v7 = *(_WORD *)(v3 + 548);
      __int16 v5 = *(_WORD *)(v3 + 550);
    }
    else
    {
      __int16 v5 = 0;
      int v6 = *(_WORD **)(v3 + 576);
      *(_WORD *)(v3 + 546) = *v6;
      *(void *)(v3 + 576) = v6 + 2;
      __int16 v7 = v6[1];
      *(_WORD *)(v3 + 548) = v7;
      *(_WORD *)(v3 + 544) += *(__int16 *)(v3 + 550) >> 3;
    }
    uint64_t v8 = (_WORD *)(v1 + i);
    __int16 v9 = v5 + v7;
    *(_WORD *)(v1 + i + 550) = v9;
    __int16 v10 = *(_WORD *)(v1 + i + 552);
    if (v10) {
      v8[276] = v10 - v8[277];
    }
    __int16 v11 = v10 + v9;
    if (v4 >= (__int16)v8[280])
    {
      __int16 v12 = *(_WORD *)(v1 + i + 556);
      v11 += v12;
      *(_WORD *)(v1 + i + 556) = *(_WORD *)(v1 + i + 558) + v12;
    }
    int v13 = *(unsigned __int16 *)(v3 + 544) + (v11 >> 3);
    uint64_t v14 = v1 + i;
    *(_WORD *)(v1 + i + 586) = v13;
    if ((v13 & 0x8000) != 0)
    {
      this = MTBEAbort(*(MTFESpeechElement **)(v1 + 192));
    }
    int v15 = *(__int16 *)(v14 + 562);
    if (v15 >= 1 && *(__int16 *)(v1 + 344) < v15) {
      *(_WORD *)(v14 + 586) = *(_WORD *)(v1 + i + 564);
    }
  }
  int v16 = *(__int16 *)(v1 + 344);
  unint64_t v17 = (unsigned __int16 *)(v1 + 880);
  for (unint64_t j = 7; j != 15; ++j)
  {
    signed __int16 v19 = v17[4];
    if (v19) {
      v17[4] = v19 - v17[5];
    }
    int v20 = *v17 + (v19 >> 3);
    if (v16 >= (__int16)v17[8])
    {
      int v21 = (__int16)v17[6];
      v20 += v21 >> 3;
      v17[6] = v17[7] + v21;
    }
    v17[21] = v20;
    int v22 = (__int16)v17[9];
    if (v22 >= 1)
    {
      if (v16 < v22)
      {
        unsigned __int16 v23 = v17[10];
LABEL_27:
        v17[21] = v23;
        goto LABEL_28;
      }
      if (j >= 9 && v22 + 1 == v16 && (__int16)v20 >= 11)
      {
        unsigned __int16 v23 = v20 - 10;
        goto LABEL_27;
      }
    }
LABEL_28:
    v17 += 24;
  }
  return this;
}

uint64_t MTFEFrameFiller::InterpolatePitch(MTFEFrameFiller *this)
{
  if (!*((void *)this + 6)) {
    MTFEFrameFiller::ProcessPitchEvents((uint64_t)this);
  }
  uint64_t v2 = *((void *)this + 2);
  if (*(unsigned char *)(v2 + 48))
  {
    if (*((unsigned char *)this + 513))
    {
      uint64_t v3 = (uint64_t)*(__int16 *)(v2 + 190) << 16;
      *((void *)this + 50) = v3;
      *((unsigned char *)this + 513) = 0;
LABEL_6:
      *((unsigned char *)this + 511) = 0;
LABEL_7:
      unint64_t v4 = (unint64_t)v3 >> 16;
      int v5 = *((_DWORD *)this + 98) + *((_DWORD *)this + 116);
      *((void *)this + 49) = *(void *)&v5 & 0xFFFFFFLL;
      int v6 = MTFEFrameFiller::sSineWave[BYTE2(v5)] - 128;
      uint64_t v7 = 456;
      if ((*(_DWORD *)(*((void *)this + 30) + 72) & 0x10) == 0) {
        uint64_t v7 = 448;
      }
      uint64_t result = v4 + ((*(_DWORD *)((char *)this + v7) * v6) >> 16);
      goto LABEL_10;
    }
    if (!*((unsigned char *)this + 511))
    {
      uint64_t v3 = *((void *)this + 50);
      goto LABEL_7;
    }
    uint64_t v11 = *((void *)this + 51);
    if (v11 < 1)
    {
      if ((v11 & 0x8000000000000000) == 0)
      {
        uint64_t v3 = (uint64_t)*(__int16 *)(v2 + 190) << 16;
LABEL_33:
        *((void *)this + 50) = v3;
        goto LABEL_6;
      }
      uint64_t v3 = *((void *)this + 50) + v11;
      *((void *)this + 50) = v3;
      uint64_t v12 = *(__int16 *)(v2 + 190);
      if (v12 <= v3 >> 16) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v3 = *((void *)this + 50) + v11;
      *((void *)this + 50) = v3;
      uint64_t v12 = *(__int16 *)(v2 + 190);
      if (v12 > v3 >> 16) {
        goto LABEL_7;
      }
    }
    uint64_t v3 = v12 << 16;
    goto LABEL_33;
  }
  __int16 v9 = (float *)*((void *)this + 6);
  if (v9)
  {
    float v10 = *v9;
    *((void *)this + 6) = v9 + 1;
    uint64_t result = MTBEParam::HzToPitch((MTBEParam *)v2, (int)(float)(v10 + 0.5));
  }
  else
  {
    uint64_t result = MTFEFrameFiller::OldNonSingingPitch(this);
  }
  *((_WORD *)this + 190) = result;
  if (*((void *)this + 6)) {
    goto LABEL_19;
  }
  int v13 = *((_DWORD *)this + 98) + *((_DWORD *)this + 116);
  *((void *)this + 49) = *(void *)&v13 & 0xFFFFFFLL;
  int v14 = MTFEFrameFiller::sSineWave[BYTE2(v13)] - 128;
  if (MTBEParam::GetUsePostDurMod(*((MTBEParam **)this + 2))) {
    __int16 DurModFakeRate = MTBEParam::GetDurModFakeRate(*((MTBEParam **)this + 2));
  }
  else {
    __int16 DurModFakeRate = *(_WORD *)(*((void *)this + 27) + 178);
  }
  uint64_t v16 = 456;
  if (DurModFakeRate > 99) {
    uint64_t v16 = 448;
  }
  uint64_t result = *((unsigned __int16 *)this + 190) + ((*(_DWORD *)((char *)this + v16) * v14) >> 16);
LABEL_10:
  *((_WORD *)this + 190) = result;
LABEL_19:
  if ((result & 0x8000) != 0) {
    *((_WORD *)this + 190) = 0;
  }
  ++*((_WORD *)this + 263);
  ++*((_WORD *)this + 261);
  ++*((_WORD *)this + 262);
  return result;
}

uint64_t MTFEFrameFiller::SaveFrame(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (!*(unsigned char *)(result + 148))
  {
    int v4 = *(unsigned __int16 *)(result + 586);
    unsigned int v5 = *(__int16 *)(result + 634);
    int v6 = *(unsigned __int16 *)(result + 682);
    int v7 = v5 - *(__int16 *)(result + 586);
    if (v7 <= 199) {
      v4 += (209 - v7) % 0xAu - (209 - v7);
    }
    int v8 = *(__int16 *)(result + 682) - v5;
    if (v8 <= 599) {
      v6 += 10 * ((609 - v8) / 0xAu);
    }
    *(_WORD *)(a2 + 8) = MTBEParam::HzToPitch(*(MTBEParam **)(result + 16), (__int16)v4);
    *(_WORD *)(a2 + 10) = MTBEParam::HzToPitch(*(MTBEParam **)(v3 + 16), v5);
    *(_WORD *)(a2 + 12) = MTBEParam::HzToPitch(*(MTBEParam **)(v3 + 16), (__int16)v6);
    *(_WORD *)(a2 + 28) = (*(_DWORD *)(v3 + 472) * *(__int16 *)(v3 + 730)) >> 16;
    *(_WORD *)(a2 + 30) = (*(_DWORD *)(v3 + 480) * *(__int16 *)(v3 + 778)) >> 16;
    *(_WORD *)(a2 + 32) = (*(_DWORD *)(v3 + 488) * *(__int16 *)(v3 + 826)) >> 16;
    uint64_t result = MTBEParam::HzToPitch(*(MTBEParam **)(v3 + 16), *(__int16 *)(v3 + 874));
    *(_WORD *)(a2 + 24) = result;
    int v9 = *(__int16 *)(v3 + 922);
    if (v9 >= 63) {
      int v10 = 63;
    }
    else {
      int v10 = *(__int16 *)(v3 + 922);
    }
    int v11 = v10 >> 1;
    if (v9 >= 0) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    *(_WORD *)(a2 + 4) = MTFEFrameFiller::sLogToLin[v12];
    int v13 = *(__int16 *)(v3 + 970);
    if (v13 >= 63) {
      int v14 = 63;
    }
    else {
      int v14 = *(__int16 *)(v3 + 970);
    }
    int v15 = v14 >> 1;
    if (v13 >= 0) {
      int v16 = v15;
    }
    else {
      int v16 = 0;
    }
    *(_WORD *)(a2 + 6) = MTFEFrameFiller::sLogToLin[v16];
    int v17 = *(__int16 *)(v3 + 1018);
    if (v17 >= 63) {
      int v18 = 63;
    }
    else {
      int v18 = *(__int16 *)(v3 + 1018);
    }
    int v19 = v18 >> 1;
    if (v17 >= 0) {
      int v20 = v19;
    }
    else {
      int v20 = 0;
    }
    *(_WORD *)(a2 + 14) = MTFEFrameFiller::sLogToLin[v20];
    int v21 = *(__int16 *)(v3 + 1066);
    if (v21 >= 63) {
      int v22 = 63;
    }
    else {
      int v22 = *(__int16 *)(v3 + 1066);
    }
    int v23 = v22 >> 1;
    if (v21 >= 0) {
      int v24 = v23;
    }
    else {
      int v24 = 0;
    }
    *(_WORD *)(a2 + 16) = MTFEFrameFiller::sLogToLin[v24];
    int v25 = *(__int16 *)(v3 + 1114);
    if (v25 >= 63) {
      int v26 = 63;
    }
    else {
      int v26 = *(__int16 *)(v3 + 1114);
    }
    int v27 = v26 >> 1;
    if (v25 >= 0) {
      int v28 = v27;
    }
    else {
      int v28 = 0;
    }
    *(_WORD *)(a2 + 18) = MTFEFrameFiller::sLogToLin[v28];
    int v29 = *(__int16 *)(v3 + 1162);
    if (v29 >= 63) {
      int v30 = 63;
    }
    else {
      int v30 = *(__int16 *)(v3 + 1162);
    }
    int v31 = v30 >> 1;
    if (v29 >= 0) {
      int v32 = v31;
    }
    else {
      int v32 = 0;
    }
    *(_WORD *)(a2 + 20) = MTFEFrameFiller::sLogToLin[v32];
    int v33 = *(__int16 *)(v3 + 1210);
    if (v33 >= 63) {
      int v34 = 63;
    }
    else {
      int v34 = *(__int16 *)(v3 + 1210);
    }
    int v35 = v34 >> 1;
    if (v33 >= 0) {
      int v36 = v35;
    }
    else {
      int v36 = 0;
    }
    *(_WORD *)(a2 + 22) = MTFEFrameFiller::sLogToLin[v36];
    int v37 = *(__int16 *)(v3 + 1258);
    if (v37 >= 63) {
      int v38 = 63;
    }
    else {
      int v38 = *(__int16 *)(v3 + 1258);
    }
    int v39 = v38 >> 1;
    if (v37 < 0) {
      int v39 = 0;
    }
    *(_WORD *)(a2 + 26) = MTFEFrameFiller::sLogToLin[v39];
    uint64_t v40 = *(void *)(v3 + 384);
    *(void *)(a2 + 40) = *(void *)(v3 + 296);
    *(void *)(a2 + 48) = v40;
    *(void *)(v3 + 384) = -1;
  }
  int v41 = *(__int16 *)(v3 + 380);
  *(_WORD *)a2 = *(_WORD *)(v3 + 380);
  *(unsigned char *)(a2 + 2) = *(unsigned char *)(v3 + 149);
  if ((MTBEDebugFlags::sMTXDebug & 8) != 0)
  {
    if (*(unsigned char *)(v3 + 148)) {
      return printf("%4d\n");
    }
    else {
      return printf("%2d %2d %4d %4d %4d %4d %2d %2d %2d %2d %2d %4d %2d %4d %4d %4d %2d %2ld\n", *(__int16 *)(a2 + 4), *(__int16 *)(a2 + 6), v41, *(__int16 *)(a2 + 8), *(__int16 *)(a2 + 10), *(__int16 *)(a2 + 12));
    }
  }
  return result;
}

uint64_t MTFEFrameFiller::SkipWord(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 216);
  if (*(void *)(this + 280) == v2)
  {
    char v3 = 0;
    do
    {
      this = MTFEFrameFiller::FillNextFrame((MTFEFrameFiller *)v1, 0);
      v3 |= this ^ 1;
      uint64_t v2 = *(void *)(v1 + 216);
    }
    while (*(void *)(v1 + 280) == v2);
    if (v3)
    {
      *(_WORD *)(v1 + 151) = 1;
      *(unsigned char *)(v1 + 155) = 0;
    }
  }
  *(void *)(v1 + 280) = v2;
  return this;
}

uint64_t MTFEFrameFiller::PauseAt(uint64_t this, char a2)
{
  *(_WORD *)(this + 151) = 1;
  *(unsigned char *)(this + 155) = a2;
  return this;
}

BOOL MTFEFrameFiller::AtEndOfPhrase(MTFEFrameFiller *this)
{
  uint64_t v1 = *((void *)this + 35);
  uint64_t v2 = *(void *)(v1 + 32);
  return v1 == *(void *)(v2 + 24) && v2 == *(void *)(*(void *)(v2 + 32) + 24);
}

uint64_t MTFEFrameFiller::DoNoteScript(uint64_t this)
{
  if ((*(_DWORD *)(*(void *)(this + 240) + 72) & 0x10008000) == 0x10000000)
  {
    uint64_t v1 = *(void *)(this + 40);
    uint64_t v2 = *(_WORD **)(this + 16);
    uint64_t v3 = (__int16)v2[106];
    v2[106] = v3 + 1;
    __int16 v4 = *(_WORD *)(v1 + 2 * v3 + 350) << 8;
    __int16 v5 = *(__int16 *)(v1 + 348) > (__int16)(v3 + 1) ? v3 + 1 : 0;
    v2[106] = v5;
    if (v4 != 32512)
    {
      int v6 = (unsigned __int16)v2[95];
      int v7 = (__int16)(v2[97] + ((5461 * v4) >> 16));
      int v8 = v7 & ~(v7 >> 31);
      v2[95] = v8;
      uint64_t v9 = *(__int16 *)(this + 532);
      if (*(_WORD *)(this + 532)) {
        uint64_t v9 = ((v8 - v6) << 16) / v9;
      }
      *(void *)(this + 408) = v9;
      *(unsigned char *)(this + 511) = 1;
    }
  }
  return this;
}

uint64_t MTFEFrameFiller::DoNote(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 240);
  if (*(_WORD *)(v1 + 62) && (*(unsigned char *)(v1 + 73) & 0x80) == 0)
  {
    uint64_t v2 = *(void *)(this + 16);
    int v3 = *(unsigned __int16 *)(v2 + 190);
    int v4 = (__int16)(*(_WORD *)(v2 + 194) + ((5461 * (__int16)(*(_WORD *)(v1 + 62) << 8)) >> 16));
    *(_WORD *)(v2 + 190) = v4 & ~(unsigned __int16)(v4 >> 31);
    if (*(_WORD *)(this + 532)) {
      uint64_t v5 = (((v4 & ~(v4 >> 31)) - v3) << 16) / (uint64_t)*(__int16 *)(this + 532);
    }
    else {
      uint64_t v5 = 0;
    }
    *(void *)(this + 408) = v5;
    *(unsigned char *)(this + 511) = 1;
  }
  return this;
}

uint64_t MTFEFrameFiller::FillPhonTargets(uint64_t this)
{
  uint64_t v1 = this;
  *(_WORD *)(this + 344) = 0;
  uint64_t v2 = *(MTFEPhoneme **)(this + 240);
  float var13 = v2->var13;
  float var14 = v2->var14;
  int v5 = (int)var13;
  *(_WORD *)(this + 346) = (int)var13;
  *(_WORD *)(this + 348) = (int)(float)(var13 * var14);
  *(_OWORD *)(this + 64) = *(_OWORD *)(this + 48);
  var7 = v2->var7;
  if (var7)
  {
    *(unsigned char *)(this + 292) = *(unsigned char *)(this + 290);
    uint64_t v7 = *(void *)(this + 320);
    uint64_t v8 = BYTE2(var7[1].var0);
    *(unsigned char *)(this + 290) = v8;
    *(unsigned char *)(this + 291) = BYTE3(var7[1].var0) != 0;
    *(void *)(this + 320) = LODWORD(var7[1].var3);
    *(void *)(this + 328) = v7;
  }
  else
  {
    *(_WORD *)(this + 290) = 0;
    *(unsigned char *)(this + 292) = 0;
    *(void *)(this + 320) = 0;
    *(void *)(this + 328) = 0;
    if (*(unsigned char *)(this + 150))
    {
      *(unsigned char *)(this + 150) = 0;
      if (!*(unsigned char *)(this + 148))
      {
        *(_DWORD *)(this + 1264) = 0;
        int v9 = 1;
        for (uint64_t i = 570; i != 1290; i += 48)
        {
          this = MTFEFrameFiller::GetFirstTarget((MTFEFrameFiller *)v1, v2);
          *(_WORD *)(v1 + i) = this;
          *(_DWORD *)(v1 + 1264) = v9++;
        }
      }
    }
    uint64_t v8 = 0;
  }
  uint64_t v11 = MEMORY[0x1E4FA5870];
  uint64_t v12 = *(unsigned int *)(MEMORY[0x1E4FA5870] + 4 * v8);
  *(void *)(v1 + 272) = v2;
  uint64_t var9 = v2->var9;
  *(unsigned char *)(v1 + 288) = var9;
  *(unsigned char *)(v1 + 289) = v2->var10 != 0;
  uint64_t v14 = *(unsigned int *)(v11 + 4 * var9);
  *(void *)(v1 + 296) = v14;
  *(void *)(v1 + 304) = v12;
  var6 = v2->var6;
  if (!var6) {
    var6 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
  }
  uint64_t v16 = BYTE2(var6[1].var0);
  *(unsigned char *)(v1 + 293) = v16;
  *(unsigned char *)(v1 + 294) = BYTE3(var6[1].var0) != 0;
  *(void *)(v1 + 312) = *(unsigned int *)(v11 + 4 * v16);
  uint64_t var3_low = LODWORD(var6[1].var3);
  int v18 = MTFEPhonemeDuration::sMaxDur[var9];
  *(void *)(v1 + 336) = var3_low;
  *(_WORD *)(v1 + 350) = (__int16)v18 / 5;
  if (var9 && (v14 & 0x400) == 0)
  {
    uint64_t v19 = ((uint64_t)v5 << 16) / (int)(((26215 * v18) >> 17) + ((26215 * v18) >> 31));
    *(void *)(v1 + 352) = v19;
    *(void *)(v1 + 360) = (v19 >> 1) + 0x8000;
    *(void *)(v1 + 368) = (v19 >> 1) + 26218;
  }
  *(void *)(v1 + 1472) = v1 + 1268;
  if (!*(unsigned char *)(v1 + 148))
  {
    for (uint64_t j = 0; j != 720; j += 48)
      *(_WORD *)(v1 + 562 + j) = 0;
  }
  return this;
}

uint64_t MTFEFrameFiller::InitControlBlocks(MTFEFrameFiller *this)
{
  int v2 = 0;
  int v3 = (char *)this + 544;
  *((_DWORD *)this + 316) = 0;
  do
  {
    int v4 = v2;
    int v5 = &v3[48 * v2];
    int v28 = MTFEFrameFiller::sControlType[v2];
    uint64_t v7 = (unsigned __int16 *)(v5 + 26);
    int v6 = *((__int16 *)v5 + 13);
    *((_WORD *)v5 + 12) = v6;
    uint64_t v8 = v3;
    int v9 = (MTFEPhoneme *)*((void *)this + 30);
    if (v9->var6) {
      var6 = (MTFEPhoneme *)v9->var6;
    }
    else {
      var6 = (MTFEPhoneme *)&MTFEPhonemeFlags::sSIL;
    }
    int FirstTarget = MTFEFrameFiller::GetFirstTarget(this, var6);
    *((_WORD *)v5 + 11) = FirstTarget;
    uint64_t v12 = (__int16 *)(v5 + 22);
    *((_WORD *)v5 + 3) = 0;
    int Target = MTFEFrameFiller::GetTarget(this, v9);
    *(_WORD *)int v5 = Target;
    if (Target > -2)
    {
      uint64_t v14 = &v8[48 * v4];
      *((_WORD *)v14 + 2) = 0;
      *((_WORD *)v14 + 1) = (int)v9->var13;
      if (!v28)
      {
        if (v4 == 1) {
          int v15 = 16375;
        }
        else {
          int v15 = 9825;
        }
        if ((v9->var15 & 0x1C00) != 0) {
          int v16 = v15;
        }
        else {
          int v16 = 6550;
        }
        Target += (v16 * (((FirstTarget + v6) >> 1) - Target)) >> 16;
        *(_WORD *)int v5 = Target;
      }
      *uint64_t v7 = Target;
      int v3 = v8;
      if (!v28) {
LABEL_17:
      }
        *v12 += (6550 * ((__int16)*v7 - *v12)) >> 16;
    }
    else
    {
      MTFEFrameFiller::GetDiphthongs(this, Target & 0x7FFF);
      int v3 = v8;
      if (!v28) {
        goto LABEL_17;
      }
    }
    *((_WORD *)this + 189) = (*(__int16 *)v5 + *((__int16 *)v5 + 12)) >> 1;
    *((_WORD *)this + 188) = 6;
    MTFEFrameFiller::HeadRules(this);
    int v17 = &v3[48 * v4];
    *((_WORD *)v17 + 4) = 0;
    int v18 = v17 + 8;
    int v19 = *((__int16 *)this + 188);
    if (v19 >= 1)
    {
      __int16 v20 = 8 * (*((_WORD *)this + 189) - *(_WORD *)v5);
      *int v18 = v20;
      if ((v20 & 0xFFF8) != 0)
      {
        int v21 = v20 / v19;
        *(_WORD *)&v3[48 * v4 + 10] = v21;
        *int v18 = v21 * v19;
      }
    }
    *((_WORD *)this + 189) = (*v12 + (__int16)*v7) >> 1;
    *((_WORD *)this + 188) = 5;
    MTFEFrameFiller::TailRules(this);
    int v22 = &v3[48 * v4];
    *((_DWORD *)v22 + 3) = 0;
    int v23 = *((unsigned __int16 *)this + 188);
    if ((__int16)v23 >= 1)
    {
      int v24 = *((unsigned __int16 *)this + 189);
      int v25 = *v7;
      if (v24 != v25) {
        *((_WORD *)v22 + 7) = 8 * ((__int16)v24 - (__int16)v25) / v23;
      }
    }
    int v26 = *((_DWORD *)this + 316);
    int v2 = v26 + 1;
    *((_DWORD *)this + 316) = v26 + 1;
  }
  while (v26 < 14);

  return MTFEFrameFiller::InsertBurst((uint64_t)this);
}

uint64_t MTFEFrameFiller::GetFirstTarget(MTFEFrameFiller *this, MTFEPhoneme *a2)
{
  int Target = MTFEFrameFiller::GetTarget(this, a2);
  __int16 v5 = Target;
  if (Target <= -2)
  {
    __int16 v5 = *(_WORD *)(*(void *)(*((void *)this + 185) + 8) + 2 * (Target & 0x7FFF));
    if (!MTFEFrameFiller::sControlType[*((int *)this + 316)]) {
      v5 += MTFEFrameFiller::AdjustColoredTarget(this, a2, 0);
    }
  }
  return v5;
}

uint64_t MTFEFrameFiller::GetTarget(MTFEFrameFiller *this, MTFEPhoneme *a2)
{
  uint64_t v2 = *((int *)this + 316);
  var7 = a2->var7;
  if (!var7) {
    var7 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
  }
  if (a2->var6) {
    var6 = a2->var6;
  }
  else {
    var6 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
  }
  uint64_t var9 = a2->var9;
  uint64_t v6 = BYTE2(var7[1].var0);
  uint64_t v7 = BYTE2(var6[1].var0);
  unsigned int v8 = *(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * var9);
  int v9 = *(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * v6);
  switch(MTFEFrameFiller::sControlType[v2])
  {
    case 0:
    case 1:
      int v10 = (void *)*((void *)this + 185);
      uint64_t v11 = *(void *)(*v10 + 8 * v2);
      LODWORD(v12) = *(unsigned __int16 *)(v11 + 2 * var9);
      if (v12 != 0xFFFF) {
        return (__int16)v12;
      }
      LODWORD(v12) = *(unsigned __int16 *)(v11 + 2 * v7);
      if (v12 != 0xFFFF) {
        goto LABEL_51;
      }
      uint64_t v12 = (uint64_t)var6->var6;
      if (!v12) {
        uint64_t v12 = (uint64_t)&MTFEPhonemeFlags::sSIL;
      }
      LODWORD(v12) = *(unsigned __int16 *)(v11 + 2 * *(unsigned __int8 *)(v12 + 58));
      if (v12 != 0xFFFF) {
        goto LABEL_51;
      }
      LODWORD(v12) = *(__int16 *)(v11 + 2 * v6);
      if (v12 == -1)
      {
        uint64_t v12 = (uint64_t)&MTFEFrameFiller::sDefaultTarg + 2 * v2;
      }
      else
      {
        if ((v12 & 0x80000000) == 0) {
          goto LABEL_53;
        }
        uint64_t v12 = v10[1] + 2 * ((v12 & 0x7FFF) + 2);
      }
      LOWORD(v12) = *(_WORD *)v12;
LABEL_51:
      if ((__int16)v12 <= -2) {
        LOWORD(v12) = *(_WORD *)(v10[1] + 2 * (v12 & 0x7FFF));
      }
LABEL_53:
      uint64_t v24 = v8 & 0xC00;
      if ((v9 & 1) != 0 && v24 == 1024 && v2 == 0) {
        LOWORD(v12) = v12 + 40;
      }
      if ((var9 == 36 || var9 == 29) && v2 == 4 && !MTFEFrameFiller::sRankFwd[v7]) {
        LOWORD(v12) = v12 + 60;
      }
      if (var9 <= 0x25
        && ((1 << var9) & 0x3020000000) != 0
        && v2 == 4
        && ((*(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * v6) & 0x80000) != 0
         || (*(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * v7) & 0x40000) != 0))
      {
        LOWORD(v12) = 1225;
      }
      return (__int16)v12;
    case 2:
      uint64_t v13 = *((void *)this + 5);
      if ((v8 & 0x40) != 0) {
        LOWORD(v12) = *(_WORD *)(v13 + 34);
      }
      else {
        LOWORD(v12) = *(_WORD *)(v13 + 32);
      }
      return (__int16)v12;
    case 3:
      unsigned int var15 = a2->var15;
      if (v2 == 7)
      {
        __int16 v15 = *(char *)(*(void *)(*((void *)this + 185) + 32) + var9);
        __int16 v16 = v15 - 20;
        if ((v9 & 0x40) != 0) {
          __int16 v16 = v15 - 6;
        }
        if ((var15 & 0x4000) != 0) {
          __int16 v15 = v16;
        }
        BOOL v17 = var9 != 34;
        BOOL v18 = (v9 & 4) == 0;
        if (v18) {
          BOOL v17 = 1;
        }
        if ((v18 & (v8 >> 12)) != 0) {
          __int16 v15 = 0;
        }
        if ((var15 & 0x1400) != 0) {
          BOOL v17 = 1;
        }
        if (v17) {
          LOWORD(v12) = v15;
        }
        else {
          LOWORD(v12) = 54;
        }
      }
      else
      {
        if (var9 != 34) {
          goto LABEL_48;
        }
        if (MTFEFrameFiller::sRankFwd[v7]) {
          __int16 v23 = 62;
        }
        else {
          __int16 v23 = 58;
        }
        LOWORD(v12) = v23 - ((var15 & 0x1C00) == 0);
      }
      return (__int16)v12;
    case 4:
      int v19 = MTFEFrameFiller::sNoiseIndex[var9];
      if (v19 == 0xFFFF)
      {
LABEL_48:
        LOWORD(v12) = 0;
      }
      else
      {
        if (BYTE2(var6[1].var0)) {
          __int16 v20 = &MTFEFrameFiller::sRankFwd[v7];
        }
        else {
          __int16 v20 = (unsigned __int8 *)&MTFEFrameFiller::sRankBkwd + v6;
        }
        int v21 = *v20;
        if (v21 == 4) {
          LOBYTE(v21) = 2;
        }
        int v22 = *(__int16 *)(*(void *)(*((void *)this + 185) + 24) + 2 * (__int16)(v2 + 6 * (char)v21 + v19 - 9));
        if (((v22 > 3) & (LODWORD(var6[1].var3) >> 14)) != 0) {
          LOWORD(v12) = v22 - 4;
        }
        else {
          LOWORD(v12) = v22;
        }
      }
      return (__int16)v12;
    default:
      LOWORD(v12) = -1;
      return (__int16)v12;
  }
}

float MTFEFrameFiller::GetDiphthongs(MTFEFrameFiller *this, int a2)
{
  int v3 = (char *)this + 544;
  uint64_t v4 = *((int *)this + 316);
  int v5 = MTFEFrameFiller::sControlType[v4];
  uint64_t v6 = (__int16 *)*((void *)this + 184);
  *((void *)this + 6 * (int)v4 + 72) = v6;
  uint64_t v7 = *(void *)(*((void *)this + 185) + 8);
  int v8 = *(__int16 *)(v7 + 2 * a2);
  __int16 v9 = *(_WORD *)(v7 + 2 * a2);
  uint64_t v10 = *(__int16 *)(v7 + 2 * (__int16)(a2 + 1));
  int v11 = *(__int16 *)(v7 + 2 * (__int16)(a2 + 2));
  uint64_t v12 = *(__int16 *)(v7 + 2 * (__int16)(a2 + 3));
  __int16 v13 = v11;
  uint64_t v14 = *((void *)this + 44);
  uint64_t v15 = *((__int16 *)this + 175);
  unint64_t v16 = ((unsigned __int128)(((v14 * v10) >> 8) * v15 * (__int128)(uint64_t)0xA3D70A3D70A3D70BLL) >> 64)
      + ((v14 * v10) >> 8) * v15;
  int v17 = (__int16)((int)((v16 >> 63) + (v16 >> 6)) >> 8);
  if (v17 <= 1) {
    __int16 v18 = 1;
  }
  else {
    __int16 v18 = v17;
  }
  unint64_t v19 = ((unsigned __int128)(((v14 * v12) >> 8) * v15 * (__int128)(uint64_t)0xA3D70A3D70A3D70BLL) >> 64)
      + ((v14 * v12) >> 8) * v15;
  int v20 = (__int16)((int)((v19 >> 63) + (v19 >> 6)) >> 8);
  if (v20 <= 1) {
    __int16 v21 = 1;
  }
  else {
    __int16 v21 = v20;
  }
  if (!v5)
  {
    int v22 = &v3[48 * (int)v4];
    int v23 = *((__int16 *)v22 + 12);
    unsigned int v24 = (6550 * (v23 - v8)) >> 16;
    if (v23 <= 0) {
      LOWORD(v24) = 0;
    }
    int v25 = (MTFEPhoneme *)*((void *)this + 30);
    int v32 = (char *)this + 544;
    v9 += MTFEFrameFiller::AdjustColoredTarget(this, v25, 0) + v24;
    int v26 = *((__int16 *)v22 + 11);
    if (v26 <= 0) {
      LOWORD(v27) = 0;
    }
    else {
      unsigned int v27 = (6550 * (v26 - v11)) >> 16;
    }
    __int16 v28 = MTFEFrameFiller::AdjustColoredTarget(this, v25, 1);
    int v3 = v32;
    __int16 v13 = v28 + v11 + v27;
  }
  if (v21 == v18) {
    LOWORD(v29) = 0;
  }
  else {
    int v29 = 8 * (v13 - v9) / (__int16)(v21 - v18);
  }
  int v30 = &v3[48 * (int)v4];
  *(_WORD *)int v30 = v9;
  *((_WORD *)v30 + 1) = v18;
  *((_WORD *)v30 + 2) = 0;
  *uint64_t v6 = v21;
  float result = *(float *)(*((void *)this + 30) + 64);
  v6[1] = v29;
  v6[2] = (int)result;
  *((void *)this + 184) = v6 + 4;
  v6[3] = 0;
  *((_WORD *)v30 + 13) = v13;
  return result;
}

_DWORD *MTFEFrameFiller::HeadRules(_DWORD *this)
{
  uint64_t v1 = this;
  uint64_t v2 = (int)this[316];
  int v3 = this + 136;
  uint64_t v4 = (__int16 *)&this[12 * (int)v2 + 136];
  switch(MTFEFrameFiller::sControlType[v2])
  {
    case 0:
      uint64_t v10 = *((void *)this + 37);
      if ((v10 & 0x20) == 0) {
        goto LABEL_61;
      }
      if ((v10 & 0x80) != 0)
      {
        *((_WORD *)this + 189) = (*((__int16 *)this + 189) + SLOWORD(v3[12 * (int)v2 + 6])) >> 1;
        __int16 v22 = 6;
        goto LABEL_60;
      }
      *((_WORD *)this + 188) = 9;
      if ((this[76] & 0x80) == 0)
      {
        if (*((unsigned char *)this + 288) != 34) {
          goto LABEL_61;
        }
        unsigned int v11 = (*((__int16 *)this + 189) + SLOWORD(v3[12 * (int)v2 + 6])) >> 1;
        goto LABEL_21;
      }
      unsigned int v11 = (*((__int16 *)this + 189) + SLOWORD(v3[12 * (int)v2 + 6])) >> 1;
      *((_WORD *)this + 189) = v11;
      int v35 = *((unsigned __int8 *)this + 290);
      if (v35 == 32)
      {
        if (!v2) {
          goto LABEL_61;
        }
        __int16 v22 = 14;
LABEL_60:
        *((_WORD *)this + 188) = v22;
        goto LABEL_61;
      }
      if (v35 == 33 && !v2)
      {
        LOWORD(v11) = v11 + 80;
LABEL_21:
        *((_WORD *)this + 189) = v11;
      }
LABEL_61:
      if (!*((unsigned char *)this + 288))
      {
        *((_WORD *)this + 189) = v3[12 * (int)v2 + 6];
        *((_WORD *)this + 188) = *((_WORD *)this + 173);
        uint64_t v25 = *((void *)this + 38);
        goto LABEL_124;
      }
      int v23 = (MTFEPhoneme *)*((void *)this + 30);
      var7 = (MTFEPhoneme *)v23->var7;
      if (var7)
      {
        MTFEFrameFiller::GetLocus(this, var7, v23, 0);
        this = MTFEFrameFiller::GetLocus(v1, *((MTFEPhoneme **)v1 + 30), *(MTFEPhoneme **)(*((void *)v1 + 30) + 48), 1);
      }
      uint64_t v25 = *((void *)v1 + 38);
      if ((v25 & 0x1004) == 0x1000 && !v1[316]) {
        *((_WORD *)v1 + 189) += 100;
      }
      uint64_t v26 = *((void *)v1 + 37);
      if ((v26 & 0x400) != 0)
      {
        if ((v26 & 0x1000) != 0)
        {
          __int16 v27 = *((_WORD *)v1 + 173);
        }
        else if (v1[316])
        {
          __int16 v27 = 6;
        }
        else
        {
          __int16 v27 = 4;
        }
        *((_WORD *)v1 + 188) = v27;
      }
      if ((v26 & 0x40) != 0)
      {
        int v33 = v1[316];
        if (v33) {
          __int16 v34 = *((_WORD *)v1 + 173);
        }
        else {
          __int16 v34 = 0;
        }
        *((_WORD *)v1 + 188) = v34;
        int v36 = *((unsigned __int8 *)v1 + 288);
        if (v36 != 36)
        {
          if (v36 == 35)
          {
            if (v33 == 1 && (v25 & 0x80000) != 0)
            {
              __int16 v37 = *((_WORD *)v1 + 189) - 150;
LABEL_123:
              *((_WORD *)v1 + 189) = v37;
              goto LABEL_124;
            }
            goto LABEL_124;
          }
          if (v36 != 29) {
            goto LABEL_124;
          }
        }
        if (MTFEFrameFiller::sRankBkwd[*((unsigned __int8 *)v1 + 290)]) {
          goto LABEL_124;
        }
        if (v33 == 2)
        {
          __int16 v38 = *((_WORD *)v1 + 189);
          goto LABEL_122;
        }
        if (v33 == 1)
        {
          __int16 v38 = *((_WORD *)v1 + 189);
          if ((v25 & 0x80000) != 0)
          {
            __int16 v37 = v38 - 200;
            goto LABEL_123;
          }
LABEL_122:
          __int16 v37 = v38 - 100;
          goto LABEL_123;
        }
      }
LABEL_124:
      if ((v25 & 0x400) == 0
        && MTFEFrameFiller::sRankBkwd[*((unsigned __int8 *)v1 + 290)] != 3
        && *((__int16 *)v1 + 188) >= 1)
      {
        unsigned int v16 = ((v1[90] * *((unsigned __int16 *)v1 + 188)) >> 16) + 1;
        goto LABEL_128;
      }
LABEL_129:
      int v39 = *((__int16 *)v1 + 188);
      int v40 = *((__int16 *)v1 + 173);
      if (v39 > v40)
      {
        *((_WORD *)v1 + 188) = *((_WORD *)v1 + 173);
        int v39 = v40;
      }
      if (v39 <= 26)
      {
        if ((v39 & 0x80000000) == 0) {
          return this;
        }
        __int16 v41 = 0;
      }
      else
      {
        __int16 v41 = 26;
      }
      *((_WORD *)v1 + 188) = v41;
      return this;
    case 1:
      uint64_t v12 = *((void *)this + 37);
      if ((v12 & 4) == 0)
      {
        __int16 v13 = 4;
LABEL_32:
        *((_WORD *)this + 188) = v13;
        goto LABEL_74;
      }
      if (v2 != 3 || (*((void *)this + 38) & 4) != 0)
      {
        __int16 v13 = 8;
        goto LABEL_32;
      }
      *((_WORD *)this + 188) = 10;
      *((_WORD *)this + 189) = *v4 + (*((__int16 *)this + 272) >> 3);
LABEL_74:
      int v28 = *((unsigned __int8 *)this + 290);
      if (*((unsigned char *)this + 290))
      {
        if (*((unsigned char *)this + 288)) {
          goto LABEL_83;
        }
        *((_WORD *)this + 189) = LOWORD(v3[12 * (int)v2 + 6]) + 200;
        if ((*(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * *((unsigned __int8 *)this + 292)) & 4) == 0
          || v2 != 3
          || (*((void *)this + 40) & 0x4000) == 0)
        {
LABEL_82:
          *((_WORD *)this + 188) = 10;
LABEL_83:
          if ((this[76] & 0x40) == 0) {
            goto LABEL_92;
          }
          __int16 v30 = *v4;
          *((_WORD *)this + 189) = *v4;
          if (v2 == 3)
          {
            __int16 v31 = 20;
            __int16 v32 = 70;
          }
          else
          {
            if (v2 != 4
              || v28 != 36 && v28 != 29
              || !MTFEFrameFiller::sRankFwd[*((unsigned __int8 *)this + 288)])
            {
LABEL_92:
              if ((v12 & 0x40) != 0) {
                *((_WORD *)this + 188) = 0;
              }
              goto LABEL_129;
            }
            __int16 v31 = 12;
            __int16 v32 = 60;
          }
          *((_WORD *)this + 189) = v30 + v32;
          *((_WORD *)this + 188) = v31;
          goto LABEL_92;
        }
        __int16 v29 = 250;
      }
      else
      {
        __int16 v29 = *v4 + 200;
      }
      *((_WORD *)this + 189) = v29;
      goto LABEL_82;
    case 2:
      uint64_t v14 = *((void *)this + 37);
      if ((this[76] & 0x40) != 0)
      {
        if ((v14 & 0x40) == 0)
        {
          *((_WORD *)this + 189) = *(_WORD *)(*((void *)this + 5) + 32)
                                 + ((*(__int16 *)(*((void *)this + 5) + 34)
                                                 - *(__int16 *)(*((void *)this + 5) + 32)) >> 1);
          LOWORD(v16) = 16;
          goto LABEL_128;
        }
      }
      else if ((v14 & 0x40) == 0)
      {
        goto LABEL_129;
      }
      __int16 v17 = *(_WORD *)(*((void *)this + 5) + 34);
      goto LABEL_52;
    case 3:
    case 4:
      __int16 v5 = *v4;
      int v6 = *((__int16 *)this + 189);
      if (v6 < (__int16)(*v4 - 10) || (*((unsigned char *)this + 305) & 0x10) != 0 || *((unsigned char *)this + 290) == 53)
      {
        LOWORD(v6) = v5 - 10;
        *((_WORD *)this + 189) = v5 - 10;
        uint64_t v7 = *((void *)this + 37);
        if ((v7 & 0x400) == 0) {
          *((_WORD *)this + 188) = 4;
        }
        if (v2 == 7)
        {
          if ((v7 & 4) != 0 && !*((unsigned char *)this + 290))
          {
            LOWORD(v6) = v5 - 18;
            *((_WORD *)this + 189) = v5 - 18;
            *((_WORD *)this + 188) = 9;
          }
          uint64_t v8 = *((void *)this + 38);
          if ((v8 & 0x1400) != 0)
          {
            if ((v8 & 0x1000) != 0) {
              __int16 v9 = -5;
            }
            else {
              __int16 v9 = -4;
            }
            LOWORD(v6) = v9 + v5;
            *((_WORD *)this + 189) = v6;
          }
        }
      }
      else
      {
        uint64_t v7 = *((void *)this + 37);
      }
      uint64_t v18 = *((void *)this + 38);
      if ((v7 & 4) != 0 && (v18 & 0x40) != 0) {
        *((_WORD *)this + 188) = 0;
      }
      if (v2 == 7 && (v7 & 0x40) != 0 && (v18 & 4) != 0) {
        *((_WORD *)this + 188) = 0;
      }
      __int16 v19 = v3[12 * (int)v2 + 6];
      if ((__int16)v6 < (__int16)(v19 - 10))
      {
        *((_WORD *)this + 189) = v19 - 13;
        if (!*((unsigned char *)this + 288)) {
          *((_WORD *)this + 188) = 14;
        }
      }
      if (v2 == 7)
      {
        if ((v7 & 0x200) != 0)
        {
          LOWORD(v16) = 2;
LABEL_128:
          *((_WORD *)v1 + 188) = v16;
        }
      }
      else if (v2 == 8)
      {
        if ((v18 & 0x404) == 4)
        {
          unsigned int v20 = *((unsigned __int8 *)this + 288);
          if (v20 <= 0x2C)
          {
            if (((1 << v20) & 0x154000000000) != 0)
            {
              int v21 = 3145737;
            }
            else
            {
              if (*((unsigned char *)this + 288)) {
                goto LABEL_129;
              }
              int v21 = 3407888;
            }
            this[94] = v21;
          }
        }
      }
      else if (v2 == 10 && (v7 & 0x1000000) != 0)
      {
        *((_WORD *)this + 188) = *((_WORD *)this + 173) - 2;
        __int16 v17 = v5 - 30;
LABEL_52:
        *((_WORD *)this + 189) = v17;
      }
      goto LABEL_129;
    default:
      goto LABEL_129;
  }
}

_DWORD *MTFEFrameFiller::TailRules(_DWORD *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this + 136;
  uint64_t v3 = (int)this[316];
  switch(MTFEFrameFiller::sControlType[v3])
  {
    case 0:
      uint64_t v13 = *((void *)this + 37);
      if ((v13 & 0x10) == 0) {
        goto LABEL_95;
      }
      *((_WORD *)this + 188) = 9;
      if ((v13 & 0x80) != 0)
      {
        *((_WORD *)this + 189) = (*((__int16 *)this + 189) + SHIWORD(v2[12 * (int)v3 + 6])) >> 1;
        if ((this[78] & 0x80) != 0) {
          __int16 v27 = 8;
        }
        else {
          __int16 v27 = 4;
        }
        goto LABEL_90;
      }
      if ((this[78] & 0x80) == 0)
      {
        if (*((unsigned char *)this + 293) != 34) {
          goto LABEL_95;
        }
        unsigned int v14 = (*((__int16 *)this + 189) + SHIWORD(v2[12 * (int)v3 + 6])) >> 1;
        goto LABEL_94;
      }
      if (v3 == 2)
      {
        __int16 v27 = 12;
LABEL_90:
        *((_WORD *)this + 188) = v27;
        goto LABEL_95;
      }
      if (!v3 && *((unsigned char *)this + 293) == 33)
      {
        LOWORD(v14) = *((_WORD *)this + 189) + 80;
LABEL_94:
        *((_WORD *)this + 189) = v14;
      }
LABEL_95:
      if (!*((unsigned char *)this + 293))
      {
        *((_WORD *)this + 188) = 0;
        goto LABEL_114;
      }
      __int16 v29 = (MTFEPhoneme *)*((void *)this + 30);
      if (v29->var6) {
        var6 = (MTFEPhoneme *)v29->var6;
      }
      else {
        var6 = (MTFEPhoneme *)&MTFEPhonemeFlags::sSIL;
      }
      MTFEFrameFiller::GetLocus(this, var6, v29, 1);
      __int16 v31 = (MTFEPhoneme *)*((void *)v1 + 30);
      if (v31->var6) {
        __int16 v32 = (MTFEPhoneme *)v31->var6;
      }
      else {
        __int16 v32 = (MTFEPhoneme *)&MTFEPhonemeFlags::sSIL;
      }
      this = MTFEFrameFiller::GetLocus(v1, v31, v32, 0);
      uint64_t v13 = *((void *)v1 + 37);
      if ((v13 & 0x400) != 0)
      {
        int v33 = v1[316];
        __int16 v34 = v33 ? 6 : 4;
        *((_WORD *)v1 + 188) = v34;
        if ((v13 & 0x1000) != 0)
        {
          *((_WORD *)v1 + 188) = *((_WORD *)v1 + 173);
          if ((v13 & 4) == 0 && !v33) {
            *((_WORD *)v1 + 189) += 100;
          }
        }
      }
      if ((v13 & 0x40) != 0)
      {
        int v35 = v1[316];
        if (v35) {
          __int16 v36 = *((_WORD *)v1 + 173);
        }
        else {
          __int16 v36 = 0;
        }
        *((_WORD *)v1 + 188) = v36;
        int v37 = *((unsigned __int8 *)v1 + 288);
        if (v37 == 36)
        {
LABEL_122:
          if (MTFEFrameFiller::sRankFwd[*((unsigned __int8 *)v1 + 293)]) {
            goto LABEL_114;
          }
          if (v35 == 2)
          {
            __int16 v38 = *((_WORD *)v1 + 189) - 100;
            goto LABEL_141;
          }
          if (v35 == 1)
          {
            __int16 v39 = *((_WORD *)v1 + 189);
            *((_WORD *)v1 + 189) = v39 - 100;
            if ((*((unsigned char *)v1 + 314) & 4) != 0)
            {
              __int16 v38 = v39 - 200;
              goto LABEL_141;
            }
          }
          goto LABEL_114;
        }
        if (v37 != 35)
        {
          if (v37 != 29) {
            goto LABEL_114;
          }
          goto LABEL_122;
        }
        if (v35 == 1 && (*((unsigned char *)v1 + 314) & 4) != 0)
        {
          __int16 v38 = *((_WORD *)v1 + 189) - 150;
LABEL_141:
          *((_WORD *)v1 + 189) = v38;
        }
      }
LABEL_114:
      if ((v13 & 0x400) == 0
        && MTFEFrameFiller::sRankFwd[*((unsigned __int8 *)v1 + 293)] != 3
        && *((__int16 *)v1 + 188) >= 1)
      {
        unsigned int v16 = ((v1[92] * *((unsigned __int16 *)v1 + 188)) >> 16) + 1;
        goto LABEL_132;
      }
LABEL_133:
      int v40 = *((__int16 *)v1 + 188);
      int v41 = *((__int16 *)v1 + 173);
      if (v40 > v41)
      {
        *((_WORD *)v1 + 188) = *((_WORD *)v1 + 173);
        int v40 = v41;
      }
      if (v40 < 27)
      {
        LOWORD(v2[12 * (int)v3 + 4]) = v41 - v40;
        if (v40 < 0) {
          *((_WORD *)v1 + 188) = 0;
        }
      }
      else
      {
        *((_WORD *)v1 + 188) = 26;
        LOWORD(v2[12 * (int)v3 + 4]) = v41 - 26;
      }
      return this;
    case 1:
      uint64_t v15 = *((void *)this + 37);
      if ((v15 & 4) != 0)
      {
        *((_WORD *)this + 188) = 8;
        if (v3 == 3 && (*((void *)this + 39) & 4) == 0)
        {
          *((_WORD *)this + 188) = 10;
          *((_WORD *)this + 189) = HIWORD(v2[12 * (int)v3 + 6]) + (*((__int16 *)this + 272) >> 3);
        }
      }
      else
      {
        *((_WORD *)this + 188) = 4;
      }
      int v22 = *((unsigned __int8 *)this + 293);
      if (*((unsigned char *)this + 293))
      {
        if (*((unsigned char *)this + 288)) {
          goto LABEL_71;
        }
        int v23 = (_WORD *)&v2[12 * (int)v3 + 5] + 1;
      }
      else
      {
        int v23 = (_WORD *)&v2[12 * (int)v3 + 6] + 1;
      }
      *((_WORD *)this + 189) = *v23 + 200;
      *((_WORD *)this + 188) = 10;
LABEL_71:
      if ((this[78] & 0x40) == 0) {
        goto LABEL_85;
      }
      __int16 v24 = HIWORD(v2[12 * (int)v3 + 6]);
      *((_WORD *)this + 189) = v24;
      if (v3 == 3)
      {
        __int16 v25 = 20;
        __int16 v26 = 100;
      }
      else
      {
        if (v3 != 4 || v22 != 36 && v22 != 29 || !MTFEFrameFiller::sRankFwd[*((unsigned __int8 *)this + 288)])
        {
LABEL_85:
          if ((v15 & 0x40) != 0) {
            *((_WORD *)this + 188) = 0;
          }
          goto LABEL_133;
        }
        __int16 v25 = 12;
        __int16 v26 = 60;
      }
      *((_WORD *)this + 189) = v24 + v26;
      *((_WORD *)this + 188) = v25;
      goto LABEL_85;
    case 2:
      if ((this[78] & 0x40) != 0 && (this[74] & 0x40) == 0)
      {
        *((_WORD *)this + 189) = *(_WORD *)(*((void *)this + 5) + 34);
        LOWORD(v16) = 16;
        goto LABEL_132;
      }
      goto LABEL_133;
    case 3:
    case 4:
      int v4 = SHIWORD(v2[12 * (int)v3 + 5]);
      __int16 v5 = v4 - 10;
      int v6 = *((__int16 *)this + 189);
      if (v6 < (__int16)(HIWORD(v2[12 * (int)v3 + 5]) - 10))
      {
        int v6 = v5;
        *((_WORD *)this + 189) = v5;
        if (!*((unsigned char *)this + 288)) {
          *((_WORD *)this + 188) = 14;
        }
      }
      BOOL v7 = v6 < v4 && v3 == 7;
      if (v7
        && ((HIDWORD(v9) = *((unsigned __int8 *)this + 288) - 39, LODWORD(v9) = HIDWORD(v9), unsigned int v8 = v9 >> 1, v8 >= 4)
          ? (BOOL v10 = v8 == 7)
          : (BOOL v10 = 1),
            !v10 && (*((_WORD *)this + 188) = 0, uint64_t v28 = *((void *)this + 37), (v28 & 0x1001000) != 0)))
      {
        if ((v28 & 4) != 0)
        {
          *((_WORD *)this + 189) = HIWORD(v2[12 * (int)v3 + 6]) - 3;
          LOWORD(v16) = 9;
        }
        else
        {
          LOWORD(v16) = 0;
        }
LABEL_132:
        *((_WORD *)v1 + 188) = v16;
      }
      else
      {
        uint64_t v11 = *((void *)this + 37);
        if ((v11 & 4) != 0 && (this[78] & 0x40) != 0) {
          *((_WORD *)this + 188) = 0;
        }
        if ((v11 & 0x40) != 0)
        {
          if ((v11 & 0x400) != 0 || (*((void *)this + 39) & 4) == 0 || (*((unsigned char *)this + 337) & 0x40) != 0) {
            __int16 v12 = 8;
          }
          else {
            __int16 v12 = 0;
          }
          *((_WORD *)this + 188) = v12;
        }
        __int16 v17 = HIWORD(v2[12 * (int)v3 + 6]);
        __int16 v18 = v17 - 10;
        if ((v11 & 0x200) != 0)
        {
          *((_WORD *)this + 188) = 3;
          if ((v11 & 0x1000) != 0 || *((unsigned __int8 *)this + 288) - 55 <= 2) {
            __int16 v18 = v17;
          }
        }
        if (v6 < v18)
        {
          LOWORD(v6) = v18 - 3;
          *((_WORD *)this + 189) = v18 - 3;
          *((_WORD *)this + 188) = 4;
        }
        if (v3 == 7 && ((__int16)v6 < v18 || v18 >= 1 && (*((unsigned char *)this + 337) & 0x40) != 0))
        {
          *((_WORD *)this + 189) = v18 + 3;
          if (!*((unsigned char *)this + 293) || (*((unsigned char *)this + 337) & 0x40) != 0) {
            *((_WORD *)this + 188) = 15;
          }
        }
        unsigned int v19 = *((unsigned __int8 *)this + 293);
        if (v19 >= 0x2E)
        {
          if (v3 == 7 && (v11 & 0x40) != 0) {
            goto LABEL_133;
          }
          *((_WORD *)this + 188) = 0;
        }
        if (v3 == 8)
        {
          unsigned int v20 = *((unsigned __int8 *)this + 288);
          if (v20 <= 0x2C && ((1 << v20) & 0x154000000000) != 0 && (*((void *)this + 39) & 0x404) == 4) {
            this[94] = 3407880;
          }
          if ((v11 & 1) != 0 && !v19) {
            this[94] = 3407898;
          }
        }
      }
      goto LABEL_133;
    default:
      goto LABEL_133;
  }
}

uint64_t MTFEFrameFiller::InsertBurst(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 296);
  if ((v1 & 0x200) != 0)
  {
    int v2 = 103 * MTFEFrameFiller::sBurstDur[*(unsigned __int8 *)(this + 288)];
    int v3 = ((v2 >> 15) & 1) + (v2 >> 9);
    if ((*(void *)(this + 296) & 0x1004) == 0x1000 && (*(_WORD *)(this + 312) & 0x1040) != 0)
    {
      v3 >>= 1;
      if ((*(unsigned char *)(this + 337) & 0x14) != 0) {
        LOWORD(v3) = 0;
      }
    }
    uint64_t v4 = 0;
    __int16 v5 = *(_WORD *)(this + 346) - v3;
    if (((v5 > 16) & BYTE3(v1)) != 0) {
      __int16 v5 = 16;
    }
    do
    {
      uint64_t v6 = this + v4;
      *(_WORD *)(v6 + 994) = v5;
      *(_WORD *)(v6 + 996) = 0;
      v4 += 48;
    }
    while (v4 != 288);
  }
  uint64_t v7 = *(void *)(this + 304);
  if ((v1 & 0x10) != 0 && (*(void *)(this + 304) & 0x1004) == 0x1000)
  {
    *(_WORD *)(this + 900) = 0;
    if (MTFEFrameFiller::sRankFwd[*(unsigned __int8 *)(this + 293)]) {
      __int16 v8 = 54;
    }
    else {
      __int16 v8 = 48;
    }
    __int16 v9 = v8 - 3;
    if (v1)
    {
      __int16 v9 = v8;
      int v10 = 8;
    }
    else
    {
      int v10 = 5;
    }
    *(_WORD *)(this + 948) = v9;
    if ((v1 & 0x80) != 0 || *(unsigned char *)(this + 288) == 12) {
      *(_WORD *)(this + 948) = v9 + 3;
    }
    if (*(unsigned char *)(this + 292) == 42)
    {
      BOOL v11 = (*(unsigned char *)(this + 328) & 0xF) == 0;
      int v12 = 2;
    }
    else
    {
      BOOL v11 = (v1 & 1) == 0;
      int v10 = 12;
      int v12 = 5;
    }
    if (!v11) {
      int v12 = v10;
    }
    int v13 = *(__int16 *)(this + 346);
    if (v12 >= v13) {
      LOWORD(v12) = v13 - 1;
    }
    if ((v1 & 1) != 0 && (*(_DWORD *)(*(void *)(this + 240) + 72) & 0x1400) != 0 && (__int16)v12 > v13 >> 1) {
      LOWORD(v12) = *(__int16 *)(this + 346) >> 1;
    }
    if ((*(_DWORD *)(*(void *)(this + 240) + 72) & 0x4000) != 0)
    {
      LOWORD(v12) = *(_WORD *)(this + 346);
      *(_WORD *)(this + 948) = 0;
    }
    *(_WORD *)(this + 898) = v12;
    *(_WORD *)(this + 946) = v12;
    *(_WORD *)(this + 706) = v12;
    *(_WORD *)(this + 754) = v12;
    *(_WORD *)(this + 708) = *(_WORD *)(this + 688) + 250;
    *(_WORD *)(this + 756) = *(_WORD *)(this + 736) + 70;
  }
  uint64_t v16 = v7 & 4;
  BOOL v17 = (~v1 & 0x1004) != 0 || v16 == 0;
  if (!v17 && (*(unsigned char *)(this + 312) & 4) == 0 && *(unsigned char *)(this + 288) != 54)
  {
    __int16 v18 = *(_WORD *)(this + 346);
    *(_WORD *)(this + 898) = v18 - 2;
    *(_WORD *)(this + 706) = v18;
    *(_WORD *)(this + 754) = v18;
    *(_WORD *)(this + 802) = v18;
    *(_WORD *)(this + 900) = 53;
    *(_WORD *)(this + 708) = 1000;
    *(_WORD *)(this + 756) = 1000;
    *(_WORD *)(this + 804) = 1200;
  }
  return this;
}

uint64_t MTFEFrameFiller::ScaleToPhonDur(MTFEFrameFiller *this, int a2)
{
  uint64_t v2 = ((*((void *)this + 44) * a2) >> 8) * *((__int16 *)this + 175);
  unint64_t v3 = ((unsigned __int128)(v2 * (__int128)(uint64_t)0xA3D70A3D70A3D70BLL) >> 64) + v2;
  int v4 = (__int16)((int)((v3 >> 63) + (v3 >> 6)) >> 8);
  if (v4 <= 1) {
    return 1;
  }
  else {
    return v4;
  }
}

uint64_t MTFEFrameFiller::AdjustColoredTarget(MTFEFrameFiller *this, MTFEPhoneme *a2, int a3)
{
  int var9 = a2->var9;
  var6 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
  var7 = a2->var7;
  if (!var7) {
    var7 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
  }
  uint64_t v6 = BYTE2(var7[1].var0);
  if (a2->var6) {
    var6 = a2->var6;
  }
  uint64_t v7 = BYTE2(var6[1].var0);
  int v8 = *(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * a2->var9);
  int v9 = *(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * v6);
  int v10 = *(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * v7);
  int v11 = *((_DWORD *)this + 316);
  if (v11 == 1)
  {
    BOOL v13 = (var9 & 0xFE) != 0xE || a3 <= 0;
    if (v13) {
      __int16 v14 = 0;
    }
    else {
      __int16 v14 = -250;
    }
    if ((v8 & 0x200000) != 0) {
      __int16 v15 = -150;
    }
    else {
      __int16 v15 = v14;
    }
    if (v7 == 27) {
      __int16 v16 = v15;
    }
    else {
      __int16 v16 = 0;
    }
    if ((*(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * a2->var9) & 0x200000) != 0) {
      __int16 v17 = -150;
    }
    else {
      __int16 v17 = v16;
    }
    BOOL v13 = v6 > 0x21;
    uint64_t v18 = (1 << v6) & 0x248000000;
    if (v13 || v18 == 0) {
      __int16 v17 = v16;
    }
    if ((v9 & 0x2000) != 0 && var9 == 18) {
      __int16 v21 = 200;
    }
    else {
      __int16 v21 = v17;
    }
    BOOL v23 = a3 > 0 && (var9 & 0xFE) == 18;
    if (v23 && (v10 & 0x2000) != 0) {
      __int16 v24 = v21 + 200;
    }
    else {
      __int16 v24 = v21;
    }
    if ((a2->var15 & 0x1C00) != 0)
    {
      int v12 = v24 >> 1;
    }
    else if (var9 != 19 || a3 <= 0)
    {
      int v12 = (v24 >> 1) + v24;
    }
    else
    {
      int v12 = 400;
    }
  }
  else if (v11 == 2)
  {
    int v12 = 0;
    if (var9 != 12 && (v8 & 1) != 0)
    {
      if (((v9 | v10) & 0x2000000) != 0) {
        int v12 = -150;
      }
      else {
        int v12 = 0;
      }
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v12 >= 400) {
    return 400;
  }
  else {
    return (__int16)v12;
  }
}

_DWORD *MTFEFrameFiller::GetLocus(_DWORD *this, MTFEPhoneme *a2, MTFEPhoneme *a3, int a4)
{
  unsigned int v4 = this[316];
  if (v4 <= 2)
  {
    uint64_t var9 = a2->var9;
    uint64_t v6 = &MTFEFrameFiller::sRankBkwd;
    uint64_t v7 = a3->var9;
    if (a4) {
      int v8 = &MTFEFrameFiller::sRankBkwd;
    }
    else {
      int v8 = MTFEFrameFiller::sRankFwd;
    }
    if (a4) {
      uint64_t v6 = MTFEFrameFiller::sRankFwd;
    }
    int v9 = v8[v7];
    if (v6[var9] == 3 && v9 != 3)
    {
      int v11 = this;
      int v12 = *(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * v7);
      int v13 = *(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * var9);
      if (a4) {
        this = (_DWORD *)MTFEFrameFiller::GetLastTarget((MTFEFrameFiller *)this, a3);
      }
      else {
        this = (_DWORD *)MTFEFrameFiller::GetFirstTarget((MTFEFrameFiller *)this, a3);
      }
      __int16 v14 = (unsigned __int16 *)&MTFEFrameFiller::sBackLoci;
      if (v9 == 1) {
        __int16 v14 = (unsigned __int16 *)&MTFEFrameFiller::sMidLoci;
      }
      if (!v9) {
        __int16 v14 = (unsigned __int16 *)&MTFEFrameFiller::sFrontLoci;
      }
      int v15 = v14[var9];
      if (v15 != 0xFFFF)
      {
        __int16 v16 = v15 + 3 * v4;
        uint64_t v17 = *(void *)(*((void *)v11 + 185) + 16);
        __int16 v18 = v16 + 2;
        int v19 = *(unsigned __int16 *)(v17 + 2 * (__int16)(v16 + 1));
        __int16 v20 = *(_WORD *)(*((void *)v11 + 5) + 38) + *(_WORD *)(v17 + 2 * v16);
        LODWORD(v17) = 26215 * *(__int16 *)(v17 + 2 * v18);
        unsigned int v21 = ((int)v17 >> 17) + (v17 >> 31);
        if (v13 & 0x40 | v12 & 0x40000) {
          __int16 v22 = 0;
        }
        else {
          __int16 v22 = v21 >> 2;
        }
        *((_WORD *)v11 + 188) = v21 - v22;
        if (v4 == 1 && v9 == 4)
        {
          int v19 = ((__int16)v19 >> 1) + 50;
          if ((v12 & 0x40000) == 0) {
            goto LABEL_29;
          }
        }
        else if (v4 != 1 || (v12 & 0x40000) == 0)
        {
          goto LABEL_29;
        }
        int v19 = v19 - ((__int16)v19 >> 2) + 25;
LABEL_29:
        unint64_t v23 = 1374389535 * ((int)this - v20) * (__int16)v19;
        *((_WORD *)v11 + 189) = v20 + (v23 >> 37) + (v23 >> 63);
      }
    }
  }
  return this;
}

uint64_t MTFEFrameFiller::GetLastTarget(MTFEFrameFiller *this, MTFEPhoneme *a2)
{
  int Target = MTFEFrameFiller::GetTarget(this, a2);
  __int16 v5 = Target;
  if (Target <= -2)
  {
    __int16 v5 = *(_WORD *)(*(void *)(*((void *)this + 185) + 8) + 2 * ((Target & 0x7FFFu) + 2));
    if (!MTFEFrameFiller::sControlType[*((int *)this + 316)]) {
      v5 += MTFEFrameFiller::AdjustColoredTarget(this, a2, 1);
    }
  }
  return v5;
}

uint64_t MTFEFrameFiller::ProcessPitchEvents(uint64_t this)
{
  int v1 = *(__int16 *)(this + 526);
  int v2 = *(__int16 *)(this + 528);
  if (v1 >= v2)
  {
    unint64_t v3 = *(void *)(*(void *)(this + 8) + 16);
    unint64_t v4 = *(void *)(this + 176);
    do
    {
      if (v4 >= v3) {
        return this;
      }
      int v6 = *(__int16 *)(v4 + 6);
      v4 += 6;
      int v5 = v6;
      int v7 = *(__int16 *)(v4 - 4);
      __int16 v8 = *(_WORD *)(v4 - 2);
      LOWORD(v1) = v1 - v2;
      *(_WORD *)(this + 526) = v1;
      *(void *)(this + 176) = v4;
      *(_WORD *)(this + 528) = v6;
      if ((v8 & 8) != 0)
      {
        *(void *)(this + 416) = 0;
      }
      else
      {
        if ((v8 & 0x10) != 0)
        {
          uint64_t v9 = *(void *)(this + 16);
          *(void *)(this + 416) = (*(__int16 *)(v9 + 26) - *(__int16 *)(v9 + 28)) << 14;
          int v10 = *(__int16 *)(v9 + 30);
          if (v10 <= 15)
          {
            LOWORD(v10) = v10 + 1;
            *(_WORD *)(v9 + 30) = v10;
          }
          *(void *)(v9 + 32) = *(void *)(v9 + 8 * (__int16)v10 + 56);
          goto LABEL_15;
        }
        if ((v8 & 2) == 0)
        {
          if ((v8 & 0x20) != 0)
          {
            *(_WORD *)(this + 502) += v7;
          }
          else if (v8)
          {
            *(_WORD *)(this + 536) = v7;
            *(_WORD *)(this + 538) = *(_WORD *)(*(void *)(this + 16) + 22);
          }
          else
          {
            *(_WORD *)(this + 534) = 2 * v7;
          }
          goto LABEL_15;
        }
        *(_WORD *)(this + 500) += v7;
        int v11 = *(__int16 *)(this + 536);
        if (v7 < 0)
        {
          if (v11 >= 1) {
LABEL_22:
          }
            *(_WORD *)(this + 536) = 0;
        }
        else if (v11 < 0)
        {
          goto LABEL_22;
        }
      }
LABEL_15:
      LOWORD(v2) = v5;
    }
    while ((__int16)v1 >= v5);
  }
  return this;
}

uint64_t MTFEFrameFiller::OldNonSingingPitch(MTFEFrameFiller *this)
{
  unint64_t v2 = *((void *)this + 52);
  int v3 = *(unsigned __int16 *)(*((void *)this + 30) + 60);
  int v4 = *((unsigned __int16 *)this + 257) - (v2 >> 16) + v3;
  if (*((__int16 *)this + 258) < (__int16)(*((_WORD *)this + 257) - WORD1(v2) + v3)) {
    *((void *)this + 52) = *(void *)(*((void *)this + 2) + 32) + v2;
  }
  int v5 = (__int16)v4;
  __int16 v6 = *((_WORD *)this + 269) - 1;
  *((_WORD *)this + 269) = v6;
  if (v6 < 0) {
    *((_WORD *)this + 268) = 0;
  }
  int v7 = *((__int16 *)this + 261);
  int v8 = *((__int16 *)this + 259);
  if (*((__int16 *)this + 265) + v8 < v7)
  {
    uint64_t v9 = *((void *)this + 32);
    if (v9)
    {
      *((_WORD *)this + 261) = v7 - v8;
      *((_WORD *)this + 259) = (int)*(float *)(v9 + 64);
      *((_WORD *)this + 265) = 0;
      uint64_t v10 = *(unsigned __int8 *)(v9 + 58);
      int v11 = *(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * v10);
      int v12 = *(unsigned __int8 **)(v9 + 40);
      int v13 = (unsigned __int8 *)&MTFEPhonemeFlags::sSIL;
      if (v12) {
        int v13 = v12;
      }
      int v14 = *(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * v13[58]);
      *((void *)this + 32) = v12;
      __int16 v15 = MTFEFrameFiller::sPhonPitchTbl[v10];
      *((_WORD *)this + 248) = v15 >> 1;
      if ((v14 & 4) == 0) {
        *((_WORD *)this + 265) = 5;
      }
      if ((v11 & 4) != 0)
      {
        *((_WORD *)this + 249) = v15 & 0xFFFE;
        *((_WORD *)this + 252) = 0;
      }
      else
      {
        *((_WORD *)this + 252) = 8 * (v15 >> 1);
        *((_WORD *)this + 249) = 0;
        if ((v11 & 0x1000) != 0) {
          *((_WORD *)this + 265) = 6;
        }
        else {
          *((_WORD *)this + 265) = 0;
        }
      }
    }
  }
  MTFEFrameFiller::PhonBoundaryPitch((uint64_t)this);
  int v16 = *((__int16 *)this + 249);
  unsigned int v17 = 8
      * (v16
       + (((*((__int16 *)this + 268) + *((__int16 *)this + 250) + *((__int16 *)this + 267) + v5)
                       * *((_DWORD *)this + 110)) >> 16));
  if (*((unsigned char *)this + 513))
  {
    uint64_t v18 = *(__int16 *)(*((void *)this + 2) + 190);
    *((unsigned char *)this + 513) = 0;
    uint64_t v19 = v18;
  }
  else
  {
    uint64_t v19 = *((void *)this + 53);
    uint64_t v18 = *((void *)this + 54);
  }
  uint64_t v20 = *(__int16 *)(*((void *)this + 5) + 78);
  uint64_t v21 = (0x10000 - v20) * v19 + (int)v20 * (uint64_t)(__int16)v17;
  uint64_t v22 = v18 * (0x10000 - v20) + (*((__int16 *)this + 252) + (v21 >> 16)) * v20;
  *((void *)this + 53) = v21 >> 16;
  *((void *)this + 54) = v22 >> 16;
  unint64_t v23 = (unint64_t)v22 >> 19;
  *((_WORD *)this + 253) = (unint64_t)v22 >> 19;
  *((_WORD *)this + 249) = (64190 * v16) >> 16;
  int v24 = (__int16)(*((_WORD *)this + 262) - *((_WORD *)this + 270));
  if (v24 < 0) {
    int v24 = -v24;
  }
  if ((__int16)v24 <= 9)
  {
    if (*((unsigned char *)this + 512)) {
      __int16 v25 = -10;
    }
    else {
      __int16 v25 = -80;
    }
    if (!*((unsigned char *)this + 512)) {
      LOWORD(v24) = 8 * v24;
    }
    LOWORD(v23) = v25 + v24 + v23;
    *((_WORD *)this + 253) = v23;
  }
  return (__int16)(*(_WORD *)(*((void *)this + 2) + 190)
                               + ((*(_DWORD *)(*((void *)this + 2) + 200) * (__int16)v23) >> 16));
}

uint64_t MTFEFrameFiller::PhonBoundaryPitch(uint64_t this)
{
  int v1 = *(__int16 *)(this + 524);
  int v2 = *(__int16 *)(this + 520);
  __int16 v3 = v1 - v2;
  if (v1 < v2)
  {
    __int16 v3 = *(_WORD *)(this + 524);
    goto LABEL_23;
  }
  *(_WORD *)(this + 524) = v3;
  uint64_t v4 = *(void *)(this + 264);
  int v2 = (int)*(float *)(v4 + 64);
  *(_WORD *)(this + 520) = v2;
  int v5 = *(unsigned __int8 *)(v4 + 58);
  int v6 = *(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * *(unsigned __int8 *)(v4 + 58));
  int v7 = *(_DWORD *)(v4 + 72);
  uint64_t v8 = *(void *)(v4 + 40);
  if (v8) {
    uint64_t v9 = *(_DWORD **)(v4 + 40);
  }
  else {
    uint64_t v9 = &MTFEPhonemeFlags::sSIL;
  }
  int v10 = *((unsigned __int8 *)v9 + 58);
  int v11 = *(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * *((unsigned __int8 *)v9 + 58));
  int v12 = v9[18];
  *(void *)(this + 264) = v8;
  if (!*(_WORD *)(this + 540))
  {
    __int16 v13 = -10000;
    goto LABEL_10;
  }
  if (*(__int16 *)(this + 540) >= 1)
  {
    __int16 v13 = 0;
LABEL_10:
    *(_WORD *)(this + 540) = v13;
  }
  *(_WORD *)(this + 508) = -10000;
  *(unsigned char *)(this + 510) = 0;
  if ((v6 & 8) != 0)
  {
    unsigned int v14 = v7 & 0xF;
    BOOL v15 = (v12 & 0x200) != 0 || v14 == 0;
    if (!v15 && v10 != 19)
    {
      if (v6)
      {
        uint64_t v19 = v12 & 0x1400;
        if (v5 == v10 && v19 != 0) {
          goto LABEL_43;
        }
        if (v14 >= 2)
        {
          *(_WORD *)(this + 508) = v2;
          *(unsigned char *)(this + 510) = 1;
        }
      }
      else if (v5 != 55)
      {
        uint64_t v17 = v12 & 0x1400;
        if ((v6 & 0x1000) == 0 && v17 != 0) {
LABEL_43:
        }
          *(_WORD *)(this + 508) = v2;
      }
    }
  }
  if ((v11 & 0x100000) != 0) {
    *(_WORD *)(this + 508) = v2;
  }
  if ((v6 & 0x100000) != 0)
  {
    *(_WORD *)(this + 508) = v2;
    return this;
  }
LABEL_23:
  if (v3 == 10 || v2 - 1 == v3)
  {
    *(_WORD *)(this + 540) = *(_WORD *)(this + 508);
    *(unsigned char *)(this + 512) = *(unsigned char *)(this + 510);
  }
  return this;
}

uint64_t MTFEFrameFiller::LogToLin(MTFEFrameFiller *this, int a2)
{
  if (a2 >= 63) {
    int v2 = 63;
  }
  else {
    int v2 = a2;
  }
  int v3 = v2 >> 1;
  if (a2 < 0) {
    int v3 = 0;
  }
  return MTFEFrameFiller::sLogToLin[v3];
}

_WORD *MTFEFrameFiller::VisitCommand(_WORD *this, MTFECommand *a2)
{
  int v3 = this;
  int64_t var8 = a2->var8;
  if (var8 <= 1920165235)
  {
    if (var8 > 1886220131)
    {
      if (var8 == 1886220132)
      {
        this = (_WORD *)*((void *)this + 2);
        if (!*((unsigned char *)this + 48) && *((void *)v3 + 6)) {
          return this;
        }
        int64_t var9 = a2->var9;
      }
      else
      {
        if (var8 != 1886220146) {
          return this;
        }
        uint64_t v9 = (_WORD *)*((void *)this + 2);
        if (!*((unsigned char *)v9 + 48))
        {
          if (*((void *)this + 6)) {
            return this;
          }
        }
        int64_t var9 = a2->var9 + MTBEParam::GetModulation(*((MTBEParam **)this + 2));
        this = v9;
      }
      return (_WORD *)MTBEParam::SetModulation((uint64_t)this, var9);
    }
    else
    {
      if (var8 == 1885495666)
      {
        int v6 = (MTBEParam *)*((void *)this + 2);
        if (!*((unsigned char *)v6 + 48) && *((void *)this + 6)) {
          return this;
        }
        int64_t v7 = (int)(12 * MTBEParam::GetPitch(*((MTBEParam **)this + 2)) + (SLODWORD(a2->var9) >> 8) + 8025);
      }
      else
      {
        if (var8 != 1885495667) {
          return this;
        }
        int v6 = (MTBEParam *)*((void *)this + 2);
        if (!*((unsigned char *)v6 + 48))
        {
          if (*((void *)this + 6)) {
            return this;
          }
        }
        int64_t v7 = a2->var9 >> 8;
      }
      int v14 = MTBEParam::MidiToPitch(v6, v7);
      return (_WORD *)MTBEParam::SetPitch((uint64_t)v6, v14);
    }
  }
  else
  {
    if (var8 > 1987013740)
    {
      switch(var8)
      {
        case 1987013741:
          int v11 = (MTBEParam *)*((void *)this + 2);
          int64_t Volume = a2->var9;
          break;
        case 1987013746:
          __int16 v13 = (MTBEParam *)*((void *)this + 2);
          int64_t Volume = a2->var9 + MTBEParam::GetVolume(v13);
          int v11 = v13;
          break;
        case 2003792484:
          int v5 = *(uint64_t (**)(void))(**((void **)this + 11) + 56);
          return (_WORD *)v5();
        default:
          return this;
      }
      goto LABEL_33;
    }
    if (var8 == 1920165236)
    {
      MTBEParam::ResetVoice(*((void *)this + 2), *((__int16 **)this + 5));
      this = (_WORD *)*((void *)v3 + 3);
      if (!this) {
        return this;
      }
      if (a2->var9 == 1)
      {
        BOOL v15 = (MTBEParam *)*((void *)v3 + 2);
        int Rate = MTBEParam::GetRate((MTBEParam *)this);
        MTBEParam::SetRate(v15, Rate);
        uint64_t v17 = *((void *)v3 + 2);
        int Pitch = MTBEParam::GetPitch(*((MTBEParam **)v3 + 3));
        MTBEParam::SetPitch(v17, Pitch);
        uint64_t v19 = *((void *)v3 + 2);
        uint64_t Modulation = MTBEParam::GetModulation(*((MTBEParam **)v3 + 3));
        MTBEParam::SetModulation(v19, Modulation);
        uint64_t v21 = (MTBEParam *)*((void *)v3 + 2);
        int64_t Volume = MTBEParam::GetVolume(*((MTBEParam **)v3 + 3));
        int v11 = v21;
LABEL_33:
        return MTBEParam::SetVolume(v11, Volume);
      }
      uint64_t v22 = (__int16 *)*((void *)v3 + 5);
      return (_WORD *)MTBEParam::ResetVoice((uint64_t)this, v22);
    }
    else if (var8 == 1937337955)
    {
      uint64_t v8 = *(uint64_t (**)(void))(**((void **)this + 11) + 40);
      return (_WORD *)v8();
    }
  }
  return this;
}

uint64_t MTFEFrameFiller::NextClonedWord(MTFEFrameFiller *this)
{
  uint64_t v1 = *((__int16 *)this + 73);
  if (!*((_WORD *)this + 73)) {
    return 0;
  }
  if ((int)v1 >= *((__int16 *)this + 72)) {
    return -1;
  }
  uint64_t v2 = *((__int16 *)this + 72);
  uint64_t v3 = *((void *)this + 14);
  while (1)
  {
    uint64_t v4 = *(void *)(*(void *)(v3 + 8 * v1) + 192);
    if (v4) {
      break;
    }
    *((_WORD *)this + 73) = ++v1;
    if (v2 == v1) {
      return -1;
    }
  }
  return v4;
}

MTFESpeechElement *MTPFExpandCompounds::VisitWord(MTFETrackingVisitor *this, MTFESpeechElement *a2)
{
  *((unsigned char *)this + 30) = (uint64_t)a2[1].var0 & 1;
  return MTFETrackingVisitor::VisitWord(this, a2);
}

uint64_t MTPFExpandCompounds::VisitPhoneme(uint64_t this, MTFEPhoneme *a2)
{
  uint64_t v3 = this;
  int var9 = a2->var9;
  if (*(unsigned char *)(this + 31))
  {
    if (a2->var9 <= 0x1Bu)
    {
      if (var9 == 19)
      {
        unsigned __int8 v6 = 31;
      }
      else
      {
        if (var9 != 21) {
          return this;
        }
        unsigned __int8 v6 = 13;
      }
    }
    else
    {
      switch(var9)
      {
        case 28:
          unsigned __int8 v6 = 11;
          break;
        case 29:
          unsigned __int8 v6 = 25;
          break;
        case 56:
          int v5 = (uint64_t (*)(MTFEPhoneme *))*((void *)a2->var0 + 2);
          return v5(a2);
        default:
          return this;
      }
    }
LABEL_22:
    a2->int var9 = v6;
    operator new();
  }
  MTFETrackingVisitor::PrePhoneme(this, a2);
  if (var9 == 53)
  {
    ++*(_WORD *)(v3 + 24);
    unsigned __int8 v6 = 49;
    goto LABEL_22;
  }
  if (var9 == 52)
  {
    ++*(_WORD *)(v3 + 24);
    unsigned __int8 v6 = 48;
    goto LABEL_22;
  }

  return MTFETrackingVisitor::PostPhoneme(v3, a2);
}

void sub_1DA49F4F0(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C40D6D86DEFLL);
  _Unwind_Resume(a1);
}

void MTPFExpandCompounds::~MTPFExpandCompounds(MTPFExpandCompounds *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

uint64_t MTFESyllablify::VisitIntonationalPhrase(MTFESyllablify *this, MTFEIntonationalPhrase *a2)
{
  ((void (*)(MTFEIntonationalPhrase *, char *))*a2->var0)(a2, (char *)this + 8);
  uint64_t v4 = (uint64_t (*)(MTFEIntonationalPhrase *, char *))*a2->var0;

  return v4(a2, (char *)this + 24);
}

void MTFESyllablify::Pass1::VisitWord(MTFESyllablify::Pass1 *this, MTFESpeechElement *a2)
{
  *((unsigned char *)this + 8) = ((uint64_t)a2[1].var0 & 0x20000) != 0;
  *((unsigned char *)this + 9) = 0;
  MTFESpeechElement::VisitChildren(a2, this);
  operator new();
}

void sub_1DA49F64C(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C405D120DB7);
  _Unwind_Resume(a1);
}

void MTFESyllablify::Pass1::VisitPhoneme(MTFESyllablify::Pass1 *this, MTFEPhoneme *a2)
{
  if (*(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * a2->var9)) {
    uint64_t v3 = (MTFESyllablify::Pass1 *)MTFESyllablify::Pass1::MarkSyllable((uint64_t)this, a2);
  }
  else {
    uint64_t v3 = (MTFESyllablify::Pass1 *)MTFESyllablify::Pass1::PlaceStressInConsonant((uint64_t)this, a2);
  }

  MTFESyllablify::Pass1::MarkBoundary(v3, a2);
}

uint64_t MTFESyllablify::Pass1::MarkSyllable(uint64_t this, MTFEPhoneme *a2)
{
  signed int var15 = a2->var15;
  *(unsigned char *)(this + 9) = var15 < 0;
  uint64_t v3 = 768;
  uint64_t v4 = a2;
  while (1)
  {
    uint64_t v4 = (MTFEPhoneme *)v4->var7;
    if (!v4 || v4->var5 != a2->var5) {
      break;
    }
    if (*(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * v4->var9)) {
      goto LABEL_7;
    }
  }
  uint64_t v3 = 0;
LABEL_7:
  int v5 = a2;
  while (1)
  {
    int v5 = (MTFEPhoneme *)v5->var6;
    if (!v5 || v5->var5 != a2->var5) {
      break;
    }
    if (*(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * v5->var9))
    {
      int v6 = 256;
      if (v3) {
        int v6 = v3;
      }
      if (v3 == 768) {
        LODWORD(v3) = 512;
      }
      else {
        LODWORD(v3) = v6;
      }
      break;
    }
  }
  a2->signed int var15 = var15 | v3;
  return this;
}

uint64_t MTFESyllablify::Pass1::PlaceStressInConsonant(uint64_t this, MTFEPhoneme *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = 0;
  int v5 = 1;
  uint64_t v6 = MEMORY[0x1E4FA5870];
  int64_t v7 = a2;
  while (1)
  {
    int64_t v7 = (MTFEPhoneme *)v7->var6;
    if (!v7) {
      return this;
    }
    unsigned int var15 = v7->var15;
    if ((var15 & 0x100F0000) != 0) {
      return this;
    }
    if ((var15 & 0x1C00) != 0) {
      break;
    }
    uint64_t var9 = v7->var9;
    if (*(_DWORD *)(v6 + 4 * var9)) {
      return this;
    }
    if (!*(unsigned char *)(v3 + 9))
    {
      if (v5 == 2)
      {
        if (a2->var9 != 42) {
          return this;
        }
        this = MTFESyllablify::CheckConsonantPair((MTFESyllablify *)v4->var9, var9);
        int v5 = 3;
        if ((this & 1) == 0) {
          return this;
        }
      }
      else
      {
        if (v5 != 1) {
          return this;
        }
        this = a2->var9;
        int v5 = 2;
        uint64_t v4 = v7;
        if (this != 42)
        {
          this = MTFESyllablify::CheckConsonantPair((MTFESyllablify *)this, var9);
          int v5 = 2;
          uint64_t v4 = v7;
          if ((this & 1) == 0) {
            return this;
          }
        }
      }
    }
  }
  if (*(unsigned char *)(v3 + 9)
    || v5 != 2
    || (this = MTFESyllablify::CheckConsonantPair((MTFESyllablify *)a2->var9, v4->var9), this))
  {
    if ((var15 & 0x400) != 0)
    {
      if (*(unsigned char *)(v3 + 8)) {
        int v10 = 2048;
      }
      else {
        int v10 = 1024;
      }
      a2->var15 |= v10;
      unsigned int var15 = v7->var15;
      if ((var15 & 0x800) == 0)
      {
LABEL_20:
        if ((var15 & 0x1000) == 0) {
          return this;
        }
        goto LABEL_21;
      }
    }
    else if ((var15 & 0x800) == 0)
    {
      goto LABEL_20;
    }
    a2->var15 |= (*(unsigned char *)(v3 + 8) == 0) << 11;
    if ((v7->var15 & 0x1000) != 0) {
LABEL_21:
    }
      a2->var15 |= 0x1000u;
  }
  return this;
}

void MTFESyllablify::Pass1::MarkBoundary(MTFESyllablify::Pass1 *this, MTFEPhoneme *a2)
{
  uint64_t v2 = MEMORY[0x1E4FA5870];
  uint64_t v3 = a2;
  do
  {
    uint64_t v3 = (MTFEPhoneme *)v3->var6;
    if (!v3) {
      break;
    }
    unsigned int v4 = v3->var15 & 0xF0000;
    if (!v4) {
      continue;
    }
    if (v4 >= 0x80000)
    {
      a2->var15 |= 9u;
      if ((v4 & 0x20000) != 0)
      {
LABEL_12:
        a2->var15 |= 3u;
        if ((v4 & 0x40000) != 0)
        {
LABEL_13:
          a2->var15 |= 5u;
          if ((v4 & 0x10000) == 0) {
            continue;
          }
LABEL_8:
          a2->var15 |= 1u;
          continue;
        }
        goto LABEL_7;
      }
    }
    else if ((v3->var15 & 0x20000) != 0)
    {
      goto LABEL_12;
    }
    if ((v4 & 0x40000) != 0) {
      goto LABEL_13;
    }
LABEL_7:
    if ((v4 & 0x10000) != 0) {
      goto LABEL_8;
    }
  }
  while ((*(_DWORD *)(v2 + 4 * v3->var9) & 1) == 0);
}

unint64_t MTFESyllablify::CheckConsonantPair(MTFESyllablify *this, unsigned int a2)
{
  int v2 = (int)this;
  unint64_t result = 0;
  switch(v2)
  {
    case '&':
    case '\'':
    case '.':
    case '/':
      return (a2 & 0xFE) == 32;
    case '(':
    case '0':
    case '1':
      return ((a2 - 30) & 0xFD) == 0;
    case '*':
    case ',':
      if (a2 > 0x32) {
        return 0;
      }
      if (((1 << a2) & 0x1401A40000000) != 0) {
        return 1;
      }
      if (((1 << a2) & 0x4004000000000) != 0)
      {
        return v2 == 42;
      }
      else
      {
        if (a2 != 32) {
          return 0;
        }
        return v2 == 44;
      }
    case '2':
    case '3':
      if (a2 >= 0x22) {
        return 0;
      }
      else {
        return (0x340000000uLL >> a2) & 1;
      }
    default:
      return result;
  }
}

MTFESpeechElement *MTFESyllablify::Pass2::VisitWord(MTFESyllablify::Pass2 *this, MTFESpeechElement *a2)
{
  *((void *)this + 1) = 0;
  *((_WORD *)this + 25) = 0;
  return MTFESpeechElement::VisitChildren(a2, this);
}

MTFESpeechElement *MTFESyllablify::Pass2::VisitSyllable(MTFESyllablify::Pass2 *this, MTFESpeechElement *a2)
{
  int v2 = a2;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = a2;
  do
  {
    unint64_t result = MTFESpeechElement::VisitChildren(v2, this);
    BOOL v5 = *((void *)this + 5) == (void)v2;
    int v2 = (MTFESpeechElement *)*((void *)this + 5);
  }
  while (!v5);
  return result;
}

unint64_t MTFESyllablify::Pass2::VisitPhoneme(unint64_t this, MTFEPhoneme *a2)
{
  unint64_t v3 = this;
  unsigned int v4 = *(MTFEPhoneme **)(this + 32);
  if (v4)
  {
    if (v4 != a2) {
      return this;
    }
    *(void *)(this + 32) = 0;
  }
  uint64_t v6 = (MTFESpeechElement **)(this + 8);
  BOOL v5 = *(MTFEPhoneme **)(this + 8);
  if (!v5)
  {
    *uint64_t v6 = (MTFESpeechElement *)a2;
    BOOL v5 = a2;
  }
  uint64_t var9 = a2->var9;
  if (!a2->var9)
  {
    *uint64_t v6 = 0;
    return this;
  }
  if (*(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * var9))
  {
    if (*(unsigned char *)(this + 51) && (a2->var15 & 0x10000000) != 0)
    {
      *uint64_t v6 = (MTFESpeechElement *)a2;
      BOOL v5 = a2;
    }
    if ((MTFEPhoneme *)v5->var5->var3 != v5)
    {
      *(void *)(this + 32) = a2;
      operator new();
    }
    v5->var15 |= 0x10000000u;
    *(unsigned char *)(this + 50) = 1;
    *uint64_t v6 = 0;
    *(void *)(this + 16) = 0;
    *(unsigned char *)(this + 51) = (a2->var15 & 0x80000000) != 0;
  }
  else
  {
    if (!*(unsigned char *)(this + 50)) {
      return this;
    }
    if (*(unsigned char *)(this + 51))
    {
      if ((a2->var15 & 0x10000000) != 0) {
LABEL_11:
      }
        *uint64_t v6 = (MTFESpeechElement *)a2;
    }
    else
    {
      uint64_t v8 = *(void *)(this + 16);
      if (!v8)
      {
        *(void *)(this + 8) = a2;
        *(void *)(this + 16) = a2;
        *(void *)(this + 24) = 0;
        return this;
      }
      uint64_t v9 = *(void *)(this + 24);
      if (v9)
      {
        int v10 = *(unsigned __int16 *)(this + 48);
        *(_WORD *)(this + 48) = v10 + 1;
        if (v10)
        {
          if ((unsigned __int16)(v10 + 1) == 2)
          {
            var6 = *(MTFESpeechElement **)(v9 + 40);
          }
          else
          {
            if (((_BYTE)v10 + 1)) {
              return this;
            }
            var6 = v5->var6;
          }
          *uint64_t v6 = var6;
          return this;
        }
        this = MTFESyllablify::CheckConsonantPair((MTFESyllablify *)*(unsigned __int8 *)(v9 + 58), var9);
        if ((this & 1) == 0) {
          goto LABEL_11;
        }
        if (*(unsigned char *)(v8 + 58) == 42) {
          *uint64_t v6 = (MTFESpeechElement *)v8;
        }
        else {
          *uint64_t v6 = (MTFESpeechElement *)v9;
        }
      }
      else
      {
        *(void *)(this + 24) = a2;
        this = MTFESyllablify::CheckConsonantPair((MTFESyllablify *)*(unsigned __int8 *)(v8 + 58), var9);
        if ((this & 1) == 0) {
          *uint64_t v6 = (MTFESpeechElement *)a2;
        }
        *(_WORD *)(v3 + 48) = 0;
      }
    }
  }
  return this;
}

void sub_1DA49FC94(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C405D120DB7);
  _Unwind_Resume(a1);
}

void MTFESyllablify::Pass1::~Pass1(MTFESyllablify::Pass1 *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

void MTFESyllablify::Pass2::~Pass2(MTFESyllablify::Pass2 *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

MTFESpeechElement *MTFEPitchRaiseFall::VisitIntonationalPhrase(MTFEPitchRaiseFall *this, MTFESpeechElement *a2)
{
  *((void *)this + 4) = 0x200000002;
  *((void *)this + 7) = 1;
  unint64_t result = MTFESpeechElement::VisitChildren(a2, this);
  int v5 = *((_DWORD *)this + 15);
  uint64_t v6 = (v5 - 2);
  *((_DWORD *)this + 15) = v6;
  if (v5 >= 4 && *((_DWORD *)this + 8) != 3)
  {
    int64_t v7 = (void *)((char *)this + 64);
    uint64_t v8 = v6 - 1;
    int v9 = 1;
    while (1)
    {
      *int64_t v7 = 0x4000000;
      if (!v8) {
        break;
      }
      while (1)
      {
        v9 ^= 1u;
        ++v7;
        --v8;
        if (v9) {
          break;
        }
        *int64_t v7 = 0x8000000;
        if (!v8)
        {
          *((_DWORD *)this + 8) = 0;
          goto LABEL_11;
        }
      }
    }
    *((_DWORD *)this + 8) = 1;
    *((_DWORD *)this + 15) = v5 - 1;
    *((void *)this + (int)v6 + 8) = 0x8000000;
LABEL_11:
    int v10 = (uint64_t (*)(MTFESpeechElement *, char *))*a2->var0;
    return (MTFESpeechElement *)v10(a2, (char *)this + 8);
  }
  return result;
}

uint64_t MTFEPitchRaiseFall::VisitPhoneme(uint64_t this, MTFEPhoneme *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 32);
  if (v4 == 1)
  {
    unsigned int var15 = a2->var15;
    if ((var15 & 0xF0000) == 0x10000)
    {
      uint64_t v6 = 0x8000000;
      if ((var15 & 0x2000) != 0) {
        uint64_t v6 = 0x4000000;
      }
      uint64_t v7 = *(int *)(this + 60);
      *(void *)(this + 8 * v7 + 64) = v6;
      if ((int)v7 <= 62) {
        *(_DWORD *)(this + 60) = v7 + 1;
      }
      *(_DWORD *)(this + 56) = 0;
      *(void *)(this + 48) = a2;
      if (*(_DWORD *)(this + 36) == 2)
      {
        *(_DWORD *)(this + 36) = 1;
        *(void *)(this + 40) = a2;
      }
    }
  }
  uint64_t v8 = MEMORY[0x1E4FA5870];
  if (*(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * a2->var9))
  {
    if (v4 == 1)
    {
      unsigned int v12 = a2->var15;
      if ((v12 & 0x1400) != 0) {
        ++*(_DWORD *)(this + 56);
      }
      __int16 v13 = a2;
      while (v13 == a2 || (*(_DWORD *)(v8 + 4 * v13->var9) & 1) == 0)
      {
        if ((v13->var15 & 8) == 0)
        {
          __int16 v13 = (MTFEPhoneme *)v13->var6;
          if (v13) {
            continue;
          }
        }
        goto LABEL_26;
      }
      if ((v12 & 0x1400) != 0)
      {
        this = MTFEPitchRaiseFall::AnyVowelsTillBoundary((MTFEPitchRaiseFall *)this, 8u, 1, a2);
        if ((this & 1) == 0)
        {
LABEL_26:
          int v11 = 0;
          a2->unsigned int var15 = v12 | 0x40;
          goto LABEL_27;
        }
      }
    }
    else if (v4 == 2)
    {
      int v9 = a2;
      while (v9 == a2 || (*(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * v9->var9) & 1) == 0)
      {
        if ((v9->var15 & 8) == 0)
        {
          int v9 = (MTFEPhoneme *)v9->var6;
          if (v9) {
            continue;
          }
        }
        unsigned int v10 = a2->var15;
LABEL_18:
        a2->unsigned int var15 = v10 | 0x40;
        int v11 = 3;
        goto LABEL_27;
      }
      this = MTFEPitchRaiseFall::AnyVowelsTillBoundary((MTFEPitchRaiseFall *)this, 8u, 1, a2);
      unsigned int v10 = a2->var15;
      if ((this & 1) == 0) {
        goto LABEL_18;
      }
      if ((v10 & 0x1C00) != 0)
      {
        a2->unsigned int var15 = v10 | 0x20;
        int v11 = 1;
LABEL_27:
        *(_DWORD *)(v3 + 32) = v11;
      }
    }
  }
  return this;
}

uint64_t MTFEPitchRaiseFall::AnyVowelsTillBoundary(MTFEPitchRaiseFall *this, unsigned int a2, int a3, MTFEPhoneme *a4)
{
  if (!a4) {
    return 0;
  }
  int v4 = 20;
  int v5 = a4;
  while (v5 == a4 || (*(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * v5->var9) & 1) == 0 || a3 && (v5->var15 & 0x1400) == 0)
  {
    if ((v5->var15 & 0xF) >= a2)
    {
      int v4 = 0;
      int v6 = 1;
      return v6 & v4;
    }
    int v5 = (MTFEPhoneme *)v5->var6;
    if (!v5)
    {
      int v6 = 0;
      return v6 & v4;
    }
  }
  int v6 = 1;
  int v4 = 1;
  return v6 & v4;
}

MTFESpeechElement *MTFEPitchRaiseFall::Pass2::VisitIntonationalPhrase(MTFEPitchRaiseFall::Pass2 *this, MTFESpeechElement *a2)
{
  *((_WORD *)this + 4) = 0;
  *((_DWORD *)this + 3) = 0;
  return MTFESpeechElement::VisitChildren(a2, this);
}

uint64_t MTFEPitchRaiseFall::Pass2::VisitPhoneme(uint64_t this, MTFEPhoneme *a2)
{
  uint64_t v2 = *(void *)(this + 16);
  if (*(MTFEPhoneme **)(v2 + 40) == a2) {
    *(unsigned char *)(this + 8) = 1;
  }
  if (*(MTFEPhoneme **)(v2 + 48) == a2)
  {
    *(unsigned char *)(this + 8) = 0;
  }
  else if (*(unsigned char *)(this + 8))
  {
    unsigned int var15 = a2->var15;
    if ((var15 & 0xF0000) == 0x10000) {
      *(unsigned char *)(this + 9) = 1;
    }
    if ((*(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * a2->var9) & 1) != 0 && *(unsigned char *)(this + 9))
    {
      int v4 = a2;
      while (1)
      {
        int v4 = (MTFEPhoneme *)v4->var6;
        if (!v4) {
          break;
        }
        unsigned int v5 = v4->var15;
        if ((v5 & 0xF0000) != 0) {
          break;
        }
        if (v5 & 0x1400) != 0 && (*(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * v4->var9)) {
          return this;
        }
      }
      *(unsigned char *)(this + 9) = 0;
      uint64_t v7 = *(int *)(this + 12);
      if ((int)v7 < *(_DWORD *)(v2 + 60))
      {
        *(_DWORD *)(this + 12) = v7 + 1;
        a2->unsigned int var15 = var15 | *(_DWORD *)(v2 + 8 * v7 + 64);
      }
    }
  }
  return this;
}

uint64_t MTFEPitchRaiseFall::Pass2::AnyStressVowelsRemain(MTFEPitchRaiseFall::Pass2 *this, MTFESpeechElement *a2)
{
  while (1)
  {
    a2 = a2->var6;
    if (!a2) {
      break;
    }
    if (((uint64_t)a2[1].var3 & 0xF0000) != 0)
    {
      LOBYTE(v2) = 0;
      return (a2 != 0) & v2;
    }
    unsigned int v2 = (uint64_t)a2[1].var3 & 0x1400;
    if (v2) {
      BOOL v3 = (*(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * BYTE2(a2[1].var0)) & 1) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    if (!v3)
    {
      LOBYTE(v2) = 1;
      return (a2 != 0) & v2;
    }
  }
  return (a2 != 0) & v2;
}

void MTFEPitchRaiseFall::Pass2::~Pass2(MTFEPitchRaiseFall::Pass2 *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

void MTFEPitchBuffer::Expand(MTFEPitchBuffer *this)
{
  int v1 = 2 * *(_DWORD *)this;
  *(_DWORD *)this = v1;
  is_mul_ok(v1, 6uLL);
  operator new[]();
}

uint64_t MTFEFillPitchBuffer::VisitSentence(MTFEFillPitchBuffer *this, MTFESpeechElement *a2)
{
  *(void *)(*((void *)this + 1) + 16) = *(void *)(*((void *)this + 1) + 8);
  *((_WORD *)this + 16) = 0;
  MTFESpeechElement::VisitChildren(a2, this);
  uint64_t v3 = *((void *)this + 3);

  return MTBEParam::StartNewPitchClause(v3);
}

MTFESpeechElement *MTFEFillPitchBuffer::VisitIntonationalPhrase(MTFEFillPitchBuffer *this, MTFESpeechElement *a2)
{
  *((unsigned char *)this + 39) = BYTE6(a2[2].var6);
  *(_DWORD *)((char *)this + 34) = 0;
  *((unsigned char *)this + 38) = 1;
  *((_DWORD *)this + 10) = 0;
  uint64_t v2 = 1374389535 * (*(unsigned __int16 *)(*((void *)this + 2) + 4) << 16);
  *((void *)this + 6) = (int)((v2 >> 37) + ((unint64_t)v2 >> 63));
  return MTFESpeechElement::VisitChildren(a2, this);
}

MTFEPitchBuffer *MTFEFillPitchBuffer::AddPitch(MTFEFillPitchBuffer *this, __int16 a2, int a3, __int16 a4)
{
  int v5 = *((__int16 *)this + 16);
  __int16 v6 = v5 + a3;
  unint64_t result = (MTFEPitchBuffer *)*((void *)this + 1);
  if (v5 + a3 < 0)
  {
    uint64_t v8 = (_WORD *)*((void *)result + 2);
    *uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = (_WORD *)*((void *)result + 2);
    *uint64_t v8 = v6;
    *((_WORD *)this + 16) = -(__int16)a3;
  }
  v8[1] = a2;
  v8[2] = a4;
  *((void *)result + 2) = v8 + 3;
  if ((unint64_t)(v8 + 3) >= *((void *)result + 3)) {
    MTFEPitchBuffer::Expand(result);
  }
  return result;
}

float MTFEFillPitchBuffer::VisitPhoneme(MTFEFillPitchBuffer *this, MTFEPhoneme *a2)
{
  var7 = a2->var7;
  if (var7) {
    int v5 = a2->var7;
  }
  else {
    int v5 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
  }
  if (*(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * a2->var9))
  {
    unsigned int var15 = a2->var15;
    if ((var15 & 0x20) != 0 && *((unsigned char *)this + 38))
    {
      LOWORD(v7) = *(_WORD *)(*((void *)this + 2) + 64);
      *((_WORD *)this + 17) = v7;
      if (*((unsigned char *)this + 39) == 71)
      {
        int v7 = (__int16)v7 >> 1;
        *((_WORD *)this + 17) = v7;
      }
      if ((var15 & 0x40) != 0) {
        int v8 = -16;
      }
      else {
        int v8 = 0;
      }
      MTFEFillPitchBuffer::AddPitch(this, v7, v8, 2);
      *((_WORD *)this + 18) += *((_WORD *)this + 17);
      *((unsigned char *)this + 38) = 0;
    }
    if ((var15 & 0x4000000) != 0)
    {
      int v9 = *(__int16 *)(*((void *)this + 2) + 68) >> (*((unsigned char *)this + 39) == 71);
    }
    else
    {
      if ((var15 & 0x8000000) == 0) {
        goto LABEL_18;
      }
      LOWORD(v9) = *(_WORD *)(*((void *)this + 2) + 70);
    }
    MTFEFillPitchBuffer::AddPitch(this, v9, 0, 32);
LABEL_18:
    if ((var15 & 0x1400) != 0)
    {
      if ((var15 & 0x1000) != 0) {
        unsigned int v10 = 77;
      }
      else {
        unsigned int v10 = 41;
      }
      int v11 = *((_DWORD *)this + 10);
      *((_DWORD *)this + 10) = v11 + 1;
      switch(v11)
      {
        case 0:
          v10 += 29;
          break;
        case 1:
          v10 += 27;
          break;
        case 2:
          v10 |= 0x12u;
          break;
        case 3:
          v10 += 12;
          break;
        default:
          break;
      }
      unsigned int v12 = v10 >> (*((unsigned char *)this + 39) == 71);
      if ((var15 & 0x48) != 0) {
        LOWORD(v13) = -12;
      }
      else {
        LOWORD(v13) = 0;
      }
      if ((var15 & 0x1048) == 0) {
        int v13 = (int)(a2->var13 * 0.25);
      }
      unsigned int v14 = (*((_DWORD *)this + 12) * v12) >> 16;
      if ((var15 & 0x1008) == 8) {
        LOWORD(v14) = -12;
      }
      MTFEFillPitchBuffer::AddPitch(this, v14, (__int16)v13, 1);
    }
    if ((var15 & 0x40) == 0)
    {
      if ((var15 & 8) == 0) {
        goto LABEL_52;
      }
LABEL_47:
      int v20 = *((unsigned __int8 *)this + 39);
      if ((v20 - 68) < 2)
      {
        __int16 v21 = 29;
        __int16 v22 = 21;
LABEL_51:
        MTFEFillPitchBuffer::AddPitch(this, v22, 0, 4);
        MTFEFillPitchBuffer::AddPitch(this, v21, (int)a2->var13, 4);
        goto LABEL_52;
      }
      if (v20 == 71)
      {
        __int16 v21 = 70;
        __int16 v22 = 51;
        goto LABEL_51;
      }
LABEL_52:
      var7 = a2->var7;
      goto LABEL_53;
    }
    int v15 = (__int16)((int)a2->var13 - 32);
    if (v15 <= 5) {
      LOWORD(v15) = 5;
    }
    uint64_t v16 = var15 & 8;
    if ((var15 & 8) != 0)
    {
      unsigned int v18 = *((unsigned __int8 *)this + 39) - 68;
      if (v18 < 5)
      {
        int v17 = dword_1DA4FE760[(char)v18];
        goto LABEL_46;
      }
    }
    else if ((var15 & 4) == 0)
    {
      int v17 = *(__int16 *)(*((void *)this + 2) + 66);
      goto LABEL_46;
    }
    int v17 = 0;
LABEL_46:
    __int16 v19 = ((*(_DWORD *)(*((void *)this + 2) + 72) * v17) >> 16) - *((_WORD *)this + 17);
    MTFEFillPitchBuffer::AddPitch(this, v19, (__int16)v15, 2);
    *((_WORD *)this + 18) += v19;
    *((unsigned char *)this + 38) = 1;
    if (!v16) {
      goto LABEL_52;
    }
    goto LABEL_47;
  }
LABEL_53:
  if (var7 && (WORD1(v5[1].var3) & 0x1F0) != 0)
  {
    MTFEFillPitchBuffer::AddPitch(this, -*((_WORD *)this + 18), 0, 16);
    *((_WORD *)this + 18) = 0;
  }
  float result = a2->var13;
  *((_WORD *)this + 16) += (int)result;
  return result;
}

void MTFEFillPitchBuffer::~MTFEFillPitchBuffer(MTFEFillPitchBuffer *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

uint64_t _GLOBAL__sub_I_MTFEPhoneme_cp()
{
  MTFEPhoneme::MTFEPhoneme((MTFEPhoneme *)&MTFEPhonemeFlags::sSIL, 0);

  return __cxa_atexit((void (*)(void *))MTFEPhoneme::~MTFEPhoneme, &MTFEPhonemeFlags::sSIL, &dword_1DA47F000);
}

void MTFEModDuration::MTFEModDuration(uint64_t a1, MTFEModDuration *this, uint64_t a3)
{
  *(void *)a1 = &unk_1F347E4C8;
  *(void *)(a1 + 8) = this;
  *(void *)(a1 + 16) = a3;
  *(unsigned char *)(a1 + 70) = *((unsigned char *)this + 1303);
  int UsePostDurMod = MTBEParam::GetUsePostDurMod(this);
  int v5 = *(MTBEParam **)(a1 + 8);
  if (UsePostDurMod) {
    int DurModFakeRate = MTBEParam::GetDurModFakeRate(v5);
  }
  else {
    int DurModFakeRate = MTBEParam::GetRate(v5);
  }
  *(float *)(a1 + 100) = (float)DurModFakeRate;
  *(_DWORD *)(a1 + 96) = 0;
}

void sub_1DA4A08A8(_Unwind_Exception *a1)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(v1);
  _Unwind_Resume(a1);
}

float MTFEModDuration::VisitSentence(MTFEModDuration *this, MTFESpeechElement *a2)
{
  *((_WORD *)this + 34) = 0;
  char var0 = (char)a2[1].var0;
  *((unsigned char *)this + 73) = (var0 & 2) != 0;
  *((unsigned char *)this + 74) = (var0 & 4) != 0;
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 24) = HIDWORD(a2[1].var3);
  *((unsigned char *)this + 76) = (var0 & 8) != 0;
  MTFESpeechElement::VisitChildren(a2, this);
  HIDWORD(a2[1].var0) = *((_DWORD *)this + 22);
  int v5 = (MTBEParam *)*((void *)this + 1);
  int v6 = *(__int16 *)&a2[1].var2;
  if (*((unsigned char *)v5 + 48))
  {
    MTBEParam::SetTempo((uint64_t)v5, v6);
  }
  else
  {
    return MTBEParam::SetRate(v5, v6);
  }
  return result;
}

MTFESpeechElement *MTFEModDuration::VisitIntonationalPhrase(MTFEModDuration *this, MTFESpeechElement *a2)
{
  *(_WORD *)((char *)this + 71) = 256;
  uint64_t v4 = *((void *)this + 1);
  int v5 = *(unsigned int **)(v4 + 240);
  *((void *)this + 5) = v5;
  if (v5)
  {
    unsigned int v6 = *v5;
    *((void *)this + 5) = v5 + 1;
    int v5 = (unsigned int *)bswap32(v6);
  }
  *((void *)this + 6) = v5;
  *((_WORD *)this + 32) = 0;
  *(_WORD *)(v4 + 212) = 0;
  *((void *)this + 10) = *((__int16 *)&a2[2].var2 + 1);
  if (*(unsigned char *)(v4 + 50) || *(unsigned char *)(v4 + 48) || *(unsigned char *)(v4 + 49)) {
    var6 = 0;
  }
  else {
    var6 = (MTFEMelody *)a2[3].var6;
  }
  *((void *)this + 7) = var6;
  *((_DWORD *)this + 31) = 0;
  int v8 = a2->var6;
  if (v8) {
    LOBYTE(v8) = WORD1(v8[2].var7) == 1;
  }
  *((unsigned char *)this + 77) = (_BYTE)v8;
  *((void *)this + 4) = MTFELastPhoneme(a2);
  MTFESpeechElement::VisitChildren(a2, this);
  float result = MTFESpeechElement::VisitChildren((MTFESpeechElement *)((char *)a2 + 64), this);
  *(_WORD *)(*((void *)this + 1) + 212) = 0;
  return result;
}

uint64_t MTFEModDuration::VisitWord(MTFEModDuration *this, MTFESpeechElement *a2)
{
  int v4 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugSingingDuration);
  int v5 = (FILE **)MEMORY[0x1E4F143C8];
  if (v4) {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Word %s tempo %d\n", (const char *)&a2[3].var5, *((__int16 *)&a2[3].var2 + 1));
  }
  MTFESpeechElement::VisitChildren(a2 + 2, this);
  unsigned int v6 = (uint64_t)a2[1].var0 & 1;
  *((unsigned char *)this + 75) = v6;
  *((_DWORD *)this + 29) = 0;
  signed __int16 v7 = *(_WORD *)&a2[3].var2;
  if (v7)
  {
    int v8 = (MTBEParam *)*((void *)this + 1);
    if (*((unsigned char *)v8 + 48)) {
      MTBEParam::SetTempo((uint64_t)v8, v7);
    }
    else {
      MTBEParam::SetRate(v8, v7);
    }
    *((float *)this + 25) = (float)*(__int16 *)&a2[3].var2;
    unsigned int v6 = *((unsigned __int8 *)this + 75);
  }
  if (v6)
  {
    float v9 = *((float *)this + 24);
    float v10 = 1.0;
    if (v9 > 1.0) {
      float v10 = v9 / *((float *)this + 25);
    }
  }
  else
  {
    float v10 = 1.0;
  }
  *((float *)this + 23) = v10;
  if (*((void *)this + 7))
  {
    *(void *)((char *)this + 108) = 0x42C8000000000000;
    *((float *)this + 26) = (float)*((__int16 *)&a2[3].var2 + 1);
    *(_WORD *)&a2[3].var2 = MTBEParam::GetDurModFakeRate(*((MTBEParam **)this + 1));
  }
  MTFESpeechElement::VisitChildren(a2, this);
  a2[3].int var1 = *((_DWORD *)this + 29);
  uint64_t result = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugSingingDuration);
  if (result) {
    return fprintf(*v5, "  Duration %d ms, stretch %f, min dur %f\n", 5 * *((_DWORD *)this + 29), *((float *)this + 27), *((float *)this + 28));
  }
  return result;
}

MTFESpeechElement *MTFERateRescale::VisitWord(MTFERateRescale *this, MTFESpeechElement *a2)
{
  *((_WORD *)this + 6) = 0;
  uint64_t result = MTFESpeechElement::VisitChildren(a2, this);
  a2[3].int var1 = *((_WORD *)this + 6);
  return result;
}

float MTFERateRescale::VisitPhoneme(MTFERateRescale *this, MTFEPhoneme *a2)
{
  float v2 = floorf((float)(a2->var13 * *((float *)this + 2)) + 0.5);
  a2->float var13 = v2;
  float result = v2 + (float)*((__int16 *)this + 6);
  *((_WORD *)this + 6) = (int)result;
  return result;
}

float MTFEModDuration::VisitSyllable(MTFEModDuration *this, MTFESpeechElement *a2)
{
  *((_DWORD *)this + 30) = 0;
  if (*((void *)this + 7)) {
    *((void *)this + 3) = 0;
  }
  MTFESpeechElement::VisitChildren(a2, this);
  uint64_t v5 = *((void *)this + 7);
  if (v5)
  {
    if (*((void *)this + 3))
    {
      unint64_t var0_low = SLOWORD(a2[1].var0);
      if (*(void *)(v5 + 16) > var0_low)
      {
        int v7 = *((_DWORD *)this + 31) + MTFEMelody::SilenceSamples((MTFEMelody *)v5, var0_low, *((float *)this + 26));
        *((_DWORD *)this + 31) = v7;
        HIDWORD(a2->var3[1].var3) = v7;
        *((_DWORD *)this + 31) += MTFEMelody::DurationSamples(*((MTFEMelody **)this + 7), SLOWORD(a2[1].var0), *((float *)this + 26));
        int v8 = MTFEMelody::DurationFrames(*((MTFEMelody **)this + 7), SLOWORD(a2[1].var0), *((float *)this + 26));
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugSingingDuration))
        {
          float v9 = (FILE *)*MEMORY[0x1E4F143C8];
          float v10 = MTFEMelody::Duration(*((MTFEMelody **)this + 7), SLOWORD(a2[1].var0));
          fprintf(v9, "    Note %4.2f beats, %d ms. Natural duration %d ms\n", v10, 5 * v8, 5 * *((_DWORD *)this + 30));
        }
        int v11 = *((_DWORD *)this + 30);
        uint64_t v12 = *((void *)this + 3);
        BOOL v13 = __OFSUB__(v8, v11);
        int v14 = v8 - v11;
        if ((v14 < 0) ^ v13 | (v14 == 0))
        {
          float v16 = *(float *)(v12 + 64);
          float v15 = (float)v14;
        }
        else
        {
          float v15 = (float)v14;
          float v16 = *(float *)(v12 + 64);
          float v17 = (float)v14 / v16;
          if (*((float *)this + 27) >= v17) {
            float v17 = *((float *)this + 27);
          }
          *((float *)this + 27) = v17;
        }
        float v18 = v16 + v15;
        *(float *)(v12 + 64) = v18;
        if (v18 >= 4.0)
        {
          if (v18 > 100.0) {
            *(_DWORD *)(v12 + 72) |= 0x10u;
          }
        }
        else
        {
          int v14 = (int)(float)((float)(v18 + -4.0) + v15);
          *(_DWORD *)(v12 + 64) = 1082130432;
          float v15 = (float)v14;
        }
        *((_DWORD *)this + 29) += v14;
        float result = *((float *)this + 22) + v15;
        *((float *)this + 22) = result;
      }
    }
  }
  return result;
}

float MTFEModDuration::VisitCommand(MTFEModDuration *this, MTFECommand *a2)
{
  if (a2->var8 == 1651668069)
  {
    float result = (float)a2->var9 / 100.0;
    *((float *)this + 24) = result;
  }
  return result;
}

void MTFEModDuration::VisitPhoneme(MTFEModDuration *this, MTFEPhoneme *a2)
{
  if (!a2->var7)
  {
    a2->float var13 = 1.0;
    return;
  }
  p_unsigned int var15 = &a2->var15;
  unsigned int var15 = a2->var15;
  int v6 = *(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * a2->var9);
  if (*((unsigned char *)this + 75))
  {
    float v7 = *((float *)this + 23);
  }
  else
  {
    if (a2->var9) {
      BOOL v8 = *((unsigned char *)this + 70) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      MTFEModDuration::OldDurationModel(this, a2);
      float var13 = a2->var13;
      goto LABEL_12;
    }
    float v7 = *(float *)(*((void *)this + 1) + 44);
  }
  float var13 = v7 * a2->var13;
LABEL_12:
  float v10 = floor(var13 + 0.5);
  if (var13 >= 1.0) {
    float v11 = v10;
  }
  else {
    float v11 = 1.0;
  }
  a2->float var13 = v11;
  uint64_t v12 = *((void *)this + 1);
  if (!*(unsigned char *)(v12 + 50))
  {
    if (*(unsigned char *)(v12 + 49))
    {
      if (!(*(void *)&var15 & 0x80000 | v6 & 1)) {
        goto LABEL_54;
      }
      if ((var15 & 0x80000) != 0)
      {
        int v30 = *(__int16 *)(v12 + 258);
        if (*((__int16 *)this + 33) < v30) {
          *((_WORD *)this + 33) = v30;
        }
      }
      else
      {
        uint64_t v13 = *((void *)this + 2);
        uint64_t v14 = *(__int16 *)(v12 + 212);
        *((_WORD *)this + 34) = *(unsigned char *)(v13 + 2 * v14 + 351) & 0xF;
        if (*(__int16 *)(v13 + 348) > (__int16)(v14 + 1)) {
          __int16 v15 = v14 + 1;
        }
        else {
          __int16 v15 = 0;
        }
        *(_WORD *)(v12 + 212) = v15;
      }
    }
    else
    {
      if (!*(unsigned char *)(v12 + 48)) {
        goto LABEL_54;
      }
      BOOL v8 = (a2->var12 & 0xF00) == 0;
      *((_WORD *)this + 34) = HIBYTE(a2->var12) & 0xF;
      if (v8 && (var15 & 0x80000) == 0) {
        goto LABEL_54;
      }
    }
    MTFEModDuration::SingNote((uint64_t)this, a2);
    goto LABEL_54;
  }
  if ((var15 & 0x10000000) != 0 && *((unsigned char *)this + 72)) {
    *p_var15 |= 0x2000000u;
  }
  if (!(*(void *)&var15 & 0x80000 | v6 & 1)) {
    goto LABEL_54;
  }
  if (!*((unsigned char *)this + 72))
  {
    var6 = a2->var6;
    float v17 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
    if (var6) {
      float v17 = a2->var6;
    }
    if ((var15 & 0x80000) != 0) {
      goto LABEL_41;
    }
    if ((v6 & 0x10) == 0)
    {
      if (!var6)
      {
LABEL_41:
        float v18 = (unsigned int *)*((void *)this + 5);
        uint64_t v19 = *((void *)this + 6);
        unsigned int v20 = *v18;
        uint64_t v21 = *(void *)(v12 + 240);
        uint64_t v22 = (uint64_t)v18 - v21;
        unsigned int v24 = v18[1];
        unint64_t v23 = v18 + 1;
        unsigned int v25 = (bswap32(v24) - bswap32(v20)) / 0x38 - *((unsigned __int16 *)this + 32);
        if (BYTE2(v17[1].var0)) {
          int v26 = -10;
        }
        else {
          int v26 = -20;
        }
        uint64_t v27 = *((void *)this + 3);
        float v28 = *(float *)(v27 + 64) + (float)(v26 + (__int16)v25);
        if (v28 < 4.0) {
          float v28 = 4.0;
        }
        *(float *)(v27 + 64) = v28;
        *((_WORD *)this + 32) = 0;
        __int16 v29 = (unsigned int *)(v21 + 4);
        if (!v19) {
          __int16 v29 = 0;
        }
        if (v19 - (v22 >> 2) >= 2) {
          __int16 v29 = v23;
        }
        *((void *)this + 5) = v29;
        goto LABEL_54;
      }
      p_unsigned int var15 = (unsigned int *)&var6[1].var3;
    }
    *p_var15 |= 0x2000000u;
    goto LABEL_41;
  }
  *((unsigned char *)this + 72) = 0;
LABEL_54:
  if (v6) {
    *((void *)this + 3) = a2;
  }
  *((_WORD *)this + 32) += (int)v11;
  float v31 = a2->var13;
  *((float *)this + 22) = v31 + *((float *)this + 22);
  *(int32x2_t *)((char *)this + 116) = vadd_s32(*(int32x2_t *)((char *)this + 116), vdup_n_s32((int)v31));
  float v32 = a2->var13;
  if (v32 >= *((float *)this + 28)) {
    float v32 = *((float *)this + 28);
  }
  *((float *)this + 28) = v32;
}

float MTFEModDuration::OldDurationModel(MTFEModDuration *this, MTFEPhoneme *a2)
{
  int var9 = a2->var9;
  unsigned int var15 = a2->var15;
  if (a2->var6) {
    var6 = a2->var6;
  }
  else {
    var6 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
  }
  if (var6->var6) {
    uint64_t v5 = var6->var6;
  }
  else {
    uint64_t v5 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
  }
  if (a2->var7) {
    var7 = a2->var7;
  }
  else {
    var7 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
  }
  if (a2->var9)
  {
    uint64_t v7 = MEMORY[0x1E4FA5870];
    unsigned int v8 = *(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * a2->var9);
    uint64_t v9 = BYTE2(var6[1].var0);
    int v10 = *(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * v9);
    uint64_t v11 = BYTE2(var7[1].var0);
    int v12 = MTFEPhonemeDuration::sMinDur[a2->var9];
    if ((var15 & 8) != 0)
    {
      if ((v8 & 0x1000) != 0)
      {
        int v19 = 0;
      }
      else if ((~v8 & 0x8000004) != 0)
      {
        if ((((v10 & 0x404) == 1024) & (v8 >> 26)) != 0) {
          int v19 = 15;
        }
        else {
          int v19 = 40;
        }
      }
      else
      {
        int v19 = 20;
      }
      if ((v10 & 0x10) != 0) {
        int v13 = v19 - 20;
      }
      else {
        int v13 = v19;
      }
      uint64_t v20 = *((void *)this + 10);
      uint64_t v14 = v8 & 1;
      if (v20 <= 9 && (var15 & 0x1C00) != 0 && (v8 & 1) != 0)
      {
        v13 += 5 * (10 - v20);
        goto LABEL_38;
      }
    }
    else
    {
      int v13 = 0;
      uint64_t v14 = v8 & 1;
    }
    if (!v14)
    {
      BOOL v23 = (v8 & 0x8000000) == 0;
      if ((var15 & 1) == 0) {
        BOOL v23 = 1;
      }
      int v24 = v13 + 20;
      BOOL v25 = !v23;
      if (v23) {
        int v26 = 108;
      }
      else {
        int v26 = 128;
      }
      if (!v25) {
        int v24 = v13;
      }
      int v27 = 1;
      BOOL v28 = (a2->var15 & 0x80) == 0;
      if ((var15 & 0x80) != 0) {
        LODWORD(v29) = 128;
      }
      else {
        LODWORD(v29) = v26;
      }
      if ((var15 & 0x80) == 0) {
        int v13 = v24;
      }
LABEL_67:
      int v31 = *(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * v11);
      if ((var15 & 0x1400) == 0)
      {
        int v32 = (__int16)v12 >> 2;
        if ((*(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * a2->var9) & 0x100400) != 0) {
          int v32 = 0;
        }
        v12 -= v32;
        if (v27)
        {
          unsigned int v33 = (45850 * v29) >> 16;
          LODWORD(v29) = (39300 * v29) >> 16;
          if ((var9 - 30) > 3) {
            LODWORD(v29) = v33;
          }
        }
        else
        {
          if ((var15 & 0x300) == 0x200) {
            int v34 = 36025;
          }
          else {
            int v34 = 45850;
          }
          LODWORD(v29) = (v29 * v34) >> 16;
        }
      }
      int v35 = MTFEPhonemeDuration::sMaxDur[a2->var9];
      uint64_t v36 = var15 & 0x1C00;
      if (v36 == 4096)
      {
        *((unsigned char *)this + 71) = 1;
      }
      else
      {
        if ((v27 & v28) == 1)
        {
          if (*((unsigned char *)this + 71)) {
            int v13 = 20;
          }
LABEL_94:
          if ((v8 & 0x4000040) == 0 || (var15 & 0x1C80) != 0 || (v10 & 0x400) == 0) {
            goto LABEL_104;
          }
LABEL_97:
          if ((v10 & 1) != 0 || ((uint64_t)var6[1].var3 & 0x1C80) != 0)
          {
            LOBYTE(v38) = 0;
LABEL_100:
            unint64_t v39 = 0x10000;
            goto LABEL_101;
          }
          if ((v10 & 0x4000040) != 0 && ((uint64_t)v5[1].var3 & 0x1C80) == 0)
          {
            uint64_t v42 = BYTE2(v5[1].var0);
            unsigned int v38 = (*(_DWORD *)(v7 + 4 * v42) & 0x400u) >> 10;
            if ((*(_DWORD *)(v7 + 4 * v42) & 0x400) == 0) {
              LODWORD(v42) = v9;
            }
            if (!v42) {
              goto LABEL_100;
            }
          }
          else
          {
            LOBYTE(v38) = 0;
            LODWORD(v42) = v9;
            if (!v9) {
              goto LABEL_100;
            }
          }
          int v55 = *(_DWORD *)(v7 + 4 * v42);
          if ((v55 & 4) != 0)
          {
            if ((v55 & 0x400) != 0)
            {
              unint64_t v39 = 78600;
              if (v42 != 55 && (v55 & 0x1000) == 0 && (var15 & 0x1400) != 0) {
                LOWORD(v13) = v13 + 25;
              }
            }
            else
            {
              unint64_t v39 = 55675;
              if ((v55 & 0x40) == 0) {
                unint64_t v39 = 0x10000;
              }
            }
          }
          else
          {
            v13 -= (__int16)v13 >> 2;
            unint64_t v39 = 52400;
          }
LABEL_101:
          if (((var15 & 8) == 0) | v38 & 1) {
            unint64_t v39 = (v39 >> 1) + 0x8000;
          }
          unint64_t v29 = (v39 * (unint64_t)v29) >> 16;
          if ((v27 & 1) == 0)
          {
            __int16 v41 = v13 + 30;
            if ((v10 & 1) == 0) {
              __int16 v41 = v13;
            }
            if ((var15 & 0x300) == 0x100 && (var15 & 0x1400) != 0 && ((uint64_t)var7[1].var3 & 0x80) == 0) {
              v41 += 25;
            }
            if (v9 == 27) {
              LOWORD(v13) = v41 - 20;
            }
            else {
              LOWORD(v13) = v41;
            }
LABEL_140:
            uint64_t v46 = *((void *)this + 1);
            float v47 = *(float *)(v46 + 40);
            float v48 = *(float *)(v46 + 44)
                * (float)(__int16)(v12 + (((v35 - (__int16)v12) * (unsigned __int16)v29) >> 7));
            if ((((v31 & 0x1004) == 4096) & (v8 >> 4)) != 0) {
              __int16 v49 = v13 + 20;
            }
            else {
              __int16 v49 = v13;
            }
            if ((((v31 & 0x140) == 256) & (v8 >> 3) & (v49 == 0)) != 0) {
              __int16 v50 = 20;
            }
            else {
              __int16 v50 = v49;
            }
            uint64_t v51 = *((void *)this + 10);
            BOOL v52 = (unsigned __int16)v12 != (unsigned __int16)v35 && v51 <= 9;
            unsigned int v53 = 5 * (5 - (v51 >> 1));
            if (!v52) {
              LOWORD(v53) = 0;
            }
            int v15 = (int)(float)(v47 * (float)(__int16)(v53 + v50)) + (int)v48;
            goto LABEL_152;
          }
LABEL_104:
          if ((v8 & 2) != 0)
          {
            if ((var15 & 8) == 0 && (v10 & 2) != 0)
            {
              if ((v8 & 0x40) != 0)
              {
                unsigned int v40 = 98250;
                if (((uint64_t)var6[1].var3 & 0x80) == 0) {
                  unsigned int v40 = 36025;
                }
              }
              else
              {
                unsigned int v40 = 36025;
              }
              if ((var9 & 0xFFFFFFFD) == 0x28)
              {
                if ((v10 & 0x1000) != 0) {
                  unsigned int v40 = 32750;
                }
                if (v9 == 44)
                {
                  LOWORD(v15) = 12;
                  goto LABEL_152;
                }
              }
              v12 -= (__int16)v12 >> 2;
              unint64_t v29 = (v40 * (unint64_t)(unsigned __int16)v29) >> 16;
            }
            if (v36 == 0 && (v31 & 0x40) != 0) {
              int v43 = 6550;
            }
            else {
              int v43 = 36025;
            }
            if (v11 == 42) {
              int v44 = 39300;
            }
            else {
              int v44 = v43;
            }
            if ((v8 & 0x1000) == 0) {
              int v44 = 36025;
            }
            unsigned int v45 = (v44 * (unsigned __int16)v29) >> 16;
            if ((v31 & 2) != 0)
            {
              LOWORD(v29) = v45;
              LOWORD(v12) = v12 - ((__int16)v12 >> 2);
            }
          }
          goto LABEL_140;
        }
        *((unsigned char *)this + 71) = 0;
      }
      if (v27) {
        int v37 = 20;
      }
      else {
        int v37 = 60;
      }
      if (v36 == 4096) {
        int v13 = v37;
      }
      if (!v27) {
        goto LABEL_97;
      }
      goto LABEL_94;
    }
LABEL_38:
    if ((var15 & 0xC) != 0) {
      unsigned int v21 = 128;
    }
    else {
      unsigned int v21 = 76;
    }
    if ((var15 & 0x1700) != 0)
    {
      if ((var15 & 0x300) != 0 && (var15 & 0xF) == 0 && (var15 & 0x1400) == 0)
      {
        if ((var15 & 0x300) > 0x100uLL) {
          int v22 = 52400;
        }
        else {
          int v22 = 55675;
        }
        unsigned int v21 = (v21 * v22) >> 16;
      }
    }
    else
    {
      unsigned int v30 = (36025 * v21) >> 16;
      unsigned int v21 = (55675 * v21) >> 16;
      if ((var15 & 0x800) == 0) {
        unsigned int v21 = v30;
      }
    }
    int v27 = 0;
    LODWORD(v29) = (52400 * v21) >> 16;
    if ((var15 & 0x300) == 0) {
      LODWORD(v29) = v21;
    }
    BOOL v28 = (var15 & 0x80) == 0;
    goto LABEL_67;
  }
  LOWORD(v15) = 1;
  if (!*((unsigned char *)this + 76) && (var15 & 0x8000) == 0)
  {
    unsigned int v16 = MTFEPhonemeFlags::sBoundaryDur[(var15 >> 20) & 0x1F];
    if (*((MTFEPhoneme **)this + 4) == a2 && *((unsigned char *)this + 77)) {
      unsigned int v16 = (int)((v16 + (v16 >> 15)) << 16) >> 17;
    }
    if (*((unsigned char *)this + 73))
    {
      float v17 = a2;
      while (1)
      {
        var5 = v17->var5;
        if (!var5) {
          break;
        }
        BOOL v25 = v17 == (MTFEPhoneme *)var5->var4;
        float v17 = (MTFEPhoneme *)v17->var5;
        if (!v25) {
          goto LABEL_78;
        }
      }
      LOWORD(v16) = v16 + 500;
      if (*((unsigned char *)this + 74)) {
        LOWORD(v16) = 0;
      }
    }
LABEL_78:
    int v15 = (int)(float)(*(float *)(*((void *)this + 1) + 40) * (float)(__int16)v16);
    if (v15 <= 10) {
      LOWORD(v15) = 10;
    }
  }
LABEL_152:
  float result = a2->var13 * (float)((float)(__int16)v15 / 5.0);
  a2->float var13 = result;
  return result;
}

uint64_t MTFEModDuration::SingNote(uint64_t this, MTFEPhoneme *a2)
{
  if (*(unsigned char *)(this + 72))
  {
    *(unsigned char *)(this + 72) = 0;
  }
  else
  {
    uint64_t v2 = *(void *)(this + 24);
    float v3 = *(float *)(v2 + 64) + (float)(__int16)(*(_WORD *)(this + 66) - *(_WORD *)(this + 64));
    *(float *)(v2 + 64) = v3;
    if (v3 >= 4.0)
    {
      if (v3 > 100.0) {
        *(_DWORD *)(v2 + 72) |= 0x10u;
      }
    }
    else
    {
      *(_DWORD *)(v2 + 64) = 1082130432;
    }
  }
  *(void *)(this + 24) = a2;
  *(_WORD *)(this + 66) = *(_WORD *)(*(void *)(this + 8) + 2 * *(__int16 *)(this + 68) + 248);
  *(_WORD *)(this + 64) = 0;
  return this;
}

void MTFEModDuration::~MTFEModDuration(MTFEModDuration *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

void MTFERateRescale::~MTFERateRescale(MTFERateRescale *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

uint64_t MTFEMarkStress::MTFEMarkStress(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)float result = &unk_1F347E618;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  *(void *)(result + 24) = a4;
  *(void *)(result + 32) = a5;
  *(void *)(result + 96) = 0;
  *(unsigned char *)(result + 153) = 0;
  return result;
}

{
  *(void *)float result = &unk_1F347E618;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  *(void *)(result + 24) = a4;
  *(void *)(result + 32) = a5;
  *(void *)(result + 96) = 0;
  *(unsigned char *)(result + 153) = 0;
  return result;
}

uint64_t MTFEMarkStress::VisitSentence(MTFEMarkStress *this, MTFESpeechElement *a2)
{
  int v4 = (MTBEParam *)*((void *)this + 2);
  if (*((unsigned char *)v4 + 48)) {
    __int16 Rate = *(_WORD *)(*((void *)this + 1) + 90);
  }
  else {
    __int16 Rate = MTBEParam::GetRate(v4);
  }
  *((_WORD *)this + 80) = Rate;
  *((void *)this + 15) = 0;
  *((unsigned char *)this + 128) = 0;
  MTFESpeechElement::VisitChildren(a2, this);
  *(_WORD *)&a2[1].var2 = *((_WORD *)this + 80);

  return MTFEMarkStress::CheckPitchChange((uint64_t)this, 0);
}

uint64_t MTFEMarkStress::CheckPitchChange(uint64_t this, MTFEWord *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 128))
  {
    if (*(void *)(this + 120))
    {
      this = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEPitchDWIM);
      if (this) {
        *(_DWORD *)(*(void *)(v3 + 120) + 56) |= 0x800u;
      }
    }
    *(void *)(v3 + 120) = a2;
    *(unsigned char *)(v3 + 128) = 0;
  }
  else if (a2 && (a2->var8 & 0x40) == 0)
  {
    *(void *)(this + 120) = 0;
  }
  return this;
}

void MTFEMarkStress::VisitIntonationalPhrase(MTFEMarkStress *this, MTFEIntonationalPhrase *a2)
{
  a2->var19 = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 17) = a2;
  *((void *)this + 10) = 0;
  *((_DWORD *)this + 41) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *(void *)((char *)this + 183) = 0;
  *((unsigned char *)this + 191) = a2->var28 != 0;
  operator new();
}

void sub_1DA4A1B68(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C40D6D86DEFLL);
  _Unwind_Resume(a1);
}

void MTFEMarkStress::AdjustParameters(MTFEMarkStress *this, MTFESpeechElement *a2)
{
  int v4 = (char *)this + 168;
  LODWORD(a2[1].var3) = (uint64_t)a2[1].var3 & ~*((_DWORD *)this + 44) | *((_DWORD *)this + 42);
  uint64_t v5 = *((void *)this + 1);
  if (*((unsigned char *)this + 184))
  {
    float v6 = pow((double)*(__int16 *)(v5 + 82) * 0.00390625, (double)*((char *)this + 184)) * *(float *)&a2[1].var1;
    *(float *)&a2[1].int var1 = v6;
  }
  WORD2(a2[1].var0) += *(_WORD *)(v5 + 80) * *((char *)this + 185);
  HIWORD(a2[1].var0) = *((_WORD *)this + 93);
  if (*((unsigned char *)this + 188))
  {
    *((void *)this + 6) = a2;
    if (!*((unsigned char *)this + 155)) {
      *((void *)this + 5) = a2;
    }
    if (!*((void *)this + 8)) {
      *((void *)this + 8) = a2;
    }
    *((unsigned char *)this + 188) = 0;
  }
  if (*((unsigned char *)this + 189))
  {
    *((void *)this + 7) = a2;
    if (!*((void *)this + 9)) {
      *((void *)this + 9) = a2;
    }
    *((unsigned char *)this + 189) = 0;
  }
  *(void *)int v4 = 0;
  *((void *)v4 + 1) = 0;
  *((_DWORD *)v4 + 4) = 0;
  if (!a2->var7) {
    MTFESpeechElement::SetPrevCousin(a2, *((MTFESpeechElement **)this + 12));
  }
  *((void *)this + 12) = a2;
}

MTFESpeechElement *MTFEMarkStress::VisitIntermediatePhrase(MTFEMarkStress *this, MTFESpeechElement *a2)
{
  uint64_t v2 = a2;
  *((void *)this + 18) = a2;
  do
  {
    float result = MTFESpeechElement::VisitChildren(v2, this);
    BOOL v5 = v2 == *((MTFESpeechElement **)this + 18);
    uint64_t v2 = (MTFESpeechElement *)*((void *)this + 18);
  }
  while (!v5);
  return result;
}

MTFESpeechElement *MTFEMarkStress::VisitWord(MTFEMarkStress *this, MTFEWord *a2)
{
  *((unsigned char *)this + 158) = 0;
  *((void *)this + 13) = a2;
  MTFECommands::Visit((uint64_t)&a2->var18, (uint64_t)this);
  a2->var22 = *((_WORD *)this + 80);
  int v4 = *((unsigned __int8 *)this + 153);
  if (*((unsigned char *)this + 191)) {
    a2->var23 = *(_WORD *)(*((void *)this + 2) + 20);
  }
  MTFEMarkStress::CheckPitchChange((uint64_t)this, a2);
  if (*((unsigned char *)this + 158)) {
    a2->uint64_t var11 = 3;
  }
  if (!a2->var7) {
    *((_WORD *)this + 81) = *((_WORD *)this + 80);
  }
  uint64_t var11 = a2->var11;
  if ((var11 - 1) >= 2)
  {
    BOOL v6 = var11 == 3 || *(unsigned char *)(*((void *)this + 17) + 156) == 0;
    BOOL v7 = !v6;
    if (a2->var11 && !v7)
    {
      uint64_t v8 = *((void *)this + 18);
      if (*(MTFEWord **)(v8 + 16) != a2)
      {
        *(unsigned char *)(v8 + 80) = var11;
        if (a2->var15 != 31) {
          operator new();
        }
      }
      if (var11 >= 0xB && var11 != 16 && v8 != *(void *)(*(void *)(v8 + 32) + 16)) {
        operator new();
      }
      int8x16_t v9 = (int8x16_t)vdupq_n_s64(0x1F00000uLL);
      v9.i64[0] = var11 << 20;
      *(int8x16_t *)((char *)this + 168) = vorrq_s8(*(int8x16_t *)((char *)this + 168), v9);
    }
  }
  *((void *)this + 8) = 0;
  int v10 = (uint64_t *)((char *)this + 64);
  *((unsigned char *)this + 152) = 0;
  char v11 = 1;
  *((unsigned char *)this + 157) = 1;
  *((void *)this + 14) = a2;
  *((void *)this + 11) = 0;
  *((void *)this + 9) = 0;
  if (!*((unsigned char *)this + 153) && ((1 << a2->var15) & 0xA5273) == 0) {
    char v11 = SLWordTagSet::find(&a2->var17);
  }
  *((unsigned char *)this + 153) = v11;
  int var10 = a2->var10;
  *((unsigned char *)this + 154) = var10 == 1;
  if (v4)
  {
    *(_WORD *)((char *)this + 155) = 0;
  }
  else
  {
    *((unsigned char *)this + 155) = var10 == 2;
    *((unsigned char *)this + 156) = var10 == 4;
    if (var10 == 4)
    {
      *((unsigned char *)this + 155) = 1;
      a2->int var10 = 2;
    }
  }
  float result = MTFESpeechElement::VisitChildren((MTFESpeechElement *)a2, this);
  if (*((unsigned char *)this + 152)) {
    a2->var8 |= 0x20000u;
  }
  if (*((unsigned char *)this + 153))
  {
    if (!*((unsigned char *)this + 154)) {
      goto LABEL_40;
    }
  }
  else if (!*((unsigned char *)this + 154))
  {
    a2->int var10 = 2;
    goto LABEL_40;
  }
  uint64_t v14 = *v10;
  if (*v10 || (uint64_t v14 = *((void *)this + 9)) != 0 || (uint64_t v14 = *((void *)this + 11)) != 0)
  {
    *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 72) & 0xFFFFE3FF | 0x1000;
    ++*((_DWORD *)this + 41);
  }
LABEL_40:
  if (!a2->var1) {
    float result = (MTFESpeechElement *)(*((uint64_t (**)(MTFEWord *))a2->var0 + 2))(a2);
  }
  *((unsigned char *)this + 153) = 0;
  return result;
}

void sub_1DA4A2038(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C40D6D86DEFLL);
  _Unwind_Resume(a1);
}

void MTFEMarkStress::VisitPhoneme(MTFEMarkStress *this, MTFESpeechElement *a2)
{
  int v4 = BYTE2(a2[1].var0);
  char v5 = *(unsigned char *)(MEMORY[0x1E4FA5868] + BYTE2(a2[1].var0));
  int v6 = *(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * BYTE2(a2[1].var0));
  if (*((unsigned char *)this + 190))
  {
    if (!BYTE2(a2[1].var0)) {
      char v5 = 2;
    }
    *((unsigned char *)this + 190) = 0;
  }
  if ((v5 & 2) != 0)
  {
    switch(v4)
    {
      case ':':
        if (!*((unsigned char *)this + 152))
        {
          uint64_t v9 = *((void *)this + 22) | 0x1C00;
          *((void *)this + 21) = *((void *)this + 21) & 0xFFFFE3FFLL | 0x800;
          *((void *)this + 22) = v9;
        }
        *((unsigned char *)this + 189) = 1;
        goto LABEL_43;
      case ';':
        uint64_t v10 = *((void *)this + 22) | 0x1C00;
        *((void *)this + 21) = *((void *)this + 21) & 0xFFFFE3FFLL | 0x1000;
        *((void *)this + 22) = v10;
        ++*((_DWORD *)this + 41);
        goto LABEL_43;
      case '<':
        uint64_t v11 = *((void *)this + 10);
        if (v11 && *((void *)this + 11)) {
          *(_DWORD *)(v11 + 72) |= 0x80000000;
        }
        uint64_t v12 = *((void *)this + 21) | 0x10000000;
        goto LABEL_38;
      case '=':
        *((unsigned char *)this + 152) = 1;
        goto LABEL_43;
      case '>':
        char v13 = *((unsigned char *)this + 185) + 1;
        goto LABEL_32;
      case '?':
        char v13 = *((unsigned char *)this + 185) - 1;
LABEL_32:
        *((unsigned char *)this + 185) = v13;
        goto LABEL_43;
      case '@':
        char v14 = *((unsigned char *)this + 184) + 1;
        goto LABEL_35;
      case 'A':
        char v14 = *((unsigned char *)this + 184) - 1;
LABEL_35:
        *((unsigned char *)this + 184) = v14;
        goto LABEL_43;
      case 'B':
        uint64_t v12 = *((void *)this + 21) | 0x20000;
        goto LABEL_38;
      case 'C':
        uint64_t v12 = *((void *)this + 21) | 0x40000;
LABEL_38:
        *((void *)this + 21) = v12;
        goto LABEL_43;
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
        MTFEMarkStress::AdjustParameters(this, a2);
        BYTE2(a2[1].var0) = 0;
        LODWORD(a2[1].var3) |= 0x80000u;
        *(unsigned char *)(*((void *)this + 17) + 158) = v4;
        *((unsigned char *)this + 190) = 1;
        return;
      case 'I':
        goto LABEL_43;
      case 'J':
        *((unsigned char *)this + 154) = 1;
        goto LABEL_40;
      case 'K':
LABEL_40:
        unsigned int v16 = (uint64_t *)((char *)this + 168);
        uint64_t v15 = *((void *)this + 21);
        *((unsigned char *)this + 153) = 1;
        *((void *)this + 11) = 0;
        goto LABEL_42;
      default:
        if (v4 == 2)
        {
          unsigned int v16 = (uint64_t *)((char *)this + 168);
          uint64_t v15 = *((void *)this + 21);
          int v17 = *((unsigned __int8 *)this + 153);
          *((void *)this + 11) = 0;
          *((void *)this + 21) = v15 | 0x10000;
          if (v17) {
LABEL_42:
          }
            *unsigned int v16 = v15 | 0x12000;
        }
        else if (v4 == 1)
        {
          uint64_t v7 = *((void *)this + 21) & 0xFFFFE3FFLL;
          if (*((unsigned char *)this + 152) || !*((unsigned char *)this + 153) || *((unsigned char *)this + 155))
          {
            *((void *)this + 21) = v7 | 0x800;
            char v8 = *((unsigned char *)this + 156);
            *((unsigned char *)this + 189) = v8;
          }
          else
          {
            *((void *)this + 21) = v7 | 0x400;
            ++*((_DWORD *)this + 41);
            char v8 = *((unsigned char *)this + 156);
          }
          *((void *)this + 22) |= 0x1C00uLL;
          *((unsigned char *)this + 188) = v8 ^ 1;
        }
LABEL_43:
        float v18 = (void (*)(MTFESpeechElement *))*((void *)a2->var0 + 2);
        v18(a2);
        break;
    }
  }
  else
  {
    if (v6)
    {
      *((unsigned char *)this + 157) = 0;
      *((void *)this + 10) = a2;
      if (!*((void *)this + 11)) {
        *((void *)this + 11) = a2;
      }
    }
    else if (*((unsigned char *)this + 157))
    {
      LODWORD(a2[1].var3) |= 0x80u;
    }
    MTFEMarkStress::AdjustParameters(this, a2);
  }
}

uint64_t MTFEMarkStress::VisitCommand(uint64_t this, MTFECommand *a2)
{
  uint64_t v3 = this;
  int64_t var8 = a2->var8;
  if (var8 <= 1918989425)
  {
    if (var8 > 1885495665)
    {
      if ((unint64_t)(var8 - 1885495666) < 2)
      {
        *(unsigned char *)(this + 128) = 1;
        return this;
      }
      if (var8 == 1918989413)
      {
        if (*(unsigned char *)(this + 191))
        {
          uint64_t v12 = *(void *)(this + 16);
          int v13 = SWORD1(a2->var9);
LABEL_32:
          MTBEParam::SetTempo(v12, v13);
          goto LABEL_49;
        }
        int v10 = *(_DWORD *)((char *)&a2->var9 + 2);
LABEL_41:
        if (v10 <= 40) {
          LOWORD(v10) = 40;
        }
LABEL_43:
        *(_WORD *)(this + 160) = v10;
        goto LABEL_49;
      }
      return this;
    }
    if (var8 != 1835102827)
    {
      if (var8 != 1852798053) {
        return this;
      }
      *(_WORD *)(this + 186) = a2->var9 & 0xF00 | BYTE2(LODWORD(a2->var9));
      uint64_t v9 = *(void *)(this + 8);
      *(unsigned char *)(*(void *)(this + 16) + 48) = 1;
      LOWORD(v10) = *(_WORD *)(v9 + 90);
      goto LABEL_43;
    }
    goto LABEL_49;
  }
  if (var8 > 1936485986)
  {
    if (var8 == 1936485987)
    {
      uint64_t v14 = *(void *)(this + 104);
      if (v14)
      {
        uint64_t v15 = *(void *)(v14 + 48);
        BOOL v16 = *(unsigned __int8 *)(v14 + 63) > 2u || v15 == 0;
        if (!v16
          && (*(unsigned char *)(v15 + 56) & 0x40) == 0
          && MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFESilencePhrase))
        {
          operator new();
        }
      }
      if (a2->var9 >= 1) {
        operator new();
      }
      goto LABEL_49;
    }
    if (var8 != 1953329263)
    {
      if (var8 != 1953456745) {
        return this;
      }
      unint64_t var9 = a2->var9;
      float v6 = (float)(var9 & 0xFFFFFF) * 0.000015259;
      unint64_t v7 = var9 >> 24;
      if ((v7 - 1) < 3)
      {
        uint64_t v17 = *(void *)(this + 144);
        *(unsigned char *)(v17 + 81) = v7;
        *(float *)(v17 + 84) = v6;
        *(unsigned char *)(this + 158) = 1;
      }
      else
      {
        if ((v7 - 5) < 2)
        {
          uint64_t v8 = *(void *)(this + 136);
          *(unsigned char *)(v8 + 157) = v7;
          *(float *)(v8 + 200) = v6;
          goto LABEL_49;
        }
        if (v7 != 4)
        {
          *(unsigned char *)(this + 153) = 1;
          return this;
        }
      }
      *(unsigned char *)(*(void *)(this + 136) + 156) = 1;
    }
LABEL_49:
    float v18 = (uint64_t (*)(MTFECommand *))*((void *)a2->var0 + 2);
    return v18(a2);
  }
  if (var8 == 1918989426)
  {
    if (*(unsigned char *)(this + 191))
    {
      uint64_t v12 = *(void *)(this + 16);
      int v13 = (__int16)(*(_WORD *)(v12 + 20) + WORD1(a2->var9));
      goto LABEL_32;
    }
    int v10 = (__int16)(*(_WORD *)(this + 160) + WORD1(a2->var9));
    goto LABEL_41;
  }
  if (var8 == 1920165236)
  {
    if (*(unsigned char *)(*(void *)(this + 16) + 48))
    {
      __int16 v11 = *(_WORD *)(*(void *)(this + 8) + 90);
    }
    else
    {
      this = *(void *)(this + 24);
      if (this && a2->var9 == 1)
      {
        this = MTBEParam::GetRate((MTBEParam *)this);
        *(_WORD *)(v3 + 160) = this;
        return this;
      }
      __int16 v11 = *(_WORD *)(*(void *)(v3 + 8) + 6);
    }
    *(_WORD *)(v3 + 160) = v11;
  }
  return this;
}

void sub_1DA4A2874(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C4085E5C4E0);
  _Unwind_Resume(a1);
}

void MTFEMarkStress::~MTFEMarkStress(MTFEMarkStress *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

MTFESpeechElement *MTFEConnectedSpeech::VisitIntonationalPhrase(MTFETrackingVisitor *this, MTFESpeechElement *a2)
{
  *((unsigned char *)this + 168) = 0;
  uint64_t v2 = (unsigned int *)MEMORY[0x1E4FA5870];
  *((unsigned char *)this + 192) = 0;
  uint64_t v3 = *v2;
  *((void *)this + 25) = v3;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = v3;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = v3;
  *((void *)this + 5) = 0;
  *(_WORD *)((char *)this + 83) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((unsigned char *)this + 82) = a2[3].var6 != 0;
  return MTFETrackingVisitor::VisitIntonationalPhrase(this, a2);
}

MTFESpeechElement *MTFEConnectedSpeech::VisitIntermediatePhrase(MTFETrackingVisitor *this, MTFESpeechElement *a2)
{
  *((unsigned char *)this + 80) = 1;
  return MTFETrackingVisitor::VisitIntermediatePhrase(this, a2);
}

MTFESpeechElement *MTFEConnectedSpeech::VisitWord(MTFEConnectedSpeech *this, MTFESpeechElement *a2)
{
  *((void *)this + 4) = a2;
  *((unsigned char *)this + 78) = (uint64_t)a2[1].var0 & 1;
  *((unsigned char *)this + 79) = SLWordTagSet::find((SLWordTagSet *)((char *)&a2[1].var5 + 4));
  *((unsigned char *)this + 81) = a2->var6 == 0;

  return MTFETrackingVisitor::VisitWord(this, a2);
}

MTFESpeechElement *MTFEConnectedSpeech::VisitSyllable(MTFEConnectedSpeech *this, MTFESpeechElement *a2)
{
  char v3 = *((unsigned char *)this + 81);
  if (v3 && a2->var6) {
    *((unsigned char *)this + 81) = 0;
  }
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = a2;
  *((void *)this + 6) = v4;
  float result = MTFETrackingVisitor::VisitSyllable(this, a2);
  *((unsigned char *)this + 81) = v3;
  return result;
}

uint64_t MTFEConnectedSpeech::AddTag(MTFEConnectedSpeech *this, int a2)
{
  uint64_t v4 = (SLWordTagSet *)(*((void *)this + 4) + 92);
  if ((SLWordTagSet::find(v4) & 1) == 0)
  {
    uint64_t v5 = v4->var0[0];
    if (v5 <= 6)
    {
      uint64_t v6 = v5 + 1;
      v4->var0[0] = v6;
      v4->var0[v6] = a2;
    }
  }
  uint64_t v7 = *((void *)this + 4) + 92;

  return MEMORY[0x1F415B228](v7, a2 ^ 1u);
}

uint64_t MTFEConnectedSpeech::VisitPhoneme(MTFEConnectedSpeech *this, MTFEPhoneme *a2)
{
  MTFETrackingVisitor::PrePhoneme((uint64_t)this, a2);
  uint64_t v5 = *((void *)this + 7);
  uint64_t v6 = (MTFESpeechElement *)*((void *)this + 8);
  uint64_t v7 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
  uint64_t v8 = MEMORY[0x1E4FA5870];
  if (*(_OWORD *)((char *)this + 56) == 0)
  {
    uint64_t var9 = a2->var9;
    *((unsigned char *)this + 104) = var9;
    *((void *)this + 14) = a2->var15;
    var6 = a2->var6;
    if (!var6) {
      var6 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
    }
    uint64_t v11 = BYTE2(var6[1].var0);
    *((unsigned char *)this + 128) = v11;
    *((void *)this + 17) = LODWORD(var6[1].var3);
    uint64_t v12 = var6->var6;
    if (!v12) {
      uint64_t v12 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
    }
    *((unsigned char *)this + 152) = BYTE2(v12[1].var0);
    *((void *)this + 20) = LODWORD(v12[1].var3);
    int v13 = v12->var6;
    if (v13) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
    }
    *((void *)this + 8) = v6;
    *((void *)this + 15) = *(unsigned int *)(v8 + 4 * var9);
    *((void *)this + 18) = *(unsigned int *)(v8 + 4 * v11);
  }
  *((unsigned char *)this + 208) = *((unsigned char *)this + 192);
  uint64_t v14 = *((void *)this + 25);
  *((void *)this + 27) = v14;
  int v15 = *((unsigned __int8 *)this + 168);
  *((unsigned char *)this + 192) = v15;
  uint64_t v16 = *((void *)this + 23);
  *((void *)this + 25) = v16;
  int v17 = *((unsigned __int8 *)this + 84);
  *((unsigned char *)this + 168) = v17;
  *((_OWORD *)this + 11) = *(_OWORD *)((char *)this + 88);
  unsigned int v18 = *((unsigned __int8 *)this + 104);
  *((unsigned char *)this + 84) = v18;
  long long v19 = *((_OWORD *)this + 7);
  *(_OWORD *)((char *)this + 88) = v19;
  int v20 = *((unsigned __int8 *)this + 128);
  *((unsigned char *)this + 104) = v20;
  uint64_t v21 = *((void *)this + 18);
  *((void *)this + 14) = *((void *)this + 17);
  *((void *)this + 15) = v21;
  uint64_t v22 = *((unsigned __int8 *)this + 152);
  *((unsigned char *)this + 128) = v22;
  *((void *)this + 17) = *((void *)this + 20);
  *((void *)this + 18) = *(unsigned int *)(v8 + 4 * v22);
  *((unsigned char *)this + 152) = BYTE2(v6[1].var0);
  *((void *)this + 20) = LODWORD(v6[1].var3);
  BOOL v23 = v6->var6;
  if (v23) {
    uint64_t v7 = v23;
  }
  *((void *)this + 8) = v7;
  if (!*((unsigned char *)this + 76))
  {
    if (v18 == 33)
    {
      char v24 = 0;
      if ((v19 & 0x1C80) == 0 && (v17 & 0xFE) == 0xA)
      {
        *(unsigned char *)(v5 + 58) = 28;
        goto LABEL_227;
      }
LABEL_33:
      uint64_t v27 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kRhotacizeAX);
      if (v27 && *((unsigned char *)this + 84) == 32 && *((unsigned char *)this + 168) == 11) {
        *(unsigned char *)(*((void *)this + 7) + 58) = 12;
      }
      uint64_t v28 = *((void *)this + 11);
      if ((v28 & 0x10001C80) == 0 && (*((unsigned char *)this + 184) & 8) != 0)
      {
        int v29 = *((unsigned __int8 *)this + 84);
        if (v29 == 33)
        {
          unsigned int v18 = 27;
        }
        else if (v29 == 32)
        {
          unsigned int v18 = 26;
          switch(*((unsigned char *)this + 168))
          {
            case 3:
            case 4:
              uint64_t v30 = *((void *)this + 7);
              char v31 = 20;
              goto LABEL_67;
            case 5:
            case 6:
            case 0xD:
              if (*((unsigned char *)this + 76))
              {
                unsigned int v18 = 26;
                goto LABEL_75;
              }
              uint64_t v30 = *((void *)this + 7);
              char v31 = 21;
LABEL_67:
              *(unsigned char *)(v30 + 58) = v31;
              unsigned int v18 = 26;
              char v24 = 1;
              break;
            case 7:
              uint64_t v30 = *((void *)this + 7);
              char v31 = 22;
              goto LABEL_67;
            case 8:
            case 0xB:
              uint64_t v30 = *((void *)this + 7);
              char v31 = 12;
              goto LABEL_67;
            case 9:
            case 0x11:
              uint64_t v30 = *((void *)this + 7);
              char v31 = 23;
              goto LABEL_67;
            case 0xA:
            case 0x12:
              uint64_t v30 = *((void *)this + 7);
              char v31 = 24;
              goto LABEL_67;
            default:
              break;
          }
        }
      }
      if (!*((unsigned char *)this + 76)
        && (*((unsigned char *)this + 176) & 0x80) != 0
        && *((unsigned char *)this + 168) == 31
        && *((unsigned char *)this + 104) != 32
        && (v28 & 0xF) != 0
        && *((unsigned char *)this + 84) == 18)
      {
        uint64_t v32 = *((void *)this + 7);
        *(unsigned char *)(v32 + 58) = 19;
        *(_DWORD *)(v32 + 72) = *(_DWORD *)(v32 + 72) & 0xFFFFE000 | (unsigned __int16)v28;
        char v24 = 1;
      }
LABEL_75:
      if (*((unsigned char *)this + 78)) {
        goto LABEL_146;
      }
      if (*((unsigned char *)this + 168) != 41) {
        goto LABEL_109;
      }
      if ((*((unsigned char *)this + 176) & 0x80) == 0 || (v28 & 0xF) == 0 || *((unsigned char *)this + 84) != 11) {
        goto LABEL_108;
      }
      LODWORD(v33) = *((unsigned __int8 *)this + 104);
      if (!*((unsigned char *)this + 104))
      {
        uint64_t v27 = MTFEConnectedSpeech::PrecedingQuote((MTFEConnectedSpeech *)v27, (MTFESpeechElement *)a2);
        if (v27)
        {
          MTFESpeechPedigree::MTFESpeechPedigree((MTFESpeechPedigree *)v87, (MTFESpeechElement *)a2);
          int v34 = *(void **)(*(void *)&v87[1] + 40);
          do
          {
            int v35 = v34;
            int v34 = (void *)v34[2];
          }
          while (v34);
          uint64_t v36 = (unsigned __int8 *)&MTFEPhonemeFlags::sSIL;
          while (!*((unsigned char *)v35 + 58))
          {
            int v35 = (void *)v35[5];
            if (!v35)
            {
              int v35 = &MTFEPhonemeFlags::sSIL;
              break;
            }
          }
          uint64_t v33 = *((unsigned __int8 *)v35 + 58);
          LODWORD(v37) = *(_DWORD *)(v8 + 4 * v33);
          unsigned int v38 = (void *)v35[5];
          if (!v38) {
            unsigned int v38 = &MTFEPhonemeFlags::sSIL;
          }
          unsigned int v39 = *((unsigned __int8 *)v38 + 58);
          LODWORD(v40) = *(_DWORD *)(v8 + 4 * *((unsigned __int8 *)v38 + 58));
          __int16 v41 = (unsigned __int8 *)v38[5];
          if (v41) {
            uint64_t v36 = v41;
          }
          unsigned int v42 = v36[58];
          MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v87);
          unsigned int v43 = v42;
LABEL_95:
          if (v37)
          {
            int v44 = 3;
            LODWORD(v4) = 1032;
            goto LABEL_107;
          }
          int v44 = 25;
          uint64_t v4 = 1034;
          if (v33 == 19 || v33 == 31 || v33 == 34 && ((v40 & 0x200000) != 0 || v39 == 31)) {
            goto LABEL_107;
          }
          if ((v37 & 2) != 0)
          {
            if (v39 > 0x1F) {
              goto LABEL_299;
            }
            if (((1 << v39) & 0x2102018) == 0)
            {
              if (((1 << v39) & 0x40060) == 0)
              {
                if (((1 << v39) & 0x80080000) != 0) {
                  goto LABEL_107;
                }
                goto LABEL_299;
              }
              goto LABEL_294;
            }
          }
          else
          {
            if (v39 > 0x19) {
              goto LABEL_299;
            }
            if (((1 << v39) & 0x2102018) == 0)
            {
              if (((1 << v39) & 0x40060) == 0) {
                goto LABEL_299;
              }
LABEL_294:
              char v81 = v33 - 36;
              if ((v33 - 36) < 0x12)
              {
                unsigned int v82 = 209825;
                goto LABEL_298;
              }
              goto LABEL_299;
            }
          }
          char v81 = v33 - 30;
          if ((v33 - 30) < 0x18)
          {
            unsigned int v82 = 16777189;
LABEL_298:
            if ((v82 >> v81)) {
              goto LABEL_107;
            }
          }
LABEL_299:
          if (v43 > 0x1F) {
            goto LABEL_108;
          }
          if (((1 << v43) & 0x82102018) != 0)
          {
            switch((int)v33)
            {
              case '&':
              case '/':
              case '3':
                if ((v39 & 0xFE) != 0x20) {
                  goto LABEL_318;
                }
                goto LABEL_107;
              case '\'':
              case '(':
                if (v39 == 32) {
                  goto LABEL_107;
                }
                goto LABEL_108;
              case '*':
                if (v39 > 0x32) {
                  goto LABEL_108;
                }
                uint64_t v83 = 1 << v39;
                uint64_t v85 = 0x401A40000000;
                goto LABEL_337;
              case ',':
                if (v39 > 0x32) {
                  goto LABEL_108;
                }
                uint64_t v83 = 1 << v39;
                uint64_t v85 = 0x400000000000;
LABEL_337:
                uint64_t v84 = v85 & 0xFFFFFFFFFFFFLL | 0x5000000000000;
                break;
              case '.':
              case '0':
              case '1':
              case '2':
                if (v39 > 0x2D) {
                  goto LABEL_108;
                }
                uint64_t v83 = 1 << v39;
                uint64_t v84 = 0x300140000000;
                break;
              default:
                goto LABEL_108;
            }
LABEL_338:
            if ((v83 & v84) == 0) {
              goto LABEL_108;
            }
LABEL_107:
            uint64_t v27 = MTFEConnectedSpeech::AddTag(this, v4);
            unsigned int v18 = v44;
            goto LABEL_108;
          }
          if (((1 << v43) & 0x40060) == 0) {
            goto LABEL_108;
          }
LABEL_318:
          if (v33 == 42 && v39 <= 0x2E)
          {
            uint64_t v83 = 1 << v39;
            uint64_t v84 = 0x400A00000000;
            goto LABEL_338;
          }
LABEL_108:
          if (*((unsigned char *)this + 78))
          {
LABEL_146:
            int v55 = 0;
            goto LABEL_147;
          }
LABEL_109:
          unsigned int v45 = v18;
          if (*((unsigned char *)this + 84) != 11) {
            goto LABEL_144;
          }
          uint64_t v46 = *((void *)this + 11);
          if ((v46 & 0xF) == 0 || (v46 & 0x11C00) != 0x10000) {
            goto LABEL_144;
          }
          int v47 = *((unsigned __int8 *)this + 104);
          if (!*((unsigned char *)this + 104))
          {
            if (MTFEConnectedSpeech::PrecedingQuote((MTFEConnectedSpeech *)v27, (MTFESpeechElement *)a2))
            {
              MTFESpeechPedigree::MTFESpeechPedigree((MTFESpeechPedigree *)v87, (MTFESpeechElement *)a2);
              float v48 = *(void **)(*(void *)&v87[1] + 40);
              do
              {
                __int16 v49 = v48;
                float v48 = (void *)v48[2];
              }
              while (v48);
              while (!*((unsigned char *)v49 + 58))
              {
                __int16 v49 = (void *)v49[5];
                if (!v49)
                {
                  __int16 v49 = &MTFEPhonemeFlags::sSIL;
                  break;
                }
              }
              int v47 = *((unsigned __int8 *)v49 + 58);
              LODWORD(v50) = *(_DWORD *)(v8 + 4 * *((unsigned __int8 *)v49 + 58));
              uint64_t v51 = (unsigned __int8 *)v49[5];
              if (!v51) {
                uint64_t v51 = (unsigned __int8 *)&MTFEPhonemeFlags::sSIL;
              }
              unsigned int v52 = v51[58];
              LODWORD(v53) = *(_DWORD *)(v8 + 4 * v51[58]);
              MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v87);
              goto LABEL_124;
            }
            int v47 = *((unsigned __int8 *)this + 104);
          }
          uint64_t v50 = *((void *)this + 15);
          unsigned int v52 = *((unsigned __int8 *)this + 128);
          uint64_t v53 = *((void *)this + 18);
LABEL_124:
          unsigned int v18 = 25;
          if (v47 > 48)
          {
            if ((v47 - 52) < 2) {
              goto LABEL_145;
            }
            if (v47 == 49 && v52 == 45) {
              goto LABEL_143;
            }
          }
          else
          {
            if (v47 == 31) {
              goto LABEL_145;
            }
            if (v47 == 34)
            {
              unsigned int v18 = 25;
              if ((v53 & 0x200000) != 0 || v52 == 31) {
                goto LABEL_145;
              }
            }
            else if (v47 == 48 && v52 == 44)
            {
              goto LABEL_143;
            }
          }
          unsigned int v54 = *((unsigned __int8 *)this + 168);
          if (v54 <= 0x35 && ((1 << v54) & 0x330F100000E008) != 0)
          {
            if ((v50 & 0x2000) != 0)
            {
LABEL_143:
              unsigned int v18 = 25;
              goto LABEL_145;
            }
            if (v47 <= 0x33 && ((1 << v47) & 0xC400000000000) != 0 && v52 <= 0x19)
            {
              unsigned int v18 = v45;
              if (((1 << v52) & 0x2100038) != 0) {
                goto LABEL_143;
              }
LABEL_145:
              if (*((unsigned char *)this + 78)) {
                goto LABEL_146;
              }
              if (*((unsigned char *)this + 84) != 48) {
                goto LABEL_327;
              }
              if (*((unsigned char *)this + 104) != 18) {
                goto LABEL_327;
              }
              uint64_t v61 = *((void *)this + 14);
              if ((v61 & 0xF) == 0) {
                goto LABEL_327;
              }
              int v55 = 1;
              if ((v61 & 0x1C00) != 0 || (*((void *)this + 11) & 0x10000) == 0)
              {
LABEL_147:
                if (*((unsigned char *)this + 76))
                {
                  int v25 = 0;
                  goto LABEL_149;
                }
                if ((*((unsigned char *)this + 96) & 1) != 0
                  && (*((unsigned char *)this + 120) & 1) != 0
                  && (*((unsigned char *)this + 113) & 0x1C) != 0)
                {
                  int v25 = *((unsigned char *)this + 88) & 1;
                  if (!v55) {
                    goto LABEL_163;
                  }
                }
                else
                {
                  int v25 = 0;
                  if (!v55)
                  {
LABEL_163:
                    int v56 = *((unsigned __int8 *)this + 84);
                    if (v56 == 48)
                    {
                      int v57 = *((unsigned __int8 *)this + 104);
                      goto LABEL_165;
                    }
                    goto LABEL_176;
                  }
                }
                if (!*((unsigned char *)this + 82))
                {
                  int v57 = *((unsigned __int8 *)this + 104);
                  if ((v57 == 31 || v57 == 19) && (*((unsigned char *)this + 113) & 0x1C) == 0)
                  {
                    int v56 = *((unsigned __int8 *)this + 84);
                    if (v56 == 48) {
                      goto LABEL_165;
                    }
                    if (v56 == 49)
                    {
                      unsigned int v18 = 53;
                      goto LABEL_226;
                    }
                    goto LABEL_176;
                  }
                }
LABEL_149:
                int v56 = *((unsigned __int8 *)this + 84);
                if (v56 == 48)
                {
                  int v57 = *((unsigned __int8 *)this + 104);
                  if (v57 == 10) {
                    int v58 = v55;
                  }
                  else {
                    int v58 = 0;
                  }
                  if (v58 == 1)
                  {
                    if ((*((unsigned char *)this + 112) & 0xF) != 0
                      && (*((unsigned char *)this + 89) & 0x1C) != 0
                      && (!*((unsigned char *)this + 128) || (*((unsigned char *)this + 144) & 1) != 0))
                    {
                      int v57 = 18;
                      *((unsigned char *)this + 104) = 18;
                      goto LABEL_207;
                    }
                    int v57 = 10;
LABEL_183:
                    if ((*((unsigned char *)this + 88) & 0xF) != 0)
                    {
                      int v60 = (v57 != 29) & *((unsigned char *)this + 121);
                      if (v57 == 34) {
                        int v60 = 1;
                      }
                      if (!*((unsigned char *)this + 76) && v60) {
                        goto LABEL_188;
                      }
LABEL_207:
                      if (*((unsigned char *)this + 79) && *((unsigned __int8 *)this + 168) - 35 < 3
                        || (v57 == 25 || v57 == 11) && *((unsigned char *)this + 128) == 36)
                      {
                        goto LABEL_214;
                      }
                      unsigned int v65 = *((unsigned __int8 *)this + 168);
                      if (v65 <= 0x21 && ((1 << v65) & 0x218000000) != 0) {
                        goto LABEL_214;
                      }
                      if (v55)
                      {
                        if (v57 <= 0x19 && ((1 << v57) & 0x2040C00) != 0)
                        {
                          uint64_t v78 = *((void *)this + 14);
                          if ((v78 & 0xF) != 0
                            && (v78 & 0x1C00) == 0
                            && (*((void *)this + 11) & 0x10000) != 0
                            && v65 <= 0x20
                            && ((1 << v65) & 0x105F01000) != 0)
                          {
                            goto LABEL_214;
                          }
                        }
                      }
                      if ((*((unsigned char *)this + 120) & 1) == 0
                        || (*(_DWORD *)(v8 + 4 * *((unsigned __int8 *)this + 83)) & 0x50) != 0x10)
                      {
                        goto LABEL_214;
                      }
                      uint64_t v79 = *((void *)this + 14);
                      if ((v79 & 0x10000) != 0)
                      {
                        if (*((unsigned char *)this + 81)) {
                          goto LABEL_214;
                        }
                      }
                      else
                      {
                        if ((*((_WORD *)this + 44) & 0x1C80) != 0) {
                          goto LABEL_214;
                        }
                        if (v57 <= 24)
                        {
                          switch(v57)
                          {
                            case 8:
                            case 11:
                              if ((v79 & 0x1C00) == 0 && *((unsigned char *)this + 128) == 32) {
                                goto LABEL_305;
                              }
                              if (v57 == 11) {
                                goto LABEL_341;
                              }
                              goto LABEL_214;
                            case 9:
                            case 10:
                            case 13:
                            case 14:
                            case 15:
                            case 16:
                              goto LABEL_214;
                            case 12:
                              goto LABEL_305;
                            case 17:
                              uint64_t v86 = *((void *)this + 7);
                              if (v86
                                && (*(unsigned char *)(v86 + 73) & 0x1C) != 0
                                && (*((unsigned char *)this + 128) != 32 || (*((unsigned char *)this + 136) & 0x80) != 0))
                              {
                                goto LABEL_305;
                              }
                              goto LABEL_214;
                            default:
                              if (v57 == 3) {
                                goto LABEL_341;
                              }
                              goto LABEL_214;
                          }
                        }
                        if (v57 != 25 && v57 != 28) {
                          goto LABEL_214;
                        }
LABEL_341:
                        if (*((unsigned char *)this + 128) == 32)
                        {
                          if ((v79 & 0x400) != 0 || (*((void *)this + 17) & 0x80) == 0) {
                            goto LABEL_214;
                          }
                        }
                        else if ((v79 & 0x400) != 0)
                        {
                          goto LABEL_214;
                        }
                      }
LABEL_305:
                      if ((v24 & 1) == 0) {
                        goto LABEL_234;
                      }
                      goto LABEL_227;
                    }
                    if (v57 != 29)
                    {
                      if (v57 != 25 || *((unsigned char *)this + 76) || *((unsigned char *)this + 128) != 36) {
                        goto LABEL_207;
                      }
LABEL_188:
                      if ((*(_DWORD *)(v8 + 4 * *((unsigned __int8 *)this + 83)) & 0x10) != 0)
                      {
                        unsigned int v18 = 54;
                      }
                      else if (v55)
                      {
                        unsigned int v18 = 49;
                      }
LABEL_226:
                      if (v24) {
                        goto LABEL_227;
                      }
                      if (v18 == 55)
                      {
LABEL_234:
                        if (a2->var9 != 55) {
                          MTFEDuration::AdjustDurationForFlap((uint64_t)a2, (MTFEPhoneme *)v4);
                        }
                        int v26 = 0;
                        LOBYTE(v18) = 55;
                        goto LABEL_285;
                      }
LABEL_284:
                      int v26 = 0;
                      goto LABEL_285;
                    }
LABEL_166:
                    if (*((unsigned char *)this + 76)) {
                      goto LABEL_207;
                    }
                    goto LABEL_188;
                  }
LABEL_165:
                  if ((v57 | 8) == 0x29) {
                    goto LABEL_166;
                  }
                  goto LABEL_183;
                }
LABEL_176:
                if (v56 != 41 || (*((unsigned char *)this + 89) & 4) != 0) {
                  goto LABEL_214;
                }
                int v59 = *(unsigned __int8 *)(*((void *)this + 7) + 58);
                if ((v59 - 48) >= 2)
                {
                  if (v59 == 36)
                  {
                    if (!*((unsigned char *)this + 80) && !*((unsigned char *)this + 82))
                    {
                      LOBYTE(v18) = 36;
                      goto LABEL_283;
                    }
LABEL_214:
                    if (v18 != 11) {
                      goto LABEL_226;
                    }
                    unsigned int v66 = *((unsigned __int8 *)this + 168);
                    if (!*((unsigned char *)this + 168) || (unsigned int v67 = *((unsigned __int8 *)this + 104), !*((unsigned char *)this + 104)))
                    {
                      unsigned int v18 = 11;
                      goto LABEL_226;
                    }
                    if (v66 > 0x37)
                    {
LABEL_248:
                      LOBYTE(v18) = 11;
                      if (v67 > 0x1F || ((1 << v67) & 0x80000018) == 0) {
                        goto LABEL_282;
                      }
                      goto LABEL_281;
                    }
                    if (((1 << v66) & 0x830F1000000000) != 0)
                    {
                      LOBYTE(v18) = 11;
                      if (v67 <= 0x35)
                      {
                        if (((1 << v67) & 0x30F1080000018) == 0)
                        {
                          if (((1 << v67) & 0x30300000000000) != 0)
                          {
                            if (v66 == 55) {
                              LOBYTE(v18) = 11;
                            }
                            else {
                              LOBYTE(v18) = 25;
                            }
                          }
                          goto LABEL_282;
                        }
                        goto LABEL_281;
                      }
LABEL_282:
                      *((unsigned char *)this + 84) = v18;
LABEL_283:
                      if ((v24 & 1) == 0) {
                        goto LABEL_284;
                      }
LABEL_227:
                      uint64_t v68 = *((void *)this + 7);
                      if (!v68)
                      {
LABEL_245:
                        MTFETrackingVisitor::DelPhoneme((uint64_t)this);
                        *((_DWORD *)this + 18) += a2->var11;
                        (*((void (**)(MTFEPhoneme *))a2->var0 + 2))(a2);
                        goto LABEL_290;
                      }
                      *(_WORD *)(v68 + 60) += a2->var11;
                      if (*((unsigned char *)this + 78))
                      {
                        v69 = *(MTFEPitchTargets **)(v68 + 80);
                        if (!v69) {
                          operator new();
                        }
                        int v70 = (int)*(float *)(v68 + 64);
                        SLWordTagSet var17 = a2->var17;
                        if (var17)
                        {
                          long long v72 = *((_OWORD *)var17 + 1);
                          v87[0] = *(_OWORD *)var17;
                          v87[1] = v72;
                          long long v73 = *((_OWORD *)var17 + 2);
                          long long v74 = *((_OWORD *)var17 + 3);
                          long long v75 = *((_OWORD *)var17 + 4);
                          *(void *)&v87[5] = *((void *)var17 + 10);
                          v87[3] = v74;
                          v87[4] = v75;
                          v87[2] = v73;
                        }
                        else
                        {
                          LODWORD(v87[0]) = 0;
                          memset((char *)v87 + 8, 0, 80);
                        }
                        MTFEPitchTargets::CombineWithTargets(v69, v70, (const MTFEPitchTargets *)v87, (int)a2->var13);
                      }
                      if (*((unsigned char *)this + 77) || *((unsigned char *)this + 78))
                      {
                        uint64_t v76 = *((void *)this + 7);
                        float var13 = a2->var13 + *(float *)(v76 + 64);
                      }
                      else
                      {
                        float var13 = a2->var13;
                        if (var13 >= 0.9999 && var13 <= 1.0001)
                        {
LABEL_243:
                          if ((*((unsigned char *)this + 91) & 0x10) != 0) {
                            LODWORD(a2->var6[1].var3) |= 0x10000000u;
                          }
                          goto LABEL_245;
                        }
                        uint64_t v76 = *((void *)this + 7);
                      }
                      *(float *)(v76 + 64) = var13;
                      goto LABEL_243;
                    }
                    if (((1 << v66) & 0xE000) != 0)
                    {
                      if (*((unsigned char *)this + 114))
                      {
                        LOBYTE(v18) = 11;
                        if (v67 > 0x35) {
                          goto LABEL_282;
                        }
                        if (((1 << v67) & 0x330F1282182078) != 0) {
                          goto LABEL_281;
                        }
                        if (((1 << v67) & 0x400400000000) == 0) {
                          goto LABEL_282;
                        }
                        if ((*((unsigned char *)this + 146) & 0x20) != 0 || *((unsigned char *)this + 128) == 20) {
                          goto LABEL_281;
                        }
                        goto LABEL_275;
                      }
                    }
                    else if (((1 << v66) & 0x80000018) == 0)
                    {
                      goto LABEL_248;
                    }
                    if (v67 != 32 || (*((unsigned char *)this + 115) & 0x10) != 0)
                    {
LABEL_281:
                      LOBYTE(v18) = 25;
                      goto LABEL_282;
                    }
LABEL_275:
                    LOBYTE(v18) = 11;
                    goto LABEL_282;
                  }
                  if (v59 != 54) {
                    goto LABEL_214;
                  }
                }
                if (!*((unsigned char *)this + 76))
                {
                  LOBYTE(v18) = 57;
                  goto LABEL_283;
                }
                goto LABEL_214;
              }
              if (!*((unsigned char *)this + 168))
              {
LABEL_327:
                int v55 = 1;
                goto LABEL_147;
              }
              uint64_t v62 = *((unsigned __int8 *)this + 128);
              if (v62 == 31)
              {
                char v63 = 25;
                uint64_t v64 = 25;
              }
              else
              {
                if ((*((void *)this + 18) & 0x12000) != 0)
                {
                  uint64_t v64 = 25;
                }
                else
                {
                  uint64_t v64 = 18;
                  if (v62 > 0x32)
                  {
LABEL_326:
                    *((void *)this + 15) = *(unsigned int *)(v8 + 4 * v64);
                    goto LABEL_327;
                  }
                  if (((1 << v62) & 0x4D0C940000000) == 0)
                  {
                    if (v62 != 34) {
                      goto LABEL_326;
                    }
                    uint64_t v64 = 25;
                    char v63 = 25;
                    if ((*(_DWORD *)(v8 + 4 * *((unsigned __int8 *)this + 152)) & 0x200000) == 0
                      && *((unsigned char *)this + 152) != 31)
                    {
                      uint64_t v64 = 18;
                      goto LABEL_326;
                    }
                    goto LABEL_325;
                  }
                  uint64_t v64 = 11;
                }
                char v63 = v64;
              }
LABEL_325:
              *((unsigned char *)this + 104) = v63;
              goto LABEL_326;
            }
          }
LABEL_144:
          unsigned int v18 = v45;
          goto LABEL_145;
        }
        LODWORD(v33) = *((unsigned __int8 *)this + 104);
      }
      uint64_t v37 = *((void *)this + 15);
      unsigned int v39 = *((unsigned __int8 *)this + 128);
      uint64_t v40 = *((void *)this + 18);
      unsigned int v43 = *((unsigned __int8 *)this + 152);
      goto LABEL_95;
    }
    if (v18 == 36)
    {
      char v24 = 0;
      if (v17 != 25) {
        goto LABEL_33;
      }
      if ((v16 & 0x400) == 0) {
        goto LABEL_33;
      }
      char v24 = 0;
      if (v15 == 47 || v15 == 51) {
        goto LABEL_33;
      }
      if (v15 != 49 || (v14 & 1) == 0)
      {
        *(unsigned char *)(v5 + 58) = 29;
        char v24 = 1;
        goto LABEL_33;
      }
    }
LABEL_32:
    char v24 = 0;
    goto LABEL_33;
  }
  if (v17 != 42) {
    goto LABEL_32;
  }
  char v24 = 0;
  if (v18 > 0x32 || ((1 << v18) & 0x5400000000000) == 0) {
    goto LABEL_33;
  }
  if ((v19 & 0x70000000) != 0) {
    goto LABEL_32;
  }
  if (v20 > 30)
  {
    if ((v20 - 32) < 2)
    {
      int v25 = 0;
      goto LABEL_50;
    }
    if (v20 == 31)
    {
      int v25 = 0;
      if (v18 == 48) {
        goto LABEL_60;
      }
      goto LABEL_50;
    }
LABEL_59:
    int v25 = 0;
    if ((v21 & 1) == 0) {
      goto LABEL_60;
    }
LABEL_50:
    int v26 = 1;
    goto LABEL_285;
  }
  if (v20 == 10 || v20 == 18)
  {
    if (v18 == 46)
    {
      int v25 = 0;
      int v26 = 1;
      LOBYTE(v18) = 46;
      goto LABEL_285;
    }
    char v24 = 0;
    int v26 = 1;
    if (v22 != 32 || (v19 & 0x1400) != 0)
    {
      int v25 = 0;
      goto LABEL_285;
    }
    goto LABEL_33;
  }
  if (v20 != 30) {
    goto LABEL_59;
  }
  int v25 = 0;
  if (v18 != 50)
  {
LABEL_60:
    char v24 = 0;
    goto LABEL_33;
  }
  int v26 = 1;
  LOBYTE(v18) = 50;
LABEL_285:
  *((void *)this + 7) = a2;
  a2->uint64_t var9 = v18;
  a2->int var10 = v26;
  a2->var11 += *((_WORD *)this + 36);
  if (v26) {
    MTFEDuration::AdjustDurationForAspiration((uint64_t)a2, (MTFEPhoneme *)v4);
  }
  if (v25) {
    operator new();
  }
  *((unsigned char *)this + 83) = *(unsigned char *)(*((void *)this + 7) + 58);
  *((_DWORD *)this + 18) += a2->var11;
LABEL_290:
  *((unsigned char *)this + 80) = 0;
  return MTFETrackingVisitor::PostPhoneme((uint64_t)this, a2);
}

void sub_1DA4A3B64(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C40D6D86DEFLL);
  _Unwind_Resume(a1);
}

BOOL MTFEConnectedSpeech::PrecedingQuote(MTFEConnectedSpeech *this, MTFESpeechElement *a2)
{
  while (1)
  {
    var6 = a2->var6;
    if (!var6) {
      break;
    }
    a2 = a2->var6;
    if (BYTE2(var6[1].var0)) {
      return 0;
    }
  }
  MTFESpeechPedigree::MTFESpeechPedigree((MTFESpeechPedigree *)v6, a2);
  uint64_t v4 = *(void *)(v6[2] + 40);
  BOOL v3 = v4 && *(_WORD *)(v4 + 176) && (*(void *)(v4 + 184) & 3) == 1;
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v6);
  return v3;
}

void MTFEConnectedSpeech::~MTFEConnectedSpeech(MTFEConnectedSpeech *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

MTFESpeechElement *MTFECalcRampSteps::VisitSentence(MTFECalcRampSteps *this, MTFESpeechElement *a2)
{
  *((_DWORD *)this + 6) = 0;
  float result = MTFESpeechElement::VisitChildren(a2, this);
  uint64_t v4 = *((void *)this + 2);
  *(_WORD *)(v4 + 30) = 0;
  *(void *)(v4 + 32) = *(void *)(v4 + 56);
  return result;
}

MTFESpeechElement *MTFECalcRampSteps::VisitIntonationalPhrase(MTFECalcRampSteps *this, MTFESpeechElement *a2)
{
  *((unsigned char *)this + 8) = BYTE6(a2[2].var6);
  *((_DWORD *)this + 7) = 1065353216;
  return MTFESpeechElement::VisitChildren(a2, this);
}

float MTFECalcRampSteps::VisitPhoneme(MTFECalcRampSteps *this, MTFEPhoneme *a2)
{
  unsigned int var15 = a2->var15;
  if ((var15 & 0x1F00008) != 0)
  {
    uint64_t v3 = *((void *)this + 2);
    double v4 = (float)((float)(*(__int16 *)(v3 + 26) - *(__int16 *)(v3 + 28)) / *((float *)this + 7));
    uint64_t v5 = vcvtd_n_s64_f64(v4, 0x10uLL);
    uint64_t v6 = *((int *)this + 6);
    uint64_t v7 = v3 + 8 * v6;
    *(void *)(v7 + 56) = v5;
    uint64_t v8 = (uint64_t *)(v7 + 56);
    if ((var15 & 0x1F00000) == 0
      && *((unsigned __int8 *)this + 8) - 68 <= 3
      && *((unsigned char *)this + 8) != 70)
    {
      *uint64_t v8 = v5 >> 1;
    }
    if ((int)v6 <= 15) {
      *((_DWORD *)this + 6) = v6 + 1;
    }
    *((_DWORD *)this + 7) = 1065353216;
  }
  else
  {
    *(float *)&double v4 = a2->var13 + *((float *)this + 7);
    *((_DWORD *)this + 7) = LODWORD(v4);
  }
  return *(float *)&v4;
}

void MTFECalcRampSteps::~MTFECalcRampSteps(MTFECalcRampSteps *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

void MTBEPersistentParam::MTBEPersistentParam(MTBEPersistentParam *this)
{
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)&this->char var0 = _D0;
  *(void *)&this->var4 = 0;
  this->var6 = 0;
  *(_DWORD *)&this->var7 = 0;
  *(_OWORD *)&this->uint64_t var9 = 0u;
  *(_OWORD *)&this->uint64_t var11 = 0u;
  pthread_mutex_init(&this->var14, 0);
  pthread_cond_init(&this->var15, 0);
  this->__int32 var16 = 0;
  this->float var13 = 0;
}

void MTBEPersistentParam::MTBEPersistentParam(MTBEPersistentParam *this, const MTBEPersistentParam *a2)
{
  MTBEPersistentParam::MTBEPersistentParam(this);
  long long v3 = *(_OWORD *)&a2->var2[2];
  *double v4 = *(_OWORD *)&a2->var0;
  v4[1] = v3;
  long long v5 = *(_OWORD *)&a2->var5;
  long long v6 = *(_OWORD *)&a2->var7;
  long long v7 = *(_OWORD *)&a2->var12;
  v4[4] = *(_OWORD *)&a2->var10;
  v4[5] = v7;
  v4[2] = v5;
  v4[3] = v6;
}

{
  long long v3;
  _OWORD *v4;
  long long v5;
  long long v6;
  long long v7;

  MTBEPersistentParam::MTBEPersistentParam(this);
  long long v3 = *(_OWORD *)&a2->var2[2];
  *double v4 = *(_OWORD *)&a2->var0;
  v4[1] = v3;
  long long v5 = *(_OWORD *)&a2->var5;
  long long v6 = *(_OWORD *)&a2->var7;
  long long v7 = *(_OWORD *)&a2->var12;
  v4[4] = *(_OWORD *)&a2->var10;
  v4[5] = v7;
  v4[2] = v5;
  v4[3] = v6;
}

__n128 MTBEPersistentParam::operator=(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

void MTBEPersistentParam::~MTBEPersistentParam(MTBEPersistentParam *this)
{
}

uint64_t MTBEParam::MTBEParam(uint64_t a1, int a2, __int16 *a3, unsigned int *a4)
{
  int v7 = ((unint64_t)MTBEDebugFlags::sMTXDebug >> 6) & 1 ^ a2;
  *(unsigned char *)(a1 + 1303) = ((MTBEDebugFlags::sMTXDebug & 0x40) != 0) ^ a2;
  if (v7) {
    char v8 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBUsePostDurMod);
  }
  else {
    char v8 = 0;
  }
  *(unsigned char *)(a1 + 1302) = v8;
  MTBEParam::SetVoice(a1, a3, a4);
  return a1;
}

uint64_t MTBEParam::SetVoice(uint64_t a1, __int16 *a2, unsigned int *a3)
{
  *(_WORD *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 50) = 0;
  *(void *)(a1 + 240) = 0;
  __int16 v6 = MTBEParam::HzToPitch((MTBEParam *)a1, *a2);
  *(_WORD *)(a1 + 194) = v6;
  int v7 = a2[46];
  *(_WORD *)(a1 + 210) = a2[46];
  if (v7 != 1)
  {
    LOWORD(v8) = v6;
    if (v7 != 2) {
      goto LABEL_11;
    }
    LOBYTE(v7) = 0;
    *(unsigned char *)(a1 + 50) = 1;
    *(_WORD *)(a1 + 210) = 1;
  }
  unint64_t v8 = ((((unint64_t)(unsigned __int16)a2[28] << 24) - 525926400) / 0xC + 0x8000) >> 16;
  if (a2[28] < 32) {
    LOWORD(v8) = 0;
  }
  *(_WORD *)(a1 + 194) = v8;
  *(_WORD *)(a1 + 192) = v6 - v8;
  *(void *)(a1 + 224) = a3;
  if (a3)
  {
    unsigned int v9 = *a3++;
    *(void *)(a1 + 216) = bswap32(v9);
    if ((v7 & 1) == 0)
    {
      *(void *)(a1 + 240) = a3;
      a3 += bswap32(*a3) + 1;
    }
  }
  else
  {
    *(void *)(a1 + 216) = 0;
  }
  *(void *)(a1 + 232) = a3;
LABEL_11:
  if (a2[174] < 2)
  {
    __int16 v10 = a2[45];
    if (!v10) {
      __int16 v10 = 120;
    }
    *(_WORD *)(a1 + 20) = v10;
  }
  else
  {
    *(_WORD *)(a1 + 48) = 257;
    MTBEParam::SetTempo(a1, a2[45]);
    LOWORD(v8) = *(_WORD *)(a1 + 194);
  }
  *(_WORD *)(a1 + 190) = v8;
  *(_WORD *)(a1 + 24) = a2[44] >> 1;
  uint64_t v11 = 1374389535 * ((unsigned __int16)a2[1] << 16);
  *(void *)(a1 + 200) = (int)((v11 >> 37) + ((unint64_t)v11 >> 63));
  *(_WORD *)(a1 + 208) = 256;
  uint64_t v12 = 1374389535 * (a2[27] << 13);
  LODWORD(v12) = (52428 * ((v12 >> 37) + ((unint64_t)v12 >> 63))) >> 16;
  *(_WORD *)(a1 + 16) = v12;
  *(_WORD *)(a1 + 18) = v12;
  MTBEParam::InitRateParams((MTBEParam *)a1);
  __int16 v13 = a2[38];
  *(_WORD *)(a1 + 26) = v13 + 21;
  *(_WORD *)(a1 + 28) = 21 - v13;
  uint64_t result = MTBEParam::InvDFT(a1, (uint64_t)a2);
  if ((unsigned __int16)a2[46] - 1 <= 1)
  {
    uint64_t v15 = a2[29];
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = (v15 << 13) / 100;
  }
  if (*(unsigned char *)(a1 + 48) || *(unsigned char *)(a1 + 49) || *(unsigned char *)(a1 + 50))
  {
    *(unsigned char *)(a1 + 1303) = 0;
LABEL_22:
    *(unsigned char *)(a1 + 1302) = 0;
    goto LABEL_23;
  }
  if (!*(unsigned char *)(a1 + 1303)) {
    goto LABEL_22;
  }
  if (*(unsigned char *)(a1 + 1302))
  {
    __int16 v17 = a2[3];
    __int16 v16 = 180;
    goto LABEL_24;
  }
LABEL_23:
  __int16 v16 = a2[3];
  __int16 v17 = v16;
LABEL_24:
  *(_WORD *)(a1 + 1300) = v16;
  *(_WORD *)(a1 + 1298) = v17;
  return result;
}

uint64_t MTBEParam::ResetVoice(uint64_t a1, __int16 *a2)
{
  return MTBEParam::SetVoice(a1, a2, *(unsigned int **)(a1 + 224));
}

uint64_t MTBEParam::HzToPitch(MTBEParam *this, unsigned int a2)
{
  if ((int)a2 >= 50)
  {
    if (a2 <= 0x11AC)
    {
      if (a2 > 0x63)
      {
        if (a2 > 0xC7)
        {
          if (a2 > 0x18F)
          {
            double v5 = (double)(int)a2;
            double v6 = (double)(int)a2 / 3200.0;
            if (a2 <= 0xC7F) {
              int v7 = 1280;
            }
            else {
              int v7 = 1536;
            }
            if (a2 <= 0xC7F) {
              double v6 = (double)(int)a2 / 1600.0;
            }
            if (a2 <= 0x63F)
            {
              int v7 = 1024;
              double v6 = v5 / 800.0;
            }
            if (a2 <= 0x31F) {
              int v3 = 768;
            }
            else {
              int v3 = v7;
            }
            double v4 = v5 / 400.0;
            if (a2 > 0x31F) {
              double v4 = v6;
            }
          }
          else
          {
            double v4 = (double)(int)a2 / 200.0;
            int v3 = 512;
          }
        }
        else
        {
          double v4 = (double)(int)a2 / 100.0;
          int v3 = 256;
        }
      }
      else
      {
        int v3 = 0;
        double v4 = (double)(int)a2 / 50.0;
      }
      float v8 = v4;
      int v2 = v3 + (int)(float)((float)(logf(v8) * 369.33) + 0.5);
    }
    else
    {
      LOWORD(v2) = 1663;
    }
  }
  else
  {
    LOWORD(v2) = 0;
  }
  return (__int16)v2;
}

uint64_t MTBEParam::MidiToPitch(MTBEParam *this, uint64_t a2)
{
  if (a2 >= 8025) {
    unint64_t v2 = (unint64_t)(((a2 << 16) - 525926400) / 12 + 0x8000) >> 16;
  }
  else {
    LOWORD(v2) = 0;
  }
  return (__int16)v2;
}

void *MTBEParam::InitSampleParams(void *this, unsigned int *a2, int a3)
{
  this[28] = a2;
  if (a2)
  {
    unsigned int v3 = *a2++;
    this[27] = bswap32(v3);
    if (a3)
    {
      this[30] = a2;
      a2 += bswap32(*a2) + 1;
    }
  }
  else
  {
    this[27] = 0;
  }
  this[29] = a2;
  return this;
}

uint64_t MTBEParam::SetTempo(uint64_t this, int a2)
{
  uint64_t v2 = 0;
  if (a2 >= 240) {
    int v3 = 240;
  }
  else {
    int v3 = a2;
  }
  if (v3 <= 20) {
    LOWORD(v3) = 20;
  }
  *(_WORD *)(this + 20) = v3;
  int v4 = 60000 / (20 * a2);
  *(_WORD *)(this + 248) = v4;
  int v5 = (__int16)v4 >> 1;
  do
  {
    uint64_t v6 = this + 2 * v2;
    *(_WORD *)(v6 + 250) = v4;
    *(_WORD *)(v6 + 252) = v5 + v4;
    LOWORD(v5) = v4;
    v4 *= 2;
    unint64_t v7 = v2 + 1;
    v2 += 2;
  }
  while (v7 < 0xB);
  return this;
}

float MTBEParam::InitRateParams(MTBEParam *this)
{
  uint64_t v1 = 1300;
  if (!*((unsigned char *)this + 1302)) {
    uint64_t v1 = 1298;
  }
  int v2 = *(__int16 *)((char *)this + v1);
  if (v2 <= 40) {
    LOWORD(v2) = 40;
  }
  if (!*((unsigned char *)this + 1302)) {
    *((_WORD *)this + 649) = v2;
  }
  *((_WORD *)this + 650) = v2;
  float v3 = 180.0 / (float)(__int16)v2;
  float v4 = (double)((unsigned __int16)v2 - 180) * 0.6;
  *((float *)this + 10) = v3;
  *((float *)this + 11) = 180.0 / (float)(v4 + 180.0);
  float result = v3 * (float)*((__int16 *)this + 12);
  *((_WORD *)this + 11) = (int)result;
  return result;
}

uint64_t MTBEParam::InitPitchParams(uint64_t result, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a2 + 76);
  *(_WORD *)(result + 26) = v2 + 21;
  *(_WORD *)(result + 28) = 21 - v2;
  return result;
}

uint64_t MTBEParam::InvDFT(uint64_t result, uint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = 1374389535 * (*(__int16 *)(a2 + 10) << 15);
  *(_OWORD *)(result + 274) = 0u;
  *(_OWORD *)(result + 290) = 0u;
  *(_OWORD *)(result + 306) = 0u;
  *(_OWORD *)(result + 322) = 0u;
  uint64_t v4 = (int)((v3 >> 63) + (SHIDWORD(v3) >> 5));
  *(_OWORD *)(result + 338) = 0u;
  *(_OWORD *)(result + 354) = 0u;
  *(_OWORD *)(result + 370) = 0u;
  *(_OWORD *)(result + 386) = 0u;
  *(_OWORD *)(result + 402) = 0u;
  *(_OWORD *)(result + 418) = 0u;
  *(_OWORD *)(result + 434) = 0u;
  *(_OWORD *)(result + 450) = 0u;
  *(_OWORD *)(result + 466) = 0u;
  *(_OWORD *)(result + 482) = 0u;
  *(_OWORD *)(result + 498) = 0u;
  *(_OWORD *)(result + 514) = 0u;
  *(_OWORD *)(result + 530) = 0u;
  *(_OWORD *)(result + 546) = 0u;
  *(_OWORD *)(result + 562) = 0u;
  *(_OWORD *)(result + 578) = 0u;
  *(_OWORD *)(result + 594) = 0u;
  *(_OWORD *)(result + 610) = 0u;
  *(_OWORD *)(result + 626) = 0u;
  *(_OWORD *)(result + 642) = 0u;
  *(_OWORD *)(result + 658) = 0u;
  *(_OWORD *)(result + 674) = 0u;
  *(_OWORD *)(result + 690) = 0u;
  *(_OWORD *)(result + 706) = 0u;
  *(_OWORD *)(result + 722) = 0u;
  *(_OWORD *)(result + 738) = 0u;
  *(_OWORD *)(result + 754) = 0u;
  *(_OWORD *)(result + 770) = 0u;
  *(void *)float result = v4;
  do
  {
    *(_OWORD *)(result + 786 + v2) = 0uLL;
    v2 += 16;
  }
  while (v2 != 512);
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  do
  {
    unsigned __int16 v8 = 0;
    uint64_t v9 = a2 + 2 * v5;
    unint64_t v10 = (unint64_t)(*(__int16 *)(v9 + 94) * (uint64_t)(int)v4) >> 16;
    unint64_t v11 = (unint64_t)(*(__int16 *)(v9 + 190) * (uint64_t)(int)v4) >> 16;
    for (uint64_t i = 274; i != 786; i += 2)
    {
      int v13 = MTBEParam::sSineWave15[v8];
      uint64_t v14 = (_WORD *)(result + i);
      __int16 v15 = *(_WORD *)(result + i) + ((v13 * v10) >> 16);
      *uint64_t v14 = v15;
      unsigned int v16 = *(unsigned __int16 *)(result + i + 512) + ((v13 * v11) >> 16);
      v14[256] = v16;
      if (v15 >= 0) {
        uint64_t v17 = v15;
      }
      else {
        uint64_t v17 = -v15;
      }
      if (v7 <= v17) {
        uint64_t v7 = v17;
      }
      if ((v16 & 0x8000u) == 0) {
        uint64_t v18 = (__int16)v16;
      }
      else {
        uint64_t v18 = -(__int16)v16;
      }
      if ((uint64_t)v6 <= v18) {
        unint64_t v6 = v18;
      }
      unsigned __int16 v8 = (v8 + v5);
    }
    ++v5;
  }
  while (v5 != 48);
  if (v6)
  {
    uint64_t v19 = 0;
    int32x4_t v20 = vdupq_n_s32((v7 << 16) / v6);
    do
    {
      *(int16x8_t *)(result + 786 + v19) = vuzp2q_s16((int16x8_t)vmulq_s32(v20, vmovl_s16(*(int16x4_t *)(result + 786 + v19))), (int16x8_t)vmulq_s32(v20, vmovl_high_s16(*(int16x8_t *)(result + 786 + v19))));
      v19 += 16;
    }
    while (v19 != 512);
  }
  return result;
}

uint64_t MTBEParam::StartNewPitchClause(uint64_t result)
{
  *(_DWORD *)(result + 184) = -1;
  *(_WORD *)(result + 188) = 0;
  return result;
}

uint64_t MTBEParam::PitchToHz(MTBEParam *this, __int16 a2)
{
  return (int)((double)(3276800 << SHIBYTE(a2) >> 16) * exp2((double)a2 * 0.00390625)
                           + 0.5);
}

_WORD *MTBEParam::SetVolume(_WORD *this, uint64_t a2)
{
  uint64_t v2 = 0x20000;
  if (a2 < 0x20000) {
    uint64_t v2 = a2;
  }
  unint64_t v3 = (v2 & (unint64_t)~(v2 >> 63)) >> 8;
  this[104] = v3;
  this[8] = (v3 * (__int16)this[9]) >> 8;
  return this;
}

uint64_t MTBEParam::GetVolume(MTBEParam *this)
{
  return (uint64_t)*((__int16 *)this + 104) << 8;
}

uint64_t MTBEParam::SetModulation(uint64_t this, uint64_t a2)
{
  uint64_t v2 = 13107200;
  if (a2 < 13107200) {
    uint64_t v2 = a2;
  }
  *(void *)(this + 200) = (42949673 * (v2 & (unint64_t)~(v2 >> 63))) >> 32;
  return this;
}

uint64_t MTBEParam::GetModulation(MTBEParam *this)
{
  return 100 * *((void *)this + 25);
}

uint64_t MTBEParam::SetPitch(uint64_t this, int a2)
{
  if (a2 >= 1000) {
    int v2 = 1000;
  }
  else {
    int v2 = a2;
  }
  int v3 = v2 & ~(v2 >> 31);
  *(_WORD *)(this + 194) = v3;
  *(_WORD *)(this + 190) = v3;
  return this;
}

uint64_t MTBEParam::ResetPitchParams(uint64_t a1, __int16 *a2)
{
  uint64_t result = MTBEParam::HzToPitch((MTBEParam *)a1, *a2);
  *(_WORD *)(a1 + 194) = result;
  *(_WORD *)(a1 + 190) = result;
  uint64_t v5 = 1374389535 * ((unsigned __int16)a2[1] << 16);
  *(void *)(a1 + 200) = (int)((v5 >> 37) + ((unint64_t)v5 >> 63));
  return result;
}

uint64_t MTBEParam::GetPitch(MTBEParam *this)
{
  return *((__int16 *)this + 97);
}

float MTBEParam::GetPitchFloorRange(MTBEParam *this, float *a2, float *a3)
{
  float v5 = (float)*((uint64_t *)this + 25) * 0.000015259;
  double v6 = (double)(3276800 << HIBYTE(*((_WORD *)this + 95)) >> 16);
  double v7 = (double)(int)(v6 * exp2((double)*((_WORD *)this + 95) * 0.00390625) + 0.5);
  float v8 = pow(1.05946309, v5 * 3.60870374) * v7;
  float result = pow(1.05946309, v5 * -3.60870374) * v7;
  *a3 = v8 - result;
  *a2 = result;
  return result;
}

float MTBEParam::SetRate(MTBEParam *this, int a2)
{
  if (a2 <= 40) {
    __int16 v2 = 40;
  }
  else {
    __int16 v2 = a2;
  }
  if (*((unsigned char *)this + 1302)) {
    __int16 v3 = 180;
  }
  else {
    __int16 v3 = v2;
  }
  *((_WORD *)this + 650) = v3;
  *((_WORD *)this + 649) = v2;
  return MTBEParam::InitRateParams(this);
}

uint64_t MTBEParam::GetRate(MTBEParam *this)
{
  return *((__int16 *)this + 649);
}

uint64_t MTBEParam::GetDurModFakeRate(MTBEParam *this)
{
  return *((__int16 *)this + 650);
}

uint64_t MTBEParam::ResetRateParams(uint64_t result, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a2 + 6);
  if (*(unsigned char *)(result + 1302)) {
    __int16 v3 = 180;
  }
  else {
    __int16 v3 = *(_WORD *)(a2 + 6);
  }
  *(_WORD *)(result + 1300) = v3;
  *(_WORD *)(result + 1298) = v2;
  if (*(unsigned char *)(result + 48)) {
    return MTBEParam::SetTempo(result, *(__int16 *)(a2 + 90));
  }
  return result;
}

float MTBEParam::SetUsePostDurMod(MTBEParam *this, int a2)
{
  *((unsigned char *)this + 1302) = a2;
  int v2 = *((__int16 *)this + 649);
  if (v2 <= 40) {
    LOWORD(v2) = 40;
  }
  if (a2) {
    __int16 v3 = 180;
  }
  else {
    __int16 v3 = v2;
  }
  *((_WORD *)this + 650) = v3;
  *((_WORD *)this + 649) = v2;
  return MTBEParam::InitRateParams(this);
}

uint64_t MTBEParam::GetUsePostDurMod(MTBEParam *this)
{
  return *((unsigned __int8 *)this + 1302);
}

float MT3FInsertPlosiveRelease::VisitSentence(MT3FInsertPlosiveRelease *this, MTFESpeechElement *a2)
{
  *((_DWORD *)this + 8) = 0;
  MTFESpeechElement::VisitChildren(a2, this);
  float result = *((float *)this + 8) + *((float *)&a2[1].var0 + 1);
  *((float *)&a2[1].var0 + 1) = result;
  return result;
}

MTFESpeechElement *MT3FInsertPlosiveRelease::VisitWord(MT3FInsertPlosiveRelease *this, MTFESpeechElement *a2)
{
  *((void *)this + 5) = a2;
  return MTFESpeechElement::VisitChildren(a2, this);
}

uint64_t MT3FInsertPlosiveRelease::VisitPhoneme(MT3FInsertPlosiveRelease *this, MTFEPhoneme *a2)
{
  uint64_t result = MTFETrackingVisitor::VisitPhoneme(this, a2);
  var6 = a2->var6;
  if (!var6) {
    var6 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
  }
  if (!BYTE2(var6[1].var0) && (*(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * a2->var9) & 0x800000) != 0) {
    operator new();
  }
  return result;
}

void sub_1DA4A4A94(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C40D6D86DEFLL);
  _Unwind_Resume(a1);
}

void MT3FInsertPlosiveRelease::~MT3FInsertPlosiveRelease(MT3FInsertPlosiveRelease *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

void MTFEDuration::MTFEDuration(uint64_t a1, MTFEDuration *this)
{
  *(void *)a1 = &unk_1F347E918;
  *(void *)(a1 + 8) = this;
  int UsePostDurMod = MTBEParam::GetUsePostDurMod(this);
  uint64_t v4 = *(MTBEParam **)(a1 + 8);
  if (UsePostDurMod) {
    int DurModFakeRate = MTBEParam::GetDurModFakeRate(v4);
  }
  else {
    int DurModFakeRate = MTBEParam::GetRate(v4);
  }
  *(float *)(a1 + 48) = (float)DurModFakeRate;
}

void sub_1DA4A4B5C(_Unwind_Exception *a1)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(v1);
  _Unwind_Resume(a1);
}

MTFESpeechElement *MTFEDuration::VisitIntonationalPhrase(MTFEDuration *this, MTFESpeechElement *a2)
{
  if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
  {
    puts("MTFEDuration::VisitIntonationalPhrase()");
    BOOL v4 = (MTBEDebugFlags::sMTXDebug & 0x10) == 0;
  }
  else
  {
    BOOL v4 = 1;
  }
  *((void *)this + 2) = a2;
  float v5 = fminf((float)(int)floorf(logf((float)SWORD1(a2[2].var7)) * 2.1276) + 1.0, 5.0);
  *((float *)this + 17) = v5;
  if (!v4) {
    printf("%s = %g\n", "fNumWrdsInIntonPhrase", v5);
  }

  return MTFESpeechElement::VisitChildren(a2, this);
}

MTFESpeechElement *MTFEDuration::VisitIntermediatePhrase(MTFEDuration *this, MTFESpeechElement *a2)
{
  if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
  {
    puts("MTFEDuration::VisitIntermediatePhrase()");
    BOOL v4 = (MTBEDebugFlags::sMTXDebug & 0x10) == 0;
  }
  else
  {
    BOOL v4 = 1;
  }
  *((void *)this + 3) = a2;
  float v5 = fminf((float)(int)floorf(logf((float)SWORD1(a2[1].var4)) * 2.1276) + 1.0, 5.0);
  *((float *)this + 16) = v5;
  if (!v4) {
    printf("%s = %g\n", "fNumWrdsInInterPhrase", v5);
  }
  *((unsigned char *)this + 82) = 0;
  *((_DWORD *)this + 21) = -1;

  return MTFESpeechElement::VisitChildren(a2, this);
}

void MTFEDuration::VisitWord(MTFEDuration *this, MTFESpeechElement *a2)
{
  if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0) {
    puts("MTFEDuration::VisitWord()");
  }
  signed __int16 v4 = *(_WORD *)&a2[3].var2;
  if (v4)
  {
    float v5 = (MTBEParam *)*((void *)this + 1);
    if (*((unsigned char *)v5 + 48)) {
      MTBEParam::SetTempo((uint64_t)v5, v4);
    }
    else {
      MTBEParam::SetRate(v5, v4);
    }
    *((float *)this + 12) = (float)*(__int16 *)&a2[3].var2;
  }
  if (((uint64_t)a2[1].var0 & 1) == 0)
  {
    *((void *)this + 4) = a2;
    MTFESpeechElement::VisitChildren(a2, this);
  }
}

void MTFEDuration::VisitSyllable(float32x2_t *this, MTFESpeechElement *a2)
{
  if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0) {
    puts("MTFEDuration::VisitSyllable()");
  }
  this[5] = (float32x2_t)a2;
  int var0_low = SLOWORD(a2[1].var0);
  float32x2_t v5 = this[4];
  this[6].f32[1] = (float)(int)floorf(logf((float)(var0_low - *(__int16 *)(*(void *)&v5 + 170)) + 1.0) * 2.1276);
  int v6 = *(unsigned __int16 *)(*(void *)&v5 + 174);
  float v7 = 0.0;
  if (v6 != (unsigned __int16)var0_low) {
    float v7 = (float)(int)floorf(logf((float)((__int16)v6 - var0_low)) * 2.1276);
  }
  this[7].f32[0] = v7;
  this[7].f32[1] = fminf((float)(int)floorf(logf((float)(*(__int16 *)(*(void *)&this[3] + 62) - var0_low)) * 2.1276), 3.0);
  float v8 = &unk_1F347E988;
  int32x2_t v9 = 0;
  MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)&v8);
  this[9] = vminnm_f32(vcvt_f32_s32(v9), (float32x2_t)0x4000000040000000);
  if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
  {
    printf("%s = %g\n", "fromWdStartSyls", this[6].f32[1]);
    if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
    {
      printf("%s = %g\n", "fromWdEndSyls", this[7].f32[0]);
      if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
      {
        printf("%s = %g\n", "fromPhEndSyls", this[7].f32[1]);
        if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
        {
          printf("%s = %g\n", "fNumPhnsInOnset", this[9].f32[0]);
          if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0) {
            printf("%s = %g\n", "fNumPhnsInCoda", this[9].f32[1]);
          }
        }
      }
    }
  }
  MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&v8);
}

void sub_1DA4A5010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)va);
  _Unwind_Resume(a1);
}

void SyllPhnCounter::SyllPhnCounter(SyllPhnCounter *this)
{
  *(void *)this = &unk_1F347E988;
  *((void *)this + 1) = 0;
}

{
  *(void *)this = &unk_1F347E988;
  *((void *)this + 1) = 0;
}

void MTFEDuration::VisitPhoneme(MTFEDuration *this, MTFEPhoneme *a2)
{
  if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0) {
    puts("MTFEDuration::VisitPhoneme()");
  }
  if (a2->var9)
  {
    unsigned int var15 = a2->var15;
    int v5 = *((unsigned __int8 *)this + 82);
    if (!*((unsigned char *)this + 82))
    {
      *((_DWORD *)this + 21) = a2->var8;
      *((unsigned char *)this + 82) = 1;
    }
    int v6 = (MTFESpeechElement *)*((void *)this + 3);
    var7 = v6->var7;
    if (var7)
    {
      int v8 = *((unsigned __int8 *)MTFELastPhoneme(v6->var7) + 58);
      int v6 = (MTFESpeechElement *)*((void *)this + 3);
    }
    else
    {
      int v8 = -1;
    }
    int32x2_t v9 = MTFELastPhoneme(v6);
    unint64_t v10 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
    var6 = a2->var6;
    uint64_t v12 = a2->var7;
    if (v12) {
      int v13 = a2->var7;
    }
    else {
      int v13 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
    }
    if (var6) {
      uint64_t v14 = a2->var6;
    }
    else {
      uint64_t v14 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
    }
    __int16 v15 = v13->var7;
    if (!v15) {
      __int16 v15 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
    }
    int v16 = MTFEDuration::sPhonToLCClass[BYTE2(v13[1].var0)];
    if (v14->var6) {
      unint64_t v10 = v14->var6;
    }
    int v17 = MTFEDuration::sPhonToLCClass[BYTE2(v15[1].var0)];
    int v18 = MTFEDuration::sPhonToRCClass[BYTE2(v14[1].var0)];
    int v19 = MTFEDuration::sPhonToRCClass[BYTE2(v10[1].var0)];
    if (v5)
    {
      if (*((unsigned char *)this + 82))
      {
        BOOL v20 = !v8 || var7 == 0;
        int v21 = v20 ? MTFEDuration::sPhonToLCClass[BYTE2(v15[1].var0)] : 4;
        if (*((_DWORD *)this + 21) + 1 == a2->var8) {
          int v17 = v21;
        }
      }
    }
    else if (var7 != 0 && v8 != 0)
    {
      int v17 = v16;
      int v16 = 4;
    }
    int var8 = a2->var8;
    if (!v9[58]) {
      goto LABEL_39;
    }
    int v23 = *((unsigned __int16 *)v9 + 28);
    if (v23 == (unsigned __int16)var8 && *(void *)(*((void *)this + 3) + 40))
    {
      int v24 = 4;
      goto LABEL_40;
    }
    if ((__int16)v23 - 1 == var8)
    {
      int v24 = v18;
      if (*(void *)(*((void *)this + 3) + 40)) {
        int v18 = 4;
      }
      else {
        int v18 = v19;
      }
    }
    else
    {
LABEL_39:
      int v24 = v18;
      int v18 = v19;
    }
LABEL_40:
    *((_WORD *)this + 40) = 0;
    double v25 = 0.0;
    if (*((_DWORD *)this + 21) < var8)
    {
      if ((var9 = a2->var9, uint64_t v27 = BYTE2(v12[1].var0), var9 == v27)
        || MTFEDuration::sPhonToDClass[var9] == 5 && MTFEDuration::sPhonToDClass[v27] == 5
        || (MTFEDuration::sPhonToPhon[var9] & 0xFE) == 0x26 && MTFEDuration::sPhonToDClass[BYTE2(var6[1].var0)] == 5)
      {
        *((unsigned char *)this + 80) = 1;
        double v25 = 1.0;
      }
    }
    if (var8 < *((__int16 *)v9 + 28))
    {
      uint64_t v28 = a2->var9;
      uint64_t v29 = BYTE2(var6[1].var0);
      if (v28 == v29
        || MTFEDuration::sPhonToDClass[v28] == 5
        && (MTFEDuration::sPhonToDClass[v29] == 5
         || (int v30 = MTFEDuration::sPhonToPhon[v29], v30 == 38)
         || v30 == 39))
      {
        *((unsigned char *)this + 81) = 1;
      }
    }
    int v31 = var15 & 0x60000000;
    if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
    {
      printf("%s = %g\n", "(float)fGeminationToTheLeft", v25);
      if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
      {
        double v32 = 0.0;
        if (*((unsigned char *)this + 81)) {
          double v32 = 1.0;
        }
        printf("%s = %g\n", "(float)fGeminationToTheRight", v32);
      }
    }
    MTFEDuration::ModelPhoneme(this, a2->var9, a2->var10 != 0, v16, v24, v17, v18, v31 == 0, v31 == 0x40000000, &a2->var13);
    a2->float var14 = 0.5;
    float v33 = a2->var13 * 0.0090703;
    a2->float var13 = v33;
    if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0) {
      printf("\nDuration = %5.2fms, %3.0f frames\n", (float)(v33 * 5.0), v33);
    }
  }
}

void MTFEDuration::ModelPhoneme(MTFEDuration *this, unsigned int a2, int a3, int a4, int a5, int a6, int a7, int a8, BOOL a9, float *a10)
{
  uint64_t v14 = (MTFEDuration *)MTFEDuration::sPhonToPhon[a2];
  int v15 = MTFEDuration::sPhonToPClass[a2];
  int v80 = MTFEDuration::sPhonToGClass[a2];
  int v16 = *(unsigned __int16 *)(*((void *)this + 5) + 62);
  int v17 = MTFEDuration::sPhonToDClass[a2];
  char v18 = MTBEDebugFlags::sMTXDebug;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
  {
    int v19 = a7;
    printf("Dur[%s]    xph %d, acc %d, pho %d, pcl %d, gencl %d, dcl %d, lcl %d rcl %d lc2 %d rc2 %d", *(const char **)(MEMORY[0x1E4FA5858] + 8 * a2), a3, v16 != 0, v14, v15, v80, v17, a4, a5, a6, a7);
    a7 = v19;
    char v18 = MTBEDebugFlags::sMTXDebug;
  }
  float v20 = 3395.6 + 0.0;
  uint64_t v79 = v14;
  if ((v18 & 0x10) == 0)
  {
    int v21 = (int)v14;
    unsigned int v22 = 0;
    float v23 = v20 + *(float *)&MTFEDuration::sCoeffs[4 * v21 + 4];
LABEL_7:
    uint64_t v78 = a4;
    float v25 = v23 + *(float *)&MTFEDuration::sCoeffs[4 * a4 + 196];
LABEL_8:
    float v26 = v25 + *(float *)&MTFEDuration::sCoeffs[4 * a6 + 172];
LABEL_9:
    uint64_t v27 = a5;
    float v28 = v26 + *(float *)&MTFEDuration::sCoeffs[4 * a5 + 244];
LABEL_10:
    float v29 = v28 + *(float *)&MTFEDuration::sCoeffs[4 * a7 + 220];
LABEL_11:
    float v30 = v29 + (float)(-59.82 * *((float *)this + 17));
    goto LABEL_12;
  }
  int v76 = a7;
  printf("\nDur ");
  printf(" %5.2f(%5.2f)", (float)((float)(3395.6 * 1000.0) / 22050.0), 3395.6);
  float v24 = *(float *)&MTFEDuration::sCoeffs[4 * (int)v14 + 4];
  float v23 = v20 + v24;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) == 0)
  {
    unsigned int v22 = 1;
    a7 = v76;
    goto LABEL_7;
  }
  printf(" %5.2f(%5.2f)", (float)((float)(v24 * 1000.0) / 22050.0), v24);
  uint64_t v78 = a4;
  float v63 = *(float *)&MTFEDuration::sCoeffs[4 * a4 + 196];
  float v25 = v23 + v63;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) == 0)
  {
    unsigned int v22 = 2;
    a7 = v76;
    goto LABEL_8;
  }
  printf(" %5.2f(%5.2f)", (float)((float)(v63 * 1000.0) / 22050.0), v63);
  float v71 = *(float *)&MTFEDuration::sCoeffs[4 * a6 + 172];
  float v26 = v25 + v71;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) == 0)
  {
    unsigned int v22 = 3;
    a7 = v76;
    goto LABEL_9;
  }
  printf(" %5.2f(%5.2f)", (float)((float)(v71 * 1000.0) / 22050.0), v71);
  uint64_t v27 = a5;
  float v72 = *(float *)&MTFEDuration::sCoeffs[4 * a5 + 244];
  float v28 = v26 + v72;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) == 0)
  {
    unsigned int v22 = 4;
    a7 = v76;
    goto LABEL_10;
  }
  printf(" %5.2f(%5.2f)", (float)((float)(v72 * 1000.0) / 22050.0), v72);
  float v73 = *(float *)&MTFEDuration::sCoeffs[4 * v76 + 220];
  float v29 = v28 + v73;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) == 0)
  {
    unsigned int v22 = 5;
    goto LABEL_11;
  }
  printf(" %5.2f(%5.2f)", (float)((float)(v73 * 1000.0) / 22050.0), v73);
  float v74 = -59.82 * *((float *)this + 17);
  float v30 = v29 + v74;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
  {
    printf(" %5.2f(%5.2f)", (float)((float)(v74 * 1000.0) / 22050.0), v74);
    float v75 = 22.677 * *((float *)this + 16);
    float v32 = v30 + v75;
    if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
    {
      printf(" %5.2f(%5.2f)", (float)((float)(v75 * 1000.0) / 22050.0), v75);
      uint64_t v31 = MTBEDebugFlags::sMTXDebug & 0x10;
      unsigned int v22 = 8;
    }
    else
    {
      uint64_t v31 = 0;
      unsigned int v22 = 7;
    }
    goto LABEL_13;
  }
  unsigned int v22 = 6;
LABEL_12:
  uint64_t v31 = 0;
  float v32 = v30 + (float)(22.677 * *((float *)this + 16));
LABEL_13:
  if (*(_WORD *)(*((void *)this + 5) + 62) == 8) {
    float v33 = 1.0;
  }
  else {
    float v33 = 0.0;
  }
  float v34 = 122.51 * v33;
  if (v31)
  {
    if (!v22) {
      printf("\nDur ");
    }
    printf(" %5.2f(%5.2f)", (float)((float)(v34 * 1000.0) / 22050.0), v34);
    uint64_t v31 = MTBEDebugFlags::sMTXDebug & 0x10;
    ++v22;
  }
  float v35 = v32 + v34;
  if (*((unsigned char *)this + 80)) {
    float v36 = 1.0;
  }
  else {
    float v36 = 0.0;
  }
  float v37 = *(float *)&MTFEDuration::sCoeffs[4 * v80 + 280] * v36;
  if (v31)
  {
    if (!v22) {
      printf("\nDur ");
    }
    printf(" %5.2f(%5.2f)", (float)((float)(v37 * 1000.0) / 22050.0), v37);
    uint64_t v31 = MTBEDebugFlags::sMTXDebug & 0x10;
    ++v22;
  }
  float v38 = v35 + v37;
  if (*((unsigned char *)this + 81)) {
    float v39 = 1.0;
  }
  else {
    float v39 = 0.0;
  }
  float v40 = *(float *)&MTFEDuration::sCoeffs[4 * v80 + 300] * v39;
  if (v31)
  {
    uint64_t v41 = v17;
    unsigned int v42 = v22 + 1;
    unsigned int v43 = v22 - 10;
    if (v22 < 0xA) {
      unsigned int v43 = v22;
    }
    if (!v43) {
      printf("\nDur ");
    }
    printf(" %5.2f(%5.2f)", (float)((float)(v40 * 1000.0) / 22050.0), v40);
    if (v16) {
      float v44 = 1.0;
    }
    else {
      float v44 = 0.0;
    }
    float v45 = v44 * *(float *)&MTFEDuration::sCoeffs[4 * v17 + 392];
    if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
    {
      unsigned int v46 = v22 - 9;
      if (v42 < 0xA) {
        unsigned int v46 = v22 + 1;
      }
      if (!v46) {
        printf("\nDur ");
      }
      printf(" %5.2f(%5.2f)", (float)((float)(v45 * 1000.0) / 22050.0), v45);
      unsigned int v42 = v22 + 2;
    }
  }
  else
  {
    uint64_t v41 = v17;
    if (v16) {
      float v44 = 1.0;
    }
    else {
      float v44 = 0.0;
    }
    float v45 = v44 * *(float *)&MTFEDuration::sCoeffs[4 * v17 + 392];
    unsigned int v42 = v22;
  }
  float v47 = v38 + v40;
  float v48 = 0.0;
  if (a8) {
    float v48 = *(float *)&MTFEDuration::sCoeffs[4 * v41 + 320] * *((float *)this + 18);
  }
  float v49 = v47 + v45;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
  {
    unsigned int v50 = v42 - 10;
    if (v42 < 0xA) {
      unsigned int v50 = v42;
    }
    if (!v50) {
      printf("\nDur ");
    }
    printf(" %5.2f(%5.2f)", (float)((float)(v48 * 1000.0) / 22050.0), v48);
    ++v42;
  }
  float v51 = 0.0;
  if (a9) {
    float v51 = *(float *)&MTFEDuration::sCoeffs[4 * v41 + 356] * *((float *)this + 19);
  }
  float v52 = (float)(v49 + v48) + v51;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) == 0)
  {
    float v53 = *((float *)this + 15);
    float v54 = v52 + (float)(*(float *)&MTFEDuration::sCoeffs[4 * v41 + 428] * v53);
    int v55 = v79;
LABEL_65:
    float v58 = v54 + (float)(v44 * (float)(*(float *)&MTFEDuration::sCoeffs[4 * v41 + 464] * v53));
LABEL_66:
    int v59 = v15;
    float v60 = v58 + *(float *)&MTFEDuration::sCoeffs[24 * v15 + 500 + 4 * v78];
LABEL_67:
    float v61 = v60 + *(float *)&MTFEDuration::sCoeffs[24 * v59 + 668 + 4 * v27];
    goto LABEL_68;
  }
  unsigned int v56 = v42 - 10;
  if (v42 < 0xA) {
    unsigned int v56 = v42;
  }
  int v55 = v79;
  if (!v56) {
    printf("\nDur ");
  }
  printf(" %5.2f(%5.2f)", (float)((float)(v51 * 1000.0) / 22050.0), v51);
  float v53 = *((float *)this + 15);
  float v57 = *(float *)&MTFEDuration::sCoeffs[4 * v41 + 428] * v53;
  float v54 = v52 + v57;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) == 0) {
    goto LABEL_65;
  }
  unsigned int v64 = v42 + 1;
  if (v42 + 1 >= 0xA) {
    unsigned int v64 = v42 - 9;
  }
  if (!v64) {
    printf("\nDur ");
  }
  printf(" %5.2f(%5.2f)", (float)((float)(v57 * 1000.0) / 22050.0), v57);
  float v65 = v44 * (float)(*(float *)&MTFEDuration::sCoeffs[4 * v41 + 464] * *((float *)this + 15));
  float v58 = v54 + v65;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) == 0) {
    goto LABEL_66;
  }
  int v59 = v15;
  unsigned int v66 = v42 + 2;
  if (v42 + 2 >= 0xA) {
    unsigned int v66 = v42 - 8;
  }
  if (!v66) {
    printf("\nDur ");
  }
  printf(" %5.2f(%5.2f)", (float)((float)(v65 * 1000.0) / 22050.0), v65);
  float v67 = *(float *)&MTFEDuration::sCoeffs[24 * v15 + 500 + 4 * v78];
  float v60 = v58 + v67;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) == 0) {
    goto LABEL_67;
  }
  unsigned int v68 = v42 + 3;
  if (v42 + 3 >= 0xA) {
    unsigned int v68 = v42 - 7;
  }
  if (!v68) {
    printf("\nDur ");
  }
  printf(" %5.2f(%5.2f)", (float)((float)(v67 * 1000.0) / 22050.0), v67);
  float v69 = *(float *)&MTFEDuration::sCoeffs[24 * v15 + 668 + 4 * v27];
  float v61 = v60 + v69;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0)
  {
    unsigned int v70 = v42 + 4;
    if (v42 + 4 >= 0xA) {
      unsigned int v70 = v42 - 6;
    }
    if (!v70) {
      printf("\nDur ");
    }
    printf(" %5.2f(%5.2f)", (float)((float)(v69 * 1000.0) / 22050.0), v69);
  }
LABEL_68:
  float v62 = MTFEDuration::Transform(v55, v61);
  *a10 = v62;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0) {
    printf("\nPhoneme: %.2f --> %.2f", (float)(v61 / 22.05), (float)(v62 / 22.05));
  }
}

float MTFEDuration::Transform(MTFEDuration *this, float a2)
{
  __int16 v3 = &MTFEDuration::sCoeffs[4 * (int)this];
  float v4 = *((float *)v3 + 211);
  float v5 = *((float *)v3 + 253);
  if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0) {
    printf("\nTransform: phone = %d, duration = %5.3f, center = %5.3f, gain = %5.3f, valA = %5.3f, valB = %5.3f", this, a2, 0.3, 1.0, v4, v5);
  }
  float v6 = v4
     + (float)((float)(v5 - v4) * (float)(sinhf(1.0 * (float)((float)((float)(a2 - v4) / (float)(v5 - v4)) - 0.3)) + 0.3));
  if (v6 >= v4)
  {
    float v4 = v6;
    if (v6 > v5) {
      return v5;
    }
  }
  return v4;
}

uint64_t MTFEDuration::AdjustDurationForFlap(uint64_t this, MTFEPhoneme *a2)
{
  float v2 = (float)(*(float *)(this + 64) / 0.0090703) + -900.61;
  float v3 = 401.0;
  if (v2 >= 401.0)
  {
    float v3 = (float)(*(float *)(this + 64) / 0.0090703) + -900.61;
    if (v2 > 3776.0) {
      float v3 = 3776.0;
    }
  }
  *(float *)(this + 64) = v3 * 0.0090703;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0) {
    return printf("New Duration for DX = %5.2fms, %3.0f frames\n", (float)((float)(v3 * 0.0090703) * 5.0), (float)(v3 * 0.0090703));
  }
  return this;
}

uint64_t MTFEDuration::AdjustDurationForAspiration(uint64_t this, MTFEPhoneme *a2)
{
  float v2 = (float)(*(float *)(this + 64) / 0.0090703) + -636.68;
  uint64_t v3 = *(unsigned __int8 *)(this + 58);
  float v4 = &MTFEDuration::sCoeffs[4 * MTFEDuration::sPhonToPhon[v3]];
  float v5 = *((float *)v4 + 211);
  if (v2 >= v5)
  {
    float v5 = (float)(*(float *)(this + 64) / 0.0090703) + -636.68;
    if (v2 > *((float *)v4 + 253)) {
      float v5 = *((float *)v4 + 253);
    }
  }
  *(float *)(this + 64) = v5 * 0.0090703;
  if ((MTBEDebugFlags::sMTXDebug & 0x10) != 0) {
    return printf("New Duration for aspirated %s = %5.2fms, %3.0f frames\n", *(const char **)(MEMORY[0x1E4FA5858] + 8 * v3), (float)((float)(v5 * 0.0090703) * 5.0), (float)(v5 * 0.0090703));
  }
  return this;
}

void SyllPhnCounter::~SyllPhnCounter(SyllPhnCounter *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

uint64_t SyllPhnCounter::VisitPhoneme(uint64_t this, MTFEPhoneme *a2)
{
  unsigned int v2 = a2->var15 & 0x60000000;
  if (v2 == 0x40000000)
  {
    ++*(_DWORD *)(this + 12);
  }
  else if (!v2)
  {
    ++*(_DWORD *)(this + 8);
  }
  return this;
}

void MTFEDuration::~MTFEDuration(MTFEDuration *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

MTFESpeechElement *MTFECount::VisitSentence(MTFECount *this, MTFESpeechElement *a2)
{
  *((_WORD *)this + 23) = 0;
  uint64_t result = MTFESpeechElement::VisitChildren(a2, this);
  a2[1].int var1 = *((_WORD *)this + 23);
  return result;
}

uint64_t MTFECount::VisitIntonationalPhrase(MTFEPosition *this, MTFESpeechElement *a2)
{
  signed __int16 var1 = this[11].var1;
  this[6] = 0;
  this[10] = 0;
  this[11].char var0 = 0;
  MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);
  uint64_t result = MTFECommands::Visit((uint64_t)&a2[1].var1, (uint64_t)this);
  *(MTFEPosition *)(&a2[2].var2 + 2) = this[6];
  *(MTFEPosition *)&a2[2].signed __int16 var1 = this[10];
  LOWORD(a2[2].var7) = this[11].var0;
  WORD1(a2[2].var7) = this[11].var1 - var1;
  return result;
}

MTFESpeechElement *MTFECount::VisitIntermediatePhrase(MTFEPosition *this, MTFESpeechElement *a2)
{
  signed __int16 var1 = this[11].var1;
  this[12].char var0 = 8;
  this[13] = 0;
  LODWORD(a2[1].var0) = this[6];
  uint64_t result = MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);
  HIDWORD(a2[1].var0) = this[6];
  *(MTFEPosition *)&a2[1].signed __int16 var1 = this[10];
  WORD1(a2[1].var4) = this[11].var1 - var1;
  return result;
}

MTFESpeechElement *MTFECount::VisitWord(MTFECount *this, MTFESpeechElement *a2)
{
  *((unsigned char *)this + 56) = 0;
  LODWORD(a2[1].var0) &= ~0x40u;
  *((void *)this + 4) = 0;
  MTFECommands::Visit((uint64_t)&a2[2], (uint64_t)this);
  LODWORD(a2[3].var0) = *((_DWORD *)this + 6);
  uint64_t result = MTFESpeechElement::VisitChildren(a2, this);
  HIDWORD(a2[3].var0) = *((_DWORD *)this + 6);
  int v5 = *((unsigned char *)this + 56) == 0;
  *((_WORD *)this + 23) += *((unsigned __int8 *)this + 56);
  LODWORD(a2[1].var0) |= v5 << 6;
  return result;
}

MTFESpeechElement *MTFECount::VisitSyllable(MTFECount *this, MTFESpeechElement *a2)
{
  *((void *)this + 1) = a2;
  HIDWORD(v4) = *((_DWORD *)this + 6);
  LODWORD(v4) = HIDWORD(v4);
  LODWORD(a2[1].var0) = v4 >> 16;
  uint64_t result = MTFESpeechElement::VisitChildren(a2, this);
  WORD2(a2[1].var0) = *((_WORD *)this + 12);
  if (HIWORD(a2[1].var0))
  {
    *((_WORD *)this + 21) = a2[1].var0;
    *((_WORD *)this + 20) = *(_WORD *)(*((void *)this + 2) + 56);
    ++*((_WORD *)this + 22);
  }
  return result;
}

float MTFECount::VisitCommand(MTFECount *this, MTFECommand *a2)
{
  if (a2->var8 == 1953456745)
  {
    unint64_t var9 = a2->var9;
    if ((int)(var9 >> 24) <= 12)
    {
      *((_WORD *)this + 24) = var9 >> 24;
      float result = (float)(var9 & 0xFFFFFF) * 0.000015259;
      *((float *)this + 13) = result;
    }
  }
  return result;
}

float MTFECount::VisitPhoneme(MTFECount *this, MTFEPhoneme *a2)
{
  uint64_t var9 = a2->var9;
  if (a2->var9) {
    *((unsigned char *)this + 56) = 1;
  }
  unsigned int var15 = a2->var15;
  if ((var15 & 0x10000000) != 0)
  {
    uint64_t v4 = 0;
    *((void *)this + 4) = 0;
    ++*((_WORD *)this + 13);
  }
  else
  {
    uint64_t v4 = *((void *)this + 4);
  }
  signed __int16 v5 = *((_WORD *)this + 12);
  *((_WORD *)this + 12) = v5 + 1;
  a2->int var8 = v5;
  unsigned int v6 = var15 & 0x9FFFFFFF;
  if (!v4 && (*(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * var9) & 1) != 0)
  {
    a2->unsigned int var15 = v6 | 0x20000000;
    *((void *)this + 4) = 0x40000000;
    if ((var15 & 0x1400) != 0)
    {
      uint64_t v7 = *((void *)this + 1);
      *(_WORD *)(v7 + 62) = *((_WORD *)this + 24);
      float result = *((float *)this + 13);
      *(float *)(v7 + 64) = result;
      *((_WORD *)this + 24) = 10;
      *((_DWORD *)this + 13) = 0;
      *((void *)this + 2) = a2;
    }
  }
  else
  {
    a2->unsigned int var15 = v6 | v4;
  }
  return result;
}

void MTFECount::~MTFECount(MTFECount *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

BOOL MTFEToBI::IsPhraseAccent(MTFEToBI *this)
{
  return (this - 1) < 3;
}

BOOL MTFEToBI::IsRegularPhraseAccent(MTFEToBI *this)
{
  return (this & 0xFFFFFFFD) == 1;
}

BOOL MTFEToBI::IsFinalBoundary(MTFEToBI *this)
{
  return (this - 5) < 2;
}

BOOL MTFEToBI::IsPitchAccent(MTFEToBI *this)
{
  return (this - 7) < 6;
}

uint64_t MTFEToBIPitch::Token::Token(uint64_t this, const MTFEToBIPitch::Token *a2, MTFEToBIPitch::Token *a3)
{
  *(unsigned char *)this = *(unsigned char *)a2;
  *(void *)(this + 16) = a3;
  *(_OWORD *)(this + 24) = *(_OWORD *)((char *)a2 + 24);
  *(void *)(this + 40) = *((void *)a2 + 5);
  *(void *)(this + 48) = *((void *)a2 + 6);
  *(void *)(this + 56) = *((void *)a2 + 7);
  *(_DWORD *)(this + 64) = *((_DWORD *)a2 + 16);
  if (*((void *)a2 + 1)) {
    operator new();
  }
  *(void *)(this + 8) = 0;
  return this;
}

void sub_1DA4A644C(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A0C40CCDE963ELL);
  _Unwind_Resume(a1);
}

uint64_t Intersection(float *a1, float *a2)
{
  if (*a1 == *a2) {
    return 0;
  }
  LOBYTE(v3) = 1;
  *((float *)&v3 + 1) = (float)(a2[1] - a1[1]) / (float)(*a1 - *a2);
  return v3;
}

uint64_t MTFEToBIPitch::MTFEToBIPitch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  *(void *)float result = &unk_1F347EB10;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  *(void *)(result + 24) = a4;
  *(void *)(result + 32) = a5;
  *(void *)(result + 40) = a6;
  *(unsigned char *)(result + 48) = a7;
  *(_DWORD *)(result + 160) = *(_DWORD *)(a5 + 404);
  return result;
}

{
  *(void *)float result = &unk_1F347EB10;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  *(void *)(result + 24) = a4;
  *(void *)(result + 32) = a5;
  *(void *)(result + 40) = a6;
  *(unsigned char *)(result + 48) = a7;
  *(_DWORD *)(result + 160) = *(_DWORD *)(a5 + 404);
  return result;
}

uint64_t MTFEToBIPitch::BeginBoost(uint64_t this, float a2, char a3)
{
  uint64_t v3 = *(void *)(this + 16);
  uint64_t v4 = *(unsigned int *)(v3 + 28);
  if (v4 <= 3)
  {
    *(float *)(v3 + 4 * v4 + 8) = a2;
    *(unsigned char *)(v3 + v4 + 24) = a3;
    uint64_t v3 = *(void *)(this + 16);
    *(float *)(v3 + 4) = *(float *)(v3 + 4) * a2;
    LODWORD(v4) = *(_DWORD *)(v3 + 28);
  }
  *(_DWORD *)(v3 + 28) = v4 + 1;
  return this;
}

float MTFEToBIPitch::DownStepBoost(MTFEToBIPitch *this)
{
  uint64_t v1 = *((void *)this + 2);
  int v2 = *(_DWORD *)(v1 + 28);
  BOOL v3 = __OFSUB__(v2, 1);
  uint64_t v4 = (v2 - 1);
  if ((int)v4 < 0 == v3 && *(unsigned char *)(v1 + v4 + 24) == 2)
  {
    uint64_t v5 = v1 + 4 * v4;
    float v6 = *(float *)(v5 + 8);
    float v7 = *(float *)(v1 + 4) / v6;
    float result = (float)((float)(v6 + -1.0) * *(float *)(*((void *)this + 4) + 524)) + 1.0;
    *(float *)(v1 + 4) = v7 * result;
    *(float *)(v5 + 8) = result;
  }
  return result;
}

float MTFEToBIPitch::EndBoost(MTFEToBIPitch *this)
{
  uint64_t v1 = *((void *)this + 2);
  unsigned int v2 = *(_DWORD *)(v1 + 28) - 1;
  *(_DWORD *)(v1 + 28) = v2;
  if (v2 <= 3)
  {
    float result = *(float *)(v1 + 4) / *(float *)(v1 + 4 * v2 + 8);
    *(float *)(v1 + 4) = result;
  }
  return result;
}

void MTFEToBIPitch::SetupInitialRaising(float **this, MTFESentence *a2, float *a3)
{
  if ((MTBEDebugFlags::sMTXDebug & 0x400) == 0)
  {
    signed __int16 var8 = a2->var8;
    if (var8)
    {
      if (kMTFEParagraphInitialBoost)
      {
        MTBEDebugParams::GetParam((const __CFString *)kMTFEParagraphInitialBoost, (const __CFString *)&dword_1EA8D8820, a3, *(float *)&dword_1EA8D8820);
        kMTFEParagraphInitialBoost = 0;
        signed __int16 var8 = a2->var8;
      }
      float v6 = *(float *)&dword_1EA8D8820;
      if ((var8 & 2) != 0)
      {
        if (kMTFEParagraphRangePhrasalDownStep)
        {
          MTBEDebugParams::GetParam((const __CFString *)kMTFEParagraphRangePhrasalDownStep, (const __CFString *)&dword_1EA8D8830, a3, *(float *)&dword_1EA8D8830);
          kMTFEParagraphRangePhrasalDownStep = 0;
        }
        float v7 = *(float *)&dword_1EA8D8830;
        if (a2->var10 <= 3) {
          float v7 = *(float *)&dword_1EA8D8830 * *(float *)&dword_1EA8D8830;
        }
        float v6 = (float)((float)(v6 + -1.0) * v7) + 1.0;
      }
      *this[2] = v6;
      if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0) {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "IR %5.3f\n", v6);
      }
    }
  }
}

float MTFEToBIPitch::SetupFinalLowering(MTFEToBIPitch *this, MTFESentence *a2)
{
  if ((MTBEDebugFlags::sMTXDebug & 0x800) != 0) {
    LOBYTE(v2) = 0;
  }
  else {
    int v2 = ((unsigned __int16)a2->var8 >> 1) & 1;
  }
  *((unsigned char *)this + 105) = v2;
  float result = a2->var9;
  *((_DWORD *)this + 38) = (int)result;
  return result;
}

MTFESpeechElement *MTFEToBIPitch::VisitSentence(MTFEToBIPitch *this, MTFESentence *a2, float *a3)
{
  *((void *)this + 21) = a2;
  MTFEToBIPitch::SetupInitialRaising((float **)this, a2, a3);
  int v5 = ((unsigned __int16)a2->var8 >> 1) & 1;
  BOOL v6 = (MTBEDebugFlags::sMTXDebug & 0x800) == 0 && (a2->var8 & 2) != 0;
  int var9 = (int)a2->var9;
  *((unsigned char *)this + 105) = v6;
  *((_DWORD *)this + 38) = var9;
  *((unsigned char *)this + 164) = v5;
  MTBEParam::GetPitchFloorRange(*((MTBEParam **)this + 1), (float *)this + 35, (float *)this + 36);
  *((unsigned char *)this + 165) = (a2->var8 & 0x20) != 0;
  *((unsigned char *)this + 104) = 1;
  MTFESpeechElement::VisitChildren((MTFESpeechElement *)a2, this);
  *((unsigned char *)this + 104) = 0;

  return MTFESpeechElement::VisitChildren((MTFESpeechElement *)a2, this);
}

uint64_t MTFEToBIPitch::VisitIntonationalPhrase(uint64_t this, MTFESpeechElement *a2, float *a3)
{
  uint64_t v4 = this;
  if (*(unsigned char *)(this + 104))
  {
    *(_DWORD *)(this + 52) = 0;
    *(void *)(this + 72) = 0;
    *(void *)(this + 80) = 0;
    *(void *)(this + 64) = 0;
    *(unsigned char *)(this + 111) = 1;
    *(_WORD *)(this + 116) = 0;
    signed __int16 var7 = (signed __int16)a2[2].var7;
    *(_WORD *)(this + 114) = var7;
    *(_WORD *)(this + 118) = var7 - 1;
    int v6 = BYTE6(a2[2].var6);
    *(unsigned char *)(this + 148) = v6;
    if (v6 == 71) {
      *(unsigned char *)(this + 105) = 0;
    }
    if (*(unsigned char *)(*(void *)(this + 8) + 48))
    {
      a2[2].var5 = 0;
      operator new[]();
    }
    if (a2[3].var1 < 1)
    {
LABEL_36:
      MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)v4);
      MTFECommands::Visit((uint64_t)&a2[1].var1, v4);
      int v20 = *(__int16 *)&a2[3].var2;
      uint64_t v21 = *(void *)(v4 + 16);
      if (v20 <= 0)
      {
        unsigned int v22 = *(_DWORD *)(v21 + 28);
      }
      else
      {
        unsigned int v22 = *(_DWORD *)(v21 + 28);
        do
        {
          if (--v22 <= 3) {
            *(float *)(v21 + 4) = *(float *)(v21 + 4) / *(float *)(v21 + 4 * v22 + 8);
          }
          --v20;
        }
        while (v20);
        *(_DWORD *)(v21 + 28) = v22;
      }
      if (v22 > 6) {
        *(_DWORD *)(v21 + 28) = 0;
      }
      switch(*(unsigned char *)(v4 + 148))
      {
        case 'D':
        case 'E':
          if (*(void *)(v4 + 72))
          {
            if (kMTFEHighFinalProm)
            {
              MTBEDebugParams::GetParam((const __CFString *)kMTFEHighFinalProm, (const __CFString *)&dword_1EA8D8850, v19, *(float *)&dword_1EA8D8850);
              kMTFEHighFinalProm = 0;
            }
            float v23 = *(float *)&dword_1EA8D8850;
            if (*(float *)&dword_1EA8D8850 == 0.0) {
              float v23 = *(float *)(*(void *)(v4 + 32) + 60);
            }
LABEL_60:
            uint64_t v24 = *(void *)(v4 + 72);
            if (*(unsigned char *)v24 == 3) {
              float v23 = v23 + *(float *)(v24 + 24);
            }
          }
          else
          {
            float v23 = *(float *)(*(void *)(v4 + 32) + 16);
          }
LABEL_65:
          char v25 = 6;
          break;
        case 'F':
          float v23 = *(float *)(*(void *)(v4 + 32) + 188);
          goto LABEL_63;
        case 'G':
          float v23 = *(float *)(*(void *)(v4 + 32) + 444);
          if (*(void *)(v4 + 72)) {
            goto LABEL_60;
          }
          goto LABEL_65;
        case 'H':
          float v23 = *(float *)(*(void *)(v4 + 32) + 28);
LABEL_63:
          char v25 = 5;
          break;
        default:
          (*(void (**)(uint64_t))(*(void *)v4 + 96))(v4);
          int v28 = *(_DWORD *)(v4 + 52);
          LODWORD(a2[2].var5) = 200;
          HIDWORD(a2[2].var5) = v28 + 200;
          LODWORD(a2[2].var6) = *(_DWORD *)(v4 + 152);
          operator new[]();
      }
      char v26 = BYTE5(a2[2].var6);
      if (!v26)
      {
        BYTE5(a2[2].var6) = v25;
        char v26 = v25;
      }
      float v27 = *(float *)&a2[3].var5;
      if (v27 == 0.0)
      {
        *(float *)&a2[3].var5 = v23;
        float v27 = v23;
      }
      MTFEToBIPitch::AddProsodicToken((MTFEToBIPitch *)v4, v26, v27, *(MTFEPhoneme **)(v4 + 80), *(_DWORD *)(v4 + 100), 0, 0);
    }
    char v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      int v11 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDownStepMonosyllabicPhrases);
      float v13 = 1.0;
      if (v11 && *((__int16 *)&a2[2].var2 + 2) <= 1)
      {
        if (kMTFEParagraphRangePhrasalDownStep)
        {
          MTBEDebugParams::GetParam((const __CFString *)kMTFEParagraphRangePhrasalDownStep, (const __CFString *)&dword_1EA8D8830, v12, *(float *)&dword_1EA8D8830);
          kMTFEParagraphRangePhrasalDownStep = 0;
        }
        float v13 = *(float *)&dword_1EA8D8830;
      }
      unint64_t v14 = ((unint64_t)a2[3].var3 >> v9) & 3;
      if ((((unint64_t)a2[3].var3 >> v9) & 3) == 0) {
        break;
      }
      if (v14 == 2)
      {
        uint64_t v15 = *(void *)(v4 + 16);
        uint64_t v16 = *(unsigned int *)(v15 + 28);
        if (a2->var1 >= 3)
        {
          if (v16 > 3) {
            goto LABEL_34;
          }
          float v18 = *(float *)(*(void *)(v4 + 32) + 116);
LABEL_33:
          *(float *)(v15 + 4 * v16 + 8) = v18;
          *(unsigned char *)(v15 + v16 + 24) = v14;
          uint64_t v15 = *(void *)(v4 + 16);
          *(float *)(v15 + 4) = v18 * *(float *)(v15 + 4);
          LODWORD(v16) = *(_DWORD *)(v15 + 28);
          goto LABEL_34;
        }
        if (v16 > 3) {
          goto LABEL_34;
        }
        float v17 = *(float *)(*(void *)(v4 + 32) + 488);
LABEL_32:
        float v18 = v13 * v17;
        goto LABEL_33;
      }
      if (v14 == 1)
      {
        uint64_t v15 = *(void *)(v4 + 16);
        uint64_t v16 = *(unsigned int *)(v15 + 28);
        if (v16 <= 3)
        {
          float v17 = *(float *)(*(void *)(v4 + 32) + 452);
          goto LABEL_32;
        }
LABEL_34:
        *(_DWORD *)(v15 + 28) = v16 + 1;
      }
      ++v10;
      v9 += 2;
      if (v10 >= a2[3].var1) {
        goto LABEL_36;
      }
    }
    uint64_t v15 = *(void *)(v4 + 16);
    uint64_t v16 = *(unsigned int *)(v15 + 28);
    if (v16 > 3) {
      goto LABEL_34;
    }
    float v17 = *(float *)(*(void *)(v4 + 32) + 184);
    goto LABEL_32;
  }
  if (!*(unsigned char *)(*(void *)(this + 8) + 48))
  {
    *(void *)(this + 64) = a2[3].var0;
    *(void *)(this + 120) = a2[2].var3;
    *(_DWORD *)(this + 52) = HIDWORD(a2[2].var5) - 200;
    a2[3].char var0 = 0;
    int v7 = *(unsigned __int8 *)(this + 148);
    if (v7 == 72)
    {
      if (kMTFEExclamFinalRaisingRatio)
      {
        MTBEDebugParams::GetParam((const __CFString *)kMTFEExclamFinalRaisingRatio, (const __CFString *)a333, a3, *(float *)a333);
        kMTFEExclamFinalRaisingRatio = 0;
      }
      *(_DWORD *)(v4 + 176) = *(_DWORD *)a333;
      int v8 = &kMTFEExclamFinalRaisingDuration;
    }
    else if (v7 == 71)
    {
      if (kMTFEQuestFinalRaisingRatio)
      {
        MTBEDebugParams::GetParam((const __CFString *)kMTFEQuestFinalRaisingRatio, (const __CFString *)&dword_1EA8D8860, a3, *(float *)&dword_1EA8D8860);
        kMTFEQuestFinalRaisingRatio = 0;
      }
      *(_DWORD *)(v4 + 176) = dword_1EA8D8860;
      int v8 = &kMTFEQuestFinalRaisingDuration;
    }
    else if (*(unsigned char *)(this + 165))
    {
      if (kMTFEWHQuestFinalRaisingRatio)
      {
        MTBEDebugParams::GetParam((const __CFString *)kMTFEWHQuestFinalRaisingRatio, (const __CFString *)&dword_1EA8D88A0, a3, *(float *)&dword_1EA8D88A0);
        kMTFEWHQuestFinalRaisingRatio = 0;
      }
      *(_DWORD *)(v4 + 176) = dword_1EA8D88A0;
      int v8 = &kMTFEWHQuestFinalRaisingDuration;
    }
    else
    {
      if (kMTFEDeclFinalRaisingRatio)
      {
        MTBEDebugParams::GetParam((const __CFString *)kMTFEDeclFinalRaisingRatio, (const __CFString *)&dword_1EA8D88C0, a3, *(float *)&dword_1EA8D88C0);
        kMTFEDeclFinalRaisingRatio = 0;
      }
      *(_DWORD *)(v4 + 176) = dword_1EA8D88C0;
      int v8 = &kMTFEDeclFinalRaisingDuration;
    }
    float v29 = (float *)(v8 + 1);
    if (*v8)
    {
      float v29 = (float *)(v8 + 1);
      MTBEDebugParams::GetParam(*v8, (const __CFString *)(v8 + 1), a3, *((float *)v8 + 2));
      *int v8 = 0;
    }
    int v30 = (int)*v29;
    *(_DWORD *)(v4 + 180) = v30;
    int v31 = LODWORD(a2[2].var6) - *(_DWORD *)(v4 + 100) - v30;
    *(_DWORD *)(v4 + 156) = v31;
    if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0) {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "FL %5.3f %d %d\n", *(float *)(v4 + 176), v30, v31);
    }
    if (*(unsigned char *)(v4 + 48)) {
      MTFEToBIPitch::GeneratePitch((MTFEToBIPitch *)v4);
    }
    else {
      MTFEToBIPitch::GenerateMonotone((MTBEParam **)v4);
    }
    this = *(void *)(v4 + 64);
    if (this)
    {
      do
      {
        uint64_t v32 = *(void *)(this + 8);
        MEMORY[0x1E016FF00]();
        this = v32;
      }
      while (v32);
    }
  }
  return this;
}

void MTFEToBIPitch::AddProsodicToken(MTFEToBIPitch *this, unsigned __int8 a2, float a3, MTFEPhoneme *a4, int a5, int a6, float *a7)
{
}

void MTFEToBIPitch::GeneratePitch(MTFEToBIPitch *this)
{
  *((void *)this + 16) = *((void *)this + 15);
  float v3 = MTFEToBIPitch::Ref(this, 0, *((const MTFEToBIPitch::Token **)this + 8));
  *((float *)this + 34) = v3;
  uint64_t v4 = (float *)*((void *)this + 16);
  *uint64_t v4 = v3;
  *((void *)this + 16) = v4 + 1;
  int v5 = (unsigned __int8 *)*((void *)this + 8);
  if (v5)
  {
    unint64_t v6 = 0x1EA8D8000uLL;
    unint64_t v7 = 0x1EA8D8000uLL;
    while (1)
    {
      uint64_t v8 = *((int *)v5 + 12);
      uint64_t v9 = *((void *)this + 15);
      uint64_t v10 = v9 + 4 * v8;
      uint64_t v11 = v10 + 800;
      switch(*v5)
      {
        case 1u:
        case 2u:
          CFStringRef v12 = *(const __CFString **)(v6 + 2312);
          if (v12)
          {
            MTBEDebugParams::GetParam(v12, (const __CFString *)&dword_1EA8D8910, v2, *(float *)&dword_1EA8D8910);
            *(void *)(v6 + 2312) = 0;
          }
          float v13 = *(float *)(v7 + 2320);
          if (v13 == 0.0) {
            float v14 = MTFEToBIPitch::Low(this, -1, (const MTFEToBIPitch::Token *)v5);
          }
          else {
            float v14 = MTFEToBIPitch::LowForProm(this, -1, (const MTFEToBIPitch::Token *)v5, v13);
          }
          float v58 = v14;
          if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
          {
            TheoreticalAccentShape::TheoreticalAccentShape((TheoreticalAccentShape *)&v99, MTFEToBI::sTone[*v5]);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) - 1, v58, 1);
            TheoreticalAccentShape::print((TheoreticalAccentShape *)&v99, (__sFILE *)*MEMORY[0x1E4F143C8]);
            if (v102 < 0) {
              operator delete(__p);
            }
            if ((void)v99)
            {
              *((void *)&v99 + 1) = v99;
              operator delete((void *)v99);
            }
          }
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v10 + 796), v58);
          int v59 = (unsigned __int8 *)*((void *)v5 + 1);
          if (v59 && *v59 - 5 < 2) {
            goto LABEL_99;
          }
          MTFESpeechPedigree::MTFESpeechPedigree((MTFESpeechPedigree *)&v99, *((MTFESpeechElement **)v5 + 5));
          uint64_t v60 = *(int *)(v100 + 72);
          float v61 = MTFEToBIPitch::Ref(this, v60 - *((_DWORD *)v5 + 12), (const MTFEToBIPitch::Token *)v5);
          int v62 = *(_DWORD *)(*((void *)this + 4) + 124);
          if ((int)v60 - *((_DWORD *)v5 + 12) > v62) {
            MTFEToBIPitch::Slope((uint64_t)this, (float *)(*((void *)this + 15) + 4 * ((int)v60 - v62) + 800), v58);
          }
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(*((void *)this + 15) + 4 * v60 + 800), v61);
          goto LABEL_90;
        case 3u:
          if (kMTFEHighPhraseProm)
          {
            MTBEDebugParams::GetParam((const __CFString *)kMTFEHighPhraseProm, (const __CFString *)&dword_1EA8D8920, v2, *(float *)&dword_1EA8D8920);
            kMTFEHighPhraseProm = 0;
          }
          if (*(float *)&dword_1EA8D8920 == 0.0) {
            float v15 = MTFEToBIPitch::High(this, -1, (const MTFEToBIPitch::Token *)v5);
          }
          else {
            float v15 = MTFEToBIPitch::HighForProm(this, -1, (const MTFEToBIPitch::Token *)v5, *(float *)&dword_1EA8D8920);
          }
          float v72 = v15;
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v10 + 796), v15);
          MTFESpeechPedigree::MTFESpeechPedigree((MTFESpeechPedigree *)&v99, *((MTFESpeechElement **)v5 + 5));
          uint64_t v73 = *(int *)(v100 + 72);
          float v74 = MTFEToBIPitch::Ref(this, v73 - *((_DWORD *)v5 + 12), (const MTFEToBIPitch::Token *)v5);
          int v75 = *(_DWORD *)(*((void *)this + 4) + 124);
          if ((int)v73 - *((_DWORD *)v5 + 12) > v75) {
            MTFEToBIPitch::Slope((uint64_t)this, (float *)(*((void *)this + 15) + 4 * ((int)v73 - v75) + 800), v72);
          }
          int v76 = (unsigned char *)*((void *)v5 + 1);
          if (!v76 || *v76 != 6) {
            MTFEToBIPitch::Slope((uint64_t)this, (float *)(*((void *)this + 15) + 4 * v73 + 800), v74);
          }
          if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
          {
            TheoreticalAccentShape::TheoreticalAccentShape((TheoreticalAccentShape *)v97, MTFEToBI::sTone[*v5]);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)v97, *((_DWORD *)v5 + 12) - 1, v72, 1);
            TheoreticalAccentShape::print((TheoreticalAccentShape *)v97, (__sFILE *)*MEMORY[0x1E4F143C8]);
            if (v98 < 0) {
              operator delete(v97[4]);
            }
            if (v97[0])
            {
              v97[1] = v97[0];
              operator delete(v97[0]);
            }
          }
LABEL_90:
          MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)&v99);
          goto LABEL_99;
        case 5u:
          if (**((unsigned char **)v5 + 2) == 3)
          {
            MTFEToBIPitch::Slope((uint64_t)this, (float *)(v10 + 796), *((float *)this + 34));
            if ((MTBEDebugFlags::sMTXDebug & 0x200) == 0) {
              goto LABEL_99;
            }
            TheoreticalAccentShape::TheoreticalAccentShape((TheoreticalAccentShape *)&v99, MTFEToBI::sTone[*v5]);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) - 1, *((float *)this + 34), 1);
            TheoreticalAccentShape::print((TheoreticalAccentShape *)&v99, (__sFILE *)*MEMORY[0x1E4F143C8]);
            goto LABEL_95;
          }
          if (kMTFELowFinalProm)
          {
            MTBEDebugParams::GetParam((const __CFString *)kMTFELowFinalProm, (const __CFString *)&dword_1EA8D8930, v2, *(float *)&dword_1EA8D8930);
            kMTFELowFinalProm = 0;
          }
          if (*(float *)&dword_1EA8D8930 == 0.0) {
            float v63 = MTFEToBIPitch::Low(this, -1, (const MTFEToBIPitch::Token *)v5);
          }
          else {
            float v63 = MTFEToBIPitch::LowForProm(this, -1, (const MTFEToBIPitch::Token *)v5, *(float *)&dword_1EA8D8930);
          }
          float v79 = v63;
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v11 - 4 * *((int *)this + 40) + 4), v63);
          MTFEToBIPitch::Plateau((uint64_t)this, (float *)(v10 + 796), v79);
          if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
          {
            TheoreticalAccentShape::TheoreticalAccentShape((TheoreticalAccentShape *)&v99, MTFEToBI::sTone[*v5]);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) - *((_DWORD *)this + 40) + 1, v79, 0);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) - 1, v79, 1);
            TheoreticalAccentShape::print((TheoreticalAccentShape *)&v99, (__sFILE *)*MEMORY[0x1E4F143C8]);
            goto LABEL_95;
          }
          goto LABEL_99;
        case 6u:
          uint64_t v16 = (unsigned __int8 *)*((void *)v5 + 2);
          if (*v16 - 1 >= 3)
          {
            MTBEAbort(*((MTFESpeechElement **)this + 21));
          }
          float v18 = MTFEToBIPitch::High(this, -1, (const MTFEToBIPitch::Token *)v5);
          if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
          {
            TheoreticalAccentShape::TheoreticalAccentShape((TheoreticalAccentShape *)&v99, MTFEToBI::sTone[*v5]);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) - *((_DWORD *)this + 40) + 1, v18, 0);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) - 1, v18, 1);
            TheoreticalAccentShape::print((TheoreticalAccentShape *)&v99, (__sFILE *)*MEMORY[0x1E4F143C8]);
            if (v102 < 0) {
              operator delete(__p);
            }
            if ((void)v99)
            {
              *((void *)&v99 + 1) = v99;
              operator delete((void *)v99);
            }
          }
          int v19 = (const MTFEToBIPitch::Token *)*((void *)v16 + 2);
          int v20 = *((_DWORD *)v16 + 12);
          int v21 = *((_DWORD *)v5 + 12);
          if (kMTFEHighBoundaryWidth)
          {
            MTBEDebugParams::GetParam((const __CFString *)kMTFEHighBoundaryWidth, (const __CFString *)&dword_1EA8D8940, v17, *(float *)&dword_1EA8D8940);
            kMTFEHighBoundaryWidth = 0;
          }
          float v22 = *(float *)&dword_1EA8D8940;
          if ((float)((float)v21 - *(float *)&dword_1EA8D8940) >= (float)v20 || v19 == 0) {
            goto LABEL_29;
          }
          unsigned int v68 = *(unsigned __int8 *)v19;
          if (v68 > 0xC) {
            goto LABEL_29;
          }
          if (((1 << v68) & 0x1500) != 0)
          {
            int v77 = *((_DWORD *)v19 + 12);
            float v78 = MTFEToBIPitch::High(this, -1, v19);
LABEL_105:
            float v83 = v78;
            if (*((_DWORD *)v5 + 12) - *((_DWORD *)this + 40) > *((_DWORD *)v19 + 12))
            {
              float v84 = (float)*((int *)v16 + 12);
              float v85 = (*(float (**)(MTFEToBIPitch *, unsigned __int8 *))(*(void *)this + 112))(this, v5);
              LinearFunction::LinearFunction((LinearFunction *)v97, (float)v77, v83, v84, v85);
              int v87 = *((_DWORD *)v5 + 12);
              if (kMTFEHighBoundaryWidth)
              {
                MTBEDebugParams::GetParam((const __CFString *)kMTFEHighBoundaryWidth, (const __CFString *)&dword_1EA8D8940, v86, *(float *)&dword_1EA8D8940);
                kMTFEHighBoundaryWidth = 0;
              }
              float v88 = (float)v87 - *(float *)&dword_1EA8D8940;
              float v89 = (*(float (**)(MTFEToBIPitch *, unsigned __int8 *))(*(void *)this + 112))(this, v5);
              LinearFunction::LinearFunction((LinearFunction *)v96, v88, v89, (float)(*((_DWORD *)v5 + 12) - *((_DWORD *)this + 40)), v18);
              if (*(float *)v97 == v96[0]
                || (*(float *)&unsigned int v90 = (float)(v96[1] - *((float *)v97 + 1)) / (float)(*(float *)v97 - v96[0]),
                    float v91 = *((float *)v97 + 1) + (float)(*(float *)v97 * *(float *)&v90),
                    LOBYTE(v99) = 1,
                    *(void *)((char *)&v99 + 4) = v90 | ((unint64_t)LODWORD(v91) << 32),
                    int v92 = (int)*(float *)&v90,
                    v77 > (int)*(float *)&v90)
                || *((_DWORD *)v5 + 12) - *((_DWORD *)this + 40) < v92)
              {
                *((float *)this + 34) = v83;
                uint64_t v93 = *((void *)this + 15) + 4 * v77;
                goto LABEL_112;
              }
              *((float *)this + 34) = v83;
              uint64_t v95 = *((void *)this + 15);
              *((void *)this + 16) = v95 + 4 * v77 + 800;
              MTFEToBIPitch::Slope((uint64_t)this, (float *)(v95 + 4 * (v92 - 1) + 800), v91);
LABEL_31:
              MTFEToBIPitch::Slope((uint64_t)this, (float *)(v11 - 4 * *((int *)this + 40) + 4), v18);
              goto LABEL_32;
            }
            *((float *)this + 34) = v78;
            uint64_t v71 = *((void *)this + 15) + 4 * v77;
            goto LABEL_114;
          }
          if (((1 << v68) & 0x880) == 0)
          {
            if (v68 != 9)
            {
LABEL_29:
              float v24 = *((float *)this + 34);
LABEL_30:
              MTFEToBIPitch::Plateau((uint64_t)this, (float *)(v11 - 4 * (int)v22), v24);
              goto LABEL_31;
            }
            int v77 = *(_DWORD *)(*((void *)this + 4) + 152) + *((_DWORD *)v19 + 12);
            float v78 = MTFEToBIPitch::PlusHigh((float **)this, -1, v19);
            goto LABEL_105;
          }
          int v69 = *((_DWORD *)v5 + 12);
          uint64_t v70 = *((int *)v19 + 12);
          if ((float)((float)v69 - *(float *)&dword_1EA8D8940) >= (float)(int)v70)
          {
            float v24 = MTFEToBIPitch::Low(this, -1, v19);
            *((float *)this + 34) = v24;
            *((void *)this + 16) = *((void *)this + 15) + 4 * *((int *)v19 + 12) + 800;
            if (kMTFEHighBoundaryWidth)
            {
              MTBEDebugParams::GetParam((const __CFString *)kMTFEHighBoundaryWidth, (const __CFString *)&dword_1EA8D8940, v94, *(float *)&dword_1EA8D8940);
              kMTFEHighBoundaryWidth = 0;
              float v24 = *((float *)this + 34);
            }
            float v22 = *(float *)&dword_1EA8D8940;
            goto LABEL_30;
          }
          if (v69 - *((_DWORD *)this + 40) >= (int)v70)
          {
            *((float *)this + 34) = MTFEToBIPitch::Low(this, -1, v19);
            uint64_t v93 = *((void *)this + 15) + 4 * *((int *)v19 + 12);
LABEL_112:
            *((void *)this + 16) = v93 + 800;
            goto LABEL_31;
          }
          *((float *)this + 34) = v18;
          uint64_t v71 = *((void *)this + 15) + 4 * v70;
LABEL_114:
          *((void *)this + 16) = v71 + 800;
LABEL_32:
          MTFEToBIPitch::Plateau((uint64_t)this, (float *)(v10 + 796), v18);
LABEL_99:
          if (!*((void *)v5 + 1))
          {
            uint64_t v80 = *((int *)this + 13);
            char v81 = (float *)(*((void *)this + 15) + 4 * v80 + 796);
            float v82 = MTFEToBIPitch::Ref(this, v80 + ~*((_DWORD *)v5 + 12), (const MTFEToBIPitch::Token *)v5);
            MTFEToBIPitch::Slope((uint64_t)this, v81, v82);
          }
LABEL_101:
          int v5 = (unsigned __int8 *)*((void *)v5 + 1);
          if (!v5) {
            goto LABEL_120;
          }
          break;
        case 7u:
          float v25 = MTFEToBIPitch::LowStarLeg((float **)this, -1, (const MTFEToBIPitch::Token *)v5);
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v11 - 4 * *(int *)(*((void *)this + 4) + 168)), v25);
          float v26 = MTFEToBIPitch::Low(this, -1, (const MTFEToBIPitch::Token *)v5);
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v11 - 4 * *((int *)this + 40) + 4), v26);
          MTFEToBIPitch::Plateau((uint64_t)this, (float *)(v10 + 796), v26);
          if ((MTBEDebugFlags::sMTXDebug & 0x200) == 0) {
            goto LABEL_99;
          }
          TheoreticalAccentShape::TheoreticalAccentShape((TheoreticalAccentShape *)&v99, MTFEToBI::sTone[*v5]);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) - *(_DWORD *)(*((void *)this + 4) + 168), v25, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) - *((_DWORD *)this + 40) + 1, v26, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) - 1, v26, 1);
          TheoreticalAccentShape::print((TheoreticalAccentShape *)&v99, (__sFILE *)*MEMORY[0x1E4F143C8]);
          goto LABEL_95;
        case 8u:
          unint64_t v27 = v6;
          uint64_t v28 = *((void *)v5 + 1);
          if (v28)
          {
            if (*(unsigned char *)v28 == 3)
            {
              float v29 = *(unsigned char **)(v28 + 8);
              if (v29)
              {
                if (*v29 == 6) {
                  *((float *)v5 + 6) = *((float *)v5 + 6) * 0.5;
                }
              }
            }
          }
          uint64_t v30 = *((void *)this + 4);
          uint64_t v31 = *(int *)(v30 + 128);
          uint64_t v32 = *(int *)(v30 + 428);
          uint64_t v33 = *((int *)v5 + 13);
          if ((int)v8 <= (int)v33 + (int)v31)
          {
            float v64 = MTFEToBIPitch::LowPlus(this, ~v31, (const MTFEToBIPitch::Token *)v5);
            MTFEToBIPitch::Slope((uint64_t)this, (float *)(v11 - 4 * *((int *)this + 40) - 4 * v31), v64);
            MTFEToBIPitch::Plateau((uint64_t)this, (float *)(v11 - 4 * v31 - 4), v64);
            int v65 = ~v32;
            float v66 = MTFEToBIPitch::PlusHighStarLeg(this, ~v32, (const MTFEToBIPitch::Token *)v5);
            MTFEToBIPitch::Slope((uint64_t)this, (float *)(v11 - 4 * v32 - 4), v66);
            float v67 = MTFEToBIPitch::High(this, -1, (const MTFEToBIPitch::Token *)v5);
            MTFEToBIPitch::Slope((uint64_t)this, (float *)(v11 - 4 * *((int *)this + 40) + 4), v67);
            MTFEToBIPitch::Plateau((uint64_t)this, (float *)(v10 + 796), v67);
            unint64_t v6 = v27;
            unint64_t v7 = 0x1EA8D8000;
            if ((MTBEDebugFlags::sMTXDebug & 0x200) == 0) {
              goto LABEL_99;
            }
            TheoreticalAccentShape::TheoreticalAccentShape((TheoreticalAccentShape *)&v99, MTFEToBI::sTone[*v5]);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) - *((_DWORD *)this + 40) - v31, v64, 0);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) + ~v31, v64, 0);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) + v65, v66, 0);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) - *((_DWORD *)this + 40) + 1, v67, 0);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) - 1, v67, 1);
            TheoreticalAccentShape::print((TheoreticalAccentShape *)&v99, (__sFILE *)*MEMORY[0x1E4F143C8]);
          }
          else
          {
            float v34 = (float *)(v9 + 4 * v33 + 800);
            float v35 = MTFEToBIPitch::LowPlus(this, ((unint64_t)v34 - v11) >> 2, (const MTFEToBIPitch::Token *)v5);
            MTFEToBIPitch::Slope((uint64_t)this, &v34[-*((int *)this + 40)], v35);
            MTFEToBIPitch::Plateau((uint64_t)this, v34, v35);
            int v36 = v31 - v32;
            float v37 = MTFEToBIPitch::PlusHighStarLeg(this, ((unint64_t)&v34[(v31 - v32)] - v11) >> 2, (const MTFEToBIPitch::Token *)v5);
            MTFEToBIPitch::Slope((uint64_t)this, &v34[v31 - v32], v37);
            float v38 = MTFEToBIPitch::High(this, -1, (const MTFEToBIPitch::Token *)v5);
            MTFEToBIPitch::Slope((uint64_t)this, (float *)(v11 - 4 * *((int *)this + 40) + 4), v38);
            MTFEToBIPitch::Plateau((uint64_t)this, (float *)(v10 + 796), v38);
            unint64_t v6 = v27;
            unint64_t v7 = 0x1EA8D8000;
            if ((MTBEDebugFlags::sMTXDebug & 0x200) == 0) {
              goto LABEL_99;
            }
            TheoreticalAccentShape::TheoreticalAccentShape((TheoreticalAccentShape *)&v99, MTFEToBI::sTone[*v5]);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 13) - *((_DWORD *)this + 40), v35, 0);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 13), v35, 0);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 13) + v36, v37, 0);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) - *((_DWORD *)this + 40) + 1, v38, 0);
            TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) - 1, v38, 1);
            TheoreticalAccentShape::print((TheoreticalAccentShape *)&v99, (__sFILE *)*MEMORY[0x1E4F143C8]);
          }
LABEL_95:
          if (v102 < 0) {
            operator delete(__p);
          }
          if ((void)v99)
          {
            *((void *)&v99 + 1) = v99;
            operator delete((void *)v99);
          }
          goto LABEL_99;
        case 9u:
          float v39 = MTFEToBIPitch::Low(this, -1, (const MTFEToBIPitch::Token *)v5);
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v11 - 4 * *((int *)this + 40) - 4), v39);
          MTFEToBIPitch::Plateau((uint64_t)this, (float *)(v10 + 796), v39);
          float v40 = MTFEToBIPitch::LowStarPlusLeg((float **)this, *(_DWORD *)(*((void *)this + 4) + 152) - 1, (const MTFEToBIPitch::Token *)v5);
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v11 + 4 * *(int *)(*((void *)this + 4) + 156) - 4), v40);
          float v41 = MTFEToBIPitch::PlusHigh((float **)this, -1, (const MTFEToBIPitch::Token *)v5);
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v11 + 4 * *(int *)(*((void *)this + 4) + 152) - 4 * *((int *)this + 40) - 4), v41);
          MTFEToBIPitch::Plateau((uint64_t)this, (float *)(v11 + 4 * *(int *)(*((void *)this + 4) + 152) - 4), v41);
          if ((MTBEDebugFlags::sMTXDebug & 0x200) == 0) {
            goto LABEL_99;
          }
          TheoreticalAccentShape::TheoreticalAccentShape((TheoreticalAccentShape *)&v99, MTFEToBI::sTone[*v5]);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) + ~*((_DWORD *)this + 40), v39, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) - 1, v39, 1);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) + *(_DWORD *)(*((void *)this + 4) + 156) - 1, v40, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *(_DWORD *)(*((void *)this + 4) + 152) + *((_DWORD *)v5 + 12) + ~*((_DWORD *)this + 40), v41, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) + *(_DWORD *)(*((void *)this + 4) + 152) - 1, v41, 0);
          TheoreticalAccentShape::print((TheoreticalAccentShape *)&v99, (__sFILE *)*MEMORY[0x1E4F143C8]);
          goto LABEL_95;
        case 0xAu:
          uint64_t v42 = *((void *)v5 + 1);
          if (v42)
          {
            if (*(unsigned char *)v42 == 3)
            {
              unsigned int v43 = *(unsigned char **)(v42 + 8);
              if (v43)
              {
                if (*v43 == 6) {
                  *((float *)v5 + 6) = *((float *)v5 + 6) * 0.5;
                }
              }
            }
          }
          float v44 = MTFEToBIPitch::HighStarLeg(this, -1, (const MTFEToBIPitch::Token *)v5);
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v11 - 4 * *(int *)(*((void *)this + 4) + 100)), v44);
          float v45 = MTFEToBIPitch::High(this, -1, (const MTFEToBIPitch::Token *)v5);
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v11 - 4 * *((int *)this + 40) + 4), v45);
          MTFEToBIPitch::Plateau((uint64_t)this, (float *)(v10 + 796), v45);
          if ((MTBEDebugFlags::sMTXDebug & 0x200) == 0) {
            goto LABEL_99;
          }
          TheoreticalAccentShape::TheoreticalAccentShape((TheoreticalAccentShape *)&v99, MTFEToBI::sTone[*v5]);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) - *(_DWORD *)(*((void *)this + 4) + 100), v44, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) - *((_DWORD *)this + 40) + 1, v45, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) - 1, v45, 1);
          TheoreticalAccentShape::print((TheoreticalAccentShape *)&v99, (__sFILE *)*MEMORY[0x1E4F143C8]);
          goto LABEL_95;
        case 0xBu:
          uint64_t v46 = *((void *)this + 4);
          uint64_t v47 = *(int *)(v46 + 128);
          uint64_t v48 = *(int *)(v46 + 432);
          float v49 = MTFEToBIPitch::HighPlus((float **)this, ~v47, (const MTFEToBIPitch::Token *)v5);
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v11 - 4 * *((int *)this + 40) - 4 * v47), v49);
          MTFEToBIPitch::Plateau((uint64_t)this, (float *)(v11 - 4 * v47 - 4), v49);
          float v50 = MTFEToBIPitch::PlusLowStarLeg((float **)this, -1, (const MTFEToBIPitch::Token *)v5);
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v11 - 4 * v48 - 4), v50);
          float v51 = MTFEToBIPitch::Low(this, -1, (const MTFEToBIPitch::Token *)v5);
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v11 - 4 * *((int *)this + 40) + 4), v51);
          MTFEToBIPitch::Plateau((uint64_t)this, (float *)(v10 + 796), v51);
          if ((MTBEDebugFlags::sMTXDebug & 0x200) == 0) {
            goto LABEL_99;
          }
          TheoreticalAccentShape::TheoreticalAccentShape((TheoreticalAccentShape *)&v99, MTFEToBI::sTone[*v5]);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) - *((_DWORD *)this + 40) - v47, v49, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) + ~v47, v49, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) + ~v48, v50, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) - *((_DWORD *)this + 40) + 1, v51, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) - 1, v51, 1);
          TheoreticalAccentShape::print((TheoreticalAccentShape *)&v99, (__sFILE *)*MEMORY[0x1E4F143C8]);
          goto LABEL_95;
        case 0xCu:
          uint64_t v52 = *((void *)this + 4);
          uint64_t v53 = *(int *)(v52 + 76);
          uint64_t v54 = *(int *)(v52 + 408);
          float v55 = MTFEToBIPitch::HighPlusDownstep((float **)this, -1, (const MTFEToBIPitch::Token *)v5);
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v11 - 4 * *((int *)this + 40) - 4 * v53), v55);
          MTFEToBIPitch::Plateau((uint64_t)this, (float *)(v11 - 4 * v53 - 4), v55);
          float v56 = MTFEToBIPitch::DownsteppedHighStarLeg((float **)this, -1, (const MTFEToBIPitch::Token *)v5);
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v11 - 4 * v54 - 4), v56);
          float v57 = MTFEToBIPitch::High(this, -1, (const MTFEToBIPitch::Token *)v5);
          MTFEToBIPitch::Slope((uint64_t)this, (float *)(v11 - 4 * *((int *)this + 40) + 4), v57);
          MTFEToBIPitch::Plateau((uint64_t)this, (float *)(v10 + 796), v57);
          if ((MTBEDebugFlags::sMTXDebug & 0x200) == 0) {
            goto LABEL_99;
          }
          TheoreticalAccentShape::TheoreticalAccentShape((TheoreticalAccentShape *)&v99, MTFEToBI::sTone[*v5]);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) - *((_DWORD *)this + 40) - v53, v55, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) + ~v53, v55, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) + ~v54, v56, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) - *((_DWORD *)this + 40) + 1, v57, 0);
          TheoreticalAccentShape::addPoint((TheoreticalAccentShape *)&v99, *((_DWORD *)v5 + 12) - 1, v57, 1);
          TheoreticalAccentShape::print((TheoreticalAccentShape *)&v99, (__sFILE *)*MEMORY[0x1E4F143C8]);
          goto LABEL_95;
        default:
          goto LABEL_101;
      }
    }
  }
LABEL_120:
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0) {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "TotalPitchFrames\t%d\n", *((_DWORD *)this + 13));
  }
}

void sub_1DA4A8264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)va);
  _Unwind_Resume(a1);
}

void MTFEToBIPitch::GenerateMonotone(MTBEParam **this)
{
  uint64_t v5 = 0;
  MTBEParam::GetPitchFloorRange(this[1], (float *)&v5 + 1, (float *)&v5);
  *((float *)&v5 + 1) = *((float *)&v5 + 1) + (float)(*(float *)&v5 * *((float *)this[4] + 114));
  int v2 = *((_DWORD *)this + 13);
  if (v2 >= -199)
  {
    float v3 = this[15];
    int v4 = ((v2 + 199) & ~((v2 + 199) >> 31)) + 1;
    do
    {
      *(_DWORD *)float v3 = HIDWORD(v5);
      float v3 = (MTBEParam *)((char *)v3 + 4);
      --v4;
    }
    while (v4);
    this[15] = v3;
  }
}

void MTFEToBIPitch::VisitIntermediatePhrase(MTFEToBIPitch *this, MTFESpeechElement *a2)
{
  *(_WORD *)((char *)this + 107) = 0;
  *((unsigned char *)this + 110) = 0;
  *((unsigned char *)this + 112) = 0;
  *(_DWORD *)(&a2[1].var2 + 2) = *((_DWORD *)this + 13) + 1;
  *((_DWORD *)this + 14) = 0;
  MTFESpeechElement::VisitChildren(a2, this);
  LODWORD(a2[1].var3) = *((_DWORD *)this + 13) - *((_DWORD *)this + 14);
  if (a2->var5->var4 != a2)
  {
    switch(LOBYTE(a2[1].var4))
    {
      case 0xB:
        float v4 = *(float *)(*((void *)this + 4) + 460);
        goto LABEL_18;
      case 0xC:
        float v4 = *(float *)(*((void *)this + 4) + 464);
        goto LABEL_18;
      case 0xD:
        float v4 = *(float *)(*((void *)this + 4) + 468);
        goto LABEL_18;
      case 0xE:
        float v4 = *(float *)(*((void *)this + 4) + 472);
        goto LABEL_18;
      case 0xF:
        float v4 = *(float *)(*((void *)this + 4) + 476);
        goto LABEL_18;
      case 0x10:
        float v4 = *(float *)(*((void *)this + 4) + 480);
        goto LABEL_18;
      case 0x11:
        float v4 = *(float *)(*((void *)this + 4) + 484);
        goto LABEL_18;
      default:
        char v6 = 1;
        float v4 = 0.4;
        goto LABEL_19;
    }
  }
  if (*((unsigned char *)this + 148) == 71)
  {
    uint64_t v5 = (float *)*((void *)this + 9);
    if (v5 && (*(unsigned __int8 *)v5 | 2) == 0xA) {
      float v4 = v5[6];
    }
    else {
      float v4 = *(float *)(*((void *)this + 4) + 448);
    }
    char v6 = 3;
  }
  else
  {
    float v4 = *(float *)(*((void *)this + 4) + 172);
LABEL_18:
    char v6 = 1;
  }
LABEL_19:
  char v7 = BYTE1(a2[1].var4);
  if (!v7)
  {
    BYTE1(a2[1].var4) = v6;
    char v7 = v6;
  }
  float v8 = *((float *)&a2[1].var4 + 1);
  if (v8 == 0.0)
  {
    *((float *)&a2[1].var4 + 1) = v4;
    float v8 = v4;
  }
  MTFEToBIPitch::AddProsodicToken(this, v7, v8, *((MTFEPhoneme **)this + 10), *((_DWORD *)this + 25), 0, 0);
}

uint64_t MTFEToBIPitch::VisitWord(MTFEToBIPitch *this, MTFESpeechElement *a2)
{
  *((unsigned char *)this + 96) = BYTE6(a2[1].var4);
  float v4 = (SLWordTagSet *)((char *)&a2[1].var5 + 4);
  *((unsigned char *)this + 113) = SLWordTagSet::find((SLWordTagSet *)((char *)&a2[1].var5 + 4));
  *((unsigned char *)this + 106) = BYTE6(a2[1].var0) == 1;
  *((unsigned char *)this + 108) = *((unsigned char *)this + 107);
  char v5 = *((unsigned char *)this + 110);
  if (v5) {
    char v5 = *((unsigned char *)this + 96) == 19;
  }
  *((unsigned char *)this + 109) = v5;
  *((unsigned char *)this + 110) = 0;
  MTFECommands::Visit((uint64_t)&a2[2], (uint64_t)this);
  MTFESpeechElement::VisitChildren(a2, this);
  if (((uint64_t)a2[1].var0 & 0x40) == 0) {
    *((unsigned char *)this + 111) = 0;
  }
  uint64_t result = SLWordTagSet::find(v4);
  *((unsigned char *)this + 112) = result;
  return result;
}

MTFESpeechElement *MTFEToBIPitch::VisitSyllable(MTFEToBIPitch *this, MTFESpeechElement *a2)
{
  *((void *)this + 11) = a2;
  if (HIWORD(a2[1].var0)) {
    ++*((_WORD *)this + 58);
  }
  return MTFESpeechElement::VisitChildren(a2, this);
}

uint64_t MTFEToBIPitch::VisitPhoneme(uint64_t this, MTFEPhoneme *a2, float *a3)
{
  uint64_t v4 = this;
  int v5 = *(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * a2->var9);
  int var13 = (int)a2->var13;
  int v7 = *(_DWORD *)(this + 52) + var13;
  if (a2->var9) {
    int var13 = 0;
  }
  *(_DWORD *)(this + 52) = v7;
  *(_DWORD *)(this + 56) = var13;
  uint64_t v8 = *(void *)(this + 88);
  if (*(_WORD *)(v8 + 62)) {
    BOOL v9 = (v5 & 1) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9 && (a2->var15 & 0x1C00) != 0)
  {
    if (*(float *)(v8 + 64) != 0.0)
    {
LABEL_11:
      char v10 = 1;
LABEL_12:
      if (!*(unsigned char *)(v4 + 108)) {
        goto LABEL_64;
      }
      if (((1 << *(unsigned char *)(v4 + 96)) & 0x3E) == 0 || (int v11 = *(__int16 *)(v4 + 118), v11 < 1))
      {
        if ((v10 & 1) == 0)
        {
          uint64_t v13 = *(void *)(v4 + 88);
          *(_DWORD *)(v13 + 64) = *(_DWORD *)(*(void *)(v4 + 32) + 48);
          *(_WORD *)(v13 + 62) = 8;
        }
        *(_WORD *)(v4 + 107) = 0;
LABEL_64:
        MTFEToBIPitch::AddProsodicToken((MTFEToBIPitch *)v4, *(unsigned char *)(*(void *)(v4 + 88) + 62), *(float *)(*(void *)(v4 + 88) + 64), a2, *(_DWORD *)(v4 + 52), (int)a2->var13, 0);
      }
      if ((v10 & 1) == 0)
      {
        if (kMTFEVerbDowngradeFactor)
        {
          MTBEDebugParams::GetParam((const __CFString *)kMTFEVerbDowngradeFactor, (const __CFString *)&dword_1EA8D8900, a3, *(float *)&dword_1EA8D8900);
          kMTFEVerbDowngradeFactor = 0;
          LOWORD(v11) = *(_WORD *)(v4 + 118);
        }
        *(float *)(*(void *)(v4 + 88) + 64) = *(float *)&dword_1EA8D8900 * *(float *)(*(void *)(v4 + 88) + 64);
      }
      *(unsigned char *)(v4 + 109) = 1;
      __int16 v12 = v11 - 1;
LABEL_63:
      *(_WORD *)(v4 + 118) = v12;
      goto LABEL_64;
    }
    if (*(unsigned char *)(this + 106))
    {
      *(_DWORD *)(v8 + 64) = *(_DWORD *)(*(void *)(this + 32) + 36);
      goto LABEL_11;
    }
    int v14 = *(unsigned __int16 *)(this + 116);
    int v15 = *(unsigned __int16 *)(this + 114);
    if (v14 == 1)
    {
      uint64_t v16 = *(void *)(this + 32);
      if (v15 == 2)
      {
        float v17 = *(float *)(v16 + 52);
LABEL_43:
        *(float *)(v8 + 64) = v17;
        goto LABEL_44;
      }
      float v19 = *(float *)(v16 + 48);
      *(float *)(v8 + 64) = v19;
      if (v15 != 1 || *(unsigned char *)(this + 148) != 72)
      {
LABEL_44:
        if (*(unsigned char *)(v4 + 112) && *(unsigned char *)(v4 + 113))
        {
          *(_WORD *)(v8 + 62) = 7;
          *(unsigned char *)(v4 + 113) = 0;
        }
        if (*(_WORD *)(v8 + 62) == 8
          && ((int v22 = *(unsigned __int8 *)(v4 + 96), ((1 << v22) & 0x3E) != 0) || v22 == 17 && *(unsigned char *)(v4 + 111))
          && MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDowngradeVerbs)
          && *(__int16 *)(v4 + 114) >= 2
          && (int v23 = *(__int16 *)(v4 + 118), v23 >= 1))
        {
          if (kMTFEVerbDowngradeFactor)
          {
            MTBEDebugParams::GetParam((const __CFString *)kMTFEVerbDowngradeFactor, (const __CFString *)&dword_1EA8D8900, a3, *(float *)&dword_1EA8D8900);
            kMTFEVerbDowngradeFactor = 0;
            LOWORD(v23) = *(_WORD *)(v4 + 118);
          }
          uint64_t v24 = *(void *)(v4 + 88);
          *(float *)(v24 + 64) = *(float *)&dword_1EA8D8900 * *(float *)(v24 + 64);
          *(_WORD *)(v24 + 62) = 10;
          *(unsigned char *)(v4 + 107) = 1;
          *(_WORD *)(v4 + 109) = 257;
        }
        else
        {
          char v10 = *(unsigned char *)(v4 + 109);
          if (!v10) {
            goto LABEL_12;
          }
          int v23 = *(__int16 *)(v4 + 118);
          if (v23 < 1)
          {
            char v10 = 0;
            goto LABEL_12;
          }
          if (kMTFEVerbDowngradeFactor)
          {
            MTBEDebugParams::GetParam((const __CFString *)kMTFEVerbDowngradeFactor, (const __CFString *)&dword_1EA8D8900, a3, *(float *)&dword_1EA8D8900);
            kMTFEVerbDowngradeFactor = 0;
            LOWORD(v23) = *(_WORD *)(v4 + 118);
          }
          *(float *)(*(void *)(v4 + 88) + 64) = *(float *)&dword_1EA8D8900 * *(float *)(*(void *)(v4 + 88) + 64);
        }
        __int16 v12 = v23 - 1;
        goto LABEL_63;
      }
    }
    else
    {
      if (v14 != v15)
      {
        BOOL v9 = ((v15 ^ v14) & 1) == 0;
        uint64_t v20 = 120;
        if (v9) {
          uint64_t v20 = 56;
        }
        float v17 = *(float *)(*(void *)(this + 32) + v20);
        goto LABEL_43;
      }
      if (v14 == 2)
      {
        int v18 = *(unsigned __int8 *)(this + 148);
        float v19 = *(float *)(*(void *)(this + 32) + 48);
        *(float *)(v8 + 64) = v19;
        if (v18 != 72) {
          goto LABEL_44;
        }
      }
      else
      {
        uint64_t v21 = *(void *)(this + 32);
        if (*(unsigned char *)(this + 148) != 72)
        {
          float v17 = *(float *)(v21 + 112);
          goto LABEL_43;
        }
        float v19 = *(float *)(v21 + 32);
        *(float *)(v8 + 64) = v19;
      }
    }
    if (!*(unsigned char *)(this + 164))
    {
      if (kMTFEExclamPromBoost)
      {
        MTBEDebugParams::GetParam((const __CFString *)kMTFEExclamPromBoost, (const __CFString *)&dword_1EA8D88E0, a3, *(float *)&dword_1EA8D88E0);
        kMTFEExclamPromBoost = 0;
        uint64_t v8 = *(void *)(v4 + 88);
        float v19 = *(float *)(v8 + 64);
      }
      float v17 = *(float *)&dword_1EA8D88E0 + v19;
      goto LABEL_43;
    }
    goto LABEL_44;
  }
  if (!*(void *)(this + 80) || (v5 & 4) != 0 && (a2->var15 & 0x4000) == 0)
  {
    *(void *)(this + 80) = a2;
    *(_DWORD *)(this + 100) = *(_DWORD *)(this + 52);
  }
  return this;
}

float MTFEToBIPitch::VisitCommand(MTFEToBIPitch *this, MTFECommand *a2)
{
  int64_t var8 = a2->var8;
  if (var8 <= 1886220131)
  {
    if (var8 == 1885495666)
    {
      char v6 = (MTBEParam *)*((void *)this + 1);
      int64_t v7 = (int)(12 * MTBEParam::GetPitch(v6) + (SLODWORD(a2->var9) >> 8) + 8025);
    }
    else
    {
      if (var8 != 1885495667) {
        goto LABEL_18;
      }
      char v6 = (MTBEParam *)*((void *)this + 1);
      int64_t v7 = a2->var9 >> 8;
    }
    int v13 = MTBEParam::MidiToPitch(v6, v7);
    MTBEParam::SetPitch((uint64_t)v6, v13);
  }
  else
  {
    if (var8 != 1920165236)
    {
      if (var8 == 1886220146)
      {
        __int16 v12 = (MTBEParam *)*((void *)this + 1);
        int64_t var9 = a2->var9 + MTBEParam::GetModulation(v12);
        uint64_t v4 = (uint64_t)v12;
      }
      else
      {
        if (var8 != 1886220132) {
          goto LABEL_18;
        }
        uint64_t v4 = *((void *)this + 1);
        int64_t var9 = a2->var9;
      }
      goto LABEL_13;
    }
    uint64_t v8 = (MTBEParam *)*((void *)this + 3);
    if (v8)
    {
      if (a2->var9 == 1)
      {
        uint64_t v9 = *((void *)this + 1);
        int Pitch = MTBEParam::GetPitch(v8);
        MTBEParam::SetPitch(v9, Pitch);
        uint64_t v11 = *((void *)this + 1);
        int64_t var9 = MTBEParam::GetModulation(*((MTBEParam **)this + 3));
        uint64_t v4 = v11;
LABEL_13:
        MTBEParam::SetModulation(v4, var9);
        goto LABEL_18;
      }
      MTBEParam::ResetPitchParams((uint64_t)v8, *((__int16 **)this + 5));
    }
    MTBEParam::ResetPitchParams(*((void *)this + 1), *((__int16 **)this + 5));
  }
LABEL_18:
  int v14 = (MTBEParam *)*((void *)this + 1);

  return MTBEParam::GetPitchFloorRange(v14, (float *)this + 35, (float *)this + 36);
}

void MTFEToBIPitch::AdjustAlignment(MTFEToBIPitch *this)
{
  uint64_t v1 = (unsigned __int8 *)*((void *)this + 8);
  if (v1)
  {
    int v3 = 0;
    while (1)
    {
      int v4 = *((_DWORD *)v1 + 12);
      uint64_t v5 = *((void *)v1 + 5);
      *((_DWORD *)v1 + 13) = (int)(float)((float)v4 - *(float *)(v5 + 64));
      MTFESpeechPedigree::MTFESpeechPedigree((MTFESpeechPedigree *)v59, (MTFESpeechElement *)v5);
      int v6 = *v1;
      switch(*v1)
      {
        case 1u:
        case 3u:
          uint64_t v7 = *((void *)this + 4);
          uint64_t v8 = 12;
          if (v6 == 3) {
            uint64_t v8 = 8;
          }
          uint64_t v9 = 400;
          if (v6 == 3) {
            uint64_t v9 = 396;
          }
          float v10 = (float)*(int *)(v7 + v8);
          int v11 = *(_DWORD *)(v7 + v9);
          __int16 v12 = (unsigned __int8 *)*((void *)v1 + 1);
          unsigned int v13 = *v12 - 5;
          uint64_t v14 = 104;
          if (v13 < 2) {
            uint64_t v14 = 108;
          }
          int v15 = (int)(float)((float)((float)v3 + v10)
                           + (float)((float)v11
                                   * fminf((float)(*(_DWORD *)(v60 + 72) - v3) / (float)*(int *)(v7 + v14), 1.0)));
          *((_DWORD *)v1 + 12) = v15;
          if (v13 > 1)
          {
            if (v4 < v15)
            {
              *((_DWORD *)v1 + 12) = v4;
              int v15 = v4;
            }
          }
          else
          {
            int v16 = *((_DWORD *)v12 + 12) - *((_DWORD *)this + 40);
            if (v16 < v15)
            {
              *((_DWORD *)v1 + 12) = v16;
              int v15 = v16;
            }
          }
          goto LABEL_69;
        case 8u:
        case 0xAu:
          int v17 = *(__int16 *)(v61 + 174);
          uint64_t v18 = v62;
          int v19 = *(__int16 *)(v62 + 56);
          int v20 = *(__int16 *)(v60 + 62);
          uint64_t v21 = (unsigned __int8 *)*((void *)v1 + 1);
          double v22 = 0.0;
          if (v21)
          {
            int v23 = *v21;
            if ((v23 | 2) == 3)
            {
              BOOL v24 = v23 == 1;
              float v25 = (unsigned __int8 *)*((void *)v21 + 1);
              double v26 = 1.0;
              if (v25)
              {
                unsigned int v27 = *v25 - 5;
                BOOL v28 = v27 == 0;
                if (v27 <= 1) {
                  double v22 = 1.0;
                }
                else {
                  double v22 = 0.0;
                }
                if (v27 > 1) {
                  BOOL v28 = 0;
                }
                BOOL v29 = 0;
              }
              else
              {
                BOOL v28 = 0;
                BOOL v29 = 0;
              }
              goto LABEL_29;
            }
            MTFESpeechPedigree::MTFESpeechPedigree((MTFESpeechPedigree *)v57, *((MTFESpeechElement **)v21 + 5));
            BOOL v29 = *(__int16 *)(v62 + 56) + 1 == *(__int16 *)(v58 + 56);
            MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v57);
            BOOL v24 = 0;
            BOOL v28 = 0;
            uint64_t v18 = v62;
          }
          else
          {
            BOOL v24 = 0;
            BOOL v28 = 0;
            BOOL v29 = 0;
          }
          double v26 = 0.0;
LABEL_29:
          int v30 = v17 - 1;
          int v31 = v19 + 1;
          int v32 = v20 - 1;
          if (v6 == 10) {
            double v33 = 1.0;
          }
          else {
            double v33 = 0.0;
          }
          if (v30 == v19) {
            double v34 = 1.0;
          }
          else {
            double v34 = 0.0;
          }
          if (v30 == v31) {
            double v35 = 1.0;
          }
          else {
            double v35 = 0.0;
          }
          if (v32 == v19) {
            double v36 = 1.0;
          }
          else {
            double v36 = 0.0;
          }
          if (v32 == v31) {
            double v37 = 1.0;
          }
          else {
            double v37 = 0.0;
          }
          uint64_t v38 = *((void *)v1 + 5);
          int v39 = *(__int16 *)(v38 + 56);
          int v40 = v39 - *(__int16 *)(v18 + 58);
          if (v40 + 1 < 1)
          {
            int v41 = 0;
          }
          else
          {
            int v41 = 0;
            unsigned int v42 = v40 + 2;
            uint64_t v43 = *((void *)v1 + 5);
            do
            {
              float v44 = *(float *)(v43 + 64);
              uint64_t v43 = *(void *)(v43 + 48);
              int v41 = (int)(float)(v44 + (float)v41);
              --v42;
            }
            while (v42 > 1);
          }
          int v45 = *(__int16 *)(v18 + 60) + ~v39;
          if (v45 < 1)
          {
            int v46 = 0;
          }
          else
          {
            int v46 = 0;
            do
            {
              uint64_t v38 = *(void *)(v38 + 40);
              int v46 = (int)(float)(*(float *)(v38 + 64) + (float)v46);
              --v45;
            }
            while (v45);
          }
          float v47 = v33 * -0.030602
              + 1.090847
              + v34 * -0.376935
              + v35 * -0.056635
              + v26 * -0.059648
              + v22 * 2.822407
              + (double)v24 * -0.237752
              + (double)v28 * -3.033044
              + (double)v29 * -0.257898
              + v33 * -0.043025 * v34
              + v35 * 0.073297 * v26
              + v34 * -2.801309 * v22
              + v35 * -2.602059 * v22
              + v34 * 0.265622 * (double)v24
              + v22 * -2.736395 * (double)v24
              + v34 * 2.95485 * (double)v28
              + v35 * 2.808464 * (double)v28
              + (double)v24 * 2.82636 * (double)v28
              + v34 * 0.203654 * (double)v29
              + (double)v24 * -0.291976 * v36
              + v26 * -0.130482 * v37
              + v34 * 2.689319 * v22 * (double)v24
              + v35 * 2.559782 * v22 * (double)v24
              + v34 * -2.821848 * (double)v24 * (double)v28
              + v35 * -2.771837 * (double)v24 * (double)v28
              + v33 * -0.159011 * v35 * (double)v29;
          int v48 = v46 + v41;
          int v15 = *((_DWORD *)v1 + 12) - v41 + (int)(float)(v47 * (float)(v46 + v41));
          *((_DWORD *)v1 + 12) = v15;
          float v49 = (unsigned __int8 *)*((void *)v1 + 1);
          if (v49)
          {
            float v50 = (unsigned __int8 *)*((void *)v49 + 1);
            if (v50)
            {
              int v51 = *v49;
              if ((v51 | 2) == 3 && *v50 - 5 <= 1)
              {
                uint64_t v52 = *((void *)v1 + 2);
                if (v52) {
                  LODWORD(v52) = *(_DWORD *)(v52 + 48);
                }
                int v53 = *((_DWORD *)v50 + 12) - *((_DWORD *)this + 40);
                if (v15 > v53)
                {
                  BOOL v54 = v51 == 1;
                  uint64_t v55 = 12;
                  if (!v54) {
                    uint64_t v55 = 8;
                  }
                  int v15 = v53 - *(_DWORD *)(*((void *)this + 4) + v55);
                  if (v15 <= (int)v52 + 1) {
                    int v15 = v52 + 1;
                  }
                  *((_DWORD *)v1 + 12) = v15;
                }
              }
            }
          }
          if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0)
          {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "NewPitchAlignment\t%s\t%d\t%d\t%f\t%d\t%d\n", MTFEToBI::sTone[*v1], v48, v41, v47, v4, v15);
            int v15 = *((_DWORD *)v1 + 12);
          }
          int v3 = v15;
LABEL_69:
          int v56 = *((_DWORD *)this + 13) - 1;
          if (v15 < v56) {
            int v56 = v15;
          }
          if (v56 <= -200) {
            int v56 = -200;
          }
          *((_DWORD *)v1 + 12) = v56;
          if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0) {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "AdjustAlignment\t%s\t%d\t%d\n", MTFEToBI::sTone[*v1], v4, v56);
          }
          MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v59);
          uint64_t v1 = (unsigned __int8 *)*((void *)v1 + 1);
          if (!v1) {
            return;
          }
          break;
        default:
          int v15 = *((_DWORD *)v1 + 12);
          goto LABEL_69;
      }
    }
  }
}

void sub_1DA4A9244(_Unwind_Exception *a1)
{
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)(v1 - 216));
  _Unwind_Resume(a1);
}

uint64_t MTFEToBIPitch::Slope(uint64_t this, float *a2, float a3)
{
  uint64_t v5 = this;
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0) {
    this = fprintf((FILE *)*MEMORY[0x1E4F143C8], "Slope [%d - %d] %f\n", ((*(void *)(this + 128) - *(void *)(this + 120)) >> 2) - 200, (((unint64_t)a2 - *(void *)(this + 120)) >> 2) - 200, a3);
  }
  int v6 = *(float **)(v5 + 128);
  if (v6 <= a2)
  {
    unint64_t v7 = (unint64_t)((char *)a2 - (char *)v6) >> 2;
    if (v7 <= 0x7FFFFFFE)
    {
      float v8 = *(float *)(v5 + 136);
      float v9 = (float)(a3 - v8) / (float)((int)v7 + 1);
      unsigned int v10 = v7 + 2;
      do
      {
        float v8 = v9 + v8;
        *v6++ = v8;
        --v10;
      }
      while (v10 > 1);
    }
  }
  else
  {
    if (*(void *)(v5 + 120) + 4 > (unint64_t)a2) {
      return this;
    }
    *a2 = a3;
  }
  *(float *)(v5 + 136) = a3;
  *(void *)(v5 + 128) = a2 + 1;
  return this;
}

uint64_t MTFEToBIPitch::SlopeFromTo(uint64_t this, float *a2, float a3, float *a4, float a5)
{
  float v7 = a3;
  uint64_t v9 = this;
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0) {
    this = fprintf((FILE *)*MEMORY[0x1E4F143C8], "SlopeFromTo [%d - %d] %f -> %f\n", (((unint64_t)a2 - *(void *)(this + 120)) >> 2) - 200, (((unint64_t)a4 - *(void *)(this + 120)) >> 2) - 200, a3, a5);
  }
  *a2 = v7;
  unsigned int v10 = a2 + 1;
  if (a2 + 1 <= a4)
  {
    float v11 = (float)(a5 - v7) / (float)(a4 - a2);
    do
    {
      float v7 = v11 + v7;
      *v10++ = v7;
    }
    while (v10 <= a4);
  }
  *(float *)(v9 + 136) = a5;
  *(void *)(v9 + 128) = a4 + 1;
  return this;
}

uint64_t MTFEToBIPitch::Plateau(uint64_t this, float *a2, float a3)
{
  uint64_t v5 = this;
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0) {
    this = fprintf((FILE *)*MEMORY[0x1E4F143C8], "Plateau [%d - %d] %f\n", ((*(void *)(this + 128) - *(void *)(this + 120)) >> 2) - 200, (((unint64_t)a2 - *(void *)(this + 120)) >> 2) - 200, a3);
  }
  int v6 = *(float **)(v5 + 128);
  if (v6 <= a2)
  {
    do
      *v6++ = a3;
    while (v6 <= a2);
  }
  else
  {
    if (*(void *)(v5 + 120) + 4 > (unint64_t)a2) {
      return this;
    }
    *a2 = a3;
  }
  *(float *)(v5 + 136) = a3;
  *(void *)(v5 + 128) = a2 + 1;
  return this;
}

float MTFEToBIPitch::Ref(MTFEToBIPitch *this, int a2, const MTFEToBIPitch::Token *a3)
{
  float v5 = *((float *)a3 + 8)
     + (float)((*(float (**)(MTFEToBIPitch *))(*(void *)this + 104))(this)
             * *(float *)(*((void *)this + 4) + 456));
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0) {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "R    %d %f %f\n", *((_DWORD *)a3 + 12) + a2, 1.0, v5);
  }
  return v5;
}

float MTFEToBIPitch::LowPlus(MTFEToBIPitch *this, int a2, const MTFEToBIPitch::Token *a3)
{
  float v6 = (*(float (**)(MTFEToBIPitch *))(*(void *)this + 104))(this);
  float v7 = *((float *)a3 + 6);
  float v8 = *((float *)a3 + 8)
     + (float)(v6
             * (float)(*(float *)(*((void *)this + 4) + 132)
                     + (float)(*(float *)(*((void *)this + 4) + 136)
                             * (float)(*(float *)(*((void *)this + 4) + 456)
                                     + (float)((float)(1.0 - *(float *)(*((void *)this + 4) + 456)) * v7)))));
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0) {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "L+   %d %f %f\n", *((_DWORD *)a3 + 12) + a2, v7, v8);
  }
  return v8;
}

float MTFEToBIPitch::PlusHighStarLeg(MTFEToBIPitch *this, int a2, const MTFEToBIPitch::Token *a3)
{
  float v6 = (*(float (**)(MTFEToBIPitch *))(*(void *)this + 104))(this);
  float v7 = *((float *)a3 + 6);
  float v8 = *((float *)a3 + 8)
     + (float)(v6
             * (float)(*(float *)(*((void *)this + 4) + 420)
                     + (float)(*(float *)(*((void *)this + 4) + 424)
                             * (float)(*(float *)(*((void *)this + 4) + 456)
                                     + (float)((float)(1.0 - *(float *)(*((void *)this + 4) + 456)) * v7)))));
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0) {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "+H*  %d %f %f\n", *((_DWORD *)a3 + 12) + a2, v7, v8);
  }
  return v8;
}

float MTFEToBIPitch::High(MTFEToBIPitch *this, int a2, const MTFEToBIPitch::Token *a3)
{
  float v6 = (*(float (**)(MTFEToBIPitch *))(*(void *)this + 104))(this);
  float v7 = *((float *)a3 + 6);
  float v8 = *((float *)a3 + 8)
     + (float)(v6
             * (float)(*(float *)(*((void *)this + 4) + 456)
                     + (float)((float)(1.0 - *(float *)(*((void *)this + 4) + 456)) * v7)));
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0) {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "H*   %d %f %f\n", *((_DWORD *)a3 + 12) + a2, v7, v8);
  }
  return v8;
}

void TheoreticalAccentShape::addPoint(TheoreticalAccentShape *this, int a2, float a3, int a4)
{
  float v8 = (char *)this + 16;
  unint64_t v9 = *((void *)this + 2);
  unsigned int v10 = (float *)*((void *)this + 1);
  if ((unint64_t)v10 >= v9)
  {
    __int16 v12 = *(float **)this;
    uint64_t v13 = ((uint64_t)v10 - *(void *)this) >> 3;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v9 - (void)v12;
    if (v15 >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>((uint64_t)v8, v16);
      __int16 v12 = *(float **)this;
      unsigned int v10 = (float *)*((void *)this + 1);
    }
    else
    {
      int v17 = 0;
    }
    uint64_t v18 = (float *)&v17[8 * v13];
    int v19 = &v17[8 * v16];
    *(_DWORD *)uint64_t v18 = a2;
    v18[1] = a3;
    float v11 = v18 + 2;
    if (v10 != v12)
    {
      do
      {
        uint64_t v20 = *((void *)v10 - 1);
        v10 -= 2;
        *((void *)v18 - 1) = v20;
        v18 -= 2;
      }
      while (v10 != v12);
      __int16 v12 = *(float **)this;
    }
    *(void *)this = v18;
    *((void *)this + 1) = v11;
    *((void *)this + 2) = v19;
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    *(_DWORD *)unsigned int v10 = a2;
    v10[1] = a3;
    float v11 = v10 + 2;
  }
  *((void *)this + 1) = v11;
  if (a4) {
    *((void *)this + 3) = (((uint64_t)v11 - *(void *)this) >> 3) - 1;
  }
}

uint64_t TheoreticalAccentShape::print(TheoreticalAccentShape *this, __sFILE *a2)
{
  int v4 = (char *)this + 32;
  if (*((char *)this + 55) < 0) {
    int v4 = *(const char **)v4;
  }
  fprintf(a2, "TheoreticalAccentShape\t%s", v4);
  uint64_t v5 = *(void *)this;
  if (*((void *)this + 1) != *(void *)this)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      fprintf(a2, " (%d,%f)", *(_DWORD *)(v5 + v6), *(float *)(v5 + v6 + 4));
      if (v7 == *((void *)this + 3)) {
        fputc(42, a2);
      }
      ++v7;
      uint64_t v5 = *(void *)this;
      v6 += 8;
    }
    while (v7 < (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
  }

  return fputc(10, a2);
}

void TheoreticalAccentShape::~TheoreticalAccentShape(void **this)
{
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  int v2 = *this;
  if (*this)
  {
    this[1] = v2;
    operator delete(v2);
  }
}

float MTFEToBIPitch::HighStarLeg(MTFEToBIPitch *this, int a2, const MTFEToBIPitch::Token *a3)
{
  float v6 = (*(float (**)(MTFEToBIPitch *))(*(void *)this + 104))(this);
  float v7 = *((float *)a3 + 6);
  float v8 = *((float *)a3 + 8)
     + (float)(v6
             * (float)(*(float *)(*((void *)this + 4) + 92)
                     + (float)(*(float *)(*((void *)this + 4) + 96)
                             * (float)(*(float *)(*((void *)this + 4) + 456)
                                     + (float)((float)(1.0 - *(float *)(*((void *)this + 4) + 456)) * v7)))));
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0) {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], ".H*  %d %f %f\n", *((_DWORD *)a3 + 12) + a2, v7, v8);
  }
  return v8;
}

float MTFEToBIPitch::LowStarLeg(float **this, int a2, const MTFEToBIPitch::Token *a3)
{
  float v6 = (*((float (**)(float **))*this + 13))(this);
  float v7 = this[4];
  float v8 = *((float *)a3 + 6);
  float v9 = v7[36]
     + (float)(*((float *)a3 + 8)
             + (float)(v6
                     * (float)((float)((float)(v7[114] * (float)(1.0 - v8)) + 0.0)
                             + (float)((float)(v7[114] - (float)((float)(v7[114] * (float)(1.0 - v8)) + 0.0)) * v7[37]))));
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0) {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], ".L*  %d %f %f\n", *((_DWORD *)a3 + 12) + a2, v8, v9);
  }
  return v9;
}

float MTFEToBIPitch::Low(MTFEToBIPitch *this, int a2, const MTFEToBIPitch::Token *a3)
{
  float v6 = (*(float (**)(MTFEToBIPitch *))(*(void *)this + 104))(this);
  float v7 = (1.0 - *((float *)a3 + 6)) * *(float *)(*((void *)this + 4) + 456);
  float v8 = *((float *)a3 + 8) + (float)(v6 * v7);
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0) {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "L    %d %f %f\n", *((_DWORD *)a3 + 12) + a2, *((float *)a3 + 6), v8);
  }
  return v8;
}

float MTFEToBIPitch::LowStarPlusLeg(float **this, int a2, const MTFEToBIPitch::Token *a3)
{
  float v6 = (*((float (**)(float **))*this + 13))(this);
  float v7 = this[4];
  float v8 = *((float *)a3 + 6);
  float v9 = (float)(v7[114] * (float)(1.0 - v8)) + 0.0;
  float v10 = *((float *)a3 + 8)
      + (float)(v6
              * (float)(v9
                      + (float)((float)((float)(v7[103] + (float)(v9 + (float)((float)(1.0 - v9) * v7[104]))) - v9)
                              * (float)(v7[41] + v7[40]))));
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0) {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], ".L*+  %d %f %f\n", *((_DWORD *)a3 + 12) + a2, v8, v10);
  }
  return v10;
}

float MTFEToBIPitch::PlusHigh(float **this, int a2, const MTFEToBIPitch::Token *a3)
{
  float v6 = (*((float (**)(float **))*this + 13))(this);
  float v7 = this[4];
  float v8 = *((float *)a3 + 6);
  float v9 = (float)(v7[114] * (float)(1.0 - v8)) + 0.0;
  float v10 = v7[103] + (float)(*((float *)a3 + 8) + (float)(v6 * (float)(v9 + (float)((float)(1.0 - v9) * v7[104]))));
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0) {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], ".H*  %d %f %f\n", *((_DWORD *)a3 + 12) + a2, v8, v10);
  }
  return v10;
}

float MTFEToBIPitch::HighPlus(float **this, int a2, const MTFEToBIPitch::Token *a3)
{
  float v6 = (*((float (**)(float **))*this + 13))(this);
  float v7 = this[4];
  float v8 = *((float *)a3 + 6);
  float v9 = (float)(v7[114] * (float)(1.0 - v8)) + 0.0;
  float v10 = v7[20] + (float)(*((float *)a3 + 8) + (float)(v6 * (float)(v9 + (float)((float)(1.0 - v9) * v7[22]))));
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0) {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], ".H*  %d %f %f\n", *((_DWORD *)a3 + 12) + a2, v8, v10);
  }
  return v10;
}

float MTFEToBIPitch::PlusLowStarLeg(float **this, int a2, const MTFEToBIPitch::Token *a3)
{
  float v6 = (*((float (**)(float **))*this + 13))(this);
  float v7 = this[4];
  float v8 = *((float *)a3 + 6);
  float v9 = (float)(v7[114] * (float)(1.0 - v8)) + 0.0;
  float v10 = v7[109]
      + (float)(*((float *)a3 + 8)
              + (float)(v6
                      * (float)(v9
                              + (float)((float)((float)(v7[20] + (float)(v9 + (float)((float)(1.0 - v9) * v7[22]))) - v9)
                                      * v7[110]))));
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0) {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], ".H*  %d %f %f\n", *((_DWORD *)a3 + 12) + a2, v8, v10);
  }
  return v10;
}

float MTFEToBIPitch::HighPlusDownstep(float **this, int a2, const MTFEToBIPitch::Token *a3)
{
  float v6 = (*((float (**)(float **))*this + 13))(this);
  float v7 = this[4];
  float v8 = *((float *)a3 + 6);
  float v9 = v7[114] + (float)((float)(1.0 - v7[114]) * v8);
  float v10 = v7[17] + (float)(*((float *)a3 + 8) + (float)(v6 * (float)(v9 + (float)((float)(1.0 - v9) * v7[18]))));
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0) {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "H+!  %d %f %f\n", *((_DWORD *)a3 + 12) + a2, v8, v10);
  }
  return v10;
}

float MTFEToBIPitch::DownsteppedHighStarLeg(float **this, int a2, const MTFEToBIPitch::Token *a3)
{
  float v6 = (*((float (**)(float **))*this + 13))(this);
  float v7 = this[4];
  float v8 = *((float *)a3 + 6);
  float v9 = v7[114] + (float)((float)(1.0 - v7[114]) * v8);
  float v10 = v7[5]
      + (float)(*((float *)a3 + 8)
              + (float)(v6
                      * (float)(v9
                              + (float)((float)((float)(v7[17] + (float)(v9 + (float)((float)(1.0 - v9) * v7[18]))) - v9)
                                      * v7[6]))));
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0) {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "!H*  %d %f %f\n", *((_DWORD *)a3 + 12) + a2, v8, v10);
  }
  return v10;
}

float MTFEToBIPitch::LowForProm(MTFEToBIPitch *this, int a2, const MTFEToBIPitch::Token *a3, float a4)
{
  float v8 = (*(float (**)(MTFEToBIPitch *))(*(void *)this + 104))(this);
  double v9 = a4;
  float v10 = (1.0 - a4) * *(float *)(*((void *)this + 4) + 456);
  float v11 = *((float *)a3 + 8) + (float)(v8 * v10);
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0) {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "L    %d %f %f\n", *((_DWORD *)a3 + 12) + a2, v9, v11);
  }
  return v11;
}

float MTFEToBIPitch::HighForProm(MTFEToBIPitch *this, int a2, const MTFEToBIPitch::Token *a3, float a4)
{
  float v7 = *((float *)a3 + 8)
     + (float)((*(float (**)(MTFEToBIPitch *))(*(void *)this + 104))(this)
             * (float)(*(float *)(*((void *)this + 4) + 456)
                     + (float)((float)(1.0 - *(float *)(*((void *)this + 4) + 456)) * a4)));
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0) {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "H*   %d %f %f\n", *((_DWORD *)a3 + 12) + a2, a4, v7);
  }
  return v7;
}

float MTFEToBIPitch::FinalLowering(MTFEToBIPitch *this, int a2)
{
  int v2 = a2 - *((_DWORD *)this + 39);
  float v3 = 1.0;
  if (*((unsigned char *)this + 105)) {
    BOOL v4 = v2 < 1;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    float v5 = *((float *)this + 44);
    int v6 = *((_DWORD *)this + 45);
    float v3 = (float)((float)(v5 * (float)v2) / (float)v6) + 1.0;
    if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0) {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "FinalLowering %5.3f %d %d = %5.3f\n", v5, v2, v6, v3);
    }
  }
  return v3;
}

float MTFEToBIPitch::BoostedRange(MTFEToBIPitch *this, int a2, const MTFEToBIPitch::Token *a3)
{
  if (kMTFEParagraphInitialBoost)
  {
    MTBEDebugParams::GetParam((const __CFString *)kMTFEParagraphInitialBoost, (const __CFString *)&dword_1EA8D8820, (float *)a3, *(float *)&dword_1EA8D8820);
    kMTFEParagraphInitialBoost = 0;
  }
  float v6 = *(float *)&dword_1EA8D8820;
  if (kMTFEParagraphRangePhrasalDownStep)
  {
    MTBEDebugParams::GetParam((const __CFString *)kMTFEParagraphRangePhrasalDownStep, (const __CFString *)&dword_1EA8D8830, (float *)a3, *(float *)&dword_1EA8D8830);
    kMTFEParagraphRangePhrasalDownStep = 0;
  }
  float v7 = (float)((float)(v6 + -1.0) * (float)(1.0 / *(float *)&dword_1EA8D8830)) + 1.0;
  float v8 = MTFEToBIPitch::FinalLowering(this, *((_DWORD *)a3 + 12) + a2);
  float v9 = *((float *)a3 + 7);
  float v10 = v8 * v9;
  if (v7 >= v10) {
    float v7 = v10;
  }
  if ((MTBEDebugFlags::sMTXDebug & 0x200) != 0) {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "BoostRange %5.3f %5.3f %5.3f %5.3f\n", (float)(v7 * *((float *)a3 + 9)), *((float *)a3 + 9), v7, v9);
  }
  return v7 * *((float *)a3 + 9);
}

double MTFEToBIPitch::PitchValue(MTFESpeechElement **this, int a2, const MTFEToBIPitch::Token *a3)
{
  unsigned int v3 = *(unsigned __int8 *)a3;
  if (v3 > 0xC) {
    goto LABEL_10;
  }
  int v4 = 1 << v3;
  if ((v4 & 0xAA6) != 0)
  {
    *(float *)&double result = MTFEToBIPitch::Low((MTFEToBIPitch *)this, -1, a3);
    return result;
  }
  if ((v4 & 0x1548) == 0)
  {
LABEL_10:
    MTBEAbort(this[21]);
    return 0.0;
  }

  *(float *)&double result = MTFEToBIPitch::High((MTFEToBIPitch *)this, -1, a3);
  return result;
}

float MTFEToBIPitch::PhraseAccentForOverlappingHighFinalBoundary(MTFESpeechElement **this, const MTFEToBIPitch::Token *a2)
{
  if (*(unsigned char *)a2 != 6) {
    MTFEToBIPitch::PhraseAccentForOverlappingHighFinalBoundary();
  }
  unsigned int v3 = (const MTFEToBIPitch::Token *)*((void *)a2 + 2);
  if (!v3 || (int v4 = *(unsigned __int8 *)v3, (v4 - 1) >= 3))
  {
    MTBEAbort(this[21]);
    int v4 = *(unsigned __int8 *)v3;
  }
  if (v4 == 3)
  {
    return MTFEToBIPitch::High((MTFEToBIPitch *)this, -1, v3);
  }
  else
  {
    return MTFEToBIPitch::Low((MTFEToBIPitch *)this, -1, v3);
  }
}

void MTFEToBIPitch::~MTFEToBIPitch(MTFEToBIPitch *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

void TheoreticalAccentShape::TheoreticalAccentShape(TheoreticalAccentShape *this, char *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 4, a2);
}

void sub_1DA4AA768(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    float v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    float v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void LinearFunction::LinearFunction(LinearFunction *this, float a2, float a3, float a4, float a5)
{
  if (a2 == a4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Can't not describe function x=c, where c is a constant.");
    __cxa_throw(exception, MEMORY[0x1E4FBA328], MEMORY[0x1E4FBA1B0]);
  }
  float v5 = (float)(a3 - a5) / (float)(a2 - a4);
  *(float *)this = v5;
  *((float *)this + 1) = a3 - (float)(v5 * a2);
}

void sub_1DA4AA8F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void SampleBufferRingList::SampleBufferRingList(SampleBufferRingList *this, uint64_t a2)
{
  int v2 = a2;
  size_t v4 = std::vector<SampleBuffer>::vector(this, a2 + 1);
  *((_DWORD *)v4 + 7) = 0;
  *((_DWORD *)v4 + 8) = 0;
  float v5 = v4 + 5;
  *((_DWORD *)v4 + 6) = v2;
  pthread_mutex_init((pthread_mutex_t *)(v4 + 5), 0);
  *((void *)this + 13) = v5;
  pthread_cond_init((pthread_cond_t *)((char *)this + 112), 0);
  *((void *)this + 20) = v5;
  pthread_cond_init((pthread_cond_t *)((char *)this + 168), 0);
  *((void *)this + 27) = v5;
  pthread_cond_init((pthread_cond_t *)((char *)this + 224), 0);
}

void sub_1DA4AA994(_Unwind_Exception *a1)
{
  float v5 = v4;
  pthread_cond_destroy(v5);
  pthread_cond_destroy(v3);
  pthread_mutex_destroy(v2);
  uint64_t v7 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t SampleBufferRingList::AvailableCapacity(SampleBufferRingList *this)
{
  uint64_t v8 = (char *)this + 40;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 40));
  char v9 = 1;
  int v2 = *((_DWORD *)this + 7);
  int v3 = *((_DWORD *)this + 8);
  BOOL v4 = __OFSUB__(v2, v3);
  unint64_t v5 = (v2 - v3);
  if (((v5 & 0x80000000) != 0) ^ v4 | (v5 == 0)) {
    unint64_t v5 = (v5 + *((_DWORD *)this + 6));
  }
  uint64_t v6 = 500 * (int)v5;
  MTTScopedLock::~MTTScopedLock((void *)v5, (MTTScopedLock *)&v8);
  return v6;
}

uint64_t SampleBufferRingList::AvailableCapacityDetail(SampleBufferRingList *this)
{
  int v1 = *((_DWORD *)this + 7);
  int v2 = *((_DWORD *)this + 8);
  BOOL v3 = __OFSUB__(v1, v2);
  int v4 = v1 - v2;
  if ((v4 < 0) ^ v3 | (v4 == 0)) {
    v4 += *((_DWORD *)this + 6);
  }
  return 500 * v4;
}

uint64_t SampleBufferRingList::SamplesAdded(SampleBufferRingList *this)
{
  char v9 = (char *)this + 40;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 40));
  char v10 = 1;
  int v2 = *((_DWORD *)this + 7);
  int v3 = *((_DWORD *)this + 8);
  BOOL v4 = __OFSUB__(v2, v3);
  unint64_t v5 = (v2 - v3);
  int v6 = *((_DWORD *)this + 6);
  if (((v5 & 0x80000000) != 0) ^ v4 | (v5 == 0)) {
    unint64_t v5 = (v5 + v6);
  }
  uint64_t v7 = 500 * v6 - 500 * (int)v5;
  MTTScopedLock::~MTTScopedLock((void *)v5, (MTTScopedLock *)&v9);
  return v7;
}

uint64_t SampleBufferRingList::SamplesAddedDetail(SampleBufferRingList *this)
{
  int v1 = *((_DWORD *)this + 7);
  int v2 = *((_DWORD *)this + 8);
  BOOL v3 = __OFSUB__(v1, v2);
  int v4 = v1 - v2;
  int v5 = *((_DWORD *)this + 6);
  if ((v4 < 0) ^ v3 | (v4 == 0)) {
    v4 += v5;
  }
  return 500 * v5 - 500 * v4;
}

void *SampleBufferRingList::AddSamples(SampleBufferRingList *this, float *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v13 = (char *)this + 40;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 40));
  uint64_t v8 = 1;
  for (char i = 1; a3; a3 -= v11)
  {
    while (1)
    {
      int v9 = *((_DWORD *)this + 7);
      int v10 = v9 ? v9 - 1 : *((_DWORD *)this + 6);
      if (*((_DWORD *)this + 8) != v10) {
        break;
      }
      pthread_cond_wait((pthread_cond_t *)((char *)this + 168), *((pthread_mutex_t **)this + 20));
    }
    uint64_t v11 = SampleBufferRingList::AddSamplesDetail(this, a2, a3, a4);
    pthread_cond_signal((pthread_cond_t *)((char *)this + 112));
    a2 += v11;
  }
  return MTTScopedLock::~MTTScopedLock((void *)v8, (MTTScopedLock *)&v13);
}

void sub_1DA4AABF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL SampleBufferRingList::IsFullDetail(SampleBufferRingList *this)
{
  int v1 = *((_DWORD *)this + 7);
  if (v1) {
    int v2 = v1 - 1;
  }
  else {
    int v2 = *((_DWORD *)this + 6);
  }
  return *((_DWORD *)this + 8) == v2;
}

uint64_t MTTCondition::Wait(pthread_cond_t *this, unint64_t a2)
{
  if (a2)
  {
    gettimeofday(&v8, 0);
    v7.tv_sec = v8.tv_sec + a2 / 0x3E8;
    v7.tv_nsec = 1000000 * (a2 % 0x3E8) + 1000 * v8.tv_usec;
    return pthread_cond_timedwait((pthread_cond_t *)this->__opaque, (pthread_mutex_t *)this->__sig, &v7);
  }
  else
  {
    sig = (pthread_mutex_t *)this->__sig;
    opaque = this->__opaque;
    return pthread_cond_wait((pthread_cond_t *)opaque, sig);
  }
}

uint64_t SampleBufferRingList::AddSamplesDetail(SampleBufferRingList *this, float *a2, unint64_t a3, uint64_t a4)
{
  int v7 = *((_DWORD *)this + 8);
  uint64_t v8 = *(void *)this;
  if (a3 >= 0x1F4) {
    uint64_t v9 = 500;
  }
  else {
    uint64_t v9 = a3;
  }
  if (v9)
  {
    uint64_t v11 = (_DWORD *)(v8 + 2016 * v7 + 16);
    uint64_t v12 = v9;
    do
    {
      float v13 = *a2++;
      *v11++ = (int)scalbnf(v13, 24);
      --v12;
    }
    while (v12);
  }
  int v14 = *((_DWORD *)this + 8);
  if (a3 >= 0x1F5) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = a4;
  }
  *(void *)(v8 + 2016 * v14) = v15;
  *(void *)(v8 + 2016 * v7 + 8) = v9;
  if (v14 < *((_DWORD *)this + 6)) {
    int v16 = v14 + 1;
  }
  else {
    int v16 = 0;
  }
  *((_DWORD *)this + 8) = v16;
  return v9;
}

void *SampleBufferRingList::CopySamples(SampleBufferRingList *this, void *a2, unint64_t *a3, unint64_t *a4)
{
  BOOL v11 = 0;
  double result = SampleBufferRingList::CopySamplesDetail(this, a2, a3, a4, &v11);
  if (v11)
  {
    uint64_t v9 = (char *)this + 40;
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 40));
    char v10 = 1;
    int v6 = *((_DWORD *)this + 7);
    if (v6 < *((_DWORD *)this + 6)) {
      int v7 = v6 + 1;
    }
    else {
      int v7 = 0;
    }
    *((_DWORD *)this + 7) = v7;
    pthread_cond_signal((pthread_cond_t *)((char *)this + 168));
    uint64_t v8 = (void *)*((unsigned int *)this + 7);
    if (v8 == *((_DWORD *)this + 8)) {
      pthread_cond_signal((pthread_cond_t *)((char *)this + 224));
    }
    return MTTScopedLock::~MTTScopedLock(v8, (MTTScopedLock *)&v9);
  }
  return result;
}

void sub_1DA4AAE2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MTTScopedLock::~MTTScopedLock((MTTScopedLock *)va);
  _Unwind_Resume(a1);
}

void *SampleBufferRingList::CopySamplesDetail(SampleBufferRingList *this, void *__dst, unint64_t *a3, unint64_t *a4, BOOL *a5)
{
  uint64_t v9 = *(void *)this + 2016 * *((int *)this + 7);
  unint64_t v10 = *(void *)(v9 + 8);
  if (v10 >= *a3) {
    unint64_t v10 = *a3;
  }
  *a3 = v10;
  double result = memcpy(__dst, (const void *)(v9 + 16), 4 * v10);
  int v12 = *((_DWORD *)this + 7);
  uint64_t v13 = *(void *)this;
  unint64_t v14 = *(void *)(*(void *)this + 2016 * v12 + 8);
  BOOL v15 = v14 > *a3;
  unint64_t v16 = v14 - *a3;
  if (v15)
  {
    double result = memmove((void *)(v13 + 2016 * v12 + 16), (const void *)(v13 + 2016 * v12 + 16 + 4 * *a3), 4 * v16);
    BOOL v19 = 0;
    unint64_t v18 = 0;
    uint64_t v17 = *(void *)this + 2016 * *((int *)this + 7);
    *(void *)(v17 + 8) -= *a3;
  }
  else
  {
    unint64_t v18 = *(void *)(v13 + 2016 * v12);
    BOOL v19 = 1;
  }
  *a5 = v19;
  *a4 = v18;
  return result;
}

BOOL SampleBufferRingList::IsEmptyDetail(SampleBufferRingList *this)
{
  return *((_DWORD *)this + 7) == *((_DWORD *)this + 8);
}

void SampleBufferRingList::WaitUntilEmpty(SampleBufferRingList *this)
{
  int v2 = (char *)this + 40;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 40));
  char v3 = 1;
  while (*((_DWORD *)this + 7) != *((_DWORD *)this + 8))
    pthread_cond_wait((pthread_cond_t *)((char *)this + 224), *((pthread_mutex_t **)this + 27));
  MTTScopedLock::~MTTScopedLock((MTTScopedLock *)&v2);
}

void sub_1DA4AAF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL SampleBufferRingList::IsEmpty(SampleBufferRingList *this)
{
  int v4 = (char *)this + 40;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 40));
  char v5 = 1;
  BOOL v2 = *((_DWORD *)this + 7) == *((_DWORD *)this + 8);
  MTTScopedLock::~MTTScopedLock((MTTScopedLock *)&v4);
  return v2;
}

BOOL SampleBufferRingList::IsFull(SampleBufferRingList *this)
{
  int v6 = (char *)this + 40;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 40));
  char v7 = 1;
  int v2 = *((_DWORD *)this + 7);
  if (v2) {
    int v3 = v2 - 1;
  }
  else {
    int v3 = *((_DWORD *)this + 6);
  }
  BOOL v4 = *((_DWORD *)this + 8) == v3;
  MTTScopedLock::~MTTScopedLock((MTTScopedLock *)&v6);
  return v4;
}

uint64_t SampleBufferRingList::Clear(uint64_t this)
{
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t RemoteIORenderCallback(MTBERemoteIOSoundOutput *a1, unsigned int *a2, const AudioTimeStamp *a3, unsigned int a4, unsigned int a5, AudioBufferList *a6)
{
  MTBERemoteIOSoundOutput::FeedSamples(a1, a2, a6);
  uint64_t mNumberChannels = a6->mBuffers[0].mNumberChannels;
  uint64_t v8 = (char *)malloc_type_malloc(a6->mBuffers[0].mDataByteSize, 0xA77A5667uLL);
  memcpy(v8, a6->mBuffers[0].mData, a6->mBuffers[0].mDataByteSize);
  unint64_t mDataByteSize = a6->mBuffers[0].mDataByteSize;
  if (mDataByteSize)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      if ((int)mNumberChannels >= 1)
      {
        uint64_t v12 = 0;
        do
        {
          *(_DWORD *)((char *)a6->mBuffers[0].mData + v11 + v12) = *(_DWORD *)&v8[v10];
          v12 += 4;
        }
        while (4 * mNumberChannels != v12);
        unint64_t mDataByteSize = a6->mBuffers[0].mDataByteSize;
      }
      v10 += 4;
      v11 += 4 * (int)mNumberChannels;
    }
    while (v10 < mDataByteSize);
  }
  free(v8);
  return 0;
}

void MTBERemoteIOSoundOutput::FeedSamples(MTBERemoteIOSoundOutput *this, unsigned int a2, AudioBufferList *a3)
{
  unint64_t mNumberBuffers = a3->mNumberBuffers;
  if (mNumberBuffers)
  {
    unint64_t v5 = 0;
    BOOL v19 = a3;
    do
    {
      int v6 = (char *)a3 + 16 * v5;
      unsigned int v8 = *((_DWORD *)v6 + 2);
      unsigned int v7 = *((_DWORD *)v6 + 3);
      if (v8 <= v7)
      {
        unint64_t v9 = 0;
        unint64_t v10 = v6 + 16;
        unint64_t v11 = v7 / v8;
        while (1)
        {
          unint64_t v21 = (unint64_t)this + 80;
          pthread_mutex_lock((pthread_mutex_t *)((char *)this + 80));
          char v22 = 1;
          int v13 = *((_DWORD *)this + 17);
          int v12 = *((_DWORD *)this + 18);
          MTTScopedLock::~MTTScopedLock(v14, (MTTScopedLock *)&v21);
          if (v13 == v12) {
            break;
          }
          unint64_t v20 = 0;
          unint64_t v21 = (v11 - v9) >> 2;
          SampleBufferRingList::CopySamples((MTBERemoteIOSoundOutput *)((char *)this + 40), (void *)(*v10 + v9), &v21, &v20);
          unint64_t v15 = v21;
          uint64_t v16 = *((void *)this + 1);
          if (v16 && v20) {
            (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          }
          v9 += 4 * v15;
          if (v9 >= v11) {
            goto LABEL_12;
          }
        }
        bzero((void *)(*v10 + v9), v11 - v9);
LABEL_12:
        a3 = v19;
        unint64_t mNumberBuffers = v19->mNumberBuffers;
      }
      ++v5;
    }
    while (v5 < mNumberBuffers);
  }
  if (*((_DWORD *)this + 78) == 2)
  {
    unint64_t v21 = (unint64_t)this + 80;
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 80));
    char v22 = 1;
    int v17 = *((_DWORD *)this + 17);
    int v18 = *((_DWORD *)this + 18);
    MTTScopedLock::~MTTScopedLock((void *)1, (MTTScopedLock *)&v21);
    if (v17 == v18) {
      pthread_cond_broadcast((pthread_cond_t *)((char *)this + 392));
    }
  }
}

uint64_t MTBESoundOutputCallback::StopAtBoundary(MTBESoundOutputCallback *this)
{
  return 0;
}

void MTBESoundOutput::CreateChannel(MTBESoundOutput *this)
{
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v1 = 0;
    _os_log_impl(&dword_1DA47F000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "MTX MTBERemoteIOSoundOutput Creating sound channel", v1, 2u);
  }
  operator new();
}

void sub_1DA4AB3C4(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C4033BB09CFLL);
  _Unwind_Resume(a1);
}

void MTBESoundOutput::CreateFileStream(MTBESoundOutput *this, OpaqueExtAudioFile *a2)
{
}

void sub_1DA4AB4C8(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10E1C40472BCEE3);
  _Unwind_Resume(a1);
}

uint64_t MTBESoundOutput::SampleCapacity(MTBESoundOutput *this)
{
  return 0x10000;
}

uint64_t MTBESoundOutput::GetSourceUnit(MTBESoundOutput *this)
{
  return 0;
}

uint64_t MTBESoundOutput::GetSourceGraph(MTBESoundOutput *this)
{
  return 0;
}

uint64_t MTBESoundOutput::SetChannelMap(MTBESoundOutput *this, CFArrayRef theArray)
{
  v3[1] = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (theArray)
  {
    CFArrayGetCount(theArray);
    operator new[]();
  }
  return (*(uint64_t (**)(MTBESoundOutput *, void *, uint64_t))(*(void *)this + 136))(this, v3, 2);
}

uint64_t MTBESoundOutput::ReportLatency(MTBESoundOutput *this)
{
  return 0;
}

uint64_t MTBESoundOutput::OfflineProcessing(MTBESoundOutput *this)
{
  return 1;
}

uint64_t MTBESoundOutput::Silence(MTBESoundOutput *this)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 8))(result, 8);
  }
  return result;
}

uint64_t MTBESoundOutput::Wakeup(MTBESoundOutput *this, MTBESoundOutputCallback *a2)
{
  if (a2) {
    return (**(uint64_t (***)(MTBESoundOutputCallback *))a2)(a2);
  }
  return result;
}

uint64_t MTBESoundOutput::SetBoundaryCallback(uint64_t this, MTBESoundOutputCallback *a2)
{
  *(void *)(this + 8) = a2;
  return this;
}

uint64_t MTBESoundOutput::InitializedOK(MTBESoundOutput *this)
{
  return 1;
}

uint64_t MTBEIgnoreSoundOutput::QueueSamples(MTBEIgnoreSoundOutput *this, const float *a2, unint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = *((void *)this + 1);
    if (v4) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 8))(v4, a4);
    }
  }
  return 1;
}

void MTBERemoteIOSoundOutput::MTBERemoteIOSoundOutput(MTBERemoteIOSoundOutput *this, int a2)
{
  int inData = a2;
  *((_DWORD *)this + 4) = 1;
  *(void *)this = &unk_1F347EC18;
  *((void *)this + 1) = 0;
  *((void *)this + 3) = 0;
  uint64_t v4 = (AudioComponentInstance *)((char *)this + 24);
  *((void *)this + 4) = 0;
  SampleBufferRingList::SampleBufferRingList((MTBERemoteIOSoundOutput *)((char *)this + 40), 256);
  *((_DWORD *)this + 78) = 0;
  pthread_mutex_init((pthread_mutex_t *)this + 5, 0);
  *((void *)this + 48) = (char *)this + 320;
  pthread_cond_init((pthread_cond_t *)((char *)this + 392), 0);
  *((_DWORD *)this + 111) = 500;
  *(_OWORD *)&inDesc.componentType = xmmword_1DA500DA0;
  inDesc.componentFlagsMask = 0;
  Next = AudioComponentFindNext(0, &inDesc);
  int v6 = (FILE **)MEMORY[0x1E4F143C8];
  if (!Next) {
    fwrite("ERROR: Couldn't find Remote IO component\n", 0x29uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
  }
  if (AudioComponentInstanceNew(Next, v4)) {
    fwrite("ERROR: Failed to create remote IO unit\n", 0x27uLL, 1uLL, *v6);
  }
  if (AudioUnitSetProperty(*v4, 8u, 1u, 0, &xmmword_1DA500DB8, 0x28u)) {
    fwrite("ERROR: Failed to set stream format\n", 0x23uLL, 1uLL, *v6);
  }
  if (a2 && AudioUnitSetProperty(*v4, 0x7E7u, 2u, 0, &inData, 4u)) {
    fwrite("ERROR: Failed to set audio session ID\n", 0x26uLL, 1uLL, *v6);
  }
  v7[0] = RemoteIORenderCallback;
  v7[1] = this;
  if (AudioUnitSetProperty(*((AudioUnit *)this + 3), 0x17u, 1u, 0, v7, 0x10u)) {
    fwrite("ERROR: Failed to set render callback\n", 0x25uLL, 1uLL, *v6);
  }
}

void sub_1DA4AB918(_Unwind_Exception *a1)
{
  pthread_cond_destroy(v3);
  pthread_mutex_destroy(v2);
  SampleBufferRingList::~SampleBufferRingList(v1);
  _Unwind_Resume(a1);
}

void SampleBufferRingList::~SampleBufferRingList(SampleBufferRingList *this)
{
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 224));
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 168));
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 112));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 40));
  int v2 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

uint64_t MTBERemoteIOSoundOutput::SetChannelMap(uint64_t this, int *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = this;
    long long inData = xmmword_1DA500DB8;
    int v10 = unk_1DA500DCC;
    uint64_t v13 = 32;
    UInt32 v5 = 4 * a3;
    int v11 = 4 * a3;
    int v12 = a3;
    int v9 = 4 * a3;
    OSStatus v6 = AudioUnitSetProperty(*(AudioUnit *)(this + 24), 8u, 1u, 0, &inData, 0x28u);
    unsigned int v7 = (FILE **)MEMORY[0x1E4F143C8];
    if (v6) {
      fwrite("ERROR: Failed to set stream format\n", 0x23uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    }
    this = AudioUnitSetProperty(*(AudioUnit *)(v4 + 24), 0x7D2u, 2u, 0, a2, v5);
    if (this) {
      return fprintf(*v7, "ERROR: Failed to set kAudioOutputUnitProperty_ChannelMap: %d\n", this);
    }
  }
  return this;
}

void MTBERemoteIOSoundOutput::~MTBERemoteIOSoundOutput(MTBERemoteIOSoundOutput *this)
{
  *(void *)this = &unk_1F347EC18;
  AudioOutputUnitStop(*((AudioUnit *)this + 3));
  AudioUnitUninitialize(*((AudioUnit *)this + 3));
  AudioComponentInstanceDispose(*((AudioComponentInstance *)this + 3));
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 392));
  pthread_mutex_destroy((pthread_mutex_t *)this + 5);
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 264));
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 208));
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 152));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 80));
  int v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  MTBERemoteIOSoundOutput::~MTBERemoteIOSoundOutput(this);

  JUMPOUT(0x1E016FF00);
}

void MTBERemoteIOSoundOutput::SetBoundaryCallback(pthread_mutex_t *this, MTBESoundOutputCallback *a2)
{
  uint64_t v4 = this + 5;
  pthread_mutex_lock(this + 5);
  char v5 = 1;
  *(void *)this->__opaque = a2;
  MTTScopedLock::~MTTScopedLock((MTTScopedLock *)&v4);
}

BOOL MTBERemoteIOSoundOutput::QueueSamples(MTBERemoteIOSoundOutput *this, float *a2, unint64_t a3, uint64_t a4)
{
  int v11 = (char *)this + 320;
  pthread_mutex_lock((pthread_mutex_t *)this + 5);
  char v12 = 1;
  unsigned int v8 = (void *)*((unsigned int *)this + 78);
  if (v8 == 1)
  {
    MTTScopedLock::~MTTScopedLock(v8, (MTTScopedLock *)&v11);
    SampleBufferRingList::AddSamples((MTBERemoteIOSoundOutput *)((char *)this + 40), a2, a3, a4);
    if (*((unsigned char *)this + 440))
    {
      if (SampleBufferRingList::SamplesAdded((MTBERemoteIOSoundOutput *)((char *)this + 40)) >= (unint64_t)*((unsigned int *)this + 111))
      {
        AudioOutputUnitStart(*((AudioUnit *)this + 3));
        *((unsigned char *)this + 440) = 0;
      }
    }
    return (unint64_t)SampleBufferRingList::AvailableCapacity((MTBERemoteIOSoundOutput *)((char *)this + 40)) > 0x200;
  }
  else
  {
    printf("Sound output is not running. QueueSamples() returns false");
    MTTScopedLock::~MTTScopedLock(v10, (MTTScopedLock *)&v11);
    return 0;
  }
}

void MTBERemoteIOSoundOutput::WaitForOutputToStop(MTBERemoteIOSoundOutput *this, int a2)
{
  *(void *)&v17[5] = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 78))
  {
    if (*((unsigned char *)this + 440))
    {
      *((unsigned char *)this + 440) = 0;
    }
    else if (a2)
    {
      unint64_t v14 = (char *)this + 80;
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 80));
      char v15 = 1;
      int v3 = *((_DWORD *)this + 17);
      int v4 = *((_DWORD *)this + 18);
      MTTScopedLock::~MTTScopedLock(v5, (MTTScopedLock *)&v14);
      if (v3 != v4)
      {
        int v6 = 200;
        unsigned int v7 = MEMORY[0x1E4F14500];
        while (1)
        {
          unint64_t v8 = SampleBufferRingList::AvailableCapacity((MTBERemoteIOSoundOutput *)((char *)this + 40));
          if (MTTCondition::Wait((pthread_cond_t *)this + 8, 0x32uLL) != 60) {
            break;
          }
          if (SampleBufferRingList::AvailableCapacity((MTBERemoteIOSoundOutput *)((char *)this + 40)) <= v8)
          {
            v6 -= 50;
            if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
              MTBERemoteIOSoundOutput::WaitForOutputToStop(buf, v8, v17);
            }
          }
          unint64_t v14 = (char *)this + 80;
          pthread_mutex_lock((pthread_mutex_t *)((char *)this + 80));
          char v15 = 1;
          int v9 = *((_DWORD *)this + 17);
          int v10 = *((_DWORD *)this + 18);
          MTTScopedLock::~MTTScopedLock(v11, (MTTScopedLock *)&v14);
          if (v9 == v10 || v6 < 0) {
            return;
          }
        }
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
        {
          LOWORD(v14) = 0;
          _os_log_impl(&dword_1DA47F000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "MTX WaitForOutputToStop - Got the signal", (uint8_t *)&v14, 2u);
        }
      }
    }
    else
    {
      char v12 = (pthread_mutex_t *)*((void *)this + 48);
      uint64_t v13 = (pthread_cond_t *)((char *)this + 392);
      pthread_cond_wait(v13, v12);
    }
  }
}

void *MTBERemoteIOSoundOutput::WaitForOutputToStopThreadFunc(MTBERemoteIOSoundOutput *this)
{
  char v5 = (char *)this + 320;
  pthread_mutex_lock((pthread_mutex_t *)this + 5);
  char v6 = 1;
  MTBERemoteIOSoundOutput::WaitForOutputToStop(this, 0);
  int v2 = (void *)*((unsigned int *)this + 78);
  if (v2 == 2)
  {
    *((unsigned char *)this + 440) = 0;
    AudioOutputUnitStop(*((AudioUnit *)this + 3));
    *((_DWORD *)this + 78) = 0;
    uint64_t v3 = *((void *)this + 1);
    if (v3) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 8))(v3, 8);
    }
  }
  return MTTScopedLock::~MTTScopedLock(v2, (MTTScopedLock *)&v5);
}

void sub_1DA4ABF30(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3)
{
}

void *MTBERemoteIOSoundOutput::Wakeup(MTBERemoteIOSoundOutput *this, MTBESoundOutputCallback *a2)
{
  unsigned int v7 = (char *)this + 320;
  pthread_mutex_lock((pthread_mutex_t *)this + 5);
  char v8 = 1;
  if ((*((_DWORD *)this + 78) - 1) > 1)
  {
    *((_DWORD *)this + 17) = 0;
    *((_DWORD *)this + 18) = 0;
    if (SampleBufferRingList::SamplesAdded((MTBERemoteIOSoundOutput *)((char *)this + 40)) < (unint64_t)*((unsigned int *)this + 111))
    {
LABEL_8:
      *((unsigned char *)this + 440) = 1;
      goto LABEL_10;
    }
    AudioOutputUnitStart(*((AudioUnit *)this + 3));
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v6 = 0;
      _os_log_impl(&dword_1DA47F000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "MTX Wakeup() Remote IO is already running", v6, 2u);
    }
    *((_DWORD *)this + 78) = 2;
    MTBERemoteIOSoundOutput::WaitForOutputToStop(this, 1);
    *((_DWORD *)this + 17) = 0;
    *((_DWORD *)this + 18) = 0;
    if (!*((_DWORD *)this + 78))
    {
      if (SampleBufferRingList::SamplesAdded((MTBERemoteIOSoundOutput *)((char *)this + 40)) >= (unint64_t)*((unsigned int *)this + 111))
      {
        AudioOutputUnitStart(*((AudioUnit *)this + 3));
        goto LABEL_10;
      }
      goto LABEL_8;
    }
  }
LABEL_10:
  uint64_t v4 = 1;
  *((_DWORD *)this + 78) = 1;
  if (a2)
  {
    *((void *)this + 4) = a2;
    (**(void (***)(MTBESoundOutputCallback *))a2)(a2);
  }
  return MTTScopedLock::~MTTScopedLock((void *)v4, (MTTScopedLock *)&v7);
}

void sub_1DA4AC080(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  MTTScopedLock::~MTTScopedLock(a2, (MTTScopedLock *)va);
  _Unwind_Resume(a1);
}

void *MTBERemoteIOSoundOutput::Silence(MTBERemoteIOSoundOutput *this, char a2)
{
  char v8 = (char *)this + 320;
  pthread_mutex_lock((pthread_mutex_t *)this + 5);
  char v9 = 1;
  uint64_t v4 = (void *)*((unsigned int *)this + 78);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (v4) {
        return MTTScopedLock::~MTTScopedLock(v4, (MTTScopedLock *)&v8);
      }
      goto LABEL_8;
    }
    *((_DWORD *)this + 78) = 2;
  }
  if ((a2 & 1) == 0)
  {
    pthread_t v7 = 0;
    pthread_create(&v7, 0, (void *(__cdecl *)(void *))WaitForRemoteIOToFinish, this);
    pthread_detach(v7);
    return MTTScopedLock::~MTTScopedLock(v4, (MTTScopedLock *)&v8);
  }
  *((unsigned char *)this + 440) = 0;
  AudioOutputUnitStop(*((AudioUnit *)this + 3));
  pthread_cond_broadcast((pthread_cond_t *)((char *)this + 392));
  *((_DWORD *)this + 78) = 0;
LABEL_8:
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 8))(v5, 8);
  }
  return MTTScopedLock::~MTTScopedLock(v4, (MTTScopedLock *)&v8);
}

void sub_1DA4AC184(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  MTTScopedLock::~MTTScopedLock(a2, (MTTScopedLock *)va);
  _Unwind_Resume(a1);
}

void WaitForRemoteIOToFinish(MTBERemoteIOSoundOutput *a1)
{
}

void MTBERemoteIOSoundOutput::SilenceDetail(AudioUnit *this, char a2)
{
  if ((a2 & 1) == 0) {
    MTBERemoteIOSoundOutput::WaitForOutputToStop((MTBERemoteIOSoundOutput *)this, 0);
  }
  if (*((_DWORD *)this + 78) == 2)
  {
    *((unsigned char *)this + 440) = 0;
    AudioOutputUnitStop(this[3]);
    AudioUnit v3 = this[1];
    if (v3) {
      (*(void (**)(AudioUnit, uint64_t))(*(void *)v3 + 8))(v3, 8);
    }
    *((_DWORD *)this + 78) = 0;
  }
}

void MTBEAudioFileSoundOutput::MTBEAudioFileSoundOutput(MTBEAudioFileSoundOutput *this, OpaqueExtAudioFile *a2)
{
  *((_DWORD *)this + 4) = 1;
  *(void *)this = &unk_1F347ECB8;
  *((void *)this + 1) = 0;
  *((void *)this + 3) = a2;
  MEOWVectorBase::MEOWVectorBase((MTBEAudioFileSoundOutput *)((char *)this + 80), 40, 1uLL);
  *((void *)this + 9) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  UInt32 ioPropertyDataSize = 8;
  AudioUnit v3 = (AudioFileID *)((char *)this + 32);
  if (ExtAudioFileGetProperty(*((ExtAudioFileRef *)this + 3), 0x6166696Cu, &ioPropertyDataSize, (char *)this + 32)
    || (AudioFileOptimize(*v3),
        int inPropertyData = 0,
        AudioFileSetProperty(*v3, 0x64737A75u, 4u, &inPropertyData),
        ExtAudioFileSetProperty(*((ExtAudioFileRef *)this + 3), 0x63666D74u, 0x28u, &xmmword_1DA500DB8)))
  {
    uint64_t v5 = 0;
    *((void *)this + 3) = 0;
  }
  else
  {
    uint64_t v5 = *((void *)this + 3);
  }
  if (v5) {
    char v6 = "Wrapped audio file.\n";
  }
  else {
    char v6 = "Failed to wrap audio file";
  }
  MTBEWorker::DebugLog(v6, v4);
}

void sub_1DA4AC348(_Unwind_Exception *a1)
{
  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

void MTBEAudioFileSoundOutput::~MTBEAudioFileSoundOutput(MTBEAudioFileSoundOutput *this)
{
  *(void *)this = &unk_1F347ECB8;
  if (*((void *)this + 3)) {
    MTBEAudioFileSoundOutput::Disengage((const char *)this);
  }
  MEOWVectorBase::~MEOWVectorBase((void **)this + 10);
}

{
  uint64_t vars8;

  MTBEAudioFileSoundOutput::~MTBEAudioFileSoundOutput(this);

  JUMPOUT(0x1E016FF00);
}

BOOL MTBEAudioFileSoundOutput::InitializedOK(MTBEAudioFileSoundOutput *this)
{
  return *((void *)this + 3) != 0;
}

uint64_t MTBEAudioFileSoundOutput::SetChannelMap(ExtAudioFileRef *this, int *a2, int a3)
{
  AudioConverterRef outPropertyData = 0;
  UInt32 ioPropertyDataSize = 8;
  uint64_t result = ExtAudioFileGetProperty(this[3], 0x61636E76u, &ioPropertyDataSize, &outPropertyData);
  if (!result)
  {
    AudioConverterSetProperty(outPropertyData, 0x63686D70u, 4 * a3, a2);
    uint64_t inPropertyData = 0;
    return ExtAudioFileSetProperty(this[3], 0x61636366u, 8u, &inPropertyData);
  }
  return result;
}

uint64_t MTBEAudioFileSoundOutput::PushSamples(uint64_t this)
{
  uint64_t v1 = this;
  unint64_t v2 = *(void *)(this + 96);
  if (v2 >= 2 && *(void *)(this + 24))
  {
    uint64_t v3 = *(void *)(this + 80);
    int v4 = v2 - 1;
    *(_DWORD *)(v3 + 32) = 0;
    *(_DWORD *)(v3 + 36) = v4;
    this = AudioFileSetProperty(*(AudioFileID *)(this + 32), 0x6D6B6C73u, 40 * v4 + 8, (const void *)(v3 + 32));
  }
  if (*(void *)(v1 + 24))
  {
    uint64_t v5 = *(OpaqueAudioFileID **)(v1 + 32);
    return AudioFileOptimize(v5);
  }
  return this;
}

const char *MTBEAudioFileSoundOutput::Disengage(const char *this)
{
  if (*((void *)this + 3))
  {
    uint64_t v1 = this;
    (*(void (**)(const char *))(*(void *)this + 32))(this);
    *((void *)v1 + 3) = 0;
    return MTBEWorker::DebugLog("Disengaged from Audio File\n", v2);
  }
  return this;
}

uint64_t MTBEAudioFileSoundOutput::QueueSamples(MTBEAudioFileSoundOutput *this, float *a2, unint64_t inNumberFrames, uint64_t a4)
{
  pthread_t v7 = (OpaqueExtAudioFile *)*((void *)this + 3);
  if (v7)
  {
    char v8 = a2;
    ioData.unint64_t mNumberBuffers = 1;
    ioData.mBuffers[0].uint64_t mNumberChannels = 1;
    ioData.mBuffers[0].unint64_t mDataByteSize = 4 * inNumberFrames;
    ioData.mBuffers[0].mData = a2;
    if (inNumberFrames)
    {
      unint64_t v9 = inNumberFrames;
      do
      {
        *(_DWORD *)char v8 = (int)scalbnf(*v8, 24);
        ++v8;
        --v9;
      }
      while (v9);
    }
    ExtAudioFileWrite(v7, inNumberFrames, &ioData);
  }
  if (a4)
  {
    uint64_t v10 = *((void *)this + 1);
    if (v10) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 8))(v10, a4);
    }
  }
  *((double *)this + 5) = *((double *)this + 5) + (double)inNumberFrames;
  return 1;
}

__n128 MTBEAudioFileSoundOutput::MarkPosition(MTBEAudioFileSoundOutput *this, const char *a2)
{
  ++*((_DWORD *)this + 14);
  *((void *)this + 6) = CFStringCreateWithCString(0, a2, 0x8000100u);
  uint64_t v7 = *((void *)this + 9);
  __n128 v5 = *(__n128 *)((char *)this + 40);
  long long v6 = *(_OWORD *)((char *)this + 56);
  MEOWVectorBase::Append((void *)this + 10);
  uint64_t v3 = *((void *)this + 10) + 40 * *((void *)this + 12);
  __n128 result = v5;
  *(__n128 *)(v3 - 40) = v5;
  *(_OWORD *)(v3 - 24) = v6;
  *(void *)(v3 - 8) = v7;
  return result;
}

void MTBEIgnoreSoundOutput::~MTBEIgnoreSoundOutput(MTBEIgnoreSoundOutput *this)
{
}

uint64_t MTBERemoteIOSoundOutput::SampleCapacity(MTBERemoteIOSoundOutput *this)
{
  return SampleBufferRingList::AvailableCapacity((MTBERemoteIOSoundOutput *)((char *)this + 40));
}

uint64_t MTBERemoteIOSoundOutput::OfflineProcessing(MTBERemoteIOSoundOutput *this)
{
  return 0;
}

void MTTScopedLock::~MTTScopedLock(MTTScopedLock *this)
{
  if (*((unsigned char *)this + 8))
  {
    *((unsigned char *)this + 8) = 0;
    pthread_mutex_unlock(*(pthread_mutex_t **)this);
  }
}

void *std::vector<SampleBuffer>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<SampleBuffer>::__vallocate[abi:ne180100](a1, a2);
    int v4 = (char *)a1[1];
    size_t v5 = 2016 * ((2016 * a2 - 2016) / 0x7E0) + 2016;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1DA4AC7F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<SampleBuffer>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x20820820820821) {
    std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SampleBuffer>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2016 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SampleBuffer>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x20820820820821) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2016 * a2);
}

void SEOpenSpeechChannel()
{
}

void sub_1DA4AC8FC(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10E3C40F66663CFLL);
  _Unwind_Resume(a1);
}

uint64_t SECloseSpeechChannel(uint64_t a1)
{
  valid = (SpeechChannelManager *)SpeechChannelManager::ValidSpeechChannel(a1);
  if (!valid) {
    return -1;
  }
  SpeechChannelManager::CloseSpeechChannel(valid);
  return 0;
}

uint64_t SEPauseSpeechAt(uint64_t a1, unint64_t a2)
{
  valid = (SpeechChannelManager *)SpeechChannelManager::ValidSpeechChannel(a1);
  if (!valid) {
    return -1;
  }
  SpeechChannelManager::PauseSpeechAt(valid, a2);
  return 0;
}

uint64_t SEStopSpeechAt(uint64_t a1, unint64_t a2)
{
  valid = (SpeechChannelManager *)SpeechChannelManager::ValidSpeechChannel(a1);
  if (!valid) {
    return -1;
  }
  SpeechChannelManager::StopSpeechAt(valid, a2);
  return 0;
}

uint64_t SEContinueSpeech(uint64_t a1)
{
  valid = (SpeechChannelManager *)SpeechChannelManager::ValidSpeechChannel(a1);
  if (!valid) {
    return -1;
  }
  SpeechChannelManager::ContinueSpeech(valid);
  return 0;
}

uint64_t SEUseVoice(uint64_t a1, VoiceSpec *a2, __CFBundle *a3)
{
  valid = (SpeechChannelManager *)SpeechChannelManager::ValidSpeechChannel(a1);
  if (!valid) {
    return -1;
  }

  return SpeechChannelManager::UseVoice(valid, a2, a3);
}

CFIndex SESpeakCFString(uint64_t a1, const __CFString *a2, const __CFDictionary *a3)
{
  valid = (SpeechChannelManager *)SpeechChannelManager::ValidSpeechChannel(a1);
  if (!valid) {
    return -1;
  }

  return SpeechChannelManager::SpeakCFString(valid, a2, a3);
}

uint64_t SECopyPhonemesFromText(uint64_t a1, const __CFString *a2, const __CFString **a3)
{
  valid = (SpeechChannelManager *)SpeechChannelManager::ValidSpeechChannel(a1);
  if (valid)
  {
    SpeechChannelManager::CopyPhonemesFromText(valid, a2, a3);
  }
  return -1;
}

uint64_t SEUseSpeechDictionary(uint64_t a1, const __CFDictionary *a2)
{
  valid = (SpeechChannelManager *)SpeechChannelManager::ValidSpeechChannel(a1);
  if (!valid) {
    return -1;
  }

  return SpeechChannelManager::UseSpeechDictionary(valid, a2);
}

CFComparisonResult SECopySpeechProperty(uint64_t a1, const __CFString *a2, const void **a3)
{
  valid = (SpeechChannelManager *)SpeechChannelManager::ValidSpeechChannel(a1);
  if (!valid) {
    return -1;
  }

  return SpeechChannelManager::CopySpeechProperty(valid, a2, a3);
}

uint64_t SESetSpeechProperty(uint64_t a1, const __CFString *a2, const __CFNumber *a3)
{
  valid = (SpeechChannelManager *)SpeechChannelManager::ValidSpeechChannel(a1);
  if (!valid) {
    return -1;
  }

  return SpeechChannelManager::SetSpeechProperty(valid, a2, a3);
}

uint64_t SEGetSpeechInfo(uint64_t a1, int a2, void *a3)
{
  if (!a3) {
    return -50;
  }
  valid = (SpeechChannelManager *)SpeechChannelManager::ValidSpeechChannel(a1);
  if (!valid) {
    return -1;
  }

  return SpeechChannelManager::GetSpeechInfo(valid, a2, a3);
}

void sub_1DA4ACCB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DA4ACD18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DA4ACD80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DA4ACDE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DA4ACE50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DA4ACEB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DA4AD174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MTFWrappedSpeechElement;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void MTFESmoothPitch::MTFESmoothPitch(MTFESmoothPitch *this, const MTFEPitchCoeffs *a2)
{
  *(void *)this = &unk_1F347EF38;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 101);
  operator new[]();
}

void sub_1DA4AD4B0(_Unwind_Exception *a1)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(v1);
  _Unwind_Resume(a1);
}

uint64_t MTFESmoothPitch::VisitIntonationalPhrase(uint64_t this, MTFEIntonationalPhrase *a2)
{
  var12 = a2->var12;
  uint64_t v3 = *(int *)(this + 8);
  unint64_t v4 = (unint64_t)&var12[a2->var15 - v3];
  if (v4 >= (unint64_t)var12)
  {
    uint64_t v5 = *(void *)(this + 16);
    do
    {
      if ((int)v3 < 1)
      {
        float v7 = 0.0;
      }
      else
      {
        uint64_t v6 = 0;
        float v7 = 0.0;
        unsigned int v8 = v3 + 1;
        do
        {
          float v7 = v7 + (float)(*(float *)(v4 + v6) * *(float *)(v5 + v6));
          --v8;
          v6 += 4;
        }
        while (v8 > 1);
      }
      *(float *)(v4 + 4 * ((int)v3 - 1)) = v7;
      v4 -= 4;
    }
    while (v4 >= (unint64_t)var12);
  }
  return this;
}

uint64_t MTFETrackingVisitor::PreIntonationalPhrase(uint64_t this, MTFEIntonationalPhrase *a2)
{
  *(void *)(this + 8) = a2;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t MTFETrackingVisitor::PostIntonationalPhrase(uint64_t this, MTFEIntonationalPhrase *a2)
{
  a2->var11.var0 += *(_WORD *)(this + 24);
  a2->var11.var1 += *(_WORD *)(this + 26);
  return this;
}

uint64_t MTFETrackingVisitor::PreIntermediatePhrase(uint64_t this, MTFEIntermediatePhrase *a2)
{
  *(void *)(this + 16) = a2;
  a2->var8.var0 += *(_WORD *)(this + 24);
  a2->var8.var1 += *(_WORD *)(this + 26);
  return this;
}

uint64_t MTFETrackingVisitor::PostIntermediatePhrase(uint64_t this, MTFEIntermediatePhrase *a2)
{
  a2->var9.var0 += *(_WORD *)(this + 24);
  a2->var9.var1 += *(_WORD *)(this + 26);
  return this;
}

uint64_t MTFETrackingVisitor::PreWord(uint64_t this, MTFEWord *a2)
{
  a2->var19.var0 += *(_WORD *)(this + 24);
  a2->var19.var1 += *(_WORD *)(this + 26);
  return this;
}

uint64_t MTFETrackingVisitor::PostWord(uint64_t this, MTFEWord *a2)
{
  a2->var20.var0 += *(_WORD *)(this + 24);
  a2->var20.var1 += *(_WORD *)(this + 26);
  return this;
}

uint64_t MTFETrackingVisitor::PreSyllable(uint64_t this, MTFESyllable *a2)
{
  a2->var9 += *(_WORD *)(this + 24);
  return this;
}

uint64_t MTFETrackingVisitor::PostSyllable(uint64_t this, MTFESyllable *a2)
{
  a2->var10 += *(_WORD *)(this + 24);
  return this;
}

uint64_t MTFETrackingVisitor::PrePhoneme(uint64_t this, MTFEPhoneme *a2)
{
  uint64_t v2 = *(void *)(this + 8);
  uint64_t v3 = *(void *)(this + 16);
  int v4 = *(unsigned __int16 *)(v2 + 120);
  int var8 = (unsigned __int16)a2->var8;
  *(unsigned char *)(this + 28) = v4 == var8;
  signed __int16 v6 = *(_WORD *)(this + 24) + var8;
  a2->int var8 = v6;
  BOOL v7 = *(unsigned __int16 *)(v3 + 64) == var8;
  *(unsigned char *)(this + 29) = v7;
  if (v7)
  {
    *(_WORD *)(v3 + 64) = v6;
    *(_WORD *)(v3 + 66) += *(_WORD *)(this + 26);
    if (v4 == var8)
    {
      *(_WORD *)(v2 + 120) += *(_WORD *)(this + 24);
      *(_WORD *)(v2 + 122) += *(_WORD *)(this + 26);
    }
  }
  return this;
}

uint64_t MTFETrackingVisitor::DelPhoneme(uint64_t this)
{
  if (*(unsigned char *)(this + 29))
  {
    --*(_WORD *)(*(void *)(this + 16) + 64);
    if (*(unsigned char *)(this + 28)) {
      --*(_WORD *)(*(void *)(this + 8) + 120);
    }
  }
  return this;
}

uint64_t MTFETrackingVisitor::DelSyllable(uint64_t this)
{
  if (*(unsigned char *)(this + 29))
  {
    --*(_WORD *)(*(void *)(this + 16) + 66);
    if (*(unsigned char *)(this + 28)) {
      --*(_WORD *)(*(void *)(this + 8) + 122);
    }
  }
  return this;
}

uint64_t MTFETrackingVisitor::PostPhoneme(uint64_t this, MTFEPhoneme *a2)
{
  *(_WORD *)(this + 28) = 0;
  return this;
}

MTFESpeechElement *MTFETrackingVisitor::VisitIntonationalPhrase(MTFETrackingVisitor *this, MTFESpeechElement *a2)
{
  *((void *)this + 1) = a2;
  *((_DWORD *)this + 6) = 0;
  __n128 result = MTFESpeechElement::VisitChildren(a2, this);
  *((_WORD *)&a2[2].var2 + 1) += *((_WORD *)this + 12);
  *((_WORD *)&a2[2].var2 + 2) += *((_WORD *)this + 13);
  return result;
}

MTFESpeechElement *MTFETrackingVisitor::VisitIntermediatePhrase(MTFETrackingVisitor *this, MTFESpeechElement *a2)
{
  *((void *)this + 2) = a2;
  LOWORD(a2[1].var0) += *((_WORD *)this + 12);
  WORD1(a2[1].var0) += *((_WORD *)this + 13);
  __n128 result = MTFESpeechElement::VisitChildren(a2, this);
  WORD2(a2[1].var0) += *((_WORD *)this + 12);
  HIWORD(a2[1].var0) += *((_WORD *)this + 13);
  return result;
}

MTFESpeechElement *MTFETrackingVisitor::VisitWord(MTFETrackingVisitor *this, MTFESpeechElement *a2)
{
  LOWORD(a2[3].var0) += *((_WORD *)this + 12);
  WORD1(a2[3].var0) += *((_WORD *)this + 13);
  __n128 result = MTFESpeechElement::VisitChildren(a2, this);
  WORD2(a2[3].var0) += *((_WORD *)this + 12);
  HIWORD(a2[3].var0) += *((_WORD *)this + 13);
  return result;
}

MTFESpeechElement *MTFETrackingVisitor::VisitSyllable(MTFETrackingVisitor *this, MTFESpeechElement *a2)
{
  WORD1(a2[1].var0) += *((_WORD *)this + 12);
  __n128 result = MTFESpeechElement::VisitChildren(a2, this);
  WORD2(a2[1].var0) += *((_WORD *)this + 12);
  return result;
}

uint64_t MTFETrackingVisitor::VisitPhoneme(MTFETrackingVisitor *this, MTFEPhoneme *a2)
{
  uint64_t result = MTFETrackingVisitor::PrePhoneme((uint64_t)this, a2);
  *((_WORD *)this + 14) = 0;
  return result;
}

void MTFETrackingVisitor::~MTFETrackingVisitor(MTFETrackingVisitor *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

MTFESpeechElement *MTBEWriteTune::VisitIntonationalPhrase(MTBEWritePhonemes *this, MTFESpeechElement *a2)
{
  *((void *)this + 5) = (char *)a2[2].var3 + 4 * SLODWORD(a2[2].var5);
  return MTBEWritePhonemes::VisitIntonationalPhrase(this, a2);
}

MTFESpeechElement *MTBEWriteTune::VisitWord(MTBEWriteTune *this, MTFEWord *a2)
{
  MTBEWritePhonemes::HandleWord(this, a2);
  *((unsigned char *)this + 12) = 1;
  *((void *)this + 6) = a2;

  return MTFESpeechElement::VisitChildren((MTFESpeechElement *)a2, this);
}

void MTBEWriteTune::WriteFloat(MTBEWriteTune *this, float a2)
{
}

void MTBEWriteTune::VisitPhoneme(MTBEWriteTune *this, MTFEPhoneme *a2)
{
  int var13 = (int)a2->var13;
  if (*((unsigned char *)this + 12))
  {
    if (a2->var9)
    {
      MTBEWritePhonemes::Write(this, *(std::string::value_type **)(MEMORY[0x1E4FA5860] + 8 * *((unsigned __int8 *)this + 13)));
      uint64_t v5 = *((void *)this + 6);
      if (!*(unsigned char *)(v5 + 200) || *(unsigned __int8 *)(v5 + 86) == 255)
      {
        unsigned int v8 = "\n";
      }
      else
      {
        MTBEWritePhonemes::Write(this, " {W \"");
        MTBEWritePhonemes::Write(this, (std::string::value_type *)(*((void *)this + 6) + 200));
        MTBEWritePhonemes::Write(this, "\" ");
        if (*(unsigned char *)(*((void *)this + 6) + 86)) {
          signed __int16 v6 = "Undef";
        }
        else {
          signed __int16 v6 = "Noun";
        }
        MTBEWritePhonemes::Write(this, v6);
        if (*(_WORD *)(*((void *)this + 6) + 92))
        {
          unint64_t v7 = 0;
          unsigned int v8 = "}\n";
          do
          {
            std::string::push_back((std::string *)((char *)this + 16), 32);
            unint64_t v9 = (std::string::value_type *)SLTag::Name((SLTag *)*(unsigned __int16 *)(*((void *)this + 6)
                                                                                     + 2 * v7
                                                                                     + 94));
            MTBEWritePhonemes::Write(this, v9);
            ++v7;
          }
          while (v7 < *(unsigned __int16 *)(*((void *)this + 6) + 92));
        }
        else
        {
          unsigned int v8 = "}\n";
        }
      }
      MTBEWritePhonemes::Write(this, v8);
    }
    else if (var13 < 2)
    {
      goto LABEL_27;
    }
    *((unsigned char *)this + 12) = 0;
  }
  MTBEWritePhonemes::VisitPhoneme(this, a2);
  if ((a2->var15 & 0x4000) == 0)
  {
    MTBEWritePhonemes::Write(this, " {D ");
    MTBEWritePhonemes::WriteLong(this, 5 * var13);
    if (a2->var9)
    {
      var6 = a2->var6;
      if (var6) {
        BOOL v11 = BYTE2(var6[1].var0) == 0;
      }
      else {
        BOOL v11 = 1;
      }
      MTFEPitchTargets::MTFEPitchTargets((MTFEPitchTargets *)v15, v11, *((const float **)this + 5), var13);
      MTBEWritePhonemes::Write(this, "; P");
      if (v15[0] >= 1)
      {
        uint64_t v12 = 1;
        do
        {
          std::string::push_back((std::string *)((char *)this + 16), 32);
          uint64_t v13 = &v15[2 * v12];
          MTBEWritePhonemes::WriteFixed(this, vcvts_n_s32_f32((float)(*(void *)v13 & 0xFFFFFFLL) / 100.0, 0x10uLL), 1);
          std::string::push_back((std::string *)((char *)this + 16), 58);
          MTBEWritePhonemes::WriteLong(this, *(int *)((char *)v13 + 3));
        }
        while (v12++ < v15[0]);
      }
    }
    MTBEWritePhonemes::Write(this, "}\n");
  }
LABEL_27:
  *((void *)this + 5) += 4 * var13;
}

void MTBEWriteTune::VisitCommand(MTBEWritePhonemes *this, MTFECommand *a2)
{
  unint64_t var8 = a2->var8;
  if (var8 == 1987013746 || var8 == 1987013741) {
    MTBEWritePhonemes::VisitCommand(this, a2);
  }
}

void MTBEWriteTune::WriteVoiceParams(MTBEWriteTune *this, float a2, float a3, float a4, int a5, int a6)
{
  MTBEWritePhonemes::Write(this, "{");
  if (a5)
  {
    MTBEWritePhonemes::Write(this, "V ");
    MTBEWritePhonemes::WriteFixed(this, vcvts_n_s32_f32(a2, 0x10uLL), 1);
    MTBEWritePhonemes::Write(this, " ");
    MTBEWritePhonemes::WriteFixed(this, vcvts_n_s32_f32(a3, 0x10uLL), 1);
    if (!a6) {
      goto LABEL_6;
    }
    MTBEWritePhonemes::Write(this, "; ");
  }
  else if (!a6)
  {
    goto LABEL_6;
  }
  MTBEWritePhonemes::Write(this, "R ");
  MTBEWritePhonemes::WriteLong(this, (uint64_t)a4);
LABEL_6:

  MTBEWritePhonemes::Write(this, "}\n");
}

void MTBEWriteTune::~MTBEWriteTune(void **this)
{
  *this = &unk_1F347D5A8;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }

  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)this);
}

{
  uint64_t vars8;

  *this = &unk_1F347D5A8;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)this);

  JUMPOUT(0x1E016FF00);
}

MTFECleanupTune *MTFECleanupTune::VisitPhoneme(MTFECleanupTune *this, MTFEPhoneme *a2)
{
  switch(a2->var9)
  {
    case 0xCu:
      float v2 = 0.6;
      unsigned __int8 v3 = 11;
      goto LABEL_7;
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
      return this;
    case 0x13u:
      float v2 = 0.4;
      unsigned __int8 v3 = 31;
      goto LABEL_7;
    case 0x14u:
      float v2 = 0.6;
      unsigned __int8 v3 = 3;
      goto LABEL_7;
    case 0x15u:
      float v2 = 0.6;
      unsigned __int8 v3 = 5;
      goto LABEL_7;
    case 0x16u:
      float v2 = 0.6;
      unsigned __int8 v3 = 7;
      goto LABEL_7;
    case 0x17u:
      float v2 = 0.6;
      unsigned __int8 v3 = 9;
      goto LABEL_7;
    case 0x18u:
      float v2 = 0.6;
      unsigned __int8 v3 = 10;
      goto LABEL_7;
    case 0x1Cu:
      float v2 = 0.55;
      unsigned __int8 v3 = 11;
      goto LABEL_7;
    case 0x1Du:
      float v2 = 0.55;
      unsigned __int8 v3 = 25;
LABEL_7:
      MTFECleanupTune::SplitPhoneme(this, a2, v3, v2);
    default:
      if (a2->var9 == 56) {
        return (MTFECleanupTune *)(*((uint64_t (**)(MTFEPhoneme *))a2->var0 + 2))(a2);
      }
      return this;
  }
}

void MTFECleanupTune::SplitPhoneme(MTFECleanupTune *this, MTFEPhoneme *a2, unsigned __int8 a3, float a4)
{
  a2->int64_t var9 = a3;
  operator new();
}

void sub_1DA4AE010(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C40D6D86DEFLL);
  _Unwind_Resume(a1);
}

void MTFECleanupTune::~MTFECleanupTune(MTFECleanupTune *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

float MTFEPitchTarget::Interpolate(void *a1, uint64_t a2, int a3, void *a4, float result)
{
  uint64_t v5 = 1374389535 * (int)((*a1 >> 24) * a3 + 50);
  int v6 = (v5 >> 37) + ((unint64_t)v5 >> 63);
  int v7 = (int)((*a4 >> 24) * a3 + 50) / 100;
  if (v7 > v6)
  {
    uint64_t result = (float)(*a1 & 0xFFFFFFLL) / 100.0;
    float v8 = (float)((float)((float)(*a4 & 0xFFFFFFLL) / 100.0) - result) / (float)(v7 - v6);
    unint64_t v9 = (float *)(a2 + 4 * v6);
    uint64_t v10 = v7 - (uint64_t)v6;
    do
    {
      *v9++ = result;
      uint64_t result = v8 + result;
      --v10;
    }
    while (v10);
  }
  return result;
}

double MTFEPitchTargets::CombineWithTargets(MTFEPitchTargets *this, int a2, const MTFEPitchTargets *a3, int a4)
{
  int v8 = a4 + a2;
  *(_DWORD *)unint64_t v20 = 0;
  memset(&v20[8], 0, 80);
  uint64_t v9 = *(_DWORD *)this;
  if ((int)v9 >= 1)
  {
    uint64_t v10 = (unint64_t *)((char *)this + 8);
    do
    {
      unint64_t v11 = *v10++;
      uint64_t v19 = (uint64_t)(float)((float)((float)(v11 & 0xFFFFFF) / 100.0) * 100.0) | (((int)((v11 >> 24) * a2) / v8) << 24);
      MTFEPitchTargets::AddTarget((unsigned int *)v20, (unint64_t *)&v19);
      --v9;
    }
    while (v9);
  }
  int v12 = *(_DWORD *)a3;
  if (*(_DWORD *)a3 >= 1)
  {
    int v13 = 0;
    int v14 = 100 * a2;
    do
    {
      unint64_t v15 = *((void *)a3 + v13 + 1);
      uint64_t v19 = (uint64_t)(float)((float)((float)(v15 & 0xFFFFFF) / 100.0) * 100.0) | (((int)(v14 + (v15 >> 24) * a4) / v8) << 24);
      if ((MTFEPitchTargets::AddTarget((unsigned int *)v20, (unint64_t *)&v19) & 1) == 0)
      {
        MTFEPitchTargets::DropTarget((MTFEPitchTargets *)v20);
        --v13;
      }
      ++v13;
    }
    while (v13 < v12);
  }
  long long v16 = *(_OWORD *)&v20[48];
  *((_OWORD *)this + 2) = *(_OWORD *)&v20[32];
  *((_OWORD *)this + 3) = v16;
  *((_OWORD *)this + 4) = *(_OWORD *)&v20[64];
  *((void *)this + 10) = *(void *)&v20[80];
  double result = *(double *)v20;
  long long v18 = *(_OWORD *)&v20[16];
  *(_OWORD *)this = *(_OWORD *)v20;
  *((_OWORD *)this + 1) = v18;
  return result;
}

uint64_t MTFEPitchTargets::AddTarget(unsigned int *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  uint64_t v4 = *a1;
  if ((int)v4 <= 0)
  {
LABEL_6:
    int v10 = *a1;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = v3 >> 24;
    int v8 = (char *)(a1 + 2);
    size_t v9 = 8 * (int)v4;
    while ((int)v7 > *(_DWORD *)(v8 + 3))
    {
      ++v6;
      v8 += 8;
      v9 -= 8;
      if (v4 == v6)
      {
        if (v4 != 10) {
          goto LABEL_6;
        }
        return 0;
      }
    }
    if ((int)v4 <= (int)v6)
    {
      if (v4 == 10) {
        return 0;
      }
      int v10 = *a1;
    }
    else
    {
      if (*(_DWORD *)(v8 + 3) == v7)
      {
        *(void *)int v8 = v3;
        return 1;
      }
      if (v4 == 10) {
        return 0;
      }
      memmove(v8 + 8, v8, v9);
      unint64_t v3 = *a2;
      int v10 = *a1;
    }
    LODWORD(v4) = v6;
  }
  *(void *)&a1[2 * (int)v4 + 2] = v3;
  *a1 = v10 + 1;
  return 1;
}

MTFEPitchTargets *MTFEPitchTargets::DropTarget(MTFEPitchTargets *this)
{
  if (*(_DWORD *)this >= 3)
  {
    uint64_t v1 = 0;
    unint64_t v3 = *((void *)this + 1);
    unint64_t v2 = *((void *)this + 2);
    float v4 = (float)(int)(v2 >> 24);
    float v5 = (float)(int)(v3 >> 24);
    uint64_t v6 = (*(_DWORD *)this - 1);
    float v7 = (float)(v2 & 0xFFFFFF) / 100.0;
    float v8 = (float)(v3 & 0xFFFFFF) / 100.0;
    float v9 = 100000.0;
    int v10 = 1;
    do
    {
      float v11 = v4;
      unint64_t v12 = *((void *)this + v1 + 3);
      float v4 = (float)(int)(v12 >> 24);
      float v13 = vabds_f32(v7, v8+ (float)((float)((float)((float)((float)(v12 & 0xFFFFFF) / 100.0) - v8) / (float)(v4 - v5))* (float)(v11 - v5)));
      ++v1;
      if (v13 < v9)
      {
        int v10 = v1;
        float v9 = v13;
      }
      float v8 = v7;
      float v7 = (float)(v12 & 0xFFFFFF) / 100.0;
      float v5 = v11;
    }
    while (v6 - 1 != v1);
    *(_DWORD *)this = v6;
    return (MTFEPitchTargets *)memmove((char *)this + 8 * v10 + 8, (char *)this + 8 * v10 + 16, 8 * ((int)v6 - v10));
  }
  return this;
}

uint64_t MTFEPitchTargets::FindTarget(unsigned int *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if ((int)result > 0)
  {
    uint64_t v4 = 0;
    float v5 = a1 + 2;
    while (*(_DWORD *)(a2 + 3) > (int)(*(void *)&v5[2 * v4] >> 24))
    {
      if (result == ++v4) {
        return result;
      }
    }
    return v4;
  }
  return result;
}

void MTFEPitchTargets::MTFEPitchTargets(MTFEPitchTargets *this, int a2, const float *a3, int a4)
{
  v45[1] = *MEMORY[0x1E4F143B8];
  *(_OWORD *)((char *)this + 8) = 0u;
  unsigned int v42 = (void *)((char *)this + 8);
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + --*(_WORD *)(this + 24) = 0u;
  float v8 = (unsigned int *)MEMORY[0x1F4188790]();
  int v10 = (char *)&v41 - v9;
  *float v8 = 0;
  uint64_t v12 = (uint64_t)(float)(*v11 * 100.0);
  uint64_t v44 = (uint64_t)(float)(v11[v13] * 100.0) | 0x64000000;
  v45[0] = v12;
  MTFEPitchTargets::AddTarget(v8, v45);
  if (a2) {
    MTFEPitchTargets::AddTarget((unsigned int *)this, (unint64_t *)&v44);
  }
  MTFEPitchTarget::Interpolate(v45, (uint64_t)v10, a4, &v44, v14);
  if (a4 >= 0) {
    int v15 = a4;
  }
  else {
    int v15 = a4 + 1;
  }
  if (a4 >= 2)
  {
    int v16 = 0;
    HIDWORD(v41) = v15 >> 1;
    int v17 = (char *)this + 8;
    float v18 = 0.0;
    for (uint64_t i = 1; ; uint64_t i = 1)
    {
      do
      {
        float v20 = vabds_f32(a3[i], *(float *)&v10[4 * i]);
        if (v20 > v18)
        {
          int v16 = i;
          float v18 = v20;
        }
        ++i;
      }
      while (i != a4);
      if (v18 < 1.0) {
        return;
      }
      int v21 = (HIDWORD(v41) + 100 * v16) / a4;
      float v22 = a3[v16];
      uint64_t v43 = (uint64_t)(float)(v22 * 100.0) | (v21 << 24);
      uint64_t v23 = *(_DWORD *)this;
      if ((int)v23 <= 0)
      {
LABEL_17:
        int v25 = 0;
      }
      else
      {
        uint64_t v24 = 0;
        while ((int)(((uint64_t)(float)(v22 * 100.0) | (unint64_t)(v21 << 24)) >> 24) > (int)(*(void *)&v17[8 * v24] >> 24))
        {
          if (v23 == ++v24) {
            goto LABEL_17;
          }
        }
        if ((int)v23 <= (int)v24)
        {
          int v25 = 0;
        }
        else
        {
          if (v21 == (*(void *)&v17[8 * v24] >> 24))
          {
            *(float *)&v10[4 * v16] = v22;
            goto LABEL_42;
          }
          int v25 = 1;
        }
        LODWORD(v23) = v24;
      }
      double v26 = (void *)((char *)this + 8 * (int)v23);
      float v27 = MTFEPitchTarget::Interpolate(v26, (uint64_t)v10, a4, &v43, v22);
      if (v25) {
        BOOL v28 = v26 + 1;
      }
      else {
        BOOL v28 = &v44;
      }
      MTFEPitchTarget::Interpolate(&v43, (uint64_t)v10, a4, v28, v27);
      MTFEPitchTargets::AddTarget((unsigned int *)this, (unint64_t *)&v43);
      LODWORD(v23) = *(_DWORD *)this;
      if (*(_DWORD *)this >= 2)
      {
        int v29 = 0;
        uint64_t v30 = *v42 & 0xFFFFFFLL;
        int v31 = 1;
        int v32 = 1;
        do
        {
          unint64_t v33 = v30;
          unint64_t v34 = *((void *)this + v31 + 1);
          uint64_t v30 = v34 & 0xFFFFFF;
          BOOL v35 = (v34 & 0xFFFFFF) >= v33;
          int v36 = (v34 & 0xFFFFFF) > v33;
          if (!v35) {
            int v36 = -1;
          }
          if (v36 == v29)
          {
            ++v32;
            if (v29)
            {
              if (v32 == 4)
              {
                uint64_t v37 = 1374389535 * (int)((v34 >> 24) * a4 + 50);
                int v38 = (v37 >> 37) + ((unint64_t)v37 >> 63);
                uint64_t v39 = 1374389535 * (*(_DWORD *)((char *)this + 8 * v31 - 13) * a4 + 50);
                int v40 = (v39 >> 37) + ((unint64_t)v39 >> 63);
                if (v40 < v38) {
                  memcpy(&v10[4 * v40], &a3[v40], 4 * (v38 + ~v40) + 4);
                }
                int v32 = 4;
              }
            }
            else if (v32 == 3)
            {
              memmove(&v42[v31 - 1], &v42[v31], 8 * ((int)v23 - v31));
              int v29 = 0;
              --v31;
              LODWORD(v23) = *(_DWORD *)this;
              int v32 = 3;
            }
            else
            {
              int v29 = 0;
            }
          }
          else
          {
            int v32 = 2;
            int v29 = v36;
          }
          ++v31;
        }
        while (v31 < (int)v23);
      }
LABEL_42:
      if ((int)v23 > 9) {
        return;
      }
      int v16 = 0;
      float v18 = 0.0;
    }
  }
}

uint64_t MTFETunePitch::VisitSentence(MTFETunePitch *this, MTFESpeechElement *a2)
{
  int Pitch = MTBEParam::GetPitch(*((MTBEParam **)this + 1));
  uint64_t Modulation = MTBEParam::GetModulation(*((MTBEParam **)this + 1));
  *((void *)this + 6) = *(void *)(&a2[1].var2 + 2);
  MTBEParam::GetPitchFloorRange(*((MTBEParam **)this + 1), (float *)this + 10, (float *)this + 11);
  MTFESpeechElement::VisitChildren(a2, this);
  MTBEParam::SetPitch(*((void *)this + 1), Pitch);
  uint64_t v6 = *((void *)this + 1);

  return MTBEParam::SetModulation(v6, Modulation);
}

MTFESpeechElement *MTFETunePitch::VisitIntonationalPhrase(MTFETunePitch *this, MTFESpeechElement *a2)
{
  var6 = 0;
  *((_DWORD *)this + 53) = 0;
  var3 = (float *)a2[2].var3;
  uint64_t var5_high = SHIDWORD(a2[2].var5);
  *((void *)this + 8) = &var3[SLODWORD(a2[2].var5)];
  *((void *)this + 9) = &var3[var5_high];
  *((void *)this + 17) = 0;
  float v7 = (unsigned char *)*((void *)this + 1);
  if (!v7[50])
  {
    if (v7[48] || v7[49]) {
      var6 = 0;
    }
    else {
      var6 = (MTFEMelody *)a2[3].var6;
    }
  }
  *((void *)this + 4) = var6;
  MTFESpeechElement::VisitChildren(a2, this);
  if (*((_DWORD *)this + 53) == 1 || *((void *)this + 4))
  {
    unint64_t v8 = *((void *)this + 9);
    uint64_t v9 = (int *)*((void *)this + 7);
    int v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) < v8)
    {
      int v11 = *v9;
      do
        *v10++ = v11;
      while ((unint64_t)v10 < v8);
    }
    *((void *)this + 7) = v10;
  }

  return MTFESpeechElement::VisitChildren((MTFESpeechElement *)((char *)a2 + 64), this);
}

MTFESpeechElement *MTFETunePitch::VisitWord(float **this, MTFESpeechElement *a2)
{
  MTFESpeechElement::VisitChildren(a2 + 2, (MTFESpeechVisitor *)this);
  int v4 = *((_DWORD *)this + 53);
  if ((uint64_t)a2[1].var0)
  {
    if (v4 == 2)
    {
      int v13 = this[8];
      this[17] = v13;
      long long v15 = *((_OWORD *)v13 + 1);
      long long v14 = *((_OWORD *)v13 + 2);
      long long v16 = *(_OWORD *)v13;
      this[16] = (float *)*((void *)v13 + 6);
      *((_OWORD *)this + 6) = v15;
      *((_OWORD *)this + 7) = v14;
      *((_OWORD *)this + 5) = v16;
    }
    else
    {
      if (v4)
      {
LABEL_17:
        uint64_t v17 = (uint64_t)&this[8][a2[3].var1];
        this[25] = (float *)v17;
        long long v18 = *(_OWORD *)(v17 - 56);
        long long v19 = *(_OWORD *)(v17 - 40);
        long long v20 = *(_OWORD *)(v17 - 24);
        this[24] = *(float **)(v17 - 8);
        *((_OWORD *)this + 10) = v19;
        *((_OWORD *)this + 11) = v20;
        *((_OWORD *)this + 9) = v18;
        goto LABEL_22;
      }
      int v13 = this[17];
    }
    this[7] = v13 - 1;
    *((_DWORD *)this + 53) = 1;
    goto LABEL_17;
  }
  if (v4)
  {
    if (v4 != 1) {
      goto LABEL_22;
    }
    float v5 = this[25];
    uint64_t v6 = this[17];
    if (v6)
    {
      uint64_t v7 = v5 - v6;
      if (v7 >= 14) {
        uint64_t v7 = 14;
      }
      if ((int)v7 < 1) {
        goto LABEL_21;
      }
      unsigned int v8 = v7 + 1;
      float v9 = 1.0 / (float)(v7 + 1);
      int v10 = (float *)(this + 10);
      float v11 = v9;
      do
      {
        float v12 = *v10++;
        *uint64_t v6 = (float)((float)(1.0 - v11) * v12) + (float)(*v6 * v11);
        ++v6;
        float v11 = v9 + v11;
        --v8;
      }
      while (v8 > 1);
      if ((int)v7 < 1) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v7 = 14;
      float v9 = 0.066667;
    }
    int v21 = &v5[-v7];
    unsigned int v22 = v7 + 1;
    float v23 = v9;
    uint64_t v24 = (float *)this - v7 + 50;
    do
    {
      float v25 = *v24++;
      *int v21 = (float)((float)(1.0 - v23) * *v21) + (float)(v25 * v23);
      ++v21;
      float v23 = v9 + v23;
      --v22;
    }
    while (v22 > 1);
  }
LABEL_21:
  *((_DWORD *)this + 53) = 2;
LABEL_22:

  return MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);
}

void MTFETunePitch::Blend(MTFETunePitch *this, float *a2, float *a3, float *a4, int a5)
{
  if (a5 >= 1)
  {
    unsigned int v5 = a5 + 1;
    float v6 = 1.0 / (float)(a5 + 1);
    do
    {
      float v7 = *a2++;
      float v8 = v7;
      float v9 = *a3++;
      *a4++ = (float)((float)(1.0 - v6) * v9) + (float)(v8 * v6);
      float v6 = (float)(1.0 / (float)(a5 + 1)) + v6;
      --v5;
    }
    while (v5 > 1);
  }
}

float MTFETunePitch::VisitCommand(MTFETunePitch *this, MTFECommand *a2)
{
  int64_t var8 = a2->var8;
  if (var8 <= 1885495666)
  {
    if (var8 == 1650879602)
    {
      *((float *)this + 12) = (float)a2->var9 / 100.0;
      goto LABEL_23;
    }
    if (var8 == 1651666535)
    {
      *((float *)this + 13) = (float)a2->var9 / 100.0;
      goto LABEL_23;
    }
    if (var8 != 1885495666) {
      goto LABEL_23;
    }
    float v6 = (MTBEParam *)*((void *)this + 1);
    int64_t v7 = (int)(12 * MTBEParam::GetPitch(v6) + (SLODWORD(a2->var9) >> 8) + 8025);
    goto LABEL_16;
  }
  if (var8 <= 1886220145)
  {
    if (var8 != 1885495667)
    {
      if (var8 != 1886220132) {
        goto LABEL_23;
      }
      uint64_t v4 = *((void *)this + 1);
      int64_t var9 = a2->var9;
      goto LABEL_20;
    }
    float v6 = (MTBEParam *)*((void *)this + 1);
    int64_t v7 = a2->var9 >> 8;
LABEL_16:
    int v12 = MTBEParam::MidiToPitch(v6, v7);
    MTBEParam::SetPitch((uint64_t)v6, v12);
    goto LABEL_23;
  }
  if (var8 == 1886220146)
  {
    int v13 = (MTBEParam *)*((void *)this + 1);
    int64_t var9 = a2->var9 + MTBEParam::GetModulation(v13);
    uint64_t v4 = (uint64_t)v13;
    goto LABEL_20;
  }
  if (var8 != 1920165236) {
    goto LABEL_23;
  }
  float v8 = (MTBEParam *)*((void *)this + 2);
  if (v8)
  {
    if (a2->var9 == 1)
    {
      uint64_t v9 = *((void *)this + 1);
      int Pitch = MTBEParam::GetPitch(v8);
      MTBEParam::SetPitch(v9, Pitch);
      uint64_t v11 = *((void *)this + 1);
      int64_t var9 = MTBEParam::GetModulation(*((MTBEParam **)this + 2));
      uint64_t v4 = v11;
LABEL_20:
      MTBEParam::SetModulation(v4, var9);
      goto LABEL_23;
    }
    MTBEParam::ResetPitchParams((uint64_t)v8, *((__int16 **)this + 3));
  }
  MTBEParam::ResetPitchParams(*((void *)this + 1), *((__int16 **)this + 3));
LABEL_23:
  long long v14 = (MTBEParam *)*((void *)this + 1);

  return MTBEParam::GetPitchFloorRange(v14, (float *)this + 10, (float *)this + 11);
}

MTFESpeechElement *MTFETunePitch::VisitSyllable(MTFETunePitch *this, MTFESpeechElement *a2)
{
  uint64_t v4 = *((void *)this + 4);
  if (v4 && (unint64_t var0_low = SLOWORD(a2[1].var0), *(void *)(v4 + 16) > var0_low))
  {
    float v6 = MTFEMelody::Pitch((MTFEMelody *)v4, var0_low);
    *((float *)this + 52) = v6;
    if (!*(_WORD *)(*((void *)this + 3) + 8)) {
      *((float *)this + 52) = v6 * 0.5;
    }
  }
  else
  {
    *((_DWORD *)this + 52) = 0;
  }

  return MTFESpeechElement::VisitChildren(a2, this);
}

float MTFETunePitch::VisitPhoneme(MTFETunePitch *this, MTFEPhoneme *a2)
{
  SLWordTagSet var17 = a2->var17;
  if (var17)
  {
    uint64_t v5 = *(_DWORD *)var17;
    if ((int)v5 >= 1)
    {
      uint64_t v6 = 0;
      uint64_t v7 = *((void *)this + 8);
      unint64_t v8 = *((void *)this + 9);
      float v9 = a2->var13 / 100.0;
      do
      {
        unint64_t v10 = *((void *)var17 + v6 + 1);
        float v11 = (float)(v10 & 0xFFFFFF) / 100.0;
        float v12 = *((float *)this + 12);
        if (v12 > 1.0)
        {
          float v13 = logf(v11 / v12);
          float v14 = v13 / logf((float)(v12 + *((float *)this + 13)) / v12);
          float v15 = *((float *)this + 10);
          float v11 = v15 * powf((float)(v15 + *((float *)this + 11)) / v15, v14);
        }
        int v16 = (int)(float)((float)((float)(int)(v10 >> 24) * v9) + 0.5);
        uint64_t v17 = (float *)(v7 + 4 * v16);
        if ((unint64_t)v17 < v8)
        {
          long long v18 = (float *)*((void *)this + 7);
          if (v17 >= v18)
          {
            *uint64_t v17 = v11;
            unint64_t v19 = (unint64_t)((char *)v17 - (char *)v18) >> 2;
            float v20 = *v18;
            *((void *)this + 7) = v17;
            if ((int)v19 >= 2)
            {
              uint64_t v21 = v16;
              float v22 = (float)(v11 - v20) / (float)(int)v19;
              int v23 = 1 - v19;
              uint64_t v24 = (float *)(v7 - 4 + 4 * v21);
              do
              {
                float v11 = v11 - v22;
                *v24-- = v11;
              }
              while (!__CFADD__(v23++, 1));
            }
          }
        }
        ++v6;
      }
      while (v6 != v5);
    }
  }
  else if (*((float *)this + 52) != 0.0)
  {
    uint64_t v26 = *((void *)this + 8);
    LODWORD(v27) = (int)a2->var13;
    if ((int)v27 < 1)
    {
      uint64_t v27 = (int)v27;
    }
    else
    {
      BOOL v28 = (_DWORD *)*((void *)this + 8);
      do
      {
        *v28++ = *((_DWORD *)this + 52);
        int var13 = (int)a2->var13;
      }
      while ((unint64_t)v28 < v26 + 4 * var13);
      uint64_t v27 = var13;
    }
    *((void *)this + 7) = v26 + 4 * v27 - 4;
  }
  float result = a2->var13;
  *((void *)this + 8) += 4 * (int)result;
  return result;
}

void MTFETunePitch::~MTFETunePitch(MTFETunePitch *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

void MTFEStemTracker::MTFEStemTracker(MTFEStemTracker *this, SLDictionary *a2, uint64_t a3)
{
  SLDictionary::SLDictionary((SLDictionary *)this);
  *(void *)uint64_t v6 = &unk_1F347F258;
  *(void *)(v6 + 32) = a3;
  SLDictionary::SLDictionary((SLDictionary *)(v6 + 56));
  *((void *)this + 7) = MEMORY[0x1E4FA5878] + 16;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = a2;
  operator new[]();
}

void sub_1DA4AF104(_Unwind_Exception *a1)
{
  SLDictionary::~SLDictionary(v1);
  _Unwind_Resume(a1);
}

void MTFEStemTracker::~MTFEStemTracker(SLDictionary *this)
{
  *(void *)this = &unk_1F347F258;
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    MEMORY[0x1E016FEE0](v2, 0x1000C8034A87E94);
  }
  uint64_t v3 = *((void *)this + 6);
  if (v3) {
    MEMORY[0x1E016FEE0](v3, 0x20C8093837F09);
  }
  SLEncyclopedia::Remove((SLEncyclopedia *)((char *)this + 56), this);
  MEMORY[0x1E016FD70]((char *)this + 56);

  SLDictionary::~SLDictionary(this);
}

{
  uint64_t vars8;

  MTFEStemTracker::~MTFEStemTracker(this);

  JUMPOUT(0x1E016FF00);
}

uint64_t MTFEStemTracker::SeenRecently(MTFEStemTracker *this, const char *a2, uint64_t a3, int a4)
{
  SLWordBuilder::SLWordBuilder((SLWordBuilder *)v13);
  if ((MTBEDebugFlags::sMTXDebug & 0x1000) != 0) {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Word %.*s ", a3, a2);
  }
  if (SLEncyclopedia::Lookup((MTFEStemTracker *)((char *)this + 56), a2, a3, (SLWordBuilder *)v13, (SLDictionary *)((char *)this + 56)))
  {
    unint64_t v8 = (char *)this + 120;
    size_t v9 = *((void *)this + 14);
    unint64_t v10 = this;
  }
  else
  {
    unint64_t v10 = this;
    unint64_t v8 = a2;
    size_t v9 = a3;
  }
  MTFEStemTracker::Seen(v10, v8, v9, a4);
  uint64_t v11 = *((unsigned __int8 *)this + 24);
  SLWordBuilder::~SLWordBuilder((SLWordBuilder *)v13);
  return v11;
}

void sub_1DA4AF2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  SLWordBuilder::~SLWordBuilder((SLWordBuilder *)va);
  _Unwind_Resume(a1);
}

uint64_t MTFEStemTracker::Seen(MTFEStemTracker *this, const char *__src, size_t __n, int a4)
{
  if ((MTBEDebugFlags::sMTXDebug & 0x1000) != 0)
  {
    unint64_t v8 = "";
    if (a4) {
      unint64_t v8 = "[AllCaps] ";
    }
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "-> Stem %.*s %s", __n, __src, v8);
  }
  uint64_t v9 = *((void *)this + 4);
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *((void *)this + 6);
    while (1)
    {
      float v12 = *(unsigned __int8 **)(v11 + 8 * v10);
      uint64_t v13 = *((void *)v12 + 1);
      if (!v13) {
        break;
      }
      if (v13 == __n && *v12 == a4)
      {
        uint64_t result = memcmp(__src, v12 + 16, __n);
        if (!result)
        {
          *((unsigned char *)this + --*(_WORD *)(this + 24) = 1;
          if ((MTBEDebugFlags::sMTXDebug & 0x1000) != 0) {
            uint64_t result = fprintf((FILE *)*MEMORY[0x1E4F143C8], "was last seen %lu stems ago\n", v10);
          }
          if (v10) {
            goto LABEL_20;
          }
          return result;
        }
      }
      if (v9 == ++v10)
      {
        uint64_t v10 = v9;
        break;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  if ((MTBEDebugFlags::sMTXDebug & 0x1000) != 0)
  {
    fwrite("is new\n", 7uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    uint64_t v9 = *((void *)this + 4);
  }
  v10 -= v10 == v9;
  *((unsigned char *)this + --*(_WORD *)(this + 24) = 0;
  uint64_t v16 = *(void *)(*((void *)this + 6) + 8 * v10);
  *(unsigned char *)uint64_t v16 = a4;
  *(void *)(v16 + 8) = __n;
  memcpy((void *)(v16 + 16), __src, __n);
LABEL_20:
  uint64_t v17 = *((void *)this + 6);
  uint64_t v18 = *(void *)(v17 + 8 * v10);
  uint64_t result = (uint64_t)memmove((void *)(v17 + 8), (const void *)v17, 8 * v10);
  **((void **)this + 6) = v18;
  return result;
}

uint64_t MTFEStemTracker::Reset(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 32);
  if (v1)
  {
    uint64_t v2 = (void *)(*(void *)(this + 40) + 8);
    do
    {
      void *v2 = 0;
      v2 += 10;
      --v1;
    }
    while (v1);
  }
  return this;
}

uint64_t MTFEStemTracker::Lookup(uint64_t a1, const void *a2, size_t a3, uint64_t a4)
{
  uint64_t v7 = (***(uint64_t (****)(void, const void *, size_t, uint64_t, void))(a1 + 96))(*(void *)(a1 + 96), a2, a3, a4, 0);
  if (v7)
  {
    *(void *)(a1 + 112) = a3;
    memcpy((void *)(a1 + 120), a2, a3);
  }
  return v7;
}

uint64_t MTFESegmentalPerturbations::MTFESegmentalPerturbations(uint64_t result, uint64_t a2, uint64_t a3, int a4, BOOL a5, char a6)
{
  *(void *)uint64_t result = &unk_1F347F2A8;
  if (a4)
  {
    if (!a3)
    {
      *(unsigned char *)(result + 8) = 1;
      goto LABEL_11;
    }
    BOOL v6 = *(_WORD *)(a3 + 2) != 0;
  }
  else
  {
    BOOL v6 = 0;
  }
  *(unsigned char *)(result + 8) = v6;
  if (a5)
  {
    if (a3) {
      a5 = *(_WORD *)(a3 + 2) != 0;
    }
    else {
      a5 = 1;
    }
  }
  else
  {
    a5 = 0;
  }
LABEL_11:
  *(unsigned char *)(result + 9) = a5;
  *(void *)(result + 16) = &unk_1F347F318;
  *(void *)(result + --*(_WORD *)(this + 24) = a2;
  *(unsigned char *)(result + 32) = a6;
  *(void *)(result + 64) = &unk_1F347F3D0;
  *(void *)(result + 72) = a2;
  *(unsigned char *)(result + 80) = a6;
  return result;
}

uint64_t MTFESegmentalPerturbations::Visit(uint64_t this, MTFESpeechElement *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 8)) {
    this = ((uint64_t (*)(MTFESpeechElement *, uint64_t))*a2->var0)(a2, this + 16);
  }
  if (*(unsigned char *)(v3 + 9))
  {
    uint64_t v4 = (uint64_t (*)(MTFESpeechElement *, uint64_t))*a2->var0;
    return v4(a2, v3 + 64);
  }
  return this;
}

MTFESpeechElement *MTFESegmentalPerturbations::Vowel::VisitIntonationalPhrase(MTFESegmentalPerturbations::Vowel *this, MTFESpeechElement *a2)
{
  *((void *)this + 3) = (char *)a2[2].var3 + 4 * SLODWORD(a2[2].var5);
  *((void *)this + 4) = 0x3F80000000000000;
  *((_DWORD *)this + 10) = 0;
  uint64_t result = MTFESpeechElement::VisitChildren(a2, this);
  int var5_high = HIDWORD(a2[2].var5);
  uint64_t v6 = *((int *)this + 10);
  int v7 = v6 + LODWORD(a2[2].var5);
  int v8 = var5_high + ~v7;
  float v9 = 1.0 / (float)v8;
  float v10 = 0.5 - (float)(*((float *)this + 9) * 0.5);
  if (*((unsigned char *)this + 16))
  {
    if (v8 < 1) {
      return result;
    }
    uint64_t v11 = *((void *)this + 3) + 4;
    unsigned int v12 = var5_high - v7;
    float v13 = 0.0;
    do
    {
      float v13 = v9 + v13;
      int v14 = v6 + 1;
      *(float *)(v11 + 4 * v6) = *(float *)(v11 + 4 * v6)
                               / (float)(*((float *)this + 9) + (float)((float)(v10 * v13) * v13));
      --v12;
      ++v6;
    }
    while (v12 > 1);
  }
  else
  {
    if (v8 < 1) {
      return result;
    }
    uint64_t v15 = *((void *)this + 3) + 4;
    unsigned int v16 = var5_high - v7;
    float v17 = 0.0;
    do
    {
      float v17 = v9 + v17;
      int v14 = v6 + 1;
      *(float *)(v15 + 4 * v6) = (float)(*((float *)this + 9) + (float)((float)(v10 * v17) * v17))
                               * *(float *)(v15 + 4 * v6);
      --v16;
      ++v6;
    }
    while (v16 > 1);
  }
  *((_DWORD *)this + 10) = v14;
  return result;
}

uint64_t MTFESegmentalPerturbations::Vowel::VisitPhoneme(uint64_t this, MTFEPhoneme *a2)
{
  int var9 = a2->var9;
  if (a2->var9) {
    BOOL v3 = (*(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * a2->var9) & 1) == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    *(_DWORD *)(this + 32) += (int)a2->var13;
    return this;
  }
  unsigned int var15 = a2->var15;
  if ((var15 & 0x1400) != 0)
  {
    uint64_t v5 = *(float **)(this + 8);
    uint64_t v6 = v5 + 70;
  }
  else
  {
    uint64_t v5 = *(float **)(this + 8);
    if ((var15 & 0x800) != 0) {
      uint64_t v6 = v5 + 71;
    }
    else {
      uint64_t v6 = v5 + 69;
    }
  }
  float v7 = *v6;
  switch(a2->var9)
  {
    case 3u:
      int v8 = v5 + 88;
      goto LABEL_40;
    case 4u:
      int v8 = v5 + 85;
      goto LABEL_40;
    case 5u:
      int v8 = v5 + 80;
      goto LABEL_40;
    case 6u:
      int v8 = v5 + 73;
      goto LABEL_40;
    case 7u:
      int v8 = v5 + 72;
      goto LABEL_40;
    case 8u:
      int v8 = v5 + 74;
      goto LABEL_40;
    case 9u:
      int v8 = v5 + 75;
      goto LABEL_40;
    case 0xAu:
      int v8 = v5 + 94;
      goto LABEL_40;
    case 0xBu:
      int v8 = v5 + 78;
      goto LABEL_40;
    case 0xCu:
      int v8 = v5 + 83;
      goto LABEL_40;
    case 0xDu:
      int v8 = v5 + 84;
      goto LABEL_40;
    case 0xEu:
      int v8 = v5 + 79;
      goto LABEL_40;
    case 0xFu:
      int v8 = v5 + 92;
      goto LABEL_40;
    case 0x10u:
      int v8 = v5 + 77;
      goto LABEL_40;
    case 0x11u:
      int v8 = v5 + 91;
      goto LABEL_40;
    case 0x12u:
      int v8 = v5 + 96;
      goto LABEL_40;
    case 0x13u:
      int v8 = v5 + 98;
      goto LABEL_40;
    case 0x14u:
      int v8 = v5 + 86;
      goto LABEL_40;
    case 0x15u:
      int v8 = v5 + 97;
      goto LABEL_40;
    case 0x16u:
      int v8 = v5 + 76;
      goto LABEL_40;
    case 0x17u:
      int v8 = v5 + 90;
      goto LABEL_40;
    case 0x18u:
      int v8 = v5 + 95;
      goto LABEL_40;
    case 0x19u:
      int v8 = v5 + 87;
      goto LABEL_40;
    case 0x1Au:
      int v8 = v5 + 93;
      goto LABEL_40;
    case 0x1Bu:
      int v8 = v5 + 89;
      goto LABEL_40;
    case 0x1Cu:
      int v8 = v5 + 81;
      goto LABEL_40;
    case 0x1Du:
      int v8 = v5 + 82;
LABEL_40:
      float v9 = *v8;
      break;
    default:
      float v9 = 0.0;
      break;
  }
  int v10 = *(_DWORD *)(this + 32);
  float var13 = a2->var13;
  int v12 = (int)(float)((float)(var13 * 0.5) + 0.5);
  if (var13 < 2.0) {
    int v12 = 0;
  }
  int v13 = v12 + v10;
  uint64_t v14 = *(int *)(this + 40);
  int v15 = v13 + v14;
  if (v13 + (int)v14 < 0 != __OFADD__(v13, v14)) {
    ++v15;
  }
  int v16 = v15 >> 1;
  float v17 = (float)(v9 * v7) + 1.0;
  float v18 = *(float *)(this + 36);
  float v19 = (float)(v17 + v18) * 0.5;
  float v20 = v19 - v18;
  float v21 = 1.0 / (float)(v16 - v14);
  int v22 = *(unsigned __int8 *)(this + 16);
  if (*(unsigned char *)(this + 16))
  {
    if (v16 <= (int)v14)
    {
      float v29 = v17 - v19;
      float v30 = 1.0;
      float v31 = 1.0 / (float)(v13 - v16);
LABEL_56:
      if (v13 > v16)
      {
        float v32 = -v29;
        uint64_t v33 = v13 - (uint64_t)v16;
        unint64_t v34 = (float *)(*(void *)(this + 24) + 4 * v16 + 4);
        do
        {
          float v30 = v30 - v31;
          *unint64_t v34 = *v34 / (float)(v17 + (float)((float)(v30 * v32) * v30));
          ++v34;
          --v33;
        }
        while (v33);
      }
      goto LABEL_64;
    }
    uint64_t v23 = v16 - v14;
    uint64_t v24 = (float *)(*(void *)(this + 24) + 4 * v14 + 4);
    float v25 = 0.0;
    do
    {
      float v25 = v21 + v25;
      *uint64_t v24 = *v24 / (float)(*(float *)(this + 36) + (float)((float)(v20 * v25) * v25));
      ++v24;
      --v23;
    }
    while (v23);
  }
  else
  {
    if ((int)v14 >= v16)
    {
      float v29 = v17 - v19;
      float v30 = 1.0;
      float v31 = 1.0 / (float)(v13 - v16);
      goto LABEL_61;
    }
    uint64_t v26 = v16 - v14;
    uint64_t v27 = (float *)(*(void *)(this + 24) + 4 * v14 + 4);
    float v28 = 0.0;
    do
    {
      float v28 = v21 + v28;
      *uint64_t v27 = (float)(*(float *)(this + 36) + (float)((float)(v20 * v28) * v28)) * *v27;
      ++v27;
      --v26;
    }
    while (v26);
  }
  float v29 = v17 - v19;
  float v30 = 1.0;
  float v31 = 1.0 / (float)(v13 - v16);
  if (v22) {
    goto LABEL_56;
  }
LABEL_61:
  if (v13 > v16)
  {
    float v35 = -v29;
    uint64_t v36 = v13 - (uint64_t)v16;
    uint64_t v37 = (float *)(*(void *)(this + 24) + 4 * v16 + 4);
    do
    {
      float v30 = v30 - v31;
      *uint64_t v37 = (float)(v17 + (float)((float)(v30 * v35) * v30)) * *v37;
      ++v37;
      --v36;
    }
    while (v36);
  }
LABEL_64:
  *(_DWORD *)(this + 40) = v13;
  *(float *)(this + 36) = v17;
  int v38 = v10 + (int)a2->var13;
  *(_DWORD *)(this + 32) = v38;
  if (!var9) {
    *(_DWORD *)(this + 40) = v38;
  }
  return this;
}

uint64_t MTFESegmentalPerturbations::Consonant::VisitIntonationalPhrase(MTFESegmentalPerturbations::Consonant *this, MTFESpeechElement *a2)
{
  int var5_high = HIDWORD(a2[2].var5);
  uint64_t var5_low = SLODWORD(a2[2].var5);
  *((void *)this + 3) = (char *)a2[2].var3 + 4 * var5_low;
  *((_DWORD *)this + 8) = var5_high - var5_low;
  *(void *)((char *)this + 36) = 0;
  *(void *)((char *)this + 44) = 0;
  MTFESpeechElement::VisitChildren(a2, this);

  return MTFESegmentalPerturbations::Consonant::Perturb((uint64_t)this, v5);
}

uint64_t MTFESegmentalPerturbations::Consonant::Perturb(uint64_t this, MTFEPhoneme *a2)
{
  uint64_t v2 = *(void *)(this + 40);
  if (!v2) {
    return this;
  }
  int v3 = *(_DWORD *)(v2 + 72);
  if ((v3 & 0x1400) != 0)
  {
    uint64_t v4 = *(void *)(this + 8);
    uint64_t v5 = (float *)(v4 + 196);
  }
  else
  {
    uint64_t v4 = *(void *)(this + 8);
    if ((v3 & 0x800) != 0) {
      uint64_t v5 = (float *)(v4 + 200);
    }
    else {
      uint64_t v5 = (float *)(v4 + 192);
    }
  }
  float v6 = *v5;
  switch(*(unsigned char *)(v2 + 58))
  {
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x23:
    case 0x24:
    case 0x25:
      float v7 = *(float *)(v4 + 228) + (float)(*(float *)(v4 + 232) * v6);
      int v8 = (float *)(v4 + 236);
      float v9 = (float *)(v4 + 240);
      goto LABEL_11;
    case 0x22:
      float v7 = *(float *)(v4 + 204) + (float)(*(float *)(v4 + 208) * v6);
      int v8 = (float *)(v4 + 212);
      float v9 = (float *)(v4 + 216);
      goto LABEL_11;
    case 0x26:
    case 0x28:
    case 0x2A:
    case 0x2C:
    case 0x2E:
    case 0x30:
    case 0x32:
    case 0x34:
      float v7 = *(float *)(v4 + 244) + (float)(*(float *)(v4 + 248) * v6);
      int v8 = (float *)(v4 + 252);
      float v9 = (float *)(v4 + 256);
      goto LABEL_11;
    case 0x27:
    case 0x29:
    case 0x2B:
    case 0x2D:
    case 0x2F:
    case 0x31:
    case 0x33:
    case 0x35:
      float v7 = *(float *)(v4 + 260) + (float)(*(float *)(v4 + 264) * v6);
      int v8 = (float *)(v4 + 268);
      float v9 = (float *)(v4 + 272);
LABEL_11:
      float v10 = *v8 + (float)(*v9 * v6);
      uint64_t v11 = *(unsigned int *)(v4 + 224);
      float v12 = 1.0;
      float v13 = 1.0 / (float)(int)v11;
      int v14 = *(unsigned __int8 *)(this + 16);
      if (*(unsigned char *)(this + 16))
      {
        if ((int)v11 <= 1)
        {
          int v20 = (int)*(float *)(v2 + 64);
          float v21 = v10 - v7;
          float v22 = 1.0 / (float)v20;
          goto LABEL_22;
        }
        int v15 = (float *)(*(void *)(this + 24) + 4 * *(int *)(this + 48) - 4);
        uint64_t v16 = v11 - 1;
        float v17 = 1.0;
        do
        {
          float v17 = v17 - v13;
          float *v15 = *v15 + (float)((float)(v17 * (float)-v7) * v17);
          --v15;
          --v16;
        }
        while (v16);
      }
      else
      {
        if ((int)v11 <= 1)
        {
          int v20 = (int)*(float *)(v2 + 64);
          float v21 = v10 - v7;
          float v22 = 1.0 / (float)v20;
          goto LABEL_28;
        }
        float v18 = (float *)(*(void *)(this + 24) + 4 * *(int *)(this + 48) - 4);
        uint64_t v19 = v11 - 1;
        do
        {
          float v12 = v12 - v13;
          *float v18 = *v18 + (float)((float)(v7 * v12) * v12);
          --v18;
          --v19;
        }
        while (v19);
      }
      int v20 = (int)*(float *)(v2 + 64);
      float v21 = v10 - v7;
      float v22 = 1.0 / (float)v20;
      if (v14)
      {
LABEL_22:
        if (v20 <= 0)
        {
          LODWORD(v4) = *(_DWORD *)(v4 + 220);
          float v26 = 1.0;
          float v27 = 1.0 / (float)(int)v4;
          goto LABEL_32;
        }
        uint64_t v23 = v20;
        uint64_t v24 = (float *)(*(void *)(this + 24) + 4 * *(int *)(this + 48));
        float v25 = 0.0;
        do
        {
          *uint64_t v24 = *v24 - (float)(v7 + (float)((float)(v21 * v25) * v25));
          ++v24;
          float v25 = v22 + v25;
          --v23;
        }
        while (v23);
        goto LABEL_31;
      }
LABEL_28:
      if (v20 <= 0)
      {
        LODWORD(v4) = *(_DWORD *)(v4 + 220);
        float v26 = 1.0;
        float v27 = 1.0 / (float)(int)v4;
        goto LABEL_38;
      }
      uint64_t v28 = v20;
      float v29 = (float *)(*(void *)(this + 24) + 4 * *(int *)(this + 48));
      float v30 = 0.0;
      do
      {
        *float v29 = (float)(v7 + (float)((float)(v21 * v30) * v30)) + *v29;
        ++v29;
        float v30 = v22 + v30;
        --v28;
      }
      while (v28);
LABEL_31:
      LODWORD(v4) = *(_DWORD *)(v4 + 220);
      float v26 = 1.0;
      float v27 = 1.0 / (float)(int)v4;
      if (v14)
      {
LABEL_32:
        if ((int)v4 >= 1)
        {
          int v31 = *(_DWORD *)(this + 32);
          uint64_t v4 = v4;
          uint64_t v32 = v20 + *(_DWORD *)(this + 48);
          do
          {
            if ((int)v32 >= v31) {
              break;
            }
            *(float *)(*(void *)(this + 24) + 4 * v32) = *(float *)(*(void *)(this + 24) + 4 * v32)
                                                         + (float)((float)(v26 * (float)(v10 * v26)) * v26);
            float v26 = v26 - v27;
            ++v32;
            --v4;
          }
          while (v4);
        }
        return this;
      }
LABEL_38:
      if ((int)v4 >= 1)
      {
        int v33 = *(_DWORD *)(this + 32);
        uint64_t v4 = v4;
        uint64_t v34 = v20 + *(_DWORD *)(this + 48);
        do
        {
          if ((int)v34 >= v33) {
            break;
          }
          *(float *)(*(void *)(this + 24) + 4 * v34) = *(float *)(*(void *)(this + 24) + 4 * v34)
                                                       + (float)((float)(v26 * (float)(v10 * v26)) * v26);
          float v26 = v26 - v27;
          ++v34;
          --v4;
        }
        while (v4);
      }
      return this;
    default:
      return this;
  }
}

float MTFESegmentalPerturbations::Consonant::VisitPhoneme(MTFESegmentalPerturbations::Consonant *this, MTFEPhoneme *a2)
{
  if (*(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * a2->var9))
  {
    int v4 = *((_DWORD *)this + 9);
  }
  else
  {
    MTFESegmentalPerturbations::Consonant::Perturb((uint64_t)this, a2);
    *((void *)this + 5) = a2;
    int v4 = *((_DWORD *)this + 9);
    *((_DWORD *)this + 12) = v4;
  }
  float result = a2->var13;
  *((_DWORD *)this + 9) = v4 + (int)result;
  return result;
}

void MTFESegmentalPerturbations::Vowel::~Vowel(MTFESegmentalPerturbations::Vowel *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

void MTFESegmentalPerturbations::Consonant::~Consonant(MTFESegmentalPerturbations::Consonant *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

void MTMBPhraseProcessor::MTMBPhraseProcessor(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = (uint64_t)(a1 + 534);
  MTPBVoice::MTPBVoice((uint64_t)(a1 + 534), a2);
  *a1 = &unk_1F347F4A0;
  MTBEPhraseProcessor::MTBEPhraseProcessor((uint64_t)a1, v5, a3, 1);
}

void sub_1DA4B0260(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v2, 0x10A1C4036524A53);
  MTBEPhraseProcessor::~MTBEPhraseProcessor(v1);
  _Unwind_Resume(a1);
}

void MTMBPhraseProcessor::~MTMBPhraseProcessor(MTMBPhraseProcessor *this)
{
  *(void *)this = &unk_1F347F4A0;
  uint64_t v2 = (MTMBSelectUnits *)*((void *)this + 2);
  int v3 = (MTFESpeechElement *)*((void *)this + 580);
  int v4 = (MTBEPersistentParam *)MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBAsynchronousSearch);
  MTMBSelectUnits::DeletePhrase(v2, v3, v4);
  *((void *)this + 2) = 0;

  MTBEPhraseProcessor::~MTBEPhraseProcessor(this);
}

{
  uint64_t vars8;

  MTMBPhraseProcessor::~MTMBPhraseProcessor(this);

  JUMPOUT(0x1E016FF00);
}

void MTMBPhraseProcessor::ExpandCompoundsPreDur(MTMBPhraseProcessor *this, MTFESpeechElement *a2)
{
  if (!*((unsigned char *)this + 69))
  {
    int v3 = 0;
    v2[0] = &unk_1F347E010;
    char v4 = 1;
    MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v2, a2);
    MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v2);
  }
}

void sub_1DA4B0424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void MTMBPhraseProcessor::ExpandCompoundsPostDur(MTMBPhraseProcessor *this, MTFESpeechElement *a2)
{
  if (!*((unsigned char *)this + 69))
  {
    int v3 = 0;
    v2[0] = &unk_1F347E010;
    char v4 = 0;
    MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v2, a2);
    MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v2);
  }
}

void sub_1DA4B049C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MTMBPhraseProcessor::SelectUnits(uint64_t this, MTFESpeechElement *a2)
{
  if (!*(unsigned char *)(this + 69)) {
    operator new();
  }
  return this;
}

void sub_1DA4B0594(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10E1C40195A27CBLL);
  _Unwind_Resume(a1);
}

uint64_t MTMBPhraseProcessor::AbortUnitSelection(MTMBPhraseProcessor *this)
{
  pthread_mutex_lock((pthread_mutex_t *)(*((void *)this + 580) + 96));
  uint64_t v3 = *((void *)this + 580);
  char v4 = *(MTMBSelectUnits **)(v3 + 208);
  if (v4 == *((MTMBSelectUnits **)this + 581))
  {
    MTMBSelectUnits::AbortUnitSelection(v4, v2);
    uint64_t v3 = *((void *)this + 580);
  }

  return pthread_mutex_unlock((pthread_mutex_t *)(v3 + 96));
}

uint64_t MTMBPhraseProcessor::Reader(MTMBPhraseProcessor *this)
{
  return *((void *)this + 579);
}

uint64_t Log2(uint64_t a1)
{
  if ((unint64_t)a1 < 2) {
    return 0;
  }
  uint64_t v1 = 0;
  do
  {
    ++v1;
    BOOL v2 = (unint64_t)a1 > 3;
    a1 >>= 1;
  }
  while (v2);
  return v1;
}

uint64_t BitReverse(uint64_t a1, uint64_t a2)
{
  if (a2 < 1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = 1;
  uint64_t v5 = 1 << (a2 - 1);
  do
  {
    if ((v4 & a1) != 0) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    result |= v6;
    v4 *= 2;
    v5 >>= 1;
    --a2;
  }
  while (a2);
  return result;
}

uint64_t InitBitRevTable(uint64_t a1, __int16 *a2)
{
  if ((a1 & (a1 - 1)) != 0)
  {
    return -50;
  }
  else
  {
    if ((unint64_t)a1 >= 2)
    {
      uint64_t v2 = 0;
      uint64_t v4 = a1;
      do
      {
        ++v2;
        BOOL v5 = (unint64_t)v4 > 3;
        v4 >>= 1;
      }
      while (v5);
    }
    else
    {
      uint64_t v2 = 0;
    }
    LODWORD(v6) = a2;
    if (a1 >= 1)
    {
      uint64_t v7 = 0;
      uint64_t v6 = a2;
      do
      {
        if (v2 >= 1)
        {
          uint64_t v8 = 0;
          uint64_t v9 = v2;
          uint64_t v10 = 1 << (v2 - 1);
          uint64_t v11 = 1;
          do
          {
            if ((v11 & v7) != 0) {
              uint64_t v12 = v10;
            }
            else {
              uint64_t v12 = 0;
            }
            v8 |= v12;
            v11 *= 2;
            v10 >>= 1;
            --v9;
          }
          while (v9);
          if (v8 > v7)
          {
            v6[2] = v8;
            v6 += 2;
            *(v6 - 1) = v7;
          }
        }
        ++v7;
      }
      while (v7 != a1);
    }
    __int16 v3 = 0;
    *a2 = (v6 - a2) >> 2;
  }
  return v3;
}

uint64_t BitRevShortArr(__int16 *a1, uint64_t a2, unsigned __int16 *a3)
{
  int v3 = *a3;
  if (*a3)
  {
    uint64_t v4 = (__int16 *)(a3 + 1);
    do
    {
      --v3;
      uint64_t v5 = *v4;
      uint64_t v6 = v4[1];
      __int16 v7 = a1[v5];
      a1[v5] = a1[v6];
      a1[v6] = v7;
      v4 += 2;
    }
    while ((_WORD)v3);
  }
  return 0;
}

uint64_t BitRevFloatArr(float *a1, uint64_t a2, unsigned __int16 *a3)
{
  int v3 = *a3;
  if (*a3)
  {
    uint64_t v4 = (__int16 *)(a3 + 1);
    do
    {
      --v3;
      uint64_t v5 = *v4;
      uint64_t v6 = v4[1];
      float v7 = a1[v5];
      a1[v5] = a1[v6];
      a1[v6] = v7;
      v4 += 2;
    }
    while ((_WORD)v3);
  }
  return 0;
}

uint64_t InitTrigTables(uint64_t a1, float *a2, float *a3)
{
  if (a1 >= 2)
  {
    float v5 = 6.28318531 / (double)a1;
    unint64_t v6 = (unint64_t)a1 >> 1;
    float v7 = 0.0;
    do
    {
      __float2 v8 = __sincosf_stret(v7);
      *a3++ = v8.__cosval;
      *a2++ = v8.__sinval;
      float v7 = v7 + v5;
      --v6;
    }
    while (v6);
  }
  return 0;
}

float ComplexFFT(float *a1, float *a2, uint64_t a3, float *a4, float *a5, unsigned __int16 *a6, float result)
{
  if ((unint64_t)a3 >= 2)
  {
    uint64_t v7 = -1;
    uint64_t v8 = a3;
    do
    {
      ++v7;
      BOOL v9 = (unint64_t)v8 > 3;
      v8 >>= 1;
    }
    while (v9);
    uint64_t v10 = 0;
    uint64_t v11 = a3;
    do
    {
      if (v11 >= 0) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v11 + 1;
      }
      uint64_t v13 = v12 >> 1;
      if (a3 >= 1)
      {
        uint64_t v14 = 0;
        int v15 = &a2[v13];
        uint64_t v16 = &a1[v13];
        do
        {
          float v17 = a1[v14];
          float v18 = v16[v14];
          a1[v14] = v17 + v18;
          v16[v14] = v17 - v18;
          float v19 = a2[v14];
          float v20 = v15[v14];
          float v21 = v19 - v20;
          uint64_t result = v19 + v20;
          a2[v14] = result;
          v15[v14] = v21;
          v14 += v11;
        }
        while (v14 < a3);
      }
      if (v7 != v10 && v11 >= 4)
      {
        uint64_t v22 = 0;
        if (v13 <= 2) {
          uint64_t v23 = 2;
        }
        else {
          uint64_t v23 = v13;
        }
        uint64_t v24 = &a2[v13];
        float v25 = &a1[v13];
        for (uint64_t i = 1; i != v23; ++i)
        {
          v22 += 2 * (a3 / v11);
          if (i < a3)
          {
            uint64_t result = a4[v22];
            float v27 = a5[v22];
            uint64_t v28 = i;
            do
            {
              float v29 = a1[v28];
              float v30 = v25[v28];
              float v31 = v29 - v30;
              a1[v28] = v29 + v30;
              float v32 = a2[v28];
              float v33 = v24[v28];
              a2[v28] = v32 + v33;
              v25[v28] = (float)(v27 * (float)(v32 - v33)) + (float)(result * v31);
              v24[v28] = (float)(v31 * (float)-v27) + (float)(result * (float)(v32 - v33));
              v28 += v11;
            }
            while (v28 < a3);
          }
        }
      }
      uint64_t v11 = v13;
    }
    while (v7 != v10++);
  }
  int v35 = *a6;
  if (*a6)
  {
    uint64_t v36 = (__int16 *)(a6 + 1);
    int v37 = *a6;
    int v38 = (__int16 *)(a6 + 1);
    do
    {
      --v37;
      uint64_t v39 = *v38;
      uint64_t v40 = v38[1];
      float v41 = a1[v39];
      a1[v39] = a1[v40];
      a1[v40] = v41;
      v38 += 2;
    }
    while ((_WORD)v37);
    do
    {
      --v35;
      uint64_t v42 = *v36;
      uint64_t v43 = v36[1];
      uint64_t result = a2[v42];
      a2[v42] = a2[v43];
      a2[v43] = result;
      v36 += 2;
    }
    while ((_WORD)v35);
  }
  return result;
}

float RealFFTPowerSpectrum(float *a1, float *a2, uint64_t a3, float *a4, float *a5, unsigned __int16 *a6, float a7)
{
  uint64_t v12 = a3 >> 1;
  if (a3 <= 1)
  {
    ComplexFFT(a1, a2, a3 >> 1, a4, a5, a6, a7);
    uint64_t v17 = a3 >> 2;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    if (v12 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = a3 >> 1;
    }
    do
    {
      a1[v14] = a1[v13];
      float v16 = a1[v13 + 1];
      a2[v14++] = v16;
      v13 += 2;
    }
    while (v15 != v14);
    ComplexFFT(a1, a2, a3 >> 1, a4, a5, a6, v16);
    uint64_t v17 = a3 >> 2;
    if (a3 >= 8)
    {
      uint64_t v18 = 2;
      if (v17 > 2) {
        uint64_t v18 = a3 >> 2;
      }
      uint64_t v19 = 4 * v18;
      uint64_t v20 = 4 * v12 - 4;
      unint64_t v21 = 4;
      do
      {
        float v22 = a1[v21 / 4];
        float v23 = *(float *)((char *)a1 + v20);
        float v24 = v22 + v23;
        float v25 = v22 - v23;
        float v26 = a2[v21 / 4];
        float v27 = *(float *)((char *)a2 + v20);
        float v28 = v26 + v27;
        float v29 = v26 - v27;
        float v30 = a4[v21 / 4];
        a1[v21 / 4] = (float)((float)((float)((float)(v30 * v25) - (float)(v29 - (float)(a5[v21 / 4] * v28)))
                                    * (float)((float)(v30 * v25) - (float)(v29 - (float)(a5[v21 / 4] * v28))))
                            + (float)((float)((float)(v24 + (float)(v30 * v28)) - (float)(a5[v21 / 4] * v25))
                                    * (float)((float)(v24 + (float)(v30 * v28)) - (float)(a5[v21 / 4] * v25))))
                    * 0.25;
        float v31 = a4[v21 / 4];
        *(float *)((char *)a1 + v20) = (float)((float)((float)((float)-(float)(v29 + (float)(a5[v21 / 4] * v28))
                                                             - (float)(v31 * v25))
                                                     * (float)((float)-(float)(v29 + (float)(a5[v21 / 4] * v28))
                                                             - (float)(v31 * v25)))
                                             + (float)((float)((float)(v24 - (float)(v31 * v28))
                                                             + (float)(a5[v21 / 4] * v25))
                                                     * (float)((float)(v24 - (float)(v31 * v28))
                                                             + (float)(a5[v21 / 4] * v25))))
                                     * 0.25;
        v21 += 4;
        v20 -= 4;
      }
      while (v19 != v21);
    }
  }
  *a1 = (float)(*a2 * *a2) + (float)(*a1 * *a1);
  float result = (float)(a2[v17] * a2[v17]) + (float)(a1[v17] * a1[v17]);
  a1[v17] = result;
  return result;
}

float RealFFTMagnitudeSpectrum(float *a1, float *a2, uint64_t a3, float *a4, float *a5, unsigned __int16 *a6, float a7)
{
  uint64_t v12 = a3 >> 1;
  if (a3 <= 1)
  {
    ComplexFFT(a1, a2, a3 >> 1, a4, a5, a6, a7);
    uint64_t v17 = a3 >> 2;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    if (v12 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = a3 >> 1;
    }
    do
    {
      a1[v14] = a1[v13];
      float v16 = a1[v13 + 1];
      a2[v14++] = v16;
      v13 += 2;
    }
    while (v15 != v14);
    ComplexFFT(a1, a2, a3 >> 1, a4, a5, a6, v16);
    uint64_t v17 = a3 >> 2;
    if (a3 >= 8)
    {
      uint64_t v18 = 2;
      if (v17 > 2) {
        uint64_t v18 = a3 >> 2;
      }
      uint64_t v19 = 4 * v18;
      uint64_t v20 = 4 * v12 - 4;
      unint64_t v21 = 4;
      do
      {
        float v22 = a1[v21 / 4];
        float v23 = *(float *)((char *)a1 + v20);
        float v24 = v22 + v23;
        float v25 = v22 - v23;
        float v26 = a2[v21 / 4];
        float v27 = *(float *)((char *)a2 + v20);
        float v28 = v26 + v27;
        float v29 = v26 - v27;
        float v30 = a4[v21 / 4];
        a1[v21 / 4] = sqrtf((float)((float)((float)(v30 * v25) - (float)(v29 - (float)(a5[v21 / 4] * v28)))* (float)((float)(v30 * v25) - (float)(v29 - (float)(a5[v21 / 4] * v28))))+ (float)((float)((float)(v24 + (float)(v30 * v28)) - (float)(a5[v21 / 4] * v25))* (float)((float)(v24 + (float)(v30 * v28)) - (float)(a5[v21 / 4] * v25))))* 0.5;
        float v31 = a4[v21 / 4];
        *(float *)((char *)a1 + v20) = sqrtf((float)((float)((float)-(float)(v29 + (float)(a5[v21 / 4] * v28))- (float)(v31 * v25))* (float)((float)-(float)(v29 + (float)(a5[v21 / 4] * v28))- (float)(v31 * v25)))+ (float)((float)((float)(v24 - (float)(v31 * v28)) + (float)(a5[v21 / 4] * v25))* (float)((float)(v24 - (float)(v31 * v28)) + (float)(a5[v21 / 4] * v25))))* 0.5;
        v21 += 4;
        v20 -= 4;
      }
      while (v19 != v21);
    }
  }
  *a1 = sqrtf((float)(*a2 * *a2) + (float)(*a1 * *a1));
  float result = sqrtf((float)(a2[v17] * a2[v17]) + (float)(a1[v17] * a1[v17]));
  a1[v17] = result;
  return result;
}

float RealFFTPowerSpectrumNoiseCancel(float *a1, float *a2, uint64_t a3, float *a4, float *a5, unsigned __int16 *a6, float *a7, float a8)
{
  uint64_t v14 = a3 >> 1;
  if (a3 <= 1)
  {
    ComplexFFT(a1, a2, a3 >> 1, a4, a5, a6, a8);
    uint64_t v20 = a3 >> 2;
  }
  else
  {
    uint64_t v15 = 0;
    if (v14 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = a3 >> 1;
    }
    uint64_t v17 = a1 + 1;
    do
    {
      a1[v15] = *(v17 - 1);
      float v18 = *v17;
      v17 += 2;
      float v19 = v18;
      a2[v15++] = v18;
    }
    while (v16 != v15);
    ComplexFFT(a1, a2, a3 >> 1, a4, a5, a6, v19);
    uint64_t v20 = a3 >> 2;
    if (a3 >= 8)
    {
      uint64_t v21 = 2;
      if (v20 > 2) {
        uint64_t v21 = a3 >> 2;
      }
      uint64_t v22 = 4 * v21;
      uint64_t v23 = 4 * v14 - 4;
      unint64_t v24 = 4;
      do
      {
        float v25 = a1[v24 / 4];
        float v26 = *(float *)((char *)a1 + v23);
        float v27 = v25 + v26;
        float v28 = v25 - v26;
        float v29 = a2[v24 / 4];
        float v30 = *(float *)((char *)a2 + v23);
        float v31 = v29 + v30;
        float v32 = v29 - v30;
        float v33 = a4[v24 / 4];
        float v34 = sqrtf((float)((float)((float)((float)(v33 * v28) - (float)(v32 - (float)(a5[v24 / 4] * v31)))* (float)((float)(v33 * v28) - (float)(v32 - (float)(a5[v24 / 4] * v31))))+ (float)((float)((float)(v27 + (float)(v33 * v31)) - (float)(a5[v24 / 4] * v28))* (float)((float)(v27 + (float)(v33 * v31)) - (float)(a5[v24 / 4] * v28))))* 0.25);
        a1[v24 / 4] = v34;
        float v35 = a7[v24 / 4];
        float v36 = v34 - v35;
        double v37 = v35 * 0.1;
        if (v37 > v36)
        {
          float v38 = v37;
          float v36 = v38;
        }
        a1[v24 / 4] = v36 * v36;
        float v39 = a4[v24 / 4];
        float v40 = a5[v24 / 4];
        float v41 = (float)(v27 - (float)(v39 * v31)) + (float)(v40 * v28);
        float v42 = (float)-(float)(v32 + (float)(v40 * v31)) - (float)(v39 * v28);
        float v43 = sqrtf((float)((float)(v42 * v42) + (float)(v41 * v41)) * 0.25);
        *(float *)((char *)a1 + v23) = v43;
        float v44 = *(float *)((char *)a7 + v23);
        float v45 = v43 - v44;
        double v46 = v44 * 0.1;
        if (v46 > v45)
        {
          float v47 = v46;
          float v45 = v47;
        }
        *(float *)((char *)a1 + v23) = v45 * v45;
        v24 += 4;
        v23 -= 4;
      }
      while (v22 != v24);
    }
  }
  float v48 = sqrtf((float)(*a2 * *a2) + (float)(*a1 * *a1));
  *a1 = v48;
  float v49 = v48 - *a7;
  double v50 = *a7 * 0.1;
  if (v50 > v49)
  {
    float v51 = v50;
    float v49 = v51;
  }
  *a1 = v49 * v49;
  float v52 = sqrtf((float)(a2[v20] * a2[v20]) + (float)(a1[v20] * a1[v20]));
  a1[v20] = v52;
  float v53 = a7[v20];
  float v54 = v52 - v53;
  double v55 = v53 * 0.1;
  if (v55 > v54)
  {
    float v56 = v55;
    float v54 = v56;
  }
  float result = v54 * v54;
  a1[v20] = result;
  return result;
}

float compute_norm(float *a1, int a2)
{
  if (a2 < 1)
  {
    float v3 = 0.0;
  }
  else
  {
    uint64_t v2 = a2;
    float v3 = 0.0;
    do
    {
      float v4 = *a1++;
      float v3 = v3 + (float)(v4 * v4);
      --v2;
    }
    while (v2);
  }
  return sqrtf(v3);
}

float *normalize(float *result, int a2)
{
  if (a2 >= 1)
  {
    uint64_t v2 = a2;
    float v3 = 0.0;
    float v4 = result;
    uint64_t v5 = a2;
    do
    {
      float v6 = *v4++;
      float v3 = v3 + (float)(v6 * v6);
      --v5;
    }
    while (v5);
    float v7 = sqrtf(v3);
    do
    {
      *float result = *result / v7;
      ++result;
      --v2;
    }
    while (v2);
  }
  return result;
}

double dot_product(float *a1, float *a2, int a3)
{
  if (a3 < 1) {
    return 0.0;
  }
  uint64_t v3 = a3;
  double result = 0.0;
  do
  {
    float v5 = *a1++;
    float v6 = v5;
    float v7 = *a2++;
    *(float *)&double result = *(float *)&result + (float)(v6 * v7);
    --v3;
  }
  while (v3);
  return result;
}

float dot_product_dist(float *a1, float *a2, unsigned int a3)
{
  if ((int)a3 < 1) {
    return NAN;
  }
  uint64_t v3 = a3;
  float v4 = 0.0;
  float v5 = a1;
  uint64_t v6 = a3;
  do
  {
    float v7 = *v5++;
    float v4 = v4 + (float)(v7 * v7);
    --v6;
  }
  while (v6);
  float v8 = 0.0;
  BOOL v9 = a2;
  uint64_t v10 = a3;
  do
  {
    float v11 = *v9++;
    float v8 = v8 + (float)(v11 * v11);
    --v10;
  }
  while (v10);
  float v12 = 0.0;
  float v13 = sqrtf(v4);
  do
  {
    float v14 = *a1++;
    float v15 = v14;
    float v16 = *a2++;
    float v12 = v12 + (float)(v15 * v16);
    --v3;
  }
  while (v3);
  return v12 / (float)(sqrtf(v8) * v13);
}

float MEOWSVDDistanceExplicit(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  do
  {
    *(float *)((char *)&v24 + v3) = *(float *)(a1 + 4 + v3) + *(float *)(a2 + 4 + v3);
    v3 += 4;
  }
  while (v3 != 20);
  uint64_t v4 = a1 + 24;
  printf("uS (normalized) =");
  for (uint64_t i = 0; i != 20; i += 4)
    printf(" %f", *(float *)(v4 + i));
  uint64_t v6 = a2 + 24;
  putchar(10);
  printf("vS (normalized) =");
  for (uint64_t j = 0; j != 20; j += 4)
    printf(" %f", *(float *)(v6 + j));
  putchar(10);
  printf("wS=");
  for (uint64_t k = 0; k != 20; k += 4)
    printf(" %f", *(float *)((char *)&v24 + k));
  putchar(10);
  uint64_t v9 = 0;
  long long v22 = v24;
  int v23 = v25;
  float v10 = 0.0;
  do
  {
    float v10 = v10 + (float)(*(float *)((char *)&v22 + v9) * *(float *)((char *)&v22 + v9));
    v9 += 4;
  }
  while (v9 != 20);
  uint64_t v11 = 0;
  float v12 = sqrtf(v10);
  do
  {
    *(float *)((char *)&v22 + v11) = *(float *)((char *)&v22 + v11) / v12;
    v11 += 4;
  }
  while (v11 != 20);
  printf("wS (normalized) =");
  for (uint64_t m = 0; m != 20; m += 4)
    printf(" %f", *(float *)((char *)&v22 + m));
  putchar(10);
  uint64_t v14 = 0;
  float v15 = 0.0;
  do
  {
    float v15 = v15 + (float)(*(float *)(v4 + v14) * *(float *)((char *)&v22 + v14));
    v14 += 4;
  }
  while (v14 != 20);
  uint64_t v16 = 0;
  float v17 = 0.0;
  do
  {
    float v17 = v17 + (float)(*(float *)((char *)&v22 + v16) * *(float *)(v6 + v16));
    v16 += 4;
  }
  while (v16 != 20);
  printf("d1=<uS,wS>= %f\n", v15);
  printf("d2=<wS,vS>= %f\n", v17);
  float v18 = -v15;
  if (v15 >= 0.0) {
    float v18 = v15;
  }
  float v19 = -v17;
  if (v17 >= 0.0) {
    float v19 = v17;
  }
  float v20 = (float)(v18 + v19) * -0.5 + 1.0;
  printf("dist = %f\n", v20);
  putchar(10);
  return v20;
}

float MEOWRawSVDDistance(float *a1, float *a2)
{
  float v4 = *a2 / *a1;
  if (*a1 >= *a2) {
    float v4 = *a1 / *a2;
  }
  if ((float)(*a1 * *a2) == 0.0) {
    float v4 = 1.0;
  }
  float v5 = a1[5] + a2[5];
  float v6 = a1[4] + a2[4];
  float v7 = a1[3] + a2[3];
  float v8 = a1[2] + a2[2];
  float v2 = a1[1];
  float v3 = a2[1];
  float v9 = (float)((float)(fabsf((float)((float)((float)((float)(v8 * a1[7]) + (float)(a1[6] * (float)(v2 + v3)))+ (float)(a1[8] * v7))+ (float)(a1[9] * v6))+ (float)(a1[10] * v5))+ fabsf((float)((float)((float)((float)(v8 * a2[7]) + (float)(a2[6] * (float)(v2 + v3)))+ (float)(a2[8] * v7))+ (float)(a2[9] * v6))+ (float)(a2[10] * v5)))* -0.5)* (1.0/ sqrtf((float)((float)((float)((float)(v8 * v8) + (float)((float)(v2 + v3) * (float)(v2 + v3))) + (float)(v7 * v7))+ (float)(v6 * v6))+ (float)(v5 * v5)))+ 1.0;
  return v4 * (float)(v9 * v4);
}

void MEOWDistance(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 56);
  if (v2 != *(_DWORD *)(a2 + 56) && v2 < 0)
  {
    float v3 = *(float *)(a1 + 4) + *(float *)(a2 + 4);
    float v4 = *(float *)(a1 + 8) + *(float *)(a2 + 8);
    float v5 = *(float *)(a1 + 12) + *(float *)(a2 + 12);
    float v6 = *(float *)(a1 + 16) + *(float *)(a2 + 16);
    float v7 = *(float *)(a1 + 20) + *(float *)(a2 + 20);
    float v8 = (float)((float)(fabsf((float)((float)((float)((float)(v4 * *(float *)(a1 + 28)) + (float)(*(float *)(a1 + 24) * v3))+ (float)(*(float *)(a1 + 32) * v5))+ (float)(*(float *)(a1 + 36) * v6))+ (float)(*(float *)(a1 + 40) * v7))+ fabsf((float)((float)((float)((float)(v4 * *(float *)(a2 + 28)) + (float)(*(float *)(a2 + 24) * v3))+ (float)(*(float *)(a2 + 32) * v5))+ (float)(*(float *)(a2 + 36) * v6))+ (float)(*(float *)(a2 + 40) * v7)))* -0.5)* (1.0/ sqrtf((float)((float)((float)((float)(v4 * v4) + (float)(v3 * v3)) + (float)(v5 * v5)) + (float)(v6 * v6))+ (float)(v7 * v7)))+ 1.0;
    powf(*(float *)(a1 + 44) * v8, *(float *)(a1 + 48));
  }
}

void MEOWDist::MEOWDist(MEOWDist *this, int a2)
{
  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = 1 << a2;
  SLML::Vector<float>::Vector((_DWORD *)this + 2, 0);
}

void sub_1DA4B15C8(_Unwind_Exception *a1)
{
  SLML::Storage<float>::RemoveReference(*(void *)(v1 + 16));
  _Unwind_Resume(a1);
}

void MEOWDist::MakeHammingWindow(MEOWDist *this)
{
  int v1 = *((_DWORD *)this + 1);
  unsigned int v2 = v1;
  if (*(_DWORD *)(*((void *)this + 2) + 12) < v1) {
    SLML::Vector<float>::ResizeStorage();
  }
  *((_DWORD *)this + 2) = v1;
  if (v1 >= 1)
  {
    uint64_t v3 = 0;
    float v4 = 6.28318531 / (double)v1;
    float v17 = v4;
    float v5 = (_DWORD *)*((void *)this + 3);
    uint64_t v6 = *((int *)this + 3);
    uint64_t v7 = (v2 + 1) & 0x1FFFFFFFELL;
    uint64x2_t v16 = (uint64x2_t)vdupq_n_s64((unint64_t)v2 - 1);
    uint64x2_t v8 = (uint64x2_t)xmmword_1DA500FD0;
    float32x2_t v9 = (float32x2_t)vdup_n_s32(0xBEEB851F);
    float32x2_t v10 = (float32x2_t)vdup_n_s32(0x3F0A3D71u);
    int64x2_t v15 = vdupq_n_s64(2uLL);
    do
    {
      int64x2_t v21 = (int64x2_t)v8;
      int32x2_t v20 = vmovn_s64((int64x2_t)vcgeq_u64(v16, v8));
      v11.i32[0] = v3;
      v11.i32[1] = v3 + 1;
      float32x2_t v12 = vmul_n_f32(vcvt_f32_s32(v11), v17);
      float v18 = v12.f32[0];
      float v19 = cosf(v12.f32[1]);
      v13.f32[0] = cosf(v18);
      v13.f32[1] = v19;
      float32x2_t v14 = vmla_f32(v10, v9, v13);
      if (v20.i8[0]) {
        *float v5 = v14.i32[0];
      }
      if (v20.i8[4]) {
        v5[v6] = v14.i32[1];
      }
      v3 += 2;
      uint64x2_t v8 = (uint64x2_t)vaddq_s64(v21, v15);
      v5 += 2 * v6;
    }
    while (v7 != v3);
  }
}

int8x8_t MEOWSVDDistances::GetCookie(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)a1 + 56 * a2;
  *(_DWORD *)a3 = *(_DWORD *)(v3 + 8);
  long long v4 = *(_OWORD *)(v3 + 12);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(v3 + 28);
  *(_OWORD *)(a3 + 4) = v4;
  long long v5 = *(_OWORD *)(v3 + 32);
  *(_DWORD *)(a3 + 40) = *(_DWORD *)(v3 + 48);
  *(_OWORD *)(a3 + --*(_WORD *)(this + 24) = v5;
  int8x8_t result = vrev32_s8(*(int8x8_t *)(a1 + 236));
  *(int8x8_t *)(a3 + 44) = result;
  *(_DWORD *)(a3 + 56) = *(_DWORD *)v3 | 0x80000000;
  return result;
}

int8x8_t MEOWSVDDistances::GetCookie(uint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 134;
  if (a3) {
    uint64_t v5 = 32;
  }
  uint64_t v6 = *(void *)a1 + 56 * (*(__int16 *)(a1 + v5 + 2 * a2) + a4);
  *(_DWORD *)a5 = *(_DWORD *)(v6 + 8);
  long long v7 = *(_OWORD *)(v6 + 12);
  *(_DWORD *)(a5 + 20) = *(_DWORD *)(v6 + 28);
  *(_OWORD *)(a5 + 4) = v7;
  long long v8 = *(_OWORD *)(v6 + 32);
  *(_DWORD *)(a5 + 40) = *(_DWORD *)(v6 + 48);
  *(_OWORD *)(a5 + --*(_WORD *)(this + 24) = v8;
  int8x8_t result = vrev32_s8(*(int8x8_t *)(a1 + 236));
  *(int8x8_t *)(a5 + 44) = result;
  *(_DWORD *)(a5 + 56) = *(_DWORD *)v6 | 0x80000000;
  return result;
}

int8x8_t MEOWSVDDistances::GetCookies(uint64_t a1, unsigned int a2, int a3, MEOWVectorBase *this)
{
  uint64_t v7 = 134;
  if (a3) {
    uint64_t v7 = 32;
  }
  uint64_t v8 = a1 + v7;
  float32x2_t v9 = (__int16 *)(a1 + v7 + 2 * a2);
  uint64_t v10 = v9[1];
  int v11 = (unsigned __int16)v9[1];
  uint64_t v12 = *v9;
  int v13 = (unsigned __int16)v12;
  unint64_t v14 = v10 - v12;
  if (*((void *)this + 3) < (unint64_t)(v10 - v12)) {
    MEOWVectorBase::Allocate(this, v14, 1);
  }
  *((void *)this + 2) = v14;
  if (v11 != v13)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    if (v14 <= 1) {
      uint64_t v18 = 1;
    }
    else {
      uint64_t v18 = v14;
    }
    do
    {
      uint64_t v19 = *(void *)this + v16;
      uint64_t v20 = *(void *)a1 + 56 * (v17 + *(__int16 *)(v8 + 2 * a2));
      *(_DWORD *)uint64_t v19 = *(_DWORD *)(v20 + 8);
      long long v21 = *(_OWORD *)(v20 + 12);
      *(_DWORD *)(v19 + 20) = *(_DWORD *)(v20 + 28);
      *(_OWORD *)(v19 + 4) = v21;
      long long v22 = *(_OWORD *)(v20 + 32);
      *(_DWORD *)(v19 + 40) = *(_DWORD *)(v20 + 48);
      *(_OWORD *)(v19 + --*(_WORD *)(this + 24) = v22;
      int8x8_t result = vrev32_s8(*(int8x8_t *)(a1 + 236));
      *(int8x8_t *)(v19 + 44) = result;
      *(_DWORD *)(v19 + 56) = *(_DWORD *)v20 | 0x80000000;
      ++v17;
      v16 += 60;
    }
    while (v18 != v17);
  }
  return result;
}

void MEOWSVDDistances::ComputeNorm(uint64_t *a1, void *a2, __n128 a3)
{
  uint64_t v3 = *((__int16 *)a1 + 67);
  if (*((_WORD *)a1 + 67))
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    uint64_t v25 = a1[2];
    uint64_t v24 = *a1;
    unsigned int v6 = bswap32(*((_DWORD *)a1 + 59));
    unsigned int v7 = bswap32(*((_DWORD *)a1 + 60));
    uint64_t v23 = *a1 + 56 * *((__int16 *)a1 + 67);
    double v8 = 0.0;
    a3.n128_u64[0] = 0;
    __n128 v26 = a3;
    do
    {
      uint64_t v9 = v24 + 56 * v4;
      int v35 = *(_DWORD *)(v9 + 8);
      long long v36 = *(_OWORD *)(v9 + 12);
      int v37 = *(_DWORD *)(v9 + 28);
      long long v38 = *(_OWORD *)(v9 + 32);
      int v39 = *(_DWORD *)(v9 + 48);
      unsigned int v40 = v6;
      unsigned int v41 = v7;
      unsigned int v42 = *(_DWORD *)v9 | 0x80000000;
      uint64_t v10 = v23;
      uint64_t v11 = v25 - v3;
      if (v25 != v3)
      {
        do
        {
          int v27 = *(_DWORD *)(v10 + 8);
          long long v28 = *(_OWORD *)(v10 + 12);
          int v29 = *(_DWORD *)(v10 + 28);
          long long v30 = *(_OWORD *)(v10 + 32);
          int v31 = *(_DWORD *)(v10 + 48);
          unsigned int v32 = v6;
          unsigned int v33 = v7;
          unsigned int v34 = *(_DWORD *)v10 | 0x80000000;
          float v12 = MEOWRawSVDDistance((float *)&v35, (float *)&v27);
          if (v12 != 0.0)
          {
            long double v13 = log(v12);
            v14.n128_u64[1] = v26.n128_u64[1];
            v14.n128_f64[0] = v26.n128_f64[0] + v13;
            __n128 v26 = v14;
            double v8 = v8 + v13 * v13;
            ++v5;
          }
          v10 += 56;
          --v11;
        }
        while (v11);
      }
      ++v4;
    }
    while (v4 != v3);
  }
  else
  {
    unint64_t v5 = 0;
    v26.n128_u64[0] = 0;
    double v8 = 0.0;
  }
  v15.f64[0] = (double)v5;
  __asm { FMOV            V2.2D, #1.0 }
  *(void *)&_Q2.f64[0] = v26.n128_u64[0];
  v15.f64[1] = sqrt(((double)v5 * v8 - v26.n128_f64[0] * v26.n128_f64[0]) / (((double)v5 + -1.0) * (double)v5));
  *(uint64_t *)((char *)a1 + 236) = (uint64_t)vrev32_s8((int8x8_t)vcvt_f32_f64(vdivq_f64(_Q2, v15)));
  if (a2) {
    *a2 = *(uint64_t *)((char *)a1 + 236);
  }
}

void MEOWSVDDistanceEncoder::MEOWSVDDistanceEncoder(MEOWSVDDistanceEncoder *this, int a2)
{
}

void sub_1DA4B1BC8(_Unwind_Exception *a1)
{
  MEOWTreeBase::~MEOWTreeBase(v3);
  MEOWVectorBase::~MEOWVectorBase(v2);
  SLML::Storage<float>::RemoveReference(v1[11]);
  SLML::Storage<float>::RemoveReference(v1[8]);
  SLML::Storage<float>::RemoveReference(v1[5]);
  SLML::Storage<float>::RemoveReference(v1[2]);
  _Unwind_Resume(a1);
}

void sub_1DA4B1C24()
{
}

uint64_t MEOWSVDDistanceEncoder::AddCutPoint(MEOWSVDDistanceEncoder *this, unsigned int a2, int a3, int a4)
{
  int v7 = *((unsigned __int8 *)this + 429);
  unsigned int v8 = *((unsigned __int8 *)this + 428);
  if (v7 != a3 || v8 < a2)
  {
    __int16 v10 = *((_WORD *)this + 60);
    do
    {
      LOBYTE(v8) = v8 + 1;
      if (v8 == 50)
      {
        LOBYTE(v8) = 0;
        LOBYTE(v7) = v7 == 0;
        *((unsigned char *)this + 429) = v7;
        *((_WORD *)this + 162) = v10;
      }
      uint64_t v11 = (char *)this + 2 * v8;
      float v12 = v11 + 326;
      long double v13 = v11 + 224;
      if (!(_BYTE)v7) {
        long double v13 = v12;
      }
      *(_WORD *)long double v13 = v10;
    }
    while (v7 != a3 || a2 > v8);
    *((unsigned char *)this + 428) = v8;
  }
  MEOWVectorBase::Append((void *)this + 13);
  *(_DWORD *)(*((void *)this + 13) + 4 * *((void *)this + 15) - 4) = a4;
  int v23 = a3 | (2 * a4);
  long long v21 = 0uLL;
  long long v22 = 0;
  MEOWTreeBase::LowerBound((uint64_t)this + 136, (uint64_t)&v23, (unsigned __int16 *)&v21);
  LOWORD(v19) = 0;
  if (MEOWTreeIterBase::Equal((MEOWTreeIterBase *)&v21, (const MEOWTreeIterBase *)&v19))
  {
    int v14 = v23;
  }
  else
  {
    int v14 = v23;
    if (*v22 == v23) {
      return 0;
    }
  }
  long long v17 = v21;
  uint64_t v18 = v22;
  int v16 = *((_DWORD *)this + 8) / (*((_DWORD *)this + 1) * *((unsigned __int16 *)this + 218));
  int v19 = v14;
  uint64_t v20 = v16;
  MEOWTreeBase::Insert((MEOWSVDDistanceEncoder *)((char *)this + 136), &v19, (const MEOWTreeIterBase *)&v17);
  MEOWVectorBase::Append((void *)this + 24);
  *(_DWORD *)(*((void *)this + 24) + 4 * *((void *)this + 26) - 4) = a4;
  return 1;
}

uint64_t MEOWSVDDistanceEncoder::EndEncoding(uint64_t this)
{
  __int16 v1 = *(_WORD *)(this + 120);
  if (v1)
  {
    unint64_t v2 = *(unsigned __int8 *)(this + 428);
    if (v2 <= 0x31)
    {
      uint64_t v3 = 2 * v2;
      do
      {
        *(_WORD *)(this + 328 + v3) = v1;
        v3 += 2;
      }
      while (v3 != 100);
      *(unsigned char *)(this + 428) = 50;
    }
  }
  else
  {
    *(_OWORD *)(this + 2--*(_WORD *)(this + 24) = 0u;
    this += 224;
    *(_OWORD *)(this + 188) = 0u;
    *(_OWORD *)(this + 160) = 0u;
    *(_OWORD *)(this + 176) = 0u;
    *(_OWORD *)(this + 128) = 0u;
    *(_OWORD *)(this + 144) = 0u;
    *(_OWORD *)(this + 96) = 0u;
    *(_OWORD *)(this + 112) = 0u;
    *(_OWORD *)(this + 64) = 0u;
    *(_OWORD *)(this + 80) = 0u;
    *(_OWORD *)(this + 32) = 0u;
    *(_OWORD *)(this + 48) = 0u;
    *(_OWORD *)(this + 16) = 0u;
  }
  return this;
}

size_t MEOWSVDDistanceEncoder::Encode(uint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, char a6, int a7)
{
  size_t result = MEOWSVDDistanceEncoder::AddCutPoint((MEOWSVDDistanceEncoder *)a1, a2, a3, a7);
  if (result)
  {
    char v62 = a6;
    unsigned int v13 = *(unsigned __int16 *)(a1 + 436);
    int v14 = 6 - v13;
    if (v13 > 6) {
      int v14 = 7 - v13;
    }
    if (*(_WORD *)(a1 + 436))
    {
      unint64_t v15 = 0;
      int v16 = *(int *)(a1 + 4) >> 1;
      uint64_t v17 = a4 + 12 * (v14 >> 1);
      uint64_t v18 = v16;
      uint64_t v61 = v17;
      uint64_t v57 = v16;
      if (a3) {
        uint64_t v18 = 0;
      }
      uint64_t v59 = v18;
      int v65 = *(int *)(a1 + 4) >> 1;
      size_t v58 = 4 * v16;
      uint64_t v60 = a5;
      do
      {
        int v19 = (int *)(v61 + 12 * v15);
        uint64_t v20 = *(int *)(a1 + 4);
        uint64_t v21 = v19[1];
        if ((int)v20 >= (int)v21) {
          int v22 = v19[1];
        }
        else {
          int v22 = *(_DWORD *)(a1 + 4);
        }
        if ((int)v20 >= v19[4]) {
          int v23 = v19[4];
        }
        else {
          int v23 = *(_DWORD *)(a1 + 4);
        }
        int v24 = *(_DWORD *)(a1 + 32);
        SLML::Vector<float>::push_back((int *)(a1 + 32), 0.0);
        int v25 = *(_DWORD *)(a1 + 4) + v24;
        if (*(_DWORD *)(*(void *)(a1 + 40) + 12) < v25) {
          SLML::Vector<float>::ResizeStorage();
        }
        int v26 = v22 >> 1;
        float v63 = v19 + 3;
        int v64 = v23 >> 1;
        *(_DWORD *)(a1 + 32) = v25;
        int v27 = (char *)(*(void *)(a1 + 48) + 4 * *(_DWORD *)(a1 + 36) * v24);
        uint64_t v28 = v65 - (v22 - (v22 >> 1));
        bzero(v27, 4 * v28);
        uint64_t v29 = *v19;
        if (v62)
        {
          if (v22 != v26)
          {
            unsigned int v42 = (__int16 *)(v60 + 2 * v29 + 2 * v26);
            float v43 = (float *)&v27[4 * v28];
            if (v21 >= v20) {
              uint64_t v44 = v20;
            }
            else {
              uint64_t v44 = v21;
            }
            uint64_t v45 = 2 * v44 - 2 * v26;
            do
            {
              int v46 = *v42++;
              *v43++ = (float)v46;
              v45 -= 2;
            }
            while (v45);
          }
          int v35 = v23;
          int v36 = v22 - (v22 >> 1);
          int v37 = v23 >> 1;
          if (v23 >= 2)
          {
            float v47 = (__int16 *)(v60 + 2 * *v63);
            float v48 = (float *)&v27[4 * v57];
            uint64_t v49 = 2 * v64;
            do
            {
              int v50 = *v47++;
              *v48++ = (float)v50;
              v49 -= 2;
            }
            while (v49);
          }
        }
        else
        {
          if (v22 != v26)
          {
            long long v30 = (unsigned __int16 *)(v60 + 2 * v29 + 2 * v26);
            int v31 = (float *)&v27[4 * v28];
            if (v21 >= v20) {
              uint64_t v32 = v20;
            }
            else {
              uint64_t v32 = v21;
            }
            uint64_t v33 = 2 * v32 - 2 * v26;
            do
            {
              unsigned int v34 = *v30++;
              *v31++ = (float)((int)bswap32(v34) >> 16);
              v33 -= 2;
            }
            while (v33);
          }
          int v35 = v23;
          int v36 = v22 - (v22 >> 1);
          int v37 = v23 >> 1;
          if (v23 >= 2)
          {
            long long v38 = (unsigned __int16 *)(v60 + 2 * *v63);
            int v39 = (float *)&v27[4 * v57];
            uint64_t v40 = 2 * v64;
            do
            {
              unsigned int v41 = *v38++;
              *v39++ = (float)((int)bswap32(v41) >> 16);
              v40 -= 2;
            }
            while (v40);
          }
        }
        bzero(&v27[4 * *(int *)(a1 + 4) + -4 * (v65 - (v35 >> 1))], 4 * (v65 - (v35 >> 1)));
        float v51 = sqrtf(cblas_sdot(v36 + v37, (const float *)&v27[4 * v28], 1, (const float *)&v27[4 * v28], 1)/ (float)(v36 + v37));
        cblas_sscal(v36 + v37, 1.0 / v51, (float *)&v27[4 * v28], 1);
        size_t result = (size_t)SLML::Vector<float>::push_back((int *)(a1 + 80), v51);
        unint64_t v52 = *(unsigned __int16 *)(a1 + 436);
        if (v15 == v52 >> 1)
        {
          int v53 = *(_DWORD *)(a1 + 56);
          SLML::Vector<float>::push_back((int *)(a1 + 56), 0.0);
          if (*(_DWORD *)(*(void *)(a1 + 64) + 12) < v53 + v65) {
            SLML::Vector<float>::ResizeStorage();
          }
          *(_DWORD *)(a1 + 56) = v53 + v65;
          size_t result = (size_t)memcpy((void *)(*(void *)(a1 + 72) + 4 * *(_DWORD *)(a1 + 60) * v53), &v27[4 * v59], v58);
          unint64_t v52 = *(unsigned __int16 *)(a1 + 436);
        }
        ++v15;
        if (v36 <= v37) {
          int v54 = v37;
        }
        else {
          int v54 = v36;
        }
        if (*(_DWORD *)(a1 + 432) <= 2 * v54) {
          int v55 = 2 * v54;
        }
        else {
          int v55 = *(_DWORD *)(a1 + 432);
        }
        *(_DWORD *)(a1 + 432) = v55;
      }
      while (v15 < v52);
    }
  }
  else
  {
    float v56 = (FILE *)*MEMORY[0x1E4F143C8];
    return fwrite("Duplicate cutpoint, omitted\n", 0x1CuLL, 1uLL, v56);
  }
  return result;
}

int *SLML::Vector<float>::push_back(int *result, float a2)
{
  int v2 = *result;
  if (*result == *(_DWORD *)(*((void *)result + 1) + 12)) {
    SLML::Vector<float>::ResizeStorage();
  }
  uint64_t v3 = *((void *)result + 2);
  *size_t result = v2 + 1;
  *(float *)(v3 + 4 * v2) = a2;
  return result;
}

unint64_t MEOWCutPointTree::FindInPage(MEOWCutPointTree *this, unsigned int *a2, _DWORD *a3, unint64_t a4, BOOL *a5)
{
  if (a4)
  {
    unint64_t v5 = 0;
    unsigned int v6 = *a2;
    do
    {
      unint64_t result = (a4 + v5) >> 1;
      unsigned int v8 = a3[4 * result];
      if (v8 >= v6)
      {
        if (v8 <= v6)
        {
          BOOL v9 = 1;
          goto LABEL_11;
        }
        a4 = (a4 + v5) >> 1;
      }
      else
      {
        unint64_t v5 = result + 1;
      }
    }
    while (v5 < a4);
    BOOL v9 = 0;
    unint64_t result = v5;
  }
  else
  {
    BOOL v9 = 0;
    unint64_t result = 0;
  }
LABEL_11:
  *a5 = v9;
  return result;
}

void MEOWSVDDistanceEncoder::ComputeDistances(MEOWSVDDistanceEncoder *this, __sFILE *a2)
{
  __int16 v2 = *((_WORD *)this + 60);
  if (v2)
  {
    unint64_t v3 = *((unsigned __int8 *)this + 428);
    if (v3 <= 0x31)
    {
      uint64_t v4 = 2 * v3;
      do
      {
        *(_WORD *)((char *)this + v4 + 328) = v2;
        v4 += 2;
      }
      while (v4 != 100);
      *((unsigned char *)this + 428) = 50;
    }
  }
  else
  {
    *((_OWORD *)this + 14) = 0u;
    *(_OWORD *)((char *)this + 412) = 0u;
    *((_OWORD *)this + --*(_WORD *)(this + 24) = 0u;
    *((_OWORD *)this + 25) = 0u;
    *((_OWORD *)this + 22) = 0u;
    *((_OWORD *)this + 23) = 0u;
    *((_OWORD *)this + 20) = 0u;
    *((_OWORD *)this + 21) = 0u;
    *((_OWORD *)this + 18) = 0u;
    *((_OWORD *)this + 19) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 15) = 0u;
  }
  unsigned int v5 = (*((_DWORD *)this + 108) + 3) & 0xFFFFFFFC;
  *((_DWORD *)this + 108) = v5;
  __CLPK_integer v6 = *((_DWORD *)this + 1);
  __uint64_t m = *((_DWORD *)this + 8) / v6;
  __CLPK_integer __n = v6;
  __CLPK_integer __lda = (__m + 3) & 0xFFFFFFFC;
  SLML::Vector<float>::Vector(&v7, __lda * v5);
}

void sub_1DA4B2F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  MEMORY[0x1E016FF00](v34, 0x1080C400B0AA978);
  SLML::Storage<float>::RemoveReference(a34);
  SLML::Storage<float>::RemoveReference(*(void *)(v35 - 176));
  SLML::Storage<float>::RemoveReference(*(void *)(v35 - 152));
  SLML::Storage<float>::RemoveReference(*(void *)(v35 - 120));
  _Unwind_Resume(a1);
}

float *scale_norm(float *result, float *a2, uint64_t a3, const float *a4)
{
  uint64_t v4 = 0;
  float v5 = 0.0;
  __CLPK_integer v6 = result;
  do
  {
    float v7 = *(float *)(a3 + v4) * *v6;
    *__CLPK_integer v6 = v7;
    float v5 = v5 + (float)(v7 * v7);
    v6 += (int)a2;
    v4 += 4;
  }
  while (v4 != 20);
  float v8 = 1.0 / sqrtf(v5);
  if (*result < 0.0) {
    float v8 = -v8;
  }
  uint64_t v9 = 5;
  do
  {
    *unint64_t result = v8 * *result;
    result += (int)a2;
    --v9;
  }
  while (v9);
  return result;
}

unsigned __int16 *MEOWSVDDistanceEncoder::UnpackCookie(unsigned __int16 *a1, float *a2)
{
  unint64_t v2 = 0;
  unsigned int v4 = *a1;
  unint64_t result = a1 + 6;
  *a2 = (float)(bswap32(v4) >> 16);
  uint64_t v5 = 0x7FFFFFFFFFFFFFFBLL;
  do
  {
    __CLPK_integer v6 = &a2[v2 / 2];
    *((_DWORD *)v6 + 1) = bswap32(*(_DWORD *)&result[v2]);
    v6[6] = (float)((int)bswap32(result[v5]) >> 16) / 32767.0;
    v2 += 2;
    ++v5;
  }
  while (v5 * 2);
  return result;
}

void MEOWDistPrecompStart()
{
}

void sub_1DA4B30B8(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A0C40C08CCBE5);
  _Unwind_Resume(a1);
}

double MEOWDistPrecompAddCandidates(unsigned int a1, unsigned int a2, int a3, char a4, uint64_t a5, uint64_t a6)
{
  return MEOWDistPrecompute::AddCandidates(sMEOWDistPrecompute, a1, a2, a3, a4, a5, a6);
}

double MEOWDistPrecompute::AddCandidates(uint64_t a1, unsigned int a2, unsigned int a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = 0;
  float v12 = (MEOWVectorBase *)(a1 + 160400);
  uint64_t v13 = *(void *)(a1 + 160416);
  LODWORD(v24[0]) = a4;
  *((void *)&v24[0] + 1) = v13;
  do
  {
    int v14 = *(_DWORD *)(a6 + 4 * v11 + 4);
    *(_WORD *)((char *)&v24[1] + v11) = v14;
    int v15 = (__int16)v14;
    MEOWVectorBase::Append(v12);
    uint64_t v16 = *(void *)v12;
    *(_WORD *)(*(void *)v12 + 2 * *((void *)v12 + 2) - 2) = 0;
    unint64_t v17 = v13 + v15;
    if (*((void *)v12 + 3) < v17)
    {
      MEOWVectorBase::Allocate(v12, v13 + v15, 1);
      uint64_t v16 = *(void *)v12;
    }
    *((void *)v12 + 2) = v17;
    memcpy((void *)(v16 + 2 * v13), (const void *)(a7 + 2 * *(int *)(a6 + 4 * v11)), 2 * v15);
    v11 += 2;
    v13 += v15;
  }
  while (v11 != 12);
  if (a5) {
    uint64_t v18 = (void *)(a1 + 1600 * a2 + 32 * a3);
  }
  else {
    uint64_t v18 = (void *)(a1 + 1600 * a2 + 32 * a3 + 80000);
  }
  MEOWVectorBase::Append(v18);
  uint64_t v19 = *v18 + 32 * v18[2];
  double result = *(double *)v24;
  long long v21 = v24[1];
  *(_OWORD *)(v19 - 32) = v24[0];
  *(_OWORD *)(v19 - 16) = v21;
  return result;
}

void MEOWDistPrecompCompute()
{
}

void MEOWDistPrecompute::Compute(MEOWDistPrecompute *this)
{
}

void sub_1DA4B3378(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A0C40ED9C5895);
  _Unwind_Resume(a1);
}

void MEOWDistPrecompGetInfo(MEOWPhon *this, MEOWPhon *a2, int a3, _WORD *a4, _WORD *a5)
{
}

void MEOWDistPrecompute::GetInfo(uint64_t a1, MEOWPhon *this, MEOWPhon *a3, int a4, _WORD *a5, _WORD *a6)
{
  uint64_t v8 = a3;
  uint64_t v9 = (int **)(a1 + 1600 * this + 32 * a3);
  __int16 v10 = v9[2];
  if (v10)
  {
    uint64_t v12 = 0;
    uint64_t v13 = this;
    int v14 = *v9;
    uint64_t v15 = -(uint64_t)v10;
    while (1)
    {
      int v16 = *v14;
      v14 += 8;
      if (v16 == a4) {
        break;
      }
      if (v15 == --v12) {
        goto LABEL_5;
      }
    }
    uint64_t v20 = a1 + 160000;
    uint64_t v21 = *(void *)(a1 + 160000 + 8 * this);
    uint64_t v22 = *(void *)v21 + 56 * (*(__int16 *)(v21 + 2 * a3 + 134) - v12);
    int v26 = *(_DWORD *)(v22 + 8);
    long long v27 = *(_OWORD *)(v22 + 12);
    int v28 = *(_DWORD *)(v22 + 28);
    long long v29 = *(_OWORD *)(v22 + 32);
    int v30 = *(_DWORD *)(v22 + 48);
    int8x8_t v31 = vrev32_s8(*(int8x8_t *)(v21 + 236));
    unsigned int v32 = *(_DWORD *)v22 | 0x80000000;
    MEOWDistPrecompute::CookieToInfo(a1, (float *)&v26, a5);
    uint64_t v23 = *(void *)(v20 + 8 * v8);
    uint64_t v24 = *(void *)v23 + 56 * (*(__int16 *)(v23 + 2 * v13 + 32) - v12);
    int v26 = *(_DWORD *)(v24 + 8);
    long long v27 = *(_OWORD *)(v24 + 12);
    int v28 = *(_DWORD *)(v24 + 28);
    long long v29 = *(_OWORD *)(v24 + 32);
    int v30 = *(_DWORD *)(v24 + 48);
    int8x8_t v31 = vrev32_s8(*(int8x8_t *)(v23 + 236));
    unsigned int v32 = *(_DWORD *)v24 | 0x80000000;
    MEOWDistPrecompute::CookieToInfo(v25, (float *)&v26, a6);
  }
  else
  {
LABEL_5:
    unint64_t v17 = (FILE *)*MEMORY[0x1E4F143C8];
    uint64_t v18 = MEOWPhon::Name(this);
    uint64_t v19 = MEOWPhon::Name(a3);
    fprintf(v17, "Didn't find %s-%s %d\n", v18, v19, a4);
  }
}

void MEOWDistPrecompGetNorm(uint64_t a1, __n128 a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = sMEOWDistPrecompute + 160000;
  do
  {
    MEOWSVDDistances::ComputeNorm(*(uint64_t **)(v4 + v3), (void *)(a1 + v3), a2);
    v3 += 8;
  }
  while (v3 != 400);
}

void MEOWDistPrecompute::GetNorm(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v4 = 0;
  uint64_t v5 = a1 + 160000;
  do
  {
    MEOWSVDDistances::ComputeNorm(*(uint64_t **)(v5 + v4), (void *)(a2 + v4), a3);
    v4 += 8;
  }
  while (v4 != 400);
}

uint64_t MEOWDistPrecompEnd()
{
  uint64_t result = sMEOWDistPrecompute;
  if (sMEOWDistPrecompute)
  {
    MEOWDistPrecompute::~MEOWDistPrecompute((void **)sMEOWDistPrecompute);
    JUMPOUT(0x1E016FF00);
  }
  return result;
}

void MEOWDistPrecompute::MEOWDistPrecompute(MEOWDistPrecompute *this)
{
  uint64_t v2 = 0;
  uint64_t v3 = 2500;
  do
  {
    MEOWVectorBase::MEOWVectorBase((MEOWDistPrecompute *)((char *)this + v2), 32);
    v2 += 32;
    --v3;
  }
  while (v3);
  for (uint64_t i = 0; i != 80000; i += 32)
    MEOWVectorBase::MEOWVectorBase((MEOWDistPrecompute *)((char *)this + i + 80000), 32);
  MEOWVectorBase::MEOWVectorBase((MEOWDistPrecompute *)((char *)this + 160400), 2);
  *((_OWORD *)this + 10023) = 0u;
  *((_OWORD *)this + 100--*(_WORD *)(this + 24) = 0u;
  *((_OWORD *)this + 10021) = 0u;
  *((_OWORD *)this + 10022) = 0u;
  *((_OWORD *)this + 10019) = 0u;
  *((_OWORD *)this + 10020) = 0u;
  *((_OWORD *)this + 10017) = 0u;
  *((_OWORD *)this + 10018) = 0u;
  *((_OWORD *)this + 10015) = 0u;
  *((_OWORD *)this + 10016) = 0u;
  *((_OWORD *)this + 10013) = 0u;
  *((_OWORD *)this + 10014) = 0u;
  *((_OWORD *)this + 10011) = 0u;
  *((_OWORD *)this + 10012) = 0u;
  *((_OWORD *)this + 10009) = 0u;
  *((_OWORD *)this + 10010) = 0u;
  *((_OWORD *)this + 10007) = 0u;
  *((_OWORD *)this + 10008) = 0u;
  *((_OWORD *)this + 10005) = 0u;
  *((_OWORD *)this + 10006) = 0u;
  *((_OWORD *)this + 10003) = 0u;
  *((_OWORD *)this + 10004) = 0u;
  *((_OWORD *)this + 10001) = 0u;
  *((_OWORD *)this + 10002) = 0u;
  *((_OWORD *)this + 10000) = 0u;
}

void sub_1DA4B3718(_Unwind_Exception *a1)
{
  uint64_t v4 = (void **)(v1 + 159968);
  uint64_t v5 = -80000;
  do
  {
    MEOWVectorBase::~MEOWVectorBase(v4);
    uint64_t v4 = (void **)(v6 - 32);
    v5 += 32;
  }
  while (v5);
  float v7 = (void **)(v1 + 79968);
  do
  {
    MEOWVectorBase::~MEOWVectorBase(v7);
    float v7 = (void **)(v8 - 32);
    v2 += 32;
  }
  while (v2);
  _Unwind_Resume(a1);
}

void MEOWDistPrecompute::~MEOWDistPrecompute(void **this)
{
  uint64_t v2 = 0;
  uint64_t v3 = (char *)(this + 20000);
  do
  {
    uint64_t v4 = *(void ***)&v3[v2];
    if (v4)
    {
      MEOWVectorBase::~MEOWVectorBase(v4);
      MEMORY[0x1E016FF00]();
    }
    v2 += 8;
  }
  while (v2 != 400);
  MEOWVectorBase::~MEOWVectorBase(this + 20050);
  uint64_t v5 = this + 19996;
  uint64_t v6 = 0x1FFFFFFFFFFFD8F0;
  do
  {
    MEOWVectorBase::~MEOWVectorBase(v5);
    uint64_t v5 = (void **)(v7 - 32);
    v6 += 4;
  }
  while (v6 * 8);
  do
  {
    MEOWVectorBase::~MEOWVectorBase(&this[v6 + 9996]);
    v6 -= 4;
  }
  while (v6 != -10000);
}

size_t MEOWDistPrecompute::Encode(size_t result, uint64_t a2, void *a3, unsigned int a4, int a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a3[2])
  {
    unint64_t v9 = 0;
    __int16 v10 = (uint64_t *)(result + 160400);
    uint64_t v11 = 16;
    do
    {
      uint64_t v12 = 0;
      int v13 = *(_DWORD *)(*a3 + 32 * v9 + 8);
      int v14 = (__int16 *)(*a3 + v11);
      do
      {
        int v15 = *v14++;
        int v16 = (int *)&v17[v12];
        *int v16 = v13;
        v16[1] = v15;
        v13 += v15;
        v12 += 12;
      }
      while (v12 != 72);
      uint64_t result = MEOWSVDDistanceEncoder::Encode(a2, a4, a5, (uint64_t)v17, *v10, 1, v13);
      ++v9;
      v11 += 32;
    }
    while (v9 < a3[2]);
  }
  return result;
}

void MEOWDistPrecompute::CookieToInfo(uint64_t a1, float *a2, _WORD *a3)
{
  unint64_t v3 = 0;
  *a3 = __rev16((int)*a2);
  uint64_t v4 = a3 + 6;
  uint64_t v5 = 0x7FFFFFFFFFFFFFFBLL;
  do
  {
    *(_DWORD *)&v4[v3 / 2] = bswap32(LODWORD(a2[v3 / 4 + 1]));
    v4[v5] = bswap32((int)(float)(a2[v3 / 4 + 6] * 32767.0)) >> 16;
    v3 += 4;
    ++v5;
  }
  while (v5 * 2);
}

void CreateMEOWSVDDistanceEncoder(void)
{
}

void sub_1DA4B3A10(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A0C40ED9C5895);
  _Unwind_Resume(a1);
}

void MEOWCutPointTree::~MEOWCutPointTree(MEOWCutPointTree *this)
{
  MEOWTreeBase::~MEOWTreeBase(this);

  JUMPOUT(0x1E016FF00);
}

void SLML::Vector<float>::Vector(_DWORD *a1, int a2)
{
  *a1 = a2;
  operator new();
}

void sub_1DA4B3B00(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x1080C401B11B02ALL);
  _Unwind_Resume(a1);
}

uint64_t SLML::Storage<float>::RemoveReference(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 4) - 1;
  *(_DWORD *)(result + 4) = v1;
  if (result && !v1)
  {
    if (*(unsigned char *)result)
    {
      uint64_t v2 = *(void *)(result + 16);
      if (v2) {
        MEMORY[0x1E016FEE0](v2, 0x1000C8052888210);
      }
    }
    JUMPOUT(0x1E016FF00);
  }
  return result;
}

void SLML::Vector<float>::ResizeStorage()
{
}

void sub_1DA4B3C58(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x1080C401B11B02ALL);
  _Unwind_Resume(a1);
}

MEOWVectorBase *MEOWPath::MEOWPath(MEOWVectorBase *a1, int *a2)
{
  MEOWVectorBase::MEOWVectorBase(a1, 8, *a2);
  uint64_t v4 = *a2;
  if ((int)v4 >= 1)
  {
    uint64_t v5 = (_DWORD *)*((void *)a2 + 2);
    uint64_t v6 = (_WORD *)(*(void *)a1 + 4);
    uint64_t v7 = 4 * a2[1];
    do
    {
      *((_DWORD *)v6 - 1) = *v5;
      *uint64_t v6 = -1;
      v6 += 4;
      uint64_t v5 = (_DWORD *)((char *)v5 + v7);
      --v4;
    }
    while (v4);
  }
  MEOWPath::SortNodes((uint64_t *)a1);
  return a1;
}

uint64_t *MEOWPath::SortNodes(uint64_t *this)
{
  *((_DWORD *)this + 8) = 0;
  uint64_t v1 = *this;
  *(_WORD *)(*this + 6) = -1;
  unint64_t v2 = this[2];
  if (v2 >= 2)
  {
    int v3 = 0;
    for (uint64_t i = 1; i != v2; ++i)
    {
      float v5 = *(float *)(v1 + 8 * i);
      int v6 = v3;
      if (v5 <= *(float *)(v1 + 8 * v3))
      {
        *(_WORD *)(v1 + 8 * i + 6) = v3;
        *((_DWORD *)this + 8) = i;
        int v3 = i;
      }
      else
      {
        do
        {
          uint64_t v7 = v1 + 8 * v6;
          int v10 = *(__int16 *)(v7 + 6);
          uint64_t v8 = (_WORD *)(v7 + 6);
          unsigned __int16 v9 = v10;
          if (v10 < 0) {
            break;
          }
          int v6 = v9;
        }
        while (v5 > *(float *)(v1 + 8 * v9));
        *(_WORD *)(v1 + 8 * i + 6) = v9;
        *uint64_t v8 = i;
      }
    }
  }
  return this;
}

MEOWVectorBase *MEOWPath::MEOWPath(MEOWVectorBase *a1, uint64_t *a2, uint64_t a3, void *a4, int *a5, float a6)
{
  MEOWVectorBase::MEOWVectorBase(a1, 8, *a5);
  if (*a5 >= 1)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = *a4 + 60 * v11;
      int v13 = *((_DWORD *)a2 + 8);
      if ((MTBEDebugFlags::sMEOWDebug & 0x200) != 0) {
        SLML::Vector<float>::Vector(&v24, *(_DWORD *)(a3 + 16));
      }
      float v14 = 3.4028e38;
      if ((v13 & 0x80000000) == 0)
      {
        unsigned int v15 = *((_DWORD *)a2 + 8);
        do
        {
          uint64_t v16 = *a2;
          float v17 = *(float *)(*a2 + 8 * v15);
          if (v17 >= v14) {
            break;
          }
          uint64_t v18 = v15;
          MEOWDistance(*(void *)a3 + 60 * v15, v12);
          float v20 = v17 + (float)(v19 * a6);
          if (v20 < v14)
          {
            float v14 = v20;
            LOWORD(v13) = v18;
          }
          unsigned int v15 = *(unsigned __int16 *)(v16 + 8 * v18 + 6);
        }
        while ((*(__int16 *)(v16 + 8 * v18 + 6) & 0x80000000) == 0);
      }
      uint64_t v21 = *(void *)a1 + 8 * v11;
      *(float *)uint64_t v21 = v14 + *(float *)(*((void *)a5 + 2) + 4 * a5[1] * (int)v11);
      *(_WORD *)(v21 + 4) = v13;
      ++v11;
    }
    while (v11 < *a5);
  }
  MEOWPath::SortNodes((uint64_t *)a1);
  return a1;
}

void sub_1DA4B4008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  SLML::Storage<float>::RemoveReference(a12);
  MEOWVectorBase::~MEOWVectorBase(v12);
  _Unwind_Resume(a1);
}

uint64_t *MEOWPath::Force(uint64_t *this, int a2)
{
  uint64_t v2 = this[2];
  if ((int)v2 > a2)
  {
    *((_DWORD *)this + 8) = a2;
    uint64_t v3 = *this;
    uint64_t v4 = *this + 8 * a2;
    *(_WORD *)(v4 + 6) = -1;
    float v5 = (_WORD *)(v4 + 6);
    if ((int)v2 >= 1)
    {
      uint64_t v6 = 0;
      __int16 v7 = -1;
      do
      {
        if (a2 != v6)
        {
          *(_DWORD *)uint64_t v3 = 2139095040;
          *(_WORD *)(v3 + 6) = v7;
          __int16 v7 = v6;
          *float v5 = v6;
        }
        ++v6;
        v3 += 8;
      }
      while (v2 != v6);
    }
  }
  return this;
}

uint64_t *MEOWPath::Veto(uint64_t *this, int a2)
{
  if (*((_DWORD *)this + 4) > a2)
  {
    *(_DWORD *)(*this + 8 * a2) = 2139095040;
    return MEOWPath::SortNodes(this);
  }
  return this;
}

uint64_t std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,SLML::Vector<float>::iterator>(uint64_t result, float **a2, uint64_t a3)
{
  if (*a2 != *(float **)a3)
  {
    float v5 = (float **)result;
    do
    {
      uint64_t result = SLML::operator-(a3, (uint64_t)v5);
      if ((unint64_t)result < 2) {
        break;
      }
      if (result == 3)
      {
        uint64_t v34 = *((int *)v5 + 2);
        int v53 = *v5;
        int v54 = v34;
        float v51 = &v53[v34];
        int v52 = v34;
        uint64_t v35 = *(int *)(a3 + 8);
        int v36 = (float *)(*(void *)a3 - 4 * v35);
        *(void *)a3 = v36;
        uint64_t v49 = v36;
        int v50 = v35;
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,SLML::Vector<float>::iterator>(&v53, &v51, &v49);
      }
      if (result == 2)
      {
        int v37 = (float *)(*(void *)a3 - 4 * *(int *)(a3 + 8));
        *(void *)a3 = v37;
        float v38 = **v5;
        if (*v37 < v38)
        {
          **float v5 = *v37;
          *int v37 = v38;
        }
        return result;
      }
      if (result <= 7)
      {
        float v47 = *v5;
        int v48 = *((_DWORD *)v5 + 2);
        uint64_t v45 = *(void *)a3;
        int v46 = *(_DWORD *)(a3 + 8);
        return std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,SLML::Vector<float>::iterator>((uint64_t)&v47, (uint64_t)&v45);
      }
      int v6 = *((_DWORD *)v5 + 2);
      uint64_t v7 = *(void *)a3;
      uint64_t v8 = *(int *)(a3 + 8);
      unsigned __int16 v9 = &(*v5)[(int)(v6 * ((unint64_t)result >> 1))];
      float v43 = *v5;
      int v44 = v6;
      unsigned int v41 = v9;
      int v42 = v6;
      int v10 = (float *)(v7 - 4 * v8);
      int v39 = v10;
      int v40 = v8;
      uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,SLML::Vector<float>::iterator>(&v43, &v41, &v39);
      uint64_t v11 = *v5;
      int v12 = *((_DWORD *)v5 + 2);
      uint64_t v13 = v12;
      float v14 = **v5;
      if (v14 < *v9)
      {
LABEL_11:
        uint64_t v16 = &v11[v12];
        if (v16 < v10)
        {
          while (1)
          {
            float v17 = *v9;
            while (1)
            {
              float v18 = *v16;
              if (*v16 >= v17) {
                break;
              }
              v16 += v12;
            }
            do
              v10 -= v8;
            while (*v10 >= v17);
            if (v16 >= v10) {
              break;
            }
            *uint64_t v16 = *v10;
            *int v10 = v18;
            uint64_t result = (result + 1);
            if (v9 == v16) {
              unsigned __int16 v9 = v10;
            }
            v16 += v12;
          }
        }
        if (v16 != v9)
        {
          float v19 = *v16;
          if (*v9 < *v16)
          {
            *uint64_t v16 = *v9;
            *unsigned __int16 v9 = v19;
            uint64_t result = (result + 1);
          }
        }
        float v20 = *a2;
        if (*a2 == v16) {
          return result;
        }
        if (!result)
        {
          if (v20 >= v16)
          {
            uint64_t v29 = v12;
            int v30 = v16;
            while (&v30[v29] != *(float **)a3)
            {
              BOOL v22 = v30[v12] < *v30;
              int v30 = (float *)((char *)v30 + v29 * 4);
              if (v22) {
                goto LABEL_25;
              }
            }
          }
          else
          {
            uint64_t v21 = v12;
            while (&v11[v21] != v16)
            {
              BOOL v22 = v11[v12] < *v11;
              uint64_t v11 = (float *)((char *)v11 + v21 * 4);
              if (v22) {
                goto LABEL_25;
              }
            }
          }
          return result;
        }
LABEL_25:
        if (v20 >= v16)
        {
          *float v5 = &v16[v12];
        }
        else
        {
          *(void *)a3 = v16;
          *(_DWORD *)(a3 + 8) = v12;
        }
      }
      else
      {
        while (1)
        {
          unsigned int v15 = (float *)(v7 - 8 * v8);
          if (v15 == v11) {
            break;
          }
          v7 -= 4 * v8;
          if (*v15 < *v9)
          {
            *uint64_t v11 = *v15;
            *(float *)(v7 - 4 * v8) = v14;
            uint64_t result = (result + 1);
            int v10 = (float *)(v7 - 4 * v8);
            goto LABEL_11;
          }
        }
        uint64_t v23 = &v11[v12];
        uint64_t v24 = *(int *)(a3 + 8);
        uint64_t v25 = (float *)(*(void *)a3 - 4 * v24);
        uint64_t v26 = 4 * v13;
        if (v14 >= *v25)
        {
          if (v23 == v25) {
            return result;
          }
          long long v27 = *v5;
          while (1)
          {
            float v28 = v27[v13];
            if (v14 < v28) {
              break;
            }
            long long v27 = (float *)((char *)v27 + v26);
            if (&v27[(unint64_t)v26 / 4] == v25) {
              return result;
            }
          }
          v27[v13] = *v25;
          *uint64_t v25 = v28;
          uint64_t v23 = &v27[2 * v13];
        }
        if (v23 == v25) {
          return result;
        }
        uint64_t v31 = -4 * v24;
        while (1)
        {
          float v32 = *v11;
          while (1)
          {
            float v33 = *v23;
            if (v32 < *v23) {
              break;
            }
            uint64_t v23 = (float *)((char *)v23 + v26);
          }
          do
            uint64_t v25 = (float *)((char *)v25 + v31);
          while (v32 < *v25);
          if (v23 >= v25) {
            break;
          }
          *uint64_t v23 = *v25;
          *uint64_t v25 = v33;
          v23 += v13;
        }
        if (*a2 < v23) {
          return result;
        }
        *float v5 = v23;
      }
    }
    while (*a2 != *(float **)a3);
  }
  return result;
}

uint64_t SLML::operator-(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v2 != v3) {
    SLML::Fatal((SLML *)"%s %d != %d", (const char *)a2, "Stride", *(unsigned int *)(a1 + 8), v3);
  }
  return ((uint64_t)(*(void *)a1 - *(void *)a2) >> 2) / v2;
}

void sub_1DA4B44E0()
{
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,SLML::Vector<float>::iterator>(float **a1, float **a2, float **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  float v5 = **a2;
  float v6 = **a1;
  uint64_t v7 = *a3;
  float v8 = **a3;
  if (v5 < v6)
  {
    if (v8 < v5)
    {
      *uint64_t v4 = v8;
      *uint64_t v7 = v6;
      return 1;
    }
    *uint64_t v4 = v5;
    *uint64_t v3 = v6;
    if (*v7 >= v6) {
      return 1;
    }
    *uint64_t v3 = *v7;
    *uint64_t v7 = v6;
    return 2;
  }
  if (v8 < v5)
  {
    *uint64_t v3 = v8;
    *uint64_t v7 = v5;
    float v9 = *v4;
    if (*v3 >= *v4) {
      return 1;
    }
    *uint64_t v4 = *v3;
    *uint64_t v3 = v9;
    return 2;
  }
  return 0;
}

uint64_t std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,SLML::Vector<float>::iterator>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)a2 - 4 * *(int *)(a2 + 8);
  uint64_t v3 = *(float **)result;
  if (*(void *)result != v2)
  {
    uint64_t v4 = *(int *)(result + 8);
    uint64_t v5 = 4 * v4;
    float v6 = &v3[v4];
    do
    {
      uint64_t v7 = &v3[v4];
      if (v3 != *(float **)a2 && v7 != *(float **)a2)
      {
        float v9 = *v3;
        int v10 = v6;
        float v11 = *v3;
        int v12 = *(float **)a2;
        uint64_t v13 = v3;
        do
        {
          if (*v10 < v11)
          {
            int v12 = *(float **)a2;
            float v11 = *v10;
            uint64_t v13 = v10;
          }
          int v10 = (float *)((char *)v10 + v5);
        }
        while (v10 != v12);
        if (v13 != v3)
        {
          *uint64_t v3 = *v13;
          float *v13 = v9;
        }
      }
      *(void *)uint64_t result = v7;
      float v6 = (float *)((char *)v6 + v5);
      v3 += v4;
    }
    while (v7 != (float *)v2);
  }
  return result;
}

char *MEOWPhon::Name(MEOWPhon *this)
{
  if (this <= 0x31) {
    return MEOWPhon::sName[this];
  }
  uint64_t v1 = MEOWPhon::Name(unsigned char)::sBuf;
  sprintf(MEOWPhon::Name(unsigned char)::sBuf, "BOGUS[%02x]", this);
  return v1;
}

_UNKNOWN **MEOWPhon::Match(MEOWPhon *this)
{
  return &sMatchers + this;
}

void MEOWVectorBase::MEOWVectorBase(MEOWVectorBase *this, __int16 a2)
{
  *(void *)this = 0;
  *((_WORD *)this + 4) = a2;
  *((unsigned char *)this + 10) = 1;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
}

{
  *(void *)this = 0;
  *((_WORD *)this + 4) = a2;
  *((unsigned char *)this + 10) = 1;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
}

void MEOWVectorBase::MEOWVectorBase(MEOWVectorBase *this, __int16 a2, unint64_t a3)
{
  *(void *)this = 0;
  *((_WORD *)this + 4) = a2;
  *((unsigned char *)this + 10) = 1;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (a3) {
    MEOWVectorBase::Allocate(this, a3, 1);
  }
  *((void *)this + 2) = a3;
}

{
  *(void *)this = 0;
  *((_WORD *)this + 4) = a2;
  *((unsigned char *)this + 10) = 1;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (a3) {
    MEOWVectorBase::Allocate(this, a3, 1);
  }
  *((void *)this + 2) = a3;
}

void MEOWVectorBase::MEOWVectorBase(MEOWVectorBase *this, const MEOWVectorBase *a2)
{
  *(void *)this = 0;
  *((_WORD *)this + 4) = *((_WORD *)a2 + 4);
  *((unsigned char *)this + 10) = 1;
  unint64_t v4 = *((void *)a2 + 2);
  *((void *)this + 2) = v4;
  MEOWVectorBase::Allocate(this, v4, 1);
  memcpy(*(void **)this, *(const void **)a2, *((void *)this + 2) * *((unsigned __int16 *)this + 4));
}

{
  unint64_t v4;

  *(void *)this = 0;
  *((_WORD *)this + 4) = *((_WORD *)a2 + 4);
  *((unsigned char *)this + 10) = 1;
  unint64_t v4 = *((void *)a2 + 2);
  *((void *)this + 2) = v4;
  MEOWVectorBase::Allocate(this, v4, 1);
  memcpy(*(void **)this, *(const void **)a2, *((void *)this + 2) * *((unsigned __int16 *)this + 4));
}

void *MEOWVectorBase::Allocate(MEOWVectorBase *this, unint64_t a2, char a3)
{
  unint64_t v4 = 8;
  if (a2 >= 8) {
    unint64_t v4 = (3 * a2) >> 1;
  }
  if (a3) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = v4;
  }
  if (*((unsigned char *)this + 10))
  {
    float v6 = *(void **)this;
    *((void *)this + 3) = v5;
    uint64_t result = malloc_type_realloc(v6, v5 * *((unsigned __int16 *)this + 4), 0x8BDF91E2uLL);
    float v8 = result;
  }
  else
  {
    float v8 = malloc_type_malloc(v5 * *((unsigned __int16 *)this + 4), 0x713CAB7AuLL);
    uint64_t result = memcpy(v8, *(const void **)this, *((void *)this + 3) * *((unsigned __int16 *)this + 4));
    *((unsigned char *)this + 10) = 1;
    *((void *)this + 3) = v5;
  }
  *(void *)this = v8;
  return result;
}

void MEOWVectorBase::Map(void **this, void *a2, void *a3)
{
  if (*((unsigned char *)this + 10)) {
    free(*this);
  }
  *this = a2;
  *((unsigned char *)this + 10) = 0;
  this[2] = a3;
  this[3] = a3;
}

void MEOWVectorBase::~MEOWVectorBase(void **this)
{
  if (*((unsigned char *)this + 10)) {
    free(*this);
  }
}

{
  if (*((unsigned char *)this + 10)) {
    free(*this);
  }
}

void *MEOWVectorBase::Append(MEOWVectorBase *this, const void *__src, uint64_t a3)
{
  uint64_t v6 = *((void *)this + 2);
  if ((unint64_t)(v6 + a3) > *((void *)this + 3))
  {
    MEOWVectorBase::Allocate(this, v6 + a3, 0);
    uint64_t v6 = *((void *)this + 2);
  }
  uint64_t result = memcpy((void *)(*(void *)this + v6 * *((unsigned __int16 *)this + 4)), __src, *((unsigned __int16 *)this + 4) * a3);
  *((void *)this + 2) += a3;
  return result;
}

uint64_t *MEOWVectorBase::Swap(uint64_t *this, MEOWVectorBase *a2)
{
  char v2 = *((unsigned char *)this + 10);
  *((unsigned char *)this + 10) = *((unsigned char *)a2 + 10);
  *((unsigned char *)a2 + 10) = v2;
  uint64_t v3 = *this;
  *this = *(void *)a2;
  *(void *)a2 = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

void MEOWVectorBase::clear(void **this)
{
  if (*((unsigned char *)this + 10)) {
    free(*this);
  }
  else {
    *((unsigned char *)this + 10) = 1;
  }
  *this = 0;
  this[2] = 0;
  this[3] = 0;
}

void MEOWReader::MEOWReader(MEOWReader *this, int a2, unsigned __int16 *a3, char a4)
{
  uint64_t v5 = (char *)this + 30536;
  *(_DWORD *)this = a2;
  *((_OWORD *)this + 1901) = 0u;
  *((void *)this + 3804) = a3;
  *((unsigned char *)this + 30536) = a4;
  *((_WORD *)this + 15269) = bswap32(a3[2]) >> 16;
  *((_WORD *)this + 15270) = bswap32(a3[3]) >> 16;
  *((_OWORD *)this + 1910) = 0u;
  ComputeSectionLengths((uint64_t)a3, (MEOWReader *)((char *)this + 30584));
  if (!*v5) {
    CreateMEOWSVDDistanceEncoder();
  }
  if (*v5 == 1) {
    MEOWReader::MEOWReader();
  }
  *((void *)this + 1) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + --*(_WORD *)(this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  bzero((char *)this + 10416, 0x4E20uLL);
  uint64_t v6 = (unsigned int *)*((void *)this + 3804);
  unsigned int v7 = v6[5];
  *((void *)this + 3807) = (char *)v6 + bswap32(v6[4]);
  unsigned int v8 = v6[6];
  *((void *)this + 3808) = (char *)v6 + bswap32(v6[7]);
  *((void *)this + 3809) = (char *)v6 + bswap32(v8);
  unsigned int v9 = v6[3];
  int v10 = (unsigned __int16 *)((char *)v6 + bswap32(v6[2]));
  *((void *)this + 3805) = v10;
  float v11 = (char *)v6 + bswap32(v9);
  *((void *)this + 3806) = v11;
  *((void *)this + 3810) = (char *)v6 + bswap32(v7);
  *((void *)this + 3811) = (char *)v6 + bswap32(v6[8]);
  *((_OWORD *)this + 1907) = 0u;
  unsigned int v12 = *((unsigned __int16 *)v5 + 1);
  if ((v12 > 1 || v12 == 1 && *((unsigned __int16 *)v5 + 2) >= 5u) && (unsigned int v13 = v6[9]) != 0)
  {
    float v14 = (unsigned __int8 *)v6 + bswap32(v13);
    *((void *)this + 3812) = v14;
    int v15 = *v14;
    if (*v14)
    {
      *((void *)this + 3814) = v14;
      if (v12 >= 2)
      {
        if (v15 == 2)
        {
          unsigned int v16 = *((_DWORD *)v14 + 8);
          if (v16) {
            *((void *)this + 3815) = &v14[bswap32(v16)];
          }
        }
        goto LABEL_19;
      }
      goto LABEL_18;
    }
  }
  else
  {
    *((void *)this + 3812) = 0;
  }
  if (v12 > 1)
  {
LABEL_19:
    *((void *)this + 3813) = (char *)v6 + bswap32(v6[10]);
    *((void *)this + 3829) = 0;
    *((void *)this + 3830) = v11 + 10000;
    goto LABEL_20;
  }
  if (v12 != 1)
  {
    *((void *)this + 3813) = 0;
    float v18 = v11 + 10000;
    goto LABEL_24;
  }
LABEL_18:
  unsigned int v17 = *((unsigned __int16 *)v5 + 2);
  if (v17 > 5) {
    goto LABEL_19;
  }
  *((void *)this + 3813) = 0;
  float v18 = v11 + 10000;
  if (v17 > 1)
  {
    *((void *)this + 3829) = 0;
    *((void *)this + 3830) = v18;
    if (v17 != 2) {
LABEL_20:
    }
      operator new();
LABEL_25:
    *((void *)this + 3818) = 0;
    while (*((unsigned char *)v10 + 2))
    {
      if (*((unsigned char *)v10 + 2) == 1) {
        goto LABEL_30;
      }
      v10 += 2 * (bswap32(*v10) >> 16);
    }
    int v10 = 0;
LABEL_30:
    *((void *)this + 3816) = v10;
    if ((MTBEDebugFlags::sMEOWDebug & 0x1000) != 0) {
      operator new();
    }
    *((void *)this + 3819) = 0;
    unsigned int v19 = *((unsigned __int16 *)v5 + 1);
    if (v19 <= 1) {
      BOOL v20 = v19 == 1 && *((unsigned __int16 *)v5 + 2) > 5u;
    }
    else {
      BOOL v20 = 1;
    }
    MEOWPPReaderFactory::Create((MEOWPPReaderFactory *)v20);
  }
LABEL_24:
  *((void *)this + 3829) = v18;
  *((void *)this + 3830) = 0;
  goto LABEL_25;
}

void sub_1DA4B4DB0(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A0C405167EBAELL);
  _Unwind_Resume(a1);
}

uint64_t ComputeSectionLengths@<X0>(uint64_t result@<X0>, _OWORD *a2@<X8>)
{
  *(_OWORD *)((char *)a2 + 28) = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  char v2 = (_DWORD *)a2 + 2;
  unsigned int v3 = *(unsigned __int16 *)(result + 4);
  if (__rev16(v3) > 1) {
    goto LABEL_2;
  }
  unint64_t v4 = result + 36;
  if (v3 != 256) {
    goto LABEL_7;
  }
  unsigned int v5 = *(unsigned __int16 *)(result + 6);
  if (__rev16(v5) < 5) {
    goto LABEL_7;
  }
  if (v5 == 1280) {
    unint64_t v4 = result + 40;
  }
  else {
LABEL_2:
  }
    unint64_t v4 = result + 44;
LABEL_7:
  uint64_t v6 = (unsigned int *)(result + 8);
  do
  {
    unsigned int v7 = bswap32(*v6);
    unsigned int v8 = -1;
    unsigned int v9 = (unsigned int *)(result + 8);
    do
    {
      unsigned int v10 = *v9++;
      unsigned int v11 = bswap32(v10);
      unsigned int v12 = v11 - v7;
      if (v11 - v7 >= v8) {
        unsigned int v12 = v8;
      }
      if (v11 > v7) {
        unsigned int v8 = v12;
      }
    }
    while ((unint64_t)v9 < v4);
    ++v6;
    *v2++ = bswap32(v8);
  }
  while ((unint64_t)v6 < v4);
  return result;
}

unsigned __int16 *MEOWReader::GetGlobalParams(MEOWReader *this, int a2)
{
  for (uint64_t result = (unsigned __int16 *)*((void *)this + 3805);
        *((unsigned char *)result + 2);
        result += 2 * (bswap32(*result) >> 16))
  {
    if (*((unsigned __int8 *)result + 2) == a2) {
      return result;
    }
  }
  return 0;
}

void MEOWReader::ComputeDemiListSize(MEOWReader *this)
{
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v21, 4, 0x9C5uLL);
  uint64_t v2 = *((void *)this + 3806);
  uint64_t v3 = -10000;
  unint64_t v4 = (char *)v21[0];
  do
  {
    *(_DWORD *)&v4[v3 + 10000] = bswap32(*(_DWORD *)(v2 + v3 + 10000));
    v3 += 4;
  }
  while (v3);
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  uint64_t v5 = 0;
  uint64_t v6 = (int *)v21[0];
  *((_DWORD *)v21[0] + 2500) = bswap32(*((_DWORD *)this + 7650));
  uint64_t v7 = *((void *)this + 3806);
  do
  {
    for (uint64_t i = 0; i != 50; ++i)
    {
      unsigned int v9 = bswap32(*(_DWORD *)(v7 + 200 * v5 + 4 * i));
      unsigned int v10 = v6;
      unint64_t v11 = 2500;
      do
      {
        unint64_t v12 = v11 >> 1;
        unsigned int v13 = (unsigned int *)&v10[v11 >> 1];
        unsigned int v15 = *v13;
        float v14 = (int *)(v13 + 1);
        v11 += ~(v11 >> 1);
        if (v15 < v9) {
          unsigned int v10 = v14;
        }
        else {
          unint64_t v11 = v12;
        }
      }
      while (v11);
      int v16 = *v10;
      int v17 = v10[1];
      if (v17 == *v10)
      {
        uint64_t v18 = *((void *)this + 3829);
        if (v18) {
          uint64_t v19 = *(unsigned __int8 *)(v18 + 50 * v5 + i);
        }
        else {
          uint64_t v19 = bswap32(*(unsigned __int16 *)(*((void *)this + 3830) + 100 * v5 + 2 * i)) >> 16;
        }
        int v16 = v10[1];
        if (v19)
        {
          BOOL v20 = v10 + 2;
          do
          {
            int v16 = *(v20 - 1);
            int v17 = *v20++;
          }
          while (v17 == v16);
        }
      }
      *((_DWORD *)this + 50 * v5 + i + 104) = v17 - v16;
    }
    ++v5;
  }
  while (v5 != 50);
  MEOWVectorBase::~MEOWVectorBase(v21);
}

void sub_1DA4B5014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MEOWReader::CountDiphones(MEOWReader *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = *((void *)this + 3829);
  if (v3) {
    return *(unsigned __int8 *)(v3 + 50 * a2 + a3);
  }
  else {
    return bswap32(*(unsigned __int16 *)(*((void *)this + 3830) + 100 * a2 + 2 * a3)) >> 16;
  }
}

void MEOWReader::~MEOWReader(MEOWReader *this)
{
  close(*(_DWORD *)this);
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kTrackDecodingRatio))
  {
    uint64_t v2 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Samples decoded: %lu used: %lu ratio: %5.2f%%\n", 0, *((void *)this + 3821), (float)((float)((float)*((unint64_t *)this + 3821) * 100.0) / 0.0));
    fprintf(*v2, "      requested: %lu used: %lu ratio: %5.2f%%\n", *((void *)this + 3820), *((void *)this + 3821), (float)((float)((float)*((unint64_t *)this + 3821) * 100.0) / (float)*((unint64_t *)this + 3820)));
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    MEOWVectorBase::~MEOWVectorBase((void **)(v3 + 192));
    MEOWTreeBase::~MEOWTreeBase((MEOWTreeBase *)(v3 + 136));
    MEOWVectorBase::~MEOWVectorBase((void **)(v3 + 104));
    SLML::Storage<float>::RemoveReference(*(void *)(v3 + 88));
    SLML::Storage<float>::RemoveReference(*(void *)(v3 + 64));
    SLML::Storage<float>::RemoveReference(*(void *)(v3 + 40));
    SLML::Storage<float>::RemoveReference(*(void *)(v3 + 16));
    MEMORY[0x1E016FF00](v3, 0x10A0C40ED9C5895);
  }
  uint64_t v4 = 0;
  uint64_t v5 = (char *)this + 10416;
  do
  {
    uint64_t v6 = (void **)*((void *)this + v4 + 2);
    if (v6)
    {
      MEOWVectorBase::~MEOWVectorBase(v6);
      MEMORY[0x1E016FF00]();
    }
    for (uint64_t i = 0; i != 400; i += 8)
    {
      uint64_t v8 = *(void *)&v5[i];
      if (v8) {
        MEMORY[0x1E016FEE0](v8, 0x60C8044C4A2DFLL);
      }
    }
    ++v4;
    v5 += 400;
  }
  while (v4 != 50);
  unsigned int v9 = (MEOWSampleCache *)*((void *)this + 3818);
  if (v9)
  {
    MEOWSampleCache::~MEOWSampleCache(v9);
    MEMORY[0x1E016FF00]();
  }
  unsigned int v10 = (void **)*((void *)this + 3819);
  if (v10)
  {
    MEOWSpectralCost::~MEOWSpectralCost(v10);
    MEMORY[0x1E016FF00]();
  }
  uint64_t v11 = *((void *)this + 3822);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
  }
}

uint64_t MEOWReader::MappedSize(MEOWReader *this, uint64_t a2)
{
  int v3 = (int)this;
  if ((MEOWSampleCache::MapSamples((MEOWSampleCache *)this) & 1) == 0)
  {
    pread(v3, __buf, 0x2CuLL, 0);
    if (__rev16(v7) > 1 || v7 == 256 && bswap32(v8) >> 16 >= 6)
    {
      if (v10)
      {
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseHeapBasedDemis)) {
          unsigned int v4 = v9;
        }
        else {
          unsigned int v4 = v10;
        }
        return bswap32(v4);
      }
    }
  }
  return a2;
}

void MEOWReader::AdvisePreload(MEOWReader *this, long long *a2, unint64_t a3)
{
  int v5 = (int)this;
  if (kPreloadVoice)
  {
    MTBEDebugParams::GetParam((const __CFString *)kPreloadVoice, (const __CFString *)&qword_1EA8D9FA8, (uint64_t *)qword_1EA8D9FA8);
    kPreloadVoice = 0;
  }
  if (qword_1EA8D9FA8)
  {
    long long v6 = a2[1];
    long long v23 = *a2;
    *(_OWORD *)uint64_t v24 = v6;
    *(_OWORD *)&v24[12] = *(long long *)((char *)a2 + 28);
    ComputeSectionLengths((uint64_t)&v23, &v17);
    if (kPreloadVoice)
    {
      MTBEDebugParams::GetParam((const __CFString *)kPreloadVoice, (const __CFString *)&qword_1EA8D9FA8, (uint64_t *)qword_1EA8D9FA8);
      kPreloadVoice = 0;
    }
    if (qword_1EA8D9FA8 != 3)
    {
      if (qword_1EA8D9FA8 == 2)
      {
        uint64_t v15 = bswap32(HIDWORD(v23));
        uint64_t v16 = bswap32(HIDWORD(v17));
        fcntl(v5, 44, &v15);
        v14[0] = bswap32(*(unsigned int *)&v24[12]);
        v14[1] = bswap32(v20);
        fcntl(v5, 44, v14);
        v13[0] = bswap32(*(unsigned int *)&v24[8]);
        v13[1] = bswap32(v19);
        fcntl(v5, 44, v13);
        v12[0] = bswap32(*(unsigned int *)&v24[4]);
        v12[1] = bswap32(v18);
        fcntl(v5, 44, v12);
        if (!v22) {
          return;
        }
        v11[0] = bswap32(*(unsigned int *)&v24[16]);
        v11[1] = bswap32(v21);
        unsigned int v10 = v11;
        goto LABEL_18;
      }
      if (qword_1EA8D9FA8 != 1) {
        return;
      }
      uint64_t v15 = bswap32(*(unsigned int *)&v24[4]);
      uint64_t v16 = 0;
      unsigned int v7 = bswap32(v18);
LABEL_15:
      LODWORD(v16) = v7;
      unsigned int v10 = &v15;
LABEL_18:
      fcntl(v5, 44, v10);
      return;
    }
    if (v22)
    {
      unsigned int v8 = bswap32(*(unsigned int *)&v24[24]);
      unsigned int v9 = v8 + bswap32(v22);
      if (!v8)
      {
LABEL_13:
        if (v9 >= a3) {
          return;
        }
        uint64_t v15 = v9;
        uint64_t v16 = 0;
        unsigned int v7 = a3 - v9;
        goto LABEL_15;
      }
    }
    else
    {
      unsigned int v8 = bswap32(*(unsigned int *)&v24[16]);
      unsigned int v9 = bswap32(v21) + v8;
      if (!v8) {
        goto LABEL_13;
      }
    }
    uint64_t v15 = 0;
    uint64_t v16 = v8;
    fcntl(v5, 44, &v15);
    goto LABEL_13;
  }
}

unint64_t MEOWReader::MEOWAdvanceDemi(void *a1, unint64_t *a2, unsigned int a3, unsigned int a4, int a5)
{
  unint64_t result = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseHeapBasedDemis);
  if (result)
  {
    unint64_t result = MEOWReader::HeapDemiForMappedDemi(a1, *a2, a3, a4, 1);
    if (a5)
    {
      LODWORD(v11) = 0;
      do
      {
        uint64_t v12 = *(unsigned __int8 *)result;
        uint64_t v11 = (v11 + v12);
        result += 4 * v12;
        --a5;
      }
      while (a5);
    }
    else
    {
      uint64_t v11 = 0;
    }
    unsigned int v13 = (unsigned __int8 *)(*a2 + 4 * v11);
  }
  else
  {
    if (!a5) {
      return result;
    }
    unsigned int v13 = (unsigned __int8 *)*a2;
    do
    {
      v13 += 4 * *v13;
      --a5;
    }
    while (a5);
  }
  *a2 = (unint64_t)v13;
  return result;
}

unint64_t MEOWReader::HeapDemiForMappedDemi(void *a1, unint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  if (a5) {
    pthread_mutex_lock(&sDemiCacheLock);
  }
  if (a2)
  {
    unsigned int v10 = 0;
    unint64_t v11 = 0;
  }
  else
  {
    unsigned int v10 = *((_DWORD *)&a1[25 * a3 + 52] + a4);
    unint64_t v11 = a1[3807] + (int)bswap32(*(_DWORD *)(a1[3806] + 200 * a3 + 4 * a4));
    a2 = v11;
  }
  uint64_t v12 = (uint64_t *)a1[3802];
  if (!v12)
  {
    int v14 = 0;
    int v13 = 0;
    if (v10) {
      goto LABEL_51;
    }
    goto LABEL_17;
  }
  int v13 = 0;
  int v14 = 0;
  uint64_t v15 = (uint64_t *)a1[3802];
  while (1)
  {
    uint64_t v16 = v15[2];
    if (v16)
    {
      uint64_t v17 = *((unsigned int *)v15 + 6);
      unint64_t v18 = v17 + v16;
      if (v18 <= a2 && a2 + v10 < v18 + *((unsigned int *)v15 + 7)) {
        break;
      }
    }
    if (v14 + v10 > 0x80000) {
      ++v13;
    }
    v14 += *((_DWORD *)v15 + 7);
    uint64_t v15 = (uint64_t *)*v15;
    if (!v15)
    {
      if (v10) {
        goto LABEL_51;
      }
LABEL_17:
      if (a4 | a3 || v11) {
        goto LABEL_37;
      }
      unint64_t v21 = 0;
      unsigned int v22 = a1 + 1302;
      long long v23 = a1 + 52;
      while (1)
      {
        for (uint64_t i = 0; i != 50; ++i)
        {
          uint64_t v25 = (unint64_t *)v22[i];
          if (v25)
          {
            unint64_t v26 = *v25;
            BOOL v27 = *v25 && a2 >= v26;
            if (v27 && *((unsigned int *)v23 + i) + v26 > a2)
            {
              a3 = v21;
              a4 = i;
LABEL_37:
              uint64_t v28 = a1[3829];
              if (v28)
              {
                unsigned int v29 = a3;
                uint64_t v30 = a4;
                uint64_t v31 = v28 + 50 * a3;
                uint64_t v32 = *(unsigned __int8 *)(v31 + a4);
                if (!*(unsigned char *)(v31 + a4)) {
                  goto LABEL_50;
                }
              }
              else
              {
                unsigned int v29 = a3;
                uint64_t v30 = a4;
                unsigned int v45 = bswap32(*(unsigned __int16 *)(a1[3830] + 100 * a3 + 2 * a4));
                uint64_t v32 = HIWORD(v45);
                if (!HIWORD(v45)) {
                  goto LABEL_50;
                }
              }
              unint64_t v33 = 0;
              unsigned int v10 = 0;
              uint64_t v34 = (void *)a1[50 * v29 + 1302 + v30];
              unint64_t v35 = (unint64_t)(2 * v32 + 31) >> 5;
              int v36 = &a1[25 * v29];
              unint64_t v37 = v35 - 1;
              float v38 = (unsigned int *)v36 + v30 + 104;
              uint64_t v39 = 8 * v35;
              while (1)
              {
                if (v39 - 8 == v33)
                {
                  unint64_t v40 = v34[v37];
                  if (a2 >= v40)
                  {
                    unint64_t v41 = *v38 + *v34;
                    unsigned int v42 = v41 - v40;
                    if (v41 > a2) {
                      unsigned int v10 = v42;
                    }
                  }
                }
                else
                {
                  unint64_t v43 = v34[v33 / 8];
                  if (a2 >= v43)
                  {
                    unint64_t v44 = v34[v33 / 8 + 1];
                    if (a2 < v44)
                    {
                      unsigned int v10 = v44 - v43;
                      if (v44 == v43)
                      {
LABEL_50:
                        puts("Help, attempting to read 0 bytes for a demi.");
                        unsigned int v10 = 0;
                      }
LABEL_51:
                      if (v10 + v14 > 0x80000 && v13 != 0)
                      {
                        float v47 = (uint64_t **)(a1 + 3803);
                        do
                        {
                          int v48 = *v47;
                          if (*v47)
                          {
                            uint64_t v50 = *v48;
                            uint64_t v49 = (void *)v48[1];
                            if (v49)
                            {
                              *uint64_t v49 = v50;
                              uint64_t v50 = *v48;
                            }
                            else
                            {
                              a1[3802] = v50;
                            }
                            if (v50) {
                              float v51 = (void *)(v50 + 8);
                            }
                            else {
                              float v51 = a1 + 3803;
                            }
                            *float v51 = v49;
                          }
                          --v13;
                          free((void *)v48[4]);
                          MEMORY[0x1E016FF00](v48, 0x10E0C40A8F1378CLL);
                        }
                        while (v13);
                      }
                      operator new();
                    }
                  }
                }
                v33 += 8;
                if (v39 == v33)
                {
                  if (!v10) {
                    goto LABEL_50;
                  }
                  goto LABEL_51;
                }
              }
            }
          }
        }
        v22 += 50;
        v23 += 25;
        BOOL v27 = v21++ >= 0x31;
        if (v27) {
          goto LABEL_37;
        }
      }
    }
  }
  if (v15 != v12)
  {
    unsigned int v20 = (uint64_t *)*v15;
    unsigned int v19 = (void *)v15[1];
    if (v19)
    {
      *unsigned int v19 = v20;
      unsigned int v20 = (uint64_t *)*v15;
    }
    else
    {
      a1[3802] = v20;
    }
    if (v20) {
      int v53 = v20 + 1;
    }
    else {
      int v53 = a1 + 3803;
    }
    *int v53 = v19;
    uint64_t v54 = a1[3802];
    if (v54) {
      *(void *)(v54 + 8) = v15;
    }
    uint64_t *v15 = v54;
    v15[1] = 0;
    a1[3802] = v15;
    unint64_t v18 = v17 + v15[2];
  }
  unint64_t v55 = a2 + v15[4] - v18;
  if (a5) {
    pthread_mutex_unlock(&sDemiCacheLock);
  }
  return v55;
}

unint64_t MEOWReader::GetDemiRecord(MEOWReader *this, unsigned int a2, unsigned int a3, unint64_t a4, int a5)
{
  unsigned int v10 = (char *)this + 400 * a2 + 8 * a3;
  uint64_t v11 = *((void *)v10 + 1302);
  if (!v11)
  {
    uint64_t v12 = (uint64_t *)(v10 + 10416);
    pthread_mutex_lock(&sDemiCacheLock);
    if (!*v12)
    {
      uint64_t v13 = MEOWReader::ComputeDemiCache(this, a2, a3);
      __dmb(0xBu);
      uint64_t *v12 = v13;
    }
    pthread_mutex_unlock(&sDemiCacheLock);
    uint64_t v11 = *v12;
  }
  unint64_t v15 = *(void *)(v11 + ((a4 >> 1) & 0x3FFFFFFFFFFFFFF8));
  MEOWReader::MEOWAdvanceDemi(this, &v15, a2, a3, a5 & 0xFFFFFFE1 | (2 * (a4 & 0xF)));
  return v15;
}

uint64_t MEOWReader::ComputeDemiCache(MEOWReader *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = *((void *)this + 3829);
  if (v3)
  {
    if (*(unsigned char *)(v3 + 50 * a2 + a3)) {
      goto LABEL_3;
    }
  }
  else if (bswap32(*(unsigned __int16 *)(*((void *)this + 3830) + 100 * a2 + 2 * a3)) >> 16)
  {
LABEL_3:
    operator new[]();
  }
  return 0;
}

void sub_1DA4B5DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  _Unwind_Resume(a1);
}

double MEOWReader::GetDemi(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseHeapBasedDemis)) {
    a2 = MEOWReader::HeapDemiForMappedDemi((void *)a1, a2, 0, 0, 1);
  }
  if ((*(unsigned char *)(a2 + 1) & 0x3F) == 2)
  {
    a2 = *(void *)(a1 + 30456) + (int)bswap32(*(_DWORD *)(a2 + 4));
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseHeapBasedDemis)) {
      a2 = MEOWReader::HeapDemiForMappedDemi((void *)a1, a2, 0, 0, 1);
    }
  }
  *(unsigned char *)(a4 + 67) = -1;
  *(_WORD *)(a4 + 68) = -1;
  *(_WORD *)(a4 + 65) = 0;
  char v8 = *(unsigned char *)(a2 + 1);
  unsigned int v9 = v8 & 0x3F;
  *(unsigned char *)(a4 + 64) = v8 & 0x3F;
  switch(v8 & 0x3F)
  {
    case 0:
      goto LABEL_9;
    case 1:
    case 3:
      char v10 = 0;
      *(void *)(a4 + --*(_WORD *)(this + 24) = bswap32(*(unsigned __int16 *)(a2 + 6)) >> 16;
      goto LABEL_16;
    case 4:
    case 5:
      goto LABEL_15;
    case 6:
      *(_WORD *)(a4 + 68) = bswap32(*(unsigned __int16 *)(a2 + 42)) >> 16;
      *(unsigned char *)(a4 + 67) = *(unsigned char *)(a2 + 41);
      if (a3) {
        goto LABEL_15;
      }
      uint64_t v12 = (unsigned char *)(a2 + 40);
      break;
    case 7:
      *(_WORD *)(a4 + 68) = bswap32(*(unsigned __int16 *)(a2 + 10)) >> 16;
      *(unsigned char *)(a4 + 67) = *(unsigned char *)(a2 + 9);
      if (a3) {
        goto LABEL_15;
      }
      uint64_t v12 = (unsigned char *)(a2 + 8);
      break;
    case 8:
      double result = 0.0;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      *(unsigned char *)(a4 + 65) = 0x80;
      return result;
    default:
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "MEOW: Bad Demi Format %d @ %08x\n", v9, a2 - *(_DWORD *)(a1 + 30432));
LABEL_9:
      double result = 0.0;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      return result;
  }
  *(unsigned char *)(a4 + 65) = *v12;
LABEL_15:
  *(void *)(a4 + --*(_WORD *)(this + 24) = *(unsigned __int8 *)(a2 + 6);
  char v10 = *(unsigned char *)(a2 + 7);
LABEL_16:
  *(unsigned char *)(a4 + 66) = v10;
  if (v9 <= 7)
  {
    int v13 = 1 << v9;
    if ((v13 & 0x68) != 0)
    {
      unint64_t v14 = a2 + 8;
      goto LABEL_21;
    }
    if ((v13 & 0x92) != 0)
    {
      unint64_t v14 = 0;
LABEL_21:
      *(void *)(a4 + 56) = v14;
    }
  }
  unint64_t v15 = (unsigned int *)(***(uint64_t (****)(void, uint64_t, void, void))(a1 + 30576))(*(void *)(a1 + 30576), a1, (bswap32(*(unsigned __int16 *)(a2 + 2)) >> 16) & 0xFFFCFFFF | ((((v8 & 0xC0) >> 6) & 3) << 16), *(unsigned __int8 *)(a2 + 4));
  (*(void (**)(unsigned int *, void))(*(void *)v15 + 24))(v15, *(unsigned __int8 *)(a2 + 5));
  *(_DWORD *)a4 = (bswap32(*(unsigned __int16 *)(a2 + 2)) >> 16) & 0xFFFCFFFF | ((((*(unsigned char *)(a2 + 1) & 0xC0) >> 6) & 3) << 16);
  *(_WORD *)(a4 + 4) = *(unsigned __int8 *)(a2 + 4);
  *(_WORD *)(a4 + 6) = *(unsigned __int8 *)(a2 + 5);
  *(void *)(a4 + 40) = v15[4];
  *(unsigned char *)(a4 + 8) = 0;
  *(void *)(a4 + 88) = 0;
  if (a3)
  {
    *(void *)(a4 + 16) = 0;
    (*(void (**)(unsigned int *, void, uint64_t))(*(void *)v15 + 32))(v15, *(unsigned int *)(a4 + 24), a4 + 72);
    *(_DWORD *)(a4 + 44) = v15[4] - *(_DWORD *)(a4 + 40);
    *(_DWORD *)(a4 + 48) = (*(uint64_t (**)(unsigned int *))(*(void *)v15 + 64))(v15)
                         - *(_DWORD *)(a1 + 30432);
    char v16 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)v15 + 56))(v15, a4 + 72);
    uint64_t v17 = *(_WORD **)(a4 + 72);
  }
  else
  {
    *(_DWORD *)(a4 + 48) = (*(uint64_t (**)(unsigned int *))(*(void *)v15 + 64))(v15)
                         - *(_DWORD *)(a1 + 30432);
    *(unsigned char *)(a4 + 8) = (*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)v15 + 48))(v15, a4 + 72);
    *(void *)(a4 + 16) = *(void *)(a4 + 88);
    (*(void (**)(unsigned int *, void, uint64_t))(*(void *)v15 + 32))(v15, *(unsigned int *)(a4 + 24), a4 + 72);
    *(_DWORD *)(a4 + 44) = v15[4] - *(_DWORD *)(a4 + 40);
    uint64_t v17 = *(_WORD **)(a4 + 72);
    if (*(unsigned char *)(a4 + 8)) {
      char v16 = ((v17[5] | v17[4] | v17[3]) & 0x8000u) == 0;
    }
    else {
      char v16 = 0;
    }
  }
  *(unsigned char *)(a4 + 8) = v16;
  *(void *)(a4 + 32) = v17;
  unint64_t v18 = *(void (**)(unsigned int *))(*(void *)v15 + 8);

  v18(v15);
  return result;
}

double MEOWReader::GetDemiCookie(uint64_t a1, unint64_t a2, int a3, int a4, uint64_t a5)
{
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseHeapBasedDemis)) {
    a2 = MEOWReader::HeapDemiForMappedDemi((void *)a1, a2, 0, 0, 1);
  }
  if ((*(unsigned char *)(a2 + 1) & 0x3F) == 2)
  {
    a2 = *(void *)(a1 + 30456) + (int)bswap32(*(_DWORD *)(a2 + 4));
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseHeapBasedDemis)) {
      a2 = MEOWReader::HeapDemiForMappedDemi((void *)a1, a2, 0, 0, 1);
    }
  }
  *(_WORD *)(a5 + 52) = 255;
  int v11 = *(unsigned char *)(a2 + 1) & 0x3F;
  switch(*(unsigned char *)(a2 + 1) & 0x3F)
  {
    case 3:
      uint64_t v12 = bswap32(*(unsigned __int16 *)(a2 + 6)) >> 16;
      goto LABEL_15;
    case 5:
      goto LABEL_14;
    case 6:
      *(unsigned char *)(a5 + 52) = *(unsigned char *)(a2 + 41);
      if ((a3 & 1) == 0 && *(char *)(a2 + 40) < 0) {
        goto LABEL_13;
      }
      goto LABEL_14;
    case 7:
      *(unsigned char *)(a5 + 52) = *(unsigned char *)(a2 + 9);
      if ((a3 & 1) != 0 || (*(char *)(a2 + 8) & 0x80000000) == 0) {
        goto LABEL_14;
      }
LABEL_13:
      *(unsigned char *)(a5 + 53) = 1;
      if (a4)
      {
LABEL_14:
        uint64_t v12 = *(unsigned __int8 *)(a2 + 6);
LABEL_15:
        MEOWSVDDistanceEncoder::UnpackCookie((unsigned __int16 *)(a2 + 8), (float *)a5);
        uint64_t v13 = (***(uint64_t (****)(void, uint64_t, void, void))(a1 + 30576))(*(void *)(a1 + 30576), a1, (bswap32(*(unsigned __int16 *)(a2 + 2)) >> 16) & 0xFFFCFFFF | ((((*(unsigned char *)(a2 + 1) & 0xC0) >> 6) & 3) << 16), *(unsigned __int8 *)(a2 + 4));
        (*(void (**)(uint64_t, void))(*(void *)v13 + 16))(v13, *(unsigned __int8 *)(a2 + 5));
        if (a3) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v12);
        }
        *(_DWORD *)(a5 + 56) = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 64))(v13)
                             - *(_DWORD *)(a1 + 30432);
        unint64_t v14 = *(void (**)(uint64_t))(*(void *)v13 + 8);
        v14(v13);
      }
      break;
    case 8:
      *(unsigned char *)(a5 + 53) = 1;
      if (a4) {
        goto LABEL_21;
      }
      return result;
    default:
LABEL_21:
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "MEOW: Bad Demi Format %d @ %08x\n", v11, a2 - *(_DWORD *)(a1 + 30432));
      double result = 0.0;
      *(_OWORD *)a5 = 0u;
      *(_OWORD *)(a5 + 16) = 0u;
      *(_OWORD *)(a5 + 32) = 0u;
      *(_OWORD *)(a5 + 44) = 0u;
      break;
  }
  return result;
}

uint64_t MEOWReader::IsWordOnly(void *a1, unint64_t a2)
{
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseHeapBasedDemis)) {
    a2 = MEOWReader::HeapDemiForMappedDemi(a1, a2, 0, 0, 1);
  }
  if ((*(unsigned char *)(a2 + 1) & 0x3F) == 2)
  {
    a2 = a1[3807] + (int)bswap32(*(_DWORD *)(a2 + 4));
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseHeapBasedDemis)) {
      a2 = MEOWReader::HeapDemiForMappedDemi(a1, a2, 0, 0, 1);
    }
  }
  int v4 = *(unsigned char *)(a2 + 1) & 0x3F;
  switch(v4)
  {
    case 6:
      int v5 = *(char *)(a2 + 40);
      return v5 < 0;
    case 8:
      return 1;
    case 7:
      int v5 = *(char *)(a2 + 8);
      return v5 < 0;
  }
  return 0;
}

unint64_t MEOWReader::GetAdjacent(void *a1, unint64_t a2, unsigned char *a3, char *a4)
{
  unint64_t result = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseHeapBasedDemis);
  if (result)
  {
    unint64_t result = MEOWReader::HeapDemiForMappedDemi(a1, a2, 0, 0, 1);
    a2 = result;
  }
  if ((*(unsigned char *)(a2 + 1) & 0x3F) == 2)
  {
    a2 = a1[3807] + (int)bswap32(*(_DWORD *)(a2 + 4));
    unint64_t result = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseHeapBasedDemis);
    if (result)
    {
      unint64_t result = MEOWReader::HeapDemiForMappedDemi(a1, a2, 0, 0, 1);
      a2 = result;
    }
  }
  *a3 = -1;
  *a4 = 0;
  int v9 = *(unsigned char *)(a2 + 1) & 0x3F;
  if ((*(unsigned char *)(a2 + 1) & 0x3F) != 0)
  {
    if (v9 == 6)
    {
      *a3 = *(unsigned char *)(a2 + 41);
      char v10 = *(unsigned char *)(a2 + 40);
    }
    else
    {
      if (v9 != 7) {
        return result;
      }
      *a3 = *(unsigned char *)(a2 + 9);
      char v10 = *(unsigned char *)(a2 + 8);
    }
  }
  else
  {
    char v10 = 2;
  }
  *a4 = v10;
  return result;
}

void MEOWReader::PrefetchDemi(MEOWReader *this, unsigned int a2, unsigned int a3, unint64_t a4, int a5)
{
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v12, 2);
  unint64_t DemiRecord = MEOWReader::GetDemiRecord(this, a2, a3, a4, a5);
  MEOWReader::GetDemi((uint64_t)this, DemiRecord, a5, (uint64_t)v11);
  MEOWReader::PrefetchSamples(this, v11[0], v11[10], v11[11]);
  MEOWVectorBase::~MEOWVectorBase(v12);
}

void sub_1DA4B67DC(_Unwind_Exception *a1)
{
  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

MEOWReader *MEOWReader::PrefetchSamples(MEOWReader *this, int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4 = a4;
  int v5 = this;
  long long v6 = (unsigned __int16 *)(*((void *)this + 3811) + (int)bswap32(*(_DWORD *)(*((void *)this + 3808) + 12 * a2)));
  unsigned int v7 = *((unsigned __int16 *)this + 15269);
  if (v7 < 2)
  {
    if (v7 != 1 || (unsigned int v16 = *((unsigned __int16 *)this + 15270), v16 < 3))
    {
      int v17 = *((_DWORD *)this + 7608);
      return (MEOWReader *)Prefetch((const unsigned __int8 *)&v6[a3], v6 + 2 * a3 - v17, a4);
    }
    char v8 = v6 + 1;
    int v9 = (int)bswap32(*v6) >> 16;
    if (v16 <= 4)
    {
      char v10 = 0;
      int v11 = (const unsigned __int8 *)&v8[3 * v9];
      if (!v9) {
        return this;
      }
      while (1)
      {
LABEL_4:
        if (v10)
        {
          unsigned int v12 = bswap32(*((_DWORD *)v10 + 2));
          if (a3 < v12) {
            goto LABEL_19;
          }
          unsigned int v13 = bswap32(*((_DWORD *)v10 + 1));
          v10 += 6;
        }
        else
        {
          unsigned int v14 = bswap32(v8[2]);
          if (a3 < HIWORD(v14))
          {
LABEL_19:
            if (a4)
            {
              int v18 = 1;
              do
              {
                if (v10)
                {
                  unsigned int v19 = bswap32(*((_DWORD *)v10 + 2)) - a3;
                  BOOL v20 = v4 >= v19;
                  unsigned int v21 = v4 - v19;
                  if (v20) {
                    unsigned int v4 = v21;
                  }
                  else {
                    unsigned int v4 = 0;
                  }
                  this = (MEOWReader *)Prefetch(v11, (v11 - *((_DWORD *)v5 + 7608)), bswap32(*((_DWORD *)v10 + 1)));
                  unsigned int v22 = bswap32(*((_DWORD *)v10 + 1));
                  v10 += 6;
                }
                else
                {
                  unsigned int v23 = (bswap32(v8[2]) >> 16) - a3;
                  BOOL v20 = v4 >= v23;
                  unsigned int v24 = v4 - v23;
                  if (v20) {
                    unsigned int v4 = v24;
                  }
                  else {
                    unsigned int v4 = 0;
                  }
                  this = (MEOWReader *)Prefetch(v11, (v11 - *((_DWORD *)v5 + 7608)), bswap32(*v8) >> 16);
                  unsigned int v25 = *v8;
                  v8 += 3;
                  unsigned int v22 = bswap32(v25) >> 16;
                }
                if (v9 == v18) {
                  break;
                }
                a3 = 0;
                v11 += v22;
                ++v18;
              }
              while (v4);
            }
            return this;
          }
          char v10 = 0;
          unsigned int v12 = HIWORD(v14);
          unsigned int v15 = *v8;
          v8 += 3;
          unsigned int v13 = bswap32(v15) >> 16;
        }
        a3 -= v12;
        v11 += v13;
        if (!--v9) {
          return this;
        }
      }
    }
  }
  else
  {
    char v8 = v6 + 1;
    int v9 = (int)bswap32(*v6) >> 16;
  }
  char v10 = v8;
  int v11 = (const unsigned __int8 *)&v6[6 * v9 + 1];
  char v8 = 0;
  if (v9) {
    goto LABEL_4;
  }
  return this;
}

uint64_t Prefetch(const unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (MTBEDebugFlags::sMEOWDebug) {
    uint64_t result = fprintf((FILE *)*MEMORY[0x1E4F143C8], "Prefetch %lu@%08lx\n", (unint64_t)(a3 + 4095) >> 12, a2);
  }
  if (a3)
  {
    unint64_t v5 = a3 + 2048;
    do
      v5 -= 2048;
    while (v5 > 0x800);
  }
  return result;
}

uint64_t MEOWReader::ReadSamples(MEOWReader *this, int a2, uint64_t a3, unsigned int a4, __int16 *a5, unint64_t *a6, unint64_t *a7)
{
  unsigned int v9 = a4;
  unsigned int v13 = (unsigned __int16 *)((char *)this + 30538);
  unsigned int v14 = *(_DWORD *)(*((void *)this + 3808) + 12 * a2);
  uint64_t v15 = *((void *)this + 3811);
  *((void *)this + 3821) += a4;
  pthread_mutex_lock(&sSampleCacheLock);
  unsigned int v16 = *v13;
  BOOL v17 = v16 == 1;
  if (v16 > 1) {
    goto LABEL_2;
  }
  unsigned int v25 = (unsigned __int16 *)(v15 + (int)bswap32(v14));
  if (!v17 || (unsigned int v26 = v13[1], v26 < 3))
  {
    uint64_t v40 = v9;
    int v47 = *((_DWORD *)this + 7608);
    int v48 = &v25[a3];
    *a6 = (v48 - v47);
    *a7 = v48 + 2 * v9 - v47;
    if (v9)
    {
      uint64_t v49 = 0;
      do
      {
        a5[v49] = bswap32(v48[v49]) >> 16;
        ++v49;
      }
      while (v9 != v49);
    }
    else
    {
      uint64_t v40 = 0;
    }
    goto LABEL_45;
  }
  if (v26 >= 6)
  {
LABEL_2:
    int v18 = (unsigned __int16 *)(*((void *)this + 3811) + (int)bswap32(*(_DWORD *)(*((void *)this + 3808) + 12 * a2)));
    unsigned int v19 = __rev16(*v18);
    BOOL v20 = (char *)(*((void *)this + 3813) + bswap32(*((_DWORD *)v18 + 1)));
    float v66 = v18;
    unsigned int v21 = (unsigned int *)(v18 + 4);
    if (*v18)
    {
      while (1)
      {
        unsigned int v22 = bswap32(v21[1]);
        uint64_t v23 = a3 - v22;
        if (a3 < v22) {
          break;
        }
        unsigned int v24 = *v21;
        v21 += 2;
        v20 += bswap32(v24);
        a3 = a3 - v22;
        if (!--v19) {
          goto LABEL_28;
        }
      }
    }
    uint64_t v23 = a3;
LABEL_28:
    uint64_t v40 = 0;
    *a6 = v23 | ((unint64_t)(v21 - *((_DWORD *)this + 7608)) << 32);
    if (v19 && v9)
    {
      LODWORD(v40) = 0;
      do
      {
        unsigned int v41 = *v21;
        uint64_t v42 = bswap32(v21[1]);
        unsigned int v43 = v42 - v23;
        if ((int)v42 - (int)v23 >= v9) {
          unsigned int v44 = v9;
        }
        else {
          unsigned int v44 = v42 - v23;
        }
        *((void *)this + 3820) += v42;
        unsigned int v45 = MEOWSampleCache::Samples(*((MEOWSampleCache **)this + 3818), bswap32(v66[1]) >> 16, bswap32(v41), v42, v20, v23, v44);
        memcpy(a5, v45, 2 * v44);
        if (v9 <= v43)
        {
          *a7 = (v44 + v23) | ((unint64_t)(v21 - *((_DWORD *)this + 7608)) << 32);
        }
        else
        {
          uint64_t v23 = 0;
          unsigned int v46 = *v21;
          v21 += 2;
          v20 += bswap32(v46);
          --v19;
        }
        uint64_t v40 = v44 + v40;
        if (!v19) {
          break;
        }
        a5 += v44;
        v9 -= v44;
      }
      while (v9);
    }
  }
  else
  {
    BOOL v27 = a6;
    unsigned int v30 = *v25;
    uint64_t v28 = v25 + 1;
    unsigned int v29 = v30;
    __int16 v31 = __rev16(v30);
    int v32 = (int)bswap32(v30) >> 16;
    if (v26 == 5) {
      unint64_t v33 = v28;
    }
    else {
      unint64_t v33 = 0;
    }
    if (v26 == 5) {
      uint64_t v34 = 0;
    }
    else {
      uint64_t v34 = v28;
    }
    if (v26 == 5) {
      unint64_t v35 = &v33[6 * v31];
    }
    else {
      unint64_t v35 = &v34[3 * v31];
    }
    if (!v29) {
      goto LABEL_48;
    }
    while (v33)
    {
      unsigned int v36 = bswap32(*((_DWORD *)v33 + 2));
      if (a3 < v36)
      {
        int v51 = (int)v33;
        goto LABEL_51;
      }
      unsigned int v37 = bswap32(*((_DWORD *)v33 + 1));
      v33 += 6;
LABEL_25:
      a3 = a3 - v36;
      unint64_t v35 = (unsigned __int16 *)((char *)v35 + v37);
      if (!--v32) {
        goto LABEL_48;
      }
    }
    unsigned int v38 = bswap32(v34[2]);
    if (a3 >= HIWORD(v38))
    {
      unint64_t v33 = 0;
      unsigned int v36 = HIWORD(v38);
      unsigned int v39 = *v34;
      v34 += 3;
      unsigned int v37 = bswap32(v39) >> 16;
      goto LABEL_25;
    }
    unint64_t v33 = 0;
LABEL_48:
    if (v33) {
      int v51 = (int)v33;
    }
    else {
      int v51 = (int)v34;
    }
LABEL_51:
    uint64_t v40 = 0;
    *BOOL v27 = a3 | ((unint64_t)(v51 - *((_DWORD *)this + 7608)) << 32);
    if (v32 && v9)
    {
      LODWORD(v40) = 0;
      while (1)
      {
        if (v33)
        {
          unsigned int v52 = *((_DWORD *)v33 + 1);
          uint64_t v53 = bswap32(*((_DWORD *)v33 + 2));
          if ((int)v53 - (int)a3 >= v9) {
            unsigned int v54 = v9;
          }
          else {
            unsigned int v54 = v53 - a3;
          }
          *((void *)this + 3820) += v53;
          unsigned int v55 = bswap32(*v33) >> 16;
          uint64_t v56 = bswap32(v52);
        }
        else
        {
          uint64_t v53 = bswap32(v34[2]) >> 16;
          if ((int)v53 - (int)a3 >= v9) {
            unsigned int v54 = v9;
          }
          else {
            unsigned int v54 = v53 - a3;
          }
          *((void *)this + 3820) += v53;
          unsigned int v55 = bswap32(v34[1]) >> 16;
          uint64_t v56 = bswap32(*v34) >> 16;
        }
        uint64_t v57 = MEOWSampleCache::Samples(*((MEOWSampleCache **)this + 3818), v55, v56, v53, v35, a3, v54);
        memcpy(a5, v57, 2 * v54);
        unsigned int v58 = v9 - v54;
        if (v9 == v54)
        {
          if (v33)
          {
            int v59 = bswap32(*((_DWORD *)v33 + 2)) - a3;
            int v60 = (int)v33;
            if (v59 != v9) {
              goto LABEL_74;
            }
            if ((__int16)*v33 != -1)
            {
              int v60 = (int)v33;
              if (v59 == v9)
              {
                int v60 = (int)v33;
                if ((__int16)*v33 == -1)
                {
                  int v61 = v33 + 12;
                  goto LABEL_84;
                }
              }
LABEL_74:
              unint64_t v62 = (v9 + a3) | ((unint64_t)(v60 - *((_DWORD *)this + 7608)) << 32);
              goto LABEL_75;
            }
            goto LABEL_77;
          }
          if ((bswap32(v34[2]) >> 16) - a3 != v9 || (__int16)v34[1] != -1)
          {
            int v60 = (int)v34;
            if ((bswap32(v34[2]) >> 16) - a3 != v9) {
              goto LABEL_74;
            }
            int v60 = (int)v34;
            if ((__int16)v34[1] != -1) {
              goto LABEL_74;
            }
            int v61 = v34 + 6;
LABEL_84:
            unint64_t v62 = (unint64_t)(v61 - *((_DWORD *)this + 7608)) << 32;
LABEL_75:
            *a7 = v62;
            goto LABEL_80;
          }
        }
        if (!v33)
        {
          unsigned int v64 = *v34;
          v34 += 3;
          unsigned int v63 = bswap32(v64) >> 16;
          goto LABEL_79;
        }
LABEL_77:
        unsigned int v63 = bswap32(*((_DWORD *)v33 + 1));
        v33 += 6;
LABEL_79:
        a3 = 0;
        unint64_t v35 = (unsigned __int16 *)((char *)v35 + v63);
        --v32;
LABEL_80:
        uint64_t v40 = v54 + v40;
        if (v32)
        {
          a5 += v54;
          v9 -= v54;
          if (v58) {
            continue;
          }
        }
        break;
      }
    }
  }
LABEL_45:
  pthread_mutex_unlock(&sSampleCacheLock);
  return v40;
}

uint64_t MEOWReader::NoSkipDup(MEOWReader *this, unsigned int a2, unsigned int a3)
{
  return bswap32(*(unsigned __int16 *)(*((void *)this + 3816) + 100 * a3 + 2 * a2 + 6)) >> 16;
}

BOOL MEOWReader::IsAlias(void *a1, unint64_t a2, _WORD *a3)
{
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseHeapBasedDemis)) {
    a2 = MEOWReader::HeapDemiForMappedDemi(a1, a2, 0, 0, 1);
  }
  int v6 = *(unsigned char *)(a2 + 1) & 0x3F;
  if (a3 && v6 == 2) {
    *a3 = bswap32(*(unsigned __int16 *)(a2 + 2)) >> 16;
  }
  return v6 == 2;
}

void MEOWReader::GetDistanceCookies(uint64_t a1, unsigned int a2, unsigned int a3, int a4, MEOWVectorBase *a5, void *a6)
{
  int v11 = (unsigned char *)(a1 + 30536);
  unsigned int v12 = *(unsigned __int16 *)(a1 + 30538);
  if (v12 > 1 || (float v16 = 1.0, v15 = 0.5, v12 == 1) && *(unsigned __int16 *)(a1 + 30540) >= 4u)
  {
    for (uint64_t i = *(unsigned __int16 **)(a1 + 30440); *((unsigned char *)i + 2) != 1; i += 2 * (bswap32(*i) >> 16))
      ;
    unsigned int v14 = a3;
    if (!a4) {
      unsigned int v14 = a2;
    }
    float v15 = COERCE_FLOAT(bswap32(*(_DWORD *)&i[4 * v14 + 106])) * 0.5;
    float v16 = 1.0 / expf(COERCE_FLOAT(bswap32(*(_DWORD *)&i[4 * v14 + 104])));
  }
  int v17 = (char)*v11;
  if (v17 == 3) {
    goto LABEL_19;
  }
  if (v17 == 2)
  {
    if (a4) {
      int v20 = 0x10000;
    }
    else {
      int v20 = 0;
    }
    srandom(a2 | (a3 << 8) | v20);
LABEL_19:
    uint64_t v21 = *(void *)(a1 + 30632);
    if (v21) {
      unint64_t v22 = *(unsigned __int8 *)(v21 + 50 * a2 + a3);
    }
    else {
      unint64_t v22 = bswap32(*(unsigned __int16 *)(*(void *)(a1 + 30640) + 100 * a2 + 2 * a3)) >> 16;
    }
    unint64_t v23 = v22;
    if (a6) {
      unint64_t v23 = a6[2];
    }
    unint64_t DemiRecord = MEOWReader::GetDemiRecord((MEOWReader *)a1, a2, a3, 0, a4);
    v44[0] = DemiRecord;
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v43, 2);
    MEOWReader::GetDemi(a1, DemiRecord, a4, (uint64_t)v40);
    if (*((void *)a5 + 3) < v22) {
      MEOWVectorBase::Allocate(a5, v22, 1);
    }
    *((void *)a5 + 2) = v22;
    if (v23)
    {
      for (unint64_t j = 0; j != v23; ++j)
      {
        if (a6)
        {
          unint64_t v26 = *(unsigned __int16 *)(*a6 + 2 * j);
          unint64_t v27 = MEOWReader::GetDemiRecord((MEOWReader *)a1, a2, a3, v26, a4);
          MEOWReader::GetDemi(a1, v27, a4, (uint64_t)v40);
        }
        else if (j)
        {
          MEOWReader::MEOWAdvanceDemi((void *)a1, v44, a2, a3, 1);
          MEOWReader::MEOWAdvanceDemi((void *)a1, v44, a2, a3, 1);
          MEOWReader::GetDemi(a1, v44[0], a4, (uint64_t)v40);
          unint64_t v26 = j;
        }
        else
        {
          unint64_t v26 = 0;
        }
        uint64_t v28 = *(void *)a5;
        *(_DWORD *)(*(void *)a5 + 60 * v26 + 56) = v41 | 0x40000000;
        if (*v11 == 2) {
          *(float *)(*(void *)a5 + 60 * v--*(_WORD *)(this + 26) = (float)random() * 1.0842e-19;
        }
        else {
          *(float *)(v28 + 60 * v--*(_WORD *)(this + 26) = (float)(a4 ^ 1u);
        }
      }
    }
    goto LABEL_52;
  }
  if (*v11) {
    return;
  }
  uint64_t v18 = *(void *)(a1 + 30632);
  if (v18) {
    unint64_t v19 = *(unsigned __int8 *)(v18 + 50 * a2 + a3);
  }
  else {
    unint64_t v19 = bswap32(*(unsigned __int16 *)(*(void *)(a1 + 30640) + 100 * a2 + 2 * a3)) >> 16;
  }
  unint64_t v29 = v19;
  if (a6) {
    unint64_t v29 = a6[2];
  }
  if (!v29)
  {
    *((void *)a5 + 2) = 0;
    return;
  }
  unint64_t v30 = MEOWReader::GetDemiRecord((MEOWReader *)a1, a2, a3, 0, a4);
  v44[0] = v30;
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v43, 2);
  unint64_t v38 = v30;
  MEOWReader::GetDemi(a1, v30, a4, (uint64_t)v40);
  if (!v42)
  {
    fwrite("MacinTalk: Voice has no distance information!\n", 0x2EuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    abort();
  }
  if (*((void *)a5 + 3) < v19) {
    MEOWVectorBase::Allocate(a5, v19, 1);
  }
  uint64_t v31 = 0;
  unint64_t v32 = 0;
  *((void *)a5 + 2) = v19;
  do
  {
    unint64_t v33 = v29;
    if (a6)
    {
      unint64_t v34 = *(unsigned __int16 *)(*a6 + 2 * v32);
      uint64_t v35 = *(void *)a5;
      unint64_t v36 = MEOWReader::GetDemiRecord((MEOWReader *)a1, a2, a3, v34, a4);
      MEOWReader::GetDemiCookie(a1, v36, a4, 0, v35 + 60 * v34);
    }
    else
    {
      if (v32)
      {
        MEOWReader::MEOWAdvanceDemi((void *)a1, v44, a2, a3, 1);
        MEOWReader::MEOWAdvanceDemi((void *)a1, v44, a2, a3, 1);
        unint64_t v38 = v44[0];
      }
      MEOWReader::GetDemiCookie(a1, v38, a4, 0, *(void *)a5 + v31);
      unint64_t v34 = v32;
    }
    uint64_t v37 = *(void *)a5 + 60 * v34;
    *(_DWORD *)(v37 + 56) |= 0x80000000;
    *(float *)(v37 + 44) = v16;
    *(float *)(v37 + 48) = v15;
    ++v32;
    v31 += 60;
    unint64_t v29 = v33;
  }
  while (v33 != v32);
LABEL_52:
  MEOWVectorBase::~MEOWVectorBase(v43);
}

void sub_1DA4B74B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, MEOWVectorBase *a10)
{
}

void MEOWReader::GetDistanceCookie(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4, int a5, uint64_t a6)
{
  unsigned int v12 = (unsigned char *)(a1 + 30536);
  unsigned int v13 = *(unsigned __int16 *)(a1 + 30538);
  if (v13 > 1 || (v17 = 1.0, float v16 = 0.5, v13 == 1) && *(unsigned __int16 *)(a1 + 30540) >= 4u)
  {
    for (uint64_t i = *(unsigned __int16 **)(a1 + 30440); *((unsigned char *)i + 2) != 1; i += 2 * (bswap32(*i) >> 16))
      ;
    if (a5) {
      unsigned int v15 = a3;
    }
    else {
      unsigned int v15 = a2;
    }
    float v16 = COERCE_FLOAT(bswap32(*(_DWORD *)&i[4 * v15 + 106])) * 0.5;
    float v17 = 1.0 / expf(COERCE_FLOAT(bswap32(*(_DWORD *)&i[4 * v15 + 104])));
  }
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v28, 2);
  unint64_t DemiRecord = MEOWReader::GetDemiRecord((MEOWReader *)a1, a2, a3, a4, a5);
  MEOWReader::GetDemi(a1, DemiRecord, a5, (uint64_t)v23);
  int v19 = (char)*v12;
  if (!*v12)
  {
    MEOWSVDDistanceEncoder::UnpackCookie(v25, (float *)a6);
    *(unsigned char *)(a6 + 52) = v27;
    *(unsigned char *)(a6 + 53) = v26 >> 7;
    *(_DWORD *)(a6 + 56) = v24 | 0x80000000;
    *(float *)(a6 + 44) = v17;
    *(float *)(a6 + 48) = v16;
    goto LABEL_24;
  }
  if (v19 == 2)
  {
    if (a5) {
      int v21 = 0x10000;
    }
    else {
      int v21 = 0;
    }
    srandom(a2 | (a3 << 8) | v21);
    int v20 = *v12;
  }
  else
  {
    if (v19 != 3) {
      goto LABEL_24;
    }
    int v20 = 3;
  }
  *(_DWORD *)(a6 + 56) = v24 | 0x40000000;
  if (v20 == 2) {
    float v22 = (float)random() * 1.0842e-19;
  }
  else {
    float v22 = (float)(a5 ^ 1u);
  }
  *(float *)a6 = v22;
LABEL_24:
  MEOWVectorBase::~MEOWVectorBase(v28);
}

void sub_1DA4B76AC(_Unwind_Exception *a1)
{
  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

uint64_t MEOWReader::GetAdjacent(MEOWReader *this, unsigned int a2, unsigned int a3, int a4, MEOWVectorBase *a5, MEOWVectorBase *a6)
{
  uint64_t v11 = *((void *)this + 3829);
  if (v11) {
    unint64_t v12 = *(unsigned __int8 *)(v11 + 50 * a2 + a3);
  }
  else {
    unint64_t v12 = bswap32(*(unsigned __int16 *)(*((void *)this + 3830) + 100 * a2 + 2 * a3)) >> 16;
  }
  uint64_t result = MEOWReader::GetDemiRecord(this, a2, a3, 0, a4);
  unint64_t v14 = result;
  uint64_t v16 = result;
  if (*((void *)a5 + 3) < v12) {
    uint64_t result = (uint64_t)MEOWVectorBase::Allocate(a5, v12, 1);
  }
  *((void *)a5 + 2) = v12;
  if (*((void *)a6 + 3) >= v12)
  {
    *((void *)a6 + 2) = v12;
    if (!v12) {
      return result;
    }
  }
  else
  {
    MEOWVectorBase::Allocate(a6, v12, 1);
    *((void *)a6 + 2) = v12;
  }
  uint64_t v15 = 0;
  do
  {
    if (v15)
    {
      MEOWReader::MEOWAdvanceDemi(this, (unint64_t *)&v16, a2, a3, 1);
      MEOWReader::MEOWAdvanceDemi(this, (unint64_t *)&v16, a2, a3, 1);
      unint64_t v14 = v16;
    }
    uint64_t result = MEOWReader::GetAdjacent(this, v14, (unsigned char *)(*(void *)a5 + v15), (char *)(*(void *)a6 + v15));
    ++v15;
  }
  while (v12 != v15);
  return result;
}

uint64_t MEOWReader::DescribeDemi(MEOWReader *a1, unsigned int a2, unsigned int a3, unint64_t a4, int a5, uint64_t a6, uint64_t a7, MEOWVectorBase *a8)
{
  unint64_t DemiRecord = MEOWReader::GetDemiRecord(a1, a2, a3, a4, a5);
  MEOWReader::GetDemi((uint64_t)a1, DemiRecord, a5, a6);
  uint64_t v17 = *(void *)(a6 + 24);
  if (v17)
  {
    if (a5)
    {
      uint64_t v18 = v17 - 1;
      if (v17 != 1)
      {
        int v19 = *(_DWORD *)(a6 + 40);
        uint64_t v20 = 2 * v17 - 2;
        int v21 = *(__int16 **)(a6 + 32);
        do
        {
          __int16 v22 = *v21++;
          v19 += v22 & 0x7FFF;
          --v18;
        }
        while (v18);
        *(void *)(a6 + 32) += v20;
        *(_DWORD *)(a6 + 40) = v19;
      }
      if (!*(unsigned char *)(a6 + 8))
      {
        *(_DWORD *)(a6 + 40) = *(_DWORD *)(a6 + 40) + (**(_WORD **)(a6 + 32) & 0x7FFF) - 110;
LABEL_16:
        return MEOWReader::GetVoicelessPPs(a1, (int *)a6, a7, a8);
      }
    }
    else
    {
      *(void *)(a6 + 32) += 2 * *(void *)(a6 + 16);
      if (!*(unsigned char *)(a6 + 8)) {
        goto LABEL_16;
      }
    }
    return MEOWReader::GetVoicedPPs(a1, a6, a7, a8);
  }
  else
  {
    uint64_t v23 = 60;
    if (a5) {
      uint64_t v23 = 62;
    }
    return fprintf((FILE *)*MEMORY[0x1E4F143C8], "Empty demi %d%c%d#%lu\n", a2, v23, a3, a4);
  }
}

uint64_t MEOWReader::GetVoicedPPs(MEOWReader *this, uint64_t a2, uint64_t a3, MEOWVectorBase *a4)
{
  char v8 = *(uint16x4_t **)(a2 + 32);
  int v9 = v8[-1].u16[2] + v8[-1].u16[1] + v8[-1].u16[3];
  int v10 = vaddvq_s32((int32x4_t)vmovl_u16(*v8));
  unint64_t v11 = (v10 + v9);
  if (*((void *)a4 + 3) < v11)
  {
    MEOWVectorBase::Allocate(a4, (v10 + v9), 1);
    int v9 = v8[-1].u16[1] + v8[-1].u16[2] + v8[-1].u16[3];
  }
  *((void *)a4 + 2) = v11;
  uint64_t result = MEOWReader::ReadSamples(this, *(_DWORD *)a2, (*(_DWORD *)(a2 + 40) - v9), v11, *(__int16 **)a4, &v18, &v17);
  int v13 = 0;
  unint64_t v14 = (unsigned char *)(a3 + 8);
  for (uint64_t i = 0x7FFFFFFFFFFFFFFDLL; i != 4; ++i)
  {
    *((_DWORD *)v14 - 2) = v13;
    *unint64_t v14 = 0;
    int v16 = v8->u16[i];
    *((_DWORD *)v14 - 1) = v16;
    v13 += v16;
    v14 += 12;
  }
  return result;
}

uint64_t MEOWReader::GetVoicelessPPs(MEOWReader *this, int *a2, uint64_t a3, MEOWVectorBase *a4)
{
  if (*((void *)a4 + 3) <= 0x301uLL) {
    MEOWVectorBase::Allocate(a4, 0x302uLL, 1);
  }
  *((void *)a4 + 2) = 770;
  uint64_t result = MEOWReader::ReadSamples(this, *a2, (a2[10] - 330), 0x302u, *(__int16 **)a4, &v12, &v11);
  uint64_t v9 = 0;
  int v10 = (unsigned char *)(a3 + 8);
  do
  {
    *((_DWORD *)v10 - 2) = v9;
    *((_DWORD *)v10 - 1) = 110;
    *int v10 = 1;
    v10 += 12;
    v9 += 110;
  }
  while (v9 != 770);
  return result;
}

void MEOWReader::GetUnitCosts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEOWUnitCostWindow::MEOWUnitCostWindow((MEOWUnitCostWindow *)v6, a5 + a4, 1, 0.0);
  SLML::Vector<float>::Vector(&v5, 0);
}

void sub_1DA4B8094(_Unwind_Exception *a1)
{
  SLML::Storage<float>::RemoveReference(*(void *)(v1 - 168));
  MEOWVectorBase::~MEOWVectorBase((void **)(v1 - 152));
  _Unwind_Resume(a1);
}

void MEOWReader::GetUnitCost(MEOWReader *a1, unsigned int a2, unsigned int a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  MEOWUnitCostWindow::MEOWUnitCostWindow((MEOWUnitCostWindow *)v12, a6 + a5, 1, 0.0);
  v11[4] = MEOWReader::GetDemiRecord(a1, a2, a3, a4, 0);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v11, 2);
  SLML::Vector<float>::Vector(&v10, 0);
}

void sub_1DA4B8358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14)
{
  MEOWVectorBase::~MEOWVectorBase(a12);
  MEOWVectorBase::~MEOWVectorBase((void **)(v14 - 136));
  _Unwind_Resume(a1);
}

void MEOWReader::GetSpectralCosts(MEOWReader *this, int a2, unsigned int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, float *a8)
{
  unint64_t v12 = (uint64_t *)*((void *)this + 3819);
  if (v12 && (MEOWSpectralCost::GetSpectralCookie(v12, a2, a3, a4, a7, v21) & 1) != 0)
  {
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v19, 60);
    MEOWReader::GetDistanceCookies((uint64_t)this, a5, a6, a7, (MEOWVectorBase *)v19, 0);
    if (v20)
    {
      uint64_t v14 = 0;
      for (unint64_t i = 0; i < v20; ++i)
      {
        float v16 = MEOWRawSVDDistance(v21, (float *)((char *)v19[0] + v14));
        a8[i] = powf(v16, 0.33333);
        v14 += 60;
      }
    }
    MEOWVectorBase::~MEOWVectorBase(v19);
  }
  else
  {
    uint64_t v17 = *((void *)this + 3829);
    if (v17) {
      uint64_t v18 = *(unsigned __int8 *)(v17 + 50 * a5 + a6);
    }
    else {
      uint64_t v18 = bswap32(*(unsigned __int16 *)(*((void *)this + 3830) + 100 * a5 + 2 * a6)) >> 16;
    }
    bzero(a8, 4 * v18);
  }
}

void sub_1DA4B84B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void MEOWReader::GetSpectralCost(MEOWReader *this, int a2, unsigned int a3, int a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, float *a9)
{
  uint64_t v10 = (uint64_t *)*((void *)this + 3819);
  if (v10 && (MEOWSpectralCost::GetSpectralCookie(v10, a2, a3, a4, a8, v17) & 1) != 0)
  {
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v16, 60);
    MEOWReader::GetDistanceCookies((uint64_t)this, a5, a6, a8, (MEOWVectorBase *)v16, 0);
    float v15 = MEOWRawSVDDistance(v17, (float *)v16[0] + 15 * a7);
    *a9 = powf(v15, 0.33333);
    MEOWVectorBase::~MEOWVectorBase(v16);
  }
  else
  {
    *a9 = 0.0;
  }
}

void sub_1DA4B8588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t MEOWReader::SubstituteDemis(MEOWReader *this, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  uint64_t v8 = *a2;
  uint64_t v9 = *a3;
  uint64_t v10 = *((void *)this + 3829);
  if (!v10)
  {
    uint64_t v12 = *((void *)this + 3830);
    if (*(_WORD *)(v12 + 100 * *a2 + 2 * v9))
    {
      uint64_t v11 = bswap32(*(unsigned __int16 *)(v12 + 100 * *a3 + 2 * *a4)) >> 16;
      goto LABEL_6;
    }
LABEL_8:
    uint64_t v13 = 1;
    goto LABEL_9;
  }
  if (!*(unsigned char *)(v10 + 50 * *a2 + v9)) {
    goto LABEL_8;
  }
  uint64_t v11 = *(unsigned __int8 *)(v10 + 50 * *a3 + *a4);
LABEL_6:
  uint64_t v13 = 0;
  if (v11) {
    return v13;
  }
  uint64_t v13 = 0;
LABEL_9:
  int v14 = v9 - 2;
  if (!(!v7 & v6))
  {
    unsigned int v15 = 8;
    switch(v14)
    {
      case 0:
        unsigned int v15 = 3;
        if (!v10) {
          goto LABEL_32;
        }
        goto LABEL_28;
      case 1:
        unsigned int v15 = 2;
        goto LABEL_27;
      case 2:
LABEL_27:
        if (v10) {
          goto LABEL_28;
        }
        goto LABEL_32;
      case 3:
        unsigned int v15 = 20;
        if (!v10) {
          goto LABEL_32;
        }
        goto LABEL_28;
      default:
        JUMPOUT(0);
    }
  }
  switch(*a3)
  {
    case 0x14u:
      unsigned int v15 = 5;
      if (v10) {
        goto LABEL_28;
      }
      goto LABEL_32;
    case 0x15u:
    case 0x16u:
    case 0x19u:
    case 0x1Au:
      goto LABEL_35;
    case 0x17u:
      unsigned int v15 = 24;
      if (!v10) {
        goto LABEL_32;
      }
      goto LABEL_28;
    case 0x18u:
      unsigned int v15 = 23;
      if (!v10) {
        goto LABEL_32;
      }
      goto LABEL_28;
    case 0x1Bu:
      unsigned int v15 = 26;
      if (!v10) {
        goto LABEL_32;
      }
      goto LABEL_28;
    default:
      if (v9 != 47) {
        goto LABEL_35;
      }
      unsigned int v15 = 32;
      if (v10)
      {
LABEL_28:
        if (*(unsigned char *)(v10 + 50 * *a2 + v15) && *(unsigned char *)(v10 + 50 * v15 + *a4)) {
          goto LABEL_34;
        }
      }
      else
      {
LABEL_32:
        uint64_t v16 = *((void *)this + 3830);
        if (*(_WORD *)(v16 + 100 * *a2 + 2 * v15)
          && bswap32(*(unsigned __int16 *)(v16 + 100 * v15 + 2 * *a4)) >> 16)
        {
LABEL_34:
          *a3 = v15;
          return 2;
        }
      }
LABEL_35:
      if (!v13) {
        return v13;
      }
      uint64_t v17 = 1;
LABEL_37:
      uint64_t v18 = 0;
      uint64_t v19 = 42;
      break;
  }
  while (1)
  {
    if (v10)
    {
      if (*(unsigned char *)(v10 + 50 * v8 + v19)) {
        break;
      }
      goto LABEL_42;
    }
    if (bswap32(*(unsigned __int16 *)(*((void *)this + 3830) + 100 * v8 + 2 * v19)) >> 16) {
      break;
    }
LABEL_42:
    uint64_t v19 = asc_1DA50D918[++v18];
    if (v18 == 4)
    {
      uint64_t v20 = 0;
      *a5 = 0;
      do
      {
        uint64_t v21 = *((void *)this + 3829);
        if (v21)
        {
          if (*(unsigned char *)(v21 + 50 * *a2 + v20)) {
            goto LABEL_51;
          }
        }
        else if (bswap32(*(unsigned __int16 *)(*((void *)this + 3830) + 100 * *a2 + 2 * v20)) >> 16)
        {
          goto LABEL_51;
        }
        *a5 = ++v20;
      }
      while (v20 != 50);
      return 0xFFFFFFFFLL;
    }
  }
  *a5 = v19;
  uint64_t v21 = *((void *)this + 3829);
LABEL_51:
  uint64_t v22 = 0;
  uint64_t v23 = *a3;
  uint64_t v24 = 42;
  do
  {
    if (v21)
    {
      if (*(unsigned char *)(v21 + 50 * v24 + v23)) {
        goto LABEL_69;
      }
    }
    else if (bswap32(*(unsigned __int16 *)(*((void *)this + 3830) + 100 * v24 + 2 * v23)) >> 16)
    {
LABEL_69:
      *a6 = v24;
      return v17;
    }
    uint64_t v24 = asc_1DA50D918[++v22];
  }
  while (v22 != 4);
  uint64_t v25 = 0;
  *a6 = 0;
  uint64_t v26 = 1;
  do
  {
    uint64_t v27 = *a3;
    uint64_t v28 = *((void *)this + 3829);
    if (v28)
    {
      if (*(unsigned char *)(v28 + v27 + v25)) {
        return v17;
      }
    }
    else if (bswap32(*(unsigned __int16 *)(*((void *)this + 3830) + 2 * v27 + 2 * v25)) >> 16)
    {
      return v17;
    }
    *a6 = v26;
    v25 += 50;
    ++v26;
  }
  while (v25 != 2500);
  if (!*a3) {
    return 0xFFFFFFFFLL;
  }
  *a3 = 0;
  uint64_t v8 = *a2;
  uint64_t v10 = *((void *)this + 3829);
  if (v10) {
    uint64_t v29 = *(unsigned __int8 *)(v10 + 50 * *a2);
  }
  else {
    uint64_t v29 = bswap32(*(unsigned __int16 *)(*((void *)this + 3830) + 100 * *a2)) >> 16;
  }
  uint64_t v13 = 2;
  uint64_t v17 = 3;
  if (!v29) {
    goto LABEL_37;
  }
  return v13;
}

uint64_t MEOWReader::SubstituteFirst(MEOWReader *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  while (1)
  {
    *a2 = 42;
    uint64_t v3 = *a3;
    uint64_t v4 = *((void *)this + 3829);
    if (!v4) {
      break;
    }
    uint64_t v5 = *(unsigned __int8 *)(v4 + v3 + 2100);
    if (v5) {
      return 1;
    }
LABEL_5:
    *a2 = 0;
    uint64_t v6 = 1;
    do
    {
      uint64_t v7 = *a3;
      uint64_t v8 = *((void *)this + 3829);
      if (v8)
      {
        if (*(unsigned char *)(v8 + v7 + v5)) {
          return 1;
        }
      }
      else if (bswap32(*(unsigned __int16 *)(*((void *)this + 3830) + 2 * v7 + 2 * v5)) >> 16)
      {
        return 1;
      }
      *a2 = v6;
      v5 += 50;
      ++v6;
    }
    while (v5 != 2500);
    *a3 = 0;
  }
  uint64_t v5 = bswap32(*(unsigned __int16 *)(*((void *)this + 3830) + 2 * v3 + 4200)) >> 16;
  if (!v5) {
    goto LABEL_5;
  }
  return 1;
}

uint64_t MEOWReader::SubstituteSecond(MEOWReader *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  while (1)
  {
    *a3 = 42;
    uint64_t v3 = *((void *)this + 3829);
    if (!v3) {
      break;
    }
    uint64_t v4 = *(unsigned __int8 *)(v3 + 50 * *a2 + 42);
    if (*(unsigned char *)(v3 + 50 * *a2 + 42)) {
      return 1;
    }
LABEL_5:
    *a3 = 0;
    do
    {
      uint64_t v5 = *((void *)this + 3829);
      if (v5)
      {
        if (*(unsigned char *)(v5 + 50 * *a2 + v4)) {
          return 1;
        }
      }
      else if (bswap32(*(unsigned __int16 *)(*((void *)this + 3830) + 100 * *a2 + 2 * v4)) >> 16)
      {
        return 1;
      }
      *a3 = ++v4;
    }
    while (v4 != 50);
    *a2 = 0;
  }
  uint64_t v4 = bswap32(*(unsigned __int16 *)(*((void *)this + 3830) + 100 * *a2 + 84)) >> 16;
  if (!v4) {
    goto LABEL_5;
  }
  return 1;
}

uint64_t MEOWReader::GetWordEntry(uint64_t a1, const char **a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 30512);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 30496);
  uint64_t v6 = v5 + bswap32(*(_DWORD *)(v3 + 16));
  uint64_t v7 = *a2;
  size_t v8 = strlen(*a2);
  uint64_t v9 = v8 >= 5 ? 5 : v8;
  if (v9)
  {
    uint64_t v29 = v5;
    size_t v30 = v8;
    uint64_t v31 = a3;
    unsigned int v10 = *(unsigned __int16 *)(v3 + 2 * v9 + 4);
    do
    {
      size_t v11 = v9--;
      unsigned int v12 = bswap32(v10);
      unsigned int v10 = *(unsigned __int16 *)(v3 + 2 * v9 + 4);
      unsigned int v13 = __rev16(v10);
      unsigned int v14 = HIWORD(v12);
      while (v13 < v14)
      {
        uint64_t v15 = (v14 + v13) >> 1;
        int v16 = memcmp(v7, (const void *)(v6 + 8 * v15), v11);
        if (v16 >= 1) {
          unsigned int v13 = v15 + 1;
        }
        if (v16) {
          int v17 = 0;
        }
        else {
          int v17 = 6;
        }
        if (v16 < 0)
        {
          int v17 = 0;
          unsigned int v14 = v15;
        }
        if (v17)
        {
          a3 = v31;
          goto LABEL_20;
        }
      }
    }
    while (v9);
    size_t v11 = 0;
    uint64_t v15 = 0;
    a3 = v31;
LABEL_20:
    uint64_t v5 = v29;
    size_t v8 = v30;
  }
  else
  {
    size_t v11 = 0;
    uint64_t v15 = 0;
  }
  uint64_t v18 = v5 + bswap32(*(_DWORD *)(v3 + 20)) + bswap32(*(_DWORD *)(v6 + 8 * v15 + 4) & 0xFFFFFF00);
  unsigned int v19 = *(unsigned __int16 *)(v18 + 4);
  *a3 = v18;
  a3[1] = v18;
  if (!v19) {
    return 0;
  }
  unsigned int v20 = 0;
  uint64_t v21 = __rev16(v19);
  uint64_t v22 = v18 + 2 * v21 + 6;
  uint64_t v23 = &v7[v11];
  size_t v24 = v8 - v11;
  while (1)
  {
    uint64_t v25 = (v21 + v20) >> 1;
    uint64_t v26 = (const void *)(v22 + (bswap32(*(unsigned __int16 *)(v18 + (2 * v25) + 6)) >> 16));
    int v27 = memcmp(v23, v26, v24);
    if (v27 < 1) {
      break;
    }
    unsigned int v20 = v25 + 1;
    uint64_t v25 = v21;
LABEL_28:
    uint64_t v21 = v25;
    if (v20 >= v25) {
      return 0;
    }
  }
  if (v27 < 0 || *((unsigned char *)v26 + v24)) {
    goto LABEL_28;
  }
  return (uint64_t)v26 + v24 + 1;
}

uint64_t MEOWReader::GetHomophoneClusterEntry(MEOWReader *this, unint64_t a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v4 = (unsigned __int16 *)*((void *)this + 3815);
  unint64_t v5 = bswap32(*v4) >> 16;
  uint64_t result = *((void *)this + 3812)
         + bswap32(*(_DWORD *)(*((void *)this + 3814) + 20))
         + bswap32(*(_DWORD *)&v4[2 * (a2 / v5) + 2]);
  uint64_t v7 = (char *)(result
              + 6
              + 2 * (bswap32(*(unsigned __int16 *)(result + 4)) >> 16)
              + (bswap32(*(unsigned __int16 *)(result + 6 + 2 * (a2 % v5))) >> 16));
  int v9 = *v7;
  size_t v8 = v7 + 1;
  int v10 = v9;
  if (v9 < 0)
  {
    int v12 = 0;
    do
    {
      int v13 = v10 & 0x7F | (v12 << 7);
      int v14 = *v8++;
      int v10 = v14;
      int v12 = v13;
    }
    while (v14 < 0);
    int v11 = v13 << 7;
  }
  else
  {
    int v11 = 0;
  }
  *a3 = v10 | v11;
  int v15 = *v8;
  if (*v8 < 0)
  {
    int v17 = 0;
    uint64_t v18 = v8 + 1;
    do
    {
      int v19 = v15 & 0x7F | (v17 << 7);
      int v20 = *v18++;
      int v15 = v20;
      int v17 = v19;
    }
    while (v20 < 0);
    int v16 = v19 << 7;
  }
  else
  {
    int v16 = 0;
  }
  *a4 = v15 | v16;
  return result;
}

uint64_t MEOWReader::GetWordDescriptor(uint64_t a1, const char **a2, void *a3)
{
  uint64_t result = MEOWReader::GetWordEntry(a1, a2, a3);
  if (!result) {
    return result;
  }
  uint64_t v112 = *a3;
  uint64_t v6 = *(void *)(a1 + 30512);
  uint64_t v7 = *(void *)(a1 + 30496);
  unsigned int v8 = *(_DWORD *)(v6 + 24);
  unsigned int v9 = *(_DWORD *)(v6 + 28);
  a3[5] = 0;
  int v11 = (char *)(result + 1);
  int v10 = *(unsigned __int8 *)result;
  if ((v10 & 0x80) != 0)
  {
    int v13 = 0;
    do
    {
      int v14 = v10 & 0x7F | (v13 << 7);
      int v15 = *v11++;
      int v10 = v15;
      int v13 = v14;
    }
    while (v15 < 0);
    int v12 = v14 << 7;
  }
  else
  {
    int v12 = 0;
  }
  uint64_t v16 = v10 | v12;
  if (!v16)
  {
    int v87 = v11 + 1;
    int v88 = *v11;
    if (v88 == 128)
    {
      int v89 = *v87;
      int v90 = *v87;
      if (v89 < 0)
      {
        int v96 = 0;
        unsigned int v97 = v11 + 2;
        do
        {
          int v98 = v90 & 0x7F | (v96 << 7);
          int v99 = *v97++;
          int v90 = v99;
          int v96 = v98;
        }
        while (v99 < 0);
        int v91 = v98 << 7;
      }
      else
      {
        int v91 = 0;
      }
      uint64_t v100 = a2;
      *a3 = MEOWReader::GetHomophoneClusterEntry((MEOWReader *)a1, v90 | v91, a3 + 2, a3 + 3);
    }
    else
    {
      if ((v88 & 0x80) != 0)
      {
        int v101 = 0;
        do
        {
          int v102 = v88 & 0x7F | (v101 << 7);
          int v103 = *v87++;
          int v88 = v103;
          int v101 = v102;
        }
        while (v103 < 0);
        int v92 = v102 << 7;
      }
      else
      {
        int v92 = 0;
      }
      uint64_t v100 = a2;
      a3[2] = v88 | v92;
      int v104 = *v87;
      if (*v87 < 0)
      {
        int v106 = 0;
        v107 = v87 + 1;
        do
        {
          int v108 = v104 & 0x7F | (v106 << 7);
          int v109 = *v107++;
          int v104 = v109;
          int v106 = v108;
        }
        while (v109 < 0);
        int v105 = v108 << 7;
      }
      else
      {
        int v105 = 0;
      }
      a3[3] = v104 | v105;
    }
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kDebugHomographs)) {
    return 1;
    }
  }
  unsigned int v113 = a3;
  uint64_t v114 = v7 + bswap32(v8);
  uint64_t v17 = v7 + bswap32(v9);
  int v18 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kDebugHomographs);
  int v19 = (FILE **)MEMORY[0x1E4F143C8];
  if (v18)
  {
    int v20 = "";
    if (*((unsigned char *)a2 + 26)) {
      int v20 = "!";
    }
    uint64_t v21 = *(uint64_t *)((char *)a2 + 10);
    if ((_WORD)v21)
    {
      unint64_t v22 = 0;
      do
      {
        uint64_t v23 = *(uint64_t *)((char *)a2 + 18);
        size_t v24 = *v19;
        *(void *)v120.char var0 = v21;
        *(void *)&v120.var0[4] = v23;
        unint64_t v25 = v22 + 1;
        uint64_t v26 = (const char *)SLTagEng::Name((SLTagEng *)v120.var0[v22 + 1]);
        fprintf(v24, " %s", v26);
        uint64_t v21 = *(uint64_t *)((char *)a2 + 10);
        unint64_t v22 = v25;
      }
      while (v25 < (unsigned __int16)v21);
    }
    fputc(10, *v19);
  }
  int v115 = 0;
  int v27 = 0;
  uint64_t v111 = (MEOWReader *)a1;
  uint64_t v28 = (unsigned char *)(a1 + 30537);
  do
  {
    int v117 = v27;
    uint64_t v29 = v11 + 1;
    int v30 = *v11;
    if (*v11 < 0)
    {
      int v32 = 0;
      do
      {
        int v33 = v30 & 0x7F | (v32 << 7);
        int v34 = *v29++;
        int v30 = v34;
        int v32 = v33;
      }
      while (v34 < 0);
      int v31 = v33 << 7;
    }
    else
    {
      int v31 = 0;
    }
    uint64_t v35 = a2;
    unsigned int v36 = *(_DWORD *)(v114 + 4 * (v30 | v31));
    unsigned int v37 = bswap32(v36);
    if (v36) {
      int v38 = 41;
    }
    else {
      int v38 = 0;
    }
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kDebugHomographs))
    {
      uint64_t v39 = v16;
      fwrite("  {", 3uLL, 1uLL, *v19);
      uint64_t v40 = 0;
      int v41 = "";
      do
      {
        if ((v37 >> v40))
        {
          fprintf(*v19, "%s%s", v41, *(const char **)(MEMORY[0x1E4FA5840] + 8 * v40));
          int v41 = ", ";
        }
        ++v40;
      }
      while (v40 != 32);
      fputc(125, *v19);
      uint64_t v16 = v39;
    }
    unsigned int v42 = *((unsigned __int8 *)a2 + 8);
    if (((v37 >> v42) & 1) == 0)
    {
      if (*((unsigned char *)a2 + 26)
        && (v42 == 19 && (v37 & 0x80) != 0
         || v42 <= 1 && (v37 & 0x10C) != 0
         || v42 == 6 && (v37 & 1) != 0
         || !*((unsigned char *)a2 + 8) && (v37 & 0x12000) != 0))
      {
        v38 -= 10;
      }
      else
      {
        v38 -= 50;
      }
    }
    unsigned __int8 v118 = 0;
    uint64_t v43 = v16 - 1;
    while (1)
    {
      int v44 = *v29++;
      int v45 = v44;
      if (v44 < 0)
      {
        int v47 = 0;
        do
        {
          int v48 = v45 & 0x7F | (v47 << 7);
          int v49 = *v29++;
          int v45 = v49;
          int v47 = v48;
        }
        while (v49 < 0);
        __int16 v46 = (_WORD)v48 << 7;
      }
      else
      {
        __int16 v46 = 0;
      }
      unsigned int v50 = v45 | v46 & 0xFF80;
      if (!v50) {
        break;
      }
      unsigned int v51 = bswap32(*(unsigned __int16 *)(v17 + 2 * v50)) >> 16;
      if (*v28)
      {
LABEL_52:
        if ((_WORD)v51)
        {
          SLWordTagSet v120 = *(SLWordTagSet *)((char *)v35 + 10);
          if (SLWordTagSet::find(&v120))
          {
            if ((v51 & 0xFFFE) == 0x42) {
              int v52 = -10;
            }
            else {
              int v52 = -50;
            }
            v38 += v52;
            uint64_t v53 = 45;
          }
          else
          {
            SLWordTagSet v120 = *(SLWordTagSet *)((char *)v35 + 10);
            if (SLWordTagSet::find(&v120))
            {
              v38 += 5;
              uint64_t v53 = 43;
LABEL_60:
              uint64_t v35 = a2;
              goto LABEL_65;
            }
            if ((unsigned __int16)v51 != 74)
            {
              if ((v51 & 0xFFFE) == 0x48)
              {
                v38 -= 50;
                uint64_t v53 = 32;
              }
              else
              {
                if (v51) {
                  --v38;
                }
                else {
                  v38 -= 2;
                }
                uint64_t v53 = 63;
              }
              goto LABEL_60;
            }
            uint64_t v35 = a2;
            SLWordTagSet v120 = *(SLWordTagSet *)((char *)a2 + 10);
            int v54 = SLWordTagSet::find(&v120);
            v118 |= v54 ^ 1;
            if (v54) {
              v38 -= 50;
            }
            uint64_t v53 = 63;
          }
LABEL_65:
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kDebugHomographs))
          {
            unsigned int v55 = *v19;
            size_t v110 = (const char *)SLTagEng::Name((SLTagEng *)(unsigned __int16)v51);
            uint64_t v56 = v55;
            uint64_t v35 = a2;
            fprintf(v56, " %s%c", v110, v53);
          }
        }
      }
      else if (v51 - 34 <= 0x21)
      {
        LOWORD(v51) = *(_WORD *)((char *)&sTagMappings + ((v51 - 34) & 0xFFFFFFFE)) | v51 & 1;
        goto LABEL_52;
      }
    }
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kDebugHomographs)) {
      fprintf(*v19, " -> %d", v38);
    }
    unint64_t v119 = 0;
    *(void *)v120.char var0 = 0;
    unsigned int v58 = v29 + 1;
    int v57 = *v29;
    uint64_t v16 = v43;
    if (v57 == 128)
    {
      int v11 = v29 + 2;
      int v59 = v29[1];
      if (v29[1] < 0)
      {
        int v63 = 0;
        int v27 = v117;
        unsigned __int8 v61 = v118;
        do
        {
          int v64 = v59 & 0x7F | (v63 << 7);
          int v65 = *v11++;
          int v59 = v65;
          int v63 = v64;
        }
        while (v65 < 0);
        int v60 = v64 << 7;
      }
      else
      {
        int v60 = 0;
        int v27 = v117;
        unsigned __int8 v61 = v118;
      }
      *(void *)v120.char var0 = v59 | v60;
      if ((v61 & (v38 > v27)) != 0 || v38 > v115) {
        uint64_t HomophoneClusterEntry = MEOWReader::GetHomophoneClusterEntry(v111, v59 | v60, (unint64_t *)v120.var0, &v119);
      }
      else {
        uint64_t HomophoneClusterEntry = 0;
      }
    }
    else
    {
      if ((v57 & 0x80) != 0)
      {
        int v67 = 0;
        int v27 = v117;
        do
        {
          int v68 = v57 & 0x7F | (v67 << 7);
          int v69 = *v58++;
          int v57 = v69;
          int v67 = v68;
        }
        while (v69 < 0);
        int v62 = v68 << 7;
      }
      else
      {
        int v62 = 0;
        int v27 = v117;
      }
      unsigned __int8 v61 = v118;
      *(void *)v120.char var0 = v57 | v62;
      int v70 = *v58;
      int v11 = v58 + 1;
      int v71 = v70;
      if (v70 < 0)
      {
        int v73 = 0;
        do
        {
          int v74 = v71 & 0x7F | (v73 << 7);
          int v75 = *v11++;
          int v71 = v75;
          int v73 = v74;
        }
        while (v75 < 0);
        int v72 = v74 << 7;
      }
      else
      {
        int v72 = 0;
      }
      uint64_t HomophoneClusterEntry = 0;
      unint64_t v119 = v71 | v72;
    }
    if ((v61 & (v38 > v27)) == 1)
    {
      uint64_t v76 = v112;
      if (HomophoneClusterEntry) {
        uint64_t v76 = HomophoneClusterEntry;
      }
      v113[1] = v76;
      unint64_t v77 = v119;
      v113[4] = *(void *)v120.var0;
      v113[5] = v77;
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kDebugHomographs))
      {
        int v78 = 63;
        int v27 = v38;
        goto LABEL_106;
      }
      int v27 = v38;
    }
    else if (v38 > v115)
    {
      uint64_t v79 = v112;
      if (HomophoneClusterEntry) {
        uint64_t v79 = HomophoneClusterEntry;
      }
      *unsigned int v113 = v79;
      unint64_t v80 = v119;
      v113[2] = *(void *)v120.var0;
      v113[3] = v80;
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kDebugHomographs))
      {
        int v78 = 33;
        int v115 = v38;
LABEL_106:
        fputc(v78, *v19);
      }
      else
      {
        int v115 = v38;
      }
    }
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kDebugHomographs)) {
      fputc(10, *v19);
    }
  }
  while (v16);
  if (v27 < 1)
  {
    char v81 = v113;
  }
  else
  {
    char v81 = v113;
    if (v27 < v115 - 3) {
      goto LABEL_128;
    }
    if (v115 <= 0)
    {
      *unsigned int v113 = v113[1];
      uint64_t v86 = v113[5];
      v113[2] = v113[4];
      goto LABEL_127;
    }
    if (*v113 == v113[1])
    {
      uint64_t v83 = v113[2];
      uint64_t v82 = v113[3];
      uint64_t v85 = v113[4];
      uint64_t v84 = v113[5];
      if (v85 == v82 + v83) {
        goto LABEL_119;
      }
      if (v83 == v84 + v85)
      {
        v113[2] = v85;
LABEL_119:
        uint64_t v86 = v84 + v82;
        int v27 = v115;
LABEL_127:
        v113[3] = v86;
        int v115 = v27;
LABEL_128:
        v113[5] = 0;
      }
    }
  }
  int v93 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kDebugHomographs);
  int v94 = v115;
  if (v93)
  {
    if (v115 < 1)
    {
      fwrite("  -> No matching instances.\n", 0x1CuLL, 1uLL, *v19);
    }
    else
    {
      uint64_t v95 = *v19;
      if (v81[5]) {
        fprintf(v95, "  -> %lu@%lu, %lu@%lu\n");
      }
      else {
        fprintf(v95, "  -> %lu@%lu\n");
      }
    }
    int v94 = v115;
  }
  return v94 > 0;
}

uint64_t MEOWReader::TranslateTag(MEOWReader *this, uint64_t a2)
{
  if (!*((unsigned char *)this + 30537))
  {
    if ((a2 - 34) > 0x21) {
      return 0;
    }
    else {
      return *(unsigned __int16 *)((char *)&sTagMappings + ((a2 - 34) & 0xFFFFFFFE)) | (a2 & 1);
    }
  }
  return a2;
}

void MEOWReader::GetWordData(int a1, unsigned __int16 **a2, MEOWVectorBase *this, void **a4)
{
  uint64_t v7 = (char *)*a2 + (bswap32((*a2)[1]) >> 16);
  unsigned int v8 = (char *)*a2 + (bswap32(**a2) >> 16);
  int v10 = (void **)(a2 + 5);
  unsigned int v9 = a2[5];
  if (v9)
  {
    int v11 = a2[1];
    int v12 = (char *)v11 + (bswap32(v11[1]) >> 16);
    int v13 = (char *)v11 + (bswap32(*v11) >> 16);
    int v14 = a2[3];
    if (v14)
    {
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,MEOWWordInstance const*,MEOWWordInstance const*,std::back_insert_iterator<MEOWVector<MEOWWordInstance>>,0>((uint64_t *)&v7[8 * (void)a2[2]], (uint64_t *)&v7[8 * (void)a2[2] + 8 * (void)v14], this);
      int v15 = a2[3];
      if (v15)
      {
        uint64_t v16 = (char *)a2[2] + (void)v8;
        do
        {
          char v17 = *v16++;
          MEOWVectorBase::Append(a4);
          *((unsigned char *)a4[2] + (void)*a4 - 1) = v17;
          int v15 = (unsigned __int16 *)((char *)v15 - 1);
        }
        while (v15);
      }
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,MEOWWordInstance const*,MEOWWordInstance const*,std::back_insert_iterator<MEOWVector<MEOWWordInstance>>,0>((uint64_t *)&v12[8 * (void)a2[4]], (uint64_t *)&v12[8 * (void)a2[4] + 8 * (void)a2[5]], this);
      int v18 = a2[5];
      if (v18)
      {
        int v19 = (char *)a2[4] + (void)v13;
        do
        {
          char v20 = *v19++;
          MEOWVectorBase::Append(a4);
          *((unsigned char *)a4[2] + (void)*a4 - 1) = v20;
          int v18 = (unsigned __int16 *)((char *)v18 - 1);
        }
        while (v18);
      }
      return;
    }
    uint64_t v21 = a2 + 4;
    MEOWVectorBase::Map((void **)this, &v12[8 * (void)a2[4]], v9);
  }
  else
  {
    uint64_t v21 = a2 + 2;
    int v10 = (void **)(a2 + 3);
    MEOWVectorBase::Map((void **)this, &v7[8 * (void)a2[2]], a2[3]);
    int v13 = v8;
  }
  unint64_t v22 = &v13[*v21];
  uint64_t v23 = *v10;

  MEOWVectorBase::Map(a4, v22, v23);
}

void MEOWReader::GetWordData(uint64_t a1, void *a2, unint64_t a3, _DWORD *a4)
{
  unint64_t v4 = a2[3];
  BOOL v5 = v4 > a3;
  if (v4 <= a3) {
    unint64_t v6 = a2[4] - v4;
  }
  else {
    unint64_t v6 = a2[2];
  }
  unint64_t v7 = v6 + a3;
  if (v5) {
    unsigned int v8 = a2;
  }
  else {
    unsigned int v8 = a2 + 1;
  }
  unsigned int v9 = (_DWORD *)(*v8 + (bswap32(*(unsigned __int16 *)(*v8 + 2)) >> 16) + 8 * v7);
  *a4 = *v9;
  a4[1] = v9[1];
}

void MEOWReader::GetWordData(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  unint64_t v4 = a2[3];
  BOOL v5 = v4 > a3;
  if (v4 <= a3) {
    unint64_t v6 = a2[4] - v4;
  }
  else {
    unint64_t v6 = a2[2];
  }
  unint64_t v7 = v6 + a3;
  if (v5) {
    unsigned int v8 = a2;
  }
  else {
    unsigned int v8 = a2 + 1;
  }
  *a4 = *v8 + (bswap32(*(unsigned __int16 *)(*v8 + 2)) >> 16) + 8 * v7;
}

void MEOWReader::GetWordGlue(MEOWReader *a1, unsigned __int8 *a2, uint64_t a3)
{
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v9, 2);
  MEOWReader::GetDemi(a1, a2, 1, (uint64_t)v6);
  *(unsigned char *)a3 = v7;
  *(_WORD *)(a3 + 2) = bswap32(v8) >> 16;
  MEOWReader::GetDemi(a1, a2 + 4, 0, (uint64_t)v6);
  *(unsigned char *)(a3 + 1) = v7;
  *(_WORD *)(a3 + 4) = bswap32(v8) >> 16;
  MEOWVectorBase::~MEOWVectorBase(v9);
}

void sub_1DA4B98B8(_Unwind_Exception *a1)
{
  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

double MEOWReader::GetDemi(MEOWReader *a1, unsigned __int8 *a2, int a3, uint64_t a4)
{
  unint64_t DemiRecord = MEOWReader::GetDemiRecord(a1, *a2, a2[1], bswap32(*((unsigned __int16 *)a2 + 1)) >> 16, a3);

  return MEOWReader::GetDemi((uint64_t)a1, DemiRecord, a3, a4);
}

void MEOWReader::GetDiphoneNeighbor()
{
}

uint64_t MEOWReader::GetWord(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4, char a5)
{
  unint64_t DemiRecord = MEOWReader::GetDemiRecord((MEOWReader *)a1, *a2, a2[1], bswap32(*((unsigned __int16 *)a2 + 1)) >> 16, 1);
  unint64_t v11 = MEOWReader::GetDemiRecord((MEOWReader *)a1, a2[4], a2[5], bswap32(*((unsigned __int16 *)a2 + 3)) >> 16, 0);
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseHeapBasedDemis))
  {
    unint64_t DemiRecord = MEOWReader::HeapDemiForMappedDemi((void *)a1, DemiRecord, 0, 0, 1);
    unint64_t v11 = MEOWReader::HeapDemiForMappedDemi((void *)a1, v11, 0, 0, 1);
  }
  int v12 = (_DWORD *)(***(uint64_t (****)(void, uint64_t, void, void))(a1 + 30576))(*(void *)(a1 + 30576), a1, (bswap32(*(unsigned __int16 *)(DemiRecord + 2)) >> 16) & 0xFFFCFFFF | ((((*(unsigned char *)(DemiRecord + 1) & 0xC0) >> 6) & 3) << 16), *(unsigned __int8 *)(DemiRecord + 4));
  char v13 = *(unsigned char *)(DemiRecord + 1);
  *(_DWORD *)a3 = (bswap32(*(unsigned __int16 *)(DemiRecord + 2)) >> 16) & 0xFFFCFFFF | ((((v13 & 0xC0) >> 6) & 3) << 16);
  *(_WORD *)(a3 + 4) = *(unsigned __int8 *)(DemiRecord + 4);
  uint64_t v14 = *(unsigned __int8 *)(DemiRecord + 5);
  *(_WORD *)(a3 + 6) = v14;
  if (a4)
  {
    int v15 = v13 & 0x3F;
    if ((v15 - 4) >= 4)
    {
      if (v15 == 3 || v15 == 1) {
        uint64_t v14 = v14 + (bswap32(*(unsigned __int16 *)(DemiRecord + 6)) >> 16);
      }
      else {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "MEOW: Bad Demi Format %d @ %08x\n", v15, DemiRecord - *(_DWORD *)(a1 + 30432));
      }
    }
    else
    {
      uint64_t v14 = *(unsigned __int8 *)(DemiRecord + 6) + v14;
    }
  }
  (*(void (**)(_DWORD *, uint64_t))(*(void *)v12 + 24))(v12, v14);
  uint64_t v17 = (***(uint64_t (****)(void))(a1 + 30576))();
  uint64_t v18 = *(unsigned __int8 *)(v11 + 5);
  if ((a5 & 1) == 0)
  {
    int v19 = *(unsigned char *)(v11 + 1) & 0x3F;
    if ((v19 - 4) >= 4)
    {
      if (v19 == 3 || v19 == 1) {
        uint64_t v18 = v18 + (bswap32(*(unsigned __int16 *)(v11 + 6)) >> 16);
      }
      else {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "MEOW: Bad Demi Format %d @ %08x\n", *(unsigned char *)(v11 + 1) & 0x3F, v11 - *(_DWORD *)(a1 + 30432));
      }
    }
    else
    {
      uint64_t v18 = *(unsigned __int8 *)(v11 + 6) + v18;
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 24))(v17, v18);
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 64))(v17);
  (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  *(_DWORD *)(a3 + 40) = v12[4];
  *(unsigned char *)(a3 + 8) = 0;
  *(void *)(a3 + 88) = 0;
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)v12 + 40))(v12, v21, a3 + 72);
  *(_DWORD *)(a3 + 44) = v12[4] - *(_DWORD *)(a3 + 40);
  *(_DWORD *)(a3 + 48) = (*(uint64_t (**)(_DWORD *))(*(void *)v12 + 64))(v12) - *(_DWORD *)(a1 + 30432);
  uint64_t v22 = *(void *)(a3 + 88);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + --*(_WORD *)(this + 24) = v22;
  *(void *)(a3 + 32) = *(void *)(a3 + 72);
  uint64_t v23 = *(uint64_t (**)(_DWORD *))(*(void *)v12 + 8);

  return v23(v12);
}

uint64_t MEOWReader::GetInclusion(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4, uint64_t a5)
{
  unint64_t DemiRecord = MEOWReader::GetDemiRecord((MEOWReader *)a1, a2, a3, a4, 0);
  unint64_t v11 = MEOWReader::GetDemiRecord((MEOWReader *)a1, a2, a3, a4, 1);
  uint64_t result = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseHeapBasedDemis);
  if (result)
  {
    unint64_t DemiRecord = MEOWReader::HeapDemiForMappedDemi((void *)a1, DemiRecord, 0, 0, 1);
    uint64_t result = MEOWReader::HeapDemiForMappedDemi((void *)a1, v11, 0, 0, 1);
    unint64_t v11 = result;
  }
  char v13 = *(unsigned char *)(DemiRecord + 1);
  if ((v13 & 0x3F) == 7)
  {
    uint64_t v14 = (char *)(DemiRecord + 8);
  }
  else
  {
    if ((v13 & 0x3F) != 6)
    {
      *(unsigned char *)(a5 + 65) = 0;
      goto LABEL_11;
    }
    uint64_t v14 = (char *)(DemiRecord + 40);
  }
  char v15 = *v14;
  *(unsigned char *)(a5 + 65) = v15;
  if ((v15 & 3) == 0)
  {
LABEL_11:
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    return result;
  }
  uint64_t v16 = (_DWORD *)(***(uint64_t (****)(void, uint64_t, void, void))(a1 + 30576))(*(void *)(a1 + 30576), a1, (bswap32(*(unsigned __int16 *)(DemiRecord + 2)) >> 16) & 0xFFFCFFFF | ((((v13 & 0xC0) >> 6) & 3) << 16), *(unsigned __int8 *)(DemiRecord + 4));
  *(_DWORD *)a5 = (bswap32(*(unsigned __int16 *)(DemiRecord + 2)) >> 16) & 0xFFFCFFFF | ((((*(unsigned char *)(DemiRecord + 1) & 0xC0) >> 6) & 3) << 16);
  *(_WORD *)(a5 + 4) = *(unsigned __int8 *)(DemiRecord + 4);
  int v17 = *(unsigned __int8 *)(DemiRecord + 5);
  *(_WORD *)(a5 + 6) = v17;
  (*(void (**)(_DWORD *, void))(*(void *)v16 + 24))(v16, *(unsigned __int8 *)(DemiRecord + 6) + v17);
  if ((*(unsigned char *)(v11 + 1) & 0x3F) != 0)
  {
    uint64_t v18 = (***(uint64_t (****)(void, uint64_t, void, void))(a1 + 30576))(*(void *)(a1 + 30576), a1, (bswap32(*(unsigned __int16 *)(v11 + 2)) >> 16) & 0xFFFCFFFF | ((((*(unsigned char *)(v11 + 1) & 0xC0) >> 6) & 3) << 16), *(unsigned __int8 *)(v11 + 4));
    (*(void (**)(uint64_t, void))(*(void *)v18 + 24))(v18, *(unsigned __int8 *)(v11 + 5));
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 64))(v18);
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  else
  {
    uint64_t v19 = (*(uint64_t (**)(_DWORD *))(*(void *)v16 + 64))(v16);
  }
  *(_DWORD *)(a5 + 40) = v16[4];
  *(unsigned char *)(a5 + 8) = 0;
  *(void *)(a5 + 88) = 0;
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)v16 + 40))(v16, v19, a5 + 72);
  *(_DWORD *)(a5 + 44) = v16[4] - *(_DWORD *)(a5 + 40);
  *(_DWORD *)(a5 + 48) = (*(uint64_t (**)(_DWORD *))(*(void *)v16 + 64))(v16) - *(_DWORD *)(a1 + 30432);
  uint64_t v20 = *(void *)(a5 + 88);
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + --*(_WORD *)(this + 24) = v20;
  *(void *)(a5 + 32) = *(void *)(a5 + 72);
  uint64_t v21 = *(uint64_t (**)(_DWORD *))(*(void *)v16 + 8);

  return v21(v16);
}

uint64_t MEOWReader::InclusionLength(MEOWReader *a1, unsigned __int8 *a2)
{
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v12, 2);
  MEOWReader::GetDemi(a1, a2, 0, (uint64_t)v8);
  if ((v11 & 3) != 0)
  {
    int v4 = v9;
    int v5 = v10;
    MEOWReader::GetDemi(a1, a2, 1, (uint64_t)v8);
    if (v9) {
      uint64_t v6 = (v9 - (v5 + v4));
    }
    else {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  MEOWVectorBase::~MEOWVectorBase(v12);
  return v6;
}

void sub_1DA4BA1A0(_Unwind_Exception *a1)
{
  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

uint64_t MEOWReader::TouchMetadata(MEOWReader *this)
{
  int v8 = 0;
  uint64_t v1 = (char *)*((void *)this + 3804);
  uint64_t v2 = 40;
  if (!*((void *)this + 3813)) {
    uint64_t v2 = 32;
  }
  int v3 = bswap32(*(_DWORD *)&v1[v2]);
  if (v3 >= 1)
  {
    int v4 = &v1[v3];
    int v5 = getpagesize();
    do
    {
      int v6 = *v1;
      if (v8 >= v6) {
        int v6 = v8;
      }
      int v8 = v6;
      v1 += v5;
    }
    while (v1 < v4);
  }
  return 0;
}

uint64_t MEOWReader::ReadMetadataAsync(MEOWReader *this)
{
  uint64_t v1 = 40;
  if (!*((void *)this + 3813)) {
    uint64_t v1 = 32;
  }
  unsigned int v2 = bswap32(*(_DWORD *)(*((void *)this + 3804) + v1));
  v4[0] = 0;
  v4[1] = v2;
  fcntl(*(_DWORD *)this, 44, v4);
  return 0;
}

uint64_t MEOWReader::MakeMetadataResident(MEOWReader *this, int a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = 40;
    if (!*((void *)this + 3813)) {
      uint64_t v2 = 32;
    }
    unsigned int v3 = bswap32(*(_DWORD *)(*((void *)this + 3804) + v2));
    v5[0] = 0;
    v5[1] = v3;
    fcntl(*(_DWORD *)this, 44, v5);
    return 0;
  }
  if (a2 == 1)
  {
    MEOWReader::TouchMetadata(this);
    return 0;
  }
  return 1;
}

void MEOWReader::PercentageResidentMetadata(MEOWReader *this)
{
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,MEOWWordInstance const*,MEOWWordInstance const*,std::back_insert_iterator<MEOWVector<MEOWWordInstance>>,0>(uint64_t *a1, uint64_t *a2, MEOWVectorBase *this)
{
  int v4 = a1;
  if (a1 != a2)
  {
    do
    {
      uint64_t v6 = *v4++;
      MEOWVectorBase::Append(this);
      *(void *)(*(void *)this + 8 * *((void *)this + 2) - 8) = v6;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t MEOWTreePage::MEOWTreePage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F347F590;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) = *(_WORD *)(a3 + 18);
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + --*(_WORD *)(this + 24) = a3;
  *(void *)(a1 + 32) = malloc_type_malloc(0x2000uLL, 0x799C9CB2uLL);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(v4 + 32) + *(unsigned __int16 *)(a1 + 10);
  ++*(void *)(v4 + 24);
  *(void *)(v4 + 32) = v5;
  return a1;
}

void MEOWTreePage::~MEOWTreePage(void **this)
{
  *this = &unk_1F347F590;
  free(this[4]);
}

{
  *this = &unk_1F347F590;
  free(this[4]);
}

{
  uint64_t vars8;

  *this = &unk_1F347F590;
  free(this[4]);

  JUMPOUT(0x1E016FF00);
}

BOOL MEOWTreePage::LowerBound(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  char v10 = 0;
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t, void, void, char *))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), a3, *(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 8), &v10);
  uint64_t v8 = *(unsigned __int16 *)(a1 + 8);
  if (v7 != v8)
  {
    *(_WORD *)a4 = a2;
    *(_WORD *)(a4 + 2 * a2) = v7;
    *(void *)(a4 + 8) = a1;
  }
  return v7 != v8;
}

BOOL MEOWTreePage::Insert(uint64_t a1, int a2, void *__src, unsigned __int16 *a4)
{
  uint64_t v6 = &a4[a2];
  unsigned int v7 = *(unsigned __int16 *)(a1 + 8);
  if (*a4 < a2) {
    uint64_t v6 = (unsigned __int16 *)(a1 + 8);
  }
  unsigned int v8 = *v6;
  uint64_t v9 = *(void *)(a1 + 24);
  size_t v10 = *(unsigned __int16 *)(v9 + 16);
  char v11 = (char *)(*(void *)(a1 + 32) + v10 * v8);
  if (v8 < v7) {
    memmove(&v11[v10], (const void *)(*(void *)(a1 + 32) + *(unsigned __int16 *)(v9 + 16) * (unint64_t)v8), (int)(v7 - v8) * (unint64_t)*(unsigned __int16 *)(v9 + 16));
  }
  memcpy(v11, __src, v10);
  unsigned __int16 v12 = *(_WORD *)(a1 + 8) + 1;
  *(_WORD *)(a1 + 8) = v12;
  return *(unsigned __int16 *)(a1 + 10) == v12;
}

uint64_t MEOWTreePage::Rebalance(MEOWTreePage *this)
{
  uint64_t result = (*(uint64_t (**)(MEOWTreePage *))(*(void *)this + 32))(this);
  ++*(void *)(*((void *)this + 3) + 40);
  return result;
}

void *MEOWTreePage::DoRebalance(MEOWTreePage *this, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9 = *(void *)(*(void *)(*((void *)this + 2) + 40) + 8 * a2 + 8);
  size_t v10 = *(unsigned __int16 *)(*((void *)this + 3) + 16);
  char v11 = (void *)(*(void *)(*((void *)this + 2) + 32) + v10 * a2);
  unint64_t v12 = *((unsigned __int16 *)this + 4);
  if (v12 >= a3)
  {
    uint64_t v16 = a4 - *(unsigned __int16 *)(v9 + 8);
    size_t v17 = v16 * v10;
    memmove((void *)(*(void *)(v9 + 32) + v16 * v10), *(const void **)(v9 + 32), *(unsigned __int16 *)(v9 + 8) * (unint64_t)v10);
    if (a5)
    {
      size_t v17 = (v16 - 1) * v10;
      memcpy((void *)(*(void *)(v9 + 32) + v17), v11, v10);
    }
    memcpy(*(void **)(v9 + 32), (const void *)(*((void *)this + 4) + v10 + v10 * a3), v17);
    uint64_t result = memcpy(v11, (const void *)(*((void *)this + 4) + v10 * a3), v10);
  }
  else
  {
    if (a5)
    {
      uint64_t v13 = *((void *)this + 4);
      *((_WORD *)this + 4) = v12 + 1;
      memcpy((void *)(v13 + v12 * (unint64_t)v10), v11, v10);
      unint64_t v12 = *((unsigned __int16 *)this + 4);
    }
    size_t v14 = (a3 - v12) * v10;
    memcpy((void *)(*((void *)this + 4) + v12 * (unint64_t)v10), *(const void **)(v9 + 32), v14);
    memcpy(v11, (const void *)(*(void *)(v9 + 32) + v14), v10);
    uint64_t result = memmove(*(void **)(v9 + 32), (const void *)(*(void *)(v9 + 32) + v10 + v14), v10 * a4);
  }
  *((_WORD *)this + 4) = a3;
  *(_WORD *)(v9 + 8) = a4;
  return result;
}

void MEOWTreePage::Split(MEOWTreePage *this)
{
}

void sub_1DA4BA990(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10B1C4009E930FDLL);
  _Unwind_Resume(a1);
}

uint64_t MEOWTreePage::Begin(uint64_t result, int a2, uint64_t a3)
{
  *(_WORD *)a3 = a2;
  *(_WORD *)(a3 + 2 * a2) = 0;
  *(void *)(a3 + 8) = result;
  return result;
}

uint64_t MEOWTreePage::Next(uint64_t result, int a2, uint64_t a3)
{
  unsigned __int16 v3 = *(_WORD *)(a3 + 2 * a2) + 1;
  *(_WORD *)(a3 + 2 * a2) = v3;
  if (*(unsigned __int16 *)(result + 8) == v3)
  {
    uint64_t v4 = a2 - 1;
    while (v4)
    {
      int v5 = *(unsigned __int16 *)(a3 + 2 * v4);
      uint64_t result = *(void *)(result + 16);
      --v4;
      LOWORD(a2) = a2 - 1;
      if (v5 != *(unsigned __int16 *)(result + 8)) {
        goto LABEL_7;
      }
    }
    LOWORD(a2) = 0;
  }
LABEL_7:
  *(_WORD *)a3 = a2;
  *(void *)(a3 + 8) = result;
  return result;
}

uint64_t MEOWTreePage::SanityCheck(MEOWTreePage *this, int a2, int a3)
{
  unsigned int v3 = *((unsigned __int16 *)this + 4);
  if (!*((_WORD *)this + 4) || *((unsigned __int16 *)this + 5) <= v3) {
    abort();
  }
  if (a3)
  {
    printf("%.*s%8p %3u %08X %08X\n", a2, "               ", this, v3, **((_DWORD **)this + 4), *(_DWORD *)(*((void *)this + 4)+ (int)(v3 - 1) * (unint64_t)*(unsigned __int16 *)(*((void *)this + 3) + 16)));
    return *((unsigned __int16 *)this + 4);
  }
  return v3;
}

uint64_t MEOWTreePage::SetTree(uint64_t result, uint64_t a2)
{
  *(void *)(result + --*(_WORD *)(this + 24) = a2;
  return result;
}

uint64_t MEOWTreeBranch::SetupBranches(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 24);
  uint64_t v2 = *(void *)(this + 32);
  uint64_t v3 = *(unsigned __int16 *)(v1 + 20);
  *(_WORD *)(this + 10) = v3;
  *(void *)(this + 40) = v2 + 8 * ~v3 + 0x2000;
  *(void *)(v1 + 32) = *(void *)(v1 + 32) + v3 - *(unsigned __int16 *)(v1 + 18);
  return this;
}

uint64_t MEOWTreeBranch::MEOWTreeBranch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = MEOWTreePage::MEOWTreePage(a1, a2, a3);
  *(void *)uint64_t result = &unk_1F347F5F0;
  uint64_t v4 = *(void *)(result + 24);
  uint64_t v5 = *(void *)(result + 32);
  uint64_t v6 = *(unsigned __int16 *)(v4 + 20);
  *(_WORD *)(result + 10) = v6;
  *(void *)(result + 40) = v5 + 8 * ~v6 + 0x2000;
  *(void *)(v4 + 32) = *(void *)(v4 + 32) + v6 - *(unsigned __int16 *)(v4 + 18);
  return result;
}

{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t result = MEOWTreePage::MEOWTreePage(a1, a2, a3);
  *(void *)uint64_t result = &unk_1F347F5F0;
  uint64_t v4 = *(void *)(result + 24);
  uint64_t v5 = *(void *)(result + 32);
  uint64_t v6 = *(unsigned __int16 *)(v4 + 20);
  *(_WORD *)(result + 10) = v6;
  *(void *)(result + 40) = v5 + 8 * ~v6 + 0x2000;
  *(void *)(v4 + 32) = *(void *)(v4 + 32) + v6 - *(unsigned __int16 *)(v4 + 18);
  return result;
}

uint64_t MEOWTreeBranch::MEOWTreeBranch(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6 = MEOWTreePage::MEOWTreePage(a1, a2, a4);
  *(void *)uint64_t v6 = &unk_1F347F5F0;
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v9 = *(unsigned __int16 *)(v7 + 20);
  *(_WORD *)(v6 + 10) = v9;
  uint64_t v10 = v8 + 8 * ~v9;
  *(void *)(v6 + 40) = v10 + 0x2000;
  *(void *)(v7 + 32) = *(void *)(v7 + 32) + v9 - *(unsigned __int16 *)(v7 + 18);
  *(void *)(v10 + 0x2000) = a3;
  a3[2] = v6;
  (*(void (**)(void *, void))(*a3 + 40))(a3, 0);
  *(_WORD *)(a1 + 8) = 1;
  return a1;
}

void sub_1DA4BAC58(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = &unk_1F347F590;
  free(*(void **)(v1 + 32));
  _Unwind_Resume(a1);
}

void MEOWTreeBranch::~MEOWTreeBranch(MEOWTreeBranch *this)
{
  unint64_t v2 = 0;
  *(void *)this = &unk_1F347F5F0;
  do
  {
    uint64_t v3 = *(void *)(*((void *)this + 5) + 8 * v2);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  while (v2++ < *((unsigned __int16 *)this + 4));
  *(void *)this = &unk_1F347F590;
  free(*((void **)this + 4));
}

{
  uint64_t vars8;

  MEOWTreeBranch::~MEOWTreeBranch(this);

  JUMPOUT(0x1E016FF00);
}

uint64_t MEOWTreeBranch::LowerBound(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  char v12 = 0;
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t, void, void, char *))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), a3, *(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 8), &v12);
  uint64_t v9 = v8;
  *(_WORD *)(a4 + 2 * a2) = v8;
  if (!v12)
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8 * v8);
    if ((*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v11 + 16))(v11, (a2 + 1), a3, a4))return 1; {
    if (v9 == *(unsigned __int16 *)(a1 + 8))
    }
      return 0;
  }
  *(_WORD *)a4 = a2;
  *(void *)(a4 + 8) = a1;
  return 1;
}

uint64_t MEOWTreeBranch::Insert(uint64_t a1, int a2, uint64_t a3, unsigned __int16 *a4)
{
  if (*a4 >= a2) {
    uint64_t v5 = &a4[a2];
  }
  else {
    uint64_t v5 = (unsigned __int16 *)(a1 + 8);
  }
  uint64_t v6 = *v5;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8 * v6);
  uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)v7 + 24))(v7, (a2 + 1));
  if (result)
  {
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = *(unsigned __int16 **)(v10 + 8 * v6);
    unint64_t v12 = (7 * (unint64_t)v11[5]) >> 3;
    unsigned int v13 = *(unsigned __int16 *)(a1 + 8);
    BOOL v14 = v6 < v13;
    if (v6) {
      BOOL v15 = v6 >= v13;
    }
    else {
      BOOL v15 = 1;
    }
    if (v15)
    {
      if (!v6) {
        goto LABEL_16;
      }
      uint64_t v16 = *(unsigned __int16 **)(v10 + 8 * (v6 - 1));
      unsigned int v17 = v16[4];
    }
    else
    {
      uint64_t v16 = *(unsigned __int16 **)(v10 + 8 * (v6 - 1));
      unsigned int v17 = v16[4];
      if (v17 >= *(unsigned __int16 *)(*(void *)(v10 + 8 * v6 + 8) + 8)) {
        goto LABEL_17;
      }
      BOOL v14 = 0;
    }
    if (v12 > v17)
    {
      uint64_t v11 = v16;
LABEL_18:
      MEOWTreePage::Rebalance((MEOWTreePage *)v11);
      return 0;
    }
LABEL_16:
    if (!v14)
    {
      unsigned int v18 = v6 + 1;
LABEL_20:
      unsigned int v9 = *(unsigned __int16 *)(*(void *)(a1 + 24) + 16);
      memmove((void *)(*(void *)(a1 + 32) + v18 * (unint64_t)v9), (const void *)(*(void *)(a1 + 32) + v9 * (unint64_t)v6), (int)(v13 - v6) * (uint64_t)(int)v9);
      memmove((void *)(*(void *)(a1 + 40) + 8 * v6 + 16), (const void *)(*(void *)(a1 + 40) + 8 * v6 + 8), 8 * (*(unsigned __int16 *)(a1 + 8) - v6));
      uint64_t v19 = *(void *)(*(void *)(a1 + 40) + 8 * v6);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 40))(v19, v6);
      unsigned __int16 v20 = *(_WORD *)(a1 + 8) + 1;
      *(_WORD *)(a1 + 8) = v20;
      return *(unsigned __int16 *)(a1 + 10) == v20;
    }
LABEL_17:
    unsigned int v18 = v6 + 1;
    if (v12 > *(unsigned __int16 *)(*(void *)(v10 + 8 * (v6 + 1)) + 8)) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  return result;
}

void *MEOWTreeBranch::DoRebalance(MEOWTreeBranch *this, uint64_t a2, unint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v10 = *(void *)(*(void *)(*((void *)this + 2) + 40) + 8 * a2 + 8);
  unint64_t v11 = *((unsigned __int16 *)this + 4);
  unint64_t v12 = a3 + 1;
  if (a3 + 1 <= v11)
  {
    uint64_t v18 = *(unsigned __int16 *)(v10 + 8);
    if (*(_WORD *)(v10 + 8)) {
      uint64_t v19 = a4 - v18;
    }
    else {
      uint64_t v19 = a4 - v18 + 1;
    }
    if (*(_WORD *)(v10 + 8)) {
      memmove((void *)(*(void *)(v10 + 40) + 8 * v19), *(const void **)(v10 + 40), 8 * v18 + 8);
    }
    memcpy(*(void **)(v10 + 40), (const void *)(*((void *)this + 5) + 8 * a3 + 8), 8 * v19);
    if (v19)
    {
      unsigned __int16 v20 = *(uint64_t **)(v10 + 40);
      do
      {
        uint64_t v21 = *v20++;
        *(void *)(v21 + 16) = v10;
        --v19;
      }
      while (v19);
    }
  }
  else
  {
    uint64_t v13 = a3 + 1 - v11 - a5;
    memcpy((void *)(*((void *)this + 5) + 8 * v11 + 8 * a5), *(const void **)(v10 + 40), 8 * v13);
    memmove(*(void **)(v10 + 40), (const void *)(*(void *)(v10 + 40) + 8 * v13), 8 * a4 + 8);
    unint64_t v14 = *((unsigned __int16 *)this + 4);
    if (v12 > v14)
    {
      uint64_t v15 = a3 - v14 + 1;
      uint64_t v16 = (uint64_t *)(*((void *)this + 5) + 8 * v14);
      do
      {
        uint64_t v17 = *v16++;
        *(void *)(v17 + 16) = this;
        --v15;
      }
      while (v15);
    }
  }

  return MEOWTreePage::DoRebalance(this, a2, a3, a4, a5);
}

void MEOWTreeBranch::Split(MEOWTreeBranch *this)
{
}

void sub_1DA4BB208(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10B1C40ADA3C39ALL);
  _Unwind_Resume(a1);
}

uint64_t MEOWTreeBranch::Begin(uint64_t a1, int a2, uint64_t a3)
{
  *(_WORD *)(a3 + 2 * a2) = 0;
  return (*(uint64_t (**)(void, void))(***(void ***)(a1 + 40) + 48))(**(void **)(a1 + 40), (a2 + 1));
}

uint64_t MEOWTreeBranch::Next(uint64_t a1, int a2, uint64_t a3)
{
  unsigned __int16 v3 = *(_WORD *)(a3 + 2 * a2) + 1;
  *(_WORD *)(a3 + 2 * a2) = v3;
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8 * v3);
  return (*(uint64_t (**)(uint64_t, void))(*(void *)v4 + 48))(v4, (a2 + 1));
}

uint64_t MEOWTreeBranch::SanityCheck(MEOWTreeBranch *this, int a2, uint64_t a3)
{
  uint64_t v6 = MEOWTreePage::SanityCheck(this, a2, a3);
  unint64_t v7 = 0;
  uint64_t v8 = (a2 + 1);
  do
  {
    uint64_t v9 = *(void *)(*((void *)this + 5) + 8 * v7);
    v6 += (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 64))(v9, v8, a3);
  }
  while (v7++ < *((unsigned __int16 *)this + 4));
  return v6;
}

uint64_t MEOWTreeBranch::SetTree(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0;
  *(void *)(a1 + --*(_WORD *)(this + 24) = a2;
  do
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8 * v4);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 72))(v5, a2);
  }
  while (v4++ < *(unsigned __int16 *)(a1 + 8));
  return result;
}

void MEOWTreeBase::MEOWTreeBase(MEOWTreeBase *this, unsigned __int16 a2)
{
  *(void *)this = &unk_1F347F650;
  *((void *)this + 1) = 0;
  *((_WORD *)this + 8) = a2;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((_WORD *)this + 9) = 0x2000u / a2;
  *((_WORD *)this + 10) = 0x1FF8 / (a2 + 8);
  operator new();
}

void sub_1DA4BB448(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10B1C4009E930FDLL);
  _Unwind_Resume(a1);
}

void MEOWTreeBase::~MEOWTreeBase(MEOWTreeBase *this)
{
  *(void *)this = &unk_1F347F650;
  uint64_t v1 = *((void *)this + 6);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

void MEOWTreeBase::clear(MEOWTreeBase *this)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 1) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  operator new();
}

void sub_1DA4BB564(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10B1C4009E930FDLL);
  _Unwind_Resume(a1);
}

uint64_t MEOWTreeBase::LowerBound(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, unsigned __int16 *))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), 1, a2, a3);
  if (result)
  {
    unint64_t v5 = *a3;
    if (*a3) {
      unint64_t v5 = *(void *)(*((void *)a3 + 1) + 32)
    }
         + *(unsigned __int16 *)(*(void *)(*((void *)a3 + 1) + 24) + 16)
         * (unint64_t)a3[(v5 - 1) + 1];
  }
  else
  {
    unint64_t v5 = 0;
    *a3 = 0;
  }
  *((void *)a3 + 2) = v5;
  return result;
}

unsigned __int16 *MEOWTreeIterBase::Deref(unsigned __int16 *this)
{
  unint64_t v1 = *this;
  if (*this) {
    unint64_t v1 = *(void *)(*((void *)this + 1) + 32)
  }
       + *(unsigned __int16 *)(*(void *)(*((void *)this + 1) + 24) + 16)
       * (unint64_t)this[(v1 - 1) + 1];
  *((void *)this + 2) = v1;
  return this;
}

uint64_t MEOWTreeBase::Insert(MEOWTreeBase *this, const void *a2, const MEOWTreeIterBase *a3)
{
  ++*((void *)this + 1);
  uint64_t result = (*(uint64_t (**)(void, uint64_t, const void *, const MEOWTreeIterBase *))(**((void **)this + 6)
                                                                                              + 24))(*((void *)this + 6), 1, a2, a3);
  if (result) {
    operator new();
  }
  return result;
}

void sub_1DA4BB6D4(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10B1C40ADA3C39ALL);
  _Unwind_Resume(a1);
}

uint64_t MEOWTreeBase::Begin(MEOWTreeBase *this, MEOWTreeIterBase *a2)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, MEOWTreeIterBase *))(**((void **)this + 6) + 48))(*((void *)this + 6), 1, a2);
  unint64_t v4 = *(unsigned __int16 *)a2;
  if (*(_WORD *)a2) {
    unint64_t v4 = *(void *)(*((void *)a2 + 1) + 32)
  }
       + *(unsigned __int16 *)(*(void *)(*((void *)a2 + 1) + 24) + 16)
       * (unint64_t)*((unsigned __int16 *)a2 + (v4 - 1) + 1);
  *((void *)a2 + 2) = v4;
  return result;
}

uint64_t MEOWTreeBase::Swap(MEOWTreeBase *this, MEOWTreeBase *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 5);
  uint64_t v7 = *((void *)this + 6);
  uint64_t v8 = *((void *)a2 + 6);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)this + 6) = v8;
  *((void *)a2 + 5) = v6;
  *((void *)a2 + 6) = v7;
  (*(void (**)(void, MEOWTreeBase *))(**((void **)this + 6) + 72))(*((void *)this + 6), this);
  uint64_t v9 = *(uint64_t (**)(void))(**((void **)a2 + 6) + 72);

  return v9();
}

uint64_t MEOWTreeBase::Dump(MEOWTreeBase *this)
{
  printf("%lu Elements %lu Pages (%4.1f%%) %lu Rebalances\n", *((void *)this + 1), *((void *)this + 3), (double)*((unint64_t *)this + 1) * 100.0 / (double)*((unint64_t *)this + 4), *((void *)this + 5));
  uint64_t v2 = *((void *)this + 1);
  uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(**((void **)this + 6) + 64))(*((void *)this + 6), 1, 0);
  if (v2 != result) {
    abort();
  }
  return result;
}

uint64_t MEOWTreeIterBase::operator++(uint64_t result)
{
  if (*(_WORD *)result)
  {
    uint64_t v1 = (unsigned __int16 *)result;
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(result + 8) + 56))(*(void *)(result + 8));
    unint64_t v2 = *v1;
    if (*v1) {
      unint64_t v2 = *(void *)(*((void *)v1 + 1) + 32)
    }
         + *(unsigned __int16 *)(*(void *)(*((void *)v1 + 1) + 24) + 16)
         * (unint64_t)v1[(v2 - 1) + 1];
    *((void *)v1 + 2) = v2;
  }
  return result;
}

BOOL MEOWTreeIterBase::Equal(MEOWTreeIterBase *this, const MEOWTreeIterBase *a2)
{
  unint64_t v2 = *(unsigned __int16 *)this;
  if (v2 != *(unsigned __int16 *)a2) {
    return 0;
  }
  if (!*(_WORD *)this) {
    return 1;
  }
  if (*((void *)this + 1) != *((void *)a2 + 1) || *((unsigned __int16 *)this + 1) != *((unsigned __int16 *)a2 + 1)) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    uint64_t v4 = v3;
    if (v2 - 1 == v3) {
      break;
    }
    int v5 = *((unsigned __int16 *)this + v3 + 2);
    int v6 = *((unsigned __int16 *)a2 + v3++ + 2);
  }
  while (v5 == v6);
  return v4 + 1 >= v2;
}

void *MTMBCFArrayBuilder::AddElement(void *this, const void *a2)
{
  if (a2)
  {
    uint64_t v3 = this;
    this = MEOWVectorBase::Append(this);
    *(void *)(*v3 + 8 * v3[2] - 8) = a2;
  }
  return this;
}

CFArrayRef MTMBCFArrayBuilder::BuildArray(MTMBCFArrayBuilder *this)
{
  return CFArrayCreate(0, *(const void ***)this, *((void *)this + 2), MEMORY[0x1E4F1D510]);
}

void MTMBCFArrayBuilder::~MTMBCFArrayBuilder(MTMBCFArrayBuilder *this)
{
  if (*((void *)this + 2))
  {
    unint64_t v2 = 0;
    do
      CFRelease(*(CFTypeRef *)(*(void *)this + 8 * v2++));
    while (v2 < *((void *)this + 2));
  }

  MEOWVectorBase::~MEOWVectorBase((void **)this);
}

void MTMBCFDictBuilder::MTMBCFDictBuilder(MTMBCFDictBuilder *this, const __CFString *a2)
{
  MEOWVectorBase::MEOWVectorBase(this, 8);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)(v4 + 32), 8);
  CFTypeRef v5 = CFRetain(@"IsA");
  MTMBCFDictBuilder::AddPair(this, v5, a2);
}

void sub_1DA4BBAFC(_Unwind_Exception *a1)
{
  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

void *MTMBCFDictBuilder::AddPair(void *this, const void *a2, const void *a3)
{
  if (a2)
  {
    if (a3)
    {
      CFTypeRef v5 = this;
      MEOWVectorBase::Append(this);
      *(void *)(*v5 + 8 * v5[2] - 8) = a2;
      this = MEOWVectorBase::Append(v5 + 4);
      *(void *)(v5[4] + 8 * v5[6] - 8) = a3;
    }
  }
  return this;
}

void MTMBCFDictBuilder::MTMBCFDictBuilder(MTMBCFDictBuilder *this, const __CFString *a2, MTMBCFArrayBuilder *a3)
{
  MEOWVectorBase::MEOWVectorBase(this, 8);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)(v6 + 32), 8);
  CFTypeRef v7 = CFRetain(@"IsA");
  MTMBCFDictBuilder::AddPair(this, v7, a2);
  CFArrayRef v8 = CFArrayCreate(0, *(const void ***)a3, *((void *)a3 + 2), MEMORY[0x1E4F1D510]);
  CFTypeRef v9 = CFRetain(@"Children");
  MTMBCFDictBuilder::AddPair(this, v9, v8);
}

void sub_1DA4BBC2C(_Unwind_Exception *a1)
{
  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

CFDictionaryRef MTMBCFDictBuilder::BuildDict(MTMBCFDictBuilder *this)
{
  return CFDictionaryCreate(0, *(const void ***)this, *((const void ***)this + 4), *((void *)this + 2), MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
}

void MTMBCFDictBuilder::~MTMBCFDictBuilder(MTMBCFDictBuilder *this)
{
  if (*((void *)this + 2))
  {
    unint64_t v2 = 0;
    do
    {
      CFRelease(*(CFTypeRef *)(*(void *)this + 8 * v2));
      CFRelease(*(CFTypeRef *)(*((void *)this + 4) + 8 * v2++));
    }
    while (v2 < *((void *)this + 2));
  }
  MEOWVectorBase::~MEOWVectorBase((void **)this + 4);

  MEOWVectorBase::~MEOWVectorBase((void **)this);
}

void MTMBLogDiphones::MTMBLogDiphones(MTMBLogDiphones *this, __CFArray *a2, MTMBDiphoneStatistics *a3)
{
  *(void *)this = &unk_1F347F6B0;
  *((void *)this + 1) = a2;
  *((void *)this + 4) = a3;
}

{
  *(void *)this = &unk_1F347F6B0;
  *((void *)this + 1) = a2;
  *((void *)this + 4) = a3;
}

void MTMBLogDiphones::VisitSentence(MTMBLogDiphones *this, MTFESpeechElement *a2)
{
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v7, 8);
  *((void *)this + 2) = v7;
  MTFESpeechElement::VisitChildren(a2, this);
  if (*((void *)this + 1))
  {
    CFStringRef v4 = (const __CFString *)CFRetain(@"Sentence");
    MTMBCFDictBuilder::MTMBCFDictBuilder((MTMBCFDictBuilder *)keys, v4, (MTMBCFArrayBuilder *)v7);
    CFDictionaryRef v5 = CFDictionaryCreate(0, (const void **)keys[0], (const void **)keys[4], (CFIndex)keys[2], MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFArrayAppendValue(*((CFMutableArrayRef *)this + 1), v5);
    CFRelease(v5);
    MTMBCFDictBuilder::~MTMBCFDictBuilder((MTMBCFDictBuilder *)keys);
  }
  MTMBCFArrayBuilder::~MTMBCFArrayBuilder((MTMBCFArrayBuilder *)v7);
}

void sub_1DA4BBE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  MTMBCFArrayBuilder::~MTMBCFArrayBuilder((MTMBCFArrayBuilder *)va);
  _Unwind_Resume(a1);
}

void MTMBLogDiphones::VisitIntonationalPhrase(MTMBLogDiphones *this, MTFESpeechElement *a2)
{
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v12, 8);
  CFStringRef v4 = (void *)*((void *)this + 2);
  *((unsigned char *)this + --*(_WORD *)(this + 26) = BYTE6(a2[2].var6) == 71;
  *((void *)this + 2) = v12;
  MTFESpeechElement::VisitChildren(a2, this);
  *((void *)this + 2) = v4;
  if (*((void *)this + 1))
  {
    CFStringRef v5 = (const __CFString *)CFRetain(@"IntonationalPhrase");
    MTMBCFDictBuilder::MTMBCFDictBuilder((MTMBCFDictBuilder *)keys, v5, (MTMBCFArrayBuilder *)v12);
    int v6 = *((unsigned __int8 *)this + 26);
    CFTypeRef v7 = @"H%";
    if (!v6 && (BYTE6(a2[2].var6) & 0xFE) != 0x44) {
      CFTypeRef v7 = @"L%";
    }
    CFTypeRef v8 = CFRetain(@"FinalBoundary");
    CFTypeRef v9 = CFRetain(v7);
    MTMBCFDictBuilder::AddPair(keys, v8, v9);
    CFDictionaryRef v10 = CFDictionaryCreate(0, (const void **)keys[0], (const void **)keys[4], (CFIndex)keys[2], MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v10)
    {
      MEOWVectorBase::Append(v4);
      *(void *)(*v4 + 8 * v4[2] - 8) = v10;
    }
    MTMBCFDictBuilder::~MTMBCFDictBuilder((MTMBCFDictBuilder *)keys);
  }
  MTMBCFArrayBuilder::~MTMBCFArrayBuilder((MTMBCFArrayBuilder *)v12);
}

void sub_1DA4BBF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  MTMBCFArrayBuilder::~MTMBCFArrayBuilder((MTMBCFArrayBuilder *)va);
  _Unwind_Resume(a1);
}

void MTMBLogDiphones::VisitIntermediatePhrase(MTMBLogDiphones *this, MTFESpeechElement *a2)
{
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v11, 8);
  CFStringRef v4 = (void *)*((void *)this + 2);
  *((void *)this + 2) = v11;
  MTFESpeechElement::VisitChildren(a2, this);
  *((void *)this + 2) = v4;
  if (*((void *)this + 1))
  {
    CFStringRef v5 = (const __CFString *)CFRetain(@"IntermediatePhrase");
    MTMBCFDictBuilder::MTMBCFDictBuilder((MTMBCFDictBuilder *)keys, v5, (MTMBCFArrayBuilder *)v11);
    int v6 = @"L-";
    if (a2->var5->var4 == a2 && *((unsigned char *)this + 26)) {
      int v6 = @"H-";
    }
    CFTypeRef v7 = CFRetain(@"PhraseAccent");
    CFTypeRef v8 = CFRetain(v6);
    MTMBCFDictBuilder::AddPair(keys, v7, v8);
    CFDictionaryRef v9 = CFDictionaryCreate(0, (const void **)keys[0], (const void **)keys[4], (CFIndex)keys[2], MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v9)
    {
      MEOWVectorBase::Append(v4);
      *(void *)(*v4 + 8 * v4[2] - 8) = v9;
    }
    MTMBCFDictBuilder::~MTMBCFDictBuilder((MTMBCFDictBuilder *)keys);
  }
  MTMBCFArrayBuilder::~MTMBCFArrayBuilder((MTMBCFArrayBuilder *)v11);
}

void sub_1DA4BC0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  MTMBCFArrayBuilder::~MTMBCFArrayBuilder((MTMBCFArrayBuilder *)va);
  _Unwind_Resume(a1);
}

void MTMBLogDiphones::VisitWord(MTMBLogDiphones *this, MTFESpeechElement *a2)
{
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v30, 8);
  CFStringRef v4 = (void *)*((void *)this + 2);
  *((void *)this + 2) = v30;
  MTFESpeechElement::VisitChildren(a2, this);
  *((void *)this + 2) = v4;
  if (*((void *)this + 1))
  {
    CFStringRef v5 = (const __CFString *)CFRetain(@"Word");
    MTMBCFDictBuilder::MTMBCFDictBuilder((MTMBCFDictBuilder *)v29, v5, (MTMBCFArrayBuilder *)v30);
    if (LOBYTE(a2[3].var5))
    {
      CFTypeRef v6 = CFRetain(@"Text");
      CFStringRef v7 = CFStringCreateWithCString(0, (const char *)&a2[3].var5, 0x8000100u);
      MTMBCFDictBuilder::AddPair(v29, v6, v7);
    }
    if ((BYTE1(a2[1].var0) & 0x10) != 0)
    {
      CFTypeRef v8 = CFRetain(@"MorphEnding");
      CFTypeRef v9 = CFRetain((CFTypeRef)*MEMORY[0x1E4F1CFD0]);
      MTMBCFDictBuilder::AddPair(v29, v8, v9);
    }
    if (HIBYTE(a2[1].var0) - 1 <= 1)
    {
      CFTypeRef v10 = CFRetain(@"Compound");
      CFTypeRef v11 = CFRetain((CFTypeRef)*MEMORY[0x1E4F1CFD0]);
      MTMBCFDictBuilder::AddPair(v29, v10, v11);
    }
    if (a2[4].var6)
    {
      MTMBCFDictBuilder::MTMBCFDictBuilder((MTMBCFDictBuilder *)keys);
      CFTypeRef v12 = CFRetain(@"Start");
      CFDictionaryRef v13 = DiphoneDict((char)a2[4].var6->var0, BYTE1(a2[4].var6->var0), bswap32(WORD1(a2[4].var6->var0)) >> 16);
      MTMBCFDictBuilder::AddPair(keys, v12, v13);
      CFTypeRef v14 = CFRetain(@"End");
      CFDictionaryRef v15 = DiphoneDict(BYTE4(a2[4].var6->var0), BYTE5(a2[4].var6->var0), bswap32(HIWORD(a2[4].var6->var0)) >> 16);
      MTMBCFDictBuilder::AddPair(keys, v14, v15);
      CFTypeRef v16 = CFRetain(@"Instance");
      CFDictionaryRef v17 = CFDictionaryCreate(0, (const void **)keys[0], (const void **)values, numValues, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      MTMBCFDictBuilder::AddPair(v29, v16, v17);
      MTMBCFDictBuilder::~MTMBCFDictBuilder((MTMBCFDictBuilder *)keys);
    }
    if (BYTE6(a2[1].var4) != 255)
    {
      CFTypeRef v18 = CFRetain(@"PartOfSpeech");
      CFStringRef v19 = CFStringCreateWithCString(0, *(const char **)(MEMORY[0x1E4FA5840] + 8 * BYTE6(a2[1].var4)), 0x8000100u);
      MTMBCFDictBuilder::AddPair(v29, v18, v19);
    }
    if (WORD2(a2[1].var5))
    {
      MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)keys, 8);
      if (WORD2(a2[1].var5))
      {
        unint64_t v20 = 0;
        do
        {
          uint64_t v21 = (const char *)SLTagEng::Name((SLTagEng *)*((unsigned __int16 *)&a2[1].var5 + v20 + 3));
          CFStringRef v22 = CFStringCreateWithCString(0, v21, 0x8000100u);
          if (v22)
          {
            MEOWVectorBase::Append(keys);
            keys[0][numValues - 1] = (void *)v22;
          }
          ++v20;
        }
        while (v20 < WORD2(a2[1].var5));
      }
      CFTypeRef v23 = CFRetain(@"Tags");
      CFArrayRef v24 = CFArrayCreate(0, (const void **)keys[0], numValues, MEMORY[0x1E4F1D510]);
      MTMBCFDictBuilder::AddPair(v29, v23, v24);
      MTMBCFArrayBuilder::~MTMBCFArrayBuilder((MTMBCFArrayBuilder *)keys);
    }
    CFDictionaryRef v25 = CFDictionaryCreate(0, (const void **)v29[0], (const void **)v29[4], (CFIndex)v29[2], MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v25)
    {
      MEOWVectorBase::Append(v4);
      *(void *)(*v4 + 8 * v4[2] - 8) = v25;
    }
    MTMBCFDictBuilder::~MTMBCFDictBuilder((MTMBCFDictBuilder *)v29);
  }
  MTMBCFArrayBuilder::~MTMBCFArrayBuilder((MTMBCFArrayBuilder *)v30);
}

void sub_1DA4BC438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  MTMBCFDictBuilder::~MTMBCFDictBuilder((MTMBCFDictBuilder *)va);
  MTMBCFArrayBuilder::~MTMBCFArrayBuilder((MTMBCFArrayBuilder *)(v9 - 80));
  _Unwind_Resume(a1);
}

void MTMBLogDiphones::VisitSyllable(MTMBLogDiphones *this, MTFESpeechElement *a2)
{
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v8, 8);
  CFStringRef v4 = (void *)*((void *)this + 2);
  *((_WORD *)this + 12) = HIWORD(a2[1].var0);
  *((void *)this + 2) = v8;
  MTFESpeechElement::VisitChildren(a2, this);
  *((void *)this + 2) = v4;
  if (*((void *)this + 1))
  {
    CFStringRef v5 = (const __CFString *)CFRetain(@"Syllable");
    MTMBCFDictBuilder::MTMBCFDictBuilder((MTMBCFDictBuilder *)keys, v5, (MTMBCFArrayBuilder *)v8);
    CFDictionaryRef v6 = CFDictionaryCreate(0, (const void **)keys[0], (const void **)keys[4], (CFIndex)keys[2], MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v6)
    {
      MEOWVectorBase::Append(v4);
      *(void *)(*v4 + 8 * v4[2] - 8) = v6;
    }
    MTMBCFDictBuilder::~MTMBCFDictBuilder((MTMBCFDictBuilder *)keys);
  }
  MTMBCFArrayBuilder::~MTMBCFArrayBuilder((MTMBCFArrayBuilder *)v8);
}

void sub_1DA4BC568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

MTMBDiphoneStatistics *MTMBLogDiphones::VisitPhoneme(MTMBLogDiphones *this, MTFEPhoneme *a2)
{
  if (!*((void *)this + 1)) {
    goto LABEL_16;
  }
  CFStringRef v4 = (const __CFString *)CFRetain(@"Phoneme");
  MTMBCFDictBuilder::MTMBCFDictBuilder((MTMBCFDictBuilder *)v22, v4);
  uint64_t var9 = a2->var9;
  if (!a2->var10)
  {
    CFDictionaryRef v6 = (char **)MEMORY[0x1E4FA5858];
    goto LABEL_6;
  }
  LODWORD(var9) = var9 - 46;
  if (var9 < 5)
  {
    uint64_t var9 = (char)var9;
    CFDictionaryRef v6 = off_1E6BC5C40;
LABEL_6:
    CFStringRef v7 = v6[var9];
    goto LABEL_8;
  }
  CFStringRef v7 = "!!!";
LABEL_8:
  CFTypeRef v8 = CFRetain(@"Name");
  CFStringRef v9 = CFStringCreateWithCString(0, v7, 0x8000100u);
  MTMBCFDictBuilder::AddPair(v22, v8, v9);
  if (*((_WORD *)this + 12) && (*(_DWORD *)(MEMORY[0x1E4FA5870] + 4 * a2->var9) & 1) != 0)
  {
    CFTypeRef v10 = CFRetain(@"Accent");
    CFStringRef v11 = CFStringCreateWithCString(0, MTFEToBI::sTone[*((__int16 *)this + 12)], 0x8000100u);
    MTMBCFDictBuilder::AddPair(v22, v10, v11);
  }
  if (a2->var21)
  {
    MTMBCFDictBuilder::MTMBCFDictBuilder((MTMBCFDictBuilder *)keys);
    CFTypeRef v12 = CFRetain(@"Left");
    CFDictionaryRef v13 = DiphoneDict(a2->var20, a2->var21, a2->var18);
    MTMBCFDictBuilder::AddPair(keys, v12, v13);
    CFTypeRef v14 = CFRetain(@"Right");
    CFDictionaryRef v15 = DiphoneDict(a2->var21, a2->var22, a2->var19);
    MTMBCFDictBuilder::AddPair(keys, v14, v15);
    CFTypeRef v16 = CFRetain(@"Instance");
    CFDictionaryRef v17 = CFDictionaryCreate(0, (const void **)keys[0], (const void **)keys[4], (CFIndex)keys[2], MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    MTMBCFDictBuilder::AddPair(v22, v16, v17);
    MTMBCFDictBuilder::~MTMBCFDictBuilder((MTMBCFDictBuilder *)keys);
  }
  CFTypeRef v18 = (void *)*((void *)this + 2);
  CFDictionaryRef v19 = CFDictionaryCreate(0, (const void **)v22[0], (const void **)v22[4], (CFIndex)v22[2], MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v19)
  {
    MEOWVectorBase::Append(v18);
    *(void *)(*v18 + 8 * v18[2] - 8) = v19;
  }
  MTMBCFDictBuilder::~MTMBCFDictBuilder((MTMBCFDictBuilder *)v22);
LABEL_16:
  uint64_t result = (MTMBDiphoneStatistics *)*((void *)this + 4);
  if (result)
  {
    if (a2->var21)
    {
      MTMBDiphoneStatistics::LogDiphone(result, a2->var20, a2->var21, a2->var18);
      return MTMBDiphoneStatistics::LogDiphone(*((MTMBDiphoneStatistics **)this + 4), a2->var21, a2->var22, a2->var19);
    }
  }
  return result;
}

void sub_1DA4BC7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  MTMBCFDictBuilder::~MTMBCFDictBuilder((MTMBCFDictBuilder *)va);
  _Unwind_Resume(a1);
}

CFDictionaryRef DiphoneDict(char a1, char a2, uint64_t a3)
{
  char valuePtr = a1;
  char v13 = a2;
  uint64_t v12 = a3;
  MTMBCFDictBuilder::MTMBCFDictBuilder((MTMBCFDictBuilder *)keys);
  CFTypeRef v3 = CFRetain(@"FirstPhoneme");
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberSInt8Type, &valuePtr);
  MTMBCFDictBuilder::AddPair(keys, v3, v4);
  CFTypeRef v5 = CFRetain(@"SecondPhoneme");
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberSInt8Type, &v13);
  MTMBCFDictBuilder::AddPair(keys, v5, v6);
  CFTypeRef v7 = CFRetain(@"Index");
  CFNumberRef v8 = CFNumberCreate(0, kCFNumberLongType, &v12);
  MTMBCFDictBuilder::AddPair(keys, v7, v8);
  CFDictionaryRef v9 = CFDictionaryCreate(0, (const void **)keys[0], (const void **)keys[4], (CFIndex)keys[2], MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  MTMBCFDictBuilder::~MTMBCFDictBuilder((MTMBCFDictBuilder *)keys);
  return v9;
}

void sub_1DA4BC914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void MTMBLogDiphones::~MTMBLogDiphones(MTMBLogDiphones *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

void MTMBCFDictBuilder::MTMBCFDictBuilder(MTMBCFDictBuilder *this)
{
  MEOWVectorBase::MEOWVectorBase(this, 8);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)(v1 + 32), 8);
}

void sub_1DA4BC99C(_Unwind_Exception *a1)
{
  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

void MT3UnicodeString::MT3UnicodeString(MT3UnicodeString *this, CFStringRef theString)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)((char *)this + 8) = 0u;
  CFNumberRef v4 = (void **)((char *)this + 8);
  *(void *)this = &unk_1F347F778;
  *(_OWORD *)((char *)this + --*(_WORD *)(this + 24) = 0u;
  *((void *)this + 5) = (char *)this + 40;
  *((void *)this + 6) = (char *)this + 40;
  int v59 = (char *)this + 40;
  *((void *)this + 7) = 0;
  CFIndex Length = CFStringGetLength(theString);
  CharactersPtr = CFStringGetCharactersPtr(theString);
  int v75 = 0;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  isCurrentlyProcessingEmojunint64_t i = 0;
  if (!CharactersPtr)
  {
    std::vector<unsigned short>::resize((uint64_t)&v75, Length);
    CharactersPtr = v75;
    v80.CFIndex location = 0;
    v80.CFIndex length = Length;
    CFStringGetCharacters(theString, v80, v75);
  }
  int v74 = 0;
  uiter_setString(&iter, CharactersPtr, Length);
  CFStringRef v58 = theString;
  CFTypeRef v7 = (void *)((char *)this + 24);
  uint64_t v8 = 24;
  for (unint64_t i = v78; ; unint64_t i = v60)
  {
    int32_t v10 = ((uint64_t (*)(UCharIterator *, uint64_t))iter.getIndex)(&iter, 1);
    uint64_t v11 = unorm_next();
    uint64_t v12 = v11;
    if (v74 != 15 || (int)v11 <= (int)v8)
    {
      int v14 = v11;
      uint64_t v12 = v8;
    }
    else
    {
      if (v78 != i) {
        free(i);
      }
      unint64_t i = malloc_type_malloc(2 * v12, 0x1000040BDFB0063uLL);
      if (i)
      {
        iter.index = v10;
        int v74 = 0;
        int v14 = unorm_next();
      }
      else
      {
        int v14 = v12;
      }
    }
    CFDictionaryRef v15 = (char *)*((void *)this + 2);
    if (v14 < 1) {
      break;
    }
    int v60 = i;
    for (int j = 0; j != v14; ++j)
    {
      if ((unint64_t)v15 >= *v7)
      {
        CFTypeRef v18 = (char *)*v4;
        uint64_t v19 = (v15 - (unsigned char *)*v4) >> 3;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 61) {
          std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = *v7 - (void)v18;
        if (v21 >> 2 > v20) {
          unint64_t v20 = v21 >> 2;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          CFTypeRef v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>((uint64_t)this + 24, v22);
          CFTypeRef v18 = (char *)*((void *)this + 1);
          CFDictionaryRef v15 = (char *)*((void *)this + 2);
        }
        else
        {
          CFTypeRef v23 = 0;
        }
        CFArrayRef v24 = &v23[8 * v19];
        *(void *)CFArrayRef v24 = v10;
        CFDictionaryRef v17 = v24 + 8;
        while (v15 != v18)
        {
          uint64_t v25 = *((void *)v15 - 1);
          v15 -= 8;
          *((void *)v24 - 1) = v25;
          v24 -= 8;
        }
        *((void *)this + 1) = v24;
        *((void *)this + 2) = v17;
        *((void *)this + 3) = &v23[8 * v22];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *(void *)CFDictionaryRef v15 = v10;
        CFDictionaryRef v17 = v15 + 8;
      }
      *((void *)this + 2) = v17;
      CFDictionaryRef v15 = v17;
    }
    uint64_t v8 = v12;
  }
  if ((unint64_t)v15 >= *v7)
  {
    uint64_t v28 = (char *)*v4;
    uint64_t v29 = (v15 - (unsigned char *)*v4) >> 3;
    unint64_t v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 61) {
      std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v31 = *v7 - (void)v28;
    if (v31 >> 2 > v30) {
      unint64_t v30 = v31 >> 2;
    }
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v32 = v30;
    }
    if (v32)
    {
      int v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>((uint64_t)this + 24, v32);
      uint64_t v28 = (char *)*((void *)this + 1);
      CFDictionaryRef v15 = (char *)*((void *)this + 2);
    }
    else
    {
      int v33 = 0;
    }
    int v34 = &v33[8 * v29];
    uint64_t v35 = &v33[8 * v32];
    *(void *)int v34 = v10;
    uint64_t v26 = v34 + 8;
    if (v15 == v28)
    {
      CFStringRef v27 = v58;
    }
    else
    {
      CFStringRef v27 = v58;
      do
      {
        uint64_t v36 = *((void *)v15 - 1);
        v15 -= 8;
        *((void *)v34 - 1) = v36;
        v34 -= 8;
      }
      while (v15 != v28);
    }
    *((void *)this + 1) = v34;
    *((void *)this + 2) = v26;
    *((void *)this + 3) = v35;
    if (v28) {
      operator delete(v28);
    }
  }
  else
  {
    *(void *)CFDictionaryRef v15 = v10;
    uint64_t v26 = v15 + 8;
    CFStringRef v27 = v58;
  }
  *((void *)this + 2) = v26;
  if (v78 != i && i) {
    free(i);
  }
  if (CEMStringContainsEmoji())
  {
    uint64_t v65 = 0;
    float v66 = &v65;
    uint64_t v67 = 0x4002000000;
    int v68 = __Block_byref_object_copy_;
    int v69 = __Block_byref_object_dispose_;
    __p = 0;
    int v71 = 0;
    uint64_t v72 = 0;
    uint64_t v61 = 0;
    int v62 = &v61;
    uint64_t v63 = 0x2000000000;
    uint64_t v64 = 0;
    CFIndex v37 = CFStringGetLength(v27);
    MutableCFDictionaryRef Copy = CFStringCreateMutableCopy(0, v37, v27);
    if (EmojiLocaleData(void)::token != -1) {
      dispatch_once(&EmojiLocaleData(void)::token, &__block_literal_global_1);
    }
    CFStringGetLength(v27);
    CEMEnumerateEmojiTokensInStringWithLocaleAndBlock();
    uint64_t v39 = v66[5];
    uint64_t v40 = v66[6];
    if (v39 != v40)
    {
      uint64_t v41 = v40 - v39;
      if (v41 >= 1)
      {
        unint64_t v42 = (unint64_t)v41 >> 4;
        unint64_t v43 = v42 + 1;
        uint64_t v44 = 16 * v42;
        do
        {
          uint64_t v45 = v66[5];
          if (v43 - 2 >= (v66[6] - v45) >> 4) {
            std::vector<CFRange>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v46 = *(void *)(v45 + v44 - 16);
          uint64_t v47 = *(void *)(v45 + v44 - 8);
          if (v46 < CFStringGetLength(MutableCopy) - 1)
          {
            CFArrayGetValueAtIndex((CFArrayRef)v62[3], v43 - 2);
            int v48 = (const void *)CEMEmojiTokenCreateWithString();
            CFStringRef v49 = (const __CFString *)CEMEmojiTokenCopyName();
            CFRelease(v48);
            if (v49)
            {
              CFIndex v50 = CFStringGetLength(MutableCopy);
              MT3UnicodeString::AddMapping(this, v46, v47, v49, v50, 1);
              CFIndex v51 = CFStringGetLength(v49);
              CFMutableStringRef v52 = CFStringCreateMutableCopy(0, v51, v49);
              CFRelease(v49);
              CFStringInsert(v52, 0, @"( ");
              CFStringAppend(v52, @""));
              v81.CFIndex location = v46;
              v81.CFIndex length = v47;
              CFStringReplace(MutableCopy, v81, v52);
              uint64_t v53 = operator new(0x18uLL);
              v53[2] = v47 + v46;
              int v54 = (void *)*((void *)this + 6);
              *uint64_t v53 = v59;
              v53[1] = v54;
              *int v54 = v53;
              uint64_t v55 = *((void *)this + 7);
              *((void *)this + 6) = v53;
              *((void *)this + 7) = v55 + 1;
              uint64_t v56 = operator new(0x18uLL);
              v56[1] = v53;
              v56[2] = v46;
              *uint64_t v56 = v59;
              *uint64_t v53 = v56;
              *((void *)this + 6) = v56;
              *((void *)this + 7) = v55 + 2;
              CFRelease(v52);
            }
          }
          --v43;
          v44 -= 16;
        }
        while (v43 > 1);
      }
    }
    int v57 = (const void *)v62[3];
    if (v57) {
      CFRelease(v57);
    }
    *((void *)this + 4) = MutableCopy;
    _Block_object_dispose(&v61, 8);
    _Block_object_dispose(&v65, 8);
    if (__p)
    {
      int v71 = __p;
      operator delete(__p);
    }
  }
  else
  {
    *((void *)this + 4) = CFRetain(v27);
  }
  if (v75)
  {
    uint64_t v76 = v75;
    operator delete(v75);
  }
}

void sub_1DA4BD060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  int v33 = *(void **)(v31 - 168);
  if (v33)
  {
    *(void *)(v31 - 160) = v33;
    operator delete(v33);
  }
  std::__list_imp<SpeechChannelManager *>::clear(a11);
  int v34 = *v30;
  if (*v30)
  {
    *(void *)(v29 + 16) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void std::vector<unsigned short>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 2 * a2;
    }
  }
  else
  {
    std::vector<unsigned short>::__append((char **)a1, a2 - v2);
  }
}

__n128 __Block_byref_object_copy_(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN16MT3UnicodeStringC2EPK10__CFString_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + --*(_WORD *)(this + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  CFTypeRef v7 = *(void **)(*(void *)(a1 + 40) + 8);
  uint64_t v8 = (char *)v7[6];
  unint64_t v9 = v7[7];
  if ((unint64_t)v8 >= v9)
  {
    uint64_t v11 = (char *)v7[5];
    uint64_t v12 = (v8 - v11) >> 4;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60) {
      std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v9 - (void)v11;
    if (v14 >> 3 > v13) {
      unint64_t v13 = v14 >> 3;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      CFTypeRef v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CFRange>>((uint64_t)(v7 + 7), v15);
      uint64_t v11 = (char *)v7[5];
      uint64_t v8 = (char *)v7[6];
    }
    else
    {
      CFTypeRef v16 = 0;
    }
    CFDictionaryRef v17 = &v16[16 * v12];
    CFTypeRef v18 = &v16[16 * v15];
    *(void *)CFDictionaryRef v17 = a3;
    *((void *)v17 + 1) = a4;
    int32_t v10 = v17 + 16;
    if (v8 != v11)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v8 - 1);
        v17 -= 16;
        v8 -= 16;
      }
      while (v8 != v11);
      uint64_t v11 = (char *)v7[5];
    }
    v7[5] = v17;
    v7[6] = v10;
    v7[7] = v18;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *(void *)uint64_t v8 = a3;
    *((void *)v8 + 1) = a4;
    int32_t v10 = v8 + 16;
  }
  v7[6] = v10;
  uint64_t v19 = *(__CFArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  String = (const void *)CEMEmojiTokenGetString();

  CFArrayAppendValue(v19, String);
}

void MT3UnicodeString::AddMapping(MT3UnicodeString *this, uint64_t a2, uint64_t a3, CFStringRef theString, uint64_t a5, int a6)
{
  CFIndex Length = CFStringGetLength(theString);
  CFIndex v12 = Length;
  uint64_t v13 = 4;
  if (a6)
  {
    uint64_t v14 = 2;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  uint64_t v15 = a5 + 1;
  std::vector<long>::resize((uint64_t)this + 8, v15 - a3 + v13 + Length);
  if (v15 != a3 + a2) {
    memmove((void *)(*((void *)this + 2) - (8 * v15 - 8 * (a3 + a2))), (const void *)(*((void *)this + 1) + 8 * (a3 + a2)), 8 * v15 - 8 * (a3 + a2));
  }
  uint64_t v16 = *((void *)this + 1);
  uint64_t v17 = v12 + v14 + 1;
  if (v12 + v14 != -1)
  {
    CFTypeRef v18 = (void *)(v16 + 8 * a2 + 8);
    do
    {
      *v18++ = *(void *)(v16 + 8 * a2);
      --v17;
    }
    while (v17);
  }
  uint64_t v19 = (void *)(v16 + 8 * (v12 + v14 + a2));
  uint64_t v20 = v19[2];
  *uint64_t v19 = v20;
  v19[1] = v20;
}

uint64_t MT3UnicodeString::getTextWithEmojiDesc(MT3UnicodeString *this)
{
  return *((void *)this + 4);
}

void std::vector<long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<long>::__append((char **)a1, a2 - v2);
  }
}

uint64_t MT3UnicodeString::shouldReturnWordCallback(MT3UnicodeString *this, CFRange a2)
{
  uint64_t v2 = *((void *)this + 7);
  if (v2
    && ((CFTypeRef v3 = (uint64_t *)*((void *)this + 6),
         uint64_t v4 = v3[2],
         uint64_t v5 = *((void *)this + 1),
         unint64_t v6 = (*((void *)this + 2) - v5) >> 3,
         v6 <= a2.location)
      ? (uint64_t v7 = -1)
      : (uint64_t v7 = *(void *)(v5 + 8 * a2.location)),
        v4 == v7
     || (v6 <= a2.location + a2.length ? (uint64_t v8 = -1) : (uint64_t v8 = *(void *)(v5 + 8 * (a2.location + a2.length))), v4 == v8)))
  {
    uint64_t v9 = v2 - 1;
    if (isCurrentlyProcessingEmoji == 1)
    {
      isCurrentlyProcessingEmojunint64_t i = 0;
      uint64_t v10 = *v3;
      *(void *)(v10 + 8) = v3[1];
      *(void *)v3[1] = v10;
      *((void *)this + 7) = v9;
      operator delete(v3);
      char v11 = 0;
    }
    else
    {
      char v11 = 1;
      isCurrentlyProcessingEmojunint64_t i = 1;
      uint64_t v12 = *v3;
      *(void *)(v12 + 8) = v3[1];
      *(void *)v3[1] = v12;
      *((void *)this + 7) = v9;
      operator delete(v3);
    }
  }
  else
  {
    char v11 = isCurrentlyProcessingEmoji ^ 1;
  }
  return v11 & 1;
}

uint64_t MT3UnicodeString::MapIndexToSrc(MT3UnicodeString *this, unint64_t a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (a2 >= (*((void *)this + 2) - v2) >> 3) {
    return -1;
  }
  else {
    return *(void *)(v2 + 8 * a2);
  }
}

void MT3UnicodeString::~MT3UnicodeString(MT3UnicodeString *this)
{
  *(void *)this = &unk_1F347F778;
  uint64_t v2 = (const void *)*((void *)this + 4);
  if (v2) {
    CFRelease(v2);
  }
  std::__list_imp<SpeechChannelManager *>::clear((void *)this + 5);
  CFTypeRef v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  uint64_t vars8;

  MT3UnicodeString::~MT3UnicodeString(this);

  JUMPOUT(0x1E016FF00);
}

uint64_t MT3UnicodeString::MapRangeToSrc(MT3UnicodeString *this, CFRange a2)
{
  if (isCurrentlyProcessingEmoji == 1)
  {
    uint64_t v2 = *((void *)this + 1);
    if (a2.location >= (unint64_t)((*((void *)this + 2) - v2) >> 3)) {
      return -1;
    }
    else {
      return *(void *)(v2 + 8 * a2.location);
    }
  }
  else
  {
    uint64_t v4 = *((void *)this + 1);
    unint64_t v5 = (*((void *)this + 2) - v4) >> 3;
    if (v5 <= a2.location) {
      return -1;
    }
    else {
      return *(void *)(v4 + 8 * a2.location);
    }
  }
}

uint64_t ___ZL15EmojiLocaleDatav_block_invoke()
{
  uint64_t result = CEMCreateEmojiLocaleData();
  EmojiLocaleData(void)::sEmojiLocaleData = result;
  return result;
}

void std::vector<unsigned short>::__append(char **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    uint64_t v10 = a2 + (v9 >> 1);
    if (v10 < 0) {
      std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 1;
    unint64_t v12 = v5 - v8;
    if (v12 > v10) {
      uint64_t v10 = v12;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[2 * v11];
    uint64_t v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    uint64_t v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      __int16 v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CFRange>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

void std::vector<CFRange>::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E6BC5A08, MEMORY[0x1E4FBA1D0]);
}

void sub_1DA4BD838(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void std::vector<long>::__append(char **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    uint64_t v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

MTMBDiphoneStatistics *MTMBDiphoneStatistics::LogDiphone(MTMBDiphoneStatistics *this, int a2, unsigned int a3, unint64_t a4)
{
  unint64_t v5 = (uint64_t *)((char *)this + 1600 * a2 + 32 * a3);
  if (v5[2] <= a4)
  {
    do
    {
      this = (MTMBDiphoneStatistics *)MEOWVectorBase::Append(v5);
      uint64_t v6 = *v5;
      *(void *)(*v5 + 8 * v5[2] - 8) = 0;
    }
    while (v5[2] <= a4);
  }
  else
  {
    uint64_t v6 = *v5;
  }
  ++*(void *)(v6 + 8 * a4);
  return this;
}

uint64_t MTMBDiphoneStatistics::CreateArray(MTMBDiphoneStatistics *this)
{
  uint64_t v2 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  do
  {
    CFDataRef v3 = CFDataCreate(0, *((const UInt8 **)this + 4 * v2), 4 * *((void *)this + 4 * v2 + 2));
    CFDataRef v4 = v3;
    unint64_t v5 = v18;
    if (v18 >= v19)
    {
      uint64_t v7 = ((char *)v18 - v17) >> 3;
      if ((unint64_t)(v7 + 1) >> 61) {
        std::vector<MTBEWorker::TaskRec>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v8 = ((char *)v19 - v17) >> 2;
      if (v8 <= v7 + 1) {
        unint64_t v8 = v7 + 1;
      }
      if ((unint64_t)((char *)v19 - v17) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v9 = v8;
      }
      if (v9) {
        unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>((uint64_t)&v19, v9);
      }
      else {
        unint64_t v10 = 0;
      }
      uint64_t v11 = (CFDataRef *)&v10[8 * v7];
      *uint64_t v11 = v4;
      uint64_t v6 = v11 + 1;
      unint64_t v13 = v17;
      uint64_t v12 = v18;
      if (v18 != (CFDataRef *)v17)
      {
        do
        {
          CFDataRef v14 = *--v12;
          *--uint64_t v11 = v14;
        }
        while (v12 != (CFDataRef *)v13);
        uint64_t v12 = (CFDataRef *)v17;
      }
      uint64_t v17 = (char *)v11;
      uint64_t v18 = v6;
      uint64_t v19 = (CFDataRef *)&v10[8 * v9];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *uint64_t v18 = v3;
      uint64_t v6 = v5 + 1;
    }
    uint64_t v18 = v6;
    ++v2;
  }
  while (v2 != 2500);
  uint64_t Array = SLCFArrayBuilder::CreateArray((SLCFArrayBuilder *)&v17);
  SLCFArrayBuilder::~SLCFArrayBuilder((SLCFArrayBuilder *)&v17);
  return Array;
}

void sub_1DA4BDB58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  SLCFArrayBuilder::~SLCFArrayBuilder((SLCFArrayBuilder *)va);
  _Unwind_Resume(a1);
}

CFDictionaryRef MTBEDebugParams::OverrideDefaults(CFDictionaryRef theDict, const __CFDictionary *a2)
{
  if (sSynthesisOverrideParam) {
    CFRelease((CFTypeRef)sSynthesisOverrideParam);
  }
  CFDictionaryRef result = CFDictionaryCreateCopy(0, theDict);
  sSynthesisOverrideParauint64_t m = (uint64_t)result;
  return result;
}

CFPropertyListRef GetParam(CFStringRef key)
{
  if (!sSynthesisDebugParam)
  {
    uint64_t v2 = getenv("MTX_DEBUG_PARAM");
    if (!v2 || (CFStringRef v3 = CFStringCreateWithCString(0, v2, 0x8000100u)) == 0) {
      CFStringRef v3 = @"com.apple.speech.synthesis.debugparam";
    }
    sSynthesisDebugParauint64_t m = (uint64_t)v3;
    CFDataRef v4 = getenv("MTX_DEBUG_PARAM_VALUES");
    if (v4)
    {
      unint64_t v5 = v4;
      MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)keys, 8);
      MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)values, 8);
      __lasts = 0;
      uint64_t v6 = strtok_r(v5, " \t", &__lasts);
      if (v6)
      {
        uint64_t v7 = v6;
        unint64_t v8 = (const void *)*MEMORY[0x1E4F1CFC8];
        unint64_t v9 = (const void *)*MEMORY[0x1E4F1CFD0];
        do
        {
          unint64_t v10 = strchr(v7, 61);
          uint64_t v11 = v10;
          if (v10) {
            *unint64_t v10 = 0;
          }
          CFStringRef v12 = CFStringCreateWithCString(0, v7, 0x8000100u);
          MEOWVectorBase::Append(keys);
          keys[0][numValues - 1] = (void *)v12;
          if (v11)
          {
            int v13 = v11[1];
            if (v13 == 102)
            {
              CFDataRef v14 = (void *)CFRetain(v8);
              MEOWVectorBase::Append(values);
            }
            else if (v13 == 116)
            {
              CFDataRef v14 = (void *)CFRetain(v9);
              MEOWVectorBase::Append(values);
            }
            else
            {
              if (strchr(v11 + 1, 46))
              {
                LODWORD(v19) = 0;
                float v16 = atof(v11 + 1);
                *(float *)&uint64_t v19 = v16;
                CFDataRef v14 = CFNumberCreate(0, kCFNumberFloatType, &v19);
              }
              else
              {
                uint64_t v19 = 0;
                uint64_t v19 = atol(v11 + 1);
                CFDataRef v14 = CFNumberCreate(0, kCFNumberLongType, &v19);
              }
              MEOWVectorBase::Append(values);
            }
            values[0][v22 - 1] = v14;
            *uint64_t v11 = 61;
          }
          else
          {
            CFTypeRef v15 = CFRetain(v9);
            MEOWVectorBase::Append(values);
            values[0][v22 - 1] = (void *)v15;
          }
          uint64_t v7 = strtok_r(0, " \t", &__lasts);
        }
        while (v7);
      }
      if (numValues)
      {
        sSynthesisOverrideParauint64_t m = (uint64_t)CFDictionaryCreate(0, (const void **)keys[0], (const void **)values[0], numValues, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (numValues)
        {
          for (unint64_t i = 0; i < numValues; ++i)
          {
            CFRelease(keys[0][i]);
            CFRelease(values[0][i]);
          }
        }
      }
      MEOWVectorBase::~MEOWVectorBase((void **)values);
      MEOWVectorBase::~MEOWVectorBase((void **)keys);
    }
  }
  if (!sSynthesisOverrideParam) {
    return CFPreferencesCopyAppValue(key, (CFStringRef)sSynthesisDebugParam);
  }
  CFPropertyListRef result = CFDictionaryGetValue((CFDictionaryRef)sSynthesisOverrideParam, key);
  if (!result) {
    return CFPreferencesCopyAppValue(key, (CFStringRef)sSynthesisDebugParam);
  }
  return result;
}

void sub_1DA4BDE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  CFDataRef v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  MEOWVectorBase::~MEOWVectorBase((void **)va1);
  _Unwind_Resume(a1);
}

void MTBEDebugParams::GetParam(const __CFString *this, const __CFString *a2, BOOL *a3)
{
  int v3 = (int)a3;
  Parauint64_t m = (const __CFBoolean *)GetParam(this);
  if (Param)
  {
    CFBooleanRef v7 = Param;
    CFTypeID v8 = CFGetTypeID(Param);
    if (v8 == CFBooleanGetTypeID())
    {
      int v9 = CFBooleanGetValue(v7) != 0;
      LOBYTE(a2->isa) = v9;
      if ((MTBEDebugFlags::sMEOWDebug & 0x4000) != 0 && v9 != v3)
      {
        CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(0, this, 0x8000100u, 0);
        uint64_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
        int Length = CFDataGetLength(ExternalRepresentation);
        BytePtr = (const char *)CFDataGetBytePtr(ExternalRepresentation);
        CFDataRef v14 = "false";
        if (v3) {
          CFTypeRef v15 = "true";
        }
        else {
          CFTypeRef v15 = "false";
        }
        if (LOBYTE(a2->isa)) {
          CFDataRef v14 = "true";
        }
        fprintf(v11, "Param %.*s default %s now %s\n", Length, BytePtr, v15, v14);
        CFRelease(ExternalRepresentation);
      }
    }
  }
}

void MTBEDebugParams::GetParam(const __CFString *this, const __CFString *a2, uint64_t *a3)
{
  Parauint64_t m = (const __CFNumber *)GetParam(this);
  if (Param)
  {
    char valuePtr = 0;
    if (CFNumberGetValue(Param, kCFNumberLongType, &valuePtr))
    {
      CFBooleanRef v7 = valuePtr;
      a2->isa = valuePtr;
      if ((MTBEDebugFlags::sMEOWDebug & 0x4000) != 0 && v7 != a3)
      {
        CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(0, this, 0x8000100u, 0);
        int v9 = (FILE *)*MEMORY[0x1E4F143C8];
        int Length = CFDataGetLength(ExternalRepresentation);
        BytePtr = (const char *)CFDataGetBytePtr(ExternalRepresentation);
        fprintf(v9, "Param %.*s default %ld now %ld\n", Length, BytePtr, a3, a2->isa);
        CFRelease(ExternalRepresentation);
      }
    }
  }
}

void MTBEDebugParams::GetParam(const __CFString *this, const __CFString *a2, float *a3, float a4)
{
  Parauint64_t m = (const __CFNumber *)GetParam(this);
  if (Param)
  {
    double valuePtr = 0.0;
    if (CFNumberGetValue(Param, kCFNumberDoubleType, &valuePtr))
    {
      float v8 = valuePtr;
      *(float *)&a2->isa = v8;
      if ((MTBEDebugFlags::sMEOWDebug & 0x4000) != 0 && v8 != a4)
      {
        CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(0, this, 0x8000100u, 0);
        unint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
        int Length = CFDataGetLength(ExternalRepresentation);
        BytePtr = (const char *)CFDataGetBytePtr(ExternalRepresentation);
        fprintf(v10, "Param %.*s default %g now %g\n", Length, BytePtr, a4, *(float *)&a2->isa);
        CFRelease(ExternalRepresentation);
      }
    }
  }
}

uint64_t MTBEDebugFlags::Update(MTBEDebugFlags *this)
{
  uint64_t v1 = getenv("MTX_DEBUG");
  uint64_t v2 = getenv("MEOW_DEBUG");
  if (v1)
  {
    int v3 = atoi(v1);
  }
  else
  {
    if (kMTXDebugParam)
    {
      MTBEDebugParams::GetParam((const __CFString *)kMTXDebugParam, (const __CFString *)&qword_1EA8DA058, (uint64_t *)qword_1EA8DA058);
      kMTXDebugParauint64_t m = 0;
    }
    int v3 = qword_1EA8DA058;
  }
  MTBEDebugFlags::sMTXDebug = v3;
  if (v2)
  {
    uint64_t result = atoi(v2);
  }
  else
  {
    if (kMEOWDebugParam)
    {
      MTBEDebugParams::GetParam((const __CFString *)kMEOWDebugParam, (const __CFString *)&qword_1EA8DA068, (uint64_t *)qword_1EA8DA068);
      kMEOWDebugParauint64_t m = 0;
    }
    uint64_t result = qword_1EA8DA068;
  }
  MTBEDebugFlags::sMEOWDebug = (int)result;
  return result;
}

uint64_t MTBEBufferWriteFun(std::string *a1, const std::string::value_type *a2, int a3)
{
  return 0;
}

MTFESpeechElement *MTBEAbort(MTFESpeechElement *result)
{
  if (MTBEAbort(MTFESpeechElement *)::sAborting != 1)
  {
    MTBEAbort(MTFESpeechElement *)::sAborting = 1;
    if (result)
    {
      do
      {
        uint64_t v1 = result;
        uint64_t result = result->var5;
      }
      while (result);
      memset(v6, 0, sizeof(v6));
      uint64_t v2 = funopen(v6, 0, (int (__cdecl *)(void *, const char *, int))MTBEBufferWriteFun, 0, 0);
      fputs("While processing:\n", v2);
      v3[0] = &unk_1F347D710;
      v3[1] = v2;
      void v3[2] = 0;
      int v4 = 0;
      char v5 = 0;
      MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v3, v1);
      MTBEAbort(v2, (MTFESpeechVisitor *)v3, (uint64_t)v6);
    }
    abort();
  }
  return result;
}

void sub_1DA4BE364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1DA4BE4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MTFVoice;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1DA4BE600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MEOWUnitWeightStrategy::PitchStrategy(MEOWUnitWeightStrategy *this)
{
  if (!MEOWUnitWeightStrategy::sPitchStrategy)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kPitchPowerStrategy)) {
      operator new();
    }
    MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUsePitchRMS);
    operator new();
  }
  return MEOWUnitWeightStrategy::sPitchStrategy;
}

void sub_1DA4BE77C(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

uint64_t MEOWUnitWeightStrategy::DurationStrategy(MEOWUnitWeightStrategy *this)
{
  if (!MEOWUnitWeightStrategy::sDurationStrategy)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kDurationPowerStrategy)) {
      operator new();
    }
    operator new();
  }
  return MEOWUnitWeightStrategy::sDurationStrategy;
}

void sub_1DA4BE8D0(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

uint64_t MEOWUnitWeightStrategy::WordPitchStrategy(MEOWUnitWeightStrategy *this)
{
  if (!MEOWUnitWeightStrategy::sWordPitchStrategy)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kWordPitchPowerStrategy)) {
      operator new();
    }
    MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUsePitchRMS);
    operator new();
  }
  return MEOWUnitWeightStrategy::sWordPitchStrategy;
}

void sub_1DA4BEA54(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

uint64_t MEOWUnitWeightStrategy::WordDurationStrategy(MEOWUnitWeightStrategy *this)
{
  if (!MEOWUnitWeightStrategy::sWordDurationStrategy)
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kWordDurationPowerStrategy)) {
      operator new();
    }
    operator new();
  }
  return MEOWUnitWeightStrategy::sWordDurationStrategy;
}

void sub_1DA4BEBA8(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

void MEOWUnitCostWindow::MEOWUnitCostWindow(MEOWUnitCostWindow *this, int64_t a2, int a3, float a4)
{
  MEOWVectorBase::MEOWVectorBase(this, 4, a2);
  if (a3 && MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kUseUnitCostWindow))
  {
    if (kCostWindowSlope)
    {
      MTBEDebugParams::GetParam(kCostWindowSlope, (const __CFString *)&qword_1EA8DA158, (uint64_t *)qword_1EA8DA158);
      kCostWindowSlope = 0;
    }
    uint64_t v8 = qword_1EA8DA158;
    if ((unint64_t)(a2 + 1) >> 1 >= qword_1EA8DA158) {
      unint64_t v9 = qword_1EA8DA158;
    }
    else {
      unint64_t v9 = (unint64_t)(a2 + 1) >> 1;
    }
    float v10 = *(float *)&dword_1EA8DA168;
    if (kCostWindowTrough)
    {
      MTBEDebugParams::GetParam(kCostWindowTrough, (const __CFString *)&dword_1EA8DA168, (float *)qword_1EA8DA158, *(float *)&dword_1EA8DA168);
      kCostWindowTrough = 0;
      uint64_t v8 = qword_1EA8DA158;
      float v10 = *(float *)&dword_1EA8DA168;
      if (kCostWindowSlope)
      {
        MTBEDebugParams::GetParam(kCostWindowSlope, (const __CFString *)&qword_1EA8DA158, (uint64_t *)qword_1EA8DA158);
        kCostWindowSlope = 0;
        uint64_t v8 = qword_1EA8DA158;
      }
    }
    unint64_t v11 = 0;
    if (v9)
    {
      float v12 = (float)(1.0 - v10) / (float)v8;
      if (v12 != 0.0)
      {
        int v13 = *(float **)this;
        CFDataRef v14 = (float *)(*(void *)this + 4 * a2 - 4);
        float v15 = 1.0;
        unint64_t v16 = v9;
        do
        {
          *v14-- = v15;
          *v13++ = v15;
          float v15 = v15 - v12;
          --v16;
        }
        while (v16);
        unint64_t v11 = v9;
      }
    }
    if (a2 > 2 * v11)
    {
      uint64_t v17 = (float *)(*(void *)this + 4 * v11);
      uint64_t v18 = *(void *)this + 4 * (a2 - v11) - (void)v17;
      if (v18 >= 1)
      {
        unint64_t v19 = ((unint64_t)v18 >> 2) + 1;
        do
        {
          *v17++ = v10;
          --v19;
        }
        while (v19 > 1);
      }
    }
  }
  else if (a2 >= 1)
  {
    uint64_t v20 = *(float **)this;
    unint64_t v21 = (a2 & 0x3FFFFFFFFFFFFFFFLL) + 1;
    do
    {
      *v20++ = 1.0 - a4;
      --v21;
    }
    while (v21 > 1);
  }
}

void sub_1DA4BED74(_Unwind_Exception *a1)
{
  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

float MEOWComputeUnitCost(MEOWUnitWeightStrategy *a1, unint64_t a2, __int16 *a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  if (!a4) {
    return 0.0;
  }
  unint64_t v16 = (MEOWUnitWeightStrategy *)MEOWUnitWeightStrategy::PitchStrategy(a1);
  uint64_t v18 = MEOWUnitWeightStrategy::DurationStrategy(v16);
  float v19 = (float)a4;
  float v41 = (float)a4;
  if (!a2)
  {
    float v24 = (*(float (**)(MEOWUnitWeightStrategy *, float, float))(*(void *)v16 + 16))(v16, 200.0, 100.0);
    float v22 = 1.0;
    a2 = 1;
LABEL_26:
    if (kVoicedPitchWeight)
    {
      MTBEDebugParams::GetParam((const __CFString *)kVoicedPitchWeight, (const __CFString *)&dword_1EA8DA198, v17, *(float *)&dword_1EA8DA198);
      kVoicedPitchWeight = 0;
    }
    float v37 = *(float *)&dword_1EA8DA198;
    float v35 = v37 * (*(float (**)(MEOWUnitWeightStrategy *, float))(*(void *)v16 + 8))(v16, v24 / (float)a2);
    float v25 = v22;
    goto LABEL_29;
  }
  int v20 = 0;
  float v21 = v19 / (float)(unint64_t)a1;
  float v22 = 0.0;
  unint64_t v23 = a2;
  float v24 = 0.0;
  float v25 = 0.0;
  do
  {
    int v26 = *a3++;
    float v27 = (float)(v26 & 0x7FFF);
    if (v26 < 0)
    {
      ++v20;
    }
    else
    {
      unint64_t v28 = (unint64_t)(float)(v21 * v25);
      float v29 = *(float *)(a6 + 4 * v28);
      float v30 = 22050.0 / *(float *)(a5 + 4 * v28);
      float v24 = v24
          + (float)((*(float (**)(MEOWUnitWeightStrategy *, float, float))(*(void *)v16 + 16))(v16, v30, v27)* v29);
      float v22 = v22 + v30;
    }
    float v25 = v25 + v27;
    --v23;
  }
  while (v23);
  if (!v20) {
    goto LABEL_26;
  }
  if (a7) {
    uint64_t v31 = &kUnvoicedPenalty;
  }
  else {
    uint64_t v31 = &kUnvoicedPitchCost;
  }
  if (*v31)
  {
    if (a7) {
      unint64_t v32 = &kUnvoicedPenalty;
    }
    else {
      unint64_t v32 = &kUnvoicedPitchCost;
    }
    if (a7) {
      CFStringRef v33 = (const __CFString *)&unk_1EA8DA178;
    }
    else {
      CFStringRef v33 = (const __CFString *)algn_1EA8DA188;
    }
    MTBEDebugParams::GetParam(*v31, v33, v17, *((float *)v32 + 2));
    *uint64_t v31 = 0;
  }
  if (a7) {
    int v34 = &kUnvoicedPenalty;
  }
  else {
    int v34 = &kUnvoicedPitchCost;
  }
  float v35 = *((float *)v34 + 2);
LABEL_29:
  if (kDurWeight)
  {
    MTBEDebugParams::GetParam((const __CFString *)kDurWeight, (const __CFString *)&dword_1EA8DA1A8, v17, *(float *)&dword_1EA8DA1A8);
    kDurWeight = 0;
  }
  float v38 = *(float *)&dword_1EA8DA1A8;
  float v39 = v38
      * (*(float (**)(uint64_t, float, float))(*(void *)v18 + 16))(v18, (float)(v41 * 22050.0) / 200.0, v25);
  if (a8)
  {
    uint64_t v40 = *(float **)(a8 + 16);
    *uint64_t v40 = v35 + *v40;
    v40[*(int *)(a8 + 4)] = v39 + v40[*(int *)(a8 + 4)];
  }
  return v35 + v39;
}

float MEOWComputeBreathCost(MEOWUnitWeightStrategy *a1, unint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v9 = MEOWUnitWeightStrategy::DurationStrategy(a1);
  float v10 = (float)((float)a2 * 22050.0) / 200.0;
  if (kBreathProportion)
  {
    MTBEDebugParams::GetParam((const __CFString *)kBreathProportion, (const __CFString *)&dword_1EA8DA1B8, v8, *(float *)&dword_1EA8DA1B8);
    kBreathProportion = 0;
  }
  float v11 = v10 * *(float *)&dword_1EA8DA1B8;
  if (kMaxBreathLength)
  {
    MTBEDebugParams::GetParam((const __CFString *)kMaxBreathLength, (const __CFString *)&dword_1EA8DA1C8, v8, *(float *)&dword_1EA8DA1C8);
    kMaxBreathint Length = 0;
  }
  if ((float)(*(float *)&dword_1EA8DA1C8 * 22.05) < v11) {
    float v11 = *(float *)&dword_1EA8DA1C8 * 22.05;
  }
  if (v10 < (float)(unint64_t)a1)
  {
    if (kExcessiveBreathCost)
    {
      MTBEDebugParams::GetParam(kExcessiveBreathCost, (const __CFString *)&dword_1EA8DA1D8, v8, *(float *)&dword_1EA8DA1D8);
      kExcessiveBreathCost = 0;
    }
    float v12 = *(float *)&dword_1EA8DA1D8;
    if (!a3) {
      return v12;
    }
LABEL_15:
    float v14 = *(float *)&dword_1EA8DA1D8;
    if (kExcessiveBreathCost)
    {
      MTBEDebugParams::GetParam(kExcessiveBreathCost, (const __CFString *)&dword_1EA8DA1D8, v8, *(float *)&dword_1EA8DA1D8);
      kExcessiveBreathCost = 0;
      float v14 = *(float *)&dword_1EA8DA1D8;
    }
    if (v12 != v14) {
      a4 = (float *)(*(void *)(a3 + 16) + 4 * *(int *)(a3 + 4));
    }
    *a4 = v12 + *a4;
    return v12;
  }
  if (kBreathWeight)
  {
    MTBEDebugParams::GetParam((const __CFString *)kBreathWeight, (const __CFString *)&dword_1EA8DA1E8, v8, *(float *)&dword_1EA8DA1E8);
    kBreathWeight = 0;
  }
  float v13 = *(float *)&dword_1EA8DA1E8;
  float v12 = v13
      * (*(float (**)(uint64_t, float, float))(*(void *)v9 + 16))(v9, v11, (float)(unint64_t)a1);
  if (a3) {
    goto LABEL_15;
  }
  return v12;
}

void MEOWComputeWordUnitCost(MEOWUnitWeightStrategy *a1, uint64_t a2, float *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a4)
  {
    uint64_t v7 = a2;
    if (a2)
    {
      float v12 = a3;
      float v14 = (MEOWUnitWeightStrategy *)MEOWUnitWeightStrategy::WordPitchStrategy(a1);
      uint64_t v16 = MEOWUnitWeightStrategy::WordDurationStrategy(v14);
      float v17 = 0.0;
      float v31 = 0.0;
      float v18 = 0.0;
      float v19 = 0.0;
      float v20 = 0.0;
      do
      {
        int v21 = *(__int16 *)v12;
        float v12 = (float *)((char *)v12 + 2);
        float v22 = (float)(v21 & 0x7FFF);
        if (v21 < 0)
        {
          float v31 = v31 + v22;
        }
        else
        {
          unint64_t v23 = (unint64_t)(float)((float)((float)a4 / (float)(unint64_t)a1) * v20);
          float v24 = *(float *)(a6 + 4 * v23);
          float v25 = 22050.0 / *(float *)(a5 + 4 * v23);
          float v19 = v19
              + (float)((*(float (**)(MEOWUnitWeightStrategy *, float, float))(*(void *)v14 + 16))(v14, v25, v22)* v24);
          float v18 = v18 + v25;
          float v17 = v17 + 1.0;
        }
        float v20 = v20 + v22;
        --v7;
      }
      while (v7);
      if (v17 == 0.0)
      {
        if (kUnvoicedWordCost)
        {
          MTBEDebugParams::GetParam((const __CFString *)kUnvoicedWordCost, (const __CFString *)&dword_1EA8DA208, v15, *(float *)&dword_1EA8DA208);
          kUnvoicedWordCost = 0;
        }
        float v27 = *(float *)&dword_1EA8DA208;
      }
      else
      {
        if (kVoicedPitchWeight)
        {
          MTBEDebugParams::GetParam((const __CFString *)kVoicedPitchWeight, (const __CFString *)&dword_1EA8DA198, v15, *(float *)&dword_1EA8DA198);
          kVoicedPitchWeight = 0;
        }
        float v26 = *(float *)&dword_1EA8DA198;
        float v27 = v26 * (*(float (**)(MEOWUnitWeightStrategy *, float))(*(void *)v14 + 8))(v14, v19 / v17);
      }
      if (kDurWeight)
      {
        MTBEDebugParams::GetParam((const __CFString *)kDurWeight, (const __CFString *)&dword_1EA8DA1A8, v15, *(float *)&dword_1EA8DA1A8);
        kDurWeight = 0;
      }
      float v28 = *(float *)&dword_1EA8DA1A8;
      float v29 = v28
          * (*(float (**)(uint64_t, float, float))(*(void *)v16 + 16))(v16, (float)a4 * 110.25, v18 + v31);
      if (a7)
      {
        float v30 = *(float **)(a7 + 16);
        *float v30 = v27 + *v30;
        v30[*(int *)(a7 + 4)] = v29 + v30[*(int *)(a7 + 4)];
      }
    }
    else if (kMissingWeight)
    {
      MTBEDebugParams::GetParam((const __CFString *)kMissingWeight, (const __CFString *)&dword_1EA8DA1F8, a3, *(float *)&dword_1EA8DA1F8);
      kMissingWeight = 0;
    }
  }
}

void MEOWComputeAccentCost(int a1, int a2, uint64_t a3)
{
  float v4 = 0.0;
  if ((MTBEDebugFlags::sMEOWDebug & 0x8000) == 0)
  {
    if (kAccentCostWeight)
    {
      MTBEDebugParams::GetParam((const __CFString *)kAccentCostWeight, (const __CFString *)&dword_1EA8DA218, (float *)a3, *(float *)&dword_1EA8DA218);
      kAccentCostWeight = 0;
    }
    float v4 = *(float *)&dword_1EA8DA218 * sAccentCost[3 * a1 - 3 + a2];
  }
  if (a3) {
    *(float *)(*(void *)(a3 + 16) + 8 * *(int *)(a3 + 4)) = v4
  }
                                                              + *(float *)(*(void *)(a3 + 16) + 8 * *(int *)(a3 + 4));
}

float MEOWLinearL1Strategy::norm(MEOWLinearL1Strategy *this, float a2)
{
  return fabsf(a2);
}

void MEOWPowerStrategy::weigh(MEOWPowerStrategy *this, float a2, float a3, uint64_t a4, float *a5)
{
  float v7 = *((float *)this + 2);
  if (kPowerClipMax)
  {
    MTBEDebugParams::GetParam((const __CFString *)kPowerClipMax, (const __CFString *)&dword_1EA8DA228, a5, *(float *)&dword_1EA8DA228);
    kPowerClipMax = 0;
  }
  powf(fabsf((float)(a3 - a2) / a3), v7);
}

void MEOWPowerStrategy::~MEOWPowerStrategy(MEOWPowerStrategy *this)
{
}

uint64_t MEOWLinearL1Strategy::weigh(MEOWLinearL1Strategy *this, float a2, float a3)
{
  return (**(uint64_t (***)(MEOWLinearL1Strategy *, float))this)(this, (float)(a3 - a2) / a3);
}

void MEOWLinearL1Strategy::~MEOWLinearL1Strategy(MEOWLinearL1Strategy *this)
{
}

float MEOWLinearRMSStrategy::norm(MEOWLinearRMSStrategy *this, float a2)
{
  return a2 * a2;
}

float MEOWLinearRMSStrategy::renorm(MEOWLinearRMSStrategy *this, float a2)
{
  return sqrtf(a2);
}

void MEOWLinearRMSStrategy::~MEOWLinearRMSStrategy(MEOWLinearRMSStrategy *this)
{
}

void *MEOWTrivialDecoder::Decode(MEOWTrivialDecoder *this, unsigned int a2, const void *__src, unsigned int a4, unsigned int a5, unsigned int a6, __int16 *__dst)
{
  return memcpy(__dst, __src, 2 * a6);
}

void MEOWByteSwapDecoder::Decode(MEOWByteSwapDecoder *this, unsigned int a2, char *a3, unsigned int a4, unsigned int a5, unsigned int a6, __int16 *a7)
{
  if (a6)
  {
    uint64_t v7 = 2 * a6;
    do
    {
      unsigned int v8 = *(unsigned __int16 *)a3;
      a3 += 2;
      *a7++ = bswap32(v8) >> 16;
      v7 -= 2;
    }
    while (v7);
  }
}

void MEOWCodebookDecoder::MEOWCodebookDecoder(MEOWCodebookDecoder *this, unsigned int a2, int a3, int a4, int a5, char **a6)
{
  *(void *)this = &unk_1F347F8C8;
  if (a4) {
    int v10 = 96;
  }
  else {
    int v10 = 160;
  }
  if (a5) {
    int v11 = 7;
  }
  else {
    int v11 = 6;
  }
  *((_DWORD *)this + 3) = v10;
  *((_DWORD *)this + 4) = v11;
  uint64_t v12 = a2;
  MEOWVectorBase::MEOWVectorBase((MEOWCodebookDecoder *)((char *)this + 24), 8, a2);
  if (a3 > 13)
  {
    if (a3 == 14)
    {
      int v14 = 8;
    }
    else
    {
      if (a3 != 24) {
        goto LABEL_17;
      }
      int v14 = 16;
    }
  }
  else if (a3 == 4)
  {
    int v14 = 2;
  }
  else
  {
    if (a3 != 7) {
      goto LABEL_17;
    }
    int v14 = 4;
  }
  *((_DWORD *)this + 2) = v14;
LABEL_17:
  float v15 = *a6;
  if (a2)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 2 * *((int *)this + 2);
    do
    {
      *(void *)(*v13 + v16) = v15;
      v16 += 8;
      v15 += v17;
    }
    while (8 * v12 != v16);
  }
  *a6 = v15;
}

uint64_t MEOWCodebookDecoder::Decode(MEOWCodebookDecoder *this, unsigned int a2, unsigned __int8 *a3, unsigned int a4, unsigned int a5, unsigned int a6, __int16 *a7)
{
  int v10 = a3 + 1;
  int v9 = (char)a3[1];
  int v11 = a3[1];
  int v12 = 0;
  if ((v9 & 0x80000000) == 0)
  {
    uint64_t v13 = *((_DWORD *)this + 3) / *((_DWORD *)this + 2) + 2;
    do
    {
      MEOWCodebookDecoder::Expand((uint64_t)this, v10, v11, a7, v12);
      v10 += v13;
      v12 += *((_DWORD *)this + 3);
      int v11 = *v10;
    }
    while ((*(char *)v10 & 0x80000000) == 0);
  }
  int v14 = v10[(v11 & 0x7F) + 2];

  return MEOWCodebookDecoder::Expand((uint64_t)this, v10, v14, a7, v12);
}

uint64_t MEOWCodebookDecoder::Expand(uint64_t this, const unsigned __int8 *a2, int a3, __int16 *a4, int a5)
{
  uint64_t v7 = this;
  int v8 = (a3 & 0xF) + 1;
  int v9 = a2[1];
  int v10 = v9 + *(_DWORD *)(this + 12) - 1;
  int v11 = *(_DWORD *)(this + 16) - (a3 >> 4);
  int v12 = &a4[a5];
  if (v10 <= a5) {
    uint64_t v13 = &a4[a5];
  }
  else {
    uint64_t v13 = &a4[v10];
  }
  if (v10 <= a5) {
    int v14 = &v12[-v10];
  }
  else {
    int v14 = a4;
  }
  if (v10 <= a5) {
    int v15 = *(_DWORD *)(this + 12);
  }
  else {
    int v15 = a5 - (v9 - 1);
  }
  if ((MTBEDebugFlags::sMEOWDebug & 0x400) != 0)
  {
    int v40 = v15;
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "X %02x%02x %2d %2d %3d %4d %4d -> %4d %3d | ", a3, v9, v11, (a3 & 0xF) + 1, v10, a5, (unint64_t)((char *)v14 - (char *)a4) >> 1, (unint64_t)((char *)v13 - (char *)a4) >> 1, v15);
    this = fputc(10, (FILE *)*MEMORY[0x1E4F143C8]);
    int v15 = v40;
  }
  uint64_t v16 = a2 + 2;
  if (v11 < 1)
  {
    int v24 = *(_DWORD *)(v7 + 12);
    if (v11 < 0)
    {
      if (v24 >= 1)
      {
        int v31 = 0;
        uint64_t v32 = *(void *)(v7 + 24);
        int v33 = *(_DWORD *)(v7 + 8);
        do
        {
          if (v33 >= 1)
          {
            int v34 = *(unsigned __int16 **)(v32 + 8 * *v16);
            int v35 = v33;
            do
            {
              unsigned int v36 = *v34++;
              *v12++ = bswap32(v36) >> 16 << -(char)v11;
              --v35;
            }
            while (v35);
          }
          ++v16;
          v31 += v33;
        }
        while (v31 < v24);
      }
    }
    else if (v24 >= 1)
    {
      int v25 = 0;
      uint64_t v26 = *(void *)(v7 + 24);
      int v27 = *(_DWORD *)(v7 + 8);
      do
      {
        if (v27 >= 1)
        {
          float v28 = *(unsigned __int16 **)(v26 + 8 * *v16);
          int v29 = v27;
          do
          {
            unsigned int v30 = *v28++;
            *v12++ = bswap32(v30) >> 16;
            --v29;
          }
          while (v29);
        }
        ++v16;
        v25 += v27;
      }
      while (v25 < v24);
    }
  }
  else
  {
    int v17 = *(_DWORD *)(v7 + 12);
    if (v17 >= 1)
    {
      int v18 = 0;
      uint64_t v19 = *(void *)(v7 + 24);
      int v20 = *(_DWORD *)(v7 + 8);
      do
      {
        if (v20 >= 1)
        {
          int v21 = *(unsigned __int16 **)(v19 + 8 * *v16);
          int v22 = v20;
          do
          {
            unsigned int v23 = *v21++;
            *v12++ = (int)bswap32(v23) >> 16 >> v11;
            --v22;
          }
          while (v22);
        }
        ++v16;
        v18 += v20;
      }
      while (v18 < v17);
    }
  }
  if (v15 >= 1)
  {
    if (a5 >= v10) {
      int v37 = v10;
    }
    else {
      int v37 = a5;
    }
    unsigned int v38 = v37 - v9 + 2;
    do
    {
      int v39 = *v14++;
      *v13++ += (v8 * v39) >> 4;
      --v38;
    }
    while (v38 > 1);
  }
  return this;
}

void MEOWCodebookDecoder::Filter14to16(MEOWCodebookDecoder *this, __int16 *a2, int a3)
{
  if (a3 >= 1)
  {
    int v3 = 0;
    do
    {
      int v3 = *a2 - (v3 >> 5) + ((7 * v3) >> 3);
      if (v3 >= 0x1FFF) {
        int v3 = 0x1FFF;
      }
      if (v3 <= -8191) {
        int v3 = -8191;
      }
      *a2++ = 4 * v3;
      --a3;
    }
    while (a3);
  }
}

uint64_t MEOWACDecoder::MEOWACDecoder(uint64_t a1, unsigned __int16 *a2)
{
  *(void *)a1 = &unk_1F347F8F0;
  *(void *)&inSourceFormat.mSample__int16 Rate = bswap64(*(void *)(a2 + 2));
  *(int8x16_t *)&inSourceFormat.mFormatID = vrev32q_s8(*(int8x16_t *)(a2 + 6));
  *(int8x8_t *)&inSourceFormat.mBytesPerint Frame = vrev32_s8(*(int8x8_t *)(a2 + 14));
  inSourceFormat.mBitsPerChannel = bswap32(*((_DWORD *)a2 + 9));
  inSourceFormat.mReserved = 0;
  if (inSourceFormat.mFormatID == 1869641075)
  {
    if (MEOWACDecoder::LoadOpus(void)::sHasOpus != -1) {
      dispatch_once(&MEOWACDecoder::LoadOpus(void)::sHasOpus, &__block_literal_global_2);
    }
  }
  else if (inSourceFormat.mFormatID == 1633772320)
  {
    inSourceFormat.mFormatFlags = 0;
    inSourceFormat.mBytesPerint Frame = 0;
    inSourceFormat.mBitsPerChannel = 0;
  }
  float v4 = (AudioConverterRef *)(a1 + 8);
  if (!AudioConverterNew(&inSourceFormat, &MEOWACDecoder::MEOWACDecoder(MEOWACCodecParam const&)::sACUncompressed, (AudioConverterRef *)(a1 + 8)))
  {
    int inPropertyData = 2;
    AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 8), 0x70726D6Du, 8u, &inPropertyData);
    uint64_t v13 = 2112;
    *(_DWORD *)(a1 + --*(_WORD *)(this + 24) = 2112;
    if (inSourceFormat.mFormatID == 1869641075)
    {
      *(_DWORD *)(a1 + --*(_WORD *)(this + 24) = 4800;
      int outPropertyData = 1650553971;
      LODWORD(v13) = 156;
      AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 8), 0x73726361u, 4u, &outPropertyData);
    }
    AudioConverterSetProperty(*v4, 0x7072696Du, 8u, &v13);
    AudioConverterSetProperty(*v4, 0x646D6763u, ((bswap32(*a2) >> 14) & 0x3FFFC) - 44, a2 + 22);
    UInt32 v11 = 4;
    int outPropertyData = 0;
    if (inSourceFormat.mFormatID == 1869641075)
    {
      UInt32 mBytesPerPacket = -1;
    }
    else
    {
      OSStatus Property = AudioFormatGetProperty(0x66657866u, 0x28u, &inSourceFormat, &v11, &outPropertyData);
      if (outPropertyData) {
        BOOL v8 = Property == 0;
      }
      else {
        BOOL v8 = 0;
      }
      UInt32 mBytesPerPacket = inSourceFormat.mBytesPerPacket;
      if (v8) {
        UInt32 mBytesPerPacket = -1;
      }
    }
    LODWORD(v5) = inSourceFormat.mFramesPerPacket;
    Float64 v9 = MEOWACDecoder::MEOWACDecoder(MEOWACCodecParam const&)::sACUncompressed.mSampleRate
       * (double)v5
       / inSourceFormat.mSampleRate;
    *(_DWORD *)(a1 + 16) = mBytesPerPacket;
    *(_DWORD *)(a1 + 20) = (int)v9;
  }
  return a1;
}

{
  unsigned int v4;
  AudioFormatID v5;
  unsigned int v6;
  UInt32 v7;
  UInt32 v9;
  const void *v10;
  OSStatus Property;
  unint64_t v12;
  BOOL v13;
  unsigned int v14;
  int v15;
  int v17;
  uint64_t v18;
  int inPropertyData;
  UInt32 ioPropertyDataSize;
  AudioStreamBasicDescription outPropertyData;

  *(void *)a1 = &unk_1F347F8F0;
  float v4 = *((_DWORD *)a2 + 3);
  unint64_t v5 = bswap32(v4);
  uint64_t v6 = bswap32(*a2) >> 16;
  outPropertyData.mSample__int16 Rate = (float)((float)bswap32(*((_DWORD *)a2 + 2)) * 0.000015259);
  if (v4 == 1630826605) {
    unint64_t v5 = 1633772320;
  }
  outPropertyData.mFormatID = v5;
  *(void *)&outPropertyData.mFramesPerPacket = 0;
  *(void *)&outPropertyData.mFormatFlags = 0;
  uint64_t v7 = *((char *)a2 + 3);
  *(void *)&outPropertyData.mBitsPerChannel = 0;
  outPropertyData.mChannelsPerint Frame = v7;
  UInt32 ioPropertyDataSize = 40;
  if (v6 < 5 || v4 == 1630826605)
  {
    Float64 v9 = 0;
    int v10 = 0;
  }
  else
  {
    Float64 v9 = 4 * v6 - 16;
    int v10 = a2 + 8;
  }
  AudioFormatGetProperty(0x666D7469u, v9, v10, &ioPropertyDataSize, &outPropertyData);
  if (!AudioConverterNew(&outPropertyData, &MEOWACDecoder::MEOWACDecoder(MEOWQTCodecParam const&)::sACUncompressed, (AudioConverterRef *)(a1 + 8)))
  {
    int inPropertyData = 2;
    AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 8), 0x70726D6Du, 8u, &inPropertyData);
    int v18 = 2112;
    *(_DWORD *)(a1 + --*(_WORD *)(this + 24) = 2112;
    AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 8), 0x7072696Du, 8u, &v18);
    AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 8), 0x646D6763u, 4 * v6 - 16, a2 + 8);
    int v17 = 0;
    UInt32 ioPropertyDataSize = 4;
    OSStatus Property = AudioFormatGetProperty(0x66657866u, 0x28u, &outPropertyData, &ioPropertyDataSize, &v17);
    if (v17) {
      uint64_t v13 = Property == 0;
    }
    else {
      uint64_t v13 = 0;
    }
    int v14 = bswap32(a2[3]) >> 16;
    LODWORD(v12) = outPropertyData.mFramesPerPacket;
    int v15 = (int)(MEOWACDecoder::MEOWACDecoder(MEOWQTCodecParam const&)::sACUncompressed.mSampleRate
              * (double)v12
              / outPropertyData.mSampleRate);
    if (v13) {
      int v14 = -1;
    }
    *(_DWORD *)(a1 + 16) = v14;
    *(_DWORD *)(a1 + 20) = v15;
  }
  return a1;
}

void MEOWACDecoder::LoadOpus(MEOWACDecoder *this)
{
  if (MEOWACDecoder::LoadOpus(void)::sHasOpus != -1) {
    dispatch_once(&MEOWACDecoder::LoadOpus(void)::sHasOpus, &__block_literal_global_2);
  }
}

void MEOWACDecoder::~MEOWACDecoder(AudioConverterRef *this)
{
  *this = (AudioConverterRef)&unk_1F347F8F0;
  AudioConverterDispose(this[1]);
}

{
  uint64_t vars8;

  MEOWACDecoder::~MEOWACDecoder(this);

  JUMPOUT(0x1E016FF00);
}

void MEOWACIterator::MEOWACIterator(MEOWACIterator *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, char *a6, unsigned int a7)
{
  *(_DWORD *)this = a2;
  if ((a2 & 0x80000000) != 0)
  {
    unsigned int v8 = (a7 - a4) / a3;
    if (a7 <= a4) {
      unsigned int v8 = 0;
    }
    if (a5 < 2)
    {
      uint64_t v11 = 0;
      int v12 = a6;
    }
    else
    {
      unsigned int v9 = 0;
      unsigned int v10 = 0;
      LODWORD(v11) = 0;
      int v12 = a6;
      do
      {
        unsigned int v13 = *(unsigned __int16 *)v12;
        v12 += 2;
        unsigned int v14 = bswap32(v13);
        unsigned int v15 = HIWORD(v14);
        if (v9 >= v8) {
          unsigned int v15 = 0;
        }
        uint64_t v11 = v11 + v15;
        v10 += HIWORD(v14) + 2;
        ++v9;
      }
      while (a5 - 1 > v10);
    }
    *((_DWORD *)this + 1) = ((unint64_t)(v12 - a6) >> 1) - v8;
    *((void *)this + 1) = &a6[2 * v8];
    *((void *)this + 2) = &v12[v11];
    *((void *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    int v16 = v8 * a3;
  }
  else
  {
    *((void *)this + 1) = 0;
    if (a2) {
      int v7 = a5 / a2;
    }
    else {
      int v7 = 0;
    }
    int v16 = 0;
    *((_DWORD *)this + 1) = v7;
    *((void *)this + 2) = a6;
  }
  *((_DWORD *)this + 10) = v16;
}

uint64_t MEOWACIterator::FetchData(uint64_t this, unsigned int *a2, AudioBuffer *a3, AudioStreamPacketDescription **a4)
{
  int v4 = *(_DWORD *)(this + 4);
  if ((*(_DWORD *)this & 0x80000000) != 0)
  {
    if (v4 >= 1) {
      int v4 = 1;
    }
    *a2 = v4;
    if (v4)
    {
      unsigned int v9 = *(unsigned __int16 **)(this + 8);
      unsigned int v10 = *(char **)(this + 16);
      uint64_t v11 = bswap32(*v9) >> 16;
      a3->mData = v10;
      a3->uint64_t mNumberChannels = 1;
      a3->unint64_t mDataByteSize = v11;
      *(_DWORD *)(this + 36) = v11;
      *(void *)(this + 8) = v9 + 1;
      *(void *)(this + 16) = &v10[v11];
      *a4 = (AudioStreamPacketDescription *)(this + 24);
      int v8 = *(_DWORD *)(this + 4) - 1;
      goto LABEL_10;
    }
  }
  else
  {
    if (v4 >= *a2) {
      int v4 = *a2;
    }
    *a2 = v4;
    if (v4)
    {
      a3->uint64_t mNumberChannels = 1;
      unint64_t v5 = *(char **)(this + 16);
      a3->mData = v5;
      int v6 = *(_DWORD *)(this + 4);
      uint64_t v7 = *(_DWORD *)this * *a2;
      a3->unint64_t mDataByteSize = v7;
      *(void *)(this + 16) = &v5[v7];
      int v8 = v6 - *a2;
LABEL_10:
      *(_DWORD *)(this + 4) = v8;
    }
  }
  return this;
}

const char *MEOWACDecoder::Decode(MEOWACDecoder *this, unsigned int a2, char *a3, unsigned int a4, int a5, uint64_t a6, __int16 *a7)
{
  MEOWACIterator::MEOWACIterator((MEOWACIterator *)inInputDataProcUserData, *((_DWORD *)this + 4), *((_DWORD *)this + 5), *((_DWORD *)this + 6), a2, a3, a4);
  MTBEWorker::DebugLog("Decode %d samples\n", v12, a6);
  outOutputData.unint64_t mNumberBuffers = 1;
  outOutputData.mBuffers[0].uint64_t mNumberChannels = 1;
  unsigned int v13 = v22;
  UInt32 v14 = a5 + a4 - v22;
  while (1)
  {
    outOutputData.mBuffers[0].unint64_t mDataByteSize = 2 * v14 + 2048;
    outOutputData.mBuffers[0].mData = &a7[v13];
    if (v13) {
      bzero(a7, 2 * v13);
    }
    UInt32 ioOutputDataPacketSize = v14;
    BOOL v15 = AudioConverterFillComplexBuffer(*((AudioConverterRef *)this + 1), (AudioConverterComplexInputDataProc)MEOWACFetchData, inInputDataProcUserData, &ioOutputDataPacketSize, &outOutputData, 0)|| ioOutputDataPacketSize == 0;
    if (v15 || ioOutputDataPacketSize >= v14) {
      break;
    }
    a7 += ioOutputDataPacketSize;
    v14 -= ioOutputDataPacketSize;
    unsigned int v13 = v22;
  }
  AudioConverterReset(*((AudioConverterRef *)this + 1));
  return MTBEWorker::DebugLog("Decoded\n", v17);
}

uint64_t MEOWACFetchData(OpaqueAudioConverter *a1, unsigned int *a2, AudioBufferList *a3, AudioStreamPacketDescription **a4, MEOWACIterator *this)
{
  return 0;
}

void *___ZN13MEOWACDecoder8LoadOpusEv_block_invoke()
{
  uint64_t result = dlopen("/System/Library/Frameworks/AudioToolbox.framework/AudioCodecs", 5);
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = (AudioComponentPlugInInterface *(__cdecl *)(const AudioComponentDescription *))dlsym(result, "ACOpusDecoderFactory");
    if (v2)
    {
      *(_OWORD *)&v3.componentType = xmmword_1DA501410;
      v3.componentFlagsMasuint64_t k = 0;
      uint64_t result = AudioComponentRegister(&v3, &stru_1F3482DA8, 0, v2);
      MEOWACDecoder::LoadOpus(void)::sOpusDecoderComponent = (uint64_t)result;
      if (result) {
        return result;
      }
      return (void *)dlclose(v1);
    }
    uint64_t result = (void *)MEOWACDecoder::LoadOpus(void)::sOpusDecoderComponent;
    if (!MEOWACDecoder::LoadOpus(void)::sOpusDecoderComponent) {
      return (void *)dlclose(v1);
    }
  }
  return result;
}

void MEOWDecoder::CreateUncompressedDecoder(MEOWDecoder *this)
{
}

void MEOWDecoder::CreateCodebookDecoder(MEOWDecoder *this, unsigned __int16 a2, unsigned __int8 a3, BOOL a4, BOOL a5, const void **a6)
{
}

void sub_1DA4C03D4(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x1081C4003839DB1);
  _Unwind_Resume(a1);
}

void MEOWDecoder::CreateQTDecoder()
{
}

void sub_1DA4C0440(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C40F536243ELL);
  _Unwind_Resume(a1);
}

void MEOWDecoder::CreateACDecoder()
{
}

void sub_1DA4C04AC(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C40F536243ELL);
  _Unwind_Resume(a1);
}

void MEOWTrivialDecoder::~MEOWTrivialDecoder(MEOWTrivialDecoder *this)
{
}

void MEOWByteSwapDecoder::~MEOWByteSwapDecoder(MEOWByteSwapDecoder *this)
{
}

void MEOWCodebookDecoder::~MEOWCodebookDecoder(void **this)
{
  *this = &unk_1F347F8C8;
  MEOWVectorBase::~MEOWVectorBase(this + 3);
}

{
  uint64_t vars8;

  *this = &unk_1F347F8C8;
  MEOWVectorBase::~MEOWVectorBase(this + 3);

  JUMPOUT(0x1E016FF00);
}

uint64_t MEOWSampleCache::MapSamples(MEOWSampleCache *this)
{
  return MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMapSamples);
}

void MEOWSampleCache::MEOWSampleCache(MEOWSampleCache *this, MEOWReader *a2)
{
  *(void *)this = a2;
  *((void *)this + 1) = (char *)this + 8;
  *((void *)this + 2) = (char *)this + 8;
  *((void *)this + 3) = 0;
  MEOWReader::GetGlobalParams(a2, 1);
  MEOWReader::GetGlobalParams(a2, 3);
  MEOWReader::GetGlobalParams(a2, 4);
  GlobalParams = MEOWReader::GetGlobalParams(a2, 2);
  int v6 = GlobalParams + 3;
  if (GlobalParams)
  {
    uint64_t v5 = *((unsigned __int8 *)GlobalParams + 3);
    *((void *)this + 5) = v5;
    if (v5 == 255)
    {
      *((void *)this + 5) = GlobalParams[3];
      int v6 = GlobalParams + 4;
    }
  }
  else
  {
    *((void *)this + 5) = 0;
  }
  operator new[]();
}

void sub_1DA4C0744(_Unwind_Exception *a1)
{
  std::__list_imp<SpeechChannelManager *>::clear(v1);
  _Unwind_Resume(a1);
}

void MEOWSampleCache::~MEOWSampleCache(MEOWSampleCache *this)
{
  while (*((void *)this + 3))
  {
    free(*(void **)(*((void *)this + 2) + 32));
    uint64_t v2 = (uint64_t *)*((void *)this + 2);
    uint64_t v3 = *((void *)this + 3);
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = v2[1];
    *(void *)v2[1] = v4;
    *((void *)this + 3) = v3 - 1;
    operator delete(v2);
  }
  unint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v7 = *(void *)(*((void *)this + 4) + 8 * i);
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
        unint64_t v5 = *((void *)this + 5);
      }
    }
  }
  uint64_t v8 = -1;
  do
  {
    uint64_t v9 = *(void *)(*((void *)this + 4) + 8 * v8);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
    }
    int v10 = ~v8--;
  }
  while ((v10 & 0xFFFFFFFE) == 0);
  MEMORY[0x1E016FEE0](*((void *)this + 4) - 24, 0x20C8093837F09);
  std::__list_imp<SpeechChannelManager *>::clear((void *)this + 1);
}

void *MEOWSampleCache::Samples(MEOWSampleCache *this, __int16 a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, unsigned int a7)
{
  UInt32 v14 = (char *)this + 8;
  uint64_t v15 = *((void *)this + 2);
  if ((MEOWSampleCache *)v15 != (MEOWSampleCache *)((char *)this + 8))
  {
    int v16 = 0;
    unsigned int v17 = 0;
    do
    {
      if (*(void **)(v15 + 16) == a5)
      {
        unsigned int v18 = *(_DWORD *)(v15 + 24);
        if (a6 >= v18 && *(_DWORD *)(v15 + 28) + v18 >= a7 + a6) {
          return (void *)(*(void *)(v15 + 32) + 2 * (a6 - v18));
        }
      }
      if (v17 < a7) {
        ++v16;
      }
      v17 += *(_DWORD *)(v15 + 28);
      uint64_t v15 = *(void *)(v15 + 8);
    }
    while ((char *)v15 != v14);
    if (v17 + a7 > 0x10000 && v16 != 0)
    {
      do
      {
        --v16;
        free(*(void **)(*((void *)this + 2) + 32));
        int v20 = (uint64_t *)*((void *)this + 2);
        uint64_t v21 = *v20;
        *(void *)(v21 + 8) = v20[1];
        *(void *)v20[1] = v21;
        --*((void *)this + 3);
        operator delete(v20);
      }
      while (v16);
    }
  }
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)__buf, 1);
  double v22 = 0.0;
  unsigned int v23 = a5;
  if ((MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMapSamples) & 1) == 0)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    if (__buf[3] < (void *)a3) {
      MEOWVectorBase::Allocate((MEOWVectorBase *)__buf, a3, 1);
    }
    __buf[2] = (void *)a3;
    pread(**(_DWORD **)this, __buf[0], a3, (a5 - *(_DWORD *)(*(void *)this + 30432)));
    unsigned int v23 = __buf[0];
    double v22 = CFAbsoluteTimeGetCurrent() - Current;
  }
  if (a7 + 1300 + a6 >= a4) {
    uint64_t v25 = (a4 - a6);
  }
  else {
    uint64_t v25 = a7 + 1300;
  }
  uint64_t v26 = (char *)malloc_type_calloc(2uLL, (a4 + 1024), 0xBAFE32B4uLL);
  double v27 = CFAbsoluteTimeGetCurrent();
  float v28 = *(void (****)(void, uint64_t, void *, uint64_t, uint64_t, uint64_t, char *))(*((void *)this + 4)
                                                                                            + 8 * a2);
  (**v28)(v28, a3, v23, a6, v25, a4, v26);
  double v29 = CFAbsoluteTimeGetCurrent();
  unsigned int v30 = malloc_type_malloc(2 * v25, 0x1000040BDFB0063uLL);
  memcpy(v30, &v26[2 * a6], 2 * v25);
  int v31 = operator new(0x28uLL);
  v31[1] = v14;
  void v31[2] = a5;
  *((_DWORD *)v31 + 6) = a6;
  *((_DWORD *)v31 + 7) = v25;
  v31[4] = v30;
  uint64_t v32 = *((void *)this + 1);
  *int v31 = v32;
  *(void *)(v32 + 8) = v31;
  *((void *)this + 1) = v31;
  ++*((void *)this + 3);
  free(v26);
  *(double *)&MEOWSampleCache::Samples(unsigned short,unsigned int,unsigned int,void const*,unsigned int,unsigned int)::totalDecodeTime = v29 - v27 + *(double *)&MEOWSampleCache::Samples(unsigned short,unsigned int,unsigned int,void const*,unsigned int,unsigned int)::totalDecodeTime;
  *(double *)&MEOWSampleCache::Samples(unsigned short,unsigned int,unsigned int,void const*,unsigned int,unsigned int)::totalReadTime = v22 + *(double *)&MEOWSampleCache::Samples(unsigned short,unsigned int,unsigned int,void const*,unsigned int,unsigned int)::totalReadTime;
  MEOWVectorBase::~MEOWVectorBase(__buf);
  return v30;
}

void sub_1DA4C0B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

float FrameToSamp(float a1)
{
  return a1 * 110.25;
}

uint64_t MTMBSmartSegmentAssembler::CountDemi(uint64_t result, unsigned __int16 **a2, int a3, _OWORD *a4)
{
  uint64_t v6 = result;
  uint64_t v7 = (uint64_t)a2[2];
  float v8 = 0.0;
  if (v7 >= 1)
  {
    int v9 = 0;
    int v10 = *a2;
    unint64_t v11 = (unint64_t)&(*a2)[16 * v7];
    do
    {
      v9 += v10[4];
      v10 += 16;
    }
    while ((unint64_t)v10 < v11);
    if (v9) {
      float v8 = (float)a3 / (float)v9;
    }
  }
  *(_OWORD *)((char *)a4 + 28) = 0u;
  *a4 = 0u;
  a4[1] = 0u;
  if ((uint64_t)a2[2] >= 1)
  {
    int v12 = 0;
    unsigned int v13 = *a2;
    do
    {
      unsigned int v14 = v13[8];
      if (v14)
      {
        uint64_t result = (*(uint64_t (**)(void, float, float))(**(void **)(v6 + 8) + 16))(*(void *)(v6 + 8), (float)((float)*(int *)(v6 + 24) + (float)(v8 * (float)v12)) + (float)(v13[4] >> 1), (float)v13[4]);
        int v16 = (unsigned __int16)result;
        int v15 = v13[4];
        unsigned int v14 = v13[8];
      }
      else
      {
        int v15 = v13[4];
        int v16 = v15;
      }
      v13[6] = v16;
      v12 += v15;
      *(_DWORD *)a4 += v16;
      unsigned int v17 = (char *)a4 + 4 * ((v14 >> 3) & 3);
      *((_DWORD *)v17 + 3) += v16;
      unsigned int v18 = (char *)a4 + 4 * ((v14 >> 5) & 3);
      *((_DWORD *)v18 + 7) += v16;
      v13 += 16;
    }
    while (v13 < &(*a2)[16 * (void)a2[2]]);
  }
  return result;
}

float MTMBSmartSegmentAssembler::AdjustForWSOLA(MTMBSmartSegmentAssembler *this, MTMBDemi *a2, float *a3, int a4, int a5)
{
  float v5 = 1.0;
  if (*(_DWORD *)a3 > a5 + a4)
  {
    uint64_t v9 = a4;
    if (kMTMBWSOLAMinSamples)
    {
      MTBEDebugParams::GetParam((const __CFString *)kMTMBWSOLAMinSamples, (const __CFString *)&qword_1EA8DA298, (uint64_t *)qword_1EA8DA298);
      kMTMBWSOLAMinSamples = 0;
    }
    if (qword_1EA8DA298 < v9)
    {
      if (kMTMBWSOLAMinScale)
      {
        MTBEDebugParams::GetParam((const __CFString *)kMTMBWSOLAMinScale, (const __CFString *)&dword_1EA8DA2A8, a3, *(float *)&dword_1EA8DA2A8);
        kMTMBWSOLAMinScale = 0;
      }
      float v5 = *(float *)&dword_1EA8DA2A8;
      if (kMTMBWSOLAMaxScale)
      {
        MTBEDebugParams::GetParam((const __CFString *)kMTMBWSOLAMaxScale, (const __CFString *)&dword_1EA8DA2B8, a3, *(float *)&dword_1EA8DA2B8);
        kMTMBWSOLAMaxScale = 0;
      }
      float v10 = *(float *)&dword_1EA8DA2B8;
      float v11 = (float)*(int *)a3 / (float)a4;
      if (v11 < *(float *)&dword_1EA8DA2B8) {
        float v10 = (float)*(int *)a3 / (float)a4;
      }
      if (v5 < v10) {
        float v5 = v10;
      }
      MTMBDemi::ScaleSpeechRate(a2, 1.0 / v5, v11);
      *(_DWORD *)a3 = a4;
    }
  }
  return v5;
}

float MTMBSmartSegmentAssembler::AdjustForWSOLA(MTMBSmartSegmentAssembler *this, MTMBDemi *a2, MTMBDemi *a3, float *a4, int a5, int a6)
{
  float v7 = MTMBSmartSegmentAssembler::AdjustForWSOLA(this, a2, a4, a5, a6);
  MTMBDemi::ScaleSpeechRate(a3, 1.0 / v7, v8);
  return v7;
}

uint64_t MTMBSmartSegmentAssembler::AdjustWantSamples(MTMBSmartSegmentAssembler *this, int a2, float *a3)
{
  int v3 = (int)a3;
  int v6 = a3 - a2;
  if (kMTMBSmoothDuration)
  {
    MTBEDebugParams::GetParam((const __CFString *)kMTMBSmoothDuration, (const __CFString *)&dword_1EA8DA2C8, a3, *(float *)&dword_1EA8DA2C8);
    kMTMBSmoothDuration = 0;
  }
  float v7 = (float)v6;
  if (!a2 || *(float *)&dword_1EA8DA2C8 == 0.0)
  {
    if (kMTMBDurationSlack)
    {
      MTBEDebugParams::GetParam((const __CFString *)kMTMBDurationSlack, (const __CFString *)&dword_1EA8DA2D8, a3, *(float *)&dword_1EA8DA2D8);
      kMTMBDurationSlacuint64_t k = 0;
    }
    return (v3 - (int)(float)((float)(*(float *)&dword_1EA8DA2D8 * v7) * 0.01));
  }
  else
  {
    float v8 = v7 / (float)a2;
    float v9 = (float)((float)(v8 * (float)(100.0 - *(float *)&dword_1EA8DA2C8))
               + (float)(*(float *)&dword_1EA8DA2C8 * *((float *)this + 18)))
       * 0.01;
    float v10 = 0.0;
    if ((float)(v8 * v9) >= 0.0)
    {
      float v10 = v7 / (float)a2;
      if (fabsf(v9) < fabsf(v8)) {
        float v10 = (float)((float)(v8 * (float)(100.0 - *(float *)&dword_1EA8DA2C8))
      }
                    + (float)(*(float *)&dword_1EA8DA2C8 * *((float *)this + 18)))
            * 0.01;
    }
    uint64_t result = (int)(float)((float)(v10 + 1.0) * (float)a2);
    *((float *)this + 18) = v10;
  }
  return result;
}

void MTMBSmartSegmentAssembler::Assemble(MTMBSmartSegmentAssembler *this, MTMBDemi *a2, MTMBDemi *a3)
{
}

uint64_t MTMBSmartSegmentAssembler::StretchDemi(uint64_t a1, uint64_t a2, _DWORD *a3, int a4, unsigned int a5)
{
  MEOWVectorBase::clear((void **)(a1 + 32));
  *(void *)(a1 + 64) = 0;
  uint64_t v12 = *(void *)(a2 + 16);
  if (!*(_DWORD *)(a2 + 100))
  {
    if (v12) {
      MTMBSmartSegmentAssembler::CopySegment((MTMBSmartSegmentAssembler *)a1, *(const MTMBSegment **)a2);
    }
    return 0;
  }
  if (v12 < 1) {
    return 0;
  }
  unsigned int v13 = *(unsigned __int16 **)a2;
  unint64_t v14 = *(void *)a2 + 32 * v12;
  int v15 = a3[2];
  do
  {
    unsigned __int16 v16 = v13[8];
    if ((v16 & 0x60u) >= a5)
    {
      int v18 = v16 & 1;
      if ((unint64_t)v13 >= v14)
      {
        int v19 = 0;
        unsigned int v17 = v13;
      }
      else
      {
        int v19 = 0;
        unsigned int v17 = v13;
        do
        {
          if (v18 != (v17[8] & 1) || (v17[8] & 0x60u) < a5) {
            break;
          }
          v19 += v17[6];
          v17 += 16;
        }
        while ((unint64_t)v17 < v14);
      }
      int v21 = (*(_DWORD *)(a1 + 64) + a4 - (*a3 + *(_DWORD *)(a1 + 68))) & ~((*(_DWORD *)(a1 + 64)
                                                                          + a4
                                                                          - (*a3
                                                                           + *(_DWORD *)(a1 + 68))) >> 31);
      if (v15) {
        int v21 = v21 * v19 / v15;
      }
      int v22 = v21 + v19;
      if (v18) {
        MTMBSmartSegmentAssembler::StretchVoicedRange((void *)a1, (const MTMBSegment *)v13, (const MTMBSegment *)v17, v11, v22);
      }
      else {
        MTMBSmartSegmentAssembler::StretchUnvoicedRange((MTMBSmartSegmentAssembler *)a1, (const MTMBSegment *)v13, v10, v19, v22);
      }
      v15 -= v19;
      *(_DWORD *)(a1 + 64) += v19;
    }
    else
    {
      *(_DWORD *)(a1 + 64) += v13[6];
      unsigned int v17 = v13 + 16;
      MTMBSmartSegmentAssembler::CopySegment((MTMBSmartSegmentAssembler *)a1, (const MTMBSegment *)v13);
    }
    unint64_t v14 = *(void *)a2 + 32 * *(void *)(a2 + 16);
    unsigned int v13 = v17;
  }
  while ((unint64_t)v17 < v14);
  return *(unsigned int *)(a1 + 68);
}

void MTMBSmartSegmentAssembler::CopyAssembledSegments(MTMBSmartSegmentAssembler *this, MTMBDemi *a2)
{
  {
    if (kMTMBPowerThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kMTMBPowerThreshold, (const __CFString *)&dword_1EA8DA2E8, v24, *(float *)&dword_1EA8DA2E8);
      kMTMBPowerThreshold = 0;
    }
    *(float *)&MTMBSmartSegmentAssembler::CopyAssembledSegments(MTMBDemi *)::kLinPowerThreshold = (float)((float)(*(float *)&dword_1EA8DA2E8 * *(float *)&dword_1EA8DA2E8) * 8192.0)
                                                                                                * 8192.0;
  }
  float v5 = (int *)*((void *)a2 + 13);
  int v6 = *v5 + *((_DWORD *)this + 12) - *((_DWORD *)a2 + 4);
  *float v5 = v6;
  if (v6 <= 0) {
    MEMORY[0x1E016FF00]();
  }
  MEOWVectorBase::Swap((uint64_t *)a2, (MTMBSmartSegmentAssembler *)((char *)this + 32));
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kDoAmplitudeNormalization))
  {
    if (*((uint64_t *)a2 + 2) < 1)
    {
      unint64_t v7 = 0;
      float v25 = 0.0;
      float v26 = 0.0;
      float v11 = 0.0;
      float v10 = 0.0;
    }
    else
    {
      unint64_t v7 = 0;
      uint64_t v8 = 0;
      unint64_t v9 = *(void *)a2;
      float v10 = 0.0;
      float v25 = 0.0;
      float v26 = 0.0;
      float v11 = 0.0;
      do
      {
        if (*(_WORD *)(v9 + 16))
        {
          float v13 = MTMBSegment::LinPower((const float **)v9);
          LOWORD(v2) = *(_WORD *)(v9 + 12);
          if (kAmplitudeScaleThreshold)
          {
            MTBEDebugParams::GetParam((const __CFString *)kAmplitudeScaleThreshold, (const __CFString *)&dword_1EA8DA308, v12, *(float *)&dword_1EA8DA308);
            kAmplitudeScaleThreshold = 0;
          }
          float v14 = 22050.0 / (double)v2;
          float v15 = sqrtf(fmaxf((float)((float)(v14 * -292600.0) + (float)((float)(v14 * 3560.0) * v14)) + 10450000.0, 10000000.0)/ v13);
          if (v15 < *(float *)&dword_1EA8DA308
            && v13 > *(float *)&MTMBSmartSegmentAssembler::CopyAssembledSegments(MTMBDemi *)::kLinPowerThreshold)
          {
            float v17 = (float)(v8 + ((unint64_t)*(unsigned __int16 *)(v9 + 8) >> 1));
            float v10 = v10 + v17;
            float v11 = v11 + v15;
            float v25 = v25 + (float)(v17 * v15);
            float v26 = v26 + (float)(v17 * v17);
            ++v7;
          }
        }
        v8 += *(unsigned __int16 *)(v9 + 8);
        v9 += 32;
      }
      while (v9 < *(void *)a2 + 32 * *((void *)a2 + 2));
    }
    if (kAmplitudeMinPP)
    {
      MTBEDebugParams::GetParam((const __CFString *)kAmplitudeMinPP, (const __CFString *)&qword_1EA8DA318, (uint64_t *)qword_1EA8DA318);
      kAmplitudeMinPP = 0;
    }
    float v18 = (float)v7;
    float v19 = v11 / (float)v7;
    if (!v7) {
      float v19 = 1.0;
    }
    float v20 = (float)((float)(v18 * v25) - (float)(v10 * v11)) / (float)((float)(v18 * v26) - (float)(v10 * v10));
    float v21 = (float)(v11 - (float)(v20 * v10)) / v18;
    if (v7 >= qword_1EA8DA318)
    {
      float v22 = v21;
    }
    else
    {
      float v20 = 0.0;
      float v22 = v19;
    }
    uint64_t v23 = *((void *)a2 + 13);
    *(float *)(v23 + 72) = v22;
    *(float *)(v23 + 76) = v20;
    *(unsigned char *)(v23 + 80) = 1;
  }
}

void sub_1DA4C1950(_Unwind_Exception *a1)
{
}

uint64_t MTMBSmartSegmentAssembler::ShrinkDemi(uint64_t a1, uint64_t a2, _DWORD *a3, int a4, unsigned int a5)
{
  MEOWVectorBase::clear((void **)(a1 + 32));
  *(void *)(a1 + 64) = 0;
  if (*(_DWORD *)(a2 + 100))
  {
    uint64_t v12 = *(const MTMBSegment **)a2;
    uint64_t v13 = *(void *)(a2 + 16);
    unint64_t v14 = *(void *)a2 + 32 * v13;
    if (v13 < 1)
    {
      uint64_t result = 0;
      if (!v13) {
        return result;
      }
    }
    else
    {
      int v15 = a3[1];
      do
      {
        __int16 v16 = *((_WORD *)v12 + 8);
        if ((v16 & 0x18u) >= a5)
        {
          int v18 = v16 & 1;
          if ((unint64_t)v12 >= v14)
          {
            int v19 = 0;
            float v17 = (unsigned __int16 *)v12;
          }
          else
          {
            int v19 = 0;
            float v17 = (unsigned __int16 *)v12;
            do
            {
              if (v18 != (v17[8] & 1) || (v17[8] & 0x18u) < a5) {
                break;
              }
              v19 += v17[6];
              v17 += 16;
            }
            while ((unint64_t)v17 < v14);
          }
          int v21 = v19
              - ((*a3 - (*(_DWORD *)(a1 + 64) + a4) + *(_DWORD *)(a1 + 68)) & ~((*a3
                                                                               - (*(_DWORD *)(a1 + 64)
                                                                                + a4)
                                                                               + *(_DWORD *)(a1 + 68)) >> 31))
              * v19
              / v15;
          if (v18) {
            MTMBSmartSegmentAssembler::ShrinkVoicedRange((void *)a1, v12, (const MTMBSegment *)v17, v11, v21);
          }
          else {
            MTMBSmartSegmentAssembler::ShrinkUnvoicedRange((MTMBSmartSegmentAssembler *)a1, v12, v10, v19, v21);
          }
          v15 -= v19;
          *(_DWORD *)(a1 + 64) += v19;
        }
        else
        {
          *(_DWORD *)(a1 + 64) += *((unsigned __int16 *)v12 + 6);
          float v17 = (unsigned __int16 *)((char *)v12 + 32);
          MTMBSmartSegmentAssembler::CopySegment((MTMBSmartSegmentAssembler *)a1, v12);
        }
        uint64_t v22 = *(void *)(a2 + 16);
        unint64_t v14 = *(void *)a2 + 32 * v22;
        uint64_t v12 = (const MTMBSegment *)v17;
      }
      while ((unint64_t)v17 < v14);
      uint64_t result = *(unsigned int *)(a1 + 68);
      if (!v22) {
        return result;
      }
    }
    if (!result)
    {
      MTMBSmartSegmentAssembler::CopySegment((MTMBSmartSegmentAssembler *)a1, (const MTMBSegment *)(v14 - 32));
      return *(unsigned int *)(a1 + 68);
    }
    return result;
  }
  if (*(void *)(a2 + 16)) {
    MTMBSmartSegmentAssembler::CopySegment((MTMBSmartSegmentAssembler *)a1, *(const MTMBSegment **)a2);
  }
  return 0;
}

void MTMBSmartSegmentAssembler::Assemble(MTMBSmartSegmentAssembler *this, MTMBDemi *a2)
{
  if (*((void *)a2 + 2))
  {
    uint64_t v2 = *((void *)a2 + 13);
    if (*(_DWORD *)(v2 + 32))
    {
      if ((*(char *)(v2 + 18) & 0x80000000) == 0) {
        MTMBPitchInterpolator::CreateDemiInterpolator(a2, a2);
      }
      MTMBPitchInterpolator::CreateWordInterpolator(a2, a2);
    }
  }
}

void *MTMBSmartSegmentAssembler::CopySegment(MTMBSmartSegmentAssembler *this, const MTMBSegment *a2)
{
  uint64_t v3 = *(void *)a2;
  unsigned int v4 = *((unsigned __int16 *)a2 + 4);
  __int16 v5 = *((_WORD *)a2 + 5);
  unsigned __int16 v6 = *((_WORD *)a2 + 6);
  __int16 v7 = *((_WORD *)a2 + 7);
  __int16 v8 = *((_WORD *)a2 + 8);
  *(void *)unint64_t v14 = *(void *)((char *)a2 + 18);
  *(void *)&v14[6] = *((void *)a2 + 3);
  unint64_t v9 = (void *)((char *)this + 32);
  uint64_t v10 = *((void *)this + 6);
  if (v10)
  {
    int v11 = ((unint64_t)(v3 - *(void *)(*v9 + 32 * v10 - 32)) >> 2) - *(unsigned __int16 *)(*v9 + 32 * v10 - 24);
    if (v11)
    {
      if (v11 < 0)
      {
        v8 |= 4u;
        if ((v8 & 1) == 0) {
          goto LABEL_7;
        }
        goto LABEL_6;
      }
      v8 |= 2u;
    }
  }
  if (v8) {
LABEL_6:
  }
    unsigned __int16 v6 = (*(uint64_t (**)(void, float, float))(**((void **)this + 1) + 16))(*((void *)this + 1), (float)(int)(*((_DWORD *)this + 17) + (v4 >> 1) + *((_DWORD *)this + 6)), (float)v4);
LABEL_7:
  *((_DWORD *)this + 17) += v6;
  uint64_t result = MEOWVectorBase::Append(v9);
  uint64_t v13 = *((void *)this + 4) + 32 * *((void *)this + 6);
  *(void *)(v13 - 32) = v3;
  *(_WORD *)(v13 - --*(_WORD *)(this + 24) = v4;
  *(_WORD *)(v13 - 22) = v5;
  *(_WORD *)(v13 - 20) = v6;
  *(_WORD *)(v13 - 18) = v7;
  *(_WORD *)(v13 - 16) = v8;
  *(void *)(v13 - 14) = *(void *)v14;
  *(void *)(v13 - 8) = *(void *)&v14[6];
  return result;
}

void *MTMBSmartSegmentAssembler::StretchVoicedRange(void *this, const MTMBSegment *a2, const MTMBSegment *a3, int a4, int a5)
{
  if (a2 < a3)
  {
    uint64_t v7 = (uint64_t)this;
    int v8 = 0;
    uint64_t v9 = a5;
    int64_t v10 = (a3 - a2) >> 5;
    int v11 = (unsigned __int16 *)a2;
    do
    {
      this = (void *)(*(uint64_t (**)(void, float, float))(**(void **)(v7 + 8) + 16))(*(void *)(v7 + 8), (float)(*(_DWORD *)(v7 + 68) + *(_DWORD *)(v7 + 24) + (v11[4] >> 1)), (float)v11[4]);
      if ((int)this >= 0) {
        int v12 = (int)this;
      }
      else {
        int v12 = this + 1;
      }
      if ((v9 + v9 * (((char *)v11 - (char *)a2) >> 5)) / v10 <= v8 + (v12 >> 1))
      {
        v11 += 16;
      }
      else
      {
        this = MTMBSmartSegmentAssembler::CopySegment((MTMBSmartSegmentAssembler *)v7, (const MTMBSegment *)v11);
        v8 += *(unsigned __int16 *)(*(void *)(v7 + 32) + 32 * *(void *)(v7 + 48) - 20);
      }
    }
    while (v11 < (unsigned __int16 *)a3);
  }
  return this;
}

MTMBSmartSegmentAssembler *MTMBSmartSegmentAssembler::StretchUnvoicedRange(MTMBSmartSegmentAssembler *this, const MTMBSegment *a2, const MTMBSegment *a3, int a4, int a5)
{
  uint64_t v5 = *(void *)a2;
  int v6 = *((unsigned __int16 *)a2 + 4);
  int v7 = *((unsigned __int16 *)a2 + 7);
  int v8 = a5 - a4;
  float v9 = 220.0;
  if (a4 < 220) {
    float v9 = 80.0;
  }
  float v10 = (float)a5 / v9;
  unsigned int v11 = vcvtps_s32_f32(v10);
  float v12 = (float)((float)a5 / (float)(int)ceilf(v10)) * 0.9;
  if (a4 >= 80)
  {
    int v13 = v11;
  }
  else
  {
    int v8 = 0;
    int v13 = 1;
  }
  if (v8 >= 16) {
    int v14 = v8;
  }
  else {
    int v14 = 0;
  }
  if (v8 < 16) {
    float v12 = 100000.0;
  }
  signed int v15 = vcvtps_s32_f32((float)v14 / v12);
  long long v16 = *((_OWORD *)a2 + 1);
  if (v13 - 1 >= v15) {
    signed int v17 = v15;
  }
  else {
    signed int v17 = v13 - 1;
  }
  v28[0] = *(_OWORD *)a2;
  v28[1] = v16;
  if (v13)
  {
    int v19 = this;
    int v20 = 0;
    int v21 = a4 / (v17 + 1);
    float v22 = (float)v21;
    if (v8 >= 16) {
      int v23 = a5;
    }
    else {
      int v23 = a4;
    }
    int v24 = v5 + 4 * v6 + 4 * v7;
    float v25 = (float)v21;
    do
    {
      int v26 = v23 / v13;
      WORD4(v28[0]) = v23 / v13;
      WORD6(v28[0]) = WORD4(v28[0]);
      if (v20 && v17 && v25 < (float)(v26 + v20))
      {
        int v27 = v14 / v17--;
        v14 -= v27;
        v20 -= v27;
        float v25 = v25 + v22;
      }
      *(void *)&v28[0] = *(void *)a2 + 4 * v20;
      HIWORD(v28[0]) = ((v24 - LODWORD(v28[0])) >> 2) - v26;
      this = (MTMBSmartSegmentAssembler *)MTMBSmartSegmentAssembler::CopySegment(v19, (const MTMBSegment *)v28);
      v20 += v26;
      v23 -= v26;
      --v13;
    }
    while (v13);
  }
  return this;
}

void *MTMBSmartSegmentAssembler::ShrinkVoicedRange(void *this, const MTMBSegment *a2, const MTMBSegment *a3, int a4, int a5)
{
  if (a2 < a3)
  {
    uint64_t v7 = (uint64_t)this;
    int v8 = 0;
    uint64_t v9 = a5;
    int64_t v10 = (a3 - a2) >> 5;
    unsigned int v11 = (unsigned __int16 *)a2;
    do
    {
      this = (void *)(*(uint64_t (**)(void, float, float))(**(void **)(v7 + 8) + 16))(*(void *)(v7 + 8), (float)(*(_DWORD *)(v7 + 68) + *(_DWORD *)(v7 + 24) + (v11[4] >> 1)), (float)v11[4]);
      if ((int)this >= 0) {
        int v12 = (int)this;
      }
      else {
        int v12 = this + 1;
      }
      if ((v9 + v9 * (((char *)v11 - (char *)a2) >> 5)) / v10 <= v8 + (v12 >> 1))
      {
        v11 += 16;
      }
      else
      {
        this = MTMBSmartSegmentAssembler::CopySegment((MTMBSmartSegmentAssembler *)v7, (const MTMBSegment *)v11);
        v8 += *(unsigned __int16 *)(*(void *)(v7 + 32) + 32 * *(void *)(v7 + 48) - 20);
      }
    }
    while (v11 < (unsigned __int16 *)a3);
  }
  return this;
}

MTMBSmartSegmentAssembler *MTMBSmartSegmentAssembler::ShrinkUnvoicedRange(MTMBSmartSegmentAssembler *this, const MTMBSegment *a2, const MTMBSegment *a3, int a4, int a5)
{
  int v6 = this;
  float v7 = 220.0;
  if (a4 < 220) {
    float v7 = 80.0;
  }
  float v8 = (float)(a4 - a5);
  if (a4 - a5 >= 16) {
    int v9 = a5;
  }
  else {
    int v9 = a4;
  }
  float v10 = 0.0;
  if (a4 - a5 < 16) {
    float v8 = 0.0;
  }
  float v11 = 100000.0;
  if (a4 - a5 >= 16) {
    float v11 = v7;
  }
  int v12 = vcvtps_s32_f32((float)v9 / v7);
  int v13 = v12 & ~(v12 >> 31);
  signed int v14 = vcvtps_s32_f32(v8 / v11);
  if (v13 - 1 >= v14) {
    int v15 = v14;
  }
  else {
    int v15 = v13 - 1;
  }
  if (v9 <= a4 - (int)(float)(v7 * (float)v15)) {
    int v16 = a4 - (int)(float)(v7 * (float)v15);
  }
  else {
    int v16 = v9;
  }
  if (v15 != -1) {
    float v10 = (float)(v16 / (v15 + 1));
  }
  long long v17 = *((_OWORD *)a2 + 1);
  v23[0] = *(_OWORD *)a2;
  v23[1] = v17;
  if (v12 >= 1)
  {
    int v18 = 0;
    int v19 = a4 - v16;
    float v20 = v10;
    do
    {
      int v21 = v16 / v13;
      WORD4(v23[0]) = v16 / v13;
      WORD6(v23[0]) = WORD4(v23[0]);
      if (v18 && v15 && v20 < (float)(v21 + v18))
      {
        int v22 = v19 / v15--;
        v19 -= v22;
        v18 += v22;
        float v20 = v10 + v20;
      }
      *(void *)&v23[0] = *(void *)a2 + 4 * v18;
      this = (MTMBSmartSegmentAssembler *)MTMBSmartSegmentAssembler::CopySegment(v6, (const MTMBSegment *)v23);
      v18 += v21;
      v16 -= v21;
      --v13;
    }
    while (v13);
  }
  return this;
}

void MTMBSmartSegmentAssembler::SmoothAmplitude(MTMBSmartSegmentAssembler *this, MTMBDemi *a2, MTMBDemi *a3)
{
  unint64_t v3 = *((void *)a2 + 2);
  if (v3 >= 2 && *((void *)a3 + 2) > 1uLL)
  {
    uint64_t v5 = *((void *)a2 + 13);
    float v6 = *(float *)(v5 + 72);
    float v7 = *(float *)(v5 + 76);
    int v15 = *(_DWORD *)(*((void *)a3 + 13) + 72);
    float v16 = v6;
    uint64_t v8 = *(void *)a2;
    if (v3 != 2)
    {
      int v9 = (unsigned __int16 *)(v8 + 8);
      unint64_t v10 = v3 - 2;
      do
      {
        unsigned int v11 = *v9;
        v9 += 16;
        float v6 = v6 + (float)((float)v11 * v7);
        --v10;
      }
      while (v10);
      float v16 = v6;
    }
    __dst[0] = 0;
    __dst[1] = 0;
    __int16 v13 = 1;
    uint64_t v14 = 0;
    MTMBSegment::Allocate((MTMBSegment *)__dst, *(unsigned __int16 *)(v8 + 32 * v3 - 24) + *(unsigned __int16 *)(v8 + 32 * (v3 - 2) + 8));
  }
  if (MTBEDebugFlags::sMEOWDebug)
  {
    unsigned int v4 = (FILE *)*MEMORY[0x1E4F143C8];
    fwrite("Phoneme smoothing skipped due to insufficient material\n", 0x37uLL, 1uLL, v4);
  }
}

void MTMBWsolaSegmentAssembler::MTMBWsolaSegmentAssembler(MTMBWsolaSegmentAssembler *this)
{
  *(void *)this = &unk_1F347FA20;
}

{
  *(void *)this = &unk_1F347FA20;
}

void MTMBSegmentAssembler::MTMBSegmentAssembler(MTMBSegmentAssembler *this)
{
  *(void *)this = &unk_1F347FA60;
}

void MTMBWsolaSegmentAssembler::Assemble(MTMBWsolaSegmentAssembler *this, MTMBDemi *a2, MTMBDemi *a3)
{
}

uint64_t MTMBWsolaSegmentAssembler::ProcessDemi(uint64_t a1, unsigned __int16 **a2)
{
  if ((uint64_t)a2[2] < 1) {
    return 0;
  }
  LODWORD(v4) = 0;
  int v5 = 0;
  float v6 = *a2;
  do
  {
    if (v6[8])
    {
      int v8 = (*(unsigned __int16 (**)(void, float, float))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), (float)(*(_DWORD *)(a1 + 16) + v5 + (v6[4] >> 1)), (float)v6[4]);
      int v7 = v6[4];
    }
    else
    {
      int v7 = v6[4];
      int v8 = v7;
    }
    v6[6] = v8;
    v5 += v7;
    uint64_t v4 = (v4 + v8);
    v6 += 16;
  }
  while (v6 < &(*a2)[16 * (void)a2[2]]);
  return v4;
}

void MTMBWsolaSegmentAssembler::Assemble(MTMBWsolaSegmentAssembler *this, MTMBDemi *a2)
{
  if (*((_DWORD *)a2 + 25))
  {
    if (*(void *)(*((void *)a2 + 13) + 32)) {
      MTMBPitchInterpolator::CreateWordInterpolator(a2, a2);
    }
  }
}

uint64_t MTMBAssemblerCreator::Create(int a1)
{
  if (a1 == 1) {
    operator new();
  }
  if (!a1) {
    operator new();
  }
  return 0;
}

void sub_1DA4C2C20(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C40242BC664);
  _Unwind_Resume(a1);
}

void MTMBAssemblerCreator::MTMBAssemblerCreator(MTMBAssemblerCreator *this)
{
  *(void *)this = &unk_1F347FAA0;
}

{
  *(void *)this = &unk_1F347FAA0;
}

void MTMBAssemblerCreator::~MTMBAssemblerCreator(MTMBAssemblerCreator *this)
{
}

void MTMBSmartSegmentAssembler::~MTMBSmartSegmentAssembler(MTMBSmartSegmentAssembler *this)
{
  MTMBSmartSegmentAssembler::~MTMBSmartSegmentAssembler(this);

  JUMPOUT(0x1E016FF00);
}

{
  uint64_t v2;

  *(void *)this = &unk_1F347FAC0;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  MEOWVectorBase::~MEOWVectorBase((void **)this + 4);
}

void MTMBWsolaSegmentAssembler::~MTMBWsolaSegmentAssembler(MTMBWsolaSegmentAssembler *this)
{
}

void MTMBSimpleSignalProcessor::MTMBSimpleSignalProcessor(MTMBSimpleSignalProcessor *this)
{
  *(void *)this = &unk_1F347FB50;
  *((_DWORD *)this + 2) = 0;
  MTMBCrossfader::Create(this);
}

{
  *(void *)this = &unk_1F347FB50;
  *((_DWORD *)this + 2) = 0;
  MTMBCrossfader::Create(this);
}

void MTMBSimpleSignalProcessor::~MTMBSimpleSignalProcessor(MTMBSimpleSignalProcessor *this)
{
  *(void *)this = &unk_1F347FB50;
  uint64_t v1 = *((void *)this + 2);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

{
  uint64_t v1;

  *(void *)this = &unk_1F347FB50;
  uint64_t v1 = *((void *)this + 2);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)this = &unk_1F347FB50;
  uint64_t v1 = *((void *)this + 2);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x1E016FF00);
}

uint64_t MTMBSimpleSignalProcessor::BlendSegments(MTMBSimpleSignalProcessor *this, MTMBSegment *a2, const float **a3)
{
  if (*((_WORD *)a2 + 8) & 1) != 0 && ((_WORD)a3[2]) {
    return MTMBSimpleSignalProcessor::BlendVoicedSegments(this, (const void **)a2, (MTMBSegment *)a3);
  }
  else {
    return MTMBSimpleSignalProcessor::BlendUnvoicedSegments(this, a2, a3);
  }
}

uint64_t MTMBSimpleSignalProcessor::BlendVoicedSegments(MTMBSimpleSignalProcessor *this, const void **a2, MTMBSegment *a3)
{
  MTMBSegment::Modify((uint64_t)a2);
  MTMBSegment::Modify((uint64_t)a3);
  uint64_t v6 = *((unsigned __int16 *)a2 + 4);
  int v7 = 512 - v6;
  if (512 - (int)v6 >= (int)v6) {
    int v7 = *((unsigned __int16 *)a2 + 4);
  }
  if (v7)
  {
    memmove((char *)*a2 + 4 * v6, *a2, 4 * v7);
    LODWORD(v6) = *((unsigned __int16 *)a2 + 4);
  }
  int v8 = (float *)*a2;
  if (v6 >= 2)
  {
    float v9 = v8[2] + (float)((float)(*v8 - v8[1]) * 3.0);
    unint64_t v10 = &v8[v6];
    float v12 = *(v10 - 1);
    unsigned int v11 = v10 - 1;
    float v13 = v9 - v12;
    float v14 = *v8 - v12;
    if (vabds_f32(v9, v12) <= vabds_f32(*v8, v12)) {
      float v15 = v13;
    }
    else {
      float v15 = v14;
    }
    unsigned int v16 = v6 >> 1;
    do
    {
      *unsigned int v11 = v15 + *v11;
      --v11;
      float v15 = v15 * 0.9375;
      --v16;
    }
    while (v16);
  }
  signed int v17 = 0;
  int v18 = (char *)a3 + 8;
  if (*((unsigned __int16 *)a3 + 4) >= v6) {
    int v18 = (char *)(a2 + 1);
  }
  int v19 = *(unsigned __int16 *)v18;
  LODWORD(v20) = 512 - v19;
  if (512 - v19 >= v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = v20;
  }
  float v21 = 1.0e20;
LABEL_17:
  uint64_t result = v20;
  uint64_t v23 = (uint64_t)&v8[(v20 - 1) + 1];
  while (1)
  {
    BOOL v24 = __OFSUB__(v20, 1);
    uint64_t v20 = (v20 - 1);
    if (((int)v20 < 0) ^ v24 | (v20 == 0)) {
      break;
    }
    v23 -= 4;
    if ((int)result > (int)(v6 >> 1) || (int)v20 <= 512 - (int)v6)
    {
      if (v19)
      {
        uint64_t v25 = 0;
        float v26 = 0.0;
        do
        {
          float v26 = v26 + vabds_f32(*(float *)(*(void *)a3 + v25), *(float *)(v23 + v25));
          v25 += 16;
        }
        while (((4 * v19 + 12) & 0x7FFF0) != v25);
      }
      else
      {
        float v26 = 0.0;
      }
      if (v26 < v21)
      {
        float v21 = v26;
        signed int v17 = v20;
      }
      goto LABEL_17;
    }
  }
  if (v17 >= (int)(v6 >> 1)) {
    LOWORD(v6) = 0;
  }
  *((_WORD *)a2 + 4) = v6 + v17;
  if (512 - v17 >= v19) {
    uint64_t v27 = v19;
  }
  else {
    uint64_t v27 = (512 - v17);
  }
  if (v27)
  {
    float v28 = *(const float **)a3;
    double v29 = (MTMBCrossfader *)*((void *)this + 2);
    unsigned int v30 = *(const float **)a3;
    return MTMBCrossfader::CrossfadePartial(v29, v27, 1, v27, &v8[v17], v28, v30);
  }
  return result;
}

uint64_t MTMBSimpleSignalProcessor::BlendUnvoicedSegments(MTMBSimpleSignalProcessor *this, MTMBSegment *a2, const float **a3)
{
  if (kBlendUnvoicedWindow)
  {
    MTBEDebugParams::GetParam((const __CFString *)kBlendUnvoicedWindow, (const __CFString *)&qword_1EA8DA328, (uint64_t *)qword_1EA8DA328);
    kBlendUnvoicedWindow = 0;
  }
  unsigned int v6 = *((unsigned __int16 *)a3 + 4);
  if (v6 >= *((unsigned __int16 *)a2 + 4)) {
    unsigned int v6 = *((unsigned __int16 *)a2 + 4);
  }
  if ((int)v6 >= (int)qword_1EA8DA328) {
    uint64_t v7 = qword_1EA8DA328;
  }
  else {
    uint64_t v7 = v6;
  }
  uint64_t result = MTMBSegment::Modify((uint64_t)a2);
  unsigned __int16 v9 = *((_WORD *)a2 + 4) - v7;
  *((_WORD *)a2 + 4) = v9;
  if (v7)
  {
    unint64_t v10 = *a3;
    unsigned int v11 = (const float *)(*(void *)a2 + 4 * v9);
    float v12 = (MTMBCrossfader *)*((void *)this + 2);
    float v13 = *a3;
    return MTMBCrossfader::CrossfadePartial(v12, v7, 1, v7, v11, v10, v13);
  }
  return result;
}

void MTMBSimpleSignalProcessor::AdjustAmplitude(MTMBSimpleSignalProcessor *this, MTMBSegment *a2, float *a3, float a4, int a5)
{
  float __B = a4;
  if (a4 != 0.0)
  {
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)__C, 4, *((unsigned __int16 *)a2 + 4));
    vDSP_vramp(a3, &__B, __C[0], 1, *((unsigned __int16 *)a2 + 4));
    LOWORD(v9) = *((_WORD *)a2 + 4);
    float v10 = *a3 + (float)(__B * (float)v9);
    if (!a5)
    {
LABEL_36:
      vDSP_vmul(*(const float **)a2, 1, __C[0], 1, *(float **)a2, 1, *((unsigned __int16 *)a2 + 4));
      *a3 = v10;
      if (a5)
      {
        if (kAmplitudeMinScale)
        {
          MTBEDebugParams::GetParam(kAmplitudeMinScale, (const __CFString *)&dword_1EA8DA338, v21, *(float *)&dword_1EA8DA338);
          kAmplitudeMinScale = 0;
        }
        float v22 = __B;
        if (v10 <= *(float *)&dword_1EA8DA338 && __B < 0.0) {
          goto LABEL_45;
        }
        float v23 = *a3;
        if (kAmplitudeMaxScale)
        {
          MTBEDebugParams::GetParam(kAmplitudeMaxScale, (const __CFString *)&dword_1EA8DA348, v21, *(float *)&dword_1EA8DA348);
          kAmplitudeMaxScale = 0;
          float v22 = __B;
        }
        if (v23 >= *(float *)&dword_1EA8DA348 && v22 > 0.0) {
LABEL_45:
        }
          float __B = 0.0;
      }
      MEOWVectorBase::~MEOWVectorBase((void **)__C);
      return;
    }
    if (kAmplitudeMinScale)
    {
      MTBEDebugParams::GetParam(kAmplitudeMinScale, (const __CFString *)&dword_1EA8DA338, v8, *(float *)&dword_1EA8DA338);
      kAmplitudeMinScale = 0;
    }
    float v11 = *(float *)&dword_1EA8DA338;
    if (v10 >= *(float *)&dword_1EA8DA338)
    {
      if (kAmplitudeMaxScale)
      {
        MTBEDebugParams::GetParam(kAmplitudeMaxScale, (const __CFString *)&dword_1EA8DA348, v8, *(float *)&dword_1EA8DA348);
        kAmplitudeMaxScale = 0;
        CFStringRef v12 = kAmplitudeMinScale;
        float v11 = *(float *)&dword_1EA8DA338;
        if (v10 > *(float *)&dword_1EA8DA348)
        {
LABEL_31:
          if (v12)
          {
            MTBEDebugParams::GetParam(v12, (const __CFString *)&dword_1EA8DA338, v8, v11);
            kAmplitudeMinScale = 0;
            float v11 = *(float *)&dword_1EA8DA338;
          }
          goto LABEL_33;
        }
        float v13 = *a3;
        if (kAmplitudeMinScale)
        {
          MTBEDebugParams::GetParam(kAmplitudeMinScale, (const __CFString *)&dword_1EA8DA338, v8, *(float *)&dword_1EA8DA338);
          kAmplitudeMinScale = 0;
          float v11 = *(float *)&dword_1EA8DA338;
        }
      }
      else
      {
        if (v10 > *(float *)&dword_1EA8DA348) {
          goto LABEL_33;
        }
        float v13 = *a3;
      }
      if (v13 >= v11)
      {
        float v18 = *a3;
        float v19 = *(float *)&dword_1EA8DA348;
        if (kAmplitudeMaxScale)
        {
          MTBEDebugParams::GetParam(kAmplitudeMaxScale, (const __CFString *)&dword_1EA8DA348, v8, *(float *)&dword_1EA8DA348);
          kAmplitudeMaxScale = 0;
          float v19 = *(float *)&dword_1EA8DA348;
        }
        if (v18 <= v19) {
          goto LABEL_36;
        }
        CFStringRef v12 = kAmplitudeMinScale;
        float v11 = *(float *)&dword_1EA8DA338;
        goto LABEL_31;
      }
    }
LABEL_33:
    float v25 = v11;
    int v20 = dword_1EA8DA348;
    if (kAmplitudeMaxScale)
    {
      MTBEDebugParams::GetParam(kAmplitudeMaxScale, (const __CFString *)&dword_1EA8DA348, v8, *(float *)&dword_1EA8DA348);
      kAmplitudeMaxScale = 0;
      int v20 = dword_1EA8DA348;
    }
    int v24 = v20;
    vDSP_vclip(__C[0], 1, &v25, (const float *)&v24, __C[0], 1, *((unsigned __int16 *)a2 + 4));
    goto LABEL_36;
  }
  float v14 = *a3;
  if (*a3 != 1.0)
  {
    if (a5)
    {
      if (kAmplitudeMinScale)
      {
        MTBEDebugParams::GetParam(kAmplitudeMinScale, (const __CFString *)&dword_1EA8DA338, a3, *(float *)&dword_1EA8DA338);
        kAmplitudeMinScale = 0;
      }
      float v15 = *(float *)&dword_1EA8DA338;
      if (kAmplitudeMaxScale)
      {
        MTBEDebugParams::GetParam(kAmplitudeMaxScale, (const __CFString *)&dword_1EA8DA348, a3, *(float *)&dword_1EA8DA348);
        kAmplitudeMaxScale = 0;
      }
      float v14 = *(float *)&dword_1EA8DA348;
      if (*a3 < *(float *)&dword_1EA8DA348) {
        float v14 = *a3;
      }
      if (v15 >= v14) {
        float v14 = v15;
      }
      *a3 = v14;
    }
    int v16 = *((unsigned __int16 *)a2 + 4);
    signed int v17 = *(float **)a2;
    cblas_sscal(v16, v14, v17, 1);
  }
}

void sub_1DA4C357C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MTMBSimpleSignalProcessor::SmoothSegment(MTMBCrossfader **this, MTMBSegment *a2, MTMBSegment *a3)
{
  MTMBSegment::Modify((uint64_t)a3);
  __int16 v7 = *((_WORD *)a3 + 8);
  if ((v7 & 6) != 0)
  {
    if (*((unsigned __int16 *)a2 + 7) >= *((unsigned __int16 *)a3 + 4)) {
      uint64_t v8 = *((unsigned __int16 *)a3 + 4);
    }
    else {
      uint64_t v8 = *((unsigned __int16 *)a2 + 7);
    }
    if ((v7 & 1) != 0 || v8 < 0x10)
    {
      if (!v8) {
        goto LABEL_11;
      }
      unsigned int v9 = (const float *)(*(void *)a2 + 4 * *((unsigned __int16 *)a2 + 4));
    }
    else
    {
      unsigned int v9 = (const float *)(*(void *)a2 + 4 * *((unsigned __int16 *)a2 + 4));
      uint64_t v8 = 15;
    }
    MTMBCrossfader::CrossfadePartial(this[2], v8, 1, v8, v9, *(const float **)a3, *(const float **)a3);
  }
LABEL_11:
  uint64_t v10 = *((void *)a3 + 3);
  v6.n128_u32[0] = *(_DWORD *)(v10 + 76);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  CFStringRef v12 = (uint64_t (*)(MTMBCrossfader **, MTMBSegment *, uint64_t, uint64_t, __n128))*((void *)*this + 4);

  return v12(this, a3, v10 + 72, v11, v6);
}

void MTMBSimpleSignalProcessor::ChangePitch(MTMBCrossfader **this, MTMBSegment *a2, const float **a3)
{
  int v3 = *((unsigned __int16 *)a2 + 4);
  if (v3 != *((unsigned __int16 *)a2 + 6))
  {
    if ((*((_WORD *)a2 + 8) & 1) == 0)
    {
      *((_WORD *)a2 + 6) = v3;
      return;
    }
    MTMBSegment::Modify((uint64_t)a2);
    uint64_t v7 = *((unsigned __int16 *)a2 + 6);
    uint64_t v8 = *((unsigned __int16 *)a2 + 4);
    float v9 = (float)v7 / (float)v8;
    if (v9 >= 1.5 || v9 <= 0.5)
    {
      if (v9 <= 1.0)
      {
        if (v7 >= 0x10) {
          uint64_t v14 = 16;
        }
        else {
          uint64_t v14 = *((unsigned __int16 *)a2 + 6);
        }
        if (!v14) {
          goto LABEL_39;
        }
        float v15 = (const float *)(*(void *)a2 + 4 * v8 - 4 * v14);
        uint64_t v16 = *(void *)a2 + 4 * v7;
      }
      else
      {
        uint64_t v11 = (const float *)(*(void *)a2 + 4 * v8);
        uint64_t v12 = *(void *)a2 + 4 * v7 - (void)v11;
        if (v12 >= 1) {
          bzero((void *)(*(void *)a2 + 4 * v8), 4 * (((unint64_t)v12 >> 2) - ((unint64_t)v12 > 3)) + 4);
        }
        if ((int)v7 - (int)v8 >= 16) {
          uint64_t v13 = 16;
        }
        else {
          uint64_t v13 = (v7 - v8);
        }
        if (v13)
        {
          MTMBCrossfader::CrossfadePartial(this[2], v13, 1, v13, *a3, v11, v11);
          LODWORD(v8) = *((unsigned __int16 *)a2 + 4);
        }
        if (v8 >= 0x10) {
          uint64_t v14 = 16;
        }
        else {
          uint64_t v14 = v8;
        }
        if (!v14) {
          goto LABEL_39;
        }
        float v15 = (const float *)(*(void *)a2 + 4 * v8 - 4 * v14);
        uint64_t v16 = *(void *)a2 + 4 * *((unsigned __int16 *)a2 + 6);
      }
      float v18 = (const float *)(v16 - 4 * v14);
    }
    else
    {
      if (v9 <= 1.0)
      {
        MTMBSegment::Modify((uint64_t)a3);
        uint64_t v22 = *((unsigned __int16 *)a2 + 4);
        uint64_t v23 = *((unsigned __int16 *)a2 + 6);
        uint64_t v24 = (v22 - v23);
        if (2 * (int)v24 >= (int)v23) {
          uint64_t v25 = *((unsigned __int16 *)a2 + 6);
        }
        else {
          uint64_t v25 = (2 * v24);
        }
        float v26 = (const float *)(*(void *)a2 + 4 * v22 - 4 * (int)v25);
        MTMBCrossfader::CrossfadePartial(this[2], v25, 1, (v25 - v24), v26, (const float *)(*(void *)a2 + 4 * v23), v26);
        float v19 = this[2];
        float v18 = *a3;
        float v15 = (const float *)(*(void *)a2 + 4 * *((unsigned __int16 *)a2 + 6));
        uint64_t v14 = v25;
        uint64_t v20 = v24;
        uint64_t v21 = 1;
        goto LABEL_38;
      }
      uint64_t v17 = (int)v7 - (int)v8;
      if (v7 != v8)
      {
        memmove((void *)(*(void *)a2 + 4 * v8), (const void *)(*(void *)a2 + 4 * v8 - 4 * v17), 4 * v17);
        LODWORD(v7) = *((unsigned __int16 *)a2 + 4);
      }
      if (v17 == v7) {
        goto LABEL_39;
      }
      uint64_t v14 = (v7 - v17);
      float v15 = *(const float **)a2;
      float v18 = (const float *)(*(void *)a2 + 4 * v17);
    }
    float v19 = this[2];
    uint64_t v20 = 1;
    uint64_t v21 = v14;
LABEL_38:
    MTMBCrossfader::CrossfadePartial(v19, v14, v20, v21, v18, v15, v18);
LABEL_39:
    *((_WORD *)a2 + 4) = *((_WORD *)a2 + 6);
  }
}

void MTMBAltSignalProcessor::ChangePitch(MTMBCrossfader **this, MTMBSegment *a2, MTMBSegment *a3)
{
  int v3 = *((unsigned __int16 *)a2 + 4);
  if (v3 == *((unsigned __int16 *)a2 + 6)) {
    return;
  }
  if ((*((_WORD *)a2 + 8) & 1) == 0)
  {
    *((_WORD *)a2 + 6) = v3;
    return;
  }
  MTMBSegment::Modify((uint64_t)a2);
  if (*((unsigned __int16 *)a2 + 6) > *((unsigned __int16 *)a2 + 4)
    && MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kPitchChangeUseHann))
  {
    if (kPitchChangeHannProportion)
    {
      MTBEDebugParams::GetParam((const __CFString *)kPitchChangeHannProportion, (const __CFString *)&dword_1EA8DA368, v7, *(float *)&dword_1EA8DA368);
      kPitchChangeHannProportion = 0;
    }
    float v8 = *(float *)&dword_1EA8DA368;
    unint64_t __N = *((unsigned __int16 *)a2 + 4);
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)__C, 4, __N);
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)__D, 4, *((unsigned __int16 *)a2 + 6));
    vDSP_hann_window(__C[0], 2 * *((unsigned __int16 *)a2 + 4), 1);
    vDSP_vmul(*(const float **)a2, 1, &__C[0][*((unsigned __int16 *)a2 + 4) - 1], -1, __D[0], 1, *((unsigned __int16 *)a2 + 4));
    LODWORD(__N) = vcvtps_s32_f32(v8 * (float)__N);
    vDSP_hann_window(__C[0], (2 * __N), 1);
    uint64_t v10 = *((unsigned __int16 *)a2 + 6);
    uint64_t v11 = *((unsigned __int16 *)a2 + 4);
    uint64_t v12 = &__D[0][v11];
    if (v10 <= (int)v11 + (int)__N)
    {
      bzero(v12, 4 * (v10 - v11));
      uint64_t v32 = &__D[0][*((unsigned __int16 *)a2 + 6) - (int)__N];
      vDSP_vma((const float *)(*(void *)a2 + 4 * (*((unsigned __int16 *)a2 + 4) - (int)__N)), 1, __C[0], 1, v32, 1, v32, 1, __N);
    }
    else
    {
      bzero(v12, 4 * ((int)v10 - ((int)v11 + (int)__N)));
      vDSP_vmul((const float *)(*(void *)a2 + 4 * (*((unsigned __int16 *)a2 + 4) - (int)__N)), 1, __C[0], 1, &__D[0][*((unsigned __int16 *)a2 + 6) - (int)__N], 1, __N);
    }
    goto LABEL_37;
  }
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kPitchChangeUseHann))
  {
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)__C, 4, *((unsigned __int16 *)a2 + 6));
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)__D, 4, *((unsigned __int16 *)a2 + 6));
    vDSP_hann_window(__C[0], 2 * *((unsigned __int16 *)a2 + 6), 1);
    vDSP_vmul(*(const float **)a2, 1, &__C[0][*((unsigned __int16 *)a2 + 6) - 1], -1, __D[0], 1, *((unsigned __int16 *)a2 + 6));
    vDSP_vma((const float *)(*(void *)a2+ 4 * (*((unsigned __int16 *)a2 + 4) - (unint64_t)*((unsigned __int16 *)a2 + 6))), 1, __C[0], 1, __D[0], 1, __D[0], 1, *((unsigned __int16 *)a2 + 6));
LABEL_37:
    uint64_t v33 = *((unsigned __int16 *)a2 + 6);
    if (*((_WORD *)a2 + 6))
    {
      memmove(*(void **)a2, __D[0], 4 * v33);
      LOWORD(v33) = *((_WORD *)a2 + 6);
    }
    *((_WORD *)a2 + 4) = v33;
    MEOWVectorBase::~MEOWVectorBase((void **)__D);
    MEOWVectorBase::~MEOWVectorBase((void **)__C);
    return;
  }
  int v13 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kPitchDetectExcitation);
  unsigned int v15 = *((unsigned __int16 *)a2 + 4);
  if (v13)
  {
    int v16 = cblas_isamax(*((unsigned __int16 *)a2 + 4), *(const float **)a2, 1);
    unsigned int v15 = *((unsigned __int16 *)a2 + 4);
    BOOL v17 = v16 < (int)(v15 >> 1);
  }
  else
  {
    BOOL v17 = 1;
  }
  unsigned int v18 = *((unsigned __int16 *)a2 + 6);
  if (v18 <= 2 * v15)
  {
    int v20 = v18 - v15;
    if (v18 <= v15)
    {
      if (kPitchIncreaseWindow)
      {
        MTBEDebugParams::GetParam((const __CFString *)kPitchIncreaseWindow, (const __CFString *)&dword_1EA8DA3A8, v14, *(float *)&dword_1EA8DA3A8);
        kPitchIncreaseWindow = 0;
        unsigned int v18 = *((unsigned __int16 *)a2 + 6);
      }
      float v34 = *(float *)&dword_1EA8DA3A8 * (float)v18;
      uint64_t v30 = (int)v34;
      if (!v17)
      {
        unsigned int v36 = *(void **)a2;
        uint64_t v37 = *(void *)a2 + 4 * *((unsigned __int16 *)a2 + 4);
        unsigned int v38 = (const void *)(v37 - 4 * v18);
        if (v30)
        {
          MTMBCrossfader::CrossfadePartial(this[2], v30, 1, (int)v34, *(const float **)a2, (const float *)(v37 - 4 * v18), (const float *)(v37 - 4 * v18));
          unsigned int v18 = *((unsigned __int16 *)a2 + 6);
        }
        if (v18) {
          memmove(v36, v38, 4 * v18);
        }
        goto LABEL_55;
      }
      if (!v30)
      {
LABEL_55:
        *((_WORD *)a2 + 4) = *((_WORD *)a2 + 6);
        return;
      }
      uint64_t v27 = (const float *)(*(void *)a2 + 4 * *((unsigned __int16 *)a2 + 4) - 4 * (int)v30);
      double v29 = (const float *)(*(void *)a2 + 4 * v18 - 4 * (int)v30);
      float v28 = this[2];
      uint64_t v31 = (int)v34;
    }
    else
    {
      if (kPitchDecreaseWindow)
      {
        MTBEDebugParams::GetParam((const __CFString *)kPitchDecreaseWindow, (const __CFString *)&dword_1EA8DA388, v14, *(float *)&dword_1EA8DA388);
        kPitchDecreaseWindow = 0;
      }
      int v21 = (int)(float)(*(float *)&dword_1EA8DA388 * (float)v20);
      if (kPitchDecreaseMinWin)
      {
        MTBEDebugParams::GetParam((const __CFString *)kPitchDecreaseMinWin, (const __CFString *)&qword_1EA8DA398, (uint64_t *)qword_1EA8DA398);
        kPitchDecreaseMinWin = 0;
      }
      if (v21 <= (int)qword_1EA8DA398) {
        int v22 = qword_1EA8DA398;
      }
      else {
        int v22 = v21;
      }
      uint64_t v23 = *((unsigned __int16 *)a2 + 4);
      if ((int)v23 - v20 >= v22) {
        uint64_t v24 = v22;
      }
      else {
        uint64_t v24 = (v23 - v20);
      }
      uint64_t v25 = *(void *)a2;
      if (!v17)
      {
        if (*((_WORD *)a2 + 4)) {
          memmove((void *)(v25 + 4 * *((unsigned __int16 *)a2 + 6) - 4 * v23), *(const void **)a2, 4 * v23);
        }
        if (!v24) {
          goto LABEL_55;
        }
        uint64_t v27 = (const float *)(v25 + 4 * v20);
        double v29 = &v27[v20];
        float v28 = this[2];
        uint64_t v30 = v24;
        uint64_t v31 = v24;
        int v35 = v27;
        goto LABEL_50;
      }
      float v26 = (char *)(v25 + 4 * v23);
      if (v18 != v15) {
        memmove(v26, &v26[-4 * v20], 4 * v20);
      }
      if (!v24) {
        goto LABEL_55;
      }
      uint64_t v27 = (const float *)&v26[-4 * v20 + -4 * (int)v24];
      float v28 = this[2];
      double v29 = (const float *)&v26[-4 * (int)v24];
      uint64_t v30 = v24;
      uint64_t v31 = v24;
    }
    int v35 = v29;
LABEL_50:
    MTMBCrossfader::CrossfadePartial(v28, v30, 1, v31, v29, v27, v35);
    goto LABEL_55;
  }
  do
  {
    unsigned int v19 = 2 * (v15 & 0x7FFF);
    if (v19 >= v18) {
      LOWORD(v19) = v18;
    }
    *((_WORD *)a2 + 6) = v19;
    (*((void (**)(MTMBCrossfader **, MTMBSegment *, MTMBSegment *))*this + 5))(this, a2, a3);
    unsigned int v15 = *((unsigned __int16 *)a2 + 4);
  }
  while (v15 < v18);
}

void sub_1DA4C3DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MTMBSimpleSignalProcessor::BlendBeg(uint64_t this, const float **a2)
{
  if (*((unsigned __int16 *)a2 + 4) >= 0xFu) {
    uint64_t v3 = 15;
  }
  else {
    uint64_t v3 = *((unsigned __int16 *)a2 + 4);
  }
  if (v3) {
    return MTMBCrossfader::CrossfadePartial(*(MTMBCrossfader **)(this + 16), v3, 1, v3, MTMBSimpleSignalProcessor::BlendBeg(MTMBSegment *)::sZero, *a2, *a2);
  }
  return this;
}

void MTMBSimpleSignalProcessor::BlendEnd(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *((unsigned __int16 *)a2 + 4);
  if (*((_WORD *)a2 + 4))
  {
    uint64_t v3 = *a2;
    float v4 = *(float *)(*a2 + 4 * v2 - 4);
    if (v4 <= 0.0)
    {
      if (v4 < 0.0)
      {
        do
        {
          uint64_t v7 = v3 + 4 * v2;
          *(_DWORD *)(v7 - 4) = 0;
        }
        while (*(float *)(v7 - 8) < 0.0 && v2-- > 1);
      }
    }
    else
    {
      do
      {
        uint64_t v5 = v3 + 4 * v2;
        *(_DWORD *)(v5 - 4) = 0;
      }
      while (*(float *)(v5 - 8) > 0.0 && v2-- > 1);
    }
  }
}

uint64_t MTMBSimpleSignalProcessor::ChangeAmplitude(uint64_t this, MTMBSegment *a2, float a3, float a4, float a5, int a6)
{
  if (!*((_WORD *)a2 + 4)) {
    return this;
  }
  uint64_t v11 = this;
  MTMBSegment::Modify((uint64_t)a2);
  if (a6)
  {
    uint64_t v12 = *((unsigned __int16 *)a2 + 4);
    if (*((_WORD *)a2 + 4))
    {
      int v13 = *(float **)a2;
      do
      {
        float v14 = (float)((float)(*(float *)(v11 + 8) * 27.0) * 0.03125) + *v13;
        *(float *)(v11 + 8) = v14;
        *v13++ = v14 * 4.0;
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    a3 = a3 * 1.05;
    a4 = a4 * 1.05;
  }
  if (a4 == a3)
  {
    cblas_sscal(*((unsigned __int16 *)a2 + 4), a3, *(float **)a2, 1);
    LODWORD(v15) = *((unsigned __int16 *)a2 + 4);
    int v16 = *(const float **)a2;
    if (!*((_WORD *)a2 + 4)) {
      goto LABEL_22;
    }
LABEL_15:
    uint64_t v19 = 0;
    do
    {
      float v20 = fabsf(v16[v19]);
      if ((LODWORD(v16[v19]) & 0x7FFFFFFFu) > 0x7F7FFFFF || v20 > (float)(a5 * 4.0)) {
        v16[v19] = 0.0;
      }
      ++v19;
    }
    while (v15 != v19);
    goto LABEL_22;
  }
  uint64_t v15 = *((unsigned __int16 *)a2 + 4);
  int v16 = *(const float **)a2;
  if (*((_WORD *)a2 + 4))
  {
    float v17 = (float)(a4 - a3) / (float)v15;
    unsigned int v18 = *(float **)a2;
    do
    {
      a3 = v17 + a3;
      *unsigned int v18 = a3 * *v18;
      ++v18;
    }
    while (v18 < &v16[v15]);
    if (v15) {
      goto LABEL_15;
    }
  }
LABEL_22:
  this = cblas_isamax(v15, v16, 1);
  int v22 = *(const float **)a2;
  uint64_t v23 = (float *)(*(void *)a2 + 4 * (int)this);
  for (float i = fabsf(*v23); i > a5; float i = fabsf(*v23))
  {
    float v25 = a5 / i;
    float v26 = (float)(1.0 - v25) / 10.0;
    if ((int)this <= 10) {
      int v27 = 10;
    }
    else {
      int v27 = this;
    }
    int v28 = v27 - 10;
    int v29 = this + 10;
    int v30 = *((unsigned __int16 *)a2 + 4);
    if (v30 - 1 < (int)this + 10) {
      int v29 = v30 - 1;
    }
    if ((int)this > v28)
    {
      uint64_t v31 = v23 - 1;
      int v32 = this;
      float v33 = v25;
      do
      {
        --v32;
        float v33 = v26 + v33;
        *uint64_t v31 = v33 * *v31;
        --v31;
      }
      while (v32 > v28);
    }
    if ((int)this <= v29)
    {
      int v34 = v29 - this + 1;
      do
      {
        *uint64_t v23 = v25 * *v23;
        ++v23;
        float v25 = v26 + v25;
        --v34;
      }
      while (v34);
    }
    this = cblas_isamax(v30, v22, 1);
    int v22 = *(const float **)a2;
    uint64_t v23 = (float *)(*(void *)a2 + 4 * (int)this);
  }
  return this;
}

void MTMBSignalProcessor::Create(MTMBSignalProcessor *this)
{
}

void sub_1DA4C4158(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C406B6A53AFLL);
  _Unwind_Resume(a1);
}

void MTMBAltSignalProcessor::~MTMBAltSignalProcessor(MTMBAltSignalProcessor *this)
{
  *(void *)this = &unk_1F347FB50;
  uint64_t v1 = *((void *)this + 2);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)this = &unk_1F347FB50;
  uint64_t v1 = *((void *)this + 2);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x1E016FF00);
}

uint64_t MTMBSegment::SetProperties(uint64_t result, _DWORD *a2)
{
  *(void *)(result + --*(_WORD *)(this + 24) = a2;
  ++*a2;
  return result;
}

void MTMBSegment::Allocate(MTMBSegment *this, int a2)
{
  float v4 = (_DWORD *)*((void *)this + 3);
  if (v4) {
    ++*v4;
  }
  MTMBSegment::Free(this);
  if (a2 <= 512) {
    __int16 v5 = 512;
  }
  else {
    __int16 v5 = a2;
  }
  *((_WORD *)this + 5) = v5;
  operator new[]();
}

_DWORD *MTMBSegment::Free(MTMBSegment *this)
{
  if (*((__int16 *)this + 8) < 0)
  {
    uint64_t v2 = *(void *)this;
    if (*(void *)this)
    {
      if (*(_DWORD *)(v2 - 4) != -1091585519 || *(_DWORD *)(v2 + 4 * *((unsigned __int16 *)this + 5)) != -1091585519)
      {
        MTBEAbort(0);
        uint64_t v2 = *(void *)this;
      }
      MEMORY[0x1E016FEE0](v2 - 4, 0x1000C8052888210);
    }
  }
  *(void *)this = 0;
  uint64_t result = (_DWORD *)*((void *)this + 3);
  if (result)
  {
    if ((*result)-- == 1)
    {
      JUMPOUT(0x1E016FF00);
    }
  }
  return result;
}

uint64_t MTMBSegment::Grow(uint64_t this)
{
  if (*(__int16 *)(this + 16) < 0)
  {
    if (*(void *)this) {
      operator new[]();
    }
  }
  return this;
}

uint64_t MTMBSegment::Modify(uint64_t this)
{
  if ((*(__int16 *)(this + 16) & 0x80000000) == 0) {
    MTMBSegment::Allocate((MTMBSegment *)this, *(unsigned __int16 *)(this + 8));
  }
  return this;
}

int *MTMBSegment::Abstract(MTMBSegment **this)
{
  uint64_t v2 = *this;
  char v3 = ((__int16)this[2] & 0x80000000) == 0
    || *((_DWORD *)v2 - 1) == -1091585519 && *((_DWORD *)v2 + *((unsigned __int16 *)this + 5)) == -1091585519;
  MTMBSegment::Abstract(v2, (const float *)*((unsigned __int16 *)this + 4), v3);
  return &MTMBSegment::Abstract(float const*,int,BOOL)::sBuf;
}

int *MTMBSegment::Abstract(MTMBSegment *this, const float *a2, char a3)
{
  int v3 = (int)a2;
  if ((int)a2 < 1)
  {
    int v6 = 0;
    int v5 = 0;
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
    int v7 = 0;
    float v8 = 0.0;
    uint64_t v9 = a2;
    uint64_t v10 = this;
    do
    {
      float v11 = *(float *)v10;
      uint64_t v10 = (MTMBSegment *)((char *)v10 + 4);
      float v12 = v11;
      int v13 = (int)v8;
      if (v6 > v5)
      {
        int v14 = v6;
      }
      else
      {
        int v13 = v7;
        int v14 = v5;
      }
      BOOL v15 = v12 == v8;
      if (v12 == v8)
      {
        ++v6;
      }
      else
      {
        int v7 = v13;
        float v8 = v12;
        int v6 = 1;
      }
      if (!v15) {
        int v5 = v14;
      }
      --v9;
    }
    while (v9);
  }
  if (v6 <= v5) {
    int v16 = v5;
  }
  else {
    int v16 = v6;
  }
  float v17 = (char *)&MTMBSegment::Abstract(float const*,int,BOOL)::sBuf;
  if ((a3 & 1) == 0)
  {
    strcpy((char *)&MTMBSegment::Abstract(float const*,int,BOOL)::sBuf, "!!! ");
    float v17 = &byte_1EA8DABF8;
  }
  int v18 = sprintf(v17, "[%u]", a2);
  if (v3) {
    float v19 = fabsf(*((float *)this + cblas_isamax(v3, (const float *)this, 1)));
  }
  else {
    float v19 = 0.0;
  }
  float v20 = &v17[v18];
  if (v19 > 100000.0)
  {
    *(_DWORD *)float v20 = 3940670;
    v20 += 3;
  }
  switch(v3)
  {
    case 0:
      strcpy(v20, "{}");
      uint64_t v21 = 2;
      goto LABEL_81;
    case 1:
      if (v19 > 0.0001 && v19 < 10.0) {
        uint64_t v23 = "{%.5f}";
      }
      else {
        uint64_t v23 = "{%.0f}";
      }
      double v24 = *(float *)this;
      goto LABEL_80;
    case 2:
      if (v19 > 0.0001 && v19 < 10.0) {
        uint64_t v23 = "{%.5f %.5f}";
      }
      else {
        uint64_t v23 = "{%.0f %.0f}";
      }
      double v24 = *(float *)this;
      double v25 = *((float *)this + 1);
      goto LABEL_79;
    case 3:
      if (v19 > 0.0001 && v19 < 10.0) {
        uint64_t v23 = "{%.5f %.5f %.5f}";
      }
      else {
        uint64_t v23 = "{%.0f %.0f %.0f}";
      }
      double v24 = *(float *)this;
      double v25 = *((float *)this + 1);
      double v26 = *((float *)this + 2);
      goto LABEL_78;
    case 4:
      if (v19 > 0.0001 && v19 < 10.0) {
        uint64_t v23 = "{%.5f %.5f %.5f %.5f}";
      }
      else {
        uint64_t v23 = "{%.0f %.0f %.0f %.0f}";
      }
      double v24 = *(float *)this;
      double v25 = *((float *)this + 1);
      double v26 = *((float *)this + 2);
      double v28 = *((float *)this + 3);
      goto LABEL_77;
    case 5:
      if (v19 > 0.0001 && v19 < 10.0) {
        uint64_t v23 = "{%.5f %.5f %.5f %.5f %.5f}";
      }
      else {
        uint64_t v23 = "{%.0f %.0f %.0f %.0f %.0f}";
      }
      double v24 = *(float *)this;
      double v25 = *((float *)this + 1);
      double v26 = *((float *)this + 2);
      double v28 = *((float *)this + 3);
      double v29 = *((float *)this + 4);
      goto LABEL_76;
    case 6:
      if (v19 > 0.0001 && v19 < 10.0) {
        uint64_t v23 = "{%.5f %.5f %.5f %.5f %.5f %.5f}";
      }
      else {
        uint64_t v23 = "{%.0f %.0f %.0f %.0f %.0f %.0f}";
      }
      double v24 = *(float *)this;
      double v25 = *((float *)this + 1);
      double v26 = *((float *)this + 2);
      double v28 = *((float *)this + 3);
      float v30 = *((float *)this + 5);
      double v29 = *((float *)this + 4);
      goto LABEL_75;
    default:
      if (v19 > 0.0001 && v19 < 10.0) {
        uint64_t v23 = "{%.5f %.5f %.5f ... %.5f %.5f %.5f}";
      }
      else {
        uint64_t v23 = "{%.0f %.0f %.0f ... %.0f %.0f %.0f}";
      }
      double v24 = *(float *)this;
      double v25 = *((float *)this + 1);
      double v26 = *((float *)this + 2);
      int v27 = (float *)((char *)this + 4 * v3);
      double v28 = *(v27 - 3);
      double v29 = *(v27 - 2);
      float v30 = *(v27 - 1);
LABEL_75:
      double v43 = v30;
LABEL_76:
      double v42 = v29;
LABEL_77:
      double v41 = v28;
LABEL_78:
      double v40 = v26;
LABEL_79:
      double v39 = v25;
LABEL_80:
      uint64_t v21 = sprintf(v20, v23, *(void *)&v24, *(void *)&v39, *(void *)&v40, *(void *)&v41, *(void *)&v42, *(void *)&v43);
LABEL_81:
      if (v16 >= 3)
      {
        uint64_t v37 = &v20[v21];
        if (v16 == v3) {
          sprintf(v37, " all %d");
        }
        else {
          sprintf(v37, " run %d len %d");
        }
      }
      return &MTMBSegment::Abstract(float const*,int,BOOL)::sBuf;
  }
}

float MTMBSegment::RawPower(MTMBSegment *this)
{
  int v2 = *((unsigned __int16 *)this + 4);
  if (!v2 || (*((_WORD *)this + 8) & 1) == 0) {
    return 0.0;
  }
  float v4 = cblas_sdot(v2, *(const float **)this, 1, *(const float **)this, 1);
  LOWORD(v5) = *((_WORD *)this + 4);
  return sqrtf(v4 / (float)v5);
}

float MTMBSegment::LinPower(const float **this)
{
  int v2 = *((unsigned __int16 *)this + 4);
  float result = 0.0;
  if (v2)
  {
    if ((_WORD)this[2])
    {
      float v4 = cblas_sdot(v2, *this, 1, *this, 1);
      LOWORD(v5) = *((_WORD *)this + 4);
      return v4 / (float)v5;
    }
  }
  return result;
}

MTFESpeechElement *MTMBSegment::Check(MTFESpeechElement *this)
{
  if (SLOWORD(this->var3) < 0
    && (*((_DWORD *)this->var0 - 1) != -1091585519
     || *((_DWORD *)this->var0 + *(unsigned __int16 *)&this->var2) != -1091585519))
  {
    return MTBEAbort(0);
  }
  return this;
}

void MTMBDemiProperties::MTMBDemiProperties(MTMBDemiProperties *this)
{
  *(_DWORD *)this = 1;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 17) = 0;
  *((void *)this + 9) = 1065353216;
  *((unsigned char *)this + 80) = 0;
}

{
  *(_DWORD *)this = 1;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 17) = 0;
  *((void *)this + 9) = 1065353216;
  *((unsigned char *)this + 80) = 0;
}

const char *MTMBDemiProperties::Phon(MTMBDemiProperties *this, char *a2)
{
  int v2 = (unsigned char *)*((void *)this + 1);
  if (!v2 || !*v2) {
    return "";
  }
  if (*((unsigned __int8 *)this + 18) == 255) {
    return (const char *)*((void *)this + 1);
  }
  int v3 = a2;
  if (*((unsigned char *)this + 18)) {
    sprintf(a2, ">%s");
  }
  else {
    sprintf(a2, "%s<");
  }
  return v3;
}

uint64_t MTMBDemiProperties::UseWordPitch(MTMBDemiProperties *this)
{
  if ((*((char *)this + 18) & 0x80000000) == 0) {
    return 0;
  }
  if (*((_WORD *)this + 8)) {
    return MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBEnforceTunes) ^ 1;
  }
  return 1;
}

uint64_t MTMBDemiProperties::UseGluePitch(MTMBDemiProperties *this)
{
  if ((*((_WORD *)this + 8) & 0x10) != 0) {
    return MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBForceGluePitch);
  }
  else {
    return 0;
  }
}

void MTMBDemi::MTMBDemi(MTMBDemi *this)
{
  MEOWVectorBase::MEOWVectorBase(this, 32);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)(v2 + 32), 4);
  *((_DWORD *)this + 25) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
}

void sub_1DA4C4D58(_Unwind_Exception *a1)
{
  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

void MTMBDemi::~MTMBDemi(MTMBDemi *this)
{
  uint64_t v2 = (_DWORD *)*((void *)this + 13);
  if (v2)
  {
    if ((*v2)-- == 1) {
      MEMORY[0x1E016FF00]();
    }
  }
  MEOWVectorBase::~MEOWVectorBase((void **)this + 4);

  MEOWVectorBase::~MEOWVectorBase((void **)this);
}

void MTMBDemi::Load(size_t a1, MEOWReader *this, uint64_t a3, uint64_t a4, unsigned __int16 *a5, int a6, float *a7)
{
  *(void *)(a1 + 104) = a3;
  GlobalParams = MEOWReader::GetGlobalParams(this, 1);
  uint64_t Segments = MTMBDemi::LoadSegments((void **)a1, *(void *)(a4 + 24), (const unsigned __int16 *)(*(void *)(a4 + 32) + 2 * *(void *)(a4 + 16)), bswap32(GlobalParams[2]) >> 16);
  unsigned int v15 = Segments;
  if (Segments) {
    uint64_t v16 = 200;
  }
  else {
    uint64_t v16 = 0;
  }
  unint64_t v26 = 0;
  unint64_t v27 = 0;
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v23, 2, Segments + v16);
  unsigned int Samples = MEOWReader::ReadSamples(this, *(_DWORD *)a4, *(unsigned int *)(a4 + 40), v15, v23[0], (unint64_t *)(a1 + 64), (unint64_t *)(a1 + 72));
  unint64_t v18 = Samples
      + (unint64_t)MEOWReader::ReadSamples(this, *(_DWORD *)a4, *(_DWORD *)(a4 + 40) + Samples, v16, &v23[0][Samples], &v27, &v26);
  if (*(void *)(a1 + 56) < v18) {
    MEOWVectorBase::Allocate((MEOWVectorBase *)(a1 + 32), v18, 1);
  }
  *(void *)(a1 + 48) = v18;
  if (v25 >= v18)
  {
    unint64_t v24 = v18;
    *(_DWORD *)(a1 + 100) = Samples;
    if (!v18) {
      goto LABEL_11;
    }
  }
  else
  {
    MEOWVectorBase::Allocate((MEOWVectorBase *)v23, v18, 1);
    unint64_t v24 = v18;
    *(_DWORD *)(a1 + 100) = Samples;
  }
  float v19 = v23[0];
  float v20 = *(float **)(a1 + 32);
  uint64_t v21 = 2 * v18;
  do
  {
    int v22 = *v19++;
    *v20++ = (float)v22;
    v21 -= 2;
  }
  while (v21);
LABEL_11:
  MTMBDemi::ProtectSegments(a1, a5, 0);
  MTMBDemi::SetBoundaryPitch((MTMBDemi *)a1, a6, a7);
  if ((MTBEDebugFlags::sMTXDebug & 0x10000) != 0) {
    MTMBDemi::DumpSBXF(a1);
  }
  MEOWVectorBase::~MEOWVectorBase((void **)v23);
}

void sub_1DA4C4F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t MTMBDemi::LoadSegments(void **this, uint64_t a2, const unsigned __int16 *a3, unsigned int a4)
{
  MEOWVectorBase::clear(this);
  if (a2)
  {
    uint64_t v8 = 0;
    unsigned __int16 v9 = 4 * a4;
    unsigned int v20 = a4 >> 1;
    unsigned int v21 = a4;
    do
    {
      uint64_t v10 = *a3 & 0x7FFF;
      if ((*a3 & 0x8000) != 0 || v10 > v9)
      {
        if ((v10 != 0) <= (unint64_t)((v10 + v20) / v21)) {
          unint64_t v13 = (v10 + v20) / v21;
        }
        else {
          unint64_t v13 = v10 != 0;
        }
        if (v13)
        {
          unint64_t v14 = *a3 & 0x7FFF;
          do
          {
            unsigned int v15 = this[13];
            ++*v15;
            MEOWVectorBase::Append(this);
            uint64_t v16 = (uint64_t)*this + 32 * (void)this[2];
            *(void *)(v16 - 32) = 0;
            *(_DWORD *)(v16 - --*(_WORD *)(this + 24) = (unsigned __int16)(v14 / v13);
            *(_WORD *)(v16 - 20) = v14 / v13;
            *(_DWORD *)(v16 - 18) = 0;
            *(void *)(v16 - 8) = v15;
            v14 -= (unsigned __int16)(v14 / v13--);
          }
          while (v13);
        }
      }
      else
      {
        float v11 = this[13];
        ++*v11;
        MEOWVectorBase::Append(this);
        uint64_t v12 = (uint64_t)*this + 32 * (void)this[2];
        *(void *)(v12 - 32) = 0;
        *(_WORD *)(v12 - --*(_WORD *)(this + 24) = v10;
        *(_WORD *)(v12 - 22) = 0;
        *(_WORD *)(v12 - 20) = v10;
        *(_DWORD *)(v12 - 18) = 0x10000;
        *(void *)(v12 - 8) = v11;
      }
      v8 += v10;
      ++a3;
      --a2;
    }
    while (a2);
  }
  else
  {
    float v17 = this[13];
    ++*v17;
    MEOWVectorBase::Append(this);
    uint64_t v8 = 0;
    uint64_t v18 = (uint64_t)*this + 32 * (void)this[2];
    *(void *)(v18 - 32) = 0;
    *(void *)(v18 - --*(_WORD *)(this + 24) = 0;
    *(_WORD *)(v18 - 16) = 0;
    *(void *)(v18 - 8) = v17;
  }
  return v8;
}

uint64_t MTMBDemi::ProtectSegments(uint64_t result, unsigned __int16 *a2, int a3)
{
  float v4 = (void *)result;
  uint64_t v5 = *(void *)(result + 32);
  unsigned int v6 = *a2;
  if (v6 == 0xFFFF)
  {
    uint64_t v7 = *(void *)(result + 104);
    if (*(unsigned char *)(v7 + 18))
    {
      int v8 = 0;
      int v9 = 0;
      int v10 = 0;
      int v11 = 0;
      int v12 = 0;
    }
    else
    {
      float result = strcmp(*(const char **)(v7 + 8), "k");
      int v8 = 0;
      int v9 = 0;
      int v10 = 0;
      int v12 = 0;
      if (result) {
        int v11 = 882;
      }
      else {
        int v11 = 1102;
      }
    }
  }
  else
  {
    int v11 = 0;
    int v12 = v6 >> 12;
    int v8 = (v6 >> 8) & 0xF;
    int v10 = v6 & 0xF;
    int v9 = v6 >> 4;
  }
  uint64_t v13 = v4[2];
  if (v13 >= 1)
  {
    int v14 = 0;
    unint64_t v15 = *v4 + 32 * v13;
    uint64_t v16 = v5 + 4 * v4[6];
    float v17 = (unsigned __int16 *)(*v4 + 16);
    unint64_t v18 = 32 * v13;
    float result = 16;
    while (1)
    {
      *((void *)v17 - 2) = v5;
      float v19 = v17 - 8;
      uint64_t v20 = *(v17 - 4);
      v5 += 4 * v20;
      *(v17 - 1) = (v16 - v5) >> 2;
      if (v11 < 1) {
        break;
      }
      v11 -= v20;
LABEL_50:
      v17 += 16;
      v18 -= 32;
      ++v14;
      if ((unint64_t)(v19 + 16) >= v15) {
        return result;
      }
    }
    int v21 = (v18 >> 5) - 1;
    if (v12 > v14 || v21 < v8)
    {
      if (!v14 || (v18 >> 5) == 1)
      {
LABEL_19:
        if (v9 > v14 || v21 < v10)
        {
          if (v14 && (v18 >> 5) != 1)
          {
            int v23 = *v17 | 0x20;
            *v17 |= 0x20u;
            goto LABEL_27;
          }
        }
        else
        {
          *v17 |= 0x60u;
        }
        if (!v14)
        {
LABEL_48:
          if (a3) {
            *v17 |= 0x800u;
          }
          goto LABEL_50;
        }
        int v23 = *v17;
LABEL_27:
        if ((*(v17 - 16) ^ v23))
        {
          BOOL v24 = (v23 & 1) == 0;
          if (v23) {
            uint64_t v25 = 0;
          }
          else {
            uint64_t v25 = -1;
          }
          uint64_t v26 = 16 * v25;
          unsigned __int16 v27 = v17[v26];
          if (v24) {
            uint64_t v28 = 0;
          }
          else {
            uint64_t v28 = -1;
          }
          __int16 v29 = v17[v26] & 0x18;
          if ((v27 & 0x10) != 0) {
            __int16 v29 = 16;
          }
          __int16 v30 = v29 | v27 & 0xFF87;
          if ((v27 & 0x40) != 0) {
            __int16 v31 = 64;
          }
          else {
            __int16 v31 = v17[v26] & 0x60;
          }
          v17[v26] = v30 | v31;
          uint64_t v32 = 16 * v28;
          unsigned __int16 v33 = v17[16 * v28];
          __int16 v34 = v33 & 0x18;
          if ((v33 & 0x18) != 0) {
            __int16 v34 = 8;
          }
          __int16 v35 = v34 | v33 & 0xFF87;
          if ((v33 & 0x60) != 0) {
            __int16 v36 = 32;
          }
          else {
            __int16 v36 = 0;
          }
          v17[v32] = v35 | v36;
        }
        if ((v18 >> 5) != 1)
        {
          unsigned int v37 = v17[12] + *(v17 - 20);
          if ((int)((v37 >> 1) - v20) > (int)(v37 >> 3)) {
            *v17 &= 0xFF87u;
          }
        }
        goto LABEL_48;
      }
      __int16 v22 = 8;
    }
    else
    {
      __int16 v22 = 24;
    }
    *v17 |= v22;
    goto LABEL_19;
  }
  return result;
}

size_t MTMBDemi::DumpSBXF(size_t this)
{
  uint64_t v1 = this;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*(void *)(this + 16) || *(void *)(*(void *)(this + 104) + 32))
  {
    uint64_t v2 = (FILE **)MEMORY[0x1E4F143D8];
    if ((MTMBDemi::DumpSBXF(void)::sHasHeader & 1) == 0)
    {
      fwrite("R 1.0\n", 6uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143D8]);
      MTMBDemi::DumpSBXF(void)::sHasHeader = 1;
    }
    int v3 = *v2;
    float v4 = MTMBDemiProperties::Phon(*(MTMBDemiProperties **)(v1 + 104), v15);
    fprintf(v3, "W \"%s\" %4.2f 0x%16llx 0x%16llx\n", v4, (float)((float)*(uint64_t *)(*(void *)(v1 + 104) + 24) * 0.000015259), *(void *)(v1 + 64), *(void *)(v1 + 72));
    uint64_t v5 = *(void *)(*(void *)(v1 + 104) + 32);
    if (v5)
    {
      fprintf(*v2, "D %ld\n", 5 * v5);
      MTFEPitchTargets::MTFEPitchTargets((MTFEPitchTargets *)v14, 1, *(const float **)(*(void *)(v1 + 104) + 40), *(_DWORD *)(*(void *)(v1 + 104) + 32));
      fputc(80, *v2);
      if (SLODWORD(v14[0]) >= 1)
      {
        uint64_t v6 = 1;
        do
          fprintf(*v2, " %5.1f:%d", (float)((float)(v14[v6] & 0xFFFFFFLL) / 100.0), v14[v6] >> 24);
        while (v6++ < SLODWORD(v14[0]));
      }
      fputc(10, *v2);
      fputc(70, *v2);
      uint64_t v8 = *(void *)(v1 + 104);
      if (*(void *)(v8 + 32))
      {
        unint64_t v9 = 0;
        do
        {
          fprintf(*v2, " %5.1f", *(float *)(*(void *)(v8 + 40) + 4 * v9++));
          uint64_t v8 = *(void *)(v1 + 104);
        }
        while (v9 < *(void *)(v8 + 32));
      }
      fputc(10, *v2);
    }
    if (*(void *)(v1 + 16))
    {
      unint64_t v10 = 0;
      do
      {
        uint64_t v11 = *(void *)v1 + 32 * v10;
        if (*(_WORD *)(v11 + 16)) {
          int v12 = 86;
        }
        else {
          int v12 = 85;
        }
        fputc(v12, *v2);
        if (*(_WORD *)(v11 + 8))
        {
          unint64_t v13 = 0;
          do
            fprintf(*v2, " %.0f", *(float *)(*(void *)v11 + 4 * v13++));
          while (v13 < *(unsigned __int16 *)(v11 + 8));
        }
        fputc(10, *v2);
        ++v10;
      }
      while (v10 < *(void *)(v1 + 16));
    }
    return fwrite("E\n", 2uLL, 1uLL, *v2);
  }
  return this;
}

void MTMBDemi::Load(size_t a1, MEOWReader *this, uint64_t a3)
{
  unsigned int v6 = bswap32(MEOWReader::GetGlobalParams(this, 1)[2]) >> 16;
  *(void *)(a1 + 104) = 0;
  uint64_t Segments = MTMBDemi::LoadSegments((void **)a1, *(void *)(a3 + 24), (const unsigned __int16 *)(*(void *)(a3 + 32) + 2 * *(void *)(a3 + 16)), v6);
  unsigned int v8 = Segments;
  unint64_t v19 = 0;
  unint64_t v18 = 0;
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v16, 2, Segments + 200);
  unsigned int Samples = MEOWReader::ReadSamples(this, *(_DWORD *)a3, *(unsigned int *)(a3 + 40), v8, v16[0], (unint64_t *)(a1 + 64), (unint64_t *)(a1 + 72));
  unint64_t v10 = Samples
      + (unint64_t)MEOWReader::ReadSamples(this, *(_DWORD *)a3, *(_DWORD *)(a3 + 40) + Samples, 0xC8u, &v16[0][Samples], &v19, &v18);
  if (*(void *)(a1 + 56) < v10) {
    MEOWVectorBase::Allocate((MEOWVectorBase *)(a1 + 32), v10, 1);
  }
  *(void *)(a1 + 48) = v10;
  *(_DWORD *)(a1 + 100) = Samples;
  if (v17)
  {
    uint64_t v11 = v16[0];
    int v12 = *(float **)(a1 + 32);
    uint64_t v13 = 2 * v17;
    do
    {
      int v14 = *v11++;
      *v12++ = (float)v14;
      v13 -= 2;
    }
    while (v13);
  }
  unsigned __int16 v15 = 0;
  MTMBDemi::ProtectSegments(a1, &v15, 0);
  MTMBDemi::SetBoundaryPitch((MTMBDemi *)a1, 0, 0);
  if ((MTBEDebugFlags::sMTXDebug & 0x10000) != 0) {
    MTMBDemi::DumpSBXF(a1);
  }
  MEOWVectorBase::~MEOWVectorBase((void **)v16);
}

void sub_1DA4C57A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MTMBDemi::Load(MTMBDemi *this, uint64_t a2, void *a3, const void *a4, unsigned int a5, unsigned int a6)
{
  *((void *)this + 13) = a2;
  uint64_t v10 = a3[3];
  if (a4 || v10)
  {
    unint64_t Segments = MTMBDemi::LoadSegments((void **)this, v10, (const unsigned __int16 *)(a3[4] + 2 * a3[2]), 0xC8u);
    int v12 = (void **)((char *)this + 32);
    if (*((void *)this + 7) < Segments) {
      MEOWVectorBase::Allocate((MTMBDemi *)((char *)this + 32), Segments, 1);
    }
    *((void *)this + 6) = Segments;
    *((_DWORD *)this + 25) = Segments;
    if (a4)
    {
      memcpy(*v12, a4, 4 * Segments);
      goto LABEL_9;
    }
  }
  else
  {
    MEOWVectorBase::clear((void **)this);
    unint64_t Segments = 0;
    int v12 = (void **)((char *)this + 32);
    *((void *)this + 6) = 0;
    *((_DWORD *)this + 25) = 0;
  }
  bzero(*v12, 4 * Segments);
LABEL_9:
  *((void *)this + 8) = a5;
  *((void *)this + 9) = a6;
  unsigned __int16 v14 = 0;
  MTMBDemi::ProtectSegments((uint64_t)this, &v14, a4 == 0);

  return MTMBDemi::SetBoundaryPitch(this, 0, 0);
}

void MTMBDemi::Load(size_t a1, PROWReader *a2, uint64_t a3, unsigned __int8 *a4, unsigned __int16 *a5)
{
  *(void *)(a1 + 104) = a3;
  uint64_t Segments = MTMBDemi::LoadSegments((void **)a1, *((void *)a4 + 1), *((const unsigned __int16 **)a4 + 2), bswap32(*(unsigned __int16 *)(*(void *)a2 + 2)) >> 16);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v22, 2, Segments + 512);
  unsigned int Samples = PROWReader::ReadSamples(a2, *((_DWORD *)a4 + 6), Segments, v22[0]);
  if (*(void *)(a1 + 56) < (unint64_t)Samples) {
    MEOWVectorBase::Allocate((MEOWVectorBase *)(a1 + 32), Samples, 1);
  }
  *(void *)(a1 + 48) = Samples;
  *(_DWORD *)(a1 + 100) = Samples;
  if (Samples)
  {
    uint64_t v11 = v22[0];
    int v12 = *(float **)(a1 + 32);
    uint64_t v13 = 2 * Samples;
    do
    {
      int v14 = *v11++;
      *v12++ = (float)v14;
      v13 -= 2;
    }
    while (v13);
  }
  MTMBDemi::ProtectSegments(a1, a5, 0);
  MTMBDemi::SetBoundaryPitch((MTMBDemi *)a1, 0, 0);
  uint64_t v15 = *a4;
  uint64_t v16 = 4 * v15;
  BOOL v17 = v15 == 0;
  uint64_t v18 = 3;
  if (v17) {
    uint64_t v18 = 0;
  }
  if (*(unsigned char *)(*(void *)(a1 + 104) + 18)) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 1;
  }
  uint64_t v20 = 2;
  if (!*(unsigned char *)(*(void *)(a1 + 104) + 18)) {
    uint64_t v20 = v16;
  }
  *(void *)(a1 + 64) = v19;
  *(void *)(a1 + 72) = v20;
  uint64_t v21 = *(void *)(a1 + 16);
  if (v21) {
    *(_WORD *)(*(void *)a1 + 32 * v21 - 16) &= 0xFF87u;
  }
  if ((MTBEDebugFlags::sMTXDebug & 0x10000) != 0) {
    MTMBDemi::DumpSBXF(a1);
  }
  *(void *)(a1 + 80) = -1;
  MEOWVectorBase::~MEOWVectorBase((void **)v22);
}

void sub_1DA4C5A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void MTMBDemi::Unload(MTMBDemi *this)
{
  if (*((void *)this + 2))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      MTMBSegment::Free((MTMBSegment *)(*(void *)this + v2));
      ++v3;
      v2 += 32;
    }
    while (v3 < *((void *)this + 2));
  }

  MEOWVectorBase::clear((void **)this + 4);
}

uint64_t *MTMBDemi::swap(MTMBDemi *this, MTMBDemi *a2)
{
  MEOWVectorBase::Swap((uint64_t *)this, a2);
  float result = MEOWVectorBase::Swap((uint64_t *)this + 4, (MTMBDemi *)((char *)a2 + 32));
  int v5 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v5;
  uint64_t v6 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v6;
  uint64_t v7 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v7;
  LOWORD(v7) = *((_WORD *)this + 40);
  *((_WORD *)this + 40) = *((_WORD *)a2 + 40);
  *((_WORD *)a2 + 40) = v7;
  LOWORD(v7) = *((_WORD *)this + 41);
  *((_WORD *)this + 41) = *((_WORD *)a2 + 41);
  *((_WORD *)a2 + 41) = v7;
  LOWORD(v7) = *((_WORD *)this + 42);
  *((_WORD *)this + 42) = *((_WORD *)a2 + 42);
  *((_WORD *)a2 + 42) = v7;
  LOWORD(v7) = *((_WORD *)this + 43);
  *((_WORD *)this + 43) = *((_WORD *)a2 + 43);
  *((_WORD *)a2 + 43) = v7;
  LOWORD(v7) = *((_WORD *)this + 44);
  *((_WORD *)this + 44) = *((_WORD *)a2 + 44);
  *((_WORD *)a2 + 44) = v7;
  LOWORD(v7) = *((_WORD *)this + 45);
  *((_WORD *)this + 45) = *((_WORD *)a2 + 45);
  *((_WORD *)a2 + 45) = v7;
  LODWORD(v7) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v7;
  LODWORD(v7) = *((_DWORD *)this + 24);
  *((_DWORD *)this + --*(_WORD *)(this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + --*(_WORD *)(this + 24) = v7;
  uint64_t v8 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v8;
  return result;
}

void MTMBDemi::clear(void **this)
{
  *((_DWORD *)this + 25) = 0;
  this[8] = 0;
  this[9] = 0;
}

uint64_t MTMBDemi::Dump(uint64_t this, __sFILE *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(this + 100))
  {
    uint64_t v3 = this;
    float v4 = *(MTMBDemiProperties **)(this + 104);
    if (v4 && **((unsigned char **)v4 + 1))
    {
      uint64_t v5 = *(void *)(v3 + 16);
      if (v5)
      {
        uint64_t v6 = 0;
        uint64_t v7 = (unsigned __int16 *)(*(void *)v3 + 12);
        do
        {
          unsigned int v8 = *v7;
          v7 += 16;
          v6 += v8;
          --v5;
        }
        while (v5);
      }
      else
      {
        uint64_t v6 = 0;
      }
      unint64_t v9 = MTMBDemiProperties::Phon(v4, v39);
      uint64_t v10 = *(void *)(v3 + 104);
      unint64_t v11 = 110250 * *(void *)(v10 + 32) / 0x3E8uLL;
      BOOL v12 = (*(_WORD *)(v10 + 16) & 1) == 0;
      uint64_t v13 = "";
      if (!v12) {
        uint64_t v13 = "!";
      }
      fprintf(a2, "Unit %s  Samples %lu->%lu[%lu]  %sFrames", v9, *(unsigned int *)(v3 + 100), v6, v11, v13);
      uint64_t v14 = *(void *)(v3 + 104);
      if (*(void *)(v14 + 32))
      {
        unint64_t v15 = 0;
        do
        {
          fprintf(a2, " %.0f", *(float *)(*(void *)(v14 + 40) + 4 * v15++));
          uint64_t v14 = *(void *)(v3 + 104);
        }
        while (v15 < *(void *)(v14 + 32));
      }
      fputc(10, a2);
      if (*(void *)(*(void *)(v3 + 104) + 48))
      {
        fwrite("OrigFrames", 0xAuLL, 1uLL, a2);
        uint64_t v16 = *(void *)(v3 + 104);
        if (*(void *)(v16 + 32))
        {
          unint64_t v17 = 0;
          do
          {
            fprintf(a2, " %.0f", *(float *)(*(void *)(v16 + 48) + 4 * v17++));
            uint64_t v16 = *(void *)(v3 + 104);
          }
          while (v17 < *(void *)(v16 + 32));
        }
        fputc(10, a2);
      }
    }
    fprintf(a2, "Start Parcel %016llx  End Parcel %016llx", *(void *)(v3 + 64), *(void *)(v3 + 72));
    int v18 = *(unsigned __int16 *)(v3 + 84);
    int v19 = *(unsigned __int16 *)(v3 + 88);
    int v20 = *(_DWORD *)(v3 + 92);
    float Factor = MTMBDemi::FirstFactor((MTMBDemi *)v3, v21, v22, v23);
    double v25 = Factor;
    int v26 = *(unsigned __int16 *)(v3 + 86);
    int v27 = *(unsigned __int16 *)(v3 + 90);
    int v28 = *(_DWORD *)(v3 + 96);
    float v29 = MTMBDemi::LastFactor((MTMBDemi *)v3, Factor);
    fprintf(a2, "  First PP %u->%u\\%u [%4.2f] Last PP %u->%u\\%u [%4.2f]", v18, v19, v20, v25, v26, v27, v28, v29);
    if (kMTMBPowerThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kMTMBPowerThreshold, (const __CFString *)&dword_1EA8DA3D8, v30, *(float *)&dword_1EA8DA3D8);
      kMTMBPowerThreshold = 0;
    }
    if (*(float *)&dword_1EA8DA3D8 != 0.0) {
      fprintf(a2, " Threshold %5.3f", *(float *)&dword_1EA8DA3D8);
    }
    fprintf(a2, " Rate %d/%d", *(unsigned __int16 *)(*(void *)(v3 + 104) + 64), *(unsigned __int16 *)(*(void *)(v3 + 104) + 66));
    fprintf(a2, " Power* %f", *(float *)(*(void *)(v3 + 104) + 72));
    uint64_t v31 = *(void *)(v3 + 104);
    float v32 = *(float *)(v31 + 76);
    if (v32 != 0.0) {
      fprintf(a2, "-%f", (float)(*(float *)(v31 + 72) + (float)((float)*(unsigned int *)(v3 + 100) * v32)));
    }
    this = fputc(10, a2);
    if (*(uint64_t *)(v3 + 16) >= 1)
    {
      unint64_t v33 = *(void *)v3;
      while (1)
      {
        fprintf(a2, "%p %5d %3d->%-3d [", *(const void **)(v33 + 24), (*(void *)v33 - *(void *)(v3 + 32)) >> 2, *(unsigned __int16 *)(v33 + 8), *(unsigned __int16 *)(v33 + 12));
        __int16 v34 = *(_WORD *)(v33 + 16);
        if (v34) {
          break;
        }
        __int16 v35 = "";
        if ((v34 & 2) != 0) {
          goto LABEL_31;
        }
LABEL_32:
        if ((v34 & 0x18) != 0)
        {
          fprintf(a2, "%sSkip%s", v35, *(const char **)((char *)&sPrio + (v34 & 0x18)));
          __int16 v34 = *(_WORD *)(v33 + 16);
          __int16 v35 = ", ";
        }
        if ((v34 & 4) != 0)
        {
          fprintf(a2, "%sIs Copy");
        }
        else
        {
          if ((v34 & 0x60) == 0) {
            goto LABEL_39;
          }
          fprintf(a2, "%sCopy%s");
        }
        __int16 v35 = ", ";
LABEL_39:
        unsigned int v36 = *(unsigned __int16 *)(v33 + 16);
        if ((v36 & 0x800) != 0)
        {
          fprintf(a2, "%sSilence", v35);
          unsigned int v36 = *(unsigned __int16 *)(v33 + 16);
          __int16 v35 = ", ";
          if ((v36 & 0x1000) == 0)
          {
LABEL_41:
            if ((v36 & 0x2000) != 0) {
              goto LABEL_55;
            }
            goto LABEL_42;
          }
        }
        else if ((v36 & 0x1000) == 0)
        {
          goto LABEL_41;
        }
        fprintf(a2, "%sBlendBeg", v35);
        unsigned int v36 = *(unsigned __int16 *)(v33 + 16);
        __int16 v35 = ", ";
        if ((v36 & 0x2000) != 0)
        {
LABEL_55:
          fprintf(a2, "%sBlendEnd", v35);
          unsigned int v36 = *(unsigned __int16 *)(v33 + 16);
          __int16 v35 = ", ";
          if ((v36 & 0x4000) == 0) {
            goto LABEL_44;
          }
LABEL_43:
          fprintf(a2, "%sBlend", v35);
          unsigned int v36 = *(unsigned __int16 *)(v33 + 16);
          __int16 v35 = ", ";
          goto LABEL_44;
        }
LABEL_42:
        if ((v36 & 0x4000) != 0) {
          goto LABEL_43;
        }
LABEL_44:
        if ((v36 & 0x380) != 0)
        {
          if ((v36 >> 7))
          {
            fprintf(a2, "%sEndOfPhon", v35);
            __int16 v35 = ", ";
          }
          unsigned int v37 = (v36 >> 7) & 7;
          if ((v37 & 2) != 0)
          {
            fprintf(a2, "%sEndOfWord", v35);
            __int16 v35 = ", ";
          }
          if (v37 >= 4) {
            fprintf(a2, "%sEndOfSentence", v35);
          }
        }
        double v38 = (float)(MTMBSegment::RawPower((MTMBSegment *)v33) * 0.00012207);
        MTMBSegment::Abstract((MTMBSegment **)v33);
        this = fprintf(a2, "] %5.3f %s\n", v38, (const char *)&MTMBSegment::Abstract(float const*,int,BOOL)::sBuf);
        v33 += 32;
        if (v33 >= *(void *)v3 + 32 * *(void *)(v3 + 16)) {
          return this;
        }
      }
      fprintf(a2, "%sVoiced", "");
      __int16 v34 = *(_WORD *)(v33 + 16);
      __int16 v35 = ", ";
      if ((v34 & 2) == 0) {
        goto LABEL_32;
      }
LABEL_31:
      fprintf(a2, "%sFollows Gap", v35);
      __int16 v34 = *(_WORD *)(v33 + 16);
      __int16 v35 = ", ";
      goto LABEL_32;
    }
  }
  return this;
}

uint64_t MTMBDemi::SetNaturalSize(uint64_t this, uint64_t a2)
{
  uint64_t v2 = *(void *)(this + 104);
  if (v2) {
    *(void *)(v2 + 56) = a2;
  }
  return this;
}

float MTMBDemi::ScaleSpeechRate(MTMBDemi *this, float result, float a3)
{
  uint64_t v3 = *((void *)this + 13);
  if (v3)
  {
    LOWORD(a3) = *(_WORD *)(v3 + 66);
    float result = (float)LODWORD(a3) * result;
    *(_WORD *)(v3 + 66) = (int)result;
  }
  return result;
}

void MTMBConsumerComponent::~MTMBConsumerComponent(MTMBConsumerComponent *this)
{
  *(void *)this = &unk_1F347FC98;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  }
}

{
  uint64_t v1;

  *(void *)this = &unk_1F347FC98;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  }
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)this = &unk_1F347FC98;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  }

  JUMPOUT(0x1E016FF00);
}

void MTCBSegmentProducer::MTCBSegmentProducer(MTCBSegmentProducer *this, MTFEFrameFiller *a2, MTBEParam *a3)
{
  *(void *)this = &unk_1F347FCB8;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = a3;
  uint64_t v5 = MTMBAssemblerCreator::Create(0);
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 3) = v5;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + MEOWVectorBase::clear(this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  MTMBDemi::MTMBDemi((MTCBSegmentProducer *)((char *)this + 128));
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
  *((_DWORD *)this + 6MEOWVectorBase::clear(this + 4) = -1;
  *((void *)a2 + 11) = MTBEDelayedNotifier::MTBEDelayedNotifier((MTCBSegmentProducer *)((char *)this + 280), *((MTBENotifier **)a2 + 11));
}

void sub_1DA4C63D8(_Unwind_Exception *a1)
{
  MTMBDemi::~MTMBDemi(v3);
  std::deque<unsigned short>::~deque[abi:ne180100]((void *)(v1 + 80));
  std::deque<MTMBDemi>::~deque[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void MTCBSegmentProducer::~MTCBSegmentProducer(MTCBSegmentProducer *this)
{
  *(void *)this = &unk_1F347FCB8;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (MTMBSegment *)*((void *)this + 30);
  while (1)
  {
    while (v3 != *((MTMBSegment **)this + 31))
    {
      float v4 = (MTMBSegment *)((char *)v3 + 32);
      MTMBSegment::Free(v3);
      uint64_t v3 = v4;
    }
    unint64_t v5 = *((int *)this + 64) + 1;
    *((_DWORD *)this + 6MEOWVectorBase::clear(this + 4) = v5;
    if (*((void *)this + 9) <= v5) {
      break;
    }
    unint64_t v6 = *(void *)(*((void *)this + 5) + 8 * ((*((void *)this + 8) + v5) / 0x24))
       + 112 * ((*((void *)this + 8) + v5) % 0x24);
    uint64_t v3 = *(MTMBSegment **)v6;
    *((void *)this + 31) = *(void *)v6 + 32 * *(void *)(v6 + 16);
  }
  MTBEDelayedNotifier::~MTBEDelayedNotifier((MTCBSegmentProducer *)((char *)this + 280));
  MTMBDemi::~MTMBDemi((MTCBSegmentProducer *)((char *)this + 128));
  std::deque<unsigned short>::~deque[abi:ne180100]((void *)this + 10);
  std::deque<MTMBDemi>::~deque[abi:ne180100]((void *)this + 4);
}

uint64_t MTCBSegmentProducer::NextSegment(int64x2_t *this, MTMBSegment *a2)
{
  if (!this[4].i64[1])
  {
    std::deque<MTMBDemi>::resize((MTMBDemi *)&this[2], 4uLL);
    __int16 v32 = 2;
    std::deque<unsigned short>::push_back((int64x2_t *)this[5].i64, &v32);
    this[16].i32[0] = 3;
  }
  float v4 = (_OWORD *)this[15].i64[0];
  if (v4 != (_OWORD *)this[15].i64[1])
  {
LABEL_16:
    this[15].i64[0] = (uint64_t)(v4 + 2);
    long long v14 = v4[1];
    *(_OWORD *)a2 = *v4;
    *((_OWORD *)a2 + 1) = v14;
    return 1;
  }
  int v5 = this[16].i32[0];
  unint64_t v6 = (__sFILE **)MEMORY[0x1E4F143C8];
  while (1)
  {
    int v7 = v5 + 1;
    this[16].i32[0] = v5 + 1;
    if (((v5 + 1) & 3) == 0) {
      break;
    }
LABEL_15:
    unint64_t v11 = *(void *)(this[2].i64[1] + 8 * ((this[4].i64[0] + v7) / 0x24uLL)) + 112 * ((this[4].i64[0] + v7) % 0x24uLL);
    float v4 = *(_OWORD **)v11;
    uint64_t v12 = *(void *)(v11 + 16);
    uint64_t v13 = *(void *)v11 + 32 * v12;
    this[15].i64[0] = (uint64_t)v4;
    this[15].i64[1] = v13;
    int v5 = v7;
    if (v12) {
      goto LABEL_16;
    }
  }
  if (v5 >= 4)
  {
    MTCBSegmentProducer::DiscardUnit(this);
    int v7 = this[16].i32[0];
  }
  if (this[4].i64[1] == v7)
  {
    MTCBSegmentProducer::GetNextUnit((MTFEFrameFiller **)this);
    int v7 = this[16].i32[0];
  }
  unint64_t v8 = this[7].i64[0] + v7 / 4;
  if (*(_WORD *)(*(void *)(this[5].i64[1] + ((v8 >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * (v8 & 0x7FF)))
  {
    MTCBSegmentProducer::AssembleUnit((MTCBSegmentProducer *)this, v7);
    if (MTBEDebugFlags::sMEOWDebug)
    {
      uint64_t v9 = this[16].i32[0];
      do
        MTMBDemi::Dump(*(void *)(this[2].i64[1] + 8 * ((v9 + this[4].i64[0]) / 0x24uLL)) + 112 * ((v9 + this[4].i64[0]) % 0x24uLL), *v6);
      while (v9++ < this[16].i32[0] + 3);
    }
    MTBEDelayedNotifier::ForwardUnit((MTBEDelayedNotifier *)&this[17].u64[1]);
    int v7 = this[16].i32[0];
    goto LABEL_15;
  }
  uint64_t v16 = (void **)this[2].i64[1];
  unint64_t v17 = (void **)this[3].i64[0];
  if (v17 == v16)
  {
    unint64_t v17 = (void **)this[2].i64[1];
  }
  else
  {
    unint64_t v18 = this[4].u64[0];
    int v19 = &v16[v18 / 0x24];
    int v20 = (MTMBDemi *)((char *)*v19 + 112 * (v18 % 0x24));
    unint64_t v21 = (unint64_t)v16[(this[4].i64[1] + v18) / 0x24] + 112 * ((this[4].i64[1] + v18) % 0x24);
    if (v20 != (MTMBDemi *)v21)
    {
      do
      {
        MTMBDemi::~MTMBDemi(v20);
        int v20 = (MTMBDemi *)(v22 + 112);
        if (v20 - (MTMBDemi *)*v19 == 4032)
        {
          float v23 = (MTMBDemi *)v19[1];
          ++v19;
          int v20 = v23;
        }
      }
      while (v20 != (MTMBDemi *)v21);
      uint64_t v16 = (void **)this[2].i64[1];
      unint64_t v17 = (void **)this[3].i64[0];
    }
  }
  this[4].i64[1] = 0;
  unint64_t v24 = (char *)v17 - (char *)v16;
  if (v24 >= 0x11)
  {
    do
    {
      operator delete(*v16);
      uint64_t v25 = this[3].i64[0];
      uint64_t v16 = (void **)(this[2].i64[1] + 8);
      this[2].i64[1] = (uint64_t)v16;
      unint64_t v24 = v25 - (void)v16;
    }
    while (v24 > 0x10);
  }
  if (v24 >> 3 == 1)
  {
    uint64_t v26 = 18;
LABEL_30:
    this[4].i64[0] = v26;
  }
  else if (v24 >> 3 == 2)
  {
    uint64_t v26 = 36;
    goto LABEL_30;
  }
  int v27 = (void **)this[5].i64[1];
  uint64_t v28 = this[6].i64[0];
  this[7].i64[1] = 0;
  unint64_t v29 = v28 - (void)v27;
  if (v29 >= 0x11)
  {
    do
    {
      operator delete(*v27);
      uint64_t v30 = this[6].i64[0];
      int v27 = (void **)(this[5].i64[1] + 8);
      this[5].i64[1] = (uint64_t)v27;
      unint64_t v29 = v30 - (void)v27;
    }
    while (v29 > 0x10);
  }
  if (v29 >> 3 == 1)
  {
    uint64_t v31 = 1024;
LABEL_37:
    uint64_t result = 0;
    this[7].i64[0] = v31;
  }
  else
  {
    if (v29 >> 3 == 2)
    {
      uint64_t v31 = 2048;
      goto LABEL_37;
    }
    return 0;
  }
  return result;
}

MTMBDemi *std::deque<MTMBDemi>::resize(MTMBDemi *result, unint64_t a2)
{
  uint64_t v2 = (uint64_t)result;
  unint64_t v3 = *((void *)result + 5);
  BOOL v4 = a2 >= v3;
  unint64_t v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    return std::deque<MTMBDemi>::__append(result, v5);
  }
  else if (!v4)
  {
    unint64_t v6 = *((void *)result + 4);
    uint64_t v7 = *((void *)result + 1);
    unint64_t v8 = (void *)(v7 + 8 * (v6 / 0x24));
    if (*((void *)result + 2) == v7) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = (MTMBDemi *)(*v8 + 112 * (v6 % 0x24));
    }
    uint64_t v10 = v8;
    unint64_t v11 = v9;
    std::__deque_iterator<MTMBDemi,MTMBDemi*,MTMBDemi&,MTMBDemi**,long,36l>::operator+=[abi:ne180100](&v10, a2);
    return (MTMBDemi *)std::deque<MTMBDemi>::__erase_to_end(v2, v10, v11);
  }
  return result;
}

void std::deque<unsigned short>::push_back(void *a1, _WORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 8) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<unsigned short>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(_WORD *)(*(void *)(v5 + ((v8 >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * (v8 & 0x7FF)) = *a2;
  a1[5] = v7 + 1;
}

uint64_t MTCBSegmentProducer::DiscardUnit(int64x2_t *this)
{
  uint64_t v2 = 3;
  while (v2 != -1)
  {
    unint64_t v3 = this[4].i64[0] + v2;
    uint64_t v4 = *(void *)(this[2].i64[1] + 8 * (v3 / 0x24));
    unint64_t v5 = v3 % 0x24;
    --v2;
    if (*(_DWORD *)(v4 + 112 * v5 + 100))
    {
      MTMBDemi::swap((MTMBDemi *)&this[8], (MTMBDemi *)(v4 + 112 * v5));
      break;
    }
  }
  int v6 = 4;
  do
  {
    std::deque<MTMBDemi>::pop_front(this + 2);
    --v6;
  }
  while (v6);
  this[7] = vaddq_s64(this[7], (int64x2_t)xmmword_1DA501570);
  uint64_t result = std::deque<unsigned short>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this[5].i64, 1);
  this[16].i32[0] -= 4;
  return result;
}

void MTCBSegmentProducer::GetNextUnit(MTFEFrameFiller **this)
{
  MTBEDelayedNotifier::StartUnit((MTBEDelayedNotifier *)(this + 35));
  int Frame = MTFEFrameFiller::FillNextFrame(this[1], 0);
  unint64_t v3 = this[9];
  __int16 v12 = 0;
  std::deque<MTMBDemi>::resize((MTMBDemi *)(this + 4), (unint64_t)v3 + 4);
  if (Frame)
  {
    __int16 v12 = 2;
    this[33] = (MTFEFrameFiller *)MTBEParam::GetVolume(this[2]);
    uint64_t v4 = this[2];
    *((_WORD *)this + 137) = *(_WORD *)(*((void *)this[1] + 35) + 178);
    if (MTBEParam::GetUsePostDurMod(v4))
    {
      unsigned __int16 DurModFakeRate = MTBEParam::GetDurModFakeRate(this[2]);
      unsigned int v6 = *((unsigned __int16 *)this + 137);
    }
    else
    {
      unsigned int v6 = *((unsigned __int16 *)this + 137);
      unsigned __int16 DurModFakeRate = *((_WORD *)this + 137);
    }
    *((_WORD *)this + 136) = DurModFakeRate;
    *((float *)this + 89) = (float)DurModFakeRate / (float)v6;
    uint64_t v7 = this[1];
    if (*(void *)(*((void *)v7 + 35) + 264) || *((unsigned char *)v7 + 288))
    {
      if ((*((unsigned int (**)(MTFEFrameFiller **, MTFEFrameFiller *, __int16 *))*this + 5))(this, v3, &v12))
      {
        __int16 v8 = 12;
      }
      else
      {
        __int16 v8 = 4;
      }
      __int16 v9 = v8 | v12;
    }
    else
    {
      unint64_t v11 = *this;
      if (*(unsigned char *)(*((void *)v7 + 34) + 93) == 1)
      {
        (*((void (**)(MTFEFrameFiller **, MTFEFrameFiller *))v11 + 4))(this, v3);
        __int16 v9 = 98;
      }
      else
      {
        (*((void (**)(MTFEFrameFiller **, MTFEFrameFiller *))v11 + 3))(this, v3);
        __int16 v9 = 66;
      }
    }
    __int16 v12 = v9;
    uint64_t v10 = (uint64_t)this[1];
    if (*(void *)(*(void *)(v10 + 280) + 264))
    {
      MTFEFrameFiller::SkipWord(v10);
      uint64_t v10 = (uint64_t)this[1];
      __int16 v9 = v12;
    }
    __int16 v12 = v9 | (*(unsigned __int8 *)(v10 + 80) << 7);
  }
  std::deque<unsigned short>::push_back(this + 10, &v12);
}

unint64_t MTCBSegmentProducer::AssembleUnit(MTCBSegmentProducer *this, unint64_t a2)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a2 >> 2;
  if ((*(_WORD *)(*(void *)(*((void *)this + 11)
                             + (((*((void *)this + 14) + (a2 >> 2)) >> 8) & 0xFFFFFFFFFFFFF8))
                 + 2 * ((*((void *)this + 14) + (a2 >> 2)) & 0x7FF)) & 4) == 0
    || (MTBEDebugFlags::sMEOWDebug & 0x2000) != 0)
  {
    (*(void (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
    unint64_t v14 = a2 + 3;
  }
  else
  {
    if (v4 == *((void *)this + 15) - 1) {
      MTCBSegmentProducer::GetNextUnit((MTFEFrameFiller **)this);
    }
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBLinearSlack))
    {
      if ((MTMBDemiProperties::UseWordPitch(*(MTMBDemiProperties **)(*(void *)(*((void *)this + 5)
                                                                                + 8
                                                                                * ((a2 + *((void *)this + 8) + 3)
                                                                                 / 0x24))
                                                                    + 112 * ((a2 + *((void *)this + 8) + 3) % 0x24)
                                                                    + 104)) & 1) == 0)
      {
        uint64_t v5 = *((void *)this + 14);
        uint64_t v6 = *((void *)this + 11);
        __int16 v7 = *(_WORD *)(*(void *)(v6 + (((v4 + v5 + 1) >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * ((v4 + v5 + 1) & 0x7FF));
        if ((v7 & 0x70) == 0x20 || (v7 & 0x440) == 0x400)
        {
          unint64_t v8 = v4 + 2;
          do
          {
            if (v8 == *((void *)this + 15))
            {
              MTCBSegmentProducer::GetNextUnit((MTFEFrameFiller **)this);
              uint64_t v5 = *((void *)this + 14);
              uint64_t v6 = *((void *)this + 11);
            }
            __int16 v9 = *(_WORD *)(*(void *)(v6 + (((v5 + v8) >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * ((v5 + v8) & 0x7FF));
            ++v8;
          }
          while ((v9 & 0x70) == 0x20 || (v9 & 0x440) == 0x400);
        }
      }
    }
    unint64_t v10 = *((void *)this + 8);
    uint64_t v11 = *((void *)this + 5);
    __int16 v12 = (void *)(v11 + 8 * (v10 / 0x24));
    if (*((void *)this + 6) == v11) {
      unint64_t v13 = 0;
    }
    else {
      unint64_t v13 = *v12 + 112 * (v10 % 0x24);
    }
    *(void *)uint64_t v100 = v12;
    unint64_t v101 = v13;
    std::__deque_iterator<MTMBDemi,MTMBDemi*,MTMBDemi&,MTMBDemi**,long,36l>::operator+=[abi:ne180100](v100, a2);
    unint64_t v66 = *((void *)this + 8);
    uint64_t v67 = *((void *)this + 5);
    int v68 = (void *)(v67 + 8 * (v66 / 0x24));
    if (*((void *)this + 6) == v67) {
      unint64_t v69 = 0;
    }
    else {
      unint64_t v69 = *v68 + 112 * (v66 % 0x24);
    }
    int v70 = *(float **)v100;
    unint64_t v71 = v101;
    *(void *)uint64_t v100 = v68;
    unint64_t v101 = v69;
    std::__deque_iterator<MTMBDemi,MTMBDemi*,MTMBDemi&,MTMBDemi**,long,36l>::operator+=[abi:ne180100](v100, a2);
    uint64_t v72 = v101 - **(void **)v100;
    uint64_t v73 = 0x6DB6DB6DB6DB6DB7 * (v72 >> 4);
    if (v72 < -447)
    {
      unint64_t v77 = 31 - v73;
      int v75 = (float *)(*(void *)v100 - 8 * (v77 / 0x24));
      unint64_t v76 = *(void *)v75 + 112 * (36 * (v77 / 0x24) - v77) + 3920;
    }
    else
    {
      unint64_t v74 = v73 + 4;
      int v75 = (float *)(*(void *)v100 + 8 * (v74 / 0x24));
      unint64_t v76 = *(void *)v75 + 112 * (v74 % 0x24);
    }
    unint64_t v78 = *((void *)this + 8) + *((void *)this + 9);
    uint64_t v79 = *((void *)this + 5);
    CFRange v80 = (void *)(v79 + 8 * (v78 / 0x24));
    if (*((void *)this + 6) == v79) {
      unint64_t v81 = 0;
    }
    else {
      unint64_t v81 = *v80 + 112 * (v78 % 0x24);
    }
    unint64_t v82 = *((void *)this + 15) + *((void *)this + 14) - 1;
    if (*(_WORD *)(*(void *)(*((void *)this + 11) + ((v82 >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * (v82 & 0x7FF))) {
      uint64_t v83 = 0;
    }
    else {
      uint64_t v83 = -4;
    }
    *(void *)uint64_t v100 = v80;
    unint64_t v101 = v81;
    std::__deque_iterator<MTMBDemi,MTMBDemi*,MTMBDemi&,MTMBDemi**,long,36l>::operator+=[abi:ne180100](v100, v83);
    int v84 = MTMBPitchStrategy::SetPitchTargets(v70, v71, v75, v76, *(float **)v100, v101);
    int v85 = v84;
    if (MTBEDebugFlags::sMEOWDebug)
    {
      int v98 = v84;
      unint64_t v99 = v4;
      uint64_t v86 = (FILE **)MEMORY[0x1E4F143C8];
      fwrite("Assemble", 8uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      if (*((void *)this + 9))
      {
        unint64_t v87 = 0;
        do
        {
          if (!*(_WORD *)(*(void *)(*((void *)this + 11)
                                     + (((*((void *)this + 14) + (v87 >> 2)) >> 8) & 0xFFFFFFFFFFFFF8))
                         + 2 * ((*((void *)this + 14) + (v87 >> 2)) & 0x7FF)))
            break;
          unint64_t v88 = v87 + *((void *)this + 8);
          uint64_t v89 = *(void *)(*((void *)this + 5) + 8 * (v88 / 0x24));
          unint64_t v90 = v88 % 0x24;
          if (*(void *)(v89 + 112 * v90 + 16))
          {
            uint64_t v91 = v89 + 112 * v90;
            int v92 = *(char **)(v91 + 104);
            int v93 = v92[18] >= 0 ? "" : "\"";
            int v94 = *v86;
            uint64_t v95 = MTMBDemiProperties::Phon((MTMBDemiProperties *)v92, v100);
            fprintf(v94, " %s%s%s (%d:%d %d:%d)", v93, v95, v93, *(unsigned __int16 *)(v91 + 80), *(unsigned __int16 *)(v91 + 88), *(unsigned __int16 *)(v91 + 82), *(unsigned __int16 *)(v91 + 90));
          }
          else
          {
            fwrite(" ()", 3uLL, 1uLL, *v86);
          }
          ++v87;
        }
        while (v87 < *((void *)this + 9));
      }
      fputc(10, *v86);
      unint64_t v4 = v99;
      int v85 = v98;
    }
    uint64_t v96 = *((void *)this + 3);
    if (v85)
    {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v96 + 24))(v96, *(void *)(*((void *)this + 5) + 8 * ((*((void *)this + 8) + a2) / 0x24))+ 112 * ((*((void *)this + 8) + a2) % 0x24));
      (*(void (**)(void, unint64_t))(**((void **)this + 3) + 24))(*((void *)this + 3), *(void *)(*((void *)this + 5) + 8 * ((a2 + *((void *)this + 8) + 1) / 0x24))+ 112 * ((a2 + *((void *)this + 8) + 1) % 0x24));
      (*(void (**)(void, unint64_t))(**((void **)this + 3) + 24))(*((void *)this + 3), *(void *)(*((void *)this + 5) + 8 * ((a2 + *((void *)this + 8) + 2) / 0x24))+ 112 * ((a2 + *((void *)this + 8) + 2) % 0x24));
      unint64_t v14 = a2 + 3;
      (*(void (**)(void, unint64_t))(**((void **)this + 3) + 24))(*((void *)this + 3), *(void *)(*((void *)this + 5) + 8 * ((a2 + 3 + *((void *)this + 8)) / 0x24))+ 112 * ((a2 + 3 + *((void *)this + 8)) % 0x24));
    }
    else
    {
      uint64_t v97 = *((void *)this + 8);
      unint64_t v14 = a2 + 3;
      (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v96 + 16))(v96, *(void *)(*((void *)this + 5) + 8 * ((a2 + v97 + 2) / 0x24)) + 112 * ((a2 + v97 + 2) % 0x24), *(void *)(*((void *)this + 5) + 8 * ((a2 + 3 + v97) / 0x24)) + 112 * ((a2 + 3 + v97) % 0x24));
    }
  }
  unint64_t v15 = a2 + 4;
  if (a2 > 0xFFFFFFFFFFFFFFFCLL) {
    goto LABEL_30;
  }
  unint64_t v16 = v14;
  do
  {
    uint64_t v17 = *((void *)this + 8);
    uint64_t v18 = *((void *)this + 5);
    int v19 = (MTMBDemi *)(*(void *)(v18 + 8 * ((v17 + v16) / 0x24)) + 112 * ((v17 + v16) % 0x24));
    if (!*((void *)v19 + 2))
    {
      uint64_t v20 = v17 - 1;
      unint64_t v21 = v16;
      while (v21 > a2)
      {
        unint64_t v22 = v20 + v21--;
        float v23 = (MTMBDemi *)(*(void *)(v18 + 8 * (v22 / 0x24)) + 112 * (v22 % 0x24));
        if (*((void *)v23 + 2))
        {
          MTMBDemi::swap(v19, v23);
          break;
        }
      }
    }
    --v16;
  }
  while (v16 > a2);
  if (a2 > 0xFFFFFFFFFFFFFFFBLL)
  {
LABEL_30:
    int v30 = 0;
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v25 = *((void *)this + 8);
    uint64_t v26 = *((void *)this + 5);
    uint64_t v27 = v25 + a2;
    while (1)
    {
      uint64_t v28 = *(void *)(v26 + 8 * ((v27 + v24) / 0x24uLL));
      unint64_t v29 = (v27 + v24) % 0x24uLL;
      if (*(_DWORD *)(v28 + 112 * v29 + 100)) {
        break;
      }
      ++v24;
      if (a2 + v24 >= v15) {
        goto LABEL_47;
      }
    }
    if (*(void *)(v28 + 112 * v29 + 64)) {
      uint64_t v31 = a2 + v24;
    }
    else {
      uint64_t v31 = 0;
    }
    if (a2 + v24 + 1 < v15)
    {
      uint64_t v32 = v25 + a2;
      do
      {
        uint64_t v33 = v32 + v24;
        uint64_t v34 = *(void *)(*(void *)(v26 + 8 * ((v32 + v24) / 0x24uLL)) + 112 * ((v32 + v24) % 0x24uLL) + 72);
        if (v34)
        {
          uint64_t v35 = v33 + 1;
          unint64_t v36 = (v33 + 1) / 0x24uLL;
          uint64_t v37 = *(void *)(v26 + 8 * v36);
          uint64_t v38 = v35 - 36 * v36;
          if (v34 != *(void *)(v37 + 112 * v38 + 64)) {
            *(_WORD *)(*(void *)(v37 + 112 * v38) + 16) |= 0x4000u;
          }
        }
        ++v24;
      }
      while (v24 != 3);
    }
    if (v31)
    {
      unint64_t v39 = a2;
      while (v39)
      {
        unint64_t v40 = v25 - 1 + v39--;
        uint64_t v41 = *(void *)(v26 + 8 * (v40 / 0x24));
        unint64_t v42 = v40 % 0x24;
        if (*(_DWORD *)(v41 + 112 * v42 + 100))
        {
          uint64_t v43 = *(void *)(v41 + 112 * v42 + 72);
          if (v43)
          {
            unint64_t v44 = v25 + v31;
            uint64_t v45 = *(void *)(v26 + 8 * (v44 / 0x24));
            unint64_t v46 = v44 % 0x24;
            if (v43 != *(void *)(v45 + 112 * v46 + 64)) {
              *(_WORD *)(*(void *)(v45 + 112 * v46) + 16) |= 0x4000u;
            }
          }
          break;
        }
      }
    }
LABEL_47:
    int v30 = 1;
  }
  uint64_t v47 = *((void *)this + 14);
  uint64_t v48 = *((void *)this + 11);
  uint64_t v49 = *(void *)(v48 + (((v47 + v4) >> 8) & 0xFFFFFFFFFFFFF8));
  uint64_t v50 = (v47 + v4) & 0x7FF;
  __int16 v51 = *(_WORD *)(v49 + 2 * v50);
  uint64_t v52 = *((void *)this + 8);
  uint64_t v53 = *((void *)this + 5);
  if ((v51 & 8) != 0 && v30)
  {
    unint64_t v54 = a2;
    while (1)
    {
      uint64_t v55 = *(void *)(v53 + 8 * ((v52 + v54) / 0x24));
      unint64_t v56 = (v52 + v54) % 0x24;
      if (*(_DWORD *)(v55 + 112 * v56 + 100)) {
        break;
      }
      if (++v54 >= v15) {
        goto LABEL_55;
      }
    }
    *(_WORD *)(*(void *)(v55 + 112 * v56) + 16) |= 0x1000u;
    __int16 v51 = *(_WORD *)(v49 + 2 * v50);
  }
LABEL_55:
  __int16 v57 = v51 & 0x380;
  uint64_t v58 = *(void *)(v53 + 8 * ((v52 + v14) / 0x24));
  unint64_t v59 = (v52 + v14) % 0x24;
  uint64_t v60 = *(void *)(v58 + 112 * v59) + 32 * *(void *)(v58 + 112 * v59 + 16);
  __int16 v61 = *(_WORD *)(v60 - 16) | v57;
  *(_WORD *)(v60 - 16) = v61;
  unint64_t result = *((void *)this + 15) - 1;
  if (v4 == result
    || ((unint64_t v63 = v4 + v47 + 1,
         unint64_t result = (v63 >> 8) & 0xFFFFFFFFFFFFF8,
         (int v64 = *(unsigned __int16 *)(*(void *)(v48 + result) + 2 * (v63 & 0x7FF))) != 0)
      ? (BOOL v65 = (v64 & 0x40) == 0)
      : (BOOL v65 = 0),
        !v65))
  {
    if (*(_DWORD *)(v58 + 112 * v59 + 100) && (*(_WORD *)(v49 + 2 * v50) & 0x40) == 0) {
      *(_WORD *)(v60 - 16) = v61 | 0x2000;
    }
  }
  if ((*(_WORD *)(v49 + 2 * v50) & 0x800) != 0) {
    return (*(uint64_t (**)(void, unint64_t))(**((void **)this + 3) + 32))(*((void *)this + 3), *(void *)(v53 + 8 * ((a2 + v52 + 2) / 0x24)) + 112 * ((a2 + v52 + 2) % 0x24));
  }
  return result;
}

uint64_t std::deque<MTMBDemi>::pop_front(int64x2_t *a1)
{
  MTMBDemi::~MTMBDemi((MTMBDemi *)(*(void *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x24uLL))
                                 + 112 * (a1[2].i64[0] % 0x24uLL)));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1DA501570);

  return std::deque<MTMBDemi>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

void MTCBSegmentProducer::LoadPseudo(MTCBSegmentProducer *this)
{
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)&v1, 2);
  operator new();
}

void sub_1DA4C7880(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v2, 0x10D0C4050FF3235);
  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

void MTCBSegmentProducer::LoadSilence(MTCBSegmentProducer *this)
{
  if (MTBEDebugFlags::sMEOWDebug) {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Fetch SIL %5.1fms\n", (float)((float)*(__int16 *)(*((void *)this + 1) + 346) * 5.0));
  }
  MTCBSegmentProducer::LoadPseudo(this);
}

void sub_1DA4C7B0C(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10D0C4050FF3235);
  _Unwind_Resume(a1);
}

uint64_t MTCBSegmentProducer::LoadBreath(MTCBSegmentProducer *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 24))();
}

void MTMBSegmentProducer::MTMBSegmentProducer(MTMBSegmentProducer *this, MTFEFrameFiller *a2, MEOWReader *a3, MTBEParam *a4)
{
  MTCBSegmentProducer::MTCBSegmentProducer(this, a2, a4);
  *(void *)uint64_t v5 = &unk_1F347FCF8;
  *(void *)(v5 + 4--*(_WORD *)(this + 24) = a3;
  *(_WORD *)(v5 + 43MEOWVectorBase::clear(this + 4) = -1;
}

{
  uint64_t v5;

  MTCBSegmentProducer::MTCBSegmentProducer(this, a2, a4);
  *(void *)uint64_t v5 = &unk_1F347FCF8;
  *(void *)(v5 + 4--*(_WORD *)(this + 24) = a3;
  *(_WORD *)(v5 + 43MEOWVectorBase::clear(this + 4) = -1;
}

void MTMBSegmentProducer::LoadSilence(MTCBSegmentProducer *this)
{
  *((_WORD *)this + 217) = -1;
  MTCBSegmentProducer::LoadSilence(this);
}

void MTMBSegmentProducer::LoadBreath(MTMBSegmentProducer *this)
{
  *((void *)this + 33) = MTBEParam::GetVolume(*((MTBEParam **)this + 2));
  MTCBSegmentProducer::LoadPseudo(this);
}

void sub_1DA4C8268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
}

void MTMBSegmentProducer::LoadUnit(MTMBSegmentProducer *this, unint64_t a2, unsigned __int16 *a3)
{
  uint64_t v5 = *((void *)this + 1);
  uint64_t v6 = *(void *)(v5 + 280);
  BOOL v7 = (*(_DWORD *)(v6 + 56) & 0x801) != 0 && (*(_DWORD *)(v6 + 56) & 2) == 0;
  if (v7 || *(void *)(*(void *)(v5 + 96) + 208)) {
    *a3 |= 0x400u;
  }
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBSilenceGlue))
  {
    uint64_t v8 = v6;
    do
    {
      uint64_t v8 = *(void *)(v8 + 40);
      if (!v8)
      {
        uint64_t v9 = *(void *)(*(void *)(v6 + 32) + 40);
        if (!v9) {
          break;
        }
        uint64_t v8 = *(void *)(v9 + 16);
        if (!v8) {
          break;
        }
      }
      int v10 = *(_DWORD *)(v8 + 56);
      if ((v10 & 0x40) != 0) {
        break;
      }
    }
    while ((v10 & 0x1000) != 0);
  }
  uint64_t v11 = *((void *)this + 1);
  __int16 v12 = *(unsigned __int8 **)(*(void *)(v11 + 280) + 264);
  if (!v12
    || ((uint64_t v13 = *(void *)(*(void *)(v6 + 16) + 16),
         uint64_t v14 = *(void *)(*(void *)(v6 + 24) + 24),
         int v15 = *(unsigned __int16 *)(v13 + 88),
         int v16 = *(unsigned __int16 *)(v14 + 90),
         v13 == v14)
      ? (BOOL v17 = v15 == 0xFFFF)
      : (BOOL v17 = 1),
        !v17 ? (BOOL v18 = v16 == 0xFFFF) : (BOOL v18 = 1),
        !v18))
  {
    *a3 |= 0x20u;
    uint64_t v22 = *(void *)(v11 + 272);
    float v23 = (MEOWPhon *)*(unsigned __int8 *)(v22 + 92);
    uint64_t v24 = (MEOWPhon *)*(unsigned __int8 *)(v22 + 93);
    unsigned int v25 = *(unsigned __int8 *)(v22 + 94);
    uint64_t v26 = *(unsigned __int16 *)(v22 + 88);
    uint64_t v47 = (MEOWPhon *)*(unsigned __int16 *)(v22 + 90);
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBPhonemeAmplitudeSmoothing))
    {
      if (v24 >= 2 && v24 <= 0x1B) {
        *a3 |= 0x800u;
      }
    }
    unsigned int v46 = v25;
    if (MTBEDebugFlags::sMEOWDebug)
    {
      uint64_t v28 = (FILE *)*MEMORY[0x1E4F143C8];
      unint64_t v29 = MEOWPhon::Name(v23);
      int v30 = MEOWPhon::Name(v24);
      uint64_t v31 = MEOWPhon::Name(v24);
      uint64_t v32 = MEOWPhon::Name((MEOWPhon *)v46);
      int v33 = MEOWReader::NoSkipDup(*((MEOWReader **)this + 53), v24, 1u);
      int v34 = MEOWReader::NoSkipDup(*((MEOWReader **)this + 53), v24, 0);
      fprintf(v28, "Fetch %s>%s#%lu|%s<%s#%lu SkipDup %04x%04x\n", v29, v30, v26, v31, v32, v47, v33, v34);
    }
    MTCBSegmentProducer::LoadPseudo(this);
  }
  *a3 |= 0x10u;
  if (v15 != 0xFFFF || v16 != 0xFFFF) {
    MEOWReader::GetWordGlue(*((MEOWReader **)this + 53), v12, (uint64_t)v52);
  }
  unint64_t v44 = v12;
  uint64_t v43 = v14;
  int v45 = v15;
  if (MTBEDebugFlags::sMEOWDebug)
  {
    uint64_t v20 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Fetch \"%s\" ", (const char *)(*(void *)(*((void *)this + 1) + 280) + 200));
    unint64_t v21 = *v20;
    if (v15 == 0xFFFF)
    {
      MEOWPhon::Name((MEOWPhon *)*v44);
      MEOWPhon::Name((MEOWPhon *)v44[1]);
      fprintf(v21, "%s>%s#%d");
    }
    else
    {
      MEOWPhon::Name((MEOWPhon *)*(unsigned __int8 *)(v13 + 92));
      MEOWPhon::Name((MEOWPhon *)v44[1]);
      MEOWPhon::Name((MEOWPhon *)v52[0]);
      fprintf(v21, "%s>%s-%s#(%d,%d)");
    }
    uint64_t v35 = *v20;
    if (v16 == 0xFFFF)
    {
      unint64_t v39 = MEOWPhon::Name((MEOWPhon *)v44[4]);
      uint64_t v41 = MEOWPhon::Name((MEOWPhon *)v44[5]);
      unint64_t v40 = v35;
      __int16 v12 = v44;
      fprintf(v40, " - %s<%s#%d\n", v39, v41, bswap32(*((unsigned __int16 *)v44 + 3)) >> 16);
    }
    else
    {
      unint64_t v36 = MEOWPhon::Name((MEOWPhon *)v52[1]);
      uint64_t v37 = MEOWPhon::Name((MEOWPhon *)v44[4]);
      unint64_t v42 = MEOWPhon::Name((MEOWPhon *)*(unsigned __int8 *)(v43 + 94));
      uint64_t v38 = v35;
      __int16 v12 = v44;
      fprintf(v38, " - %s-%s<%s#(%d,%d)\n", v36, v37, v42, bswap32(v53) >> 16, *(unsigned __int16 *)(v43 + 90));
    }
    int v15 = v45;
  }
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)&v51, 2);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)&v50, 2);
  MEOWReader::GetWord(*((void *)this + 53), v12, (uint64_t)v48, v15 != 0xFFFF, v16 != 0xFFFF);
  if (!v49) {
    MTCBSegmentProducer::LoadPseudo(this);
  }
  if (v45 != 0xFFFF)
  {
    if (*(unsigned __int16 *)(v13 + 88) == bswap32(*((unsigned __int16 *)this + 217)) >> 16
      && *((unsigned __int8 *)this + 432) == *(unsigned __int8 *)(v13 + 92)
      && *((unsigned __int8 *)this + 433) == *(unsigned __int8 *)(v13 + 93))
    {
      MTMBSegmentProducer::LoadInclusion(this);
    }
    MTCBSegmentProducer::LoadPseudo(this);
  }
  MTCBSegmentProducer::LoadPseudo(this);
}

void sub_1DA4C8F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, void **a19)
{
  MEMORY[0x1E016FF00](v19, 0x10D0C4050FF3235);
  MEOWVectorBase::~MEOWVectorBase(a18);
  MEOWVectorBase::~MEOWVectorBase(a19);
  _Unwind_Resume(a1);
}

void MTMBSegmentProducer::LoadInclusion(MTMBSegmentProducer *this)
{
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)&v7, 2);
  MEOWReader::GetInclusion(*((void *)this + 53), *((unsigned __int8 *)this + 432), *((unsigned __int8 *)this + 433), bswap32(*((unsigned __int16 *)this + 217)) >> 16, (uint64_t)v5);
  if (v6)
  {
    if (MTBEDebugFlags::sMEOWDebug)
    {
      uint64_t v2 = (FILE *)*MEMORY[0x1E4F143C8];
      unint64_t v3 = MEOWPhon::Name((MEOWPhon *)*((unsigned __int8 *)this + 432));
      unint64_t v4 = MEOWPhon::Name((MEOWPhon *)*((unsigned __int8 *)this + 433));
      fprintf(v2, "Fetch Inclusion %s[]%s#%d\n", v3, v4, bswap32(*((unsigned __int16 *)this + 217)) >> 16);
    }
    operator new();
  }
  MTCBSegmentProducer::LoadPseudo(this);
}

void sub_1DA4C91D0(_Unwind_Exception *a1)
{
  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

void MTPBSegmentProducer::MTPBSegmentProducer(MTPBSegmentProducer *this, MTFEFrameFiller *a2, PROWReader *a3, MTBEParam *a4)
{
  MTCBSegmentProducer::MTCBSegmentProducer(this, a2, a4);
  *(void *)uint64_t v5 = &unk_1F347FD38;
  *(void *)(v5 + 4--*(_WORD *)(this + 24) = a3;
  *(unsigned char *)(v5 + 432) = 0;
}

{
  uint64_t v5;

  MTCBSegmentProducer::MTCBSegmentProducer(this, a2, a4);
  *(void *)uint64_t v5 = &unk_1F347FD38;
  *(void *)(v5 + 4--*(_WORD *)(this + 24) = a3;
  *(unsigned char *)(v5 + 432) = 0;
}

void MTPBSegmentProducer::LoadSilence(MTCBSegmentProducer *this)
{
  *((unsigned char *)this + 432) = 0;
  MTCBSegmentProducer::LoadSilence(this);
}

void MTPBSegmentProducer::LoadUnit(MTPBSegmentProducer *this, unint64_t a2, unsigned __int16 *a3)
{
  unint64_t v4 = (unsigned __int8 *)*((void *)this + 1);
  uint64_t v5 = *((unsigned __int8 *)this + 432);
  unsigned __int8 v6 = PROWPhonEng::sP2M[v4[288]] + v4[289];
  unsigned __int8 v13 = PROWPhonEng::sP2M[v4[293]] + v4[294];
  *((unsigned char *)this + 432) = v6;
  if (MTBEDebugFlags::sMEOWDebug)
  {
    uint64_t v7 = (FILE *)*MEMORY[0x1E4F143C8];
    uint64_t v8 = PROWPhonEng::sName[v5];
    uint64_t v9 = PROWPhonEng::sName[v6];
    int v10 = PROWPhonEng::sName[v13];
    int v11 = PROWReader::NoSkipDup(*((PROWReader **)this + 53), v6, 1u);
    int v12 = PROWReader::NoSkipDup(*((PROWReader **)this + 53), v6, 0);
    fprintf(v7, "Fetch %s>%s<%s SkipDup %04x%04x\n", v8, v9, v10, v11, v12);
  }
  MTCBSegmentProducer::LoadPseudo(this);
}

void sub_1DA4C9668(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10D0C4050FF3235);
  _Unwind_Resume(a1);
}

void MTWBSegmentProducer::MTWBSegmentProducer(MTWBSegmentProducer *this, const MTMBDemi *a2)
{
  uint64_t v2 = *(void *)a2;
  *(void *)this = &unk_1F347FD78;
  *((void *)this + 1) = v2;
  *((void *)this + 2) = v2 + 32 * *((void *)a2 + 2);
  if (MTBEDebugFlags::sMEOWDebug) {
    MTMBDemi::Dump((uint64_t)a2, (__sFILE *)*MEMORY[0x1E4F143C8]);
  }
}

BOOL MTWBSegmentProducer::NextSegment(MTWBSegmentProducer *this, MTMBSegment *a2)
{
  uint64_t v2 = (_OWORD *)*((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  if ((unint64_t)v2 < v3)
  {
    *((void *)this + 1) = v2 + 2;
    long long v4 = v2[1];
    *(_OWORD *)a2 = *v2;
    *((_OWORD *)a2 + 1) = v4;
  }
  return (unint64_t)v2 < v3;
}

uint64_t MTMBSmoothSegment::NextSegment(MTMBSmoothSegment *this, MTMBSegment *a2)
{
  long long v4 = (_OWORD *)((char *)this + 32);
  long long v5 = *((_OWORD *)this + 3);
  *(_OWORD *)&v14.char var0 = *((_OWORD *)this + 2);
  *(_OWORD *)&v14.var3 = v5;
  uint64_t v6 = (***((uint64_t (****)(void, char *))this + 1))(*((void *)this + 1), (char *)this + 32);
  if (v6)
  {
    long long v7 = v4[1];
    *(_OWORD *)a2 = *v4;
    *((_OWORD *)a2 + 1) = v7;
    uint64_t v8 = (FILE **)MEMORY[0x1E4F143C8];
    if ((~(_BYTE)MTBEDebugFlags::sMEOWDebug & 0x11) == 0)
    {
      uint64_t v9 = (FILE *)*MEMORY[0x1E4F143C8];
      int v10 = MTMBSegment::Abstract((MTMBSegment **)a2);
      fprintf(v9, "Smooth      %s -> ", (const char *)v10);
    }
    (*(void (**)(void, MTFESpeechElement *, MTMBSegment *))(**((void **)this + 3) + 24))(*((void *)this + 3), &v14, a2);
    if ((~(_BYTE)MTBEDebugFlags::sMEOWDebug & 0x11) == 0)
    {
      int v11 = *v8;
      int v12 = MTMBSegment::Abstract((MTMBSegment **)a2);
      fprintf(v11, "%s\n", (const char *)v12);
    }
    MTMBSegment::Check(&v14);
    MTMBSegment::Check((MTFESpeechElement *)a2);
  }
  return v6;
}

uint64_t non-virtual thunk to'MTMBSmoothSegment::NextSegment(MTMBSmoothSegment *this, MTMBSegment *a2)
{
  return MTMBSmoothSegment::NextSegment((MTMBSmoothSegment *)((char *)this - 16), a2);
}

void MTMBSmoothSegment::~MTMBSmoothSegment(MTMBSmoothSegment *this)
{
  *(void *)this = &unk_1F347FC98;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  }
}

{
  uint64_t v1;

  *(void *)this = &unk_1F347FC98;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  }
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)this = &unk_1F347FC98;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  }

  JUMPOUT(0x1E016FF00);
}

void non-virtual thunk to'MTMBSmoothSegment::~MTMBSmoothSegment(MTMBSmoothSegment *this)
{
  *((void *)this - 2) = &unk_1F347FC98;
  uint64_t v1 = *((void *)this - 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  }
}

{
  MTMBSmoothSegment::~MTMBSmoothSegment((MTMBSmoothSegment *)((char *)this - 16));
}

void MTMBChangePitch::MTMBChangePitch(MTMBChangePitch *this, MTMBProducerComponent *a2, MTMBSignalProcessor *a3)
{
  *(void *)this = &unk_1F347FDA0;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = &unk_1F347FDC8;
  *((void *)this + 3) = a3;
  *((void *)this + 7) = 0;
  *((void *)this + MEOWVectorBase::clear(this + 4) = 0;
  *((void *)this + 5) = 0;
  *((_WORD *)this + --*(_WORD *)(this + 24) = 0;
  *((unsigned char *)this + 65) = 1;
}

{
  *(void *)this = &unk_1F347FDA0;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = &unk_1F347FDC8;
  *((void *)this + 3) = a3;
  *((void *)this + 7) = 0;
  *((void *)this + MEOWVectorBase::clear(this + 4) = 0;
  *((void *)this + 5) = 0;
  *((_WORD *)this + --*(_WORD *)(this + 24) = 0;
  *((unsigned char *)this + 65) = 1;
}

uint64_t MTMBChangePitch::NextSegment(MTMBChangePitch *this, MTMBSegment *a2)
{
  if (*((unsigned char *)this + 65))
  {
    *((unsigned char *)this + 65) = 0;
    char v4 = (***((uint64_t (****)(void, char *))this + 1))(*((void *)this + 1), (char *)this + 32);
    *((unsigned char *)this + 6MEOWVectorBase::clear(this + 4) = v4;
    if ((v4 & 1) == 0)
    {
LABEL_3:
      uint64_t result = 0;
      *((unsigned char *)this + 65) = 1;
      return result;
    }
  }
  else if (!*((unsigned char *)this + 64))
  {
    goto LABEL_3;
  }
  long long v6 = *((_OWORD *)this + 3);
  *(_OWORD *)a2 = *((_OWORD *)this + 2);
  *((_OWORD *)a2 + 1) = v6;
  int v7 = (***((uint64_t (****)(void, char *))this + 1))(*((void *)this + 1), (char *)this + 32);
  *((unsigned char *)this + 6MEOWVectorBase::clear(this + 4) = v7;
  uint64_t v8 = (FILE **)MEMORY[0x1E4F143C8];
  if ((~(_BYTE)MTBEDebugFlags::sMEOWDebug & 0x11) == 0)
  {
    uint64_t v9 = (FILE *)*MEMORY[0x1E4F143C8];
    int v10 = MTMBSegment::Abstract((MTMBSegment **)a2);
    fprintf(v9, "ChangePitch %s -> ", (const char *)v10);
    int v7 = *((unsigned __int8 *)this + 64);
  }
  if (v7) {
    (*(void (**)(void, MTMBSegment *, char *))(**((void **)this + 3) + 40))(*((void *)this + 3), a2, (char *)this + 32);
  }
  if ((~(_BYTE)MTBEDebugFlags::sMEOWDebug & 0x11) == 0)
  {
    int v11 = *v8;
    int v12 = MTMBSegment::Abstract((MTMBSegment **)a2);
    fprintf(v11, "%s\n", (const char *)v12);
  }
  MTMBSegment::Check((MTFESpeechElement *)a2);
  if (*((unsigned char *)this + 64)) {
    MTMBSegment::Check((MTFESpeechElement *)((char *)this + 32));
  }
  return 1;
}

uint64_t non-virtual thunk to'MTMBChangePitch::NextSegment(MTMBChangePitch *this, MTMBSegment *a2)
{
  return MTMBChangePitch::NextSegment((MTMBChangePitch *)((char *)this - 16), a2);
}

void MTMBChangePitch::~MTMBChangePitch(MTMBChangePitch *this)
{
  *(void *)this = &unk_1F347FDA0;
  *((void *)this + 2) = &unk_1F347FDC8;
  if (!*((unsigned char *)this + 65) && *((unsigned char *)this + 64)) {
    MTMBSegment::Free((MTMBChangePitch *)((char *)this + 32));
  }
  *(void *)this = &unk_1F347FC98;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
}

{
  uint64_t vars8;

  MTMBChangePitch::~MTMBChangePitch(this);

  JUMPOUT(0x1E016FF00);
}

void non-virtual thunk to'MTMBChangePitch::~MTMBChangePitch(MTMBChangePitch *this)
{
}

{
  uint64_t vars8;

  MTMBChangePitch::~MTMBChangePitch((MTMBChangePitch *)((char *)this - 16));

  JUMPOUT(0x1E016FF00);
}

void MTMBBlend::MTMBBlend(MTMBBlend *this, MTMBProducerComponent *a2, MTMBSignalProcessor *a3)
{
  *(void *)this = &unk_1F347FDF0;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = &unk_1F347FE18;
  *((void *)this + 3) = a3;
  *((void *)this + 7) = 0;
  *((void *)this + MEOWVectorBase::clear(this + 4) = 0;
  *((void *)this + 5) = 0;
  *((_WORD *)this + --*(_WORD *)(this + 24) = 0;
  *((unsigned char *)this + 65) = 1;
}

{
  *(void *)this = &unk_1F347FDF0;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = &unk_1F347FE18;
  *((void *)this + 3) = a3;
  *((void *)this + 7) = 0;
  *((void *)this + MEOWVectorBase::clear(this + 4) = 0;
  *((void *)this + 5) = 0;
  *((_WORD *)this + --*(_WORD *)(this + 24) = 0;
  *((unsigned char *)this + 65) = 1;
}

BOOL MTMBBlend::NextSegment(MTMBBlend *this, MTMBSegment *a2)
{
  if (*((unsigned char *)this + 65))
  {
    *((unsigned char *)this + 65) = 0;
    int v4 = (***((uint64_t (****)(void, char *))this + 1))(*((void *)this + 1), (char *)this + 32);
    *((unsigned char *)this + 6MEOWVectorBase::clear(this + 4) = v4;
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    int v4 = *((unsigned __int8 *)this + 64);
    if (*((unsigned char *)this + 64))
    {
LABEL_3:
      long long v5 = (MTMBSegment **)((char *)this + 32);
      long long v6 = *((_OWORD *)this + 3);
      *(_OWORD *)a2 = *((_OWORD *)this + 2);
      *((_OWORD *)a2 + 1) = v6;
      int v7 = (***((uint64_t (****)(void, char *))this + 1))(*((void *)this + 1), (char *)this + 32);
      *((unsigned char *)this + 6MEOWVectorBase::clear(this + 4) = v7;
      if (v7)
      {
        while (!*((_WORD *)this + 20))
        {
          MTMBSegment::Free((MTMBBlend *)((char *)this + 32));
          char v8 = (***((uint64_t (****)(void, char *))this + 1))(*((void *)this + 1), (char *)this + 32);
          *((unsigned char *)this + 6MEOWVectorBase::clear(this + 4) = v8;
          if ((v8 & 1) == 0) {
            goto LABEL_14;
          }
        }
        if ((*((_WORD *)this + 24) & 0x1000) != 0)
        {
          if ((~(_BYTE)MTBEDebugFlags::sMEOWDebug & 0x11) == 0)
          {
            BOOL v17 = (FILE *)*MEMORY[0x1E4F143C8];
            BOOL v18 = MTMBSegment::Abstract((MTMBSegment **)this + 4);
            fprintf(v17, "BlendBeg    %s -> ", (const char *)v18);
          }
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBBlendingLog)) {
            BlendingLog("   ", (MTMBDemiProperties **)a2);
          }
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBBlendingLog)) {
            BlendingLog("- <", (MTMBDemiProperties **)this + 4);
          }
          (*(void (**)(void, char *))(**((void **)this + 3) + 48))(*((void *)this + 3), (char *)this + 32);
          if ((~(_BYTE)MTBEDebugFlags::sMEOWDebug & 0x11) == 0)
          {
            uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
            uint64_t v20 = MTMBSegment::Abstract(v5);
            fprintf(v19, "%s\n", (const char *)v20);
          }
          if (!MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBBlendingLog)) {
            goto LABEL_26;
          }
          uint64_t v9 = "+ <";
LABEL_24:
          int v10 = v5;
          goto LABEL_25;
        }
        if ((*((_WORD *)a2 + 8) & 0x2000) == 0)
        {
          if ((*((_WORD *)this + 24) & 0x4000) != 0)
          {
            if ((~(_BYTE)MTBEDebugFlags::sMEOWDebug & 0x11) == 0)
            {
              unint64_t v21 = (FILE **)MEMORY[0x1E4F143C8];
              uint64_t v22 = (FILE *)*MEMORY[0x1E4F143C8];
              float v23 = MTMBSegment::Abstract((MTMBSegment **)a2);
              fprintf(v22, "Blend       %s ", (const char *)v23);
              uint64_t v24 = *v21;
              unsigned int v25 = MTMBSegment::Abstract((MTMBSegment **)this + 4);
              fprintf(v24, "%s\n", (const char *)v25);
            }
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBBlendingLog)) {
              BlendingLog("- =", (MTMBDemiProperties **)a2);
            }
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBBlendingLog)) {
              BlendingLog("- =", (MTMBDemiProperties **)this + 4);
            }
            (*(void (**)(void, MTMBSegment *, char *))(**((void **)this + 3) + 16))(*((void *)this + 3), a2, (char *)this + 32);
            if ((~(_BYTE)MTBEDebugFlags::sMEOWDebug & 0x11) == 0)
            {
              uint64_t v26 = (FILE **)MEMORY[0x1E4F143C8];
              uint64_t v27 = (FILE *)*MEMORY[0x1E4F143C8];
              uint64_t v28 = MTMBSegment::Abstract((MTMBSegment **)a2);
              fprintf(v27, " -> %s ", (const char *)v28);
              unint64_t v29 = *v26;
              int v30 = MTMBSegment::Abstract(v5);
              fprintf(v29, "%s\n", (const char *)v30);
            }
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBBlendingLog)) {
              BlendingLog("+ =", (MTMBDemiProperties **)a2);
            }
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBBlendingLog)) {
              BlendingLog("+ =", v5);
            }
            MTMBSegment::Check((MTFESpeechElement *)v5);
            goto LABEL_26;
          }
          if (!MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBBlendingLog))
          {
LABEL_26:
            MTMBSegment::Check((MTFESpeechElement *)a2);
            return v4 != 0;
          }
          uint64_t v9 = "   ";
          int v10 = (MTMBDemiProperties **)a2;
LABEL_25:
          BlendingLog(v9, v10);
          goto LABEL_26;
        }
      }
LABEL_14:
      int v11 = (FILE **)MEMORY[0x1E4F143C8];
      if ((~(_BYTE)MTBEDebugFlags::sMEOWDebug & 0x11) == 0)
      {
        int v12 = (FILE *)*MEMORY[0x1E4F143C8];
        unsigned __int8 v13 = MTMBSegment::Abstract((MTMBSegment **)a2);
        fprintf(v12, "BlendEnd    %s -> ", (const char *)v13);
      }
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBBlendingLog)) {
        BlendingLog("   ", (MTMBDemiProperties **)a2);
      }
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBBlendingLog)) {
        BlendingLog("- >", (MTMBDemiProperties **)this + 4);
      }
      (*(void (**)(void, MTMBSegment *))(**((void **)this + 3) + 56))(*((void *)this + 3), a2);
      if ((~(_BYTE)MTBEDebugFlags::sMEOWDebug & 0x11) == 0)
      {
        MTFESpeechElement v14 = *v11;
        int v15 = MTMBSegment::Abstract((MTMBSegment **)a2);
        fprintf(v14, "%s\n", (const char *)v15);
      }
      if (!MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBBlendingLog)) {
        goto LABEL_26;
      }
      uint64_t v9 = "+ >";
      goto LABEL_24;
    }
  }
  *((unsigned char *)this + 65) = 1;
  return v4 != 0;
}

uint64_t BlendingLog(const char *a1, MTMBDemiProperties **a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v4 = MTMBDemiProperties::Phon(a2[3], v8);
  uint64_t v5 = 85;
  if ((_WORD)a2[2]) {
    uint64_t v5 = 86;
  }
  printf("%s %s %c %u", a1, v4, v5, *((unsigned __int16 *)a2 + 4));
  if (*((_WORD *)a2 + 4))
  {
    unint64_t v6 = 0;
    do
      printf(" %.0f", *((float *)*a2 + v6++));
    while (v6 < *((unsigned __int16 *)a2 + 4));
  }
  return putchar(10);
}

BOOL non-virtual thunk to'MTMBBlend::NextSegment(MTMBBlend *this, MTMBSegment *a2)
{
  return MTMBBlend::NextSegment((MTMBBlend *)((char *)this - 16), a2);
}

void MTMBBlend::~MTMBBlend(MTMBBlend *this)
{
  *(void *)this = &unk_1F347FDF0;
  *((void *)this + 2) = &unk_1F347FE18;
  if (!*((unsigned char *)this + 65) && *((unsigned char *)this + 64)) {
    MTMBSegment::Free((MTMBBlend *)((char *)this + 32));
  }
  *(void *)this = &unk_1F347FC98;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
}

{
  uint64_t vars8;

  MTMBBlend::~MTMBBlend(this);

  JUMPOUT(0x1E016FF00);
}

void non-virtual thunk to'MTMBBlend::~MTMBBlend(MTMBBlend *this)
{
}

{
  uint64_t vars8;

  MTMBBlend::~MTMBBlend((MTMBBlend *)((char *)this - 16));

  JUMPOUT(0x1E016FF00);
}

void MTMBChangeAmplitude::MTMBChangeAmplitude(MTMBChangeAmplitude *this, MTMBProducerComponent *a2, MTMBSignalProcessor *a3, char a4)
{
  *(void *)this = &unk_1F347FE40;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = &unk_1F347FE68;
  *((void *)this + 3) = a3;
  *((void *)this + MEOWVectorBase::clear(this + 4) = 0x3800000038000000;
  *((void *)this + 5) = 0;
  *((unsigned char *)this + 48) = a4;
}

{
  *(void *)this = &unk_1F347FE40;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = &unk_1F347FE68;
  *((void *)this + 3) = a3;
  *((void *)this + MEOWVectorBase::clear(this + 4) = 0x3800000038000000;
  *((void *)this + 5) = 0;
  *((unsigned char *)this + 48) = a4;
}

uint64_t MTMBChangeAmplitude::NextSegment(MTMBChangeAmplitude *this, MTFESpeechElement *a2)
{
  uint64_t v4 = (***((uint64_t (****)(void))this + 1))(*((void *)this + 1));
  if (v4)
  {
    var4 = a2->var4;
    if (var4 != *((MTFESpeechElement **)this + 5))
    {
      *((void *)this + 5) = var4;
      if (var4) {
        *((float *)this + 9) = (float)(uint64_t)var4->var4 * 4.6566e-10;
      }
      if (((uint64_t)a2->var3 & 0x1000) != 0) {
        *((_DWORD *)this + 8) = *((_DWORD *)this + 9);
      }
    }
    if ((~(_BYTE)MTBEDebugFlags::sMEOWDebug & 0x11) == 0)
    {
      unint64_t v6 = (FILE *)*MEMORY[0x1E4F143C8];
      int v7 = MTMBSegment::Abstract((MTMBSegment **)a2);
      fprintf(v6, "ChangeAmp   %s -> ", (const char *)v7);
    }
    char v8 = (float *)((char *)this + 36);
    float v9 = *((float *)this + 9);
    float v10 = *((float *)this + 8);
    if (v9 <= v10)
    {
      float v17 = v10 + -0.1;
      BOOL v11 = v9 < (float)(v10 + -0.1);
      int v12 = &v17;
    }
    else
    {
      float v18 = v10 + 0.1;
      BOOL v11 = (float)(v10 + 0.1) < v9;
      int v12 = &v18;
    }
    if (v11) {
      char v8 = v12;
    }
    float v13 = *v8;
    (*(void (**)(void, MTFESpeechElement *, void))(**((void **)this + 3) + 64))(*((void *)this + 3), a2, *((unsigned __int8 *)this + 48));
    *((float *)this + 8) = v13;
    if ((~(_BYTE)MTBEDebugFlags::sMEOWDebug & 0x11) == 0)
    {
      MTFESpeechElement v14 = (FILE *)*MEMORY[0x1E4F143C8];
      int v15 = MTMBSegment::Abstract((MTMBSegment **)a2);
      fprintf(v14, "%s %f\n", (const char *)v15, v13);
    }
    MTMBSegment::Check(a2);
  }
  return v4;
}

uint64_t non-virtual thunk to'MTMBChangeAmplitude::NextSegment(MTMBChangeAmplitude *this, MTFESpeechElement *a2)
{
  return MTMBChangeAmplitude::NextSegment((MTMBChangeAmplitude *)((char *)this - 16), a2);
}

void MTMBSpeechRateModifier::MTMBSpeechRateModifier(MTMBSpeechRateModifier *this, MTMBProducerComponent *a2)
{
  *(void *)this = &unk_1F347FE90;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = &unk_1F347FEB8;
  MTMBModRate::CreateConcreteModifier(this);
}

void sub_1DA4CA8B8(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;
  MEOWVectorBase::~MEOWVectorBase(v3);
  void *v1 = &unk_1F347FC98;
  uint64_t v5 = v1[1];
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  _Unwind_Resume(a1);
}

void MTMBSpeechRateModifier::~MTMBSpeechRateModifier(MTMBSpeechRateModifier *this)
{
  *(void *)this = &unk_1F347FE90;
  *((void *)this + 2) = &unk_1F347FEB8;
  if (*((void *)this + 17))
  {
    MTMBSegment::Free((MTMBSegment *)(*((void *)this + 16) + 16));
    uint64_t v2 = (uint64_t *)*((void *)this + 16);
    uint64_t v3 = *((void *)this + 17);
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = v2[1];
    *(void *)v2[1] = v4;
    *((void *)this + 17) = v3 - 1;
    operator delete(v2);
  }
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  std::__list_imp<SpeechChannelManager *>::clear((void *)this + 15);
  std::__list_imp<SpeechChannelManager *>::clear((void *)this + 12);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 8);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 4);
  *(void *)this = &unk_1F347FC98;
  uint64_t v6 = *((void *)this + 1);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
  }
}

{
  uint64_t vars8;

  MTMBSpeechRateModifier::~MTMBSpeechRateModifier(this);

  JUMPOUT(0x1E016FF00);
}

void non-virtual thunk to'MTMBSpeechRateModifier::~MTMBSpeechRateModifier(MTMBSpeechRateModifier *this)
{
}

{
  uint64_t vars8;

  MTMBSpeechRateModifier::~MTMBSpeechRateModifier((MTMBSpeechRateModifier *)((char *)this - 16));

  JUMPOUT(0x1E016FF00);
}

uint64_t MTMBSpeechRateModifier::NextSegment(MTMBSpeechRateModifier *this, MTMBSegment *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v32 = 0;
  __src = 0;
  unint64_t v30 = 0;
  unsigned __int16 v31 = 0;
  if (*((void *)this + 17))
  {
LABEL_2:
    uint64_t v4 = *((void *)this + 16);
    long long v5 = *(_OWORD *)(v4 + 32);
    *(_OWORD *)a2 = *(_OWORD *)(v4 + 16);
    *((_OWORD *)a2 + 1) = v5;
    MTMBSegment::Modify((uint64_t)a2);
    uint64_t v6 = (uint64_t *)*((void *)this + 16);
    uint64_t v7 = *v6;
    *(void *)(v7 + 8) = v6[1];
    *(void *)v6[1] = v7;
    --*((void *)this + 17);
    operator delete(v6);
    MTMBSegment::Check((MTFESpeechElement *)a2);
    *((_DWORD *)this + 37) += *((unsigned __int16 *)a2 + 4);
    return 1;
  }
  float v9 = (char *)this + 96;
  while (*((unsigned char *)this + 145))
  {
    int v10 = (***((uint64_t (****)(void, void **))this + 1))(*((void *)this + 1), &__src);
    char v13 = v10;
    *((unsigned char *)this + 145) = v10;
    if (!v10) {
      goto LABEL_25;
    }
    MTFESpeechElement v14 = v32;
    LOWORD(v11) = *((_WORD *)v32 + 32);
    LOWORD(v12) = *((_WORD *)v32 + 33);
    float v15 = (float)v11 / (float)v12;
    if (*((unsigned char *)this + 144))
    {
      float v16 = *((float *)this + 39);
    }
    else
    {
      int v17 = *((_DWORD *)v32 + 17);
      if (v17 == *((_DWORD *)this + 38)) {
        goto LABEL_20;
      }
      *((_DWORD *)this + 38) = v17;
      if (!v17) {
        goto LABEL_20;
      }
      int v18 = *((_DWORD *)this + 37) - v17;
      float v19 = 1.1;
      if (v18 >= -4410)
      {
        float v19 = 1.05;
        if (v18 >= -2205)
        {
          float v19 = 1.02;
          if (v18 >= -1100)
          {
            float v19 = 1.01;
            if (v18 >= -550)
            {
              float v19 = 1.0;
              if (v18 >= 550)
              {
                float v19 = 0.99;
                if (v18 >= 0x44C)
                {
                  float v19 = 0.98;
                  if (v18 >= 0x89D) {
                    float v19 = flt_1DA5015A0[v18 >> 1 < 0x89D];
                  }
                }
              }
            }
          }
        }
      }
      *((float *)this + 39) = v19;
      if ((MTBEDebugFlags::sMEOWDebug & 1) == 0)
      {
LABEL_20:
        float v16 = *((float *)this + 39);
LABEL_21:
        (*(void (**)(void, float))(**((void **)this + 3) + 32))(*((void *)this + 3), v15 * v16);
        goto LABEL_22;
      }
      uint64_t v27 = (FILE *)*MEMORY[0x1E4F143C8];
      uint64_t v28 = MTMBDemiProperties::Phon(v14, v33);
      fprintf(v27, "Unit %s Target %u Actual %u Diff %d [%5.2fs] Tweak %5.2f\n", v28, *((_DWORD *)this + 38), *((_DWORD *)this + 37), v18, (float)((float)v18 / 22050.0), *((float *)this + 39));
      float v16 = *((float *)this + 39);
      if (!*((unsigned char *)this + 144)) {
        goto LABEL_21;
      }
    }
    (*(void (**)(void, float))(**((void **)this + 3) + 48))(*((void *)this + 3), v15 * v16);
    MEOWVectorBase::clear((void **)this + 4);
    *((unsigned char *)this + 14MEOWVectorBase::clear(this + 4) = 0;
    *((_DWORD *)this + 37) = 0;
    *((_DWORD *)this + 38) = 0;
LABEL_22:
    uint64_t v20 = (v31 >> 7) & 7;
    if (v20)
    {
      uint64_t v21 = *((unsigned int *)this + 12);
      uint64_t v22 = operator new(0x18uLL);
      v22[1] = v9;
      v22[2] = v21 | (v20 << 32);
      uint64_t v23 = *((void *)this + 12);
      *uint64_t v22 = v23;
      *(void *)(v23 + 8) = v22;
      *((void *)this + 12) = v22;
      ++*((void *)this + 14);
    }
    MEOWVectorBase::Append((MTMBSpeechRateModifier *)((char *)this + 32), __src, (unsigned __int16)v30);
    MTMBSegment::Free((MTMBSegment *)&__src);
LABEL_25:
    if ((*(unsigned int (**)(void, void))(**((void **)this + 3) + 16))(*((void *)this + 3), *((unsigned int *)this + 12)))
    {
      (*(void (**)(void, char *, char *, char *, void))(**((void **)this + 3) + 24))(*((void *)this + 3), (char *)this + 32, (char *)this + 64, v33, 0);
      int v24 = v34;
      if ((v34 & 0x80000000) == 0)
      {
        if (v34 >= *(int *)v33)
        {
          unint64_t v26 = *((void *)this + 14);
          goto LABEL_38;
        }
        uint64_t v25 = *((void *)this + 13);
        if ((char *)v25 != v9)
        {
          unint64_t v26 = 0;
          while (*(_DWORD *)(v25 + 16) < v34)
          {
            ++v26;
            uint64_t v25 = *(void *)(v25 + 8);
            if ((char *)v25 == v9) {
              goto LABEL_38;
            }
          }
          while ((char *)v25 != v9)
          {
            *(_DWORD *)(v25 + 16) -= v24;
            uint64_t v25 = *(void *)(v25 + 8);
          }
LABEL_38:
          MTMBSpeechRateModifier::PushToQueue((uint64_t)this, (uint64_t)this + 64, (uint64_t)this + 96, v26);
        }
      }
      unint64_t v26 = 0;
      goto LABEL_38;
    }
    if ((v13 & 1) == 0)
    {
      (*(void (**)(void, char *, char *, char *, uint64_t))(**((void **)this + 3) + 24))(*((void *)this + 3), (char *)this + 32, (char *)this + 64, v33, 1);
      if (*((void *)this + 10)) {
        MTMBSpeechRateModifier::PushToQueue((uint64_t)this, (uint64_t)this + 64, (uint64_t)this + 96, *((void *)this + 14));
      }
    }
    if (*((void *)this + 17)) {
      goto LABEL_2;
    }
  }
  uint64_t result = 0;
  *((_WORD *)this + 72) = 257;
  return result;
}

void MTMBSpeechRateModifier::PushToQueue(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (*(void *)(a2 + 16))
  {
    if (a4) {
      goto LABEL_3;
    }
  }
  else
  {
    MTBEAbort(0);
    if (a4)
    {
LABEL_3:
      unint64_t v7 = *(void *)(a2 + 16) / a4;
      char v8 = operator new(0x30uLL);
      v8[3] = 0;
      *((_WORD *)v8 + 16) = 0;
      v8[2] = 0;
      v8[5] = 0;
      uint64_t v9 = *(void *)(a1 + 120);
      *char v8 = v9;
      v8[1] = a1 + 120;
      *(void *)(v9 + 8) = v8;
      *(void *)(a1 + 120) = v8;
      ++*(void *)(a1 + 136);
      MTMBSegment::Allocate((MTMBSegment *)(v8 + 2), v7);
    }
  }
  int v10 = operator new(0x30uLL);
  v10[3] = 0;
  v10[2] = 0;
  *((_WORD *)v10 + 16) = 0;
  v10[5] = 0;
  uint64_t v12 = *(void *)(a1 + 120);
  unsigned int v11 = (void *)(a1 + 120);
  *int v10 = v12;
  v10[1] = v11;
  *(void *)(v12 + 8) = v10;
  *unsigned int v11 = v10;
  ++v11[2];
  MTMBSegment::Allocate((MTMBSegment *)(v10 + 2), *(_DWORD *)(a2 + 16));
}

uint64_t non-virtual thunk to'MTMBSpeechRateModifier::NextSegment(MTMBSpeechRateModifier *this, MTMBSegment *a2)
{
  return MTMBSpeechRateModifier::NextSegment((MTMBSpeechRateModifier *)((char *)this - 16), a2);
}

void MTMBSegmentProducer::~MTMBSegmentProducer(MTMBSegmentProducer *this)
{
  MTCBSegmentProducer::~MTCBSegmentProducer(this);

  JUMPOUT(0x1E016FF00);
}

void MTPBSegmentProducer::~MTPBSegmentProducer(MTPBSegmentProducer *this)
{
  MTCBSegmentProducer::~MTCBSegmentProducer(this);

  JUMPOUT(0x1E016FF00);
}

void MTWBSegmentProducer::~MTWBSegmentProducer(MTWBSegmentProducer *this)
{
}

void MTMBChangeAmplitude::~MTMBChangeAmplitude(MTMBChangeAmplitude *this)
{
  *(void *)this = &unk_1F347FC98;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  }
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)this = &unk_1F347FC98;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  }

  JUMPOUT(0x1E016FF00);
}

void non-virtual thunk to'MTMBChangeAmplitude::~MTMBChangeAmplitude(MTMBChangeAmplitude *this)
{
  *((void *)this - 2) = &unk_1F347FC98;
  uint64_t v1 = *((void *)this - 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  }
}

{
  uint64_t v1;
  uint64_t vars8;

  *((void *)this - 2) = &unk_1F347FC98;
  uint64_t v1 = *((void *)this - 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  }

  JUMPOUT(0x1E016FF00);
}

uint64_t std::deque<MTMBDemi>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0x24];
    unint64_t v7 = (MTMBDemi *)((char *)*v6 + 112 * (v5 % 0x24));
    unint64_t v8 = (unint64_t)v2[(a1[5] + v5) / 0x24] + 112 * ((a1[5] + v5) % 0x24);
    if (v7 != (MTMBDemi *)v8)
    {
      do
      {
        MTMBDemi::~MTMBDemi(v7);
        unint64_t v7 = (MTMBDemi *)(v9 + 112);
        if (v7 - (MTMBDemi *)*v6 == 4032)
        {
          int v10 = (MTMBDemi *)v6[1];
          ++v6;
          unint64_t v7 = v10;
        }
      }
      while (v7 != (MTMBDemi *)v8);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  *uint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 18;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_16;
    }
    uint64_t v13 = 36;
  }
  a1[4] = v13;
LABEL_16:
  while (v2 != v3)
  {
    MTFESpeechElement v14 = *v2++;
    operator delete(v14);
  }

  return std::__split_buffer<MTMBDemi *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<MTMBDemi *>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::deque<unsigned short>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 1024;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 2048;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<MTMBDemi *>::~__split_buffer((uint64_t)a1);
}

MTMBDemi *std::deque<MTMBDemi>::__append(void *a1, unint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 36 * ((v5 - v4) >> 3) - 1;
  }
  unint64_t v7 = a1[5] + a1[4];
  unint64_t v8 = v6 - v7;
  BOOL v9 = a2 > v8;
  unint64_t v10 = a2 - v8;
  if (v9)
  {
    std::deque<MTMBDemi>::__add_back_capacity(a1, v10);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
    unint64_t v7 = a1[4] + a1[5];
  }
  unint64_t v11 = (void *)(v4 + 8 * (v7 / 0x24));
  if (v5 == v4) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v11 + 112 * (v7 % 0x24);
  }
  float v19 = (void *)(v4 + 8 * (v7 / 0x24));
  unint64_t v20 = v12;
  uint64_t result = (MTMBDemi *)std::__deque_iterator<MTMBDemi,MTMBDemi*,MTMBDemi&,MTMBDemi**,long,36l>::operator+=[abi:ne180100](&v19, a2);
  uint64_t v14 = v20;
  if (v12 != v20)
  {
    float v15 = v19;
    do
    {
      if (v11 == v15) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = *v11 + 4032;
      }
      if (v12 == v16)
      {
        uint64_t v16 = v12;
      }
      else
      {
        uint64_t v17 = 0;
        do
        {
          uint64_t result = MTMBDemi::MTMBDemi((MTMBDemi *)(v12 + v17));
          v17 += 112;
        }
        while (v12 + v17 != v16);
      }
      a1[5] += 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v16 - v12) >> 4);
      if (v11 == v15) {
        break;
      }
      unint64_t v18 = v11[1];
      ++v11;
      unint64_t v12 = v18;
    }
    while (v18 != v14);
  }
  return result;
}

void sub_1DA4CB7C4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 40) += 0x6DB6DB6DB6DB6DB7 * (v2 >> 4);
  _Unwind_Resume(a1);
}

uint64_t std::deque<MTMBDemi>::__erase_to_end(uint64_t result, void *a2, MTMBDemi *a3)
{
  uint64_t v3 = (void *)result;
  unint64_t v4 = *(void *)(result + 32);
  unint64_t v5 = v4 + *(void *)(result + 40);
  uint64_t v6 = *(void *)(result + 8);
  uint64_t v7 = *(void *)(result + 16);
  unint64_t v8 = (void *)(v6 + 8 * (v5 / 0x24));
  if (v7 == v6) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (MTMBDemi *)(*v8 + 112 * (v5 % 0x24));
  }
  if (v9 != a3)
  {
    uint64_t v10 = ((uint64_t)a3 - *a2) >> 4;
    uint64_t v11 = 36 * (v8 - a2) + 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v9 - *v8) >> 4) - 0x6DB6DB6DB6DB6DB7 * v10;
    if (v11 >= 1)
    {
      unint64_t v12 = (void *)(v6 + 8 * (v4 / 0x24));
      if (v7 == v6) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = (MTMBDemi *)(*v12 + 112 * (v4 % 0x24));
      }
      if (a3 == v13) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = 36 * (a2 - v12) + 0x6DB6DB6DB6DB6DB7 * v10 - 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v13 - *v12) >> 4);
      }
      float v19 = v12;
      unint64_t v20 = v13;
      std::__deque_iterator<MTMBDemi,MTMBDemi*,MTMBDemi&,MTMBDemi**,long,36l>::operator+=[abi:ne180100](&v19, v14);
      float v15 = v20;
      if (v20 != v9)
      {
        uint64_t v16 = v19;
        do
        {
          MTMBDemi::~MTMBDemi(v15);
          float v15 = (MTMBDemi *)(v17 + 112);
          if ((MTMBDemi *)((char *)v15 - *v16) == (MTMBDemi *)4032)
          {
            unint64_t v18 = (MTMBDemi *)v16[1];
            ++v16;
            float v15 = v18;
          }
        }
        while (v15 != v9);
      }
      v3[5] -= v11;
      do
        uint64_t result = std::deque<MTMBDemi>::__maybe_remove_back_spare[abi:ne180100](v3, 1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

void std::deque<MTMBDemi>::__add_back_capacity(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if (v5 % 0x24) {
    unint64_t v6 = v5 / 0x24 + 1;
  }
  else {
    unint64_t v6 = v5 / 0x24;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 / 0x24) {
    unint64_t v8 = v7 / 0x24;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 / 0x24)
  {
    for (a1[4] = v7 - 36 * v8; v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      uint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          unint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>((uint64_t)(a1 + 3), v28);
          unsigned __int16 v31 = &v29[8 * (v28 >> 2)];
          uint64_t v32 = (uint64_t *)a1[1];
          uint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            uint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            uint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)uint64_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          uint64_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            uint64_t v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          uint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            uint64_t v3 = (char *)a1[1];
          }
          uint64_t v27 = &v3[-8 * (v24 >> 1)];
          uint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)uint64_t v3 = v18;
      uint64_t v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0xFC0uLL);
          std::__split_buffer<MTMBDemi *>::push_back(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0xFC0uLL);
          std::__split_buffer<MTMBDemi *>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 35;
          }
          else {
            uint64_t v64 = 36;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - 36 * v8;
      if (v8)
      {
        unint64_t v66 = (char *)a1[2];
        do
        {
          uint64_t v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          int v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              uint64_t v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>((uint64_t)(a1 + 3), v78);
              unint64_t v81 = &v79[8 * (v78 >> 2)];
              unint64_t v82 = (uint64_t *)a1[1];
              unint64_t v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                unint64_t v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                int v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)int v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              unint64_t v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                unint64_t v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              int v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                unint64_t v66 = (char *)a1[1];
              }
              unint64_t v77 = &v66[-8 * (v74 >> 1)];
              unint64_t v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)unint64_t v66 = v69;
          unint64_t v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      uint64_t v91 = a1 + 3;
      if (v13) {
        float v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>((uint64_t)(a1 + 3), v13);
      }
      else {
        float v15 = 0;
      }
      uint64_t v38 = -36 * v8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        unint64_t v88 = operator new(0xFC0uLL);
        std::__split_buffer<MTMBDemi *>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        unint64_t v39 = (void *)a1[1];
        unint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              uint64_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>((uint64_t)v91, v48);
              uint64_t v51 = (uint64_t *)__p[1];
              unint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                unint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                unint64_t v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)unint64_t v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              unint64_t v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                unint64_t v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              int v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                unint64_t v40 = (char *)__p[1];
              }
              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              unint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)unint64_t v40 = *v39;
          unint64_t v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          unint64_t v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      __int16 v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<MTMBDemi *>::push_front((uint64_t)__p, v57);
      }
      unint64_t v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] += v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_1DA4CBEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__split_buffer<MTMBDemi *>::push_back(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  unint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    unint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      BOOL v22 = (uint64_t *)a1[1];
      unint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        unint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        uint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)uint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        unint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      float v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        unint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      unint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)unint64_t v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    unint64_t v5 = (char *)a1[1];
    unint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        int64_t v16 = 1;
      }
      else {
        int64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        BOOL v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      uint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      unint64_t v7 = v6 >> 3;
      uint64_t v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        BOOL v10 = v9;
      }
      else {
        BOOL v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      uint64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      float v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<MTMBDemi *>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>(v6, v12);
      unint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      BOOL v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + --*(_WORD *)(this + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        unint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      unint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    unint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = (v7 - v4) >> 2;
      }
      unint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>(*(void *)(a1 + 32), v11);
      unint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      int64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        int64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + --*(_WORD *)(this + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        unint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      unint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    unint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t std::deque<MTMBDemi>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 36 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x24) {
    a2 = 1;
  }
  if (v5 < 0x48) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<unsigned short>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x800;
  unint64_t v4 = v2 - 2048;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    int v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<MTMBDemi *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<MTMBDemi *>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<MTMBDemi *>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<MTMBDemi *>::push_front((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1DA4CC71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<MTMBDemi>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x24) {
    a2 = 1;
  }
  if (v2 < 0x48) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 36;
  }
  return v4 ^ 1u;
}

uint64_t std::deque<unsigned short>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x800) {
    a2 = 1;
  }
  if (v2 < 0x1000) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 2048;
  }
  return v4 ^ 1u;
}

void *std::__deque_iterator<MTMBDemi,MTMBDemi*,MTMBDemi&,MTMBDemi**,long,36l>::operator+=[abi:ne180100](void *result, uint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = (void *)*result;
    unint64_t v3 = a2 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(result[1] - *(void *)*result) >> 4);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 35 - v3;
      uint64_t v6 = &v2[-(v5 / 0x24)];
      *uint64_t result = v6;
      unint64_t v4 = *v6 + 112 * (36 * (v5 / 0x24) - v5) + 3920;
    }
    else
    {
      *uint64_t result = &v2[v3 / 0x24];
      unint64_t v4 = v2[v3 / 0x24] + 112 * (v3 % 0x24);
    }
    result[1] = v4;
  }
  return result;
}

MTFESpeechElement *MTFEAdjustPhrasing::VisitIntonationalPhrase(MTFEAdjustPhrasing *this, MTFESpeechElement *a2)
{
  MTFEAdjustPhrasing::PeekInto(this, a2);

  return MTFESpeechElement::VisitChildren(a2, this);
}

void MTFEAdjustPhrasing::PeekInto(MTFEAdjustPhrasing *this, MTFESpeechElement *a2)
{
  MTFESpeechIterator::MTFESpeechIterator((MTFESpeechIterator *)v11, a2);
  unint64_t v3 = v12;
  if (!v12 || (unint64_t v4 = (void *)*((void *)this + 2), v12 == v4))
  {
    LOBYTE(vMEOWVectorBase::clear(this + 4) = 0;
  }
  else
  {
    if (v4)
    {
      do
      {
        unint64_t v5 = v4;
        unint64_t v4 = (void *)v4[3];
      }
      while (v4);
      *((void *)this + MEOWVectorBase::clear(this + 4) = v6;
      if (v6) {
        LOBYTE(vMEOWVectorBase::clear(this + 4) = v6[58] == 0;
      }
      else {
        LOBYTE(vMEOWVectorBase::clear(this + 4) = 0;
      }
    }
    else
    {
      *((void *)this + MEOWVectorBase::clear(this + 4) = 0;
    }
    *((void *)this + 2) = v3;
    *((unsigned char *)this + 40) = *((unsigned char *)this + 41);
    *((unsigned char *)this + 41) = *((unsigned char *)v3 + 158);
  }
  uint64_t v7 = v13;
  if (v13 != *((void *)this + 3))
  {
    *((void *)this + 3) = v13;
    *((unsigned char *)this + 42) = *((unsigned char *)this + 43);
    *((unsigned char *)this + 43) = *(unsigned char *)(v7 + 80);
    if ((v4 & 1) == 0)
    {
      uint64_t v8 = v15;
      if (*(unsigned char *)(v15 + 58)) {
        uint64_t v8 = 0;
      }
      *((void *)this + MEOWVectorBase::clear(this + 4) = v8;
    }
  }
  if (v14)
  {
    int v9 = *(__int16 *)(v14 + 178);
    *((_WORD *)this + MEOWVectorBase::clear(this + 4) = v9;
    float v10 = 180.0 / (double)v9;
    *((float *)this + 3) = v10;
  }
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v11);
}

uint64_t MTFEAdjustPhrasing::DemoteIntonationalPhrase(uint64_t this, MTFESpeechElement *a2)
{
  uint64_t v3 = this;
  var3 = a2->var3;
  signed __int16 var7 = a2->var7;
  if (var7)
  {
    if (var3)
    {
      uint64_t v6 = var3;
      do
      {
        uint64_t v7 = v6;
        uint64_t v6 = v6->var3;
      }
      while (v6);
      do
      {
        uint64_t v8 = var7;
        signed __int16 var7 = var7->var4;
      }
      while (var7);
      MTFESpeechElement::SetPrevCousin(v7, v8);
      signed __int16 var7 = a2->var7;
    }
    MTFESpeechElement::TransferChildren(a2, var7);
    this = (*((uint64_t (**)(MTFESpeechElement *))a2->var0 + 2))(a2);
  }
  if (var3)
  {
    do
    {
      var6 = var3->var6;
      this = (*(uint64_t (**)(MTFESpeechElement *, uint64_t))var3->var0)(var3, v3);
      var3 = var6;
    }
    while (var6);
  }
  return this;
}

float MTFEAdjustPhrasing::VisitIntermediatePhrase(MTFEAdjustPhrasing *this, MTFESpeechElement *a2)
{
  MTFEAdjustPhrasing::PeekInto(this, a2);
  if (*((__int16 *)this + 4) >= 200)
  {
    uint64_t v4 = *((void *)this + 4);
    if (v4)
    {
      unint64_t v5 = *(unsigned int *)(v4 + 72);
      if ((v5 & 0x8000) != 0) {
        float v6 = *(float *)(v4 + 64) * 5.0;
      }
      else {
        float v6 = (float)(__int16)MTFEPhonemeFlags::sBoundaryDur[(v5 >> 20) & 0x1F];
      }
      *(_DWORD *)(v4 + 72) = v5 | 0x8000;
      float result = (float)(v6 * 0.5) / 5.0;
      *(float *)(v4 + 6MEOWVectorBase::clear(this + 4) = result;
    }
  }
  return result;
}

float MTFEAdjustPhrasing::SetPause(MTFEAdjustPhrasing *this, float result)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    *(_DWORD *)(v2 + 72) |= 0x8000u;
    float result = result / 5.0;
    *(float *)(v2 + 6MEOWVectorBase::clear(this + 4) = result;
  }
  return result;
}

float MTFEAdjustPhrasing::GetPause(MTFEAdjustPhrasing *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (!v1) {
    return 0.0;
  }
  unint64_t v2 = *(unsigned int *)(v1 + 72);
  if ((v2 & 0x8000) != 0) {
    return *(float *)(v1 + 64) * 5.0;
  }
  else {
    return (float)(__int16)MTFEPhonemeFlags::sBoundaryDur[(v2 >> 20) & 0x1F];
  }
}

void MTFEAdjustPhrasing::DemoteIntermediatePhrase(MTFEAdjustPhrasing *this, MTFESpeechElement *a2)
{
  signed __int16 var7 = a2->var7;
  if (var7)
  {
    MTFESpeechElement::TransferChildren(a2, var7);
    uint64_t v4 = (void (*)(MTFESpeechElement *))*((void *)a2->var0 + 2);
    v4(a2);
  }
}

void MTFEAdjustPhrasing::~MTFEAdjustPhrasing(MTFEAdjustPhrasing *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

MTFESpeechElement *MTFESkipContext::VisitSentence(MTFESkipContext *this, MTFESpeechElement *a2)
{
  float result = (MTFESpeechElement *)(*(uint64_t (**)(MTFESkipContext *))(*(void *)this + 96))(this);
  if (result)
  {
    *((unsigned char *)this + 8) = 0;
    return MTFESpeechElement::VisitChildren(a2, this);
  }
  return result;
}

uint64_t MTFESkipWordContext::ShouldProcess(MTFESkipWordContext *this, MTFESentence *a2)
{
  return ((unsigned __int16)a2->var8 >> 3) & 1;
}

uint64_t MTFESkipTextContext::ShouldProcess(MTFESkipTextContext *this, MTFESentence *a2)
{
  return ((unsigned __int16)a2->var8 >> 4) & 1;
}

BOOL MTFESkipToWord::ShouldProcess(MTFESkipToWord *this, MTFESentence *a2)
{
  return *((void *)this + 4) != 0;
}

uint64_t MTFESkipContext::VisitIntonationalPhrase(MTFESkipContext *this, MTFESpeechElement *a2)
{
  *((unsigned char *)this + 9) = 0;
  MTFESpeechElement::VisitChildren(a2, this);
  uint64_t result = MTFECommands::Visit((uint64_t)&a2[1].var1, (uint64_t)this);
  if (a2 && !*((unsigned char *)this + 9))
  {
    unint64_t v5 = (uint64_t (*)(MTFESpeechElement *))*((void *)a2->var0 + 2);
    return v5(a2);
  }
  return result;
}

uint64_t MTFESkipTextContext::VisitIntonationalPhrase(MTFESkipContext *this, MTFESpeechElement *a2)
{
  if (HIDWORD(a2[2].var5)) {
    unint64_t v2 = (char *)a2[2].var3 + 4 * SLODWORD(a2[2].var5);
  }
  else {
    unint64_t v2 = 0;
  }
  *((void *)this + 2) = v2;
  *((void *)this + 3) = v2;
  return MTFESkipContext::VisitIntonationalPhrase(this, a2);
}

MTFESpeechElement *MTFESkipContext::VisitIntermediatePhrase(MTFESkipContext *this, MTFESpeechElement *a2)
{
  char v4 = *((unsigned char *)this + 9);
  *((unsigned char *)this + 9) = 0;
  uint64_t result = MTFESpeechElement::VisitChildren(a2, this);
  if (!a2->var1 || !*((unsigned char *)this + 9) && a2->var7 && a2->var6) {
    uint64_t result = (MTFESpeechElement *)(*((uint64_t (**)(MTFESpeechElement *))a2->var0 + 2))(a2);
  }
  *((unsigned char *)this + 9) |= v4;
  return result;
}

MTFESpeechElement *MTFESkipContext::VisitWord(MTFESkipContext *this, MTFESpeechElement *a2)
{
  int v4 = *((unsigned __int8 *)this + 8);
  MTFECommands::Visit((uint64_t)&a2[2], (uint64_t)this);
  if (*((unsigned char *)this + 8))
  {
    if (((uint64_t)a2[1].var0 & 0x40) != 0)
    {
      return MTFESpeechElement::VisitChildren(a2, this);
    }
    else
    {
      if (!v4 && a2->var5 && a2[2].var1 >= 1) {
        operator new();
      }
      unint64_t v5 = (uint64_t (*)(MTFESpeechElement *))*((void *)a2->var0 + 2);
      return (MTFESpeechElement *)v5(a2);
    }
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(MTFESkipContext *, MTFESpeechElement *))(*(void *)this + 112);
    return (MTFESpeechElement *)v7(this, a2);
  }
}

void sub_1DA4CD0C8(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C40D6D86DEFLL);
  _Unwind_Resume(a1);
}

MTFESpeechElement *MTFESkipContext::DeleteWord(MTFESkipContext *this, MTFESpeechElement *a2)
{
  if (((uint64_t)a2[1].var0 & 0x40) != 0) {
    return MTFESpeechElement::VisitChildren(a2, this);
  }
  else {
    return (MTFESpeechElement *)(*((uint64_t (**)(MTFESpeechElement *))a2->var0 + 2))(a2);
  }
}

uint64_t MTFESkipContext::KeepWord(uint64_t this, MTFEWord *a2)
{
  if ((a2->var8 & 0x40) == 0) {
    *(unsigned char *)(this + 9) = 1;
  }
  return this;
}

uint64_t MTFESkipWordContext::VisitCommand(uint64_t this, MTFECommand *a2)
{
  if (a2->var8 == 1668577396) {
    *(unsigned char *)(this + 8) = a2->var9 == 1465076560;
  }
  return this;
}

uint64_t MTFESkipTextContext::VisitCommand(uint64_t this, MTFECommand *a2)
{
  if (a2->var8 == 1668577396) {
    *(unsigned char *)(this + 8) = a2->var9 == 1414744912;
  }
  return this;
}

uint64_t MTFESkipWordContext::KeepWord(uint64_t this, MTFEWord *a2)
{
  if ((a2->var8 & 0x40) == 0) {
    *(unsigned char *)(this + 9) = 1;
  }
  a2->int var10 = 1;
  return this;
}

char *MTFESkipTextContext::KeepWord(MTFESkipTextContext *this, MTFEWord *a2)
{
  if ((a2->var8 & 0x40) == 0) {
    *((unsigned char *)this + 9) = 1;
  }
  uint64_t result = (char *)*((void *)this + 2);
  if (result)
  {
    unint64_t v5 = (char *)*((void *)this + 3);
    if (v5 > result)
    {
      memmove(result, v5, 4 * a2->var21);
      uint64_t result = (char *)*((void *)this + 2);
    }
    *((void *)this + 2) = &result[4 * a2->var21];
  }
  return result;
}

uint64_t MTFESkipTextContext::VisitWord(MTFESkipTextContext *this, MTFEWord *a2)
{
  if (*((void *)this + 2)) {
    uint64_t v4 = *((void *)this + 3) + 4 * a2->var21;
  }
  else {
    uint64_t v4 = 0;
  }
  MTFECommands::Visit((uint64_t)&a2->var18, (uint64_t)this);
  uint64_t v5 = *(void *)this;
  if (*((unsigned char *)this + 8)) {
    uint64_t result = (*(uint64_t (**)(MTFESkipTextContext *, MTFEWord *))(v5 + 104))(this, a2);
  }
  else {
    uint64_t result = (*(uint64_t (**)(MTFESkipTextContext *, MTFEWord *))(v5 + 112))(this, a2);
  }
  *((void *)this + 3) = v4;
  return result;
}

uint64_t MTFESkipToWord::VisitWord(MTFESkipToWord *this, MTFEWord *a2)
{
  unint64_t v2 = (MTFEWord *)*((void *)this + 4);
  if (v2 == a2)
  {
    unint64_t v2 = 0;
    *((void *)this + MEOWVectorBase::clear(this + 4) = 0;
  }
  *((unsigned char *)this + 8) = v2 != 0;
  return MTFESkipTextContext::VisitWord(this, a2);
}

float MTFESkipTextContext::VisitPhoneme(MTFESkipTextContext *this, MTFEPhoneme *a2)
{
  a2->float var13 = 1.0;
  unint64_t v2 = (_DWORD *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (float *)*((void *)this + 3);
    float result = *v3;
    _DWORD *v2 = *(_DWORD *)v3;
    *((void *)this + 2) = v2 + 1;
  }
  return result;
}

void MTFESkipTextContext::~MTFESkipTextContext(MTFESkipTextContext *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

void MTFESkipToWord::~MTFESkipToWord(MTFESkipToWord *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

void MTFESkipWordContext::~MTFESkipWordContext(MTFESkipWordContext *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

void PROWReader::PROWReader(PROWReader *this, const void *a2, BOOL a3)
{
  *(void *)this = a2;
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)((char *)this + 80), 2);
  uint64_t v5 = *(void *)this;
  *((void *)this + 1) = *(void *)this + bswap32(*(_DWORD *)(*(void *)this + 16));
  *((void *)this + 2) = v5 + bswap32(*(_DWORD *)(v5 + 20));
  *((void *)this + 3) = v5 + bswap32(*(_DWORD *)(v5 + 40));
  *((void *)this + MEOWVectorBase::clear(this + 4) = v5 + bswap32(*(_DWORD *)(v5 + 44));
  *((void *)this + 7) = v5 + bswap32(*(_DWORD *)(v5 + 60));
  *((_DWORD *)this + 10) = bswap32(*(_DWORD *)(v5 + 24));
  *((_DWORD *)this + 11) = bswap32(*(_DWORD *)(v5 + 28));
  *((_DWORD *)this + 12) = bswap32(*(_DWORD *)(v5 + 32) | 0x80);
  *((_DWORD *)this + 13) = bswap32(*(_DWORD *)(v5 + 36) | 0x80);
  uint64_t v7 = v5 + bswap32(*(_DWORD *)(v5 + 56));
  MEOWDecoder::CreateCodebookDecoder((MEOWDecoder *)0x100, *(unsigned __int8 *)(v5 + 14), (int)bswap32(*(unsigned __int16 *)(v5 + 2)) >> 16 < 165, a3, (BOOL)&v7, v6);
}

void sub_1DA4CD56C(_Unwind_Exception *a1)
{
  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

void PROWReader::~PROWReader(PROWReader *this)
{
  uint64_t v2 = *((void *)this + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  uint64_t v3 = *((void *)this + 9);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  MEOWVectorBase::~MEOWVectorBase((void **)this + 10);
}

void PROWReader::GetDemi(unsigned __int16 **a1, char a2, char a3, unsigned int a4, uint64_t a5)
{
  LOBYTE(v7) = a3;
  LOBYTE(v8) = a2;
  float v10 = a1 + 10;
  MEOWVectorBase::clear((void **)a1 + 10);
  *(unsigned char *)a5 = 0;
  uint64_t v11 = a1[a4 + 1];
  uint64_t v12 = *a1;
  int v13 = (__int16)(bswap32(**a1) >> 16);
  while (1)
  {
    uint64_t v14 = (unsigned int *)&v11[4 * v13 * (unint64_t)v8 + 4 * v7];
    unsigned int v16 = *v14;
    unsigned int v15 = v14[1];
    unsigned int v17 = bswap32(v16);
    if (v17 != 0xFFFF) {
      break;
    }
    *(unsigned char *)a5 = 1;
    unsigned int v8 = v15 >> 8;
    unsigned int v7 = HIBYTE(v15);
  }
  if (v17 == -1)
  {
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  else
  {
    if (a4) {
      unsigned __int8 v18 = v7;
    }
    else {
      unsigned __int8 v18 = v8;
    }
    if (PROWPhonEng::sVoiced[v18])
    {
      unsigned int v19 = *((unsigned __int16 *)v12 + 3);
      *(_DWORD *)(a5 + --*(_WORD *)(this + 24) = (v17 << v12[15]) + *((_DWORD *)a1 + a4 + 10);
      int64_t v20 = a1[a4 + 3];
      uint64_t v21 = bswap32(v15);
      unsigned int v22 = v20[v21];
      if (v22 == 0xFFFF)
      {
        uint64_t v27 = a1[12];
        uint64_t v26 = a1[10];
      }
      else
      {
        unsigned int v23 = bswap32(v19) >> 16;
        uint64_t v24 = &v20[v21 + 1];
        do
        {
          unsigned int v25 = v23 + (bswap32(v22) >> 16);
          MEOWVectorBase::Append(v10);
          uint64_t v26 = a1[10];
          uint64_t v27 = a1[12];
          v26[(void)v27 - 1] = v25;
          unsigned int v28 = *v24++;
          unsigned int v22 = v28;
        }
        while (v28 != 0xFFFF);
      }
    }
    else
    {
      *(_DWORD *)(a5 + --*(_WORD *)(this + 24) = (v17 << v12[15]) + *((_DWORD *)a1 + a4 + 12);
      unsigned int v29 = bswap32(v15);
      unsigned int v30 = (v29 + (bswap32(*((unsigned __int16 *)v12 + 2)) >> 16) * HIWORD(v29)) ^ 0x8000;
      MEOWVectorBase::Append(v10);
      uint64_t v26 = a1[10];
      uint64_t v27 = a1[12];
      v26[(void)v27 - 1] = v30;
    }
    *(void *)(a5 + 8) = v27;
    *(void *)(a5 + 16) = v26;
  }
}

uint64_t PROWReader::ReadSamples(PROWReader *this, unsigned int a2, uint64_t a3, __int16 *a4)
{
  return a3;
}

uint64_t PROWReader::NoSkipDup(PROWReader *this, unsigned int a2, unsigned int a3)
{
  if (a2 <= 0x2A)
  {
    uint64_t v4 = (unsigned __int8 *)(*((void *)this + 7) + 8 * a2 + 4 * a3);
    return (unsigned __int16)((v4[1] << 8) | (*v4 << 12) | (16 * v4[2]) | v4[3]);
  }
  else
  {
    return (unsigned __int16)-1;
  }
}

void MT3BPhraseProcessor::MT3BPhraseProcessor(uint64_t a1, uint64_t a2, long long *a3)
{
}

void sub_1DA4CD9B0(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  MEMORY[0x1E016FF00](v3, 0x10A1C4036524A53);
  MTBEPhraseProcessor::~MTBEPhraseProcessor(v1);
  _Unwind_Resume(a1);
}

void MT3BPhraseProcessor::InsertPlosiveReleases(MT3BPhraseProcessor *this, MTFESpeechElement *a2)
{
  int v3 = 0;
  v2[0] = &unk_1F347E860;
  MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v2, a2);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v2);
}

void sub_1DA4CDA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void MT3BPhraseProcessor::~MT3BPhraseProcessor(MT3BPhraseProcessor *this)
{
  MTBEPhraseProcessor::~MTBEPhraseProcessor(this);

  JUMPOUT(0x1E016FF00);
}

void MTMBCrossfader::Create(MTMBCrossfader *this)
{
}

uint64_t MTMBCrossfader::CrossfadePartial(MTMBCrossfader *this, uint64_t a2, uint64_t a3, uint64_t a4, const float *a5, const float *a6, const float *a7)
{
  int v7 = a4 - a3;
  if ((int)a4 - (int)a3 < 0) {
    int v7 = a3 - a4;
  }
  uint64_t v8 = (v7 + 1);
  int v9 = &a5[v8];
  if ((a7 <= a5 || v9 <= a7) && (a7 <= a6 || &a6[v8] <= a7)) {
    return (*(uint64_t (**)(MTMBCrossfader *, uint64_t, uint64_t))(*(void *)this + 16))(this, a2, a3);
  }
  else {
    return (*(uint64_t (**)(MTMBCrossfader *, uint64_t, uint64_t, uint64_t, uint64_t, const float *, const float *, const float *))(*(void *)this + 16))(this, a2, a4, a3, 0xFFFFFFFFLL, v9 - 1, &a6[v8 - 1], &a7[v8 - 1]);
  }
}

float MTMBLinearCrossfader::Fade(MTMBLinearCrossfader *this, int a2, int a3, int a4, int a5, const float *a6, const float *a7, float *a8)
{
  uint64_t v8 = 0;
  float v9 = 1.0 / (double)(a2 + 1);
  float result = (float)a3 * v9;
  if (a4 - a3 >= 0) {
    int v11 = a4 - a3;
  }
  else {
    int v11 = a3 - a4;
  }
  if (a4 < a3) {
    float v9 = -v9;
  }
  int v12 = v11 + 1;
  do
  {
    a8[v8] = (float)(result * a7[v8]) + (float)(a6[v8] * (float)(1.0 - result));
    float result = v9 + result;
    v8 += a5;
    --v12;
  }
  while (v12);
  return result;
}

float MTMBRaisedSineCrossfader::Fade(MTMBRaisedSineCrossfader *this, int a2, int a3, int a4, int a5, const float *a6, const float *a7, float *a8)
{
  uint64_t v8 = 0;
  float v9 = 129.0 / (float)(a2 + 1);
  float result = v9 * (float)a3;
  if (a4 < a3) {
    float v9 = -v9;
  }
  if (a4 - a3 >= 0) {
    int v11 = a4 - a3;
  }
  else {
    int v11 = a3 - a4;
  }
  int v12 = v11 + 1;
  do
  {
    float v13 = MTMBRaisedSineCrossfader::sCoeffs[result];
    a8[v8] = (float)(v13 * a7[v8]) + (float)(a6[v8] * (float)(1.0 - v13));
    float result = v9 + result;
    v8 += a5;
    --v12;
  }
  while (v12);
  return result;
}

MTMBCrossfader *MTMBCrossfade(uint64_t a1, const float *a2, const float *a3, const float *a4)
{
  float result = (MTMBCrossfader *)MTMBCrossfade::sXF;
  if (!MTMBCrossfade::sXF) {
    operator new();
  }
  if (a1)
  {
    return (MTMBCrossfader *)MTMBCrossfader::CrossfadePartial(result, a1, 1, a1, a2, a3, a4);
  }
  return result;
}

void MTMBRaisedSineCrossfader::~MTMBRaisedSineCrossfader(MTMBRaisedSineCrossfader *this)
{
}

void MTMBLinearCrossfader::~MTMBLinearCrossfader(MTMBLinearCrossfader *this)
{
}

void MEOWTriphoneSum(unint64_t *a1, unint64_t *a2, float *__Y, uint64_t a4)
{
  uint64_t v6 = a1[2];
  if (v6 < 1)
  {
    int v9 = 0;
  }
  else
  {
    int v9 = 0;
    unint64_t v10 = *a1;
    unint64_t v11 = *a2;
    unint64_t v12 = *a1;
    do
    {
      for (unint64_t i = *a2 + 60 * a2[2]; v11 < i; v11 += 60)
      {
        if (*(_DWORD *)(v12 + 56) <= *(_DWORD *)(v11 + 56)) {
          break;
        }
      }
      if (v11 == i) {
        break;
      }
      if (*(_DWORD *)(v12 + 56) == *(_DWORD *)(v11 + 56))
      {
        ++v9;
        cblas_saxpy(11, 1.0, (const float *)v12, 1, __Y, 1);
        cblas_saxpy(11, 1.0, (const float *)v11, 1, (float *)a4, 1);
        unint64_t v10 = *a1;
        uint64_t v6 = a1[2];
      }
      v12 += 60;
    }
    while (v12 < v10 + 60 * v6);
  }
  *((_DWORD *)__Y + 14) += v9;
  *(_DWORD *)(a4 + 56) += v9;
}

void MEOWSpectralCost::MEOWSpectralCost(MEOWSpectralCost *this, MEOWReader *a2)
{
  *(void *)this = a2;
  MEOWVectorBase::MEOWVectorBase((MEOWSpectralCost *)((char *)this + 8), 60, 0x1FA4uLL);
  bzero(*((void **)this + 1), 0x76A70uLL);
}

{
  *(void *)this = a2;
  MEOWVectorBase::MEOWVectorBase((MEOWSpectralCost *)((char *)this + 8), 60, 0x1FA4uLL);
  bzero(*((void **)this + 1), 0x76A70uLL);
}

void MEOWSpectralCost::~MEOWSpectralCost(void **this)
{
}

{
  MEOWVectorBase::~MEOWVectorBase(this + 1);
}

uint64_t MEOWSpectralCost::GetSpectralCookie(uint64_t *a1, int a2, unsigned int a3, int a4, unsigned int a5, _OWORD *a6)
{
  uint64_t v6 = a1[1] + 120 * (int)(9 * (a3 + 50 * sMEOWSpectralClass[a2]) + sMEOWSpectralClass[a4]);
  unsigned int v7 = *(_DWORD *)(v6 + 56);
  if (!v7)
  {
    uint64_t v24 = a6;
    unsigned int v25 = (unsigned int *)(v6 + 56);
    unsigned int v23 = a5;
    uint64_t v10 = 0;
    int v11 = sMEOWSpectralClass[a2];
    int v12 = sMEOWSpectralClass[a4];
    int v26 = v11;
    do
    {
      if (sMEOWSpectralClass[v10] == v11)
      {
        MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v29, 60);
        MEOWReader::GetDistanceCookies(*a1, v10, a3, 1, (MEOWVectorBase *)v29, 0);
        unint64_t v13 = 126 - 2 * __clz(v30);
        if (v30) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        std::__introsort<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *,false>((uint64_t)v29[0], (__n128 *)((char *)v29[0] + 60 * v30), (uint64_t)v27, v14, 1);
        for (uint64_t i = 0; i != 50; ++i)
        {
          if (sMEOWSpectralClass[i] == v12)
          {
            MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v27, 60);
            MEOWReader::GetDistanceCookies(*a1, a3, i, 0, (MEOWVectorBase *)v27, 0);
            unint64_t v16 = 126 - 2 * __clz(v28);
            if (v28) {
              uint64_t v17 = v16;
            }
            else {
              uint64_t v17 = 0;
            }
            std::__introsort<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *,false>((uint64_t)v27[0], (__n128 *)((char *)v27[0] + 60 * v28), (uint64_t)&v31, v17, 1);
            MEOWTriphoneSum((unint64_t *)v29, (unint64_t *)v27, (float *)v6, v6 + 60);
            MEOWVectorBase::~MEOWVectorBase(v27);
          }
        }
        MEOWVectorBase::~MEOWVectorBase(v29);
        int v11 = v26;
      }
      ++v10;
    }
    while (v10 != 50);
    if (!*v25)
    {
      uint64_t result = 0;
      *unsigned int v25 = -1;
      return result;
    }
    cblas_sscal(11, 1.0 / (float)*v25, (float *)v6, 1);
    cblas_sscal(11, 1.0 / (float)*v25, (float *)(v6 + 60), 1);
    unsigned int v7 = *v25 | 0x80000000;
    *unsigned int v25 = v7;
    *(_DWORD *)(v6 + 116) |= 0x80000000;
    a6 = v24;
    a5 = v23;
  }
  if (v7 == -1) {
    return 0;
  }
  unsigned __int8 v18 = (long long *)(v6 + 60 * a5);
  long long v19 = *v18;
  long long v20 = v18[1];
  long long v21 = v18[2];
  *(_OWORD *)((char *)a6 + 4MEOWVectorBase::clear(this + 4) = *(long long *)((char *)v18 + 44);
  a6[1] = v20;
  a6[2] = v21;
  *a6 = v19;
  return 1;
}

void sub_1DA4CE21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *,false>(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)((uint64_t)a2 - v11) >> 2);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (a2[-1].n128_u32[3] < *(_DWORD *)(v11 + 56))
          {
            *(_OWORD *)&v43[12] = *(_OWORD *)(v11 + 44);
            __n128 v40 = *(__n128 *)(v11 + 16);
            *(_OWORD *)uint64_t v43 = *(_OWORD *)(v11 + 32);
            long long v37 = *(_OWORD *)v11;
            long long v28 = *(long long *)((char *)&a2[-4] + 4);
            long long v29 = *(long long *)((char *)&a2[-3] + 4);
            long long v30 = *(long long *)((char *)&a2[-2] + 4);
            *(__n128 *)(v11 + 4MEOWVectorBase::clear(this + 4) = a2[-1];
            *(_OWORD *)(v11 + 16) = v29;
            *(_OWORD *)(v11 + 32) = v30;
            *(_OWORD *)unint64_t v11 = v28;
            *(__n128 *)((char *)&a2[-4] + MEOWVectorBase::clear(this + 4) = (__n128)v37;
            *(__n128 *)((char *)a2 - 4MEOWVectorBase::clear(this + 4) = v40;
            *(__n128 *)((char *)a2 - 28) = *(__n128 *)v43;
            a2[-1] = *(__n128 *)&v43[12];
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>((long long *)v11, (long long *)(v11 + 60), (long long *)&a2[-4].n128_u8[4]);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(v11, v11 + 60, v11 + 120, (long long *)&a2[-4].n128_u8[4]);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(v11, v11 + 60, v11 + 120, v11 + 180, (long long *)&a2[-4].n128_u8[4]);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 1439) {
      break;
    }
    if (v13 == 1)
    {
      if ((__n128 *)v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *,MEOWDistanceCookie *>(v11, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = (long long *)(v11 + 60 * (v15 >> 1));
    if ((unint64_t)v14 >= 0x1E01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>((long long *)v11, (long long *)(v11 + 60 * (v15 >> 1)), (long long *)&a2[-4].n128_u8[4]);
      uint64_t v18 = 60 * v16;
      long long v19 = (long long *)(60 * v16 + v11 - 60);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>((long long *)(v11 + 60), v19, (long long *)&a2[-8].n128_i8[8]);
      long long v20 = (long long *)(v11 + 120);
      long long v21 = (long long *)(v11 + 60 + v18);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(v20, v21, (long long *)((char *)&a2[-12].n128_f64[1] + 4));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(v19, v17, v21);
      *(_OWORD *)&v42[12] = *(_OWORD *)(a1 + 44);
      long long v39 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)uint64_t v42 = *(_OWORD *)(a1 + 32);
      long long v36 = *(_OWORD *)a1;
      long long v22 = *v17;
      long long v23 = v17[1];
      long long v24 = v17[2];
      *(_OWORD *)(a1 + 4MEOWVectorBase::clear(this + 4) = *(long long *)((char *)v17 + 44);
      *(_OWORD *)(a1 + 16) = v23;
      *(_OWORD *)(a1 + 32) = v24;
      *(_OWORD *)a1 = v22;
      *(long long *)((char *)v17 + 4MEOWVectorBase::clear(this + 4) = *(_OWORD *)&v42[12];
      v17[1] = v39;
      v17[2] = *(_OWORD *)v42;
      *uint64_t v17 = v36;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>((long long *)(v11 + 60 * (v15 >> 1)), (long long *)v11, (long long *)&a2[-4].n128_u8[4]);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (*(_DWORD *)(a1 - 4) >= *(_DWORD *)(a1 + 56))
    {
      unint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,MEOWDistanceCookie *,MEOWSortCookieByCutPoint &>(a1, a2);
      goto LABEL_18;
    }
LABEL_13:
    unint64_t v25 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,MEOWDistanceCookie *,MEOWSortCookieByCutPoint &>(a1, a2);
    if ((v26 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v27 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(a1, v25);
    unint64_t v11 = v25 + 60;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(v25 + 60, (uint64_t)a2))
    {
      a4 = -v13;
      a2 = (__n128 *)v25;
      if (v27) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v27)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *,false>(a1, v25, a3, -v13, a5 & 1);
      unint64_t v11 = v25 + 60;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(v11, (uint64_t)a2);
  }
  else if ((__n128 *)v11 != a2)
  {
    while ((__n128 *)(a1 + 60) != a2)
    {
      unsigned int v32 = *(_DWORD *)(a1 + 116);
      unsigned int v33 = *(_DWORD *)(a1 + 56);
      uint64_t v31 = a1 + 60;
      a1 += 60;
      if (v32 < v33)
      {
        uint64_t v45 = *(void *)(v31 + 48);
        long long v41 = *(_OWORD *)(v31 + 16);
        long long v44 = *(_OWORD *)(v31 + 32);
        long long v38 = *(_OWORD *)v31;
        do
        {
          long long v34 = *(_OWORD *)(v31 - 44);
          *(_OWORD *)uint64_t v31 = *(_OWORD *)(v31 - 60);
          *(_OWORD *)(v31 + 16) = v34;
          *(_OWORD *)(v31 + 32) = *(_OWORD *)(v31 - 28);
          *(_OWORD *)(v31 + 4MEOWVectorBase::clear(this + 4) = *(_OWORD *)(v31 - 16);
          unsigned int v35 = *(_DWORD *)(v31 - 64);
          v31 -= 60;
        }
        while (v32 < v35);
        *(void *)(v31 + 48) = v45;
        *(_OWORD *)(v31 + 16) = v41;
        *(_OWORD *)(v31 + 32) = v44;
        *(_OWORD *)uint64_t v31 = v38;
        *(_DWORD *)(v31 + 56) = v32;
      }
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 60;
    if (result + 60 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        unsigned int v5 = *(_DWORD *)(v4 + 116);
        unsigned int v6 = *(_DWORD *)(v4 + 56);
        uint64_t v4 = v2;
        if (v5 < v6)
        {
          long long v11 = *(_OWORD *)v2;
          long long v12 = *(_OWORD *)(v2 + 16);
          long long v13 = *(_OWORD *)(v2 + 32);
          uint64_t v14 = *(void *)(v2 + 48);
          uint64_t v7 = v3;
          while (1)
          {
            uint64_t v8 = result + v7;
            long long v9 = *(_OWORD *)(result + v7 + 16);
            *(_OWORD *)(v8 + 60) = *(_OWORD *)(result + v7);
            *(_OWORD *)(v8 + 76) = v9;
            *(_OWORD *)(v8 + 92) = *(_OWORD *)(result + v7 + 32);
            *(_OWORD *)(v8 + 10MEOWVectorBase::clear(this + 4) = *(_OWORD *)(result + v7 + 44);
            if (!v7) {
              break;
            }
            v7 -= 60;
            if (v5 >= *(_DWORD *)(v8 - 4))
            {
              uint64_t v10 = result + v7 + 60;
              goto LABEL_10;
            }
          }
          uint64_t v10 = result;
LABEL_10:
          *(_OWORD *)uint64_t v10 = v11;
          *(_OWORD *)(v10 + 16) = v12;
          *(_OWORD *)(v10 + 32) = v13;
          *(void *)(v10 + 48) = v14;
          *(_DWORD *)(v10 + 56) = v5;
        }
        uint64_t v2 = v4 + 60;
        v3 += 60;
      }
      while (v4 + 60 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(long long *a1, long long *a2, long long *a3)
{
  unsigned int v3 = *((_DWORD *)a2 + 14);
  unsigned int v4 = *((_DWORD *)a3 + 14);
  if (v3 < *((_DWORD *)a1 + 14))
  {
    if (v4 < v3)
    {
      *(_OWORD *)uint64_t v31 = a1[2];
      *(_OWORD *)&v31[12] = *(long long *)((char *)a1 + 44);
      long long v6 = *a1;
      long long v5 = a1[1];
      long long v8 = a3[1];
      long long v7 = a3[2];
      long long v9 = *a3;
      *(long long *)((char *)a1 + 4MEOWVectorBase::clear(this + 4) = *(long long *)((char *)a3 + 44);
      a1[1] = v8;
      a1[2] = v7;
      *a1 = v9;
      *a3 = v6;
      a3[1] = v5;
      a3[2] = *(_OWORD *)v31;
      *(long long *)((char *)a3 + 4MEOWVectorBase::clear(this + 4) = *(_OWORD *)&v31[12];
      return 1;
    }
    *(_OWORD *)long long v34 = a1[2];
    *(_OWORD *)&v34[12] = *(long long *)((char *)a1 + 44);
    long long v21 = *a1;
    long long v20 = a1[1];
    long long v23 = a2[1];
    long long v22 = a2[2];
    long long v24 = *a2;
    *(long long *)((char *)a1 + 4MEOWVectorBase::clear(this + 4) = *(long long *)((char *)a2 + 44);
    a1[1] = v23;
    a1[2] = v22;
    *a1 = v24;
    *a2 = v21;
    a2[1] = v20;
    a2[2] = *(_OWORD *)v34;
    *(long long *)((char *)a2 + 4MEOWVectorBase::clear(this + 4) = *(_OWORD *)&v34[12];
    if (*((_DWORD *)a3 + 14) >= *((_DWORD *)a2 + 14)) {
      return 1;
    }
    *(_OWORD *)unsigned int v35 = a2[2];
    *(_OWORD *)&v35[12] = *(long long *)((char *)a2 + 44);
    long long v26 = *a2;
    long long v25 = a2[1];
    long long v28 = a3[1];
    long long v27 = a3[2];
    long long v29 = *a3;
    *(long long *)((char *)a2 + 4MEOWVectorBase::clear(this + 4) = *(long long *)((char *)a3 + 44);
    a2[1] = v28;
    a2[2] = v27;
    *a2 = v29;
    *a3 = v26;
    a3[1] = v25;
    a3[2] = *(_OWORD *)v35;
    *(long long *)((char *)a3 + 4MEOWVectorBase::clear(this + 4) = *(_OWORD *)&v35[12];
    return 2;
  }
  if (v4 < v3)
  {
    *(_OWORD *)unsigned int v32 = a2[2];
    *(_OWORD *)&v32[12] = *(long long *)((char *)a2 + 44);
    long long v11 = *a2;
    long long v10 = a2[1];
    long long v13 = a3[1];
    long long v12 = a3[2];
    long long v14 = *a3;
    *(long long *)((char *)a2 + 4MEOWVectorBase::clear(this + 4) = *(long long *)((char *)a3 + 44);
    a2[1] = v13;
    a2[2] = v12;
    *a2 = v14;
    *a3 = v11;
    a3[1] = v10;
    a3[2] = *(_OWORD *)v32;
    *(long long *)((char *)a3 + 4MEOWVectorBase::clear(this + 4) = *(_OWORD *)&v32[12];
    if (*((_DWORD *)a2 + 14) >= *((_DWORD *)a1 + 14)) {
      return 1;
    }
    *(_OWORD *)unsigned int v33 = a1[2];
    *(_OWORD *)&v33[12] = *(long long *)((char *)a1 + 44);
    long long v16 = *a1;
    long long v15 = a1[1];
    long long v18 = a2[1];
    long long v17 = a2[2];
    long long v19 = *a2;
    *(long long *)((char *)a1 + 4MEOWVectorBase::clear(this + 4) = *(long long *)((char *)a2 + 44);
    a1[1] = v18;
    a1[2] = v17;
    *a1 = v19;
    *a2 = v16;
    a2[1] = v15;
    a2[2] = *(_OWORD *)v33;
    *(long long *)((char *)a2 + 4MEOWVectorBase::clear(this + 4) = *(_OWORD *)&v33[12];
    return 2;
  }
  return 0;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,MEOWDistanceCookie *,MEOWSortCookieByCutPoint &>(uint64_t a1, _OWORD *a2)
{
  long long v22 = *(_OWORD *)(a1 + 32);
  uint64_t v23 = *(void *)(a1 + 48);
  unsigned int v2 = *(_DWORD *)(a1 + 56);
  if (v2 >= *((_DWORD *)a2 - 1))
  {
    unint64_t v6 = a1 + 60;
    do
    {
      unint64_t v4 = v6;
      if (v6 >= (unint64_t)a2) {
        break;
      }
      unsigned int v7 = *(_DWORD *)(v6 + 56);
      v6 += 60;
    }
    while (v2 >= v7);
  }
  else
  {
    uint64_t v3 = a1;
    do
    {
      unint64_t v4 = v3 + 60;
      unsigned int v5 = *(_DWORD *)(v3 + 116);
      v3 += 60;
    }
    while (v2 >= v5);
  }
  if (v4 >= (unint64_t)a2)
  {
    long long v8 = a2;
  }
  else
  {
    do
    {
      long long v8 = (_OWORD *)((char *)a2 - 60);
      unsigned int v9 = *((_DWORD *)a2 - 1);
      a2 = (_OWORD *)((char *)a2 - 60);
    }
    while (v2 < v9);
  }
  while (v4 < (unint64_t)v8)
  {
    *(_OWORD *)&v26[12] = *(_OWORD *)(v4 + 44);
    long long v25 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)long long v26 = *(_OWORD *)(v4 + 32);
    long long v24 = *(_OWORD *)v4;
    long long v10 = *v8;
    long long v11 = v8[1];
    long long v12 = v8[2];
    *(_OWORD *)(v4 + 4MEOWVectorBase::clear(this + 4) = *(_OWORD *)((char *)v8 + 44);
    *(_OWORD *)(v4 + 16) = v11;
    *(_OWORD *)(v4 + 32) = v12;
    *(_OWORD *)unint64_t v4 = v10;
    *(_OWORD *)((char *)v8 + 4MEOWVectorBase::clear(this + 4) = *(_OWORD *)&v26[12];
    v8[1] = v25;
    v8[2] = *(_OWORD *)v26;
    *long long v8 = v24;
    do
    {
      unsigned int v13 = *(_DWORD *)(v4 + 116);
      v4 += 60;
    }
    while (v2 >= v13);
    do
    {
      unsigned int v14 = *((_DWORD *)v8 - 1);
      long long v8 = (_OWORD *)((char *)v8 - 60);
    }
    while (v2 < v14);
  }
  long long v15 = (long long *)(v4 - 60);
  if (v4 - 60 != a1)
  {
    long long v16 = *v15;
    long long v17 = *(_OWORD *)(v4 - 44);
    long long v18 = *(_OWORD *)(v4 - 28);
    *(_OWORD *)(a1 + 4MEOWVectorBase::clear(this + 4) = *(_OWORD *)(v4 - 16);
    *(_OWORD *)(a1 + 16) = v17;
    *(_OWORD *)(a1 + 32) = v18;
    *(_OWORD *)a1 = v16;
  }
  *(void *)(v4 - 12) = v23;
  *(_OWORD *)(v4 - 4MEOWVectorBase::clear(this + 4) = v21;
  *(_OWORD *)(v4 - 28) = v22;
  long long *v15 = v20;
  *(_DWORD *)(v4 - MEOWVectorBase::clear(this + 4) = v2;
  return v4;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,MEOWDistanceCookie *,MEOWSortCookieByCutPoint &>(uint64_t a1, _OWORD *a2)
{
  uint64_t v2 = 0;
  long long v24 = *(_OWORD *)(a1 + 32);
  uint64_t v25 = *(void *)(a1 + 48);
  unsigned int v3 = *(_DWORD *)(a1 + 56);
  do
  {
    unsigned int v4 = *(_DWORD *)(a1 + v2 + 116);
    v2 += 60;
  }
  while (v4 < v3);
  unint64_t v5 = a1 + v2;
  if (v2 == 60)
  {
    while (v5 < (unint64_t)a2)
    {
      unint64_t v6 = (_OWORD *)((char *)a2 - 60);
      unsigned int v8 = *((_DWORD *)a2 - 1);
      a2 = (_OWORD *)((char *)a2 - 60);
      if (v8 < v3) {
        goto LABEL_9;
      }
    }
    unint64_t v6 = a2;
  }
  else
  {
    do
    {
      unint64_t v6 = (_OWORD *)((char *)a2 - 60);
      unsigned int v7 = *((_DWORD *)a2 - 1);
      a2 = (_OWORD *)((char *)a2 - 60);
    }
    while (v7 >= v3);
  }
LABEL_9:
  unint64_t v9 = v5;
  if (v5 < (unint64_t)v6)
  {
    long long v10 = v6;
    do
    {
      long long v11 = *(_OWORD *)v9;
      long long v26 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)&v27[12] = *(_OWORD *)(v9 + 44);
      *(_OWORD *)long long v27 = *(_OWORD *)(v9 + 32);
      long long v12 = *(_OWORD *)((char *)v10 + 44);
      long long v13 = v10[2];
      long long v14 = *v10;
      *(_OWORD *)(v9 + 16) = v10[1];
      *(_OWORD *)(v9 + 32) = v13;
      *(_OWORD *)(v9 + 4MEOWVectorBase::clear(this + 4) = v12;
      *(_OWORD *)unint64_t v9 = v14;
      *(_OWORD *)((char *)v10 + 4MEOWVectorBase::clear(this + 4) = *(_OWORD *)&v27[12];
      v10[1] = v26;
      v10[2] = *(_OWORD *)v27;
      *long long v10 = v11;
      do
      {
        unsigned int v15 = *(_DWORD *)(v9 + 116);
        v9 += 60;
      }
      while (v15 < v3);
      do
      {
        unsigned int v16 = *((_DWORD *)v10 - 1);
        long long v10 = (_OWORD *)((char *)v10 - 60);
      }
      while (v16 >= v3);
    }
    while (v9 < (unint64_t)v10);
  }
  long long v17 = (long long *)(v9 - 60);
  if (v9 - 60 != a1)
  {
    long long v18 = *v17;
    long long v19 = *(_OWORD *)(v9 - 44);
    long long v20 = *(_OWORD *)(v9 - 28);
    *(_OWORD *)(a1 + 4MEOWVectorBase::clear(this + 4) = *(_OWORD *)(v9 - 16);
    *(_OWORD *)(a1 + 16) = v19;
    *(_OWORD *)(a1 + 32) = v20;
    *(_OWORD *)a1 = v18;
  }
  *(void *)(v9 - 12) = v25;
  *(_OWORD *)(v9 - 4MEOWVectorBase::clear(this + 4) = v23;
  *(_OWORD *)(v9 - 28) = v24;
  *long long v17 = v22;
  *(_DWORD *)(v9 - MEOWVectorBase::clear(this + 4) = v3;
  return v9 - 60;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xEEEEEEEEEEEEEEEFLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(a2 - 4) < *(_DWORD *)(a1 + 56))
      {
        *(_OWORD *)long long v21 = *(_OWORD *)(a1 + 32);
        *(_OWORD *)&v21[12] = *(_OWORD *)(a1 + 44);
        long long v7 = *(_OWORD *)a1;
        long long v6 = *(_OWORD *)(a1 + 16);
        long long v8 = *(_OWORD *)(a2 - 44);
        long long v9 = *(_OWORD *)(a2 - 28);
        long long v10 = *(_OWORD *)(a2 - 60);
        *(_OWORD *)(a1 + 4MEOWVectorBase::clear(this + 4) = *(_OWORD *)(a2 - 16);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 32) = v9;
        *(_OWORD *)a1 = v10;
        *(_OWORD *)(a2 - 60) = v7;
        *(_OWORD *)(a2 - 4MEOWVectorBase::clear(this + 4) = v6;
        *(_OWORD *)(a2 - 28) = *(_OWORD *)v21;
        *(_OWORD *)(a2 - 16) = *(_OWORD *)&v21[12];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>((long long *)a1, (long long *)(a1 + 60), (long long *)(a2 - 60));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(a1, a1 + 60, a1 + 120, (long long *)(a2 - 60));
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(a1, a1 + 60, a1 + 120, a1 + 180, (long long *)(a2 - 60));
      return 1;
    default:
      uint64_t v11 = a1 + 120;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>((long long *)a1, (long long *)(a1 + 60), (long long *)(a1 + 120));
      uint64_t v12 = a1 + 180;
      if (a1 + 180 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    unsigned int v15 = *(_DWORD *)(v12 + 56);
    if (v15 < *(_DWORD *)(v11 + 56))
    {
      long long v19 = *(_OWORD *)v12;
      long long v20 = *(_OWORD *)(v12 + 16);
      long long v22 = *(_OWORD *)(v12 + 32);
      uint64_t v23 = *(void *)(v12 + 48);
      uint64_t v16 = v13;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(_OWORD *)(v17 + 180) = *(_OWORD *)(a1 + v16 + 120);
        *(_OWORD *)(v17 + 196) = *(_OWORD *)(a1 + v16 + 136);
        *(_OWORD *)(v17 + 212) = *(_OWORD *)(a1 + v16 + 152);
        *(_OWORD *)(v17 + 2--*(_WORD *)(this + 24) = *(_OWORD *)(a1 + v16 + 164);
        if (v16 == -120) {
          break;
        }
        v16 -= 60;
        if (v15 >= *(_DWORD *)(v17 + 116))
        {
          uint64_t v18 = a1 + v16 + 180;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(_OWORD *)uint64_t v18 = v19;
      *(_OWORD *)(v18 + 16) = v20;
      *(_OWORD *)(v18 + 32) = v22;
      *(void *)(v18 + 48) = v23;
      *(_DWORD *)(v18 + 56) = v15;
      if (++v14 == 8) {
        return v12 + 60 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 60;
    v12 += 60;
    if (v12 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>((long long *)a1, (long long *)a2, (long long *)a3);
  if (*((_DWORD *)a4 + 14) < *(_DWORD *)(a3 + 56))
  {
    *(_OWORD *)long long v24 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)&v24[12] = *(_OWORD *)(a3 + 44);
    long long v10 = *(_OWORD *)a3;
    long long v9 = *(_OWORD *)(a3 + 16);
    long long v12 = a4[1];
    long long v11 = a4[2];
    long long v13 = *a4;
    *(_OWORD *)(a3 + 4MEOWVectorBase::clear(this + 4) = *(long long *)((char *)a4 + 44);
    *(_OWORD *)(a3 + 16) = v12;
    *(_OWORD *)(a3 + 32) = v11;
    *(_OWORD *)a3 = v13;
    *a4 = v10;
    a4[1] = v9;
    a4[2] = *(_OWORD *)v24;
    __n128 result = *(__n128 *)&v24[12];
    *(long long *)((char *)a4 + 4MEOWVectorBase::clear(this + 4) = *(_OWORD *)&v24[12];
    if (*(_DWORD *)(a3 + 56) < *(_DWORD *)(a2 + 56))
    {
      *(_OWORD *)uint64_t v25 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v25[12] = *(_OWORD *)(a2 + 44);
      long long v15 = *(_OWORD *)a2;
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v17 = *(_OWORD *)(a3 + 16);
      long long v16 = *(_OWORD *)(a3 + 32);
      long long v18 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 4MEOWVectorBase::clear(this + 4) = *(_OWORD *)(a3 + 44);
      *(_OWORD *)(a2 + 16) = v17;
      *(_OWORD *)(a2 + 32) = v16;
      *(_OWORD *)a2 = v18;
      *(_OWORD *)a3 = v15;
      *(_OWORD *)(a3 + 16) = v14;
      *(_OWORD *)(a3 + 32) = *(_OWORD *)v25;
      __n128 result = *(__n128 *)&v25[12];
      *(_OWORD *)(a3 + 4MEOWVectorBase::clear(this + 4) = *(_OWORD *)&v25[12];
      if (*(_DWORD *)(a2 + 56) < *(_DWORD *)(a1 + 56))
      {
        *(_OWORD *)long long v26 = *(_OWORD *)(a1 + 32);
        *(_OWORD *)&v26[12] = *(_OWORD *)(a1 + 44);
        long long v20 = *(_OWORD *)a1;
        long long v19 = *(_OWORD *)(a1 + 16);
        long long v22 = *(_OWORD *)(a2 + 16);
        long long v21 = *(_OWORD *)(a2 + 32);
        long long v23 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 4MEOWVectorBase::clear(this + 4) = *(_OWORD *)(a2 + 44);
        *(_OWORD *)(a1 + 16) = v22;
        *(_OWORD *)(a1 + 32) = v21;
        *(_OWORD *)a1 = v23;
        *(_OWORD *)a2 = v20;
        *(_OWORD *)(a2 + 16) = v19;
        *(_OWORD *)(a2 + 32) = *(_OWORD *)v26;
        __n128 result = *(__n128 *)&v26[12];
        *(_OWORD *)(a2 + 4MEOWVectorBase::clear(this + 4) = *(_OWORD *)&v26[12];
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(a1, a2, a3, (long long *)a4).n128_u64[0];
  if (*((_DWORD *)a5 + 14) < *(_DWORD *)(a4 + 56))
  {
    *(_OWORD *)uint64_t v31 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)&v31[12] = *(_OWORD *)(a4 + 44);
    long long v12 = *(_OWORD *)a4;
    long long v11 = *(_OWORD *)(a4 + 16);
    long long v14 = a5[1];
    long long v13 = a5[2];
    long long v15 = *a5;
    *(_OWORD *)(a4 + 4MEOWVectorBase::clear(this + 4) = *(long long *)((char *)a5 + 44);
    *(_OWORD *)(a4 + 16) = v14;
    *(_OWORD *)(a4 + 32) = v13;
    *(_OWORD *)a4 = v15;
    *a5 = v12;
    a5[1] = v11;
    a5[2] = *(_OWORD *)v31;
    __n128 result = *(__n128 *)&v31[12];
    *(long long *)((char *)a5 + 4MEOWVectorBase::clear(this + 4) = *(_OWORD *)&v31[12];
    if (*(_DWORD *)(a4 + 56) < *(_DWORD *)(a3 + 56))
    {
      *(_OWORD *)unsigned int v32 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)&v32[12] = *(_OWORD *)(a3 + 44);
      long long v17 = *(_OWORD *)a3;
      long long v16 = *(_OWORD *)(a3 + 16);
      long long v19 = *(_OWORD *)(a4 + 16);
      long long v18 = *(_OWORD *)(a4 + 32);
      long long v20 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 4MEOWVectorBase::clear(this + 4) = *(_OWORD *)(a4 + 44);
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 32) = v18;
      *(_OWORD *)a3 = v20;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 16) = v16;
      *(_OWORD *)(a4 + 32) = *(_OWORD *)v32;
      __n128 result = *(__n128 *)&v32[12];
      *(_OWORD *)(a4 + 4MEOWVectorBase::clear(this + 4) = *(_OWORD *)&v32[12];
      if (*(_DWORD *)(a3 + 56) < *(_DWORD *)(a2 + 56))
      {
        *(_OWORD *)unsigned int v33 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)&v33[12] = *(_OWORD *)(a2 + 44);
        long long v22 = *(_OWORD *)a2;
        long long v21 = *(_OWORD *)(a2 + 16);
        long long v24 = *(_OWORD *)(a3 + 16);
        long long v23 = *(_OWORD *)(a3 + 32);
        long long v25 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 4MEOWVectorBase::clear(this + 4) = *(_OWORD *)(a3 + 44);
        *(_OWORD *)(a2 + 16) = v24;
        *(_OWORD *)(a2 + 32) = v23;
        *(_OWORD *)a2 = v25;
        *(_OWORD *)a3 = v22;
        *(_OWORD *)(a3 + 16) = v21;
        *(_OWORD *)(a3 + 32) = *(_OWORD *)v33;
        __n128 result = *(__n128 *)&v33[12];
        *(_OWORD *)(a3 + 4MEOWVectorBase::clear(this + 4) = *(_OWORD *)&v33[12];
        if (*(_DWORD *)(a2 + 56) < *(_DWORD *)(a1 + 56))
        {
          *(_OWORD *)long long v34 = *(_OWORD *)(a1 + 32);
          *(_OWORD *)&v34[12] = *(_OWORD *)(a1 + 44);
          long long v27 = *(_OWORD *)a1;
          long long v26 = *(_OWORD *)(a1 + 16);
          long long v29 = *(_OWORD *)(a2 + 16);
          long long v28 = *(_OWORD *)(a2 + 32);
          long long v30 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 4MEOWVectorBase::clear(this + 4) = *(_OWORD *)(a2 + 44);
          *(_OWORD *)(a1 + 16) = v29;
          *(_OWORD *)(a1 + 32) = v28;
          *(_OWORD *)a1 = v30;
          *(_OWORD *)a2 = v27;
          *(_OWORD *)(a2 + 16) = v26;
          *(_OWORD *)(a2 + 32) = *(_OWORD *)v34;
          __n128 result = *(__n128 *)&v34[12];
          *(_OWORD *)(a2 + 4MEOWVectorBase::clear(this + 4) = *(_OWORD *)&v34[12];
        }
      }
    }
  }
  return result;
}

__n128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *,MEOWDistanceCookie *>(uint64_t a1, __n128 *a2, __n128 *a3, uint64_t a4)
{
  if ((__n128 *)a1 != a2)
  {
    long long v6 = a2;
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 60;
    if ((uint64_t)a2 - a1 >= 61)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      long long v12 = (__n128 *)(a1 + 60 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(a1, a4, v9, v12);
        long long v12 = (__n128 *)((char *)v12 - 60);
        --v11;
      }
      while (v11);
    }
    long long v13 = v6;
    if (v6 != a3)
    {
      long long v14 = v6;
      do
      {
        if (v14[3].n128_u32[2] < *(_DWORD *)(a1 + 56))
        {
          *(__n128 *)long long v39 = v14[2];
          *(__n128 *)&v39[12] = *(__n128 *)((char *)v14 + 44);
          __n128 v16 = *v14;
          __n128 v15 = v14[1];
          __n128 v18 = *(__n128 *)(a1 + 16);
          __n128 v17 = *(__n128 *)(a1 + 32);
          __n128 v19 = *(__n128 *)a1;
          *(__n128 *)((char *)v14 + 4MEOWVectorBase::clear(this + 4) = *(__n128 *)(a1 + 44);
          v14[1] = v18;
          void v14[2] = v17;
          *long long v14 = v19;
          *(__n128 *)a1 = v16;
          *(__n128 *)(a1 + 16) = v15;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)v39;
          *(_OWORD *)(a1 + 4MEOWVectorBase::clear(this + 4) = *(_OWORD *)&v39[12];
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(a1, a4, v9, (__n128 *)a1);
        }
        long long v14 = (__n128 *)((char *)v14 + 60);
      }
      while (v14 != a3);
      long long v13 = a3;
    }
    if (v8 >= 61)
    {
      int64_t v20 = v8 / 0x3CuLL;
      do
      {
        uint64_t v21 = 0;
        __n128 v37 = *(__n128 *)a1;
        __n128 v38 = *(__n128 *)(a1 + 16);
        *(_OWORD *)__n128 v40 = *(_OWORD *)(a1 + 32);
        *(_OWORD *)&v40[12] = *(_OWORD *)(a1 + 44);
        long long v22 = (_OWORD *)a1;
        do
        {
          uint64_t v23 = v21 + 1;
          long long v24 = (__n128 *)((char *)v22 + 60 * v21 + 60);
          uint64_t v25 = (2 * v21) | 1;
          uint64_t v26 = 2 * v21 + 2;
          if (v26 < v20)
          {
            unsigned int v27 = *((_DWORD *)v22 + 15 * v23 + 14);
            unsigned int v28 = v24[7].n128_u32[1];
            long long v24 = (__n128 *)((char *)v24 + 60 * (v27 < v28));
            if (v27 < v28) {
              uint64_t v25 = v26;
            }
          }
          __n128 v29 = *v24;
          __n128 v30 = v24[1];
          __n128 v31 = v24[2];
          *(__n128 *)((char *)v22 + 4MEOWVectorBase::clear(this + 4) = *(__n128 *)((char *)&v24[2] + 12);
          v22[1] = v30;
          v22[2] = v31;
          *long long v22 = v29;
          long long v22 = v24;
          uint64_t v21 = v25;
        }
        while (v25 <= (uint64_t)((unint64_t)(v20 - 2) >> 1));
        long long v6 = (__n128 *)((char *)v6 - 60);
        if (v24 == v6)
        {
          *(__n128 *)((char *)v24 + 4MEOWVectorBase::clear(this + 4) = *(__n128 *)&v40[12];
          v24[1] = v38;
          _OWORD v24[2] = *(__n128 *)v40;
          *long long v24 = v37;
        }
        else
        {
          __n128 v32 = *v6;
          __n128 v33 = v6[1];
          __n128 v34 = v6[2];
          *(__n128 *)((char *)v24 + 4MEOWVectorBase::clear(this + 4) = *(__n128 *)((char *)v6 + 44);
          v24[1] = v33;
          _OWORD v24[2] = v34;
          *long long v24 = v32;
          *long long v6 = v37;
          v6[1] = v38;
          v6[2] = *(__n128 *)v40;
          *(__n128 *)((char *)v6 + 4MEOWVectorBase::clear(this + 4) = *(__n128 *)&v40[12];
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(a1, (uint64_t)&v24[3].n128_i64[1] + 4, a4, 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)&v24[3].n128_i64[1] - a1 + 4) >> 2));
        }
      }
      while (v20-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xEEEEEEEEEEEEEEEFLL * (((uint64_t)a4 - a1) >> 2)))
    {
      int64_t v5 = (0xDDDDDDDDDDDDDDDELL * (((uint64_t)a4 - a1) >> 2)) | 1;
      long long v6 = (long long *)(a1 + 60 * v5);
      if ((uint64_t)(0xDDDDDDDDDDDDDDDELL * (((uint64_t)a4 - a1) >> 2) + 2) < a3)
      {
        unsigned int v7 = *(_DWORD *)(a1 + 60 * v5 + 56);
        unsigned int v8 = *((_DWORD *)v6 + 29);
        long long v6 = (long long *)((char *)v6 + 60 * (v7 < v8));
        if (v7 < v8) {
          int64_t v5 = 0xDDDDDDDDDDDDDDDELL * (((uint64_t)a4 - a1) >> 2) + 2;
        }
      }
      unsigned int v9 = a4[3].n128_u32[2];
      if (*((_DWORD *)v6 + 14) >= v9)
      {
        __n128 v19 = *a4;
        __n128 v20 = a4[1];
        __n128 v21 = a4[2];
        uint64_t v22 = a4[3].n128_i64[0];
        do
        {
          unint64_t v10 = a4;
          a4 = (__n128 *)v6;
          __n128 v11 = (__n128)*v6;
          long long v12 = v6[1];
          long long v13 = v6[2];
          *(__n128 *)((char *)&v10[2] + 12) = *(__n128 *)((char *)v6 + 44);
          v10[1] = (__n128)v12;
          v10[2] = (__n128)v13;
          *unint64_t v10 = v11;
          if (v4 < v5) {
            break;
          }
          uint64_t v14 = (2 * v5) | 1;
          long long v6 = (long long *)(a1 + 60 * v14);
          uint64_t v15 = 2 * v5 + 2;
          if (v15 < a3)
          {
            unsigned int v16 = *(_DWORD *)(a1 + 60 * v14 + 56);
            unsigned int v17 = *((_DWORD *)v6 + 29);
            long long v6 = (long long *)((char *)v6 + 60 * (v16 < v17));
            if (v16 < v17) {
              uint64_t v14 = v15;
            }
          }
          int64_t v5 = v14;
        }
        while (*((_DWORD *)v6 + 14) >= v9);
        __n128 result = v19;
        a4[3].n128_u64[0] = v22;
        a4[1] = v20;
        a4[2] = v21;
        *a4 = v19;
        a4[3].n128_u32[2] = v9;
      }
    }
  }
  return result;
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MEOWSortCookieByCutPoint &,MEOWDistanceCookie *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    unsigned int v6 = *(_DWORD *)(a1 + 60 * (v4 >> 1) + 56);
    unsigned int v7 = *(_DWORD *)(a2 - 4);
    if (v6 < v7)
    {
      unsigned int v8 = (long long *)(a2 - 60);
      long long v14 = *(_OWORD *)(a2 - 60);
      long long v15 = *(_OWORD *)(a2 - 44);
      __n128 v16 = *(__n128 *)(a2 - 28);
      uint64_t v17 = *(void *)(a2 - 12);
      do
      {
        unsigned int v9 = v8;
        unsigned int v8 = (long long *)(a1 + 60 * v5);
        long long v10 = *v8;
        long long v11 = v8[1];
        long long v12 = v8[2];
        *(_OWORD *)((char *)v9 + 4MEOWVectorBase::clear(this + 4) = *(long long *)((char *)v8 + 44);
        v9[1] = v11;
        v9[2] = v12;
        *unsigned int v9 = v10;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
      }
      while (*(_DWORD *)(a1 + 60 * v5 + 56) < v7);
      *unsigned int v8 = v14;
      v8[1] = v15;
      __n128 result = v16;
      v8[2] = (__int128)v16;
      *((void *)v8 + 6) = v17;
      *((_DWORD *)v8 + 1MEOWVectorBase::clear(this + 4) = v7;
    }
  }
  return result;
}

void MTBEPhraseMemo::MTBEPhraseMemo(MTBEPhraseMemo *this, const MTBEPhraseParam *a2)
{
  MTBEPersistentParam::MTBEPersistentParam((MTBEPersistentParam *)((char *)this + 8), *((const MTBEPersistentParam **)a2 + 5));
  uint64_t v4 = *((void *)a2 + 3);
  *((void *)this + 28) = &unk_1F347D270;
  long long v5 = *(_OWORD *)(v4 + 8);
  long long v6 = *(_OWORD *)(v4 + 24);
  long long v7 = *(_OWORD *)(v4 + 40);
  *((_DWORD *)this + 70) = *(_DWORD *)(v4 + 56);
  *(_OWORD *)((char *)this + 26MEOWVectorBase::clear(this + 4) = v7;
  *(_OWORD *)((char *)this + 248) = v6;
  *(_OWORD *)((char *)this + 232) = v5;
  v8[0] = &unk_1F3480570;
  *(void *)this = MTFEClone::Clone((MTFEClone *)v8, *((MTFESpeechElement **)a2 + 1));
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v8);
}

void sub_1DA4CF604(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)va);
  MTBENotifier::~MTBENotifier(v3);
  MTBEPersistentParam::~MTBEPersistentParam(v2);
  _Unwind_Resume(a1);
}

void MTBEPhraseMemo::~MTBEPhraseMemo(MTBEPhraseMemo *this)
{
  uint64_t v2 = *(void *)this;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  MTBENotifier::~MTBENotifier((MTBENotifier *)((char *)this + 224));
  MTBEPersistentParam::~MTBEPersistentParam((MTBEPersistentParam *)((char *)this + 8));
}

__n128 MTBEPhraseMemo::Thaw(MTBEPhraseMemo *this, MTBEPhraseParam *a2)
{
  *((void *)a2 + MEOWVectorBase::~MEOWVectorBase(this + 1) = *(void *)this;
  *(void *)this = 0;
  MTBEPersistentParam::operator=(*((void *)a2 + 5), (uint64_t)this + 8);
  uint64_t v4 = *((void *)a2 + 3);
  int v5 = *((_DWORD *)this + 70);
  __n128 result = *(__n128 *)((char *)this + 264);
  long long v7 = *(_OWORD *)((char *)this + 248);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)((char *)this + 232);
  *(_OWORD *)(v4 + --*(_WORD *)(this + 24) = v7;
  *(__n128 *)(v4 + 40) = result;
  *(_DWORD *)(v4 + 56) = v5;
  return result;
}

uint64_t MTFEClone::Clone(MTFEClone *this, MTFESpeechElement *a2)
{
  *((void *)this + MEOWVectorBase::~MEOWVectorBase(this + 1) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + MEOWVectorBase::clear(this + 4) = 0;
  ((void (*)(MTFESpeechElement *, MTFEClone *))*a2->var0)(a2, this);
  return *((void *)this + 3);
}

MTFESpeechElement *MTFEClone::PushRoot(MTFEClone *this, MTFESpeechElement *a2)
{
  if (!*((void *)this + 3)) {
    *((void *)this + 3) = a2;
  }
  MTFESpeechElement::CleanseClone(a2);
  __n128 result = (MTFESpeechElement *)*((void *)this + 1);
  if (result) {
    __n128 result = MTFESpeechElement::AddChildAfter(result, a2, result->var4);
  }
  *((void *)this + MEOWVectorBase::~MEOWVectorBase(this + 1) = a2;
  return result;
}

void MTFEClone::VisitSentence(MTFEClone *this, MTFESentence *a2)
{
}

void MTFEClone::VisitIntonationalPhrase(MTFEClone *this, MTFEIntonationalPhrase *a2)
{
}

void sub_1DA4CF9FC(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x1080C40ED847058);
  _Unwind_Resume(a1);
}

void MTFEClone::VisitIntermediatePhrase(MTFEClone *this, MTFEIntermediatePhrase *a2)
{
}

void MTFEClone::VisitWord(MTFEClone *this, MTFEWord *a2)
{
}

void MTFEClone::VisitHomograph(MTFEClone *this, MTFEHomograph *a2)
{
}

void MTFEClone::VisitSyllable(MTFEClone *this, MTFESyllable *a2)
{
}

void MTFEClone::VisitPhoneme(MTFEClone *this, MTFEPhoneme *a2)
{
}

void MTFEClone::VisitCommand(MTFEClone *this, MTFECommand *a2)
{
}

void MTFEClone::~MTFEClone(MTFEClone *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

void MT3BFloatSegmentProducer::MT3BFloatSegmentProducer(uint64_t a1, uint64_t a2, MT3BFloatSegmentProducer *this, __int16 *a4)
{
  *(void *)a1 = &unk_1F34805F8;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = this;
  *(void *)(a1 + --*(_WORD *)(this + 24) = a4;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 96) = -1;
  *(unsigned char *)(a1 + 100) = 0;
  float v5 = (float)a4[6];
  *(_WORD *)(a1 + 452) = 4096;
  *(float *)(a1 + 448) = v5 * 0.04;
  long long v6 = &MT3BFloatSegmentProducer::sHPNoise;
  if (a4[30] == 1) {
    long long v6 = &MT3BFloatSegmentProducer::sNoiseWave;
  }
  if (a4[30]) {
    long long v7 = v6;
  }
  else {
    long long v7 = &MT3BFloatSegmentProducer::sBandNoise;
  }
  *(void *)(a1 + 472) = v7;
  *(_WORD *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  int v8 = a4[8];
  if (v8 >= 801)
  {
    int v8 = MTBEParam::HzToPitch(this, a4[8]);
    this = *(MT3BFloatSegmentProducer **)(a1 + 16);
    a4 = *(__int16 **)(a1 + 24);
  }
  int v9 = MTBEParam::HzToPitch(this, a4[10]);
  int v10 = MTBEParam::HzToPitch(*(MTBEParam **)(a1 + 16), *(__int16 *)(*(void *)(a1 + 24) + 24));
  int v11 = MTBEParam::HzToPitch(*(MTBEParam **)(a1 + 16), 0x125Cu);
  long long v12 = (MT3BFloatSegmentProducer *)MTBEParam::HzToPitch(*(MTBEParam **)(a1 + 16), *(__int16 *)(*(void *)(a1 + 24) + 32));
  *(_WORD *)(a1 + 440) = (_WORD)v12;
  MT3BFloatSegmentProducer::CalcPoleCoefficients(v12, (float)v8, (float)*(__int16 *)(*(void *)(a1 + 24) + 18), (float *)(a1 + 324), (float *)(a1 + 328), (float *)(a1 + 332));
  MT3BFloatSegmentProducer::CalcPoleCoefficients(v13, (float)v9, (float)*(__int16 *)(*(void *)(a1 + 24) + 22), (float *)(a1 + 360), (float *)(a1 + 364), (float *)(a1 + 368));
  *(float *)(a1 + 360) = *(float *)(a1 + 360) * 0.4;
  MT3BFloatSegmentProducer::CalcPoleCoefficients(v14, (float)v10, (float)*(__int16 *)(*(void *)(a1 + 24) + 26), (float *)(a1 + 336), (float *)(a1 + 340), (float *)(a1 + 344));
  *(float *)(a1 + 336) = *(float *)(a1 + 336) * 0.4;
  MT3BFloatSegmentProducer::CalcPoleCoefficients(v15, (float)v11, (float)*(__int16 *)(*(void *)(a1 + 24) + 30), (float *)(a1 + 348), (float *)(a1 + 352), (float *)(a1 + 356));
  *(float *)(a1 + 348) = *(float *)(a1 + 348) * 0.4;
  MT3BFloatSegmentProducer::CalcPoleCoefficients(v16, (float)*(__int16 *)(a1 + 440), (float)*(__int16 *)(*(void *)(a1 + 24) + 36), (float *)(a1 + 384), (float *)(a1 + 388), (float *)(a1 + 392));
  *(_OWORD *)(a1 + 180) = 0u;
  *(void *)(a1 + 428) = 0;
  *(_OWORD *)(a1 + 196) = 0u;
  *(_OWORD *)(a1 + 212) = 0u;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 24MEOWVectorBase::clear(this + 4) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  *(float *)(a1 + 4--*(_WORD *)(this + 24) = *(float *)(a1 + 448) * 0.4;
  *(_DWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 46MEOWVectorBase::clear(this + 4) = 0;
  uint64_t v17 = *(void *)(a1 + 24);
  *(float *)(a1 + 44MEOWVectorBase::clear(this + 4) = (float)*(__int16 *)(v17 + 312) * 0.01;
  uint64_t v18 = *(__int16 *)(v17 + 310);
  *(void *)(a1 + 456) = v18;
  if (v18 > 100)
  {
    uint64_t v18 = 100;
LABEL_12:
    *(void *)(a1 + 456) = v18;
    goto LABEL_13;
  }
  if ((int)v18 <= 9)
  {
    uint64_t v18 = 10;
    goto LABEL_12;
  }
LABEL_13:
  *(void *)(a1 + 456) = (v18 << 16) / 100;
  *(_WORD *)(a1 + 480) = (2318 * ((v18 << 16) / 100)) >> 16;
  *(_WORD *)(a1 + 482) = (2909 * ((v18 << 16) / 100)) >> 16;
  *(_WORD *)(a1 + 48MEOWVectorBase::clear(this + 4) = (3723 * ((v18 << 16) / 100)) >> 16;
  unint64_t v19 = (unint64_t)((v18 << 16) / 100) >> 4;
  *(_WORD *)(a1 + 486) = v19;
  *(_WORD *)(a1 + 438) = v19;
  *(_WORD *)(a1 + 436) = 0;
  bzero((void *)(a1 + 496), 0x2000uLL);
}

void sub_1DA4D0244(_Unwind_Exception *a1)
{
  MTMBProducerComponent::~MTMBProducerComponent(v1);
  _Unwind_Resume(a1);
}

float MT3BFloatSegmentProducer::CalcPoleCoefficients(MT3BFloatSegmentProducer *this, float a2, float a3, float *a4, float *a5, float *a6)
{
  if (a3 > 1225.0) {
    a3 = 1225.0;
  }
  if (a3 < 50.0) {
    a3 = 50.0;
  }
  if (a2 < 256.0) {
    a2 = 256.0;
  }
  uint64_t v6 = (uint64_t)((unint64_t)(((int)a3 - 50) / 5) << 48) >> 46;
  *a6 = *(float *)((char *)&sCcoeffTbl + v6);
  float v7 = sCosTbl[(int)a2 - 256] * *(float *)((char *)&sBcoeffTbl + v6);
  *a5 = v7;
  float result = (float)(1.0 - v7) - *a6;
  *a4 = result;
  return result;
}

BOOL MT3BFloatSegmentProducer::NextSegment(MT3BFloatSegmentProducer *this, MTMBSegment *a2)
{
  int v4 = *((_DWORD *)this + 24);
  if ((v4 & 0x80000000) == 0)
  {
    if (!v4) {
      return v4 != 0;
    }
LABEL_5:
    int v9 = *((unsigned __int8 *)this + 42);
    int Frame = MTFEFrameFiller::FillNextFrame(*((MTFEFrameFiller **)this + 1), (const char *)this + 40);
    *((_DWORD *)this + --*(_WORD *)(this + 24) = Frame;
    if (!Frame || *((unsigned char *)this + 42))
    {
      *((_WORD *)this + 226) |= *((unsigned __int8 *)this + 100) << 7;
      *((unsigned char *)this + 100) = *(unsigned char *)(*((void *)this + 1) + 80);
    }
    if (v9)
    {
      uint64_t v6 = (_DWORD *)*((void *)this + 4);
      if (v6)
      {
        if ((*v6)-- == 1) {
          MEMORY[0x1E016FF00]();
        }
      }
      operator new();
    }
    MTMBSegment::Allocate(a2, 0);
  }
  int v4 = MTFEFrameFiller::FillNextFrame(*((MTFEFrameFiller **)this + 1), (const char *)this + 40);
  *((_DWORD *)this + --*(_WORD *)(this + 24) = v4;
  *((unsigned char *)this + 100) = *(unsigned char *)(*((void *)this + 1) + 80);
  if (v4) {
    goto LABEL_5;
  }
  return v4 != 0;
}

void sub_1DA4D1018(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10D0C4050FF3235);
  _Unwind_Resume(a1);
}

float MT3BFloatSegmentProducer::CalcZeroCoefficients(MT3BFloatSegmentProducer *this, float a2, float a3, float *a4, float *a5, float *a6)
{
  if (a3 > 1225.0) {
    a3 = 1225.0;
  }
  uint64_t v6 = (uint64_t)((unint64_t)(((int)a3 - 50) / 5) << 48) >> 46;
  *a6 = -*(float *)((char *)&sCcoeffTbl + v6);
  float v7 = -(float)(*(float *)((char *)&sBcoeffTbl + v6) * sCosTbl[(int)a2 - 256]);
  *a5 = v7;
  float result = (float)(v7 + 1.0) + *a6;
  *a4 = result;
  return result;
}

void MT3BFloatSegmentProducer::~MT3BFloatSegmentProducer(MT3BFloatSegmentProducer *this)
{
  MTMBProducerComponent::~MTMBProducerComponent(this);

  JUMPOUT(0x1E016FF00);
}

void MTMBModRateWsola::MTMBModRateWsola(MTMBModRateWsola *this)
{
  *(void *)this = &unk_1F3480668;
  *((_DWORD *)this + 5) = 0;
  uint64_t v2 = (MTMBModRateWsola *)((char *)this + 24);
  MEOWVectorBase::MEOWVectorBase((MTMBModRateWsola *)((char *)this + 24), 4);
  MEOWVectorBase::MEOWVectorBase((MTMBModRateWsola *)((char *)this + 56), 4);
  MEOWVectorBase::MEOWVectorBase((MTMBModRateWsola *)((char *)this + 88), 4);
  MEOWVectorBase::MEOWVectorBase((MTMBModRateWsola *)((char *)this + 120), 4);
  *((unsigned char *)this + 152) = 1;
  *((_DWORD *)this + 39) = 0;
  *((void *)this + MEOWVectorBase::~MEOWVectorBase(this + 1) = 0x1A000000058;
  *((_DWORD *)this + MEOWVectorBase::clear(this + 4) = 208;
  if (*((void *)this + 6) > 0xCFuLL)
  {
    unint64_t v3 = 416;
  }
  else
  {
    MEOWVectorBase::Allocate(v2, 0xD0uLL, 1);
    unint64_t v3 = *((unsigned int *)this + 3);
  }
  *((void *)this + 5) = 208;
  unint64_t v4 = v3;
  if (*((void *)this + 10) < v3)
  {
    MEOWVectorBase::Allocate((MTMBModRateWsola *)((char *)this + 56), v3, 1);
    unint64_t v4 = *((unsigned int *)this + 3);
  }
  *((void *)this + 9) = v3;
  unint64_t v5 = v4;
  if (*((void *)this + 18) < v4)
  {
    MEOWVectorBase::Allocate((MTMBModRateWsola *)((char *)this + 120), v4, 1);
    unint64_t v5 = *((unsigned int *)this + 3);
  }
  *((void *)this + 17) = v4;
  vDSP_Length v6 = v5;
  if (*((void *)this + 14) < v5)
  {
    MEOWVectorBase::Allocate((MTMBModRateWsola *)((char *)this + 88), v5, 1);
    vDSP_Length v6 = *((unsigned int *)this + 3);
  }
  *((void *)this + 13) = v5;
  vDSP_hann_window(*((float **)this + 11), v6, 0);
  (*(void (**)(MTMBModRateWsola *, float))(*(void *)this + 32))(this, 1.0);
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kModRateUseFFT)) {
    operator new();
  }
  operator new();
}

void sub_1DA4D1300(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v5, 0x1081C40EA7901CCLL);
  MEOWVectorBase::~MEOWVectorBase(v4);
  MEOWVectorBase::~MEOWVectorBase(v3);
  MEOWVectorBase::~MEOWVectorBase(v2);
  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

void MTMBModRateWsola::~MTMBModRateWsola(MTMBModRateWsola *this)
{
  *(void *)this = &unk_1F3480668;
  uint64_t v2 = *((void *)this + 22);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  MEOWVectorBase::~MEOWVectorBase((void **)this + 15);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 11);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 7);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 3);
}

{
  uint64_t vars8;

  MTMBModRateWsola::~MTMBModRateWsola(this);

  JUMPOUT(0x1E016FF00);
}

MTFESpeechElement *MTMBModRateWsola::SetScaleFactor(MTFESpeechElement *this, float a2)
{
  if (*((float *)&this[2].var6 + 1) != a2)
  {
    uint64_t v3 = (uint64_t)this;
    if ((LODWORD(a2) & 0x7FFFFFFFu) >= 0x7F800000)
    {
      this = MTBEAbort(0);
    }
    *(float *)(v3 + 156) = a2;
    *(_DWORD *)(v3 + 160) = (uint64_t)rintf((float)*(unsigned int *)(v3 + 16) / a2);
  }
  return this;
}

float MTMBModRateWsola::GetScaleFactor(MTMBModRateWsola *this)
{
  return *((float *)this + 39);
}

uint64_t MTMBModRateWsola::Reset(MTMBModRateWsola *this, float a2)
{
  *((unsigned char *)this + 152) = 1;
  *((_DWORD *)this + 5) = 0;
  uint64_t result = (*(uint64_t (**)(MTMBModRateWsola *, float))(*(void *)this + 32))(this, a2);
  *((_DWORD *)this + 4MEOWVectorBase::~MEOWVectorBase(this + 1) = 0;
  *((_DWORD *)this + 42) = 0;
  return result;
}

BOOL MTMBModRateWsola::HasEnoughData(MTMBModRateWsola *this, unsigned int a2)
{
  if (*((unsigned char *)this + 152))
  {
    uint64_t v2 = (char *)this + 12;
    int v3 = *((_DWORD *)this + 4);
  }
  else
  {
    int v3 = *((_DWORD *)this + 2) + *((_DWORD *)this + 5) + *((_DWORD *)this + 3);
    uint64_t v2 = (char *)this + 16;
  }
  return v3 + *(_DWORD *)v2 <= a2;
}

void MTMBModRateWsola::ModifyRate(uint64_t a1, MEOWVectorBase *this, MEOWVectorBase *a3, _DWORD *a4, int a5)
{
  *a4 = *((void *)this + 2);
  unint64_t v10 = *(unsigned int *)(a1 + 16);
  if (*((void *)a3 + 2) != v10)
  {
    if (*((void *)a3 + 3) < v10) {
      MEOWVectorBase::Allocate(a3, v10, 1);
    }
    *((void *)a3 + 2) = v10;
  }
  if (*(unsigned char *)(a1 + 152))
  {
    int v11 = 0;
    *(unsigned char *)(a1 + 152) = 0;
    *(_DWORD *)(a1 + 16MEOWVectorBase::clear(this + 4) = 0;
LABEL_8:
    int v12 = *((_DWORD *)this + 4) - v11;
    if (*(_DWORD *)(a1 + 16) < v12) {
      int v12 = *(_DWORD *)(a1 + 16);
    }
    unint64_t v13 = v12 & ~(v12 >> 31);
    if (v12 >= 1) {
      memcpy(*(void **)a3, (const void *)(*(void *)this + 4 * v11), 4 * v12);
    }
    if (*((void *)a3 + 3) < (unint64_t)v13) {
      MEOWVectorBase::Allocate(a3, v13, 1);
    }
    *((void *)a3 + 2) = v13;
    goto LABEL_15;
  }
  int v11 = *(_DWORD *)(a1 + 20);
  if (*(float *)(a1 + 156) == 1.0) {
    goto LABEL_8;
  }
  int v33 = *(_DWORD *)(a1 + 8);
  int v34 = *((_DWORD *)this + 4);
  unsigned int v35 = v34 - *(_DWORD *)(a1 + 12);
  if ((int)v35 >= v33 + v11) {
    uint64_t v36 = (v33 + v11);
  }
  else {
    uint64_t v36 = v35;
  }
  unsigned int v37 = v34 - v11;
  if (v34 >= v11)
  {
    uint64_t v38 = (v11 - v33) & ~((v11 - v33) >> 31);
    if ((int)v36 <= (int)v38)
    {
      unsigned int v42 = *(_DWORD *)(a1 + 16);
      if (v42 >= v37) {
        int v43 = v37;
      }
      else {
        int v43 = *(_DWORD *)(a1 + 16);
      }
      if (v43 >= 1)
      {
        memcpy(*(void **)(a1 + 120), (const void *)(*(void *)this + 4 * v11), 4 * v43);
        unsigned int v42 = *(_DWORD *)(a1 + 16);
      }
      BOOL v28 = __OFSUB__(v42, v43);
      int v44 = v42 - v43;
      if (!((v44 < 0) ^ v28 | (v44 == 0))) {
        bzero((void *)(*(void *)(a1 + 120) + 4 * v43), 4 * v44);
      }
      if ((MTBEDebugFlags::sMTXDebug & 0x20000) != 0) {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "WSOLA overlap-add %d %d\n", v11, *((void *)this + 2));
      }
      vDSP_Length __N = *(unsigned int *)(a1 + 16);
      unint64_t v46 = *(const float **)(a1 + 88);
      uint64_t v47 = &v46[__N];
      unint64_t v48 = *(const float **)(a1 + 24);
      uint64_t v49 = *(const float **)(a1 + 120);
    }
    else
    {
      int v39 = *(_DWORD *)(a1 + 164);
      int v40 = *(_DWORD *)(a1 + 172);
      if (v39 + (int)v38 > v40 || v39 + (int)v36 < v40)
      {
        int v11 = (*(uint64_t (**)(void, MEOWVectorBase *, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 176) + 16))(*(void *)(a1 + 176), this, a1 + 56, a1 + 88, v38, v36);
        uint64_t v50 = "highest correlation";
      }
      else
      {
        int v11 = v40 - v39;
        uint64_t v50 = "optimal";
      }
      if ((MTBEDebugFlags::sMTXDebug & 0x20000) != 0) {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "WSOLA found %s %d %d %d %d\n", v50, v11, *((void *)this + 2), v38, v36);
      }
      vDSP_Length __N = *(unsigned int *)(a1 + 16);
      unint64_t v46 = *(const float **)(a1 + 88);
      uint64_t v47 = &v46[__N];
      unint64_t v48 = *(const float **)(a1 + 24);
      uint64_t v49 = (const float *)(*(void *)this + 4 * v11);
    }
    vDSP_vmma(v47, 1, v48, 1, v46, 1, v49, 1, *(float **)a3, 1, __N);
  }
  else
  {
    if ((MTBEDebugFlags::sMTXDebug & 0x20000) != 0) {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "WSOLA no data %d %d\n", *(_DWORD *)(a1 + 20), v34);
    }
    memcpy(*(void **)a3, *(const void **)(a1 + 24), 4 * *(unsigned int *)(a1 + 16));
  }
LABEL_15:
  if ((MTBEDebugFlags::sMTXDebug & 0x20000) != 0)
  {
    float v14 = (double)(*(_DWORD *)(a1 + 164) + v11) / 22050.0;
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "%d %d [%f,%f]\n", v11, *(_DWORD *)(a1 + 164), v14, v14 + 0.02);
  }
  int v15 = *(_DWORD *)(a1 + 16);
  if (a5)
  {
    unint64_t v16 = (v15 + v11);
    unint64_t v17 = *((void *)this + 2);
    if (v17 > v16) {
      MEOWVectorBase::Append(a3, (const void *)(*(void *)this + 4 * v16), (uint64_t)(*(void *)this + 4 * v17 - (*(void *)this + 4 * v16)) >> 2);
    }
    MEOWVectorBase::clear((void **)this);
    if ((MTBEDebugFlags::sMTXDebug & 0x20000) != 0) {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "last segment [%f,%f]\n", (double)(*(_DWORD *)(a1 + 16) + v11 + *(_DWORD *)(a1 + 164)) / 22050.0, (double)(unint64_t)(*((void *)this + 2) + *(int *)(a1 + 164)) / 22050.0);
    }
    (*(void (**)(uint64_t, float))(*(void *)a1 + 48))(a1, *(float *)(a1 + 156));
    uint64_t v18 = *(void **)(a1 + 24);
    size_t v19 = 4 * *(unsigned int *)(a1 + 16);
    bzero(v18, v19);
  }
  else
  {
    int v20 = *((_DWORD *)this + 4) - (v15 + v11);
    if (v20 >= v15) {
      int v20 = *(_DWORD *)(a1 + 16);
    }
    int v21 = v20 & ~(v20 >> 31);
    if (v20 >= 1)
    {
      memcpy(*(void **)(a1 + 24), (const void *)(*(void *)this + 4 * (v15 + v11)), 4 * v20);
      int v15 = *(_DWORD *)(a1 + 16);
    }
    if (v15 > v21)
    {
      bzero((void *)(*(void *)(a1 + 24) + 4 * v21), 4 * (v15 - v21));
      int v15 = *(_DWORD *)(a1 + 16);
    }
    int v22 = v15 + v11;
    *(_DWORD *)(a1 + 172) = v22 + *(_DWORD *)(a1 + 164);
    unsigned int v23 = *(_DWORD *)(a1 + 12);
    unsigned int v24 = *((_DWORD *)this + 4) - v22;
    if ((int)v24 >= (int)v23) {
      vDSP_Length v25 = v23;
    }
    else {
      vDSP_Length v25 = v24;
    }
    unsigned int v26 = v25 & ~((int)v25 >> 31);
    if ((int)v25 >= 1)
    {
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 176) + 24))(*(void *)(a1 + 176))) {
        vDSP_vmul(*(const float **)(a1 + 88), 1, (const float *)(*(void *)this + 4 * (*(_DWORD *)(a1 + 16) + v11)), 1, *(float **)(a1 + 56), 1, v25);
      }
      else {
        memcpy(*(void **)(a1 + 56), (const void *)(*(void *)this + 4 * (*(_DWORD *)(a1 + 16) + v11)), 4 * v25);
      }
    }
    int v27 = *(_DWORD *)(a1 + 12);
    BOOL v28 = __OFSUB__(v27, v26);
    int v29 = v27 - v26;
    if (!((v29 < 0) ^ v28 | (v29 == 0))) {
      bzero((void *)(*(void *)(a1 + 56) + 4 * v26), 4 * v29);
    }
    int v30 = *(_DWORD *)(a1 + 160) + *(_DWORD *)(a1 + 20);
    int v31 = v30 - *(_DWORD *)(a1 + 8);
    a4[1] = v31;
    if (v31 < 0)
    {
      *(_DWORD *)(a1 + 20) = v30;
    }
    else
    {
      uint64_t v32 = *((void *)this + 2);
      if (v31 >= (int)v32)
      {
        *(_DWORD *)(a1 + 20) = v30 - v32;
        *(_DWORD *)(a1 + 164) += v32;
        MEOWVectorBase::clear((void **)this);
      }
      else
      {
        MEOWVector<float>::MEOWVector((MEOWVectorBase *)v51, (const void *)(*(void *)this + 4 * v31), *(void *)this + 4 * v32);
        MEOWVector<float>::operator=((uint64_t *)this, (const MEOWVectorBase *)v51);
        *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 164) += v31;
        MEOWVectorBase::~MEOWVectorBase(v51);
      }
    }
    ++*(_DWORD *)(a1 + 168);
  }
}

void sub_1DA4D1B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  _Unwind_Resume(a1);
}

void MEOWVector<float>::operator=(uint64_t *a1, const MEOWVectorBase *a2)
{
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v3, a2);
  MEOWVectorBase::Swap(a1, (MEOWVectorBase *)v3);
  MEOWVectorBase::~MEOWVectorBase(v3);
}

void sub_1DA4D1BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void CorrelationFFT::CorrelationFFT(CorrelationFFT *this, int a2, int a3)
{
  *(void *)this = &unk_1F34806B0;
  vDSP_Length v6 = (CorrelationFFT *)((char *)this + 8);
  MEOWVectorBase::MEOWVectorBase((CorrelationFFT *)((char *)this + 8), 4);
  *((_DWORD *)this + 28) = a3;
  *((_DWORD *)this + 29) = a2;
  unint64_t v7 = vcvtps_u32_f32(log2f((float)(2 * (a3 + a2) - 2)));
  *((void *)this + 12) = v7;
  unint64_t v8 = (1 << v7);
  *((_DWORD *)this + --*(_WORD *)(this + 26) = v8;
  *((_DWORD *)this + 27) = v8 >> 1;
  if (*((void *)this + 4) < v8) {
    MEOWVectorBase::Allocate(v6, v8, 1);
  }
  *((void *)this + 3) = v8;
  operator new[]();
}

void sub_1DA4D1D80(_Unwind_Exception *a1)
{
  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

void CorrelationFFT::allocComplexSplit(CorrelationFFT *this, DSPSplitComplex *a2)
{
}

void CorrelationFFT::~CorrelationFFT(CorrelationFFT *this)
{
  *(void *)this = &unk_1F34806B0;
  uint64_t v2 = CorrelationFFT::deallocComplexSplit(this, (DSPSplitComplex *)((char *)this + 40));
  int v3 = CorrelationFFT::deallocComplexSplit((CorrelationFFT *)v2, (DSPSplitComplex *)((char *)this + 56));
  CorrelationFFT::deallocComplexSplit((CorrelationFFT *)v3, (DSPSplitComplex *)((char *)this + 72));
  vDSP_destroy_fftsetup(*((FFTSetup *)this + 11));
  MEOWVectorBase::~MEOWVectorBase((void **)this + 1);
}

{
  uint64_t vars8;

  CorrelationFFT::~CorrelationFFT(this);

  JUMPOUT(0x1E016FF00);
}

float *CorrelationFFT::deallocComplexSplit(CorrelationFFT *this, DSPSplitComplex *a2)
{
  if (a2->realp) {
    MEMORY[0x1E016FEE0](a2->realp, 0x1000C8052888210);
  }
  uint64_t result = a2->imagp;
  if (result)
  {
    JUMPOUT(0x1E016FEE0);
  }
  return result;
}

uint64_t CorrelationFFT::FindBestCorrelationIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v11 = (const DSPSplitComplex *)(a1 + 40);
  size_t v12 = 4 * *(int *)(a1 + 108);
  bzero(*(void **)(a1 + 40), v12);
  bzero(*(void **)(a1 + 48), v12);
  size_t v13 = 4 * *(int *)(a1 + 108);
  bzero(*(void **)(a1 + 56), v13);
  bzero(*(void **)(a1 + 64), v13);
  signed int v14 = (a6 - a5 + *(_DWORD *)(a1 + 116)) & 0xFFFFFFFE;
  if ((int)((*(_DWORD *)(a2 + 16) - a5 - (*(_DWORD *)(a1 + 116) >> 1)) & 0xFFFFFFFE) >= v14) {
    signed int v15 = (a6 - a5 + *(_DWORD *)(a1 + 116)) & 0xFFFFFFFE;
  }
  else {
    signed int v15 = (*(_DWORD *)(a2 + 16) - a5 - (*(_DWORD *)(a1 + 116) >> 1)) & 0xFFFFFFFE;
  }
  int v16 = *(_DWORD *)(a3 + 16);
  vDSP_ctoz((const DSPComplex *)(*(void *)a2 + 4 * a5), 2, v11, 1, (uint64_t)v14 >> 1);
  vDSP_ctoz(*(const DSPComplex **)a3, 2, (const DSPSplitComplex *)(a1 + 56), 1, (uint64_t)v16 >> 1);
  vDSP_fft_zrip(*(FFTSetup *)(a1 + 88), v11, 1, *(void *)(a1 + 96), 1);
  vDSP_fft_zrip(*(FFTSetup *)(a1 + 88), (const DSPSplitComplex *)(a1 + 56), 1, *(void *)(a1 + 96), 1);
  vDSP_zvcmul((const DSPSplitComplex *)(a1 + 56), 1, v11, 1, (const DSPSplitComplex *)(a1 + 72), 1, *(unsigned int *)(a1 + 108));
  vDSP_fft_zrip(*(FFTSetup *)(a1 + 88), (const DSPSplitComplex *)(a1 + 72), 1, *(void *)(a1 + 96), -1);
  bzero(*(void **)(a1 + 8), 4 * *(void *)(a1 + 24));
  vDSP_ztoc((const DSPSplitComplex *)(a1 + 72), 1, *(DSPComplex **)(a1 + 8), 2, *(unsigned int *)(a1 + 108));
  float __C = 0.0;
  vDSP_Length v18 = 0;
  vDSP_maxvi(*(const float **)(a1 + 8), 1, &__C, &v18, v15);
  return (v18 + a5);
}

void CorrelationFFT::zeroFillComplexSplit(CorrelationFFT *this, DSPSplitComplex *a2, int a3)
{
  size_t v4 = 4 * a3;
  bzero(a2->realp, v4);
  imagp = a2->imagp;

  bzero(imagp, v4);
}

void CorrelationTimeDomain::CorrelationTimeDomain(CorrelationTimeDomain *this, unsigned int a2)
{
  *(void *)this = &unk_1F34806E0;
  size_t v4 = (CorrelationTimeDomain *)((char *)this + 8);
  MEOWVectorBase::MEOWVectorBase((CorrelationTimeDomain *)((char *)this + 8), 4);
  *((_DWORD *)this + 10) = a2;
  if (*((void *)this + 4) < (unint64_t)a2) {
    MEOWVectorBase::Allocate(v4, a2, 1);
  }
  *((void *)this + 3) = a2;
}

void sub_1DA4D2188(_Unwind_Exception *a1)
{
  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CorrelationTimeDomain::FindBestCorrelationIndex(uint64_t a1, void *a2, const float **a3, uint64_t a4, unsigned int a5, int a6)
{
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)__dst, 4, *(unsigned int *)(a4 + 16));
  uint64_t v12 = 0;
  float __C = 0.0;
  if ((int)a5 <= a6)
  {
    LODWORD(v12) = 0;
    int v13 = a6 + 1;
    uint64_t v14 = 4 * (int)a5;
    float v15 = 3.4028e38;
    do
    {
      memcpy(__dst[0], (const void *)(*a2 + v14), 4 * *(unsigned int *)(a1 + 40));
      vDSP_vmsb(*(const float **)a4, 1, (const float *)__dst[0], 1, *a3, 1, *(float **)(a1 + 8), 1, *(unsigned int *)(a1 + 40));
      vDSP_svemg(*(const float **)(a1 + 8), 1, &__C, *(unsigned int *)(a1 + 40));
      if (__C > v15)
      {
        uint64_t v12 = v12;
      }
      else
      {
        float v15 = __C;
        uint64_t v12 = a5;
      }
      v14 += 4;
      ++a5;
    }
    while (v13 != a5);
  }
  MEOWVectorBase::~MEOWVectorBase(__dst);
  return v12;
}

void sub_1DA4D22B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  _Unwind_Resume(a1);
}

void MTMBModRate::CreateConcreteModifier(MTMBModRate *this)
{
}

void sub_1DA4D230C(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C40A4BB592CLL);
  _Unwind_Resume(a1);
}

void CorrelationTimeDomain::~CorrelationTimeDomain(void **this)
{
  *this = &unk_1F34806E0;
  MEOWVectorBase::~MEOWVectorBase(this + 1);
}

{
  uint64_t vars8;

  *this = &unk_1F34806E0;
  MEOWVectorBase::~MEOWVectorBase(this + 1);

  JUMPOUT(0x1E016FF00);
}

uint64_t CorrelationTimeDomain::ShouldApplyAnalysisWindowToReference(CorrelationTimeDomain *this)
{
  return 1;
}

uint64_t CorrelationFFT::ShouldApplyAnalysisWindowToReference(CorrelationFFT *this)
{
  return 0;
}

MEOWVectorBase *MEOWVector<float>::MEOWVector(MEOWVectorBase *a1, const void *a2, uint64_t a3)
{
  MEOWVectorBase::MEOWVectorBase(a1, 4);
  MEOWVectorBase::Append(v6, a2, (a3 - (uint64_t)a2) >> 2);
  return a1;
}

void sub_1DA4D2434(_Unwind_Exception *a1)
{
  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

uint64_t MTMBPitchInterpolatorBase::SetEstimatedLength(uint64_t this, float a2)
{
  float v2 = *(float *)(this + 8) * (float)(*(float *)(this + 12) / a2);
  if (v2 > 4.0) {
    float v2 = 4.0;
  }
  *(float *)(this + 8) = v2;
  *(float *)(this + 12) = a2;
  return this;
}

void MTMBModelPitchInterpolator::MTMBModelPitchInterpolator(MTMBModelPitchInterpolator *this, const float *a2, int a3)
{
  *((_DWORD *)this + 2) = 1065353216;
  *((float *)this + 3) = (float)a3 * 110.25;
  *(void *)this = &unk_1F34807C0;
  *((void *)this + 2) = a2;
  *((_DWORD *)this + 6) = a3;
}

{
  *((_DWORD *)this + 2) = 1065353216;
  *((float *)this + 3) = (float)a3 * 110.25;
  *(void *)this = &unk_1F34807C0;
  *((void *)this + 2) = a2;
  *((_DWORD *)this + 6) = a3;
}

uint64_t MTMBModelPitchInterpolator::PeriodLenAtSample(MTMBModelPitchInterpolator *this, float a2, float a3)
{
  float v3 = (float)(*((float *)this + 2) * a2) * 0.0090703;
  uint64_t v4 = *((int *)this + 6) - 1;
  if (v3 >= (float)(int)v4)
  {
    float v6 = *(float *)(*((void *)this + 2) + 4 * v4);
  }
  else
  {
    uint64_t v5 = (float *)(*((void *)this + 2) + 4 * (int)vcvtms_s32_f32(v3));
    float v6 = *v5 + (float)((float)(v5[1] - *v5) * (float)(v3 - floorf(v3)));
  }
  int v7 = (int)(float)(22050.0 / v6);
  if (v7 >= 512) {
    return 512;
  }
  else {
    return v7;
  }
}

void MTMBSlackPitchInterpolator::MTMBSlackPitchInterpolator(MTMBSlackPitchInterpolator *this, const float *a2, int a3)
{
  *((_DWORD *)this + 2) = 1065353216;
  *((float *)this + 3) = (float)a3 * 110.25;
  *((void *)this + 2) = a2;
  *((_DWORD *)this + 6) = a3;
  *(void *)this = &unk_1F3480808;
  char v6 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBUseSlackWindow);
  if (kMTMBPitchSlack)
  {
    MTBEDebugParams::GetParam((const __CFString *)kMTMBPitchSlack, (const __CFString *)&dword_1EA8DA5D8, v5, *(float *)&dword_1EA8DA5D8);
    kMTMBPitchSlacuint64_t k = 0;
  }
  MEOWUnitCostWindow::MEOWUnitCostWindow((MTMBSlackPitchInterpolator *)((char *)this + 32), a3, v6, *(float *)&dword_1EA8DA5D8 / 100.0);
}

uint64_t MTMBSlackPitchInterpolator::PeriodLenAtSample(MTMBSlackPitchInterpolator *this, float a2, float a3)
{
  float v3 = (float)(*((float *)this + 2) * a2) * 0.0090703;
  uint64_t v4 = *((int *)this + 6) - 1;
  if (v3 >= (float)(int)v4)
  {
    float v5 = *(float *)(*((void *)this + 2) + 4 * v4);
  }
  else
  {
    uint64_t v4 = (int)vcvtms_s32_f32(v3);
    float v5 = *(float *)(*((void *)this + 2) + 4 * v4)
       + (float)((float)(*(float *)(*((void *)this + 2) + 4 * v4 + 4) - *(float *)(*((void *)this + 2) + 4 * v4))
               * (float)(v3 - floorf(v3)));
  }
  float v6 = *(float *)(*((void *)this + 4) + 4 * v4);
  int v7 = (int)(float)((float)((float)(1.0 - v6) * a3) + (float)((float)(int)(float)(22050.0 / v5) * v6));
  if (v7 >= 512) {
    return 512;
  }
  else {
    return v7;
  }
}

void MTMBLinearPitchInterpolator::MTMBLinearPitchInterpolator(MTMBLinearPitchInterpolator *this, int a2, float a3, float a4)
{
  *((_DWORD *)this + 2) = 1065353216;
  float v4 = (float)a2 * 110.25;
  *((float *)this + 3) = v4;
  *((float *)this + MEOWVectorBase::clear(this + 4) = a3;
  *(void *)this = &unk_1F3480850;
  if (a2) {
    float v5 = (float)(a4 - a3) / v4;
  }
  else {
    float v5 = 1.0;
  }
  *((float *)this + 5) = v5;
}

{
  float v4;
  float v5;

  *((_DWORD *)this + 2) = 1065353216;
  float v4 = (float)a2 * 110.25;
  *((float *)this + 3) = v4;
  *((float *)this + MEOWVectorBase::clear(this + 4) = a3;
  *(void *)this = &unk_1F3480850;
  if (a2) {
    float v5 = (float)(a4 - a3) / v4;
  }
  else {
    float v5 = 1.0;
  }
  *((float *)this + 5) = v5;
}

uint64_t MTMBLinearPitchInterpolator::PeriodLenAtSample(MTMBLinearPitchInterpolator *this, float a2, float a3)
{
  int v3 = (int)(float)((float)(*((float *)this + 4) + (float)((float)(*((float *)this + 2) * a2) * *((float *)this + 5)))
                  * a3);
  if (v3 >= 512) {
    return 512;
  }
  else {
    return v3;
  }
}

void MTMBSawtoothPitchInterpolator::MTMBSawtoothPitchInterpolator(MTMBSawtoothPitchInterpolator *this, int a2, int a3, float a4, float a5, float a6, float a7)
{
  *((_DWORD *)this + 2) = 1065353216;
  *((float *)this + 3) = (float)(a3 + a2) * 110.25;
  *(void *)this = &unk_1F3480898;
  *((_DWORD *)this + 6) = 1065353216;
  float v7 = (float)a2 * 110.25;
  *((float *)this + 7) = v7;
  *((float *)this + 8) = a4;
  *((void *)this + 2) = &unk_1F3480850;
  float v8 = 1.0;
  float v9 = 1.0;
  if (a2) {
    float v9 = (float)(a5 - a4) / v7;
  }
  *((float *)this + 9) = v9;
  *((_DWORD *)this + 12) = 1065353216;
  float v10 = (float)a3 * 110.25;
  *((float *)this + 13) = v10;
  *((float *)this + 1MEOWVectorBase::clear(this + 4) = a6;
  *((void *)this + 5) = &unk_1F3480850;
  if (a3) {
    float v8 = (float)(a7 - a6) / v10;
  }
  *((float *)this + 15) = v8;
  *((float *)this + 16) = v7;
  *((unsigned char *)this + 68) = 0;
}

float *MTMBSawtoothPitchInterpolator::SetEstimatedFirstLength(float *this, float a2)
{
  this[16] = a2;
  float v2 = this[6] * (float)(this[7] / a2);
  if (v2 > 4.0) {
    float v2 = 4.0;
  }
  this[6] = v2;
  this[7] = a2;
  float v3 = this[3] - a2;
  float v4 = this[12] * (float)(this[13] / v3);
  if (v4 > 4.0) {
    float v4 = 4.0;
  }
  this[12] = v4;
  this[13] = v3;
  return this;
}

uint64_t MTMBSawtoothPitchInterpolator::PeriodLenAtSample(MTMBSawtoothPitchInterpolator *this, float a2, float a3)
{
  if (*((unsigned char *)this + 68))
  {
    float v3 = *((float *)this + 15);
    float v4 = (float)(a2 - *((float *)this + 16)) * *((float *)this + 12);
    float v5 = *((float *)this + 14);
  }
  else
  {
    float v4 = *((float *)this + 6) * a2;
    float v5 = *((float *)this + 8);
    float v3 = *((float *)this + 9);
  }
  int v6 = (int)(float)((float)(v5 + (float)(v4 * v3)) * a3);
  if (v6 >= 512) {
    return 512;
  }
  else {
    return v6;
  }
}

float MTMBMetaPitchInterpolator::MTMBMetaPitchInterpolator(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)(a1 + 8) = 1065353216;
  float result = (float)a2 * 110.25;
  *(float *)(a1 + 12) = result;
  *(void *)a1 = &unk_1F34808E0;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + --*(_WORD *)(this + 24) = a4;
  return result;
}

{
  float result;

  *(_DWORD *)(a1 + 8) = 1065353216;
  float result = (float)a2 * 110.25;
  *(float *)(a1 + 12) = result;
  *(void *)a1 = &unk_1F34808E0;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + --*(_WORD *)(this + 24) = a4;
  return result;
}

void MTMBMetaPitchInterpolator::~MTMBMetaPitchInterpolator(MTMBMetaPitchInterpolator *this)
{
  *(void *)this = &unk_1F34808E0;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

{
  uint64_t vars8;

  MTMBMetaPitchInterpolator::~MTMBMetaPitchInterpolator(this);

  JUMPOUT(0x1E016FF00);
}

uint64_t MTMBMetaPitchInterpolator::PeriodLenAtSample(MTMBMetaPitchInterpolator *this, float a2, float a3)
{
  float v6 = fminf(a2 / *((float *)this + 3), 1.0);
  (*(void (**)(void, float, float))(**((void **)this + 2) + 16))(*((void *)this + 2), a2, a3);
  return (int)(float)((float)(v6
                                          * (float)(*(int (**)(void, float, float))(**((void **)this + 3)
                                                                                               + 16))(*((void *)this + 3), a2, a3))+ (float)((float)(1.0 - v6) * (float)v7));
}

uint64_t MTMBMetaPitchInterpolator::ForceFirst(MTMBMetaPitchInterpolator *this)
{
  (*(void (**)(void))(**((void **)this + 2) + 24))(*((void *)this + 2));
  uint64_t v2 = *(uint64_t (**)(void))(**((void **)this + 3) + 24);

  return v2();
}

uint64_t MTMBMetaPitchInterpolator::ForceSecond(MTMBMetaPitchInterpolator *this)
{
  (*(void (**)(void))(**((void **)this + 2) + 32))(*((void *)this + 2));
  uint64_t v2 = *(uint64_t (**)(void))(**((void **)this + 3) + 32);

  return v2();
}

uint64_t MTMBMetaPitchInterpolator::SetEstimatedLength(MTMBMetaPitchInterpolator *this, float a2)
{
  (*(void (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  uint64_t result = (*(uint64_t (**)(void, float))(**((void **)this + 3) + 40))(*((void *)this + 3), a2);
  float v5 = *((float *)this + 2) * (float)(*((float *)this + 3) / a2);
  if (v5 > 4.0) {
    float v5 = 4.0;
  }
  *((float *)this + 2) = v5;
  *((float *)this + 3) = a2;
  return result;
}

uint64_t MTMBMetaPitchInterpolator::SetEstimatedFirstLength(MTMBMetaPitchInterpolator *this, float a2)
{
  (*(void (**)(void))(**((void **)this + 2) + 48))(*((void *)this + 2));
  float v4 = *(uint64_t (**)(__n128))(**((void **)this + 3) + 48);
  v5.n128_f32[0] = a2;

  return v4(v5);
}

void MTMBPitchInterpolator::CreateWordInterpolator(MTMBPitchInterpolator *this, MTMBDemi *a2)
{
  if (MTMBDemiProperties::UseWordPitch(*((MTMBDemiProperties **)this + 13)))
  {
    if (!MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBSilenceConform)
      || (*(_WORD *)(*((void *)this + 13) + 16) & 8) == 0)
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBUseLinearPitch)) {
        operator new();
      }
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1DA4D2FDC(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10C1C404F8B535CLL);
  _Unwind_Resume(a1);
}

float MTMBDemi::FirstFactor(MTMBDemi *this, float a2, double a3, float a4)
{
  unsigned int v4 = *((unsigned __int16 *)this + 42);
  if (!*((_WORD *)this + 42)) {
    return 1.0;
  }
  LOWORD(a2) = *((_WORD *)this + 44);
  float v5 = (float)v4;
  float result = (float)LODWORD(a2) / (float)v4;
  unsigned int v7 = *((_DWORD *)this + 23);
  if (v7)
  {
    LOWORD(v5) = *((_WORD *)this + 45);
    LOWORD(aMEOWVectorBase::clear(this + 4) = *((_WORD *)this + 43);
    float v8 = (float)((float)LODWORD(v5) / (float)LODWORD(a4)) - result;
    float v9 = v8 * 0.5;
    float v10 = (float)(v8 / (float)(*((_DWORD *)this + 25) - (v7 + *((_DWORD *)this + 24)))) * (float)v7;
    float v13 = v10;
    float v14 = v8 * 0.5;
    if (v8 >= 0.0) {
      BOOL v11 = v10 < v9;
    }
    else {
      BOOL v11 = v9 < v10;
    }
    uint64_t v12 = &v14;
    if (v11) {
      uint64_t v12 = &v13;
    }
    float result = result - *v12;
  }
  if (result > 4.0) {
    float result = 4.0;
  }
  if (result < 0.25) {
    return 0.25;
  }
  return result;
}

float MTMBDemi::LastFactor(MTMBDemi *this, float a2)
{
  if (!*((_WORD *)this + 43)) {
    return 1.0;
  }
  LOWORD(a2) = *((_WORD *)this + 45);
  float result = (float)LODWORD(a2) / (float)*((unsigned __int16 *)this + 43);
  if (result > 4.0) {
    float result = 4.0;
  }
  if (result < 0.25) {
    return 0.25;
  }
  return result;
}

void MTMBPitchInterpolator::CreateDemiInterpolator(MTMBPitchInterpolator *this, MTMBDemi *a2)
{
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBUseLinearPitch))
  {
    if ((MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBLinearSlack) & 1) == 0) {
      operator new();
    }
  }
  operator new();
}

void sub_1DA4D3220(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10C1C404F8B535CLL);
  _Unwind_Resume(a1);
}

void MTMBPitchInterpolator::CreatePhonemeInterpolator(MTMBPitchInterpolator *this, MTMBDemi *a2, MTMBDemi *a3)
{
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBUseLinearPitch)
    && (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBLinearSlack) & 1) == 0
    && *((__int16 *)this + 40) != -1)
  {
    if ((MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBWordLinearPitch) & 1) == 0
      && *((void *)this + 9) == *((void *)a2 + 8)
      && *((_WORD *)this + 40))
    {
      if (*((_WORD *)a2 + 40)) {
        operator new();
      }
    }
    operator new();
  }
  operator new();
}

void sub_1DA4D3494(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10C1C404F8B535CLL);
  _Unwind_Resume(a1);
}

float *SetLinearPitchTargets(float *a1, MTMBDemi *this, float *a3, unint64_t a4, float *a5, unint64_t a6, double a7, float a8)
{
  uint64_t v12 = this;
  if (!*((_WORD *)this + 44)) {
    MTMBDemi::SetFirstPPTarget((uint64_t)this, *((unsigned __int16 *)this + 40), a3);
  }
  uint64_t v14 = *((void *)v12 + 9);
  unint64_t v15 = *((unsigned int *)v12 + 25);
  uint64_t v16 = (uint64_t)v12 - *(void *)a1;
  uint64_t v17 = 0x6DB6DB6DB6DB6DB7 * (v16 >> 4);
  if (v16 < -111)
  {
    uint64_t v22 = 34 - v17;
    unint64_t v23 = 34 - v17;
    size_t v19 = &a1[-2 * ((34 - v17) / 0x24uLL)];
    unint64_t v20 = *(void *)v19;
    unint64_t v21 = *(void *)v19 + 112 * (36 * (v23 / 0x24) - v22) + 3920;
  }
  else
  {
    unint64_t v18 = v17 + 1;
    size_t v19 = &a1[2 * ((v17 + 1) / 0x24uLL)];
    unint64_t v20 = *(void *)v19;
    unint64_t v21 = *(void *)v19 + 112 * (v18 % 0x24);
  }
  unint64_t v24 = (unint64_t)v12;
  vDSP_Length v25 = a1;
  unint64_t v26 = (unint64_t)v12;
  unsigned __int16 v27 = *((_WORD *)v12 + 41);
LABEL_7:
  unint64_t v28 = v21 - 4032;
  while (1)
  {
    BOOL v29 = v19 == a5;
    if (v21 >= a6) {
      BOOL v29 = 0;
    }
    if (v19 >= a5 && !v29) {
      break;
    }
    uint64_t v30 = *(unsigned int *)(v21 + 100);
    if (v30)
    {
      if (*(void *)(v21 + 64) != v14
        || v25 >= a3 && (v25 != a3 || v24 >= a4)
        || *(char *)(*(void *)(v21 + 104) + 18) < 0)
      {
        unint64_t v24 = v21;
        vDSP_Length v25 = v19;
        break;
      }
      if (*(_WORD *)(v21 + 82)) {
        unsigned __int16 v27 = *(_WORD *)(v21 + 82);
      }
      uint64_t v14 = *(void *)(v21 + 72);
      v15 += v30;
      unint64_t v24 = v21;
      vDSP_Length v25 = v19;
      unint64_t v26 = v21;
    }
    v21 += 112;
    v28 += 112;
    if (v20 == v28)
    {
      unint64_t v31 = *((void *)v19 + 1);
      v19 += 2;
      unint64_t v20 = v31;
      unint64_t v21 = v31;
      goto LABEL_7;
    }
  }
  if ((MTMBDemi *)v24 == v12)
  {
    MTMBDemi::SetLastPPTarget((uint64_t)v12, *((unsigned __int16 *)v12 + 41), a3);
    return a1;
  }
  float v32 = (float)v27;
  uint64_t v33 = *(unsigned __int16 *)(v24 + 80);
  if (*(void *)(v24 + 64) == v14)
  {
    MTMBDemi::SetFirstPPTarget(v24, v33, a3);
LABEL_60:
    float v50 = (float)v27;
    goto LABEL_63;
  }
  if (*(_WORD *)(v24 + 80))
  {
    float v35 = (float)v33;
    if (v32 > (float)v33) {
      float v36 = v32 / (float)v33;
    }
    else {
      float v36 = (float)v33 / v32;
    }
    if (kMTMBUnvoicedBackoff)
    {
      MTBEDebugParams::GetParam((const __CFString *)kMTMBUnvoicedBackoff, (const __CFString *)&dword_1EA8DA638, a3, *(float *)&dword_1EA8DA638);
      kMTMBUnvoicedBackoff = 0;
    }
    if (*(float *)&dword_1EA8DA638 != 0.0)
    {
      float v37 = (float)*(unsigned int *)(v24 + 92);
      uint64_t v38 = *(void *)v25;
      unint64_t v39 = v24;
      int v40 = v25;
      while (1)
      {
        if (v39 == v38)
        {
          uint64_t v42 = *((void *)v40 - 1);
          v40 -= 2;
          uint64_t v38 = v42;
          unint64_t v41 = v42 + 4032;
        }
        else
        {
          unint64_t v41 = v39;
        }
        unint64_t v39 = v41 - 112;
        if (v40 < a1 || v40 == a1 && v39 < (unint64_t)v12) {
          break;
        }
        if (*(_DWORD *)(v41 - 12))
        {
          float v37 = v37 + (float)*(unsigned int *)(v41 - 16);
          if (*(_WORD *)(v41 - 30)) {
            break;
          }
        }
      }
      float v43 = 1.0;
      if (v37 != 0.0) {
        float v43 = exp2f(v37 / (float)(*(float *)&dword_1EA8DA638 * 22.05));
      }
      float v36 = fmaxf(v36 / v43, 1.0);
    }
    float v44 = sqrtf(v36);
    if (v32 <= v35)
    {
      float v46 = v44 * v32;
      float v45 = v35 / v44;
    }
    else
    {
      float v45 = v44 * v35;
      float v46 = v32 / v44;
    }
    float v50 = (float)(int)v46;
    MTMBDemi::SetFirstPPTarget(v24, (int)v45, a3);
  }
  else
  {
    if ((*(_WORD *)(*(void *)(v24 + 104) + 16) & 2) == 0
      || (uint64_t v47 = *((void *)v12 + 13)) == 0
      || !*(void *)(v47 + 40)
      || !*(void *)(v47 + 32))
    {
      v15 += *(unsigned int *)(v24 + 100);
      goto LABEL_60;
    }
    float v48 = 22050.0
        / *(float *)(*(void *)(*(void *)(v26 + 104) + 40)
                   + 4
                   * (int)vcvtms_s32_f32((float)((float)(*(_DWORD *)(v26 + 100) - *(_DWORD *)(v26 + 96))/ (float)*(unsigned int *)(v26 + 100))* (float)*(unint64_t *)(*(void *)(v26 + 104) + 32)));
    if (kMTMBFinalSlack)
    {
      MTBEDebugParams::GetParam((const __CFString *)kMTMBFinalSlack, (const __CFString *)&dword_1EA8DA628, a3, *(float *)&dword_1EA8DA628);
      kMTMBFinalSlacuint64_t k = 0;
    }
    HIWORD(a8) = 18350;
    float v49 = (float)((float)(*(float *)&dword_1EA8DA628 * v32) + (float)(v48 * (float)(100.0 - *(float *)&dword_1EA8DA628)))
        * 0.01;
    if (v32 >= v49) {
      float v50 = (float)v27;
    }
    else {
      float v50 = (float)((float)(*(float *)&dword_1EA8DA628 * v32)
    }
                  + (float)(v48 * (float)(100.0 - *(float *)&dword_1EA8DA628)))
          * 0.01;
  }
LABEL_63:
  float v51 = 1.0;
  float v52 = 1.0;
  if (*((_WORD *)v12 + 40))
  {
    LOWORD(a8) = *((_WORD *)v12 + 44);
    float v52 = (float)LODWORD(a8) / (float)*((unsigned __int16 *)v12 + 40);
  }
  if (v27) {
    float v51 = v50 / v32;
  }
  float v53 = v51 - v52;
  float v54 = v53 / (float)v15;
  float v55 = 0.0;
LABEL_68:
  unint64_t v56 = (unint64_t)v12;
  while (1)
  {
    BOOL v57 = a1 == v25;
    if (v56 >= v24) {
      BOOL v57 = 0;
    }
    if (a1 >= v25 && !v57) {
      return a1;
    }
    unsigned int v58 = *(_DWORD *)(v56 + 100);
    if (v58)
    {
      if (v55 != 0.0)
      {
        LOWORD(v53) = *(_WORD *)(v56 + 80);
        MTMBDemi::SetFirstPPTarget(v56, (int)(float)((float)(v52 + (float)(v54 * v55)) * (float)LODWORD(v53)), a3);
        unsigned int v58 = *(_DWORD *)(v56 + 100);
      }
      *(float *)&unsigned int v59 = (float)v58;
      float v55 = v55 + (float)v58;
      LOWORD(v59) = *(_WORD *)(v56 + 82);
      MTMBDemi::SetLastPPTarget(v56, (int)(float)((float)(v52 + (float)(v54 * v55)) * (float)v59), a3);
    }
    v56 += 112;
    uint64_t v12 = (MTMBDemi *)((char *)v12 + 112);
    if ((MTMBDemi *)(*(void *)a1 + 4032) == v12)
    {
      long long v60 = (MTMBDemi *)*((void *)a1 + 1);
      a1 += 2;
      uint64_t v12 = v60;
      goto LABEL_68;
    }
  }
}

uint64_t MTMBDemi::SetFirstPPTarget(uint64_t this, uint64_t a2, float *a3)
{
  uint64_t v3 = this;
  if (a2)
  {
    uint64_t v4 = *(void *)(this + 104);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 40);
      if (v5)
      {
        unint64_t v6 = *(void *)(v4 + 32);
        if (v6)
        {
          this = PinPPTarget((float)a2, 22050.0/ *(float *)(v5+ 4* (int)vcvtms_s32_f32((float)((float)*(unsigned int *)(this + 92) / (float)*(unsigned int *)(this + 100))* (float)v6)), this, a2, a3);
          LOWORD(a2) = this;
        }
      }
    }
  }
  *(_WORD *)(v3 + 88) = a2;
  return this;
}

uint64_t MTMBDemi::SetLastPPTarget(uint64_t this, uint64_t a2, float *a3)
{
  uint64_t v3 = this;
  if (a2)
  {
    uint64_t v4 = *(void *)(this + 104);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 40);
      if (v5)
      {
        unint64_t v6 = *(void *)(v4 + 32);
        if (v6)
        {
          this = PinPPTarget((float)a2, 22050.0/ *(float *)(v5+ 4* (int)vcvtms_s32_f32((float)((float)(*(_DWORD *)(this + 100) - *(_DWORD *)(this + 96))/ (float)*(unsigned int *)(this + 100))* (float)v6)), this, a2, a3);
          LOWORD(a2) = this;
        }
      }
    }
  }
  *(_WORD *)(v3 + 90) = a2;
  return this;
}

float MTMBDemi::LastModelPP(MTMBDemi *this)
{
  return 22050.0
       / *(float *)(*(void *)(*((void *)this + 13) + 40)
                  + 4
                  * (int)vcvtms_s32_f32((float)((float)(*((_DWORD *)this + 25) - *((_DWORD *)this + 24))/ (float)*((unsigned int *)this + 25))* (float)*(unint64_t *)(*((void *)this + 13) + 32)));
}

uint64_t SetCompromisePitchTargets(MTMBDemi *this, MTMBDemi *a2, float a3, float a4, float a5, float *a6)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  BOOL v11 = a3 <= a4;
  float v12 = a4 / a3;
  float v13 = a3 / a4;
  if (v11) {
    float v14 = v12;
  }
  else {
    float v14 = v13;
  }
  if (kMTMBUnvoicedBackoff)
  {
    MTBEDebugParams::GetParam((const __CFString *)kMTMBUnvoicedBackoff, (const __CFString *)&dword_1EA8DA638, a6, *(float *)&dword_1EA8DA638);
    kMTMBUnvoicedBackoff = 0;
  }
  if (*(float *)&dword_1EA8DA638 == 0.0)
  {
    float v16 = 0.0;
    double v17 = 0.0;
  }
  else
  {
    float v15 = (float)(*((_DWORD *)a2 + 23) + *((_DWORD *)this + 24)) + a5;
    float v16 = 1.0;
    if (v15 != 0.0) {
      float v16 = exp2f(v15 / (float)(*(float *)&dword_1EA8DA638 * 22.05));
    }
    float v14 = fmaxf(v14 / v16, 1.0);
    double v17 = v15;
  }
  float v18 = sqrtf(v14);
  if (a3 <= a4)
  {
    float v19 = v18 * a3;
    MTMBDemi::SetLastPPTarget((uint64_t)this, (int)(float)(v18 * a3), a6);
    float v20 = a4 / v18;
    MTMBDemi::SetFirstPPTarget((uint64_t)a2, (int)(float)(a4 / v18), v23);
    uint64_t result = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBLogBoundaryPitch);
    if (!result) {
      return result;
    }
    goto LABEL_15;
  }
  float v19 = a3 / v18;
  MTMBDemi::SetLastPPTarget((uint64_t)this, (int)(float)(a3 / v18), a6);
  float v20 = v18 * a4;
  MTMBDemi::SetFirstPPTarget((uint64_t)a2, (int)(float)(v18 * a4), v21);
  uint64_t result = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBLogBoundaryPitch);
  if (result)
  {
LABEL_15:
    unint64_t v24 = (FILE *)*MEMORY[0x1E4F143C8];
    vDSP_Length v25 = MTMBDemiProperties::Phon(*((MTMBDemiProperties **)this + 13), v28);
    unint64_t v26 = MTMBDemiProperties::Phon(*((MTMBDemiProperties **)a2 + 13), v27);
    return fprintf(v24, "Compromise %s-%s %5.1f %5.1f -> %5.1f %5.1f [%5.2f] (%f\\%f->%f)\n", v25, v26, a3, a4, v19, v20, v18, v17, a5, v16);
  }
  return result;
}

uint64_t SetCompromisePitchTargets(int a1, MTMBDemi *this, float *a3, MTMBDemi *a4, float a5, float a6, float a7)
{
  return SetCompromisePitchTargets(this, a4, a5, a6, a7, a3);
}

void *SetLinearSlackPitchTargets(void *a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, unint64_t a6)
{
  unint64_t v9 = a2;
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  if (MTMBDemiProperties::UseWordPitch(*(MTMBDemiProperties **)(a2 + 104)))
  {
    if (!*(_WORD *)(v9 + 88)) {
      MTMBDemi::SetFirstPPTarget(v9, *(unsigned __int16 *)(v9 + 80), v11);
    }
    uint64_t v13 = v9 - *a1;
    uint64_t v14 = 0x6DB6DB6DB6DB6DB7 * (v13 >> 4);
    if (v13 < -111)
    {
      uint64_t v28 = 34 - v14;
      unint64_t v29 = 34 - v14;
      float v16 = &a1[-((34 - v14) / 0x24uLL)];
      uint64_t v17 = *v16;
      unint64_t v18 = *v16 + 112 * (36 * (v29 / 0x24) - v28) + 3920;
    }
    else
    {
      unint64_t v15 = v14 + 1;
      float v16 = &a1[(v14 + 1) / 0x24uLL];
      uint64_t v17 = *v16;
      unint64_t v18 = *v16 + 112 * (v15 % 0x24);
    }
LABEL_20:
    uint64_t v30 = v17 - v18 + 4032;
    while (1)
    {
      BOOL v31 = v16 == a5;
      if (v18 >= a6) {
        BOOL v31 = 0;
      }
      if (v16 >= a5 && !v31 || *(_DWORD *)(v18 + 100)) {
        break;
      }
      v18 += 112;
      v30 -= 112;
      if (!v30)
      {
        unint64_t v32 = v16[1];
        ++v16;
        uint64_t v17 = v32;
        unint64_t v18 = v32;
        goto LABEL_20;
      }
    }
    if (v18 == a6)
    {
      MTMBDemi::SetLastPPTarget(v9, *(unsigned __int16 *)(v9 + 82), v11);
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBDebugPitchAssembly))
      {
        float v45 = (FILE *)*MEMORY[0x1E4F143D8];
        float v46 = MTMBDemiProperties::Phon(*(MTMBDemiProperties **)(v9 + 104), v99);
        fprintf(v45, "Pitch \"%s\" (%d:%d) (%d:%d) [%d]\n", v46, *(unsigned __int16 *)(v9 + 80), *(unsigned __int16 *)(v9 + 88), *(unsigned __int16 *)(v9 + 82), *(unsigned __int16 *)(v9 + 90), 779);
      }
    }
    else
    {
      uint64_t v33 = *(void *)(v9 + 104);
      if ((*(_WORD *)(v33 + 16) & 8) != 0)
      {
        LOWORD(v6) = *(_WORD *)(v9 + 82);
        char v47 = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBSilenceConform);
        float v49 = 22050.0
            / *(float *)(*(void *)(*(void *)(v9 + 104) + 40)
                       + 4
                       * (int)vcvtms_s32_f32((float)((float)(*(_DWORD *)(v9 + 100) - *(_DWORD *)(v9 + 96))/ (float)*(unsigned int *)(v9 + 100))* (float)*(unint64_t *)(*(void *)(v9 + 104) + 32)));
        if ((v47 & 1) == 0)
        {
          float v50 = (float)v6;
          if (kMTMBFinalSlack)
          {
            MTBEDebugParams::GetParam((const __CFString *)kMTMBFinalSlack, (const __CFString *)&dword_1EA8DA628, v48, *(float *)&dword_1EA8DA628);
            kMTMBFinalSlacuint64_t k = 0;
          }
          float v51 = (float)((float)(*(float *)&dword_1EA8DA628 * v50)
                      + (float)(v49 * (float)(100.0 - *(float *)&dword_1EA8DA628)))
              * 0.01;
          if (v50 >= v51) {
            float v49 = v50;
          }
          else {
            float v49 = (float)((float)(*(float *)&dword_1EA8DA628 * v50)
          }
                        + (float)(v49 * (float)(100.0 - *(float *)&dword_1EA8DA628)))
                * 0.01;
        }
        MTMBDemi::SetLastPPTarget(v9, (int)v49, v48);
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBDebugPitchAssembly))
        {
          uint64_t v38 = (FILE *)*MEMORY[0x1E4F143D8];
          unint64_t v39 = MTMBDemiProperties::Phon(*(MTMBDemiProperties **)(v9 + 104), v99);
          int v40 = *(unsigned __int16 *)(v9 + 80);
          int v41 = *(unsigned __int16 *)(v9 + 88);
          int v42 = *(unsigned __int16 *)(v9 + 82);
          int v43 = *(unsigned __int16 *)(v9 + 90);
          int v44 = 793;
          goto LABEL_133;
        }
      }
      else
      {
        int v34 = *(MTMBDemiProperties **)(v18 + 104);
        if (*(_WORD *)(v18 + 80))
        {
          if (MTMBDemiProperties::UseWordPitch(v34))
          {
            LOWORD(v36) = *(_WORD *)(v9 + 82);
            LOWORD(v37) = *(_WORD *)(v18 + 80);
            SetCompromisePitchTargets((MTMBDemi *)v9, (MTMBDemi *)v18, (float)v36, (float)v37, 0.0, v35);
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBDebugPitchAssembly))
            {
              uint64_t v38 = (FILE *)*MEMORY[0x1E4F143D8];
              unint64_t v39 = MTMBDemiProperties::Phon(*(MTMBDemiProperties **)(v9 + 104), v99);
              int v40 = *(unsigned __int16 *)(v9 + 80);
              int v41 = *(unsigned __int16 *)(v9 + 88);
              int v42 = *(unsigned __int16 *)(v9 + 82);
              int v43 = *(unsigned __int16 *)(v9 + 90);
              int v44 = 827;
              goto LABEL_133;
            }
          }
          else if (MTMBDemiProperties::UseGluePitch(*(MTMBDemiProperties **)(v18 + 104)))
          {
            unint64_t v62 = v18;
            unint64_t v63 = v16;
LABEL_61:
            unint64_t v64 = v62 - 4032;
            while (1)
            {
              BOOL v65 = v63 == a5;
              if (v62 >= a6) {
                BOOL v65 = 0;
              }
              if (v63 >= a5 && !v65) {
                break;
              }
              unint64_t v66 = *(MTMBDemiProperties **)(v62 + 104);
              if ((*((_WORD *)v66 + 8) & 0x10) == 0 && *(_DWORD *)(v62 + 100))
              {
                if (v63 < a5) {
                  goto LABEL_128;
                }
                break;
              }
              v62 += 112;
              v64 += 112;
              if (*v63 == v64)
              {
                unint64_t v67 = v63[1];
                ++v63;
                unint64_t v62 = v67;
                goto LABEL_61;
              }
            }
            if (v63 != a5 || v62 >= a6) {
              goto LABEL_131;
            }
            unint64_t v66 = *(MTMBDemiProperties **)(v62 + 104);
LABEL_128:
            if (!MTMBDemiProperties::UseWordPitch(v66)) {
              goto LABEL_131;
            }
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBDebugPitchAssembly))
            {
              uint64_t v38 = (FILE *)*MEMORY[0x1E4F143D8];
              unint64_t v39 = MTMBDemiProperties::Phon(*(MTMBDemiProperties **)(v9 + 104), v99);
              int v40 = *(unsigned __int16 *)(v9 + 80);
              int v41 = *(unsigned __int16 *)(v9 + 88);
              int v42 = *(unsigned __int16 *)(v9 + 82);
              int v43 = *(unsigned __int16 *)(v9 + 90);
              int v44 = 839;
              goto LABEL_133;
            }
          }
          else
          {
LABEL_131:
            LOWORD(v6MEOWVectorBase::~MEOWVectorBase(this + 1) = *(_WORD *)(v9 + 82);
            SetCompromisePitchTargets((MTMBDemi *)v9, (MTMBDemi *)v18, (float)v61, 22050.0/ *(float *)(*(void *)(*(void *)(v18 + 104) + 40)+ 4* (int)vcvtms_s32_f32((float)((float)*(unsigned int *)(v18 + 92) / (float)*(unsigned int *)(v18 + 100))* (float)*(unint64_t *)(*(void *)(v18 + 104) + 32))), 0.0, v60);
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBDebugPitchAssembly))
            {
              uint64_t v38 = (FILE *)*MEMORY[0x1E4F143D8];
              unint64_t v39 = MTMBDemiProperties::Phon(*(MTMBDemiProperties **)(v9 + 104), v99);
              int v40 = *(unsigned __int16 *)(v9 + 80);
              int v41 = *(unsigned __int16 *)(v9 + 88);
              int v42 = *(unsigned __int16 *)(v9 + 82);
              int v43 = *(unsigned __int16 *)(v9 + 90);
              int v44 = 849;
LABEL_133:
              fprintf(v38, "Pitch \"%s\" (%d:%d) (%d:%d) [%d]\n", v39, v40, v41, v42, v43, v44);
            }
          }
        }
        else if ((*((_WORD *)v34 + 8) & 2) != 0 {
               && (uint64_t v55 = *(void *)(v33 + 40)) != 0
        }
               && (unint64_t v56 = *(void *)(v33 + 32)) != 0)
        {
          LOWORD(v12) = *(_WORD *)(v9 + 82);
          float v57 = (float)v12;
          float v58 = 22050.0
              / *(float *)(v55
                         + 4
                         * (int)vcvtms_s32_f32((float)((float)(*(_DWORD *)(v9 + 100) - *(_DWORD *)(v9 + 96))/ (float)*(unsigned int *)(v9 + 100))* (float)v56));
          if (kMTMBFinalSlack)
          {
            MTBEDebugParams::GetParam((const __CFString *)kMTMBFinalSlack, (const __CFString *)&dword_1EA8DA628, v11, *(float *)&dword_1EA8DA628);
            kMTMBFinalSlacuint64_t k = 0;
          }
          float v59 = (float)((float)(*(float *)&dword_1EA8DA628 * v57)
                      + (float)(v58 * (float)(100.0 - *(float *)&dword_1EA8DA628)))
              * 0.01;
          if (v57 >= v59) {
            float v59 = v57;
          }
          MTMBDemi::SetLastPPTarget(v9, (int)v59, v11);
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBDebugPitchAssembly))
          {
            uint64_t v38 = (FILE *)*MEMORY[0x1E4F143D8];
            unint64_t v39 = MTMBDemiProperties::Phon(*(MTMBDemiProperties **)(v9 + 104), v99);
            int v40 = *(unsigned __int16 *)(v9 + 80);
            int v41 = *(unsigned __int16 *)(v9 + 88);
            int v42 = *(unsigned __int16 *)(v9 + 82);
            int v43 = *(unsigned __int16 *)(v9 + 90);
            int v44 = 812;
            goto LABEL_133;
          }
        }
        else
        {
          MTMBDemi::SetLastPPTarget(v9, *(unsigned __int16 *)(v9 + 82), v11);
          MTMBDemi::SetFirstPPTarget(v18, *(unsigned __int16 *)(v9 + 90), v68);
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBDebugPitchAssembly))
          {
            uint64_t v38 = (FILE *)*MEMORY[0x1E4F143D8];
            unint64_t v39 = MTMBDemiProperties::Phon(*(MTMBDemiProperties **)(v9 + 104), v99);
            int v40 = *(unsigned __int16 *)(v9 + 80);
            int v41 = *(unsigned __int16 *)(v9 + 88);
            int v42 = *(unsigned __int16 *)(v9 + 82);
            int v43 = *(unsigned __int16 *)(v9 + 90);
            int v44 = 819;
            goto LABEL_133;
          }
        }
      }
    }
    return v16;
  }
  float v19 = *(MTMBDemiProperties **)(v9 + 104);
  if (!v19 || !*((void *)v19 + 5) || !*((void *)v19 + 4))
  {
    MTMBDemi::SetLastPPTarget(v9, *(unsigned __int16 *)(v9 + 82), v11);
    uint64_t v26 = v9 - *a1;
    uint64_t v27 = 0x6DB6DB6DB6DB6DB7 * (v26 >> 4);
    if (v26 < -111) {
      float v16 = &a1[-((34 - v27) / 0x24uLL)];
    }
    else {
      float v16 = &a1[(v27 + 1) / 0x24uLL];
    }
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBDebugPitchAssembly))
    {
      uint64_t v38 = (FILE *)*MEMORY[0x1E4F143D8];
      unint64_t v39 = MTMBDemiProperties::Phon(*(MTMBDemiProperties **)(v9 + 104), v99);
      int v40 = *(unsigned __int16 *)(v9 + 80);
      int v41 = *(unsigned __int16 *)(v9 + 88);
      int v42 = *(unsigned __int16 *)(v9 + 82);
      int v43 = *(unsigned __int16 *)(v9 + 90);
      int v44 = 858;
      goto LABEL_133;
    }
    return v16;
  }
  if (MTMBDemiProperties::UseGluePitch(v19))
  {
    if (*(_DWORD *)(v9 + 100))
    {
      uint64_t v21 = *(void *)(v9 + 104);
      if (v21)
      {
        uint64_t v22 = *(float **)(v21 + 40);
        if (v22)
        {
          if (*(void *)(v21 + 32))
          {
            MTMBDemi::SetFirstPPTarget(v9, (int)(float)(22050.0 / *v22), v20);
            MTMBDemi::SetLastPPTarget(v9, (int)(float)(22050.0/ *(float *)(*(void *)(*(void *)(v9 + 104) + 40)+ 4 * *(void *)(*(void *)(v9 + 104) + 32)- 4)), v23);
          }
        }
      }
    }
    uint64_t v24 = v9 - *a1;
    uint64_t v25 = 0x6DB6DB6DB6DB6DB7 * (v24 >> 4);
    if (v24 < -111) {
      float v16 = &a1[-((34 - v25) / 0x24uLL)];
    }
    else {
      float v16 = &a1[(v25 + 1) / 0x24uLL];
    }
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBDebugPitchAssembly))
    {
      uint64_t v38 = (FILE *)*MEMORY[0x1E4F143D8];
      unint64_t v39 = MTMBDemiProperties::Phon(*(MTMBDemiProperties **)(v9 + 104), v99);
      int v40 = *(unsigned __int16 *)(v9 + 80);
      int v41 = *(unsigned __int16 *)(v9 + 88);
      int v42 = *(unsigned __int16 *)(v9 + 82);
      int v43 = *(unsigned __int16 *)(v9 + 90);
      int v44 = 873;
      goto LABEL_133;
    }
    return v16;
  }
  uint64_t v52 = *(void *)(v9 + 104);
  float v53 = *(float **)(v52 + 40);
  if (*(_WORD *)(v9 + 88)) {
    float v54 = (float)*(unsigned __int16 *)(v9 + 88);
  }
  else {
    float v54 = 22050.0
  }
        / v53[vcvtms_s32_f32((float)((float)*(unsigned int *)(v9 + 92) / (float)*(unsigned int *)(v9 + 100))* (float)*(unint64_t *)(v52 + 32))];
  uint64_t v69 = v9 - *a1;
  uint64_t v70 = 0x6DB6DB6DB6DB6DB7 * (v69 >> 4);
  if (v69 < -111)
  {
    unint64_t v73 = 34 - v70;
    float v16 = &a1[-(v73 / 0x24)];
    unint64_t v72 = *v16 + 112 * (36 * (v73 / 0x24) - v73) + 3920;
  }
  else
  {
    unint64_t v71 = v70 + 1;
    float v16 = &a1[v71 / 0x24];
    unint64_t v72 = *v16 + 112 * (v71 % 0x24);
  }
  unint64_t v74 = v9;
LABEL_80:
  unint64_t v75 = v72 - 4032;
  while (1)
  {
    BOOL v76 = v16 == a5;
    if (v72 >= a6) {
      BOOL v76 = 0;
    }
    if (v16 >= a5 && !v76)
    {
LABEL_94:
      uint64_t v80 = *(void *)(v74 + 104);
      unint64_t v82 = *(void *)(v80 + 32);
      uint64_t v81 = *(void *)(v80 + 40);
      unint64_t v83 = v81 + 4 * v82;
      goto LABEL_95;
    }
    if (*(_DWORD *)(v72 + 100)) {
      break;
    }
LABEL_92:
    v72 += 112;
    v75 += 112;
    if (*v16 == v75)
    {
      unint64_t v79 = v16[1];
      ++v16;
      unint64_t v72 = v79;
      goto LABEL_80;
    }
  }
  unint64_t v77 = *(MTMBDemiProperties **)(v72 + 104);
  if ((*((_WORD *)v77 + 8) & 4) != 0) {
    goto LABEL_94;
  }
  if (!MTMBDemiProperties::UseWordPitch(v77))
  {
    uint64_t v78 = *(void *)(v72 + 104);
    if (v78 && *(void *)(v78 + 40) && *(void *)(v78 + 32)) {
      unint64_t v74 = v72;
    }
    goto LABEL_92;
  }
  if ((MTMBDemiProperties::UseGluePitch(*(MTMBDemiProperties **)(v74 + 104)) & 1) == 0)
  {
    HIWORD(v96) = 18092;
    LOWORD(v96) = *(_WORD *)(v72 + 80);
    SetCompromisePitchTargets((MTMBDemi *)v74, (MTMBDemi *)v72, 22050.0/ *(float *)(*(void *)(*(void *)(v74 + 104) + 40)+ 4* (int)vcvtms_s32_f32((float)((float)(*(_DWORD *)(v74 + 100) - *(_DWORD *)(v74 + 96))/ (float)*(unsigned int *)(v74 + 100))* (float)*(unint64_t *)(*(void *)(v74 + 104) + 32))), (float)v96, 0.0, v20);
  }
  uint64_t v97 = *(void *)(v74 + 104);
  unint64_t v82 = *(void *)(v97 + 32);
  uint64_t v81 = *(void *)(v97 + 40);
  unint64_t v83 = v81 + 4 * v82;
  if (!*(_WORD *)(v74 + 90))
  {
LABEL_95:
    uint64_t v84 = (int)vcvtms_s32_f32((float)((float)(*(_DWORD *)(v74 + 100) - *(_DWORD *)(v74 + 96))/ (float)*(unsigned int *)(v74 + 100))* (float)v82);
    float v85 = 22050.0 / *(float *)(v81 + 4 * v84);
    goto LABEL_96;
  }
  float v85 = (float)*(unsigned __int16 *)(v74 + 90);
  uint64_t v84 = (int)vcvtms_s32_f32((float)((float)(*(_DWORD *)(v74 + 100) - *(_DWORD *)(v74 + 96))/ (float)*(unsigned int *)(v74 + 100))* (float)v82);
LABEL_96:
  uint64_t v86 = (float *)(*(void *)(*(void *)(v9 + 104) + 40)
                + 4
                * (int)vcvtms_s32_f32((float)((float)*(unsigned int *)(v9 + 92) / (float)*(unsigned int *)(v9 + 100))* (float)*(unint64_t *)(*(void *)(v9 + 104) + 32)));
  float v87 = (float)(22050.0 / *v86) / v54;
  unint64_t v88 = (float *)(v81 + 4 * v84);
  float v89 = 1.0;
  if (v86 < v88) {
    float v89 = (float)((float)((float)(22050.0 / *v88) / v85) - v87) / (float)(v88 - v86);
  }
  while (v53 < v86)
  {
    *float v53 = v87 * *v53;
    ++v53;
  }
  while (v53 < v88)
  {
    *float v53 = v87 * *v53;
    ++v53;
    float v87 = v89 + v87;
  }
  while ((unint64_t)v53 < v83)
  {
    *float v53 = v87 * *v53;
    ++v53;
  }
LABEL_106:
  unint64_t v90 = v9 - 4032;
  while (1)
  {
    BOOL v91 = a1 == v16;
    if (v9 >= v72) {
      BOOL v91 = 0;
    }
    if (a1 >= v16 && !v91) {
      break;
    }
    if (*(_DWORD *)(v9 + 100))
    {
      uint64_t v92 = *(void *)(v9 + 104);
      if (v92)
      {
        int v93 = *(float **)(v92 + 40);
        if (v93)
        {
          if (*(void *)(v92 + 32))
          {
            MTMBDemi::SetFirstPPTarget(v9, (int)(float)(22050.0 / *v93), v20);
            MTMBDemi::SetLastPPTarget(v9, (int)(float)(22050.0/ *(float *)(*(void *)(*(void *)(v9 + 104) + 40)+ 4 * *(void *)(*(void *)(v9 + 104) + 32)- 4)), v94);
          }
        }
      }
    }
    v9 += 112;
    v90 += 112;
    if (*a1 == v90)
    {
      unint64_t v95 = a1[1];
      ++a1;
      unint64_t v9 = v95;
      goto LABEL_106;
    }
  }
  if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBDebugPitchAssembly))
  {
    uint64_t v38 = (FILE *)*MEMORY[0x1E4F143D8];
    unint64_t v39 = MTMBDemiProperties::Phon(*(MTMBDemiProperties **)(v9 + 104), v99);
    int v40 = *(unsigned __int16 *)(v9 + 80);
    int v41 = *(unsigned __int16 *)(v9 + 88);
    int v42 = *(unsigned __int16 *)(v9 + 82);
    int v43 = *(unsigned __int16 *)(v9 + 90);
    int v44 = 957;
    goto LABEL_133;
  }
  return v16;
}

float MTMBDemi::FirstModelPP(MTMBDemi *this)
{
  return 22050.0
       / *(float *)(*(void *)(*((void *)this + 13) + 40)
                  + 4
                  * (int)vcvtms_s32_f32((float)((float)*((unsigned int *)this + 23) / (float)*((unsigned int *)this + 25))* (float)*(unint64_t *)(*((void *)this + 13) + 32)));
}

uint64_t MTMBDemi::FirstModelFreq(MTMBDemi *this)
{
  return *(void *)(*((void *)this + 13) + 40)
       + 4
       * (int)vcvtms_s32_f32((float)((float)*((unsigned int *)this + 23) / (float)*((unsigned int *)this + 25))* (float)*(unint64_t *)(*((void *)this + 13) + 32));
}

uint64_t MTMBDemi::LastModelFreq(MTMBDemi *this)
{
  return *(void *)(*((void *)this + 13) + 40)
       + 4
       * (int)vcvtms_s32_f32((float)((float)(*((_DWORD *)this + 25) - *((_DWORD *)this + 24))/ (float)*((unsigned int *)this + 25))* (float)*(unint64_t *)(*((void *)this + 13) + 32));
}

uint64_t MTMBPitchStrategy::SetPitchTargets(float *a1, unint64_t a2, float *a3, unint64_t a4, float *a5, unint64_t a6)
{
  unint64_t v10 = a2;
  BOOL v11 = a1;
  unint64_t v12 = a2;
  uint64_t v13 = a1;
LABEL_2:
  unint64_t v14 = v12 - 4032;
  while (1)
  {
    BOOL v15 = v13 == a3;
    if (v12 >= a4) {
      BOOL v15 = 0;
    }
    if (v13 >= a3 && !v15)
    {
      uint64_t v17 = 0;
      goto LABEL_13;
    }
    if (*(_DWORD *)(v12 + 100) && *(char *)(*(void *)(v12 + 104) + 18) < 0) {
      break;
    }
    v14 += 112;
    v12 += 112;
    if (*(void *)v13 == v14)
    {
      unint64_t v16 = *((void *)v13 + 1);
      v13 += 2;
      unint64_t v12 = v16;
      goto LABEL_2;
    }
  }
  uint64_t v17 = 1;
LABEL_13:
  unint64_t v18 = v10 - 4032;
  while (1)
  {
    BOOL v19 = v11 == a3;
    if (v10 >= a4) {
      BOOL v19 = 0;
    }
    if (v11 >= a3 && !v19) {
      break;
    }
    if (*(_DWORD *)(v10 + 100))
    {
      uint64_t v20 = *(void *)(v10 + 104);
      if (v20)
      {
        if (*(void *)(v20 + 40) && *(void *)(v20 + 32) && (!*(_WORD *)(v10 + 90) || !*(_WORD *)(v10 + 88))) {
          break;
        }
      }
    }
    v10 += 112;
    v18 += 112;
    if (*(void *)v11 == v18)
    {
      unint64_t v21 = *((void *)v11 + 1);
      v11 += 2;
      unint64_t v10 = v21;
      goto LABEL_13;
    }
  }
LABEL_26:
  unint64_t v22 = v10;
  while (1)
  {
    BOOL v23 = v11 == a3;
    if (v22 >= a4) {
      BOOL v23 = 0;
    }
    if (v11 >= a3 && !v23) {
      return v17;
    }
    if (*(_WORD *)(v22 + 80))
    {
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBLinearSlack)) {
        unint64_t v29 = (float *)SetLinearSlackPitchTargets(v11, v10, v25, v26, a5, a6);
      }
      else {
        unint64_t v29 = SetLinearPitchTargets(v11, (MTMBDemi *)v10, a3, a4, a5, a6, v27, v28);
      }
      BOOL v11 = v29;
      unint64_t v10 = v30;
      goto LABEL_26;
    }
    v10 += 112;
    v22 += 112;
    if (*(void *)v11 + 4032 == v10)
    {
      unint64_t v24 = *((void *)v11 + 1);
      v11 += 2;
      unint64_t v10 = v24;
      goto LABEL_26;
    }
  }
}

void MTMBPitchStrategy::ForceGluePitch(MTMBPitchStrategy *this, MTMBDemi *a2, MTMBDemi *a3)
{
  unint64_t v5 = *(void *)(*((void *)this + 13) + 32);
  uint64_t v6 = *(void *)(*((void *)this + 13) + 40);
  unsigned int v7 = (float *)(v6
               + 4
               * (int)vcvtms_s32_f32((float)((float)(*((_DWORD *)this + 25) - *((_DWORD *)this + 24))/ (float)*((unsigned int *)this + 25))* (float)v5));
  unint64_t v8 = *(void *)(*((void *)a2 + 13) + 40);
  *(float *)&unsigned int v9 = (float)*(unint64_t *)(*((void *)a2 + 13) + 32);
  float v10 = (float)((float)*((unsigned int *)a2 + 23) / (float)*((unsigned int *)a2 + 25)) * *(float *)&v9;
  unint64_t v11 = v8 + 4 * (int)vcvtms_s32_f32(v10);
  unint64_t v12 = v6 + 4 * v5 + 4;
  LOWORD(v10) = *((_WORD *)this + 41);
  LOWORD(v9) = *((_WORD *)a2 + 40);
  SetCompromisePitchTargets(this, a2, (float)LODWORD(v10), (float)v9, (float)((float)((uint64_t)(v11 - (void)v7) >> 2) * 22.05) * 5.0, (float *)a3);
  float v16 = (float)*((unsigned __int16 *)this + 45);
  unsigned int v17 = *((unsigned __int16 *)a2 + 44);
  if (*((_WORD *)this + 45))
  {
    if (*((_DWORD *)this + 24))
    {
      uint64_t v18 = *(void *)this + 32 * *((void *)this + 2);
      if (*(_WORD *)(v18 - 16))
      {
        LOWORD(v13) = *(_WORD *)(v18 - 24);
        float v19 = (float)v13;
        if (*((_WORD *)this + 43))
        {
          *(float *)&double v14 = v16 / (float)*((unsigned __int16 *)this + 43);
          if (*(float *)&v14 > 4.0) {
            *(float *)&double v14 = 4.0;
          }
          float v15 = 0.25;
          if (*(float *)&v14 < 0.25) {
            *(float *)&double v14 = 0.25;
          }
        }
        else
        {
          LODWORD(v1MEOWVectorBase::clear(this + 4) = 1.0;
        }
        float v16 = *(float *)&v14 * v19;
        if (kMTMBPPThreshold)
        {
          MTBEDebugParams::GetParam(kMTMBPPThreshold, (const __CFString *)&qword_1EA8DA668, (uint64_t *)qword_1EA8DA668);
          kMTMBPPThreshold = 0;
        }
        if (v16 > (float)qword_1EA8DA668) {
          float v16 = (float)qword_1EA8DA668;
        }
        unsigned int v7 = (float *)v12;
      }
    }
  }
  float v20 = (float)v17;
  if (v17 && *((_DWORD *)a2 + 23) && (*(_WORD *)(*(void *)a2 + 16) & 1) != 0)
  {
    LOWORD(v20) = *(_WORD *)(*(void *)a2 + 8);
    float v21 = MTMBDemi::FirstFactor(a2, v20, v14, v15) * (float)LODWORD(v20);
    uint64_t v22 = qword_1EA8DA668;
    if (kMTMBPPThreshold)
    {
      MTBEDebugParams::GetParam(kMTMBPPThreshold, (const __CFString *)&qword_1EA8DA668, (uint64_t *)qword_1EA8DA668);
      kMTMBPPThreshold = 0;
      uint64_t v22 = qword_1EA8DA668;
    }
    float v20 = (float)v22;
    if (v21 <= (float)v22) {
      float v20 = v21;
    }
    unint64_t v11 = v8;
  }
  if (v16 == 0.0)
  {
    float v23 = v20;
    if (v20 == 0.0) {
      return;
    }
  }
  else
  {
    if (v20 == 0.0) {
      float v23 = v16;
    }
    else {
      float v23 = v20;
    }
    float v20 = v16;
  }
  if (v11 >= (unint64_t)v7)
  {
    float v24 = 22050.0 / v20;
    float v25 = (float)((float)(22050.0 / v23) - v24) / (float)((uint64_t)(v11 - (void)v7) >> 2);
    do
    {
      if ((unint64_t)v7 >= v12 && (unint64_t)v7 <= v8) {
        *unsigned int v7 = v24;
      }
      float v24 = v25 + v24;
      ++v7;
    }
    while ((unint64_t)v7 <= v11);
  }
}

uint64_t MTMBDemi::LastFrame(MTMBDemi *this)
{
  return *(void *)(*((void *)this + 13) + 40) + 4 * *(void *)(*((void *)this + 13) + 32) + 4;
}

uint64_t MTMBDemi::FirstFrame(MTMBDemi *this)
{
  return *(void *)(*((void *)this + 13) + 40);
}

uint64_t PinPPTarget(float a1, float a2, uint64_t a3, uint64_t a4, float *a5)
{
  if (kMTMBLinearPitchBandwidth)
  {
    MTBEDebugParams::GetParam((const __CFString *)kMTMBLinearPitchBandwidth, (const __CFString *)&dword_1EA8DA6B8, a5, *(float *)&dword_1EA8DA6B8);
    kMTMBLinearPitchBandwidth = 0;
  }
  float v7 = (float)(*(float *)&dword_1EA8DA6B8 * a2) * 0.01;
  float v8 = a2 - v7;
  float v9 = v7 + a2;
  if (v8 < a1) {
    float v8 = a1;
  }
  if (v8 < v9) {
    float v9 = v8;
  }
  return (int)v9;
}

uint64_t MTMBDemi::SetBoundaryPitch(MTMBDemi *this, int a2, float *a3)
{
  int v38 = (int)a3;
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (kMTMBPowerThreshold)
  {
    MTBEDebugParams::GetParam((const __CFString *)kMTMBPowerThreshold, (const __CFString *)&dword_1EA8DA678, a3, *(float *)&dword_1EA8DA678);
    kMTMBPowerThreshold = 0;
  }
  float v4 = *(float *)&dword_1EA8DA678;
  if (kMTMBPPThreshold)
  {
    MTBEDebugParams::GetParam(kMTMBPPThreshold, (const __CFString *)&qword_1EA8DA668, (uint64_t *)qword_1EA8DA668);
    kMTMBPPThreshold = 0;
  }
  uint64_t v39 = qword_1EA8DA668;
  if (kMTMBNumPPConsidered)
  {
    MTBEDebugParams::GetParam((const __CFString *)kMTMBNumPPConsidered, (const __CFString *)&qword_1EA8DA688, (uint64_t *)qword_1EA8DA688);
    kMTMBNumPPConsidered = 0;
  }
  uint64_t v5 = qword_1EA8DA688;
  if (qword_1EA8DA688 <= 3) {
    uint64_t v5 = 3;
  }
  uint64_t v40 = v5;
  memset(v41, 0, sizeof(v41));
  long long v42 = 0u;
  *(void *)((char *)this + 8MEOWVectorBase::clear(this + 4) = 0;
  uint64_t v6 = (_WORD *)((char *)this + 84);
  *(void *)((char *)this + 92) = 0;
  if (*((void *)this + 2))
  {
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBLogBoundaryPitch))
    {
      float v8 = (FILE *)*MEMORY[0x1E4F143C8];
      float v9 = MTMBDemiProperties::Phon(*((MTMBDemiProperties **)this + 13), v43);
      fprintf(v8, "SetBoundaryPitch \"%s\" %d %d\n", v9, a2, v38);
    }
    if (*((uint64_t *)this + 2) < 1)
    {
      __int16 v15 = 0;
      LOWORD(v13) = 0;
      int v11 = 0;
      int v10 = 0;
    }
    else
    {
      int v10 = 0;
      int v11 = 0;
      uint64_t v12 = 0;
      LOWORD(v13) = 0;
      unsigned __int16 v14 = 0;
      __int16 v15 = 0;
      float v16 = *(unsigned __int16 **)this;
      do
      {
        if (v16[8])
        {
          uint64_t v13 = v16[4];
          if (v39 <= v13)
          {
            BOOL v20 = 0;
          }
          else
          {
            BOOL v20 = (float)(MTMBSegment::RawPower((MTMBSegment *)v16) * 0.00012207) > v4;
            uint64_t v13 = v16[4];
          }
          if (!v15) {
            __int16 v15 = v13;
          }
          uint64_t v17 = v13;
          if (v20
            || (_WORD)v12
            && (LOWORD(v7) = *(_WORD *)(*(void *)(*((void *)&v41[0] + 1)
                                                  + (((unint64_t)(*((void *)&v42 + 1) + v42 - 1) >> 8) & 0xFFFFFFFFFFFFF8))
                                      + 2 * ((*((void *)&v42 + 1) + v42 - 1) & 0x7FF)),
                fabsf((float)((float)v13 / (float)LODWORD(v7)) + -1.0) < 0.05)
            && (uint64_t v17 = v12, fabsf((float)((float)v13 / (float)(unsigned __int16)v12) + -1.0) < 0.15))
          {
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBLogBoundaryPitch)) {
              fprintf((FILE *)*MEMORY[0x1E4F143C8], " %d", v16[4]);
            }
            __int16 v21 = v16[4];
            if (!v14) {
              unsigned __int16 v14 = v16[4];
            }
            *((_DWORD *)this + --*(_WORD *)(this + 24) = 0;
            PPRingBuffer::push_back((PPRingBuffer *)&v40, v21);
            if (a2 && !*v6) {
              *uint64_t v6 = v16[4];
            }
            if (v38) {
              *((_WORD *)this + 43) = v16[4];
            }
            if (*((void *)&v42 + 1) != v40) {
              goto LABEL_56;
            }
            unsigned int v22 = PPRingBuffer::min((PPRingBuffer *)&v40);
            unsigned int v24 = PPRingBuffer::max((PPRingBuffer *)&v40);
            if (kMTMBPPRangeTheshold)
            {
              MTBEDebugParams::GetParam((const __CFString *)kMTMBPPRangeTheshold, (const __CFString *)&dword_1EA8DA698, v23, *(float *)&dword_1EA8DA698);
              kMTMBPPRangeTheshold = 0;
            }
            float v7 = (float)(22050.0 / (float)v22) - (float)(22050.0 / (float)v24);
            if (v7 >= *(float *)&dword_1EA8DA698) {
              goto LABEL_56;
            }
            if ((v38 & 1) == 0)
            {
              if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBLinearPitchUseMedian)) {
                __int16 v25 = PPRingBuffer::median((PPRingBuffer *)&v40);
              }
              else {
                __int16 v25 = *(_WORD *)(*(void *)(*((void *)&v41[0] + 1)
              }
                                           + (((unint64_t)(*((void *)&v42 + 1) + v42 - 1) >> 8) & 0xFFFFFFFFFFFFF8))
                               + 2 * ((*((void *)&v42 + 1) + v42 - 1) & 0x7FF));
              *((_WORD *)this + 43) = v25;
            }
            if (!*v6)
            {
              int v10 = 0;
              if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBLinearPitchUseMedian)) {
                *uint64_t v6 = PPRingBuffer::median((PPRingBuffer *)&v40);
              }
              else {
                *uint64_t v6 = *(_WORD *)(*(void *)(*((void *)&v41[0] + 1)
              }
                                           + (((unint64_t)v42 >> 8) & 0xFFFFFFFFFFFFF8))
                               + 2 * (v42 & 0x7FF));
            }
            else
            {
LABEL_56:
              int v10 = 0;
            }
          }
          else
          {
            if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBLogBoundaryPitch)) {
              fprintf((FILE *)*MEMORY[0x1E4F143C8], " (%d)", v16[4]);
            }
            PPRingBuffer::clear((PPRingBuffer *)&v40);
            int v26 = v16[4];
            if (!v14) {
              *((_DWORD *)this + 23) += v26;
            }
            uint64_t v17 = 0;
            int v10 = 0;
            *((_DWORD *)this + 24) += v26;
          }
        }
        else
        {
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBLogBoundaryPitch)) {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], " <%d>", v16[4]);
          }
          if (!v14) {
            *((_DWORD *)this + 23) += v16[4];
          }
          PPRingBuffer::clear((PPRingBuffer *)&v40);
          uint64_t v17 = 0;
          int v18 = v16[4];
          if (v15) {
            int v19 = 0;
          }
          else {
            int v19 = v16[4];
          }
          v11 += v19;
          *((_DWORD *)this + 24) += v18;
          v10 += v18;
        }
        v16 += 16;
        uint64_t v12 = v17;
      }
      while ((unint64_t)v16 < *(void *)this + 32 * *((void *)this + 2));
    }
    if (*v6)
    {
      if (*((_WORD *)this + 43)) {
        goto LABEL_68;
      }
      *((_WORD *)this + 43) = v13;
    }
    else
    {
      *((_WORD *)this + 42) = v15;
      *((_WORD *)this + 43) = v13;
      *((_DWORD *)this + 23) = v11;
    }
    *((_DWORD *)this + --*(_WORD *)(this + 24) = v10;
LABEL_68:
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBWordLinearPitch)
      && (double v27 = (MTMBDemiProperties *)*((void *)this + 13)) != 0
      && (MTMBDemiProperties::UseWordPitch(v27) & 1) == 0
      && (uint64_t v28 = *((void *)this + 13), (v29 = *(void *)(v28 + 32)) != 0)
      && *v6)
    {
      unsigned int v30 = *((_DWORD *)this + 25);
      float v31 = (float)v29;
      uint64_t v32 = *(void *)(v28 + 40);
      float v33 = 22050.0
          / *(float *)(v32
                     + 4 * (int)vcvtms_s32_f32((float)((float)*((unsigned int *)this + 23) / (float)v30) * (float)v29));
      unsigned int v34 = v30 - *((_DWORD *)this + 24);
      *((_WORD *)this + 40) = (int)v33;
      int v35 = (int)(float)(22050.0 / *(float *)(v32 + 4 * (int)vcvtms_s32_f32((float)((float)v34 / (float)v30) * v31)));
    }
    else
    {
      *((_WORD *)this + 40) = *((_WORD *)this + 42);
      LOWORD(v35) = *((_WORD *)this + 43);
    }
    *((_WORD *)this + 4MEOWVectorBase::~MEOWVectorBase(this + 1) = v35;
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBLogBoundaryPitch)) {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "\n -> %d\\%d %d\\%d\n", *((unsigned __int16 *)this + 42), *((_DWORD *)this + 23), *((unsigned __int16 *)this + 43), *((_DWORD *)this + 24));
    }
  }
  return std::deque<unsigned short>::~deque[abi:ne180100](v41);
}

void sub_1DA4D5454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void PPRingBuffer::push_back(PPRingBuffer *this, __int16 a2)
{
  __int16 v4 = a2;
  uint64_t v2 = (void *)((char *)this + 8);
  uint64_t v3 = *((void *)this + 6);
  if (v3 == *(void *)this)
  {
    ++*((void *)this + 5);
    *((void *)this + 6) = v3 - 1;
    std::deque<unsigned short>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 8, 1);
  }
  std::deque<unsigned short>::push_back(v2, &v4);
}

uint64_t PPRingBuffer::min(PPRingBuffer *this)
{
  std::deque<unsigned short>::deque((uint64_t)&v7, (void *)this + 1);
  uint64_t v1 = (unsigned __int16 *)(v8 + 8 * (v10 >> 11));
  if (v9 == v8)
  {
    uint64_t v2 = 0;
    __int16 v4 = 0;
    uint64_t v3 = (unsigned __int16 **)(v8 + 8 * ((v11 + v10) >> 11));
  }
  else
  {
    uint64_t v2 = (unsigned __int16 *)(*(void *)v1 + 2 * (v10 & 0x7FF));
    uint64_t v3 = (unsigned __int16 **)(v8 + 8 * ((v11 + v10) >> 11));
    __int16 v4 = &(*v3)[(v11 + v10) & 0x7FF];
  }
  std::__sort_dispatch[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::__less<void,void>>(v1, v2, v3, v4, (uint64_t)&v12);
  uint64_t v5 = *(unsigned __int16 *)(*(void *)(v8 + ((v10 >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * (v10 & 0x7FF));
  std::deque<unsigned short>::~deque[abi:ne180100](&v7);
  return v5;
}

void sub_1DA4D5598(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::deque<unsigned short>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t PPRingBuffer::max(PPRingBuffer *this)
{
  std::deque<unsigned short>::deque((uint64_t)&v7, (void *)this + 1);
  uint64_t v1 = (unsigned __int16 *)(v8 + 8 * (v10 >> 11));
  if (v9 == v8)
  {
    uint64_t v2 = 0;
    __int16 v4 = 0;
    uint64_t v3 = (unsigned __int16 **)(v8 + 8 * ((v11 + v10) >> 11));
  }
  else
  {
    uint64_t v2 = (unsigned __int16 *)(*(void *)v1 + 2 * (v10 & 0x7FF));
    uint64_t v3 = (unsigned __int16 **)(v8 + 8 * ((v11 + v10) >> 11));
    __int16 v4 = &(*v3)[(v11 + v10) & 0x7FF];
  }
  std::__sort_dispatch[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::__less<void,void>>(v1, v2, v3, v4, (uint64_t)&v12);
  uint64_t v5 = *(unsigned __int16 *)(*(void *)(v8 + (((v11 + v10 - 1) >> 8) & 0xFFFFFFFFFFFFF8))
                           + 2 * ((v11 + v10 - 1) & 0x7FF));
  std::deque<unsigned short>::~deque[abi:ne180100](&v7);
  return v5;
}

void sub_1DA4D5670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::deque<unsigned short>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t PPRingBuffer::median(PPRingBuffer *this)
{
  std::deque<unsigned short>::deque((uint64_t)&v8, (void *)this + 1);
  uint64_t v1 = (unsigned __int16 *)(v9 + 8 * (v11 >> 11));
  if (v10 == v9)
  {
    uint64_t v2 = 0;
    __int16 v4 = 0;
    uint64_t v3 = (unsigned __int16 **)(v9 + 8 * ((v12 + v11) >> 11));
  }
  else
  {
    uint64_t v2 = (unsigned __int16 *)(*(void *)v1 + 2 * (v11 & 0x7FF));
    uint64_t v3 = (unsigned __int16 **)(v9 + 8 * ((v12 + v11) >> 11));
    __int16 v4 = &(*v3)[(v12 + v11) & 0x7FF];
  }
  std::__sort_dispatch[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::__less<void,void>>(v1, v2, v3, v4, (uint64_t)&v13);
  unint64_t v5 = v11 + (v12 >> 1);
  uint64_t v6 = *(unsigned __int16 *)(*(void *)(v9 + ((v5 >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * (v5 & 0x7FF));
  if ((v12 & 1) == 0) {
    uint64_t v6 = (*(unsigned __int16 *)(*(void *)(v9 + (((v5 - 1) >> 8) & 0xFFFFFFFFFFFFF8)) + 2 * ((v5 - 1) & 0x7FF))
  }
        + v6) >> 1;
  std::deque<unsigned short>::~deque[abi:ne180100](&v8);
  return v6;
}

void sub_1DA4D5768(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::deque<unsigned short>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void PPRingBuffer::clear(PPRingBuffer *this)
{
  uint64_t v2 = (void **)*((void *)this + 2);
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 6) = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *((void *)this + 3);
      uint64_t v2 = (void **)(*((void *)this + 2) + 8);
      *((void *)this + 2) = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 1024;
  }
  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v6 = 2048;
  }
  *((void *)this + 5) = v6;
LABEL_8:

  std::deque<unsigned short>::resize((void *)this + 1, 0);
}

void MTMBModelPitchInterpolator::~MTMBModelPitchInterpolator(MTMBModelPitchInterpolator *this)
{
}

void MTMBSlackPitchInterpolator::~MTMBSlackPitchInterpolator(void **this)
{
  *this = &unk_1F3480808;
  MEOWVectorBase::~MEOWVectorBase(this + 4);
}

{
  uint64_t vars8;

  *this = &unk_1F3480808;
  MEOWVectorBase::~MEOWVectorBase(this + 4);

  JUMPOUT(0x1E016FF00);
}

void MTMBLinearPitchInterpolator::~MTMBLinearPitchInterpolator(MTMBLinearPitchInterpolator *this)
{
}

void MTMBSawtoothPitchInterpolator::~MTMBSawtoothPitchInterpolator(MTMBSawtoothPitchInterpolator *this)
{
}

uint64_t MTMBSawtoothPitchInterpolator::ForceFirst(uint64_t this)
{
  *(unsigned char *)(this + 68) = 0;
  return this;
}

uint64_t MTMBSawtoothPitchInterpolator::ForceSecond(uint64_t this)
{
  *(unsigned char *)(this + 68) = 1;
  return this;
}

uint64_t std::deque<unsigned short>::deque(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v4 = a2[4];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = (char **)(v5 + 8 * (v4 >> 11));
  if (v6 == v5)
  {
    uint64_t v8 = 0;
    unint64_t v11 = 0;
    uint64_t v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 11));
  }
  else
  {
    uint64_t v8 = &(*v7)[2 * (v4 & 0x7FF)];
    unint64_t v9 = a2[5] + v4;
    uint64_t v10 = (char *)(v5 + 8 * (v9 >> 11));
    unint64_t v11 = (char *)(*(void *)v10 + 2 * (v9 & 0x7FF));
  }
  std::deque<unsigned short>::__append<std::__deque_iterator<unsigned short,unsigned short const*,unsigned short const&,unsigned short const* const*,long,2048l>,0>((void *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_1DA4D59B0(_Unwind_Exception *a1)
{
  std::__split_buffer<MTMBDemi *>::~__split_buffer(v1);
  _Unwind_Resume(a1);
}

void *std::deque<unsigned short>::__append<std::__deque_iterator<unsigned short,unsigned short const*,unsigned short const&,unsigned short const* const*,long,2048l>,0>(void *a1, char **a2, char *a3, char *a4, char *a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = ((uint64_t)&a5[-*(void *)a4] >> 1) + ((a4 - (char *)a2) << 8) - ((a3 - *a2) >> 1);
  }
  return std::deque<unsigned short>::__append_with_size[abi:ne180100]<std::__deque_iterator<unsigned short,unsigned short const*,unsigned short const&,unsigned short const* const*,long,2048l>>(a1, a2, a3, v5);
}

void *std::deque<unsigned short>::__append_with_size[abi:ne180100]<std::__deque_iterator<unsigned short,unsigned short const*,unsigned short const&,unsigned short const* const*,long,2048l>>(void *a1, char **a2, char *a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = ((v9 - v8) << 8) - 1;
  }
  unint64_t v11 = a1[5] + a1[4];
  unint64_t v12 = v10 - v11;
  if (a4 > v12)
  {
    std::deque<unsigned short>::__add_back_capacity(a1, a4 - v12);
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[4] + a1[5];
  }
  char v13 = (void *)(v8 + 8 * (v11 >> 11));
  if (v9 == v8) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *v13 + 2 * (v11 & 0x7FF);
  }
  v24[0] = v8 + 8 * (v11 >> 11);
  v24[1] = v14;
  uint64_t result = std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)v24, a4);
  if (v14 != v16)
  {
    uint64_t v17 = a1[5];
    do
    {
      if (v13 == result) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = *v13 + 4096;
      }
      if (v14 == v18)
      {
        uint64_t v18 = v14;
      }
      else
      {
        int v19 = *a2;
        BOOL v20 = (_WORD *)v14;
        do
        {
          __int16 v21 = *(_WORD *)a3;
          a3 += 2;
          *v20++ = v21;
          if (a3 - v19 == 4096)
          {
            unsigned int v22 = a2[1];
            ++a2;
            int v19 = v22;
            a3 = v22;
          }
        }
        while (v20 != (_WORD *)v18);
      }
      v17 += (v18 - v14) >> 1;
      if (v13 == result) {
        break;
      }
      uint64_t v23 = v13[1];
      ++v13;
      uint64_t v14 = v23;
    }
    while (v23 != v16);
    a1[5] = v17;
  }
  return result;
}

void std::deque<unsigned short>::__add_back_capacity(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x7FF) != 0) {
    unint64_t v6 = (v5 >> 11) + 1;
  }
  else {
    unint64_t v6 = v5 >> 11;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 11) {
    unint64_t v8 = v7 >> 11;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 11)
  {
    for (a1[4] = v7 - (v8 << 11); v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      uint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          unint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>((uint64_t)(a1 + 3), v28);
          float v31 = &v29[8 * (v28 >> 2)];
          uint64_t v32 = (uint64_t *)a1[1];
          uint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            uint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            int v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)int v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          unsigned int v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            uint64_t v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          __int16 v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            uint64_t v3 = (char *)a1[1];
          }
          double v27 = &v3[-8 * (v24 >> 1)];
          uint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)uint64_t v3 = v18;
      uint64_t v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<MTMBDemi *>::push_back(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<MTMBDemi *>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 2047;
          }
          else {
            uint64_t v64 = 2048;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 11);
      if (v8)
      {
        unint64_t v66 = (char *)a1[2];
        do
        {
          unint64_t v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          int v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              unint64_t v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>((uint64_t)(a1 + 3), v78);
              uint64_t v81 = &v79[8 * (v78 >> 2)];
              unint64_t v82 = (uint64_t *)a1[1];
              unint64_t v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                unint64_t v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                float v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)float v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              float v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                unint64_t v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              unint64_t v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                unint64_t v66 = (char *)a1[1];
              }
              unint64_t v77 = &v66[-8 * (v74 >> 1)];
              unint64_t v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)unint64_t v66 = v69;
          unint64_t v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      BOOL v91 = a1 + 3;
      if (v13) {
        __int16 v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>((uint64_t)(a1 + 3), v13);
      }
      else {
        __int16 v15 = 0;
      }
      uint64_t v38 = v8 << 11;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + MEOWVectorBase::~MEOWVectorBase(this + 1) = &v15[8 * v13];
      do
      {
        unint64_t v88 = operator new(0x1000uLL);
        std::__split_buffer<MTMBDemi *>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        uint64_t v39 = (void *)a1[1];
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              float v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TheoreticalAccentShape::KeyPoint>>((uint64_t)v91, v48);
              float v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                float v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)float v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              unint64_t v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + MEOWVectorBase::~MEOWVectorBase(this + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              float v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }
              char v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          uint64_t v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      float v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<MTMBDemi *>::push_front((uint64_t)__p, v57);
      }
      float v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + MEOWVectorBase::~MEOWVectorBase(this + 1) = v61;
      long long v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_1DA4D6048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 1);
    if (v4 < 1) {
      result -= (unint64_t)(2047 - v4) >> 11;
    }
    else {
      result += (unint64_t)v4 >> 11;
    }
  }
  return result;
}

unsigned __int16 *std::__sort_dispatch[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::__less<void,void>>(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 **a3, unsigned __int16 *a4, uint64_t a5)
{
  if (a4 == a2 || (v5 = a4 - *a3 + (((char *)a3 - (char *)a1) << 8), uint64_t v6 = (uint64_t)a2 - *(void *)a1, v5 == v6 >> 1)) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = 63 - __clz(v5 - (v6 >> 1));
  }
  return std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,false>(a1, a2, a3, a4, a5, 2 * v7, 1);
}

unsigned __int16 *std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,false>(unsigned __int16 *result, unsigned __int16 *a2, unsigned __int16 **a3, unsigned __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v130 = (unsigned __int16 **)result;
  v131 = a2;
  BOOL v7 = a2 > a4;
  if (a2 == a4) {
    return result;
  }
  uint64_t v10 = a4;
  unint64_t v12 = a2;
  for (uint64_t i = a6 - 1; ; --i)
  {
    unint64_t v14 = (unsigned __int16 *)v130;
    __int16 v15 = *a3;
    uint64_t v16 = *v130;
    unint64_t v17 = v10 - *a3 + (((char *)a3 - (char *)v130) << 8) - (v12 - *v130);
    if (!v7)
    {
      switch(v17)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          if (v10 == v15) {
            uint64_t v10 = *(a3 - 1) + 2048;
          }
          unsigned int v96 = *(v10 - 1);
          if (v96 < *v12)
          {
            unsigned __int16 v97 = *v12;
            unsigned __int16 *v12 = v96;
            *(v10 - MEOWVectorBase::~MEOWVectorBase(this + 1) = v97;
          }
          return result;
        case 3uLL:
          uint64_t v98 = (char *)v12 - (char *)v16;
          uint64_t v99 = v12 - v16;
          if (v98 < -1)
          {
            unint64_t v113 = 2046 - v99;
            unint64_t v101 = (unsigned __int16 *)&v130[-(v113 >> 11)];
            uint64_t v102 = (_WORD *)(*(void *)v101 + 2 * (~(_WORD)v113 & 0x7FF));
          }
          else
          {
            unint64_t v100 = v99 + 1;
            unint64_t v101 = (unsigned __int16 *)&v130[v100 >> 11];
            uint64_t v102 = (_WORD *)(*(void *)v101 + 2 * (v100 & 0x7FF));
          }
          if (v10 == v15)
          {
            uint64_t v114 = (uint64_t)*--a3;
            uint64_t v10 = (unsigned __int16 *)(v114 + 4096);
          }
          return (unsigned __int16 *)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((uint64_t)v130, v12, (uint64_t)v101, v102, (uint64_t)a3, v10 - 1);
        case 4uLL:
          uint64_t v103 = (char *)v12 - (char *)v16;
          uint64_t v104 = v12 - v16;
          if (v103 < -1)
          {
            int v105 = (unsigned __int16 *)&v130[-((unint64_t)(2046 - v104) >> 11)];
            int v106 = (_WORD *)(*(void *)v105 + 2 * (~(2046 - (_WORD)v104) & 0x7FF));
            if ((unint64_t)v103 < 0xFFFFFFFFFFFFFFFDLL)
            {
              unint64_t v123 = 2045 - v104;
              int v115 = (unsigned __int16 *)&v130[-(v123 >> 11)];
              v116 = (_WORD *)(*(void *)v115 + 2 * (~(_WORD)v123 & 0x7FF));
LABEL_79:
              if (v10 == v15)
              {
                uint64_t v124 = (uint64_t)*--a3;
                uint64_t v10 = (unsigned __int16 *)(v124 + 4096);
              }
              return (unsigned __int16 *)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((uint64_t)v130, v12, (uint64_t)v105, v106, (uint64_t)v115, v116, (uint64_t)a3, v10 - 1);
            }
            unint64_t v107 = 1;
          }
          else
          {
            int v105 = (unsigned __int16 *)&v130[(unint64_t)(v104 + 1) >> 11];
            int v106 = (_WORD *)(*(void *)v105 + 2 * ((v104 + 1) & 0x7FF));
            unint64_t v107 = v104 + 2;
          }
          int v115 = (unsigned __int16 *)&v130[v107 >> 11];
          v116 = (_WORD *)(*(void *)v115 + 2 * (v107 & 0x7FF));
          goto LABEL_79;
        case 5uLL:
          uint64_t v108 = (char *)v12 - (char *)v16;
          uint64_t v109 = v12 - v16;
          if (v108 < -1)
          {
            size_t v110 = (unsigned __int16 *)&v130[-((unint64_t)(2046 - v109) >> 11)];
            uint64_t v111 = (_WORD *)(*(void *)v110 + 2 * (~(2046 - (_WORD)v109) & 0x7FF));
            if ((unint64_t)v108 < 0xFFFFFFFFFFFFFFFDLL)
            {
              int v117 = (unsigned __int16 *)&v130[-((unint64_t)(2045 - v109) >> 11)];
              unsigned __int8 v118 = (_WORD *)(*(void *)v117 + 2 * (~(2045 - (_WORD)v109) & 0x7FF));
              if ((unint64_t)v108 < 0xFFFFFFFFFFFFFFFBLL)
              {
                unint64_t v125 = 2044 - v109;
                SLWordTagSet v120 = (unsigned __int16 *)&v130[-(v125 >> 11)];
                v121 = (_WORD *)(*(void *)v120 + 2 * (~(_WORD)v125 & 0x7FF));
LABEL_74:
                if (v10 == v15)
                {
                  uint64_t v122 = (uint64_t)*--a3;
                  uint64_t v10 = (unsigned __int16 *)(v122 + 4096);
                }
                return (unsigned __int16 *)std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((uint64_t)v130, v12, (uint64_t)v110, v111, (uint64_t)v117, v118, (uint64_t)v120, v121, (uint64_t)a3, v10 - 1);
              }
              unint64_t v119 = 1;
LABEL_73:
              SLWordTagSet v120 = (unsigned __int16 *)&v130[v119 >> 11];
              v121 = (_WORD *)(*(void *)v120 + 2 * (v119 & 0x7FF));
              goto LABEL_74;
            }
            unint64_t v112 = 1;
          }
          else
          {
            size_t v110 = (unsigned __int16 *)&v130[(unint64_t)(v109 + 1) >> 11];
            uint64_t v111 = (_WORD *)(*(void *)v110 + 2 * ((v109 + 1) & 0x7FF));
            unint64_t v112 = v109 + 2;
          }
          int v117 = (unsigned __int16 *)&v130[v112 >> 11];
          unsigned __int8 v118 = (_WORD *)(*(void *)v117 + 2 * (v112 & 0x7FF));
          unint64_t v119 = v109 + 3;
          goto LABEL_73;
        default:
          JUMPOUT(0);
      }
    }
    if ((uint64_t)v17 <= 23)
    {
      if (a7) {
        return (unsigned __int16 *)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(v130, v12, (uint64_t)a3, v10);
      }
      else {
        return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((unsigned __int16 *)v130, v12, (uint64_t)a3, v10);
      }
    }
    if (i == -1) {
      break;
    }
    uint64_t v18 = v17 >> 1;
    uint64_t v19 = std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)&v130, v17 >> 1);
    if (v17 < 0x81)
    {
      uint64_t v24 = (char *)v10 - (char *)*a3;
      uint64_t v25 = v24 >> 1;
      if (v24 >= 3)
      {
        unint64_t v26 = v25 - 1;
        uint64_t v34 = &a3[v26 >> 11];
        int v35 = &(*v34)[v26 & 0x7FF];
      }
      else
      {
        unint64_t v33 = 2048 - v25;
        uint64_t v34 = &a3[-(v33 >> 11)];
        int v35 = &(*v34)[~(_WORD)v33 & 0x7FF];
      }
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((uint64_t)v19, v20, (uint64_t)v130, v131, (uint64_t)v34, v35);
      if (a7)
      {
LABEL_33:
        uint64_t v36 = (char **)v130;
        unsigned int v37 = (char *)v131;
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v21 = (char *)v10 - (char *)*a3;
      uint64_t v22 = v21 >> 1;
      if (v21 >= 3)
      {
        unint64_t v23 = v22 - 1;
        unint64_t v28 = &a3[v23 >> 11];
        unint64_t v29 = &(*v28)[v23 & 0x7FF];
      }
      else
      {
        unint64_t v27 = 2048 - v22;
        unint64_t v28 = &a3[-(v27 >> 11)];
        unint64_t v29 = &(*v28)[~(_WORD)v27 & 0x7FF];
      }
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((uint64_t)v14, v12, (uint64_t)v19, v20, (uint64_t)v28, v29);
      uint64_t v30 = (char *)v131 - (char *)*v130;
      uint64_t v31 = v30 >> 1;
      if (v30 >= -1)
      {
        unint64_t v32 = v31 + 1;
        int64_t v41 = (unsigned __int16 *)&v130[v32 >> 11];
        uint64_t v42 = *(void *)v41;
        uint64_t v43 = v32 & 0x7FF;
      }
      else
      {
        unint64_t v40 = 2046 - v31;
        int64_t v41 = (unsigned __int16 *)&v130[-(v40 >> 11)];
        uint64_t v42 = *(void *)v41;
        uint64_t v43 = ~v40 & 0x7FFLL;
      }
      uint64_t v44 = (_WORD *)(v42 + 2 * v43);
      int64_t v46 = std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)&v130, v18 - 1);
      uint64_t v47 = (char *)v10 - (char *)*a3;
      uint64_t v48 = v47 >> 1;
      if (v47 < 5)
      {
        unint64_t v54 = 2049 - v48;
        uint64_t v50 = &a3[-(v54 >> 11)];
        float v51 = &(*v50)[~(_WORD)v54 & 0x7FF];
      }
      else
      {
        unint64_t v49 = v48 - 2;
        uint64_t v50 = &a3[v49 >> 11];
        float v51 = &(*v50)[v49 & 0x7FF];
      }
      uint64_t v55 = a5;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((uint64_t)v41, v44, (uint64_t)v46, v45, (uint64_t)v50, v51);
      uint64_t v56 = (char *)v131 - (char *)*v130;
      uint64_t v57 = v56 >> 1;
      if (v56 < -3)
      {
        unint64_t v62 = 2045 - v57;
        float v59 = (unsigned __int16 *)&v130[-(v62 >> 11)];
        uint64_t v60 = *(void *)v59;
        uint64_t v61 = ~v62 & 0x7FFLL;
      }
      else
      {
        unint64_t v58 = v57 + 2;
        float v59 = (unsigned __int16 *)&v130[v58 >> 11];
        uint64_t v60 = *(void *)v59;
        uint64_t v61 = v58 & 0x7FF;
      }
      unint64_t v63 = (_WORD *)(v60 + 2 * v61);
      uint64_t v64 = std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)&v130, v18 + 1);
      unint64_t v66 = v65;
      __int16 v126 = v10;
      uint64_t v67 = (char *)v10 - (char *)*a3;
      uint64_t v68 = v67 >> 1;
      uint64_t v69 = a7;
      if (v67 < 7)
      {
        unint64_t v73 = 2050 - v68;
        uint64_t v71 = &a3[-(v73 >> 11)];
        uint64_t v72 = &(*v71)[~(_WORD)v73 & 0x7FF];
      }
      else
      {
        unint64_t v70 = v68 - 3;
        uint64_t v71 = &a3[v70 >> 11];
        uint64_t v72 = &(*v71)[v70 & 0x7FF];
      }
      uint64_t v74 = v63;
      a5 = v55;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((uint64_t)v59, v74, (uint64_t)v64, v66, (uint64_t)v71, v72);
      unint64_t v75 = std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)&v130, v18 - 1);
      unint64_t v77 = v76;
      unint64_t v78 = std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)&v130, v18);
      uint64_t v80 = v79;
      uint64_t v81 = std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)&v130, v18 + 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((uint64_t)v75, v77, (uint64_t)v78, v80, (uint64_t)v81, v82);
      std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)&v130, v18);
      unsigned __int16 v83 = *v131;
      unsigned __int16 *v131 = *v84;
      unsigned __int16 *v84 = v83;
      a7 = v69;
      uint64_t v10 = v126;
      if (a7) {
        goto LABEL_33;
      }
    }
    uint64_t v36 = (char **)v130;
    unsigned int v37 = (char *)v131;
    uint64_t v38 = (char *)v131 - (char *)*v130;
    uint64_t v39 = v38 >> 1;
    if (v38 >= 3) {
      uint64_t v52 = &(*(unsigned __int16 **)((char *)v130 + (((unint64_t)(v39 - 1) >> 8) & 0xFFFFFFFFFFFFF8)))[(v39 - 1) & 0x7FF];
    }
    else {
      uint64_t v52 = &v130[-((unint64_t)(2048 - v39) >> 11)][~(2048 - (_WORD)v39) & 0x7FF];
    }
    if (*v52 >= *v131)
    {
      uint64_t result = (unsigned __int16 *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::__less<void,void> &>((char **)v130, v131, a3, v10);
      a7 = 0;
      v130 = (unsigned __int16 **)result;
      v131 = v53;
      goto LABEL_46;
    }
LABEL_34:
    std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::__less<void,void> &>(v36, v37, (char **)a3, (char *)v10, (uint64_t)&v127);
    float v85 = v127;
    uint64_t v86 = v128;
    if (!v129) {
      goto LABEL_42;
    }
    int v87 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((char *)v130, v131, v127, v128);
    uint64_t v88 = (uint64_t)v86 - *(void *)v85;
    uint64_t v89 = v88 >> 1;
    if (v88 >= -1)
    {
      unint64_t v90 = v89 + 1;
      uint64_t v92 = &v85[8 * (v90 >> 11)];
      int v93 = (unsigned __int16 *)(*(void *)v92 + 2 * (v90 & 0x7FF));
    }
    else
    {
      unint64_t v91 = 2046 - v89;
      uint64_t v92 = &v85[-8 * (v91 >> 11)];
      int v93 = (unsigned __int16 *)(*(void *)v92 + 2 * (~(_WORD)v91 & 0x7FF));
    }
    uint64_t result = (unsigned __int16 *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(v92, v93, (char *)a3, v10);
    if (result)
    {
      a3 = (unsigned __int16 **)v85;
      uint64_t v10 = v86;
      if (v87) {
        return result;
      }
      goto LABEL_46;
    }
    if (!v87)
    {
LABEL_42:
      uint64_t result = (unsigned __int16 *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,false>(v130, v131, v85, v86, a5, i, a7 & 1);
      a7 = 0;
    }
    int v94 = v86 + 1;
    if ((unsigned __int16 *)((char *)v86 - *(void *)v85 + 2) == (unsigned __int16 *)4096)
    {
      unint64_t v95 = (unsigned __int16 *)*((void *)v85 + 1);
      v85 += 8;
      int v94 = v95;
    }
    v130 = (unsigned __int16 **)v85;
    v131 = v94;
LABEL_46:
    unint64_t v12 = v131;
    BOOL v7 = v10 > v131;
    if (v10 == v131) {
      return result;
    }
  }
  if (v10 != v12) {
    return (unsigned __int16 *)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((char *)v130, v12, (char **)a3, v10, (uint64_t)a3, v10, a5);
  }
  return result;
}

unsigned __int16 **std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(unsigned __int16 **result, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  if (a2 != a4)
  {
    uint64_t v4 = a2 + 1;
    uint64_t v5 = *result;
    while (1)
    {
      if ((char *)v4 - (char *)v5 == 4096)
      {
        uint64_t v6 = result[1];
        ++result;
        uint64_t v5 = v6;
        uint64_t v4 = v6;
      }
      if (v4 == a4) {
        break;
      }
      BOOL v7 = result;
      uint64_t v8 = (uint64_t)v4;
      if (v4 == v5)
      {
        BOOL v7 = result - 1;
        uint64_t v8 = (uint64_t)(*(result - 1) + 2048);
      }
      unsigned int v11 = *(unsigned __int16 *)(v8 - 2);
      unint64_t v9 = (unsigned __int16 *)(v8 - 2);
      unsigned __int16 v10 = v11;
      unsigned int v12 = *v4;
      if (v12 < v11)
      {
        unint64_t v13 = v4;
        while (1)
        {
          unsigned __int16 *v13 = v10;
          if (v9 == a2) {
            break;
          }
          unint64_t v14 = v9;
          if (v9 == *v7)
          {
            uint64_t v15 = (uint64_t)*--v7;
            unint64_t v9 = (unsigned __int16 *)(v15 + 4096);
          }
          unsigned int v16 = *--v9;
          unsigned __int16 v10 = v16;
          unint64_t v13 = v14;
          if (v12 >= v16) {
            goto LABEL_16;
          }
        }
        unint64_t v14 = a2;
LABEL_16:
        *unint64_t v14 = v12;
      }
      ++v4;
    }
  }
  return result;
}

unsigned __int16 *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(unsigned __int16 *result, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4)
{
  if (a2 != a4)
  {
    uint64_t v4 = (uint64_t)a2 - *(void *)result;
    uint64_t v5 = v4 >> 1;
    if (v4 < -1)
    {
      unint64_t v8 = 2046 - v5;
      __int16 v6 = ~(_WORD)v8;
      BOOL v7 = &result[-4 * (v8 >> 11)];
    }
    else
    {
      __int16 v6 = v5 + 1;
      BOOL v7 = &result[4 * ((unint64_t)(v5 + 1) >> 11)];
    }
    unint64_t v9 = *(unsigned __int16 **)v7;
    unsigned __int16 v10 = (unsigned __int16 *)(*(void *)v7 + 2 * (v6 & 0x7FF));
    while (v10 != a4)
    {
      uint64_t v11 = v10 - v9;
      if ((char *)v10 - (char *)v9 < 3)
      {
        unint64_t v14 = 2048 - v11;
        __int16 v12 = ~(_WORD)v14;
        unint64_t v13 = (unsigned __int16 **)&v7[-4 * (v14 >> 11)];
      }
      else
      {
        __int16 v12 = v11 - 1;
        unint64_t v13 = (unsigned __int16 **)&v7[4 * ((unint64_t)(v11 - 1) >> 11)];
      }
      uint64_t v15 = *v13;
      unsigned int v16 = &(*v13)[v12 & 0x7FF];
      unsigned int v17 = *v10;
      unsigned int v18 = *v16;
      if (v17 < v18)
      {
        uint64_t result = v10;
        do
        {
          uint64_t v19 = v16;
          *uint64_t result = v18;
          if (v16 == v15)
          {
            uint64_t v20 = *--v13;
            uint64_t v15 = v20;
            unsigned int v16 = v20 + 2048;
          }
          unsigned int v21 = *--v16;
          LOWORD(v18) = v21;
          uint64_t result = v19;
        }
        while (v17 < v21);
        *uint64_t v19 = v17;
      }
      if ((char *)++v10 - (char *)v9 == 4096)
      {
        uint64_t v22 = (unsigned __int16 *)*((void *)v7 + 1);
        v7 += 4;
        unint64_t v9 = v22;
        unsigned __int16 v10 = v22;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(uint64_t a1, _WORD *a2, uint64_t a3, _WORD *a4, uint64_t a5, _WORD *a6)
{
  unsigned int v6 = (unsigned __int16)*a4;
  unsigned int v7 = (unsigned __int16)*a2;
  unsigned int v8 = (unsigned __int16)*a6;
  if (v6 < v7)
  {
    if (v8 < v6)
    {
      *a2 = v8;
      *a6 = v7;
      return 1;
    }
    *a2 = v6;
    *a4 = v7;
    unsigned int v11 = (unsigned __int16)*a6;
    if (v11 >= v7) {
      return 1;
    }
    *a4 = v11;
    *a6 = v7;
    return 2;
  }
  if (v8 < v6)
  {
    *a4 = v8;
    *a6 = v6;
    unsigned int v9 = (unsigned __int16)*a4;
    unsigned int v10 = (unsigned __int16)*a2;
    if (v9 >= v10) {
      return 1;
    }
    *a2 = v9;
    *a4 = v10;
    return 2;
  }
  return 0;
}

char **std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::__less<void,void> &>(char **result, unsigned __int16 *a2, unsigned __int16 **a3, unsigned __int16 *a4)
{
  unsigned int v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = (char *)a4 - (char *)*a3;
  uint64_t v7 = v6 >> 1;
  if (v6 < 3) {
    unsigned int v8 = &a3[-((unint64_t)(2048 - v7) >> 11)][~(2048 - (_WORD)v7) & 0x7FF];
  }
  else {
    unsigned int v8 = &(*(unsigned __int16 **)((char *)a3 + (((unint64_t)(v7 - 1) >> 8) & 0xFFFFFFFFFFFFF8)))[(v7 - 1) & 0x7FF];
  }
  unsigned int v9 = *result;
  if (v4 >= *v8)
  {
    unsigned int v10 = (char *)a2;
    do
    {
      v10 += 2;
      if (v10 - v9 == 4096)
      {
        __int16 v12 = result[1];
        ++result;
        unsigned int v9 = v12;
        unsigned int v10 = v12;
      }
    }
    while ((result < (char **)a3 || result == (char **)a3 && v10 < (char *)a4) && v4 >= *(unsigned __int16 *)v10);
  }
  else
  {
    unsigned int v10 = (char *)a2;
    do
    {
      v10 += 2;
      if (v10 - v9 == 4096)
      {
        unsigned int v11 = result[1];
        ++result;
        unsigned int v9 = v11;
        unsigned int v10 = v11;
      }
    }
    while (v4 >= *(unsigned __int16 *)v10);
  }
  if (result < (char **)a3 || result == (char **)a3 && v10 < (char *)a4)
  {
    do
    {
      if (a4 == v5)
      {
        unint64_t v13 = *--a3;
        uint64_t v5 = v13;
        a4 = v13 + 2048;
      }
      unsigned int v14 = *--a4;
    }
    while (v4 < v14);
  }
  while (result < (char **)a3 || result == (char **)a3 && v10 < (char *)a4)
  {
    unsigned __int16 v15 = *(_WORD *)v10;
    *(_WORD *)unsigned int v10 = *a4;
    *a4 = v15;
    do
    {
      v10 += 2;
      if (v10 - v9 == 4096)
      {
        unsigned int v16 = result[1];
        ++result;
        unsigned int v9 = v16;
        unsigned int v10 = v16;
      }
    }
    while (v4 >= *(unsigned __int16 *)v10);
    do
    {
      if (a4 == v5)
      {
        unsigned int v17 = *--a3;
        uint64_t v5 = v17;
        a4 = v17 + 2048;
      }
      unsigned int v18 = *--a4;
    }
    while (v4 < v18);
  }
  uint64_t v19 = v10 - v9;
  uint64_t v20 = v19 >> 1;
  if (v19 < 3) {
    unsigned int v21 = (unsigned __int16 *)&result[-((unint64_t)(2048 - v20) >> 11)][2 * (~(2048 - (_WORD)v20) & 0x7FF)];
  }
  else {
    unsigned int v21 = (unsigned __int16 *)&(*(char **)((char *)result + (((unint64_t)(v20 - 1) >> 8) & 0xFFFFFFFFFFFFF8)))[2 * ((v20 - 1) & 0x7FF)];
  }
  if (v21 != a2) {
    *a2 = *v21;
  }
  *unsigned int v21 = v4;
  return result;
}

char **std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::__less<void,void> &>@<X0>(char **result@<X0>, char *a2@<X1>, char **a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v5 = *(unsigned __int16 *)a2;
  uint64_t v6 = *result;
  uint64_t v7 = a2;
  do
  {
    v7 += 2;
    if (v7 - v6 == 4096)
    {
      unsigned int v8 = result[1];
      ++result;
      uint64_t v6 = v8;
      uint64_t v7 = v8;
    }
    unsigned int v9 = *(unsigned __int16 *)v7;
  }
  while (v9 < v5);
  uint64_t v10 = (v7 - v6) >> 1;
  if (v7 - v6 < 3) {
    uint64_t v11 = (uint64_t)&result[-((unint64_t)(2048 - v10) >> 11)][2 * (~(2048 - (_WORD)v10) & 0x7FF)];
  }
  else {
    uint64_t v11 = (uint64_t)&(*(char **)((char *)result + (((unint64_t)(v10 - 1) >> 8) & 0xFFFFFFFFFFFFF8)))[2 * ((v10 - 1) & 0x7FF)];
  }
  if ((char *)v11 == a2)
  {
    do
    {
      if (result >= a3 && (result != a3 || v7 >= a4)) {
        break;
      }
      if (a4 == *a3)
      {
        uint64_t v15 = (uint64_t)*--a3;
        a4 = (char *)(v15 + 4096);
      }
      unsigned int v16 = *((unsigned __int16 *)a4 - 1);
      a4 -= 2;
    }
    while (v16 >= v5);
  }
  else
  {
    __int16 v12 = *a3;
    do
    {
      if (a4 == v12)
      {
        unint64_t v13 = *--a3;
        __int16 v12 = v13;
        a4 = v13 + 4096;
      }
      unsigned int v14 = *((unsigned __int16 *)a4 - 1);
      a4 -= 2;
    }
    while (v14 >= v5);
  }
  BOOL v18 = result != a3 || v7 >= a4;
  if (result < a3) {
    BOOL v18 = 0;
  }
  while (result < a3 || result == a3 && v7 < a4)
  {
    *(_WORD *)uint64_t v7 = *(_WORD *)a4;
    *(_WORD *)a4 = v9;
    do
    {
      v7 += 2;
      if (v7 - v6 == 4096)
      {
        uint64_t v19 = result[1];
        ++result;
        uint64_t v6 = v19;
        uint64_t v7 = v19;
      }
      unsigned int v9 = *(unsigned __int16 *)v7;
    }
    while (v9 < v5);
    uint64_t v20 = *a3;
    do
    {
      if (a4 == v20)
      {
        unsigned int v21 = *--a3;
        uint64_t v20 = v21;
        a4 = v21 + 4096;
      }
      unsigned int v22 = *((unsigned __int16 *)a4 - 1);
      a4 -= 2;
    }
    while (v22 >= v5);
  }
  uint64_t v23 = v7 - v6;
  uint64_t v24 = v23 >> 1;
  if (v23 < 3)
  {
    unint64_t v27 = 2048 - v24;
    __int16 v25 = ~(_WORD)v27;
    unint64_t v26 = &result[-(v27 >> 11)];
  }
  else
  {
    __int16 v25 = v24 - 1;
    unint64_t v26 = &result[(unint64_t)(v24 - 1) >> 11];
  }
  unint64_t v28 = &(*v26)[2 * (v25 & 0x7FF)];
  if (v28 != a2) {
    *(_WORD *)a2 = *(_WORD *)v28;
  }
  *(_WORD *)unint64_t v28 = v5;
  *(void *)a5 = v26;
  *(void *)(a5 + 8) = v28;
  *(unsigned char *)(a5 + 16) = v18;
  return result;
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(char *a1, unsigned __int16 *a2, char *a3, unsigned __int16 *a4)
{
  if (a4 == a2) {
    return 1;
  }
  uint64_t v4 = (uint64_t)a4;
  uint64_t v5 = (uint64_t)a3;
  uint64_t v7 = *(unsigned __int16 **)a3;
  uint64_t v8 = (uint64_t)a2 - *(void *)a1;
  uint64_t v9 = v8 >> 1;
  BOOL v10 = 1;
  switch((((uint64_t)a4 - *(void *)a3) >> 1) + ((a3 - a1) << 8) - (v8 >> 1))
  {
    case 0:
    case 1:
      return v10;
    case 2:
      if (v7 == a4) {
        uint64_t v4 = *((void *)a3 - 1) + 4096;
      }
      unsigned int v11 = *(unsigned __int16 *)(v4 - 2);
      unsigned int v12 = *a2;
      if (v11 < v12)
      {
        *a2 = v11;
        *(_WORD *)(v4 - 2) = v12;
      }
      return v10;
    case 3:
      if (v8 < -1)
      {
        unsigned int v17 = &a1[-8 * ((unint64_t)(2046 - v9) >> 11)];
        BOOL v18 = (_WORD *)(*(void *)v17 + 2 * (~(2046 - (_WORD)v9) & 0x7FF));
      }
      else
      {
        unsigned int v17 = &a1[8 * ((unint64_t)(v9 + 1) >> 11)];
        BOOL v18 = (_WORD *)(*(void *)v17 + 2 * (((_WORD)v9 + 1) & 0x7FF));
      }
      if (v7 == (unsigned __int16 *)v4)
      {
        uint64_t v27 = *(void *)(v5 - 8);
        v5 -= 8;
        uint64_t v4 = v27 + 4096;
      }
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((uint64_t)a1, a2, (uint64_t)v17, v18, v5, (_WORD *)(v4 - 2));
      return 1;
    case 4:
      if (v8 >= -1)
      {
        unsigned int v22 = &a1[8 * ((unint64_t)(v9 + 1) >> 11)];
        uint64_t v23 = (_WORD *)(*(void *)v22 + 2 * ((v9 + 1) & 0x7FF));
        unint64_t v24 = v9 + 2;
LABEL_31:
        uint64_t v34 = &a1[8 * (v24 >> 11)];
        int v35 = (_WORD *)(*(void *)v34 + 2 * (v24 & 0x7FF));
        goto LABEL_54;
      }
      unsigned int v22 = &a1[-8 * ((unint64_t)(2046 - v9) >> 11)];
      uint64_t v23 = (_WORD *)(*(void *)v22 + 2 * (~(2046 - (_WORD)v9) & 0x7FF));
      if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v24 = 1;
        goto LABEL_31;
      }
      uint64_t v34 = &a1[-8 * ((unint64_t)(2045 - v9) >> 11)];
      int v35 = (_WORD *)(*(void *)v34 + 2 * (~(2045 - (_WORD)v9) & 0x7FF));
LABEL_54:
      if (v7 == (unsigned __int16 *)v4)
      {
        uint64_t v55 = *(void *)(v5 - 8);
        v5 -= 8;
        uint64_t v4 = v55 + 4096;
      }
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((uint64_t)a1, a2, (uint64_t)v22, v23, (uint64_t)v34, v35, v5, (_WORD *)(v4 - 2));
      return 1;
    case 5:
      if (v8 >= -1)
      {
        uint64_t v19 = &a1[8 * ((unint64_t)(v9 + 1) >> 11)];
        uint64_t v20 = (_WORD *)(*(void *)v19 + 2 * ((v9 + 1) & 0x7FF));
        unint64_t v21 = v9 + 2;
LABEL_24:
        unint64_t v28 = &a1[8 * (v21 >> 11)];
        unint64_t v29 = (_WORD *)(*(void *)v28 + 2 * (v21 & 0x7FF));
        unint64_t v30 = v9 + 3;
LABEL_25:
        uint64_t v31 = &a1[8 * (v30 >> 11)];
        unint64_t v32 = (_WORD *)(*(void *)v31 + 2 * (v30 & 0x7FF));
        goto LABEL_26;
      }
      uint64_t v19 = &a1[-8 * ((unint64_t)(2046 - v9) >> 11)];
      uint64_t v20 = (_WORD *)(*(void *)v19 + 2 * (~(2046 - (_WORD)v9) & 0x7FF));
      if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v21 = 1;
        goto LABEL_24;
      }
      unint64_t v28 = &a1[-8 * ((unint64_t)(2045 - v9) >> 11)];
      unint64_t v29 = (_WORD *)(*(void *)v28 + 2 * (~(2045 - (_WORD)v9) & 0x7FF));
      if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFFBLL)
      {
        unint64_t v30 = 1;
        goto LABEL_25;
      }
      uint64_t v31 = &a1[-8 * ((unint64_t)(2044 - v9) >> 11)];
      unint64_t v32 = (_WORD *)(*(void *)v31 + 2 * (~(2044 - (_WORD)v9) & 0x7FF));
LABEL_26:
      if (v7 == (unsigned __int16 *)v4)
      {
        uint64_t v33 = *(void *)(v5 - 8);
        v5 -= 8;
        uint64_t v4 = v33 + 4096;
      }
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((uint64_t)a1, a2, (uint64_t)v19, v20, (uint64_t)v28, v29, (uint64_t)v31, v32, v5, (_WORD *)(v4 - 2));
      return 1;
    default:
      if (v8 <= -4)
      {
        unint64_t v13 = &a1[-8 * ((unint64_t)(2045 - v9) >> 11)];
        unsigned int v14 = (unsigned __int16 *)(*(void *)v13 + 2 * (~(2045 - (_WORD)v9) & 0x7FF));
        unint64_t v16 = 2046 - v9;
        goto LABEL_17;
      }
      unint64_t v13 = &a1[8 * ((unint64_t)(v9 + 2) >> 11)];
      unsigned int v14 = (unsigned __int16 *)(*(void *)v13 + 2 * ((v9 + 2) & 0x7FF));
      unint64_t v15 = v9 + 1;
      if (v9 == -1)
      {
        unint64_t v16 = 2047;
LABEL_17:
        __int16 v25 = &a1[-8 * (v16 >> 11)];
        unint64_t v26 = (_WORD *)(*(void *)v25 + 2 * (~(_WORD)v16 & 0x7FF));
        goto LABEL_33;
      }
      __int16 v25 = &a1[8 * (v15 >> 11)];
      unint64_t v26 = (_WORD *)(*(void *)v25 + 2 * (v15 & 0x7FF));
LABEL_33:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>((uint64_t)a1, a2, (uint64_t)v25, v26, (uint64_t)v13, v14);
      uint64_t v36 = *(unsigned __int16 **)v13;
      uint64_t v37 = (uint64_t)v14 - *(void *)v13;
      uint64_t v38 = v37 >> 1;
      if (v37 < -1)
      {
        unint64_t v43 = 2046 - v38;
        unint64_t v40 = &v13[-8 * (v43 >> 11)];
        int64_t v41 = *(unsigned __int16 **)v40;
        uint64_t v42 = ~v43 & 0x7FFLL;
      }
      else
      {
        unint64_t v39 = v38 + 1;
        unint64_t v40 = &v13[8 * (v39 >> 11)];
        int64_t v41 = *(unsigned __int16 **)v40;
        uint64_t v42 = v39 & 0x7FF;
      }
      uint64_t v44 = &v41[v42];
      if (v44 == (unsigned __int16 *)v4) {
        return 1;
      }
      int v45 = 0;
      while (1)
      {
        int64_t v46 = v44;
        uint64_t v47 = v40;
        uint64_t v48 = v41;
        unsigned int v49 = *v44;
        unsigned int v50 = *v14;
        if (v49 < v50)
        {
          float v51 = v46;
          while (1)
          {
            *float v51 = v50;
            if (v14 == a2) {
              break;
            }
            uint64_t v52 = v14;
            if (v14 == v36)
            {
              uint64_t v53 = (unsigned __int16 *)*((void *)v13 - 1);
              v13 -= 8;
              uint64_t v36 = v53;
              unsigned int v14 = v53 + 2048;
            }
            unsigned int v54 = *--v14;
            LOWORD(v50) = v54;
            float v51 = v52;
            if (v49 >= v54) {
              goto LABEL_46;
            }
          }
          uint64_t v52 = a2;
LABEL_46:
          *uint64_t v52 = v49;
          if (++v45 == 8) {
            break;
          }
        }
        uint64_t v44 = v46 + 1;
        int64_t v41 = v48;
        unint64_t v40 = v47;
        if ((char *)(v46 + 1) - (char *)v48 == 4096)
        {
          unint64_t v40 = v47 + 8;
          int64_t v41 = (unsigned __int16 *)*((void *)v47 + 1);
          uint64_t v44 = v41;
        }
        uint64_t v36 = v48;
        unint64_t v13 = v47;
        unsigned int v14 = v46;
        if (v44 == (unsigned __int16 *)v4) {
          return 1;
        }
      }
      uint64_t v57 = v46 + 1;
      if ((char *)(v46 + 1) - (char *)v48 == 4096) {
        uint64_t v57 = (unsigned __int16 *)*((void *)v47 + 1);
      }
      BOOL v10 = v57 == (unsigned __int16 *)v4;
      break;
  }
  return v10;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(uint64_t a1, _WORD *a2, uint64_t a3, _WORD *a4, uint64_t a5, _WORD *a6, uint64_t a7, _WORD *a8)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(a1, a2, a3, a4, a5, a6);
  unsigned int v13 = (unsigned __int16)*a8;
  unsigned int v14 = (unsigned __int16)*a6;
  if (v13 < v14)
  {
    *a6 = v13;
    *a8 = v14;
    unsigned int v15 = (unsigned __int16)*a6;
    unsigned int v16 = (unsigned __int16)*a4;
    if (v15 < v16)
    {
      *a4 = v15;
      *a6 = v16;
      unsigned int v17 = (unsigned __int16)*a4;
      unsigned int v18 = (unsigned __int16)*a2;
      if (v17 < v18)
      {
        *a2 = v17;
        *a4 = v18;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(uint64_t a1, _WORD *a2, uint64_t a3, _WORD *a4, uint64_t a5, _WORD *a6, uint64_t a7, _WORD *a8, uint64_t a9, _WORD *a10)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(a1, a2, a3, a4, a5, a6, a7, a8);
  unsigned int v15 = (unsigned __int16)*a10;
  unsigned int v16 = (unsigned __int16)*a8;
  if (v15 < v16)
  {
    *a8 = v15;
    *a10 = v16;
    unsigned int v17 = (unsigned __int16)*a8;
    unsigned int v18 = (unsigned __int16)*a6;
    if (v17 < v18)
    {
      *a6 = v17;
      *a8 = v18;
      unsigned int v19 = (unsigned __int16)*a6;
      unsigned int v20 = (unsigned __int16)*a4;
      if (v19 < v20)
      {
        *a4 = v19;
        *a6 = v20;
        unsigned int v21 = (unsigned __int16)*a4;
        unsigned int v22 = (unsigned __int16)*a2;
        if (v21 < v22)
        {
          *a2 = v21;
          *a4 = v22;
        }
      }
    }
  }
  return result;
}

char **std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(char *a1, unsigned __int16 *a2, char **a3, unsigned __int16 *a4, uint64_t a5, unsigned __int16 *a6, uint64_t a7)
{
  if (a2 == a4) {
    return (char **)a5;
  }
  uint64_t v9 = a4;
  BOOL v10 = a3;
  unint64_t v40 = a1;
  int64_t v41 = a2;
  int64_t v13 = ((char *)a3 - a1) << 8;
  unsigned int v14 = *a3;
  uint64_t v15 = (((char *)a4 - *a3) >> 1) + v13 - (((uint64_t)a2 - *(void *)a1) >> 1);
  if (v15 >= 2)
  {
    int64_t v39 = ((char *)a3 - a1) << 8;
    unint64_t v16 = (unint64_t)(v15 - 2) >> 1;
    do
    {
      unsigned int v17 = v40;
      unsigned int v18 = v41;
      unsigned int v19 = (char *)std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)&v40, v16);
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(v17, v18, a7, v15, v19, v20);
      --v16;
    }
    while (v16 != -1);
    unsigned int v14 = *v10;
    int64_t v13 = v39;
    uint64_t v15 = v39 + (((char *)v9 - *v10) >> 1) - (((uint64_t)a2 - *(void *)a1) >> 1);
  }
  if (v9 == a6)
  {
    unsigned int v22 = v10;
  }
  else
  {
    unsigned int v21 = v9;
    unsigned int v22 = v10;
    do
    {
      unsigned int v23 = *v21;
      unsigned int v24 = *a2;
      if (v23 < v24)
      {
        *unsigned int v21 = v24;
        *a2 = v23;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(a1, a2, a7, v15, a1, a2);
        unsigned int v14 = *v22;
      }
      if ((char *)++v21 - v14 == 4096)
      {
        __int16 v25 = v22[1];
        ++v22;
        unsigned int v14 = v25;
        unsigned int v21 = (unsigned __int16 *)v25;
      }
    }
    while (v21 != a6);
    uint64_t v15 = v13 + (((char *)v9 - *v10) >> 1) - (((uint64_t)a2 - *(void *)a1) >> 1);
  }
  if (v15 >= 2)
  {
    do
    {
      unsigned __int16 v26 = *a2;
      uint64_t v27 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(a1, a2, a7, v15);
      unint64_t v29 = v27;
      unint64_t v30 = (unsigned __int16 *)*v10;
      uint64_t v31 = (uint64_t)v9;
      if (*v10 == (char *)v9) {
        uint64_t v31 = (uint64_t)(*(v10 - 1) + 4096);
      }
      unint64_t v32 = (unsigned __int16 *)(v31 - 2);
      if (v32 == v28)
      {
        *unint64_t v28 = v26;
      }
      else
      {
        *unint64_t v28 = *v32;
        uint64_t v33 = (uint64_t)(v28 + 1);
        uint64_t v34 = *(void *)v27;
        if ((unsigned __int16 *)((char *)v28 - *(void *)v27 + 2) == (unsigned __int16 *)4096)
        {
          unint64_t v29 = v27 + 8;
          uint64_t v33 = *((void *)v27 + 1);
          uint64_t v34 = v33;
        }
        *unint64_t v32 = v26;
        if ((unsigned __int16 *)v33 == a2) {
          uint64_t v35 = 0;
        }
        else {
          uint64_t v35 = ((v29 - a1) << 8) + ((v33 - v34) >> 1) - (((uint64_t)a2 - *(void *)a1) >> 1);
        }
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(a1, (uint64_t)a2, v29, v33, a7, v35);
        unint64_t v30 = (unsigned __int16 *)*v10;
      }
      if (v9 == v30)
      {
        uint64_t v36 = (uint64_t)*--v10;
        uint64_t v9 = (unsigned __int16 *)(v36 + 4096);
      }
      --v9;
    }
    while (v15-- > 2);
  }
  return v22;
}

char *std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(char *result, _WORD *a2, uint64_t a3, uint64_t a4, char *a5, _WORD *a6)
{
  uint64_t v6 = a6;
  v23[0] = result;
  v23[1] = a2;
  if (a2 == a6) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = (((uint64_t)a6 - *(void *)a5) >> 1) + ((a5 - result) << 8) - (((uint64_t)a2 - *(void *)result) >> 1);
  }
  unint64_t v9 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) >= v8)
    {
      uint64_t v11 = 2 * v8;
      uint64_t v12 = (2 * v8) | 1;
      uint64_t result = (char *)std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)v23, v12);
      if (v11 + 2 < a4)
      {
        uint64_t v14 = (uint64_t)v13 - *(void *)result;
        uint64_t v15 = v14 >> 1;
        unint64_t v16 = (unsigned __int16 *)(v14 < -1
                                 ? *(void *)&result[-8 * ((unint64_t)(2046 - v15) >> 11)]
                                 + 2 * (~(2046 - (_WORD)v15) & 0x7FF)
                                 : *(void *)&result[((unint64_t)(v15 + 1) >> 8) & 0xFFFFFFFFFFFFF8]
                                 + 2 * ((v15 + 1) & 0x7FF));
        if (*v13 < *v16)
        {
          if ((unsigned __int16 *)((char *)++v13 - *(void *)result) == (unsigned __int16 *)4096) {
            int64_t v13 = (unsigned __int16 *)*((void *)result + 1);
          }
          uint64_t v12 = v11 + 2;
        }
      }
      unsigned int v17 = *v13;
      unsigned int v18 = (unsigned __int16)*v6;
      if (v17 >= v18)
      {
        do
        {
          *uint64_t v6 = v17;
          uint64_t v6 = v13;
          if (v10 < v12) {
            break;
          }
          uint64_t v19 = 2 * v12;
          uint64_t v12 = (2 * v12) | 1;
          uint64_t result = (char *)std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)v23, v12);
          if (v19 + 2 < a4)
          {
            uint64_t v20 = (uint64_t)v13 - *(void *)result;
            uint64_t v21 = v20 >> 1;
            unsigned int v22 = (unsigned __int16 *)(v20 < -1
                                     ? *(void *)&result[-8 * ((unint64_t)(2046 - v21) >> 11)]
                                     + 2 * (~(2046 - (_WORD)v21) & 0x7FF)
                                     : *(void *)&result[((unint64_t)(v21 + 1) >> 8) & 0xFFFFFFFFFFFFF8]
                                     + 2 * ((v21 + 1) & 0x7FF));
            if (*v13 < *v22)
            {
              if ((unsigned __int16 *)((char *)++v13 - *(void *)result) == (unsigned __int16 *)4096) {
                int64_t v13 = (unsigned __int16 *)*((void *)result + 1);
              }
              uint64_t v12 = v19 + 2;
            }
          }
          unsigned int v17 = *v13;
        }
        while (v17 >= v18);
        *uint64_t v6 = v18;
      }
    }
  }
  return result;
}

void *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(void *result, _WORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = a4 - 2;
  if (a4 < 2) {
    uint64_t v5 = a4 - 1;
  }
  uint64_t v6 = v5 >> 1;
  do
  {
    uint64_t v7 = a2;
    if (v4 != -1)
    {
      uint64_t v8 = v4 + 1 + (((uint64_t)a2 - *result) >> 1);
      if (v8 < 1)
      {
        unint64_t v9 = 2047 - v8;
        result -= v9 >> 11;
        a2 = (_WORD *)(*result + 2 * (~(_WORD)v9 & 0x7FF));
      }
      else
      {
        result += (unint64_t)v8 >> 11;
        a2 = (_WORD *)(*result + 2 * (v8 & 0x7FF));
      }
    }
    uint64_t v10 = (2 * v4) | 1;
    uint64_t v4 = 2 * v4 + 2;
    if (v4 >= a4
      || ((uint64_t v11 = (uint64_t)a2 - *result, v12 = v11 >> 1, v11 < -1)
        ? (int64_t v13 = (unsigned __int16 *)(result[-((unint64_t)(2046 - v12) >> 11)]
                                    + 2 * (~(2046 - (_WORD)v12) & 0x7FF)))
        : (int64_t v13 = (unsigned __int16 *)(*(void *)((char *)result
                                                + (((unint64_t)(v12 + 1) >> 8) & 0xFFFFFFFFFFFFF8))
                                    + 2 * ((v12 + 1) & 0x7FF))),
          (unsigned __int16)*a2 >= *v13))
    {
      uint64_t v4 = v10;
    }
    else if ((_WORD *)((char *)++a2 - *result) == (_WORD *)4096)
    {
      uint64_t v14 = (_WORD *)result[1];
      ++result;
      a2 = v14;
    }
    *uint64_t v7 = *a2;
  }
  while (v4 <= v6);
  return result;
}

void *std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>>(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v15[0] = result;
  v15[1] = a2;
  unint64_t v6 = a6 - 2;
  if (a6 >= 2)
  {
    uint64_t v9 = v6 >> 1;
    uint64_t result = std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)v15, v6 >> 1);
    if (*a3 == a4) {
      a4 = *(a3 - 1) + 4096;
    }
    unsigned int v13 = *(unsigned __int16 *)(a4 - 2);
    uint64_t v11 = (_WORD *)(a4 - 2);
    unsigned int v12 = v13;
    unsigned int v14 = *v10;
    if (v14 < v13)
    {
      do
      {
        *uint64_t v11 = v14;
        uint64_t v11 = v10;
        if (!v9) {
          break;
        }
        uint64_t v9 = (unint64_t)(v9 - 1) >> 1;
        uint64_t result = std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)v15, v9);
        unsigned int v14 = *v10;
      }
      while (v14 < v12);
      *uint64_t v11 = v12;
    }
  }
  return result;
}

void std::deque<unsigned short>::resize(void *a1, unint64_t a2)
{
  unint64_t v3 = a1[5];
  BOOL v4 = a2 >= v3;
  unint64_t v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    std::deque<unsigned short>::__append(a1, v5);
  }
  else if (!v4)
  {
    uint64_t v6 = a1[1];
    if (a1[2] == v6) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 8 * (a1[4] >> 11)) + 2 * (a1[4] & 0x7FFLL);
    }
    v10[0] = v6 + 8 * (a1[4] >> 11);
    v10[1] = v7;
    uint64_t v8 = (char *)std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)v10, a2);
    std::deque<unsigned short>::__erase_to_end((uint64_t)a1, v8, v9);
  }
}

void std::deque<unsigned short>::__append(void *a1, unint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v5 - v4) << 8) - 1;
  }
  unint64_t v7 = a1[5] + a1[4];
  unint64_t v8 = v6 - v7;
  BOOL v9 = a2 > v8;
  unint64_t v10 = a2 - v8;
  if (v9)
  {
    std::deque<unsigned short>::__add_back_capacity(a1, v10);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
    unint64_t v7 = a1[4] + a1[5];
  }
  uint64_t v11 = (void *)(v4 + 8 * (v7 >> 11));
  if (v5 == v4) {
    unsigned int v12 = 0;
  }
  else {
    unsigned int v12 = (char *)(*v11 + 2 * (v7 & 0x7FF));
  }
  v22[0] = v4 + 8 * (v7 >> 11);
  v22[1] = v12;
  unsigned int v13 = std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)v22, a2);
  if (v12 != v14)
  {
    uint64_t v15 = v13;
    uint64_t v16 = (uint64_t)v14;
    uint64_t v17 = a1[5];
    do
    {
      if (v11 == v15) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = *v11 + 4096;
      }
      if (v12 == (char *)v18)
      {
        uint64_t v20 = v12;
      }
      else
      {
        size_t v19 = ((v18 - (void)v12 - 2) & 0xFFFFFFFFFFFFFFFELL) + 2;
        bzero(v12, v19);
        uint64_t v20 = &v12[v19];
      }
      v17 += (v20 - v12) >> 1;
      if (v11 == v15) {
        break;
      }
      uint64_t v21 = (char *)v11[1];
      ++v11;
      unsigned int v12 = v21;
    }
    while (v21 != (char *)v16);
    a1[5] = v17;
  }
}

uint64_t std::deque<unsigned short>::__erase_to_end(uint64_t result, char *a2, uint64_t a3)
{
  unint64_t v3 = (void *)result;
  unint64_t v4 = *(void *)(result + 32);
  unint64_t v5 = v4 + *(void *)(result + 40);
  uint64_t v6 = *(void *)(result + 8);
  uint64_t v7 = *(void *)(result + 16);
  unint64_t v8 = (char *)(v6 + 8 * (v5 >> 11));
  if (v7 == v6) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *(void *)v8 + 2 * (v5 & 0x7FF);
  }
  if (v9 != a3)
  {
    uint64_t v10 = ((v9 - *(void *)v8) >> 1) + ((v8 - a2) << 8);
    uint64_t v11 = a3 - *(void *)a2;
    uint64_t v12 = v10 - (v11 >> 1);
    if (v12 >= 1)
    {
      unsigned int v13 = (char *)(v6 + 8 * (v4 >> 11));
      if (v7 == v6) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = *(void *)v13 + 2 * (*(void *)(result + 32) & 0x7FFLL);
      }
      v16[0] = v13;
      v16[1] = v14;
      if (v14 == a3) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = (v11 >> 1) + ((a2 - v13) << 8) - ((v14 - *(void *)v13) >> 1);
      }
      std::__deque_iterator<unsigned short,unsigned short *,unsigned short &,unsigned short **,long,2048l>::operator+[abi:ne180100]((uint64_t)v16, v15);
      v3[5] -= v12;
      do
        uint64_t result = std::deque<unsigned short>::__maybe_remove_back_spare[abi:ne180100](v3, 1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

uint64_t std::deque<unsigned short>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 8) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x800) {
    a2 = 1;
  }
  if (v5 < 0x1000) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void MTMBSelectGlue::MTMBSelectGlue(MTMBSelectGlue *this, MEOWReader *a2, MTBEPersistentParam *a3, char a4)
{
  *(void *)this = &unk_1F3480A10;
  *((void *)this + MEOWVectorBase::~MEOWVectorBase(this + 1) = a2;
  *((void *)this + 2) = a3;
  *((unsigned char *)this + --*(_WORD *)(this + 24) = a4;
  *((unsigned char *)this + 25) = 0;
  MTMBUnitInstructions::MTMBUnitInstructions((MTMBSelectGlue *)((char *)this + 112));
  MEOWSearchLattice::Create((MEOWSearchLattice *)a2, (MEOWReader *)1);
}

void sub_1DA4D7F28(_Unwind_Exception *a1)
{
  MTMBUnitInstructions::~MTMBUnitInstructions(v2);
  MTFESpeechVisitor::~MTFESpeechVisitor(v1);
  _Unwind_Resume(a1);
}

void MTMBSelectGlue::~MTMBSelectGlue(MTMBSelectGlue *this)
{
  *(void *)this = &unk_1F3480A10;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  MTMBUnitInstructions::~MTMBUnitInstructions((MTMBSelectGlue *)((char *)this + 112));

  MTFESpeechVisitor::~MTFESpeechVisitor(this);
}

{
  uint64_t vars8;

  MTMBSelectGlue::~MTMBSelectGlue(this);

  JUMPOUT(0x1E016FF00);
}

void MTMBSelectGlue::VisitSentence(MTMBSelectGlue *this, MTFESpeechElement *a2)
{
  (*(void (**)(void))(**((void **)this + 4) + 144))(*((void *)this + 4));
  uint64_t v4 = *(__int16 *)(*((void *)this + 2) + 48);
  if (kMTMBBreathSentenceLimit)
  {
    MTBEDebugParams::GetParam((const __CFString *)kMTMBBreathSentenceLimit, (const __CFString *)&qword_1EA8DA6C8, (uint64_t *)qword_1EA8DA6C8);
    kMTMBBreathSentenceLimit = 0;
  }
  if (qword_1EA8DA6C8 >= v4)
  {
    if (kMTMBBreathSentenceLength)
    {
      MTBEDebugParams::GetParam((const __CFString *)kMTMBBreathSentenceLength, (const __CFString *)&qword_1EA8DA6D8, (uint64_t *)qword_1EA8DA6D8);
      kMTMBBreathSentenceint Length = 0;
    }
    signed __int16 v6 = qword_1EA8DA6D8;
    uint64_t v5 = *((void *)this + 2);
  }
  else
  {
    uint64_t v5 = *((void *)this + 2);
    signed __int16 v6 = *(_WORD *)(v5 + 50) - 1;
  }
  *(_WORD *)(v5 + 50) = v6;
  if (((uint64_t)a2[1].var0 & 3) == 1)
  {
    if (kMTMBBreathParagraphAdjust)
    {
      MTBEDebugParams::GetParam((const __CFString *)kMTMBBreathParagraphAdjust, (const __CFString *)&qword_1EA8DA6E8, (uint64_t *)qword_1EA8DA6E8);
      kMTMBBreathParagraphAdjust = 0;
      uint64_t v5 = *((void *)this + 2);
    }
    signed __int16 v6 = *(_WORD *)(v5 + 50) - qword_1EA8DA6E8;
    *(_WORD *)(v5 + 50) = v6;
  }
  *((unsigned char *)this + 106) = a2[1].var1 >= v6;
  if (kMTMBBreathPhraseLength)
  {
    MTBEDebugParams::GetParam((const __CFString *)kMTMBBreathPhraseLength, (const __CFString *)&qword_1EA8DA6F8, (uint64_t *)qword_1EA8DA6F8);
    kMTMBBreathPhraseint Length = 0;
  }
  *((_WORD *)this + 5MEOWVectorBase::clear(this + 4) = qword_1EA8DA6F8;
  if (!*((unsigned char *)this + 24))
  {
    MTFESpeechElement::VisitChildren(a2, this);
  }
}

void MTMBSelectGlue::VisitIntonationalPhrase(MTMBSelectGlue *this, MTFESpeechElement *a2)
{
  if (MTBEDebugFlags::sMEOWDebug) {
    operator new[]();
  }
  *((void *)this + 5) = 0;
  uint64_t v4 = (float *)((char *)a2[2].var3 + 4 * SLODWORD(a2[2].var5));
  *((void *)this + 7) = 0;
  *((void *)this + 8) = v4;
  *((unsigned char *)this + 107) = 0;
  (*(void (**)(void, MTFESpeechElement *))(**((void **)this + 4) + 16))(*((void *)this + 4), a2);
  if (*((unsigned char *)this + 106))
  {
    uint64_t v5 = *(__int16 *)(*((void *)this + 2) + 48);
    if (kMTMBBreathPhraseLimit)
    {
      MTBEDebugParams::GetParam((const __CFString *)kMTMBBreathPhraseLimit, (const __CFString *)&qword_1EA8DA708, (uint64_t *)qword_1EA8DA708);
      kMTMBBreathPhraseLimit = 0;
    }
    if (qword_1EA8DA708 >= v5)
    {
      if (kMTMBBreathPhraseLength)
      {
        MTBEDebugParams::GetParam((const __CFString *)kMTMBBreathPhraseLength, (const __CFString *)&qword_1EA8DA6F8, (uint64_t *)qword_1EA8DA6F8);
        kMTMBBreathPhraseint Length = 0;
      }
      *((_WORD *)this + 5MEOWVectorBase::clear(this + 4) = qword_1EA8DA6F8;
    }
    else
    {
      --*((_WORD *)this + 54);
    }
    if (!a2->var7) {
      goto LABEL_16;
    }
    uint64_t v6 = *(__int16 *)(*((void *)this + 2) + 48);
    if (kMTMBBreathSpacing)
    {
      MTBEDebugParams::GetParam((const __CFString *)kMTMBBreathSpacing, (const __CFString *)&qword_1EA8DA718, (uint64_t *)qword_1EA8DA718);
      kMTMBBreathSpacing = 0;
    }
    if (qword_1EA8DA718 <= v6 && SWORD1(a2[2].var7) >= *((__int16 *)this + 54)) {
LABEL_16:
    }
      *((unsigned char *)this + 107) = 1;
  }
  if (!*((unsigned char *)this + 24))
  {
    MTFESpeechElement::VisitChildren(a2, this);
    MTFECommands::Visit((uint64_t)&a2[1].var1, (uint64_t)this);
  }
}

uint64_t MTMBSelectGlue::VisitIntermediatePhrase(MTMBSelectGlue *this, MTFESpeechElement *a2)
{
  uint64_t result = (uint64_t)MTFESpeechElement::VisitChildren(a2, this);
  if (*((unsigned char *)this + 24))
  {
    uint64_t v4 = *((void *)this + 5);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 264);
      if (v5)
      {
        uint64_t v6 = *((void *)this + 7);
        uint64_t v7 = *(void *)(v6 + 40);
        if (v7)
        {
          if (!*(unsigned char *)(v7 + 58))
          {
            int v8 = *(_DWORD *)(v5 + 4);
            if (*(unsigned char *)(v7 + 93)) {
              BOOL v9 = 1;
            }
            else {
              BOOL v9 = (v8 & 0xFE00) == 0;
            }
            if (!v9)
            {
              int v10 = *(unsigned __int8 *)(v7 + 94);
              unsigned int v11 = bswap32(*(unsigned __int16 *)(v7 + 90));
              int v13 = v8;
              MTMBSelectGlue::Prev((uint64_t)this, (uint64_t)&v13, &v14);
              unsigned int v12 = v11 & 0xFFFF0000 | (v10 << 8);
              uint64_t result = MTMBSelectGlue::FindGlue((uint64_t)this, v6, v7, &v14, (unsigned __int8 *)&v12);
            }
            *((void *)this + 5) = 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t MTMBSelectGlue::FindGlue(uint64_t result, uint64_t a2, uint64_t a3, int *a4, unsigned __int8 *a5)
{
  uint64_t v9 = result;
  if (*((__int16 *)a4 + 1) == -1) {
    unsigned int v10 = 0;
  }
  else {
    unsigned int v10 = *((unsigned __int8 *)a4 + 1);
  }
  if (*((__int16 *)a5 + 1) == -1) {
    unsigned int v11 = 0;
  }
  else {
    unsigned int v11 = *a5;
  }
  if (*(__int16 *)(a2 + 88) == -1 || *(unsigned __int8 *)(a2 + 93) == v10)
  {
    uint64_t result = MEOWReader::CountDiphones(*(MEOWReader **)(result + 8), v10, v11);
    if (result)
    {
      if (v10)
      {
        MEOWAnchorSliceInfo::MEOWAnchorSliceInfo((MEOWAnchorSliceInfo *)&v19);
        int v19 = *a4;
        (*(void (**)(void, int *))(**(void **)(v9 + 32) + 64))(*(void *)(v9 + 32), &v19);
      }
      MEOWDiphoneSliceInfo::MEOWDiphoneSliceInfo((MEOWDiphoneSliceInfo *)&v19);
      LOBYTE(v19) = v10;
      BYTE1(v19) = v11;
      if ((*(_DWORD *)(a2 + 72) & 0x1400) != 0) {
        char v12 = 2;
      }
      else {
        char v12 = 1;
      }
      if ((*(_DWORD *)(a3 + 72) & 0x1400) != 0) {
        char v13 = 2;
      }
      else {
        char v13 = 1;
      }
      char v20 = v12;
      char v21 = v13;
      uint64_t v14 = *(void *)(v9 + 64);
      long long v22 = *(_OWORD *)(v9 + 88);
      uint64_t v23 = v14 - 4 * v22;
      char v24 = *(unsigned char *)(v9 + 105) ^ 1;
      char v25 = 1;
      (*(void (**)(void, int *))(**(void **)(v9 + 32) + 32))(*(void *)(v9 + 32), &v19);
      MTMBSelectGlue::HandleInstructions((MTMBSelectGlue *)v9);
      if (v11)
      {
        MEOWAnchorSliceInfo::MEOWAnchorSliceInfo((MEOWAnchorSliceInfo *)&v19);
        int v19 = *(_DWORD *)a5;
        (*(void (**)(void, int *))(**(void **)(v9 + 32) + 64))(*(void *)(v9 + 32), &v19);
        uint64_t v15 = *(void *)(v9 + 32);
        uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 80))(v15) - 1;
        uint64_t v17 = (*(uint64_t (**)(void))(**(void **)(v9 + 32) + 120))(*(void *)(v9 + 32));
        __int16 v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 136))(v15, v16, v17);
        if (!v10)
        {
LABEL_21:
          if (v11)
          {
            *(unsigned char *)(a3 + 92) = v10;
            *(unsigned char *)(a3 + 93) = v11;
            *(_WORD *)(a3 + 88) = v18;
          }
          return (*(uint64_t (**)(void))(**(void **)(v9 + 32) + 88))(*(void *)(v9 + 32));
        }
      }
      else
      {
        __int16 v18 = (*(uint64_t (**)(void))(**(void **)(v9 + 32) + 120))(*(void *)(v9 + 32));
        if (!v10) {
          goto LABEL_21;
        }
      }
      *(unsigned char *)(a2 + 93) = v10;
      *(unsigned char *)(a2 + 9MEOWVectorBase::clear(this + 4) = v11;
      *(_WORD *)(a2 + 90) = v18;
      goto LABEL_21;
    }
  }
  return result;
}

void MTMBSelectGlue::Prev(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v8, 2);
  MEOWReader::GetDemi(*(MEOWReader **)(a1 + 8), (unsigned __int8 *)a2, 0, (uint64_t)v6);
  *(unsigned char *)(a2 + MEOWVectorBase::~MEOWVectorBase(this + 1) = *(unsigned char *)a2;
  *(unsigned char *)a2 = v6[67];
  *(_WORD *)(a2 + 2) = bswap32(v7) >> 16;
  *a3 = *(_DWORD *)a2;
  MEOWVectorBase::~MEOWVectorBase(v8);
}

void sub_1DA4D877C(_Unwind_Exception *a1)
{
  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

MTFESpeechElement *MTMBSelectGlue::VisitWord(MTFESpeechElement *this, MTFESpeechElement *a2)
{
  if (!BYTE1(this->var4))
  {
    uint64_t v3 = this;
    this->signed __int16 var7 = a2;
    this[1].var4 = *(MTFESpeechElement **)&this[1].var1;
    LOBYTE(this[1].var7) = 1;
    BYTE1(this[1].var7) = ((uint64_t)a2[1].var0 & 0x1000) != 0;
    *((_DWORD *)&a2[3].var2 + MEOWVectorBase::~MEOWVectorBase(this + 1) = 0;
    MTFECommands::Visit((uint64_t)&a2[2], (uint64_t)this);
    this = MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)v3);
    v3->var6 = v3->var7;
    v3[1].var3 = v3[1].var4;
    if (((uint64_t)a2[1].var0 & 0x40) == 0)
    {
      BYTE3(v3[1].var7) = 0;
      ++LOWORD(v3->var3->var7);
    }
  }
  return this;
}

uint64_t MTMBSelectGlue::VisitCommand(uint64_t this, MTFECommand *a2)
{
  unint64_t var8 = a2->var8;
  BOOL v4 = var8 == 1835429746 || var8 == 1836475764 || var8 == 1836021362;
  if (v4 && (a2->var9 & 0x80000000) != 0)
  {
    MTMBUnitInstructions::AddCommand((uint64_t ***)(this + 112), a2);
    uint64_t v6 = (uint64_t (*)(MTFECommand *))*((void *)a2->var0 + 2);
    return v6(a2);
  }
  return this;
}

uint64_t MTMBSelectGlue::VisitPhoneme(uint64_t this, MTFEPhoneme *a2)
{
  uint64_t v3 = this;
  float var13 = a2->var13;
  *(void *)(this + 96) = (unint64_t)(float)(var13 * a2->var14);
  if (!*(unsigned char *)(this + 104)) {
    goto LABEL_67;
  }
  uint64_t v5 = *(void *)(this + 40);
  if (!v5 || (uint64_t v6 = *(void *)(v5 + 264)) == 0)
  {
    uint64_t v10 = *(void *)(this + 56);
    unsigned int v11 = *(int **)(*(void *)(this + 48) + 264);
    if (v11)
    {
      if (!v10 || *(unsigned char *)(v10 + 58))
      {
        int v12 = *v11;
        unsigned int v13 = *(unsigned __int8 *)(v10 + 93);
        if (v13 == v12
          || (v12 <= 0x24u ? (BOOL v17 = ((1 << v12) & 0x1071804001) == 0) : (BOOL v17 = 1),
              v17 && (v13 <= 0x1E ? (BOOL v32 = ((1 << v13) & 0x61804000) == 0) : (BOOL v32 = 1), v32)))
        {
          this = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBForceGlue);
          if (!this) {
            goto LABEL_67;
          }
          uint64_t v10 = *(void *)(v3 + 56);
          unsigned int v13 = *(unsigned __int8 *)(v10 + 93);
        }
        unsigned int v37 = bswap32(*(unsigned __int16 *)(v10 + 88)) & 0xFFFF0000 | (v13 << 8) | *(unsigned __int8 *)(v10 + 92);
        int v35 = v12;
        MTMBSelectGlue::Next(v3, (uint64_t)&v35, &v36);
        __int16 v18 = (int *)&v37;
        int v19 = (unsigned __int8 *)&v36;
        goto LABEL_66;
      }
      int v22 = *v11;
      if (v22 > 1u)
      {
        int v38 = v22;
        MTMBSelectGlue::Next(this, (uint64_t)&v38, &v39);
        uint64_t v14 = (unsigned __int8 *)&v39;
        uint64_t v23 = v3;
        uint64_t v24 = v10;
        char v25 = a2;
        int v26 = 1;
        goto LABEL_63;
      }
      int v40 = v22;
      MTMBSelectGlue::Next(this, (uint64_t)&v40, &v41);
      uint64_t v14 = (unsigned __int8 *)&v41;
    }
    else
    {
      if (!v10 || *(unsigned char *)(v10 + 58)) {
        goto LABEL_67;
      }
      unsigned int v34 = bswap32(a2->var19) & 0xFFFF0000 | (a2->var22 << 8) | a2->var21;
      uint64_t v14 = (unsigned __int8 *)&v34;
    }
    uint64_t v23 = v3;
    uint64_t v24 = v10;
    char v25 = a2;
    int v26 = 0;
LABEL_63:
    this = MTMBSelectGlue::FindBreath(v23, v24, (uint64_t)v25, v14, v26);
    goto LABEL_67;
  }
  int v7 = *(_DWORD *)(v6 + 4);
  int v8 = *(int **)(*(void *)(this + 48) + 264);
  if (!v8)
  {
    unsigned int var21 = a2->var21;
    if (var21 == BYTE1(v7)
      || (BYTE1(v7) <= 0x24u ? (BOOL v27 = ((1 << SBYTE1(v7)) & 0x1071804001) == 0) : (BOOL v27 = 1),
          v27 && (var21 > 0x1E || ((1 << var21) & 0x61804000) == 0)))
    {
      if (BYTE1(v7) >= 2u && var21 == 0)
      {
        unsigned int var21 = 0;
      }
      else
      {
        this = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBForceGlue);
        if (!this) {
          goto LABEL_67;
        }
        unsigned int var21 = a2->var21;
        if (!a2->var21) {
          goto LABEL_67;
        }
      }
    }
    int var22 = a2->var22;
    unsigned int v30 = bswap32(a2->var19);
    uint64_t v10 = *(void *)(v3 + 56);
    int v43 = v7;
    MTMBSelectGlue::Prev(v3, (uint64_t)&v43, &v44);
    unsigned int v42 = v30 & 0xFFFF0000 | (var22 << 8) | var21;
    __int16 v18 = &v44;
    int v19 = (unsigned __int8 *)&v42;
LABEL_66:
    this = MTMBSelectGlue::FindGlue(v3, v10, (uint64_t)a2, v18, v19);
    goto LABEL_67;
  }
  int v9 = *v8;
  if (BYTE1(v7) != BYTE1(*v8))
  {
    if (BYTE1(v7) <= 0x24u && ((1 << SBYTE1(v7)) & 0x1071804001) != 0) {
      goto LABEL_82;
    }
    if (BYTE1(v9) <= 0x1Eu && ((1 << SBYTE1(v9)) & 0x61804000) != 0) {
      goto LABEL_82;
    }
  }
  if (*v8 != *(_DWORD *)(v6 + 4)
    && (*v8 <= 0x24u ? (BOOL v28 = ((1 << v9) & 0x1071804001) == 0) : (BOOL v28 = 1),
        !v28
     || (*(_DWORD *)(v6 + 4) <= 0x1Eu ? (BOOL v33 = ((1 << v7) & 0x61804000) == 0) : (BOOL v33 = 1), !v33))
    || (this = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBForceQXGlue), this)
    && v9 != v7
    && (int v49 = v9,
        int v50 = v7,
        this = MTMBSelectGlue::NeedQXGlue(v3, (unsigned __int8 *)&v50, (unsigned __int8 *)&v49),
        this))
  {
LABEL_82:
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBForceGluePitch)) {
      MTMBSelectGlue::ForceGluePitch((MTMBSelectGlue *)v3);
    }
    uint64_t v10 = *(void *)(v3 + 56);
    int v47 = v7;
    MTMBSelectGlue::Prev(v3, (uint64_t)&v47, &v48);
    int v45 = v9;
    MTMBSelectGlue::Next(v3, (uint64_t)&v45, &v46);
    __int16 v18 = &v48;
    int v19 = (unsigned __int8 *)&v46;
    goto LABEL_66;
  }
LABEL_67:
  *(unsigned char *)(v3 + 10MEOWVectorBase::clear(this + 4) = 0;
  unint64_t v31 = *(void *)(v3 + 64) + 4 * (unint64_t)var13;
  *(void *)(v3 + 56) = a2;
  *(void *)(v3 + 6MEOWVectorBase::clear(this + 4) = v31;
  *(void *)(v3 + 88) = (unint64_t)var13 - *(void *)(v3 + 96);
  return this;
}

uint64_t MTMBSelectGlue::NeedQXGlue(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v10, 2);
  MEOWReader::GetDemi(*(MEOWReader **)(a1 + 8), a2, 0, (uint64_t)v8);
  if (v9)
  {
    uint64_t v6 = 1;
  }
  else
  {
    MEOWReader::GetDemi(*(MEOWReader **)(a1 + 8), a3, 0, (uint64_t)v8);
    uint64_t v6 = v9 & 1;
  }
  MEOWVectorBase::~MEOWVectorBase(v10);
  return v6;
}

void sub_1DA4D8D68(_Unwind_Exception *a1)
{
  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

void MTMBSelectGlue::ForceGluePitch(MTMBSelectGlue *this)
{
  MTMBDemi::MTMBDemi((MTMBDemi *)v5);
  MTMBDemi::MTMBDemi((MTMBDemi *)v4);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)&v3, 2);
  MEOWReader::GetWord(*((void *)this + 1), *(unsigned __int8 **)(*((void *)this + 5) + 264), (uint64_t)v2, 0, 1);
  operator new();
}

void sub_1DA4D8F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  MEOWVectorBase::~MEOWVectorBase(v15);
  MTMBDemi::~MTMBDemi((MTMBDemi *)va);
  MTMBDemi::~MTMBDemi((MTMBDemi *)(v16 - 144));
  _Unwind_Resume(a1);
}

void MTMBSelectGlue::Next(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v8, 2);
  MEOWReader::GetDemi(*(MEOWReader **)(a1 + 8), (unsigned __int8 *)a2, 1, (uint64_t)v6);
  *(unsigned char *)a2 = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a2 + MEOWVectorBase::~MEOWVectorBase(this + 1) = v6[67];
  *(_WORD *)(a2 + 2) = bswap32(v7) >> 16;
  *a3 = *(_DWORD *)a2;
  MEOWVectorBase::~MEOWVectorBase(v8);
}

void sub_1DA4D9028(_Unwind_Exception *a1)
{
  MEOWVectorBase::~MEOWVectorBase(v1);
  _Unwind_Resume(a1);
}

uint64_t MTMBSelectGlue::FindBreath(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 *a4, int a5)
{
  uint64_t v9 = result;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (*((__int16 *)a4 + 1) != -1)
  {
    if (*(unsigned char *)(result + 107))
    {
      if (*(float *)(a2 + 64) >= 30.0)
      {
        unsigned int v10 = *a4;
        uint64_t result = MEOWReader::CountDiphones(*(MEOWReader **)(result + 8), 1u, v10);
        if (result)
        {
          if (a5)
          {
            MEOWDiphoneSliceInfo::MEOWDiphoneSliceInfo((MEOWDiphoneSliceInfo *)&v29);
            char v29 = 1;
            char v30 = v10;
            if ((*(_DWORD *)(a3 + 72) & 0x1400) != 0) {
              char v11 = 2;
            }
            else {
              char v11 = 1;
            }
            char v31 = 1;
            char v32 = v11;
            uint64_t v12 = *(void *)(v9 + 64);
            long long v33 = *(_OWORD *)(v9 + 88);
            uint64_t v34 = v12 - 4 * v33;
            __int16 v35 = 257;
            (*(void (**)(void, char *))(**(void **)(v9 + 32) + 40))(*(void *)(v9 + 32), &v29);
            MTMBSelectGlue::HandleInstructions((MTMBSelectGlue *)v9);
            MEOWAnchorSliceInfo::MEOWAnchorSliceInfo((MEOWAnchorSliceInfo *)&v21);
            int v21 = *(_DWORD *)a4;
            (*(void (**)(void, int *))(**(void **)(v9 + 32) + 64))(*(void *)(v9 + 32), &v21);
            uint64_t v13 = *(void *)(v9 + 32);
            uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 80))(v13) - 1;
            uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(v9 + 32) + 120))(*(void *)(v9 + 32));
            __int16 v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 136))(v13, v14, v15);
          }
          else
          {
            MEOWDemiSliceInfo::MEOWDemiSliceInfo((MEOWDemiSliceInfo *)&v21, 0);
            char v29 = 1;
            char v30 = v10;
            *(void *)&long long v33 = 0;
            BYTE8(v33) = 0;
            char v36 = 0;
            LOBYTE(v2MEOWVectorBase::~MEOWVectorBase(this + 1) = 1;
            BYTE1(v2MEOWVectorBase::~MEOWVectorBase(this + 1) = v10;
            __int16 v22 = 1;
            uint64_t v17 = *(void *)(v9 + 64) - 4 * *(void *)(v9 + 88);
            uint64_t v23 = *(void *)(v9 + 88);
            uint64_t v24 = 0;
            uint64_t v25 = v17;
            char v26 = 1;
            uint64_t v27 = 1;
            BOOL v28 = &v29;
            (*(void (**)(void, int *))(**(void **)(v9 + 32) + 56))(*(void *)(v9 + 32), &v21);
            MTMBSelectGlue::HandleInstructions((MTMBSelectGlue *)v9);
            __int16 v16 = (*(uint64_t (**)(void))(**(void **)(v9 + 32) + 120))(*(void *)(v9 + 32));
          }
          __int16 v18 = v16;
          if ((*(float (**)(void))(**(void **)(v9 + 32) + 128))(*(void *)(v9 + 32)) < 1000.0)
          {
            *(_WORD *)(*(void *)(v9 + 16) + 48) = 0;
            if (kMTMBBreathPhraseLength)
            {
              MTBEDebugParams::GetParam((const __CFString *)kMTMBBreathPhraseLength, (const __CFString *)&qword_1EA8DA6F8, (uint64_t *)qword_1EA8DA6F8);
              kMTMBBreathPhraseint Length = 0;
            }
            *(_WORD *)(v9 + 108) = qword_1EA8DA6F8;
            if (kMTMBBreathSentenceLength)
            {
              MTBEDebugParams::GetParam((const __CFString *)kMTMBBreathSentenceLength, (const __CFString *)&qword_1EA8DA6D8, (uint64_t *)qword_1EA8DA6D8);
              kMTMBBreathSentenceint Length = 0;
            }
            *(_WORD *)(*(void *)(v9 + 16) + 50) = qword_1EA8DA6D8;
            *(unsigned char *)(a2 + 93) = 1;
            *(unsigned char *)(a2 + 9MEOWVectorBase::clear(this + 4) = v10;
            *(_WORD *)(a2 + 90) = v18;
            if (v10)
            {
              if (a5)
              {
                *(unsigned char *)(a3 + 92) = 1;
                *(unsigned char *)(a3 + 93) = v10;
                *(_WORD *)(a3 + 88) = v18;
              }
            }
            return (*(uint64_t (**)(void))(**(void **)(v9 + 32) + 88))(*(void *)(v9 + 32));
          }
          uint64_t result = (*(uint64_t (**)(void))(**(void **)(v9 + 32) + 88))(*(void *)(v9 + 32));
        }
      }
    }
  }
  if (a5)
  {
    int v19 = *(_DWORD *)a4;
    int v20 = -65536;
    return MTMBSelectGlue::FindGlue(v9, a2, a3, &v20, (unsigned __int8 *)&v19);
  }
  return result;
}

uint64_t *MTMBSelectGlue::HandleInstructions(MTMBSelectGlue *this)
{
  unsigned __int16 v5 = 0;
  uint64_t v2 = (uint64_t *)((char *)this + 112);
  uint64_t v3 = (uint64_t *)((char *)this + 120);
  if (MTMBUnitInstructions::ReadyInQueue((uint64_t)this + 112, (uint64_t *)this + 15, &v5))
  {
    do
      (*(void (**)(void, void))(**((void **)this + 4) + 112))(*((void *)this + 4), v5);
    while ((MTMBUnitInstructions::ReadyInQueue((uint64_t)v2, v3, &v5) & 1) != 0);
  }
  if (MTMBUnitInstructions::ReadyInQueue((uint64_t)v2, v2, &v5))
  {
    do
      (*(void (**)(void, void))(**((void **)this + 4) + 96))(*((void *)this + 4), v5);
    while ((MTMBUnitInstructions::ReadyInQueue((uint64_t)v2, v2, &v5) & 1) != 0);
  }
  return MTMBUnitInstructions::NextSlice((uint64_t **)v2);
}

void *MTMBDiphoneVariants::AddPassThrough(MTMBDiphoneVariants *this)
{
  uint64_t result = MEOWVectorBase::Append(this);
  uint64_t v3 = *(void *)this + 144 * *((void *)this + 2);
  *(_WORD *)(v3 - 14MEOWVectorBase::clear(this + 4) = 0;
  *(void *)(v3 - 136) = 0;
  *(unsigned char *)(v3 - 128) = 0;
  *(unsigned char *)(v3 - 6MEOWVectorBase::clear(this + 4) = 0;
  return result;
}

void *MTMBDiphoneVariants::AddVariant(void *this, MEOWReader *a2, unsigned int a3, unsigned int a4)
{
  char v4 = a4;
  char v5 = a3;
  uint64_t v6 = this;
  uint64_t v7 = this[2];
  if (v7)
  {
    int v8 = (unsigned __int8 *)(*this + 1);
    while (*(v8 - 1) != a3 || *v8 != a4)
    {
      v8 += 144;
      if (!--v7) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    this = (void *)MEOWReader::CountDiphones(a2, a3, a4);
    if (this)
    {
      this = MEOWVectorBase::Append(v6);
      uint64_t v9 = *v6 + 144 * v6[2];
      *(unsigned char *)(v9 - 14MEOWVectorBase::clear(this + 4) = v5;
      *(unsigned char *)(v9 - 143) = v4;
      *(void *)(v9 - 136) = 0;
      *(unsigned char *)(v9 - 128) = 0;
      *(unsigned char *)(v9 - 6MEOWVectorBase::clear(this + 4) = 0;
    }
  }
  return this;
}

void *MTMBDiphoneVariants::AddVariants(void *result, MEOWReader *this, unsigned char *a3, unsigned __int8 *a4)
{
  unsigned int v4 = *a3;
  if (*a3)
  {
    int v8 = result;
    unint64_t v9 = 0;
    LODWORD(v10) = *a4;
    do
    {
      if (v10)
      {
        unint64_t v11 = 0;
        unsigned int v12 = a3[v9 + 1];
        do
        {
          unsigned __int8 v13 = a4[v11 + 1];
          uint64_t result = (void *)MEOWReader::CountDiphones(this, v12, v13);
          if (result)
          {
            uint64_t result = MEOWVectorBase::Append(v8);
            uint64_t v14 = *v8 + 144 * v8[2];
            *(unsigned char *)(v14 - 14MEOWVectorBase::clear(this + 4) = v12;
            *(unsigned char *)(v14 - 143) = v13;
            *(void *)(v14 - 136) = 0;
            *(unsigned char *)(v14 - 128) = 0;
            *(unsigned char *)(v14 - 6MEOWVectorBase::clear(this + 4) = 0;
          }
          ++v11;
          unint64_t v10 = *a4;
        }
        while (v11 < v10);
        unsigned int v4 = *a3;
      }
      ++v9;
    }
    while (v9 < v4);
  }
  return result;
}

void *MTMBDiphoneVariants::AddLeftContext(void *a1, MEOWReader *a2, void *a3)
{
  v5[0] = *a3 + 4;
  v5[1] = 8;
  void v5[2] = a3[2];
  v4[0] = *a1 + 16;
  v4[1] = 144;
  void v4[2] = a1[2];
  return MTMBDiphoneVariants::AddContext(a1, a2, 0, v5, v4);
}

void *MTMBDiphoneVariants::AddContext(void *result, MEOWReader *this, int a3, void *a4, void *a5)
{
  if (a4[2])
  {
    unint64_t v9 = result;
    unint64_t v10 = 0;
    do
    {
      *(_WORD *)__c = 0;
      unint64_t v11 = (unsigned __int8 *)(*a4 + a4[1] * v10);
      unint64_t DemiRecord = MEOWReader::GetDemiRecord(this, *v11, v11[1], bswap32(*((unsigned __int16 *)v11 + 1)) >> 16, a3);
      uint64_t result = (void *)MEOWReader::GetAdjacent(this, DemiRecord, &__c[1], __c);
      uint64_t v13 = a5[2];
      if (v13)
      {
        uint64_t v14 = 0;
        uint64_t v15 = (unsigned __int8 *)(*a4 + a4[1] * v10);
        __int16 v16 = (unsigned __int8 *)(*v9 + 1);
        while (1)
        {
          if (a3)
          {
            int v17 = *v16;
            int v18 = v15[1];
          }
          else
          {
            int v17 = *(v16 - 1);
            int v18 = *v15;
          }
          if (v17 == v18) {
            break;
          }
          ++v14;
          v16 += 144;
          if (v13 == v14) {
            goto LABEL_13;
          }
        }
        int v19 = (unsigned __int8 *)(*a5 + a5[1] * v14);
        unsigned __int8 v20 = __c[1];
        size_t v21 = *v19;
        uint64_t result = memchr(v19 + 1, __c[1], v21);
        if (!result)
        {
          *int v19 = v21 + 1;
          v19[v21 + 1] = v20;
        }
      }
LABEL_13:
      ++v10;
    }
    while (v10 < a4[2]);
  }
  return result;
}

void *MTMBDiphoneVariants::AddRightContext(void *a1, MEOWReader *a2, void *a3)
{
  v5[0] = *a3;
  v5[1] = 8;
  void v5[2] = a3[2];
  v4[0] = *a1 + 80;
  v4[1] = 144;
  void v4[2] = a1[2];
  return MTMBDiphoneVariants::AddContext(a1, a2, 1, v5, v4);
}

uint64_t MTMBDiphoneVariants::Index2Variant(MTMBDiphoneVariants *this, unint64_t *a2)
{
  if (!*((void *)this + 2)) {
    return 0xFFFFFFFLL;
  }
  uint64_t result = 0;
  unint64_t v4 = *a2;
  char v5 = (unint64_t *)(*(void *)this + 8);
  while (1)
  {
    unint64_t v6 = *v5;
    v5 += 18;
    BOOL v7 = v4 >= v6;
    v4 -= v6;
    if (!v7) {
      break;
    }
    *a2 = v4;
    if ((unint64_t)++result >= *((void *)this + 2)) {
      return 0xFFFFFFFLL;
    }
  }
  return result;
}

uint64_t MTMBUnitSlice::Override(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) = a2;
  return this;
}

void MTMBWordSlice::SelectCandidate(MTMBWordSlice *this, MEOWReader *a2, unint64_t a3)
{
  int v3 = *((_DWORD *)this + 2);
  if ((v3 & 0x80000000) == 0 && v3 < *((_DWORD *)this + 12)) {
    a3 = *((unsigned int *)this + 2);
  }
  MEOWReader::GetWordData((uint64_t)a2, (void *)this + 3, a3, (void *)(*((void *)this + 2) + 264));
}

uint64_t MTMBFirstDemiSlice::SelectCandidate(uint64_t this, MEOWReader *a2, unint64_t a3)
{
  if (*(int *)(this + 8) >= 0) {
    unint64_t v3 = *(unsigned int *)(this + 8);
  }
  else {
    unint64_t v3 = a3;
  }
  uint64_t v4 = *(void *)(this + 32);
  uint64_t v5 = *(void *)(this + 16);
  if (v4)
  {
    uint64_t v6 = 0;
    BOOL v7 = (unint64_t *)(v5 + 8);
    while (1)
    {
      unint64_t v8 = *v7;
      v7 += 18;
      unint64_t v9 = v3 - v8;
      if (v3 < v8) {
        break;
      }
      ++v6;
      unint64_t v3 = v9;
      if (v4 == v6)
      {
        LOWORD(v3) = v9;
        goto LABEL_9;
      }
    }
    if (v6 == 0xFFFFFFFFLL)
    {
      uint64_t v6 = 0;
      unint64_t v11 = (unint64_t *)(v5 + 8);
      while (1)
      {
        unint64_t v12 = *v11;
        v11 += 18;
        unint64_t v3 = a3 - v12;
        if (a3 < v12) {
          break;
        }
        ++v6;
        a3 = v3;
        if (v4 == v6) {
          goto LABEL_9;
        }
      }
      LOWORD(v3) = a3;
    }
  }
  else
  {
LABEL_9:
    uint64_t v6 = 0xFFFFFFFLL;
  }
  uint64_t v10 = *(void *)(this + 48);
  *(_WORD *)(v10 + 90) = v3;
  *(unsigned char *)(v10 + 9MEOWVectorBase::clear(this + 4) = *(unsigned char *)(v5 + 144 * v6 + 1);
  return this;
}

uint64_t MTMBSecondDemiSlice::SelectCandidate(uint64_t this, MEOWReader *a2, unint64_t a3)
{
  if (*(int *)(this + 8) >= 0) {
    unint64_t v3 = *(unsigned int *)(this + 8);
  }
  else {
    unint64_t v3 = a3;
  }
  uint64_t v4 = *(void *)(this + 32);
  uint64_t v5 = *(void *)(this + 16);
  if (v4)
  {
    uint64_t v6 = 0;
    BOOL v7 = (unint64_t *)(v5 + 8);
    while (1)
    {
      unint64_t v8 = *v7;
      v7 += 18;
      unint64_t v9 = v3 - v8;
      if (v3 < v8) {
        break;
      }
      ++v6;
      unint64_t v3 = v9;
      if (v4 == v6)
      {
        LOWORD(v3) = v9;
        goto LABEL_9;
      }
    }
    if (v6 == 0xFFFFFFFFLL)
    {
      uint64_t v6 = 0;
      unint64_t v11 = (unint64_t *)(v5 + 8);
      while (1)
      {
        unint64_t v12 = *v11;
        v11 += 18;
        unint64_t v3 = a3 - v12;
        if (a3 < v12) {
          break;
        }
        ++v6;
        a3 = v3;
        if (v4 == v6) {
          goto LABEL_9;
        }
      }
      LOWORD(v3) = a3;
    }
  }
  else
  {
LABEL_9:
    uint64_t v6 = 0xFFFFFFFLL;
  }
  uint64_t v10 = *(void *)(this + 48);
  *(_WORD *)(v10 + 88) = v3;
  *(unsigned char *)(v10 + 92) = *(unsigned char *)(v5 + 144 * v6);
  return this;
}

uint64_t MTMBDiphoneSlice::SelectCandidate(uint64_t this, MEOWReader *a2, __int16 a3)
{
  LOWORD(v3) = a3;
  uint64_t v4 = this;
  int v5 = *(_DWORD *)(this + 8);
  if ((v5 & 0x80000000) == 0)
  {
    this = MEOWReader::CountDiphones(a2, *(unsigned __int8 *)(*(void *)(this + 16) + 93), *(unsigned __int8 *)(*(void *)(this + 16) + 94));
    if (v5 < (int)this) {
      int v3 = *(_DWORD *)(v4 + 8);
    }
  }
  uint64_t v6 = *(void *)(v4 + 24);
  *(_WORD *)(*(void *)(v4 + 16) + 90) = v3;
  *(_WORD *)(v6 + 88) = v3;
  return this;
}

void MTMBSelectUnits::MTMBSelectUnits(MTMBSelectUnits *this, MEOWReader *a2, MTBEPersistentParam *a3, BOOL a4, char a5)
{
  *(void *)this = &unk_1F3480AC8;
  *((void *)this + MEOWVectorBase::~MEOWVectorBase(this + 1) = &unk_1F3480B48;
  *((void *)this + 2) = a2;
  var6 = a3->var6;
  *((void *)this + 3) = a3;
  *((void *)this + MEOWVectorBase::clear(this + 4) = var6;
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)((char *)this + 96), 8);
  MTMBUnitInstructions::MTMBUnitInstructions((MTMBUnitInstructions *)((char *)this + 128));
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)((char *)this + 152), 8);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)((char *)this + 184), 8);
  BOOL v9 = (MTBEDebugFlags::sMEOWDebug & 0x100) != 0 || *((void *)a2 + 3814) == 0;
  *((unsigned char *)this + 232) = v9;
  *((unsigned char *)this + 233) = a5;
  *((unsigned char *)this + 23MEOWVectorBase::clear(this + 4) = 0;
  *((void *)this + 30) = 0;
  MEOWSearchLattice::Create((MEOWSearchLattice *)a2, 0);
}

void sub_1DA4D9C48(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v7, 0x10E1C40730BE78DLL);
  MEOWVectorBase::~MEOWVectorBase(v6);
  MEOWVectorBase::~MEOWVectorBase(v5);
  MTMBUnitInstructions::~MTMBUnitInstructions(v4);
  MEOWVectorBase::~MEOWVectorBase(v3);
  MTBEWorker::Task::~Task(v2);
  MTFESpeechVisitor::~MTFESpeechVisitor(v1);
  _Unwind_Resume(a1);
}

void MTMBSelectUnits::~MTMBSelectUnits(MTMBSelectUnits *this)
{
  *(void *)this = &unk_1F3480AC8;
  uint64_t v2 = (MTBEWorker::Task *)((char *)this + 8);
  *((void *)this + MEOWVectorBase::~MEOWVectorBase(this + 1) = &unk_1F3480B48;
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 30);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 88))(v4);
  }
  MEOWVectorBase::~MEOWVectorBase((void **)this + 23);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 19);
  MTMBUnitInstructions::~MTMBUnitInstructions((MTMBUnitInstructions *)((char *)this + 128));
  MEOWVectorBase::~MEOWVectorBase((void **)this + 12);
  MTBEWorker::Task::~Task(v2);

  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)this);
}

{
  uint64_t vars8;

  MTMBSelectUnits::~MTMBSelectUnits(this);

  JUMPOUT(0x1E016FF00);
}

void non-virtual thunk to'MTMBSelectUnits::~MTMBSelectUnits(MTMBSelectUnits *this)
{
}

{
  uint64_t vars8;

  MTMBSelectUnits::~MTMBSelectUnits((MTMBSelectUnits *)((char *)this - 8));

  JUMPOUT(0x1E016FF00);
}

void MTMBSelectUnits::VisitSentence(MTMBSelectUnits *this, MTFESpeechElement *a2)
{
  (*(void (**)(void))(**((void **)this + 5) + 144))(*((void *)this + 5));
  *((void *)this + 7) = 0;
  *((void *)this + 8) = a2;
  var3 = a2->var3;
  if (var3)
  {
    while (!var3->var1)
    {
      var3 = var3->var6;
      if (!var3) {
        goto LABEL_6;
      }
    }
    a2[1].var4 = var3->var3;
  }
LABEL_6:
  if (*((unsigned char *)this + 233))
  {
    pthread_once(&sScheduleInit, (void (*)(void))InitSearchSchedule);
    int v5 = (MTBEWorker *)sUnitSearchSchedule;
    uint64_t v6 = *((void *)this + 8);
    MTBEWorker::AddTask(v5, (MTBEWorker::Task *)((char *)this + 8), v6);
  }
  else
  {
    MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);
    MTMBSelectUnits::ProcessIntermediatePhrases(this, 0);
    uint64_t v7 = *(void (**)(MTMBSelectUnits *))(*(void *)this + 88);
    v7(this);
  }
}

void InitSearchSchedule(void)
{
}

void sub_1DA4D9F94(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x1070C40AA5774DALL);
  _Unwind_Resume(a1);
}

MTMBSelectUnits *MTMBSelectUnits::ProcessIntermediatePhrases(MTMBSelectUnits *this, MTFESpeechElement *a2)
{
  uint64_t v2 = *(MTFESpeechElement **)(*((void *)this + 8) + 80);
  if (v2 != a2)
  {
    uint64_t v3 = a2;
    uint64_t v4 = this;
    do
    {
      int v5 = (void (***)(void, MTFESpeechElement *))*((void *)v4 + 30);
      if (v5)
      {
        uint64_t v6 = v2;
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = v6->var5;
        }
        while (v6 && v6->var3 == v7);
        while (1)
        {
          (**v5)(v5, v7);
          if (v7 == v2) {
            break;
          }
          uint64_t v7 = v7->var3;
          int v5 = (void (***)(void, MTFESpeechElement *))*((void *)v4 + 30);
        }
      }
      var6 = v2->var6;
      if (!var6)
      {
        var6 = v2->var5;
        while (1)
        {
          var6 = var6->var6;
          if (!var6) {
            break;
          }
          if (var6->var1)
          {
            var6 = var6->var3;
            break;
          }
        }
        if (!var6) {
          uint64_t v3 = 0;
        }
      }
      uint64_t v2 = var6;
    }
    while (var6 != v3);
    pthread_mutex_lock((pthread_mutex_t *)(*((void *)v4 + 3) + 96));
    *(void *)(*((void *)v4 + 8) + 80) = v3;
    MTBEWorker::DebugLog("Report unit selection progress [%08x].\n", v9, v3);
    if (*((unsigned char *)v4 + 234))
    {
      if (!v3)
      {
        uint64_t v10 = *((void *)v4 + 3);
        *(void *)(v10 + 208) = 0;
        pthread_cond_broadcast((pthread_cond_t *)(v10 + 160));
      }
    }
    else
    {
      pthread_cond_broadcast((pthread_cond_t *)(*((void *)v4 + 3) + 160));
      if (!v3)
      {
        if ((MTBEDebugFlags::sMTXDebug & 2) != 0)
        {
          uint64_t v11 = *MEMORY[0x1E4F143C8];
          uint64_t v12 = *((void *)v4 + 2);
          v14[0] = &unk_1F347D710;
          v14[1] = v11;
          void v14[2] = v12;
          int v15 = 0;
          char v16 = 0;
          MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v14, *((MTFESpeechElement **)v4 + 8));
          MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v14);
        }
        uint64_t v13 = *((void *)v4 + 3);
        if (*(_OWORD *)(v13 + 64) != 0)
        {
          MTMBLogDiphones::MTMBLogDiphones((MTMBLogDiphones *)v14, *(__CFArray **)(v13 + 64), *(MTMBDiphoneStatistics **)(v13 + 72));
          MTFESpeechVisitor::Visit((MTFESpeechVisitor *)v14, *((MTFESpeechElement **)v4 + 8));
          MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)v14);
        }
      }
    }
    return (MTMBSelectUnits *)pthread_mutex_unlock((pthread_mutex_t *)(*((void *)v4 + 3) + 96));
  }
  return this;
}

void sub_1DA4DA17C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MTFESpeechVisitor::~MTFESpeechVisitor((MTFESpeechVisitor *)va);
  _Unwind_Resume(a1);
}

uint64_t MTMBSelectUnits::Execute(MTMBSelectUnits *this, void *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*((void *)this + 3) + 96));
  uint64_t v3 = *((void *)this + 3);
  *(void *)(v3 + 208) = this;
  pthread_mutex_unlock((pthread_mutex_t *)(v3 + 96));
  MTFESpeechElement::VisitChildren(*((MTFESpeechElement **)this + 8), (MTFESpeechVisitor *)this);
  MTMBSelectUnits::ProcessIntermediatePhrases(this, 0);
  pthread_mutex_lock((pthread_mutex_t *)(*((void *)this + 3) + 96));
  uint64_t v4 = *((void *)this + 3);
  *(void *)(v4 + 208) = 0;
  pthread_cond_broadcast((pthread_cond_t *)(v4 + 160));
  pthread_mutex_unlock((pthread_mutex_t *)(*((void *)this + 3) + 96));
  int v5 = *(uint64_t (**)(MTMBSelectUnits *))(*(void *)this + 88);

  return v5(this);
}

uint64_t non-virtual thunk to'MTMBSelectUnits::Execute(MTMBSelectUnits *this, void *a2)
{
  return MTMBSelectUnits::Execute((MTMBSelectUnits *)((char *)this - 8), a2);
}

uint64_t MTMBSelectUnits::VisitIntonationalPhrase(MTMBSelectUnits *this, MTFESpeechElement *a2)
{
  *((void *)this + 9) = a2;
  *((_WORD *)this + 1--*(_WORD *)(this + 24) = 256;
  *((void *)this + 1MEOWVectorBase::~MEOWVectorBase(this + 1) = (char *)a2[2].var3 + 4 * SLODWORD(a2[2].var5);
  *((void *)this + 32) = 0;
  (*(void (**)(void))(**((void **)this + 5) + 16))(*((void *)this + 5));
  BOOL v4 = 1;
  *((unsigned char *)this + 216) = 1;
  if (BYTE6(a2[2].var6) - 68 >= 5) {
    char v5 = 0;
  }
  else {
    char v5 = 0x203020303uLL >> (8 * (BYTE6(a2[2].var6) - 68));
  }
  *((unsigned char *)this + 217) = v5;
  char v6 = *((unsigned char *)this + 232);
  if (!v6) {
    BOOL v4 = a2[3].var6 != 0;
  }
  *((unsigned char *)this + 232) = v4;
  MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);
  MTFECommands::Visit((uint64_t)&a2[1].var1, (uint64_t)this);
  *((unsigned char *)this + 232) = v6;

  return MTMBSelectUnits::EvaluatePath(this, 1);
}

uint64_t MTMBSelectUnits::EvaluatePath(MTMBSelectUnits *this, int a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 5) + 80))(*((void *)this + 5));
  if (result)
  {
    uint64_t v5 = result;
    if (a2) {
      (*(void (**)(void))(**((void **)this + 5) + 72))(*((void *)this + 5));
    }
    for (uint64_t i = (*(uint64_t (**)(void))(**((void **)this + 5) + 120))(*((void *)this + 5));
          ;
          uint64_t i = (*(uint64_t (**)(void))(v9 + 136))())
    {
      --v5;
      uint64_t v7 = *((void *)this + 14);
      uint64_t v8 = *(void *)(*((void *)this + 12) + 8 * v7 - 8);
      *((void *)this + 1MEOWVectorBase::clear(this + 4) = v7 - 1;
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)v8 + 16))(v8, *((void *)this + 2), i);
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      uint64_t v9 = **((void **)this + 5);
      if (!v5) {
        break;
      }
    }
    uint64_t result = (*(uint64_t (**)(void))(v9 + 88))();
  }
  *((unsigned char *)this + 248) = 0;
  return result;
}

MTMBSelectUnits *MTMBSelectUnits::VisitIntermediatePhrase(MTMBSelectUnits *this, MTFESpeechElement *a2)
{
  *((void *)this + 10) = a2;
  var3 = a2->var3;
  if (var3)
  {
    BOOL v4 = this;
    do
    {
      if (!var3->var2)
      {
        MTBEAbort(a2);
      }
      this = (MTMBSelectUnits *)(*(uint64_t (**)(MTFESpeechElement *, MTMBSelectUnits *))var3->var0)(var3, v4);
      var3 = var3->var6;
    }
    while (var3);
  }
  return this;
}

uint64_t MTMBSelectUnits::FindWordCandidates(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5, int a6)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (MEOWReader::GetWordDescriptor(*(void *)(a1 + 16), (const char **)a3, a4))
  {
    uint64_t v12 = (char *)(a2 + 200);
    uint64_t v13 = *(const char **)a3;
    if (a2 + 200 == *(void *)a3) {
      return 1;
    }
    goto LABEL_23;
  }
  strcpy(__dst, *(const char **)a3);
  size_t v14 = strlen(__dst);
  unint64_t v15 = v14;
  if (v14 < 4)
  {
    size_t v17 = v14 - 1;
    if (__dst[v14 - 1] != 39) {
      goto LABEL_14;
    }
LABEL_13:
    char v22 = 0;
    __dst[v17] = 0;
    goto LABEL_17;
  }
  char v16 = &__dst[v14 - 2];
  size_t v17 = v14 - 1;
  int v18 = &__dst[v14 - 1];
  if (!strcmp(&__dst[v14 - 2], "N'"))
  {
    *int v18 = 71;
    char v22 = 0;
LABEL_16:
    size_t v17 = v15;
    goto LABEL_17;
  }
  if (*v18 == 39) {
    goto LABEL_13;
  }
  if (strcmp(v16, "'S"))
  {
LABEL_14:
    char v22 = 0;
    goto LABEL_18;
  }
  uint64_t v19 = v15 - 3;
  int v20 = __dst[v15 - 3];
  if (v15 < 5)
  {
    uint64_t v19 = 1;
  }
  else if (v20 == 72)
  {
    size_t v21 = &__dst[v15];
    if ((__dst[v15 - 4] | 0x10) == 0x53)
    {
      char v22 = 0;
LABEL_49:
      *(v21 - 2) = 69;
      goto LABEL_16;
    }
    goto LABEL_47;
  }
  if (v20 == 83)
  {
    char v22 = 0;
    size_t v21 = &__dst[v15];
    goto LABEL_49;
  }
  if (v20 == 89)
  {
    __dst[v19] = 73;
    __dst[v15 - 2] = 69;
    *(void *)a3 = __dst;
    if (MEOWReader::GetWordDescriptor(*(void *)(a1 + 16), (const char **)a3, a4)) {
      goto LABEL_22;
    }
    __dst[v19] = 89;
  }
LABEL_47:
  *(_WORD *)(v18 - MEOWVectorBase::~MEOWVectorBase(this + 1) = 83;
  char v22 = 1;
LABEL_17:
  *(void *)a3 = __dst;
  unint64_t v15 = v17;
  if (MEOWReader::GetWordDescriptor(*(void *)(a1 + 16), (const char **)a3, a4))
  {
LABEL_22:
    uint64_t v12 = (char *)(a2 + 200);
    uint64_t v13 = __dst;
LABEL_23:
    *(void *)a3 = strcpy(v12, v13);
    return 1;
  }
LABEL_18:
  CFStringRef v23 = CFStringCreateWithCStringNoCopy(0, __dst, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  *(void *)a3 = __dst;
  if (v23)
  {
    CFStringRef v24 = v23;
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), v23);
    if (Value && CFStringGetCString(Value, __dst, 64, 0))
    {
      int WordDescriptor = MEOWReader::GetWordDescriptor(*(void *)(a1 + 16), (const char **)a3, a4);
      CFRelease(v24);
      if (WordDescriptor) {
        goto LABEL_22;
      }
    }
    else
    {
      CFRelease(v24);
    }
  }
  if (!a5) {
    goto LABEL_69;
  }
  uint64_t v28 = v15 - 1;
  if (__dst[v15 - 1] != 83
    || *(__int16 *)(a2 + 172) - *(__int16 *)(a2 + 168) < 3
    || (SLWordTagSet::find((SLWordTagSet *)(a2 + 92)) & 1) != 0)
  {
    goto LABEL_69;
  }
  char v29 = MTFELastPhoneme((MTFESpeechElement *)a2);
  uint64_t v30 = v29[6];
  if (v15 >= 4)
  {
    uint64_t v41 = *(void *)(v30 + 48);
    if (!strcmp(&__dst[v15 - 2], "ES") && *((unsigned char *)v29 + 58) == 43)
    {
      int v31 = *(unsigned __int8 *)(v30 + 58);
      if (v31 == 25 || v31 == 3)
      {
        if (v22) {
          goto LABEL_36;
        }
        unint64_t v36 = v15 - 3;
        int v37 = __dst[v15 - 3];
        if (v37 > 82)
        {
          if (v37 == 83)
          {
            if (__dst[v15 - 4] == 83) {
              goto LABEL_39;
            }
          }
          else if (v37 == 88)
          {
            goto LABEL_39;
          }
        }
        else
        {
          if (v37 != 72)
          {
            if (v37 == 73)
            {
              __dst[v36] = 89;
              uint64_t v38 = v15 - 2;
              uint64_t v34 = &__dst[v15 - 2];
              *uint64_t v34 = 0;
              *(void *)a3 = __dst;
              if (MTMBSelectUnits::IsSafeToMorph((MTMBSelectUnits *)a1, __dst, v38, *(unsigned __int8 *)(v30 + 58)))
              {
                WordCandidates = (MTMBSelectUnits *)MTMBSelectUnits::FindWordCandidates(a1, a2, a3, a4, 0, 0);
                if (WordCandidates) {
                  MTMBSelectUnits::AddMorphWord(WordCandidates, (MTFEWord *)a2, "S");
                }
              }
              __dst[v36] = 73;
              goto LABEL_64;
            }
            goto LABEL_36;
          }
          if (((__dst[v15 - 4] - 67) & 0xEF) == 0)
          {
LABEL_39:
            uint64_t v33 = v15 - 2;
            uint64_t v34 = &__dst[v15 - 2];
            *uint64_t v34 = 0;
            *(void *)a3 = __dst;
            if (MTMBSelectUnits::IsSafeToMorph((MTMBSelectUnits *)a1, __dst, v33, *(unsigned __int8 *)(v41 + 58)))
            {
              __int16 v35 = (MTMBSelectUnits *)MTMBSelectUnits::FindWordCandidates(a1, a2, a3, a4, 0, 0);
              if (v35) {
                MTMBSelectUnits::AddMorphWord(v35, (MTFEWord *)a2, "ES");
              }
            }
LABEL_64:
            *uint64_t v34 = 69;
            goto LABEL_65;
          }
        }
LABEL_36:
        __dst[v28] = 0;
        *(void *)a3 = __dst;
        if (MTMBSelectUnits::IsSafeToMorph((MTMBSelectUnits *)a1, __dst, v15 - 1, *(unsigned __int8 *)(v30 + 58)))
        {
          char v32 = (MTMBSelectUnits *)MTMBSelectUnits::FindWordCandidates(a1, a2, a3, a4, 0, 0);
          if (v32) {
LABEL_68:
          }
            MTMBSelectUnits::AddMorphWord(v32, (MTFEWord *)a2, "S");
        }
        __dst[v28] = 83;
        goto LABEL_39;
      }
    }
  }
LABEL_65:
  if ((*((unsigned char *)v29 + 58) & 0xFE) == 0x2A)
  {
    __dst[v28] = 0;
    *(void *)a3 = __dst;
    if (MTMBSelectUnits::IsSafeToMorph((MTMBSelectUnits *)a1, __dst, v28, *(unsigned __int8 *)(v30 + 58)))
    {
      char v32 = (MTMBSelectUnits *)MTMBSelectUnits::FindWordCandidates(a1, a2, a3, a4, 0, 0);
      if (v32) {
        goto LABEL_68;
      }
    }
  }
LABEL_69:
  if (!a6 || !MTMBSelectUnits::FindHyphenatedConstituents((MTMBSelectUnits *)a1, (MTFESpeechElement *)a2)) {
    return 0;
  }
  *(void *)a3 = a2 + 200;
  *(unsigned char *)(a3 + 8) = *(unsigned char *)(a2 + 86);
  *(_OWORD *)(a3 + 10) = *(_OWORD *)(a2 + 92);
  *(unsigned char *)(a3 + --*(_WORD *)(this + 26) = 0;
  return MTMBSelectUnits::FindWordCandidates(a1, a2, a3, a4, 1, 0);
}

BOOL MTMBSelectUnits::IsSafeToMorph(MTMBSelectUnits *this, const char *a2, uint64_t a3, int a4)
{
  if (a2[a3 - 1] == 83) {
    return 0;
  }
  Temp = (SLToken *)SLTokenCreateTemp();
  BOOL v4 = SLDictLookup::Lookup(*(SLDictLookup **)(*((void *)this + 3) + 88), *(SLDictionary **)(*(void *)(*((void *)this + 3) + 88) + 8), a2, a3, Temp)&& SLTokenCountHomographs() <= 1&& (SLTokenGetHomograph(), *(void *)v15.var0 = SLHomographGetTags(), *(void *)&v15.var0[4] = v10, (SLWordTagSet::find(&v15) & 1) == 0)&& (Phonemes = (const __CFData *)SLHomographGetPhonemes()) != 0&& (v12 = Phonemes, (Length = CFDataGetLength(Phonemes)) != 0)&& CFDataGetBytePtr(v12)[Length - 1] == a4;
  SLTokenRelease();
  return v4;
}

void MTMBSelectUnits::AddMorphWord(MTMBSelectUnits *this, MTFEWord *a2, const char *a3)
{
}

void sub_1DA4DADF8(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C405D120DB7);
  _Unwind_Resume(a1);
}

uint64_t MTMBSelectUnits::FindHyphenatedConstituents(MTMBSelectUnits *this, MTFESpeechElement *a2)
{
  v18[31] = *MEMORY[0x1E4F143B8];
  p_var5 = (char *)&a2[3].var5;
  char v16 = (MTFEPhoneme *)MTFEFirstPhoneme(a2);
  uint64_t v5 = &v17 - 4;
  uint64_t v6 = -1;
  while (1)
  {
    uint64_t v7 = v6;
    uint64_t v8 = strchr(p_var5, 45);
    uint64_t v9 = v8;
    uint64_t v10 = v8 ? v8 - p_var5 : strlen(p_var5);
    v5[4] = p_var5;
    Temp = (SLToken *)SLTokenCreateTemp();
    v5[5] = (const char *)Temp;
    v5[6] = 0;
    if (!SLDictLookup::Lookup(*(SLDictLookup **)(*((void *)this + 3) + 88), *(SLDictionary **)(*(void *)(*((void *)this + 3) + 88) + 8), p_var5, v10, Temp)|| !MTMBConstituent::FindHomograph((MTMBConstituent *)(v5 + 4), (MTFEWord *)a2, &v16))
    {
      break;
    }
    p_var5 = v9 + 1;
    v5 += 4;
    uint64_t v6 = v7 - 1;
    if (!v9)
    {
      if (v7 != -1) {
        MTMBConstituent::SplitWord((MTMBConstituent *)v5, (MTFEWord *)a2);
      }
      MTMBConstituent::SetWord(&v17, a2);
      uint64_t v12 = 1;
      goto LABEL_12;
    }
  }
  uint64_t v12 = 0;
  if (!v7) {
    return v12;
  }
LABEL_12:
  uint64_t v13 = -v7;
  size_t v14 = v18;
  do
  {
    v14 += 4;
    SLTokenRelease();
    --v13;
  }
  while (v13);
  return v12;
}

uint64_t MTMBConstituent::clear(MTMBConstituent *this)
{
  return SLTokenRelease();
}

uint64_t MTMBConstituent::FindHomograph(MTMBConstituent *this, MTFEWord *a2, MTFEPhoneme **a3)
{
  if (*a3)
  {
    uint64_t var0_low = SLOWORD((*a3)->var5[1].var0);
    uint64_t v7 = SLTokenCountHomographs();
    if (v7 >= 1)
    {
      uint64_t v8 = v7;
      for (uint64_t i = 0; i != v8; ++i)
      {
        *((void *)this + 2) = SLTokenGetHomograph();
        CFDataRef Phonemes = (const __CFData *)SLHomographGetPhonemes();
        BytePtr = CFDataGetBytePtr(Phonemes);
        CFIndex Length = CFDataGetLength(Phonemes);
        uint64_t v13 = (uint64_t)*a3;
        if (*a3)
        {
          do
          {
            uint64_t v14 = 0;
LABEL_6:
            CFIndex v15 = Length - v14;
            if (Length == v14) {
              break;
            }
            uint64_t v16 = *(void *)(v13 + 32);
            if (*(MTFEWord **)(v16 + 32) != a2) {
              break;
            }
            int v17 = *(unsigned __int8 *)(v13 + 58);
            int v18 = BytePtr[v14];
            if (v17 != v18)
            {
              if (BytePtr[v14] > 0x2Fu)
              {
                switch(BytePtr[v14])
                {
                  case '4':
                    if (v17 != 48) {
                      goto LABEL_49;
                    }
                    uint64_t v13 = *(void *)(v13 + 40);
                    if (!v13 || *(unsigned char *)(v13 + 58) != 44) {
                      goto LABEL_49;
                    }
                    goto LABEL_43;
                  case '5':
                    if (v17 != 49) {
                      goto LABEL_49;
                    }
                    uint64_t v13 = *(void *)(v13 + 40);
                    if (!v13 || *(unsigned char *)(v13 + 58) != 45) {
                      goto LABEL_49;
                    }
                    goto LABEL_43;
                  case '6':
                  case '7':
                  case '8':
                  case '9':
                  case ';':
                    goto LABEL_49;
                  case ':':
                  case '<':
                    goto LABEL_13;
                  default:
                    if ((v18 - 74) < 2) {
                      goto LABEL_13;
                    }
                    if (v18 != 48 || v17 != 55) {
                      goto LABEL_49;
                    }
                    goto LABEL_43;
                }
              }
              switch(BytePtr[v14])
              {
                case 1u:
                case 2u:
LABEL_13:
                  if (Length == ++v14) {
                    goto LABEL_48;
                  }
                  goto LABEL_6;
                case 3u:
                case 4u:
                  if (v17 != 20) {
                    goto LABEL_49;
                  }
                  goto LABEL_31;
                case 5u:
                case 6u:
                case 0xCu:
                case 0xDu:
                case 0xEu:
                case 0xFu:
                case 0x10u:
                  goto LABEL_49;
                case 7u:
                  if (v17 == 22) {
                    goto LABEL_31;
                  }
                  goto LABEL_49;
                case 8u:
                case 0xBu:
                  if (v17 != 12) {
                    goto LABEL_49;
                  }
                  goto LABEL_31;
                case 9u:
                case 0x11u:
                  if (v17 != 23) {
                    goto LABEL_49;
                  }
                  goto LABEL_31;
                case 0xAu:
                case 0x12u:
                  if (v17 != 24) {
                    goto LABEL_49;
                  }
LABEL_31:
                  if (Length - 1 == v14) {
                    goto LABEL_49;
                  }
                  uint64_t v19 = &BytePtr[v14 + 1];
                  if (*v19 != 32) {
                    goto LABEL_49;
                  }
                  CFIndex v15 = ~v14 + Length;
                  goto LABEL_44;
                default:
                  if (v18 == 32)
                  {
                    if (v17 != 26) {
                      goto LABEL_49;
                    }
                  }
                  else if (v18 != 33 || v17 != 27)
                  {
                    goto LABEL_49;
                  }
                  break;
              }
            }
LABEL_43:
            uint64_t v19 = &BytePtr[v14];
LABEL_44:
            CFIndex Length = v15 - 1;
            if (v15 == 1)
            {
              uint64_t v16 = *(void *)(v13 + 32);
LABEL_48:
              if (v13 == *(void *)(v16 + 24))
              {
                *((void *)this + 3) = *(__int16 *)(v16 + 56) - var0_low + 1;
                *a3 = *(MTFEPhoneme **)(v13 + 40);
                return 1;
              }
              break;
            }
            BytePtr = v19 + 1;
            uint64_t v13 = *(void *)(v13 + 40);
          }
          while (v13);
        }
LABEL_49:
        ;
      }
    }
  }
  return 0;
}

void MTMBConstituent::SplitWord(MTMBConstituent *this, MTFEWord *a2)
{
}

void sub_1DA4DB360(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C40BE0D601BLL);
  _Unwind_Resume(a1);
}

_DWORD *MTMBConstituent::SetWord(const char **this, MTFESpeechElement *a2)
{
  BOOL v4 = strcpy((char *)&a2[3].var5, *this);
  uint64_t v5 = strchr(v4, 45);
  if (v5) {
    *uint64_t v5 = 0;
  }
  SLHomographGetPOS();
  BYTE6(a2[1].varMEOWVectorBase::clear(this + 4) = SLFirstPOSInSet();
  *(MTFESpeechElement **)((char *)&a2[1].var5 + MEOWVectorBase::clear(this + 4) = (MTFESpeechElement *)SLHomographGetTags();
  uint64_t v6 = (SLWordTagSet *)((char *)&a2[1].var5 + 4);
  *(MTFESpeechElement **)((char *)&a2[1].var6 + MEOWVectorBase::clear(this + 4) = v7;
  uint64_t v8 = SLTokenCountHomographs();
  if (v8 >= 1)
  {
    uint64_t v9 = v8;
    for (uint64_t i = 0; i != v9; ++i)
    {
      if ((const char *)SLTokenGetHomograph() != this[2])
      {
        v20[0] = SLHomographGetTags();
        v20[1] = v11;
        uint64_t v12 = LOWORD(v20[0]);
        if (LOWORD(v20[0]))
        {
          uint64_t v13 = 0x100000000;
          do
          {
            __int16 v14 = *(_WORD *)((char *)v20 + (v13 >> 31));
            if ((SLWordTagSet::find((SLWordTagSet *)((char *)&a2[1].var5 + 4)) & 1) == 0)
            {
              unsigned __int16 v15 = v14 ^ 1;
              if ((SLWordTagSet::find((SLWordTagSet *)((char *)&a2[1].var5 + 4)) & 1) == 0)
              {
                uint64_t v16 = v6->var0[0];
                if (v16 <= 6)
                {
                  uint64_t v17 = v16 + 1;
                  v6->var0[0] = v17;
                  v6->var0[v17] = v15;
                }
              }
            }
            v13 += 0x100000000;
            --v12;
          }
          while (v12);
        }
      }
    }
  }
  var4 = a2->var4;
  WORD2(a2[3].var0) = WORD2(var4[1].var0);
  *(_DWORD *)((char *)&a2[3].var0 + 6) = (unsigned __int16)(LOWORD(var4[1].var0) + 1);
  uint64_t result = MTFEFirstPhoneme(a2);
  result[18] |= 0x10000u;
  do
  {
    if (*(MTFESpeechElement **)(*((void *)result + 4) + 32) != a2) {
      break;
    }
    a2[3].var1 += (int)*((float *)result + 16);
    uint64_t result = (_DWORD *)*((void *)result + 5);
  }
  while (result);
  return result;
}

MTMBSelectUnits *MTMBSelectUnits::VisitWord(MTMBSelectUnits *this, MTFESpeechElement *a2)
{
  if (!*((unsigned char *)this + 234))
  {
    uint64_t v3 = this;
    *((void *)this + 28) = a2;
    MTFECommands::Visit((uint64_t)&a2[2], (uint64_t)this);
    if (*((void *)v3 + 7) && *((unsigned char *)MTFEFirstPhoneme(a2) + 58))
    {
      uint64_t v4 = *((void *)v3 + 3);
      float v5 = *(float *)(v4 + 32);
      *((void *)v3 + 11) += 4 * ((int)v5 - 1);
      *(float *)(*((void *)v3 + 7) + 6MEOWVectorBase::clear(this + 4) = (float)(v5 + -1.0) + *(float *)(*((void *)v3 + 7) + 64);
      *((void *)v3 + 7) = 0;
      *(_DWORD *)(v4 + 32) = 0;
    }
    char var5 = (char)a2[3].var5;
    if (var5)
    {
      if (BYTE1(a2[3].var5)) {
        char var5 = 0;
      }
      else {
        char var5 = ((uint64_t)a2[1].var0 & 0xC) != 0;
      }
    }
    if (*((unsigned char *)v3 + 232)
      || (var5 & 1) != 0
      || (BYTE1(a2[1].var0) & 0x10) != 0
      || (SLWordTagSet::find((SLWordTagSet *)((char *)&a2[1].var5 + 4)) & 1) != 0)
    {
      return (MTMBSelectUnits *)MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)v3);
    }
    else
    {
      MEOWWordSliceInfo::MEOWWordSliceInfo((MEOWWordSliceInfo *)&p_var5);
      if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBAllowHyphenatedWordUnits)) {
        BOOL v7 = strchr((char *)&a2[3].var5, 45) != 0;
      }
      else {
        BOOL v7 = 0;
      }
      p_char var5 = (char *)&a2[3].var5;
      unsigned __int8 v21 = BYTE6(a2[1].var4);
      SLWordTagSet v22 = *(SLWordTagSet *)((char *)&a2[1].var5 + 4);
      BOOL v23 = ((uint64_t)a2[1].var0 & 0x200) != 0;
      if (MTMBSelectUnits::FindWordCandidates((uint64_t)v3, (uint64_t)a2, (uint64_t)&p_var5, &v19, 1, v7))
      {
        MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v18, 1);
        MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v17, 8);
        MEOWReader::GetWordData(*((void *)v3 + 2), (unsigned __int16 **)&v19, (MEOWVectorBase *)v17, v18);
        if (*((unsigned char *)v3 + 248) == 3) {
          MTMBSelectUnits::AddFirstDemiSlice();
        }
        MEOWVectorBase::Swap((uint64_t *)v3 + 19, (MEOWVectorBase *)v17);
        uint64_t v8 = *((void *)v3 + 11) + 4 * *((void *)v3 + 32);
        uint64_t var1 = a2[3].var1;
        uint64_t v26 = v8;
        uint64_t v9 = a2->var5;
        char v10 = *((unsigned char *)v3 + 216);
        if (v9 == v9->var5->var4)
        {
          var4 = v9->var4;
          if (var4 == a2 || a2->var6 == var4 && ((uint64_t)var4[1].var0 & 0x40) != 0) {
            char v10 = *((unsigned char *)v3 + 217);
          }
        }
        char v27 = (4 * LOBYTE(a2[1].var0)) & 0x30 | v10;
        uint64_t v24 = SWORD2(a2[3].var0) - (uint64_t)SLOWORD(a2[3].var0);
        uint64_t v12 = MTFEFirstPhoneme(a2);
        char v13 = MEOWPhon::sP2M[v12[58]];
        char v14 = v12[59];
        unsigned __int16 v15 = MTFELastPhoneme(a2);
        char v16 = v15[59] + MEOWPhon::sP2M[v15[58]];
        char v28 = v14 + v13;
        char v29 = v16;
        *((unsigned char *)v3 + 248) = 1;
        MEOWVectorBase::~MEOWVectorBase(v17);
        MEOWVectorBase::~MEOWVectorBase(v18);
      }
      this = (MTMBSelectUnits *)MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)v3);
      if (*((unsigned char *)v3 + 248) == 1)
      {
        (*(void (**)(void, char **))(**((void **)v3 + 5) + 24))(*((void *)v3 + 5), &p_var5);
        operator new();
      }
    }
  }
  return this;
}

void sub_1DA4DB874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  _Unwind_Resume(a1);
}

void MTMBSelectUnits::AddFirstDemiSlice()
{
}

void sub_1DA4DBB0C(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C4034FE1429);
  _Unwind_Resume(a1);
}

uint64_t *MTMBSelectUnits::AddSlice(MTMBSelectUnits *this, MTMBUnitSlice *a2)
{
  uint64_t v4 = (void *)((char *)this + 96);
  if (!*((void *)this + 14) && *((unsigned char *)this + 248) != 2)
  {
    MTMBSelectUnits::ProcessIntermediatePhrases(this, *((MTFESpeechElement **)this + 10));
    if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTMBConcurrencyTorture)) {
      sleep(1u);
    }
  }
  MEOWVectorBase::Append(v4);
  *(void *)(*((void *)this + 12) + 8 * *((void *)this + 14) - 8) = a2;
  unsigned __int16 v6 = 0;
  if (MTMBUnitInstructions::ReadyInQueue((uint64_t)this + 128, (uint64_t *)this + 17, &v6))
  {
    do
      (*(void (**)(void, void))(**((void **)this + 5) + 112))(*((void *)this + 5), v6);
    while ((MTMBUnitInstructions::ReadyInQueue((uint64_t)this + 128, (uint64_t *)this + 17, &v6) & 1) != 0);
  }
  if (MTMBUnitInstructions::ReadyInQueue((uint64_t)this + 128, (uint64_t *)this + 16, &v6))
  {
    do
      (*(void (**)(void, void))(**((void **)this + 5) + 96))(*((void *)this + 5), v6);
    while ((MTMBUnitInstructions::ReadyInQueue((uint64_t)this + 128, (uint64_t *)this + 16, &v6) & 1) != 0);
  }
  if (MTMBUnitInstructions::ReadyInQueue((uint64_t)this + 128, (uint64_t *)this + 18, &v6))
  {
    do
    {
      (*(void (**)(void, void))(**((void **)this + 5) + 104))(*((void *)this + 5), v6);
      *((_DWORD *)a2 + 2) = v6;
    }
    while ((MTMBUnitInstructions::ReadyInQueue((uint64_t)this + 128, (uint64_t *)this + 18, &v6) & 1) != 0);
  }
  return MTMBUnitInstructions::NextSlice((uint64_t **)this + 16);
}

MTMBSelectUnits *MTMBSelectUnits::VisitCommand(MTMBSelectUnits *this, MTFECommand *a2)
{
  unint64_t var8 = a2->var8;
  BOOL v4 = var8 == 1835429746 || var8 == 1836475764 || var8 == 1836021362;
  if (v4 && (a2->var9 & 0x80000000) == 0)
  {
    MTMBUnitInstructions::AddCommand((uint64_t ***)this + 16, a2);
    unsigned __int16 v6 = (uint64_t (*)(MTFECommand *))*((void *)a2->var0 + 2);
    return (MTMBSelectUnits *)v6(a2);
  }
  return this;
}

MTMBSelectUnits *MTMBSelectUnits::VisitPhoneme(MTMBSelectUnits *this, MTFESpeechElement *a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 234)) {
    return this;
  }
  uint64_t v3 = this;
  if (*((unsigned char *)this + 249))
  {
    *((_WORD *)this + 13MEOWVectorBase::clear(this + 4) = 0;
    int v4 = BYTE2(a2[1].var0);
    char v5 = BYTE3(a2[1].var0) + MEOWPhon::sP2M[BYTE2(a2[1].var0)];
    *((unsigned char *)this + 270) = v5;
    *((unsigned char *)this + 265) = 0;
    *((unsigned char *)this + 266) = v5;
    *((unsigned char *)this + 25MEOWVectorBase::~MEOWVectorBase(this + 1) = 0;
    *((unsigned char *)this + 249) = 0;
  }
  else
  {
    int v4 = BYTE2(a2[1].var0);
  }
  var6 = a2->var6;
  if (!var6) {
    var6 = (MTFESpeechElement *)&MTFEPhonemeFlags::sSIL;
  }
  if (v4)
  {
    uint64_t v7 = *((void *)this + 7);
    uint64_t v8 = *((void *)this + 3);
    if (v7)
    {
      float v9 = *(float *)(v8 + 32);
      *((void *)this + 11) += 4 * ((int)v9 - 1);
      *(float *)(v7 + 6MEOWVectorBase::clear(this + 4) = (float)(v9 + -1.0) + *(float *)(v7 + 64);
      *((void *)this + 7) = 0;
    }
    *(_DWORD *)(v8 + 32) = 0;
  }
  else
  {
    uint64_t v10 = *((void *)this + 3);
    float v11 = *(float *)(v10 + 32);
    if (v11 == 0.0)
    {
      float v14 = *(float *)&a2[1].var1;
      float v15 = fminf(v14, 200.0);
      *(float *)(v10 + 32) = v15;
      *(float *)&a2[1].uint64_t var1 = v14 - (float)(v15 + -1.0);
      *((void *)this + 7) = a2;
    }
    else
    {
      float v12 = v11 + -1.0;
      *(float *)&a2[1].uint64_t var1 = v12 + *(float *)&a2[1].var1;
      uint64_t v13 = *((void *)this + 9);
      if (v13)
      {
        *(_DWORD *)(v13 + 144) -= (int)v12;
        *((void *)this + 11) -= 4 * (int)v12;
      }
      *(_DWORD *)(v10 + 32) = 0;
      *((void *)this + 7) = 0;
    }
  }
  *((unsigned char *)this + 250) = *((unsigned char *)this + 251);
  if (((uint64_t)a2[1].var3 & 0x1400) != 0) {
    char v16 = 2;
  }
  else {
    char v16 = 1;
  }
  *((unsigned char *)this + 25MEOWVectorBase::~MEOWVectorBase(this + 1) = v16;
  uint64_t v17 = (int *)((char *)this + 267);
  *(_WORD *)((char *)this + 267) = *((_WORD *)this + 134);
  *((unsigned char *)this + 269) = *((unsigned char *)this + 270);
  char v18 = BYTE3(var6[1].var0) + MEOWPhon::sP2M[BYTE2(var6[1].var0)];
  *((unsigned char *)this + 270) = v18;
  long long v19 = (unsigned __int8 *)this + 265;
  unsigned __int8 v20 = *((unsigned char *)this + 265);
  unsigned __int8 v21 = (char *)this + 264;
  *((unsigned char *)this + 26MEOWVectorBase::clear(this + 4) = v20;
  unsigned __int8 v22 = *((unsigned char *)this + 266);
  *((unsigned char *)this + 265) = v22;
  *((unsigned char *)this + 266) = v18;
  if (!(v20 | v22)) {
    MEOWReader::SubstituteFirst(*((MEOWReader **)this + 2), (unsigned __int8 *)this + 264, (unsigned __int8 *)this + 265);
  }
  LOWORD(v48) = 0;
  this = (MTMBSelectUnits *)MEOWReader::SubstituteDemis(*((MEOWReader **)v3 + 2), (unsigned __int8 *)v3 + 264, (unsigned __int8 *)v3 + 265, (unsigned __int8 *)v3 + 266, (unsigned __int8 *)&v48 + 1, (unsigned __int8 *)&v48);
  char v23 = (char)this;
  if (this)
  {
    if ((this & 0x80000000) != 0)
    {
      uint64_t v25 = (FILE *)*MEMORY[0x1E4F143C8];
      uint64_t v26 = MEOWPhon::Name((MEOWPhon *)*((unsigned __int8 *)v3 + 268));
      char v27 = MEOWPhon::Name((MEOWPhon *)*((unsigned __int8 *)v3 + 269));
      char v28 = MEOWPhon::Name((MEOWPhon *)*((unsigned __int8 *)v3 + 270));
      fprintf(v25, "MacinTalk Fatal Error: This voice is broken beyond repair.\n  There are no units for %s-%s-%s, and no even remotely\n  conceivable substitutions.\n", v26, v27, v28);
      this = (MTMBSelectUnits *)MTBEAbort(a2);
    }
    else if ((MTBEDebugFlags::sMEOWDebug & 0x800) != 0)
    {
      BOOL v24 = (this & 1) == 0;
      int v39 = (FILE *)*MEMORY[0x1E4F143C8];
      MEOWPhon::Name((MEOWPhon *)*((unsigned __int8 *)v3 + 268));
      MEOWPhon::Name((MEOWPhon *)*((unsigned __int8 *)v3 + 269));
      MEOWPhon::Name((MEOWPhon *)*((unsigned __int8 *)v3 + 264));
      if (v24)
      {
        MEOWPhon::Name((MEOWPhon *)*v19);
        this = (MTMBSelectUnits *)fprintf(v39, "MEOW Substitution %s-%s -> %s-%s\n");
      }
      else
      {
        MEOWPhon::Name((MEOWPhon *)BYTE1(v48));
        MEOWPhon::Name((MEOWPhon *)v48);
        MEOWPhon::Name((MEOWPhon *)*v19);
        this = (MTMBSelectUnits *)fprintf(v39, "MEOW Substitution %s-%s -> %s(-%s)-(%s-)%s\n");
      }
    }
  }
  unint64_t v29 = vcvtms_u32_f32(*(float *)&a2[1].var1 * *(float *)(&a2[1].var2 + 2));
  int v30 = *((char *)v3 + 248);
  if ((v30 - 3) < 2)
  {
    if ((v23 & 1) == 0)
    {
      unsigned __int8 v31 = *v19;
      if ((v23 & 2) != 0) {
        *(unsigned char *)(*((void *)v3 + 6) + 9MEOWVectorBase::clear(this + 4) = v31;
      }
      BYTE4(a2[1].var5) = *((unsigned char *)v3 + 264);
      BYTE5(a2[1].var5) = v31;
      BYTE6(a2[1].var5) = *((unsigned char *)v3 + 266);
      MEOWDiphoneSliceInfo::MEOWDiphoneSliceInfo((MEOWDiphoneSliceInfo *)v41);
      int v32 = *((unsigned __int8 *)v3 + 265);
      v41[0] = *((unsigned char *)v3 + 264);
      v41[1] = v32;
      int v42 = *v17;
      __int16 v43 = *((_WORD *)v3 + 125);
      uint64_t v33 = *((void *)v3 + 11);
      uint64_t v44 = *((void *)v3 + 32);
      unint64_t v45 = v29;
      uint64_t v46 = v33;
      char var5 = a2->var5;
      if (var5->var3 == a2)
      {
        uint64_t v35 = *((void *)v3 + 28);
        while (var5 != (MTFESpeechElement *)v35 || (*(unsigned char *)(v35 + 57) & 0x10) != 0)
        {
          BOOL v36 = var5->var5->var3 == var5;
          char var5 = var5->var5;
          if (!v36) {
            goto LABEL_49;
          }
        }
        char v47 = 1;
      }
LABEL_49:
      if (v32
        || (this = (MTMBSelectUnits *)(*(uint64_t (**)(void))(**((void **)v3 + 5) + 80))(*((void *)v3 + 5))) != 0)
      {
        (*(void (**)(void, unsigned char *))(**((void **)v3 + 5) + 32))(*((void *)v3 + 5), v41);
        operator new();
      }
      if (*v19)
      {
        char v38 = 3;
LABEL_55:
        *((unsigned char *)v3 + 248) = v38;
        goto LABEL_56;
      }
LABEL_54:
      this = (MTMBSelectUnits *)MTMBSelectUnits::EvaluatePath(v3, 1);
      char v38 = 4;
      goto LABEL_55;
    }
    if (*v21)
    {
      *(unsigned char *)(*((void *)v3 + 6) + 9MEOWVectorBase::clear(this + 4) = BYTE1(v48);
      operator new();
    }
LABEL_43:
    unsigned __int8 v37 = *v19;
    if (*v19)
    {
      BYTE4(a2[1].var5) = *((unsigned char *)v3 + 264);
      BYTE5(a2[1].var5) = v37;
      BYTE6(a2[1].var5) = *((unsigned char *)v3 + 266);
      MEOWDemiSliceInfo::MEOWDemiSliceInfo((MEOWDemiSliceInfo *)v41, 1);
      if (*((unsigned char *)v3 + 248) == 2)
      {
        __s[0] = 0;
        v40[0] = *((void *)v3 + 19) + 4;
        v40[1] = 8;
        v40[2] = *((void *)v3 + 21);
        MEOWDemiSliceInfo::PhonemeSet::AddPhonemes(__s, v40);
        operator new();
      }
      operator new();
    }
    goto LABEL_54;
  }
  if (!*((unsigned char *)v3 + 248) || v30 == 2) {
    goto LABEL_43;
  }
LABEL_56:
  *((void *)v3 + 11) += 4 * (*((void *)v3 + 32) + v29);
  *((void *)v3 + 32) = (unint64_t)*(float *)&a2[1].var1 - v29;
  *((void *)v3 + 6) = a2;
  if (*((unsigned char *)v3 + 269)) {
    *((unsigned char *)v3 + 216) = 0;
  }
  *((void *)v3 + 9) = 0;
  return this;
}

void sub_1DA4DC634(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C4034FE1429);
  _Unwind_Resume(a1);
}

const char *MTMBSelectUnits::AbortUnitSelection(MTMBSelectUnits *this, const char *a2)
{
  *((unsigned char *)this + 23MEOWVectorBase::clear(this + 4) = 1;
  uint64_t v2 = *((void *)this + 30);
  if (v2) {
    *(unsigned char *)(v2 + 25) = 1;
  }
  uint64_t result = MTBEWorker::DebugLog("Aborting unit search.\n", a2);
  __dmb(0xBu);
  return result;
}

MTMBSelectUnits *MTMBSelectUnits::DeletePhrase(MTMBSelectUnits *this, MTFESpeechElement *a2, MTBEPersistentParam *a3)
{
  uint64_t v3 = this;
  if (a3)
  {
    this = (MTMBSelectUnits *)sUnitSearchSchedule;
    if (sUnitSearchSchedule)
    {
      MTBEWorker::PurgeTasks((MTBEWorker *)sUnitSearchSchedule, (const char *)v3);
      pthread_mutex_lock((pthread_mutex_t *)&a2[1].var6);
      var6 = a2[3].var6;
      if (var6 && *(MTMBSelectUnits **)&var6[1].var1 == v3)
      {
        var6[4].var2 = 1;
        var3 = var6[4].var3;
        if (var3) {
          BYTE1(var3->varMEOWVectorBase::clear(this + 4) = 1;
        }
        MTBEWorker::DebugLog("Aborting unit search.\n", v5);
        __dmb(0xBu);
        do
        {
          pthread_cond_wait((pthread_cond_t *)&a2[2].var7, (pthread_mutex_t *)&a2[1].var6);
          uint64_t v8 = a2[3].var6;
        }
        while (v8 && *(MTMBSelectUnits **)&v8[1].var1 == v3);
      }
      this = (MTMBSelectUnits *)pthread_mutex_unlock((pthread_mutex_t *)&a2[1].var6);
    }
  }
  if (v3)
  {
    float v9 = *(uint64_t (**)(MTMBSelectUnits *))(*(void *)v3 + 16);
    return (MTMBSelectUnits *)v9(v3);
  }
  return this;
}

void MTMBWordSlice::~MTMBWordSlice(MTMBWordSlice *this)
{
}

void MTMBFirstDemiSlice::~MTMBFirstDemiSlice(void **this)
{
}

{
  uint64_t vars8;

  MEOWVectorBase::~MEOWVectorBase(this + 2);

  JUMPOUT(0x1E016FF00);
}

void MTMBSecondDemiSlice::~MTMBSecondDemiSlice(void **this)
{
}

{
  uint64_t vars8;

  MEOWVectorBase::~MEOWVectorBase(this + 2);

  JUMPOUT(0x1E016FF00);
}

void MTMBDiphoneSlice::~MTMBDiphoneSlice(MTMBDiphoneSlice *this)
{
}

uint64_t MTMBSelectUnits::Name(MTMBSelectUnits *this)
{
  return (uint64_t)this + 271;
}

uint64_t non-virtual thunk to'MTMBSelectUnits::Name(MTMBSelectUnits *this)
{
  return (uint64_t)this + 263;
}

void MEOWSearchLattice::Create(MEOWSearchLattice *this, MEOWReader *a2)
{
}

void sub_1DA4DC938(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10F1C40FA58F6FALL);
  _Unwind_Resume(a1);
}

void MEOWWordSliceInfo::MEOWWordSliceInfo(MEOWWordSliceInfo *this)
{
  *(void *)this = 0;
  *((unsigned char *)this + 8) = 0;
  *((_WORD *)this + 5) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *(_DWORD *)((char *)this + 55) = 0;
}

{
  *(void *)this = 0;
  *((unsigned char *)this + 8) = 0;
  *((_WORD *)this + 5) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *(_DWORD *)((char *)this + 55) = 0;
}

__n128 MEOWWordSliceInfo::MEOWWordSliceInfo(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 55) = 0;
  return result;
}

{
  __n128 result;
  long long v3;

  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 55) = 0;
  return result;
}

void MEOWDiphoneSliceInfo::MEOWDiphoneSliceInfo(MEOWDiphoneSliceInfo *this)
{
  *((void *)this + MEOWVectorBase::clear(this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + MEOWVectorBase::~MEOWVectorBase(this + 1) = 0u;
}

{
  *((void *)this + MEOWVectorBase::clear(this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + MEOWVectorBase::~MEOWVectorBase(this + 1) = 0u;
}

void MEOWDemiSliceInfo::MEOWDemiSliceInfo(MEOWDemiSliceInfo *this, char a2)
{
  *((_OWORD *)this + MEOWVectorBase::~MEOWVectorBase(this + 1) = 0u;
  *((_OWORD *)this + MEOWVectorBase::~MEOWVectorBase(this + 2) = 0u;
  *((void *)this + 6) = 0;
  *(_OWORD *)this = 0u;
  *((unsigned char *)this + 56) = a2;
  *((unsigned char *)this + 3MEOWVectorBase::~MEOWVectorBase(this + 2) = 1;
}

{
  *((_OWORD *)this + MEOWVectorBase::~MEOWVectorBase(this + 1) = 0u;
  *((_OWORD *)this + MEOWVectorBase::~MEOWVectorBase(this + 2) = 0u;
  *((void *)this + 6) = 0;
  *(_OWORD *)this = 0u;
  *((unsigned char *)this + 56) = a2;
  *((unsigned char *)this + 3MEOWVectorBase::~MEOWVectorBase(this + 2) = 1;
}

unsigned char *MEOWDemiSliceInfo::PhonemeSet::AddPhonemes(unsigned char *__s, void *a2)
{
  unint64_t v2 = a2[2];
  if (v2)
  {
    int v4 = __s;
    unint64_t v5 = 0;
    unsigned __int16 v6 = __s + 1;
    unsigned __int8 v7 = *__s;
    do
    {
      int v8 = *(unsigned __int8 *)(*a2 + a2[1] * v5);
      uint64_t v9 = v7;
      __s = memchr(v6, v8, v7);
      if (!__s)
      {
        *int v4 = ++v7;
        v4[v9 + 1] = v8;
        unint64_t v2 = a2[2];
      }
      ++v5;
    }
    while (v5 < v2);
  }
  return __s;
}

void MEOWAnchorSliceInfo::MEOWAnchorSliceInfo(MEOWAnchorSliceInfo *this)
{
  *(_DWORD *)this = 0;
}

{
  *(_DWORD *)this = 0;
}

void MEOWSearchLatticeImpl::MEOWSearchLatticeImpl(MEOWSearchLatticeImpl *this, MEOWReader *a2)
{
  *(void *)this = &unk_1F3480D68;
  *((void *)this + MEOWVectorBase::~MEOWVectorBase(this + 1) = a2;
  *((void *)this + MEOWVectorBase::~MEOWVectorBase(this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  MEOWVectorBase::MEOWVectorBase((MEOWSearchLatticeImpl *)((char *)this + 40), 2);
  MEOWVectorBase::MEOWVectorBase((MEOWSearchLatticeImpl *)((char *)this + 72), 8);
  MEOWVectorBase::MEOWVectorBase((MEOWSearchLatticeImpl *)((char *)this + 104), 2);
  SLML::Vector<float>::Vector((_DWORD *)this + 34, 0);
}

void sub_1DA4DCC54(_Unwind_Exception *a1)
{
  MEOWVectorBase::~MEOWVectorBase(v8);
  MEOWVectorBase::~MEOWVectorBase(v7);
  MEOWVectorBase::~MEOWVectorBase(v6);
  SLML::Storage<float>::RemoveReference(v1[35]);
  SLML::Storage<float>::RemoveReference(v1[32]);
  SLML::Storage<float>::RemoveReference(v1[28]);
  SLML::Storage<float>::RemoveReference(v1[25]);
  MEOWVectorBase::~MEOWVectorBase(v5);
  SLML::Storage<float>::RemoveReference(v1[18]);
  MEOWVectorBase::~MEOWVectorBase(v4);
  MEOWVectorBase::~MEOWVectorBase(v3);
  MEOWVectorBase::~MEOWVectorBase(v2);
  _Unwind_Resume(a1);
}

void sub_1DA4DCCE0()
{
}

void sub_1DA4DCCE8()
{
}

void sub_1DA4DCCF0()
{
}

void sub_1DA4DCCF8()
{
}

void sub_1DA4DCD00()
{
}

void sub_1DA4DCD08()
{
}

void sub_1DA4DCD10()
{
}

void MEOWSearchLatticeImpl::~MEOWSearchLatticeImpl(MEOWSearchLatticeImpl *this)
{
  *(void *)this = &unk_1F3480D68;
  MEOWVectorBase::~MEOWVectorBase((void **)this + 49);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 45);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 41);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 37);
  SLML::Storage<float>::RemoveReference(*((void *)this + 35));
  SLML::Storage<float>::RemoveReference(*((void *)this + 32));
  SLML::Storage<float>::RemoveReference(*((void *)this + 28));
  SLML::Storage<float>::RemoveReference(*((void *)this + 25));
  MEOWVectorBase::~MEOWVectorBase((void **)this + 20);
  SLML::Storage<float>::RemoveReference(*((void *)this + 18));
  MEOWVectorBase::~MEOWVectorBase((void **)this + 13);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 9);
  MEOWVectorBase::~MEOWVectorBase((void **)this + 5);
}

{
  uint64_t vars8;

  MEOWSearchLatticeImpl::~MEOWSearchLatticeImpl(this);

  JUMPOUT(0x1E016FF00);
}

void MEOWSearchLatticeImpl::AddWordSlice(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v13, 8);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v12, 1);
  MEOWReader::GetWordDescriptor(*(void *)(a1 + 8), (const char **)a2, __C);
  MEOWReader::GetWordData(*(void *)(a1 + 8), __C, (MEOWVectorBase *)v13, v12);
  int __N = v14;
  MEOWSearchLatticeImpl::AllocateCostVectors((MEOWSearchLatticeImpl *)a1, v14, 4);
  uint64_t v6 = *(void *)(a1 + 56);
  MEOWVectorBase::Append((void *)(a1 + 72));
  *(void *)(*(void *)(a1 + 72) + 8 * *(void *)(a1 + 88) - 8) = v6;
  int v7 = *(_DWORD *)(a1 + 24);
  if (v7)
  {
    if (v7 == 3)
    {
      MEOWSearchLatticeImpl::Demi2WordCull(a1, a2, v13, a3);
    }
    else if (v7 == 6)
    {
      MEOWSearchLatticeImpl::Word2WordCull((MEOWSearchLatticeImpl *)a1, a2, v13, a3);
    }
    else
    {
      fwrite("Illegal concatenation for word slice.\n", 0x26uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      MTBEAbort(*(MTFESpeechElement **)(a1 + 16));
    }
  }
  else
  {
    MEOWSearchLatticeImpl::Null2WordCull((MEOWSearchLatticeImpl *)a1, a2, v13, a3);
  }
  MEOWUnitCostWindow::MEOWUnitCostWindow((MEOWUnitCostWindow *)v11, *(void *)(a2 + 40), 1, 0.0);
  SLML::Vector<float>::Vector(&v10, __N);
}

void sub_1DA4DD724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  SLML::Storage<float>::RemoveReference(a45);
  SLML::Storage<float>::RemoveReference(*(void *)(v45 - 248));
  MEOWVectorBase::~MEOWVectorBase((void **)(v45 - 232));
  MEOWVectorBase::~MEOWVectorBase((void **)(v45 - 200));
  MEOWVectorBase::~MEOWVectorBase((void **)(v45 - 168));
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeImpl::AllocateCostVectors(MEOWSearchLatticeImpl *this, unint64_t a2, int a3)
{
  if (*(_DWORD *)(*((void *)this + 25) + 12) < (int)a2) {
    SLML::Vector<float>::ResizeStorage();
  }
  *((_DWORD *)this + 48) = a2;
  if (*(_DWORD *)(*((void *)this + 28) + 12) < (int)a2) {
    SLML::Vector<float>::ResizeStorage();
  }
  *((_DWORD *)this + 5MEOWVectorBase::clear(this + 4) = a2;
  if (*((void *)this + 23) < a2) {
    MEOWVectorBase::Allocate((MEOWSearchLatticeImpl *)((char *)this + 160), a2, 1);
  }
  *((void *)this + 2MEOWVectorBase::~MEOWVectorBase(this + 2) = a2;
  if ((a3 & 0x80000000) == 0)
  {
    uint64_t v6 = *((void *)this + 32);
    if (*(_DWORD *)(v6 + 8) < (int)a2 || *(_DWORD *)(v6 + 12) < a3) {
      SLML::Matrix<float>::ResizeStorage();
    }
    *((_DWORD *)this + 60) = a2;
    *((_DWORD *)this + 6MEOWVectorBase::~MEOWVectorBase(this + 1) = a3;
    SLML::Matrix<float>::operator=((uint64_t)this + 240, 0.0);
    if (*(_DWORD *)(*((void *)this + 35) + 12) < (int)a2) {
      SLML::Vector<float>::ResizeStorage();
    }
    *((_DWORD *)this + 68) = a2;
    catlas_sset(a2, 0.0, *((float **)this + 36), *((_DWORD *)this + 69));
  }
  catlas_sset(*((_DWORD *)this + 48), 500000.0, *((float **)this + 26), *((_DWORD *)this + 49));
  catlas_sset(*((_DWORD *)this + 54), 500000.0, *((float **)this + 29), *((_DWORD *)this + 55));
  if (a2)
  {
    int v7 = 0;
    int v8 = (_WORD *)*((void *)this + 20);
    do
      *v8++ = v7++;
    while (a2 > (unsigned __int16)v7);
  }
}

void MEOWSearchLatticeImpl::ComputeWeightedCosts(MEOWSearchLatticeImpl *this, float a2)
{
  SLML::Matrix<float>::Matrix(&v2, *((_DWORD *)this + 44), *((_DWORD *)this + 61));
}

void sub_1DA4DE3E8(_Unwind_Exception *a1)
{
  SLML::Storage<float>::RemoveReference(*(void *)(v1 - 168));
  SLML::Storage<float>::RemoveReference(*(void *)(v1 - 136));
  _Unwind_Resume(a1);
}

uint64_t MEOWSearchLatticeImpl::ApplyWeightedCosts(uint64_t this)
{
  if (*(unsigned char *)(this + 29))
  {
    uint64_t v2 = *(void *)(this + 240);
    int v3 = *(_DWORD *)(this + 248);
    long long v1 = *(_OWORD *)(this + 256);
    ++*(_DWORD *)(*(void *)(this + 256) + 4);
    long long v4 = v1;
    SLML::MatrixRows<float>::sum((int *)&v2, &v5);
  }
  return this;
}

void sub_1DA4DE53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
}

uint64_t MEOWSearchLatticeImpl::RecomputePathCost(MEOWSearchLatticeImpl *this)
{
  MEOWVectorBase::Swap((uint64_t *)this + 13, (MEOWSearchLatticeImpl *)((char *)this + 160));
  uint64_t v2 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)this + 24);
  *((void *)this + --*(_WORD *)(this + 24) = v2;
  uint64_t v3 = *((void *)this + 26);
  long long v4 = *((_OWORD *)this + 9);
  *((void *)this + 18) = *((void *)this + 25);
  *((void *)this + 19) = v3;
  *(_OWORD *)((char *)this + 200) = v4;
  uint64_t v5 = *((void *)this + 13);
  unint64_t v6 = *((void *)this + 15);
  uint64_t v10 = v3;
  unint64_t v7 = 126 - 2 * __clz(v6);
  if (v6) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  return std::__introsort<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *,false>(v5, (unsigned __int16 *)(v5 + 2 * v6), &v10, v8, 1);
}

void MEOWSearchLatticeImpl::AddDiphoneSlice(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t v6 = MEOWReader::CountDiphones(*(MEOWReader **)(a1 + 8), *a2, a2[1]);
  int v7 = v6;
  MEOWSearchLatticeImpl::AllocateCostVectors((MEOWSearchLatticeImpl *)a1, v6, 3);
  uint64_t v8 = *(void *)(a1 + 56);
  MEOWVectorBase::Append((void *)(a1 + 72));
  *(void *)(*(void *)(a1 + 72) + 8 * *(void *)(a1 + 88) - 8) = v8;
  switch(*(_DWORD *)(a1 + 24))
  {
    case 0:
      MEOWSearchLatticeImpl::Null2Diphone(a1, a2, a3);
      break;
    case 1:
      MEOWSearchLatticeImpl::Diphone2Diphone(a1, a2, a3);
      break;
    case 3:
      MEOWSearchLatticeImpl::Demi2Diphone(a1, a2, a3);
      break;
    case 5:
      MEOWSearchLatticeImpl::Anchor2Diphone(a1, a2, a3);
      break;
    default:
      fwrite("Illegal concatenation for diphone slice.\n", 0x29uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      MTBEAbort(*(MTFESpeechElement **)(a1 + 16));
      break;
  }
  SLML::Vector<float>::Vector(&v9, v7);
}

void sub_1DA4DEBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
}

void MEOWSearchLatticeImpl::AddBreathDiphoneSlice(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t __N = MEOWReader::CountDiphones(*(MEOWReader **)(a1 + 8), *a2, a2[1]);
  MEOWSearchLatticeImpl::AllocateCostVectors((MEOWSearchLatticeImpl *)a1, __N, 3);
  uint64_t v3 = *(void *)(a1 + 56);
  MEOWVectorBase::Append((void *)(a1 + 72));
  *(void *)(*(void *)(a1 + 72) + 8 * *(void *)(a1 + 88) - 8) = v3;
  if (*(_DWORD *)(a1 + 24))
  {
    fwrite("Illegal concatenation for breath diphone slice.\n", 0x30uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    MTBEAbort(*(MTFESpeechElement **)(a1 + 16));
  }
  else
  {
    catlas_sset(*(_DWORD *)(a1 + 192), 0.0, *(float **)(a1 + 208), *(_DWORD *)(a1 + 196));
    catlas_sset(*(_DWORD *)(a1 + 216), 0.0, *(float **)(a1 + 232), *(_DWORD *)(a1 + 220));
  }
  SLML::Vector<float>::Vector(&v5, __N);
}

void sub_1DA4DF0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
}

void MEOWSearchLatticeImpl::AddDemiSlice(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  if (*(void *)(a2 + 40))
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      int v9 = (unsigned __int8 *)(*(void *)(a2 + 48) + v6);
      uint64_t v10 = MEOWReader::CountDiphones(*(MEOWReader **)(a1 + 8), *v9, v9[1]);
      *((void *)v9 + MEOWVectorBase::~MEOWVectorBase(this + 1) = v10;
      v7 += v10;
      ++v8;
      v6 += 144;
    }
    while (v8 < *(void *)(a2 + 40));
  }
  else
  {
    unint64_t v7 = 0;
  }
  MEOWSearchLatticeImpl::AllocateCostVectors((MEOWSearchLatticeImpl *)a1, v7, 3);
  uint64_t v11 = *(void *)(a1 + 56);
  MEOWVectorBase::Append((void *)(a1 + 72));
  *(void *)(*(void *)(a1 + 72) + 8 * *(void *)(a1 + 88) - 8) = v11;
  int v12 = *(_DWORD *)(a1 + 24);
  if (*(unsigned char *)(a2 + 56))
  {
    if (!v12)
    {
      catlas_sset(*(_DWORD *)(a1 + 192), 0.0, *(float **)(a1 + 208), *(_DWORD *)(a1 + 196));
      catlas_sset(*(_DWORD *)(a1 + 216), 0.0, *(float **)(a1 + 232), *(_DWORD *)(a1 + 220));
      MEOWSearchLatticeImpl::Null2Demi((MEOWSearchLatticeImpl *)a1, (const MEOWDemiSliceInfo *)a2);
      goto LABEL_18;
    }
    if (v12 == 6) {
      MEOWSearchLatticeImpl::Word2Demi();
    }
    uint64_t v13 = (FILE *)*MEMORY[0x1E4F143C8];
    unint64_t v14 = "Illegal concatenation for demi- slice.\n";
  }
  else
  {
    if (v12 == 3)
    {
      MEOWSearchLatticeImpl::Demi2Demi(a1, a2, a3);
      goto LABEL_18;
    }
    if (v12 == 1)
    {
      MEOWSearchLatticeImpl::Diphone2Demi(a1, a2, a3);
      goto LABEL_18;
    }
    uint64_t v13 = (FILE *)*MEMORY[0x1E4F143C8];
    unint64_t v14 = "Illegal concatenation for -demi slice.\n";
  }
  fwrite(v14, 0x27uLL, 1uLL, v13);
  MTBEAbort(*(MTFESpeechElement **)(a1 + 16));
LABEL_18:
  SLML::Vector<float>::Vector(&v15, v7);
}

void sub_1DA4DFA98(_Unwind_Exception *a1)
{
  SLML::Storage<float>::RemoveReference(*(void *)(v1 - 136));
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeImpl::AddBreathDemiSlice(uint64_t a1, uint64_t a2)
{
  uint64_t __N = MEOWReader::CountDiphones(*(MEOWReader **)(a1 + 8), **(unsigned __int8 **)(a2 + 48), *(unsigned __int8 *)(*(void *)(a2 + 48) + 1));
  MEOWSearchLatticeImpl::AllocateCostVectors((MEOWSearchLatticeImpl *)a1, __N, 3);
  uint64_t v3 = *(void *)(a1 + 56);
  MEOWVectorBase::Append((void *)(a1 + 72));
  *(void *)(*(void *)(a1 + 72) + 8 * *(void *)(a1 + 88) - 8) = v3;
  if (*(_DWORD *)(a1 + 24))
  {
    fwrite("Illegal concatenation for -demi slice.\n", 0x27uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    MTBEAbort(*(MTFESpeechElement **)(a1 + 16));
  }
  else
  {
    catlas_sset(*(_DWORD *)(a1 + 192), 0.0, *(float **)(a1 + 208), *(_DWORD *)(a1 + 196));
    catlas_sset(*(_DWORD *)(a1 + 216), 0.0, *(float **)(a1 + 232), *(_DWORD *)(a1 + 220));
  }
  SLML::Vector<float>::Vector(&v5, __N);
}

void sub_1DA4DFEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

uint64_t MEOWSearchLatticeImpl::AddAnchorSlice(uint64_t a1, unsigned int *a2)
{
  MEOWSearchLatticeImpl::AllocateCostVectors((MEOWSearchLatticeImpl *)a1, 1uLL, 0);
  uint64_t v4 = *(void *)(a1 + 56);
  MEOWVectorBase::Append((void *)(a1 + 72));
  *(void *)(*(void *)(a1 + 72) + 8 * *(void *)(a1 + 88) - 8) = v4;
  int v5 = *(_DWORD *)(a1 + 24);
  if (v5 == 1)
  {
    MEOWSearchLatticeImpl::Diphone2Anchor(a1, a2);
  }
  else if (v5)
  {
    fwrite("Illegal concatenation for anchor slice.\n", 0x28uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    MTBEAbort(*(MTFESpeechElement **)(a1 + 16));
  }
  else
  {
    **(_DWORD **)(a1 + 208) = 0;
    **(_DWORD **)(a1 + 23MEOWVectorBase::~MEOWVectorBase(this + 2) = 0;
  }
  if (*(unsigned char *)(a1 + 29))
  {
    uint64_t v6 = (FILE **)MEMORY[0x1E4F143D8];
    unint64_t v7 = (FILE *)*MEMORY[0x1E4F143D8];
    unint64_t v8 = MEOWPhon::Name((MEOWPhon *)*(unsigned __int8 *)a2);
    int v9 = MEOWPhon::Name((MEOWPhon *)*((unsigned __int8 *)a2 + 1));
    fprintf(v7, "Anchor %s-%s#%u\n", v8, v9, bswap32(*((unsigned __int16 *)a2 + 1)) >> 16);
    if (*(_DWORD *)(a1 + 24))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v11 = *v6;
      if (v10)
      {
        int v12 = *(unsigned __int16 *)(v10 + 2 * *(void *)(*(void *)(a1 + 72) + 8 * *(void *)(a1 + 88) - 8));
LABEL_12:
        fprintf(v11, "   0 %3d   %6g  %6g\n", v12, **(float **)(a1 + 208), **(float **)(a1 + 232));
        fflush(*v6);
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v11 = *v6;
    }
    int v12 = -1;
    goto LABEL_12;
  }
LABEL_13:
  uint64_t result = MEOWSearchLatticeImpl::RecomputePathCost((MEOWSearchLatticeImpl *)a1);
  *(_DWORD *)(a1 + --*(_WORD *)(this + 24) = 5;
  *(_DWORD *)(a1 + 536) = *a2;
  return result;
}

uint64_t MEOWSearchLatticeImpl::AddSilenceSlice(uint64_t result)
{
  *(_DWORD *)(result + --*(_WORD *)(this + 24) = 0;
  return result;
}

uint64_t MEOWSearchLatticeImpl::BestPath(MEOWSearchLatticeImpl *this)
{
  if (*((unsigned char *)this + 29))
  {
    uint64_t v2 = (FILE **)MEMORY[0x1E4F143D8];
    fprintf((FILE *)*MEMORY[0x1E4F143D8], "Best %d\n", **((unsigned __int16 **)this + 13));
    fflush(*v2);
  }
  return **((unsigned __int16 **)this + 13);
}

float MEOWSearchLatticeImpl::BestPathCost(MEOWSearchLatticeImpl *this)
{
  return *(float *)(*((void *)this + 19) + 4 * *((_DWORD *)this + 35) * **((unsigned __int16 **)this + 13));
}

uint64_t MEOWSearchLatticeImpl::BestPredecessor(MEOWSearchLatticeImpl *this, uint64_t a2, uint64_t a3)
{
  return *(unsigned __int16 *)(*((void *)this + 5) + 2 * (*(void *)(*((void *)this + 9) + 8 * a2) + a3));
}

uint64_t MEOWSearchLatticeImpl::Force(uint64_t this, unint64_t a2)
{
  if (*(int *)(this + 136) > a2)
  {
    __int16 v2 = a2;
    uint64_t v3 = (void *)this;
    if (*(unsigned char *)(this + 29))
    {
      uint64_t v4 = (FILE **)MEMORY[0x1E4F143D8];
      fprintf((FILE *)*MEMORY[0x1E4F143D8], "Force %lu\n", a2);
      this = fflush(*v4);
    }
    if (!v3[16]) {
      this = (uint64_t)MEOWVectorBase::Allocate((MEOWVectorBase *)(v3 + 13), 1uLL, 1);
    }
    v3[15] = 1;
    *(_WORD *)v3[13] = v2;
  }
  return this;
}

uint64_t MEOWSearchLatticeImpl::Override(uint64_t this, unint64_t a2)
{
  if (*(int *)(this + 136) > a2 && *(unsigned char *)(this + 29))
  {
    __int16 v2 = (FILE **)MEMORY[0x1E4F143D8];
    fprintf((FILE *)*MEMORY[0x1E4F143D8], "Override %lu\n", a2);
    uint64_t v3 = *v2;
    return fflush(v3);
  }
  return this;
}

uint64_t MEOWSearchLatticeImpl::Veto(uint64_t this, uint64_t a2)
{
  uint64_t v3 = (void *)this;
  if (*(unsigned char *)(this + 29))
  {
    uint64_t v4 = (FILE **)MEMORY[0x1E4F143D8];
    fprintf((FILE *)*MEMORY[0x1E4F143D8], "Veto %lu\n", a2);
    this = fflush(*v4);
  }
  uint64_t v5 = v3[15];
  if (v5)
  {
    this = v3[13];
    uint64_t v6 = 1 - v5;
    while (*(unsigned __int16 *)this != a2)
    {
      ++v6;
      this += 2;
      if (v6 == 1) {
        return this;
      }
    }
    this = (uint64_t)memmove((void *)this, (const void *)(this + 2), -v6);
    if (v3[16] < (unint64_t)(v5 - 1)) {
      this = (uint64_t)MEOWVectorBase::Allocate((MEOWVectorBase *)(v3 + 13), v5 - 1, 1);
    }
    v3[15] = v5 - 1;
  }
  return this;
}

uint64_t MEOWSearchLatticeImpl::size(MEOWSearchLatticeImpl *this)
{
  return *((void *)this + 11);
}

void MEOWSearchLatticeImpl::clear(void **this)
{
  *((_DWORD *)this + 6) = 0;
}

uint64_t SLML::Matrix<float>::operator=(uint64_t a1, float a2)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    int v4 = 0;
    do
      catlas_sset(*(_DWORD *)a1, a2, (float *)(*(void *)(a1 + 24) + 4 * *(_DWORD *)(a1 + 8) * v4++), 1);
    while (v4 < *(_DWORD *)(a1 + 4));
  }
  return a1;
}

void SLML::copy(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  if (v4 != v5) {
    SLML::Fatal((SLML *)"%s %d != %d", (const char *)a2, "Size", v4, v5);
  }
  uint64_t v6 = (const float *)*((void *)a1 + 2);
  int v7 = a1[1];
  unint64_t v8 = (float *)*((void *)a2 + 2);
  int v9 = a2[1];

  cblas_scopy(v4, v6, v7, v8, v9);
}

void sub_1DA4E0448()
{
}

void SLML::matmul(unsigned int **a1@<X0>, const char *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v3 = *(unsigned int *)a2;
  if (**a1 == v3) {
    SLML::Matrix<float>::Matrix(a3, (*a1)[1], *((_DWORD *)a2 + 1));
  }
  SLML::Fatal((SLML *)"%s %d != %d", a2, "Dimension", **a1, v3);
}

void sub_1DA4E0510()
{
}

void sub_1DA4E0518(_Unwind_Exception *a1)
{
  SLML::Storage<float>::RemoveReference(*(void *)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t SLML::MatrixColumns<float>::operator*=(uint64_t a1, const char *a2)
{
  int v4 = *(_DWORD *)(a1 + 4);
  uint64_t v5 = *(unsigned int *)a2;
  if (v4 != v5) {
    SLML::Fatal((SLML *)"%s %d != %d", a2, "Dimension", *(unsigned int *)(a1 + 4), v5);
  }
  if (v4 >= 1)
  {
    int v6 = 0;
    do
    {
      float v7 = *(float *)(*((void *)a2 + 2) + 4 * *((_DWORD *)a2 + 1) * v6);
      int v8 = *(_DWORD *)a1;
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v10 = (float *)(*(void *)(a1 + 24) + 4 * *(_DWORD *)(a1 + 8) * v6);
      ++*(_DWORD *)(v9 + 4);
      cblas_sscal(v8, v7, v10, 1);
      SLML::Storage<float>::RemoveReference(v9);
      ++v6;
    }
    while (v6 < *(_DWORD *)(a1 + 4));
  }
  return a1;
}

void sub_1DA4E05EC()
{
}

void sub_1DA4E05F4(_Unwind_Exception *a1)
{
  SLML::Storage<float>::RemoveReference(v1);
  _Unwind_Resume(a1);
}

float **SLML::Vector<float>::operator+=(float **a1, unsigned int *a2)
{
  uint64_t v3 = *(unsigned int *)a1;
  uint64_t v4 = *a2;
  if (v3 != v4) {
    SLML::Fatal((SLML *)"%s %d != %d", (const char *)a2, "Size", v3, v4);
  }
  cblas_saxpy(v3, 1.0, *((const float **)a2 + 2), a2[1], a1[2], *((_DWORD *)a1 + 1));
  return a1;
}

void sub_1DA4E067C()
{
}

void SLML::MatrixRows<float>::sum(int *a1@<X0>, _DWORD *a2@<X8>)
{
}

void sub_1DA4E0734(_Unwind_Exception *a1)
{
  SLML::Storage<float>::RemoveReference(v2);
  SLML::Storage<float>::RemoveReference(*(void *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t MEOWSearchLatticeImpl::SetPhraseID(uint64_t this, const void *a2)
{
  *(void *)(this + 3MEOWVectorBase::~MEOWVectorBase(this + 2) = a2;
  return this;
}

uint64_t MEOWSearchLatticeImpl::ProcessingSentence(uint64_t this, MTFESentence *a2)
{
  *(void *)(this + 16) = a2;
  return this;
}

void SLML::Matrix<float>::Matrix(_DWORD *a1, int a2, int a3)
{
  *a1 = a2;
  a1[1] = a3;
  operator new();
}

void sub_1DA4E0824(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x1080C401B11B02ALL);
  _Unwind_Resume(a1);
}

void SLML::Matrix<float>::ResizeStorage()
{
}

void sub_1DA4E0958(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x1080C401B11B02ALL);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *,false>(uint64_t result, unsigned __int16 *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v10 = (unsigned __int16 *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v22 = *(a2 - 1);
          uint64_t v23 = *v11;
          if (*(float *)(*a3 + 4 * v22) < *(float *)(*a3 + 4 * v23))
          {
            *uint64_t v11 = v22;
            *(a2 - MEOWVectorBase::~MEOWVectorBase(this + 1) = v23;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(v11, v11 + 1, a2 - 1, a3);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(v11, v11 + 1, v11 + 2, a2 - 1, a3);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 47) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *,unsigned short *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x101)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(v11, &v11[v15 >> 1], a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(v11 + 1, v17 - 1, a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(v11 + 2, &v11[v16 + 1], a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(v17 - 1, v17, &v11[v16 + 1], a3);
      unsigned __int16 v18 = *v11;
      *uint64_t v11 = *v17;
      *uint64_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(&v11[v15 >> 1], v11, a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(float *)(*a3 + 4 * *(v11 - 1)) >= *(float *)(*a3 + 4 * *v11))
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned short *,MEOWCompareIndexed &>(v11, a2, a3);
      uint64_t v11 = (unsigned __int16 *)result;
      goto LABEL_19;
    }
LABEL_14:
    long long v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned short *,MEOWCompareIndexed &>(v11, a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(v11, v19, a3);
    uint64_t v11 = v19 + 1;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(v19 + 1, a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *,false>(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(v11, a2, a3);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(v11, a2, a3);
  }
}

unsigned __int16 *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(unsigned __int16 *result, unsigned __int16 *a2, uint64_t *a3)
{
  if (result != a2)
  {
    uint64_t v3 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v4 = 0;
      uint64_t v5 = *a3;
      char v6 = result;
      do
      {
        uint64_t v7 = v6[1];
        uint64_t v8 = *v6;
        char v6 = v3;
        float v9 = *(float *)(v5 + 4 * v7);
        if (v9 < *(float *)(v5 + 4 * v8))
        {
          uint64_t v10 = v4;
          while (1)
          {
            *(unsigned __int16 *)((char *)result + v10 + MEOWVectorBase::~MEOWVectorBase(this + 2) = v8;
            if (!v10) {
              break;
            }
            uint64_t v8 = *(unsigned __int16 *)((char *)result + v10 - 2);
            v10 -= 2;
            if (v9 >= *(float *)(v5 + 4 * v8))
            {
              uint64_t v11 = (unsigned __int16 *)((char *)result + v10 + 2);
              goto LABEL_10;
            }
          }
          uint64_t v11 = result;
LABEL_10:
          *uint64_t v11 = v7;
        }
        uint64_t v3 = v6 + 1;
        v4 += 2;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

unsigned __int16 *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(unsigned __int16 *result, unsigned __int16 *a2, uint64_t *a3)
{
  if (result != a2)
  {
    uint64_t v3 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v4 = *a3;
      do
      {
        uint64_t v5 = result[1];
        uint64_t v6 = *result;
        uint64_t result = v3;
        float v7 = *(float *)(v4 + 4 * v5);
        if (v7 < *(float *)(v4 + 4 * v6))
        {
          do
          {
            *uint64_t v3 = v6;
            uint64_t v6 = *(v3 - 2);
            --v3;
          }
          while (v7 < *(float *)(v4 + 4 * v6));
          *uint64_t v3 = v5;
        }
        uint64_t v3 = result + 1;
      }
      while (result + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(_WORD *a1, _WORD *a2, _WORD *a3, uint64_t *a4)
{
  uint64_t v4 = (unsigned __int16)*a2;
  uint64_t v5 = (unsigned __int16)*a1;
  uint64_t v6 = *a4;
  float v7 = *(float *)(*a4 + 4 * v4);
  float v8 = *(float *)(*a4 + 4 * v5);
  uint64_t v9 = (unsigned __int16)*a3;
  float v10 = *(float *)(*a4 + 4 * v9);
  if (v7 < v8)
  {
    if (v10 < v7)
    {
      *a1 = v9;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    uint64_t v13 = (unsigned __int16)*a3;
    if (*(float *)(v6 + 4 * v13) >= v8) {
      return 1;
    }
    *a2 = v13;
    *a3 = v5;
    return 2;
  }
  if (v10 < v7)
  {
    *a2 = v9;
    *a3 = v4;
    uint64_t v11 = (unsigned __int16)*a2;
    uint64_t v12 = (unsigned __int16)*a1;
    if (*(float *)(v6 + 4 * v11) >= *(float *)(v6 + 4 * v12)) {
      return 1;
    }
    *a1 = v11;
    *a2 = v12;
    return 2;
  }
  return 0;
}

unsigned __int16 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned short *,MEOWCompareIndexed &>(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a3;
  float v5 = *(float *)(*a3 + 4 * v3);
  if (v5 >= *(float *)(*a3 + 4 * *(a2 - 1)))
  {
    float v8 = a1 + 1;
    do
    {
      uint64_t v6 = v8;
      if (v8 >= a2) {
        break;
      }
      ++v8;
    }
    while (v5 >= *(float *)(v4 + 4 * *v6));
  }
  else
  {
    uint64_t v6 = a1;
    do
    {
      unsigned int v7 = v6[1];
      ++v6;
    }
    while (v5 >= *(float *)(v4 + 4 * v7));
  }
  if (v6 < a2)
  {
    do
      unsigned int v9 = *--a2;
    while (v5 < *(float *)(v4 + 4 * v9));
  }
  if (v6 < a2)
  {
    unsigned __int16 v10 = *v6;
    unsigned __int16 v11 = *a2;
    do
    {
      *uint64_t v6 = v11;
      *a2 = v10;
      do
      {
        unsigned int v12 = v6[1];
        ++v6;
        unsigned __int16 v10 = v12;
      }
      while (v5 >= *(float *)(v4 + 4 * v12));
      do
      {
        unsigned int v13 = *--a2;
        unsigned __int16 v11 = v13;
      }
      while (v5 < *(float *)(v4 + 4 * v13));
    }
    while (v6 < a2);
  }
  if (v6 - 1 != a1) {
    *a1 = *(v6 - 1);
  }
  *(v6 - MEOWVectorBase::~MEOWVectorBase(this + 1) = v3;
  return v6;
}

_WORD *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned short *,MEOWCompareIndexed &>(_WORD *a1, _WORD *a2, uint64_t *a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = (unsigned __int16)*a1;
  uint64_t v5 = *a3;
  float v6 = *(float *)(*a3 + 4 * v4);
  do
    uint64_t v7 = (unsigned __int16)a1[++v3];
  while (*(float *)(v5 + 4 * v7) < v6);
  float v8 = &a1[v3];
  unsigned int v9 = &a1[v3 - 1];
  if (v3 == 1)
  {
    do
    {
      if (v8 >= a2) {
        break;
      }
      unsigned int v11 = (unsigned __int16)*--a2;
    }
    while (*(float *)(v5 + 4 * v11) >= v6);
  }
  else
  {
    do
      unsigned int v10 = (unsigned __int16)*--a2;
    while (*(float *)(v5 + 4 * v10) >= v6);
  }
  if (v8 < a2)
  {
    __int16 v12 = *a2;
    __int16 v13 = v7;
    uint64_t v14 = v8;
    unint64_t v15 = a2;
    do
    {
      *uint64_t v14 = v12;
      _WORD *v15 = v13;
      do
      {
        unsigned int v16 = (unsigned __int16)v14[1];
        ++v14;
        __int16 v13 = v16;
      }
      while (*(float *)(v5 + 4 * v16) < v6);
      do
      {
        unsigned int v17 = (unsigned __int16)*--v15;
        __int16 v12 = v17;
      }
      while (*(float *)(v5 + 4 * v17) >= v6);
    }
    while (v14 < v15);
    unsigned int v9 = v14 - 1;
  }
  if (v9 != a1) {
    *a1 = *v9;
  }
  *unsigned int v9 = v4;
  return v9;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(float *)(*a3 + 4 * v8) < *(float *)(*a3 + 4 * v9))
      {
        *a1 = v8;
        *(a2 - MEOWVectorBase::~MEOWVectorBase(this + 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      unsigned int v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(a1, a1 + 1, a1 + 2, a3);
      unsigned int v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = *a3;
      uint64_t v14 = 6;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    float v17 = *(float *)(v13 + 4 * v15);
    if (v17 < *(float *)(v13 + 4 * v16))
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(unsigned __int16 *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 2;
        if (v18 == 2) {
          break;
        }
        uint64_t v16 = *(unsigned __int16 *)((char *)a1 + v18 - 4);
        v18 -= 2;
        if (v17 >= *(float *)(v13 + 4 * v16))
        {
          char v20 = (unsigned __int16 *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      char v20 = a1;
LABEL_12:
      *char v20 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    unsigned int v10 = v11;
    v14 += 2;
    if (++v11 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(_WORD *a1, _WORD *a2, _WORD *a3, _WORD *a4, uint64_t *a5)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(a1, a2, a3, a5);
  uint64_t v11 = (unsigned __int16)*a4;
  uint64_t v12 = (unsigned __int16)*a3;
  uint64_t v13 = *a5;
  if (*(float *)(*a5 + 4 * v11) < *(float *)(*a5 + 4 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    uint64_t v14 = (unsigned __int16)*a3;
    uint64_t v15 = (unsigned __int16)*a2;
    if (*(float *)(v13 + 4 * v14) < *(float *)(v13 + 4 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      uint64_t v16 = (unsigned __int16)*a2;
      uint64_t v17 = (unsigned __int16)*a1;
      if (*(float *)(v13 + 4 * v16) < *(float *)(v13 + 4 * v17))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(_WORD *a1, _WORD *a2, _WORD *a3, _WORD *a4, _WORD *a5, uint64_t *a6)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(a1, a2, a3, a4, a6);
  uint64_t v13 = (unsigned __int16)*a5;
  uint64_t v14 = (unsigned __int16)*a4;
  uint64_t v15 = *a6;
  if (*(float *)(*a6 + 4 * v13) < *(float *)(*a6 + 4 * v14))
  {
    *a4 = v13;
    *a5 = v14;
    uint64_t v16 = (unsigned __int16)*a4;
    uint64_t v17 = (unsigned __int16)*a3;
    if (*(float *)(v15 + 4 * v16) < *(float *)(v15 + 4 * v17))
    {
      *a3 = v16;
      *a4 = v17;
      uint64_t v18 = (unsigned __int16)*a3;
      uint64_t v19 = (unsigned __int16)*a2;
      if (*(float *)(v15 + 4 * v18) < *(float *)(v15 + 4 * v19))
      {
        *a2 = v18;
        *a3 = v19;
        uint64_t v20 = (unsigned __int16)*a2;
        uint64_t v21 = (unsigned __int16)*a1;
        if (*(float *)(v15 + 4 * v20) < *(float *)(v15 + 4 * v21))
        {
          *a1 = v20;
          *a2 = v21;
        }
      }
    }
  }
  return result;
}

unsigned __int16 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *,unsigned short *>(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, uint64_t *a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 3)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        uint64_t v15 = *v14;
        uint64_t v16 = *a1;
        if (*(float *)(*a4 + 4 * v15) < *(float *)(*a4 + 4 * v16))
        {
          *uint64_t v14 = v16;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 3)
    {
      uint64_t v17 = (unint64_t)v8 >> 1;
      uint64_t v18 = a2 - 1;
      do
      {
        unsigned __int16 v19 = *a1;
        uint64_t v20 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(a1, a4, v17);
        if (v18 == v20)
        {
          *uint64_t v20 = v19;
        }
        else
        {
          *uint64_t v20 = *v18;
          *uint64_t v18 = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>((uint64_t)a1, (uint64_t)(v20 + 1), a4, v20 + 1 - a1);
        }
        --v18;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(uint64_t result, uint64_t *a2, uint64_t a3, _WORD *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (char *)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 1)
    {
      uint64_t v6 = (uint64_t)(v4 + 1);
      uint64_t v7 = (unsigned __int16 *)(result + 2 * (void)(v4 + 1));
      uint64_t v8 = (uint64_t)(v4 + 2);
      uint64_t v9 = *a2;
      if (v8 < a3 && *(float *)(v9 + 4 * *v7) < *(float *)(v9 + 4 * v7[1]))
      {
        ++v7;
        uint64_t v6 = v8;
      }
      uint64_t v10 = *v7;
      uint64_t v11 = (unsigned __int16)*a4;
      float v12 = *(float *)(v9 + 4 * v11);
      if (*(float *)(v9 + 4 * v10) >= v12)
      {
        do
        {
          uint64_t v13 = v7;
          *a4 = v10;
          if (v5 < v6) {
            break;
          }
          uint64_t v14 = 2 * v6;
          uint64_t v6 = (2 * v6) | 1;
          uint64_t v7 = (unsigned __int16 *)(result + 2 * v6);
          uint64_t v15 = v14 + 2;
          if (v15 < a3 && *(float *)(v9 + 4 * *v7) < *(float *)(v9 + 4 * v7[1]))
          {
            ++v7;
            uint64_t v6 = v15;
          }
          uint64_t v10 = *v7;
          a4 = v13;
        }
        while (*(float *)(v9 + 4 * v10) >= v12);
        _WORD *v13 = v11;
      }
    }
  }
  return result;
}

unsigned __int16 *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(unsigned __int16 *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  uint64_t v6 = *a2;
  do
  {
    uint64_t v7 = result;
    uint64_t v8 = 2 * v3 + 2;
    uint64_t result = (unsigned __int16 *)((char *)result + v8);
    uint64_t v3 = (2 * v3) | 1;
    if (v8 < a3 && *(float *)(v6 + 4 * *result) < *(float *)(v6 + 4 * result[1]))
    {
      ++result;
      uint64_t v3 = v8;
    }
    *uint64_t v7 = *result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MEOWCompareIndexed &,unsigned short *>(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = (unsigned __int16 *)(result + 2 * v4);
    uint64_t v6 = *v5;
    unsigned int v9 = *(unsigned __int16 *)(a2 - 2);
    uint64_t v7 = (_WORD *)(a2 - 2);
    __int16 v8 = v9;
    uint64_t v10 = *a3;
    float v11 = *(float *)(*a3 + 4 * v9);
    if (*(float *)(*a3 + 4 * v6) < v11)
    {
      do
      {
        float v12 = v5;
        *uint64_t v7 = v6;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v5 = (unsigned __int16 *)(result + 2 * v4);
        uint64_t v6 = *v5;
        uint64_t v7 = v12;
      }
      while (*(float *)(v10 + 4 * v6) < v11);
      _WORD *v12 = v8;
    }
  }
  return result;
}

void MEOWSearchLatticeImpl::Cookie2Cookie(uint64_t a1, unsigned __int16 **a2, uint64_t a3, uint64_t a4, float *a5, float *a6, void *a7, float a8)
{
  unsigned __int16 v12 = **a2;
  if ((MTBEDebugFlags::sMEOWDebug & 0x200) != 0) {
    SLML::Vector<float>::Vector(&__N, *(_DWORD *)(a3 + 16));
  }
  if (a2[2])
  {
    unint64_t v16 = 0;
    float v17 = 3.4028e38;
    float v18 = 3.4028e38;
    do
    {
      int v19 = (*a2)[v16];
      float v20 = *(float *)(*(void *)(a1 + 152) + 4 * *(_DWORD *)(a1 + 140) * v19);
      if (v20 >= v18) {
        break;
      }
      MEOWDistance(*(void *)a3 + 60 * (*a2)[v16], a4);
      float v22 = v21 * a8;
      if ((float)(v20 + v22) < v18)
      {
        float v18 = v20 + v22;
        float v17 = v22;
        unsigned __int16 v12 = v19;
      }
      ++v16;
    }
    while (v16 < (unint64_t)a2[2]);
  }
  else
  {
    float v18 = 3.4028e38;
    float v17 = 3.4028e38;
  }
  *a5 = v18;
  *a6 = v17;
  *a7 = v12;
}

void sub_1DA4E1940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void MEOWSearchLatticeImpl::Cookie2Cookie(uint64_t a1, unsigned __int16 **a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, float a8)
{
  uint64_t v8 = a7;
  uint64_t v9 = a6;
  if (a6)
  {
    if (a7) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 208);
    a5 = *(int *)(a1 + 192);
    if (a7) {
      goto LABEL_3;
    }
  }
  uint64_t v8 = *(void *)(a1 + 232);
LABEL_3:
  uint64_t v16 = *(void *)(a1 + 56);
  if (*(void *)(a1 + 64) < (unint64_t)(v16 + a5)) {
    MEOWVectorBase::Allocate((MEOWVectorBase *)(a1 + 40), v16 + a5, 1);
  }
  *(void *)(a1 + 56) = v16 + a5;
  bzero((void *)(*(void *)(a1 + 40) + 2 * v16), 2 * a5);
  uint64_t v17 = *(void *)(a1 + 176);
  if (v17)
  {
    for (uint64_t i = 0; i != v17; ++i)
    {
      uint64_t v19 = *(unsigned __int16 *)(*(void *)(a1 + 160) + 2 * i);
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      MEOWSearchLatticeImpl::Cookie2Cookie(a1, a2, a3, *a4 + 60 * v19, (float *)&v21 + 1, (float *)&v21, &v20, a8);
      *(_DWORD *)(v9 + 4 * v1MEOWVectorBase::clear(this + 9) = HIDWORD(v21);
      *(_DWORD *)(v8 + 4 * v1MEOWVectorBase::clear(this + 9) = v21;
      *(_WORD *)(*(void *)(a1 + 40) + 2 * (v16 + v19)) = v20;
    }
  }
}

uint64_t MEOWSearchLatticeImpl::ResetMatchVector(uint64_t this)
{
  *(void *)(this + 31MEOWVectorBase::~MEOWVectorBase(this + 2) = 0;
  return this;
}

void MEOWSearchLatticeImpl::MatchContexts(void *a1, void *a2, char a3, MEOWPhon *this)
{
  uint64_t v7 = *MEOWPhon::Match(this);
  unint64_t v8 = a1[39];
  unint64_t v9 = a2[2];
  if (v9 > v8)
  {
    if (a1[40] < v9) {
      MEOWVectorBase::Allocate((MEOWVectorBase *)(a1 + 37), a2[2], 1);
    }
    a1[39] = v9;
    bzero((void *)(a1[37] + v8), v9 - v8);
    unint64_t v9 = a2[2];
  }
  if (v9)
  {
    unint64_t v10 = 0;
    do
    {
      *(unsigned char *)(a1[37] + v10) += v7[51 * a3 + *(char *)(*a2 + a2[1] * v10)];
      ++v10;
    }
    while (v10 < a2[2]);
  }
}

void MEOWSearchLatticeImpl::MatchContexts(void *a1, long long *a2, uint64_t a3, MEOWPhon *this)
{
  if (*(void *)(a3 + 16) == 1)
  {
    long long v14 = *a2;
    uint64_t v15 = *((void *)a2 + 2);
    MEOWSearchLatticeImpl::MatchContexts(a1, &v14, **(unsigned char **)a3, this);
  }
  else
  {
    uint64_t v7 = (char *)*MEOWPhon::Match(this);
    unint64_t v8 = a1[39];
    unint64_t v9 = *((void *)a2 + 2);
    if (v9 > v8)
    {
      if (a1[40] < v9) {
        MEOWVectorBase::Allocate((MEOWVectorBase *)(a1 + 37), *((void *)a2 + 2), 1);
      }
      a1[39] = v9;
      bzero((void *)(a1[37] + v8), v9 - v8);
      unint64_t v9 = *((void *)a2 + 2);
    }
    if (v9)
    {
      unint64_t v10 = 0;
      do
      {
        uint64_t v11 = *(void *)(a3 + 16);
        if (v11)
        {
          unsigned __int16 v12 = *(char **)a3;
          int v13 = 50;
          do
          {
            if (v13 >= v7[51 * *v12 + *(char *)(*(void *)a2 + *((void *)a2 + 1) * v10)]) {
              int v13 = v7[51 * *v12 + *(char *)(*(void *)a2 + *((void *)a2 + 1) * v10)];
            }
            v12 += *(void *)(a3 + 8);
            --v11;
          }
          while (v11);
        }
        else
        {
          LOBYTE(v13) = 50;
        }
        *(unsigned char *)(a1[37] + v10++) += v13;
      }
      while (v10 < *((void *)a2 + 2));
    }
  }
}

void MEOWSearchLatticeImpl::MatchWordBoundaries(MEOWSearchLatticeImpl *this, int a2, int a3)
{
  unint64_t v6 = *((void *)this + 39);
  unint64_t v7 = *((void *)this + 43);
  if (v7 > v6)
  {
    if (*((void *)this + 40) < v7) {
      MEOWVectorBase::Allocate((MEOWSearchLatticeImpl *)((char *)this + 296), v7, 1);
    }
    *((void *)this + 3MEOWVectorBase::clear(this + 9) = v7;
    bzero((void *)(*((void *)this + 37) + v6), v7 - v6);
    unint64_t v7 = *((void *)this + 43);
  }
  if (a3) {
    int v8 = 2;
  }
  else {
    int v8 = 3;
  }
  if (a2)
  {
    int v9 = a3;
  }
  else
  {
    int v8 = 0;
    int v9 = 3;
  }
  if (v7)
  {
    for (unint64_t i = 0; i < v7; ++i)
    {
      int v11 = *(unsigned __int8 *)(*((void *)this + 41) + i);
      if ((v11 & v8) != 0) {
        int v12 = 1;
      }
      else {
        int v12 = a2 ^ 1;
      }
      int v13 = v9 & v11;
      if (v12 != 1 || v13 != 0)
      {
        *(unsigned char *)(*((void *)this + 37) + i) += 100;
        unint64_t v7 = *((void *)this + 43);
      }
    }
  }
}

void MEOWSearchLatticeImpl::CookieStride(void *a1@<X1>, void *a2@<X8>)
{
  *a2 = *a1 + 52;
  a2[1] = 60;
  a2[2] = a1[2];
}

void MEOWSearchLatticeImpl::VariantStride(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = 144;
  a3[2] = a2;
}

void MEOWSearchLatticeImpl::SetStride(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = a1 + 1;
  a2[1] = 1;
  a2[2] = v2;
}

void MEOWSearchLatticeImpl::MatchContexts(MEOWReader **this, unsigned int a2, unsigned int a3, char a4, MEOWPhon *a5)
{
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v11, 1);
  MEOWReader::GetAdjacent(this[1], a2, a3, a5 ^ 1, (MEOWVectorBase *)v11, (MEOWVectorBase *)(this + 41));
  v10[0] = v11[0];
  v10[1] = 1;
  void v10[2] = v11[2];
  MEOWSearchLatticeImpl::MatchContexts(this, v10, a4, a5);
  MEOWVectorBase::~MEOWVectorBase(v11);
}

void sub_1DA4E1E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeImpl::MatchContexts(uint64_t a1, unsigned int a2, unsigned int a3, long long *a4, MEOWPhon *a5)
{
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v14, 1);
  MEOWReader::GetAdjacent(*(MEOWReader **)(a1 + 8), a2, a3, a5 ^ 1, (MEOWVectorBase *)v14, (MEOWVectorBase *)(a1 + 328));
  *(void **)&long long v12 = v14[0];
  *((void *)&v12 + MEOWVectorBase::~MEOWVectorBase(this + 1) = 1;
  int v13 = v14[2];
  long long v10 = *a4;
  uint64_t v11 = *((void *)a4 + 2);
  MEOWSearchLatticeImpl::MatchContexts((void *)a1, &v12, (uint64_t)&v10, a5);
  MEOWVectorBase::~MEOWVectorBase(v14);
}

void sub_1DA4E1F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeImpl::WeedCandidates(uint64_t a1, void *a2)
{
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v7, 2);
  unint64_t v4 = *(void *)(a1 + 176);
  if (v4)
  {
    for (unint64_t i = 0; i < v4; ++i)
    {
      uint64_t v6 = *(unsigned __int16 *)(*(void *)(a1 + 160) + 2 * i);
      if (!*(unsigned char *)(*a2 + a2[1] * v6))
      {
        MEOWVectorBase::Append(v7);
        *((_WORD *)v7[0] + v8 - MEOWVectorBase::~MEOWVectorBase(this + 1) = v6;
        unint64_t v4 = *(void *)(a1 + 176);
      }
    }
  }
  if (v8) {
    MEOWVectorBase::Swap((uint64_t *)v7, (MEOWVectorBase *)(a1 + 160));
  }
  MEOWVectorBase::~MEOWVectorBase(v7);
}

void sub_1DA4E1FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void MEOWSearchLatticeImpl::WeedCandidates(MEOWSearchLatticeImpl *this, unsigned int a2, unsigned int a3)
{
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v10, 2);
  if (*((void *)this + 22))
  {
    unint64_t v6 = 0;
    do
    {
      unsigned __int16 v7 = *(_WORD *)(*((void *)this + 20) + 2 * v6);
      uint64_t v8 = (MEOWReader *)*((void *)this + 1);
      unint64_t DemiRecord = MEOWReader::GetDemiRecord(v8, a2, a3, v7, 0);
      if (MEOWReader::IsWordOnly(v8, DemiRecord)) {
        break;
      }
      MEOWVectorBase::Append(v10);
      *((_WORD *)v10[0] + v11 - MEOWVectorBase::~MEOWVectorBase(this + 1) = v7;
      ++v6;
    }
    while (v6 < *((void *)this + 22));
  }
  if (v11) {
    MEOWVectorBase::Swap((uint64_t *)v10, (MEOWSearchLatticeImpl *)((char *)this + 160));
  }
  MEOWVectorBase::~MEOWVectorBase(v10);
}

void sub_1DA4E20E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void MEOWSearchLatticeImpl::CullCandidates(MEOWSearchLatticeImpl *this, unint64_t a2, const char *a3, ...)
{
  v15[201] = *MEMORY[0x1E4F143B8];
  bzero(v15, 0x648uLL);
  uint64_t v5 = *((void *)this + 22);
  if (v5)
  {
    unint64_t v6 = (unsigned __int16 *)*((void *)this + 20);
    uint64_t v7 = *((void *)this + 37);
    do
    {
      unsigned int v8 = *v6++;
      ++v15[*(unsigned __int8 *)(v7 + v8)];
      --v5;
    }
    while (v5);
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  do
  {
    v10 += v15[v9];
    if (v10 >= a2) {
      break;
    }
    ++v9;
  }
  while (v9 != 201);
  if (v10 > 2 * a2) {
    LODWORD(vMEOWVectorBase::clear(this + 9) = v9 - (v10 - v15[v9] > a2 >> 1);
  }
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v14, 2);
  unint64_t v11 = *((void *)this + 22);
  if (v11)
  {
    for (unint64_t i = 0; i < v11; ++i)
    {
      uint64_t v13 = *(unsigned __int16 *)(*((void *)this + 20) + 2 * i);
      if ((int)v9 >= *(unsigned __int8 *)(*((void *)this + 37) + v13))
      {
        MEOWVectorBase::Append(v14);
        *((_WORD *)v14[0] + (uint64_t)v14[2] - MEOWVectorBase::~MEOWVectorBase(this + 1) = v13;
        unint64_t v11 = *((void *)this + 22);
      }
    }
  }
  MEOWVectorBase::Swap((uint64_t *)v14, (MEOWSearchLatticeImpl *)((char *)this + 160));
  MEOWVectorBase::~MEOWVectorBase(v14);
}

void sub_1DA4E2254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void MEOWSearchLatticeImpl::Null2Diphone(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  MEOWSearchLatticeImpl::WeedCandidates((MEOWSearchLatticeImpl *)a1, *a2, a2[1]);
  if (kDiphoneThreshold)
  {
    MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EA8DA858, (uint64_t *)qword_1EA8DA858);
    kDiphoneThreshold = 0;
  }
  if (qword_1EA8DA858)
  {
    *(void *)(a1 + 31MEOWVectorBase::~MEOWVectorBase(this + 2) = 0;
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v22, 1);
    MEOWReader::GetAdjacent(*(MEOWReader **)(a1 + 8), *a2, a2[1], 0, (MEOWVectorBase *)v22, (MEOWVectorBase *)(a1 + 328));
    MEOWSearchLatticeImpl::MatchWordBoundaries((MEOWSearchLatticeImpl *)a1, a2[32], a2[33]);
    unsigned int v6 = *a2;
    unsigned int v7 = a2[1];
    uint64_t v8 = *a3;
    *(void *)&long long v20 = a3 + 1;
    *((void *)&v20 + MEOWVectorBase::~MEOWVectorBase(this + 1) = 1;
    uint64_t v21 = v8;
    MEOWSearchLatticeImpl::MatchContexts(a1, v6, v7, &v20, 0);
    if (kDiphoneThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EA8DA858, (uint64_t *)qword_1EA8DA858);
      kDiphoneThreshold = 0;
    }
    unint64_t v9 = qword_1EA8DA858;
    unint64_t v10 = MEOWPhon::Name((MEOWPhon *)*a2);
    unint64_t v11 = MEOWPhon::Name((MEOWPhon *)a2[1]);
    MEOWSearchLatticeImpl::CullCandidates((MEOWSearchLatticeImpl *)a1, v9, v12, v10, v11);
    MEOWVectorBase::~MEOWVectorBase(v22);
  }
  uint64_t v13 = *(void *)(a1 + 176);
  if (v13)
  {
    long long v14 = *(unsigned __int16 **)(a1 + 160);
    uint64_t v15 = *(void *)(a1 + 208);
    int v16 = *(_DWORD *)(a1 + 196);
    uint64_t v17 = *(void *)(a1 + 232);
    int v18 = *(_DWORD *)(a1 + 220);
    do
    {
      int v19 = *v14++;
      *(_DWORD *)(v15 + 4 * v16 * v1MEOWVectorBase::clear(this + 9) = 0;
      *(_DWORD *)(v17 + 4 * v18 * v1MEOWVectorBase::clear(this + 9) = 0;
      --v13;
    }
    while (v13);
  }
}

void sub_1DA4E23D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeImpl::Diphone2Diphone(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v17, 60);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v16, 60);
  float v6 = MEOWPhon::sDWt[*a2];
  MEOWSearchLatticeImpl::WeedCandidates((MEOWSearchLatticeImpl *)a1, *a2, a2[1]);
  if (kDiphoneThreshold)
  {
    MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EA8DA858, (uint64_t *)qword_1EA8DA858);
    kDiphoneThreshold = 0;
  }
  if (qword_1EA8DA858)
  {
    *(void *)(a1 + 31MEOWVectorBase::~MEOWVectorBase(this + 2) = 0;
    MEOWSearchLatticeImpl::MatchContexts((MEOWReader **)a1, *a2, a2[1], *(unsigned char *)(a1 + 432), (MEOWPhon *)1);
    MEOWSearchLatticeImpl::MatchWordBoundaries((MEOWSearchLatticeImpl *)a1, a2[32], a2[33]);
    unsigned int v7 = a2[1];
    if (a2[1])
    {
      unsigned int v8 = *a2;
      uint64_t v9 = *a3;
      *(void *)&long long v14 = a3 + 1;
      *((void *)&v14 + MEOWVectorBase::~MEOWVectorBase(this + 1) = 1;
      uint64_t v15 = v9;
      MEOWSearchLatticeImpl::MatchContexts(a1, v8, v7, &v14, 0);
    }
    if (kDiphoneThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EA8DA858, (uint64_t *)qword_1EA8DA858);
      kDiphoneThreshold = 0;
    }
    unint64_t v10 = qword_1EA8DA858;
    unint64_t v11 = MEOWPhon::Name((MEOWPhon *)*a2);
    long long v12 = MEOWPhon::Name((MEOWPhon *)a2[1]);
    MEOWSearchLatticeImpl::CullCandidates((MEOWSearchLatticeImpl *)a1, v10, v13, v11, v12);
  }
  MEOWReader::GetDistanceCookies(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 432), *(unsigned __int8 *)(a1 + 433), 1, (MEOWVectorBase *)v17, (void *)(a1 + 104));
  MEOWReader::GetDistanceCookies(*(void *)(a1 + 8), *a2, a2[1], 0, (MEOWVectorBase *)v16, (void *)(a1 + 160));
  MEOWSearchLatticeImpl::Cookie2Cookie(a1, (unsigned __int16 **)(a1 + 104), (uint64_t)v17, v16, 0, 0, 0, v6);
  MEOWVectorBase::~MEOWVectorBase(v16);
  MEOWVectorBase::~MEOWVectorBase(v17);
}

void sub_1DA4E259C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeImpl::Demi2Diphone(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned int v6 = *a2;
  float v7 = MEOWPhon::sDWt[v6];
  MEOWSearchLatticeImpl::WeedCandidates((MEOWSearchLatticeImpl *)a1, v6, a2[1]);
  if (kDiphoneThreshold)
  {
    MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EA8DA858, (uint64_t *)qword_1EA8DA858);
    kDiphoneThreshold = 0;
  }
  if (qword_1EA8DA858)
  {
    *(void *)(a1 + 31MEOWVectorBase::~MEOWVectorBase(this + 2) = 0;
    unsigned int v8 = a2[1];
    if (a2[1])
    {
      unsigned int v9 = *a2;
      unsigned int v10 = *a3;
      *(void *)&long long v29 = a3 + 1;
      *((void *)&v29 + MEOWVectorBase::~MEOWVectorBase(this + 1) = 1;
      uint64_t v30 = v10;
      MEOWSearchLatticeImpl::MatchContexts(a1, v9, v8, &v29, 0);
    }
  }
  if (*(void *)(a1 + 512) == 1)
  {
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v28, 60);
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)__src, 60);
    if (kDiphoneThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EA8DA858, (uint64_t *)qword_1EA8DA858);
      kDiphoneThreshold = 0;
    }
    if (qword_1EA8DA858)
    {
      MEOWSearchLatticeImpl::MatchContexts((MEOWReader **)a1, *a2, a2[1], **(unsigned char **)(a1 + 520), (MEOWPhon *)1);
      MEOWSearchLatticeImpl::MatchWordBoundaries((MEOWSearchLatticeImpl *)a1, a2[32], 0);
      if (kDiphoneThreshold)
      {
        MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EA8DA858, (uint64_t *)qword_1EA8DA858);
        kDiphoneThreshold = 0;
      }
      unint64_t v11 = qword_1EA8DA858;
      long long v12 = MEOWPhon::Name((MEOWPhon *)*a2);
      uint64_t v13 = MEOWPhon::Name((MEOWPhon *)a2[1]);
      MEOWSearchLatticeImpl::CullCandidates((MEOWSearchLatticeImpl *)a1, v11, v14, v12, v13);
    }
    MEOWReader::GetDistanceCookies(*(void *)(a1 + 8), **(unsigned __int8 **)(a1 + 520), *(unsigned __int8 *)(*(void *)(a1 + 520) + 1), 1, (MEOWVectorBase *)v28, (void *)(a1 + 104));
    MEOWReader::GetDistanceCookies(*(void *)(a1 + 8), *a2, a2[1], 0, (MEOWVectorBase *)__src, (void *)(a1 + 160));
    MEOWSearchLatticeImpl::Cookie2Cookie(a1, (unsigned __int16 **)(a1 + 104), (uint64_t)v28, __src, 0, 0, 0, v7);
  }
  else
  {
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v28, 60);
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)__src, 60);
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v26, 60);
    if (*(void *)(a1 + 512))
    {
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      do
      {
        MEOWReader::GetDistanceCookies(*(void *)(a1 + 8), *(unsigned __int8 *)(*(void *)(a1 + 520) + v15), *(unsigned __int8 *)(*(void *)(a1 + 520) + v15 + 1), 1, (MEOWVectorBase *)__src, 0);
        MEOWVectorBase::Append((MEOWVectorBase *)v28, __src[0], (uint64_t)__src[2]);
        ++v16;
        v15 += 144;
      }
      while (v16 < *(void *)(a1 + 512));
    }
    if (kDiphoneThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EA8DA858, (uint64_t *)qword_1EA8DA858);
      kDiphoneThreshold = 0;
    }
    if (qword_1EA8DA858)
    {
      unsigned int v17 = *a2;
      unsigned int v18 = a2[1];
      uint64_t v19 = *(void *)(a1 + 512);
      *(void *)&long long v24 = *(void *)(a1 + 520);
      *((void *)&v24 + MEOWVectorBase::~MEOWVectorBase(this + 1) = 144;
      uint64_t v25 = v19;
      MEOWSearchLatticeImpl::MatchContexts(a1, v17, v18, &v24, (MEOWPhon *)1);
      MEOWSearchLatticeImpl::MatchWordBoundaries((MEOWSearchLatticeImpl *)a1, a2[32], 0);
      if (kDiphoneThreshold)
      {
        MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EA8DA858, (uint64_t *)qword_1EA8DA858);
        kDiphoneThreshold = 0;
      }
      unint64_t v20 = qword_1EA8DA858;
      uint64_t v21 = MEOWPhon::Name((MEOWPhon *)*a2);
      float v22 = MEOWPhon::Name((MEOWPhon *)a2[1]);
      MEOWSearchLatticeImpl::CullCandidates((MEOWSearchLatticeImpl *)a1, v20, v23, v21, v22);
    }
    MEOWReader::GetDistanceCookies(*(void *)(a1 + 8), *a2, a2[1], 0, (MEOWVectorBase *)v26, (void *)(a1 + 160));
    MEOWSearchLatticeImpl::Cookie2Cookie(a1, (unsigned __int16 **)(a1 + 104), (uint64_t)v28, v26, 0, 0, 0, v7);
    MEOWVectorBase::~MEOWVectorBase(v26);
  }
  MEOWVectorBase::~MEOWVectorBase(__src);
  MEOWVectorBase::~MEOWVectorBase(v28);
}

void sub_1DA4E290C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  unint64_t v11 = va_arg(va1, void *);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  MEOWVectorBase::~MEOWVectorBase((void **)va1);
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeImpl::Null2Demi(MEOWSearchLatticeImpl *this, const MEOWDemiSliceInfo *a2)
{
  if (*((void *)a2 + 5) == 1)
  {
    unint64_t v4 = (unsigned __int8 *)*((void *)a2 + 6);
    unsigned int v5 = *v4;
    unsigned int v6 = v4[1];
    MEOWSearchLatticeImpl::WeedCandidates(this, v5, v6);
  }
  else
  {
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v11, 60);
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)__src, 60);
    if (*((void *)a2 + 5))
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      do
      {
        MEOWReader::GetDistanceCookies(*((void *)this + 1), *(unsigned __int8 *)(*((void *)a2 + 6) + v7), *(unsigned __int8 *)(*((void *)a2 + 6) + v7 + 1), 0, (MEOWVectorBase *)__src, 0);
        MEOWVectorBase::Append((MEOWVectorBase *)v11, __src[0], (uint64_t)__src[2]);
        ++v8;
        v7 += 144;
      }
      while (v8 < *((void *)a2 + 5));
    }
    v9[0] = (char *)v11[0] + 53;
    v9[1] = 60;
    v9[2] = v11[2];
    MEOWSearchLatticeImpl::WeedCandidates((uint64_t)this, v9);
    MEOWVectorBase::~MEOWVectorBase(__src);
    MEOWVectorBase::~MEOWVectorBase(v11);
  }
}

void sub_1DA4E2A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  unsigned int v6 = va_arg(va1, void *);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  MEOWVectorBase::~MEOWVectorBase((void **)va1);
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeImpl::Demi2Demi(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  float v5 = MEOWPhon::sDWt[**(unsigned __int8 **)(a2 + 48)];
  if (*(void *)(a1 + 512) == 1 && *(void *)(a2 + 40) == 1)
  {
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v35, 60);
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v33, 60);
    MEOWSearchLatticeImpl::WeedCandidates((MEOWSearchLatticeImpl *)a1, **(unsigned __int8 **)(a2 + 48), *(unsigned __int8 *)(*(void *)(a2 + 48) + 1));
    if (kDiphoneThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EA8DA858, (uint64_t *)qword_1EA8DA858);
      kDiphoneThreshold = 0;
    }
    if (qword_1EA8DA858)
    {
      *(void *)(a1 + 31MEOWVectorBase::~MEOWVectorBase(this + 2) = 0;
      if (*(unsigned char *)(a2 + 1))
      {
        unsigned int v17 = *(unsigned __int8 **)(a2 + 48);
        unsigned int v18 = *v17;
        unsigned int v19 = v17[1];
        uint64_t v20 = *a3;
        *(void *)&long long v31 = a3 + 1;
        *((void *)&v31 + MEOWVectorBase::~MEOWVectorBase(this + 1) = 1;
        uint64_t v32 = v20;
        MEOWSearchLatticeImpl::MatchContexts(a1, v18, v19, &v31, 0);
      }
      MEOWSearchLatticeImpl::MatchContexts((MEOWReader **)a1, **(unsigned __int8 **)(a2 + 48), *(unsigned __int8 *)(*(void *)(a2 + 48) + 1), **(unsigned char **)(a1 + 520), (MEOWPhon *)1);
      if (kDiphoneThreshold)
      {
        MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EA8DA858, (uint64_t *)qword_1EA8DA858);
        kDiphoneThreshold = 0;
      }
      unint64_t v21 = qword_1EA8DA858;
      float v22 = MEOWPhon::Name((MEOWPhon *)**(unsigned __int8 **)(a2 + 48));
      uint64_t v23 = MEOWPhon::Name((MEOWPhon *)*(unsigned __int8 *)(*(void *)(a2 + 48) + 1));
      MEOWSearchLatticeImpl::CullCandidates((MEOWSearchLatticeImpl *)a1, v21, v24, v22, v23);
    }
    MEOWReader::GetDistanceCookies(*(void *)(a1 + 8), **(unsigned __int8 **)(a1 + 520), *(unsigned __int8 *)(*(void *)(a1 + 520) + 1), 1, (MEOWVectorBase *)v35, (void *)(a1 + 104));
    MEOWReader::GetDistanceCookies(*(void *)(a1 + 8), **(unsigned __int8 **)(a2 + 48), *(unsigned __int8 *)(*(void *)(a2 + 48) + 1), 0, (MEOWVectorBase *)v33, (void *)(a1 + 160));
    MEOWSearchLatticeImpl::Cookie2Cookie(a1, (unsigned __int16 **)(a1 + 104), (uint64_t)v35, v33, 0, 0, 0, v5);
  }
  else
  {
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v35, 60);
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v33, 60);
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)__src, 60);
    if (kDiphoneThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EA8DA858, (uint64_t *)qword_1EA8DA858);
      kDiphoneThreshold = 0;
    }
    if (qword_1EA8DA858) {
      *(void *)(a1 + 31MEOWVectorBase::~MEOWVectorBase(this + 2) = 0;
    }
    if (*(void *)(a1 + 512))
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      do
      {
        MEOWReader::GetDistanceCookies(*(void *)(a1 + 8), *(unsigned __int8 *)(*(void *)(a1 + 520) + v7), *(unsigned __int8 *)(*(void *)(a1 + 520) + v7 + 1), 1, (MEOWVectorBase *)__src, 0);
        MEOWVectorBase::Append((MEOWVectorBase *)v35, __src[0], v30);
        ++v8;
        v7 += 144;
      }
      while (v8 < *(void *)(a1 + 512));
    }
    if (*(void *)(a2 + 40))
    {
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      do
      {
        MEOWReader::GetDistanceCookies(*(void *)(a1 + 8), *(unsigned __int8 *)(*(void *)(a2 + 48) + v9), *(unsigned __int8 *)(*(void *)(a2 + 48) + v9 + 1), 0, (MEOWVectorBase *)__src, 0);
        MEOWVectorBase::Append((MEOWVectorBase *)v33, __src[0], v30);
        ++v10;
        v9 += 144;
      }
      while (v10 < *(void *)(a2 + 40));
    }
    v28[0] = (char *)v33[0] + 53;
    v28[1] = 60;
    _OWORD v28[2] = v34;
    MEOWSearchLatticeImpl::WeedCandidates(a1, v28);
    if (kDiphoneThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EA8DA858, (uint64_t *)qword_1EA8DA858);
      kDiphoneThreshold = 0;
    }
    if (qword_1EA8DA858)
    {
      *(void *)&long long v26 = (char *)v33[0] + 52;
      *((void *)&v26 + MEOWVectorBase::~MEOWVectorBase(this + 1) = 60;
      uint64_t v27 = v34;
      uint64_t v11 = *(void *)(a1 + 512);
      v25[0] = *(void *)(a1 + 520);
      v25[1] = 144;
      v25[2] = v11;
      MEOWSearchLatticeImpl::MatchContexts((void *)a1, &v26, (uint64_t)v25, (MEOWPhon *)1);
      MEOWSearchLatticeImpl::MatchWordBoundaries((MEOWSearchLatticeImpl *)a1, *(unsigned __int8 *)(a2 + 32), 0);
      if (kDiphoneThreshold)
      {
        MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EA8DA858, (uint64_t *)qword_1EA8DA858);
        kDiphoneThreshold = 0;
      }
      unint64_t v12 = qword_1EA8DA858;
      uint64_t v13 = MEOWPhon::Name((MEOWPhon *)**(unsigned __int8 **)(a2 + 48));
      uint64_t v14 = MEOWPhon::Name((MEOWPhon *)*(unsigned __int8 *)(*(void *)(a2 + 48) + 1));
      MEOWSearchLatticeImpl::CullCandidates((MEOWSearchLatticeImpl *)a1, v12, v15, v13, v14);
    }
    MEOWSearchLatticeImpl::Cookie2Cookie(a1, (unsigned __int16 **)(a1 + 104), (uint64_t)v35, v33, 0, 0, 0, v5);
    MEOWVectorBase::~MEOWVectorBase(__src);
  }
  MEOWVectorBase::~MEOWVectorBase(v33);
  MEOWVectorBase::~MEOWVectorBase(v35);
}

void sub_1DA4E2E8C(_Unwind_Exception *a1)
{
  MEOWVectorBase::~MEOWVectorBase((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeImpl::Anchor2Diphone(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v24, 60);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v23, 60);
  unsigned int v6 = *(_DWORD *)(a1 + 536);
  float v7 = MEOWPhon::sDWt[*a2];
  MEOWSearchLatticeImpl::WeedCandidates((MEOWSearchLatticeImpl *)a1, *a2, a2[1]);
  if (kDiphoneThreshold)
  {
    MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EA8DA858, (uint64_t *)qword_1EA8DA858);
    kDiphoneThreshold = 0;
  }
  if (qword_1EA8DA858)
  {
    *(void *)(a1 + 31MEOWVectorBase::~MEOWVectorBase(this + 2) = 0;
    unsigned int v8 = a2[1];
    if (a2[1])
    {
      unsigned int v9 = *a2;
      uint64_t v10 = *a3;
      *(void *)&long long v19 = a3 + 1;
      *((void *)&v19 + MEOWVectorBase::~MEOWVectorBase(this + 1) = 1;
      uint64_t v20 = v10;
      MEOWSearchLatticeImpl::MatchContexts(a1, v9, v8, &v19, 0);
      unsigned int v8 = a2[1];
    }
    MEOWSearchLatticeImpl::MatchContexts((MEOWReader **)a1, *a2, v8, *(unsigned char *)(a1 + 536), (MEOWPhon *)1);
    MEOWSearchLatticeImpl::MatchWordBoundaries((MEOWSearchLatticeImpl *)a1, a2[32], a2[33]);
    if (kDiphoneThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EA8DA858, (uint64_t *)qword_1EA8DA858);
      kDiphoneThreshold = 0;
    }
    unint64_t v11 = qword_1EA8DA858;
    unint64_t v12 = MEOWPhon::Name((MEOWPhon *)*a2);
    uint64_t v13 = MEOWPhon::Name((MEOWPhon *)a2[1]);
    MEOWSearchLatticeImpl::CullCandidates((MEOWSearchLatticeImpl *)a1, v11, v14, v12, v13);
  }
  MEOWReader::GetDistanceCookie(*(void *)(a1 + 8), v6, BYTE1(v6), (unsigned __int16)bswap32(v6), 1, (uint64_t)v21);
  long long v16 = v21[0];
  long long v17 = v21[1];
  *(_OWORD *)unsigned int v18 = *(_OWORD *)v22;
  *(_OWORD *)&v18[12] = *(_OWORD *)&v22[12];
  MEOWVectorBase::Append(v24);
  uint64_t v15 = (char *)v24[0] + 60 * (uint64_t)v24[2];
  *(_OWORD *)(v15 - 60) = v16;
  *(_OWORD *)(v15 - 4MEOWVectorBase::clear(this + 4) = v17;
  *(_OWORD *)(v15 - 28) = *(_OWORD *)v18;
  *((_OWORD *)v15 - MEOWVectorBase::~MEOWVectorBase(this + 1) = *(_OWORD *)&v18[12];
  MEOWReader::GetDistanceCookies(*(void *)(a1 + 8), *a2, a2[1], 0, (MEOWVectorBase *)v23, (void *)(a1 + 160));
  MEOWSearchLatticeImpl::Cookie2Cookie(a1, (unsigned __int16 **)(a1 + 104), (uint64_t)v24, v23, 0, 0, 0, v7);
  MEOWVectorBase::~MEOWVectorBase(v23);
  MEOWVectorBase::~MEOWVectorBase(v24);
}

void sub_1DA4E30E4(_Unwind_Exception *a1)
{
  MEOWVectorBase::~MEOWVectorBase((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeImpl::Diphone2Anchor(uint64_t a1, unsigned int *a2)
{
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v13, 60);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v12, 60);
  unsigned int v4 = *a2;
  float v5 = MEOWPhon::sDWt[*a2];
  MEOWReader::GetDistanceCookies(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 432), *(unsigned __int8 *)(a1 + 433), 1, (MEOWVectorBase *)v13, (void *)(a1 + 104));
  MEOWReader::GetDistanceCookie(*(void *)(a1 + 8), v4, BYTE1(v4), (unsigned __int16)bswap32(v4), 0, (uint64_t)v10);
  long long v7 = v10[0];
  long long v8 = v10[1];
  *(_OWORD *)unsigned int v9 = *(_OWORD *)v11;
  *(_OWORD *)&v9[12] = *(_OWORD *)&v11[12];
  MEOWVectorBase::Append(v12);
  unsigned int v6 = (char *)v12[0] + 60 * (uint64_t)v12[2];
  *(_OWORD *)(v6 - 60) = v7;
  *(_OWORD *)(v6 - 4MEOWVectorBase::clear(this + 4) = v8;
  *(_OWORD *)(v6 - 28) = *(_OWORD *)v9;
  *((_OWORD *)v6 - MEOWVectorBase::~MEOWVectorBase(this + 1) = *(_OWORD *)&v9[12];
  MEOWSearchLatticeImpl::Cookie2Cookie(a1, (unsigned __int16 **)(a1 + 104), (uint64_t)v13, v12, 0, 0, 0, v5);
  MEOWVectorBase::~MEOWVectorBase(v12);
  MEOWVectorBase::~MEOWVectorBase(v13);
}

void sub_1DA4E3234(_Unwind_Exception *a1)
{
  MEOWVectorBase::~MEOWVectorBase((void **)(v1 - 80));
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeImpl::Word2Demi()
{
  if (kDemiThreshold)
  {
    MTBEDebugParams::GetParam((const __CFString *)kDemiThreshold, (const __CFString *)&qword_1EA8DA868, (uint64_t *)qword_1EA8DA868);
    kDemiThreshold = 0;
  }
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)&v2, 2);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v1, 1);
  SLML::Vector<float>::Vector(&v0, 0);
}

void sub_1DA4E37AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  SLML::Storage<float>::RemoveReference(a35);
  SLML::Storage<float>::RemoveReference(a38);
  MEOWVectorBase::~MEOWVectorBase((void **)(v38 - 200));
  MEOWVectorBase::~MEOWVectorBase((void **)(v38 - 168));
  _Unwind_Resume(a1);
}

int *SLML::Vector<float>::insert<SLML::Vector<float>::iterator>(int *result, const char *a2, uint64_t a3, float **a4)
{
  unsigned int v6 = result;
  if (*(void *)a2 != *((void *)result + 2) + 4 * result[1] * *result) {
    SLML::Fatal((SLML *)"Only inserts at end() are implemented!", a2);
  }
  for (unint64_t i = *(float **)a3; i != *a4; *(void *)a3 = i)
  {
    uint64_t result = SLML::Vector<float>::push_back(v6, *i);
    unint64_t i = (float *)(*(void *)a3 + 4 * *(int *)(a3 + 8));
  }
  return result;
}

void MEOWSearchLatticeImpl::Diphone2Demi(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  float v5 = MEOWPhon::sDWt[*(unsigned __int8 *)(a1 + 433)];
  if (*(void *)(a2 + 40) != 1)
  {
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v22, 60);
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v21, 60);
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v18, 60);
    if (kDemiThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDemiThreshold, (const __CFString *)&qword_1EA8DA868, (uint64_t *)qword_1EA8DA868);
      kDemiThreshold = 0;
    }
    MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)&v17, 2);
    SLML::Vector<float>::Vector(&v16, 0);
  }
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v22, 60);
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v21, 60);
  MEOWSearchLatticeImpl::WeedCandidates((MEOWSearchLatticeImpl *)a1, **(unsigned __int8 **)(a2 + 48), *(unsigned __int8 *)(*(void *)(a2 + 48) + 1));
  if (kDiphoneThreshold)
  {
    MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EA8DA858, (uint64_t *)qword_1EA8DA858);
    kDiphoneThreshold = 0;
  }
  if (qword_1EA8DA858)
  {
    *(void *)(a1 + 31MEOWVectorBase::~MEOWVectorBase(this + 2) = 0;
    long long v7 = *(unsigned __int8 **)(a2 + 48);
    unsigned int v8 = v7[80];
    unsigned int v9 = *v7;
    unsigned int v10 = v7[1];
    if (v7[80])
    {
      uint64_t v20 = v7 + 81;
      unint64_t v11 = (long long *)&v20;
    }
    else
    {
      unsigned int v8 = *a3;
      long long v19 = a3 + 1;
      unint64_t v11 = (long long *)&v19;
    }
    *((void *)v11 + MEOWVectorBase::~MEOWVectorBase(this + 1) = 1;
    *((void *)v11 + MEOWVectorBase::~MEOWVectorBase(this + 2) = v8;
    MEOWSearchLatticeImpl::MatchContexts(a1, v9, v10, v11, 0);
    MEOWSearchLatticeImpl::MatchContexts((MEOWReader **)a1, **(unsigned __int8 **)(a2 + 48), *(unsigned __int8 *)(*(void *)(a2 + 48) + 1), *(unsigned char *)(a1 + 432), (MEOWPhon *)1);
    MEOWSearchLatticeImpl::MatchWordBoundaries((MEOWSearchLatticeImpl *)a1, *(unsigned __int8 *)(a2 + 32), 0);
    if (kDiphoneThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kDiphoneThreshold, (const __CFString *)&qword_1EA8DA858, (uint64_t *)qword_1EA8DA858);
      kDiphoneThreshold = 0;
    }
    unint64_t v12 = qword_1EA8DA858;
    uint64_t v13 = MEOWPhon::Name((MEOWPhon *)**(unsigned __int8 **)(a2 + 48));
    uint64_t v14 = MEOWPhon::Name((MEOWPhon *)*(unsigned __int8 *)(*(void *)(a2 + 48) + 1));
    MEOWSearchLatticeImpl::CullCandidates((MEOWSearchLatticeImpl *)a1, v12, v15, v13, v14);
  }
  MEOWReader::GetDistanceCookies(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 432), *(unsigned __int8 *)(a1 + 433), 1, (MEOWVectorBase *)v22, (void *)(a1 + 104));
  MEOWReader::GetDistanceCookies(*(void *)(a1 + 8), **(unsigned __int8 **)(a2 + 48), *(unsigned __int8 *)(*(void *)(a2 + 48) + 1), 0, (MEOWVectorBase *)v21, (void *)(a1 + 160));
  MEOWSearchLatticeImpl::Cookie2Cookie(a1, (unsigned __int16 **)(a1 + 104), (uint64_t)v22, v21, 0, 0, 0, v5);
  MEOWVectorBase::~MEOWVectorBase(v21);
  MEOWVectorBase::~MEOWVectorBase(v22);
}

void sub_1DA4E3D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  MEOWVectorBase::~MEOWVectorBase(&a26);
  MEOWVectorBase::~MEOWVectorBase((void **)(v26 - 168));
  MEOWVectorBase::~MEOWVectorBase((void **)(v26 - 136));
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeImpl::Word2WordCull(MEOWSearchLatticeImpl *a1, uint64_t a2, void *a3, unsigned __int8 *a4)
{
  *(void *)&v20[63] = *MEMORY[0x1E4F143B8];
  if (kWordThreshold)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordThreshold, (const __CFString *)&qword_1EA8DA8B8, (uint64_t *)qword_1EA8DA8B8);
    kWordThreshold = 0;
  }
  if (qword_1EA8DA8B8 && a3[2] > (unint64_t)qword_1EA8DA8B8)
  {
    *((void *)a1 + 3MEOWVectorBase::clear(this + 9) = 0;
    unsigned __int8 __s = 0;
    v18[0] = *((void *)a1 + 45) + 4;
    v18[1] = 8;
    v18[2] = *((void *)a1 + 47);
    MEOWDemiSliceInfo::PhonemeSet::AddPhonemes(&__s, v18);
    *(void *)&long long v16 = *a3;
    *((void *)&v16 + MEOWVectorBase::~MEOWVectorBase(this + 1) = 8;
    uint64_t v17 = a3[2];
    v15[0] = v20;
    v15[1] = 1;
    void v15[2] = __s;
    MEOWSearchLatticeImpl::MatchContexts(a1, &v16, (uint64_t)v15, 0);
    *(void *)&long long v13 = *a3 + 5;
    *((void *)&v13 + MEOWVectorBase::~MEOWVectorBase(this + 1) = 8;
    uint64_t v14 = a3[2];
    uint64_t v8 = *a4;
    v12[0] = a4 + 1;
    v12[1] = 1;
    void v12[2] = v8;
    MEOWSearchLatticeImpl::MatchContexts(a1, &v13, (uint64_t)v12, (MEOWPhon *)1);
    v11[0] = *a3 + 1;
    v11[1] = 8;
    void v11[2] = a3[2];
    MEOWSearchLatticeImpl::MatchContexts(a1, v11, *(unsigned char *)(a2 + 57), (MEOWPhon *)1);
    v10[0] = *a3 + 4;
    v10[1] = 8;
    _OWORD v10[2] = a3[2];
    MEOWSearchLatticeImpl::MatchContexts(a1, v10, *(unsigned char *)(a2 + 58), 0);
    if (kWordThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kWordThreshold, (const __CFString *)&qword_1EA8DA8B8, (uint64_t *)qword_1EA8DA8B8);
      kWordThreshold = 0;
    }
    MEOWSearchLatticeImpl::CullCandidates(a1, qword_1EA8DA8B8, v9, *(void *)a2);
  }
}

_UNKNOWN **MEOWSearchLatticeImpl::Word2Word(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  float v9 = *(float *)(a1 + 424);
  if (kWordLeftBias)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordLeftBias, (const __CFString *)&dword_1EA8DA8C8, (float *)a4, *(float *)&dword_1EA8DA8C8);
    kWordLeftBias = 0;
  }
  if ((float)(v9 + *(float *)&dword_1EA8DA8C8) >= a2) {
    a2 = v9 + *(float *)&dword_1EA8DA8C8;
  }
  uint64_t v10 = *(void *)(a4 + 16);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = v10 + v11;
  if (*(void *)(a1 + 64) < (unint64_t)(v10 + v11)) {
    MEOWVectorBase::Allocate((MEOWVectorBase *)(a1 + 40), v10 + v11, 1);
  }
  *(void *)(a1 + 56) = v12;
  bzero((void *)(*(void *)(a1 + 40) + 2 * v11), 2 * *(void *)(a4 + 16));
  if (kWordContextSubst)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordContextSubst, (const __CFString *)&dword_1EA8DA8D8, v13, *(float *)&dword_1EA8DA8D8);
    kWordContextSubst = 0;
  }
  float v14 = *(float *)&dword_1EA8DA8D8;
  if (kWordKeepWithNext)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordKeepWithNext, (const __CFString *)&dword_1EA8DA8A8, v13, *(float *)&dword_1EA8DA8A8);
    kWordKeepWithNext = 0;
  }
  int v15 = dword_1EA8DA8A8;
  if (kWordKeepWithPrev)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordKeepWithPrev, (const __CFString *)&dword_1EA8DA8E8, v13, *(float *)&dword_1EA8DA8E8);
    kWordKeepWithPrev = 0;
  }
  int v16 = dword_1EA8DA8E8;
  uint64_t v45 = MEOWPhon::Match(0);
  uint64_t result = MEOWPhon::Match((MEOWPhon *)1);
  uint64_t v44 = result;
  uint64_t v18 = *(void *)(a1 + 176);
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *(void *)(a1 + 160);
    uint64_t result = *(_UNKNOWN ***)a4;
    uint64_t v21 = *a5;
    float v22 = *(unsigned __int16 **)(a1 + 104);
    uint64_t v23 = *(void *)(a1 + 120);
    uint64_t v24 = *(void *)(a1 + 208);
    int v25 = *(_DWORD *)(a1 + 196);
    uint64_t v26 = *(void *)(a1 + 232);
    int v27 = *(_DWORD *)(a1 + 220);
    uint64_t v28 = *(void *)(a1 + 40);
    do
    {
      uint64_t v29 = *(unsigned __int16 *)(v20 + 2 * v19);
      unsigned __int16 v30 = *v22;
      if (v23)
      {
        int v31 = (int)result[v29];
        if ((*(unsigned char *)(v21 + v29) & 0x40) != 0) {
          float v32 = *(float *)&v16;
        }
        else {
          float v32 = -0.0;
        }
        float v33 = 3.4028e38;
        uint64_t v34 = v22;
        uint64_t v35 = v23;
        float v36 = 3.4028e38;
        do
        {
          unsigned int v38 = *v34++;
          uint64_t v37 = v38;
          float v39 = *(float *)(*(void *)(a1 + 152) + 4 * (int)(*(_DWORD *)(a1 + 140) * v38));
          if (v39 >= v36) {
            break;
          }
          int v40 = *(_DWORD *)(*(void *)(a1 + 360) + 8 * v37 + 4);
          float v41 = 0.0;
          if (v40 != v31)
          {
            if (*(char *)(*(void *)(a1 + 392) + v37) >= 0) {
              float v42 = -0.0;
            }
            else {
              float v42 = *(float *)&v15;
            }
            float v41 = v32
                + (float)((float)((float)((float)(a2
                                                + (float)(v14 * (float)*(char *)(*v44 + 51 * (char)v31 + (char)v40)))
                                        + (float)(v14
                                                * (float)*((char *)*v45 + 51 * SBYTE1(v40)
                                                                        + ((uint64_t)(__int16)v31 >> 8))))
                                + 0.0)
                        + v42);
          }
          float v43 = v39 + v41;
          if (v43 < v36)
          {
            float v36 = v43;
            float v33 = v41;
            unsigned __int16 v30 = v37;
          }
          --v35;
        }
        while (v35);
      }
      else
      {
        float v36 = 3.4028e38;
        float v33 = 3.4028e38;
      }
      *(float *)(v24 + 4 * v25 * (int)v2MEOWVectorBase::clear(this + 9) = v36;
      *(float *)(v26 + 4 * v27 * (int)v2MEOWVectorBase::clear(this + 9) = v33;
      *(_WORD *)(v28 + 2 * (v11 + v29)) = v30;
      ++v19;
    }
    while (v19 != v18);
  }
  return result;
}

void MEOWSearchLatticeImpl::Null2WordCull(MEOWSearchLatticeImpl *a1, uint64_t a2, void *a3, unsigned __int8 *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (kWordThreshold)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordThreshold, (const __CFString *)&qword_1EA8DA8B8, (uint64_t *)qword_1EA8DA8B8);
    kWordThreshold = 0;
  }
  if (qword_1EA8DA8B8 && a3[2] > (unint64_t)qword_1EA8DA8B8)
  {
    *((void *)a1 + 3MEOWVectorBase::clear(this + 9) = 0;
    __int16 v19 = 1;
    *(void *)&long long v17 = *a3;
    *((void *)&v17 + MEOWVectorBase::~MEOWVectorBase(this + 1) = 8;
    uint64_t v18 = a3[2];
    int v15 = (char *)&v19 + 1;
    int64x2_t v16 = vdupq_n_s64(1uLL);
    MEOWSearchLatticeImpl::MatchContexts(a1, &v17, (uint64_t)&v15, 0);
    *(void *)&long long v13 = *a3 + 5;
    *((void *)&v13 + MEOWVectorBase::~MEOWVectorBase(this + 1) = 8;
    uint64_t v14 = a3[2];
    uint64_t v8 = *a4;
    v12[0] = a4 + 1;
    v12[1] = 1;
    void v12[2] = v8;
    MEOWSearchLatticeImpl::MatchContexts(a1, &v13, (uint64_t)v12, (MEOWPhon *)1);
    v11[0] = *a3 + 1;
    v11[1] = 8;
    void v11[2] = a3[2];
    MEOWSearchLatticeImpl::MatchContexts(a1, v11, *(unsigned char *)(a2 + 57), (MEOWPhon *)1);
    v10[0] = *a3 + 4;
    v10[1] = 8;
    _OWORD v10[2] = a3[2];
    MEOWSearchLatticeImpl::MatchContexts(a1, v10, *(unsigned char *)(a2 + 58), 0);
    if (kWordThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kWordThreshold, (const __CFString *)&qword_1EA8DA8B8, (uint64_t *)qword_1EA8DA8B8);
      kWordThreshold = 0;
    }
    MEOWSearchLatticeImpl::CullCandidates(a1, qword_1EA8DA8B8, v9, *(void *)a2);
  }
}

unint64_t MEOWSearchLatticeImpl::Null2Word(uint64_t a1, float a2, uint64_t a3, float *a4, uint64_t *a5)
{
  if (kWordContextSubst)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordContextSubst, (const __CFString *)&dword_1EA8DA8D8, a4, *(float *)&dword_1EA8DA8D8);
    kWordContextSubst = 0;
  }
  float v9 = *(float *)&dword_1EA8DA8D8;
  if (kWordKeepWithPrev)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordKeepWithPrev, (const __CFString *)&dword_1EA8DA8E8, a4, *(float *)&dword_1EA8DA8E8);
    kWordKeepWithPrev = 0;
  }
  int v10 = dword_1EA8DA8E8;
  unint64_t result = (unint64_t)MEOWPhon::Match((MEOWPhon *)1);
  uint64_t v12 = *(void *)(a1 + 176);
  if (v12)
  {
    uint64_t v13 = *(void *)result;
    uint64_t v14 = *(unsigned __int16 **)(a1 + 160);
    uint64_t v15 = *(void *)a4;
    uint64_t v16 = *a5;
    uint64_t v17 = *(void *)(a1 + 208);
    int v18 = *(_DWORD *)(a1 + 196);
    uint64_t v19 = *(void *)(a1 + 232);
    int v20 = *(_DWORD *)(a1 + 220);
    do
    {
      unsigned int v22 = *v14++;
      uint64_t v21 = v22;
      int v23 = *(_DWORD *)(v15 + 8 * v22);
      float v24 = 0.0;
      if (v23 >= 2u)
      {
        int v25 = *(char *)(v13 + 51 * (char)v23);
        if ((*(unsigned char *)(v16 + v21) & 0x40) != 0) {
          float v26 = *(float *)&v10;
        }
        else {
          float v26 = -0.0;
        }
        float v24 = v26 + (float)((float)(a2 + (float)(v9 * (float)v25)) + 0.0);
      }
      *(float *)(v17 + 4 * v18 * (int)v2MEOWVectorBase::~MEOWVectorBase(this + 1) = v24;
      unint64_t result = (v20 * v21);
      *(float *)(v19 + 4 * (int)result) = v24;
      --v12;
    }
    while (v12);
  }
  return result;
}

void MEOWSearchLatticeImpl::Demi2WordCull(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 *a4)
{
  if (kWordThreshold)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordThreshold, (const __CFString *)&qword_1EA8DA8B8, (uint64_t *)qword_1EA8DA8B8);
    kWordThreshold = 0;
  }
  if (qword_1EA8DA8B8 && a3[2] > (unint64_t)qword_1EA8DA8B8)
  {
    *(void *)(a1 + 31MEOWVectorBase::~MEOWVectorBase(this + 2) = 0;
    v15[0] = *a3;
    v15[1] = 8;
    void v15[2] = a3[2];
    MEOWSearchLatticeImpl::MatchContexts((void *)a1, v15, **(unsigned char **)(a1 + 520), 0);
    *(void *)&long long v13 = *a3 + 5;
    *((void *)&v13 + MEOWVectorBase::~MEOWVectorBase(this + 1) = 8;
    uint64_t v14 = a3[2];
    uint64_t v8 = *a4;
    v12[0] = a4 + 1;
    v12[1] = 1;
    void v12[2] = v8;
    MEOWSearchLatticeImpl::MatchContexts((void *)a1, &v13, (uint64_t)v12, (MEOWPhon *)1);
    v11[0] = *a3 + 1;
    v11[1] = 8;
    void v11[2] = a3[2];
    MEOWSearchLatticeImpl::MatchContexts((void *)a1, v11, *(unsigned char *)(a2 + 57), (MEOWPhon *)1);
    v10[0] = *a3 + 4;
    v10[1] = 8;
    _OWORD v10[2] = a3[2];
    MEOWSearchLatticeImpl::MatchContexts((void *)a1, v10, *(unsigned char *)(a2 + 58), 0);
    if (kWordThreshold)
    {
      MTBEDebugParams::GetParam((const __CFString *)kWordThreshold, (const __CFString *)&qword_1EA8DA8B8, (uint64_t *)qword_1EA8DA8B8);
      kWordThreshold = 0;
    }
    MEOWSearchLatticeImpl::CullCandidates((MEOWSearchLatticeImpl *)a1, qword_1EA8DA8B8, v9, *(void *)a2);
  }
}

void MEOWSearchLatticeImpl::Demi2Word(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = a3[2];
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = v7 + v8;
  if (*(void *)(a1 + 64) < (unint64_t)(v7 + v8)) {
    MEOWVectorBase::Allocate((MEOWVectorBase *)(a1 + 40), v7 + v8, 1);
  }
  *(void *)(a1 + 56) = v9;
  bzero((void *)(*(void *)(a1 + 40) + 2 * v8), 2 * a3[2]);
  if (kWordInstanceMismatch)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordInstanceMismatch, (const __CFString *)&dword_1EA8DA878, v10, *(float *)&dword_1EA8DA878);
    kWordInstanceMismatch = 0;
  }
  float v11 = *(float *)&dword_1EA8DA878;
  if (kWordInnerMismatch)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordInnerMismatch, (const __CFString *)&dword_1EA8DA888, v10, *(float *)&dword_1EA8DA888);
    kWordInnerMismatch = 0;
  }
  int v12 = dword_1EA8DA888;
  if (kWordOuterMismatch)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordOuterMismatch, (const __CFString *)&dword_1EA8DA898, v10, *(float *)&dword_1EA8DA898);
    kWordOuterMismatch = 0;
  }
  int v13 = dword_1EA8DA898;
  if (kWordKeepWithPrev)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordKeepWithPrev, (const __CFString *)&dword_1EA8DA8E8, v10, *(float *)&dword_1EA8DA8E8);
    kWordKeepWithPrev = 0;
  }
  uint64_t v14 = *(void *)(a1 + 176);
  if (v14)
  {
    uint64_t v15 = 0;
    int v16 = dword_1EA8DA8E8;
    uint64_t v17 = *(void *)(a1 + 160);
    uint64_t v18 = *a3;
    uint64_t v19 = *a4;
    int v20 = *(__int16 **)(a1 + 104);
    unint64_t v21 = *(void *)(a1 + 120);
    uint64_t v22 = *(void *)(a1 + 208);
    int v23 = *(_DWORD *)(a1 + 196);
    uint64_t v24 = *(void *)(a1 + 232);
    int v25 = *(_DWORD *)(a1 + 220);
    uint64_t v26 = *(void *)(a1 + 40);
    do
    {
      uint64_t v27 = *(unsigned __int16 *)(v17 + 2 * v15);
      __int16 v28 = *v20;
      if (v21)
      {
        unint64_t v29 = 0;
        int v30 = *(_DWORD *)(v18 + 8 * v27);
        if ((*(unsigned char *)(v19 + v27) & 0x40) != 0) {
          float v31 = *(float *)&v16;
        }
        else {
          float v31 = -0.0;
        }
        float v32 = 3.4028e38;
        float v33 = 3.4028e38;
        do
        {
          unint64_t v34 = (unsigned __int16)v20[v29];
          float v35 = *(float *)(*(void *)(a1 + 152) + 4 * *(_DWORD *)(a1 + 140) * (int)v34);
          if (v35 >= v33) {
            break;
          }
          uint64_t v36 = *(void *)(a1 + 520);
          unint64_t v37 = *(void *)(v36 + 8);
          if (v37 >= v34)
          {
            float v39 = *(unsigned __int8 **)(a1 + 520);
            LODWORD(v38) = (unsigned __int16)v20[v29];
          }
          else
          {
            unint64_t v38 = (unsigned __int16)v20[v29];
            do
            {
              v38 -= v37;
              float v39 = (unsigned __int8 *)(v36 + 144);
              unint64_t v37 = *(void *)(v36 + 152);
              v36 += 144;
            }
            while (v38 > v37);
          }
          int v40 = *v39;
          int v41 = v39[1];
          float v42 = 0.0;
          if ((bswap32(v38) & 0xFFFF0000 | (v41 << 8) | v40) != v30)
          {
            if (v41 == BYTE1(v30)) {
              float v43 = -0.0;
            }
            else {
              float v43 = *(float *)&v12;
            }
            float v44 = (float)(v11 + 0.0) + v43;
            if (v40 == v30) {
              float v45 = -0.0;
            }
            else {
              float v45 = *(float *)&v13;
            }
            float v42 = v31 + (float)(v45 + v44);
          }
          float v46 = v35 + v42;
          if (v46 < v33)
          {
            float v33 = v46;
            float v32 = v42;
            __int16 v28 = v20[v29];
          }
          ++v29;
        }
        while (v29 < v21);
      }
      else
      {
        float v33 = 3.4028e38;
        float v32 = 3.4028e38;
      }
      *(float *)(v22 + 4 * v23 * (int)v27) = v33;
      *(float *)(v24 + 4 * v25 * (int)v27) = v32;
      *(_WORD *)(v26 + 2 * (v8 + v27)) = v28;
      ++v15;
    }
    while (v15 != v14);
  }
}

unint64_t MEOWSearchLatticeImpl::Word2Null(uint64_t a1, float a2, uint64_t a3, float *a4, uint64_t *a5)
{
  if (kWordContextSubst)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordContextSubst, (const __CFString *)&dword_1EA8DA8D8, a4, *(float *)&dword_1EA8DA8D8);
    kWordContextSubst = 0;
  }
  float v9 = *(float *)&dword_1EA8DA8D8;
  if (kWordKeepWithNext)
  {
    MTBEDebugParams::GetParam((const __CFString *)kWordKeepWithNext, (const __CFString *)&dword_1EA8DA8A8, a4, *(float *)&dword_1EA8DA8A8);
    kWordKeepWithNext = 0;
  }
  int v10 = dword_1EA8DA8A8;
  unint64_t result = (unint64_t)MEOWPhon::Match(0);
  uint64_t v12 = *(void *)(a1 + 176);
  if (v12)
  {
    uint64_t v13 = *(void *)result;
    uint64_t v14 = *(unsigned __int16 **)(a1 + 160);
    uint64_t v15 = *(void *)a4;
    uint64_t v16 = *a5;
    uint64_t v17 = *(void *)(a1 + 208);
    int v18 = *(_DWORD *)(a1 + 196);
    uint64_t v19 = *(void *)(a1 + 232);
    int v20 = *(_DWORD *)(a1 + 220);
    do
    {
      unsigned int v22 = *v14++;
      uint64_t v21 = v22;
      int v23 = *(_DWORD *)(v15 + 8 * v22 + 4);
      float v24 = 0.0;
      if (BYTE1(v23))
      {
        int v25 = *(char *)(v13 + 51 * SBYTE1(v23));
        if (*(char *)(v16 + v21) >= 0) {
          float v26 = -0.0;
        }
        else {
          float v26 = *(float *)&v10;
        }
        float v24 = v26 + (float)((float)(a2 + (float)(v9 * (float)v25)) + 0.0);
      }
      *(float *)(v17 + 4 * v18 * (int)v2MEOWVectorBase::~MEOWVectorBase(this + 1) = v24 + *(float *)(v17 + 4 * v18 * (int)v21);
      unint64_t result = (v20 * v21);
      *(float *)(v19 + 4 * (int)result) = v24 + *(float *)(v19 + 4 * (int)result);
      --v12;
    }
    while (v12);
  }
  return result;
}

void MEOWSearchLatticeLookahead::MEOWSearchLatticeLookahead(MEOWSearchLatticeLookahead *this, MEOWReader *a2)
{
}

void sub_1DA4E4B14(_Unwind_Exception *a1)
{
  MEOWSearchLatticeImpl::~MEOWSearchLatticeImpl(v1);
  _Unwind_Resume(a1);
}

__n128 MEOWSearchLatticeLookahead::AddWordSlice(MEOWSearchLatticeLookahead *this, const MEOWWordSliceInfo *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 135))
  {
    __s[0] = 0;
    if (*((_DWORD *)this + 6) == 6)
    {
      MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v9, 8);
      MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)v8, 1);
      MEOWReader::GetWordDescriptor(*((void *)this + 1), (const char **)a2, v10);
      MEOWReader::GetWordData(*((void *)this + 1), v10, (MEOWVectorBase *)v9, v8);
      v7[0] = (char *)v9[0] + 1;
      v7[1] = 8;
      void v7[2] = v9[2];
      MEOWDemiSliceInfo::PhonemeSet::AddPhonemes(__s, v7);
      MEOWVectorBase::~MEOWVectorBase(v8);
      MEOWVectorBase::~MEOWVectorBase(v9);
    }
    MEOWSearchLatticeLookahead::DispatchCurrentSlice((uint64_t)this, __s);
  }
  *((_DWORD *)this + 13MEOWVectorBase::clear(this + 5) = 6;
  __n128 result = *(__n128 *)a2;
  long long v5 = *((_OWORD *)a2 + 1);
  long long v6 = *((_OWORD *)a2 + 2);
  *(_OWORD *)((char *)this + 69MEOWVectorBase::clear(this + 9) = *(_OWORD *)((char *)a2 + 43);
  *((_OWORD *)this + 4MEOWVectorBase::~MEOWVectorBase(this + 2) = v5;
  *((_OWORD *)this + 43) = v6;
  *((__n128 *)this + 4MEOWVectorBase::~MEOWVectorBase(this + 1) = result;
  return result;
}

void sub_1DA4E4C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEOWVectorBase::~MEOWVectorBase((void **)va);
  _Unwind_Resume(a1);
}

void MEOWSearchLatticeLookahead::DispatchCurrentSlice(uint64_t a1, unsigned __int8 *a2)
{
  switch(*(_DWORD *)(a1 + 540))
  {
    case 1:
      MEOWSearchLatticeImpl::AddDiphoneSlice(a1, (unsigned __int8 *)(a1 + 544), a2);
    case 2:
      MEOWSearchLatticeImpl::AddBreathDiphoneSlice(a1, (unsigned __int8 *)(a1 + 544));
    case 3:
      MEOWSearchLatticeImpl::AddDemiSlice(a1, a1 + 584, a2);
    case 4:
      MEOWSearchLatticeImpl::AddBreathDemiSlice(a1, a1 + 584);
    case 5:
      MEOWSearchLatticeImpl::AddAnchorSlice(a1, (unsigned int *)(a1 + 648));
      break;
    case 6:
      MEOWSearchLatticeImpl::AddWordSlice(a1, a1 + 656, a2);
    default:
      fwrite("What am I doing here?\n", 0x16uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      MTBEAbort(*(MTFESpeechElement **)(a1 + 16));
      break;
  }
  if (*(void *)(a1 + 736))
  {
    uint64_t v3 = *(uint64_t **)(a1 + 720);
    do
    {
      uint64_t v4 = *v3++;
      MEOWSearchLatticeImpl::Veto(a1, v4);
    }
    while (v3 != (uint64_t *)(*(void *)(a1 + 720) + 8 * *(void *)(a1 + 736)));
  }
  MEOWVectorBase::clear((void **)(a1 + 720));
  unint64_t v5 = *(void *)(a1 + 752);
  if (v5 != 0xFFFFFFFF)
  {
    MEOWSearchLatticeImpl::Force(a1, v5);
    *(void *)(a1 + 75MEOWVectorBase::~MEOWVectorBase(this + 2) = 0xFFFFFFFFLL;
  }
  unint64_t v6 = *(void *)(a1 + 760);
  if (v6 != 0xFFFFFFFF)
  {
    MEOWSearchLatticeImpl::Override(a1, v6);
    *(void *)(a1 + 760) = 0xFFFFFFFFLL;
  }
}

__n128 MEOWSearchLatticeLookahead::AddDiphoneSlice(__n128 *this, __n128 *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this[33].n128_u32[3])
  {
    unsigned __int8 v4 = a2->n128_u8[1];
    v7[0] = 1;
    v7[1] = v4;
    MEOWSearchLatticeLookahead::DispatchCurrentSlice((uint64_t)this, v7);
  }
  this[33].n128_u32[3] = 1;
  __n128 result = *a2;
  __n128 v6 = a2[1];
  this[36].n128_u16[0] = a2[2].n128_u16[0];
  this[34] = result;
  this[35] = v6;
  return result;
}

__n128 MEOWSearchLatticeLookahead::AddBreathDiphoneSlice(__n128 *this, __n128 *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this[33].n128_u32[3])
  {
    unsigned __int8 v4 = a2->n128_u8[1];
    v7[0] = 1;
    v7[1] = v4;
    MEOWSearchLatticeLookahead::DispatchCurrentSlice((uint64_t)this, v7);
  }
  this[33].n128_u32[3] = 2;
  __n128 result = *a2;
  __n128 v6 = a2[1];
  this[36].n128_u16[0] = a2[2].n128_u16[0];
  this[34] = result;
  this[35] = v6;
  return result;
}

__n128 MEOWSearchLatticeLookahead::AddDemiSlice(MEOWSearchLatticeLookahead *this, const MEOWDemiSliceInfo *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 135))
  {
    __s[0] = 0;
    uint64_t v4 = *((void *)a2 + 5);
    v8[0] = *((void *)a2 + 6) + 1;
    v8[1] = 144;
    v8[2] = v4;
    MEOWDemiSliceInfo::PhonemeSet::AddPhonemes(__s, v8);
    MEOWSearchLatticeLookahead::DispatchCurrentSlice((uint64_t)this, __s);
  }
  *((_DWORD *)this + 13MEOWVectorBase::clear(this + 5) = 3;
  __n128 result = *(__n128 *)a2;
  long long v6 = *((_OWORD *)a2 + 1);
  long long v7 = *((_OWORD *)a2 + 2);
  *(_OWORD *)((char *)this + 62MEOWVectorBase::clear(this + 5) = *(_OWORD *)((char *)a2 + 41);
  *(_OWORD *)((char *)this + 600) = v6;
  *(_OWORD *)((char *)this + 616) = v7;
  *(__n128 *)((char *)this + 58MEOWVectorBase::clear(this + 4) = result;
  return result;
}

__n128 MEOWSearchLatticeLookahead::AddBreathDemiSlice(MEOWSearchLatticeLookahead *this, const MEOWDemiSliceInfo *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 135))
  {
    v7[0] = 0;
    MEOWSearchLatticeLookahead::DispatchCurrentSlice((uint64_t)this, v7);
  }
  *((_DWORD *)this + 13MEOWVectorBase::clear(this + 5) = 4;
  __n128 result = *(__n128 *)a2;
  long long v5 = *((_OWORD *)a2 + 1);
  long long v6 = *((_OWORD *)a2 + 2);
  *(_OWORD *)((char *)this + 62MEOWVectorBase::clear(this + 5) = *(_OWORD *)((char *)a2 + 41);
  *(_OWORD *)((char *)this + 600) = v5;
  *(_OWORD *)((char *)this + 616) = v6;
  *(__n128 *)((char *)this + 58MEOWVectorBase::clear(this + 4) = result;
  return result;
}

void MEOWSearchLatticeLookahead::AddAnchorSlice(MEOWSearchLatticeLookahead *this, const MEOWAnchorSliceInfo *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 135))
  {
    unsigned __int8 v4 = *((unsigned char *)a2 + 1);
    v5[0] = 1;
    v5[1] = v4;
    MEOWSearchLatticeLookahead::DispatchCurrentSlice((uint64_t)this, v5);
  }
  *((_DWORD *)this + 13MEOWVectorBase::clear(this + 5) = 5;
  *((_DWORD *)this + 16MEOWVectorBase::~MEOWVectorBase(this + 2) = *(_DWORD *)a2;
}

uint64_t MEOWSearchLatticeLookahead::AddSilenceSlice(MEOWSearchLatticeLookahead *this)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 135))
  {
    v3[0] = 1;
    MEOWSearchLatticeLookahead::DispatchCurrentSlice((uint64_t)this, (unsigned __int8 *)v3);
  }
  *((_DWORD *)this + 13MEOWVectorBase::clear(this + 5) = 0;
  LOBYTE(v3[0]) = 0;
  return MEOWSearchLatticeImpl::AddSilenceSlice((uint64_t)this);
}

uint64_t MEOWSearchLatticeLookahead::Force(uint64_t this, uint64_t a2)
{
  *(void *)(this + 75MEOWVectorBase::~MEOWVectorBase(this + 2) = a2;
  return this;
}

uint64_t MEOWSearchLatticeLookahead::Override(uint64_t this, uint64_t a2)
{
  *(void *)(this + 760) = a2;
  return this;
}

void *MEOWSearchLatticeLookahead::Veto(MEOWSearchLatticeLookahead *this, uint64_t a2)
{
  __n128 result = MEOWVectorBase::Append((void *)this + 90);
  *(void *)(*((void *)this + 90) + 8 * *((void *)this + 92) - 8) = a2;
  return result;
}

uint64_t MEOWSearchLatticeLookahead::BestPath(MEOWSearchLatticeLookahead *this)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 135))
  {
    v3[0] = 0;
    MEOWSearchLatticeLookahead::DispatchCurrentSlice((uint64_t)this, v3);
    *((_DWORD *)this + 13MEOWVectorBase::clear(this + 5) = 0;
  }
  return MEOWSearchLatticeImpl::BestPath(this);
}

uint64_t MEOWSearchLatticeLookahead::size(MEOWSearchLatticeLookahead *this)
{
  uint64_t result = MEOWSearchLatticeImpl::size(this);
  if (*((_DWORD *)this + 135)) {
    ++result;
  }
  return result;
}

void MEOWSearchLatticeLookahead::clear(MEOWSearchLatticeLookahead *this)
{
  *((_DWORD *)this + 13MEOWVectorBase::clear(this + 5) = 0;
  MEOWVectorBase::clear((void **)this + 90);
  *((void *)this + 9MEOWVectorBase::clear(this + 4) = 0xFFFFFFFFLL;

  MEOWSearchLatticeImpl::clear((void **)this);
}

void MEOWSearchLatticeLookahead::~MEOWSearchLatticeLookahead(void **this)
{
  *this = &unk_1F3480E38;
  MEOWVectorBase::~MEOWVectorBase(this + 90);

  MEOWSearchLatticeImpl::~MEOWSearchLatticeImpl((MEOWSearchLatticeImpl *)this);
}

{
  uint64_t vars8;

  *this = &unk_1F3480E38;
  MEOWVectorBase::~MEOWVectorBase(this + 90);
  MEOWSearchLatticeImpl::~MEOWSearchLatticeImpl((MEOWSearchLatticeImpl *)this);

  JUMPOUT(0x1E016FF00);
}

CFDictionaryRef GetCoeffValue(const __CFDictionary *a1, const __CFString *a2)
{
  CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    CFDictionaryRef v3 = result;
    CFTypeID v4 = CFGetTypeID(result);
    if (v4 == CFNumberGetTypeID())
    {
      return v3;
    }
    else if (v4 == CFDictionaryGetTypeID())
    {
      CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v3, @"Value");
      if (!result)
      {
        return (const __CFDictionary *)CFDictionaryGetValue(v3, @"Default");
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t SetFloatCoeff(const __CFDictionary *a1, const __CFString *a2, float *a3)
{
  CoeffCFStringRef Value = GetCoeffValue(a1, a2);
  double valuePtr = 0.0;
  if (CoeffValue && (uint64_t result = CFNumberGetValue(CoeffValue, kCFNumberDoubleType, &valuePtr), result))
  {
    float v7 = valuePtr;
    *a3 = v7;
  }
  else
  {
    uint64_t v8 = (FILE *)*MEMORY[0x1E4F143C8];
    CStringPtr = CFStringGetCStringPtr(a2, 0);
    return fprintf(v8, "Cannot read real number %s from plist.\n", CStringPtr);
  }
  return result;
}

uint64_t SetIntCoeff(const __CFDictionary *a1, const __CFString *a2, int *a3)
{
  CoeffCFStringRef Value = GetCoeffValue(a1, a2);
  int valuePtr = 0;
  if (CoeffValue && (uint64_t result = CFNumberGetValue(CoeffValue, kCFNumberIntType, &valuePtr), result))
  {
    *a3 = valuePtr;
  }
  else
  {
    float v7 = (FILE *)*MEMORY[0x1E4F143C8];
    CStringPtr = CFStringGetCStringPtr(a2, 0);
    return fprintf(v7, "Cannot read integer %s from plist.\n", CStringPtr);
  }
  return result;
}

void MTFELogVisitor::MTFELogVisitor(MTFELogVisitor *this)
{
  *((void *)this + MEOWVectorBase::~MEOWVectorBase(this + 1) = 0;
  *((void *)this + MEOWVectorBase::~MEOWVectorBase(this + 2) = 0;
  *(void *)this = &unk_1F3480EF8;
}

{
  *((void *)this + MEOWVectorBase::~MEOWVectorBase(this + 1) = 0;
  *((void *)this + MEOWVectorBase::~MEOWVectorBase(this + 2) = 0;
  *(void *)this = &unk_1F3480EF8;
}

void MTFELogVisitor::~MTFELogVisitor(MTFELogVisitor *this)
{
  *(void *)this = &unk_1F3480EF8;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  MTFESpeechVisitor::~MTFESpeechVisitor(this);
}

{
  uint64_t vars8;

  MTFELogVisitor::~MTFELogVisitor(this);

  JUMPOUT(0x1E016FF00);
}

void MTFELogVisitor::VisitSentence(MTFELogVisitor *this, MTFESentence *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t, MTFESentence *))(*(void *)v2 + 8))(v2, a2);
  }
  operator new();
}

void sub_1DA4E5660(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C401FA53C8BLL);
  _Unwind_Resume(a1);
}

void SpeechElementLog::SpeechElementLog(SpeechElementLog *this)
{
  *((void *)this + MEOWVectorBase::~MEOWVectorBase(this + 1) = (char *)this + 8;
  *((void *)this + MEOWVectorBase::~MEOWVectorBase(this + 2) = (char *)this + 8;
  *((void *)this + 3) = 0;
  *((void *)this + MEOWVectorBase::clear(this + 4) = 0;
  *(void *)this = &unk_1F3480F80;
  *((void *)this + MEOWVectorBase::clear(this + 5) = &unk_1F3480FB0;
  *((void *)this + 6) = &unk_1F3480FD0;
  *((void *)this + 7) = &unk_1F3480FF8;
}

void SentenceLog::SentenceLog(SentenceLog *this)
{
  *((void *)this + MEOWVectorBase::~MEOWVectorBase(this + 1) = (char *)this + 8;
  *((void *)this + MEOWVectorBase::~MEOWVectorBase(this + 2) = (char *)this + 8;
  *((void *)this + 3) = 0;
  *((void *)this + MEOWVectorBase::clear(this + 4) = 0;
  *(void *)this = &unk_1F3481020;
  *((void *)this + MEOWVectorBase::clear(this + 5) = &unk_1F3481058;
  *((void *)this + 6) = &unk_1F3481078;
  *((void *)this + 7) = &unk_1F34810A0;
}

{
  *((void *)this + MEOWVectorBase::~MEOWVectorBase(this + 1) = (char *)this + 8;
  *((void *)this + MEOWVectorBase::~MEOWVectorBase(this + 2) = (char *)this + 8;
  *((void *)this + 3) = 0;
  *((void *)this + MEOWVectorBase::clear(this + 4) = 0;
  *(void *)this = &unk_1F3481020;
  *((void *)this + MEOWVectorBase::clear(this + 5) = &unk_1F3481058;
  *((void *)this + 6) = &unk_1F3481078;
  *((void *)this + 7) = &unk_1F34810A0;
}

void SentenceLog::NonRecursiveClone(SentenceLog *this)
{
}

void SentenceLog::~SentenceLog(SentenceLog *this)
{
  MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement(this);

  JUMPOUT(0x1E016FF00);
}

uint64_t MiniToolbox::CompositeElement<SpeechElementLog,MiniToolbox::CompositeElementNonComparable,MiniToolbox::Clonable,std::list>::Clone(void *a1)
{
  uint64_t v2 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  CFDictionaryRef v3 = a1 + 1;
  uint64_t v4 = a1[2];
  uint64_t v9 = v4;
  if ((void *)v4 != a1 + 1)
  {
    do
    {
      uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(v4 + 16) + 16))(*(void *)(v4 + 16));
      *(void *)(v5 + 3MEOWVectorBase::~MEOWVectorBase(this + 2) = v2;
      uint64_t v6 = operator new(0x18uLL);
      v6[1] = v2 + 8;
      v6[2] = v5;
      uint64_t v7 = *(void *)(v2 + 8);
      *uint64_t v6 = v7;
      *(void *)(v7 + 8) = v6;
      *(void *)(v2 + 8) = v6;
      ++*(void *)(v2 + 24);
      uint64_t v4 = *(void *)(v9 + 8);
      uint64_t v9 = v4;
    }
    while ((void *)v4 != v3);
  }
  return v2;
}

void non-virtual thunk to'SentenceLog::~SentenceLog(SentenceLog *this)
{
}

{
  uint64_t vars8;

  MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement((void *)this - 5);

  JUMPOUT(0x1E016FF00);
}

{
  MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement((void *)this - 6);
}

{
  uint64_t vars8;

  MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement((void *)this - 6);

  JUMPOUT(0x1E016FF00);
}

{
  MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement((void *)this - 7);
}

{
  uint64_t vars8;

  MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement((void *)this - 7);

  JUMPOUT(0x1E016FF00);
}

uint64_t non-virtual thunk to'MiniToolbox::CompositeElement<SpeechElementLog,MiniToolbox::CompositeElementNonComparable,MiniToolbox::Clonable,std::list>::Clone(uint64_t a1)
{
  return MiniToolbox::CompositeElement<SpeechElementLog,MiniToolbox::CompositeElementNonComparable,MiniToolbox::Clonable,std::list>::Clone((void *)(a1 - 48));
}

uint64_t (***non-virtual thunk to'SentenceLog::Accept(int a1, void *a2))(void)
{
  return MiniToolbox::BaseVisitable<void>::AcceptImpl<SentenceLog>(a1 - 56, a2);
}

void MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement(void *a1)
{
  MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement(a1);

  JUMPOUT(0x1E016FF00);
}

void *MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement(void *a1)
{
  *a1 = &unk_1F34811B8;
  MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::DeleteAllChildren((uint64_t)a1);
  std::__list_imp<SpeechChannelManager *>::clear(a1 + 1);
  return a1;
}

void *MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::DeleteAllChildren(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  for (unint64_t i = *(void **)(a1 + 16); i != v1; unint64_t i = (void *)i[1])
  {
    uint64_t v3 = i[2];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }

  return std::__list_imp<SpeechChannelManager *>::clear(v1);
}

uint64_t (***MiniToolbox::BaseVisitable<void>::AcceptImpl<SentenceLog>(int a1, void *lpsrc))(void)
{
  if (result)
  {
    uint64_t v3 = **result;
    return (uint64_t (***)(void))v3();
  }
  return result;
}

void MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::const_child_iterator::~const_child_iterator()
{
}

MTFESpeechElement *MTFEPlaceBoundaries::VisitIntonationalPhrase(MTFESpeechElement *this, MTFESpeechElement *a2)
{
  if (!BYTE4(a2[2].var6) && !a2[3].var6)
  {
    uint64_t v3 = this;
    this->var6 = 0;
    *(_OWORD *)&this->var4 = 0u;
    *(_OWORD *)&this->uint64_t var1 = 0u;
    LOBYTE(this[1].varMiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement((void *)this - 5) = 1;
    MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);
    LOBYTE(v3[1].varMiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement((void *)this - 5) = 0;
    *(_OWORD *)&v3->uint64_t var1 = 0u;
    *(_OWORD *)&v3->var4 = 0u;
    v3->var6 = 0;
    return MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)v3);
  }
  return this;
}

MTFESpeechElement *MTFEPlaceBoundaries::VisitIntermediatePhrase(MTFEPlaceBoundaries *this, MTFESpeechElement *a2)
{
  uint64_t v2 = a2;
  *((void *)this + 13) = a2;
  do
  {
    *((unsigned char *)this + 8MEOWVectorBase::clear(this + 9) = 0;
    *((void *)this + 1MEOWVectorBase::~MEOWVectorBase(this + 2) = 0;
    *((void *)this + 3) = 0;
    *((void *)this + 10) = 0;
    uint64_t result = MTFESpeechElement::VisitChildren(v2, this);
    BOOL v5 = v2 == *((MTFESpeechElement **)this + 13);
    uint64_t v2 = (MTFESpeechElement *)*((void *)this + 13);
  }
  while (!v5);
  return result;
}

void MTFEPlaceBoundaries::VisitWord(MTFEPlaceBoundaries *this, MTFEWord *a2)
{
  MTFECommands::Visit((uint64_t)&a2->var18, (uint64_t)this);
  if (a2->var12 == 60)
  {
    uint64_t v4 = 0;
    unint64_t v113 = 0;
LABEL_4:
    Word = MTFEWord::NextWord(a2);
    goto LABEL_5;
  }
  uint64_t v4 = MTFEWord::PrevWord(a2);
  Word = 0;
  int var12 = a2->var12;
  unint64_t v113 = 0;
  if (var12 != 62) {
    goto LABEL_4;
  }
LABEL_5:
  uint64_t v111 = 0;
  unint64_t v112 = 0;
  uint64_t var15 = a2->var15;
  unsigned __int8 v110 = -1;
  unsigned __int8 v109 = -1;
  unsigned __int8 v108 = -1;
  unsigned __int8 v107 = -1;
  unsigned __int8 v106 = -1;
  if (v4)
  {
    MTFEWord::POSForPrev((MTFEWord *)v4, &v110, 0, &v113);
    if (v113) {
      MTFEWord::POSForPrev(v113, &v109, 0, 0);
    }
  }
  if (Word) {
    MTFEWord::POSForNext((MTFEWord *)Word, &v108, 0, &v112);
  }
  if (v112) {
    MTFEWord::POSForNext(v112, &v107, 0, &v111);
  }
  if (v111) {
    MTFEWord::POSForNext(v111, &v106, 0, 0);
  }
  int v8 = 1 << var15;
  int v9 = v110;
  if (v110 == 255) {
    char v10 = 0;
  }
  else {
    char v10 = 1 << v110;
  }
  if (v4 && (v8 & 0x41) != 0)
  {
    if ((v10 & 0x41) != 0)
    {
LABEL_25:
      int v11 = 1;
      goto LABEL_26;
    }
    if ((v8 & 0x413E) == 0) {
      goto LABEL_31;
    }
  }
  else if (!v4 || (v8 & 0x413E) == 0)
  {
    goto LABEL_31;
  }
  if (v110 == 14) {
    goto LABEL_25;
  }
LABEL_31:
  int v11 = 0;
  if (!v4 || var15 != 5)
  {
LABEL_26:
    if (var15 == 11 && strchr(a2->var27, 39))
    {
      if (a2->var11)
      {
        if (!Word) {
          goto LABEL_39;
        }
      }
      else
      {
        a2->uint64_t var11 = 2;
        if (!Word) {
          goto LABEL_39;
        }
      }
      if (!HIBYTE(Word[1].var0))
      {
        HIBYTE(Word[1].var0) = 2;
        if ((v11 & 1) == 0) {
          goto LABEL_40;
        }
        goto LABEL_34;
      }
    }
LABEL_39:
    if (!v11) {
      goto LABEL_40;
    }
LABEL_34:
    if (*((unsigned char *)this + 88))
    {
      BOOL v12 = 1;
    }
    else
    {
      unint64_t v13 = *((void *)this + 10) + 1;
      *((void *)this + 10) = v13;
      BOOL v12 = v13 < 0xA;
    }
    goto LABEL_41;
  }
  if ((v10 & 0x30) != 0) {
    goto LABEL_34;
  }
LABEL_40:
  BOOL v12 = 0;
  *((void *)this + 10) = 0;
LABEL_41:
  if (*((unsigned char *)this + 89))
  {
    if (Word)
    {
      unint64_t v14 = *((void *)this + 1);
      if (v14 >= 2
        && ((v12 | (((uint64_t)Word[1].var0 & 0x40) >> 6)) & 1) == 0
        && ((a2->var8 & 0x40) == 0 || a2->var6)
        && (!v4 || HIBYTE(v4[1].var0) <= 2u)
        && a2->var11 - 1 >= 2)
      {
        if ((v10 & 0x3E) != 0)
        {
          if (SLWordTagSet::find(&a2->var17)) {
            goto LABEL_63;
          }
          unint64_t v14 = *((void *)this + 1);
          int v9 = v110;
        }
        *((void *)this + 6) = *((void *)this + 2);
        *((void *)this + 7) = v14;
        *((_OWORD *)this + MEOWVectorBase::clear(this + 4) = *((_OWORD *)this + 2);
        *((void *)this + 1MEOWVectorBase::~MEOWVectorBase(this + 2) = a2;
        if (*((unsigned char *)this + 88)) {
          BOOL v15 = v9 == 14;
        }
        else {
          BOOL v15 = 0;
        }
        char v17 = v15 && var15 == 4;
        *((unsigned char *)this + 90) = v17;
      }
    }
  }
LABEL_63:
  if ((a2->var8 & 0x40) == 0)
  {
    if (!*((void *)this + 4))
    {
      *((void *)this + MEOWVectorBase::clear(this + 4) = 1;
      int v18 = (MTFESpeechElement *)a2;
      do
      {
        if (((uint64_t)v18[1].var0 & 0x40) != 0) {
          break;
        }
        ++*((void *)this + 4);
        int v18 = MTFEWord::NextWord((MTFEWord *)v18);
      }
      while (v18);
    }
    uint64_t v19 = *((void *)this + 5);
    if (!v19)
    {
      uint64_t v19 = 1;
      *((void *)this + MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement((void *)this - 5) = 1;
      if (a2)
      {
        int v20 = (MTFESpeechElement *)a2;
        do
        {
          if (((uint64_t)v20[1].var0 & 0x40) != 0 && BYTE6(v20[1].var4) == 31) {
            break;
          }
          ++*((void *)this + 5);
          int v20 = MTFEWord::NextWord((MTFEWord *)v20);
        }
        while (v20);
        uint64_t v19 = *((void *)this + 5);
      }
    }
    *(int64x2_t *)((char *)this + 8) = vaddq_s64(*(int64x2_t *)((char *)this + 8), vdupq_n_s64(1uLL));
    *(int64x2_t *)((char *)this + --*(_WORD *)(this + 24) = vaddq_s64(*(int64x2_t *)((char *)this + 24), (int64x2_t)xmmword_1DA501570);
    *((void *)this + MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement((void *)this - 5) = v19 - 1;
    if (var15 == 255)
    {
      unsigned int v21 = 0xBu;
      if (!v4) {
        goto LABEL_87;
      }
    }
    else
    {
      unsigned int v21 = MTFEPlaceBoundaries::sPos2Class[var15];
      if (!v4) {
        goto LABEL_87;
      }
    }
    if (((uint64_t)v4[1].var0 & 0x40) == 0)
    {
      if (v110 == 255) {
        unsigned int v22 = 0xBu;
      }
      else {
        unsigned int v22 = MTFEPlaceBoundaries::sPos2Class[v110];
      }
LABEL_88:
      if (!v113 || (v113->var8 & 0x40) != 0)
      {
        unsigned int v23 = 0xCu;
        if (!Word) {
          goto LABEL_101;
        }
      }
      else if (v109 == 255)
      {
        unsigned int v23 = 0xBu;
        if (!Word) {
          goto LABEL_101;
        }
      }
      else
      {
        unsigned int v23 = MTFEPlaceBoundaries::sPos2Class[v109];
        if (!Word) {
          goto LABEL_101;
        }
      }
      if (((uint64_t)Word[1].var0 & 0x40) == 0)
      {
        if (v108 == 255) {
          unsigned int v24 = 0xBu;
        }
        else {
          unsigned int v24 = MTFEPlaceBoundaries::sPos2Class[v108];
        }
LABEL_102:
        if (!v112 || (v112->var8 & 0x40) != 0)
        {
          unsigned int v25 = 0xCu;
        }
        else if (v107 == 255)
        {
          unsigned int v25 = 0xBu;
        }
        else
        {
          unsigned int v25 = MTFEPlaceBoundaries::sPos2Class[v107];
        }
        if (!v111 || (v111->var8 & 0x40) != 0)
        {
          unsigned int v26 = 0xCu;
        }
        else if (v106 == 255)
        {
          unsigned int v26 = 0xBu;
        }
        else
        {
          unsigned int v26 = MTFEPlaceBoundaries::sPos2Class[v106];
        }
        unsigned int v27 = MTFEPlaceBoundaries::sC2CD[v21];
        unsigned int v28 = MTFEPlaceBoundaries::sC2CC[v21];
        uint64_t v29 = MTFEPlaceBoundaries::sC2CP[v21];
        unsigned int v103 = MTFEPlaceBoundaries::sC2L2[v23];
        uint64_t v30 = MTFEPlaceBoundaries::sC2LR[v22];
        uint64_t v31 = MTFEPlaceBoundaries::sC2LR[v24];
        int v104 = MTFEPlaceBoundaries::sC2LR[v25];
        uint64_t v105 = MTFEPlaceBoundaries::sC2LR[v26];
        uint64_t v102 = MTFEPlaceBoundaries::sC2RD[v24];
        if (Word && v108 == 7)
        {
          BOOL v32 = 0;
          BOOL v33 = strcmp((const char *)&Word[3].var5, "OF") == 0;
        }
        else
        {
          BOOL v33 = 0;
          BOOL v32 = 0;
          if (Word && v108 == 15)
          {
            BOOL v33 = 0;
            BOOL v32 = strcmp((const char *)&Word[3].var5, "TO") == 0;
          }
        }
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "\nBnd after %s\n", a2->var27);
        }
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
          fwrite("Bnd", 3uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        }
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], " %s=%d", "l2", v103);
        }
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], " %s=%d", "lp", v30);
        }
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], " %s=%d", "cd", v27);
        }
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], " %s=%d", "cc", v28);
        }
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], " %s=%d", "cp", v29);
        }
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], " %s=%d", "rd", v102);
        }
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], " %s=%d", "rp", v31);
        }
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], " %s=%d", "r2", v104);
        }
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], " %s=%d", "r3", v105);
        }
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], " %s=%d", "fFromStart", *((void *)this + 2));
        }
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], " %s=%d", "fFromLastSIL", *((void *)this + 1));
        }
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], " %s=%d", "fFromLastBnd", *((void *)this + 3));
        }
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], " %s=%d", "fToNextSIL", *((void *)this + 4));
        }
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], " %s=%d", "fToNextPunct", *((void *)this + 5));
        }
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], " %s=%d", "genitiveContext", v33);
        }
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], " %s=%d", "infinitiveContext", v32);
        }
        if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
          fputc(10, (FILE *)*MEMORY[0x1E4F143C8]);
        }
        int v34 = *((unsigned __int8 *)this + 89);
        if (*((unsigned char *)this + 88))
        {
          float v35 = (float)*((int *)this + 2);
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "Bnd %7.3f [%s]\n", 1.0644, "sSilCoeffs.fIntercept");
          }
          float v36 = 1.0;
          if (!v34) {
            float v36 = v35;
          }
          float v37 = floorf(logf(v36) / 0.47);
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "Bnd %7.3f [%s]\n", (float)(v37 * 0.25655), "sSilCoeffs.fFromLastSilWrds*XFormWordCount(fromLastSIL)");
          }
          float v38 = (float)(0.0 + 1.0644) + (float)(0.25655 * v37);
          float v39 = floorf(logf((float)*((unint64_t *)this + 5)) / 0.47);
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
          {
            int v40 = (FILE *)*MEMORY[0x1E4F143C8];
            float v41 = logf((float)*((unint64_t *)this + 5));
            fprintf(v40, "Bnd %7.3f [%s]\n", (float)(-0.14236 * floorf(v41 / 0.47)), "sSilCoeffs.fFromEndPunctWrds*XFormWordCount(fToNextPunct)");
          }
          float v42 = (float)v33;
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "Bnd %7.3f [%s]\n", (float)(-0.64336 * v42), "sSilCoeffs.fGenitiveContextBit*genitiveContext");
          }
          float v43 = (float)(v38 + (float)(-0.14236 * v39)) + (float)(-0.64336 * v42);
          float v44 = (float)v32;
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "Bnd %7.3f [%s]\n", (float)(-0.47091 * v44), "sSilCoeffs.fInfinitiveContextBit*infinitiveContext");
          }
          float v45 = v43 + (float)(-0.47091 * v44);
          float v46 = &MTFEPlaceBoundaries::sSilCoeffs[3 * v27 + v31];
          float v48 = *((float *)v46 + 5);
          char v47 = (float *)(v46 + 5);
          float v49 = v48;
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "Bnd %7.3f [%s]\n", *v47, "sSilCoeffs.fCurDet_RightPos[cd][rp]");
          }
          float v50 = v45 + v49;
          float v51 = &MTFEPlaceBoundaries::sSilCoeffs[11 * v28 + v102];
          float v53 = *((float *)v51 + 26);
          uint64_t v52 = (float *)(v51 + 26);
          float v54 = v53;
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "Bnd %7.3f [%s]\n", *v52, "sSilCoeffs.fCurCrs_RightDet[cc][rd]");
          }
          float v55 = v50 + v54;
          uint64_t v56 = &MTFEPlaceBoundaries::sSilCoeffs[6 * v103 + 2 * v30 + v29];
          float v58 = *((float *)v56 + 59);
          uint64_t v57 = (float *)(v56 + 59);
          float v59 = v58;
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "Bnd %7.3f [%s]\n", *v57, "sSilCoeffs.fLeft2Pos_LeftPos_CurPos[l2][lp][cp]");
          }
          float v60 = v55 + v59;
          uint64_t v61 = &MTFEPlaceBoundaries::sSilCoeffs[6 * v30 + 3 * v29 + v31];
          float v62 = *((float *)v61 + 71);
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "Bnd %7.3f [%s]\n", *((float *)v61 + 71), "sSilCoeffs.fLeftPos_CurPos_RightPos[lp][cp][rp]");
          }
          float v63 = v60 + v62;
          uint64_t v64 = &MTFEPlaceBoundaries::sSilCoeffs[27 * v28 + 9 * v31 + 3 * v104 + v105];
          float v65 = *((float *)v64 + 89);
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "Bnd %7.3f [%s]\n", *((float *)v64 + 89), "sSilCoeffs.fCurCrs_RightPos_Right2Pos_Right3Pos[cc][rp][r2][r3]");
          }
          float v66 = v63 + v65;
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "Bnd=%7.3f\n", v66);
          }
          if (kMTFESilThreshold)
          {
            MTBEDebugParams::GetParam((const __CFString *)kMTFESilThreshold, (const __CFString *)&dword_1EA8DA908, v67, *(float *)&dword_1EA8DA908);
            kMTFESilThreshold = 0;
          }
          if (v66 <= *(float *)&dword_1EA8DA908)
          {
            if (!*((unsigned char *)this + 89)) {
              return;
            }
            float v68 = 50.0;
LABEL_216:
            MTFEPlaceBoundaries::InsertBreak(this, v68);
            return;
          }
        }
        else
        {
          float v69 = (float)*((int *)this + 6);
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "Bnd %7.3f [%s]\n", 1.5773, "sPhrCoeffs.fIntercept");
          }
          float v70 = 1.0;
          if (!v34) {
            float v70 = v69;
          }
          float v71 = floorf(logf(v70) / 0.47);
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "Bnd %7.3f [%s]\n", (float)(v71 * 0.22623), "sPhrCoeffs.fFromLastBndWrds*XFormWordCount(fromLastBnd)");
          }
          float v72 = (float)(0.0 + 1.5773) + (float)(0.22623 * v71);
          float v73 = floorf(logf((float)*((unint64_t *)this + 4)) / 0.47);
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries))
          {
            uint64_t v74 = (FILE *)*MEMORY[0x1E4F143C8];
            float v75 = logf((float)*((unint64_t *)this + 4));
            fprintf(v74, "Bnd %7.3f [%s]\n", (float)(-0.0552 * floorf(v75 / 0.47)), "sPhrCoeffs.fFromEndSilWrds*XFormWordCount(fToNextSIL)");
          }
          float v76 = (float)v33;
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "Bnd %7.3f [%s]\n", (float)(-0.24608 * v76), "sPhrCoeffs.fGenitiveContextBit*genitiveContext");
          }
          float v77 = (float)(v72 + (float)(-0.0552 * v73)) + (float)(-0.24608 * v76);
          float v78 = (float)v32;
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "Bnd %7.3f [%s]\n", (float)(-0.01337 * v78), "sPhrCoeffs.fInfinitiveContextBit*infinitiveContext");
          }
          float v79 = v77 + (float)(-0.01337 * v78);
          uint64_t v80 = &MTFEPlaceBoundaries::sPhrCoeffs[3 * v27 + v31];
          float v82 = *((float *)v80 + 5);
          uint64_t v81 = (float *)(v80 + 5);
          float v83 = v82;
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "Bnd %7.3f [%s]\n", *v81, "sPhrCoeffs.fCurDet_RightPos[cd][rp]");
          }
          float v84 = v79 + v83;
          float v85 = &MTFEPlaceBoundaries::sPhrCoeffs[11 * v28 + v102];
          float v87 = *((float *)v85 + 26);
          uint64_t v86 = (float *)(v85 + 26);
          float v88 = v87;
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "Bnd %7.3f [%s]\n", *v86, "sPhrCoeffs.fCurCrs_RightDet[cc][rd]");
          }
          float v89 = v84 + v88;
          unint64_t v90 = &MTFEPlaceBoundaries::sPhrCoeffs[6 * v103 + 2 * v30 + v29];
          float v92 = *((float *)v90 + 59);
          unint64_t v91 = (float *)(v90 + 59);
          float v93 = v92;
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "Bnd %7.3f [%s]\n", *v91, "sPhrCoeffs.fLeft2Pos_LeftPos_CurPos[l2][lp][cp]");
          }
          float v94 = v89 + v93;
          unint64_t v95 = &MTFEPlaceBoundaries::sPhrCoeffs[6 * v30 + 3 * v29 + v31];
          float v96 = *((float *)v95 + 71);
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "Bnd %7.3f [%s]\n", *((float *)v95 + 71), "sPhrCoeffs.fLeftPos_CurPos_RightPos[lp][cp][rp]");
          }
          float v97 = v94 + v96;
          uint64_t v98 = &MTFEPlaceBoundaries::sPhrCoeffs[27 * v28 + 9 * v31 + 3 * v104 + v105];
          float v99 = *((float *)v98 + 89);
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "Bnd %7.3f [%s]\n", *((float *)v98 + 89), "sPhrCoeffs.fCurCrs_RightPos_Right2Pos_Right3Pos[cc][rp][r2][r3]");
          }
          float v100 = v97 + v99;
          if (MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries)) {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "Bnd=%7.3f\n", v100);
          }
          if (kMTFEPhrThreshold)
          {
            MTBEDebugParams::GetParam((const __CFString *)kMTFEPhrThreshold, (const __CFString *)&dword_1EA8DA918, v101, *(float *)&dword_1EA8DA918);
            kMTFEPhrThreshold = 0;
          }
          if (v100 <= *(float *)&dword_1EA8DA918)
          {
            if (!*((unsigned char *)this + 89)) {
              return;
            }
            float v68 = 0.0;
            goto LABEL_216;
          }
        }
        *((unsigned char *)this + 8MEOWVectorBase::clear(this + 9) = 1;
        return;
      }
LABEL_101:
      unsigned int v24 = 0xCu;
      goto LABEL_102;
    }
LABEL_87:
    unsigned int v22 = 0xCu;
    goto LABEL_88;
  }
  if (Word && *((unsigned char *)this + 89)) {
    MTFEPlaceBoundaries::InsertBreak(this, 0.0);
  }
  *((unsigned char *)this + 8MEOWVectorBase::clear(this + 9) = 0;
  *((void *)this + MEOWVectorBase::~MEOWVectorBase(this + 1) = 0;
  *((void *)this + MEOWVectorBase::clear(this + 4) = 0;
  if (var15 == 31) {
    *((void *)this + MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement((void *)this - 5) = 0;
  }
}

uint64_t MTFEPlaceBoundaries::InsertBreak(MTFEPlaceBoundaries *this, float a2)
{
  uint64_t v4 = *((void *)this + 12);
  uint64_t result = MTBEDebugParam<BOOL>::operator BOOL((uint64_t)&kMTFEDebugBoundaries);
  if (v4)
  {
    if (result) {
    if (a2 != 0.0)
    }
    {
      if (*((unsigned char *)this + 90)) {
        *(unsigned char *)(*((void *)this + 13) + 8MEOWVectorBase::~MEOWVectorBase(this + 1) = 3;
      }
    }
    operator new();
  }
  if (result) {
    uint64_t result = fwrite("\nNo suitable location found for break.\n", 0x27uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
  }
  *((unsigned char *)this + 8MEOWVectorBase::clear(this + 9) = 0;
  return result;
}

void sub_1DA4E7180(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C40D6D86DEFLL);
  _Unwind_Resume(a1);
}

void MTFEPlaceBoundaries::~MTFEPlaceBoundaries(MTFEPlaceBoundaries *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

void MEOWPPReader::MEOWPPReader(MEOWPPReader *this, MEOWReader *a2, int a3, unsigned int a4)
{
  unsigned int v4 = *(_DWORD *)(*((void *)a2 + 3808) + 12 * a3 + 4);
  uint64_t v5 = *((void *)a2 + 3809) + (int)bswap32(*(_DWORD *)(*((void *)a2 + 3808) + 12 * a3 + 8)) + 8 * a4;
  *(void *)this = &unk_1F34812C8;
  *((void *)this + MEOWVectorBase::~MEOWVectorBase(this + 1) = v5;
  *((void *)this + 3) = *((void *)a2 + 3810) + (int)bswap32(v4);
  *((_DWORD *)this + MEOWVectorBase::clear(this + 4) = bswap32(*(_DWORD *)(v5 + 4));
  LOWORD(vMEOWVectorBase::clear(this + 4) = *(unsigned char *)v5 != 0;
  *((unsigned char *)this + 20) = *(unsigned char *)v5 == 0;
  *((_WORD *)this + 1MEOWVectorBase::~MEOWVectorBase(this + 1) = (_WORD)v4 << 15;
}

uint64_t MEOWPPReader::SegmentEnd(MEOWPPReader *this)
{
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = bswap32(*(unsigned __int16 *)(v1 + 10)) >> 16;
  BOOL v3 = v2 > bswap32(*(unsigned __int16 *)(v1 + 2)) >> 16;
  uint64_t v4 = 1000000;
  if (v3) {
    uint64_t v4 = v2;
  }
  return *((void *)this + 3) + v4;
}

uint64_t MEOWPPReader::FindSegment(MEOWPPReader *this, unint64_t a2)
{
  uint64_t v2 = 1000000;
  BOOL v3 = (unsigned __int16 *)*((void *)this + 1);
  unsigned int v4 = bswap32(v3[5]) >> 16;
  uint64_t v5 = *((void *)this + 3);
  if (v4 > bswap32(v3[1]) >> 16)
  {
    while (v5 + (unint64_t)(unsigned __int16)v4 <= a2)
    {
      uint64_t v6 = v3 + 4;
      *((void *)this + MEOWVectorBase::~MEOWVectorBase(this + 1) = v3 + 4;
      unsigned int v4 = bswap32(v3[9]) >> 16;
      BOOL v7 = v4 > bswap32(v3[5]) >> 16;
      v3 += 4;
      if (!v7)
      {
        BOOL v3 = v6;
        goto LABEL_6;
      }
    }
    uint64_t v2 = (unsigned __int16)v4;
  }
LABEL_6:
  int v8 = *(unsigned __int8 *)v3;
  BOOL v9 = v8 == 0;
  __int16 v10 = v8 != 0;
  char v11 = v9;
  *((unsigned char *)this + 20) = v11;
  *((_WORD *)this + 1MEOWVectorBase::~MEOWVectorBase(this + 1) = v10 << 15;
  return v5 + v2;
}

void MEOWFlatPPReader::MEOWFlatPPReader(MEOWFlatPPReader *this, MEOWReader *a2, int a3, unsigned int a4)
{
  MEOWPPReader::MEOWPPReader(this, a2, a3, a4);
  *unsigned int v4 = &unk_1F3481320;
  uint64_t v5 = v4[3];
  uint64_t v6 = v4[1];
  unsigned int v7 = bswap32(*(unsigned __int16 *)(v6 + 2));
  uint64_t v8 = bswap32(*(unsigned __int16 *)(v6 + 10)) >> 16;
  if (v8 <= HIWORD(v7)) {
    uint64_t v8 = 1000000;
  }
  v4[4] = v5 + HIWORD(v7);
  v4[5] = v5 + v8;
}

{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  MEOWPPReader::MEOWPPReader(this, a2, a3, a4);
  *unsigned int v4 = &unk_1F3481320;
  uint64_t v5 = v4[3];
  uint64_t v6 = v4[1];
  unsigned int v7 = bswap32(*(unsigned __int16 *)(v6 + 2));
  uint64_t v8 = bswap32(*(unsigned __int16 *)(v6 + 10)) >> 16;
  if (v8 <= HIWORD(v7)) {
    uint64_t v8 = 1000000;
  }
  v4[4] = v5 + HIWORD(v7);
  v4[5] = v5 + v8;
}

void *MEOWFlatPPReader::Skip(void *this, int a2)
{
  unint64_t v2 = this[5];
  unint64_t v3 = this[4] + 2 * a2;
  this[4] = v3;
  if (v3 >= v2)
  {
    unsigned int v4 = this;
    this = (void *)MEOWPPReader::FindSegment((MEOWPPReader *)this, v3);
    v4[5] = this;
  }
  return this;
}

uint64_t MEOWFlatPPReader::Advance(uint64_t this, int a2)
{
  uint64_t v3 = this;
  unint64_t v4 = *(void *)(this + 32);
  if (a2 >= 1)
  {
    int v5 = *(_DWORD *)(this + 16);
    uint64_t v6 = 2 * (a2 - 1) + 2;
    unsigned int v7 = a2 + 1;
    uint64_t v8 = *(unsigned __int16 **)(this + 32);
    do
    {
      unsigned int v9 = *v8++;
      v5 += bswap32(v9) >> 16;
      --v7;
    }
    while (v7 > 1);
    v4 += v6;
    *(_DWORD *)(this + 16) = v5;
  }
  *(void *)(this + 3MEOWVectorBase::~MEOWVectorBase(this + 2) = v4;
  if (v4 >= *(void *)(this + 40))
  {
    this = MEOWPPReader::FindSegment((MEOWPPReader *)this, v4);
    *(void *)(v3 + 40) = this;
  }
  return this;
}

uint64_t MEOWFlatPPReader::Copy(uint64_t result, int a2, MEOWVectorBase *this)
{
  if (a2 >= 1)
  {
    uint64_t v4 = result;
    unsigned int v5 = a2 + 1;
    do
    {
      uint64_t v6 = *(unsigned __int16 **)(v4 + 32);
      unsigned int v7 = *v6;
      *(void *)(v4 + 3MEOWVectorBase::~MEOWVectorBase(this + 2) = v6 + 1;
      LODWORD(v6) = bswap32(v7);
      *(_DWORD *)(v4 + 16) += v6 >> 16;
      unsigned int v8 = *(unsigned __int16 *)(v4 + 22) | (v6 >> 16);
      uint64_t result = (uint64_t)MEOWVectorBase::Append(this);
      *(_WORD *)(*(void *)this + 2 * *((void *)this + 2) - MEOWVectorBase::~MEOWVectorBase(this + 2) = v8;
      unint64_t v9 = *(void *)(v4 + 32);
      if (v9 >= *(void *)(v4 + 40))
      {
        uint64_t result = MEOWPPReader::FindSegment((MEOWPPReader *)v4, v9);
        *(void *)(v4 + 40) = result;
      }
      --v5;
    }
    while (v5 > 1);
  }
  return result;
}

uint64_t MEOWFlatPPReader::CopyTill(uint64_t result, unint64_t a2, MEOWVectorBase *this)
{
  uint64_t v4 = *(unsigned __int16 **)(result + 32);
  if ((unint64_t)v4 < a2)
  {
    uint64_t v6 = result;
    do
    {
      unsigned int v8 = *v4;
      unsigned int v7 = v8;
      *(void *)(v6 + 3MEOWVectorBase::~MEOWVectorBase(this + 2) = v4 + 1;
      if (!v8) {
        break;
      }
      unsigned int v9 = bswap32(v7);
      *(_DWORD *)(v6 + 16) += HIWORD(v9);
      int v10 = *(unsigned __int16 *)(v6 + 22) | HIWORD(v9);
      uint64_t result = (uint64_t)MEOWVectorBase::Append(this);
      *(_WORD *)(*(void *)this + 2 * *((void *)this + 2) - MEOWVectorBase::~MEOWVectorBase(this + 2) = v10;
      uint64_t v4 = *(unsigned __int16 **)(v6 + 32);
      if ((unint64_t)v4 >= *(void *)(v6 + 40))
      {
        uint64_t result = MEOWPPReader::FindSegment((MEOWPPReader *)v6, (unint64_t)v4);
        *(void *)(v6 + 40) = result;
        uint64_t v4 = *(unsigned __int16 **)(v6 + 32);
      }
    }
    while ((unint64_t)v4 < a2);
  }
  return result;
}

uint64_t MEOWFlatPPReader::CopyLeftContext(uint64_t a1, MEOWVectorBase *this)
{
  if (*(unsigned char *)(a1 + 20)
    && (uint64_t v4 = *(void *)(a1 + 32),
        v4 - *(void *)(a1 + 24) - (bswap32(*(unsigned __int16 *)(*(void *)(a1 + 8) + 2)) >> 16) >= 5))
  {
    unsigned int v5 = bswap32(*(unsigned __int16 *)(v4 - 6)) >> 16;
    MEOWVectorBase::Append(this);
    *(_WORD *)(*(void *)this + 2 * *((void *)this + 2) - MEOWVectorBase::~MEOWVectorBase(this + 2) = v5;
    unsigned int v6 = bswap32(*(unsigned __int16 *)(*(void *)(a1 + 32) - 4)) >> 16;
    MEOWVectorBase::Append(this);
    *(_WORD *)(*(void *)this + 2 * *((void *)this + 2) - MEOWVectorBase::~MEOWVectorBase(this + 2) = v6;
    unsigned int v7 = bswap32(*(unsigned __int16 *)(*(void *)(a1 + 32) - 2)) >> 16;
    MEOWVectorBase::Append(this);
    uint64_t result = 1;
  }
  else
  {
    MEOWVectorBase::Append(this);
    uint64_t result = 0;
    LOWORD(v7) = -32438;
  }
  *(_WORD *)(*(void *)this + 2 * *((void *)this + 2) - MEOWVectorBase::~MEOWVectorBase(this + 2) = v7;
  return result;
}

uint64_t MEOWFlatPPReader::CopyRightContext(uint64_t a1, MEOWVectorBase *this)
{
  if (!*(unsigned char *)(a1 + 20)) {
    goto LABEL_9;
  }
  int64_t v3 = *((void *)this + 2);
  if ((unint64_t)v3 < 3) {
    goto LABEL_9;
  }
  unsigned int v5 = *(unsigned __int16 **)(a1 + 32);
  if ((uint64_t)(*(void *)(a1 + 40) - (void)v5) < 5) {
    goto LABEL_9;
  }
  if (v3 < (uint64_t)0x8000000000000003) {
    goto LABEL_8;
  }
  LOWORD(v6) = 0;
  unint64_t v7 = *(void *)this + 2 * v3;
  unsigned int v8 = (__int16 *)(v7 - 6);
  do
  {
    __int16 v9 = *v8++;
    int v6 = (__int16)(v9 | v6);
  }
  while ((unint64_t)v8 < v7);
  if (v6 < 0)
  {
LABEL_9:
    MEOWVectorBase::Append(this);
    uint64_t result = 0;
    LOWORD(v1MEOWVectorBase::~MEOWVectorBase(this + 2) = -32438;
  }
  else
  {
LABEL_8:
    unsigned int v10 = bswap32(*v5) >> 16;
    MEOWVectorBase::Append(this);
    *(_WORD *)(*(void *)this + 2 * *((void *)this + 2) - MEOWVectorBase::~MEOWVectorBase(this + 2) = v10;
    unsigned int v11 = bswap32(*(unsigned __int16 *)(*(void *)(a1 + 32) + 2)) >> 16;
    MEOWVectorBase::Append(this);
    *(_WORD *)(*(void *)this + 2 * *((void *)this + 2) - MEOWVectorBase::~MEOWVectorBase(this + 2) = v11;
    unsigned int v12 = bswap32(*(unsigned __int16 *)(*(void *)(a1 + 32) + 4)) >> 16;
    MEOWVectorBase::Append(this);
    uint64_t result = 1;
  }
  *(_WORD *)(*(void *)this + 2 * *((void *)this + 2) - MEOWVectorBase::~MEOWVectorBase(this + 2) = v12;
  return result;
}

uint64_t MEOWFlatPPReader::PP(MEOWFlatPPReader *this)
{
  return *((void *)this + 4);
}

void MEOWEncodedPPReader::MEOWEncodedPPReader(MEOWEncodedPPReader *this, MEOWReader *a2, int a3, unsigned int a4)
{
  MEOWPPReader::MEOWPPReader(this, a2, a3, a4);
  *uint64_t v4 = &unk_1F3481378;
  uint64_t v5 = v4[3];
  uint64_t v6 = v4[1];
  unsigned int v7 = bswap32(*(unsigned __int16 *)(v6 + 2));
  uint64_t v8 = bswap32(*(unsigned __int16 *)(v6 + 10)) >> 16;
  if (v8 <= HIWORD(v7)) {
    uint64_t v8 = 1000000;
  }
  v4[4] = v5 + HIWORD(v7);
  v4[5] = v5 + v8;
}

{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  MEOWPPReader::MEOWPPReader(this, a2, a3, a4);
  *uint64_t v4 = &unk_1F3481378;
  uint64_t v5 = v4[3];
  uint64_t v6 = v4[1];
  unsigned int v7 = bswap32(*(unsigned __int16 *)(v6 + 2));
  uint64_t v8 = bswap32(*(unsigned __int16 *)(v6 + 10)) >> 16;
  if (v8 <= HIWORD(v7)) {
    uint64_t v8 = 1000000;
  }
  v4[4] = v5 + HIWORD(v7);
  v4[5] = v5 + v8;
}

void *MEOWEncodedPPReader::Skip(void *this, int a2)
{
  int64_t v3 = this;
  unint64_t v4 = this[4];
  if (a2 >= 1)
  {
    do
    {
      uint64_t v5 = (char *)(v4 + 1);
      do
      {
        this[4] = v5;
        int v6 = *v5++;
      }
      while (v6 < 0);
      unint64_t v4 = (unint64_t)(v5 - 1);
      BOOL v7 = __OFSUB__(a2--, 1);
    }
    while (!((a2 < 0) ^ v7 | (a2 == 0)));
  }
  if (v4 >= this[5])
  {
    this = (void *)MEOWPPReader::FindSegment((MEOWPPReader *)this, v4);
    v3[5] = this;
  }
  return this;
}

uint64_t MEOWEncodedPPReader::Advance(uint64_t this, int a2)
{
  uint64_t v2 = this;
  if (a2 <= 0)
  {
    unint64_t v3 = *(void *)(this + 32);
  }
  else
  {
    unint64_t v3 = *(void *)(this + 32);
    int v4 = *(_DWORD *)(this + 16);
    do
    {
      int v5 = 0;
      int v6 = (char *)(v3 + 1);
      do
      {
        *(void *)(this + 3MEOWVectorBase::~MEOWVectorBase(this + 2) = v6;
        int v7 = *(v6 - 1) & 0x7F | (v5 << 7);
        int v8 = *v6++;
        int v5 = v7;
      }
      while (v8 < 0);
      unint64_t v3 = (unint64_t)(v6 - 1);
      v4 += v7;
      *(_DWORD *)(this + 16) = v4;
      BOOL v9 = __OFSUB__(a2--, 1);
    }
    while (!((a2 < 0) ^ v9 | (a2 == 0)));
  }
  if (v3 >= *(void *)(this + 40))
  {
    this = MEOWPPReader::FindSegment((MEOWPPReader *)this, v3);
    *(void *)(v2 + 40) = this;
  }
  return this;
}

uint64_t MEOWEncodedPPReader::Copy(uint64_t result, int a2, MEOWVectorBase *this)
{
  if (a2 >= 1)
  {
    int v4 = a2;
    uint64_t v5 = result;
    do
    {
      int v6 = 0;
      int v7 = (char *)(*(void *)(v5 + 32) + 1);
      do
      {
        *(void *)(v5 + 3MEOWVectorBase::~MEOWVectorBase(this + 2) = v7;
        int v8 = *(v7 - 1) & 0x7F | (v6 << 7);
        int v9 = *v7++;
        int v6 = v8;
      }
      while (v9 < 0);
      *(_DWORD *)(v5 + 16) += (unsigned __int16)v8;
      __int16 v10 = *(_WORD *)(v5 + 22) | v8;
      uint64_t result = (uint64_t)MEOWVectorBase::Append(this);
      *(_WORD *)(*(void *)this + 2 * *((void *)this + 2) - MEOWVectorBase::~MEOWVectorBase(this + 2) = v10;
      unint64_t v11 = *(void *)(v5 + 32);
      if (v11 >= *(void *)(v5 + 40))
      {
        uint64_t result = MEOWPPReader::FindSegment((MEOWPPReader *)v5, v11);
        *(void *)(v5 + 40) = result;
      }
    }
    while (v4-- > 1);
  }
  return result;
}

uint64_t MEOWEncodedPPReader::CopyTill(uint64_t result, unint64_t a2, MEOWVectorBase *this)
{
  int v4 = *(unsigned char **)(result + 32);
  if ((unint64_t)v4 < a2)
  {
    uint64_t v6 = result;
    int v7 = 0;
    do
    {
      do
      {
        *(void *)(v6 + 3MEOWVectorBase::~MEOWVectorBase(this + 2) = v4 + 1;
        int v8 = *v4 & 0x7F | (v7 << 7);
        int v9 = (char)*++v4;
        int v7 = v8;
      }
      while (v9 < 0);
      if (!(_WORD)v8) {
        break;
      }
      *(_DWORD *)(v6 + 16) += (unsigned __int16)v8;
      __int16 v10 = *(_WORD *)(v6 + 22) | v8;
      uint64_t result = (uint64_t)MEOWVectorBase::Append(this);
      *(_WORD *)(*(void *)this + 2 * *((void *)this + 2) - MEOWVectorBase::~MEOWVectorBase(this + 2) = v10;
      int v4 = *(unsigned char **)(v6 + 32);
      if ((unint64_t)v4 >= *(void *)(v6 + 40))
      {
        uint64_t result = MEOWPPReader::FindSegment((MEOWPPReader *)v6, (unint64_t)v4);
        *(void *)(v6 + 40) = result;
        int v4 = *(unsigned char **)(v6 + 32);
      }
      int v7 = 0;
    }
    while ((unint64_t)v4 < a2);
  }
  return result;
}

uint64_t MEOWEncodedPPReader::CopyLeftContext(uint64_t a1, MEOWVectorBase *this)
{
  if (!*(unsigned char *)(a1 + 20)) {
    goto LABEL_10;
  }
  unint64_t v3 = *(void *)(a1 + 32);
  unint64_t v4 = *(void *)(a1 + 24) + (bswap32(*(unsigned __int16 *)(*(void *)(a1 + 8) + 2)) >> 16);
  if ((uint64_t)(v3 - v4) < 3) {
    goto LABEL_10;
  }
  int v5 = 0;
  int v6 = 0;
  do
  {
    char v7 = *(unsigned char *)--v3;
    v5 |= (v7 & 0x7F) << v6;
    v6 += 7;
  }
  while (v7 < 0);
  int v8 = 0;
  int v9 = 0;
  do
  {
    char v10 = *(unsigned char *)--v3;
    v8 |= (v10 & 0x7F) << v9;
    v9 += 7;
  }
  while (v10 < 0);
  int v11 = 0;
  int v12 = 0;
  do
  {
    char v13 = *(unsigned char *)--v3;
    v11 |= (v13 & 0x7F) << v12;
    v12 += 7;
  }
  while (v13 < 0);
  if (v3 >= v4)
  {
    MEOWVectorBase::Append(this);
    *(_WORD *)(*(void *)this + 2 * *((void *)this + 2) - MEOWVectorBase::~MEOWVectorBase(this + 2) = v11;
    MEOWVectorBase::Append(this);
    *(_WORD *)(*(void *)this + 2 * *((void *)this + 2) - MEOWVectorBase::~MEOWVectorBase(this + 2) = v8;
    MEOWVectorBase::Append(this);
    uint64_t result = 1;
  }
  else
  {
LABEL_10:
    MEOWVectorBase::Append(this);
    uint64_t result = 0;
    LOWORD(vMiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement((void *)this - 5) = -32438;
  }
  *(_WORD *)(*(void *)this + 2 * *((void *)this + 2) - MEOWVectorBase::~MEOWVectorBase(this + 2) = v5;
  return result;
}

uint64_t MEOWEncodedPPReader::CopyRightContext(uint64_t a1, MEOWVectorBase *this)
{
  if (!*(unsigned char *)(a1 + 20)) {
    goto LABEL_17;
  }
  int64_t v3 = *((void *)this + 2);
  if ((unint64_t)v3 < 3) {
    goto LABEL_17;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = bswap32(*(unsigned __int16 *)(v4 + 10)) >> 16;
  if (v5 <= bswap32(*(unsigned __int16 *)(v4 + 2)) >> 16) {
    uint64_t v5 = 1000000;
  }
  int v6 = *(char **)(a1 + 32);
  if (*(void *)(a1 + 24) + v5 - (uint64_t)v6 < 3) {
    goto LABEL_17;
  }
  if (v3 >= (uint64_t)0x8000000000000003)
  {
    LOWORD(v7) = 0;
    unint64_t v8 = *(void *)this + 2 * v3;
    int v9 = (__int16 *)(v8 - 6);
    do
    {
      __int16 v10 = *v9++;
      int v7 = (__int16)(v10 | v7);
    }
    while ((unint64_t)v9 < v8);
    if (v7 < 0) {
      goto LABEL_17;
    }
  }
  __int16 v11 = 0;
  char v12 = *v6;
  do
  {
    int v13 = *++v6;
    __int16 v11 = v12 & 0x7F | (v11 << 7);
    char v12 = v13;
  }
  while (v13 < 0);
  __int16 v14 = 0;
  do
  {
    int v15 = *++v6;
    __int16 v14 = v12 & 0x7F | (v14 << 7);
    char v12 = v15;
  }
  while (v15 < 0);
  __int16 v16 = 0;
  do
  {
    int v17 = *++v6;
    __int16 v16 = v12 & 0x7F | (v16 << 7);
    char v12 = v17;
  }
  while (v17 < 0);
  if ((unint64_t)v6 <= *(void *)(a1 + 40))
  {
    MEOWVectorBase::Append(this);
    *(_WORD *)(*(void *)this + 2 * *((void *)this + 2) - MEOWVectorBase::~MEOWVectorBase(this + 2) = v11;
    MEOWVectorBase::Append(this);
    *(_WORD *)(*(void *)this + 2 * *((void *)this + 2) - MEOWVectorBase::~MEOWVectorBase(this + 2) = v14;
    MEOWVectorBase::Append(this);
    uint64_t result = 1;
  }
  else
  {
LABEL_17:
    MEOWVectorBase::Append(this);
    uint64_t result = 0;
    __int16 v16 = -32438;
  }
  *(_WORD *)(*(void *)this + 2 * *((void *)this + 2) - MEOWVectorBase::~MEOWVectorBase(this + 2) = v16;
  return result;
}

uint64_t MEOWEncodedPPReader::PP(MEOWEncodedPPReader *this)
{
  return *((void *)this + 4);
}

void MEOWFlatPPReaderFactory::CreateReader(MEOWFlatPPReaderFactory *this, MEOWReader *a2)
{
}

void MEOWEncodedPPReaderFactory::CreateReader(MEOWEncodedPPReaderFactory *this, MEOWReader *a2)
{
}

void MEOWPPReaderFactory::Create(MEOWPPReaderFactory *this)
{
}

void MEOWFlatPPReader::~MEOWFlatPPReader(MEOWFlatPPReader *this)
{
}

void MEOWEncodedPPReader::~MEOWEncodedPPReader(MEOWEncodedPPReader *this)
{
}

void MEOWFlatPPReaderFactory::~MEOWFlatPPReaderFactory(MEOWFlatPPReaderFactory *this)
{
}

void MEOWEncodedPPReaderFactory::~MEOWEncodedPPReaderFactory(MEOWEncodedPPReaderFactory *this)
{
}

void MTMBUnitInstructions::MTMBUnitInstructions(MTMBUnitInstructions *this)
{
  *(void *)this = 0;
  *((void *)this + MEOWVectorBase::~MEOWVectorBase(this + 1) = 0;
  *((void *)this + MEOWVectorBase::~MEOWVectorBase(this + 2) = 0;
}

{
  *(void *)this = 0;
  *((void *)this + MEOWVectorBase::~MEOWVectorBase(this + 1) = 0;
  *((void *)this + MEOWVectorBase::~MEOWVectorBase(this + 2) = 0;
}

void MTMBUnitInstructions::~MTMBUnitInstructions(MTMBUnitInstructions *this)
{
  uint64_t v2 = *(void **)this;
  if (v2)
  {
    do
    {
      int64_t v3 = (void *)*v2;
      MEMORY[0x1E016FF00]();
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      MEMORY[0x1E016FF00]();
      uint64_t v4 = v5;
    }
    while (v5);
  }
  int v6 = (void *)*((void *)this + 2);
  if (v6)
  {
    do
    {
      int v7 = (void *)*v6;
      MEMORY[0x1E016FF00]();
      int v6 = v7;
    }
    while (v7);
  }
}

void MTMBUnitInstructions::DeleteQueue(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int64_t v3 = (void *)*v2;
      MEMORY[0x1E016FF00]();
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t ***MTMBUnitInstructions::AddCommand(uint64_t ***this, MTFECommand *a2)
{
  unint64_t var8 = a2->var8;
  switch(var8)
  {
    case 0x6D666F72uLL:
LABEL_6:
      MTMBUnitInstructions::AddToQueue((uint64_t)this, this, HIWORD(LODWORD(a2->var9)) & 0x7FFF);
    case 0x6D766574uLL:
      ++this;
      goto LABEL_6;
    case 0x6D6F7672uLL:
      this += 2;
      goto LABEL_6;
  }
  return this;
}

void MTMBUnitInstructions::AddToQueue(uint64_t a1, uint64_t ***a2, unsigned __int16 a3)
{
  for (unint64_t i = *a2; i; *a2 = i)
  {
    unsigned int v5 = *((unsigned __int16 *)i + 4);
    if (v5 > a3) {
      break;
    }
    a3 -= v5;
    unint64_t i = (uint64_t **)*i;
  }
  operator new();
}

uint64_t *MTMBUnitInstructions::NextSlice(uint64_t **this)
{
  uint64_t v2 = MTMBUnitInstructions::AdvanceQueue((uint64_t)this, this);
  int64_t v3 = MTMBUnitInstructions::AdvanceQueue((uint64_t)v2, this + 2);

  return MTMBUnitInstructions::AdvanceQueue((uint64_t)v3, this + 1);
}

uint64_t *MTMBUnitInstructions::AdvanceQueue(uint64_t a1, uint64_t **a2)
{
  uint64_t result = *a2;
  if (*a2)
  {
    while (!*((_WORD *)result + 4))
    {
      uint64_t v4 = (uint64_t *)*result;
      MEMORY[0x1E016FF00]();
      *a2 = v4;
      uint64_t result = v4;
      if (!v4) {
        return result;
      }
    }
    --*((_WORD *)result + 4);
  }
  return result;
}

uint64_t MTMBUnitInstructions::ReadyInQueue(uint64_t a1, uint64_t *a2, _WORD *a3)
{
  uint64_t result = *a2;
  if (*a2)
  {
    if (*(_WORD *)(result + 8))
    {
      return 0;
    }
    else
    {
      uint64_t v5 = *(void *)result;
      *a3 = *(_WORD *)(result + 10);
      MEMORY[0x1E016FF00]();
      *a2 = v5;
      return 1;
    }
  }
  return result;
}

MTFESpeechElement *MTFEQuestionPhrasing::VisitSentence(MTFEQuestionPhrasing *this, MTFESpeechElement *a2)
{
  *((void *)this + MEOWVectorBase::~MEOWVectorBase(this + 1) = a2;
  *((unsigned char *)this + 17) = 1;
  return MTFESpeechElement::VisitChildren(a2, this);
}

MTFESpeechElement *MTFEQuestionPhrasing::VisitIntonationalPhrase(MTFEQuestionPhrasing *this, MTFESpeechElement *a2)
{
  *((unsigned char *)this + 1MEOWVectorBase::clear(this + 9) = BYTE4(a2[2].var6) != 0;
  if (*((unsigned char *)this + 17))
  {
    *((unsigned char *)this + 16) = 1;
    *((unsigned char *)this + 20) = 0;
  }
  *((unsigned char *)this + 18) = 0;
  uint64_t result = MTFESpeechElement::VisitChildren(a2, this);
  *((unsigned char *)this + 17) = *((unsigned char *)this + 18);
  return result;
}

unsigned __int8 *MTFEQuestionPhrasing::VisitWord(MTFEQuestionPhrasing *this, MTFEWord *a2)
{
  int var15 = a2->var15;
  uint64_t result = (unsigned __int8 *)a2->var6;
  if (result)
  {
    if (result)
    {
      int v6 = 1 << var15;
      if (var15 == 255) {
        LOWORD(v6) = 0;
      }
      BOOL v7 = var15 == 31 || result[86] == 31;
      if (!v7 && *((unsigned char *)this + 17))
      {
        signed __int16 var7 = a2->var7;
        if (var7)
        {
          if (var7->var7 || !*((unsigned char *)this + 20) || (v6 & 0x1400) == 0) {
            return result;
          }
LABEL_27:
          *((unsigned char *)this + 16) = 0;
          return result;
        }
        if (var15 == 12) {
          goto LABEL_27;
        }
        if ((v6 & 0x480) != 0) {
          *((unsigned char *)this + 20) = 1;
        }
      }
    }
  }
  else if (var15 == 31)
  {
    uint64_t result = (unsigned __int8 *)a2->var3;
    if (result
    {
      int v9 = result[58];
    }
    else
    {
      int v9 = 70;
    }
    if (!*((unsigned char *)this + 16) && !*((unsigned char *)this + 19) && v9 == 71)
    {
      result[58] = 70;
      a2->uint64_t var11 = 6;
      *(_WORD *)(*((void *)this + 1) + 56) |= 0x20u;
    }
    *((unsigned char *)this + 18) = v9 == 69;
  }
  return result;
}

void MTFEQuestionPhrasing::~MTFEQuestionPhrasing(MTFEQuestionPhrasing *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

MTFESpeechElement *MTFEMelodize::VisitIntonationalPhrase(MTFESpeechElement *this, MTFESpeechElement *a2)
{
  var6 = (MTFEMelody *)a2[3].var6;
  *(void *)&this->uint64_t var1 = var6;
  if (var6)
  {
    LOWORD(this->var3) = 0;
    HIDWORD(this->var3) = 0;
    LODWORD(this->varMEOWVectorBase::clear(this + 4) = 0;
    return MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)this);
  }
  return this;
}

MTFESpeechElement *MTFEMelodize::VisitWord(MTFESpeechElement *this, MTFESpeechElement *a2)
{
  if (((uint64_t)a2[1].var0 & 0x40) == 0)
  {
    uint64_t v3 = (uint64_t)this;
    *((float *)&this->var4 + MEOWVectorBase::~MEOWVectorBase(this + 1) = (float)*((__int16 *)&a2[3].var2 + 1);
    int var3_low = SLOWORD(this->var3);
    if (SWORD2(a2[1].var0) > var3_low && var3_low != 0)
    {
      if (var3_low >= 1)
      {
        do
        {
          float v6 = MTFEMelody::Pitch(*(MTFEMelody **)(v3 + 8), (unsigned __int16)var3_low - 1);
          LOWORD(var3_low) = *(_WORD *)(v3 + 16);
          if (v6 != 0.0) {
            break;
          }
          __int16 v7 = var3_low - 1;
          int var3_low = (__int16)(var3_low - 1);
          *(_WORD *)(v3 + 16) = v7;
        }
        while (var3_low > 0);
      }
      int v8 = *(_DWORD *)(v3 + 24) + (__int16)var3_low;
      int v9 = *(_DWORD *)(v3 + 20) - v8;
      MTFEMelody::SplitNote(*(MTFEMelody **)(v3 + 8), v8 - 1, v9 + 1);
      *(_DWORD *)(v3 + 24) += v9;
    }
    unint64_t v10 = *(int *)(v3 + 20);
    uint64_t v11 = *(void *)(v3 + 8);
    if (*(void *)(v11 + 16) > v10 && MTFEMelody::Pitch((MTFEMelody *)v11, v10) == 0.0)
    {
      MTFEMelody::DurationFrames(*(MTFEMelody **)(v3 + 8), *(int *)(v3 + 20), *(float *)(v3 + 28));
      operator new();
    }
    signed __int16 v12 = WORD2(a2[1].var0);
    *(_WORD *)(v3 + 16) = v12;
    WORD2(a2[1].var0) = v12 + *(_WORD *)(v3 + 24);
    return MTFESpeechElement::VisitChildren(a2, (MTFESpeechVisitor *)v3);
  }
  return this;
}

void sub_1DA4E87F0(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C40D6D86DEFLL);
  _Unwind_Resume(a1);
}

void MTFEMelodize::VisitSyllable(MTFEMelodize *this, MTFESyllable *a2)
{
  int v3 = *((_DWORD *)this + 5);
  uint64_t v4 = *((void *)this + 1);
  int v5 = v3;
  if (*(void *)(v4 + 16) > (unint64_t)v3)
  {
    float v6 = MTFEMelody::Pitch((MTFEMelody *)v4, v3);
    int v5 = *((_DWORD *)this + 5);
    if (v6 == 0.0)
    {
      MTFEMelody::DurationFrames(*((MTFEMelody **)this + 1), v5, *((float *)this + 7));
      operator new();
    }
  }
  *((_DWORD *)this + MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement((void *)this - 5) = v5 + 1;
}

void sub_1DA4E8988(_Unwind_Exception *a1)
{
  MEMORY[0x1E016FF00](v1, 0x10A1C405D120DB7);
  _Unwind_Resume(a1);
}

void MTFEMelodize::~MTFEMelodize(MTFEMelodize *this)
{
  MTFESpeechVisitor::~MTFESpeechVisitor(this);

  JUMPOUT(0x1E016FF00);
}

void MTFEMelody::MTFEMelody(MTFEMelody *this)
{
  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)this, 4);
  *(_OWORD *)(v1 + 3MEOWVectorBase::~MEOWVectorBase(this + 2) = xmmword_1DA50AF20;
  *(void *)(v1 + 48) = 0x100000000;
  *(_DWORD *)(v1 + 56) = 0;
}

{
  uint64_t v1;

  MEOWVectorBase::MEOWVectorBase((MEOWVectorBase *)this, 4);
  *(_OWORD *)(v1 + 3MEOWVectorBase::~MEOWVectorBase(this + 2) = xmmword_1DA50AF20;
  *(void *)(v1 + 48) = 0x100000000;
  *(_DWORD *)(v1 + 56) = 0;
}

MTFEMelody *MTFEMelody::SetSwing(MTFEMelody *this, unsigned int a2)
{
  if (a2 == -65536)
  {
    unsigned int v4 = -65536;
  }
  else
  {
    unsigned int v2 = a2;
    unsigned int v3 = a2 + 0x10000;
    do
    {
      unsigned int v4 = v3;
      unsigned int v3 = v2 % v3;
      unsigned int v2 = v4;
    }
    while (v3);
  }
  int v5 = 2 * (a2 / v4);
  unsigned int v6 = (a2 + 0x10000) / v4;
  unsigned int v7 = v5 - v6;
  unsigned int v8 = 2 * v6;
  if (v8)
  {
    unsigned int v9 = v7;
    unsigned int v10 = v8;
    do
    {
      unsigned int v11 = v10;
      unsigned int v10 = v9 % v10;
      unsigned int v9 = v11;
    }
    while (v10);
  }
  else
  {
    unsigned int v11 = v7;
  }
  *((_DWORD *)this + 8) = v7 / v11;
  *((_DWORD *)this + MEOWVectorBase::clear(this + 9) = v8 / v11;
  return this;
}

MTFEMelody *MTFEMelody::SetTranspose(MTFEMelody *this, int a2)
{
  *((_DWORD *)this + 1MEOWVectorBase::clear(this + 4) = a2 >> 16;
  return this;
}

unsigned __int8 *MTFEMelody::AddNotes(MTFEMelody *this, CFDataRef theData)
{
  CFIndex Length = CFDataGetLength(theData);
  uint64_t result = (unsigned __int8 *)CFDataGetBytePtr(theData);
  if ((unint64_t)(Length + 2) >= 5)
  {
    unsigned int v6 = result;
    uint64_t v7 = 0;
    if ((unint64_t)(Length / 3) <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = Length / 3;
    }
    do
    {
      if (*v6) {
        int v9 = *((_DWORD *)this + 14) + *v6;
      }
      else {
        int v9 = 0;
      }
      int v10 = v6[1];
      uint64_t v11 = (4 * v10);
      unsigned int v12 = v6[2];
      int v13 = *((_DWORD *)this + 10);
      if (v13)
      {
        unsigned int v14 = 8 * v10;
        if (v13 < 1 || v14 >= v12)
        {
          int v16 = *((_DWORD *)this + 11);
          unsigned int v17 = v16 * v11 - v13 * v12;
          unsigned int v18 = v16 * v12;
          if (v18)
          {
            unsigned int v19 = v17;
            unsigned int v20 = v18;
            do
            {
              unsigned int v21 = v20;
              unsigned int v20 = v19 % v20;
              unsigned int v19 = v21;
            }
            while (v20);
          }
          else
          {
            unsigned int v21 = v17;
          }
          uint64_t v11 = v17 / v21;
          unsigned int v12 = v18 / v21;
        }
        else
        {
          uint64_t v22 = *(void *)this + 4 * *((void *)this + 2);
          int v23 = *((_DWORD *)this + 11);
          unsigned int v24 = ((*(_DWORD *)(v22 - 4) >> 12) & 0xFFF) * v23 - (*(_DWORD *)(v22 - 4) & 0xFFF) * v13;
          unsigned int v25 = (*(_DWORD *)(v22 - 4) & 0xFFF) * v23;
          if (v25)
          {
            unsigned int v26 = v24;
            unsigned int v27 = v25;
            do
            {
              unsigned int v28 = v27;
              unsigned int v27 = v26 % v27;
              unsigned int v26 = v28;
            }
            while (v27);
          }
          else
          {
            unsigned int v28 = v24;
          }
          *(_DWORD *)(v22 - MEOWVectorBase::clear(this + 4) = *(_DWORD *)(v22 - 4) & 0xFF000000 | ((v24 / v28) << 12) | (v25 / v28);
        }
      }
      add(v11, v12, (unsigned int *)this + 12, (unsigned int *)this + 13);
      uint64_t v29 = *((unsigned int *)this + 8);
      if (v29 && *((_DWORD *)this + 13) == 2)
      {
        int v30 = *((_DWORD *)this + 9);
        if (v30 * v12)
        {
          unsigned int v31 = v29 * v12 + v30 * v11;
          unsigned int v32 = v30 * v12;
          do
          {
            unsigned int v33 = v32;
            unsigned int v32 = v31 % v32;
            unsigned int v31 = v33;
          }
          while (v32);
        }
        else
        {
          unsigned int v33 = v29 * v12 + v30 * v11;
        }
        unsigned int v37 = (v29 * v12 + v30 * v11) / v33;
        unsigned int v38 = v30 * v12 / v33;
        add(v29, v30, (unsigned int *)this + 12, (unsigned int *)this + 13);
        *((void *)this + MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement((void *)this - 5) = *((void *)this + 4);
      }
      else
      {
        *((_DWORD *)this + 10) = 0;
        unsigned int v34 = v11;
        if (v12)
        {
          unsigned int v35 = v11;
          unsigned int v36 = v12;
          do
          {
            unsigned int v34 = v36;
            unsigned int v36 = v35 % v36;
            unsigned int v35 = v34;
          }
          while (v36);
        }
        unsigned int v37 = v11 / v34;
        unsigned int v38 = v12 / v34;
      }
      v6 += 3;
      uint64_t result = (unsigned __int8 *)MEOWVectorBase::Append(this);
      *(_DWORD *)(*(void *)this + 4 * *((void *)this + 2) - MEOWVectorBase::clear(this + 4) = (v37 << 12) | (v9 << 24) | v38;
      ++v7;
    }
    while (v7 != v8);
  }
  return result;
}

uint64_t add(uint64_t result, int a2, unsigned int *a3, unsigned int *a4)
{
  *a3 = *a3 * a2 + *a4 * result;
  unsigned int v4 = *a4 * a2;
  *a4 = v4;
  if (v4)
  {
    unsigned int v5 = *a3;
    do
    {
      unsigned int v6 = v4;
      unsigned int v4 = v5 % v4;
      unsigned int v5 = v6;
    }
    while (v4);
  }
  else
  {
    unsigned int v6 = *a3;
  }
  *a3 /= v6;
  *a4 /= v6;
  return result;
}

float MTFEMelody::Pitch(MTFEMelody *this, uint64_t a2)
{
  float result = 0.0;
  int v3 = HIBYTE(*(_DWORD *)(*(void *)this + 4 * a2));
  if (v3) {
    return expf((float)((float)(v3 - 69) / 12.0) * 0.69315) * 440.0;
  }
  return result;
}

float MTFEMelody::Duration(MTFEMelody *this, uint64_t a2)
{
  return (float)((*(_DWORD *)(*(void *)this + 4 * a2) >> 12) & 0xFFF)
       / (float)(*(_DWORD *)(*(void *)this + 4 * a2) & 0xFFF);
}

uint64_t MTFEMelody::DurationFrames(MTFEMelody *this, uint64_t a2, float a3)
{
  return (int)(float)((float)((float)((float)((float)((*(_DWORD *)(*(void *)this + 4 * a2) >> 12) & 0xFFF)
                                                          / (float)(*(_DWORD *)(*(void *)this + 4 * a2) & 0xFFF))
                                                  * 12000.0)
                                          / a3)
                                  + 0.5);
}

uint64_t MTFEMelody::SilenceSamples(MTFEMelody *this, uint64_t a2, float a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = a2;
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)this - 4;
  do
  {
    unsigned int v7 = *(_DWORD *)(v6 + 4 * v4);
    float v8 = 0.0;
    if (HIBYTE(v7)) {
      float v8 = expf((float)((float)(int)(HIBYTE(v7) - 69) / 12.0) * 0.69315) * 440.0;
    }
    if (v8 >= 0.00000001) {
      break;
    }
    uint64_t v5 = (v5
                      + (int)(float)((float)((float)((float)((float)((v7 >> 12) & 0xFFF) / (float)(v7 & 0xFFF))
                                                   * 1323000.0)
                                           / a3)
                                   + 0.5));
    --v4;
  }
  while (v4);
  return v5;
}

uint64_t MTFEMelody::DurationSamples(MTFEMelody *this, uint64_t a2, float a3)
{
  return (int)(float)((float)((float)((float)((float)((*(_DWORD *)(*(void *)this + 4 * a2) >> 12) & 0xFFF)
                                                          / (float)(*(_DWORD *)(*(void *)this + 4 * a2) & 0xFFF))
                                                  * 1323000.0)
                                          / a3)
                                  + 0.5);
}

MTFEMelody *MTFEMelody::SplitNote(MTFEMelody *this, unint64_t a2, int a3)
{
  uint64_t v5 = this;
  if (a3 < 2)
  {
    if (a3 != 1)
    {
      uint64_t v15 = *((void *)this + 2);
      unint64_t v16 = (1 - a3);
      uint64_t v17 = *(void *)this;
      unsigned int v18 = *(_DWORD *)(*(void *)this + 4 * a2);
      int v19 = (v18 >> 12) & 0xFFF;
      int v20 = v18 & 0xFFF;
      if (a3)
      {
        uint64_t v21 = 2;
        if (v16 > 2) {
          uint64_t v21 = (1 - a3);
        }
        uint64_t v22 = 1;
        do
        {
          int v23 = *(_DWORD *)(v17 + 4 * (v22 + a2)) & 0xFFF;
          unsigned int v24 = v23 * v19 + ((*(_DWORD *)(v17 + 4 * (v22 + a2)) >> 12) & 0xFFF) * v20;
          unsigned int v25 = v23 * v20;
          if (v25)
          {
            unsigned int v26 = v24;
            unsigned int v27 = v25;
            do
            {
              unsigned int v28 = v27;
              unsigned int v27 = v26 % v27;
              unsigned int v26 = v28;
            }
            while (v27);
          }
          else
          {
            unsigned int v28 = v24;
          }
          int v19 = v24 / v28;
          ++v22;
          int v20 = v25 / v28;
        }
        while (v22 != v21);
      }
      *(_DWORD *)(v17 + 4 * aMEOWVectorBase::~MEOWVectorBase(this + 2) = v18 & 0xFF000000 | (v19 << 12) | v20;
      uint64_t v29 = (void *)(v17 + 4 * (a2 + 1));
      int v30 = (const void *)(v17 + 4 * (a2 + 1 + v16));
      return (MTFEMelody *)memmove(v29, v30, 4 * (v15 - (v16 + a2)));
    }
  }
  else
  {
    uint64_t v6 = (a3 - 1);
    uint64_t v7 = *((void *)this + 2);
    uint64_t v8 = v7 + v6;
    if (*((void *)this + 3) < (unint64_t)(v7 + v6)) {
      MEOWVectorBase::Allocate((MEOWVectorBase *)this, v7 + v6, 1);
    }
    *((void *)v5 + MEOWVectorBase::~MEOWVectorBase(this + 2) = v8;
    unint64_t v9 = a2 + a3;
    this = (MTFEMelody *)memmove((void *)(*(void *)v5 + 4 * v9), (const void *)(*(void *)v5 + 4 * (a2 + 1)), 4 * (v7 - (a2 + 1)));
    unsigned int v10 = *(_DWORD *)(*(void *)v5 + 4 * a2);
    unsigned int v11 = (v10 & 0xFFF) * a3;
    if (v11)
    {
      unsigned int v12 = (v10 >> 12) & 0xFFF;
      unsigned int v13 = (*(_DWORD *)(*(void *)v5 + 4 * a2) & 0xFFF) * a3;
      do
      {
        unsigned int v14 = v13;
        unsigned int v13 = v12 % v13;
        unsigned int v12 = v14;
      }
      while (v13);
    }
    else
    {
      unsigned int v14 = (v10 >> 12) & 0xFFF;
    }
    if (v9 > a2)
    {
      uint64_t v31 = a3;
      unsigned int v32 = v10 & 0xFF000000 | ((((v10 >> 12) & 0xFFF) / v14) << 12) | (v11 / v14);
      unsigned int v33 = (unsigned int *)(*(void *)v5 + 4 * a2);
      do
      {
        *v33++ = v32;
        --v31;
      }
      while (v31);
    }
  }
  return this;
}

void MTFEPitchCoeffs::MTFEPitchCoeffs(MTFEPitchCoeffs *this, const __CFDictionary *a2)
{
}

double MTFEPitchCoeffs::Initialize(MTFEPitchCoeffs *this)
{
  *(void *)this = 0x3F7FFF3A3F7FAE38;
  *((void *)this + MEOWVectorBase::~MEOWVectorBase(this + 1) = 0x1900000019;
  *((_OWORD *)this + MEOWVectorBase::~MEOWVectorBase(this + 1) = xmmword_1DA50AFB0;
  *((void *)this + MEOWVectorBase::clear(this + 4) = 0x3EFF48703F733333;
  *((_DWORD *)this + 10) = 400;
  *(_OWORD *)((char *)this + 4MEOWVectorBase::clear(this + 4) = xmmword_1DA50AFC0;
  *(void *)((char *)this + 60) = 0x1C3E4CCCCDLL;
  *(void *)((char *)this + 68) = 0x3ED88C4FBE996A75;
  *(void *)((char *)this + 76) = 24;
  *((_DWORD *)this + 2MEOWVectorBase::~MEOWVectorBase(this + 1) = 36;
  *((void *)this + 1MEOWVectorBase::~MEOWVectorBase(this + 1) = 0x3E42DDDB3F666666;
  *((_DWORD *)this + --*(_WORD *)(this + 24) = 1054594115;
  *(void *)((char *)this + 100) = 0x3A00000019;
  *((_DWORD *)this + 27) = 67;
  *((void *)this + 1MEOWVectorBase::clear(this + 4) = 0x3FC000003F666666;
  *((_DWORD *)this + 30) = 1061997773;
  *(void *)((char *)this + 1--*(_WORD *)(this + 24) = 0x2400000017;
  *(void *)((char *)this + 13MEOWVectorBase::~MEOWVectorBase(this + 2) = 0x3EB853663D40DF1ALL;
  *((_DWORD *)this + 3MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement((void *)this - 5) = 12;
  *((void *)this + 18) = 0x3F7B003C00000000;
  *((void *)this + 1MEOWVectorBase::clear(this + 9) = 0x1400000028;
  *((void *)this + 20) = 0x3E99999A00000000;
  *((_DWORD *)this + 4MEOWVectorBase::~MEOWVectorBase(this + 2) = 33;
  *(_OWORD *)((char *)this + 17MEOWVectorBase::~MEOWVectorBase(this + 2) = xmmword_1DA50AFD0;
  *(_OWORD *)((char *)this + 188) = xmmword_1DA50AFE0;
  *(_OWORD *)((char *)this + 20MEOWVectorBase::clear(this + 4) = xmmword_1DA50AFF0;
  *(void *)((char *)this + 220) = 0xC00000014;
  *(_OWORD *)((char *)this + 228) = xmmword_1DA50B000;
  *(_OWORD *)((char *)this + 24MEOWVectorBase::clear(this + 4) = xmmword_1DA50B010;
  *(_OWORD *)((char *)this + 260) = xmmword_1DA50B020;
  *(_OWORD *)((char *)this + 276) = xmmword_1DA50B030;
  *(_OWORD *)((char *)this + 29MEOWVectorBase::~MEOWVectorBase(this + 2) = xmmword_1DA50B040;
  *(_OWORD *)((char *)this + 308) = xmmword_1DA50B050;
  *(_OWORD *)((char *)this + 3--*(_WORD *)(this + 24) = xmmword_1DA50B060;
  *(_OWORD *)((char *)this + 340) = xmmword_1DA50B070;
  *(_OWORD *)((char *)this + 356) = xmmword_1DA50B080;
  *(_OWORD *)((char *)this + 37MEOWVectorBase::~MEOWVectorBase(this + 2) = xmmword_1DA50B090;
  *(void *)((char *)this + 388) = 0x3D4CCCCD3B5A740ELL;
  *(_OWORD *)((char *)this + 396) = xmmword_1DA50B0A0;
  *(_OWORD *)((char *)this + 41MEOWVectorBase::~MEOWVectorBase(this + 2) = xmmword_1DA50B0B0;
  *(void *)((char *)this + 428) = 0x1400000011;
  *(_OWORD *)((char *)this + 436) = xmmword_1DA50B0C0;
  *(_OWORD *)((char *)this + 45MEOWVectorBase::~MEOWVectorBase(this + 2) = xmmword_1DA50B0D0;
  *(_OWORD *)((char *)this + 468) = xmmword_1DA50B0E0;
  *(void *)((char *)this + 48MEOWVectorBase::clear(this + 4) = 0x3F80000000000000;
  *(void *)((char *)this + 49MEOWVectorBase::~MEOWVectorBase(this + 2) = 0x3D4CCCCD00000010;
  *((_DWORD *)this + 12MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement((void *)this - 5) = -12;
  *(_OWORD *)((char *)this + 50MEOWVectorBase::clear(this + 4) = xmmword_1DA50B0F0;
  double result = 0.0000305175852;
  *(_OWORD *)((char *)this + 520) = xmmword_1DA50B100;
  *((_DWORD *)this + 13MEOWVectorBase::clear(this + 4) = 1065353216;
  return result;
}

uint64_t sub_1DA4E9E5C()
{
  sub_1DA4F9744();
  sub_1DA4E9F6C();
  type metadata accessor for MTMacinTalkAUSPAudioUnit();
  id v1 = sub_1DA4EA04C();
  sub_1DA4F9744();
  sub_1DA4EA0A4();
  uint64_t v2 = sub_1DA4F9484();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v2;
}

unint64_t sub_1DA4E9F6C()
{
  uint64_t v2 = qword_1EBE3C7A8;
  if (!qword_1EBE3C7A8)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_1EBE3C7A8);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t type metadata accessor for MTMacinTalkAUSPAudioUnit()
{
  uint64_t v1 = qword_1EBE3CC30;
  if (!qword_1EBE3CC30) {
    return swift_getSingletonMetadata();
  }
  return v1;
}

id sub_1DA4EA04C()
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v0 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_bundleForClass_, ObjCClassFromMetadata);

  return v0;
}

uint64_t sub_1DA4EA0A4()
{
  return sub_1DA4F9744();
}

uint64_t sub_1DA4EA0D0(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0;
    case 1:
      return 1;
    case 2:
      return 2;
  }
  return 3;
}

uint64_t sub_1DA4EA168(char a1)
{
  if (!a1) {
    return 0;
  }
  if (a1 == 1) {
    return 1;
  }
  return 2;
}

uint64_t sub_1DA4EA1D4()
{
  return sub_1DA4F9AA4() & 1;
}

unint64_t sub_1DA4EA220()
{
  uint64_t v2 = qword_1EA8DA920;
  if (!qword_1EA8DA920)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EA8DA920);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_1DA4EA2A0()
{
  return sub_1DA4F97E4();
}

uint64_t sub_1DA4EA2E0()
{
  return sub_1DA4F9804();
}

uint64_t sub_1DA4EA328()
{
  return sub_1DA4F97F4();
}

uint64_t sub_1DA4EA370@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1DA4EA0D0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1DA4EA3A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1DA4EA168(*v1);
  *a1 = result;
  return result;
}

void static MTMacinTalkAUSPAudioUnit.registerAudioUnit()()
{
  uint64_t v10 = 0;
  sub_1DA4F9744();
  Swift::UInt32 v0 = String.mtOSType()();
  swift_bridgeObjectRelease();
  unint64_t v7 = __PAIR64__(v0, 1635087216);
  uint64_t v8 = 1634758764;
  int v9 = 0;
  id v1 = self;
  type metadata accessor for MTMacinTalkAUSPAudioUnit();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  sub_1DA4F9744();
  id v3 = (id)sub_1DA4F96D4();
  swift_bridgeObjectRelease();
  v4[0] = 1635087216;
  v4[1] = v0;
  uint64_t v5 = 1634758764;
  int v6 = 0;
  objc_msgSend(v1, sel_registerSubclass_asComponentDescription_name_version_, ObjCClassFromMetadata, v4, v3, 0);
}

Swift::UInt32 __swiftcall String.mtOSType()()
{
  uint64_t v18 = v0;
  uint64_t v19 = v1;
  uint64_t v15 = sub_1DA4F54F8;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v26 = 0;
  unint64_t v27 = 0;
  uint64_t v16 = 0;
  uint64_t v24 = sub_1DA4F9714();
  uint64_t v20 = *(void *)(v24 - 8);
  uint64_t v21 = v24 - 8;
  unint64_t v17 = (*(void *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v22 = (char *)v10 - v17;
  uint64_t v31 = MEMORY[0x1F4188790](v18, v19);
  uint64_t v32 = v2;
  uint64_t v30 = 0;
  sub_1DA4F9704();
  sub_1DA4F5040();
  uint64_t v23 = sub_1DA4F96F4();
  unint64_t v25 = v3;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v24);
  if ((v25 & 0xF000000000000000) == 0xF000000000000000) {
    goto LABEL_8;
  }
  uint64_t v13 = v23;
  unint64_t v14 = v25;
  unint64_t v11 = v25;
  uint64_t v12 = v23;
  uint64_t v26 = v23;
  unint64_t v27 = v25;
  if (sub_1DA4F94F4() != 4)
  {
    sub_1DA4F51C0(v12, v11);
    goto LABEL_8;
  }
  uint64_t v5 = v16;
  sub_1DA4F546C(v12, v11);
  v10[5] = v10;
  MEMORY[0x1F4188790](v15, v10);
  int v6 = &v10[-6];
  v6[2] = v7;
  void v6[3] = v8;
  v6[4] = &v30;
  Swift::UInt32 result = sub_1DA4F94E4();
  if (!v5)
  {
    sub_1DA4F51C0(v12, v11);
    sub_1DA4F51C0(v12, v11);
LABEL_8:
    void v10[3] = &v28;
    uint64_t v28 = v30;
    v10[1] = sub_1DA4F504C();
    _OWORD v10[2] = sub_1DA4F50C8();
    sub_1DA4F5144();
    sub_1DA4F97D4();
    return v29;
  }
  __break(1u);
  return result;
}

void sub_1DA4EA7BC()
{
}

id sub_1DA4EA7F8()
{
  unint64_t v3 = (id *)(v0 + qword_1EBE3C8A0);
  swift_beginAccess();
  id v4 = *v3;
  id v1 = *v3;
  swift_endAccess();
  return v4;
}

void sub_1DA4EA860(void *a1)
{
  id v2 = a1;
  id v4 = (void **)(v1 + qword_1EBE3C8A0);
  swift_beginAccess();
  unint64_t v3 = *v4;
  *id v4 = a1;

  swift_endAccess();
}

uint64_t (*sub_1DA4EA8E4())()
{
  return sub_1DA4EA950;
}

uint64_t sub_1DA4EA950()
{
  return swift_endAccess();
}

uint64_t sub_1DA4EA990()
{
  return 0;
}

id sub_1DA4EA998()
{
  unint64_t v3 = (id *)(v0 + qword_1EBE3C858);
  swift_beginAccess();
  id v4 = *v3;
  id v1 = *v3;
  swift_endAccess();
  return v4;
}

void sub_1DA4EAA00(void *a1)
{
  id v2 = a1;
  id v4 = (void **)(v1 + qword_1EBE3C858);
  swift_beginAccess();
  unint64_t v3 = *v4;
  *id v4 = a1;

  swift_endAccess();
}

uint64_t (*sub_1DA4EAA80())()
{
  return sub_1DA4EA950;
}

uint64_t sub_1DA4EAAEC()
{
  return sub_1DA4F9A94();
}

uint64_t sub_1DA4EAB20()
{
  id v2 = (uint64_t *)(v0 + qword_1EBE3C890);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v3;
}

uint64_t sub_1DA4EAB88(uint64_t a1)
{
  swift_bridgeObjectRetain();
  uint64_t v3 = (void *)(v1 + qword_1EBE3C890);
  swift_beginAccess();
  *uint64_t v3 = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1DA4EAC0C())()
{
  return sub_1DA4EA950;
}

id sub_1DA4EAC78()
{
  uint64_t v3 = (id *)(v0 + qword_1EBE3C880);
  swift_beginAccess();
  id v4 = *v3;
  id v1 = *v3;
  swift_endAccess();
  return v4;
}

void sub_1DA4EACE0(void *a1)
{
  id v2 = a1;
  id v4 = (void **)(v1 + qword_1EBE3C880);
  swift_beginAccess();
  uint64_t v3 = *v4;
  *id v4 = a1;

  swift_endAccess();
}

uint64_t (*sub_1DA4EAD60())()
{
  return sub_1DA4EA950;
}

id sub_1DA4EADCC()
{
  return sub_1DA4EAF74();
}

id sub_1DA4EAE1C()
{
  uint64_t v3 = (id *)(v0 + qword_1EBE3C850);
  swift_beginAccess();
  id v4 = *v3;
  id v1 = *v3;
  swift_endAccess();
  return v4;
}

void sub_1DA4EAE84(void *a1)
{
  id v2 = a1;
  id v4 = (void **)(v1 + qword_1EBE3C850);
  swift_beginAccess();
  uint64_t v3 = *v4;
  *id v4 = a1;

  swift_endAccess();
}

uint64_t (*sub_1DA4EAF08())()
{
  return sub_1DA4EA950;
}

id sub_1DA4EAF74()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return sub_1DA4F607C();
}

id sub_1DA4EAFBC()
{
  uint64_t v3 = (id *)(v0 + qword_1EBE3C860);
  swift_beginAccess();
  id v4 = *v3;
  id v1 = *v3;
  swift_endAccess();
  return v4;
}

void sub_1DA4EB024(void *a1)
{
  id v2 = a1;
  id v4 = (void **)(v1 + qword_1EBE3C860);
  swift_beginAccess();
  uint64_t v3 = *v4;
  *id v4 = a1;

  swift_endAccess();
}

uint64_t (*sub_1DA4EB0A4())()
{
  return sub_1DA4EA950;
}

uint64_t sub_1DA4EB110()
{
  id v2 = (uint64_t *)(v0 + qword_1EBE3C878);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t sub_1DA4EB174(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + qword_1EBE3C878);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_endAccess();
}

uint64_t (*sub_1DA4EB1E0())()
{
  return sub_1DA4EA950;
}

uint64_t sub_1DA4EB24C()
{
  return 0;
}

uint64_t sub_1DA4EB258()
{
  id v2 = (uint64_t *)(v0 + qword_1EBE3C870);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t sub_1DA4EB2CC(uint64_t a1, char a2)
{
  uint64_t v6 = v2 + qword_1EBE3C870;
  swift_beginAccess();
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return swift_endAccess();
}

uint64_t (*sub_1DA4EB368())()
{
  return sub_1DA4EA950;
}

id sub_1DA4EB3D4()
{
  uint64_t v3 = (id *)(v0 + qword_1EBE3C888);
  swift_beginAccess();
  id v4 = *v3;
  id v1 = *v3;
  swift_endAccess();
  return v4;
}

void sub_1DA4EB43C(void *a1)
{
  id v2 = a1;
  id v4 = (void **)(v1 + qword_1EBE3C888);
  swift_beginAccess();
  uint64_t v3 = *v4;
  *id v4 = a1;

  swift_endAccess();
}

uint64_t (*sub_1DA4EB4BC())()
{
  return sub_1DA4EA950;
}

id sub_1DA4EB528()
{
  uint64_t v3 = (id *)(v0 + qword_1EBE3C898);
  swift_beginAccess();
  id v4 = *v3;
  id v1 = *v3;
  swift_endAccess();
  return v4;
}

void sub_1DA4EB590(void *a1)
{
  id v2 = a1;
  id v4 = (void **)(v1 + qword_1EBE3C898);
  swift_beginAccess();
  uint64_t v3 = *v4;
  *id v4 = a1;

  swift_endAccess();
}

uint64_t (*sub_1DA4EB610())()
{
  return sub_1DA4EA950;
}

id sub_1DA4EB67C()
{
  return sub_1DA4EBB14();
}

id sub_1DA4EB6A8()
{
  uint64_t v3 = (id *)(v0 + qword_1EBE3C868);
  swift_beginAccess();
  id v4 = *v3;
  id v1 = *v3;
  swift_endAccess();
  return v4;
}

void sub_1DA4EB710(void *a1)
{
  id v2 = a1;
  id v4 = (void **)(v1 + qword_1EBE3C868);
  swift_beginAccess();
  uint64_t v3 = *v4;
  *id v4 = a1;

  swift_endAccess();
}

uint64_t (*sub_1DA4EB794())()
{
  return sub_1DA4EA950;
}

float sub_1DA4EB800()
{
  uint64_t v15 = 0;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE3C718);
  uint64_t v8 = *(void *)(v11 - 8);
  uint64_t v9 = v11 - 8;
  unint64_t v5 = (*(void *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1F4188790](v11, v0);
  uint64_t v1 = (char *)&v4 - v5;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v15 = v2;
  uint64_t v6 = v2 + qword_1EBE3CC60;
  uint64_t v7 = &v14;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v1, v6, v11);
  swift_endAccess();
  sub_1DA4F9534();
  float v12 = v13;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v11);
  return v12;
}

uint64_t sub_1DA4EB944()
{
  return swift_endAccess();
}

void (*sub_1DA4EB9CC(void *a1))(void **a1)
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE3C718);
  v2[7] = sub_1DA4F9524();
  return sub_1DA4EBA80;
}

void sub_1DA4EBA80(void **a1)
{
  uint64_t v1 = (void (**)(void *, void))*a1;
  v1[7](v1, 0);
  swift_endAccess();
  free(v1);
}

id sub_1DA4EBB14()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return sub_1DA4F60D8();
}

uint64_t sub_1DA4EBB44()
{
  id v2 = self;
  sub_1DA4F9744();
  id v5 = (id)sub_1DA4F96D4();
  swift_bridgeObjectRelease();
  sub_1DA4F9744();
  sub_1DA4E9E5C();
  swift_bridgeObjectRelease();
  id v4 = (id)sub_1DA4F96D4();
  swift_bridgeObjectRelease();
  uint64_t v3 = sub_1DA4EA168(2);
  type metadata accessor for AudioUnitParameterOptions();
  sub_1DA4F9A94();
  sub_1DA4F5774();
  sub_1DA4F9944();
  LODWORD(v0) = 1128792064;
  objc_msgSend(v2, sel_createParameterWithIdentifier_name_address_min_max_unit_unitName_flags_valueStrings_dependentParameters_, v5, v4, v3, 3, 0, v6, 0.0, v0, 0, 0);

  sub_1DA4EBD1C();
  return sub_1DA4F9564();
}

uint64_t sub_1DA4EBD1C()
{
  return 0;
}

uint64_t sub_1DA4EBD34()
{
  uint64_t v14 = 0;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE3C718);
  uint64_t v8 = *(void *)(v10 - 8);
  uint64_t v9 = v10 - 8;
  unint64_t v5 = (*(void *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1F4188790](v10, v0);
  uint64_t v1 = (char *)&v4 - v5;
  uint64_t v11 = (char *)&v4 - v5;
  uint64_t v14 = v2;
  uint64_t v6 = v2 + qword_1EBE3CC60;
  uint64_t v7 = &v13;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v1, v6, v10);
  swift_endAccess();
  uint64_t v12 = sub_1DA4F9554();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v10);
  return v12;
}

float sub_1DA4EBE74()
{
  uint64_t v15 = 0;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE3C718);
  uint64_t v8 = *(void *)(v11 - 8);
  uint64_t v9 = v11 - 8;
  unint64_t v5 = (*(void *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1F4188790](v11, v0);
  uint64_t v1 = (char *)&v4 - v5;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v15 = v2;
  uint64_t v6 = v2 + qword_1EBE3CC58;
  uint64_t v7 = &v14;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v1, v6, v11);
  swift_endAccess();
  sub_1DA4F9534();
  float v12 = v13;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v11);
  return v12;
}

uint64_t sub_1DA4EBFB8()
{
  return swift_endAccess();
}

void (*sub_1DA4EC040(void *a1))(void **a1)
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE3C718);
  v2[7] = sub_1DA4F9524();
  return sub_1DA4EBA80;
}

uint64_t sub_1DA4EC0F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v18 = 0;
  uint64_t v15 = sub_1DA4F95F4();
  uint64_t v13 = *(void *)(v15 - 8);
  uint64_t v14 = v15 - 8;
  v8[0] = (*(void *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1F4188790](v15, v1);
  uint64_t v2 = (char *)v8 - v8[0];
  uint64_t v16 = (char *)v8 - v8[0];
  id v20 = self;
  v8[2] = 7;
  int v9 = 1;
  sub_1DA4F9744();
  v8[1] = v3;
  id v24 = (id)sub_1DA4F96D4();
  swift_bridgeObjectRelease();
  sub_1DA4F9744();
  uint64_t v10 = v4;
  uint64_t v11 = sub_1DA4E9E5C();
  uint64_t v12 = v5;
  swift_bridgeObjectRelease();
  id v23 = (id)sub_1DA4F96D4();
  swift_bridgeObjectRelease();
  uint64_t v21 = sub_1DA4EA168(0);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v2, *MEMORY[0x1E4FAF260], v15);
  sub_1DA4F95E4();
  uint64_t v17 = v6;
  id v22 = (id)sub_1DA4F96D4();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v15);
  swift_bridgeObjectRelease();
  type metadata accessor for AudioUnitParameterOptions();
  uint64_t v19 = sub_1DA4F9A94();
  sub_1DA4F5774();
  sub_1DA4F9944();
  int v25 = 1112014848;
  id v31 = objc_msgSend(v20, sel_createParameterWithIdentifier_name_address_min_max_unit_unitName_flags_valueStrings_dependentParameters_, v24, v23, v21, 26, v22, v33[1], 0, 0);

  unint64_t v27 = v33;
  v33[0] = v25;
  uint64_t v28 = v32;
  memset(v32, 0, sizeof(v32));
  uint64_t v29 = MEMORY[0x1E4FBB470];
  uint64_t v30 = MEMORY[0x1E4FAF268];
  sub_1DA4EBD1C();
  return sub_1DA4F9564();
}

uint64_t sub_1DA4EC3D8()
{
  uint64_t v14 = 0;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE3C718);
  uint64_t v8 = *(void *)(v10 - 8);
  uint64_t v9 = v10 - 8;
  unint64_t v5 = (*(void *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1F4188790](v10, v0);
  uint64_t v1 = (char *)&v4 - v5;
  uint64_t v11 = (char *)&v4 - v5;
  uint64_t v14 = v2;
  uint64_t v6 = v2 + qword_1EBE3CC58;
  uint64_t v7 = &v13;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v1, v6, v10);
  swift_endAccess();
  uint64_t v12 = sub_1DA4F9554();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v10);
  return v12;
}

float sub_1DA4EC518()
{
  uint64_t v15 = 0;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE3C718);
  uint64_t v8 = *(void *)(v11 - 8);
  uint64_t v9 = v11 - 8;
  unint64_t v5 = (*(void *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1F4188790](v11, v0);
  uint64_t v1 = (char *)&v4 - v5;
  uint64_t v10 = (char *)&v4 - v5;
  uint64_t v15 = v2;
  uint64_t v6 = v2 + qword_1EBE3CC40;
  uint64_t v7 = &v14;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v1, v6, v11);
  swift_endAccess();
  sub_1DA4F9534();
  float v12 = v13;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v11);
  return v12;
}

uint64_t sub_1DA4EC65C()
{
  return swift_endAccess();
}

void (*sub_1DA4EC6E4(void *a1))(void **a1)
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE3C718);
  v2[7] = sub_1DA4F9524();
  return sub_1DA4EBA80;
}

uint64_t sub_1DA4EC798@<X0>(uint64_t a1@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v23 = 0;
  uint64_t v20 = sub_1DA4F95F4();
  uint64_t v18 = *(void *)(v20 - 8);
  uint64_t v19 = v20 - 8;
  unint64_t v11 = (*(void *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1F4188790](v20, v1);
  uint64_t v2 = (char *)&v10 - v11;
  uint64_t v21 = (char *)&v10 - v11;
  id v25 = self;
  uint64_t v13 = 7;
  int v17 = 1;
  sub_1DA4F9744();
  uint64_t v12 = v3;
  id v29 = (id)sub_1DA4F96D4();
  swift_bridgeObjectRelease();
  sub_1DA4F9744();
  uint64_t v14 = v4;
  uint64_t v15 = sub_1DA4E9E5C();
  uint64_t v16 = v5;
  swift_bridgeObjectRelease();
  id v28 = (id)sub_1DA4F96D4();
  swift_bridgeObjectRelease();
  uint64_t v26 = sub_1DA4EA168(v17);
  (*(void (**)(char *, void, uint64_t))(v18 + 104))(v2, *MEMORY[0x1E4FAF260], v20);
  sub_1DA4F95E4();
  uint64_t v22 = v6;
  id v27 = (id)sub_1DA4F96D4();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v20);
  swift_bridgeObjectRelease();
  type metadata accessor for AudioUnitParameterOptions();
  uint64_t v24 = sub_1DA4F9A94();
  sub_1DA4F5774();
  sub_1DA4F9944();
  LODWORD(v7) = 1127219200;
  LODWORD(v8) = 1147207680;
  id v35 = objc_msgSend(v25, sel_createParameterWithIdentifier_name_address_min_max_unit_unitName_flags_valueStrings_dependentParameters_, v29, v28, v26, 26, v27, v37[1], v7, v8, 0, 0);

  id v31 = v37;
  v37[0] = 1140457472;
  uint64_t v32 = v36;
  memset(v36, 0, sizeof(v36));
  uint64_t v33 = MEMORY[0x1E4FBB470];
  uint64_t v34 = MEMORY[0x1E4FAF268];
  sub_1DA4EBD1C();
  return sub_1DA4F9564();
}

uint64_t sub_1DA4ECA74()
{
  uint64_t v14 = 0;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE3C718);
  uint64_t v8 = *(void *)(v10 - 8);
  uint64_t v9 = v10 - 8;
  unint64_t v5 = (*(void *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1F4188790](v10, v0);
  uint64_t v1 = (char *)&v4 - v5;
  unint64_t v11 = (char *)&v4 - v5;
  uint64_t v14 = v2;
  uint64_t v6 = v2 + qword_1EBE3CC40;
  double v7 = &v13;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v1, v6, v10);
  swift_endAccess();
  uint64_t v12 = sub_1DA4F9554();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v10);
  return v12;
}

uint64_t sub_1DA4ECBB4()
{
  id v1 = objc_msgSend(self, sel_sharedInstance);
  id v2 = objc_msgSend(v1, sel_resourcesWithType_subType_, 2, 1);

  sub_1DA4F57F8();
  sub_1DA4F9834();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE3C7B0);
  sub_1DA4F5860();
  uint64_t v3 = sub_1DA4F99D4();

  return v3;
}

unint64_t sub_1DA4ECCD4(id *a1)
{
  return (unint64_t)objc_msgSend(*a1, sel_isInstalled) & 1;
}

id sub_1DA4ECD14(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v15 = 0;
  id v14 = 0;
  v12[0] = a1;
  v12[1] = a2;
  int v13 = a3;
  id v11 = objc_msgSend(objc_allocWithZone(v4), sel_initWithComponentDescription_options_error_, v12, a4, &v14);
  id v10 = v14;
  id v5 = v14;
  uint64_t v6 = v15;
  id v15 = v10;

  if (v11) {
    return v11;
  }
  id v9 = v15;
  sub_1DA4F94A4();

  swift_willThrow();
  return (id)v8;
}

char *sub_1DA4ECEB0(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  v187 = v218;
  unsigned int v128 = a4;
  uint64_t v227 = *MEMORY[0x1E4F143B8];
  uint64_t v220 = 0;
  v218[0] = 0;
  v218[1] = 0;
  int v150 = 0;
  int v219 = 0;
  int v217 = 0;
  int v212 = 0;
  id v211 = 0;
  uint64_t v204 = a1;
  uint64_t v205 = a2;
  int v206 = a3;
  uint64_t v126 = a1;
  uint64_t v129 = a2;
  int v127 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE3C760);
  unint64_t v124 = (*(void *)(*(void *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1F4188790](v4, v5);
  v199 = (char *)&v89 - v124;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE3C720);
  unint64_t v125 = (*(void *)(*(void *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1F4188790](v6, v7);
  v197 = (char *)&v89 - v125;
  uint64_t v198 = 0;
  uint64_t v174 = sub_1DA4F95F4();
  uint64_t v151 = *(void *)(v174 - 8);
  uint64_t v152 = v174 - 8;
  id v9 = (void *)MEMORY[0x1F4188790](v194, v8);
  uint64_t v10 = v129;
  id v11 = v187;
  __int16 v177 = (char *)&v89 - v12;
  __int16 v203 = 0;
  *(_DWORD *)v187 = v13;
  *((_DWORD *)v11 + MEOWVectorBase::~MEOWVectorBase(this + 1) = v14;
  v11[1] = v10;
  *((_DWORD *)v11 + MEOWVectorBase::clear(this + 4) = v15;
  int v217 = v16;
  id v17 = v9;
  uint64_t v18 = v194;
  uint64_t v19 = v194;
  uint64_t v20 = v194;
  uint64_t v21 = v194;
  uint64_t v22 = v194;
  uint64_t v23 = v194;
  uint64_t v24 = v194;
  id v25 = v194;
  uint64_t v26 = v194;
  id v27 = v194;
  id v28 = v194;
  id v29 = v194;
  uint64_t v30 = v194;
  uint64_t v31 = v198;
  uint64_t v32 = v194;
  v187[3] = v194;
  __int16 v203 = 2;
  *(void *)&v32[qword_1EBE3C858] = v31;

  uint64_t v130 = qword_1EBE3C890;
  sub_1DA4F5528();
  uint64_t v33 = sub_1DA4F9A94();
  id v34 = v194;
  __int16 v203 = 6;
  *(void *)&v194[v130] = v33;

  id v35 = v194;
  __int16 v203 = 14;
  *(void *)&v194[qword_1EBE3C880] = v198;

  uint64_t v131 = qword_1EBE3C850;
  sub_1DA4F5590();
  unsigned int v195 = 1;
  sub_1DA4F9744();
  id v36 = sub_1DA4EAF74();
  id v37 = v194;
  __int16 v203 = 30;
  *(void *)&v194[v131] = v36;

  id v38 = v194;
  __int16 v203 = 62;
  *(void *)&v194[qword_1EBE3C860] = v198;

  id v39 = v194;
  *(void *)&v194[qword_1EBE3C878] = v198;

  char v40 = v195;
  id v41 = v194;
  float v42 = &v194[qword_1EBE3C870];
  *(void *)float v42 = 0;
  v42[8] = v40 & 1;

  id v43 = v194;
  __int16 v203 = 318;
  *(void *)&v194[qword_1EBE3C888] = v198;

  id v44 = v194;
  __int16 v203 = 830;
  *(void *)&v194[qword_1EBE3C898] = v198;

  uint64_t v132 = qword_1EBE3C868;
  sub_1DA4F55F8();
  id v45 = sub_1DA4EBB14();
  id v46 = v194;
  __int16 v203 = 1854;
  *(void *)&v194[v132] = v45;

  uint64_t v142 = qword_1EBE3CC60;
  __int16 v203 = 3902;
  unint64_t v164 = 0x1E4F4E000uLL;
  id v138 = self;
  sub_1DA4F9744();
  uint64_t v133 = v47;
  id v141 = (id)sub_1DA4F96D4();
  swift_bridgeObjectRelease();
  sub_1DA4F9744();
  uint64_t v134 = v48;
  uint64_t v135 = sub_1DA4E9E5C();
  uint64_t v136 = v49;
  swift_bridgeObjectRelease();
  id v140 = (id)sub_1DA4F96D4();
  swift_bridgeObjectRelease();
  uint64_t v139 = sub_1DA4EA168(2);
  uint64_t v173 = type metadata accessor for AudioUnitParameterOptions();
  uint64_t v137 = sub_1DA4F9A94();
  unint64_t v179 = sub_1DA4F5774();
  sub_1DA4F9944();
  float v50 = v177;
  unint64_t v180 = 0x1F6E09000uLL;
  LODWORD(v5MEOWVectorBase::~MEOWVectorBase(this + 1) = 1128792064;
  id v145 = objc_msgSend(v138, (SEL)0x1F6E09E26, v141, v140, v139, 3, 0, v216[1], 0.0, v51, 0, 0);

  uint64_t v52 = v187;
  v143 = v216;
  v216[0] = 1120403456;
  v144 = &v226;
  v187[26] = 0;
  v52[27] = 0;
  v52[28] = 0;
  v52[29] = 0;
  v52[30] = 0;
  uint64_t v191 = MEMORY[0x1E4FBB470];
  uint64_t v192 = MEMORY[0x1E4FAF268];
  sub_1DA4EBD1C();
  sub_1DA4F9564();

  uint64_t v160 = qword_1EBE3CC58;
  __int16 v203 = 7998;
  id v154 = self;
  uint64_t v166 = 7;
  sub_1DA4F9744();
  uint64_t v146 = v53;
  id v158 = (id)sub_1DA4F96D4();
  swift_bridgeObjectRelease();
  sub_1DA4F9744();
  uint64_t v147 = v54;
  uint64_t v148 = sub_1DA4E9E5C();
  uint64_t v149 = v55;
  swift_bridgeObjectRelease();
  id v157 = (id)sub_1DA4F96D4();
  swift_bridgeObjectRelease();
  uint64_t v155 = sub_1DA4EA168(v150);
  int v170 = (unsigned int *)MEMORY[0x1E4FAF260];
  uint64_t v56 = *MEMORY[0x1E4FAF260];
  v172 = *(void (**)(char *, uint64_t, uint64_t))(v151 + 104);
  uint64_t v171 = v151 + 104;
  v172(v50, v56, v174);
  sub_1DA4F95E4();
  uint64_t v153 = v57;
  id v156 = (id)sub_1DA4F96D4();
  v176 = *(void (**)(char *, uint64_t))(v151 + 8);
  uint64_t v175 = v151 + 8;
  v176(v177, v174);
  swift_bridgeObjectRelease();
  sub_1DA4F9A94();
  sub_1DA4F9944();
  float v58 = v177;
  int v159 = 1112014848;
  unsigned int v183 = 26;
  id v163 = objc_msgSend(v154, (SEL)(v180 + 3622), v158, v157, v155, 0, 0);

  float v59 = v187;
  v161 = &v215;
  int v215 = v159;
  int v162 = &v225;
  v187[21] = 0;
  v59[22] = 0;
  v59[23] = 0;
  unsigned char v59[24] = 0;
  v59[25] = 0;
  sub_1DA4EBD1C();
  sub_1DA4F9564();

  uint64_t v188 = qword_1EBE3CC40;
  __int16 v203 = 16190;
  id v181 = self;
  sub_1DA4F9744();
  uint64_t v165 = v60;
  id v186 = (id)sub_1DA4F96D4();
  swift_bridgeObjectRelease();
  sub_1DA4F9744();
  uint64_t v167 = v61;
  uint64_t v168 = sub_1DA4E9E5C();
  uint64_t v169 = v62;
  swift_bridgeObjectRelease();
  id v185 = (id)sub_1DA4F96D4();
  swift_bridgeObjectRelease();
  uint64_t v182 = sub_1DA4EA168(v195);
  v172(v58, *v170, v174);
  sub_1DA4F95E4();
  uint64_t v178 = v63;
  id v184 = (id)sub_1DA4F96D4();
  v176(v177, v174);
  swift_bridgeObjectRelease();
  sub_1DA4F9A94();
  sub_1DA4F9944();
  LODWORD(v6MEOWVectorBase::clear(this + 4) = 1127219200;
  LODWORD(v6MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement((void *)this - 5) = 1147207680;
  id v193 = objc_msgSend(v181, (SEL)(v180 + 3622), v186, v185, v182, v183, v184, v214[1], v64, v65, 0, 0);

  float v66 = v187;
  v189 = v214;
  v214[0] = 1140457472;
  v190 = &v224;
  v187[16] = 0;
  v66[17] = 0;
  v66[18] = 0;
  v66[19] = 0;
  v66[20] = 0;
  sub_1DA4EBD1C();
  sub_1DA4F9564();

  type metadata accessor for CMFormatDescription();
  v196 = __dst;
  memcpy(__dst, &macinTalkOutputFormat, sizeof(__dst));
  uint64_t v67 = sub_1DA4F9684();
  (*(void (**)(char *, void))(*(void *)(v67 - 8) + 56))(v197, v195);
  uint64_t v68 = sub_1DA4F9914();
  (*(void (**)(char *, void))(*(void *)(v68 - 8) + 56))(v199, v195);
  uint64_t v69 = v200;
  sub_1DA4F9694();
  uint64_t v201 = v69;
  uint64_t v202 = v69;
  if (v69)
  {
    swift_unexpectedError();
    __break(1u);
    goto LABEL_6;
  }
  int v117 = v213;
  int v212 = v213;
  uint64_t v118 = 0;
  sub_1DA4F5A00();
  id v70 = v117;
  id v120 = sub_1DA4EDFFC(v117);
  id v211 = v120;
  unint64_t v119 = sub_1DA4F5A68();
  id v71 = v120;
  uint64_t v72 = v201;
  id v73 = sub_1DA4EE03C(v120);
  uint64_t v121 = v72;
  id v122 = v73;
  uint64_t v123 = v72;
  if (v72)
  {
LABEL_6:
    uint64_t v99 = v123;

    uint64_t v100 = v99;
    goto LABEL_8;
  }
  id v74 = v194;
  __int16 v203 = 16191;
  *(void *)&v194[qword_1EBE3C8A0] = v122;

  float v75 = v187;
  unint64_t v113 = (void *)v187[3];
  v187[15] = 0;
  id v210 = (id)v75[15];
  uint64_t v114 = &v210;
  __int16 v203 = 0x7FFF;
  float v76 = (objc_class *)type metadata accessor for MTMacinTalkAUSPAudioUnit();
  v209.receiver = v113;
  v209.super_class = v76;
  v207[0] = v126;
  v207[1] = v129;
  int v208 = v127;
  v116 = (char *)objc_msgSendSuper2(&v209, sel_initWithComponentDescription_options_error_, v207, v128, v114);
  id v115 = v210;
  id v77 = v210;
  float v78 = (void *)v187[15];
  v187[15] = v115;

  if (v116)
  {
    id v112 = v116;
    uint64_t v111 = v116;
    float v79 = v116;
    uint64_t v80 = v111;
    uint64_t v81 = v111;
    float v82 = v111;
    v187[3] = v111;
    sub_1DA4F5B28();
    uint64_t v105 = sub_1DA4F9A94();
    uint64_t v102 = v83;
    unint64_t v101 = (id *)&v111[qword_1EBE3C8A0];
    int v104 = &v223;
    uint64_t v107 = 0;
    swift_beginAccess();
    id v103 = *v101;
    id v84 = v103;
    void *v102 = v103;
    swift_endAccess();
    uint64_t v85 = v105;
    sub_1DA4EE0C0();
    uint64_t v106 = v85;

    id v109 = sub_1DA4EE104(v111, 2);
    unsigned __int8 v108 = (void **)&v111[qword_1EBE3C858];
    unsigned __int8 v110 = &v222;
    swift_beginAccess();
    uint64_t v86 = *v108;
    char *v108 = v109;

    swift_endAccess();
    return v111;
  }
  id v97 = (id)v187[15];
  uint64_t v98 = sub_1DA4F94A4();

  swift_willThrow();
  uint64_t v100 = v98;
LABEL_8:
  uint64_t v95 = v100;
  if ((v203 & 0x4000) == 0)
  {
    if (v203) {

    }
    sub_1DA4F5AD0((id *)(v187[3] + qword_1EBE3C858));
    sub_1DA4F5AFC();
    sub_1DA4F5AD0((id *)(v187[3] + qword_1EBE3C880));

    sub_1DA4F5AD0((id *)(v187[3] + qword_1EBE3C860));
    sub_1DA4F5AD0((id *)(v187[3] + qword_1EBE3C888));
    sub_1DA4F5AD0((id *)(v187[3] + qword_1EBE3C898));

    uint64_t v90 = v187[3] + qword_1EBE3CC60;
    uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE3C718);
    uint64_t v88 = *(void *)(v91 - 8);
    float v93 = *(void (**)(uint64_t))(v88 + 8);
    uint64_t v92 = v88 + 8;
    v93(v90);
    ((void (*)(uint64_t, uint64_t))v93)(v187[3] + qword_1EBE3CC58, v91);
    ((void (*)(uint64_t, uint64_t))v93)(v187[3] + qword_1EBE3CC40, v91);
    uint64_t v94 = v187[3];
    type metadata accessor for MTMacinTalkAUSPAudioUnit();
    swift_deallocPartialClassInstance();
  }
  return (char *)v96;
}

id sub_1DA4EDFFC(void *a1)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return sub_1DA4F60FC(a1);
}

id sub_1DA4EE03C(void *a1)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v6 = sub_1DA4F6144(a1);
  if (v4) {
    return (id)v3;
  }
  else {
    return v6;
  }
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1DA4EE0C0()
{
}

id sub_1DA4EE104(void *a1, uint64_t a2)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return sub_1DA4F62BC(a1, a2);
}

char *sub_1DA4EE154(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return sub_1DA4ECEB0(*(void *)a3, *(void *)(a3 + 8), *(_DWORD *)(a3 + 16), a4);
}

id sub_1DA4EE270(id a1)
{
  id v1 = a1;
  id v4 = sub_1DA4EE2CC();

  return v4;
}

id sub_1DA4EE2CC()
{
  id v2 = sub_1DA4EA998();
  if (v2) {
    return v2;
  }
  sub_1DA4F9A44();
  __break(1u);
  return (id)v1;
}

void sub_1DA4EE38C()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = v0;
  id v1 = v0;
  id v11 = 0;
  id v9 = 0;
  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for MTMacinTalkAUSPAudioUnit();
  unsigned __int8 v7 = objc_msgSendSuper2(&v8, sel_allocateRenderResourcesAndReturnError_, &v9);
  id v6 = v9;
  id v2 = v9;
  uint64_t v3 = v11;
  id v11 = v6;

  if ((v7 & 1) == 0)
  {
    id v4 = v11;
    sub_1DA4F94A4();

    swift_willThrow();
  }
}

uint64_t sub_1DA4EE4D8(id a1)
{
  id v1 = a1;
  sub_1DA4EE38C();

  return 1;
}

id sub_1DA4EE5DC(id a1)
{
  id v1 = a1;
  id v5 = sub_1DA4EE6A8();
  uint64_t v6 = v2;

  int v13 = v5;
  uint64_t v14 = v6;
  aBlocuint64_t k = MEMORY[0x1E4F143A8];
  int v9 = 1107296256;
  int v10 = 0;
  id v11 = sub_1DA4EE744;
  uint64_t v12 = &block_descriptor;
  id v7 = _Block_copy(&aBlock);
  swift_release();

  return v7;
}

void (*sub_1DA4EE6A8())(_DWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  swift_allocObject();
  id v0 = v2;
  swift_unknownObjectWeakInit();

  swift_retain();
  swift_release();
  return sub_1DA4F5C34;
}

uint64_t sub_1DA4EE744(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, const void *a8)
{
  id v17 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v19 = _Block_copy(a8);
  if (v19)
  {
    *(void *)(swift_allocObject() + 16) = v19;
    int v10 = sub_1DA4F8368;
  }
  else
  {
    int v10 = 0;
  }
  unsigned int v9 = v17(a2, a3, a4, a5, a6, a7);
  sub_1DA4F82EC((uint64_t)v10);
  swift_release();
  return v9;
}

uint64_t sub_1DA4EE884(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(a6 + 16))(a6, a1, a2, a3, a4, a5);
}

void sub_1DA4EE8E8(_DWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v275 = v295;
  v270 = a1;
  uint64_t v269 = a2;
  int v262 = a3;
  uint64_t v274 = a4;
  uint64_t v263 = a5;
  uint64_t v264 = a6;
  uint64_t v265 = a7;
  uint64_t v266 = a8;
  uint64_t v267 = a9;
  uint64_t v256 = 0;
  v243 = sub_1DA4F8148;
  v244 = "Fatal error";
  v245 = "Unexpectedly found nil while unwrapping an Optional value";
  v246 = "MacinTalk/MacinTalkAUSPAudioUnit.swift";
  v247 = "MacinTalkAUSP failed to start speaking with error %@";
  v248 = &dword_1DA47F000;
  v249 = "Unexpectedly found nil while implicitly unwrapping an Optional value";
  uint64_t v349 = 0;
  uint64_t v348 = 0;
  uint64_t v347 = 0;
  int v346 = 0;
  uint64_t v345 = 0;
  uint64_t v344 = 0;
  uint64_t v343 = 0;
  uint64_t v341 = 0;
  uint64_t v342 = 0;
  uint64_t v340 = 0;
  uint64_t v338 = 0;
  uint64_t v336 = 0;
  uint64_t v337 = 0;
  uint64_t v333 = 0;
  uint64_t v331 = 0;
  int v332 = 0;
  v326[1] = 0;
  v325[1] = 0;
  uint64_t v324 = 0;
  uint64_t v322 = 0;
  int v323 = 0;
  int v317 = 0;
  uint64_t v311 = 0;
  uint64_t v268 = 0;
  v250 = 0;
  memset(v295, 0, sizeof(v295));
  uint64_t v293 = 0;
  uint64_t v294 = 0;
  id v285 = 0;
  int v282 = 0;
  uint64_t v251 = sub_1DA4F9584();
  uint64_t v252 = *(void *)(v251 - 8);
  uint64_t v253 = v251 - 8;
  unint64_t v254 = (*(void *)(v252 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1F4188790](0, v9);
  v255 = (uint64_t *)((char *)&v92 - v254);
  uint64_t v257 = sub_1DA4F9624();
  uint64_t v258 = *(void *)(v257 - 8);
  uint64_t v259 = v257 - 8;
  unint64_t v260 = (*(void *)(v258 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1F4188790](v256, v10);
  v261 = (char *)&v92 - v260;
  v275[64] = (char *)&v92 - v260;
  uint64_t v271 = sub_1DA4F9654();
  uint64_t v272 = *(void *)(v271 - 8);
  uint64_t v273 = v271 - 8;
  uint64_t v11 = MEMORY[0x1F4188790](v270, v269);
  uint64_t v12 = v274;
  int v13 = v275;
  v276 = (char *)&v92 - v14;
  v275[63] = v11;
  v13[62] = v15;
  int v346 = v16;
  v13[60] = v12;
  v13[59] = v17;
  v13[58] = v18;
  v13[56] = v19;
  v13[57] = v20;
  uint64_t v277 = v21 + 16;
  v13[55] = v21 + 16;
  v278 = &v339;
  swift_beginAccess();
  v279 = (void *)MEMORY[0x1E0170A60](v277);
  swift_endAccess();
  if (!v279)
  {
    int v241 = -1;
    return;
  }
  v242 = v279;
  id v238 = v279;
  v275[51] = v279;
  sub_1DA4F9664();
  v239 = &v335;
  uint64_t v22 = (void (*)(void))sub_1DA4F9674();
  uint64_t v23 = v275;
  v275[43] = v24;
  v23[44] = v25;
  uint64_t v240 = v23[44];
  uint64_t v336 = v334;
  v23[50] = v240;
  v22();
  (*(void (**)(char *, uint64_t))(v272 + 8))(v276, v271);
  if (v240)
  {
    uint64_t v237 = v240;
  }
  else
  {
    sub_1DA4F9A44();
    __break(1u);
  }
  int v26 = v262;
  uint64_t v233 = v237;
  v275[42] = v237;
  int v329 = 0;
  int v330 = v26;
  uint64_t v234 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8DAA78);
  unint64_t v235 = sub_1DA4F7FD0();
  sub_1DA4F98C4();
  for (unint64_t i = v250; ; unint64_t i = v27)
  {
    v230 = i;
    uint64_t v231 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8DAA88);
    sub_1DA4F9A24();
    int v232 = v327[4];
    if (v328) {
      break;
    }
    int v229 = v232;
    int v282 = v232;
    char v225 = &v280;
    int v280 = v232;
    unint64_t v223 = sub_1DA4F6E40();
    unint64_t v224 = sub_1DA4F6EBC();
    sub_1DA4F6F38();
    sub_1DA4F9814();
    id v27 = v230;
    *(_DWORD *)(v233 + 4 * v28MEOWVectorBase::~MEOWVectorBase(this + 1) = 0;
  }
  uint64_t v227 = sub_1DA4EAB20();
  unint64_t v226 = sub_1DA4F5528();
  uint64_t v228 = MEMORY[0x1E016F370](v227);
  swift_bridgeObjectRelease();
  if (!v228)
  {
    int v222 = -10863;

    int v241 = v222;
    return;
  }
  uint64_t v220 = sub_1DA4EAB20();
  swift_bridgeObjectRetain();
  int v219 = v327;
  v275[36] = v220;
  uint64_t v217 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8DA968);
  unint64_t v218 = sub_1DA4F6D28();
  sub_1DA4F98A4();
  sub_1DA4F5AFC();
  v221 = (void *)v275[37];
  swift_bridgeObjectRelease();
  if (v221)
  {
    v216 = v221;
  }
  else
  {
    sub_1DA4F9A44();
    __break(1u);
  }
  id v215 = v216;
  v275[35] = v216;
  id v28 = sub_1DA4EAC78();
  id v29 = v275;
  v275[34] = v28;
  BOOL v214 = v29[34] == 0;
  BOOL v213 = v214;
  sub_1DA4F5AD0(v326);
  if (v213)
  {
    uint64_t v30 = v230;
    id v208 = objc_msgSend(v215, sel_ssmlRepresentation);
    uint64_t v31 = sub_1DA4F96E4();
    uint64_t v32 = v275;
    uint64_t v33 = v31;
    id v34 = v208;
    uint64_t v209 = v33;
    uint64_t v210 = v35;
    v275[1] = v33;
    v32[2] = v35;

    swift_bridgeObjectRetain();
    sub_1DA4F9614();
    id v211 = v30;
    id v212 = v30;
    if (v30)
    {
      id v102 = v212;
      id v83 = v212;
      void *v275 = v102;
      id v103 = (id)AXTTSLogCommon();
      if (v103)
      {
        unint64_t v101 = v103;
      }
      else
      {
        sub_1DA4F9A44();
        __break(1u);
      }
      id v99 = v101;
      int v97 = sub_1DA4F9904();
      uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8DA940);
      uint64_t v96 = sub_1DA4F9A94();
      uint64_t v94 = v84;
      swift_getErrorValue();
      uint64_t v92 = sub_1DA4F9AC4();
      uint64_t v93 = v85;
      v94[3] = MEMORY[0x1E4FBB1A0];
      unint64_t v86 = sub_1DA4F808C();
      uint64_t v87 = v92;
      uint64_t v88 = v93;
      uint64_t v89 = v94;
      unint64_t v90 = v86;
      uint64_t v91 = v96;
      v94[4] = v90;
      *uint64_t v89 = v87;
      v89[1] = v88;
      sub_1DA4EE0C0();
      uint64_t v98 = v91;
      sub_1DA4F9634();
      swift_bridgeObjectRelease();

      objc_msgSend(v238, sel_cancelSpeechRequest);
      int v100 = sub_1DA4F9644();

      swift_bridgeObjectRelease();
      int v241 = v100;
      return;
    }
    float v176 = sub_1DA4EBE74();
    float v177 = sub_1DA4EC518();
    sub_1DA4F0200();
    uint64_t v187 = sub_1DA4F9604();
    uint64_t v188 = v36;
    uint64_t v293 = v187;
    uint64_t v294 = v36;
    uint64_t v205 = 0;
    sub_1DA4F95B4();
    id v184 = (id)sub_1DA4F95A4();
    id v183 = objc_msgSend(v215, sel_ssmlRepresentation);
    uint64_t v178 = sub_1DA4F96E4();
    uint64_t v179 = v37;
    swift_bridgeObjectRetain();
    id v38 = v255;
    uint64_t v39 = v179;
    uint64_t v40 = v252;
    uint64_t v41 = v187;
    uint64_t v42 = v188;
    uint64_t *v255 = v178;
    v38[1] = v39;
    v38[2] = v41;
    v38[3] = v42;
    (*(void (**)(void))(v40 + 104))();
    id v182 = objc_msgSend(v215, sel_jobIdentifier);
    uint64_t v180 = sub_1DA4F96E4();
    uint64_t v181 = v43;
    sub_1DA4F9594();
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t *, uint64_t))(v252 + 8))(v255, v251);
    id v186 = sub_1DA4EB6A8();
    id v44 = v215;
    uint64_t v45 = swift_allocObject();
    id v46 = v243;
    *(void *)(v45 + 16) = v215;
    v291 = v46;
    uint64_t v292 = v45;
    uint64_t v286 = MEMORY[0x1E4F143A8];
    int v287 = 1107296256;
    int v196 = 0;
    int v288 = 0;
    __int16 v289 = sub_1DA4F0464;
    v290 = &block_descriptor_20;
    id v185 = _Block_copy(&v286);
    swift_release();
    objc_msgSend(v186, sel_setMatchLogger_, v185);
    _Block_release(v185);

    id v190 = sub_1DA4EB6A8();
    swift_bridgeObjectRetain();
    id v189 = (id)sub_1DA4F96D4();
    swift_bridgeObjectRelease();
    id v191 = objc_msgSend(v190, sel_processText_, v189);

    sub_1DA4EAE84(v191);
    id v192 = sub_1DA4EAE1C();
    unint64_t v199 = 0x1F80E1000uLL;
    id v197 = [v192 (SEL)0x1F80E12EBLL];
    uint64_t v193 = sub_1DA4F96E4();
    uint64_t v194 = v47;

    uint64_t v195 = sub_1DA4F9724();
    swift_bridgeObjectRelease();
    sub_1DA4EB2CC(v195, v196);

    unint64_t v198 = sub_1DA4F81B4();
    id v200 = sub_1DA4EAE1C();
    id v203 = [v200 (SEL)(v199 + 747)];
    uint64_t v201 = sub_1DA4F96E4();
    uint64_t v202 = v48;

    id v204 = sub_1DA4F055C();
    id v285 = v204;
    unint64_t v206 = sub_1DA4F821C();
    id v207 = sub_1DA4EB3D4();
    if (v207)
    {
      uint64_t v175 = v207;
    }
    else
    {
      sub_1DA4F9A44();
      __break(1u);
    }
    uint64_t v174 = v175;
    id v49 = v204;
    id v50 = sub_1DA4F05A4(v174, v204);
    sub_1DA4EACE0(v50);
    id v284 = sub_1DA4EAC78();
    if (v284)
    {
      int v170 = &v284;
      id v173 = v284;
      id v51 = v284;
      sub_1DA4F5AD0(v170);
      unint64_t v171 = sub_1DA4F8284();
      sub_1DA4EB800();
      id v172 = sub_1DA4F05EC();
      objc_msgSend(v173, sel_setPitchModulation_);
    }
    else
    {
      sub_1DA4F5AD0(&v284);
    }
    id v283 = sub_1DA4EAC78();
    if (v283)
    {
      uint64_t v168 = &v283;
      id v169 = v283;
      id v52 = v283;
      sub_1DA4F5AD0(v168);
      id v53 = v238;
      objc_msgSend(v169, sel_setDelegate_, v238);
      swift_unknownObjectRelease();
    }
    else
    {
      sub_1DA4F5AD0(&v283);
    }

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v258 + 8))(v261, v257);
    swift_bridgeObjectRelease();
    uint64_t v167 = v211;
  }
  else
  {
    uint64_t v167 = v230;
  }
  uint64_t v165 = v167;
  id v166 = sub_1DA4EAC78();
  if (!v166)
  {
    int v163 = sub_1DA4F9644();

    int v241 = v163;
    return;
  }
  id v164 = v166;
  id v162 = v166;
  v275[33] = v166;
  id v54 = sub_1DA4EAFBC();
  uint64_t v55 = v275;
  v275[32] = v54;
  BOOL v161 = v55[32] == 0;
  BOOL v160 = v161;
  sub_1DA4F5AD0(v325);
  if (v160)
  {
    sub_1DA4EB024(objc_msgSend(v162, sel_nextBuffer));
    id v56 = sub_1DA4EAFBC();
    uint64_t v57 = v275;
    v275[7] = v56;
    BOOL v159 = v57[7] == 0;
    BOOL v158 = v159;
    sub_1DA4F5AD0(&v302);
    id v58 = v238;
    if (v158)
    {
      int v157 = 1;
    }
    else
    {
      id v59 = sub_1DA4EAFBC();
      uint64_t v60 = v275;
      v275[6] = v59;
      if (v60[6])
      {
        uint64_t v153 = &v301;
        id v154 = (id)v275[6];
        id v61 = v154;
        sub_1DA4F5AD0(v153);
        unsigned int v155 = objc_msgSend(v154, sel_frameLength);

        uint64_t v156 = v155;
      }
      else
      {
        unsigned int v152 = 0;
        sub_1DA4F5AD0(&v301);
        uint64_t v156 = v152 | 0x100000000;
      }
      int v297 = v156;
      char v298 = BYTE4(v156) & 1;
      int v299 = 0;
      char v300 = 0;
      BOOL v151 = (v156 & 0x100000000) == 0
          && (sub_1DA4F8070((uint64_t)&v297, (uint64_t)&v296), (v300 & 1) == 0)
          && v296 == v299;
      int v157 = v151;
    }
    int v150 = v157;

    if (v150)
    {
      uint64_t v148 = 0;
      sub_1DA4EB024(0);
      sub_1DA4EACE0(v148);
      sub_1DA4EB174((uint64_t)v148);
      _DWORD *v270 = 128;
      uint64_t v62 = sub_1DA4F9A94();
      sub_1DA4EAB88(v62);
      int v149 = sub_1DA4F9644();

      int v241 = v149;
      return;
    }
    sub_1DA4EB174(0);
  }
  int v63 = v262;
  v275[31] = 0;
  int v320 = 0;
  int v321 = v63;
  sub_1DA4F98C4();
  for (int j = v165; ; int j = v145)
  {
    id v145 = j;
    sub_1DA4F9A24();
    int v146 = v318[4];
    if (v319) {
      break;
    }
    int v144 = v146;
    int v140 = v146;
    int v317 = v146;
    uint64_t v142 = sub_1DA4EAB20();
    swift_bridgeObjectRetain();
    id v141 = &v316;
    v275[23] = v142;
    int v143 = sub_1DA4F98B4();
    sub_1DA4F5AFC();
    swift_bridgeObjectRelease();
    if (v143) {
      break;
    }
    uint64_t v139 = sub_1DA4EB110();
    id v64 = sub_1DA4EAFBC();
    double v65 = v275;
    v275[21] = v64;
    if (v65[21])
    {
      uint64_t v134 = &v314;
      id v135 = (id)v275[21];
      id v66 = v135;
      sub_1DA4F5AD0(v134);
      unsigned int v136 = objc_msgSend(v135, sel_frameLength);

      uint64_t v138 = v136;
    }
    else
    {
      unsigned int v137 = 0;
      sub_1DA4F5AD0(&v314);
      uint64_t v138 = v137 | 0x100000000;
    }
    unsigned int v312 = v138;
    char v313 = BYTE4(v138) & 1;
    if ((v138 & 0x100000000) != 0) {
      unsigned int v315 = 0;
    }
    else {
      unsigned int v315 = v312;
    }
    if (v139 >= v315)
    {
      sub_1DA4EB024(objc_msgSend(v162, sel_nextBuffer));
      id v67 = sub_1DA4EAFBC();
      uint64_t v68 = v275;
      v275[12] = v67;
      BOOL v133 = v68[12] == 0;
      BOOL v132 = v133;
      sub_1DA4F5AD0(&v309);
      id v69 = v238;
      if (v132)
      {
        int v131 = 1;
      }
      else
      {
        id v70 = sub_1DA4EAFBC();
        id v71 = v275;
        v275[11] = v70;
        if (v71[11])
        {
          int v127 = &v308;
          id v128 = (id)v275[11];
          id v72 = v128;
          sub_1DA4F5AD0(v127);
          unsigned int v129 = objc_msgSend(v128, sel_frameLength);

          uint64_t v130 = v129;
        }
        else
        {
          unsigned int v126 = 0;
          sub_1DA4F5AD0(&v308);
          uint64_t v130 = v126 | 0x100000000;
        }
        int v304 = v130;
        char v305 = BYTE4(v130) & 1;
        int v306 = 0;
        char v307 = 0;
        BOOL v125 = (v130 & 0x100000000) == 0
            && (sub_1DA4F8070((uint64_t)&v304, (uint64_t)&v303), (v307 & 1) == 0)
            && v303 == v306;
        int v131 = v125;
      }
      int v124 = v131;

      if (v124)
      {
        sub_1DA4EB024(0);
        break;
      }
      sub_1DA4EB174(0);
    }
    id v123 = sub_1DA4EAFBC();
    if (v123)
    {
      id v122 = v123;
    }
    else
    {
      sub_1DA4F9A44();
      __break(1u);
    }
    id v119 = v122;
    id v120 = objc_msgSend(v122, sel_mutableAudioBufferList);

    uint64_t v121 = v120[2];
    if (v121)
    {
      uint64_t v118 = v121;
    }
    else
    {
      sub_1DA4F9A44();
      __break(1u);
    }
    int v73 = v140;
    uint64_t v115 = v118;
    v275[19] = v118;
    uint64_t v114 = &v310;
    int v310 = v73;
    unint64_t v112 = sub_1DA4F6E40();
    unint64_t v113 = sub_1DA4F6EBC();
    sub_1DA4F6F38();
    sub_1DA4F9814();
    uint64_t v116 = v275[18];
    uint64_t v74 = sub_1DA4EB110();
    float v75 = v275;
    *(_DWORD *)(v233 + 4 * v116) = *(_DWORD *)(v115 + 4 * v74);
    uint64_t v76 = v75[31];
    uint64_t v117 = v76 + 1;
    if (__OFADD__(v76, 1)) {
      goto LABEL_97;
    }
    v275[31] = v117;
    id v109 = sub_1DA4EB1E0();
    unsigned __int8 v110 = v78;
    BOOL v79 = __OFADD__(*v78, 1);
    uint64_t v111 = *v78 + 1;
    char v80 = v79;
    if (v80) {
      goto LABEL_98;
    }
    uint64_t v81 = (void (*)(void))v109;
    *unsigned __int8 v110 = v111;
    v81();
  }
  uint64_t v82 = v275[31];
  uint64_t v108 = 4 * v82;
  if ((unsigned __int128)(4 * (__int128)v82) >> 64 == (4 * v82) >> 63)
  {
    uint64_t v106 = v318;
    v275[25] = v108;
    unint64_t v104 = sub_1DA4F504C();
    unint64_t v105 = sub_1DA4F50C8();
    sub_1DA4F70F4();
    sub_1DA4F97D4();
    HIDWORD(v336) = v318[3];
    LODWORD(v336) = 1;
    int v107 = sub_1DA4F9644();

    int v241 = v107;
    return;
  }
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
}

float sub_1DA4F0200()
{
  return 41.0;
}

void sub_1DA4F020C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  id v29 = a7;
  id v36 = a8;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v47 = 0;
  uint64_t v46 = 0;
  v27[1] = 0;
  uint64_t v43 = sub_1DA4F9584();
  uint64_t v40 = *(void *)(v43 - 8);
  uint64_t v41 = v43 - 8;
  unint64_t v28 = (*(void *)(v40 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1F4188790](0, v31);
  uint64_t v42 = (void *)((char *)v27 - v28);
  uint64_t v52 = v8;
  uint64_t v53 = v9;
  uint64_t v50 = v10;
  uint64_t v51 = v11;
  uint64_t v48 = v12;
  uint64_t v49 = v13;
  uint64_t v47 = v14;
  uint64_t v46 = v15;
  sub_1DA4F95B4();
  id v45 = (id)sub_1DA4F95A4();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v44 = objc_msgSend(v29, sel_identifier);
  uint64_t v16 = sub_1DA4F96E4();
  uint64_t v17 = v31;
  uint64_t v18 = v32;
  uint64_t v19 = v33;
  uint64_t v20 = v34;
  uint64_t v21 = v35;
  uint64_t v22 = v40;
  uint64_t v23 = v16;
  uint64_t v24 = v42;
  *uint64_t v42 = v30;
  v24[1] = v17;
  void v24[2] = v18;
  v24[3] = v19;
  v24[4] = v20;
  v24[5] = v21;
  v24[6] = v23;
  v24[7] = v25;
  (*(void (**)(void))(v22 + 104))();
  id v39 = objc_msgSend(v36, sel_jobIdentifier);
  uint64_t v37 = sub_1DA4F96E4();
  uint64_t v38 = v26;
  sub_1DA4F9594();
  swift_bridgeObjectRelease();

  (*(void (**)(void *, uint64_t))(v40 + 8))(v42, v43);
}

uint64_t sub_1DA4F0464(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a2;
  uint64_t v16 = sub_1DA4F96E4();
  uint64_t v20 = v7;
  id v8 = a5;
  uint64_t v14 = sub_1DA4F96E4();
  uint64_t v18 = v9;
  id v10 = a6;
  v15(v16, v20, a3, a4, v14, v18, a6);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

id sub_1DA4F055C()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return sub_1DA4F6340();
}

id sub_1DA4F05A4(void *a1, void *a2)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return sub_1DA4F639C(a1, a2);
}

id sub_1DA4F05EC()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return sub_1DA4F63F4();
}

void sub_1DA4F062C(void *a1)
{
  id v121 = a1;
  uint64_t v119 = 0;
  int v107 = sub_1DA4F5EE0;
  uint64_t v108 = sub_1DA4F5F90;
  uint64_t v147 = 0;
  uint64_t v146 = 0;
  uint64_t v145 = 0;
  CFBundleRef v135 = 0;
  uint64_t v109 = 0;
  BOOL v132 = 0;
  unint64_t v110 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EA8DA930) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1F4188790](0, v2);
  uint64_t v111 = (uint64_t)v39 - v110;
  uint64_t v112 = sub_1DA4F94D4();
  uint64_t v113 = *(void *)(v112 - 8);
  uint64_t v114 = v112 - 8;
  unint64_t v115 = (*(void *)(v113 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x1F4188790](v119, v3);
  uint64_t v116 = (char *)v39 - v115;
  unint64_t v117 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1F4188790](v4, (char *)v39 - v115);
  uint64_t v118 = (char *)v39 - v117;
  uint64_t v147 = (char *)v39 - v117;
  uint64_t v129 = sub_1DA4F9584();
  uint64_t v126 = *(void *)(v129 - 8);
  uint64_t v127 = v129 - 8;
  unint64_t v120 = (*(void *)(v126 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1F4188790](v119, v6);
  id v128 = (char *)v39 - v120;
  uint64_t v146 = v7;
  uint64_t v145 = v1;
  sub_1DA4F95B4();
  id v130 = (id)sub_1DA4F95A4();
  (*(void (**)(char *, void, uint64_t))(v126 + 104))(v128, *MEMORY[0x1E4FAF220], v129);
  id v125 = objc_msgSend(v121, sel_jobIdentifier);
  uint64_t v122 = sub_1DA4F96E4();
  uint64_t v124 = v8;
  sub_1DA4F9594();
  swift_bridgeObjectRelease();

  (*(void (**)(char *, uint64_t))(v126 + 8))(v128, v129);
  id v144 = sub_1DA4EB528();
  if (v144)
  {
    int v100 = &v144;
    id v101 = v144;
    id v9 = v144;
    sub_1DA4F5AD0(v100);
    id v102 = objc_msgSend(v101, sel_identifier);
    uint64_t v103 = sub_1DA4F96E4();
    uint64_t v104 = v10;

    uint64_t v105 = v103;
    uint64_t v106 = v104;
  }
  else
  {
    uint64_t v43 = 0;
    sub_1DA4F5AD0(&v144);
    uint64_t v105 = v43;
    uint64_t v106 = v43;
  }
  uint64_t v98 = v106;
  uint64_t v97 = v105;
  swift_bridgeObjectRetain();
  id v95 = objc_msgSend(v121, sel_voice);
  id v94 = objc_msgSend(v95, sel_identifier);
  uint64_t v96 = sub_1DA4F96E4();
  uint64_t v99 = v11;

  swift_bridgeObjectRetain();
  v141[0] = v97;
  v141[1] = v98;
  uint64_t v142 = v96;
  uint64_t v143 = v99;
  if (v98)
  {
    sub_1DA4F603C(v141, v131);
    if (v143)
    {
      uint64_t v88 = v142;
      uint64_t v91 = v141;
      uint64_t v89 = v143;
      swift_bridgeObjectRetain();
      unint64_t v90 = v131;
      int v92 = sub_1DA4F9754();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1DA4F5E30();
      sub_1DA4F5E30();
      int v93 = v92;
      goto LABEL_9;
    }
    sub_1DA4F5E30();
    goto LABEL_11;
  }
  if (v143)
  {
LABEL_11:
    sub_1DA4F5C5C();
    int v93 = 0;
    goto LABEL_9;
  }
  sub_1DA4F5E30();
  int v93 = 1;
LABEL_9:
  int v87 = v93;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  if (v87) {
    goto LABEL_25;
  }
  uint64_t v12 = v123;
  id v86 = objc_msgSend(v121, sel_voice);
  (*(void (**)(void))((*v12 & *MEMORY[0x1E4FBC8C8]) + class metadata base offset for MTMacinTalkAUSPAudioUnit + 488))();

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v113 + 48))(v111, 1, v112) == 1)
  {
    sub_1DA4F5C94(v111);
    uint64_t v44 = 25;
    uint64_t v29 = sub_1DA4F9A84();
    uint64_t v50 = &v139;
    uint64_t v139 = v29;
    uint64_t v140 = v30;
    int v48 = 1;
    sub_1DA4F9744();
    uint64_t v45 = v31;
    sub_1DA4F9A74();
    swift_bridgeObjectRelease();
    id v32 = objc_msgSend(v121, sel_voice);
    uint64_t v47 = &v138;
    id v138 = v32;
    uint64_t v53 = 0;
    unint64_t v46 = sub_1DA4F5D44();
    sub_1DA4F5DAC();
    sub_1DA4F9A64();

    sub_1DA4F9744();
    uint64_t v49 = v33;
    sub_1DA4F9A74();
    swift_bridgeObjectRelease();
    uint64_t v52 = v139;
    uint64_t v51 = v140;
    swift_bridgeObjectRetain();
    sub_1DA4F5E30();
    uint64_t v54 = sub_1DA4F9734();
    uint64_t v56 = v34;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8DA940);
    uint64_t v55 = sub_1DA4F9A94();
    sub_1DA4F9504();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v13 = v116;
  (*(void (**)(char *, uint64_t, uint64_t))(v113 + 32))(v118, v111, v112);
  CFAllocatorRef v84 = (CFAllocatorRef)*MEMORY[0x1E4F1CF80];
  CFAllocatorRef v14 = v84;
  (*(void (**)(char *, char *, uint64_t))(v113 + 16))(v13, v118, v112);
  CFURLRef v81 = (CFURLRef)sub_1DA4F94C4();
  CFBundleRef v85 = CFBundleCreate(v84, v81);

  uint64_t v82 = *(void (**)(char *, uint64_t))(v113 + 8);
  uint64_t v83 = v113 + 8;
  v82(v116, v112);

  if (!v85)
  {
    uint64_t v57 = 26;
    uint64_t v24 = sub_1DA4F9A84();
    id v61 = &v136;
    uint64_t v136 = v24;
    uint64_t v137 = v25;
    int v59 = 1;
    sub_1DA4F9744();
    uint64_t v58 = v26;
    sub_1DA4F9A74();
    swift_bridgeObjectRelease();
    sub_1DA4F5E5C();
    sub_1DA4F9A64();
    uint64_t v64 = 0;
    sub_1DA4F9744();
    uint64_t v60 = v27;
    sub_1DA4F9A74();
    swift_bridgeObjectRelease();
    uint64_t v63 = v136;
    uint64_t v62 = v137;
    swift_bridgeObjectRetain();
    sub_1DA4F5E30();
    uint64_t v65 = sub_1DA4F9734();
    uint64_t v67 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8DA940);
    uint64_t v66 = sub_1DA4F9A94();
    sub_1DA4F9504();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v82(v118, v112);
    return;
  }
  CFBundleRef v80 = v85;
  uint64_t v15 = v109;
  CFBundleRef v74 = v85;
  CFBundleRef v135 = v85;
  id v16 = objc_msgSend(self, sel_loadVoiceBundle_, v85);
  sub_1DA4EB43C(v16);
  id v75 = sub_1DA4EB6A8();
  objc_msgSend(v75, sel_reset);

  uint64_t v133 = sub_1DA4ECBB4();
  id v17 = v121;
  uint64_t v76 = v39;
  MEMORY[0x1F4188790](v39, v18);
  id v77 = &v39[-4];
  v39[-2] = v19;
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE3C7B0);
  sub_1DA4F5F0C();
  sub_1DA4F97B4();
  uint64_t v79 = v15;
  if (v15)
  {
    __break(1u);
  }
  else
  {

    sub_1DA4F5AFC();
    int v73 = v134;
    if (!v134) {
      goto LABEL_21;
    }
    id v72 = v73;
    uint64_t v20 = v79;
    id v68 = v73;
    BOOL v132 = v73;
    sub_1DA4F95D4();
    v131[2] = sub_1DA4F95C4();
    uint64_t v21 = v123;
    id v69 = v39;
    MEMORY[0x1F4188790](v39, v22);
    id v70 = &v39[-4];
    v39[-2] = v23;
    uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8DA958);
    sub_1DA4F5FB8();
    sub_1DA4F97C4();
    if (!v20)
    {

      sub_1DA4F5AFC();
LABEL_21:

      v82(v118, v112);
LABEL_25:
      sub_1DA4EB590(objc_msgSend(v121, sel_voice));
      uint64_t v42 = 0;
      v39[1] = sub_1DA4F5528();
      uint64_t v40 = sub_1DA4F9A94();
      v39[0] = v35;
      id v36 = v121;
      uint64_t v37 = v40;
      *(void *)v39[0] = v121;
      sub_1DA4EE0C0();
      sub_1DA4EAB88(v37);
      sub_1DA4F5590();
      int v41 = 1;
      sub_1DA4F9744();
      id v38 = sub_1DA4EAF74();
      sub_1DA4EAE84(v38);
      sub_1DA4EB2CC((uint64_t)v42, v41);
      sub_1DA4EACE0(v42);
      return;
    }
  }
  __break(1u);
}

uint64_t sub_1DA4F1604(id *a1, void *a2)
{
  id v21 = 0;
  uint64_t v20 = 0;
  id v21 = *a1;
  uint64_t v20 = a2;
  id v16 = objc_msgSend(v21, sel_voiceId);
  if (v16)
  {
    uint64_t v11 = sub_1DA4F96E4();
    uint64_t v12 = v2;

    uint64_t v13 = v11;
    uint64_t v14 = v12;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  swift_bridgeObjectRetain();
  id v8 = objc_msgSend(a2, sel_voice);
  id v7 = objc_msgSend(v8, sel_identifier);
  uint64_t v9 = sub_1DA4F96E4();
  uint64_t v10 = v3;

  swift_bridgeObjectRetain();
  v18[0] = v13;
  v18[1] = v14;
  v18[2] = v9;
  uint64_t v19 = v10;
  if (!v14)
  {
    if (!v19)
    {
      sub_1DA4F5E30();
      char v6 = 1;
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  sub_1DA4F603C(v18, &v17);
  if (!v19)
  {
    sub_1DA4F5E30();
LABEL_11:
    sub_1DA4F5C5C();
    char v6 = 0;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v5 = sub_1DA4F9754();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1DA4F5E30();
  char v6 = v5;
LABEL_10:
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v6 & 1;
}

void sub_1DA4F186C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  id v2 = sub_1DA4EB6A8();
  objc_msgSend(v2, sel_loadRuleSet_, v1);
}

void sub_1DA4F18D8(void *a1, int a2, id a3)
{
  id v4 = a3;
  id v5 = a1;
  sub_1DA4F062C(a3);
}

uint64_t sub_1DA4F1930()
{
  if (sub_1DA4F96C4()) {
    return 2;
  }
  else {
    return (sub_1DA4F96C4() & 1) != 0;
  }
}

id sub_1DA4F1A10(id a1)
{
  id v1 = a1;
  sub_1DA4F1A90();

  sub_1DA4F5D44();
  id v4 = (id)sub_1DA4F9824();
  swift_bridgeObjectRelease();

  return v4;
}

uint64_t sub_1DA4F1A90()
{
  uint64_t v12 = v0;
  uint64_t v11 = sub_1DA4ECBB4();
  id v1 = v4;
  id v10 = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE3C7B0);
  unint64_t v6 = sub_1DA4F5D44();
  unint64_t v2 = sub_1DA4F6CA4();
  uint64_t v8 = sub_1DA4F2278((void (*)(char *, char *))sub_1DA4F6C78, (uint64_t)v9, v5, v6, MEMORY[0x1E4FBC248], v2, MEMORY[0x1E4FBC278], v7);

  sub_1DA4F5AFC();
  return v8;
}

void sub_1DA4F1B98(void *a1, int a2, id a3)
{
  id v4 = a3;
  id v5 = a1;
  sub_1DA4F5D44();
  sub_1DA4F9834();
  sub_1DA4F1C00();
}

uint64_t sub_1DA4F1C00()
{
  return swift_bridgeObjectRelease();
}

void sub_1DA4F1C34(id *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  id v40 = 0;
  id v39 = 0;
  id v38 = 0;
  id v40 = *a1;
  id v39 = a2;
  sub_1DA4F5D44();
  id v36 = objc_msgSend(v40, sel_name);
  if (v36)
  {
    sub_1DA4F96E4();
    uint64_t v32 = v3;

    uint64_t v33 = v32;
  }
  else
  {
    uint64_t v33 = 0;
  }
  if (!v33)
  {
    LOBYTE(v8) = 2;
    uint64_t v11 = 245;
    LODWORD(v1MEOWVectorBase::clear(this + 4) = 0;
    sub_1DA4F9A44();
    __break(1u);
  }
  id v31 = objc_msgSend(v40, sel_voiceId, v8, v11, v14);
  if (v31)
  {
    sub_1DA4F96E4();
    uint64_t v29 = v4;

    uint64_t v30 = v29;
  }
  else
  {
    uint64_t v30 = 0;
  }
  if (!v30)
  {
    LOBYTE(vMEOWVectorBase::clear(this + 9) = 2;
    uint64_t v12 = 245;
    LODWORD(v1MiniToolbox::BaseCompositeElement<SpeechElementLog,std::list>::~BaseCompositeElement((void *)this - 5) = 0;
    sub_1DA4F9A44();
    __break(1u);
  }
  id v28 = objc_msgSend(v40, sel_languages, v9, v12, v15);
  if (v28)
  {
    uint64_t v26 = sub_1DA4F9834();

    uint64_t v27 = v26;
  }
  else
  {
    uint64_t v27 = 0;
  }
  if (!v27)
  {
    LOBYTE(v10) = 2;
    uint64_t v13 = 245;
    LODWORD(v16) = 0;
    sub_1DA4F9A44();
    __break(1u);
  }
  id v25 = objc_msgSend(v40, sel_languages, v10, v13, v16);
  if (v25)
  {
    uint64_t v23 = sub_1DA4F9834();

    uint64_t v24 = v23;
  }
  else
  {
    uint64_t v24 = 0;
  }
  if (!v24)
  {
    sub_1DA4F9A44();
    __break(1u);
  }
  id v22 = sub_1DA4F2210();
  id v38 = v22;
  id v5 = objc_msgSend(v40, sel_gender);
  objc_msgSend(v22, sel_setGender_, (*(uint64_t (**)(id))((*a2 & *MEMORY[0x1E4FBC8C8])+ class metadata base offset for MTMacinTalkAUSPAudioUnit+ 480))(v5));
  objc_msgSend(v22, sel_setIsFirstParty_, 1);
  unint64_t v6 = a2;
  objc_msgSend(a2, sel_componentDescription);
  int v17 = v37[5];
  int v18 = v37[6];
  int v19 = v37[7];
  int v20 = v37[8];
  int v21 = v37[9];

  v37[0] = v17;
  v37[1] = v18;
  _DWORD v37[2] = v19;
  v37[3] = v20;
  v37[4] = v21;
  objc_msgSend(v22, sel_setAuComponentDesc_, v37);
  id v7 = v22;
  *a3 = v22;
}

id sub_1DA4F2210()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return sub_1DA4F641C();
}

uint64_t sub_1DA4F2278(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  uint64_t v57 = a3;
  uint64_t v47 = a4;
  uint64_t v34 = a5;
  uint64_t v56 = a6;
  uint64_t v36 = a8;
  uint64_t v37 = "Fatal error";
  id v38 = "Index out of bounds";
  id v39 = "Swift/Collection.swift";
  id v40 = "Range requires lowerBound <= upperBound";
  int v41 = "Swift/Range.swift";
  uint64_t v42 = "Index out of range";
  uint64_t v72 = a3;
  uint64_t v71 = a4;
  uint64_t v70 = a5;
  uint64_t v43 = *(void *)(a5 - 8);
  uint64_t v44 = a5 - 8;
  unint64_t v45 = (*(void *)(v43 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1F4188790](a1, a2);
  unint64_t v46 = (char *)&v17 - v45;
  uint64_t v48 = 0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v50 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v51 = AssociatedTypeWitness - 8;
  unint64_t v52 = (*(void *)(v50 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x1F4188790](v48, v56);
  uint64_t v53 = (char *)&v17 - v52;
  unint64_t v54 = (*(void *)(*(void *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1F4188790](v8, v10);
  uint64_t v55 = (char *)&v17 - v54;
  uint64_t v58 = swift_getAssociatedTypeWitness();
  uint64_t v59 = *(void *)(v58 - 8);
  uint64_t v60 = v58 - 8;
  unint64_t v61 = (*(void *)(v59 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v11 = MEMORY[0x1F4188790](v57, v56);
  uint64_t v62 = (char *)&v17 - v61;
  unint64_t v63 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1F4188790](v11, v13);
  uint64_t v64 = (char *)&v17 - v63;
  uint64_t v65 = sub_1DA4F9884();
  if (v65)
  {
    uint64_t v69 = sub_1DA4F9A04();
    uint64_t v31 = sub_1DA4F9A14();
    sub_1DA4F99E4();
    uint64_t result = sub_1DA4F9874();
    if (v65 >= 0)
    {
      uint64_t v29 = 0;
      for (uint64_t i = v35; ; uint64_t i = v20)
      {
        uint64_t v27 = i;
        uint64_t v28 = v29;
        if (v29 == v65) {
          goto LABEL_17;
        }
        if (v28 < 0 || v28 >= v65) {
          goto LABEL_16;
        }
        uint64_t v67 = v28;
        if (v65 < 0) {
          goto LABEL_15;
        }
        if (v28 >= v65) {
          break;
        }
        uint64_t v26 = v28 + 1;
        if (__OFADD__(v28, 1))
        {
          __break(1u);
          return result;
        }
        char v68 = 0;
        uint64_t v25 = v26;
LABEL_18:
        uint64_t v24 = v25;
        if (v68)
        {
          (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v62, v64, v58);
          sub_1DA4F99C4();
          (*(void (**)(char *, uint64_t))(v59 + 8))(v62, v58);
          uint64_t v21 = v69;
          swift_retain();
          swift_release();
          uint64_t v22 = v21;
          uint64_t v23 = v27;
          return v22;
        }
        int v19 = &v66;
        int v18 = (void (*)(void))sub_1DA4F98E4();
        (*(void (**)(char *))(v50 + 16))(v53);
        v18();
        uint64_t v16 = v27;
        v32(v53, v46);
        uint64_t v20 = v16;
        if (v16)
        {
          (*(void (**)(char *, uint64_t))(v50 + 8))(v53, AssociatedTypeWitness);
          (*(void (**)(char *, uint64_t))(v59 + 8))(v64, v58);
          sub_1DA4F7FA4();
          (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v36, v46, v34);
          return v17;
        }
        (*(void (**)(char *, uint64_t))(v50 + 8))(v53, AssociatedTypeWitness);
        sub_1DA4F99F4();
        sub_1DA4F9894();
        uint64_t result = v20;
        uint64_t v29 = v24;
      }
      sub_1DA4F9A44();
      __break(1u);
LABEL_15:
      sub_1DA4F9A44();
      __break(1u);
LABEL_16:
      sub_1DA4F9A54();
      __break(1u);
LABEL_17:
      uint64_t v67 = 0;
      char v68 = 1;
      uint64_t v25 = v28;
      goto LABEL_18;
    }
    sub_1DA4F9A44();
    __break(1u);
  }
  uint64_t v22 = sub_1DA4F9844();
  uint64_t v23 = v35;
  return v22;
}

uint64_t sub_1DA4F2BB4()
{
  uint64_t v34 = 0;
  uint64_t v18 = 0;
  uint64_t v22 = sub_1DA4F9584();
  uint64_t v20 = *(void *)(v22 - 8);
  uint64_t v21 = v22 - 8;
  unint64_t v19 = (*(void *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1F4188790](0, v1);
  uint64_t v23 = (char *)&v7 - v19;
  uint64_t v34 = v0;
  sub_1DA4F95B4();
  id v24 = (id)sub_1DA4F95A4();
  (*(void (**)(char *, void, uint64_t))(v20 + 104))(v23, *MEMORY[0x1E4FAF218], v22);
  uint64_t v27 = sub_1DA4EAB20();
  swift_bridgeObjectRetain();
  uint64_t v26 = v31;
  v31[0] = v27;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8DA968);
  sub_1DA4F6D28();
  sub_1DA4F98A4();
  sub_1DA4F5AFC();
  id v28 = (id)v31[1];
  swift_bridgeObjectRelease();
  if (v28)
  {
    id v17 = v28;
    id v11 = v28;
    id v12 = objc_msgSend(v28, sel_jobIdentifier);
    uint64_t v13 = sub_1DA4F96E4();
    uint64_t v14 = v2;

    uint64_t v15 = v13;
    uint64_t v16 = v14;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
  }
  uint64_t v29 = v15;
  uint64_t v30 = v16;
  if (v16)
  {
    uint64_t v32 = v29;
    uint64_t v33 = v30;
  }
  else
  {
    uint64_t v32 = sub_1DA4F9744();
    uint64_t v33 = v3;
    sub_1DA4F5E30();
  }
  uint64_t v7 = v33;
  sub_1DA4F9594();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v22);

  id v8 = sub_1DA4EB6A8();
  objc_msgSend(v8, sel_cancelProcessing);

  uint64_t v9 = 0;
  sub_1DA4F5528();
  uint64_t v4 = sub_1DA4F9A94();
  sub_1DA4EAB88(v4);
  sub_1DA4F5590();
  int v10 = 1;
  sub_1DA4F9744();
  id v5 = sub_1DA4EAF74();
  sub_1DA4EAE84(v5);
  sub_1DA4EB024(v9);
  sub_1DA4EB174((uint64_t)v9);
  return sub_1DA4EB2CC((uint64_t)v9, v10);
}

void sub_1DA4F2EDC(id a1)
{
  id v1 = a1;
  sub_1DA4F2BB4();
}

void sub_1DA4F2F1C(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1DA4ECBB4();
  id v2 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE3C7B0);
  sub_1DA4F5F0C();
  sub_1DA4F97B4();

  sub_1DA4F5AFC();
  if (v11)
  {
    id v8 = objc_msgSend(v11, sel_contentPath);
    if (v8)
    {
      sub_1DA4F96E4();
      uint64_t v6 = v3;

      uint64_t v7 = v6;
    }
    else
    {
      uint64_t v7 = 0;
    }
    if (v7)
    {
      sub_1DA4F94B4();
      uint64_t v4 = sub_1DA4F94D4();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v4 - 8) + 56))(a2, 0, 1);
      swift_bridgeObjectRelease();

      return;
    }
  }
  uint64_t v5 = sub_1DA4F94D4();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a2, 1);
}

uint64_t sub_1DA4F31A4(id *a1, void *a2)
{
  id v20 = 0;
  unint64_t v19 = 0;
  id v20 = *a1;
  unint64_t v19 = a2;
  id v15 = objc_msgSend(v20, sel_voiceId);
  if (v15)
  {
    uint64_t v10 = sub_1DA4F96E4();
    uint64_t v11 = v2;

    uint64_t v12 = v10;
    uint64_t v13 = v11;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  swift_bridgeObjectRetain();
  id v7 = objc_msgSend(a2, sel_identifier);
  uint64_t v8 = sub_1DA4F96E4();
  uint64_t v9 = v3;
  swift_bridgeObjectRetain();
  v17[0] = v12;
  v17[1] = v13;
  v17[2] = v8;
  uint64_t v18 = v9;
  if (!v13)
  {
    if (!v18)
    {
      sub_1DA4F5E30();
      char v6 = 1;
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  sub_1DA4F603C(v17, &v16);
  if (!v18)
  {
    sub_1DA4F5E30();
LABEL_11:
    sub_1DA4F5C5C();
    char v6 = 0;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v5 = sub_1DA4F9754();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1DA4F5E30();
  char v6 = v5;
LABEL_10:
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v6 & 1;
}

void sub_1DA4F33E8(uint64_t a1)
{
  sub_1DA4EAB20();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8DA968);
  sub_1DA4F6D28();
  sub_1DA4F98A4();
  sub_1DA4F5AFC();
  if (v13)
  {
    swift_bridgeObjectRelease();
    sub_1DA4F6DD8();
    sub_1DA4F9A84();
    sub_1DA4F9744();
    sub_1DA4F9A74();
    swift_bridgeObjectRelease();
    sub_1DA4F6E40();
    sub_1DA4F6EBC();
    sub_1DA4F6F38();
    sub_1DA4F9814();
    sub_1DA4F9A64();
    sub_1DA4F9744();
    sub_1DA4F9A74();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1DA4F5E30();
    sub_1DA4F9734();
    if ((unsigned __int128)(4 * (__int128)a1) >> 64 == (4 * a1) >> 63)
    {
      id v9 = sub_1DA4F3828();
      id v1 = v12;
      id v10 = objc_msgSend(v12, sel_speechSynthesisOutputMetadataBlock);
      if (v10)
      {
        *(void *)(swift_allocObject() + 16) = v10;
        uint64_t v8 = sub_1DA4F6FF4;
      }
      else
      {
        uint64_t v8 = 0;
      }

      if (v8)
      {
        id v7 = v8;
      }
      else
      {
        sub_1DA4F9A44();
        __break(1u);
      }
      uint64_t v6 = sub_1DA4F9A94();
      char v5 = v2;
      id v3 = v9;
      *char v5 = v9;
      sub_1DA4EE0C0();
      ((void (*)(uint64_t, void *, uint64_t))v7)(v6, v13, v4);
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

id sub_1DA4F3828()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return sub_1DA4F6508();
}

void sub_1DA4F3878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1DA4F6DD8();
  uint64_t v4 = (void *)sub_1DA4F9824();
  (*(void (**)(void))(a3 + 16))();
}

void sub_1DA4F38D8(id a1, uint64_t a2, uint64_t a3)
{
  id v3 = a1;
  sub_1DA4F33E8(a3);
}

void sub_1DA4F3928(uint64_t a1)
{
  sub_1DA4EAB20();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA8DA968);
  sub_1DA4F6D28();
  sub_1DA4F98A4();
  sub_1DA4F5AFC();
  if (v42)
  {
    swift_bridgeObjectRelease();
    id v33 = sub_1DA4EAE1C();
    sub_1DA4F6E40();
    sub_1DA4F6EBC();
    sub_1DA4F5144();
    sub_1DA4F9814();
    sub_1DA4F6FFC();
    sub_1DA4F9814();
    id v39 = (char *)objc_msgSend(v33, sel_translateRangeInTransformedString_, v41, v40);
    uint64_t v34 = v1;

    if (__OFADD__(v39, v34))
    {
      __break(1u);
    }
    else
    {
      if (!&v39[v34]) {
        goto LABEL_7;
      }
      id v30 = sub_1DA4EAE1C();
      id v31 = objc_msgSend(v30, sel_originalString);
      sub_1DA4F96E4();

      sub_1DA4F98F4();
      char v32 = v3;
      swift_bridgeObjectRelease();

      if (v32)
      {
LABEL_7:

        return;
      }
      id v21 = sub_1DA4EAE1C();
      id v24 = objc_msgSend(v21, sel_originalString);
      sub_1DA4F96E4();

      sub_1DA4F97A4();
      id v22 = (id)sub_1DA4F9924();
      swift_bridgeObjectRelease();
      id v23 = objc_msgSend(v22, sel_xmlEscaped);
      uint64_t v28 = sub_1DA4F96E4();
      uint64_t v29 = v4;

      swift_bridgeObjectRelease();
      id v25 = objc_msgSend(v42, sel_ssmlRepresentation);
      uint64_t v26 = sub_1DA4F96E4();
      uint64_t v27 = v5;

      unint64_t v6 = sub_1DA4EB258();
      sub_1DA4F40F4(v28, v29, v6, v7 & 1, v26, v27);
      if (v8) {
        goto LABEL_20;
      }
      sub_1DA4F9774();
      uint64_t v9 = sub_1DA4F9784();
      sub_1DA4EB2CC(v9, 0);
      sub_1DA4F7078();
      uint64_t v38 = sub_1DA4F9764();
      sub_1DA4F6DD8();
      uint64_t v20 = sub_1DA4F9774();
      if ((unsigned __int128)(4 * (__int128)a1) >> 64 == (4 * a1) >> 63)
      {
        sub_1DA4F70F4();
        sub_1DA4F9814();
        id v18 = sub_1DA4F48CC(1, v38, v20, v37);
        id v10 = v36;
        id v19 = objc_msgSend(v36, sel_speechSynthesisOutputMetadataBlock);
        if (v19)
        {
          *(void *)(swift_allocObject() + 16) = v19;
          id v17 = sub_1DA4F6FF4;
        }
        else
        {
          id v17 = 0;
        }

        if (v17)
        {
          uint64_t v16 = v17;
        }
        else
        {
          sub_1DA4F9A44();
          __break(1u);
        }
        uint64_t v15 = sub_1DA4F9A94();
        uint64_t v14 = v11;
        id v12 = v18;
        *uint64_t v14 = v18;
        sub_1DA4EE0C0();
        ((void (*)(uint64_t, void *, uint64_t))v16)(v15, v42, v13);
        swift_bridgeObjectRelease();
        swift_release();

LABEL_20:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1DA4F40F4(uint64_t a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v58 = a1;
  uint64_t v53 = a2;
  unint64_t v54 = a3;
  int v57 = a4;
  uint64_t v55 = a5;
  uint64_t v56 = a6;
  uint64_t v50 = "Fatal error";
  uint64_t v51 = "Range requires lowerBound <= upperBound";
  unint64_t v52 = "Swift/Range.swift";
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  uint64_t v79 = 0;
  char v80 = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  unint64_t v75 = 0;
  unint64_t v59 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EA8DA9A8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v60 = (uint64_t)&v19 - v59;
  uint64_t v81 = MEMORY[0x1F4188790](v58, v53);
  uint64_t v82 = v6;
  uint64_t v79 = v7;
  char v80 = v8 & 1;
  uint64_t v77 = v9;
  uint64_t v78 = v10;
  if (v8)
  {
    v76[2] = v55;
    v76[3] = v56;
    id v25 = v76;
    v76[0] = v58;
    v76[1] = v53;
    uint64_t v23 = 0;
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(sub_1DA4F9514() - 8) + 56);
    int v24 = 1;
    v16(v60, 1);
    sub_1DA4F7078();
    uint64_t v26 = sub_1DA4F9934();
    int v27 = v17;
    sub_1DA4F71B0(v60);
    if (v27)
    {
      uint64_t v20 = 0;
      int v21 = 1;
    }
    else
    {
      uint64_t v22 = v26;
      uint64_t v20 = v26;
      int v21 = 0;
    }
    uint64_t v45 = v20;
    int v46 = v21;
  }
  else
  {
    unint64_t v49 = v54;
    unint64_t v47 = v54;
    unint64_t v75 = v54;
    uint64_t v48 = (uint64_t *)&v74;
    unint64_t v74 = v54;
    uint64_t v73 = MEMORY[0x1E016F2B0](v55, v56);
    if (sub_1DA4F96B4())
    {
      uint64_t v45 = 0;
      int v46 = 1;
    }
    else
    {
      uint64_t v69 = v55;
      uint64_t v70 = v56;
      uint64_t v67 = v58;
      uint64_t v68 = v53;
      unint64_t v44 = MEMORY[0x1E016F2B0]();
      if (v44 >> 14 < v47 >> 14)
      {
        sub_1DA4F9A44();
        __break(1u);
      }
      uint64_t v37 = sub_1DA4F9514();
      uint64_t v11 = *(void *)(v37 - 8);
      uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v11 + 56);
      uint64_t v39 = v11 + 56;
      int v43 = 1;
      v38(v60, 1);
      unint64_t v40 = sub_1DA4F7078();
      *(void *)&long long v41 = sub_1DA4F9934();
      *((void *)&v41 + MEOWVectorBase::~MEOWVectorBase(this + 1) = v12;
      int v42 = v13;
      sub_1DA4F71B0(v60);
      long long v65 = v41;
      char v66 = v42 & 1 & v43;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v66)
      {
        uint64_t v63 = v55;
        uint64_t v64 = v56;
        uint64_t v61 = v58;
        uint64_t v62 = v53;
        unint64_t v36 = sub_1DA4F9724();
        if (v47 >> 14 < v36 >> 14)
        {
          sub_1DA4F9A44();
          __break(1u);
        }
        int v34 = 1;
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v38)(v60, 1, 1, v37);
        uint64_t v35 = sub_1DA4F9934();
        uint64_t v32 = v14;
        int v33 = v15;
        sub_1DA4F71B0(v60);
        *(void *)&long long v71 = v35;
        *((void *)&v71 + MEOWVectorBase::~MEOWVectorBase(this + 1) = v32;
        char v72 = v33 & 1 & v34;
      }
      else
      {
        long long v71 = v65;
        char v72 = 0;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v31 = v71;
      if (v72)
      {
        uint64_t v28 = 0;
        int v29 = 1;
      }
      else
      {
        uint64_t v30 = v31;
        uint64_t v28 = v31;
        int v29 = 0;
      }
      uint64_t v45 = v28;
      int v46 = v29;
    }
  }
  return v45;
}

id sub_1DA4F48CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return sub_1DA4F656C(a1, a2, a3, a4);
}

void sub_1DA4F4924(id a1, uint64_t a2, uint64_t a3)
{
  id v3 = a1;
  sub_1DA4F3928(a3);
}

void sub_1DA4F49A0(id a1)
{
  id v1 = a1;
  sub_1DA4F497C();
}

void sub_1DA4F4A04(id a1)
{
  id v1 = a1;
  sub_1DA4F49F0();
}

uint64_t sub_1DA4F4A44()
{
  sub_1DA4F5AD0((id *)(v0 + qword_1EBE3C858));
  sub_1DA4F5AFC();
  sub_1DA4F5AD0((id *)(v0 + qword_1EBE3C880));

  sub_1DA4F5AD0((id *)(v0 + qword_1EBE3C860));
  sub_1DA4F5AD0((id *)(v0 + qword_1EBE3C888));
  sub_1DA4F5AD0((id *)(v0 + qword_1EBE3C898));

  uint64_t v2 = qword_1EBE3CC60;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE3C718);
  id v4 = *(void (**)(uint64_t))(*(void *)(v3 - 8) + 8);
  v4(v0 + v2);
  ((void (*)(uint64_t, uint64_t))v4)(v0 + qword_1EBE3CC58, v3);
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(v0 + qword_1EBE3CC40, v3);
}

id MTMacinTalkAUSPAudioUnit.__deallocating_deinit()
{
  uint64_t v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MTMacinTalkAUSPAudioUnit();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1DA4F4C08(uint64_t a1)
{
  sub_1DA4F5AD0((id *)(a1 + qword_1EBE3C858));
  sub_1DA4F5AFC();
  sub_1DA4F5AD0((id *)(a1 + qword_1EBE3C880));

  sub_1DA4F5AD0((id *)(a1 + qword_1EBE3C860));
  sub_1DA4F5AD0((id *)(a1 + qword_1EBE3C888));
  sub_1DA4F5AD0((id *)(a1 + qword_1EBE3C898));

  uint64_t v2 = qword_1EBE3CC60;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE3C718);
  uint64_t v5 = *(void (**)(uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1 + v2);
  ((void (*)(uint64_t, uint64_t))v5)(a1 + qword_1EBE3CC58, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1 + qword_1EBE3CC40, v4);
}

Swift::UInt32 __swiftcall String.osType()()
{
  uint64_t v18 = v0;
  uint64_t v19 = v1;
  int v15 = sub_1DA4F54F8;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v26 = 0;
  unint64_t v27 = 0;
  uint64_t v16 = 0;
  uint64_t v24 = sub_1DA4F9714();
  uint64_t v20 = *(void *)(v24 - 8);
  uint64_t v21 = v24 - 8;
  unint64_t v17 = (*(void *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v22 = (char *)v10 - v17;
  uint64_t v31 = MEMORY[0x1F4188790](v18, v19);
  uint64_t v32 = v2;
  uint64_t v30 = 0;
  sub_1DA4F9704();
  sub_1DA4F5040();
  uint64_t v23 = sub_1DA4F96F4();
  unint64_t v25 = v3;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v24);
  if ((v25 & 0xF000000000000000) == 0xF000000000000000) {
    goto LABEL_8;
  }
  uint64_t v13 = v23;
  unint64_t v14 = v25;
  unint64_t v11 = v25;
  uint64_t v12 = v23;
  uint64_t v26 = v23;
  unint64_t v27 = v25;
  if (sub_1DA4F94F4() != 4)
  {
    sub_1DA4F51C0(v12, v11);
    goto LABEL_8;
  }
  uint64_t v5 = v16;
  sub_1DA4F546C(v12, v11);
  v10[5] = v10;
  MEMORY[0x1F4188790](v15, v10);
  uint64_t v6 = &v10[-6];
  v6[2] = v7;
  void v6[3] = v8;
  v6[4] = &v30;
  Swift::UInt32 result = sub_1DA4F94E4();
  if (!v5)
  {
    sub_1DA4F51C0(v12, v11);
    sub_1DA4F51C0(v12, v11);
LABEL_8:
    void v10[3] = &v28;
    uint64_t v28 = v30;
    v10[1] = sub_1DA4F504C();
    _OWORD v10[2] = sub_1DA4F50C8();
    sub_1DA4F5144();
    sub_1DA4F97D4();
    return v29;
  }
  __break(1u);
  return result;
}

uint64_t sub_1DA4F5040()
{
  return 0;
}

unint64_t sub_1DA4F504C()
{
  uint64_t v2 = qword_1EBE3C8A8;
  if (!qword_1EBE3C8A8)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EBE3C8A8);
    return WitnessTable;
  }
  return v2;
}

unint64_t sub_1DA4F50C8()
{
  uint64_t v2 = qword_1EBE3C818;
  if (!qword_1EBE3C818)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EBE3C818);
    return WitnessTable;
  }
  return v2;
}

unint64_t sub_1DA4F5144()
{
  uint64_t v2 = qword_1EBE3C800;
  if (!qword_1EBE3C800)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EBE3C800);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_1DA4F51C0(uint64_t a1, unint64_t a2)
{
  if (((a2 >> 62) & 3) == 1) {
    return swift_release();
  }
  if (((a2 >> 62) & 3) == 2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1DA4F524C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (sub_1DA4F94F4() < 0)
  {
    sub_1DA4F9A44();
    __break(1u);
  }
  sub_1DA4F98D4();
  while (1)
  {
    uint64_t result = sub_1DA4F9A34();
    if (v5) {
      break;
    }
    uint64_t v7 = *a4 << 8;
    sub_1DA4F7E30();
    sub_1DA4F7EAC();
    sub_1DA4F7F28();
    uint64_t result = sub_1DA4F97D4();
    if (__CFADD__(v7, v9))
    {
      __break(1u);
      return result;
    }
    *a4 = v7 + v9;
  }
  return result;
}

uint64_t sub_1DA4F546C(uint64_t a1, unint64_t a2)
{
  if (((a2 >> 62) & 3) == 1) {
    return swift_retain();
  }
  if (((a2 >> 62) & 3) == 2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1DA4F54F8(uint64_t a1)
{
  return sub_1DA4F524C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

unint64_t sub_1DA4F5528()
{
  uint64_t v2 = qword_1EBE3C7A0;
  if (!qword_1EBE3C7A0)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_1EBE3C7A0);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t sub_1DA4F5590()
{
  uint64_t v2 = qword_1EBE3C748;
  if (!qword_1EBE3C748)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_1EBE3C748);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t sub_1DA4F55F8()
{
  uint64_t v2 = qword_1EBE3C750;
  if (!qword_1EBE3C750)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_1EBE3C750);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t v4 = *a1;
  if (*a1 < 0)
  {
    uint64_t TypeByMangledNameInContext2 = swift_getTypeByMangledNameInContext2();
    *a1 = TypeByMangledNameInContext2;
    return TypeByMangledNameInContext2;
  }
  return v4;
}

uint64_t type metadata accessor for AudioUnitParameterOptions()
{
  uint64_t v4 = qword_1EBE3C798;
  if (!qword_1EBE3C798)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EBE3C798);
      return v1;
    }
  }
  return v4;
}

unint64_t sub_1DA4F5774()
{
  uint64_t v2 = qword_1EBE3C780;
  if (!qword_1EBE3C780)
  {
    type metadata accessor for AudioUnitParameterOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EBE3C780);
    return WitnessTable;
  }
  return v2;
}

unint64_t sub_1DA4F57F8()
{
  uint64_t v2 = qword_1EBE3C7C8;
  if (!qword_1EBE3C7C8)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_1EBE3C7C8);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t sub_1DA4F5860()
{
  uint64_t v2 = qword_1EBE3C7C0;
  if (!qword_1EBE3C7C0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EBE3C7B0);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EBE3C7C0);
    return WitnessTable;
  }
  return v2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t v4 = *a1;
  if (*a1 < 0)
  {
    uint64_t TypeByMangledNameInContextInMetadataState2 = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = TypeByMangledNameInContextInMetadataState2;
    return TypeByMangledNameInContextInMetadataState2;
  }
  return v4;
}

uint64_t type metadata accessor for CMFormatDescription()
{
  uint64_t v4 = qword_1EBE3C768;
  if (!qword_1EBE3C768)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EBE3C768);
      return v1;
    }
  }
  return v4;
}

unint64_t sub_1DA4F5A00()
{
  uint64_t v2 = qword_1EBE3C738;
  if (!qword_1EBE3C738)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_1EBE3C738);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t sub_1DA4F5A68()
{
  uint64_t v2 = qword_1EBE3C740;
  if (!qword_1EBE3C740)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_1EBE3C740);
    return ObjCClassMetadata;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1DA4F5AD0(id *a1)
{
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1DA4F5AFC()
{
}

unint64_t sub_1DA4F5B28()
{
  uint64_t v2 = qword_1EBE3C758;
  if (!qword_1EBE3C758)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_1EBE3C758);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 3MEOWVectorBase::~MEOWVectorBase(this + 2) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_1DA4F5BF4()
{
  return swift_deallocObject();
}

void sub_1DA4F5C34(_DWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1DA4EE8E8(a1, a2, a3, a4, a5, a6, a7, a8, v8);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1DA4F5C5C()
{
}

uint64_t sub_1DA4F5C94(uint64_t a1)
{
  uint64_t v3 = sub_1DA4F94D4();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

unint64_t sub_1DA4F5D44()
{
  uint64_t v2 = qword_1EBE3C7E0;
  if (!qword_1EBE3C7E0)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_1EBE3C7E0);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t sub_1DA4F5DAC()
{
  uint64_t v2 = qword_1EA8DA938;
  if (!qword_1EA8DA938)
  {
    sub_1DA4F5D44();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EA8DA938);
    return WitnessTable;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1DA4F5E30()
{
}

unint64_t sub_1DA4F5E5C()
{
  uint64_t v2 = qword_1EA8DA948;
  if (!qword_1EA8DA948)
  {
    sub_1DA4F94D4();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EA8DA948);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_1DA4F5EE0(id *a1)
{
  return sub_1DA4F1604(a1, *(void **)(v1 + 16)) & 1;
}

unint64_t sub_1DA4F5F0C()
{
  uint64_t v2 = qword_1EA8DA950;
  if (!qword_1EA8DA950)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EBE3C7B0);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EA8DA950);
    return WitnessTable;
  }
  return v2;
}

void sub_1DA4F5F90(uint64_t *a1)
{
}

unint64_t sub_1DA4F5FB8()
{
  uint64_t v2 = qword_1EA8DA960;
  if (!qword_1EA8DA960)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA8DA958);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EA8DA960);
    return WitnessTable;
  }
  return v2;
}

void *sub_1DA4F603C(void *a1, void *a2)
{
  *a2 = *a1;
  uint64_t v4 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = a2;
  a2[1] = v4;
  return result;
}

id sub_1DA4F607C()
{
  id v2 = (id)sub_1DA4F96D4();
  id v3 = objc_msgSend(v1, sel_initWithOriginalString_);

  swift_bridgeObjectRelease();
  return v3;
}

id sub_1DA4F60D8()
{
  return objc_msgSend(v0, sel_init);
}

id sub_1DA4F60FC(void *a1)
{
  id v4 = objc_msgSend(v1, sel_initWithCMAudioFormatDescription_);

  return v4;
}

id sub_1DA4F6144(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBE3C728);
  sub_1DA4F837C();
  sub_1DA4F9AB4();
  id v6 = objc_msgSend(v4, sel_initWithFormat_error_, a1, v7);
  id v1 = 0;

  if (v6)
  {

    return v6;
  }
  else
  {
    sub_1DA4F94A4();

    swift_willThrow();
    return (id)v3;
  }
}

id sub_1DA4F62BC(void *a1, uint64_t a2)
{
  sub_1DA4F5A68();
  id v5 = (id)sub_1DA4F9824();
  id v7 = objc_msgSend(v4, sel_initWithAudioUnit_busType_busses_, a1, a2);

  swift_bridgeObjectRelease();
  return v7;
}

id sub_1DA4F6340()
{
  id v2 = (id)sub_1DA4F96D4();
  id v3 = objc_msgSend(v1, sel_initWithString_);

  swift_bridgeObjectRelease();
  return v3;
}

id sub_1DA4F639C(void *a1, void *a2)
{
  id v6 = objc_msgSend(v2, sel_initWithVoice_frontend_);

  return v6;
}

id sub_1DA4F63F4()
{
  return objc_msgSend(v0, sel_initWithFloat_);
}

id sub_1DA4F641C()
{
  id v5 = (void *)sub_1DA4F96D4();
  id v4 = (void *)sub_1DA4F96D4();
  id v3 = (id)sub_1DA4F9824();
  id v2 = (id)sub_1DA4F9824();
  id v6 = objc_msgSend(v1, sel_initWithName_identifier_primaryLanguages_supportedLanguages_, v5, v4, v3);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

id sub_1DA4F6508()
{
  id v2 = (id)sub_1DA4F96D4();
  id v3 = objc_msgSend(v1, sel_initWithBookmarkName_atByteSampleOffset_);

  swift_bridgeObjectRelease();
  return v3;
}

id sub_1DA4F656C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(v4, sel_initWithMarkerType_forTextRange_atByteSampleOffset_, a1, a2, a3, a4);
}

uint64_t sub_1DA4F65BC()
{
  return sub_1DA4F9B74();
}

uint64_t sub_1DA4F6600()
{
  return sub_1DA4F9B04() & 1;
}

uint64_t sub_1DA4F663C()
{
  return sub_1DA4F9B34();
}

uint64_t sub_1DA4F667C()
{
  return sub_1DA4F9B14();
}

uint64_t sub_1DA4F66BC()
{
  return sub_1DA4F9B24();
}

uint64_t sub_1DA4F66FC()
{
  return sub_1DA4F9AD4() & 1;
}

uint64_t sub_1DA4F6740()
{
  return sub_1DA4F9AE4();
}

uint64_t sub_1DA4F6780()
{
  return sub_1DA4F9AF4();
}

uint64_t sub_1DA4F67C0()
{
  return sub_1DA4F9B64();
}

uint64_t sub_1DA4F6804()
{
  return sub_1DA4F9B44();
}

uint64_t sub_1DA4F6848()
{
  return sub_1DA4F9B54();
}

uint64_t sub_1DA4F688C()
{
  return sub_1DA4F9974();
}

uint64_t sub_1DA4F68A4()
{
  return sub_1DA4F9994() & 1;
}

uint64_t sub_1DA4F68C0()
{
  return sub_1DA4F9954() & 1;
}

uint64_t sub_1DA4F68DC()
{
  return sub_1DA4F9964() & 1;
}

uint64_t sub_1DA4F68F8()
{
  return sub_1DA4F9984() & 1;
}

uint64_t sub_1DA4F6914()
{
  return sub_1DA4F99B4();
}

uint64_t sub_1DA4F6950()
{
  return sub_1DA4F99A4();
}

uint64_t sub_1DA4F6968()
{
  return sub_1DA4F9AA4() & 1;
}

uint64_t sub_1DA4F69B4()
{
  return sub_1DA4F9AA4() & 1;
}

uint64_t sub_1DA4F6A00()
{
  return sub_1DA4F9944();
}

uint64_t sub_1DA4F6A40@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = nullsub_1(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1DA4F6A70@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = nullsub_1(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_1DA4F6AB0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = nullsub_1(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_1DA4F6AE0@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = nullsub_1(*a1);
  *(_DWORD *)a2 = result;
  *(unsigned char *)(a2 + MEOWVectorBase::clear(this + 4) = 0;
  return result;
}

uint64_t sub_1DA4F6B20@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = nullsub_1(*v1);
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for TTSSpeechGender()
{
  uint64_t v4 = qword_1EBE3C7D8;
  if (!qword_1EBE3C7D8)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EBE3C7D8);
      return v1;
    }
  }
  return v4;
}

unint64_t sub_1DA4F6BF4()
{
  uint64_t v2 = qword_1EBE3C7E8;
  if (!qword_1EBE3C7E8)
  {
    type metadata accessor for TTSSpeechGender();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EBE3C7E8);
    return WitnessTable;
  }
  return v2;
}

void sub_1DA4F6C78(id *a1@<X0>, void *a2@<X8>)
{
  sub_1DA4F1C34(a1, *(void **)(v2 + 16), a2);
}

unint64_t sub_1DA4F6CA4()
{
  uint64_t v2 = qword_1EBE3C7B8;
  if (!qword_1EBE3C7B8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EBE3C7B0);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EBE3C7B8);
    return WitnessTable;
  }
  return v2;
}

unint64_t sub_1DA4F6D28()
{
  uint64_t v2 = qword_1EA8DA970;
  if (!qword_1EA8DA970)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA8DA968);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EA8DA970);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_1DA4F6DAC(id *a1)
{
  return sub_1DA4F31A4(a1, *(void **)(v1 + 16)) & 1;
}

unint64_t sub_1DA4F6DD8()
{
  uint64_t v2 = qword_1EA8DA978;
  if (!qword_1EA8DA978)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_1EA8DA978);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t sub_1DA4F6E40()
{
  uint64_t v2 = qword_1EA8DA980;
  if (!qword_1EA8DA980)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EA8DA980);
    return WitnessTable;
  }
  return v2;
}

unint64_t sub_1DA4F6EBC()
{
  uint64_t v2 = qword_1EA8DA988;
  if (!qword_1EA8DA988)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EA8DA988);
    return WitnessTable;
  }
  return v2;
}

unint64_t sub_1DA4F6F38()
{
  uint64_t v2 = qword_1EA8DA990;
  if (!qword_1EA8DA990)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EA8DA990);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_1DA4F6FB4()
{
  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_1DA4F6FF4(uint64_t a1, uint64_t a2)
{
  sub_1DA4F3878(a1, a2, *(void *)(v2 + 16));
}

unint64_t sub_1DA4F6FFC()
{
  uint64_t v2 = qword_1EA8DA998;
  if (!qword_1EA8DA998)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EA8DA998);
    return WitnessTable;
  }
  return v2;
}

unint64_t sub_1DA4F7078()
{
  uint64_t v2 = qword_1EBE3C7F0;
  if (!qword_1EBE3C7F0)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EBE3C7F0);
    return WitnessTable;
  }
  return v2;
}

unint64_t sub_1DA4F70F4()
{
  uint64_t v2 = qword_1EA8DA9A0;
  if (!qword_1EA8DA9A0)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EA8DA9A0);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_1DA4F7170()
{
  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1DA4F71B0(uint64_t a1)
{
  uint64_t v3 = sub_1DA4F9514();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

unint64_t sub_1DA4F7260()
{
  return sub_1DA4F7278();
}

unint64_t sub_1DA4F7278()
{
  uint64_t v2 = qword_1EA8DA9B0;
  if (!qword_1EA8DA9B0)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EA8DA9B0);
    return WitnessTable;
  }
  return v2;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t sub_1DA4F7308(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 <= 0xFD) {
      goto LABEL_15;
    }
    unsigned int v7 = ((a2 + 2) >> 8) + 1;
    int v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v8 = v2;
    }
    if (v8 == 1) {
      int v6 = a1[1];
    }
    else {
      int v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    }
    if (v6)
    {
      int v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      int v3 = *a1 - 3;
      if (v3 < 0) {
        int v3 = -1;
      }
      int v5 = v3;
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_1DA4F74B8(unsigned char *result, unsigned int a2, unsigned int a3)
{
  int v7 = 0;
  if (a3 > 0xFD)
  {
    unsigned int v5 = ((a3 + 2) >> 8) + 1;
    int v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v6 = v3;
    }
    int v7 = v6;
  }
  if (a2 > 0xFD)
  {
    unsigned int v4 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + MEOWVectorBase::~MEOWVectorBase(this + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + MEOWVectorBase::~MEOWVectorBase(this + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + MEOWVectorBase::~MEOWVectorBase(this + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + MEOWVectorBase::~MEOWVectorBase(this + 1) = 0;
      }
    }
    if (a2) {
      *uint64_t result = a2 + 2;
    }
  }
  return result;
}

uint64_t sub_1DA4F76FC(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1DA4F7704(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

void *type metadata accessor for MacinTalkParameter()
{
  return &unk_1F34816E8;
}

uint64_t sub_1DA4F7720()
{
  uint64_t inited = sub_1DA4F7A78();
  if (v0 <= 0x3F)
  {
    uint64_t inited = swift_initClassMetadata2();
    if (!inited) {
      return 0;
    }
  }
  return inited;
}

uint64_t method lookup function for MTMacinTalkAUSPAudioUnit()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MTMacinTalkAUSPAudioUnit.didGenerateSamples(forSync:message:)()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x1E4FBC8C8])
                              + class metadata base offset for MTMacinTalkAUSPAudioUnit
                              + 496))();
}

uint64_t dispatch thunk of MTMacinTalkAUSPAudioUnit.didGenerateSamples(forWord:stringPosition:length:)()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x1E4FBC8C8])
                              + class metadata base offset for MTMacinTalkAUSPAudioUnit
                              + 504))();
}

uint64_t dispatch thunk of MTMacinTalkAUSPAudioUnit.didGenerateSamples(forPhoneme:phonemeOpcode:)()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x1E4FBC8C8])
                              + class metadata base offset for MTMacinTalkAUSPAudioUnit
                              + 512))();
}

uint64_t dispatch thunk of MTMacinTalkAUSPAudioUnit.didFinishGeneratingSamples()()
{
  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x1E4FBC8C8])
                              + class metadata base offset for MTMacinTalkAUSPAudioUnit
                              + 520))();
}

uint64_t sub_1DA4F7A78()
{
  uint64_t v4 = qword_1EBE3C848;
  if (!qword_1EBE3C848)
  {
    unint64_t v3 = sub_1DA4F9574();
    uint64_t v4 = v3;
    if (!v0)
    {
      unint64_t v1 = v3;
      atomic_store(v3, (unint64_t *)&qword_1EBE3C848);
      return v1;
    }
  }
  return v4;
}

uint64_t sub_1DA4F7B20()
{
  return type metadata accessor for MTMacinTalkAUSPAudioUnit();
}

unint64_t sub_1DA4F7B3C()
{
  return sub_1DA4F7B54();
}

unint64_t sub_1DA4F7B54()
{
  uint64_t v2 = qword_1EBE3C778;
  if (!qword_1EBE3C778)
  {
    type metadata accessor for AudioUnitParameterOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EBE3C778);
    return WitnessTable;
  }
  return v2;
}

unint64_t sub_1DA4F7BD8()
{
  return sub_1DA4F5774();
}

unint64_t sub_1DA4F7BF0()
{
  return sub_1DA4F7C08();
}

unint64_t sub_1DA4F7C08()
{
  uint64_t v2 = qword_1EBE3C770;
  if (!qword_1EBE3C770)
  {
    type metadata accessor for AudioUnitParameterOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EBE3C770);
    return WitnessTable;
  }
  return v2;
}

unint64_t sub_1DA4F7C8C()
{
  return sub_1DA4F7CA4();
}

unint64_t sub_1DA4F7CA4()
{
  uint64_t v2 = qword_1EBE3C788;
  if (!qword_1EBE3C788)
  {
    type metadata accessor for AudioUnitParameterOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EBE3C788);
    return WitnessTable;
  }
  return v2;
}

unint64_t sub_1DA4F7D28()
{
  uint64_t v2 = qword_1EBE3C790;
  if (!qword_1EBE3C790)
  {
    type metadata accessor for AudioUnitParameterOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EBE3C790);
    return WitnessTable;
  }
  return v2;
}

unint64_t sub_1DA4F7DAC()
{
  uint64_t v2 = qword_1EBE3C7D0;
  if (!qword_1EBE3C7D0)
  {
    type metadata accessor for TTSSpeechGender();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EBE3C7D0);
    return WitnessTable;
  }
  return v2;
}

unint64_t sub_1DA4F7E30()
{
  uint64_t v2 = qword_1EBE3C808;
  if (!qword_1EBE3C808)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EBE3C808);
    return WitnessTable;
  }
  return v2;
}

unint64_t sub_1DA4F7EAC()
{
  uint64_t v2 = qword_1EBE3C7F8;
  if (!qword_1EBE3C7F8)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EBE3C7F8);
    return WitnessTable;
  }
  return v2;
}

unint64_t sub_1DA4F7F28()
{
  uint64_t v2 = qword_1EBE3C810;
  if (!qword_1EBE3C810)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EBE3C810);
    return WitnessTable;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1DA4F7FA4()
{
}

unint64_t sub_1DA4F7FD0()
{
  uint64_t v2 = qword_1EA8DAA80;
  if (!qword_1EA8DAA80)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA8DAA78);
    sub_1DA4F6EBC();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EA8DAA80);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_1DA4F8070(uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(unsigned char *)(a2 + MEOWVectorBase::clear(this + 4) = *(unsigned char *)(a1 + 4);
  return result;
}

unint64_t sub_1DA4F808C()
{
  uint64_t v2 = qword_1EA8DAA90;
  if (!qword_1EA8DAA90)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EA8DAA90);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_1DA4F8108()
{
  return swift_deallocObject();
}

void sub_1DA4F8148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  sub_1DA4F020C(a1, a2, a3, a4, a5, a6, a7, *(void **)(v7 + 16));
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 3MEOWVectorBase::~MEOWVectorBase(this + 2) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

unint64_t sub_1DA4F81B4()
{
  uint64_t v2 = qword_1EA8DAA98;
  if (!qword_1EA8DAA98)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_1EA8DAA98);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t sub_1DA4F821C()
{
  uint64_t v2 = qword_1EA8DAAA0;
  if (!qword_1EA8DAAA0)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_1EA8DAAA0);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t sub_1DA4F8284()
{
  uint64_t v2 = qword_1EA8DAAA8;
  if (!qword_1EA8DAAA8)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&qword_1EA8DAAA8);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_1DA4F82EC(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1DA4F8328()
{
  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1DA4F8368(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  return sub_1DA4EE884(a1, a2, a3, a4, a5, *(void *)(v5 + 16));
}

void sub_1DA4F8370()
{
  *uint64_t v0 = *v0;
}

unint64_t sub_1DA4F837C()
{
  uint64_t v2 = qword_1EBE3C730;
  if (!qword_1EBE3C730)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EBE3C728);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&qword_1EBE3C730);
    return WitnessTable;
  }
  return v2;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  return result;
}

uint64_t sub_1DA4F8414(uint64_t a1, int a2)
{
  if (a2)
  {
    if (*(unsigned char *)(a1 + 24)) {
      int v3 = *(_DWORD *)a1;
    }
    else {
      int v3 = -1;
    }
  }
  else
  {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t sub_1DA4F84F4(uint64_t result, int a2, int a3)
{
  BOOL v3 = a3 != 0;
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    if (a3)
    {
      if (v3) {
        *(unsigned char *)(result + --*(_WORD *)(this + 24) = 1;
      }
      else {
        __break(1u);
      }
    }
  }
  else if (a3)
  {
    if (v3) {
      *(unsigned char *)(result + --*(_WORD *)(this + 24) = 0;
    }
    else {
      __break(1u);
    }
  }
  return result;
}

uint64_t type metadata accessor for AudioBufferList()
{
  uint64_t v4 = qword_1EA8DAAB0;
  if (!qword_1EA8DAAB0)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EA8DAAB0);
      return v1;
    }
  }
  return v4;
}

uint64_t sub_1DA4F877C(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy64_8(void *a1, const void *a2)
{
}

uint64_t sub_1DA4F87EC(uint64_t a1, int a2)
{
  if (a2)
  {
    if (*(unsigned char *)(a1 + 64)) {
      int v3 = *(void *)a1;
    }
    else {
      int v3 = -1;
    }
  }
  else
  {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t sub_1DA4F8914(uint64_t result, int a2, int a3)
{
  BOOL v3 = a3 != 0;
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + --*(_WORD *)(this + 24) = 0;
    *(void *)(result + 3MEOWVectorBase::~MEOWVectorBase(this + 2) = 0;
    *(void *)(result + 40) = 0;
    *(void *)(result + 48) = 0;
    *(void *)(result + 56) = 0;
    if (a3)
    {
      if (v3) {
        *(unsigned char *)(result + 6MEOWVectorBase::clear(this + 4) = 1;
      }
      else {
        __break(1u);
      }
    }
  }
  else if (a3)
  {
    if (v3) {
      *(unsigned char *)(result + 6MEOWVectorBase::clear(this + 4) = 0;
    }
    else {
      __break(1u);
    }
  }
  return result;
}

uint64_t type metadata accessor for AudioTimeStamp()
{
  uint64_t v4 = qword_1EA8DAAB8;
  if (!qword_1EA8DAAB8)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EA8DAAB8);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for AudioUnitRenderActionFlags()
{
  uint64_t v4 = qword_1EA8DAAC0;
  if (!qword_1EA8DAAC0)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EA8DAAC0);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for AudioTimeStampFlags()
{
  uint64_t v4 = qword_1EA8DAAC8;
  if (!qword_1EA8DAAC8)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EA8DAAC8);
      return v1;
    }
  }
  return v4;
}

__n128 __swift_memcpy24_4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  return result;
}

uint64_t type metadata accessor for SMPTETime()
{
  uint64_t v4 = qword_1EA8DAAD0;
  if (!qword_1EA8DAAD0)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EA8DAAD0);
      return v1;
    }
  }
  return v4;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_1DA4F8DBC(uint64_t a1, int a2)
{
  if (a2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      int v3 = *(_OWORD *)a1;
    }
    else {
      int v3 = -1;
    }
  }
  else
  {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t sub_1DA4F8EE8(uint64_t result, int a2, int a3)
{
  BOOL v3 = a3 != 0;
  if (a2)
  {
    *(_OWORD *)__n128 result = (a2 - 1);
    if (a3)
    {
      if (v3) {
        *(unsigned char *)(result + 16) = 1;
      }
      else {
        __break(1u);
      }
    }
  }
  else if (a3)
  {
    if (v3) {
      *(unsigned char *)(result + 16) = 0;
    }
    else {
      __break(1u);
    }
  }
  return result;
}

uint64_t type metadata accessor for AudioBuffer()
{
  uint64_t v4 = qword_1EA8DAAD8;
  if (!qword_1EA8DAAD8)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EA8DAAD8);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for SMPTETimeFlags()
{
  uint64_t v4 = qword_1EA8DAAE0;
  if (!qword_1EA8DAAE0)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EA8DAAE0);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for SMPTETimeType()
{
  uint64_t v4 = qword_1EA8DAAE8;
  if (!qword_1EA8DAAE8)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EA8DAAE8);
      return v1;
    }
  }
  return v4;
}

void SpeechChannelManager::ReadPCMVoiceData()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_1DA47F000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "SpeechChannelManager::UseVoice failed to load meow voice due to missing codec.", v0, 2u);
}

void MTFEToBIPitch::PhraseAccentForOverlappingHighFinalBoundary()
{
  __assert_rtn("PhraseAccentForOverlappingHighFinalBoundary", "MTFEToBIPitch.cp", 2658, "highFinalBoundary->fType == kHighFinalBoundary");
}

void MTBERemoteIOSoundOutput::WaitForOutputToStop(uint8_t *buf, uint64_t a2, void *a3)
{
  *(_DWORD *)buf = 134217984;
  *a3 = a2;
  _os_log_error_impl(&dword_1DA47F000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "MTX WaitForOutputToStop AvailableCapacity not increasing %lu", buf, 0xCu);
}

void SLML::Fatal(SLML *this, const char *a2, ...)
{
  va_start(va, a2);
  BOOL v3 = (FILE **)MEMORY[0x1E4F143C8];
  fwrite("SpeechMatrix: ", 0xEuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
  vfprintf(*v3, (const char *)this, va);
  fputc(10, *v3);
  abort();
}

void MEOWReader::MEOWReader()
{
}

void MTBEAbort(FILE *a1, MTFESpeechVisitor *a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
}

uint64_t sub_1DA4F9484()
{
  return MEMORY[0x1F40E3F58]();
}

uint64_t sub_1DA4F9494()
{
  return MEMORY[0x1F40E4540]();
}

uint64_t sub_1DA4F94A4()
{
  return MEMORY[0x1F40E4550]();
}

uint64_t sub_1DA4F94B4()
{
  return MEMORY[0x1F40E4938]();
}

uint64_t sub_1DA4F94C4()
{
  return MEMORY[0x1F40E49A0]();
}

uint64_t sub_1DA4F94D4()
{
  return MEMORY[0x1F40E4B80]();
}

uint64_t sub_1DA4F94E4()
{
  return MEMORY[0x1F40E4D20]();
}

uint64_t sub_1DA4F94F4()
{
  return MEMORY[0x1F40E4DF0]();
}

uint64_t sub_1DA4F9504()
{
  return MEMORY[0x1F40E5458]();
}

uint64_t sub_1DA4F9514()
{
  return MEMORY[0x1F40E5890]();
}

uint64_t sub_1DA4F9524()
{
  return MEMORY[0x1F4163E68]();
}

uint64_t sub_1DA4F9534()
{
  return MEMORY[0x1F4163E70]();
}

uint64_t sub_1DA4F9544()
{
  return MEMORY[0x1F4163E78]();
}

uint64_t sub_1DA4F9554()
{
  return MEMORY[0x1F4163E80]();
}

uint64_t sub_1DA4F9564()
{
  return MEMORY[0x1F4163E88]();
}

uint64_t sub_1DA4F9574()
{
  return MEMORY[0x1F4163E90]();
}

uint64_t sub_1DA4F9584()
{
  return MEMORY[0x1F4163ED0]();
}

uint64_t sub_1DA4F9594()
{
  return MEMORY[0x1F4163F58]();
}

uint64_t sub_1DA4F95A4()
{
  return MEMORY[0x1F4163F60]();
}

uint64_t sub_1DA4F95B4()
{
  return MEMORY[0x1F4163F68]();
}

uint64_t sub_1DA4F95C4()
{
  return MEMORY[0x1F4163F80]();
}

uint64_t sub_1DA4F95D4()
{
  return MEMORY[0x1F4163F88]();
}

uint64_t sub_1DA4F95E4()
{
  return MEMORY[0x1F4163F90]();
}

uint64_t sub_1DA4F95F4()
{
  return MEMORY[0x1F4163F98]();
}

uint64_t sub_1DA4F9604()
{
  return MEMORY[0x1F4163FA0]();
}

uint64_t sub_1DA4F9614()
{
  return MEMORY[0x1F4163FA8]();
}

uint64_t sub_1DA4F9624()
{
  return MEMORY[0x1F4163FB0]();
}

uint64_t sub_1DA4F9634()
{
  return MEMORY[0x1F41884F0]();
}

uint64_t sub_1DA4F9644()
{
  return MEMORY[0x1F4186BA0]();
}

uint64_t sub_1DA4F9654()
{
  return MEMORY[0x1F41868F8]();
}

uint64_t sub_1DA4F9664()
{
  return MEMORY[0x1F4186900]();
}

uint64_t sub_1DA4F9674()
{
  return MEMORY[0x1F4186908]();
}

uint64_t sub_1DA4F9684()
{
  return MEMORY[0x1F4186938]();
}

uint64_t sub_1DA4F9694()
{
  return MEMORY[0x1F4186A00]();
}

uint64_t sub_1DA4F96A4()
{
  return MEMORY[0x1F4183290]();
}

uint64_t sub_1DA4F96B4()
{
  return MEMORY[0x1F4183760]();
}

uint64_t sub_1DA4F96C4()
{
  return MEMORY[0x1F4183838]();
}

uint64_t sub_1DA4F96D4()
{
  return MEMORY[0x1F40E6190]();
}

uint64_t sub_1DA4F96E4()
{
  return MEMORY[0x1F40E61D8]();
}

uint64_t sub_1DA4F96F4()
{
  return MEMORY[0x1F40E61E8]();
}

uint64_t sub_1DA4F9704()
{
  return MEMORY[0x1F40E6248]();
}

uint64_t sub_1DA4F9714()
{
  return MEMORY[0x1F40E62A0]();
}

uint64_t sub_1DA4F9724()
{
  return MEMORY[0x1F41838A8]();
}

uint64_t sub_1DA4F9734()
{
  return MEMORY[0x1F4183968]();
}

uint64_t sub_1DA4F9744()
{
  return MEMORY[0x1F4183978]();
}

uint64_t sub_1DA4F9754()
{
  return MEMORY[0x1F4183990]();
}

uint64_t sub_1DA4F9764()
{
  return MEMORY[0x1F41839C8]();
}

uint64_t sub_1DA4F9774()
{
  return MEMORY[0x1F41839F0]();
}

uint64_t sub_1DA4F9784()
{
  return MEMORY[0x1F4183A10]();
}

uint64_t sub_1DA4F9794()
{
  return MEMORY[0x1F4183AD0]();
}

uint64_t sub_1DA4F97A4()
{
  return MEMORY[0x1F4183BA0]();
}

uint64_t sub_1DA4F97B4()
{
  return MEMORY[0x1F4183C40]();
}

uint64_t sub_1DA4F97C4()
{
  return MEMORY[0x1F4183C80]();
}

uint64_t sub_1DA4F97D4()
{
  return MEMORY[0x1F4183D00]();
}

uint64_t sub_1DA4F97E4()
{
  return MEMORY[0x1F4183DE0]();
}

uint64_t sub_1DA4F97F4()
{
  return MEMORY[0x1F4183DE8]();
}

uint64_t sub_1DA4F9804()
{
  return MEMORY[0x1F4183DF0]();
}

uint64_t sub_1DA4F9814()
{
  return MEMORY[0x1F4183E70]();
}

uint64_t sub_1DA4F9824()
{
  return MEMORY[0x1F40E6338]();
}

uint64_t sub_1DA4F9834()
{
  return MEMORY[0x1F40E6370]();
}

uint64_t sub_1DA4F9844()
{
  return MEMORY[0x1F4183EF0]();
}

uint64_t sub_1DA4F9854()
{
  return MEMORY[0x1F4183F40]();
}

uint64_t sub_1DA4F9864()
{
  return MEMORY[0x1F4183FA8]();
}

uint64_t sub_1DA4F9874()
{
  return MEMORY[0x1F41842D0]();
}

uint64_t sub_1DA4F9884()
{
  return MEMORY[0x1F41842F8]();
}

uint64_t sub_1DA4F9894()
{
  return MEMORY[0x1F4184338]();
}

uint64_t sub_1DA4F98A4()
{
  return MEMORY[0x1F4184398]();
}

uint64_t sub_1DA4F98B4()
{
  return MEMORY[0x1F41843D0]();
}

uint64_t sub_1DA4F98C4()
{
  return MEMORY[0x1F4184428]();
}

uint64_t sub_1DA4F98D4()
{
  return MEMORY[0x1F4187748]();
}

uint64_t sub_1DA4F98E4()
{
  return MEMORY[0x1F4184440]();
}

uint64_t sub_1DA4F98F4()
{
  return MEMORY[0x1F40E64D8]();
}

uint64_t sub_1DA4F9904()
{
  return MEMORY[0x1F41886E0]();
}

uint64_t sub_1DA4F9914()
{
  return MEMORY[0x1F4186AC8]();
}

uint64_t sub_1DA4F9924()
{
  return MEMORY[0x1F40E6B68]();
}

uint64_t sub_1DA4F9934()
{
  return MEMORY[0x1F40E6D38]();
}

uint64_t sub_1DA4F9944()
{
  return MEMORY[0x1F4184AD0]();
}

uint64_t sub_1DA4F9954()
{
  return MEMORY[0x1F4184AD8]();
}

uint64_t sub_1DA4F9964()
{
  return MEMORY[0x1F4184AE0]();
}

uint64_t sub_1DA4F9974()
{
  return MEMORY[0x1F4184AE8]();
}

uint64_t sub_1DA4F9984()
{
  return MEMORY[0x1F4184AF0]();
}

uint64_t sub_1DA4F9994()
{
  return MEMORY[0x1F4184AF8]();
}

uint64_t sub_1DA4F99A4()
{
  return MEMORY[0x1F4184B00]();
}

uint64_t sub_1DA4F99B4()
{
  return MEMORY[0x1F4184B08]();
}

uint64_t sub_1DA4F99C4()
{
  return MEMORY[0x1F4184BE0]();
}

uint64_t sub_1DA4F99D4()
{
  return MEMORY[0x1F4184EA8]();
}

uint64_t sub_1DA4F99E4()
{
  return MEMORY[0x1F4184EE8]();
}

uint64_t sub_1DA4F99F4()
{
  return MEMORY[0x1F4184F48]();
}

uint64_t sub_1DA4F9A04()
{
  return MEMORY[0x1F4184F68]();
}

uint64_t sub_1DA4F9A14()
{
  return MEMORY[0x1F4184F70]();
}

uint64_t sub_1DA4F9A24()
{
  return MEMORY[0x1F4185060]();
}

uint64_t sub_1DA4F9A34()
{
  return MEMORY[0x1F4187758]();
}

uint64_t sub_1DA4F9A44()
{
  return MEMORY[0x1F4185298]();
}

uint64_t sub_1DA4F9A54()
{
  return MEMORY[0x1F4185398]();
}

uint64_t sub_1DA4F9A64()
{
  return MEMORY[0x1F41859F0]();
}

uint64_t sub_1DA4F9A74()
{
  return MEMORY[0x1F4185A00]();
}

uint64_t sub_1DA4F9A84()
{
  return MEMORY[0x1F4185A08]();
}

uint64_t sub_1DA4F9A94()
{
  return MEMORY[0x1F4185A28]();
}

uint64_t sub_1DA4F9AA4()
{
  return MEMORY[0x1F4185BB0]();
}

uint64_t sub_1DA4F9AB4()
{
  return MEMORY[0x1F4185CF0]();
}

uint64_t sub_1DA4F9AC4()
{
  return MEMORY[0x1F40E6E30]();
}

uint64_t sub_1DA4F9AD4()
{
  return MEMORY[0x1F41862C0]();
}

uint64_t sub_1DA4F9AE4()
{
  return MEMORY[0x1F41862C8]();
}

uint64_t sub_1DA4F9AF4()
{
  return MEMORY[0x1F41862D0]();
}

uint64_t sub_1DA4F9B04()
{
  return MEMORY[0x1F41862D8]();
}

uint64_t sub_1DA4F9B14()
{
  return MEMORY[0x1F41862E0]();
}

uint64_t sub_1DA4F9B24()
{
  return MEMORY[0x1F41862E8]();
}

uint64_t sub_1DA4F9B34()
{
  return MEMORY[0x1F41862F0]();
}

uint64_t sub_1DA4F9B44()
{
  return MEMORY[0x1F41862F8]();
}

uint64_t sub_1DA4F9B54()
{
  return MEMORY[0x1F4186300]();
}

uint64_t sub_1DA4F9B64()
{
  return MEMORY[0x1F4186308]();
}

uint64_t sub_1DA4F9B74()
{
  return MEMORY[0x1F4186310]();
}

uint64_t AXTTSLogCommon()
{
  return MEMORY[0x1F41062E0]();
}

UInt32 AudioComponentCount(const AudioComponentDescription *inDesc)
{
  return MEMORY[0x1F410B470](inDesc);
}

AudioComponent AudioComponentFindNext(AudioComponent inComponent, const AudioComponentDescription *inDesc)
{
  return (AudioComponent)MEMORY[0x1F410B478](inComponent, inDesc);
}

OSStatus AudioComponentInstanceDispose(AudioComponentInstance inInstance)
{
  return MEMORY[0x1F410B498](inInstance);
}

OSStatus AudioComponentInstanceNew(AudioComponent inComponent, AudioComponentInstance *outInstance)
{
  return MEMORY[0x1F410B4A8](inComponent, outInstance);
}

AudioComponent AudioComponentRegister(const AudioComponentDescription *inDesc, CFStringRef inName, UInt32 inVersion, AudioComponentFactoryFunction inFactory)
{
  return (AudioComponent)MEMORY[0x1F410B4B8](inDesc, inName, *(void *)&inVersion, inFactory);
}

OSStatus AudioConverterDispose(AudioConverterRef inAudioConverter)
{
  return MEMORY[0x1F410B4E0](inAudioConverter);
}

OSStatus AudioConverterFillComplexBuffer(AudioConverterRef inAudioConverter, AudioConverterComplexInputDataProc inInputDataProc, void *inInputDataProcUserData, UInt32 *ioOutputDataPacketSize, AudioBufferList *outOutputData, AudioStreamPacketDescription *outPacketDescription)
{
  return MEMORY[0x1F410B4E8](inAudioConverter, inInputDataProc, inInputDataProcUserData, ioOutputDataPacketSize, outOutputData, outPacketDescription);
}

OSStatus AudioConverterNew(const AudioStreamBasicDescription *inSourceFormat, const AudioStreamBasicDescription *inDestinationFormat, AudioConverterRef *outAudioConverter)
{
  return MEMORY[0x1F410B508](inSourceFormat, inDestinationFormat, outAudioConverter);
}

OSStatus AudioConverterReset(AudioConverterRef inAudioConverter)
{
  return MEMORY[0x1F410B528](inAudioConverter);
}

OSStatus AudioConverterSetProperty(AudioConverterRef inAudioConverter, AudioConverterPropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  return MEMORY[0x1F410B530](inAudioConverter, *(void *)&inPropertyID, *(void *)&inPropertyDataSize, inPropertyData);
}

OSStatus AudioFileOptimize(AudioFileID inAudioFile)
{
  return MEMORY[0x1F410B578](inAudioFile);
}

OSStatus AudioFileSetProperty(AudioFileID inAudioFile, AudioFilePropertyID inPropertyID, UInt32 inDataSize, const void *inPropertyData)
{
  return MEMORY[0x1F410B590](inAudioFile, *(void *)&inPropertyID, *(void *)&inDataSize, inPropertyData);
}

OSStatus AudioFormatGetProperty(AudioFormatPropertyID inPropertyID, UInt32 inSpecifierSize, const void *inSpecifier, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  return MEMORY[0x1F410B5A0](*(void *)&inPropertyID, *(void *)&inSpecifierSize, inSpecifier, ioPropertyDataSize, outPropertyData);
}

OSStatus AudioOutputUnitStart(AudioUnit ci)
{
  return MEMORY[0x1F410B5C0](ci);
}

OSStatus AudioOutputUnitStop(AudioUnit ci)
{
  return MEMORY[0x1F410B5C8](ci);
}

OSStatus AudioUnitSetProperty(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, const void *inData, UInt32 inDataSize)
{
  return MEMORY[0x1F410B690](inUnit, *(void *)&inID, *(void *)&inScope, *(void *)&inElement, inData, *(void *)&inDataSize);
}

OSStatus AudioUnitUninitialize(AudioUnit inUnit)
{
  return MEMORY[0x1F410B698](inUnit);
}

uint64_t CEMCreateEmojiLocaleData()
{
  return MEMORY[0x1F4113BB0]();
}

uint64_t CEMEmojiTokenCopyName()
{
  return MEMORY[0x1F4113BF0]();
}

uint64_t CEMEmojiTokenCreateWithString()
{
  return MEMORY[0x1F4113C20]();
}

uint64_t CEMEmojiTokenGetString()
{
  return MEMORY[0x1F4113C58]();
}

uint64_t CEMEnumerateEmojiTokensInStringWithLocaleAndBlock()
{
  return MEMORY[0x1F4113C78]();
}

uint64_t CEMStringContainsEmoji()
{
  return MEMORY[0x1F4113C88]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7170](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x1F40D74D0](bundle, resourceName, resourceType, subDirName);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x1F40D7528](allocator, bundleURL);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1F40D7568](bundle);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7990](allocator, theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1F40D7A18](theDict, key, value);
}

CFErrorRef CFErrorCreateWithUserInfoKeysAndValues(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, const void *const *userInfoKeys, const void *const *userInfoValues, CFIndex numUserInfoValues)
{
  return (CFErrorRef)MEMORY[0x1F40D7AA0](allocator, domain, code, userInfoKeys, userInfoValues, numUserInfoValues);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x1F40D7BE0](allocator, localeIdentifier);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7EA0](key, applicationID);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F58](allocator, stream, streamLength, options, format, error);
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x1F40D7FC0](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x1F40D7FF8](stream);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1F40D83F0](alloc, theString);
}

CFDataRef CFStringCreateExternalRepresentation(CFAllocatorRef alloc, CFStringRef theString, CFStringEncoding encoding, UInt8 lossByte)
{
  return (CFDataRef)MEMORY[0x1F40D83F8](alloc, theString, *(void *)&encoding, lossByte);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8410](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8458](alloc, cStr, *(void *)&encoding, contentsDeallocator);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1F40D8528](theString, idx);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1F40D8540](theString);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8590](length, *(void *)&encoding);
}

void CFStringInsert(CFMutableStringRef str, CFIndex idx, CFStringRef insertedStr)
{
}

void CFStringReplace(CFMutableStringRef theString, CFRange range, CFStringRef replacement)
{
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x1F40D8758](anURL, pathStyle);
}

OSStatus ExtAudioFileCreateWithURL(CFURLRef inURL, AudioFileTypeID inFileType, const AudioStreamBasicDescription *inStreamDesc, const AudioChannelLayout *inChannelLayout, UInt32 inFlags, ExtAudioFileRef *outExtAudioFile)
{
  return MEMORY[0x1F410B6C0](inURL, *(void *)&inFileType, inStreamDesc, inChannelLayout, *(void *)&inFlags, outExtAudioFile);
}

OSStatus ExtAudioFileDispose(ExtAudioFileRef inExtAudioFile)
{
  return MEMORY[0x1F410B6C8](inExtAudioFile);
}

OSStatus ExtAudioFileGetProperty(ExtAudioFileRef inExtAudioFile, ExtAudioFilePropertyID inPropertyID, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  return MEMORY[0x1F410B6D0](inExtAudioFile, *(void *)&inPropertyID, ioPropertyDataSize, outPropertyData);
}

OSStatus ExtAudioFileSetProperty(ExtAudioFileRef inExtAudioFile, ExtAudioFilePropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  return MEMORY[0x1F410B6F8](inExtAudioFile, *(void *)&inPropertyID, *(void *)&inPropertyDataSize, inPropertyData);
}

OSStatus ExtAudioFileWrite(ExtAudioFileRef inExtAudioFile, UInt32 inNumberFrames, const AudioBufferList *ioData)
{
  return MEMORY[0x1F410B710](inExtAudioFile, *(void *)&inNumberFrames, ioData);
}

uint64_t SLHomographCopyTune()
{
  return MEMORY[0x1F415B178]();
}

uint64_t SLHomographGetPOS()
{
  return MEMORY[0x1F415B180]();
}

uint64_t SLHomographGetPhonemes()
{
  return MEMORY[0x1F415B188]();
}

uint64_t SLHomographGetTags()
{
  return MEMORY[0x1F415B190]();
}

uint64_t SLTokenCountHomographs()
{
  return MEMORY[0x1F415B198]();
}

uint64_t SLTokenCreateTemp()
{
  return MEMORY[0x1F415B1A0]();
}

uint64_t SLTokenGetClass()
{
  return MEMORY[0x1F415B1A8]();
}

uint64_t SLTokenGetHomograph()
{
  return MEMORY[0x1F415B1B0]();
}

uint64_t SLTokenGetInfo()
{
  return MEMORY[0x1F415B1B8]();
}

uint64_t SLTokenGetText()
{
  return MEMORY[0x1F415B1C0]();
}

uint64_t SLTokenGetTupleGroup()
{
  return MEMORY[0x1F415B1C8]();
}

uint64_t SLTokenRelease()
{
  return MEMORY[0x1F415B1D0]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t SLFirstPOSInSet()
{
  return MEMORY[0x1F415B1D8]();
}

uint64_t SLGetSpeechDictionaryBundle(void)
{
  return MEMORY[0x1F415B1E0]();
}

void SLMMapHint::~SLMMapHint(SLMMapHint *this)
{
}

uint64_t SLMMapCache::Map(SLMMapCache *this, const __CFURL *a2, SLMMapHint *a3)
{
  return MEMORY[0x1F415B1F0](this, a2, a3);
}

uint64_t SLMMapCache::Unmap(SLMMapCache *this, void *a2)
{
  return MEMORY[0x1F415B1F8](this, a2);
}

uint64_t SLDictLookup::CreatePhonemeSymbols(SLDictLookup *this, const __CFLocale *a2)
{
  return MEMORY[0x1F415B200](this, a2);
}

uint64_t SLDictLookup::Create(SLDictLookup *this, const __CFLocale *a2)
{
  return MEMORY[0x1F415B208](this, a2);
}

void SLDictionary::SLDictionary(SLDictionary *this)
{
}

void SLDictionary::~SLDictionary(SLDictionary *this)
{
}

uint64_t SLPronouncer::Create(SLPronouncer *this, const __CFLocale *a2, const SLDictLookup *a3)
{
  return MEMORY[0x1F415B220](this, a2, a3);
}

void SLWordBuilder::SLWordBuilder(SLWordBuilder *this)
{
}

void SLWordBuilder::~SLWordBuilder(SLWordBuilder *this)
{
}

uint64_t SLEncyclopedia::Lookup(SLEncyclopedia *this, const char *a2, uint64_t a3, SLWordBuilder *a4, SLDictionary *a5)
{
  return MEMORY[0x1F415B240](this, a2, a3, a4, a5);
}

uint64_t SLEncyclopedia::Remove(SLEncyclopedia *this, SLDictionary *a2)
{
  return MEMORY[0x1F415B248](this, a2);
}

uint64_t SLEncyclopedia::PushBack(SLEncyclopedia *this, SLDictionary *a2)
{
  return MEMORY[0x1F415B250](this, a2);
}

void SLEncyclopedia::~SLEncyclopedia(SLEncyclopedia *this)
{
}

uint64_t SLCFArrayBuilder::CreateArray(SLCFArrayBuilder *this)
{
  return MEMORY[0x1F415B260](this);
}

void SLCFArrayBuilder::~SLCFArrayBuilder(SLCFArrayBuilder *this)
{
}

{
  MEMORY[0x1F415B270](this);
}

void SLCFStringTextSource::SLCFStringTextSource(SLCFStringTextSource *this, const __CFString *a2)
{
}

{
  MEMORY[0x1F415B280](this, a2);
}

void SLCFStringTextSource::~SLCFStringTextSource(SLCFStringTextSource *this)
{
}

{
  MEMORY[0x1F415B290](this);
}

uint64_t SLCFDictionaryBuilder::CreateDictionary(SLCFDictionaryBuilder *this)
{
  return MEMORY[0x1F415B298](this);
}

uint64_t SLCFDictionaryBuilder::push_back(SLCFDictionaryBuilder *this, const void *a2, const void *a3)
{
  return MEMORY[0x1F415B2A0](this, a2, a3);
}

uint64_t SLTag::Name(SLTag *this)
{
  return MEMORY[0x1F415B2A8](this);
}

uint64_t SLLexer::Create()
{
  return MEMORY[0x1F415B2B0]();
}

uint64_t SLBndEng::Name(SLBndEng *this)
{
  return MEMORY[0x1F415B2B8](this);
}

uint64_t SLTagEng::Name(SLTagEng *this)
{
  return MEMORY[0x1F415B2C0](this);
}

uint64_t SLDictLookup::Lookup(SLDictLookup *this, SLDictionary *a2, const char *a3, uint64_t a4, SLToken *a5)
{
  return MEMORY[0x1F415B2C8](this, a2, a3, a4, a5);
}

uint64_t SLWordTagSet::find(SLWordTagSet *this)
{
  return MEMORY[0x1F415B2D0](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E438](this, a2);
}

{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

uint64_t std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>()
{
  return MEMORY[0x1F417EC58]();
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

uint64_t operator+=()
{
  return MEMORY[0x1F415B2D8]();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1F40C9B60](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1F417EFA8](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

double __exp10(double a1)
{
  MEMORY[0x1F40C9B90](a1);
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

__float2 __sincosf_stret(float a1)
{
  MEMORY[0x1F40C9C88](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void abort(void)
{
}

int asl_log(asl_object_t client, asl_object_t msg, int level, const char *format, ...)
{
  return MEMORY[0x1F40CA408](client, msg, *(void *)&level, format);
}

double atof(const char *a1)
{
  MEMORY[0x1F40CA498](a1);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x1F40CA4A8](a1);
}

uint64_t atol(const char *a1)
{
  return MEMORY[0x1F40CA4B8](a1);
}

void bzero(void *a1, size_t a2)
{
}

void catlas_sset(const int __N, const float __alpha, float *__X, const int __incX)
{
}

int cblas_isamax(const int __N, const float *__X, const int __incX)
{
  return MEMORY[0x1F40D15C8](*(void *)&__N, __X, *(void *)&__incX);
}

void cblas_saxpy(const int __N, const float __alpha, const float *__X, const int __incX, float *__Y, const int __incY)
{
}

void cblas_scopy(const int __N, const float *__X, const int __incX, float *__Y, const int __incY)
{
}

float cblas_sdot(const int __N, const float *__X, const int __incX, const float *__Y, const int __incY)
{
  MEMORY[0x1F40D15F8](*(void *)&__N, __X, *(void *)&__incX, __Y, *(void *)&__incY);
  return result;
}

void cblas_sgemm(const CBLAS_ORDER __Order, const CBLAS_TRANSPOSE __TransA, const CBLAS_TRANSPOSE __TransB, const int __M, const int __N, const int __K, const float __alpha, const float *__A, const int __lda, const float *__B, const int __ldb, const float __beta, float *__C, const int __ldc)
{
}

void cblas_sgemv(const CBLAS_ORDER __Order, const CBLAS_TRANSPOSE __TransA, const int __M, const int __N, const float __alpha, const float *__A, const int __lda, const float *__X, const int __incX, const float __beta, float *__Y, const int __incY)
{
}

void cblas_sscal(const int __N, const float __alpha, float *__X, const int __incX)
{
}

clock_t clock(void)
{
  return MEMORY[0x1F40CB3B8]();
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

float cosf(float a1)
{
  MEMORY[0x1F40CB8B0](a1);
  return result;
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
}

uint64_t dispatch_set_qos_class_fallback()
{
  return MEMORY[0x1F40CBC70]();
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

void dispatch_source_set_event_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  return MEMORY[0x1F40CBD40](when, delta);
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1F40CBD58](label);
}

uint64_t dispatch_workloop_set_scheduler_priority()
{
  return MEMORY[0x1F40CBD88]();
}

int dlclose(void *__handle)
{
  return MEMORY[0x1F40CBDA8](__handle);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

void exit(int a1)
{
}

long double exp2(long double __x)
{
  MEMORY[0x1F40CBFE8](__x);
  return result;
}

float exp2f(float a1)
{
  MEMORY[0x1F40CBFF0](a1);
  return result;
}

float expf(float a1)
{
  MEMORY[0x1F40CBFF8](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1F40CC058](*(void *)&a1, *(void *)&a2);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1F40CC0C8](a1);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1F40CC1E8](*(void *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1F40CC1F0](a1, a2);
}

void free(void *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1F40CC2B8](*(void *)&a1, a2);
}

FILE *__cdecl funopen(const void *a1, int (__cdecl *a2)(void *, char *, int), int (__cdecl *a3)(void *, const char *, int), fpos_t (__cdecl *a4)(void *, fpos_t, int), int (__cdecl *a5)(void *))
{
  return (FILE *)MEMORY[0x1F40CC320](a1, a2, a3, a4, a5);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1F40CC3B0](a1);
}

int getpagesize(void)
{
  return MEMORY[0x1F40CC480]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1F40CC568](a1, a2);
}

long double log(long double __x)
{
  MEMORY[0x1F40CC878](__x);
  return result;
}

float log2f(float a1)
{
  MEMORY[0x1F40CC8B0](a1);
  return result;
}

float logf(float a1)
{
  MEMORY[0x1F40CC8C0](a1);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB10](__size);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

int mincore(const void *a1, size_t a2, char *a3)
{
  return MEMORY[0x1F40CCDA0](a1, a2, a3);
}

int mlock(const void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE38](a1, a2);
}

int munlock(const void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE80](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_destroyWeak(id *location)
{
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

int posix_madvise(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1F40CD788](a1, a2, *(void *)&a3);
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x1F40CD818](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  MEMORY[0x1F40CD828](a1, a2);
  return result;
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1F40CD830](*(void *)&__fd, __buf, __nbyte, a4);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1F40CD838](a1);
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD978](a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD980](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1F40CD988](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD990](a1);
}

int pthread_cond_timedwait(pthread_cond_t *a1, pthread_mutex_t *a2, const timespec *a3)
{
  return MEMORY[0x1F40CD998](a1, a2, a3);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1F40CD9A8](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1F40CD9B8](a1, a2, a3, a4);
}

int pthread_detach(pthread_t a1)
{
  return MEMORY[0x1F40CD9D8](a1);
}

void pthread_exit(void *a1)
{
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA78](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1F40CDAA8](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1F40CDAC0](a1, *(void *)&a2);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1F40CDAC8](a1, a2);
}

int putchar(int a1)
{
  return MEMORY[0x1F40CDBA8](*(void *)&a1);
}

int puts(const char *a1)
{
  return MEMORY[0x1F40CDBB8](a1);
}

uint64_t random(void)
{
  return MEMORY[0x1F40CDC18]();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1F40CDC50](*(void *)&a1, a2, a3);
}

float scalbnf(float a1, int a2)
{
  MEMORY[0x1F40CDEA0](*(void *)&a2, a1);
  return result;
}

int sgesvd_(char *__jobu, char *__jobvt, __CLPK_integer *__m, __CLPK_integer *__n, __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_real *__s, __CLPK_real *__u, __CLPK_integer *__ldu, __CLPK_real *__vt, __CLPK_integer *__ldvt, __CLPK_real *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return MEMORY[0x1F40D1800](__jobu, __jobvt, __m, __n, __a, __lda, __s, __u);
}

float sinhf(float a1)
{
  MEMORY[0x1F40CE070](a1);
  return result;
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1F40CE078](*(void *)&a1);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0A0](a1, a2);
}

void srandom(unsigned int a1)
{
}

int ssyevr_(char *__jobz, char *__range, char *__uplo, __CLPK_integer *__n, __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_real *__vl, __CLPK_real *__vu, __CLPK_integer *__il, __CLPK_integer *__iu, __CLPK_real *__abstol, __CLPK_integer *__m, __CLPK_real *__w, __CLPK_real *__z__, __CLPK_integer *__ldz, __CLPK_integer *__isuppz, __CLPK_real *__work, __CLPK_integer *__lwork, __CLPK_integer *__iwork, __CLPK_integer *__liwork,__CLPK_integer *__info)
{
  return MEMORY[0x1F40D1920](__jobz, __range, __uplo, __n, __a, __lda, __vl, __vu);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE150](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x1F40CE168](__dst, __src);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

char *__cdecl strtok_r(char *__str, const char *__sep, char **__lasts)
{
  return (char *)MEMORY[0x1F40CE298](__str, __sep, __lasts);
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1F4186430]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1F4186498]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1F41864A0]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1F4186518]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1F4186530]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1F4186540]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x1F4186580]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1F41865A8]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1F41865F8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1F4186608]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1F4186628]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1F4186670]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1F4186688]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x1F4186708]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1F41867D8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1F41867E0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1F4186858]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1F4186860]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1F4186868]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1F41868E0]();
}

void uiter_setString(UCharIterator *iter, const UChar *s, int32_t length)
{
}

uint64_t unorm_next()
{
  return MEMORY[0x1F4180278]();
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1F40CE608](*(void *)&a1);
}

FFTSetup vDSP_create_fftsetup(vDSP_Length __Log2n, FFTRadix __Radix)
{
  return (FFTSetup)MEMORY[0x1F40D19F0](__Log2n, *(void *)&__Radix);
}

void vDSP_ctoz(const DSPComplex *__C, vDSP_Stride __IC, const DSPSplitComplex *__Z, vDSP_Stride __IZ, vDSP_Length __N)
{
}

void vDSP_destroy_fftsetup(FFTSetup __setup)
{
}

void vDSP_fft_zrip(FFTSetup __Setup, const DSPSplitComplex *__C, vDSP_Stride __IC, vDSP_Length __Log2N, FFTDirection __Direction)
{
}

void vDSP_hann_window(float *__C, vDSP_Length __N, int __Flag)
{
}

void vDSP_maxvi(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length *__I, vDSP_Length __N)
{
}

void vDSP_sve(const float *__A, vDSP_Stride __I, float *__C, vDSP_Length __N)
{
}

void vDSP_svemg(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
}

void vDSP_vclip(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
}

void vDSP_vma(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, const float *__C, vDSP_Stride __IC, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
}

void vDSP_vmma(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, const float *__C, vDSP_Stride __IC, const float *__D, vDSP_Stride __ID, float *__E, vDSP_Stride __IE, vDSP_Length __N)
{
}

void vDSP_vmsb(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, const float *__C, vDSP_Stride __IC, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
}

void vDSP_vmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vramp(const float *__A, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_ztoc(const DSPSplitComplex *__Z, vDSP_Stride __IZ, DSPComplex *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_zvcmul(const DSPSplitComplex *__A, vDSP_Stride __IA, const DSPSplitComplex *__B, vDSP_Stride __IB, const DSPSplitComplex *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x1F40CE690](a1, a2, a3);
}

int vsprintf(char *a1, const char *a2, va_list a3)
{
  return MEMORY[0x1F40CE7A0](a1, a2, a3);
}